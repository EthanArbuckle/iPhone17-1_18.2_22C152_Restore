uint64_t sub_100F46424(void **a1)
{
  void *v1;
  uint64_t result;
  void *v3;

  v1 = *a1;
  swift_beginAccess();
  result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    v3 = (void *)result;
    swift_retain();

    [v1 connectionState];
    CurrentValueSubject.send(_:)();
    return swift_release();
  }
  return result;
}

id sub_100F464EC()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for KVOHelperNWDatagramConnection();
  return [super dealloc];
}

uint64_t NWConnectionState.description.getter()
{
  return 0x4E574F4E4B4E553CLL;
}

uint64_t sub_100F46680()
{
  uint64_t result = 0x64696C61766E692ELL;
  switch(*v0)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = 0x676E69746961772ELL;
      break;
    case 2:
      uint64_t result = 0x697261706572702ELL;
      break;
    case 3:
      uint64_t result = 0x79646165722ELL;
      break;
    case 4:
      uint64_t result = 0x64656C6961662ELL;
      break;
    case 5:
      uint64_t result = 0x6C6C65636E61632ELL;
      break;
    default:
      uint64_t result = 0x4E574F4E4B4E553CLL;
      break;
  }
  return result;
}

uint64_t type metadata accessor for MessagingDatagramConnection()
{
  return self;
}

uint64_t type metadata accessor for KVOHelperNWDatagramConnection()
{
  return self;
}

const char *sub_100F467B8()
{
  return "connectionState";
}

id sub_100F467C4@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = [*a1 connectionState];
  *a2 = result;
  return result;
}

uint64_t sub_100F467F8()
{
  swift_unknownObjectWeakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100F46830(void **a1)
{
  return sub_100F46424(a1);
}

uint64_t sub_100F46838()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100F46870()
{
  return sub_100F459D4();
}

uint64_t sub_100F46878(void *a1, uint64_t a2)
{
  return sub_100F45B94(a1, a2);
}

uint64_t sub_100F46880(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100F46890()
{
  return swift_release();
}

uint64_t sub_100F46898()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100F468D0(uint64_t a1)
{
  return sub_100F46130(a1, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 16));
}

uint64_t sub_100F468EC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Notification();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(void (**)(char *))(a1 + 32);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v6(v5);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_100F469E0()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_1016650C8);
  uint64_t v1 = sub_100010324(v0, (uint64_t)qword_1016650C8);
  if (qword_101637220 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100010324(v0, (uint64_t)qword_10170EF48);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100F46AA8()
{
  sub_10000588C((uint64_t *)&unk_101638CE0);
  uint64_t result = swift_allocObject();
  *(_DWORD *)(result + 16) = 0;
  qword_1016650E0 = result;
  return result;
}

uint64_t sub_100F46AE0()
{
  type metadata accessor for ReferenceClock.IsolationDomain();
  uint64_t v0 = swift_allocObject();
  uint64_t result = swift_defaultActor_initialize();
  qword_1016650E8 = v0;
  return result;
}

uint64_t sub_100F46B20()
{
  uint64_t v0 = type metadata accessor for Date();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v7 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Date.distantPast.getter();
  Date.timeIntervalSinceReferenceDate.getter();
  uint64_t v5 = v4;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  qword_1016650F0 = v5;
  return result;
}

double sub_100F46BF8()
{
  if (qword_101637210 != -1) {
    swift_once();
  }
  double result = *(double *)&qword_1016650F0;
  qword_101665110 = qword_1016650F0;
  return result;
}

BOOL sub_100F46C4C()
{
  if (qword_101637200 != -1) {
    swift_once();
  }
  sub_10000588C(&qword_101639448);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  double v0 = *(double *)&v7;
  if ((aBlock & 1) == 0)
  {
    id v1 = [self defaultCenter];
    v10 = sub_100F478FC;
    uint64_t v11 = 0;
    aBlock = _NSConcreteStackBlock;
    uint64_t v7 = 1107296256;
    uint64_t v8 = sub_100F468EC;
    v9 = &unk_1015FEBD8;
    uint64_t v2 = _Block_copy(&aBlock);
    swift_release();
    id v3 = [v1 addObserverForName:NSSystemClockDidChangeNotification object:0 queue:0 usingBlock:v2];
    _Block_release(v2);

    swift_unknownObjectRelease();
  }
  if (qword_101637210 != -1) {
    swift_once();
  }
  double v4 = *(double *)&qword_1016650F0;
  if (*(double *)&qword_1016650F0 >= v0) {
    sub_100F47194(0);
  }
  return v4 < v0;
}

double sub_100F46E34()
{
  uint64_t v0 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)v8 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100F46C4C();
  double Current = CFAbsoluteTimeGetCurrent();
  if (qword_101637200 != -1) {
    swift_once();
  }
  sub_10000588C(&qword_101639450);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  double v4 = Current - v8[2];
  if (v4 - v8[3] > 86400.0)
  {
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    uint64_t v5 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v2, 1, 1, v5);
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = 0;
    *(void *)(v6 + 24) = 0;
    sub_1008F5E44((uint64_t)v2, (uint64_t)&unk_101639458, v6);
    swift_release();
  }
  return v4;
}

double sub_100F47004@<D0>(void *a1@<X8>)
{
  *a1 = qword_101665100;
  if (qword_101637218 != -1) {
    swift_once();
  }
  double result = *(double *)&qword_101665110;
  a1[1] = qword_101665110;
  return result;
}

void sub_100F47074()
{
  byte_101665118 = 1;
}

uint64_t sub_100F47084()
{
  return _swift_task_switch(sub_100F470A0, 0, 0);
}

uint64_t sub_100F470A0()
{
  if (qword_101637208 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_1016650E8;
  return _swift_task_switch(sub_100F47134, v0, 0);
}

uint64_t sub_100F47134()
{
  sub_100F47194(1);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_100F47194(char a1)
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) == 0) {
    goto LABEL_29;
  }
  if (qword_101637200 != -1) {
    swift_once();
  }
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  if (LOBYTE(v41[0]) == 1)
  {
LABEL_29:
    if (TMIsAutomaticTimeEnabled())
    {
      if (qword_101637200 != -1) {
        swift_once();
      }
      OSAllocatedUnfairLock.callAsFunction<A>(_:)();
      if (qword_1016371F8 != -1) {
        swift_once();
      }
      uint64_t v6 = type metadata accessor for Logger();
      sub_100010324(v6, (uint64_t)qword_1016650C8);
      uint64_t v7 = Logger.logObject.getter();
      os_log_type_t v8 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v7, v8)) {
        goto LABEL_26;
      }
      v9 = (uint8_t *)swift_slowAlloc();
      v41[0] = swift_slowAlloc();
      *(_DWORD *)v9 = 136446210;
      sub_100F46E34();
      Date.init(timeIntervalSinceReferenceDate:)();
      sub_100B64C58();
      uint64_t v10 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v11 = v3;
      unint64_t v13 = v12;
      (*(void (**)(char *, uint64_t))(v11 + 8))(v5, v2);
      uint64_t v40 = sub_1008FA0F0(v10, v13, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "ReferenceClock calibrated: %{public}s delta: 0.0 uncertainty: 0.0", v9, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
LABEL_25:
      swift_slowDealloc();
LABEL_26:

      return;
    }
    if (qword_1016371F8 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_100010324(v14, (uint64_t)qword_1016650C8);
    v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Automatic time is DISABLED", v17, 2u);
      swift_slowDealloc();
    }

    *(double *)&uint64_t v18 = COERCE_DOUBLE(sub_100F47A18());
    if ((v20 & 0x100000000) == 0)
    {
      uint64_t v21 = v18;
      uint64_t v22 = *(void *)&v19;
      int v23 = v20;
      double v24 = *(double *)&v18;
      double v25 = v19;
      double Current = CFAbsoluteTimeGetCurrent();
      if (v25 > 1.0)
      {
        v28 = Logger.logObject.getter();
        os_log_type_t v29 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v28, v29))
        {
          v30 = (_DWORD *)swift_slowAlloc();
          uint64_t v39 = v3;
          v31 = v30;
          _DWORD *v30 = 134218240;
          v41[0] = v22;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *((_WORD *)v31 + 6) = 1024;
          LODWORD(v41[0]) = v23;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v28, v29, "TMGMReferenceTime reports high uncertainty: %f (reliability: %d", (uint8_t *)v31, 0x12u);
          uint64_t v3 = v39;
          swift_slowDealloc();
        }
      }
      double v32 = Current - v24;
      if (qword_101637200 != -1) {
        uint64_t v26 = swift_once();
      }
      __chkstk_darwin(v26);
      *((double *)&v39 - 4) = v32;
      *(&v39 - 3) = v22;
      *(&v39 - 2) = v21;
      OSAllocatedUnfairLock.callAsFunction<A>(_:)();
      uint64_t v7 = Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v7, v33)) {
        goto LABEL_26;
      }
      uint64_t v34 = swift_slowAlloc();
      v41[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v34 = 136446722;
      sub_100F46E34();
      Date.init(timeIntervalSinceReferenceDate:)();
      sub_100B64C58();
      uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v36 = v3;
      unint64_t v38 = v37;
      (*(void (**)(char *, uint64_t))(v36 + 8))(v5, v2);
      uint64_t v40 = sub_1008FA0F0(v35, v38, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v34 + 12) = 2048;
      uint64_t v40 = *(void *)&v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v34 + 22) = 2048;
      uint64_t v40 = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v7, v33, "ReferenceClock calibrated: %{public}s delta: %f uncertainty: %f", (uint8_t *)v34, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      goto LABEL_25;
    }
  }
}

uint64_t type metadata accessor for ReferenceClock.IsolationDomain()
{
  return self;
}

double sub_100F47884@<D0>(uint64_t a1@<X8>)
{
  char v2 = byte_1016650F8;
  byte_1016650F8 = 1;
  *(unsigned char *)a1 = v2;
  if (qword_101637218 != -1) {
    swift_once();
  }
  double result = *(double *)&qword_101665110;
  *(void *)(a1 + 8) = qword_101665110;
  return result;
}

void sub_100F478FC()
{
}

void sub_100F47904()
{
  qword_101665100 = 0;
  qword_101665108 = 0;
  if (qword_101637218 != -1) {
    swift_once();
  }
  qword_101665110 = CFAbsoluteTimeGetCurrent();
  byte_101665118 = 0;
}

uint64_t sub_100F4797C()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170EF48);
  sub_100010324(v0, (uint64_t)qword_10170EF48);
  return Logger.init(subsystem:category:)();
}

void sub_100F47A00()
{
}

uint64_t sub_100F47A18()
{
  return 0;
}

uint64_t sub_100F47AA0()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  qword_101665100 = v0[2];
  qword_101665108 = v1;
  if (qword_101637218 != -1) {
    uint64_t result = swift_once();
  }
  qword_101665110 = v2;
  byte_101665118 = 0;
  return result;
}

void sub_100F47B24(unsigned char *a1@<X8>)
{
  *a1 = byte_101665118;
}

uint64_t sub_100F47B34(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100F47B44()
{
  return swift_release();
}

uint64_t sub_100F47B4C()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

ValueMetadata *type metadata accessor for SearchpartyCredential()
{
  return &type metadata for SearchpartyCredential;
}

uint64_t sub_100F47B98(void *(*a1)(void *__return_ptr, void), uint64_t a2, uint64_t a3)
{
  void *(*v25)(void *__return_ptr, void);
  uint64_t v26;
  uint64_t v27;
  int64_t v28;
  void v29[2];
  char v30;
  uint64_t v31;
  char v32;

  uint64_t v4 = a3;
  v27 = a3 + 56;
  uint64_t v6 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a3 + 56);
  v28 = (unint64_t)(v6 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v10 = 0;
  uint64_t v11 = _swiftEmptyArrayStorage;
  uint64_t v26 = v4;
  double v25 = a1;
  while (1)
  {
    if (v8)
    {
      unint64_t v12 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v13 = v12 | (v10 << 6);
      goto LABEL_19;
    }
    if (__OFADD__(v10++, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v10 >= v28) {
      goto LABEL_31;
    }
    unint64_t v15 = *(void *)(v27 + 8 * v10);
    if (!v15) {
      break;
    }
LABEL_18:
    unint64_t v8 = (v15 - 1) & v15;
    unint64_t v13 = __clz(__rbit64(v15)) + (v10 << 6);
LABEL_19:
    double v32 = *(unsigned char *)(*(void *)(v4 + 48) + v13);
    uint64_t result = (uint64_t)a1(v29, &v32);
    if (v3)
    {
      swift_bridgeObjectRelease();
LABEL_31:
      swift_release();
      return (uint64_t)v11;
    }
    char v17 = v30;
    if (v30 != 2)
    {
      char v19 = v29[0];
      uint64_t v18 = v29[1];
      uint64_t v20 = v31;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_100A6EB70(0, v11[2] + 1, 1, v11);
        uint64_t v11 = (void *)result;
      }
      unint64_t v22 = v11[2];
      unint64_t v21 = v11[3];
      int v23 = v11;
      if (v22 >= v21 >> 1)
      {
        uint64_t result = (uint64_t)sub_100A6EB70((void *)(v21 > 1), v22 + 1, 1, v11);
        int v23 = (void *)result;
      }
      v23[2] = v22 + 1;
      uint64_t v11 = v23;
      double v24 = &v23[4 * v22];
      *((unsigned char *)v24 + 32) = v19;
      v24[5] = v18;
      *((unsigned char *)v24 + 48) = v17 & 1;
      v24[7] = v20;
      uint64_t v4 = v26;
      a1 = v25;
    }
  }
  int64_t v16 = v10 + 1;
  if (v10 + 1 >= v28) {
    goto LABEL_31;
  }
  unint64_t v15 = *(void *)(v27 + 8 * v16);
  if (v15) {
    goto LABEL_17;
  }
  int64_t v16 = v10 + 2;
  if (v10 + 2 >= v28) {
    goto LABEL_31;
  }
  unint64_t v15 = *(void *)(v27 + 8 * v16);
  if (v15) {
    goto LABEL_17;
  }
  int64_t v16 = v10 + 3;
  if (v10 + 3 >= v28) {
    goto LABEL_31;
  }
  unint64_t v15 = *(void *)(v27 + 8 * v16);
  if (v15) {
    goto LABEL_17;
  }
  int64_t v16 = v10 + 4;
  if (v10 + 4 >= v28) {
    goto LABEL_31;
  }
  unint64_t v15 = *(void *)(v27 + 8 * v16);
  if (v15)
  {
LABEL_17:
    int64_t v10 = v16;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v10 = v16 + 1;
    if (__OFADD__(v16, 1)) {
      break;
    }
    if (v10 >= v28) {
      goto LABEL_31;
    }
    unint64_t v15 = *(void *)(v27 + 8 * v10);
    ++v16;
    if (v15) {
      goto LABEL_18;
    }
  }
LABEL_33:
  __break(1u);
  return result;
}

void *sub_100F47E10(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_10000588C(&qword_101665268);
  __chkstk_darwin(v7 - 8);
  v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for KeyDropCreateRequest.Member(0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v30 = (uint64_t)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v28 = (uint64_t)&v24 - v14;
  uint64_t v15 = *(void *)(a3 + 16);
  if (!v15) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v16 = *(void *)(type metadata accessor for OwnerPeerTrust() - 8);
  uint64_t v17 = a3 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
  uint64_t v25 = v11;
  uint64_t v18 = (unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  uint64_t v29 = *(void *)(v16 + 72);
  uint64_t v24 = a3;
  swift_bridgeObjectRetain();
  char v19 = _swiftEmptyArrayStorage;
  uint64_t v26 = v10;
  uint64_t v27 = a2;
  do
  {
    a1(v17);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v19;
    }
    if ((*v18)(v9, 1, v10) == 1)
    {
      sub_10001DAB4((uint64_t)v9, &qword_101665268);
    }
    else
    {
      uint64_t v20 = v28;
      sub_100F66E8C((uint64_t)v9, v28, type metadata accessor for KeyDropCreateRequest.Member);
      sub_100F66E8C(v20, v30, type metadata accessor for KeyDropCreateRequest.Member);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        char v19 = (void *)sub_100A6F600(0, v19[2] + 1, 1, (unint64_t)v19);
      }
      unint64_t v22 = v19[2];
      unint64_t v21 = v19[3];
      if (v22 >= v21 >> 1) {
        char v19 = (void *)sub_100A6F600(v21 > 1, v22 + 1, 1, (unint64_t)v19);
      }
      v19[2] = v22 + 1;
      sub_100F66E8C(v30, (uint64_t)v19+ ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80))+ *(void *)(v25 + 72) * v22, type metadata accessor for KeyDropCreateRequest.Member);
      uint64_t v10 = v26;
    }
    v17 += v29;
    --v15;
  }
  while (v15);
  swift_bridgeObjectRelease();
  return v19;
}

void *sub_100F48140(void (*a1)(char *), uint64_t a2, uint64_t a3)
{
  v49 = a1;
  uint64_t v50 = a2;
  uint64_t v5 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v8 = *(void *)(v46 - 8);
  uint64_t v9 = __chkstk_darwin(v46);
  uint64_t v41 = (uint64_t)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v39 = (uint64_t)&v38 - v11;
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void *)(a3 + 56);
  uint64_t v43 = a3 + 56;
  uint64_t v20 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v21 = -1;
  if (v20 < 64) {
    uint64_t v21 = ~(-1 << v20);
  }
  unint64_t v22 = v21 & v19;
  uint64_t v52 = v13 + 16;
  v53 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
  uint64_t v51 = v13 + 48;
  v47 = (void (**)(char *, uint64_t))(v13 + 8);
  v48 = (void (**)(char *, char *, uint64_t))(v13 + 32);
  uint64_t v40 = v8;
  int64_t v44 = (unint64_t)(v20 + 63) >> 6;
  v45 = (unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
  uint64_t v54 = a3;
  uint64_t result = (void *)swift_bridgeObjectRetain();
  int64_t v24 = 0;
  v42 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v22)
    {
      unint64_t v25 = __clz(__rbit64(v22));
      v22 &= v22 - 1;
      unint64_t v26 = v25 | (v24 << 6);
      goto LABEL_19;
    }
    if (__OFADD__(v24++, 1))
    {
      __break(1u);
      goto LABEL_38;
    }
    if (v24 >= v44) {
      goto LABEL_34;
    }
    unint64_t v28 = *(void *)(v43 + 8 * v24);
    if (!v28) {
      break;
    }
LABEL_18:
    unint64_t v22 = (v28 - 1) & v28;
    unint64_t v26 = __clz(__rbit64(v28)) + (v24 << 6);
LABEL_19:
    (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))(v18, *(void *)(v54 + 48) + *(void *)(v13 + 72) * v26, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v18, 0, 1, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v18, 1, v12) == 1)
    {
      swift_release();
      return v42;
    }
    (*v48)(v15, v18, v12);
    v49(v15);
    if (v3)
    {
      (*v47)(v15, v12);
      unint64_t v37 = v42;
      swift_bridgeObjectRelease();
      goto LABEL_35;
    }
    (*v47)(v15, v12);
    if ((*v45)(v7, 1, v46) == 1)
    {
      uint64_t result = (void *)sub_10001DAB4((uint64_t)v7, &qword_10163B9F0);
    }
    else
    {
      unint64_t v38 = type metadata accessor for OwnedBeaconRecord;
      uint64_t v30 = v39;
      sub_100F66E8C((uint64_t)v7, v39, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      sub_100F66E8C(v30, v41, (uint64_t (*)(void))v38);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        v42 = (void *)sub_100A6F6C4(0, v42[2] + 1, 1, (unint64_t)v42);
      }
      unint64_t v32 = v42[2];
      unint64_t v31 = v42[3];
      os_log_type_t v33 = (uint64_t (*)())(v32 + 1);
      if (v32 >= v31 >> 1)
      {
        unint64_t v38 = (uint64_t (*)())(v32 + 1);
        uint64_t v36 = (void *)sub_100A6F6C4(v31 > 1, v32 + 1, 1, (unint64_t)v42);
        os_log_type_t v33 = v38;
        v42 = v36;
      }
      uint64_t v34 = v41;
      uint64_t v35 = v42;
      v42[2] = v33;
      uint64_t result = (void *)sub_100F66E8C(v34, (uint64_t)v35+ ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80))+ *(void *)(v40 + 72) * v32, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    }
  }
  int64_t v29 = v24 + 1;
  if (v24 + 1 >= v44) {
    goto LABEL_34;
  }
  unint64_t v28 = *(void *)(v43 + 8 * v29);
  if (v28) {
    goto LABEL_17;
  }
  int64_t v29 = v24 + 2;
  if (v24 + 2 >= v44) {
    goto LABEL_34;
  }
  unint64_t v28 = *(void *)(v43 + 8 * v29);
  if (v28) {
    goto LABEL_17;
  }
  int64_t v29 = v24 + 3;
  if (v24 + 3 >= v44) {
    goto LABEL_34;
  }
  unint64_t v28 = *(void *)(v43 + 8 * v29);
  if (v28) {
    goto LABEL_17;
  }
  int64_t v29 = v24 + 4;
  if (v24 + 4 >= v44)
  {
LABEL_34:
    unint64_t v37 = v42;
    (*v53)(v18, 1, 1, v12);
LABEL_35:
    swift_release();
    return v37;
  }
  unint64_t v28 = *(void *)(v43 + 8 * v29);
  if (v28)
  {
LABEL_17:
    int64_t v24 = v29;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v24 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v24 >= v44) {
      goto LABEL_34;
    }
    unint64_t v28 = *(void *)(v43 + 8 * v24);
    ++v29;
    if (v28) {
      goto LABEL_18;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

void *sub_100F48708(void (*a1)(void), uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000588C(&qword_101665260);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_10000588C(&qword_10163A958);
  uint64_t v9 = __chkstk_darwin(v26);
  uint64_t v25 = (uint64_t)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v24 = (uint64_t)&v21 - v12;
  uint64_t v13 = *(void *)(a3 + 16);
  if (!v13) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v21 = v11;
  uint64_t v14 = (unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  swift_bridgeObjectRetain();
  uint64_t v15 = 0;
  uint64_t v16 = _swiftEmptyArrayStorage;
  unint64_t v22 = a1;
  uint64_t v23 = a3;
  do
  {
    uint64_t v27 = *(void *)(a3 + 8 * v15 + 32);
    a1(&v27);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v16;
    }
    if ((*v14)(v8, 1, v26) == 1)
    {
      sub_10001DAB4((uint64_t)v8, &qword_101665260);
    }
    else
    {
      uint64_t v17 = v24;
      sub_10001D608((uint64_t)v8, v24, &qword_10163A958);
      sub_10001D608(v17, v25, &qword_10163A958);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v16 = (void *)sub_100A70A28(0, v16[2] + 1, 1, (unint64_t)v16);
      }
      unint64_t v19 = v16[2];
      unint64_t v18 = v16[3];
      if (v19 >= v18 >> 1) {
        uint64_t v16 = (void *)sub_100A70A28(v18 > 1, v19 + 1, 1, (unint64_t)v16);
      }
      v16[2] = v19 + 1;
      sub_10001D608(v25, (uint64_t)v16+ ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80))+ *(void *)(v21 + 72) * v19, &qword_10163A958);
      a1 = v22;
      a3 = v23;
    }
    ++v15;
  }
  while (v13 != v15);
  swift_bridgeObjectRelease();
  return v16;
}

void *sub_100F489CC(void (*a1)(uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v7 = sub_10000588C(&qword_101649690);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for RawSearchResult();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v30 = (uint64_t)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v28 = (uint64_t)&v24 - v14;
  uint64_t v15 = *(void *)(a3 + 16);
  if (!v15) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v16 = *(void *)(type metadata accessor for ObservedAdvertisement(0) - 8);
  uint64_t v17 = a3 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
  uint64_t v25 = v11;
  unint64_t v18 = (unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  uint64_t v29 = *(void *)(v16 + 72);
  uint64_t v24 = a3;
  swift_bridgeObjectRetain();
  unint64_t v19 = _swiftEmptyArrayStorage;
  uint64_t v26 = v10;
  uint64_t v27 = a2;
  do
  {
    a1(v17);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v19;
    }
    if ((*v18)(v9, 1, v10) == 1)
    {
      sub_10001DAB4((uint64_t)v9, &qword_101649690);
    }
    else
    {
      uint64_t v20 = v28;
      sub_100F66E8C((uint64_t)v9, v28, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
      sub_100F66E8C(v20, v30, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v19 = (void *)sub_100A70C98(0, v19[2] + 1, 1, (unint64_t)v19);
      }
      unint64_t v22 = v19[2];
      unint64_t v21 = v19[3];
      if (v22 >= v21 >> 1) {
        unint64_t v19 = (void *)sub_100A70C98(v21 > 1, v22 + 1, 1, (unint64_t)v19);
      }
      v19[2] = v22 + 1;
      sub_100F66E8C(v30, (uint64_t)v19+ ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80))+ *(void *)(v25 + 72) * v22, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
      uint64_t v10 = v26;
    }
    v17 += v29;
    --v15;
  }
  while (v15);
  swift_bridgeObjectRelease();
  return v19;
}

uint64_t sub_100F48CFC(void (*a1)(uint64_t *), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v28 = a2;
  uint64_t v8 = sub_10000588C((uint64_t *)&unk_10163EB40);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for TimeBasedKey();
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v27 = (uint64_t)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v24 = (uint64_t)&v23 - v14;
  uint64_t v25 = v15;
  uint64_t v16 = (unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
  uint64_t v17 = _swiftEmptyArrayStorage;
  uint64_t v26 = a4;
  while (1)
  {
    uint64_t v29 = a3;
    a1(&v29);
    if (v4) {
      break;
    }
    if ((*v16)(v10, 1, v11) == 1)
    {
      uint64_t result = sub_10001DAB4((uint64_t)v10, (uint64_t *)&unk_10163EB40);
      if (a4 == a3) {
        return (uint64_t)v17;
      }
    }
    else
    {
      uint64_t v19 = v24;
      sub_100F66E8C((uint64_t)v10, v24, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
      sub_100F66E8C(v19, v27, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v17 = (void *)sub_100A6F46C(0, v17[2] + 1, 1, (unint64_t)v17);
      }
      unint64_t v21 = v17[2];
      unint64_t v20 = v17[3];
      if (v21 >= v20 >> 1) {
        uint64_t v17 = (void *)sub_100A6F46C(v20 > 1, v21 + 1, 1, (unint64_t)v17);
      }
      v17[2] = v21 + 1;
      uint64_t result = sub_100F66E8C(v27, (uint64_t)v17+ ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80))+ *(void *)(v25 + 72) * v21, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
      a4 = v26;
      if (v26 == a3) {
        return (uint64_t)v17;
      }
    }
    if (__CFADD__(a3++, 1))
    {
      __break(1u);
      return result;
    }
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v17;
}

void *sub_100F48FC0(void (*a1)(uint64_t *__return_ptr, uint64_t), uint64_t a2, uint64_t a3)
{
  return sub_100F494AC(a1, a2, a3, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
}

void *sub_100F48FEC(void (*a1)(uint64_t *__return_ptr, uint64_t), uint64_t a2, uint64_t a3)
{
  return sub_100F494AC(a1, a2, a3, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
}

void *sub_100F49018(void (*a1)(void), uint64_t a2, uint64_t a3)
{
  uint64_t v26 = a2;
  uint64_t v6 = sub_10000588C(&qword_10164B360);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = _s18ConnectionKeyGroupVMa();
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v25 = (uint64_t)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v23 = (uint64_t)&v21 - v13;
  uint64_t v24 = *(void *)(a3 + 16);
  if (!v24) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v21 = v12;
  uint64_t v14 = (unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
  swift_bridgeObjectRetain();
  uint64_t v15 = 0;
  uint64_t v16 = _swiftEmptyArrayStorage;
  unint64_t v22 = a1;
  do
  {
    uint64_t v27 = *(void *)(a3 + 8 * v15 + 32);
    a1(&v27);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v16;
    }
    if ((*v14)(v8, 1, v9) == 1)
    {
      sub_10001DAB4((uint64_t)v8, &qword_10164B360);
    }
    else
    {
      uint64_t v17 = v23;
      sub_100F66E8C((uint64_t)v8, v23, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
      sub_100F66E8C(v17, v25, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v16 = (void *)sub_100A6F4A0(0, v16[2] + 1, 1, (unint64_t)v16);
      }
      unint64_t v19 = v16[2];
      unint64_t v18 = v16[3];
      if (v19 >= v18 >> 1) {
        uint64_t v16 = (void *)sub_100A6F4A0(v18 > 1, v19 + 1, 1, (unint64_t)v16);
      }
      v16[2] = v19 + 1;
      sub_100F66E8C(v25, (uint64_t)v16+ ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80))+ *(void *)(v21 + 72) * v19, (uint64_t (*)(void))_s18ConnectionKeyGroupVMa);
      a1 = v22;
    }
    ++v15;
  }
  while (v24 != v15);
  swift_bridgeObjectRelease();
  return v16;
}

void *sub_100F4930C(void (*a1)(uint64_t *__return_ptr, id *), uint64_t a2, unint64_t a3)
{
  unint64_t v14 = (unint64_t)_swiftEmptyArrayStorage;
  if (a3 >> 62) {
    goto LABEL_17;
  }
  uint64_t v5 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v5; uint64_t v5 = _CocoaArrayWrapper.endIndex.getter())
  {
    for (uint64_t i = 4; ; ++i)
    {
      id v7 = (a3 & 0xC000000000000001) != 0
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
         : *(id *)(a3 + 8 * i);
      uint64_t v8 = v7;
      uint64_t v9 = i - 3;
      if (__OFADD__(i - 4, 1)) {
        break;
      }
      id v13 = v7;
      a1(&v12, &v13);
      if (v3)
      {
        swift_bridgeObjectRelease();

        return (void *)swift_bridgeObjectRelease();
      }

      if (v12)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      if (v9 == v5)
      {
        swift_bridgeObjectRelease();
        return (void *)v14;
      }
    }
    __break(1u);
LABEL_17:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
  return _swiftEmptyArrayStorage;
}

void *sub_100F494AC(void (*a1)(uint64_t *__return_ptr, uint64_t), uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t result = _swiftEmptyArrayStorage;
  unint64_t v13 = (unint64_t)_swiftEmptyArrayStorage;
  if (v6)
  {
    uint64_t v9 = *(void *)(a4(0) - 8);
    uint64_t v10 = a3 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v11 = *(void *)(v9 + 72);
    swift_bridgeObjectRetain();
    do
    {
      a1(&v12, v10);
      if (v4)
      {
        swift_bridgeObjectRelease();
        return (void *)swift_bridgeObjectRelease();
      }
      if (v12)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v10 += v11;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
    return (void *)v13;
  }
  return result;
}

void *sub_100F49628(void (*a1)(long long *__return_ptr, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v25 = a2;
  uint64_t v4 = *(void *)(a3 + 16);
  if (!v4) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v6 = *(void *)(sub_10000588C(&qword_10163BBC0) - 8);
  uint64_t v7 = a3 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  uint64_t v16 = *(void *)(v6 + 72);
  swift_bridgeObjectRetain();
  uint64_t v8 = _swiftEmptyArrayStorage;
  do
  {
    a1(&v20, v7);
    if (v3)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v8;
    }
    uint64_t v10 = v24;
    if (v24)
    {
      char v11 = v21;
      long long v18 = v20;
      long long v19 = v22;
      __int16 v12 = v23;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v8 = sub_100A717E8(0, v8[2] + 1, 1, v8);
      }
      unint64_t v14 = v8[2];
      unint64_t v13 = v8[3];
      if (v14 >= v13 >> 1) {
        uint64_t v8 = sub_100A717E8((void *)(v13 > 1), v14 + 1, 1, v8);
      }
      v8[2] = v14 + 1;
      uint64_t v9 = &v8[7 * v14];
      *((_OWORD *)v9 + 2) = v18;
      *((unsigned char *)v9 + 48) = v11;
      *(_OWORD *)(v9 + 7) = v19;
      *((_WORD *)v9 + 36) = v12;
      v9[10] = v10;
    }
    v7 += v16;
    --v4;
  }
  while (v4);
  swift_bridgeObjectRelease();
  return v8;
}

void *sub_100F49804(void (*a1)(uint64_t *__return_ptr, unsigned char *), uint64_t a2, uint64_t a3)
{
  void (*v32)(uint64_t *__return_ptr, unsigned char *);

  uint64_t v4 = v3;
  unint64_t v32 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  if (!v5) {
    return _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain();
  uint64_t v7 = (unint64_t *)(a3 + 72);
  uint64_t v8 = _swiftEmptyArrayStorage;
  do
  {
    unint64_t v11 = *(v7 - 2);
    uint64_t v10 = *(v7 - 1);
    unint64_t v12 = *v7;
    uint64_t v13 = *(v7 - 4);
    uint64_t v14 = *(v7 - 3);
    v26[0] = *((unsigned char *)v7 - 40);
    uint64_t v27 = v13;
    uint64_t v28 = v14;
    unint64_t v29 = v11;
    uint64_t v30 = v10;
    unint64_t v31 = v12;
    sub_1000361E0(v14, v11);
    sub_1000361E0(v10, v12);
    v32(&v22, v26);
    if (v4)
    {
      sub_10001CFB8(v14, v11);
      sub_10001CFB8(v10, v12);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v8;
    }
    sub_10001CFB8(v14, v11);
    sub_10001CFB8(v10, v12);
    char v15 = v22;
    if (v22 != 3)
    {
      long long v20 = v24;
      long long v21 = v23;
      uint64_t v16 = v25;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v8 = sub_100A70338(0, v8[2] + 1, 1, v8);
      }
      unint64_t v18 = v8[2];
      unint64_t v17 = v8[3];
      if (v18 >= v17 >> 1) {
        uint64_t v8 = sub_100A70338((void *)(v17 > 1), v18 + 1, 1, v8);
      }
      v8[2] = v18 + 1;
      uint64_t v9 = &v8[6 * v18];
      *((unsigned char *)v9 + 32) = v15;
      *(_OWORD *)(v9 + 5) = v21;
      *(_OWORD *)(v9 + 7) = v20;
      v9[9] = v16;
    }
    v7 += 6;
    --v5;
  }
  while (v5);
  swift_bridgeObjectRelease();
  return v8;
}

void *sub_100F499D4(void (*a1)(char *), uint64_t a2)
{
  unint64_t v32 = a1;
  uint64_t v4 = sub_10000588C(&qword_101639EF8);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for SharingCircleSecretValue();
  uint64_t v27 = *(void *)(v31 - 8);
  uint64_t v7 = __chkstk_darwin(v31);
  uint64_t v30 = (uint64_t)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v26 = (uint64_t)&v25 - v9;
  uint64_t v10 = type metadata accessor for SharingCircleSecret();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000588C(&qword_1016593B8);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  uint64_t v17 = dispatch thunk of _AnySequenceBox._makeIterator()();
  swift_release();
  uint64_t v33 = v17;
  dispatch thunk of _AnyIteratorBoxBase.next()();
  unint64_t v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  uint64_t v28 = v11 + 48;
  uint64_t v29 = v10;
  if (v18(v16, 1, v10) == 1)
  {
    long long v19 = _swiftEmptyArrayStorage;
  }
  else
  {
    long long v20 = (unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
    long long v19 = _swiftEmptyArrayStorage;
    uint64_t v25 = a2;
    while (1)
    {
      sub_100F66E8C((uint64_t)v16, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
      v32(v13);
      if (v2) {
        break;
      }
      sub_100F66E2C((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
      if ((*v20)(v6, 1, v31) == 1)
      {
        sub_10001DAB4((uint64_t)v6, &qword_101639EF8);
      }
      else
      {
        uint64_t v21 = v26;
        sub_100F66E8C((uint64_t)v6, v26, (uint64_t (*)(void))type metadata accessor for SharingCircleSecretValue);
        sub_100F66E8C(v21, v30, (uint64_t (*)(void))type metadata accessor for SharingCircleSecretValue);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          long long v19 = (void *)sub_100A71F40(0, v19[2] + 1, 1, (unint64_t)v19);
        }
        unint64_t v23 = v19[2];
        unint64_t v22 = v19[3];
        if (v23 >= v22 >> 1) {
          long long v19 = (void *)sub_100A71F40(v22 > 1, v23 + 1, 1, (unint64_t)v19);
        }
        v19[2] = v23 + 1;
        sub_100F66E8C(v30, (uint64_t)v19+ ((*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80))+ *(void *)(v27 + 72) * v23, (uint64_t (*)(void))type metadata accessor for SharingCircleSecretValue);
      }
      dispatch thunk of _AnyIteratorBoxBase.next()();
      if (v18(v16, 1, v29) == 1) {
        goto LABEL_14;
      }
    }
    sub_100F66E2C((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
    swift_bridgeObjectRelease();
  }
LABEL_14:
  swift_release();
  return v19;
}

uint64_t sub_100F49E10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[12] = a3;
  v4[13] = v3;
  v4[10] = a1;
  v4[11] = a2;
  uint64_t v5 = sub_10000588C(&qword_10163CE68);
  v4[14] = v5;
  v4[15] = *(void *)(v5 - 8);
  v4[16] = swift_task_alloc();
  v4[17] = swift_task_alloc();
  v4[18] = swift_task_alloc();
  v4[19] = swift_task_alloc();
  v4[20] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Table();
  v4[21] = v6;
  v4[22] = *(void *)(v6 - 8);
  v4[23] = swift_task_alloc();
  return _swift_task_switch(sub_100F49F68, v3, 0);
}

uint64_t sub_100F49F68()
{
  if (*(void *)(*(void *)(v0 + 104) + 112))
  {
    uint64_t v1 = qword_101636978;
    swift_retain();
    if (v1 != -1) {
      swift_once();
    }
    uint64_t v2 = sub_10000588C(&qword_10163CE70);
    sub_100010324(v2, (uint64_t)qword_10170DAD0);
    type metadata accessor for UUID();
    == infix<A>(_:_:)();
    if (qword_101636980 != -1) {
      swift_once();
    }
    uint64_t v3 = *(void *)(v0 + 136);
    uint64_t v4 = *(void *)(v0 + 120);
    uint64_t v5 = *(void *)(v0 + 128);
    uint64_t v6 = *(void *)(v0 + 112);
    sub_100010324(v2, (uint64_t)qword_10170DAE8);
    == infix<A>(_:_:)();
    && infix(_:_:)();
    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    v7(v5, v6);
    v7(v3, v6);
    if (qword_101636990 != -1) {
      swift_once();
    }
    unint64_t v32 = (uint64_t *)(v0 + 16);
    uint64_t v8 = *(void *)(v0 + 144);
    uint64_t v9 = *(void *)(v0 + 136);
    uint64_t v10 = *(void *)(v0 + 112);
    uint64_t v11 = sub_10000588C(&qword_10163CE78);
    sub_100010324(v11, (uint64_t)qword_10170DB18);
    *(unsigned char *)(v0 + 192) = 0;
    sub_1001A1448();
    == infix<A>(_:_:)();
    && infix(_:_:)();
    v7(v9, v10);
    v7(v8, v10);
    uint64_t v12 = v7;
    if (qword_101636988 != -1) {
      swift_once();
    }
    uint64_t v13 = *(void *)(v0 + 168);
    uint64_t v30 = *(void *)(v0 + 184);
    uint64_t v31 = *(void *)(v0 + 176);
    uint64_t v14 = *(void *)(v0 + 152);
    uint64_t v15 = *(void *)(v0 + 160);
    uint64_t v16 = *(void *)(v0 + 144);
    uint64_t v17 = *(void *)(v0 + 112);
    uint64_t v18 = *(void *)(v0 + 96);
    uint64_t v19 = sub_10000588C(&qword_10163CEC8);
    sub_100010324(v19, (uint64_t)qword_10170DB00);
    *(void *)(v0 + 72) = v18;
    sub_1001A1544();
    == infix<A>(_:_:)();
    && infix(_:_:)();
    v12(v16, v17);
    v12(v14, v17);
    QueryType.filter(_:)();
    v12(v15, v17);
    *(void *)(v0 + 40) = v13;
    *(void *)(v0 + 48) = &protocol witness table for Table;
    long long v20 = sub_10001D958(v32);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v31 + 16))(v20, v30, v13);
    sub_100649CE8((uint64_t)v32);
    uint64_t v21 = *(void *)(v0 + 176);
    uint64_t v22 = *(void *)(v0 + 184);
    uint64_t v23 = *(void *)(v0 + 168);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v32);
    dispatch thunk of _AnySequenceBox._makeIterator()();
    swift_release();
    dispatch thunk of _AnyIteratorBoxBase.next()();
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v22, v23);
    uint64_t v28 = *(void *)(v0 + 56);
    uint64_t v27 = *(void *)(v0 + 64);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v29 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
    return v29(v28, v27);
  }
  else
  {
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v24 = 2;
    *(unsigned char *)(v24 + 4) = 1;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v25 = *(uint64_t (**)(void))(v0 + 8);
    return v25();
  }
}

uint64_t sub_100F4A4EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[12] = a3;
  v4[13] = v3;
  v4[10] = a1;
  v4[11] = a2;
  uint64_t v5 = sub_10000588C(&qword_10163CE68);
  v4[14] = v5;
  v4[15] = *(void *)(v5 - 8);
  v4[16] = swift_task_alloc();
  v4[17] = swift_task_alloc();
  v4[18] = swift_task_alloc();
  v4[19] = swift_task_alloc();
  v4[20] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Table();
  v4[21] = v6;
  v4[22] = *(void *)(v6 - 8);
  v4[23] = swift_task_alloc();
  return _swift_task_switch(sub_100F4A644, v3, 0);
}

uint64_t sub_100F4A644()
{
  if (*(void *)(*(void *)(v0 + 104) + 112))
  {
    uint64_t v1 = qword_101636978;
    swift_retain();
    if (v1 != -1) {
      swift_once();
    }
    uint64_t v2 = sub_10000588C(&qword_10163CE70);
    sub_100010324(v2, (uint64_t)qword_10170DAD0);
    type metadata accessor for UUID();
    == infix<A>(_:_:)();
    if (qword_101636980 != -1) {
      swift_once();
    }
    uint64_t v3 = *(void *)(v0 + 136);
    uint64_t v4 = *(void *)(v0 + 120);
    uint64_t v5 = *(void *)(v0 + 128);
    uint64_t v6 = *(void *)(v0 + 112);
    sub_100010324(v2, (uint64_t)qword_10170DAE8);
    == infix<A>(_:_:)();
    && infix(_:_:)();
    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    v7(v5, v6);
    v7(v3, v6);
    if (qword_101636990 != -1) {
      swift_once();
    }
    unint64_t v32 = (uint64_t *)(v0 + 16);
    uint64_t v8 = *(void *)(v0 + 144);
    uint64_t v9 = *(void *)(v0 + 136);
    uint64_t v10 = *(void *)(v0 + 112);
    uint64_t v11 = sub_10000588C(&qword_10163CE78);
    sub_100010324(v11, (uint64_t)qword_10170DB18);
    *(unsigned char *)(v0 + 192) = 1;
    sub_1001A1448();
    == infix<A>(_:_:)();
    && infix(_:_:)();
    v7(v9, v10);
    v7(v8, v10);
    uint64_t v12 = v7;
    if (qword_101636988 != -1) {
      swift_once();
    }
    uint64_t v13 = *(void *)(v0 + 168);
    uint64_t v30 = *(void *)(v0 + 184);
    uint64_t v31 = *(void *)(v0 + 176);
    uint64_t v14 = *(void *)(v0 + 152);
    uint64_t v15 = *(void *)(v0 + 160);
    uint64_t v16 = *(void *)(v0 + 144);
    uint64_t v17 = *(void *)(v0 + 112);
    uint64_t v18 = *(void *)(v0 + 96);
    uint64_t v19 = sub_10000588C(&qword_10163CEC8);
    sub_100010324(v19, (uint64_t)qword_10170DB00);
    *(void *)(v0 + 72) = v18;
    sub_1001A1544();
    == infix<A>(_:_:)();
    && infix(_:_:)();
    v12(v16, v17);
    v12(v14, v17);
    QueryType.filter(_:)();
    v12(v15, v17);
    *(void *)(v0 + 40) = v13;
    *(void *)(v0 + 48) = &protocol witness table for Table;
    long long v20 = sub_10001D958(v32);
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(v31 + 16))(v20, v30, v13);
    sub_100649CE8((uint64_t)v32);
    uint64_t v21 = *(void *)(v0 + 176);
    uint64_t v22 = *(void *)(v0 + 184);
    uint64_t v23 = *(void *)(v0 + 168);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v32);
    dispatch thunk of _AnySequenceBox._makeIterator()();
    swift_release();
    dispatch thunk of _AnyIteratorBoxBase.next()();
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v22, v23);
    uint64_t v28 = *(void *)(v0 + 56);
    uint64_t v27 = *(void *)(v0 + 64);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v29 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
    return v29(v28, v27);
  }
  else
  {
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v24 = 2;
    *(unsigned char *)(v24 + 4) = 1;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v25 = *(uint64_t (**)(void))(v0 + 8);
    return v25();
  }
}

uint64_t sub_100F4ABCC()
{
  return sub_10111198C() & 1;
}

uint64_t sub_100F4AC04(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(void), uint64_t (*a5)(void), const char *a6)
{
  uint64_t v10 = a3(0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v21 - v11;
  if (qword_101636F08 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_100010324(v13, (uint64_t)qword_10170E858);
  sub_100F6681C(a1, (uint64_t)v12, a4);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 141558275;
    uint64_t v23 = 1752392040;
    uint64_t v24 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 12) = 2081;
    uint64_t v22 = a6;
    type metadata accessor for UUID();
    sub_100F66400((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v23 = sub_1008FA0F0(v18, v19, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100F66E2C((uint64_t)v12, a5);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, v22, (uint8_t *)v16, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100F66E2C((uint64_t)v12, a5);
  }

  return sub_100B30768();
}

uint64_t sub_100F4AE80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[28] = a2;
  v3[29] = a3;
  v3[27] = a1;
  type metadata accessor for Endianness();
  v3[30] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Date();
  v3[31] = v4;
  v3[32] = *(void *)(v4 - 8);
  v3[33] = swift_task_alloc();
  sub_10000588C(&qword_101638CF0);
  v3[34] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  v3[35] = v5;
  v3[36] = *(void *)(v5 - 8);
  v3[37] = swift_task_alloc();
  v3[38] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for StandaloneBeacon();
  v3[39] = v6;
  v3[40] = *(void *)(v6 - 8);
  v3[41] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for ManagedCBPeripheralBeaconInfo();
  v3[42] = v7;
  v3[43] = *(void *)(v7 - 8);
  v3[44] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for SharedBeaconRecord(0);
  v3[45] = v8;
  v3[46] = *(void *)(v8 - 8);
  v3[47] = swift_task_alloc();
  v3[48] = swift_task_alloc();
  v3[49] = swift_task_alloc();
  v3[50] = swift_task_alloc();
  v3[51] = swift_task_alloc();
  return _swift_task_switch(sub_100F4B154, 0, 0);
}

uint64_t sub_100F4B154()
{
  uint64_t v2 = v0[28];
  uint64_t v1 = v0[29];
  uint64_t v3 = v0[27];
  v0[22] = _swiftEmptyArrayStorage;
  uint64_t v4 = (void *)swift_allocObject();
  v0[52] = v4;
  v4[2] = v3;
  v4[3] = v2;
  v4[4] = v1;
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v5 = (void *)swift_task_alloc();
  v0[53] = v5;
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_101660AA0);
  v0[54] = v6;
  void *v5 = v0;
  v5[1] = sub_100F4B280;
  return unsafeBlocking<A>(_:)(v0 + 23, sub_100F66310, v4, v6);
}

uint64_t sub_100F4B280()
{
  uint64_t v1 = (void *)*v0;
  uint64_t v2 = (void *)*v0;
  swift_task_dealloc();
  swift_release();
  uint64_t v3 = v1[23];
  v1[21] = v3;
  v1[55] = v3;
  uint64_t v4 = (void *)swift_task_alloc();
  v1[56] = v4;
  uint64_t v5 = sub_100062734(&qword_1016427C8, (uint64_t *)&unk_101660AA0);
  v1[57] = v5;
  *uint64_t v4 = v2;
  v4[1] = sub_100F4B434;
  uint64_t v6 = v1[54];
  return Sequence.asyncFilter(_:)(&unk_101665230, 0, v6, v5);
}

uint64_t sub_100F4B434(uint64_t a1)
{
  *(void *)(*(void *)v1 + 464) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100F4B554, 0, 0);
}

uint64_t sub_100F4B554()
{
  uint64_t v1 = *(void *)(v0 + 232);
  long long v8 = *(_OWORD *)(v0 + 216);
  *(void *)(v0 + 160) = *(void *)(v0 + 464);
  uint64_t v2 = swift_task_alloc();
  *(void *)(v0 + 472) = v2;
  *(_OWORD *)(v2 + 16) = v8;
  *(void *)(v2 + 32) = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 480) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_100F4B644;
  uint64_t v4 = *(void *)(v0 + 456);
  uint64_t v5 = *(void *)(v0 + 432);
  uint64_t v6 = *(void *)(v0 + 336);
  return Sequence.asyncCompactMap<A>(_:)(&unk_101665240, v2, v5, v6, v4);
}

uint64_t sub_100F4B644(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 488) = a1;
  *(void *)(v3 + 496) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return _swift_task_switch(sub_100F4B788, 0, 0);
}

uint64_t sub_100F4B788()
{
  sub_100445D20(*(void *)(v0 + 488));
  uint64_t My = type metadata accessor for Feature.FindMy();
  *(void *)(v0 + 120) = My;
  *(void *)(v0 + 128) = sub_100F66400((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
  uint64_t v2 = sub_10001D958((uint64_t *)(v0 + 96));
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v2, enum case for Feature.FindMy.spPlaySoundAll(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 96);
  if (My)
  {
    uint64_t v4 = *(void *)(v0 + 224);
    uint64_t v3 = *(void *)(v0 + 232);
    uint64_t v5 = *(void *)(v0 + 216);
    uint64_t v6 = (void *)swift_allocObject();
    *(void *)(v0 + 504) = v6;
    v6[2] = v5;
    v6[3] = v4;
    v6[4] = v3;
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v7 = (void *)swift_task_alloc();
    *(void *)(v0 + 512) = v7;
    uint64_t v8 = sub_10000588C(&qword_10163A040);
    *(void *)(v0 + 520) = v8;
    *uint64_t v7 = v0;
    v7[1] = sub_100F4BA7C;
    uint64_t v9 = sub_100F6644C;
    uint64_t v10 = v0 + 200;
    uint64_t v11 = v6;
    return unsafeBlocking<A>(_:)(v10, v9, v11, v8);
  }
  *(void *)(v0 + 568) = *(void *)(v0 + 496);
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t v10 = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 16, (uint64_t *)&unk_101638D30);
  if (!*(void *)(v0 + 40))
  {
    __break(1u);
    return unsafeBlocking<A>(_:)(v10, v9, v11, v8);
  }
  sub_10001CEB0((long long *)(v0 + 16), v0 + 56);
  sub_10001CD44((void *)(v0 + 56), *(void *)(v0 + 80));
  uint64_t v14 = (uint64_t (*)(void))((char *)&dword_1016391C8 + dword_1016391C8);
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v0 + 576) = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_100F4C44C;
  return v14();
}

uint64_t sub_100F4BA7C()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100F4BB94, 0, 0);
}

uint64_t sub_100F4BB94(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v53 = v5;
  uint64_t v6 = *(void *)(v5 + 200);
  uint64_t v47 = *(void *)(v6 + 16);
  if (v47)
  {
    unint64_t v7 = 0;
    uint64_t v45 = *(void *)(v5 + 200);
    uint64_t v46 = *(void *)(v5 + 368);
    uint64_t v49 = *(void *)(v5 + 360);
    do
    {
      if (v7 >= *(void *)(v6 + 16))
      {
        __break(1u);
        return Sequence.asyncCompactMap<A>(_:)(a1, a2, a3, a4, a5);
      }
      uint64_t v12 = *(void *)(v5 + 400);
      uint64_t v11 = *(void *)(v5 + 408);
      uint64_t v13 = *(void *)(v46 + 72);
      unint64_t v48 = (*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80);
      sub_100F6681C(v6 + v48 + v13 * v7, v11, type metadata accessor for SharedBeaconRecord);
      uint64_t v14 = *(void *)(v11 + *(int *)(v49 + 44));
      sub_100F6681C(v11, v12, type metadata accessor for SharedBeaconRecord);
      if (v14 == 76)
      {
        uint64_t v15 = *(void *)(v5 + 400);
        uint64_t v16 = *(void *)(v15 + *(int *)(v49 + 44));
        sub_100F6681C(v15, *(void *)(v5 + 392), type metadata accessor for SharedBeaconRecord);
        if (v16 != 76) {
          goto LABEL_3;
        }
        if (qword_1016375F8 != -1) {
          swift_once();
        }
        uint64_t v17 = qword_10170F778;
        if (*(void *)(qword_10170F778 + 16))
        {
          uint64_t v18 = *(void *)(*(void *)(v5 + 392) + *(int *)(v49 + 48));
          uint64_t v19 = static Hasher._hash(seed:_:)();
          uint64_t v20 = -1 << *(unsigned char *)(v17 + 32);
          unint64_t v21 = v19 & ~v20;
          if ((*(void *)(v17 + 56 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21))
          {
            uint64_t v22 = *(void *)(v17 + 48);
            if (*(void *)(v22 + 8 * v21) == v18)
            {
LABEL_3:
              uint64_t v9 = *(void *)(v5 + 400);
              uint64_t v8 = *(void *)(v5 + 408);
              uint64_t v10 = *(void *)(v5 + 384);
              sub_100F66E2C(*(void *)(v5 + 392), type metadata accessor for SharedBeaconRecord);
              sub_100F66E2C(v9, type metadata accessor for SharedBeaconRecord);
              sub_100F6681C(v8, v10, type metadata accessor for SharedBeaconRecord);
              sub_100F66E2C(*(void *)(v5 + 384), type metadata accessor for SharedBeaconRecord);
              goto LABEL_4;
            }
            uint64_t v23 = ~v20;
            while (1)
            {
              unint64_t v21 = (v21 + 1) & v23;
              if (((*(void *)(v17 + 56 + ((v21 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v21) & 1) == 0) {
                break;
              }
              if (*(void *)(v22 + 8 * v21) == v18) {
                goto LABEL_3;
              }
            }
          }
        }
        uint64_t v29 = *(void *)(v5 + 400);
        uint64_t v28 = *(void *)(v5 + 408);
        uint64_t v30 = *(void *)(v5 + 384);
        sub_100F66E2C(*(void *)(v5 + 392), type metadata accessor for SharedBeaconRecord);
        sub_100F66E2C(v29, type metadata accessor for SharedBeaconRecord);
        uint64_t v26 = v28;
        uint64_t v27 = v30;
      }
      else
      {
        uint64_t v24 = *(void *)(v5 + 408);
        uint64_t v25 = *(void *)(v5 + 384);
        sub_100F66E2C(*(void *)(v5 + 400), type metadata accessor for SharedBeaconRecord);
        uint64_t v26 = v24;
        uint64_t v27 = v25;
      }
      sub_100F6681C(v26, v27, type metadata accessor for SharedBeaconRecord);
      uint64_t v31 = *(void *)(v5 + 384);
      uint64_t v32 = *(void *)(v31 + *(int *)(v49 + 44));
      uint64_t v33 = *(void *)(v31 + *(int *)(v49 + 48));
      if (qword_101636CD8 != -1) {
        swift_once();
      }
      OS_dispatch_queue.sync<A>(execute:)();
      uint64_t v34 = sub_1010AC02C(*(void *)(v5 + 208));
      swift_bridgeObjectRelease();
      uint64_t v35 = sub_101158768(v34);
      swift_bridgeObjectRelease();
      uint64_t v51 = v35;
      sub_100DCA424(v52, 8212);
      sub_100DCA424(v52, 8213);
      sub_100DCA424(v52, 8216);
      sub_100DCA424(v52, 8219);
      sub_100DCA424(v52, 8220);
      sub_100DCA424(v52, 8223);
      uint64_t v36 = *(void *)(v5 + 384);
      if (v32 != 76)
      {
        swift_bridgeObjectRelease();
        sub_100F66E2C(v36, type metadata accessor for SharedBeaconRecord);
LABEL_26:
        sub_100F66E8C(*(void *)(v5 + 408), *(void *)(v5 + 376), type metadata accessor for SharedBeaconRecord);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1000B7404(0, _swiftEmptyArrayStorage[2] + 1, 1);
        }
        unint64_t v39 = _swiftEmptyArrayStorage[2];
        unint64_t v38 = _swiftEmptyArrayStorage[3];
        uint64_t v6 = v45;
        if (v39 >= v38 >> 1) {
          sub_1000B7404(v38 > 1, v39 + 1, 1);
        }
        uint64_t v40 = *(void *)(v5 + 376);
        _swiftEmptyArrayStorage[2] = v39 + 1;
        a1 = (void *)sub_100F66E8C(v40, (uint64_t)_swiftEmptyArrayStorage + v48 + v39 * v13, type metadata accessor for SharedBeaconRecord);
        goto LABEL_5;
      }
      BOOL v37 = sub_100DC71B4(v33, v51);
      swift_bridgeObjectRelease();
      sub_100F66E2C(v36, type metadata accessor for SharedBeaconRecord);
      if (!v37) {
        goto LABEL_26;
      }
LABEL_4:
      uint64_t v6 = v45;
      a1 = (void *)sub_100F66E2C(*(void *)(v5 + 408), type metadata accessor for SharedBeaconRecord);
LABEL_5:
      ++v7;
    }
    while (v7 != v47);
  }
  *(void *)(v5 + 528) = _swiftEmptyArrayStorage;
  uint64_t v41 = *(void *)(v5 + 232);
  long long v50 = *(_OWORD *)(v5 + 216);
  swift_bridgeObjectRelease();
  *(void *)(v5 + 192) = _swiftEmptyArrayStorage;
  uint64_t v42 = swift_task_alloc();
  *(void *)(v5 + 536) = v42;
  *(_OWORD *)(v42 + 16) = v50;
  *(void *)(v42 + 32) = v41;
  uint64_t v43 = (void *)swift_task_alloc();
  *(void *)(v5 + 544) = v43;
  a5 = sub_100062734(&qword_101665258, &qword_10163A040);
  *uint64_t v43 = v5;
  v43[1] = sub_100F4C1B4;
  a3 = *(void *)(v5 + 520);
  a4 = *(void *)(v5 + 336);
  a1 = &unk_101665250;
  a2 = v42;
  return Sequence.asyncCompactMap<A>(_:)(a1, a2, a3, a4, a5);
}

uint64_t sub_100F4C1B4(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 552) = a1;
  *(void *)(v3 + 560) = v1;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_100F4C2FC, 0, 0);
}

uint64_t sub_100F4C2FC()
{
  sub_100445D20(*(void *)(v0 + 552));
  *(void *)(v0 + 568) = *(void *)(v0 + 560);
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 16, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 40))
  {
    sub_10001CEB0((long long *)(v0 + 16), v0 + 56);
    sub_10001CD44((void *)(v0 + 56), *(void *)(v0 + 80));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_1016391C8 + dword_1016391C8);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 576) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100F4C44C;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100F4C44C(uint64_t a1)
{
  *(void *)(*(void *)v1 + 584) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100F4C54C, 0, 0);
}

uint64_t sub_100F4C54C()
{
  uint64_t v1 = v0[73];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 7));
  if (v1)
  {
    uint64_t v2 = v0[73];
    return _swift_task_switch(sub_100F4C75C, v2, 0);
  }
  else
  {
    if (qword_101636F08 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_10170E858);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "No StandaloneBeaconService available!", v6, 2u);
      swift_slowDealloc();
    }

    uint64_t v9 = v0[22];
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v7 = (uint64_t (*)(uint64_t))v0[1];
    return v7(v9);
  }
}

uint64_t sub_100F4C75C()
{
  uint64_t v1 = v0[71];
  sub_100FBDD80(*(void *)(v0[73] + 128));
  v0[74] = v1;
  if (v1)
  {
    uint64_t v2 = sub_100F4CD7C;
  }
  else
  {
    v0[75] = dispatch thunk of _AnySequenceBox.__copyToContiguousArray()();
    swift_release();
    uint64_t v2 = sub_100F4C800;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100F4C800()
{
  uint64_t v1 = *(void *)(v0 + 600);
  int64_t v2 = *(void *)(v1 + 16);
  if (!v2)
  {
LABEL_17:
    swift_release();
    sub_100445D20((uint64_t)_swiftEmptyArrayStorage);
    swift_release();
    uint64_t v50 = *(void *)(v0 + 176);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v33 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v33(v50);
  }
  unint64_t v38 = *(int **)(v0 + 336);
  uint64_t v39 = *(void *)(v0 + 344);
  uint64_t v3 = *(void *)(v0 + 320);
  uint64_t v49 = *(int **)(v0 + 312);
  uint64_t v4 = *(void *)(v0 + 288);
  uint64_t v5 = *(void *)(v0 + 256);
  sub_1000B83E8(0, v2, 0);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  uint64_t v41 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
  uint64_t v42 = (void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  uint64_t v40 = (void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  uint64_t v36 = (void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  uint64_t v37 = *(void *)(v3 + 72);
  uint64_t v35 = (void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32);
  while (2)
  {
    uint64_t v47 = v6;
    int64_t v48 = v2;
    uint64_t v7 = *(void *)(v0 + 328);
    uint64_t v8 = *(void *)(v0 + 296);
    uint64_t v9 = *(void *)(v0 + 272);
    uint64_t v10 = *(void *)(v0 + 280);
    uint64_t v11 = *(void *)(v0 + 264);
    uint64_t v12 = *(void *)(v0 + 248);
    sub_100F6681C(v6, v7, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
    uid_t v13 = getuid();
    sub_100DC5FC0(v13);
    (*v42)(v8, v7, v10);
    (*v41)(v9, 1, 1, v10);
    (*v40)(v11, v7 + v49[8], v12);
    uint64_t v14 = (uint64_t *)(v7 + v49[9]);
    uint64_t v15 = *v14;
    switch((unint64_t)v14[1] >> 62)
    {
      case 1uLL:
        LODWORD(v16) = HIDWORD(v15) - v15;
        if (__OFSUB__(HIDWORD(v15), v15))
        {
          __break(1u);
LABEL_23:
          __break(1u);
          JUMPOUT(0x100F4CD6CLL);
        }
        uint64_t v16 = (int)v16;
LABEL_7:
        if (v16 >= -1)
        {
LABEL_8:
          Data.subdata(in:)();
          static Endianness.current.getter();
          sub_100091A80();
          FixedWidthInteger.init(data:ofEndianness:)();
          if (*(unsigned char *)(v0 + 612)) {
            int v20 = 0;
          }
          else {
            int v20 = *(_DWORD *)(v0 + 608);
          }
          if (v20 < 0) {
            return _assertionFailure(_:_:file:line:flags:)();
          }
          uint64_t v21 = *(void *)(v0 + 352);
          uint64_t v46 = *(void *)(v0 + 328);
          uint64_t v22 = *(void *)(v0 + 296);
          uint64_t v24 = *(void *)(v0 + 272);
          uint64_t v23 = *(void *)(v0 + 280);
          uint64_t v43 = *(void *)(v0 + 248);
          uint64_t v44 = *(void *)(v0 + 264);
          uint64_t v25 = (uint64_t *)(v46 + v49[7]);
          uint64_t v26 = v25[1];
          uint64_t v45 = *v25;
          uint64_t v27 = *v36;
          (*v36)(v21, *(void *)(v0 + 304), v23);
          v27(v21 + v38[5], v22, v23);
          sub_10001D608(v24, v21 + v38[6], &qword_101638CF0);
          (*v35)(v21 + v38[7], v44, v43);
          uint64_t v28 = (void *)(v21 + v38[8]);
          void *v28 = 0;
          v28[1] = 0xE000000000000000;
          *(_DWORD *)(v21 + v38[9]) = v20;
          uint64_t v29 = (void *)(v21 + v38[10]);
          *uint64_t v29 = v45;
          v29[1] = v26;
          *(unsigned char *)(v21 + v38[11]) = 0;
          *(unsigned char *)(v21 + v38[12]) = 2;
          swift_bridgeObjectRetain();
          sub_100F66E2C(v46, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            sub_1000B83E8(0, _swiftEmptyArrayStorage[2] + 1, 1);
          }
          unint64_t v31 = _swiftEmptyArrayStorage[2];
          unint64_t v30 = _swiftEmptyArrayStorage[3];
          if (v31 >= v30 >> 1) {
            sub_1000B83E8(v30 > 1, v31 + 1, 1);
          }
          uint64_t v32 = *(void *)(v0 + 352);
          _swiftEmptyArrayStorage[2] = v31 + 1;
          sub_100F66E8C(v32, (uint64_t)_swiftEmptyArrayStorage+ ((*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80))+ *(void *)(v39 + 72) * v31, (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralBeaconInfo);
          uint64_t v6 = v47 + v37;
          int64_t v2 = v48 - 1;
          if (v48 == 1) {
            goto LABEL_17;
          }
          continue;
        }
        __break(1u);
        return _assertionFailure(_:_:file:line:flags:)();
      case 2uLL:
        uint64_t v18 = *(void *)(v15 + 16);
        uint64_t v17 = *(void *)(v15 + 24);
        BOOL v19 = __OFSUB__(v17, v18);
        uint64_t v16 = v17 - v18;
        if (!v19) {
          goto LABEL_7;
        }
        goto LABEL_23;
      default:
        goto LABEL_8;
    }
  }
}

uint64_t sub_100F4CD7C()
{
  swift_release();
  swift_errorRelease();
  uint64_t v3 = *(void *)(v0 + 176);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v1(v3);
}

uint64_t sub_100F4CE94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[17] = a4;
  v5[18] = a5;
  v5[15] = a2;
  v5[16] = a3;
  v5[14] = a1;
  uint64_t v6 = type metadata accessor for Date();
  v5[19] = v6;
  v5[20] = *(void *)(v6 - 8);
  v5[21] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for OwnedBeaconRecord();
  v5[22] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v5[23] = v8;
  v5[24] = *(void *)(v8 + 64);
  v5[25] = swift_task_alloc();
  v5[26] = sub_10000588C(&qword_10163BB20);
  v5[27] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for OwnedBeaconGroup(0);
  v5[28] = v9;
  v5[29] = *(void *)(v9 - 8);
  v5[30] = swift_task_alloc();
  sub_10000588C(&qword_101638CF0);
  v5[31] = swift_task_alloc();
  v5[32] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for UUID();
  v5[33] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v5[34] = v11;
  v5[35] = *(void *)(v11 + 64);
  v5[36] = swift_task_alloc();
  v5[37] = swift_task_alloc();
  v5[38] = swift_task_alloc();
  v5[39] = type metadata accessor for StableIdentifier();
  v5[40] = swift_task_alloc();
  v5[41] = swift_task_alloc();
  v5[42] = swift_task_alloc();
  return _swift_task_switch(sub_100F4D15C, 0, 0);
}

uint64_t sub_100F4D15C()
{
  uint64_t v77 = v0;
  uint64_t v2 = *(void *)(v0 + 328);
  uint64_t v1 = *(void *)(v0 + 336);
  sub_100F6681C(*(void *)(v0 + 120) + *(int *)(*(void *)(v0 + 176) + 24), v1, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
  sub_100F6681C(v1, v2, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v4 = *(void *)(v0 + 328);
      uint64_t v5 = *(void *)(v4 + 32);
      uint64_t v6 = *(void *)(v4 + 40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v7 = 0;
      goto LABEL_14;
    case 2u:
      uint64_t v8 = *(void *)(v0 + 328);
      uint64_t v9 = sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v10 = (uint64_t *)(v8 + *(int *)(v9 + 80));
      uint64_t v5 = *v10;
      uint64_t v6 = v10[1];
      uint64_t v11 = (char *)(v8 + *(int *)(v9 + 96));
      char v12 = *v11;
      int v13 = v11[1];
      swift_bridgeObjectRelease();
      *(void *)(v0 + 48) = v5;
      *(void *)(v0 + 56) = v6;
      sub_1000336D4();
      swift_bridgeObjectRetain();
      uint64_t v14 = Data.init<A>(hexString:)();
      if (v15 >> 60 != 15)
      {
        uint64_t v16 = v14;
        unint64_t v17 = v15;
        *(void *)(v0 + 32) = v14;
        *(void *)(v0 + 40) = v15;
        sub_1000362FC();
        uint64_t v18 = DataProtocol.nullTerminatedUTF8String.getter();
        uint64_t v20 = v19;
        sub_100037A24(v16, v17);
        if (v20)
        {
          swift_bridgeObjectRelease();
          uint64_t v5 = v18;
          uint64_t v6 = v20;
        }
      }
      if (v13) {
        char v7 = 0;
      }
      else {
        char v7 = v12;
      }
      (*(void (**)(void, void))(*(void *)(v0 + 272) + 8))(*(void *)(v0 + 328), *(void *)(v0 + 264));
      goto LABEL_14;
    case 3u:
      uint64_t v21 = *(void *)(v0 + 328);
      uint64_t v22 = sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v23 = (uint64_t *)(v21 + *(int *)(v22 + 80));
      uint64_t v25 = *v23;
      uint64_t v24 = v23[1];
      char v7 = *(unsigned char *)(v21 + *(int *)(v22 + 96));
      *(void *)(v0 + 16) = v25;
      *(void *)(v0 + 24) = v24;
      sub_1000336D4();
      uint64_t v26 = Data.init<A>(hexString:)();
      uint64_t v28 = *(void *)(v0 + 328);
      uint64_t v30 = *(void *)(v0 + 264);
      uint64_t v29 = *(void *)(v0 + 272);
      if (v27 >> 60 == 15)
      {
        (*(void (**)(void, void))(v29 + 8))(*(void *)(v0 + 328), *(void *)(v0 + 264));
      }
      else
      {
        uint64_t v31 = v26;
        unint64_t v32 = v27;
        *(void *)(v0 + 64) = v26;
        *(void *)(v0 + 72) = v27;
        sub_1000362FC();
        uint64_t v5 = DataProtocol.nullTerminatedUTF8String.getter();
        uint64_t v6 = v33;
        sub_100037A24(v31, v32);
        (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v30);
        if (v6)
        {
LABEL_14:
          *(unsigned char *)(v0 + 396) = v7;
          *(void *)(v0 + 344) = v5;
          *(void *)(v0 + 352) = v6;
          uint64_t v34 = *(void *)(v0 + 264);
          uint64_t v35 = *(void *)(v0 + 272);
          uint64_t v36 = *(void *)(v0 + 256);
          uint64_t v37 = *(void *)(v0 + 120);
          uint64_t v38 = *(int *)(*(void *)(v0 + 176) + 28);
          *(_DWORD *)(v0 + 392) = v38;
          sub_10001D074(v37 + v38, v36, &qword_101638CF0);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v36, 1, v34) == 1)
          {
            sub_10001DAB4(*(void *)(v0 + 256), &qword_101638CF0);
            uint64_t v39 = *(void *)(v0 + 200);
            uint64_t v40 = *(void *)(v0 + 184);
            uint64_t v42 = *(void *)(v0 + 136);
            uint64_t v41 = *(void *)(v0 + 144);
            uint64_t v43 = *(void *)(v0 + 128);
            sub_100F6681C(*(void *)(v0 + 120), v39, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
            unint64_t v44 = (*(unsigned __int8 *)(v40 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80);
            uint64_t v45 = (void *)swift_allocObject();
            *(void *)(v0 + 376) = v45;
            v45[2] = v43;
            v45[3] = v42;
            v45[4] = v41;
            sub_100F66E8C(v39, (uint64_t)v45 + v44, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
            swift_retain();
            swift_retain();
            swift_retain();
            uint64_t v46 = (void *)swift_task_alloc();
            *(void *)(v0 + 384) = v46;
            uint64_t v47 = sub_10000588C(&qword_101644320);
            *uint64_t v46 = v0;
            v46[1] = sub_100F4E024;
            int64_t v48 = sub_100F66C18;
            uint64_t v49 = v0 + 80;
            uint64_t v50 = v45;
          }
          else
          {
            uint64_t v51 = *(void *)(v0 + 296);
            uint64_t v52 = *(void *)(v0 + 304);
            uint64_t v53 = *(void *)(v0 + 272);
            uint64_t v54 = *(void *)(v0 + 264);
            uint64_t v55 = *(void *)(v0 + 136);
            uint64_t v75 = *(void *)(v0 + 144);
            uint64_t v56 = *(void *)(v0 + 128);
            v57 = *(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 32);
            v57(v52, *(void *)(v0 + 256), v54);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 16))(v51, v52, v54);
            unint64_t v58 = (*(unsigned __int8 *)(v53 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80);
            v59 = (void *)swift_allocObject();
            *(void *)(v0 + 360) = v59;
            v59[2] = v56;
            v59[3] = v55;
            v59[4] = v75;
            v57((uint64_t)v59 + v58, v51, v54);
            swift_retain();
            swift_retain();
            swift_retain();
            v60 = (void *)swift_task_alloc();
            *(void *)(v0 + 368) = v60;
            void *v60 = v0;
            v60[1] = sub_100F4DA34;
            uint64_t v47 = *(void *)(v0 + 208);
            uint64_t v49 = *(void *)(v0 + 216);
            int64_t v48 = sub_100F66DC0;
            uint64_t v50 = v59;
          }
          return unsafeBlocking<A>(_:)(v49, v48, v50, v47);
        }
      }
      if (qword_101636F08 != -1) {
        swift_once();
      }
      uint64_t v61 = *(void *)(v0 + 336);
      uint64_t v62 = *(void *)(v0 + 320);
      uint64_t v63 = type metadata accessor for Logger();
      sub_100010324(v63, (uint64_t)qword_10170E858);
      sub_100F6681C(v61, v62, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      v64 = Logger.logObject.getter();
      os_log_type_t v65 = static os_log_type_t.error.getter();
      BOOL v66 = os_log_type_enabled(v64, v65);
      uint64_t v67 = *(void *)(v0 + 336);
      uint64_t v68 = *(void *)(v0 + 320);
      if (v66)
      {
        uint64_t v69 = swift_slowAlloc();
        uint64_t v76 = swift_slowAlloc();
        *(_DWORD *)uint64_t v69 = 141558275;
        *(void *)(v0 + 104) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v69 + 12) = 2081;
        uint64_t v70 = sub_101110C7C();
        *(void *)(v0 + 96) = sub_1008FA0F0(v70, v71, &v76);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100F66E2C(v68, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
        _os_log_impl((void *)&_mh_execute_header, v64, v65, "Excluded invalid serial %{private,mask.hash}s", (uint8_t *)v69, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        sub_100F66E2C(v68, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      }
      sub_100F66E2C(v67, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      uint64_t v3 = *(void *)(v0 + 112);
LABEL_26:
      uint64_t v72 = type metadata accessor for ManagedCBPeripheralBeaconInfo();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v72 - 8) + 56))(v3, 1, 1, v72);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      v73 = *(uint64_t (**)(void))(v0 + 8);
      return v73();
    default:
      uint64_t v3 = *(void *)(v0 + 112);
      sub_100F66E2C(*(void *)(v0 + 336), (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      swift_bridgeObjectRelease();
      goto LABEL_26;
  }
}

uint64_t sub_100F4DA34()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100F4DB4C, 0, 0);
}

uint64_t sub_100F4DB4C()
{
  uint64_t v1 = *(void *)(v0 + 224);
  uint64_t v2 = *(void *)(v0 + 232);
  uint64_t v3 = *(void *)(v0 + 216);
  (*(void (**)(void, void))(*(void *)(v0 + 272) + 8))(*(void *)(v0 + 304), *(void *)(v0 + 264));
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_10001DAB4(*(void *)(v0 + 216), &qword_10163BB20);
    uint64_t v5 = *(void *)(v0 + 136);
    uint64_t v4 = *(void *)(v0 + 144);
    uint64_t v6 = *(void *)(v0 + 200);
    uint64_t v7 = *(void *)(v0 + 184);
    uint64_t v8 = *(void *)(v0 + 128);
    sub_100F6681C(*(void *)(v0 + 120), v6, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    unint64_t v9 = (*(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    uint64_t v10 = (void *)swift_allocObject();
    *(void *)(v0 + 376) = v10;
    v10[2] = v8;
    v10[3] = v5;
    v10[4] = v4;
    sub_100F66E8C(v6, (uint64_t)v10 + v9, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 384) = v11;
    uint64_t v12 = sub_10000588C(&qword_101644320);
    *uint64_t v11 = v0;
    v11[1] = sub_100F4E024;
    int v13 = sub_100F66C18;
    uint64_t v14 = v0 + 80;
    unint64_t v15 = v10;
    return unsafeBlocking<A>(_:)(v14, v13, v15, v12);
  }
  uint64_t v16 = *(void *)(v0 + 240);
  uint64_t v17 = *(void *)(v0 + 224);
  sub_100F66E8C(*(void *)(v0 + 216), v16, type metadata accessor for OwnedBeaconGroup);
  uint64_t v18 = (uint64_t *)(v16 + *(int *)(v17 + 36));
  uint64_t v45 = *v18;
  uint64_t v46 = v18[1];
  swift_bridgeObjectRetain();
  sub_100F66E2C(v16, type metadata accessor for OwnedBeaconGroup);
  uint64_t v19 = *(void *)(v0 + 288);
  uint64_t v21 = *(void *)(v0 + 264);
  uint64_t v20 = *(void *)(v0 + 272);
  uint64_t v22 = *(void *)(v0 + 248);
  uint64_t v23 = *(int **)(v0 + 176);
  uint64_t v24 = *(void *)(v0 + 120);
  uint64_t v25 = v24 + *(int *)(v0 + 392);
  uint64_t v26 = *(void *)(v0 + 160);
  uint64_t v47 = *(void *)(v0 + 152);
  uint64_t v49 = *(void *)(v0 + 168);
  uid_t v27 = getuid();
  sub_100DC5FC0(v27);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v19, v24 + v23[5], v21);
  sub_10001D074(v25, v22, &qword_101638CF0);
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v26 + 16))(v49, v24 + v23[8], v47);
  uint64_t v28 = *(void *)(v24 + v23[16]);
  if (v28 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v28 > 0x7FFFFFFF)
  {
LABEL_11:
    __break(1u);
    return unsafeBlocking<A>(_:)(v14, v13, v15, v12);
  }
  char v50 = *(unsigned char *)(v0 + 396);
  uint64_t v48 = *(void *)(v0 + 352);
  uint64_t v30 = *(void *)(v0 + 288);
  uint64_t v29 = *(void *)(v0 + 296);
  uint64_t v32 = *(void *)(v0 + 264);
  uint64_t v31 = *(void *)(v0 + 272);
  uint64_t v33 = *(void *)(v0 + 248);
  uint64_t v34 = *(void *)(v0 + 160);
  uint64_t v43 = *(void *)(v0 + 168);
  uint64_t v44 = *(void *)(v0 + 344);
  uint64_t v42 = *(void *)(v0 + 152);
  uint64_t v35 = *(void *)(v0 + 112);
  sub_100F66E2C(*(void *)(v0 + 336), (uint64_t (*)(void))type metadata accessor for StableIdentifier);
  uint64_t v36 = *(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 32);
  v36(v35, v29, v32);
  uint64_t v37 = (int *)type metadata accessor for ManagedCBPeripheralBeaconInfo();
  v36(v35 + v37[5], v30, v32);
  sub_10001D608(v33, v35 + v37[6], &qword_101638CF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 32))(v35 + v37[7], v43, v42);
  uint64_t v38 = (void *)(v35 + v37[8]);
  *uint64_t v38 = v45;
  v38[1] = v46;
  *(_DWORD *)(v35 + v37[9]) = v28;
  uint64_t v39 = (void *)(v35 + v37[10]);
  *uint64_t v39 = v44;
  v39[1] = v48;
  *(unsigned char *)(v35 + v37[11]) = 1;
  *(unsigned char *)(v35 + v37[12]) = v50;
  (*(void (**)(uint64_t, void, uint64_t, int *))(*((void *)v37 - 1) + 56))(v35, 0, 1, v37);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v40 = *(uint64_t (**)(void))(v0 + 8);
  return v40();
}

uint64_t sub_100F4E024()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100F4E13C, 0, 0);
}

uint64_t sub_100F4E13C()
{
  uint64_t v29 = *(void *)(v0 + 80);
  unint64_t v31 = *(void *)(v0 + 88);
  uint64_t v1 = *(void *)(v0 + 288);
  uint64_t v2 = *(void *)(v0 + 264);
  uint64_t v3 = *(void *)(v0 + 272);
  uint64_t v4 = *(void *)(v0 + 248);
  uint64_t v5 = *(int **)(v0 + 176);
  uint64_t v6 = *(void *)(v0 + 120);
  uint64_t v7 = v6 + *(int *)(v0 + 392);
  uint64_t v8 = *(void *)(v0 + 160);
  uint64_t v33 = *(void *)(v0 + 152);
  uint64_t v35 = *(void *)(v0 + 168);
  uid_t v9 = getuid();
  sub_100DC5FC0(v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v6 + v5[5], v2);
  sub_10001D074(v7, v4, &qword_101638CF0);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v35, v6 + v5[8], v33);
  uint64_t v11 = *(void *)(v6 + v5[16]);
  if (v11 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_12;
  }
  if (v11 > 0x7FFFFFFF)
  {
LABEL_12:
    __break(1u);
    return result;
  }
  char v36 = *(unsigned char *)(v0 + 396);
  if (v31) {
    unint64_t v12 = v31;
  }
  else {
    unint64_t v12 = 0xE700000000000000;
  }
  uint64_t v13 = 0x6E776F6E6B6E55;
  if (v31) {
    uint64_t v13 = v29;
  }
  unint64_t v28 = v12;
  uint64_t v30 = v13;
  uint64_t v32 = *(void *)(v0 + 344);
  uint64_t v34 = *(void *)(v0 + 352);
  uint64_t v15 = *(void *)(v0 + 288);
  uint64_t v14 = *(void *)(v0 + 296);
  uint64_t v16 = *(void *)(v0 + 264);
  uint64_t v17 = *(void *)(v0 + 272);
  uint64_t v18 = *(void *)(v0 + 248);
  uint64_t v19 = *(void *)(v0 + 160);
  uint64_t v26 = *(void *)(v0 + 152);
  uint64_t v27 = *(void *)(v0 + 168);
  uint64_t v20 = *(void *)(v0 + 112);
  sub_100F66E2C(*(void *)(v0 + 336), (uint64_t (*)(void))type metadata accessor for StableIdentifier);
  uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32);
  v21(v20, v14, v16);
  uint64_t v22 = (int *)type metadata accessor for ManagedCBPeripheralBeaconInfo();
  v21(v20 + v22[5], v15, v16);
  sub_10001D608(v18, v20 + v22[6], &qword_101638CF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 32))(v20 + v22[7], v27, v26);
  uint64_t v23 = (uint64_t *)(v20 + v22[8]);
  *uint64_t v23 = v30;
  v23[1] = v28;
  *(_DWORD *)(v20 + v22[9]) = v11;
  uint64_t v24 = (void *)(v20 + v22[10]);
  *uint64_t v24 = v32;
  v24[1] = v34;
  *(unsigned char *)(v20 + v22[11]) = 1;
  *(unsigned char *)(v20 + v22[12]) = v36;
  (*(void (**)(uint64_t, void, uint64_t, int *))(*((void *)v22 - 1) + 56))(v20, 0, 1, v22);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v25 = *(uint64_t (**)(void))(v0 + 8);
  return v25();
}

uint64_t sub_100F4E45C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[7] = a4;
  v5[8] = a5;
  v5[5] = a2;
  v5[6] = a3;
  v5[4] = a1;
  uint64_t v6 = type metadata accessor for SharedBeaconRecord(0);
  v5[9] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[10] = v7;
  v5[11] = *(void *)(v7 + 64);
  v5[12] = swift_task_alloc();
  return _swift_task_switch(sub_100F4E52C, 0, 0);
}

uint64_t sub_100F4E52C()
{
  uint64_t v1 = v0[12];
  uint64_t v2 = v0[10];
  uint64_t v4 = v0[7];
  uint64_t v3 = v0[8];
  uint64_t v5 = v0[6];
  sub_100F6681C(v0[5], v1, type metadata accessor for SharedBeaconRecord);
  unint64_t v6 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v7 = (void *)swift_allocObject();
  v0[13] = (uint64_t)v7;
  v7[2] = v5;
  v7[3] = v4;
  v7[4] = v3;
  sub_100F66E8C(v1, (uint64_t)v7 + v6, type metadata accessor for SharedBeaconRecord);
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v8 = (void *)swift_task_alloc();
  v0[14] = (uint64_t)v8;
  uint64_t v9 = sub_10000588C(&qword_101644320);
  *uint64_t v8 = v0;
  v8[1] = sub_100F4E6A0;
  return unsafeBlocking<A>(_:)(v0 + 2, sub_100F667DC, v7, v9);
}

uint64_t sub_100F4E6A0()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100F4E7B8, 0, 0);
}

uint64_t sub_100F4E7B8()
{
  uint64_t v1 = v0[9];
  uint64_t v3 = v0[4];
  uint64_t v2 = v0[5];
  unint64_t v4 = v0[3];
  uint64_t v21 = v0[2];
  uid_t v5 = getuid();
  sub_100DC5FC0(v5);
  uint64_t v6 = v2 + *(int *)(v1 + 20);
  uint64_t v7 = (int *)type metadata accessor for ManagedCBPeripheralBeaconInfo();
  uint64_t v8 = v3 + v7[5];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v8, v6, v9);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v3 + v7[6], 1, 1, v9);
  uint64_t result = sub_10120DE1C(v3 + v7[7]);
  uint64_t v12 = *(void *)(v2 + *(int *)(v1 + 44));
  if (v12 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_13;
  }
  if (v12 > 0x7FFFFFFF)
  {
LABEL_13:
    __break(1u);
    return result;
  }
  uint64_t v13 = v0[4];
  if (v4) {
    unint64_t v14 = v4;
  }
  else {
    unint64_t v14 = 0xE700000000000000;
  }
  if (v4) {
    uint64_t v15 = v21;
  }
  else {
    uint64_t v15 = 0x6E776F6E6B6E55;
  }
  uint64_t v16 = UUID.uuidString.getter();
  uint64_t v17 = (uint64_t *)(v13 + v7[8]);
  uint64_t *v17 = v15;
  v17[1] = v14;
  *(_DWORD *)(v13 + v7[9]) = v12;
  uint64_t v18 = (uint64_t *)(v13 + v7[10]);
  *uint64_t v18 = v16;
  v18[1] = v19;
  *(unsigned char *)(v13 + v7[11]) = 1;
  *(unsigned char *)(v13 + v7[12]) = 0;
  (*(void (**)(uint64_t, void, uint64_t, int *))(*((void *)v7 - 1) + 56))(v13, 0, 1, v7);
  swift_task_dealloc();
  uint64_t v20 = (uint64_t (*)(void))v0[1];
  return v20();
}

uint64_t sub_100F4E9C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t (*a3)(void)@<X4>, void *a4@<X8>)
{
  uint64_t v8 = sub_10000588C(&qword_10163B9E0);
  __chkstk_darwin(v8);
  uint64_t v10 = &v17[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = a2 + *(int *)(a3(0) + 20);
  uint64_t v18 = a1;
  uint64_t v19 = v11;
  QueueSynchronizer.conditionalSync<A>(_:)();
  uint64_t v12 = type metadata accessor for BeaconNamingRecord();
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v10, 1, v12) == 1)
  {
    uint64_t result = sub_10001DAB4((uint64_t)v10, &qword_10163B9E0);
    uint64_t v14 = 0;
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v16 = (uint64_t *)&v10[*(int *)(v12 + 32)];
    uint64_t v14 = *v16;
    uint64_t v15 = v16[1];
    swift_bridgeObjectRetain();
    uint64_t result = sub_100F66E2C((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
  }
  *a4 = v14;
  a4[1] = v15;
  return result;
}

uint64_t sub_100F4EB38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[22] = a4;
  v5[23] = a5;
  v5[20] = a2;
  v5[21] = a3;
  v5[19] = a1;
  uint64_t v6 = type metadata accessor for Date();
  v5[24] = v6;
  v5[25] = *(void *)(v6 - 8);
  v5[26] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for BeaconIdentifier();
  v5[27] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v5[28] = v8;
  v5[29] = *(void *)(v8 + 64);
  v5[30] = swift_task_alloc();
  v5[31] = swift_task_alloc();
  v5[32] = swift_task_alloc();
  v5[33] = swift_task_alloc();
  v5[34] = sub_10000588C(&qword_10163B9F0);
  v5[35] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for OwnedBeaconRecord();
  v5[36] = v9;
  v5[37] = *(void *)(v9 - 8);
  v5[38] = swift_task_alloc();
  return _swift_task_switch(sub_100F4ED1C, 0, 0);
}

uint64_t sub_100F4ED1C()
{
  uint64_t v1 = v0[33];
  uint64_t v2 = v0[28];
  uint64_t v4 = v0[22];
  uint64_t v3 = v0[23];
  uint64_t v5 = v0[21];
  sub_100F6681C(v0[20], v1, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  unint64_t v6 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v7 = (void *)swift_allocObject();
  v0[39] = (uint64_t)v7;
  v7[2] = v5;
  v7[3] = v4;
  v7[4] = v3;
  sub_100F66E8C(v1, (uint64_t)v7 + v6, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v8 = (void *)swift_task_alloc();
  v0[40] = (uint64_t)v8;
  *uint64_t v8 = v0;
  v8[1] = sub_100F4EE74;
  uint64_t v10 = v0[34];
  uint64_t v9 = v0[35];
  return unsafeBlocking<A>(_:)(v9, sub_100F65F54, v7, v10);
}

uint64_t sub_100F4EE74()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100F4EF8C, 0, 0);
}

uint64_t sub_100F4EF8C()
{
  uint64_t v32 = v0;
  uint64_t v1 = v0[35];
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(v0[37] + 48))(v1, 1, v0[36]) == 1)
  {
    sub_10001DAB4(v1, &qword_10163B9F0);
    if (qword_101636F08 != -1) {
      swift_once();
    }
    uint64_t v2 = (long long *)(v0 + 7);
    uint64_t v3 = v0[30];
    uint64_t v4 = v0[20];
    uint64_t v5 = type metadata accessor for Logger();
    v0[42] = sub_100010324(v5, (uint64_t)qword_10170E858);
    sub_100F6681C(v4, v3, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    unint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    BOOL v8 = os_log_type_enabled(v6, v7);
    uint64_t v9 = v0[30];
    if (v8)
    {
      uint64_t v10 = swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 141558275;
      v0[15] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v10 + 12) = 2081;
      type metadata accessor for UUID();
      sub_100F66400((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v31 = v11;
      v12._countAndFlagsBits = 47;
      v12._object = (void *)0xE100000000000000;
      String.append(_:)(v12);
      uint64_t v2 = (long long *)(v0 + 7);
      v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v13);
      swift_bridgeObjectRelease();
      v0[16] = sub_1008FA0F0(v30, v31, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100F66E2C(v9, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "beaconInfo: no beacon record for %{private,mask.hash}s. Looking up standalone beacons...", (uint8_t *)v10, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100F66E2C(v0[30], (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    }

    if (qword_1016375E8 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, (uint64_t)v2, (uint64_t *)&unk_101638D30);
    if (v0[10])
    {
      sub_10001CEB0(v2, (uint64_t)(v0 + 2));
      sub_10001CD44(v0 + 2, v0[5]);
      unint64_t v28 = (uint64_t (__cdecl *)())((char *)&dword_101639198 + dword_101639198);
      uint64_t v26 = (void *)swift_task_alloc();
      v0[43] = v26;
      *uint64_t v26 = v0;
      v26[1] = sub_100F4F9CC;
      return v28();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    sub_100F66E8C(v1, v0[38], (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    if (qword_101636F08 != -1) {
      swift_once();
    }
    uint64_t v14 = v0[32];
    uint64_t v15 = v0[20];
    uint64_t v16 = type metadata accessor for Logger();
    sub_100010324(v16, (uint64_t)qword_10170E858);
    sub_100F6681C(v15, v14, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    BOOL v19 = os_log_type_enabled(v17, v18);
    uint64_t v20 = v0[32];
    if (v19)
    {
      uint64_t v21 = swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 141558275;
      v0[17] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v21 + 12) = 2081;
      type metadata accessor for UUID();
      sub_100F66400((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v31 = v22;
      v23._countAndFlagsBits = 47;
      v23._object = (void *)0xE100000000000000;
      String.append(_:)(v23);
      v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v24);
      swift_bridgeObjectRelease();
      v0[18] = sub_1008FA0F0(v30, v31, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100F66E2C(v20, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "beaconInfo: found beacon record for %{private,mask.hash}s!", (uint8_t *)v21, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100F66E2C(v0[32], (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    }

    uint64_t v27 = (void *)swift_task_alloc();
    v0[41] = v27;
    *uint64_t v27 = v0;
    v27[1] = sub_100F4F694;
    return sub_100D1B4D0();
  }
  return result;
}

uint64_t sub_100F4F694(char a1)
{
  *(unsigned char *)(*(void *)v1 + 368) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100F4F794, 0, 0);
}

uint64_t sub_100F4F794()
{
  int v23 = *(unsigned __int8 *)(v0 + 368);
  uint64_t v1 = *(void *)(v0 + 304);
  uint64_t v2 = *(int **)(v0 + 288);
  uint64_t v3 = *(void *)(v0 + 248);
  uint64_t v5 = *(void *)(v0 + 200);
  uint64_t v4 = *(void *)(v0 + 208);
  uint64_t v6 = *(void *)(v0 + 192);
  uint64_t v24 = v6;
  uint64_t v25 = v4;
  uint64_t v7 = *(void *)(v0 + 152);
  sub_100F6681C(*(void *)(v0 + 160), v3, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v1 + v2[8], v6);
  BOOL v8 = (uint64_t *)(v1 + v2[12]);
  uint64_t v9 = *v8;
  unint64_t v10 = v8[1];
  uint64_t v22 = *v8;
  uint64_t v11 = v2[10];
  Swift::String v12 = (uint64_t *)(v1 + v2[9]);
  uint64_t v13 = *v12;
  unint64_t v14 = v12[1];
  uint64_t v15 = *(void *)(v1 + v11);
  unint64_t v16 = *(void *)(v1 + v11 + 8);
  sub_1000361E0(v9, v10);
  sub_1000361E0(v13, v14);
  sub_100037A38(v15, v16);
  sub_100F66E2C(v1, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  if (v23) {
    char v17 = 2;
  }
  else {
    char v17 = 0;
  }
  sub_100F66E8C(v3, v7, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  os_log_type_t v18 = (int *)type metadata accessor for KeyGenerationBeaconInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v7 + v18[5], v25, v24);
  BOOL v19 = (uint64_t *)(v7 + v18[6]);
  *BOOL v19 = v22;
  v19[1] = v10;
  v19[2] = v13;
  v19[3] = v14;
  v19[4] = v15;
  v19[5] = v16;
  *(unsigned char *)(v7 + v18[7]) = v17;
  (*(void (**)(uint64_t, void, uint64_t, int *))(*((void *)v18 - 1) + 56))(v7, 0, 1, v18);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v20 = *(uint64_t (**)(void))(v0 + 8);
  return v20();
}

uint64_t sub_100F4F9CC(uint64_t a1)
{
  *(void *)(*(void *)v1 + 352) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100F4FACC, 0, 0);
}

uint64_t sub_100F4FACC()
{
  uint64_t v1 = v0 + 16;
  if (*(void *)(v0 + 352))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v2 = *(void *)(v0 + 352);
    return _swift_task_switch(sub_100F4FC7C, v2, 0);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "No BeaconKeyService available!", v5, 2u);
      swift_slowDealloc();
    }

    sub_100F65D4C();
    swift_allocError();
    *uint64_t v6 = 1;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
    return v7();
  }
}

uint64_t sub_100F4FC7C(uint64_t (*a1)(), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(v3[44] + 128);
  if (v4)
  {
    sub_1009FE6A8(v3[20], v4, v3[19]);
    v3[45] = 0;
    a1 = sub_100F4FD18;
    a3 = 0;
  }
  else
  {
    __break(1u);
  }
  return _swift_task_switch(a1, 0, a3);
}

uint64_t sub_100F4FD18()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100F4FDD4()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100F4FE98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[6] = a3;
  v4[7] = a4;
  v4[4] = a1;
  v4[5] = a2;
  v4[8] = type metadata accessor for BeaconIdentifier();
  v4[9] = swift_task_alloc();
  sub_10000588C(&qword_101659D60);
  uint64_t v9 = swift_task_alloc();
  v4[10] = v9;
  uint64_t v10 = type metadata accessor for KeyGenerationBeaconInfo();
  v4[11] = v10;
  v4[12] = *(void *)(v10 - 8);
  v4[13] = swift_task_alloc();
  uint64_t v11 = (void *)swift_task_alloc();
  v4[14] = v11;
  *uint64_t v11 = v4;
  v11[1] = sub_100F50024;
  return sub_100F4EB38(v9, a1, a2, a3, a4);
}

uint64_t sub_100F50024()
{
  *(void *)(*(void *)v1 + 120) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100F50954;
  }
  else {
    uint64_t v2 = sub_100F50138;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100F50138()
{
  uint64_t v30 = v0;
  uint64_t v1 = v0[11];
  uint64_t v2 = v0[10];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0[12] + 48))(v2, 1, v1) == 1)
  {
    sub_10001DAB4(v2, &qword_101659D60);
    if (qword_101636F08 != -1) {
      swift_once();
    }
    uint64_t v3 = v0[4];
    uint64_t v4 = v0[9];
    uint64_t v5 = type metadata accessor for Logger();
    sub_100010324(v5, (uint64_t)qword_10170E858);
    sub_100F6681C(v3, v4, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    BOOL v8 = os_log_type_enabled(v6, v7);
    uint64_t v9 = v0[9];
    if (v8)
    {
      uint64_t v10 = swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 141558275;
      v0[2] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v10 + 12) = 2081;
      type metadata accessor for UUID();
      sub_100F66400((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v29 = v11;
      v12._countAndFlagsBits = 47;
      v12._object = (void *)0xE100000000000000;
      String.append(_:)(v12);
      v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v13);
      swift_bridgeObjectRelease();
      v0[3] = sub_1008FA0F0(v28, v29, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100F66E2C(v9, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "No KeyGenerationBeaconInfo for %{private,mask.hash}s!", (uint8_t *)v10, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100F66E2C(v0[9], (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v21 = (uint64_t (*)(void *))v0[1];
    return v21(_swiftEmptyArrayStorage);
  }
  else
  {
    uint64_t v14 = v0[13];
    sub_100F66E8C(v2, v14, (uint64_t (*)(void))type metadata accessor for KeyGenerationBeaconInfo);
    if (*(void *)(v14 + *(int *)(v1 + 24) + 8) >> 60 == 15)
    {
      uint64_t v15 = (void *)swift_task_alloc();
      v0[17] = v15;
      void *v15 = v0;
      v15[1] = sub_100F506EC;
      uint64_t v16 = v0[13];
      uint64_t v17 = v0[6];
      uint64_t v18 = v0[7];
      uint64_t v19 = v0[5];
      return sub_100F5B97C(v16, v19, v17, v18);
    }
    else
    {
      uint64_t v22 = (void *)swift_task_alloc();
      v0[16] = v22;
      *uint64_t v22 = v0;
      v22[1] = sub_100F505C4;
      uint64_t v23 = v0[13];
      uint64_t v24 = v0[6];
      uint64_t v25 = v0[7];
      uint64_t v26 = v0[5];
      return sub_100F51D44(v23, v26, v24, v25);
    }
  }
}

uint64_t sub_100F505C4(uint64_t a1)
{
  uint64_t v4 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    *(void *)(v4 + 152) = v1;
    uint64_t v5 = sub_100F508B8;
  }
  else
  {
    *(void *)(v4 + 144) = a1;
    uint64_t v5 = sub_100F50814;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100F506EC(uint64_t a1)
{
  uint64_t v4 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    *(void *)(v4 + 152) = v1;
    uint64_t v5 = sub_100F508B8;
  }
  else
  {
    *(void *)(v4 + 144) = a1;
    uint64_t v5 = sub_100F50814;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100F50814()
{
  sub_100F66E2C(v0[13], (uint64_t (*)(void))type metadata accessor for KeyGenerationBeaconInfo);
  uint64_t v1 = v0[18];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(uint64_t))v0[1];
  return v2(v1);
}

uint64_t sub_100F508B8()
{
  sub_100F66E2C(*(void *)(v0 + 104), (uint64_t (*)(void))type metadata accessor for KeyGenerationBeaconInfo);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100F50954()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100F509D4(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v7 + 288) = a2;
  *(void *)(v7 + 296) = a4;
  *(unsigned char *)(v7 + 544) = a3;
  *(void *)(v7 + 280) = a1;
  *(void *)(v7 + 304) = type metadata accessor for BeaconIdentifier();
  *(void *)(v7 + 312) = swift_task_alloc();
  sub_10000588C(&qword_101659D60);
  uint64_t v12 = swift_task_alloc();
  *(void *)(v7 + 320) = v12;
  uint64_t v13 = type metadata accessor for KeyGenerationBeaconInfo();
  *(void *)(v7 + 328) = v13;
  *(void *)(v7 + 336) = *(void *)(v13 - 8);
  *(void *)(v7 + 344) = swift_task_alloc();
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v7 + 352) = v14;
  *uint64_t v14 = v7;
  v14[1] = sub_100F50B64;
  return sub_100F4EB38(v12, a2, a5, a6, a7);
}

uint64_t sub_100F50B64()
{
  *(void *)(*(void *)v1 + 360) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100F51C14;
  }
  else {
    uint64_t v2 = sub_100F50C78;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100F50C78()
{
  uint64_t v21 = v0;
  uint64_t v1 = *(void *)(v0 + 320);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)(v0 + 336) + 48))(v1, 1, *(void *)(v0 + 328)) == 1)
  {
    sub_10001DAB4(v1, &qword_101659D60);
    if (qword_101636F08 != -1) {
      swift_once();
    }
    uint64_t v2 = *(void *)(v0 + 312);
    uint64_t v3 = *(void *)(v0 + 288);
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_10170E858);
    sub_100F6681C(v3, v2, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    BOOL v7 = os_log_type_enabled(v5, v6);
    uint64_t v8 = *(void *)(v0 + 312);
    if (v7)
    {
      uint64_t v9 = swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 141558275;
      *(void *)(v0 + 264) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v9 + 12) = 2081;
      type metadata accessor for UUID();
      sub_100F66400((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v20 = v10;
      v11._countAndFlagsBits = 47;
      v11._object = (void *)0xE100000000000000;
      String.append(_:)(v11);
      v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      *(void *)(v0 + 272) = sub_1008FA0F0(v19, v20, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100F66E2C(v8, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "No KeyGenerationBeaconInfo for %{private,mask.hash}s!", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100F66E2C(*(void *)(v0 + 312), (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    }

    uint64_t v15 = *(void *)(v0 + 280);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    *(void *)uint64_t v15 = 3;
    *(_OWORD *)(v15 + 8) = 0u;
    *(_OWORD *)(v15 + 24) = 0u;
    *(void *)(v15 + 40) = 0;
    uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
    return v16();
  }
  else
  {
    sub_100F66E8C(v1, *(void *)(v0 + 344), (uint64_t (*)(void))type metadata accessor for KeyGenerationBeaconInfo);
    if (qword_1016375E8 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 160, (uint64_t *)&unk_101638D30);
    if (*(void *)(v0 + 184))
    {
      sub_10001CEB0((long long *)(v0 + 160), v0 + 200);
      sub_10001CD44((void *)(v0 + 200), *(void *)(v0 + 224));
      uint64_t v17 = (uint64_t (__cdecl *)())((char *)&dword_101639198 + dword_101639198);
      uint64_t v14 = (void *)swift_task_alloc();
      *(void *)(v0 + 368) = v14;
      *uint64_t v14 = v0;
      v14[1] = sub_100F51108;
      return v17();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_100F51108(uint64_t a1)
{
  *(void *)(*(void *)v1 + 376) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100F51208, 0, 0);
}

uint64_t sub_100F51208()
{
  uint64_t v1 = v0[47];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 25));
  if (v1)
  {
    uint64_t v2 = v0[47];
    return _swift_task_switch(sub_100F513D4, v2, 0);
  }
  else
  {
    if (qword_101636F08 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_10170E858);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      os_log_type_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Missing BeaconKeyService!", v6, 2u);
      swift_slowDealloc();
    }
    uint64_t v7 = v0[43];

    sub_100F65D4C();
    swift_allocError();
    *uint64_t v8 = 1;
    swift_willThrow();
    sub_100F66E2C(v7, (uint64_t (*)(void))type metadata accessor for KeyGenerationBeaconInfo);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
}

uint64_t sub_100F513D4()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 376) + 128);
  *(void *)(v0 + 384) = v1;
  if (v1)
  {
    swift_retain();
    uint64_t v2 = sub_100F51460;
  }
  else
  {
    uint64_t v2 = sub_100F51A80;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100F51460()
{
  uint64_t v1 = (uint64_t *)(*(void *)(v0 + 344) + *(int *)(*(void *)(v0 + 328) + 24));
  unint64_t v2 = v1[1];
  if (v2 >> 60 == 15)
  {
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    unint64_t v5 = 0;
    uint64_t v6 = 0;
    unint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    unint64_t v2 = 0;
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    unint64_t v12 = 0xF000000000000000;
    unint64_t v13 = 0xF000000000000000;
  }
  else
  {
    uint64_t v9 = *v1;
    uint64_t v10 = v1[2];
    unint64_t v11 = v1[3];
    uint64_t v6 = v1[4];
    unint64_t v7 = v1[5];
    sub_1000361E0(*v1, v1[1]);
    sub_1000361E0(v10, v11);
    sub_100037A38(v6, v7);
    uint64_t v24 = PrivateKey.publicKey.getter(v9, v2);
    unint64_t v15 = v14;
    sub_1000361E0(v9, v2);
    sub_1000361E0(v10, v11);
    sub_100F65DA0(v9, v2, v10, v11, v6, v7, (void (*)(void))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_10015AF5C);
    if (v7 >> 60 == 15)
    {
      uint64_t v3 = 0;
      uint64_t v4 = 0;
      unint64_t v5 = 0;
      uint64_t v6 = 0;
      unint64_t v7 = 0;
      unint64_t v12 = 0xF000000000000000;
    }
    else
    {
      sub_100F65DA0(v9, v2, v10, v11, v6, v7, (void (*)(void))sub_1000361E0, (void (*)(uint64_t, uint64_t))sub_100037A38);
      sub_100037A38(v6, v7);
      uint64_t v3 = PrivateKey.publicKey.getter(v9, v2);
      unint64_t v12 = v16;
      sub_1000361E0(v9, v2);
      sub_100F65DA0(v9, v2, v10, v11, v6, v7, (void (*)(void))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_10015AF5C);
      uint64_t v4 = v9;
      unint64_t v5 = v2;
    }
    uint64_t v8 = v24;
    unint64_t v13 = v15;
  }
  *(void *)(v0 + 472) = v10;
  *(void *)(v0 + 480) = v11;
  *(void *)(v0 + 456) = v9;
  *(void *)(v0 + 464) = v2;
  *(void *)(v0 + 440) = v8;
  *(void *)(v0 + 448) = v13;
  *(void *)(v0 + 424) = v6;
  *(void *)(v0 + 432) = v7;
  *(void *)(v0 + 408) = v4;
  *(void *)(v0 + 416) = v5;
  *(void *)(v0 + 392) = v3;
  *(void *)(v0 + 400) = v12;
  uint64_t v17 = v10;
  uint64_t v18 = *(void *)(v0 + 384);
  *(void *)(v0 + 16) = v3;
  *(void *)(v0 + 24) = v12;
  *(void *)(v0 + 32) = v4;
  *(void *)(v0 + 40) = v5;
  *(void *)(v0 + 48) = v6;
  *(void *)(v0 + 56) = v7;
  *(void *)(v0 + 64) = v8;
  *(void *)(v0 + 72) = v13;
  *(void *)(v0 + 80) = v9;
  *(void *)(v0 + 88) = v2;
  *(void *)(v0 + 96) = v17;
  *(void *)(v0 + 104) = v11;
  uint64_t v19 = (void *)swift_task_alloc();
  *(void *)(v0 + 488) = v19;
  *uint64_t v19 = v0;
  v19[1] = sub_100F5175C;
  uint64_t v20 = *(void *)(v0 + 288);
  uint64_t v21 = *(void *)(v0 + 296);
  char v22 = *(unsigned char *)(v0 + 544);
  return sub_1003D8A80(v0 + 112, v20, v0 + 64, v0 + 16, v22, v21, v18, 4000);
}

uint64_t sub_100F5175C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 496) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v4 = *(void *)(v2 + 472);
    uint64_t v3 = *(void *)(v2 + 480);
    uint64_t v6 = *(void *)(v2 + 456);
    uint64_t v5 = *(void *)(v2 + 464);
    uint64_t v8 = *(void *)(v2 + 440);
    unint64_t v7 = *(void *)(v2 + 448);
    sub_100F65DA0(*(void *)(v2 + 392), *(void *)(v2 + 400), *(void *)(v2 + 408), *(void *)(v2 + 416), *(void *)(v2 + 424), *(void *)(v2 + 432), (void (*)(void))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
    sub_100F65DA0(v8, v7, v6, v5, v4, v3, (void (*)(void))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
    uint64_t v9 = sub_100F51C94;
  }
  else
  {
    uint64_t v11 = *(void *)(v2 + 472);
    uint64_t v10 = *(void *)(v2 + 480);
    uint64_t v13 = *(void *)(v2 + 456);
    uint64_t v12 = *(void *)(v2 + 464);
    uint64_t v15 = *(void *)(v2 + 440);
    unint64_t v14 = *(void *)(v2 + 448);
    uint64_t v16 = *(void *)(v2 + 424);
    uint64_t v17 = *(void *)(v2 + 432);
    uint64_t v18 = *(void *)(v2 + 408);
    uint64_t v19 = *(void *)(v2 + 416);
    uint64_t v20 = *(void *)(v2 + 392);
    unint64_t v21 = *(void *)(v2 + 400);
    *(unsigned char *)(v2 + 545) = *(unsigned char *)(v2 + 112);
    *(_OWORD *)(v2 + 504) = *(_OWORD *)(v2 + 120);
    *(_OWORD *)(v2 + 520) = *(_OWORD *)(v2 + 136);
    *(void *)(v2 + 536) = *(void *)(v2 + 152);
    sub_100F65DA0(v20, v21, v18, v19, v16, v17, (void (*)(void))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
    sub_100F65DA0(v15, v14, v13, v12, v11, v10, (void (*)(void))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
    uint64_t v9 = sub_100F51990;
  }
  return _swift_task_switch(v9, 0, 0);
}

uint64_t sub_100F51990()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + 545);
  uint64_t v2 = *(void *)(v0 + 344);
  swift_release();
  swift_release();
  sub_100F66E2C(v2, (uint64_t (*)(void))type metadata accessor for KeyGenerationBeaconInfo);
  uint64_t v3 = *(void *)(v0 + 536);
  long long v7 = *(_OWORD *)(v0 + 504);
  long long v8 = *(_OWORD *)(v0 + 520);
  uint64_t v4 = *(void *)(v0 + 280);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  *(void *)uint64_t v4 = v1;
  *(_OWORD *)(v4 + 8) = v7;
  *(_OWORD *)(v4 + 24) = v8;
  *(void *)(v4 + 40) = v3;
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_100F51A80()
{
  if (qword_101636F08 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170E858);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Missing LTKGenerator!", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = *(void *)(v0 + 344);

  sub_100F65D4C();
  swift_allocError();
  *uint64_t v6 = 1;
  swift_willThrow();
  swift_release();
  sub_100F66E2C(v5, (uint64_t (*)(void))type metadata accessor for KeyGenerationBeaconInfo);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  long long v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_100F51C14()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100F51C94()
{
  uint64_t v1 = *(void *)(v0 + 344);
  swift_release();
  swift_release();
  sub_100F66E2C(v1, (uint64_t (*)(void))type metadata accessor for KeyGenerationBeaconInfo);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100F51D44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[118] = a4;
  v4[117] = a3;
  v4[116] = a2;
  v4[115] = a1;
  uint64_t v5 = type metadata accessor for UUID();
  v4[119] = v5;
  v4[120] = *(void *)(v5 - 8);
  v4[121] = swift_task_alloc();
  sub_10000588C(&qword_101643E68);
  v4[122] = swift_task_alloc();
  v4[123] = sub_10000588C(&qword_10163F7B0);
  v4[124] = swift_task_alloc();
  v4[125] = swift_task_alloc();
  v4[126] = swift_task_alloc();
  v4[127] = swift_task_alloc();
  sub_10000588C(&qword_10164E760);
  v4[128] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
  v4[129] = v6;
  v4[130] = *(void *)(v6 - 8);
  v4[131] = swift_task_alloc();
  v4[132] = swift_task_alloc();
  v4[133] = swift_task_alloc();
  v4[134] = swift_task_alloc();
  v4[135] = swift_task_alloc();
  v4[136] = swift_task_alloc();
  v4[137] = swift_task_alloc();
  sub_10000588C(&qword_10163EB60);
  v4[138] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for ObservedAdvertisement(0);
  v4[139] = v7;
  v4[140] = *(void *)(v7 - 8);
  v4[141] = swift_task_alloc();
  v4[142] = swift_task_alloc();
  v4[143] = swift_task_alloc();
  v4[144] = swift_task_alloc();
  v4[145] = swift_task_alloc();
  v4[146] = type metadata accessor for BeaconIdentifier();
  v4[147] = swift_task_alloc();
  v4[148] = swift_task_alloc();
  v4[149] = swift_task_alloc();
  v4[150] = swift_task_alloc();
  v4[151] = swift_task_alloc();
  v4[152] = swift_task_alloc();
  v4[153] = swift_task_alloc();
  v4[154] = swift_task_alloc();
  return _swift_task_switch(sub_100F520BC, 0, 0);
}

uint64_t sub_100F520BC()
{
  sub_100F6681C(*(void *)(v0 + 920), *(void *)(v0 + 1232), (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 480, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 504))
  {
    sub_10001CEB0((long long *)(v0 + 480), v0 + 400);
    sub_10001CD44((void *)(v0 + 400), *(void *)(v0 + 424));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_101639138 + dword_101639138);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 1240) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100F52218;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100F52218(uint64_t a1)
{
  *(void *)(*(void *)v1 + 1248) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100F52318, 0, 0);
}

uint64_t sub_100F52318()
{
  uint64_t v1 = *(void *)(v0 + 1248);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 400);
  if (v1)
  {
    uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 560, (uint64_t *)&unk_101638D30);
    if (*(void *)(v0 + 584))
    {
      sub_10001CEB0((long long *)(v0 + 560), v0 + 520);
      sub_10001CD44((void *)(v0 + 520), *(void *)(v0 + 544));
      uint64_t v10 = (uint64_t (*)(void))((char *)&dword_101639198 + dword_101639198);
      uint64_t v3 = (void *)swift_task_alloc();
      *(void *)(v0 + 1256) = v3;
      *uint64_t v3 = v0;
      v3[1] = sub_100F526EC;
      return v10();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    if (qword_101636F08 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_10170E858);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "No ObservationStoreService available!", v7, 2u);
      swift_slowDealloc();
    }

    sub_100F65D4C();
    swift_allocError();
    *long long v8 = 1;
    swift_willThrow();
    sub_100F66E2C(*(void *)(v0 + 1232), (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
    return v9();
  }
  return result;
}

uint64_t sub_100F526EC(uint64_t a1)
{
  *(void *)(*(void *)v1 + 1264) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100F527EC, 0, 0);
}

uint64_t sub_100F527EC()
{
  uint64_t v1 = v0[158];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 65));
  if (v1)
  {
    uint64_t v2 = v0[158];
    return _swift_task_switch(sub_100F52B44, v2, 0);
  }
  else
  {
    if (qword_101636F08 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_10170E858);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      os_log_type_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Missing BeaconKeyService!", v6, 2u);
      swift_slowDealloc();
    }

    sub_100F65D4C();
    swift_allocError();
    *uint64_t v7 = 1;
    swift_willThrow();
    swift_release();
    sub_100F66E2C(v0[154], (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    long long v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
}

uint64_t sub_100F52B44()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 1264) + 128);
  *(void *)(v0 + 1272) = v1;
  if (v1)
  {
    swift_retain();
    uint64_t v2 = sub_100F52BD0;
  }
  else
  {
    uint64_t v2 = sub_100F53248;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100F52BD0()
{
  uint64_t v35 = v0;
  uint64_t v1 = v0[115];
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(type metadata accessor for KeyGenerationBeaconInfo() + 24));
  uint64_t v3 = *v2;
  v0[160] = *v2;
  unint64_t v4 = v2[1];
  v0[161] = v4;
  uint64_t v5 = v2[2];
  v0[162] = v5;
  unint64_t v6 = v2[3];
  v0[163] = v6;
  uint64_t v7 = v2[4];
  v0[164] = v7;
  unint64_t v8 = v2[5];
  v0[165] = v8;
  if (v4 >> 60 == 15)
  {
    if (qword_101636F08 != -1) {
      swift_once();
    }
    uint64_t v9 = v0[154];
    uint64_t v10 = v0[153];
    uint64_t v11 = type metadata accessor for Logger();
    sub_100010324(v11, (uint64_t)qword_10170E858);
    sub_100F6681C(v9, v10, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    BOOL v14 = os_log_type_enabled(v12, v13);
    uint64_t v15 = v0[153];
    if (v14)
    {
      uint64_t v16 = swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 141558275;
      v0[89] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v16 + 12) = 2081;
      sub_100F66400((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v34 = v17;
      v18._countAndFlagsBits = 47;
      v18._object = (void *)0xE100000000000000;
      String.append(_:)(v18);
      v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
      v0[88] = sub_1008FA0F0(v33, v34, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100F66E2C(v15, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Missing keys from %{private,mask.hash}s", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100F66E2C(v0[153], (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    }

    sub_100F65D4C();
    swift_allocError();
    *uint64_t v26 = 2;
    swift_willThrow();
    swift_release();
    swift_release();
    swift_release();
    sub_100F66E2C(v0[154], (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v27 = (uint64_t (*)(void))v0[1];
    return v27();
  }
  else
  {
    sub_1000361E0(v3, v4);
    sub_1000361E0(v5, v6);
    sub_100037A38(v7, v8);
    uint64_t v20 = PrivateKey.publicKey.getter(v3, v4);
    v0[166] = v20;
    v0[167] = v21;
    v0[26] = v20;
    v0[27] = v21;
    v0[28] = v3;
    v0[29] = v4;
    v0[30] = v5;
    v0[31] = v6;
    if (v8 >> 60 == 15)
    {
      sub_1000361E0(v5, v6);
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      unint64_t v24 = 0;
      uint64_t v7 = 0;
      unint64_t v8 = 0;
      unint64_t v25 = 0xF000000000000000;
    }
    else
    {
      sub_1000361E0(v3, v4);
      sub_1000361E0(v5, v6);
      sub_100037A38(v7, v8);
      uint64_t v22 = PrivateKey.publicKey.getter(v3, v4);
      uint64_t v23 = v3;
      unint64_t v24 = v4;
    }
    v0[173] = v8;
    v0[172] = v7;
    v0[171] = v24;
    v0[170] = v23;
    v0[169] = v25;
    v0[168] = v22;
    v0[20] = v22;
    v0[21] = v25;
    v0[22] = v23;
    v0[23] = v24;
    v0[24] = v7;
    v0[25] = v8;
    sub_1000361E0(v3, v4);
    unint64_t v29 = (void *)swift_task_alloc();
    v0[174] = v29;
    *unint64_t v29 = v0;
    v29[1] = sub_100F53554;
    uint64_t v30 = v0[154];
    uint64_t v31 = v0[138];
    return sub_1011048AC(v31, v30);
  }
}

uint64_t sub_100F53248()
{
  if (qword_101636F08 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170E858);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    unint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Missing LTKGenerator!", v4, 2u);
    swift_slowDealloc();
  }

  sub_100F65D4C();
  swift_allocError();
  unsigned char *v5 = 1;
  swift_willThrow();
  swift_release();
  swift_release();
  sub_100F66E2C(*(void *)(v0 + 1232), (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_100F53554()
{
  *(void *)(*(void *)v1 + 1400) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100F54D60;
  }
  else {
    uint64_t v2 = sub_100F53668;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100F53668()
{
  uint64_t v152 = v0;
  uint64_t v1 = v0 + 160;
  uint64_t v2 = (long long *)(v0 + 208);
  uint64_t v3 = *(void *)(v0 + 1104);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)(v0 + 1120) + 48))(v3, 1, *(void *)(v0 + 1112)) == 1)
  {
    sub_10001DAB4(v3, &qword_10163EB60);
    if (qword_101636F08 != -1) {
      swift_once();
    }
    uint64_t v4 = *(void *)(v0 + 1232);
    uint64_t v5 = *(void *)(v0 + 1216);
    uint64_t v6 = type metadata accessor for Logger();
    sub_100010324(v6, (uint64_t)qword_10170E858);
    sub_100F6681C(v4, v5, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    BOOL v9 = os_log_type_enabled(v7, v8);
    uint64_t v10 = *(void *)(v0 + 1216);
    if (v9)
    {
      uint64_t v11 = swift_slowAlloc();
      uint64_t v149 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 141558275;
      *(void *)(v0 + 664) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v11 + 12) = 2081;
      sub_100F66400((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v150 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v151 = v12;
      v13._countAndFlagsBits = 47;
      v13._object = (void *)0xE100000000000000;
      String.append(_:)(v13);
      v14._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v14);
      uint64_t v1 = v0 + 160;
      uint64_t v2 = (long long *)(v0 + 208);
      swift_bridgeObjectRelease();
      *(void *)(v0 + 672) = sub_1008FA0F0(v150, v151, &v149);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100F66E2C(v10, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "No observed advertisement for beacon %{private,mask.hash}s.", (uint8_t *)v11, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100F66E2C(*(void *)(v0 + 1216), (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    }

    unint64_t v25 = (void *)swift_task_alloc();
    *(void *)(v0 + 1688) = v25;
    *unint64_t v25 = v0;
    v25[1] = sub_100F5B248;
    uint64_t v26 = *(void *)(v0 + 944);
    uint64_t v27 = *(void *)(v0 + 936);
    uint64_t v28 = *(void *)(v0 + 928);
    uint64_t v29 = *(void *)(v0 + 920);
    uint64_t v30 = v2;
    uint64_t v31 = v1;
    goto LABEL_50;
  }
  sub_100F66E8C(v3, *(void *)(v0 + 1160), type metadata accessor for ObservedAdvertisement);
  if (qword_101636F08 != -1) {
    swift_once();
  }
  uint64_t v15 = *(void *)(v0 + 1160);
  uint64_t v16 = *(void *)(v0 + 1152);
  uint64_t v17 = type metadata accessor for Logger();
  *(void *)(v0 + 1408) = sub_100010324(v17, (uint64_t)qword_10170E858);
  sub_100F6681C(v15, v16, type metadata accessor for ObservedAdvertisement);
  Swift::String v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  BOOL v20 = os_log_type_enabled(v18, v19);
  uint64_t v21 = *(void *)(v0 + 1152);
  if (v20)
  {
    uint64_t v22 = swift_slowAlloc();
    uint64_t v150 = swift_slowAlloc();
    *(_DWORD *)uint64_t v22 = 141558275;
    *(void *)(v0 + 904) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v22 + 12) = 2081;
    uint64_t v23 = sub_1002016B0();
    *(void *)(v0 + 912) = sub_1008FA0F0(v23, v24, &v150);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100F66E2C(v21, type metadata accessor for ObservedAdvertisement);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Found observed advertisement %{private,mask.hash}s.", (uint8_t *)v22, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100F66E2C(v21, type metadata accessor for ObservedAdvertisement);
  }

  uint64_t v32 = *(void *)(v0 + 1040);
  uint64_t v33 = *(void *)(v0 + 1032);
  uint64_t v34 = *(void *)(v0 + 1024);
  sub_10001D074(*(void *)(v0 + 1160) + *(int *)(*(void *)(v0 + 1112) + 52), v34, &qword_10164E760);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v34, 1, v33) == 1)
  {
    uint64_t v35 = *(void *)(v0 + 1232);
    uint64_t v36 = *(void *)(v0 + 1208);
    sub_10001DAB4(*(void *)(v0 + 1024), &qword_10164E760);
    sub_100F6681C(v35, v36, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.error.getter();
    BOOL v39 = os_log_type_enabled(v37, v38);
    uint64_t v40 = *(void *)(v0 + 1208);
    if (v39)
    {
      uint64_t v41 = swift_slowAlloc();
      uint64_t v149 = swift_slowAlloc();
      *(_DWORD *)uint64_t v41 = 141558275;
      *(void *)(v0 + 680) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v41 + 12) = 2081;
      sub_100F66400((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v150 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v151 = v42;
      v43._countAndFlagsBits = 47;
      v43._object = (void *)0xE100000000000000;
      String.append(_:)(v43);
      v44._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v44);
      swift_bridgeObjectRelease();
      *(void *)(v0 + 688) = sub_1008FA0F0(v150, v151, &v149);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100F66E2C(v40, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Missing beaconIndexInformation for %{private,mask.hash}s!", (uint8_t *)v41, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100F66E2C(*(void *)(v0 + 1208), (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    }

    uint64_t v62 = (void *)swift_task_alloc();
    *(void *)(v0 + 1664) = v62;
    *uint64_t v62 = v0;
    v62[1] = sub_100F5AAA4;
    uint64_t v26 = *(void *)(v0 + 944);
    uint64_t v27 = *(void *)(v0 + 936);
    uint64_t v28 = *(void *)(v0 + 928);
    uint64_t v29 = *(void *)(v0 + 920);
    uint64_t v30 = (long long *)(v0 + 208);
    uint64_t v31 = v0 + 160;
LABEL_50:
    return sub_100F60178(v29, v30, v31, v28, v27, v26);
  }
  uint64_t v45 = *(void *)(v0 + 1160);
  uint64_t v46 = *(void *)(v0 + 1144);
  uint64_t v47 = *(void *)(v0 + 1096);
  uint64_t v48 = *(void *)(v0 + 1088);
  uint64_t v49 = *(void *)(v0 + 1080);
  uint64_t v50 = *(void *)(v0 + 1072);
  sub_100F66E8C(*(void *)(v0 + 1024), v47, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  sub_100F6681C(v47, v48, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  sub_100F6681C(v47, v49, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  sub_100F6681C(v47, v50, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  sub_100F6681C(v45, v46, type metadata accessor for ObservedAdvertisement);
  uint64_t v51 = Logger.logObject.getter();
  os_log_type_t v52 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v51, v52))
  {
    os_log_type_t v143 = v52;
    log = v51;
    uint64_t v53 = *(void *)(v0 + 1088);
    uint64_t v54 = *(void *)(v0 + 1080);
    uint64_t v142 = *(void *)(v0 + 1072);
    uint64_t v55 = *(void *)(v0 + 1032);
    uint64_t v56 = swift_slowAlloc();
    uint64_t v150 = swift_slowAlloc();
    *(_DWORD *)uint64_t v56 = 141559299;
    *(void *)(v0 + 856) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v56 + 12) = 2081;
    sub_100F66400((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v57 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 864) = sub_1008FA0F0(v57, v58, &v150);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100F66E2C(v53, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    *(_WORD *)(v56 + 22) = 2048;
    uint64_t v59 = *(void *)(v54 + *(int *)(v55 + 24));
    sub_100F66E2C(v54, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    *(void *)(v0 + 872) = v59;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v56 + 32) = 2082;
    if (*(unsigned char *)(v142 + *(int *)(v55 + 20)))
    {
      if (*(unsigned char *)(v142 + *(int *)(v55 + 20)) == 1)
      {
        uint64_t v60 = 0x61646E6F6365732ELL;
        unint64_t v61 = 0xEA00000000007972;
      }
      else
      {
        unint64_t v61 = 0x80000001013F28C0;
        uint64_t v60 = 0xD000000000000010;
      }
    }
    else
    {
      uint64_t v60 = 0x7972616D6972702ELL;
      unint64_t v61 = 0xE800000000000000;
    }
    uint64_t v67 = *(void *)(v0 + 1144);
    uint64_t v68 = *(void *)(v0 + 1072);
    *(void *)(v0 + 880) = sub_1008FA0F0(v60, v61, &v150);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100F66E2C(v68, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    *(_WORD *)(v56 + 42) = 2160;
    *(void *)(v0 + 888) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v56 + 52) = 2081;
    uint64_t v69 = *(void *)(v67 + 16);
    uint64_t v70 = *(void *)(v67 + 24);
    sub_1001A1790(v69, v70);
    uint64_t v71 = sub_10026383C(v69, v70);
    unint64_t v73 = v72;
    sub_1001A1AD8(v69, v70);
    *(void *)(v0 + 896) = sub_1008FA0F0(v71, v73, &v150);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100F66E2C(v67, type metadata accessor for ObservedAdvertisement);
    _os_log_impl((void *)&_mh_execute_header, log, v143, "Last observed beacon: %{private,mask.hash}s, index: %llu, sequence: %{public}s, advertisement: %{private,mask.hash}s.", (uint8_t *)v56, 0x3Eu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    BOOL v66 = (long long *)(v0 + 208);
  }
  else
  {
    uint64_t v63 = *(void *)(v0 + 1144);
    uint64_t v64 = *(void *)(v0 + 1088);
    uint64_t v65 = *(void *)(v0 + 1072);
    sub_100F66E2C(*(void *)(v0 + 1080), type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    sub_100F66E2C(v64, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    sub_100F66E2C(v65, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    sub_100F66E2C(v63, type metadata accessor for ObservedAdvertisement);

    BOOL v66 = (long long *)(v0 + 208);
  }
  uint64_t v74 = *(void *)(v0 + 1096);
  uint64_t v75 = *(void *)(v0 + 1032);
  uint64_t v76 = *(int *)(v75 + 20);
  *(_DWORD *)(v0 + 1712) = v76;
  int v77 = *(unsigned __int8 *)(v74 + v76);
  if (*(unsigned char *)(v74 + v76) && v77 != 1)
  {
    sub_100F6681C(v74, *(void *)(v0 + 1064), type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    v92 = Logger.logObject.getter();
    os_log_type_t v93 = static os_log_type_t.error.getter();
    BOOL v94 = os_log_type_enabled(v92, v93);
    uint64_t v95 = *(void *)(v0 + 1064);
    if (v94)
    {
      v96 = (uint8_t *)swift_slowAlloc();
      uint64_t v150 = swift_slowAlloc();
      *(_DWORD *)v96 = 136446210;
      if (*(unsigned char *)(v95 + *(int *)(v75 + 20)))
      {
        if (*(unsigned char *)(v95 + *(int *)(v75 + 20)) == 1)
        {
          uint64_t v97 = 0x61646E6F6365732ELL;
          unint64_t v98 = 0xEA00000000007972;
        }
        else
        {
          unint64_t v98 = 0x80000001013F28C0;
          uint64_t v97 = 0xD000000000000010;
        }
      }
      else
      {
        uint64_t v97 = 0x7972616D6972702ELL;
        unint64_t v98 = 0xE800000000000000;
      }
      uint64_t v140 = *(void *)(v0 + 1064);
      *(void *)(v0 + 696) = sub_1008FA0F0(v97, v98, &v150);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100F66E2C(v140, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
      _os_log_impl((void *)&_mh_execute_header, v92, v93, "Invalid key sequence %{public}s", v96, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100F66E2C(*(void *)(v0 + 1064), type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    }

    v141 = (void *)swift_task_alloc();
    *(void *)(v0 + 1640) = v141;
    void *v141 = v0;
    v141[1] = sub_100F5A2C0;
    uint64_t v26 = *(void *)(v0 + 944);
    uint64_t v27 = *(void *)(v0 + 936);
    uint64_t v28 = *(void *)(v0 + 928);
    uint64_t v29 = *(void *)(v0 + 920);
    uint64_t v30 = v66;
    uint64_t v31 = v0 + 160;
    goto LABEL_50;
  }
  uint64_t v148 = v76;
  *(unsigned char *)(v0 + 1720) = v77;
  uint64_t v78 = *(void *)(v0 + 1160);
  uint64_t v79 = *(void *)(v0 + 1232);
  if (*(unsigned char *)(v78 + 35))
  {
    uint64_t v80 = *(void *)(v0 + 1192);
    uint64_t v147 = v74;
    sub_100F6681C(v74, *(void *)(v0 + 1056), type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    sub_100F6681C(v79, v80, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    v81 = Logger.logObject.getter();
    os_log_type_t v82 = static os_log_type_t.info.getter();
    BOOL v83 = os_log_type_enabled(v81, v82);
    uint64_t v84 = *(void *)(v0 + 1192);
    if (v83)
    {
      uint64_t v85 = *(void *)(v0 + 1056);
      uint64_t v86 = *(void *)(v0 + 1032);
      uint64_t v87 = swift_slowAlloc();
      uint64_t v149 = swift_slowAlloc();
      *(_DWORD *)uint64_t v87 = 134218499;
      uint64_t v88 = *(void *)(v85 + *(int *)(v86 + 24));
      sub_100F66E2C(v85, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
      *(void *)(v0 + 808) = v88;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v87 + 12) = 2160;
      *(void *)(v0 + 816) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v87 + 22) = 2081;
      sub_100F66400((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v150 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v151 = v89;
      v90._countAndFlagsBits = 47;
      v90._object = (void *)0xE100000000000000;
      String.append(_:)(v90);
      v91._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v91);
      swift_bridgeObjectRelease();
      *(void *)(v0 + 824) = sub_1008FA0F0(v150, v151, &v149);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100F66E2C(v84, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      _os_log_impl((void *)&_mh_execute_header, v81, v82, "Using last observed index %llu for beacon %{private,mask.hash}s", (uint8_t *)v87, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100F66E2C(*(void *)(v0 + 1056), type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
      sub_100F66E2C(v84, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    }

    unint64_t v113 = *(void *)(v0 + 1336);
    uint64_t v114 = *(void *)(v0 + 1328);
    unint64_t v115 = *(void *)(v0 + 1304);
    uint64_t v116 = *(void *)(v0 + 1296);
    unint64_t v117 = *(void *)(v0 + 1288);
    uint64_t v118 = *(void *)(v0 + 1280);
    uint64_t v145 = *(void *)(v0 + 1272);
    uint64_t v119 = *(void *)(v0 + 1096);
    uint64_t v120 = *(void *)(v0 + 1032);
    sub_10000588C((uint64_t *)&unk_1016576A0);
    uint64_t v121 = swift_allocObject();
    *(void *)(v0 + 1592) = v121;
    *(_OWORD *)(v121 + 16) = xmmword_101342130;
    *(void *)(v0 + 16) = v114;
    *(void *)(v0 + 24) = v113;
    *(void *)(v0 + 32) = v118;
    *(void *)(v0 + 40) = v117;
    *(void *)(v0 + 48) = v116;
    *(void *)(v0 + 56) = v115;
    uint64_t v122 = *(void *)(v119 + *(int *)(v120 + 24));
    char v123 = *(unsigned char *)(v147 + v148);
    sub_1000361E0(v114, v113);
    sub_1000361E0(v118, v117);
    sub_1000361E0(v116, v115);
    v124 = (void *)swift_task_alloc();
    *(void *)(v0 + 1600) = v124;
    void *v124 = v0;
    v124[1] = sub_100F58DB0;
    uint64_t v125 = *(void *)(v0 + 1232);
    return sub_1003D8A80(v0 + 256, v125, v0 + 16, v0 + 160, v123, v122, v145, 4000);
  }
  else
  {
    char v99 = *(unsigned char *)(v78 + 34);
    uint64_t v100 = *(void *)(v0 + 1200);
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v101 = swift_allocObject();
    *(_OWORD *)(v101 + 16) = xmmword_101342130;
    *(void *)(v101 + 56) = &type metadata for UInt8;
    *(void *)(v101 + 64) = &protocol witness table for UInt8;
    char v146 = v99;
    *(unsigned char *)(v101 + 32) = v99;
    uint64_t v102 = String.init(format:_:)();
    unint64_t v104 = v103;
    sub_100F6681C(v79, v100, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    swift_bridgeObjectRetain();
    v105 = Logger.logObject.getter();
    os_log_type_t v106 = static os_log_type_t.info.getter();
    BOOL v107 = os_log_type_enabled(v105, v106);
    uint64_t v108 = *(void *)(v0 + 1200);
    if (v107)
    {
      uint64_t v109 = swift_slowAlloc();
      uint64_t v149 = swift_slowAlloc();
      *(_DWORD *)uint64_t v109 = 136446723;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 832) = sub_1008FA0F0(v102, v104, &v149);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v109 + 12) = 2160;
      *(void *)(v0 + 840) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v109 + 22) = 2081;
      sub_100F66400((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v150 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v151 = v110;
      v111._countAndFlagsBits = 47;
      v111._object = (void *)0xE100000000000000;
      String.append(_:)(v111);
      v112._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v112);
      swift_bridgeObjectRelease();
      *(void *)(v0 + 848) = sub_1008FA0F0(v150, v151, &v149);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100F66E2C(v108, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      _os_log_impl((void *)&_mh_execute_header, v105, v106, "Hint %{public}s is available for %{private,mask.hash}s", (uint8_t *)v109, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      sub_100F66E2C(v108, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    }

    unint64_t v127 = *(void *)(v0 + 1336);
    uint64_t v128 = *(void *)(v0 + 1328);
    unint64_t v129 = *(void *)(v0 + 1304);
    uint64_t v130 = *(void *)(v0 + 1296);
    unint64_t v131 = *(void *)(v0 + 1288);
    uint64_t v132 = *(void *)(v0 + 1280);
    uint64_t v133 = *(void *)(v0 + 1272);
    uint64_t v134 = *(void *)(v0 + 1096);
    uint64_t v135 = *(void *)(v0 + 1032);
    *(void *)(v0 + 64) = v128;
    *(void *)(v0 + 72) = v127;
    *(void *)(v0 + 80) = v132;
    *(void *)(v0 + 88) = v131;
    *(void *)(v0 + 96) = v130;
    *(void *)(v0 + 104) = v129;
    uint64_t v136 = *(void *)(v134 + *(int *)(v135 + 24));
    char v137 = *(unsigned char *)(v74 + v148);
    sub_1000361E0(v128, v127);
    sub_1000361E0(v132, v131);
    sub_1000361E0(v130, v129);
    v138 = (void *)swift_task_alloc();
    *(void *)(v0 + 1416) = v138;
    void *v138 = v0;
    v138[1] = sub_100F55064;
    uint64_t v139 = *(void *)(v0 + 1232);
    return sub_1003DA28C(v139, v0 + 64, v137, v136, v146, v133, 4000);
  }
}

uint64_t sub_100F54D60()
{
  unint64_t v1 = v0[167];
  uint64_t v2 = v0[166];
  uint64_t v9 = v0[164];
  unint64_t v3 = v0[163];
  uint64_t v4 = v0[162];
  unint64_t v5 = v0[161];
  uint64_t v6 = v0[160];
  uint64_t v10 = v0[165];
  sub_100F65DA0(v0[168], v0[169], v0[170], v0[171], v0[172], v0[173], (void (*)(void))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
  sub_10001CFB8(v2, v1);
  sub_10001CFB8(v6, v5);
  sub_10001CFB8(v4, v3);
  swift_release();
  swift_release();
  sub_100F65DA0(v6, v5, v4, v3, v9, v10, (void (*)(void))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_10015AF5C);
  swift_release();
  sub_100F66E2C(v0[154], (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100F55064(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  v4[178] = v1;
  swift_task_dealloc();
  unint64_t v5 = v4[167];
  uint64_t v6 = v4[166];
  unint64_t v7 = v4[163];
  uint64_t v8 = v4[162];
  unint64_t v9 = v4[161];
  uint64_t v10 = v4[160];
  if (v1)
  {
    sub_10001CFB8(v6, v5);
    sub_10001CFB8(v10, v9);
    sub_10001CFB8(v8, v7);
    uint64_t v11 = sub_100F55398;
  }
  else
  {
    v4[179] = a1;
    sub_10001CFB8(v6, v5);
    sub_10001CFB8(v10, v9);
    sub_10001CFB8(v8, v7);
    uint64_t v11 = sub_100F55248;
  }
  return _swift_task_switch(v11, 0, 0);
}

uint64_t sub_100F55248()
{
  *(void *)(v0 + 1440) = *(void *)(v0 + 1432);
  uint64_t v1 = *(int *)(v0 + 1712);
  unint64_t v2 = *(void *)(v0 + 1336);
  uint64_t v3 = *(void *)(v0 + 1328);
  unint64_t v4 = *(void *)(v0 + 1304);
  uint64_t v5 = *(void *)(v0 + 1296);
  unint64_t v6 = *(void *)(v0 + 1288);
  uint64_t v7 = *(void *)(v0 + 1280);
  uint64_t v8 = *(void *)(v0 + 1272);
  uint64_t v9 = *(void *)(v0 + 1096);
  *(void *)(v0 + 112) = v3;
  uint64_t v10 = *(void *)(v0 + 1032);
  *(void *)(v0 + 120) = v2;
  *(void *)(v0 + 128) = v7;
  *(void *)(v0 + 136) = v6;
  *(void *)(v0 + 144) = v5;
  *(void *)(v0 + 152) = v4;
  uint64_t v11 = *(int *)(v10 + 24);
  char v12 = *(unsigned char *)(v9 + v1);
  *(_DWORD *)(v0 + 1716) = v11;
  uint64_t v13 = *(void *)(v9 + v11);
  sub_1000361E0(v3, v2);
  sub_1000361E0(v7, v6);
  sub_1000361E0(v5, v4);
  Swift::String v14 = (void *)swift_task_alloc();
  *(void *)(v0 + 1448) = v14;
  *Swift::String v14 = v0;
  v14[1] = sub_100F556F4;
  uint64_t v15 = *(void *)(v0 + 1232);
  return sub_1003D8A80(v0 + 352, v15, v0 + 112, v0 + 160, v12, v13, v8, 4000);
}

uint64_t sub_100F55398()
{
  uint64_t v17 = v0[172];
  uint64_t v18 = v0[173];
  uint64_t v14 = v0[170];
  uint64_t v15 = v0[171];
  uint64_t v12 = v0[168];
  unint64_t v13 = v0[169];
  unint64_t v10 = v0[167];
  uint64_t v1 = v0[166];
  uint64_t v2 = v0[165];
  uint64_t v3 = v0[164];
  unint64_t v4 = v0[163];
  uint64_t v5 = v0[162];
  unint64_t v6 = v0[161];
  uint64_t v7 = v0[160];
  uint64_t v16 = v0[145];
  uint64_t v11 = v0[137];
  swift_release();
  swift_release();
  swift_release();
  sub_100F65DA0(v7, v6, v5, v4, v3, v2, (void (*)(void))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_10015AF5C);
  sub_10001CFB8(v1, v10);
  sub_10001CFB8(v7, v6);
  sub_10001CFB8(v5, v4);
  sub_100F65DA0(v12, v13, v14, v15, v17, v18, (void (*)(void))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
  sub_100F66E2C(v11, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  sub_100F66E2C(v16, type metadata accessor for ObservedAdvertisement);
  sub_100F66E2C(v0[154], (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_100F556F4()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 1456) = v0;
  swift_task_dealloc();
  if (v0)
  {
    unint64_t v3 = v2[167];
    uint64_t v4 = v2[166];
    unint64_t v5 = v2[163];
    uint64_t v6 = v2[162];
    unint64_t v7 = v2[161];
    uint64_t v8 = v2[160];
    swift_bridgeObjectRelease();
    sub_10001CFB8(v4, v3);
    sub_10001CFB8(v8, v7);
    sub_10001CFB8(v6, v5);
    uint64_t v9 = sub_100F55AC8;
  }
  else
  {
    unint64_t v10 = v2[167];
    uint64_t v11 = v2[166];
    unint64_t v12 = v2[163];
    uint64_t v13 = v2[162];
    unint64_t v14 = v2[161];
    uint64_t v15 = v2[160];
    sub_10001CFB8(v11, v10);
    sub_10001CFB8(v15, v14);
    sub_10001CFB8(v13, v12);
    uint64_t v9 = sub_100F55890;
  }
  return _swift_task_switch(v9, 0, 0);
}

uint64_t sub_100F55890()
{
  uint64_t v1 = v0[180];
  uint64_t v2 = v0[154];
  uint64_t v3 = swift_task_alloc();
  *(void *)(v3 + 16) = v2;
  *(void *)(v3 + 24) = v0 + 44;
  swift_bridgeObjectRetain();
  v0[183] = sub_100F49804((void (*)(uint64_t *__return_ptr, unsigned char *))sub_100F65FC8, v3, v1);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[184] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100F559A0;
  uint64_t v5 = v0[127];
  uint64_t v6 = v0[115];
  return sub_100F62838(v5, v6);
}

uint64_t sub_100F559A0()
{
  *(void *)(*(void *)v1 + 1480) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_100F56BDC;
  }
  else
  {
    uint64_t v2 = sub_100F55E24;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100F55AC8()
{
  uint64_t v17 = v0[172];
  uint64_t v18 = v0[173];
  uint64_t v14 = v0[170];
  uint64_t v15 = v0[171];
  uint64_t v12 = v0[168];
  unint64_t v13 = v0[169];
  unint64_t v10 = v0[167];
  uint64_t v1 = v0[166];
  uint64_t v2 = v0[165];
  uint64_t v3 = v0[164];
  unint64_t v4 = v0[163];
  uint64_t v5 = v0[162];
  unint64_t v6 = v0[161];
  uint64_t v7 = v0[160];
  uint64_t v16 = v0[145];
  uint64_t v11 = v0[137];
  swift_release();
  swift_release();
  swift_release();
  sub_100F65DA0(v7, v6, v5, v4, v3, v2, (void (*)(void))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_10015AF5C);
  sub_10001CFB8(v1, v10);
  sub_10001CFB8(v7, v6);
  sub_10001CFB8(v5, v4);
  sub_100F65DA0(v12, v13, v14, v15, v17, v18, (void (*)(void))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
  sub_100F66E2C(v11, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  sub_100F66E2C(v16, type metadata accessor for ObservedAdvertisement);
  sub_100F66E2C(v0[154], (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_100F55E24()
{
  uint64_t v98 = v0;
  uint64_t v1 = *(void *)(v0 + 1440);
  if (!*(void *)(v1 + 16))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "LTK keys should never be empty!", v17, 2u);
      swift_slowDealloc();
    }

    uint64_t v18 = (void *)swift_task_alloc();
    *(void *)(v0 + 1528) = v18;
    *uint64_t v18 = v0;
    v18[1] = sub_100F56F54;
    uint64_t v19 = *(void *)(v0 + 944);
    uint64_t v20 = *(void *)(v0 + 936);
    uint64_t v21 = *(void *)(v0 + 928);
    uint64_t v22 = *(void *)(v0 + 920);
    uint64_t v23 = (long long *)(v0 + 208);
    uint64_t v24 = v0 + 160;
    goto LABEL_13;
  }
  char v2 = *(unsigned char *)(v0 + 1720);
  char v94 = *(unsigned char *)(v1 + 32);
  uint64_t v3 = *(void *)(v1 + 40);
  *(void *)(v0 + 1488) = v3;
  uint64_t v4 = *(void *)(v1 + 48);
  *(void *)(v0 + 1496) = v4;
  unint64_t v5 = *(void *)(v1 + 56);
  *(void *)(v0 + 1504) = v5;
  uint64_t v6 = *(void *)(v1 + 64);
  *(void *)(v0 + 1512) = v6;
  unint64_t v7 = *(void *)(v1 + 72);
  *(void *)(v0 + 1520) = v7;
  sub_1000361E0(v4, v5);
  sub_1000361E0(v6, v7);
  swift_bridgeObjectRelease();
  if (v2)
  {
    sub_1000361E0(v4, v5);
    sub_1000361E0(v6, v7);
    sub_1000361E0(v4, v5);
    sub_1000361E0(v6, v7);
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *(void **)(v0 + 1464);
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      uint64_t v9 = sub_100A70338(0, v9[2] + 1, 1, v9);
    }
    unint64_t v11 = v9[2];
    unint64_t v10 = v9[3];
    if (v11 >= v10 >> 1) {
      uint64_t v9 = sub_100A70338((void *)(v10 > 1), v11 + 1, 1, v9);
    }
    os_log_type_t v93 = v9;
    uint64_t v90 = *(void *)(v0 + 1376);
    uint64_t v91 = *(void *)(v0 + 1384);
    uint64_t v89 = *(void *)(v0 + 1368);
    unint64_t v86 = *(void *)(v0 + 1352);
    uint64_t v87 = *(void *)(v0 + 1360);
    uint64_t v85 = *(void *)(v0 + 1344);
    uint64_t v80 = *(void *)(v0 + 1328);
    unint64_t v81 = *(void *)(v0 + 1336);
    uint64_t v78 = *(void *)(v0 + 1312);
    uint64_t v79 = *(void *)(v0 + 1320);
    uint64_t v76 = *(void *)(v0 + 1296);
    unint64_t v77 = *(void *)(v0 + 1304);
    uint64_t v74 = *(void *)(v0 + 1280);
    unint64_t v75 = *(void *)(v0 + 1288);
    uint64_t v92 = *(void *)(v0 + 1160);
    uint64_t v88 = *(void *)(v0 + 1096);
    uint64_t v83 = *(void *)(v0 + 1016);
    v9[2] = v11 + 1;
    uint64_t v12 = &v9[6 * v11];
    *((unsigned char *)v12 + 32) = v94;
    v12[5] = v3;
    v12[6] = v4;
    v12[7] = v5;
    v12[8] = v6;
    v12[9] = v7;
    swift_release();
    swift_release();
    swift_release();
    sub_100F65FE4((void *)(v0 + 352), (void (*)(uint64_t, uint64_t))sub_10001CFB8);
    swift_bridgeObjectRelease();
    sub_10001CFB8(v4, v5);
    sub_10001CFB8(v6, v7);
    sub_100F65DA0(v74, v75, v76, v77, v78, v79, (void (*)(void))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_10015AF5C);
    sub_10001CFB8(v4, v5);
    sub_10001CFB8(v6, v7);
    sub_10001CFB8(v80, v81);
    sub_10001CFB8(v74, v75);
    sub_10001CFB8(v76, v77);
    sub_100F65DA0(v85, v86, v87, v89, v90, v91, (void (*)(void))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
    sub_10001DAB4(v83, &qword_10163F7B0);
    sub_100F66E2C(v88, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    sub_100F66E2C(v92, type metadata accessor for ObservedAdvertisement);
    sub_100F66E2C(*(void *)(v0 + 1232), (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v13 = *(uint64_t (**)(void *))(v0 + 8);
    return v13(v93);
  }
  unint64_t v25 = *(unint64_t **)(v0 + 1016);
  uint64_t v26 = *(void *)(v0 + 1008);
  unint64_t v27 = *(void *)(*(void *)(v0 + 1096) + *(int *)(v0 + 1716));
  unint64_t v28 = *v25;
  sub_100F6681C(*(void *)(v0 + 1160), *(void *)(v0 + 1136), type metadata accessor for ObservedAdvertisement);
  sub_10001D074((uint64_t)v25, v26, &qword_10163F7B0);
  uint64_t v29 = *(void *)(v0 + 1136);
  if (v27 >= v28)
  {
    sub_10001DAB4(*(void *)(v0 + 1008), &qword_10163F7B0);
    sub_100F66E2C(v29, type metadata accessor for ObservedAdvertisement);
  }
  else
  {
    uint64_t v30 = *(void *)(v0 + 1008);
    char v31 = static Date.> infix(_:_:)();
    sub_10001DAB4(v30, &qword_10163F7B0);
    sub_100F66E2C(v29, type metadata accessor for ObservedAdvertisement);
    if ((v31 & 1) == 0)
    {
      uint64_t v32 = *(void *)(v0 + 1232);
      uint64_t v33 = *(void *)(v0 + 1184);
      uint64_t v34 = *(void *)(v0 + 1160);
      uint64_t v35 = *(void *)(v0 + 1128);
      uint64_t v36 = *(void *)(v0 + 1096);
      uint64_t v37 = *(void *)(v0 + 1048);
      uint64_t v38 = *(void *)(v0 + 1016);
      uint64_t v39 = *(void *)(v0 + 1000);
      uint64_t v40 = *(void *)(v0 + 992);
      swift_bridgeObjectRelease();
      sub_100F6681C(v36, v37, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
      sub_10001D074(v38, v39, &qword_10163F7B0);
      sub_100F6681C(v34, v35, type metadata accessor for ObservedAdvertisement);
      sub_10001D074(v38, v40, &qword_10163F7B0);
      sub_100F6681C(v32, v33, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      uint64_t v41 = Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.default.getter();
      BOOL v43 = os_log_type_enabled(v41, v42);
      uint64_t v44 = *(void *)(v0 + 1184);
      if (v43)
      {
        uint64_t v82 = *(void *)(v0 + 1184);
        uint64_t v45 = *(void *)(v0 + 1128);
        uint64_t v46 = *(void *)(v0 + 1048);
        uint64_t v47 = *(void *)(v0 + 1032);
        uint64_t v48 = *(uint64_t **)(v0 + 1000);
        uint64_t v84 = *(void *)(v0 + 992);
        uint64_t v49 = swift_slowAlloc();
        uint64_t v95 = swift_slowAlloc();
        *(_DWORD *)uint64_t v49 = 134219267;
        uint64_t v50 = *(void *)(v46 + *(int *)(v47 + 24));
        sub_100F66E2C(v46, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
        *(void *)(v0 + 736) = v50;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v49 + 12) = 2080;
        uint64_t v51 = *v48;
        uint64_t v96 = 0x7972616D6972702ELL;
        unint64_t v97 = 0xEA0000000000282FLL;
        *(void *)(v0 + 744) = v51;
        v52._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v52);
        swift_bridgeObjectRelease();
        v53._countAndFlagsBits = 41;
        v53._object = (void *)0xE100000000000000;
        String.append(_:)(v53);
        *(void *)(v0 + 752) = sub_1008FA0F0(v96, v97, &v95);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10001DAB4((uint64_t)v48, &qword_10163F7B0);
        *(_WORD *)(v49 + 22) = 2082;
        type metadata accessor for Date();
        sub_100F66400((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
        uint64_t v54 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v0 + 760) = sub_1008FA0F0(v54, v55, &v95);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100F66E2C(v45, type metadata accessor for ObservedAdvertisement);
        *(_WORD *)(v49 + 32) = 2082;
        uint64_t v56 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v0 + 768) = sub_1008FA0F0(v56, v57, &v95);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10001DAB4(v84, &qword_10163F7B0);
        *(_WORD *)(v49 + 42) = 2160;
        *(void *)(v0 + 776) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v49 + 52) = 2081;
        sub_100F66400((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v96 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v97 = v58;
        v59._countAndFlagsBits = 47;
        v59._object = (void *)0xE100000000000000;
        String.append(_:)(v59);
        v60._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v60);
        swift_bridgeObjectRelease();
        *(void *)(v0 + 784) = sub_1008FA0F0(v96, v97, &v95);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100F66E2C(v82, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
        _os_log_impl((void *)&_mh_execute_header, v41, v42, "Ignoring matched index %llu < lastObservedIndex %s, scanDate: %{public}s, lastObservedDate: %{public}s, for beacon %{private,mask.hash}s.", (uint8_t *)v49, 0x3Eu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        uint64_t v70 = *(void *)(v0 + 1128);
        uint64_t v71 = *(void *)(v0 + 1000);
        uint64_t v72 = *(void *)(v0 + 992);
        sub_100F66E2C(*(void *)(v0 + 1048), type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
        sub_10001DAB4(v71, &qword_10163F7B0);
        sub_100F66E2C(v70, type metadata accessor for ObservedAdvertisement);
        sub_10001DAB4(v72, &qword_10163F7B0);
        sub_100F66E2C(v44, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      }

      unint64_t v73 = (void *)swift_task_alloc();
      *(void *)(v0 + 1568) = v73;
      *unint64_t v73 = v0;
      v73[1] = sub_100F584E4;
      uint64_t v19 = *(void *)(v0 + 944);
      uint64_t v20 = *(void *)(v0 + 936);
      uint64_t v21 = *(void *)(v0 + 928);
      uint64_t v22 = *(void *)(v0 + 920);
      uint64_t v23 = (long long *)(v0 + 208);
      uint64_t v24 = v0 + 160;
LABEL_13:
      return sub_100F60178(v22, v23, v24, v21, v20, v19);
    }
  }
  unint64_t v61 = *(void *)(*(void *)(v0 + 1096) + *(int *)(v0 + 1716));
  if (v61) {
    uint64_t v62 = v61 / 0x60 + 1;
  }
  else {
    uint64_t v62 = 0;
  }
  unint64_t v63 = *(void *)(v0 + 1304);
  uint64_t v64 = *(void *)(v0 + 1296);
  unint64_t v65 = *(void *)(v0 + 1288);
  uint64_t v66 = *(void *)(v0 + 1280);
  uint64_t v67 = *(void *)(v0 + 1272);
  sub_1000361E0(*(void *)(v0 + 1328), *(void *)(v0 + 1336));
  sub_1000361E0(v66, v65);
  sub_1000361E0(v64, v63);
  uint64_t v68 = (void *)swift_task_alloc();
  *(void *)(v0 + 1552) = v68;
  *uint64_t v68 = v0;
  v68[1] = sub_100F577B0;
  uint64_t v69 = *(void *)(v0 + 1232);
  return sub_1003D8A80(v0 + 304, v69, v0 + 112, v0 + 160, 1, v62, v67, 4000);
}

uint64_t sub_100F56BDC()
{
  uint64_t v17 = v0[172];
  uint64_t v18 = v0[173];
  uint64_t v14 = v0[170];
  uint64_t v15 = v0[171];
  uint64_t v12 = v0[168];
  unint64_t v13 = v0[169];
  uint64_t v9 = v0[166];
  unint64_t v10 = v0[167];
  uint64_t v1 = v0[165];
  uint64_t v2 = v0[164];
  unint64_t v3 = v0[163];
  uint64_t v4 = v0[162];
  unint64_t v5 = v0[161];
  uint64_t v6 = v0[160];
  uint64_t v16 = v0[145];
  uint64_t v11 = v0[137];
  swift_release();
  swift_release();
  swift_release();
  sub_100F65FE4(v0 + 44, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
  sub_100F65DA0(v6, v5, v4, v3, v2, v1, (void (*)(void))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_10015AF5C);
  sub_10001CFB8(v9, v10);
  sub_10001CFB8(v6, v5);
  sub_10001CFB8(v4, v3);
  sub_100F65DA0(v12, v13, v14, v15, v17, v18, (void (*)(void))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
  sub_100F66E2C(v11, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  sub_100F66E2C(v16, type metadata accessor for ObservedAdvertisement);
  sub_100F66E2C(v0[154], (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100F56F54(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 1536) = v1;
  swift_task_dealloc();
  if (v1)
  {
    unint64_t v5 = sub_100F57418;
  }
  else
  {
    *(void *)(v4 + 1544) = a1;
    unint64_t v5 = sub_100F5707C;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100F5707C()
{
  uint64_t v17 = v0[172];
  uint64_t v18 = v0[173];
  uint64_t v16 = v0[171];
  unint64_t v13 = v0[169];
  uint64_t v14 = v0[170];
  uint64_t v12 = v0[168];
  uint64_t v9 = v0[166];
  unint64_t v10 = v0[167];
  uint64_t v1 = v0[165];
  uint64_t v2 = v0[164];
  unint64_t v3 = v0[163];
  uint64_t v4 = v0[162];
  unint64_t v5 = v0[161];
  uint64_t v6 = v0[160];
  uint64_t v19 = v0[145];
  uint64_t v15 = v0[137];
  uint64_t v11 = v0[127];
  swift_release();
  swift_release();
  swift_release();
  sub_100F65FE4(v0 + 44, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
  sub_100F65DA0(v6, v5, v4, v3, v2, v1, (void (*)(void))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_10015AF5C);
  sub_10001CFB8(v9, v10);
  sub_10001CFB8(v6, v5);
  sub_10001CFB8(v4, v3);
  sub_100F65DA0(v12, v13, v14, v16, v17, v18, (void (*)(void))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
  sub_10001DAB4(v11, &qword_10163F7B0);
  sub_100F66E2C(v15, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  sub_100F66E2C(v19, type metadata accessor for ObservedAdvertisement);
  uint64_t v20 = v0[193];
  sub_100F66E2C(v0[154], (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(uint64_t))v0[1];
  return v7(v20);
}

uint64_t sub_100F57418()
{
  uint64_t v17 = v0[172];
  uint64_t v18 = v0[173];
  uint64_t v16 = v0[171];
  unint64_t v13 = v0[169];
  uint64_t v14 = v0[170];
  uint64_t v12 = v0[168];
  uint64_t v9 = v0[166];
  unint64_t v10 = v0[167];
  uint64_t v1 = v0[165];
  uint64_t v2 = v0[164];
  unint64_t v3 = v0[163];
  uint64_t v4 = v0[162];
  unint64_t v5 = v0[161];
  uint64_t v6 = v0[160];
  uint64_t v19 = v0[145];
  uint64_t v15 = v0[137];
  uint64_t v11 = v0[127];
  swift_release();
  swift_release();
  swift_release();
  sub_100F65FE4(v0 + 44, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
  sub_100F65DA0(v6, v5, v4, v3, v2, v1, (void (*)(void))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_10015AF5C);
  sub_10001CFB8(v9, v10);
  sub_10001CFB8(v6, v5);
  sub_10001CFB8(v4, v3);
  sub_100F65DA0(v12, v13, v14, v16, v17, v18, (void (*)(void))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
  sub_10001DAB4(v11, &qword_10163F7B0);
  sub_100F66E2C(v15, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  sub_100F66E2C(v19, type metadata accessor for ObservedAdvertisement);
  sub_100F66E2C(v0[154], (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100F577B0()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 1560) = v0;
  swift_task_dealloc();
  unint64_t v3 = v2[163];
  uint64_t v4 = v2[162];
  unint64_t v5 = v2[161];
  uint64_t v6 = v2[160];
  sub_10001CFB8(v2[166], v2[167]);
  sub_10001CFB8(v6, v5);
  sub_10001CFB8(v4, v3);
  if (v0) {
    uint64_t v7 = sub_100F57E44;
  }
  else {
    uint64_t v7 = sub_100F57968;
  }
  return _swift_task_switch(v7, 0, 0);
}

uint64_t sub_100F57968()
{
  unint64_t v1 = v0[190];
  uint64_t v2 = v0[189];
  uint64_t v3 = v0[40];
  unint64_t v4 = v0[41];
  swift_bridgeObjectRetain();
  sub_1000361E0(v3, v4);
  sub_1000361E0(v2, v1);
  sub_1000361E0(v3, v4);
  sub_1000361E0(v2, v1);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v6 = (void *)v0[183];
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    uint64_t v6 = sub_100A70338(0, v6[2] + 1, 1, v6);
  }
  unint64_t v8 = v6[2];
  unint64_t v7 = v6[3];
  if (v8 >= v7 >> 1) {
    uint64_t v6 = sub_100A70338((void *)(v7 > 1), v8 + 1, 1, v6);
  }
  uint64_t v34 = v6;
  unint64_t v9 = v0[190];
  uint64_t v10 = v0[189];
  unint64_t v24 = v0[188];
  uint64_t v22 = v0[187];
  uint64_t v11 = v0[186];
  uint64_t v31 = v0[172];
  uint64_t v32 = v0[173];
  uint64_t v30 = v0[171];
  unint64_t v27 = v0[169];
  uint64_t v28 = v0[170];
  uint64_t v26 = v0[168];
  unint64_t v23 = v0[167];
  uint64_t v20 = v0[165];
  uint64_t v21 = v0[166];
  unint64_t v18 = v0[163];
  uint64_t v19 = v0[164];
  unint64_t v16 = v0[161];
  uint64_t v17 = v0[162];
  uint64_t v12 = v0[160];
  uint64_t v33 = v0[145];
  uint64_t v29 = v0[137];
  uint64_t v25 = v0[127];
  v6[2] = v8 + 1;
  unint64_t v13 = &v6[6 * v8];
  *((unsigned char *)v13 + 32) = 1;
  v13[5] = v11;
  v13[6] = v3;
  v13[7] = v4;
  v13[8] = v10;
  v13[9] = v9;
  swift_release();
  swift_release();
  swift_release();
  sub_100F65FE4(v0 + 44, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
  sub_10001CFB8(v3, v4);
  sub_10001CFB8(v10, v9);
  swift_bridgeObjectRelease();
  sub_100F65FE4(v0 + 38, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
  sub_100F65DA0(v12, v16, v17, v18, v19, v20, (void (*)(void))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_10015AF5C);
  sub_10001CFB8(v22, v24);
  sub_10001CFB8(v10, v9);
  sub_10001CFB8(v21, v23);
  sub_10001CFB8(v12, v16);
  sub_10001CFB8(v17, v18);
  sub_100F65DA0(v26, v27, v28, v30, v31, v32, (void (*)(void))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
  sub_10001DAB4(v25, &qword_10163F7B0);
  sub_100F66E2C(v29, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  sub_100F66E2C(v33, type metadata accessor for ObservedAdvertisement);
  sub_100F66E2C(v0[154], (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = (uint64_t (*)(void *))v0[1];
  return v14(v34);
}

uint64_t sub_100F57E44()
{
  uint64_t v47 = v0;
  uint64_t v44 = v0 + 44;
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = v0[195];
    uint64_t v31 = v0[189];
    unint64_t v33 = v0[190];
    unint64_t v27 = v0[188];
    uint64_t v23 = v0[187];
    uint64_t v41 = v0[172];
    uint64_t v42 = v0[173];
    uint64_t v40 = v0[171];
    unint64_t v37 = v0[169];
    uint64_t v38 = v0[170];
    uint64_t v36 = v0[168];
    unint64_t v29 = v0[167];
    uint64_t v25 = v0[166];
    uint64_t v20 = v0[164];
    uint64_t v21 = v0[165];
    uint64_t v18 = v0[162];
    uint64_t v19 = v0[163];
    uint64_t v16 = v0[160];
    unint64_t v17 = v0[161];
    uint64_t v43 = v0[145];
    uint64_t v39 = v0[137];
    uint64_t v35 = v0[127];
    unint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v46 = swift_slowAlloc();
    *(_DWORD *)unint64_t v4 = 136446210;
    v0[90] = v3;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v5 = String.init<A>(describing:)();
    v0[91] = sub_1008FA0F0(v5, v6, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to generate secondary keys due to: %{public}s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();
    swift_release();
    swift_release();
    sub_100F65FE4(v44, (void (*)(uint64_t, uint64_t))sub_10001CFB8);

    sub_100F65DA0(v16, v17, v18, v19, v20, v21, (void (*)(void))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_10015AF5C);
    swift_errorRelease();
    sub_10001CFB8(v23, v27);
    sub_10001CFB8(v31, v33);
    sub_10001CFB8(v25, v29);
    sub_10001CFB8(v16, v17);
    uint64_t v7 = v18;
    unint64_t v8 = v19;
  }
  else
  {
    uint64_t v32 = v0[189];
    unint64_t v34 = v0[190];
    unint64_t v28 = v0[188];
    uint64_t v24 = v0[187];
    uint64_t v41 = v0[172];
    uint64_t v42 = v0[173];
    uint64_t v40 = v0[171];
    unint64_t v37 = v0[169];
    uint64_t v38 = v0[170];
    uint64_t v36 = v0[168];
    unint64_t v30 = v0[167];
    uint64_t v26 = v0[166];
    uint64_t v22 = v0[165];
    uint64_t v9 = v0[164];
    uint64_t v10 = v0[163];
    uint64_t v11 = v0[162];
    unint64_t v12 = v0[161];
    uint64_t v13 = v0[160];
    uint64_t v43 = v0[145];
    uint64_t v39 = v0[137];
    uint64_t v35 = v0[127];
    swift_release();
    swift_release();
    swift_release();
    sub_100F65FE4(v44, (void (*)(uint64_t, uint64_t))sub_10001CFB8);

    sub_100F65DA0(v13, v12, v11, v10, v9, v22, (void (*)(void))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_10015AF5C);
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
    sub_10001CFB8(v24, v28);
    sub_10001CFB8(v32, v34);
    sub_10001CFB8(v26, v30);
    sub_10001CFB8(v13, v12);
    uint64_t v7 = v11;
    unint64_t v8 = v10;
  }
  sub_10001CFB8(v7, v8);
  sub_100F65DA0(v36, v37, v38, v40, v41, v42, (void (*)(void))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
  sub_10001DAB4(v35, &qword_10163F7B0);
  sub_100F66E2C(v39, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  sub_100F66E2C(v43, type metadata accessor for ObservedAdvertisement);
  uint64_t v45 = v0[183];
  sub_100F66E2C(v0[154], (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = (uint64_t (*)(uint64_t))v0[1];
  return v14(v45);
}

uint64_t sub_100F584E4(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 1576) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_100F589E0;
  }
  else
  {
    *(void *)(v4 + 1584) = a1;
    uint64_t v5 = sub_100F5860C;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100F5860C()
{
  uint64_t v13 = v0[189];
  unint64_t v14 = v0[190];
  unint64_t v11 = v0[188];
  uint64_t v9 = v0[187];
  uint64_t v21 = v0[172];
  uint64_t v22 = v0[173];
  uint64_t v20 = v0[171];
  unint64_t v17 = v0[169];
  uint64_t v18 = v0[170];
  uint64_t v16 = v0[168];
  unint64_t v12 = v0[167];
  uint64_t v10 = v0[166];
  uint64_t v1 = v0[165];
  uint64_t v2 = v0[164];
  unint64_t v3 = v0[163];
  uint64_t v4 = v0[162];
  unint64_t v5 = v0[161];
  uint64_t v6 = v0[160];
  uint64_t v23 = v0[145];
  uint64_t v19 = v0[137];
  uint64_t v15 = v0[127];
  swift_release();
  swift_release();
  swift_release();
  sub_100F65FE4(v0 + 44, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
  sub_100F65DA0(v6, v5, v4, v3, v2, v1, (void (*)(void))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_10015AF5C);
  sub_10001CFB8(v9, v11);
  sub_10001CFB8(v13, v14);
  sub_10001CFB8(v10, v12);
  sub_10001CFB8(v6, v5);
  sub_10001CFB8(v4, v3);
  sub_100F65DA0(v16, v17, v18, v20, v21, v22, (void (*)(void))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
  sub_10001DAB4(v15, &qword_10163F7B0);
  sub_100F66E2C(v19, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  sub_100F66E2C(v23, type metadata accessor for ObservedAdvertisement);
  uint64_t v24 = v0[198];
  sub_100F66E2C(v0[154], (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(uint64_t))v0[1];
  return v7(v24);
}

uint64_t sub_100F589E0()
{
  uint64_t v13 = v0[189];
  unint64_t v14 = v0[190];
  unint64_t v11 = v0[188];
  uint64_t v9 = v0[187];
  uint64_t v21 = v0[172];
  uint64_t v22 = v0[173];
  uint64_t v20 = v0[171];
  unint64_t v17 = v0[169];
  uint64_t v18 = v0[170];
  uint64_t v16 = v0[168];
  unint64_t v12 = v0[167];
  uint64_t v10 = v0[166];
  uint64_t v1 = v0[165];
  uint64_t v2 = v0[164];
  unint64_t v3 = v0[163];
  uint64_t v4 = v0[162];
  unint64_t v5 = v0[161];
  uint64_t v6 = v0[160];
  uint64_t v23 = v0[145];
  uint64_t v19 = v0[137];
  uint64_t v15 = v0[127];
  swift_release();
  swift_release();
  swift_release();
  sub_100F65FE4(v0 + 44, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
  sub_100F65DA0(v6, v5, v4, v3, v2, v1, (void (*)(void))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_10015AF5C);
  sub_10001CFB8(v9, v11);
  sub_10001CFB8(v13, v14);
  sub_10001CFB8(v10, v12);
  sub_10001CFB8(v6, v5);
  sub_10001CFB8(v4, v3);
  sub_100F65DA0(v16, v17, v18, v20, v21, v22, (void (*)(void))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
  sub_10001DAB4(v15, &qword_10163F7B0);
  sub_100F66E2C(v19, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  sub_100F66E2C(v23, type metadata accessor for ObservedAdvertisement);
  sub_100F66E2C(v0[154], (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100F58DB0()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 1608) = v0;
  swift_task_dealloc();
  if (v0)
  {
    unint64_t v3 = sub_100F59000;
  }
  else
  {
    unint64_t v4 = v2[167];
    uint64_t v5 = v2[166];
    unint64_t v6 = v2[163];
    uint64_t v7 = v2[162];
    unint64_t v8 = v2[161];
    uint64_t v9 = v2[160];
    sub_10001CFB8(v5, v4);
    sub_10001CFB8(v9, v8);
    sub_10001CFB8(v7, v6);
    unint64_t v3 = sub_100F58F00;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100F58F00()
{
  uint64_t v1 = *(_OWORD **)(v0 + 1592);
  long long v2 = *(_OWORD *)(v0 + 256);
  long long v3 = *(_OWORD *)(v0 + 288);
  v1[3] = *(_OWORD *)(v0 + 272);
  v1[4] = v3;
  v1[2] = v2;
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 600, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 624))
  {
    sub_10001CEB0((long long *)(v0 + 600), v0 + 440);
    sub_10001CD44((void *)(v0 + 440), *(void *)(v0 + 464));
    unint64_t v6 = (uint64_t (*)(void))((char *)&dword_1016391C8 + dword_1016391C8);
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v0 + 1616) = v5;
    void *v5 = v0;
    v5[1] = sub_100F59394;
    return v6();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100F59000()
{
  uint64_t v1 = v0[199];
  uint64_t v18 = v0[172];
  uint64_t v19 = v0[173];
  uint64_t v15 = v0[170];
  uint64_t v16 = v0[171];
  uint64_t v13 = v0[168];
  unint64_t v14 = v0[169];
  unint64_t v2 = v0[167];
  uint64_t v3 = v0[166];
  uint64_t v10 = v0[164];
  uint64_t v11 = v0[165];
  unint64_t v4 = v0[163];
  uint64_t v5 = v0[162];
  unint64_t v6 = v0[161];
  uint64_t v7 = v0[160];
  uint64_t v17 = v0[145];
  uint64_t v12 = v0[137];
  sub_10001CFB8(v3, v2);
  sub_10001CFB8(v7, v6);
  sub_10001CFB8(v5, v4);
  *(void *)(v1 + 16) = 0;
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_100F65DA0(v7, v6, v5, v4, v10, v11, (void (*)(void))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_10015AF5C);
  sub_10001CFB8(v3, v2);
  sub_10001CFB8(v7, v6);
  sub_10001CFB8(v5, v4);
  sub_100F65DA0(v13, v14, v15, v16, v18, v19, (void (*)(void))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
  sub_100F66E2C(v12, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  sub_100F66E2C(v17, type metadata accessor for ObservedAdvertisement);
  sub_100F66E2C(v0[154], (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_100F59394(uint64_t a1)
{
  *(void *)(*(void *)v1 + 1624) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100F59494, 0, 0);
}

uint64_t sub_100F59494()
{
  uint64_t v1 = v0 + 440;
  if (*(void *)(v0 + 1624))
  {
    uint64_t v2 = *(void *)(v0 + 1232);
    uint64_t v3 = *(void *)(v0 + 1168);
    uint64_t v4 = *(void *)(v0 + 968);
    uint64_t v5 = *(void *)(v0 + 960);
    uint64_t v6 = *(void *)(v0 + 952);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v2 + *(int *)(v3 + 20), v6);
    uint64_t v7 = *(void *)(v0 + 1624);
    return _swift_task_switch(sub_100F59670, v7, 0);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    *(void *)(v0 + 1440) = *(void *)(v0 + 1592);
    uint64_t v8 = *(int *)(v0 + 1712);
    unint64_t v9 = *(void *)(v0 + 1336);
    uint64_t v10 = *(void *)(v0 + 1328);
    unint64_t v11 = *(void *)(v0 + 1304);
    uint64_t v12 = *(void *)(v0 + 1296);
    unint64_t v13 = *(void *)(v0 + 1288);
    uint64_t v14 = *(void *)(v0 + 1280);
    uint64_t v15 = *(void *)(v0 + 1272);
    uint64_t v16 = *(void *)(v0 + 1096);
    *(void *)(v0 + 112) = v10;
    uint64_t v17 = *(void *)(v0 + 1032);
    *(void *)(v0 + 120) = v9;
    *(void *)(v0 + 128) = v14;
    *(void *)(v0 + 136) = v13;
    *(void *)(v0 + 144) = v12;
    *(void *)(v0 + 152) = v11;
    uint64_t v18 = *(int *)(v17 + 24);
    char v19 = *(unsigned char *)(v16 + v8);
    *(_DWORD *)(v0 + 1716) = v18;
    uint64_t v20 = *(void *)(v16 + v18);
    sub_1000361E0(v10, v9);
    sub_1000361E0(v14, v13);
    sub_1000361E0(v12, v11);
    uint64_t v21 = (void *)swift_task_alloc();
    *(void *)(v0 + 1448) = v21;
    *uint64_t v21 = v0;
    v21[1] = sub_100F556F4;
    uint64_t v22 = *(void *)(v0 + 1232);
    return sub_1003D8A80(v0 + 352, v22, v0 + 112, v0 + 160, v19, v20, v15, 4000);
  }
}

uint64_t sub_100F59670()
{
  uint64_t v1 = v0[201];
  sub_100FBDECC(v0[121], v0[122]);
  v0[204] = v1;
  (*(void (**)(void, void))(v0[120] + 8))(v0[121], v0[119]);
  if (v1)
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_100F59F5C;
  }
  else
  {
    uint64_t v2 = sub_100F5974C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100F5974C()
{
  uint64_t v55 = v0;
  uint64_t v1 = *(void *)(v0 + 976);
  uint64_t v2 = type metadata accessor for StandaloneBeacon();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    swift_release();
    sub_10001DAB4(v1, &qword_101643E68);
    *(void *)(v0 + 1440) = *(void *)(v0 + 1592);
    uint64_t v3 = *(int *)(v0 + 1712);
    unint64_t v4 = *(void *)(v0 + 1336);
    uint64_t v5 = *(void *)(v0 + 1328);
    unint64_t v6 = *(void *)(v0 + 1304);
    uint64_t v7 = *(void *)(v0 + 1296);
    unint64_t v8 = *(void *)(v0 + 1288);
    uint64_t v9 = *(void *)(v0 + 1280);
    uint64_t v10 = *(void *)(v0 + 1272);
    uint64_t v11 = *(void *)(v0 + 1096);
    uint64_t v12 = *(void *)(v0 + 1032);
    *(void *)(v0 + 112) = v5;
    *(void *)(v0 + 120) = v4;
    *(void *)(v0 + 128) = v9;
    *(void *)(v0 + 136) = v8;
    *(void *)(v0 + 144) = v7;
    *(void *)(v0 + 152) = v6;
    uint64_t v13 = *(int *)(v12 + 24);
    char v14 = *(unsigned char *)(v11 + v3);
    *(_DWORD *)(v0 + 1716) = v13;
    uint64_t v15 = *(void *)(v11 + v13);
    sub_1000361E0(v5, v4);
    sub_1000361E0(v9, v8);
    sub_1000361E0(v7, v6);
    uint64_t v16 = (void *)swift_task_alloc();
    *(void *)(v0 + 1448) = v16;
    *uint64_t v16 = v0;
    v16[1] = sub_100F556F4;
    uint64_t v17 = *(void *)(v0 + 1232);
    return sub_1003D8A80(v0 + 352, v17, v0 + 112, v0 + 160, v14, v15, v10, 4000);
  }
  else
  {
    uint64_t v19 = *(void *)(v0 + 1232);
    uint64_t v20 = *(void *)(v0 + 1176);
    sub_10001DAB4(v1, &qword_101643E68);
    sub_100F6681C(v19, v20, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    BOOL v23 = os_log_type_enabled(v21, v22);
    uint64_t v24 = *(void *)(v0 + 1384);
    uint64_t v25 = *(void *)(v0 + 1376);
    uint64_t v26 = *(void *)(v0 + 1368);
    unint64_t v49 = *(void *)(v0 + 1352);
    uint64_t v50 = *(void *)(v0 + 1360);
    uint64_t v48 = *(void *)(v0 + 1344);
    unint64_t v45 = *(void *)(v0 + 1336);
    uint64_t v42 = *(void *)(v0 + 1320);
    uint64_t v43 = *(void *)(v0 + 1328);
    uint64_t v41 = *(void *)(v0 + 1312);
    unint64_t v47 = *(void *)(v0 + 1304);
    uint64_t v46 = *(void *)(v0 + 1296);
    unint64_t v44 = *(void *)(v0 + 1288);
    uint64_t v27 = *(void *)(v0 + 1280);
    uint64_t v28 = *(void *)(v0 + 1176);
    uint64_t v39 = *(void *)(v0 + 1096);
    uint64_t v40 = *(void *)(v0 + 1160);
    if (v23)
    {
      uint64_t v29 = swift_slowAlloc();
      uint64_t v52 = swift_slowAlloc();
      *(_DWORD *)uint64_t v29 = 141558275;
      *(void *)(v0 + 792) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v29 + 12) = 2081;
      sub_100F66400((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v53 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v54 = v30;
      v31._countAndFlagsBits = 47;
      v31._object = (void *)0xE100000000000000;
      String.append(_:)(v31);
      v32._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v32);
      swift_bridgeObjectRelease();
      *(void *)(v0 + 800) = sub_1008FA0F0(v53, v54, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100F66E2C(v28, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Skipping secondary keys for standalone beacon %{private,mask.hash}s", (uint8_t *)v29, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_release();
      swift_release();
      swift_release();
      swift_release();
      sub_100F65DA0(v27, v44, v46, v47, v41, v42, (void (*)(void))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_10015AF5C);
      sub_10001CFB8(v43, v45);
      sub_10001CFB8(v27, v44);
      sub_10001CFB8(v46, v47);
      uint64_t v33 = v48;
      unint64_t v34 = v49;
      uint64_t v35 = v50;
      uint64_t v37 = v25;
      uint64_t v36 = v26;
    }
    else
    {

      swift_release();
      swift_release();
      swift_release();
      swift_release();
      sub_100F65DA0(v27, v44, v46, v47, v41, v42, (void (*)(void))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_10015AF5C);
      sub_100F66E2C(v28, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      sub_10001CFB8(v43, v45);
      sub_10001CFB8(v27, v44);
      sub_10001CFB8(v46, v47);
      uint64_t v33 = v48;
      unint64_t v34 = v49;
      uint64_t v35 = v50;
      uint64_t v36 = v26;
      uint64_t v37 = v25;
    }
    sub_100F65DA0(v33, v34, v35, v36, v37, v24, (void (*)(void))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
    sub_100F66E2C(v39, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    sub_100F66E2C(v40, type metadata accessor for ObservedAdvertisement);
    uint64_t v51 = *(void *)(v0 + 1592);
    sub_100F66E2C(*(void *)(v0 + 1232), (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v38 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v38(v51);
  }
}

uint64_t sub_100F59F5C()
{
  uint64_t v17 = v0[172];
  uint64_t v18 = v0[173];
  uint64_t v14 = v0[170];
  uint64_t v15 = v0[171];
  uint64_t v12 = v0[168];
  unint64_t v13 = v0[169];
  uint64_t v9 = v0[166];
  unint64_t v10 = v0[167];
  uint64_t v1 = v0[165];
  uint64_t v2 = v0[164];
  unint64_t v3 = v0[163];
  uint64_t v4 = v0[162];
  unint64_t v5 = v0[161];
  uint64_t v6 = v0[160];
  uint64_t v16 = v0[145];
  uint64_t v11 = v0[137];
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_100F65DA0(v6, v5, v4, v3, v2, v1, (void (*)(void))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_10015AF5C);
  sub_10001CFB8(v9, v10);
  sub_10001CFB8(v6, v5);
  sub_10001CFB8(v4, v3);
  sub_100F65DA0(v12, v13, v14, v15, v17, v18, (void (*)(void))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
  sub_100F66E2C(v11, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  sub_100F66E2C(v16, type metadata accessor for ObservedAdvertisement);
  sub_100F66E2C(v0[154], (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100F5A2C0(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 1648) = v1;
  swift_task_dealloc();
  if (v1)
  {
    unint64_t v5 = sub_100F5A748;
  }
  else
  {
    *(void *)(v4 + 1656) = a1;
    unint64_t v5 = sub_100F5A3E8;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100F5A3E8()
{
  uint64_t v17 = v0[172];
  uint64_t v18 = v0[173];
  uint64_t v14 = v0[170];
  uint64_t v15 = v0[171];
  uint64_t v12 = v0[168];
  unint64_t v13 = v0[169];
  unint64_t v10 = v0[167];
  uint64_t v1 = v0[166];
  uint64_t v2 = v0[165];
  uint64_t v3 = v0[164];
  unint64_t v4 = v0[163];
  uint64_t v5 = v0[162];
  unint64_t v6 = v0[161];
  uint64_t v7 = v0[160];
  uint64_t v16 = v0[145];
  uint64_t v11 = v0[137];
  swift_release();
  swift_release();
  swift_release();
  sub_100F65DA0(v7, v6, v5, v4, v3, v2, (void (*)(void))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_10015AF5C);
  sub_10001CFB8(v1, v10);
  sub_10001CFB8(v7, v6);
  sub_10001CFB8(v5, v4);
  sub_100F65DA0(v12, v13, v14, v15, v17, v18, (void (*)(void))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
  sub_100F66E2C(v11, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  sub_100F66E2C(v16, type metadata accessor for ObservedAdvertisement);
  uint64_t v19 = v0[207];
  sub_100F66E2C(v0[154], (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v8 = (uint64_t (*)(uint64_t))v0[1];
  return v8(v19);
}

uint64_t sub_100F5A748()
{
  uint64_t v17 = v0[172];
  uint64_t v18 = v0[173];
  uint64_t v14 = v0[170];
  uint64_t v15 = v0[171];
  uint64_t v12 = v0[168];
  unint64_t v13 = v0[169];
  unint64_t v10 = v0[167];
  uint64_t v1 = v0[166];
  uint64_t v2 = v0[165];
  uint64_t v3 = v0[164];
  unint64_t v4 = v0[163];
  uint64_t v5 = v0[162];
  unint64_t v6 = v0[161];
  uint64_t v7 = v0[160];
  uint64_t v16 = v0[145];
  uint64_t v11 = v0[137];
  swift_release();
  swift_release();
  swift_release();
  sub_100F65DA0(v7, v6, v5, v4, v3, v2, (void (*)(void))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_10015AF5C);
  sub_10001CFB8(v1, v10);
  sub_10001CFB8(v7, v6);
  sub_10001CFB8(v5, v4);
  sub_100F65DA0(v12, v13, v14, v15, v17, v18, (void (*)(void))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
  sub_100F66E2C(v11, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  sub_100F66E2C(v16, type metadata accessor for ObservedAdvertisement);
  sub_100F66E2C(v0[154], (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_100F5AAA4(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 1672) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_100F5AF0C;
  }
  else
  {
    *(void *)(v4 + 1680) = a1;
    uint64_t v5 = sub_100F5ABCC;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100F5ABCC()
{
  uint64_t v16 = v0[172];
  uint64_t v17 = v0[173];
  uint64_t v14 = v0[170];
  uint64_t v15 = v0[171];
  unint64_t v13 = v0[169];
  unint64_t v10 = v0[167];
  uint64_t v11 = v0[168];
  uint64_t v1 = v0[166];
  uint64_t v2 = v0[165];
  uint64_t v3 = v0[164];
  unint64_t v4 = v0[163];
  uint64_t v5 = v0[162];
  unint64_t v6 = v0[161];
  uint64_t v7 = v0[160];
  uint64_t v12 = v0[145];
  swift_release();
  swift_release();
  swift_release();
  sub_100F65DA0(v7, v6, v5, v4, v3, v2, (void (*)(void))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_10015AF5C);
  sub_10001CFB8(v1, v10);
  sub_10001CFB8(v7, v6);
  sub_10001CFB8(v5, v4);
  sub_100F65DA0(v11, v13, v14, v15, v16, v17, (void (*)(void))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
  sub_100F66E2C(v12, type metadata accessor for ObservedAdvertisement);
  uint64_t v18 = v0[210];
  sub_100F66E2C(v0[154], (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v8 = (uint64_t (*)(uint64_t))v0[1];
  return v8(v18);
}

uint64_t sub_100F5AF0C()
{
  uint64_t v16 = v0[172];
  uint64_t v17 = v0[173];
  uint64_t v14 = v0[170];
  uint64_t v15 = v0[171];
  unint64_t v13 = v0[169];
  unint64_t v10 = v0[167];
  uint64_t v11 = v0[168];
  uint64_t v1 = v0[166];
  uint64_t v2 = v0[165];
  uint64_t v3 = v0[164];
  unint64_t v4 = v0[163];
  uint64_t v5 = v0[162];
  unint64_t v6 = v0[161];
  uint64_t v7 = v0[160];
  uint64_t v12 = v0[145];
  swift_release();
  swift_release();
  swift_release();
  sub_100F65DA0(v7, v6, v5, v4, v3, v2, (void (*)(void))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_10015AF5C);
  sub_10001CFB8(v1, v10);
  sub_10001CFB8(v7, v6);
  sub_10001CFB8(v5, v4);
  sub_100F65DA0(v11, v13, v14, v15, v16, v17, (void (*)(void))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
  sub_100F66E2C(v12, type metadata accessor for ObservedAdvertisement);
  sub_100F66E2C(v0[154], (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_100F5B248(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 1696) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_100F5B678;
  }
  else
  {
    *(void *)(v4 + 1704) = a1;
    uint64_t v5 = sub_100F5B370;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100F5B370()
{
  unint64_t v1 = v0[167];
  uint64_t v2 = v0[166];
  uint64_t v9 = v0[164];
  unint64_t v3 = v0[163];
  uint64_t v4 = v0[162];
  unint64_t v5 = v0[161];
  uint64_t v6 = v0[160];
  uint64_t v10 = v0[165];
  sub_100F65DA0(v0[168], v0[169], v0[170], v0[171], v0[172], v0[173], (void (*)(void))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
  sub_10001CFB8(v2, v1);
  sub_10001CFB8(v6, v5);
  sub_10001CFB8(v4, v3);
  swift_release();
  swift_release();
  sub_100F65DA0(v6, v5, v4, v3, v9, v10, (void (*)(void))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_10015AF5C);
  swift_release();
  uint64_t v11 = v0[213];
  sub_100F66E2C(v0[154], (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(uint64_t))v0[1];
  return v7(v11);
}

uint64_t sub_100F5B678()
{
  unint64_t v1 = v0[167];
  uint64_t v2 = v0[166];
  uint64_t v9 = v0[164];
  unint64_t v3 = v0[163];
  uint64_t v4 = v0[162];
  unint64_t v5 = v0[161];
  uint64_t v6 = v0[160];
  uint64_t v10 = v0[165];
  sub_100F65DA0(v0[168], v0[169], v0[170], v0[171], v0[172], v0[173], (void (*)(void))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
  sub_10001CFB8(v2, v1);
  sub_10001CFB8(v6, v5);
  sub_10001CFB8(v4, v3);
  swift_release();
  swift_release();
  sub_100F65DA0(v6, v5, v4, v3, v9, v10, (void (*)(void))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_10015AF5C);
  swift_release();
  sub_100F66E2C(v0[154], (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100F5B97C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[35] = a3;
  v4[36] = a4;
  v4[33] = a1;
  v4[34] = a2;
  uint64_t v5 = type metadata accessor for UUID();
  v4[37] = v5;
  v4[38] = *(void *)(v5 - 8);
  v4[39] = swift_task_alloc();
  v4[40] = swift_task_alloc();
  sub_10000588C(&qword_10164E760);
  v4[41] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0);
  v4[42] = v6;
  v4[43] = *(void *)(v6 - 8);
  v4[44] = swift_task_alloc();
  v4[45] = swift_task_alloc();
  sub_10000588C(&qword_10163EB60);
  v4[46] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for ObservedAdvertisement(0);
  v4[47] = v7;
  v4[48] = *(void *)(v7 - 8);
  v4[49] = swift_task_alloc();
  v4[50] = swift_task_alloc();
  v4[51] = type metadata accessor for BeaconIdentifier();
  v4[52] = swift_task_alloc();
  v4[53] = swift_task_alloc();
  v4[54] = swift_task_alloc();
  v4[55] = swift_task_alloc();
  v4[56] = swift_task_alloc();
  return _swift_task_switch(sub_100F5BBEC, 0, 0);
}

uint64_t sub_100F5BBEC()
{
  sub_100F6681C(*(void *)(v0 + 264), *(void *)(v0 + 448), (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    unint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_101639138 + dword_101639138);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 456) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100F5BD48;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100F5BD48(uint64_t a1)
{
  *(void *)(*(void *)v1 + 464) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100F5BE48, 0, 0);
}

uint64_t sub_100F5BE48()
{
  uint64_t v1 = v0[58];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 2));
  if (v1)
  {
    uint64_t v10 = (uint64_t (__cdecl *)())((char *)&dword_101671B28 + dword_101671B28);
    uint64_t v2 = (void *)swift_task_alloc();
    v0[59] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100F5C0F0;
    return v10();
  }
  else
  {
    if (qword_101636F08 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_10170E858);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "No ObservationStoreService available!", v7, 2u);
      swift_slowDealloc();
    }

    sub_100F65D4C();
    swift_allocError();
    *unint64_t v8 = 1;
    swift_willThrow();
    sub_100F66E2C(v0[56], (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
}

uint64_t sub_100F5C0F0(uint64_t a1)
{
  *(void *)(*(void *)v1 + 480) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100F5C1F0, 0, 0);
}

uint64_t sub_100F5C1F0()
{
  if (v0[60])
  {
    uint64_t v1 = (void *)swift_task_alloc();
    v0[61] = v1;
    *uint64_t v1 = v0;
    v1[1] = sub_100F5C498;
    uint64_t v2 = v0[56];
    uint64_t v3 = v0[46];
    return sub_1011048AC(v3, v2);
  }
  else
  {
    if (qword_101636F08 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100010324(v5, (uint64_t)qword_10170E858);
    os_log_type_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      unint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Missing ItemSharingKeyStore!", v8, 2u);
      swift_slowDealloc();
    }

    sub_100F65D4C();
    swift_allocError();
    unsigned char *v9 = 1;
    swift_willThrow();
    swift_release();
    sub_100F66E2C(v0[56], (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = (uint64_t (*)(void))v0[1];
    return v10();
  }
}

uint64_t sub_100F5C498()
{
  *(void *)(*(void *)v1 + 496) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100F5D8E8;
  }
  else {
    uint64_t v2 = sub_100F5C5AC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100F5C5AC()
{
  unint64_t v110 = v0;
  uint64_t v1 = v0[46];
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(v0[48] + 48))(v1, 1, v0[47]) == 1)
  {
    sub_10001DAB4(v1, &qword_10163EB60);
    if (qword_101636F08 != -1) {
      swift_once();
    }
    uint64_t v2 = v0[55];
    uint64_t v3 = v0[56];
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_10170E858);
    sub_100F6681C(v3, v2, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    BOOL v7 = os_log_type_enabled(v5, v6);
    uint64_t v8 = v0[55];
    if (v7)
    {
      uint64_t v9 = swift_slowAlloc();
      uint64_t v107 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 141558275;
      v0[21] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v9 + 12) = 2081;
      sub_100F66400((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v108 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v109 = v10;
      v11._countAndFlagsBits = 47;
      v11._object = (void *)0xE100000000000000;
      String.append(_:)(v11);
      v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      v0[22] = sub_1008FA0F0(v108, v109, &v107);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100F66E2C(v8, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "No observed advertisement for beacon %{private,mask.hash}s.", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100F66E2C(v0[55], (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    }

    BOOL v23 = (void *)swift_task_alloc();
    v0[83] = v23;
    *BOOL v23 = v0;
    uint64_t v24 = sub_100F5FDC0;
    goto LABEL_12;
  }
  sub_100F66E8C(v1, v0[50], type metadata accessor for ObservedAdvertisement);
  if (qword_101636F08 != -1) {
    swift_once();
  }
  uint64_t v13 = v0[49];
  uint64_t v14 = v0[50];
  uint64_t v15 = type metadata accessor for Logger();
  sub_100010324(v15, (uint64_t)qword_10170E858);
  sub_100F6681C(v14, v13, type metadata accessor for ObservedAdvertisement);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  BOOL v18 = os_log_type_enabled(v16, v17);
  uint64_t v19 = v0[49];
  if (v18)
  {
    uint64_t v20 = swift_slowAlloc();
    uint64_t v108 = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 141558275;
    v0[31] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v20 + 12) = 2081;
    uint64_t v21 = sub_1002016B0();
    v0[32] = sub_1008FA0F0(v21, v22, &v108);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100F66E2C(v19, type metadata accessor for ObservedAdvertisement);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Found observed advertisement %{private,mask.hash}s.", (uint8_t *)v20, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100F66E2C(v19, type metadata accessor for ObservedAdvertisement);
  }

  uint64_t v30 = v0[42];
  uint64_t v31 = v0[43];
  uint64_t v32 = v0[41];
  sub_10001D074(v0[50] + *(int *)(v0[47] + 52), v32, &qword_10164E760);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v32, 1, v30) == 1)
  {
    uint64_t v33 = v0[56];
    uint64_t v34 = v0[54];
    sub_10001DAB4(v0[41], &qword_10164E760);
    sub_100F6681C(v33, v34, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.error.getter();
    BOOL v37 = os_log_type_enabled(v35, v36);
    uint64_t v38 = v0[56];
    uint64_t v39 = v0[54];
    if (v37)
    {
      uint64_t v102 = v0[50];
      uint64_t v40 = swift_slowAlloc();
      uint64_t v107 = swift_slowAlloc();
      *(_DWORD *)uint64_t v40 = 141558275;
      v0[23] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v40 + 12) = 2081;
      sub_100F66400((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v108 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v109 = v41;
      v42._countAndFlagsBits = 47;
      v42._object = (void *)0xE100000000000000;
      String.append(_:)(v42);
      v43._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v43);
      swift_bridgeObjectRelease();
      v0[24] = sub_1008FA0F0(v108, v109, &v107);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100F66E2C(v39, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Missing beaconIndexInformation for %{private,mask.hash}s!", (uint8_t *)v40, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();
      swift_release();

      sub_100F66E2C(v102, type metadata accessor for ObservedAdvertisement);
    }
    else
    {
      uint64_t v47 = v0[50];

      swift_release();
      swift_release();
      sub_100F66E2C(v39, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      sub_100F66E2C(v47, type metadata accessor for ObservedAdvertisement);
    }
    uint64_t v44 = v38;
LABEL_52:
    sub_100F66E2C(v44, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v99 = (uint64_t (*)(void *))v0[1];
    return v99(_swiftEmptyArrayStorage);
  }
  uint64_t v45 = v0[45];
  uint64_t v46 = v0[42];
  sub_100F66E8C(v0[41], v45, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  if (*(unsigned char *)(v45 + *(int *)(v46 + 20)))
  {
    if (*(unsigned char *)(v45 + *(int *)(v46 + 20)) != 1)
    {
      sub_100F6681C(v0[45], v0[44], type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
      uint64_t v62 = Logger.logObject.getter();
      os_log_type_t v63 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v62, v63))
      {
        uint64_t v64 = v0[44];
        unint64_t v65 = (uint8_t *)swift_slowAlloc();
        uint64_t v108 = swift_slowAlloc();
        *(_DWORD *)unint64_t v65 = 136446210;
        if (*(unsigned char *)(v64 + *(int *)(v46 + 20)))
        {
          if (*(unsigned char *)(v64 + *(int *)(v46 + 20)) == 1)
          {
            unint64_t v66 = 0xEA00000000007972;
            uint64_t v67 = 0x61646E6F6365732ELL;
          }
          else
          {
            unint64_t v66 = 0x80000001013F28C0;
            uint64_t v67 = 0xD000000000000010;
          }
        }
        else
        {
          unint64_t v66 = 0xE800000000000000;
          uint64_t v67 = 0x7972616D6972702ELL;
        }
        uint64_t v106 = v0[56];
        uint64_t v103 = v0[50];
        uint64_t v98 = v0[44];
        uint64_t v101 = v0[45];
        v0[25] = sub_1008FA0F0(v67, v66, &v108);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100F66E2C(v98, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
        _os_log_impl((void *)&_mh_execute_header, v62, v63, "Invalid key sequence %{public}s", v65, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        swift_release();
        swift_release();

        sub_100F66E2C(v101, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
        sub_100F66E2C(v103, type metadata accessor for ObservedAdvertisement);
        uint64_t v44 = v106;
      }
      else
      {
        uint64_t v87 = v0[56];
        uint64_t v88 = v0[50];
        uint64_t v90 = v0[44];
        uint64_t v89 = v0[45];

        swift_release();
        swift_release();
        sub_100F66E2C(v90, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
        sub_100F66E2C(v89, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
        sub_100F66E2C(v88, type metadata accessor for ObservedAdvertisement);
        uint64_t v44 = v87;
      }
      goto LABEL_52;
    }
    char v104 = 1;
  }
  else
  {
    char v104 = 0;
  }
  uint64_t v48 = v0[56];
  uint64_t v50 = v0[50];
  uint64_t v49 = v0[51];
  uint64_t v51 = v0[39];
  uint64_t v52 = v0[37];
  uint64_t v53 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[38] + 16);
  v53(v0[40], v48, v52);
  v53(v51, v48 + *(int *)(v49 + 20), v52);
  if (*(unsigned char *)(v50 + 35))
  {
    if (v104)
    {
      sub_100F6681C(v0[56], v0[52], (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      unint64_t v54 = Logger.logObject.getter();
      os_log_type_t v55 = static os_log_type_t.fault.getter();
      BOOL v56 = os_log_type_enabled(v54, v55);
      uint64_t v57 = v0[52];
      if (v56)
      {
        uint64_t v58 = swift_slowAlloc();
        uint64_t v107 = swift_slowAlloc();
        *(_DWORD *)uint64_t v58 = 141558275;
        v0[26] = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v58 + 12) = 2081;
        sub_100F66400((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v108 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v109 = v59;
        v60._countAndFlagsBits = 47;
        v60._object = (void *)0xE100000000000000;
        String.append(_:)(v60);
        v61._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v61);
        swift_bridgeObjectRelease();
        v0[27] = sub_1008FA0F0(v108, v109, &v107);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100F66E2C(v57, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "%{private,mask.hash}s Should be impossible to be in secondary sequence without a hint!", (uint8_t *)v58, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_100F66E2C(v0[52], (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      }

      BOOL v23 = (void *)swift_task_alloc();
      v0[80] = v23;
      *BOOL v23 = v0;
      uint64_t v24 = sub_100F5F920;
LABEL_12:
      v23[1] = v24;
      uint64_t v25 = v0[35];
      uint64_t v26 = v0[36];
      uint64_t v28 = v0[33];
      uint64_t v27 = v0[34];
      return sub_100F63A1C(v28, v27, v25, v26);
    }
    uint64_t v83 = *(void *)(v0[45] + *(int *)(v0[42] + 24));
    v0[67] = v83;
    v105 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_101665218 + dword_101665218);
    uint64_t v84 = (void *)swift_task_alloc();
    v0[68] = v84;
    *uint64_t v84 = v0;
    v84[1] = sub_100F5E800;
    uint64_t v85 = v0[39];
    uint64_t v86 = v0[40];
    return v105(v86, v85, v83);
  }
  else
  {
    char v68 = *(unsigned char *)(v50 + 34);
    uint64_t v69 = v0[56];
    uint64_t v70 = v0[53];
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v71 = swift_allocObject();
    *(_OWORD *)(v71 + 16) = xmmword_101342130;
    *(void *)(v71 + 56) = &type metadata for UInt8;
    *(void *)(v71 + 64) = &protocol witness table for UInt8;
    *(unsigned char *)(v71 + 32) = v68;
    uint64_t v72 = String.init(format:_:)();
    unint64_t v74 = v73;
    sub_100F6681C(v69, v70, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    swift_bridgeObjectRetain();
    unint64_t v75 = Logger.logObject.getter();
    os_log_type_t v76 = static os_log_type_t.info.getter();
    BOOL v77 = os_log_type_enabled(v75, v76);
    uint64_t v78 = v0[53];
    if (v77)
    {
      char v100 = v68;
      uint64_t v79 = swift_slowAlloc();
      uint64_t v107 = swift_slowAlloc();
      *(_DWORD *)uint64_t v79 = 136446723;
      swift_bridgeObjectRetain();
      v0[28] = sub_1008FA0F0(v72, v74, &v107);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v79 + 12) = 2160;
      v0[29] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v79 + 22) = 2081;
      sub_100F66400((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v108 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v109 = v80;
      v81._countAndFlagsBits = 47;
      v81._object = (void *)0xE100000000000000;
      String.append(_:)(v81);
      v82._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v82);
      swift_bridgeObjectRelease();
      v0[30] = sub_1008FA0F0(v108, v109, &v107);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100F66E2C(v78, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      _os_log_impl((void *)&_mh_execute_header, v75, v76, "Hint %{public}s is available for %{private,mask.hash}s", (uint8_t *)v79, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      char v68 = v100;
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      sub_100F66E2C(v78, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    }

    uint64_t v91 = *(void *)(v0[45] + *(int *)(v0[42] + 24));
    if (v104)
    {
      uint64_t v92 = (void *)swift_task_alloc();
      v0[65] = v92;
      void *v92 = v0;
      v92[1] = sub_100F5DB4C;
      uint64_t v93 = v0[39];
      uint64_t v94 = v0[40];
      return sub_100648E2C(v94, v93, v91, v68);
    }
    else
    {
      uint64_t v95 = (void *)swift_task_alloc();
      v0[63] = v95;
      *uint64_t v95 = v0;
      v95[1] = sub_100F5DA30;
      uint64_t v96 = v0[39];
      uint64_t v97 = v0[40];
      return sub_100648660(v97, v96, v91, v68);
    }
  }
}

uint64_t sub_100F5D8E8()
{
  swift_release();
  swift_release();
  sub_100F66E2C(*(void *)(v0 + 448), (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100F5DA30(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[15] = v2;
  v3[16] = a1;
  v3[17] = v1;
  v3[64] = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_100F5E078;
  }
  else {
    uint64_t v4 = sub_100F5DC68;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100F5DB4C(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[18] = v2;
  v3[19] = a1;
  v3[20] = v1;
  v3[66] = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_100F5E644;
  }
  else {
    uint64_t v4 = sub_100F5E234;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100F5DC68()
{
  uint64_t v36 = v0;
  uint64_t v34 = *(void *)(v0 + 128);
  uint64_t v1 = *(void *)(v0 + 400);
  uint64_t v3 = *(void *)(v1 + 16);
  unint64_t v2 = *(void *)(v1 + 24);
  if ((v2 & 0x2000000000000000) != 0)
  {
    uint64_t v5 = v2 & 0xDFFFFFFFFFFFFFFFLL;
    uint64_t result = sub_1000361E0(*(void *)(v1 + 16), v2 & 0xDFFFFFFFFFFFFFFFLL);
  }
  else
  {
    sub_1000361E0(*(void *)(v1 + 16), *(void *)(v1 + 24));
    uint64_t result = sub_100435A9C(6, v3, v2, v35);
    uint64_t v3 = v35[0];
    uint64_t v5 = v35[1];
  }
  int64_t v6 = 0;
  uint64_t v7 = *(void *)(v34 + 64);
  uint64_t v32 = v34 + 64;
  uint64_t v8 = -1;
  uint64_t v9 = -1 << *(unsigned char *)(v34 + 32);
  if (-v9 < 64) {
    uint64_t v8 = ~(-1 << -(char)v9);
  }
  unint64_t v10 = v8 & v7;
  int64_t v33 = (unint64_t)(63 - v9) >> 6;
  Swift::String v11 = _swiftEmptyArrayStorage;
  if ((v8 & v7) == 0) {
    goto LABEL_8;
  }
LABEL_7:
  unint64_t v12 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v12 | (v6 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v6 << 6))
  {
    uint64_t v17 = *(void *)(*(void *)(v34 + 48) + 8 * i);
    BOOL v18 = (uint64_t *)(*(void *)(v34 + 56) + 16 * i);
    uint64_t v19 = *v18;
    unint64_t v20 = v18[1];
    sub_1000361E0(*v18, v20);
    sub_1000361E0(v3, v5);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_100A70338(0, v11[2] + 1, 1, v11);
      Swift::String v11 = (void *)result;
    }
    unint64_t v22 = v11[2];
    unint64_t v21 = v11[3];
    if (v22 >= v21 >> 1)
    {
      uint64_t result = (uint64_t)sub_100A70338((void *)(v21 > 1), v22 + 1, 1, v11);
      Swift::String v11 = (void *)result;
    }
    v11[2] = v22 + 1;
    BOOL v23 = &v11[6 * v22];
    *((unsigned char *)v23 + 32) = 0;
    v23[5] = v17;
    v23[6] = v3;
    v23[7] = v5;
    v23[8] = v19;
    v23[9] = v20;
    if (v10) {
      goto LABEL_7;
    }
LABEL_8:
    int64_t v14 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
LABEL_34:
      __break(1u);
      return result;
    }
    if (v14 >= v33) {
      goto LABEL_30;
    }
    unint64_t v15 = *(void *)(v32 + 8 * v14);
    ++v6;
    if (!v15)
    {
      int64_t v6 = v14 + 1;
      if (v14 + 1 >= v33) {
        goto LABEL_30;
      }
      unint64_t v15 = *(void *)(v32 + 8 * v6);
      if (!v15)
      {
        int64_t v6 = v14 + 2;
        if (v14 + 2 >= v33) {
          goto LABEL_30;
        }
        unint64_t v15 = *(void *)(v32 + 8 * v6);
        if (!v15)
        {
          int64_t v6 = v14 + 3;
          if (v14 + 3 >= v33) {
            goto LABEL_30;
          }
          unint64_t v15 = *(void *)(v32 + 8 * v6);
          if (!v15) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v10 = (v15 - 1) & v15;
  }
  int64_t v16 = v14 + 4;
  if (v16 < v33)
  {
    unint64_t v15 = *(void *)(v32 + 8 * v16);
    if (!v15)
    {
      while (1)
      {
        int64_t v6 = v16 + 1;
        if (__OFADD__(v16, 1)) {
          goto LABEL_34;
        }
        if (v6 >= v33) {
          goto LABEL_30;
        }
        unint64_t v15 = *(void *)(v32 + 8 * v6);
        ++v16;
        if (v15) {
          goto LABEL_23;
        }
      }
    }
    int64_t v6 = v16;
    goto LABEL_23;
  }
LABEL_30:
  sub_10001CFB8(v3, v5);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v24 = v31[56];
  uint64_t v25 = v31[50];
  uint64_t v26 = v31[45];
  uint64_t v27 = v31[40];
  uint64_t v28 = v31[37];
  uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v31[38] + 8);
  v29(v31[39], v28);
  v29(v27, v28);
  sub_100F66E2C(v26, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  sub_100F66E2C(v25, type metadata accessor for ObservedAdvertisement);
  sub_100F66E2C(v24, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v30 = (uint64_t (*)(void *))v31[1];
  return v30(v11);
}

uint64_t sub_100F5E078()
{
  uint64_t v1 = v0[50];
  uint64_t v2 = v0[45];
  uint64_t v4 = v0[39];
  uint64_t v3 = v0[40];
  uint64_t v5 = v0[37];
  uint64_t v6 = v0[38];
  swift_release();
  swift_release();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  v7(v3, v5);
  sub_100F66E2C(v2, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  sub_100F66E2C(v1, type metadata accessor for ObservedAdvertisement);
  sub_100F66E2C(v0[56], (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_100F5E234()
{
  uint64_t v36 = v0;
  uint64_t v34 = *(void *)(v0 + 152);
  uint64_t v1 = *(void *)(v0 + 400);
  uint64_t v3 = *(void *)(v1 + 16);
  unint64_t v2 = *(void *)(v1 + 24);
  if ((v2 & 0x2000000000000000) != 0)
  {
    uint64_t v5 = v2 & 0xDFFFFFFFFFFFFFFFLL;
    uint64_t result = sub_1000361E0(*(void *)(v1 + 16), v2 & 0xDFFFFFFFFFFFFFFFLL);
  }
  else
  {
    sub_1000361E0(*(void *)(v1 + 16), *(void *)(v1 + 24));
    uint64_t result = sub_100435A9C(6, v3, v2, v35);
    uint64_t v3 = v35[0];
    uint64_t v5 = v35[1];
  }
  int64_t v6 = 0;
  uint64_t v7 = *(void *)(v34 + 64);
  uint64_t v32 = v34 + 64;
  uint64_t v8 = -1;
  uint64_t v9 = -1 << *(unsigned char *)(v34 + 32);
  if (-v9 < 64) {
    uint64_t v8 = ~(-1 << -(char)v9);
  }
  unint64_t v10 = v8 & v7;
  int64_t v33 = (unint64_t)(63 - v9) >> 6;
  Swift::String v11 = _swiftEmptyArrayStorage;
  if ((v8 & v7) == 0) {
    goto LABEL_8;
  }
LABEL_7:
  unint64_t v12 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v12 | (v6 << 6); ; unint64_t i = __clz(__rbit64(v15)) + (v6 << 6))
  {
    uint64_t v17 = *(void *)(*(void *)(v34 + 48) + 8 * i);
    BOOL v18 = (uint64_t *)(*(void *)(v34 + 56) + 16 * i);
    uint64_t v19 = *v18;
    unint64_t v20 = v18[1];
    sub_1000361E0(*v18, v20);
    sub_1000361E0(v3, v5);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_100A70338(0, v11[2] + 1, 1, v11);
      Swift::String v11 = (void *)result;
    }
    unint64_t v22 = v11[2];
    unint64_t v21 = v11[3];
    if (v22 >= v21 >> 1)
    {
      uint64_t result = (uint64_t)sub_100A70338((void *)(v21 > 1), v22 + 1, 1, v11);
      Swift::String v11 = (void *)result;
    }
    v11[2] = v22 + 1;
    BOOL v23 = &v11[6 * v22];
    *((unsigned char *)v23 + 32) = 0;
    v23[5] = v17;
    v23[6] = v3;
    v23[7] = v5;
    v23[8] = v19;
    v23[9] = v20;
    if (v10) {
      goto LABEL_7;
    }
LABEL_8:
    int64_t v14 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
LABEL_34:
      __break(1u);
      return result;
    }
    if (v14 >= v33) {
      goto LABEL_30;
    }
    unint64_t v15 = *(void *)(v32 + 8 * v14);
    ++v6;
    if (!v15)
    {
      int64_t v6 = v14 + 1;
      if (v14 + 1 >= v33) {
        goto LABEL_30;
      }
      unint64_t v15 = *(void *)(v32 + 8 * v6);
      if (!v15)
      {
        int64_t v6 = v14 + 2;
        if (v14 + 2 >= v33) {
          goto LABEL_30;
        }
        unint64_t v15 = *(void *)(v32 + 8 * v6);
        if (!v15)
        {
          int64_t v6 = v14 + 3;
          if (v14 + 3 >= v33) {
            goto LABEL_30;
          }
          unint64_t v15 = *(void *)(v32 + 8 * v6);
          if (!v15) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v10 = (v15 - 1) & v15;
  }
  int64_t v16 = v14 + 4;
  if (v16 < v33)
  {
    unint64_t v15 = *(void *)(v32 + 8 * v16);
    if (!v15)
    {
      while (1)
      {
        int64_t v6 = v16 + 1;
        if (__OFADD__(v16, 1)) {
          goto LABEL_34;
        }
        if (v6 >= v33) {
          goto LABEL_30;
        }
        unint64_t v15 = *(void *)(v32 + 8 * v6);
        ++v16;
        if (v15) {
          goto LABEL_23;
        }
      }
    }
    int64_t v6 = v16;
    goto LABEL_23;
  }
LABEL_30:
  sub_10001CFB8(v3, v5);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v24 = v31[56];
  uint64_t v25 = v31[50];
  uint64_t v26 = v31[45];
  uint64_t v27 = v31[40];
  uint64_t v28 = v31[37];
  uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v31[38] + 8);
  v29(v31[39], v28);
  v29(v27, v28);
  sub_100F66E2C(v26, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  sub_100F66E2C(v25, type metadata accessor for ObservedAdvertisement);
  sub_100F66E2C(v24, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v30 = (uint64_t (*)(void *))v31[1];
  return v30(v11);
}

uint64_t sub_100F5E644()
{
  uint64_t v1 = v0[50];
  uint64_t v2 = v0[45];
  uint64_t v4 = v0[39];
  uint64_t v3 = v0[40];
  uint64_t v5 = v0[37];
  uint64_t v6 = v0[38];
  swift_release();
  swift_release();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  v7(v3, v5);
  sub_100F66E2C(v2, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  sub_100F66E2C(v1, type metadata accessor for ObservedAdvertisement);
  sub_100F66E2C(v0[56], (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_100F5E800(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[69] = a1;
  v4[70] = a2;
  v4[71] = v2;
  swift_task_dealloc();
  if (v2) {
    uint64_t v5 = sub_100F5EB98;
  }
  else {
    uint64_t v5 = sub_100F5E91C;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100F5E91C()
{
  if (v0[70] >> 60 == 15)
  {
    swift_release();
    swift_release();
    uint64_t v1 = v0[56];
    uint64_t v2 = v0[50];
    uint64_t v3 = v0[45];
    uint64_t v4 = v0[40];
    uint64_t v5 = v0[37];
    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v0[38] + 8);
    v6(v0[39], v5);
    v6(v4, v5);
    sub_100F66E2C(v3, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    sub_100F66E2C(v2, type metadata accessor for ObservedAdvertisement);
    sub_100F66E2C(v1, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(void *))v0[1];
    return v7(_swiftEmptyArrayStorage);
  }
  else
  {
    unint64_t v9 = v0[67];
    if (v9) {
      unint64_t v10 = v9 / 0x60 + 1;
    }
    else {
      unint64_t v10 = 0;
    }
    int64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_101665220 + dword_101665220);
    Swift::String v11 = (void *)swift_task_alloc();
    v0[72] = v11;
    *Swift::String v11 = v0;
    v11[1] = sub_100F5ED54;
    uint64_t v12 = v0[39];
    uint64_t v13 = v0[40];
    return v14(v13, v12, v10);
  }
}

uint64_t sub_100F5EB98()
{
  uint64_t v1 = v0[50];
  uint64_t v2 = v0[45];
  uint64_t v4 = v0[39];
  uint64_t v3 = v0[40];
  uint64_t v5 = v0[37];
  uint64_t v6 = v0[38];
  swift_release();
  swift_release();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  v7(v3, v5);
  sub_100F66E2C(v2, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  sub_100F66E2C(v1, type metadata accessor for ObservedAdvertisement);
  sub_100F66E2C(v0[56], (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_100F5ED54(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[73] = a1;
  v4[74] = a2;
  v4[75] = v2;
  swift_task_dealloc();
  if (v2) {
    uint64_t v5 = sub_100F5F0D0;
  }
  else {
    uint64_t v5 = sub_100F5EE70;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100F5EE70()
{
  if (v0[74] >> 60 == 15)
  {
    unint64_t v1 = v0[70];
    uint64_t v2 = v0[69];
    swift_release();
    swift_release();
    sub_100037A24(v2, v1);
    uint64_t v3 = v0[56];
    uint64_t v4 = v0[50];
    uint64_t v5 = v0[45];
    uint64_t v6 = v0[40];
    uint64_t v7 = v0[37];
    uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v0[38] + 8);
    v8(v0[39], v7);
    v8(v6, v7);
    sub_100F66E2C(v5, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    sub_100F66E2C(v4, type metadata accessor for ObservedAdvertisement);
    sub_100F66E2C(v3, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v9 = (uint64_t (*)(void *))v0[1];
    return v9(_swiftEmptyArrayStorage);
  }
  else
  {
    Swift::String v11 = (void *)swift_task_alloc();
    v0[76] = v11;
    *Swift::String v11 = v0;
    v11[1] = sub_100F5F2A0;
    uint64_t v12 = v0[67];
    uint64_t v13 = v0[39];
    uint64_t v14 = v0[40];
    return sub_10064A57C(v14, v13, v12);
  }
}

uint64_t sub_100F5F0D0()
{
  unint64_t v1 = v0[70];
  uint64_t v2 = v0[69];
  uint64_t v3 = v0[50];
  uint64_t v4 = v0[45];
  uint64_t v6 = v0[39];
  uint64_t v5 = v0[40];
  uint64_t v7 = v0[37];
  uint64_t v8 = v0[38];
  swift_release();
  swift_release();
  sub_100037A24(v2, v1);
  unint64_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  v9(v5, v7);
  sub_100F66E2C(v4, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  sub_100F66E2C(v3, type metadata accessor for ObservedAdvertisement);
  sub_100F66E2C(v0[56], (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_100F5F2A0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[77] = a1;
  v4[78] = a2;
  v4[79] = v2;
  swift_task_dealloc();
  if (v2) {
    uint64_t v5 = sub_100F5F738;
  }
  else {
    uint64_t v5 = sub_100F5F3BC;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100F5F3BC()
{
  unint64_t v1 = v0[78];
  if (v1 >> 60 == 15)
  {
    unint64_t v2 = v0[74];
    uint64_t v3 = v0[73];
    unint64_t v4 = v0[70];
    uint64_t v5 = v0[69];
    swift_release();
    swift_release();
    sub_100037A24(v3, v2);
    sub_100037A24(v5, v4);
    uint64_t v36 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v6 = v0[77];
    sub_100037A38(v0[69], v0[70]);
    sub_100037A38(v6, v1);
    uint64_t v7 = sub_100A70338(0, 1, 1, _swiftEmptyArrayStorage);
    unint64_t v9 = v7[2];
    unint64_t v8 = v7[3];
    if (v9 >= v8 >> 1) {
      uint64_t v7 = sub_100A70338((void *)(v8 > 1), v9 + 1, 1, v7);
    }
    uint64_t v10 = v0[67];
    Swift::String v11 = &v7[6 * v9];
    long long v12 = *(_OWORD *)(v0 + 69);
    long long v13 = *(_OWORD *)(v0 + 77);
    v7[2] = v9 + 1;
    *((unsigned char *)v11 + 32) = 0;
    v11[5] = v10;
    *((_OWORD *)v11 + 3) = v12;
    *((_OWORD *)v11 + 4) = v13;
    uint64_t v14 = v7;
    if (v10) {
      unint64_t v35 = v0[67] / 0x60uLL + 1;
    }
    else {
      unint64_t v35 = 0;
    }
    unint64_t v15 = v0[74];
    uint64_t v16 = v0[73];
    sub_100037A38(v0[77], v0[78]);
    sub_100037A38(v16, v15);
    uint64_t v17 = v14;
    unint64_t v19 = v14[2];
    unint64_t v18 = v14[3];
    if (v19 >= v18 >> 1) {
      uint64_t v17 = sub_100A70338((void *)(v18 > 1), v19 + 1, 1, v14);
    }
    uint64_t v36 = v17;
    unint64_t v20 = v0[78];
    uint64_t v21 = v0[77];
    unint64_t v22 = v0[74];
    uint64_t v23 = v0[73];
    unint64_t v24 = v0[70];
    uint64_t v25 = v0[69];
    v17[2] = v19 + 1;
    uint64_t v26 = &v17[6 * v19];
    *((unsigned char *)v26 + 32) = 1;
    v26[5] = v35;
    v26[6] = v23;
    v26[7] = v22;
    unsigned char v26[8] = v21;
    v26[9] = v20;
    swift_release();
    swift_release();
    sub_100037A24(v23, v22);
    sub_100037A24(v21, v20);
    sub_100037A24(v25, v24);
  }
  uint64_t v27 = v0[56];
  uint64_t v28 = v0[50];
  uint64_t v29 = v0[45];
  uint64_t v30 = v0[40];
  uint64_t v31 = v0[37];
  uint64_t v32 = *(void (**)(uint64_t, uint64_t))(v0[38] + 8);
  v32(v0[39], v31);
  v32(v30, v31);
  sub_100F66E2C(v29, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  sub_100F66E2C(v28, type metadata accessor for ObservedAdvertisement);
  sub_100F66E2C(v27, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  int64_t v33 = (uint64_t (*)(void *))v0[1];
  return v33(v36);
}

uint64_t sub_100F5F738()
{
  unint64_t v1 = v0[74];
  uint64_t v2 = v0[73];
  unint64_t v3 = v0[70];
  uint64_t v4 = v0[69];
  uint64_t v12 = v0[45];
  uint64_t v13 = v0[50];
  uint64_t v6 = v0[39];
  uint64_t v5 = v0[40];
  uint64_t v7 = v0[37];
  uint64_t v8 = v0[38];
  swift_release();
  swift_release();
  sub_100037A24(v2, v1);
  sub_100037A24(v4, v3);
  unint64_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  v9(v5, v7);
  sub_100F66E2C(v12, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  sub_100F66E2C(v13, type metadata accessor for ObservedAdvertisement);
  sub_100F66E2C(v0[56], (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_100F5F920(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 648) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_100F5FC04;
  }
  else
  {
    *(void *)(v4 + 656) = a1;
    uint64_t v5 = sub_100F5FA48;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100F5FA48()
{
  uint64_t v1 = v0[56];
  uint64_t v2 = v0[50];
  uint64_t v3 = v0[45];
  uint64_t v5 = v0[39];
  uint64_t v4 = v0[40];
  uint64_t v6 = v0[37];
  uint64_t v7 = v0[38];
  swift_release();
  swift_release();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  v8(v4, v6);
  sub_100F66E2C(v3, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  sub_100F66E2C(v2, type metadata accessor for ObservedAdvertisement);
  sub_100F66E2C(v1, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  uint64_t v11 = v0[82];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v9 = (uint64_t (*)(uint64_t))v0[1];
  return v9(v11);
}

uint64_t sub_100F5FC04()
{
  uint64_t v1 = v0[50];
  uint64_t v2 = v0[45];
  uint64_t v4 = v0[39];
  uint64_t v3 = v0[40];
  uint64_t v5 = v0[37];
  uint64_t v6 = v0[38];
  swift_release();
  swift_release();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  v7(v3, v5);
  sub_100F66E2C(v2, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  sub_100F66E2C(v1, type metadata accessor for ObservedAdvertisement);
  sub_100F66E2C(v0[56], (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_100F5FDC0(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 672) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_100F60030;
  }
  else
  {
    *(void *)(v4 + 680) = a1;
    uint64_t v5 = sub_100F5FEE8;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100F5FEE8()
{
  uint64_t v1 = v0[56];
  swift_release();
  swift_release();
  sub_100F66E2C(v1, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  uint64_t v4 = v0[85];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(uint64_t))v0[1];
  return v2(v4);
}

uint64_t sub_100F60030()
{
  swift_release();
  swift_release();
  sub_100F66E2C(*(void *)(v0 + 448), (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100F60178(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 584) = a6;
  *(void *)(v6 + 576) = a5;
  *(void *)(v6 + 568) = a4;
  *(void *)(v6 + 560) = a3;
  *(void *)(v6 + 552) = a1;
  sub_10001D608(a3, v6 + 160, &qword_1016434E0);
  long long v8 = *(_OWORD *)(v6 + 176);
  *(_OWORD *)(v6 + 592) = *(_OWORD *)(v6 + 160);
  *(_OWORD *)(v6 + 608) = v8;
  long long v9 = *a2;
  long long v10 = a2[1];
  *(_OWORD *)(v6 + 624) = *(_OWORD *)(v6 + 192);
  *(_OWORD *)(v6 + 640) = v9;
  long long v11 = a2[2];
  *(_OWORD *)(v6 + 656) = v10;
  *(_OWORD *)(v6 + 672) = v11;
  uint64_t v12 = type metadata accessor for UUID();
  *(void *)(v6 + 688) = v12;
  *(void *)(v6 + 696) = *(void *)(v12 - 8);
  *(void *)(v6 + 704) = swift_task_alloc();
  sub_10000588C(&qword_101643E68);
  *(void *)(v6 + 712) = swift_task_alloc();
  sub_10000588C(&qword_10163F7B0);
  *(void *)(v6 + 720) = swift_task_alloc();
  *(void *)(v6 + 728) = swift_task_alloc();
  *(void *)(v6 + 736) = type metadata accessor for BeaconIdentifier();
  *(void *)(v6 + 744) = swift_task_alloc();
  *(void *)(v6 + 752) = swift_task_alloc();
  *(void *)(v6 + 760) = swift_task_alloc();
  *(void *)(v6 + 768) = swift_task_alloc();
  return _swift_task_switch(sub_100F60348, 0, 0);
}

uint64_t sub_100F60348()
{
  sub_100F6681C(v0[69], v0[96], (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[97] = (uint64_t)v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100F6040C;
  uint64_t v2 = v0[91];
  uint64_t v3 = v0[69];
  return sub_100F62838(v2, v3);
}

uint64_t sub_100F6040C()
{
  *(void *)(*(void *)v1 + 784) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100F6065C;
  }
  else {
    uint64_t v2 = sub_100F60520;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100F60520()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 344, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 368))
  {
    sub_10001CEB0((long long *)(v0 + 344), v0 + 304);
    sub_10001CD44((void *)(v0 + 304), *(void *)(v0 + 328));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_101639198 + dword_101639198);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 792) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100F60754;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100F6065C()
{
  sub_100F66E2C(*(void *)(v0 + 768), (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100F60754(uint64_t a1)
{
  *(void *)(*(void *)v1 + 800) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100F60854, 0, 0);
}

uint64_t sub_100F60854()
{
  uint64_t v1 = v0[100];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 38));
  if (v1)
  {
    uint64_t v2 = v0[100];
    return _swift_task_switch(sub_100F60A98, v2, 0);
  }
  else
  {
    if (qword_101636F08 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_10170E858);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Missing BeaconKeyService!", v6, 2u);
      swift_slowDealloc();
    }
    uint64_t v7 = v0[91];

    sub_100F65D4C();
    swift_allocError();
    *long long v8 = 1;
    swift_willThrow();
    sub_10001DAB4(v7, &qword_10163F7B0);
    sub_100F66E2C(v0[96], (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    long long v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
}

uint64_t sub_100F60A98()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 800) + 128);
  *(void *)(v0 + 808) = v1;
  if (v1)
  {
    swift_retain();
    uint64_t v2 = sub_100F60B24;
  }
  else
  {
    uint64_t v2 = sub_100F60F64;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100F60B24()
{
  uint64_t v30 = v0;
  if (qword_101636F08 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 768);
  uint64_t v2 = *(void *)(v0 + 760);
  uint64_t v3 = *(void *)(v0 + 728);
  uint64_t v4 = *(void *)(v0 + 720);
  uint64_t v5 = type metadata accessor for Logger();
  *(void *)(v0 + 816) = sub_100010324(v5, (uint64_t)qword_10170E858);
  sub_10001D074(v3, v4, &qword_10163F7B0);
  sub_100F6681C(v1, v2, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = *(void *)(v0 + 760);
  if (v8)
  {
    long long v10 = *(uint64_t **)(v0 + 720);
    uint64_t v11 = swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315651;
    uint64_t v12 = *v10;
    uint64_t v28 = 0x7972616D6972702ELL;
    unint64_t v29 = 0xEA0000000000282FLL;
    *(void *)(v0 + 520) = v12;
    v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    v14._countAndFlagsBits = 41;
    v14._object = (void *)0xE100000000000000;
    String.append(_:)(v14);
    *(void *)(v0 + 528) = sub_1008FA0F0(v28, v29, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10001DAB4((uint64_t)v10, &qword_10163F7B0);
    *(_WORD *)(v11 + 12) = 2160;
    *(void *)(v0 + 536) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 22) = 2081;
    sub_100F66400((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v29 = v15;
    v16._countAndFlagsBits = 47;
    v16._object = (void *)0xE100000000000000;
    String.append(_:)(v16);
    v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    *(void *)(v0 + 544) = sub_1008FA0F0(v28, v29, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100F66E2C(v9, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Best effort lastObservedIndex %s for %{private,mask.hash}s", (uint8_t *)v11, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10001DAB4(*(void *)(v0 + 720), &qword_10163F7B0);
    sub_100F66E2C(v9, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  }

  uint64_t v18 = *(void *)(v0 + 808);
  unint64_t v19 = *(uint64_t **)(v0 + 728);
  long long v20 = *(_OWORD *)(v0 + 656);
  *(_OWORD *)(v0 + 64) = *(_OWORD *)(v0 + 640);
  long long v21 = *(_OWORD *)(v0 + 672);
  *(_OWORD *)(v0 + 80) = v20;
  *(_OWORD *)(v0 + 96) = v21;
  uint64_t v22 = *v19;
  uint64_t v23 = (void *)swift_task_alloc();
  *(void *)(v0 + 824) = v23;
  *uint64_t v23 = v0;
  v23[1] = sub_100F6115C;
  uint64_t v24 = *(void *)(v0 + 768);
  uint64_t v25 = *(void *)(v0 + 560);
  return sub_1003D8A80(v0 + 256, v24, v0 + 64, v25, 0, v22, v18, 4000);
}

uint64_t sub_100F60F64()
{
  if (qword_101636F08 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170E858);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Missing LTKGenerator!", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v5 = v0[91];

  sub_100F65D4C();
  swift_allocError();
  *uint64_t v6 = 1;
  swift_willThrow();
  swift_release();
  sub_10001DAB4(v5, &qword_10163F7B0);
  sub_100F66E2C(v0[96], (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100F6115C()
{
  *(void *)(*(void *)v1 + 832) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100F613EC;
  }
  else {
    uint64_t v2 = sub_100F61270;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100F61270()
{
  sub_100F65FE4((void *)(v0 + 256), (void (*)(uint64_t, uint64_t))sub_1000361E0);
  uint64_t v1 = sub_100A70338(0, 1, 1, _swiftEmptyArrayStorage);
  unint64_t v3 = v1[2];
  unint64_t v2 = v1[3];
  if (v3 >= v2 >> 1) {
    uint64_t v1 = sub_100A70338((void *)(v2 > 1), v3 + 1, 1, v1);
  }
  *(void *)(v0 + 840) = v1;
  v1[2] = v3 + 1;
  uint64_t v4 = &v1[6 * v3];
  long long v5 = *(_OWORD *)(v0 + 256);
  long long v6 = *(_OWORD *)(v0 + 288);
  v4[3] = *(_OWORD *)(v0 + 272);
  v4[4] = v6;
  v4[2] = v5;
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 424, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 448))
  {
    sub_10001CEB0((long long *)(v0 + 424), v0 + 384);
    sub_10001CD44((void *)(v0 + 384), *(void *)(v0 + 408));
    uint64_t v9 = (uint64_t (*)(void))((char *)&dword_1016391C8 + dword_1016391C8);
    BOOL v8 = (void *)swift_task_alloc();
    *(void *)(v0 + 848) = v8;
    *BOOL v8 = v0;
    v8[1] = sub_100F6150C;
    return v9();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100F613EC()
{
  uint64_t v1 = v0[91];
  swift_release();
  swift_release();
  sub_10001DAB4(v1, &qword_10163F7B0);
  sub_100F66E2C(v0[96], (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_100F6150C(uint64_t a1)
{
  *(void *)(*(void *)v1 + 856) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100F6160C, 0, 0);
}

uint64_t sub_100F6160C()
{
  uint64_t v1 = v0 + 384;
  if (*(void *)(v0 + 856))
  {
    uint64_t v2 = *(void *)(v0 + 768);
    uint64_t v3 = *(void *)(v0 + 736);
    uint64_t v4 = *(void *)(v0 + 704);
    uint64_t v5 = *(void *)(v0 + 696);
    uint64_t v6 = *(void *)(v0 + 688);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v2 + *(int *)(v3 + 20), v6);
    uint64_t v7 = *(void *)(v0 + 856);
    return _swift_task_switch(sub_100F61944, v7, 0);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_10001D608(*(void *)(v0 + 560), v0 + 112, &qword_1016434E0);
    unint64_t v8 = *(void *)(v0 + 120);
    if (v8 >> 60 == 15)
    {
      uint64_t v9 = *(void *)(v0 + 768);
      uint64_t v10 = *(void *)(v0 + 728);
      swift_release();
      swift_release();
      sub_100F65FE4((void *)(v0 + 256), (void (*)(uint64_t, uint64_t))sub_10001CFB8);
      sub_10001DAB4(v10, &qword_10163F7B0);
      sub_100F66E2C(v9, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      uint64_t v11 = *(void *)(v0 + 840);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v12 = *(uint64_t (**)(uint64_t))(v0 + 8);
      return v12(v11);
    }
    else
    {
      long long v13 = *(_OWORD *)(v0 + 128);
      long long v14 = *(_OWORD *)(v0 + 144);
      unint64_t v15 = **(void **)(v0 + 728);
      if (v15) {
        uint64_t v16 = v15 / 0x60 + 1;
      }
      else {
        uint64_t v16 = 0;
      }
      uint64_t v17 = *(void *)(v0 + 808);
      unint64_t v18 = *(void *)(v0 + 632);
      uint64_t v19 = *(void *)(v0 + 624);
      unint64_t v20 = *(void *)(v0 + 616);
      uint64_t v21 = *(void *)(v0 + 608);
      unint64_t v22 = *(void *)(v0 + 600);
      uint64_t v23 = *(void *)(v0 + 592);
      *(void *)(v0 + 16) = *(void *)(v0 + 112);
      *(void *)(v0 + 24) = v8;
      *(_OWORD *)(v0 + 32) = v13;
      *(_OWORD *)(v0 + 48) = v14;
      sub_1000361E0(v23, v22);
      sub_1000361E0(v21, v20);
      sub_1000361E0(v19, v18);
      sub_1000361E0(v23, v22);
      sub_1000361E0(v21, v20);
      sub_1000361E0(v19, v18);
      uint64_t v24 = (void *)swift_task_alloc();
      *(void *)(v0 + 872) = v24;
      *uint64_t v24 = v0;
      v24[1] = sub_100F62174;
      uint64_t v25 = *(void *)(v0 + 768);
      return sub_1003D8A80(v0 + 208, v25, v0 + 64, v0 + 16, 1, v16, v17, 4000);
    }
  }
}

uint64_t sub_100F61944()
{
  uint64_t v1 = v0[104];
  sub_100FBDECC(v0[88], v0[89]);
  v0[108] = v1;
  (*(void (**)(void, void))(v0[87] + 8))(v0[88], v0[86]);
  if (v1)
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_100F62028;
  }
  else
  {
    uint64_t v2 = sub_100F61A20;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100F61A20()
{
  uint64_t v40 = v0;
  uint64_t v1 = *(void *)(v0 + 712);
  uint64_t v2 = type metadata accessor for StandaloneBeacon();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) != 1)
  {
    uint64_t v7 = *(void *)(v0 + 768);
    uint64_t v8 = *(void *)(v0 + 752);
    sub_10001DAB4(v1, &qword_101643E68);
    sub_100F6681C(v7, v8, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    BOOL v11 = os_log_type_enabled(v9, v10);
    uint64_t v12 = *(void *)(v0 + 768);
    uint64_t v13 = *(void *)(v0 + 752);
    if (v11)
    {
      uint64_t v36 = *(void *)(v0 + 728);
      uint64_t v35 = *(void *)(v0 + 768);
      uint64_t v14 = swift_slowAlloc();
      uint64_t v37 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 141558275;
      *(void *)(v0 + 504) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v14 + 12) = 2081;
      sub_100F66400((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v39 = v15;
      v16._countAndFlagsBits = 47;
      v16._object = (void *)0xE100000000000000;
      String.append(_:)(v16);
      v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v17);
      swift_bridgeObjectRelease();
      *(void *)(v0 + 512) = sub_1008FA0F0(v38, v39, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100F66E2C(v13, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Skipping secondary keys for standalone beacon %{private,mask.hash}s", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();
      swift_release();
      swift_release();

      sub_100F65FE4((void *)(v0 + 256), (void (*)(uint64_t, uint64_t))sub_10001CFB8);
      sub_10001DAB4(v36, &qword_10163F7B0);
      uint64_t v6 = v35;
    }
    else
    {
      uint64_t v32 = *(void *)(v0 + 728);

      swift_release();
      swift_release();
      swift_release();
      sub_100F66E2C(v13, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      sub_100F65FE4((void *)(v0 + 256), (void (*)(uint64_t, uint64_t))sub_10001CFB8);
      sub_10001DAB4(v32, &qword_10163F7B0);
      uint64_t v6 = v12;
    }
LABEL_13:
    sub_100F66E2C(v6, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    uint64_t v33 = *(void *)(v0 + 840);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v34 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v34(v33);
  }
  swift_release();
  sub_10001DAB4(v1, &qword_101643E68);
  sub_10001D608(*(void *)(v0 + 560), v0 + 112, &qword_1016434E0);
  unint64_t v3 = *(void *)(v0 + 120);
  if (v3 >> 60 == 15)
  {
    uint64_t v4 = *(void *)(v0 + 768);
    uint64_t v5 = *(void *)(v0 + 728);
    swift_release();
    swift_release();
    sub_100F65FE4((void *)(v0 + 256), (void (*)(uint64_t, uint64_t))sub_10001CFB8);
    sub_10001DAB4(v5, &qword_10163F7B0);
    uint64_t v6 = v4;
    goto LABEL_13;
  }
  long long v18 = *(_OWORD *)(v0 + 128);
  long long v19 = *(_OWORD *)(v0 + 144);
  unint64_t v20 = **(void **)(v0 + 728);
  if (v20) {
    uint64_t v21 = v20 / 0x60 + 1;
  }
  else {
    uint64_t v21 = 0;
  }
  uint64_t v22 = *(void *)(v0 + 808);
  unint64_t v23 = *(void *)(v0 + 632);
  uint64_t v24 = *(void *)(v0 + 624);
  unint64_t v25 = *(void *)(v0 + 616);
  uint64_t v26 = *(void *)(v0 + 608);
  unint64_t v27 = *(void *)(v0 + 600);
  uint64_t v28 = *(void *)(v0 + 592);
  *(void *)(v0 + 16) = *(void *)(v0 + 112);
  *(void *)(v0 + 24) = v3;
  *(_OWORD *)(v0 + 32) = v18;
  *(_OWORD *)(v0 + 48) = v19;
  sub_1000361E0(v28, v27);
  sub_1000361E0(v26, v25);
  sub_1000361E0(v24, v23);
  sub_1000361E0(v28, v27);
  sub_1000361E0(v26, v25);
  sub_1000361E0(v24, v23);
  unint64_t v29 = (void *)swift_task_alloc();
  *(void *)(v0 + 872) = v29;
  *unint64_t v29 = v0;
  v29[1] = sub_100F62174;
  uint64_t v30 = *(void *)(v0 + 768);
  return sub_1003D8A80(v0 + 208, v30, v0 + 64, v0 + 16, 1, v21, v22, 4000);
}

uint64_t sub_100F62028()
{
  uint64_t v1 = v0[91];
  swift_release();
  swift_release();
  swift_release();
  sub_100F65FE4(v0 + 32, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
  sub_10001DAB4(v1, &qword_10163F7B0);
  sub_100F66E2C(v0[96], (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_100F62174()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 880) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 560);
    swift_bridgeObjectRelease();
    sub_100F66038(v3);
    uint64_t v4 = sub_100F626EC;
  }
  else
  {
    sub_100F66038(*(void *)(v2 + 560));
    uint64_t v4 = sub_100F622A4;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100F622A4()
{
  uint64_t v31 = v0;
  uint64_t v1 = v0[33];
  uint64_t v3 = v0[28];
  unint64_t v2 = v0[29];
  uint64_t v4 = v0[36];
  unint64_t v5 = v0[37];
  sub_100F6681C(v0[96], v0[93], (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  unint64_t v27 = v2;
  sub_1000361E0(v3, v2);
  sub_1000361E0(v4, v5);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = v0[93];
    uint64_t v25 = v1;
    uint64_t v9 = swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 141558275;
    v0[61] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v9 + 12) = 2081;
    sub_100F66400((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v30 = v10;
    v11._countAndFlagsBits = 47;
    v11._object = (void *)0xE100000000000000;
    String.append(_:)(v11);
    v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v12);
    swift_bridgeObjectRelease();
    v0[62] = sub_1008FA0F0(v29, v30, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100F66E2C(v8, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Got secondary key for %{private,mask.hash}s!", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v1 = v25;
    swift_slowDealloc();
  }
  else
  {
    sub_100F66E2C(v0[93], (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  }

  uint64_t v13 = v0[105];
  sub_1000361E0(v3, v27);
  unint64_t v14 = v5;
  sub_1000361E0(v4, v5);
  unint64_t v16 = *(void *)(v13 + 16);
  unint64_t v15 = *(void *)(v13 + 24);
  Swift::String v17 = (void *)v0[105];
  uint64_t v18 = v3;
  if (v16 >= v15 >> 1) {
    Swift::String v17 = sub_100A70338((void *)(v15 > 1), v16 + 1, 1, v17);
  }
  uint64_t v24 = v0[96];
  uint64_t v26 = v17;
  uint64_t v23 = v0[91];
  uint64_t v19 = v0[70];
  v17[2] = v16 + 1;
  unint64_t v20 = &v17[6 * v16];
  *((unsigned char *)v20 + 32) = 1;
  v20[5] = v1;
  v20[6] = v18;
  v20[7] = v27;
  v20[8] = v4;
  v20[9] = v14;
  swift_release();
  swift_release();
  sub_100F65FE4(v0 + 26, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
  sub_10001CFB8(v18, v27);
  sub_10001CFB8(v4, v14);
  sub_100F66038(v19);
  sub_100F65FE4(v0 + 32, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
  sub_10001DAB4(v23, &qword_10163F7B0);
  sub_100F66E2C(v24, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v21 = (uint64_t (*)(void *))v0[1];
  return v21(v26);
}

uint64_t sub_100F626EC()
{
  uint64_t v1 = v0[91];
  uint64_t v2 = v0[70];
  swift_release();
  swift_release();
  sub_100F66038(v2);
  sub_100F65FE4(v0 + 32, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
  sub_10001DAB4(v1, &qword_10163F7B0);
  sub_100F66E2C(v0[96], (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_100F62838(uint64_t a1, uint64_t a2)
{
  v2[27] = a1;
  v2[28] = a2;
  sub_10000588C(&qword_101659D60);
  v2[29] = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_10163AC90);
  v2[30] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Date();
  v2[31] = v3;
  v2[32] = *(void *)(v3 - 8);
  v2[33] = swift_task_alloc();
  v2[34] = type metadata accessor for BeaconIdentifier();
  v2[35] = swift_task_alloc();
  v2[36] = swift_task_alloc();
  return _swift_task_switch(sub_100F62998, 0, 0);
}

uint64_t sub_100F62998()
{
  sub_100F6681C(*(void *)(v0 + 224), *(void *)(v0 + 288), (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 96, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 120))
  {
    sub_10001CEB0((long long *)(v0 + 96), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_101639138 + dword_101639138);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 296) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100F62AF4;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100F62AF4(uint64_t a1)
{
  *(void *)(*(void *)v1 + 304) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100F62BF4, 0, 0);
}

uint64_t sub_100F62BF4()
{
  uint64_t v1 = *(void *)(v0 + 304);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  if (v1)
  {
    uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
    if (*(void *)(v0 + 80))
    {
      sub_10001CEB0((long long *)(v0 + 56), v0 + 136);
      sub_10001CD44((void *)(v0 + 136), *(void *)(v0 + 160));
      unint64_t v10 = (uint64_t (__cdecl *)())((char *)&dword_101639198 + dword_101639198);
      uint64_t v3 = (void *)swift_task_alloc();
      *(void *)(v0 + 312) = v3;
      *uint64_t v3 = v0;
      v3[1] = sub_100F62E74;
      return v10();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    if (qword_101636F08 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_10170E858);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      os_log_type_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "No ObservationStoreService available!", v7, 2u);
      swift_slowDealloc();
    }

    sub_100F65D4C();
    swift_allocError();
    *uint64_t v8 = 1;
    swift_willThrow();
    sub_100F66E2C(*(void *)(v0 + 288), (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
    return v9();
  }
  return result;
}

uint64_t sub_100F62E74(uint64_t a1)
{
  *(void *)(*(void *)v1 + 320) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100F62F74, 0, 0);
}

uint64_t sub_100F62F74()
{
  uint64_t v1 = v0[40];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 17));
  if (v1)
  {
    uint64_t v2 = v0[40];
    return _swift_task_switch(sub_100F63178, v2, 0);
  }
  else
  {
    if (qword_101636F08 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_10170E858);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      os_log_type_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "No BeaconKeyService available!", v6, 2u);
      swift_slowDealloc();
    }

    sub_100F65D4C();
    swift_allocError();
    *os_log_type_t v7 = 1;
    swift_willThrow();
    swift_release();
    sub_100F66E2C(v0[36], (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
}

uint64_t sub_100F63178(uint64_t (*a1)(), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(v3[40] + 128);
  if (v4)
  {
    sub_1009FE6A8(v3[28], v4, v3[29]);
    v3[41] = 0;
    a1 = sub_100F63214;
    a3 = 0;
  }
  else
  {
    __break(1u);
  }
  return _swift_task_switch(a1, 0, a3);
}

uint64_t sub_100F63214()
{
  unint64_t v30 = v0;
  uint64_t v1 = v0[29];
  uint64_t v2 = type metadata accessor for KeyGenerationBeaconInfo();
  int v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2);
  uint64_t v4 = v0[31];
  uint64_t v5 = v0[32];
  uint64_t v6 = v0[30];
  if (v3 == 1)
  {
    sub_10001DAB4(v1, &qword_101659D60);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v6, 1, 1, v4);
LABEL_4:
    sub_10001DAB4(v0[30], (uint64_t *)&unk_10163AC90);
    if (qword_101636F08 != -1) {
      swift_once();
    }
    uint64_t v7 = v0[35];
    uint64_t v8 = v0[36];
    uint64_t v9 = type metadata accessor for Logger();
    sub_100010324(v9, (uint64_t)qword_10170E858);
    sub_100F6681C(v8, v7, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    BOOL v12 = os_log_type_enabled(v10, v11);
    uint64_t v13 = v0[35];
    if (v12)
    {
      uint64_t v14 = swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 141558275;
      v0[25] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v14 + 12) = 2081;
      type metadata accessor for UUID();
      sub_100F66400((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v29 = v15;
      v16._countAndFlagsBits = 47;
      v16._object = (void *)0xE100000000000000;
      String.append(_:)(v16);
      v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v17);
      swift_bridgeObjectRelease();
      v0[26] = sub_1008FA0F0(v28, v29, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100F66E2C(v13, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "No base date for beacon %{private,mask.hash}s.", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100F66E2C(v0[35], (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    }

    sub_100F65D4C();
    swift_allocError();
    *uint64_t v18 = 3;
    swift_willThrow();
    swift_release();
    swift_release();
    sub_100F66E2C(v0[36], (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v19 = (uint64_t (*)(void))v0[1];
    return v19();
  }
  (*(void (**)(void, uint64_t, void))(v5 + 16))(v0[30], v1 + *(int *)(v2 + 20), v0[31]);
  sub_100F66E2C(v1, (uint64_t (*)(void))type metadata accessor for KeyGenerationBeaconInfo);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v6, 0, 1, v4);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4) == 1) {
    goto LABEL_4;
  }
  uint64_t v21 = v0[34];
  uint64_t v22 = v0[28];
  (*(void (**)(void, void, void))(v0[32] + 32))(v0[33], v0[30], v0[31]);
  uint64_t v23 = v22 + *(int *)(v21 + 20);
  uint64_t v24 = (void *)swift_task_alloc();
  v0[42] = v24;
  *uint64_t v24 = v0;
  v24[1] = sub_100F6382C;
  uint64_t v25 = v0[33];
  uint64_t v26 = v0[27];
  return sub_1011044F4(v26, v23, v25);
}

uint64_t sub_100F6375C()
{
  swift_release();
  swift_release();
  sub_100F66E2C(*(void *)(v0 + 288), (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100F6382C()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100F63928, 0, 0);
}

uint64_t sub_100F63928()
{
  uint64_t v1 = v0[36];
  uint64_t v3 = v0[32];
  uint64_t v2 = v0[33];
  uint64_t v4 = v0[31];
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  sub_100F66E2C(v1, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_100F63A1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[13] = a3;
  v4[14] = a4;
  v4[11] = a1;
  v4[12] = a2;
  sub_10000588C(&qword_10163F7B0);
  v4[15] = swift_task_alloc();
  v4[16] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  v4[17] = v5;
  v4[18] = *(void *)(v5 - 8);
  v4[19] = swift_task_alloc();
  v4[20] = swift_task_alloc();
  v4[21] = type metadata accessor for BeaconIdentifier();
  v4[22] = swift_task_alloc();
  v4[23] = swift_task_alloc();
  v4[24] = swift_task_alloc();
  return _swift_task_switch(sub_100F63B7C, 0, 0);
}

uint64_t sub_100F63B7C()
{
  sub_100F6681C(v0[11], v0[24], (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_101671B28 + dword_101671B28);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[25] = (uint64_t)v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100F63C3C;
  return v3();
}

uint64_t sub_100F63C3C(uint64_t a1)
{
  *(void *)(*(void *)v1 + 208) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100F63D3C, 0, 0);
}

uint64_t sub_100F63D3C()
{
  Swift::String v17 = v0;
  if (v0[26])
  {
    uint64_t v1 = v0[24];
    uint64_t v2 = v0[19];
    uint64_t v3 = v0[17];
    uint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[18] + 16);
    v4(v0[20], v1 + *(int *)(v0[21] + 20), v3);
    v4(v2, v1, v3);
    uint64_t v5 = (void *)swift_task_alloc();
    v0[27] = v5;
    void *v5 = v0;
    v5[1] = sub_100F64050;
    uint64_t v6 = v0[16];
    uint64_t v7 = v0[11];
    return sub_100F62838(v6, v7);
  }
  else
  {
    if (qword_101636F08 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_100010324(v9, (uint64_t)qword_10170E858);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      BOOL v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      *(_DWORD *)BOOL v12 = 136315138;
      v0[2] = sub_1008FA0F0(0xD000000000000032, 0x800000010141B740, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "%s Missing ItemSharingKeyStore!", v12, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t v13 = v0[24];
    sub_100F65D4C();
    swift_allocError();
    *uint64_t v14 = 1;
    swift_willThrow();
    sub_100F66E2C(v13, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v15 = (uint64_t (*)(void))v0[1];
    return v15();
  }
}

uint64_t sub_100F64050()
{
  *(void *)(*(void *)v1 + 224) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100F645C8;
  }
  else {
    uint64_t v2 = sub_100F64164;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100F64164()
{
  uint64_t v27 = v0;
  if (qword_101636F08 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[23];
  uint64_t v2 = v0[24];
  uint64_t v4 = v0[15];
  uint64_t v3 = v0[16];
  uint64_t v5 = type metadata accessor for Logger();
  v0[29] = sub_100010324(v5, (uint64_t)qword_10170E858);
  sub_10001D074(v3, v4, &qword_10163F7B0);
  sub_100F6681C(v2, v1, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = v0[23];
  if (v8)
  {
    uint64_t v10 = (uint64_t *)v0[15];
    uint64_t v11 = swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315907;
    v0[6] = sub_1008FA0F0(0xD000000000000032, 0x800000010141B740, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 12) = 2080;
    uint64_t v12 = *v10;
    uint64_t v25 = 0x7972616D6972702ELL;
    unint64_t v26 = 0xEA0000000000282FLL;
    v0[7] = v12;
    v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v13);
    swift_bridgeObjectRelease();
    v14._countAndFlagsBits = 41;
    v14._object = (void *)0xE100000000000000;
    String.append(_:)(v14);
    v0[8] = sub_1008FA0F0(v25, v26, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10001DAB4((uint64_t)v10, &qword_10163F7B0);
    *(_WORD *)(v11 + 22) = 2160;
    v0[9] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 32) = 2081;
    sub_100F66400((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v26 = v15;
    v16._countAndFlagsBits = 47;
    v16._object = (void *)0xE100000000000000;
    String.append(_:)(v16);
    v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v0[10] = sub_1008FA0F0(v25, v26, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100F66E2C(v9, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "%s Best effort lastObservedIndex %s for %{private,mask.hash}s", (uint8_t *)v11, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10001DAB4(v0[15], &qword_10163F7B0);
    sub_100F66E2C(v9, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  }

  uint64_t v18 = *(void *)v0[16];
  uint64_t v23 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_101665218 + dword_101665218);
  uint64_t v19 = (void *)swift_task_alloc();
  v0[30] = v19;
  *uint64_t v19 = v0;
  v19[1] = sub_100F646DC;
  uint64_t v21 = v0[19];
  uint64_t v20 = v0[20];
  return v23(v21, v20, v18);
}

uint64_t sub_100F645C8()
{
  uint64_t v1 = v0[24];
  uint64_t v3 = v0[19];
  uint64_t v2 = v0[20];
  uint64_t v4 = v0[17];
  uint64_t v5 = v0[18];
  swift_release();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v6(v3, v4);
  v6(v2, v4);
  sub_100F66E2C(v1, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100F646DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[31] = a1;
  v4[32] = a2;
  v4[33] = v2;
  swift_task_dealloc();
  if (v2) {
    uint64_t v5 = sub_100F64CC0;
  }
  else {
    uint64_t v5 = sub_100F647F4;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100F647F4()
{
  uint64_t v33 = v0;
  if (v0[32] >> 60 == 15)
  {
    sub_100F6681C(v0[24], v0[22], (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    uint64_t v1 = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.error.getter();
    BOOL v3 = os_log_type_enabled(v1, v2);
    uint64_t v4 = v0[24];
    uint64_t v5 = v0[22];
    if (v3)
    {
      uint64_t v27 = v0[19];
      uint64_t v28 = v0[20];
      uint64_t v26 = v0[18];
      uint64_t v24 = v0[17];
      uint64_t v25 = v0[16];
      uint64_t v6 = swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136315651;
      v0[3] = sub_1008FA0F0(0xD000000000000032, 0x800000010141B740, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v6 + 12) = 2160;
      v0[4] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v6 + 22) = 2081;
      sub_100F66400((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v32 = v7;
      v8._countAndFlagsBits = 47;
      v8._object = (void *)0xE100000000000000;
      String.append(_:)(v8);
      v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      v0[5] = sub_1008FA0F0(v31, v32, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100F66E2C(v5, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      _os_log_impl((void *)&_mh_execute_header, v1, v2, "%s Missing info to compute connection keys for %{private,mask.hash}s!", (uint8_t *)v6, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();

      sub_10001DAB4(v25, &qword_10163F7B0);
      uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
      v10(v27, v24);
      v10(v28, v24);
    }
    else
    {
      uint64_t v17 = v0[19];
      uint64_t v18 = v0[20];
      uint64_t v19 = v0[17];
      uint64_t v20 = v0[18];
      uint64_t v21 = v0[16];

      swift_release();
      sub_100F66E2C(v5, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      sub_10001DAB4(v21, &qword_10163F7B0);
      uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
      v22(v17, v19);
      v22(v18, v19);
    }
    sub_100F66E2C(v4, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v23 = (uint64_t (*)(void *))v0[1];
    return v23(_swiftEmptyArrayStorage);
  }
  else
  {
    unint64_t v11 = *(void *)v0[16];
    if (v11) {
      unint64_t v12 = v11 / 0x60 + 1;
    }
    else {
      unint64_t v12 = 0;
    }
    unint64_t v29 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_101665220 + dword_101665220);
    Swift::String v13 = (void *)swift_task_alloc();
    v0[34] = v13;
    *Swift::String v13 = v0;
    v13[1] = sub_100F64DE8;
    uint64_t v15 = v0[19];
    uint64_t v14 = v0[20];
    return v29(v15, v14, v12);
  }
}

uint64_t sub_100F64CC0()
{
  uint64_t v1 = v0[24];
  uint64_t v3 = v0[19];
  uint64_t v2 = v0[20];
  uint64_t v4 = v0[17];
  uint64_t v5 = v0[18];
  uint64_t v6 = v0[16];
  swift_release();
  sub_10001DAB4(v6, &qword_10163F7B0);
  unint64_t v7 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v7(v3, v4);
  v7(v2, v4);
  sub_100F66E2C(v1, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  Swift::String v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_100F64DE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[35] = a1;
  v4[36] = a2;
  v4[37] = v2;
  swift_task_dealloc();
  if (v2) {
    uint64_t v5 = sub_100F653A8;
  }
  else {
    uint64_t v5 = sub_100F64F00;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100F64F00()
{
  uint64_t v31 = v0;
  if (v0[36] >> 60 == 15)
  {
    sub_100037A24(v0[31], v0[32]);
    sub_100F6681C(v0[24], v0[22], (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    uint64_t v1 = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.error.getter();
    BOOL v3 = os_log_type_enabled(v1, v2);
    uint64_t v4 = v0[24];
    uint64_t v5 = v0[22];
    if (v3)
    {
      uint64_t v26 = v0[19];
      uint64_t v27 = v0[20];
      uint64_t v25 = v0[18];
      uint64_t v23 = v0[17];
      uint64_t v24 = v0[16];
      uint64_t v6 = swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136315651;
      v0[3] = sub_1008FA0F0(0xD000000000000032, 0x800000010141B740, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v6 + 12) = 2160;
      v0[4] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v6 + 22) = 2081;
      sub_100F66400((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v30 = v7;
      v8._countAndFlagsBits = 47;
      v8._object = (void *)0xE100000000000000;
      String.append(_:)(v8);
      v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v9);
      swift_bridgeObjectRelease();
      v0[5] = sub_1008FA0F0(v29, v30, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100F66E2C(v5, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      _os_log_impl((void *)&_mh_execute_header, v1, v2, "%s Missing info to compute connection keys for %{private,mask.hash}s!", (uint8_t *)v6, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();

      sub_10001DAB4(v24, &qword_10163F7B0);
      uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
      v10(v26, v23);
      v10(v27, v23);
    }
    else
    {
      uint64_t v16 = v0[19];
      uint64_t v17 = v0[20];
      uint64_t v18 = v0[17];
      uint64_t v19 = v0[18];
      uint64_t v20 = v0[16];

      swift_release();
      sub_100F66E2C(v5, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      sub_10001DAB4(v20, &qword_10163F7B0);
      uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
      v21(v16, v18);
      v21(v17, v18);
    }
    sub_100F66E2C(v4, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v22 = (uint64_t (*)(void *))v0[1];
    return v22(_swiftEmptyArrayStorage);
  }
  else
  {
    uint64_t v11 = *(void *)v0[16];
    unint64_t v12 = (void *)swift_task_alloc();
    v0[38] = v12;
    *unint64_t v12 = v0;
    v12[1] = sub_100F654E0;
    uint64_t v14 = v0[19];
    uint64_t v13 = v0[20];
    return sub_10064A57C(v14, v13, v11);
  }
}

uint64_t sub_100F653A8()
{
  uint64_t v1 = v0[31];
  unint64_t v2 = v0[32];
  uint64_t v3 = v0[24];
  uint64_t v5 = v0[19];
  uint64_t v4 = v0[20];
  uint64_t v6 = v0[17];
  uint64_t v7 = v0[18];
  uint64_t v8 = v0[16];
  swift_release();
  sub_100037A24(v1, v2);
  sub_10001DAB4(v8, &qword_10163F7B0);
  Swift::String v9 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v9(v5, v6);
  v9(v4, v6);
  sub_100F66E2C(v3, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_100F654E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[39] = a1;
  v4[40] = a2;
  v4[41] = v2;
  swift_task_dealloc();
  if (v2) {
    uint64_t v5 = sub_100F65BF8;
  }
  else {
    uint64_t v5 = sub_100F655F8;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100F655F8()
{
  uint64_t v57 = v0;
  unint64_t v1 = v0[40];
  if (v1 >> 60 == 15)
  {
    sub_100037A24(v0[35], v0[36]);
    sub_100037A24(v0[31], v0[32]);
    sub_100F6681C(v0[24], v0[22], (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    BOOL v4 = os_log_type_enabled(v2, v3);
    uint64_t v5 = v0[24];
    uint64_t v6 = v0[22];
    if (v4)
    {
      uint64_t v49 = v0[19];
      uint64_t v51 = v0[20];
      uint64_t v47 = v0[18];
      uint64_t v43 = v0[17];
      uint64_t v44 = v0[16];
      uint64_t v7 = swift_slowAlloc();
      uint64_t v54 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136315651;
      v0[3] = sub_1008FA0F0(0xD000000000000032, 0x800000010141B740, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v7 + 12) = 2160;
      v0[4] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v7 + 22) = 2081;
      sub_100F66400((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v55 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v56 = v8;
      v9._countAndFlagsBits = 47;
      v9._object = (void *)0xE100000000000000;
      String.append(_:)(v9);
      v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v10);
      swift_bridgeObjectRelease();
      v0[5] = sub_1008FA0F0(v55, v56, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100F66E2C(v6, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "%s Missing info to compute connection keys for %{private,mask.hash}s!", (uint8_t *)v7, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();

      sub_10001DAB4(v44, &qword_10163F7B0);
      uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v47 + 8);
      v11(v49, v43);
      v11(v51, v43);
    }
    else
    {
      uint64_t v20 = v0[19];
      uint64_t v21 = v0[20];
      uint64_t v22 = v0[17];
      uint64_t v23 = v0[18];
      uint64_t v24 = v0[16];

      swift_release();
      sub_100F66E2C(v6, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      sub_10001DAB4(v24, &qword_10163F7B0);
      uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
      v25(v20, v22);
      v25(v21, v22);
    }
    sub_100F66E2C(v5, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    uint64_t v14 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v12 = v0[39];
    unint64_t v13 = *(void *)v0[16];
    sub_100037A38(v0[31], v0[32]);
    sub_100037A38(v12, v1);
    uint64_t v14 = sub_100A70338(0, 1, 1, _swiftEmptyArrayStorage);
    unint64_t v16 = v14[2];
    unint64_t v15 = v14[3];
    if (v16 >= v15 >> 1) {
      uint64_t v14 = sub_100A70338((void *)(v15 > 1), v16 + 1, 1, v14);
    }
    long long v17 = *(_OWORD *)(v0 + 31);
    long long v18 = *(_OWORD *)(v0 + 39);
    uint64_t v19 = &v14[6 * v16];
    v14[2] = v16 + 1;
    *((unsigned char *)v19 + 32) = 0;
    v19[5] = v13;
    *((_OWORD *)v19 + 3) = v17;
    *((_OWORD *)v19 + 4) = v18;
    if (v13) {
      unint64_t v53 = v13 / 0x60 + 1;
    }
    else {
      unint64_t v53 = 0;
    }
    uint64_t v27 = v0[35];
    unint64_t v26 = v0[36];
    sub_100037A38(v0[39], v0[40]);
    sub_100037A38(v27, v26);
    unint64_t v29 = v14[2];
    unint64_t v28 = v14[3];
    unint64_t v30 = v29 + 1;
    if (v29 >= v28 >> 1)
    {
      Swift::String v42 = sub_100A70338((void *)(v28 > 1), v29 + 1, 1, v14);
      unint64_t v30 = v29 + 1;
      uint64_t v14 = v42;
    }
    uint64_t v32 = v0[39];
    unint64_t v31 = v0[40];
    uint64_t v34 = v0[35];
    unint64_t v33 = v0[36];
    uint64_t v45 = v0[31];
    unint64_t v46 = v0[32];
    uint64_t v50 = v0[20];
    uint64_t v52 = v0[24];
    uint64_t v35 = v0[18];
    uint64_t v48 = v0[19];
    uint64_t v36 = v0[16];
    uint64_t v37 = v0[17];
    v14[2] = v30;
    uint64_t v38 = &v14[6 * v29];
    *((unsigned char *)v38 + 32) = 1;
    v38[5] = v53;
    v38[6] = v34;
    v38[7] = v33;
    v38[8] = v32;
    v38[9] = v31;
    swift_release();
    sub_100037A24(v34, v33);
    sub_100037A24(v32, v31);
    sub_100037A24(v45, v46);
    sub_10001DAB4(v36, &qword_10163F7B0);
    unint64_t v39 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
    v39(v48, v37);
    v39(v50, v37);
    sub_100F66E2C(v52, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v40 = (uint64_t (*)(void *))v0[1];
  return v40(v14);
}

uint64_t sub_100F65BF8()
{
  uint64_t v1 = v0[35];
  unint64_t v2 = v0[36];
  uint64_t v4 = v0[31];
  unint64_t v3 = v0[32];
  uint64_t v13 = v0[24];
  uint64_t v6 = v0[19];
  uint64_t v5 = v0[20];
  uint64_t v8 = v0[17];
  uint64_t v7 = v0[18];
  uint64_t v9 = v0[16];
  swift_release();
  sub_100037A24(v1, v2);
  sub_100037A24(v4, v3);
  sub_10001DAB4(v9, &qword_10163F7B0);
  Swift::String v10 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v10(v6, v8);
  v10(v5, v8);
  sub_100F66E2C(v13, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

unint64_t sub_100F65D4C()
{
  unint64_t result = qword_1016651E0;
  if (!qword_1016651E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1016651E0);
  }
  return result;
}

void sub_100F65DA0(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void), void (*a8)(uint64_t, uint64_t))
{
  if (a2 >> 60 != 15)
  {
    a7();
    ((void (*)(uint64_t, uint64_t))a7)(a3, a4);
    a8(a5, a6);
  }
}

uint64_t sub_100F65E34()
{
  uint64_t v1 = (int *)(type metadata accessor for BeaconIdentifier() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_release();
  swift_release();
  swift_release();
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(v6 + v1[7], v7);

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_100F65F54@<X0>(uint64_t a1@<X8>)
{
  return sub_100ACD178(a1);
}

uint64_t sub_100F65FC8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_10131FD94(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

void *sub_100F65FE4(void *a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = a1[4];
  uint64_t v5 = a1[5];
  a2(a1[2], a1[3]);
  a2(v4, v5);
  return a1;
}

uint64_t sub_100F66038(uint64_t a1)
{
  return a1;
}

uint64_t sub_100F66098(uint64_t a1)
{
  uint64_t v2 = sub_10000588C(&qword_101665270);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t result = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(a1 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_instructionEventCoalescer);
  if (v7)
  {
    uint64_t v9 = *(void *)(v7 + 64);
    swift_retain();
    swift_retain();
    sub_10000588C(&qword_1016489F0);
    sub_100062734(&qword_1016489F8, &qword_1016489F0);
    Publisher.filter(_:)();
    swift_release();
    sub_100062734(&qword_101665278, &qword_101665270);
    swift_retain();
    Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
    swift_retain();
    uint64_t v9 = sub_100AB2A48();
    swift_retain();
    sub_10000588C(&qword_1016482A8);
    sub_100062734(&qword_1016482B0, &qword_1016482A8);
    Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return a1;
  }
  else
  {
    __break(1u);
  }
  return result;
}

char *sub_100F66310@<X0>(char **a1@<X8>)
{
  uint64_t result = sub_100ACF5FC();
  *a1 = result;
  return result;
}

uint64_t sub_100F6633C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v9;
  void *v9 = v3;
  v9[1] = sub_10001D2E4;
  return sub_100F4CE94(a1, a2, v6, v7, v8);
}

uint64_t sub_100F66400(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

char *sub_100F6644C@<X0>(char **a1@<X8>)
{
  uint64_t result = sub_100AD0D68();
  *a1 = result;
  return result;
}

uint64_t sub_100F66478(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v9;
  void *v9 = v3;
  v9[1] = sub_100033F68;
  return sub_100F4E45C(a1, a2, v6, v7, v8);
}

uint64_t sub_100F6653C()
{
  uint64_t v1 = (int *)type metadata accessor for SharedBeaconRecord(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v16 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v3 = v0 + ((v2 + 40) & ~v2);
  sub_10001CFB8(*(void *)v3, *(void *)(v3 + 8));
  uint64_t v4 = v3 + v1[5];
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  v7(v3 + v1[6], v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = v3 + v1[18];
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  uint64_t v10 = v3 + v1[19];
  uint64_t v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v11(v10, 1, v5)) {
    v7(v10, v5);
  }
  uint64_t v12 = v3 + v1[20];
  uint64_t v13 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13))
  {
    uint64_t v14 = v12 + *(int *)(v13 + 20);
    if (!v11(v14, 1, v5)) {
      v7(v14, v5);
    }
  }

  return _swift_deallocObject(v0, ((v2 + 40) & ~v2) + v16, v2 | 7);
}

uint64_t sub_100F667DC@<X0>(void *a1@<X8>)
{
  return sub_100F66C58(type metadata accessor for SharedBeaconRecord, type metadata accessor for SharedBeaconRecord, a1);
}

uint64_t sub_100F6681C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100F66884()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v19 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v4 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v5 = v0 + v3 + v1[5];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  uint64_t v9 = v0 + v3 + v1[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 40) & ~v2;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 40) & ~v2;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v3 = v18;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v10 = v4 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6)) {
    v8(v10, v6);
  }
  uint64_t v11 = v4 + v1[8];
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  sub_10001CFB8(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v13 = (uint64_t *)(v4 + v1[10]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_10001CFB8(*v13, v14);
  }
  unint64_t v15 = (uint64_t *)(v4 + v1[11]);
  unint64_t v16 = v15[1];
  if (v16 >> 60 != 15) {
    sub_10001CFB8(*v15, v16);
  }
  sub_10001CFB8(*(void *)(v4 + v1[12]), *(void *)(v4 + v1[12] + 8));
  sub_10001CFB8(*(void *)(v4 + v1[13]), *(void *)(v4 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v3 + v19, v2 | 7);
}

uint64_t sub_100F66C18@<X0>(void *a1@<X8>)
{
  return sub_100F66C58((uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord, a1);
}

uint64_t sub_100F66C58@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t (*a2)(void)@<X1>, void *a3@<X8>)
{
  uint64_t v6 = *(void *)(a1(0) - 8);
  return sub_100F4E9C4(*(void *)(v3 + 16), v3 + ((*(unsigned __int8 *)(v6 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)), a2, a3);
}

uint64_t sub_100F66CE4()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100F66DC0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  return sub_100AE75E0(v1 + ((*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)), a1);
}

uint64_t sub_100F66E2C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100F66E8C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100F66EF4(uint64_t a1)
{
  return sub_100F4AC04(a1, v1, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord, "Key generation complete for: %{private,mask.hash}s.");
}

uint64_t sub_100F66F54(uint64_t a1)
{
  return sub_100F4AC04(a1, v1, type metadata accessor for SharedBeaconRecord, type metadata accessor for SharedBeaconRecord, type metadata accessor for SharedBeaconRecord, "Finished downloading keys for: %{private,mask.hash}s.");
}

uint64_t destroy for SingleUserAdapter()
{
  swift_release();
  swift_release();

  return swift_release();
}

void *_s12searchpartyd17SingleUserAdapterVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for SingleUserAdapter(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for SingleUserAdapter(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for SingleUserAdapter()
{
  return &type metadata for SingleUserAdapter;
}

uint64_t sub_100F67124()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170EF60);
  uint64_t v1 = sub_100010324(v0, (uint64_t)qword_10170EF60);
  if (qword_101636EE8 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100010324(v0, (uint64_t)qword_10170E828);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100F671EC(uint64_t a1, uint64_t a2)
{
  v3[17] = a2;
  v3[18] = v2;
  v3[16] = a1;
  sub_10000588C((uint64_t *)&unk_101665590);
  uint64_t v4 = swift_task_alloc();
  v3[19] = v4;
  swift_defaultActor_initialize();
  *(void *)(v2 + 144) = _swiftEmptyDictionarySingleton;
  *(void *)(v2 + 152) = 0;
  type metadata accessor for CentralManager();
  sub_10000588C((uint64_t *)&unk_101666890);
  uint64_t v5 = type metadata accessor for CentralManager.Options();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_101342130;
  static CentralManager.Options.allowDuplicates.getter();
  v3[15] = v7;
  sub_100F75C30((unint64_t *)&unk_1016655A0, 255, (void (*)(uint64_t))&type metadata accessor for CentralManager.Options);
  sub_10000588C((uint64_t *)&unk_1016668A0);
  sub_100062734((unint64_t *)&unk_1016655B0, (uint64_t *)&unk_1016668A0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
  uint64_t v8 = (void *)swift_task_alloc();
  v3[20] = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_100F67444;
  return CentralManager.__allocating_init(options:)(v4);
}

uint64_t sub_100F67444(uint64_t a1)
{
  uint64_t v3 = (void *)*v1;
  uint64_t v4 = (long long *)(*v1 + 56);
  uint64_t v5 = *(void *)(*v1 + 144);
  uint64_t v6 = *(void *)(*v1 + 128);
  uint64_t v7 = *v1;
  swift_task_dealloc();
  *(void *)(v5 + 128) = a1;
  *(void *)(v5 + 136) = v6;
  uint64_t v8 = qword_1016375E8;
  swift_retain();
  if (v8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, (uint64_t)v4, (uint64_t *)&unk_101638D30);
  if (v3[10])
  {
    sub_10001CEB0(v4, (uint64_t)(v3 + 2));
    sub_10001CD44(v3 + 2, v3[5]);
    uint64_t v11 = (uint64_t (*)(void))((char *)&dword_101639198 + dword_101639198);
    uint64_t v10 = (void *)swift_task_alloc();
    v3[21] = v10;
    *uint64_t v10 = v7;
    v10[1] = sub_100F67660;
    return v11();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100F67660(uint64_t a1)
{
  uint64_t v3 = *v1 + 16;
  uint64_t v4 = (void *)*v1;
  v4[22] = a1;
  swift_task_dealloc();
  if (a1)
  {
    uint64_t v5 = v4[17];
    uint64_t v6 = v4[18];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v3);
    *(void *)(v6 + 112) = a1;
    *(void *)(v6 + 120) = v5;
    swift_retain();
    return _swift_task_switch(sub_100F679AC, v6, 0);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v3);
    if (qword_101637228 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100010324(v7, (uint64_t)qword_10170EF60);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Missing BeaconKeyService!", v10, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for BeaconScanner.Error(0);
    sub_100F75C30(&qword_101665498, 255, (void (*)(uint64_t))type metadata accessor for BeaconScanner.Error);
    swift_allocError();
    uint64_t v12 = v11;
    uint64_t v13 = sub_10000588C((uint64_t *)&unk_1016654A0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 2, 2, v13);
    swift_willThrow();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    type metadata accessor for BeaconScanner();
    swift_defaultActor_destroy();
    swift_release();
    swift_release();
    swift_deallocPartialClassInstance();
    swift_task_dealloc();
    unint64_t v14 = (uint64_t (*)(void))v4[1];
    return v14();
  }
}

uint64_t sub_100F679AC()
{
  swift_release();
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 144);
  return v1(v2);
}

uint64_t sub_100F67A2C(char a1)
{
  *(void *)(v2 + 24) = v1;
  *(unsigned char *)(v2 + 232) = a1;
  *(void *)(v2 + 32) = *v1;
  sub_10000588C(&qword_10164DBB0);
  *(void *)(v2 + 40) = swift_task_alloc();
  uint64_t v3 = sub_10000588C((uint64_t *)&unk_1016665C0);
  *(void *)(v2 + 48) = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  *(void *)(v2 + 56) = v4;
  *(void *)(v2 + 64) = *(void *)(v4 + 64);
  *(void *)(v2 + 72) = swift_task_alloc();
  *(void *)(v2 + 80) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for ScanMode();
  *(void *)(v2 + 88) = v5;
  *(void *)(v2 + 96) = *(void *)(v5 - 8);
  *(void *)(v2 + 104) = swift_task_alloc();
  uint64_t v6 = sub_10000588C(&qword_101665490);
  *(void *)(v2 + 112) = v6;
  *(void *)(v2 + 120) = *(void *)(v6 - 8);
  *(void *)(v2 + 128) = swift_task_alloc();
  *(void *)(v2 + 136) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for CentralManager.State();
  *(void *)(v2 + 144) = v7;
  *(void *)(v2 + 152) = *(void *)(v7 - 8);
  *(void *)(v2 + 160) = swift_task_alloc();
  return _swift_task_switch(sub_100F67C8C, v1, 0);
}

uint64_t sub_100F67C8C()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  uint64_t v3 = swift_allocObject();
  v0[21] = v3;
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc();
  v0[22] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100F67D84;
  return XPCSession.proxy(errorHandler:)(v0 + 2, sub_100F75C08, v3);
}

uint64_t sub_100F67D84()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 24);
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100F67EB0, v1, 0);
}

uint64_t sub_100F67EB0()
{
  uint64_t v1 = v0[2];
  v0[23] = v1;
  if (v1)
  {
    uint64_t v3 = v0[19];
    uint64_t v2 = v0[20];
    uint64_t v4 = v0[18];
    v0[24] = *(void *)(v0[3] + 128);
    (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v2, enum case for CentralManager.State.poweredOn(_:), v4);
    uint64_t v5 = (void *)swift_task_alloc();
    v0[25] = v5;
    uint64_t v6 = type metadata accessor for CentralManager();
    uint64_t v7 = sub_100F75C30(&qword_101639A90, 255, (void (*)(uint64_t))&type metadata accessor for CentralManager);
    void *v5 = v0;
    v5[1] = sub_100F6811C;
    uint64_t v8 = v0[20];
    return CentralManagerProtocol.await(state:)(v8, v6, v7);
  }
  else
  {
    type metadata accessor for BeaconScanner.Error(0);
    sub_100F75C30(&qword_101665498, 255, (void (*)(uint64_t))type metadata accessor for BeaconScanner.Error);
    swift_allocError();
    uint64_t v10 = v9;
    uint64_t v11 = sub_10000588C((uint64_t *)&unk_1016654A0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, 1, 2, v11);
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = (uint64_t (*)(void))v0[1];
    return v12();
  }
}

uint64_t sub_100F6811C()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 208) = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[20];
  uint64_t v4 = v2[19];
  uint64_t v5 = v2[18];
  uint64_t v6 = v2[3];
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0) {
    uint64_t v7 = sub_100F68878;
  }
  else {
    uint64_t v7 = sub_100F68298;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_100F68298()
{
  uint64_t v2 = v0[12];
  uint64_t v1 = v0[13];
  uint64_t v3 = v0[11];
  uint64_t v4 = enum case for ScanUseCase.beaconScan(_:);
  uint64_t v5 = type metadata accessor for ScanUseCase();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 104))(v1, v4, v5);
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for ScanMode.useCase(_:), v3);
  uint64_t v10 = (char *)&async function pointer to dispatch thunk of CentralManager.scanForPeripherals(scanMode:garbageCollectInterval:)
      + async function pointer to dispatch thunk of CentralManager.scanForPeripherals(scanMode:garbageCollectInterval:);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[27] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_100F683D8;
  uint64_t v7 = v0[17];
  uint64_t v8 = v0[13];
  return ((uint64_t (*)(uint64_t, uint64_t, unint64_t, void))v10)(v7, v8, 0xD02AB486CEDC0000, 0);
}

uint64_t sub_100F683D8()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 224) = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[13];
  uint64_t v4 = v2[12];
  uint64_t v5 = v2[11];
  uint64_t v6 = v2[3];
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0) {
    uint64_t v7 = sub_100F6893C;
  }
  else {
    uint64_t v7 = sub_100F68554;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_100F68554()
{
  uint64_t v24 = *(void *)(v0 + 184);
  uint64_t v25 = *(void *)(v0 + 136);
  uint64_t v21 = *(void *)(v0 + 120);
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v4 = *(void *)(v0 + 48);
  uint64_t v18 = v5;
  uint64_t v19 = *(void *)(v0 + 64);
  uint64_t v6 = *(void *)(v0 + 24);
  uint64_t v23 = *(void *)(v0 + 32);
  char v22 = *(unsigned char *)(v0 + 232);
  uint64_t v20 = *(void *)(v0 + 112);
  (*(void (**)(void))(v21 + 16))(*(void *)(v0 + 128));
  type metadata accessor for Peripheral();
  sub_100062734(&qword_101639C98, &qword_101665490);
  uint64_t v17 = v2;
  AsyncCompactMapSequence.init(_:transform:)();
  uint64_t v7 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v5, 1, 1, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v2, v4);
  uint64_t v9 = sub_100F75C30(&qword_1016654C8, v8, (void (*)(uint64_t))type metadata accessor for BeaconScanner);
  unint64_t v10 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v11 = (v10 + v19 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v6;
  *(void *)(v12 + 24) = v9;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v12 + v10, v1, v4);
  unint64_t v13 = v12 + ((v10 + v19 + 7) & 0xFFFFFFFFFFFFFFF8);
  *(void *)unint64_t v13 = v6;
  *(unsigned char *)(v13 + 8) = v22;
  *(void *)(v12 + v11) = v24;
  *(void *)(v12 + ((v11 + 15) & 0xFFFFFFFFFFFFFFF8)) = v23;
  swift_retain_n();
  uint64_t v14 = sub_100885EBC(v18, (uint64_t)&unk_1016654D0, v12);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v17, v4);
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v25, v20);
  *(void *)(v6 + 152) = v14;
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
  return v15();
}

uint64_t sub_100F68878()
{
  swift_unknownObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100F6893C()
{
  swift_unknownObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100F68A00(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101637228 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100010324(v6, (uint64_t)qword_10170EF60);
  swift_errorRetain();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    unint64_t v10 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 138543362;
    uint64_t v11 = _convertErrorToNSError(_:)();
    v15[1] = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *unint64_t v10 = v11;
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "XPC error: %{public}@!", v9, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
  }

  uint64_t v12 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v5, 1, 1, v12);
  unint64_t v13 = (void *)swift_allocObject();
  v13[2] = 0;
  v13[3] = 0;
  v13[4] = a2;
  swift_retain();
  sub_1008F5E44((uint64_t)v5, (uint64_t)&unk_101665580, (uint64_t)v13);
  return swift_release();
}

uint64_t sub_100F68C6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return _swift_task_switch(sub_100F68C8C, a4, 0);
}

uint64_t sub_100F68C8C()
{
  sub_100F6C6E4();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100F68CEC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v3;
  *(unsigned char *)(v2 + 32) = *((unsigned char *)a2 + 8);
  return _swift_task_switch(sub_100F68D18, 0, 0);
}

uint64_t sub_100F68D18()
{
  if (*(unsigned char *)(v0 + 32)) {
    uint64_t v1 = 0;
  }
  else {
    uint64_t v1 = swift_retain();
  }
  **(void **)(v0 + 16) = v1;
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100F68D90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7)
{
  *(void *)(v7 + 56) = a5;
  *(void *)(v7 + 64) = a7;
  *(unsigned char *)(v7 + 408) = a6;
  *(void *)(v7 + 48) = a4;
  uint64_t v9 = sub_10000588C(&qword_10163D210);
  *(void *)(v7 + 72) = v9;
  *(void *)(v7 + 80) = *(void *)(v9 - 8);
  *(void *)(v7 + 88) = swift_task_alloc();
  *(void *)(v7 + 96) = type metadata accessor for DetailedDiscoveredObject(0);
  *(void *)(v7 + 104) = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_1016654E0);
  *(void *)(v7 + 112) = swift_task_alloc();
  uint64_t v10 = sub_10000588C(&qword_101639A70);
  *(void *)(v7 + 120) = v10;
  *(void *)(v7 + 128) = *(void *)(v10 - 8);
  *(void *)(v7 + 136) = swift_task_alloc();
  sub_10000588C(&qword_1016653B0);
  *(void *)(v7 + 144) = swift_task_alloc();
  *(void *)(v7 + 152) = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_1016654F0);
  *(void *)(v7 + 160) = swift_task_alloc();
  *(void *)(v7 + 168) = swift_task_alloc();
  sub_10000588C(&qword_10163CE40);
  *(void *)(v7 + 176) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for DiscoveredObject(0);
  *(void *)(v7 + 184) = v11;
  *(void *)(v7 + 192) = *(void *)(v11 - 8);
  *(void *)(v7 + 200) = swift_task_alloc();
  *(void *)(v7 + 208) = sub_10000588C(&qword_101665490);
  *(void *)(v7 + 216) = swift_task_alloc();
  sub_10000588C(&qword_101665500);
  *(void *)(v7 + 224) = swift_task_alloc();
  uint64_t v12 = sub_10000588C(&qword_101639C78);
  *(void *)(v7 + 232) = v12;
  *(void *)(v7 + 240) = *(void *)(v12 - 8);
  *(void *)(v7 + 248) = swift_task_alloc();
  return _swift_task_switch(sub_100F690F0, a5, 0);
}

uint64_t sub_100F690F0()
{
  sub_10000588C((uint64_t *)&unk_1016665C0);
  AsyncCompactMapSequence.base.getter();
  sub_100062734(&qword_101639C98, &qword_101665490);
  dispatch thunk of AsyncSequence.makeAsyncIterator()();
  AsyncCompactMapSequence.transform.getter();
  v0[32] = type metadata accessor for Peripheral();
  AsyncCompactMapSequence.Iterator.init(_:transform:)();
  uint64_t v2 = sub_100F75C30(&qword_1016654C8, v1, (void (*)(uint64_t))type metadata accessor for BeaconScanner);
  v0[33] = v2;
  uint64_t v3 = v0[7];
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1016665F0 + dword_1016665F0);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[34] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100F692A4;
  return v6(v3, v2);
}

uint64_t sub_100F692A4(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 280) = a1;
  *(void *)(v4 + 288) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 56);
  if (v1) {
    uint64_t v6 = sub_100F6AA88;
  }
  else {
    uint64_t v6 = sub_100F693D8;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_100F693D8()
{
  if (!v0[35])
  {
LABEL_8:
    (*(void (**)(void, void))(v0[30] + 8))(v0[31], v0[29]);
    if (qword_101637228 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100010324(v5, (uint64_t)qword_10170EF60);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Done scanning", v8, 2u);
      swift_slowDealloc();
    }
    uint64_t v9 = v0[8];

    uint64_t v10 = swift_allocObject();
    v0[48] = v10;
    *(void *)(v10 + 16) = v9;
    swift_unknownObjectRetain();
    uint64_t v11 = (void *)swift_task_alloc();
    v0[49] = v11;
    *uint64_t v11 = v0;
    v11[1] = sub_100F6A854;
    return withTimeout<A>(_:block:)(v11, 1000000000000000000, 0, &unk_101665510, v10, (char *)&type metadata for () + 8);
  }
  if (static Task<>.isCancelled.getter())
  {
    if (qword_101637228 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_100010324(v1, (uint64_t)qword_10170EF60);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Task cancelled!", v4, 2u);
      swift_slowDealloc();
    }
    swift_release();

    goto LABEL_8;
  }
  sub_100F75C30(&qword_10165E890, 255, (void (*)(uint64_t))&type metadata accessor for Peripheral);
  uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter();
  v0[37] = v13;
  v0[38] = v12;
  return _swift_task_switch(sub_100F69704, v13, v12);
}

uint64_t sub_100F69704()
{
  uint64_t v1 = *(void *)(v0 + 56);
  *(void *)(v0 + 312) = dispatch thunk of Peripheral.advertisementData.getter();
  return _swift_task_switch(sub_100F69774, v1, 0);
}

uint64_t sub_100F69774()
{
  uint64_t v21 = v0;
  uint64_t v1 = v0[39];
  if (v1)
  {
    v0[40] = sub_1006551F8(v1);
    uint64_t v2 = v0[37];
    uint64_t v3 = v0[38];
    return _swift_task_switch(sub_100F69A8C, v2, v3);
  }
  else
  {
    if (qword_101637228 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_10170EF60);
    swift_retain_n();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = v0[10];
      uint64_t v8 = v0[11];
      uint64_t v9 = v0[9];
      os_log_type_t type = v6;
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136446210;
      Peripheral.id.getter();
      sub_100062734(&qword_10163B810, &qword_10163D210);
      uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v13 = v12;
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
      v0[3] = sub_1008FA0F0(v11, v13, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, type, "Missing advertisementData for %{public}s!", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();
    }
    else
    {

      swift_release_n();
    }
    uint64_t v14 = v0[33];
    uint64_t v15 = v0[7];
    uint64_t v19 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1016665F0 + dword_1016665F0);
    uint64_t v16 = (void *)swift_task_alloc();
    v0[34] = v16;
    *uint64_t v16 = v0;
    v16[1] = sub_100F692A4;
    return v19(v15, v14);
  }
}

uint64_t sub_100F69A8C()
{
  uint64_t v1 = *(void *)(v0 + 56);
  *(void *)(v0 + 328) = dispatch thunk of Peripheral.rssi.getter();
  *(unsigned char *)(v0 + 409) = v2;
  return _swift_task_switch(sub_100F69B00, v1, 0);
}

uint64_t sub_100F69B00()
{
  uint64_t v33 = v0;
  if (*(unsigned char *)(v0 + 409)) {
    uint64_t v1 = 0;
  }
  else {
    uint64_t v1 = *(void *)(v0 + 328);
  }
  if (v1 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_18;
  }
  if (v1 > 0x7FFFFFFF)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v2 = *(void *)(v0 + 184);
  uint64_t v3 = *(void *)(v0 + 192);
  uint64_t v4 = *(void *)(v0 + 176);
  sub_1002612D4(*(void *)(v0 + 320), v1, v4);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2) == 1)
  {
    sub_10001DAB4(*(void *)(v0 + 176), &qword_10163CE40);
    if (qword_101637228 == -1)
    {
LABEL_8:
      uint64_t v5 = type metadata accessor for Logger();
      sub_100010324(v5, (uint64_t)qword_10170EF60);
      swift_retain_n();
      swift_bridgeObjectRetain();
      os_log_type_t v6 = Logger.logObject.getter();
      os_log_type_t v7 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v6, v7))
      {
        os_log_type_t typea = v7;
        uint64_t v8 = *(void *)(v0 + 80);
        uint64_t v9 = *(void *)(v0 + 88);
        uint64_t v10 = *(void *)(v0 + 72);
        uint64_t v11 = swift_slowAlloc();
        uint64_t v32 = swift_slowAlloc();
        *(_DWORD *)uint64_t v11 = 136446466;
        Peripheral.id.getter();
        sub_100062734(&qword_10163B810, &qword_10163D210);
        uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v14 = v13;
        (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v10);
        *(void *)(v0 + 32) = sub_1008FA0F0(v12, v14, &v32);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v11 + 12) = 2080;
        swift_bridgeObjectRetain();
        sub_10000588C(&qword_101651CF0);
        uint64_t v15 = Dictionary.description.getter();
        unint64_t v17 = v16;
        swift_bridgeObjectRelease();
        *(void *)(v0 + 40) = sub_1008FA0F0(v15, v17, &v32);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v6, typea, "Could not parse advertisementData for %{public}s: %s", (uint8_t *)v11, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        swift_release();
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_release_n();
      }
      uint64_t v27 = *(void *)(v0 + 264);
      uint64_t v28 = *(void *)(v0 + 56);
      os_log_type_t type = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1016665F0 + dword_1016665F0);
      unint64_t v29 = (void *)swift_task_alloc();
      *(void *)(v0 + 272) = v29;
      *unint64_t v29 = v0;
      v29[1] = sub_100F692A4;
      return type(v28, v27);
    }
LABEL_19:
    swift_once();
    goto LABEL_8;
  }
  uint64_t v18 = *(void *)(v0 + 200);
  uint64_t v19 = *(void *)(v0 + 176);
  uint64_t v20 = *(void *)(v0 + 184);
  swift_bridgeObjectRelease();
  sub_100F75FBC(v19, v18, type metadata accessor for DiscoveredObject);
  uint64_t v21 = (uint64_t *)(v18 + *(int *)(v20 + 36));
  uint64_t v22 = *v21;
  *(void *)(v0 + 336) = *v21;
  uint64_t v23 = v21[1];
  *(void *)(v0 + 344) = v23;
  sub_1001A1790(v22, v23);
  uint64_t v24 = (void *)swift_task_alloc();
  *(void *)(v0 + 352) = v24;
  *uint64_t v24 = v0;
  v24[1] = sub_100F69FC4;
  uint64_t v25 = *(void *)(v0 + 168);
  return sub_100F6CE80(v25, v22, v23);
}

uint64_t sub_100F69FC4()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 360) = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[43];
  uint64_t v4 = v2[42];
  uint64_t v5 = v2[7];
  sub_1001A1AD8(v4, v3);
  if (v0) {
    os_log_type_t v6 = sub_100F6AD10;
  }
  else {
    os_log_type_t v6 = sub_100F6A120;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_100F6A120()
{
  int v1 = *(unsigned __int8 *)(v0 + 408);
  sub_10001D074(*(void *)(v0 + 168), *(void *)(v0 + 160), (uint64_t *)&unk_1016654F0);
  uint64_t v2 = *(void *)(v0 + 160);
  if (v1 != 1)
  {
    os_log_type_t v6 = (uint64_t *)&unk_1016654F0;
    uint64_t v7 = *(void *)(v0 + 160);
LABEL_13:
    sub_10001DAB4(v7, v6);
    goto LABEL_14;
  }
  uint64_t v3 = type metadata accessor for BeaconDetails(0);
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48))(v2, 1, v3);
  sub_10001DAB4(v2, (uint64_t *)&unk_1016654F0);
  if (v4 == 1)
  {
    int v5 = (*(unsigned __int8 *)(*(void *)(v0 + 200) + *(int *)(*(void *)(v0 + 184) + 44)) >> 4) & 3;
    if (v5 == 2 || v5 == 3)
    {
      uint64_t v8 = *(void *)(v0 + 120);
      uint64_t v9 = *(void *)(v0 + 128);
      uint64_t v10 = *(void *)(v0 + 112);
      type metadata accessor for Service();
      Identifier.init(stringLiteral:)();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v10, 0, 1, v8);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v10, 1, v8) != 1)
      {
        uint64_t v11 = *(void *)(v0 + 280);
        (*(void (**)(void, void, void))(*(void *)(v0 + 128) + 32))(*(void *)(v0 + 136), *(void *)(v0 + 112), *(void *)(v0 + 120));
        uint64_t v12 = (void *)swift_task_alloc();
        *(void *)(v0 + 368) = v12;
        *uint64_t v12 = v0;
        v12[1] = sub_100F6A53C;
        uint64_t v14 = *(void *)(v0 + 136);
        uint64_t v13 = *(void *)(v0 + 144);
        return sub_100F6B52C(v13, v11, v14);
      }
    }
    else
    {
      (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 128) + 56))(*(void *)(v0 + 112), 1, 1, *(void *)(v0 + 120));
    }
    uint64_t v7 = *(void *)(v0 + 112);
    os_log_type_t v6 = (uint64_t *)&unk_1016654E0;
    goto LABEL_13;
  }
LABEL_14:
  uint64_t v16 = *(void *)(v0 + 152);
  uint64_t v17 = type metadata accessor for AccessoryMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v16, 1, 1, v17);
  uint64_t v18 = *(void *)(v0 + 200);
  uint64_t v19 = *(void *)(v0 + 168);
  uint64_t v20 = *(void *)(v0 + 152);
  uint64_t v22 = *(void *)(v0 + 96);
  uint64_t v21 = *(void *)(v0 + 104);
  uint64_t v23 = *(void **)(v0 + 64);
  sub_100F76084(v18, v21, type metadata accessor for DiscoveredObject);
  sub_10001D074(v20, v21 + *(int *)(v22 + 24), &qword_1016653B0);
  sub_10001D074(v19, v21 + *(int *)(v22 + 20), (uint64_t *)&unk_1016654F0);
  id v24 = sub_100F760EC(v21);
  [v23 discoveredObject:v24];
  swift_release();

  sub_100F76024(v21, type metadata accessor for DetailedDiscoveredObject);
  sub_10001DAB4(v20, &qword_1016653B0);
  sub_10001DAB4(v19, (uint64_t *)&unk_1016654F0);
  sub_100F76024(v18, type metadata accessor for DiscoveredObject);
  uint64_t v25 = *(void *)(v0 + 264);
  uint64_t v26 = *(void *)(v0 + 56);
  uint64_t v28 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1016665F0 + dword_1016665F0);
  uint64_t v27 = (void *)swift_task_alloc();
  *(void *)(v0 + 272) = v27;
  *uint64_t v27 = v0;
  v27[1] = sub_100F692A4;
  return v28(v26, v25);
}

uint64_t sub_100F6A53C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 376) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 56);
  if (v0) {
    int v4 = sub_100F6AFC8;
  }
  else {
    int v4 = sub_100F6A668;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100F6A668()
{
  uint64_t v2 = v0[18];
  uint64_t v1 = v0[19];
  (*(void (**)(void, void))(v0[16] + 8))(v0[17], v0[15]);
  sub_10001D608(v2, v1, &qword_1016653B0);
  uint64_t v3 = v0[25];
  uint64_t v4 = v0[21];
  uint64_t v5 = v0[19];
  uint64_t v7 = v0[12];
  uint64_t v6 = v0[13];
  uint64_t v8 = (void *)v0[8];
  sub_100F76084(v3, v6, type metadata accessor for DiscoveredObject);
  sub_10001D074(v5, v6 + *(int *)(v7 + 24), &qword_1016653B0);
  sub_10001D074(v4, v6 + *(int *)(v7 + 20), (uint64_t *)&unk_1016654F0);
  id v9 = sub_100F760EC(v6);
  [v8 discoveredObject:v9];
  swift_release();

  sub_100F76024(v6, type metadata accessor for DetailedDiscoveredObject);
  sub_10001DAB4(v5, &qword_1016653B0);
  sub_10001DAB4(v4, (uint64_t *)&unk_1016654F0);
  sub_100F76024(v3, type metadata accessor for DiscoveredObject);
  uint64_t v10 = v0[33];
  uint64_t v11 = v0[7];
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1016665F0 + dword_1016665F0);
  uint64_t v12 = (void *)swift_task_alloc();
  v0[34] = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_100F692A4;
  return v14(v11, v10);
}

uint64_t sub_100F6A854()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 400) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 56);
    uint64_t v4 = sub_100F6B2B4;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 56);
    swift_release();
    uint64_t v4 = sub_100F6A97C;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100F6A97C()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100F6AA88()
{
  (*(void (**)(void, void))(v0[30] + 8))(v0[31], v0[29]);
  if (qword_101637228 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170EF60);
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138543362;
    uint64_t v6 = _convertErrorToNSError(_:)();
    v0[2] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v5 = v6;
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Error during scan: %{public}@", v4, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100F6AD10()
{
  uint64_t v2 = v0[30];
  uint64_t v1 = v0[31];
  uint64_t v3 = v0[29];
  uint64_t v4 = v0[25];
  swift_release();
  sub_100F76024(v4, type metadata accessor for DiscoveredObject);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  if (qword_101637228 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170EF60);
  swift_errorRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138543362;
    uint64_t v10 = _convertErrorToNSError(_:)();
    v0[2] = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v9 = v10;
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Error during scan: %{public}@", v8, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_100F6AFC8()
{
  uint64_t v2 = v0[30];
  uint64_t v1 = v0[31];
  uint64_t v3 = v0[29];
  uint64_t v4 = v0[25];
  uint64_t v5 = v0[21];
  uint64_t v7 = v0[16];
  uint64_t v6 = v0[17];
  uint64_t v8 = v0[15];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  sub_10001DAB4(v5, (uint64_t *)&unk_1016654F0);
  sub_100F76024(v4, type metadata accessor for DiscoveredObject);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  if (qword_101637228 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_100010324(v9, (uint64_t)qword_10170EF60);
  swift_errorRetain();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 138543362;
    uint64_t v14 = _convertErrorToNSError(_:)();
    v0[2] = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v13 = v14;
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Error during scan: %{public}@", v12, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v15 = (uint64_t (*)(void))v0[1];
  return v15();
}

uint64_t sub_100F6B2B4()
{
  swift_release();
  if (qword_101637228 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170EF60);
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138543362;
    uint64_t v6 = _convertErrorToNSError(_:)();
    *(void *)(v0 + 16) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v5 = v6;
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Error during scan: %{public}@", v4, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_100F6B52C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[8] = a3;
  v4[9] = v3;
  v4[6] = a1;
  v4[7] = a2;
  v4[10] = *v3;
  v4[11] = sub_10000588C(&qword_1016653B0);
  v4[12] = swift_task_alloc();
  v4[13] = swift_task_alloc();
  v4[14] = swift_task_alloc();
  sub_10000588C(&qword_10163CB88);
  v4[15] = swift_task_alloc();
  uint64_t v5 = sub_10000588C(&qword_10163D210);
  v4[16] = v5;
  v4[17] = *(void *)(v5 - 8);
  v4[18] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for BeaconScanner.AISLookupState(0);
  v4[19] = v6;
  v4[20] = *(void *)(v6 - 8);
  v4[21] = swift_task_alloc();
  v4[22] = swift_task_alloc();
  type metadata accessor for Peripheral();
  sub_100F75C30(&qword_10165E890, 255, (void (*)(uint64_t))&type metadata accessor for Peripheral);
  uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100F6B770, v8, v7);
}

uint64_t sub_100F6B770()
{
  uint64_t v1 = *(void *)(v0 + 72);
  *(unsigned char *)(v0 + 240) = Peripheral.isConnectable.getter() & 1;
  return _swift_task_switch(sub_100F6B7E4, v1, 0);
}

uint64_t sub_100F6B7E4()
{
  if (*(unsigned char *)(v0 + 240) == 1)
  {
    uint64_t v1 = *(void *)(v0 + 72);
    Peripheral.id.getter();
    swift_beginAccess();
    uint64_t v2 = *(void *)(v1 + 144);
    if (*(void *)(v2 + 16))
    {
      uint64_t v3 = *(void *)(v0 + 144);
      swift_bridgeObjectRetain();
      unint64_t v4 = sub_100725314(v3);
      uint64_t v5 = *(void *)(v0 + 152);
      uint64_t v6 = *(void *)(v0 + 160);
      uint64_t v7 = *(void *)(v0 + 120);
      if (v8)
      {
        sub_100F76084(*(void *)(v2 + 56) + *(void *)(v6 + 72) * v4, *(void *)(v0 + 120), type metadata accessor for BeaconScanner.AISLookupState);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v7, 0, 1, v5);
      }
      else
      {
        (*(void (**)(void, uint64_t, uint64_t, uint64_t))(v6 + 56))(*(void *)(v0 + 120), 1, 1, v5);
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 160) + 56))(*(void *)(v0 + 120), 1, 1, *(void *)(v0 + 152));
    }
    uint64_t v15 = *(void *)(v0 + 152);
    uint64_t v16 = *(void *)(v0 + 160);
    uint64_t v17 = *(void *)(v0 + 120);
    (*(void (**)(void, void))(*(void *)(v0 + 136) + 8))(*(void *)(v0 + 144), *(void *)(v0 + 128));
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v17, 1, v15) == 1)
    {
      uint64_t v18 = *(void *)(v0 + 72);
      uint64_t v19 = *(void *)(v0 + 80);
      long long v40 = *(_OWORD *)(v0 + 56);
      sub_10001DAB4(*(void *)(v0 + 120), &qword_10163CB88);
      uint64_t v21 = sub_100F75C30(&qword_1016654C8, v20, (void (*)(uint64_t))type metadata accessor for BeaconScanner);
      uint64_t v22 = swift_task_alloc();
      *(void *)(v0 + 216) = v22;
      *(void *)(v22 + 16) = v18;
      *(_OWORD *)(v22 + 24) = v40;
      *(void *)(v22 + 40) = v19;
      uint64_t v23 = (void *)swift_task_alloc();
      *(void *)(v0 + 224) = v23;
      *uint64_t v23 = v0;
      v23[1] = sub_100F6C1B4;
      uint64_t v24 = *(void *)(v0 + 88);
      uint64_t v25 = *(void *)(v0 + 48);
      uint64_t v26 = sub_100F76574;
LABEL_25:
      return withCheckedThrowingContinuation<A>(isolation:function:_:)(v25, v18, v21, 0xD000000000000028, 0x800000010141B830, v26, v22, v24);
    }
    uint64_t v27 = *(void *)(v0 + 168);
    uint64_t v28 = *(void *)(v0 + 176);
    sub_100F75FBC(*(void *)(v0 + 120), v28, type metadata accessor for BeaconScanner.AISLookupState);
    sub_100F76084(v28, v27, type metadata accessor for BeaconScanner.AISLookupState);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      swift_bridgeObjectRelease();
      if (qword_101637228 != -1) {
        swift_once();
      }
      uint64_t v33 = type metadata accessor for Logger();
      *(void *)(v0 + 184) = sub_100010324(v33, (uint64_t)qword_10170EF60);
      uint64_t v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v34, v35))
      {
        uint64_t v36 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v36 = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "Already pending -- waiting for continuation", v36, 2u);
        swift_slowDealloc();
      }
      uint64_t v18 = *(void *)(v0 + 72);
      uint64_t v37 = *(void *)(v0 + 56);

      uint64_t v21 = sub_100F75C30(&qword_1016654C8, v38, (void (*)(uint64_t))type metadata accessor for BeaconScanner);
      uint64_t v22 = swift_task_alloc();
      *(void *)(v0 + 192) = v22;
      *(void *)(v22 + 16) = v18;
      *(void *)(v22 + 24) = v37;
      unint64_t v39 = (void *)swift_task_alloc();
      *(void *)(v0 + 200) = v39;
      *unint64_t v39 = v0;
      v39[1] = sub_100F6BE04;
      uint64_t v25 = *(void *)(v0 + 112);
      uint64_t v24 = *(void *)(v0 + 88);
      uint64_t v26 = sub_100F76580;
      goto LABEL_25;
    }
    uint64_t v29 = *(void *)(v0 + 168);
    uint64_t v30 = *(void *)(v0 + 48);
    sub_100F76024(*(void *)(v0 + 176), type metadata accessor for BeaconScanner.AISLookupState);
    sub_10001D608(v29, v30, &qword_1016653B0);
  }
  else
  {
    if (qword_101637228 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_100010324(v9, (uint64_t)qword_10170EF60);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Skipping metadata read since not connectable", v12, 2u);
      swift_slowDealloc();
    }
    uint64_t v13 = *(void *)(v0 + 48);

    uint64_t v14 = type metadata accessor for AccessoryMetadata(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v31 = *(uint64_t (**)(void))(v0 + 8);
  return v31();
}

uint64_t sub_100F6BE04()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 208) = v0;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 72);
  if (v0) {
    unint64_t v4 = sub_100F6C350;
  }
  else {
    unint64_t v4 = sub_100F6BF4C;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100F6BF4C()
{
  uint64_t v15 = v0;
  sub_10001D074(v0[14], v0[13], &qword_1016653B0);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v13 = v0[22];
    uint64_t v4 = v0[12];
    uint64_t v3 = v0[13];
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    sub_10001D074(v3, v4, &qword_1016653B0);
    uint64_t v6 = String.init<A>(describing:)();
    v0[5] = sub_1008FA0F0(v6, v7, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10001DAB4(v3, &qword_1016653B0);
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Continuation for pending resumed -- %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v8 = v13;
  }
  else
  {
    uint64_t v9 = v0[22];
    uint64_t v10 = v0[13];

    sub_10001DAB4(v10, &qword_1016653B0);
    uint64_t v8 = v9;
  }
  sub_100F76024(v8, type metadata accessor for BeaconScanner.AISLookupState);
  sub_10001D608(v0[14], v0[6], &qword_1016653B0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_100F6C1B4()
{
  os_log_type_t v2 = (void *)*v1;
  v2[29] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[9];
    return _swift_task_switch(sub_100F6C424, v3, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v2[1];
    return v4();
  }
}

uint64_t sub_100F6C350()
{
  sub_100F76024(*(void *)(v0 + 176), type metadata accessor for BeaconScanner.AISLookupState);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100F6C424()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100F6C4E4(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 120) = a2;
  return _swift_task_switch(sub_100F6C504, 0, 0);
}

uint64_t sub_100F6C504()
{
  uint64_t v1 = (void *)v0[15];
  v0[2] = v0;
  v0[3] = sub_100F6C5FC;
  uint64_t v2 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_100F6C6DC;
  v0[13] = &unk_1015FEF60;
  v0[14] = v2;
  [v1 discoveryFinished:0 completion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_100F6C5FC()
{
  return _swift_task_switch(sub_100771174, 0, 0);
}

uint64_t sub_100F6C6DC(uint64_t a1)
{
  return _swift_continuation_resume(*(void *)(a1 + 32));
}

uint64_t sub_100F6C6E4()
{
  uint64_t v1 = v0;
  if (qword_101637228 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100010324(v2, (uint64_t)qword_10170EF60);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Invalidating scanTask because client session was invalidated", v5, 2u);
    swift_slowDealloc();
  }

  if (*(void *)(v1 + 152))
  {
    swift_retain();
    sub_10000588C(&qword_101638D40);
    Task.cancel()();
    swift_release();
  }
  *(void *)(v1 + 152) = 0;

  return swift_release();
}

id sub_100F6C824(uint64_t a1)
{
  uint64_t v2 = sub_10000588C((uint64_t *)&unk_1016654F0);
  __chkstk_darwin(v2 - 8);
  os_log_type_t v4 = (char *)v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for BeaconDetails(0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DetailedDiscoveredObject(0);
  sub_10001D074(a1 + *(int *)(v9 + 20), (uint64_t)v4, (uint64_t *)&unk_1016654F0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_100F76024(a1, type metadata accessor for DetailedDiscoveredObject);
    sub_10001DAB4((uint64_t)v4, (uint64_t *)&unk_1016654F0);
    return 0;
  }
  sub_100F75FBC((uint64_t)v4, (uint64_t)v8, type metadata accessor for BeaconDetails);
  uint64_t v10 = &v8[*(int *)(type metadata accessor for BeaconKeyManager.IndexInformation(0) + 20)];
  uint64_t v11 = *((void *)v10 + 3);
  uint64_t v12 = *((void *)v10 + 4);
  sub_10001CD44(v10, v11);
  int v13 = sub_100EB7B8C(v11, v12);
  if (v13)
  {
    if (v13 != 1)
    {
      sub_100F76024(a1, type metadata accessor for DetailedDiscoveredObject);
      sub_100F76024((uint64_t)v8, type metadata accessor for BeaconDetails);
      return 0;
    }
    uint64_t v14 = 2;
  }
  else
  {
    uint64_t v14 = 1;
  }
  id v15 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  sub_10001CD44(v10, *((void *)v10 + 3));
  dispatch thunk of RawRepresentable.rawValue.getter();
  id v17 = [v15 initWithBeaconIdentifier:isa sequence:v14 index:v19[1]];

  sub_100F76024(a1, type metadata accessor for DetailedDiscoveredObject);
  sub_100F76024((uint64_t)v8, type metadata accessor for BeaconDetails);
  return v17;
}

id sub_100F6CAE0(uint64_t a1)
{
  uint64_t v2 = sub_10000588C(&qword_1016653B0);
  __chkstk_darwin(v2 - 8);
  os_log_type_t v4 = (char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = (int *)type metadata accessor for AccessoryMetadata(0);
  uint64_t v6 = *((void *)v5 - 1);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DetailedDiscoveredObject(0);
  sub_10001D074(a1 + *(int *)(v9 + 24), (uint64_t)v4, &qword_1016653B0);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v6 + 48))(v4, 1, v5) == 1)
  {
    sub_100F76024(a1, type metadata accessor for DetailedDiscoveredObject);
    sub_10001DAB4((uint64_t)v4, &qword_1016653B0);
    return 0;
  }
  else
  {
    sub_100F75FBC((uint64_t)v4, (uint64_t)v8, type metadata accessor for AccessoryMetadata);
    uint64_t v11 = (uint64_t *)&v8[v5[5]];
    uint64_t v12 = *v11;
    unint64_t v13 = v11[1];
    sub_1000361E0(*v11, v13);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_10001CFB8(v12, v13);
    swift_bridgeObjectRetain();
    NSString v15 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    NSString v16 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    sub_1009CD110();
    NSString v17 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    char v18 = v8[v5[9] + 4];
    NSString v36 = v15;
    uint64_t v37 = a1;
    Class v19 = isa;
    if ((v18 & 1) == 0) {
      sub_1009CD110();
    }
    NSString v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v21 = v5[12];
    uint64_t v22 = &v8[v5[11]];
    if (v22[8]) {
      uint64_t v23 = 0;
    }
    else {
      uint64_t v23 = *(void *)v22;
    }
    uint64_t v24 = &v8[v21];
    int v25 = *(_DWORD *)&v8[v21];
    if (v24[4]) {
      int v26 = 0;
    }
    else {
      int v26 = v25;
    }
    uint64_t v27 = v5[14];
    if (v8[v5[13]] == 4) {
      char v28 = 0;
    }
    else {
      char v28 = v8[v5[13]];
    }
    if (v8[v27] == 5) {
      char v29 = 0;
    }
    else {
      char v29 = v8[v27];
    }
    id v30 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    BYTE5(v35) = v29;
    BYTE4(v35) = v28;
    LODWORD(v35) = v26;
    Class v31 = v19;
    Class v32 = v19;
    uint64_t v33 = v36;
    id v10 = [v30 initWithProductData:v32 manufacturerName:v36 modelName:v16 firmwareVersion:v17 protocolVersion:v20 accessoryCategory:v23 batteryType:v35 batteryState:v35];

    sub_100F76024(v37, type metadata accessor for DetailedDiscoveredObject);
    sub_100F76024((uint64_t)v8, type metadata accessor for AccessoryMetadata);
  }
  return v10;
}

uint64_t sub_100F6CE80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[5] = a3;
  v4[6] = v3;
  v4[3] = a1;
  v4[4] = a2;
  v4[7] = sub_10000588C(&qword_101657910);
  v4[8] = swift_task_alloc();
  v4[9] = swift_task_alloc();
  v4[10] = swift_task_alloc();
  v4[11] = swift_task_alloc();
  v4[12] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  v4[13] = v5;
  v4[14] = *(void *)(v5 - 8);
  v4[15] = swift_task_alloc();
  v4[16] = swift_task_alloc();
  v4[17] = swift_task_alloc();
  return _swift_task_switch(sub_100F6CFC8, 0, 0);
}

uint64_t sub_100F6CFC8()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 48) + 112);
  *(void *)(v0 + 144) = v1;
  return _swift_task_switch(sub_100F6CFEC, v1, 0);
}

uint64_t sub_100F6CFEC(uint64_t (*a1)(), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(v3 + 144) + 136);
  *(void *)(v3 + 152) = v4;
  if (v4)
  {
    a1 = sub_100F6D018;
    a3 = 0;
  }
  else
  {
    __break(1u);
  }
  return _swift_task_switch(a1, v4, a3);
}

uint64_t sub_100F6D018()
{
  uint64_t v1 = v0[19];
  uint64_t v3 = v0[4];
  uint64_t v2 = v0[5];
  sub_10000588C((uint64_t *)&unk_101665470);
  sub_100F75C30(&qword_101652078, 255, (void (*)(uint64_t))type metadata accessor for BeaconKeyServiceBuilder);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[20] = v4;
  v4[2] = v1;
  v4[3] = v3;
  v4[4] = v2;
  uint64_t v5 = (void *)swift_task_alloc();
  v0[21] = v5;
  void *v5 = v0;
  v5[1] = sub_100F6D16C;
  return withTaskGroup<A, B>(of:returning:isolation:body:)(v0 + 2);
}

uint64_t sub_100F6D16C()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 152);
  return _swift_task_switch(sub_100F6D2A0, v2, 0);
}

uint64_t sub_100F6D2A0()
{
  *(void *)(v0 + 176) = *(void *)(v0 + 16);
  return _swift_task_switch(sub_100F6D2C4, 0, 0);
}

uint64_t sub_100F6D2C4()
{
  uint64_t v1 = v0[22];
  if (*(void *)(v1 + 16))
  {
    uint64_t v2 = *(unsigned __int8 *)(v0[14] + 80);
    sub_100F76084(v1 + ((v2 + 32) & ~v2), v0[12], type metadata accessor for BeaconKeyManager.IndexInformation);
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = 1;
  }
  uint64_t v4 = v0[13];
  uint64_t v5 = v0[14];
  uint64_t v6 = v0[12];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v6, v3, 1, v4);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  v0[23] = v7;
  v0[24] = (v5 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  if (v7(v6, 1, v4) == 1)
  {
    uint64_t v8 = v0[5];
    sub_10001DAB4(v0[12], &qword_101657910);
    uint64_t v9 = v0[5];
    uint64_t v10 = v0[6];
    uint64_t v11 = v0[4];
    if ((v8 & 0x2000000000000000) != 0)
    {
      uint64_t v12 = (void *)swift_allocObject();
      v0[25] = v12;
      v12[2] = v10;
      v12[3] = v11;
      v12[4] = v9 & 0xDFFFFFFFFFFFFFFFLL;
      sub_1001A1790(v11, v9);
      sub_1001A1790(v11, v9);
      swift_retain();
      uint64_t v23 = (void *)swift_task_alloc();
      v0[26] = v23;
      *uint64_t v23 = v0;
      v23[1] = sub_100F6D674;
      uint64_t v14 = v0[9];
      uint64_t v15 = v0[7];
      NSString v16 = sub_100F6ED1C;
    }
    else
    {
      uint64_t v12 = (void *)swift_allocObject();
      v0[27] = v12;
      v12[2] = v10;
      v12[3] = v11;
      v12[4] = v9;
      sub_1001A1790(v11, v9);
      sub_1001A1790(v11, v9);
      swift_retain();
      unint64_t v13 = (void *)swift_task_alloc();
      v0[28] = v13;
      *unint64_t v13 = v0;
      v13[1] = sub_100F6D93C;
      uint64_t v14 = v0[11];
      uint64_t v15 = v0[7];
      NSString v16 = sub_100F6ED2C;
    }
    return unsafeBlocking<A>(_:)(v14, v16, v12, v15);
  }
  else
  {
    uint64_t v17 = v0[17];
    uint64_t v18 = v0[3];
    sub_100F75FBC(v0[12], v17, type metadata accessor for BeaconKeyManager.IndexInformation);
    sub_100F75FBC(v17, v18, type metadata accessor for BeaconKeyManager.IndexInformation);
    uint64_t v19 = v0[3];
    uint64_t v20 = type metadata accessor for BeaconDetails(0);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v19, 0, 1, v20);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v21 = (uint64_t (*)(void))v0[1];
    return v21();
  }
}

uint64_t sub_100F6D674()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100F6D78C, 0, 0);
}

uint64_t sub_100F6D78C()
{
  uint64_t v1 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v0[23];
  uint64_t v2 = v0[13];
  uint64_t v4 = v0[8];
  uint64_t v3 = v0[9];
  sub_1001A1AD8(v0[4], v0[5]);
  sub_10001D608(v3, v4, &qword_101657910);
  if (v1(v4, 1, v2) == 1)
  {
    sub_10001DAB4(v0[8], &qword_101657910);
    uint64_t v5 = 1;
  }
  else
  {
    uint64_t v6 = v0[15];
    uint64_t v7 = v0[3];
    sub_100F75FBC(v0[8], v6, type metadata accessor for BeaconKeyManager.IndexInformation);
    sub_100F75FBC(v6, v7, type metadata accessor for BeaconKeyManager.IndexInformation);
    uint64_t v5 = 0;
  }
  uint64_t v8 = v0[3];
  uint64_t v9 = type metadata accessor for BeaconDetails(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, v5, 1, v9);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_100F6D93C()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100F6DA54, 0, 0);
}

uint64_t sub_100F6DA54()
{
  uint64_t v1 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v0[23];
  uint64_t v2 = v0[13];
  uint64_t v4 = v0[10];
  uint64_t v3 = v0[11];
  sub_1001A1AD8(v0[4], v0[5]);
  sub_10001D608(v3, v4, &qword_101657910);
  if (v1(v4, 1, v2) == 1)
  {
    sub_10001DAB4(v0[10], &qword_101657910);
    uint64_t v5 = 1;
  }
  else
  {
    uint64_t v6 = v0[16];
    uint64_t v7 = v0[3];
    sub_100F75FBC(v0[10], v6, type metadata accessor for BeaconKeyManager.IndexInformation);
    sub_100F75FBC(v6, v7, type metadata accessor for BeaconKeyManager.IndexInformation);
    uint64_t v5 = 0;
  }
  uint64_t v8 = v0[3];
  uint64_t v9 = type metadata accessor for BeaconDetails(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, v5, 1, v9);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_100F6DC04@<X0>(uint64_t a1@<X8>)
{
  sub_10000588C((uint64_t *)&unk_101665470);
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v2 = *(void *)(v7 + 16);
  uint64_t v3 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  uint64_t v4 = *(void *)(v3 - 8);
  if (v2)
  {
    sub_100F76084(v7+ ((*(unsigned __int8 *)(*(void *)(v3 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v3 - 8) + 80)), a1, type metadata accessor for BeaconKeyManager.IndexInformation);
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = 1;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(a1, v5, 1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100F6DD20()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for BeaconScanner()
{
  return self;
}

uint64_t *sub_100F6DDA4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = (int *)type metadata accessor for AccessoryMetadata(0);
      uint64_t v7 = *((void *)v6 - 1);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, int *))(v7 + 48))(a2, 1, v6))
      {
        uint64_t v8 = sub_10000588C(&qword_1016653B0);
        memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
      }
      else
      {
        uint64_t v10 = type metadata accessor for UUID();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
        uint64_t v11 = v6[5];
        uint64_t v12 = (uint64_t *)((char *)a1 + v11);
        unint64_t v13 = (uint64_t *)((char *)a2 + v11);
        uint64_t v14 = *v13;
        unint64_t v15 = v13[1];
        sub_1000361E0(*v13, v15);
        *uint64_t v12 = v14;
        v12[1] = v15;
        uint64_t v16 = v6[6];
        uint64_t v17 = (uint64_t *)((char *)a1 + v16);
        uint64_t v18 = (uint64_t *)((char *)a2 + v16);
        uint64_t v19 = v18[1];
        void *v17 = *v18;
        v17[1] = v19;
        uint64_t v20 = v6[7];
        uint64_t v21 = (uint64_t *)((char *)a1 + v20);
        uint64_t v22 = (uint64_t *)((char *)a2 + v20);
        uint64_t v23 = v22[1];
        *uint64_t v21 = *v22;
        v21[1] = v23;
        *(_DWORD *)((char *)a1 + v6[8]) = *(_DWORD *)((char *)a2 + v6[8]);
        uint64_t v24 = v6[9];
        int v25 = (char *)a1 + v24;
        int v26 = (char *)a2 + v24;
        *(_DWORD *)int v25 = *(_DWORD *)v26;
        v25[4] = v26[4];
        uint64_t v27 = v6[10];
        char v28 = (char *)a1 + v27;
        char v29 = (char *)a2 + v27;
        *(_OWORD *)char v28 = *(_OWORD *)v29;
        v28[16] = v29[16];
        uint64_t v30 = v6[11];
        Class v31 = (char *)a1 + v30;
        Class v32 = (char *)a2 + v30;
        v31[8] = v32[8];
        *(void *)Class v31 = *(void *)v32;
        uint64_t v33 = v6[12];
        uint64_t v34 = (char *)a1 + v33;
        uint64_t v35 = (char *)a2 + v33;
        *(_DWORD *)uint64_t v34 = *(_DWORD *)v35;
        v34[4] = v35[4];
        *((unsigned char *)a1 + v6[13]) = *((unsigned char *)a2 + v6[13]);
        *((unsigned char *)a1 + v6[14]) = *((unsigned char *)a2 + v6[14]);
        uint64_t v36 = v6[15];
        uint64_t v37 = (uint64_t *)((char *)a1 + v36);
        uint64_t v38 = (uint64_t *)((char *)a2 + v36);
        uint64_t v39 = v38[1];
        *uint64_t v37 = *v38;
        v37[1] = v39;
        long long v40 = *(void (**)(uint64_t *, void, uint64_t, int *))(v7 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v40(a1, 0, 1, v6);
      }
    }
    else
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_100F6E078(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = type metadata accessor for AccessoryMetadata(0);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(a1, 1, v2);
    if (result) {
      return result;
    }
    uint64_t v4 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
    sub_10001CFB8(*(void *)(a1 + *(int *)(v2 + 20)), *(void *)(a1 + *(int *)(v2 + 20) + 8));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return swift_bridgeObjectRelease();
}

void *sub_100F6E17C(void *a1, void *a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = (int *)type metadata accessor for AccessoryMetadata(0);
    uint64_t v5 = *((void *)v4 - 1);
    if ((*(unsigned int (**)(void *, uint64_t, int *))(v5 + 48))(a2, 1, v4))
    {
      uint64_t v6 = sub_10000588C(&qword_1016653B0);
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
    else
    {
      uint64_t v7 = type metadata accessor for UUID();
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
      uint64_t v8 = v4[5];
      uint64_t v9 = (void *)((char *)a1 + v8);
      uint64_t v10 = (void *)((char *)a2 + v8);
      uint64_t v11 = *v10;
      unint64_t v12 = v10[1];
      sub_1000361E0(*v10, v12);
      uint64_t *v9 = v11;
      v9[1] = v12;
      uint64_t v13 = v4[6];
      uint64_t v14 = (void *)((char *)a1 + v13);
      unint64_t v15 = (void *)((char *)a2 + v13);
      uint64_t v16 = v15[1];
      *uint64_t v14 = *v15;
      v14[1] = v16;
      uint64_t v17 = v4[7];
      uint64_t v18 = (void *)((char *)a1 + v17);
      uint64_t v19 = (void *)((char *)a2 + v17);
      uint64_t v20 = v19[1];
      *uint64_t v18 = *v19;
      v18[1] = v20;
      *(_DWORD *)((char *)a1 + v4[8]) = *(_DWORD *)((char *)a2 + v4[8]);
      uint64_t v21 = v4[9];
      uint64_t v22 = (char *)a1 + v21;
      uint64_t v23 = (char *)a2 + v21;
      *(_DWORD *)uint64_t v22 = *(_DWORD *)v23;
      v22[4] = v23[4];
      uint64_t v24 = v4[10];
      int v25 = (char *)a1 + v24;
      int v26 = (char *)a2 + v24;
      *(_OWORD *)int v25 = *(_OWORD *)v26;
      v25[16] = v26[16];
      uint64_t v27 = v4[11];
      char v28 = (char *)a1 + v27;
      char v29 = (char *)a2 + v27;
      v28[8] = v29[8];
      *(void *)char v28 = *(void *)v29;
      uint64_t v30 = v4[12];
      Class v31 = (char *)a1 + v30;
      Class v32 = (char *)a2 + v30;
      *(_DWORD *)Class v31 = *(_DWORD *)v32;
      v31[4] = v32[4];
      *((unsigned char *)a1 + v4[13]) = *((unsigned char *)a2 + v4[13]);
      *((unsigned char *)a1 + v4[14]) = *((unsigned char *)a2 + v4[14]);
      uint64_t v33 = v4[15];
      uint64_t v34 = (void *)((char *)a1 + v33);
      uint64_t v35 = (void *)((char *)a2 + v33);
      uint64_t v36 = v35[1];
      *uint64_t v34 = *v35;
      v34[1] = v36;
      uint64_t v37 = *(void (**)(void *, void, uint64_t, int *))(v5 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v37(a1, 0, 1, v4);
    }
  }
  else
  {
    *a1 = *a2;
    swift_bridgeObjectRetain();
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void *sub_100F6E400(void *a1, void *a2)
{
  if (a1 != a2)
  {
    sub_100F76024((uint64_t)a1, type metadata accessor for BeaconScanner.AISLookupState);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v4 = (int *)type metadata accessor for AccessoryMetadata(0);
      uint64_t v5 = *((void *)v4 - 1);
      if ((*(unsigned int (**)(void *, uint64_t, int *))(v5 + 48))(a2, 1, v4))
      {
        uint64_t v6 = sub_10000588C(&qword_1016653B0);
        memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
      }
      else
      {
        uint64_t v7 = type metadata accessor for UUID();
        (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
        uint64_t v8 = v4[5];
        uint64_t v9 = (void *)((char *)a1 + v8);
        uint64_t v10 = (void *)((char *)a2 + v8);
        uint64_t v11 = *v10;
        unint64_t v12 = v10[1];
        sub_1000361E0(*v10, v12);
        uint64_t *v9 = v11;
        v9[1] = v12;
        uint64_t v13 = v4[6];
        uint64_t v14 = (void *)((char *)a1 + v13);
        unint64_t v15 = (void *)((char *)a2 + v13);
        *uint64_t v14 = *v15;
        v14[1] = v15[1];
        uint64_t v16 = v4[7];
        uint64_t v17 = (void *)((char *)a1 + v16);
        uint64_t v18 = (void *)((char *)a2 + v16);
        void *v17 = *v18;
        v17[1] = v18[1];
        *(_DWORD *)((char *)a1 + v4[8]) = *(_DWORD *)((char *)a2 + v4[8]);
        uint64_t v19 = v4[9];
        uint64_t v20 = (char *)a1 + v19;
        uint64_t v21 = (char *)a2 + v19;
        int v22 = *(_DWORD *)v21;
        v20[4] = v21[4];
        *(_DWORD *)uint64_t v20 = v22;
        uint64_t v23 = v4[10];
        uint64_t v24 = (char *)a1 + v23;
        int v25 = (char *)a2 + v23;
        long long v26 = *(_OWORD *)v25;
        v24[16] = v25[16];
        *(_OWORD *)uint64_t v24 = v26;
        uint64_t v27 = v4[11];
        char v28 = (char *)a1 + v27;
        char v29 = (char *)a2 + v27;
        uint64_t v30 = *(void *)v29;
        v28[8] = v29[8];
        *(void *)char v28 = v30;
        uint64_t v31 = v4[12];
        Class v32 = (char *)a1 + v31;
        uint64_t v33 = (char *)a2 + v31;
        LODWORD(v30) = *(_DWORD *)v33;
        v32[4] = v33[4];
        *(_DWORD *)Class v32 = v30;
        *((unsigned char *)a1 + v4[13]) = *((unsigned char *)a2 + v4[13]);
        *((unsigned char *)a1 + v4[14]) = *((unsigned char *)a2 + v4[14]);
        uint64_t v34 = v4[15];
        uint64_t v35 = (void *)((char *)a1 + v34);
        uint64_t v36 = (void *)((char *)a2 + v34);
        *uint64_t v35 = *v36;
        v35[1] = v36[1];
        uint64_t v37 = *(void (**)(void *, void, uint64_t, int *))(v5 + 56);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v37(a1, 0, 1, v4);
      }
    }
    else
    {
      *a1 = *a2;
      swift_bridgeObjectRetain();
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t type metadata accessor for BeaconScanner.AISLookupState(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_101665428);
}

char *sub_100F6E6E0(char *a1, char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = (int *)type metadata accessor for AccessoryMetadata(0);
    uint64_t v7 = *((void *)v6 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v7 + 48))(a2, 1, v6))
    {
      uint64_t v8 = sub_10000588C(&qword_1016653B0);
      memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    }
    else
    {
      uint64_t v9 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
      *(_OWORD *)&a1[v6[5]] = *(_OWORD *)&a2[v6[5]];
      *(_OWORD *)&a1[v6[6]] = *(_OWORD *)&a2[v6[6]];
      *(_OWORD *)&a1[v6[7]] = *(_OWORD *)&a2[v6[7]];
      *(_DWORD *)&a1[v6[8]] = *(_DWORD *)&a2[v6[8]];
      uint64_t v10 = v6[9];
      uint64_t v11 = &a1[v10];
      unint64_t v12 = &a2[v10];
      *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
      v11[4] = v12[4];
      uint64_t v13 = v6[10];
      uint64_t v14 = &a1[v13];
      unint64_t v15 = &a2[v13];
      *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
      v14[16] = v15[16];
      uint64_t v16 = v6[11];
      uint64_t v17 = &a1[v16];
      uint64_t v18 = &a2[v16];
      v17[8] = v18[8];
      *(void *)uint64_t v17 = *(void *)v18;
      uint64_t v19 = v6[12];
      uint64_t v20 = &a1[v19];
      uint64_t v21 = &a2[v19];
      *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
      v20[4] = v21[4];
      a1[v6[13]] = a2[v6[13]];
      a1[v6[14]] = a2[v6[14]];
      *(_OWORD *)&a1[v6[15]] = *(_OWORD *)&a2[v6[15]];
      (*(void (**)(char *, void, uint64_t, int *))(v7 + 56))(a1, 0, 1, v6);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

char *sub_100F6E924(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100F76024((uint64_t)a1, type metadata accessor for BeaconScanner.AISLookupState);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = (int *)type metadata accessor for AccessoryMetadata(0);
      uint64_t v7 = *((void *)v6 - 1);
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v7 + 48))(a2, 1, v6))
      {
        uint64_t v8 = sub_10000588C(&qword_1016653B0);
        memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
      }
      else
      {
        uint64_t v9 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(a1, a2, v9);
        *(_OWORD *)&a1[v6[5]] = *(_OWORD *)&a2[v6[5]];
        *(_OWORD *)&a1[v6[6]] = *(_OWORD *)&a2[v6[6]];
        *(_OWORD *)&a1[v6[7]] = *(_OWORD *)&a2[v6[7]];
        *(_DWORD *)&a1[v6[8]] = *(_DWORD *)&a2[v6[8]];
        uint64_t v10 = v6[9];
        uint64_t v11 = &a1[v10];
        unint64_t v12 = &a2[v10];
        *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
        v11[4] = v12[4];
        uint64_t v13 = v6[10];
        uint64_t v14 = &a1[v13];
        unint64_t v15 = &a2[v13];
        *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
        v14[16] = v15[16];
        uint64_t v16 = v6[11];
        uint64_t v17 = &a1[v16];
        uint64_t v18 = &a2[v16];
        v17[8] = v18[8];
        *(void *)uint64_t v17 = *(void *)v18;
        uint64_t v19 = v6[12];
        uint64_t v20 = &a1[v19];
        uint64_t v21 = &a2[v19];
        *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
        v20[4] = v21[4];
        a1[v6[13]] = a2[v6[13]];
        a1[v6[14]] = a2[v6[14]];
        *(_OWORD *)&a1[v6[15]] = *(_OWORD *)&a2[v6[15]];
        (*(void (**)(char *, void, uint64_t, int *))(v7 + 56))(a1, 0, 1, v6);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

void sub_100F6EB8C()
{
  sub_100F77488(319, (unint64_t *)&unk_10163F970, type metadata accessor for AccessoryMetadata, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Optional);
  if (v0 <= 0x3F) {
    swift_initEnumMetadataMultiPayload();
  }
}

uint64_t sub_100F6EC54(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v9;
  void *v9 = v3;
  v9[1] = sub_100033F68;
  return sub_10088DB74(a1, a2, v6, v7, v8);
}

uint64_t sub_100F6ED1C@<X0>(uint64_t a1@<X8>)
{
  return sub_100F6DC04(a1);
}

uint64_t sub_100F6ED2C@<X0>(uint64_t a1@<X8>)
{
  return sub_1012E41F8(a1);
}

uint64_t sub_100F6ED58(uint64_t a1)
{
  uint64_t v2 = sub_10000588C(&qword_10163D210);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  Peripheral.id.getter();
  sub_100F6EE40(a1, (uint64_t)v5);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_100F6EE40(uint64_t a1, uint64_t a2)
{
  uint64_t v54 = a1;
  uint64_t v55 = sub_10000588C((uint64_t *)&unk_101657980);
  uint64_t v50 = *(void *)(v55 - 8);
  __chkstk_darwin(v55);
  uint64_t v49 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for BeaconScanner.AISLookupState(0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (unint64_t *)((char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  uint64_t v51 = (uint64_t)&v49 - v10;
  uint64_t v11 = sub_10000588C(&qword_10163D210);
  uint64_t v52 = *(void *)(v11 - 8);
  uint64_t v53 = v11;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000588C(&qword_10163CB88);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v17 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (unint64_t *)((char *)&v49 - v19);
  __chkstk_darwin(v18);
  int v22 = (char *)&v49 - v21;
  uint64_t v23 = (uint64_t *)(v2 + 144);
  swift_beginAccess();
  uint64_t v24 = *(void *)(v2 + 144);
  uint64_t v25 = *(void *)(v24 + 16);
  uint64_t v56 = a2;
  if (!v25)
  {
    char v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
    v28(v22, 1, 1, v5);
LABEL_7:
    sub_10001DAB4((uint64_t)v22, &qword_10163CB88);
    (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v13, v56, v53);
    *uint64_t v20 = (unint64_t)_swiftEmptyArrayStorage;
    swift_storeEnumTagMultiPayload();
    v28((char *)v20, 0, 1, v5);
    swift_beginAccess();
    sub_1001604C8((uint64_t)v20, (uint64_t)v13);
    swift_endAccess();
    goto LABEL_9;
  }
  swift_bridgeObjectRetain();
  unint64_t v26 = sub_100725314(a2);
  if (v27)
  {
    sub_100F76084(*(void *)(v24 + 56) + *(void *)(v6 + 72) * v26, (uint64_t)v22, type metadata accessor for BeaconScanner.AISLookupState);
    char v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
    v28(v22, 0, 1, v5);
  }
  else
  {
    char v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
    v28(v22, 1, 1, v5);
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v22, 1, v5) == 1) {
    goto LABEL_7;
  }
  sub_10001DAB4((uint64_t)v22, &qword_10163CB88);
LABEL_9:
  uint64_t v29 = *v23;
  if (!*(void *)(*v23 + 16))
  {
    v28(v17, 1, 1, v5);
LABEL_15:
    sub_10001DAB4((uint64_t)v17, &qword_10163CB88);
LABEL_16:
    if (qword_101637228 != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    sub_100010324(v33, (uint64_t)qword_10170EF60);
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Expected to be in .pending state!", v36, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for BeaconScanner.Error(0);
    sub_100F75C30(&qword_101665498, 255, (void (*)(uint64_t))type metadata accessor for BeaconScanner.Error);
    uint64_t v37 = swift_allocError();
    uint64_t v39 = v38;
    uint64_t v40 = sub_10000588C((uint64_t *)&unk_1016654A0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v39, 1, 2, v40);
    uint64_t v57 = v37;
    return CheckedContinuation.resume(throwing:)();
  }
  swift_bridgeObjectRetain();
  unint64_t v30 = sub_100725314(v56);
  if (v31)
  {
    sub_100F76084(*(void *)(v29 + 56) + *(void *)(v6 + 72) * v30, (uint64_t)v17, type metadata accessor for BeaconScanner.AISLookupState);
    uint64_t v32 = 0;
  }
  else
  {
    uint64_t v32 = 1;
  }
  v28(v17, v32, 1, v5);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v17, 1, v5) == 1) {
    goto LABEL_15;
  }
  uint64_t v42 = (uint64_t)v17;
  uint64_t v43 = v51;
  sub_100F75FBC(v42, v51, type metadata accessor for BeaconScanner.AISLookupState);
  sub_100F76084(v43, (uint64_t)v9, type metadata accessor for BeaconScanner.AISLookupState);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v45 = v55;
  if (EnumCaseMultiPayload == 1)
  {
    sub_100F76024(v43, type metadata accessor for BeaconScanner.AISLookupState);
    sub_100F76024((uint64_t)v9, type metadata accessor for BeaconScanner.AISLookupState);
    goto LABEL_16;
  }
  unint64_t v46 = *v9;
  (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v49, v54, v55);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    unint64_t v46 = sub_100A72598(0, *(void *)(v46 + 16) + 1, 1, v46);
  }
  unint64_t v48 = *(void *)(v46 + 16);
  unint64_t v47 = *(void *)(v46 + 24);
  if (v48 >= v47 >> 1) {
    unint64_t v46 = sub_100A72598(v47 > 1, v48 + 1, 1, v46);
  }
  *(void *)(v46 + 16) = v48 + 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v50 + 32))(v46+ ((*(unsigned __int8 *)(v50 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80))+ *(void *)(v50 + 72) * v48, v49, v45);
  (*(void (**)(char *, uint64_t, uint64_t))(v52 + 16))(v13, v56, v53);
  *uint64_t v20 = v46;
  swift_storeEnumTagMultiPayload();
  v28((char *)v20, 0, 1, v5);
  swift_beginAccess();
  sub_1001604C8((uint64_t)v20, (uint64_t)v13);
  swift_endAccess();
  return sub_100F76024(v51, type metadata accessor for BeaconScanner.AISLookupState);
}

uint64_t sub_100F6F658(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v25 = a4;
  uint64_t v26 = a5;
  uint64_t v23 = a1;
  uint64_t v24 = a3;
  uint64_t v6 = sub_10000588C(&qword_101639A70);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  uint64_t v9 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000588C(&qword_10163D210);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  Peripheral.id.getter();
  sub_100F6EE40(v23, (uint64_t)v15);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  uint64_t v16 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v11, 1, 1, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v25, v6);
  uint64_t v18 = sub_100F75C30(&qword_1016654C8, v17, (void (*)(uint64_t))type metadata accessor for BeaconScanner);
  unint64_t v19 = (*(unsigned __int8 *)(v7 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v20 = (char *)swift_allocObject();
  *((void *)v20 + 2) = a2;
  *((void *)v20 + 3) = v18;
  uint64_t v21 = v24;
  *((void *)v20 + 4) = a2;
  *((void *)v20 + 5) = v21;
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&v20[v19], (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  *(void *)&v20[(v8 + v19 + 7) & 0xFFFFFFFFFFFFFFF8] = v26;
  swift_retain_n();
  swift_retain();
  sub_1008F5E44((uint64_t)v11, (uint64_t)&unk_101665530, (uint64_t)v20);
  return swift_release();
}

uint64_t sub_100F6F94C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[20] = a6;
  v7[21] = a7;
  v7[18] = a4;
  v7[19] = a5;
  uint64_t v9 = type metadata accessor for TimeoutError();
  v7[22] = v9;
  v7[23] = *(void *)(v9 - 8);
  v7[24] = swift_task_alloc();
  uint64_t v10 = sub_10000588C((uint64_t *)&unk_101657980);
  v7[25] = v10;
  v7[26] = *(void *)(v10 - 8);
  v7[27] = swift_task_alloc();
  sub_10000588C(&qword_1016653B0);
  v7[28] = swift_task_alloc();
  sub_10000588C(&qword_10163CB88);
  v7[29] = swift_task_alloc();
  v7[30] = swift_task_alloc();
  uint64_t v11 = sub_10000588C(&qword_10163D210);
  v7[31] = v11;
  v7[32] = *(void *)(v11 - 8);
  v7[33] = swift_task_alloc();
  v7[34] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for BeaconScanner.AISLookupState(0);
  v7[35] = v12;
  v7[36] = *(void *)(v12 - 8);
  v7[37] = swift_task_alloc();
  v7[38] = swift_task_alloc();
  uint64_t v13 = sub_10000588C(&qword_101639A70);
  v7[39] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v7[40] = v14;
  v7[41] = *(void *)(v14 + 64);
  v7[42] = swift_task_alloc();
  v7[43] = sub_10000588C(&qword_101665538);
  v7[44] = swift_task_alloc();
  v7[45] = swift_task_alloc();
  v7[46] = swift_task_alloc();
  v7[47] = swift_task_alloc();
  return _swift_task_switch(sub_100F6FC84, a4, 0);
}

uint64_t sub_100F6FC84()
{
  uint64_t v2 = v0[41];
  uint64_t v1 = v0[42];
  uint64_t v3 = v0[39];
  uint64_t v4 = v0[40];
  uint64_t v5 = v0[21];
  uint64_t v7 = v0[18];
  uint64_t v6 = v0[19];
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 16))(v1, v0[20], v3);
  unint64_t v8 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v9 = (v2 + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = swift_allocObject();
  v0[48] = v10;
  *(void *)(v10 + 16) = v7;
  *(void *)(v10 + 24) = v6;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v10 + v8, v1, v3);
  *(void *)(v10 + v9) = v5;
  swift_retain();
  swift_retain();
  uint64_t v11 = (void *)swift_task_alloc();
  v0[49] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_100F6FE00;
  uint64_t v12 = v0[46];
  uint64_t v13 = v0[43];
  return withTimeout<A>(_:block:)(v12, 0xA055690D9DB80000, 1, &unk_101665548, v10, v13);
}

uint64_t sub_100F6FE00()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 400) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 144);
    uint64_t v4 = sub_100F70854;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 144);
    swift_release();
    uint64_t v4 = sub_100F6FF28;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100F6FF28()
{
  uint64_t v57 = v0;
  sub_10001D608(v0[46], v0[47], &qword_101665538);
  uint64_t v1 = v0[18];
  Peripheral.id.getter();
  swift_beginAccess();
  uint64_t v2 = *(void *)(v1 + 144);
  if (*(void *)(v2 + 16))
  {
    uint64_t v3 = v0[34];
    swift_bridgeObjectRetain();
    unint64_t v4 = sub_100725314(v3);
    uint64_t v5 = v0[35];
    uint64_t v6 = v0[36];
    uint64_t v7 = v0[30];
    if (v8)
    {
      sub_100F76084(*(void *)(v2 + 56) + *(void *)(v6 + 72) * v4, v0[30], type metadata accessor for BeaconScanner.AISLookupState);
      unint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56);
      v9(v7, 0, 1, v5);
    }
    else
    {
      unint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56);
      v9(v0[30], 1, 1, v5);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0[36] + 56);
    v9(v0[30], 1, 1, v0[35]);
  }
  uint64_t v10 = v0[35];
  uint64_t v11 = v0[36];
  uint64_t v12 = v0[30];
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v0[32] + 8);
  v13(v0[34], v0[31]);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v12, 1, v10) == 1)
  {
    sub_10001DAB4(v0[30], &qword_10163CB88);
LABEL_11:
    if (qword_101637228 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_100010324(v17, (uint64_t)qword_10170EF60);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Expected to be in pending state", v20, 2u);
      swift_slowDealloc();
    }

    goto LABEL_31;
  }
  uint64_t v15 = v0[37];
  uint64_t v14 = v0[38];
  sub_100F75FBC(v0[30], v14, type metadata accessor for BeaconScanner.AISLookupState);
  sub_100F76084(v14, v15, type metadata accessor for BeaconScanner.AISLookupState);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v16 = v0[37];
    sub_100F76024(v0[38], type metadata accessor for BeaconScanner.AISLookupState);
    sub_100F76024(v16, type metadata accessor for BeaconScanner.AISLookupState);
    goto LABEL_11;
  }
  uint64_t v55 = *(void *)v0[37];
  sub_10001D074(v0[47], v0[45], &qword_101665538);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    if (qword_101637228 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_100010324(v21, (uint64_t)qword_10170EF60);
    swift_retain();
    swift_errorRetain();
    swift_retain();
    swift_errorRetain();
    int v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      os_log_type_t type = v23;
      uint64_t v24 = v0[33];
      uint64_t v25 = v0[31];
      uint64_t v26 = swift_slowAlloc();
      uint64_t v53 = (void *)swift_slowAlloc();
      uint64_t v56 = swift_slowAlloc();
      *(_DWORD *)uint64_t v26 = 136315394;
      log = v22;
      Peripheral.id.getter();
      sub_100062734(&qword_10163B810, &qword_10163D210);
      uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v29 = v28;
      v13(v24, v25);
      v0[12] = sub_1008FA0F0(v27, v29, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v26 + 12) = 2112;
      swift_errorRetain();
      uint64_t v30 = _swift_stdlib_bridgeErrorToNSError();
      v0[13] = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v53 = v30;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, log, type, "Failure reading metadata for %s: %@", (uint8_t *)v26, 0x16u);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v35 = v0[35];
    uint64_t v36 = v0[33];
    uint64_t v37 = v0[29];
    Peripheral.id.getter();
    uint64_t v38 = type metadata accessor for AccessoryMetadata(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v37, 1, 1, v38);
    swift_storeEnumTagMultiPayload();
    v9(v37, 0, 1, v35);
    swift_beginAccess();
    sub_1001604C8(v37, v36);
    swift_endAccess();
    swift_errorRelease();
  }
  else
  {
    uint64_t v31 = v0[35];
    uint64_t v32 = v0[33];
    uint64_t v34 = v0[28];
    uint64_t v33 = v0[29];
    sub_10001D608(v0[45], v34, &qword_1016653B0);
    Peripheral.id.getter();
    sub_10001D074(v34, v33, &qword_1016653B0);
    swift_storeEnumTagMultiPayload();
    v9(v33, 0, 1, v31);
    swift_beginAccess();
    sub_1001604C8(v33, v32);
    swift_endAccess();
    sub_10001DAB4(v34, &qword_1016653B0);
  }
  uint64_t v39 = *(void *)(v55 + 16);
  if (v39)
  {
    uint64_t v40 = v0[26];
    uint64_t v43 = *(void (**)(void, uint64_t, void))(v40 + 16);
    uint64_t v42 = v40 + 16;
    uint64_t v41 = v43;
    uint64_t v44 = v55 + ((*(unsigned __int8 *)(v42 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 64));
    uint64_t v45 = *(void *)(v42 + 56);
    do
    {
      uint64_t v46 = v0[47];
      uint64_t v47 = v0[44];
      v41(v0[27], v44, v0[25]);
      sub_10001D074(v46, v47, &qword_101665538);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      uint64_t v49 = (void *)v0[44];
      if (EnumCaseMultiPayload == 1)
      {
        v0[11] = *v49;
        CheckedContinuation.resume(throwing:)();
      }
      else
      {
        sub_10001D608((uint64_t)v49, v0[28], &qword_1016653B0);
        CheckedContinuation.resume(returning:)();
      }
      (*(void (**)(void, void))(v42 - 8))(v0[27], v0[25]);
      v44 += v45;
      --v39;
    }
    while (v39);
  }
  swift_bridgeObjectRelease();
  sub_100F76024(v0[38], type metadata accessor for BeaconScanner.AISLookupState);
LABEL_31:
  sub_10001DAB4(v0[47], &qword_101665538);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v50 = (uint64_t (*)(void))v0[1];
  return v50();
}

uint64_t sub_100F70854()
{
  uint64_t v89 = v0;
  uint64_t v1 = v0[50];
  swift_release();
  v0[14] = v1;
  swift_errorRetain();
  sub_10000588C(&qword_101638D40);
  uint64_t v2 = &qword_101637000;
  if (swift_dynamicCast())
  {
    swift_errorRelease();
    if (qword_101637228 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_10170EF60);
    swift_retain_n();
    unint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v7 = v0[32];
      uint64_t v6 = v0[33];
      uint64_t v8 = v0[31];
      unint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v88 = swift_slowAlloc();
      *(_DWORD *)unint64_t v9 = 136446210;
      Peripheral.id.getter();
      sub_100062734(&qword_10163B810, &qword_10163D210);
      uint64_t v10 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v12 = v11;
      uint64_t v13 = v8;
      uint64_t v2 = &qword_101637000;
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v13);
      v0[17] = sub_1008FA0F0(v10, v12, &v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Timeout reading metadata for %{public}s!", v9, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    uint64_t v25 = v0[47];
    uint64_t v27 = v0[23];
    uint64_t v26 = v0[24];
    uint64_t v28 = v0[22];
    uint64_t v29 = type metadata accessor for AccessoryMetadata(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v25, 1, 1, v29);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v26, v28);
    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    if (qword_101637228 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_100010324(v14, (uint64_t)qword_10170EF60);
    swift_retain();
    swift_errorRetain();
    swift_retain();
    swift_errorRetain();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v18 = v0[32];
      uint64_t v17 = v0[33];
      uint64_t v19 = v0[31];
      uint64_t v20 = swift_slowAlloc();
      os_log_type_t type = (void *)swift_slowAlloc();
      uint64_t v88 = swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 136446466;
      Peripheral.id.getter();
      sub_100062734(&qword_10163B810, &qword_10163D210);
      uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v23 = v22;
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v17, v19);
      v0[15] = sub_1008FA0F0(v21, v23, &v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v20 + 12) = 2114;
      uint64_t v24 = _convertErrorToNSError(_:)();
      v0[16] = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t type = v24;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Error reading metadata for %{public}s: %{public}@", (uint8_t *)v20, 0x16u);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_release_n();
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v30 = v0[47];
    uint64_t v31 = type metadata accessor for AccessoryMetadata(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v30, 1, 1, v31);
    swift_storeEnumTagMultiPayload();
    uint64_t v2 = &qword_101637000;
  }
  uint64_t v32 = v0[18];
  Peripheral.id.getter();
  swift_beginAccess();
  uint64_t v33 = *(void *)(v32 + 144);
  if (*(void *)(v33 + 16))
  {
    uint64_t v34 = v0[34];
    swift_bridgeObjectRetain();
    unint64_t v35 = sub_100725314(v34);
    uint64_t v36 = v0[35];
    uint64_t v37 = v0[36];
    uint64_t v38 = v0[30];
    if (v39)
    {
      sub_100F76084(*(void *)(v33 + 56) + *(void *)(v37 + 72) * v35, v0[30], type metadata accessor for BeaconScanner.AISLookupState);
      uint64_t v40 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 56);
      v40(v38, 0, 1, v36);
    }
    else
    {
      uint64_t v40 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 56);
      v40(v0[30], 1, 1, v36);
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v40 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0[36] + 56);
    v40(v0[30], 1, 1, v0[35]);
  }
  uint64_t v41 = v0[35];
  uint64_t v42 = v0[36];
  uint64_t v43 = v0[30];
  uint64_t v44 = *(void (**)(uint64_t, uint64_t))(v0[32] + 8);
  v44(v0[34], v0[31]);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48))(v43, 1, v41) == 1)
  {
    sub_10001DAB4(v0[30], &qword_10163CB88);
LABEL_24:
    if (v2[69] != -1) {
      swift_once();
    }
    uint64_t v48 = type metadata accessor for Logger();
    sub_100010324(v48, (uint64_t)qword_10170EF60);
    uint64_t v49 = Logger.logObject.getter();
    os_log_type_t v50 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v49, v50))
    {
      uint64_t v51 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v51 = 0;
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "Expected to be in pending state", v51, 2u);
      swift_slowDealloc();
    }

    goto LABEL_44;
  }
  uint64_t v45 = v0[37];
  uint64_t v46 = v0[38];
  sub_100F75FBC(v0[30], v46, type metadata accessor for BeaconScanner.AISLookupState);
  sub_100F76084(v46, v45, type metadata accessor for BeaconScanner.AISLookupState);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v47 = v0[37];
    sub_100F76024(v0[38], type metadata accessor for BeaconScanner.AISLookupState);
    sub_100F76024(v47, type metadata accessor for BeaconScanner.AISLookupState);
    goto LABEL_24;
  }
  uint64_t v87 = *(void *)v0[37];
  sub_10001D074(v0[47], v0[45], &qword_101665538);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    if (v2[69] != -1) {
      swift_once();
    }
    uint64_t v52 = type metadata accessor for Logger();
    sub_100010324(v52, (uint64_t)qword_10170EF60);
    swift_retain();
    swift_errorRetain();
    swift_retain();
    swift_errorRetain();
    uint64_t v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v53, v54))
    {
      os_log_type_t typea = v54;
      uint64_t v55 = v0[33];
      uint64_t v82 = v0[31];
      uint64_t v56 = swift_slowAlloc();
      uint64_t v84 = (void *)swift_slowAlloc();
      uint64_t v88 = swift_slowAlloc();
      *(_DWORD *)uint64_t v56 = 136315394;
      log = v53;
      Peripheral.id.getter();
      sub_100062734(&qword_10163B810, &qword_10163D210);
      uint64_t v57 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v59 = v58;
      v44(v55, v82);
      v0[12] = sub_1008FA0F0(v57, v59, &v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v56 + 12) = 2112;
      swift_errorRetain();
      uint64_t v60 = _swift_stdlib_bridgeErrorToNSError();
      v0[13] = v60;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v84 = v60;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, log, typea, "Failure reading metadata for %s: %@", (uint8_t *)v56, 0x16u);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v65 = v0[35];
    uint64_t v66 = v0[33];
    uint64_t v67 = v0[29];
    Peripheral.id.getter();
    uint64_t v68 = type metadata accessor for AccessoryMetadata(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v68 - 8) + 56))(v67, 1, 1, v68);
    swift_storeEnumTagMultiPayload();
    v40(v67, 0, 1, v65);
    swift_beginAccess();
    sub_1001604C8(v67, v66);
    swift_endAccess();
    swift_errorRelease();
  }
  else
  {
    uint64_t v61 = v0[35];
    uint64_t v62 = v0[33];
    uint64_t v64 = v0[28];
    uint64_t v63 = v0[29];
    sub_10001D608(v0[45], v64, &qword_1016653B0);
    Peripheral.id.getter();
    sub_10001D074(v64, v63, &qword_1016653B0);
    swift_storeEnumTagMultiPayload();
    v40(v63, 0, 1, v61);
    swift_beginAccess();
    sub_1001604C8(v63, v62);
    swift_endAccess();
    sub_10001DAB4(v64, &qword_1016653B0);
  }
  uint64_t v69 = *(void *)(v87 + 16);
  if (v69)
  {
    uint64_t v70 = v0[26];
    unint64_t v73 = *(void (**)(void, uint64_t, void))(v70 + 16);
    uint64_t v72 = v70 + 16;
    uint64_t v71 = v73;
    uint64_t v74 = v87 + ((*(unsigned __int8 *)(v72 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v72 + 64));
    uint64_t v75 = *(void *)(v72 + 56);
    do
    {
      uint64_t v76 = v0[47];
      uint64_t v77 = v0[44];
      v71(v0[27], v74, v0[25]);
      sub_10001D074(v76, v77, &qword_101665538);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      uint64_t v79 = (void *)v0[44];
      if (EnumCaseMultiPayload == 1)
      {
        v0[11] = *v79;
        CheckedContinuation.resume(throwing:)();
      }
      else
      {
        sub_10001D608((uint64_t)v79, v0[28], &qword_1016653B0);
        CheckedContinuation.resume(returning:)();
      }
      (*(void (**)(void, void))(v72 - 8))(v0[27], v0[25]);
      v74 += v75;
      --v69;
    }
    while (v69);
  }
  swift_bridgeObjectRelease();
  sub_100F76024(v0[38], type metadata accessor for BeaconScanner.AISLookupState);
LABEL_44:
  sub_10001DAB4(v0[47], &qword_101665538);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v80 = (uint64_t (*)(void))v0[1];
  return v80();
}

uint64_t sub_100F71774(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a1;
  v4[5] = a3;
  uint64_t v7 = sub_10000588C(&qword_10163D210);
  v4[6] = v7;
  v4[7] = *(void *)(v7 - 8);
  v4[8] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for AccessoryMetadata(0);
  v4[9] = v8;
  v4[10] = *(void *)(v8 - 8);
  v4[11] = swift_task_alloc();
  uint64_t v9 = swift_task_alloc();
  v4[12] = v9;
  uint64_t v10 = (void *)swift_task_alloc();
  v4[13] = v10;
  *uint64_t v10 = v4;
  v10[1] = sub_100F718FC;
  return sub_100F71E00(v9, a3, a4);
}

uint64_t sub_100F718FC()
{
  *(void *)(*(void *)v1 + 112) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100F71D88;
  }
  else {
    uint64_t v2 = sub_100F71A10;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100F71A10()
{
  unint64_t v23 = v0;
  if (qword_101637228 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[11];
  uint64_t v2 = v0[12];
  uint64_t v3 = type metadata accessor for Logger();
  sub_100010324(v3, (uint64_t)qword_10170EF60);
  sub_100F76084(v2, v1, type metadata accessor for AccessoryMetadata);
  swift_retain_n();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = v0[11];
  if (v6)
  {
    uint64_t v8 = v0[7];
    uint64_t v9 = v0[8];
    uint64_t v10 = v0[6];
    uint64_t v11 = swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315394;
    Peripheral.id.getter();
    sub_100062734(&qword_10163B810, &qword_10163D210);
    uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v14 = v13;
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v10);
    v0[2] = sub_1008FA0F0(v12, v14, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    *(_WORD *)(v11 + 12) = 2080;
    uint64_t v15 = sub_1001A9070();
    v0[3] = sub_1008FA0F0(v15, v16, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100F76024(v7, type metadata accessor for AccessoryMetadata);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Read metadata for %s: %s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_release_n();
    sub_100F76024(v7, type metadata accessor for AccessoryMetadata);
  }

  uint64_t v17 = v0[9];
  uint64_t v18 = v0[10];
  uint64_t v19 = v0[4];
  sub_100F75FBC(v0[12], v19, type metadata accessor for AccessoryMetadata);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v18 + 56))(v19, 0, 1, v17);
  sub_10000588C(&qword_101665538);
  swift_storeEnumTagMultiPayload();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v20 = (uint64_t (*)(void))v0[1];
  return v20();
}

uint64_t sub_100F71D88()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100F71E00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[16] = a3;
  v4[17] = v3;
  v4[14] = a1;
  v4[15] = a2;
  uint64_t v5 = type metadata accessor for UUID();
  v4[18] = v5;
  v4[19] = *(void *)(v5 - 8);
  v4[20] = swift_task_alloc();
  uint64_t v6 = sub_10000588C(&qword_10163D210);
  v4[21] = v6;
  v4[22] = *(void *)(v6 - 8);
  v4[23] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Duration.UnitsFormatStyle.Unit();
  v4[24] = v7;
  v4[25] = *(void *)(v7 - 8);
  v4[26] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for Logger();
  v4[27] = v8;
  v4[28] = *(void *)(v8 - 8);
  v4[29] = swift_task_alloc();
  uint64_t v9 = sub_10000588C(&qword_101639C68);
  v4[30] = v9;
  v4[31] = *(void *)(v9 - 8);
  v4[32] = swift_task_alloc();
  v4[33] = swift_task_alloc();
  v4[34] = swift_task_alloc();
  uint64_t v10 = sub_10000588C((uint64_t *)&unk_1016654A0);
  v4[35] = v10;
  v4[36] = *(void *)(v10 - 8);
  v4[37] = swift_task_alloc();
  v4[38] = swift_task_alloc();
  v4[39] = swift_task_alloc();
  v4[40] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for ContinuousClock.Instant();
  v4[41] = v11;
  v4[42] = *(void *)(v11 - 8);
  v4[43] = swift_task_alloc();
  v4[44] = swift_task_alloc();
  v4[45] = swift_task_alloc();
  v4[46] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for ContinuousClock();
  v4[47] = v12;
  v4[48] = *(void *)(v12 - 8);
  v4[49] = swift_task_alloc();
  return _swift_task_switch(sub_100F721C0, v3, 0);
}

uint64_t sub_100F721C0()
{
  ContinuousClock.init()();
  static Task<>.checkCancellation()();
  ContinuousClock.now.getter();
  uint64_t v3 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of Peripheral.connect()
                         + async function pointer to dispatch thunk of Peripheral.connect());
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 400) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100F722E0;
  return v3();
}

uint64_t sub_100F722E0()
{
  uint64_t v2 = (void *)*v1;
  v2[51] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[17];
    return _swift_task_switch(sub_100F74D3C, v3, 0);
  }
  else
  {
    uint64_t v7 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of Peripheral.subscript.getter
                                         + async function pointer to dispatch thunk of Peripheral.subscript.getter);
    uint64_t v4 = (void *)swift_task_alloc();
    v2[52] = v4;
    *uint64_t v4 = v2;
    v4[1] = sub_100F7246C;
    uint64_t v5 = v2[16];
    return v7(v5);
  }
}

uint64_t sub_100F7246C(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 424) = a1;
  *(void *)(v4 + 432) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 136);
  if (v1) {
    uint64_t v6 = sub_100F74E00;
  }
  else {
    uint64_t v6 = sub_100F725A0;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_100F725A0()
{
  uint64_t v1 = v0[54];
  static Task<>.checkCancellation()();
  if (v1)
  {
    (*(void (**)(void, void))(v0[42] + 8))(v0[46], v0[41]);
    swift_release();
    v0[92] = v1;
    uint64_t v12 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                            + async function pointer to dispatch thunk of Peripheral.cancelConnection());
    uint64_t v2 = (void *)swift_task_alloc();
    v0[93] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100F74AA8;
    return v12();
  }
  else
  {
    uint64_t v4 = 11;
    uint64_t v5 = v0[36];
    sub_1000B6F60(0, 11, 0);
    uint64_t v6 = &byte_10159F588;
    do
    {
      ++v6;
      type metadata accessor for Characteristic();
      Identifier.init(stringLiteral:)();
      unint64_t v8 = _swiftEmptyArrayStorage[2];
      unint64_t v7 = _swiftEmptyArrayStorage[3];
      if (v8 >= v7 >> 1) {
        sub_1000B6F60(v7 > 1, v8 + 1, 1);
      }
      uint64_t v9 = v0[40];
      uint64_t v10 = v0[35];
      _swiftEmptyArrayStorage[2] = v8 + 1;
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))((char *)_swiftEmptyArrayStorage+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v8, v9, v10);
      --v4;
    }
    while (v4);
    v0[55] = _swiftEmptyArrayStorage;
    unint64_t v13 = (uint64_t (*)(void *))((char *)&async function pointer to dispatch thunk of Service.discover(characteristicIdentifiers:)
                                           + async function pointer to dispatch thunk of Service.discover(characteristicIdentifiers:));
    uint64_t v11 = (void *)swift_task_alloc();
    v0[56] = v11;
    *uint64_t v11 = v0;
    v11[1] = sub_100F729C4;
    return v13(_swiftEmptyArrayStorage);
  }
}

uint64_t sub_100F729C4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 456) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 136);
  swift_bridgeObjectRelease();
  if (v0)
  {
    uint64_t v4 = sub_100F74EC4;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_100F72B18;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100F72B18()
{
  uint64_t v1 = v0[57];
  static Task<>.checkCancellation()();
  if (v1)
  {
    (*(void (**)(void, void))(v0[42] + 8))(v0[46], v0[41]);
    swift_release();
    v0[92] = v1;
    uint64_t v6 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                           + async function pointer to dispatch thunk of Peripheral.cancelConnection());
    uint64_t v2 = (void *)swift_task_alloc();
    v0[93] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100F74AA8;
    return v6();
  }
  else
  {
    v0[58] = type metadata accessor for Characteristic();
    Identifier.init(stringLiteral:)();
    unint64_t v7 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of Service.subscript.getter
                                         + async function pointer to dispatch thunk of Service.subscript.getter);
    uint64_t v4 = (void *)swift_task_alloc();
    v0[59] = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_100F72CAC;
    uint64_t v5 = v0[39];
    return v7(v5);
  }
}

uint64_t sub_100F72CAC(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[60] = a1;
  v3[61] = v1;
  swift_task_dealloc();
  uint64_t v5 = v3[39];
  uint64_t v6 = v3[36];
  uint64_t v7 = v3[35];
  if (v1)
  {
    uint64_t v8 = v3[17];
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    return _swift_task_switch(sub_100F74FA0, v8, 0);
  }
  else
  {
    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v3[62] = v9;
    v3[63] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v9(v5, v7);
    unint64_t v13 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of Characteristic.read()
                                          + async function pointer to dispatch thunk of Characteristic.read());
    uint64_t v10 = (void *)swift_task_alloc();
    v3[64] = v10;
    *uint64_t v10 = v4;
    v10[1] = sub_100F72EB8;
    uint64_t v11 = v3[34];
    return v13(v11);
  }
}

uint64_t sub_100F72EB8()
{
  uint64_t v2 = (void *)*v1;
  v2[65] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[17];
    swift_release();
    return _swift_task_switch(sub_100F7507C, v3, 0);
  }
  else
  {
    swift_release();
    uint64_t v4 = (void *)swift_task_alloc();
    v2[66] = v4;
    uint64_t v5 = sub_100062734(&qword_101665560, &qword_101639C68);
    v2[67] = v5;
    *uint64_t v4 = v2;
    v4[1] = sub_100F73088;
    uint64_t v6 = v2[30];
    return AsyncSequence.first()(v2 + 2, v6, v5);
  }
}

uint64_t sub_100F73088()
{
  uint64_t v2 = (void *)*v1;
  v2[68] = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[34];
  uint64_t v4 = v2[31];
  uint64_t v5 = v2[30];
  uint64_t v6 = v2[17];
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  uint64_t v7 = v4 + 8;
  uint64_t v8 = v9;
  if (v0)
  {
    v8(v3, v5);
    uint64_t v10 = sub_100F75158;
  }
  else
  {
    v2[69] = v8;
    v2[70] = v7 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v8(v3, v5);
    uint64_t v10 = sub_100F73220;
  }
  return _swift_task_switch(v10, v6, 0);
}

uint64_t sub_100F73220()
{
  uint64_t v1 = v0[2];
  unint64_t v2 = v0[3];
  v0[71] = v1;
  v0[72] = v2;
  if (v2 >> 60 == 15) {
    goto LABEL_4;
  }
  sub_1000361E0(v1, v2);
  uint64_t v3 = sub_1002AB228(v1, v2);
  v0[73] = v3;
  v0[74] = v4;
  if (v4 >> 60 == 15)
  {
    sub_100037A24(v1, v2);
LABEL_4:
    uint64_t v5 = v0[46];
    uint64_t v6 = v0[41];
    uint64_t v7 = v0[42];
    uint64_t v8 = v0[35];
    uint64_t v9 = v0[36];
    type metadata accessor for BeaconScanner.Error(0);
    sub_100F75C30(&qword_101665498, 255, (void (*)(uint64_t))type metadata accessor for BeaconScanner.Error);
    uint64_t v10 = swift_allocError();
    uint64_t v12 = v11;
    Identifier.init(stringLiteral:)();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v12, 0, 2, v8);
    swift_willThrow();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
LABEL_5:
    v0[92] = v10;
    uint64_t v20 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                            + async function pointer to dispatch thunk of Peripheral.cancelConnection());
    unint64_t v13 = (void *)swift_task_alloc();
    v0[93] = v13;
    *unint64_t v13 = v0;
    v13[1] = sub_100F74AA8;
    return v20();
  }
  uint64_t v15 = v3;
  unint64_t v16 = v4;
  uint64_t v17 = v0[68];
  static Task<>.checkCancellation()();
  if (v17)
  {
    uint64_t v10 = v17;
    (*(void (**)(void, void))(v0[42] + 8))(v0[46], v0[41]);
    sub_100037A24(v15, v16);
    sub_100037A24(v1, v2);
    swift_release();
    goto LABEL_5;
  }
  Identifier.init(stringLiteral:)();
  uint64_t v21 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of Service.subscript.getter
                                        + async function pointer to dispatch thunk of Service.subscript.getter);
  uint64_t v18 = (void *)swift_task_alloc();
  v0[75] = v18;
  *uint64_t v18 = v0;
  v18[1] = sub_100F73518;
  uint64_t v19 = v0[38];
  return v21(v19);
}

uint64_t sub_100F73518(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  unint64_t v4 = (void *)*v2;
  v3[76] = a1;
  v3[77] = v1;
  swift_task_dealloc();
  uint64_t v5 = (void (*)(uint64_t, uint64_t))v3[62];
  uint64_t v6 = v3[38];
  uint64_t v7 = v3[35];
  if (v1)
  {
    uint64_t v8 = v3[17];
    v5(v6, v7);
    return _swift_task_switch(sub_100F75234, v8, 0);
  }
  else
  {
    v5(v6, v7);
    uint64_t v12 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of Characteristic.read()
                                          + async function pointer to dispatch thunk of Characteristic.read());
    uint64_t v9 = (void *)swift_task_alloc();
    v3[78] = v9;
    void *v9 = v4;
    v9[1] = sub_100F73718;
    uint64_t v10 = v3[33];
    return v12(v10);
  }
}

uint64_t sub_100F73718()
{
  unint64_t v2 = (void *)*v1;
  v2[79] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[17];
    swift_release();
    return _swift_task_switch(sub_100F75348, v3, 0);
  }
  else
  {
    swift_release();
    unint64_t v4 = (void *)swift_task_alloc();
    v2[80] = v4;
    *unint64_t v4 = v2;
    v4[1] = sub_100F738BC;
    uint64_t v5 = v2[67];
    uint64_t v6 = v2[30];
    return AsyncSequence.first()(v2 + 4, v6, v5);
  }
}

uint64_t sub_100F738BC()
{
  unint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 648) = v0;
  swift_task_dealloc();
  uint64_t v3 = (void (*)(uint64_t, uint64_t))v2[69];
  uint64_t v4 = v2[33];
  uint64_t v5 = v2[30];
  uint64_t v6 = v2[17];
  v3(v4, v5);
  if (v0) {
    uint64_t v7 = sub_100F7545C;
  }
  else {
    uint64_t v7 = sub_100F73A40;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_100F73A40()
{
  uint64_t v1 = v0[4];
  unint64_t v2 = v0[5];
  v0[82] = v1;
  v0[83] = v2;
  if (v2 >> 60 == 15) {
    goto LABEL_6;
  }
  v0[6] = v1;
  v0[7] = v2;
  sub_1000362FC();
  v0[10] = DataProtocol.nullTerminatedUTF8String.getter();
  v0[11] = v3;
  v0[84] = v3;
  if (!v3)
  {
    sub_100037A24(v1, v2);
LABEL_6:
    unint64_t v10 = v0[74];
    uint64_t v11 = v0[73];
    uint64_t v21 = v0[71];
    unint64_t v22 = v0[72];
    uint64_t v12 = v0[42];
    uint64_t v23 = v0[41];
    uint64_t v24 = v0[46];
    uint64_t v13 = v0[35];
    uint64_t v14 = v0[36];
    type metadata accessor for BeaconScanner.Error(0);
    sub_100F75C30(&qword_101665498, 255, (void (*)(uint64_t))type metadata accessor for BeaconScanner.Error);
    uint64_t v5 = swift_allocError();
    uint64_t v16 = v15;
    Identifier.init(stringLiteral:)();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(v16, 0, 2, v13);
    swift_willThrow();
    swift_release();
    sub_100037A24(v11, v10);
    sub_100037A24(v21, v22);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v24, v23);
    goto LABEL_7;
  }
  uint64_t v4 = v0[81];
  static Task<>.checkCancellation()();
  if (v4)
  {
    uint64_t v5 = v4;
    unint64_t v6 = v0[74];
    uint64_t v7 = v0[73];
    unint64_t v8 = v0[72];
    uint64_t v9 = v0[71];
    (*(void (**)(void, void))(v0[42] + 8))(v0[46], v0[41]);
    swift_bridgeObjectRelease();
    sub_100037A24(v1, v2);
    sub_100037A24(v7, v6);
    sub_100037A24(v9, v8);
    swift_release();
LABEL_7:
    v0[92] = v5;
    uint64_t v25 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                            + async function pointer to dispatch thunk of Peripheral.cancelConnection());
    uint64_t v17 = (void *)swift_task_alloc();
    v0[93] = v17;
    void *v17 = v0;
    v17[1] = sub_100F74AA8;
    return v25();
  }
  Identifier.init(stringLiteral:)();
  uint64_t v26 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of Service.subscript.getter
                                        + async function pointer to dispatch thunk of Service.subscript.getter);
  uint64_t v19 = (void *)swift_task_alloc();
  v0[85] = v19;
  *uint64_t v19 = v0;
  v19[1] = sub_100F73D7C;
  uint64_t v20 = v0[37];
  return v26(v20);
}

uint64_t sub_100F73D7C(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v3 + 688) = a1;
  *(void *)(v3 + 696) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = *(void *)(v3 + 136);
    (*(void (**)(void, void))(v3 + 496))(*(void *)(v3 + 296), *(void *)(v3 + 280));
    swift_bridgeObjectRelease();
    return _swift_task_switch(sub_100F75570, v5, 0);
  }
  else
  {
    (*(void (**)(void, void))(v3 + 496))(*(void *)(v3 + 296), *(void *)(v3 + 280));
    uint64_t v9 = (uint64_t (*)(uint64_t))((char *)&async function pointer to dispatch thunk of Characteristic.read()
                                         + async function pointer to dispatch thunk of Characteristic.read());
    unint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v3 + 704) = v6;
    *unint64_t v6 = v4;
    v6[1] = sub_100F73F50;
    uint64_t v7 = *(void *)(v3 + 256);
    return v9(v7);
  }
}

uint64_t sub_100F73F50()
{
  unint64_t v2 = (void *)*v1;
  v2[89] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[17];
    swift_release();
    swift_bridgeObjectRelease();
    return _swift_task_switch(sub_100F756A0, v3, 0);
  }
  else
  {
    swift_release();
    uint64_t v4 = (void *)swift_task_alloc();
    v2[90] = v4;
    *uint64_t v4 = v2;
    v4[1] = sub_100F74100;
    uint64_t v5 = v2[67];
    uint64_t v6 = v2[30];
    return AsyncSequence.first()(v2 + 8, v6, v5);
  }
}

uint64_t sub_100F74100()
{
  unint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 728) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = (void (*)(uint64_t, uint64_t))v2[69];
    uint64_t v4 = v2[32];
    uint64_t v5 = v2[30];
    uint64_t v6 = v2[17];
    v3(v4, v5);
    swift_bridgeObjectRelease();
    uint64_t v7 = sub_100F757D0;
    uint64_t v8 = v6;
  }
  else
  {
    uint64_t v9 = v2[17];
    ((void (*)(void, void))v2[69])(v2[32], v2[30]);
    uint64_t v7 = sub_100F74258;
    uint64_t v8 = v9;
  }
  return _swift_task_switch(v7, v8, 0);
}

uint64_t sub_100F74258()
{
  uint64_t v92 = v0;
  uint64_t v1 = v0[8];
  unint64_t v2 = v0[9];
  if (v2 >> 60 == 15)
  {
    swift_bridgeObjectRelease();
LABEL_9:
    unint64_t v31 = v0[74];
    uint64_t v32 = v0[73];
    unint64_t v83 = v0[83];
    unint64_t v85 = v0[72];
    uint64_t v79 = v0[82];
    uint64_t v80 = v0[71];
    uint64_t v33 = v0[42];
    uint64_t v87 = v0[41];
    uint64_t v89 = v0[46];
    uint64_t v34 = v0[35];
    uint64_t v35 = v0[36];
    type metadata accessor for BeaconScanner.Error(0);
    sub_100F75C30(&qword_101665498, 255, (void (*)(uint64_t))type metadata accessor for BeaconScanner.Error);
    uint64_t v36 = swift_allocError();
    uint64_t v38 = v37;
    Identifier.init(stringLiteral:)();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v35 + 56))(v38, 0, 2, v34);
    swift_willThrow();
    swift_release();
    sub_100037A24(v32, v31);
    sub_100037A24(v79, v83);
    sub_100037A24(v80, v85);
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v89, v87);
    v0[92] = v36;
    uint64_t v90 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                            + async function pointer to dispatch thunk of Peripheral.cancelConnection());
    char v39 = (void *)swift_task_alloc();
    v0[93] = v39;
    *char v39 = v0;
    v39[1] = sub_100F74AA8;
    return v90();
  }
  sub_1000361E0(v0[8], v0[9]);
  unint64_t v3 = sub_1009CD940(v1, v2);
  if ((v3 & 0x100000000) != 0)
  {
    swift_bridgeObjectRelease();
    sub_100037A24(v1, v2);
    goto LABEL_9;
  }
  uint64_t v84 = v1;
  unint64_t v86 = v2;
  int v88 = v3;
  ContinuousClock.now.getter();
  if (qword_101637228 != -1) {
    swift_once();
  }
  uint64_t v4 = v0[46];
  uint64_t v81 = v0[45];
  uint64_t v6 = v0[43];
  uint64_t v5 = v0[44];
  uint64_t v8 = v0[41];
  uint64_t v7 = v0[42];
  uint64_t v9 = v0[28];
  uint64_t v10 = v0[29];
  uint64_t v11 = v0[27];
  uint64_t v12 = sub_100010324(v11, (uint64_t)qword_10170EF60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v10, v12, v11);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  v13(v5, v4, v8);
  v13(v6, v81, v8);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  BOOL v16 = os_log_type_enabled(v14, v15);
  uint64_t v17 = v0[43];
  uint64_t v19 = v0[41];
  uint64_t v18 = v0[42];
  uint64_t v21 = v0[28];
  uint64_t v20 = v0[29];
  uint64_t v22 = v0[27];
  if (v16)
  {
    os_log_type_t v78 = v15;
    uint64_t v24 = v0[25];
    uint64_t v23 = v0[26];
    uint64_t v75 = v0[24];
    uint64_t v76 = v14;
    uint64_t v82 = v0[29];
    uint64_t v25 = v0[44];
    uint64_t v26 = (uint8_t *)swift_slowAlloc();
    v91[0] = swift_slowAlloc();
    uint64_t v74 = v26;
    *(_DWORD *)uint64_t v26 = 136446210;
    static Duration.UnitsFormatStyle.Unit.milliseconds.getter();
    sub_100F75C30(&qword_101653DE0, 255, (void (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant);
    uint64_t v73 = v17;
    uint64_t v27 = static Duration.description<A>(_:_:units:)();
    unint64_t v29 = v28;
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v23, v75);
    v0[13] = sub_1008FA0F0(v27, v29, v91);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
    v30(v25, v19);
    uint64_t v77 = v30;
    v30(v73, v19);
    _os_log_impl((void *)&_mh_execute_header, v76, v78, "Metadata read time: %{public}s", v74, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v82, v22);
  }
  else
  {
    uint64_t v41 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
    v41(v0[44], v19);
    uint64_t v77 = v41;
    v41(v17, v19);

    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
  }
  uint64_t v71 = v0[10];
  uint64_t v72 = v0[84];
  uint64_t v69 = v0[73];
  uint64_t v70 = v0[74];
  uint64_t v62 = v0[71];
  unint64_t v63 = v0[83];
  uint64_t v42 = v0[48];
  uint64_t v67 = v0[47];
  uint64_t v68 = v0[49];
  unint64_t v65 = v0[72];
  uint64_t v66 = v0[46];
  uint64_t v60 = v0[45];
  uint64_t v61 = v0[82];
  uint64_t v59 = v0[41];
  uint64_t v43 = v0[22];
  uint64_t v44 = v0[23];
  uint64_t v45 = v0[21];
  uint64_t v58 = v0[20];
  uint64_t v46 = v0[19];
  uint64_t v64 = v0[18];
  uint64_t v47 = v0[14];
  Peripheral.id.getter();
  Identifier.id.getter();
  (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v44, v45);
  swift_release();
  sub_100037A24(v84, v86);
  sub_100037A24(v61, v63);
  sub_100037A24(v62, v65);
  v77(v60, v59);
  v77(v66, v59);
  (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v68, v67);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v46 + 32))(v47, v58, v64);
  uint64_t v48 = (int *)type metadata accessor for AccessoryMetadata(0);
  uint64_t v49 = (void *)(v47 + v48[5]);
  *uint64_t v49 = v69;
  v49[1] = v70;
  os_log_type_t v50 = (void *)(v47 + v48[6]);
  *os_log_type_t v50 = v71;
  v50[1] = v72;
  uint64_t v51 = (void *)(v47 + v48[7]);
  *uint64_t v51 = 0;
  v51[1] = 0;
  *(_DWORD *)(v47 + v48[8]) = v88;
  uint64_t v52 = v47 + v48[9];
  *(_DWORD *)uint64_t v52 = 0;
  *(unsigned char *)(v52 + 4) = 1;
  uint64_t v53 = v47 + v48[10];
  *(void *)uint64_t v53 = 0;
  *(void *)(v53 + 8) = 0;
  *(unsigned char *)(v53 + 16) = 1;
  uint64_t v54 = v47 + v48[11];
  *(void *)uint64_t v54 = 0;
  *(unsigned char *)(v54 + 8) = 1;
  uint64_t v55 = v47 + v48[12];
  *(_DWORD *)uint64_t v55 = 0;
  *(unsigned char *)(v55 + 4) = 1;
  *(unsigned char *)(v47 + v48[13]) = 4;
  *(unsigned char *)(v47 + v48[14]) = 5;
  uint64_t v56 = (void *)(v47 + v48[15]);
  *uint64_t v56 = 0;
  v56[1] = 0xE000000000000000;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v57 = (uint64_t (*)(void))v0[1];
  return v57();
}

uint64_t sub_100F74AA8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 752) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 136);
  if (v0) {
    uint64_t v4 = sub_100F75900;
  }
  else {
    uint64_t v4 = sub_100F74BD4;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100F74BD4()
{
  uint64_t v1 = v0[48];
  uint64_t v2 = v0[49];
  uint64_t v3 = v0[47];
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100F74D3C()
{
  (*(void (**)(void, void))(v0[42] + 8))(v0[46], v0[41]);
  v0[92] = v0[51];
  uint64_t v3 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                         + async function pointer to dispatch thunk of Peripheral.cancelConnection());
  uint64_t v1 = (void *)swift_task_alloc();
  v0[93] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100F74AA8;
  return v3();
}

uint64_t sub_100F74E00()
{
  (*(void (**)(void, void))(v0[42] + 8))(v0[46], v0[41]);
  v0[92] = v0[54];
  uint64_t v3 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                         + async function pointer to dispatch thunk of Peripheral.cancelConnection());
  uint64_t v1 = (void *)swift_task_alloc();
  v0[93] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100F74AA8;
  return v3();
}

uint64_t sub_100F74EC4()
{
  uint64_t v1 = v0[46];
  uint64_t v2 = v0[41];
  uint64_t v3 = v0[42];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v0[92] = v0[57];
  uint64_t v6 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                         + async function pointer to dispatch thunk of Peripheral.cancelConnection());
  uint64_t v4 = (void *)swift_task_alloc();
  v0[93] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100F74AA8;
  return v6();
}

uint64_t sub_100F74FA0()
{
  uint64_t v1 = v0[46];
  uint64_t v2 = v0[41];
  uint64_t v3 = v0[42];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v0[92] = v0[61];
  uint64_t v6 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                         + async function pointer to dispatch thunk of Peripheral.cancelConnection());
  uint64_t v4 = (void *)swift_task_alloc();
  v0[93] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100F74AA8;
  return v6();
}

uint64_t sub_100F7507C()
{
  uint64_t v1 = v0[46];
  uint64_t v2 = v0[41];
  uint64_t v3 = v0[42];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v0[92] = v0[65];
  uint64_t v6 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                         + async function pointer to dispatch thunk of Peripheral.cancelConnection());
  uint64_t v4 = (void *)swift_task_alloc();
  v0[93] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100F74AA8;
  return v6();
}

uint64_t sub_100F75158()
{
  uint64_t v1 = v0[46];
  uint64_t v2 = v0[41];
  uint64_t v3 = v0[42];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v0[92] = v0[68];
  uint64_t v6 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                         + async function pointer to dispatch thunk of Peripheral.cancelConnection());
  uint64_t v4 = (void *)swift_task_alloc();
  v0[93] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100F74AA8;
  return v6();
}

uint64_t sub_100F75234()
{
  unint64_t v1 = v0[74];
  uint64_t v2 = v0[73];
  unint64_t v3 = v0[72];
  uint64_t v4 = v0[71];
  uint64_t v5 = v0[46];
  uint64_t v6 = v0[41];
  uint64_t v7 = v0[42];
  swift_release();
  sub_100037A24(v2, v1);
  sub_100037A24(v4, v3);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  v0[92] = v0[77];
  uint64_t v10 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                          + async function pointer to dispatch thunk of Peripheral.cancelConnection());
  uint64_t v8 = (void *)swift_task_alloc();
  v0[93] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_100F74AA8;
  return v10();
}

uint64_t sub_100F75348()
{
  unint64_t v1 = v0[74];
  uint64_t v2 = v0[73];
  unint64_t v3 = v0[72];
  uint64_t v4 = v0[71];
  uint64_t v5 = v0[46];
  uint64_t v6 = v0[41];
  uint64_t v7 = v0[42];
  swift_release();
  sub_100037A24(v2, v1);
  sub_100037A24(v4, v3);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  v0[92] = v0[79];
  uint64_t v10 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                          + async function pointer to dispatch thunk of Peripheral.cancelConnection());
  uint64_t v8 = (void *)swift_task_alloc();
  v0[93] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_100F74AA8;
  return v10();
}

uint64_t sub_100F7545C()
{
  unint64_t v1 = v0[74];
  uint64_t v2 = v0[73];
  unint64_t v3 = v0[72];
  uint64_t v4 = v0[71];
  uint64_t v5 = v0[46];
  uint64_t v6 = v0[41];
  uint64_t v7 = v0[42];
  swift_release();
  sub_100037A24(v2, v1);
  sub_100037A24(v4, v3);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  v0[92] = v0[81];
  uint64_t v10 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                          + async function pointer to dispatch thunk of Peripheral.cancelConnection());
  uint64_t v8 = (void *)swift_task_alloc();
  v0[93] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_100F74AA8;
  return v10();
}

uint64_t sub_100F75570()
{
  unint64_t v1 = v0[83];
  uint64_t v2 = v0[82];
  unint64_t v3 = v0[74];
  uint64_t v4 = v0[73];
  unint64_t v5 = v0[72];
  uint64_t v6 = v0[71];
  uint64_t v7 = v0[46];
  uint64_t v8 = v0[41];
  uint64_t v9 = v0[42];
  swift_release();
  sub_100037A24(v4, v3);
  sub_100037A24(v2, v1);
  sub_100037A24(v6, v5);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  v0[92] = v0[87];
  uint64_t v12 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                          + async function pointer to dispatch thunk of Peripheral.cancelConnection());
  uint64_t v10 = (void *)swift_task_alloc();
  v0[93] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_100F74AA8;
  return v12();
}

uint64_t sub_100F756A0()
{
  unint64_t v1 = v0[83];
  uint64_t v2 = v0[82];
  unint64_t v3 = v0[74];
  uint64_t v4 = v0[73];
  unint64_t v5 = v0[72];
  uint64_t v6 = v0[71];
  uint64_t v7 = v0[46];
  uint64_t v8 = v0[41];
  uint64_t v9 = v0[42];
  swift_release();
  sub_100037A24(v4, v3);
  sub_100037A24(v2, v1);
  sub_100037A24(v6, v5);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  v0[92] = v0[89];
  uint64_t v12 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                          + async function pointer to dispatch thunk of Peripheral.cancelConnection());
  uint64_t v10 = (void *)swift_task_alloc();
  v0[93] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_100F74AA8;
  return v12();
}

uint64_t sub_100F757D0()
{
  unint64_t v1 = v0[83];
  uint64_t v2 = v0[82];
  unint64_t v3 = v0[74];
  uint64_t v4 = v0[73];
  unint64_t v5 = v0[72];
  uint64_t v6 = v0[71];
  uint64_t v7 = v0[46];
  uint64_t v8 = v0[41];
  uint64_t v9 = v0[42];
  swift_release();
  sub_100037A24(v4, v3);
  sub_100037A24(v2, v1);
  sub_100037A24(v6, v5);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  v0[92] = v0[91];
  uint64_t v12 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of Peripheral.cancelConnection()
                          + async function pointer to dispatch thunk of Peripheral.cancelConnection());
  uint64_t v10 = (void *)swift_task_alloc();
  v0[93] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_100F74AA8;
  return v12();
}

uint64_t sub_100F75900()
{
  if (qword_101637228 != -1) {
    swift_once();
  }
  sub_100010324(v0[27], (uint64_t)qword_10170EF60);
  swift_errorRetain();
  unint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    unint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)unint64_t v3 = 138543362;
    uint64_t v5 = _convertErrorToNSError(_:)();
    v0[12] = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "cancelConnection error in _readAccessoryMetadata() catch block: %{public}@", v3, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v6 = v0[48];
  uint64_t v7 = v0[49];
  uint64_t v8 = v0[47];
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_100F75BD0()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100F75C08(uint64_t a1)
{
  return sub_100F68A00(a1, *(void *)(v1 + 16));
}

uint64_t type metadata accessor for BeaconScanner.Error(uint64_t a1)
{
  return sub_1000F4EA4(a1, (uint64_t *)&unk_101665630);
}

uint64_t sub_100F75C30(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100F75C78()
{
  uint64_t v1 = sub_10000588C((uint64_t *)&unk_1016665C0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((((v4 + *(void *)(v2 + 64) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100F75D7C(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_10000588C((uint64_t *)&unk_1016665C0) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = v5 + *(void *)(v4 + 64);
  unint64_t v7 = (v6 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void *)(v1 + 16);
  uint64_t v9 = *(void *)(v1 + 24);
  uint64_t v10 = v1 + v5;
  uint64_t v11 = *(void *)(v1 + v7);
  char v12 = *(unsigned char *)(v1 + v7 + 8);
  uint64_t v13 = *(void *)(v1 + ((v6 + 23) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v14;
  *uint64_t v14 = v2;
  v14[1] = sub_100033F68;
  return sub_100F68D90(a1, v8, v9, v10, v11, v12, v13);
}

uint64_t sub_100F75ED8()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100F75F10()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100033F68;
  v3[15] = v2;
  return _swift_task_switch(sub_100F6C504, 0, 0);
}

uint64_t sub_100F75FBC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100F76024(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100F76084(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

id sub_100F760EC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v60 = (char *)&v46 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DetailedDiscoveredObject(0);
  __chkstk_darwin(v5 - 8);
  unint64_t v7 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (int *)type metadata accessor for DiscoveredObject(0);
  __chkstk_darwin(v8);
  uint64_t v10 = (unsigned __int8 *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100F76084(a1, (uint64_t)v10, type metadata accessor for DiscoveredObject);
  sub_10001D4B0(0, &qword_101665568);
  sub_100F76084(a1, (uint64_t)v7, type metadata accessor for DetailedDiscoveredObject);
  id v11 = sub_100F6C824((uint64_t)v7);
  unsigned int v12 = *v10;
  int v13 = v10[1];
  id v56 = v11;
  if (v13 != 1)
  {
    if (v12 == 1)
    {
      os_log_type_t v15 = (uint64_t *)(a1 + v8[9]);
      uint64_t v17 = *v15;
      unint64_t v16 = v15[1];
      uint64_t v59 = *v15;
      if ((v16 & 0x2000000000000000) != 0) {
        v16 &= ~0x2000000000000000uLL;
      }
      unint64_t v48 = v16;
      sub_1000361E0(v17, v16);
      unsigned int v47 = 1;
    }
    else
    {
      unsigned int v47 = v12;
      uint64_t v59 = 0;
      unint64_t v48 = 0xC000000000000000;
    }
    uint64_t v14 = 2;
    goto LABEL_10;
  }
  if (v12)
  {
    uint64_t v59 = 0;
    unsigned int v47 = 0;
    unint64_t v48 = 0xC000000000000000;
    uint64_t v14 = 1;
LABEL_10:
    uint64_t v46 = v14;
    goto LABEL_11;
  }
  uint64_t v40 = (uint64_t *)(a1 + v8[9]);
  uint64_t v41 = *v40;
  unint64_t v42 = v40[1];
  uint64_t v59 = *v40;
  if ((v42 & 0x2000000000000000) != 0) {
    v42 &= ~0x2000000000000000uLL;
  }
  unint64_t v48 = v42;
  sub_1000361E0(v41, v42);
  unsigned int v47 = 0;
  uint64_t v46 = 0;
LABEL_11:
  unsigned int v18 = v10[2];
  uint64_t v20 = *((void *)v10 + 1);
  unint64_t v19 = *((void *)v10 + 2);
  (*(void (**)(char *, unsigned __int8 *, uint64_t))(v3 + 16))(v60, &v10[v8[7]], v2);
  sub_100037A38(v20, v19);
  uint64_t v21 = MACAddress.data.getter();
  int v22 = v10[v8[11]];
  int v23 = v10[v8[12]];
  unsigned __int8 v24 = v10[v8[13] + 1];
  uint64_t v57 = v3;
  uint64_t v58 = v2;
  int v54 = v22;
  unsigned int v55 = v18;
  int v53 = v23;
  unint64_t v26 = v25;
  uint64_t v27 = v21;
  if (v24) {
    Class isa = 0;
  }
  else {
    Class isa = UInt8._bridgeToObjectiveC()().super.super.isa;
  }
  id v52 = (id)*(int *)&v10[v8[15]];
  sub_10001D4B0(0, &qword_101665570);
  sub_100F76084(a1, (uint64_t)v7, type metadata accessor for DetailedDiscoveredObject);
  id v28 = sub_100F6CAE0((uint64_t)v7);
  Class v29 = 0;
  if (v19 >> 60 != 15)
  {
    Class v29 = Data._bridgeToObjectiveC()().super.isa;
    sub_100037A24(v20, v19);
  }
  id v30 = objc_allocWithZone((Class)SPScannedObject);
  unint64_t v31 = v60;
  Class v32 = Date._bridgeToObjectiveC()().super.isa;
  unint64_t v50 = v26;
  uint64_t v51 = v27;
  Class v33 = Data._bridgeToObjectiveC()().super.isa;
  unint64_t v34 = v48;
  Class v35 = Data._bridgeToObjectiveC()().super.isa;
  id v45 = v28;
  uint64_t v36 = v56;
  id v44 = v52;
  id v52 = v28;
  Class v37 = isa;
  BYTE1(v43) = v53;
  LOBYTE(v43) = v54;
  id v38 = [v30 initWithAdvertisementType:v46 poshNetwork:v47 nearOwner:v55 vendorPayload:v29 scanDate:v32 address:v33 advertisement:v35 status:isa hint:v44 rssi:v56 indexInformation:v43 accessoryInformation:v45];

  (*(void (**)(char *, uint64_t))(v57 + 8))(v31, v58);
  sub_10001CFB8(v59, v34);
  sub_10001CFB8(v51, v50);
  sub_100F76024((uint64_t)v10, type metadata accessor for DiscoveredObject);
  return v38;
}

uint64_t sub_100F76574(uint64_t a1)
{
  return sub_100F6F658(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_100F76580(uint64_t a1)
{
  return sub_100F6ED58(a1);
}

uint64_t sub_100F76588()
{
  uint64_t v1 = sub_10000588C(&qword_101639A70);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100F76674(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_10000588C(&qword_101639A70) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = v1[5];
  uint64_t v10 = (uint64_t)v1 + v5;
  uint64_t v11 = *(void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  unsigned int v12 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v12;
  *unsigned int v12 = v2;
  v12[1] = sub_10001D2E4;
  return sub_100F6F94C(a1, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_100F767B0()
{
  uint64_t v1 = sub_10000588C(&qword_101639A70);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100F76894(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_10000588C(&qword_101639A70) - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_10001D2E4;
  return sub_100F71774(a1, v5, v6, v7);
}

uint64_t sub_100F769BC()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100F769FC()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100033F68;
  v3[2] = v2;
  return _swift_task_switch(sub_100F68C8C, v2, 0);
}

uint64_t *sub_100F76AA4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    uint64_t v7 = sub_10000588C((uint64_t *)&unk_1016654A0);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 2, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 2, v7);
    }
  }
  return a1;
}

uint64_t sub_100F76BF4(uint64_t a1)
{
  uint64_t v2 = sub_10000588C((uint64_t *)&unk_1016654A0);
  uint64_t v5 = *(void *)(v2 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 2, v2);
  if (!result)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
    return v4(a1, v2);
  }
  return result;
}

void *sub_100F76CC8(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_1016654A0);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 2, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  }
  return a1;
}

void *sub_100F76DDC(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_1016654A0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 2, v6);
  int v10 = v8(a2, 2, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  return a1;
}

void *sub_100F76F54(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_1016654A0);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 2, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  }
  return a1;
}

void *sub_100F77068(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_1016654A0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 2, v6);
  int v10 = v8(a2, 2, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 2, v6);
  return a1;
}

uint64_t sub_100F771E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100F771F4);
}

uint64_t sub_100F771F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_1016654A0);
  unsigned int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 3) {
    return v5 - 2;
  }
  else {
    return 0;
  }
}

uint64_t sub_100F77264(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100F77278);
}

uint64_t sub_100F77278(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 2);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_1016654A0);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(a1, v5, a3, v6);
}

uint64_t sub_100F77300(uint64_t a1)
{
  uint64_t v2 = sub_10000588C((uint64_t *)&unk_1016654A0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48);

  return v3(a1, 2, v2);
}

uint64_t sub_100F7736C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_1016654A0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, 2, v4);
}

void sub_100F773E0()
{
  sub_100F77488(319, (unint64_t *)&unk_101665640, (uint64_t (*)(uint64_t))&type metadata accessor for Characteristic, (uint64_t (*)(uint64_t, uint64_t))&type metadata accessor for Identifier);
  if (v0 <= 0x3F) {
    swift_initEnumMetadataSinglePayload();
  }
}

void sub_100F77488(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

unint64_t sub_100F774EC(char a1)
{
  unint64_t result = 0x4E6E6F6973736573;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x737574617473;
      break;
    case 2:
      unint64_t result = 0x69634572656E776FLL;
      break;
    case 3:
      unint64_t result = 0x69684372656E776FLL;
      break;
    case 4:
      unint64_t result = 0xD000000000000011;
      break;
    case 5:
      unint64_t result = 0x636E6F4E68747561;
      break;
    case 6:
      unint64_t result = 0x754E6C6169726573;
      break;
    case 7:
      unint64_t result = 0x6169726553746C61;
      break;
    case 8:
      unint64_t result = 0x7461747365747461;
      break;
    case 9:
      unint64_t result = 0x726F737365636361;
      break;
    case 10:
      unint64_t result = 0x7374726563;
      break;
    case 11:
      unint64_t result = 7500643;
      break;
    case 12:
      unint64_t result = 0xD000000000000013;
      break;
    case 13:
      unint64_t result = 0x7372655663657073;
      break;
    case 14:
      unint64_t result = 0x657261776D726966;
      break;
    case 15:
      unint64_t result = 0x49746375646F7270;
      break;
    case 16:
      unint64_t result = 0x6449726F646E6576;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100F77730(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_101665660);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100F7A5F4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v12 = *v3;
  char v11 = 0;
  sub_100037BB4();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v12) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    long long v12 = *(long long *)((char *)v3 + 72);
    char v11 = 5;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = *(long long *)((char *)v3 + 88);
    char v11 = 6;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = *(long long *)((char *)v3 + 104);
    char v11 = 7;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = *(long long *)((char *)v3 + 120);
    char v11 = 8;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = *(long long *)((char *)v3 + 136);
    char v11 = 9;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = *(long long *)((char *)v3 + 152);
    char v11 = 10;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = *(long long *)((char *)v3 + 168);
    char v11 = 11;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    sub_1001F1980((uint64_t)v3 + 184, (uint64_t)v13);
    sub_1001F1980((uint64_t)v13, (uint64_t)&v12);
    char v11 = 12;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v12) = 13;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v12) = 14;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 15;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    LOBYTE(v12) = 16;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_100F77BB4()
{
  return sub_100F774EC(*v0);
}

uint64_t sub_100F77BBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100F7A854(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100F77BE4(uint64_t a1)
{
  unint64_t v2 = sub_100F7A5F4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100F77C20(uint64_t a1)
{
  unint64_t v2 = sub_100F7A5F4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100F77C5C(void *a1)
{
  memcpy(__dst, v1, sizeof(__dst));
  return sub_100F77730(a1);
}

uint64_t sub_100F77CB0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = a1[22];
  unint64_t v5 = a1[23];
  unint64_t v49 = a1[7];
  uint64_t v50 = a1[6];
  sub_1000361E0(v50, v49);
  unint64_t v47 = v5;
  uint64_t v48 = v4;
  sub_1000361E0(v4, v5);
  sub_1000362FC();
  uint64_t v42 = DataProtocol.intValue.getter();
  uint64_t v6 = a1[1];
  uint64_t v7 = a1[3];
  uint64_t v39 = a1[2];
  uint64_t v40 = *a1;
  uint64_t v38 = a1[4];
  uint64_t v8 = a1[8];
  uint64_t v10 = a1[10];
  unint64_t v9 = a1[11];
  uint64_t v11 = a1[18];
  unint64_t v12 = a1[19];
  unint64_t v51 = a1[9];
  uint64_t v52 = a1[16];
  unint64_t v59 = a1[17];
  uint64_t v60 = a1[14];
  unint64_t v54 = a1[15];
  unint64_t v56 = a1[13];
  uint64_t v57 = a1[12];
  uint64_t v58 = a1[20];
  unint64_t v53 = a1[21];
  uint64_t v46 = a1[26];
  uint64_t v55 = a1[27];
  unint64_t v13 = a1[29];
  uint64_t v37 = a1[28];
  uint64_t v41 = a1[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000361E0(v8, v51);
  unint64_t v44 = v9;
  uint64_t v45 = v10;
  sub_1000361E0(v10, v9);
  uint64_t v43 = v11;
  uint64_t v14 = v11;
  uint64_t v15 = v55;
  sub_1000361E0(v14, v12);
  sub_1000361E0(v52, v59);
  sub_1000361E0(v60, v54);
  sub_1000361E0(v57, v56);
  sub_100037A38(v58, v53);
  swift_bridgeObjectRetain();
  if (v13 >> 60 == 15)
  {
    uint64_t result = (uint64_t)sub_100F79E58(a1);
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = v50;
  }
  else
  {
    uint64_t v22 = sub_1002AA5D4(v37, v13);
    unint64_t v24 = v23;
    uint64_t v25 = Data.hexString.getter();
    uint64_t v35 = v26;
    uint64_t v36 = v25;
    sub_10001CFB8(v22, v24);
    switch(v13 >> 62)
    {
      case 1uLL:
        LODWORD(v27) = HIDWORD(v37) - v37;
        if (__OFSUB__(HIDWORD(v37), v37)) {
          goto LABEL_11;
        }
        uint64_t v27 = (int)v27;
LABEL_7:
        if (v27 < -1)
        {
          __break(1u);
LABEL_11:
          __break(1u);
LABEL_12:
          __break(1u);
          JUMPOUT(0x100F78024);
        }
LABEL_8:
        uint64_t v31 = Data.subdata(in:)();
        unint64_t v33 = v32;
        uint64_t v17 = Data.hexString.getter();
        uint64_t v18 = v34;
        sub_100F79E58(a1);
        uint64_t result = sub_10001CFB8(v31, v33);
        uint64_t v21 = v50;
        uint64_t v15 = v55;
        uint64_t v20 = v35;
        uint64_t v19 = v36;
        break;
      case 2uLL:
        uint64_t v29 = *(void *)(v37 + 16);
        uint64_t v28 = *(void *)(v37 + 24);
        BOOL v30 = __OFSUB__(v28, v29);
        uint64_t v27 = v28 - v29;
        if (!v30) {
          goto LABEL_7;
        }
        goto LABEL_12;
      default:
        goto LABEL_8;
    }
  }
  *a2 = v48;
  a2[1] = v47;
  a2[2] = v42;
  a2[3] = v40;
  a2[4] = v6;
  a2[5] = v39;
  a2[6] = v7;
  a2[7] = v38;
  a2[8] = v41;
  a2[9] = v21;
  a2[10] = v49;
  a2[11] = v8;
  a2[12] = v51;
  a2[13] = v45;
  a2[14] = v44;
  a2[15] = v43;
  a2[16] = v12;
  a2[17] = v52;
  a2[18] = v59;
  a2[19] = v57;
  a2[20] = v56;
  a2[21] = v60;
  a2[22] = v54;
  a2[23] = v58;
  a2[24] = v53;
  a2[25] = 0x302E302E32;
  a2[26] = 0xE500000000000000;
  a2[27] = v46;
  a2[28] = v15;
  a2[29] = v19;
  a2[30] = v20;
  a2[31] = v17;
  a2[32] = v18;
  return result;
}

uint64_t sub_100F78034(uint64_t a1, uint64_t a2)
{
  v2[142] = a2;
  v2[141] = a1;
  uint64_t v3 = type metadata accessor for HashAlgorithm();
  v2[143] = v3;
  v2[144] = *(void *)(v3 - 8);
  v2[145] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Locale();
  v2[146] = v4;
  v2[147] = *(void *)(v4 - 8);
  v2[148] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Date();
  v2[149] = v5;
  v2[150] = *(void *)(v5 - 8);
  v2[151] = swift_task_alloc();
  return _swift_task_switch(sub_100F781B0, 0, 0);
}

void sub_100F781B0()
{
  unint64_t v1 = sub_10092D8F8((uint64_t)_swiftEmptyArrayStorage);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(1702195828, 0xE400000000000000, 0xD00000000000001BLL, 0x80000001013F64C0, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  id v3 = [self currentDevice];
  if (!v3)
  {
    __break(1u);
    goto LABEL_12;
  }
  uint64_t v4 = v3;
  id v5 = [v3 serverFriendlyDescription];

  if (!v5)
  {
LABEL_12:
    __break(1u);
    return;
  }
  uint64_t v46 = v0 + 2;
  uint64_t v6 = v0[151];
  uint64_t v7 = v0[150];
  uint64_t v8 = v0[149];
  uint64_t v47 = v0[148];
  uint64_t v48 = v0[147];
  uint64_t v49 = v0[146];
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;

  char v12 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(v9, v11, 0xD000000000000011, 0x80000001013F64E0, v12);
  unint64_t v13 = v1;
  swift_bridgeObjectRelease();
  Date.init()();
  uint64_t v14 = Date.epoch.getter();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
  v0[138] = v14;
  uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v17 = v16;
  char v18 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(v15, v17, 0xD000000000000015, 0x80000001013F6500, v18);
  swift_bridgeObjectRelease();
  v0[137] = 1;
  uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v21 = v20;
  char v22 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(v19, v21, 0xD000000000000013, 0x80000001013F6520, v22);
  unint64_t v23 = v13;
  uint64_t v24 = swift_bridgeObjectRelease();
  uint64_t v25 = sub_100BCABFC(v24);
  uint64_t v27 = v26;
  char v28 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(v25, v27, 0x6567412D72657355, 0xEA0000000000746ELL, v28);
  swift_bridgeObjectRelease();
  static Locale.current.getter();
  uint64_t v29 = Locale.acceptLanguageCode.getter();
  uint64_t v31 = v30;
  (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v47, v49);
  char v32 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(v29, v31, 0x4C2D747065636341, 0xEF65676175676E61, v32);
  unint64_t v33 = v23;
  swift_bridgeObjectRelease();
  if (qword_101637188 != -1) {
    swift_once();
  }
  uint64_t v34 = (void *)qword_10170EE68;
  id v35 = [self sharedInstance];
  unsigned int v36 = [v35 isInternalBuild];

  if (v36)
  {
    NSString v37 = String._bridgeToObjectiveC()();
    unsigned int v38 = [v34 BOOLForKey:v37];

    if (v38)
    {
      char v39 = swift_isUniquelyReferenced_nonNull_native();
      sub_10016C0FC(0x7465722C6C616572, 0xEF302D726F727245, 0xD000000000000012, 0x80000001013F6560, v39);
      swift_bridgeObjectRelease();
    }
  }
  v0[152] = v33;
  uint64_t v40 = (uint64_t *)v0[141];
  sub_1004AF2A0(v40);
  sub_100F77CB0(v40, v46);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  memcpy(v0 + 68, v46, 0x108uLL);
  sub_100F79B74();
  uint64_t v41 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  v0[153] = v41;
  v0[154] = v42;
  uint64_t v43 = v41;
  unint64_t v44 = v42;
  swift_release();
  sub_1000361E0(v43, v44);
  uint64_t v50 = (void (__cdecl *)())((char *)&dword_10165AAF8 + dword_10165AAF8);
  uint64_t v45 = (void *)swift_task_alloc();
  v0[155] = v45;
  *uint64_t v45 = v0;
  v45[1] = sub_100F78978;
  v50();
}

uint64_t sub_100F78978(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 1248) = a1;
  *(void *)(v3 + 1256) = a2;
  swift_task_dealloc();
  return _swift_task_switch(sub_100F78A7C, 0, 0);
}

uint64_t sub_100F78A7C()
{
  unint64_t v1 = v0[157];
  uint64_t v2 = v0[156];
  unint64_t v3 = v0[154];
  uint64_t v4 = v0[153];
  uint64_t v5 = v0[145];
  uint64_t v6 = v0[144];
  uint64_t v7 = v0[143];
  v0[134] = v2;
  v0[135] = v1;
  sub_1000361E0(v4, v3);
  sub_1000361E0(v2, v1);
  sub_100A42CBC(v4, v3);
  sub_10001CFB8(v4, v3);
  sub_10001CFB8(v2, v1);
  v0[158] = v0[134];
  v0[159] = v0[135];
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v5, enum case for HashAlgorithm.sha256(_:), v7);
  uint64_t v8 = Data.hash(algorithm:)();
  uint64_t v10 = v9;
  v0[160] = v8;
  v0[161] = v9;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_10165AAF0 + dword_10165AAF0);
  uint64_t v11 = (void *)swift_task_alloc();
  v0[162] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_100F78C18;
  uint64_t v12 = v0[142];
  return v14(v8, v10, v12);
}

uint64_t sub_100F78C18(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  *(void *)(*(void *)v2 + 1304) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_100F793C8;
  }
  else
  {
    unint64_t v6 = v4[161];
    uint64_t v7 = v4[160];
    v4[164] = a1;
    sub_10001CFB8(v7, v6);
    uint64_t v5 = sub_100F78D48;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100F78D48()
{
  uint64_t v52 = v0;
  uint64_t isa = (uint64_t)v0[164].isa;
  Class v2 = v0[163].isa;
  uint64_t v3 = (uint64_t)v0[152].isa;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v51[0] = v3;
  sub_1001EE9C8(isa, (uint64_t)sub_100BD6E00, 0, isUniquelyReferenced_nonNull_native, v51);
  if (v2)
  {
    return swift_bridgeObjectRelease();
  }
  unint64_t v6 = (unint64_t)v0[159].isa;
  uint64_t v7 = (uint64_t)v0[158].isa;
  uint64_t v8 = v51[0];
  swift_bridgeObjectRelease();
  sub_10001CFB8(v7, v6);
  if (qword_1016370D0 != -1) {
LABEL_39:
  }
    swift_once();
  uint64_t v46 = (uint64_t *)&v0[2];
  uint64_t v47 = v0;
  __dst = v0 + 35;
  uint64_t v9 = type metadata accessor for Logger();
  sub_100010324(v9, (uint64_t)qword_10170ECF8);
  unint64_t v0 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v0, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, v10, "Pairing lock header:", v11, 2u);
    swift_slowDealloc();
  }

  uint64_t v48 = v8 + 64;
  uint64_t v12 = -1;
  uint64_t v13 = -1 << *(unsigned char *)(v8 + 32);
  if (-v13 < 64) {
    uint64_t v12 = ~(-1 << -(char)v13);
  }
  unint64_t v14 = v12 & *(void *)(v8 + 64);
  int64_t v49 = (unint64_t)(63 - v13) >> 6;
  swift_bridgeObjectRetain();
  for (int64_t i = 0; ; int64_t i = v50)
  {
    if (v14)
    {
      unint64_t v16 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      int64_t v50 = i;
      unint64_t v17 = v16 | (i << 6);
      goto LABEL_29;
    }
    int64_t v18 = i + 1;
    if (__OFADD__(i, 1))
    {
      __break(1u);
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    unint64_t v0 = v47;
    if (v18 >= v49) {
      goto LABEL_31;
    }
    unint64_t v19 = *(void *)(v48 + 8 * v18);
    int64_t v20 = i + 1;
    if (!v19)
    {
      int64_t v20 = i + 2;
      if (i + 2 >= v49) {
        goto LABEL_31;
      }
      unint64_t v19 = *(void *)(v48 + 8 * v20);
      if (!v19)
      {
        int64_t v20 = i + 3;
        if (i + 3 >= v49) {
          goto LABEL_31;
        }
        unint64_t v19 = *(void *)(v48 + 8 * v20);
        if (!v19) {
          break;
        }
      }
    }
LABEL_28:
    unint64_t v14 = (v19 - 1) & v19;
    int64_t v50 = v20;
    unint64_t v17 = __clz(__rbit64(v19)) + (v20 << 6);
LABEL_29:
    uint64_t v22 = 16 * v17;
    unint64_t v23 = (uint64_t *)(*(void *)(v8 + 48) + v22);
    uint64_t v25 = *v23;
    unint64_t v24 = v23[1];
    uint64_t v26 = (uint64_t *)(*(void *)(v8 + 56) + v22);
    uint64_t v27 = *v26;
    unint64_t v28 = v26[1];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v29 = Logger.logObject.getter();
    os_log_type_t v30 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = v8;
      uint64_t v32 = swift_slowAlloc();
      unint64_t v0 = swift_slowAlloc();
      v51[0] = (uint64_t)v0;
      *(_DWORD *)uint64_t v32 = 136315394;
      swift_bridgeObjectRetain();
      *(void *)(v32 + 4) = sub_1008FA0F0(v25, v24, v51);
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v32 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(void *)(v32 + 14) = sub_1008FA0F0(v27, v28, v51);
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "%s: %s", (uint8_t *)v32, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v8 = v31;
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
  }
  uint64_t v21 = i + 4;
  if (i + 4 < v49)
  {
    unint64_t v19 = *(void *)(v48 + 8 * v21);
    if (!v19)
    {
      while (1)
      {
        int64_t v20 = v21 + 1;
        if (__OFADD__(v21, 1)) {
          goto LABEL_38;
        }
        if (v20 >= v49) {
          goto LABEL_31;
        }
        unint64_t v19 = *(void *)(v48 + 8 * v20);
        ++v21;
        if (v19) {
          goto LABEL_28;
        }
      }
    }
    int64_t v20 = i + 4;
    goto LABEL_28;
  }
LABEL_31:
  swift_release();
  sub_100F79BC8(v46);
  sub_100F79BC8(v46);
  unint64_t v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.debug.getter();
  BOOL v35 = os_log_type_enabled(v33, v34);
  unint64_t v36 = (unint64_t)v47[154].isa;
  uint64_t v37 = (uint64_t)v47[153].isa;
  unsigned int v38 = v47[141].isa;
  if (v35)
  {
    char v39 = (uint8_t *)swift_slowAlloc();
    v51[0] = swift_slowAlloc();
    *(_DWORD *)char v39 = 136315138;
    unint64_t v0 = v47;
    memcpy(__dst, v46, 0x108uLL);
    sub_100F79BC8(v46);
    uint64_t v40 = String.init<A>(describing:)();
    v47[139].uint64_t isa = (Class)sub_1008FA0F0(v40, v41, v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100F79D10(v46);
    sub_100F79D10(v46);
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "Pairing ack body %s", v39, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();
    sub_100F79E58(v38);

    sub_10001CFB8(v37, v36);
    sub_100F79D10(v46);
  }
  else
  {
    sub_100F79D10(v46);
    sub_10001CFB8(v37, v36);
    sub_100F79D10(v46);
    sub_100F79D10(v46);
    swift_release();
    sub_100F79E58(v38);
  }
  Class v42 = v0[154].isa;
  Class v43 = v0[153].isa;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v44 = (uint64_t (*)(uint64_t, Class, Class))v0[1].isa;
  return v44(v8, v43, v42);
}

uint64_t sub_100F793C8()
{
  uint64_t v53 = v0;
  unint64_t v1 = *(void *)(v0 + 1272);
  uint64_t v2 = *(void *)(v0 + 1264);
  sub_10001CFB8(*(void *)(v0 + 1280), *(void *)(v0 + 1288));
  sub_10001CFB8(v2, v1);
  if (qword_101637320 == -1) {
    goto LABEL_2;
  }
  while (1)
  {
    swift_once();
LABEL_2:
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_10170F098);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      unint64_t v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v7 = (void *)swift_slowAlloc();
      *(_DWORD *)unint64_t v6 = 138543362;
      swift_errorRetain();
      uint64_t v8 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 1120) = v8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v7 = v8;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to generate attestation header: %{public}@.", v6, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v9 = *(void *)(v0 + 1216);
    if (qword_1016370D0 != -1) {
      swift_once();
    }
    uint64_t v46 = (void *)v0;
    uint64_t v47 = (uint64_t *)(v0 + 16);
    __dst = (void *)(v0 + 280);
    sub_100010324(v3, (uint64_t)qword_10170ECF8);
    uint64_t v0 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled((os_log_t)v0, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v0, v10, "Pairing lock header:", v11, 2u);
      swift_slowDealloc();
    }

    uint64_t v49 = v9 + 64;
    uint64_t v12 = -1;
    uint64_t v13 = -1 << *(unsigned char *)(v9 + 32);
    if (-v13 < 64) {
      uint64_t v12 = ~(-1 << -(char)v13);
    }
    unint64_t v14 = v12 & *(void *)(v9 + 64);
    int64_t v50 = (unint64_t)(63 - v13) >> 6;
    swift_bridgeObjectRetain();
    int64_t v15 = 0;
    uint64_t v48 = v9;
    while (v14)
    {
      while (1)
      {
        unint64_t v16 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
        unint64_t v17 = v16 | (v15 << 6);
LABEL_29:
        uint64_t v21 = 16 * v17;
        uint64_t v22 = (uint64_t *)(*(void *)(v9 + 48) + v21);
        uint64_t v24 = *v22;
        unint64_t v23 = v22[1];
        uint64_t v25 = (uint64_t *)(*(void *)(v9 + 56) + v21);
        uint64_t v26 = *v25;
        unint64_t v27 = v25[1];
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        unint64_t v28 = Logger.logObject.getter();
        os_log_type_t v29 = static os_log_type_t.debug.getter();
        uint64_t v0 = v29;
        if (os_log_type_enabled(v28, v29)) {
          break;
        }
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();

        if (!v14) {
          goto LABEL_15;
        }
      }
      int64_t v30 = v15;
      uint64_t v31 = swift_slowAlloc();
      uint64_t v52 = swift_slowAlloc();
      *(_DWORD *)uint64_t v31 = 136315394;
      swift_bridgeObjectRetain();
      *(void *)(v31 + 4) = sub_1008FA0F0(v24, v23, &v52);
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v31 + 12) = 2080;
      swift_bridgeObjectRetain();
      *(void *)(v31 + 14) = sub_1008FA0F0(v26, v27, &v52);
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v28, (os_log_type_t)v0, "%s: %s", (uint8_t *)v31, 0x16u);
      swift_arrayDestroy();
      uint64_t v9 = v48;
      swift_slowDealloc();
      int64_t v15 = v30;
      swift_slowDealloc();
    }
LABEL_15:
    int64_t v18 = v15 + 1;
    if (__OFADD__(v15, 1))
    {
      __break(1u);
      goto LABEL_39;
    }
    uint64_t v0 = (uint64_t)v47;
    if (v18 >= v50) {
      break;
    }
    unint64_t v19 = *(void *)(v49 + 8 * v18);
    ++v15;
    if (v19) {
      goto LABEL_28;
    }
    int64_t v15 = v18 + 1;
    if (v18 + 1 >= v50) {
      break;
    }
    unint64_t v19 = *(void *)(v49 + 8 * v15);
    if (v19) {
      goto LABEL_28;
    }
    int64_t v15 = v18 + 2;
    if (v18 + 2 >= v50) {
      break;
    }
    unint64_t v19 = *(void *)(v49 + 8 * v15);
    if (v19) {
      goto LABEL_28;
    }
    int64_t v20 = v18 + 3;
    if (v20 >= v50) {
      break;
    }
    unint64_t v19 = *(void *)(v49 + 8 * v20);
    if (v19)
    {
      int64_t v15 = v20;
LABEL_28:
      unint64_t v14 = (v19 - 1) & v19;
      unint64_t v17 = __clz(__rbit64(v19)) + (v15 << 6);
      goto LABEL_29;
    }
    while (1)
    {
      int64_t v15 = v20 + 1;
      if (__OFADD__(v20, 1)) {
        break;
      }
      if (v15 >= v50) {
        goto LABEL_32;
      }
      unint64_t v19 = *(void *)(v49 + 8 * v15);
      ++v20;
      if (v19) {
        goto LABEL_28;
      }
    }
LABEL_39:
    __break(1u);
  }
LABEL_32:
  swift_release();
  sub_100F79BC8(v47);
  sub_100F79BC8(v47);
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.debug.getter();
  BOOL v34 = os_log_type_enabled(v32, v33);
  unint64_t v35 = v46[154];
  uint64_t v36 = v46[153];
  uint64_t v37 = (void *)v46[141];
  if (v34)
  {
    uint64_t v51 = (void *)v46[141];
    unsigned int v38 = (uint8_t *)swift_slowAlloc();
    uint64_t v52 = swift_slowAlloc();
    *(_DWORD *)unsigned int v38 = 136315138;
    memcpy(__dst, v47, 0x108uLL);
    sub_100F79BC8(v47);
    uint64_t v39 = String.init<A>(describing:)();
    v46[139] = sub_1008FA0F0(v39, v40, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100F79D10(v47);
    sub_100F79D10(v47);
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Pairing ack body %s", v38, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();
    sub_100F79E58(v51);

    sub_10001CFB8(v36, v35);
    sub_100F79D10(v47);
  }
  else
  {
    sub_100F79D10(v47);
    sub_10001CFB8(v36, v35);
    sub_100F79D10(v47);
    sub_100F79D10(v47);
    swift_release();
    sub_100F79E58(v37);
  }
  uint64_t v41 = v46[154];
  uint64_t v42 = v46[153];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  Class v43 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v46[1];
  return v43(v48, v42, v41);
}

unint64_t sub_100F79B74()
{
  unint64_t result = qword_101665658;
  if (!qword_101665658)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101665658);
  }
  return result;
}

uint64_t *sub_100F79BC8(uint64_t *a1)
{
  uint64_t v2 = a1[9];
  unint64_t v3 = a1[10];
  uint64_t v4 = a1[11];
  unint64_t v5 = a1[12];
  uint64_t v6 = a1[13];
  unint64_t v7 = a1[14];
  unint64_t v9 = a1[16];
  uint64_t v10 = a1[15];
  unint64_t v11 = a1[18];
  uint64_t v12 = a1[17];
  unint64_t v13 = a1[20];
  uint64_t v14 = a1[19];
  unint64_t v15 = a1[22];
  uint64_t v16 = a1[21];
  unint64_t v17 = a1[24];
  uint64_t v18 = a1[23];
  sub_1000361E0(*a1, a1[1]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000361E0(v2, v3);
  sub_1000361E0(v4, v5);
  sub_1000361E0(v6, v7);
  sub_1000361E0(v10, v9);
  sub_1000361E0(v12, v11);
  sub_1000361E0(v14, v13);
  sub_1000361E0(v16, v15);
  sub_100037A38(v18, v17);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *sub_100F79D10(uint64_t *a1)
{
  uint64_t v2 = a1[9];
  unint64_t v3 = a1[10];
  uint64_t v4 = a1[11];
  unint64_t v5 = a1[12];
  uint64_t v6 = a1[13];
  unint64_t v7 = a1[14];
  unint64_t v9 = a1[16];
  uint64_t v10 = a1[15];
  unint64_t v11 = a1[18];
  uint64_t v12 = a1[17];
  unint64_t v13 = a1[20];
  uint64_t v14 = a1[19];
  unint64_t v15 = a1[22];
  uint64_t v16 = a1[21];
  unint64_t v17 = a1[24];
  uint64_t v18 = a1[23];
  sub_10001CFB8(*a1, a1[1]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001CFB8(v2, v3);
  sub_10001CFB8(v4, v5);
  sub_10001CFB8(v6, v7);
  sub_10001CFB8(v10, v9);
  sub_10001CFB8(v12, v11);
  sub_10001CFB8(v14, v13);
  sub_10001CFB8(v16, v15);
  sub_100037A24(v18, v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return a1;
}

void *sub_100F79E58(void *a1)
{
  uint64_t v2 = a1[6];
  unint64_t v3 = a1[7];
  uint64_t v4 = a1[8];
  unint64_t v5 = a1[9];
  uint64_t v6 = a1[10];
  unint64_t v7 = a1[11];
  uint64_t v8 = a1[12];
  unint64_t v10 = a1[13];
  unint64_t v11 = a1[15];
  uint64_t v12 = a1[14];
  unint64_t v13 = a1[17];
  uint64_t v14 = a1[16];
  unint64_t v15 = a1[19];
  uint64_t v16 = a1[18];
  unint64_t v17 = a1[21];
  uint64_t v18 = a1[20];
  unint64_t v19 = a1[23];
  uint64_t v20 = a1[22];
  unint64_t v21 = a1[25];
  uint64_t v22 = a1[24];
  unint64_t v23 = a1[29];
  uint64_t v24 = a1[28];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001CFB8(v2, v3);
  sub_10001CFB8(v4, v5);
  sub_10001CFB8(v6, v7);
  sub_10001CFB8(v8, v10);
  sub_10001CFB8(v12, v11);
  sub_10001CFB8(v14, v13);
  sub_10001CFB8(v16, v15);
  sub_100037A24(v18, v17);
  sub_10001CFB8(v20, v19);
  sub_10001CFB8(v22, v21);
  swift_bridgeObjectRelease();
  sub_100037A24(v24, v23);
  return a1;
}

uint64_t destroy for PencilPairingLockAckRequestContent(uint64_t *a1)
{
  sub_10001CFB8(*a1, a1[1]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001CFB8(a1[9], a1[10]);
  sub_10001CFB8(a1[11], a1[12]);
  sub_10001CFB8(a1[13], a1[14]);
  sub_10001CFB8(a1[15], a1[16]);
  sub_10001CFB8(a1[17], a1[18]);
  sub_10001CFB8(a1[19], a1[20]);
  sub_10001CFB8(a1[21], a1[22]);
  unint64_t v2 = a1[24];
  if (v2 >> 60 != 15) {
    sub_10001CFB8(a1[23], v2);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PencilPairingLockAckRequestContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_1000361E0(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  uint64_t v8 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  unint64_t v9 = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000361E0(v8, v9);
  *(void *)(a1 + 72) = v8;
  *(void *)(a1 + 80) = v9;
  uint64_t v10 = *(void *)(a2 + 88);
  unint64_t v11 = *(void *)(a2 + 96);
  sub_1000361E0(v10, v11);
  *(void *)(a1 + 88) = v10;
  *(void *)(a1 + 96) = v11;
  uint64_t v12 = *(void *)(a2 + 104);
  unint64_t v13 = *(void *)(a2 + 112);
  sub_1000361E0(v12, v13);
  *(void *)(a1 + 104) = v12;
  *(void *)(a1 + 112) = v13;
  uint64_t v14 = *(void *)(a2 + 120);
  unint64_t v15 = *(void *)(a2 + 128);
  sub_1000361E0(v14, v15);
  *(void *)(a1 + 120) = v14;
  *(void *)(a1 + 128) = v15;
  uint64_t v16 = *(void *)(a2 + 136);
  unint64_t v17 = *(void *)(a2 + 144);
  sub_1000361E0(v16, v17);
  *(void *)(a1 + 136) = v16;
  *(void *)(a1 + 144) = v17;
  uint64_t v18 = *(void *)(a2 + 152);
  unint64_t v19 = *(void *)(a2 + 160);
  sub_1000361E0(v18, v19);
  *(void *)(a1 + 152) = v18;
  *(void *)(a1 + 160) = v19;
  uint64_t v20 = *(void *)(a2 + 168);
  unint64_t v21 = *(void *)(a2 + 176);
  sub_1000361E0(v20, v21);
  *(void *)(a1 + 168) = v20;
  *(void *)(a1 + 176) = v21;
  uint64_t v22 = (uint64_t *)(a2 + 184);
  unint64_t v23 = *(void *)(a2 + 192);
  if (v23 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 184) = *(_OWORD *)v22;
  }
  else
  {
    uint64_t v24 = *v22;
    sub_1000361E0(*v22, *(void *)(a2 + 192));
    *(void *)(a1 + 184) = v24;
    *(void *)(a1 + 192) = v23;
  }
  uint64_t v25 = *(void *)(a2 + 208);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = v25;
  uint64_t v26 = *(void *)(a2 + 224);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a1 + 224) = v26;
  uint64_t v27 = *(void *)(a2 + 240);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a1 + 240) = v27;
  uint64_t v28 = *(void *)(a2 + 248);
  uint64_t v29 = *(void *)(a2 + 256);
  *(void *)(a1 + 248) = v28;
  *(void *)(a1 + 256) = v29;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for PencilPairingLockAckRequestContent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_1000361E0(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_10001CFB8(v6, v7);
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[5] = a2[5];
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  a1[8] = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v8 = a2[9];
  unint64_t v9 = a2[10];
  sub_1000361E0(v8, v9);
  uint64_t v10 = a1[9];
  unint64_t v11 = a1[10];
  a1[9] = v8;
  a1[10] = v9;
  sub_10001CFB8(v10, v11);
  uint64_t v12 = a2[11];
  unint64_t v13 = a2[12];
  sub_1000361E0(v12, v13);
  uint64_t v14 = a1[11];
  unint64_t v15 = a1[12];
  a1[11] = v12;
  a1[12] = v13;
  sub_10001CFB8(v14, v15);
  uint64_t v16 = a2[13];
  unint64_t v17 = a2[14];
  sub_1000361E0(v16, v17);
  uint64_t v18 = a1[13];
  unint64_t v19 = a1[14];
  a1[13] = v16;
  a1[14] = v17;
  sub_10001CFB8(v18, v19);
  uint64_t v20 = a2[15];
  unint64_t v21 = a2[16];
  sub_1000361E0(v20, v21);
  uint64_t v22 = a1[15];
  unint64_t v23 = a1[16];
  a1[15] = v20;
  a1[16] = v21;
  sub_10001CFB8(v22, v23);
  uint64_t v24 = a2[17];
  unint64_t v25 = a2[18];
  sub_1000361E0(v24, v25);
  uint64_t v26 = a1[17];
  unint64_t v27 = a1[18];
  a1[17] = v24;
  a1[18] = v25;
  sub_10001CFB8(v26, v27);
  uint64_t v28 = a2[19];
  unint64_t v29 = a2[20];
  sub_1000361E0(v28, v29);
  uint64_t v30 = a1[19];
  unint64_t v31 = a1[20];
  a1[19] = v28;
  a1[20] = v29;
  sub_10001CFB8(v30, v31);
  uint64_t v32 = a2[21];
  unint64_t v33 = a2[22];
  sub_1000361E0(v32, v33);
  uint64_t v34 = a1[21];
  unint64_t v35 = a1[22];
  a1[21] = v32;
  a1[22] = v33;
  sub_10001CFB8(v34, v35);
  uint64_t v36 = a2 + 23;
  unint64_t v37 = a2[24];
  if ((unint64_t)a1[24] >> 60 != 15)
  {
    if (v37 >> 60 != 15)
    {
      uint64_t v39 = *v36;
      sub_1000361E0(*v36, a2[24]);
      uint64_t v40 = a1[23];
      unint64_t v41 = a1[24];
      a1[23] = v39;
      a1[24] = v37;
      sub_10001CFB8(v40, v41);
      goto LABEL_8;
    }
    sub_1001356D0((uint64_t)(a1 + 23));
    goto LABEL_6;
  }
  if (v37 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 23) = *(_OWORD *)v36;
    goto LABEL_8;
  }
  uint64_t v38 = *v36;
  sub_1000361E0(*v36, a2[24]);
  a1[23] = v38;
  a1[24] = v37;
LABEL_8:
  a1[25] = a2[25];
  a1[26] = a2[26];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[27] = a2[27];
  a1[28] = a2[28];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[29] = a2[29];
  a1[30] = a2[30];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[31] = a2[31];
  a1[32] = a2[32];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for PencilPairingLockAckRequestContent(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001CFB8(v4, v5);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a1 + 72);
  unint64_t v9 = *(void *)(a1 + 80);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  sub_10001CFB8(v8, v9);
  uint64_t v10 = *(void *)(a1 + 88);
  unint64_t v11 = *(void *)(a1 + 96);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  sub_10001CFB8(v10, v11);
  uint64_t v12 = *(void *)(a1 + 104);
  unint64_t v13 = *(void *)(a1 + 112);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  sub_10001CFB8(v12, v13);
  uint64_t v14 = *(void *)(a1 + 120);
  unint64_t v15 = *(void *)(a1 + 128);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  sub_10001CFB8(v14, v15);
  uint64_t v16 = *(void *)(a1 + 136);
  unint64_t v17 = *(void *)(a1 + 144);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  sub_10001CFB8(v16, v17);
  uint64_t v18 = *(void *)(a1 + 152);
  unint64_t v19 = *(void *)(a1 + 160);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  sub_10001CFB8(v18, v19);
  uint64_t v20 = *(void *)(a1 + 168);
  unint64_t v21 = *(void *)(a1 + 176);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  sub_10001CFB8(v20, v21);
  uint64_t v22 = (void *)(a2 + 184);
  unint64_t v23 = *(void *)(a1 + 192);
  if (v23 >> 60 != 15)
  {
    unint64_t v24 = *(void *)(a2 + 192);
    if (v24 >> 60 != 15)
    {
      uint64_t v25 = *(void *)(a1 + 184);
      *(void *)(a1 + 184) = *v22;
      *(void *)(a1 + 192) = v24;
      sub_10001CFB8(v25, v23);
      goto LABEL_6;
    }
    sub_1001356D0(a1 + 184);
  }
  *(_OWORD *)(a1 + 184) = *(_OWORD *)v22;
LABEL_6:
  uint64_t v26 = *(void *)(a2 + 208);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = v26;
  swift_bridgeObjectRelease();
  uint64_t v27 = *(void *)(a2 + 224);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a1 + 224) = v27;
  swift_bridgeObjectRelease();
  uint64_t v28 = *(void *)(a2 + 240);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a1 + 240) = v28;
  swift_bridgeObjectRelease();
  uint64_t v29 = *(void *)(a2 + 256);
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a1 + 256) = v29;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for PencilPairingLockAckRequestContent()
{
  return &type metadata for PencilPairingLockAckRequestContent;
}

ValueMetadata *type metadata accessor for PencilPairingLockAckRequest()
{
  return &type metadata for PencilPairingLockAckRequest;
}

unint64_t sub_100F7A5F4()
{
  unint64_t result = qword_101665668;
  if (!qword_101665668)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101665668);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for PencilPairingLockAckRequestContent.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 16 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 16) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF0) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEF)
  {
    unsigned int v6 = ((a2 - 240) >> 8) + 1;
    *unint64_t result = a2 + 16;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100F7A714);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 16;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PencilPairingLockAckRequestContent.CodingKeys()
{
  return &type metadata for PencilPairingLockAckRequestContent.CodingKeys;
}

unint64_t sub_100F7A750()
{
  unint64_t result = qword_101665670;
  if (!qword_101665670)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101665670);
  }
  return result;
}

unint64_t sub_100F7A7A8()
{
  unint64_t result = qword_101665678;
  if (!qword_101665678)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101665678);
  }
  return result;
}

unint64_t sub_100F7A800()
{
  unint64_t result = qword_101665680;
  if (!qword_101665680)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101665680);
  }
  return result;
}

uint64_t sub_100F7A854(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x4E6E6F6973736573 && a2 == 0xEC00000065636E6FLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x737574617473 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x69634572656E776FLL && a2 == 0xE900000000000064 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x69684372656E776FLL && a2 == 0xEB00000000644970 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001013F6580 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x636E6F4E68747561 && a2 == 0xE900000000000065 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x754E6C6169726573 && a2 == 0xEC0000007265626DLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x6169726553746C61 && a2 == 0xEF7265626D754E6CLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x7461747365747461 && a2 == 0xEB000000006E6F69 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0x726F737365636361 && a2 == 0xED00006E67695379 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x7374726563 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 7500643 && a2 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0xD000000000000013 && a2 == 0x80000001013EEBB0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x7372655663657073 && a2 == 0xEB000000006E6F69 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0x657261776D726966 && a2 == 0xEF6E6F6973726556 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else if (a1 == 0x49746375646F7270 && a2 == 0xE900000000000064 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 15;
  }
  else if (a1 == 0x6449726F646E6576 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 16;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 16;
    }
    else {
      return 17;
    }
  }
}

uint64_t destroy for AccessoryNonOwnerCommand(uint64_t a1)
{
  return sub_1003317A8(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
}

uint64_t initializeWithCopy for AccessoryNonOwnerCommand(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  sub_100331630(*(void *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for AccessoryNonOwnerCommand(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  sub_100331630(*(void *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  unint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  unint64_t v11 = *(void *)(a1 + 24);
  char v12 = *(unsigned char *)(a1 + 32);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  sub_1003317A8(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for AccessoryNonOwnerCommand(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  unint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  unint64_t v7 = *(void *)(a1 + 24);
  char v8 = *(unsigned char *)(a1 + 32);
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  *(unsigned char *)(a1 + 32) = v3;
  sub_1003317A8(v4, v6, v5, v7, v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessoryNonOwnerCommand(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x3FA && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 1018);
  }
  unsigned int v3 = ((*(void *)(a1 + 24) >> 60) & 3 | (4 * *(unsigned __int8 *)(a1 + 32))) ^ 0x3FF;
  if (v3 >= 0x3F9) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AccessoryNonOwnerCommand(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3F9)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)unint64_t result = a2 - 1018;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x3FA) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0x3FA) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2)
    {
      *(void *)unint64_t result = 0;
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = 0;
      *(void *)(result + 24) = (-a2 & 3) << 60;
      *(unsigned char *)(result + 32) = -a2 >> 2;
    }
  }
  return result;
}

uint64_t sub_100F7B1C8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 32)) {
    int v1 = 4;
  }
  else {
    int v1 = 0;
  }
  unsigned int v2 = (*(void *)(a1 + 24) >> 60) & 3 | v1;
  if (v2 <= 5) {
    return v2;
  }
  else {
    return (*(_DWORD *)a1 + 6);
  }
}

uint64_t sub_100F7B1F8(uint64_t result, unsigned int a2)
{
  if (a2 < 6)
  {
    *(void *)(result + 24) = *(void *)(result + 24) & 0xCFFFFFFFFFFFFFFFLL | ((unint64_t)(a2 & 3) << 60);
    *(unsigned char *)(result + 32) = (a2 & 4) != 0;
  }
  else
  {
    *(void *)unint64_t result = a2 - 6;
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0x2000000000000000;
    *(unsigned char *)(result + 32) = 1;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryNonOwnerCommand()
{
  return &type metadata for AccessoryNonOwnerCommand;
}

ValueMetadata *sub_100F7B244(char a1)
{
  switch(a1)
  {
    case 1:
      int v1 = &type metadata for AccessoryStartAggressiveAdvertisingPayload;
      sub_1002A5B5C();
      break;
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      int v1 = &type metadata for AccessoryGenericPayload;
      sub_10006258C();
      break;
    case 7:
      int v1 = &type metadata for AccessoryProductDataResponsePayload;
      sub_100573D2C();
      break;
    case 8:
      int v1 = &type metadata for AccessoryModelNameResponsePayload;
      sub_100573C84();
      break;
    case 9:
      int v1 = &type metadata for AccessoryCapabilityResponsePayload;
      sub_100573B88();
      break;
    case 10:
      int v1 = &type metadata for AccessoryFirmwareVersionResponsePayload;
      sub_100573AE0();
      break;
    default:
      int v1 = &type metadata for AccessoryCommandResponsePayload;
      sub_1002A5BB0();
      break;
  }
  return v1;
}

unint64_t sub_100F7B324(char a1)
{
  unint64_t result = 0xD000000000000010;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 2:
      unint64_t result = 0xD00000000000001ALL;
      break;
    case 3:
      unint64_t result = 0x746375646F72702ELL;
      break;
    case 4:
      unint64_t result = 0x614E6C65646F6D2ELL;
      break;
    case 5:
      unint64_t result = 0x6C6962617061632ELL;
      break;
    case 7:
      unint64_t result = 0xD000000000000014;
      break;
    case 8:
      unint64_t result = 0xD000000000000012;
      break;
    case 9:
      unint64_t result = 0xD000000000000013;
      break;
    case 10:
      unint64_t result = 0xD000000000000018;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100F7B460()
{
  sub_1003315D4(v0, (uint64_t)&v7);
  uint64_t v1 = (v9 >> 60) & 3;
  if (v10) {
    int v2 = 4;
  }
  else {
    int v2 = 0;
  }
  uint64_t result = v1 | v2;
  switch(v1 | v2)
  {
    case 1u:
      uint64_t result = 1;
      break;
    case 2u:
      uint64_t result = 7;
      break;
    case 3u:
      uint64_t result = 8;
      break;
    case 4u:
      uint64_t result = 9;
      break;
    case 5u:
      uint64_t result = 10;
      break;
    case 6u:
      if (v9 == 0x2000000000000000 && ((unint64_t)v8 | *((void *)&v8 + 1) | v7) == 0)
      {
        uint64_t result = 2;
      }
      else if (v9 == 0x2000000000000000 && v7 == 1 && v8 == 0)
      {
        uint64_t result = 3;
      }
      else if (v9 == 0x2000000000000000 && v7 == 2 && v8 == 0)
      {
        uint64_t result = 4;
      }
      else if (v8 == 0 && v7 == 3 && v9 == 0x2000000000000000)
      {
        uint64_t result = 5;
      }
      else
      {
        uint64_t result = 6;
      }
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100F7B580@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  sub_1003315D4(v1, (uint64_t)v18);
  uint64_t v5 = v18[0];
  unint64_t v4 = v18[1];
  uint64_t v6 = v18[2];
  unint64_t v7 = v18[3];
  sub_1003315D4(v2, (uint64_t)&v19);
  unint64_t v8 = v19;
  if (v22) {
    int v9 = 4;
  }
  else {
    int v9 = 0;
  }
  switch((v21 >> 60) & 3 | v9)
  {
    case 1uLL:
      *(void *)(a1 + 24) = &type metadata for AccessoryStartAggressiveAdvertisingPayload;
      unint64_t result = sub_1002A5B5C();
      goto LABEL_10;
    case 2uLL:
      v21 &= 0xCFFFFFFFFFFFFFFFLL;
      uint64_t v14 = v20;
      *(void *)(a1 + 24) = &type metadata for AccessoryProductDataResponsePayload;
      *(void *)(a1 + 32) = sub_100573D2C();
      *(void *)a1 = v8;
      *(void *)(a1 + 8) = v14;
      unint64_t result = sub_1000361E0(v5, v4);
      break;
    case 3uLL:
      uint64_t v15 = v20;
      *(void *)(a1 + 24) = &type metadata for AccessoryModelNameResponsePayload;
      *(void *)(a1 + 32) = sub_100573C84();
      *(void *)a1 = v8;
      *(void *)(a1 + 8) = v15;
      unint64_t result = swift_bridgeObjectRetain();
      break;
    case 4uLL:
      *(void *)(a1 + 24) = &type metadata for AccessoryCapabilityResponsePayload;
      unint64_t result = sub_100573B88();
LABEL_10:
      *(void *)(a1 + 32) = result;
      *(_DWORD *)a1 = v8;
      break;
    case 5uLL:
      unint64_t v16 = v19 >> 24;
      unint64_t v17 = v19 >> 16;
      *(void *)(a1 + 24) = &type metadata for AccessoryFirmwareVersionResponsePayload;
      unint64_t result = sub_100573AE0();
      *(void *)(a1 + 32) = result;
      *(_WORD *)a1 = v8;
      *(unsigned char *)(a1 + 2) = v17;
      *(unsigned char *)(a1 + 3) = v16;
      break;
    case 6uLL:
      *(void *)(a1 + 24) = &type metadata for AccessoryGenericPayload;
      unint64_t result = sub_10006258C();
      *(void *)(a1 + 32) = result;
      break;
    default:
      v21 &= 0xCFFFFFFFFFFFFFFFLL;
      unint64_t v10 = v21;
      long long v11 = v20;
      *(void *)(a1 + 24) = &type metadata for AccessoryCommandResponsePayload;
      *(void *)(a1 + 32) = sub_1002A5BB0();
      uint64_t v12 = swift_allocObject();
      *(void *)a1 = v12;
      *(void *)(v12 + 16) = v8;
      *(_OWORD *)(v12 + 24) = v11;
      *(void *)(v12 + 40) = v10;
      sub_1000361E0(v5, v4);
      unint64_t result = sub_1000361E0(v6, v7);
      break;
  }
  return result;
}

uint64_t sub_100F7B7C0(void *a1)
{
  uint64_t v3 = type metadata accessor for Endianness();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryEncoding.container()();
  unsigned __int8 v7 = sub_100F7B460();
  LOWORD(v16) = word_1013868EE[v7];
  static Endianness.current.getter();
  sub_100179818();
  FixedWidthInteger.convert(to:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  LOWORD(v16) = v20;
  sub_1000BD078((uint64_t)v24, v25);
  dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
  if (!v1)
  {
    switch(v7)
    {
      case 1u:
        sub_100F7B580((uint64_t)&v20);
        sub_10000588C(&qword_101639B68);
        if (!swift_dynamicCast()) {
          goto LABEL_18;
        }
        LODWORD(v20) = v16;
        sub_1000BD078((uint64_t)v24, v25);
        sub_1002A5814();
        goto LABEL_17;
      case 2u:
      case 3u:
      case 4u:
      case 5u:
      case 6u:
        sub_100F7B580((uint64_t)&v20);
        sub_10000588C(&qword_101639B68);
        if (!swift_dynamicCast()) {
          goto LABEL_18;
        }
        sub_1000BD078((uint64_t)v24, v25);
        sub_1002A576C();
        goto LABEL_17;
      case 7u:
        sub_100F7B580((uint64_t)&v20);
        sub_10000588C(&qword_101639B68);
        if (!swift_dynamicCast()) {
          goto LABEL_18;
        }
        uint64_t v12 = v16;
        unint64_t v13 = v17;
        uint64_t v20 = v16;
        unint64_t v21 = v17;
        sub_1000BD078((uint64_t)v24, v25);
        sub_100574020();
        dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
        sub_10001CFB8(v12, v13);
        return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v24);
      case 8u:
        sub_100F7B580((uint64_t)&v20);
        sub_10000588C(&qword_101639B68);
        if (!swift_dynamicCast()) {
          goto LABEL_18;
        }
        uint64_t v20 = v16;
        unint64_t v21 = v17;
        sub_1000BD078((uint64_t)v24, v25);
        sub_100573FCC();
        dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
        swift_bridgeObjectRelease();
        return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v24);
      case 9u:
        sub_100F7B580((uint64_t)&v20);
        sub_10000588C(&qword_101639B68);
        if (!swift_dynamicCast()) {
          goto LABEL_18;
        }
        LODWORD(v20) = v16;
        sub_1000BD078((uint64_t)v24, v25);
        sub_100573F78();
        goto LABEL_17;
      case 0xAu:
        sub_100F7B580((uint64_t)&v20);
        sub_10000588C(&qword_101639B68);
        if (!swift_dynamicCast()) {
          goto LABEL_18;
        }
        LODWORD(v20) = v16;
        sub_1000BD078((uint64_t)v24, v25);
        sub_100573F24();
LABEL_17:
        dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
        break;
      default:
        sub_100F7B580((uint64_t)&v20);
        sub_10000588C(&qword_101639B68);
        if (swift_dynamicCast())
        {
          uint64_t v8 = v16;
          unint64_t v9 = v17;
          uint64_t v10 = v18;
          unint64_t v11 = v19;
          uint64_t v20 = v16;
          unint64_t v21 = v17;
          uint64_t v22 = v18;
          unint64_t v23 = v19;
          sub_1000BD078((uint64_t)v24, v25);
          sub_1002A5910();
          dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
          sub_10001CFB8(v8, v9);
          sub_10001CFB8(v10, v11);
        }
        else
        {
LABEL_18:
          sub_100F7C544();
          swift_allocError();
          *uint64_t v14 = 0;
          swift_willThrow();
        }
        break;
    }
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v24);
}

uint64_t sub_100F7BD3C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100F7C2CC(a1, (uint64_t)v5);
  if (!v2) {
    return sub_1003315D4((uint64_t)v5, a2);
  }
  return result;
}

uint64_t sub_100F7BD84(void *a1)
{
  sub_1003315D4(v1, (uint64_t)v4);
  return sub_100F7B7C0(a1);
}

uint64_t sub_100F7BDD4(__int16 a1)
{
  if ((unsigned __int16)(a1 - 770) > 0x19u) {
    return 11;
  }
  else {
    return byte_101386904[(__int16)(a1 - 770)];
  }
}

uint64_t sub_100F7BE00@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_10001D010(a2, (uint64_t)v20);
  uint64_t v6 = sub_100F7B244(a1);
  sub_10001CD44(v20, v20[3]);
  uint64_t DynamicType = swift_getDynamicType();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v20);
  if (v6 != (ValueMetadata *)DynamicType)
  {
    __break(1u);
    JUMPOUT(0x100F7C2A0);
  }
  switch(a1)
  {
    case 1:
      sub_10001D010(a2, (uint64_t)v19);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_27;
      }
      uint64_t v8 = v15;
      uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      char v13 = 0;
      goto LABEL_25;
    case 2:
      sub_10001D010(a2, (uint64_t)v19);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_27;
      }
      uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      uint64_t v8 = 0;
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      char v13 = 1;
      uint64_t v11 = 0x2000000000000000;
      goto LABEL_26;
    case 3:
      sub_10001D010(a2, (uint64_t)v19);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_27;
      }
      uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v8 = 1;
      uint64_t v11 = 0x2000000000000000;
      char v13 = 1;
      goto LABEL_26;
    case 4:
      sub_10001D010(a2, (uint64_t)v19);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_27;
      }
      uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      char v13 = 1;
      uint64_t v11 = 0x2000000000000000;
      uint64_t v8 = 2;
      goto LABEL_26;
    case 5:
      sub_10001D010(a2, (uint64_t)v19);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_27;
      }
      uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      char v13 = 1;
      uint64_t v11 = 0x2000000000000000;
      uint64_t v8 = 3;
      goto LABEL_26;
    case 6:
      sub_10001D010(a2, (uint64_t)v19);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_27;
      }
      uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      char v13 = 1;
      uint64_t v11 = 0x2000000000000000;
      uint64_t v8 = 4;
      goto LABEL_26;
    case 7:
      sub_10001D010(a2, (uint64_t)v19);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_27;
      }
      uint64_t v8 = v15;
      uint64_t v9 = v16;
      uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      uint64_t v10 = 0;
      char v13 = 0;
      uint64_t v11 = 0x2000000000000000;
      goto LABEL_26;
    case 8:
      sub_10001D010(a2, (uint64_t)v19);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_27;
      }
      uint64_t v8 = v15;
      uint64_t v9 = v16;
      uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      uint64_t v10 = 0;
      char v13 = 0;
      uint64_t v11 = 0x3000000000000000;
      goto LABEL_26;
    case 9:
      sub_10001D010(a2, (uint64_t)v19);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_27;
      }
      uint64_t v8 = v15;
      uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      char v13 = 1;
      goto LABEL_26;
    case 10:
      sub_10001D010(a2, (uint64_t)v19);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_27;
      }
      uint64_t v8 = v15;
      uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      char v13 = 1;
LABEL_25:
      uint64_t v11 = 0x1000000000000000;
      goto LABEL_26;
    default:
      sub_10001D010(a2, (uint64_t)v19);
      sub_10000588C(&qword_101639B68);
      if (swift_dynamicCast())
      {
        uint64_t v8 = v15;
        uint64_t v9 = v16;
        uint64_t v10 = v17;
        uint64_t v11 = v18;
        uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
        char v13 = 0;
LABEL_26:
        *(void *)a3 = v8;
        *(void *)(a3 + 8) = v9;
        *(void *)(a3 + 16) = v10;
        *(void *)(a3 + 24) = v11;
        *(unsigned char *)(a3 + 32) = v13;
      }
      else
      {
LABEL_27:
        sub_100F7C544();
        swift_allocError();
        *uint64_t v14 = 0;
        swift_willThrow();
        return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      }
      return result;
  }
}

uint64_t sub_100F7C2CC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v16 = a2;
  uint64_t v4 = type metadata accessor for Endianness();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unsigned __int8 v7 = (char *)&v17[-4] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryDecoding.container()();
  sub_1000BD078((uint64_t)v19, v20);
  sub_100179818();
  dispatch thunk of BinaryDecodingContaining.decode<A>(_:)();
  if (!v2)
  {
    uint64_t v8 = v16;
    __int16 v22 = v17[0];
    static Endianness.current.getter();
    FixedWidthInteger.convert(to:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    char v9 = sub_100F7BDD4(v18[0]);
    if (v9 != 11)
    {
      char v11 = v9;
      uint64_t v12 = sub_100F7B244(v9);
      uint64_t v14 = v13;
      sub_10001D010((uint64_t)a1, (uint64_t)v17);
      v18[3] = (uint64_t)v12;
      v18[4] = v14;
      sub_10001D958(v18);
      dispatch thunk of BinaryDecodable.init(from:)();
      sub_10001D010((uint64_t)v18, (uint64_t)v17);
      sub_100F7BE00(v11, (uint64_t)v17, (uint64_t)v21);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v18);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v19);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
      return sub_1003315D4((uint64_t)v21, v8);
    }
    sub_100F7C544();
    swift_allocError();
    *uint64_t v10 = 1;
    swift_willThrow();
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v19);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
}

unint64_t sub_100F7C544()
{
  unint64_t result = qword_101665688;
  if (!qword_101665688)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101665688);
  }
  return result;
}

uint64_t sub_100F7C598()
{
  sub_10001CFB8(*(void *)(v0 + 16), *(void *)(v0 + 24));
  sub_10001CFB8(*(void *)(v0 + 32), *(void *)(v0 + 40));

  return _swift_deallocObject(v0, 48, 7);
}

unsigned char *storeEnumTagSinglePayload for AccessoryNonOwnerCommand.Error(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100F7C6A4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryNonOwnerCommand.Error()
{
  return &type metadata for AccessoryNonOwnerCommand.Error;
}

unint64_t sub_100F7C6E0()
{
  unint64_t result = qword_101665690;
  if (!qword_101665690)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101665690);
  }
  return result;
}

unint64_t sub_100F7C734@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = v1;
  sub_100A84C2C(v2, (uint64_t)v33);
  uint64_t v30 = v33[0];
  unint64_t v31 = v33[1];
  unint64_t v4 = v33[3];
  uint64_t v32 = v33[2];
  uint64_t v5 = v33[4];
  unint64_t v6 = v33[5];
  uint64_t v8 = v33[6];
  uint64_t v7 = v33[7];
  uint64_t v10 = v33[8];
  uint64_t v9 = v33[9];
  sub_100A84C2C(v2, (uint64_t)&v34);
  uint64_t v11 = v34;
  uint64_t v12 = v39;
  switch((v40 >> 59) & 6 | ((v38 & 0x2000000000000000) != 0))
  {
    case 1uLL:
      v38 &= ~0x2000000000000000uLL;
      v40 &= 0xCFFFFFFFFFFFFFFFLL;
      long long v27 = v35;
      uint64_t v13 = v36.i64[0];
      a1[3] = (uint64_t)&type metadata for SendPairingDataCommandPayload;
      a1[4] = sub_100F7CC08();
      goto LABEL_7;
    case 2uLL:
      unint64_t v28 = v4;
      v38 &= ~0x2000000000000000uLL;
      uint64_t v17 = v38;
      v40 &= 0xCFFFFFFFFFFFFFFFLL;
      unint64_t v25 = v40;
      int8x16_t v23 = v36;
      long long v24 = v35;
      uint64_t v21 = v37.i64[1];
      uint64_t v22 = v37.i64[0];
      a1[3] = (uint64_t)&type metadata for FinalizePairingCommandPayload;
      a1[4] = sub_100F7CB5C();
      uint64_t v18 = swift_allocObject();
      *a1 = v18;
      *(void *)(v18 + 16) = v11;
      *(_OWORD *)(v18 + 24) = v24;
      *(int8x16_t *)(v18 + 40) = v23;
      *(void *)(v18 + 56) = v22;
      *(void *)(v18 + 64) = v21;
      *(void *)(v18 + 72) = v17;
      *(void *)(v18 + 80) = v12;
      *(void *)(v18 + 88) = v25;
      sub_1000361E0(v30, v31);
      sub_1000361E0(v32, v28);
      sub_1000361E0(v5, v6);
      sub_1000361E0(v8, v7 & 0xDFFFFFFFFFFFFFFFLL);
      unint64_t result = sub_1000361E0(v10, v9 & 0xCFFFFFFFFFFFFFFFLL);
      break;
    case 3uLL:
      v38 &= ~0x2000000000000000uLL;
      v40 &= 0xCFFFFFFFFFFFFFFFLL;
      int8x16_t v26 = v36;
      long long v29 = v35;
      uint64_t v19 = v37.i64[0];
      a1[3] = (uint64_t)&type metadata for SendPairingStatusCommandPayload;
      a1[4] = sub_100F7CAC0();
      uint64_t v20 = swift_allocObject();
      *a1 = v20;
      *(void *)(v20 + 16) = v11;
      *(_OWORD *)(v20 + 24) = v29;
      *(int8x16_t *)(v20 + 40) = v26;
      *(void *)(v20 + 56) = v19;
      sub_1000361E0(v30, v31);
      sub_1000361E0(v32, v4);
      unint64_t result = sub_1000361E0(v5, v6);
      break;
    case 4uLL:
      if (v40 != 0x2000000000000000
        || (int8x16_t v14 = vorrq_s8(v36, v37),
            v39 | v38 | *(void *)&vorr_s8(*(int8x8_t *)v14.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v14, v14, 8uLL)) | (unint64_t)v35 | *((void *)&v35 + 1) | v34))
      {
        a1[3] = (uint64_t)&type metadata for UnpairCommandPayload;
        unint64_t result = sub_100062118();
      }
      else
      {
        a1[3] = (uint64_t)&type metadata for PairingCompleteCommandPayload;
        unint64_t result = sub_100F7CA6C();
      }
      a1[4] = result;
      break;
    default:
      v38 &= ~0x2000000000000000uLL;
      v40 &= 0xCFFFFFFFFFFFFFFFLL;
      long long v27 = v35;
      uint64_t v13 = v36.i64[0];
      a1[3] = (uint64_t)&type metadata for InitiatePairingCommandPayload;
      a1[4] = sub_100F7CC60();
LABEL_7:
      uint64_t v16 = swift_allocObject();
      *a1 = v16;
      *(void *)(v16 + 16) = v11;
      *(_OWORD *)(v16 + 24) = v27;
      *(void *)(v16 + 40) = v13;
      sub_1000361E0(v30, v31);
      unint64_t result = sub_1000361E0(v32, v4);
      break;
  }
  return result;
}

unint64_t sub_100F7CA6C()
{
  unint64_t result = qword_101665698;
  if (!qword_101665698)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101665698);
  }
  return result;
}

unint64_t sub_100F7CAC0()
{
  unint64_t result = qword_1016656A0;
  if (!qword_1016656A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016656A0);
  }
  return result;
}

uint64_t sub_100F7CB14()
{
  sub_10001CFB8(*(void *)(v0 + 16), *(void *)(v0 + 24));
  sub_10001CFB8(*(void *)(v0 + 32), *(void *)(v0 + 40));
  sub_10001CFB8(*(void *)(v0 + 48), *(void *)(v0 + 56));

  return _swift_deallocObject(v0, 64, 7);
}

unint64_t sub_100F7CB5C()
{
  unint64_t result = qword_1016656A8;
  if (!qword_1016656A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016656A8);
  }
  return result;
}

uint64_t sub_100F7CBB0()
{
  sub_10001CFB8(*(void *)(v0 + 16), *(void *)(v0 + 24));
  sub_10001CFB8(*(void *)(v0 + 32), *(void *)(v0 + 40));
  sub_10001CFB8(*(void *)(v0 + 48), *(void *)(v0 + 56));
  sub_10001CFB8(*(void *)(v0 + 64), *(void *)(v0 + 72));
  sub_10001CFB8(*(void *)(v0 + 80), *(void *)(v0 + 88));

  return _swift_deallocObject(v0, 96, 7);
}

unint64_t sub_100F7CC08()
{
  unint64_t result = qword_1016656B0;
  if (!qword_1016656B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016656B0);
  }
  return result;
}

unint64_t sub_100F7CC60()
{
  unint64_t result = qword_1016656B8;
  if (!qword_1016656B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016656B8);
  }
  return result;
}

void destroy for AccessoryPairingCommand(uint64_t a1)
{
}

void sub_100F7CD08(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unint64_t a10, void (*a11)(void))
{
  switch((a10 >> 59) & 6 | ((a8 & 0x2000000000000000) != 0))
  {
    case 0uLL:
    case 1uLL:
      a11();
      uint64_t v15 = a3;
      unint64_t v16 = a4;
      goto LABEL_5;
    case 2uLL:
      unint64_t v18 = a8 & 0xDFFFFFFFFFFFFFFFLL;
      a11();
      ((void (*)(uint64_t, unint64_t))a11)(a3, a4);
      ((void (*)(uint64_t, unint64_t))a11)(a5, a6);
      ((void (*)(uint64_t, unint64_t))a11)(a7, v18);
      uint64_t v15 = a9;
      unint64_t v16 = a10 & 0xCFFFFFFFFFFFFFFFLL;
      goto LABEL_5;
    case 3uLL:
      a11();
      ((void (*)(uint64_t, unint64_t))a11)(a3, a4);
      uint64_t v15 = a5;
      unint64_t v16 = a6;
LABEL_5:
      ((void (*)(uint64_t, unint64_t))a11)(v15, v16);
      break;
    default:
      return;
  }
}

uint64_t *initializeWithCopy for AccessoryPairingCommand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  unint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  unint64_t v8 = a2[5];
  uint64_t v9 = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v11 = a2[8];
  unint64_t v13 = a2[9];
  sub_100F7CD08(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v13, (void (*)(void))sub_1000361E0);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v13;
  return a1;
}

uint64_t *assignWithCopy for AccessoryPairingCommand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  unint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  unint64_t v8 = a2[5];
  uint64_t v9 = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v11 = a2[8];
  unint64_t v23 = a2[9];
  sub_100F7CD08(*a2, v4, v5, v6, v7, v8, v9, v10, v11, v23, (void (*)(void))sub_1000361E0);
  uint64_t v12 = *a1;
  uint64_t v13 = a1[1];
  uint64_t v14 = a1[2];
  unint64_t v15 = a1[3];
  uint64_t v16 = a1[4];
  unint64_t v17 = a1[5];
  uint64_t v18 = a1[6];
  uint64_t v19 = a1[7];
  uint64_t v20 = a1[8];
  unint64_t v21 = a1[9];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v23;
  sub_100F7CD08(v12, v13, v14, v15, v16, v17, v18, v19, v20, v21, (void (*)(void))sub_10001CFB8);
  return a1;
}

uint64_t *assignWithTake for AccessoryPairingCommand(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v4 = a1[2];
  unint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  unint64_t v8 = a1[5];
  uint64_t v9 = a1[6];
  uint64_t v10 = a1[7];
  uint64_t v11 = a1[8];
  unint64_t v12 = a1[9];
  long long v13 = a2[1];
  *(_OWORD *)a1 = *a2;
  *((_OWORD *)a1 + 1) = v13;
  long long v14 = a2[3];
  *((_OWORD *)a1 + 2) = a2[2];
  *((_OWORD *)a1 + 3) = v14;
  *((_OWORD *)a1 + 4) = a2[4];
  sub_100F7CD08(v3, v5, v4, v6, v7, v8, v9, v10, v11, v12, (void (*)(void))sub_10001CFB8);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessoryPairingCommand(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x3FC && *(unsigned char *)(a1 + 80)) {
    return (*(_DWORD *)a1 + 1020);
  }
  unsigned int v3 = ((((*(void *)(a1 + 72) >> 52) & 0x300 | (*(void *)(a1 + 56) >> 54) & 0xC0) >> 7) & 0xFFFFFC07 | (8 * ((*(void *)(a1 + 24) >> 58) & 0xC | (*(void *)(a1 + 8) >> 60) & 3 | *(unsigned char *)(a1 + 47) & 0x30 | (*(void *)(a1 + 56) >> 54) & 0x40))) ^ 0x3FF;
  if (v3 >= 0x3FB) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AccessoryPairingCommand(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3FB)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 - 1020;
    if (a3 >= 0x3FC) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if (a3 >= 0x3FC) {
      *(unsigned char *)(result + 80) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 3) & 0x7F | ((-a2 & 0x3FF) << 7);
      *(void *)unint64_t result = 0;
      *(void *)(result + 8) = (unint64_t)((-a2 >> 3) & 3) << 60;
      *(void *)(result + 16) = 0;
      *(void *)(result + 24) = (v3 << 58) & 0x3000000000000000;
      *(void *)(result + 32) = 0;
      *(void *)(result + 40) = (v3 << 56) & 0x3000000000000000;
      *(void *)(result + 48) = 0;
      *(void *)(result + 56) = (v3 << 54) & 0x3000000000000000;
      *(void *)(result + 64) = 0;
      *(void *)(result + 72) = (v3 << 52) & 0x3000000000000000;
    }
  }
  return result;
}

uint64_t sub_100F7D1B8(uint64_t a1)
{
  unsigned int v1 = (*(void *)(a1 + 72) >> 59) & 6 | ((*(void *)(a1 + 56) & 0x2000000000000000) != 0);
  if (v1 <= 3) {
    return v1;
  }
  else {
    return (*(_DWORD *)a1 + 4);
  }
}

uint64_t sub_100F7D1E4(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 72) & 0xCFFFFFFFFFFFFFFFLL;
  *(void *)(result + 56) &= ~0x2000000000000000uLL;
  *(void *)(result + 72) = v1;
  return result;
}

void *sub_100F7D200(void *result, unsigned int a2)
{
  if (a2 < 4)
  {
    unint64_t v2 = result[3] & 0xCFFFFFFFFFFFFFFFLL;
    unint64_t v3 = result[5] & 0xCFFFFFFFFFFFFFFFLL;
    unint64_t v4 = result[7] & 0xCFFFFFFFFFFFFFFFLL | ((unint64_t)(a2 & 1) << 61);
    unint64_t v5 = result[9] & 0xCFFFFFFFFFFFFFFFLL | ((((unint64_t)a2 >> 1) & 3) << 60);
    result[1] &= 0xCFFFFFFFFFFFFFFFLL;
    result[3] = v2;
    result[5] = v3;
    result[7] = v4;
    result[9] = v5;
  }
  else
  {
    *unint64_t result = a2 - 4;
    *(_OWORD *)(result + 1) = 0u;
    *(_OWORD *)(result + 3) = 0u;
    *(_OWORD *)(result + 5) = 0u;
    *(_OWORD *)(result + 7) = 0u;
    result[9] = 0x2000000000000000;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryPairingCommand()
{
  return &type metadata for AccessoryPairingCommand;
}

uint64_t sub_100F7D288(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for Endianness();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryEncoding.container()();
  sub_100A84C2C(v3, (uint64_t)&v58);
  switch((v64 >> 59) & 6 | ((v62 & 0x2000000000000000) != 0))
  {
    case 1uLL:
      v62 &= ~0x2000000000000000uLL;
      v64 &= 0xCFFFFFFFFFFFFFFFLL;
      __int16 v9 = 257;
      break;
    case 2uLL:
      v62 &= ~0x2000000000000000uLL;
      v64 &= 0xCFFFFFFFFFFFFFFFLL;
      __int16 v9 = 258;
      break;
    case 3uLL:
      v62 &= ~0x2000000000000000uLL;
      v64 &= 0xCFFFFFFFFFFFFFFFLL;
      __int16 v9 = 259;
      break;
    case 4uLL:
      v10.i64[0] = v58;
      v10.i64[1] = v63;
      int8x16_t v11 = vorrq_s8(v61, v59);
      int8x16_t v12 = vorrq_s8(v10, vorrq_s8(vextq_s8(v60, v60, 8uLL), vextq_s8(v11, v11, 8uLL)));
      if (*(void *)&vorr_s8(*(int8x8_t *)v12.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v12, v12, 8uLL)) | v62) {
        BOOL v13 = 0;
      }
      else {
        BOOL v13 = v64 == 0x2000000000000000;
      }
      if (v13) {
        __int16 v9 = 260;
      }
      else {
        __int16 v9 = 516;
      }
      break;
    default:
      v62 &= ~0x2000000000000000uLL;
      v64 &= 0xCFFFFFFFFFFFFFFFLL;
      __int16 v9 = 256;
      break;
  }
  LOWORD(v46) = v9;
  static Endianness.current.getter();
  sub_100179818();
  FixedWidthInteger.convert(to:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  LOWORD(v46) = v36;
  sub_1000BD078((uint64_t)v50, v51);
  dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
  if (!v2)
  {
    sub_100A84C2C(v3, (uint64_t)v52);
    switch((v57 >> 59) & 6 | ((v55 & 0x2000000000000000) != 0))
    {
      case 1uLL:
        v55 &= ~0x2000000000000000uLL;
        v57 &= 0xCFFFFFFFFFFFFFFFLL;
        sub_100F7C734(&v36);
        sub_10000588C(&qword_101639B68);
        if (!swift_dynamicCast()) {
          goto LABEL_31;
        }
        uint64_t v14 = v46;
        unint64_t v15 = v47;
        uint64_t v16 = v48;
        unint64_t v17 = v49;
        uint64_t v36 = v46;
        unint64_t v37 = v47;
        uint64_t v38 = v48;
        unint64_t v39 = v49;
        sub_1000BD078((uint64_t)v50, v51);
        sub_1008E7958();
        goto LABEL_22;
      case 2uLL:
        v55 &= ~0x2000000000000000uLL;
        v57 &= 0xCFFFFFFFFFFFFFFFLL;
        sub_100F7C734(&v46);
        sub_10000588C(&qword_101639B68);
        if (!swift_dynamicCast()) {
          goto LABEL_31;
        }
        uint64_t v19 = v36;
        unint64_t v20 = v37;
        uint64_t v21 = v38;
        unint64_t v22 = v39;
        unint64_t v31 = v41;
        uint64_t v32 = v40;
        unint64_t v33 = v43;
        uint64_t v34 = v42;
        uint64_t v65 = v44;
        unint64_t v35 = v45;
        sub_1000BD078((uint64_t)v50, v51);
        sub_1006E6F50();
        dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
        sub_10001CFB8(v19, v20);
        sub_10001CFB8(v21, v22);
        sub_10001CFB8(v32, v31);
        unint64_t v24 = v33;
        uint64_t v23 = v34;
        goto LABEL_27;
      case 3uLL:
        v55 &= ~0x2000000000000000uLL;
        v57 &= 0xCFFFFFFFFFFFFFFFLL;
        sub_100F7C734(&v46);
        sub_10000588C(&qword_101639B68);
        if (!swift_dynamicCast()) {
          goto LABEL_31;
        }
        uint64_t v25 = v36;
        unint64_t v26 = v37;
        uint64_t v27 = v38;
        unint64_t v28 = v39;
        uint64_t v65 = v40;
        unint64_t v35 = v41;
        sub_1000BD078((uint64_t)v50, v51);
        sub_1008BC404();
        dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
        sub_10001CFB8(v25, v26);
        uint64_t v23 = v27;
        unint64_t v24 = v28;
LABEL_27:
        sub_10001CFB8(v23, v24);
        sub_10001CFB8(v65, v35);
        return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v50);
      case 4uLL:
        if (v57 != 0x2000000000000000
          || (int8x16_t v18 = vorrq_s8(v53, v54),
              v56 | v55 | *(void *)&vorr_s8(*(int8x8_t *)v18.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL)) | v52[1] | v52[2] | v52[0]))
        {
          sub_100F7C734(&v36);
          sub_10000588C(&qword_101639B68);
          if (swift_dynamicCast())
          {
            sub_1000BD078((uint64_t)v50, v51);
            sub_1001E2D8C();
            goto LABEL_30;
          }
        }
        else
        {
          sub_100F7C734(&v36);
          sub_10000588C(&qword_101639B68);
          if (swift_dynamicCast())
          {
            sub_1000BD078((uint64_t)v50, v51);
            sub_1004B8FE0();
LABEL_30:
            dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
            return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v50);
          }
        }
LABEL_31:
        sub_100F7DA34();
        swift_allocError();
        *long long v29 = 0;
        swift_willThrow();
        break;
      default:
        v55 &= ~0x2000000000000000uLL;
        v57 &= 0xCFFFFFFFFFFFFFFFLL;
        sub_100F7C734(&v36);
        sub_10000588C(&qword_101639B68);
        if (!swift_dynamicCast()) {
          goto LABEL_31;
        }
        uint64_t v14 = v46;
        unint64_t v15 = v47;
        uint64_t v16 = v48;
        unint64_t v17 = v49;
        uint64_t v36 = v46;
        unint64_t v37 = v47;
        uint64_t v38 = v48;
        unint64_t v39 = v49;
        sub_1000BD078((uint64_t)v50, v51);
        sub_100D12D7C();
LABEL_22:
        dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
        sub_10001CFB8(v14, v15);
        sub_10001CFB8(v16, v17);
        return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v50);
    }
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v50);
}

uint64_t sub_100F7D99C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100F7DF04(a1, (uint64_t)v5);
  if (!v2) {
    return sub_100A84C2C((uint64_t)v5, a2);
  }
  return result;
}

uint64_t sub_100F7D9E4(void *a1)
{
  sub_100A84C2C(v1, (uint64_t)&v4);
  return sub_100F7D288(a1);
}

unint64_t sub_100F7DA34()
{
  unint64_t result = qword_1016656C0;
  if (!qword_1016656C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016656C0);
  }
  return result;
}

uint64_t sub_100F7DA88(unsigned __int16 a1)
{
  int v1 = a1;
  int v2 = a1 - 256;
  uint64_t result = 1;
  switch(v2)
  {
    case 0:
      uint64_t result = 0;
      break;
    case 1:
      return result;
    case 2:
      uint64_t result = 2;
      break;
    case 3:
      uint64_t result = 3;
      break;
    case 4:
      uint64_t result = 4;
      break;
    default:
      if (v1 == 516) {
        uint64_t result = 5;
      }
      else {
        uint64_t result = 6;
      }
      break;
  }
  return result;
}

uint64_t sub_100F7DB04@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_10001D010(a2, (uint64_t)v34);
  switch(a1)
  {
    case 1:
      sub_100F7CC08();
      uint64_t v6 = &type metadata for SendPairingDataCommandPayload;
      break;
    case 2:
      sub_100F7CB5C();
      uint64_t v6 = &type metadata for FinalizePairingCommandPayload;
      break;
    case 3:
      sub_100F7CAC0();
      uint64_t v6 = &type metadata for SendPairingStatusCommandPayload;
      break;
    case 4:
      sub_100F7CA6C();
      uint64_t v6 = &type metadata for PairingCompleteCommandPayload;
      break;
    case 5:
      sub_100062118();
      uint64_t v6 = &type metadata for UnpairCommandPayload;
      break;
    default:
      sub_100F7CC60();
      uint64_t v6 = &type metadata for InitiatePairingCommandPayload;
      break;
  }
  sub_10001CD44(v34, v34[3]);
  uint64_t DynamicType = swift_getDynamicType();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v34);
  if (v6 != (ValueMetadata *)DynamicType)
  {
    __break(1u);
    JUMPOUT(0x100F7DED4);
  }
  switch(a1)
  {
    case 1:
      sub_10001D010(a2, (uint64_t)&v23);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_24;
      }
      uint64_t v9 = v30;
      uint64_t v10 = v31;
      uint64_t v11 = v32;
      *(void *)&long long v15 = v33;
      long long v22 = v15;
      uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      long long v13 = v22;
      uint64_t v14 = 0;
      long long v16 = xmmword_101352FE0;
      long long v17 = 0uLL;
      goto LABEL_23;
    case 2:
      sub_10001D010(a2, (uint64_t)&v30);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_24;
      }
      uint64_t v9 = v23;
      uint64_t v10 = v24;
      uint64_t v11 = v25;
      uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      long long v16 = v28;
      long long v17 = v27;
      long long v13 = v26;
      uint64_t v14 = v29 | 0x1000000000000000;
      goto LABEL_23;
    case 3:
      sub_10001D010(a2, (uint64_t)&v30);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_24;
      }
      uint64_t v9 = v23;
      uint64_t v10 = v24;
      uint64_t v11 = v25;
      *(void *)&long long v18 = v27;
      long long v20 = v18;
      uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      long long v17 = v20;
      long long v13 = v26;
      long long v16 = xmmword_101352FE0;
      uint64_t v14 = 0x1000000000000000;
      goto LABEL_23;
    case 4:
      sub_10001D010(a2, (uint64_t)&v23);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_24;
      }
      uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      uint64_t v9 = 0;
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      long long v13 = 0uLL;
      uint64_t v14 = 0x2000000000000000;
      goto LABEL_22;
    case 5:
      sub_10001D010(a2, (uint64_t)&v23);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_24;
      }
      uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      uint64_t v10 = 0;
      uint64_t v11 = 0;
      long long v13 = 0uLL;
      uint64_t v14 = 0x2000000000000000;
      uint64_t v9 = 1;
      goto LABEL_22;
    default:
      sub_10001D010(a2, (uint64_t)&v23);
      sub_10000588C(&qword_101639B68);
      if (swift_dynamicCast())
      {
        uint64_t v9 = v30;
        uint64_t v10 = v31;
        uint64_t v11 = v32;
        *(void *)&long long v8 = v33;
        long long v21 = v8;
        uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
        long long v13 = v21;
        uint64_t v14 = 0;
LABEL_22:
        long long v17 = 0uLL;
        long long v16 = 0uLL;
LABEL_23:
        *(void *)a3 = v9;
        *(void *)(a3 + 8) = v10;
        *(void *)(a3 + 16) = v11;
        *(_OWORD *)(a3 + 24) = v13;
        *(_OWORD *)(a3 + 40) = v17;
        *(_OWORD *)(a3 + 56) = v16;
        *(void *)(a3 + 72) = v14;
      }
      else
      {
LABEL_24:
        sub_100F7DA34();
        swift_allocError();
        *uint64_t v19 = 0;
        swift_willThrow();
        return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      }
      return result;
  }
}

uint64_t sub_100F7DF04@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v17 = a2;
  uint64_t v4 = type metadata accessor for Endianness();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryDecoding.container()();
  sub_1000BD078((uint64_t)v20, v21);
  sub_100179818();
  dispatch thunk of BinaryDecodingContaining.decode<A>(_:)();
  if (v2) {
    goto LABEL_12;
  }
  uint64_t v8 = v17;
  __int16 v23 = v18[0];
  static Endianness.current.getter();
  FixedWidthInteger.convert(to:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  char v9 = sub_100F7DA88(v19[0]);
  if (v9 == 6)
  {
    sub_100F7DA34();
    swift_allocError();
    *uint64_t v10 = 1;
    swift_willThrow();
LABEL_12:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v20);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  char v11 = v9;
  switch(v9)
  {
    case 1:
      int8x16_t v12 = &type metadata for SendPairingDataCommandPayload;
      unint64_t v13 = sub_100F7CC08();
      break;
    case 2:
      int8x16_t v12 = &type metadata for FinalizePairingCommandPayload;
      unint64_t v13 = sub_100F7CB5C();
      break;
    case 3:
      int8x16_t v12 = &type metadata for SendPairingStatusCommandPayload;
      unint64_t v13 = sub_100F7CAC0();
      break;
    case 4:
      int8x16_t v12 = &type metadata for PairingCompleteCommandPayload;
      unint64_t v13 = sub_100F7CA6C();
      break;
    case 5:
      int8x16_t v12 = &type metadata for UnpairCommandPayload;
      unint64_t v13 = sub_100062118();
      break;
    default:
      int8x16_t v12 = &type metadata for InitiatePairingCommandPayload;
      unint64_t v13 = sub_100F7CC60();
      break;
  }
  uint64_t v14 = v13;
  sub_10001D010((uint64_t)a1, (uint64_t)v18);
  v19[3] = (uint64_t)v12;
  v19[4] = v14;
  sub_10001D958(v19);
  dispatch thunk of BinaryDecodable.init(from:)();
  sub_10001D010((uint64_t)v19, (uint64_t)v18);
  sub_100F7DB04(v11, (uint64_t)v18, (uint64_t)v22);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v19);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v20);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  return sub_100A84C2C((uint64_t)v22, v8);
}

unsigned char *storeEnumTagSinglePayload for AccessoryPairingCommand.AccessoryPairingCommandError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100F7E2E8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryPairingCommand.AccessoryPairingCommandError()
{
  return &type metadata for AccessoryPairingCommand.AccessoryPairingCommandError;
}

unint64_t sub_100F7E324()
{
  unint64_t result = qword_1016656C8;
  if (!qword_1016656C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016656C8);
  }
  return result;
}

uint64_t sub_100F7E378()
{
  return sub_100F7E3C0(&qword_101637310, (uint64_t)qword_10170F068);
}

uint64_t sub_100F7E39C()
{
  return sub_100F7E3C0(&qword_101637320, (uint64_t)qword_10170F098);
}

uint64_t sub_100F7E3C0(void *a1, uint64_t a2)
{
  if (*a1 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();

  return sub_100010324(v3, a2);
}

uint64_t sub_100F7E414@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_10000588C(&qword_101649E40);
  __chkstk_darwin(v2 - 8);
  unsigned int v4 = (char *)v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  char v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  char v11 = (char *)v19 - v10;
  if (qword_1016371D8 != -1) {
    swift_once();
  }
  v19[1] = 0x7365547265646E75;
  void v19[2] = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)();
  swift_bridgeObjectRelease();
  if (v20)
  {
    int8x16_t v12 = NSTemporaryDirectory();
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    URL.init(fileURLWithPath:isDirectory:)();
    return swift_bridgeObjectRelease();
  }
  else
  {
    id v14 = [self defaultManager];
    uint64_t v15 = 1;
    id v16 = [v14 URLsForDirectory:5 inDomains:1];

    uint64_t v17 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
    if (*(void *)(v17 + 16))
    {
      (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v4, v17 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)), v5);
      uint64_t v15 = 0;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, v15, 1, v5);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    {
      sub_100020198((uint64_t)v4);
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
    }
    else
    {
      long long v18 = *(void (**)(char *, char *, uint64_t))(v6 + 32);
      v18(v11, v4, v5);
      URL.appendingPathComponent(_:isDirectory:)();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v18)(a1, v9, v5);
    }
  }
  return result;
}

uint64_t *sub_100F7E7D0()
{
  if (qword_1016372C8 != -1) {
    swift_once();
  }
  return &qword_10170F020;
}

uint64_t sub_100F7E81C()
{
  sub_1003444E0();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  qword_10170EF78 = result;
  return result;
}

uint64_t sub_100F7E870(uint64_t a1)
{
  return sub_10044B124(a1, qword_10170EF80);
}

uint64_t sub_100F7E884()
{
  sub_1003444E0();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  qword_10170EF98 = result;
  return result;
}

uint64_t sub_100F7E8EC()
{
  sub_1003444E0();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  qword_10170EFA0 = result;
  return result;
}

uint64_t sub_100F7E950()
{
  sub_1003444E0();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  qword_10170EFA8 = result;
  return result;
}

uint64_t sub_100F7E9BC()
{
  sub_1003444E0();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  qword_10170EFB0 = result;
  return result;
}

uint64_t sub_100F7EA28()
{
  sub_1003444E0();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  qword_10170EFB8 = result;
  return result;
}

uint64_t sub_100F7EA90()
{
  sub_1003444E0();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  qword_10170EFC0 = result;
  return result;
}

uint64_t sub_100F7EAF0()
{
  sub_1003444E0();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  qword_10170EFC8 = result;
  return result;
}

uint64_t sub_100F7EB58()
{
  sub_1003444E0();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  qword_10170EFD0 = result;
  return result;
}

uint64_t sub_100F7EBB8()
{
  sub_1003444E0();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  qword_10170EFD8 = result;
  return result;
}

uint64_t sub_100F7EC20()
{
  sub_1003444E0();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  qword_10170EFE0 = result;
  return result;
}

uint64_t sub_100F7EC88()
{
  sub_1003444E0();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  qword_10170EFE8 = result;
  return result;
}

uint64_t sub_100F7ECF4()
{
  sub_1003444E0();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  qword_10170EFF0 = result;
  return result;
}

uint64_t sub_100F7ED60()
{
  sub_1003444E0();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  qword_10170EFF8 = result;
  return result;
}

uint64_t sub_100F7EDCC()
{
  sub_1003444E0();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  qword_10170F000 = result;
  return result;
}

uint64_t sub_100F7EE2C()
{
  sub_1003444E0();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  qword_10170F008 = result;
  return result;
}

uint64_t sub_100F7EE98()
{
  sub_1003444E0();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  qword_10170F010 = result;
  return result;
}

uint64_t sub_100F7EF00()
{
  sub_1003444E0();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  qword_10170F018 = result;
  return result;
}

uint64_t sub_100F7EF68()
{
  sub_1003444E0();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  qword_10170F020 = result;
  return result;
}

uint64_t sub_100F7EFD4()
{
  sub_1003444E0();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  qword_10170F028 = result;
  return result;
}

uint64_t sub_100F7F03C()
{
  sub_1003444E0();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  qword_10170F030 = result;
  return result;
}

uint64_t sub_100F7F0A8()
{
  sub_1003444E0();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  qword_10170F038 = result;
  return result;
}

uint64_t sub_100F7F108()
{
  sub_1003444E0();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  qword_10170F040 = result;
  return result;
}

uint64_t sub_100F7F174()
{
  sub_1003444E0();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  qword_10170F048 = result;
  return result;
}

uint64_t sub_100F7F1E0()
{
  sub_1003444E0();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  qword_10170F050 = result;
  return result;
}

uint64_t sub_100F7F24C()
{
  sub_1003444E0();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  qword_10170F058 = result;
  return result;
}

uint64_t sub_100F7F2AC()
{
  sub_1003444E0();
  uint64_t result = OS_os_log.init(subsystem:category:)();
  qword_10170F060 = result;
  return result;
}

uint64_t sub_100F7F318(uint64_t a1)
{
  return sub_10044B124(a1, qword_10170F068);
}

uint64_t sub_100F7F344(uint64_t a1)
{
  return sub_10044B124(a1, qword_10170F080);
}

uint64_t sub_100F7F364(uint64_t a1)
{
  return sub_10044B124(a1, qword_10170F098);
}

uint64_t sub_100F7F388(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_1016656E8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_100F7FBD0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_100F7F518(uint64_t a1)
{
  unint64_t v2 = sub_1000989E0();

  return RequestContentRepresentable.description.getter(a1, v2);
}

uint64_t sub_100F7F554()
{
  uint64_t v1 = 0x6D617473656D6974;
  if (*v0 != 1) {
    uint64_t v1 = 1684628597;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x656372756F73;
  }
}

uint64_t sub_100F7F5A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100F7FE98(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100F7F5D0(uint64_t a1)
{
  unint64_t v2 = sub_100F7FBD0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100F7F60C(uint64_t a1)
{
  unint64_t v2 = sub_100F7FBD0();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100F7F648@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100F7FFE4(a1, (uint64_t *)v6);
  if (!v2)
  {
    double result = *(double *)v6;
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(void *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_100F7F690(void *a1)
{
  return sub_100F7F388(a1);
}

uint64_t sub_100F7F6CC()
{
  uint64_t v1 = type metadata accessor for Date();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v5 = [self currentDevice];
  if (v5
    && (uint64_t v6 = v5,
        id v7 = [v5 uniqueDeviceIdentifier],
        v6,
        v7))
  {
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v10 = v9;

    id v11 = [objc_allocWithZone((Class)NSProcessInfo) init];
    id v12 = [v11 processName];

    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v15 = v14;

    static Date.trustedNow.getter((uint64_t)v4);
    uint64_t v16 = Date.epoch.getter();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    JSONEncoder.init()();
    v21[1] = v13;
    v21[2] = v15;
    v21[3] = v16;
    v21[4] = v8;
    v21[5] = v10;
    sub_100F7F99C();
    uint64_t v17 = dispatch thunk of JSONEncoder.encode<A>(_:)();
    if (v0)
    {
      swift_errorRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      return 0;
    }
    else
    {
      uint64_t v1 = v17;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
    }
  }
  else
  {
    uint64_t v18 = type metadata accessor for GenericError();
    sub_100A33578();
    swift_allocError();
    strcpy(v19, "Missing UDID!");
    *((_WORD *)v19 + 7) = -4864;
    (*(void (**)(char *, void, uint64_t))(*(void *)(v18 - 8) + 104))(v19, enum case for GenericError.error(_:), v18);
    swift_willThrow();
  }
  return v1;
}

unint64_t sub_100F7F99C()
{
  unint64_t result = qword_1016656D0;
  if (!qword_1016656D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016656D0);
  }
  return result;
}

uint64_t initializeWithCopy for FetchDevicesRequest.Body(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for FetchDevicesRequest.Body(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for FetchDevicesRequest.Body(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for FetchDevicesRequest.Body()
{
  return &type metadata for FetchDevicesRequest.Body;
}

ValueMetadata *type metadata accessor for FetchDevicesRequest()
{
  return &type metadata for FetchDevicesRequest;
}

unint64_t sub_100F7FB24()
{
  unint64_t result = qword_1016656D8;
  if (!qword_1016656D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016656D8);
  }
  return result;
}

unint64_t sub_100F7FB7C()
{
  unint64_t result = qword_1016656E0;
  if (!qword_1016656E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016656E0);
  }
  return result;
}

unint64_t sub_100F7FBD0()
{
  unint64_t result = qword_1016656F0;
  if (!qword_1016656F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016656F0);
  }
  return result;
}

id sub_100F7FC24()
{
  return sub_100F7FC3C();
}

id sub_100F7FC3C()
{
  unint64_t v0 = sub_10092D8F8((uint64_t)_swiftEmptyArrayStorage);
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  char v1 = sub_1010AB610(v10);
  swift_bridgeObjectRelease();
  if (v1)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_10016C0FC(1702195828, 0xE400000000000000, 0xD000000000000018, 0x80000001013FE170, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
  }
  id result = [self currentDevice];
  if (result)
  {
    uint64_t v4 = result;
    id v5 = [result serverFriendlyDescription];

    if (v5)
    {
      uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v8 = v7;

      char v9 = swift_isUniquelyReferenced_nonNull_native();
      sub_10016C0FC(v6, v8, 0xD000000000000011, 0x80000001013F64E0, v9);
      swift_bridgeObjectRelease();
    }
    return (id)v0;
  }
  else
  {
    __break(1u);
  }
  return result;
}

unint64_t sub_100F7FDE8()
{
  unint64_t v0 = sub_10092D8F8((uint64_t)&off_1015A5B60);
  id v1 = sub_100F7FC3C();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v5 = v0;
  sub_1001EE9C8((uint64_t)v1, (uint64_t)sub_100BD6E00, 0, isUniquelyReferenced_nonNull_native, &v5);
  unint64_t v3 = v5;
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_100F7FE98(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656372756F73 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6D617473656D6974 && a2 == 0xE900000000000070 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1684628597 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_100F7FFE4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_10000588C(&qword_1016656F8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100F7FBD0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  char v22 = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  char v21 = 1;
  swift_bridgeObjectRetain();
  uint64_t v19 = KeyedDecodingContainer.decode(_:forKey:)();
  char v20 = 2;
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v14 = v13;
  uint64_t v15 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v18 = v12;
  v15(v8, v5);
  swift_bridgeObjectRetain();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v9;
  a2[1] = v11;
  uint64_t v17 = v18;
  a2[2] = v19;
  a2[3] = v17;
  a2[4] = v14;
  return result;
}

unsigned char *storeEnumTagSinglePayload for FetchDevicesRequest.Body.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100F802ECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FetchDevicesRequest.Body.CodingKeys()
{
  return &type metadata for FetchDevicesRequest.Body.CodingKeys;
}

unint64_t sub_100F80328()
{
  unint64_t result = qword_101665700;
  if (!qword_101665700)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101665700);
  }
  return result;
}

unint64_t sub_100F80380()
{
  unint64_t result = qword_101665708;
  if (!qword_101665708)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101665708);
  }
  return result;
}

unint64_t sub_100F803D8()
{
  unint64_t result = qword_101665710;
  if (!qword_101665710)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101665710);
  }
  return result;
}

uint64_t *sub_100F8042C(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v38 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v38 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_1000361E0(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a2[2];
    unint64_t v10 = a2[3];
    sub_1000361E0(v9, v10);
    a1[2] = v9;
    a1[3] = v10;
    uint64_t v11 = a2[4];
    unint64_t v12 = a2[5];
    sub_1000361E0(v11, v12);
    a1[4] = v11;
    a1[5] = v12;
    uint64_t v13 = a2[6];
    unint64_t v14 = a2[7];
    sub_1000361E0(v13, v14);
    a1[6] = v13;
    a1[7] = v14;
    uint64_t v15 = a2[8];
    unint64_t v16 = a2[9];
    sub_1000361E0(v15, v16);
    a1[8] = v15;
    a1[9] = v16;
    uint64_t v17 = a3[9];
    uint64_t v18 = (char *)a1 + v17;
    uint64_t v19 = (char *)a2 + v17;
    uint64_t v20 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
    uint64_t v21 = a3[10];
    uint64_t v22 = a3[11];
    __int16 v23 = (uint64_t *)((char *)a1 + v21);
    uint64_t v24 = (uint64_t *)((char *)a2 + v21);
    uint64_t v25 = v24[1];
    *__int16 v23 = *v24;
    v23[1] = v25;
    long long v26 = (uint64_t *)((char *)a1 + v22);
    uint64_t v27 = *(uint64_t *)((char *)a2 + v22);
    unint64_t v28 = *(uint64_t *)((char *)a2 + v22 + 8);
    swift_bridgeObjectRetain();
    sub_1000361E0(v27, v28);
    *long long v26 = v27;
    v26[1] = v28;
    uint64_t v29 = a3[12];
    uint64_t v30 = (uint64_t *)((char *)a1 + v29);
    uint64_t v31 = (uint64_t *)((char *)a2 + v29);
    uint64_t v32 = *v31;
    unint64_t v33 = v31[1];
    sub_1000361E0(*v31, v33);
    uint64_t *v30 = v32;
    v30[1] = v33;
    uint64_t v34 = a3[13];
    unint64_t v35 = (char *)a1 + v34;
    uint64_t v36 = (char *)a2 + v34;
    unint64_t v37 = *((void *)v36 + 1);
    if (v37 >> 60 == 15)
    {
      *(_OWORD *)unint64_t v35 = *(_OWORD *)v36;
    }
    else
    {
      uint64_t v39 = *(void *)v36;
      sub_1000361E0(*(void *)v36, *((void *)v36 + 1));
      *(void *)unint64_t v35 = v39;
      *((void *)v35 + 1) = v37;
    }
    *(uint64_t *)((char *)a1 + a3[14]) = *(uint64_t *)((char *)a2 + a3[14]);
  }
  return a1;
}

uint64_t sub_100F80600(uint64_t a1, int *a2)
{
  sub_10001CFB8(*(void *)a1, *(void *)(a1 + 8));
  sub_10001CFB8(*(void *)(a1 + 16), *(void *)(a1 + 24));
  sub_10001CFB8(*(void *)(a1 + 32), *(void *)(a1 + 40));
  sub_10001CFB8(*(void *)(a1 + 48), *(void *)(a1 + 56));
  sub_10001CFB8(*(void *)(a1 + 64), *(void *)(a1 + 72));
  uint64_t v4 = a1 + a2[9];
  uint64_t v5 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  swift_bridgeObjectRelease();
  sub_10001CFB8(*(void *)(a1 + a2[11]), *(void *)(a1 + a2[11] + 8));
  uint64_t result = sub_10001CFB8(*(void *)(a1 + a2[12]), *(void *)(a1 + a2[12] + 8));
  uint64_t v7 = (uint64_t *)(a1 + a2[13]);
  unint64_t v8 = v7[1];
  if (v8 >> 60 != 15)
  {
    uint64_t v9 = *v7;
    return sub_10001CFB8(v9, v8);
  }
  return result;
}

uint64_t *sub_100F80704(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000361E0(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  sub_1000361E0(v8, v9);
  a1[2] = v8;
  a1[3] = v9;
  uint64_t v10 = a2[4];
  unint64_t v11 = a2[5];
  sub_1000361E0(v10, v11);
  a1[4] = v10;
  a1[5] = v11;
  uint64_t v12 = a2[6];
  unint64_t v13 = a2[7];
  sub_1000361E0(v12, v13);
  a1[6] = v12;
  a1[7] = v13;
  uint64_t v14 = a2[8];
  unint64_t v15 = a2[9];
  sub_1000361E0(v14, v15);
  a1[8] = v14;
  a1[9] = v15;
  uint64_t v16 = a3[9];
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
  uint64_t v20 = a3[10];
  uint64_t v21 = a3[11];
  uint64_t v22 = (uint64_t *)((char *)a1 + v20);
  __int16 v23 = (uint64_t *)((char *)a2 + v20);
  uint64_t v24 = v23[1];
  *uint64_t v22 = *v23;
  v22[1] = v24;
  uint64_t v25 = (uint64_t *)((char *)a1 + v21);
  uint64_t v26 = *(uint64_t *)((char *)a2 + v21);
  unint64_t v27 = *(uint64_t *)((char *)a2 + v21 + 8);
  swift_bridgeObjectRetain();
  sub_1000361E0(v26, v27);
  *uint64_t v25 = v26;
  v25[1] = v27;
  uint64_t v28 = a3[12];
  uint64_t v29 = (uint64_t *)((char *)a1 + v28);
  uint64_t v30 = (uint64_t *)((char *)a2 + v28);
  uint64_t v31 = *v30;
  unint64_t v32 = v30[1];
  sub_1000361E0(*v30, v32);
  *uint64_t v29 = v31;
  v29[1] = v32;
  uint64_t v33 = a3[13];
  uint64_t v34 = (char *)a1 + v33;
  unint64_t v35 = (char *)a2 + v33;
  unint64_t v36 = *((void *)v35 + 1);
  if (v36 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v34 = *(_OWORD *)v35;
  }
  else
  {
    uint64_t v37 = *(void *)v35;
    sub_1000361E0(*(void *)v35, *((void *)v35 + 1));
    *(void *)uint64_t v34 = v37;
    *((void *)v34 + 1) = v36;
  }
  *(uint64_t *)((char *)a1 + a3[14]) = *(uint64_t *)((char *)a2 + a3[14]);
  return a1;
}

uint64_t *sub_100F80888(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000361E0(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10001CFB8(v8, v9);
  uint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  sub_1000361E0(v10, v11);
  uint64_t v12 = a1[2];
  unint64_t v13 = a1[3];
  a1[2] = v10;
  a1[3] = v11;
  sub_10001CFB8(v12, v13);
  uint64_t v14 = a2[4];
  unint64_t v15 = a2[5];
  sub_1000361E0(v14, v15);
  uint64_t v16 = a1[4];
  unint64_t v17 = a1[5];
  a1[4] = v14;
  a1[5] = v15;
  sub_10001CFB8(v16, v17);
  uint64_t v18 = a2[6];
  unint64_t v19 = a2[7];
  sub_1000361E0(v18, v19);
  uint64_t v20 = a1[6];
  unint64_t v21 = a1[7];
  a1[6] = v18;
  a1[7] = v19;
  sub_10001CFB8(v20, v21);
  uint64_t v22 = a2[8];
  unint64_t v23 = a2[9];
  sub_1000361E0(v22, v23);
  uint64_t v24 = a1[8];
  unint64_t v25 = a1[9];
  a1[8] = v22;
  a1[9] = v23;
  sub_10001CFB8(v24, v25);
  uint64_t v26 = a3[9];
  unint64_t v27 = (char *)a1 + v26;
  uint64_t v28 = (char *)a2 + v26;
  uint64_t v29 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 24))(v27, v28, v29);
  uint64_t v30 = a3[10];
  uint64_t v31 = (uint64_t *)((char *)a1 + v30);
  unint64_t v32 = (uint64_t *)((char *)a2 + v30);
  void *v31 = *v32;
  v31[1] = v32[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v33 = a3[11];
  uint64_t v34 = (uint64_t *)((char *)a1 + v33);
  unint64_t v35 = (uint64_t *)((char *)a2 + v33);
  uint64_t v36 = *v35;
  unint64_t v37 = v35[1];
  sub_1000361E0(*v35, v37);
  uint64_t v38 = *v34;
  unint64_t v39 = v34[1];
  *uint64_t v34 = v36;
  v34[1] = v37;
  sub_10001CFB8(v38, v39);
  uint64_t v40 = a3[12];
  unint64_t v41 = (uint64_t *)((char *)a1 + v40);
  uint64_t v42 = (uint64_t *)((char *)a2 + v40);
  uint64_t v43 = *v42;
  unint64_t v44 = v42[1];
  sub_1000361E0(*v42, v44);
  uint64_t v45 = *v41;
  unint64_t v46 = v41[1];
  *unint64_t v41 = v43;
  v41[1] = v44;
  sub_10001CFB8(v45, v46);
  uint64_t v47 = a3[13];
  uint64_t v48 = (uint64_t *)((char *)a1 + v47);
  unint64_t v49 = (uint64_t *)((char *)a2 + v47);
  unint64_t v50 = *(uint64_t *)((char *)a2 + v47 + 8);
  if (*(unint64_t *)((char *)a1 + v47 + 8) >> 60 != 15)
  {
    if (v50 >> 60 != 15)
    {
      uint64_t v52 = *v49;
      sub_1000361E0(v52, v50);
      uint64_t v53 = *v48;
      unint64_t v54 = v48[1];
      *uint64_t v48 = v52;
      v48[1] = v50;
      sub_10001CFB8(v53, v54);
      goto LABEL_8;
    }
    sub_1001356D0((uint64_t)v48);
    goto LABEL_6;
  }
  if (v50 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)uint64_t v48 = *(_OWORD *)v49;
    goto LABEL_8;
  }
  uint64_t v51 = *v49;
  sub_1000361E0(v51, v50);
  *uint64_t v48 = v51;
  v48[1] = v50;
LABEL_8:
  *(uint64_t *)((char *)a1 + a3[14]) = *(uint64_t *)((char *)a2 + a3[14]);
  return a1;
}

_OWORD *sub_100F80AA0(_OWORD *a1, _OWORD *a2, int *a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  long long v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  a1[4] = a2[4];
  uint64_t v8 = a3[9];
  unint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  uint64_t v12 = a3[11];
  *(_OWORD *)((char *)a1 + a3[10]) = *(_OWORD *)((char *)a2 + a3[10]);
  *(_OWORD *)((char *)a1 + v12) = *(_OWORD *)((char *)a2 + v12);
  uint64_t v13 = a3[13];
  *(_OWORD *)((char *)a1 + a3[12]) = *(_OWORD *)((char *)a2 + a3[12]);
  *(_OWORD *)((char *)a1 + v13) = *(_OWORD *)((char *)a2 + v13);
  *(void *)((char *)a1 + a3[14]) = *(void *)((char *)a2 + a3[14]);
  return a1;
}

uint64_t *sub_100F80B70(uint64_t *a1, _OWORD *a2, int *a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_10001CFB8(v6, v7);
  uint64_t v8 = a1[2];
  unint64_t v9 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_10001CFB8(v8, v9);
  uint64_t v10 = a1[4];
  unint64_t v11 = a1[5];
  *((_OWORD *)a1 + 2) = a2[2];
  sub_10001CFB8(v10, v11);
  uint64_t v12 = a1[6];
  unint64_t v13 = a1[7];
  *((_OWORD *)a1 + 3) = a2[3];
  sub_10001CFB8(v12, v13);
  uint64_t v14 = a1[8];
  unint64_t v15 = a1[9];
  *((_OWORD *)a1 + 4) = a2[4];
  sub_10001CFB8(v14, v15);
  uint64_t v16 = a3[9];
  unint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 40))(v17, v18, v19);
  uint64_t v20 = a3[10];
  unint64_t v21 = (uint64_t *)((char *)a1 + v20);
  uint64_t v22 = (uint64_t *)((char *)a2 + v20);
  uint64_t v24 = *v22;
  uint64_t v23 = v22[1];
  *unint64_t v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  uint64_t v25 = a3[11];
  uint64_t v26 = *(uint64_t *)((char *)a1 + v25);
  unint64_t v27 = *(uint64_t *)((char *)a1 + v25 + 8);
  *(_OWORD *)((char *)a1 + v25) = *(_OWORD *)((char *)a2 + v25);
  sub_10001CFB8(v26, v27);
  uint64_t v28 = a3[12];
  uint64_t v29 = *(uint64_t *)((char *)a1 + v28);
  unint64_t v30 = *(uint64_t *)((char *)a1 + v28 + 8);
  *(_OWORD *)((char *)a1 + v28) = *(_OWORD *)((char *)a2 + v28);
  sub_10001CFB8(v29, v30);
  uint64_t v31 = a3[13];
  unint64_t v32 = (uint64_t *)((char *)a1 + v31);
  uint64_t v33 = (uint64_t *)((char *)a2 + v31);
  unint64_t v34 = *(uint64_t *)((char *)a1 + v31 + 8);
  if (v34 >> 60 != 15)
  {
    unint64_t v35 = v33[1];
    if (v35 >> 60 != 15)
    {
      uint64_t v36 = *v32;
      *unint64_t v32 = *v33;
      v32[1] = v35;
      sub_10001CFB8(v36, v34);
      goto LABEL_6;
    }
    sub_1001356D0((uint64_t)v32);
  }
  *(_OWORD *)unint64_t v32 = *(_OWORD *)v33;
LABEL_6:
  *(uint64_t *)((char *)a1 + a3[14]) = *(void *)((char *)a2 + a3[14]);
  return a1;
}

uint64_t sub_100F80CF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100F80D04);
}

uint64_t sub_100F80D04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 36);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 40) + 8);
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    int v13 = v12 - 1;
    if (v13 < 0) {
      int v13 = -1;
    }
    return (v13 + 1);
  }
}

uint64_t sub_100F80DD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100F80DEC);
}

uint64_t sub_100F80DEC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 36);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 40) + 8) = a2;
  }
  return result;
}

uint64_t type metadata accessor for AirPodsLEPairingLockCheckResponse()
{
  uint64_t result = qword_101665770;
  if (!qword_101665770) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100F80EFC()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_100F80FC0(char a1)
{
  unint64_t result = 1684628325;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x644970696863;
      break;
    case 2:
      unint64_t result = 0x754E6C6169726573;
      break;
    case 3:
      unint64_t result = 0x5364656573;
      break;
    case 4:
      unint64_t result = 0x6953726576726573;
      break;
    case 5:
      unint64_t result = 0x6449616E6D66;
      break;
    case 6:
      unint64_t result = 0x704164656B73616DLL;
      break;
    case 7:
      unint64_t result = 0x654C636341616162;
      break;
    case 8:
      unint64_t result = 0x6E49636341616162;
      break;
    case 9:
      unint64_t result = 0xD000000000000013;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100F81118(char a1)
{
  unint64_t result = 1684628325;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x644970696863;
      break;
    case 2:
      unint64_t result = 0x754E6C6169726573;
      break;
    case 3:
      unint64_t result = 0x5364656573;
      break;
    case 4:
      unint64_t result = 0x6953726576726573;
      break;
    case 5:
      unint64_t result = 0x6449616E6D66;
      break;
    case 6:
      unint64_t result = 0x704164656B73616DLL;
      break;
    case 7:
      unint64_t result = 0x654C636341616162;
      break;
    case 8:
      unint64_t result = 0x6E49636341616162;
      break;
    case 9:
      unint64_t result = 0xD000000000000013;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100F81270@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v24 = a2;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v25 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_10000588C(&qword_1016657D0);
  uint64_t v7 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (int *)type metadata accessor for AirPodsLEPairingLockCheckResponse();
  uint64_t v11 = __chkstk_darwin(v10);
  int v13 = (char *)v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(int *)(v11 + 56);
  uint64_t v28 = a1;
  uint64_t v29 = v13;
  *(void *)&v13[v14] = 0;
  sub_10001CD44(a1, a1[3]);
  sub_100F81C80();
  unint64_t v27 = v9;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v28);
  }
  uint64_t v23 = v6;
  char v31 = 0;
  unint64_t v15 = sub_100037AA0();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v16 = v29;
  *(_OWORD *)uint64_t v29 = v30;
  char v31 = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *((_OWORD *)v16 + 1) = v30;
  char v31 = 2;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *((_OWORD *)v16 + 2) = v30;
  char v31 = 3;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *((_OWORD *)v16 + 3) = v30;
  char v31 = 4;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v22[2] = v15;
  *((_OWORD *)v16 + 4) = v30;
  LOBYTE(v30) = 5;
  sub_100342C5C();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v22[0] = v10;
  v22[1] = v4;
  (*(void (**)(char *, char *, uint64_t))(v25 + 32))(&v16[v10[9]], v23, v4);
  LOBYTE(v30) = 6;
  uint64_t v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v18 = (uint64_t *)&v16[*(int *)(v22[0] + 40)];
  *uint64_t v18 = v17;
  v18[1] = v19;
  char v31 = 7;
  uint64_t v23 = 0;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(_OWORD *)&v16[v10[11]] = v30;
  char v31 = 8;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(_OWORD *)&v16[v10[12]] = v30;
  char v31 = 9;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v27, v26);
  uint64_t v20 = (uint64_t)v29;
  *(_OWORD *)&v29[v10[13]] = v30;
  sub_100F81CD4(v20, v24);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v28);
  return sub_100F81D38(v20);
}

uint64_t sub_100F819C0(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = sub_100F80FC0(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_100F80FC0(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int sub_100F81A4C()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_100F80FC0(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_100F81AB0()
{
  sub_100F80FC0(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100F81B04()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_100F80FC0(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t sub_100F81B64@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100F81FA0(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_100F81B94@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_100F80FC0(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_100F81BC0()
{
  return sub_100F81118(*v0);
}

unint64_t sub_100F81BC8@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100F81FA0(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100F81BF0(uint64_t a1)
{
  unint64_t v2 = sub_100F81C80();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100F81C2C(uint64_t a1)
{
  unint64_t v2 = sub_100F81C80();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100F81C68@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100F81270(a1, a2);
}

unint64_t sub_100F81C80()
{
  unint64_t result = qword_1016657D8;
  if (!qword_1016657D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016657D8);
  }
  return result;
}

uint64_t sub_100F81CD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AirPodsLEPairingLockCheckResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100F81D38(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AirPodsLEPairingLockCheckResponse();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for AirPodsLEPairingLockCheckResponse.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *unint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100F81E60);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsLEPairingLockCheckResponse.CodingKeys()
{
  return &type metadata for AirPodsLEPairingLockCheckResponse.CodingKeys;
}

unint64_t sub_100F81E9C()
{
  unint64_t result = qword_1016657E0;
  if (!qword_1016657E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016657E0);
  }
  return result;
}

unint64_t sub_100F81EF4()
{
  unint64_t result = qword_1016657E8;
  if (!qword_1016657E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016657E8);
  }
  return result;
}

unint64_t sub_100F81F4C()
{
  unint64_t result = qword_1016657F0;
  if (!qword_1016657F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016657F0);
  }
  return result;
}

unint64_t sub_100F81FA0(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1015A52A8, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xA) {
    return 10;
  }
  else {
    return v3;
  }
}

uint64_t sub_100F81FEC(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for HashAlgorithm();
  uint64_t v78 = *(void *)(v4 - 8);
  uint64_t v79 = v4;
  __chkstk_darwin(v4);
  uint64_t v82 = (char *)&v76 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned int v6 = (void *)type metadata accessor for String.Encoding();
  uint64_t v7 = *(v6 - 1);
  __chkstk_darwin(v6);
  unint64_t v83 = (char *)&v76 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101637310 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = sub_100010324(v9, (uint64_t)qword_10170F068);
  sub_100037A38(a1, a2);
  sub_100037A38(a1, a2);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.info.getter();
  BOOL v13 = os_log_type_enabled(v11, v12);
  uint64_t v84 = v7;
  id v85 = v6;
  if (v13)
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v86 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136315138;
    if (a2 >> 60 == 15)
    {
      uint64_t v15 = 0;
      unint64_t v16 = 0xE000000000000000;
    }
    else
    {
      uint64_t v15 = Data.hexString.getter();
      unint64_t v16 = v17;
    }
    uint64_t v88 = sub_1008FA0F0(v15, v16, &v86);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100037A24(a1, a2);
    sub_100037A24(a1, a2);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "E1 encryption key from server: %s", v14, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100037A24(a1, a2);
    sub_100037A24(a1, a2);
  }

  id v18 = [self defaultStore];
  if (v18)
  {
    uint64_t v19 = v18;
    uint64_t v20 = a1;
    unint64_t v21 = a2;
    if (a2 >> 60 == 15)
    {
      if (qword_101637328 != -1) {
        swift_once();
      }
      unint64_t v21 = qword_101665800;
      if ((unint64_t)qword_101665800 >> 60 == 15)
      {
        uint64_t v22 = Logger.logObject.getter();
        os_log_type_t v23 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v22, v23))
        {
          uint64_t v24 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v24 = 0;
          _os_log_impl((void *)&_mh_execute_header, v22, v23, "Invalid server public key.", v24, 2u);
          swift_slowDealloc();
        }

        goto LABEL_38;
      }
      uint64_t v20 = qword_1016657F8;
      sub_1000361E0(qword_1016657F8, qword_101665800);
    }
    sub_100037A38(a1, a2);
    id v25 = [v19 aa_primaryAppleAccount];
    uint64_t v81 = v10;
    if (v25)
    {
      uint64_t v26 = v25;
      id v27 = [v25 aa_personID];
      if (v27)
      {
        uint64_t v28 = v27;
        uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v31 = v30;

        swift_bridgeObjectRetain_n();
        unint64_t v32 = Logger.logObject.getter();
        os_log_type_t v33 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v32, v33))
        {
          uint64_t v76 = v20;
          unint64_t v34 = (uint8_t *)swift_slowAlloc();
          uint64_t v35 = swift_slowAlloc();
          unint64_t v77 = v21;
          uint64_t v86 = v35;
          *(_DWORD *)unint64_t v34 = 136315138;
          swift_bridgeObjectRetain();
          uint64_t v88 = sub_1008FA0F0(v29, v31, &v86);
          uint64_t v20 = v76;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v32, v33, "DSID: %s", v34, 0xCu);
          swift_arrayDestroy();
          unint64_t v21 = v77;
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v56 = v83;
        static String.Encoding.utf8.getter();
        uint64_t v42 = String.data(using:allowLossyConversion:)();
        unint64_t v44 = v57;
        (*(void (**)(char *, id))(v84 + 8))(v56, v85);
        if (v44 >> 60 == 15)
        {
          swift_bridgeObjectRetain();
          uint64_t v58 = Logger.logObject.getter();
          os_log_type_t v59 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v58, v59))
          {
            uint64_t v60 = swift_slowAlloc();
            uint64_t v61 = swift_slowAlloc();
            unint64_t v77 = v21;
            uint64_t v86 = v61;
            *(_DWORD *)uint64_t v60 = 141558275;
            uint64_t v88 = 1752392040;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v60 + 12) = 2081;
            uint64_t v76 = v20;
            swift_bridgeObjectRetain();
            uint64_t v88 = sub_1008FA0F0(v29, v31, &v86);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v58, v59, "Invalid DSID %{private,mask.hash}s", (uint8_t *)v60, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            uint64_t v50 = v76;
            goto LABEL_33;
          }
          swift_bridgeObjectRelease_n();

          sub_10001CFB8(v20, v21);
          goto LABEL_38;
        }
        id v85 = v19;
        swift_bridgeObjectRelease();
        uint64_t v52 = v78;
        uint64_t v51 = v79;
        uint64_t v62 = v26;
        uint64_t v45 = v82;
        (*(void (**)(char *, void, uint64_t))(v78 + 104))(v82, enum case for HashAlgorithm.sha256(_:), v79);
        uint64_t v53 = Data.hash(algorithm:)();
        unint64_t v64 = v63;

        unint64_t v55 = v64;
        goto LABEL_35;
      }
    }
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Failed to obtain DSID from account. Using device serial number instead to support account signed out.", v38, 2u);
      swift_slowDealloc();
    }

    uint64_t v40 = *(void *)(v80 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_serialNumber);
    unint64_t v39 = *(void *)(v80 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_serialNumber + 8);
    swift_bridgeObjectRetain();
    unint64_t v41 = v83;
    static String.Encoding.utf8.getter();
    uint64_t v42 = String.data(using:allowLossyConversion:)();
    unint64_t v44 = v43;
    (*(void (**)(char *, id))(v84 + 8))(v41, v85);
    uint64_t v45 = v82;
    if (v44 >> 60 == 15)
    {
      swift_bridgeObjectRetain();
      unint64_t v46 = Logger.logObject.getter();
      os_log_type_t v47 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v46, v47))
      {
        uint64_t v48 = swift_slowAlloc();
        uint64_t v49 = swift_slowAlloc();
        unint64_t v77 = v21;
        uint64_t v86 = v49;
        *(_DWORD *)uint64_t v48 = 141558275;
        uint64_t v88 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v48 + 12) = 2081;
        swift_bridgeObjectRetain();
        uint64_t v88 = sub_1008FA0F0(v40, v39, &v86);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v46, v47, "Invalid serial number %{private,mask.hash}s", (uint8_t *)v48, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v50 = v20;
LABEL_33:
        sub_10001CFB8(v50, v77);
        return 0;
      }
      sub_10001CFB8(v20, v21);

      swift_bridgeObjectRelease_n();
LABEL_38:

      return 0;
    }
    id v85 = v19;
    swift_bridgeObjectRelease();
    uint64_t v52 = v78;
    uint64_t v51 = v79;
    (*(void (**)(char *, void, uint64_t))(v78 + 104))(v45, enum case for HashAlgorithm.sha256(_:), v79);
    uint64_t v53 = Data.hash(algorithm:)();
    unint64_t v55 = v54;
LABEL_35:
    sub_100037A24(v42, v44);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v45, v51);
    sub_1000361E0(v20, v21);
    unint64_t v65 = v21;
    uint64_t v66 = sub_10043A56C(v20, v21);
    unint64_t v68 = v67;
    sub_1000361E0(v66, v67);
    sub_100A932C4(&v86);
    sub_10001CFB8(v66, v68);
    sub_100434F38(v86, v87, &v86);
    sub_10001CFB8(v53, v55);
    sub_10001CFB8(v20, v65);

    sub_10001CFB8(v66, v68);
    uint64_t v71 = v86;
    unint64_t v72 = v87;
    uint64_t v73 = v80;
    uint64_t v74 = *(void *)(v80 + 40);
    unint64_t v75 = *(void *)(v80 + 48);
    *(void *)(v80 + 40) = v86;
    *(void *)(v73 + 48) = v72;
    sub_1000361E0(v71, v72);
    sub_100037A24(v74, v75);
    return v71;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100F82C4C@<X0>(uint64_t a1@<X8>)
{
  unint64_t v3 = *(void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_payloadSignatureS4 + 8);
  if (v3 >> 60 == 15
    || (unint64_t v4 = *(void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_scrtAttestation + 8),
        v4 >> 60 == 15)
    || (unint64_t v5 = *(void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryCerts + 8),
        v5 >> 60 == 15)
    || (unint64_t v6 = *(void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_csr + 8), v6 >> 60 == 15)
    || (unint64_t v7 = *(void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_authNonce + 8), v7 >> 60 == 15)
    || (unint64_t v8 = *(void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_alternateSerialNumber + 8),
        v8 >> 60 == 15)
    || (unint64_t v9 = *(void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber + 8),
        v9 >> 60 == 15)
    || (unint64_t v10 = *(void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_status + 8), v10 >> 60 == 15))
  {
    if (qword_101637320 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_100010324(v11, (uint64_t)qword_10170F098);
    os_log_type_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Missing info to generate AirPodsPairingAckData!", v14, 2u);
      swift_slowDealloc();
    }

    sub_100F87AA0(&v35);
  }
  else
  {
    uint64_t v16 = *(void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_scrtAttestation);
    uint64_t v20 = *(void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryCerts);
    uint64_t v21 = *(void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_csr);
    uint64_t v23 = *(void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_authNonce);
    uint64_t v24 = *(void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_alternateSerialNumber);
    uint64_t v25 = *(void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber);
    uint64_t v26 = *(void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_payloadSignatureS4);
    uint64_t v22 = *(void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_status);
    uint64_t v34 = *(void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_ecid + 8);
    uint64_t v17 = *(void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_chipId);
    uint64_t v32 = *(void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_chipId + 8);
    uint64_t v18 = *(void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_serialNumber);
    uint64_t v33 = *(void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_serialNumber + 8);
    unint64_t v30 = v1[3];
    uint64_t v31 = v1[2];
    uint64_t v19 = v1[11];
    uint64_t v29 = v1[13];
    uint64_t v27 = v1[12];
    unint64_t v28 = v1[14];
    *(void *)&long long v35 = *(void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_ecid);
    *((void *)&v35 + 1) = v34;
    uint64_t v36 = v17;
    uint64_t v37 = v32;
    uint64_t v38 = v18;
    uint64_t v39 = v33;
    uint64_t v40 = v23;
    unint64_t v41 = v7;
    uint64_t v42 = v25;
    unint64_t v43 = v9;
    uint64_t v44 = v24;
    unint64_t v45 = v8;
    uint64_t v46 = v20;
    unint64_t v47 = v5;
    uint64_t v48 = v21;
    unint64_t v49 = v6;
    uint64_t v50 = v31;
    unint64_t v51 = v30;
    uint64_t v52 = v16;
    unint64_t v53 = v4;
    uint64_t v54 = v26;
    unint64_t v55 = v3;
    uint64_t v56 = v22;
    unint64_t v57 = v10;
    uint64_t v58 = v19;
    uint64_t v59 = v27;
    uint64_t v60 = v29;
    unint64_t v61 = v28;
    SharingCircleWildAdvertisementKey.init(key:)(&v35);
    sub_100037A38(v26, v3);
    sub_100037A38(v16, v4);
    sub_100037A38(v20, v5);
    sub_100037A38(v21, v6);
    sub_100037A38(v23, v7);
    sub_100037A38(v24, v8);
    sub_100037A38(v25, v9);
    sub_100037A38(v22, v10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000361E0(v31, v30);
    swift_bridgeObjectRetain();
    sub_100037A38(v29, v28);
  }
  sub_10001D608((uint64_t)&v35, (uint64_t)v62, &qword_101639B40);
  return sub_10001D608((uint64_t)v62, a1, &qword_101639B40);
}

uint64_t sub_100F82FE0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v7 = v6;
  unint64_t v109 = a2;
  uint64_t v13 = sub_10000588C(&qword_10163CB78);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v76 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v16 = v6[6];
  if (v16 >> 60 == 15) {
    goto LABEL_13;
  }
  unint64_t v17 = *(void *)((char *)v6 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_baaSignatureS2 + 8);
  if (v17 >> 60 == 15) {
    goto LABEL_13;
  }
  if (*((unsigned char *)v6 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryPartId + 1)) {
    goto LABEL_13;
  }
  unint64_t v18 = *(void *)((char *)v6 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryCerts + 8);
  if (v18 >> 60 == 15) {
    goto LABEL_13;
  }
  unint64_t v19 = *(void *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_csr + 8);
  if (v19 >> 60 == 15) {
    goto LABEL_13;
  }
  unint64_t v20 = *(void *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber + 8);
  if (v20 >> 60 == 15) {
    goto LABEL_13;
  }
  unint64_t v21 = *(void *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_seedK1 + 8);
  if (v21 >> 60 == 15) {
    goto LABEL_13;
  }
  unint64_t v22 = *(void *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_scrtAttestation + 8);
  if (v22 >> 60 == 15) {
    goto LABEL_13;
  }
  unint64_t v23 = *(void *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_authNonce + 8);
  if (v23 >> 60 == 15) {
    goto LABEL_13;
  }
  unint64_t v24 = *(void *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_alternateSerialNumber + 8);
  if (v24 >> 60 == 15) {
    goto LABEL_13;
  }
  uint64_t v104 = v7[5];
  uint64_t v96 = *(void *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_baaSignatureS2);
  LODWORD(v85) = *((unsigned __int8 *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryPartId);
  uint64_t v25 = *(void *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryCerts);
  uint64_t v100 = *(void *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_csr);
  uint64_t v101 = v25;
  uint64_t v26 = *(void *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber);
  uint64_t v27 = *(void *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_seedK1);
  uint64_t v97 = *(void *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_scrtAttestation);
  uint64_t v98 = v27;
  uint64_t v28 = *(void *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_authNonce);
  uint64_t v93 = *(void *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_alternateSerialNumber);
  uint64_t v94 = v28;
  unint64_t v106 = v19;
  uint64_t v107 = v26;
  v152[0] = v26;
  v152[1] = v20;
  unint64_t v105 = v17;
  unint64_t v108 = v20;
  unint64_t v102 = v22;
  unint64_t v103 = v21;
  unint64_t v99 = v23;
  unint64_t v95 = v24;
  sub_100037A38(v26, v20);
  sub_100037A38(v107, v108);
  sub_100037A38(v104, v16);
  sub_100037A38(v96, v105);
  sub_100037A38(v101, v18);
  sub_100037A38(v100, v106);
  sub_100037A38(v98, v103);
  sub_100037A38(v97, v102);
  sub_100037A38(v94, v99);
  sub_100037A38(v93, v95);
  sub_1000362FC();
  unint64_t v90 = v18;
  if ((DataProtocol.isNull.getter() & 1) == 0)
  {
    uint64_t v36 = v107;
    uint64_t v87 = Data.trimmed.getter();
    unint64_t v88 = v37;
    sub_100037A24(v36, v108);
    if (qword_101637320 != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    uint64_t v86 = (uint8_t *)sub_100010324(v38, (uint64_t)qword_10170F098);
    uint64_t v91 = a3;
    sub_100037A38(a3, a4);
    unint64_t v92 = a4;
    sub_100037A38(v91, a4);
    uint64_t v39 = Logger.logObject.getter();
    LODWORD(v83) = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v39, (os_log_type_t)v83))
    {
      id v84 = v39;
      uint64_t v40 = (uint8_t *)swift_slowAlloc();
      uint64_t v82 = swift_slowAlloc();
      v152[0] = v82;
      uint64_t v89 = v40;
      *(_DWORD *)uint64_t v40 = 136446210;
      if (v92 >> 60 == 15)
      {
        uint64_t v41 = 0;
        unint64_t v42 = 0xE000000000000000;
      }
      else
      {
        uint64_t v41 = Data.hexString.getter();
        unint64_t v42 = v43;
      }
      uint64_t v80 = (uint8_t *)v42;
      uint64_t v81 = v89 + 4;
      *(void *)&long long v111 = sub_1008FA0F0(v41, v42, v152);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v44 = v91;
      sub_100037A24(v91, v92);
      sub_100037A24(v44, v92);
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v84, (os_log_type_t)v83, "Pairing token: %{public}s", v89, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100037A24(v91, v92);
      sub_100037A24(v91, v92);
    }
    uint64_t v89 = (uint8_t *)sub_100F85CC8(a5);
    swift_bridgeObjectRetain_n();
    unint64_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.default.getter();
    LODWORD(v84) = v46;
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v86 = (uint8_t *)swift_slowAlloc();
      uint64_t v82 = swift_slowAlloc();
      v152[0] = v82;
      *(_DWORD *)uint64_t v86 = 141558275;
      *(void *)&long long v111 = 1752392040;
      uint64_t v81 = (uint8_t *)&v111 + 8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      unint64_t v47 = v86;
      *((_WORD *)v86 + 6) = 2081;
      uint64_t v80 = v47 + 14;
      uint64_t v79 = type metadata accessor for MultipartAccessoryPairingInfo(0);
      unint64_t v78 = sub_100061B8C();
      unint64_t v83 = v45;
      swift_bridgeObjectRetain();
      uint64_t v79 = Dictionary.description.getter();
      unint64_t v49 = v48;
      swift_bridgeObjectRelease();
      *(void *)&long long v111 = sub_1008FA0F0(v79, v49, v152);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v83, (os_log_type_t)v84, "otherSerialNumbersAndPartIds: %{private,mask.hash}s", v86, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v86 = (uint8_t *)OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_otherSerialNumbersAndPartIds;
    *(void *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_otherSerialNumbersAndPartIds) = v89;
    swift_bridgeObjectRelease();
    if (*(void *)(a5 + 16))
    {
      uint64_t v50 = v87;
      sub_1000361E0(v87, v88);
      unint64_t v51 = (void *)sub_1007241A0(v50, v88);
      if (v52)
      {
        uint64_t v89 = *(uint8_t **)(a5 + 56);
        id v84 = v51;
        uint64_t v53 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
        unint64_t v83 = *(NSObject **)(v53 - 8);
        sub_100F87940((uint64_t)&v89[(uint64_t)v83[9].isa * (void)v84], (uint64_t)v15);
        ((void (*)(char *, void, uint64_t, uint64_t))v83[7].isa)(v15, 0, 1, v53);
      }
      else
      {
        uint64_t v53 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56))(v15, 1, 1, v53);
      }
      sub_10001CFB8(v87, v88);
      type metadata accessor for OwnedBeaconGroup.PairingState(0);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v53 - 8) + 48))(v15, 1, v53) != 1)
      {
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        char v57 = v85;
        if (EnumCaseMultiPayload == 1)
        {
          uint64_t v58 = sub_10000588C(&qword_101643D80);
          uint64_t v59 = (uint64_t)&v15[*(int *)(v58 + 48)];
          sub_100037A24(*(void *)&v15[*(int *)(v58 + 64)], *(void *)&v15[*(int *)(v58 + 64) + 8]);
          sub_10001DAB4(v59, (uint64_t *)&unk_1016477E0);
          uint64_t v60 = type metadata accessor for UUID();
          (*(void (**)(char *, uint64_t))(*(void *)(v60 - 8) + 8))(v15, v60);
          HIDWORD(v76) = 1;
        }
        else
        {
          sub_100F878E4((uint64_t)v15);
          HIDWORD(v76) = 0;
        }
        char v55 = v57;
        goto LABEL_41;
      }
    }
    else
    {
      uint64_t v54 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56))(v15, 1, 1, v54);
    }
    sub_10001DAB4((uint64_t)v15, &qword_10163CB78);
    HIDWORD(v76) = 0;
    char v55 = v85;
LABEL_41:
    unint64_t v61 = *(uint8_t **)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_ecid + 8);
    uint64_t v85 = *(void *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_ecid);
    uint64_t v81 = v61;
    uint64_t v62 = *(void *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_chipId + 8);
    id v84 = *(id *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_chipId);
    uint64_t v79 = v62;
    uint64_t v63 = *(void *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_serialNumber + 8);
    unint64_t v83 = *(NSObject **)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_serialNumber);
    uint64_t v77 = v63;
    uint64_t v89 = *(uint8_t **)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_numBeacons);
    uint64_t v82 = *(void *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_otherSerialNumbers);
    unint64_t v78 = *(void *)&v86[(void)v7];
    LOBYTE(v152[0]) = v55;
    sub_100037A38(a3, a4);
    uint64_t v64 = a1;
    uint64_t v65 = a1;
    unint64_t v66 = v109;
    sub_1000361E0(v65, v109);
    sub_10006145C();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v67 = v77;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v68 = v78;
    swift_bridgeObjectRetain();
    uint64_t v86 = (uint8_t *)FixedWidthInteger.data.getter();
    uint64_t v80 = v69;
    sub_10001CFB8(v87, v88);
    *(void *)&long long v111 = v64;
    *((void *)&v111 + 1) = v66;
    uint64_t v112 = v96;
    unint64_t v113 = v105;
    uint64_t v114 = v91;
    unint64_t v115 = v92;
    uint64_t v70 = v7[2];
    unint64_t v71 = v7[3];
    char v116 = BYTE4(v76);
    uint64_t v72 = v7[11];
    uint64_t v73 = v7[12];
    uint64_t v117 = v85;
    uint64_t v118 = v81;
    uint64_t v74 = v7[13];
    unint64_t v75 = v7[14];
    char v110 = 0;
    id v119 = v84;
    uint64_t v120 = v79;
    uint64_t v121 = v83;
    uint64_t v122 = v67;
    uint64_t v123 = v94;
    unint64_t v124 = v99;
    uint64_t v125 = v107;
    unint64_t v126 = v108;
    uint64_t v127 = v93;
    unint64_t v128 = v95;
    unint64_t v129 = v89;
    char v130 = 0;
    uint64_t v131 = v82;
    unint64_t v132 = v68;
    uint64_t v133 = 0;
    uint64_t v134 = v98;
    unint64_t v135 = v103;
    uint64_t v136 = v101;
    unint64_t v137 = v90;
    uint64_t v138 = v100;
    unint64_t v139 = v106;
    uint64_t v140 = v97;
    unint64_t v141 = v102;
    uint64_t v142 = v86;
    os_log_type_t v143 = v80;
    uint64_t v144 = v70;
    unint64_t v145 = v71;
    uint64_t v146 = v104;
    unint64_t v147 = v16;
    uint64_t v148 = v72;
    uint64_t v149 = v73;
    uint64_t v150 = v74;
    unint64_t v151 = v75;
    SharingCircleWildAdvertisementKey.init(key:)(&v111);
    sub_1000361E0(v70, v71);
    swift_bridgeObjectRetain();
    sub_100037A38(v74, v75);
    goto LABEL_18;
  }
  uint64_t v29 = v107;
  unint64_t v30 = v108;
  sub_100037A24(v107, v108);
  sub_100037A24(v93, v95);
  sub_100037A24(v94, v99);
  sub_100037A24(v97, v102);
  sub_100037A24(v98, v103);
  sub_100037A24(v29, v30);
  sub_100037A24(v100, v106);
  sub_100037A24(v101, v90);
  sub_100037A24(v96, v105);
  sub_100037A24(v104, v16);
LABEL_13:
  if (qword_101637320 != -1) {
    swift_once();
  }
  uint64_t v31 = type metadata accessor for Logger();
  sub_100010324(v31, (uint64_t)qword_10170F098);
  uint64_t v32 = Logger.logObject.getter();
  os_log_type_t v33 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v34 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v34 = 0;
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Missing info to generate AirPodsLEPairingCheckData!", v34, 2u);
    swift_slowDealloc();
  }

  sub_100F87ACC(&v111);
LABEL_18:
  sub_10001D608((uint64_t)&v111, (uint64_t)v152, &qword_101639BC8);
  return sub_10001D608((uint64_t)v152, a6, &qword_101639BC8);
}

uint64_t sub_100F83C14@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_payloadSignatureS4 + 8);
  if (v5 >> 60 == 15) {
    goto LABEL_11;
  }
  unint64_t v6 = *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryEcid + 8);
  if (v6 >> 60 == 15) {
    goto LABEL_11;
  }
  unint64_t v7 = *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_scrtAttestation + 8);
  if (v7 >> 60 == 15
    || (unint64_t v8 = *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_baaAccLeafCert + 8),
        v8 >> 60 == 15)
    || (unint64_t v9 = *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_baaAccIntCA1 + 8),
        v9 >> 60 == 15)
    || (unint64_t v10 = *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_systemPublicKey + 8),
        v10 >> 60 == 15)
    || (unint64_t v12 = *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_refPublicKey + 8),
        v12 >> 60 == 15)
    || (unint64_t v13 = *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryChipId + 8),
        v13 >> 60 == 15)
    || (unint64_t v14 = *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber + 8),
        v14 >> 60 == 15)
    || (unint64_t v16 = *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_status + 8), v16 >> 60 == 15))
  {
LABEL_11:
    static os_log_type_t.error.getter();
    if (qword_101637308 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_100F87A6C(&v43);
  }
  else
  {
    uint64_t v39 = *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_payloadSignatureS4);
    uint64_t v41 = *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryEcid);
    uint64_t v40 = *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_scrtAttestation);
    uint64_t v42 = *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_baaAccLeafCert);
    uint64_t v22 = *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_systemPublicKey);
    uint64_t v24 = *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_refPublicKey);
    uint64_t v25 = *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_baaAccIntCA1);
    uint64_t v29 = *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryChipId);
    uint64_t v30 = *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber);
    uint64_t v31 = *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_status);
    uint64_t v37 = *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_ecid + 8);
    uint64_t v18 = *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_chipId);
    uint64_t v32 = *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_chipId + 8);
    uint64_t v20 = *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_serialNumber);
    uint64_t v19 = *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_serialNumber + 8);
    *(void *)&long long v43 = *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_ecid);
    *((void *)&v43 + 1) = v37;
    uint64_t v21 = v3[2];
    unint64_t v36 = v3[3];
    uint64_t v44 = v18;
    uint64_t v45 = v32;
    uint64_t v46 = v20;
    uint64_t v47 = v19;
    uint64_t v38 = v3[12];
    uint64_t v72 = v3[11];
    uint64_t v33 = v3[13];
    uint64_t v34 = v21;
    unint64_t v35 = v3[14];
    uint64_t v48 = v42;
    unint64_t v49 = v8;
    uint64_t v50 = v25;
    unint64_t v51 = v9;
    uint64_t v52 = v41;
    unint64_t v53 = v6;
    uint64_t v54 = v29;
    unint64_t v55 = v13;
    uint64_t v56 = v30;
    unint64_t v57 = v14;
    uint64_t v58 = v21;
    unint64_t v59 = v36;
    uint64_t v60 = v40;
    unint64_t v61 = v7;
    uint64_t v62 = v39;
    unint64_t v63 = v5;
    uint64_t v64 = v31;
    unint64_t v65 = v16;
    uint64_t v66 = a1;
    unint64_t v67 = a2;
    uint64_t v68 = v22;
    unint64_t v69 = v10;
    uint64_t v70 = v24;
    unint64_t v71 = v12;
    uint64_t v73 = v38;
    uint64_t v74 = v33;
    unint64_t v75 = v35;
    unint64_t v23 = v12;
    unint64_t v26 = v13;
    unint64_t v27 = v14;
    unint64_t v28 = v16;
    SharingCircleWildAdvertisementKey.init(key:)(&v43);
    sub_100037A38(v39, v5);
    sub_100037A38(v41, v6);
    sub_100037A38(v40, v7);
    sub_100037A38(v42, v8);
    sub_100037A38(v25, v9);
    sub_100037A38(v22, v10);
    sub_100037A38(v24, v23);
    sub_100037A38(v29, v26);
    sub_100037A38(v30, v27);
    sub_100037A38(v31, v28);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000361E0(v34, v36);
    sub_100037A38(a1, a2);
    swift_bridgeObjectRetain();
    sub_100037A38(v33, v35);
  }
  sub_10001D608((uint64_t)&v43, (uint64_t)v76, &qword_10163C688);
  return sub_10001D608((uint64_t)v76, a3, &qword_10163C688);
}

uint64_t sub_100F84008@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v7 = v6;
  uint64_t v115 = a1;
  unint64_t v116 = a4;
  uint64_t v12 = sub_10000588C((uint64_t *)&unk_10166BFA0);
  __chkstk_darwin(v12 - 8);
  unint64_t v14 = &v82[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = sub_10000588C(&qword_10163CB78);
  __chkstk_darwin(v15 - 8);
  unint64_t v17 = &v82[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  unint64_t v18 = v7[6];
  if (v18 >> 60 == 15) {
    goto LABEL_13;
  }
  unint64_t v19 = *(void *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_baaSignatureS2 + 8);
  if (v19 >> 60 == 15) {
    goto LABEL_13;
  }
  unint64_t v20 = *(void *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_systemPublicKey + 8);
  if (v20 >> 60 == 15) {
    goto LABEL_13;
  }
  unint64_t v21 = *(void *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_refPublicKey + 8);
  if (v21 >> 60 == 15) {
    goto LABEL_13;
  }
  unint64_t v22 = *(void *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryEcid + 8);
  if (v22 >> 60 == 15) {
    goto LABEL_13;
  }
  unint64_t v23 = *(void *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryChipId + 8);
  if (v23 >> 60 == 15) {
    goto LABEL_13;
  }
  if (*((unsigned char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryPartId + 1)) {
    goto LABEL_13;
  }
  unint64_t v24 = *(void *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber + 8);
  if (v24 >> 60 == 15) {
    goto LABEL_13;
  }
  unint64_t v25 = *(void *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_seedK1 + 8);
  if (v25 >> 60 == 15) {
    goto LABEL_13;
  }
  unint64_t v26 = *(void *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_scrtAttestation + 8);
  if (v26 >> 60 == 15) {
    goto LABEL_13;
  }
  unint64_t v94 = a2;
  uint64_t v110 = v7[5];
  uint64_t v103 = *(void *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_baaSignatureS2);
  uint64_t v108 = *(void *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_systemPublicKey);
  unint64_t v109 = v23;
  uint64_t v27 = *(void *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_refPublicKey);
  unint64_t v106 = v25;
  uint64_t v107 = v27;
  uint64_t v104 = *(void *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryEcid);
  unint64_t v105 = v26;
  uint64_t v28 = *(void *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryChipId);
  LODWORD(v93) = *((unsigned __int8 *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryPartId);
  uint64_t v29 = *(void *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber);
  uint64_t v101 = *(void *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_seedK1);
  uint64_t v102 = v28;
  uint64_t v100 = *(void *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_scrtAttestation);
  v161[0] = v29;
  v161[1] = v24;
  unint64_t v112 = v21;
  unint64_t v113 = v20;
  unint64_t v111 = v22;
  unint64_t v114 = v24;
  sub_100037A38(v29, v24);
  uint64_t v99 = v29;
  sub_100037A38(v29, v114);
  sub_100037A38(v110, v18);
  sub_100037A38(v103, v19);
  sub_100037A38(v108, v113);
  sub_100037A38(v107, v112);
  sub_100037A38(v104, v111);
  sub_100037A38(v102, v109);
  sub_100037A38(v101, v106);
  sub_100037A38(v100, v105);
  sub_1000362FC();
  if ((DataProtocol.isNull.getter() & 1) == 0)
  {
    uint64_t v37 = v99;
    uint64_t v95 = Data.trimmed.getter();
    unint64_t v96 = v38;
    sub_100037A24(v37, v114);
    if (qword_101637320 != -1) {
      swift_once();
    }
    uint64_t v39 = type metadata accessor for Logger();
    uint64_t v92 = sub_100010324(v39, (uint64_t)qword_10170F098);
    uint64_t v98 = a3;
    unint64_t v40 = v116;
    sub_100037A38(a3, v116);
    sub_100037A38(v98, v40);
    uint64_t v41 = Logger.logObject.getter();
    LODWORD(v90) = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v41, (os_log_type_t)v90))
    {
      uint64_t v91 = v41;
      uint64_t v42 = (uint8_t *)swift_slowAlloc();
      uint64_t v89 = swift_slowAlloc();
      v161[0] = v89;
      uint64_t v97 = v42;
      *(_DWORD *)uint64_t v42 = 136446210;
      if (v116 >> 60 == 15)
      {
        uint64_t v43 = 0;
        unint64_t v44 = 0xE000000000000000;
      }
      else
      {
        uint64_t v43 = Data.hexString.getter();
      }
      unint64_t v87 = v44;
      unint64_t v88 = v97 + 4;
      *(void *)&long long v118 = sub_1008FA0F0(v43, v44, v161);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      unint64_t v45 = v116;
      sub_100037A24(v98, v116);
      sub_100037A24(v98, v45);
      _os_log_impl((void *)&_mh_execute_header, v91, (os_log_type_t)v90, "Pairing token: %{public}s", v97, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100037A24(v98, v116);
      sub_100037A24(v98, v116);
    }
    uint64_t v97 = (uint8_t *)sub_100F85CC8(a5);
    swift_bridgeObjectRetain_n();
    uint64_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.default.getter();
    LODWORD(v91) = v47;
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v92 = swift_slowAlloc();
      uint64_t v89 = swift_slowAlloc();
      v161[0] = v89;
      *(_DWORD *)uint64_t v92 = 141558275;
      *(void *)&long long v118 = 1752392040;
      unint64_t v88 = (uint8_t *)&v118 + 8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v48 = v92;
      *(_WORD *)(v92 + 12) = 2081;
      unint64_t v87 = v48 + 14;
      uint64_t v86 = type metadata accessor for MultipartAccessoryPairingInfo(0);
      unint64_t v85 = sub_100061B8C();
      unint64_t v90 = v46;
      swift_bridgeObjectRetain();
      uint64_t v86 = Dictionary.description.getter();
      unint64_t v50 = v49;
      swift_bridgeObjectRelease();
      *(void *)&long long v118 = sub_1008FA0F0(v86, v50, v161);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v90, (os_log_type_t)v91, "otherSerialNumbersAndPartIds: %{private,mask.hash}s", (uint8_t *)v92, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v91 = OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_otherSerialNumbersAndPartIds;
    *(void *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_otherSerialNumbersAndPartIds) = v97;
    swift_bridgeObjectRelease();
    if (*(void *)(a5 + 16))
    {
      uint64_t v51 = v95;
      sub_1000361E0(v95, v96);
      uint64_t v52 = (uint8_t *)sub_1007241A0(v51, v96);
      if (v53)
      {
        uint64_t v97 = *(uint8_t **)(a5 + 56);
        uint64_t v92 = (uint64_t)v52;
        uint64_t v54 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
        unint64_t v90 = *(NSObject **)(v54 - 8);
        sub_100F87940((uint64_t)&v97[(uint64_t)v90[9].isa * v92], (uint64_t)v17);
        ((void (*)(unsigned char *, void, uint64_t, uint64_t))v90[7].isa)(v17, 0, 1, v54);
      }
      else
      {
        uint64_t v54 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
        (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56))(v17, 1, 1, v54);
      }
      sub_10001CFB8(v95, v96);
      type metadata accessor for OwnedBeaconGroup.PairingState(0);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v54 - 8) + 48))(v17, 1, v54) != 1)
      {
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v79 = sub_10000588C(&qword_101643D80);
          uint64_t v80 = (uint64_t)&v17[*(int *)(v79 + 48)];
          sub_100037A24(*(void *)&v17[*(int *)(v79 + 64)], *(void *)&v17[*(int *)(v79 + 64) + 8]);
          sub_10001DAB4(v80, (uint64_t *)&unk_1016477E0);
          uint64_t v81 = type metadata accessor for UUID();
          (*(void (**)(unsigned char *, uint64_t))(*(void *)(v81 - 8) + 8))(v17, v81);
          int v83 = 1;
          goto LABEL_38;
        }
        sub_100F878E4((uint64_t)v17);
LABEL_37:
        int v83 = 0;
LABEL_38:
        uint64_t v56 = *(uint8_t **)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_ecid + 8);
        uint64_t v86 = *(void *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_ecid);
        uint64_t v92 = (uint64_t)v56;
        unint64_t v57 = *(uint8_t **)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_chipId + 8);
        uint64_t v89 = *(void *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_chipId);
        uint64_t v97 = v57;
        uint64_t v58 = *(uint8_t **)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_serialNumber + 8);
        unint64_t v87 = *(void *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_serialNumber);
        unint64_t v90 = *(NSObject **)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_numBeacons);
        uint64_t v59 = *(void *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_otherSerialNumbers);
        uint64_t v60 = *(NSObject **)((char *)&v91->isa + (void)v7);
        LOBYTE(v161[0]) = v93;
        unint64_t v85 = sub_10006145C();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        unint64_t v88 = v58;
        swift_bridgeObjectRetain();
        uint64_t v93 = v59;
        swift_bridgeObjectRetain();
        uint64_t v91 = v60;
        swift_bridgeObjectRetain();
        uint64_t v61 = FixedWidthInteger.data.getter();
        uint64_t v84 = v62;
        unint64_t v85 = v61;
        sub_10001CFB8(v95, v96);
        uint64_t v63 = v7[2];
        unint64_t v64 = v7[3];
        uint64_t v65 = (uint64_t)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_productInfo;
        swift_beginAccess();
        sub_10001D074(v65, (uint64_t)v14, (uint64_t *)&unk_10166BFA0);
        uint64_t v66 = type metadata accessor for AccessoryProductInfo();
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v66 - 8) + 48))(v14, 1, v66))
        {
          uint64_t v95 = 0xF000000000000000;
          unint64_t v96 = 0;
        }
        else
        {
          unint64_t v67 = (uint64_t *)&v14[*(int *)(v66 + 96)];
          uint64_t v68 = *v67;
          uint64_t v95 = v67[1];
          unint64_t v96 = v68;
          sub_100037A38(v68, v95);
        }
        uint64_t v69 = a3;
        sub_1000361E0(v63, v64);
        sub_10001DAB4((uint64_t)v14, (uint64_t *)&unk_10166BFA0);
        uint64_t v119 = v103;
        unint64_t v120 = v19;
        char v123 = v83;
        uint64_t v124 = v86;
        uint64_t v125 = v92;
        uint64_t v70 = v7[11];
        uint64_t v71 = v7[12];
        uint64_t v126 = v89;
        uint64_t v127 = v97;
        uint64_t v72 = v7[13];
        unint64_t v73 = v7[14];
        char v117 = 0;
        uint64_t v74 = v115;
        unint64_t v75 = v64;
        unint64_t v76 = v94;
        *(void *)&long long v118 = v115;
        *((void *)&v118 + 1) = v94;
        uint64_t v77 = v63;
        unint64_t v78 = v116;
        uint64_t v121 = v69;
        unint64_t v122 = v116;
        unint64_t v128 = v87;
        unint64_t v129 = v88;
        uint64_t v130 = v104;
        unint64_t v131 = v111;
        uint64_t v132 = v102;
        unint64_t v133 = v109;
        uint64_t v134 = v99;
        unint64_t v135 = v114;
        uint64_t v136 = v90;
        char v137 = 0;
        uint64_t v138 = v93;
        unint64_t v139 = v91;
        uint64_t v140 = 0;
        uint64_t v141 = v101;
        unint64_t v142 = v106;
        uint64_t v143 = v100;
        unint64_t v144 = v105;
        unint64_t v145 = v85;
        uint64_t v146 = v84;
        uint64_t v147 = v77;
        unint64_t v148 = v75;
        uint64_t v149 = v110;
        unint64_t v150 = v18;
        unint64_t v151 = v96;
        uint64_t v152 = v95;
        uint64_t v153 = v70;
        uint64_t v154 = v71;
        uint64_t v155 = v72;
        unint64_t v156 = v73;
        uint64_t v157 = v108;
        unint64_t v158 = v113;
        uint64_t v159 = v107;
        unint64_t v160 = v112;
        SharingCircleWildAdvertisementKey.init(key:)(&v118);
        sub_100037A38(v69, v78);
        swift_bridgeObjectRetain();
        sub_100037A38(v72, v73);
        sub_1000361E0(v74, v76);
        goto LABEL_18;
      }
    }
    else
    {
      uint64_t v55 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v55 - 8) + 56))(v17, 1, 1, v55);
    }
    sub_10001DAB4((uint64_t)v17, &qword_10163CB78);
    goto LABEL_37;
  }
  uint64_t v30 = v99;
  unint64_t v31 = v114;
  sub_100037A24(v99, v114);
  sub_100037A24(v100, v105);
  sub_100037A24(v101, v106);
  sub_100037A24(v30, v31);
  sub_100037A24(v102, v109);
  sub_100037A24(v104, v111);
  sub_100037A24(v107, v112);
  sub_100037A24(v108, v113);
  sub_100037A24(v103, v19);
  sub_100037A24(v110, v18);
LABEL_13:
  if (qword_101637320 != -1) {
    swift_once();
  }
  uint64_t v32 = type metadata accessor for Logger();
  sub_100010324(v32, (uint64_t)qword_10170F098);
  uint64_t v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v33, v34))
  {
    unint64_t v35 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v35 = 0;
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "Missing info to generate AirPodsLEPairingCheckData!", v35, 2u);
    swift_slowDealloc();
  }

  sub_100F87A38(&v118);
LABEL_18:
  sub_10001D608((uint64_t)&v118, (uint64_t)v161, &qword_10163C680);
  return sub_10001D608((uint64_t)v161, a6, &qword_10163C680);
}

uint64_t sub_100F84D60@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5 = *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_payloadSignatureS4 + 8);
  if (v5 >> 60 == 15
    || (unint64_t v6 = *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryEcid + 8),
        v6 >> 60 == 15)
    || (unint64_t v7 = *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_acrtCerts + 8), v7 >> 60 == 15)
    || (unint64_t v8 = *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryChipId + 8),
        v8 >> 60 == 15)
    || (unint64_t v9 = *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber + 8),
        v9 >> 60 == 15)
    || (unint64_t v10 = *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_status + 8), v10 >> 60 == 15))
  {
    static os_log_type_t.error.getter();
    if (qword_101637308 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_100F87A0C(&v32);
  }
  else
  {
    uint64_t v14 = *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_payloadSignatureS4);
    uint64_t v19 = *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_acrtCerts);
    uint64_t v20 = *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryEcid);
    uint64_t v23 = *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber);
    uint64_t v21 = *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryChipId);
    uint64_t v22 = *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_status);
    uint64_t v31 = *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_ecid + 8);
    uint64_t v15 = *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_chipId);
    uint64_t v24 = *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_chipId + 8);
    uint64_t v16 = *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_serialNumber);
    uint64_t v26 = v3[2];
    uint64_t v27 = *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_serialNumber + 8);
    unint64_t v25 = v3[3];
    uint64_t v17 = v3[11];
    uint64_t v30 = v3[13];
    uint64_t v28 = v3[12];
    unint64_t v29 = v3[14];
    *(void *)&long long v32 = *(void *)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_ecid);
    *((void *)&v32 + 1) = v31;
    uint64_t v33 = v15;
    uint64_t v34 = v24;
    uint64_t v35 = v16;
    uint64_t v36 = v27;
    uint64_t v37 = v20;
    unint64_t v38 = v6;
    uint64_t v39 = v21;
    unint64_t v40 = v8;
    uint64_t v41 = v23;
    unint64_t v42 = v9;
    uint64_t v43 = v19;
    unint64_t v44 = v7;
    uint64_t v45 = v26;
    unint64_t v46 = v25;
    uint64_t v47 = v14;
    unint64_t v48 = v5;
    uint64_t v18 = v14;
    uint64_t v49 = v22;
    unint64_t v50 = v10;
    uint64_t v51 = a1;
    unint64_t v52 = a2;
    uint64_t v53 = v17;
    uint64_t v54 = v28;
    uint64_t v55 = v30;
    unint64_t v56 = v29;
    SharingCircleWildAdvertisementKey.init(key:)(&v32);
    sub_100037A38(v18, v5);
    sub_100037A38(v20, v6);
    sub_100037A38(v19, v7);
    sub_100037A38(v21, v8);
    sub_100037A38(v23, v9);
    sub_100037A38(v22, v10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000361E0(v26, v25);
    sub_100037A38(a1, a2);
    swift_bridgeObjectRetain();
    sub_100037A38(v30, v29);
  }
  sub_10001D608((uint64_t)&v32, (uint64_t)v57, &qword_10165FEC0);
  return sub_10001D608((uint64_t)v57, a3, &qword_10165FEC0);
}

uint64_t sub_100F85054@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v7 = v6;
  unint64_t v104 = a4;
  uint64_t v105 = a3;
  uint64_t v12 = sub_10000588C((uint64_t *)&unk_10166BFA0);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = &v76[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = sub_10000588C(&qword_10163CB78);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = &v76[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  unint64_t v18 = v7[6];
  if (v18 >> 60 == 15) {
    goto LABEL_11;
  }
  unint64_t v19 = *(void *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_payloadSignatureS1 + 8);
  if (v19 >> 60 == 15) {
    goto LABEL_11;
  }
  unint64_t v20 = *(void *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryEcid + 8);
  if (v20 >> 60 == 15) {
    goto LABEL_11;
  }
  unint64_t v21 = *(void *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryChipId + 8);
  if (v21 >> 60 == 15) {
    goto LABEL_11;
  }
  unint64_t v22 = *(void *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber + 8);
  if (v22 >> 60 == 15) {
    goto LABEL_11;
  }
  if (*((unsigned char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryPartId + 1)) {
    goto LABEL_11;
  }
  unint64_t v23 = *(void *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_seedK1 + 8);
  if (v23 >> 60 == 15) {
    goto LABEL_11;
  }
  unint64_t v24 = *(void *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_acrtCerts + 8);
  if (v24 >> 60 == 15) {
    goto LABEL_11;
  }
  unint64_t v87 = a2;
  uint64_t v100 = v7[5];
  unint64_t v101 = v21;
  uint64_t v95 = *(void *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_payloadSignatureS1);
  uint64_t v96 = *(void *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryEcid);
  unint64_t v97 = v24;
  uint64_t v25 = *(void *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryChipId);
  uint64_t v26 = *(void *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber);
  LODWORD(v86) = *((unsigned __int8 *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryPartId);
  uint64_t v93 = *(void *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_seedK1);
  uint64_t v94 = v25;
  uint64_t v92 = *(void *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_acrtCerts);
  unint64_t v102 = v20;
  uint64_t v103 = v26;
  v146[0] = v26;
  v146[1] = v22;
  unint64_t v27 = v22;
  unint64_t v98 = v23;
  sub_100037A38(v26, v22);
  unint64_t v99 = v27;
  sub_100037A38(v103, v27);
  sub_100037A38(v100, v18);
  sub_100037A38(v95, v19);
  sub_100037A38(v96, v102);
  sub_100037A38(v94, v101);
  sub_100037A38(v93, v98);
  sub_100037A38(v92, v97);
  sub_1000362FC();
  if ((DataProtocol.isNull.getter() & 1) == 0)
  {
    uint64_t v31 = v103;
    uint64_t v89 = Data.trimmed.getter();
    unint64_t v90 = v32;
    sub_100037A24(v31, v99);
    if (qword_101637310 != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    uint64_t v88 = sub_100010324(v33, (uint64_t)qword_10170F068);
    unint64_t v34 = v104;
    sub_100037A38(v105, v104);
    sub_100037A38(v105, v34);
    uint64_t v35 = Logger.logObject.getter();
    LODWORD(v84) = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v35, (os_log_type_t)v84))
    {
      unint64_t v85 = v35;
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      uint64_t v83 = swift_slowAlloc();
      v146[0] = v83;
      uint64_t v91 = v36;
      *(_DWORD *)uint64_t v36 = 136446210;
      if (v104 >> 60 == 15)
      {
        uint64_t v37 = 0;
        unint64_t v38 = 0xE000000000000000;
      }
      else
      {
        uint64_t v37 = Data.hexString.getter();
      }
      unint64_t v81 = v38;
      uint64_t v82 = v91 + 4;
      *(void *)&long long v107 = sub_1008FA0F0(v37, v38, v146);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      unint64_t v39 = v104;
      sub_100037A24(v105, v104);
      sub_100037A24(v105, v39);
      _os_log_impl((void *)&_mh_execute_header, v85, (os_log_type_t)v84, "Pairing token: %{public}s", v91, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100037A24(v105, v104);
      sub_100037A24(v105, v104);
    }
    uint64_t v91 = (uint8_t *)sub_100F85CC8(a5);
    swift_bridgeObjectRetain_n();
    unint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.default.getter();
    LODWORD(v85) = v41;
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v88 = swift_slowAlloc();
      uint64_t v83 = swift_slowAlloc();
      v146[0] = v83;
      *(_DWORD *)uint64_t v88 = 141558275;
      *(void *)&long long v107 = 1752392040;
      uint64_t v82 = (uint8_t *)&v107 + 8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v42 = v88;
      *(_WORD *)(v88 + 12) = 2081;
      unint64_t v81 = v42 + 14;
      uint64_t v80 = type metadata accessor for MultipartAccessoryPairingInfo(0);
      unint64_t v79 = sub_100061B8C();
      uint64_t v84 = v40;
      swift_bridgeObjectRetain();
      uint64_t v80 = Dictionary.description.getter();
      unint64_t v44 = v43;
      swift_bridgeObjectRelease();
      *(void *)&long long v107 = sub_1008FA0F0(v80, v44, v146);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v84, (os_log_type_t)v85, "otherSerialNumbersAndPartIds: %{private,mask.hash}s", (uint8_t *)v88, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    unint64_t v85 = OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_otherSerialNumbersAndPartIds;
    *(void *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_otherSerialNumbersAndPartIds) = v91;
    swift_bridgeObjectRelease();
    if (*(void *)(a5 + 16))
    {
      uint64_t v45 = v89;
      sub_1000361E0(v89, v90);
      unint64_t v46 = (uint8_t *)sub_1007241A0(v45, v90);
      if (v47)
      {
        uint64_t v91 = *(uint8_t **)(a5 + 56);
        uint64_t v88 = (uint64_t)v46;
        uint64_t v48 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
        uint64_t v84 = *(NSObject **)(v48 - 8);
        sub_100F87940((uint64_t)&v91[(uint64_t)v84[9].isa * v88], (uint64_t)v17);
        ((void (*)(unsigned char *, void, uint64_t, uint64_t))v84[7].isa)(v17, 0, 1, v48);
      }
      else
      {
        uint64_t v48 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
        (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56))(v17, 1, 1, v48);
      }
      sub_10001CFB8(v89, v90);
      type metadata accessor for OwnedBeaconGroup.PairingState(0);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v48 - 8) + 48))(v17, 1, v48) != 1)
      {
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        char v52 = v86;
        if (EnumCaseMultiPayload == 1)
        {
          uint64_t v53 = sub_10000588C(&qword_101643D80);
          uint64_t v54 = (uint64_t)&v17[*(int *)(v53 + 48)];
          sub_100037A24(*(void *)&v17[*(int *)(v53 + 64)], *(void *)&v17[*(int *)(v53 + 64) + 8]);
          sub_10001DAB4(v54, (uint64_t *)&unk_1016477E0);
          uint64_t v55 = type metadata accessor for UUID();
          (*(void (**)(unsigned char *, uint64_t))(*(void *)(v55 - 8) + 8))(v17, v55);
          int v77 = 1;
        }
        else
        {
          sub_100F878E4((uint64_t)v17);
          int v77 = 0;
        }
        char v50 = v52;
        goto LABEL_37;
      }
    }
    else
    {
      uint64_t v49 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
      (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56))(v17, 1, 1, v49);
    }
    sub_10001DAB4((uint64_t)v17, &qword_10163CB78);
    int v77 = 0;
    char v50 = v86;
LABEL_37:
    unint64_t v56 = *(uint8_t **)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_ecid + 8);
    uint64_t v86 = *(void *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_ecid);
    uint64_t v91 = v56;
    unint64_t v57 = *(uint8_t **)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_chipId + 8);
    uint64_t v82 = *(uint8_t **)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_chipId);
    uint64_t v88 = (uint64_t)v57;
    unint64_t v58 = *(void *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_serialNumber + 8);
    uint64_t v80 = *(void *)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_serialNumber);
    uint64_t v84 = *(NSObject **)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_numBeacons);
    uint64_t v59 = *(NSObject **)((char *)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_otherSerialNumbers);
    uint64_t v60 = *(uint64_t *)((char *)&v85->isa + (void)v7);
    LOBYTE(v146[0]) = v50;
    unint64_t v79 = sub_10006145C();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v81 = v58;
    swift_bridgeObjectRetain();
    unint64_t v85 = v59;
    swift_bridgeObjectRetain();
    uint64_t v83 = v60;
    swift_bridgeObjectRetain();
    uint64_t v61 = FixedWidthInteger.data.getter();
    uint64_t v78 = v62;
    unint64_t v79 = v61;
    sub_10001CFB8(v89, v90);
    uint64_t v64 = v7[2];
    unint64_t v63 = v7[3];
    uint64_t v65 = (uint64_t)v7 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_productInfo;
    swift_beginAccess();
    sub_10001D074(v65, (uint64_t)v14, (uint64_t *)&unk_10166BFA0);
    uint64_t v66 = type metadata accessor for AccessoryProductInfo();
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v66 - 8) + 48))(v14, 1, v66))
    {
      unint64_t v90 = 0;
      unint64_t v67 = 0xF000000000000000;
    }
    else
    {
      uint64_t v68 = (unint64_t *)&v14[*(int *)(v66 + 96)];
      unint64_t v67 = v68[1];
      unint64_t v90 = *v68;
      sub_100037A38(v90, v67);
    }
    sub_1000361E0(v64, v63);
    sub_10001DAB4((uint64_t)v14, (uint64_t *)&unk_10166BFA0);
    uint64_t v108 = v95;
    unint64_t v109 = v19;
    char v112 = v77;
    uint64_t v113 = v86;
    unint64_t v114 = v91;
    uint64_t v115 = v82;
    uint64_t v116 = v88;
    uint64_t v117 = v80;
    unint64_t v118 = v81;
    uint64_t v119 = v96;
    unint64_t v120 = v102;
    uint64_t v121 = v94;
    unint64_t v122 = v101;
    uint64_t v123 = v103;
    unint64_t v124 = v99;
    char v106 = 0;
    uint64_t v125 = v84;
    char v126 = 0;
    uint64_t v127 = v85;
    uint64_t v128 = v83;
    uint64_t v130 = v93;
    unint64_t v131 = v98;
    uint64_t v132 = v92;
    unint64_t v133 = v97;
    unint64_t v134 = v79;
    uint64_t v135 = v78;
    uint64_t v136 = v64;
    unint64_t v137 = v63;
    uint64_t v138 = v100;
    unint64_t v139 = v18;
    unint64_t v140 = v90;
    uint64_t v69 = v7[11];
    uint64_t v70 = v7[12];
    unint64_t v141 = v67;
    uint64_t v129 = 0;
    uint64_t v142 = v69;
    uint64_t v71 = v7[13];
    unint64_t v72 = v7[14];
    unint64_t v73 = v87;
    *(void *)&long long v107 = a1;
    *((void *)&v107 + 1) = v87;
    unint64_t v74 = v104;
    uint64_t v75 = v105;
    uint64_t v110 = v105;
    unint64_t v111 = v104;
    uint64_t v143 = v70;
    uint64_t v144 = v71;
    unint64_t v145 = v72;
    SharingCircleWildAdvertisementKey.init(key:)(&v107);
    sub_100037A38(v75, v74);
    swift_bridgeObjectRetain();
    sub_100037A38(v71, v72);
    sub_1000361E0(a1, v73);
    goto LABEL_14;
  }
  uint64_t v28 = v103;
  unint64_t v29 = v99;
  sub_100037A24(v103, v99);
  sub_100037A24(v92, v97);
  sub_100037A24(v93, v98);
  sub_100037A24(v28, v29);
  sub_100037A24(v94, v101);
  sub_100037A24(v96, v102);
  sub_100037A24(v95, v19);
  sub_100037A24(v100, v18);
LABEL_11:
  static os_log_type_t.error.getter();
  if (qword_101637308 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  sub_100F878B4(&v107);
LABEL_14:
  sub_10001D608((uint64_t)&v107, (uint64_t)v146, &qword_10165FEB0);
  return sub_10001D608((uint64_t)v146, a6, &qword_10165FEB0);
}

uint64_t sub_100F85C88()
{
  uint64_t result = Data.init(base64Encoded:options:)();
  qword_1016657F8 = result;
  qword_101665800 = v1;
  return result;
}

uint64_t sub_100F85CC8(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v3 - 8);
  v196 = (char *)&v172 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v193 = type metadata accessor for MultipartAccessoryPairingInfo(0);
  uint64_t v191 = *(void *)(v193 - 8);
  uint64_t v5 = __chkstk_darwin(v193);
  uint64_t v189 = (uint64_t)&v172 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  v181 = (char *)&v172 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v188 = (uint64_t)&v172 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  v180 = (char *)&v172 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v187 = (uint64_t)&v172 - v14;
  __chkstk_darwin(v13);
  v179 = (char *)&v172 - v15;
  uint64_t v16 = sub_10000588C((uint64_t *)&unk_1016477E0);
  uint64_t v202 = *(void *)(v16 - 8);
  uint64_t v17 = __chkstk_darwin(v16 - 8);
  uint64_t v178 = (uint64_t)&v172 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v186 = (uint64_t)&v172 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v177 = (uint64_t)&v172 - v22;
  __chkstk_darwin(v21);
  uint64_t v185 = (uint64_t)&v172 - v23;
  uint64_t v24 = sub_10000588C(&qword_10163CB78);
  __chkstk_darwin(v24 - 8);
  uint64_t v26 = (char *)&v172 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v207 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  uint64_t v27 = *(void *)(v207 - 8);
  uint64_t v28 = __chkstk_darwin(v207);
  uint64_t v199 = (uint64_t)&v172 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v28);
  uint64_t v198 = (uint64_t)&v172 - v30;
  uint64_t v31 = sub_10000588C(&qword_10165FEE0);
  uint64_t v32 = __chkstk_darwin(v31 - 8);
  unint64_t v34 = (uint64_t *)((char *)&v172 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v32);
  uint64_t v36 = (uint64_t *)((char *)&v172 - v35);
  uint64_t v37 = *(void *)(v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber);
  unint64_t v38 = *(void *)(v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber + 8);
  uint64_t v39 = *(void *)(v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_otherSerialNumbersAndMACAddresses);
  v213 = &_swiftEmptyDictionarySingleton;
  uint64_t v40 = *(void *)(v39 + 64);
  uint64_t v190 = v39 + 64;
  uint64_t v41 = 1 << *(unsigned char *)(v39 + 32);
  uint64_t v42 = -1;
  if (v41 < 64) {
    uint64_t v42 = ~(-1 << v41);
  }
  unint64_t v209 = v42 & v40;
  uint64_t v184 = v37;
  unint64_t v182 = v38;
  sub_100037A38(v37, v38);
  unint64_t v43 = (unint64_t)(v41 + 63) >> 6;
  v206 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56);
  uint64_t v192 = v27;
  v200 = (unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
  unint64_t v173 = v43 - 1;
  swift_bridgeObjectRetain();
  unint64_t v44 = 0;
  int64_t v197 = v43;
  unint64_t v174 = v43 - 5;
  uint64_t v203 = v39;
  uint64_t v175 = v39 + 104;
  *(void *)&long long v45 = 141558275;
  long long v195 = v45;
  v194 = (char *)&type metadata for Any + 8;
  *(void *)&long long v45 = 141558787;
  long long v176 = v45;
  v201 = v26;
  v204 = v36;
  v205 = v34;
  while (1)
  {
    if (v209)
    {
      unint64_t v52 = __clz(__rbit64(v209));
      unint64_t v208 = v44;
      v209 &= v209 - 1;
      unint64_t v53 = v52 | (v44 << 6);
LABEL_10:
      uint64_t v54 = *(void *)(v203 + 56);
      uint64_t v55 = (uint64_t *)(*(void *)(v203 + 48) + 16 * v53);
      uint64_t v56 = *v55;
      unint64_t v57 = v55[1];
      *unint64_t v34 = *v55;
      v34[1] = v57;
      uint64_t v58 = v54 + *(void *)(v202 + 72) * v53;
      uint64_t v59 = sub_10000588C(&qword_10165FEE8);
      sub_10001D074(v58, (uint64_t)v34 + *(int *)(v59 + 48), (uint64_t *)&unk_1016477E0);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v59 - 8) + 56))(v34, 0, 1, v59);
      sub_1000361E0(v56, v57);
      goto LABEL_17;
    }
    int64_t v60 = v44 + 1;
    if (__OFADD__(v44, 1))
    {
      __break(1u);
LABEL_105:
      __break(1u);
LABEL_106:
      __break(1u);
LABEL_107:
      __break(1u);
LABEL_108:
      __break(1u);
LABEL_109:
      __break(1u);
LABEL_110:
      __break(1u);
      goto LABEL_111;
    }
    if (v60 >= v197)
    {
      unint64_t v62 = v44;
    }
    else
    {
      unint64_t v61 = *(void *)(v190 + 8 * v60);
      if (v61) {
        goto LABEL_14;
      }
      unint64_t v62 = v44 + 1;
      if ((uint64_t)(v44 + 2) < v197)
      {
        unint64_t v61 = *(void *)(v190 + 8 * (v44 + 2));
        if (v61)
        {
          int64_t v60 = v44 + 2;
LABEL_14:
          unint64_t v208 = v60;
          unint64_t v209 = (v61 - 1) & v61;
          unint64_t v53 = __clz(__rbit64(v61)) + (v60 << 6);
          goto LABEL_10;
        }
        unint64_t v62 = v44 + 2;
        if ((uint64_t)(v44 + 3) < v197)
        {
          unint64_t v61 = *(void *)(v190 + 8 * (v44 + 3));
          if (v61)
          {
            int64_t v60 = v44 + 3;
            goto LABEL_14;
          }
          int64_t v60 = v44 + 4;
          unint64_t v62 = v44 + 3;
          if ((uint64_t)(v44 + 4) < v197)
          {
            unint64_t v61 = *(void *)(v190 + 8 * v60);
            if (v61) {
              goto LABEL_14;
            }
            while (v174 != v44)
            {
              unint64_t v61 = *(void *)(v175 + 8 * v44++);
              if (v61)
              {
                int64_t v60 = v44 + 4;
                goto LABEL_14;
              }
            }
            unint64_t v62 = v173;
          }
        }
      }
    }
    uint64_t v63 = sub_10000588C(&qword_10165FEE8);
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v63 - 8) + 56))(v34, 1, 1, v63);
    unint64_t v208 = v62;
    unint64_t v209 = 0;
LABEL_17:
    sub_10001D608((uint64_t)v34, (uint64_t)v36, &qword_10165FEE0);
    uint64_t v64 = sub_10000588C(&qword_10165FEE8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v64 - 8) + 48))(v36, 1, v64) == 1) {
      break;
    }
    uint64_t v65 = *v36;
    unint64_t v66 = v36[1];
    uint64_t v67 = *(int *)(v64 + 48);
    if (*(void *)(a1 + 16))
    {
      sub_1000361E0(v65, v66);
      uint64_t v68 = sub_1007241A0(v65, v66);
      if (v69)
      {
        sub_100F87940(*(void *)(a1 + 56) + *(void *)(v192 + 72) * v68, (uint64_t)v26);
        uint64_t v70 = 0;
      }
      else
      {
        uint64_t v70 = 1;
      }
      uint64_t v71 = v207;
      (*v206)(v26, v70, 1, v207);
      sub_10001CFB8(v65, v66);
      if ((*v200)(v26, 1, v71) != 1)
      {
        uint64_t v75 = (uint64_t)v26;
        uint64_t v76 = v198;
        sub_100F879A4(v75, v198, type metadata accessor for OwnedBeaconGroup.PairingState);
        sub_100F87940(v76, v199);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        if (!EnumCaseMultiPayload)
        {
          uint64_t v101 = sub_10000588C((uint64_t *)&unk_101647810);
          unint64_t v102 = (char *)(v199 + *(int *)(v101 + 48));
          char v103 = *v102;
          int v104 = v102[1];
          int v105 = v102[2];
          uint64_t v106 = v185;
          sub_10001D608(v199, v185, (uint64_t *)&unk_1016477E0);
          if (v104) {
            char v103 = -1;
          }
          uint64_t v107 = v177;
          sub_10001D074(v106, v177, (uint64_t *)&unk_1016477E0);
          if (v105 == 3) {
            char v108 = 0;
          }
          else {
            char v108 = v105;
          }
          uint64_t v109 = (uint64_t)v179;
          char *v179 = v103;
          *(unsigned char *)(v109 + 1) = 0;
          uint64_t v110 = v193;
          sub_10001D608(v107, v109 + *(int *)(v193 + 24), (uint64_t *)&unk_1016477E0);
          *(unsigned char *)(v109 + *(int *)(v110 + 28)) = v108;
          sub_100F879A4(v109, v187, type metadata accessor for MultipartAccessoryPairingInfo);
          sub_1000361E0(v65, v66);
          uint64_t v111 = (uint64_t)v213;
          int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v212 = (void *)v111;
          unint64_t v114 = sub_1007241A0(v65, v66);
          uint64_t v115 = *(void *)(v111 + 16);
          BOOL v116 = (v113 & 1) == 0;
          uint64_t v117 = v115 + v116;
          if (__OFADD__(v115, v116)) {
            goto LABEL_107;
          }
          char v118 = v113;
          if (*(void *)(v111 + 24) >= v117)
          {
            uint64_t v26 = v201;
            if (isUniquelyReferenced_nonNull_native)
            {
              uint64_t v121 = v212;
              if ((v113 & 1) == 0) {
                goto LABEL_91;
              }
            }
            else
            {
              sub_100E7E760();
              uint64_t v121 = v212;
              if ((v118 & 1) == 0) {
                goto LABEL_91;
              }
            }
          }
          else
          {
            sub_100E65958(v117, isUniquelyReferenced_nonNull_native);
            uint64_t v119 = sub_1007241A0(v65, v66);
            uint64_t v26 = v201;
            if ((v118 & 1) != (v120 & 1)) {
              goto LABEL_112;
            }
            unint64_t v114 = v119;
            uint64_t v121 = v212;
            if ((v118 & 1) == 0)
            {
LABEL_91:
              v121[(v114 >> 6) + 8] |= 1 << v114;
              unint64_t v156 = (uint64_t *)(v121[6] + 16 * v114);
              *unint64_t v156 = v65;
              v156[1] = v66;
              sub_100F879A4(v187, v121[7] + *(void *)(v191 + 72) * v114, type metadata accessor for MultipartAccessoryPairingInfo);
              uint64_t v157 = v121[2];
              BOOL v153 = __OFADD__(v157, 1);
              uint64_t v158 = v157 + 1;
              if (v153) {
                goto LABEL_110;
              }
              v121[2] = v158;
              sub_1000361E0(v65, v66);
              goto LABEL_93;
            }
          }
          sub_10084EED4(v187, v121[7] + *(void *)(v191 + 72) * v114);
LABEL_93:
          v213 = v121;
          swift_bridgeObjectRelease();
          sub_10001CFB8(v65, v66);
          sub_10001CFB8(v65, v66);
          sub_10001DAB4(v185, (uint64_t *)&unk_1016477E0);
          sub_100F878E4(v198);
          goto LABEL_94;
        }
        if (EnumCaseMultiPayload == 1)
        {
          uint64_t v78 = (int *)sub_10000588C(&qword_101643D80);
          uint64_t v79 = v199;
          uint64_t v80 = v199 + v78[12];
          sub_100037A24(*(void *)(v199 + v78[16]), *(void *)(v199 + v78[16] + 8));
          unint64_t v81 = (char *)(v79 + v78[24]);
          char v82 = *v81;
          int v83 = v81[1];
          int v84 = v81[2];
          uint64_t v85 = v186;
          sub_10001D608(v80, v186, (uint64_t *)&unk_1016477E0);
          if (v83) {
            char v82 = -1;
          }
          uint64_t v86 = v178;
          sub_10001D074(v85, v178, (uint64_t *)&unk_1016477E0);
          if (v84 == 3) {
            char v87 = 0;
          }
          else {
            char v87 = v84;
          }
          uint64_t v88 = (uint64_t)v180;
          char *v180 = v82;
          *(unsigned char *)(v88 + 1) = 1;
          uint64_t v89 = v193;
          sub_10001D608(v86, v88 + *(int *)(v193 + 24), (uint64_t *)&unk_1016477E0);
          *(unsigned char *)(v88 + *(int *)(v89 + 28)) = v87;
          sub_100F879A4(v88, v188, type metadata accessor for MultipartAccessoryPairingInfo);
          sub_1000361E0(v65, v66);
          uint64_t v90 = (uint64_t)v213;
          int v91 = swift_isUniquelyReferenced_nonNull_native();
          v212 = (void *)v90;
          unint64_t v93 = sub_1007241A0(v65, v66);
          uint64_t v94 = *(void *)(v90 + 16);
          BOOL v95 = (v92 & 1) == 0;
          uint64_t v96 = v94 + v95;
          if (__OFADD__(v94, v95)) {
            goto LABEL_105;
          }
          char v97 = v92;
          if (*(void *)(v90 + 24) >= v96)
          {
            uint64_t v26 = v201;
            if (v91)
            {
              uint64_t v100 = v212;
              if ((v92 & 1) == 0) {
                goto LABEL_87;
              }
            }
            else
            {
              sub_100E7E760();
              uint64_t v100 = v212;
              if ((v97 & 1) == 0) {
                goto LABEL_87;
              }
            }
          }
          else
          {
            sub_100E65958(v96, v91);
            uint64_t v98 = sub_1007241A0(v65, v66);
            uint64_t v26 = v201;
            if ((v97 & 1) != (v99 & 1)) {
              goto LABEL_112;
            }
            unint64_t v93 = v98;
            uint64_t v100 = v212;
            if ((v97 & 1) == 0)
            {
LABEL_87:
              v100[(v93 >> 6) + 8] |= 1 << v93;
              unint64_t v151 = (uint64_t *)(v100[6] + 16 * v93);
              *unint64_t v151 = v65;
              v151[1] = v66;
              sub_100F879A4(v188, v100[7] + *(void *)(v191 + 72) * v93, type metadata accessor for MultipartAccessoryPairingInfo);
              uint64_t v152 = v100[2];
              BOOL v153 = __OFADD__(v152, 1);
              uint64_t v154 = v152 + 1;
              if (v153) {
                goto LABEL_109;
              }
              v100[2] = v154;
              sub_1000361E0(v65, v66);
              goto LABEL_89;
            }
          }
          sub_10084EED4(v188, v100[7] + *(void *)(v191 + 72) * v93);
LABEL_89:
          v213 = v100;
          swift_bridgeObjectRelease();
          sub_10001CFB8(v65, v66);
          sub_10001CFB8(v65, v66);
          sub_10001DAB4(v186, (uint64_t *)&unk_1016477E0);
          sub_100F878E4(v198);
          uint64_t v155 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v155 - 8) + 8))(v199, v155);
          goto LABEL_94;
        }
        uint64_t v183 = v67;
        if (qword_101637310 != -1) {
          swift_once();
        }
        uint64_t v122 = type metadata accessor for Logger();
        sub_100010324(v122, (uint64_t)qword_10170F068);
        uint64_t v123 = v184;
        unint64_t v124 = v182;
        sub_100037A38(v184, v182);
        sub_1000361E0(v65, v66);
        sub_100037A38(v123, v124);
        sub_1000361E0(v65, v66);
        uint64_t v125 = Logger.logObject.getter();
        os_log_type_t v126 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v125, v126))
        {
          uint64_t v127 = swift_slowAlloc();
          v212 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v127 = v176;
          *(void *)(v127 + 4) = 1752392040;
          *(_WORD *)(v127 + 12) = 2081;
          if (v124 >> 60 == 15)
          {
            uint64_t v128 = 0;
            unint64_t v129 = 0xE000000000000000;
            uint64_t v130 = v184;
          }
          else
          {
            uint64_t v130 = v184;
            uint64_t v128 = Data.hexString.getter();
            unint64_t v129 = v131;
          }
          *(void *)(v127 + 14) = sub_1008FA0F0(v128, v129, (uint64_t *)&v212);
          swift_bridgeObjectRelease();
          sub_100037A24(v130, v124);
          sub_100037A24(v130, v124);
          *(_WORD *)(v127 + 22) = 2160;
          *(void *)(v127 + 24) = 1752392040;
          *(_WORD *)(v127 + 32) = 2081;
          sub_1000361E0(v65, v66);
          static String.Encoding.utf8.getter();
          uint64_t v132 = String.init(data:encoding:)();
          if (!v133) {
            uint64_t v132 = Data.hexString.getter();
          }
          uint64_t v134 = v132;
          unint64_t v135 = v133;
          sub_10001CFB8(v65, v66);
          *(void *)(v127 + 34) = sub_1008FA0F0(v134, v135, (uint64_t *)&v212);
          swift_bridgeObjectRelease();
          sub_10001CFB8(v65, v66);
          sub_10001CFB8(v65, v66);
          _os_log_impl((void *)&_mh_execute_header, v125, v126, "Why are we pairing %{private,mask.hash}s, when %{private,mask.hash}s is pairing locked to another iCloud account?", (uint8_t *)v127, 0x2Au);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_100037A24(v123, v124);
          sub_100037A24(v123, v124);
          sub_10001CFB8(v65, v66);
          sub_10001CFB8(v65, v66);
        }
        uint64_t v136 = v193;
        unint64_t v137 = v181;
        uint64_t v138 = &v181[*(int *)(v193 + 24)];
        uint64_t v139 = type metadata accessor for MACAddress();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v139 - 8) + 56))(v138, 1, 1, v139);
        *unint64_t v137 = 767;
        *((unsigned char *)v137 + *(int *)(v136 + 28)) = 0;
        sub_100F879A4((uint64_t)v137, v189, type metadata accessor for MultipartAccessoryPairingInfo);
        sub_1000361E0(v65, v66);
        uint64_t v140 = (uint64_t)v213;
        int v141 = swift_isUniquelyReferenced_nonNull_native();
        v212 = (void *)v140;
        unint64_t v143 = sub_1007241A0(v65, v66);
        uint64_t v144 = *(void *)(v140 + 16);
        BOOL v145 = (v142 & 1) == 0;
        uint64_t v146 = v144 + v145;
        if (__OFADD__(v144, v145)) {
          goto LABEL_106;
        }
        char v147 = v142;
        if (*(void *)(v140 + 24) >= v146)
        {
          uint64_t v26 = v201;
          if (v141)
          {
            unint64_t v150 = v212;
            if ((v142 & 1) == 0) {
              goto LABEL_96;
            }
          }
          else
          {
            sub_100E7E760();
            unint64_t v150 = v212;
            if ((v147 & 1) == 0) {
              goto LABEL_96;
            }
          }
        }
        else
        {
          sub_100E65958(v146, v141);
          uint64_t v148 = sub_1007241A0(v65, v66);
          uint64_t v26 = v201;
          if ((v147 & 1) != (v149 & 1))
          {
LABEL_112:
            uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            return result;
          }
          unint64_t v143 = v148;
          unint64_t v150 = v212;
          if ((v147 & 1) == 0)
          {
LABEL_96:
            v150[(v143 >> 6) + 8] |= 1 << v143;
            uint64_t v159 = (uint64_t *)(v150[6] + 16 * v143);
            *uint64_t v159 = v65;
            v159[1] = v66;
            sub_100F879A4(v189, v150[7] + *(void *)(v191 + 72) * v143, type metadata accessor for MultipartAccessoryPairingInfo);
            uint64_t v160 = v150[2];
            BOOL v153 = __OFADD__(v160, 1);
            uint64_t v161 = v160 + 1;
            if (v153) {
              goto LABEL_108;
            }
            v150[2] = v161;
            sub_1000361E0(v65, v66);
            goto LABEL_98;
          }
        }
        sub_10084EED4(v189, v150[7] + *(void *)(v191 + 72) * v143);
LABEL_98:
        v213 = v150;
        swift_bridgeObjectRelease();
        sub_10001CFB8(v65, v66);
        sub_10001CFB8(v65, v66);
        sub_100F878E4(v198);
        unint64_t v34 = v205;
        uint64_t v67 = v183;
        goto LABEL_7;
      }
    }
    else
    {
      (*v206)(v26, 1, 1, v207);
    }
    sub_10001DAB4((uint64_t)v26, &qword_10163CB78);
    if (qword_101637310 != -1) {
      swift_once();
    }
    uint64_t v72 = type metadata accessor for Logger();
    sub_100010324(v72, (uint64_t)qword_10170F068);
    sub_1000361E0(v65, v66);
    sub_1000361E0(v65, v66);
    unint64_t v73 = Logger.logObject.getter();
    os_log_type_t v74 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v73, v74))
    {
      sub_10001CFB8(v65, v66);
      sub_10001CFB8(v65, v66);
      sub_10001CFB8(v65, v66);

LABEL_94:
      unint64_t v34 = v205;
      goto LABEL_7;
    }
    uint64_t v46 = swift_slowAlloc();
    v212 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v46 = v195;
    *(void *)(v46 + 4) = 1752392040;
    *(_WORD *)(v46 + 12) = 2081;
    sub_1000361E0(v65, v66);
    static String.Encoding.utf8.getter();
    uint64_t v47 = String.init(data:encoding:)();
    if (!v48) {
      uint64_t v47 = Data.hexString.getter();
    }
    uint64_t v49 = v47;
    unint64_t v50 = v48;
    sub_10001CFB8(v65, v66);
    *(void *)(v46 + 14) = sub_1008FA0F0(v49, v50, (uint64_t *)&v212);
    swift_bridgeObjectRelease();
    sub_10001CFB8(v65, v66);
    sub_10001CFB8(v65, v66);
    _os_log_impl((void *)&_mh_execute_header, v73, v74, "%{private,mask.hash}s is missing from beaconMap!", (uint8_t *)v46, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    sub_10001CFB8(v65, v66);
    uint64_t v26 = v201;
    unint64_t v34 = v205;
LABEL_7:
    uint64_t v51 = (uint64_t)v204 + v67;
    uint64_t v36 = v204;
    sub_10001DAB4(v51, (uint64_t *)&unk_1016477E0);
    unint64_t v44 = v208;
  }
  swift_release();
  if (qword_101637310 == -1) {
    goto LABEL_100;
  }
LABEL_111:
  swift_once();
LABEL_100:
  uint64_t v162 = type metadata accessor for Logger();
  sub_100010324(v162, (uint64_t)qword_10170F068);
  v163 = Logger.logObject.getter();
  os_log_type_t v164 = static os_log_type_t.default.getter();
  BOOL v165 = os_log_type_enabled(v163, v164);
  uint64_t v166 = v184;
  if (v165)
  {
    uint64_t v167 = swift_slowAlloc();
    v212 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v167 = v195;
    uint64_t v211 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v167 + 12) = 2081;
    swift_beginAccess();
    sub_100061B8C();
    swift_bridgeObjectRetain();
    uint64_t v168 = Dictionary.description.getter();
    unint64_t v170 = v169;
    swift_bridgeObjectRelease();
    uint64_t v210 = sub_1008FA0F0(v168, v170, (uint64_t *)&v212);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v163, v164, "otherAccessoryPairingInfo: %{private,mask.hash}s", (uint8_t *)v167, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    sub_100037A24(v166, v182);
  }
  else
  {
    sub_100037A24(v184, v182);
  }
  swift_beginAccess();
  return (uint64_t)v213;
}

uint64_t sub_100F87378()
{
  id v0 = [self defaultStore];
  if (v0)
  {
    uint64_t v1 = v0;
    id v2 = [v0 aa_primaryAppleAccount];
    if (v2)
    {
      uint64_t v3 = v2;
      if (qword_101637310 != -1) {
        swift_once();
      }
      uint64_t v4 = type metadata accessor for Logger();
      sub_100010324(v4, (uint64_t)qword_10170F068);
      id v5 = v3;
      uint64_t v6 = Logger.logObject.getter();
      os_log_type_t v7 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v6, v7))
      {
        uint64_t v8 = (uint8_t *)swift_slowAlloc();
        uint64_t v22 = swift_slowAlloc();
        *(_DWORD *)uint64_t v8 = 136315138;
        id v9 = [v5 aa_altDSID];
        if (v9)
        {
          uint64_t v10 = v9;
          uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v13 = v12;
        }
        else
        {
          uint64_t v11 = 0;
          unint64_t v13 = 0xE000000000000000;
        }
        sub_1008FA0F0(v11, v13, &v22);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v6, v7, "Alt_DSID: %s", v8, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
      }
      id v18 = [v5 aa_altDSID];
      if (v18)
      {
        uint64_t v19 = v18;
        static String._unconditionallyBridgeFromObjectiveC(_:)();
      }
      else
      {
      }
    }
    else
    {
      if (qword_101637310 != -1) {
        swift_once();
      }
      uint64_t v14 = type metadata accessor for Logger();
      sub_100010324(v14, (uint64_t)qword_10170F068);
      uint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v15, v16))
      {
        uint64_t v17 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v17 = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, v16, "Failed to obtain Alt_DSID from account. Using device serial number instead to support account signed out.", v17, 2u);
        swift_slowDealloc();
      }

      sub_100F2C724();
    }
    uint64_t v20 = sub_10043A77C();

    return v20;
  }
  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

double sub_100F878B4(_OWORD *a1)
{
  double result = 0.0;
  a1[18] = 0u;
  a1[19] = 0u;
  a1[16] = 0u;
  a1[17] = 0u;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t sub_100F878E4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100F87940(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100F879A4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

double sub_100F87A0C(_OWORD *a1)
{
  double result = 0.0;
  *a1 = xmmword_1013520A0;
  a1[1] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[12] = 0u;
  return result;
}

double sub_100F87A38(_OWORD *a1)
{
  double result = 0.0;
  a1[20] = 0u;
  a1[21] = 0u;
  a1[18] = 0u;
  a1[19] = 0u;
  a1[16] = 0u;
  a1[17] = 0u;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

double sub_100F87A6C(_OWORD *a1)
{
  double result = 0.0;
  *a1 = xmmword_1013520A0;
  a1[1] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[14] = 0u;
  a1[15] = 0u;
  a1[16] = 0u;
  return result;
}

double sub_100F87AA0(_OWORD *a1)
{
  double result = 0.0;
  *a1 = xmmword_1013520A0;
  a1[1] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  return result;
}

double sub_100F87ACC(_OWORD *a1)
{
  double result = 0.0;
  a1[19] = 0u;
  a1[20] = 0u;
  a1[17] = 0u;
  a1[18] = 0u;
  a1[15] = 0u;
  a1[16] = 0u;
  a1[13] = 0u;
  a1[14] = 0u;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

id sub_100F87B00@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v4 - 8);
  int v91 = (char *)&v80 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v92 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  id v9 = (char *)&v80 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v90 = (char *)&v80 - v10;
  uint64_t v11 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v11 - 8);
  unint64_t v13 = (char *)&v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  unint64_t v93 = (char *)&v80 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for MessagingMessageContext();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v80 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((sub_100F899F8(a1) & 1) == 0) {
    goto LABEL_24;
  }
  uint64_t v85 = v6;
  id v21 = [a1 toID];
  uint64_t v86 = v14;
  uint64_t v87 = v15;
  if (v21)
  {
    uint64_t v22 = v21;
    uint64_t v88 = v17;
    uint64_t v89 = a2;
    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else
  {
    uint64_t v23 = IDSCopyLocalDeviceUniqueID();
    if (!v23)
    {
      if (qword_1016373D8 != -1) {
        swift_once();
      }
      uint64_t v57 = type metadata accessor for Logger();
      sub_100010324(v57, (uint64_t)qword_10170F168);
      long long v45 = Logger.logObject.getter();
      os_log_type_t v46 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v45, v46)) {
        goto LABEL_23;
      }
      unint64_t v48 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v48 = 0;
      uint64_t v49 = "Ignoring IDSCopyLocalDeviceUniqueID() failed to return a value!";
      goto LABEL_22;
    }
    uint64_t v24 = (void *)v23;
    uint64_t v88 = v17;
    uint64_t v89 = a2;
    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v27 = v26;

    uint64_t v94 = 0x3A656369766564;
    unint64_t v95 = 0xE700000000000000;
    v28._countAndFlagsBits = v25;
    v28._object = v27;
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
  }
  id result = [a1 fromID];
  if (!result)
  {
    __break(1u);
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  uint64_t v30 = result;
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v31 = _s12searchpartyd20MessagingDestinationV20stringRepresentationACSgSS_tcfC_0();
  if (!v33
    || (uint64_t v34 = v31,
        uint64_t v35 = v32,
        uint64_t v36 = v33,
        uint64_t v37 = _s12searchpartyd20MessagingDestinationV20stringRepresentationACSgSS_tcfC_0(),
        !v39))
  {
    swift_bridgeObjectRelease();

    uint64_t v50 = 1;
    uint64_t v17 = v88;
    a2 = v89;
    return (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56))(a2, v50, 1, v17);
  }
  uint64_t v40 = v39;
  uint64_t v81 = v38;
  uint64_t v82 = v37;
  uint64_t v83 = v35;
  uint64_t v84 = v34;
  id result = [a1 outgoingResponseIdentifier];
  if (!result) {
    goto LABEL_38;
  }
  uint64_t v41 = result;
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  uint64_t v42 = v86;
  uint64_t v43 = v87;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v87 + 48))(v13, 1, v86) == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001DAB4((uint64_t)v13, &qword_101638CF0);
    if (qword_1016373D8 != -1) {
      swift_once();
    }
    uint64_t v44 = type metadata accessor for Logger();
    sub_100010324(v44, (uint64_t)qword_10170F168);
    long long v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.error.getter();
    BOOL v47 = os_log_type_enabled(v45, v46);
    uint64_t v17 = v88;
    a2 = v89;
    if (!v47) {
      goto LABEL_23;
    }
    unint64_t v48 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v48 = 0;
    uint64_t v49 = "could not convert outgoingResponseIdentifier to UUID!";
LABEL_22:
    _os_log_impl((void *)&_mh_execute_header, v45, v46, v49, v48, 2u);
    swift_slowDealloc();
LABEL_23:

LABEL_24:
    uint64_t v50 = 1;
    return (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56))(a2, v50, 1, v17);
  }
  (*(void (**)(char *, char *, uint64_t))(v43 + 32))(v93, v13, v42);
  uint64_t v51 = (int *)v88;
  unint64_t v52 = &v20[*(int *)(v88 + 24)];
  *unint64_t v52 = v84;
  *((void *)v52 + 1) = v83;
  *((void *)v52 + 2) = v36;
  unint64_t v53 = v51;
  uint64_t v54 = &v20[v51[7]];
  *uint64_t v54 = v82;
  *((void *)v54 + 1) = v81;
  *((void *)v54 + 2) = v40;
  id v55 = [a1 incomingResponseIdentifier];
  if (v55)
  {
    uint64_t v56 = v55;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    UUID.init(uuidString:)();
    uint64_t v43 = v87;
    swift_bridgeObjectRelease();
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v43 + 56))(v20, 1, 1, v42);
  }
  a2 = v89;
  uint64_t v17 = (uint64_t)v53;
  (*(void (**)(char *, char *, uint64_t))(v43 + 16))(&v20[v53[5]], v93, v42);
  id result = [a1 serviceIdentifier];
  if (result)
  {
    uint64_t v58 = result;
    uint64_t v59 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v61 = v60;

    unint64_t v62 = (uint64_t *)&v20[v53[8]];
    *unint64_t v62 = v59;
    v62[1] = v61;
    v20[v53[9]] = [a1 expectsPeerResponse];
    v20[v53[10]] = [a1 fromServerStorage];
    id v63 = [a1 serverReceivedTime];
    if (v63)
    {
      uint64_t v64 = v63;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v66 = (uint64_t)v91;
      uint64_t v65 = v92;
      uint64_t v67 = *(void (**)(char *, char *, uint64_t))(v92 + 32);
      uint64_t v68 = v9;
      uint64_t v69 = v85;
      v67(v91, v68, v85);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v65 + 56))(v66, 0, 1, v69);
      uint64_t v70 = v69;
      uint64_t v71 = v65;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v65 + 48))(v66, 1, v70) != 1)
      {
        uint64_t v72 = v90;
        v67(v90, (char *)v66, v85);
LABEL_33:
        uint64_t v73 = v87;
        v67(&v20[v53[11]], v72, v85);
        id v74 = [a1 senderCorrelationIdentifier];
        if (v74)
        {
          uint64_t v75 = v74;
          uint64_t v76 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v78 = v77;
        }
        else
        {

          uint64_t v76 = 0;
          unint64_t v78 = 0xE000000000000000;
        }
        (*(void (**)(char *, uint64_t))(v73 + 8))(v93, v86);
        uint64_t v79 = (uint64_t *)&v20[v53[12]];
        *uint64_t v79 = v76;
        v79[1] = v78;
        sub_10042681C((uint64_t)v20, a2);
        uint64_t v50 = 0;
        return (id)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56))(a2, v50, 1, v17);
      }
    }
    else
    {
      uint64_t v66 = (uint64_t)v91;
      uint64_t v71 = v92;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v92 + 56))(v91, 1, 1, v85);
    }
    uint64_t v72 = v90;
    static Date.distantPast.getter();
    sub_10001DAB4(v66, (uint64_t *)&unk_10163AC90);
    uint64_t v67 = *(void (**)(char *, char *, uint64_t))(v71 + 32);
    goto LABEL_33;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t MessagingMessageContext.incomingResponseIdentifier.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1003C5E38(v1, a1);
}

uint64_t MessagingMessageContext.outgoingResponseIdentifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for MessagingMessageContext() + 20);
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t type metadata accessor for MessagingMessageContext()
{
  uint64_t result = qword_101665868;
  if (!qword_101665868) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t MessagingMessageContext.fromID.getter()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for MessagingMessageContext() + 24));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MessagingMessageContext.toID.getter()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for MessagingMessageContext() + 28));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MessagingMessageContext.serviceIdentifier.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for MessagingMessageContext() + 32));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MessagingMessageContext.expectsPeerResponse.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for MessagingMessageContext() + 36));
}

uint64_t MessagingMessageContext.fromServerStorage.getter()
{
  return *(unsigned __int8 *)(v0 + *(int *)(type metadata accessor for MessagingMessageContext() + 40));
}

uint64_t MessagingMessageContext.serverReceivedTime.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + *(int *)(type metadata accessor for MessagingMessageContext() + 44);
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t MessagingMessageContext.senderCorrelationIdentifier.getter()
{
  uint64_t v1 = *(void *)(v0 + *(int *)(type metadata accessor for MessagingMessageContext() + 48));
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MessagingMessageContext.description.getter()
{
  _StringGuts.grow(_:)(33);
  swift_bridgeObjectRelease();
  uint64_t v1 = (int *)type metadata accessor for MessagingMessageContext();
  sub_100F887EC();
  v2._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 0x3A44496D6F726620;
  v3._object = (void *)0xE800000000000000;
  String.append(_:)(v3);
  uint64_t v4 = v0 + v1[6];
  uint64_t v5 = *(void *)(v4 + 8);
  uint64_t v6 = *(void **)(v4 + 16);
  swift_bridgeObjectRetain();
  v7._countAndFlagsBits = v5;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0x3A44496F7420;
  v8._object = (void *)0xE600000000000000;
  String.append(_:)(v8);
  uint64_t v9 = v0 + v1[7];
  uint64_t v10 = *(void *)(v9 + 8);
  uint64_t v11 = *(void **)(v9 + 16);
  swift_bridgeObjectRetain();
  v12._countAndFlagsBits = v10;
  v12._object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 0x6563697672657320;
  v13._object = (void *)0xE90000000000003ALL;
  String.append(_:)(v13);
  uint64_t v14 = (uint64_t *)(v0 + v1[8]);
  uint64_t v15 = *v14;
  uint64_t v16 = (void *)v14[1];
  swift_bridgeObjectRetain();
  v17._countAndFlagsBits = v15;
  v17._object = v16;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 62;
  v18._object = (void *)0xE100000000000000;
  String.append(_:)(v18);
  return 60;
}

unint64_t sub_100F887EC()
{
  unint64_t result = qword_101665808;
  if (!qword_101665808)
  {
    type metadata accessor for MessagingMessageContext();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101665808);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for MessagingMessageContext(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = sub_10000588C(&qword_101638CF0);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))((char *)a1 + a3[5], (char *)a2 + a3[5], v7);
    }
    else
    {
      uint64_t v11 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16);
      v11(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
      v11((uint64_t *)((char *)a1 + a3[5]), (uint64_t *)((char *)a2 + a3[5]), v7);
    }
    uint64_t v12 = a3[6];
    uint64_t v13 = a3[7];
    uint64_t v14 = (char *)a1 + v12;
    uint64_t v15 = (char *)a2 + v12;
    *uint64_t v14 = *v15;
    uint64_t v16 = *((void *)v15 + 2);
    *((void *)v14 + 1) = *((void *)v15 + 1);
    *((void *)v14 + 2) = v16;
    Swift::String v17 = (char *)a1 + v13;
    Swift::String v18 = (char *)a2 + v13;
    char *v17 = *v18;
    uint64_t v19 = *((void *)v18 + 2);
    *((void *)v17 + 1) = *((void *)v18 + 1);
    *((void *)v17 + 2) = v19;
    uint64_t v20 = a3[8];
    uint64_t v21 = a3[9];
    uint64_t v22 = (uint64_t *)((char *)a1 + v20);
    uint64_t v23 = (uint64_t *)((char *)a2 + v20);
    uint64_t v24 = v23[1];
    *uint64_t v22 = *v23;
    v22[1] = v24;
    *((unsigned char *)a1 + v21) = *((unsigned char *)a2 + v21);
    uint64_t v25 = a3[11];
    *((unsigned char *)a1 + a3[10]) = *((unsigned char *)a2 + a3[10]);
    uint64_t v34 = (char *)a1 + v25;
    uint64_t v26 = (char *)a2 + v25;
    uint64_t v27 = type metadata accessor for Date();
    Swift::String v28 = *(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v28(v34, v26, v27);
    uint64_t v29 = a3[12];
    uint64_t v30 = (uint64_t *)((char *)a1 + v29);
    uint64_t v31 = (uint64_t *)((char *)a2 + v29);
    uint64_t v32 = v31[1];
    void *v30 = *v31;
    v30[1] = v32;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for MessagingMessageContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  int v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  if (!v6) {
    v7(a1, v4);
  }
  v7(a1 + *(int *)(a2 + 20), v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = a1 + *(int *)(a2 + 44);
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);

  return swift_bridgeObjectRelease();
}

char *initializeWithCopy for MessagingMessageContext(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = sub_10000588C(&qword_101638CF0);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(&a1[a3[5]], &a2[a3[5]], v6);
  }
  else
  {
    uint64_t v9 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    v9(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    v9(&a1[a3[5]], &a2[a3[5]], v6);
  }
  uint64_t v10 = a3[6];
  uint64_t v11 = a3[7];
  uint64_t v12 = &a1[v10];
  uint64_t v13 = &a2[v10];
  *uint64_t v12 = *v13;
  uint64_t v14 = *((void *)v13 + 2);
  *((void *)v12 + 1) = *((void *)v13 + 1);
  *((void *)v12 + 2) = v14;
  uint64_t v15 = &a1[v11];
  uint64_t v16 = &a2[v11];
  char *v15 = *v16;
  uint64_t v17 = *((void *)v16 + 2);
  *((void *)v15 + 1) = *((void *)v16 + 1);
  *((void *)v15 + 2) = v17;
  uint64_t v18 = a3[8];
  uint64_t v19 = a3[9];
  uint64_t v20 = &a1[v18];
  uint64_t v21 = &a2[v18];
  uint64_t v22 = *((void *)v21 + 1);
  *(void *)uint64_t v20 = *(void *)v21;
  *((void *)v20 + 1) = v22;
  a1[v19] = a2[v19];
  uint64_t v23 = a3[11];
  a1[a3[10]] = a2[a3[10]];
  uint64_t v32 = &a1[v23];
  uint64_t v24 = &a2[v23];
  uint64_t v25 = type metadata accessor for Date();
  uint64_t v26 = *(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v26(v32, v24, v25);
  uint64_t v27 = a3[12];
  Swift::String v28 = &a1[v27];
  uint64_t v29 = &a2[v27];
  uint64_t v30 = *((void *)v29 + 1);
  *(void *)Swift::String v28 = *(void *)v29;
  *((void *)v28 + 1) = v30;
  swift_bridgeObjectRetain();
  return a1;
}

char *assignWithCopy for MessagingMessageContext(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    uint64_t v11 = sub_10000588C(&qword_101638CF0);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(&a1[a3[5]], &a2[a3[5]], v6);
  uint64_t v12 = a3[6];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  *uint64_t v13 = *v14;
  *((void *)v13 + 1) = *((void *)v14 + 1);
  *((void *)v13 + 2) = *((void *)v14 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v15 = a3[7];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  *uint64_t v16 = *v17;
  *((void *)v16 + 1) = *((void *)v17 + 1);
  *((void *)v16 + 2) = *((void *)v17 + 2);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v18 = a3[8];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  *(void *)uint64_t v19 = *(void *)v20;
  *((void *)v19 + 1) = *((void *)v20 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[a3[9]] = a2[a3[9]];
  a1[a3[10]] = a2[a3[10]];
  uint64_t v21 = a3[11];
  uint64_t v22 = &a1[v21];
  uint64_t v23 = &a2[v21];
  uint64_t v24 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 24))(v22, v23, v24);
  uint64_t v25 = a3[12];
  uint64_t v26 = &a1[v25];
  uint64_t v27 = &a2[v25];
  *(void *)uint64_t v26 = *(void *)v27;
  *((void *)v26 + 1) = *((void *)v27 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *initializeWithTake for MessagingMessageContext(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = sub_10000588C(&qword_101638CF0);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(&a1[a3[5]], &a2[a3[5]], v6);
  }
  else
  {
    int v9 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
    v9(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    v9(&a1[a3[5]], &a2[a3[5]], v6);
  }
  uint64_t v10 = a3[6];
  uint64_t v11 = a3[7];
  uint64_t v12 = &a1[v10];
  uint64_t v13 = &a2[v10];
  *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  *((void *)v12 + 2) = *((void *)v13 + 2);
  uint64_t v14 = &a1[v11];
  uint64_t v15 = &a2[v11];
  *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
  *((void *)v14 + 2) = *((void *)v15 + 2);
  uint64_t v16 = a3[9];
  *(_OWORD *)&a1[a3[8]] = *(_OWORD *)&a2[a3[8]];
  a1[v16] = a2[v16];
  uint64_t v17 = a3[11];
  a1[a3[10]] = a2[a3[10]];
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  uint64_t v20 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 32))(v18, v19, v20);
  *(_OWORD *)&a1[a3[12]] = *(_OWORD *)&a2[a3[12]];
  return a1;
}

char *assignWithTake for MessagingMessageContext(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    uint64_t v11 = sub_10000588C(&qword_101638CF0);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(&a1[a3[5]], &a2[a3[5]], v6);
  uint64_t v12 = a3[6];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  *uint64_t v13 = *v14;
  uint64_t v16 = *((void *)v14 + 1);
  uint64_t v15 = *((void *)v14 + 2);
  *((void *)v13 + 1) = v16;
  *((void *)v13 + 2) = v15;
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[7];
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  *uint64_t v18 = *v19;
  uint64_t v21 = *((void *)v19 + 1);
  uint64_t v20 = *((void *)v19 + 2);
  *((void *)v18 + 1) = v21;
  *((void *)v18 + 2) = v20;
  swift_bridgeObjectRelease();
  uint64_t v22 = a3[8];
  uint64_t v23 = &a1[v22];
  uint64_t v24 = &a2[v22];
  uint64_t v26 = *(void *)v24;
  uint64_t v25 = *((void *)v24 + 1);
  *(void *)uint64_t v23 = v26;
  *((void *)v23 + 1) = v25;
  swift_bridgeObjectRelease();
  uint64_t v27 = a3[10];
  a1[a3[9]] = a2[a3[9]];
  a1[v27] = a2[v27];
  uint64_t v28 = a3[11];
  uint64_t v29 = &a1[v28];
  uint64_t v30 = &a2[v28];
  uint64_t v31 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 40))(v29, v30, v31);
  uint64_t v32 = a3[12];
  uint64_t v33 = &a1[v32];
  uint64_t v34 = &a2[v32];
  uint64_t v36 = *(void *)v34;
  uint64_t v35 = *((void *)v34 + 1);
  *(void *)uint64_t v33 = v36;
  *((void *)v33 + 1) = v35;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for MessagingMessageContext(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100F895B0);
}

uint64_t sub_100F895B0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_10000588C(&qword_101638CF0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + a3[5];
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v14 = *(void *)(a1 + a3[6] + 16);
    if (v14 >= 0xFFFFFFFF) {
      LODWORD(v14) = -1;
    }
    return (v14 + 1);
  }
  else
  {
    uint64_t v15 = type metadata accessor for Date();
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
    uint64_t v17 = v15;
    uint64_t v18 = a1 + a3[11];
    return v16(v18, a2, v17);
  }
}

uint64_t storeEnumTagSinglePayload for MessagingMessageContext(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100F8974C);
}

uint64_t sub_100F8974C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = sub_10000588C(&qword_101638CF0);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_5:
    return v11(v12, a2, a2, v10);
  }
  uint64_t result = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v12 = a1 + a4[5];
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_5;
  }
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + a4[6] + 16) = (a2 - 1);
  }
  else
  {
    uint64_t v15 = type metadata accessor for Date();
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
    uint64_t v17 = v15;
    uint64_t v18 = a1 + a4[11];
    return v16(v18, a2, a2, v17);
  }
  return result;
}

void sub_100F898D4()
{
  sub_1003426B0();
  if (v0 <= 0x3F)
  {
    type metadata accessor for UUID();
    if (v1 <= 0x3F)
    {
      type metadata accessor for Date();
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t sub_100F899F8(void *a1)
{
  id v2 = [a1 fromID];
  if (v2)
  {
    Swift::String v3 = v2;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    v4._countAndFlagsBits = 0x3A656369766564;
    v4._object = (void *)0xE700000000000000;
    LOBYTE(v3) = String.hasPrefix(_:)(v4);
    swift_bridgeObjectRelease();
    if (v3) {
      return 1;
    }
    id v14 = [a1 senderCorrelationIdentifier];
    if (v14)
    {

      return 1;
    }
    if (qword_1016373D8 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_100010324(v15, (uint64_t)qword_10170F168);
    id v7 = a1;
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 138412290;
      id v17 = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v16 = v7;

      uint64_t v13 = "Ignoring IDSMessageContext without a correlationIdentifier: %@";
      goto LABEL_14;
    }
LABEL_15:

    return 0;
  }
  if (qword_1016373D8 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100010324(v6, (uint64_t)qword_10170F168);
  id v7 = a1;
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v8, v9)) {
    goto LABEL_15;
  }
  uint64_t v10 = (uint8_t *)swift_slowAlloc();
  uint64_t v11 = (void *)swift_slowAlloc();
  *(_DWORD *)uint64_t v10 = 138412290;
  id v12 = v7;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *uint64_t v11 = v7;

  uint64_t v13 = "Ignoring IDSMessageContext without a fromID: %@";
LABEL_14:
  _os_log_impl((void *)&_mh_execute_header, v8, v9, v13, v10, 0xCu);
  sub_10000588C((uint64_t *)&unk_101638EA0);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  return 0;
}

ValueMetadata *type metadata accessor for GetPrimaryKeyPayload()
{
  return &type metadata for GetPrimaryKeyPayload;
}

unint64_t sub_100F89D28(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100F09120();
  unint64_t result = sub_1005FD1F4();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_100F89D58(void *a1, uint64_t a2)
{
  uint64_t v32 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v5 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  id v7 = (char *)v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = type metadata accessor for UUID();
  __chkstk_darwin(v33);
  uint64_t v10 = (char *)v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(a2 + 16);
  if (!v11) {
    return (uint64_t)a1;
  }
  v29[1] = v2;
  uint64_t v30 = v8;
  uint64_t v12 = a2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  uint64_t v13 = *(void *)(v5 + 72);
  uint64_t v34 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v35 = v8 + 16;
  uint64_t v31 = (void (**)(char *, uint64_t))(v8 + 8);
  v29[0] = a2;
  swift_bridgeObjectRetain();
  uint64_t v14 = v33;
  while (1)
  {
    v34(v10, v12 + *(int *)(v32 + 20), v14);
    uint64_t v15 = (uint64_t)v7;
    sub_100FB6BB8(v12, (uint64_t)v7, type metadata accessor for SharedBeaconRecord);
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v36 = a1;
    unint64_t v18 = sub_1007240CC((uint64_t)v10);
    uint64_t v19 = a1[2];
    BOOL v20 = (v17 & 1) == 0;
    uint64_t v21 = v19 + v20;
    if (__OFADD__(v19, v20)) {
      break;
    }
    char v22 = v17;
    if (a1[3] >= v21)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        sub_100E87C44();
      }
    }
    else
    {
      sub_100E7893C(v21, isUniquelyReferenced_nonNull_native);
      unint64_t v23 = sub_1007240CC((uint64_t)v10);
      if ((v22 & 1) != (v24 & 1)) {
        goto LABEL_18;
      }
      unint64_t v18 = v23;
    }
    id v7 = (char *)v15;
    a1 = v36;
    if (v22)
    {
      sub_100FB6944(v15, v36[7] + v18 * v13);
      uint64_t v14 = v33;
    }
    else
    {
      v36[(v18 >> 6) + 8] |= 1 << v18;
      uint64_t v14 = v33;
      v34((char *)(a1[6] + *(void *)(v30 + 72) * v18), (uint64_t)v10, v33);
      sub_100FB6C70(v15, a1[7] + v18 * v13, type metadata accessor for SharedBeaconRecord);
      uint64_t v25 = a1[2];
      BOOL v26 = __OFADD__(v25, 1);
      uint64_t v27 = v25 + 1;
      if (v26) {
        goto LABEL_17;
      }
      a1[2] = v27;
      a1 = v36;
    }
    swift_bridgeObjectRelease();
    (*v31)(v10, v14);
    v12 += v13;
    if (!--v11)
    {
      swift_bridgeObjectRelease();
      return (uint64_t)a1;
    }
  }
  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

void *sub_100F8A0A0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v4 = __CocoaSet.count.getter();
    if ((v2 & 0xC000000000000001) != 0) {
      goto LABEL_3;
    }
LABEL_9:
    if (v4 > *(void *)(v2 + 16) >> 3) {
      goto LABEL_10;
    }
LABEL_13:
    sub_10089EF04(a1);
    return (void *)v2;
  }
  uint64_t v4 = *(void *)(a1 + 16);
  if ((a2 & 0xC000000000000001) == 0) {
    goto LABEL_9;
  }
LABEL_3:
  if (v2 < 0) {
    uint64_t v5 = v2;
  }
  else {
    uint64_t v5 = v2 & 0xFFFFFFFFFFFFFF8;
  }
  if (v4 <= __CocoaSet.count.getter() / 8) {
    goto LABEL_13;
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = __CocoaSet.count.getter();
  Swift::Int v7 = sub_101123B14(v5, v6);
  swift_bridgeObjectRelease();
  uint64_t v2 = v7;
LABEL_10:

  return sub_1008A3828(a1, v2);
}

uint64_t sub_100F8A1A8(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 56) = a2;
  *(void *)(v4 + 64) = v3;
  *(unsigned char *)(v4 + 152) = a3;
  *(void *)(v4 + 48) = a1;
  uint64_t v5 = type metadata accessor for OwnerSharingCircle();
  *(void *)(v4 + 72) = v5;
  *(void *)(v4 + 80) = *(void *)(v5 - 8);
  *(void *)(v4 + 88) = swift_task_alloc();
  return _swift_task_switch(sub_100F8A270, v3, 0);
}

uint64_t sub_100F8A270()
{
  if (*(unsigned __int8 *)(v0 + 152) - 1 >= 2)
  {
    if (*(unsigned char *)(v0 + 152))
    {
      if (qword_101636888 != -1) {
        swift_once();
      }
      uint64_t v5 = type metadata accessor for Logger();
      sub_100010324(v5, (uint64_t)qword_10170D788);
      uint64_t v6 = Logger.logObject.getter();
      os_log_type_t v7 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v6, v7))
      {
        uint64_t v8 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v8 = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, v7, "For delegates shares, we shouldn't reach share flow in ShareCreateUseCase.", v8, 2u);
        swift_slowDealloc();
      }

      type metadata accessor for SPBeaconSharingError(0);
      *(void *)(v0 + 24) = 8;
      sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
      sub_100FB6F70((unint64_t *)&qword_1016385F8, type metadata accessor for SPBeaconSharingError);
      _BridgedStoredNSError.init(_:userInfo:)();
      swift_willThrow();
      swift_task_dealloc();
      uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
      return v9();
    }
    else
    {
      uint64_t v4 = *(void *)(*(void *)(v0 + 64) + 160);
      *(void *)(v0 + 96) = v4;
      return _swift_task_switch(sub_100F8A4D0, v4, 0);
    }
  }
  else
  {
    uint64_t v1 = *(void *)(v0 + 56);
    swift_bridgeObjectRetain();
    swift_task_dealloc();
    uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v2(v1);
  }
}

uint64_t sub_100F8A4D0()
{
  *(void *)(v0 + 104) = *(void *)(*(void *)(v0 + 96) + 136);
  swift_retain();
  return _swift_task_switch(sub_100F8A544, 0, 0);
}

uint64_t sub_100F8A544()
{
  uint64_t v2 = v0[12];
  uint64_t v1 = v0[13];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[14] = v3;
  v3[2] = v1;
  v3[3] = sub_100075250;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[15] = v4;
  uint64_t v5 = sub_10000588C(&qword_10163B8C0);
  *uint64_t v4 = v0;
  v4[1] = sub_100F8A65C;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 4, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1000757B0, v3, v5);
}

uint64_t sub_100F8A65C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 64);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 128) = *(void *)(v1 + 32);
  return _swift_task_switch(sub_100F8A7CC, v2, 0);
}

uint64_t sub_100F8A7CC()
{
  uint64_t v1 = v0[16];
  uint64_t v2 = v0[6];
  uint64_t v3 = (void *)swift_task_alloc();
  v3[2] = v2;
  uint64_t v4 = sub_1000A3E84((uint64_t (*)(char *))sub_100FB6FC0, v3, v1);
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    uint64_t v7 = v0[9];
    uint64_t v6 = v0[10];
    uint64_t v8 = v4 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    uint64_t v9 = *(void *)(v6 + 72);
    swift_bridgeObjectRetain();
    do
    {
      uint64_t v10 = v0[11];
      sub_100FB6BB8(v8, v10, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      uint64_t v11 = *(void *)(v10 + *(int *)(v7 + 32));
      swift_bridgeObjectRetain();
      sub_100FB893C(v10, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      sub_100443B34(v11);
      v8 += v9;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v12 = sub_101158244((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
  v0[5] = v12;
  uint64_t v13 = (void *)swift_task_alloc();
  v0[17] = v13;
  uint64_t v14 = sub_10000588C((uint64_t *)&unk_101653DC0);
  unint64_t v15 = sub_100FB708C();
  uint64_t v16 = sub_100062734(&qword_101648010, (uint64_t *)&unk_101653DC0);
  *uint64_t v13 = v0;
  v13[1] = sub_100F8AA04;
  uint64_t v17 = v0[8];
  return Sequence.asyncCompactMap<A>(_:)(&unk_101665AB8, v17, v14, v15, v16);
}

uint64_t sub_100F8AA04(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 64);
  *(void *)(*(void *)v1 + 144) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100F8AB40, v2, 0);
}

uint64_t sub_100F8AB40()
{
  unint64_t v1 = v0[18];
  uint64_t v2 = v0[7];
  swift_bridgeObjectRetain();
  uint64_t v3 = sub_101158F8C(v1);
  swift_bridgeObjectRelease();
  uint64_t v4 = sub_100F8A0A0(v3, v2);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void *))v0[1];
  return v5(v4);
}

BOOL sub_100F8ABEC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for OwnerSharingCircle();
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v5 = static UUID.== infix(_:_:)();
  sub_100FB6BB8(a1, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  BOOL v6 = (v5 & 1) != 0 && v4[*(int *)(v2 + 28)] == 2;
  sub_100FB893C((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  return v6;
}

uint64_t sub_100F8ACE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for UUID();
  v3[5] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[6] = v5;
  v3[7] = *(void *)(v5 + 64);
  v3[8] = swift_task_alloc();
  v3[9] = sub_10000588C((uint64_t *)&unk_1016607D0);
  v3[10] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for OwnerPeerTrust();
  v3[11] = v6;
  v3[12] = *(void *)(v6 - 8);
  v3[13] = swift_task_alloc();
  return _swift_task_switch(sub_100F8AE44, 0, 0);
}

uint64_t sub_100F8AE44()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 32) + 160);
  *(void *)(v0 + 112) = v1;
  return _swift_task_switch(sub_100F8AE68, v1, 0);
}

uint64_t sub_100F8AE68()
{
  uint64_t v1 = v0[14];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v5 = v0[3];
  v0[15] = *(void *)(v1 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v5, v3);
  unint64_t v6 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = swift_allocObject();
  v0[16] = v7;
  *(void *)(v7 + 16) = v1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v7 + v6, v2, v3);
  swift_retain();
  return _swift_task_switch(sub_100F8AF5C, 0, 0);
}

uint64_t sub_100F8AF5C()
{
  uint64_t v2 = v0[15];
  uint64_t v1 = v0[16];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[17] = v3;
  v3[2] = v2;
  v3[3] = sub_100FB6A88;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[18] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100F8B060;
  uint64_t v6 = v0[9];
  uint64_t v5 = v0[10];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1005545F4, v3, v6);
}

uint64_t sub_100F8B060()
{
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_100F8B194, 0, 0);
}

uint64_t sub_100F8B194()
{
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 80);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 96) + 48))(v2, 1, v1) == 1)
  {
    sub_10001DAB4(v2, (uint64_t *)&unk_1016607D0);
    **(void **)(v0 + 16) = 0;
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
    return v3();
  }
  else
  {
    uint64_t v5 = *(void *)(v0 + 104);
    sub_100FB6C70(v2, v5, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
    uint64_t v6 = v5 + *(int *)(v1 + 28);
    uint64_t v8 = (uint64_t (*)(uint64_t))((char *)&dword_101661678 + dword_101661678);
    uint64_t v7 = (void *)swift_task_alloc();
    *(void *)(v0 + 152) = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_100F8B308;
    return v8(v6);
  }
}

uint64_t sub_100F8B308(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)*v4;
  v5[20] = a1;
  v5[21] = a2;
  v5[22] = a3;
  swift_task_dealloc();
  if (v3)
  {
    swift_errorRelease();
    uint64_t v6 = sub_100F8B51C;
  }
  else
  {
    uint64_t v6 = sub_100F8B428;
  }
  return _swift_task_switch(v6, 0, 0);
}

uint64_t sub_100F8B428()
{
  if (*(void *)(v0 + 176))
  {
    uint64_t v1 = *(void *)(v0 + 104);
    uint64_t v2 = sub_100ECF4F0(*(unsigned char *)(v0 + 160), *(void *)(v0 + 168), *(void **)(v0 + 176));
    swift_bridgeObjectRelease();
    sub_100FB893C(v1, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
  }
  else
  {
    sub_100FB893C(*(void *)(v0 + 104), (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
    uint64_t v2 = 0;
  }
  **(void **)(v0 + 16) = v2;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_100F8B51C()
{
  sub_100FB893C(*(void *)(v0 + 104), (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
  **(void **)(v0 + 16) = 0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100F8B5BC(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 264) = a2;
  *(void *)(v4 + 272) = v3;
  *(unsigned char *)(v4 + 828) = a3;
  *(void *)(v4 + 256) = a1;
  sub_10000588C(&qword_101638CF0);
  *(void *)(v4 + 280) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for OwnerSharingCircle();
  *(void *)(v4 + 288) = v5;
  *(void *)(v4 + 296) = *(void *)(v5 - 8);
  *(void *)(v4 + 304) = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_10163AC90);
  *(void *)(v4 + 312) = swift_task_alloc();
  type metadata accessor for ShareCreateUseCase.ShareCreationData();
  *(void *)(v4 + 320) = swift_task_alloc();
  *(void *)(v4 + 328) = swift_task_alloc();
  return _swift_task_switch(sub_100F8B720, v3, 0);
}

uint64_t sub_100F8B720()
{
  if (*(unsigned char *)(v0 + 828) == 2 && (sub_100EAEA4C() & 1) != 0)
  {
    if (qword_101636888 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_100010324(v1, (uint64_t)qword_10170D788);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failure on share create by underage account. Operation is not allowed.", v4, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for SPBeaconSharingError(0);
    *(void *)(v0 + 248) = 8;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100FB6F70((unint64_t *)&qword_1016385F8, type metadata accessor for SPBeaconSharingError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
    return v5();
  }
  else
  {
    uint64_t v7 = (void *)swift_task_alloc();
    *(void *)(v0 + 336) = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_100F8B984;
    uint64_t v8 = *(void *)(v0 + 264);
    uint64_t v9 = *(void *)(v0 + 256);
    char v10 = *(unsigned char *)(v0 + 828);
    return sub_100F8A1A8(v9, v8, v10);
  }
}

uint64_t sub_100F8B984(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *v2;
  *(void *)(*v2 + 344) = a1;
  swift_task_dealloc();
  if (v1)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
  else
  {
    uint64_t v8 = (void *)swift_task_alloc();
    *(void *)(v4 + 352) = v8;
    *uint64_t v8 = v5;
    v8[1] = sub_100F8BB48;
    uint64_t v9 = *(void *)(v4 + 320);
    uint64_t v10 = *(void *)(v4 + 256);
    char v11 = *(unsigned char *)(v4 + 828);
    return sub_100F8FCE8(v9, v10, a1, v11);
  }
}

uint64_t sub_100F8BB48()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 360) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 272);
  swift_bridgeObjectRelease();
  if (v0) {
    uint64_t v4 = sub_100F8D69C;
  }
  else {
    uint64_t v4 = sub_100F8BC90;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100F8BC90()
{
  sub_100FB6C70(v0[40], v0[41], (uint64_t (*)(void))type metadata accessor for ShareCreateUseCase.ShareCreationData);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[46] = (uint64_t)v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100F8BD44;
  uint64_t v2 = v0[41];
  return sub_100F92B3C(v2);
}

uint64_t sub_100F8BD44()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 376) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 272);
  if (v0) {
    uint64_t v4 = sub_100F8DFB4;
  }
  else {
    uint64_t v4 = sub_100F8BE70;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100F8BE70()
{
  uint64_t v1 = *(void *)(v0 + 272);
  *(void *)(v0 + 384) = *(void *)(*(void *)(v0 + 328) + 24);
  long long v6 = *(_OWORD *)(v1 + 136);
  uint64_t v2 = *(void *)(v1 + 136);
  uint64_t v3 = sub_10001CD44((void *)(v1 + 112), v2);
  *(_OWORD *)(v0 + 80) = v6;
  uint64_t v4 = sub_10001D958((uint64_t *)(v0 + 56));
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v2 - 8) + 16))(v4, v3, v2);
  swift_bridgeObjectRetain();
  return _swift_task_switch(sub_100F8BF5C, 0, 0);
}

uint64_t sub_100F8BF5C()
{
  uint64_t v1 = *(void *)(v0 + 384);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 392) = v2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 296);
    int v4 = *(_DWORD *)(v3 + 80);
    *(_DWORD *)(v0 + 816) = v4;
    *(void *)(v0 + 400) = *(void *)(v3 + 72);
    *(void *)(v0 + 408) = 0;
    uint64_t v5 = *(void *)(v0 + 312);
    uint64_t v6 = *(void *)(v0 + 272);
    uint64_t v7 = v1 + ((v4 + 32) & ~(unint64_t)v4);
    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56);
    swift_bridgeObjectRetain();
    v9(v5, 1, 1, v8);
    uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_101670A78 + dword_101670A78);
    uint64_t v10 = (void *)swift_task_alloc();
    *(void *)(v0 + 416) = v10;
    *uint64_t v10 = v0;
    v10[1] = sub_100F8C2FC;
    uint64_t v11 = *(void *)(v0 + 312);
    return v14(v7, v6 + 248, v0 + 56, v11);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v13 = *(void *)(v0 + 272);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 56);
    return _swift_task_switch(sub_100F8C110, v13, 0);
  }
}

uint64_t sub_100F8C110()
{
  if (!*(unsigned char *)(v0 + 828))
  {
    id v1 = [self standardUserDefaults];
    NSString v2 = String._bridgeToObjectiveC()();
    [v1 setBool:1 forKey:v2];
  }
  uint64_t v3 = *(void *)(v0 + 328);
  uint64_t v4 = *(void *)(v3 + 16);
  *(void *)(v0 + 432) = v4;
  uint64_t v5 = *(void *)(v4 + 16);
  *(void *)(v0 + 440) = v5;
  if (v5)
  {
    uint64_t v7 = *(void *)(v0 + 288);
    uint64_t v6 = *(void *)(v0 + 296);
    int v8 = *(_DWORD *)(v6 + 80);
    *(_DWORD *)(v0 + 820) = v8;
    *(void *)(v0 + 448) = *(void *)(v6 + 72);
    *(void *)(v0 + 456) = 0;
    uint64_t v9 = *(void *)(v0 + 304);
    uint64_t v10 = v4 + ((v8 + 32) & ~(unint64_t)v8);
    swift_bridgeObjectRetain();
    sub_100FB6BB8(v10, v9, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    *(unsigned char *)(v0 + 829) = 0x4000201u >> (8 * *(unsigned char *)(v9 + *(int *)(v7 + 28)));
    uint64_t v11 = *(void **)(v0 + 272);
    *(_DWORD *)(v0 + 824) = *(_DWORD *)(*(void *)(v0 + 288) + 20);
    uint64_t v12 = v11[17];
    uint64_t v13 = v11[19];
    uint64_t v14 = sub_10001CD44(v11 + 14, v12);
    *(void *)(v0 + 40) = v12;
    *(void *)(v0 + 48) = v13;
    uint64_t v15 = sub_10001D958((uint64_t *)(v0 + 16));
    (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v12 - 8) + 16))(v15, v14, v12);
    uint64_t v16 = sub_100F8C8AC;
  }
  else
  {
    uint64_t v17 = *(void *)(v0 + 272);
    *(void *)(v0 + 472) = *(void *)(v3 + 24);
    *(void *)(v0 + 480) = *(void *)(v17 + 160);
    swift_bridgeObjectRetain();
    uint64_t v16 = sub_100F8CD04;
  }
  return _swift_task_switch(v16, 0, 0);
}

uint64_t sub_100F8C2FC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 424) = v0;
  swift_task_dealloc();
  sub_10001DAB4(*(void *)(v2 + 312), (uint64_t *)&unk_10163AC90);
  if (v0)
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = sub_100F8C5D0;
  }
  else
  {
    uint64_t v3 = sub_100F8C43C;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100F8C43C()
{
  uint64_t v1 = *(void *)(v0 + 408) + 1;
  if (v1 == *(void *)(v0 + 392))
  {
    swift_bridgeObjectRelease_n();
    uint64_t v2 = *(void *)(v0 + 272);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 56);
    return _swift_task_switch(sub_100F8C110, v2, 0);
  }
  else
  {
    *(void *)(v0 + 408) = v1;
    uint64_t v3 = *(void *)(v0 + 312);
    uint64_t v4 = *(void *)(v0 + 272);
    unint64_t v5 = *(void *)(v0 + 384)
       + ((*(unsigned __int8 *)(v0 + 816) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 816))
       + *(void *)(v0 + 400) * v1;
    uint64_t v6 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v3, 1, 1, v6);
    uint64_t v10 = (uint64_t (*)(unint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_101670A78
                                                                              + dword_101670A78);
    uint64_t v7 = (void *)swift_task_alloc();
    *(void *)(v0 + 416) = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_100F8C2FC;
    uint64_t v8 = *(void *)(v0 + 312);
    return v10(v5, v4 + 248, v0 + 56, v8);
  }
}

uint64_t sub_100F8C5D0()
{
  uint64_t v1 = *(void *)(v0 + 272);
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100F8C63C, v1, 0);
}

uint64_t sub_100F8C63C()
{
  uint64_t v12 = v0;
  int v1 = *(unsigned __int8 *)(v0 + 828);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 56);
  if (!v1) {
    sub_1012D0780(*(void *)(v0 + 424));
  }
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  *(void *)(v0 + 672) = sub_100010324(v2, (uint64_t)qword_10170D788);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    unint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)unint64_t v5 = 136315138;
    swift_getErrorValue();
    uint64_t v6 = Error.localizedDescription.getter();
    *(void *)(v0 + 208) = sub_1008FA0F0(v6, v7, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failure on share create, server share creation: %s", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 680) = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_100F8E8AC;
  uint64_t v9 = *(void *)(v0 + 328);
  return sub_100F94CB0(v9);
}

uint64_t sub_100F8C8AC()
{
  uint64_t v1 = *(int *)(v0 + 824);
  uint64_t v2 = *(void *)(v0 + 304);
  sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 464) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_100F8C968;
  char v4 = *(unsigned char *)(v0 + 829);
  return sub_1005F63F8(v2 + v1, v4, 0);
}

uint64_t sub_100F8C968(char a1)
{
  uint64_t v4 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    *(void *)(v4 + 808) = v1;
    uint64_t v5 = *(void *)(v4 + 272);
    uint64_t v6 = sub_100F8F9A8;
  }
  else
  {
    *(unsigned char *)(v4 + 830) = a1 & 1;
    uint64_t v6 = sub_100F8CAA0;
    uint64_t v5 = 0;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_100F8CAA0()
{
  if (*(unsigned char *)(v0 + 830) == 1)
  {
    uint64_t v1 = *(void *)(v0 + 272);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
    uint64_t v2 = sub_100F8CB68;
    uint64_t v3 = v1;
  }
  else
  {
    sub_100075398();
    uint64_t v4 = swift_allocError();
    unsigned char *v5 = 0;
    swift_willThrow();
    *(void *)(v0 + 808) = v4;
    uint64_t v3 = *(void *)(v0 + 272);
    uint64_t v2 = sub_100F8F9A8;
  }
  return _swift_task_switch(v2, v3, 0);
}

uint64_t sub_100F8CB68()
{
  sub_100FB893C(*(void *)(v0 + 304), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  uint64_t v1 = *(void *)(v0 + 456) + 1;
  if (v1 == *(void *)(v0 + 440))
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = *(void *)(v0 + 272);
    *(void *)(v0 + 472) = *(void *)(*(void *)(v0 + 328) + 24);
    *(void *)(v0 + 480) = *(void *)(v2 + 160);
    swift_bridgeObjectRetain();
    uint64_t v3 = sub_100F8CD04;
  }
  else
  {
    *(void *)(v0 + 456) = v1;
    uint64_t v4 = *(void *)(v0 + 304);
    uint64_t v5 = *(void *)(v0 + 288);
    sub_100FB6BB8(*(void *)(v0 + 432)+ ((*(unsigned __int8 *)(v0 + 820) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 820))+ *(void *)(v0 + 448) * v1, v4, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    *(unsigned char *)(v0 + 829) = 0x4000201u >> (8 * *(unsigned char *)(v4 + *(int *)(v5 + 28)));
    uint64_t v6 = *(void **)(v0 + 272);
    *(_DWORD *)(v0 + 824) = *(_DWORD *)(*(void *)(v0 + 288) + 20);
    uint64_t v7 = v6[17];
    uint64_t v8 = v6[19];
    uint64_t v9 = sub_10001CD44(v6 + 14, v7);
    *(void *)(v0 + 40) = v7;
    *(void *)(v0 + 48) = v8;
    uint64_t v10 = sub_10001D958((uint64_t *)(v0 + 16));
    (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(v10, v9, v7);
    uint64_t v3 = sub_100F8C8AC;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100F8CD04()
{
  uint64_t v1 = v0[34];
  uint64_t v2 = v0[35];
  uint64_t v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_101670A58
                                                                                    + dword_101670A58);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[61] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100F8CE04;
  uint64_t v6 = v0[59];
  uint64_t v5 = v0[60];
  uint64_t v7 = v0[35];
  return v9(v6, v7, v5, v1 + 168, v1 + 208, v1 + 248);
}

uint64_t sub_100F8CE04()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 496) = v0;
  swift_task_dealloc();
  if (v0)
  {
    sub_10001DAB4(*(void *)(v2 + 280), &qword_101638CF0);
    return _swift_task_switch(sub_100F8CFC0, 0, 0);
  }
  else
  {
    sub_10001DAB4(*(void *)(v2 + 280), &qword_101638CF0);
    swift_bridgeObjectRelease();
    uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_101665A40 + dword_101665A40);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v2 + 504) = v3;
    *uint64_t v3 = v2;
    v3[1] = sub_100F8D080;
    uint64_t v4 = *(unsigned __int8 *)(v2 + 828);
    uint64_t v5 = *(void *)(v2 + 256);
    return v7(v5, v4);
  }
}

uint64_t sub_100F8CFC0()
{
  swift_errorRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = (uint64_t (*)(uint64_t, char))((char *)&dword_101665A40 + dword_101665A40);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 504) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100F8D080;
  uint64_t v2 = *(void *)(v0 + 256);
  char v3 = *(unsigned char *)(v0 + 828);
  return v5(v2, v3);
}

uint64_t sub_100F8D080()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 272);
  swift_task_dealloc();
  return _swift_task_switch(sub_100F8D190, v1, 0);
}

uint64_t sub_100F8D190()
{
  uint64_t v1 = swift_bridgeObjectRetain();
  *(void *)(v0 + 512) = sub_10070FD7C(v1);
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100F8D210, 0, 0);
}

uint64_t sub_100F8D210()
{
  uint64_t v1 = v0[64];
  if ((v1 & 0x8000000000000000) == 0 && (v1 & 0x4000000000000000) == 0)
  {
    uint64_t v2 = *(void *)(v1 + 16);
    uint64_t v3 = swift_retain();
    v0[65] = v2;
    if (v2) {
      goto LABEL_4;
    }
LABEL_12:
    uint64_t v10 = v0[34];
    swift_release_n();
    uint64_t v3 = (uint64_t)sub_100F8D378;
    uint64_t v4 = v10;
    uint64_t v5 = 0;
    return _swift_task_switch(v3, v4, v5);
  }
  swift_retain();
  uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v2 = v3;
  v0[65] = v3;
  if (!v3) {
    goto LABEL_12;
  }
LABEL_4:
  if (v2 < 1)
  {
    __break(1u);
    return _swift_task_switch(v3, v4, v5);
  }
  uint64_t v6 = v0[64];
  v0[66] = 0;
  if ((v6 & 0xC000000000000001) != 0)
  {
    uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    uint64_t v7 = *(void *)(v6 + 32);
    swift_retain();
  }
  v0[67] = v7;
  type metadata accessor for AnalyticsPublisher();
  v0[68] = swift_allocObject();
  swift_defaultActor_initialize();
  uint64_t v8 = (void *)swift_task_alloc();
  v0[69] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_100F8D434;
  return sub_101196838(v7);
}

uint64_t sub_100F8D378()
{
  sub_100FB893C(*(void *)(v0 + 328), (uint64_t (*)(void))type metadata accessor for ShareCreateUseCase.ShareCreationData);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100F8D434()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100F8D54C, 0, 0);
}

uint64_t sub_100F8D54C()
{
  uint64_t v1 = v0[66];
  uint64_t v2 = v0[65];
  swift_release();
  if (v1 + 1 == v2)
  {
    uint64_t v3 = v0[34];
    swift_release_n();
    return _swift_task_switch(sub_100F8D378, v3, 0);
  }
  else
  {
    uint64_t v4 = v0[66] + 1;
    v0[66] = v4;
    uint64_t v5 = v0[64];
    if ((v5 & 0xC000000000000001) != 0)
    {
      uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      uint64_t v6 = *(void *)(v5 + 8 * v4 + 32);
      swift_retain();
    }
    v0[67] = v6;
    type metadata accessor for AnalyticsPublisher();
    v0[68] = swift_allocObject();
    swift_defaultActor_initialize();
    uint64_t v7 = (void *)swift_task_alloc();
    v0[69] = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_100F8D434;
    return sub_101196838(v6);
  }
}

uint64_t sub_100F8D69C()
{
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170D788);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138543362;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 200) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failure on share create, data preparing: %{public}@", v4, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v7 = swift_bridgeObjectRetain();
  *(void *)(v0 + 560) = sub_10070FD7C(v7);
  swift_bridgeObjectRelease();
  swift_errorRetain();
  return _swift_task_switch(sub_100F8D8C0, 0, 0);
}

uint64_t sub_100F8D8C0()
{
  uint64_t v1 = v0[70];
  if ((v1 & 0x8000000000000000) == 0 && (v1 & 0x4000000000000000) == 0)
  {
    uint64_t v2 = *(void *)(v1 + 16);
    uint64_t v3 = swift_retain();
    v0[71] = v2;
    if (v2) {
      goto LABEL_4;
    }
LABEL_12:
    swift_release();
    swift_errorRelease();
    uint64_t v11 = v0[34];
    swift_release();
    uint64_t v3 = (uint64_t)sub_100F8DA34;
    uint64_t v4 = v11;
    uint64_t v5 = 0;
    return _swift_task_switch(v3, v4, v5);
  }
  swift_retain();
  uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v2 = v3;
  v0[71] = v3;
  if (!v3) {
    goto LABEL_12;
  }
LABEL_4:
  if (v2 < 1)
  {
    __break(1u);
    return _swift_task_switch(v3, v4, v5);
  }
  uint64_t v6 = v0[70];
  v0[72] = 0;
  if ((v6 & 0xC000000000000001) != 0)
  {
    uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    uint64_t v7 = *(void *)(v6 + 32);
    swift_retain();
  }
  v0[73] = v7;
  swift_errorRetain();
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10166D770 + dword_10166D770);
  uint64_t v8 = (void *)swift_task_alloc();
  v0[74] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_100F8DB64;
  uint64_t v9 = v0[45];
  return v12(v7, v9);
}

uint64_t sub_100F8DA34()
{
  *(void *)(v0 + 232) = *(void *)(v0 + 360);
  swift_errorRetain();
  sub_10000588C(&qword_101638D40);
  type metadata accessor for SPBeaconSharingError(0);
  if (swift_dynamicCast())
  {

    swift_willThrow();
  }
  else
  {
    sub_100074FA8();
    swift_allocError();
    *uint64_t v1 = 0;
    swift_willThrow();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100F8DB64()
{
  swift_task_dealloc();
  if (v0)
  {
    swift_errorRelease();
    uint64_t v1 = sub_100FB98A8;
  }
  else
  {
    uint64_t v1 = sub_100F8DC7C;
  }
  return _swift_task_switch(v1, 0, 0);
}

uint64_t sub_100F8DC7C()
{
  swift_errorRelease();
  type metadata accessor for AnalyticsPublisher();
  v0[75] = swift_allocObject();
  swift_defaultActor_initialize();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[76] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100F8DD38;
  uint64_t v2 = v0[73];
  return sub_101196838(v2);
}

uint64_t sub_100F8DD38()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100F8DE50, 0, 0);
}

uint64_t sub_100F8DE50()
{
  uint64_t v1 = v0[72];
  uint64_t v2 = v0[71];
  swift_release();
  if (v1 + 1 == v2)
  {
    swift_release();
    swift_errorRelease();
    uint64_t v3 = v0[34];
    swift_release();
    return _swift_task_switch(sub_100F8DA34, v3, 0);
  }
  else
  {
    uint64_t v4 = v0[72] + 1;
    v0[72] = v4;
    uint64_t v5 = v0[70];
    if ((v5 & 0xC000000000000001) != 0)
    {
      uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      uint64_t v6 = *(void *)(v5 + 8 * v4 + 32);
      swift_retain();
    }
    v0[73] = v6;
    swift_errorRetain();
    uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10166D770 + dword_10166D770);
    uint64_t v7 = (void *)swift_task_alloc();
    v0[74] = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_100F8DB64;
    uint64_t v8 = v0[45];
    return v10(v6, v8);
  }
}

uint64_t sub_100F8DFB4()
{
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170D788);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138543362;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 176) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failure on share create, iCloud data update: %{public}@", v4, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v7 = swift_bridgeObjectRetain();
  *(void *)(v0 + 616) = sub_10070FD7C(v7);
  swift_bridgeObjectRelease();
  swift_errorRetain();
  return _swift_task_switch(sub_100F8E1D8, 0, 0);
}

uint64_t sub_100F8E1D8()
{
  uint64_t v1 = v0[77];
  if ((v1 & 0x8000000000000000) == 0 && (v1 & 0x4000000000000000) == 0)
  {
    uint64_t v2 = *(void *)(v1 + 16);
    uint64_t v3 = swift_retain();
    v0[78] = v2;
    if (v2) {
      goto LABEL_4;
    }
LABEL_12:
    uint64_t v11 = v0[34];
    swift_release();
    swift_errorRelease();
    swift_release();
    uint64_t v3 = (uint64_t)sub_100F8E35C;
    uint64_t v4 = v11;
    uint64_t v5 = 0;
    return _swift_task_switch(v3, v4, v5);
  }
  swift_retain();
  uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v2 = v3;
  v0[78] = v3;
  if (!v3) {
    goto LABEL_12;
  }
LABEL_4:
  if (v2 < 1)
  {
    __break(1u);
    return _swift_task_switch(v3, v4, v5);
  }
  uint64_t v6 = v0[77];
  v0[79] = 0;
  if ((v6 & 0xC000000000000001) != 0)
  {
    uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    uint64_t v7 = *(void *)(v6 + 32);
    swift_retain();
  }
  v0[80] = v7;
  swift_errorRetain();
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10166D770 + dword_10166D770);
  uint64_t v8 = (void *)swift_task_alloc();
  v0[81] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_100F8E454;
  uint64_t v9 = v0[47];
  return v12(v7, v9);
}

uint64_t sub_100F8E35C()
{
  uint64_t v1 = *(void *)(v0 + 328);
  sub_100074FA8();
  swift_allocError();
  *uint64_t v2 = 1;
  swift_willThrow();
  swift_errorRelease();
  sub_100FB893C(v1, (uint64_t (*)(void))type metadata accessor for ShareCreateUseCase.ShareCreationData);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_100F8E454()
{
  swift_task_dealloc();
  if (v0)
  {
    swift_errorRelease();
    uint64_t v1 = sub_100FB98AC;
  }
  else
  {
    uint64_t v1 = sub_100F8E56C;
  }
  return _swift_task_switch(v1, 0, 0);
}

uint64_t sub_100F8E56C()
{
  swift_errorRelease();
  type metadata accessor for AnalyticsPublisher();
  v0[82] = swift_allocObject();
  swift_defaultActor_initialize();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[83] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100F8E628;
  uint64_t v2 = v0[80];
  return sub_101196838(v2);
}

uint64_t sub_100F8E628()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100F8E740, 0, 0);
}

uint64_t sub_100F8E740()
{
  uint64_t v1 = v0[79];
  uint64_t v2 = v0[78];
  swift_release();
  if (v1 + 1 == v2)
  {
    uint64_t v3 = v0[34];
    swift_release();
    swift_errorRelease();
    swift_release();
    return _swift_task_switch(sub_100F8E35C, v3, 0);
  }
  else
  {
    uint64_t v4 = v0[79] + 1;
    v0[79] = v4;
    uint64_t v5 = v0[77];
    if ((v5 & 0xC000000000000001) != 0)
    {
      uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      uint64_t v6 = *(void *)(v5 + 8 * v4 + 32);
      swift_retain();
    }
    v0[80] = v6;
    swift_errorRetain();
    uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10166D770 + dword_10166D770);
    uint64_t v7 = (void *)swift_task_alloc();
    v0[81] = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_100F8E454;
    uint64_t v8 = v0[47];
    return v10(v6, v8);
  }
}

uint64_t sub_100F8E8AC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 688) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 272);
  if (v0) {
    uint64_t v4 = sub_100F8F138;
  }
  else {
    uint64_t v4 = sub_100F8E9D8;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100F8E9D8()
{
  uint64_t v1 = swift_bridgeObjectRetain();
  *(void *)(v0 + 696) = sub_10070FD7C(v1);
  swift_bridgeObjectRelease();
  swift_errorRetain();
  return _swift_task_switch(sub_100F8EA64, 0, 0);
}

uint64_t sub_100F8EA64()
{
  uint64_t v1 = v0[87];
  if ((v1 & 0x8000000000000000) == 0 && (v1 & 0x4000000000000000) == 0)
  {
    uint64_t v2 = *(void *)(v1 + 16);
    uint64_t v3 = swift_retain();
    v0[88] = v2;
    if (v2) {
      goto LABEL_4;
    }
LABEL_12:
    uint64_t v11 = v0[34];
    swift_release();
    swift_errorRelease();
    swift_release();
    uint64_t v3 = (uint64_t)sub_100F8EBE8;
    uint64_t v4 = v11;
    uint64_t v5 = 0;
    return _swift_task_switch(v3, v4, v5);
  }
  swift_retain();
  uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v2 = v3;
  v0[88] = v3;
  if (!v3) {
    goto LABEL_12;
  }
LABEL_4:
  if (v2 < 1)
  {
    __break(1u);
    return _swift_task_switch(v3, v4, v5);
  }
  uint64_t v6 = v0[87];
  v0[89] = 0;
  if ((v6 & 0xC000000000000001) != 0)
  {
    uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    uint64_t v7 = *(void *)(v6 + 32);
    swift_retain();
  }
  v0[90] = v7;
  swift_errorRetain();
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10166D770 + dword_10166D770);
  uint64_t v8 = (void *)swift_task_alloc();
  v0[91] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_100F8ECE0;
  uint64_t v9 = v0[53];
  return v12(v7, v9);
}

uint64_t sub_100F8EBE8()
{
  uint64_t v1 = *(void *)(v0 + 328);
  sub_100074FA8();
  swift_allocError();
  *uint64_t v2 = 2;
  swift_willThrow();
  swift_errorRelease();
  sub_100FB893C(v1, (uint64_t (*)(void))type metadata accessor for ShareCreateUseCase.ShareCreationData);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_100F8ECE0()
{
  swift_task_dealloc();
  if (v0)
  {
    swift_errorRelease();
    uint64_t v1 = sub_100FB98B0;
  }
  else
  {
    uint64_t v1 = sub_100F8EDF8;
  }
  return _swift_task_switch(v1, 0, 0);
}

uint64_t sub_100F8EDF8()
{
  swift_errorRelease();
  type metadata accessor for AnalyticsPublisher();
  v0[92] = swift_allocObject();
  swift_defaultActor_initialize();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[93] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100F8EEB4;
  uint64_t v2 = v0[90];
  return sub_101196838(v2);
}

uint64_t sub_100F8EEB4()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100F8EFCC, 0, 0);
}

uint64_t sub_100F8EFCC()
{
  uint64_t v1 = v0[89];
  uint64_t v2 = v0[88];
  swift_release();
  if (v1 + 1 == v2)
  {
    uint64_t v3 = v0[34];
    swift_release();
    swift_errorRelease();
    swift_release();
    return _swift_task_switch(sub_100F8EBE8, v3, 0);
  }
  else
  {
    uint64_t v4 = v0[89] + 1;
    v0[89] = v4;
    uint64_t v5 = v0[87];
    if ((v5 & 0xC000000000000001) != 0)
    {
      uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      uint64_t v6 = *(void *)(v5 + 8 * v4 + 32);
      swift_retain();
    }
    v0[90] = v6;
    swift_errorRetain();
    uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10166D770 + dword_10166D770);
    uint64_t v7 = (void *)swift_task_alloc();
    v0[91] = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_100F8ECE0;
    uint64_t v8 = v0[53];
    return v10(v6, v8);
  }
}

uint64_t sub_100F8F138()
{
  uint64_t v9 = v0;
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315138;
    swift_getErrorValue();
    uint64_t v4 = Error.localizedDescription.getter();
    *(void *)(v0 + 184) = sub_1008FA0F0(v4, v5, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failure on share create, iCloud data rollback on share creation failure: %s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v6 = swift_bridgeObjectRetain();
  *(void *)(v0 + 752) = sub_10070FD7C(v6);
  swift_bridgeObjectRelease();
  swift_errorRetain();
  return _swift_task_switch(sub_100F8F338, 0, 0);
}

uint64_t sub_100F8F338()
{
  uint64_t v1 = v0[94];
  if ((v1 & 0x8000000000000000) == 0 && (v1 & 0x4000000000000000) == 0)
  {
    uint64_t v2 = *(void *)(v1 + 16);
    uint64_t v3 = swift_retain();
    v0[95] = v2;
    if (v2) {
      goto LABEL_4;
    }
LABEL_12:
    uint64_t v11 = v0[34];
    swift_release();
    swift_errorRelease();
    swift_release();
    uint64_t v3 = (uint64_t)sub_100F8F4BC;
    uint64_t v4 = v11;
    uint64_t v5 = 0;
    return _swift_task_switch(v3, v4, v5);
  }
  swift_retain();
  uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v2 = v3;
  v0[95] = v3;
  if (!v3) {
    goto LABEL_12;
  }
LABEL_4:
  if (v2 < 1)
  {
    __break(1u);
    return _swift_task_switch(v3, v4, v5);
  }
  uint64_t v6 = v0[94];
  v0[96] = 0;
  if ((v6 & 0xC000000000000001) != 0)
  {
    uint64_t v7 = specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    uint64_t v7 = *(void *)(v6 + 32);
    swift_retain();
  }
  v0[97] = v7;
  swift_errorRetain();
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10166D770 + dword_10166D770);
  uint64_t v8 = (void *)swift_task_alloc();
  v0[98] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_100F8F550;
  uint64_t v9 = v0[86];
  return v12(v7, v9);
}

uint64_t sub_100F8F4BC()
{
  swift_errorRelease();
  uint64_t v1 = swift_bridgeObjectRetain();
  *(void *)(v0 + 696) = sub_10070FD7C(v1);
  swift_bridgeObjectRelease();
  swift_errorRetain();
  return _swift_task_switch(sub_100F8EA64, 0, 0);
}

uint64_t sub_100F8F550()
{
  swift_task_dealloc();
  if (v0)
  {
    swift_errorRelease();
    uint64_t v1 = sub_100FB98B4;
  }
  else
  {
    uint64_t v1 = sub_100F8F668;
  }
  return _swift_task_switch(v1, 0, 0);
}

uint64_t sub_100F8F668()
{
  swift_errorRelease();
  type metadata accessor for AnalyticsPublisher();
  v0[99] = swift_allocObject();
  swift_defaultActor_initialize();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[100] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100F8F724;
  uint64_t v2 = v0[97];
  return sub_101196838(v2);
}

uint64_t sub_100F8F724()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100F8F83C, 0, 0);
}

uint64_t sub_100F8F83C()
{
  uint64_t v1 = v0[96];
  uint64_t v2 = v0[95];
  swift_release();
  if (v1 + 1 == v2)
  {
    uint64_t v3 = v0[34];
    swift_release();
    swift_errorRelease();
    swift_release();
    return _swift_task_switch(sub_100F8F4BC, v3, 0);
  }
  else
  {
    uint64_t v4 = v0[96] + 1;
    v0[96] = v4;
    uint64_t v5 = v0[94];
    if ((v5 & 0xC000000000000001) != 0)
    {
      uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      uint64_t v6 = *(void *)(v5 + 8 * v4 + 32);
      swift_retain();
    }
    v0[97] = v6;
    swift_errorRetain();
    uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10166D770 + dword_10166D770);
    uint64_t v7 = (void *)swift_task_alloc();
    v0[98] = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_100F8F550;
    uint64_t v8 = v0[86];
    return v10(v6, v8);
  }
}

uint64_t sub_100F8F9A8()
{
  uint64_t v21 = v0;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170D788);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = *(void *)(v0 + 304);
  if (v4)
  {
    uint64_t v6 = swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    swift_getErrorValue();
    uint64_t v7 = Error.localizedDescription.getter();
    *(void *)(v6 + 4) = sub_1008FA0F0(v7, v8, &v20);
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failure on share create, server share deletion: %s", (uint8_t *)v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  swift_errorRelease();
  sub_100FB893C(v5, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  uint64_t v9 = *(void *)(v0 + 456) + 1;
  if (v9 == *(void *)(v0 + 440))
  {
    swift_bridgeObjectRelease();
    uint64_t v10 = *(void *)(v0 + 272);
    *(void *)(v0 + 472) = *(void *)(*(void *)(v0 + 328) + 24);
    *(void *)(v0 + 480) = *(void *)(v10 + 160);
    swift_bridgeObjectRetain();
    uint64_t v11 = sub_100F8CD04;
  }
  else
  {
    *(void *)(v0 + 456) = v9;
    uint64_t v12 = *(void *)(v0 + 304);
    uint64_t v13 = *(void *)(v0 + 288);
    sub_100FB6BB8(*(void *)(v0 + 432)+ ((*(unsigned __int8 *)(v0 + 820) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 820))+ *(void *)(v0 + 448) * v9, v12, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    *(unsigned char *)(v0 + 829) = 0x4000201u >> (8 * *(unsigned char *)(v12 + *(int *)(v13 + 28)));
    uint64_t v14 = *(void **)(v0 + 272);
    *(_DWORD *)(v0 + 824) = *(_DWORD *)(*(void *)(v0 + 288) + 20);
    uint64_t v15 = v14[17];
    uint64_t v16 = v14[19];
    uint64_t v17 = sub_10001CD44(v14 + 14, v15);
    *(void *)(v0 + 40) = v15;
    *(void *)(v0 + 48) = v16;
    unint64_t v18 = sub_10001D958((uint64_t *)(v0 + 16));
    (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v15 - 8) + 16))(v18, v17, v15);
    uint64_t v11 = sub_100F8C8AC;
  }
  return _swift_task_switch(v11, 0, 0);
}

uint64_t sub_100F8FCE8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(unsigned char *)(v5 + 642) = a4;
  *(void *)(v5 + 128) = a3;
  *(void *)(v5 + 136) = v4;
  *(void *)(v5 + 112) = a1;
  *(void *)(v5 + 120) = a2;
  uint64_t v6 = type metadata accessor for OwnerPeerTrust();
  *(void *)(v5 + 144) = v6;
  *(void *)(v5 + 152) = *(void *)(v6 - 8);
  *(void *)(v5 + 160) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for OwnerSharingCircle();
  *(void *)(v5 + 168) = v7;
  *(void *)(v5 + 176) = *(void *)(v7 - 8);
  *(void *)(v5 + 184) = swift_task_alloc();
  *(void *)(v5 + 192) = swift_task_alloc();
  *(void *)(v5 + 200) = sub_10000588C(&qword_10163B9E0);
  *(void *)(v5 + 208) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for BeaconNamingRecord();
  *(void *)(v5 + 216) = v8;
  *(void *)(v5 + 224) = *(void *)(v8 - 8);
  *(void *)(v5 + 232) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for UUID();
  *(void *)(v5 + 240) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  *(void *)(v5 + 248) = v10;
  *(void *)(v5 + 256) = *(void *)(v10 + 64);
  *(void *)(v5 + 264) = swift_task_alloc();
  *(void *)(v5 + 272) = swift_task_alloc();
  *(void *)(v5 + 280) = swift_task_alloc();
  *(void *)(v5 + 288) = swift_task_alloc();
  *(void *)(v5 + 296) = sub_10000588C(&qword_10163B9F0);
  *(void *)(v5 + 304) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for OwnedBeaconRecord();
  *(void *)(v5 + 312) = v11;
  *(void *)(v5 + 320) = *(void *)(v11 - 8);
  *(void *)(v5 + 328) = swift_task_alloc();
  return _swift_task_switch(sub_100F8FFC8, v4, 0);
}

uint64_t sub_100F8FFC8()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 136) + 160);
  *(void *)(v0 + 336) = v1;
  return _swift_task_switch(sub_100F8FFEC, v1, 0);
}

uint64_t sub_100F8FFEC()
{
  uint64_t v1 = *(void *)(v0 + 336);
  uint64_t v2 = *(void *)(v0 + 288);
  uint64_t v3 = *(void *)(v0 + 248);
  uint64_t v4 = *(void *)(v0 + 240);
  uint64_t v5 = *(void *)(v0 + 120);
  *(void *)(v0 + 344) = *(void *)(v1 + 136);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  *(void *)(v0 + 352) = v6;
  *(void *)(v0 + 360) = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v2, v5, v4);
  int v7 = *(_DWORD *)(v3 + 80);
  *(_DWORD *)(v0 + 632) = v7;
  unint64_t v8 = (v7 + 24) & ~(unint64_t)v7;
  uint64_t v9 = swift_allocObject();
  *(void *)(v0 + 368) = v9;
  *(void *)(v9 + 16) = v1;
  uint64_t v10 = *(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32);
  *(void *)(v0 + 376) = v10;
  *(void *)(v0 + 384) = (v3 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v10(v9 + v8, v2, v4);
  swift_retain();
  return _swift_task_switch(sub_100F90104, 0, 0);
}

uint64_t sub_100F90104()
{
  uint64_t v1 = v0[46];
  uint64_t v2 = v0[43];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[49] = v3;
  v3[2] = v2;
  v3[3] = sub_100FB6C44;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[50] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100F9020C;
  uint64_t v6 = v0[37];
  uint64_t v5 = v0[38];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10001D89C, v3, v6);
}

uint64_t sub_100F9020C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 136);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_100F9035C, v1, 0);
}

uint64_t sub_100F9035C()
{
  uint64_t v1 = v0[38];
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(v0[40] + 48))(v1, 1, v0[39]) == 1)
  {
    sub_10001DAB4(v1, &qword_10163B9F0);
    type metadata accessor for SPBeaconSharingError(0);
    v0[3] = 0;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100FB6F70((unint64_t *)&qword_1016385F8, type metadata accessor for SPBeaconSharingError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = (uint64_t (*)(void))v0[1];
    return v2();
  }
  else
  {
    uint64_t v4 = v0[42];
    sub_100FB6C70(v1, v0[41], (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    return _swift_task_switch(sub_100F9056C, v4, 0);
  }
}

uint64_t sub_100F9056C()
{
  uint64_t v1 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 376);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 352);
  uint64_t v3 = *(void *)(v0 + 336);
  uint64_t v4 = *(void *)(v0 + 288);
  uint64_t v5 = *(void *)(v0 + 240);
  uint64_t v6 = *(void *)(v0 + 120);
  unint64_t v7 = (*(unsigned __int8 *)(v0 + 632) + 24) & ~(unint64_t)*(unsigned __int8 *)(v0 + 632);
  *(void *)(v0 + 408) = *(void *)(v3 + 136);
  v2(v4, v6, v5);
  uint64_t v8 = swift_allocObject();
  *(void *)(v0 + 416) = v8;
  *(void *)(v8 + 16) = v3;
  v1(v8 + v7, v4, v5);
  swift_retain();
  return _swift_task_switch(sub_100F90660, 0, 0);
}

uint64_t sub_100F90660()
{
  uint64_t v2 = v0[51];
  uint64_t v1 = v0[52];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[53] = v3;
  v3[2] = v2;
  v3[3] = sub_100FB6CDC;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[54] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100F90764;
  uint64_t v6 = v0[25];
  uint64_t v5 = v0[26];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100090CE8, v3, v6);
}

uint64_t sub_100F90764()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 136);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_100F908B4, v1, 0);
}

uint64_t sub_100F908B4()
{
  uint64_t v1 = *(void *)(v0 + 208);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)(v0 + 224) + 48))(v1, 1, *(void *)(v0 + 216)) == 1)
  {
    sub_100FB893C(*(void *)(v0 + 328), (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    sub_10001DAB4(v1, &qword_10163B9E0);
    type metadata accessor for SPBeaconSharingError(0);
    *(void *)(v0 + 24) = 0;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100FB6F70((unint64_t *)&qword_1016385F8, type metadata accessor for SPBeaconSharingError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
    return v2();
  }
  else
  {
    uint64_t v4 = *(void *)(v0 + 128);
    uint64_t v5 = *(void *)(v0 + 136);
    char v6 = *(unsigned char *)(v0 + 642);
    uint64_t v7 = *(void *)(v0 + 120);
    sub_100FB6C70(v1, *(void *)(v0 + 232), (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
    *(void *)(v0 + 32) = v4;
    uint64_t v8 = swift_task_alloc();
    *(void *)(v0 + 440) = v8;
    *(unsigned char *)(v8 + 16) = v6;
    *(void *)(v8 + 24) = v5;
    *(void *)(v8 + 32) = v7;
    uint64_t v9 = (void *)swift_task_alloc();
    *(void *)(v0 + 448) = v9;
    uint64_t v10 = sub_10000588C(&qword_101665A68);
    uint64_t v11 = sub_100062734(&qword_101665A70, &qword_101665A68);
    void *v9 = v0;
    v9[1] = sub_100F90B9C;
    uint64_t v12 = *(void *)(v0 + 144);
    return Sequence.asyncCompactMap<A>(_:)(&unk_101665A60, v8, v10, v12, v11);
  }
}

uint64_t sub_100F90B9C(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 456) = a1;
  *(void *)(v4 + 464) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 136);
  swift_task_dealloc();
  if (v1) {
    char v6 = sub_100F92A08;
  }
  else {
    char v6 = sub_100F90CEC;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_100F90CEC()
{
  v0[5] = v0[57];
  uint64_t v1 = (void *)swift_task_alloc();
  v0[59] = v1;
  uint64_t v2 = sub_10000588C(&qword_101639F18);
  uint64_t v3 = sub_100062734(&qword_101665A88, &qword_101639F18);
  *uint64_t v1 = v0;
  v1[1] = sub_100F90DEC;
  uint64_t v4 = v0[17];
  return Sequence.asyncFilter(_:)(&unk_101665A80, v4, v2, v3);
}

uint64_t sub_100F90DEC(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  uint64_t v8 = (void *)*v2;
  v4[60] = a1;
  v4[61] = v1;
  swift_task_dealloc();
  uint64_t v5 = (void *)swift_task_alloc();
  v4[62] = v5;
  void *v5 = v8;
  v5[1] = sub_100F90F54;
  uint64_t v6 = v3[15];
  return sub_100E59F38(v6, 0);
}

uint64_t sub_100F90F54(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 136);
  *(void *)(*(void *)v1 + 504) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100F9106C, v2, 0);
}

uint64_t sub_100F9106C()
{
  uint64_t v1 = *(void *)(v0 + 504);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 512) = v2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 176);
    int v4 = *(_DWORD *)(v3 + 80);
    *(_DWORD *)(v0 + 636) = v4;
    *(void *)(v0 + 520) = *(void *)(v3 + 72);
    *(void *)(v0 + 528) = 0;
    sub_100FB6BB8(v1 + ((v4 + 32) & ~(unint64_t)v4), *(void *)(v0 + 192), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v0 + 536) = v5;
    void *v5 = v0;
    v5[1] = sub_100F911D0;
    uint64_t v6 = *(void *)(v0 + 192);
    return sub_100FB0598(v6);
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v8 = (void *)swift_task_alloc();
    *(void *)(v0 + 544) = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_100F91468;
    uint64_t v9 = *(void *)(v0 + 120);
    return sub_100E59F38(v9, 0);
  }
}

uint64_t sub_100F911D0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 136);
  swift_task_dealloc();
  return _swift_task_switch(sub_100F912E0, v1, 0);
}

uint64_t sub_100F912E0()
{
  uint64_t v1 = *(void *)(v0 + 512);
  uint64_t v2 = *(void *)(v0 + 528) + 1;
  sub_100FB893C(*(void *)(v0 + 192), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  if (v2 == v1)
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 544) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_100F91468;
    uint64_t v4 = *(void *)(v0 + 120);
    return sub_100E59F38(v4, 0);
  }
  else
  {
    uint64_t v6 = *(void *)(v0 + 528) + 1;
    *(void *)(v0 + 528) = v6;
    sub_100FB6BB8(*(void *)(v0 + 504)+ ((*(unsigned __int8 *)(v0 + 636) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 636))+ *(void *)(v0 + 520) * v6, *(void *)(v0 + 192), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v7 = (void *)swift_task_alloc();
    *(void *)(v0 + 536) = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_100F911D0;
    uint64_t v8 = *(void *)(v0 + 192);
    return sub_100FB0598(v8);
  }
}

uint64_t sub_100F91468(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 136);
  *(void *)(*(void *)v1 + 552) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100F91580, v2, 0);
}

uint64_t sub_100F91580()
{
  uint64_t v1 = *(void *)(v0 + 456);
  int64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = *(unsigned __int8 *)(v0 + 632);
    uint64_t v4 = *(void *)(v0 + 152);
    uint64_t v41 = *(void *)(v0 + 144);
    uint64_t v42 = *(void *)(v0 + 248);
    uint64_t v44 = (char *)_swiftEmptyArrayStorage;
    sub_1000B7034(0, v2, 0);
    uint64_t v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v40 = *(void *)(v4 + 72);
    uint64_t v6 = (v3 + 32) & ~v3;
    uint64_t v7 = (char *)_swiftEmptyArrayStorage;
    do
    {
      uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 352);
      uint64_t v9 = *(void *)(v0 + 280);
      uint64_t v10 = *(void *)(v0 + 240);
      uint64_t v11 = *(void *)(v0 + 160);
      sub_100FB6BB8(v5, v11, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
      v8(v9, v11 + *(int *)(v41 + 20), v10);
      sub_100FB893C(v11, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B7034(0, *((void *)v7 + 2) + 1, 1);
        uint64_t v7 = v44;
      }
      unint64_t v13 = *((void *)v7 + 2);
      unint64_t v12 = *((void *)v7 + 3);
      if (v13 >= v12 >> 1)
      {
        sub_1000B7034(v12 > 1, v13 + 1, 1);
        uint64_t v7 = v44;
      }
      uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v0 + 376);
      uint64_t v15 = *(void *)(v0 + 280);
      uint64_t v16 = *(void *)(v0 + 240);
      *((void *)v7 + 2) = v13 + 1;
      v14(&v7[v6 + *(void *)(v42 + 72) * v13], v15, v16);
      uint64_t v44 = v7;
      v5 += v40;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v7 = (char *)_swiftEmptyArrayStorage;
  }
  int v17 = *(unsigned __int8 *)(v0 + 642);
  uint64_t v18 = sub_101158244((uint64_t)v7);
  swift_bridgeObjectRelease();
  if (!v17)
  {
    if (*(void *)(v18 + 16))
    {
      uint64_t v19 = *(void *)(v0 + 552);
      uint64_t v20 = *(void *)(v0 + 488);
      uint64_t v21 = *(void *)(v0 + 120);
      unint64_t v22 = v18;
      int v23 = 0;
      uint64_t v24 = 2;
      uint64_t v25 = 0;
LABEL_16:
      uint64_t v26 = sub_1002AD974(v21, v22, v23, v19, (char *)v24, v25, 1);
      if (!v20)
      {
        uint64_t v28 = v26;
        uint64_t v29 = v27;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        *(void *)(v0 + 560) = v28;
        *(void *)(v0 + 568) = v29;
        uint64_t v43 = (uint64_t (*)(char, uint64_t))((char *)&dword_101670A80 + dword_101670A80);
        uint64_t v30 = (void *)swift_task_alloc();
        *(void *)(v0 + 576) = v30;
        void *v30 = v0;
        v30[1] = sub_100F91A5C;
        uint64_t v31 = *(void *)(v0 + 336);
        char v32 = *(unsigned char *)(v0 + 642);
        return v43(v32, v31);
      }
      goto LABEL_22;
    }
LABEL_21:
    uint64_t v36 = *(void *)(v0 + 240);
    uint64_t v37 = *(void *)(v0 + 248);
    type metadata accessor for BeaconSharingCircleTransformer.Error();
    sub_100FB6F70(&qword_101639EF0, (void (*)(uint64_t))type metadata accessor for BeaconSharingCircleTransformer.Error);
    swift_allocError();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 56))(v38, 1, 1, v36);
    swift_willThrow();
LABEL_22:
    uint64_t v34 = *(void *)(v0 + 328);
    uint64_t v35 = *(void *)(v0 + 232);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }
  if (v17 == 2)
  {
    if (*(void *)(v18 + 16))
    {
      uint64_t v19 = *(void *)(v0 + 552);
      uint64_t v20 = *(void *)(v0 + 488);
      uint64_t v21 = *(void *)(v0 + 120);
      unint64_t v22 = v18;
      int v23 = 3;
      uint64_t v24 = 0;
      uint64_t v25 = 2;
      goto LABEL_16;
    }
    goto LABEL_21;
  }
  uint64_t v34 = *(void *)(v0 + 328);
  uint64_t v35 = *(void *)(v0 + 232);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100FB6E64();
  swift_allocError();
  swift_willThrow();
LABEL_23:
  sub_100FB893C(v35, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
  sub_100FB893C(v34, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v39 = *(uint64_t (**)(void))(v0 + 8);
  return v39();
}

uint64_t sub_100F91A5C(__int16 a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 136);
  *(_WORD *)(*(void *)v1 + 640) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100F91B74, v2, 0);
}

uint64_t sub_100F91B74()
{
  uint64_t v40 = v0;
  if (*(_WORD *)(v0 + 640))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_101636888 != -1) {
      swift_once();
    }
    uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 352);
    uint64_t v8 = *(void *)(v0 + 264);
    uint64_t v9 = *(void *)(v0 + 240);
    uint64_t v10 = *(void *)(v0 + 120);
    uint64_t v11 = type metadata accessor for Logger();
    sub_100010324(v11, (uint64_t)qword_10170D788);
    v7(v8, v10, v9);
    unint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    BOOL v14 = os_log_type_enabled(v12, v13);
    uint64_t v15 = *(void *)(v0 + 264);
    uint64_t v16 = *(void *)(v0 + 240);
    uint64_t v17 = *(void *)(v0 + 248);
    if (v14)
    {
      uint64_t v18 = swift_slowAlloc();
      v39[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 141558275;
      *(void *)(v0 + 96) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v18 + 12) = 2081;
      sub_100FB6F70((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 104) = sub_1008FA0F0(v19, v20, v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "BeaconSharingService: cannot create new circle - offerLimitReached. BeaconIdentifier: %{private,mask.hash}s.", (uint8_t *)v18, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v17 + 8))(*(void *)(v0 + 264), *(void *)(v0 + 240));
    }

    uint64_t v35 = *(void *)(v0 + 328);
    uint64_t v36 = *(void *)(v0 + 232);
    type metadata accessor for SPBeaconSharingError(0);
    *(void *)(v0 + 88) = 11;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100FB6F70((unint64_t *)&qword_1016385F8, type metadata accessor for SPBeaconSharingError);
    _BridgedStoredNSError.init(_:userInfo:)();
  }
  else
  {
    if ((*(_WORD *)(v0 + 640) & 0x100) == 0)
    {
      uint64_t v1 = (void *)swift_task_alloc();
      *(void *)(v0 + 584) = v1;
      uint64_t v2 = sub_10000588C((uint64_t *)&unk_101660AD0);
      uint64_t v3 = sub_100062734(&qword_101639ED0, (uint64_t *)&unk_101660AD0);
      *uint64_t v1 = v0;
      v1[1] = sub_100F922F0;
      uint64_t v4 = *(void *)(v0 + 568);
      uint64_t v5 = *(void *)(v0 + 168);
      uint64_t v6 = *(void *)(v0 + 136);
      return Array<A>.asyncFlatMap<A>(_:)(&unk_101665AA8, v6, v4, v5, v2, v3);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_101636888 != -1) {
      swift_once();
    }
    uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 352);
    uint64_t v22 = *(void *)(v0 + 272);
    uint64_t v23 = *(void *)(v0 + 240);
    uint64_t v24 = *(void *)(v0 + 120);
    uint64_t v25 = type metadata accessor for Logger();
    sub_100010324(v25, (uint64_t)qword_10170D788);
    v21(v22, v24, v23);
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.error.getter();
    BOOL v28 = os_log_type_enabled(v26, v27);
    uint64_t v29 = *(void *)(v0 + 272);
    uint64_t v31 = *(void *)(v0 + 240);
    uint64_t v30 = *(void *)(v0 + 248);
    if (v28)
    {
      uint64_t v32 = swift_slowAlloc();
      v39[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v32 = 141558275;
      *(void *)(v0 + 64) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v32 + 12) = 2081;
      sub_100FB6F70((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 72) = sub_1008FA0F0(v33, v34, v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v31);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Total shared item limit reached. cannot create new circle - sharedItemsCountLimitReached. BeaconIdentifier: %{private,mask.hash}s.", (uint8_t *)v32, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v30 + 8))(*(void *)(v0 + 272), *(void *)(v0 + 240));
    }

    uint64_t v35 = *(void *)(v0 + 328);
    uint64_t v36 = *(void *)(v0 + 232);
    type metadata accessor for SPBeaconSharingError(0);
    *(void *)(v0 + 56) = 7;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100FB6F70((unint64_t *)&qword_1016385F8, type metadata accessor for SPBeaconSharingError);
    _BridgedStoredNSError.init(_:userInfo:)();
  }
  swift_willThrow();
  sub_100FB893C(v36, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
  sub_100FB893C(v35, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v37 = *(uint64_t (**)(void))(v0 + 8);
  return v37();
}

uint64_t sub_100F922F0(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 136);
  *(void *)(v3 + 592) = a1;
  *(void *)(v3 + 600) = v1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100F9240C, v4, 0);
}

uint64_t sub_100F9240C()
{
  uint64_t v1 = v0[70];
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v0[22];
    uint64_t v4 = v0[23];
    unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    uint64_t v6 = *(void *)(v3 + 72);
    uint64_t v7 = v0[75];
    swift_bridgeObjectRetain();
    sub_100FB6BB8(v1 + v5, v4, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v8 = sub_100614BC0();
    if (v7)
    {
      uint64_t v9 = v0[41];
      uint64_t v10 = v0[29];
      sub_100FB893C(v0[23], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_100FB893C(v10, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
      sub_100FB893C(v9, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v11 = (uint64_t (*)(void))v0[1];
      return v11();
    }
    uint64_t v13 = v8;
    sub_100FB893C(v0[23], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    sub_100442CF4(v13);
    uint64_t v14 = v2 - 1;
    if (v14)
    {
      uint64_t v15 = v1 + v6 + v5;
      do
      {
        sub_100FB6BB8(v15, v0[23], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        uint64_t v16 = sub_100614BC0();
        sub_100FB893C(v0[23], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        sub_100442CF4(v16);
        v15 += v6;
        --v14;
      }
      while (v14);
    }
    swift_bridgeObjectRelease();
  }
  v0[76] = _swiftEmptyArrayStorage;
  uint64_t v19 = (uint64_t (*)(uint64_t))((char *)&dword_101662A58 + dword_101662A58);
  uint64_t v17 = (void *)swift_task_alloc();
  v0[77] = v17;
  void *v17 = v0;
  v17[1] = sub_100F92750;
  uint64_t v18 = v0[70];
  return v19(v18);
}

uint64_t sub_100F92750(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 136);
  *(void *)(*(void *)v1 + 624) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100F92868, v2, 0);
}

uint64_t sub_100F92868()
{
  uint64_t v1 = *(void *)(v0 + 608);
  uint64_t v2 = *(void *)(v0 + 592);
  uint64_t v3 = *(void *)(v0 + 480);
  uint64_t v4 = *(void *)(v0 + 328);
  uint64_t v5 = *(void *)(v0 + 232);
  uint64_t v6 = *(int8x16_t **)(v0 + 112);
  int8x16_t v10 = *(int8x16_t *)(v0 + 560);
  *(void *)(*(void *)(v0 + 136) + 384) = *(void *)(v0 + 624);
  swift_bridgeObjectRelease();
  uint64_t Use = type metadata accessor for ShareCreateUseCase.ShareCreationData();
  sub_100FB6C70(v4, (uint64_t)v6->i64 + *(int *)(Use + 36), (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  sub_100FB6C70(v5, (uint64_t)v6->i64 + *(int *)(Use + 40), (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
  v6->i64[0] = v2;
  v6->i64[1] = v1;
  v6[1] = vextq_s8(v10, v10, 8uLL);
  v6[2].i64[0] = v3;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_100F92A08()
{
  uint64_t v1 = v0[41];
  sub_100FB893C(v0[29], (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
  sub_100FB893C(v1, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_100F92B3C(uint64_t a1)
{
  v2[4] = a1;
  v2[5] = v1;
  uint64_t v3 = type metadata accessor for MemberPeerTrust();
  v2[6] = v3;
  v2[7] = *(void *)(v3 - 8);
  v2[8] = swift_task_alloc();
  v2[9] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for OwnerPeerTrust();
  v2[10] = v4;
  v2[11] = *(void *)(v4 - 8);
  v2[12] = swift_task_alloc();
  v2[13] = swift_task_alloc();
  v2[14] = swift_task_alloc();
  v2[15] = swift_task_alloc();
  sub_10000588C(&qword_101639E88);
  v2[16] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for OwnerSharingCircle();
  v2[17] = v5;
  v2[18] = *(void *)(v5 - 8);
  v2[19] = swift_task_alloc();
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  v2[22] = swift_task_alloc();
  v2[23] = swift_task_alloc();
  return _swift_task_switch(sub_100F92D50, v1, 0);
}

uint64_t sub_100F92D50()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 40) + 160);
  *(void *)(v0 + 192) = v1;
  return _swift_task_switch(sub_100F92D74, v1, 0);
}

uint64_t sub_100F92D74()
{
  *(void *)(v0 + 200) = *(void *)(*(void *)(v0 + 192) + 128);
  return _swift_task_switch(sub_100F92D9C, 0, 0);
}

uint64_t sub_100F92D9C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 208) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100F92E78;
  uint64_t v2 = *(void *)(v0 + 200);
  return withCheckedContinuation<A>(isolation:function:_:)(v1, 0, 0, 0x696176416E656877, 0xEF2928656C62616CLL, sub_10007561C, v2, (char *)&type metadata for () + 8);
}

uint64_t sub_100F92E78()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100F92F74, 0, 0);
}

uint64_t sub_100F92F74()
{
  return _swift_task_switch(sub_100F92F90, *(void *)(v0 + 192), 0);
}

uint64_t sub_100F92F90()
{
  *(void *)(v0 + 216) = *(void *)(*(void *)(v0 + 192) + 136);
  swift_retain();
  return _swift_task_switch(sub_100F93004, 0, 0);
}

uint64_t sub_100F93004()
{
  uint64_t v1 = v0[27];
  uint64_t v2 = v0[24];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[28] = v3;
  v3[2] = v1;
  v3[3] = sub_100075624;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[29] = v4;
  uint64_t v5 = sub_10000588C(&qword_101639F10);
  *uint64_t v4 = v0;
  v4[1] = sub_100F93120;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10007562C, v3, v5);
}

uint64_t sub_100F93120()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 192);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 240) = *(void *)(v1 + 16);
  return _swift_task_switch(sub_100F9327C, v2, 0);
}

uint64_t sub_100F9327C()
{
  *(void *)(v0 + 248) = *(void *)(*(void *)(v0 + 192) + 136);
  swift_retain();
  return _swift_task_switch(sub_100F932F0, 0, 0);
}

uint64_t sub_100F932F0()
{
  uint64_t v1 = v0[31];
  uint64_t v2 = v0[24];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[32] = v3;
  v3[2] = v1;
  v3[3] = sub_100075638;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[33] = v4;
  uint64_t v5 = sub_10000588C(&qword_101639F18);
  *uint64_t v4 = v0;
  v4[1] = sub_100F9340C;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 3, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10059EE64, v3, v5);
}

uint64_t sub_100F9340C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 40);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 272) = *(void *)(v1 + 24);
  return _swift_task_switch(sub_100F9357C, v2, 0);
}

uint64_t sub_100F9357C()
{
  uint64_t v32 = v0;
  uint64_t v1 = *(void *)(v0[4] + 24);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v4 = v0[17];
    uint64_t v3 = v0[18];
    uint64_t v5 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v6 = *(void **)(v3 + 72);
    swift_bridgeObjectRetain_n();
    while (1)
    {
      uint64_t v8 = v0[23];
      sub_100FB6BB8(v5, v8, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      uint64_t v9 = *(void *)(v8 + *(int *)(v4 + 32));
      uint64_t v10 = *(void *)(v9 + 16);
      if (v10)
      {
        sub_10000588C(&qword_10163BC50);
        uint64_t v11 = *(void *)(type metadata accessor for UUID() - 8);
        uint64_t v12 = *(void *)(v11 + 72);
        unint64_t v13 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
        uint64_t v7 = (void *)swift_allocObject();
        size_t v14 = j__malloc_size(v7);
        if (!v12)
        {
          __break(1u);
LABEL_27:
          __break(1u);
LABEL_28:
          __break(1u);
LABEL_29:
          swift_once();
LABEL_16:
          uint64_t v20 = type metadata accessor for Logger();
          sub_100010324(v20, (uint64_t)qword_10170D788);
          uint64_t v21 = Logger.logObject.getter();
          os_log_type_t v22 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v21, v22))
          {
            uint64_t v23 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v23 = 0;
            _os_log_impl((void *)&_mh_execute_header, v21, v22, "Prevented deletion of owner peer trust still in use.", v23, 2u);
            swift_slowDealloc();
          }

          goto LABEL_19;
        }
        if (v14 - v13 == 0x8000000000000000 && v12 == -1) {
          goto LABEL_28;
        }
        v7[2] = v10;
        v7[3] = 2 * ((uint64_t)(v14 - v13) / v12);
        swift_bridgeObjectRetain_n();
        uint64_t v16 = sub_100711B04(&v31, (char *)v7 + v13, v10, v9);
        sub_100132C20();
        if (v16 != v10) {
          goto LABEL_27;
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v7 = _swiftEmptyArrayStorage;
      }
      sub_100FB893C(v0[23], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      sub_100442D9C((uint64_t)v7);
      v5 += (uint64_t)v6;
      if (!--v2)
      {
        swift_bridgeObjectRelease_n();
        break;
      }
    }
  }
  uint64_t v17 = v0[34];
  uint64_t v18 = swift_bridgeObjectRetain();
  uint64_t v5 = 0;
  uint64_t v6 = sub_100FB5D30(v18, (uint64_t)_swiftEmptyArrayStorage);
  v0[35] = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v19 = *(void *)(v17 + 16);
  swift_bridgeObjectRelease();
  if (v19 != v6[2])
  {
    if (qword_101636888 != -1) {
      goto LABEL_29;
    }
    goto LABEL_16;
  }
LABEL_19:
  uint64_t v24 = v0[30];
  uint64_t v25 = v0[16];
  uint64_t v26 = v0[4];
  os_log_type_t v27 = (void *)swift_task_alloc();
  v27[2] = v26;
  v27[3] = v24;
  v27[4] = v6;
  sub_100EE07C0((void (*)(uint64_t, _UNKNOWN **))sub_100FB6C20, v25);
  if (v5)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    BOOL v28 = (uint64_t (*)(void))v0[1];
    return v28();
  }
  else
  {
    uint64_t v30 = v0[24];
    swift_task_dealloc();
    return _swift_task_switch(sub_100F939E8, v30, 0);
  }
}

uint64_t sub_100F939E8()
{
  *(void *)(v0 + 288) = *(void *)(*(void *)(v0 + 192) + 128);
  return _swift_task_switch(sub_100F93A10, 0, 0);
}

uint64_t sub_100F93A10()
{
  uint64_t v1 = v0[36];
  uint64_t v2 = v0[16];
  uint64_t v3 = swift_task_alloc();
  v0[37] = v3;
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[38] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100F93B08;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v4, 0, 0, 0xD000000000000011, 0x80000001013F27F0, sub_1000757B8, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_100F93B08()
{
  *(void *)(*(void *)v1 + 312) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100F94AB8;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_100F93C24;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100F93C24()
{
  return _swift_task_switch(sub_100F93C40, *(void *)(v0 + 40), 0);
}

uint64_t sub_100F93C40()
{
  uint64_t v85 = v0;
  uint64_t v1 = *(void **)(v0 + 32);
  uint64_t v2 = v1[3];
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    uint64_t v4 = v83[18];
    uint64_t v5 = v2 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v6 = *(void *)(v4 + 72);
    swift_bridgeObjectRetain_n();
    do
    {
      sub_100FB6BB8(v5, v83[22], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      if (qword_101636888 != -1) {
        swift_once();
      }
      uint64_t v7 = v83[21];
      uint64_t v8 = v83[22];
      uint64_t v9 = type metadata accessor for Logger();
      sub_100010324(v9, (uint64_t)qword_10170D788);
      sub_100FB6BB8(v8, v7, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.default.getter();
      BOOL v12 = os_log_type_enabled(v10, v11);
      uint64_t v13 = v83[21];
      if (v12)
      {
        uint64_t v14 = swift_slowAlloc();
        uint64_t v84 = swift_slowAlloc();
        *(_DWORD *)uint64_t v14 = 141558275;
        *(void *)(v14 + 4) = 1752392040;
        *(_WORD *)(v14 + 12) = 2081;
        type metadata accessor for UUID();
        sub_100FB6F70((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v14 + 14) = sub_1008FA0F0(v15, v16, &v84);
        swift_bridgeObjectRelease();
        sub_100FB893C(v13, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "Data update on share creation. Create %{private,mask.hash}s", (uint8_t *)v14, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_100FB893C(v83[21], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      }

      sub_100FB893C(v83[22], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      v5 += v6;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease_n();
    uint64_t v1 = (void *)v83[4];
  }
  uint64_t v17 = v1[2];
  uint64_t v18 = *(void *)(v17 + 16);
  if (v18)
  {
    uint64_t v19 = v83[18];
    uint64_t v20 = v17 + ((*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
    uint64_t v21 = *(void *)(v19 + 72);
    swift_bridgeObjectRetain_n();
    do
    {
      sub_100FB6BB8(v20, v83[20], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      if (qword_101636888 != -1) {
        swift_once();
      }
      uint64_t v22 = v83[19];
      uint64_t v23 = v83[20];
      uint64_t v24 = type metadata accessor for Logger();
      sub_100010324(v24, (uint64_t)qword_10170D788);
      sub_100FB6BB8(v23, v22, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      uint64_t v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.default.getter();
      BOOL v27 = os_log_type_enabled(v25, v26);
      uint64_t v28 = v83[19];
      if (v27)
      {
        uint64_t v29 = swift_slowAlloc();
        uint64_t v84 = swift_slowAlloc();
        *(_DWORD *)uint64_t v29 = 141558275;
        *(void *)(v29 + 4) = 1752392040;
        *(_WORD *)(v29 + 12) = 2081;
        type metadata accessor for UUID();
        sub_100FB6F70((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v29 + 14) = sub_1008FA0F0(v30, v31, &v84);
        swift_bridgeObjectRelease();
        sub_100FB893C(v28, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "Data update on share creation. Delete %{private,mask.hash}s", (uint8_t *)v29, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_100FB893C(v83[19], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      }

      sub_100FB893C(v83[20], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      v20 += v21;
      --v18;
    }
    while (v18);
    swift_bridgeObjectRelease_n();
    uint64_t v1 = (void *)v83[4];
  }
  uint64_t v32 = v1[4];
  uint64_t v33 = *(void *)(v32 + 16);
  if (v33)
  {
    uint64_t v34 = v83[11];
    uint64_t v35 = v32 + ((*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80));
    uint64_t v36 = *(void *)(v34 + 72);
    swift_bridgeObjectRetain_n();
    do
    {
      sub_100FB6BB8(v35, v83[15], (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
      if (qword_101636888 != -1) {
        swift_once();
      }
      uint64_t v37 = v83[14];
      uint64_t v38 = v83[15];
      uint64_t v39 = type metadata accessor for Logger();
      sub_100010324(v39, (uint64_t)qword_10170D788);
      sub_100FB6BB8(v38, v37, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
      uint64_t v40 = Logger.logObject.getter();
      os_log_type_t v41 = static os_log_type_t.default.getter();
      BOOL v42 = os_log_type_enabled(v40, v41);
      uint64_t v43 = v83[14];
      if (v42)
      {
        uint64_t v44 = swift_slowAlloc();
        uint64_t v84 = swift_slowAlloc();
        *(_DWORD *)uint64_t v44 = 141558275;
        *(void *)(v44 + 4) = 1752392040;
        *(_WORD *)(v44 + 12) = 2081;
        type metadata accessor for UUID();
        sub_100FB6F70((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v45 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v44 + 14) = sub_1008FA0F0(v45, v46, &v84);
        swift_bridgeObjectRelease();
        sub_100FB893C(v43, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
        _os_log_impl((void *)&_mh_execute_header, v40, v41, "Data update on peer trust creation. Create %{private,mask.hash}s", (uint8_t *)v44, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_100FB893C(v83[14], (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
      }

      sub_100FB893C(v83[15], (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
      v35 += v36;
      --v33;
    }
    while (v33);
    swift_bridgeObjectRelease_n();
  }
  uint64_t v47 = v83[30];
  uint64_t v48 = *(void *)(v47 + 16);
  if (v48)
  {
    uint64_t v49 = v83[7];
    uint64_t v50 = v47 + ((*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80));
    uint64_t v51 = *(void *)(v49 + 72);
    swift_bridgeObjectRetain();
    unint64_t v52 = "Code";
    do
    {
      sub_100FB6BB8(v50, v83[9], (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
      if (qword_101636888 != -1) {
        swift_once();
      }
      uint64_t v54 = v83[8];
      uint64_t v53 = v83[9];
      uint64_t v55 = type metadata accessor for Logger();
      sub_100010324(v55, (uint64_t)qword_10170D788);
      sub_100FB6BB8(v53, v54, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
      uint64_t v56 = Logger.logObject.getter();
      os_log_type_t v57 = static os_log_type_t.default.getter();
      BOOL v58 = os_log_type_enabled(v56, v57);
      uint64_t v59 = v83[8];
      if (v58)
      {
        uint64_t v60 = v51;
        uint64_t v61 = swift_slowAlloc();
        uint64_t v84 = swift_slowAlloc();
        *(_DWORD *)uint64_t v61 = 141558275;
        *(void *)(v61 + 4) = 1752392040;
        *(_WORD *)(v61 + 12) = 2081;
        type metadata accessor for UUID();
        sub_100FB6F70((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v62 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v61 + 14) = sub_1008FA0F0(v62, v63, &v84);
        swift_bridgeObjectRelease();
        sub_100FB893C(v59, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
        _os_log_impl((void *)&_mh_execute_header, v56, v57, "Orphaned Member Peer Trust to Cleanup %{private,mask.hash}s", (uint8_t *)v61, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v51 = v60;
        unint64_t v52 = "Code";
        swift_slowDealloc();
      }
      else
      {
        sub_100FB893C(v83[8], (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
      }

      sub_100FB893C(v83[9], (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
      v50 += v51;
      --v48;
    }
    while (v48);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v52 = "Code";
  }
  uint64_t v64 = v83[35];
  uint64_t v65 = *(void *)(v64 + 16);
  if (v65)
  {
    uint64_t v66 = v83[11];
    uint64_t v67 = v64 + ((*(unsigned __int8 *)(v66 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80));
    uint64_t v68 = *(void *)(v66 + 72);
    swift_bridgeObjectRetain();
    int v82 = *((void *)v52 + 77);
    do
    {
      sub_100FB6BB8(v67, v83[13], (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
      if (qword_101636888 != -1) {
        swift_once();
      }
      uint64_t v70 = v83[12];
      uint64_t v69 = v83[13];
      uint64_t v71 = type metadata accessor for Logger();
      sub_100010324(v71, (uint64_t)qword_10170D788);
      sub_100FB6BB8(v69, v70, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
      uint64_t v72 = Logger.logObject.getter();
      os_log_type_t v73 = static os_log_type_t.default.getter();
      BOOL v74 = os_log_type_enabled(v72, v73);
      uint64_t v75 = v83[12];
      if (v74)
      {
        uint64_t v76 = v68;
        uint64_t v77 = swift_slowAlloc();
        uint64_t v84 = swift_slowAlloc();
        *(_DWORD *)uint64_t v77 = v82;
        *(void *)(v77 + 4) = 1752392040;
        *(_WORD *)(v77 + 12) = 2081;
        type metadata accessor for UUID();
        sub_100FB6F70((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v78 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v77 + 14) = sub_1008FA0F0(v78, v79, &v84);
        swift_bridgeObjectRelease();
        sub_100FB893C(v75, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
        _os_log_impl((void *)&_mh_execute_header, v72, v73, "Orphaned Owner Peer Trust to Cleanup %{private,mask.hash}s", (uint8_t *)v77, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v68 = v76;
        swift_slowDealloc();
      }
      else
      {
        sub_100FB893C(v83[12], (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
      }

      sub_100FB893C(v83[13], (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
      v67 += v68;
      --v65;
    }
    while (v65);
    swift_bridgeObjectRelease();
  }
  sub_10001DAB4(v83[16], &qword_101639E88);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v80 = (uint64_t (*)(void))v83[1];
  return v80();
}

uint64_t sub_100F94AB8()
{
  uint64_t v1 = *(void *)(v0 + 192);
  swift_task_dealloc();
  return _swift_task_switch(sub_100F94B24, v1, 0);
}

uint64_t sub_100F94B24()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100F94B9C, v1, 0);
}

uint64_t sub_100F94B9C()
{
  sub_10001DAB4(*(void *)(v0 + 128), &qword_101639E88);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100F94CB0(uint64_t a1)
{
  v2[4] = a1;
  v2[5] = v1;
  sub_10000588C(&qword_101639EF8);
  v2[6] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for SharingCircleSecretValue();
  v2[7] = v3;
  v2[8] = *(void *)(v3 - 8);
  v2[9] = swift_task_alloc();
  v2[10] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for SharingCircleSecret();
  v2[11] = v4;
  v2[12] = *(void *)(v4 - 8);
  v2[13] = swift_task_alloc();
  v2[14] = swift_task_alloc();
  v2[15] = swift_task_alloc();
  v2[16] = swift_task_alloc();
  sub_10000588C(&qword_101639E88);
  v2[17] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for OwnerSharingCircle();
  v2[18] = v5;
  v2[19] = *(void *)(v5 - 8);
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for OwnerPeerTrust();
  v2[22] = v6;
  v2[23] = *(void *)(v6 - 8);
  v2[24] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for UUID();
  v2[25] = v7;
  v2[26] = *(void *)(v7 - 8);
  v2[27] = swift_task_alloc();
  v2[28] = swift_task_alloc();
  v2[29] = swift_task_alloc();
  v2[30] = swift_task_alloc();
  return _swift_task_switch(sub_100F94FB0, v1, 0);
}

uint64_t sub_100F94FB0()
{
  uint64_t v1 = *(void *)(v0[4] + 32);
  int64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    uint64_t v4 = v0[26];
    uint64_t v5 = v0[23];
    uint64_t v18 = v0[22];
    uint64_t v19 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_1000B7034(0, v2, 0);
    uint64_t v6 = v1 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v17 = *(void *)(v5 + 72);
    uint64_t v3 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v7 = v0[30];
      uint64_t v9 = v0[24];
      uint64_t v8 = v0[25];
      sub_100FB6BB8(v6, v9, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v7, v9 + *(int *)(v18 + 20), v8);
      sub_100FB893C(v9, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B7034(0, v3[2] + 1, 1);
        uint64_t v3 = v19;
      }
      unint64_t v11 = v3[2];
      unint64_t v10 = v3[3];
      if (v11 >= v10 >> 1)
      {
        sub_1000B7034(v10 > 1, v11 + 1, 1);
        uint64_t v3 = v19;
      }
      uint64_t v12 = v0[30];
      uint64_t v13 = v0[25];
      v3[2] = v11 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))((unint64_t)v3+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v11, v12, v13);
      uint64_t v19 = v3;
      v6 += v17;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  uint64_t v14 = v0[5];
  v0[31] = sub_101158244((uint64_t)v3);
  swift_bridgeObjectRelease();
  uint64_t v15 = *(void *)(v14 + 160);
  v0[32] = v15;
  return _swift_task_switch(sub_100F951C8, v15, 0);
}

uint64_t sub_100F951C8()
{
  *(void *)(v0 + 264) = *(void *)(*(void *)(v0 + 256) + 136);
  swift_retain();
  return _swift_task_switch(sub_100F9523C, 0, 0);
}

uint64_t sub_100F9523C()
{
  uint64_t v2 = v0[32];
  uint64_t v1 = v0[33];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[34] = v3;
  v3[2] = v1;
  v3[3] = sub_10008DDF8;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[35] = v4;
  uint64_t v5 = sub_10000588C(&qword_101639F18);
  *uint64_t v4 = v0;
  v4[1] = sub_100F95354;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100075640, v3, v5);
}

uint64_t sub_100F95354()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 40);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 288) = *(void *)(v1 + 16);
  return _swift_task_switch(sub_100F954C4, v2, 0);
}

uint64_t sub_100F954C4()
{
  uint64_t v1 = v0[4];
  v0[37] = sub_100FB6204(v0[36], v0[31]);
  v0[38] = 0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(v1 + 24);
  int64_t v3 = *(void *)(v2 + 16);
  uint64_t v4 = _swiftEmptyArrayStorage;
  if (v3)
  {
    uint64_t v5 = v0[26];
    uint64_t v6 = v0[19];
    uint64_t v18 = v0[18];
    uint64_t v19 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    sub_1000B7034(0, v3, 0);
    uint64_t v7 = v2 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    uint64_t v17 = *(void *)(v6 + 72);
    uint64_t v4 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v8 = v0[29];
      uint64_t v9 = v0[25];
      uint64_t v10 = v0[21];
      sub_100FB6BB8(v7, v10, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v8, v10 + *(int *)(v18 + 20), v9);
      sub_100FB893C(v10, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B7034(0, v4[2] + 1, 1);
        uint64_t v4 = v19;
      }
      unint64_t v12 = v4[2];
      unint64_t v11 = v4[3];
      if (v12 >= v11 >> 1)
      {
        sub_1000B7034(v11 > 1, v12 + 1, 1);
        uint64_t v4 = v19;
      }
      uint64_t v13 = v0[29];
      uint64_t v14 = v0[25];
      v4[2] = v12 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 32))((unint64_t)v4+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v12, v13, v14);
      uint64_t v19 = v4;
      v7 += v17;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
  }
  uint64_t v15 = v0[32];
  v0[39] = sub_101158244((uint64_t)v4);
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100F95708, v15, 0);
}

uint64_t sub_100F95708()
{
  *(void *)(v0 + 320) = *(void *)(*(void *)(v0 + 256) + 136);
  swift_retain();
  return _swift_task_switch(sub_100F9577C, 0, 0);
}

uint64_t sub_100F9577C()
{
  uint64_t v1 = v0[40];
  uint64_t v2 = v0[32];
  int64_t v3 = (void *)swift_task_alloc();
  v0[41] = v3;
  v3[2] = v1;
  v3[3] = sub_100075250;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[42] = v4;
  uint64_t v5 = sub_10000588C(&qword_10163B8C0);
  *uint64_t v4 = v0;
  v4[1] = sub_100F95898;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 3, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100075258, v3, v5);
}

uint64_t sub_100F95898()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 40);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 344) = *(void *)(v1 + 24);
  return _swift_task_switch(sub_100F95A08, v2, 0);
}

uint64_t sub_100F95A08()
{
  uint64_t v1 = sub_100FB5900(v0[43], v0[39]);
  v0[44] = v1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v2 = (void *)swift_task_alloc();
  v0[45] = v2;
  uint64_t v3 = sub_10000588C((uint64_t *)&unk_101660AD0);
  uint64_t v4 = sub_100062734(&qword_101639ED0, (uint64_t *)&unk_101660AD0);
  *uint64_t v2 = v0;
  v2[1] = sub_100F95B38;
  uint64_t v5 = v0[18];
  uint64_t v6 = v0[5];
  return Array<A>.asyncFlatMap<A>(_:)(&unk_101665A50, v6, v1, v5, v3, v4);
}

uint64_t sub_100F95B38(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 40);
  *(void *)(v3 + 368) = a1;
  *(void *)(v3 + 376) = v1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100F95C50, v4, 0);
}

uint64_t sub_100F95C50()
{
  uint64_t v1 = *(void **)(v0 + 32);
  uint64_t v2 = v1[2];
  int64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    uint64_t v4 = *(void *)(v0 + 208);
    uint64_t v5 = *(void *)(v0 + 152);
    uint64_t v96 = *(void *)(v0 + 160);
    uint64_t v6 = *(int **)(v0 + 144);
    swift_bridgeObjectRetain();
    sub_1000B721C(0, v3, 0);
    unint64_t v94 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    uint64_t v7 = v2 + v94;
    uint64_t v92 = *(void *)(v5 + 72);
    uint64_t v8 = (void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    do
    {
      uint64_t v9 = *(void *)(v0 + 200);
      uint64_t v10 = *(char **)(v0 + 160);
      uint64_t v11 = *(void *)(v0 + 168);
      sub_100FB6BB8(v7, v11, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      unint64_t v12 = *v8;
      (*v8)(&v10[v6[5]], v11 + v6[5], v9);
      v12(&v10[v6[6]], v11 + v6[6], v9);
      char v13 = *(unsigned char *)(v11 + v6[7]);
      uint64_t v14 = *(void *)(v11 + v6[8]);
      char v15 = *(unsigned char *)(v11 + v6[9]);
      *(void *)uint64_t v10 = 0;
      *(void *)(v96 + 8) = 0xC000000000000000;
      v10[v6[7]] = v13;
      *(void *)&v10[v6[8]] = v14;
      v10[v6[9]] = v15;
      swift_bridgeObjectRetain();
      sub_100FB893C(v11, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_1000B721C(0, _swiftEmptyArrayStorage[2] + 1, 1);
      }
      unint64_t v17 = _swiftEmptyArrayStorage[2];
      unint64_t v16 = _swiftEmptyArrayStorage[3];
      if (v17 >= v16 >> 1) {
        sub_1000B721C(v16 > 1, v17 + 1, 1);
      }
      uint64_t v18 = *(void *)(v0 + 160);
      _swiftEmptyArrayStorage[2] = v17 + 1;
      sub_100FB6C70(v18, (uint64_t)_swiftEmptyArrayStorage + v94 + v17 * v92, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      v7 += v92;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    uint64_t v1 = *(void **)(v0 + 32);
  }
  int64_t v19 = *(void *)(*v1 + 16);
  if (v19)
  {
    uint64_t v20 = *(void *)(v0 + 208);
    uint64_t v21 = *(void *)(v0 + 96);
    uint64_t v88 = *(void *)(v0 + 104);
    uint64_t v22 = *(int **)(v0 + 88);
    uint64_t v23 = *(void *)(v0 + 64);
    uint64_t v82 = *(void *)(v0 + 80);
    uint64_t v83 = *(void *)(v0 + 72);
    uint64_t v24 = *v1;
    swift_bridgeObjectRetain();
    sub_1000B732C(0, v19, 0);
    unint64_t v86 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
    uint64_t v25 = v24 + v86;
    os_log_type_t v26 = v22;
    char v97 = (void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16);
    uint64_t v85 = *(void *)(v21 + 72);
    uint64_t v84 = (void (**)(uint64_t, uint64_t))(v20 + 8);
    uint64_t v27 = *(void *)(v0 + 376);
    uint64_t v87 = v22;
    do
    {
      uint64_t v29 = *(void *)(v0 + 216);
      uint64_t v28 = *(void *)(v0 + 224);
      uint64_t v30 = *(void *)(v0 + 200);
      uint64_t v31 = *(void *)(v0 + 120);
      uint64_t v89 = *(_OWORD **)(v0 + 48);
      uint64_t v93 = v25;
      sub_100FB6BB8(v25, v31, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
      uint64_t v32 = v31 + v26[5];
      uint64_t v33 = v26;
      uint64_t v34 = *v97;
      (*v97)(v28, v32, v30);
      uint64_t v90 = v34;
      v34(v29, v31 + v33[6], v30);
      uint64_t v35 = v33;
      uint64_t v36 = (uint64_t *)(v31 + v33[8]);
      uint64_t v37 = *v36;
      unint64_t v38 = v36[1];
      uint64_t v39 = (uint64_t *)(v31 + v33[7]);
      uint64_t v40 = *v39;
      os_log_type_t v41 = (void *)v39[1];
      sub_1000361E0(v37, v38);
      swift_bridgeObjectRetain();
      sub_10131CEC8(v37, v38, v40, v41, v89);
      if (v27)
      {
        swift_errorRelease();
        uint64_t v42 = 1;
      }
      else
      {
        uint64_t v42 = 0;
      }
      uint64_t v44 = *(void *)(v0 + 112);
      uint64_t v43 = *(void *)(v0 + 120);
      uint64_t v46 = *(void *)(v0 + 48);
      uint64_t v45 = *(void *)(v0 + 56);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56))(v46, v42, 1, v45);
      sub_100FB6BB8(v43, v44, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
      int v47 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v46, 1, v45);
      uint64_t v48 = *(void *)(v0 + 112);
      uint64_t v49 = *(uint64_t **)(v0 + 80);
      int64_t v95 = v19;
      if (v47 == 1)
      {
        uint64_t v50 = *(void *)(v0 + 48);
        uint64_t v51 = (uint64_t *)(v48 + v35[8]);
        uint64_t v52 = *v51;
        unint64_t v53 = v51[1];
        sub_1000361E0(*v51, v53);
        sub_100FB893C(v48, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
        *uint64_t v49 = v52;
        *(void *)(v82 + 8) = v53;
        swift_storeEnumTagMultiPayload();
        sub_10001DAB4(v50, &qword_101639EF8);
      }
      else
      {
        uint64_t v54 = *(void *)(v0 + 48);
        sub_100FB893C(v48, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
        sub_100FB6C70(v54, (uint64_t)v49, (uint64_t (*)(void))type metadata accessor for SharingCircleSecretValue);
      }
      uint64_t v56 = *(void *)(v0 + 216);
      uint64_t v55 = *(void *)(v0 + 224);
      uint64_t v57 = *(void *)(v0 + 200);
      BOOL v58 = *(void **)(v0 + 104);
      uint64_t v60 = *(void *)(v0 + 72);
      uint64_t v59 = *(void *)(v0 + 80);
      *BOOL v58 = 0;
      *(void *)(v88 + 8) = 0xC000000000000000;
      v90((uint64_t)v58 + v35[5], v55, v57);
      v90((uint64_t)v58 + v35[6], v56, v57);
      uint64_t v61 = sub_10131C9DC();
      uint64_t v62 = (void *)((char *)v58 + v35[8]);
      *uint64_t v62 = v61;
      v62[1] = v63;
      sub_100FB6BB8(v59, v60, (uint64_t (*)(void))type metadata accessor for SharingCircleSecretValue);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          sub_10001CFB8(**(void **)(v0 + 72), *(void *)(v83 + 8));
          unint64_t v64 = 0xD000000000000012;
          uint64_t v65 = "ude";
          goto LABEL_24;
        case 2u:
          sub_10001CFB8(**(void **)(v0 + 72), *(void *)(v83 + 8));
          unint64_t v64 = 0xD000000000000011;
          uint64_t v65 = "circleSharedSecret";
          goto LABEL_24;
        case 3u:
          sub_10001CFB8(**(void **)(v0 + 72), *(void *)(v83 + 8));
          uint64_t v66 = "circleWildRootKey";
          goto LABEL_26;
        case 4u:
          sub_100FB893C(*(void *)(v0 + 72), (uint64_t (*)(void))type metadata accessor for SharingCircleSecretValue);
          unint64_t v91 = 0xE90000000000006ELL;
          unint64_t v64 = 0x656B6F546E696F6ALL;
          break;
        case 5u:
          sub_100FB893C(*(void *)(v0 + 72), (uint64_t (*)(void))type metadata accessor for SharingCircleSecretValue);
          unint64_t v64 = 0xD000000000000013;
          uint64_t v65 = "nearOwnerLocationKey";
LABEL_24:
          unint64_t v91 = (unint64_t)v65 | 0x8000000000000000;
          break;
        case 6u:
          sub_10001CFB8(**(void **)(v0 + 72), *(void *)(v83 + 8));
          uint64_t v66 = "delegatedSharingKey";
LABEL_26:
          unint64_t v91 = (unint64_t)v66 | 0x8000000000000000;
          unint64_t v64 = 0xD000000000000014;
          break;
        default:
          sub_10001CFB8(**(void **)(v0 + 72), *(void *)(v83 + 8));
          unint64_t v91 = 0xE700000000000000;
          unint64_t v64 = 0x6E776F6E6B6E75;
          break;
      }
      uint64_t v68 = *(void *)(v0 + 216);
      uint64_t v67 = *(void *)(v0 + 224);
      uint64_t v69 = *(void *)(v0 + 200);
      uint64_t v71 = *(void *)(v0 + 120);
      uint64_t v70 = *(void *)(v0 + 128);
      uint64_t v72 = *(void *)(v0 + 104);
      sub_100FB893C(*(void *)(v0 + 80), (uint64_t (*)(void))type metadata accessor for SharingCircleSecretValue);
      os_log_type_t v73 = *v84;
      (*v84)(v68, v69);
      v73(v67, v69);
      os_log_type_t v26 = v87;
      BOOL v74 = (unint64_t *)(v72 + v87[7]);
      *BOOL v74 = v64;
      v74[1] = v91;
      sub_100FB6C70(v72, v70, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
      sub_100FB893C(v71, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_1000B732C(0, _swiftEmptyArrayStorage[2] + 1, 1);
      }
      unint64_t v76 = _swiftEmptyArrayStorage[2];
      unint64_t v75 = _swiftEmptyArrayStorage[3];
      if (v76 >= v75 >> 1) {
        sub_1000B732C(v75 > 1, v76 + 1, 1);
      }
      uint64_t v77 = *(void *)(v0 + 128);
      _swiftEmptyArrayStorage[2] = v76 + 1;
      sub_100FB6C70(v77, (uint64_t)_swiftEmptyArrayStorage + v86 + v76 * v85, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
      uint64_t v27 = 0;
      uint64_t v25 = v93 + v85;
      int64_t v19 = v95 - 1;
    }
    while (v95 != 1);
    swift_bridgeObjectRelease();
    uint64_t v78 = 0;
  }
  else
  {
    uint64_t v78 = *(void *)(v0 + 376);
  }
  sub_100EDF588((uint64_t)_swiftEmptyArrayStorage, (uint64_t)_swiftEmptyArrayStorage, *(void *)(v0 + 296), *(void *)(v0 + 352), *(void *)(v0 + 368), *(void *)(v0 + 136));
  if (v78)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v79 = *(uint64_t (**)(void))(v0 + 8);
    return v79();
  }
  else
  {
    uint64_t v81 = *(void *)(v0 + 256);
    return _swift_task_switch(sub_100F96614, v81, 0);
  }
}

uint64_t sub_100F96614()
{
  *(void *)(v0 + 384) = *(void *)(*(void *)(v0 + 256) + 128);
  return _swift_task_switch(sub_100F9663C, 0, 0);
}

uint64_t sub_100F9663C()
{
  uint64_t v1 = v0[48];
  uint64_t v2 = v0[17];
  uint64_t v3 = swift_task_alloc();
  v0[49] = v3;
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[50] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100F96734;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v4, 0, 0, 0xD000000000000011, 0x80000001013F27F0, sub_100074FFC, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_100F96734()
{
  *(void *)(*(void *)v1 + 408) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100F969A8;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_100F96850;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100F96850()
{
  return _swift_task_switch(sub_100F9686C, *(void *)(v0 + 40), 0);
}

uint64_t sub_100F9686C()
{
  sub_10001DAB4(*(void *)(v0 + 136), &qword_101639E88);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100F969A8()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_task_dealloc();
  return _swift_task_switch(sub_100F96A14, v1, 0);
}

uint64_t sub_100F96A14()
{
  sub_10001DAB4(*(void *)(v0 + 136), &qword_101639E88);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100F96B4C(uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  uint64_t v3 = type metadata accessor for OwnerPeerTrust();
  v2[7] = v3;
  v2[8] = *(void *)(v3 - 8);
  v2[9] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UUID();
  v2[10] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[11] = v5;
  v2[12] = *(void *)(v5 + 64);
  v2[13] = swift_task_alloc();
  v2[14] = swift_task_alloc();
  v2[15] = sub_10000588C((uint64_t *)&unk_101638D10);
  v2[16] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for OwnerSharingCircle();
  v2[17] = v6;
  v2[18] = *(void *)(v6 - 8);
  v2[19] = swift_task_alloc();
  return _swift_task_switch(sub_100F96D10, v1, 0);
}

uint64_t sub_100F96D10()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 48) + 160);
  *(void *)(v0 + 160) = v1;
  return _swift_task_switch(sub_100F96D34, v1, 0);
}

uint64_t sub_100F96D34()
{
  uint64_t v1 = v0[20];
  uint64_t v2 = v0[14];
  uint64_t v3 = v0[11];
  uint64_t v4 = v0[10];
  uint64_t v5 = v0[5];
  v0[21] = *(void *)(v1 + 136);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[22] = v6;
  v0[23] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v2, v5, v4);
  unint64_t v7 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v8 = swift_allocObject();
  v0[24] = v8;
  *(void *)(v8 + 16) = v1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v8 + v7, v2, v4);
  swift_retain();
  return _swift_task_switch(sub_100F96E38, 0, 0);
}

uint64_t sub_100F96E38()
{
  uint64_t v1 = v0[24];
  uint64_t v2 = v0[21];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[25] = v3;
  v3[2] = v2;
  v3[3] = sub_100FB69AC;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[26] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100F96F40;
  uint64_t v6 = v0[15];
  uint64_t v5 = v0[16];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100090D14, v3, v6);
}

uint64_t sub_100F96F40()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_100F97090, v1, 0);
}

uint64_t sub_100F97090()
{
  uint64_t v27 = v0;
  uint64_t v1 = v0[16];
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(v0[18] + 48))(v1, 1, v0[17]) == 1)
  {
    sub_10001DAB4(v1, (uint64_t *)&unk_101638D10);
    if (qword_101636888 != -1) {
      swift_once();
    }
    uint64_t v2 = (void (*)(uint64_t, uint64_t, uint64_t))v0[22];
    uint64_t v3 = v0[13];
    uint64_t v4 = v0[10];
    uint64_t v5 = v0[5];
    uint64_t v6 = type metadata accessor for Logger();
    sub_100010324(v6, (uint64_t)qword_10170D788);
    v2(v3, v5, v4);
    unint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    BOOL v9 = os_log_type_enabled(v7, v8);
    uint64_t v10 = v0[13];
    uint64_t v11 = v0[10];
    uint64_t v12 = v0[11];
    if (v9)
    {
      uint64_t v13 = swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 141558275;
      v0[2] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v13 + 12) = 2081;
      sub_100FB6F70((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[3] = sub_1008FA0F0(v14, v15, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Failure on share re-create, share for %{private,mask.hash}s doesn't exist.", (uint8_t *)v13, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v12 + 8))(v0[13], v0[10]);
    }

    sub_100074FA8();
    swift_allocError();
    *uint64_t v23 = 4;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v24 = (uint64_t (*)(void))v0[1];
    return v24();
  }
  else
  {
    sub_100FB6C70(v1, v0[19], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v16 = swift_bridgeObjectRetain();
    uint64_t v17 = sub_10070FB1C(v16);
    swift_bridgeObjectRelease();
    v0[4] = v17;
    uint64_t v18 = (void *)swift_task_alloc();
    v0[27] = v18;
    uint64_t v19 = sub_10000588C((uint64_t *)&unk_1016636E0);
    uint64_t v20 = sub_100062734((unint64_t *)&qword_10163FBF0, (uint64_t *)&unk_1016636E0);
    *uint64_t v18 = v0;
    v18[1] = sub_100F974C4;
    uint64_t v21 = v0[6];
    uint64_t v22 = v0[7];
    return Sequence.asyncCompactMap<A>(_:)(&unk_101665A20, v21, v19, v22, v20);
  }
}

uint64_t sub_100F974C4(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 48);
  *(void *)(*(void *)v1 + 224) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100F97600, v2, 0);
}

uint64_t sub_100F97600()
{
  uint64_t v1 = v0[28];
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v0[8];
    uint64_t v4 = self;
    uint64_t v5 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v6 = *(void *)(v3 + 72);
    swift_bridgeObjectRetain();
    do
    {
      uint64_t v7 = v0[9];
      sub_100FB6BB8(v5, v7, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
      swift_bridgeObjectRetain();
      NSString v8 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v9 = [v4 handleWithString:v8];

      sub_100FB893C(v7, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
      if (v9)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
        if (*(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v5 += v6;
      --v2;
    }
    while (v2);
    swift_bridgeObjectRelease();
  }
  uint64_t v10 = v0[19];
  uint64_t v11 = v0[17];
  swift_bridgeObjectRelease();
  uint64_t v12 = v10 + *(int *)(v11 + 24);
  uint64_t v13 = sub_101158F8C((unint64_t)_swiftEmptyArrayStorage);
  v0[29] = v13;
  swift_bridgeObjectRelease();
  char v14 = *(unsigned char *)(v10 + *(int *)(v11 + 28));
  unint64_t v15 = (void *)swift_task_alloc();
  v0[30] = v15;
  void *v15 = v0;
  v15[1] = sub_100F97840;
  return sub_100F8B5BC(v12, v13, v14);
}

uint64_t sub_100F97840()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 248) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 48);
  swift_bridgeObjectRelease();
  if (v0) {
    uint64_t v4 = sub_100F97A48;
  }
  else {
    uint64_t v4 = sub_100F97988;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100F97988()
{
  sub_100FB893C(*(void *)(v0 + 152), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100F97A48()
{
  sub_100FB893C(*(void *)(v0 + 152), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100F97B04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for UUID();
  v3[5] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[6] = v5;
  v3[7] = *(void *)(v5 + 64);
  v3[8] = swift_task_alloc();
  return _swift_task_switch(sub_100F97BD0, 0, 0);
}

uint64_t sub_100F97BD0()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 32) + 160);
  *(void *)(v0 + 72) = v1;
  return _swift_task_switch(sub_100F97BF4, v1, 0);
}

uint64_t sub_100F97BF4()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[9];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[5];
  uint64_t v5 = v0[3];
  v0[10] = *(void *)(v2 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v5, v4);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = swift_allocObject();
  v0[11] = v7;
  *(void *)(v7 + 16) = v2;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v7 + v6, v1, v4);
  swift_retain();
  return _swift_task_switch(sub_100F97CE8, 0, 0);
}

uint64_t sub_100F97CE8()
{
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[12] = v3;
  v3[2] = v2;
  v3[3] = sub_100FB6A88;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[13] = v4;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_1016607D0);
  *uint64_t v4 = v0;
  v4[1] = sub_100B825BC;
  uint64_t v6 = v0[2];
  return withCheckedContinuation<A>(isolation:function:_:)(v6, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100090E94, v3, v5);
}

uint64_t sub_100F97DFC(uint64_t a1, char a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v9 + 848) = v8;
  *(void *)(v9 + 840) = v76;
  *(void *)(v9 + 832) = v75;
  *(_OWORD *)(v9 + 816) = v74;
  type metadata accessor for CircleTrustAckEnvelopeV1(0);
  *(void *)(v9 + 856) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  *(void *)(v9 + 864) = v10;
  *(void *)(v9 + 872) = *(void *)(v10 - 8);
  *(void *)(v9 + 880) = swift_task_alloc();
  sub_10000588C(&qword_101639E88);
  *(void *)(v9 + 888) = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_101653D50);
  *(void *)(v9 + 896) = swift_task_alloc();
  *(void *)(v9 + 904) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Date();
  *(void *)(v9 + 912) = v11;
  *(void *)(v9 + 920) = *(void *)(v11 - 8);
  *(void *)(v9 + 928) = swift_task_alloc();
  uint64_t v12 = sub_10000588C(&qword_10163BA20);
  *(void *)(v9 + 936) = v12;
  *(void *)(v9 + 944) = *(void *)(v12 - 8);
  *(void *)(v9 + 952) = swift_task_alloc();
  *(void *)(v9 + 960) = swift_task_alloc();
  *(void *)(v9 + 968) = swift_task_alloc();
  *(void *)(v9 + 976) = swift_task_alloc();
  uint64_t v54 = type metadata accessor for UUID();
  *(void *)(v9 + 984) = v54;
  uint64_t v13 = *(void *)(v54 - 8);
  uint64_t v14 = v13;
  *(void *)(v9 + 992) = v13;
  *(void *)(v9 + 1000) = *(void *)(v13 + 64);
  *(void *)(v9 + 1008) = swift_task_alloc();
  *(void *)(v9 + 1016) = swift_task_alloc();
  *(void *)(v9 + 1024) = swift_task_alloc();
  *(void *)(v9 + 1032) = swift_task_alloc();
  *(void *)(v9 + 1040) = swift_task_alloc();
  *(void *)(v9 + 1048) = swift_task_alloc();
  *(void *)(v9 + 1056) = swift_task_alloc();
  *(void *)(v9 + 1064) = swift_task_alloc();
  *(void *)(v9 + 1072) = swift_task_alloc();
  uint64_t v15 = sub_10000588C(&qword_10163A820);
  *(void *)(v9 + 1080) = v15;
  *(void *)(v9 + 1088) = *(void *)(v15 - 8);
  *(void *)(v9 + 1096) = swift_task_alloc();
  *(void *)(v9 + 1104) = swift_task_alloc();
  *(void *)(v9 + 1112) = swift_task_alloc();
  *(void *)(v9 + 1120) = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_10163B890);
  *(void *)(v9 + 1128) = swift_task_alloc();
  *(void *)(v9 + 1136) = swift_task_alloc();
  *(void *)(v9 + 1144) = swift_task_alloc();
  *(void *)(v9 + 1152) = swift_task_alloc();
  uint64_t v16 = type metadata accessor for SharedBeaconRecord(0);
  *(void *)(v9 + 1160) = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  *(void *)(v9 + 1168) = v17;
  *(void *)(v9 + 1176) = *(void *)(v17 + 64);
  *(void *)(v9 + 1184) = swift_task_alloc();
  *(void *)(v9 + 1192) = swift_task_alloc();
  *(void *)(v9 + 1200) = swift_task_alloc();
  *(void *)(v9 + 1208) = swift_task_alloc();
  *(void *)(v9 + 1216) = swift_task_alloc();
  uint64_t v18 = type metadata accessor for MemberPeerTrust();
  *(void *)(v9 + 1224) = v18;
  *(void *)(v9 + 1232) = *(void *)(v18 - 8);
  *(void *)(v9 + 1240) = swift_task_alloc();
  *(void *)(v9 + 1248) = swift_task_alloc();
  *(void *)(v9 + 1256) = swift_task_alloc();
  *(void *)(v9 + 1264) = swift_task_alloc();
  *(void *)(v9 + 1272) = swift_task_alloc();
  *(void *)(v9 + 1280) = swift_task_alloc();
  *(void *)(v9 + 1288) = swift_task_alloc();
  *(void *)(v9 + 1296) = swift_task_alloc();
  uint64_t v19 = type metadata accessor for MemberSharingCircle();
  *(void *)(v9 + 1304) = v19;
  uint64_t v20 = *(void *)(v19 - 8);
  *(void *)(v9 + 1312) = v20;
  *(void *)(v9 + 1320) = *(void *)(v20 + 64);
  *(void *)(v9 + 1328) = swift_task_alloc();
  *(void *)(v9 + 1336) = swift_task_alloc();
  *(void *)(v9 + 1344) = swift_task_alloc();
  *(void *)(v9 + 1352) = swift_task_alloc();
  *(void *)(v9 + 1360) = swift_task_alloc();
  *(void *)(v9 + 1368) = swift_task_alloc();
  uint64_t v21 = type metadata accessor for Logger();
  *(void *)(v9 + 1376) = v21;
  *(void *)(v9 + 1384) = *(void *)(v21 - 8);
  *(void *)(v9 + 1392) = swift_task_alloc();
  *(void *)(v9 + 1400) = swift_task_alloc();
  *(void *)(v9 + 1408) = swift_task_alloc();
  *(void *)(v9 + 1416) = swift_task_alloc();
  *(void *)(v9 + 1424) = swift_task_alloc();
  *(void *)(v9 + 1432) = swift_task_alloc();
  *(void *)(v9 + 1440) = swift_task_alloc();
  *(void *)(v9 + 1448) = swift_task_alloc();
  *(void *)(v9 + 1456) = swift_task_alloc();
  *(void *)(v9 + 1464) = swift_task_alloc();
  *(void *)(v9 + 1472) = swift_task_alloc();
  *(void *)(v9 + 1480) = swift_task_alloc();
  *(void *)(v9 + 1488) = swift_task_alloc();
  *(void *)(v9 + 1496) = swift_task_alloc();
  uint64_t v48 = (int *)sub_10000588C(&qword_10163B938);
  *(void *)(v9 + 1504) = v48;
  *(void *)(v9 + 1512) = swift_task_alloc();
  *(void *)(v9 + 1520) = swift_task_alloc();
  *(void *)(v9 + 1528) = swift_task_alloc();
  *(void *)(v9 + 1536) = swift_task_alloc();
  *(void *)(v9 + 1544) = swift_task_alloc();
  *(void *)(v9 + 1552) = swift_task_alloc();
  *(void *)(v9 + 1560) = swift_task_alloc();
  *(void *)(v9 + 1568) = swift_task_alloc();
  *(void *)(v9 + 1576) = swift_task_alloc();
  *(void *)(v9 + 1584) = swift_task_alloc();
  *(void *)(v9 + 1592) = swift_task_alloc();
  *(void *)(v9 + 1600) = swift_task_alloc();
  *(void *)(v9 + 1608) = swift_task_alloc();
  *(void *)(v9 + 1616) = swift_task_alloc();
  *(void *)(v9 + 1624) = swift_task_alloc();
  *(void *)(v9 + 1632) = swift_task_alloc();
  *(void *)(v9 + 1640) = swift_task_alloc();
  *(void *)(v9 + 1648) = swift_task_alloc();
  uint64_t v22 = swift_task_alloc();
  *(void *)(v9 + 1656) = v22;
  uint64_t v23 = (int *)sub_10000588C(&qword_10163B940);
  *(void *)(v9 + 1664) = v23;
  *(void *)(v9 + 1672) = swift_task_alloc();
  *(void *)(v9 + 1680) = swift_task_alloc();
  *(void *)(v9 + 1688) = swift_task_alloc();
  *(void *)(v9 + 1696) = swift_task_alloc();
  *(void *)(v9 + 1704) = swift_task_alloc();
  *(void *)(v9 + 1712) = swift_task_alloc();
  *(void *)(v9 + 1720) = swift_task_alloc();
  *(void *)(v9 + 1728) = swift_task_alloc();
  *(void *)(v9 + 1736) = swift_task_alloc();
  *(void *)(v9 + 1744) = swift_task_alloc();
  *(void *)(v9 + 1752) = swift_task_alloc();
  *(void *)(v9 + 1760) = swift_task_alloc();
  *(void *)(v9 + 1768) = swift_task_alloc();
  uint64_t v24 = swift_task_alloc();
  *(void *)(v9 + 1776) = v24;
  uint64_t v25 = v23[12];
  *(_DWORD *)(v9 + 2792) = v25;
  uint64_t v26 = v23[16];
  *(_DWORD *)(v9 + 2796) = v26;
  uint64_t v27 = v24 + v26;
  uint64_t v28 = v23[20];
  *(_DWORD *)(v9 + 2800) = v28;
  uint64_t v29 = (void *)(v24 + v28);
  uint64_t v30 = v23[24];
  *(_DWORD *)(v9 + 2804) = v30;
  uint64_t v31 = v23[28];
  *(_DWORD *)(v9 + 2808) = v31;
  uint64_t v32 = (uint64_t *)(v24 + v31);
  uint64_t v33 = v14 + 16;
  uint64_t v34 = *(void (**)(void))(v14 + 16);
  *(void *)(v9 + 1784) = v34;
  *(void *)(v9 + 1792) = v33 & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v34();
  *(unsigned char *)(v24 + v25) = a2;
  *(unsigned char *)uint64_t v27 = a3;
  *(void *)(v27 + 8) = a4;
  *(void *)(v27 + 16) = a5;
  *uint64_t v29 = a6;
  v29[1] = a7;
  *(void *)(v24 + v30) = a8;
  *uint64_t v32 = v59;
  v32[1] = v60;
  uint64_t v35 = v48[12];
  *(_DWORD *)(v9 + 2812) = v35;
  uint64_t v53 = v22 + v35;
  uint64_t v36 = v48[16];
  *(_DWORD *)(v9 + 2816) = v36;
  uint64_t v37 = (void *)(v22 + v36);
  uint64_t v38 = v48[20];
  *(_DWORD *)(v9 + 2820) = v38;
  uint64_t v39 = (void *)(v22 + v38);
  uint64_t v40 = v48[24];
  *(_DWORD *)(v9 + 2824) = v40;
  os_log_type_t v41 = (void *)(v22 + v40);
  uint64_t v42 = v48[28];
  *(_DWORD *)(v9 + 2828) = v42;
  uint64_t v43 = v48[32];
  *(_DWORD *)(v9 + 2832) = v43;
  uint64_t v44 = v48[36];
  *(_DWORD *)(v9 + 2836) = v44;
  uint64_t v45 = v48[40];
  *(_DWORD *)(v9 + 2840) = v45;
  uint64_t v46 = (void *)(v22 + v45);
  ((void (*)(uint64_t, uint64_t, uint64_t))v34)(v22, v61, v54);
  sub_10001D074(v62, v53, &qword_101638CF0);
  *uint64_t v37 = v63;
  v37[1] = v64;
  *uint64_t v39 = v65;
  v39[1] = v66;
  *os_log_type_t v41 = v67;
  v41[1] = v68;
  *(_DWORD *)(v22 + v42) = v69;
  *(_DWORD *)(v22 + v43) = v70;
  *(void *)(v22 + v44) = v71;
  *uint64_t v46 = v72;
  v46[1] = v73;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000361E0(v59, v60);
  swift_bridgeObjectRetain();
  return ((uint64_t (*)(uint64_t (*)(), void))_swift_task_switch)(sub_100F9894C, 0);
}

uint64_t sub_100F9894C()
{
  uint64_t v45 = v0;
  uint64_t v40 = *(int *)(v0 + 2804);
  uint64_t v41 = *(int *)(v0 + 2808);
  uint64_t v1 = *(int *)(v0 + 2792);
  uint64_t v2 = *(void *)(v0 + 1776);
  uint64_t v3 = *(void *)(v0 + 1768);
  uint64_t v4 = *(int **)(v0 + 1664);
  uint64_t v5 = *(void *)(v0 + 992);
  uint64_t v42 = *(void *)(v0 + 984);
  uint64_t v6 = (void *)(v2 + *(int *)(v0 + 2800));
  uint64_t v7 = (char *)(v2 + *(int *)(v0 + 2796));
  uint64_t v8 = v4[12];
  uint64_t v9 = v3 + v4[16];
  uint64_t v10 = (void *)(v3 + v4[20]);
  uint64_t v38 = v4[24];
  uint64_t v39 = v4[28];
  (*(void (**)(uint64_t, uint64_t))(v0 + 1784))(v3, v2);
  *(unsigned char *)(v3 + v8) = *(unsigned char *)(v2 + v1);
  char v11 = *v7;
  uint64_t v12 = *((void *)v7 + 1);
  uint64_t v13 = *((void *)v7 + 2);
  *(unsigned char *)uint64_t v9 = v11;
  *(void *)(v9 + 8) = v12;
  *(void *)(v9 + 16) = v13;
  uint64_t v14 = v6[1];
  *uint64_t v10 = *v6;
  v10[1] = v14;
  *(void *)(v3 + v38) = *(void *)(v2 + v40);
  *(_OWORD *)(v3 + v39) = *(_OWORD *)(v2 + v41);
  swift_bridgeObjectRetain();
  NSString v15 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v16 = [v15 _stripPotentialTokenURIWithToken:0];

  uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  *(void *)(v0 + 1800) = v17;
  *(void *)(v0 + 1808) = (v5 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v17(v3, v42);
  if (!v16
    || (static String._unconditionallyBridgeFromObjectiveC(_:)(),
        v16,
        _s12searchpartyd20MessagingDestinationV6stringACSgSS_tcfC_0(),
        !v20))
  {
LABEL_5:
    uint64_t v23 = *(void *)(*(void *)(v0 + 848) + 160);
    *(void *)(v0 + 1816) = v23;
    return _swift_task_switch(sub_100F99280, v23, 0);
  }
  uint64_t v21 = v19;
  unint64_t v22 = (unint64_t)v20;
  if ((sub_100B96948(v18, v19, v20) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v24 = *(void *)(v0 + 1496);
  uint64_t v25 = *(void *)(v0 + 1384);
  uint64_t v26 = *(void *)(v0 + 1376);
  uint64_t v27 = sub_100010324(v26, (uint64_t)qword_10170D788);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v24, v27, v26);
  swift_bridgeObjectRetain();
  uint64_t v28 = Logger.logObject.getter();
  os_log_type_t v29 = static os_log_type_t.default.getter();
  BOOL v30 = os_log_type_enabled(v28, v29);
  uint64_t v31 = *(void *)(v0 + 1496);
  uint64_t v32 = *(void *)(v0 + 1384);
  uint64_t v33 = *(void *)(v0 + 1376);
  if (v30)
  {
    uint64_t v43 = *(void *)(v0 + 1496);
    uint64_t v34 = swift_slowAlloc();
    uint64_t v44 = swift_slowAlloc();
    *(_DWORD *)uint64_t v34 = 141558275;
    *(void *)(v0 + 808) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v34 + 12) = 2081;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 560) = sub_1008FA0F0(v21, v22, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v28, v29, "Got a share suggestion from a blocked contact with handle %{private,mask.hash}s. Ignore it.", (uint8_t *)v34, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v43, v33);
  }
  else
  {
    swift_bridgeObjectRelease_n();

    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v31, v33);
  }
  uint64_t v35 = *(void *)(v0 + 1776);
  sub_10001DAB4(*(void *)(v0 + 1656), &qword_10163B938);
  sub_10001DAB4(v35, &qword_10163B940);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v36 = *(uint64_t (**)(void))(v0 + 8);
  return v36();
}

uint64_t sub_100F99280()
{
  *(void *)(v0 + 1824) = *(void *)(*(void *)(v0 + 1816) + 128);
  return _swift_task_switch(sub_100F992A8, 0, 0);
}

uint64_t sub_100F992A8()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 1832) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100F99384;
  uint64_t v2 = *(void *)(v0 + 1824);
  return withCheckedContinuation<A>(isolation:function:_:)(v1, 0, 0, 0x696176416E656877, 0xEF2928656C62616CLL, sub_10007561C, v2, (char *)&type metadata for () + 8);
}

uint64_t sub_100F99384()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100F99480, 0, 0);
}

uint64_t sub_100F99480()
{
  return _swift_task_switch(sub_100F9949C, *(void *)(v0 + 848), 0);
}

uint64_t sub_100F9949C()
{
  uint64_t v250 = v0;
  v242 = *(void (**)(uint64_t, uint64_t))(v0 + 1800);
  v224 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1784);
  uint64_t v232 = *(int *)(v0 + 2804);
  uint64_t v237 = *(int *)(v0 + 2808);
  uint64_t v220 = *(int *)(v0 + 2792);
  uint64_t v1 = *(void *)(v0 + 1776);
  uint64_t v2 = *(void *)(v0 + 1768);
  uint64_t v3 = *(int **)(v0 + 1664);
  uint64_t v4 = *(void *)(v0 + 1232);
  uint64_t v5 = *(void *)(v0 + 1224);
  uint64_t v6 = *(void *)(v0 + 1152);
  uint64_t v215 = *(void *)(v0 + 984);
  uint64_t v7 = (void *)(v1 + *(int *)(v0 + 2800));
  uint64_t v8 = v1 + *(int *)(v0 + 2796);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
  *(void *)(v0 + 1840) = v9;
  *(void *)(v0 + 1848) = (v4 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v9(v6, 1, 1, v5);
  uint64_t v10 = v3[12];
  uint64_t v11 = v2 + v3[16];
  uint64_t v12 = (void *)(v2 + v3[20]);
  uint64_t v13 = v3[24];
  uint64_t v211 = v3[28];
  v224(v2, v1, v215);
  *(unsigned char *)(v2 + v10) = *(unsigned char *)(v1 + v220);
  uint64_t v14 = *(void *)(v8 + 8);
  uint64_t v15 = *(void *)(v8 + 16);
  *(unsigned char *)uint64_t v11 = *(unsigned char *)v8;
  *(void *)(v11 + 8) = v14;
  *(void *)(v11 + 16) = v15;
  uint64_t v16 = v7[1];
  *uint64_t v12 = *v7;
  v12[1] = v16;
  uint64_t v17 = *(void *)(v1 + v232);
  *(void *)(v0 + 1856) = v17;
  *(void *)(v2 + v13) = v17;
  *(_OWORD *)(v2 + v211) = *(_OWORD *)(v1 + v237);
  swift_bridgeObjectRetain();
  v242(v2, v215);
  uint64_t v18 = *(void *)(v17 + 16);
  *(void *)(v0 + 1864) = v18;
  if (v18)
  {
    uint64_t v19 = *(void *)(v0 + 1120);
    uint64_t v20 = *(void *)(v0 + 1088);
    uint64_t v21 = *(void *)(v0 + 1080);
    uint64_t v246 = *(void *)(v0 + 992);
    uint64_t v22 = *(void *)(v0 + 848);
    uint64_t v23 = *(int *)(v21 + 48);
    *(_DWORD *)(v0 + 2844) = v23;
    uint64_t v24 = (uint64_t *)(v19 + v23);
    uint64_t v25 = *(int *)(v21 + 64);
    *(_DWORD *)(v0 + 2848) = v25;
    uint64_t v26 = (uint64_t *)(v19 + v25);
    *(void *)(v0 + 1872) = *(void *)(v22 + 288);
    LODWORD(v22) = *(_DWORD *)(v20 + 80);
    *(_DWORD *)(v0 + 2852) = v22;
    *(void *)(v0 + 1880) = *(void *)(v20 + 72);
    *(void *)(v0 + 1904) = _swiftEmptyArrayStorage;
    *(void *)(v0 + 1896) = 0;
    *(void *)(v0 + 1888) = _swiftEmptyDictionarySingleton;
    uint64_t v243 = *(int *)(v0 + 2792);
    uint64_t v27 = *(void *)(v0 + 1112);
    uint64_t v228 = *(void *)(v0 + 984);
    uint64_t v233 = *(void *)(v0 + 1776);
    uint64_t v28 = v233 + *(int *)(v0 + 2796);
    sub_10001D074(*(void *)(v0 + 1856) + ((v22 + 32) & ~(unint64_t)v22), v19, &qword_10163A820);
    uint64_t v29 = *(int *)(v21 + 48);
    *(_DWORD *)(v0 + 2856) = v29;
    BOOL v30 = (uint64_t *)(v27 + v29);
    uint64_t v31 = *(int *)(v21 + 64);
    *(_DWORD *)(v0 + 2860) = v31;
    uint64_t v32 = (uint64_t *)(v27 + v31);
    uint64_t v33 = *v24;
    uint64_t v34 = v24[1];
    uint64_t v238 = *v24;
    uint64_t v35 = *v26;
    uint64_t v36 = v26[1];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v246 + 32))(v27, v19, v228);
    uint64_t *v30 = v33;
    v30[1] = v34;
    uint64_t v37 = v34;
    *uint64_t v32 = v35;
    v32[1] = v36;
    uint64_t v38 = *(void *)(v28 + 8);
    uint64_t v39 = *(void *)(v28 + 16);
    char v40 = *(unsigned char *)(v233 + v243);
    uint64_t v41 = (void *)swift_task_alloc();
    *(void *)(v0 + 1912) = v41;
    *uint64_t v41 = v0;
    v41[1] = sub_100F9AC2C;
    uint64_t v42 = *(void *)(v0 + 1288);
    uint64_t v43 = *(void *)(v0 + 1112);
    uint64_t v252 = v38;
    uint64_t v253 = v39;
    return sub_100EA09DC(v42, v40, v43, v238, v37, v35, v36);
  }
  else
  {
    swift_bridgeObjectRelease();
    *(void *)(v0 + 1936) = _swiftEmptyArrayStorage;
    *(void *)(v0 + 1928) = _swiftEmptyDictionarySingleton;
    uint64_t v45 = *(void *)(v0 + 1232);
    uint64_t v46 = *(void *)(v0 + 1224);
    uint64_t v47 = *(void *)(v0 + 1136);
    sub_10001D074(*(void *)(v0 + 1152), v47, (uint64_t *)&unk_10163B890);
    uint64_t v48 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48);
    *(void *)(v0 + 1944) = v48;
    *(void *)(v0 + 1952) = (v45 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
    if (v48(v47, 1, v46) == 1)
    {
      uint64_t v49 = *(void *)(v0 + 1136);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10001DAB4(v49, (uint64_t *)&unk_10163B890);
      sub_100CF7910();
      swift_allocError();
      *uint64_t v50 = 4;
      swift_willThrow();
      if (qword_101636888 != -1) {
        swift_once();
      }
      uint64_t v51 = *(void *)(v0 + 1424);
      uint64_t v52 = *(void *)(v0 + 1384);
      uint64_t v53 = *(void *)(v0 + 1376);
      uint64_t v54 = sub_100010324(v53, (uint64_t)qword_10170D788);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 16))(v51, v54, v53);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v55 = Logger.logObject.getter();
      os_log_type_t v56 = static os_log_type_t.error.getter();
      BOOL v57 = os_log_type_enabled(v55, v56);
      uint64_t v58 = *(void *)(v0 + 1424);
      uint64_t v59 = *(void *)(v0 + 1384);
      uint64_t v60 = *(void *)(v0 + 1376);
      uint64_t v61 = *(void *)(v0 + 1152);
      if (v57)
      {
        uint64_t v244 = *(void *)(v0 + 1424);
        uint64_t v239 = *(void *)(v0 + 1376);
        uint64_t v62 = (uint8_t *)swift_slowAlloc();
        v249[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v62 = 136315138;
        swift_getErrorValue();
        uint64_t v63 = Error.localizedDescription.getter();
        *(void *)(v0 + 616) = sub_1008FA0F0(v63, v64, v249);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v55, v56, "Failure on handleCircleTrust, preparing initial data: %s", v62, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
        (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v244, v239);
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();
        (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v58, v60);
      }
      sub_10001DAB4(v61, (uint64_t *)&unk_10163B890);
      uint64_t v121 = *(void *)(v0 + 1776);
      sub_10001DAB4(*(void *)(v0 + 1656), &qword_10163B938);
      sub_10001DAB4(v121, &qword_10163B940);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v122 = *(uint64_t (**)(void))(v0 + 8);
      return v122();
    }
    else
    {
      uint64_t v65 = *(void *)(v0 + 1296);
      uint64_t v66 = *(void *)(v0 + 1272);
      sub_100FB6C70(*(void *)(v0 + 1136), v66, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
      sub_100FB6BB8(v66, v65, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
      uint64_t v67 = qword_101636888;
      swift_bridgeObjectRetain_n();
      if (v67 != -1) {
        swift_once();
      }
      uint64_t v225 = *(int *)(v0 + 2832);
      uint64_t v229 = *(int *)(v0 + 2836);
      uint64_t v221 = *(int *)(v0 + 2828);
      v240 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1784);
      uint64_t v190 = *(int *)(v0 + 2804);
      uint64_t v187 = *(int *)(v0 + 2792);
      uint64_t v68 = *(void *)(v0 + 1776);
      uint64_t v69 = *(void *)(v0 + 1760);
      uint64_t v167 = *(void *)(v0 + 1752);
      uint64_t v174 = *(void *)(v0 + 1744);
      int v70 = *(int **)(v0 + 1664);
      uint64_t v71 = *(void *)(v0 + 1656);
      uint64_t v72 = *(void *)(v0 + 1648);
      uint64_t v212 = *(void *)(v0 + 1640);
      uint64_t v216 = *(void *)(v0 + 1632);
      uint64_t v73 = *(int **)(v0 + 1504);
      unint64_t v208 = (void *)(v71 + *(int *)(v0 + 2840));
      uint64_t v247 = *(void *)(v0 + 1488);
      v204 = (void *)(v71 + *(int *)(v0 + 2824));
      uint64_t v202 = (void *)(v71 + *(int *)(v0 + 2820));
      uint64_t v74 = *(void *)(v0 + 1384);
      uint64_t v199 = (void *)(v71 + *(int *)(v0 + 2816));
      uint64_t v195 = v71 + *(int *)(v0 + 2812);
      uint64_t v75 = *(void *)(v0 + 1376);
      uint64_t v162 = (uint64_t *)(v68 + *(int *)(v0 + 2808));
      uint64_t v184 = (void *)(v68 + *(int *)(v0 + 2800));
      uint64_t v76 = v68 + *(int *)(v0 + 2796);
      uint64_t v234 = *(void *)(v0 + 984);
      uint64_t v77 = sub_100010324(v75, (uint64_t)qword_10170D788);
      *(void *)(v0 + 1960) = v77;
      uint64_t v78 = *(void (**)(uint64_t, uint64_t, uint64_t))(v74 + 16);
      *(void *)(v0 + 1968) = v78;
      *(void *)(v0 + 1976) = (v74 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
      v78(v247, v77, v75);
      uint64_t v181 = v70[12];
      uint64_t v79 = v69 + v70[16];
      uint64_t v80 = (void *)(v69 + v70[20]);
      uint64_t v158 = v70[24];
      uint64_t v81 = (uint64_t *)(v69 + v70[28]);
      v240(v69, v68, v234);
      *(unsigned char *)(v69 + v181) = *(unsigned char *)(v68 + v187);
      uint64_t v82 = *(void *)(v76 + 8);
      uint64_t v83 = *(void *)(v76 + 16);
      *(unsigned char *)uint64_t v79 = *(unsigned char *)v76;
      *(void *)(v79 + 8) = v82;
      *(void *)(v79 + 16) = v83;
      uint64_t v178 = v184[1];
      *uint64_t v80 = *v184;
      v80[1] = v178;
      *(void *)(v69 + v158) = *(void *)(v68 + v190);
      unint64_t v188 = v162[1];
      uint64_t v191 = *v162;
      uint64_t *v81 = *v162;
      v81[1] = v188;
      sub_10001D074(v69, v167, &qword_10163B940);
      sub_10001D608(v69, v174, &qword_10163B940);
      uint64_t v84 = v72 + v73[12];
      uint64_t v85 = (void *)(v72 + v73[16]);
      unint64_t v86 = (void *)(v72 + v73[20]);
      uint64_t v87 = (void *)(v72 + v73[24]);
      uint64_t v88 = v73[28];
      uint64_t v168 = v73[32];
      uint64_t v175 = v73[36];
      uint64_t v89 = (void *)(v72 + v73[40]);
      v240(v72, v71, v234);
      sub_10001D074(v195, v84, &qword_101638CF0);
      uint64_t v90 = v199[1];
      *uint64_t v85 = *v199;
      v85[1] = v90;
      uint64_t v91 = v202[1];
      *unint64_t v86 = *v202;
      v86[1] = v91;
      uint64_t v92 = v204[1];
      *uint64_t v87 = *v204;
      v87[1] = v92;
      *(_DWORD *)(v72 + v88) = *(_DWORD *)(v71 + v221);
      *(_DWORD *)(v72 + v168) = *(_DWORD *)(v71 + v225);
      *(void *)(v72 + v175) = *(void *)(v71 + v229);
      uint64_t v93 = v208[1];
      *uint64_t v89 = *v208;
      v89[1] = v93;
      sub_10001D074(v72, v212, &qword_10163B938);
      sub_10001D608(v72, v216, &qword_10163B938);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1000361E0(v191, v188);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v94 = Logger.logObject.getter();
      os_log_type_t v95 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v94, v95))
      {
        v235 = *(void (**)(uint64_t, uint64_t))(v0 + 1800);
        uint64_t v96 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1784);
        v179 = v96;
        unint64_t v209 = v94;
        uint64_t v189 = *(void *)(v0 + 1768);
        uint64_t v97 = *(void *)(v0 + 1752);
        uint64_t v169 = v97;
        uint64_t v185 = *(void *)(v0 + 1744);
        uint64_t v196 = *(void *)(v0 + 1640);
        uint64_t v205 = *(void *)(v0 + 1632);
        uint64_t v98 = *(void *)(v0 + 1624);
        char v99 = *(int **)(v0 + 1504);
        uint64_t v213 = *(void *)(v0 + 1384);
        uint64_t v217 = *(void *)(v0 + 1376);
        uint64_t v222 = *(void *)(v0 + 1488);
        uint64_t v226 = *(void *)(v0 + 1072);
        uint64_t v248 = *(void *)(v0 + 992);
        uint64_t v100 = *(void *)(v0 + 984);
        uint64_t v101 = swift_slowAlloc();
        v249[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v101 = 141558787;
        *(void *)(v0 + 776) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v101 + 12) = 2081;
        v96(v189, v97, v100);
        uint64_t v192 = *(void (**)(uint64_t, uint64_t, uint64_t))(v248 + 32);
        uint64_t v230 = v100;
        v192(v226, v189, v100);
        sub_100FB6F70((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        os_log_type_t v200 = v95;
        uint64_t v102 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v104 = v103;
        v235(v226, v100);
        *(void *)(v0 + 784) = sub_1008FA0F0(v102, v104, v249);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10001DAB4(v185, &qword_10163B940);
        sub_10001DAB4(v169, &qword_10163B940);
        *(_WORD *)(v101 + 22) = 2160;
        *(void *)(v0 + 792) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v101 + 32) = 2081;
        uint64_t v105 = v99[12];
        uint64_t v106 = v98 + v105;
        uint64_t v107 = v99[16];
        char v108 = (void *)(v98 + v107);
        uint64_t v109 = v99[20];
        uint64_t v155 = (void *)(v98 + v109);
        uint64_t v110 = v99[24];
        unint64_t v156 = (void *)(v98 + v110);
        uint64_t v159 = v99[28];
        uint64_t v163 = v99[32];
        uint64_t v170 = v99[36];
        uint64_t v182 = v99[40];
        uint64_t v111 = v196 + v105;
        char v112 = (void *)(v196 + v107);
        char v113 = (void *)(v196 + v109);
        unint64_t v114 = (void *)(v196 + v110);
        v179(v98, v196, v230);
        sub_10001D074(v111, v106, &qword_101638CF0);
        uint64_t v115 = v112[1];
        *char v108 = *v112;
        v108[1] = v115;
        uint64_t v116 = v113[1];
        *uint64_t v155 = *v113;
        v155[1] = v116;
        uint64_t v117 = v114[1];
        *unint64_t v156 = *v114;
        v156[1] = v117;
        *(_DWORD *)(v98 + v159) = *(_DWORD *)(v196 + v159);
        *(_DWORD *)(v98 + v163) = *(_DWORD *)(v196 + v163);
        *(void *)(v98 + v170) = *(void *)(v196 + v170);
        *(_OWORD *)(v98 + v182) = *(_OWORD *)(v196 + v182);
        v192(v226, v98, v230);
        sub_10001DAB4(v106, &qword_101638CF0);
        uint64_t v118 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v120 = v119;
        v235(v226, v230);
        *(void *)(v0 + 800) = sub_1008FA0F0(v118, v120, v249);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10001DAB4(v205, &qword_10163B938);
        sub_10001DAB4(v196, &qword_10163B938);
        _os_log_impl((void *)&_mh_execute_header, v209, v200, "Update beacon attributes for shareId: %{private,mask.hash}s, beaconID: %{private,mask.hash}s.", (uint8_t *)v101, 0x2Au);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(uint64_t, uint64_t))(v213 + 8))(v222, v217);
      }
      else
      {
        uint64_t v123 = *(void *)(v0 + 1752);
        uint64_t v124 = *(void *)(v0 + 1640);
        uint64_t v125 = *(void *)(v0 + 1632);
        uint64_t v126 = *(void *)(v0 + 1488);
        uint64_t v127 = *(void *)(v0 + 1384);
        uint64_t v128 = *(void *)(v0 + 1376);
        sub_10001DAB4(*(void *)(v0 + 1744), &qword_10163B940);
        sub_10001DAB4(v123, &qword_10163B940);
        sub_10001DAB4(v125, &qword_10163B938);
        sub_10001DAB4(v124, &qword_10163B938);

        (*(void (**)(uint64_t, uint64_t))(v127 + 8))(v126, v128);
      }
      uint64_t v186 = *(void (**)(uint64_t, uint64_t))(v0 + 1800);
      uint64_t v197 = *(int *)(v0 + 2836);
      uint64_t v201 = *(int *)(v0 + 2832);
      uint64_t v203 = *(int *)(v0 + 2828);
      v245 = *(void (**)(void))(v0 + 1784);
      uint64_t v129 = *(void *)(v0 + 1656);
      uint64_t v130 = *(void *)(v0 + 1624);
      uint64_t v131 = *(void *)(v0 + 1608);
      uint64_t v132 = *(int **)(v0 + 1504);
      uint64_t v236 = *(void *)(v0 + 984);
      uint64_t v241 = *(void *)(v0 + 1616);
      long long v176 = (uint64_t *)(v129 + *(int *)(v0 + 2840));
      v206 = (uint64_t *)(v129 + *(int *)(v0 + 2824));
      v218 = (uint64_t *)(v129 + *(int *)(v0 + 2820));
      unint64_t v133 = (uint64_t *)(v129 + *(int *)(v0 + 2816));
      uint64_t v134 = v129 + *(int *)(v0 + 2812);
      uint64_t v231 = v134;
      uint64_t v135 = v130 + v132[12];
      uint64_t v183 = v135;
      uint64_t v136 = (void *)(v130 + v132[16]);
      unint64_t v137 = (void *)(v130 + v132[20]);
      uint64_t v157 = (void *)(v130 + v132[24]);
      uint64_t v164 = v132[28];
      uint64_t v193 = v132[32];
      v171 = (void *)(v130 + v132[40]);
      uint64_t v160 = v132[36];
      ((void (*)(uint64_t, uint64_t))v245)(v130, v129);
      sub_10001D074(v134, v135, &qword_101638CF0);
      uint64_t v223 = *v133;
      uint64_t v138 = *v133;
      uint64_t v227 = v133[1];
      *(void *)(v0 + 1984) = v227;
      *uint64_t v136 = v138;
      v136[1] = v227;
      uint64_t v214 = *v218;
      uint64_t v139 = *v218;
      uint64_t v219 = v218[1];
      *(void *)(v0 + 1992) = v219;
      *unint64_t v137 = v139;
      v137[1] = v219;
      uint64_t v140 = *v206;
      uint64_t v207 = v206[1];
      uint64_t v210 = v140;
      *uint64_t v157 = v140;
      v157[1] = v207;
      LODWORD(v203) = *(_DWORD *)(v129 + v203);
      uint64_t v180 = v130;
      *(_DWORD *)(v130 + v164) = v203;
      LODWORD(v201) = *(_DWORD *)(v129 + v201);
      *(_DWORD *)(v130 + v193) = v201;
      uint64_t v198 = *(void *)(v129 + v197);
      *(void *)(v130 + v160) = v198;
      uint64_t v142 = v176[1];
      uint64_t v194 = *v176;
      uint64_t v141 = *v176;
      *(void *)(v0 + 2000) = v142;
      void *v171 = v141;
      v171[1] = v142;
      uint64_t v143 = v241 + v132[12];
      uint64_t v177 = v143;
      uint64_t v144 = (void *)(v241 + v132[16]);
      BOOL v145 = (void *)(v241 + v132[20]);
      uint64_t v146 = (void *)(v241 + v132[24]);
      uint64_t v165 = v132[32];
      uint64_t v172 = v132[28];
      uint64_t v161 = v132[36];
      char v147 = (void *)(v241 + v132[40]);
      v245();
      sub_10001D074(v231, v143, &qword_101638CF0);
      *uint64_t v144 = v223;
      v144[1] = v227;
      *BOOL v145 = v214;
      v145[1] = v219;
      *uint64_t v146 = v210;
      v146[1] = v207;
      *(_DWORD *)(v241 + v172) = v203;
      *(_DWORD *)(v241 + v165) = v201;
      *(void *)(v241 + v161) = v198;
      *char v147 = v194;
      v147[1] = v142;
      uint64_t v148 = v131 + v132[12];
      char v149 = (void *)(v131 + v132[16]);
      unint64_t v150 = (void *)(v131 + v132[20]);
      unint64_t v151 = (void *)(v131 + v132[24]);
      uint64_t v166 = v132[32];
      uint64_t v173 = v132[28];
      uint64_t v152 = (void *)(v131 + v132[40]);
      uint64_t v153 = v132[36];
      ((void (*)(uint64_t, uint64_t, uint64_t))v245)(v131, v129, v236);
      sub_10001D074(v231, v148, &qword_101638CF0);
      *char v149 = v223;
      v149[1] = v227;
      *unint64_t v150 = v214;
      v150[1] = v219;
      *unint64_t v151 = v210;
      v151[1] = v207;
      *(_DWORD *)(v131 + v173) = v203;
      *(_DWORD *)(v131 + v166) = v201;
      *(void *)(v131 + v153) = v198;
      *uint64_t v152 = v194;
      v152[1] = v142;
      *(void *)(v0 + 16) = v223;
      *(void *)(v0 + 24) = v227;
      *(void *)(v0 + 32) = v198;
      *(void *)(v0 + 40) = v194;
      *(void *)(v0 + 48) = v142;
      *(void *)(v0 + 56) = v214;
      *(void *)(v0 + 64) = v219;
      *(void *)(v0 + 72) = 0;
      *(void *)(v0 + 80) = 0;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_10001DAB4(v148, &qword_101638CF0);
      v186(v131, v236);
      sub_10001DAB4(v177, &qword_101638CF0);
      v186(v241, v236);
      sub_10001DAB4(v183, &qword_101638CF0);
      v186(v180, v236);
      uint64_t v154 = (void *)swift_task_alloc();
      *(void *)(v0 + 2008) = v154;
      *uint64_t v154 = v0;
      v154[1] = sub_100F9CF88;
      return sub_100E57788();
    }
  }
}

uint64_t sub_100F9AC2C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 1920) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 848);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_100F9C7A8;
    uint64_t v5 = v3;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 848);
    uint64_t v4 = sub_100F9AD74;
  }
  return _swift_task_switch(v4, v5, 0);
}

uint64_t sub_100F9AD74()
{
  uint64_t v267 = v0;
  sub_100FB6BB8(*(void *)(v0 + 1288), *(void *)(v0 + 1280), (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v2 = *(void *)(v0 + 1904);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    unint64_t v2 = sub_100A6F9A8(0, *(void *)(v2 + 16) + 1, 1, *(void *)(v0 + 1904));
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    unint64_t v2 = sub_100A6F9A8(v3 > 1, v4 + 1, 1, v2);
  }
  uint64_t v5 = *(void *)(v0 + 1280);
  uint64_t v6 = *(void *)(v0 + 1232);
  uint64_t v7 = (uint64_t *)(*(void *)(v0 + 1112) + *(int *)(v0 + 2856));
  *(void *)(v2 + 16) = v4 + 1;
  sub_100FB6C70(v5, v2+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v4, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
  uint64_t v8 = *v7;
  unint64_t v9 = v7[1];
  if (qword_101636948 != -1) {
    swift_once();
  }
  unint64_t v262 = v2;
  BOOL v10 = v8 == qword_10170DA90 && v9 == qword_10170DA98;
  if (v10 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    uint64_t v11 = *(void *)(v0 + 1232);
    uint64_t v12 = *(void *)(v0 + 1224);
    uint64_t v13 = *(void *)(v0 + 1144);
    sub_10001D074(*(void *)(v0 + 1152), v13, (uint64_t *)&unk_10163B890);
    LODWORD(v12) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v13, 1, v12);
    sub_10001DAB4(v13, (uint64_t *)&unk_10163B890);
    if (v12 != 1)
    {
      if (qword_101636888 != -1) {
        swift_once();
      }
      sub_100010324(*(void *)(v0 + 1376), (uint64_t)qword_10170D788);
      uint64_t v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v14, v15))
      {
        uint64_t v16 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v16 = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "Several peer trusts with owner account description!", v16, 2u);
        swift_slowDealloc();
      }
    }
    uint64_t v17 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v0 + 1840);
    uint64_t v18 = *(void *)(v0 + 1288);
    uint64_t v19 = *(void *)(v0 + 1224);
    uint64_t v20 = *(void *)(v0 + 1152);
    sub_10001DAB4(v20, (uint64_t *)&unk_10163B890);
    sub_100FB6BB8(v18, v20, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
    unsigned int v252 = 1;
    v17(v20, 0, 1, v19);
  }
  else
  {
    uint64_t v21 = *(int *)(v0 + 2860);
    v257 = *(void (**)(uint64_t, uint64_t))(v0 + 1800);
    uint64_t v22 = *(void *)(v0 + 1112);
    uint64_t v23 = *(void *)(v0 + 1104);
    uint64_t v24 = *(void *)(v0 + 1080);
    uint64_t v25 = *(void *)(v0 + 984);
    uint64_t v26 = (void *)(v23 + *(int *)(v24 + 48));
    uint64_t v27 = *(int *)(v24 + 64);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1784))(v23, v22, v25);
    *uint64_t v26 = v8;
    v26[1] = v9;
    *(_OWORD *)(v23 + v27) = *(_OWORD *)(v22 + v21);
    uint64_t v28 = HIBYTE(v9) & 0xF;
    if ((v9 & 0x2000000000000000) == 0) {
      uint64_t v28 = v8 & 0xFFFFFFFFFFFFLL;
    }
    unsigned int v252 = v28 != 0;
    v257(v23, v25);
  }
  uint64_t v29 = *(int *)(v0 + 2860);
  uint64_t v30 = *(void *)(v0 + 1888);
  uint64_t v258 = *(void *)(v0 + 1864);
  uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v0 + 1800);
  uint64_t v32 = *(void *)(v0 + 1112);
  uint64_t v33 = *(void *)(v0 + 1096);
  uint64_t v34 = *(void *)(v0 + 1080);
  uint64_t v35 = *(void *)(v0 + 984);
  uint64_t v36 = (void *)(v32 + *(int *)(v0 + 2856));
  uint64_t v242 = *(void *)(v0 + 1288);
  uint64_t v247 = *(void *)(v0 + 1896) + 1;
  uint64_t v37 = (void *)(v33 + *(int *)(v34 + 48));
  uint64_t v38 = *(int *)(v34 + 64);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1784))(v33, v32, v35);
  uint64_t v39 = v36[1];
  *uint64_t v37 = *v36;
  v37[1] = v39;
  *(_OWORD *)(v33 + v38) = *(_OWORD *)(v32 + v29);
  char v40 = swift_isUniquelyReferenced_nonNull_native();
  v266[0] = v30;
  sub_10016DA70(v252, v33, v40);
  swift_bridgeObjectRelease();
  v31(v33, v35);
  sub_100FB893C(v242, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
  sub_10001DAB4(v32, &qword_10163A820);
  if (v247 == v258)
  {
    swift_bridgeObjectRelease();
    *(void *)(v0 + 1936) = v262;
    *(void *)(v0 + 1928) = v30;
    uint64_t v41 = *(void *)(v0 + 1232);
    uint64_t v42 = *(void *)(v0 + 1224);
    uint64_t v43 = *(void *)(v0 + 1136);
    sub_10001D074(*(void *)(v0 + 1152), v43, (uint64_t *)&unk_10163B890);
    uint64_t v44 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v41 + 48);
    *(void *)(v0 + 1944) = v44;
    *(void *)(v0 + 1952) = (v41 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
    if (v44(v43, 1, v42) == 1)
    {
      uint64_t v45 = *(void *)(v0 + 1136);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_10001DAB4(v45, (uint64_t *)&unk_10163B890);
      sub_100CF7910();
      swift_allocError();
      *uint64_t v46 = 4;
      swift_willThrow();
      if (qword_101636888 != -1) {
        swift_once();
      }
      uint64_t v47 = *(void *)(v0 + 1424);
      uint64_t v48 = *(void *)(v0 + 1384);
      uint64_t v49 = *(void *)(v0 + 1376);
      uint64_t v50 = sub_100010324(v49, (uint64_t)qword_10170D788);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v48 + 16))(v47, v50, v49);
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v51 = Logger.logObject.getter();
      os_log_type_t v52 = static os_log_type_t.error.getter();
      BOOL v53 = os_log_type_enabled(v51, v52);
      uint64_t v54 = *(void *)(v0 + 1424);
      uint64_t v55 = *(void *)(v0 + 1384);
      uint64_t v56 = *(void *)(v0 + 1376);
      uint64_t v57 = *(void *)(v0 + 1152);
      if (v53)
      {
        uint64_t v259 = *(void *)(v0 + 1424);
        uint64_t v253 = *(void *)(v0 + 1376);
        uint64_t v58 = (uint8_t *)swift_slowAlloc();
        v266[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v58 = 136315138;
        swift_getErrorValue();
        uint64_t v59 = Error.localizedDescription.getter();
        *(void *)(v0 + 616) = sub_1008FA0F0(v59, v60, v266);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v51, v52, "Failure on handleCircleTrust, preparing initial data: %s", v58, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
        (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v259, v253);
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();
        (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v54, v56);
      }
      sub_10001DAB4(v57, (uint64_t *)&unk_10163B890);
      uint64_t v140 = *(void *)(v0 + 1776);
      sub_10001DAB4(*(void *)(v0 + 1656), &qword_10163B938);
      sub_10001DAB4(v140, &qword_10163B940);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v141 = *(uint64_t (**)(void))(v0 + 8);
      return v141();
    }
    else
    {
      uint64_t v83 = *(void *)(v0 + 1296);
      uint64_t v84 = *(void *)(v0 + 1272);
      sub_100FB6C70(*(void *)(v0 + 1136), v84, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
      sub_100FB6BB8(v84, v83, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
      uint64_t v85 = qword_101636888;
      swift_bridgeObjectRetain_n();
      if (v85 != -1) {
        swift_once();
      }
      uint64_t v239 = *(int *)(v0 + 2832);
      uint64_t v244 = *(int *)(v0 + 2836);
      uint64_t v236 = *(int *)(v0 + 2828);
      v255 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1784);
      uint64_t v208 = *(int *)(v0 + 2804);
      uint64_t v205 = *(int *)(v0 + 2792);
      uint64_t v86 = *(void *)(v0 + 1776);
      uint64_t v87 = *(void *)(v0 + 1760);
      uint64_t v186 = *(void *)(v0 + 1752);
      uint64_t v193 = *(void *)(v0 + 1744);
      uint64_t v88 = *(int **)(v0 + 1664);
      uint64_t v89 = *(void *)(v0 + 1656);
      uint64_t v90 = *(void *)(v0 + 1648);
      uint64_t v229 = *(void *)(v0 + 1640);
      uint64_t v232 = *(void *)(v0 + 1632);
      uint64_t v91 = *(int **)(v0 + 1504);
      uint64_t v226 = (void *)(v89 + *(int *)(v0 + 2840));
      uint64_t v264 = *(void *)(v0 + 1488);
      uint64_t v222 = (void *)(v89 + *(int *)(v0 + 2824));
      uint64_t v220 = (void *)(v89 + *(int *)(v0 + 2820));
      uint64_t v92 = *(void *)(v0 + 1384);
      uint64_t v217 = (void *)(v89 + *(int *)(v0 + 2816));
      uint64_t v213 = v89 + *(int *)(v0 + 2812);
      uint64_t v93 = *(void *)(v0 + 1376);
      uint64_t v181 = (uint64_t *)(v86 + *(int *)(v0 + 2808));
      uint64_t v202 = (void *)(v86 + *(int *)(v0 + 2800));
      uint64_t v94 = v86 + *(int *)(v0 + 2796);
      uint64_t v249 = *(void *)(v0 + 984);
      uint64_t v95 = sub_100010324(v93, (uint64_t)qword_10170D788);
      *(void *)(v0 + 1960) = v95;
      uint64_t v96 = *(void (**)(uint64_t, uint64_t, uint64_t))(v92 + 16);
      *(void *)(v0 + 1968) = v96;
      *(void *)(v0 + 1976) = (v92 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
      v96(v264, v95, v93);
      uint64_t v199 = v88[12];
      uint64_t v97 = v87 + v88[16];
      uint64_t v98 = (void *)(v87 + v88[20]);
      uint64_t v177 = v88[24];
      char v99 = (uint64_t *)(v87 + v88[28]);
      v255(v87, v86, v249);
      *(unsigned char *)(v87 + v199) = *(unsigned char *)(v86 + v205);
      uint64_t v100 = *(void *)(v94 + 8);
      uint64_t v101 = *(void *)(v94 + 16);
      *(unsigned char *)uint64_t v97 = *(unsigned char *)v94;
      *(void *)(v97 + 8) = v100;
      *(void *)(v97 + 16) = v101;
      uint64_t v102 = v202[1];
      *uint64_t v98 = *v202;
      v98[1] = v102;
      *(void *)(v87 + v177) = *(void *)(v86 + v208);
      unint64_t v206 = v181[1];
      uint64_t v209 = *v181;
      *char v99 = *v181;
      v99[1] = v206;
      sub_10001D074(v87, v186, &qword_10163B940);
      sub_10001D608(v87, v193, &qword_10163B940);
      uint64_t v103 = v90 + v91[12];
      unint64_t v104 = (void *)(v90 + v91[16]);
      uint64_t v105 = (void *)(v90 + v91[20]);
      uint64_t v106 = (void *)(v90 + v91[24]);
      uint64_t v107 = v91[28];
      uint64_t v187 = v91[32];
      uint64_t v194 = v91[36];
      char v108 = (void *)(v90 + v91[40]);
      v255(v90, v89, v249);
      sub_10001D074(v213, v103, &qword_101638CF0);
      uint64_t v109 = v217[1];
      *unint64_t v104 = *v217;
      v104[1] = v109;
      uint64_t v110 = v220[1];
      void *v105 = *v220;
      v105[1] = v110;
      uint64_t v111 = v222[1];
      *uint64_t v106 = *v222;
      v106[1] = v111;
      *(_DWORD *)(v90 + v107) = *(_DWORD *)(v89 + v236);
      *(_DWORD *)(v90 + v187) = *(_DWORD *)(v89 + v239);
      *(void *)(v90 + v194) = *(void *)(v89 + v244);
      uint64_t v112 = v226[1];
      *char v108 = *v226;
      v108[1] = v112;
      sub_10001D074(v90, v229, &qword_10163B938);
      sub_10001D608(v90, v232, &qword_10163B938);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1000361E0(v209, v206);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      char v113 = Logger.logObject.getter();
      os_log_type_t v114 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v113, v114))
      {
        uint64_t v250 = *(void (**)(uint64_t, uint64_t))(v0 + 1800);
        uint64_t v115 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1784);
        uint64_t v197 = v115;
        uint64_t v227 = v113;
        uint64_t v207 = *(void *)(v0 + 1768);
        uint64_t v116 = *(void *)(v0 + 1752);
        uint64_t v188 = v116;
        uint64_t v203 = *(void *)(v0 + 1744);
        uint64_t v214 = *(void *)(v0 + 1640);
        uint64_t v223 = *(void *)(v0 + 1632);
        uint64_t v117 = *(void *)(v0 + 1624);
        uint64_t v118 = *(int **)(v0 + 1504);
        uint64_t v230 = *(void *)(v0 + 1384);
        uint64_t v233 = *(void *)(v0 + 1376);
        uint64_t v237 = *(void *)(v0 + 1488);
        uint64_t v240 = *(void *)(v0 + 1072);
        uint64_t v265 = *(void *)(v0 + 992);
        uint64_t v119 = *(void *)(v0 + 984);
        uint64_t v120 = swift_slowAlloc();
        v266[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v120 = 141558787;
        *(void *)(v0 + 776) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v120 + 12) = 2081;
        v115(v207, v116, v119);
        uint64_t v210 = *(void (**)(uint64_t, uint64_t, uint64_t))(v265 + 32);
        uint64_t v245 = v119;
        v210(v240, v207, v119);
        sub_100FB6F70((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        os_log_type_t v218 = v114;
        uint64_t v121 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v123 = v122;
        v250(v240, v119);
        *(void *)(v0 + 784) = sub_1008FA0F0(v121, v123, v266);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10001DAB4(v203, &qword_10163B940);
        sub_10001DAB4(v188, &qword_10163B940);
        *(_WORD *)(v120 + 22) = 2160;
        *(void *)(v0 + 792) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v120 + 32) = 2081;
        uint64_t v124 = v118[12];
        uint64_t v125 = v117 + v124;
        uint64_t v126 = v118[16];
        uint64_t v127 = (void *)(v117 + v126);
        uint64_t v128 = v118[20];
        uint64_t v174 = (void *)(v117 + v128);
        uint64_t v129 = v118[24];
        uint64_t v175 = (void *)(v117 + v129);
        uint64_t v178 = v118[28];
        uint64_t v182 = v118[32];
        uint64_t v189 = v118[36];
        uint64_t v200 = v118[40];
        uint64_t v130 = v214 + v124;
        uint64_t v131 = (void *)(v214 + v126);
        uint64_t v132 = (void *)(v214 + v128);
        unint64_t v133 = (void *)(v214 + v129);
        v197(v117, v214, v245);
        sub_10001D074(v130, v125, &qword_101638CF0);
        uint64_t v134 = v131[1];
        *uint64_t v127 = *v131;
        v127[1] = v134;
        uint64_t v135 = v132[1];
        *uint64_t v174 = *v132;
        v174[1] = v135;
        uint64_t v136 = v133[1];
        *uint64_t v175 = *v133;
        v175[1] = v136;
        *(_DWORD *)(v117 + v178) = *(_DWORD *)(v214 + v178);
        *(_DWORD *)(v117 + v182) = *(_DWORD *)(v214 + v182);
        *(void *)(v117 + v189) = *(void *)(v214 + v189);
        *(_OWORD *)(v117 + v200) = *(_OWORD *)(v214 + v200);
        v210(v240, v117, v245);
        sub_10001DAB4(v125, &qword_101638CF0);
        uint64_t v137 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v139 = v138;
        v250(v240, v245);
        *(void *)(v0 + 800) = sub_1008FA0F0(v137, v139, v266);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10001DAB4(v223, &qword_10163B938);
        sub_10001DAB4(v214, &qword_10163B938);
        _os_log_impl((void *)&_mh_execute_header, v227, v218, "Update beacon attributes for shareId: %{private,mask.hash}s, beaconID: %{private,mask.hash}s.", (uint8_t *)v120, 0x2Au);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(uint64_t, uint64_t))(v230 + 8))(v237, v233);
      }
      else
      {
        uint64_t v142 = *(void *)(v0 + 1752);
        uint64_t v143 = *(void *)(v0 + 1640);
        uint64_t v144 = *(void *)(v0 + 1632);
        uint64_t v145 = *(void *)(v0 + 1488);
        uint64_t v146 = *(void *)(v0 + 1384);
        uint64_t v147 = *(void *)(v0 + 1376);
        sub_10001DAB4(*(void *)(v0 + 1744), &qword_10163B940);
        sub_10001DAB4(v142, &qword_10163B940);
        sub_10001DAB4(v144, &qword_10163B938);
        sub_10001DAB4(v143, &qword_10163B938);

        (*(void (**)(uint64_t, uint64_t))(v146 + 8))(v145, v147);
      }
      v204 = *(void (**)(uint64_t, uint64_t))(v0 + 1800);
      uint64_t v215 = *(int *)(v0 + 2836);
      uint64_t v219 = *(int *)(v0 + 2832);
      uint64_t v221 = *(int *)(v0 + 2828);
      v261 = *(void (**)(void))(v0 + 1784);
      uint64_t v148 = *(void *)(v0 + 1656);
      uint64_t v149 = *(void *)(v0 + 1624);
      uint64_t v150 = *(void *)(v0 + 1608);
      unint64_t v151 = *(int **)(v0 + 1504);
      uint64_t v251 = *(void *)(v0 + 984);
      uint64_t v256 = *(void *)(v0 + 1616);
      uint64_t v195 = (uint64_t *)(v148 + *(int *)(v0 + 2840));
      v224 = (uint64_t *)(v148 + *(int *)(v0 + 2824));
      uint64_t v234 = (uint64_t *)(v148 + *(int *)(v0 + 2820));
      uint64_t v152 = (uint64_t *)(v148 + *(int *)(v0 + 2816));
      uint64_t v153 = v148 + *(int *)(v0 + 2812);
      uint64_t v246 = v153;
      uint64_t v154 = v149 + v151[12];
      uint64_t v201 = v154;
      uint64_t v155 = (void *)(v149 + v151[16]);
      unint64_t v156 = (void *)(v149 + v151[20]);
      long long v176 = (void *)(v149 + v151[24]);
      uint64_t v183 = v151[28];
      uint64_t v211 = v151[32];
      uint64_t v190 = (void *)(v149 + v151[40]);
      uint64_t v179 = v151[36];
      ((void (*)(uint64_t, uint64_t))v261)(v149, v148);
      sub_10001D074(v153, v154, &qword_101638CF0);
      uint64_t v238 = *v152;
      uint64_t v157 = *v152;
      uint64_t v241 = v152[1];
      *(void *)(v0 + 1984) = v241;
      *uint64_t v155 = v157;
      v155[1] = v241;
      uint64_t v231 = *v234;
      uint64_t v158 = *v234;
      uint64_t v235 = v234[1];
      *(void *)(v0 + 1992) = v235;
      *unint64_t v156 = v158;
      v156[1] = v235;
      uint64_t v159 = *v224;
      uint64_t v225 = v224[1];
      uint64_t v228 = v159;
      *long long v176 = v159;
      v176[1] = v225;
      LODWORD(v221) = *(_DWORD *)(v148 + v221);
      uint64_t v198 = v149;
      *(_DWORD *)(v149 + v183) = v221;
      LODWORD(v219) = *(_DWORD *)(v148 + v219);
      *(_DWORD *)(v149 + v211) = v219;
      uint64_t v216 = *(void *)(v148 + v215);
      *(void *)(v149 + v179) = v216;
      uint64_t v161 = v195[1];
      uint64_t v212 = *v195;
      uint64_t v160 = *v195;
      *(void *)(v0 + 2000) = v161;
      *uint64_t v190 = v160;
      v190[1] = v161;
      uint64_t v162 = v256 + v151[12];
      uint64_t v196 = v162;
      uint64_t v163 = (void *)(v256 + v151[16]);
      uint64_t v164 = (void *)(v256 + v151[20]);
      uint64_t v165 = (void *)(v256 + v151[24]);
      uint64_t v184 = v151[32];
      uint64_t v191 = v151[28];
      uint64_t v180 = v151[36];
      uint64_t v166 = (void *)(v256 + v151[40]);
      v261();
      sub_10001D074(v246, v162, &qword_101638CF0);
      void *v163 = v238;
      v163[1] = v241;
      *uint64_t v164 = v231;
      v164[1] = v235;
      *uint64_t v165 = v228;
      v165[1] = v225;
      *(_DWORD *)(v256 + v191) = v221;
      *(_DWORD *)(v256 + v184) = v219;
      *(void *)(v256 + v180) = v216;
      *uint64_t v166 = v212;
      v166[1] = v161;
      uint64_t v167 = v150 + v151[12];
      uint64_t v168 = (void *)(v150 + v151[16]);
      uint64_t v169 = (void *)(v150 + v151[20]);
      uint64_t v170 = (void *)(v150 + v151[24]);
      uint64_t v185 = v151[32];
      uint64_t v192 = v151[28];
      v171 = (void *)(v150 + v151[40]);
      uint64_t v172 = v151[36];
      ((void (*)(uint64_t, uint64_t, uint64_t))v261)(v150, v148, v251);
      sub_10001D074(v246, v167, &qword_101638CF0);
      *uint64_t v168 = v238;
      v168[1] = v241;
      *uint64_t v169 = v231;
      v169[1] = v235;
      *uint64_t v170 = v228;
      v170[1] = v225;
      *(_DWORD *)(v150 + v192) = v221;
      *(_DWORD *)(v150 + v185) = v219;
      *(void *)(v150 + v172) = v216;
      void *v171 = v212;
      v171[1] = v161;
      *(void *)(v0 + 16) = v238;
      *(void *)(v0 + 24) = v241;
      *(void *)(v0 + 32) = v216;
      *(void *)(v0 + 40) = v212;
      *(void *)(v0 + 48) = v161;
      *(void *)(v0 + 56) = v231;
      *(void *)(v0 + 64) = v235;
      *(void *)(v0 + 72) = 0;
      *(void *)(v0 + 80) = 0;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_10001DAB4(v167, &qword_101638CF0);
      v204(v150, v251);
      sub_10001DAB4(v196, &qword_101638CF0);
      v204(v256, v251);
      sub_10001DAB4(v201, &qword_101638CF0);
      v204(v198, v251);
      uint64_t v173 = (void *)swift_task_alloc();
      *(void *)(v0 + 2008) = v173;
      *uint64_t v173 = v0;
      v173[1] = sub_100F9CF88;
      return sub_100E57788();
    }
  }
  else
  {
    uint64_t v61 = *(void *)(v0 + 1896) + 1;
    *(void *)(v0 + 1904) = v262;
    *(void *)(v0 + 1896) = v61;
    *(void *)(v0 + 1888) = v30;
    uint64_t v263 = *(int *)(v0 + 2792);
    uint64_t v62 = *(void *)(v0 + 1120);
    uint64_t v63 = *(void *)(v0 + 1112);
    unint64_t v64 = (uint64_t *)(v62 + *(int *)(v0 + 2848));
    uint64_t v65 = (uint64_t *)(v62 + *(int *)(v0 + 2844));
    uint64_t v66 = *(void *)(v0 + 1080);
    uint64_t v67 = *(void *)(v0 + 992);
    uint64_t v248 = *(void *)(v0 + 1776) + *(int *)(v0 + 2796);
    uint64_t v254 = *(void *)(v0 + 1776);
    uint64_t v243 = *(void *)(v0 + 984);
    sub_10001D074(*(void *)(v0 + 1856)+ ((*(unsigned __int8 *)(v0 + 2852) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 2852))+ *(void *)(v0 + 1880) * v61, v62, &qword_10163A820);
    uint64_t v68 = *(int *)(v66 + 48);
    *(_DWORD *)(v0 + 2856) = v68;
    uint64_t v69 = (uint64_t *)(v63 + v68);
    uint64_t v70 = *(int *)(v66 + 64);
    *(_DWORD *)(v0 + 2860) = v70;
    uint64_t v71 = (uint64_t *)(v63 + v70);
    uint64_t v72 = *v65;
    uint64_t v73 = v65[1];
    uint64_t v260 = v72;
    uint64_t v75 = *v64;
    uint64_t v74 = v64[1];
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v67 + 32))(v63, v62, v243);
    *uint64_t v69 = v72;
    v69[1] = v73;
    *uint64_t v71 = v75;
    v71[1] = v74;
    uint64_t v76 = *(void *)(v248 + 8);
    uint64_t v77 = *(void *)(v248 + 16);
    char v78 = *(unsigned char *)(v254 + v263);
    uint64_t v79 = (void *)swift_task_alloc();
    *(void *)(v0 + 1912) = v79;
    *uint64_t v79 = v0;
    v79[1] = sub_100F9AC2C;
    uint64_t v80 = *(void *)(v0 + 1288);
    uint64_t v81 = *(void *)(v0 + 1112);
    uint64_t v269 = v76;
    uint64_t v270 = v77;
    return sub_100EA09DC(v80, v78, v81, v260, v73, v75, v74);
  }
}

uint64_t sub_100F9C7A8()
{
  uint64_t v20 = v0;
  sub_10001DAB4(v0[139], &qword_10163A820);
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[178];
  uint64_t v2 = v0[173];
  uint64_t v3 = v0[172];
  uint64_t v4 = sub_100010324(v3, (uint64_t)qword_10170D788);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = v0[178];
  uint64_t v9 = v0[173];
  uint64_t v10 = v0[172];
  uint64_t v11 = v0[144];
  if (v7)
  {
    uint64_t v18 = v0[172];
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315138;
    swift_getErrorValue();
    uint64_t v13 = Error.localizedDescription.getter();
    v0[77] = sub_1008FA0F0(v13, v14, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failure on handleCircleTrust, preparing initial data: %s", v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v18);
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  }
  sub_10001DAB4(v11, (uint64_t *)&unk_10163B890);
  uint64_t v15 = v0[222];
  sub_10001DAB4(v0[207], &qword_10163B938);
  sub_10001DAB4(v15, &qword_10163B940);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

uint64_t sub_100F9CF88(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 848);
  *(void *)(*(void *)v1 + 2016) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100F9D0A0, v2, 0);
}

uint64_t sub_100F9D0A0()
{
  uid_t v1 = getuid();
  sub_100DC5FC0(v1);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[253] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100F9D158;
  uint64_t v3 = v0[207];
  uint64_t v4 = v0[133];
  return sub_1012DF504((uint64_t)(v0 + 2), v3, v4);
}

uint64_t sub_100F9D158()
{
  uint64_t v2 = (void *)*v1;
  uint64_t v3 = (void *)*v1;
  v2[254] = v0;
  swift_task_dealloc();
  uint64_t v4 = (void (*)(uint64_t, uint64_t))v2[225];
  uint64_t v5 = v2[133];
  uint64_t v6 = v2[123];
  if (v0)
  {
    uint64_t v7 = v2[106];
    v4(v5, v6);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return _swift_task_switch(sub_100FABF30, v7, 0);
  }
  else
  {
    v4(v5, v6);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v8 = (void *)swift_task_alloc();
    v2[255] = v8;
    *uint64_t v8 = v3;
    v8[1] = sub_100F9D3E8;
    return sub_100E57EC8(15);
  }
}

uint64_t sub_100F9D3E8()
{
  uid_t v1 = (void *)*v0;
  uint64_t v2 = (void *)*v0;
  swift_task_dealloc();
  v1[256] = v1[254];
  uint64_t v3 = (void *)swift_task_alloc();
  v1[257] = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_100F9D558;
  uint64_t v4 = v1[207];
  return sub_100E5B3AC(v4);
}

uint64_t sub_100F9D558(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 848);
  *(void *)(*(void *)v1 + 2064) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100F9D670, v2, 0);
}

uint64_t sub_100F9D670()
{
  uint64_t v58 = *(int *)(v0 + 2836);
  uint64_t v59 = *(int *)(v0 + 2840);
  uint64_t v56 = *(int *)(v0 + 2828);
  uint64_t v57 = *(int *)(v0 + 2832);
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 1784);
  uint64_t v2 = *(void *)(v0 + 1656);
  uint64_t v3 = *(void *)(v0 + 1600);
  uint64_t v4 = *(int **)(v0 + 1504);
  uint64_t v5 = *(void *)(v0 + 992);
  uint64_t v54 = *(void *)(v0 + 984);
  uint64_t v55 = (void *)(v2 + *(int *)(v0 + 2824));
  uint64_t v6 = (void *)(v2 + *(int *)(v0 + 2820));
  uint64_t v7 = (void *)(v2 + *(int *)(v0 + 2816));
  uint64_t v49 = v2 + *(int *)(v0 + 2812);
  *(void *)(v0 + 552) = _swiftEmptyArrayStorage;
  uint64_t v8 = v3 + v4[12];
  uint64_t v9 = (void *)(v3 + v4[16]);
  uint64_t v10 = (void *)(v3 + v4[20]);
  uint64_t v11 = (void *)(v3 + v4[24]);
  uint64_t v50 = v4[28];
  uint64_t v51 = v4[32];
  uint64_t v52 = v4[36];
  uint64_t v53 = v4[40];
  v1(v3, v2);
  sub_10001D074(v49, v8, &qword_101638CF0);
  uint64_t v12 = v7[1];
  void *v9 = *v7;
  v9[1] = v12;
  uint64_t v13 = v6[1];
  *uint64_t v10 = *v6;
  v10[1] = v13;
  uint64_t v14 = v55[1];
  *uint64_t v11 = *v55;
  v11[1] = v14;
  *(_DWORD *)(v3 + v50) = *(_DWORD *)(v2 + v56);
  *(_DWORD *)(v3 + v51) = *(_DWORD *)(v2 + v57);
  *(void *)(v3 + v52) = *(void *)(v2 + v58);
  *(_OWORD *)(v3 + v53) = *(_OWORD *)(v2 + v59);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  *(void *)(v0 + 2072) = v15;
  *(void *)(v0 + 2080) = (v5 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  int v16 = v15(v8, 1, v54);
  uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v0 + 1800);
  uint64_t v18 = *(void *)(v0 + 1600);
  if (v16 == 1)
  {
    uint64_t v19 = *(void *)(v0 + 984);
    sub_10001DAB4(v8, &qword_101638CF0);
    v17(v18, v19);
    *(void *)(v0 + 2200) = *(void *)(v0 + 2048);
    (*(void (**)(void, void, void))(v0 + 1968))(*(void *)(v0 + 1480), *(void *)(v0 + 1960), *(void *)(v0 + 1376));
    uint64_t v20 = *(void *)(v0 + 552);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    BOOL v23 = os_log_type_enabled(v21, v22);
    uint64_t v24 = *(void *)(v0 + 2064);
    if (v23)
    {
      uint64_t v25 = swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 134218240;
      uint64_t v26 = *(void *)(v24 + 16);
      swift_bridgeObjectRelease();
      *(void *)(v0 + 696) = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v25 + 12) = 2048;
      uint64_t v27 = *(void *)(v20 + 16);
      swift_bridgeObjectRelease();
      *(void *)(v0 + 704) = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Existing member circles for beacon %ld, by owner beacon id: %ld.", (uint8_t *)v25, 0x16u);
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }

    uint64_t v34 = *(void *)(v0 + 2064);
    uint64_t v35 = *(void *)(v0 + 1480);
    uint64_t v36 = *(void *)(v0 + 1384);
    uint64_t v37 = *(void *)(v0 + 1376);
    uint64_t v38 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
    *(void *)(v0 + 2208) = v38;
    *(void *)(v0 + 2216) = (v36 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v38(v35, v37);
    swift_beginAccess();
    uint64_t v39 = swift_bridgeObjectRetain();
    sub_1004443F4(v39);
    uint64_t v40 = v34;
    *(void *)(v0 + 2224) = v34;
    uint64_t v41 = *(void *)(v34 + 16);
    *(void *)(v0 + 2232) = v41;
    if (v41)
    {
      uint64_t v42 = *(void *)(v0 + 1816);
      uint64_t v43 = *(void *)(v0 + 1312);
      uint64_t v44 = *(_DWORD **)(v0 + 936);
      int v45 = *(_DWORD *)(v43 + 80);
      *(_DWORD *)(v0 + 2872) = v45;
      *(void *)(v0 + 2240) = *(void *)(v43 + 72);
      *(void *)(v0 + 2256) = _swiftEmptyArrayStorage;
      *(void *)(v0 + 2248) = 0;
      uint64_t v46 = *(void *)(v0 + 1360);
      uint64_t v47 = v40 + ((v45 + 32) & ~(unint64_t)v45);
      swift_bridgeObjectRetain();
      sub_100FB6BB8(v47, v46, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      *(_DWORD *)(v0 + 2876) = v44[12];
      *(_DWORD *)(v0 + 2880) = v44[16];
      *(_DWORD *)(v0 + 2884) = v44[20];
      *(_DWORD *)(v0 + 2888) = v44[24];
      return _swift_task_switch(sub_100F9EAD4, v42, 0);
    }
    *(void *)(v0 + 2312) = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    uint64_t v32 = (void *)swift_task_alloc();
    *(void *)(v0 + 2320) = v32;
    *uint64_t v32 = v0;
    uint64_t v33 = sub_100F9F2A4;
  }
  else
  {
    uint64_t v28 = *(void *)(v0 + 1056);
    uint64_t v29 = *(void *)(v0 + 992);
    uint64_t v30 = *(void *)(v0 + 984);
    uint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 32);
    *(void *)(v0 + 2088) = v31;
    *(void *)(v0 + 2096) = (v29 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v31(v28, v8, v30);
    v17(v18, v30);
    uint64_t v32 = (void *)swift_task_alloc();
    *(void *)(v0 + 2104) = v32;
    *uint64_t v32 = v0;
    uint64_t v33 = sub_100F9DBC4;
  }
  v32[1] = v33;
  return sub_100E5E984();
}

uint64_t sub_100F9DBC4(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 848);
  *(void *)(*(void *)v1 + 2112) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100F9DCDC, v2, 0);
}

uint64_t sub_100F9DCDC()
{
  uint64_t v63 = *(void *)(v0 + 2112);
  uint64_t v64 = *(void *)(v0 + 2048);
  uint64_t v60 = *(int *)(v0 + 2832);
  uint64_t v61 = *(int *)(v0 + 2836);
  uint64_t v59 = *(int *)(v0 + 2828);
  uint64_t v1 = *(void *)(v0 + 1656);
  uint64_t v2 = *(void *)(v0 + 1592);
  uint64_t v3 = *(int **)(v0 + 1504);
  uint64_t v62 = *(void *)(v0 + 1056);
  uint64_t v58 = (void *)(v1 + *(int *)(v0 + 2840));
  uint64_t v4 = (uint64_t *)(v1 + *(int *)(v0 + 2824));
  uint64_t v5 = (void *)(v1 + *(int *)(v0 + 2820));
  uint64_t v6 = (uint64_t *)(v1 + *(int *)(v0 + 2816));
  uint64_t v54 = v1 + *(int *)(v0 + 2812);
  uint64_t v53 = v2 + v3[12];
  uint64_t v7 = (void *)(v2 + v3[16]);
  uint64_t v8 = (void *)(v2 + v3[20]);
  uint64_t v9 = (void *)(v2 + v3[24]);
  uint64_t v56 = v3[28];
  uint64_t v57 = v3[32];
  uint64_t v10 = (void *)(v2 + v3[40]);
  uint64_t v55 = v3[36];
  (*(void (**)(uint64_t, uint64_t, void))(v0 + 1784))(v2, v1, *(void *)(v0 + 984));
  sub_10001D074(v54, v53, &qword_101638CF0);
  uint64_t v11 = *v6;
  uint64_t v12 = v6[1];
  *uint64_t v7 = v11;
  v7[1] = v12;
  uint64_t v13 = v5[1];
  *uint64_t v8 = *v5;
  v8[1] = v13;
  uint64_t v14 = *v4;
  uint64_t v15 = v4[1];
  void *v9 = v14;
  v9[1] = v15;
  *(_DWORD *)(v2 + v56) = *(_DWORD *)(v1 + v59);
  *(_DWORD *)(v2 + v57) = *(_DWORD *)(v1 + v60);
  *(void *)(v2 + v55) = *(void *)(v1 + v61);
  uint64_t v16 = v58[1];
  *uint64_t v10 = *v58;
  v10[1] = v16;
  uint64_t v17 = (void *)swift_task_alloc();
  v17[2] = v2;
  v17[3] = v62;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v18 = sub_1000A427C((uint64_t (*)(char *))sub_100FB68E8, v17, v63);
  *(void *)(v0 + 2120) = v18;
  *(void *)(v0 + 2128) = v64;
  swift_task_dealloc();
  sub_10001DAB4(v2, &qword_10163B938);
  uint64_t v19 = *(void *)(v18 + 16);
  *(void *)(v0 + 2136) = v19;
  if (v19)
  {
    uint64_t v20 = *(void *)(v0 + 1816);
    uint64_t v21 = *(void *)(v0 + 1208);
    uint64_t v22 = *(void *)(v0 + 1168);
    uint64_t v23 = *(int *)(*(void *)(v0 + 1160) + 20);
    *(_DWORD *)(v0 + 2864) = v23;
    int v24 = *(_DWORD *)(v22 + 80);
    *(_DWORD *)(v0 + 2868) = v24;
    *(void *)(v0 + 2144) = *(void *)(v22 + 72);
    *(void *)(v0 + 2152) = 0;
    uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1784);
    uint64_t v26 = *(void *)(v0 + 1072);
    uint64_t v27 = *(void *)(v0 + 984);
    uint64_t v28 = v21 + v23;
    sub_100FB6BB8(*(void *)(v0 + 2120) + ((v24 + 32) & ~(unint64_t)v24), v21, type metadata accessor for SharedBeaconRecord);
    v25(v26, v28, v27);
    sub_100FB893C(v21, type metadata accessor for SharedBeaconRecord);
    uint64_t v29 = sub_100F9E2A0;
LABEL_8:
    return _swift_task_switch(v29, v20, 0);
  }
  swift_bridgeObjectRelease();
  (*(void (**)(void, void))(v0 + 1800))(*(void *)(v0 + 1056), *(void *)(v0 + 984));
  *(void *)(v0 + 2200) = *(void *)(v0 + 2128);
  (*(void (**)(void, void, void))(v0 + 1968))(*(void *)(v0 + 1480), *(void *)(v0 + 1960), *(void *)(v0 + 1376));
  uint64_t v30 = *(void *)(v0 + 552);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.default.getter();
  BOOL v33 = os_log_type_enabled(v31, v32);
  uint64_t v34 = *(void *)(v0 + 2064);
  if (v33)
  {
    uint64_t v35 = swift_slowAlloc();
    *(_DWORD *)uint64_t v35 = 134218240;
    uint64_t v36 = *(void *)(v34 + 16);
    swift_bridgeObjectRelease();
    *(void *)(v0 + 696) = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v35 + 12) = 2048;
    uint64_t v37 = *(void *)(v30 + 16);
    swift_bridgeObjectRelease();
    *(void *)(v0 + 704) = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "Existing member circles for beacon %ld, by owner beacon id: %ld.", (uint8_t *)v35, 0x16u);
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }

  uint64_t v38 = *(void *)(v0 + 2064);
  uint64_t v39 = *(void *)(v0 + 1480);
  uint64_t v40 = *(void *)(v0 + 1384);
  uint64_t v41 = *(void *)(v0 + 1376);
  uint64_t v42 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
  *(void *)(v0 + 2208) = v42;
  *(void *)(v0 + 2216) = (v40 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v42(v39, v41);
  swift_beginAccess();
  uint64_t v43 = swift_bridgeObjectRetain();
  sub_1004443F4(v43);
  uint64_t v44 = v38;
  *(void *)(v0 + 2224) = v38;
  uint64_t v45 = *(void *)(v38 + 16);
  *(void *)(v0 + 2232) = v45;
  if (v45)
  {
    uint64_t v20 = *(void *)(v0 + 1816);
    uint64_t v46 = *(void *)(v0 + 1312);
    uint64_t v47 = *(_DWORD **)(v0 + 936);
    int v48 = *(_DWORD *)(v46 + 80);
    *(_DWORD *)(v0 + 2872) = v48;
    *(void *)(v0 + 2240) = *(void *)(v46 + 72);
    *(void *)(v0 + 2256) = _swiftEmptyArrayStorage;
    *(void *)(v0 + 2248) = 0;
    uint64_t v49 = *(void *)(v0 + 1360);
    uint64_t v50 = v44 + ((v48 + 32) & ~(unint64_t)v48);
    swift_bridgeObjectRetain();
    sub_100FB6BB8(v50, v49, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    *(_DWORD *)(v0 + 2876) = v47[12];
    *(_DWORD *)(v0 + 2880) = v47[16];
    *(_DWORD *)(v0 + 2884) = v47[20];
    *(_DWORD *)(v0 + 2888) = v47[24];
    uint64_t v29 = sub_100F9EAD4;
    goto LABEL_8;
  }
  *(void *)(v0 + 2312) = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain();
  uint64_t v51 = (void *)swift_task_alloc();
  *(void *)(v0 + 2320) = v51;
  *uint64_t v51 = v0;
  v51[1] = sub_100F9F2A4;
  return sub_100E5E984();
}

uint64_t sub_100F9E2A0()
{
  uint64_t v1 = (void (*)(unint64_t, uint64_t, uint64_t))v0[261];
  uint64_t v2 = v0[227];
  uint64_t v3 = (void (*)(uint64_t, uint64_t, uint64_t))v0[223];
  uint64_t v4 = v0[134];
  uint64_t v5 = v0[131];
  uint64_t v6 = v0[124];
  uint64_t v7 = v0[123];
  v0[270] = *(void *)(v2 + 136);
  v3(v5, v4, v7);
  unint64_t v8 = (*(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = swift_allocObject();
  v0[271] = v9;
  *(void *)(v9 + 16) = v2;
  v1(v9 + v8, v5, v7);
  swift_retain();
  return _swift_task_switch(sub_100F9E398, 0, 0);
}

uint64_t sub_100F9E398()
{
  uint64_t v1 = v0[271];
  uint64_t v2 = v0[270];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[272] = v3;
  v3[2] = v2;
  v3[3] = sub_10088416C;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[273] = v4;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101653DF0);
  *uint64_t v4 = v0;
  v4[1] = sub_100F9E4B4;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 89, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1000730E0, v3, v5);
}

uint64_t sub_100F9E4B4()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 1816);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 2192) = *(void *)(v1 + 712);
  return _swift_task_switch(sub_100F9E624, v2, 0);
}

uint64_t sub_100F9E624()
{
  uint64_t v1 = *(void *)(v0 + 848);
  (*(void (**)(void, void))(v0 + 1800))(*(void *)(v0 + 1072), *(void *)(v0 + 984));
  return _swift_task_switch(sub_100F9E69C, v1, 0);
}

uint64_t sub_100F9E69C()
{
  uint64_t v1 = *(void *)(v0 + 2136);
  uint64_t v2 = *(void *)(v0 + 2152) + 1;
  sub_1004443F4(*(void *)(v0 + 2192));
  if (v2 != v1)
  {
    uint64_t v11 = *(void *)(v0 + 2152) + 1;
    *(void *)(v0 + 2152) = v11;
    uint64_t v12 = *(void *)(v0 + 1816);
    uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1784);
    uint64_t v14 = *(void *)(v0 + 1208);
    uint64_t v15 = *(void *)(v0 + 1072);
    uint64_t v16 = *(void *)(v0 + 984);
    uint64_t v17 = v14 + *(int *)(v0 + 2864);
    sub_100FB6BB8(*(void *)(v0 + 2120)+ ((*(unsigned __int8 *)(v0 + 2868) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 2868))+ *(void *)(v0 + 2144) * v11, v14, type metadata accessor for SharedBeaconRecord);
    v13(v15, v17, v16);
    sub_100FB893C(v14, type metadata accessor for SharedBeaconRecord);
    uint64_t v18 = sub_100F9E2A0;
LABEL_8:
    return _swift_task_switch(v18, v12, 0);
  }
  swift_bridgeObjectRelease();
  (*(void (**)(void, void))(v0 + 1800))(*(void *)(v0 + 1056), *(void *)(v0 + 984));
  *(void *)(v0 + 2200) = *(void *)(v0 + 2128);
  (*(void (**)(void, void, void))(v0 + 1968))(*(void *)(v0 + 1480), *(void *)(v0 + 1960), *(void *)(v0 + 1376));
  uint64_t v3 = *(void *)(v0 + 552);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void *)(v0 + 2064);
  if (v6)
  {
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 134218240;
    uint64_t v9 = *(void *)(v7 + 16);
    swift_bridgeObjectRelease();
    *(void *)(v0 + 696) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2048;
    uint64_t v10 = *(void *)(v3 + 16);
    swift_bridgeObjectRelease();
    *(void *)(v0 + 704) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Existing member circles for beacon %ld, by owner beacon id: %ld.", (uint8_t *)v8, 0x16u);
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }

  uint64_t v19 = *(void *)(v0 + 2064);
  uint64_t v20 = *(void *)(v0 + 1480);
  uint64_t v21 = *(void *)(v0 + 1384);
  uint64_t v22 = *(void *)(v0 + 1376);
  uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
  *(void *)(v0 + 2208) = v23;
  *(void *)(v0 + 2216) = (v21 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v23(v20, v22);
  swift_beginAccess();
  uint64_t v24 = swift_bridgeObjectRetain();
  sub_1004443F4(v24);
  uint64_t v25 = v19;
  *(void *)(v0 + 2224) = v19;
  uint64_t v26 = *(void *)(v19 + 16);
  *(void *)(v0 + 2232) = v26;
  if (v26)
  {
    uint64_t v12 = *(void *)(v0 + 1816);
    uint64_t v27 = *(void *)(v0 + 1312);
    uint64_t v28 = *(_DWORD **)(v0 + 936);
    int v29 = *(_DWORD *)(v27 + 80);
    *(_DWORD *)(v0 + 2872) = v29;
    *(void *)(v0 + 2240) = *(void *)(v27 + 72);
    *(void *)(v0 + 2256) = _swiftEmptyArrayStorage;
    *(void *)(v0 + 2248) = 0;
    uint64_t v30 = *(void *)(v0 + 1360);
    uint64_t v31 = v25 + ((v29 + 32) & ~(unint64_t)v29);
    swift_bridgeObjectRetain();
    sub_100FB6BB8(v31, v30, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    *(_DWORD *)(v0 + 2876) = v28[12];
    *(_DWORD *)(v0 + 2880) = v28[16];
    *(_DWORD *)(v0 + 2884) = v28[20];
    *(_DWORD *)(v0 + 2888) = v28[24];
    uint64_t v18 = sub_100F9EAD4;
    goto LABEL_8;
  }
  *(void *)(v0 + 2312) = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain();
  os_log_type_t v32 = (void *)swift_task_alloc();
  *(void *)(v0 + 2320) = v32;
  *os_log_type_t v32 = v0;
  v32[1] = sub_100F9F2A4;
  return sub_100E5E984();
}

uint64_t sub_100F9EAD4()
{
  uint64_t v1 = *(void *)(v0 + 1816);
  uint64_t v2 = *(void *)(v0 + 1360);
  uint64_t v3 = *(void *)(v0 + 1352);
  unint64_t v4 = (*(unsigned __int8 *)(v0 + 2872) + 24) & ~(unint64_t)*(unsigned __int8 *)(v0 + 2872);
  *(void *)(v0 + 2264) = *(void *)(v1 + 136);
  sub_100FB6BB8(v2, v3, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  uint64_t v5 = swift_allocObject();
  *(void *)(v0 + 2272) = v5;
  *(void *)(v5 + 16) = v1;
  sub_100FB6C70(v3, v5 + v4, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  swift_retain();
  return _swift_task_switch(sub_100F9EBD4, 0, 0);
}

uint64_t sub_100F9EBD4()
{
  uint64_t v1 = v0[284];
  uint64_t v2 = v0[283];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[285] = v3;
  v3[2] = v2;
  v3[3] = sub_100FB2DE4;
  v3[4] = v1;
  unint64_t v4 = (void *)swift_task_alloc();
  v0[286] = v4;
  *unint64_t v4 = v0;
  v4[1] = sub_100F9ECE0;
  uint64_t v5 = v0[121];
  uint64_t v6 = v0[117];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100E8C58C, v3, v6);
}

uint64_t sub_100F9ECE0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 1816);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_100F9EE30, v1, 0);
}

uint64_t sub_100F9EE30()
{
  uint64_t v1 = *(void *)(v0 + 976);
  uint64_t v2 = *(void *)(v0 + 968);
  uint64_t v3 = *(int **)(v0 + 936);
  uint64_t v4 = *(void *)(v0 + 848);
  uint64_t v5 = v1 + *(int *)(v0 + 2880);
  uint64_t v6 = v1 + *(int *)(v0 + 2876);
  uint64_t v7 = v2 + v3[12];
  uint64_t v8 = v2 + v3[16];
  *(void *)(v0 + 2296) = *(void *)(v2 + v3[20]);
  *(void *)(v0 + 2304) = *(void *)(v2 + v3[24]);
  sub_100FB6C70(v2, v1, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  sub_10001D608(v7, v6, (uint64_t *)&unk_101653D50);
  sub_10001D608(v8, v5, &qword_10163B9E0);
  return _swift_task_switch(sub_100F9EF28, v4, 0);
}

uint64_t sub_100F9EF28()
{
  uint64_t v1 = *(void *)(v0 + 2304);
  uint64_t v2 = *(void *)(v0 + 2296);
  uint64_t v3 = *(int *)(v0 + 2888);
  uint64_t v4 = *(void *)(v0 + 976);
  uint64_t v5 = *(void *)(v0 + 960);
  uint64_t v6 = *(void *)(v0 + 952);
  uint64_t v7 = *(int **)(v0 + 936);
  uint64_t v33 = v4 + *(int *)(v0 + 2880);
  uint64_t v8 = v4 + *(int *)(v0 + 2876);
  *(void *)(v4 + *(int *)(v0 + 2884)) = v2;
  *(void *)(v4 + v3) = v1;
  uint64_t v9 = v5 + v7[12];
  uint64_t v10 = v5 + v7[16];
  uint64_t v31 = v7[20];
  uint64_t v32 = v10;
  uint64_t v11 = v7[24];
  sub_100FB6BB8(v4, v5, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  sub_10001D074(v8, v9, (uint64_t *)&unk_101653D50);
  sub_10001D074(v33, v10, &qword_10163B9E0);
  *(void *)(v5 + v31) = v2;
  *(void *)(v5 + v11) = v1;
  uint64_t v12 = v6 + v7[12];
  uint64_t v13 = v6 + v7[16];
  uint64_t v14 = v7[20];
  uint64_t v15 = v7[24];
  sub_100FB6C70(v5, v6, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  sub_10001D608(v9, v12, (uint64_t *)&unk_101653D50);
  sub_10001D608(v32, v13, &qword_10163B9E0);
  *(void *)(v6 + v14) = v2;
  *(void *)(v6 + v15) = v1;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v17 = *(void *)(v0 + 2256);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    unint64_t v17 = sub_100A6EDF8(0, *(void *)(v17 + 16) + 1, 1, *(void *)(v0 + 2256));
  }
  unint64_t v19 = *(void *)(v17 + 16);
  unint64_t v18 = *(void *)(v17 + 24);
  if (v19 >= v18 >> 1) {
    unint64_t v17 = sub_100A6EDF8(v18 > 1, v19 + 1, 1, v17);
  }
  uint64_t v20 = *(void *)(v0 + 2232);
  uint64_t v21 = *(void *)(v0 + 1360);
  uint64_t v22 = *(void *)(v0 + 976);
  uint64_t v23 = *(void *)(v0 + 952);
  uint64_t v24 = *(void *)(v0 + 944);
  uint64_t v25 = *(void *)(v0 + 2248) + 1;
  *(void *)(v17 + 16) = v19 + 1;
  sub_10001D608(v23, v17+ ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80))+ *(void *)(v24 + 72) * v19, &qword_10163BA20);
  sub_10001DAB4(v22, &qword_10163BA20);
  sub_100FB893C(v21, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  if (v25 == v20)
  {
    swift_bridgeObjectRelease();
    *(void *)(v0 + 2312) = v17;
    swift_bridgeObjectRetain();
    uint64_t v26 = (void *)swift_task_alloc();
    *(void *)(v0 + 2320) = v26;
    *uint64_t v26 = v0;
    v26[1] = sub_100F9F2A4;
    return sub_100E5E984();
  }
  else
  {
    uint64_t v28 = *(void *)(v0 + 2248) + 1;
    *(void *)(v0 + 2256) = v17;
    *(void *)(v0 + 2248) = v28;
    uint64_t v29 = *(void *)(v0 + 1816);
    uint64_t v30 = *(_DWORD **)(v0 + 936);
    sub_100FB6BB8(*(void *)(v0 + 2224)+ ((*(unsigned __int8 *)(v0 + 2872) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 2872))+ *(void *)(v0 + 2240) * v28, *(void *)(v0 + 1360), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    *(_DWORD *)(v0 + 2876) = v30[12];
    *(_DWORD *)(v0 + 2880) = v30[16];
    *(_DWORD *)(v0 + 2884) = v30[20];
    *(_DWORD *)(v0 + 2888) = v30[24];
    return _swift_task_switch(sub_100F9EAD4, v29, 0);
  }
}

uint64_t sub_100F9F2A4(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 848);
  *(void *)(*(void *)v1 + 2328) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100F9F3BC, v2, 0);
}

uint64_t sub_100F9F3BC()
{
  uint64_t v1 = *(void *)(v0 + 2224);
  uint64_t v2 = sub_100F89D58(_swiftEmptyDictionarySingleton, *(void *)(v0 + 2328));
  swift_bridgeObjectRelease();
  uint64_t v3 = *(void *)(v1 + 16);
  if (v3)
  {
    uint64_t v4 = *(void *)(v0 + 1312);
    uint64_t v5 = *(void *)(v0 + 2224)
       + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v6 = *(void *)(v4 + 72);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    while (!sub_100FAD54C(v5, v2))
    {
      v5 += v6;
      if (!--v3)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_6;
      }
    }
    uint64_t v12 = *(int *)(v0 + 2792);
    uint64_t v13 = *(void *)(v0 + 1776);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    int v14 = *(unsigned __int8 *)(v13 + v12);
    char v9 = 1;
    if (v14 != 4)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      *(unsigned char *)(v0 + 2902) = 1;
      uint64_t v22 = *(void *)(v0 + 1272);
      uint64_t v23 = *(void *)(v0 + 1224);
      *(void *)(v0 + 2456) = *(void *)(*(void *)(v0 + 848) + 288);
      uint64_t v19 = v22 + *(int *)(v23 + 28);
      uint64_t v24 = (uint64_t (*)(uint64_t))((char *)&dword_101661678 + dword_101661678);
      uint64_t v20 = (void *)swift_task_alloc();
      *(void *)(v0 + 2464) = v20;
      *uint64_t v20 = v0;
      uint64_t v21 = sub_100FA2A40;
      goto LABEL_14;
    }
LABEL_12:
    *(unsigned char *)(v0 + 2901) = v9;
    uint64_t v15 = *(void *)(v0 + 1296);
    uint64_t v16 = *(void *)(v0 + 1224);
    uint64_t v17 = *(void *)(v0 + 848);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v18 = sub_10001CD44((void *)(v17 + 168), *(void *)(v17 + 192));
    uint64_t v19 = v15 + *(int *)(v16 + 28);
    *(void *)(v0 + 2336) = *v18;
    uint64_t v24 = (uint64_t (*)(uint64_t))((char *)&dword_101661678 + dword_101661678);
    uint64_t v20 = (void *)swift_task_alloc();
    *(void *)(v0 + 2344) = v20;
    *uint64_t v20 = v0;
    uint64_t v21 = sub_100F9F6A4;
LABEL_14:
    v20[1] = v21;
    return v24(v19);
  }
LABEL_6:
  uint64_t v7 = *(int *)(v0 + 2792);
  uint64_t v8 = *(void *)(v0 + 1776);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(unsigned char *)(v8 + v7) == 4)
  {
    char v9 = 0;
    goto LABEL_12;
  }
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v0 + 2392) = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_100FA14E4;
  return sub_100E598C0();
}

uint64_t sub_100F9F6A4(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = (void *)*v4;
  v8[294] = a3;
  swift_task_dealloc();
  if (v3)
  {
    v8[298] = v3;
    uint64_t v9 = v8[106];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v10 = sub_100FA042C;
    uint64_t v11 = v9;
LABEL_3:
    return _swift_task_switch(v10, v11, 0);
  }
  if (!a3)
  {
    uint64_t v11 = v8[106];
    uint64_t v10 = sub_100FA0C68;
    goto LABEL_3;
  }
  int v14 = (uint64_t (*)(char, uint64_t, uint64_t))((char *)&dword_10165CF98 + dword_10165CF98);
  uint64_t v12 = (void *)swift_task_alloc();
  v8[295] = v12;
  *uint64_t v12 = v8;
  v12[1] = sub_100F9F888;
  return v14(a1, a2, a3);
}

uint64_t sub_100F9F888(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v3;
  *(void *)(*v3 + 2368) = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v6 = *(void *)(v5 + 2336);
    uint64_t v7 = sub_100F9FA48;
  }
  else
  {
    uint64_t v8 = *(void *)(v5 + 2336);
    swift_bridgeObjectRelease();
    *(void *)(v5 + 2376) = a2;
    uint64_t v7 = sub_100F9F9C8;
    uint64_t v6 = v8;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_100F9F9C8()
{
  uint64_t v1 = *(void *)(v0 + 2376);
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void *)(v0 + 848);
  if (v1) {
    uint64_t v3 = sub_100F9FAD0;
  }
  else {
    uint64_t v3 = sub_100FA0C68;
  }
  return _swift_task_switch(v3, v2, 0);
}

uint64_t sub_100F9FA48()
{
  swift_bridgeObjectRelease();
  v0[298] = v0[296];
  uint64_t v1 = v0[106];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100FA042C, v1, 0);
}

uint64_t sub_100F9FAD0()
{
  uint64_t v27 = v0;
  if ((*(unsigned int (**)(void, uint64_t, void))(v0 + 2072))(*(void *)(v0 + 1656) + *(int *)(v0 + 2812), 1, *(void *)(v0 + 984)) == 1)
  {
    uint64_t v1 = *(void *)(v0 + 1272);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100CF7910();
    swift_allocError();
    *uint64_t v2 = 6;
    swift_willThrow();
    sub_100FB893C(v1, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
    if (qword_101636888 != -1) {
      swift_once();
    }
    uint64_t v3 = *(void *)(v0 + 1424);
    uint64_t v4 = *(void *)(v0 + 1384);
    uint64_t v5 = *(void *)(v0 + 1376);
    uint64_t v6 = sub_100010324(v5, (uint64_t)qword_10170D788);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v6, v5);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    BOOL v9 = os_log_type_enabled(v7, v8);
    uint64_t v10 = *(void *)(v0 + 1424);
    uint64_t v11 = *(void *)(v0 + 1384);
    uint64_t v12 = *(void *)(v0 + 1376);
    uint64_t v13 = *(void *)(v0 + 1152);
    if (v9)
    {
      int v14 = (uint8_t *)swift_slowAlloc();
      v26[0] = swift_slowAlloc();
      *(_DWORD *)int v14 = 136315138;
      swift_getErrorValue();
      uint64_t v15 = Error.localizedDescription.getter();
      *(void *)(v0 + 616) = sub_1008FA0F0(v15, v16, v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Failure on handleCircleTrust, preparing initial data: %s", v14, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    }
    sub_10001DAB4(v13, (uint64_t *)&unk_10163B890);
    uint64_t v22 = *(void *)(v0 + 1296);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100FB893C(v22, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
    uint64_t v23 = *(void *)(v0 + 1776);
    sub_10001DAB4(*(void *)(v0 + 1656), &qword_10163B938);
    sub_10001DAB4(v23, &qword_10163B940);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v24 = *(uint64_t (**)(void))(v0 + 8);
    return v24();
  }
  else
  {
    *(unsigned char *)(v0 + 2902) = *(unsigned char *)(v0 + 2901);
    uint64_t v17 = *(void *)(v0 + 1272);
    uint64_t v18 = *(void *)(v0 + 1224);
    *(void *)(v0 + 2456) = *(void *)(*(void *)(v0 + 848) + 288);
    uint64_t v19 = v17 + *(int *)(v18 + 28);
    uint64_t v25 = (uint64_t (*)(uint64_t))((char *)&dword_101661678 + dword_101661678);
    uint64_t v20 = (void *)swift_task_alloc();
    *(void *)(v0 + 2464) = v20;
    *uint64_t v20 = v0;
    v20[1] = sub_100FA2A40;
    return v25(v19);
  }
}

uint64_t sub_100FA042C()
{
  uint64_t v20 = v0;
  sub_100FB893C(v0[159], (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[178];
  uint64_t v2 = v0[173];
  uint64_t v3 = v0[172];
  uint64_t v4 = sub_100010324(v3, (uint64_t)qword_10170D788);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = v0[178];
  uint64_t v9 = v0[173];
  uint64_t v10 = v0[172];
  uint64_t v11 = v0[144];
  if (v7)
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315138;
    swift_getErrorValue();
    uint64_t v13 = Error.localizedDescription.getter();
    v0[77] = sub_1008FA0F0(v13, v14, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failure on handleCircleTrust, preparing initial data: %s", v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  }
  sub_10001DAB4(v11, (uint64_t *)&unk_10163B890);
  uint64_t v15 = v0[162];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100FB893C(v15, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
  uint64_t v16 = v0[222];
  sub_10001DAB4(v0[207], &qword_10163B938);
  sub_10001DAB4(v16, &qword_10163B940);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = (uint64_t (*)(void))v0[1];
  return v17();
}

uint64_t sub_100FA0C68()
{
  uint64_t v22 = v0;
  uint64_t v1 = v0[159];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100CF7910();
  swift_allocError();
  *uint64_t v2 = 6;
  swift_willThrow();
  sub_100FB893C(v1, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v3 = v0[178];
  uint64_t v4 = v0[173];
  uint64_t v5 = v0[172];
  uint64_t v6 = sub_100010324(v5, (uint64_t)qword_10170D788);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v6, v5);
  swift_errorRetain();
  swift_errorRetain();
  BOOL v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = v0[178];
  uint64_t v11 = v0[173];
  uint64_t v12 = v0[172];
  uint64_t v13 = v0[144];
  if (v9)
  {
    unint64_t v14 = (uint8_t *)swift_slowAlloc();
    v21[0] = swift_slowAlloc();
    *(_DWORD *)unint64_t v14 = 136315138;
    swift_getErrorValue();
    uint64_t v15 = Error.localizedDescription.getter();
    v0[77] = sub_1008FA0F0(v15, v16, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Failure on handleCircleTrust, preparing initial data: %s", v14, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
  }
  sub_10001DAB4(v13, (uint64_t *)&unk_10163B890);
  uint64_t v17 = v0[162];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100FB893C(v17, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
  uint64_t v18 = v0[222];
  sub_10001DAB4(v0[207], &qword_10163B938);
  sub_10001DAB4(v18, &qword_10163B940);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v19 = (uint64_t (*)(void))v0[1];
  return v19();
}

uint64_t sub_100FA14E4(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 848);
  *(void *)(*(void *)v1 + 2400) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100FA15FC, v2, 0);
}

uint64_t sub_100FA15FC()
{
  v0[75] = v0[300];
  uint64_t v1 = (void *)swift_task_alloc();
  v0[301] = v1;
  uint64_t v2 = sub_10000588C((uint64_t *)&unk_101653DF0);
  uint64_t v3 = sub_100062734((unint64_t *)&qword_10163D768, (uint64_t *)&unk_101653DF0);
  *uint64_t v1 = v0;
  v1[1] = sub_100FA16FC;
  uint64_t v4 = v0[106];
  return Sequence.asyncFilter(_:)(&unk_101665A10, v4, v2, v3);
}

uint64_t sub_100FA16FC(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 848);
  *(void *)(*(void *)v1 + 2416) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100FA1890, v2, 0);
}

uint64_t sub_100FA1890()
{
  v0[303] = *(void *)(v0[302] + 16);
  swift_bridgeObjectRelease();
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  v0[304] = qword_10170E390;
  return _swift_task_switch(sub_100FA193C, 0, 0);
}

uint64_t sub_100FA193C()
{
  swift_retain();
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 2440) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100FA1A04;
  uint64_t v2 = *(void *)(v0 + 2432);
  return unsafeBlocking<A>(_:)(v0 + 624, sub_10001D704, v2, &type metadata for Configuration);
}

uint64_t sub_100FA1A04()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100FA1B1C, 0, 0);
}

uint64_t sub_100FA1B1C()
{
  uint64_t v1 = v0[106];
  v0[306] = v0[78];
  return _swift_task_switch(sub_100FA1B40, v1, 0);
}

uint64_t sub_100FA1B40()
{
  uint64_t v109 = v0;
  unint64_t v1 = *(void *)(v0 + 2424);
  unint64_t v2 = sub_1010AC210(*(void *)(v0 + 2448));
  swift_bridgeObjectRelease();
  if (v1 >= v2)
  {
    unint64_t v79 = v2;
    uint64_t v87 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1968);
    uint64_t v84 = *(void *)(v0 + 1960);
    uint64_t v99 = *(int *)(v0 + 2832);
    uint64_t v94 = *(int *)(v0 + 2840);
    uint64_t v97 = *(int *)(v0 + 2828);
    uint64_t v8 = *(int *)(v0 + 2824);
    uint64_t v9 = *(int *)(v0 + 2820);
    uint64_t v10 = *(int *)(v0 + 2816);
    uint64_t v11 = *(int *)(v0 + 2812);
    uint64_t v92 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1784);
    uint64_t v12 = *(void *)(v0 + 1656);
    uint64_t v13 = *(void *)(v0 + 1584);
    uint64_t v101 = *(void *)(v0 + 1576);
    uint64_t v103 = *(int *)(v0 + 2836);
    unint64_t v14 = *(int **)(v0 + 1504);
    uint64_t v15 = *(void *)(v0 + 1472);
    uint64_t v105 = *(void *)(v0 + 1568);
    uint64_t v16 = *(void *)(v0 + 1376);
    uint64_t v82 = *(void *)(v0 + 984);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v95 = (void *)(v12 + v94);
    uint64_t v91 = (void *)(v12 + v8);
    uint64_t v17 = (void *)(v12 + v9);
    uint64_t v18 = (void *)(v12 + v10);
    uint64_t v81 = v12 + v11;
    v87(v15, v84, v16);
    uint64_t v19 = v13 + v14[12];
    uint64_t v20 = (void *)(v13 + v14[16]);
    uint64_t v21 = (void *)(v13 + v14[20]);
    uint64_t v22 = (void *)(v13 + v14[24]);
    uint64_t v85 = v14[28];
    uint64_t v88 = v14[32];
    uint64_t v90 = v14[36];
    uint64_t v23 = (void *)(v13 + v14[40]);
    v92(v13, v12, v82);
    sub_10001D074(v81, v19, &qword_101638CF0);
    uint64_t v24 = v18[1];
    *uint64_t v20 = *v18;
    v20[1] = v24;
    uint64_t v25 = v17[1];
    *uint64_t v21 = *v17;
    v21[1] = v25;
    uint64_t v26 = v91[1];
    *uint64_t v22 = *v91;
    v22[1] = v26;
    *(_DWORD *)(v13 + v85) = *(_DWORD *)(v12 + v97);
    *(_DWORD *)(v13 + v88) = *(_DWORD *)(v12 + v99);
    *(void *)(v13 + v90) = *(void *)(v12 + v103);
    uint64_t v27 = v95[1];
    *uint64_t v23 = *v95;
    v23[1] = v27;
    sub_10001D074(v13, v101, &qword_10163B938);
    sub_10001D608(v13, v105, &qword_10163B938);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v98 = v28;
      uint64_t v30 = *(void *)(v0 + 2424);
      unint64_t v104 = *(void (**)(uint64_t, uint64_t))(v0 + 2208);
      uint64_t v89 = *(void (**)(uint64_t, uint64_t))(v0 + 1800);
      char v78 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1784);
      uint64_t v31 = *(void *)(v0 + 1624);
      uint64_t v32 = *(void *)(v0 + 1576);
      uint64_t v93 = *(void *)(v0 + 1568);
      os_log_type_t v96 = v29;
      uint64_t v33 = *(int **)(v0 + 1504);
      uint64_t v100 = *(void *)(v0 + 1376);
      uint64_t v102 = *(void *)(v0 + 1472);
      uint64_t v83 = *(void *)(v0 + 992);
      uint64_t v86 = *(void *)(v0 + 1072);
      uint64_t v106 = *(void *)(v0 + 984);
      uint64_t v34 = swift_slowAlloc();
      v108[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v34 = 134218755;
      *(void *)(v0 + 576) = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v34 + 12) = 2048;
      *(void *)(v0 + 544) = v79;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v34 + 22) = 2160;
      *(void *)(v0 + 536) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v34 + 32) = 2081;
      uint64_t v35 = v33[12];
      uint64_t v73 = v31 + v35;
      uint64_t v36 = v33[16];
      uint64_t v37 = (void *)(v31 + v36);
      uint64_t v38 = v33[20];
      uint64_t v39 = (void *)(v31 + v38);
      uint64_t v40 = v33[24];
      uint64_t v74 = (void *)(v31 + v40);
      uint64_t v75 = v33[28];
      uint64_t v76 = v33[32];
      uint64_t v77 = v33[36];
      uint64_t v80 = v33[40];
      uint64_t v41 = v32 + v35;
      uint64_t v42 = (void *)(v32 + v36);
      uint64_t v43 = (void *)(v32 + v38);
      uint64_t v44 = (void *)(v32 + v40);
      v78(v31, v32, v106);
      sub_10001D074(v41, v73, &qword_101638CF0);
      uint64_t v45 = v42[1];
      *uint64_t v37 = *v42;
      v37[1] = v45;
      uint64_t v46 = v43[1];
      *uint64_t v39 = *v43;
      v39[1] = v46;
      uint64_t v47 = v44[1];
      *uint64_t v74 = *v44;
      v74[1] = v47;
      *(_DWORD *)(v31 + v75) = *(_DWORD *)(v32 + v75);
      *(_DWORD *)(v31 + v76) = *(_DWORD *)(v32 + v76);
      *(void *)(v31 + v77) = *(void *)(v32 + v77);
      *(_OWORD *)(v31 + v80) = *(_OWORD *)(v32 + v80);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v83 + 32))(v86, v31, v106);
      sub_10001DAB4(v73, &qword_101638CF0);
      sub_100FB6F70((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v48 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v50 = v49;
      v89(v86, v106);
      *(void *)(v0 + 512) = sub_1008FA0F0(v48, v50, v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10001DAB4(v93, &qword_10163B938);
      sub_10001DAB4(v32, &qword_10163B938);
      _os_log_impl((void *)&_mh_execute_header, v98, v96, "Cannot store pending circle offer,\npendingExplicitOffers: %ld >= maxPendingSharedItemOffers: %lu.\nBeaconIdentifier: %{private,mask.hash}s.", (uint8_t *)v34, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v104(v102, v100);
    }
    else
    {
      uint64_t v51 = *(void (**)(uint64_t, uint64_t))(v0 + 2208);
      uint64_t v52 = *(void *)(v0 + 1576);
      uint64_t v53 = *(void *)(v0 + 1472);
      uint64_t v54 = *(void *)(v0 + 1376);
      sub_10001DAB4(*(void *)(v0 + 1568), &qword_10163B938);
      sub_10001DAB4(v52, &qword_10163B938);

      v51(v53, v54);
    }
    uint64_t v55 = *(void *)(v0 + 1272);
    type metadata accessor for SPBeaconSharingError(0);
    *(void *)(v0 + 640) = 11;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100FB6F70((unint64_t *)&qword_1016385F8, type metadata accessor for SPBeaconSharingError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    sub_100FB893C(v55, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
    if (qword_101636888 != -1) {
      swift_once();
    }
    uint64_t v56 = *(void *)(v0 + 1424);
    uint64_t v57 = *(void *)(v0 + 1384);
    uint64_t v58 = *(void *)(v0 + 1376);
    uint64_t v59 = sub_100010324(v58, (uint64_t)qword_10170D788);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v57 + 16))(v56, v59, v58);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v60 = Logger.logObject.getter();
    os_log_type_t v61 = static os_log_type_t.error.getter();
    BOOL v62 = os_log_type_enabled(v60, v61);
    uint64_t v63 = *(void *)(v0 + 1424);
    uint64_t v64 = *(void *)(v0 + 1384);
    uint64_t v65 = *(void *)(v0 + 1376);
    uint64_t v66 = *(void *)(v0 + 1152);
    if (v62)
    {
      uint64_t v67 = (uint8_t *)swift_slowAlloc();
      v108[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v67 = 136315138;
      swift_getErrorValue();
      uint64_t v68 = Error.localizedDescription.getter();
      *(void *)(v0 + 616) = sub_1008FA0F0(v68, v69, v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v60, v61, "Failure on handleCircleTrust, preparing initial data: %s", v67, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v63, v65);
    sub_10001DAB4(v66, (uint64_t *)&unk_10163B890);
    uint64_t v70 = *(void *)(v0 + 1296);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100FB893C(v70, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
    uint64_t v71 = *(void *)(v0 + 1776);
    sub_10001DAB4(*(void *)(v0 + 1656), &qword_10163B938);
    sub_10001DAB4(v71, &qword_10163B940);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v72 = *(uint64_t (**)(void))(v0 + 8);
    return v72();
  }
  else
  {
    *(unsigned char *)(v0 + 2902) = 0;
    uint64_t v3 = *(void *)(v0 + 1272);
    uint64_t v4 = *(void *)(v0 + 1224);
    *(void *)(v0 + 2456) = *(void *)(*(void *)(v0 + 848) + 288);
    uint64_t v5 = v3 + *(int *)(v4 + 28);
    uint64_t v107 = (uint64_t (*)(uint64_t))((char *)&dword_101661678 + dword_101661678);
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v0 + 2464) = v6;
    *uint64_t v6 = v0;
    v6[1] = sub_100FA2A40;
    return v107(v5);
  }
}

uint64_t sub_100FA2A40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)*v4;
  v5[309] = a1;
  v5[310] = a2;
  v5[311] = a3;
  v5[312] = v3;
  swift_task_dealloc();
  if (v3)
  {
    uint64_t v6 = v5[106];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    BOOL v7 = sub_100FA4334;
    uint64_t v8 = v6;
  }
  else
  {
    uint64_t v8 = v5[106];
    BOOL v7 = sub_100FA2B80;
  }
  return _swift_task_switch(v7, v8, 0);
}

void sub_100FA2B80()
{
  uint64_t v202 = v0;
  if (*(void *)(v0 + 2488))
  {
    uint64_t v135 = *(void *)(v0 + 2496);
    char v172 = *(unsigned char *)(v0 + 2902);
    uint64_t v166 = *(int *)(v0 + 2832);
    uint64_t v169 = *(int *)(v0 + 2836);
    uint64_t v162 = *(void *)(v0 + 1928);
    uint64_t v164 = *(int *)(v0 + 2828);
    uint64_t v197 = *(void (**)(void))(v0 + 1784);
    uint64_t v152 = *(int *)(v0 + 2804);
    uint64_t v177 = *(int *)(v0 + 2792);
    uint64_t v1 = *(void *)(v0 + 1736);
    uint64_t v174 = *(void *)(v0 + 1728);
    uint64_t v126 = *(void *)(v0 + 1720);
    uint64_t v129 = *(void *)(v0 + 1712);
    uint64_t v2 = *(void *)(v0 + 1560);
    uint64_t v123 = *(void *)(v0 + 1552);
    uint64_t v131 = *(void *)(v0 + 1544);
    uint64_t v132 = *(void *)(v0 + 1536);
    uint64_t v194 = *(void *)(v0 + 1656);
    uint64_t v146 = (uint64_t *)(v194 + *(int *)(v0 + 2840));
    uint64_t v179 = (void *)(v194 + *(int *)(v0 + 2824));
    uint64_t v183 = (void *)(v194 + *(int *)(v0 + 2820));
    uint64_t v181 = (void *)(v194 + *(int *)(v0 + 2816));
    uint64_t v189 = v194 + *(int *)(v0 + 2812);
    uint64_t v3 = *(void *)(v0 + 1776);
    uint64_t v148 = (uint64_t *)(v3 + *(int *)(v0 + 2808));
    uint64_t v142 = (void *)(v3 + *(int *)(v0 + 2800));
    uint64_t v139 = v3 + *(int *)(v0 + 2796);
    uint64_t v121 = *(int **)(v0 + 1664);
    uint64_t v4 = v1 + v121[16];
    uint64_t v5 = (void *)(v1 + v121[20]);
    uint64_t v6 = *(int **)(v0 + 1504);
    uint64_t v157 = *(uint64_t **)(v0 + 1368);
    uint64_t v117 = *(char **)(v0 + 1344);
    uint64_t v159 = *(int **)(v0 + 1304);
    uint64_t v111 = *(void *)(v0 + 1224);
    uint64_t v112 = *(void *)(v0 + 1296);
    uint64_t v185 = *(void *)(v0 + 1040);
    uint64_t v7 = *(void *)(v0 + 992);
    uint64_t v192 = *(void *)(v0 + 984);
    uint64_t v133 = *(void *)(v0 + 928);
    uint64_t v8 = v121[12];
    uint64_t v105 = v121[24];
    uint64_t v108 = v121[28];
    uint64_t v9 = v1;
    v197();
    uint64_t v137 = v3;
    *(unsigned char *)(v9 + v8) = *(unsigned char *)(v3 + v177);
    uint64_t v10 = *(void *)(v139 + 8);
    uint64_t v11 = *(void *)(v139 + 16);
    *(unsigned char *)uint64_t v4 = *(unsigned char *)v139;
    *(void *)(v4 + 8) = v10;
    *(void *)(v4 + 16) = v11;
    uint64_t v12 = v142[1];
    void *v5 = *v142;
    v5[1] = v12;
    *(void *)(v9 + v105) = *(void *)(v3 + v152);
    *(_OWORD *)(v9 + v108) = *(_OWORD *)v148;
    uint64_t v13 = v2 + v6[12];
    unint64_t v14 = (void *)(v2 + v6[16]);
    uint64_t v15 = (void *)(v2 + v6[20]);
    uint64_t v100 = (void *)(v2 + v6[24]);
    uint64_t v101 = v6[28];
    uint64_t v103 = v6[32];
    uint64_t v104 = v6[36];
    uint64_t v106 = v6[40];
    ((void (*)(uint64_t, uint64_t, uint64_t))v197)(v2, v194, v192);
    sub_10001D074(v189, v13, &qword_101638CF0);
    uint64_t v16 = v181[1];
    *unint64_t v14 = *v181;
    v14[1] = v16;
    uint64_t v17 = v183[1];
    void *v15 = *v183;
    v15[1] = v17;
    uint64_t v18 = v179[1];
    *uint64_t v100 = *v179;
    v100[1] = v18;
    *(_DWORD *)(v2 + v101) = *(_DWORD *)(v194 + v164);
    *(_DWORD *)(v2 + v103) = *(_DWORD *)(v194 + v166);
    *(void *)(v2 + v104) = *(void *)(v194 + v169);
    *(_OWORD *)(v2 + v106) = *(_OWORD *)v146;
    ((void (*)(uint64_t, uint64_t, uint64_t))v197)(v174, v3, v192);
    ((void (*)(uint64_t, uint64_t, uint64_t))v197)(v185, v112 + *(int *)(v111 + 20), v192);
    *(_OWORD *)uint64_t v117 = xmmword_101348180;
    uint64_t v19 = &v117[v159[5]];
    uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 32);
    *(void *)(v0 + 2504) = v20;
    *(void *)(v0 + 2512) = (v7 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v20(v19, v9, v192);
    v20(&v117[v159[6]], v2, v192);
    v20(&v117[v159[7]], v174, v192);
    uint64_t v107 = v20;
    v20(&v117[v159[8]], v185, v192);
    *(void *)&v117[v159[9]] = v162;
    v117[v159[10]] = v172;
    sub_10001DAB4(v13, &qword_101638CF0);
    sub_100FB6C70((uint64_t)v117, (uint64_t)v157, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    uint64_t v21 = v123 + v6[12];
    uint64_t v22 = (void *)(v123 + v6[16]);
    uint64_t v23 = (void *)(v123 + v6[20]);
    uint64_t v24 = (void *)(v123 + v6[24]);
    uint64_t v160 = (int *)v6[28];
    uint64_t v113 = v6[32];
    uint64_t v118 = v6[36];
    uint64_t v25 = (void *)(v123 + v6[40]);
    ((void (*)(uint64_t, uint64_t, uint64_t))v197)(v123, v194, v192);
    uint64_t v110 = v21;
    sub_10001D074(v189, v21, &qword_101638CF0);
    uint64_t v173 = v181[1];
    uint64_t v175 = *v181;
    *uint64_t v22 = *v181;
    v22[1] = v173;
    uint64_t v26 = *v183;
    uint64_t v184 = v183[1];
    uint64_t v186 = v26;
    *uint64_t v23 = v26;
    v23[1] = v184;
    uint64_t v27 = *v179;
    uint64_t v180 = v179[1];
    uint64_t v182 = v27;
    *uint64_t v24 = v27;
    v24[1] = v180;
    int v163 = *(_DWORD *)(v194 + v164);
    *(int *)((char *)v160 + v123) = v163;
    int v161 = *(_DWORD *)(v194 + v166);
    *(_DWORD *)(v123 + v113) = v161;
    uint64_t v170 = *(void *)(v194 + v169);
    *(void *)(v123 + v118) = v170;
    uint64_t v165 = v146[1];
    uint64_t v167 = *v146;
    *uint64_t v25 = *v146;
    v25[1] = v165;
    uint64_t v124 = v121[12];
    uint64_t v28 = v126 + v121[16];
    os_log_type_t v29 = (void *)(v126 + v121[20]);
    uint64_t v114 = v121[24];
    uint64_t v30 = (void *)(v126 + v121[28]);
    ((void (*)(uint64_t, uint64_t, uint64_t))v197)(v126, v137, v192);
    char v147 = *(unsigned char *)(v137 + v177);
    *(unsigned char *)(v126 + v124) = v147;
    LOBYTE(v124) = *(unsigned char *)v139;
    uint64_t v119 = *(void *)(v139 + 8);
    uint64_t v140 = *(void *)(v139 + 16);
    *(unsigned char *)uint64_t v28 = v124;
    *(void *)(v28 + 8) = v119;
    *(void *)(v28 + 16) = v140;
    uint64_t v31 = *v142;
    uint64_t v178 = v142[1];
    *os_log_type_t v29 = *v142;
    v29[1] = v178;
    uint64_t v153 = *(void *)(v137 + v152);
    *(void *)(v126 + v114) = v153;
    uint64_t v143 = *v148;
    uint64_t v149 = v148[1];
    void *v30 = v143;
    v30[1] = v149;
    uint64_t v115 = v121[12];
    uint64_t v32 = v129 + v121[16];
    uint64_t v33 = (void *)(v129 + v121[20]);
    uint64_t v127 = v121[24];
    uint64_t v34 = (void *)(v129 + v121[28]);
    ((void (*)(uint64_t))v197)(v129);
    *(unsigned char *)(v129 + v115) = v147;
    *(unsigned char *)uint64_t v32 = v124;
    *(void *)(v32 + 8) = v119;
    *(void *)(v32 + 16) = v140;
    uint64_t v138 = v31;
    *uint64_t v33 = v31;
    v33[1] = v178;
    *(void *)(v129 + v127) = v153;
    *uint64_t v34 = v143;
    v34[1] = v149;
    uint64_t v35 = v131 + v6[12];
    uint64_t v36 = (void *)(v131 + v6[16]);
    uint64_t v37 = (void *)(v131 + v6[20]);
    uint64_t v38 = (void *)(v131 + v6[24]);
    uint64_t v150 = v6[32];
    uint64_t v154 = v6[28];
    uint64_t v39 = (void *)(v131 + v6[40]);
    uint64_t v144 = v6[36];
    ((void (*)(uint64_t, uint64_t, uint64_t))v197)(v131, v194, v192);
    uint64_t v141 = v35;
    sub_10001D074(v189, v35, &qword_101638CF0);
    *uint64_t v36 = v175;
    v36[1] = v173;
    *uint64_t v37 = v186;
    v37[1] = v184;
    *uint64_t v38 = v182;
    v38[1] = v180;
    *(_DWORD *)(v131 + v154) = v163;
    *(_DWORD *)(v131 + v150) = v161;
    *(void *)(v131 + v144) = v170;
    *uint64_t v39 = v167;
    v39[1] = v165;
    uint64_t v40 = v132 + v6[12];
    uint64_t v41 = (void *)(v132 + v6[16]);
    uint64_t v42 = (void *)(v132 + v6[20]);
    uint64_t v43 = (void *)(v132 + v6[24]);
    uint64_t v151 = v6[32];
    uint64_t v155 = v6[28];
    uint64_t v44 = (void *)(v132 + v6[40]);
    uint64_t v45 = v6[36];
    v197();
    uint64_t v198 = v40;
    sub_10001D074(v189, v40, &qword_101638CF0);
    *uint64_t v41 = v175;
    v41[1] = v173;
    void *v42 = v186;
    v42[1] = v184;
    *uint64_t v43 = v182;
    v43[1] = v180;
    *(_DWORD *)(v132 + v155) = v163;
    *(_DWORD *)(v132 + v151) = v161;
    *(void *)(v132 + v45) = v170;
    *uint64_t v44 = v167;
    v44[1] = v165;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100B23648(v157, v133);
    if (v135)
    {
    }
    else
    {
      uint64_t v120 = *(void *)(v0 + 2480);
      uint64_t v122 = *(void *)(v0 + 2488);
      uint64_t v116 = *(void *)(v0 + 2472);
      uint64_t v145 = *(void (**)(uint64_t, uint64_t))(v0 + 1800);
      uint64_t v99 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1784);
      uint64_t v193 = *(void *)(v0 + 1776);
      uint64_t v196 = *(int *)(v0 + 2792);
      uint64_t v109 = *(void *)(v0 + 1720);
      uint64_t v158 = *(void *)(v0 + 1712);
      uint64_t v97 = *(void *)(v0 + 1656);
      uint64_t v63 = *(void *)(v0 + 1624);
      uint64_t v102 = *(void *)(v0 + 1552);
      uint64_t v156 = *(void *)(v0 + 1544);
      uint64_t v64 = *(int **)(v0 + 1504);
      uint64_t v134 = *(void *)(v0 + 1272);
      uint64_t v136 = *(void *)(v0 + 1536);
      uint64_t v65 = *(char **)(v0 + 1200);
      uint64_t v188 = *(void *)(v0 + 1216);
      uint64_t v191 = *(void *)(v0 + 1192);
      uint64_t v66 = *(int **)(v0 + 1160);
      uint64_t v67 = *(void *)(v0 + 992);
      uint64_t v68 = *(void *)(v0 + 984);
      uint64_t v125 = *(void *)(v0 + 920);
      uint64_t v98 = v97 + *(int *)(v0 + 2812);
      uint64_t v128 = *(void *)(v0 + 912);
      uint64_t v130 = *(void *)(v0 + 928);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v67 + 56))(&v65[v66[19]], 1, 1, v68);
      uint64_t v69 = v63 + v64[12];
      uint64_t v70 = (void *)(v63 + v64[16]);
      uint64_t v71 = (void *)(v63 + v64[20]);
      uint64_t v72 = (void *)(v63 + v64[24]);
      uint64_t v95 = v64[32];
      uint64_t v96 = v64[28];
      uint64_t v94 = v64[36];
      uint64_t v73 = (void *)(v63 + v64[40]);
      v99(v63, v97, v68);
      sub_10001D074(v98, v69, &qword_101638CF0);
      *uint64_t v70 = v175;
      v70[1] = v173;
      *uint64_t v71 = v186;
      v71[1] = v184;
      *uint64_t v72 = v182;
      v72[1] = v180;
      *(_DWORD *)(v63 + v96) = v163;
      *(_DWORD *)(v63 + v95) = v161;
      *(void *)(v63 + v94) = v170;
      *uint64_t v73 = v167;
      v73[1] = v165;
      uint64_t v74 = &v65[v66[20]];
      uint64_t v168 = v66[14];
      uint64_t v171 = v66[15];
      uint64_t v75 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
      long long v176 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v75 - 8) + 56);
      v176(v74, 1, 1, v75);
      *(_OWORD *)uint64_t v65 = xmmword_101348180;
      v107(&v65[v66[5]], v102, v68);
      v107(&v65[v66[6]], v109, v68);
      uint64_t v76 = &v65[v66[7]];
      *uint64_t v76 = v116;
      *((void *)v76 + 1) = v120;
      *((void *)v76 + 2) = v122;
      uint64_t v77 = &v65[v66[8]];
      *(void *)uint64_t v77 = v138;
      *((void *)v77 + 1) = v178;
      char v78 = &v65[v66[9]];
      *(void *)char v78 = v182;
      *((void *)v78 + 1) = v180;
      unint64_t v79 = &v65[v66[10]];
      *(void *)unint64_t v79 = v186;
      *((void *)v79 + 1) = v184;
      *(void *)&v65[v66[11]] = v163;
      *(void *)&v65[v66[12]] = v161;
      v65[v66[13]] = 1;
      v65[v168] = 3;
      *(void *)&v65[v171] = -1;
      v65[v66[16]] = v147;
      *(void *)&v65[v66[17]] = 1;
      (*(void (**)(char *, uint64_t, uint64_t))(v125 + 32))(&v65[v66[18]], v130, v128);
      sub_10001DAB4((uint64_t)v74, (uint64_t *)&unk_101653D30);
      *(_DWORD *)uint64_t v74 = 1;
      sub_10001D608(v69, (uint64_t)&v74[*(int *)(v75 + 20)], &qword_101638CF0);
      v176(v74, 0, 1, v75);
      sub_100FB893C(v134, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
      v145(v63, v68);
      sub_10001DAB4(v198, &qword_101638CF0);
      v145(v136, v68);
      sub_10001DAB4(v141, &qword_101638CF0);
      v145(v156, v68);
      v145(v158, v68);
      sub_10001DAB4(v110, &qword_101638CF0);
      sub_100FB6C70((uint64_t)v65, v188, type metadata accessor for SharedBeaconRecord);
      uint64_t v80 = *(unsigned __int8 *)(v193 + v196);
      uint64_t v81 = *(void *)(v188 + v66[11]);
      sub_100FB6BB8(v188, v191, type metadata accessor for SharedBeaconRecord);
      char v82 = 0;
      uint64_t v83 = *(void *)(v0 + 1192);
      if (v81 == -1) {
        char v82 = *(void *)(v83 + v66[12]) == -1;
      }
      sub_100FB893C(v83, type metadata accessor for SharedBeaconRecord);
      char v85 = sub_1008BFC68(v80, v82);
      uint64_t v86 = (uint64_t *)(*(void *)(v0 + 1776) + *(int *)(v0 + 2808));
      sub_10001CD44((void *)(*(void *)(v0 + 848) + 248), *(void *)(*(void *)(v0 + 848) + 272));
      uint64_t v87 = *v86;
      uint64_t v88 = v86[1];
      uint64_t v89 = (void *)swift_task_alloc();
      *(void *)(v0 + 2520) = v89;
      *uint64_t v89 = v0;
      v89[1] = sub_100FA4B70;
      uint64_t v90 = *(void *)(v0 + 1368);
      uint64_t v91 = *(void *)(v0 + 1296);
      sub_100C2DAA0(v87, v88, v90, v91, v85);
    }
  }
  else
  {
    uint64_t v47 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1968);
    uint64_t v48 = *(void *)(v0 + 1960);
    uint64_t v49 = *(void *)(v0 + 1432);
    uint64_t v50 = *(void *)(v0 + 1376);
    uint64_t v51 = *(void *)(v0 + 1272);
    uint64_t v52 = *(void *)(v0 + 1248);
    uint64_t v199 = *(void *)(v0 + 1240);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v47(v49, v48, v50);
    sub_100FB6BB8(v51, v52, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
    sub_100FB6BB8(v52, v199, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
    sub_100FB893C(v52, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
    uint64_t v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.error.getter();
    BOOL v55 = os_log_type_enabled(v53, v54);
    uint64_t v56 = *(void (**)(uint64_t, uint64_t))(v0 + 2208);
    uint64_t v195 = *(void *)(v0 + 1376);
    uint64_t v200 = *(void *)(v0 + 1432);
    uint64_t v57 = *(void *)(v0 + 1296);
    uint64_t v58 = *(void *)(v0 + 1272);
    uint64_t v59 = *(void *)(v0 + 1240);
    if (v55)
    {
      uint64_t v190 = *(void *)(v0 + 1152);
      uint64_t v187 = *(void *)(v0 + 1272);
      uint64_t v60 = swift_slowAlloc();
      v201[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v60 = 141558275;
      *(void *)(v0 + 488) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v60 + 12) = 2081;
      uint64_t v61 = sub_1009C77D8();
      *(void *)(v0 + 496) = sub_1008FA0F0(v61, v62, v201);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100FB893C(v59, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "Failure on handleCircleTrust, can't get owner handle for : %{private,mask.hash}s", (uint8_t *)v60, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v56(v200, v195);
      sub_100FB893C(v187, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
      sub_10001DAB4(v190, (uint64_t *)&unk_10163B890);
    }
    else
    {
      uint64_t v84 = *(void *)(v0 + 1152);

      sub_100FB893C(v59, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
      v56(v200, v195);
      sub_100FB893C(v58, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
      sub_10001DAB4(v84, (uint64_t *)&unk_10163B890);
    }
    sub_100FB893C(v57, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
    uint64_t v92 = *(void *)(v0 + 1776);
    sub_10001DAB4(*(void *)(v0 + 1656), &qword_10163B938);
    sub_10001DAB4(v92, &qword_10163B940);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v93 = *(void (**)(void))(v0 + 8);
    v93();
  }
}

uint64_t sub_100FA4334()
{
  uint64_t v20 = v0;
  sub_100FB893C(v0[159], (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[178];
  uint64_t v2 = v0[173];
  uint64_t v3 = v0[172];
  uint64_t v4 = sub_100010324(v3, (uint64_t)qword_10170D788);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = v0[178];
  uint64_t v9 = v0[173];
  uint64_t v10 = v0[172];
  uint64_t v11 = v0[144];
  if (v7)
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315138;
    swift_getErrorValue();
    uint64_t v13 = Error.localizedDescription.getter();
    v0[77] = sub_1008FA0F0(v13, v14, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failure on handleCircleTrust, preparing initial data: %s", v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  }
  sub_10001DAB4(v11, (uint64_t *)&unk_10163B890);
  uint64_t v15 = v0[162];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100FB893C(v15, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
  uint64_t v16 = v0[222];
  sub_10001DAB4(v0[207], &qword_10163B938);
  sub_10001DAB4(v16, &qword_10163B940);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = (uint64_t (*)(void))v0[1];
  return v17();
}

uint64_t sub_100FA4B70()
{
  uint64_t v2 = (void *)*v1;
  v2[316] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[106];
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    return _swift_task_switch(sub_100FA5924, v3, 0);
  }
  else
  {
    uint64_t v4 = (void *)swift_task_alloc();
    v2[317] = v4;
    *uint64_t v4 = v2;
    v4[1] = sub_100FA4D04;
    uint64_t v5 = v2[207];
    uint64_t v6 = v2[113];
    return sub_100E5F1D8(v6, v5);
  }
}

uint64_t sub_100FA4D04()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 848);
  swift_task_dealloc();
  return _swift_task_switch(sub_100FA4E14, v1, 0);
}

uint64_t sub_100FA4E14()
{
  uint64_t v1 = *(void *)(v0 + 1168);
  uint64_t v2 = *(void *)(v0 + 1160);
  uint64_t v3 = *(void *)(v0 + 896);
  sub_10001D074(*(void *)(v0 + 904), v3, (uint64_t *)&unk_101653D50);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1, v2) == 1)
  {
    sub_10001DAB4(*(void *)(v0 + 896), (uint64_t *)&unk_101653D50);
    char v4 = 5;
  }
  else
  {
    uint64_t v5 = *(void *)(v0 + 896);
    char v4 = *(unsigned char *)(v5 + *(int *)(*(void *)(v0 + 1160) + 64));
    sub_100FB893C(v5, type metadata accessor for SharedBeaconRecord);
  }
  uint64_t v58 = *(void *)(v0 + 2312);
  uint64_t v59 = *(void *)(v0 + 1936);
  uint64_t v53 = *(void (**)(uint64_t, uint64_t))(v0 + 1800);
  uint64_t v61 = *(void *)(v0 + 2528);
  unint64_t v62 = *(void (**)(uint64_t, uint64_t))(v0 + 1784);
  uint64_t v64 = *(int *)(v0 + 2804);
  uint64_t v6 = *(int *)(v0 + 2792);
  uint64_t v52 = v6;
  uint64_t v7 = *(void *)(v0 + 1776);
  uint64_t v8 = *(void *)(v0 + 1704);
  uint64_t v9 = *(void *)(v0 + 1696);
  uint64_t v10 = *(int **)(v0 + 1664);
  uint64_t v56 = *(void *)(v0 + 1368);
  uint64_t v57 = *(void *)(v0 + 1216);
  uint64_t v11 = *(void *)(v0 + 984);
  uint64_t v55 = *(void *)(v0 + 904);
  uint64_t v60 = *(void *)(v0 + 888);
  uint64_t v63 = v7 + *(int *)(v0 + 2808);
  uint64_t v12 = (void *)(v7 + *(int *)(v0 + 2800));
  uint64_t v13 = v7 + *(int *)(v0 + 2796);
  *(unsigned char *)(v0 + 2903) = v4;
  uint64_t v48 = v10[12];
  uint64_t v49 = v11;
  uint64_t v14 = v8 + v10[16];
  uint64_t v15 = (void *)(v8 + v10[20]);
  uint64_t v50 = v10[24];
  uint64_t v51 = v10[28];
  v62(v8, v7);
  char v16 = *(unsigned char *)(v7 + v6);
  *(unsigned char *)(v0 + 2904) = v16;
  *(unsigned char *)(v8 + v48) = v16;
  uint64_t v17 = *(void *)(v13 + 8);
  uint64_t v18 = *(void *)(v13 + 16);
  *(unsigned char *)uint64_t v14 = *(unsigned char *)v13;
  *(void *)(v14 + 8) = v17;
  *(void *)(v14 + 16) = v18;
  uint64_t v19 = v12[1];
  void *v15 = *v12;
  v15[1] = v19;
  *(void *)(v8 + v50) = *(void *)(v7 + v64);
  *(_OWORD *)(v8 + v51) = *(_OWORD *)v63;
  v53(v8, v49);
  uint64_t v20 = v10[12];
  uint64_t v21 = v9 + v10[16];
  uint64_t v22 = (void *)(v9 + v10[20]);
  uint64_t v54 = v10[24];
  uint64_t v23 = (void *)(v9 + v10[28]);
  ((void (*)(uint64_t, uint64_t, uint64_t))v62)(v9, v7, v49);
  *(unsigned char *)(v9 + v20) = *(unsigned char *)(v7 + v52);
  uint64_t v24 = *(void *)(v13 + 8);
  uint64_t v25 = *(void *)(v13 + 16);
  *(unsigned char *)uint64_t v21 = *(unsigned char *)v13;
  *(void *)(v21 + 8) = v24;
  *(void *)(v21 + 16) = v25;
  uint64_t v26 = v12[1];
  *uint64_t v22 = *v12;
  v22[1] = v26;
  *(void *)(v9 + v54) = *(void *)(v7 + v64);
  uint64_t v27 = *(void *)v63;
  unint64_t v28 = *(void *)(v63 + 8);
  *uint64_t v23 = *(void *)v63;
  v23[1] = v28;
  os_log_type_t v29 = (void *)swift_task_alloc();
  void v29[2] = v56;
  v29[3] = v58;
  v29[4] = v55;
  v29[5] = v57;
  v29[6] = v9;
  v29[7] = v59;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000361E0(v27, v28);
  sub_100EE07C0((void (*)(uint64_t, _UNKNOWN **))sub_100FB6634, v60);
  uint64_t v30 = *(void *)(v0 + 1696);
  swift_bridgeObjectRelease();
  if (v61)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    sub_10001DAB4(v30, &qword_10163B940);
    (*(void (**)(void, void, void))(v0 + 1968))(*(void *)(v0 + 1400), *(void *)(v0 + 1960), *(void *)(v0 + 1376));
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      uint64_t v34 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v33 = 138412290;
      swift_errorRetain();
      uint64_t v35 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 528) = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v34 = v35;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Failure on handleCircleTrust, updating iCloud: %@", v33, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v0 + 2208);
    uint64_t v40 = *(void *)(v0 + 1400);
    uint64_t v41 = *(void *)(v0 + 1376);
    uint64_t v65 = *(void *)(v0 + 1368);
    uint64_t v42 = *(void *)(v0 + 1296);
    uint64_t v43 = *(void *)(v0 + 1216);
    uint64_t v44 = *(void *)(v0 + 1152);
    uint64_t v45 = *(void *)(v0 + 904);
    swift_errorRelease();
    v39(v40, v41);
    sub_10001DAB4(v44, (uint64_t *)&unk_10163B890);
    sub_100FB893C(v42, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
    sub_10001DAB4(v45, (uint64_t *)&unk_101653D50);
    sub_100FB893C(v43, type metadata accessor for SharedBeaconRecord);
    sub_100FB893C(v65, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    uint64_t v46 = *(void *)(v0 + 1776);
    sub_10001DAB4(*(void *)(v0 + 1656), &qword_10163B938);
    sub_10001DAB4(v46, &qword_10163B940);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v47 = *(uint64_t (**)(void))(v0 + 8);
    return v47();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    sub_10001DAB4(v30, &qword_10163B940);
    uint64_t v36 = (void *)swift_task_alloc();
    *(void *)(v0 + 2544) = v36;
    *uint64_t v36 = v0;
    v36[1] = sub_100FA612C;
    uint64_t v37 = *(void *)(v0 + 888);
    return sub_100E57C6C(v37);
  }
}

uint64_t sub_100FA5924()
{
  uint64_t v22 = v0;
  (*(void (**)(void, void, void))(v0 + 1968))(*(void *)(v0 + 1408), *(void *)(v0 + 1960), *(void *)(v0 + 1376));
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v0 + 2208);
    uint64_t v16 = *(void *)(v0 + 1376);
    uint64_t v20 = *(void *)(v0 + 1296);
    uint64_t v17 = *(void *)(v0 + 1408);
    uint64_t v18 = *(void *)(v0 + 1152);
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315138;
    swift_getErrorValue();
    uint64_t v4 = Error.localizedDescription.getter();
    *(void *)(v0 + 520) = sub_1008FA0F0(v4, v5, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failure on handleCircleTrust, saving initial key packages: %s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    v19(v17, v16);
    sub_10001DAB4(v18, (uint64_t *)&unk_10163B890);
    uint64_t v6 = v20;
  }
  else
  {
    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v0 + 2208);
    uint64_t v8 = *(void *)(v0 + 1408);
    uint64_t v9 = *(void *)(v0 + 1376);
    uint64_t v10 = *(void *)(v0 + 1296);
    uint64_t v11 = *(void *)(v0 + 1152);

    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
    v7(v8, v9);
    sub_10001DAB4(v11, (uint64_t *)&unk_10163B890);
    uint64_t v6 = v10;
  }
  sub_100FB893C(v6, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
  uint64_t v12 = *(void *)(v0 + 1368);
  sub_100FB893C(*(void *)(v0 + 1216), type metadata accessor for SharedBeaconRecord);
  sub_100FB893C(v12, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  uint64_t v13 = *(void *)(v0 + 1776);
  sub_10001DAB4(*(void *)(v0 + 1656), &qword_10163B938);
  sub_10001DAB4(v13, &qword_10163B940);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
  return v14();
}

uint64_t sub_100FA612C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 2552) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 848);
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_100FAC83C;
    uint64_t v5 = v3;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 848);
    uint64_t v4 = sub_100FA6254;
  }
  return _swift_task_switch(v4, v5, 0);
}

uint64_t sub_100FA6254()
{
  uint64_t v36 = v0;
  uint64_t v33 = (long long *)(v0 + 27);
  uint64_t v1 = v0[319];
  os_log_type_t v29 = (void (*)(uint64_t, uint64_t, uint64_t))v0[246];
  uint64_t v2 = v0[207];
  uint64_t v23 = v0[183];
  uint64_t v24 = v0[172];
  uint64_t v25 = v0[245];
  uint64_t v27 = v0[171];
  uint64_t v3 = v0[167];
  uint64_t v32 = v0[166];
  uint64_t v4 = v0[110];
  uint64_t v5 = v0[109];
  uint64_t v6 = v0[108];
  uint64_t v7 = *(void *)(v0[106] + 392);
  static DispatchWorkItemFlags.barrier.getter();
  uint64_t v8 = (void *)swift_task_alloc();
  v8[2] = v7;
  v8[3] = v2;
  double v8[4] = sub_100FAF554;
  v8[5] = 0;
  OS_dispatch_queue.sync<A>(flags:execute:)();
  v0[320] = v1;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  v29(v23, v25, v24);
  sub_100FB6BB8(v27, v3, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  sub_100FB6BB8(v3, v32, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  sub_100FB893C(v3, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v31 = (void (*)(uint64_t, uint64_t))v0[276];
    uint64_t v26 = v0[172];
    uint64_t v28 = v0[183];
    uint64_t v11 = v0[166];
    uint64_t v30 = v0[111];
    uint64_t v12 = swift_slowAlloc();
    uint64_t v35 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 141558275;
    v0[85] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2081;
    sub_100FB6F70((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[86] = sub_1008FA0F0(v13, v14, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100FB893C(v11, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Data update on handle circle trust. Create %{private,mask.hash}s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v31(v28, v26);
    uint64_t v15 = v30;
  }
  else
  {
    uint64_t v16 = (void (*)(uint64_t, uint64_t))v0[276];
    uint64_t v17 = v0[183];
    uint64_t v18 = v0[172];
    uint64_t v19 = v0[166];
    uint64_t v20 = v0[111];

    sub_100FB893C(v19, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    v16(v17, v18);
    uint64_t v15 = v20;
  }
  sub_10001DAB4(v15, &qword_101639E88);
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, (uint64_t)v33, (uint64_t *)&unk_101638D30);
  if (v0[30])
  {
    sub_10001CEB0(v33, (uint64_t)(v0 + 32));
    sub_10001CD44(v0 + 32, v0[35]);
    uint64_t v34 = (uint64_t (__cdecl *)())((char *)&dword_101639108 + dword_101639108);
    uint64_t v22 = (void *)swift_task_alloc();
    v0[321] = v22;
    *uint64_t v22 = v0;
    v22[1] = sub_100FA6704;
    return v34();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100FA6704(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 848);
  *(void *)(*(void *)v1 + 2576) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100FA681C, v2, 0);
}

uint64_t sub_100FA681C()
{
  uint64_t v1 = v0[322];
  uint64_t v2 = v0[152];
  uint64_t v3 = v0[148];
  uint64_t v4 = v0[146];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 32));
  sub_100FB6BB8(v2, v3, type metadata accessor for SharedBeaconRecord);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = swift_allocObject();
  v0[323] = v6;
  *(void *)(v6 + 16) = v1;
  sub_100FB6C70(v3, v6 + v5, type metadata accessor for SharedBeaconRecord);
  swift_retain();
  uint64_t v7 = (void *)swift_task_alloc();
  v0[324] = v7;
  uint64_t v8 = sub_10000588C((uint64_t *)&unk_101638DC0);
  *uint64_t v7 = v0;
  v7[1] = sub_100FA6984;
  return unsafeBlocking<A>(_:)((char *)v0 + 2900, sub_100130C24, v6, v8);
}

uint64_t sub_100FA6984()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 848);
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100FA6AB0, v1, 0);
}

uint64_t sub_100FA6AB0()
{
  uint64_t v1 = *(void *)(v0 + 1936);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 2600) = v2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 1264);
    uint64_t v4 = *(void *)(v0 + 1232);
    uint64_t v5 = *(int *)(*(void *)(v0 + 1224) + 20);
    *(_DWORD *)(v0 + 2892) = v5;
    int v6 = *(_DWORD *)(v4 + 80);
    *(_DWORD *)(v0 + 2896) = v6;
    *(void *)(v0 + 2608) = *(void *)(v4 + 72);
    *(void *)(v0 + 2616) = 0;
    uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1784);
    uint64_t v8 = *(void *)(v0 + 1032);
    uint64_t v9 = *(void *)(v0 + 984);
    uint64_t v10 = v3 + v5;
    uint64_t v11 = *(void *)(v0 + 1776) + *(int *)(v0 + 2796);
    sub_100FB6BB8(v1 + ((v6 + 32) & ~(unint64_t)v6), v3, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
    v7(v8, v10, v9);
    sub_100FB893C(v3, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
    uint64_t v13 = *(void *)(v11 + 8);
    uint64_t v12 = *(void *)(v11 + 16);
    char v14 = *(unsigned char *)v11;
    uint64_t v15 = (void *)swift_task_alloc();
    *(void *)(v0 + 2624) = v15;
    void *v15 = v0;
    v15[1] = sub_100FA6CA4;
    uint64_t v16 = *(void *)(v0 + 1032);
    return sub_100EA1CF8(v16, v14, v13, v12);
  }
  else
  {
    swift_bridgeObjectRelease();
    *(void *)(v0 + 2640) = *(void *)(v0 + 2560);
    uint64_t v18 = (void *)swift_task_alloc();
    *(void *)(v0 + 2648) = v18;
    *uint64_t v18 = v0;
    v18[1] = sub_100FA782C;
    return sub_100E5E300();
  }
}

uint64_t sub_100FA6CA4()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 2632) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = (void (*)(uint64_t, uint64_t))v2[225];
    uint64_t v4 = v2[129];
    uint64_t v5 = v2[123];
    uint64_t v6 = v2[106];
    v3(v4, v5);
    swift_bridgeObjectRelease();
    uint64_t v7 = sub_100FA6FE8;
    uint64_t v8 = v6;
  }
  else
  {
    uint64_t v9 = v2[106];
    ((void (*)(void, void))v2[225])(v2[129], v2[123]);
    uint64_t v7 = sub_100FA6DFC;
    uint64_t v8 = v9;
  }
  return _swift_task_switch(v7, v8, 0);
}

uint64_t sub_100FA6DFC()
{
  uint64_t v1 = *(void *)(v0 + 2616) + 1;
  if (v1 == *(void *)(v0 + 2600))
  {
    swift_bridgeObjectRelease();
    *(void *)(v0 + 2640) = *(void *)(v0 + 2632);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 2648) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100FA782C;
    return sub_100E5E300();
  }
  else
  {
    *(void *)(v0 + 2616) = v1;
    uint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1784);
    uint64_t v5 = *(void *)(v0 + 1264);
    uint64_t v6 = *(void *)(v0 + 1032);
    uint64_t v7 = *(void *)(v0 + 984);
    uint64_t v8 = v5 + *(int *)(v0 + 2892);
    uint64_t v9 = *(void *)(v0 + 1776) + *(int *)(v0 + 2796);
    sub_100FB6BB8(*(void *)(v0 + 1936)+ ((*(unsigned __int8 *)(v0 + 2896) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 2896))+ *(void *)(v0 + 2608) * v1, v5, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
    v4(v6, v8, v7);
    sub_100FB893C(v5, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
    uint64_t v11 = *(void *)(v9 + 8);
    uint64_t v10 = *(void *)(v9 + 16);
    char v12 = *(unsigned char *)v9;
    uint64_t v13 = (void *)swift_task_alloc();
    *(void *)(v0 + 2624) = v13;
    *uint64_t v13 = v0;
    v13[1] = sub_100FA6CA4;
    uint64_t v14 = *(void *)(v0 + 1032);
    return sub_100EA1CF8(v14, v12, v11, v10);
  }
}

uint64_t sub_100FA6FE8()
{
  uint64_t v23 = v0;
  (*(void (**)(void, void, void))(v0 + 1968))(*(void *)(v0 + 1456), *(void *)(v0 + 1960), *(void *)(v0 + 1376));
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v0 + 2208);
    uint64_t v17 = *(void *)(v0 + 1376);
    uint64_t v18 = *(void *)(v0 + 1456);
    uint64_t v21 = *(void *)(v0 + 1296);
    uint64_t v19 = *(void *)(v0 + 1152);
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446210;
    swift_getErrorValue();
    uint64_t v4 = Error.localizedDescription.getter();
    *(void *)(v0 + 584) = sub_1008FA0F0(v4, v5, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failure on handleCircleTrust, sending PeerTrustAck message: %{public}s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    swift_release();
    v20(v18, v17);
    sub_10001DAB4(v19, (uint64_t *)&unk_10163B890);
    uint64_t v6 = v21;
  }
  else
  {
    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v0 + 2208);
    uint64_t v8 = *(void *)(v0 + 1456);
    uint64_t v9 = *(void *)(v0 + 1376);
    uint64_t v10 = *(void *)(v0 + 1296);
    uint64_t v11 = *(void *)(v0 + 1152);

    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
    swift_release();
    v7(v8, v9);
    sub_10001DAB4(v11, (uint64_t *)&unk_10163B890);
    uint64_t v6 = v10;
  }
  sub_100FB893C(v6, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
  uint64_t v12 = *(void *)(v0 + 1368);
  uint64_t v13 = *(void *)(v0 + 1216);
  sub_10001DAB4(*(void *)(v0 + 904), (uint64_t *)&unk_101653D50);
  sub_100FB893C(v13, type metadata accessor for SharedBeaconRecord);
  sub_100FB893C(v12, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  uint64_t v14 = *(void *)(v0 + 1776);
  sub_10001DAB4(*(void *)(v0 + 1656), &qword_10163B938);
  sub_10001DAB4(v14, &qword_10163B940);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
  return v15();
}

uint64_t sub_100FA782C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *v0;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 2656) = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_100FA7970;
  return sub_100E57EC8(0);
}

uint64_t sub_100FA7970()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 848);
  swift_task_dealloc();
  return _swift_task_switch(sub_100FA7A80, v1, 0);
}

uint64_t sub_100FA7A80()
{
  uint64_t v67 = v0;
  uint64_t v1 = *(int **)(v0 + 816);
  if (v1)
  {
    uint64_t v61 = (uint64_t (*)(void))((char *)v1 + *v1);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 2664) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100FA85D8;
    return v61();
  }
  else
  {
    uint64_t v62 = *(void *)(v0 + 2640);
    uint64_t v58 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 2504);
    uint64_t v4 = *(int *)(v0 + 2804);
    uint64_t v5 = *(int *)(v0 + 2792);
    uint64_t v6 = *(void *)(v0 + 1776);
    uint64_t v7 = *(void *)(v0 + 1768);
    uint64_t v8 = *(void *)(v0 + 984);
    uint64_t v9 = (uint64_t *)(v6 + *(int *)(v0 + 2808));
    uint64_t v10 = (uint64_t *)(v6 + *(int *)(v0 + 2800));
    uint64_t v11 = (char *)(v6 + *(int *)(v0 + 2796));
    uint64_t v12 = *(void *)(v0 + 856);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1784))(v7, v6, v8);
    char v54 = *(unsigned char *)(v6 + v5);
    char v57 = *v11;
    uint64_t v13 = *((void *)v11 + 2);
    uint64_t v55 = *((void *)v11 + 1);
    uint64_t v14 = *v10;
    uint64_t v52 = *(void *)(v6 + v4);
    uint64_t v53 = v10[1];
    uint64_t v16 = *v9;
    uint64_t v15 = v9[1];
    v58(v12, v7, v8);
    sub_1004F81CC(2, 1, v12, (uint64_t)v64);
    if (v62)
    {
      (*(void (**)(void, void, void))(v0 + 1968))(*(void *)(v0 + 1392), *(void *)(v0 + 1960), *(void *)(v0 + 1376));
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v17 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.error.getter();
      BOOL v19 = os_log_type_enabled(v17, v18);
      uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v0 + 2208);
      uint64_t v21 = *(void *)(v0 + 1392);
      uint64_t v22 = *(void *)(v0 + 1376);
      uint64_t v23 = *(void *)(v0 + 1296);
      uint64_t v24 = *(void *)(v0 + 1152);
      if (v19)
      {
        uint64_t v56 = *(void *)(v0 + 1376);
        uint64_t v25 = (uint8_t *)swift_slowAlloc();
        v64[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v25 = 136446210;
        swift_getErrorValue();
        uint64_t v26 = Error.localizedDescription.getter();
        *(void *)(v0 + 608) = sub_1008FA0F0(v26, v27, v64);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        _os_log_impl((void *)&_mh_execute_header, v17, v18, "Failure on handleCircleTrust, sending message: %{public}s", v25, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_errorRelease();
        swift_release();
        v20(v21, v56);
      }
      else
      {

        swift_errorRelease();
        swift_errorRelease();
        swift_errorRelease();
        swift_release();
        v20(v21, v22);
      }
      sub_10001DAB4(v24, (uint64_t *)&unk_10163B890);
      sub_100FB893C(v23, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
      uint64_t v41 = *(void *)(v0 + 1368);
      uint64_t v42 = *(void *)(v0 + 1216);
      sub_10001DAB4(*(void *)(v0 + 904), (uint64_t *)&unk_101653D50);
      sub_100FB893C(v42, type metadata accessor for SharedBeaconRecord);
      sub_100FB893C(v41, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      uint64_t v43 = *(void *)(v0 + 1776);
      sub_10001DAB4(*(void *)(v0 + 1656), &qword_10163B938);
      sub_10001DAB4(v43, &qword_10163B940);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v44 = *(uint64_t (**)(void))(v0 + 8);
      return v44();
    }
    else
    {
      uint64_t v50 = *(void (**)(uint64_t, uint64_t))(v0 + 1800);
      uint64_t v48 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1784);
      uint64_t v47 = *(void *)(v0 + 1776);
      uint64_t v28 = *(void *)(v0 + 1768);
      uint64_t v49 = v14;
      os_log_type_t v29 = *(int **)(v0 + 1664);
      uint64_t v30 = v13;
      uint64_t v31 = *(void *)(v0 + 984);
      uint64_t v32 = *(void *)(v0 + 848);
      uint64_t v60 = v65;
      uint64_t v63 = v64[1];
      *(void *)(v0 + 2672) = v65;
      uint64_t v59 = v66;
      *(void *)(v0 + 2680) = v66;
      char v51 = v64[0];
      sub_10001CD44((void *)(v32 + 208), *(void *)(v32 + 232));
      sub_10000588C(&qword_10163BAB0);
      uint64_t v46 = v15;
      uint64_t v33 = swift_allocObject();
      *(void *)(v0 + 2688) = v33;
      *(_OWORD *)(v33 + 16) = xmmword_101342130;
      uint64_t v45 = v16;
      uint64_t v34 = v29[12];
      uint64_t v35 = v28 + v29[16];
      uint64_t v36 = (void *)(v28 + v29[20]);
      uint64_t v37 = v29[24];
      uint64_t v38 = (void *)(v28 + v29[28]);
      v48(v28, v47, v31);
      *(unsigned char *)(v28 + v34) = v54;
      *(unsigned char *)uint64_t v35 = v57;
      *(void *)(v35 + 8) = v55;
      *(void *)(v35 + 16) = v30;
      *uint64_t v36 = v49;
      v36[1] = v53;
      *(void *)(v28 + v37) = v52;
      *uint64_t v38 = v45;
      v38[1] = v46;
      *(unsigned char *)(v33 + 32) = v57;
      *(void *)(v33 + 40) = v55;
      *(void *)(v33 + 48) = v30;
      swift_bridgeObjectRetain();
      v50(v28, v31);
      uint64_t v39 = (void *)swift_task_alloc();
      *(void *)(v0 + 2696) = v39;
      *uint64_t v39 = v0;
      v39[1] = sub_100FA9184;
      uint64_t v40 = *(void *)(v0 + 1024);
      return sub_100CCEEF0(v40, v51, v63, v60, v59, v33);
    }
  }
}

uint64_t sub_100FA85D8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 848);
  swift_task_dealloc();
  return _swift_task_switch(sub_100FA86E8, v1, 0);
}

uint64_t sub_100FA86E8()
{
  uint64_t v64 = v0;
  uint64_t v59 = *(void *)(v0 + 2640);
  uint64_t v56 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 2504);
  uint64_t v1 = *(int *)(v0 + 2804);
  uint64_t v2 = *(int *)(v0 + 2792);
  uint64_t v3 = *(void *)(v0 + 1776);
  uint64_t v4 = *(void *)(v0 + 1768);
  uint64_t v5 = *(void *)(v0 + 984);
  uint64_t v6 = (uint64_t *)(v3 + *(int *)(v0 + 2808));
  uint64_t v7 = (uint64_t *)(v3 + *(int *)(v0 + 2800));
  uint64_t v8 = (char *)(v3 + *(int *)(v0 + 2796));
  uint64_t v9 = *(void *)(v0 + 856);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1784))(v4, v3, v5);
  char v52 = *(unsigned char *)(v3 + v2);
  char v55 = *v8;
  uint64_t v10 = *((void *)v8 + 2);
  uint64_t v53 = *((void *)v8 + 1);
  uint64_t v11 = *v7;
  uint64_t v50 = *(void *)(v3 + v1);
  uint64_t v51 = v7[1];
  uint64_t v13 = *v6;
  uint64_t v12 = v6[1];
  v56(v9, v4, v5);
  sub_1004F81CC(2, 1, v9, (uint64_t)v61);
  if (v59)
  {
    (*(void (**)(void, void, void))(v0 + 1968))(*(void *)(v0 + 1392), *(void *)(v0 + 1960), *(void *)(v0 + 1376));
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    BOOL v16 = os_log_type_enabled(v14, v15);
    uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v0 + 2208);
    uint64_t v18 = *(void *)(v0 + 1392);
    uint64_t v19 = *(void *)(v0 + 1376);
    uint64_t v20 = *(void *)(v0 + 1296);
    uint64_t v21 = *(void *)(v0 + 1152);
    if (v16)
    {
      uint64_t v54 = *(void *)(v0 + 1376);
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      v61[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 136446210;
      swift_getErrorValue();
      uint64_t v23 = Error.localizedDescription.getter();
      *(void *)(v0 + 608) = sub_1008FA0F0(v23, v24, v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Failure on handleCircleTrust, sending message: %{public}s", v22, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      swift_release();
      v17(v18, v54);
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
      swift_release();
      v17(v18, v19);
    }
    sub_10001DAB4(v21, (uint64_t *)&unk_10163B890);
    sub_100FB893C(v20, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
    uint64_t v39 = *(void *)(v0 + 1368);
    uint64_t v40 = *(void *)(v0 + 1216);
    sub_10001DAB4(*(void *)(v0 + 904), (uint64_t *)&unk_101653D50);
    sub_100FB893C(v40, type metadata accessor for SharedBeaconRecord);
    sub_100FB893C(v39, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    uint64_t v41 = *(void *)(v0 + 1776);
    sub_10001DAB4(*(void *)(v0 + 1656), &qword_10163B938);
    sub_10001DAB4(v41, &qword_10163B940);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v42 = *(uint64_t (**)(void))(v0 + 8);
    return v42();
  }
  else
  {
    uint64_t v48 = *(void (**)(uint64_t, uint64_t))(v0 + 1800);
    uint64_t v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1784);
    uint64_t v45 = *(void *)(v0 + 1776);
    uint64_t v25 = *(void *)(v0 + 1768);
    uint64_t v47 = v11;
    uint64_t v26 = *(int **)(v0 + 1664);
    uint64_t v27 = v10;
    uint64_t v28 = *(void *)(v0 + 984);
    uint64_t v29 = *(void *)(v0 + 848);
    uint64_t v58 = v62;
    uint64_t v60 = v61[1];
    *(void *)(v0 + 2672) = v62;
    uint64_t v57 = v63;
    *(void *)(v0 + 2680) = v63;
    char v49 = v61[0];
    sub_10001CD44((void *)(v29 + 208), *(void *)(v29 + 232));
    sub_10000588C(&qword_10163BAB0);
    uint64_t v44 = v12;
    uint64_t v30 = swift_allocObject();
    *(void *)(v0 + 2688) = v30;
    *(_OWORD *)(v30 + 16) = xmmword_101342130;
    uint64_t v43 = v13;
    uint64_t v31 = v26[12];
    uint64_t v32 = v25 + v26[16];
    uint64_t v33 = (void *)(v25 + v26[20]);
    uint64_t v34 = v26[24];
    uint64_t v35 = (void *)(v25 + v26[28]);
    v46(v25, v45, v28);
    *(unsigned char *)(v25 + v31) = v52;
    *(unsigned char *)uint64_t v32 = v55;
    *(void *)(v32 + 8) = v53;
    *(void *)(v32 + 16) = v27;
    *uint64_t v33 = v47;
    v33[1] = v51;
    *(void *)(v25 + v34) = v50;
    *uint64_t v35 = v43;
    v35[1] = v44;
    *(unsigned char *)(v30 + 32) = v55;
    *(void *)(v30 + 40) = v53;
    *(void *)(v30 + 48) = v27;
    swift_bridgeObjectRetain();
    v48(v25, v28);
    uint64_t v36 = (void *)swift_task_alloc();
    *(void *)(v0 + 2696) = v36;
    *uint64_t v36 = v0;
    v36[1] = sub_100FA9184;
    uint64_t v37 = *(void *)(v0 + 1024);
    return sub_100CCEEF0(v37, v49, v60, v58, v57, v30);
  }
}

uint64_t sub_100FA9184()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 2704) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 848);
    uint64_t v4 = sub_100FA99A8;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 848);
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_100FA92AC;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100FA92AC()
{
  uint64_t v57 = v0;
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 1800);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1784);
  uint64_t v3 = *(void *)(v0 + 1024);
  uint64_t v4 = *(void *)(v0 + 1016);
  uint64_t v5 = *(void *)(v0 + 1008);
  uint64_t v6 = *(void *)(v0 + 984);
  (*(void (**)(void, void, void))(v0 + 1968))(*(void *)(v0 + 1448), *(void *)(v0 + 1960), *(void *)(v0 + 1376));
  v2(v4, v3, v6);
  v2(v5, v4, v6);
  v1(v4, v6);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v47 = *(void *)(v0 + 2672);
    unint64_t v48 = *(void *)(v0 + 2680);
    char v52 = *(void (**)(uint64_t, uint64_t))(v0 + 2208);
    uint64_t v46 = *(void (**)(uint64_t, uint64_t))(v0 + 1800);
    uint64_t v49 = *(void *)(v0 + 1376);
    uint64_t v50 = *(void *)(v0 + 1448);
    uint64_t v51 = *(void *)(v0 + 1024);
    uint64_t v9 = *(void *)(v0 + 1008);
    uint64_t v10 = *(void *)(v0 + 984);
    uint64_t v11 = swift_slowAlloc();
    uint64_t v56 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 141558275;
    *(void *)(v0 + 664) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 12) = 2081;
    sub_100FB6F70((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 672) = sub_1008FA0F0(v12, v13, &v56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v46(v9, v10);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Circle Trust Ack message identifier is %{private,mask.hash}s.", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    sub_10001CFB8(v47, v48);

    v52(v50, v49);
    v46(v51, v10);
  }
  else
  {
    uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v0 + 2208);
    os_log_type_t v15 = v7;
    BOOL v16 = *(void (**)(uint64_t, uint64_t))(v0 + 1800);
    uint64_t v17 = *(void *)(v0 + 1448);
    uint64_t v18 = *(void *)(v0 + 1376);
    uint64_t v19 = *(void *)(v0 + 1024);
    uint64_t v20 = *(void *)(v0 + 1008);
    uint64_t v21 = *(void *)(v0 + 984);
    sub_10001CFB8(*(void *)(v0 + 2672), *(void *)(v0 + 2680));

    v16(v20, v21);
    v14(v17, v18);
    v16(v19, v21);
  }
  int v22 = *(unsigned __int8 *)(v0 + 2902);
  int v23 = *(unsigned __int8 *)(*(void *)(v0 + 1776) + *(int *)(v0 + 2792));
  *(unsigned char *)(v0 + 2905) = v23;
  if (v22 == 1)
  {
    unint64_t v24 = *(int **)(v0 + 832);
    if (v24)
    {
      uint64_t v53 = (uint64_t (*)(uint64_t))((char *)v24 + *v24);
      uint64_t v25 = (void *)swift_task_alloc();
      *(void *)(v0 + 2712) = v25;
      *uint64_t v25 = v0;
      v25[1] = sub_100FAA1F8;
      uint64_t v26 = *(void *)(v0 + 1656);
      return v53(v26);
    }
    uint64_t v35 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 1944);
    uint64_t v36 = *(void *)(v0 + 1224);
    uint64_t v37 = *(void *)(v0 + 1128);
    sub_10001D074(*(void *)(v0 + 1152), v37, (uint64_t *)&unk_10163B890);
    if (v35(v37, 1, v36) == 1)
    {
      sub_10001DAB4(*(void *)(v0 + 1128), (uint64_t *)&unk_10163B890);
      uint64_t v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v38, v39))
      {
        uint64_t v40 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v40 = 0;
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "Failure on handleCircleTrust, accepting of already accepted share: no  owner peer trust record!", v40, 2u);
        swift_slowDealloc();
      }

      goto LABEL_23;
    }
    uint64_t v44 = *(void *)(v0 + 848);
    sub_100FB6C70(*(void *)(v0 + 1128), *(void *)(v0 + 1256), (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
    uint64_t v45 = sub_10001CD44((void *)(v44 + 344), *(void *)(v44 + 368));
    uint64_t v32 = *v45;
    *(void *)(v0 + 2720) = *v45;
    uint64_t v31 = (uint64_t)sub_100FAA4F8;
    uint64_t v33 = 0;
    return _swift_task_switch(v31, v32, v33);
  }
  if (v23 == 4)
  {
    sub_10001CD44((void *)(*(void *)(v0 + 848) + 344), *(void *)(*(void *)(v0 + 848) + 368));
    uint64_t v28 = (void *)swift_task_alloc();
    *(void *)(v0 + 2744) = v28;
    void *v28 = v0;
    v28[1] = sub_100FAA8E8;
    uint64_t v29 = *(void *)(v0 + 1776);
    return sub_1000656A4(v29);
  }
  else
  {
    int v30 = *(unsigned __int8 *)(v0 + 2903);
    if (v30 != 5 && v30 == *(unsigned __int8 *)(v0 + 2904))
    {
LABEL_23:
      int v41 = *(unsigned __int8 *)(v0 + 2905);
      char v55 = (uint64_t (*)(char, char))((char *)&dword_101662A30 + dword_101662A30);
      uint64_t v42 = (void *)swift_task_alloc();
      *(void *)(v0 + 2784) = v42;
      void *v42 = v0;
      v42[1] = sub_100FAB7EC;
      char v43 = *(unsigned char *)(v0 + 2902);
      return v55(v43, v41 == 4);
    }
    uint64_t v31 = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 136, (uint64_t *)&unk_101638D30);
    if (!*(void *)(v0 + 160))
    {
      __break(1u);
      return _swift_task_switch(v31, v32, v33);
    }
    sub_10001CEB0((long long *)(v0 + 136), v0 + 176);
    sub_10001CD44((void *)(v0 + 176), *(void *)(v0 + 200));
    uint64_t v54 = (uint64_t (__cdecl *)())((char *)&dword_1016391F8 + dword_1016391F8);
    uint64_t v34 = (void *)swift_task_alloc();
    *(void *)(v0 + 2760) = v34;
    *uint64_t v34 = v0;
    v34[1] = sub_100FAAD64;
    return v54();
  }
}

uint64_t sub_100FA99A8()
{
  uint64_t v23 = v0;
  sub_10001CFB8(*(void *)(v0 + 2672), *(void *)(v0 + 2680));
  swift_bridgeObjectRelease();
  (*(void (**)(void, void, void))(v0 + 1968))(*(void *)(v0 + 1392), *(void *)(v0 + 1960), *(void *)(v0 + 1376));
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v0 + 2208);
    uint64_t v17 = *(void *)(v0 + 1376);
    uint64_t v18 = *(void *)(v0 + 1392);
    uint64_t v21 = *(void *)(v0 + 1296);
    uint64_t v19 = *(void *)(v0 + 1152);
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446210;
    swift_getErrorValue();
    uint64_t v4 = Error.localizedDescription.getter();
    *(void *)(v0 + 608) = sub_1008FA0F0(v4, v5, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failure on handleCircleTrust, sending message: %{public}s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    swift_release();
    v20(v18, v17);
    sub_10001DAB4(v19, (uint64_t *)&unk_10163B890);
    uint64_t v6 = v21;
  }
  else
  {
    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v0 + 2208);
    uint64_t v8 = *(void *)(v0 + 1392);
    uint64_t v9 = *(void *)(v0 + 1376);
    uint64_t v10 = *(void *)(v0 + 1296);
    uint64_t v11 = *(void *)(v0 + 1152);

    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
    swift_release();
    v7(v8, v9);
    sub_10001DAB4(v11, (uint64_t *)&unk_10163B890);
    uint64_t v6 = v10;
  }
  sub_100FB893C(v6, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
  uint64_t v12 = *(void *)(v0 + 1368);
  uint64_t v13 = *(void *)(v0 + 1216);
  sub_10001DAB4(*(void *)(v0 + 904), (uint64_t *)&unk_101653D50);
  sub_100FB893C(v13, type metadata accessor for SharedBeaconRecord);
  sub_100FB893C(v12, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  uint64_t v14 = *(void *)(v0 + 1776);
  sub_10001DAB4(*(void *)(v0 + 1656), &qword_10163B938);
  sub_10001DAB4(v14, &qword_10163B940);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v15 = *(uint64_t (**)(void))(v0 + 8);
  return v15();
}

uint64_t sub_100FAA1F8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 848);
  swift_task_dealloc();
  return _swift_task_switch(sub_100FAA308, v1, 0);
}

uint64_t sub_100FAA308()
{
  uint64_t v1 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 1944);
  uint64_t v2 = *(void *)(v0 + 1224);
  uint64_t v3 = *(void *)(v0 + 1128);
  sub_10001D074(*(void *)(v0 + 1152), v3, (uint64_t *)&unk_10163B890);
  int v4 = v1(v3, 1, v2);
  uint64_t v5 = *(void *)(v0 + 1128);
  if (v4 == 1)
  {
    sub_10001DAB4(v5, (uint64_t *)&unk_10163B890);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Failure on handleCircleTrust, accepting of already accepted share: no  owner peer trust record!", v8, 2u);
      swift_slowDealloc();
    }

    int v9 = *(unsigned __int8 *)(v0 + 2905);
    BOOL v16 = (uint64_t (*)(uint64_t, BOOL))((char *)&dword_101662A30 + dword_101662A30);
    uint64_t v10 = (void *)swift_task_alloc();
    *(void *)(v0 + 2784) = v10;
    *uint64_t v10 = v0;
    v10[1] = sub_100FAB7EC;
    uint64_t v11 = *(unsigned __int8 *)(v0 + 2902);
    return v16(v11, v9 == 4);
  }
  else
  {
    uint64_t v13 = *(void *)(v0 + 848);
    sub_100FB6C70(v5, *(void *)(v0 + 1256), (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
    uint64_t v14 = sub_10001CD44((void *)(v13 + 344), *(void *)(v13 + 368));
    uint64_t v15 = *v14;
    *(void *)(v0 + 2720) = *v14;
    return _swift_task_switch(sub_100FAA4F8, v15, 0);
  }
}

uint64_t sub_100FAA4F8()
{
  uint64_t v1 = (void (*)(uint64_t *, uint64_t, uint64_t))v0[223];
  uint64_t v2 = v0[222];
  uint64_t v3 = v0[157];
  uint64_t v4 = v0[153];
  uint64_t v5 = v0[123];
  uint64_t v6 = v0[340] + 240;
  v0[14] = type metadata accessor for CircleTrustAcceptEnvelopeV1(0);
  v0[15] = sub_100FB6F70(&qword_101639EA8, (void (*)(uint64_t))type metadata accessor for CircleTrustAcceptEnvelopeV1);
  v0[16] = sub_100FB6F70(&qword_101639EB0, (void (*)(uint64_t))type metadata accessor for CircleTrustAcceptEnvelopeV1);
  os_log_type_t v7 = sub_10001D958(v0 + 11);
  v1(v7, v2, v5);
  uint64_t v8 = v3 + *(int *)(v4 + 28);
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, char, uint64_t))((char *)&dword_101670A50 + dword_101670A50);
  int v9 = (void *)swift_task_alloc();
  v0[341] = (uint64_t)v9;
  void *v9 = v0;
  v9[1] = sub_100FAA678;
  return v11(v6, (uint64_t)(v0 + 11), 3, v8);
}

uint64_t sub_100FAA678()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 2736) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 2720);
    uint64_t v4 = sub_100FAA870;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 848);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v2 + 88);
    uint64_t v4 = sub_100FAA7A0;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100FAA7A0()
{
  sub_100FB893C(*(void *)(v0 + 1256), (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
  int v1 = *(unsigned __int8 *)(v0 + 2905);
  uint64_t v5 = (uint64_t (*)(char, char))((char *)&dword_101662A30 + dword_101662A30);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 2784) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100FAB7EC;
  char v3 = *(unsigned char *)(v0 + 2902);
  return v5(v3, v1 == 4);
}

uint64_t sub_100FAA870()
{
  uint64_t v1 = *(void *)(v0 + 848);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 88);
  swift_errorRelease();
  return _swift_task_switch(sub_100FB98BC, v1, 0);
}

uint64_t sub_100FAA8E8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 2752) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 848);
  if (v0) {
    uint64_t v4 = sub_100FAAAC8;
  }
  else {
    uint64_t v4 = sub_100FAAA14;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100FAAA14()
{
  int v1 = *(unsigned __int8 *)(v0 + 2905);
  uint64_t v5 = (uint64_t (*)(char, char))((char *)&dword_101662A30 + dword_101662A30);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 2784) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100FAB7EC;
  char v3 = *(unsigned char *)(v0 + 2902);
  return v5(v3, v1 == 4);
}

uint64_t sub_100FAAAC8()
{
  uint64_t v18 = v0;
  (*(void (**)(void, void, void))(v0 + 1968))(*(void *)(v0 + 1440), *(void *)(v0 + 1960), *(void *)(v0 + 1376));
  swift_errorRetain();
  swift_errorRetain();
  int v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v0 + 2208);
    uint64_t v14 = *(void *)(v0 + 1440);
    uint64_t v13 = *(void *)(v0 + 1376);
    char v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)char v3 = 136446210;
    swift_getErrorValue();
    uint64_t v4 = Error.localizedDescription.getter();
    *(void *)(v0 + 648) = sub_1008FA0F0(v4, v5, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failure on handleCircleTrust, automatic share accepting: %{public}s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    v15(v14, v13);
  }
  else
  {
    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v0 + 2208);
    uint64_t v7 = *(void *)(v0 + 1440);
    uint64_t v8 = *(void *)(v0 + 1376);
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    v6(v7, v8);
  }
  int v9 = *(unsigned __int8 *)(v0 + 2905);
  BOOL v16 = (uint64_t (*)(char, char))((char *)&dword_101662A30 + dword_101662A30);
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v0 + 2784) = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_100FAB7EC;
  char v11 = *(unsigned char *)(v0 + 2902);
  return v16(v11, v9 == 4);
}

uint64_t sub_100FAAD64(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 848);
  *(void *)(*(void *)v1 + 2768) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100FAAE7C, v2, 0);
}

uint64_t sub_100FAAE7C()
{
  uint64_t v1 = (uint64_t)(v0 + 22);
  if (v0[346])
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v2 = (void *)swift_task_alloc();
    v0[347] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100FAB5F8;
    uint64_t v3 = v0[171];
    return sub_100B80868(v3);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_101636FA0 != -1) {
      swift_once();
    }
    sub_100010324(v0[172], (uint64_t)qword_10170EA60);
    unint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "No ItemSharingNotificationsService available!", v7, 2u);
      swift_slowDealloc();
    }
    uint64_t v8 = v0[171];
    uint64_t v9 = v0[162];
    uint64_t v10 = v0[152];
    uint64_t v11 = v0[144];
    uint64_t v12 = v0[113];

    swift_release();
    sub_10001DAB4(v11, (uint64_t *)&unk_10163B890);
    sub_100FB893C(v9, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
    sub_10001DAB4(v12, (uint64_t *)&unk_101653D50);
    sub_100FB893C(v10, type metadata accessor for SharedBeaconRecord);
    sub_100FB893C(v8, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    uint64_t v13 = v0[222];
    sub_10001DAB4(v0[207], &qword_10163B938);
    sub_10001DAB4(v13, &qword_10163B940);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v14 = (uint64_t (*)(void))v0[1];
    return v14();
  }
}

uint64_t sub_100FAB5F8()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 848);
  if (v0)
  {
    swift_errorRelease();
    uint64_t v4 = sub_100FB98C0;
  }
  else
  {
    uint64_t v4 = sub_100FAB730;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100FAB730()
{
  swift_release();
  int v1 = *(unsigned __int8 *)(v0 + 2905);
  unint64_t v5 = (uint64_t (*)(char, char))((char *)&dword_101662A30 + dword_101662A30);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 2784) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100FAB7EC;
  char v3 = *(unsigned char *)(v0 + 2902);
  return v5(v3, v1 == 4);
}

uint64_t sub_100FAB7EC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 848);
  swift_task_dealloc();
  return _swift_task_switch(sub_100FAB8FC, v1, 0);
}

uint64_t sub_100FAB8FC()
{
  uint64_t v1 = v0[171];
  uint64_t v2 = v0[162];
  uint64_t v3 = v0[152];
  uint64_t v4 = v0[144];
  uint64_t v5 = v0[113];
  swift_release();
  sub_10001DAB4(v4, (uint64_t *)&unk_10163B890);
  sub_100FB893C(v2, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
  sub_10001DAB4(v5, (uint64_t *)&unk_101653D50);
  sub_100FB893C(v3, type metadata accessor for SharedBeaconRecord);
  sub_100FB893C(v1, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  uint64_t v6 = v0[222];
  sub_10001DAB4(v0[207], &qword_10163B938);
  sub_10001DAB4(v6, &qword_10163B940);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100FABF30()
{
  uint64_t v110 = v0;
  uint64_t v84 = *(int *)(v0 + 2836);
  uint64_t v83 = *(int *)(v0 + 2832);
  uint64_t v80 = *(int *)(v0 + 2828);
  uint64_t v106 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1784);
  uint64_t v100 = *(int *)(v0 + 2804);
  uint64_t v98 = *(int *)(v0 + 2792);
  uint64_t v81 = *(void *)(v0 + 1776);
  uint64_t v1 = *(void *)(v0 + 1688);
  uint64_t v102 = *(void *)(v0 + 1680);
  uint64_t v104 = *(void *)(v0 + 1672);
  uint64_t v2 = *(int **)(v0 + 1664);
  uint64_t v3 = *(void *)(v0 + 1656);
  uint64_t v4 = *(void *)(v0 + 1528);
  uint64_t v76 = *(void *)(v0 + 1520);
  uint64_t v78 = *(void *)(v0 + 1512);
  uint64_t v75 = (void *)(v3 + *(int *)(v0 + 2840));
  uint64_t v5 = *(int **)(v0 + 1504);
  uint64_t v89 = (uint64_t *)(v3 + *(int *)(v0 + 2824));
  uint64_t v92 = (uint64_t *)(v3 + *(int *)(v0 + 2820));
  uint64_t v95 = (uint64_t *)(v3 + *(int *)(v0 + 2816));
  uint64_t v71 = v3 + *(int *)(v0 + 2812);
  os_log_type_t type = (uint64_t *)(v81 + *(int *)(v0 + 2808));
  uint64_t v86 = (void *)(v81 + *(int *)(v0 + 2800));
  uint64_t v85 = v81 + *(int *)(v0 + 2796);
  uint64_t v6 = *(void *)(v0 + 984);
  (*(void (**)(void))(v0 + 1968))();
  uint64_t v67 = v4 + v5[12];
  uint64_t v7 = (void *)(v4 + v5[16]);
  uint64_t v8 = (void *)(v4 + v5[20]);
  uint64_t v9 = (void *)(v4 + v5[24]);
  uint64_t v70 = v5[28];
  uint64_t v72 = v5[32];
  uint64_t v73 = v5[36];
  uint64_t v10 = (void *)(v4 + v5[40]);
  v106(v4, v3, v6);
  sub_10001D074(v71, v67, &qword_101638CF0);
  uint64_t v11 = *v95;
  uint64_t v96 = v95[1];
  *uint64_t v7 = v11;
  v7[1] = v96;
  uint64_t v12 = *v92;
  uint64_t v93 = v92[1];
  *uint64_t v8 = v12;
  v8[1] = v93;
  uint64_t v13 = *v89;
  uint64_t v90 = v89[1];
  void *v9 = v13;
  v9[1] = v90;
  *(_DWORD *)(v4 + v70) = *(_DWORD *)(v3 + v80);
  *(_DWORD *)(v4 + v72) = *(_DWORD *)(v3 + v83);
  *(void *)(v4 + v73) = *(void *)(v3 + v84);
  uint64_t v14 = v75[1];
  *uint64_t v10 = *v75;
  v10[1] = v14;
  sub_10001D074(v4, v76, &qword_10163B938);
  sub_10001D608(v4, v78, &qword_10163B938);
  uint64_t v15 = v2[12];
  uint64_t v16 = v1 + v2[16];
  uint64_t v17 = (void *)(v1 + v2[20]);
  uint64_t v18 = v2[24];
  uint64_t v19 = (uint64_t *)(v1 + v2[28]);
  v106(v1, v81, v6);
  *(unsigned char *)(v1 + v15) = *(unsigned char *)(v81 + v98);
  uint64_t v20 = *(void *)(v85 + 8);
  uint64_t v21 = *(void *)(v85 + 16);
  *(unsigned char *)uint64_t v16 = *(unsigned char *)v85;
  *(void *)(v16 + 8) = v20;
  *(void *)(v16 + 16) = v21;
  uint64_t v22 = v86[1];
  void *v17 = *v86;
  v17[1] = v22;
  *(void *)(v1 + v18) = *(void *)(v81 + v100);
  uint64_t v23 = *type;
  unint64_t v24 = type[1];
  *uint64_t v19 = *type;
  v19[1] = v24;
  sub_10001D074(v1, v102, &qword_10163B940);
  sub_10001D608(v1, v104, &qword_10163B940);
  swift_errorRetain();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000361E0(v23, v24);
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.error.getter();
  uint64_t v108 = v25;
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v105 = *(void (**)(uint64_t, uint64_t))(v0 + 1800);
    uint64_t v103 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1784);
    uint64_t v77 = *(void *)(v0 + 1768);
    uint64_t v79 = *(void *)(v0 + 1680);
    uint64_t v82 = *(void *)(v0 + 1672);
    uint64_t v27 = *(void *)(v0 + 1624);
    uint64_t v28 = *(void *)(v0 + 1520);
    uint64_t v74 = *(void *)(v0 + 1512);
    os_log_type_t typea = v26;
    uint64_t v29 = *(int **)(v0 + 1504);
    uint64_t v97 = *(void *)(v0 + 1416);
    uint64_t v91 = *(void *)(v0 + 1384);
    uint64_t v94 = *(void *)(v0 + 1376);
    uint64_t v107 = *(void *)(v0 + 992);
    uint64_t v99 = *(void *)(v0 + 984);
    uint64_t v101 = *(void *)(v0 + 1072);
    uint64_t v30 = swift_slowAlloc();
    v109[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v30 = 141559043;
    *(void *)(v0 + 720) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v30 + 12) = 2081;
    uint64_t v31 = v29[12];
    uint64_t v32 = v27 + v31;
    uint64_t v33 = v29[16];
    uint64_t v34 = (void *)(v27 + v33);
    uint64_t v35 = v29[20];
    uint64_t v62 = (void *)(v27 + v35);
    uint64_t v36 = v29[24];
    uint64_t v63 = (void *)(v27 + v36);
    uint64_t v64 = v29[28];
    uint64_t v65 = v29[32];
    uint64_t v66 = v29[36];
    uint64_t v68 = v29[40];
    uint64_t v37 = v28 + v31;
    uint64_t v38 = (void *)(v28 + v33);
    os_log_type_t v39 = (void *)(v28 + v35);
    uint64_t v40 = (void *)(v28 + v36);
    v103(v27, v28, v99);
    sub_10001D074(v37, v32, &qword_101638CF0);
    uint64_t v41 = v38[1];
    *uint64_t v34 = *v38;
    v34[1] = v41;
    uint64_t v42 = v39[1];
    *uint64_t v62 = *v39;
    v62[1] = v42;
    uint64_t v43 = v40[1];
    *uint64_t v63 = *v40;
    v63[1] = v43;
    *(_DWORD *)(v27 + v64) = *(_DWORD *)(v28 + v64);
    *(_DWORD *)(v27 + v65) = *(_DWORD *)(v28 + v65);
    *(void *)(v27 + v66) = *(void *)(v28 + v66);
    *(_OWORD *)(v27 + v68) = *(_OWORD *)(v28 + v68);
    uint64_t v69 = *(void (**)(uint64_t, uint64_t, uint64_t))(v107 + 32);
    v69(v101, v27, v99);
    sub_10001DAB4(v32, &qword_101638CF0);
    sub_100FB6F70((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v44 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v46 = v45;
    v105(v101, v99);
    *(void *)(v0 + 728) = sub_1008FA0F0(v44, v46, v109);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10001DAB4(v74, &qword_10163B938);
    sub_10001DAB4(v28, &qword_10163B938);
    *(_WORD *)(v30 + 22) = 2160;
    *(void *)(v0 + 736) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v30 + 32) = 2081;
    v103(v77, v79, v99);
    v69(v101, v77, v99);
    uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v49 = v48;
    v105(v101, v99);
    *(void *)(v0 + 744) = sub_1008FA0F0(v47, v49, v109);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10001DAB4(v82, &qword_10163B940);
    sub_10001DAB4(v79, &qword_10163B940);
    *(_WORD *)(v30 + 42) = 2082;
    swift_getErrorValue();
    uint64_t v50 = Error.localizedDescription.getter();
    *(void *)(v0 + 768) = sub_1008FA0F0(v50, v51, v109);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v108, typea, "Failure on updating beacon attributes, beaconIdentifier: %{private,mask.hash}s, shareIdentifier: %{private,mask.hash}s,\nerror: %{public}s.", (uint8_t *)v30, 0x34u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v97, v94);
  }
  else
  {
    uint64_t v52 = *(void *)(v0 + 1680);
    uint64_t v53 = *(void *)(v0 + 1672);
    uint64_t v54 = *(void *)(v0 + 1520);
    uint64_t v55 = *(void *)(v0 + 1512);
    uint64_t v56 = *(void *)(v0 + 1416);
    uint64_t v57 = *(void *)(v0 + 1384);
    uint64_t v58 = *(void *)(v0 + 1376);
    swift_errorRelease();
    sub_10001DAB4(v55, &qword_10163B938);
    sub_10001DAB4(v54, &qword_10163B938);
    sub_10001DAB4(v53, &qword_10163B940);
    sub_10001DAB4(v52, &qword_10163B940);
    swift_errorRelease();
    swift_errorRelease();

    (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v56, v58);
  }
  *(void *)(v0 + 2048) = 0;
  uint64_t v59 = (void *)swift_task_alloc();
  *(void *)(v0 + 2056) = v59;
  void *v59 = v0;
  v59[1] = sub_100F9D558;
  uint64_t v60 = *(void *)(v0 + 1656);
  return sub_100E5B3AC(v60);
}

uint64_t sub_100FAC83C()
{
  sub_10001DAB4(*(void *)(v0 + 888), &qword_101639E88);
  (*(void (**)(void, void, void))(v0 + 1968))(*(void *)(v0 + 1400), *(void *)(v0 + 1960), *(void *)(v0 + 1376));
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138412290;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 528) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failure on handleCircleTrust, updating iCloud: %@", v3, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v0 + 2208);
  uint64_t v7 = *(void *)(v0 + 1400);
  uint64_t v8 = *(void *)(v0 + 1376);
  uint64_t v16 = *(void *)(v0 + 1368);
  uint64_t v9 = *(void *)(v0 + 1296);
  uint64_t v10 = *(void *)(v0 + 1216);
  uint64_t v11 = *(void *)(v0 + 1152);
  uint64_t v12 = *(void *)(v0 + 904);
  swift_errorRelease();
  v6(v7, v8);
  sub_10001DAB4(v11, (uint64_t *)&unk_10163B890);
  sub_100FB893C(v9, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
  sub_10001DAB4(v12, (uint64_t *)&unk_101653D50);
  sub_100FB893C(v10, type metadata accessor for SharedBeaconRecord);
  sub_100FB893C(v16, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  uint64_t v13 = *(void *)(v0 + 1776);
  sub_10001DAB4(*(void *)(v0 + 1656), &qword_10163B938);
  sub_10001DAB4(v13, &qword_10163B940);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
  return v14();
}

uint64_t sub_100FACFE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v40 = a3;
  uint64_t v41 = sub_10000588C((uint64_t *)&unk_10166EAF0);
  __chkstk_darwin(v41);
  uint64_t v42 = (uint64_t)v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101653D30);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_101638CF0);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v38 = (uint64_t)v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v43 = (char *)v36 - v12;
  __chkstk_darwin(v11);
  uint64_t v44 = (uint64_t)v36 - v13;
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v19 = a1 + *(int *)(v18 + 20);
  os_log_type_t v39 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v39(v17, v19, v14);
  v36[1] = sub_100FB6F70((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
  char v20 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v37 = *(void (**)(char *, uint64_t))(v15 + 8);
  v37(v17, v14);
  if (v20)
  {
    char v21 = 0;
  }
  else
  {
    sub_10001D074(a1 + *(int *)(v18 + 80), (uint64_t)v7, (uint64_t *)&unk_101653D30);
    uint64_t v22 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 48))(v7, 1, v22) == 1)
    {
      sub_10001DAB4((uint64_t)v7, (uint64_t *)&unk_101653D30);
      uint64_t v23 = v44;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(v44, 1, 1, v14);
    }
    else
    {
      uint64_t v23 = v44;
      sub_10001D074((uint64_t)&v7[*(int *)(v22 + 20)], v44, &qword_101638CF0);
      sub_100FB893C((uint64_t)v7, type metadata accessor for SharedBeaconRecord.PropertyListContent);
    }
    uint64_t v24 = (uint64_t)v43;
    v39(v43, v40, v14);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v15 + 56))(v24, 0, 1, v14);
    uint64_t v25 = v42;
    uint64_t v26 = v42 + *(int *)(v41 + 48);
    sub_10001D074(v23, v42, &qword_101638CF0);
    sub_10001D074(v24, v26, &qword_101638CF0);
    uint64_t v27 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
    if (v27(v25, 1, v14) == 1)
    {
      sub_10001DAB4(v24, &qword_101638CF0);
      sub_10001DAB4(v44, &qword_101638CF0);
      int v28 = v27(v26, 1, v14);
      if (v28 == 1) {
        uint64_t v29 = &qword_101638CF0;
      }
      else {
        uint64_t v29 = (uint64_t *)&unk_10166EAF0;
      }
      if (v28 == 1) {
        char v21 = -1;
      }
      else {
        char v21 = 0;
      }
    }
    else
    {
      uint64_t v30 = v38;
      sub_10001D074(v25, v38, &qword_101638CF0);
      if (v27(v26, 1, v14) == 1)
      {
        uint64_t v31 = v30;
        char v21 = 0;
        uint64_t v29 = (uint64_t *)&unk_10166EAF0;
        uint64_t v32 = (uint64_t)v43;
        uint64_t v33 = v44;
        uint64_t v34 = (void (*)(uint64_t, uint64_t))v37;
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v15 + 32))(v17, v26, v14);
        uint64_t v31 = v30;
        char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v34 = (void (*)(uint64_t, uint64_t))v37;
        v37(v17, v14);
        uint64_t v29 = &qword_101638CF0;
        uint64_t v32 = (uint64_t)v43;
        uint64_t v33 = v44;
      }
      sub_10001DAB4(v32, &qword_101638CF0);
      sub_10001DAB4(v33, &qword_101638CF0);
      v34(v31, v14);
    }
    sub_10001DAB4(v25, v29);
  }
  return v21 & 1;
}

BOOL sub_100FAD54C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MemberSharingCircle();
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)v29 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)v29 - v15;
  if (*(void *)(a2 + 16))
  {
    unint64_t v17 = sub_1007240CC(a1 + *(int *)(v4 + 24));
    if (v18)
    {
      sub_100FB6BB8(*(void *)(a2 + 56) + *(void *)(v8 + 72) * v17, (uint64_t)v14, type metadata accessor for SharedBeaconRecord);
      sub_100FB6C70((uint64_t)v14, (uint64_t)v16, type metadata accessor for SharedBeaconRecord);
      int v19 = *(unsigned __int8 *)(a1 + *(int *)(v4 + 40));
      if (v19 == 1 || v19 == 4)
      {
        sub_100FB6BB8((uint64_t)v16, (uint64_t)v11, type metadata accessor for SharedBeaconRecord);
      }
      else
      {
        sub_100FB6BB8((uint64_t)v16, (uint64_t)v11, type metadata accessor for SharedBeaconRecord);
        if (v19 != 2)
        {
          BOOL v21 = 0;
          goto LABEL_10;
        }
      }
      BOOL v21 = v11[*(int *)(v7 + 64)] == 2;
LABEL_10:
      sub_100FB893C((uint64_t)v11, type metadata accessor for SharedBeaconRecord);
      sub_100FB893C((uint64_t)v16, type metadata accessor for SharedBeaconRecord);
      return v21;
    }
  }
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  sub_100010324(v22, (uint64_t)qword_10170D788);
  sub_100FB6BB8(a1, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = (uint8_t *)swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    *(_DWORD *)uint64_t v25 = 136315138;
    type metadata accessor for UUID();
    sub_100FB6F70((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter();
    v29[1] = sub_1008FA0F0(v26, v27, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100FB893C((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "No sharedBeaconRecord for existing sharing circle %s!", v25, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100FB893C((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  }

  return 0;
}

uint64_t sub_100FAD9A0(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  uint64_t v3 = type metadata accessor for UUID();
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[5] = v4;
  v2[6] = *(void *)(v4 + 64);
  v2[7] = swift_task_alloc();
  v2[8] = sub_10000588C((uint64_t *)&unk_101653D50);
  v2[9] = swift_task_alloc();
  return _swift_task_switch(sub_100FADA9C, 0, 0);
}

uint64_t sub_100FADA9C()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 24) + 160);
  *(void *)(v0 + 80) = v1;
  uint64_t v2 = type metadata accessor for MemberSharingCircle();
  *(void *)(v0 + 88) = v2;
  *(_DWORD *)(v0 + 128) = *(_DWORD *)(v2 + 24);
  return _swift_task_switch(sub_100FADB1C, v1, 0);
}

uint64_t sub_100FADB1C()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v5 = *(void *)(v0 + 16) + *(int *)(v0 + 128);
  *(void *)(v0 + 96) = *(void *)(v1 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v5, v3);
  unint64_t v6 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = swift_allocObject();
  *(void *)(v0 + 104) = v7;
  *(void *)(v7 + 16) = v1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v7 + v6, v2, v3);
  swift_retain();
  return _swift_task_switch(sub_100FADC18, 0, 0);
}

uint64_t sub_100FADC18()
{
  uint64_t v2 = v0[12];
  uint64_t v1 = v0[13];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[14] = v3;
  v3[2] = v2;
  v3[3] = sub_100FB6918;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[15] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100FADD1C;
  uint64_t v6 = v0[8];
  uint64_t v5 = v0[9];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100075048, v3, v6);
}

uint64_t sub_100FADD1C()
{
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_100FADE50, 0, 0);
}

uint64_t sub_100FADE50()
{
  uint64_t v1 = v0[9];
  uint64_t v2 = type metadata accessor for SharedBeaconRecord(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    sub_10001DAB4(v1, (uint64_t *)&unk_101653D50);
  }
  else
  {
    int v3 = *(unsigned __int8 *)(v1 + *(int *)(v2 + 64));
    sub_100FB893C(v1, type metadata accessor for SharedBeaconRecord);
    if (v3 == 2)
    {
      BOOL v4 = *(unsigned char *)(v0[2] + *(int *)(v0[11] + 40)) == 0;
      goto LABEL_6;
    }
  }
  BOOL v4 = 0;
LABEL_6:
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(BOOL))v0[1];
  return v5(v4);
}

void sub_100FADF70(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v63 = a4;
  uint64_t v64 = a8;
  uint64_t v60 = a7;
  uint64_t v61 = a6;
  uint64_t v62 = (int *)sub_10000588C(&qword_10163B940);
  __chkstk_darwin(v62);
  uint64_t v13 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000588C((uint64_t *)&unk_101653D50);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  char v20 = (uint64_t *)((char *)&v55 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v21 = v65;
  sub_100EE2338(a3);
  if (!v21)
  {
    uint64_t v55 = v18;
    uint64_t v56 = (void *)v17;
    uint64_t v65 = a1;
    uint64_t v57 = (uint64_t)v16;
    uint64_t v58 = v13;
    uint64_t v22 = v62;
    uint64_t v59 = v20;
    uint64_t v23 = v63;
    uint64_t v24 = v63[2];
    if (v24)
    {
      uint64_t v25 = *(void *)(sub_10000588C(&qword_10163BA20) - 8);
      uint64_t v26 = (uint64_t *)((char *)v23
                      + ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80)));
      uint64_t v27 = *(void *)(v25 + 72);
      swift_bridgeObjectRetain();
      uint64_t v28 = v65;
      do
      {
        sub_100FAE458(v26, v28, a2, a5);
        uint64_t v26 = (uint64_t *)((char *)v26 + v27);
        --v24;
      }
      while (v24);
      swift_bridgeObjectRelease();
      uint64_t v29 = v64;
    }
    else
    {
      uint64_t v29 = v64;
    }
    uint64_t v30 = v57;
    sub_10001D074(a5, v57, (uint64_t *)&unk_101653D50);
    int v31 = (*(uint64_t (**)(uint64_t, uint64_t, void *))(v55 + 48))(v30, 1, v56);
    uint64_t v32 = (uint64_t)v58;
    if (v31 == 1)
    {
      sub_10001DAB4(v30, (uint64_t *)&unk_101653D50);
      sub_100EE230C(v61);
    }
    else
    {
      sub_100FB6C70(v30, (uint64_t)v59, type metadata accessor for SharedBeaconRecord);
      uint64_t v33 = v22[12];
      uint64_t v34 = v22[16];
      uint64_t v35 = v32 + v34;
      uint64_t v36 = v22[20];
      uint64_t v56 = (void *)(v32 + v36);
      uint64_t v57 = v22[24];
      uint64_t v37 = v22[28];
      uint64_t v62 = (int *)(v32 + v37);
      uint64_t v38 = v60;
      uint64_t v39 = v60 + v34;
      uint64_t v40 = (void *)(v60 + v36);
      uint64_t v41 = (uint64_t *)(v60 + v37);
      uint64_t v42 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 16))(v32, v38, v42);
      uint64_t v63 = &v55;
      *(unsigned char *)(v32 + v33) = *(unsigned char *)(v38 + v33);
      *(unsigned char *)uint64_t v35 = *(unsigned char *)v39;
      uint64_t v43 = *(void *)(v39 + 16);
      *(void *)(v35 + 8) = *(void *)(v39 + 8);
      *(void *)(v35 + 16) = v43;
      uint64_t v44 = v40[1];
      unint64_t v45 = v56;
      *uint64_t v56 = *v40;
      v45[1] = v44;
      *(void *)(v32 + v57) = *(void *)(v38 + v57);
      uint64_t v46 = *v41;
      unint64_t v47 = v41[1];
      uint64_t v48 = v64;
      unint64_t v49 = v62;
      *(void *)uint64_t v62 = *v41;
      *((void *)v49 + 1) = v47;
      __chkstk_darwin(v43);
      *(&v55 - 2) = (uint64_t)v61;
      *(&v55 - 1) = v32;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1000361E0(v46, v47);
      uint64_t v50 = v59;
      sub_100CF4B88(v59, (void (*)(char *))sub_100FB690C, (uint64_t)(&v55 - 4));
      sub_100FB893C((uint64_t)v50, type metadata accessor for SharedBeaconRecord);
      uint64_t v29 = v48;
      sub_10001DAB4(v32, &qword_10163B940);
    }
    uint64_t v51 = *(void *)(v29 + 16);
    if (v51)
    {
      uint64_t v52 = *(void *)(type metadata accessor for MemberPeerTrust() - 8);
      uint64_t v53 = (uint64_t *)(v29
                      + ((*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80)));
      uint64_t v54 = *(void *)(v52 + 72);
      swift_bridgeObjectRetain();
      do
      {
        sub_100EE2364(v53);
        uint64_t v53 = (uint64_t *)((char *)v53 + v54);
        --v51;
      }
      while (v51);
      swift_bridgeObjectRelease();
    }
  }
}

void sub_100FAE458(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v139 = a4;
  uint64_t v146 = a3;
  uint64_t v7 = type metadata accessor for BeaconNamingRecord();
  uint64_t v137 = *(void *)(v7 - 8);
  uint64_t v138 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (uint64_t *)((char *)&v115 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v145 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v128 = (char *)&v115 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v140 = sub_10000588C((uint64_t *)&unk_10166EAF0);
  uint64_t v12 = __chkstk_darwin(v140);
  uint64_t v130 = (char *)&v115 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v133 = (char *)&v115 - v14;
  uint64_t v15 = sub_10000588C((uint64_t *)&unk_101653D50);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  uint64_t v131 = (uint64_t)&v115 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v134 = (uint64_t)&v115 - v18;
  uint64_t v19 = sub_10000588C(&qword_101638CF0);
  uint64_t v20 = __chkstk_darwin(v19 - 8);
  uint64_t v127 = (uint64_t)&v115 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v135 = (uint64_t)&v115 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v143 = (uint64_t)&v115 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v129 = (char *)&v115 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v132 = (char *)&v115 - v29;
  __chkstk_darwin(v28);
  uint64_t v141 = (char *)&v115 - v30;
  uint64_t v31 = sub_10000588C(&qword_10163BA20);
  uint64_t v32 = __chkstk_darwin(v31);
  uint64_t v136 = (uint64_t)&v115 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  uint64_t v35 = (uint64_t *)((char *)&v115 - v34);
  uint64_t v144 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v36 = *(void *)(v144 - 8);
  __chkstk_darwin(v144);
  uint64_t v142 = (uint64_t *)((char *)&v115 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100EE6764(a1);
  if (!v4)
  {
    uint64_t v126 = *(int *)(v31 + 80);
    uint64_t v38 = *(uint64_t *)((char *)a1 + v126);
    sub_10012B8B4(v38);
    uint64_t v123 = v38;
    uint64_t v122 = v10;
    uint64_t v146 = a2;
    uint64_t v39 = (char *)*(int *)(v31 + 96);
    uint64_t v40 = *(void *)&v39[(void)a1];
    uint64_t v41 = *(void *)(v40 + 16);
    uint64_t v120 = v9;
    uint64_t v42 = (uint64_t)a1;
    uint64_t v125 = a1;
    uint64_t v124 = (int *)v31;
    uint64_t v121 = v39;
    if (v41)
    {
      uint64_t v43 = *(void *)(type metadata accessor for MemberPeerTrust() - 8);
      uint64_t v44 = (uint64_t *)(v40
                      + ((*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80)));
      uint64_t v45 = *(void *)(v43 + 72);
      swift_bridgeObjectRetain();
      do
      {
        sub_100EE5448(v44);
        uint64_t v44 = (uint64_t *)((char *)v44 + v45);
        --v41;
      }
      while (v41);
      uint64_t v46 = v40;
      swift_bridgeObjectRelease();
      unint64_t v47 = v124;
      uint64_t v118 = (char *)v124[24];
      uint64_t v42 = (uint64_t)v125;
    }
    else
    {
      unint64_t v47 = (int *)v31;
      uint64_t v118 = v39;
      uint64_t v46 = v40;
    }
    uint64_t v48 = v47[12];
    uint64_t v49 = (uint64_t)v35 + v48;
    uint64_t v50 = v47[16];
    uint64_t v51 = (char *)v35 + v50;
    uint64_t v52 = v47[20];
    uint64_t v53 = v42 + v48;
    uint64_t v54 = v42 + v50;
    sub_100FB6BB8(v42, (uint64_t)v35, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    uint64_t v116 = v53;
    sub_10001D074(v53, v49, (uint64_t *)&unk_101653D50);
    uint64_t v119 = v51;
    sub_10001D074(v54, (uint64_t)v51, &qword_10163B9E0);
    *(uint64_t *)((char *)v35 + v52) = v123;
    *(void *)&v118[(void)v35] = v46;
    uint64_t v55 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v36 + 48);
    uint64_t v56 = v144;
    unsigned int v57 = v55(v49, 1, v144);
    uint64_t v123 = v36 + 48;
    uint64_t v118 = (char *)v55;
    uint64_t v117 = v54;
    if (v57 == 1)
    {
      sub_10001DAB4((uint64_t)v119, &qword_10163B9E0);
      sub_10001DAB4(v49, (uint64_t *)&unk_101653D50);
      uint64_t v58 = (uint64_t (*)(void))type metadata accessor for MemberSharingCircle;
      uint64_t v59 = v35;
LABEL_20:
      sub_100FB893C((uint64_t)v59, v58);
      uint64_t v80 = (uint64_t)v125;
      uint64_t v81 = v124;
      goto LABEL_21;
    }
    uint64_t v60 = v49;
    uint64_t v61 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v55;
    uint64_t v62 = v142;
    sub_100FB6C70(v60, (uint64_t)v142, type metadata accessor for SharedBeaconRecord);
    sub_10001DAB4((uint64_t)v119, &qword_10163B9E0);
    sub_100FB893C((uint64_t)v35, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    uint64_t v63 = (char *)v62 + *(int *)(v56 + 20);
    uint64_t v64 = v145;
    uint64_t v65 = v141;
    uint64_t v66 = v122;
    uint64_t v115 = *(void (**)(char *, char *, uint64_t))(v145 + 16);
    v115(v141, v63, v122);
    uint64_t v119 = *(char **)(v64 + 56);
    ((void (*)(char *, void, uint64_t, uint64_t))v119)(v65, 0, 1, v66);
    uint64_t v67 = v134;
    sub_10001D074(v139, v134, (uint64_t *)&unk_101653D50);
    if (v61(v67, 1, v56) == 1)
    {
      sub_10001DAB4(v67, (uint64_t *)&unk_101653D50);
      uint64_t v68 = 1;
      uint64_t v69 = v66;
      uint64_t v71 = (uint64_t)v132;
      uint64_t v70 = (uint64_t)v133;
    }
    else
    {
      uint64_t v72 = v67 + *(int *)(v56 + 20);
      uint64_t v71 = (uint64_t)v132;
      v115(v132, (char *)v72, v66);
      sub_100FB893C(v67, type metadata accessor for SharedBeaconRecord);
      uint64_t v68 = 0;
      uint64_t v69 = v66;
      uint64_t v70 = (uint64_t)v133;
    }
    uint64_t v73 = (uint64_t)v141;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v119)(v71, v68, 1, v69);
    uint64_t v74 = v70 + *(int *)(v140 + 48);
    sub_10001D074(v73, v70, &qword_101638CF0);
    sub_10001D074(v71, v74, &qword_101638CF0);
    uint64_t v75 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v145 + 48);
    if (v75(v70, 1, v69) == 1)
    {
      sub_10001DAB4(v71, &qword_101638CF0);
      sub_10001DAB4(v73, &qword_101638CF0);
      if (v75(v74, 1, v69) == 1)
      {
        sub_10001DAB4(v70, &qword_101638CF0);
LABEL_19:
        uint64_t v58 = type metadata accessor for SharedBeaconRecord;
        uint64_t v59 = v142;
        goto LABEL_20;
      }
    }
    else
    {
      uint64_t v76 = (uint64_t)v129;
      sub_10001D074(v70, (uint64_t)v129, &qword_101638CF0);
      if (v75(v74, 1, v69) != 1)
      {
        uint64_t v77 = v145;
        uint64_t v78 = v128;
        (*(void (**)(char *, uint64_t, uint64_t))(v145 + 32))(v128, v74, v69);
        sub_100FB6F70((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
        LODWORD(v141) = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v79 = *(void (**)(char *, uint64_t))(v77 + 8);
        v79(v78, v69);
        sub_10001DAB4(v71, &qword_101638CF0);
        sub_10001DAB4(v73, &qword_101638CF0);
        v79(v129, v69);
        sub_10001DAB4(v70, &qword_101638CF0);
        if (v141) {
          goto LABEL_19;
        }
LABEL_25:
        uint64_t v102 = v142;
        sub_100EE6384(v142);
        sub_100FB893C((uint64_t)v102, type metadata accessor for SharedBeaconRecord);
        uint64_t v80 = (uint64_t)v125;
        uint64_t v81 = v124;
LABEL_21:
        uint64_t v82 = v136;
        uint64_t v83 = v136 + v81[12];
        uint64_t v84 = v136 + v81[16];
        uint64_t v85 = v81[20];
        uint64_t v86 = v81[24];
        sub_100FB6BB8(v80, v136, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
        sub_10001D074(v116, v83, (uint64_t *)&unk_101653D50);
        sub_10001D074(v117, v84, &qword_10163B9E0);
        *(void *)(v82 + v85) = *(void *)(v80 + v126);
        *(void *)(v82 + v86) = *(void *)&v121[v80];
        uint64_t v87 = v138;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v137 + 48))(v84, 1, v138) == 1)
        {
          sub_10001DAB4(v84, &qword_10163B9E0);
          sub_10001DAB4(v83, (uint64_t *)&unk_101653D50);
          uint64_t v88 = type metadata accessor for MemberSharingCircle;
          uint64_t v89 = v82;
LABEL_36:
          sub_100FB893C(v89, (uint64_t (*)(void))v88);
          return;
        }
        uint64_t v90 = (uint64_t)v120;
        sub_100FB6C70(v84, (uint64_t)v120, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
        sub_10001DAB4(v83, (uint64_t *)&unk_101653D50);
        sub_100FB893C(v82, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
        uint64_t v91 = v145;
        uint64_t v92 = *(void (**)(uint64_t, uint64_t, uint64_t))(v145 + 16);
        uint64_t v93 = v143;
        uint64_t v94 = v122;
        v92(v143, v90 + *(int *)(v87 + 24), v122);
        uint64_t v95 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v91 + 56);
        v95(v93, 0, 1, v94);
        uint64_t v96 = v131;
        sub_10001D074(v139, v131, (uint64_t *)&unk_101653D50);
        uint64_t v97 = v144;
        if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v118)(v96, 1, v144) == 1)
        {
          sub_10001DAB4(v96, (uint64_t *)&unk_101653D50);
          uint64_t v98 = 1;
          uint64_t v99 = (uint64_t)v130;
          uint64_t v100 = v143;
          uint64_t v101 = v135;
        }
        else
        {
          uint64_t v103 = v96 + *(int *)(v97 + 20);
          uint64_t v104 = v135;
          v92(v135, v103, v94);
          uint64_t v101 = v104;
          sub_100FB893C(v96, type metadata accessor for SharedBeaconRecord);
          uint64_t v98 = 0;
          uint64_t v99 = (uint64_t)v130;
          uint64_t v100 = v143;
        }
        v95(v101, v98, 1, v94);
        uint64_t v105 = v99 + *(int *)(v140 + 48);
        sub_10001D074(v100, v99, &qword_101638CF0);
        sub_10001D074(v101, v105, &qword_101638CF0);
        uint64_t v106 = v100;
        uint64_t v107 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v91 + 48);
        if (v107(v99, 1, v94) == 1)
        {
          sub_10001DAB4(v101, &qword_101638CF0);
          sub_10001DAB4(v106, &qword_101638CF0);
          int v108 = v107(v105, 1, v94);
          uint64_t v109 = v120;
          if (v108 == 1)
          {
            sub_10001DAB4(v99, &qword_101638CF0);
LABEL_35:
            uint64_t v88 = type metadata accessor for BeaconNamingRecord;
            uint64_t v89 = (uint64_t)v109;
            goto LABEL_36;
          }
        }
        else
        {
          uint64_t v110 = v127;
          sub_10001D074(v99, v127, &qword_101638CF0);
          int v111 = v107(v105, 1, v94);
          uint64_t v109 = v120;
          uint64_t v112 = v94;
          if (v111 != 1)
          {
            uint64_t v113 = v128;
            (*(void (**)(char *, uint64_t, uint64_t))(v91 + 32))(v128, v105, v112);
            sub_100FB6F70((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
            LODWORD(v144) = dispatch thunk of static Equatable.== infix(_:_:)();
            uint64_t v114 = *(void (**)(char *, uint64_t))(v91 + 8);
            v114(v113, v112);
            sub_10001DAB4(v135, &qword_101638CF0);
            sub_10001DAB4(v143, &qword_101638CF0);
            v114((char *)v110, v112);
            sub_10001DAB4(v99, &qword_101638CF0);
            if (v144) {
              goto LABEL_35;
            }
LABEL_34:
            sub_100EE5FE8(v109);
            goto LABEL_35;
          }
          sub_10001DAB4(v135, &qword_101638CF0);
          sub_10001DAB4(v143, &qword_101638CF0);
          (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v110, v94);
        }
        sub_10001DAB4(v99, (uint64_t *)&unk_10166EAF0);
        goto LABEL_34;
      }
      sub_10001DAB4(v71, &qword_101638CF0);
      sub_10001DAB4(v73, &qword_101638CF0);
      (*(void (**)(uint64_t, uint64_t))(v145 + 8))(v76, v69);
    }
    sub_10001DAB4(v70, (uint64_t *)&unk_10166EAF0);
    goto LABEL_25;
  }
}

uint64_t sub_100FAF3A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v33 = a1;
  uint64_t v6 = sub_10000588C(&qword_10163B940);
  uint64_t v7 = (int *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v10 = *(int *)(v34 + 28);
  char v11 = *(unsigned char *)(a2 + v10);
  uint64_t v13 = *(void *)(a2 + v10 + 8);
  uint64_t v12 = *(void *)(a2 + v10 + 16);
  uint64_t v14 = a1 + v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)uint64_t v14 = v11;
  *(void *)(v14 + 8) = v13;
  *(void *)(v14 + 16) = v12;
  uint64_t v15 = v7[14];
  uint64_t v16 = v7[18];
  uint64_t v17 = &v9[v16];
  uint64_t v18 = v7[22];
  uint64_t v19 = &v9[v18];
  uint64_t v20 = v7[26];
  uint64_t v32 = v7[30];
  uint64_t v21 = a3 + v16;
  uint64_t v22 = (void *)(a3 + v18);
  uint64_t v23 = type metadata accessor for UUID();
  uint64_t v24 = *(void *)(v23 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v24 + 16))(v9, a3, v23);
  char v25 = *(unsigned char *)(a3 + v15);
  v9[v15] = v25;
  uint64_t v26 = *(void *)(v21 + 8);
  uint64_t v27 = *(void *)(v21 + 16);
  char *v17 = *(unsigned char *)v21;
  *((void *)v17 + 1) = v26;
  *((void *)v17 + 2) = v27;
  uint64_t v28 = v22[1];
  *(void *)uint64_t v19 = *v22;
  *((void *)v19 + 1) = v28;
  *(void *)&v9[v20] = *(void *)(a3 + v20);
  uint64_t v29 = v33;
  *(_OWORD *)&v9[v32] = *(_OWORD *)(a3 + v32);
  *(unsigned char *)(v29 + *(int *)(v34 + 64)) = v25;
  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v9, v23);
}

BOOL sub_100FAF554(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + *(int *)(type metadata accessor for BeaconObservation() + 24)) > 0x2Au;
}

uint64_t sub_100FAF58C()
{
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 112);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 168);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 208);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 248);
  swift_unknownObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 304);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 344);
  swift_bridgeObjectRelease();
  swift_release();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_100FAF5FC()
{
  sub_100FAF58C();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for ShareCreateUseCase()
{
  return self;
}

uint64_t sub_100FAF64C(uint64_t a1, uint64_t *a2, char a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 64) = a4;
  *(void *)(v5 + 72) = a5;
  *(unsigned char *)(v5 + 136) = a3;
  *(void *)(v5 + 56) = a1;
  uint64_t v7 = type metadata accessor for UUID();
  *(void *)(v5 + 80) = v7;
  *(void *)(v5 + 88) = *(void *)(v7 - 8);
  uint64_t v8 = swift_task_alloc();
  uint64_t v9 = *a2;
  *(void *)(v5 + 96) = v8;
  *(void *)(v5 + 104) = v9;
  return _swift_task_switch(sub_100FAF71C, 0, 0);
}

uint64_t sub_100FAF71C()
{
  if (*(unsigned char *)(v0 + 136) == 2)
  {
    uint64_t v6 = *(void *)(*(void *)(v0 + 64) + 160);
    uint64_t v7 = (void *)swift_task_alloc();
    *(void *)(v0 + 128) = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_100FAFED0;
    uint64_t v8 = *(void *)(v0 + 104);
    uint64_t v9 = *(void *)(v0 + 56);
    return sub_100E9F6F0(v9, v8, v6);
  }
  else if (*(unsigned char *)(v0 + 136))
  {
    sub_100FB6E64();
    swift_allocError();
    swift_willThrow();
    swift_task_dealloc();
    uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
    return v10();
  }
  else
  {
    uint64_t v1 = *(void *)(*(void *)(v0 + 64) + 160);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 112) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100FAF8C4;
    uint64_t v3 = *(void *)(v0 + 104);
    uint64_t v4 = *(void *)(v0 + 56);
    return sub_100E9E5CC(v4, v3, v1);
  }
}

uint64_t sub_100FAF8C4()
{
  *(void *)(*(void *)v1 + 120) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100FAFA80;
  }
  else {
    uint64_t v2 = sub_100FAF9D8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100FAF9D8()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = type metadata accessor for OwnerPeerTrust();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 0, 1, v2);
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_100FAFA80()
{
  uint64_t v30 = v0;
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[12];
  uint64_t v2 = (void *)v0[13];
  uint64_t v3 = v0[10];
  uint64_t v4 = v0[11];
  uint64_t v5 = v0[9];
  uint64_t v6 = type metadata accessor for Logger();
  sub_100010324(v6, (uint64_t)qword_10170D788);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v5, v3);
  id v7 = v2;
  swift_errorRetain();
  id v8 = v7;
  swift_errorRetain();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.error.getter();
  BOOL v11 = os_log_type_enabled(v9, v10);
  uint64_t v12 = v0[12];
  uint64_t v13 = (void *)v0[13];
  uint64_t v15 = v0[10];
  uint64_t v14 = v0[11];
  if (v11)
  {
    uint64_t v28 = v0[12];
    uint64_t v16 = swift_slowAlloc();
    uint64_t v17 = (void *)swift_slowAlloc();
    uint64_t v29 = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 141559043;
    v0[2] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 12) = 2113;
    uint64_t v26 = v15;
    v0[3] = v13;
    os_log_type_t type = v10;
    id v18 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v17 = v13;

    *(_WORD *)(v16 + 22) = 2114;
    swift_errorRetain();
    uint64_t v19 = _swift_stdlib_bridgeErrorToNSError();
    v0[4] = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v17[1] = v19;
    swift_errorRelease();
    swift_errorRelease();
    *(_WORD *)(v16 + 32) = 2160;
    v0[5] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 42) = 2081;
    sub_100FB6F70((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[6] = sub_1008FA0F0(v20, v21, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v28, v26);
    _os_log_impl((void *)&_mh_execute_header, v9, type, "Cannot add family member to utfs circle %{private,mask.hash}@. error: %{public}@, BeaconIdentifier: %{private,mask.hash}s.", (uint8_t *)v16, 0x34u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();

    swift_errorRelease();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v15);
  }
  uint64_t v22 = v0[7];
  uint64_t v23 = type metadata accessor for OwnerPeerTrust();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v22, 1, 1, v23);
  swift_task_dealloc();
  uint64_t v24 = (uint64_t (*)(void))v0[1];
  return v24();
}

uint64_t sub_100FAFED0()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
  else
  {
    return _swift_task_switch(sub_100FB98A0, 0, 0);
  }
}

uint64_t sub_100FB001C(uint64_t a1, uint64_t a2)
{
  v2[2] = a1;
  v2[3] = a2;
  uint64_t v3 = type metadata accessor for UUID();
  v2[4] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[5] = v4;
  v2[6] = *(void *)(v4 + 64);
  v2[7] = swift_task_alloc();
  v2[8] = sub_10000588C((uint64_t *)&unk_1016607D0);
  v2[9] = swift_task_alloc();
  return _swift_task_switch(sub_100FB0118, 0, 0);
}

uint64_t sub_100FB0118()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 24) + 160);
  *(void *)(v0 + 80) = v1;
  uint64_t v2 = type metadata accessor for OwnerPeerTrust();
  *(void *)(v0 + 88) = v2;
  *(_DWORD *)(v0 + 128) = *(_DWORD *)(v2 + 20);
  return _swift_task_switch(sub_100FB0198, v1, 0);
}

uint64_t sub_100FB0198()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v5 = *(void *)(v0 + 16) + *(int *)(v0 + 128);
  *(void *)(v0 + 96) = *(void *)(v1 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v5, v3);
  unint64_t v6 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = swift_allocObject();
  *(void *)(v0 + 104) = v7;
  *(void *)(v7 + 16) = v1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v7 + v6, v2, v3);
  swift_retain();
  return _swift_task_switch(sub_100FB0294, 0, 0);
}

uint64_t sub_100FB0294()
{
  uint64_t v2 = v0[12];
  uint64_t v1 = v0[13];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[14] = v3;
  v3[2] = v2;
  v3[3] = sub_100FB6A88;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[15] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100FB0398;
  uint64_t v6 = v0[8];
  uint64_t v5 = v0[9];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1005545F4, v3, v6);
}

uint64_t sub_100FB0398()
{
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_100FB04CC, 0, 0);
}

uint64_t sub_100FB04CC()
{
  uint64_t v1 = v0[9];
  BOOL v2 = (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)(v0[11] - 8) + 48))(v1, 1) == 1;
  sub_10001DAB4(v1, (uint64_t *)&unk_1016607D0);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(BOOL))v0[1];
  return v3(v2);
}

uint64_t sub_100FB0598(uint64_t a1)
{
  v2[9] = a1;
  v2[10] = v1;
  v2[11] = type metadata accessor for OwnerSharingCircle();
  v2[12] = swift_task_alloc();
  v2[13] = swift_task_alloc();
  sub_10000588C(&qword_101639E88);
  v2[14] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for UUID();
  v2[15] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[16] = v4;
  v2[17] = *(void *)(v4 + 64);
  v2[18] = swift_task_alloc();
  v2[19] = sub_10000588C((uint64_t *)&unk_1016607D0);
  v2[20] = swift_task_alloc();
  v2[21] = sub_10000588C(&qword_10165F390);
  v2[22] = swift_task_alloc();
  v2[23] = swift_task_alloc();
  v2[24] = swift_task_alloc();
  v2[25] = swift_task_alloc();
  return _swift_task_switch(sub_100FB0760, v1, 0);
}

uint64_t sub_100FB0760()
{
  *(void *)(v0 + 16) = _swiftEmptyDictionarySingleton;
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v3 = *(void *)(*(void *)(v0 + 72) + *(int *)(*(void *)(v0 + 88) + 32));
  uint64_t v4 = *(void **)(v0 + 128);
  *(void *)(v0 + 208) = v3;
  char v5 = *(unsigned char *)(v3 + 32);
  *(unsigned char *)(v0 + 356) = v5;
  uint64_t v6 = -1;
  uint64_t v7 = -1 << v5;
  if (-(-1 << v5) < 64) {
    uint64_t v6 = ~(-1 << -(char)v7);
  }
  unint64_t v8 = v6 & *(void *)(v3 + 64);
  swift_bridgeObjectRetain();
  if (v8)
  {
    uint64_t v9 = 0;
    unint64_t v10 = __clz(__rbit64(v8));
    uint64_t v11 = (v8 - 1) & v8;
LABEL_5:
    *(void *)(v0 + 216) = v9;
    *(void *)(v0 + 224) = v11;
    uint64_t v13 = *(void *)(v0 + 192);
    uint64_t v12 = *(void *)(v0 + 200);
    uint64_t v14 = *(void *)(v0 + 120);
    uint64_t v15 = *(void *)(v3 + 48);
    uint64_t v16 = v4[9];
    *(void *)(v0 + 232) = v16;
    uint64_t v17 = v15 + v16 * v10;
    id v18 = (void (*)(uint64_t, uint64_t, uint64_t))v4[2];
    *(void *)(v0 + 240) = v18;
    *(void *)(v0 + 248) = (unint64_t)(v4 + 2) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v18(v12, v17, v14);
    char v19 = *(unsigned char *)(*(void *)(v3 + 56) + v10);
    *(unsigned char *)(v12 + *(int *)(v1 + 48)) = v19;
    uint64_t v20 = *(int *)(v1 + 48);
    *(_DWORD *)(v0 + 352) = v20;
    unint64_t v21 = (void (*)(uint64_t, uint64_t, uint64_t))v4[4];
    *(void *)(v0 + 256) = v21;
    *(void *)(v0 + 264) = (unint64_t)(v4 + 4) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v21(v13, v12, v14);
    *(unsigned char *)(v13 + v20) = v19;
    uint64_t v22 = *(void *)(v2 + 160);
    *(void *)(v0 + 272) = v22;
    uint64_t v23 = sub_100FB0DC0;
LABEL_6:
    return _swift_task_switch(v23, v22, 0);
  }
  unint64_t v24 = 63 - v7;
  if ((unint64_t)(63 - v7) > 0x7F)
  {
    unint64_t v25 = *(void *)(v3 + 72);
    if (v25)
    {
      uint64_t v9 = 1;
LABEL_12:
      unint64_t v26 = __clz(__rbit64(v25));
      uint64_t v11 = (v25 - 1) & v25;
      unint64_t v10 = v26 + (v9 << 6);
      goto LABEL_5;
    }
    if (v24 >= 0xC0)
    {
      unint64_t v25 = *(void *)(v3 + 80);
      if (v25)
      {
        uint64_t v9 = 2;
        goto LABEL_12;
      }
      if (v24 >= 0x100)
      {
        unint64_t v25 = *(void *)(v3 + 88);
        if (v25)
        {
          uint64_t v9 = 3;
          goto LABEL_12;
        }
        if (v24 >= 0x140)
        {
          unint64_t v25 = *(void *)(v3 + 96);
          if (v25)
          {
            uint64_t v9 = 4;
            goto LABEL_12;
          }
          uint64_t v27 = 0;
          uint64_t v28 = v24 >> 6;
          if (v28 <= 5) {
            uint64_t v28 = 5;
          }
          uint64_t v29 = v28 - 5;
          while (v29 != v27)
          {
            unint64_t v25 = *(void *)(v3 + 104 + 8 * v27++);
            if (v25)
            {
              uint64_t v9 = v27 + 4;
              goto LABEL_12;
            }
          }
        }
      }
    }
  }
  swift_release();
  uint64_t v30 = swift_bridgeObjectRetain();
  char v31 = sub_100DF62D4(v30, v3);
  swift_bridgeObjectRelease();
  if ((v31 & 1) == 0)
  {
    uint64_t v32 = *(void *)(v0 + 112);
    uint64_t v33 = *(void *)(v0 + 72);
    uint64_t v34 = swift_task_alloc();
    *(void *)(v34 + 16) = v33;
    *(void *)(v34 + 24) = v0 + 16;
    sub_100EE07C0((void (*)(uint64_t, _UNKNOWN **))sub_100CF75B4, v32);
    uint64_t v35 = *(void *)(v0 + 80);
    swift_task_dealloc();
    uint64_t v22 = *(void *)(v35 + 160);
    *(void *)(v0 + 312) = v22;
    uint64_t v23 = sub_100FB1954;
    goto LABEL_6;
  }
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v36 = *(uint64_t (**)(void))(v0 + 8);
  return v36();
}

uint64_t sub_100FB0DC0()
{
  uint64_t v1 = v0[34];
  uint64_t v2 = (void (*)(unint64_t, uint64_t, uint64_t))v0[32];
  uint64_t v3 = (void (*)(uint64_t, uint64_t, uint64_t))v0[30];
  uint64_t v4 = v0[24];
  uint64_t v5 = v0[18];
  uint64_t v6 = v0[15];
  uint64_t v7 = v0[16];
  v0[35] = *(void *)(v1 + 136);
  v3(v5, v4, v6);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = swift_allocObject();
  v0[36] = v9;
  *(void *)(v9 + 16) = v1;
  v2(v9 + v8, v5, v6);
  swift_retain();
  return _swift_task_switch(sub_100FB0EA8, 0, 0);
}

uint64_t sub_100FB0EA8()
{
  uint64_t v2 = v0[35];
  uint64_t v1 = v0[36];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[37] = v3;
  v3[2] = v2;
  v3[3] = sub_100FB6A88;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[38] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100FB0FAC;
  uint64_t v6 = v0[19];
  uint64_t v5 = v0[20];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1005545F4, v3, v6);
}

uint64_t sub_100FB0FAC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 80);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_100FB10FC, v1, 0);
}

uint64_t sub_100FB10FC()
{
  uint64_t v89 = v0;
  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v2 = type metadata accessor for OwnerPeerTrust();
  int v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2);
  sub_10001DAB4(v1, (uint64_t *)&unk_1016607D0);
  if (v3 == 1)
  {
    uint64_t v4 = sub_10001DAB4(*(void *)(v0 + 192), &qword_10165F390);
    int64_t v7 = *(void *)(v0 + 216);
    unint64_t v8 = *(void *)(v0 + 224);
    if (v8)
    {
LABEL_3:
      unint64_t v9 = __clz(__rbit64(v8));
      uint64_t v10 = (v8 - 1) & v8;
      unint64_t v11 = v9 | (v7 << 6);
      uint64_t v12 = *(void *)(v0 + 208);
LABEL_4:
      *(void *)(v0 + 216) = v7;
      *(void *)(v0 + 224) = v10;
      uint64_t v14 = *(void *)(v0 + 192);
      uint64_t v13 = *(void *)(v0 + 200);
      uint64_t v15 = *(void *)(v0 + 168);
      uint64_t v16 = *(void *)(v0 + 120);
      uint64_t v17 = *(void **)(v0 + 128);
      uint64_t v18 = *(void *)(v0 + 80);
      uint64_t v19 = *(void *)(v12 + 48);
      uint64_t v20 = v17[9];
      *(void *)(v0 + 232) = v20;
      uint64_t v21 = v19 + v20 * v11;
      uint64_t v22 = (void (*)(uint64_t, uint64_t, uint64_t))v17[2];
      *(void *)(v0 + 240) = v22;
      *(void *)(v0 + 248) = (unint64_t)(v17 + 2) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
      v22(v13, v21, v16);
      char v23 = *(unsigned char *)(*(void *)(v12 + 56) + v11);
      *(unsigned char *)(v13 + *(int *)(v15 + 48)) = v23;
      uint64_t v24 = *(int *)(v15 + 48);
      *(_DWORD *)(v0 + 352) = v24;
      unint64_t v25 = (void (*)(uint64_t, uint64_t, uint64_t))v17[4];
      *(void *)(v0 + 256) = v25;
      *(void *)(v0 + 264) = (unint64_t)(v17 + 4) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
      v25(v14, v13, v16);
      *(unsigned char *)(v14 + v24) = v23;
      uint64_t v5 = *(void *)(v18 + 160);
      *(void *)(v0 + 272) = v5;
      unint64_t v26 = sub_100FB0DC0;
      goto LABEL_5;
    }
LABEL_22:
    int64_t v64 = v7 + 1;
    if (!__OFADD__(v7, 1))
    {
      int64_t v65 = (unint64_t)((1 << *(unsigned char *)(v0 + 356)) + 63) >> 6;
      uint64_t v12 = *(void *)(v0 + 208);
      if (v64 < v65)
      {
        uint64_t v66 = v12 + 64;
        unint64_t v67 = *(void *)(v12 + 64 + 8 * v64);
        ++v7;
        if (v67)
        {
LABEL_25:
          uint64_t v10 = (v67 - 1) & v67;
          unint64_t v11 = __clz(__rbit64(v67)) + (v7 << 6);
          goto LABEL_4;
        }
        int64_t v7 = v64 + 1;
        if (v64 + 1 < v65)
        {
          unint64_t v67 = *(void *)(v66 + 8 * v7);
          if (v67) {
            goto LABEL_25;
          }
          int64_t v7 = v64 + 2;
          if (v64 + 2 < v65)
          {
            unint64_t v67 = *(void *)(v66 + 8 * v7);
            if (v67) {
              goto LABEL_25;
            }
            int64_t v68 = v64 + 3;
            if (v68 < v65)
            {
              unint64_t v67 = *(void *)(v66 + 8 * v68);
              if (!v67)
              {
                while (1)
                {
                  int64_t v7 = v68 + 1;
                  if (__OFADD__(v68, 1)) {
                    break;
                  }
                  if (v7 >= v65) {
                    goto LABEL_36;
                  }
                  unint64_t v67 = *(void *)(v66 + 8 * v7);
                  ++v68;
                  if (v67) {
                    goto LABEL_25;
                  }
                }
                __break(1u);
                return _swift_task_switch(v4, v5, v6);
              }
              int64_t v7 = v68;
              goto LABEL_25;
            }
          }
        }
      }
LABEL_36:
      swift_release();
      uint64_t v69 = swift_bridgeObjectRetain();
      char v70 = sub_100DF62D4(v69, v12);
      swift_bridgeObjectRelease();
      if ((v70 & 1) == 0)
      {
        uint64_t v71 = *(void *)(v0 + 112);
        uint64_t v72 = *(void *)(v0 + 72);
        uint64_t v73 = swift_task_alloc();
        *(void *)(v73 + 16) = v72;
        *(void *)(v73 + 24) = v0 + 16;
        sub_100EE07C0((void (*)(uint64_t, _UNKNOWN **))sub_100CF75B4, v71);
        uint64_t v84 = *(void *)(v0 + 80);
        swift_task_dealloc();
        uint64_t v5 = *(void *)(v84 + 160);
        *(void *)(v0 + 312) = v5;
        unint64_t v26 = sub_100FB1954;
LABEL_5:
        uint64_t v4 = (uint64_t)v26;
        uint64_t v6 = 0;
        return _swift_task_switch(v4, v5, v6);
      }
      goto LABEL_41;
    }
    goto LABEL_45;
  }
  uint64_t v27 = *(int *)(v0 + 352);
  uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 240);
  uint64_t v29 = *(void *)(v0 + 184);
  uint64_t v30 = *(void *)(v0 + 192);
  uint64_t v32 = *(void *)(v0 + 168);
  uint64_t v31 = *(void *)(v0 + 176);
  uint64_t v33 = *(void *)(v0 + 120);
  uint64_t v34 = *(int *)(v32 + 48);
  v28(v29, v30, v33);
  char v35 = *(unsigned char *)(v30 + v27);
  *(unsigned char *)(v29 + v34) = v35;
  char v36 = v35;
  uint64_t v37 = *(int *)(v32 + 48);
  v28(v31, v30, v33);
  *(unsigned char *)(v31 + v37) = v36;
  uint64_t v38 = *(void *)(v0 + 16);
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v0 + 24) = v38;
  unint64_t v41 = sub_1007240CC(v29);
  uint64_t v42 = *(void *)(v38 + 16);
  BOOL v43 = (v40 & 1) == 0;
  uint64_t v44 = v42 + v43;
  if (__OFADD__(v42, v43))
  {
    __break(1u);
LABEL_45:
    __break(1u);
LABEL_46:
    __break(1u);
    swift_once();
    uint64_t v74 = *(void *)(v0 + 96);
    uint64_t v75 = *(void *)(v0 + 72);
    uint64_t v76 = type metadata accessor for Logger();
    sub_100010324(v76, (uint64_t)qword_10170D788);
    sub_100FB6BB8(v75, v74, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v77 = Logger.logObject.getter();
    os_log_type_t v78 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v77, v78))
    {
      uint64_t v79 = *(void *)(v0 + 96);
      uint64_t v80 = swift_slowAlloc();
      uint64_t v87 = (void *)swift_slowAlloc();
      uint64_t v88 = swift_slowAlloc();
      *(_DWORD *)uint64_t v80 = 141558531;
      *(void *)(v0 + 32) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v80 + 12) = 2081;
      sub_100FB6F70((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v81 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 40) = sub_1008FA0F0(v81, v82, &v88);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100FB893C(v79, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      *(_WORD *)(v80 + 22) = 2114;
      swift_errorRetain();
      uint64_t v83 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 48) = v83;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v87 = v83;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v77, v78, "Detected stale member list on circle %{private,mask.hash}s but failed to recover %{public}@.", (uint8_t *)v80, 0x20u);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      uint64_t v85 = *(void *)(v0 + 96);
      swift_errorRelease();
      sub_100FB893C(v85, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      swift_errorRelease();
      swift_errorRelease();
    }
LABEL_41:
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v86 = *(uint64_t (**)(void))(v0 + 8);
    return v86();
  }
  char v45 = v40;
  if (*(void *)(v38 + 24) >= v44)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      sub_100E7F8E0();
    }
    goto LABEL_17;
  }
  uint64_t v46 = *(void *)(v0 + 184);
  sub_100E67CB8(v44, isUniquelyReferenced_nonNull_native);
  unint64_t v47 = sub_1007240CC(v46);
  if ((v45 & 1) == (v48 & 1))
  {
    unint64_t v41 = v47;
LABEL_17:
    uint64_t v50 = *(void **)(v0 + 24);
    if (v45)
    {
      *(unsigned char *)(v50[7] + v41) = v36;
    }
    else
    {
      uint64_t v51 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 240);
      uint64_t v52 = *(void *)(v0 + 232);
      uint64_t v53 = *(void *)(v0 + 184);
      uint64_t v54 = *(void *)(v0 + 120);
      v50[(v41 >> 6) + 8] |= 1 << v41;
      v51(v50[6] + v52 * v41, v53, v54);
      *(unsigned char *)(v50[7] + v41) = v36;
      uint64_t v55 = v50[2];
      BOOL v56 = __OFADD__(v55, 1);
      uint64_t v57 = v55 + 1;
      if (v56) {
        goto LABEL_46;
      }
      v50[2] = v57;
    }
    uint64_t v58 = *(void *)(v0 + 184);
    uint64_t v59 = *(void *)(v0 + 192);
    uint64_t v60 = *(void *)(v0 + 176);
    uint64_t v61 = *(void *)(v0 + 120);
    uint64_t v62 = *(void *)(v0 + 128);
    *(void *)(v0 + 16) = v50;
    swift_bridgeObjectRelease();
    uint64_t v63 = *(void (**)(uint64_t, uint64_t))(v62 + 8);
    v63(v58, v61);
    sub_10001DAB4(v59, &qword_10165F390);
    uint64_t v4 = ((uint64_t (*)(uint64_t, uint64_t))v63)(v60, v61);
    int64_t v7 = *(void *)(v0 + 216);
    unint64_t v8 = *(void *)(v0 + 224);
    if (v8) {
      goto LABEL_3;
    }
    goto LABEL_22;
  }
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

uint64_t sub_100FB1954()
{
  *(void *)(v0 + 320) = *(void *)(*(void *)(v0 + 312) + 128);
  return _swift_task_switch(sub_100FB197C, 0, 0);
}

uint64_t sub_100FB197C()
{
  uint64_t v1 = v0[40];
  uint64_t v2 = v0[14];
  uint64_t v3 = swift_task_alloc();
  v0[41] = v3;
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[42] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100FB1A74;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v4, 0, 0, 0xD000000000000011, 0x80000001013F27F0, sub_1000757B8, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_100FB1A74()
{
  *(void *)(*(void *)v1 + 344) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100FB1B90;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_100FB1FCC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100FB1B90()
{
  uint64_t v1 = *(void *)(v0 + 80);
  swift_task_dealloc();
  return _swift_task_switch(sub_100FB1BFC, v1, 0);
}

uint64_t sub_100FB1BFC()
{
  uint64_t v16 = v0;
  sub_10001DAB4(v0[14], &qword_101639E88);
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[12];
  uint64_t v2 = v0[9];
  uint64_t v3 = type metadata accessor for Logger();
  sub_100010324(v3, (uint64_t)qword_10170D788);
  sub_100FB6BB8(v2, v1, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = v0[12];
    uint64_t v7 = swift_slowAlloc();
    uint64_t v14 = (void *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 141558531;
    v0[4] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v7 + 12) = 2081;
    sub_100FB6F70((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v8 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[5] = sub_1008FA0F0(v8, v9, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100FB893C(v6, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    *(_WORD *)(v7 + 22) = 2114;
    swift_errorRetain();
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError();
    v0[6] = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v14 = v10;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Detected stale member list on circle %{private,mask.hash}s but failed to recover %{public}@.", (uint8_t *)v7, 0x20u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    uint64_t v11 = v0[12];
    swift_errorRelease();
    sub_100FB893C(v11, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_100FB1FCC()
{
  return _swift_task_switch(sub_100FB1FE8, *(void *)(v0 + 80), 0);
}

uint64_t sub_100FB1FE8()
{
  uint64_t v17 = v0;
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[13];
  uint64_t v3 = type metadata accessor for Logger();
  sub_100010324(v3, (uint64_t)qword_10170D788);
  sub_100FB6BB8(v1, v2, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = v0[13];
    uint64_t v15 = v0[14];
    uint64_t v7 = swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 141558275;
    v0[7] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v7 + 12) = 2081;
    sub_100FB6F70((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v8 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[8] = sub_1008FA0F0(v8, v9, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100FB893C(v6, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Detected stale member list on circle %{private,mask.hash}s and corrected it.", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v10 = v15;
  }
  else
  {
    uint64_t v12 = v0[13];
    uint64_t v11 = v0[14];

    sub_100FB893C(v12, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v10 = v11;
  }
  sub_10001DAB4(v10, &qword_101639E88);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t sub_100FB2308(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return _swift_task_switch(sub_100FB232C, a3, 0);
}

uint64_t sub_100FB232C()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = v1 + *(int *)(type metadata accessor for OwnerSharingCircle() + 20);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_100070BEC;
  return sub_100E5CB14(v2);
}

void sub_100FB23D4(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v10 = a3[2];
  uint64_t v11 = *(void *)(v10 + 16);
  if (v11)
  {
    uint64_t v12 = *(void *)(type metadata accessor for OwnerSharingCircle() - 8);
    uint64_t v13 = (uint64_t *)(v10 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80)));
    uint64_t v14 = *(void *)(v12 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_100EE5C08(v13);
      if (v5) {
        goto LABEL_33;
      }
      uint64_t v13 = (uint64_t *)((char *)v13 + v14);
      if (!--v11)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  uint64_t v15 = *a3;
  uint64_t v16 = *(void *)(*a3 + 16);
  if (v16)
  {
    uint64_t v17 = *(void *)(type metadata accessor for SharingCircleSecret() - 8);
    uint64_t v18 = (uint64_t *)(v15 + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80)));
    uint64_t v19 = *(void *)(v17 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_100EE5828(v18);
      if (v5) {
        goto LABEL_33;
      }
      uint64_t v18 = (uint64_t *)((char *)v18 + v19);
      if (!--v16)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  uint64_t v20 = a3[4];
  uint64_t v21 = *(void *)(v20 + 16);
  if (v21)
  {
    uint64_t v22 = *(void *)(type metadata accessor for OwnerPeerTrust() - 8);
    char v23 = (uint64_t *)(v20 + ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80)));
    uint64_t v24 = *(void *)(v22 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_100EE22E0(v23);
      if (v5) {
        goto LABEL_33;
      }
      char v23 = (uint64_t *)((char *)v23 + v24);
      if (!--v21)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  uint64_t v25 = a3[3];
  uint64_t v26 = *(void *)(v25 + 16);
  if (v26)
  {
    uint64_t v27 = *(void *)(type metadata accessor for OwnerSharingCircle() - 8);
    uint64_t v28 = (uint64_t *)(v25 + ((*(unsigned __int8 *)(v27 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80)));
    uint64_t v29 = *(void *)(v27 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_100EE1FB0(v28);
      if (v5) {
        goto LABEL_33;
      }
      uint64_t v28 = (uint64_t *)((char *)v28 + v29);
      if (!--v26)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  uint64_t v30 = a3[1];
  uint64_t v31 = *(void *)(v30 + 16);
  if (v31)
  {
    uint64_t v32 = *(void *)(type metadata accessor for SharingCircleSecret() - 8);
    uint64_t v33 = (uint64_t *)(v30 + ((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80)));
    uint64_t v34 = *(void *)(v32 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_100EE1F84(v33);
      if (v5) {
        break;
      }
      uint64_t v33 = (uint64_t *)((char *)v33 + v34);
      if (!--v31)
      {
        swift_bridgeObjectRelease();
        goto LABEL_26;
      }
    }
LABEL_33:
    swift_bridgeObjectRelease();
    return;
  }
LABEL_26:
  uint64_t v35 = *(void *)(a4 + 16);
  if (!v35)
  {
LABEL_31:
    uint64_t v39 = *(void *)(a5 + 16);
    if (!v39) {
      return;
    }
    goto LABEL_36;
  }
  uint64_t v36 = *(void *)(type metadata accessor for MemberPeerTrust() - 8);
  uint64_t v37 = (uint64_t *)(a4 + ((*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80)));
  uint64_t v38 = *(void *)(v36 + 72);
  swift_bridgeObjectRetain();
  while (1)
  {
    sub_100EE5448(v37);
    if (v5) {
      break;
    }
    uint64_t v37 = (uint64_t *)((char *)v37 + v38);
    if (!--v35)
    {
      swift_bridgeObjectRelease();
      goto LABEL_31;
    }
  }
  swift_bridgeObjectRelease();
  swift_errorRelease();
  uint64_t v6 = 0;
  uint64_t v39 = *(void *)(a5 + 16);
  if (v39)
  {
LABEL_36:
    uint64_t v40 = *(void *)(type metadata accessor for OwnerPeerTrust() - 8);
    unint64_t v41 = (uint64_t *)(a5 + ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80)));
    uint64_t v42 = *(void *)(v40 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_100EE5068(v41);
      if (v6) {
        break;
      }
      unint64_t v41 = (uint64_t *)((char *)v41 + v42);
      if (!--v39) {
        goto LABEL_33;
      }
    }
    swift_bridgeObjectRelease();
    swift_errorRelease();
  }
}

uint64_t sub_100FB286C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return _swift_task_switch(sub_100FB2890, a3, 0);
}

uint64_t sub_100FB2890()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = v1 + *(int *)(type metadata accessor for OwnerSharingCircle() + 20);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_100072D08;
  return sub_100E5CB14(v2);
}

void sub_100FB2938(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = *(void *)(a3 + 16);
  if (v11)
  {
    uint64_t v13 = *(void *)(type metadata accessor for OwnerSharingCircle() - 8);
    uint64_t v14 = (uint64_t *)(a3 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80)));
    uint64_t v15 = *(void *)(v13 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_100EE1FB0(v14);
      if (v7) {
        break;
      }
      uint64_t v14 = (uint64_t *)((char *)v14 + v15);
      if (!--v11)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
  }
  else
  {
LABEL_6:
    uint64_t v16 = *(void *)(a4 + 16);
    if (v16)
    {
      uint64_t v17 = *(void *)(type metadata accessor for SharingCircleSecret() - 8);
      uint64_t v18 = (uint64_t *)(a4
                      + ((*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80)));
      uint64_t v19 = *(void *)(v17 + 72);
      swift_bridgeObjectRetain();
      while (1)
      {
        sub_100EE1F84(v18);
        if (v7) {
          break;
        }
        uint64_t v18 = (uint64_t *)((char *)v18 + v19);
        if (!--v16)
        {
          swift_bridgeObjectRelease();
          goto LABEL_11;
        }
      }
    }
    else
    {
LABEL_11:
      uint64_t v20 = *(void *)(a5 + 16);
      if (v20)
      {
        uint64_t v21 = *(void *)(type metadata accessor for OwnerPeerTrust() - 8);
        uint64_t v22 = (uint64_t *)(a5
                        + ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80)));
        uint64_t v23 = *(void *)(v21 + 72);
        swift_bridgeObjectRetain();
        while (1)
        {
          sub_100EE5068(v22);
          if (v7) {
            break;
          }
          uint64_t v22 = (uint64_t *)((char *)v22 + v23);
          if (!--v20)
          {
            swift_bridgeObjectRelease();
            goto LABEL_16;
          }
        }
      }
      else
      {
LABEL_16:
        uint64_t v24 = *(void *)(a6 + 16);
        if (v24)
        {
          uint64_t v25 = *(void *)(type metadata accessor for OwnerSharingCircle() - 8);
          uint64_t v26 = (uint64_t *)(a6
                          + ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80)));
          uint64_t v27 = *(void *)(v25 + 72);
          swift_bridgeObjectRetain();
          while (1)
          {
            sub_100EE5C08(v26);
            if (v7) {
              break;
            }
            uint64_t v26 = (uint64_t *)((char *)v26 + v27);
            if (!--v24)
            {
              swift_bridgeObjectRelease();
              goto LABEL_21;
            }
          }
        }
        else
        {
LABEL_21:
          uint64_t v28 = *(void *)(a7 + 16);
          if (!v28) {
            return;
          }
          uint64_t v29 = *(void *)(type metadata accessor for SharingCircleSecret() - 8);
          uint64_t v30 = (uint64_t *)(a7
                          + ((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80)));
          uint64_t v31 = *(void *)(v29 + 72);
          swift_bridgeObjectRetain();
          do
          {
            sub_100EE5828(v30);
            if (v7) {
              break;
            }
            uint64_t v30 = (uint64_t *)((char *)v30 + v31);
            --v28;
          }
          while (v28);
        }
      }
    }
  }
  swift_bridgeObjectRelease();
}

uint64_t sub_100FB2C80()
{
  uint64_t v1 = (int *)(type metadata accessor for MemberSharingCircle() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_release();
  uint64_t v6 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v7 = v0 + v3 + v1[7];
  uint64_t v8 = type metadata accessor for UUID();
  unint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
  v9(v7, v8);
  v9(v6 + v1[8], v8);
  v9(v6 + v1[9], v8);
  v9(v6 + v1[10], v8);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_100FB2DE4()
{
  return sub_100FB70D0((uint64_t (*)(void))type metadata accessor for MemberSharingCircle, (uint64_t (*)(uint64_t, uint64_t))sub_100E5E1C0);
}

uint64_t sub_100FB2E10(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100FB98B8;
  return sub_100FAD9A0(a1, v1);
}

uint64_t sub_100FB2EA8(uint64_t a1, char a2)
{
  *(unsigned char *)(v2 + 376) = a2;
  *(void *)(v2 + 280) = a1;
  uint64_t v3 = type metadata accessor for UUID();
  *(void *)(v2 + 288) = v3;
  *(void *)(v2 + 296) = *(void *)(v3 - 8);
  *(void *)(v2 + 304) = swift_task_alloc();
  *(void *)(v2 + 312) = swift_task_alloc();
  return _swift_task_switch(sub_100FB2F7C, 0, 0);
}

uint64_t sub_100FB2F7C()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + 376);
  if (v1 < 2)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
    return v2();
  }
  if (v1 != 2)
  {
    if (qword_1016375E8 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 96, (uint64_t *)&unk_101638D30);
    if (*(void *)(v0 + 120))
    {
      sub_10001CEB0((long long *)(v0 + 96), v0 + 16);
      sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
      uint64_t v6 = (uint64_t (*)(void))((char *)&dword_1016392E8 + dword_1016392E8);
      uint64_t v4 = (void *)swift_task_alloc();
      *(void *)(v0 + 352) = v4;
      *uint64_t v4 = v0;
      uint64_t v5 = sub_100FB3ED8;
      goto LABEL_14;
    }
LABEL_18:
    __break(1u);
    return result;
  }
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (!*(void *)(v0 + 80))
  {
    __break(1u);
    goto LABEL_18;
  }
  sub_10001CEB0((long long *)(v0 + 56), v0 + 136);
  sub_10001CD44((void *)(v0 + 136), *(void *)(v0 + 160));
  uint64_t v6 = (uint64_t (*)(void))((char *)&dword_1016392E8 + dword_1016392E8);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 320) = v4;
  *uint64_t v4 = v0;
  uint64_t v5 = sub_100FB31F4;
LABEL_14:
  v4[1] = v5;
  return v6();
}

uint64_t sub_100FB31F4(uint64_t a1)
{
  *(void *)(*(void *)v1 + 328) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100FB32F4, 0, 0);
}

uint64_t sub_100FB32F4()
{
  uint64_t v20 = v0;
  uint64_t v1 = v0[41];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 17));
  if (v1)
  {
    uint64_t v2 = v0[41];
    swift_retain();
    return _swift_task_switch(sub_100FB35FC, v2, 0);
  }
  else
  {
    if (qword_101636888 != -1) {
      swift_once();
    }
    uint64_t v4 = v0[37];
    uint64_t v3 = v0[38];
    uint64_t v6 = v0[35];
    uint64_t v5 = v0[36];
    uint64_t v7 = type metadata accessor for Logger();
    sub_100010324(v7, (uint64_t)qword_10170D788);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v6, v5);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    BOOL v10 = os_log_type_enabled(v8, v9);
    uint64_t v12 = v0[37];
    uint64_t v11 = v0[38];
    uint64_t v13 = v0[36];
    if (v10)
    {
      uint64_t v14 = swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 141558275;
      v0[31] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v14 + 12) = 2081;
      sub_100FB6F70((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[30] = sub_1008FA0F0(v15, v16, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Done publishing initial location for beacon %{private,mask.hash}s.", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_release();
    }
    else
    {
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v17 = (uint64_t (*)(void))v0[1];
    return v17();
  }
}

uint64_t sub_100FB35FC()
{
  uint64_t v1 = v0[41];
  v0[28] = 0xD000000000000013;
  v0[29] = 0x80000001013F80A0;
  uint64_t v4 = (char *)&async function pointer to dispatch thunk of AsyncKeyedThrottle.throttle(key:block:skipBlock:)
     + async function pointer to dispatch thunk of AsyncKeyedThrottle.throttle(key:block:skipBlock:);
  swift_retain();
  uint64_t v2 = (void *)swift_task_alloc();
  v0[42] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100FB3714;
  return ((uint64_t (*)(void *, void *, uint64_t, void (*)(), void))v4)(v0 + 28, &unk_101665AD8, v1, sub_100871C18, 0);
}

uint64_t sub_100FB3714()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 344) = v0;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 328);
    uint64_t v4 = sub_100FB3B30;
  }
  else
  {
    swift_release();
    uint64_t v4 = sub_100FB3890;
    uint64_t v3 = 0;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100FB3890()
{
  uint64_t v18 = v0;
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[37];
  uint64_t v1 = v0[38];
  uint64_t v4 = v0[35];
  uint64_t v3 = v0[36];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170D788);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = v0[37];
  uint64_t v9 = v0[38];
  uint64_t v11 = v0[36];
  if (v8)
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 141558275;
    v0[31] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2081;
    sub_100FB6F70((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[30] = sub_1008FA0F0(v13, v14, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Done publishing initial location for beacon %{private,mask.hash}s.", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_release();
  }
  else
  {
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v15 = (uint64_t (*)(void))v0[1];
  return v15();
}

uint64_t sub_100FB3B30()
{
  return _swift_task_switch(sub_100FB3B4C, 0, 0);
}

uint64_t sub_100FB3B4C()
{
  uint64_t v21 = v0;
  swift_release();
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[39];
  uint64_t v2 = v0[36];
  uint64_t v3 = v0[37];
  uint64_t v4 = v0[35];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170D788);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v4, v2);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = v0[39];
  uint64_t v11 = v0[36];
  uint64_t v10 = v0[37];
  if (v8)
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v19 = (void *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 141558531;
    v0[32] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2081;
    sub_100FB6F70((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    log = v6;
    v0[33] = sub_1008FA0F0(v13, v14, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    *(_WORD *)(v12 + 22) = 2114;
    swift_errorRetain();
    uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
    v0[34] = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v19 = v15;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, v7, "Failure on initial location publish for beacon %{private,mask.hash}s, error: %{public}@", (uint8_t *)v12, 0x20u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    swift_release();
  }
  else
  {
    swift_release();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

uint64_t sub_100FB3ED8(uint64_t a1)
{
  *(void *)(*(void *)v1 + 360) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100FB3FD8, 0, 0);
}

uint64_t sub_100FB3FD8()
{
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (v0[45])
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v2 = (void *)swift_task_alloc();
    v0[46] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100FB4180;
    uint64_t v3 = v0[35];
    return sub_1008766F8(v3);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_101636B18 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100010324(v5, (uint64_t)qword_10170DED0);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      BOOL v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)BOOL v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Missing DelegatedBeaconPayloadPublisher!", v8, 2u);
      swift_slowDealloc();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
}

uint64_t sub_100FB4180()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100FB427C, 0, 0);
}

uint64_t sub_100FB427C()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100FB42EC(uint64_t a1, char a2)
{
  *(unsigned char *)(v2 + 376) = a2;
  *(void *)(v2 + 280) = a1;
  uint64_t v3 = type metadata accessor for UUID();
  *(void *)(v2 + 288) = v3;
  *(void *)(v2 + 296) = *(void *)(v3 - 8);
  *(void *)(v2 + 304) = swift_task_alloc();
  *(void *)(v2 + 312) = swift_task_alloc();
  return _swift_task_switch(sub_100FB43C0, 0, 0);
}

uint64_t sub_100FB43C0()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + 376);
  if (v1 < 2)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
    return v2();
  }
  if (v1 != 2)
  {
    if (qword_1016375E8 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 96, (uint64_t *)&unk_101638D30);
    if (*(void *)(v0 + 120))
    {
      sub_10001CEB0((long long *)(v0 + 96), v0 + 16);
      sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
      uint64_t v6 = (uint64_t (*)(void))((char *)&dword_1016392E8 + dword_1016392E8);
      uint64_t v4 = (void *)swift_task_alloc();
      *(void *)(v0 + 352) = v4;
      *uint64_t v4 = v0;
      uint64_t v5 = sub_100FB4CF0;
      goto LABEL_14;
    }
LABEL_18:
    __break(1u);
    return result;
  }
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (!*(void *)(v0 + 80))
  {
    __break(1u);
    goto LABEL_18;
  }
  sub_10001CEB0((long long *)(v0 + 56), v0 + 136);
  sub_10001CD44((void *)(v0 + 136), *(void *)(v0 + 160));
  uint64_t v6 = (uint64_t (*)(void))((char *)&dword_1016392E8 + dword_1016392E8);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 320) = v4;
  *uint64_t v4 = v0;
  uint64_t v5 = sub_100FB4638;
LABEL_14:
  v4[1] = v5;
  return v6();
}

uint64_t sub_100FB4638(uint64_t a1)
{
  *(void *)(*(void *)v1 + 328) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100FB4738, 0, 0);
}

uint64_t sub_100FB4738()
{
  uint64_t v20 = v0;
  uint64_t v1 = v0[41];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 17));
  if (v1)
  {
    uint64_t v2 = v0[41];
    swift_retain();
    return _swift_task_switch(sub_100FB4A40, v2, 0);
  }
  else
  {
    if (qword_101636888 != -1) {
      swift_once();
    }
    uint64_t v4 = v0[37];
    uint64_t v3 = v0[38];
    uint64_t v6 = v0[35];
    uint64_t v5 = v0[36];
    uint64_t v7 = type metadata accessor for Logger();
    sub_100010324(v7, (uint64_t)qword_10170D788);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v6, v5);
    BOOL v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    BOOL v10 = os_log_type_enabled(v8, v9);
    uint64_t v12 = v0[37];
    uint64_t v11 = v0[38];
    uint64_t v13 = v0[36];
    if (v10)
    {
      uint64_t v14 = swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 141558275;
      v0[31] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v14 + 12) = 2081;
      sub_100FB6F70((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[30] = sub_1008FA0F0(v15, v16, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Done publishing initial location for beacon %{private,mask.hash}s.", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_release();
    }
    else
    {
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v17 = (uint64_t (*)(void))v0[1];
    return v17();
  }
}

uint64_t sub_100FB4A40()
{
  uint64_t v1 = v0[41];
  v0[28] = 0xD000000000000013;
  v0[29] = 0x80000001013F80A0;
  uint64_t v4 = (char *)&async function pointer to dispatch thunk of AsyncKeyedThrottle.throttle(key:block:skipBlock:)
     + async function pointer to dispatch thunk of AsyncKeyedThrottle.throttle(key:block:skipBlock:);
  swift_retain();
  uint64_t v2 = (void *)swift_task_alloc();
  v0[42] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100FB4B58;
  return ((uint64_t (*)(void *, void *, uint64_t, void (*)(), void))v4)(v0 + 28, &unk_1016411F8, v1, sub_100871C18, 0);
}

uint64_t sub_100FB4B58()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 344) = v0;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 328);
    uint64_t v4 = sub_100FB4CD4;
  }
  else
  {
    swift_release();
    uint64_t v4 = sub_100FB9898;
    uint64_t v3 = 0;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100FB4CD4()
{
  return _swift_task_switch(sub_100FB98A4, 0, 0);
}

uint64_t sub_100FB4CF0(uint64_t a1)
{
  *(void *)(*(void *)v1 + 360) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100FB4DF0, 0, 0);
}

uint64_t sub_100FB4DF0()
{
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (v0[45])
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v2 = (void *)swift_task_alloc();
    v0[46] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100FB4F98;
    uint64_t v3 = v0[35];
    return sub_1008766F8(v3);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_101636B18 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100010324(v5, (uint64_t)qword_10170DED0);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      BOOL v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)BOOL v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Missing DelegatedBeaconPayloadPublisher!", v8, 2u);
      swift_slowDealloc();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
}

uint64_t sub_100FB4F98()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100FB989C, 0, 0);
}

uint64_t sub_100FB5094(uint64_t a1, char a2)
{
  *(unsigned char *)(v2 + 376) = a2;
  *(void *)(v2 + 280) = a1;
  uint64_t v3 = type metadata accessor for UUID();
  *(void *)(v2 + 288) = v3;
  *(void *)(v2 + 296) = *(void *)(v3 - 8);
  *(void *)(v2 + 304) = swift_task_alloc();
  *(void *)(v2 + 312) = swift_task_alloc();
  return _swift_task_switch(sub_100FB5168, 0, 0);
}

uint64_t sub_100FB5168()
{
  unsigned int v1 = *(unsigned __int8 *)(v0 + 376);
  if (v1 < 2)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
    return v2();
  }
  if (v1 != 2)
  {
    if (qword_1016375E8 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 96, (uint64_t *)&unk_101638D30);
    if (*(void *)(v0 + 120))
    {
      sub_10001CEB0((long long *)(v0 + 96), v0 + 16);
      sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
      uint64_t v6 = (uint64_t (*)(void))((char *)&dword_1016392E8 + dword_1016392E8);
      uint64_t v4 = (void *)swift_task_alloc();
      *(void *)(v0 + 352) = v4;
      *uint64_t v4 = v0;
      uint64_t v5 = sub_100FB4CF0;
      goto LABEL_14;
    }
LABEL_18:
    __break(1u);
    return result;
  }
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (!*(void *)(v0 + 80))
  {
    __break(1u);
    goto LABEL_18;
  }
  sub_10001CEB0((long long *)(v0 + 56), v0 + 136);
  sub_10001CD44((void *)(v0 + 136), *(void *)(v0 + 160));
  uint64_t v6 = (uint64_t (*)(void))((char *)&dword_1016392E8 + dword_1016392E8);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 320) = v4;
  *uint64_t v4 = v0;
  uint64_t v5 = sub_100FB53E0;
LABEL_14:
  v4[1] = v5;
  return v6();
}

uint64_t sub_100FB53E0(uint64_t a1)
{
  *(void *)(*(void *)v1 + 328) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100FB54E0, 0, 0);
}

uint64_t sub_100FB54E0()
{
  uint64_t v20 = v0;
  uint64_t v1 = v0[41];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 17));
  if (v1)
  {
    uint64_t v2 = v0[41];
    swift_retain();
    return _swift_task_switch(sub_100FB57E8, v2, 0);
  }
  else
  {
    if (qword_101636888 != -1) {
      swift_once();
    }
    uint64_t v4 = v0[37];
    uint64_t v3 = v0[38];
    uint64_t v6 = v0[35];
    uint64_t v5 = v0[36];
    uint64_t v7 = type metadata accessor for Logger();
    sub_100010324(v7, (uint64_t)qword_10170D788);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v6, v5);
    BOOL v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    BOOL v10 = os_log_type_enabled(v8, v9);
    uint64_t v12 = v0[37];
    uint64_t v11 = v0[38];
    uint64_t v13 = v0[36];
    if (v10)
    {
      uint64_t v14 = swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 141558275;
      v0[31] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v14 + 12) = 2081;
      sub_100FB6F70((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[30] = sub_1008FA0F0(v15, v16, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Done publishing initial location for beacon %{private,mask.hash}s.", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_release();
    }
    else
    {
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v17 = (uint64_t (*)(void))v0[1];
    return v17();
  }
}

uint64_t sub_100FB57E8()
{
  uint64_t v1 = v0[41];
  v0[28] = 0xD000000000000013;
  v0[29] = 0x80000001013F80A0;
  uint64_t v4 = (char *)&async function pointer to dispatch thunk of AsyncKeyedThrottle.throttle(key:block:skipBlock:)
     + async function pointer to dispatch thunk of AsyncKeyedThrottle.throttle(key:block:skipBlock:);
  swift_retain();
  uint64_t v2 = (void *)swift_task_alloc();
  v0[42] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100FB4B58;
  return ((uint64_t (*)(void *, void *, uint64_t, void (*)(), void))v4)(v0 + 28, &unk_101665AC8, v1, sub_100871C18, 0);
}

void *sub_100FB5900(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  BOOL v8 = (char *)v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for OwnerSharingCircle();
  uint64_t v9 = __chkstk_darwin(v32);
  uint64_t v31 = (uint64_t)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v37 = (uint64_t)v28 - v12;
  uint64_t result = _swiftEmptyArrayStorage;
  unint64_t v41 = _swiftEmptyArrayStorage;
  uint64_t v34 = *(void *)(a1 + 16);
  if (v34)
  {
    uint64_t v14 = 0;
    uint64_t v15 = *(unsigned __int8 *)(v11 + 80);
    v28[1] = v2;
    uint64_t v29 = (v15 + 32) & ~v15;
    uint64_t v33 = a1 + v29;
    uint64_t v35 = *(void *)(v11 + 72);
    uint64_t v38 = v6 + 16;
    uint64_t v39 = a2 + 56;
    uint64_t v30 = v6;
    unint64_t v16 = (void (**)(char *, uint64_t))(v6 + 8);
    uint64_t v17 = a2;
    uint64_t v40 = a2;
    do
    {
      uint64_t v36 = v14;
      sub_100FB6BB8(v33 + v35 * v14, v37, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      if (*(void *)(v17 + 16)
        && (sub_100FB6F70(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID),
            uint64_t v18 = dispatch thunk of Hashable._rawHashValue(seed:)(),
            uint64_t v17 = v40,
            uint64_t v19 = -1 << *(unsigned char *)(v40 + 32),
            unint64_t v20 = v18 & ~v19,
            ((*(void *)(v39 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20) & 1) != 0))
      {
        uint64_t v21 = ~v19;
        uint64_t v22 = *(void *)(v30 + 72);
        uint64_t v23 = *(void (**)(char *, unint64_t, uint64_t))(v30 + 16);
        while (1)
        {
          v23(v8, *(void *)(v17 + 48) + v22 * v20, v5);
          sub_100FB6F70((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
          char v24 = dispatch thunk of static Equatable.== infix(_:_:)();
          (*v16)(v8, v5);
          if (v24) {
            break;
          }
          unint64_t v20 = (v20 + 1) & v21;
          uint64_t v17 = v40;
          if (((*(void *)(v39 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20) & 1) == 0) {
            goto LABEL_3;
          }
        }
        sub_100FB6C70(v37, v31, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        uint64_t v25 = v41;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000B721C(0, v25[2] + 1, 1);
          uint64_t v25 = v41;
        }
        unint64_t v27 = v25[2];
        unint64_t v26 = v25[3];
        if (v27 >= v26 >> 1)
        {
          sub_1000B721C(v26 > 1, v27 + 1, 1);
          uint64_t v25 = v41;
        }
        v25[2] = v27 + 1;
        sub_100FB6C70(v31, (uint64_t)v25 + v29 + v27 * v35, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        uint64_t v17 = v40;
      }
      else
      {
LABEL_3:
        sub_100FB893C(v37, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      }
      uint64_t v14 = v36 + 1;
    }
    while (v36 + 1 != v34);
    return v41;
  }
  return result;
}

void *sub_100FB5D30(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v44 = (char *)v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for OwnerPeerTrust();
  uint64_t v11 = __chkstk_darwin(v31);
  uint64_t v39 = (uint64_t)v30 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)v30 - v14;
  uint64_t result = _swiftEmptyArrayStorage;
  uint64_t v49 = _swiftEmptyArrayStorage;
  uint64_t v38 = *(void *)(a1 + 16);
  if (v38)
  {
    v30[1] = v2;
    uint64_t v17 = 0;
    uint64_t v18 = *(unsigned __int8 *)(v13 + 80);
    uint64_t v40 = *(void *)(v13 + 72);
    uint64_t v32 = (v18 + 32) & ~v18;
    uint64_t v34 = a1 + v32;
    uint64_t v35 = (char *)v30 - v14;
    unint64_t v19 = v6 + 56;
    char v45 = (unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
    uint64_t v46 = v6 + 16;
    uint64_t v42 = (void (**)(char *, uint64_t))(v6 + 8);
    BOOL v43 = (void (**)(char *, char *, uint64_t))(v6 + 32);
    uint64_t v36 = v6;
    uint64_t v37 = a2;
    do
    {
      uint64_t v41 = v17;
      sub_100FB6BB8(v34 + v40 * v17, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
      uint64_t v20 = *(void *)(a2 + 16);
      if (v20)
      {
        unint64_t v33 = v19 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
        char v48 = &v15[*(int *)(v31 + 20)];
        uint64_t v21 = a2 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
        uint64_t v47 = *(void *)(v6 + 72);
        uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
        swift_bridgeObjectRetain();
        while (1)
        {
          v22(v10, v21, v5);
          uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))v19;
          (*(void (**)(char *, void, uint64_t, uint64_t))v19)(v10, 0, 1, v5);
          if ((*v45)(v10, 1, v5) == 1) {
            break;
          }
          char v24 = (void (**)(char *, void, uint64_t, uint64_t))v19;
          uint64_t v25 = v44;
          (*v43)(v44, v10, v5);
          sub_100FB6F70((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
          char v26 = dispatch thunk of static Equatable.== infix(_:_:)();
          (*v42)(v25, v5);
          if (v26)
          {
            a2 = v37;
            swift_bridgeObjectRelease();
            uint64_t v15 = v35;
            sub_100FB893C((uint64_t)v35, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
            unint64_t v19 = (unint64_t)v24;
            uint64_t v6 = v36;
            goto LABEL_4;
          }
          v21 += v47;
          --v20;
          unint64_t v19 = (unint64_t)v24;
          if (!v20) {
            goto LABEL_12;
          }
        }
      }
      else
      {
        uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))v19;
        swift_bridgeObjectRetain();
LABEL_12:
        v23(v10, 1, 1, v5);
      }
      a2 = v37;
      swift_bridgeObjectRelease();
      uint64_t v15 = v35;
      sub_100FB6C70((uint64_t)v35, v39, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
      unint64_t v27 = v49;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B747C(0, v27[2] + 1, 1);
        unint64_t v27 = v49;
      }
      uint64_t v6 = v36;
      unint64_t v29 = v27[2];
      unint64_t v28 = v27[3];
      if (v29 >= v28 >> 1)
      {
        sub_1000B747C(v28 > 1, v29 + 1, 1);
        unint64_t v27 = v49;
      }
      v27[2] = v29 + 1;
      sub_100FB6C70(v39, (uint64_t)v27 + v32 + v29 * v40, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
LABEL_4:
      uint64_t v17 = v41 + 1;
    }
    while (v41 + 1 != v38);
    return v49;
  }
  return result;
}

void *sub_100FB6204(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for OwnerPeerTrust();
  uint64_t v9 = __chkstk_darwin(v32);
  uint64_t v31 = (uint64_t)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v37 = (uint64_t)v28 - v12;
  uint64_t result = _swiftEmptyArrayStorage;
  uint64_t v41 = _swiftEmptyArrayStorage;
  uint64_t v34 = *(void *)(a1 + 16);
  if (v34)
  {
    uint64_t v14 = 0;
    uint64_t v15 = *(unsigned __int8 *)(v11 + 80);
    v28[1] = v2;
    uint64_t v29 = (v15 + 32) & ~v15;
    uint64_t v33 = a1 + v29;
    uint64_t v35 = *(void *)(v11 + 72);
    uint64_t v38 = v6 + 16;
    uint64_t v39 = a2 + 56;
    uint64_t v30 = v6;
    unint64_t v16 = (void (**)(char *, uint64_t))(v6 + 8);
    uint64_t v17 = a2;
    uint64_t v40 = a2;
    do
    {
      uint64_t v36 = v14;
      sub_100FB6BB8(v33 + v35 * v14, v37, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
      if (*(void *)(v17 + 16)
        && (sub_100FB6F70(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID),
            uint64_t v18 = dispatch thunk of Hashable._rawHashValue(seed:)(),
            uint64_t v17 = v40,
            uint64_t v19 = -1 << *(unsigned char *)(v40 + 32),
            unint64_t v20 = v18 & ~v19,
            ((*(void *)(v39 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20) & 1) != 0))
      {
        uint64_t v21 = ~v19;
        uint64_t v22 = *(void *)(v30 + 72);
        uint64_t v23 = *(void (**)(char *, unint64_t, uint64_t))(v30 + 16);
        while (1)
        {
          v23(v8, *(void *)(v17 + 48) + v22 * v20, v5);
          sub_100FB6F70((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
          char v24 = dispatch thunk of static Equatable.== infix(_:_:)();
          (*v16)(v8, v5);
          if (v24) {
            break;
          }
          unint64_t v20 = (v20 + 1) & v21;
          uint64_t v17 = v40;
          if (((*(void *)(v39 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20) & 1) == 0) {
            goto LABEL_3;
          }
        }
        sub_100FB6C70(v37, v31, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
        uint64_t v25 = v41;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000B747C(0, v25[2] + 1, 1);
          uint64_t v25 = v41;
        }
        unint64_t v27 = v25[2];
        unint64_t v26 = v25[3];
        if (v27 >= v26 >> 1)
        {
          sub_1000B747C(v26 > 1, v27 + 1, 1);
          uint64_t v25 = v41;
        }
        v25[2] = v27 + 1;
        sub_100FB6C70(v31, (uint64_t)v25 + v29 + v27 * v35, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
        uint64_t v17 = v40;
      }
      else
      {
LABEL_3:
        sub_100FB893C(v37, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
      }
      uint64_t v14 = v36 + 1;
    }
    while (v36 + 1 != v34);
    return v41;
  }
  return result;
}

void sub_100FB6634(uint64_t a1, uint64_t a2)
{
  sub_100FADF70(a1, a2, *(uint64_t **)(v2 + 16), *(uint64_t **)(v2 + 24), *(void *)(v2 + 32), *(uint64_t **)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 56));
}

uint64_t sub_100FB6658()
{
  uint64_t v1 = (int *)type metadata accessor for SharedBeaconRecord(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v16 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v3 = v0 + ((v2 + 24) & ~v2);
  sub_10001CFB8(*(void *)v3, *(void *)(v3 + 8));
  uint64_t v4 = v3 + v1[5];
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  v7(v3 + v1[6], v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = v3 + v1[18];
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  uint64_t v10 = v3 + v1[19];
  uint64_t v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v11(v10, 1, v5)) {
    v7(v10, v5);
  }
  uint64_t v12 = v3 + v1[20];
  uint64_t v13 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13))
  {
    uint64_t v14 = v12 + *(int *)(v13 + 20);
    if (!v11(v14, 1, v5)) {
      v7(v14, v5);
    }
  }

  return _swift_deallocObject(v0, ((v2 + 24) & ~v2) + v16, v2 | 7);
}

uint64_t sub_100FB68E8(uint64_t a1)
{
  return sub_100FACFE8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24)) & 1;
}

uint64_t sub_100FB690C(uint64_t a1)
{
  return sub_100FAF3A0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100FB6918()
{
  return sub_100FB70D0((uint64_t (*)(void))&type metadata accessor for UUID, (uint64_t (*)(uint64_t, uint64_t))sub_100E5F4A8);
}

uint64_t sub_100FB6944(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SharedBeaconRecord(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100FB69AC()
{
  return sub_100FB70D0((uint64_t (*)(void))&type metadata accessor for UUID, (uint64_t (*)(uint64_t, uint64_t))sub_100E5AB7C);
}

uint64_t sub_100FB69D8(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_100033F68;
  return sub_100F97B04(a1, a2, v2);
}

uint64_t sub_100FB6A88()
{
  return sub_100FB70D0((uint64_t (*)(void))&type metadata accessor for UUID, (uint64_t (*)(uint64_t, uint64_t))sub_100E58EC8);
}

uint64_t type metadata accessor for ShareCreateUseCase.ShareCreationData()
{
  uint64_t result = qword_101665B38;
  if (!qword_101665B38) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100FB6B00(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[3] = a2;
  v6[4] = v2;
  v6[1] = sub_100033F68;
  _OWORD v6[2] = a1;
  return _swift_task_switch(sub_100FB2890, v2, 0);
}

uint64_t sub_100FB6BB8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_100FB6C20(uint64_t a1, uint64_t a2)
{
  sub_100FB23D4(a1, a2, *(void **)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
}

uint64_t sub_100FB6C44()
{
  return sub_100FB70D0((uint64_t (*)(void))&type metadata accessor for UUID, (uint64_t (*)(uint64_t, uint64_t))sub_100E5F1B0);
}

uint64_t sub_100FB6C70(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100FB6CDC()
{
  return sub_100FB70D0((uint64_t (*)(void))&type metadata accessor for UUID, sub_100E5F4E8);
}

uint64_t sub_100FB6D08(uint64_t a1, uint64_t *a2)
{
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(v2 + 32);
  char v8 = *(unsigned char *)(v2 + 16);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v9;
  void *v9 = v3;
  v9[1] = sub_10001D2E4;
  return sub_100FAF64C(a1, a2, v8, v6, v7);
}

uint64_t sub_100FB6DCC(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_10012E0C8;
  return sub_100FB001C(a1, v1);
}

unint64_t sub_100FB6E64()
{
  unint64_t result = qword_101665A98;
  if (!qword_101665A98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_101665A98);
  }
  return result;
}

uint64_t sub_100FB6EB8(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[3] = a2;
  v6[4] = v2;
  v6[1] = sub_100033F68;
  _OWORD v6[2] = a1;
  return _swift_task_switch(sub_100FB232C, v2, 0);
}

uint64_t sub_100FB6F70(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

BOOL sub_100FB6FC0(uint64_t a1)
{
  return sub_100F8ABEC(a1);
}

uint64_t sub_100FB6FE0(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_100033F68;
  return sub_100F8ACE8(a1, a2, v2);
}

unint64_t sub_100FB708C()
{
  unint64_t result = qword_10163B900;
  if (!qword_10163B900)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10163B900);
  }
  return result;
}

uint64_t sub_100FB70D0(uint64_t (*a1)(void), uint64_t (*a2)(uint64_t, uint64_t))
{
  uint64_t v3 = *(void *)(a1(0) - 8);
  uint64_t v4 = *(void *)(v2 + 16);
  uint64_t v5 = v2 + ((*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return a2(v4, v5);
}

uint64_t sub_100FB7160()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100FB98B8;
  return sub_100871A84();
}

uint64_t *sub_100FB71F0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v25 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a2[2];
    a1[1] = a2[1];
    a1[2] = v6;
    uint64_t v7 = a2[4];
    a1[3] = a2[3];
    a1[4] = v7;
    uint64_t v8 = *(int *)(a3 + 36);
    uint64_t v119 = a1;
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = *(uint64_t *)((char *)a2 + v8);
    unint64_t v12 = *(uint64_t *)((char *)a2 + v8 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000361E0(v11, v12);
    uint64_t *v9 = v11;
    v9[1] = v12;
    uint64_t v13 = (int *)type metadata accessor for OwnedBeaconRecord();
    uint64_t v14 = v13[5];
    uint64_t v15 = (char *)v9 + v14;
    uint64_t v16 = &v10[v14];
    uint64_t v17 = type metadata accessor for UUID();
    uint64_t v18 = *(void *)(v17 - 8);
    uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
    v19(v15, v16, v17);
    uint64_t v20 = v13[6];
    uint64_t v21 = (uint64_t *)((char *)v9 + v20);
    uint64_t v22 = &v10[v20];
    type metadata accessor for StableIdentifier();
    uint64_t v120 = v19;
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v26 = *((void *)v22 + 1);
        *uint64_t v21 = *(void *)v22;
        v21[1] = v26;
        uint64_t v27 = *((void *)v22 + 3);
        v21[2] = *((void *)v22 + 2);
        uint64_t v21[3] = v27;
        uint64_t v23 = v17;
        uint64_t v28 = *((void *)v22 + 5);
        v21[4] = *((void *)v22 + 4);
        v21[5] = v28;
        goto LABEL_8;
      case 2u:
        v19((char *)v21, v22, v17);
        uint64_t v29 = (int *)sub_10000588C(&qword_1016555E0);
        uint64_t v30 = v29[12];
        uint64_t v31 = (void *)((char *)v21 + v30);
        uint64_t v32 = &v22[v30];
        uint64_t v34 = *(void *)v32;
        uint64_t v33 = *((void *)v32 + 1);
        void *v31 = v34;
        v31[1] = v33;
        uint64_t v35 = v29[16];
        uint64_t v36 = (void *)((char *)v21 + v35);
        uint64_t v37 = &v22[v35];
        uint64_t v116 = *((void *)v37 + 1);
        *uint64_t v36 = *(void *)v37;
        v36[1] = v116;
        uint64_t v38 = v29[20];
        uint64_t v39 = (void *)((char *)v21 + v38);
        uint64_t v40 = &v22[v38];
        uint64_t v41 = *((void *)v40 + 1);
        *uint64_t v39 = *(void *)v40;
        v39[1] = v41;
        *(_WORD *)((char *)v21 + v29[24]) = *(_WORD *)&v22[v29[24]];
        uint64_t v42 = v29[28];
        BOOL v43 = (void *)((char *)v21 + v42);
        uint64_t v44 = &v22[v42];
        uint64_t v23 = v17;
        uint64_t v45 = *((void *)v44 + 1);
        *BOOL v43 = *(void *)v44;
        v43[1] = v45;
        swift_bridgeObjectRetain();
        goto LABEL_8;
      case 3u:
        v19((char *)v21, v22, v17);
        uint64_t v46 = (int *)sub_10000588C((uint64_t *)&unk_1016565E0);
        uint64_t v47 = v46[12];
        char v48 = (void *)((char *)v21 + v47);
        uint64_t v49 = &v22[v47];
        uint64_t v51 = *(void *)v49;
        uint64_t v50 = *((void *)v49 + 1);
        *char v48 = v51;
        v48[1] = v50;
        uint64_t v52 = v46[16];
        uint64_t v53 = (void *)((char *)v21 + v52);
        uint64_t v54 = &v22[v52];
        uint64_t v55 = *((void *)v54 + 1);
        *uint64_t v53 = *(void *)v54;
        v53[1] = v55;
        uint64_t v56 = v46[20];
        uint64_t v57 = (void *)((char *)v21 + v56);
        uint64_t v58 = &v22[v56];
        uint64_t v23 = v17;
        uint64_t v59 = *((void *)v58 + 1);
        *uint64_t v57 = *(void *)v58;
        v57[1] = v59;
        *((unsigned char *)v21 + v46[24]) = v22[v46[24]];
LABEL_8:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v23 = v17;
        uint64_t v24 = *((void *)v22 + 1);
        *uint64_t v21 = *(void *)v22;
        v21[1] = v24;
        break;
    }
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
    uint64_t v60 = v13[7];
    uint64_t v61 = (char *)v9 + v60;
    uint64_t v62 = &v10[v60];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(&v10[v60], 1, v23))
    {
      uint64_t v63 = sub_10000588C(&qword_101638CF0);
      memcpy(v61, v62, *(void *)(*(void *)(v63 - 8) + 64));
    }
    else
    {
      v120(v61, v62, v23);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v61, 0, 1, v23);
    }
    uint64_t v25 = v119;
    uint64_t v64 = v13[8];
    int64_t v65 = (char *)v9 + v64;
    uint64_t v66 = &v10[v64];
    uint64_t v67 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v67 - 8) + 16))(v65, v66, v67);
    uint64_t v68 = v13[9];
    uint64_t v69 = (uint64_t *)((char *)v9 + v68);
    char v70 = (uint64_t *)&v10[v68];
    uint64_t v71 = *v70;
    unint64_t v72 = v70[1];
    sub_1000361E0(*v70, v72);
    *uint64_t v69 = v71;
    v69[1] = v72;
    uint64_t v73 = v13[10];
    uint64_t v74 = (char *)v9 + v73;
    uint64_t v75 = &v10[v73];
    unint64_t v76 = *((void *)v75 + 1);
    if (v76 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v74 = *(_OWORD *)v75;
    }
    else
    {
      uint64_t v77 = *(void *)v75;
      sub_1000361E0(*(void *)v75, *((void *)v75 + 1));
      *(void *)uint64_t v74 = v77;
      *((void *)v74 + 1) = v76;
    }
    uint64_t v78 = v13[11];
    uint64_t v79 = (char *)v9 + v78;
    uint64_t v80 = &v10[v78];
    unint64_t v81 = *((void *)v80 + 1);
    if (v81 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v79 = *(_OWORD *)v80;
    }
    else
    {
      uint64_t v82 = *(void *)v80;
      sub_1000361E0(*(void *)v80, *((void *)v80 + 1));
      *(void *)uint64_t v79 = v82;
      *((void *)v79 + 1) = v81;
    }
    uint64_t v83 = v13[12];
    uint64_t v84 = (uint64_t *)((char *)v9 + v83);
    uint64_t v85 = (uint64_t *)&v10[v83];
    uint64_t v86 = *v85;
    unint64_t v87 = v85[1];
    sub_1000361E0(*v85, v87);
    *uint64_t v84 = v86;
    v84[1] = v87;
    uint64_t v88 = v13[13];
    uint64_t v89 = (uint64_t *)((char *)v9 + v88);
    uint64_t v90 = (uint64_t *)&v10[v88];
    uint64_t v91 = *v90;
    unint64_t v92 = v90[1];
    sub_1000361E0(*v90, v92);
    *uint64_t v89 = v91;
    v89[1] = v92;
    uint64_t v93 = v13[14];
    uint64_t v94 = (uint64_t *)((char *)v9 + v93);
    uint64_t v95 = &v10[v93];
    uint64_t v96 = *((void *)v95 + 1);
    *uint64_t v94 = *(void *)v95;
    v94[1] = v96;
    uint64_t v97 = v13[15];
    uint64_t v98 = (uint64_t *)((char *)v9 + v97);
    uint64_t v99 = &v10[v97];
    uint64_t v100 = *((void *)v99 + 1);
    *uint64_t v98 = *(void *)v99;
    v98[1] = v100;
    *(uint64_t *)((char *)v9 + v13[16]) = *(void *)&v10[v13[16]];
    *(uint64_t *)((char *)v9 + v13[17]) = *(void *)&v10[v13[17]];
    *((unsigned char *)v9 + v13[18]) = v10[v13[18]];
    *((unsigned char *)v9 + v13[19]) = v10[v13[19]];
    *((unsigned char *)v9 + v13[20]) = v10[v13[20]];
    uint64_t v101 = *(int *)(a3 + 40);
    uint64_t v102 = (uint64_t *)((char *)v119 + v101);
    uint64_t v103 = (char *)a2 + v101;
    uint64_t v104 = *(uint64_t *)((char *)a2 + v101);
    unint64_t v105 = *(uint64_t *)((char *)a2 + v101 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000361E0(v104, v105);
    *uint64_t v102 = v104;
    v102[1] = v105;
    uint64_t v106 = (int *)type metadata accessor for BeaconNamingRecord();
    v120((char *)v102 + v106[5], &v103[v106[5]], v23);
    v120((char *)v102 + v106[6], &v103[v106[6]], v23);
    *(uint64_t *)((char *)v102 + v106[7]) = *(void *)&v103[v106[7]];
    uint64_t v107 = v106[8];
    int v108 = (uint64_t *)((char *)v102 + v107);
    uint64_t v109 = &v103[v107];
    uint64_t v110 = *((void *)v109 + 1);
    *int v108 = *(void *)v109;
    v108[1] = v110;
    uint64_t v111 = v106[9];
    uint64_t v112 = (uint64_t *)((char *)v102 + v111);
    uint64_t v113 = &v103[v111];
    uint64_t v114 = *((void *)v113 + 1);
    *uint64_t v112 = *(void *)v113;
    v112[1] = v114;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v25;
}

uint64_t sub_100FB77F8(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 36);
  sub_10001CFB8(*(void *)v4, *(void *)(v4 + 8));
  uint64_t v5 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v6 = v4 + v5[5];
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  uint64_t v10 = v4 + v5[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_5;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 2u:
      v9(v10, v7);
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v9(v10, v7);
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v11 = v4 + v5[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v11, 1, v7)) {
    v9(v11, v7);
  }
  uint64_t v12 = v4 + v5[8];
  uint64_t v13 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
  sub_10001CFB8(*(void *)(v4 + v5[9]), *(void *)(v4 + v5[9] + 8));
  uint64_t v14 = (uint64_t *)(v4 + v5[10]);
  unint64_t v15 = v14[1];
  if (v15 >> 60 != 15) {
    sub_10001CFB8(*v14, v15);
  }
  uint64_t v16 = (uint64_t *)(v4 + v5[11]);
  unint64_t v17 = v16[1];
  if (v17 >> 60 != 15) {
    sub_10001CFB8(*v16, v17);
  }
  sub_10001CFB8(*(void *)(v4 + v5[12]), *(void *)(v4 + v5[12] + 8));
  sub_10001CFB8(*(void *)(v4 + v5[13]), *(void *)(v4 + v5[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v18 = a1 + *(int *)(a2 + 40);
  sub_10001CFB8(*(void *)v18, *(void *)(v18 + 8));
  uint64_t v19 = type metadata accessor for BeaconNamingRecord();
  v9(v18 + *(int *)(v19 + 20), v7);
  v9(v18 + *(int *)(v19 + 24), v7);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *sub_100FB7B90(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  uint64_t v5 = *(int *)(a3 + 36);
  uint64_t v6 = (void *)((char *)a1 + v5);
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = *(void *)((char *)a2 + v5);
  unint64_t v9 = *(void *)((char *)a2 + v5 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000361E0(v8, v9);
  *uint64_t v6 = v8;
  v6[1] = v9;
  uint64_t v10 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v11 = v10[5];
  uint64_t v12 = (char *)v6 + v11;
  uint64_t v13 = &v7[v11];
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
  v16(v12, v13, v14);
  uint64_t v17 = v10[6];
  uint64_t v18 = (char *)v6 + v17;
  uint64_t v19 = &v7[v17];
  type metadata accessor for StableIdentifier();
  uint64_t v116 = v16;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v22 = *((void *)v19 + 1);
      *(void *)uint64_t v18 = *(void *)v19;
      *((void *)v18 + 1) = v22;
      uint64_t v23 = *((void *)v19 + 3);
      *((void *)v18 + 2) = *((void *)v19 + 2);
      *((void *)v18 + 3) = v23;
      uint64_t v20 = v14;
      uint64_t v24 = *((void *)v19 + 5);
      *((void *)v18 + 4) = *((void *)v19 + 4);
      *((void *)v18 + 5) = v24;
      goto LABEL_6;
    case 2u:
      v16(v18, v19, v14);
      uint64_t v25 = (int *)sub_10000588C(&qword_1016555E0);
      uint64_t v26 = v25[12];
      uint64_t v27 = &v18[v26];
      uint64_t v28 = &v19[v26];
      uint64_t v30 = *(void *)v28;
      uint64_t v29 = *((void *)v28 + 1);
      *(void *)uint64_t v27 = v30;
      *((void *)v27 + 1) = v29;
      uint64_t v31 = v25[16];
      uint64_t v32 = &v18[v31];
      uint64_t v33 = &v19[v31];
      uint64_t v112 = *((void *)v33 + 1);
      *(void *)uint64_t v32 = *(void *)v33;
      *((void *)v32 + 1) = v112;
      uint64_t v34 = v25[20];
      uint64_t v35 = &v18[v34];
      uint64_t v36 = &v19[v34];
      uint64_t v37 = *((void *)v36 + 1);
      *(void *)uint64_t v35 = *(void *)v36;
      *((void *)v35 + 1) = v37;
      *(_WORD *)&v18[v25[24]] = *(_WORD *)&v19[v25[24]];
      uint64_t v38 = v25[28];
      uint64_t v39 = &v18[v38];
      uint64_t v40 = &v19[v38];
      uint64_t v20 = v14;
      uint64_t v41 = *((void *)v40 + 1);
      *(void *)uint64_t v39 = *(void *)v40;
      *((void *)v39 + 1) = v41;
      swift_bridgeObjectRetain();
      goto LABEL_6;
    case 3u:
      v16(v18, v19, v14);
      uint64_t v42 = (int *)sub_10000588C((uint64_t *)&unk_1016565E0);
      uint64_t v43 = v42[12];
      uint64_t v44 = &v18[v43];
      uint64_t v45 = &v19[v43];
      uint64_t v47 = *(void *)v45;
      uint64_t v46 = *((void *)v45 + 1);
      *(void *)uint64_t v44 = v47;
      *((void *)v44 + 1) = v46;
      uint64_t v48 = v42[16];
      uint64_t v49 = &v18[v48];
      uint64_t v50 = &v19[v48];
      uint64_t v51 = *((void *)v50 + 1);
      *(void *)uint64_t v49 = *(void *)v50;
      *((void *)v49 + 1) = v51;
      uint64_t v52 = v42[20];
      uint64_t v53 = &v18[v52];
      uint64_t v54 = &v19[v52];
      uint64_t v20 = v14;
      uint64_t v55 = *((void *)v54 + 1);
      *(void *)uint64_t v53 = *(void *)v54;
      *((void *)v53 + 1) = v55;
      v18[v42[24]] = v19[v42[24]];
LABEL_6:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
    default:
      uint64_t v20 = v14;
      uint64_t v21 = *((void *)v19 + 1);
      *(void *)uint64_t v18 = *(void *)v19;
      *((void *)v18 + 1) = v21;
      break;
  }
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  uint64_t v56 = v10[7];
  uint64_t v57 = (char *)v6 + v56;
  uint64_t v58 = &v7[v56];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(&v7[v56], 1, v20))
  {
    uint64_t v59 = sub_10000588C(&qword_101638CF0);
    memcpy(v57, v58, *(void *)(*(void *)(v59 - 8) + 64));
  }
  else
  {
    v116(v57, v58, v20);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v57, 0, 1, v20);
  }
  uint64_t v60 = v10[8];
  uint64_t v61 = (char *)v6 + v60;
  uint64_t v62 = &v7[v60];
  uint64_t v63 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v63 - 8) + 16))(v61, v62, v63);
  uint64_t v64 = v10[9];
  int64_t v65 = (uint64_t *)((char *)v6 + v64);
  uint64_t v66 = (uint64_t *)&v7[v64];
  uint64_t v67 = *v66;
  unint64_t v68 = v66[1];
  sub_1000361E0(*v66, v68);
  *int64_t v65 = v67;
  v65[1] = v68;
  uint64_t v69 = v10[10];
  char v70 = (char *)v6 + v69;
  uint64_t v71 = &v7[v69];
  unint64_t v72 = *((void *)v71 + 1);
  if (v72 >> 60 == 15)
  {
    *(_OWORD *)char v70 = *(_OWORD *)v71;
  }
  else
  {
    uint64_t v73 = *(void *)v71;
    sub_1000361E0(*(void *)v71, *((void *)v71 + 1));
    *(void *)char v70 = v73;
    *((void *)v70 + 1) = v72;
  }
  uint64_t v74 = v10[11];
  uint64_t v75 = (char *)v6 + v74;
  unint64_t v76 = &v7[v74];
  unint64_t v77 = *((void *)v76 + 1);
  if (v77 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v75 = *(_OWORD *)v76;
  }
  else
  {
    uint64_t v78 = *(void *)v76;
    sub_1000361E0(*(void *)v76, *((void *)v76 + 1));
    *(void *)uint64_t v75 = v78;
    *((void *)v75 + 1) = v77;
  }
  uint64_t v79 = v10[12];
  uint64_t v80 = (uint64_t *)((char *)v6 + v79);
  unint64_t v81 = (uint64_t *)&v7[v79];
  uint64_t v82 = *v81;
  unint64_t v83 = v81[1];
  sub_1000361E0(*v81, v83);
  *uint64_t v80 = v82;
  v80[1] = v83;
  uint64_t v84 = v10[13];
  uint64_t v85 = (uint64_t *)((char *)v6 + v84);
  uint64_t v86 = (uint64_t *)&v7[v84];
  uint64_t v87 = *v86;
  unint64_t v88 = v86[1];
  sub_1000361E0(*v86, v88);
  *uint64_t v85 = v87;
  v85[1] = v88;
  uint64_t v89 = v10[14];
  uint64_t v90 = (uint64_t *)((char *)v6 + v89);
  uint64_t v91 = &v7[v89];
  uint64_t v92 = *((void *)v91 + 1);
  *uint64_t v90 = *(void *)v91;
  v90[1] = v92;
  uint64_t v93 = v10[15];
  uint64_t v94 = (uint64_t *)((char *)v6 + v93);
  uint64_t v95 = &v7[v93];
  uint64_t v96 = *((void *)v95 + 1);
  *uint64_t v94 = *(void *)v95;
  v94[1] = v96;
  *(uint64_t *)((char *)v6 + v10[16]) = *(void *)&v7[v10[16]];
  *(uint64_t *)((char *)v6 + v10[17]) = *(void *)&v7[v10[17]];
  *((unsigned char *)v6 + v10[18]) = v7[v10[18]];
  *((unsigned char *)v6 + v10[19]) = v7[v10[19]];
  *((unsigned char *)v6 + v10[20]) = v7[v10[20]];
  uint64_t v97 = *(int *)(a3 + 40);
  uint64_t v98 = (void *)((char *)a1 + v97);
  uint64_t v99 = (char *)a2 + v97;
  uint64_t v100 = *(void *)((char *)a2 + v97);
  unint64_t v101 = *(void *)((char *)a2 + v97 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000361E0(v100, v101);
  *uint64_t v98 = v100;
  v98[1] = v101;
  uint64_t v102 = (int *)type metadata accessor for BeaconNamingRecord();
  v116((char *)v98 + v102[5], &v99[v102[5]], v20);
  v116((char *)v98 + v102[6], &v99[v102[6]], v20);
  *(uint64_t *)((char *)v98 + v102[7]) = *(void *)&v99[v102[7]];
  uint64_t v103 = v102[8];
  uint64_t v104 = (uint64_t *)((char *)v98 + v103);
  unint64_t v105 = &v99[v103];
  uint64_t v106 = *((void *)v105 + 1);
  *uint64_t v104 = *(void *)v105;
  v104[1] = v106;
  uint64_t v107 = v102[9];
  int v108 = (uint64_t *)((char *)v98 + v107);
  uint64_t v109 = &v99[v107];
  uint64_t v110 = *((void *)v109 + 1);
  *int v108 = *(void *)v109;
  v108[1] = v110;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *sub_100FB8150(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v116 = a3;
  uint64_t v6 = *(int *)(a3 + 36);
  uint64_t v7 = (void *)((char *)a1 + v6);
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = *(void *)((char *)a2 + v6);
  unint64_t v10 = *(void *)((char *)a2 + v6 + 8);
  sub_1000361E0(v9, v10);
  uint64_t v11 = *v7;
  unint64_t v12 = v7[1];
  *uint64_t v7 = v9;
  v7[1] = v10;
  sub_10001CFB8(v11, v12);
  uint64_t v13 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v14 = v13[5];
  uint64_t v15 = (char *)v7 + v14;
  uint64_t v16 = &v8[v14];
  uint64_t v17 = type metadata accessor for UUID();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v118 = v17;
  uint64_t v115 = *(void (**)(char *, char *))(v18 + 24);
  v115(v15, v16);
  uint64_t v117 = a2;
  if (a1 != a2)
  {
    uint64_t v19 = v13[6];
    uint64_t v20 = (uint64_t *)((char *)v7 + v19);
    uint64_t v21 = &v8[v19];
    sub_100FB893C((uint64_t)v7 + v19, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    type metadata accessor for StableIdentifier();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        *uint64_t v20 = *(void *)v21;
        v20[1] = *((void *)v21 + 1);
        v20[2] = *((void *)v21 + 2);
        v20[3] = *((void *)v21 + 3);
        v20[4] = *((void *)v21 + 4);
        void v20[5] = *((void *)v21 + 5);
        goto LABEL_7;
      case 2u:
        (*(void (**)(void *, char *, uint64_t))(v18 + 16))(v20, v21, v118);
        uint64_t v22 = (int *)sub_10000588C(&qword_1016555E0);
        uint64_t v23 = v22[12];
        uint64_t v24 = (void *)((char *)v20 + v23);
        uint64_t v25 = &v21[v23];
        *uint64_t v24 = *(void *)v25;
        v24[1] = *((void *)v25 + 1);
        uint64_t v26 = v22[16];
        uint64_t v27 = (void *)((char *)v20 + v26);
        uint64_t v28 = &v21[v26];
        *uint64_t v27 = *(void *)v28;
        v27[1] = *((void *)v28 + 1);
        uint64_t v29 = v22[20];
        uint64_t v30 = (void *)((char *)v20 + v29);
        uint64_t v31 = &v21[v29];
        void *v30 = *(void *)v31;
        v30[1] = *((void *)v31 + 1);
        *(_WORD *)((char *)v20 + v22[24]) = *(_WORD *)&v21[v22[24]];
        uint64_t v32 = v22[28];
        uint64_t v33 = (void *)((char *)v20 + v32);
        uint64_t v34 = &v21[v32];
        *uint64_t v33 = *(void *)v34;
        v33[1] = *((void *)v34 + 1);
        swift_bridgeObjectRetain();
        goto LABEL_7;
      case 3u:
        (*(void (**)(void *, char *, uint64_t))(v18 + 16))(v20, v21, v118);
        uint64_t v35 = (int *)sub_10000588C((uint64_t *)&unk_1016565E0);
        uint64_t v36 = v35[12];
        uint64_t v37 = (void *)((char *)v20 + v36);
        uint64_t v38 = &v21[v36];
        *uint64_t v37 = *(void *)v38;
        v37[1] = *((void *)v38 + 1);
        uint64_t v39 = v35[16];
        uint64_t v40 = (void *)((char *)v20 + v39);
        uint64_t v41 = &v21[v39];
        *uint64_t v40 = *(void *)v41;
        v40[1] = *((void *)v41 + 1);
        uint64_t v42 = v35[20];
        uint64_t v43 = (void *)((char *)v20 + v42);
        uint64_t v44 = &v21[v42];
        *uint64_t v43 = *(void *)v44;
        v43[1] = *((void *)v44 + 1);
        *((unsigned char *)v20 + v35[24]) = v21[v35[24]];
LABEL_7:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      default:
        *uint64_t v20 = *(void *)v21;
        v20[1] = *((void *)v21 + 1);
        break;
    }
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v45 = v13[7];
  uint64_t v46 = (char *)v7 + v45;
  uint64_t v47 = &v8[v45];
  uint64_t v48 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  int v49 = v48((char *)v7 + v45, 1, v118);
  int v50 = v48(v47, 1, v118);
  if (v49)
  {
    if (!v50)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v46, v47, v118);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v46, 0, 1, v118);
LABEL_15:
      uint64_t v52 = (void (*)(char *, char *, uint64_t))v115;
      goto LABEL_16;
    }
LABEL_14:
    uint64_t v51 = sub_10000588C(&qword_101638CF0);
    memcpy(v46, v47, *(void *)(*(void *)(v51 - 8) + 64));
    goto LABEL_15;
  }
  if (v50)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v46, v118);
    goto LABEL_14;
  }
  uint64_t v52 = (void (*)(char *, char *, uint64_t))v115;
  ((void (*)(char *, char *, uint64_t))v115)(v46, v47, v118);
LABEL_16:
  uint64_t v53 = v13[8];
  uint64_t v54 = (char *)v7 + v53;
  uint64_t v55 = &v8[v53];
  uint64_t v56 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v56 - 8) + 24))(v54, v55, v56);
  uint64_t v57 = v13[9];
  uint64_t v58 = (uint64_t *)((char *)v7 + v57);
  uint64_t v59 = (uint64_t *)&v8[v57];
  uint64_t v60 = *v59;
  unint64_t v61 = v59[1];
  sub_1000361E0(*v59, v61);
  uint64_t v62 = *v58;
  unint64_t v63 = v58[1];
  *uint64_t v58 = v60;
  v58[1] = v61;
  sub_10001CFB8(v62, v63);
  uint64_t v64 = v13[10];
  int64_t v65 = (uint64_t *)((char *)v7 + v64);
  uint64_t v66 = (uint64_t *)&v8[v64];
  unint64_t v67 = *(void *)&v8[v64 + 8];
  if (*(unint64_t *)((char *)v7 + v64 + 8) >> 60 == 15)
  {
    if (v67 >> 60 != 15)
    {
      uint64_t v68 = *v66;
      sub_1000361E0(v68, v67);
      *int64_t v65 = v68;
      v65[1] = v67;
      goto LABEL_23;
    }
    goto LABEL_21;
  }
  if (v67 >> 60 == 15)
  {
    sub_1002C0990((uint64_t)v65);
LABEL_21:
    *(_OWORD *)int64_t v65 = *(_OWORD *)v66;
    goto LABEL_23;
  }
  uint64_t v69 = *v66;
  sub_1000361E0(v69, v67);
  uint64_t v70 = *v65;
  unint64_t v71 = v65[1];
  *int64_t v65 = v69;
  v65[1] = v67;
  sub_10001CFB8(v70, v71);
LABEL_23:
  uint64_t v72 = v13[11];
  uint64_t v73 = (uint64_t *)((char *)v7 + v72);
  uint64_t v74 = (uint64_t *)&v8[v72];
  unint64_t v75 = *(void *)&v8[v72 + 8];
  if (*(unint64_t *)((char *)v7 + v72 + 8) >> 60 != 15)
  {
    if (v75 >> 60 != 15)
    {
      uint64_t v77 = *v74;
      sub_1000361E0(v77, v75);
      uint64_t v78 = *v73;
      unint64_t v79 = v73[1];
      *uint64_t v73 = v77;
      v73[1] = v75;
      sub_10001CFB8(v78, v79);
      goto LABEL_30;
    }
    sub_1002C0990((uint64_t)v73);
    goto LABEL_28;
  }
  if (v75 >> 60 == 15)
  {
LABEL_28:
    *(_OWORD *)uint64_t v73 = *(_OWORD *)v74;
    goto LABEL_30;
  }
  uint64_t v76 = *v74;
  sub_1000361E0(v76, v75);
  *uint64_t v73 = v76;
  v73[1] = v75;
LABEL_30:
  uint64_t v80 = v13[12];
  unint64_t v81 = (uint64_t *)((char *)v7 + v80);
  uint64_t v82 = (uint64_t *)&v8[v80];
  uint64_t v83 = *v82;
  unint64_t v84 = v82[1];
  sub_1000361E0(*v82, v84);
  uint64_t v85 = *v81;
  unint64_t v86 = v81[1];
  uint64_t *v81 = v83;
  v81[1] = v84;
  sub_10001CFB8(v85, v86);
  uint64_t v87 = v13[13];
  unint64_t v88 = (uint64_t *)((char *)v7 + v87);
  uint64_t v89 = (uint64_t *)&v8[v87];
  uint64_t v90 = *v89;
  unint64_t v91 = v89[1];
  sub_1000361E0(*v89, v91);
  uint64_t v92 = *v88;
  unint64_t v93 = v88[1];
  *unint64_t v88 = v90;
  v88[1] = v91;
  sub_10001CFB8(v92, v93);
  uint64_t v94 = v13[14];
  uint64_t v95 = (uint64_t *)((char *)v7 + v94);
  uint64_t v96 = &v8[v94];
  *uint64_t v95 = *(void *)v96;
  v95[1] = *((void *)v96 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v97 = v13[15];
  uint64_t v98 = (uint64_t *)((char *)v7 + v97);
  uint64_t v99 = &v8[v97];
  *uint64_t v98 = *(void *)v99;
  v98[1] = *((void *)v99 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(uint64_t *)((char *)v7 + v13[16]) = *(void *)&v8[v13[16]];
  *(uint64_t *)((char *)v7 + v13[17]) = *(void *)&v8[v13[17]];
  *((unsigned char *)v7 + v13[18]) = v8[v13[18]];
  *((unsigned char *)v7 + v13[19]) = v8[v13[19]];
  *((unsigned char *)v7 + v13[20]) = v8[v13[20]];
  uint64_t v100 = *(int *)(v116 + 40);
  unint64_t v101 = (void *)((char *)a1 + v100);
  uint64_t v102 = (char *)v117 + v100;
  uint64_t v103 = *(void *)((char *)v117 + v100);
  unint64_t v104 = *(void *)((char *)v117 + v100 + 8);
  sub_1000361E0(v103, v104);
  uint64_t v105 = *v101;
  unint64_t v106 = v101[1];
  *unint64_t v101 = v103;
  v101[1] = v104;
  sub_10001CFB8(v105, v106);
  uint64_t v107 = (int *)type metadata accessor for BeaconNamingRecord();
  v52((char *)v101 + v107[5], &v102[v107[5]], v118);
  v52((char *)v101 + v107[6], &v102[v107[6]], v118);
  *(uint64_t *)((char *)v101 + v107[7]) = *(void *)&v102[v107[7]];
  uint64_t v108 = v107[8];
  uint64_t v109 = (uint64_t *)((char *)v101 + v108);
  uint64_t v110 = &v102[v108];
  *uint64_t v109 = *(void *)v110;
  v109[1] = *((void *)v110 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v111 = v107[9];
  uint64_t v112 = (uint64_t *)((char *)v101 + v111);
  uint64_t v113 = &v102[v111];
  *uint64_t v112 = *(void *)v113;
  v112[1] = *((void *)v113 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100FB893C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100FB899C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v5 = *(int *)(a3 + 36);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  *(_OWORD *)(a1 + v5) = *(_OWORD *)(a2 + v5);
  uint64_t v8 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v9 = v8[5];
  uint64_t v10 = v6 + v9;
  uint64_t v11 = v7 + v9;
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v37 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32);
  v37(v10, v11, v12);
  uint64_t v14 = v8[6];
  uint64_t v15 = (unsigned char *)(v6 + v14);
  uint64_t v16 = (unsigned char *)(v7 + v14);
  uint64_t v17 = type metadata accessor for StableIdentifier();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 3)
  {
    v37((uint64_t)v15, (uint64_t)v16, v12);
    uint64_t v20 = (int *)sub_10000588C((uint64_t *)&unk_1016565E0);
    *(_OWORD *)&v15[v20[12]] = *(_OWORD *)&v16[v20[12]];
    *(_OWORD *)&v15[v20[16]] = *(_OWORD *)&v16[v20[16]];
    *(_OWORD *)&v15[v20[20]] = *(_OWORD *)&v16[v20[20]];
    v15[v20[24]] = v16[v20[24]];
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 2)
  {
    v37((uint64_t)v15, (uint64_t)v16, v12);
    uint64_t v19 = (int *)sub_10000588C(&qword_1016555E0);
    *(_OWORD *)&v15[v19[12]] = *(_OWORD *)&v16[v19[12]];
    *(_OWORD *)&v15[v19[16]] = *(_OWORD *)&v16[v19[16]];
    *(_OWORD *)&v15[v19[20]] = *(_OWORD *)&v16[v19[20]];
    *(_WORD *)&v15[v19[24]] = *(_WORD *)&v16[v19[24]];
    *(_OWORD *)&v15[v19[28]] = *(_OWORD *)&v16[v19[28]];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
  }
  uint64_t v21 = v8[7];
  uint64_t v22 = (void *)(v6 + v21);
  uint64_t v23 = (const void *)(v7 + v21);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v7 + v21, 1, v12))
  {
    uint64_t v24 = sub_10000588C(&qword_101638CF0);
    memcpy(v22, v23, *(void *)(*(void *)(v24 - 8) + 64));
    uint64_t v25 = v37;
  }
  else
  {
    uint64_t v25 = v37;
    v37((uint64_t)v22, (uint64_t)v23, v12);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v13 + 56))(v22, 0, 1, v12);
  }
  uint64_t v26 = v8[8];
  uint64_t v27 = v6 + v26;
  uint64_t v28 = v7 + v26;
  uint64_t v29 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 32))(v27, v28, v29);
  *(_OWORD *)(v6 + v8[9]) = *(_OWORD *)(v7 + v8[9]);
  *(_OWORD *)(v6 + v8[10]) = *(_OWORD *)(v7 + v8[10]);
  *(_OWORD *)(v6 + v8[11]) = *(_OWORD *)(v7 + v8[11]);
  *(_OWORD *)(v6 + v8[12]) = *(_OWORD *)(v7 + v8[12]);
  *(_OWORD *)(v6 + v8[13]) = *(_OWORD *)(v7 + v8[13]);
  *(_OWORD *)(v6 + v8[14]) = *(_OWORD *)(v7 + v8[14]);
  *(_OWORD *)(v6 + v8[15]) = *(_OWORD *)(v7 + v8[15]);
  *(void *)(v6 + v8[16]) = *(void *)(v7 + v8[16]);
  *(void *)(v6 + v8[17]) = *(void *)(v7 + v8[17]);
  *(unsigned char *)(v6 + v8[18]) = *(unsigned char *)(v7 + v8[18]);
  *(unsigned char *)(v6 + v8[19]) = *(unsigned char *)(v7 + v8[19]);
  *(unsigned char *)(v6 + v8[20]) = *(unsigned char *)(v7 + v8[20]);
  uint64_t v30 = *(int *)(a3 + 40);
  uint64_t v31 = a1 + v30;
  uint64_t v32 = a2 + v30;
  *(_OWORD *)(a1 + v30) = *(_OWORD *)(a2 + v30);
  uint64_t v33 = (int *)type metadata accessor for BeaconNamingRecord();
  v25(v31 + v33[5], v32 + v33[5], v12);
  v25(v31 + v33[6], v32 + v33[6], v12);
  *(void *)(v31 + v33[7]) = *(void *)(v32 + v33[7]);
  *(_OWORD *)(v31 + v33[8]) = *(_OWORD *)(v32 + v33[8]);
  *(_OWORD *)(v31 + v33[9]) = *(_OWORD *)(v32 + v33[9]);
  return a1;
}

void *sub_100FB8DB4(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRelease();
  uint64_t v85 = a3;
  uint64_t v6 = *(int *)(a3 + 36);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = *(void *)((char *)a1 + v6);
  unint64_t v10 = *(void *)((char *)a1 + v6 + 8);
  *(_OWORD *)((char *)a1 + v6) = *(_OWORD *)((char *)a2 + v6);
  sub_10001CFB8(v9, v10);
  uint64_t v11 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v12 = v11[5];
  uint64_t v13 = &v7[v12];
  uint64_t v14 = &v8[v12];
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v87 = *(void (**)(char *, char *, uint64_t))(v16 + 40);
  v87(v13, v14, v15);
  unint64_t v86 = a2;
  if (a1 != a2)
  {
    uint64_t v17 = v11[6];
    uint64_t v18 = &v7[v17];
    uint64_t v19 = &v8[v17];
    sub_100FB893C((uint64_t)&v7[v17], (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    uint64_t v20 = type metadata accessor for StableIdentifier();
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v19, v15);
      uint64_t v23 = (int *)sub_10000588C((uint64_t *)&unk_1016565E0);
      *(_OWORD *)&v18[v23[12]] = *(_OWORD *)&v19[v23[12]];
      *(_OWORD *)&v18[v23[16]] = *(_OWORD *)&v19[v23[16]];
      *(_OWORD *)&v18[v23[20]] = *(_OWORD *)&v19[v23[20]];
      v18[v23[24]] = v19[v23[24]];
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 2)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v19, v15);
      uint64_t v22 = (int *)sub_10000588C(&qword_1016555E0);
      *(_OWORD *)&v18[v22[12]] = *(_OWORD *)&v19[v22[12]];
      *(_OWORD *)&v18[v22[16]] = *(_OWORD *)&v19[v22[16]];
      *(_OWORD *)&v18[v22[20]] = *(_OWORD *)&v19[v22[20]];
      *(_WORD *)&v18[v22[24]] = *(_WORD *)&v19[v22[24]];
      *(_OWORD *)&v18[v22[28]] = *(_OWORD *)&v19[v22[28]];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64));
    }
  }
  uint64_t v24 = v11[7];
  uint64_t v25 = &v7[v24];
  uint64_t v26 = &v8[v24];
  uint64_t v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  int v28 = v27(&v7[v24], 1, v15);
  int v29 = v27(v26, 1, v15);
  if (v28)
  {
    if (v29)
    {
      uint64_t v30 = sub_10000588C(&qword_101638CF0);
      memcpy(v25, v26, *(void *)(*(void *)(v30 - 8) + 64));
      uint64_t v31 = v15;
    }
    else
    {
      uint64_t v31 = v15;
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v25, v26, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v25, 0, 1, v15);
    }
  }
  else
  {
    uint64_t v31 = v15;
    if (v29)
    {
      (*(void (**)(char *, uint64_t))(v16 + 8))(v25, v15);
      uint64_t v32 = sub_10000588C(&qword_101638CF0);
      memcpy(v25, v26, *(void *)(*(void *)(v32 - 8) + 64));
    }
    else
    {
      v87(v25, v26, v15);
    }
  }
  uint64_t v33 = v11[8];
  uint64_t v34 = &v7[v33];
  uint64_t v35 = &v8[v33];
  uint64_t v36 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 40))(v34, v35, v36);
  uint64_t v37 = v11[9];
  uint64_t v38 = *(void *)&v7[v37];
  unint64_t v39 = *(void *)&v7[v37 + 8];
  *(_OWORD *)&v7[v37] = *(_OWORD *)&v8[v37];
  sub_10001CFB8(v38, v39);
  uint64_t v40 = v11[10];
  uint64_t v41 = (uint64_t)&v7[v40];
  uint64_t v42 = &v8[v40];
  unint64_t v43 = *(void *)&v7[v40 + 8];
  if (v43 >> 60 == 15) {
    goto LABEL_17;
  }
  unint64_t v44 = *((void *)v42 + 1);
  if (v44 >> 60 == 15)
  {
    sub_1002C0990(v41);
LABEL_17:
    *(_OWORD *)uint64_t v41 = *(_OWORD *)v42;
    goto LABEL_19;
  }
  uint64_t v45 = *(void *)v41;
  *(void *)uint64_t v41 = *(void *)v42;
  *(void *)(v41 + 8) = v44;
  sub_10001CFB8(v45, v43);
LABEL_19:
  uint64_t v46 = v11[11];
  uint64_t v47 = (uint64_t *)&v7[v46];
  uint64_t v48 = (uint64_t *)&v8[v46];
  unint64_t v49 = *(void *)&v7[v46 + 8];
  if (v49 >> 60 != 15)
  {
    unint64_t v50 = v48[1];
    if (v50 >> 60 != 15)
    {
      uint64_t v51 = *v47;
      *uint64_t v47 = *v48;
      v47[1] = v50;
      sub_10001CFB8(v51, v49);
      goto LABEL_24;
    }
    sub_1002C0990((uint64_t)v47);
  }
  *(_OWORD *)uint64_t v47 = *(_OWORD *)v48;
LABEL_24:
  uint64_t v52 = v11[12];
  uint64_t v53 = *(void *)&v7[v52];
  unint64_t v54 = *(void *)&v7[v52 + 8];
  *(_OWORD *)&v7[v52] = *(_OWORD *)&v8[v52];
  sub_10001CFB8(v53, v54);
  uint64_t v55 = v11[13];
  uint64_t v56 = *(void *)&v7[v55];
  unint64_t v57 = *(void *)&v7[v55 + 8];
  *(_OWORD *)&v7[v55] = *(_OWORD *)&v8[v55];
  sub_10001CFB8(v56, v57);
  uint64_t v58 = v11[14];
  uint64_t v59 = &v7[v58];
  uint64_t v60 = &v8[v58];
  uint64_t v62 = *(void *)v60;
  uint64_t v61 = *((void *)v60 + 1);
  *(void *)uint64_t v59 = v62;
  *((void *)v59 + 1) = v61;
  swift_bridgeObjectRelease();
  uint64_t v63 = v11[15];
  uint64_t v64 = &v7[v63];
  int64_t v65 = &v8[v63];
  uint64_t v67 = *(void *)v65;
  uint64_t v66 = *((void *)v65 + 1);
  *(void *)uint64_t v64 = v67;
  *((void *)v64 + 1) = v66;
  swift_bridgeObjectRelease();
  *(void *)&v7[v11[16]] = *(void *)&v8[v11[16]];
  *(void *)&v7[v11[17]] = *(void *)&v8[v11[17]];
  v7[v11[18]] = v8[v11[18]];
  v7[v11[19]] = v8[v11[19]];
  v7[v11[20]] = v8[v11[20]];
  uint64_t v68 = *(int *)(v85 + 40);
  uint64_t v69 = (char *)a1 + v68;
  uint64_t v70 = (char *)v86 + v68;
  uint64_t v71 = *(void *)((char *)a1 + v68);
  unint64_t v72 = *(void *)((char *)a1 + v68 + 8);
  *(_OWORD *)((char *)a1 + v68) = *(_OWORD *)((char *)v86 + v68);
  sub_10001CFB8(v71, v72);
  uint64_t v73 = (int *)type metadata accessor for BeaconNamingRecord();
  v87(&v69[v73[5]], &v70[v73[5]], v31);
  v87(&v69[v73[6]], &v70[v73[6]], v31);
  *(void *)&v69[v73[7]] = *(void *)&v70[v73[7]];
  uint64_t v74 = v73[8];
  unint64_t v75 = &v69[v74];
  uint64_t v76 = &v70[v74];
  uint64_t v78 = *(void *)v76;
  uint64_t v77 = *((void *)v76 + 1);
  *(void *)unint64_t v75 = v78;
  *((void *)v75 + 1) = v77;
  swift_bridgeObjectRelease();
  uint64_t v79 = v73[9];
  uint64_t v80 = &v69[v79];
  unint64_t v81 = &v70[v79];
  uint64_t v83 = *(void *)v81;
  uint64_t v82 = *((void *)v81 + 1);
  *(void *)uint64_t v80 = v83;
  *((void *)v80 + 1) = v82;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100FB940C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100FB9420);
}

uint64_t sub_100FB9420(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for OwnedBeaconRecord();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)a1 + *(int *)(a3 + 36);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for BeaconNamingRecord();
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)a1 + *(int *)(a3 + 40);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_100FB954C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100FB9560);
}

void *sub_100FB9560(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *unint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for OwnedBeaconRecord();
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)v5 + *(int *)(a4 + 36);
      uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return (void *)v12(v11, a2, a2, v10);
    }
    else
    {
      uint64_t v13 = type metadata accessor for BeaconNamingRecord();
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)v5 + *(int *)(a4 + 40);
      return (void *)v14(v16, a2, a2, v15);
    }
  }
  return result;
}

uint64_t sub_100FB968C()
{
  uint64_t result = type metadata accessor for OwnedBeaconRecord();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for BeaconNamingRecord();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ShareCreateUseCaseError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100FB9808);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ShareCreateUseCaseError()
{
  return &type metadata for ShareCreateUseCaseError;
}

unint64_t sub_100FB9844()
{
  unint64_t result = qword_101665B88;
  if (!qword_101665B88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101665B88);
  }
  return result;
}

void *sub_100FB98C4(uint64_t a1)
{
  uint64_t v80 = type metadata accessor for TimeBasedKey();
  uint64_t v77 = *(void *)(v80 - 8);
  uint64_t v2 = __chkstk_darwin(v80);
  uint64_t v78 = (void (**)(char *, uint64_t, uint64_t))((char *)&v73 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v2);
  uint64_t v79 = (uint64_t)&v73 - v4;
  uint64_t v5 = type metadata accessor for Date();
  __chkstk_darwin(v5 - 8);
  unint64_t v7 = (unint64_t)&v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = type metadata accessor for DateInterval();
  uint64_t v74 = *(void *)(v81 - 8);
  uint64_t v8 = __chkstk_darwin(v81);
  uint64_t v10 = (char *)&v73 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v73 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v73 - v14;
  if (qword_101636CD8 != -1) {
    goto LABEL_34;
  }
  while (1)
  {
    uint64_t v16 = 0xD000000000000021;
    OS_dispatch_queue.sync<A>(execute:)();
    sub_1010AB674(v84);
    swift_bridgeObjectRelease();
    static Date.trustedNow.getter(v7);
    DateInterval.init(start:duration:)();
    uint64_t v73 = sub_100FBADF8((uint64_t)v15);
    id v17 = [self standardUserDefaults];
    NSString v18 = String._bridgeToObjectiveC()();
    unsigned __int8 v19 = [v17 BOOLForKey:v18];

    if ((v19 & 1) == 0)
    {
      if (a1) {
        break;
      }
    }
    uint64_t v20 = v73;
    uint64_t v10 = (char *)v73[2];
    uint64_t v21 = _swiftEmptyArrayStorage;
    uint64_t v22 = v81;
    if (!v10) {
      goto LABEL_29;
    }
    unint64_t v75 = (void (**)(char *, uint64_t))v15;
    uint64_t v83 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v15 = (char *)v20 + ((*(unsigned __int8 *)(v77 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80));
    uint64_t v77 = *(void *)(v77 + 72);
    uint64_t v78 = (void (**)(char *, uint64_t, uint64_t))(v74 + 16);
    uint64_t v76 = (void (**)(char *, uint64_t))(v74 + 8);
    uint64_t v23 = v79;
    while (2)
    {
      sub_100FBD768((uint64_t)v15, v23, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
      uint64_t v24 = v80;
      a1 = (uint64_t)v13;
      (*v78)(v13, v23 + *(int *)(v80 + 20), v22);
      uint64_t v25 = v23 + *(int *)(v24 + 24);
      uint64_t v27 = *(void *)(v25 + 16);
      unint64_t v26 = *(void *)(v25 + 24);
      sub_1000361E0(v27, v26);
      uint64_t v28 = sub_100A948F8(v27, v26);
      unint64_t v29 = sub_100A90C58(v28, 0);
      unint64_t v7 = v30;
      CCECCryptorRelease();
      sub_10001CFB8(v27, v26);
      unint64_t v31 = v7 >> 62;
      switch(v7 >> 62)
      {
        case 1uLL:
          LODWORD(v32) = HIDWORD(v29) - v29;
          if (!__OFSUB__(HIDWORD(v29), v29))
          {
            uint64_t v32 = (int)v32;
LABEL_13:
            if (v32 != 28)
            {
              if (v31 == 1)
              {
                LODWORD(v31) = HIDWORD(v29) - v29;
                if (!__OFSUB__(HIDWORD(v29), v29))
                {
                  uint64_t v71 = (int)v31;
                  goto LABEL_54;
                }
                __break(1u);
              }
              if (v31 != 2)
              {
                uint64_t v71 = BYTE6(v7);
                goto LABEL_54;
              }
              uint64_t v56 = *(void *)(v29 + 16);
              unint64_t v46 = *(void *)(v29 + 24);
              uint64_t v71 = v46 - v56;
              if (!__OFSUB__(v46, v56))
              {
LABEL_54:
                sub_10013019C();
                uint64_t v16 = swift_allocError();
                *(void *)uint64_t v65 = 28;
                *(void *)(v65 + 8) = v71;
                *(unsigned char *)(v65 + 16) = 0;
                swift_willThrow();
                goto LABEL_55;
              }
              __break(1u);
LABEL_43:
              if (v46 == 1)
              {
                LODWORD(v46) = HIDWORD(v7) - v7;
                if (!__OFSUB__(HIDWORD(v7), v7))
                {
                  uint64_t v72 = (int)v46;
                  goto LABEL_57;
                }
                __break(1u);
              }
              if (v46 == 2)
              {
                uint64_t v58 = *(void *)(v7 + 16);
                uint64_t v57 = *(void *)(v7 + 24);
                uint64_t v72 = v57 - v58;
                if (__OFSUB__(v57, v58))
                {
                  __break(1u);
                  unint64_t v59 = v27;
                  static os_log_type_t.error.getter();
                  if (qword_101636F48 != -1) {
                    swift_once();
                  }
                  sub_10000588C((uint64_t *)&unk_10163AD00);
                  uint64_t v60 = swift_allocObject();
                  *(_OWORD *)(v60 + 16) = xmmword_101342130;
                  uint64_t v84 = v72;
                  swift_errorRetain();
                  sub_10000588C(&qword_101638D40);
                  uint64_t v61 = String.init<A>(describing:)();
                  uint64_t v63 = v62;
                  *(void *)(v60 + 56) = &type metadata for String;
                  *(void *)(v60 + 64) = sub_10000B4CC();
                  *(void *)(v60 + 32) = v61;
                  *(void *)(v60 + 40) = v63;
                  os_log(_:dso:log:_:_:)();
                  swift_bridgeObjectRelease();
                  sub_100130148();
                  uint64_t v16 = swift_allocError();
                  unsigned char *v64 = 0;
                  swift_willThrow();
                  swift_errorRelease();
                  unint64_t v7 = v26;
                  unint64_t v29 = v59;
LABEL_55:
                  uint64_t v66 = v29;
                  unint64_t v67 = v7;
                }
                else
                {
LABEL_57:
                  sub_10013019C();
                  uint64_t v16 = swift_allocError();
                  *(void *)uint64_t v68 = 28;
                  *(void *)(v68 + 8) = v72;
                  *(unsigned char *)(v68 + 16) = 0;
                  swift_willThrow();
                  uint64_t v66 = v7;
                  unint64_t v67 = v29;
                }
                sub_10001CFB8(v66, v67);
                uint64_t v84 = 0;
                unint64_t v85 = 0xE000000000000000;
                _StringGuts.grow(_:)(35);
                v69._object = (void *)0x80000001013F3B70;
                v69._countAndFlagsBits = 0xD000000000000021;
                String.append(_:)(v69);
                uint64_t v82 = v16;
                sub_10000588C(&qword_101638D40);
                _print_unlocked<A, B>(_:_:)();
                while (1)
                {
                  _assertionFailure(_:_:file:line:flags:)();
                  __break(1u);
LABEL_60:
                  if (a1 != -1)
                  {
                    uint64_t v84 = 0;
                    unint64_t v85 = 0xE000000000000000;
                    _StringGuts.grow(_:)(21);
                    v70._countAndFlagsBits = v16 - 14;
                    v70._object = (void *)0x800000010141BBB0;
                    String.append(_:)(v70);
                    uint64_t v83 = (void *)a1;
                    type metadata accessor for BeaconingKeyType(0);
                    _print_unlocked<A, B>(_:_:)();
                  }
                }
              }
              uint64_t v72 = BYTE6(v29);
              goto LABEL_57;
            }
            id v36 = objc_allocWithZone((Class)SPBeaconingKey);
            Class isa = DateInterval._bridgeToObjectiveC()().super.isa;
            Class v38 = Data._bridgeToObjectiveC()().super.isa;
            [v36 initWithDateInterval:isa key:v38];

            sub_10001CFB8(v29, v7);
            uint64_t v22 = v81;
            (*v76)(v13, v81);
            uint64_t v23 = v79;
            sub_100FBD7D0(v79, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
            specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
            specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
            specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
            specialized ContiguousArray._endMutation()();
            v15 += v77;
            if (!--v10)
            {
              uint64_t v21 = v83;
              uint64_t v15 = (char *)v75;
              goto LABEL_29;
            }
            continue;
          }
          __break(1u);
LABEL_31:
          __break(1u);
LABEL_32:
          __break(1u);
LABEL_33:
          __break(1u);
LABEL_34:
          swift_once();
          break;
        case 2uLL:
          uint64_t v34 = *(void *)(v29 + 16);
          uint64_t v33 = *(void *)(v29 + 24);
          BOOL v35 = __OFSUB__(v33, v34);
          uint64_t v32 = v33 - v34;
          if (!v35) {
            goto LABEL_13;
          }
          goto LABEL_31;
        case 3uLL:
          uint64_t v71 = 0;
          goto LABEL_54;
        default:
          uint64_t v32 = BYTE6(v7);
          goto LABEL_13;
      }
      break;
    }
  }
  uint64_t v22 = v81;
  if (a1 != 1) {
    goto LABEL_60;
  }
  unint64_t v39 = v73;
  uint64_t v40 = v73[2];
  uint64_t v21 = _swiftEmptyArrayStorage;
  uint64_t v41 = v78;
  if (v40)
  {
    uint64_t v83 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    a1 = (uint64_t)v39 + ((*(unsigned __int8 *)(v77 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80));
    uint64_t v76 = *(void (***)(char *, uint64_t))(v77 + 72);
    uint64_t v77 = v74 + 16;
    unint64_t v75 = (void (**)(char *, uint64_t))(v74 + 8);
    while (2)
    {
      uint64_t v79 = v40;
      uint64_t v13 = v15;
      sub_100FBD768(a1, (uint64_t)v41, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
      uint64_t v42 = v80;
      (*(void (**)(char *, char *, uint64_t))v77)(v10, (char *)v41 + *(int *)(v80 + 20), v22);
      unint64_t v43 = (char *)v41 + *(int *)(v42 + 24);
      uint64_t v27 = *((void *)v43 + 2);
      unint64_t v26 = *((void *)v43 + 3);
      sub_1000361E0(v27, v26);
      uint64_t v44 = sub_100A948F8(v27, v26);
      unint64_t v7 = sub_100A90C58(v44, 0);
      unint64_t v29 = v45;
      CCECCryptorRelease();
      sub_10001CFB8(v27, v26);
      unint64_t v46 = v29 >> 62;
      switch(v29 >> 62)
      {
        case 1uLL:
          LODWORD(v47) = HIDWORD(v7) - v7;
          if (__OFSUB__(HIDWORD(v7), v7)) {
            goto LABEL_32;
          }
          uint64_t v47 = (int)v47;
LABEL_26:
          if (v47 != 28) {
            goto LABEL_43;
          }
          sub_100435A9C(6, v7, v29, &v84);
          uint64_t v50 = v84;
          unint64_t v51 = v85;
          id v52 = objc_allocWithZone((Class)SPBeaconingKey);
          Class v53 = DateInterval._bridgeToObjectiveC()().super.isa;
          Class v54 = Data._bridgeToObjectiveC()().super.isa;
          [v52 initWithDateInterval:v53 key:v54];

          sub_10001CFB8(v50, v51);
          uint64_t v22 = v81;
          (*v75)(v10, v81);
          uint64_t v41 = v78;
          sub_100FBD7D0((uint64_t)v78, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
          specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized ContiguousArray._endMutation()();
          a1 += (uint64_t)v76;
          uint64_t v40 = v79 - 1;
          if (v79 != 1) {
            continue;
          }
          uint64_t v21 = v83;
          break;
        case 2uLL:
          uint64_t v49 = *(void *)(v7 + 16);
          uint64_t v48 = *(void *)(v7 + 24);
          BOOL v35 = __OFSUB__(v48, v49);
          uint64_t v47 = v48 - v49;
          if (!v35) {
            goto LABEL_26;
          }
          goto LABEL_33;
        case 3uLL:
          uint64_t v72 = 0;
          goto LABEL_57;
        default:
          uint64_t v47 = BYTE6(v29);
          goto LABEL_26;
      }
      break;
    }
  }
LABEL_29:
  (*(void (**)(char *, uint64_t))(v74 + 8))(v15, v22);
  swift_bridgeObjectRelease();
  return v21;
}

uint64_t sub_100FBA5A0@<X0>(uint64_t a1@<X8>)
{
  id v2 = [self standardUserDefaults];
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v2 objectForKey:v3];

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v9, 0, sizeof(v9));
  }
  sub_10001D608((uint64_t)v9, (uint64_t)v10, (uint64_t *)&unk_101644360);
  if (v11)
  {
    uint64_t v5 = type metadata accessor for Date();
    int v6 = swift_dynamicCast();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(a1, v6 ^ 1u, 1, v5);
  }
  else
  {
    sub_10001DAB4((uint64_t)v10, (uint64_t *)&unk_101644360);
    uint64_t v8 = type metadata accessor for Date();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(a1, 1, 1, v8);
  }
}

uint64_t sub_100FBA728(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v5 - 8);
  unint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v23 - v12;
  uint64_t v14 = type metadata accessor for Date();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  id v17 = (char *)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(unsigned char *)(v2 + OBJC_IVAR____TtC12searchpartyd21LocalBeaconingManager_runningMacOSDaemon) = 0;
  sub_10001D074(a1, v2 + OBJC_IVAR____TtC12searchpartyd21LocalBeaconingManager_beaconRecord, &qword_10163B9F0);
  *(void *)(v2 + OBJC_IVAR____TtC12searchpartyd21LocalBeaconingManager_beaconKeyManager) = a2;
  sub_10001D074(a1, (uint64_t)v7, &qword_10163B9F0);
  uint64_t v18 = type metadata accessor for OwnedBeaconRecord();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48))(v7, 1, v18) == 1)
  {
    swift_retain();
    sub_10001DAB4((uint64_t)v7, &qword_10163B9F0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v13, 1, 1, v14);
  }
  else
  {
    unsigned __int8 v19 = &v7[*(int *)(v18 + 32)];
    uint64_t v23 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
    uint64_t v24 = v11;
    v23(v13, v19, v14);
    swift_retain();
    sub_100FBD7D0((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v20 = *(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56);
    v20(v13, 0, 1, v14);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v13, v14);
      uint64_t v21 = (uint64_t)v24;
      v23(v24, v17, v14);
      v20((char *)v21, 0, 1, v14);
      sub_100FBCC48(v21);
      swift_release();
      sub_10001DAB4(a1, &qword_10163B9F0);
      (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
      return v2;
    }
  }
  swift_release();
  sub_10001DAB4(a1, &qword_10163B9F0);
  sub_10001DAB4((uint64_t)v13, (uint64_t *)&unk_10163AC90);
  return v2;
}

uint64_t sub_100FBAABC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D074(v1 + OBJC_IVAR____TtC12searchpartyd21LocalBeaconingManager_beaconRecord, (uint64_t)v5, &qword_10163B9F0);
  uint64_t v9 = type metadata accessor for OwnedBeaconRecord();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v5, 1, v9) == 1)
  {
    sub_10001DAB4((uint64_t)v5, &qword_10163B9F0);
    uint64_t v10 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v8, 1, 1, v10);
  }
  else
  {
    uint64_t v11 = &v5[*(int *)(v9 + 20)];
    uint64_t v12 = type metadata accessor for UUID();
    uint64_t v13 = *(void *)(v12 - 8);
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v8, v11, v12);
    sub_100FBD7D0((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v14 = *(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56);
    v14(v8, 0, 1, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v8, 1, v12) != 1)
    {
      (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(a1, v8, v12);
      return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v14)(a1, 0, 1, v12);
    }
  }
  sub_10001DAB4((uint64_t)v8, &qword_101638CF0);
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v15 = v17[1];
  swift_getKeyPath();
  sub_1010AD23C(v15, a1);
  swift_bridgeObjectRelease();
  return swift_release();
}

void *sub_100FBADF8(uint64_t a1)
{
  uint64_t v83 = a1;
  uint64_t v2 = type metadata accessor for DateInterval();
  uint64_t v85 = *(void *)(v2 - 8);
  uint64_t v86 = v2;
  __chkstk_darwin(v2);
  uint64_t v82 = v3;
  uint64_t v84 = (char *)&v73 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000588C(&qword_10163B9F0);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v90 = (uint64_t)&v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v87 = (char *)&v73 - v7;
  uint64_t v8 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v88 = *(void *)(v8 - 8);
  uint64_t v89 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v80 = v10;
  uint64_t v81 = (uint64_t)&v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v91 = (uint64_t)&v73 - v11;
  uint64_t v12 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  unsigned __int8 v19 = (char *)&v73 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v92 = (char *)&v73 - v20;
  uint64_t v21 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v21 - 8);
  uint64_t v23 = (char *)&v73 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for Date();
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v28 = (char *)&v73 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v26);
  unint64_t v30 = (char *)&v73 - v29;
  sub_100FBA5A0((uint64_t)v23);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24) == 1)
  {
    unint64_t v31 = (uint64_t *)&unk_10163AC90;
    uint64_t v32 = (uint64_t)v23;
LABEL_8:
    sub_10001DAB4(v32, v31);
    static os_log_type_t.error.getter();
    sub_1003444E0();
    unint64_t v45 = (void *)static OS_os_log.default.getter();
    unint64_t v46 = _swiftEmptyArrayStorage;
    os_log(_:dso:log:_:_:)();

    return v46;
  }
  (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v30, v23, v24);
  sub_100FBAABC((uint64_t)v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    (*(void (**)(char *, uint64_t))(v25 + 8))(v30, v24);
    unint64_t v31 = &qword_101638CF0;
    uint64_t v32 = (uint64_t)v14;
    goto LABEL_8;
  }
  uint64_t v33 = v92;
  (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v92, v14, v15);
  uint64_t v34 = v90;
  sub_10001D074(v1 + OBJC_IVAR____TtC12searchpartyd21LocalBeaconingManager_beaconRecord, v90, &qword_10163B9F0);
  (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v19, v33, v15);
  BOOL v35 = *(void (**)(char *, char *, uint64_t))(v25 + 16);
  uint64_t v78 = v30;
  id v36 = v30;
  uint64_t v37 = v34;
  v35(v28, v36, v24);
  uint64_t v79 = v24;
  uint64_t v38 = v88;
  uint64_t v39 = v34;
  uint64_t v40 = v89;
  unint64_t v75 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v88 + 48);
  int v41 = v75(v39, 1, v89);
  uint64_t v76 = v25;
  uint64_t v77 = v16;
  if (v41 == 1)
  {
    uint64_t v42 = v87;
    sub_100FBB8D8((uint64_t)v19, (uint64_t)v28, v87);
    unint64_t v43 = *(void (**)(char *, uint64_t))(v25 + 8);
    v43(v28, v79);
    uint64_t v44 = *(void (**)(char *, uint64_t))(v16 + 8);
    v44(v19, v15);
    sub_10001DAB4(v90, &qword_10163B9F0);
    if (v75((uint64_t)v42, 1, v40) == 1)
    {
      v44(v92, v15);
      v43(v78, v79);
      unint64_t v31 = &qword_10163B9F0;
      uint64_t v32 = (uint64_t)v42;
      goto LABEL_8;
    }
    uint64_t v74 = v44;
    unint64_t v75 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v43;
    uint64_t v73 = v15;
    uint64_t v38 = v88;
  }
  else
  {
    unint64_t v75 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 8);
    ((void (*)(char *, uint64_t))v75)(v28, v79);
    uint64_t v48 = *(void (**)(char *, uint64_t))(v16 + 8);
    uint64_t v73 = v15;
    uint64_t v74 = v48;
    v48(v19, v15);
    uint64_t v49 = v37;
    uint64_t v42 = v87;
    sub_100D214EC(v49, (uint64_t)v87, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v42, 0, 1, v40);
  }
  uint64_t v50 = v91;
  sub_100D214EC((uint64_t)v42, v91, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  uint64_t v51 = v81;
  sub_100FBD768(v50, v81, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  id v52 = v84;
  uint64_t v53 = v85;
  uint64_t v54 = v86;
  (*(void (**)(char *, uint64_t, uint64_t))(v85 + 16))(v84, v83, v86);
  unint64_t v55 = (*(unsigned __int8 *)(v38 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80);
  unint64_t v56 = (v80 + *(unsigned __int8 *)(v53 + 80) + v55) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80);
  uint64_t v57 = v56 + v82;
  uint64_t v58 = swift_allocObject();
  *(void *)(v58 + 16) = v1;
  sub_100D214EC(v51, v58 + v55, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  (*(void (**)(unint64_t, char *, uint64_t))(v53 + 32))(v58 + v56, v52, v54);
  *(unsigned char *)(v58 + v57) = 0;
  swift_retain();
  unsafeFromAsyncTask<A>(_:)();
  swift_release();
  unint64_t v46 = v93;
  uint64_t v59 = v94;
  uint64_t v60 = v73;
  switch(v95)
  {
    case 1:
      uint64_t v66 = v91;
      goto LABEL_17;
    case 2:
      sub_1002F6A08((uint64_t)v93, v94, 2u);
      uint64_t v67 = v91;
      goto LABEL_22;
    case 3:
      static os_log_type_t.default.getter();
      if (qword_101637250 != -1) {
        swift_once();
      }
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v68 = swift_allocObject();
      *(_OWORD *)(v68 + 16) = xmmword_101342130;
      uint64_t v69 = v91;
      uint64_t v70 = UUID.uuidString.getter();
      uint64_t v72 = v71;
      *(void *)(v68 + 56) = &type metadata for String;
      *(void *)(v68 + 64) = sub_10000B4CC();
      *(void *)(v68 + 32) = v70;
      *(void *)(v68 + 40) = v72;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      uint64_t v67 = v69;
LABEL_22:
      sub_100FBD7D0(v67, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      v74(v92, v60);
      ((void (*)(char *, uint64_t))v75)(v78, v79);
      unint64_t v46 = _swiftEmptyArrayStorage;
      break;
    default:
      swift_bridgeObjectRetain();
      static os_log_type_t.default.getter();
      if (qword_101637250 != -1) {
        swift_once();
      }
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v61 = swift_allocObject();
      *(_OWORD *)(v61 + 16) = xmmword_101342130;
      uint64_t v62 = v91;
      uint64_t v63 = UUID.uuidString.getter();
      uint64_t v65 = v64;
      *(void *)(v61 + 56) = &type metadata for String;
      *(void *)(v61 + 64) = sub_10000B4CC();
      *(void *)(v61 + 32) = v63;
      *(void *)(v61 + 40) = v65;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      sub_1002F6A08((uint64_t)v46, v59, 0);
      uint64_t v66 = v62;
LABEL_17:
      sub_100FBD7D0(v66, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      v74(v92, v60);
      ((void (*)(char *, uint64_t))v75)(v78, v79);
      break;
  }
  return v46;
}

uint64_t sub_100FBB8D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  uint64_t v37 = a2;
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v35 = v5;
  uint64_t v33 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v36 = v7;
  uint64_t v8 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = v10;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for StableIdentifier();
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v20 = (uint64_t *)((char *)&v32 - v19);
  *uint64_t v20 = 0x4944552D454B4146;
  v20[1] = 0xE900000000000044;
  swift_storeEnumTagMultiPayload();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  sub_100FBD768((uint64_t)v20, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v10, 1, 1, v11);
  uint64_t v21 = v33;
  (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v7, v37, v5);
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t v37 = __DataStorage.init(length:)() | 0x4000000000000000;
  swift_allocObject();
  uint64_t v32 = __DataStorage.init(length:)() | 0x4000000000000000;
  swift_allocObject();
  uint64_t v22 = __DataStorage.init(length:)() | 0x4000000000000000;
  sub_100FBD7D0((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
  *(_OWORD *)a3 = xmmword_101348180;
  uint64_t v23 = (int *)type metadata accessor for OwnedBeaconRecord();
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(&a3[v23[5]], v14, v11);
  sub_100D214EC((uint64_t)v18, (uint64_t)&a3[v23[6]], (uint64_t (*)(void))type metadata accessor for StableIdentifier);
  sub_10001D608((uint64_t)v34, (uint64_t)&a3[v23[7]], &qword_101638CF0);
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(&a3[v23[8]], v36, v35);
  uint64_t v24 = &a3[v23[9]];
  uint64_t v25 = v37;
  *(void *)uint64_t v24 = 0x2000000000;
  *((void *)v24 + 1) = v25;
  *(_OWORD *)&a3[v23[10]] = xmmword_101347BB0;
  *(_OWORD *)&a3[v23[11]] = xmmword_101347BB0;
  uint64_t v26 = &a3[v23[12]];
  uint64_t v27 = v32;
  *(void *)uint64_t v26 = 0x5500000000;
  *((void *)v26 + 1) = v27;
  uint64_t v28 = &a3[v23[13]];
  *(void *)uint64_t v28 = 0x3900000000;
  *((void *)v28 + 1) = v22;
  uint64_t v29 = &a3[v23[14]];
  *(void *)uint64_t v29 = 65;
  *((void *)v29 + 1) = 0xE100000000000000;
  unint64_t v30 = &a3[v23[15]];
  *(void *)unint64_t v30 = 16706;
  *((void *)v30 + 1) = 0xE200000000000000;
  *(void *)&a3[v23[16]] = -1;
  *(void *)&a3[v23[17]] = -1;
  a3[v23[18]] = 3;
  a3[v23[19]] = 0;
  a3[v23[20]] = 0;
  return (*(uint64_t (**)(char *, void, uint64_t, int *))(*((void *)v23 - 1) + 56))(a3, 0, 1, v23);
}

uint64_t sub_100FBBD7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[9] = a3;
  v4[10] = a4;
  v4[7] = a1;
  v4[8] = a2;
  uint64_t v5 = type metadata accessor for DateInterval();
  v4[11] = v5;
  v4[12] = *(void *)(v5 - 8);
  v4[13] = swift_task_alloc();
  sub_10000588C(&qword_10163F7B0);
  v4[14] = swift_task_alloc();
  return _swift_task_switch(sub_100FBBE70, 0, 0);
}

uint64_t sub_100FBBE70()
{
  uint64_t v1 = v0[9];
  v0[15] = *(void *)(v0[8] + OBJC_IVAR____TtC12searchpartyd21LocalBeaconingManager_beaconKeyManager);
  uint64_t v2 = type metadata accessor for OwnedBeaconRecord();
  v0[16] = v2;
  v0[5] = v2;
  v0[6] = sub_100FBD720(&qword_101638DD0, (void (*)(uint64_t))type metadata accessor for OwnedBeaconRecord);
  uint64_t v3 = sub_10001D958(v0 + 2);
  v0[17] = (uint64_t)v3;
  sub_100FBD768(v1, (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[18] = (uint64_t)v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100FBBF9C;
  uint64_t v5 = v0[14];
  return sub_1006DDD60(v5, (uint64_t)(v0 + 2));
}

uint64_t sub_100FBBF9C()
{
  *(void *)(*(void *)v1 + 152) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100FBC0B0;
  }
  else {
    uint64_t v2 = sub_100FBC140;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100FBC0B0()
{
  uint64_t v1 = *(void **)(v0 + 56);
  swift_errorRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  *uint64_t v1 = 0;
  v1[1] = 0;
  *(unsigned char *)(*(void *)(v0 + 56) + 16) = 3;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100FBC140()
{
  uint64_t v1 = v0[17];
  uint64_t v3 = v0[13];
  uint64_t v2 = (uint64_t *)v0[14];
  uint64_t v4 = v0[11];
  uint64_t v5 = v0[12];
  uint64_t v6 = v0[10];
  sub_10111198C();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v6, v4);
  uint64_t v7 = sub_100FBCDD8(v1, v3, v2);
  uint64_t v9 = v8;
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  sub_10001DAB4((uint64_t)v2, &qword_10163F7B0);
  uint64_t v10 = (void *)swift_task_alloc();
  v0[20] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_100FBC280;
  return sub_1006D8A68((uint64_t)(v0 + 2), v7, v9, 0, 0, 0);
}

uint64_t sub_100FBC280(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v8 = *v4;
  *(void *)(*v4 + 168) = v3;
  swift_task_dealloc();
  if (v3)
  {
    uint64_t v9 = sub_100FBC44C;
  }
  else
  {
    *(unsigned char *)(v8 + 192) = a3;
    *(void *)(v8 + 176) = a2;
    *(void *)(v8 + 184) = a1;
    uint64_t v9 = sub_100FBC3BC;
  }
  return _swift_task_switch(v9, 0, 0);
}

uint64_t sub_100FBC3BC()
{
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v2 = *(void *)(v0 + 184);
  uint64_t v3 = *(void **)(v0 + 56);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  *uint64_t v3 = v2;
  v3[1] = v1;
  *(unsigned char *)(*(void *)(v0 + 56) + 16) = *(unsigned char *)(v0 + 192);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
  return v4();
}

uint64_t sub_100FBC44C()
{
  uint64_t v1 = *(void **)(v0 + 56);
  swift_errorRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  *uint64_t v1 = 0;
  v1[1] = 0;
  *(unsigned char *)(*(void *)(v0 + 56) + 16) = 3;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100FBC4DC()
{
  sub_10001DAB4(v0 + OBJC_IVAR____TtC12searchpartyd21LocalBeaconingManager_beaconRecord, &qword_10163B9F0);
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t sub_100FBC558()
{
  return type metadata accessor for LocalBeaconingManager();
}

uint64_t type metadata accessor for LocalBeaconingManager()
{
  uint64_t result = qword_101665BD0;
  if (!qword_101665BD0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100FBC5AC()
{
  sub_100FBC654();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

void sub_100FBC654()
{
  if (!qword_101665BE0)
  {
    type metadata accessor for OwnedBeaconRecord();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_101665BE0);
    }
  }
}

uint64_t sub_100FBC6AC()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v24 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v22 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v2 = type metadata accessor for DateInterval();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v21 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v20 = *(void *)(v3 + 64);
  swift_release();
  uint64_t v23 = (v24 + 24) & ~v24;
  uint64_t v4 = v0 + v23;
  sub_10001CFB8(*(void *)(v0 + v23), *(void *)(v0 + v23 + 8));
  uint64_t v5 = v0 + v23 + v1[5];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  uint64_t v9 = v0 + v23 + v1[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v8(v9, v6);
      uint64_t v19 = v2;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v8(v9, v6);
      uint64_t v19 = v2;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v2 = v19;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v10 = v4 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6)) {
    v8(v10, v6);
  }
  uint64_t v11 = v4 + v1[8];
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  sub_10001CFB8(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v13 = (uint64_t *)(v4 + v1[10]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_10001CFB8(*v13, v14);
  }
  uint64_t v15 = (uint64_t *)(v4 + v1[11]);
  unint64_t v16 = v15[1];
  if (v16 >> 60 != 15) {
    sub_10001CFB8(*v15, v16);
  }
  uint64_t v17 = (v23 + v22 + v21) & ~v21;
  sub_10001CFB8(*(void *)(v4 + v1[12]), *(void *)(v4 + v1[12] + 8));
  sub_10001CFB8(*(void *)(v4 + v1[13]), *(void *)(v4 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v0 + v17, v2);

  return _swift_deallocObject(v0, v20 + v17 + 1, v24 | v21 | 7);
}

uint64_t sub_100FBCACC(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(void *)(type metadata accessor for DateInterval() - 8);
  unint64_t v9 = (v6 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v1 + 16);
  uint64_t v11 = v1 + v9;
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v12;
  *uint64_t v12 = v3;
  v12[1] = sub_10001D2E4;
  return sub_100FBBD7C(a1, v10, v1 + v6, v11);
}

uint64_t sub_100FBCC48(uint64_t a1)
{
  uint64_t v2 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v5 = [self standardUserDefaults];
  sub_10001D074(a1, (uint64_t)v4, (uint64_t *)&unk_10163AC90);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v4, 1, v6) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v4, v6);
  }
  NSString v9 = String._bridgeToObjectiveC()();
  [v5 setObject:isa forKey:v9];

  swift_unknownObjectRelease();
  return sub_10001DAB4(a1, (uint64_t *)&unk_10163AC90);
}

uint64_t sub_100FBCDD8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v69 = a2;
  uint64_t v74 = (char *)a1;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)v60 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)v60 - v9;
  unint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v64 = (char *)v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v68 = (char *)v60 - v16;
  __chkstk_darwin(v15);
  p_ivar_base_size = (uint32_t *)((char *)v60 - v17);
  uint64_t v19 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v20 = v19 - 8;
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)v60 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100FBD768((uint64_t)v74, (uint64_t)v22, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  uint64_t v23 = &v22[*(int *)(v20 + 28)];
  uint64_t v71 = v12;
  uint64_t v72 = (char *)v11;
  uint64_t v70 = *(void (**)(uint32_t *, char *, unint64_t))(v12 + 16);
  v70(p_ivar_base_size, v23, v11);
  uint64_t v24 = *(int *)(v20 + 40);
  uint64_t v66 = v22;
  uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
  uint64_t v73 = v4;
  v25(v10, &v22[v24], v4);
  uint64_t v26 = *a3;
  uint64_t v27 = (uint64_t)a3 + *(int *)(sub_10000588C(&qword_10163F7B0) + 36);
  uint64_t v28 = (uint64_t)v10;
  uint64_t v74 = (char *)p_ivar_base_size;
  uint64_t v29 = sub_1008B5B84((uint64_t)p_ivar_base_size, (uint64_t)v10, v27, 0);
  if ((v29 | v26) < 0)
  {
    __break(1u);
    goto LABEL_36;
  }
  uint64_t v62 = v29;
  uint64_t v63 = v26;
  unint64_t v30 = v29 - v26;
  DateInterval.start.getter();
  uint64_t v31 = (uint64_t)v74;
  unint64_t v32 = sub_1008B5B84((uint64_t)v74, v28, (uint64_t)v8, 0);
  uint64_t v33 = *(void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v34 = v73;
  v33(v8, v73);
  DateInterval.end.getter();
  uint64_t v35 = v30;
  uint64_t v36 = sub_1008B5B84(v31, v28, (uint64_t)v8, 0);
  uint64_t v37 = v5 + 8;
  unint64_t v38 = v36;
  uint64_t v69 = v37;
  uint64_t v65 = (void (*)(uint64_t, uint64_t))v33;
  v33(v8, v34);
  p_ivar_base_size = &AnalyticsEvent.ivar_base_size;
  uint64_t v67 = v30;
  if ((v30 & 0x8000000000000000) == 0 && v30 >= v32)
  {
    if (qword_101636DC0 != -1) {
      goto LABEL_38;
    }
    while (1)
    {
      uint64_t v39 = type metadata accessor for Logger();
      sub_100010324(v39, (uint64_t)qword_10170E588);
      uint64_t v40 = v64;
      int v41 = v72;
      v70((uint32_t *)v64, v74, (unint64_t)v72);
      uint64_t v42 = Logger.logObject.getter();
      os_log_type_t v43 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v42, v43))
      {
        uint64_t v44 = swift_slowAlloc();
        uint64_t v61 = v28;
        uint64_t v45 = v44;
        uint64_t v46 = swift_slowAlloc();
        v60[1] = v46;
        *(_DWORD *)uint64_t v45 = 141558787;
        uint64_t v75 = 1752392040;
        uint64_t v76 = v46;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v45 + 12) = 2081;
        v60[0] = v45 + 14;
        sub_100FBD720((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v75 = sub_1008FA0F0(v47, v48, &v76);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, char *))(v71 + 8))(v40, v41);
        *(_WORD *)(v45 + 22) = 2048;
        uint64_t v75 = v32;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v45 + 32) = 2048;
        uint64_t v35 = v67;
        uint64_t v75 = v67;
        p_ivar_base_size = (_DWORD *)(&AnalyticsEvent + 8);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v42, v43, "        Buckets clamped for beacon %{private,mask.hash}s,starting secondary index %llu <= factor %lld -- clamping to 1.", (uint8_t *)v45, 0x2Au);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v28 = v61;
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(char *, char *))(v71 + 8))(v40, v41);

        uint64_t v35 = v67;
      }
      unint64_t v11 = 1;
      uint64_t v8 = v68;
      if (v62 == v63)
      {
        uint64_t v10 = v72;
      }
      else
      {
        uint64_t v10 = v72;
        if (v38 < v35)
        {
          if (v38 <= 1) {
            uint64_t v50 = 1;
          }
          else {
            uint64_t v50 = v38;
          }
          uint64_t v64 = (char *)v50;
          unint64_t v11 = 1;
          goto LABEL_29;
        }
      }
LABEL_23:
      if ((v38 & 0x8000000000000000) != 0) {
        goto LABEL_40;
      }
      unint64_t v49 = v38 - v35;
      if (__OFSUB__(v38, v35)) {
        goto LABEL_42;
      }
      if ((v49 & 0x8000000000000000) != 0) {
        goto LABEL_43;
      }
      if (v11 > v49) {
        unint64_t v49 = v11;
      }
LABEL_28:
      uint64_t v64 = (char *)v49;
LABEL_29:
      if (*((void *)p_ivar_base_size + 440) != -1) {
LABEL_36:
      }
        swift_once();
      uint64_t v51 = type metadata accessor for Logger();
      sub_100010324(v51, (uint64_t)qword_10170E588);
      v70((uint32_t *)v8, v74, (unint64_t)v10);
      unint64_t v38 = Logger.logObject.getter();
      os_log_type_t v52 = static os_log_type_t.default.getter();
      if (os_log_type_enabled((os_log_t)v38, v52))
      {
        uint64_t v53 = v8;
        uint64_t v54 = swift_slowAlloc();
        uint64_t v55 = swift_slowAlloc();
        uint64_t v61 = v28;
        *(_DWORD *)uint64_t v54 = 141559043;
        uint64_t v75 = 1752392040;
        uint64_t v76 = v55;
        p_ivar_base_size = (uint32_t *)&v76;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v54 + 12) = 2081;
        sub_100FBD720((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v56 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v75 = sub_1008FA0F0(v56, v57, &v76);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v58 = *(void (**)(char *, char *))(v71 + 8);
        v58(v53, v10);
        *(_WORD *)(v54 + 22) = 2048;
        uint64_t v75 = v11;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v54 + 32) = 2048;
        unint64_t v32 = (unint64_t)v64;
        uint64_t v75 = (uint64_t)v64;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v54 + 42) = 2048;
        uint64_t v10 = v72;
        uint64_t v75 = v67;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)v38, v52, "        Buckets for beacon %{private,mask.hash}s,secondary index %llu - %llu (factor %lld).", (uint8_t *)v54, 0x34u);
        swift_arrayDestroy();
        uint64_t v28 = v61;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        uint64_t v58 = *(void (**)(char *, char *))(v71 + 8);
        v58(v8, v10);

        unint64_t v32 = (unint64_t)v64;
      }
      v65(v28, v73);
      v58(v74, v10);
      if (v32 >= v11)
      {
        sub_100FBD7D0((uint64_t)v66, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        return v11;
      }
      __break(1u);
LABEL_38:
      swift_once();
    }
  }
  uint64_t v8 = v68;
  if ((v32 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
    goto LABEL_43;
  }
  unint64_t v11 = v32 - v30;
  if (__OFSUB__(v32, v30)) {
    goto LABEL_41;
  }
  if ((v11 & 0x8000000000000000) == 0)
  {
    uint64_t v10 = v72;
    if (v35 >= 1 && v38 < v35)
    {
      if (v11 <= v38) {
        unint64_t v49 = v38;
      }
      else {
        unint64_t v49 = v32 - v35;
      }
      goto LABEL_28;
    }
    goto LABEL_23;
  }
LABEL_43:
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100FBD720(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100FBD768(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100FBD7D0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

ValueMetadata *type metadata accessor for StandaloneBeaconStore()
{
  return &type metadata for StandaloneBeaconStore;
}

uint64_t sub_100FBD844(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Connection.TransactionMode();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_1009FCE64();
  if (v8)
  {
    uint64_t v9 = __chkstk_darwin(v8);
    v12[-4] = a2;
    v12[-3] = a1;
    v12[-2] = v9;
    (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for Connection.TransactionMode.deferred(_:), v4);
    Connection.transaction(_:block:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    return swift_release();
  }
  else
  {
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v11 = 2;
    *(unsigned char *)(v11 + 4) = 1;
    return swift_willThrow();
  }
}

uint64_t sub_100FBD9F8(uint64_t a1)
{
  v19[1] = a1;
  uint64_t v1 = type metadata accessor for Connection.TransactionMode();
  uint64_t v21 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)v19 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000588C(&qword_10163CE68);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Table();
  uint64_t v20 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_1009FCE64();
  if (v11)
  {
    uint64_t v12 = v11;
    v19[0] = v1;
    if (qword_101636D48 != -1) {
      swift_once();
    }
    uint64_t v13 = sub_10000588C(&qword_10163CE70);
    sub_100010324(v13, (uint64_t)qword_10170E460);
    type metadata accessor for UUID();
    == infix<A>(_:_:)();
    QueryType.filter(_:)();
    uint64_t v14 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    __chkstk_darwin(v14);
    v19[-2] = v12;
    v19[-1] = v10;
    uint64_t v15 = v21;
    uint64_t v16 = v19[0];
    (*(void (**)(char *, void, void))(v21 + 104))(v3, enum case for Connection.TransactionMode.deferred(_:), v19[0]);
    Connection.transaction(_:block:)();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v3, v16);
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v10, v8);
  }
  else
  {
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v18 = 2;
    *(unsigned char *)(v18 + 4) = 1;
    return swift_willThrow();
  }
}

void *sub_100FBDD80(uint64_t a1)
{
  uint64_t v2 = (void *)(a1 + OBJC_IVAR____TtC12searchpartyd24StandaloneBeaconDatabase_standaloneBeacon);
  uint64_t v3 = type metadata accessor for Table();
  v9[3] = v3;
  v9[4] = (uint64_t)&protocol witness table for Table;
  uint64_t v4 = sub_10001D958(v9);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v3 - 8) + 16))(v4, v2, v3);
  uint64_t v5 = sub_10018DD44();
  if (!v5)
  {
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v7 = 2;
    *(unsigned char *)(v7 + 4) = 1;
    swift_willThrow();
    goto LABEL_5;
  }
  uint64_t v2 = (void *)v5;
  uint64_t v6 = Connection.prepare(_:)();
  swift_release();
  if (v1)
  {
LABEL_5:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v9);
    return v2;
  }
  sub_10000588C((uint64_t *)&unk_101665C80);
  uint64_t v2 = (void *)swift_allocObject();
  v2[2] = v6;
  v2[3] = sub_100FBF240;
  v2[4] = 0;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v9);
  return v2;
}

uint64_t sub_100FBDECC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v16[0] = a2;
  v17[6] = a1;
  uint64_t v2 = sub_10000588C(&qword_10163CE68);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Table();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101636D48 != -1) {
    swift_once();
  }
  uint64_t v10 = sub_10000588C(&qword_10163CE70);
  sub_100010324(v10, (uint64_t)qword_10170E460);
  type metadata accessor for UUID();
  == infix<A>(_:_:)();
  QueryType.filter(_:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  v17[3] = v6;
  v17[4] = (uint64_t)&protocol witness table for Table;
  uint64_t v11 = sub_10001D958(v17);
  (*(void (**)(uint64_t *, char *, uint64_t))(v7 + 16))(v11, v9, v6);
  if (!sub_10018DD44())
  {
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v13 = 2;
    *(unsigned char *)(v13 + 4) = 1;
    swift_willThrow();
    goto LABEL_7;
  }
  uint64_t v12 = v16[1];
  Connection.prepare(_:)();
  if (v12)
  {
    swift_release();
LABEL_7:
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v17);
  }
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v17);
  swift_retain();
  uint64_t v15 = dispatch thunk of _AnySequenceBox._makeIterator()();
  swift_release_n();
  v16[4] = v15;
  v16[5] = (uint64_t)sub_100FBF240;
  v16[6] = 0;
  sub_100BD81B0(v16[0]);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

void *sub_100FBE200(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v23 = a2;
  uint64_t v5 = sub_10000588C(&qword_10163CE68);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v22[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Table();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v22[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101636D60 != -1) {
    swift_once();
  }
  uint64_t v13 = sub_10000588C(&qword_101640BE8);
  sub_100010324(v13, (uint64_t)qword_10170E4A8);
  v22[0] = a1;
  v22[1] = v23;
  == infix<A>(_:_:)();
  QueryType.filter(_:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  void v22[3] = v9;
  v22[4] = (uint64_t)&protocol witness table for Table;
  uint64_t v14 = sub_10001D958(v22);
  (*(void (**)(uint64_t *, char *, uint64_t))(v10 + 16))(v14, v12, v9);
  uint64_t v15 = sub_10018DD44();
  if (v15)
  {
    a3 = (void *)v15;
    uint64_t v16 = v21;
    uint64_t v17 = Connection.prepare(_:)();
    if (!v16)
    {
      uint64_t v19 = v17;
      swift_release();
      sub_10000588C((uint64_t *)&unk_101665C80);
      a3 = (void *)swift_allocObject();
      a3[2] = v19;
      a3[3] = sub_100FBF240;
      a3[4] = 0;
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v22);
      return a3;
    }
    swift_release();
  }
  else
  {
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v18 = 2;
    *(unsigned char *)(v18 + 4) = 1;
    swift_willThrow();
  }
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v22);
  return a3;
}

void *sub_100FBE520(uint64_t a1, uint64_t a2)
{
  return sub_100FBE590(a1, a2, &qword_101636D50, (uint64_t)qword_10170E478, (uint64_t)sub_10086C13C);
}

void *sub_100FBE558(uint64_t a1, uint64_t a2)
{
  return sub_100FBE590(a1, a2, &qword_101636D58, (uint64_t)qword_10170E490, (uint64_t)sub_10086C1E0);
}

void *sub_100FBE590(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  v28[0] = a5;
  uint64_t v29 = sub_10000588C(&qword_10163CE68);
  uint64_t v8 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v10 = (char *)v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Table();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v30[6] = a2;
  if (*a3 != -1) {
    swift_once();
  }
  uint64_t v15 = sub_10000588C(&qword_10163CF58);
  sub_100010324(v15, a4);
  uint64_t v16 = MACAddress.data.getter();
  unint64_t v18 = v17;
  v30[0] = v16;
  v30[1] = v17;
  sub_100FC01B4();
  == infix<A>(_:_:)();
  sub_10001CFB8(v16, v18);
  QueryType.filter(_:)();
  uint64_t v20 = *(void (**)(char *, uint64_t))(v8 + 8);
  uint64_t v19 = (void *)(v8 + 8);
  v20(v10, v29);
  v30[3] = v11;
  v30[4] = (uint64_t)&protocol witness table for Table;
  uint64_t v21 = sub_10001D958(v30);
  (*(void (**)(uint64_t *, char *, uint64_t))(v12 + 16))(v21, v14, v11);
  uint64_t v22 = sub_10018DD44();
  if (v22)
  {
    uint64_t v19 = (void *)v22;
    uint64_t v23 = v28[1];
    uint64_t v24 = Connection.prepare(_:)();
    if (!v23)
    {
      uint64_t v26 = v24;
      swift_release();
      sub_10000588C((uint64_t *)&unk_101665C80);
      uint64_t v19 = (void *)swift_allocObject();
      void v19[2] = v26;
      void v19[3] = sub_100FBF240;
      v19[4] = 0;
      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v30);
      return v19;
    }
    swift_release();
  }
  else
  {
    sub_1001A149C();
    swift_allocError();
    *(_DWORD *)uint64_t v25 = 2;
    *(unsigned char *)(v25 + 4) = 1;
    swift_willThrow();
  }
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v30);
  return v19;
}

uint64_t sub_100FBE8C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v56 = a3;
  uint64_t v49 = a1;
  uint64_t v4 = type metadata accessor for Endianness();
  __chkstk_darwin(v4 - 8);
  uint64_t v46 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_10163CF28);
  uint64_t v47 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v44 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = type metadata accessor for Setter();
  uint64_t v8 = *(void *)(v54 - 8);
  __chkstk_darwin(v54);
  uint64_t v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = type metadata accessor for Insert();
  uint64_t v53 = *(void *)(v55 - 8);
  __chkstk_darwin(v55);
  uint64_t v51 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101636D48 != -1) {
    swift_once();
  }
  uint64_t v12 = sub_10000588C(&qword_10163CE70);
  sub_100010324(v12, (uint64_t)qword_10170E460);
  type metadata accessor for UUID();
  uint64_t v50 = v10;
  <- infix<A>(_:_:)();
  sub_10000588C(&qword_10163CF10);
  uint64_t v52 = v8;
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_1013618C0;
  uint64_t v48 = v13;
  if (qword_101636D50 != -1) {
    swift_once();
  }
  uint64_t v14 = sub_10000588C(&qword_10163CF58);
  sub_100010324(v14, (uint64_t)qword_10170E478);
  uint64_t v15 = type metadata accessor for StandaloneBeacon();
  uint64_t v16 = MACAddress.data.getter();
  unint64_t v18 = v17;
  *(void *)&long long v57 = v16;
  *((void *)&v57 + 1) = v17;
  <- infix<A>(_:_:)();
  sub_10001CFB8(v16, v18);
  if (qword_101636D58 != -1) {
    swift_once();
  }
  uint64_t v45 = v14;
  sub_100010324(v14, (uint64_t)qword_10170E490);
  uint64_t v19 = MACAddress.data.getter();
  unint64_t v21 = v20;
  *(void *)&long long v57 = v19;
  *((void *)&v57 + 1) = v20;
  <- infix<A>(_:_:)();
  sub_10001CFB8(v19, v21);
  if (qword_101636D60 != -1) {
    swift_once();
  }
  uint64_t v22 = sub_10000588C(&qword_101640BE8);
  sub_100010324(v22, (uint64_t)qword_10170E4A8);
  uint64_t v23 = (uint64_t *)(a2 + *(int *)(v15 + 28));
  uint64_t v25 = *v23;
  uint64_t v24 = v23[1];
  *(void *)&long long v57 = v25;
  *((void *)&v57 + 1) = v24;
  <- infix<A>(_:_:)();
  if (qword_101636D68 != -1) {
    swift_once();
  }
  uint64_t v26 = sub_10000588C(&qword_10163CE98);
  sub_100010324(v26, (uint64_t)qword_10170E4C0);
  type metadata accessor for Date();
  <- infix<A>(_:_:)();
  if (qword_101636D70 != -1) {
    swift_once();
  }
  sub_100010324(v6, (uint64_t)qword_10170E4D8);
  uint64_t v43 = v15;
  uint64_t v27 = a2 + *(int *)(v15 + 36);
  uint64_t v28 = sub_1002AA484(*(void *)v27, *(void *)(v27 + 8));
  if (v28 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
  }
  else if (v28 <= 0x7FFFFFFF)
  {
    uint64_t v42 = a2;
    LODWORD(v57) = v28;
    sub_1001A1720();
    <- infix<A>(_:_:)();
    if (qword_101636D78 == -1) {
      goto LABEL_16;
    }
    goto LABEL_28;
  }
  __break(1u);
LABEL_28:
  swift_once();
LABEL_16:
  uint64_t v29 = v6;
  uint64_t v30 = sub_100010324(v6, (uint64_t)qword_10170E4F0);
  uint64_t v31 = v47;
  unint64_t v32 = v44;
  (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v44, v30, v29);
  sub_1002AA5D4(*(void *)v27, *(void *)(v27 + 8));
  static Endianness.current.getter();
  sub_100091A80();
  FixedWidthInteger.init(data:ofEndianness:)();
  if (BYTE4(v57)) {
    int v33 = 0;
  }
  else {
    int v33 = v57;
  }
  LODWORD(v57) = v33;
  <- infix<A>(_:_:)();
  (*(void (**)(char *, uint64_t))(v31 + 8))(v32, v29);
  if (qword_101636D80 != -1) {
    swift_once();
  }
  uint64_t v34 = v45;
  sub_100010324(v45, (uint64_t)qword_10170E508);
  uint64_t v35 = v42;
  uint64_t v36 = v43;
  uint64_t v37 = v42 + *(int *)(v43 + 40);
  long long v57 = *(_OWORD *)(v37 + 16);
  <- infix<A>(_:_:)();
  unint64_t v38 = v50;
  if (qword_101636D88 != -1) {
    swift_once();
  }
  sub_100010324(v34, (uint64_t)qword_10170E520);
  long long v57 = *(_OWORD *)(v37 + 32);
  <- infix<A>(_:_:)();
  if (qword_101636D90 != -1) {
    swift_once();
  }
  sub_100010324(v34, (uint64_t)qword_10170E538);
  long long v57 = *(_OWORD *)(v35 + *(int *)(v36 + 44));
  <- infix<A>(_:_:)();
  type metadata accessor for Table();
  uint64_t v39 = v51;
  QueryType.insert(_:_:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v52 + 8))(v38, v54);
  Connection.run(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v39, v55);
}

uint64_t sub_100FBF144()
{
  uint64_t v0 = type metadata accessor for Delete();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Table();
  QueryType.delete()();
  Connection.run(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
}

double sub_100FBF240@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Row();
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t))(v7 + 16))(v6, a1);
  return sub_100FBF30C((uint64_t)v6, a2);
}

double sub_100FBF30C@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_1016477E0);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v70 = (char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v68 = (char *)&v67 - v9;
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v67 - v10;
  uint64_t v12 = type metadata accessor for MACAddress();
  uint64_t v81 = *(void *)(v12 - 8);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v69 = (char *)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  unint64_t v17 = (char *)&v67 - v16;
  uint64_t v18 = __chkstk_darwin(v15);
  unint64_t v20 = (char *)&v67 - v19;
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v67 - v21;
  if (qword_101636D80 != -1) {
    swift_once();
  }
  uint64_t v80 = sub_10000588C(&qword_10163CF58);
  sub_100010324(v80, (uint64_t)qword_10170E508);
  Row.subscript.getter();
  unint64_t v77 = *((void *)&v82 + 1);
  uint64_t v23 = v82;
  switch(*((void *)&v82 + 1) >> 62)
  {
    case 1:
      LODWORD(v24) = DWORD1(v82) - v82;
      if (__OFSUB__(DWORD1(v82), v82))
      {
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
        goto LABEL_64;
      }
      uint64_t v24 = (int)v24;
LABEL_8:
      if (v24 != 85)
      {
LABEL_64:
        sub_10001CFB8(v23, v77);
        __break(1u);
LABEL_65:
        sub_10001CFB8(v78, v28);
        __break(1u);
LABEL_66:
        swift_bridgeObjectRelease();
        __break(1u);
LABEL_67:
        __break(1u);
        goto LABEL_68;
      }
      if (qword_101636D88 != -1) {
        swift_once();
      }
      sub_100010324(v80, (uint64_t)qword_10170E520);
      Row.subscript.getter();
      unint64_t v28 = *((void *)&v82 + 1);
      uint64_t v78 = v82;
      switch(*((void *)&v82 + 1) >> 62)
      {
        case 1:
          LODWORD(v29) = HIDWORD(v78) - v78;
          if (__OFSUB__(HIDWORD(v78), v78)) {
            goto LABEL_58;
          }
          uint64_t v29 = (int)v29;
LABEL_16:
          if (v29 != 32) {
            goto LABEL_65;
          }
          unint64_t v72 = *((void *)&v82 + 1);
          uint64_t v75 = v23;
          uint64_t v76 = v17;
          uint64_t v79 = v22;
          if (qword_101636D70 != -1) {
            swift_once();
          }
          uint64_t v32 = sub_10000588C(&qword_10163CF28);
          sub_100010324(v32, (uint64_t)qword_10170E4D8);
          sub_1001A1720();
          Row.subscript.getter();
          uint64_t v33 = (int)v82;
          if (qword_101636D78 != -1) {
            swift_once();
          }
          sub_100010324(v32, (uint64_t)qword_10170E4F0);
          Row.subscript.getter();
          uint64_t v23 = (int)v82;
          if (qword_101636D48 != -1) {
            swift_once();
          }
          uint64_t v34 = sub_10000588C(&qword_10163CE70);
          sub_100010324(v34, (uint64_t)qword_10170E460);
          type metadata accessor for UUID();
          Row.subscript.getter();
          if (qword_101636D50 != -1) {
            swift_once();
          }
          break;
        case 2:
          uint64_t v31 = *(void *)(v78 + 16);
          uint64_t v30 = *(void *)(v78 + 24);
          BOOL v27 = __OFSUB__(v30, v31);
          uint64_t v29 = v30 - v31;
          if (!v27) {
            goto LABEL_16;
          }
          goto LABEL_59;
        case 3:
          goto LABEL_65;
        default:
          uint64_t v29 = BYTE14(v82);
          goto LABEL_16;
      }
      sub_100010324(v80, (uint64_t)qword_10170E478);
      Row.subscript.getter();
      unint64_t v36 = *((void *)&v82 + 1);
      uint64_t v35 = v82;
      uint64_t v73 = v23;
      uint64_t v74 = v33;
      switch(*((void *)&v82 + 1) >> 62)
      {
        case 1:
          LODWORD(v37) = DWORD1(v82) - v82;
          if (__OFSUB__(DWORD1(v82), v82)) {
            goto LABEL_60;
          }
          uint64_t v37 = (int)v37;
LABEL_30:
          if (v37 == 6)
          {
            sub_1000361E0(v82, *((unint64_t *)&v82 + 1));
            MACAddress.init(data:type:)();
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v81 + 48))(v11, 1, v12) != 1)
            {
              sub_10001CFB8(v35, v36);
              uint64_t v40 = v79;
              uint64_t v71 = *(void (**)(char *, char *, uint64_t))(v81 + 32);
              v71(v79, v11, v12);
              goto LABEL_34;
            }
LABEL_68:
            __break(1u);
            __break(1u);
            goto LABEL_69;
          }
LABEL_33:
          MACAddress.init(dataRepresentation:)();
          uint64_t v40 = v79;
          uint64_t v71 = *(void (**)(char *, char *, uint64_t))(v81 + 32);
          v71(v79, v20, v12);
LABEL_34:
          uint64_t v41 = (int *)type metadata accessor for StandaloneBeacon();
          uint64_t v23 = *(void *)(v81 + 16);
          ((void (*)(uint64_t, char *, uint64_t))v23)(a2 + v41[5], v40, v12);
          if (qword_101636D58 != -1) {
            swift_once();
          }
          sub_100010324(v80, (uint64_t)qword_10170E490);
          Row.subscript.getter();
          unint64_t v43 = *((void *)&v82 + 1);
          uint64_t v42 = v82;
          switch(*((void *)&v82 + 1) >> 62)
          {
            case 1:
              LODWORD(v44) = DWORD1(v82) - v82;
              if (__OFSUB__(DWORD1(v82), v82)) {
                goto LABEL_62;
              }
              uint64_t v44 = (int)v44;
LABEL_41:
              if (v44 == 6)
              {
                sub_1000361E0(v82, *((unint64_t *)&v82 + 1));
                uint64_t v47 = v68;
                MACAddress.init(data:type:)();
                if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v81 + 48))(v47, 1, v12) == 1)
                {
LABEL_69:
                  __break(1u);
                  __break(1u);
                  JUMPOUT(0x100FC0174);
                }
                sub_10001CFB8(v42, v43);
                uint64_t v48 = v76;
              }
              else
              {
LABEL_44:
                uint64_t v47 = v69;
                MACAddress.init(dataRepresentation:)();
                uint64_t v48 = v76;
              }
              v71(v48, v47, v12);
              ((void (*)(uint64_t, char *, uint64_t))v23)(a2 + v41[6], v48, v12);
              if (qword_101636D60 != -1) {
                swift_once();
              }
              uint64_t v49 = sub_10000588C(&qword_101640BE8);
              sub_100010324(v49, (uint64_t)qword_10170E4A8);
              Row.subscript.getter();
              uint64_t v50 = *((void *)&v82 + 1);
              uint64_t v51 = HIBYTE(*((void *)&v82 + 1)) & 0xFLL;
              if ((*((void *)&v82 + 1) & 0x2000000000000000) == 0) {
                uint64_t v51 = v82 & 0xFFFFFFFFFFFFLL;
              }
              uint64_t v52 = v75;
              uint64_t v53 = v78;
              if (!v51) {
                goto LABEL_66;
              }
              uint64_t v54 = (void *)(a2 + v41[7]);
              *uint64_t v54 = v82;
              v54[1] = v50;
              if (qword_101636D68 != -1) {
                swift_once();
              }
              uint64_t v55 = sub_10000588C(&qword_10163CE98);
              sub_100010324(v55, (uint64_t)qword_10170E4C0);
              type metadata accessor for Date();
              Row.subscript.getter();
              uint64_t v56 = sub_1002AAF08(v74, v73);
              if (v57 >> 60 == 15) {
                goto LABEL_67;
              }
              uint64_t v58 = (uint64_t *)(a2 + v41[9]);
              *uint64_t v58 = v56;
              v58[1] = v57;
              unint64_t v59 = v77;
              uint64_t v60 = PrivateKey.publicKey.getter(v52, v77);
              uint64_t v61 = (uint64_t *)(a2 + v41[10]);
              *uint64_t v61 = v60;
              v61[1] = v62;
              uint64_t v61[2] = v52;
              v61[3] = v59;
              unint64_t v63 = v72;
              v61[4] = v53;
              v61[5] = v63;
              sub_1000361E0(v52, v59);
              sub_1000361E0(v53, v63);
              if (qword_101636D90 != -1) {
                swift_once();
              }
              sub_100010324(v80, (uint64_t)qword_10170E538);
              Row.subscript.getter();
              sub_10001CFB8(v53, v63);
              sub_10001CFB8(v52, v59);
              uint64_t v64 = type metadata accessor for Row();
              (*(void (**)(uint64_t, uint64_t))(*(void *)(v64 - 8) + 8))(a1, v64);
              uint64_t v65 = *(void (**)(char *, uint64_t))(v81 + 8);
              v65(v48, v12);
              v65(v79, v12);
              double result = *(double *)&v82;
              *(_OWORD *)(a2 + v41[11]) = v82;
              return result;
            case 2:
              uint64_t v46 = *(void *)(v82 + 16);
              uint64_t v45 = *(void *)(v82 + 24);
              BOOL v27 = __OFSUB__(v45, v46);
              uint64_t v44 = v45 - v46;
              if (!v27) {
                goto LABEL_41;
              }
              goto LABEL_63;
            case 3:
              goto LABEL_44;
            default:
              uint64_t v44 = BYTE14(v82);
              goto LABEL_41;
          }
        case 2:
          uint64_t v39 = *(void *)(v82 + 16);
          uint64_t v38 = *(void *)(v82 + 24);
          BOOL v27 = __OFSUB__(v38, v39);
          uint64_t v37 = v38 - v39;
          if (!v27) {
            goto LABEL_30;
          }
          goto LABEL_61;
        case 3:
          goto LABEL_33;
        default:
          uint64_t v37 = BYTE14(v82);
          goto LABEL_30;
      }
    case 2:
      uint64_t v26 = *(void *)(v82 + 16);
      uint64_t v25 = *(void *)(v82 + 24);
      BOOL v27 = __OFSUB__(v25, v26);
      uint64_t v24 = v25 - v26;
      if (!v27) {
        goto LABEL_8;
      }
      goto LABEL_57;
    case 3:
      goto LABEL_64;
    default:
      uint64_t v24 = BYTE6(v77);
      goto LABEL_8;
  }
}

unint64_t sub_100FC01B4()
{
  unint64_t result = qword_10163CFE8;
  if (!qword_10163CFE8)
  {
    type metadata accessor for Blob();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163CFE8);
  }
  return result;
}

uint64_t sub_100FC020C()
{
  return sub_100FBE8C0(v0[2], v0[3], v0[4]);
}

uint64_t sub_100FC022C()
{
  id v1 = [self sharedInstance];
  unsigned int v2 = [v1 isInternalBuild];

  if (v2)
  {
    id v3 = [self standardUserDefaults];
    NSString v4 = String._bridgeToObjectiveC()();
    unsigned int v5 = [v3 BOOLForKey:v4];

    if (v5)
    {
      static os_log_type_t.default.getter();
      sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
      id v6 = (id)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();
      uint64_t v7 = 1;
LABEL_12:

      return v7;
    }
  }
  [v0 coordinate];
  double v9 = v8;
  [v0 coordinate];
  double v11 = v10;
  if (qword_101636A88 != -1) {
    swift_once();
  }
  if (objc_msgSend((id)qword_101642640, "containsCoordinate:", v9, v11))
  {
    uint64_t v12 = (void *)qword_101642648;
    if (qword_101642648)
    {
      id v6 = (id)qword_101642648;
    }
    else
    {
      uint64_t v13 = (void *)sub_10036D0D4();
      uint64_t v14 = (void *)qword_101642648;
      qword_101642648 = (uint64_t)v13;
      id v6 = v13;

      uint64_t v12 = 0;
    }
    id v15 = v12;
    uint64_t v7 = (uint64_t)[v6 containsCoordinate:v9, v11];
    goto LABEL_12;
  }
  return 0;
}

uint64_t sub_100FC042C()
{
  id v1 = [self sharedInstance];
  unsigned int v2 = [v1 isInternalBuild];

  if (v2)
  {
    id v3 = [self standardUserDefaults];
    NSString v4 = String._bridgeToObjectiveC()();
    unsigned int v5 = [v3 BOOLForKey:v4];

    if (v5)
    {
      static os_log_type_t.default.getter();
      sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
      id v6 = (id)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();
      uint64_t v7 = 1;
LABEL_12:

      return v7;
    }
  }
  [v0 latitude];
  double v9 = v8;
  [v0 longitude];
  double v11 = v10;
  if (qword_101636A88 != -1) {
    swift_once();
  }
  if (objc_msgSend((id)qword_101642640, "containsCoordinate:", v9, v11))
  {
    uint64_t v12 = (void *)qword_101642648;
    if (qword_101642648)
    {
      id v6 = (id)qword_101642648;
    }
    else
    {
      uint64_t v13 = (void *)sub_10036D0D4();
      uint64_t v14 = (void *)qword_101642648;
      qword_101642648 = (uint64_t)v13;
      id v6 = v13;

      uint64_t v12 = 0;
    }
    id v15 = v12;
    uint64_t v7 = [(uint64_t)[v6 containsCoordinate:v9, v11];
    goto LABEL_12;
  }
  return 0;
}

uint64_t sub_100FC0630()
{
  id v1 = [self sharedInstance];
  unsigned int v2 = [v1 isInternalBuild];

  if (v2)
  {
    id v3 = [self standardUserDefaults];
    NSString v4 = String._bridgeToObjectiveC()();
    unsigned int v5 = [v3 BOOLForKey:v4];

    if (v5)
    {
      static os_log_type_t.default.getter();
      sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
      id v6 = (id)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();
      uint64_t v7 = 1;
LABEL_12:

      return v7;
    }
  }
  uint64_t v8 = type metadata accessor for BeaconEstimatedLocation();
  double v9 = *(double *)(v0 + *(int *)(v8 + 28));
  double v10 = *(double *)(v0 + *(int *)(v8 + 32));
  if (qword_101636A88 != -1) {
    swift_once();
  }
  if (objc_msgSend((id)qword_101642640, "containsCoordinate:", v9, v10))
  {
    double v11 = (void *)qword_101642648;
    if (qword_101642648)
    {
      id v6 = (id)qword_101642648;
    }
    else
    {
      uint64_t v12 = (void *)sub_10036D0D4();
      uint64_t v13 = (void *)qword_101642648;
      qword_101642648 = (uint64_t)v12;
      id v6 = v12;

      double v11 = 0;
    }
    id v14 = v11;
    uint64_t v7 = [(uint64_t)[v6 containsCoordinate:v9, v10]];
    goto LABEL_12;
  }
  return 0;
}

uint64_t sub_100FC0820()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_101665C90);
  uint64_t v1 = sub_100010324(v0, (uint64_t)qword_101665C90);
  if (qword_101637338 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100010324(v0, (uint64_t)qword_101665CA8);
  id v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100FC08E8(uint64_t a1, char a2)
{
  uint64_t v4 = v2;
  *(unsigned char *)(v3 + 64) = a2;
  *(void *)(v3 + 24) = a1;
  *(void *)(v3 + 32) = v2;
  type metadata accessor for OS_dispatch_queue.Attributes();
  *(void *)(v3 + 40) = swift_task_alloc();
  type metadata accessor for DispatchQoS();
  *(void *)(v3 + 48) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = swift_task_alloc();
  *(void *)(v3 + 56) = v7;
  swift_defaultActor_initialize();
  *(void *)(v2 + 112) = _swiftEmptyDictionarySingleton;
  sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v7, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v5);
  static DispatchQoS.unspecified.getter();
  *(void *)(v3 + 16) = _swiftEmptyArrayStorage;
  sub_100FC38E0((unint64_t *)&qword_101638CC0, 255, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000588C((uint64_t *)&unk_1016376F0);
  sub_1000058D0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)(v2 + 136) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(_DWORD *)(v2 + 144) = 0;
  uint64_t v8 = self;
  NSString v9 = String._bridgeToObjectiveC()();
  LODWORD(v8) = [v8 authorizationStatusForBundlePath:v9];

  *(_DWORD *)(v4 + 144) = v8;
  id v10 = [objc_allocWithZone((Class)type metadata accessor for LocationManagerDelegateTrampoline()) init];
  *(void *)(v4 + 128) = v10;
  double v11 = *(void **)(v4 + 136);
  id v12 = objc_allocWithZone((Class)CLLocationManager);
  id v13 = v10;
  id v14 = v11;
  NSString v15 = String._bridgeToObjectiveC()();
  id v16 = [v12 initWithEffectiveBundlePath:v15 delegate:v13 onQueue:v14];

  if (v16)
  {
    *(void *)(v4 + 120) = v16;
    unint64_t v17 = sub_100FC0C34;
    uint64_t v18 = v4;
    uint64_t v19 = 0;
  }
  else
  {
    __break(1u);
  }
  return _swift_task_switch(v17, v18, v19);
}

uint64_t sub_100FC0C34()
{
  if ((*(unsigned char *)(v0 + 64) & 1) == 0)
  {
    double v1 = *(double *)(v0 + 24);
    uint64_t v2 = *(void **)(*(void *)(v0 + 32) + 120);
    [v2 setDesiredAccuracy:v1];
    [v2 setDistanceFilter:v1 * 0.5];
  }
  swift_weakAssign();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v4 = *(void *)(v0 + 32);
  return v3(v4);
}

uint64_t sub_100FC0D0C()
{
  v1[8] = v0;
  uint64_t v2 = type metadata accessor for Logger();
  v1[9] = v2;
  v1[10] = *(void *)(v2 - 8);
  v1[11] = swift_task_alloc();
  v1[12] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Duration.UnitsFormatStyle.Unit();
  v1[13] = v3;
  v1[14] = *(void *)(v3 - 8);
  v1[15] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Date();
  v1[16] = v4;
  v1[17] = *(void *)(v4 - 8);
  v1[18] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for ContinuousClock.Instant();
  v1[19] = v5;
  v1[20] = *(void *)(v5 - 8);
  v1[21] = swift_task_alloc();
  v1[22] = swift_task_alloc();
  v1[23] = swift_task_alloc();
  v1[24] = swift_task_alloc();
  v1[25] = swift_task_alloc();
  v1[26] = swift_task_alloc();
  v1[27] = swift_task_alloc();
  v1[28] = swift_task_alloc();
  v1[29] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ContinuousClock();
  v1[30] = v6;
  v1[31] = *(void *)(v6 - 8);
  v1[32] = swift_task_alloc();
  return _swift_task_switch(sub_100FC0FB0, v0, 0);
}

uint64_t sub_100FC0FB0()
{
  uint64_t v54 = v0;
  if (static SystemInfo.underTest.getter())
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    double v1 = (uint64_t (*)(void))v0[1];
    return v1(0);
  }
  else
  {
    uint64_t v3 = v0[8];
    ContinuousClock.init()();
    ContinuousClock.now.getter();
    if ((*(_DWORD *)(v3 + 144) - 3) > 1)
    {
      ContinuousClock.now.getter();
      if (qword_101637330 != -1) {
        swift_once();
      }
      uint64_t v10 = v0[29];
      uint64_t v12 = v0[22];
      uint64_t v11 = v0[23];
      uint64_t v14 = v0[20];
      uint64_t v13 = v0[21];
      uint64_t v15 = v0[19];
      uint64_t v17 = v0[10];
      uint64_t v16 = v0[11];
      uint64_t v18 = v0[9];
      uint64_t v19 = sub_100010324(v18, (uint64_t)qword_101665C90);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v16, v19, v18);
      unint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16);
      v20(v12, v10, v15);
      v20(v13, v11, v15);
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.default.getter();
      BOOL v23 = os_log_type_enabled(v21, v22);
      uint64_t v24 = v0[21];
      uint64_t v26 = v0[19];
      uint64_t v25 = v0[20];
      if (v23)
      {
        os_log_type_t type = v22;
        uint64_t v27 = v0[14];
        uint64_t v28 = v0[15];
        uint64_t v47 = v0[13];
        uint64_t v29 = v0[22];
        uint64_t v50 = v0[10];
        uint64_t v51 = v0[9];
        uint64_t v52 = v0[11];
        log = v21;
        uint64_t v30 = (uint8_t *)swift_slowAlloc();
        uint64_t v53 = swift_slowAlloc();
        *(_DWORD *)uint64_t v30 = 136446210;
        static Duration.UnitsFormatStyle.Unit.milliseconds.getter();
        sub_100FC38E0(&qword_101653DE0, 255, (void (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant);
        uint64_t v46 = v24;
        uint64_t v31 = static Duration.description<A>(_:_:units:)();
        unint64_t v33 = v32;
        (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v28, v47);
        v0[2] = sub_1008FA0F0(v31, v33, &v53);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v34 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
        v34(v29, v26);
        v34(v46, v26);
        _os_log_impl((void *)&_mh_execute_header, log, type, "No location (unauthorized) in: %{public}s", v30, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v52, v51);
      }
      else
      {
        uint64_t v36 = v0[10];
        uint64_t v35 = v0[11];
        uint64_t v37 = v0[9];
        uint64_t v34 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
        uint64_t v38 = v0[21];
        v34(v0[22], v0[19]);
        v34(v38, v26);

        (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v35, v37);
      }
      uint64_t v40 = v0[31];
      uint64_t v39 = v0[32];
      uint64_t v42 = v0[29];
      uint64_t v41 = v0[30];
      uint64_t v43 = v0[23];
      uint64_t v44 = v0[19];
      sub_100FC3884();
      swift_allocError();
      swift_willThrow();
      v34(v43, v44);
      v34(v42, v44);
      (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v39, v41);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v45 = (uint64_t (*)(void))v0[1];
      return v45();
    }
    else
    {
      uint64_t v5 = v0[8];
      uint64_t v6 = sub_100FC38E0((unint64_t *)&unk_101665E60, v4, (void (*)(uint64_t))type metadata accessor for OneShotLocationWrapper);
      uint64_t v7 = (void *)swift_task_alloc();
      v0[33] = v7;
      uint64_t v8 = sub_10000588C(&qword_101650758);
      *uint64_t v7 = v0;
      v7[1] = sub_100FC1664;
      uint64_t v9 = v0[8];
      return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 3, v5, v6, 0xD000000000000011, 0x800000010141BDC0, sub_100FC38D8, v9, v8);
    }
  }
}

uint64_t sub_100FC1664()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 272) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 64);
  if (v0) {
    uint64_t v4 = sub_100FC20F0;
  }
  else {
    uint64_t v4 = sub_100FC1790;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100FC1790()
{
  uint64_t v94 = v0;
  double v1 = (void *)v0[3];
  ContinuousClock.now.getter();
  uint64_t v92 = v1;
  if (v1)
  {
    uint64_t v2 = qword_101637330;
    id v3 = v1;
    if (v2 != -1) {
      swift_once();
    }
    uint64_t v5 = v0[28];
    uint64_t v4 = v0[29];
    uint64_t v7 = v0[26];
    uint64_t v6 = v0[27];
    uint64_t v8 = v0[19];
    uint64_t v9 = v0[20];
    sub_100010324(v0[9], (uint64_t)qword_101665C90);
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
    v10(v6, v4, v8);
    v10(v7, v5, v8);
    id v11 = v3;
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t type = static os_log_type_t.default.getter();
    BOOL v13 = os_log_type_enabled(v12, type);
    uint64_t v14 = v0[31];
    uint64_t v15 = v0[32];
    uint64_t v17 = v0[29];
    uint64_t v16 = v0[30];
    uint64_t v85 = v0[28];
    uint64_t v87 = v0[27];
    uint64_t v89 = v0[26];
    uint64_t v19 = v0[19];
    uint64_t v18 = v0[20];
    if (v13)
    {
      log = v12;
      uint64_t v81 = v0[29];
      uint64_t v21 = v0[17];
      uint64_t v20 = v0[18];
      uint64_t v67 = v0[16];
      uint64_t v70 = v0[15];
      uint64_t v72 = v0[14];
      uint64_t v73 = v0[13];
      uint64_t v79 = v0[32];
      uint64_t v22 = swift_slowAlloc();
      uint64_t v93 = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 134218498;
      uint64_t v77 = v16;
      [v11 horizontalAccuracy];
      v0[5] = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      *(_WORD *)(v22 + 12) = 2082;
      id v24 = [v11 timestamp];
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      sub_100FC38E0((unint64_t *)&qword_101638DA0, 255, (void (*)(uint64_t))&type metadata accessor for Date);
      uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v91 = v14;
      unint64_t v27 = v26;
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v67);
      v0[6] = sub_1008FA0F0(v25, v27, &v93);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();

      *(_WORD *)(v22 + 22) = 2082;
      static Duration.UnitsFormatStyle.Unit.milliseconds.getter();
      sub_100FC38E0(&qword_101653DE0, 255, (void (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant);
      uint64_t v68 = v11;
      uint64_t v28 = v19;
      uint64_t v29 = static Duration.description<A>(_:_:units:)();
      unint64_t v31 = v30;
      (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v70, v73);
      v0[7] = sub_1008FA0F0(v29, v31, &v93);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      unint64_t v32 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
      v32(v87, v28);
      v32(v89, v28);
      _os_log_impl((void *)&_mh_execute_header, log, type, "Obtained %fm / %{public}s location in: %{public}s", (uint8_t *)v22, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v32(v85, v28);
      v32(v81, v28);
      (*(void (**)(uint64_t, uint64_t))(v91 + 8))(v79, v77);
    }
    else
    {

      uint64_t v60 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
      v60(v87, v19);
      v60(v89, v19);

      v60(v85, v19);
      v60(v17, v19);
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v15, v16);
    }
  }
  else
  {
    if (qword_101637330 != -1) {
      swift_once();
    }
    uint64_t v33 = v0[28];
    uint64_t v34 = v0[29];
    uint64_t v36 = v0[24];
    uint64_t v35 = v0[25];
    uint64_t v37 = v0[19];
    uint64_t v38 = v0[20];
    uint64_t v39 = v0[12];
    uint64_t v40 = v0[9];
    uint64_t v41 = v0[10];
    uint64_t v42 = sub_100010324(v40, (uint64_t)qword_101665C90);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 16))(v39, v42, v40);
    uint64_t v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 16);
    v43(v35, v34, v37);
    v43(v36, v33, v37);
    uint64_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.default.getter();
    BOOL v46 = os_log_type_enabled(v44, v45);
    uint64_t v47 = v0[31];
    *(void *)os_log_type_t typea = v0[32];
    uint64_t v90 = v0[30];
    uint64_t v86 = v0[28];
    uint64_t v88 = v0[29];
    uint64_t v49 = v0[24];
    uint64_t v48 = v0[25];
    uint64_t v50 = v0[19];
    uint64_t v51 = v0[20];
    if (v46)
    {
      uint64_t v74 = v44;
      uint64_t v82 = v0[31];
      uint64_t v53 = v0[14];
      uint64_t v52 = v0[15];
      uint64_t v71 = v0[13];
      os_log_t loga = (os_log_t)v0[10];
      uint64_t v78 = v0[9];
      uint64_t v80 = v0[12];
      uint64_t v54 = (uint8_t *)swift_slowAlloc();
      uint64_t v93 = swift_slowAlloc();
      *(_DWORD *)uint64_t v54 = 136446210;
      static Duration.UnitsFormatStyle.Unit.milliseconds.getter();
      sub_100FC38E0(&qword_101653DE0, 255, (void (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant);
      uint64_t v69 = v48;
      uint64_t v55 = v49;
      uint64_t v56 = static Duration.description<A>(_:_:units:)();
      unint64_t v58 = v57;
      (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v52, v71);
      v0[4] = sub_1008FA0F0(v56, v58, &v93);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      unint64_t v59 = *(void (**)(uint64_t, uint64_t))(v51 + 8);
      v59(v69, v50);
      v59(v55, v50);
      _os_log_impl((void *)&_mh_execute_header, v74, v45, "No location in: %{public}s", v54, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      ((void (*)(uint64_t, uint64_t))loga[1].isa)(v80, v78);
      v59(v86, v50);
      v59(v88, v50);
      (*(void (**)(os_log_type_t *, uint64_t))(v82 + 8))(*(os_log_type_t **)typea, v90);
    }
    else
    {
      uint64_t v61 = v0[12];
      uint64_t v62 = v0[9];
      uint64_t v63 = v0[10];

      uint64_t v64 = *(void (**)(uint64_t, uint64_t))(v51 + 8);
      v64(v48, v50);
      v64(v49, v50);
      (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v61, v62);
      v64(v86, v50);
      v64(v88, v50);
      (*(void (**)(os_log_type_t *, uint64_t))(v47 + 8))(*(os_log_type_t **)typea, v90);
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v65 = (uint64_t (*)(void *))v0[1];
  return v65(v92);
}

uint64_t sub_100FC20F0()
{
  uint64_t v2 = v0[31];
  uint64_t v1 = v0[32];
  uint64_t v3 = v0[30];
  (*(void (**)(void, void))(v0[20] + 8))(v0[29], v0[19]);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

id sub_100FC2244(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_10163CB80);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = &v14[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for UUID();
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = &v14[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  swift_beginAccess();
  uint64_t v10 = *(void *)(*(void *)(a2 + 112) + 16);
  UUID.init()();
  uint64_t v11 = sub_10000588C(&qword_101660970);
  uint64_t v12 = *(void *)(v11 - 8);
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v12 + 16))(v6, a1, v11);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v12 + 56))(v6, 0, 1, v11);
  swift_beginAccess();
  sub_1001606F0((uint64_t)v6, (uint64_t)v9);
  id result = (id)swift_endAccess();
  if (!v10) {
    return [*(id *)(a2 + 120) requestLocation];
  }
  return result;
}

uint64_t sub_100FC23F8()
{
  swift_bridgeObjectRelease();

  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for OneShotLocationWrapper()
{
  return self;
}

uint64_t sub_100FC246C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v7;
  *uint64_t v7 = v5;
  v7[1] = sub_100033F68;
  return sub_100FC2508(a5);
}

uint64_t sub_100FC2508(uint64_t a1)
{
  v2[6] = a1;
  v2[7] = v1;
  uint64_t v3 = sub_10000588C(&qword_101660970);
  v2[8] = v3;
  v2[9] = *(void *)(v3 - 8);
  v2[10] = swift_task_alloc();
  return _swift_task_switch(sub_100FC25CC, v1, 0);
}

uint64_t sub_100FC25CC()
{
  unint64_t v1 = v0[6];
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    id v2 = (id)result;
    if (result) {
      goto LABEL_3;
    }
  }
  else
  {
    id v2 = *(id *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v2)
    {
LABEL_3:
      if ((v1 & 0xC000000000000001) != 0)
      {
LABEL_37:
        id v2 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if (!*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return result;
        }
        id v2 = *(id *)(v0[6] + 32);
      }
      swift_bridgeObjectRelease();
      id v4 = v2;
      char v5 = sub_100FC022C();

      if (v5)
      {

        id v2 = 0;
      }
      goto LABEL_10;
    }
  }
  swift_bridgeObjectRelease();
LABEL_10:
  uint64_t v6 = v0[9];
  uint64_t v7 = v0[7];
  swift_beginAccess();
  uint64_t v8 = *(void *)(v7 + 112);
  *(void *)(v7 + 112) = _swiftEmptyDictionarySingleton;
  uint64_t v22 = v8 + 64;
  uint64_t v9 = -1;
  uint64_t v10 = -1 << *(unsigned char *)(v8 + 32);
  if (-v10 < 64) {
    uint64_t v9 = ~(-1 << -(char)v10);
  }
  unint64_t v11 = v9 & *(void *)(v8 + 64);
  int64_t v23 = (unint64_t)(63 - v10) >> 6;
  swift_bridgeObjectRetain();
  int64_t v12 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v14 = v13 | (v12 << 6);
      goto LABEL_14;
    }
    int64_t v18 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }
    if (v18 >= v23) {
      goto LABEL_32;
    }
    unint64_t v19 = *(void *)(v22 + 8 * v18);
    ++v12;
    if (!v19)
    {
      int64_t v12 = v18 + 1;
      if (v18 + 1 >= v23) {
        goto LABEL_32;
      }
      unint64_t v19 = *(void *)(v22 + 8 * v12);
      if (!v19)
      {
        int64_t v12 = v18 + 2;
        if (v18 + 2 >= v23) {
          goto LABEL_32;
        }
        unint64_t v19 = *(void *)(v22 + 8 * v12);
        if (!v19)
        {
          int64_t v12 = v18 + 3;
          if (v18 + 3 >= v23) {
            goto LABEL_32;
          }
          unint64_t v19 = *(void *)(v22 + 8 * v12);
          if (!v19) {
            break;
          }
        }
      }
    }
LABEL_31:
    unint64_t v11 = (v19 - 1) & v19;
    unint64_t v14 = __clz(__rbit64(v19)) + (v12 << 6);
LABEL_14:
    uint64_t v15 = v0[10];
    uint64_t v16 = v0[8];
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16))(v15, *(void *)(v8 + 56) + *(void *)(v6 + 72) * v14, v16);
    v0[5] = v2;
    id v17 = v2;
    CheckedContinuation.resume(returning:)();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v15, v16);
  }
  int64_t v20 = v18 + 4;
  if (v20 < v23)
  {
    unint64_t v19 = *(void *)(v22 + 8 * v20);
    if (!v19)
    {
      while (1)
      {
        int64_t v12 = v20 + 1;
        if (__OFADD__(v20, 1)) {
          goto LABEL_36;
        }
        if (v12 >= v23) {
          goto LABEL_32;
        }
        unint64_t v19 = *(void *)(v22 + 8 * v12);
        ++v20;
        if (v19) {
          goto LABEL_31;
        }
      }
    }
    int64_t v12 = v20;
    goto LABEL_31;
  }
LABEL_32:

  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc();
  uint64_t v21 = (uint64_t (*)(void))v0[1];
  return v21();
}

uint64_t sub_100FC2A90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v5 + 16) = v7;
  *uint64_t v7 = v5;
  v7[1] = sub_100033F68;
  return sub_100FC2B2C(a5);
}

uint64_t sub_100FC2B2C(uint64_t a1)
{
  v2[7] = a1;
  v2[8] = v1;
  uint64_t v3 = sub_10000588C(&qword_101660970);
  v2[9] = v3;
  v2[10] = *(void *)(v3 - 8);
  v2[11] = swift_task_alloc();
  return _swift_task_switch(sub_100FC2BF0, v1, 0);
}

uint64_t sub_100FC2BF0()
{
  uint64_t v1 = v0[8];
  swift_beginAccess();
  uint64_t v25 = *(void *)(v1 + 112);
  *(void *)(v1 + 112) = _swiftEmptyDictionarySingleton;
  if (qword_101637330 != -1) {
LABEL_32:
  }
    swift_once();
  uint64_t v2 = type metadata accessor for Logger();
  sub_100010324(v2, (uint64_t)qword_101665C90);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 138543362;
    swift_errorRetain();
    uint64_t v7 = _swift_stdlib_bridgeErrorToNSError();
    v0[6] = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v6 = v7;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "CLLocationManager error: %{public}@", v5, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v8 = v0[10];

  uint64_t v24 = v25 + 64;
  uint64_t v9 = -1;
  uint64_t v10 = -1 << *(unsigned char *)(v25 + 32);
  if (-v10 < 64) {
    uint64_t v9 = ~(-1 << -(char)v10);
  }
  unint64_t v11 = v9 & *(void *)(v25 + 64);
  int64_t v12 = (unint64_t)(63 - v10) >> 6;
  swift_bridgeObjectRetain();
  int64_t v13 = 0;
  while (1)
  {
    if (v11)
    {
      unint64_t v14 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v15 = v14 | (v13 << 6);
      goto LABEL_9;
    }
    int64_t v19 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
    if (v19 >= v12) {
      goto LABEL_27;
    }
    unint64_t v20 = *(void *)(v24 + 8 * v19);
    ++v13;
    if (!v20)
    {
      int64_t v13 = v19 + 1;
      if (v19 + 1 >= v12) {
        goto LABEL_27;
      }
      unint64_t v20 = *(void *)(v24 + 8 * v13);
      if (!v20)
      {
        int64_t v13 = v19 + 2;
        if (v19 + 2 >= v12) {
          goto LABEL_27;
        }
        unint64_t v20 = *(void *)(v24 + 8 * v13);
        if (!v20)
        {
          int64_t v13 = v19 + 3;
          if (v19 + 3 >= v12) {
            goto LABEL_27;
          }
          unint64_t v20 = *(void *)(v24 + 8 * v13);
          if (!v20) {
            break;
          }
        }
      }
    }
LABEL_26:
    unint64_t v11 = (v20 - 1) & v20;
    unint64_t v15 = __clz(__rbit64(v20)) + (v13 << 6);
LABEL_9:
    uint64_t v16 = v0[11];
    uint64_t v17 = v0[9];
    uint64_t v18 = v0[7];
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v8 + 16))(v16, *(void *)(v25 + 56) + *(void *)(v8 + 72) * v15, v17);
    v0[5] = v18;
    swift_errorRetain();
    CheckedContinuation.resume(throwing:)();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v16, v17);
  }
  int64_t v21 = v19 + 4;
  if (v21 < v12)
  {
    unint64_t v20 = *(void *)(v24 + 8 * v21);
    if (!v20)
    {
      while (1)
      {
        int64_t v13 = v21 + 1;
        if (__OFADD__(v21, 1)) {
          goto LABEL_31;
        }
        if (v13 >= v12) {
          goto LABEL_27;
        }
        unint64_t v20 = *(void *)(v24 + 8 * v13);
        ++v21;
        if (v20) {
          goto LABEL_26;
        }
      }
    }
    int64_t v13 = v21;
    goto LABEL_26;
  }
LABEL_27:
  swift_release();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  uint64_t v22 = (uint64_t (*)(void))v0[1];
  return v22();
}

uint64_t sub_100FC311C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a4;
  return _swift_task_switch(sub_100FC313C, a4, 0);
}

uint64_t sub_100FC313C()
{
  sub_100FC319C();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

void sub_100FC319C()
{
  *(_DWORD *)(v0 + 144) = [*(id *)(v0 + 120) authorizationStatus];
  if (qword_101637330 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_101665C90);
  swift_retain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 67109120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Authorization status: %d", v4, 8u);
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
}

uint64_t type metadata accessor for LocationManagerDelegateTrampoline()
{
  return self;
}

uint64_t sub_100FC34C8()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100FC3508()
{
  uint64_t v2 = *(void *)(v0 + 32);
  os_log_type_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *os_log_type_t v3 = v1;
  v3[1] = sub_100033F68;
  v3[2] = v2;
  return _swift_task_switch(sub_100FC313C, v2, 0);
}

uint64_t sub_100FC35B0()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_101665CA8);
  sub_100010324(v0, (uint64_t)qword_101665CA8);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100FC3634()
{
  return sub_100FC3748((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_100FC364C()
{
  uint64_t v2 = *(void *)(v0 + 40);
  os_log_type_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *os_log_type_t v3 = v1;
  v3[1] = sub_10001D2E4;
  uint64_t v4 = (void *)swift_task_alloc();
  v3[2] = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_100033F68;
  return sub_100FC2B2C(v2);
}

uint64_t sub_100FC3730()
{
  return sub_100FC3748((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_100FC3748(void (*a1)(void))
{
  swift_unknownObjectRelease();
  swift_release();
  a1(*(void *)(v1 + 40));

  return _swift_deallocObject(v1, 48, 7);
}

uint64_t sub_100FC37A0()
{
  uint64_t v2 = *(void *)(v0 + 40);
  os_log_type_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *os_log_type_t v3 = v1;
  v3[1] = sub_100033F68;
  uint64_t v4 = (void *)swift_task_alloc();
  v3[2] = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_100033F68;
  return sub_100FC2508(v2);
}

unint64_t sub_100FC3884()
{
  unint64_t result = qword_101665E50;
  if (!qword_101665E50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101665E50);
  }
  return result;
}

id sub_100FC38D8(uint64_t a1)
{
  return sub_100FC2244(a1, v1);
}

uint64_t sub_100FC38E0(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for OneShotLocationWrapper.Error(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100FC39C4);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for OneShotLocationWrapper.Error()
{
  return &type metadata for OneShotLocationWrapper.Error;
}

unint64_t sub_100FC3A00()
{
  unint64_t result = qword_101665E78;
  if (!qword_101665E78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101665E78);
  }
  return result;
}

uint64_t sub_100FC3A54(char a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(a2 + 16))(a2, a1 & 1);
}

void sub_100FC3A6C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a2 >> 60 == 15) {
    Class isa = 0;
  }
  else {
    Class isa = Data._bridgeToObjectiveC()().super.isa;
  }
  Class v5 = isa;
  (*(void (**)(uint64_t))(a3 + 16))(a3);
}

void sub_100FC3AD8(uint64_t a1, uint64_t a2)
{
  sub_10001D4B0(0, (unint64_t *)&unk_10164DC30);
  sub_100485A2C();
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, objc_class *))(a2 + 16))(a2, isa);
}

uint64_t sub_100FC3C6C(uint64_t a1, uint64_t a2)
{
  v17[0] = a1;
  uint64_t v4 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_log_type_t.default.getter();
  if (qword_1016372A8 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_101347BA0;
  v17[1] = swift_getObjectType();
  sub_10000588C((uint64_t *)&unk_101665F30);
  uint64_t v8 = String.init<A>(describing:)();
  uint64_t v10 = v9;
  *(void *)(v7 + 56) = &type metadata for String;
  unint64_t v11 = sub_10000B4CC();
  *(void *)(v7 + 32) = v8;
  *(void *)(v7 + 40) = v10;
  *(void *)(v7 + 96) = &type metadata for String;
  *(void *)(v7 + 104) = v11;
  *(void *)(v7 + 64) = v11;
  *(void *)(v7 + 72) = 0xD000000000000023;
  *(void *)(v7 + 80) = 0x800000010141C250;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v12 = *sub_10001CD44((void *)(v2 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(void *)(v2 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  static os_log_type_t.default.getter();
  os_log(_:dso:log:_:_:)();
  uint64_t v13 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v6, 1, 1, v13);
  unint64_t v14 = (void *)swift_allocObject();
  v14[2] = 0;
  v14[3] = 0;
  uint64_t v15 = v17[0];
  v14[4] = v12;
  v14[5] = v15;
  v14[6] = a2;
  swift_retain();
  swift_retain();
  sub_1008F5E44((uint64_t)v6, (uint64_t)&unk_101665F60, (uint64_t)v14);
  return swift_release();
}

uint64_t sub_100FC3F14(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  static os_log_type_t.default.getter();
  if (qword_101637250 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_101347BA0;
  swift_getObjectType();
  sub_10000588C((uint64_t *)&unk_101665F30);
  uint64_t v7 = String.init<A>(describing:)();
  uint64_t v9 = v8;
  *(void *)(v6 + 56) = &type metadata for String;
  unint64_t v10 = sub_10000B4CC();
  *(void *)(v6 + 32) = v7;
  *(void *)(v6 + 40) = v9;
  *(void *)(v6 + 96) = &type metadata for String;
  *(void *)(v6 + 104) = v10;
  *(void *)(v6 + 64) = v10;
  *(void *)(v6 + 72) = 0xD00000000000001BLL;
  *(void *)(v6 + 80) = 0x800000010141C230;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_10001CD44((void *)(v3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a1;
  *(void *)(v11 + 24) = a2;
  swift_retain();
  sub_10065DB8C((uint64_t)sub_100FCF33C, v11);
  return swift_release();
}

uint64_t sub_100FC41E8(void *a1, uint64_t a2, uint64_t a3, const void *a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, void, uint64_t))
{
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = _Block_copy(a4);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
  _Block_copy(v16);
  id v17 = a1;
  sub_100FCCB60((uint64_t)v15, (uint64_t)v17, (uint64_t)v16, a5, a6, a7);
  _Block_release(v16);
  _Block_release(v16);

  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t sub_100FC4328(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  static os_log_type_t.default.getter();
  if (qword_101637250 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_101347BA0;
  swift_getObjectType();
  sub_10000588C((uint64_t *)&unk_101665F30);
  uint64_t v7 = String.init<A>(describing:)();
  uint64_t v9 = v8;
  *(void *)(v6 + 56) = &type metadata for String;
  unint64_t v10 = sub_10000B4CC();
  *(void *)(v6 + 32) = v7;
  *(void *)(v6 + 40) = v9;
  *(void *)(v6 + 96) = &type metadata for String;
  *(void *)(v6 + 104) = v10;
  *(void *)(v6 + 64) = v10;
  *(void *)(v6 + 72) = 0xD000000000000017;
  *(void *)(v6 + 80) = 0x800000010141C210;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_10000588C(&qword_10164B280);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10134CDE0;
  uint64_t v12 = (void *)SPBeaconTypeSelfBeaconing;
  *(void *)(inited + 32) = SPBeaconTypeSelfBeaconing;
  uint64_t v13 = (void *)SPBeaconTypeDurian;
  uint64_t v14 = (void *)SPBeaconTypeAccessory;
  *(void *)(inited + 40) = SPBeaconTypeDurian;
  *(void *)(inited + 48) = v14;
  uint64_t v15 = (void *)SPBeaconTypeHele;
  uint64_t v16 = (void *)SPBeaconTypeLocalFindable;
  *(void *)(inited + 56) = SPBeaconTypeHele;
  *(void *)(inited + 64) = v16;
  id v17 = v12;
  id v18 = v13;
  id v19 = v14;
  id v20 = v15;
  id v21 = v16;
  uint64_t v22 = sub_100DF2E7C(inited);
  swift_setDeallocating();
  type metadata accessor for SPBeaconType(0);
  swift_arrayDestroy();
  sub_10001CD44((void *)(v3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  sub_10066B230((uint64_t)v22, 0, 0, a1, a2);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100FC4590(uint64_t a1, char a2, char a3, uint64_t a4, uint64_t a5)
{
  static os_log_type_t.default.getter();
  if (qword_101637250 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_101347BA0;
  swift_getObjectType();
  sub_10000588C((uint64_t *)&unk_101665F30);
  uint64_t v10 = String.init<A>(describing:)();
  uint64_t v12 = v11;
  *(void *)(v9 + 56) = &type metadata for String;
  unint64_t v13 = sub_10000B4CC();
  *(void *)(v9 + 32) = v10;
  *(void *)(v9 + 40) = v12;
  *(void *)(v9 + 96) = &type metadata for String;
  *(void *)(v9 + 104) = v13;
  *(void *)(v9 + 64) = v13;
  *(void *)(v9 + 72) = 0xD00000000000003ALL;
  *(void *)(v9 + 80) = 0x800000010141C1D0;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_10001CD44((void *)(v5 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(void *)(v5 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  return sub_10066B230(a1, a2 & 1, a3 & 1, a4, a5);
}

uint64_t sub_100FC48A4(uint64_t a1, uint64_t a2)
{
  return sub_100FC5C0C(a1, a2, 0xD00000000000001ELL, 0x800000010141C1B0, sub_10066C0BC);
}

uint64_t sub_100FC4908(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100FC53F4(a1, a2, a3, 0xD000000000000026, 0x800000010141C180, sub_100658018);
}

void sub_100FC4FE4(char *a1, int a2, void *aBlock, void (*a4)(uint64_t, void *))
{
  uint64_t v6 = _Block_copy(aBlock);
  uint64_t v7 = *sub_10001CD44(&a1[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation], *(void *)&a1[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24]);
  _Block_copy(v6);
  uint64_t v8 = a1;
  a4(v7, v6);
  _Block_release(v6);
  _Block_release(v6);
}

uint64_t sub_100FC5080(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v25 = a3;
  uint64_t v22 = a1;
  uint64_t v23 = a2;
  uint64_t v24 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v24 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v24);
  uint64_t v6 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21[1] = static os_log_type_t.default.getter();
  if (qword_101637250 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_101347BA0;
  uint64_t ObjectType = swift_getObjectType();
  sub_10000588C((uint64_t *)&unk_101665F30);
  uint64_t v10 = String.init<A>(describing:)();
  uint64_t v12 = v11;
  *(void *)(v9 + 56) = &type metadata for String;
  unint64_t v13 = sub_10000B4CC();
  *(void *)(v9 + 32) = v10;
  *(void *)(v9 + 40) = v12;
  *(void *)(v9 + 96) = &type metadata for String;
  *(void *)(v9 + 104) = v13;
  *(void *)(v9 + 64) = v13;
  *(void *)(v9 + 72) = 0xD000000000000037;
  *(void *)(v9 + 80) = 0x800000010141C140;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v14 = *sub_10001CD44((void *)(v3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v8, 1, 1, v15);
  uint64_t v16 = v24;
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v22, v24);
  unint64_t v17 = (*(unsigned __int8 *)(v4 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  id v18 = (char *)swift_allocObject();
  *((void *)v18 + 2) = 0;
  *((void *)v18 + 3) = 0;
  uint64_t v19 = v23;
  *((void *)v18 + 4) = v14;
  *((void *)v18 + 5) = v19;
  *((void *)v18 + 6) = v25;
  (*(void (**)(char *, char *, uint64_t))(v4 + 32))(&v18[v17], (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v16);
  swift_retain();
  swift_retain();
  sub_1008F5E44((uint64_t)v8, (uint64_t)&unk_101665F50, (uint64_t)v18);
  return swift_release();
}

uint64_t sub_100FC53C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100FC53F4(a1, a2, a3, 0xD00000000000001CLL, 0x8000000101403850, sub_10067002C);
}

uint64_t sub_100FC53F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v9 = v6;
  static os_log_type_t.default.getter();
  if (qword_101637250 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_101347BA0;
  swift_getObjectType();
  sub_10000588C((uint64_t *)&unk_101665F30);
  uint64_t v12 = String.init<A>(describing:)();
  uint64_t v14 = v13;
  *(void *)(v11 + 56) = &type metadata for String;
  unint64_t v15 = sub_10000B4CC();
  *(void *)(v11 + 32) = v12;
  *(void *)(v11 + 40) = v14;
  *(void *)(v11 + 96) = &type metadata for String;
  *(void *)(v11 + 104) = v15;
  *(void *)(v11 + 64) = v15;
  *(void *)(v11 + 72) = a4;
  *(void *)(v11 + 80) = a5;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_10001CD44((void *)(v9 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(void *)(v9 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  return a6(a1, a2, a3);
}

void sub_100FC5614(uint64_t a1, uint64_t a2)
{
  type metadata accessor for UUID();
  sub_10000588C(&qword_1016455E8);
  sub_100FCF628(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, objc_class *))(a2 + 16))(a2, isa);
}

uint64_t sub_100FC56D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  static os_log_type_t.default.getter();
  if (qword_101637250 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_101347BA0;
  swift_getObjectType();
  sub_10000588C((uint64_t *)&unk_101665F30);
  uint64_t v9 = String.init<A>(describing:)();
  uint64_t v11 = v10;
  *(void *)(v8 + 56) = &type metadata for String;
  unint64_t v12 = sub_10000B4CC();
  *(void *)(v8 + 32) = v9;
  *(void *)(v8 + 40) = v11;
  *(void *)(v8 + 96) = &type metadata for String;
  *(void *)(v8 + 104) = v12;
  *(void *)(v8 + 64) = v12;
  *(void *)(v8 + 72) = 0xD000000000000029;
  *(void *)(v8 + 80) = 0x8000000101403740;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_10001CD44((void *)(v4 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(void *)(v4 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  return sub_10066F37C(a1, a2, a3, a4);
}

uint64_t sub_100FC5BDC(uint64_t a1, uint64_t a2)
{
  return sub_100FC5C0C(a1, a2, 0xD000000000000017, 0x8000000101403680, sub_10067AC5C);
}

uint64_t sub_100FC5C0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  static os_log_type_t.default.getter();
  if (qword_101637250 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_101347BA0;
  swift_getObjectType();
  sub_10000588C((uint64_t *)&unk_101665F30);
  uint64_t v10 = String.init<A>(describing:)();
  uint64_t v12 = v11;
  *(void *)(v9 + 56) = &type metadata for String;
  unint64_t v13 = sub_10000B4CC();
  *(void *)(v9 + 32) = v10;
  *(void *)(v9 + 40) = v12;
  *(void *)(v9 + 96) = &type metadata for String;
  *(void *)(v9 + 104) = v13;
  *(void *)(v9 + 64) = v13;
  *(void *)(v9 + 72) = a3;
  *(void *)(v9 + 80) = a4;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_10001CD44((void *)(v5 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(void *)(v5 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  return a5(a1, a2);
}

void sub_100FC5DD4(void *a1, int a2, void *aBlock, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, uint64_t))
{
  uint64_t v10 = _Block_copy(aBlock);
  _Block_copy(v10);
  id v11 = a1;
  sub_100FCD5E8((uint64_t)v11, (uint64_t)v10, a4, a5, a6);
  _Block_release(v10);
  _Block_release(v10);
}

uint64_t sub_100FC5EB0(void *a1, uint64_t a2, uint64_t a3, void *a4, const void *a5, void (*a6)(char *, id, id, void *))
{
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  unint64_t v13 = (char *)&v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = _Block_copy(a5);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
  _Block_copy(v14);
  id v15 = a4;
  id v16 = a1;
  a6(v13, v15, v16, v14);
  _Block_release(v14);
  _Block_release(v14);

  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t sub_100FC612C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  static os_log_type_t.default.getter();
  if (qword_101637250 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_101347BA0;
  swift_getObjectType();
  sub_10000588C((uint64_t *)&unk_101665F30);
  uint64_t v12 = String.init<A>(describing:)();
  uint64_t v14 = v13;
  *(void *)(v11 + 56) = &type metadata for String;
  unint64_t v15 = sub_10000B4CC();
  *(void *)(v11 + 32) = v12;
  *(void *)(v11 + 40) = v14;
  *(void *)(v11 + 96) = &type metadata for String;
  *(void *)(v11 + 104) = v15;
  *(void *)(v11 + 64) = v15;
  *(void *)(v11 + 72) = 0xD000000000000038;
  *(void *)(v11 + 80) = 0x8000000101403580;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_10001CD44((void *)(v6 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(void *)(v6 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  if ((a1 & 0x8000000000000000) == 0) {
    return sub_10067E3C0(a1, a2, a3, a4, a5, a6);
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100FC6668(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const void *a5, uint64_t a6, uint64_t a7, uint64_t (*a8)(uint64_t, uint64_t, void, uint64_t))
{
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  unint64_t v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = _Block_copy(a5);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
  _Block_copy(v18);
  id v19 = a1;
  sub_100FCDCF0(a3, (uint64_t)v17, (uint64_t)v19, (uint64_t)v18, a6, a7, a8);
  _Block_release(v18);
  _Block_release(v18);

  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
}

uint64_t sub_100FC68D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  static os_log_type_t.default.getter();
  if (qword_101637250 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_101347BA0;
  swift_getObjectType();
  sub_10000588C((uint64_t *)&unk_101665F30);
  uint64_t v8 = String.init<A>(describing:)();
  uint64_t v10 = v9;
  *(void *)(v7 + 56) = &type metadata for String;
  unint64_t v11 = sub_10000B4CC();
  *(void *)(v7 + 32) = v8;
  *(void *)(v7 + 40) = v10;
  *(void *)(v7 + 96) = &type metadata for String;
  *(void *)(v7 + 104) = v11;
  *(void *)(v7 + 64) = v11;
  *(void *)(v7 + 72) = 0xD000000000000025;
  *(void *)(v7 + 80) = 0x800000010141C110;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_10001CD44((void *)(v3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a2;
  *(void *)(v12 + 24) = a3;
  swift_retain();
  sub_1008C0E1C(a1);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = sub_100FCF0D8;
  *(void *)(v13 + 24) = v12;
  swift_retain();
  Future.addSuccess(block:)();
  swift_release();
  swift_release();
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = sub_100FCF0D8;
  *(void *)(v14 + 24) = v12;
  swift_retain();
  Future.addFailure(block:)();
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

void sub_100FC6B48(uint64_t a1, void (*a2)(void))
{
  sub_10001D608(a1, (uint64_t)v20, (uint64_t *)&unk_101665F40);
  uint64_t v4 = v20[0];
  unint64_t v5 = v20[1];
  sub_10001D608(a1, (uint64_t)v21, (uint64_t *)&unk_101665F40);
  if (v22 >> 60 == 11)
  {
    id v6 = 0;
  }
  else
  {
    uint64_t v7 = v23;
    uint64_t v8 = v24;
    uint64_t v10 = v25;
    uint64_t v9 = v26;
    uint64_t v14 = v27;
    unsigned int v15 = v28;
    unsigned int v16 = v29;
    unsigned int v17 = v30;
    unsigned int v18 = v31;
    unsigned int v19 = v32;
    unint64_t v11 = a2;
    id v12 = objc_allocWithZone((Class)SPTagUserStats);
    sub_100037A38(v4, v5);
    uint64_t v13 = v12;
    a2 = v11;
    id v6 = [v13 init];
    [v6 setOverflowFlag:v7];
    [v6 setCrashCount:v8];
    [v6 setMultiTime:v10];
    [v6 setNearOwnerTime:v9];
    [v6 setWildTime:v14];
    [v6 setOwnerPlaySoundCount:v15];
    [v6 setOwnerPlaySoundTime:v16];
    [v6 setRangingCount:v17];
    [v6 setRangingTime:v18];
    [v6 setVersion:v19];

    sub_100FCF0F0(a1);
  }
  a2(v6);
}

uint64_t sub_100FC6D60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  static os_log_type_t.default.getter();
  if (qword_101637250 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_101347BA0;
  swift_getObjectType();
  sub_10000588C((uint64_t *)&unk_101665F30);
  uint64_t v8 = String.init<A>(describing:)();
  uint64_t v10 = v9;
  *(void *)(v7 + 56) = &type metadata for String;
  unint64_t v11 = sub_10000B4CC();
  *(void *)(v7 + 32) = v8;
  *(void *)(v7 + 40) = v10;
  *(void *)(v7 + 96) = &type metadata for String;
  *(void *)(v7 + 104) = v11;
  *(void *)(v7 + 64) = v11;
  *(void *)(v7 + 72) = 0xD00000000000002BLL;
  *(void *)(v7 + 80) = 0x800000010141C0E0;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_10001CD44((void *)(v3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  return sub_10065FF48(a1, a2, a3);
}

uint64_t sub_100FC6F0C(void *a1, uint64_t a2, uint64_t a3, const void *a4, uint64_t a5, uint64_t a6, void (*a7)(char *, uint64_t, uint64_t))
{
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  unsigned int v15 = _Block_copy(a4);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v15;
  id v17 = a1;
  a7(v14, a6, v16);

  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t sub_100FC7050(uint64_t a1, uint64_t a2)
{
  return sub_100FC5C0C(a1, a2, 0xD000000000000021, 0x800000010141C0B0, sub_100683298);
}

uint64_t sub_100FC73B8(uint64_t a1, char a2, void (*a3)(uint64_t, uint64_t))
{
  if (a2)
  {
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    swift_willThrowTypedImpl();
    swift_errorRetain();
    a3(0, a1);
    sub_10015B4A8(a1, 1);
    return sub_10015B4A8(a1, 1);
  }
  else
  {
    uint64_t v5 = swift_bridgeObjectRetain();
    a3(v5, 0);
    return sub_10015B4A8(a1, 0);
  }
}

void sub_100FC75CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    v5.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    if (a2)
    {
LABEL_3:
      uint64_t v6 = _convertErrorToNSError(_:)();
      goto LABEL_6;
    }
  }
  else
  {
    v5.super.Class isa = 0;
    if (a2) {
      goto LABEL_3;
    }
  }
  uint64_t v6 = 0;
LABEL_6:
  id v7 = (id)v6;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, v5.super.isa);
}

uint64_t sub_100FC7AF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[4] = a5;
  v6[5] = a6;
  v6[3] = a4;
  return _swift_task_switch(sub_100FC7B1C, 0, 0);
}

uint64_t sub_100FC7B1C()
{
  sub_10001CD44((void *)(*(void *)(v0 + 24) + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(void *)(*(void *)(v0 + 24) + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100FC7BC4;
  return sub_10068AB10();
}

uint64_t sub_100FC7BC4(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 56) = a1;
  *(void *)(v3 + 64) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_100FC7E3C;
  }
  else {
    uint64_t v4 = sub_100FC7CD8;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100FC7CD8()
{
  uint64_t v2 = v0[7];
  uint64_t v1 = v0[8];
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  v0[2] = v2;
  sub_10000588C(&qword_101665F78);
  sub_100FCF584();
  uint64_t v3 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  if (v1)
  {
    swift_release();
    swift_bridgeObjectRelease();
    NSArray v5 = (void (*)(void, unint64_t, uint64_t))v0[4];
    swift_errorRetain();
    v5(0, 0xF000000000000000, v1);
    swift_errorRelease();
    swift_errorRelease();
  }
  else
  {
    uint64_t v6 = v3;
    unint64_t v7 = v4;
    uint64_t v8 = (void (*)(uint64_t, unint64_t, void))v0[4];
    swift_release();
    swift_bridgeObjectRelease();
    sub_1000361E0(v6, v7);
    v8(v6, v7, 0);
    sub_10001CFB8(v6, v7);
    sub_10001CFB8(v6, v7);
  }
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_100FC7E3C()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = (void (*)(void, unint64_t, uint64_t))v0[4];
  swift_errorRetain();
  v2(0, 0xF000000000000000, v1);
  swift_errorRelease();
  swift_errorRelease();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_100FC8030(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  static os_log_type_t.default.getter();
  if (qword_1016372A8 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_101347BA0;
  swift_getObjectType();
  sub_10000588C((uint64_t *)&unk_101665F30);
  uint64_t v7 = String.init<A>(describing:)();
  uint64_t v9 = v8;
  *(void *)(v6 + 56) = &type metadata for String;
  unint64_t v10 = sub_10000B4CC();
  *(void *)(v6 + 32) = v7;
  *(void *)(v6 + 40) = v9;
  *(void *)(v6 + 96) = &type metadata for String;
  *(void *)(v6 + 104) = v10;
  *(void *)(v6 + 64) = v10;
  *(void *)(v6 + 72) = 0xD000000000000023;
  *(void *)(v6 + 80) = 0x80000001013FA8B0;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_10001CD44((void *)(v3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a1;
  *(void *)(v11 + 24) = a2;
  swift_retain();
  sub_10036D8F0((uint64_t)sub_100FCFD58, v11);
  return swift_release();
}

uint64_t sub_100FC8214(void *a1, uint64_t a2, uint64_t a3)
{
  static os_log_type_t.default.getter();
  if (qword_1016372A8 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_101347BA0;
  swift_getObjectType();
  sub_10000588C((uint64_t *)&unk_101665F30);
  uint64_t v8 = String.init<A>(describing:)();
  uint64_t v10 = v9;
  *(void *)(v7 + 56) = &type metadata for String;
  unint64_t v11 = sub_10000B4CC();
  *(void *)(v7 + 32) = v8;
  *(void *)(v7 + 40) = v10;
  *(void *)(v7 + 96) = &type metadata for String;
  *(void *)(v7 + 104) = v11;
  *(void *)(v7 + 64) = v11;
  *(void *)(v7 + 72) = 0xD000000000000026;
  *(void *)(v7 + 80) = 0x80000001013FA800;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_10001CD44((void *)(v3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a2;
  *(void *)(v12 + 24) = a3;
  swift_retain();
  sub_10036DD6C(a1, (uint64_t)sub_100FCF0CC, v12);
  return swift_release();
}

void sub_100FC83CC(void *a1, char a2, void (*a3)(void *))
{
  if (a2)
  {
    id v5 = a1;
    a3(a1);
    sub_1003B579C(a1, 1);
  }
  else
  {
    a3(0);
  }
}

uint64_t sub_100FC8478(void *a1, uint64_t a2, uint64_t a3)
{
  static os_log_type_t.default.getter();
  if (qword_1016372A8 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_101347BA0;
  swift_getObjectType();
  sub_10000588C((uint64_t *)&unk_101665F30);
  uint64_t v8 = String.init<A>(describing:)();
  uint64_t v10 = v9;
  *(void *)(v7 + 56) = &type metadata for String;
  unint64_t v11 = sub_10000B4CC();
  *(void *)(v7 + 32) = v8;
  *(void *)(v7 + 40) = v10;
  *(void *)(v7 + 96) = &type metadata for String;
  *(void *)(v7 + 104) = v11;
  *(void *)(v7 + 64) = v11;
  *(void *)(v7 + 72) = 0xD000000000000022;
  *(void *)(v7 + 80) = 0x80000001013FA190;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_10001CD44((void *)(v3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a2;
  *(void *)(v12 + 24) = a3;
  swift_retain();
  sub_10036EB44(a1, (uint64_t)sub_100FCF074, v12);
  return swift_release();
}

uint64_t sub_100FC8664(void *a1, uint64_t a2, uint64_t a3)
{
  static os_log_type_t.default.getter();
  if (qword_1016372A8 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_101347BA0;
  swift_getObjectType();
  sub_10000588C((uint64_t *)&unk_101665F30);
  uint64_t v8 = String.init<A>(describing:)();
  uint64_t v10 = v9;
  *(void *)(v7 + 56) = &type metadata for String;
  unint64_t v11 = sub_10000B4CC();
  *(void *)(v7 + 32) = v8;
  *(void *)(v7 + 40) = v10;
  *(void *)(v7 + 96) = &type metadata for String;
  *(void *)(v7 + 104) = v11;
  *(void *)(v7 + 64) = v11;
  *(void *)(v7 + 72) = 0xD000000000000024;
  *(void *)(v7 + 80) = 0x80000001013F97B0;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_10001CD44((void *)(v3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a2;
  *(void *)(v12 + 24) = a3;
  swift_retain();
  sub_100372448(a1, (uint64_t)sub_100FCFD58, v12);
  return swift_release();
}

void sub_100FC881C(void *a1, char a2, void (*a3)(void *, void *))
{
  id v8 = a1;
  if (a2)
  {
    uint64_t v6 = 0;
    uint64_t v7 = a1;
  }
  else
  {
    uint64_t v6 = a1;
    uint64_t v7 = 0;
  }
  a3(v6, v7);
}

uint64_t sub_100FC88C8(void *a1, int a2, void *a3, void *aBlock, uint64_t a5, uint64_t a6, void (*a7)(id, uint64_t, uint64_t))
{
  unint64_t v11 = _Block_copy(aBlock);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v11;
  id v13 = a3;
  id v14 = a1;
  a7(v13, a6, v12);

  return swift_release();
}

void sub_100FC8C2C(void *a1, int a2, void *aBlock, void (*a4)(void))
{
  uint64_t v6 = _Block_copy(aBlock);
  _Block_copy(v6);
  id v7 = a1;
  a4();
  _Block_release(v6);
  _Block_release(v6);
}

id sub_100FC8F84()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for BeaconManagerTrampoline();
  return [super dealloc];
}

uint64_t type metadata accessor for BeaconManagerTrampoline()
{
  return self;
}

uint64_t sub_100FC9028(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[6] = a3;
  v4[7] = a4;
  v4[4] = a1;
  v4[5] = a2;
  return _swift_task_switch(sub_100FC904C, 0, 0);
}

uint64_t sub_100FC904C()
{
  uint64_t v1 = (void *)(v0[4] + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation);
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[6];
  sub_10001CD44(v1, v2);
  id v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 + 8) + **(int **)(v3 + 8));
  unint64_t v4 = (void *)swift_task_alloc();
  v0[8] = v4;
  *unint64_t v4 = v0;
  v4[1] = sub_100FC9164;
  uint64_t v5 = v0[5];
  return v7(v5, v2, v3);
}

uint64_t sub_100FC9164(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 72) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_100FC9314;
  }
  else
  {
    *(void *)(v4 + 80) = a1;
    uint64_t v5 = sub_100FC928C;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100FC928C()
{
  uint64_t v1 = (void *)v0[10];
  uint64_t v2 = (void (*)(void *, void))v0[6];
  id v3 = v1;
  v2(v1, 0);

  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100FC9314()
{
  id v14 = v0;
  if (qword_101636F08 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170E858);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[9];
  if (v4)
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136446210;
    v0[2] = v5;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v7 = String.init<A>(describing:)();
    v0[3] = sub_1008FA0F0(v7, v8, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "bluetoothConnectionKeys error: %{public}s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v9 = v0[9];
  uint64_t v10 = (void (*)(void, uint64_t))v0[6];
  swift_errorRetain();
  v10(0, v9);
  swift_errorRelease();
  swift_errorRelease();
  unint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_100FC9668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[3] = v15;
  v7[4] = v16;
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1016565B0 + dword_1016565B0);
  unint64_t v11 = (void *)swift_task_alloc();
  v7[5] = v11;
  *unint64_t v11 = v7;
  v11[1] = sub_100FC9734;
  return v13(a2, a3, a7);
}

uint64_t sub_100FC9734()
{
  *(void *)(*(void *)v1 + 48) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100FC9848;
  }
  else {
    uint64_t v2 = sub_100A898D0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100FC9848()
{
  if (qword_101636F08 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170E858);
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    uint64_t v6 = _convertErrorToNSError(_:)();
    *(void *)(v0 + 16) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v5 = v6;
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Error from successfulConnection: %@", v4, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_100FC9DE8(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 32) = a4;
  *(void *)(v5 + 40) = a5;
  *(_DWORD *)(v5 + 64) = a3;
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  return _swift_task_switch(sub_100FC9E10, 0, 0);
}

uint64_t sub_100FC9E10()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = (void *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation);
  uint64_t v3 = v2[3];
  uint64_t v4 = v2[6];
  sub_10001CD44(v2, v3);
  uint64_t v5 = sub_100FCE7A8(v1);
  *(void *)(v0 + 48) = v5;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 + 16) + **(int **)(v4 + 16));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_100FC9F44;
  uint64_t v7 = *(unsigned int *)(v0 + 64);
  return v9(v5, v7, v3, v4);
}

uint64_t sub_100FC9F44()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100A8958C, 0, 0);
}

uint64_t sub_100FCA198(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[6] = a3;
  v4[7] = a4;
  v4[4] = a1;
  v4[5] = a2;
  uint64_t v5 = type metadata accessor for UUID();
  v4[8] = v5;
  v4[9] = *(void *)(v5 - 8);
  v4[10] = swift_task_alloc();
  v4[11] = swift_task_alloc();
  uint64_t v6 = sub_10000588C(&qword_10163D210);
  v4[12] = v6;
  v4[13] = *(void *)(v6 - 8);
  v4[14] = swift_task_alloc();
  return _swift_task_switch(sub_100FCA2CC, 0, 0);
}

uint64_t sub_100FCA2CC()
{
  uint64_t v1 = v0[11];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[9];
  uint64_t v4 = v0[5];
  uint64_t v5 = (void *)(v0[4] + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation);
  uint64_t v6 = v5[3];
  uint64_t v7 = v5[6];
  sub_10001CD44(v5, v6);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[15] = v8;
  v0[16] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v8(v1, v4, v2);
  type metadata accessor for Peripheral();
  Identifier.init(_:)();
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 + 24) + **(int **)(v7 + 24));
  uint64_t v9 = (void *)swift_task_alloc();
  v0[17] = v9;
  void *v9 = v0;
  v9[1] = sub_100FCA448;
  uint64_t v10 = v0[14];
  return v12(v10, v6, v7);
}

uint64_t sub_100FCA448()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 112);
  uint64_t v3 = *(void *)(*(void *)v1 + 104);
  uint64_t v4 = *(void *)(*(void *)v1 + 96);
  *(void *)(*(void *)v1 + 144) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0) {
    uint64_t v5 = sub_100FCA834;
  }
  else {
    uint64_t v5 = sub_100FCA5B8;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100FCA5B8()
{
  uint64_t v18 = v0;
  if (qword_1016370D0 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v3 = *(void *)(v0 + 64);
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170ECF8);
  v1(v2, v4, v3);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = *(void *)(v0 + 72);
  uint64_t v9 = *(void *)(v0 + 80);
  uint64_t v11 = *(void *)(v0 + 64);
  if (v8)
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136446210;
    sub_100FCF628((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 24) = sub_1008FA0F0(v13, v14, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Successfully paired pencil: %{public}s", v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v10 + 8))(*(void *)(v0 + 80), *(void *)(v0 + 64));
  }

  (*(void (**)(void))(v0 + 48))(0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
  return v15();
}

uint64_t sub_100FCA834()
{
  if (qword_1016370D0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170ECF8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138543362;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[2] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Error pairing pencil: %{public}@", v4, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v7 = v0[18];
  BOOL v8 = (void (*)(uint64_t))v0[6];
  swift_errorRetain();
  v8(v7);
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_100FCAC8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[6] = a3;
  v4[7] = a4;
  v4[4] = a1;
  v4[5] = a2;
  uint64_t v5 = type metadata accessor for UUID();
  v4[8] = v5;
  v4[9] = *(void *)(v5 - 8);
  v4[10] = swift_task_alloc();
  v4[11] = swift_task_alloc();
  uint64_t v6 = sub_10000588C(&qword_10163D210);
  v4[12] = v6;
  v4[13] = *(void *)(v6 - 8);
  v4[14] = swift_task_alloc();
  return _swift_task_switch(sub_100FCADC0, 0, 0);
}

uint64_t sub_100FCADC0()
{
  uint64_t v1 = v0[11];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[9];
  uint64_t v4 = v0[5];
  uint64_t v5 = (void *)(v0[4] + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation);
  uint64_t v6 = v5[3];
  uint64_t v7 = v5[6];
  sub_10001CD44(v5, v6);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[15] = v8;
  v0[16] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v8(v1, v4, v2);
  type metadata accessor for Peripheral();
  Identifier.init(_:)();
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 + 32) + **(int **)(v7 + 32));
  uint64_t v9 = (void *)swift_task_alloc();
  v0[17] = v9;
  void *v9 = v0;
  v9[1] = sub_100FCAF3C;
  uint64_t v10 = v0[14];
  return v12(v10, v6, v7);
}

uint64_t sub_100FCAF3C()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 112);
  uint64_t v3 = *(void *)(*(void *)v1 + 104);
  uint64_t v4 = *(void *)(*(void *)v1 + 96);
  *(void *)(*(void *)v1 + 144) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  if (v0) {
    uint64_t v5 = sub_100FCB328;
  }
  else {
    uint64_t v5 = sub_100FCB0AC;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100FCB0AC()
{
  uint64_t v18 = v0;
  if (qword_1016370D0 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v3 = *(void *)(v0 + 64);
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170ECF8);
  v1(v2, v4, v3);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = *(void *)(v0 + 72);
  uint64_t v9 = *(void *)(v0 + 80);
  uint64_t v11 = *(void *)(v0 + 64);
  if (v8)
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136446210;
    sub_100FCF628((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 24) = sub_1008FA0F0(v13, v14, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Successfully unpaired pencil: %{public}s", v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v10 + 8))(*(void *)(v0 + 80), *(void *)(v0 + 64));
  }

  (*(void (**)(void))(v0 + 48))(0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
  return v15();
}

uint64_t sub_100FCB328()
{
  if (qword_1016370D0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170ECF8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138543362;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[2] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Error unpairing pencil: %{public}@", v4, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v7 = v0[18];
  BOOL v8 = (void (*)(uint64_t))v0[6];
  swift_errorRetain();
  v8(v7);
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

void sub_100FCB780(char a1, uint64_t a2, uint64_t a3)
{
  if (qword_101636EE8 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_100010324(v7, (uint64_t)qword_10170E828);
  BOOL v8 = v3;
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136446466;
    swift_getObjectType();
    uint64_t v12 = _typeName(_:qualified:)();
    sub_1008FA0F0(v12, v13, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12) = 2082;
    sub_1008FA0F0(0xD000000000000038, 0x800000010141BF60, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "%{public}s: %{public}s", (uint8_t *)v11, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  sub_10001CD44(&v8[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation], *(void *)&v8[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24]);
  sub_100A56508(a1 & 1, a2, a3);
}

uint64_t sub_100FCBA50(uint64_t (*a1)(void))
{
  if (qword_101636EE8 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_100010324(v3, (uint64_t)qword_10170E828);
  id v4 = v1;
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136446466;
    swift_getObjectType();
    uint64_t v8 = _typeName(_:qualified:)();
    sub_1008FA0F0(v8, v9, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v7 + 12) = 2082;
    sub_1008FA0F0(0xD000000000000019, 0x800000010141BF40, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s: %{public}s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  return a1(0);
}

uint64_t sub_100FCBC8C(void *a1, int a2, void *aBlock, uint64_t a4, uint64_t a5, void (*a6)(uint64_t, uint64_t))
{
  unint64_t v9 = _Block_copy(aBlock);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v9;
  id v11 = a1;
  a6(a5, v10);

  return swift_release();
}

uint64_t sub_100FCBD20()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100FCBD58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for DefaultConfigurationLayer();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C(&qword_101665FB8);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(a2 + 16);
  if (v13)
  {
    uint64_t v23 = a2;
    unsigned __int16 v24 = a3;
    uint64_t v14 = a2 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    uint64_t v15 = *(void *)(v7 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_100946E74(v14, (uint64_t)v9);
      v27[3] = v6;
      v27[4] = (uint64_t)&off_1015DC910;
      uint64_t v16 = sub_10001D958(v27);
      sub_100946E74((uint64_t)v9, (uint64_t)v16);
      swift_getAtKeyPath();
      unint64_t v17 = v26;
      sub_100037A24(v25, v26);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v27);
      if (v17 >> 60 != 15) {
        break;
      }
      sub_100FCFA70((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for DefaultConfigurationLayer);
      v14 += v15;
      if (!--v13)
      {
        uint64_t v18 = 1;
        goto LABEL_8;
      }
    }
    sub_100FCFAD0((uint64_t)v9, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for DefaultConfigurationLayer);
    uint64_t v18 = 0;
LABEL_8:
    a3 = v24;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v18 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v12, v18, 1, v6);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6) == 1)
  {
    sub_10001DAB4((uint64_t)v12, &qword_101665FB8);
  }
  else
  {
    v28[3] = v6;
    v28[4] = (uint64_t)&off_1015DC910;
    uint64_t v19 = sub_10001D958(v28);
    sub_100FCFAD0((uint64_t)v12, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for DefaultConfigurationLayer);
    swift_getAtKeyPath();
    uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v28);
    unint64_t v21 = v29;
    if (v29 >> 60 != 15)
    {
      *a3 = v28[5];
      a3[1] = v21;
      return result;
    }
  }
  v28[0] = 0;
  v28[1] = 0xE000000000000000;
  _StringGuts.grow(_:)(40);
  v22._object = (void *)0x8000000101402410;
  v22._countAndFlagsBits = 0xD000000000000026;
  String.append(_:)(v22);
  v27[0] = a1;
  sub_10000588C(&qword_101665FC8);
  _print_unlocked<A, B>(_:_:)();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100FCC0B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for DefaultConfigurationLayer();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C(&qword_101665FB8);
  __chkstk_darwin(v10 - 8);
  unint64_t v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v13 = (char *)&v26 - v12;
  uint64_t v14 = *(void *)(a2 + 16);
  if (v14)
  {
    uint64_t v27 = (char *)&v26 - v12;
    uint64_t v28 = v7;
    uint64_t v15 = a2 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    uint64_t v16 = *(void *)(v7 + 72);
    uint64_t v29 = a2;
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_100946E74(v15, (uint64_t)v9);
      v37[3] = v6;
      v37[4] = (uint64_t)&off_1015DC910;
      unint64_t v17 = sub_10001D958(v37);
      sub_100946E74((uint64_t)v9, (uint64_t)v17);
      swift_getAtKeyPath();
      uint64_t v18 = v36;
      sub_1009404E4(v30, v31, v32, v33, v34, v35, v36);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v37);
      if (v18) {
        break;
      }
      sub_100FCFA70((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for DefaultConfigurationLayer);
      v15 += v16;
      if (!--v14)
      {
        uint64_t v19 = 1;
        uint64_t v7 = v28;
        uint64_t v13 = v27;
        goto LABEL_8;
      }
    }
    uint64_t v13 = v27;
    sub_100FCFAD0((uint64_t)v9, (uint64_t)v27, (uint64_t (*)(void))type metadata accessor for DefaultConfigurationLayer);
    uint64_t v19 = 0;
    uint64_t v7 = v28;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v19 = 1;
  }
LABEL_8:
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v13, v19, 1, v6);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v13, 1, v6) == 1)
  {
    sub_10001DAB4((uint64_t)v13, &qword_101665FB8);
  }
  else
  {
    v38[3] = v6;
    v38[4] = (uint64_t)&off_1015DC910;
    id v20 = sub_10001D958(v38);
    sub_100FCFAD0((uint64_t)v13, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for DefaultConfigurationLayer);
    swift_getAtKeyPath();
    uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v38);
    uint64_t v22 = v42;
    if (v42)
    {
      uint64_t v23 = v46;
      long long v24 = v40;
      *(_OWORD *)a3 = v39;
      *(_OWORD *)(a3 + 16) = v24;
      *(_OWORD *)(a3 + 32) = v41;
      *(void *)(a3 + 48) = v22;
      *(_OWORD *)(a3 + 56) = v43;
      *(_OWORD *)(a3 + 72) = v44;
      *(_OWORD *)(a3 + 88) = v45;
      *(void *)(a3 + 104) = v23;
      return result;
    }
  }
  *(void *)&long long v39 = 0;
  *((void *)&v39 + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(40);
  v25._object = (void *)0x8000000101402410;
  v25._countAndFlagsBits = 0xD000000000000026;
  String.append(_:)(v25);
  uint64_t v30 = a1;
  sub_10000588C(&qword_101665FC0);
  _print_unlocked<A, B>(_:_:)();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100FCC468@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v4 + 528))(v6, v3, v4);
  return sub_10001D608((uint64_t)v6, a2, &qword_101652428);
}

uint64_t sub_100FCC4E0()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = v0 + v3;
  uint64_t v6 = (uint64_t *)(v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  unint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v9;
  void *v9 = v1;
  v9[1] = sub_100033F68;
  return sub_100FCAC8C(v4, v5, v7, v8);
}

uint64_t sub_100FCC5F8()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_100FCC6E4()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = v0 + v3;
  unint64_t v6 = (uint64_t *)(v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  unint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v9;
  void *v9 = v1;
  v9[1] = sub_100033F68;
  return sub_100FCA198(v4, v5, v7, v8);
}

uint64_t sub_100FCC7F8()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100FCC840()
{
  int v2 = *(_DWORD *)(v0 + 32);
  uint64_t v3 = swift_task_alloc();
  long long v4 = *(_OWORD *)(v0 + 16);
  long long v5 = *(_OWORD *)(v0 + 40);
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_100033F68;
  *(_DWORD *)(v3 + 64) = v2;
  *(_OWORD *)(v3 + 16) = v4;
  *(_OWORD *)(v3 + 32) = v5;
  return _swift_task_switch(sub_100FC9E10, 0, 0);
}

id sub_100FCC8F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(a3 - 8);
  __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v14, a1, a3);
  double v15 = (*(double (**)(uint64_t, uint64_t))(a4 + 16))(a3, a4);
  double v16 = (*(double (**)(uint64_t, uint64_t))(a4 + 24))(a3, a4);
  id v17 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
  double v18 = (*(double (**)(uint64_t, uint64_t))(a4 + 32))(a3, a4);
  (*(void (**)(uint64_t, uint64_t))(a4 + 8))(a3, a4);
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  id v20 = [v17 initWithCoordinate:isa, v15, v16, -1.0, v18, -1.0];

  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, a3);
  return v20;
}

uint64_t sub_100FCCB60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, void, uint64_t))
{
  static os_log_type_t.default.getter();
  if (qword_101637250 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_101347BA0;
  swift_getObjectType();
  sub_10000588C((uint64_t *)&unk_101665F30);
  uint64_t v11 = String.init<A>(describing:)();
  uint64_t v13 = v12;
  *(void *)(v10 + 56) = &type metadata for String;
  unint64_t v14 = sub_10000B4CC();
  *(void *)(v10 + 32) = v11;
  *(void *)(v10 + 40) = v13;
  *(void *)(v10 + 96) = &type metadata for String;
  *(void *)(v10 + 104) = v14;
  *(void *)(v10 + 64) = v14;
  *(void *)(v10 + 72) = a4;
  *(void *)(v10 + 80) = a5;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  double v15 = sub_10001CD44((void *)(a2 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(void *)(a2 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  return a6(a1, *v15, a3);
}

void sub_100FCCCC4(uint64_t a1, uint64_t a2, uint64_t a3, void (**a4)(void, void))
{
  static os_log_type_t.default.getter();
  if (qword_101637250 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_101347BA0;
  swift_getObjectType();
  sub_10000588C((uint64_t *)&unk_101665F30);
  uint64_t v9 = String.init<A>(describing:)();
  uint64_t v11 = v10;
  *(void *)(v8 + 56) = &type metadata for String;
  unint64_t v12 = sub_10000B4CC();
  *(void *)(v8 + 32) = v9;
  *(void *)(v8 + 40) = v11;
  *(void *)(v8 + 96) = &type metadata for String;
  *(void *)(v8 + 104) = v12;
  *(void *)(v8 + 64) = v12;
  *(void *)(v8 + 72) = 0xD00000000000002BLL;
  *(void *)(v8 + 80) = 0x800000010141C4C0;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v13 = sub_10001CD44((void *)(a3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(void *)(a3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  sub_1006BB5C0(a1, a2, 0, (void *)*v13, a4);
}

void sub_100FCCE40(uint64_t a1, uint64_t a2)
{
  static os_log_type_t.default.getter();
  if (qword_101637250 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_101347BA0;
  *(void *)&long long v10 = swift_getObjectType();
  sub_10000588C((uint64_t *)&unk_101665F30);
  uint64_t v4 = String.init<A>(describing:)();
  uint64_t v6 = v5;
  *(void *)(v3 + 56) = &type metadata for String;
  unint64_t v7 = sub_10000B4CC();
  *(void *)(v3 + 32) = v4;
  *(void *)(v3 + 40) = v6;
  *(void *)(v3 + 96) = &type metadata for String;
  *(void *)(v3 + 104) = v7;
  *(void *)(v3 + 64) = v7;
  *(void *)(v3 + 72) = 0xD00000000000001FLL;
  *(void *)(v3 + 80) = 0x800000010141C4A0;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t KeyPath = swift_getKeyPath();
  sub_100FCC0B4(KeyPath, v10, (uint64_t)&v10);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  id v9 = MacBeaconConfig.xpcObject()();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, id, void))(a2 + 16))(a2, v9, 0);
}

void sub_100FCD064(uint64_t a1, uint64_t a2, char a3, uint64_t a4, void (**a5)(void, void))
{
  static os_log_type_t.default.getter();
  if (qword_101637250 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_101347BA0;
  swift_getObjectType();
  sub_10000588C((uint64_t *)&unk_101665F30);
  uint64_t v10 = String.init<A>(describing:)();
  uint64_t v12 = v11;
  *(void *)(v9 + 56) = &type metadata for String;
  unint64_t v13 = sub_10000B4CC();
  *(void *)(v9 + 32) = v10;
  *(void *)(v9 + 40) = v12;
  *(void *)(v9 + 96) = &type metadata for String;
  *(void *)(v9 + 104) = v13;
  *(void *)(v9 + 64) = v13;
  *(void *)(v9 + 72) = 0xD00000000000003CLL;
  *(void *)(v9 + 80) = 0x8000000101404100;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  unint64_t v14 = sub_10001CD44((void *)(a4 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(void *)(a4 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  sub_1006BB5C0(a1, a2, a3 & 1, (void *)*v14, a5);
}

void sub_100FCD1E4(uint64_t a1, void *a2, uint64_t a3, void (**a4)(const void *, Class))
{
  id v31 = a2;
  uint64_t v28 = a1;
  uint64_t v6 = sub_10000588C(&qword_101665FA8);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = type metadata accessor for TimeBasedKeysCriteria();
  uint64_t v9 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v27 = (uint64_t)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = swift_allocObject();
  *(void *)(v32 + 16) = a4;
  uint64_t v29 = a4;
  _Block_copy(a4);
  static os_log_type_t.default.getter();
  if (qword_101637250 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_101347BA0;
  uint64_t ObjectType = swift_getObjectType();
  sub_10000588C((uint64_t *)&unk_101665F30);
  uint64_t v12 = String.init<A>(describing:)();
  uint64_t v26 = a3;
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  *(void *)(v11 + 56) = &type metadata for String;
  unint64_t v16 = sub_10000B4CC();
  *(void *)(v11 + 32) = v13;
  *(void *)(v11 + 40) = v15;
  *(void *)(v11 + 96) = &type metadata for String;
  *(void *)(v11 + 104) = v16;
  *(void *)(v11 + 64) = v16;
  *(void *)(v11 + 72) = 0xD000000000000021;
  *(void *)(v11 + 80) = 0x800000010141C450;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  id v17 = v31;
  sub_1008B441C(v17, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v30) == 1)
  {
    sub_10001DAB4((uint64_t)v8, &qword_101665FA8);
    static os_log_type_t.error.getter();
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_101342130;
    id v19 = v17;
    id v20 = [v19 description];
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v23 = v22;

    *(void *)(v18 + 56) = &type metadata for String;
    *(void *)(v18 + 64) = v16;
    *(void *)(v18 + 32) = v21;
    *(void *)(v18 + 40) = v23;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    sub_10001D4B0(0, &qword_101665FB0);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    v29[2](v29, isa);
    swift_release();
  }
  else
  {
    uint64_t v25 = v27;
    sub_100FCFAD0((uint64_t)v8, v27, (uint64_t (*)(void))type metadata accessor for TimeBasedKeysCriteria);
    sub_10001CD44((void *)(v26 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(void *)(v26 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
    sub_10067867C(v28, v25, (uint64_t)sub_100FCFA38, v32);
    sub_100FCFA70(v25, (uint64_t (*)(void))type metadata accessor for TimeBasedKeysCriteria);
    swift_release();
  }
}

uint64_t sub_100FCD5E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t))
{
  static os_log_type_t.default.getter();
  if (qword_101637250 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_101347BA0;
  swift_getObjectType();
  sub_10000588C((uint64_t *)&unk_101665F30);
  uint64_t v10 = String.init<A>(describing:)();
  uint64_t v12 = v11;
  *(void *)(v9 + 56) = &type metadata for String;
  unint64_t v13 = sub_10000B4CC();
  *(void *)(v9 + 32) = v10;
  *(void *)(v9 + 40) = v12;
  *(void *)(v9 + 96) = &type metadata for String;
  *(void *)(v9 + 104) = v13;
  *(void *)(v9 + 64) = v13;
  *(void *)(v9 + 72) = a3;
  *(void *)(v9 + 80) = a4;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v14 = sub_10001CD44((void *)(a1 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(void *)(a1 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  return a5(*v14, a2);
}

void sub_100FCD74C(void (*a1)(void), void *a2, uint64_t a3, const void *a4)
{
  static os_log_type_t.default.getter();
  if (qword_101637250 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_101347BA0;
  swift_getObjectType();
  sub_10000588C((uint64_t *)&unk_101665F30);
  uint64_t v9 = String.init<A>(describing:)();
  uint64_t v11 = v10;
  *(void *)(v8 + 56) = &type metadata for String;
  unint64_t v12 = sub_10000B4CC();
  *(void *)(v8 + 32) = v9;
  *(void *)(v8 + 40) = v11;
  *(void *)(v8 + 96) = &type metadata for String;
  *(void *)(v8 + 104) = v12;
  *(void *)(v8 + 64) = v12;
  *(void *)(v8 + 72) = 0xD000000000000023;
  *(void *)(v8 + 80) = 0x8000000101403D10;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  unint64_t v13 = sub_10001CD44((void *)(a3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(void *)(a3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  sub_1006BDCF8(a1, a2, (void *)*v13, a4);
}

void sub_100FCD8C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *aBlock)
{
  _Block_copy(aBlock);
  static os_log_type_t.default.getter();
  if (qword_101637250 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_101347BA0;
  swift_getObjectType();
  sub_10000588C((uint64_t *)&unk_101665F30);
  uint64_t v12 = String.init<A>(describing:)();
  uint64_t v14 = v13;
  *(void *)(v11 + 56) = &type metadata for String;
  unint64_t v15 = sub_10000B4CC();
  *(void *)(v11 + 32) = v12;
  *(void *)(v11 + 40) = v14;
  *(void *)(v11 + 96) = &type metadata for String;
  *(void *)(v11 + 104) = v15;
  *(void *)(v11 + 64) = v15;
  *(void *)(v11 + 72) = 0xD000000000000039;
  *(void *)(v11 + 80) = 0x800000010141C410;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  unint64_t v16 = (uint64_t **)sub_10001CD44((void *)(a5 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(void *)(a5 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  if (a1 < 0 || a2 < 0 || a3 < 0)
  {
    _Block_release(aBlock);
    _Block_release(aBlock);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    id v17 = *v16;
    _Block_copy(aBlock);
    sub_1006BF608(a1, a2, a3, a4, v17, (uint64_t)aBlock);
    _Block_release(aBlock);
    _Block_release(aBlock);
  }
}

void sub_100FCDAFC(uint64_t a1, uint64_t a2, uint64_t a3, void *aBlock)
{
  _Block_copy(aBlock);
  static os_log_type_t.default.getter();
  if (qword_101637250 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_101347BA0;
  swift_getObjectType();
  sub_10000588C((uint64_t *)&unk_101665F30);
  uint64_t v9 = String.init<A>(describing:)();
  uint64_t v11 = v10;
  *(void *)(v8 + 56) = &type metadata for String;
  unint64_t v12 = sub_10000B4CC();
  *(void *)(v8 + 32) = v9;
  *(void *)(v8 + 40) = v11;
  *(void *)(v8 + 96) = &type metadata for String;
  *(void *)(v8 + 104) = v12;
  *(void *)(v8 + 64) = v12;
  *(void *)(v8 + 72) = 0xD00000000000002BLL;
  *(void *)(v8 + 80) = 0x8000000101403C40;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v13 = sub_10001CD44((void *)(a3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(void *)(a3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  if (a1 < 0)
  {
    _Block_release(aBlock);
    _Block_release(aBlock);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v14 = *v13;
    _Block_copy(aBlock);
    sub_1006BF43C(a2, v14, (uint64_t)aBlock);
    _Block_release(aBlock);
    _Block_release(aBlock);
  }
}

uint64_t sub_100FCDCF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t, void, uint64_t))
{
  static os_log_type_t.default.getter();
  if (qword_101637250 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_101347BA0;
  swift_getObjectType();
  sub_10000588C((uint64_t *)&unk_101665F30);
  uint64_t v12 = String.init<A>(describing:)();
  uint64_t v14 = v13;
  *(void *)(v11 + 56) = &type metadata for String;
  unint64_t v15 = sub_10000B4CC();
  *(void *)(v11 + 32) = v12;
  *(void *)(v11 + 40) = v14;
  *(void *)(v11 + 96) = &type metadata for String;
  *(void *)(v11 + 104) = v15;
  *(void *)(v11 + 64) = v15;
  *(void *)(v11 + 72) = a5;
  *(void *)(v11 + 80) = a6;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  unint64_t v16 = sub_10001CD44((void *)(a3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(void *)(a3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  return a7(a1, a2, *v16, a4);
}

void sub_100FCDE5C(uint64_t a1, uint64_t a2, uint64_t a3, void *aBlock)
{
  _Block_copy(aBlock);
  static os_log_type_t.default.getter();
  if (qword_101637250 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_101347BA0;
  swift_getObjectType();
  sub_10000588C((uint64_t *)&unk_101665F30);
  uint64_t v9 = String.init<A>(describing:)();
  uint64_t v11 = v10;
  *(void *)(v8 + 56) = &type metadata for String;
  unint64_t v12 = sub_10000B4CC();
  *(void *)(v8 + 32) = v9;
  *(void *)(v8 + 40) = v11;
  *(void *)(v8 + 96) = &type metadata for String;
  *(void *)(v8 + 104) = v12;
  *(void *)(v8 + 64) = v12;
  *(void *)(v8 + 72) = 0xD000000000000024;
  *(void *)(v8 + 80) = 0x800000010141C3E0;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v13 = sub_10001CD44((void *)(a3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(void *)(a3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  if (a2 < 0)
  {
    _Block_release(aBlock);
    _Block_release(aBlock);
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v14 = (void *)*v13;
    _Block_copy(aBlock);
    sub_1006C096C(a1, a2, v14, (void (**)(const void *, void))aBlock);
    _Block_release(aBlock);
    _Block_release(aBlock);
  }
}

uint64_t sub_100FCE054(unint64_t a1, uint64_t a2, void (**a3)(uint64_t, uint64_t))
{
  static os_log_type_t.default.getter();
  if (qword_101637250 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_101347BA0;
  swift_getObjectType();
  sub_10000588C((uint64_t *)&unk_101665F30);
  uint64_t v7 = String.init<A>(describing:)();
  uint64_t v9 = v8;
  *(void *)(v6 + 56) = &type metadata for String;
  unint64_t v10 = sub_10000B4CC();
  *(void *)(v6 + 32) = v7;
  *(void *)(v6 + 40) = v9;
  *(void *)(v6 + 96) = &type metadata for String;
  *(void *)(v6 + 104) = v10;
  *(void *)(v6 + 64) = v10;
  *(void *)(v6 + 72) = 0xD000000000000038;
  *(void *)(v6 + 80) = 0x800000010141C3A0;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v11 = sub_10001CD44((void *)(a2 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(void *)(a2 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  return sub_1006C6B20(a1, *v11, a3);
}

void sub_100FCE1C4(uint64_t a1, char a2, uint64_t a3, const void *a4)
{
  static os_log_type_t.default.getter();
  if (qword_1016372A8 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_101347BA0;
  swift_getObjectType();
  sub_10000588C((uint64_t *)&unk_101665F30);
  uint64_t v9 = String.init<A>(describing:)();
  uint64_t v11 = v10;
  *(void *)(v8 + 56) = &type metadata for String;
  unint64_t v12 = sub_10000B4CC();
  *(void *)(v8 + 32) = v9;
  *(void *)(v8 + 40) = v11;
  *(void *)(v8 + 96) = &type metadata for String;
  *(void *)(v8 + 104) = v12;
  *(void *)(v8 + 64) = v12;
  *(void *)(v8 + 72) = 0xD00000000000001ELL;
  *(void *)(v8 + 80) = 0x800000010141C360;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v13 = sub_10001CD44((void *)(a3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(void *)(a3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  sub_1003AEFA8(a1, a2 & 1, *v13, a4);
}

uint64_t sub_100FCE33C(uint64_t a1, uint64_t a2)
{
  static os_log_type_t.default.getter();
  if (qword_1016372A8 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_101347BA0;
  swift_getObjectType();
  sub_10000588C((uint64_t *)&unk_101665F30);
  uint64_t v5 = String.init<A>(describing:)();
  uint64_t v7 = v6;
  *(void *)(v4 + 56) = &type metadata for String;
  unint64_t v8 = sub_10000B4CC();
  *(void *)(v4 + 32) = v5;
  *(void *)(v4 + 40) = v7;
  *(void *)(v4 + 96) = &type metadata for String;
  *(void *)(v4 + 104) = v8;
  *(void *)(v4 + 64) = v8;
  *(void *)(v4 + 72) = 0xD000000000000020;
  *(void *)(v4 + 80) = 0x800000010141C330;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v9 = sub_10001CD44((void *)(a1 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation), *(void *)(a1 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  return sub_1003AE024(*v9, a2);
}

uint64_t sub_100FCE49C(char a1, uint64_t a2, uint64_t a3)
{
  static os_log_type_t.default.getter();
  if (qword_1016372A8 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_101347BA0;
  swift_getObjectType();
  sub_10000588C((uint64_t *)&unk_101665F30);
  uint64_t v6 = String.init<A>(describing:)();
  uint64_t v8 = v7;
  *(void *)(v5 + 56) = &type metadata for String;
  unint64_t v9 = sub_10000B4CC();
  *(void *)(v5 + 32) = v6;
  *(void *)(v5 + 40) = v8;
  *(void *)(v5 + 96) = &type metadata for String;
  *(void *)(v5 + 104) = v9;
  *(void *)(v5 + 64) = v9;
  *(void *)(v5 + 72) = 0xD000000000000027;
  *(void *)(v5 + 80) = 0x800000010141C300;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  return sub_1003AFBE0(a1 & 1, a3);
}

uint64_t sub_100FCE5EC(uint64_t a1, uint64_t a2)
{
  static os_log_type_t.default.getter();
  if (qword_1016372A8 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_101347BA0;
  swift_getObjectType();
  sub_10000588C((uint64_t *)&unk_101665F30);
  uint64_t v4 = String.init<A>(describing:)();
  uint64_t v6 = v5;
  *(void *)(v3 + 56) = &type metadata for String;
  unint64_t v7 = sub_10000B4CC();
  *(void *)(v3 + 32) = v4;
  *(void *)(v3 + 40) = v6;
  *(void *)(v3 + 96) = &type metadata for String;
  *(void *)(v3 + 104) = v7;
  *(void *)(v3 + 64) = v7;
  *(void *)(v3 + 72) = 0xD000000000000022;
  *(void *)(v3 + 80) = 0x800000010141C2D0;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  id v8 = [self standardUserDefaults];
  NSString v9 = String._bridgeToObjectiveC()();
  id v10 = [v8 BOOLForKey:v9];

  return (*(uint64_t (**)(uint64_t, id))(a2 + 16))(a2, v10);
}

uint64_t sub_100FCE7A8(uint64_t a1)
{
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  if (!*(void *)(a1 + 16) || (v46 = a1, uint64_t v4 = sub_100723FF4(v2, v3), (v5 & 1) == 0))
  {
    long long v52 = 0u;
    long long v53 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_42;
  }
  sub_10012F428(*(void *)(a1 + 56) + 32 * v4, (uint64_t)&v52);
  swift_bridgeObjectRelease();
  if (!*((void *)&v53 + 1))
  {
LABEL_42:
    sub_10001DAB4((uint64_t)&v52, (uint64_t *)&unk_101644360);
LABEL_43:
    swift_bridgeObjectRetain();
    return a1;
  }
  sub_10000588C(&qword_101665EF8);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_43;
  }
  uint64_t v44 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v45 = v6;
  *((void *)&v53 + 1) = sub_10000588C((uint64_t *)&unk_101665F00);
  uint64_t v47 = *(void *)&v51[0] + 64;
  uint64_t v7 = 1 << *(unsigned char *)(*(void *)&v51[0] + 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & *(void *)(*(void *)&v51[0] + 64);
  int64_t v48 = (unint64_t)(v7 + 63) >> 6;
  swift_bridgeObjectRetain();
  uint64_t v49 = *(void *)&v51[0];
  swift_bridgeObjectRetain();
  int64_t v10 = 0;
  uint64_t v11 = _swiftEmptyDictionarySingleton;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      int64_t v50 = v10;
      unint64_t v14 = v13 | (v10 << 6);
    }
    else
    {
      int64_t v15 = v10 + 1;
      if (__OFADD__(v10, 1)) {
        goto LABEL_48;
      }
      if (v15 >= v48)
      {
LABEL_45:
        swift_release();
        swift_bridgeObjectRelease();
        *(void *)&long long v52 = v11;
        sub_100173E4C(&v52, v51);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        sub_10016C700(v51, v44, v45, isUniquelyReferenced_nonNull_native);
        a1 = v46;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return a1;
      }
      unint64_t v16 = *(void *)(v47 + 8 * v15);
      int64_t v17 = v10 + 1;
      if (!v16)
      {
        int64_t v17 = v10 + 2;
        if (v10 + 2 >= v48) {
          goto LABEL_45;
        }
        unint64_t v16 = *(void *)(v47 + 8 * v17);
        if (!v16)
        {
          int64_t v17 = v10 + 3;
          if (v10 + 3 >= v48) {
            goto LABEL_45;
          }
          unint64_t v16 = *(void *)(v47 + 8 * v17);
          if (!v16)
          {
            int64_t v17 = v10 + 4;
            if (v10 + 4 >= v48) {
              goto LABEL_45;
            }
            unint64_t v16 = *(void *)(v47 + 8 * v17);
            if (!v16)
            {
              int64_t v17 = v10 + 5;
              if (v10 + 5 >= v48) {
                goto LABEL_45;
              }
              unint64_t v16 = *(void *)(v47 + 8 * v17);
              if (!v16)
              {
                uint64_t v18 = v10 + 6;
                if (v10 + 6 >= v48) {
                  goto LABEL_45;
                }
                unint64_t v16 = *(void *)(v47 + 8 * v18);
                if (!v16)
                {
                  while (1)
                  {
                    int64_t v17 = v18 + 1;
                    if (__OFADD__(v18, 1)) {
                      goto LABEL_49;
                    }
                    if (v17 >= v48) {
                      goto LABEL_45;
                    }
                    unint64_t v16 = *(void *)(v47 + 8 * v17);
                    ++v18;
                    if (v16) {
                      goto LABEL_29;
                    }
                  }
                }
                int64_t v17 = v10 + 6;
              }
            }
          }
        }
      }
LABEL_29:
      unint64_t v9 = (v16 - 1) & v16;
      int64_t v50 = v17;
      unint64_t v14 = __clz(__rbit64(v16)) + (v17 << 6);
    }
    uint64_t v19 = 16 * v14;
    id v20 = (uint64_t *)(*(void *)(v49 + 48) + v19);
    uint64_t v22 = *v20;
    unint64_t v21 = v20[1];
    uint64_t v23 = (uint64_t *)(*(void *)(v49 + 56) + v19);
    uint64_t v25 = *v23;
    unint64_t v24 = v23[1];
    sub_1000361E0(*v20, v21);
    sub_1000361E0(v25, v24);
    sub_1000361E0(v22, v21);
    sub_1000361E0(v25, v24);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    id v27 = [self UUIDWithData:isa];

    sub_1000361E0(v25, v24);
    char v28 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v51[0] = v11;
    unint64_t v30 = sub_10072539C((uint64_t)v27);
    uint64_t v31 = v11[2];
    BOOL v32 = (v29 & 1) == 0;
    uint64_t v33 = v31 + v32;
    if (__OFADD__(v31, v32)) {
      break;
    }
    char v34 = v29;
    if (v11[3] >= v33)
    {
      if (v28)
      {
        uint64_t v11 = *(void **)&v51[0];
        if (v29) {
          goto LABEL_8;
        }
      }
      else
      {
        sub_100E88044();
        uint64_t v11 = *(void **)&v51[0];
        if (v34) {
          goto LABEL_8;
        }
      }
    }
    else
    {
      sub_100E78998(v33, v28);
      unint64_t v35 = sub_10072539C((uint64_t)v27);
      if ((v34 & 1) != (v36 & 1)) {
        goto LABEL_50;
      }
      unint64_t v30 = v35;
      uint64_t v11 = *(void **)&v51[0];
      if (v34)
      {
LABEL_8:
        uint64_t v12 = v11[7] + 16 * v30;
        sub_10001CFB8(*(void *)v12, *(void *)(v12 + 8));
        *(void *)uint64_t v12 = v25;
        *(void *)(v12 + 8) = v24;
        goto LABEL_9;
      }
    }
    v11[(v30 >> 6) + 8] |= 1 << v30;
    *(void *)(v11[6] + 8 * v30) = v27;
    uint64_t v37 = (uint64_t *)(v11[7] + 16 * v30);
    *uint64_t v37 = v25;
    v37[1] = v24;
    uint64_t v38 = v11[2];
    BOOL v39 = __OFADD__(v38, 1);
    uint64_t v40 = v38 + 1;
    if (v39) {
      goto LABEL_47;
    }
    v11[2] = v40;
    id v41 = v27;
LABEL_9:

    swift_bridgeObjectRelease();
    sub_10001CFB8(v22, v21);
    sub_10001CFB8(v25, v24);
    sub_10001CFB8(v22, v21);
    sub_10001CFB8(v25, v24);
    int64_t v10 = v50;
  }
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  sub_10001D4B0(0, (unint64_t *)&qword_101655B70);
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100FCEC90()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = (v5 + v3 + v4) & ~v3;
  unint64_t v8 = (((v5 + v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = (((v8 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;

  uint64_t v10 = v0 + v4;
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v11(v10, v1);
  v11(v0 + v7, v1);
  sub_10001CFB8(*(void *)(v0 + v8), *(void *)(v0 + v8 + 8));
  sub_10001CFB8(*(void *)(v0 + v9), *(void *)(v0 + v9 + 8));
  swift_release();

  return _swift_deallocObject(v0, ((v9 + 23) & 0xFFFFFFFFFFFFFFF8) + 16, v6);
}

uint64_t sub_100FCEDDC()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = (v5 + v3 + v4) & ~v3;
  unint64_t v7 = (((((v5 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (((v7 + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = v0 + v4;
  uint64_t v10 = v0 + v6;
  uint64_t v11 = *(void *)(v0 + v7);
  uint64_t v12 = swift_task_alloc();
  long long v13 = *(_OWORD *)(v0 + v8);
  *(void *)(v1 + 16) = v12;
  *(void *)uint64_t v12 = v1;
  *(void *)(v12 + 8) = sub_100033F68;
  *(_OWORD *)(v12 + 24) = v13;
  unint64_t v16 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1016565B0 + dword_1016565B0);
  unint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v12 + 40) = v14;
  *unint64_t v14 = v12;
  v14[1] = sub_100FC9734;
  return v16(v9, v10, v11);
}

uint64_t sub_100FCEF80()
{
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100FCEFC8()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 16);
  long long v4 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_100033F68;
  *(_OWORD *)(v2 + 32) = v3;
  *(_OWORD *)(v2 + 48) = v4;
  return _swift_task_switch(sub_100FC904C, 0, 0);
}

void sub_100FCF074(void *a1, char a2)
{
  sub_100FC881C(a1, a2 & 1, *(void (**)(void *, void *))(v2 + 16));
}

uint64_t sub_100FCF094()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_100FCF0CC(void *a1, char a2)
{
  sub_100FC83CC(a1, a2 & 1, *(void (**)(void *))(v2 + 16));
}

void sub_100FCF0D8(uint64_t a1)
{
  sub_100FC6B48(a1, *(void (**)(void))(v1 + 16));
}

uint64_t sub_100FCF0E0(long long *a1)
{
  return sub_100684894(a1, *(uint64_t (**)(long long *))(v1 + 16));
}

uint64_t sub_100FCF0E8(uint64_t a1)
{
  return sub_100684900(a1, *(uint64_t (**)(_OWORD *))(v1 + 16));
}

uint64_t sub_100FCF0F0(uint64_t a1)
{
  return a1;
}

uint64_t sub_100FCF13C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 11) {
    return sub_100037A24(a1, a2);
  }
  return a1;
}

uint64_t sub_100FCF150()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 56) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100FCF22C(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v10 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = sub_100033F68;
  return sub_10065DF70(a1, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_100FCF33C(char a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(a1 & 1);
}

uint64_t sub_100FCF368()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100FCF3B0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  void *v9 = v2;
  v9[1] = sub_100033F68;
  return sub_10037A9FC(a1, v4, v5, v6, v7, v8);
}

void sub_100FCF478(uint64_t a1, unint64_t a2, uint64_t a3)
{
  sub_10121EA64(a1, a2, a3, *(void *)(v3 + 16));
}

void sub_100FCF480(unint64_t a1)
{
  sub_10037E1D4(a1, *(void (**)(void))(v1 + 16));
}

uint64_t sub_100FCF488()
{
  swift_unknownObjectRelease();

  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100FCF4D0()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v3 = swift_task_alloc();
  long long v4 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_100033F68;
  *(void *)(v3 + 40) = v2;
  *(_OWORD *)(v3 + 24) = v4;
  return _swift_task_switch(sub_100FC7B1C, 0, 0);
}

unint64_t sub_100FCF584()
{
  unint64_t result = qword_101665F80;
  if (!qword_101665F80)
  {
    sub_10000592C(&qword_101665F78);
    sub_100FCF628(&qword_101665F88, (void (*)(uint64_t))type metadata accessor for KeySyncMetadataDisplay);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101665F80);
  }
  return result;
}

uint64_t sub_100FCF628(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100FCF670()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 41) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = *(void *)(sub_10000588C(&qword_101638CF0) - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v5 + v7) & ~v7;
  uint64_t v9 = *(void *)(v6 + 64);
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v10(v0 + v4, v1);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v0 + v8, 1, v1)) {
    v10(v0 + v8, v1);
  }
  swift_release();

  return _swift_deallocObject(v0, ((v9 + v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v3 | v7 | 7);
}

uint64_t sub_100FCF808(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 41) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = v6 + *(void *)(v5 + 64);
  uint64_t v8 = *(void *)(sub_10000588C(&qword_101638CF0) - 8);
  unint64_t v9 = (v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v1 + 16);
  uint64_t v11 = *(void *)(v1 + 24);
  uint64_t v12 = *(void *)(v1 + 32);
  uint64_t v13 = v1 + v6;
  uint64_t v14 = v1 + v9;
  uint64_t v15 = *(void *)(v1 + ((*(void *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8));
  char v16 = *(unsigned char *)(v1 + 40);
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v17;
  void *v17 = v3;
  v17[1] = sub_10001D2E4;
  return sub_10068995C(a1, v10, v11, v12, v16, v13, v14, v15);
}

void sub_100FCF9C0(uint64_t a1, uint64_t a2)
{
  sub_100FC75CC(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_100FCF9C8(uint64_t a1, char a2)
{
  return sub_100FC73B8(a1, a2 & 1, *(void (**)(uint64_t, uint64_t))(v2 + 16));
}

uint64_t sub_100FCF9D4(uint64_t a1)
{
  return sub_100687620(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(unsigned __int8 *)(v1 + 56));
}

void sub_100FCF9FC(uint64_t a1)
{
  sub_100691D90(a1, *(void *)(v1 + 16), &qword_101665FA0);
}

void sub_100FCFA28(uint64_t a1, unint64_t a2)
{
  sub_100FC3A6C(a1, a2, *(void *)(v2 + 16));
}

void sub_100FCFA30(uint64_t a1)
{
  sub_100FC3AD8(a1, *(void *)(v1 + 16));
}

void sub_100FCFA38(uint64_t a1)
{
  sub_100691D90(a1, *(void *)(v1 + 16), &qword_101665FB0);
}

void sub_100FCFA64(uint64_t a1)
{
  sub_100FC5614(a1, *(void *)(v1 + 16));
}

uint64_t sub_100FCFA70(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100FCFAD0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void sub_100FCFB38(uint64_t a1)
{
  sub_100691D7C(a1, *(void *)(v1 + 16));
}

unsigned char *storeEnumTagSinglePayload for BeaconManagerTrampoline.BeaconManagerTrampolineError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100FCFC0CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BeaconManagerTrampoline.BeaconManagerTrampolineError()
{
  return &type metadata for BeaconManagerTrampoline.BeaconManagerTrampolineError;
}

unint64_t sub_100FCFC48()
{
  unint64_t result = qword_101665FD0;
  if (!qword_101665FD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101665FD0);
  }
  return result;
}

unint64_t TimeBasedKey.debugDescription.getter()
{
  _StringGuts.grow(_:)(41);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._object = (void *)0x80000001014025B0;
  v1._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v1);
  type metadata accessor for TimeBasedKey();
  type metadata accessor for DateInterval();
  sub_10042B604();
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  return 0xD000000000000015;
}

uint64_t type metadata accessor for TimeBasedKey()
{
  uint64_t result = qword_101666038;
  if (!qword_101666038) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for TimeBasedKey(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unsigned int v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *unsigned int v4 = *a2;
    unsigned int v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    uint64_t v7 = *(int *)(a3 + 20);
    uint64_t v8 = (char *)a1 + v7;
    unint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for DateInterval();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    uint64_t v11 = *(int *)(a3 + 24);
    uint64_t v12 = (char *)v4 + v11;
    uint64_t v13 = (uint64_t *)((char *)a2 + v11);
    unint64_t v14 = *(uint64_t *)((char *)a2 + v11 + 8);
    if (v14 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
    }
    else
    {
      uint64_t v16 = *v13;
      sub_1000361E0(*v13, v14);
      *(void *)uint64_t v12 = v16;
      *((void *)v12 + 1) = v14;
    }
    uint64_t v17 = v13[2];
    unint64_t v18 = v13[3];
    sub_1000361E0(v17, v18);
    *((void *)v12 + 2) = v17;
    *((void *)v12 + 3) = v18;
    uint64_t v19 = v13 + 4;
    unint64_t v20 = v13[5];
    if (v20 >> 60 == 15)
    {
      *((_OWORD *)v12 + 2) = *(_OWORD *)v19;
    }
    else
    {
      uint64_t v21 = *v19;
      sub_1000361E0(*v19, v13[5]);
      *((void *)v12 + 4) = v21;
      *((void *)v12 + 5) = v20;
    }
  }
  return v4;
}

uint64_t destroy for TimeBasedKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  unsigned int v6 = (uint64_t *)(a1 + *(int *)(a2 + 24));
  unint64_t v7 = v6[1];
  if (v7 >> 60 != 15) {
    sub_10001CFB8(*v6, v7);
  }
  uint64_t result = sub_10001CFB8(v6[2], v6[3]);
  unint64_t v9 = v6[5];
  if (v9 >> 60 != 15)
  {
    uint64_t v10 = v6[4];
    return sub_10001CFB8(v10, v9);
  }
  return result;
}

void *initializeWithCopy for TimeBasedKey(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  unint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for DateInterval();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (void *)((char *)a2 + v10);
  unint64_t v13 = *(void *)((char *)a2 + v10 + 8);
  if (v13 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
  }
  else
  {
    uint64_t v14 = *v12;
    sub_1000361E0(*v12, v13);
    *(void *)uint64_t v11 = v14;
    *((void *)v11 + 1) = v13;
  }
  uint64_t v15 = v12[2];
  unint64_t v16 = v12[3];
  sub_1000361E0(v15, v16);
  *((void *)v11 + 2) = v15;
  *((void *)v11 + 3) = v16;
  uint64_t v17 = v12 + 4;
  unint64_t v18 = v12[5];
  if (v18 >> 60 == 15)
  {
    *((_OWORD *)v11 + 2) = *(_OWORD *)v17;
  }
  else
  {
    uint64_t v19 = *v17;
    sub_1000361E0(*v17, v12[5]);
    *((void *)v11 + 4) = v19;
    *((void *)v11 + 5) = v18;
  }
  return a1;
}

void *assignWithCopy for TimeBasedKey(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  unint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for DateInterval();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  unint64_t v13 = *(void *)((char *)a2 + v10 + 8);
  if (*(void *)((char *)a1 + v10 + 8) >> 60 == 15)
  {
    if (v13 >> 60 != 15)
    {
      uint64_t v14 = *v12;
      sub_1000361E0(*v12, v13);
      *uint64_t v11 = v14;
      v11[1] = v13;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v13 >> 60 == 15)
  {
    sub_100A989D4((uint64_t)v11);
LABEL_6:
    *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
    goto LABEL_8;
  }
  uint64_t v15 = *v12;
  sub_1000361E0(*v12, v13);
  uint64_t v16 = *v11;
  unint64_t v17 = v11[1];
  *uint64_t v11 = v15;
  v11[1] = v13;
  sub_10001CFB8(v16, v17);
LABEL_8:
  uint64_t v18 = v12[2];
  unint64_t v19 = v12[3];
  sub_1000361E0(v18, v19);
  uint64_t v20 = v11[2];
  unint64_t v21 = v11[3];
  v11[2] = v18;
  v11[3] = v19;
  sub_10001CFB8(v20, v21);
  uint64_t v22 = v12 + 4;
  unint64_t v23 = v12[5];
  if ((unint64_t)v11[5] >> 60 != 15)
  {
    if (v23 >> 60 != 15)
    {
      uint64_t v25 = *v22;
      sub_1000361E0(*v22, v12[5]);
      uint64_t v26 = v11[4];
      unint64_t v27 = v11[5];
      v11[4] = v25;
      v11[5] = v23;
      sub_10001CFB8(v26, v27);
      return a1;
    }
    sub_10042BA84((uint64_t)(v11 + 4));
    goto LABEL_13;
  }
  if (v23 >> 60 == 15)
  {
LABEL_13:
    *((_OWORD *)v11 + 2) = *(_OWORD *)v22;
    return a1;
  }
  uint64_t v24 = *v22;
  sub_1000361E0(*v22, v12[5]);
  v11[4] = v24;
  v11[5] = v23;
  return a1;
}

void *initializeWithTake for TimeBasedKey(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  unint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for DateInterval();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (_OWORD *)((char *)a1 + v10);
  uint64_t v12 = (_OWORD *)((char *)a2 + v10);
  long long v13 = v12[1];
  *uint64_t v11 = *v12;
  v11[1] = v13;
  v11[2] = v12[2];
  return a1;
}

void *assignWithTake for TimeBasedKey(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  unint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for DateInterval();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (uint64_t)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  unint64_t v13 = *(void *)((char *)a1 + v10 + 8);
  if (v13 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v14 = *((void *)v12 + 1);
  if (v14 >> 60 == 15)
  {
    sub_100A989D4(v11);
LABEL_4:
    *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
    goto LABEL_6;
  }
  uint64_t v15 = *(void *)v11;
  *(void *)uint64_t v11 = *(void *)v12;
  *(void *)(v11 + 8) = v14;
  sub_10001CFB8(v15, v13);
LABEL_6:
  uint64_t v16 = *(void *)(v11 + 16);
  unint64_t v17 = *(void *)(v11 + 24);
  *(_OWORD *)(v11 + 16) = *((_OWORD *)v12 + 1);
  sub_10001CFB8(v16, v17);
  uint64_t v18 = v12 + 32;
  unint64_t v19 = *(void *)(v11 + 40);
  if (v19 >> 60 != 15)
  {
    unint64_t v20 = *((void *)v12 + 5);
    if (v20 >> 60 != 15)
    {
      uint64_t v21 = *(void *)(v11 + 32);
      *(void *)(v11 + 32) = *v18;
      *(void *)(v11 + 40) = v20;
      sub_10001CFB8(v21, v19);
      return a1;
    }
    sub_10042BA84(v11 + 32);
  }
  *(_OWORD *)(v11 + 32) = *(_OWORD *)v18;
  return a1;
}

uint64_t getEnumTagSinglePayload for TimeBasedKey(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100FD0590);
}

uint64_t sub_100FD0590(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DateInterval();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + *(int *)(a3 + 24) + 24) >> 60;
    if (((4 * v12) & 0xC) != 0) {
      return 16 - ((4 * v12) & 0xC | (v12 >> 2));
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for TimeBasedKey(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100FD067C);
}

uint64_t sub_100FD067C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for DateInterval();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    uint64_t v13 = a1 + *(int *)(a4 + 24);
    *(void *)(v13 + 16) = 0;
    *(void *)(v13 + 24) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  return result;
}

uint64_t sub_100FD074C()
{
  uint64_t result = type metadata accessor for DateInterval();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100FD07F0()
{
  return 0;
}

uint64_t sub_100FD07FC@<X0>(uint64_t a1@<X8>)
{
  return sub_100FD082C((uint64_t (*)(void))&type metadata accessor for UUID, a1);
}

uint64_t sub_100FD0814@<X0>(uint64_t a1@<X8>)
{
  return sub_100FD082C((uint64_t (*)(void))&type metadata accessor for Date, a1);
}

uint64_t sub_100FD082C@<X0>(uint64_t (*a1)(void)@<X2>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1(0);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);

  return v4(a2, 1, 1, v3);
}

double sub_100FD089C@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t sub_100FD08B4()
{
  return 0x100000000;
}

uint64_t sub_100FD08D0()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100FD0960()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_100FD09E0()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100FD0A70()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_100FD0AF0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100FD0B38(void *a1)
{
  return sub_100FD0B98(a1, (uint64_t *)&unk_101666850, (uint64_t)sub_100FFD144, &qword_10165F650, &qword_10165F658);
}

uint64_t sub_100FD0B68(void *a1)
{
  return sub_100FD0B98(a1, &qword_1016668D0, (uint64_t)sub_100FFD2D4, (uint64_t *)&unk_1016668C0, (unint64_t *)&unk_10165F6E0);
}

uint64_t sub_100FD0B98(void *a1, uint64_t *a2, uint64_t a3, uint64_t *a4, unint64_t *a5)
{
  id v9 = [a1 invalidationHandler];
  if (v9)
  {
    _Block_release(v9);
    __chkstk_darwin(v10);
    sub_10000588C(a2);
    OS_dispatch_queue.sync<A>(execute:)();
    return v24;
  }
  else
  {
    if (qword_101637490 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100010324(v12, (uint64_t)qword_10170F2E0);
    swift_retain_n();
    id v13 = a1;
    unint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc();
      unint64_t v17 = (void *)swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136446466;
      uint64_t v25 = v23;
      sub_10000588C(a4);
      sub_100062734(a5, a4);
      v18._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
      String.append(_:)(v18);
      swift_bridgeObjectRelease();
      v19._countAndFlagsBits = 8250;
      v19._object = (void *)0xE200000000000000;
      String.append(_:)(v19);
      v20._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
      String.append(_:)(v20);
      swift_bridgeObjectRelease();
      v21._countAndFlagsBits = 62;
      v21._object = (void *)0xE100000000000000;
      String.append(_:)(v21);
      swift_release();
      sub_1008FA0F0(60, 0xE100000000000000, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v16 + 12) = 2112;
      id v22 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v17 = v13;

      _os_log_impl((void *)&_mh_execute_header, v14, v15, "%{public}s: Not adding invalidated connection: %@", (uint8_t *)v16, 0x16u);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    return 0;
  }
}

uint64_t sub_100FD0F00(void *a1)
{
  return sub_100FD0B98(a1, (uint64_t *)&unk_101666820, (uint64_t)sub_100FFD09C, &qword_10165F630, &qword_10165F638);
}

uint64_t sub_100FD0F30(void *a1)
{
  return sub_100FD0B98(a1, &qword_101666810, (uint64_t)sub_100FFCFF4, (uint64_t *)&unk_10165F600, (unint64_t *)&unk_101653E10);
}

uint64_t sub_100FD0F60(void *a1)
{
  return sub_100FD0B98(a1, &qword_101666848, (uint64_t)sub_100FFD0F4, (uint64_t *)&unk_10165F640, &qword_101666840);
}

uint64_t sub_100FD0F90(void *a1)
{
  return sub_100FD0B98(a1, &qword_101666878, (uint64_t)sub_100FFD19C, (uint64_t *)&unk_10165F5C0, &qword_101666870);
}

uint64_t sub_100FD0FC0(void *a1)
{
  return sub_100FD0B98(a1, &qword_101666818, (uint64_t)sub_100FFD04C, (uint64_t *)&unk_10165F620, (unint64_t *)&unk_1016649B0);
}

uint64_t sub_100FD0FF0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 16))();
}

uint64_t sub_100FD0FFC(uint64_t a1, uint64_t a2)
{
  v3[13] = a2;
  v3[14] = v2;
  v3[12] = a1;
  uint64_t v5 = sub_10000588C(&qword_101639C78);
  v3[15] = v5;
  v3[16] = *(void *)(v5 - 8);
  v3[17] = swift_task_alloc();
  if (a1)
  {
    swift_getObjectType();
    uint64_t v6 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v8 = v7;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
  }
  v3[18] = v6;
  v3[19] = v8;
  return _swift_task_switch(sub_100FD1100, v6, v8);
}

uint64_t sub_100FD1100()
{
  v0[20] = AsyncCompactMapSequence.Iterator.baseIterator.modify();
  uint64_t v1 = sub_10000588C(&qword_101665500);
  uint64_t v2 = sub_100062734(&qword_101666600, &qword_101665500);
  uint64_t v3 = (void *)swift_task_alloc();
  v0[21] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_100FD1210;
  uint64_t v4 = v0[12];
  uint64_t v5 = v0[13];
  return __sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v0 + 8, v4, v5, v0 + 10, v1, v2);
}

uint64_t sub_100FD1210()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 144);
    uint64_t v4 = *(void *)(v2 + 152);
    uint64_t v5 = sub_100FD17A8;
  }
  else
  {
    (*(void (**)(void))(v2 + 160))();
    uint64_t v3 = *(void *)(v2 + 144);
    uint64_t v4 = *(void *)(v2 + 152);
    uint64_t v5 = sub_100FD1338;
  }
  return _swift_task_switch(v5, v3, v4);
}

uint64_t sub_100FD1338()
{
  int v1 = *(unsigned __int8 *)(v0 + 72);
  if (v1 == 255)
  {
    swift_task_dealloc();
    uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
    return v2(0);
  }
  else
  {
    uint64_t v5 = *(void *)(v0 + 128);
    uint64_t v4 = *(void *)(v0 + 136);
    uint64_t v6 = *(void *)(v0 + 112);
    uint64_t v7 = *(void *)(v0 + 120);
    *(void *)(v0 + 48) = *(void *)(v0 + 64);
    *(unsigned char *)(v0 + 56) = v1 & 1;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v6, v7);
    uint64_t v8 = (int *)AsyncCompactMapSequence.Iterator.transform.getter();
    *(void *)(v0 + 176) = v9;
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v7);
    uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t))((char *)v8 + *v8);
    uint64_t v10 = (void *)swift_task_alloc();
    *(void *)(v0 + 184) = v10;
    *uint64_t v10 = v0;
    v10[1] = sub_100FD14E8;
    return v11(v0 + 88, v0 + 48);
  }
}

uint64_t sub_100FD14E8()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_release();
  uint64_t v2 = *(void *)(v1 + 152);
  uint64_t v3 = *(void *)(v1 + 144);
  return _swift_task_switch(sub_100FD1644, v3, v2);
}

uint64_t sub_100FD1644()
{
  uint64_t v1 = v0[11];
  if (v1)
  {
    swift_task_dealloc();
    uint64_t v2 = (uint64_t (*)(uint64_t))v0[1];
    return v2(v1);
  }
  else
  {
    v0[20] = AsyncCompactMapSequence.Iterator.baseIterator.modify();
    uint64_t v4 = sub_10000588C(&qword_101665500);
    uint64_t v5 = sub_100062734(&qword_101666600, &qword_101665500);
    uint64_t v6 = (void *)swift_task_alloc();
    v0[21] = v6;
    *uint64_t v6 = v0;
    v6[1] = sub_100FD1210;
    uint64_t v7 = v0[12];
    uint64_t v8 = v0[13];
    return __sScI4next9isolation7ElementQzSgScA_pSgYi_tYa7FailureQzYKFTj(v0 + 8, v7, v8, v0 + 10, v4, v5);
  }
}

uint64_t sub_100FD17A8()
{
  (*(void (**)(void))(v0 + 160))();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100FD1828()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170F0B0);
  sub_100010324(v0, (uint64_t)qword_10170F0B0);
  return Logger.init(subsystem:category:)();
}

uint64_t type metadata accessor for BTFindingTrampoline()
{
  return self;
}

Swift::Int sub_100FD1F04()
{
  return Hasher._finalize()();
}

uint64_t sub_100FD1F5C()
{
  return String.hash(into:)();
}

Swift::Int sub_100FD1F78()
{
  return Hasher._finalize()();
}

uint64_t sub_100FD1FCC@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1015A3AA0, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3 != 0;
  return result;
}

void sub_100FD2020(void *a1@<X8>)
{
  *a1 = 0xD00000000000002ELL;
  a1[1] = 0x80000001013EF550;
}

void sub_100FD2040()
{
  uint64_t v1 = v0;
  if (qword_101637340 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100010324(v2, (uint64_t)qword_10170F0B0);
  Swift::Int v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "All sessions went away.", v5, 2u);
    swift_slowDealloc();
  }

  uint64_t v6 = *(void (**)(uint64_t))(v1 + 40);
  if (v6)
  {
    uint64_t v7 = swift_retain();
    v6(v7);
    sub_1000A1534((uint64_t)v6);
  }
}

uint64_t sub_100FD2160()
{
  return sub_1000A1534(*(void *)(v0 + 40));
}

uint64_t sub_100FD2168()
{
  swift_bridgeObjectRelease();
  sub_1000A1534(*(void *)(v0 + 40));

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for BTFindingServiceConnections()
{
  uint64_t result = qword_101666170;
  if (!qword_101666170) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100FD2204()
{
  return swift_initClassMetadata2();
}

uint64_t sub_100FD2248()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_101666080);
  uint64_t v1 = sub_100010324(v0, (uint64_t)qword_101666080);
  if (qword_101637340 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100010324(v0, (uint64_t)qword_10170F0B0);
  Swift::Int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

BOOL sub_100FD2310()
{
  swift_beginAccess();
  uint64_t v0 = swift_bridgeObjectRetain();
  uint64_t v1 = sub_10115B944(v0);
  swift_bridgeObjectRelease();
  if (v1)
  {
    uint64_t v2 = (void *)XPCSession.connection.getter();
    uint64_t v3 = NSXPCConnection.codeSigningIdentity.getter();
    unint64_t v5 = v4;

    if (qword_101637348 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100010324(v6, (uint64_t)qword_101666080);
    swift_bridgeObjectRetain_n();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136446210;
      swift_bridgeObjectRetain();
      sub_1008FA0F0(v3, v5, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Client: %{public}s", v9, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    if (v3 == 0xD000000000000017 && v5 == 0x8000000101408490
      || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_release();
      swift_bridgeObjectRelease();
      return 1;
    }
    else
    {
      BOOL v10 = sub_10113BB28();
      swift_bridgeObjectRelease();
      swift_release();
    }
  }
  else
  {
    return 0;
  }
  return v10;
}

unint64_t sub_100FD25EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v8 = (void *)0xE000000000000000;
  unint64_t v15 = 0;
  unint64_t v16 = 0xE000000000000000;
  _StringGuts.grow(_:)(35);
  swift_bridgeObjectRelease();
  unint64_t v15 = 0xD000000000000013;
  unint64_t v16 = 0x800000010141C730;
  v14[1] = a2;
  v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 0x7469206B726F5720;
  v10._object = (void *)0xEC000000203A6D65;
  String.append(_:)(v10);
  if (a1)
  {
    WorkItemQueue.WorkItem.id.getter();
    a1 = UUID.uuidString.getter();
    os_log_type_t v8 = v11;
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  v12._countAndFlagsBits = a1;
  v12._object = v8;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  return v15;
}

unint64_t sub_100FD2784()
{
  return sub_100FD25EC(*v0, v0[1]);
}

unint64_t sub_100FD278C(unint64_t a1)
{
  if (!(a1 >> 62))
  {
    strcpy((char *)v10, ".underlying(");
    BYTE5(v10[1]) = 0;
    HIWORD(v10[1]) = -5120;
    sub_1000600A8(a1);
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    v4._countAndFlagsBits = String.init<A>(describing:)();
    String.append(_:)(v4);
    swift_bridgeObjectRelease();
    v5._countAndFlagsBits = 41;
    v5._object = (void *)0xE100000000000000;
    String.append(_:)(v5);
    sub_100060090(a1);
    return v10[0];
  }
  if (a1 >> 62 == 1)
  {
    strcpy((char *)v10, ".response(");
    BYTE3(v10[1]) = 0;
    HIDWORD(v10[1]) = -369098752;
    unint64_t v2 = 0xE800000000000000;
    uint64_t v3 = 0x737365636375732ELL;
    switch((char)a1)
    {
      case 1:
        uint64_t v3 = 0x64696C61766E692ELL;
        unint64_t v2 = 0xED00006574617453;
        break;
      case 2:
        uint64_t v7 = 0x6769666E6F43;
        goto LABEL_10;
      case 3:
        uint64_t v7 = 0x6874676E654CLL;
LABEL_10:
        unint64_t v2 = v7 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
        goto LABEL_12;
      case 4:
        unint64_t v2 = 0xED00006D61726150;
LABEL_12:
        uint64_t v3 = 0x64696C61766E692ELL;
        break;
      case 5:
        uint64_t v3 = 0x64696C61766E692ELL;
        unint64_t v2 = 0xEF646E616D6D6F43;
        break;
      default:
        break;
    }
    unint64_t v8 = v2;
    String.append(_:)(*(Swift::String *)&v3);
    swift_bridgeObjectRelease();
    v9._countAndFlagsBits = 41;
    v9._object = (void *)0xE100000000000000;
    String.append(_:)(v9);
    return v10[0];
  }
  unint64_t result = 0x6E776F6E6B6E752ELL;
  switch(a1)
  {
    case 0x8000000000000001:
      unint64_t result = 0x74756F656D69742ELL;
      break;
    case 0x8000000000000002:
      unint64_t result = 0x4E64726F6365722ELL;
      break;
    case 0x8000000000000003:
    case 0x8000000000000007:
    case 0x800000000000000BLL:
      unint64_t result = 0xD000000000000012;
      break;
    case 0x8000000000000004:
      unint64_t result = 0xD000000000000010;
      break;
    case 0x8000000000000005:
      unint64_t result = 0x6F707075736E752ELL;
      break;
    case 0x8000000000000006:
      unint64_t result = 0x64696C61766E692ELL;
      break;
    case 0x8000000000000008:
      unint64_t result = 0x64696C61766E692ELL;
      break;
    case 0x8000000000000009:
      unint64_t result = 0xD000000000000014;
      break;
    case 0x800000000000000ALL:
      unint64_t result = 0xD000000000000016;
      break;
    case 0x800000000000000CLL:
      unint64_t result = 0xD000000000000016;
      break;
    case 0x800000000000000DLL:
      unint64_t result = 0xD000000000000016;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100FD2B30()
{
  return sub_100FD278C(*v0);
}

uint64_t sub_100FD2B38(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  sub_10000588C((uint64_t *)&unk_101665590);
  uint64_t v4 = swift_task_alloc();
  v2[5] = v4;
  type metadata accessor for UUID();
  v2[6] = swift_task_alloc();
  swift_defaultActor_initialize();
  *(void *)(v1 + 112) = 0xD000000000000010;
  *(void *)(v1 + 120) = 0x80000001013876A0;
  type metadata accessor for XPCSessionManager();
  swift_allocObject();
  *(void *)(v1 + 144) = XPCSessionManager.init(name:)();
  *(void *)(v1 + 152) = 0;
  type metadata accessor for BTFindingServiceConnections();
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 40) = 0;
  *(void *)(v5 + 48) = 0;
  *(void *)(v1 + 160) = sub_100F36EDC(v5);
  type metadata accessor for WorkItemQueue();
  UUID.init()();
  *(void *)(v1 + 168) = WorkItemQueue.__allocating_init(name:identifier:)();
  *(void *)(v1 + 176) = 0;
  *(_DWORD *)(v1 + 183) = 0;
  *(void *)(v1 + 192) = &_swiftEmptySetSingleton;
  *(void *)(v1 + 200) = _swiftEmptyDictionarySingleton;
  *(void *)(v1 + 208) = _swiftEmptyDictionarySingleton;
  *(void *)(v1 + 216) = _swiftEmptyDictionarySingleton;
  *(void *)(v1 + 128) = a1;
  type metadata accessor for CentralManager();
  sub_10000588C((uint64_t *)&unk_101666890);
  uint64_t v6 = type metadata accessor for CentralManager.Options();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_101347500;
  swift_retain();
  static CentralManager.Options.allowDuplicates.getter();
  static CentralManager.Options.enableFindMy.getter();
  static CentralManager.Options.needsRestrictedStateOperation.getter();
  v2[2] = v8;
  sub_100FFD1F4((unint64_t *)&unk_1016655A0, 255, (void (*)(uint64_t))&type metadata accessor for CentralManager.Options);
  sub_10000588C((uint64_t *)&unk_1016668A0);
  sub_100062734((unint64_t *)&unk_1016655B0, (uint64_t *)&unk_1016668A0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(v4, 0, 1, v6);
  Swift::String v9 = (void *)swift_task_alloc();
  v2[7] = v9;
  void *v9 = v2;
  v9[1] = sub_100FD2E9C;
  return CentralManager.__allocating_init(options:)(v4);
}

uint64_t sub_100FD2E9C(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 32);
  swift_task_dealloc();
  *(void *)(v3 + 136) = a1;
  return _swift_task_switch(sub_100FD2FB4, v3, 0);
}

uint64_t sub_100FD2FB4()
{
  uint64_t v1 = *(void *)(v0 + 32);
  swift_release();
  uint64_t v2 = *(void *)(v1 + 160);
  uint64_t v3 = swift_allocObject();
  swift_weakInit();
  uint64_t v4 = *(void *)(v2 + 40);
  *(void *)(v2 + 40) = sub_100FFD23C;
  *(void *)(v2 + 48) = v3;
  sub_1000A1534(v4);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v6 = *(void *)(v0 + 32);
  return v5(v6);
}

uint64_t sub_100FD3080()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    type metadata accessor for Transaction();
    swift_retain();
    static Transaction.asyncTask(name:block:)();
    return swift_release_n();
  }
  return result;
}

uint64_t sub_100FD3118()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100033F68;
  return sub_100FD8A28();
}

uint64_t sub_100FD31A8()
{
  uint64_t v1 = type metadata accessor for XPCServiceDescription();
  uint64_t v39 = *(void *)(v1 - 8);
  uint64_t v40 = v1;
  __chkstk_darwin(v1);
  uint64_t v37 = (char *)&v35 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for MachServiceName();
  uint64_t v36 = *(void *)(v3 - 8);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v35 - v7;
  MachServiceName.init(_:)();
  uint64_t v9 = type metadata accessor for BTFindingService();
  uint64_t v44 = v9;
  uint64_t v45 = &off_1016004D8;
  v43[0] = v0;
  Swift::String v10 = (objc_class *)type metadata accessor for BTFindingTrampoline();
  id v11 = objc_allocWithZone(v10);
  uint64_t v12 = sub_1000BD078((uint64_t)v43, v44);
  __chkstk_darwin(v12);
  unint64_t v14 = (uint64_t *)((char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = v3;
  uint64_t v17 = v36;
  (*(void (**)(uint64_t *))(v15 + 16))(v14);
  uint64_t v18 = *v14;
  v42[3] = v9;
  v42[4] = &off_1016004D8;
  v42[0] = v18;
  sub_10001D010((uint64_t)v42, (uint64_t)v11 + OBJC_IVAR____TtC12searchpartyd19BTFindingTrampoline_implementation);
  v41.receiver = v11;
  v41.super_class = v10;
  swift_retain();
  id v19 = [super init];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v42);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v43);
  Swift::String v20 = *(void **)(v0 + 152);
  *(void *)(v0 + 152) = v19;
  id v21 = v19;

  id v22 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
  uint64_t v38 = v8;
  v22(v6, v8, v16);
  uint64_t v23 = qword_101637350;
  id v24 = v21;
  if (v23 != -1) {
    swift_once();
  }
  uint64_t v25 = (void *)qword_101666098;
  uint64_t v26 = self;
  id v27 = v25;
  id v28 = [v26 interfaceWithProtocol:&OBJC_PROTOCOL___SPBTFindingXPCClientProtocol];
  swift_retain();
  char v29 = v37;
  XPCServiceDescription.init(name:options:exportedObject:exportedInterface:remoteObjectInterface:shouldAccept:interruptionHandler:invalidationHandler:)();
  XPCSessionManager.register(service:)();
  if (qword_101637340 != -1) {
    swift_once();
  }
  uint64_t v30 = type metadata accessor for Logger();
  sub_100010324(v30, (uint64_t)qword_10170F0B0);
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v33 = 0;
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "BTFindingService: Successfully registered XPC services.", v33, 2u);
    swift_slowDealloc();
  }

  (*(void (**)(char *, uint64_t))(v39 + 8))(v29, v40);
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v38, v16);
}

id sub_100FD3634()
{
  id result = [self interfaceWithProtocol:&OBJC_PROTOCOL___SPBTFindingXPCProtocol];
  qword_101666098 = (uint64_t)result;
  return result;
}

uint64_t sub_100FD3684(uint64_t a1, uint64_t a2)
{
  v3[6] = a2;
  v3[7] = v2;
  v3[5] = a1;
  uint64_t v4 = type metadata accessor for UUID();
  v3[8] = v4;
  v3[9] = *(void *)(v4 - 8);
  v3[10] = swift_task_alloc();
  return _swift_task_switch(sub_100FD3748, v2, 0);
}

uint64_t sub_100FD3748()
{
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v4 = v0[7];
  uint64_t v3 = v0[8];
  uint64_t v5 = (void *)v0[5];
  XPCSession.identifier.getter();
  swift_beginAccess();
  id v6 = v5;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v10 = *(void *)(v4 + 208);
  *(void *)(v4 + 208) = 0x8000000000000000;
  sub_100172288((uint64_t)v6, v1, isUniquelyReferenced_nonNull_native);
  *(void *)(v4 + 208) = v10;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_endAccess();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

void sub_100FD3850(void *a1)
{
  if (a1)
  {
    uint64_t v3 = *(void *)(v1 + 160);
    swift_beginAccess();
    uint64_t v4 = *(void *)(v3 + 32);
    if ((v4 & 0xC000000000000001) != 0)
    {
      id v5 = a1;
      swift_bridgeObjectRetain();
      __CocoaSet.makeIterator()();
      sub_10000588C((uint64_t *)&unk_10165F5F0);
      sub_100062734((unint64_t *)&unk_10165F050, (uint64_t *)&unk_10165F5F0);
      Set.Iterator.init(_cocoa:)();
      uint64_t v4 = v23;
      uint64_t v21 = v24;
      uint64_t v6 = v25;
      uint64_t v7 = v26;
      unint64_t v8 = v27;
    }
    else
    {
      uint64_t v9 = -1 << *(unsigned char *)(v4 + 32);
      uint64_t v21 = v4 + 56;
      uint64_t v6 = ~v9;
      uint64_t v10 = -v9;
      if (v10 < 64) {
        uint64_t v11 = ~(-1 << v10);
      }
      else {
        uint64_t v11 = -1;
      }
      unint64_t v8 = v11 & *(void *)(v4 + 56);
      id v12 = a1;
      swift_bridgeObjectRetain();
      uint64_t v7 = 0;
    }
    int64_t v13 = (unint64_t)(v6 + 64) >> 6;
    while (1)
    {
      if (v4 < 0)
      {
        if (!__CocoaSet.Iterator.next()()) {
          goto LABEL_34;
        }
        swift_unknownObjectRetain();
        sub_10000588C((uint64_t *)&unk_10165F5F0);
        swift_dynamicCast();
        swift_unknownObjectRelease();
        uint64_t v16 = v7;
        uint64_t v14 = v8;
        if (!v22) {
          goto LABEL_34;
        }
      }
      else
      {
        if (v8)
        {
          uint64_t v14 = (v8 - 1) & v8;
          unint64_t v15 = __clz(__rbit64(v8)) | (v7 << 6);
          uint64_t v16 = v7;
        }
        else
        {
          int64_t v17 = v7 + 1;
          if (__OFADD__(v7, 1))
          {
            __break(1u);
            return;
          }
          if (v17 >= v13) {
            goto LABEL_34;
          }
          unint64_t v18 = *(void *)(v21 + 8 * v17);
          uint64_t v16 = v7 + 1;
          if (!v18)
          {
            uint64_t v16 = v7 + 2;
            if (v7 + 2 >= v13) {
              goto LABEL_34;
            }
            unint64_t v18 = *(void *)(v21 + 8 * v16);
            if (!v18)
            {
              uint64_t v16 = v7 + 3;
              if (v7 + 3 >= v13) {
                goto LABEL_34;
              }
              unint64_t v18 = *(void *)(v21 + 8 * v16);
              if (!v18)
              {
                uint64_t v16 = v7 + 4;
                if (v7 + 4 >= v13) {
                  goto LABEL_34;
                }
                unint64_t v18 = *(void *)(v21 + 8 * v16);
                if (!v18)
                {
                  uint64_t v19 = v7 + 5;
                  while (v13 != v19)
                  {
                    unint64_t v18 = *(void *)(v21 + 8 * v19++);
                    if (v18)
                    {
                      uint64_t v16 = v19 - 1;
                      goto LABEL_30;
                    }
                  }
LABEL_34:
                  sub_100132C20();

                  return;
                }
              }
            }
          }
LABEL_30:
          uint64_t v14 = (v18 - 1) & v18;
          unint64_t v15 = __clz(__rbit64(v18)) + (v16 << 6);
        }
        uint64_t v20 = *(void *)(*(void *)(v4 + 48) + 8 * v15);
        swift_retain();
        if (!v20) {
          goto LABEL_34;
        }
      }
      XPCSession.proxy.getter();
      if (v22)
      {
        [v22 updatedBTRSSIResult:a1];
        swift_release();
        swift_unknownObjectRelease();
      }
      else
      {
        swift_release();
      }
      uint64_t v7 = v16;
      unint64_t v8 = v14;
    }
  }
}

void sub_100FD3B3C(uint64_t a1)
{
  uint64_t v30 = a1;
  uint64_t v35 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  uint64_t v4 = (char *)v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void *)(v1 + 160);
  swift_beginAccess();
  uint64_t v6 = *(void *)(v5 + 32);
  if ((v6 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_10000588C((uint64_t *)&unk_10165F5F0);
    sub_100062734((unint64_t *)&unk_10165F050, (uint64_t *)&unk_10165F5F0);
    Set.Iterator.init(_cocoa:)();
    uint64_t v6 = v38;
    uint64_t v34 = v39;
    uint64_t v8 = v40;
    uint64_t v7 = v41;
    unint64_t v9 = v42;
  }
  else
  {
    uint64_t v10 = -1 << *(unsigned char *)(v6 + 32);
    uint64_t v11 = *(void *)(v6 + 56);
    uint64_t v34 = v6 + 56;
    uint64_t v8 = ~v10;
    uint64_t v12 = -v10;
    if (v12 < 64) {
      uint64_t v13 = ~(-1 << v12);
    }
    else {
      uint64_t v13 = -1;
    }
    unint64_t v9 = v13 & v11;
    swift_bridgeObjectRetain();
    uint64_t v7 = 0;
  }
  v29[1] = v8;
  uint64_t v32 = v6 & 0x7FFFFFFFFFFFFFFFLL;
  int64_t v33 = (unint64_t)(v8 + 64) >> 6;
  uint64_t v14 = (uint64_t *)(v1 + 208);
  unint64_t v15 = (void (**)(char *, uint64_t))(v2 + 8);
  uint64_t v31 = (char *)&type metadata for Swift.AnyObject + 8;
  while (v6 < 0)
  {
    uint64_t v19 = __CocoaSet.Iterator.next()();
    if (!v19) {
      goto LABEL_40;
    }
    uint64_t v36 = v19;
    swift_unknownObjectRetain();
    sub_10000588C((uint64_t *)&unk_10165F5F0);
    swift_dynamicCast();
    id v20 = v37;
    swift_unknownObjectRelease();
    uint64_t v18 = v7;
    uint64_t v16 = v9;
    if (!v20) {
      goto LABEL_40;
    }
LABEL_33:
    XPCSession.identifier.getter();
    swift_beginAccess();
    uint64_t v25 = *v14;
    if (!*(void *)(*v14 + 16)) {
      goto LABEL_9;
    }
    swift_bridgeObjectRetain();
    unint64_t v26 = sub_1007240CC((uint64_t)v4);
    if ((v27 & 1) == 0)
    {
      swift_bridgeObjectRelease();
LABEL_9:
      (*v15)(v4, v35);
LABEL_10:
      swift_release();
      goto LABEL_11;
    }
    id v28 = *(id *)(*(void *)(v25 + 56) + 8 * v26);
    swift_bridgeObjectRelease();
    (*v15)(v4, v35);
    if (([v28 optInRawRSSIMeasurement] & 1) == 0)
    {

      goto LABEL_10;
    }
    XPCSession.proxy.getter();
    if (v37)
    {
      [v37 updatedBTRSSIMeasurement:v30];
      swift_release();

      swift_unknownObjectRelease();
    }
    else
    {
      swift_release();
    }
LABEL_11:
    uint64_t v7 = v18;
    unint64_t v9 = v16;
  }
  if (v9)
  {
    uint64_t v16 = (v9 - 1) & v9;
    unint64_t v17 = __clz(__rbit64(v9)) | (v7 << 6);
    uint64_t v18 = v7;
LABEL_32:
    uint64_t v24 = *(void *)(*(void *)(v6 + 48) + 8 * v17);
    swift_retain();
    if (!v24) {
      goto LABEL_40;
    }
    goto LABEL_33;
  }
  int64_t v21 = v7 + 1;
  if (!__OFADD__(v7, 1))
  {
    if (v21 >= v33) {
      goto LABEL_40;
    }
    unint64_t v22 = *(void *)(v34 + 8 * v21);
    uint64_t v18 = v7 + 1;
    if (!v22)
    {
      uint64_t v18 = v7 + 2;
      if (v7 + 2 >= v33) {
        goto LABEL_40;
      }
      unint64_t v22 = *(void *)(v34 + 8 * v18);
      if (!v22)
      {
        uint64_t v18 = v7 + 3;
        if (v7 + 3 >= v33) {
          goto LABEL_40;
        }
        unint64_t v22 = *(void *)(v34 + 8 * v18);
        if (!v22)
        {
          uint64_t v18 = v7 + 4;
          if (v7 + 4 >= v33) {
            goto LABEL_40;
          }
          unint64_t v22 = *(void *)(v34 + 8 * v18);
          if (!v22)
          {
            uint64_t v23 = v7 + 5;
            while (v33 != v23)
            {
              unint64_t v22 = *(void *)(v34 + 8 * v23++);
              if (v22)
              {
                uint64_t v18 = v23 - 1;
                goto LABEL_31;
              }
            }
LABEL_40:
            sub_100132C20();
            return;
          }
        }
      }
    }
LABEL_31:
    uint64_t v16 = (v22 - 1) & v22;
    unint64_t v17 = __clz(__rbit64(v22)) + (v18 << 6);
    goto LABEL_32;
  }
  __break(1u);
}

uint64_t sub_100FD3F78(uint64_t a1)
{
  v2[27] = a1;
  v2[28] = v1;
  uint64_t v3 = type metadata accessor for UUID();
  v2[29] = v3;
  v2[30] = *(void *)(v3 - 8);
  v2[31] = swift_task_alloc();
  v2[32] = swift_task_alloc();
  v2[33] = swift_task_alloc();
  return _swift_task_switch(sub_100FD4054, v1, 0);
}

uint64_t sub_100FD4054()
{
  uint64_t v23 = v0;
  if (qword_101637340 != -1) {
    swift_once();
  }
  uint64_t v1 = (long long *)(v0 + 7);
  uint64_t v2 = v0[27];
  uint64_t v3 = v0[33];
  uint64_t v5 = v0[29];
  uint64_t v4 = v0[30];
  uint64_t v6 = type metadata accessor for Logger();
  v0[34] = sub_100010324(v6, (uint64_t)qword_10170F0B0);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[35] = v7;
  v0[36] = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v7(v3, v2, v5);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  BOOL v10 = os_log_type_enabled(v8, v9);
  uint64_t v11 = v0[33];
  uint64_t v12 = v0[29];
  uint64_t v13 = v0[30];
  if (v10)
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 141558275;
    v0[25] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v14 + 12) = 2081;
    sub_100FFD1F4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[26] = sub_1008FA0F0(v15, v16, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    unint64_t v17 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v17(v11, v12);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Read TX Power for %{private,mask.hash}s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v1 = (long long *)(v0 + 7);
    swift_slowDealloc();
  }
  else
  {
    unint64_t v17 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v17(v0[33], v0[29]);
  }

  v0[37] = v17;
  uint64_t v18 = qword_1016375E8;
  swift_retain();
  if (v18 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, (uint64_t)v1, (uint64_t *)&unk_101638D30);
  if (v0[10])
  {
    sub_10001CEB0(v1, (uint64_t)(v0 + 2));
    swift_release();
    sub_10001CD44(v0 + 2, v0[5]);
    int64_t v21 = (uint64_t (__cdecl *)())((char *)&dword_1016392B8 + dword_1016392B8);
    id v20 = (void *)swift_task_alloc();
    v0[38] = v20;
    *id v20 = v0;
    v20[1] = sub_100FD43EC;
    return v21();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100FD43EC(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 224);
  *(void *)(*(void *)v1 + 312) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100FD4504, v2, 0);
}

uint64_t sub_100FD4504()
{
  char v27 = v0;
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (v0[39])
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v2 = (void *)swift_task_alloc();
    v0[40] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100FD49B8;
    uint64_t v3 = v0[27];
    return sub_10061A278(v3);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Missing OwnerCommandManager to read TX Power!", v7, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for SPBTFindingSessionError(0);
    v0[21] = 4;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100FFD1F4(&qword_101666550, 255, type metadata accessor for SPBTFindingSessionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v8 = v0[22];
    swift_willThrow();
    swift_errorRetain();
    swift_errorRetain();
    os_log_type_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136446210;
      v0[23] = v8;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v12 = String.init<A>(describing:)();
      v0[24] = sub_1008FA0F0(v12, v13, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Failed to fetch TX Power due to %{public}s", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v14 = v0[28] + 200;
    swift_beginAccess();
    if (!*(void *)(*(void *)v14 + 16)
      || (uint64_t v15 = v0[27],
          swift_bridgeObjectRetain(),
          sub_1007240CC(v15),
          LOBYTE(v15) = v16,
          swift_bridgeObjectRelease(),
          (v15 & 1) == 0))
    {
      uint64_t v25 = (void (*)(uint64_t, uint64_t))v0[37];
      unint64_t v17 = (void (*)(uint64_t, uint64_t, uint64_t))v0[35];
      uint64_t v18 = (char *)v0[31];
      uint64_t v19 = v0[32];
      uint64_t v20 = v0[29];
      uint64_t v21 = v0[27];
      v17(v19, v21, v20);
      v17((uint64_t)v18, v21, v20);
      type metadata accessor for BTRSSIFilter();
      swift_allocObject();
      uint64_t v22 = sub_100554B10(v18, 0, 0);
      swift_beginAccess();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v26 = *(void *)v14;
      *(void *)uint64_t v14 = 0x8000000000000000;
      sub_1001722C8(v22, v19, isUniquelyReferenced_nonNull_native);
      *(void *)uint64_t v14 = v26;
      swift_bridgeObjectRelease();
      v25(v19, v20);
      swift_endAccess();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v24 = (uint64_t (*)(void))v0[1];
    return v24();
  }
}

uint64_t sub_100FD49B8(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  v4[41] = v1;
  swift_task_dealloc();
  uint64_t v5 = v4[28];
  if (v1)
  {
    os_log_type_t v6 = sub_100FD4CC8;
  }
  else
  {
    v4[42] = a1;
    os_log_type_t v6 = sub_100FD4AF4;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_100FD4AF4()
{
  swift_release();
  uint64_t v1 = v0[42];
  uint64_t v2 = v0[28] + 200;
  swift_beginAccess();
  if (!*(void *)(*(void *)v2 + 16)
    || (uint64_t v3 = v0[27],
        swift_bridgeObjectRetain(),
        sub_1007240CC(v3),
        LOBYTE(v3) = v4,
        swift_bridgeObjectRelease(),
        (v3 & 1) == 0))
  {
    uint64_t v5 = (void (*)(uint64_t, uint64_t, uint64_t))v0[35];
    os_log_type_t v6 = (char *)v0[31];
    uint64_t v7 = v0[32];
    uint64_t v8 = v0[29];
    uint64_t v14 = (void (*)(uint64_t, uint64_t))v0[37];
    uint64_t v9 = v0[27];
    v5(v7, v9, v8);
    v5((uint64_t)v6, v9, v8);
    type metadata accessor for BTRSSIFilter();
    swift_allocObject();
    uint64_t v10 = sub_100554B10(v6, v1, 0);
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v15 = *(void *)v2;
    *(void *)uint64_t v2 = 0x8000000000000000;
    sub_1001722C8(v10, v7, isUniquelyReferenced_nonNull_native);
    *(void *)uint64_t v2 = v15;
    swift_bridgeObjectRelease();
    v14(v7, v8);
    swift_endAccess();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_100FD4CC8()
{
  uint64_t v22 = v0;
  swift_release();
  uint64_t v1 = v0[41];
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    char v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    *(_DWORD *)char v4 = 136446210;
    uint64_t v21 = v5;
    v0[23] = v1;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v6 = String.init<A>(describing:)();
    v0[24] = sub_1008FA0F0(v6, v7, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Failed to fetch TX Power due to %{public}s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v8 = v0[28] + 200;
  swift_beginAccess();
  if (!*(void *)(*(void *)v8 + 16)
    || (uint64_t v9 = v0[27],
        swift_bridgeObjectRetain(),
        sub_1007240CC(v9),
        LOBYTE(v9) = v10,
        swift_bridgeObjectRelease(),
        (v9 & 1) == 0))
  {
    uint64_t v20 = (void (*)(uint64_t, uint64_t))v0[37];
    uint64_t v11 = (void (*)(uint64_t, uint64_t, uint64_t))v0[35];
    uint64_t v12 = (char *)v0[31];
    uint64_t v13 = v0[32];
    uint64_t v14 = v0[29];
    uint64_t v15 = v0[27];
    v11(v13, v15, v14);
    v11((uint64_t)v12, v15, v14);
    type metadata accessor for BTRSSIFilter();
    swift_allocObject();
    uint64_t v16 = sub_100554B10(v12, 0, 0);
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v21 = *(void *)v8;
    *(void *)uint64_t v8 = 0x8000000000000000;
    sub_1001722C8(v16, v13, isUniquelyReferenced_nonNull_native);
    *(void *)uint64_t v8 = v21;
    swift_bridgeObjectRelease();
    v20(v13, v14);
    swift_endAccess();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v18 = (uint64_t (*)(void))v0[1];
  return v18();
}

uint64_t sub_100FD4FFC(uint64_t a1)
{
  v2[7] = a1;
  v2[8] = v1;
  sub_10000588C(&qword_10164DBB0);
  v2[9] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for UUID();
  v2[10] = v3;
  v2[11] = *(void *)(v3 - 8);
  v2[12] = swift_task_alloc();
  return _swift_task_switch(sub_100FD50EC, v1, 0);
}

uint64_t sub_100FD50EC()
{
  uint64_t v34 = v0;
  if (qword_101637340 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[7];
  uint64_t v3 = v0[11];
  unint64_t v2 = v0[12];
  uint64_t v4 = v0[10];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170F0B0);
  uint64_t v32 = *(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 16);
  v32(v2, v1, v4);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = v0[11];
  uint64_t v9 = v0[12];
  uint64_t v11 = v0[10];
  if (v8)
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v33 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 141558275;
    v0[5] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2081;
    sub_100FFD1F4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[6] = sub_1008FA0F0(v13, v14, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "startScanning for beacon %{private,mask.hash}s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v10 + 8))(v0[12], v0[10]);
  }

  uint64_t v15 = v0[10];
  uint64_t v16 = v0[11];
  uint64_t v17 = v0[7];
  uint64_t v18 = v0[8];
  sub_10000588C(&qword_10163BC50);
  unint64_t v19 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_101342130;
  v32(v20 + v19, v17, v15);
  swift_beginAccess();
  sub_101020BCC(v20);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  swift_endAccess();
  if (*(void *)(v18 + 176))
  {
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Existing scan in progress. Not starting a new one.", v23, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    uint64_t v24 = v0[8];
    uint64_t v25 = v0[9];
    uint64_t v26 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v25, 1, 1, v26);
    uint64_t v28 = sub_100FFD1F4((unint64_t *)&unk_101666540, v27, (void (*)(uint64_t))type metadata accessor for BTFindingService);
    char v29 = (void *)swift_allocObject();
    void v29[2] = v24;
    v29[3] = v28;
    v29[4] = v24;
    swift_retain_n();
    *(void *)(v18 + 176) = sub_100885EBC(v25, (uint64_t)&unk_1016665B8, (uint64_t)v29);
    swift_release();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v30 = (uint64_t (*)(void))v0[1];
  return v30();
}

uint64_t sub_100FD55A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[21] = a4;
  uint64_t v6 = sub_10000588C(&qword_10163D210);
  v4[22] = v6;
  v4[23] = *(void *)(v6 - 8);
  v4[24] = swift_task_alloc();
  type metadata accessor for BeaconKeyManager.IndexInformation(0);
  v4[25] = swift_task_alloc();
  sub_10000588C(&qword_101638CF0);
  v4[26] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for UUID();
  v4[27] = v7;
  v4[28] = *(void *)(v7 - 8);
  v4[29] = swift_task_alloc();
  v4[30] = swift_task_alloc();
  v4[31] = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_1016654F0);
  v4[32] = swift_task_alloc();
  v4[33] = swift_task_alloc();
  sub_10000588C(&qword_10163CE40);
  v4[34] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for DiscoveredObject(0);
  v4[35] = v8;
  v4[36] = *(void *)(v8 - 8);
  v4[37] = swift_task_alloc();
  v4[38] = swift_task_alloc();
  v4[39] = swift_task_alloc();
  sub_10000588C(&qword_101665500);
  unsigned char v4[40] = swift_task_alloc();
  uint64_t v9 = sub_10000588C(&qword_101639C78);
  v4[41] = v9;
  v4[42] = *(void *)(v9 - 8);
  v4[43] = swift_task_alloc();
  uint64_t v10 = sub_10000588C((uint64_t *)&unk_1016665C0);
  v4[44] = v10;
  v4[45] = *(void *)(v10 - 8);
  v4[46] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for ScanMode();
  v4[47] = v11;
  v4[48] = *(void *)(v11 - 8);
  v4[49] = swift_task_alloc();
  uint64_t v12 = sub_10000588C(&qword_101665490);
  v4[50] = v12;
  v4[51] = *(void *)(v12 - 8);
  v4[52] = swift_task_alloc();
  v4[53] = swift_task_alloc();
  return _swift_task_switch(sub_100FD59E8, a4, 0);
}

uint64_t sub_100FD59E8()
{
  v0[54] = *(void *)(v0[21] + 136);
  sub_10000588C((uint64_t *)&unk_1016665D0);
  uint64_t v1 = type metadata accessor for CentralManager.State();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(void *)(v2 + 72);
  unint64_t v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v5 = swift_allocObject();
  v0[55] = v5;
  *(_OWORD *)(v5 + 16) = xmmword_101347BA0;
  unint64_t v6 = v5 + v4;
  uint64_t v7 = *(void (**)(unint64_t, void, uint64_t))(v2 + 104);
  v7(v6, enum case for CentralManager.State.poweredOn(_:), v1);
  v7(v6 + v3, enum case for CentralManager.State.restricted(_:), v1);
  uint64_t v8 = (void *)swift_task_alloc();
  v0[56] = v8;
  uint64_t v9 = type metadata accessor for CentralManager();
  uint64_t v10 = sub_100FFD1F4(&qword_101639A90, 255, (void (*)(uint64_t))&type metadata accessor for CentralManager);
  *uint64_t v8 = v0;
  v8[1] = sub_100FD5BC8;
  return CentralManagerProtocol.await(states:)(v5, v9, v10);
}

uint64_t sub_100FD5BC8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 456) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 168);
    unint64_t v4 = sub_100FD7DF0;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 168);
    swift_bridgeObjectRelease();
    unint64_t v4 = sub_100FD5CF0;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100FD5CF0()
{
  uint64_t v2 = v0[48];
  uint64_t v1 = v0[49];
  uint64_t v3 = v0[47];
  uint64_t v4 = enum case for ScanUseCase.btFinding(_:);
  uint64_t v5 = type metadata accessor for ScanUseCase();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 104))(v1, v4, v5);
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for ScanMode.useCase(_:), v3);
  uint64_t v10 = (char *)&async function pointer to dispatch thunk of CentralManager.scanForPeripherals(scanMode:garbageCollectInterval:)
      + async function pointer to dispatch thunk of CentralManager.scanForPeripherals(scanMode:garbageCollectInterval:);
  unint64_t v6 = (void *)swift_task_alloc();
  v0[58] = v6;
  *unint64_t v6 = v0;
  v6[1] = sub_100FD5E2C;
  uint64_t v7 = v0[53];
  uint64_t v8 = v0[49];
  return ((uint64_t (*)(uint64_t, uint64_t, unint64_t, void))v10)(v7, v8, 0xD02AB486CEDC0000, 0);
}

uint64_t sub_100FD5E2C()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 392);
  uint64_t v4 = *(void *)(*v1 + 384);
  uint64_t v5 = *(void *)(*v1 + 376);
  *(void *)(*v1 + 472) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  uint64_t v6 = *(void *)(v2 + 168);
  if (v0) {
    uint64_t v7 = sub_100FD7F50;
  }
  else {
    uint64_t v7 = sub_100FD5FB4;
  }
  return _swift_task_switch(v7, v6, 0);
}

uint64_t sub_100FD5FB4()
{
  (*(void (**)(void, void, void))(v0[51] + 16))(v0[52], v0[53], v0[50]);
  v0[60] = type metadata accessor for Peripheral();
  sub_100062734(&qword_101639C98, &qword_101665490);
  AsyncCompactMapSequence.init(_:transform:)();
  AsyncCompactMapSequence.base.getter();
  dispatch thunk of AsyncSequence.makeAsyncIterator()();
  AsyncCompactMapSequence.transform.getter();
  AsyncCompactMapSequence.Iterator.init(_:transform:)();
  v0[61] = sub_100FFD1F4((unint64_t *)&unk_101666540, v1, (void (*)(uint64_t))type metadata accessor for BTFindingService);
  swift_beginAccess();
  swift_beginAccess();
  uint64_t v2 = v0[61];
  uint64_t v3 = v0[21];
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1016665F0 + dword_1016665F0);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[62] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100FD61F0;
  return v6(v3, v2);
}

uint64_t sub_100FD61F0(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 504) = a1;
  *(void *)(v4 + 512) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 168);
  if (v1) {
    uint64_t v6 = sub_100FD80A8;
  }
  else {
    uint64_t v6 = sub_100FD6324;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_100FD6324()
{
  if (v0[63])
  {
    sub_100FFD1F4(&qword_10165E890, 255, (void (*)(uint64_t))&type metadata accessor for Peripheral);
    uint64_t v2 = dispatch thunk of Actor.unownedExecutor.getter();
    v0[65] = v2;
    v0[66] = v1;
    return _swift_task_switch(sub_100FD6628, v2, v1);
  }
  else
  {
    (*(void (**)(void, void))(v0[42] + 8))(v0[43], v0[41]);
    if (qword_101637340 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_10170F0B0);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Done scanning", v6, 2u);
      swift_slowDealloc();
    }

    uint64_t v7 = v0[53];
    uint64_t v8 = v0[50];
    uint64_t v9 = v0[51];
    (*(void (**)(void, void))(v0[45] + 8))(v0[46], v0[44]);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = (uint64_t (*)(void))v0[1];
    return v10();
  }
}

uint64_t sub_100FD6628()
{
  uint64_t v1 = *(void *)(v0 + 168);
  *(void *)(v0 + 536) = dispatch thunk of Peripheral.advertisementData.getter();
  return _swift_task_switch(sub_100FD6698, v1, 0);
}

uint64_t sub_100FD6698()
{
  uint64_t v21 = v0;
  uint64_t v1 = v0[67];
  if (v1)
  {
    v0[68] = sub_1006551F8(v1);
    uint64_t v2 = v0[66];
    uint64_t v3 = v0[65];
    return _swift_task_switch(sub_100FD69B4, v3, v2);
  }
  else
  {
    if (qword_101637340 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_10170F0B0);
    swift_retain_n();
    os_log_type_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = v0[23];
      uint64_t v8 = v0[24];
      uint64_t v9 = v0[22];
      os_log_type_t type = v6;
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136446210;
      Peripheral.id.getter();
      sub_100062734(&qword_10163B810, &qword_10163D210);
      uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v13 = v12;
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v8, v9);
      v0[15] = sub_1008FA0F0(v11, v13, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, type, "Missing advertisementData for %{public}s!", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();
    }
    else
    {

      swift_release_n();
    }
    uint64_t v14 = v0[61];
    uint64_t v15 = v0[21];
    unint64_t v19 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1016665F0 + dword_1016665F0);
    uint64_t v16 = (void *)swift_task_alloc();
    v0[62] = v16;
    *uint64_t v16 = v0;
    v16[1] = sub_100FD61F0;
    return v19(v15, v14);
  }
}

uint64_t sub_100FD69B4()
{
  uint64_t v1 = *(void *)(v0 + 168);
  *(void *)(v0 + 552) = dispatch thunk of Peripheral.rssi.getter();
  *(unsigned char *)(v0 + 660) = v2;
  return _swift_task_switch(sub_100FD6A28, v1, 0);
}

uint64_t sub_100FD6A28()
{
  uint64_t v33 = v0;
  if (*(unsigned char *)(v0 + 660)) {
    uint64_t v1 = 0;
  }
  else {
    uint64_t v1 = *(void *)(v0 + 552);
  }
  if (v1 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_18;
  }
  if (v1 > 0x7FFFFFFF)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v2 = *(void *)(v0 + 280);
  uint64_t v3 = *(void *)(v0 + 288);
  uint64_t v4 = *(void *)(v0 + 272);
  sub_1002612D4(*(void *)(v0 + 544), v1, v4);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2) == 1)
  {
    sub_10001DAB4(*(void *)(v0 + 272), &qword_10163CE40);
    if (qword_101637340 == -1)
    {
LABEL_8:
      uint64_t v5 = type metadata accessor for Logger();
      sub_100010324(v5, (uint64_t)qword_10170F0B0);
      swift_retain_n();
      swift_bridgeObjectRetain();
      os_log_type_t v6 = Logger.logObject.getter();
      os_log_type_t v7 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v6, v7))
      {
        os_log_type_t typea = v7;
        uint64_t v8 = *(void *)(v0 + 184);
        uint64_t v9 = *(void *)(v0 + 192);
        uint64_t v10 = *(void *)(v0 + 176);
        uint64_t v11 = swift_slowAlloc();
        uint64_t v32 = swift_slowAlloc();
        *(_DWORD *)uint64_t v11 = 136446466;
        Peripheral.id.getter();
        sub_100062734(&qword_10163B810, &qword_10163D210);
        uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v14 = v13;
        (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v10);
        *(void *)(v0 + 128) = sub_1008FA0F0(v12, v14, &v32);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v11 + 12) = 2080;
        swift_bridgeObjectRetain();
        sub_10000588C(&qword_101651CF0);
        uint64_t v15 = Dictionary.description.getter();
        unint64_t v17 = v16;
        swift_bridgeObjectRelease();
        *(void *)(v0 + 136) = sub_1008FA0F0(v15, v17, &v32);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v6, typea, "Could not parse advertisementData for %{public}s: %s", (uint8_t *)v11, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        swift_release();
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_release_n();
      }
      uint64_t v27 = *(void *)(v0 + 488);
      uint64_t v28 = *(void *)(v0 + 168);
      os_log_type_t type = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1016665F0 + dword_1016665F0);
      char v29 = (void *)swift_task_alloc();
      *(void *)(v0 + 496) = v29;
      *char v29 = v0;
      v29[1] = sub_100FD61F0;
      return type(v28, v27);
    }
LABEL_19:
    swift_once();
    goto LABEL_8;
  }
  uint64_t v18 = *(void *)(v0 + 312);
  uint64_t v19 = *(void *)(v0 + 272);
  uint64_t v20 = *(void *)(v0 + 280);
  swift_bridgeObjectRelease();
  sub_100FFC714(v19, v18, type metadata accessor for DiscoveredObject);
  uint64_t v21 = (uint64_t *)(v18 + *(int *)(v20 + 36));
  uint64_t v22 = *v21;
  *(void *)(v0 + 560) = *v21;
  uint64_t v23 = v21[1];
  *(void *)(v0 + 568) = v23;
  sub_1001A1790(v22, v23);
  uint64_t v24 = (void *)swift_task_alloc();
  *(void *)(v0 + 576) = v24;
  *uint64_t v24 = v0;
  v24[1] = sub_100FD6EEC;
  uint64_t v25 = *(void *)(v0 + 264);
  return sub_100FDCDB0(v25, v22, v23);
}

uint64_t sub_100FD6EEC()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 584) = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[71];
  uint64_t v4 = v2[70];
  uint64_t v5 = v2[21];
  sub_1001A1AD8(v4, v3);
  if (v0) {
    os_log_type_t v6 = sub_100FD83C8;
  }
  else {
    os_log_type_t v6 = sub_100FD7048;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_100FD7048()
{
  uint64_t v70 = v0;
  uint64_t v1 = *(void *)(v0 + 256);
  sub_10001D074(*(void *)(v0 + 264), v1, (uint64_t *)&unk_1016654F0);
  uint64_t v2 = type metadata accessor for BeaconDetails(0);
  int v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2);
  uint64_t v4 = *(void *)(v0 + 256);
  uint64_t v5 = *(void *)(v0 + 216);
  uint64_t v6 = *(void *)(v0 + 224);
  os_log_type_t v7 = *(char **)(v0 + 208);
  if (v3 == 1)
  {
    sub_10001DAB4(*(void *)(v0 + 256), (uint64_t *)&unk_1016654F0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v7, 1, 1, v5);
LABEL_4:
    uint64_t v10 = *(void *)(v0 + 312);
    uint64_t v11 = *(void *)(v0 + 264);
    uint64_t v12 = *(void *)(v0 + 208);
    swift_release();
    sub_10001DAB4(v11, (uint64_t *)&unk_1016654F0);
    sub_100FFC77C(v10, type metadata accessor for DiscoveredObject);
    sub_10001DAB4(v12, &qword_101638CF0);
LABEL_5:
    uint64_t v13 = *(void *)(v0 + 488);
    uint64_t v14 = *(void *)(v0 + 168);
    uint64_t v67 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1016665F0 + dword_1016665F0);
    uint64_t v15 = (void *)swift_task_alloc();
    *(void *)(v0 + 496) = v15;
    void *v15 = v0;
    v15[1] = sub_100FD61F0;
    return v67(v14, v13);
  }
  uint64_t v8 = *(void *)(v0 + 200);
  sub_100FFC7DC(*(void *)(v0 + 256), v8, type metadata accessor for BeaconKeyManager.IndexInformation);
  sub_100FFC77C(v4, type metadata accessor for BeaconDetails);
  uint64_t v9 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  *(void *)(v0 + 592) = v9;
  *(void *)(v0 + 600) = (v6 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v9(v7, v8, v5);
  sub_100FFC77C(v8, type metadata accessor for BeaconKeyManager.IndexInformation);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v7, 0, 1, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v7, 1, v5) == 1) {
    goto LABEL_4;
  }
  uint64_t v17 = *(void *)(v0 + 168);
  uint64_t v18 = *(void *)(v0 + 248);
  (*(void (**)(uint64_t, void, void))(*(void *)(v0 + 224) + 32))(v18, *(void *)(v0 + 208), *(void *)(v0 + 216));
  uint64_t v19 = *(void *)(v17 + 192);
  swift_bridgeObjectRetain();
  LOBYTE(v18) = sub_100DC7280(v18, v19);
  swift_bridgeObjectRelease();
  if ((v18 & 1) == 0)
  {
    uint64_t v38 = *(void *)(v0 + 224);
    swift_release();
    uint64_t v39 = *(void (**)(void, void))(v38 + 8);
    uint64_t v40 = *(void *)(v0 + 312);
    uint64_t v41 = *(void *)(v0 + 264);
    v39(*(void *)(v0 + 248), *(void *)(v0 + 216));
    sub_10001DAB4(v41, (uint64_t *)&unk_1016654F0);
    sub_100FFC77C(v40, type metadata accessor for DiscoveredObject);
    goto LABEL_5;
  }
  uint64_t v68 = v9;
  if (qword_101637340 != -1) {
    swift_once();
  }
  uint64_t v21 = *(void *)(v0 + 304);
  uint64_t v20 = *(void *)(v0 + 312);
  uint64_t v22 = *(void *)(v0 + 296);
  uint64_t v24 = *(char **)(v0 + 240);
  uint64_t v23 = *(void *)(v0 + 248);
  uint64_t v25 = *(void *)(v0 + 216);
  uint64_t v26 = type metadata accessor for Logger();
  sub_100010324(v26, (uint64_t)qword_10170F0B0);
  v68(v24, v23, v25);
  sub_100FFC7DC(v20, v21, type metadata accessor for DiscoveredObject);
  sub_100FFC7DC(v20, v22, type metadata accessor for DiscoveredObject);
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.info.getter();
  BOOL v29 = os_log_type_enabled(v27, v28);
  uint64_t v66 = *(void *)(v0 + 304);
  if (v29)
  {
    uint64_t v63 = *(void *)(v0 + 296);
    uint64_t v62 = *(void *)(v0 + 280);
    os_log_type_t type = v28;
    uint64_t v30 = *(void *)(v0 + 240);
    log = v27;
    uint64_t v31 = *(void *)(v0 + 216);
    uint64_t v32 = *(void *)(v0 + 224);
    uint64_t v33 = swift_slowAlloc();
    uint64_t v69 = swift_slowAlloc();
    *(_DWORD *)uint64_t v33 = 136315650;
    sub_100FFD1F4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v34 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 152) = sub_1008FA0F0(v34, v35, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v36 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
    v36(v30, v31);
    *(_WORD *)(v33 + 12) = 1024;
    LODWORD(v32) = *(_DWORD *)(v66 + *(int *)(v62 + 60));
    sub_100FFC77C(v66, type metadata accessor for DiscoveredObject);
    *(_DWORD *)(v0 + 656) = v32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v33 + 18) = 2048;
    uint64_t v37 = *(void *)(v63 + *(int *)(v62 + 40));
    sub_100FFC77C(v63, type metadata accessor for DiscoveredObject);
    *(void *)(v0 + 160) = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, log, type, "Found matching beacon %s. RSSI: %d. Channel: %ld", (uint8_t *)v33, 0x1Cu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v42 = *(void *)(v0 + 240);
    uint64_t v43 = *(void *)(v0 + 216);
    uint64_t v44 = *(void *)(v0 + 224);
    sub_100FFC77C(*(void *)(v0 + 296), type metadata accessor for DiscoveredObject);
    sub_100FFC77C(v66, type metadata accessor for DiscoveredObject);
    uint64_t v36 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
    v36(v42, v43);
  }
  *(void *)(v0 + 608) = v36;
  uint64_t v45 = *(void *)(v0 + 312);
  uint64_t v46 = *(void *)(v0 + 280);
  uint64_t v47 = *(void *)(v0 + 168);
  uint64_t v48 = *(void *)(v45 + *(int *)(v46 + 40));
  uint64_t v49 = *(int *)(v45 + *(int *)(v46 + 60));
  id v50 = objc_allocWithZone((Class)SPBTRSSIMeasurement);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  Class v52 = Date._bridgeToObjectiveC()().super.isa;
  id v53 = [v50 initWithBeaconIdentifier:isa timestamp:v52 channel:v48 rssi:v49];
  *(void *)(v0 + 616) = v53;

  uint64_t v54 = *(void *)(v47 + 200);
  if (!*(void *)(v54 + 16)) {
    goto LABEL_19;
  }
  uint64_t v55 = *(void *)(v0 + 248);
  swift_bridgeObjectRetain();
  unint64_t v56 = sub_1007240CC(v55);
  if ((v57 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_19:
    uint64_t v60 = *(char **)(v0 + 232);
    v68(v60, *(void *)(v0 + 248), *(void *)(v0 + 216));
    type metadata accessor for BTRSSIFilter();
    swift_allocObject();
    *(void *)(v0 + 640) = sub_100554B10(v60, 0, 0);
    uint64_t v61 = (void *)swift_task_alloc();
    *(void *)(v0 + 648) = v61;
    *uint64_t v61 = v0;
    v61[1] = sub_100FD7AD4;
    uint64_t v59 = (uint64_t)v53;
    goto LABEL_20;
  }
  *(void *)(v0 + 624) = *(void *)(*(void *)(v54 + 56) + 8 * v56);
  swift_retain();
  swift_bridgeObjectRelease();
  unint64_t v58 = (void *)swift_task_alloc();
  *(void *)(v0 + 632) = v58;
  *unint64_t v58 = v0;
  v58[1] = sub_100FD7878;
  uint64_t v59 = (uint64_t)v53;
LABEL_20:
  return sub_100554EEC(v59);
}

uint64_t sub_100FD7878(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  *(void *)(v3 + 88) = v1;
  *(void *)(v3 + 96) = a1;
  uint64_t v4 = *(void *)(v2 + 168);
  swift_task_dealloc();
  return _swift_task_switch(sub_100FD798C, v4, 0);
}

uint64_t sub_100FD798C()
{
  uint64_t v1 = *(void **)(v0 + 96);
  uint64_t v2 = *(void **)(v0 + 616);
  swift_release();
  sub_100FD3B3C((uint64_t)v2);
  sub_100FD3850(v1);
  swift_release();

  uint64_t v3 = *(void *)(v0 + 312);
  uint64_t v4 = *(void *)(v0 + 264);
  (*(void (**)(void, void))(v0 + 608))(*(void *)(v0 + 248), *(void *)(v0 + 216));
  sub_10001DAB4(v4, (uint64_t *)&unk_1016654F0);
  sub_100FFC77C(v3, type metadata accessor for DiscoveredObject);
  uint64_t v5 = *(void *)(v0 + 488);
  uint64_t v6 = *(void *)(v0 + 168);
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1016665F0 + dword_1016665F0);
  os_log_type_t v7 = (void *)swift_task_alloc();
  *(void *)(v0 + 496) = v7;
  *os_log_type_t v7 = v0;
  v7[1] = sub_100FD61F0;
  return v9(v6, v5);
}

uint64_t sub_100FD7AD4(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  *(void *)(v3 + 104) = v1;
  *(void *)(v3 + 112) = a1;
  uint64_t v4 = *(void *)(v2 + 168);
  swift_task_dealloc();
  return _swift_task_switch(sub_100FD7BE8, v4, 0);
}

uint64_t sub_100FD7BE8()
{
  uint64_t v1 = *(void *)(v0 + 640);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(v0 + 608);
  uint64_t v3 = *(void *)(v0 + 232);
  uint64_t v4 = *(void *)(v0 + 216);
  uint64_t v5 = *(void *)(v0 + 168);
  (*(void (**)(uint64_t, void, uint64_t))(v0 + 592))(v3, *(void *)(v0 + 248), v4);
  swift_beginAccess();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v16 = *(void *)(v5 + 200);
  *(void *)(v5 + 200) = 0x8000000000000000;
  sub_1001722C8(v1, v3, isUniquelyReferenced_nonNull_native);
  *(void *)(v5 + 200) = v16;
  swift_bridgeObjectRelease();
  v2(v3, v4);
  swift_endAccess();
  os_log_type_t v7 = *(void **)(v0 + 112);
  uint64_t v8 = *(void **)(v0 + 616);
  swift_release();
  sub_100FD3B3C((uint64_t)v8);
  sub_100FD3850(v7);
  swift_release();

  uint64_t v9 = *(void *)(v0 + 312);
  uint64_t v10 = *(void *)(v0 + 264);
  (*(void (**)(void, void))(v0 + 608))(*(void *)(v0 + 248), *(void *)(v0 + 216));
  sub_10001DAB4(v10, (uint64_t *)&unk_1016654F0);
  sub_100FFC77C(v9, type metadata accessor for DiscoveredObject);
  uint64_t v11 = *(void *)(v0 + 488);
  uint64_t v12 = *(void *)(v0 + 168);
  uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1016665F0 + dword_1016665F0);
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v0 + 496) = v13;
  *uint64_t v13 = v0;
  v13[1] = sub_100FD61F0;
  return v15(v12, v11);
}

uint64_t sub_100FD7DF0()
{
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100FD7F50()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100FD80A8()
{
  (*(void (**)(void, void))(v0[42] + 8))(v0[43], v0[41]);
  if (qword_101637340 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170F0B0);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138543362;
    uint64_t v6 = _convertErrorToNSError(_:)();
    v0[18] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Error during scan: %{public}@", v4, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  swift_errorRelease();
  uint64_t v7 = v0[53];
  uint64_t v8 = v0[50];
  uint64_t v9 = v0[51];
  (*(void (**)(void, void))(v0[45] + 8))(v0[46], v0[44]);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_100FD83C8()
{
  uint64_t v1 = v0[39];
  swift_release();
  sub_100FFC77C(v1, type metadata accessor for DiscoveredObject);
  (*(void (**)(void, void))(v0[42] + 8))(v0[43], v0[41]);
  if (qword_101637340 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100010324(v2, (uint64_t)qword_10170F0B0);
  swift_errorRetain();
  swift_errorRetain();
  os_log_type_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 138543362;
    uint64_t v7 = _convertErrorToNSError(_:)();
    v0[18] = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v6 = v7;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Error during scan: %{public}@", v5, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  swift_errorRelease();
  uint64_t v8 = v0[53];
  uint64_t v9 = v0[50];
  uint64_t v10 = v0[51];
  (*(void (**)(void, void))(v0[45] + 8))(v0[46], v0[44]);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v8, v9);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_100FD8710(uint64_t a1)
{
  v2[8] = a1;
  v2[9] = v1;
  sub_10000588C(&qword_101638CF0);
  v2[10] = swift_task_alloc();
  return _swift_task_switch(sub_100FD87A4, v1, 0);
}

uint64_t sub_100FD87A4()
{
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = v0[8];
  swift_beginAccess();
  sub_101126F68(v3, v1);
  sub_10001DAB4(v1, &qword_101638CF0);
  swift_endAccess();
  swift_beginAccess();
  sub_100165A64(v3);
  swift_endAccess();
  swift_release();
  if (*(void *)(*(void *)(v2 + 192) + 16))
  {
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
  else
  {
    uint64_t v6 = (void *)swift_task_alloc();
    v0[11] = v6;
    *uint64_t v6 = v0;
    v6[1] = sub_100FD8914;
    return sub_100FD8A28();
  }
}

uint64_t sub_100FD8914()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100FD8A28()
{
  v1[17] = v0;
  uint64_t v2 = type metadata accessor for UUID();
  v1[18] = v2;
  v1[19] = *(void *)(v2 - 8);
  v1[20] = swift_task_alloc();
  sub_10000588C(&qword_101666568);
  v1[21] = swift_task_alloc();
  v1[22] = swift_task_alloc();
  return _swift_task_switch(sub_100FD8B28, v0, 0);
}

uint64_t sub_100FD8B28()
{
  uint64_t v38 = v0;
  if (qword_101637348 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 184) = sub_100010324(v1, (uint64_t)qword_101666080);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v37 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446210;
    *(void *)(v0 + 128) = sub_1008FA0F0(0x6164696C61766E69, 0xEC00000029286574, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v5 = *(void **)(v0 + 136);
  swift_beginAccess();
  v5[24] = &_swiftEmptySetSingleton;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v5[25] = _swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease();
  swift_beginAccess();
  v5[26] = _swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease();
  if (v5[22])
  {
    swift_retain();
    sub_10000588C(&qword_101638D40);
    Task.cancel()();
    swift_release();
  }
  uint64_t v6 = *(void *)(v0 + 136);
  v5[22] = 0;
  swift_release();
  swift_beginAccess();
  uint64_t v7 = *(void *)(v6 + 216);
  *(void *)(v0 + 192) = v7;
  char v8 = *(unsigned char *)(v7 + 32);
  *(unsigned char *)(v0 + 264) = v8;
  uint64_t v9 = -1;
  uint64_t v10 = -1 << v8;
  if (-(-1 << v8) < 64) {
    uint64_t v9 = ~(-1 << -(char)v10);
  }
  unint64_t v11 = v9 & *(void *)(v7 + 64);
  swift_bridgeObjectRetain();
  if (v11)
  {
    uint64_t v12 = 0;
    unint64_t v13 = __clz(__rbit64(v11));
    uint64_t v14 = (v11 - 1) & v11;
LABEL_11:
    uint64_t v15 = *(void *)(v0 + 168);
    (*(void (**)(uint64_t, unint64_t, void))(*(void *)(v0 + 152) + 16))(v15, *(void *)(v7 + 48) + *(void *)(*(void *)(v0 + 152) + 72) * v13, *(void *)(v0 + 144));
    uint64_t v16 = *(void *)(v7 + 56);
    uint64_t v17 = sub_10000588C((uint64_t *)&unk_101666570);
    *(_OWORD *)(v15 + *(int *)(v17 + 48)) = *(_OWORD *)(v16 + 16 * v13);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v15, 0, 1, v17);
    swift_retain();
    goto LABEL_18;
  }
  unint64_t v18 = 63 - v10;
  if ((unint64_t)(63 - v10) <= 0x7F)
  {
    uint64_t v12 = 0;
  }
  else
  {
    unint64_t v19 = *(void *)(v7 + 72);
    if (v19)
    {
      uint64_t v12 = 1;
LABEL_15:
      uint64_t v14 = (v19 - 1) & v19;
      unint64_t v13 = __clz(__rbit64(v19)) + (v12 << 6);
      goto LABEL_11;
    }
    if (v18 < 0xC0)
    {
      uint64_t v12 = 1;
    }
    else
    {
      unint64_t v19 = *(void *)(v7 + 80);
      if (v19)
      {
        uint64_t v12 = 2;
        goto LABEL_15;
      }
      if (v18 < 0x100)
      {
        uint64_t v12 = 2;
      }
      else
      {
        unint64_t v19 = *(void *)(v7 + 88);
        if (v19)
        {
          uint64_t v12 = 3;
          goto LABEL_15;
        }
        if (v18 < 0x140)
        {
          uint64_t v12 = 3;
        }
        else
        {
          unint64_t v19 = *(void *)(v7 + 96);
          if (v19)
          {
            uint64_t v12 = 4;
            goto LABEL_15;
          }
          uint64_t v32 = 0;
          uint64_t v33 = v18 >> 6;
          uint64_t v34 = 5;
          if (v33 > 5) {
            uint64_t v34 = v33;
          }
          uint64_t v35 = v34 - 5;
          while (v35 != v32)
          {
            unint64_t v19 = *(void *)(v7 + 104 + 8 * v32++);
            if (v19)
            {
              uint64_t v12 = v32 + 4;
              goto LABEL_15;
            }
          }
          uint64_t v12 = v33 - 1;
        }
      }
    }
  }
  uint64_t v20 = *(void *)(v0 + 168);
  uint64_t v21 = sub_10000588C((uint64_t *)&unk_101666570);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v20, 1, 1, v21);
  uint64_t v14 = 0;
LABEL_18:
  *(void *)(v0 + 200) = v12;
  *(void *)(v0 + 208) = v14;
  uint64_t v22 = *(void *)(v0 + 176);
  sub_10001D608(*(void *)(v0 + 168), v22, &qword_101666568);
  uint64_t v23 = sub_10000588C((uint64_t *)&unk_101666570);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 48))(v22, 1, v23) == 1)
  {
    swift_release();
    uint64_t v24 = (void *)swift_task_alloc();
    *(void *)(v0 + 232) = v24;
    *uint64_t v24 = v0;
    v24[1] = sub_100FD9774;
    uint64_t v25 = *(void *)(v0 + 136);
    v24[2] = v25;
    return _swift_task_switch(sub_100FDAFBC, v25, 0);
  }
  else
  {
    uint64_t v26 = *(void *)(v0 + 176);
    uint64_t v28 = *(void *)(v0 + 152);
    uint64_t v27 = *(void *)(v0 + 160);
    uint64_t v29 = *(void *)(v0 + 144);
    swift_release();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 32))(v27, v26, v29);
    uint64_t v30 = (void *)swift_task_alloc();
    *(void *)(v0 + 216) = v30;
    void *v30 = v0;
    v30[1] = sub_100FD9164;
    uint64_t v31 = *(void *)(v0 + 160);
    return sub_100FD9DFC(v31);
  }
}

uint64_t sub_100FD9164()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  swift_task_dealloc();
  if (v0) {
    swift_errorRelease();
  }
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 224) = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_100FD92AC;
  uint64_t v5 = *(void *)(v2 + 160);
  return sub_100FDA438(v5);
}

uint64_t sub_100FD92AC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 136);
  swift_task_dealloc();
  return _swift_task_switch(sub_100FD93BC, v1, 0);
}

uint64_t sub_100FD93BC()
{
  uint64_t v1 = (uint64_t (*)())(*(uint64_t (**)(void, void))(*(void *)(v0 + 152) + 8))(*(void *)(v0 + 160), *(void *)(v0 + 144));
  int64_t v5 = *(void *)(v0 + 200);
  unint64_t v4 = *(void *)(v0 + 208);
  if (v4)
  {
    uint64_t v6 = (v4 - 1) & v4;
    unint64_t v7 = __clz(__rbit64(v4)) | (v5 << 6);
    uint64_t v8 = *(void *)(v0 + 192);
LABEL_3:
    uint64_t v9 = *(void *)(v0 + 168);
    (*(void (**)(uint64_t, unint64_t, void))(*(void *)(v0 + 152) + 16))(v9, *(void *)(v8 + 48) + *(void *)(*(void *)(v0 + 152) + 72) * v7, *(void *)(v0 + 144));
    uint64_t v10 = *(void *)(v8 + 56);
    uint64_t v11 = sub_10000588C((uint64_t *)&unk_101666570);
    *(_OWORD *)(v9 + *(int *)(v11 + 48)) = *(_OWORD *)(v10 + 16 * v7);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v9, 0, 1, v11);
    swift_retain();
    goto LABEL_22;
  }
  int64_t v12 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    goto LABEL_30;
  }
  int64_t v13 = (unint64_t)((1 << *(unsigned char *)(v0 + 264)) + 63) >> 6;
  if (v12 < v13)
  {
    uint64_t v8 = *(void *)(v0 + 192);
    uint64_t v14 = v8 + 64;
    unint64_t v15 = *(void *)(v8 + 64 + 8 * v12);
    if (v15)
    {
LABEL_7:
      uint64_t v6 = (v15 - 1) & v15;
      unint64_t v7 = __clz(__rbit64(v15)) + (v12 << 6);
      int64_t v5 = v12;
      goto LABEL_3;
    }
    int64_t v16 = v5 + 2;
    ++v5;
    if (v12 + 1 < v13)
    {
      unint64_t v15 = *(void *)(v14 + 8 * v16);
      if (v15)
      {
LABEL_10:
        int64_t v12 = v16;
        goto LABEL_7;
      }
      int64_t v5 = v12 + 1;
      if (v12 + 2 < v13)
      {
        unint64_t v15 = *(void *)(v14 + 8 * (v12 + 2));
        if (v15)
        {
          v12 += 2;
          goto LABEL_7;
        }
        int64_t v16 = v12 + 3;
        int64_t v5 = v12 + 2;
        if (v12 + 3 < v13)
        {
          unint64_t v15 = *(void *)(v14 + 8 * v16);
          if (v15) {
            goto LABEL_10;
          }
          while (1)
          {
            int64_t v12 = v16 + 1;
            if (__OFADD__(v16, 1)) {
              break;
            }
            if (v12 >= v13)
            {
              int64_t v5 = v13 - 1;
              goto LABEL_21;
            }
            unint64_t v15 = *(void *)(v14 + 8 * v12);
            ++v16;
            if (v15) {
              goto LABEL_7;
            }
          }
LABEL_30:
          __break(1u);
          return _swift_task_switch(v1, v2, v3);
        }
      }
    }
  }
LABEL_21:
  uint64_t v17 = *(void *)(v0 + 168);
  uint64_t v18 = sub_10000588C((uint64_t *)&unk_101666570);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
  uint64_t v6 = 0;
LABEL_22:
  *(void *)(v0 + 200) = v5;
  *(void *)(v0 + 208) = v6;
  uint64_t v19 = *(void *)(v0 + 176);
  sub_10001D608(*(void *)(v0 + 168), v19, &qword_101666568);
  uint64_t v20 = sub_10000588C((uint64_t *)&unk_101666570);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 48))(v19, 1, v20) == 1)
  {
    swift_release();
    uint64_t v21 = (void *)swift_task_alloc();
    *(void *)(v0 + 232) = v21;
    *uint64_t v21 = v0;
    v21[1] = sub_100FD9774;
    uint64_t v2 = *(void *)(v0 + 136);
    _DWORD v21[2] = v2;
    uint64_t v1 = sub_100FDAFBC;
    uint64_t v3 = 0;
    return _swift_task_switch(v1, v2, v3);
  }
  uint64_t v22 = *(void *)(v0 + 176);
  uint64_t v24 = *(void *)(v0 + 152);
  uint64_t v23 = *(void *)(v0 + 160);
  uint64_t v25 = *(void *)(v0 + 144);
  swift_release();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 32))(v23, v22, v25);
  uint64_t v26 = (void *)swift_task_alloc();
  *(void *)(v0 + 216) = v26;
  *uint64_t v26 = v0;
  v26[1] = sub_100FD9164;
  uint64_t v27 = *(void *)(v0 + 160);
  return sub_100FD9DFC(v27);
}

uint64_t sub_100FD9774()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *v0;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 240) = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_100FD98CC;
  uint64_t v4 = *(void *)(v1 + 136);
  v3[19] = v4;
  return _swift_task_switch(sub_100FDB564, v4, 0);
}

uint64_t sub_100FD98CC()
{
  uint64_t v2 = (void *)*v1;
  v2[31] = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[17];
    return _swift_task_switch(sub_100FD9B88, v3, 0);
  }
  else
  {
    uint64_t v4 = (void *)swift_task_alloc();
    v2[32] = v4;
    *uint64_t v4 = v2;
    v4[1] = sub_100FD9A38;
    return sub_100FDBC48();
  }
}

uint64_t sub_100FD9A38()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100FD9B88()
{
  uint64_t v9 = v0;
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446466;
    v0[14] = sub_1008FA0F0(0x6164696C61766E69, 0xEC00000029286574, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 12) = 2114;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    v0[15] = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "%{public}s Failed to stopLocalFindableScanning %{public}@", (uint8_t *)v3, 0x16u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v6 = (void *)swift_task_alloc();
  v0[32] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_100FD9A38;
  return sub_100FDBC48();
}

uint64_t sub_100FD9DFC(uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  uint64_t v3 = type metadata accessor for UUID();
  v2[7] = v3;
  v2[8] = *(void *)(v3 - 8);
  v2[9] = swift_task_alloc();
  return _swift_task_switch(sub_100FD9EBC, v1, 0);
}

uint64_t sub_100FD9EBC()
{
  uint64_t v18 = v0;
  if (qword_101637348 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[8];
  uint64_t v2 = v0[9];
  uint64_t v4 = v0[7];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_101666080);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = v0[8];
  uint64_t v9 = v0[9];
  uint64_t v11 = v0[7];
  if (v8)
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136446723;
    v0[2] = sub_1008FA0F0(0xD000000000000019, 0x800000010141C820, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2160;
    v0[3] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 22) = 2081;
    sub_100FFD1F4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[4] = sub_1008FA0F0(v13, v14, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "%{public}s for %{private,mask.hash}s", (uint8_t *)v12, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v10 + 8))(v0[9], v0[7]);
  }

  *(unsigned char *)(v0[6] + 185) = 0;
  unint64_t v15 = (void *)swift_task_alloc();
  v0[10] = v15;
  void *v15 = v0;
  v15[1] = sub_100FDA1D0;
  return sub_100FDBC48();
}

uint64_t sub_100FDA1D0()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *v0;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 88) = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_100FDA328;
  uint64_t v4 = *(void *)(v1 + 40);
  return sub_100FDF62C(v4);
}

uint64_t sub_100FDA328()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100FDA438(uint64_t a1)
{
  v2[17] = a1;
  v2[18] = v1;
  sub_10000588C(&qword_101638CF0);
  v2[19] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for UUID();
  v2[20] = v3;
  v2[21] = *(void *)(v3 - 8);
  v2[22] = swift_task_alloc();
  uint64_t v4 = sub_10000588C(&qword_10163D210);
  v2[23] = v4;
  v2[24] = *(void *)(v4 - 8);
  v2[25] = swift_task_alloc();
  return _swift_task_switch(sub_100FDA588, v1, 0);
}

uint64_t sub_100FDA588()
{
  uint64_t v15 = v0;
  if (*(unsigned char *)(*(void *)(v0 + 144) + 186) == 1)
  {
    if (qword_101637348 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    *(void *)(v0 + 208) = sub_100010324(v1, (uint64_t)qword_101666080);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Saving .disappeared event", v4, 2u);
      swift_slowDealloc();
    }

    uint64_t v5 = qword_1016375E8;
    swift_retain();
    if (v5 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
    if (*(void *)(v0 + 80))
    {
      sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
      swift_release();
      sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
      uint64_t v13 = (uint64_t (__cdecl *)())((char *)&dword_101639168 + dword_101639168);
      os_log_type_t v7 = (void *)swift_task_alloc();
      *(void *)(v0 + 216) = v7;
      *os_log_type_t v7 = v0;
      v7[1] = sub_100FDA948;
      return v13();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    if (qword_101637348 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_100010324(v8, (uint64_t)qword_101666080);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136315138;
      *(void *)(v0 + 120) = sub_1008FA0F0(0xD00000000000001CLL, 0x800000010141C7E0, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "%s Never detected nearby. NOT saving .disappeared event", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
    return v12();
  }
  return result;
}

uint64_t sub_100FDA948(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 144);
  *(void *)(*(void *)v1 + 224) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100FDAA60, v2, 0);
}

uint64_t sub_100FDAA60()
{
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (v0[28])
  {
    uint64_t v3 = v0[21];
    uint64_t v2 = v0[22];
    uint64_t v5 = v0[19];
    uint64_t v4 = v0[20];
    uint64_t v6 = v0[17];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v6, v4);
    type metadata accessor for Peripheral();
    Identifier.init(_:)();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v5, 1, 1, v4);
    os_log_type_t v7 = (void *)swift_task_alloc();
    v0[29] = v7;
    *os_log_type_t v7 = v0;
    v7[1] = sub_100FDAD84;
    uint64_t v8 = v0[25];
    uint64_t v9 = v0[19];
    return sub_100D3170C(v8, v9);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_10001CEC8();
    swift_allocError();
    *uint64_t v11 = 0xD000000000000014;
    v11[1] = 0x800000010141C800;
    swift_willThrow();
    swift_errorRetain();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 138543362;
      swift_errorRetain();
      uint64_t v16 = _swift_stdlib_bridgeErrorToNSError();
      v0[16] = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v15 = v16;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Failed to save .disappeared event %{public}@", v14, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v17 = (uint64_t (*)(void))v0[1];
    return v17();
  }
}

uint64_t sub_100FDAD84()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 200);
  uint64_t v2 = *(void *)(*(void *)v0 + 192);
  uint64_t v3 = *(void *)(*(void *)v0 + 184);
  uint64_t v4 = *(void *)(*(void *)v0 + 152);
  uint64_t v5 = *(void *)(*(void *)v0 + 144);
  swift_task_dealloc();
  sub_10001DAB4(v4, &qword_101638CF0);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(sub_100FDAF1C, v5, 0);
}

uint64_t sub_100FDAF1C()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100FDAF9C()
{
  *(void *)(v1 + 16) = v0;
  return _swift_task_switch(sub_100FDAFBC, v0, 0);
}

uint64_t sub_100FDAFBC()
{
  if (qword_101637348 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_101666080);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Clearing throttles", v4, 2u);
    swift_slowDealloc();
  }

  if (qword_101637368 != -1) {
    swift_once();
  }
  uint64_t v7 = (uint64_t (*)(void *))((char *)&async function pointer to dispatch thunk of AsyncKeyedThrottle.clearThrottleForKeysExcept(keys:)
                                        + async function pointer to dispatch thunk of AsyncKeyedThrottle.clearThrottleForKeysExcept(keys:));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v5;
  void *v5 = v0;
  v5[1] = sub_100FDB15C;
  return v7(_swiftEmptyArrayStorage);
}

uint64_t sub_100FDB15C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  swift_task_dealloc();
  return _swift_task_switch(sub_100FDB26C, v1, 0);
}

uint64_t sub_100FDB26C()
{
  if (qword_101637358 != -1) {
    swift_once();
  }
  uint64_t v3 = (uint64_t (*)(void *))((char *)&async function pointer to dispatch thunk of AsyncKeyedThrottle.clearThrottleForKeysExcept(keys:)
                                        + async function pointer to dispatch thunk of AsyncKeyedThrottle.clearThrottleForKeysExcept(keys:));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 32) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100FDB350;
  return v3(_swiftEmptyArrayStorage);
}

uint64_t sub_100FDB350()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  swift_task_dealloc();
  return _swift_task_switch(sub_100FDB460, v1, 0);
}

uint64_t sub_100FDB460()
{
  if (qword_101637360 != -1) {
    swift_once();
  }
  uint64_t v3 = (uint64_t (*)(void *))((char *)&async function pointer to dispatch thunk of AsyncKeyedThrottle.clearThrottleForKeysExcept(keys:)
                                        + async function pointer to dispatch thunk of AsyncKeyedThrottle.clearThrottleForKeysExcept(keys:));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10001CBC4;
  return v3(_swiftEmptyArrayStorage);
}

uint64_t sub_100FDB544()
{
  *(void *)(v1 + 152) = v0;
  return _swift_task_switch(sub_100FDB564, v0, 0);
}

uint64_t sub_100FDB564()
{
  uint64_t v10 = v0;
  if (qword_101637348 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 160) = sub_100010324(v1, (uint64_t)qword_101666080);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446210;
    *(void *)(v0 + 144) = sub_1008FA0F0(0xD00000000000001BLL, 0x800000010141C840, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v5 = qword_1016375E8;
  swift_retain();
  if (v5 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v8 = (uint64_t (__cdecl *)())((char *)&dword_101639258 + dword_101639258);
    uint64_t v7 = (void *)swift_task_alloc();
    *(void *)(v0 + 168) = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_100FDB810;
    return v8();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100FDB810(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 152);
  *(void *)(*(void *)v1 + 176) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100FDB928, v2, 0);
}

uint64_t sub_100FDB928()
{
  uint64_t v9 = v0;
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (v0[22])
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v2 = v0[22];
    return _swift_task_switch(sub_100FDBB78, v2, 0);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    os_log_type_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 136446210;
      v0[17] = sub_1008FA0F0(0xD00000000000001BLL, 0x800000010141C840, &v8);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s Missing OwnerCommandService!", v5, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    type metadata accessor for SPBTFindingSessionError(0);
    v0[16] = 4;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100FFD1F4(&qword_101666550, 255, type metadata accessor for SPBTFindingSessionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    uint64_t v6 = (uint64_t (*)(void))v0[1];
    return v6();
  }
}

uint64_t sub_100FDBB78()
{
  uint64_t v1 = *(void *)(v0 + 152);
  sub_10122A9BC();
  return _swift_task_switch(sub_100FDBBE4, v1, 0);
}

uint64_t sub_100FDBBE4()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100FDBC48()
{
  v1[6] = v0;
  uint64_t v2 = type metadata accessor for UUID();
  v1[7] = v2;
  v1[8] = *(void *)(v2 - 8);
  v1[9] = swift_task_alloc();
  v1[10] = swift_task_alloc();
  v1[11] = swift_task_alloc();
  sub_10000588C(&qword_101666568);
  v1[12] = swift_task_alloc();
  v1[13] = swift_task_alloc();
  return _swift_task_switch(sub_100FDBD64, v0, 0);
}

uint64_t sub_100FDBD64()
{
  uint64_t v55 = v0;
  if (qword_101637348 == -1) {
    goto LABEL_2;
  }
LABEL_41:
  swift_once();
LABEL_2:
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 112) = sub_100010324(v1, (uint64_t)qword_101666080);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v54 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446210;
    *(void *)(v0 + 40) = sub_1008FA0F0(0xD000000000000020, 0x800000010141C7B0, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v5 = *(void *)(v0 + 48);
  *(_WORD *)(v5 + 184) = 0;
  swift_beginAccess();
  uint64_t v6 = *(void *)(v5 + 216);
  *(void *)(v0 + 120) = v6;
  char v7 = *(unsigned char *)(v6 + 32);
  *(unsigned char *)(v0 + 176) = v7;
  uint64_t v8 = 1 << v7;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  else {
    uint64_t v9 = -1;
  }
  unint64_t v10 = v9 & *(void *)(v6 + 64);
  swift_bridgeObjectRetain();
  int64_t v11 = 0;
  if (v10)
  {
LABEL_8:
    unint64_t v12 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    unint64_t v13 = v12 | (v11 << 6);
    uint64_t v14 = *(void *)(v0 + 120);
LABEL_9:
    uint64_t v15 = *(void *)(v0 + 96);
    (*(void (**)(uint64_t, unint64_t, void))(*(void *)(v0 + 64) + 16))(v15, *(void *)(v14 + 48) + *(void *)(*(void *)(v0 + 64) + 72) * v13, *(void *)(v0 + 56));
    uint64_t v16 = *(void *)(v14 + 56);
    uint64_t v17 = sub_10000588C((uint64_t *)&unk_101666570);
    *(_OWORD *)(v15 + *(int *)(v17 + 48)) = *(_OWORD *)(v16 + 16 * v13);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v15, 0, 1, v17);
    swift_retain();
    goto LABEL_16;
  }
  while (1)
  {
    int64_t v18 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_41;
    }
    int64_t v19 = (unint64_t)((1 << *(unsigned char *)(v0 + 176)) + 63) >> 6;
    if (v18 >= v19)
    {
      int64_t v22 = v11;
    }
    else
    {
      uint64_t v14 = *(void *)(v0 + 120);
      uint64_t v20 = v14 + 64;
      unint64_t v21 = *(void *)(v14 + 64 + 8 * v18);
      if (v21) {
        goto LABEL_13;
      }
      int64_t v22 = v11 + 1;
      if (v11 + 2 < v19)
      {
        unint64_t v21 = *(void *)(v20 + 8 * (v11 + 2));
        if (v21)
        {
          int64_t v18 = v11 + 2;
LABEL_13:
          unint64_t v10 = (v21 - 1) & v21;
          unint64_t v13 = __clz(__rbit64(v21)) + (v18 << 6);
          int64_t v11 = v18;
          goto LABEL_9;
        }
        int64_t v22 = v11 + 2;
        if (v11 + 3 < v19)
        {
          unint64_t v21 = *(void *)(v20 + 8 * (v11 + 3));
          if (v21)
          {
            int64_t v18 = v11 + 3;
            goto LABEL_13;
          }
          int64_t v18 = v11 + 4;
          int64_t v22 = v11 + 3;
          if (v11 + 4 < v19)
          {
            unint64_t v21 = *(void *)(v20 + 8 * v18);
            if (v21) {
              goto LABEL_13;
            }
            int64_t v22 = v19 - 1;
            int64_t v30 = v19 - 5;
            while (v30 != v11)
            {
              unint64_t v21 = *(void *)(v14 + 104 + 8 * v11++);
              if (v21)
              {
                int64_t v18 = v11 + 4;
                goto LABEL_13;
              }
            }
          }
        }
      }
    }
    uint64_t v23 = *(void *)(v0 + 96);
    uint64_t v24 = sub_10000588C((uint64_t *)&unk_101666570);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v23, 1, 1, v24);
    unint64_t v10 = 0;
    int64_t v11 = v22;
LABEL_16:
    *(void *)(v0 + 128) = v11;
    *(void *)(v0 + 136) = v10;
    uint64_t v25 = *(void *)(v0 + 104);
    sub_10001D608(*(void *)(v0 + 96), v25, &qword_101666568);
    uint64_t v26 = sub_10000588C((uint64_t *)&unk_101666570);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 48))(v25, 1, v26) == 1) {
      break;
    }
    uint64_t v27 = *(void *)(v0 + 88);
    uint64_t v28 = *(void *)(v0 + 64);
    uint64_t v29 = *(void *)(*(void *)(v0 + 104) + *(int *)(v26 + 48));
    *(void *)(v0 + 144) = v29;
    (*(void (**)(uint64_t))(v28 + 32))(v27);
    if (v29)
    {
      (*(void (**)(void, void, void))(*(void *)(v0 + 64) + 16))(*(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 56));
      swift_retain_n();
      uint64_t v32 = Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.default.getter();
      BOOL v34 = os_log_type_enabled(v32, v33);
      uint64_t v35 = *(void *)(v0 + 80);
      if (v34)
      {
        uint64_t v50 = *(void *)(v0 + 80);
        uint64_t v36 = *(void *)(v0 + 64);
        uint64_t v37 = *(void *)(v0 + 72);
        uint64_t v38 = *(void *)(v0 + 56);
        log = v32;
        uint64_t v39 = swift_slowAlloc();
        uint64_t v54 = swift_slowAlloc();
        *(_DWORD *)uint64_t v39 = 136315651;
        os_log_type_t type = v33;
        WorkItemQueue.WorkItem.id.getter();
        sub_100FFD1F4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v40 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v42 = v41;
        uint64_t v43 = *(void (**)(uint64_t, uint64_t))(v36 + 8);
        v43(v37, v38);
        *(void *)(v39 + 4) = sub_1008FA0F0(v40, v42, &v54);
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v39 + 12) = 2160;
        *(void *)(v39 + 14) = 1752392040;
        *(_WORD *)(v39 + 22) = 2081;
        uint64_t v44 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v39 + 24) = sub_1008FA0F0(v44, v45, &v54);
        swift_bridgeObjectRelease();
        v43(v50, v38);
        _os_log_impl((void *)&_mh_execute_header, log, type, "Canceling %s for %{private,mask.hash}s.", (uint8_t *)v39, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        uint64_t v46 = *(void *)(v0 + 56);
        uint64_t v47 = *(void *)(v0 + 64);
        swift_release_n();
        uint64_t v43 = *(void (**)(uint64_t, uint64_t))(v47 + 8);
        v43(v35, v46);
      }
      *(void *)(v0 + 152) = v43;
      id v53 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of WorkItemQueue.WorkItem.cancel()
                              + async function pointer to dispatch thunk of WorkItemQueue.WorkItem.cancel());
      uint64_t v48 = (void *)swift_task_alloc();
      *(void *)(v0 + 160) = v48;
      *uint64_t v48 = v0;
      v48[1] = sub_100FDC4D4;
      goto LABEL_37;
    }
    (*(void (**)(void, void))(*(void *)(v0 + 64) + 8))(*(void *)(v0 + 88), *(void *)(v0 + 56));
    if (v10) {
      goto LABEL_8;
    }
  }
  swift_release();
  id v53 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of WorkItemQueue.flushQueue()
                          + async function pointer to dispatch thunk of WorkItemQueue.flushQueue());
  uint64_t v31 = (void *)swift_task_alloc();
  *(void *)(v0 + 168) = v31;
  void *v31 = v0;
  v31[1] = sub_100FDCBEC;
LABEL_37:
  return v53();
}

uint64_t sub_100FDC4D4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  swift_task_dealloc();
  return _swift_task_switch(sub_100FDC5E4, v1, 0);
}

uint64_t sub_100FDC5E4()
{
  uint64_t v49 = v0;
  uint64_t v1 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 152);
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 56);
  swift_release_n();
  uint64_t result = v1(v2, v3);
  int64_t v5 = *(void *)(v0 + 128);
  unint64_t v6 = *(void *)(v0 + 136);
  if (!v6) {
    goto LABEL_4;
  }
LABEL_2:
  unint64_t v7 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  unint64_t v8 = v7 | (v5 << 6);
  uint64_t v9 = *(void *)(v0 + 120);
LABEL_3:
  uint64_t v10 = *(void *)(v0 + 96);
  (*(void (**)(uint64_t, unint64_t, void))(*(void *)(v0 + 64) + 16))(v10, *(void *)(v9 + 48) + *(void *)(*(void *)(v0 + 64) + 72) * v8, *(void *)(v0 + 56));
  uint64_t v11 = *(void *)(v9 + 56);
  uint64_t v12 = sub_10000588C((uint64_t *)&unk_101666570);
  *(_OWORD *)(v10 + *(int *)(v12 + 48)) = *(_OWORD *)(v11 + 16 * v8);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v10, 0, 1, v12);
  swift_retain();
  while (1)
  {
    *(void *)(v0 + 128) = v5;
    *(void *)(v0 + 136) = v6;
    uint64_t v20 = *(void *)(v0 + 104);
    sub_10001D608(*(void *)(v0 + 96), v20, &qword_101666568);
    uint64_t v21 = sub_10000588C((uint64_t *)&unk_101666570);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 48))(v20, 1, v21) == 1)
    {
      swift_release();
      uint64_t v47 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of WorkItemQueue.flushQueue()
                              + async function pointer to dispatch thunk of WorkItemQueue.flushQueue());
      uint64_t v26 = (void *)swift_task_alloc();
      *(void *)(v0 + 168) = v26;
      *uint64_t v26 = v0;
      v26[1] = sub_100FDCBEC;
      goto LABEL_31;
    }
    uint64_t v22 = *(void *)(v0 + 88);
    uint64_t v23 = *(void *)(v0 + 64);
    uint64_t v24 = *(void *)(*(void *)(v0 + 104) + *(int *)(v21 + 48));
    *(void *)(v0 + 144) = v24;
    (*(void (**)(uint64_t))(v23 + 32))(v22);
    if (v24) {
      break;
    }
    uint64_t result = (*(uint64_t (**)(void, void))(*(void *)(v0 + 64) + 8))(*(void *)(v0 + 88), *(void *)(v0 + 56));
    if (v6) {
      goto LABEL_2;
    }
LABEL_4:
    int64_t v13 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      return result;
    }
    int64_t v14 = (unint64_t)((1 << *(unsigned char *)(v0 + 176)) + 63) >> 6;
    if (v13 >= v14)
    {
      int64_t v17 = v5;
    }
    else
    {
      uint64_t v9 = *(void *)(v0 + 120);
      uint64_t v15 = v9 + 64;
      unint64_t v16 = *(void *)(v9 + 64 + 8 * v13);
      if (v16) {
        goto LABEL_7;
      }
      int64_t v17 = v5 + 1;
      if (v5 + 2 < v14)
      {
        unint64_t v16 = *(void *)(v15 + 8 * (v5 + 2));
        if (v16)
        {
          int64_t v13 = v5 + 2;
LABEL_7:
          unint64_t v6 = (v16 - 1) & v16;
          unint64_t v8 = __clz(__rbit64(v16)) + (v13 << 6);
          int64_t v5 = v13;
          goto LABEL_3;
        }
        int64_t v17 = v5 + 2;
        if (v5 + 3 < v14)
        {
          unint64_t v16 = *(void *)(v15 + 8 * (v5 + 3));
          if (v16)
          {
            int64_t v13 = v5 + 3;
            goto LABEL_7;
          }
          int64_t v13 = v5 + 4;
          int64_t v17 = v5 + 3;
          if (v5 + 4 < v14)
          {
            unint64_t v16 = *(void *)(v15 + 8 * v13);
            if (v16) {
              goto LABEL_7;
            }
            int64_t v17 = v14 - 1;
            int64_t v25 = v14 - 5;
            while (v25 != v5)
            {
              unint64_t v16 = *(void *)(v9 + 104 + 8 * v5++);
              if (v16)
              {
                int64_t v13 = v5 + 4;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
    uint64_t v18 = *(void *)(v0 + 96);
    uint64_t v19 = sub_10000588C((uint64_t *)&unk_101666570);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v18, 1, 1, v19);
    unint64_t v6 = 0;
    int64_t v5 = v17;
  }
  (*(void (**)(void, void, void))(*(void *)(v0 + 64) + 16))(*(void *)(v0 + 80), *(void *)(v0 + 88), *(void *)(v0 + 56));
  swift_retain_n();
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.default.getter();
  BOOL v29 = os_log_type_enabled(v27, v28);
  uint64_t v30 = *(void *)(v0 + 80);
  if (v29)
  {
    uint64_t v44 = *(void *)(v0 + 80);
    uint64_t v31 = *(void *)(v0 + 64);
    uint64_t v32 = *(void *)(v0 + 72);
    uint64_t v33 = *(void *)(v0 + 56);
    log = v27;
    uint64_t v34 = swift_slowAlloc();
    uint64_t v48 = swift_slowAlloc();
    *(_DWORD *)uint64_t v34 = 136315651;
    os_log_type_t type = v28;
    WorkItemQueue.WorkItem.id.getter();
    sub_100FFD1F4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v37 = v36;
    uint64_t v38 = *(void (**)(uint64_t, uint64_t))(v31 + 8);
    v38(v32, v33);
    *(void *)(v34 + 4) = sub_1008FA0F0(v35, v37, &v48);
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v34 + 12) = 2160;
    *(void *)(v34 + 14) = 1752392040;
    *(_WORD *)(v34 + 22) = 2081;
    uint64_t v39 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v34 + 24) = sub_1008FA0F0(v39, v40, &v48);
    swift_bridgeObjectRelease();
    v38(v44, v33);
    _os_log_impl((void *)&_mh_execute_header, log, type, "Canceling %s for %{private,mask.hash}s.", (uint8_t *)v34, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v41 = *(void *)(v0 + 56);
    uint64_t v42 = *(void *)(v0 + 64);
    swift_release_n();
    uint64_t v38 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
    v38(v30, v41);
  }
  *(void *)(v0 + 152) = v38;
  uint64_t v47 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of WorkItemQueue.WorkItem.cancel()
                          + async function pointer to dispatch thunk of WorkItemQueue.WorkItem.cancel());
  uint64_t v43 = (void *)swift_task_alloc();
  *(void *)(v0 + 160) = v43;
  *uint64_t v43 = v0;
  v43[1] = sub_100FDC4D4;
LABEL_31:
  return v47();
}

uint64_t sub_100FDCBEC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  swift_task_dealloc();
  return _swift_task_switch(sub_100FDCCFC, v1, 0);
}

uint64_t sub_100FDCCFC()
{
  *(void *)(*(void *)(v0 + 48) + 216) = _swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100FDCDB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[19] = a3;
  v4[20] = v3;
  v4[17] = a1;
  v4[18] = a2;
  v4[21] = sub_10000588C(&qword_101657910);
  v4[22] = swift_task_alloc();
  v4[23] = swift_task_alloc();
  v4[24] = swift_task_alloc();
  v4[25] = swift_task_alloc();
  v4[26] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  v4[27] = v5;
  v4[28] = *(void *)(v5 - 8);
  v4[29] = swift_task_alloc();
  v4[30] = swift_task_alloc();
  v4[31] = swift_task_alloc();
  return _swift_task_switch(sub_100FDCEF8, v3, 0);
}

uint64_t sub_100FDCEF8()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_101639198 + dword_101639198);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 256) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100FDD034;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100FDD034(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 160);
  *(void *)(*(void *)v1 + 264) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100FDD14C, v2, 0);
}

uint64_t sub_100FDD14C()
{
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (v0[33])
  {
    uint64_t v2 = v0[20];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v3 = *(void *)(v2 + 128);
    v0[34] = v3;
    return _swift_task_switch(sub_100FDD364, v3, 0);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_101637340 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_10170F0B0);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Missing BeaconKeyService to reconcile!", v7, 2u);
      swift_slowDealloc();
    }

    sub_100FFA448();
    swift_allocError();
    *unint64_t v8 = 0x8000000000000000;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
}

uint64_t sub_100FDD364()
{
  *(void *)(v0 + 280) = *(void *)(*(void *)(v0 + 272) + 136);
  swift_retain();
  return _swift_task_switch(sub_100FDD3D8, 0, 0);
}

uint64_t sub_100FDD3D8()
{
  uint64_t v2 = v0[34];
  uint64_t v1 = v0[35];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[36] = v3;
  v3[2] = v1;
  v3[3] = sub_10001DAA0;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[37] = v4;
  uint64_t v5 = type metadata accessor for BeaconKeyManager(0);
  *uint64_t v4 = v0;
  v4[1] = sub_100FDD4EC;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 15, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10001DAA8, v3, v5);
}

uint64_t sub_100FDD4EC()
{
  uint64_t v1 = (void *)*v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  v1[38] = v1[15];
  uint64_t v2 = v1[33];
  return _swift_task_switch(sub_100FDD658, v2, 0);
}

uint64_t sub_100FDD658(uint64_t (*a1)(), uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(v3 + 264) + 136);
  *(void *)(v3 + 312) = v4;
  if (v4)
  {
    a1 = sub_100FDD684;
    a3 = 0;
  }
  else
  {
    __break(1u);
  }
  return _swift_task_switch(a1, v4, a3);
}

uint64_t sub_100FDD684()
{
  uint64_t v1 = v0[39];
  uint64_t v3 = v0[18];
  uint64_t v2 = v0[19];
  sub_10000588C((uint64_t *)&unk_101665470);
  sub_100FFD1F4(&qword_101652078, 255, (void (*)(uint64_t))type metadata accessor for BeaconKeyServiceBuilder);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[40] = v4;
  v4[2] = v1;
  v4[3] = v3;
  v4[4] = v2;
  uint64_t v5 = (void *)swift_task_alloc();
  v0[41] = v5;
  void *v5 = v0;
  v5[1] = sub_100FDD7D8;
  return withTaskGroup<A, B>(of:returning:isolation:body:)(v0 + 16);
}

uint64_t sub_100FDD7D8()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(void *)(v1 + 312);
  return _swift_task_switch(sub_100FDD90C, v2, 0);
}

uint64_t sub_100FDD90C()
{
  uint64_t v1 = v0[20];
  v0[42] = v0[16];
  return _swift_task_switch(sub_100FDD930, v1, 0);
}

uint64_t sub_100FDD930()
{
  uint64_t v1 = v0[42];
  if (*(void *)(v1 + 16))
  {
    uint64_t v2 = *(unsigned __int8 *)(v0[28] + 80);
    sub_100FFC7DC(v1 + ((v2 + 32) & ~v2), v0[26], type metadata accessor for BeaconKeyManager.IndexInformation);
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = 1;
  }
  uint64_t v4 = v0[27];
  uint64_t v5 = v0[28];
  uint64_t v6 = v0[26];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v6, v3, 1, v4);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  v0[43] = v7;
  v0[44] = (v5 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
  if (v7(v6, 1, v4) == 1)
  {
    uint64_t v8 = v0[19];
    sub_10001DAB4(v0[26], &qword_101657910);
    uint64_t v9 = v0[38];
    uint64_t v11 = v0[18];
    uint64_t v10 = v0[19];
    if ((v8 & 0x2000000000000000) != 0)
    {
      uint64_t v12 = (void *)swift_allocObject();
      v0[45] = v12;
      void v12[2] = v9;
      v12[3] = v11;
      v12[4] = v10 & 0xDFFFFFFFFFFFFFFFLL;
      sub_1001A1790(v11, v10);
      sub_1001A1790(v11, v10);
      swift_retain();
      uint64_t v24 = (void *)swift_task_alloc();
      v0[46] = v24;
      *uint64_t v24 = v0;
      v24[1] = sub_100FDDCF8;
      uint64_t v14 = v0[23];
      uint64_t v15 = v0[21];
      unint64_t v16 = sub_100FFA4A0;
    }
    else
    {
      uint64_t v12 = (void *)swift_allocObject();
      v0[47] = v12;
      void v12[2] = v9;
      v12[3] = v11;
      v12[4] = v10;
      sub_1001A1790(v11, v10);
      sub_1001A1790(v11, v10);
      swift_retain();
      int64_t v13 = (void *)swift_task_alloc();
      v0[48] = v13;
      *int64_t v13 = v0;
      v13[1] = sub_100FDDFF0;
      uint64_t v14 = v0[25];
      uint64_t v15 = v0[21];
      unint64_t v16 = sub_100FFA4B0;
    }
    return unsafeBlocking<A>(_:)(v14, v16, v12, v15);
  }
  else
  {
    uint64_t v17 = v0[31];
    uint64_t v18 = v0[26];
    uint64_t v19 = v0[17];
    swift_release();
    swift_release();
    sub_100FFC714(v18, v17, type metadata accessor for BeaconKeyManager.IndexInformation);
    sub_100FFC714(v17, v19, type metadata accessor for BeaconKeyManager.IndexInformation);
    uint64_t v20 = v0[17];
    uint64_t v21 = type metadata accessor for BeaconDetails(0);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v20, 0, 1, v21);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v22 = (uint64_t (*)(void))v0[1];
    return v22();
  }
}

uint64_t sub_100FDDCF8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 160);
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100FDDE24, v1, 0);
}

uint64_t sub_100FDDE24()
{
  uint64_t v1 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v0[43];
  uint64_t v2 = v0[27];
  uint64_t v4 = v0[22];
  uint64_t v3 = v0[23];
  uint64_t v6 = v0[18];
  uint64_t v5 = v0[19];
  swift_release();
  swift_release();
  sub_1001A1AD8(v6, v5);
  sub_10001D608(v3, v4, &qword_101657910);
  if (v1(v4, 1, v2) == 1)
  {
    sub_10001DAB4(v0[22], &qword_101657910);
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v8 = v0[29];
    uint64_t v9 = v0[17];
    sub_100FFC714(v0[22], v8, type metadata accessor for BeaconKeyManager.IndexInformation);
    sub_100FFC714(v8, v9, type metadata accessor for BeaconKeyManager.IndexInformation);
    uint64_t v7 = 0;
  }
  uint64_t v10 = v0[17];
  uint64_t v11 = type metadata accessor for BeaconDetails(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, v7, 1, v11);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_100FDDFF0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 160);
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100FDE11C, v1, 0);
}

uint64_t sub_100FDE11C()
{
  uint64_t v1 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v0[43];
  uint64_t v2 = v0[27];
  uint64_t v4 = v0[24];
  uint64_t v3 = v0[25];
  uint64_t v6 = v0[18];
  uint64_t v5 = v0[19];
  swift_release();
  swift_release();
  sub_1001A1AD8(v6, v5);
  sub_10001D608(v3, v4, &qword_101657910);
  if (v1(v4, 1, v2) == 1)
  {
    sub_10001DAB4(v0[24], &qword_101657910);
    uint64_t v7 = 1;
  }
  else
  {
    uint64_t v8 = v0[30];
    uint64_t v9 = v0[17];
    sub_100FFC714(v0[24], v8, type metadata accessor for BeaconKeyManager.IndexInformation);
    sub_100FFC714(v8, v9, type metadata accessor for BeaconKeyManager.IndexInformation);
    uint64_t v7 = 0;
  }
  uint64_t v10 = v0[17];
  uint64_t v11 = type metadata accessor for BeaconDetails(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56))(v10, v7, 1, v11);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_100FDE2E8@<X0>(uint64_t a1@<X8>)
{
  sub_10000588C((uint64_t *)&unk_101665470);
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v2 = *(void *)(v7 + 16);
  uint64_t v3 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  uint64_t v4 = *(void *)(v3 - 8);
  if (v2)
  {
    sub_100FFC7DC(v7+ ((*(unsigned __int8 *)(*(void *)(v3 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v3 - 8) + 80)), a1, type metadata accessor for BeaconKeyManager.IndexInformation);
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = 1;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(a1, v5, 1, v3);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100FDE400(uint64_t a1)
{
  v2[20] = a1;
  v2[21] = v1;
  sub_10000588C(&qword_101638CF0);
  v2[22] = swift_task_alloc();
  v2[23] = swift_task_alloc();
  v2[24] = type metadata accessor for AccessoryCommand();
  v2[25] = swift_task_alloc();
  v2[26] = sub_10000588C(&qword_10163B9F0);
  v2[27] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for UUID();
  v2[28] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[29] = v4;
  v2[30] = *(void *)(v4 + 64);
  v2[31] = swift_task_alloc();
  v2[32] = swift_task_alloc();
  v2[33] = swift_task_alloc();
  v2[34] = swift_task_alloc();
  return _swift_task_switch(sub_100FDE594, v1, 0);
}

uint64_t sub_100FDE594()
{
  uint64_t v22 = v0;
  if (qword_101637348 != -1) {
    swift_once();
  }
  uint64_t v1 = (long long *)(v0 + 7);
  uint64_t v2 = v0[20];
  uint64_t v3 = v0[34];
  uint64_t v5 = v0[28];
  uint64_t v4 = v0[29];
  uint64_t v6 = type metadata accessor for Logger();
  v0[35] = v6;
  sub_100010324(v6, (uint64_t)qword_101666080);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[36] = v7;
  v0[37] = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v7(v3, v2, v5);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  BOOL v10 = os_log_type_enabled(v8, v9);
  uint64_t v11 = v0[34];
  uint64_t v13 = v0[28];
  uint64_t v12 = v0[29];
  if (v10)
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136446723;
    v0[17] = sub_1008FA0F0(0xD000000000000027, 0x800000010141C780, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v14 + 12) = 2160;
    v0[18] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v14 + 22) = 2081;
    sub_100FFD1F4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[19] = sub_1008FA0F0(v15, v16, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s for %{private,mask.hash}s", (uint8_t *)v14, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v1 = (long long *)(v0 + 7);
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v12 + 8))(v0[34], v0[28]);
  }

  uint64_t v17 = qword_1016375E8;
  swift_retain();
  if (v17 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, (uint64_t)v1, (uint64_t *)&unk_101638D30);
  if (v0[10])
  {
    sub_10001CEB0(v1, (uint64_t)(v0 + 2));
    swift_release();
    sub_10001CD44(v0 + 2, v0[5]);
    uint64_t v20 = (uint64_t (__cdecl *)())((char *)&dword_101639258 + dword_101639258);
    uint64_t v19 = (void *)swift_task_alloc();
    v0[38] = v19;
    *uint64_t v19 = v0;
    v19[1] = sub_100FDE978;
    return v20();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100FDE978(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 168);
  *(void *)(*(void *)v1 + 312) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100FDEA90, v2, 0);
}

uint64_t sub_100FDEA90()
{
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (v0[39])
  {
    uint64_t v2 = v0[21];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v3 = *(void *)(v2 + 128);
    v0[40] = v3;
    return _swift_task_switch(sub_100FDECF8, v3, 0);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_101637340 != -1) {
      swift_once();
    }
    sub_100010324(v0[35], (uint64_t)qword_10170F0B0);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Missing OwnerCommandService to startAggressiveAdvertisement!", v6, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for SPBTFindingSessionError(0);
    v0[16] = 4;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100FFD1F4(&qword_101666550, 255, type metadata accessor for SPBTFindingSessionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
}

uint64_t sub_100FDECF8()
{
  uint64_t v1 = v0[40];
  uint64_t v2 = (void (*)(uint64_t, uint64_t, uint64_t))v0[36];
  uint64_t v3 = v0[33];
  uint64_t v4 = v0[29];
  uint64_t v5 = v0[28];
  uint64_t v6 = v0[20];
  v0[41] = *(void *)(v1 + 136);
  v2(v3, v6, v5);
  unint64_t v7 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v8 = swift_allocObject();
  v0[42] = v8;
  *(void *)(v8 + 16) = v1;
  uint64_t v9 = *(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32);
  v0[43] = v9;
  v0[44] = (v4 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v9(v8 + v7, v3, v5);
  swift_retain();
  return _swift_task_switch(sub_100FDEDF0, 0, 0);
}

uint64_t sub_100FDEDF0()
{
  uint64_t v2 = v0[41];
  uint64_t v1 = v0[42];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[45] = v3;
  v3[2] = v2;
  v3[3] = sub_100484638;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[46] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100FDEEF4;
  uint64_t v6 = v0[26];
  uint64_t v5 = v0[27];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1002F7340, v3, v6);
}

uint64_t sub_100FDEEF4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 168);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_100FDF044, v1, 0);
}

uint64_t sub_100FDF044()
{
  uint64_t v1 = v0[27];
  uint64_t v2 = type metadata accessor for OwnedBeaconRecord();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    sub_10001DAB4(v1, &qword_10163B9F0);
    char v3 = 0;
  }
  else
  {
    id v4 = sub_100D1C7BC();
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;
    if (v5 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v7 == v8) {
      char v3 = 1;
    }
    else {
      char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    uint64_t v10 = v0[27];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    sub_100FFC77C(v10, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  }
  uint64_t v11 = (void (*)(uint64_t, uint64_t, uint64_t))v0[36];
  uint64_t v12 = v0[32];
  uint64_t v13 = v0[28];
  uint64_t v14 = v0[29];
  uint64_t v16 = v0[22];
  uint64_t v15 = v0[23];
  uint64_t v17 = v0[20];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(v15, 1, 1, v13);
  v11(v12, v17, v13);
  sub_10001D074(v15, v16, &qword_101638CF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v16, 1, v13) == 1)
  {
    uint64_t v19 = v0[22];
    uint64_t v18 = v0[23];
    UUID.init()();
    sub_10001DAB4(v18, &qword_101638CF0);
    sub_10001DAB4(v19, &qword_101638CF0);
  }
  else
  {
    uint64_t v20 = (void (*)(uint64_t, uint64_t, uint64_t))v0[43];
    uint64_t v21 = v0[31];
    uint64_t v22 = v0[28];
    uint64_t v23 = v0[22];
    sub_10001DAB4(v0[23], &qword_101638CF0);
    v20(v21, v23, v22);
  }
  uint64_t v24 = (void (*)(uint64_t, uint64_t, uint64_t))v0[43];
  uint64_t v25 = v0[32];
  uint64_t v26 = v0[28];
  os_log_type_t v28 = (int *)v0[24];
  uint64_t v27 = v0[25];
  v24(v27, v0[31], v26);
  v24(v27 + v28[5], v25, v26);
  uint64_t v29 = v27 + v28[6];
  *(void *)uint64_t v29 = 120;
  *(unsigned char *)(v29 + 8) = 2;
  *(unsigned char *)(v27 + v28[7]) = v3 & 1;
  *(unsigned char *)(v27 + v28[8]) = 1;
  uint64_t v30 = (void *)swift_task_alloc();
  v0[47] = v30;
  void *v30 = v0;
  v30[1] = sub_100FDF328;
  uint64_t v31 = v0[25];
  return sub_10122C044(v31);
}

uint64_t sub_100FDF328()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 384) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 168);
  if (v0) {
    id v4 = sub_100FDF540;
  }
  else {
    id v4 = sub_100FDF454;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100FDF454()
{
  uint64_t v1 = *(void *)(v0 + 200);
  swift_release();
  sub_100FFC77C(v1, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100FDF540()
{
  uint64_t v1 = *(void *)(v0 + 200);
  swift_release();
  sub_100FFC77C(v1, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100FDF62C(uint64_t a1)
{
  v2[22] = a1;
  v2[23] = v1;
  sub_10000588C(&qword_101638CF0);
  v2[24] = swift_task_alloc();
  v2[25] = swift_task_alloc();
  v2[26] = type metadata accessor for AccessoryCommand();
  v2[27] = swift_task_alloc();
  v2[28] = sub_10000588C(&qword_10163B9F0);
  v2[29] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for UUID();
  v2[30] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[31] = v4;
  v2[32] = *(void *)(v4 + 64);
  v2[33] = swift_task_alloc();
  v2[34] = swift_task_alloc();
  v2[35] = swift_task_alloc();
  v2[36] = swift_task_alloc();
  v2[37] = swift_task_alloc();
  return _swift_task_switch(sub_100FDF7CC, v1, 0);
}

uint64_t sub_100FDF7CC()
{
  uint64_t v24 = v0;
  if (qword_101637348 != -1) {
    swift_once();
  }
  uint64_t v1 = (long long *)(v0 + 7);
  uint64_t v2 = v0[22];
  uint64_t v3 = v0[37];
  uint64_t v5 = v0[30];
  uint64_t v4 = v0[31];
  uint64_t v6 = type metadata accessor for Logger();
  v0[38] = v6;
  v0[39] = sub_100010324(v6, (uint64_t)qword_101666080);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[40] = v7;
  v0[41] = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v7(v3, v2, v5);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  BOOL v10 = os_log_type_enabled(v8, v9);
  uint64_t v11 = v0[37];
  uint64_t v13 = v0[30];
  uint64_t v12 = v0[31];
  if (v10)
  {
    os_log_type_t type = v9;
    uint64_t v14 = swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 136446723;
    v0[19] = sub_1008FA0F0(0xD000000000000026, 0x800000010141C750, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v14 + 12) = 2160;
    v0[20] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v14 + 22) = 2081;
    sub_100FFD1F4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[21] = sub_1008FA0F0(v15, v16, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v17(v11, v13);
    _os_log_impl((void *)&_mh_execute_header, v8, type, "%{public}s for %{private,mask.hash}s", (uint8_t *)v14, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v1 = (long long *)(v0 + 7);
    swift_slowDealloc();
  }
  else
  {
    uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v17(v0[37], v0[30]);
  }

  v0[42] = v17;
  uint64_t v18 = qword_1016375E8;
  swift_retain();
  if (v18 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, (uint64_t)v1, (uint64_t *)&unk_101638D30);
  if (v0[10])
  {
    sub_10001CEB0(v1, (uint64_t)(v0 + 2));
    swift_release();
    sub_10001CD44(v0 + 2, v0[5]);
    uint64_t v22 = (uint64_t (__cdecl *)())((char *)&dword_101639258 + dword_101639258);
    uint64_t v20 = (void *)swift_task_alloc();
    v0[43] = v20;
    *uint64_t v20 = v0;
    v20[1] = sub_100FDFBB8;
    return v22();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100FDFBB8(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 184);
  *(void *)(*(void *)v1 + 352) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100FDFCD0, v2, 0);
}

uint64_t sub_100FDFCD0()
{
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (v0[44])
  {
    uint64_t v2 = v0[23];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v3 = *(void *)(v2 + 128);
    v0[45] = v3;
    return _swift_task_switch(sub_100FDFF44, v3, 0);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_101637340 != -1) {
      swift_once();
    }
    sub_100010324(v0[38], (uint64_t)qword_10170F0B0);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Missing OwnerCommandService to startAggressiveAdvertisement!", v6, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for SPBTFindingSessionError(0);
    v0[16] = 4;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100FFD1F4(&qword_101666550, 255, type metadata accessor for SPBTFindingSessionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
}

uint64_t sub_100FDFF44()
{
  uint64_t v1 = v0[45];
  uint64_t v2 = (void (*)(uint64_t, uint64_t, uint64_t))v0[40];
  uint64_t v3 = v0[36];
  uint64_t v4 = v0[31];
  uint64_t v5 = v0[30];
  uint64_t v6 = v0[22];
  v0[46] = *(void *)(v1 + 136);
  v2(v3, v6, v5);
  unint64_t v7 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v8 = swift_allocObject();
  v0[47] = v8;
  *(void *)(v8 + 16) = v1;
  uint64_t v9 = *(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32);
  v0[48] = v9;
  v0[49] = (v4 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v9(v8 + v7, v3, v5);
  swift_retain();
  return _swift_task_switch(sub_100FE003C, 0, 0);
}

uint64_t sub_100FE003C()
{
  uint64_t v2 = v0[46];
  uint64_t v1 = v0[47];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[50] = v3;
  v3[2] = v2;
  v3[3] = sub_100484638;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[51] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100FE0140;
  uint64_t v6 = v0[28];
  uint64_t v5 = v0[29];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10001D89C, v3, v6);
}

uint64_t sub_100FE0140()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 184);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_100FE0290, v1, 0);
}

uint64_t sub_100FE0290()
{
  uint64_t v1 = v0[29];
  uint64_t v2 = type metadata accessor for OwnedBeaconRecord();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    sub_10001DAB4(v1, &qword_10163B9F0);
    char v3 = 0;
  }
  else
  {
    id v4 = sub_100D1C7BC();
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;
    if (v5 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v7 == v8) {
      char v3 = 1;
    }
    else {
      char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    uint64_t v10 = v0[29];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    sub_100FFC77C(v10, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  }
  uint64_t v11 = (void (*)(uint64_t, uint64_t, uint64_t))v0[40];
  uint64_t v12 = v0[35];
  uint64_t v13 = v0[30];
  uint64_t v14 = v0[31];
  uint64_t v16 = v0[24];
  uint64_t v15 = v0[25];
  uint64_t v17 = v0[22];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(v15, 1, 1, v13);
  v11(v12, v17, v13);
  sub_10001D074(v15, v16, &qword_101638CF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v16, 1, v13) == 1)
  {
    uint64_t v19 = v0[24];
    uint64_t v18 = v0[25];
    UUID.init()();
    sub_10001DAB4(v18, &qword_101638CF0);
    sub_10001DAB4(v19, &qword_101638CF0);
  }
  else
  {
    uint64_t v20 = (void (*)(uint64_t, uint64_t, uint64_t))v0[48];
    uint64_t v21 = v0[34];
    uint64_t v22 = v0[30];
    uint64_t v23 = v0[24];
    sub_10001DAB4(v0[25], &qword_101638CF0);
    v20(v21, v23, v22);
  }
  uint64_t v24 = (void (*)(uint64_t, uint64_t, uint64_t))v0[48];
  uint64_t v25 = v0[35];
  uint64_t v26 = v0[30];
  os_log_type_t v28 = (int *)v0[26];
  uint64_t v27 = v0[27];
  v24(v27, v0[34], v26);
  v24(v27 + v28[5], v25, v26);
  uint64_t v29 = v27 + v28[6];
  *(void *)uint64_t v29 = 2;
  *(unsigned char *)(v29 + 8) = 3;
  *(unsigned char *)(v27 + v28[7]) = v3 & 1;
  *(unsigned char *)(v27 + v28[8]) = 1;
  uint64_t v30 = (void *)swift_task_alloc();
  v0[52] = v30;
  void *v30 = v0;
  v30[1] = sub_100FE0574;
  uint64_t v31 = v0[27];
  return sub_10122C044(v31);
}

uint64_t sub_100FE0574()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 424) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 184);
  if (v0) {
    id v4 = sub_100FE09A0;
  }
  else {
    id v4 = sub_100FE06A0;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100FE06A0()
{
  uint64_t v19 = v0;
  (*(void (**)(void, void, void))(v0 + 320))(*(void *)(v0 + 264), *(void *)(v0 + 176), *(void *)(v0 + 240));
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v0 + 336);
    uint64_t v3 = *(void *)(v0 + 264);
    uint64_t v4 = *(void *)(v0 + 240);
    uint64_t v17 = *(void *)(v0 + 216);
    uint64_t v5 = swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    *(void *)(v0 + 136) = 1752392040;
    uint64_t v18 = v6;
    *(_DWORD *)uint64_t v5 = 141558275;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v5 + 12) = 2081;
    sub_100FFD1F4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 144) = sub_1008FA0F0(v7, v8, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v16(v3, v4);
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Successfully stopped fast advertising for %{private,mask.hash}s.", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();

    uint64_t v9 = v17;
  }
  else
  {
    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v0 + 336);
    uint64_t v11 = *(void *)(v0 + 264);
    uint64_t v12 = *(void *)(v0 + 240);
    uint64_t v13 = *(void *)(v0 + 216);

    swift_release();
    v10(v11, v12);
    uint64_t v9 = v13;
  }
  sub_100FFC77C(v9, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
  return v14();
}

uint64_t sub_100FE09A0()
{
  uint64_t v1 = *(void *)(v0 + 216);
  swift_release();
  sub_100FFC77C(v1, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100FE0AA0()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();
  return v0;
}

uint64_t sub_100FE0B20()
{
  sub_100FE0AA0();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for BTFindingService()
{
  return self;
}

void *initializeBufferWithCopyOfBuffer for BTFindingService.FastAdvertisementTracker(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_retain();
  return a1;
}

void *assignWithCopy for BTFindingService.FastAdvertisementTracker(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  return a1;
}

void *assignWithTake for BTFindingService.FastAdvertisementTracker(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for BTFindingService.FastAdvertisementTracker(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 16)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for BTFindingService.FastAdvertisementTracker(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BTFindingService.FastAdvertisementTracker()
{
  return &type metadata for BTFindingService.FastAdvertisementTracker;
}

uint64_t sub_100FE0CEC()
{
  *(void *)(v1 + 16) = v0;
  return _swift_task_switch(sub_100FE0D0C, v0, 0);
}

uint64_t sub_100FE0D0C()
{
  if (qword_101637340 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170F0B0);
  os_log_type_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    int v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "BTFindingService: Starting up.", v4, 2u);
    swift_slowDealloc();
  }

  sub_100FD31A8();
  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_100FE0E28(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100FFD1F4((unint64_t *)&unk_101666540, a2, (void (*)(uint64_t))type metadata accessor for BTFindingService);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100FE0E80()
{
  sub_10000588C(&qword_101647FA0);
  uint64_t result = AsyncKeyedThrottle.__allocating_init(throttleInterval:)();
  qword_1016660A0 = result;
  return result;
}

uint64_t sub_100FE0EBC()
{
  sub_10000588C(&qword_101647FA0);
  uint64_t result = AsyncKeyedThrottle.__allocating_init(throttleInterval:)();
  qword_1016660A8 = result;
  return result;
}

uint64_t sub_100FE0EF8()
{
  uint64_t result = sub_100FE0F18();
  qword_1016660B0 = result;
  return result;
}

uint64_t sub_100FE0F18()
{
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  sub_1010AC668(v5);
  swift_bridgeObjectRelease();
  if (qword_101637340 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100010324(v0, (uint64_t)qword_10170F0B0);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    os_log_type_t v3 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v3 = 134217984;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Throttling every %f seconds for .detectedNearby", v3, 0xCu);
    swift_slowDealloc();
  }

  sub_10000588C(&qword_101647FA0);
  return AsyncKeyedThrottle.__allocating_init(throttleInterval:)();
}

uint64_t sub_100FE10BC(uint64_t a1)
{
  v2[8] = a1;
  v2[9] = v1;
  v2[10] = *v1;
  uint64_t v3 = *(void *)(type metadata accessor for LocalFindableAccessoryRecord() - 8);
  v2[11] = v3;
  v2[12] = *(void *)(v3 + 64);
  v2[13] = swift_task_alloc();
  sub_10000588C(&qword_10164DBB0);
  v2[14] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UUID();
  v2[15] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[16] = v5;
  v2[17] = *(void *)(v5 + 64);
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  return _swift_task_switch(sub_100FE1264, v1, 0);
}

uint64_t sub_100FE1264()
{
  uint64_t v50 = v0;
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[16] + 16);
  v1(v0[21], v0[8], v0[15]);
  if (qword_101637348 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[20];
  uint64_t v3 = v0[21];
  uint64_t v4 = v0[15];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_101666080);
  v1(v2, v3, v4);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = v0[20];
  uint64_t v11 = v0[15];
  uint64_t v10 = v0[16];
  if (v8)
  {
    os_log_type_t type = v7;
    uint64_t v12 = swift_slowAlloc();
    v49[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136446723;
    v0[5] = sub_1008FA0F0(0xD000000000000017, 0x800000010141CAD0, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2160;
    v0[6] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 22) = 2081;
    sub_100FFD1F4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[7] = sub_1008FA0F0(v13, v14, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v15(v9, v11);
    _os_log_impl((void *)&_mh_execute_header, v6, type, "%{public}s for %{private,mask.hash}s", (uint8_t *)v12, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v15(v0[20], v0[15]);
  }

  uint64_t v16 = v0[9];
  uint64_t v17 = v0[21];
  uint64_t v48 = v15;
  if (*(void *)(v16 + 176))
  {
    v1(v0[18], v17, v0[15]);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    BOOL v20 = os_log_type_enabled(v18, v19);
    uint64_t v21 = v0[18];
    uint64_t v22 = v0[15];
    if (v20)
    {
      uint64_t v23 = swift_slowAlloc();
      v49[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 136446723;
      v0[2] = sub_1008FA0F0(0xD000000000000017, 0x800000010141CAD0, v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v23 + 12) = 2160;
      v0[3] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v23 + 22) = 2081;
      sub_100FFD1F4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[4] = sub_1008FA0F0(v24, v25, v49);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v15(v21, v22);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "%{public}s Found existing scan task for %{private,mask.hash}s", (uint8_t *)v23, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      v15(v0[18], v0[15]);
    }

    uint64_t v37 = v0[21];
    uint64_t v38 = v0[15];
    sub_100FFA448();
    swift_allocError();
    *uint64_t v39 = 0x800000000000000DLL;
    swift_willThrow();
    v15(v37, v38);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v36 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    uint64_t v26 = v0[19];
    uint64_t v27 = v0[16];
    uint64_t v28 = v0[14];
    uint64_t v42 = v0[15];
    uint64_t v44 = v0[17];
    uint64_t v45 = v28;
    uint64_t v29 = v0[13];
    uint64_t v43 = v0[12];
    uint64_t v41 = v0[11];
    *(void *)os_log_type_t typea = v0[10];
    uint64_t v30 = v0[8];
    uint64_t v31 = type metadata accessor for TaskPriority();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v28, 1, 1, v31);
    sub_100FFC7DC(v30, v29, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    v1(v26, v17, v42);
    unint64_t v32 = (*(unsigned __int8 *)(v41 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80);
    unint64_t v33 = (v43 + *(unsigned __int8 *)(v27 + 80) + v32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80);
    uint64_t v34 = (char *)swift_allocObject();
    *((void *)v34 + 2) = 0;
    *((void *)v34 + 3) = 0;
    *((void *)v34 + 4) = v16;
    sub_100FFC714(v29, (uint64_t)&v34[v32], (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    (*(void (**)(char *, uint64_t, uint64_t))(v27 + 32))(&v34[v33], v26, v42);
    *(void *)&v34[(v44 + v33 + 7) & 0xFFFFFFFFFFFFFFF8] = *(void *)typea;
    swift_retain();
    uint64_t v35 = sub_100128234(v28, (uint64_t)&unk_101666730, (uint64_t)v34);
    sub_10001DAB4(v45, &qword_10164DBB0);
    v48(v17, v42);
    *(void *)(v16 + 176) = v35;
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v36 = (uint64_t (*)(void))v0[1];
  }
  return v36();
}

uint64_t sub_100FE1A14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[191] = a6;
  v6[185] = a5;
  v6[179] = a4;
  uint64_t v7 = type metadata accessor for UUID();
  v6[197] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v6[198] = v8;
  v6[199] = *(void *)(v8 + 64);
  v6[200] = swift_task_alloc();
  uint64_t v9 = *(void *)(type metadata accessor for LocalFindableAccessoryRecord() - 8);
  v6[201] = v9;
  v6[202] = *(void *)(v9 + 64);
  v6[203] = swift_task_alloc();
  return _swift_task_switch(sub_100FE1B44, 0, 0);
}

uint64_t sub_100FE1B44()
{
  uint64_t v1 = v0[203];
  uint64_t v2 = v0[201];
  uint64_t v3 = v0[200];
  uint64_t v4 = v0[198];
  uint64_t v5 = v0[197];
  uint64_t v13 = v0[191];
  uint64_t v6 = v0[179];
  sub_100FFC7DC(v0[185], v1, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
  unint64_t v7 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v8 = swift_allocObject();
  v0[204] = v8;
  *(void *)(v8 + 16) = v6;
  sub_100FFC714(v1, v8 + v7, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
  swift_retain();
  swift_retain();
  swift_asyncLet_begin();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v13, v5);
  unint64_t v9 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v10 = swift_allocObject();
  v0[205] = v10;
  *(void *)(v10 + 16) = v6;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v10 + v9, v3, v5);
  swift_retain();
  swift_asyncLet_begin();
  return _swift_asyncLet_get_throwing(v0 + 2, v11, sub_100FE1D3C, v0 + 162);
}

uint64_t sub_100FE1D3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v3 + 656;
  *(void *)(v3 + 1648) = v2;
  if (v2) {
    return _swift_asyncLet_finish(v4, a2, sub_100FE1E70, v3 + 1344);
  }
  else {
    return _swift_asyncLet_get(v4, a2, sub_100FE1D78, v3 + 1536);
  }
}

uint64_t sub_100FE1D78(uint64_t a1, uint64_t a2)
{
  return _swift_asyncLet_finish(v2 + 656, a2, sub_100FE1D94, v2 + 1488);
}

uint64_t sub_100FE1D94()
{
  return _swift_task_switch(sub_100FE1DB0, 0, 0);
}

uint64_t sub_100FE1DB0(uint64_t a1, uint64_t a2)
{
  return _swift_asyncLet_finish(v2 + 16, a2, sub_100FE1DCC, v2 + 1440);
}

uint64_t sub_100FE1DCC()
{
  return _swift_task_switch(sub_100FE1DE8, 0, 0);
}

uint64_t sub_100FE1DE8()
{
  swift_release_n();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100FE1E70()
{
  return _swift_task_switch(sub_100FE1E8C, 0, 0);
}

uint64_t sub_100FE1E8C(uint64_t a1, uint64_t a2)
{
  return _swift_asyncLet_finish(v2 + 16, a2, sub_100FE1EA8, v2 + 1392);
}

uint64_t sub_100FE1EA8()
{
  return _swift_task_switch(sub_100FE1EC4, 0, 0);
}

uint64_t sub_100FE1EC4()
{
  uint64_t v10 = v0;
  swift_release();
  if (qword_101637348 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_101666080);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    v0[173] = sub_1008FA0F0(0xD000000000000017, 0x800000010141CAD0, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2114;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[167] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s scanTask error: %{public}@", (uint8_t *)v4, 0x16u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    swift_release();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();

    swift_release();
  }
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100FE218C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v5;
  void *v5 = v3;
  v5[1] = sub_10001D2E4;
  return sub_100FE2228(a3);
}

uint64_t sub_100FE2228(uint64_t a1)
{
  v2[22] = a1;
  v2[23] = v1;
  v2[24] = *v1;
  uint64_t v3 = sub_10000588C(&qword_1016667A8);
  v2[25] = v3;
  v2[26] = *(void *)(v3 - 8);
  v2[27] = swift_task_alloc();
  v2[28] = swift_task_alloc();
  v2[29] = swift_task_alloc();
  uint64_t v4 = *(void *)(type metadata accessor for LocalFindableAccessoryRecord() - 8);
  v2[30] = v4;
  v2[31] = *(void *)(v4 + 64);
  v2[32] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Device();
  v2[33] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[34] = v6;
  v2[35] = *(void *)(v6 + 64);
  v2[36] = swift_task_alloc();
  v2[37] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DeviceChange();
  v2[38] = v7;
  v2[39] = *(void *)(v7 - 8);
  v2[40] = swift_task_alloc();
  v2[41] = swift_task_alloc();
  sub_10000588C(&qword_1016667B0);
  v2[42] = swift_task_alloc();
  uint64_t v8 = sub_10000588C(&qword_1016667B8);
  v2[43] = v8;
  v2[44] = *(void *)(v8 - 8);
  v2[45] = swift_task_alloc();
  uint64_t v9 = sub_10000588C(&qword_1016667C0);
  v2[46] = v9;
  v2[47] = *(void *)(v9 - 8);
  v2[48] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for UUID();
  v2[49] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v2[50] = v11;
  v2[51] = *(void *)(v11 + 64);
  v2[52] = swift_task_alloc();
  v2[53] = swift_task_alloc();
  v2[54] = swift_task_alloc();
  return _swift_task_switch(sub_100FE25E0, v1, 0);
}

uint64_t sub_100FE25E0()
{
  uint64_t v27 = v0;
  uint64_t v1 = v0[22];
  uint64_t v2 = v0[54];
  uint64_t v3 = v0[49];
  uint64_t v4 = v0[50];
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[55] = v5;
  v0[56] = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v5(v2, v1, v3);
  if (qword_101637348 != -1) {
    swift_once();
  }
  uint64_t v24 = (long long *)(v0 + 7);
  uint64_t v7 = v0[53];
  uint64_t v6 = v0[54];
  uint64_t v8 = v0[49];
  uint64_t v9 = type metadata accessor for Logger();
  v0[57] = sub_100010324(v9, (uint64_t)qword_101666080);
  v5(v7, v6, v8);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  BOOL v12 = os_log_type_enabled(v10, v11);
  uint64_t v13 = v0[53];
  uint64_t v15 = v0[49];
  uint64_t v14 = v0[50];
  if (v12)
  {
    os_log_type_t type = v11;
    uint64_t v16 = swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136446723;
    v0[19] = sub_1008FA0F0(0xD000000000000023, 0x800000010141CB50, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 12) = 2160;
    v0[20] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 22) = 2081;
    sub_100FFD1F4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[21] = sub_1008FA0F0(v17, v18, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    os_log_type_t v19 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v19(v13, v15);
    _os_log_impl((void *)&_mh_execute_header, v10, type, "%{public}s for %{private,mask.hash}s", (uint8_t *)v16, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    os_log_type_t v19 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v19(v0[53], v0[49]);
  }

  v0[58] = v19;
  uint64_t v20 = qword_1016375E8;
  swift_retain();
  if (v20 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, (uint64_t)v24, (uint64_t *)&unk_101638D30);
  if (v0[10])
  {
    sub_10001CEB0(v24, (uint64_t)(v0 + 2));
    swift_release();
    sub_10001CD44(v0 + 2, v0[5]);
    unint64_t v25 = (uint64_t (__cdecl *)())((char *)&dword_101639258 + dword_101639258);
    uint64_t v22 = (void *)swift_task_alloc();
    v0[59] = v22;
    *uint64_t v22 = v0;
    v22[1] = sub_100FE29D4;
    return v25();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100FE29D4(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 184);
  *(void *)(*(void *)v1 + 480) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100FE2AEC, v2, 0);
}

uint64_t sub_100FE2AEC()
{
  uint64_t v14 = v0;
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (v0[60])
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v2 = (void *)swift_task_alloc();
    v0[61] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100FE2E48;
    uint64_t v3 = v0[45];
    uint64_t v4 = v0[22];
    return sub_10122A2A0(v3, v4);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136446210;
      v0[17] = sub_1008FA0F0(0xD000000000000023, 0x800000010141CB50, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "%{public}s Missing OwnerCommandService!", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t v9 = (void (*)(uint64_t, uint64_t))v0[58];
    uint64_t v10 = v0[54];
    uint64_t v11 = v0[49];
    type metadata accessor for SPBTFindingSessionError(0);
    v0[16] = 4;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100FFD1F4(&qword_101666550, 255, type metadata accessor for SPBTFindingSessionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    v9(v10, v11);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    BOOL v12 = (uint64_t (*)(void))v0[1];
    return v12();
  }
}

uint64_t sub_100FE2E48()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 496) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 184);
  if (v0) {
    uint64_t v4 = sub_100FE42CC;
  }
  else {
    uint64_t v4 = sub_100FE2F74;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100FE2F74()
{
  uint64_t v2 = v0[44];
  uint64_t v1 = v0[45];
  uint64_t v3 = v0[43];
  AsyncThrowingStream.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v5 = sub_100FFD1F4((unint64_t *)&unk_101666540, v4, (void (*)(uint64_t))type metadata accessor for BTFindingService);
  uint64_t v6 = v0[58];
  v0[63] = v5;
  v0[64] = v6;
  uint64_t v7 = v0[23];
  uint64_t v8 = (void *)swift_task_alloc();
  v0[65] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_100FE309C;
  uint64_t v9 = v0[46];
  uint64_t v10 = v0[42];
  return __sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(v10, v7, v5, v9, v0 + 18);
}

uint64_t sub_100FE309C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 528) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 184);
  if (v0) {
    uint64_t v4 = sub_100FE441C;
  }
  else {
    uint64_t v4 = sub_100FE31B4;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100FE31B4()
{
  uint64_t v62 = v0;
  uint64_t v1 = *(void *)(v0 + 336);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)(v0 + 312) + 48))(v1, 1, *(void *)(v0 + 304)) == 1)
  {
    uint64_t v2 = *(void (**)(uint64_t, uint64_t))(v0 + 464);
    uint64_t v3 = *(void *)(v0 + 432);
    uint64_t v4 = *(void *)(v0 + 392);
    uint64_t v6 = *(void *)(v0 + 376);
    uint64_t v5 = *(void *)(v0 + 384);
    uint64_t v7 = *(void *)(v0 + 368);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    v2(v3, v4);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
LABEL_5:
    return v8();
  }
  uint64_t v9 = *(void *)(v0 + 528);
  sub_100FFC714(v1, *(void *)(v0 + 328), (uint64_t (*)(void))&type metadata accessor for DeviceChange);
  static Task<>.checkCancellation()();
  *(void *)(v0 + 536) = v9;
  if (v9)
  {
    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v0 + 512);
    uint64_t v11 = *(void *)(v0 + 432);
    uint64_t v12 = *(void *)(v0 + 392);
    uint64_t v14 = *(void *)(v0 + 376);
    uint64_t v13 = *(void *)(v0 + 384);
    uint64_t v15 = *(void *)(v0 + 368);
    uint64_t v16 = *(void *)(v0 + 328);
    swift_release();
    sub_100FFC77C(v16, (uint64_t (*)(void))&type metadata accessor for DeviceChange);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
    v10(v11, v12);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_5;
  }
  sub_100FFC7DC(*(void *)(v0 + 328), *(void *)(v0 + 320), (uint64_t (*)(void))&type metadata accessor for DeviceChange);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v19 = *(void *)(v0 + 216);
    uint64_t v18 = *(void *)(v0 + 224);
    uint64_t v20 = *(void *)(v0 + 200);
    uint64_t v21 = *(void *)(v0 + 208);
    (*(void (**)(uint64_t, void, uint64_t))(v21 + 32))(v18, *(void *)(v0 + 320), v20);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(v19, v18, v20);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    BOOL v24 = os_log_type_enabled(v22, v23);
    uint64_t v25 = *(void *)(v0 + 328);
    uint64_t v26 = *(void *)(v0 + 216);
    uint64_t v27 = *(void *)(v0 + 224);
    uint64_t v29 = *(void *)(v0 + 200);
    uint64_t v28 = *(void *)(v0 + 208);
    if (v24)
    {
      uint64_t v60 = *(void *)(v0 + 328);
      uint64_t v30 = swift_slowAlloc();
      uint64_t v61 = swift_slowAlloc();
      *(_DWORD *)uint64_t v30 = 141558275;
      *(void *)(v30 + 4) = 1752392040;
      *(_WORD *)(v30 + 12) = 2081;
      sub_100062734(&qword_1016667C8, &qword_1016667A8);
      uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v30 + 14) = sub_1008FA0F0(v31, v32, &v61);
      swift_bridgeObjectRelease();
      unint64_t v33 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
      v33(v26, v29);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Lost %{private,mask.hash}s", (uint8_t *)v30, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v33(v27, v29);
      uint64_t v34 = v60;
    }
    else
    {

      id v53 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
      v53(v26, v29);
      v53(v27, v29);
      uint64_t v34 = v25;
    }
    sub_100FFC77C(v34, (uint64_t (*)(void))&type metadata accessor for DeviceChange);
    *(unsigned char *)(*(void *)(v0 + 184) + 184) = 1;
    uint64_t v54 = *(void *)(v0 + 504);
    uint64_t v55 = *(void *)(v0 + 184);
    uint64_t v56 = (void *)swift_task_alloc();
    *(void *)(v0 + 520) = v56;
    *uint64_t v56 = v0;
    v56[1] = sub_100FE309C;
    uint64_t v57 = *(void *)(v0 + 368);
    uint64_t v58 = *(void *)(v0 + 336);
    return __sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(v58, v55, v54, v57, v0 + 144);
  }
  else
  {
    uint64_t v35 = *(void *)(v0 + 320);
    uint64_t v36 = *(void *)(v0 + 296);
    uint64_t v37 = *(void *)(v0 + 264);
    uint64_t v38 = *(void *)(v0 + 272);
    uint64_t v39 = *(void *)(v0 + 184);
    unint64_t v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v38 + 32);
    *(void *)(v0 + 544) = v40;
    *(void *)(v0 + 552) = (v38 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v40(v36, v35, v37);
    *(unsigned char *)(v39 + 186) = 1;
    if (qword_101637368 != -1) {
      swift_once();
    }
    uint64_t v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 440);
    uint64_t v42 = *(void *)(v0 + 432);
    uint64_t v44 = *(void *)(v0 + 408);
    uint64_t v43 = *(void *)(v0 + 416);
    uint64_t v45 = *(void *)(v0 + 392);
    uint64_t v46 = *(void *)(v0 + 400);
    uint64_t v59 = *(void *)(v0 + 192);
    *(void *)(v0 + 560) = qword_1016660B0;
    uint64_t v47 = swift_allocObject();
    *(void *)(v0 + 568) = v47;
    swift_weakInit();
    v41(v43, v42, v45);
    unint64_t v48 = (*(_DWORD *)(v46 + 80) + 24) & ~(unint64_t)*(_DWORD *)(v46 + 80);
    *(_DWORD *)(v0 + 656) = *(_DWORD *)(v46 + 80);
    uint64_t v49 = swift_allocObject();
    *(void *)(v0 + 576) = v49;
    *(void *)(v49 + 16) = v47;
    uint64_t v50 = *(void (**)(unint64_t, uint64_t, uint64_t))(v46 + 32);
    *(void *)(v0 + 584) = v50;
    *(void *)(v0 + 592) = (v46 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v50(v49 + v48, v43, v45);
    *(void *)(v49 + ((v44 + v48 + 7) & 0xFFFFFFFFFFFFFFF8)) = v59;
    swift_retain();
    *(void *)(v0 + 600) = sub_10000588C(&qword_101647FA0);
    *(void *)(v0 + 608) = sub_100062734(&qword_1016667E0, &qword_101647FA0);
    uint64_t v52 = dispatch thunk of Actor.unownedExecutor.getter();
    return _swift_task_switch(sub_100FE395C, v52, v51);
  }
}

uint64_t sub_100FE395C()
{
  uint64_t v1 = *(void *)(v0 + 184);
  dispatch thunk of AsyncKeyedThrottle.throttle(key:block:)();
  swift_release();
  swift_release();
  return _swift_task_switch(sub_100FE3A04, v1, 0);
}

uint64_t sub_100FE3A04()
{
  uint64_t v1 = *(void *)(v0 + 536);
  char v2 = sub_10125CD98();
  if (v1)
  {
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = swift_slowAlloc();
      uint64_t v6 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 138543362;
      swift_errorRetain();
      uint64_t v7 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v5 + 4) = v7;
      *uint64_t v6 = v7;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Fast advertising check error %{public}@", (uint8_t *)v5, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_errorRelease();
      swift_errorRelease();
    }
    swift_errorRelease();
    goto LABEL_10;
  }
  if (v2)
  {
    if (qword_101637358 != -1) {
      swift_once();
    }
    uint64_t v46 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 544);
    uint64_t v8 = *(void *)(v0 + 296);
    uint64_t v9 = *(void *)(v0 + 272);
    uint64_t v41 = *(void *)(v0 + 288);
    uint64_t v43 = *(void *)(v0 + 280);
    uint64_t v10 = *(void *)(v0 + 264);
    uint64_t v11 = *(void *)(v0 + 232);
    uint64_t v13 = *(void *)(v0 + 200);
    uint64_t v12 = *(void *)(v0 + 208);
    uint64_t v45 = *(void *)(v0 + 192);
    *(void *)(v0 + 640) = qword_1016660A0;
    Device.id.getter();
    Identifier.id.getter();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v41, v8, v10);
    unint64_t v14 = (*(unsigned __int8 *)(v9 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    uint64_t v15 = swift_allocObject();
    *(void *)(v0 + 648) = v15;
    *(unsigned char *)(v15 + 16) = 1;
    v46(v15 + v14, v41, v10);
    *(void *)(v15 + ((v43 + v14 + 7) & 0xFFFFFFFFFFFFFFF8)) = v45;
    uint64_t v16 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v18 = v17;
    uint64_t v19 = sub_100FE40FC;
  }
  else
  {
    if (*(unsigned char *)(*(void *)(v0 + 184) + 185) != 1)
    {
LABEL_10:
      uint64_t v20 = *(void *)(v0 + 328);
      (*(void (**)(void, void))(*(void *)(v0 + 272) + 8))(*(void *)(v0 + 296), *(void *)(v0 + 264));
      sub_100FFC77C(v20, (uint64_t (*)(void))&type metadata accessor for DeviceChange);
      uint64_t v21 = *(void *)(v0 + 504);
      uint64_t v22 = *(void *)(v0 + 184);
      os_log_type_t v23 = (void *)swift_task_alloc();
      *(void *)(v0 + 520) = v23;
      *os_log_type_t v23 = v0;
      v23[1] = sub_100FE309C;
      uint64_t v24 = *(void *)(v0 + 368);
      uint64_t v25 = *(void *)(v0 + 336);
      return __sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(v25, v22, v21, v24, v0 + 144);
    }
    if (qword_101637360 != -1) {
      swift_once();
    }
    uint64_t v47 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 584);
    uint64_t v26 = *(unsigned __int8 *)(v0 + 656);
    uint64_t v27 = *(void *)(v0 + 432);
    unint64_t v40 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 440);
    uint64_t v28 = *(void *)(v0 + 416);
    uint64_t v29 = *(void *)(v0 + 392);
    uint64_t v30 = *(void *)(v0 + 256);
    uint64_t v39 = *(void *)(v0 + 248);
    uint64_t v31 = *(void *)(v0 + 240);
    uint64_t v42 = *(void *)(v0 + 408);
    uint64_t v44 = *(void *)(v0 + 192);
    uint64_t v32 = *(void *)(v0 + 176);
    *(void *)(v0 + 616) = qword_1016660A8;
    uint64_t v33 = swift_allocObject();
    *(void *)(v0 + 624) = v33;
    swift_weakInit();
    sub_100FFC7DC(v32, v30, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    v40(v28, v27, v29);
    unint64_t v34 = (*(unsigned __int8 *)(v31 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80);
    unint64_t v35 = (v39 + v26 + v34) & ~v26;
    uint64_t v36 = swift_allocObject();
    *(void *)(v0 + 632) = v36;
    *(void *)(v36 + 16) = v33;
    sub_100FFC714(v30, v36 + v34, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    v47(v36 + v35, v28, v29);
    *(void *)(v36 + ((v42 + v35 + 7) & 0xFFFFFFFFFFFFFFF8)) = v44;
    swift_retain();
    uint64_t v16 = dispatch thunk of Actor.unownedExecutor.getter();
    uint64_t v18 = v37;
    uint64_t v19 = sub_100FE3F5C;
  }
  return _swift_task_switch(v19, v16, v18);
}

uint64_t sub_100FE3F5C()
{
  uint64_t v1 = *(void *)(v0 + 184);
  dispatch thunk of AsyncKeyedThrottle.throttle(key:block:)();
  swift_release();
  swift_release();
  return _swift_task_switch(sub_100FE4004, v1, 0);
}

uint64_t sub_100FE4004()
{
  uint64_t v1 = v0[41];
  (*(void (**)(void, void))(v0[34] + 8))(v0[37], v0[33]);
  sub_100FFC77C(v1, (uint64_t (*)(void))&type metadata accessor for DeviceChange);
  uint64_t v2 = v0[63];
  uint64_t v3 = v0[23];
  os_log_type_t v4 = (void *)swift_task_alloc();
  v0[65] = v4;
  *os_log_type_t v4 = v0;
  v4[1] = sub_100FE309C;
  uint64_t v5 = v0[46];
  uint64_t v6 = v0[42];
  return __sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(v6, v3, v2, v5, v0 + 18);
}

uint64_t sub_100FE40FC()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[58];
  uint64_t v2 = v0[52];
  uint64_t v3 = v0[49];
  uint64_t v4 = v0[23];
  dispatch thunk of AsyncKeyedThrottle.throttle(key:block:)();
  swift_release();
  v1(v2, v3);
  return _swift_task_switch(sub_100FE41CC, v4, 0);
}

uint64_t sub_100FE41CC()
{
  uint64_t v1 = v0[41];
  (*(void (**)(void, void))(v0[34] + 8))(v0[37], v0[33]);
  sub_100FFC77C(v1, (uint64_t (*)(void))&type metadata accessor for DeviceChange);
  v0[64] = v0[58];
  uint64_t v2 = v0[63];
  uint64_t v3 = v0[23];
  uint64_t v4 = (void *)swift_task_alloc();
  v0[65] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100FE309C;
  uint64_t v5 = v0[46];
  uint64_t v6 = v0[42];
  return __sScs8IteratorV4next9isolationxSgScA_pSgYi_tYaq_YKF(v6, v3, v2, v5, v0 + 18);
}

uint64_t sub_100FE42CC()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[58];
  uint64_t v2 = v0[54];
  uint64_t v3 = v0[49];
  swift_release();
  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100FE441C()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[64];
  uint64_t v2 = v0[54];
  uint64_t v3 = v0[49];
  uint64_t v5 = v0[47];
  uint64_t v4 = v0[48];
  uint64_t v6 = v0[46];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  v1(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100FE458C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v5;
  void *v5 = v3;
  v5[1] = sub_100030F18;
  return sub_100FE4628(a3);
}

uint64_t sub_100FE4628(uint64_t a1)
{
  v2[7] = a1;
  v2[8] = v1;
  v2[9] = *v1;
  type metadata accessor for CentralManager.ConnectedState();
  v2[10] = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_101666760);
  v2[11] = swift_task_alloc();
  uint64_t v3 = sub_10000588C(&qword_10165E8C8);
  v2[12] = v3;
  v2[13] = *(void *)(v3 - 8);
  v2[14] = swift_task_alloc();
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_101666770);
  v2[15] = v4;
  v2[16] = *(void *)(v4 - 8);
  v2[17] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  v2[18] = v5;
  v2[19] = *(void *)(v5 - 8);
  v2[20] = swift_task_alloc();
  v2[21] = swift_task_alloc();
  return _swift_task_switch(sub_100FE483C, v1, 0);
}

uint64_t sub_100FE483C()
{
  uint64_t v28 = v0;
  if (qword_101637348 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[21];
  uint64_t v3 = v0[18];
  uint64_t v4 = v0[19];
  uint64_t v5 = type metadata accessor for Logger();
  v0[22] = sub_100010324(v5, (uint64_t)qword_101666080);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[23] = v6;
  v0[24] = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v2, v1, v3);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = v0[21];
  uint64_t v11 = v0[18];
  uint64_t v12 = v0[19];
  if (v9)
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136446723;
    v0[4] = sub_1008FA0F0(0xD000000000000021, 0x800000010141CB20, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 12) = 2160;
    v0[5] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 22) = 2081;
    sub_100FFD1F4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[6] = sub_1008FA0F0(v14, v15, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s for %{private,mask.hash}s", (uint8_t *)v13, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v12 + 8))(v0[21], v0[18]);
  }

  v0[25] = *(void *)(v0[8] + 136);
  sub_10000588C((uint64_t *)&unk_1016665D0);
  uint64_t v16 = type metadata accessor for CentralManager.State();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(void *)(v17 + 72);
  unint64_t v19 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  uint64_t v20 = swift_allocObject();
  v0[26] = v20;
  *(_OWORD *)(v20 + 16) = xmmword_101347BA0;
  unint64_t v21 = v20 + v19;
  uint64_t v22 = *(void (**)(unint64_t, void, uint64_t))(v17 + 104);
  v22(v21, enum case for CentralManager.State.poweredOn(_:), v16);
  v22(v21 + v18, enum case for CentralManager.State.restricted(_:), v16);
  os_log_type_t v23 = (void *)swift_task_alloc();
  v0[27] = v23;
  uint64_t v24 = type metadata accessor for CentralManager();
  v0[28] = v24;
  uint64_t v25 = sub_100FFD1F4(&qword_101639A90, 255, (void (*)(uint64_t))&type metadata accessor for CentralManager);
  *os_log_type_t v23 = v0;
  v23[1] = sub_100FE4C94;
  return CentralManagerProtocol.await(states:)(v20, v24, v25);
}

uint64_t sub_100FE4C94()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 232) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 64);
    uint64_t v4 = sub_100FE58C4;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 64);
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_100FE4DBC;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100FE4DBC()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[23];
  uint64_t v2 = v0[20];
  uint64_t v3 = v0[18];
  uint64_t v4 = v0[7];
  sub_10000588C(&qword_10165E658);
  sub_10000588C(&qword_10163D210);
  uint64_t v5 = swift_allocObject();
  v0[30] = v5;
  *(_OWORD *)(v5 + 16) = xmmword_101342130;
  v1(v2, v4, v3);
  type metadata accessor for Peripheral();
  Identifier.init(_:)();
  sub_100FFD1F4((unint64_t *)&unk_101666780, 255, (void (*)(uint64_t))&type metadata accessor for CentralManager);
  uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter();
  return _swift_task_switch(sub_100FE4F54, v7, v6);
}

uint64_t sub_100FE4F54()
{
  uint64_t v1 = v0[29];
  dispatch thunk of CentralManager.connectionEvents(peripheralIdentifiers:)();
  v0[31] = v1;
  if (v1)
  {
    uint64_t v2 = v0[8];
    uint64_t v3 = sub_100FE5AB4;
  }
  else
  {
    uint64_t v4 = v0[8];
    swift_bridgeObjectRelease();
    uint64_t v3 = sub_100FE4FF8;
    uint64_t v2 = v4;
  }
  return _swift_task_switch(v3, v2, 0);
}

uint64_t sub_100FE4FF8()
{
  AsyncStream.makeAsyncIterator()();
  uint64_t v2 = sub_100FFD1F4((unint64_t *)&unk_101666540, v1, (void (*)(uint64_t))type metadata accessor for BTFindingService);
  uint64_t v3 = v0[31];
  v0[32] = v2;
  v0[33] = v3;
  uint64_t v4 = v0[8];
  uint64_t v5 = (void *)swift_task_alloc();
  v0[34] = v5;
  void *v5 = v0;
  v5[1] = sub_100FE50F4;
  uint64_t v6 = v0[11];
  uint64_t v7 = v0[12];
  return AsyncStream.Iterator.next(isolation:)(v6, v4, v2, v7);
}

uint64_t sub_100FE50F4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 64);
  swift_task_dealloc();
  return _swift_task_switch(sub_100FE5204, v1, 0);
}

uint64_t sub_100FE5204()
{
  uint64_t v1 = (uint64_t *)v0[11];
  uint64_t v2 = sub_10000588C(&qword_10165E8D0);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(void, void))(v0[13] + 8))(v0[14], v0[12]);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "centralManager.connectionEvents() terminated", v5, 2u);
      swift_slowDealloc();
    }
    uint64_t v7 = v0[16];
    uint64_t v6 = v0[17];
    uint64_t v8 = v0[15];

    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v6, v8);
    goto LABEL_12;
  }
  uint64_t v9 = v0[33];
  uint64_t v10 = v0[10];
  uint64_t v11 = *v1;
  v0[35] = *v1;
  sub_100FFC714((uint64_t)v1 + *(int *)(v2 + 48), v10, (uint64_t (*)(void))&type metadata accessor for CentralManager.ConnectedState);
  static Task<>.checkCancellation()();
  if (v9)
  {
    uint64_t v13 = v0[16];
    uint64_t v12 = v0[17];
    uint64_t v15 = v0[14];
    uint64_t v14 = v0[15];
    uint64_t v16 = v0[12];
    uint64_t v17 = v0[13];
    uint64_t v18 = v0[10];
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    sub_100FFC77C(v18, (uint64_t (*)(void))&type metadata accessor for CentralManager.ConnectedState);
    swift_errorRetain();
    swift_errorRetain();
    unint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      unint64_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v22 = (void *)swift_slowAlloc();
      *(_DWORD *)unint64_t v21 = 138543362;
      swift_errorRetain();
      uint64_t v23 = _swift_stdlib_bridgeErrorToNSError();
      v0[2] = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v22 = v23;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Error in connectionEvents(serviceIdentifiers:): %{public}@", v21, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
LABEL_12:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v31 = (uint64_t (*)(void))v0[1];
    return v31();
  }
  uint64_t v24 = v0[32];
  uint64_t v26 = v0[9];
  uint64_t v25 = v0[10];
  uint64_t v28 = v0[7];
  uint64_t v27 = v0[8];
  type metadata accessor for Transaction();
  v0[36] = static Transaction.$current.getter();
  v0[3] = v11;
  uint64_t v29 = (void *)swift_task_alloc();
  v0[37] = v29;
  void v29[2] = v25;
  v29[3] = v27;
  v29[4] = v28;
  v29[5] = v26;
  swift_retain();
  uint64_t v30 = (void *)swift_task_alloc();
  v0[38] = v30;
  void *v30 = v0;
  v30[1] = sub_100FE56A8;
  return TaskLocal.withValue<A>(_:operation:isolation:file:line:)(v30, v0 + 3, &unk_101666798, v29, v27, v24, 0xD000000000000023, 0x800000010141CAF0);
}

uint64_t sub_100FE56A8()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 312) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 64);
  swift_release();
  swift_release();
  swift_task_dealloc();
  if (v0) {
    os_log_type_t v4 = sub_100FE5CA4;
  }
  else {
    os_log_type_t v4 = sub_100FE57E4;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100FE57E4()
{
  swift_release();
  uint64_t v1 = v0[39];
  sub_100FFC77C(v0[10], (uint64_t (*)(void))&type metadata accessor for CentralManager.ConnectedState);
  v0[33] = v1;
  uint64_t v2 = v0[32];
  uint64_t v3 = v0[8];
  os_log_type_t v4 = (void *)swift_task_alloc();
  v0[34] = v4;
  *os_log_type_t v4 = v0;
  v4[1] = sub_100FE50F4;
  uint64_t v5 = v0[11];
  uint64_t v6 = v0[12];
  return AsyncStream.Iterator.next(isolation:)(v5, v3, v2, v6);
}

uint64_t sub_100FE58C4()
{
  swift_bridgeObjectRelease();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    os_log_type_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138543362;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 16) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *os_log_type_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Error in connectionEvents(serviceIdentifiers:): %{public}@", v3, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_100FE5AB4()
{
  swift_bridgeObjectRelease();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    os_log_type_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138543362;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 16) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *os_log_type_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Error in connectionEvents(serviceIdentifiers:): %{public}@", v3, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_100FE5CA4()
{
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = swift_slowAlloc();
    os_log_type_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138543362;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v3 + 4) = v5;
    *os_log_type_t v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Error processing monitorBluetoothConnections event: %{public}@", (uint8_t *)v3, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    swift_release();
  }
  else
  {
    swift_release();
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  sub_100FFC77C(v0[10], (uint64_t (*)(void))&type metadata accessor for CentralManager.ConnectedState);
  v0[33] = 0;
  uint64_t v6 = v0[32];
  uint64_t v7 = v0[8];
  uint64_t v8 = (void *)swift_task_alloc();
  v0[34] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_100FE50F4;
  uint64_t v9 = v0[11];
  uint64_t v10 = v0[12];
  return AsyncStream.Iterator.next(isolation:)(v9, v7, v6, v10);
}

uint64_t sub_100FE5EB0(uint64_t a1)
{
  v2[14] = a1;
  v2[15] = v1;
  uint64_t v3 = type metadata accessor for UUID();
  v2[16] = v3;
  v2[17] = *(void *)(v3 - 8);
  v2[18] = swift_task_alloc();
  v2[19] = swift_task_alloc();
  v2[20] = swift_task_alloc();
  return _swift_task_switch(sub_100FE5F8C, v1, 0);
}

uint64_t sub_100FE5F8C()
{
  uint64_t v37 = v0;
  if (qword_101637348 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[14];
  uint64_t v2 = v0[20];
  uint64_t v3 = v0[16];
  uint64_t v4 = v0[17];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_101666080);
  unint64_t v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v35(v2, v1, v3);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = v0[20];
  uint64_t v11 = v0[16];
  uint64_t v10 = v0[17];
  if (v8)
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v36 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136446723;
    v0[11] = sub_1008FA0F0(0xD00000000000001ALL, 0x800000010141C9C0, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2160;
    v0[12] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 22) = 2081;
    sub_100FFD1F4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[13] = sub_1008FA0F0(v13, v14, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    unint64_t v34 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v34(v9, v11);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "%{public}s for %{private,mask.hash}s", (uint8_t *)v12, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    unint64_t v34 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v34(v9, v11);
  }

  uint64_t v15 = v0[15] + 216;
  swift_beginAccess();
  if (!*(void *)(*(void *)v15 + 16)
    || (uint64_t v16 = v0[14],
        swift_bridgeObjectRetain(),
        sub_1007240CC(v16),
        LOBYTE(v16) = v17,
        swift_bridgeObjectRelease(),
        (v16 & 1) == 0))
  {
    v35(v0[19], v0[14], v0[16]);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    BOOL v20 = os_log_type_enabled(v18, v19);
    uint64_t v21 = v0[19];
    uint64_t v22 = v0[16];
    if (v20)
    {
      uint64_t v23 = swift_slowAlloc();
      uint64_t v36 = swift_slowAlloc();
      *(_DWORD *)uint64_t v23 = 136446723;
      v0[8] = sub_1008FA0F0(0xD00000000000001ALL, 0x800000010141C9C0, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v23 + 12) = 2160;
      v0[9] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v23 + 22) = 2081;
      sub_100FFD1F4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[10] = sub_1008FA0F0(v24, v25, &v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v26 = v22;
      uint64_t v27 = v34;
      v34(v21, v26);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "%{public}s Adding new tracker %{private,mask.hash}s", (uint8_t *)v23, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v27 = v34;
      v34(v0[19], v0[16]);
    }

    uint64_t v28 = v0[18];
    uint64_t v29 = v0[16];
    v35(v28, v0[14], v29);
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v36 = *(void *)v15;
    *(void *)uint64_t v15 = 0x8000000000000000;
    sub_100172308(0, 0, v28, isUniquelyReferenced_nonNull_native);
    *(void *)uint64_t v15 = v36;
    swift_bridgeObjectRelease();
    v27(v28, v29);
    swift_endAccess();
  }
  *(unsigned char *)(v0[15] + 185) = 1;
  uint64_t v31 = (void *)swift_task_alloc();
  v0[21] = v31;
  void *v31 = v0;
  v31[1] = sub_100FE65D4;
  uint64_t v32 = v0[14];
  return sub_100FE6724(v32);
}

uint64_t sub_100FE65D4()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100FE6724(uint64_t a1)
{
  v2[12] = a1;
  v2[13] = v1;
  uint64_t v3 = type metadata accessor for UUID();
  v2[14] = v3;
  v2[15] = *(void *)(v3 - 8);
  v2[16] = swift_task_alloc();
  v2[17] = swift_task_alloc();
  v2[18] = swift_task_alloc();
  return _swift_task_switch(sub_100FE6800, v1, 0);
}

uint64_t sub_100FE6800()
{
  uint64_t v21 = v0;
  if (qword_101637348 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[12];
  uint64_t v2 = v0[18];
  uint64_t v3 = v0[14];
  uint64_t v4 = v0[15];
  uint64_t v5 = type metadata accessor for Logger();
  v0[19] = sub_100010324(v5, (uint64_t)qword_101666080);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[20] = v6;
  v0[21] = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v2, v1, v3);
  os_log_type_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = v0[18];
  uint64_t v11 = v0[14];
  uint64_t v12 = v0[15];
  if (v9)
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136446723;
    v0[9] = sub_1008FA0F0(0xD00000000000001FLL, 0x800000010141C9E0, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 12) = 2160;
    v0[10] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 22) = 2081;
    sub_100FFD1F4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[11] = sub_1008FA0F0(v14, v15, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v16(v10, v11);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "%{public}s for %{private,mask.hash}s", (uint8_t *)v13, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v16(v10, v11);
  }

  v0[22] = v16;
  char v17 = (void *)swift_task_alloc();
  v0[23] = v17;
  void *v17 = v0;
  v17[1] = sub_100FE6B24;
  uint64_t v18 = v0[12];
  return sub_100FDE400(v18);
}

uint64_t sub_100FE6B24()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 192) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 104);
  if (v0) {
    uint64_t v4 = sub_100FE7064;
  }
  else {
    uint64_t v4 = sub_100FE6C50;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100FE6C50()
{
  uint64_t v13 = v0;
  (*(void (**)(void, void, void))(v0 + 160))(*(void *)(v0 + 136), *(void *)(v0 + 96), *(void *)(v0 + 112));
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v0 + 176);
    uint64_t v3 = *(void *)(v0 + 136);
    uint64_t v4 = *(void *)(v0 + 112);
    uint64_t v5 = swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446723;
    *(void *)(v0 + 48) = sub_1008FA0F0(0xD00000000000001FLL, 0x800000010141C9E0, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v5 + 12) = 2160;
    *(void *)(v0 + 56) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v5 + 22) = 2081;
    sub_100FFD1F4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v6 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 64) = sub_1008FA0F0(v6, v7, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v11(v3, v4);
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "%{public}s Successfully started FAM for %{private,mask.hash}s.", (uint8_t *)v5, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v0 + 176))(*(void *)(v0 + 136), *(void *)(v0 + 112));
  }

  os_log_type_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 200) = v8;
  *os_log_type_t v8 = v0;
  v8[1] = sub_100FE6F10;
  uint64_t v9 = *(void *)(v0 + 96);
  return sub_100FE9C30(v9);
}

uint64_t sub_100FE6F10()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100FE7064()
{
  uint64_t v19 = v0;
  (*(void (**)(void, void, void))(v0 + 160))(*(void *)(v0 + 128), *(void *)(v0 + 96), *(void *)(v0 + 112));
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v0 + 176);
    uint64_t v3 = *(void *)(v0 + 128);
    log = v1;
    uint64_t v4 = *(void *)(v0 + 112);
    uint64_t v5 = swift_slowAlloc();
    char v17 = (void *)swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446979;
    *(void *)(v0 + 16) = sub_1008FA0F0(0xD00000000000001FLL, 0x800000010141C9E0, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v5 + 12) = 2160;
    *(void *)(v0 + 24) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v5 + 22) = 2081;
    sub_100FFD1F4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v6 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 32) = sub_1008FA0F0(v6, v7, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v16(v3, v4);
    *(_WORD *)(v5 + 32) = 2114;
    swift_errorRetain();
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 40) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v17 = v8;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, v2, "%{public}s Failed to start FAM for %{private,mask.hash}s %{public}@", (uint8_t *)v5, 0x2Au);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v0 + 176);
    uint64_t v10 = *(void *)(v0 + 128);
    uint64_t v11 = *(void *)(v0 + 112);
    swift_errorRelease();
    v9(v10, v11);
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v0 + 200) = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_100FE6F10;
  uint64_t v13 = *(void *)(v0 + 96);
  return sub_100FE9C30(v13);
}

uint64_t sub_100FE7400(uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  uint64_t v3 = type metadata accessor for UUID();
  v2[7] = v3;
  v2[8] = *(void *)(v3 - 8);
  v2[9] = swift_task_alloc();
  return _swift_task_switch(sub_100FE74C0, v1, 0);
}

uint64_t sub_100FE74C0()
{
  uint64_t v18 = v0;
  if (qword_101637348 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[8];
  uint64_t v2 = v0[9];
  uint64_t v4 = v0[7];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_101666080);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = v0[8];
  uint64_t v9 = v0[9];
  uint64_t v11 = v0[7];
  if (v8)
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136446723;
    v0[2] = sub_1008FA0F0(0xD000000000000013, 0x800000010141C8E0, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2160;
    v0[3] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 22) = 2081;
    sub_100FFD1F4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[4] = sub_1008FA0F0(v13, v14, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "%{public}s for %{private,mask.hash}s", (uint8_t *)v12, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v10 + 8))(v0[9], v0[7]);
  }

  unint64_t v15 = (void *)swift_task_alloc();
  v0[10] = v15;
  void *v15 = v0;
  v15[1] = sub_100FE77CC;
  return sub_100FD8A28();
}

uint64_t sub_100FE77CC()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *v0;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 88) = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_100FE7924;
  uint64_t v4 = *(void *)(v1 + 40);
  return sub_100FDA438(v4);
}

uint64_t sub_100FE7924()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *v0;
  swift_task_dealloc();
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 96) = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_100FE7A7C;
  uint64_t v4 = *(void *)(v1 + 48);
  v3[2] = v4;
  return _swift_task_switch(sub_100FDAFBC, v4, 0);
}

uint64_t sub_100FE7A7C()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100FE7B8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[7] = a3;
  v4[8] = a4;
  v4[6] = a2;
  uint64_t v6 = sub_10000588C(&qword_10163D210);
  v4[9] = v6;
  v4[10] = *(void *)(v6 - 8);
  v4[11] = swift_task_alloc();
  v4[12] = swift_task_alloc();
  v4[13] = swift_task_alloc();
  v4[14] = swift_task_alloc();
  v4[15] = type metadata accessor for CentralManager.ConnectedState();
  v4[16] = swift_task_alloc();
  return _swift_task_switch(sub_100FE7CB0, a3, 0);
}

uint64_t sub_100FE7CB0()
{
  uint64_t v47 = v0;
  uint64_t v1 = v0[10];
  sub_100FFC7DC(v0[6], v0[16], (uint64_t (*)(void))&type metadata accessor for CentralManager.ConnectedState);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v3 = *(void (**)(void, uint64_t, uint64_t))(v1 + 32);
  uint64_t v4 = v0[16];
  uint64_t v5 = v0[9];
  if (EnumCaseMultiPayload == 1)
  {
    v3(v0[12], v4, v5);
    if (qword_101637348 != -1) {
      swift_once();
    }
    uint64_t v6 = v0[11];
    uint64_t v7 = v0[12];
    uint64_t v9 = v0[9];
    uint64_t v8 = v0[10];
    uint64_t v10 = type metadata accessor for Logger();
    sub_100010324(v10, (uint64_t)qword_101666080);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v6, v7, v9);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    BOOL v13 = os_log_type_enabled(v11, v12);
    uint64_t v15 = v0[10];
    uint64_t v14 = v0[11];
    uint64_t v16 = v0[9];
    if (v13)
    {
      os_log_type_t type = v12;
      uint64_t v17 = swift_slowAlloc();
      uint64_t v46 = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 141558275;
      v0[2] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v17 + 12) = 2081;
      sub_100062734(&qword_10163B810, &qword_10163D210);
      uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[3] = sub_1008FA0F0(v18, v19, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
      v20(v14, v16);
      _os_log_impl((void *)&_mh_execute_header, v11, type, "Connected to %{private,mask.hash}s", (uint8_t *)v17, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
      v20(v0[11], v0[9]);
    }

    v0[17] = v20;
    uint64_t v37 = v0[7];
    if (*(unsigned char *)(v37 + 184) == 1)
    {
      uint64_t v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v38, v39))
      {
        unint64_t v40 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v40 = 0;
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "Restarting FAM uppon reconnection", v40, 2u);
        swift_slowDealloc();
      }

      *(unsigned char *)(v37 + 184) = 0;
      uint64_t v41 = (void *)swift_task_alloc();
      v0[18] = v41;
      *uint64_t v41 = v0;
      v41[1] = sub_100FE830C;
      uint64_t v42 = v0[8];
      return sub_100FDE400(v42);
    }
    v20(v0[12], v0[9]);
  }
  else
  {
    v3(v0[14], v4, v5);
    if (qword_101637348 != -1) {
      swift_once();
    }
    uint64_t v21 = v0[13];
    uint64_t v22 = v0[14];
    uint64_t v23 = v0[9];
    uint64_t v24 = v0[10];
    uint64_t v25 = type metadata accessor for Logger();
    sub_100010324(v25, (uint64_t)qword_101666080);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16))(v21, v22, v23);
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.default.getter();
    BOOL v28 = os_log_type_enabled(v26, v27);
    uint64_t v29 = v0[13];
    uint64_t v30 = v0[14];
    uint64_t v31 = v0[9];
    uint64_t v32 = v0[10];
    if (v28)
    {
      uint64_t v33 = swift_slowAlloc();
      uint64_t v46 = swift_slowAlloc();
      *(_DWORD *)uint64_t v33 = 141558275;
      v0[4] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v33 + 12) = 2081;
      sub_100062734(&qword_10163B810, &qword_10163D210);
      uint64_t v34 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[5] = sub_1008FA0F0(v34, v35, &v46);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v36 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
      v36(v29, v31);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Disconnected from %{private,mask.hash}s", (uint8_t *)v33, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v36 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
      v36(v29, v31);
    }
    v36(v30, v31);
    *(unsigned char *)(v0[7] + 184) = 1;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v44 = (uint64_t (*)(void))v0[1];
  return v44();
}

uint64_t sub_100FE830C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 152) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 56);
  if (v0) {
    uint64_t v4 = sub_100FE84E8;
  }
  else {
    uint64_t v4 = sub_100FE8438;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100FE8438()
{
  (*(void (**)(void, void))(v0 + 136))(*(void *)(v0 + 96), *(void *)(v0 + 72));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100FE84E8()
{
  (*(void (**)(void, void))(v0 + 136))(*(void *)(v0 + 96), *(void *)(v0 + 72));
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100FE85A0(char a1, uint64_t a2)
{
  *(void *)(v2 + 24) = a2;
  *(unsigned char *)(v2 + 60) = a1;
  uint64_t v3 = type metadata accessor for Device();
  *(void *)(v2 + 32) = v3;
  *(void *)(v2 + 40) = *(void *)(v3 - 8);
  *(void *)(v2 + 48) = swift_task_alloc();
  return _swift_task_switch(sub_100FE8664, 0, 0);
}

uint64_t sub_100FE8664()
{
  uint64_t v19 = v0;
  if (qword_101637348 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_101666080);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = *(void *)(v0 + 40);
  uint64_t v9 = *(void *)(v0 + 48);
  uint64_t v11 = *(void *)(v0 + 32);
  if (v8)
  {
    int v12 = *(unsigned __int8 *)(v0 + 60);
    uint64_t v13 = swift_slowAlloc();
    uint64_t v18 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 67109378;
    *(_DWORD *)(v0 + 56) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 8) = 2080;
    sub_100FFD1F4(&qword_101666808, 255, (void (*)(uint64_t))&type metadata accessor for Device);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 16) = sub_1008FA0F0(v14, v15, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "[Throttled every 2 seconds] isFastAdvertising:%{BOOL}d device:%s", (uint8_t *)v13, 0x12u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v10 + 8))(*(void *)(v0 + 48), *(void *)(v0 + 32));
  }

  swift_task_dealloc();
  uint64_t v16 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v16(1);
}

uint64_t sub_100FE88F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[11] = a2;
  v3[12] = a3;
  v3[10] = a1;
  type metadata accessor for LocalFindableAccessoryRecord();
  v3[13] = swift_task_alloc();
  v3[14] = swift_task_alloc();
  return _swift_task_switch(sub_100FE8998, 0, 0);
}

uint64_t sub_100FE8998()
{
  uint64_t v18 = v0;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  v0[15] = Strong;
  if (Strong)
  {
    if (qword_101637348 != -1) {
      swift_once();
    }
    uint64_t v2 = v0[14];
    uint64_t v3 = v0[11];
    uint64_t v4 = type metadata accessor for Logger();
    v0[16] = sub_100010324(v4, (uint64_t)qword_101666080);
    sub_100FFC7DC(v3, v2, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    BOOL v7 = os_log_type_enabled(v5, v6);
    uint64_t v8 = v0[14];
    if (v7)
    {
      uint64_t v9 = swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 141558275;
      v0[8] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v9 + 12) = 2081;
      type metadata accessor for UUID();
      sub_100FFD1F4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v10 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[9] = sub_1008FA0F0(v10, v11, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100FFC77C(v8, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Putting beacon %{private,mask.hash}s back into FAM", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100FFC77C(v0[14], (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    }

    unint64_t v15 = (void *)swift_task_alloc();
    v0[17] = v15;
    void *v15 = v0;
    v15[1] = sub_100FE8CFC;
    uint64_t v16 = v0[12];
    return sub_100FDE400(v16);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    int v12 = (uint64_t (*)(BOOL))v0[1];
    BOOL v13 = v0[15] != 0;
    return v12(v13);
  }
}

uint64_t sub_100FE8CFC()
{
  *(void *)(*(void *)v1 + 144) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100FE8E8C;
  }
  else {
    uint64_t v2 = sub_100FE8E10;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100FE8E10()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(BOOL))(v0 + 8);
  BOOL v2 = *(void *)(v0 + 120) != 0;
  return v1(v2);
}

uint64_t sub_100FE8E8C()
{
  unint64_t v15 = v0;
  sub_100FFC7DC(v0[11], v0[13], (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = v0[13];
    uint64_t v4 = swift_slowAlloc();
    int v12 = (void *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    v0[5] = 1752392040;
    uint64_t v14 = v13;
    *(_DWORD *)uint64_t v4 = 141558531;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2081;
    type metadata accessor for UUID();
    sub_100FFD1F4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v5 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[6] = sub_1008FA0F0(v5, v6, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100FFC77C(v3, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    *(_WORD *)(v4 + 22) = 2114;
    swift_errorRetain();
    uint64_t v7 = _swift_stdlib_bridgeErrorToNSError();
    v0[7] = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *int v12 = v7;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Unable to put beacon %{private,mask.hash}s back into FAM %{public}@", (uint8_t *)v4, 0x20u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();

    swift_errorRelease();
  }
  else
  {
    uint64_t v8 = v0[13];
    swift_release();
    swift_errorRelease();
    sub_100FFC77C(v8, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(BOOL))v0[1];
  BOOL v10 = v0[15] != 0;
  return v9(v10);
}

uint64_t sub_100FE91DC(uint64_t a1, uint64_t a2)
{
  v2[19] = a1;
  v2[20] = a2;
  sub_10000588C(&qword_101638CF0);
  v2[21] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for UUID();
  v2[22] = v3;
  v2[23] = *(void *)(v3 - 8);
  v2[24] = swift_task_alloc();
  uint64_t v4 = sub_10000588C(&qword_10163D210);
  v2[25] = v4;
  v2[26] = *(void *)(v4 - 8);
  v2[27] = swift_task_alloc();
  return _swift_task_switch(sub_100FE932C, 0, 0);
}

uint64_t sub_100FE932C()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  *(void *)(v0 + 224) = Strong;
  if (Strong)
  {
    if (qword_101637348 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    *(void *)(v0 + 232) = sub_100010324(v2, (uint64_t)qword_101666080);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Saving detected-nearby event with throttle", v5, 2u);
      swift_slowDealloc();
    }

    uint64_t v6 = qword_1016375E8;
    swift_retain();
    if (v6 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
    if (*(void *)(v0 + 80))
    {
      sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
      swift_release();
      sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
      unint64_t v11 = (uint64_t (*)(void))((char *)&dword_101639168 + dword_101639168);
      uint64_t v8 = (void *)swift_task_alloc();
      *(void *)(v0 + 240) = v8;
      *uint64_t v8 = v0;
      v8[1] = sub_100FE95D4;
      return v11();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = *(uint64_t (**)(BOOL))(v0 + 8);
    BOOL v10 = *(void *)(v0 + 224) != 0;
    return v9(v10);
  }
  return result;
}

uint64_t sub_100FE95D4(uint64_t a1)
{
  *(void *)(*(void *)v1 + 248) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100FE96D4, 0, 0);
}

uint64_t sub_100FE96D4()
{
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (v0[31])
  {
    uint64_t v3 = v0[23];
    uint64_t v2 = v0[24];
    uint64_t v5 = v0[21];
    uint64_t v4 = v0[22];
    uint64_t v6 = v0[20];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v6, v4);
    type metadata accessor for Peripheral();
    Identifier.init(_:)();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56))(v5, 1, 1, v4);
    uint64_t v7 = (void *)swift_task_alloc();
    v0[32] = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_100FE9A1C;
    uint64_t v8 = v0[27];
    uint64_t v9 = v0[21];
    return sub_100D2FEFC(v8, v9);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_10001CEC8();
    swift_allocError();
    *unint64_t v11 = 0xD000000000000014;
    v11[1] = 0x800000010141C800;
    swift_willThrow();
    swift_errorRetain();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      unint64_t v15 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 138543362;
      swift_errorRetain();
      uint64_t v16 = _swift_stdlib_bridgeErrorToNSError();
      v0[18] = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v15 = v16;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Failed to save detected-nearby event %{public}@", v14, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      swift_release();
    }
    else
    {
      swift_release();
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v17 = (uint64_t (*)(BOOL))v0[1];
    BOOL v18 = v0[28] != 0;
    return v17(v18);
  }
}

uint64_t sub_100FE9A1C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 216);
  uint64_t v2 = *(void *)(*(void *)v0 + 208);
  uint64_t v3 = *(void *)(*(void *)v0 + 200);
  uint64_t v4 = *(void *)(*(void *)v0 + 168);
  swift_task_dealloc();
  sub_10001DAB4(v4, &qword_101638CF0);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(sub_100FE9B98, 0, 0);
}

uint64_t sub_100FE9B98()
{
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(BOOL))(v0 + 8);
  BOOL v2 = *(void *)(v0 + 224) != 0;
  return v1(v2);
}

uint64_t sub_100FE9C30(uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  v2[7] = *v1;
  sub_10000588C(&qword_10164DBB0);
  v2[8] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for UUID();
  v2[9] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[10] = v4;
  v2[11] = *(void *)(v4 + 64);
  v2[12] = swift_task_alloc();
  v2[13] = swift_task_alloc();
  return _swift_task_switch(sub_100FE9D60, v1, 0);
}

uint64_t sub_100FE9D60()
{
  uint64_t v34 = v0;
  if (qword_101637348 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[5];
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[9];
  uint64_t v4 = v0[10];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_101666080);
  uint64_t v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v32(v2, v1, v3);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = v0[13];
  uint64_t v11 = v0[9];
  uint64_t v10 = v0[10];
  if (v8)
  {
    os_log_type_t type = v7;
    uint64_t v12 = swift_slowAlloc();
    uint64_t v33 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136446723;
    v0[2] = sub_1008FA0F0(0xD00000000000001DLL, 0x800000010141CA00, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2160;
    v0[3] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 22) = 2081;
    sub_100FFD1F4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[4] = sub_1008FA0F0(v13, v14, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    _os_log_impl((void *)&_mh_execute_header, v6, type, "%{public}s for %{private,mask.hash}s", (uint8_t *)v12, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v10 + 8))(v0[13], v0[9]);
  }
  uint64_t v15 = v0[12];
  uint64_t v17 = v0[10];
  uint64_t v16 = v0[11];
  uint64_t v18 = v0[8];
  uint64_t v19 = v0[9];
  uint64_t v20 = v0[6];
  *(void *)os_log_type_t typea = v0[7];
  uint64_t v21 = v0[5];
  uint64_t v22 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v18, 1, 1, v22);
  v32(v15, v21, v19);
  uint64_t v24 = sub_100FFD1F4((unint64_t *)&unk_101666540, v23, (void (*)(uint64_t))type metadata accessor for BTFindingService);
  unint64_t v25 = (*(unsigned __int8 *)(v17 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  unint64_t v26 = (v16 + v25 + 7) & 0xFFFFFFFFFFFFFFF8;
  os_log_type_t v27 = (char *)swift_allocObject();
  *((void *)v27 + 2) = v20;
  *((void *)v27 + 3) = v24;
  *((void *)v27 + 4) = v20;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 32))(&v27[v25], v15, v19);
  *(void *)&v27[v26] = *(void *)typea;
  swift_retain_n();
  sub_1008F5E44(v18, (uint64_t)&unk_1016666A0, (uint64_t)v27);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  BOOL v28 = (uint64_t (*)(void))v0[1];
  return v28();
}

uint64_t sub_100FEA198(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  _OWORD v6[2] = a4;
  uint64_t v8 = type metadata accessor for UUID();
  v6[5] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v6[6] = v9;
  v6[7] = *(void *)(v9 + 64);
  v6[8] = swift_task_alloc();
  v6[9] = swift_task_alloc();
  v6[10] = swift_task_alloc();
  uint64_t v10 = (void *)swift_task_alloc();
  v6[11] = v10;
  *uint64_t v10 = v6;
  v10[1] = sub_100FEA2C0;
  return sub_100FEA8A4(a5);
}

uint64_t sub_100FEA2C0(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 16);
  *(unsigned char *)(*(void *)v1 + 104) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100FEA3D8, v2, 0);
}

uint64_t sub_100FEA3D8()
{
  if (*(unsigned char *)(v0 + 104) == 1)
  {
    uint64_t v1 = *(void *)(v0 + 80);
    uint64_t v2 = *(void *)(v0 + 56);
    uint64_t v22 = *(void *)(v0 + 72);
    uint64_t v3 = *(void *)(v0 + 40);
    uint64_t v4 = *(void *)(v0 + 48);
    uint64_t v5 = *(void *)(v0 + 24);
    uint64_t v23 = v5;
    uint64_t v6 = *(void *)(v0 + 16);
    uint64_t v19 = *(void *)(v0 + 32);
    type metadata accessor for WorkItemQueue.WorkItem();
    uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
    uint64_t v20 = v1;
    v24(v1, v5, v3);
    uint64_t v7 = *(unsigned __int8 *)(v4 + 80);
    uint64_t v8 = (v7 + 24) & ~v7;
    v2 += 7;
    unint64_t v21 = (v8 + v2) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = v6;
    uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
    v18(v9 + v8, v1, v3);
    *(void *)(v9 + v21) = v19;
    v24(v22, v23, v3);
    uint64_t v10 = (v7 + 16) & ~v7;
    unint64_t v11 = (v10 + v2) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v12 = swift_allocObject();
    v18(v12 + v10, v22, v3);
    *(void *)(v12 + v11) = v19;
    swift_retain();
    UUID.init()();
    uint64_t v13 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)();
    v24(v20, v23, v3);
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = v6;
    v18(v14 + v8, v20, v3);
    *(void *)(v14 + v21) = v13;
    swift_retain();
    swift_retain();
    UUID.init()();
    WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)();
    dispatch thunk of WorkItemQueue.enqueue(_:)();
    dispatch thunk of WorkItemQueue.enqueue(_:)();
    swift_release();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
    return v15();
  }
  else
  {
    uint64_t v17 = (void *)swift_task_alloc();
    *(void *)(v0 + 96) = v17;
    void *v17 = v0;
    v17[1] = sub_100FEA754;
    return sub_100FDBC48();
  }
}

uint64_t sub_100FEA754()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100FEA8A4(uint64_t a1)
{
  v2[13] = a1;
  v2[14] = v1;
  uint64_t v3 = type metadata accessor for UUID();
  v2[15] = v3;
  v2[16] = *(void *)(v3 - 8);
  v2[17] = swift_task_alloc();
  v2[18] = swift_task_alloc();
  return _swift_task_switch(sub_100FEA974, v1, 0);
}

uint64_t sub_100FEA974()
{
  BOOL v28 = v0;
  if (sub_100FD2310())
  {
    uint64_t v1 = v0[14];
    swift_beginAccess();
    uint64_t v2 = *(void *)(v1 + 216);
    if (*(void *)(v2 + 16))
    {
      uint64_t v3 = v0[13];
      swift_bridgeObjectRetain();
      unint64_t v4 = sub_1007240CC(v3);
      if (v5)
      {
        uint64_t v6 = (void *)(*(void *)(v2 + 56) + 16 * v4);
        v0[19] = *v6;
        v0[20] = v6[1];
        swift_retain();
        swift_bridgeObjectRelease();
        return _swift_task_switch(sub_100FEAE08, 0, 0);
      }
      swift_bridgeObjectRelease();
    }
    if (qword_101637348 != -1) {
      swift_once();
    }
    uint64_t v12 = v0[16];
    uint64_t v11 = v0[17];
    uint64_t v13 = v0[15];
    uint64_t v14 = v0[13];
    uint64_t v15 = type metadata accessor for Logger();
    sub_100010324(v15, (uint64_t)qword_101666080);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v11, v14, v13);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    BOOL v18 = os_log_type_enabled(v16, v17);
    uint64_t v20 = v0[16];
    uint64_t v19 = v0[17];
    uint64_t v21 = v0[15];
    if (v18)
    {
      uint64_t v22 = swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 141558275;
      v0[6] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v22 + 12) = 2081;
      sub_100FFD1F4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[7] = sub_1008FA0F0(v23, v24, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Missing tracker for %{private,mask.hash}s. Not extending FAM", (uint8_t *)v22, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v20 + 8))(v0[17], v0[15]);
    }
  }
  else
  {
    if (qword_101637348 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100010324(v7, (uint64_t)qword_101666080);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136446210;
      v0[5] = sub_1008FA0F0(0xD000000000000023, 0x800000010141CA60, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s No active client. Not extending FAM", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v25 = (uint64_t (*)(void))v0[1];
  return v25(0);
}

uint64_t sub_100FEAE08()
{
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_10170E390;
  *(void *)(v0 + 168) = qword_10170E390;
  swift_retain();
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 176) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100FEAF14;
  return unsafeBlocking<A>(_:)(v0 + 64, sub_10001D704, v1, &type metadata for Configuration);
}

uint64_t sub_100FEAF14()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100FEB02C, 0, 0);
}

uint64_t sub_100FEB02C()
{
  uint64_t v1 = v0[14];
  v0[23] = v0[8];
  return _swift_task_switch(sub_100FEB050, v1, 0);
}

uint64_t sub_100FEB050()
{
  BOOL v28 = v0;
  uint64_t v1 = v0[20];
  uint64_t v2 = sub_1010AC54C(v0[23]);
  swift_bridgeObjectRelease();
  if (v1 >= v2)
  {
    if (qword_101637348 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_100010324(v14, (uint64_t)qword_101666080);
    swift_retain();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = v0[20];
      uint64_t v18 = swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 134218240;
      v0[9] = v2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v18 + 12) = 2048;
      v0[10] = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Exceeded max number of extensions allowed! Limit: %ld Current: %ld.", (uint8_t *)v18, 0x16u);
      swift_slowDealloc();

      swift_release();
LABEL_19:
      uint64_t v24 = 0;
      goto LABEL_20;
    }

LABEL_18:
    swift_release_n();
    goto LABEL_19;
  }
  uint64_t v3 = qword_101637348;
  if (v0[19])
  {
    swift_retain();
    if (v3 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_101666080);
    swift_retain_n();
    char v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = v0[18];
      uint64_t v8 = v0[15];
      uint64_t v9 = v0[16];
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136446210;
      WorkItemQueue.WorkItem.id.getter();
      sub_100FFD1F4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v13 = v12;
      (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
      v0[12] = sub_1008FA0F0(v11, v13, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Found existing task %{public}s. Not scheduling extension.", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    goto LABEL_18;
  }
  if (qword_101637348 != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  sub_100010324(v19, (uint64_t)qword_101666080);
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v22 = v0[20];
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v23 = 134217984;
    v0[11] = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "Extending FAM with current counter: %ld", v23, 0xCu);
    swift_slowDealloc();
  }

  uint64_t v24 = 1;
LABEL_20:
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v25 = (uint64_t (*)(uint64_t))v0[1];
  return v25(v24);
}

uint64_t sub_100FEB534(uint64_t a1, uint64_t a2)
{
  v2[8] = a1;
  v2[9] = a2;
  uint64_t v3 = type metadata accessor for ContinuousClock();
  v2[10] = v3;
  v2[11] = *(void *)(v3 - 8);
  v2[12] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UUID();
  v2[13] = v4;
  v2[14] = *(void *)(v4 - 8);
  v2[15] = swift_task_alloc();
  v2[16] = swift_task_alloc();
  return _swift_task_switch(sub_100FEB660, 0, 0);
}

uint64_t sub_100FEB660()
{
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_10170E390;
  *(void *)(v0 + 136) = qword_10170E390;
  swift_retain();
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 144) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100FEB76C;
  return unsafeBlocking<A>(_:)(v0 + 16, sub_10001D704, v1, &type metadata for Configuration);
}

uint64_t sub_100FEB76C()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100FEB884, 0, 0);
}

uint64_t sub_100FEB884()
{
  uint64_t v1 = v0[8];
  v0[19] = v0[2];
  return _swift_task_switch(sub_100FEB8A8, v1, 0);
}

uint64_t sub_100FEB8A8()
{
  sub_1010AC65C(v0[19]);
  swift_bridgeObjectRelease();
  v0[20] = static Duration.seconds(_:)();
  v0[21] = v1;
  return _swift_task_switch(sub_100FEB92C, 0, 0);
}

uint64_t sub_100FEB92C()
{
  uint64_t v25 = v0;
  if (qword_101637348 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[16];
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[14];
  uint64_t v4 = v0[9];
  uint64_t v5 = type metadata accessor for Logger();
  v0[22] = sub_100010324(v5, (uint64_t)qword_101666080);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[23] = v6;
  v0[24] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v1, v4, v2);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    os_log_type_t type = v8;
    uint64_t v9 = v0[16];
    uint64_t v10 = v0[13];
    uint64_t v11 = v0[14];
    uint64_t v12 = swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 141558531;
    v0[5] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2081;
    sub_100FFD1F4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[6] = sub_1008FA0F0(v13, v14, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v15(v9, v10);
    *(_WORD *)(v12 + 22) = 2080;
    uint64_t v16 = Duration.description.getter();
    v0[7] = sub_1008FA0F0(v16, v17, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, type, "Will extend FAM for %{private,mask.hash}s after %s", (uint8_t *)v12, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v0[14] + 8);
    v15(v0[16], v0[13]);
  }

  v0[25] = v15;
  ContinuousClock.init()();
  uint64_t v23 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, char))((char *)&dword_1016666E8 + dword_1016666E8);
  uint64_t v18 = (void *)swift_task_alloc();
  v0[26] = v18;
  *uint64_t v18 = v0;
  v18[1] = sub_100FEBC78;
  uint64_t v20 = v0[20];
  uint64_t v19 = v0[21];
  return v23(v20, v19, 0, 0, 1);
}

uint64_t sub_100FEBC78()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 96);
  uint64_t v4 = *(void *)(*v1 + 88);
  uint64_t v5 = *(void *)(*v1 + 80);
  *(void *)(*v1 + 216) = v0;
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0)
  {
    uint64_t v6 = sub_100FEBDF8;
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v7 = *(void *)(v2 + 64);
    uint64_t v6 = sub_100FEBE78;
  }
  return _swift_task_switch(v6, v7, 0);
}

uint64_t sub_100FEBDF8()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100FEBE78()
{
  sub_100FEC2A4(*(void *)(v0 + 72));
  return _swift_task_switch(sub_100FEBEE0, 0, 0);
}

uint64_t sub_100FEBEE0()
{
  uint64_t v14 = v0;
  (*(void (**)(void, void, void))(v0 + 184))(*(void *)(v0 + 120), *(void *)(v0 + 72), *(void *)(v0 + 104));
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = *(void *)(v0 + 120);
    uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v0 + 200);
    uint64_t v4 = *(void *)(v0 + 104);
    uint64_t v5 = swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    *(void *)(v0 + 24) = 1752392040;
    uint64_t v13 = v6;
    *(_DWORD *)uint64_t v5 = 141558275;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v5 + 12) = 2081;
    sub_100FFD1F4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 32) = sub_1008FA0F0(v7, v8, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v12(v3, v4);
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Extending FAM for %{private,mask.hash}s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v0 + 200))(*(void *)(v0 + 120), *(void *)(v0 + 104));
  }

  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 224) = v9;
  void *v9 = v0;
  v9[1] = sub_100FEC154;
  uint64_t v10 = *(void *)(v0 + 72);
  return sub_100FE6724(v10);
}

uint64_t sub_100FEC154()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

void sub_100FEC2A4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)&v41 - v8;
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v41 - v10;
  if (qword_101637348 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = sub_100010324(v12, (uint64_t)qword_101666080);
  uint64_t v46 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v46(v11, a1, v2);
  uint64_t v45 = v13;
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  BOOL v16 = os_log_type_enabled(v14, v15);
  uint64_t v44 = v9;
  if (v16)
  {
    uint64_t v17 = swift_slowAlloc();
    uint64_t v41 = swift_slowAlloc();
    v50[0] = v41;
    *(_DWORD *)uint64_t v17 = 136446723;
    v48[0] = sub_1008FA0F0(0xD000000000000012, 0x800000010141CA40, v50);
    uint64_t v43 = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v17 + 12) = 2160;
    v48[0] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v17 + 22) = 2081;
    uint64_t v42 = a1;
    sub_100FFD1F4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
    v48[0] = sub_1008FA0F0(v18, v19, v50);
    a1 = v42;
    uint64_t v20 = v43;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    os_log_type_t v21 = v11;
    uint64_t v22 = *(void (**)(char *, uint64_t))(v20 + 8);
    v22(v21, v2);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "%{public}s for %{private,mask.hash}s", (uint8_t *)v17, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v23 = v11;
    uint64_t v22 = *(void (**)(char *, uint64_t))(v3 + 8);
    v22(v23, v2);
  }

  uint64_t v24 = v47;
  uint64_t v25 = (uint64_t *)((char *)v47 + 216);
  swift_beginAccess();
  uint64_t v26 = *((void *)v24 + 27);
  if (*(void *)(v26 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v27 = sub_1007240CC(a1);
    if (v28)
    {
      uint64_t v29 = a1;
      uint64_t v30 = *(void *)(*(void *)(v26 + 56) + 16 * v27 + 8);
      swift_bridgeObjectRelease();
      BOOL v31 = __OFADD__(v30, 1);
      uint64_t v32 = v30 + 1;
      if (v31)
      {
        __break(1u);
      }
      else
      {
        uint64_t v33 = (uint64_t)v44;
        v46(v44, v29, v2);
        swift_beginAccess();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v49 = *v25;
        *uint64_t v25 = 0x8000000000000000;
        sub_100172308(0, v32, v33, isUniquelyReferenced_nonNull_native);
        *uint64_t v25 = v49;
        swift_bridgeObjectRelease();
        v22((char *)v33, v2);
        swift_endAccess();
      }
      return;
    }
    swift_bridgeObjectRelease();
  }
  v46(v6, a1, v2);
  uint64_t v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v35, v36))
  {
    uint64_t v37 = swift_slowAlloc();
    uint64_t v38 = swift_slowAlloc();
    *(_DWORD *)uint64_t v37 = 141558275;
    uint64_t v49 = 1752392040;
    uint64_t v47 = v22;
    v48[0] = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v37 + 12) = 2081;
    sub_100FFD1F4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v39 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v49 = sub_1008FA0F0(v39, v40, v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v47(v6, v2);
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "clearTracker: no tracker for %{private,mask.hash}s", (uint8_t *)v37, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    v22(v6, v2);
  }
}

uint64_t sub_100FEC8CC(uint64_t a1, char a2, uint64_t a3)
{
  *(unsigned char *)(v3 + 160) = a2;
  *(void *)(v3 + 80) = a1;
  *(void *)(v3 + 88) = a3;
  uint64_t v4 = type metadata accessor for CancellationError();
  *(void *)(v3 + 96) = v4;
  *(void *)(v3 + 104) = *(void *)(v4 - 8);
  *(void *)(v3 + 112) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  *(void *)(v3 + 120) = v5;
  *(void *)(v3 + 128) = *(void *)(v5 - 8);
  *(void *)(v3 + 136) = swift_task_alloc();
  *(void *)(v3 + 144) = swift_task_alloc();
  *(void *)(v3 + 152) = swift_task_alloc();
  return _swift_task_switch(sub_100FECA08, 0, 0);
}

uint64_t sub_100FECA08()
{
  uint64_t v53 = v0;
  if (*(unsigned char *)(v0 + 160))
  {
    *(void *)(v0 + 16) = *(void *)(v0 + 80);
    swift_errorRetain();
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    if (swift_dynamicCast())
    {
      (*(void (**)(void, void))(*(void *)(v0 + 104) + 8))(*(void *)(v0 + 112), *(void *)(v0 + 96));
      if (qword_101637348 != -1) {
        swift_once();
      }
      uint64_t v15 = *(void *)(v0 + 144);
      uint64_t v16 = *(void *)(v0 + 120);
      uint64_t v17 = *(void *)(v0 + 128);
      uint64_t v18 = *(void *)(v0 + 88);
      uint64_t v19 = type metadata accessor for Logger();
      sub_100010324(v19, (uint64_t)qword_101666080);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v15, v18, v16);
      uint64_t v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.default.getter();
      BOOL v22 = os_log_type_enabled(v20, v21);
      uint64_t v23 = *(void *)(v0 + 144);
      uint64_t v24 = *(void *)(v0 + 120);
      uint64_t v25 = *(void *)(v0 + 128);
      if (!v22)
      {
        sub_100173E88(*(void *)(v0 + 80), 1);
        (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v23, v24);

        goto LABEL_19;
      }
      uint64_t v51 = *(void *)(v0 + 80);
      uint64_t v26 = swift_slowAlloc();
      uint64_t v52 = swift_slowAlloc();
      *(_DWORD *)uint64_t v26 = 141558275;
      *(void *)(v0 + 48) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v26 + 12) = 2081;
      sub_100FFD1F4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 56) = sub_1008FA0F0(v27, v28, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v23, v24);
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "FAM extension cancelled for %{private,mask.hash}s.", (uint8_t *)v26, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v29 = v51;
    }
    else
    {
      if (qword_101637348 != -1) {
        swift_once();
      }
      uint64_t v31 = *(void *)(v0 + 128);
      uint64_t v30 = *(void *)(v0 + 136);
      uint64_t v32 = *(void *)(v0 + 120);
      uint64_t v34 = *(void *)(v0 + 80);
      uint64_t v33 = *(void *)(v0 + 88);
      uint64_t v35 = type metadata accessor for Logger();
      sub_100010324(v35, (uint64_t)qword_101666080);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 16))(v30, v33, v32);
      sub_10033093C(v34, 1);
      swift_errorRetain();
      os_log_type_t v36 = Logger.logObject.getter();
      os_log_type_t v37 = static os_log_type_t.error.getter();
      BOOL v38 = os_log_type_enabled(v36, v37);
      uint64_t v40 = *(void *)(v0 + 128);
      uint64_t v39 = *(void *)(v0 + 136);
      uint64_t v41 = *(void *)(v0 + 120);
      uint64_t v42 = *(void *)(v0 + 80);
      if (!v38)
      {
        sub_100173E88(*(void *)(v0 + 80), 1);
        (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v39, v41);
        sub_100173E88(v42, 1);
        sub_100173E88(v42, 1);

        goto LABEL_19;
      }
      os_log_type_t type = v37;
      uint64_t v43 = swift_slowAlloc();
      uint64_t v49 = (void *)swift_slowAlloc();
      uint64_t v52 = swift_slowAlloc();
      *(_DWORD *)uint64_t v43 = 141558531;
      *(void *)(v0 + 24) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v43 + 12) = 2081;
      sub_100FFD1F4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v44 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 32) = sub_1008FA0F0(v44, v45, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v39, v41);
      *(_WORD *)(v43 + 22) = 2114;
      swift_errorRetain();
      uint64_t v46 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 40) = v46;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v49 = v46;
      sub_100173E88(v42, 1);
      sub_100173E88(v42, 1);
      _os_log_impl((void *)&_mh_execute_header, v36, type, "FAM extension failed for %{private,mask.hash}s. Error %{public}@", (uint8_t *)v43, 0x20u);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v29 = v42;
    }
    sub_100173E88(v29, 1);
    goto LABEL_19;
  }
  if (qword_101637348 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 152);
  uint64_t v2 = *(void *)(v0 + 120);
  uint64_t v3 = *(void *)(v0 + 128);
  uint64_t v4 = *(void *)(v0 + 88);
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_101666080);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v4, v2);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = *(void *)(v0 + 152);
  uint64_t v10 = *(void *)(v0 + 120);
  uint64_t v11 = *(void *)(v0 + 128);
  if (v8)
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v52 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 141558275;
    *(void *)(v0 + 64) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2081;
    sub_100FFD1F4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 72) = sub_1008FA0F0(v13, v14, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "FAM extension succeeded for %{private,mask.hash}s.", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v11 + 8))(*(void *)(v0 + 152), *(void *)(v0 + 120));
  }
LABEL_19:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v47 = *(uint64_t (**)(void))(v0 + 8);
  return v47();
}

uint64_t sub_100FED258(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return _swift_task_switch(sub_100FED280, a1, 0);
}

uint64_t sub_100FED280()
{
  sub_100FED2E8(v0[3], v0[4]);
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

void sub_100FED2E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  BOOL v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v43 = (char *)&v39 - v10;
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v39 - v11;
  if (qword_101637348 != -1) {
    swift_once();
  }
  unint64_t v45 = v8;
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = sub_100010324(v13, (uint64_t)qword_101666080);
  uint64_t v46 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v46(v12, a1, v4);
  uint64_t v44 = v14;
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc();
    uint64_t v40 = swift_slowAlloc();
    v50[0] = v40;
    *(_DWORD *)uint64_t v17 = 136446723;
    v48[0] = sub_1008FA0F0(0xD000000000000019, 0x800000010141CA20, v50);
    uint64_t v42 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v17 + 12) = 2160;
    v48[0] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v17 + 22) = 2081;
    uint64_t v41 = a1;
    sub_100FFD1F4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
    v48[0] = sub_1008FA0F0(v18, v19, v50);
    a1 = v41;
    uint64_t v20 = v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    os_log_type_t v21 = v12;
    BOOL v22 = *(void (**)(char *, uint64_t))(v20 + 8);
    v22(v21, v4);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "%{public}s for %{private,mask.hash}s", (uint8_t *)v17, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v23 = v12;
    BOOL v22 = *(void (**)(char *, uint64_t))(v5 + 8);
    v22(v23, v4);
  }

  uint64_t v24 = v47;
  uint64_t v25 = (uint64_t *)((char *)v47 + 216);
  swift_beginAccess();
  uint64_t v26 = *((void *)v24 + 27);
  if (*(void *)(v26 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v27 = sub_1007240CC(a1);
    if (v28)
    {
      uint64_t v29 = a1;
      uint64_t v30 = *(void *)(*(void *)(v26 + 56) + 16 * v27 + 8);
      swift_bridgeObjectRelease();
      uint64_t v31 = (uint64_t)v43;
      v46(v43, v29, v4);
      swift_beginAccess();
      swift_retain_n();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v49 = *v25;
      *uint64_t v25 = 0x8000000000000000;
      sub_100172308(a2, v30, v31, isUniquelyReferenced_nonNull_native);
      *uint64_t v25 = v49;
      swift_bridgeObjectRelease();
      v22((char *)v31, v4);
      swift_endAccess();
      swift_release();
      return;
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v33 = v45;
  v46(v45, a1, v4);
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v34, v35))
  {
    uint64_t v36 = swift_slowAlloc();
    v48[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v36 = 141558275;
    uint64_t v49 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v36 + 12) = 2081;
    uint64_t v47 = v22;
    sub_100FFD1F4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v49 = sub_1008FA0F0(v37, v38, v48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v47(v33, v4);
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "addTracker: missing tracker for %{private,mask.hash}s!", (uint8_t *)v36, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    v22(v33, v4);
  }
}

uint64_t sub_100FED920(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[2] = a4;
  v5[3] = a5;
  BOOL v8 = (void *)swift_task_alloc();
  v5[4] = v8;
  *BOOL v8 = v5;
  v8[1] = sub_100FED9D0;
  return sub_100FD3684(a2, a3);
}

uint64_t sub_100FED9D0()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100FEDACC, 0, 0);
}

uint64_t sub_100FEDACC()
{
  (*(void (**)(void))(v0 + 16))(0);
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100FEDB34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v34 = a3;
  uint64_t v31 = *v3;
  uint64_t v32 = a2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v30 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v27 - v9;
  if (qword_101637348 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_100010324(v11, (uint64_t)qword_101666080);
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v12(v10, a1, v5);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    uint64_t v29 = a1;
    uint64_t v16 = v15;
    uint64_t v17 = swift_slowAlloc();
    v27[2] = v17;
    *(_DWORD *)uint64_t v16 = 141558275;
    uint64_t v35 = 1752392040;
    uint64_t v36 = v17;
    char v28 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 12) = 2081;
    v27[1] = v16 + 14;
    sub_100FFD1F4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v35 = sub_1008FA0F0(v18, v19, &v36);
    uint64_t v12 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Start BT Finding for beacon %{private,mask.hash}s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    a1 = v29;
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
  }

  type metadata accessor for Transaction();
  uint64_t v20 = v30;
  v12(v30, a1, v5);
  unint64_t v21 = (*(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v22 = (v7 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = v33;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v23 + v21, v20, v5);
  uint64_t v24 = (void *)(v23 + v22);
  uint64_t v25 = v34;
  *uint64_t v24 = v32;
  v24[1] = v25;
  *(void *)(v23 + ((v22 + 23) & 0xFFFFFFFFFFFFFFF8)) = v31;
  swift_retain();
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  return swift_release();
}

uint64_t sub_100FEDF34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[26] = a3;
  v4[27] = a4;
  v4[24] = a1;
  v4[25] = a2;
  v4[28] = sub_10000588C((uint64_t *)&unk_10163B1D0);
  v4[29] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for LocalFindableAccessoryRecord();
  v4[30] = v5;
  v4[31] = *(void *)(v5 - 8);
  v4[32] = swift_task_alloc();
  v4[33] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for UUID();
  v4[34] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[35] = v7;
  v4[36] = *(void *)(v7 + 64);
  v4[37] = swift_task_alloc();
  v4[38] = swift_task_alloc();
  v4[39] = swift_task_alloc();
  unsigned char v4[40] = swift_task_alloc();
  return _swift_task_switch(sub_100FEE0C8, 0, 0);
}

uint64_t sub_100FEE0C8()
{
  uint64_t v1 = qword_1016375E8;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_101639150 + dword_101639150);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 328) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_100FEE218;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100FEE218(uint64_t a1)
{
  *(void *)(*(void *)v1 + 336) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100FEE318, 0, 0);
}

uint64_t sub_100FEE318()
{
  uint64_t v31 = v0;
  uint64_t v1 = v0[42];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 2));
  if (v1)
  {
    uint64_t v29 = v1;
    if (qword_101637348 != -1) {
      swift_once();
    }
    uint64_t v2 = v0[40];
    uint64_t v3 = v0[34];
    uint64_t v4 = v0[35];
    uint64_t v5 = v0[25];
    uint64_t v6 = type metadata accessor for Logger();
    v0[43] = sub_100010324(v6, (uint64_t)qword_101666080);
    uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
    v0[44] = v7;
    v0[45] = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v7(v2, v5, v3);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    BOOL v10 = os_log_type_enabled(v8, v9);
    uint64_t v11 = v0[40];
    uint64_t v13 = v0[34];
    uint64_t v12 = v0[35];
    if (v10)
    {
      uint64_t v14 = swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 141558275;
      v0[22] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v14 + 12) = 2081;
      sub_100FFD1F4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[23] = sub_1008FA0F0(v15, v16, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
      v17(v11, v13);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Checking if we have LocalFindableRecord for beacon: %{private,mask.hash}s", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
      v17(v0[40], v0[34]);
    }

    v0[46] = v17;
    uint64_t v21 = v0[39];
    uint64_t v22 = v0[35];
    uint64_t v23 = v0[34];
    v7(v21, v0[25], v23);
    unint64_t v24 = (*(unsigned __int8 *)(v22 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
    uint64_t v25 = swift_allocObject();
    v0[47] = v25;
    *(void *)(v25 + 16) = v29;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))(v25 + v24, v21, v23);
    swift_retain();
    uint64_t v26 = (void *)swift_task_alloc();
    v0[48] = v26;
    *uint64_t v26 = v0;
    v26[1] = sub_100FEE724;
    uint64_t v28 = v0[28];
    uint64_t v27 = v0[29];
    return withTimeout<A>(_:block:)(v27, 0x8AC7230489E80000, 0, &unk_101666718, v25, v28);
  }
  else
  {
    uint64_t v18 = (void *)swift_task_alloc();
    v0[52] = v18;
    *uint64_t v18 = v0;
    v18[1] = sub_100FEED18;
    uint64_t v19 = v0[25];
    return sub_100FD3F78(v19);
  }
}

uint64_t sub_100FEE724()
{
  *(void *)(*(void *)v1 + 392) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100FEF2BC;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_100FEE840;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100FEE840()
{
  uint64_t v17 = v0;
  uint64_t v1 = v0[29];
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(v0[31] + 48))(v1, 1, v0[30]) == 1)
  {
    swift_release();
    sub_10001DAB4(v1, (uint64_t *)&unk_10163B1D0);
    uint64_t v2 = (void *)swift_task_alloc();
    v0[52] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100FEED18;
    uint64_t v3 = v0[25];
    return sub_100FD3F78(v3);
  }
  else
  {
    uint64_t v6 = v0[32];
    uint64_t v5 = v0[33];
    sub_100FFC714(v1, v5, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    sub_100FFC7DC(v5, v6, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    BOOL v9 = os_log_type_enabled(v7, v8);
    uint64_t v10 = v0[32];
    if (v9)
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136315138;
      uint64_t v12 = sub_1000C8E00();
      v0[21] = sub_1008FA0F0(v12, v13, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100FFC77C(v10, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Found LocalFindableRecord: %s", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100FFC77C(v0[32], (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    }

    uint64_t v14 = (void *)swift_task_alloc();
    v0[50] = v14;
    *uint64_t v14 = v0;
    v14[1] = sub_100FEEB20;
    uint64_t v15 = v0[33];
    return sub_100FE10BC(v15);
  }
}

uint64_t sub_100FEEB20()
{
  *(void *)(*(void *)v1 + 408) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100FEF580;
  }
  else {
    uint64_t v2 = sub_100FEEC34;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100FEEC34()
{
  (*(void (**)(void))(v0 + 208))(0);
  uint64_t v1 = *(void *)(v0 + 264);
  swift_release();
  sub_100FFC77C(v1, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100FEED18()
{
  uint64_t v2 = (void *)*v1;
  v2[53] = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_100FEF958, 0, 0);
  }
  else
  {
    uint64_t v3 = (void *)swift_task_alloc();
    v2[54] = v3;
    *uint64_t v3 = v2;
    v3[1] = sub_100FEEE88;
    uint64_t v4 = v2[25];
    return sub_100FDE400(v4);
  }
}

uint64_t sub_100FEEE88()
{
  *(void *)(*(void *)v1 + 440) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100FEFA30;
  }
  else {
    uint64_t v2 = sub_100FEEF9C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100FEEF9C()
{
  if (qword_101637348 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_101666080);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Successfully started aggressive advertising.", v4, 2u);
    swift_slowDealloc();
  }

  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 448) = v5;
  void *v5 = v0;
  v5[1] = sub_100FEF0EC;
  uint64_t v6 = *(void *)(v0 + 200);
  return sub_100FD4FFC(v6);
}

uint64_t sub_100FEF0EC()
{
  *(void *)(*(void *)v1 + 456) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100FEFB08;
  }
  else {
    uint64_t v2 = sub_100FEF200;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100FEF200()
{
  (*(void (**)(void))(v0 + 208))(0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100FEF2BC()
{
  uint64_t v21 = v0;
  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[44];
  uint64_t v2 = v0[38];
  uint64_t v3 = v0[34];
  uint64_t v4 = v0[25];
  swift_release();
  v1(v2, v4, v3);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v19 = (void (*)(uint64_t, uint64_t))v0[46];
    uint64_t v7 = v0[38];
    uint64_t v8 = v0[34];
    uint64_t v9 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    v0[15] = 1752392040;
    uint64_t v20 = v10;
    *(_DWORD *)uint64_t v9 = 141558275;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v9 + 12) = 2081;
    sub_100FFD1F4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[16] = sub_1008FA0F0(v11, v12, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v19(v7, v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Timed out looking up LocalFindableRecord for beacon: %{private,mask.hash}s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_errorRelease();
    swift_release();
  }
  else
  {
    unint64_t v13 = (void (*)(uint64_t, uint64_t))v0[46];
    uint64_t v14 = v0[38];
    uint64_t v15 = v0[34];
    swift_release();
    swift_errorRelease();
    v13(v14, v15);
  }

  uint64_t v16 = (void *)swift_task_alloc();
  v0[52] = v16;
  *uint64_t v16 = v0;
  v16[1] = sub_100FEED18;
  uint64_t v17 = v0[25];
  return sub_100FD3F78(v17);
}

uint64_t sub_100FEF580()
{
  uint64_t v17 = v0;
  (*(void (**)(void, void, void))(v0 + 352))(*(void *)(v0 + 296), *(void *)(v0 + 200), *(void *)(v0 + 272));
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = *(void *)(v0 + 296);
    uint64_t v4 = *(void *)(v0 + 272);
    uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v0 + 368);
    uint64_t v5 = swift_slowAlloc();
    uint64_t v15 = (void *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446979;
    *(void *)(v0 + 136) = sub_1008FA0F0(0xD000000000000019, 0x800000010141CAB0, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v5 + 12) = 2160;
    *(void *)(v0 + 144) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v5 + 22) = 2081;
    sub_100FFD1F4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v6 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 152) = sub_1008FA0F0(v6, v7, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v14(v3, v4);
    *(_WORD *)(v5 + 32) = 2114;
    swift_errorRetain();
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 160) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v15 = v8;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "%{public}s failed for beacon: %{private,mask.hash}s Error: %{public}@", (uint8_t *)v5, 0x2Au);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v0 + 368))(*(void *)(v0 + 296), *(void *)(v0 + 272));
    swift_errorRelease();
    swift_errorRelease();
  }

  uint64_t v9 = *(void *)(v0 + 408);
  uint64_t v10 = *(void (**)(uint64_t))(v0 + 208);
  swift_errorRetain();
  v10(v9);
  swift_errorRelease();
  swift_errorRelease();
  uint64_t v11 = *(void *)(v0 + 264);
  swift_release();
  sub_100FFC77C(v11, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

uint64_t sub_100FEF958()
{
  uint64_t v1 = v0[53];
  os_log_type_t v2 = (void (*)(uint64_t))v0[26];
  swift_errorRetain();
  v2(v1);
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_100FEFA30()
{
  uint64_t v1 = v0[55];
  os_log_type_t v2 = (void (*)(uint64_t))v0[26];
  swift_errorRetain();
  v2(v1);
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_100FEFB08()
{
  uint64_t v1 = v0[57];
  os_log_type_t v2 = (void (*)(uint64_t))v0[26];
  swift_errorRetain();
  v2(v1);
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_100FEFBE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return _swift_task_switch(sub_100FEFC00, a2, 0);
}

uint64_t sub_100FEFC00()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[5] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100FFD614;
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[2];
  return sub_100C12834(v3, v2);
}

uint64_t sub_100FEFCA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v32 = a2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v31 = &v25[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  uint64_t v10 = &v25[-v9];
  if (qword_101637348 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_100010324(v11, (uint64_t)qword_101666080);
  unint64_t v12 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v6 + 16);
  v12(v10, a1, v5);
  unint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  int v15 = v14;
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v16 = swift_slowAlloc();
    uint64_t v29 = a1;
    uint64_t v17 = v16;
    uint64_t v27 = swift_slowAlloc();
    uint64_t v35 = v27;
    *(_DWORD *)uint64_t v17 = 136446723;
    int v26 = v15;
    uint64_t v34 = sub_1008FA0F0(0xD000000000000028, 0x800000010141C990, &v35);
    uint64_t v30 = a3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v17 + 12) = 2160;
    uint64_t v34 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v17 + 22) = 2081;
    uint64_t v28 = v12;
    sub_100FFD1F4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v34 = sub_1008FA0F0(v18, v19, &v35);
    a3 = v30;
    unint64_t v12 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v10, v5);
    _os_log_impl((void *)&_mh_execute_header, v13, (os_log_type_t)v26, "%{public}s %{private,mask.hash}s", (uint8_t *)v17, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    a1 = v29;
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v10, v5);
  }

  type metadata accessor for Transaction();
  uint64_t v20 = v31;
  v12(v31, a1, v5);
  unint64_t v21 = (*(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = v33;
  (*(void (**)(unint64_t, unsigned char *, uint64_t))(v6 + 32))(v22 + v21, v20, v5);
  uint64_t v23 = (void *)(v22 + ((v7 + v21 + 7) & 0xFFFFFFFFFFFFFFF8));
  *uint64_t v23 = v32;
  v23[1] = a3;
  swift_retain();
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  return swift_release();
}

uint64_t sub_100FF00B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a3;
  v4[3] = a4;
  uint64_t v6 = (void *)swift_task_alloc();
  v4[4] = v6;
  *uint64_t v6 = v4;
  v6[1] = sub_100FF0158;
  return sub_100FE5EB0(a2);
}

uint64_t sub_100FF0158()
{
  *(void *)(*(void *)v1 + 40) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100FFD544;
  }
  else {
    uint64_t v2 = sub_100FFD548;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100FF026C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v32 = a2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v31 = &v25[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  uint64_t v10 = &v25[-v9];
  if (qword_101637348 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_100010324(v11, (uint64_t)qword_101666080);
  unint64_t v12 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v6 + 16);
  v12(v10, a1, v5);
  unint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  int v15 = v14;
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v16 = swift_slowAlloc();
    uint64_t v29 = a1;
    uint64_t v17 = v16;
    uint64_t v27 = swift_slowAlloc();
    uint64_t v35 = v27;
    *(_DWORD *)uint64_t v17 = 136446723;
    int v26 = v15;
    uint64_t v34 = sub_1008FA0F0(0xD000000000000027, 0x800000010141C930, &v35);
    uint64_t v30 = a3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v17 + 12) = 2160;
    uint64_t v34 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v17 + 22) = 2081;
    uint64_t v28 = v12;
    sub_100FFD1F4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v34 = sub_1008FA0F0(v18, v19, &v35);
    a3 = v30;
    unint64_t v12 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v10, v5);
    _os_log_impl((void *)&_mh_execute_header, v13, (os_log_type_t)v26, "%{public}s %{private,mask.hash}s", (uint8_t *)v17, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    a1 = v29;
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v10, v5);
  }

  type metadata accessor for Transaction();
  uint64_t v20 = v31;
  v12(v31, a1, v5);
  unint64_t v21 = (*(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = v33;
  (*(void (**)(unint64_t, unsigned char *, uint64_t))(v6 + 32))(v22 + v21, v20, v5);
  uint64_t v23 = (void *)(v22 + ((v7 + v21 + 7) & 0xFFFFFFFFFFFFFFF8));
  *uint64_t v23 = v32;
  v23[1] = a3;
  swift_retain();
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  return swift_release();
}

uint64_t sub_100FF0684(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[2] = a3;
  v4[3] = a4;
  uint64_t v6 = (void *)swift_task_alloc();
  v4[4] = v6;
  *uint64_t v6 = v4;
  v6[1] = sub_100FF0724;
  return sub_100FD9DFC(a2);
}

uint64_t sub_100FF0724()
{
  *(void *)(*(void *)v1 + 40) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100FF0838;
  }
  else {
    uint64_t v2 = sub_100FEDACC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100FF0838()
{
  uint64_t v1 = v0[5];
  uint64_t v2 = (void (*)(uint64_t))v0[2];
  swift_errorRetain();
  v2(v1);
  swift_errorRelease();
  swift_errorRelease();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_100FF08C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v34 = a3;
  uint64_t v31 = *v3;
  uint64_t v32 = a2;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v30 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v27 - v9;
  if (qword_101637348 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_100010324(v11, (uint64_t)qword_101666080);
  unint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v12(v10, a1, v5);
  unint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    uint64_t v29 = a1;
    uint64_t v16 = v15;
    uint64_t v17 = swift_slowAlloc();
    v27[2] = v17;
    *(_DWORD *)uint64_t v16 = 141558275;
    uint64_t v35 = 1752392040;
    uint64_t v36 = v17;
    uint64_t v28 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 12) = 2081;
    v27[1] = v16 + 14;
    sub_100FFD1F4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v35 = sub_1008FA0F0(v18, v19, &v36);
    unint64_t v12 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Stop BT Finding for beacon %{private,mask.hash}s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    a1 = v29;
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v10, v5);
  }

  type metadata accessor for Transaction();
  uint64_t v20 = v30;
  v12(v30, a1, v5);
  unint64_t v21 = (*(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v22 = (v7 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = v33;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v23 + v21, v20, v5);
  unint64_t v24 = (void *)(v23 + v22);
  uint64_t v25 = v34;
  *unint64_t v24 = v32;
  v24[1] = v25;
  *(void *)(v23 + ((v22 + 23) & 0xFFFFFFFFFFFFFFF8)) = v31;
  swift_retain();
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  return swift_release();
}

uint64_t sub_100FF0CC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[22] = a3;
  v4[23] = a4;
  v4[20] = a1;
  v4[21] = a2;
  v4[24] = sub_10000588C((uint64_t *)&unk_10163B1D0);
  v4[25] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for LocalFindableAccessoryRecord();
  v4[26] = v5;
  v4[27] = *(void *)(v5 - 8);
  v4[28] = swift_task_alloc();
  v4[29] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for UUID();
  v4[30] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[31] = v7;
  v4[32] = *(void *)(v7 + 64);
  v4[33] = swift_task_alloc();
  v4[34] = swift_task_alloc();
  v4[35] = swift_task_alloc();
  return _swift_task_switch(sub_100FF0E4C, 0, 0);
}

uint64_t sub_100FF0E4C()
{
  uint64_t v1 = qword_1016375E8;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_101639150 + dword_101639150);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 288) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_100FF0F9C;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100FF0F9C(uint64_t a1)
{
  *(void *)(*(void *)v1 + 296) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100FF109C, 0, 0);
}

uint64_t sub_100FF109C()
{
  uint64_t v31 = v0;
  uint64_t v1 = v0[37];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 2));
  if (v1)
  {
    uint64_t v29 = v1;
    if (qword_101637348 != -1) {
      swift_once();
    }
    uint64_t v2 = v0[35];
    uint64_t v3 = v0[30];
    uint64_t v4 = v0[31];
    uint64_t v5 = v0[21];
    uint64_t v6 = type metadata accessor for Logger();
    v0[38] = sub_100010324(v6, (uint64_t)qword_101666080);
    uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
    v0[39] = v7;
    v0[40] = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v7(v2, v5, v3);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    BOOL v10 = os_log_type_enabled(v8, v9);
    uint64_t v11 = v0[35];
    uint64_t v13 = v0[30];
    uint64_t v12 = v0[31];
    if (v10)
    {
      uint64_t v14 = swift_slowAlloc();
      uint64_t v30 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 141558275;
      v0[18] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v14 + 12) = 2081;
      sub_100FFD1F4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[19] = sub_1008FA0F0(v15, v16, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
      v17(v11, v13);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Checking if we have LocalFindableRecord for beacon: %{private,mask.hash}s", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
      v17(v0[35], v0[30]);
    }

    v0[41] = v17;
    uint64_t v21 = v0[34];
    uint64_t v22 = v0[31];
    uint64_t v23 = v0[30];
    v7(v21, v0[21], v23);
    unint64_t v24 = (*(unsigned __int8 *)(v22 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
    uint64_t v25 = swift_allocObject();
    v0[42] = v25;
    *(void *)(v25 + 16) = v29;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v22 + 32))(v25 + v24, v21, v23);
    swift_retain();
    int v26 = (void *)swift_task_alloc();
    v0[43] = v26;
    *int v26 = v0;
    v26[1] = sub_100FF14A8;
    uint64_t v28 = v0[24];
    uint64_t v27 = v0[25];
    return withTimeout<A>(_:block:)(v27, 0x8AC7230489E80000, 0, &unk_101666650, v25, v28);
  }
  else
  {
    uint64_t v18 = (void *)swift_task_alloc();
    v0[46] = v18;
    *uint64_t v18 = v0;
    v18[1] = sub_100FF1A7C;
    uint64_t v19 = v0[21];
    return sub_100FDF62C(v19);
  }
}

uint64_t sub_100FF14A8()
{
  *(void *)(*(void *)v1 + 352) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100FF1EA8;
  }
  else
  {
    swift_release();
    uint64_t v2 = sub_100FF15C4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100FF15C4()
{
  uint64_t v17 = v0;
  uint64_t v1 = v0[25];
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(v0[27] + 48))(v1, 1, v0[26]) == 1)
  {
    swift_release();
    sub_10001DAB4(v1, (uint64_t *)&unk_10163B1D0);
    uint64_t v2 = (void *)swift_task_alloc();
    v0[46] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100FF1A7C;
    uint64_t v3 = v0[21];
    return sub_100FDF62C(v3);
  }
  else
  {
    uint64_t v6 = v0[28];
    uint64_t v5 = v0[29];
    sub_100FFC714(v1, v5, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    sub_100FFC7DC(v5, v6, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    BOOL v9 = os_log_type_enabled(v7, v8);
    uint64_t v10 = v0[28];
    if (v9)
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 136315138;
      uint64_t v12 = sub_1000C8E00();
      v0[17] = sub_1008FA0F0(v12, v13, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100FFC77C(v10, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Found LocalFindableRecord: %s", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100FFC77C(v0[28], (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
    }

    uint64_t v14 = (void *)swift_task_alloc();
    v0[45] = v14;
    *uint64_t v14 = v0;
    v14[1] = sub_100FF18A0;
    uint64_t v15 = v0[21];
    return sub_100FE7400(v15);
  }
}

uint64_t sub_100FF18A0()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100FF199C, 0, 0);
}

uint64_t sub_100FF199C()
{
  uint64_t v1 = *(void *)(v0 + 232);
  (*(void (**)(void))(v0 + 176))(0);
  swift_release();
  sub_100FFC77C(v1, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100FF1A7C()
{
  *(void *)(*(void *)v1 + 376) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100FF216C;
  }
  else {
    uint64_t v2 = sub_100FF1B90;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100FF1B90()
{
  if (qword_101637348 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_101666080);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Successfully stopped aggressive advertising.", v4, 2u);
    swift_slowDealloc();
  }

  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 384) = v5;
  void *v5 = v0;
  v5[1] = sub_100FF1CE0;
  uint64_t v6 = *(void *)(v0 + 168);
  return sub_100FD8710(v6);
}

uint64_t sub_100FF1CE0()
{
  *(void *)(*(void *)v1 + 392) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100FF223C;
  }
  else {
    uint64_t v2 = sub_100FF1DF4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100FF1DF4()
{
  (*(void (**)(void))(v0 + 176))(0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100FF1EA8()
{
  uint64_t v21 = v0;
  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[39];
  uint64_t v2 = v0[33];
  uint64_t v3 = v0[30];
  uint64_t v4 = v0[21];
  swift_release();
  v1(v2, v4, v3);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v19 = (void (*)(uint64_t, uint64_t))v0[41];
    uint64_t v7 = v0[33];
    uint64_t v8 = v0[30];
    uint64_t v9 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    v0[15] = 1752392040;
    uint64_t v20 = v10;
    *(_DWORD *)uint64_t v9 = 141558275;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v9 + 12) = 2081;
    sub_100FFD1F4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[16] = sub_1008FA0F0(v11, v12, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v19(v7, v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Timed out looking up LocalFindableRecord for beacon: %{private,mask.hash}s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_errorRelease();
    swift_release();
  }
  else
  {
    unint64_t v13 = (void (*)(uint64_t, uint64_t))v0[41];
    uint64_t v14 = v0[33];
    uint64_t v15 = v0[30];
    swift_release();
    swift_errorRelease();
    v13(v14, v15);
  }

  uint64_t v16 = (void *)swift_task_alloc();
  v0[46] = v16;
  *uint64_t v16 = v0;
  v16[1] = sub_100FF1A7C;
  uint64_t v17 = v0[21];
  return sub_100FDF62C(v17);
}

uint64_t sub_100FF216C()
{
  uint64_t v1 = v0[47];
  uint64_t v2 = (void (*)(uint64_t))v0[22];
  swift_errorRetain();
  v2(v1);
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_100FF223C()
{
  uint64_t v1 = v0[49];
  uint64_t v2 = (void (*)(uint64_t))v0[22];
  swift_errorRetain();
  v2(v1);
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_100FF230C(void *a1, uint64_t a2)
{
  id v4 = [a1 invalidationHandler];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    uint64_t v7 = sub_100FFD540;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  swift_beginAccess();
  id v8 = a1;
  uint64_t v9 = swift_bridgeObjectRetain();
  uint64_t v10 = sub_100FFA4DC(v9, (uint64_t)v8, (uint64_t *)&unk_10165F1F0, (unint64_t *)&unk_101666860);
  swift_bridgeObjectRelease();

  if (v10)
  {
    if (qword_101637490 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_100010324(v11, (uint64_t)qword_10170F2E0);
    id v12 = v8;
    swift_retain_n();
    id v13 = v12;
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v14, v15))
    {
      os_log_type_t type = v15;
      uint64_t v16 = swift_slowAlloc();
      uint64_t v53 = (void *)swift_slowAlloc();
      uint64_t v66 = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136446466;
      uint64_t v65 = a2;
      sub_10000588C(&qword_10165F650);
      uint64_t v57 = (uint64_t)v7;
      sub_100062734(&qword_10165F658, &qword_10165F650);
      v17._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
      String.append(_:)(v17);
      swift_bridgeObjectRelease();
      v18._countAndFlagsBits = 8250;
      v18._object = (void *)0xE200000000000000;
      String.append(_:)(v18);
      v19._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
      v20._countAndFlagsBits = 62;
      v20._object = (void *)0xE100000000000000;
      String.append(_:)(v20);
      swift_release();
      sub_1008FA0F0(60, 0xE100000000000000, &v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v16 + 12) = 2112;
      uint64_t aBlock = (uint64_t)v13;
      id v21 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v53 = v13;

      _os_log_impl((void *)&_mh_execute_header, v14, type, "%{public}s: Already have a session for %@", (uint8_t *)v16, 0x16u);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_1000A1534(v57);
    }
    else
    {

      swift_release_n();
      sub_1000A1534((uint64_t)v7);
    }
  }
  else
  {
    sub_10000588C((uint64_t *)&unk_10165F1F0);
    swift_allocObject();
    id v22 = v8;
    uint64_t v23 = XPCSession.init(connection:)();
    if (v23)
    {
      uint64_t v24 = v23;
      uint64_t v25 = swift_allocObject();
      swift_weakInit();
      int v26 = (void *)swift_allocObject();
      v26[2] = v25;
      uint64_t v26[3] = v22;
      v26[4] = v7;
      v26[5] = v6;
      uint64_t v63 = sub_100FFD174;
      uint64_t v64 = v26;
      uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
      unint64_t v60 = 1107296256;
      uint64_t v61 = sub_1004B5480;
      uint64_t v62 = &unk_101600FA0;
      uint64_t v27 = _Block_copy(&aBlock);
      id v28 = v22;
      sub_1000BD0E8((uint64_t)v7);
      swift_release();
      [v28 setInvalidationHandler:v27];
      _Block_release(v27);
      uint64_t v29 = *(void *)(a2 + 32);
      if ((v29 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        uint64_t v30 = __CocoaSet.count.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v30 = *(void *)(v29 + 16);
      }
      swift_beginAccess();
      swift_retain();
      uint64_t v58 = v24;
      sub_100DC8FDC(&v66, v24);
      swift_endAccess();
      swift_release();
      if (qword_101637490 != -1) {
        swift_once();
      }
      uint64_t v42 = type metadata accessor for Logger();
      sub_100010324(v42, (uint64_t)qword_10170F2E0);
      swift_retain_n();
      uint64_t v43 = Logger.logObject.getter();
      os_log_type_t v44 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v43, v44))
      {
        uint64_t v45 = swift_slowAlloc();
        uint64_t v66 = swift_slowAlloc();
        *(_DWORD *)uint64_t v45 = 136446722;
        uint64_t aBlock = 60;
        unint64_t v60 = 0xE100000000000000;
        uint64_t v65 = a2;
        sub_10000588C(&qword_10165F650);
        sub_100062734(&qword_10165F658, &qword_10165F650);
        v46._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
        String.append(_:)(v46);
        swift_bridgeObjectRelease();
        v47._countAndFlagsBits = 8250;
        v47._object = (void *)0xE200000000000000;
        String.append(_:)(v47);
        v48._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
        String.append(_:)(v48);
        swift_bridgeObjectRelease();
        v49._countAndFlagsBits = 62;
        v49._object = (void *)0xE100000000000000;
        String.append(_:)(v49);
        uint64_t aBlock = sub_1008FA0F0(aBlock, v60, &v66);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        *(_WORD *)(v45 + 12) = 2048;
        uint64_t aBlock = v30;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v45 + 22) = 2048;
        uint64_t v50 = *(void *)(a2 + 32);
        if ((v50 & 0xC000000000000001) != 0)
        {
          swift_bridgeObjectRetain();
          uint64_t v51 = __CocoaSet.count.getter();
          swift_release();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v51 = *(void *)(v50 + 16);
          swift_release();
        }
        uint64_t aBlock = v51;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v43, v44, "%{public}s: Session count: %ld -> %ld", (uint8_t *)v45, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
      }
      uint64_t v10 = v58;
      if ((*(void *)(a2 + 32) & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        __CocoaSet.count.getter();
      }
      else
      {
        swift_bridgeObjectRetain();
      }
      sub_1000A1534((uint64_t)v7);
      swift_bridgeObjectRelease();
    }
    else
    {
      if (qword_101637490 != -1) {
        swift_once();
      }
      uint64_t v31 = type metadata accessor for Logger();
      sub_100010324(v31, (uint64_t)qword_10170F2E0);
      id v32 = v22;
      swift_retain_n();
      id v33 = v32;
      uint64_t v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v34, v35))
      {
        log = v34;
        uint64_t v36 = swift_slowAlloc();
        uint64_t v55 = (void *)swift_slowAlloc();
        uint64_t v66 = swift_slowAlloc();
        *(_DWORD *)uint64_t v36 = 136446466;
        uint64_t v65 = a2;
        sub_10000588C(&qword_10165F650);
        sub_100062734(&qword_10165F658, &qword_10165F650);
        v37._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
        String.append(_:)(v37);
        swift_bridgeObjectRelease();
        v38._countAndFlagsBits = 8250;
        v38._object = (void *)0xE200000000000000;
        String.append(_:)(v38);
        v39._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
        String.append(_:)(v39);
        swift_bridgeObjectRelease();
        v40._countAndFlagsBits = 62;
        v40._object = (void *)0xE100000000000000;
        String.append(_:)(v40);
        swift_release();
        sub_1008FA0F0(60, 0xE100000000000000, &v66);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        *(_WORD *)(v36 + 12) = 2112;
        uint64_t aBlock = (uint64_t)v33;
        id v41 = v33;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v55 = v33;

        _os_log_impl((void *)&_mh_execute_header, log, v35, "%{public}s: Failed to make XPCSession from %@", (uint8_t *)v36, 0x16u);
        sub_10000588C((uint64_t *)&unk_101638EA0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        sub_1000A1534((uint64_t)v7);
      }
      else
      {
        swift_release();
        sub_1000A1534((uint64_t)v7);

        swift_release();
      }
      return 0;
    }
  }
  return v10;
}

uint64_t sub_100FF2EA8(void *a1, uint64_t a2)
{
  id v4 = [a1 invalidationHandler];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    uint64_t v7 = sub_100FFD540;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  swift_beginAccess();
  id v8 = a1;
  uint64_t v9 = swift_bridgeObjectRetain();
  uint64_t v10 = sub_100FFA4DC(v9, (uint64_t)v8, (uint64_t *)&unk_10163B860, &qword_10165F6F0);
  swift_bridgeObjectRelease();

  if (v10)
  {
    if (qword_101637490 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_100010324(v11, (uint64_t)qword_10170F2E0);
    id v12 = v8;
    swift_retain_n();
    id v13 = v12;
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v14, v15))
    {
      os_log_type_t type = v15;
      uint64_t v16 = swift_slowAlloc();
      uint64_t v53 = (void *)swift_slowAlloc();
      uint64_t v66 = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136446466;
      uint64_t v65 = a2;
      sub_10000588C((uint64_t *)&unk_1016668C0);
      uint64_t v57 = (uint64_t)v7;
      sub_100062734((unint64_t *)&unk_10165F6E0, (uint64_t *)&unk_1016668C0);
      v17._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
      String.append(_:)(v17);
      swift_bridgeObjectRelease();
      v18._countAndFlagsBits = 8250;
      v18._object = (void *)0xE200000000000000;
      String.append(_:)(v18);
      v19._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
      v20._countAndFlagsBits = 62;
      v20._object = (void *)0xE100000000000000;
      String.append(_:)(v20);
      swift_release();
      sub_1008FA0F0(60, 0xE100000000000000, &v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v16 + 12) = 2112;
      uint64_t aBlock = (uint64_t)v13;
      id v21 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v53 = v13;

      _os_log_impl((void *)&_mh_execute_header, v14, type, "%{public}s: Already have a session for %@", (uint8_t *)v16, 0x16u);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_1000A1534(v57);
    }
    else
    {

      swift_release_n();
      sub_1000A1534((uint64_t)v7);
    }
  }
  else
  {
    sub_10000588C((uint64_t *)&unk_10163B860);
    swift_allocObject();
    id v22 = v8;
    uint64_t v23 = XPCSession.init(connection:)();
    if (v23)
    {
      uint64_t v24 = v23;
      uint64_t v25 = swift_allocObject();
      swift_weakInit();
      int v26 = (void *)swift_allocObject();
      v26[2] = v25;
      uint64_t v26[3] = v22;
      v26[4] = v7;
      v26[5] = v6;
      uint64_t v63 = sub_100FFD38C;
      uint64_t v64 = v26;
      uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
      unint64_t v60 = 1107296256;
      uint64_t v61 = sub_1004B5480;
      uint64_t v62 = &unk_1016011D0;
      uint64_t v27 = _Block_copy(&aBlock);
      id v28 = v22;
      sub_1000BD0E8((uint64_t)v7);
      swift_release();
      [v28 setInvalidationHandler:v27];
      _Block_release(v27);
      uint64_t v29 = *(void *)(a2 + 32);
      if ((v29 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        uint64_t v30 = __CocoaSet.count.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v30 = *(void *)(v29 + 16);
      }
      swift_beginAccess();
      swift_retain();
      uint64_t v58 = v24;
      sub_100DCB87C(&v66, v24);
      swift_endAccess();
      swift_release();
      if (qword_101637490 != -1) {
        swift_once();
      }
      uint64_t v42 = type metadata accessor for Logger();
      sub_100010324(v42, (uint64_t)qword_10170F2E0);
      swift_retain_n();
      uint64_t v43 = Logger.logObject.getter();
      os_log_type_t v44 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v43, v44))
      {
        uint64_t v45 = swift_slowAlloc();
        uint64_t v66 = swift_slowAlloc();
        *(_DWORD *)uint64_t v45 = 136446722;
        uint64_t aBlock = 60;
        unint64_t v60 = 0xE100000000000000;
        uint64_t v65 = a2;
        sub_10000588C((uint64_t *)&unk_1016668C0);
        sub_100062734((unint64_t *)&unk_10165F6E0, (uint64_t *)&unk_1016668C0);
        v46._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
        String.append(_:)(v46);
        swift_bridgeObjectRelease();
        v47._countAndFlagsBits = 8250;
        v47._object = (void *)0xE200000000000000;
        String.append(_:)(v47);
        v48._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
        String.append(_:)(v48);
        swift_bridgeObjectRelease();
        v49._countAndFlagsBits = 62;
        v49._object = (void *)0xE100000000000000;
        String.append(_:)(v49);
        uint64_t aBlock = sub_1008FA0F0(aBlock, v60, &v66);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        *(_WORD *)(v45 + 12) = 2048;
        uint64_t aBlock = v30;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v45 + 22) = 2048;
        uint64_t v50 = *(void *)(a2 + 32);
        if ((v50 & 0xC000000000000001) != 0)
        {
          swift_bridgeObjectRetain();
          uint64_t v51 = __CocoaSet.count.getter();
          swift_release();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v51 = *(void *)(v50 + 16);
          swift_release();
        }
        uint64_t aBlock = v51;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v43, v44, "%{public}s: Session count: %ld -> %ld", (uint8_t *)v45, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
      }
      uint64_t v10 = v58;
      if ((*(void *)(a2 + 32) & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        __CocoaSet.count.getter();
      }
      else
      {
        swift_bridgeObjectRetain();
      }
      sub_1000A1534((uint64_t)v7);
      swift_bridgeObjectRelease();
    }
    else
    {
      if (qword_101637490 != -1) {
        swift_once();
      }
      uint64_t v31 = type metadata accessor for Logger();
      sub_100010324(v31, (uint64_t)qword_10170F2E0);
      id v32 = v22;
      swift_retain_n();
      id v33 = v32;
      uint64_t v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v34, v35))
      {
        log = v34;
        uint64_t v36 = swift_slowAlloc();
        uint64_t v55 = (void *)swift_slowAlloc();
        uint64_t v66 = swift_slowAlloc();
        *(_DWORD *)uint64_t v36 = 136446466;
        uint64_t v65 = a2;
        sub_10000588C((uint64_t *)&unk_1016668C0);
        sub_100062734((unint64_t *)&unk_10165F6E0, (uint64_t *)&unk_1016668C0);
        v37._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
        String.append(_:)(v37);
        swift_bridgeObjectRelease();
        v38._countAndFlagsBits = 8250;
        v38._object = (void *)0xE200000000000000;
        String.append(_:)(v38);
        v39._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
        String.append(_:)(v39);
        swift_bridgeObjectRelease();
        v40._countAndFlagsBits = 62;
        v40._object = (void *)0xE100000000000000;
        String.append(_:)(v40);
        swift_release();
        sub_1008FA0F0(60, 0xE100000000000000, &v66);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        *(_WORD *)(v36 + 12) = 2112;
        uint64_t aBlock = (uint64_t)v33;
        id v41 = v33;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v55 = v33;

        _os_log_impl((void *)&_mh_execute_header, log, v35, "%{public}s: Failed to make XPCSession from %@", (uint8_t *)v36, 0x16u);
        sub_10000588C((uint64_t *)&unk_101638EA0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        sub_1000A1534((uint64_t)v7);
      }
      else
      {
        swift_release();
        sub_1000A1534((uint64_t)v7);

        swift_release();
      }
      return 0;
    }
  }
  return v10;
}

uint64_t sub_100FF3A44(void *a1, uint64_t a2)
{
  id v4 = [a1 invalidationHandler];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    uint64_t v7 = sub_100FFD540;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  swift_beginAccess();
  id v8 = a1;
  uint64_t v9 = swift_bridgeObjectRetain();
  uint64_t v10 = sub_100FFA4DC(v9, (uint64_t)v8, (uint64_t *)&unk_10165F190, (unint64_t *)&unk_101666830);
  swift_bridgeObjectRelease();

  if (v10)
  {
    if (qword_101637490 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_100010324(v11, (uint64_t)qword_10170F2E0);
    id v12 = v8;
    swift_retain_n();
    id v13 = v12;
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v14, v15))
    {
      os_log_type_t type = v15;
      uint64_t v16 = swift_slowAlloc();
      uint64_t v53 = (void *)swift_slowAlloc();
      uint64_t v66 = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136446466;
      uint64_t v65 = a2;
      sub_10000588C(&qword_10165F630);
      uint64_t v57 = (uint64_t)v7;
      sub_100062734(&qword_10165F638, &qword_10165F630);
      v17._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
      String.append(_:)(v17);
      swift_bridgeObjectRelease();
      v18._countAndFlagsBits = 8250;
      v18._object = (void *)0xE200000000000000;
      String.append(_:)(v18);
      v19._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
      v20._countAndFlagsBits = 62;
      v20._object = (void *)0xE100000000000000;
      String.append(_:)(v20);
      swift_release();
      sub_1008FA0F0(60, 0xE100000000000000, &v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v16 + 12) = 2112;
      uint64_t aBlock = (uint64_t)v13;
      id v21 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v53 = v13;

      _os_log_impl((void *)&_mh_execute_header, v14, type, "%{public}s: Already have a session for %@", (uint8_t *)v16, 0x16u);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_1000A1534(v57);
    }
    else
    {

      swift_release_n();
      sub_1000A1534((uint64_t)v7);
    }
  }
  else
  {
    sub_10000588C((uint64_t *)&unk_10165F190);
    swift_allocObject();
    id v22 = v8;
    uint64_t v23 = XPCSession.init(connection:)();
    if (v23)
    {
      uint64_t v24 = v23;
      uint64_t v25 = swift_allocObject();
      swift_weakInit();
      int v26 = (void *)swift_allocObject();
      v26[2] = v25;
      uint64_t v26[3] = v22;
      v26[4] = v7;
      v26[5] = v6;
      uint64_t v63 = sub_100FFD0CC;
      uint64_t v64 = v26;
      uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
      unint64_t v60 = 1107296256;
      uint64_t v61 = sub_1004B5480;
      uint64_t v62 = &unk_101600D70;
      uint64_t v27 = _Block_copy(&aBlock);
      id v28 = v22;
      sub_1000BD0E8((uint64_t)v7);
      swift_release();
      [v28 setInvalidationHandler:v27];
      _Block_release(v27);
      uint64_t v29 = *(void *)(a2 + 32);
      if ((v29 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        uint64_t v30 = __CocoaSet.count.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v30 = *(void *)(v29 + 16);
      }
      swift_beginAccess();
      swift_retain();
      uint64_t v58 = v24;
      sub_100DD0918(&v66, v24);
      swift_endAccess();
      swift_release();
      if (qword_101637490 != -1) {
        swift_once();
      }
      uint64_t v42 = type metadata accessor for Logger();
      sub_100010324(v42, (uint64_t)qword_10170F2E0);
      swift_retain_n();
      uint64_t v43 = Logger.logObject.getter();
      os_log_type_t v44 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v43, v44))
      {
        uint64_t v45 = swift_slowAlloc();
        uint64_t v66 = swift_slowAlloc();
        *(_DWORD *)uint64_t v45 = 136446722;
        uint64_t aBlock = 60;
        unint64_t v60 = 0xE100000000000000;
        uint64_t v65 = a2;
        sub_10000588C(&qword_10165F630);
        sub_100062734(&qword_10165F638, &qword_10165F630);
        v46._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
        String.append(_:)(v46);
        swift_bridgeObjectRelease();
        v47._countAndFlagsBits = 8250;
        v47._object = (void *)0xE200000000000000;
        String.append(_:)(v47);
        v48._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
        String.append(_:)(v48);
        swift_bridgeObjectRelease();
        v49._countAndFlagsBits = 62;
        v49._object = (void *)0xE100000000000000;
        String.append(_:)(v49);
        uint64_t aBlock = sub_1008FA0F0(aBlock, v60, &v66);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        *(_WORD *)(v45 + 12) = 2048;
        uint64_t aBlock = v30;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v45 + 22) = 2048;
        uint64_t v50 = *(void *)(a2 + 32);
        if ((v50 & 0xC000000000000001) != 0)
        {
          swift_bridgeObjectRetain();
          uint64_t v51 = __CocoaSet.count.getter();
          swift_release();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v51 = *(void *)(v50 + 16);
          swift_release();
        }
        uint64_t aBlock = v51;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v43, v44, "%{public}s: Session count: %ld -> %ld", (uint8_t *)v45, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
      }
      uint64_t v10 = v58;
      if ((*(void *)(a2 + 32) & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        __CocoaSet.count.getter();
      }
      else
      {
        swift_bridgeObjectRetain();
      }
      sub_1000A1534((uint64_t)v7);
      swift_bridgeObjectRelease();
    }
    else
    {
      if (qword_101637490 != -1) {
        swift_once();
      }
      uint64_t v31 = type metadata accessor for Logger();
      sub_100010324(v31, (uint64_t)qword_10170F2E0);
      id v32 = v22;
      swift_retain_n();
      id v33 = v32;
      uint64_t v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v34, v35))
      {
        log = v34;
        uint64_t v36 = swift_slowAlloc();
        uint64_t v55 = (void *)swift_slowAlloc();
        uint64_t v66 = swift_slowAlloc();
        *(_DWORD *)uint64_t v36 = 136446466;
        uint64_t v65 = a2;
        sub_10000588C(&qword_10165F630);
        sub_100062734(&qword_10165F638, &qword_10165F630);
        v37._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
        String.append(_:)(v37);
        swift_bridgeObjectRelease();
        v38._countAndFlagsBits = 8250;
        v38._object = (void *)0xE200000000000000;
        String.append(_:)(v38);
        v39._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
        String.append(_:)(v39);
        swift_bridgeObjectRelease();
        v40._countAndFlagsBits = 62;
        v40._object = (void *)0xE100000000000000;
        String.append(_:)(v40);
        swift_release();
        sub_1008FA0F0(60, 0xE100000000000000, &v66);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        *(_WORD *)(v36 + 12) = 2112;
        uint64_t aBlock = (uint64_t)v33;
        id v41 = v33;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v55 = v33;

        _os_log_impl((void *)&_mh_execute_header, log, v35, "%{public}s: Failed to make XPCSession from %@", (uint8_t *)v36, 0x16u);
        sub_10000588C((uint64_t *)&unk_101638EA0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        sub_1000A1534((uint64_t)v7);
      }
      else
      {
        swift_release();
        sub_1000A1534((uint64_t)v7);

        swift_release();
      }
      return 0;
    }
  }
  return v10;
}

uint64_t sub_100FF45E0(void *a1, uint64_t a2)
{
  id v4 = [a1 invalidationHandler];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    uint64_t v7 = sub_100FFD540;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  swift_beginAccess();
  id v8 = a1;
  uint64_t v9 = swift_bridgeObjectRetain();
  uint64_t v10 = sub_100FFA4DC(v9, (uint64_t)v8, (uint64_t *)&unk_10165F610, &qword_10165F0F0);
  swift_bridgeObjectRelease();

  if (v10)
  {
    if (qword_101637490 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_100010324(v11, (uint64_t)qword_10170F2E0);
    id v12 = v8;
    swift_retain_n();
    id v13 = v12;
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v14, v15))
    {
      os_log_type_t type = v15;
      uint64_t v16 = swift_slowAlloc();
      uint64_t v53 = (void *)swift_slowAlloc();
      uint64_t v66 = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136446466;
      uint64_t v65 = a2;
      sub_10000588C((uint64_t *)&unk_10165F600);
      uint64_t v57 = (uint64_t)v7;
      sub_100062734((unint64_t *)&unk_101653E10, (uint64_t *)&unk_10165F600);
      v17._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
      String.append(_:)(v17);
      swift_bridgeObjectRelease();
      v18._countAndFlagsBits = 8250;
      v18._object = (void *)0xE200000000000000;
      String.append(_:)(v18);
      v19._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
      v20._countAndFlagsBits = 62;
      v20._object = (void *)0xE100000000000000;
      String.append(_:)(v20);
      swift_release();
      sub_1008FA0F0(60, 0xE100000000000000, &v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v16 + 12) = 2112;
      uint64_t aBlock = (uint64_t)v13;
      id v21 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v53 = v13;

      _os_log_impl((void *)&_mh_execute_header, v14, type, "%{public}s: Already have a session for %@", (uint8_t *)v16, 0x16u);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_1000A1534(v57);
    }
    else
    {

      swift_release_n();
      sub_1000A1534((uint64_t)v7);
    }
  }
  else
  {
    sub_10000588C((uint64_t *)&unk_10165F610);
    swift_allocObject();
    id v22 = v8;
    uint64_t v23 = XPCSession.init(connection:)();
    if (v23)
    {
      uint64_t v24 = v23;
      uint64_t v25 = swift_allocObject();
      swift_weakInit();
      int v26 = (void *)swift_allocObject();
      v26[2] = v25;
      uint64_t v26[3] = v22;
      v26[4] = v7;
      v26[5] = v6;
      uint64_t v63 = sub_100FFD024;
      uint64_t v64 = v26;
      uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
      unint64_t v60 = 1107296256;
      uint64_t v61 = sub_1004B5480;
      uint64_t v62 = &unk_101600B40;
      uint64_t v27 = _Block_copy(&aBlock);
      id v28 = v22;
      sub_1000BD0E8((uint64_t)v7);
      swift_release();
      [v28 setInvalidationHandler:v27];
      _Block_release(v27);
      uint64_t v29 = *(void *)(a2 + 32);
      if ((v29 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        uint64_t v30 = __CocoaSet.count.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v30 = *(void *)(v29 + 16);
      }
      swift_beginAccess();
      swift_retain();
      uint64_t v58 = v24;
      sub_100DD2DCC(&v66, v24);
      swift_endAccess();
      swift_release();
      if (qword_101637490 != -1) {
        swift_once();
      }
      uint64_t v42 = type metadata accessor for Logger();
      sub_100010324(v42, (uint64_t)qword_10170F2E0);
      swift_retain_n();
      uint64_t v43 = Logger.logObject.getter();
      os_log_type_t v44 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v43, v44))
      {
        uint64_t v45 = swift_slowAlloc();
        uint64_t v66 = swift_slowAlloc();
        *(_DWORD *)uint64_t v45 = 136446722;
        uint64_t aBlock = 60;
        unint64_t v60 = 0xE100000000000000;
        uint64_t v65 = a2;
        sub_10000588C((uint64_t *)&unk_10165F600);
        sub_100062734((unint64_t *)&unk_101653E10, (uint64_t *)&unk_10165F600);
        v46._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
        String.append(_:)(v46);
        swift_bridgeObjectRelease();
        v47._countAndFlagsBits = 8250;
        v47._object = (void *)0xE200000000000000;
        String.append(_:)(v47);
        v48._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
        String.append(_:)(v48);
        swift_bridgeObjectRelease();
        v49._countAndFlagsBits = 62;
        v49._object = (void *)0xE100000000000000;
        String.append(_:)(v49);
        uint64_t aBlock = sub_1008FA0F0(aBlock, v60, &v66);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        *(_WORD *)(v45 + 12) = 2048;
        uint64_t aBlock = v30;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v45 + 22) = 2048;
        uint64_t v50 = *(void *)(a2 + 32);
        if ((v50 & 0xC000000000000001) != 0)
        {
          swift_bridgeObjectRetain();
          uint64_t v51 = __CocoaSet.count.getter();
          swift_release();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v51 = *(void *)(v50 + 16);
          swift_release();
        }
        uint64_t aBlock = v51;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v43, v44, "%{public}s: Session count: %ld -> %ld", (uint8_t *)v45, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
      }
      uint64_t v10 = v58;
      if ((*(void *)(a2 + 32) & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        __CocoaSet.count.getter();
      }
      else
      {
        swift_bridgeObjectRetain();
      }
      sub_1000A1534((uint64_t)v7);
      swift_bridgeObjectRelease();
    }
    else
    {
      if (qword_101637490 != -1) {
        swift_once();
      }
      uint64_t v31 = type metadata accessor for Logger();
      sub_100010324(v31, (uint64_t)qword_10170F2E0);
      id v32 = v22;
      swift_retain_n();
      id v33 = v32;
      uint64_t v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v34, v35))
      {
        log = v34;
        uint64_t v36 = swift_slowAlloc();
        uint64_t v55 = (void *)swift_slowAlloc();
        uint64_t v66 = swift_slowAlloc();
        *(_DWORD *)uint64_t v36 = 136446466;
        uint64_t v65 = a2;
        sub_10000588C((uint64_t *)&unk_10165F600);
        sub_100062734((unint64_t *)&unk_101653E10, (uint64_t *)&unk_10165F600);
        v37._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
        String.append(_:)(v37);
        swift_bridgeObjectRelease();
        v38._countAndFlagsBits = 8250;
        v38._object = (void *)0xE200000000000000;
        String.append(_:)(v38);
        v39._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
        String.append(_:)(v39);
        swift_bridgeObjectRelease();
        v40._countAndFlagsBits = 62;
        v40._object = (void *)0xE100000000000000;
        String.append(_:)(v40);
        swift_release();
        sub_1008FA0F0(60, 0xE100000000000000, &v66);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        *(_WORD *)(v36 + 12) = 2112;
        uint64_t aBlock = (uint64_t)v33;
        id v41 = v33;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v55 = v33;

        _os_log_impl((void *)&_mh_execute_header, log, v35, "%{public}s: Failed to make XPCSession from %@", (uint8_t *)v36, 0x16u);
        sub_10000588C((uint64_t *)&unk_101638EA0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        sub_1000A1534((uint64_t)v7);
      }
      else
      {
        swift_release();
        sub_1000A1534((uint64_t)v7);

        swift_release();
      }
      return 0;
    }
  }
  return v10;
}

uint64_t sub_100FF517C(void *a1, uint64_t a2)
{
  id v4 = [a1 invalidationHandler];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    uint64_t v7 = sub_100FFD540;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  swift_beginAccess();
  id v8 = a1;
  uint64_t v9 = swift_bridgeObjectRetain();
  uint64_t v10 = sub_100FFA4DC(v9, (uint64_t)v8, (uint64_t *)&unk_10163F360, (unint64_t *)&unk_10165F1D0);
  swift_bridgeObjectRelease();

  if (v10)
  {
    if (qword_101637490 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_100010324(v11, (uint64_t)qword_10170F2E0);
    id v12 = v8;
    swift_retain_n();
    id v13 = v12;
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v14, v15))
    {
      os_log_type_t type = v15;
      uint64_t v16 = swift_slowAlloc();
      uint64_t v53 = (void *)swift_slowAlloc();
      uint64_t v66 = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136446466;
      uint64_t v65 = a2;
      sub_10000588C((uint64_t *)&unk_10165F640);
      uint64_t v57 = (uint64_t)v7;
      sub_100062734(&qword_101666840, (uint64_t *)&unk_10165F640);
      v17._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
      String.append(_:)(v17);
      swift_bridgeObjectRelease();
      v18._countAndFlagsBits = 8250;
      v18._object = (void *)0xE200000000000000;
      String.append(_:)(v18);
      v19._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
      v20._countAndFlagsBits = 62;
      v20._object = (void *)0xE100000000000000;
      String.append(_:)(v20);
      swift_release();
      sub_1008FA0F0(60, 0xE100000000000000, &v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v16 + 12) = 2112;
      uint64_t aBlock = (uint64_t)v13;
      id v21 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v53 = v13;

      _os_log_impl((void *)&_mh_execute_header, v14, type, "%{public}s: Already have a session for %@", (uint8_t *)v16, 0x16u);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_1000A1534(v57);
    }
    else
    {

      swift_release_n();
      sub_1000A1534((uint64_t)v7);
    }
  }
  else
  {
    sub_10000588C((uint64_t *)&unk_10163F360);
    swift_allocObject();
    id v22 = v8;
    uint64_t v23 = XPCSession.init(connection:)();
    if (v23)
    {
      uint64_t v24 = v23;
      uint64_t v25 = swift_allocObject();
      swift_weakInit();
      int v26 = (void *)swift_allocObject();
      v26[2] = v25;
      uint64_t v26[3] = v22;
      v26[4] = v7;
      v26[5] = v6;
      uint64_t v63 = sub_100FFD124;
      uint64_t v64 = v26;
      uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
      unint64_t v60 = 1107296256;
      uint64_t v61 = sub_1004B5480;
      uint64_t v62 = &unk_101600E88;
      uint64_t v27 = _Block_copy(&aBlock);
      id v28 = v22;
      sub_1000BD0E8((uint64_t)v7);
      swift_release();
      [v28 setInvalidationHandler:v27];
      _Block_release(v27);
      uint64_t v29 = *(void *)(a2 + 32);
      if ((v29 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        uint64_t v30 = __CocoaSet.count.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v30 = *(void *)(v29 + 16);
      }
      swift_beginAccess();
      swift_retain();
      uint64_t v58 = v24;
      sub_100DD34AC(&v66, v24);
      swift_endAccess();
      swift_release();
      if (qword_101637490 != -1) {
        swift_once();
      }
      uint64_t v42 = type metadata accessor for Logger();
      sub_100010324(v42, (uint64_t)qword_10170F2E0);
      swift_retain_n();
      uint64_t v43 = Logger.logObject.getter();
      os_log_type_t v44 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v43, v44))
      {
        uint64_t v45 = swift_slowAlloc();
        uint64_t v66 = swift_slowAlloc();
        *(_DWORD *)uint64_t v45 = 136446722;
        uint64_t aBlock = 60;
        unint64_t v60 = 0xE100000000000000;
        uint64_t v65 = a2;
        sub_10000588C((uint64_t *)&unk_10165F640);
        sub_100062734(&qword_101666840, (uint64_t *)&unk_10165F640);
        v46._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
        String.append(_:)(v46);
        swift_bridgeObjectRelease();
        v47._countAndFlagsBits = 8250;
        v47._object = (void *)0xE200000000000000;
        String.append(_:)(v47);
        v48._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
        String.append(_:)(v48);
        swift_bridgeObjectRelease();
        v49._countAndFlagsBits = 62;
        v49._object = (void *)0xE100000000000000;
        String.append(_:)(v49);
        uint64_t aBlock = sub_1008FA0F0(aBlock, v60, &v66);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        *(_WORD *)(v45 + 12) = 2048;
        uint64_t aBlock = v30;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v45 + 22) = 2048;
        uint64_t v50 = *(void *)(a2 + 32);
        if ((v50 & 0xC000000000000001) != 0)
        {
          swift_bridgeObjectRetain();
          uint64_t v51 = __CocoaSet.count.getter();
          swift_release();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v51 = *(void *)(v50 + 16);
          swift_release();
        }
        uint64_t aBlock = v51;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v43, v44, "%{public}s: Session count: %ld -> %ld", (uint8_t *)v45, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
      }
      uint64_t v10 = v58;
      if ((*(void *)(a2 + 32) & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        __CocoaSet.count.getter();
      }
      else
      {
        swift_bridgeObjectRetain();
      }
      sub_1000A1534((uint64_t)v7);
      swift_bridgeObjectRelease();
    }
    else
    {
      if (qword_101637490 != -1) {
        swift_once();
      }
      uint64_t v31 = type metadata accessor for Logger();
      sub_100010324(v31, (uint64_t)qword_10170F2E0);
      id v32 = v22;
      swift_retain_n();
      id v33 = v32;
      uint64_t v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v34, v35))
      {
        log = v34;
        uint64_t v36 = swift_slowAlloc();
        uint64_t v55 = (void *)swift_slowAlloc();
        uint64_t v66 = swift_slowAlloc();
        *(_DWORD *)uint64_t v36 = 136446466;
        uint64_t v65 = a2;
        sub_10000588C((uint64_t *)&unk_10165F640);
        sub_100062734(&qword_101666840, (uint64_t *)&unk_10165F640);
        v37._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
        String.append(_:)(v37);
        swift_bridgeObjectRelease();
        v38._countAndFlagsBits = 8250;
        v38._object = (void *)0xE200000000000000;
        String.append(_:)(v38);
        v39._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
        String.append(_:)(v39);
        swift_bridgeObjectRelease();
        v40._countAndFlagsBits = 62;
        v40._object = (void *)0xE100000000000000;
        String.append(_:)(v40);
        swift_release();
        sub_1008FA0F0(60, 0xE100000000000000, &v66);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        *(_WORD *)(v36 + 12) = 2112;
        uint64_t aBlock = (uint64_t)v33;
        id v41 = v33;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v55 = v33;

        _os_log_impl((void *)&_mh_execute_header, log, v35, "%{public}s: Failed to make XPCSession from %@", (uint8_t *)v36, 0x16u);
        sub_10000588C((uint64_t *)&unk_101638EA0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        sub_1000A1534((uint64_t)v7);
      }
      else
      {
        swift_release();
        sub_1000A1534((uint64_t)v7);

        swift_release();
      }
      return 0;
    }
  }
  return v10;
}

uint64_t sub_100FF5D18(void *a1, uint64_t a2)
{
  id v4 = [a1 invalidationHandler];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    uint64_t v7 = sub_100FFD540;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  swift_beginAccess();
  id v8 = a1;
  uint64_t v9 = swift_bridgeObjectRetain();
  uint64_t v10 = sub_100FFA4DC(v9, (uint64_t)v8, &qword_10163D250, (unint64_t *)&qword_101649B80);
  swift_bridgeObjectRelease();

  if (v10)
  {
    if (qword_101637490 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_100010324(v11, (uint64_t)qword_10170F2E0);
    id v12 = v8;
    swift_retain_n();
    id v13 = v12;
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v14, v15))
    {
      os_log_type_t type = v15;
      uint64_t v16 = swift_slowAlloc();
      uint64_t v53 = (void *)swift_slowAlloc();
      uint64_t v66 = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136446466;
      uint64_t v65 = a2;
      sub_10000588C((uint64_t *)&unk_10165F5C0);
      uint64_t v57 = (uint64_t)v7;
      sub_100062734(&qword_101666870, (uint64_t *)&unk_10165F5C0);
      v17._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
      String.append(_:)(v17);
      swift_bridgeObjectRelease();
      v18._countAndFlagsBits = 8250;
      v18._object = (void *)0xE200000000000000;
      String.append(_:)(v18);
      v19._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
      v20._countAndFlagsBits = 62;
      v20._object = (void *)0xE100000000000000;
      String.append(_:)(v20);
      swift_release();
      sub_1008FA0F0(60, 0xE100000000000000, &v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v16 + 12) = 2112;
      uint64_t aBlock = (uint64_t)v13;
      id v21 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v53 = v13;

      _os_log_impl((void *)&_mh_execute_header, v14, type, "%{public}s: Already have a session for %@", (uint8_t *)v16, 0x16u);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_1000A1534(v57);
    }
    else
    {

      swift_release_n();
      sub_1000A1534((uint64_t)v7);
    }
  }
  else
  {
    sub_10000588C(&qword_10163D250);
    swift_allocObject();
    id v22 = v8;
    uint64_t v23 = XPCSession.init(connection:)();
    if (v23)
    {
      uint64_t v24 = v23;
      uint64_t v25 = swift_allocObject();
      swift_weakInit();
      int v26 = (void *)swift_allocObject();
      v26[2] = v25;
      uint64_t v26[3] = v22;
      v26[4] = v7;
      v26[5] = v6;
      uint64_t v63 = sub_100FFD1CC;
      uint64_t v64 = v26;
      uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
      unint64_t v60 = 1107296256;
      uint64_t v61 = sub_1004B5480;
      uint64_t v62 = &unk_1016010B8;
      uint64_t v27 = _Block_copy(&aBlock);
      id v28 = v22;
      sub_1000BD0E8((uint64_t)v7);
      swift_release();
      [v28 setInvalidationHandler:v27];
      _Block_release(v27);
      uint64_t v29 = *(void *)(a2 + 32);
      if ((v29 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        uint64_t v30 = __CocoaSet.count.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v30 = *(void *)(v29 + 16);
      }
      swift_beginAccess();
      swift_retain();
      uint64_t v58 = v24;
      sub_100DD4378(&v66, v24);
      swift_endAccess();
      swift_release();
      if (qword_101637490 != -1) {
        swift_once();
      }
      uint64_t v42 = type metadata accessor for Logger();
      sub_100010324(v42, (uint64_t)qword_10170F2E0);
      swift_retain_n();
      uint64_t v43 = Logger.logObject.getter();
      os_log_type_t v44 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v43, v44))
      {
        uint64_t v45 = swift_slowAlloc();
        uint64_t v66 = swift_slowAlloc();
        *(_DWORD *)uint64_t v45 = 136446722;
        uint64_t aBlock = 60;
        unint64_t v60 = 0xE100000000000000;
        uint64_t v65 = a2;
        sub_10000588C((uint64_t *)&unk_10165F5C0);
        sub_100062734(&qword_101666870, (uint64_t *)&unk_10165F5C0);
        v46._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
        String.append(_:)(v46);
        swift_bridgeObjectRelease();
        v47._countAndFlagsBits = 8250;
        v47._object = (void *)0xE200000000000000;
        String.append(_:)(v47);
        v48._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
        String.append(_:)(v48);
        swift_bridgeObjectRelease();
        v49._countAndFlagsBits = 62;
        v49._object = (void *)0xE100000000000000;
        String.append(_:)(v49);
        uint64_t aBlock = sub_1008FA0F0(aBlock, v60, &v66);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        *(_WORD *)(v45 + 12) = 2048;
        uint64_t aBlock = v30;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v45 + 22) = 2048;
        uint64_t v50 = *(void *)(a2 + 32);
        if ((v50 & 0xC000000000000001) != 0)
        {
          swift_bridgeObjectRetain();
          uint64_t v51 = __CocoaSet.count.getter();
          swift_release();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v51 = *(void *)(v50 + 16);
          swift_release();
        }
        uint64_t aBlock = v51;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v43, v44, "%{public}s: Session count: %ld -> %ld", (uint8_t *)v45, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
      }
      uint64_t v10 = v58;
      if ((*(void *)(a2 + 32) & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        __CocoaSet.count.getter();
      }
      else
      {
        swift_bridgeObjectRetain();
      }
      sub_1000A1534((uint64_t)v7);
      swift_bridgeObjectRelease();
    }
    else
    {
      if (qword_101637490 != -1) {
        swift_once();
      }
      uint64_t v31 = type metadata accessor for Logger();
      sub_100010324(v31, (uint64_t)qword_10170F2E0);
      id v32 = v22;
      swift_retain_n();
      id v33 = v32;
      uint64_t v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v34, v35))
      {
        log = v34;
        uint64_t v36 = swift_slowAlloc();
        uint64_t v55 = (void *)swift_slowAlloc();
        uint64_t v66 = swift_slowAlloc();
        *(_DWORD *)uint64_t v36 = 136446466;
        uint64_t v65 = a2;
        sub_10000588C((uint64_t *)&unk_10165F5C0);
        sub_100062734(&qword_101666870, (uint64_t *)&unk_10165F5C0);
        v37._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
        String.append(_:)(v37);
        swift_bridgeObjectRelease();
        v38._countAndFlagsBits = 8250;
        v38._object = (void *)0xE200000000000000;
        String.append(_:)(v38);
        v39._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
        String.append(_:)(v39);
        swift_bridgeObjectRelease();
        v40._countAndFlagsBits = 62;
        v40._object = (void *)0xE100000000000000;
        String.append(_:)(v40);
        swift_release();
        sub_1008FA0F0(60, 0xE100000000000000, &v66);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        *(_WORD *)(v36 + 12) = 2112;
        uint64_t aBlock = (uint64_t)v33;
        id v41 = v33;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v55 = v33;

        _os_log_impl((void *)&_mh_execute_header, log, v35, "%{public}s: Failed to make XPCSession from %@", (uint8_t *)v36, 0x16u);
        sub_10000588C((uint64_t *)&unk_101638EA0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        sub_1000A1534((uint64_t)v7);
      }
      else
      {
        swift_release();
        sub_1000A1534((uint64_t)v7);

        swift_release();
      }
      return 0;
    }
  }
  return v10;
}

uint64_t sub_100FF68B4(void *a1, uint64_t a2)
{
  id v4 = [a1 invalidationHandler];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    uint64_t v7 = sub_100FFD540;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  swift_beginAccess();
  id v8 = a1;
  uint64_t v9 = swift_bridgeObjectRetain();
  uint64_t v10 = sub_100FFA4DC(v9, (uint64_t)v8, &qword_101656E30, (unint64_t *)&qword_10165F110);
  swift_bridgeObjectRelease();

  if (v10)
  {
    if (qword_101637490 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_100010324(v11, (uint64_t)qword_10170F2E0);
    id v12 = v8;
    swift_retain_n();
    id v13 = v12;
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v14, v15))
    {
      os_log_type_t type = v15;
      uint64_t v16 = swift_slowAlloc();
      uint64_t v53 = (void *)swift_slowAlloc();
      uint64_t v66 = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136446466;
      uint64_t v65 = a2;
      sub_10000588C((uint64_t *)&unk_10165F620);
      uint64_t v57 = (uint64_t)v7;
      sub_100062734((unint64_t *)&unk_1016649B0, (uint64_t *)&unk_10165F620);
      v17._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
      String.append(_:)(v17);
      swift_bridgeObjectRelease();
      v18._countAndFlagsBits = 8250;
      v18._object = (void *)0xE200000000000000;
      String.append(_:)(v18);
      v19._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
      v20._countAndFlagsBits = 62;
      v20._object = (void *)0xE100000000000000;
      String.append(_:)(v20);
      swift_release();
      sub_1008FA0F0(60, 0xE100000000000000, &v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v16 + 12) = 2112;
      uint64_t aBlock = (uint64_t)v13;
      id v21 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v53 = v13;

      _os_log_impl((void *)&_mh_execute_header, v14, type, "%{public}s: Already have a session for %@", (uint8_t *)v16, 0x16u);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_1000A1534(v57);
    }
    else
    {

      swift_release_n();
      sub_1000A1534((uint64_t)v7);
    }
  }
  else
  {
    sub_10000588C(&qword_101656E30);
    swift_allocObject();
    id v22 = v8;
    uint64_t v23 = XPCSession.init(connection:)();
    if (v23)
    {
      uint64_t v24 = v23;
      uint64_t v25 = swift_allocObject();
      swift_weakInit();
      int v26 = (void *)swift_allocObject();
      v26[2] = v25;
      uint64_t v26[3] = v22;
      v26[4] = v7;
      v26[5] = v6;
      uint64_t v63 = sub_100FFD07C;
      uint64_t v64 = v26;
      uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
      unint64_t v60 = 1107296256;
      uint64_t v61 = sub_1004B5480;
      uint64_t v62 = &unk_101600C58;
      uint64_t v27 = _Block_copy(&aBlock);
      id v28 = v22;
      sub_1000BD0E8((uint64_t)v7);
      swift_release();
      [v28 setInvalidationHandler:v27];
      _Block_release(v27);
      uint64_t v29 = *(void *)(a2 + 32);
      if ((v29 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        uint64_t v30 = __CocoaSet.count.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v30 = *(void *)(v29 + 16);
      }
      swift_beginAccess();
      swift_retain();
      uint64_t v58 = v24;
      sub_100DD4694(&v66, v24);
      swift_endAccess();
      swift_release();
      if (qword_101637490 != -1) {
        swift_once();
      }
      uint64_t v42 = type metadata accessor for Logger();
      sub_100010324(v42, (uint64_t)qword_10170F2E0);
      swift_retain_n();
      uint64_t v43 = Logger.logObject.getter();
      os_log_type_t v44 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v43, v44))
      {
        uint64_t v45 = swift_slowAlloc();
        uint64_t v66 = swift_slowAlloc();
        *(_DWORD *)uint64_t v45 = 136446722;
        uint64_t aBlock = 60;
        unint64_t v60 = 0xE100000000000000;
        uint64_t v65 = a2;
        sub_10000588C((uint64_t *)&unk_10165F620);
        sub_100062734((unint64_t *)&unk_1016649B0, (uint64_t *)&unk_10165F620);
        v46._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
        String.append(_:)(v46);
        swift_bridgeObjectRelease();
        v47._countAndFlagsBits = 8250;
        v47._object = (void *)0xE200000000000000;
        String.append(_:)(v47);
        v48._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
        String.append(_:)(v48);
        swift_bridgeObjectRelease();
        v49._countAndFlagsBits = 62;
        v49._object = (void *)0xE100000000000000;
        String.append(_:)(v49);
        uint64_t aBlock = sub_1008FA0F0(aBlock, v60, &v66);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        *(_WORD *)(v45 + 12) = 2048;
        uint64_t aBlock = v30;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v45 + 22) = 2048;
        uint64_t v50 = *(void *)(a2 + 32);
        if ((v50 & 0xC000000000000001) != 0)
        {
          swift_bridgeObjectRetain();
          uint64_t v51 = __CocoaSet.count.getter();
          swift_release();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v51 = *(void *)(v50 + 16);
          swift_release();
        }
        uint64_t aBlock = v51;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v43, v44, "%{public}s: Session count: %ld -> %ld", (uint8_t *)v45, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
      }
      uint64_t v10 = v58;
      if ((*(void *)(a2 + 32) & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        __CocoaSet.count.getter();
      }
      else
      {
        swift_bridgeObjectRetain();
      }
      sub_1000A1534((uint64_t)v7);
      swift_bridgeObjectRelease();
    }
    else
    {
      if (qword_101637490 != -1) {
        swift_once();
      }
      uint64_t v31 = type metadata accessor for Logger();
      sub_100010324(v31, (uint64_t)qword_10170F2E0);
      id v32 = v22;
      swift_retain_n();
      id v33 = v32;
      uint64_t v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v34, v35))
      {
        log = v34;
        uint64_t v36 = swift_slowAlloc();
        uint64_t v55 = (void *)swift_slowAlloc();
        uint64_t v66 = swift_slowAlloc();
        *(_DWORD *)uint64_t v36 = 136446466;
        uint64_t v65 = a2;
        sub_10000588C((uint64_t *)&unk_10165F620);
        sub_100062734((unint64_t *)&unk_1016649B0, (uint64_t *)&unk_10165F620);
        v37._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
        String.append(_:)(v37);
        swift_bridgeObjectRelease();
        v38._countAndFlagsBits = 8250;
        v38._object = (void *)0xE200000000000000;
        String.append(_:)(v38);
        v39._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
        String.append(_:)(v39);
        swift_bridgeObjectRelease();
        v40._countAndFlagsBits = 62;
        v40._object = (void *)0xE100000000000000;
        String.append(_:)(v40);
        swift_release();
        sub_1008FA0F0(60, 0xE100000000000000, &v66);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        *(_WORD *)(v36 + 12) = 2112;
        uint64_t aBlock = (uint64_t)v33;
        id v41 = v33;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v55 = v33;

        _os_log_impl((void *)&_mh_execute_header, log, v35, "%{public}s: Failed to make XPCSession from %@", (uint8_t *)v36, 0x16u);
        sub_10000588C((uint64_t *)&unk_101638EA0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        sub_1000A1534((uint64_t)v7);
      }
      else
      {
        swift_release();
        sub_1000A1534((uint64_t)v7);

        swift_release();
      }
      return 0;
    }
  }
  return v10;
}

uint64_t sub_100FF7450(void *a1, uint64_t a2)
{
  id v4 = [a1 invalidationHandler];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    uint64_t v7 = sub_100FFAF38;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  swift_beginAccess();
  id v8 = a1;
  uint64_t v9 = swift_bridgeObjectRetain();
  uint64_t v10 = sub_100FFA4DC(v9, (uint64_t)v8, (uint64_t *)&unk_10165F5F0, (unint64_t *)&unk_10165F050);
  swift_bridgeObjectRelease();

  if (v10)
  {
    if (qword_101637490 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_100010324(v11, (uint64_t)qword_10170F2E0);
    id v12 = v8;
    swift_retain_n();
    id v13 = v12;
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v14, v15))
    {
      os_log_type_t type = v15;
      uint64_t v16 = swift_slowAlloc();
      uint64_t v53 = (void *)swift_slowAlloc();
      uint64_t v66 = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136446466;
      uint64_t v65 = a2;
      sub_10000588C(&qword_10165F5E0);
      uint64_t v57 = (uint64_t)v7;
      sub_100062734(&qword_10165F5E8, &qword_10165F5E0);
      v17._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
      String.append(_:)(v17);
      swift_bridgeObjectRelease();
      v18._countAndFlagsBits = 8250;
      v18._object = (void *)0xE200000000000000;
      String.append(_:)(v18);
      v19._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
      v20._countAndFlagsBits = 62;
      v20._object = (void *)0xE100000000000000;
      String.append(_:)(v20);
      swift_release();
      sub_1008FA0F0(60, 0xE100000000000000, &v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v16 + 12) = 2112;
      uint64_t aBlock = (uint64_t)v13;
      id v21 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v53 = v13;

      _os_log_impl((void *)&_mh_execute_header, v14, type, "%{public}s: Already have a session for %@", (uint8_t *)v16, 0x16u);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_1000A1534(v57);
    }
    else
    {

      swift_release_n();
      sub_1000A1534((uint64_t)v7);
    }
  }
  else
  {
    sub_10000588C((uint64_t *)&unk_10165F5F0);
    swift_allocObject();
    id v22 = v8;
    uint64_t v23 = XPCSession.init(connection:)();
    if (v23)
    {
      uint64_t v24 = v23;
      uint64_t v25 = swift_allocObject();
      swift_weakInit();
      int v26 = (void *)swift_allocObject();
      v26[2] = v25;
      uint64_t v26[3] = v22;
      v26[4] = v7;
      v26[5] = v6;
      uint64_t v63 = sub_100FFAF14;
      uint64_t v64 = v26;
      uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
      unint64_t v60 = 1107296256;
      uint64_t v61 = sub_1004B5480;
      uint64_t v62 = &unk_1016006E0;
      uint64_t v27 = _Block_copy(&aBlock);
      id v28 = v22;
      sub_1000BD0E8((uint64_t)v7);
      swift_release();
      [v28 setInvalidationHandler:v27];
      _Block_release(v27);
      uint64_t v29 = *(void *)(a2 + 32);
      if ((v29 & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        uint64_t v30 = __CocoaSet.count.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v30 = *(void *)(v29 + 16);
      }
      swift_beginAccess();
      swift_retain();
      uint64_t v58 = v24;
      sub_100DD49B0(&v66, v24);
      swift_endAccess();
      swift_release();
      if (qword_101637490 != -1) {
        swift_once();
      }
      uint64_t v42 = type metadata accessor for Logger();
      sub_100010324(v42, (uint64_t)qword_10170F2E0);
      swift_retain_n();
      uint64_t v43 = Logger.logObject.getter();
      os_log_type_t v44 = static os_log_type_t.info.getter();
      if (os_log_type_enabled(v43, v44))
      {
        uint64_t v45 = swift_slowAlloc();
        uint64_t v66 = swift_slowAlloc();
        *(_DWORD *)uint64_t v45 = 136446722;
        uint64_t aBlock = 60;
        unint64_t v60 = 0xE100000000000000;
        uint64_t v65 = a2;
        sub_10000588C(&qword_10165F5E0);
        sub_100062734(&qword_10165F5E8, &qword_10165F5E0);
        v46._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
        String.append(_:)(v46);
        swift_bridgeObjectRelease();
        v47._countAndFlagsBits = 8250;
        v47._object = (void *)0xE200000000000000;
        String.append(_:)(v47);
        v48._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
        String.append(_:)(v48);
        swift_bridgeObjectRelease();
        v49._countAndFlagsBits = 62;
        v49._object = (void *)0xE100000000000000;
        String.append(_:)(v49);
        uint64_t aBlock = sub_1008FA0F0(aBlock, v60, &v66);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        *(_WORD *)(v45 + 12) = 2048;
        uint64_t aBlock = v30;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v45 + 22) = 2048;
        uint64_t v50 = *(void *)(a2 + 32);
        if ((v50 & 0xC000000000000001) != 0)
        {
          swift_bridgeObjectRetain();
          uint64_t v51 = __CocoaSet.count.getter();
          swift_release();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v51 = *(void *)(v50 + 16);
          swift_release();
        }
        uint64_t aBlock = v51;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        _os_log_impl((void *)&_mh_execute_header, v43, v44, "%{public}s: Session count: %ld -> %ld", (uint8_t *)v45, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
      }
      uint64_t v10 = v58;
      if ((*(void *)(a2 + 32) & 0xC000000000000001) != 0)
      {
        swift_bridgeObjectRetain();
        __CocoaSet.count.getter();
      }
      else
      {
        swift_bridgeObjectRetain();
      }
      sub_1000A1534((uint64_t)v7);
      swift_bridgeObjectRelease();
    }
    else
    {
      if (qword_101637490 != -1) {
        swift_once();
      }
      uint64_t v31 = type metadata accessor for Logger();
      sub_100010324(v31, (uint64_t)qword_10170F2E0);
      id v32 = v22;
      swift_retain_n();
      id v33 = v32;
      uint64_t v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v34, v35))
      {
        log = v34;
        uint64_t v36 = swift_slowAlloc();
        uint64_t v55 = (void *)swift_slowAlloc();
        uint64_t v66 = swift_slowAlloc();
        *(_DWORD *)uint64_t v36 = 136446466;
        uint64_t v65 = a2;
        sub_10000588C(&qword_10165F5E0);
        sub_100062734(&qword_10165F5E8, &qword_10165F5E0);
        v37._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
        String.append(_:)(v37);
        swift_bridgeObjectRelease();
        v38._countAndFlagsBits = 8250;
        v38._object = (void *)0xE200000000000000;
        String.append(_:)(v38);
        v39._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
        String.append(_:)(v39);
        swift_bridgeObjectRelease();
        v40._countAndFlagsBits = 62;
        v40._object = (void *)0xE100000000000000;
        String.append(_:)(v40);
        swift_release();
        sub_1008FA0F0(60, 0xE100000000000000, &v66);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        *(_WORD *)(v36 + 12) = 2112;
        uint64_t aBlock = (uint64_t)v33;
        id v41 = v33;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v55 = v33;

        _os_log_impl((void *)&_mh_execute_header, log, v35, "%{public}s: Failed to make XPCSession from %@", (uint8_t *)v36, 0x16u);
        sub_10000588C((uint64_t *)&unk_101638EA0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        sub_1000A1534((uint64_t)v7);
      }
      else
      {
        swift_release();
        sub_1000A1534((uint64_t)v7);

        swift_release();
      }
      return 0;
    }
  }
  return v10;
}

uint64_t sub_100FF7FEC(uint64_t a1, void *a2, void (*a3)(void))
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v6 = result;
    if (qword_101637490 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100010324(v7, (uint64_t)qword_10170F2E0);
    swift_retain_n();
    id v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      id v21 = a3;
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136446210;
      uint64_t v22 = v11;
      uint64_t aBlock = 60;
      unint64_t v24 = 0xE100000000000000;
      swift_retain();
      sub_10000588C(&qword_10165F650);
      sub_100062734(&qword_10165F658, &qword_10165F650);
      v12._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      v13._countAndFlagsBits = 8250;
      v13._object = (void *)0xE200000000000000;
      String.append(_:)(v13);
      v14._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
      String.append(_:)(v14);
      swift_bridgeObjectRelease();
      v15._countAndFlagsBits = 62;
      v15._object = (void *)0xE100000000000000;
      String.append(_:)(v15);
      swift_release();
      uint64_t aBlock = sub_1008FA0F0(60, 0xE100000000000000, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s: Invalidation handler fired.", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      a3 = v21;
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    uint64_t v16 = *(NSObject **)(v6 + 16);
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = v6;
    *(void *)(v17 + 24) = a2;
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = sub_100FFD184;
    *(void *)(v18 + 24) = v17;
    uint64_t v27 = sub_1003B7AE0;
    uint64_t v28 = v18;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    unint64_t v24 = 1107296256;
    uint64_t v25 = sub_1000A70B0;
    int v26 = &unk_101601040;
    Swift::String v19 = _Block_copy(&aBlock);
    swift_retain();
    id v20 = a2;
    swift_retain();
    swift_release();
    dispatch_sync(v16, v19);
    _Block_release(v19);
    LOBYTE(v19) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    uint64_t result = swift_release();
    if (v19)
    {
      __break(1u);
    }
    else
    {
      if (a3) {
        a3(result);
      }
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_100FF83DC(uint64_t a1, void *a2, void (*a3)(void))
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v6 = result;
    if (qword_101637490 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100010324(v7, (uint64_t)qword_10170F2E0);
    swift_retain_n();
    id v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      id v21 = a3;
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136446210;
      uint64_t v22 = v11;
      uint64_t aBlock = 60;
      unint64_t v24 = 0xE100000000000000;
      swift_retain();
      sub_10000588C((uint64_t *)&unk_1016668C0);
      sub_100062734((unint64_t *)&unk_10165F6E0, (uint64_t *)&unk_1016668C0);
      v12._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      v13._countAndFlagsBits = 8250;
      v13._object = (void *)0xE200000000000000;
      String.append(_:)(v13);
      v14._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
      String.append(_:)(v14);
      swift_bridgeObjectRelease();
      v15._countAndFlagsBits = 62;
      v15._object = (void *)0xE100000000000000;
      String.append(_:)(v15);
      swift_release();
      uint64_t aBlock = sub_1008FA0F0(60, 0xE100000000000000, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s: Invalidation handler fired.", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      a3 = v21;
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    uint64_t v16 = *(NSObject **)(v6 + 16);
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = v6;
    *(void *)(v17 + 24) = a2;
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = sub_10013240C;
    *(void *)(v18 + 24) = v17;
    uint64_t v27 = sub_1003B7AE0;
    uint64_t v28 = v18;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    unint64_t v24 = 1107296256;
    uint64_t v25 = sub_1000A70B0;
    int v26 = &unk_101601270;
    Swift::String v19 = _Block_copy(&aBlock);
    swift_retain();
    id v20 = a2;
    swift_retain();
    swift_release();
    dispatch_sync(v16, v19);
    _Block_release(v19);
    LOBYTE(v19) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    uint64_t result = swift_release();
    if (v19)
    {
      __break(1u);
    }
    else
    {
      if (a3) {
        a3(result);
      }
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_100FF87CC(uint64_t a1, void *a2, void (*a3)(void))
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v6 = result;
    if (qword_101637490 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100010324(v7, (uint64_t)qword_10170F2E0);
    swift_retain_n();
    id v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      id v21 = a3;
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136446210;
      uint64_t v22 = v11;
      uint64_t aBlock = 60;
      unint64_t v24 = 0xE100000000000000;
      swift_retain();
      sub_10000588C(&qword_10165F630);
      sub_100062734(&qword_10165F638, &qword_10165F630);
      v12._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      v13._countAndFlagsBits = 8250;
      v13._object = (void *)0xE200000000000000;
      String.append(_:)(v13);
      v14._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
      String.append(_:)(v14);
      swift_bridgeObjectRelease();
      v15._countAndFlagsBits = 62;
      v15._object = (void *)0xE100000000000000;
      String.append(_:)(v15);
      swift_release();
      uint64_t aBlock = sub_1008FA0F0(60, 0xE100000000000000, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s: Invalidation handler fired.", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      a3 = v21;
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    uint64_t v16 = *(NSObject **)(v6 + 16);
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = v6;
    *(void *)(v17 + 24) = a2;
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = sub_100FFD0DC;
    *(void *)(v18 + 24) = v17;
    uint64_t v27 = sub_1003B7AE0;
    uint64_t v28 = v18;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    unint64_t v24 = 1107296256;
    uint64_t v25 = sub_1000A70B0;
    int v26 = &unk_101600E10;
    Swift::String v19 = _Block_copy(&aBlock);
    swift_retain();
    id v20 = a2;
    swift_retain();
    swift_release();
    dispatch_sync(v16, v19);
    _Block_release(v19);
    LOBYTE(v19) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    uint64_t result = swift_release();
    if (v19)
    {
      __break(1u);
    }
    else
    {
      if (a3) {
        a3(result);
      }
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_100FF8BBC(uint64_t a1, void *a2, void (*a3)(void))
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v6 = result;
    if (qword_101637490 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100010324(v7, (uint64_t)qword_10170F2E0);
    swift_retain_n();
    id v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      id v21 = a3;
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136446210;
      uint64_t v22 = v11;
      uint64_t aBlock = 60;
      unint64_t v24 = 0xE100000000000000;
      swift_retain();
      sub_10000588C((uint64_t *)&unk_10165F600);
      sub_100062734((unint64_t *)&unk_101653E10, (uint64_t *)&unk_10165F600);
      v12._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      v13._countAndFlagsBits = 8250;
      v13._object = (void *)0xE200000000000000;
      String.append(_:)(v13);
      v14._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
      String.append(_:)(v14);
      swift_bridgeObjectRelease();
      v15._countAndFlagsBits = 62;
      v15._object = (void *)0xE100000000000000;
      String.append(_:)(v15);
      swift_release();
      uint64_t aBlock = sub_1008FA0F0(60, 0xE100000000000000, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s: Invalidation handler fired.", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      a3 = v21;
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    uint64_t v16 = *(NSObject **)(v6 + 16);
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = v6;
    *(void *)(v17 + 24) = a2;
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = sub_100FFD034;
    *(void *)(v18 + 24) = v17;
    uint64_t v27 = sub_1003B7AE0;
    uint64_t v28 = v18;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    unint64_t v24 = 1107296256;
    uint64_t v25 = sub_1000A70B0;
    int v26 = &unk_101600BE0;
    Swift::String v19 = _Block_copy(&aBlock);
    swift_retain();
    id v20 = a2;
    swift_retain();
    swift_release();
    dispatch_sync(v16, v19);
    _Block_release(v19);
    LOBYTE(v19) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    uint64_t result = swift_release();
    if (v19)
    {
      __break(1u);
    }
    else
    {
      if (a3) {
        a3(result);
      }
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_100FF8FAC(uint64_t a1, void *a2, void (*a3)(void))
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v6 = result;
    if (qword_101637490 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100010324(v7, (uint64_t)qword_10170F2E0);
    swift_retain_n();
    id v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      id v21 = a3;
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136446210;
      uint64_t v22 = v11;
      uint64_t aBlock = 60;
      unint64_t v24 = 0xE100000000000000;
      swift_retain();
      sub_10000588C((uint64_t *)&unk_10165F640);
      sub_100062734(&qword_101666840, (uint64_t *)&unk_10165F640);
      v12._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      v13._countAndFlagsBits = 8250;
      v13._object = (void *)0xE200000000000000;
      String.append(_:)(v13);
      v14._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
      String.append(_:)(v14);
      swift_bridgeObjectRelease();
      v15._countAndFlagsBits = 62;
      v15._object = (void *)0xE100000000000000;
      String.append(_:)(v15);
      swift_release();
      uint64_t aBlock = sub_1008FA0F0(60, 0xE100000000000000, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s: Invalidation handler fired.", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      a3 = v21;
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    uint64_t v16 = *(NSObject **)(v6 + 16);
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = v6;
    *(void *)(v17 + 24) = a2;
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = sub_1009F9A04;
    *(void *)(v18 + 24) = v17;
    uint64_t v27 = sub_1003B7AE0;
    uint64_t v28 = v18;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    unint64_t v24 = 1107296256;
    uint64_t v25 = sub_1000A70B0;
    int v26 = &unk_101600F28;
    Swift::String v19 = _Block_copy(&aBlock);
    swift_retain();
    id v20 = a2;
    swift_retain();
    swift_release();
    dispatch_sync(v16, v19);
    _Block_release(v19);
    LOBYTE(v19) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    uint64_t result = swift_release();
    if (v19)
    {
      __break(1u);
    }
    else
    {
      if (a3) {
        a3(result);
      }
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_100FF939C(uint64_t a1, void *a2, void (*a3)(void))
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v6 = result;
    if (qword_101637490 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100010324(v7, (uint64_t)qword_10170F2E0);
    swift_retain_n();
    id v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      id v21 = a3;
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136446210;
      uint64_t v22 = v11;
      uint64_t aBlock = 60;
      unint64_t v24 = 0xE100000000000000;
      swift_retain();
      sub_10000588C((uint64_t *)&unk_10165F5C0);
      sub_100062734(&qword_101666870, (uint64_t *)&unk_10165F5C0);
      v12._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      v13._countAndFlagsBits = 8250;
      v13._object = (void *)0xE200000000000000;
      String.append(_:)(v13);
      v14._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
      String.append(_:)(v14);
      swift_bridgeObjectRelease();
      v15._countAndFlagsBits = 62;
      v15._object = (void *)0xE100000000000000;
      String.append(_:)(v15);
      swift_release();
      uint64_t aBlock = sub_1008FA0F0(60, 0xE100000000000000, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s: Invalidation handler fired.", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      a3 = v21;
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    uint64_t v16 = *(NSObject **)(v6 + 16);
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = v6;
    *(void *)(v17 + 24) = a2;
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = sub_100FFD1DC;
    *(void *)(v18 + 24) = v17;
    uint64_t v27 = sub_1003B7AE0;
    uint64_t v28 = v18;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    unint64_t v24 = 1107296256;
    uint64_t v25 = sub_1000A70B0;
    int v26 = &unk_101601158;
    Swift::String v19 = _Block_copy(&aBlock);
    swift_retain();
    id v20 = a2;
    swift_retain();
    swift_release();
    dispatch_sync(v16, v19);
    _Block_release(v19);
    LOBYTE(v19) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    uint64_t result = swift_release();
    if (v19)
    {
      __break(1u);
    }
    else
    {
      if (a3) {
        a3(result);
      }
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_100FF978C(uint64_t a1, void *a2, void (*a3)(void))
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v6 = result;
    if (qword_101637490 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100010324(v7, (uint64_t)qword_10170F2E0);
    swift_retain_n();
    id v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      id v21 = a3;
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136446210;
      uint64_t v22 = v11;
      uint64_t aBlock = 60;
      unint64_t v24 = 0xE100000000000000;
      swift_retain();
      sub_10000588C((uint64_t *)&unk_10165F620);
      sub_100062734((unint64_t *)&unk_1016649B0, (uint64_t *)&unk_10165F620);
      v12._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      v13._countAndFlagsBits = 8250;
      v13._object = (void *)0xE200000000000000;
      String.append(_:)(v13);
      v14._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
      String.append(_:)(v14);
      swift_bridgeObjectRelease();
      v15._countAndFlagsBits = 62;
      v15._object = (void *)0xE100000000000000;
      String.append(_:)(v15);
      swift_release();
      uint64_t aBlock = sub_1008FA0F0(60, 0xE100000000000000, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s: Invalidation handler fired.", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      a3 = v21;
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    uint64_t v16 = *(NSObject **)(v6 + 16);
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = v6;
    *(void *)(v17 + 24) = a2;
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = sub_100F39A8C;
    *(void *)(v18 + 24) = v17;
    uint64_t v27 = sub_1003B7AE0;
    uint64_t v28 = v18;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    unint64_t v24 = 1107296256;
    uint64_t v25 = sub_1000A70B0;
    int v26 = &unk_101600CF8;
    Swift::String v19 = _Block_copy(&aBlock);
    swift_retain();
    id v20 = a2;
    swift_retain();
    swift_release();
    dispatch_sync(v16, v19);
    _Block_release(v19);
    LOBYTE(v19) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    uint64_t result = swift_release();
    if (v19)
    {
      __break(1u);
    }
    else
    {
      if (a3) {
        a3(result);
      }
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_100FF9B7C(uint64_t a1, void *a2, void (*a3)(void))
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v6 = result;
    if (qword_101637490 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100010324(v7, (uint64_t)qword_10170F2E0);
    swift_retain_n();
    id v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      id v21 = a3;
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136446210;
      uint64_t v22 = v11;
      uint64_t aBlock = 60;
      unint64_t v24 = 0xE100000000000000;
      swift_retain();
      sub_10000588C(&qword_10165F5E0);
      sub_100062734(&qword_10165F5E8, &qword_10165F5E0);
      v12._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      v13._countAndFlagsBits = 8250;
      v13._object = (void *)0xE200000000000000;
      String.append(_:)(v13);
      v14._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
      String.append(_:)(v14);
      swift_bridgeObjectRelease();
      v15._countAndFlagsBits = 62;
      v15._object = (void *)0xE100000000000000;
      String.append(_:)(v15);
      swift_release();
      uint64_t aBlock = sub_1008FA0F0(60, 0xE100000000000000, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s: Invalidation handler fired.", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      a3 = v21;
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    uint64_t v16 = *(NSObject **)(v6 + 16);
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = v6;
    *(void *)(v17 + 24) = a2;
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = sub_100FFAF4C;
    *(void *)(v18 + 24) = v17;
    uint64_t v27 = sub_100132424;
    uint64_t v28 = v18;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    unint64_t v24 = 1107296256;
    uint64_t v25 = sub_1000A70B0;
    int v26 = &unk_101600780;
    Swift::String v19 = _Block_copy(&aBlock);
    swift_retain();
    id v20 = a2;
    swift_retain();
    swift_release();
    dispatch_sync(v16, v19);
    _Block_release(v19);
    LOBYTE(v19) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    uint64_t result = swift_release();
    if (v19)
    {
      __break(1u);
    }
    else
    {
      if (a3) {
        a3(result);
      }
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_100FF9F70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  *(void *)(v6 + 56) = v5;
  uint64_t v12 = type metadata accessor for ContinuousClock.Instant();
  *(void *)(v6 + 64) = v12;
  *(void *)(v6 + 72) = *(void *)(v12 - 8);
  *(void *)(v6 + 80) = swift_task_alloc();
  *(void *)(v6 + 88) = swift_task_alloc();
  *(void *)(v6 + 40) = a1;
  *(void *)(v6 + 48) = a2;
  *(void *)(v6 + 16) = a3;
  *(void *)(v6 + 24) = a4;
  *(unsigned char *)(v6 + 32) = a5 & 1;
  return _swift_task_switch(sub_100FFA074, 0, 0);
}

uint64_t sub_100FFA074()
{
  uint64_t v1 = v0[10];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[9];
  uint64_t v4 = type metadata accessor for ContinuousClock();
  uint64_t v5 = sub_100FFD1F4((unint64_t *)&unk_1016666F0, 255, (void (*)(uint64_t))&type metadata accessor for ContinuousClock);
  dispatch thunk of Clock.now.getter();
  sub_100FFD1F4(&qword_101653DE0, 255, (void (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)();
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v0[12] = v6;
  v0[13] = (v3 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v6(v1, v2);
  uint64_t v7 = (void *)swift_task_alloc();
  v0[14] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_100FFA21C;
  uint64_t v8 = v0[11];
  return dispatch thunk of Clock.sleep(until:tolerance:)(v8, v0 + 2, v4, v5);
}

uint64_t sub_100FFA21C()
{
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(*v1 + 96);
  uint64_t v3 = *(void *)(*v1 + 88);
  uint64_t v4 = *(void *)(*v1 + 64);
  uint64_t v5 = *v1;
  *(void *)(v5 + 120) = v0;
  swift_task_dealloc();
  v2(v3, v4);
  if (v0)
  {
    return _swift_task_switch(sub_100FFA3D8, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v5 + 8);
    return v6();
  }
}

uint64_t sub_100FFA3D8()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

unint64_t sub_100FFA448()
{
  unint64_t result = qword_101666558;
  if (!qword_101666558)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101666558);
  }
  return result;
}

uint64_t sub_100FFA4A0@<X0>(uint64_t a1@<X8>)
{
  return sub_100FDE2E8(a1);
}

uint64_t sub_100FFA4B0@<X0>(uint64_t a1@<X8>)
{
  return sub_1012E41F8(a1);
}

uint64_t sub_100FFA4DC(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
  uint64_t v4 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_10000588C(a3);
    sub_100062734(a4, a3);
    uint64_t result = Set.Iterator.init(_cocoa:)();
    uint64_t v4 = v27;
    uint64_t v26 = v28;
    uint64_t v8 = v29;
    uint64_t v9 = v30;
    unint64_t v10 = v31;
  }
  else
  {
    uint64_t v11 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v26 = a1 + 56;
    uint64_t v12 = ~v11;
    uint64_t v13 = -v11;
    if (v13 < 64) {
      uint64_t v14 = ~(-1 << v13);
    }
    else {
      uint64_t v14 = -1;
    }
    unint64_t v10 = v14 & *(void *)(a1 + 56);
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v8 = v12;
    uint64_t v9 = 0;
  }
  int64_t v25 = (unint64_t)(v8 + 64) >> 6;
  if ((v4 & 0x8000000000000000) == 0) {
    goto LABEL_11;
  }
LABEL_8:
  if (__CocoaSet.Iterator.next()())
  {
    swift_unknownObjectRetain();
    sub_10000588C(a3);
    swift_dynamicCast();
    uint64_t v15 = v32;
    swift_unknownObjectRelease();
    uint64_t v16 = v9;
    uint64_t v17 = v10;
    if (v32)
    {
      do
      {
        sub_100FFAF64();
        uint64_t v22 = (void *)XPCSession.connection.getter();
        char v23 = static NSObject.== infix(_:_:)();

        if (v23) {
          break;
        }
        uint64_t result = swift_release();
        uint64_t v9 = v16;
        unint64_t v10 = v17;
        if (v4 < 0) {
          goto LABEL_8;
        }
LABEL_11:
        if (v10)
        {
          uint64_t v17 = (v10 - 1) & v10;
          unint64_t v18 = __clz(__rbit64(v10)) | (v9 << 6);
          uint64_t v16 = v9;
        }
        else
        {
          int64_t v19 = v9 + 1;
          if (__OFADD__(v9, 1))
          {
            __break(1u);
            return result;
          }
          if (v19 >= v25) {
            goto LABEL_33;
          }
          unint64_t v20 = *(void *)(v26 + 8 * v19);
          uint64_t v16 = v9 + 1;
          if (!v20)
          {
            uint64_t v16 = v9 + 2;
            if (v9 + 2 >= v25) {
              goto LABEL_33;
            }
            unint64_t v20 = *(void *)(v26 + 8 * v16);
            if (!v20)
            {
              uint64_t v16 = v9 + 3;
              if (v9 + 3 >= v25) {
                goto LABEL_33;
              }
              unint64_t v20 = *(void *)(v26 + 8 * v16);
              if (!v20)
              {
                uint64_t v16 = v9 + 4;
                if (v9 + 4 >= v25) {
                  goto LABEL_33;
                }
                unint64_t v20 = *(void *)(v26 + 8 * v16);
                if (!v20)
                {
                  uint64_t v16 = v9 + 5;
                  if (v9 + 5 >= v25) {
                    goto LABEL_33;
                  }
                  unint64_t v20 = *(void *)(v26 + 8 * v16);
                  if (!v20)
                  {
                    uint64_t v21 = v9 + 6;
                    while (v25 != v21)
                    {
                      unint64_t v20 = *(void *)(v26 + 8 * v21++);
                      if (v20)
                      {
                        uint64_t v16 = v21 - 1;
                        goto LABEL_28;
                      }
                    }
                    goto LABEL_33;
                  }
                }
              }
            }
          }
LABEL_28:
          uint64_t v17 = (v20 - 1) & v20;
          unint64_t v18 = __clz(__rbit64(v20)) + (v16 << 6);
        }
        uint64_t v15 = *(void *)(*(void *)(v4 + 48) + 8 * v18);
        swift_retain();
      }
      while (v15);
    }
  }
  else
  {
LABEL_33:
    uint64_t v15 = 0;
  }
  sub_100132C20();
  return v15;
}

uint64_t sub_100FFA7E4()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100FFA824(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100033F68;
  return sub_100FD55A8(a1, v4, v5, v6);
}

uint64_t sub_100FFA8DC(void *a1, uint64_t a2, void (**a3)(void, void))
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a3;
  uint64_t v7 = self;
  _Block_copy(a3);
  id v8 = [v7 currentConnection];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = sub_100FD0B98(v8, (uint64_t *)&unk_101666620, (uint64_t)sub_100FFAEAC, &qword_10165F5E0, &qword_10165F5E8);
    if (v10)
    {
      uint64_t v11 = v10;
      type metadata accessor for Transaction();
      uint64_t v12 = (void *)swift_allocObject();
      void v12[2] = a2;
      v12[3] = a1;
      v12[4] = v11;
      v12[5] = sub_1001DF814;
      v12[6] = v6;
      swift_retain();
      id v13 = a1;
      swift_retain();
      swift_retain();
      static Transaction.asyncTask(name:block:)();
      swift_release();
      swift_release();

      return swift_release();
    }
  }
  if (qword_101637340 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_100010324(v15, (uint64_t)qword_10170F0B0);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    unint64_t v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Unable to add current XPC connection to the pool!", v18, 2u);
    swift_slowDealloc();
  }

  type metadata accessor for SPBTFindingSessionError(0);
  sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
  sub_100FFD1F4(&qword_101666550, 255, type metadata accessor for SPBTFindingSessionError);
  _BridgedStoredNSError.init(_:userInfo:)();
  int64_t v19 = (void *)_convertErrorToNSError(_:)();
  ((void (**)(void, void *))a3)[2](a3, v19);

  return swift_release();
}

uint64_t sub_100FFABE0()
{
  sub_100FFAD14();
  char v0 = NSXPCConnection.hasEntitlement<A>(_:)();
  if (qword_101637340 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170F0B0);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 67109120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "BTFindingService: Received new XPC connection (has entitlement: %{BOOL}d).", v4, 8u);
    swift_slowDealloc();
  }

  return v0 & 1;
}

unint64_t sub_100FFAD14()
{
  unint64_t result = qword_101666608;
  if (!qword_101666608)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_101666608);
  }
  return result;
}

uint64_t sub_100FFAD68()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100FFADA0()
{
  swift_release();

  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100FFADF0()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = v0[5];
  uint64_t v6 = v0[6];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = sub_100033F68;
  return sub_100FED920(v2, v3, v4, v5, v6);
}

uint64_t sub_100FFAEAC@<X0>(uint64_t *a1@<X8>)
{
  return sub_100FFD300((uint64_t (*)(void, void))sub_100FF7450, a1);
}

uint64_t sub_100FFAED8()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100FFAF14()
{
  return sub_100FF9B7C(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void (**)(void))(v0 + 32));
}

uint64_t sub_100FFAF20(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100FFAF30()
{
  return swift_release();
}

uint64_t sub_100FFAF38()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();
}

void sub_100FFAF4C()
{
  sub_100DFFF0C(*(void **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_100FFAF54()
{
  return _swift_deallocObject(v0, 32, 7);
}

unint64_t sub_100FFAF64()
{
  unint64_t result = qword_10165F5D0;
  if (!qword_10165F5D0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10165F5D0);
  }
  return result;
}

uint64_t sub_100FFAFA8()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v6 = v0 + v3;
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = *(void *)(v0 + v4 + 8);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v9;
  void *v9 = v1;
  v9[1] = sub_100033F68;
  return sub_100FF0CC4(v5, v6, v7, v8);
}

uint64_t sub_100FFB0D8(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[3] = v5;
  v7[4] = v6;
  v7[1] = sub_100033F68;
  v7[2] = a1;
  return _swift_task_switch(sub_1006672D0, v5, 0);
}

uint64_t sub_100FFB1D0()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = v0 + v3;
  uint64_t v6 = (uint64_t *)(v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v9;
  void *v9 = v1;
  v9[1] = sub_100033F68;
  return sub_100FF0684(v4, v5, v7, v8);
}

uint64_t sub_100FFB2E8()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = v0 + v3;
  uint64_t v6 = (uint64_t *)(v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v9;
  void *v9 = v1;
  v9[1] = sub_100033F68;
  return sub_100FF00B8(v4, v5, v7, v8);
}

uint64_t sub_100FFB3FC()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100FFB4DC(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = (uint64_t)v1 + v5;
  uint64_t v10 = *(void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = sub_100033F68;
  return sub_100FEA198(a1, v6, v7, v8, v9, v10);
}

uint64_t sub_100FFB60C()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  unint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_100033F68;
  return sub_100FEB534(v3, v4);
}

uint64_t sub_100FFB718()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100FFB7B4(uint64_t a1, char a2)
{
  char v5 = a2 & 1;
  uint64_t v6 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v7 = v2 + ((*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_100033F68;
  return sub_100FEC8CC(a1, v5, v7);
}

uint64_t sub_100FFB8C8()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100FFB9B0()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = v0 + v3;
  uint64_t v6 = *(void *)(v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v1;
  v7[3] = v5;
  v7[4] = v6;
  v7[1] = sub_100033F68;
  v7[2] = v4;
  return _swift_task_switch(sub_100FED280, v4, 0);
}

uint64_t sub_100FFBAD0()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100FFBBC4()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v6 = v0 + v3;
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = *(void *)(v0 + v4 + 8);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v9;
  void *v9 = v1;
  v9[1] = sub_100033F68;
  return sub_100FEDF34(v5, v6, v7, v8);
}

uint64_t sub_100FFBCF4(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[3] = v5;
  v7[4] = v6;
  v7[1] = sub_100033F68;
  v7[2] = a1;
  return _swift_task_switch(sub_100FEFC00, v5, 0);
}

uint64_t sub_100FFBDE8()
{
  uint64_t v1 = (int *)type metadata accessor for LocalFindableAccessoryRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v22 = *(void *)(v6 + 64);
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v8 = v0 + v3;
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v9(v0 + v3, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001CFB8(*(void *)(v8 + v1[7]), *(void *)(v8 + v1[7] + 8));
  uint64_t v10 = (uint64_t *)(v0 + v3 + v1[8]);
  unint64_t v11 = v10[1];
  if (v11 >> 60 != 15) {
    sub_10001CFB8(*v10, v11);
  }
  uint64_t v12 = (v3 + v4 + v7) & ~v7;
  uint64_t v13 = v2 | v7 | 7;
  v9(v8 + v1[9], v5);
  uint64_t v14 = v8 + v1[13];
  uint64_t v15 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v14, v15);
  uint64_t v16 = type metadata accessor for PeripheralConnectionMaterial(0);
  sub_10001CFB8(*(void *)(v14 + *(int *)(v16 + 20)), *(void *)(v14 + *(int *)(v16 + 20) + 8));
  uint64_t v17 = v8 + v1[14];
  uint64_t v18 = type metadata accessor for P256PrivateKey();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v17, v18);
  uint64_t v19 = v8 + v1[15];
  uint64_t v20 = type metadata accessor for SymmetricKey256();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v19, v20);
  v9(v0 + v12, v5);

  return _swift_deallocObject(v0, ((v22 + v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v13);
}

uint64_t sub_100FFC0A4(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(type metadata accessor for LocalFindableAccessoryRecord() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v9 = (v6 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = v1[2];
  uint64_t v11 = v1[3];
  uint64_t v12 = v1[4];
  uint64_t v13 = (uint64_t)v1 + v9;
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v14;
  *uint64_t v14 = v3;
  v14[1] = sub_10001D2E4;
  return sub_100FE1A14(a1, v10, v11, v12, (uint64_t)v1 + v6, v13);
}

uint64_t sub_100FFC23C()
{
  uint64_t v1 = (int *)type metadata accessor for LocalFindableAccessoryRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v5 = v0 + v3;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  v7(v0 + v3, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001CFB8(*(void *)(v5 + v1[7]), *(void *)(v5 + v1[7] + 8));
  uint64_t v8 = (uint64_t *)(v0 + v3 + v1[8]);
  unint64_t v9 = v8[1];
  if (v9 >> 60 != 15) {
    sub_10001CFB8(*v8, v9);
  }
  v7(v5 + v1[9], v6);
  uint64_t v10 = v5 + v1[13];
  uint64_t v11 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  uint64_t v12 = type metadata accessor for PeripheralConnectionMaterial(0);
  sub_10001CFB8(*(void *)(v10 + *(int *)(v12 + 20)), *(void *)(v10 + *(int *)(v12 + 20) + 8));
  uint64_t v13 = v5 + v1[14];
  uint64_t v14 = type metadata accessor for P256PrivateKey();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8))(v13, v14);
  uint64_t v15 = v5 + v1[15];
  uint64_t v16 = type metadata accessor for SymmetricKey256();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v15, v16);

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_100FFC480(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for LocalFindableAccessoryRecord() - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100033F68;
  return sub_100FE218C(a1, v5, v6);
}

uint64_t sub_100FFC56C(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100033F68;
  return sub_100FE458C(a1, v5, v6);
}

uint64_t sub_100FFC654(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100033F68;
  return sub_100FE7B8C(a1, v4, v5, v6);
}

uint64_t sub_100FFC714(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100FFC77C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100FFC7DC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100FFC848()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100FFC920()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1005545FC;
  return sub_100FE91DC(v3, v4);
}

uint64_t sub_100FFCA2C()
{
  uint64_t v1 = (int *)type metadata accessor for LocalFindableAccessoryRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v22 = *(void *)(v6 + 64);
  swift_release();
  uint64_t v8 = v0 + v3;
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v9(v0 + v3, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001CFB8(*(void *)(v8 + v1[7]), *(void *)(v8 + v1[7] + 8));
  uint64_t v10 = (uint64_t *)(v0 + v3 + v1[8]);
  unint64_t v11 = v10[1];
  if (v11 >> 60 != 15) {
    sub_10001CFB8(*v10, v11);
  }
  uint64_t v12 = (v3 + v4 + v7) & ~v7;
  uint64_t v13 = v2 | v7 | 7;
  v9(v8 + v1[9], v5);
  uint64_t v14 = v8 + v1[13];
  uint64_t v15 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v14, v15);
  uint64_t v16 = type metadata accessor for PeripheralConnectionMaterial(0);
  sub_10001CFB8(*(void *)(v14 + *(int *)(v16 + 20)), *(void *)(v14 + *(int *)(v16 + 20) + 8));
  uint64_t v17 = v8 + v1[14];
  uint64_t v18 = type metadata accessor for P256PrivateKey();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v17, v18);
  uint64_t v19 = v8 + v1[15];
  uint64_t v20 = type metadata accessor for SymmetricKey256();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v19, v20);
  v9(v0 + v12, v5);

  return _swift_deallocObject(v0, ((v22 + v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v13);
}

uint64_t sub_100FFCCE0()
{
  uint64_t v2 = *(void *)(type metadata accessor for LocalFindableAccessoryRecord() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  uint64_t v5 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v6 = (v3 + v4 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v0 + 16);
  uint64_t v8 = v0 + v6;
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v9;
  void *v9 = v1;
  v9[1] = sub_10013067C;
  return sub_100FE88F4(v7, v0 + v3, v8);
}

uint64_t sub_100FFCE4C()
{
  uint64_t v1 = type metadata accessor for Device();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 17) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100FFCEE8()
{
  uint64_t v2 = *(void *)(type metadata accessor for Device() - 8);
  char v3 = *(unsigned char *)(v0 + 16);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  void *v5 = v1;
  v5[1] = sub_1005545FC;
  return sub_100FE85A0(v3, v4);
}

uint64_t sub_100FFCFF4@<X0>(uint64_t *a1@<X8>)
{
  return sub_100FFD300((uint64_t (*)(void, void))sub_100FF45E0, a1);
}

uint64_t sub_100FFD024()
{
  return sub_100FF8BBC(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void (**)(void))(v0 + 32));
}

void sub_100FFD034()
{
  sub_100DFFE2C(*(void **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_100FFD03C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100FFD04C@<X0>(uint64_t *a1@<X8>)
{
  return sub_100FFD300((uint64_t (*)(void, void))sub_100FF68B4, a1);
}

uint64_t sub_100FFD07C()
{
  return sub_100FF978C(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void (**)(void))(v0 + 32));
}

uint64_t sub_100FFD08C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100FFD09C@<X0>(uint64_t *a1@<X8>)
{
  return sub_100FFD300((uint64_t (*)(void, void))sub_100FF3A44, a1);
}

uint64_t sub_100FFD0CC()
{
  return sub_100FF87CC(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void (**)(void))(v0 + 32));
}

void sub_100FFD0DC()
{
  sub_100DFFDF4(*(void **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_100FFD0E4()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100FFD0F4@<X0>(uint64_t *a1@<X8>)
{
  return sub_100FFD300((uint64_t (*)(void, void))sub_100FF517C, a1);
}

uint64_t sub_100FFD124()
{
  return sub_100FF8FAC(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void (**)(void))(v0 + 32));
}

uint64_t sub_100FFD134()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100FFD144@<X0>(uint64_t *a1@<X8>)
{
  return sub_100FFD300((uint64_t (*)(void, void))sub_100FF230C, a1);
}

uint64_t sub_100FFD174()
{
  return sub_100FF7FEC(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void (**)(void))(v0 + 32));
}

void sub_100FFD184()
{
  sub_100DFFD84(*(void **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_100FFD18C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100FFD19C@<X0>(uint64_t *a1@<X8>)
{
  return sub_100FFD300((uint64_t (*)(void, void))sub_100FF5D18, a1);
}

uint64_t sub_100FFD1CC()
{
  return sub_100FF939C(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void (**)(void))(v0 + 32));
}

void sub_100FFD1DC()
{
  sub_100DFFE9C(*(void **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_100FFD1E4()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100FFD1F4(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100FFD23C()
{
  return sub_100FD3080();
}

uint64_t sub_100FFD244()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10001D2E4;
  return sub_100FD3118();
}

uint64_t sub_100FFD2D4@<X0>(uint64_t *a1@<X8>)
{
  return sub_100FFD300((uint64_t (*)(void, void))sub_100FF2EA8, a1);
}

uint64_t sub_100FFD300@<X0>(uint64_t (*a1)(void, void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = a1(*(void *)(v2 + 16), *(void *)(v2 + 24));
  if (!v3) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_100FFD33C()
{
  swift_release();

  if (*(void *)(v0 + 32)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100FFD38C()
{
  return sub_100FF83DC(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void (**)(void))(v0 + 32));
}

uint64_t sub_100FFD39C()
{
  return _swift_deallocObject(v0, 32, 7);
}

unsigned char *storeEnumTagSinglePayload for BTFindingEntitlement(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100FFD448);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for BTFindingEntitlement()
{
  return &type metadata for BTFindingEntitlement;
}

ValueMetadata *type metadata accessor for BTFindingService.Error()
{
  return &type metadata for BTFindingService.Error;
}

unint64_t sub_100FFD494()
{
  unint64_t result = qword_1016668D8;
  if (!qword_1016668D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016668D8);
  }
  return result;
}

unint64_t sub_100FFD4EC()
{
  unint64_t result = qword_1016668E0;
  if (!qword_1016668E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016668E0);
  }
  return result;
}

uint64_t sub_100FFD61C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100FFD630);
}

uint64_t sub_100FFD630(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for FMNAccountType();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_100FFD6E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100FFD6F4);
}

void *sub_100FFD6F4(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *unint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for FMNAccountType();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for RoleCategoriesEndpoint()
{
  uint64_t result = qword_101666948;
  if (!qword_101666948) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100FFD7E8()
{
  sub_10000588C(&qword_101639580);
  OS_dispatch_queue.sync<A>(execute:)();
  URLComponents.init()();
  URLComponents.scheme.setter();
  URLComponents.host.setter();
  URLComponents.path.setter();
  uint64_t v0 = (uint64_t (*)(uint64_t *, void))URLComponents.path.modify();
  v1._countAndFlagsBits = 0x73656C6F722FLL;
  v1._object = (void *)0xE600000000000000;
  String.append(_:)(v1);
  return v0(&v3, 0);
}

uint64_t *sub_100FFD8E4(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v29 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v29 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_1000361E0(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a2[2];
    unint64_t v10 = a2[3];
    sub_1000361E0(v9, v10);
    a1[2] = v9;
    a1[3] = v10;
    uint64_t v11 = a2[4];
    unint64_t v12 = a2[5];
    sub_1000361E0(v11, v12);
    a1[4] = v11;
    a1[5] = v12;
    uint64_t v13 = a2[6];
    unint64_t v14 = a2[7];
    sub_1000361E0(v13, v14);
    a1[6] = v13;
    a1[7] = v14;
    uint64_t v15 = a2[8];
    unint64_t v16 = a2[9];
    sub_1000361E0(v15, v16);
    a1[8] = v15;
    a1[9] = v16;
    uint64_t v17 = a3[9];
    uint64_t v18 = (char *)a1 + v17;
    uint64_t v19 = (char *)a2 + v17;
    uint64_t v20 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16))(v18, v19, v20);
    uint64_t v21 = a3[10];
    uint64_t v22 = a3[11];
    char v23 = (uint64_t *)((char *)a1 + v21);
    unint64_t v24 = (uint64_t *)((char *)a2 + v21);
    uint64_t v25 = v24[1];
    *char v23 = *v24;
    v23[1] = v25;
    uint64_t v26 = (char *)a1 + v22;
    uint64_t v27 = (_OWORD *)((char *)a2 + v22);
    unint64_t v28 = *(uint64_t *)((char *)a2 + v22 + 8);
    swift_bridgeObjectRetain();
    if (v28 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v26 = *v27;
    }
    else
    {
      uint64_t v30 = *(void *)v27;
      sub_1000361E0(v30, v28);
      *(void *)uint64_t v26 = v30;
      *((void *)v26 + 1) = v28;
    }
    *(uint64_t *)((char *)a1 + a3[12]) = *(uint64_t *)((char *)a2 + a3[12]);
  }
  return a1;
}

uint64_t sub_100FFDA78(uint64_t a1, uint64_t a2)
{
  sub_10001CFB8(*(void *)a1, *(void *)(a1 + 8));
  sub_10001CFB8(*(void *)(a1 + 16), *(void *)(a1 + 24));
  sub_10001CFB8(*(void *)(a1 + 32), *(void *)(a1 + 40));
  sub_10001CFB8(*(void *)(a1 + 48), *(void *)(a1 + 56));
  sub_10001CFB8(*(void *)(a1 + 64), *(void *)(a1 + 72));
  uint64_t v4 = a1 + *(int *)(a2 + 36);
  uint64_t v5 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v7 = (uint64_t *)(a1 + *(int *)(a2 + 44));
  unint64_t v8 = v7[1];
  if (v8 >> 60 != 15)
  {
    uint64_t v9 = *v7;
    return sub_10001CFB8(v9, v8);
  }
  return result;
}

uint64_t *sub_100FFDB5C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000361E0(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  sub_1000361E0(v8, v9);
  a1[2] = v8;
  a1[3] = v9;
  uint64_t v10 = a2[4];
  unint64_t v11 = a2[5];
  sub_1000361E0(v10, v11);
  a1[4] = v10;
  a1[5] = v11;
  uint64_t v12 = a2[6];
  unint64_t v13 = a2[7];
  sub_1000361E0(v12, v13);
  a1[6] = v12;
  a1[7] = v13;
  uint64_t v14 = a2[8];
  unint64_t v15 = a2[9];
  sub_1000361E0(v14, v15);
  a1[8] = v14;
  a1[9] = v15;
  uint64_t v16 = a3[9];
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
  uint64_t v20 = a3[10];
  uint64_t v21 = a3[11];
  uint64_t v22 = (uint64_t *)((char *)a1 + v20);
  char v23 = (uint64_t *)((char *)a2 + v20);
  uint64_t v24 = v23[1];
  *uint64_t v22 = *v23;
  v22[1] = v24;
  uint64_t v25 = (char *)a1 + v21;
  uint64_t v26 = (_OWORD *)((char *)a2 + v21);
  unint64_t v27 = *(uint64_t *)((char *)a2 + v21 + 8);
  swift_bridgeObjectRetain();
  if (v27 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v25 = *v26;
  }
  else
  {
    uint64_t v28 = *(void *)v26;
    sub_1000361E0(v28, v27);
    *(void *)uint64_t v25 = v28;
    *((void *)v25 + 1) = v27;
  }
  *(uint64_t *)((char *)a1 + a3[12]) = *(uint64_t *)((char *)a2 + a3[12]);
  return a1;
}

uint64_t *sub_100FFDCA0(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000361E0(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10001CFB8(v8, v9);
  uint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  sub_1000361E0(v10, v11);
  uint64_t v12 = a1[2];
  unint64_t v13 = a1[3];
  a1[2] = v10;
  a1[3] = v11;
  sub_10001CFB8(v12, v13);
  uint64_t v14 = a2[4];
  unint64_t v15 = a2[5];
  sub_1000361E0(v14, v15);
  uint64_t v16 = a1[4];
  unint64_t v17 = a1[5];
  a1[4] = v14;
  a1[5] = v15;
  sub_10001CFB8(v16, v17);
  uint64_t v18 = a2[6];
  unint64_t v19 = a2[7];
  sub_1000361E0(v18, v19);
  uint64_t v20 = a1[6];
  unint64_t v21 = a1[7];
  a1[6] = v18;
  a1[7] = v19;
  sub_10001CFB8(v20, v21);
  uint64_t v22 = a2[8];
  unint64_t v23 = a2[9];
  sub_1000361E0(v22, v23);
  uint64_t v24 = a1[8];
  unint64_t v25 = a1[9];
  a1[8] = v22;
  a1[9] = v23;
  sub_10001CFB8(v24, v25);
  uint64_t v26 = a3[9];
  unint64_t v27 = (char *)a1 + v26;
  uint64_t v28 = (char *)a2 + v26;
  uint64_t v29 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 24))(v27, v28, v29);
  uint64_t v30 = a3[10];
  unint64_t v31 = (uint64_t *)((char *)a1 + v30);
  uint64_t v32 = (uint64_t *)((char *)a2 + v30);
  void *v31 = *v32;
  v31[1] = v32[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v33 = a3[11];
  uint64_t v34 = (uint64_t *)((char *)a1 + v33);
  os_log_type_t v35 = (uint64_t *)((char *)a2 + v33);
  unint64_t v36 = *(uint64_t *)((char *)a2 + v33 + 8);
  if (*(unint64_t *)((char *)a1 + v33 + 8) >> 60 != 15)
  {
    if (v36 >> 60 != 15)
    {
      uint64_t v38 = *v35;
      sub_1000361E0(v38, v36);
      uint64_t v39 = *v34;
      unint64_t v40 = v34[1];
      *uint64_t v34 = v38;
      v34[1] = v36;
      sub_10001CFB8(v39, v40);
      goto LABEL_8;
    }
    sub_1001356D0((uint64_t)v34);
    goto LABEL_6;
  }
  if (v36 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)uint64_t v34 = *(_OWORD *)v35;
    goto LABEL_8;
  }
  uint64_t v37 = *v35;
  sub_1000361E0(v37, v36);
  *uint64_t v34 = v37;
  v34[1] = v36;
LABEL_8:
  *(uint64_t *)((char *)a1 + a3[12]) = *(uint64_t *)((char *)a2 + a3[12]);
  return a1;
}

_OWORD *sub_100FFDE68(_OWORD *a1, _OWORD *a2, int *a3)
{
  long long v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  long long v7 = a2[3];
  a1[2] = a2[2];
  a1[3] = v7;
  a1[4] = a2[4];
  uint64_t v8 = a3[9];
  unint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  uint64_t v12 = a3[11];
  *(_OWORD *)((char *)a1 + a3[10]) = *(_OWORD *)((char *)a2 + a3[10]);
  *(_OWORD *)((char *)a1 + v12) = *(_OWORD *)((char *)a2 + v12);
  *(void *)((char *)a1 + a3[12]) = *(void *)((char *)a2 + a3[12]);
  return a1;
}

uint64_t *sub_100FFDF24(uint64_t *a1, _OWORD *a2, int *a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_10001CFB8(v6, v7);
  uint64_t v8 = a1[2];
  unint64_t v9 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_10001CFB8(v8, v9);
  uint64_t v10 = a1[4];
  unint64_t v11 = a1[5];
  *((_OWORD *)a1 + 2) = a2[2];
  sub_10001CFB8(v10, v11);
  uint64_t v12 = a1[6];
  unint64_t v13 = a1[7];
  *((_OWORD *)a1 + 3) = a2[3];
  sub_10001CFB8(v12, v13);
  uint64_t v14 = a1[8];
  unint64_t v15 = a1[9];
  *((_OWORD *)a1 + 4) = a2[4];
  sub_10001CFB8(v14, v15);
  uint64_t v16 = a3[9];
  unint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 40))(v17, v18, v19);
  uint64_t v20 = a3[10];
  unint64_t v21 = (uint64_t *)((char *)a1 + v20);
  uint64_t v22 = (uint64_t *)((char *)a2 + v20);
  uint64_t v24 = *v22;
  uint64_t v23 = v22[1];
  *unint64_t v21 = v24;
  v21[1] = v23;
  swift_bridgeObjectRelease();
  uint64_t v25 = a3[11];
  uint64_t v26 = (uint64_t *)((char *)a1 + v25);
  unint64_t v27 = (uint64_t *)((char *)a2 + v25);
  unint64_t v28 = *(uint64_t *)((char *)a1 + v25 + 8);
  if (v28 >> 60 != 15)
  {
    unint64_t v29 = v27[1];
    if (v29 >> 60 != 15)
    {
      uint64_t v30 = *v26;
      *uint64_t v26 = *v27;
      v26[1] = v29;
      sub_10001CFB8(v30, v28);
      goto LABEL_6;
    }
    sub_1001356D0((uint64_t)v26);
  }
  *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
LABEL_6:
  *(uint64_t *)((char *)a1 + a3[12]) = *(void *)((char *)a2 + a3[12]);
  return a1;
}

uint64_t sub_100FFE074(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100FFE088);
}

uint64_t sub_100FFE088(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 36);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 40) + 8);
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    return (v12 + 1);
  }
}

uint64_t sub_100FFE150(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100FFE164);
}

uint64_t sub_100FFE164(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 36);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 40) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for AirPodsPairingLockCheckResponse()
{
  uint64_t result = qword_1016669D8;
  if (!qword_1016669D8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100FFE274()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_100FFE334(char a1)
{
  unint64_t result = 1684628325;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x644970696863;
      break;
    case 2:
      unint64_t result = 0x754E6C6169726573;
      break;
    case 3:
      unint64_t result = 0x5364656573;
      break;
    case 4:
      unint64_t result = 0x6953726576726573;
      break;
    case 5:
      unint64_t result = 0x6449616E6D66;
      break;
    case 6:
      unint64_t result = 0x704164656B73616DLL;
      break;
    case 7:
      unint64_t result = 0xD000000000000013;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100FFE440(char a1)
{
  unint64_t result = 1684628325;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x644970696863;
      break;
    case 2:
      unint64_t result = 0x754E6C6169726573;
      break;
    case 3:
      unint64_t result = 0x5364656573;
      break;
    case 4:
      unint64_t result = 0x6953726576726573;
      break;
    case 5:
      unint64_t result = 0x6449616E6D66;
      break;
    case 6:
      unint64_t result = 0x704164656B73616DLL;
      break;
    case 7:
      unint64_t result = 0xD000000000000013;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100FFE54C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v25 = a2;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v26 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_101666A30);
  uint64_t v27 = *(void *)(v7 - 8);
  uint64_t v28 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for AirPodsPairingLockCheckResponse();
  uint64_t v11 = __chkstk_darwin(v10);
  unint64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v13[*(int *)(v11 + 48)] = 0;
  uint64_t v14 = a1[3];
  uint64_t v30 = a1;
  sub_10001CD44(a1, v14);
  sub_100FFEC8C();
  unint64_t v29 = v9;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v30);
  }
  uint64_t v15 = v27;
  uint64_t v24 = v10;
  char v32 = 0;
  unint64_t v16 = sub_100037AA0();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(_OWORD *)unint64_t v13 = v31;
  char v32 = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v17 = (uint64_t)v30;
  *((_OWORD *)v13 + 1) = v31;
  char v32 = 2;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *((_OWORD *)v13 + 2) = v31;
  char v32 = 3;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *((_OWORD *)v13 + 3) = v31;
  char v32 = 4;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  unint64_t v23 = v16;
  *((_OWORD *)v13 + 4) = v31;
  LOBYTE(v31) = 5;
  sub_100342C5C();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v18 = v24;
  (*(void (**)(char *, char *, uint64_t))(v26 + 32))(&v13[*(int *)(v24 + 36)], v6, v4);
  LOBYTE(v31) = 6;
  uint64_t v19 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v20 = (uint64_t *)&v13[*(int *)(v18 + 40)];
  *uint64_t v20 = v19;
  v20[1] = v21;
  char v32 = 7;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v15 + 8))(v29, v28);
  *(_OWORD *)&v13[*(int *)(v18 + 44)] = v31;
  sub_100FFECE0((uint64_t)v13, v25);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v17);
  return sub_100FFED44((uint64_t)v13);
}

uint64_t sub_100FFEB48(unsigned __int8 *a1, char *a2)
{
  return sub_10071A92C(*a1, *a2);
}

Swift::Int sub_100FFEB54()
{
  return sub_100720C30();
}

uint64_t sub_100FFEB60()
{
  return sub_10071F53C();
}

Swift::Int sub_100FFEB68()
{
  return sub_100720C30();
}

unint64_t sub_100FFEB70@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100FFEFAC(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_100FFEBA0@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_100FFE334(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_100FFEBCC()
{
  return sub_100FFE440(*v0);
}

unint64_t sub_100FFEBD4@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100FFEFAC(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100FFEBFC(uint64_t a1)
{
  unint64_t v2 = sub_100FFEC8C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100FFEC38(uint64_t a1)
{
  unint64_t v2 = sub_100FFEC8C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100FFEC74@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100FFE54C(a1, a2);
}

unint64_t sub_100FFEC8C()
{
  unint64_t result = qword_101666A38;
  if (!qword_101666A38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101666A38);
  }
  return result;
}

uint64_t sub_100FFECE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AirPodsPairingLockCheckResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100FFED44(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AirPodsPairingLockCheckResponse();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for AirPodsPairingLockCheckResponse.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *unint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100FFEE6CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsPairingLockCheckResponse.CodingKeys()
{
  return &type metadata for AirPodsPairingLockCheckResponse.CodingKeys;
}

unint64_t sub_100FFEEA8()
{
  unint64_t result = qword_101666A40;
  if (!qword_101666A40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101666A40);
  }
  return result;
}

unint64_t sub_100FFEF00()
{
  unint64_t result = qword_101666A48;
  if (!qword_101666A48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101666A48);
  }
  return result;
}

unint64_t sub_100FFEF58()
{
  unint64_t result = qword_101666A50;
  if (!qword_101666A50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101666A50);
  }
  return result;
}

unint64_t sub_100FFEFAC(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1015A50E0, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 8) {
    return 8;
  }
  else {
    return v3;
  }
}

uint64_t sub_100FFEFF8()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100FFF058()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_100FFF0A8(void *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v39 = *(void *)(v8 - 8);
  uint64_t v40 = v8;
  __chkstk_darwin(v8);
  uint64_t v38 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v4 + 24) = 0;
  *(void *)(v4 + 32) = 0;
  *(_OWORD *)(v4 + 40) = xmmword_10134E540;
  *(void *)(v4 + 56) = 0xF000000000000000;
  *(_WORD *)(v4 + 64) = 0;
  uint64_t v10 = v4 + OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_signpostID;
  if (qword_1016372A8 != -1) {
    swift_once();
  }
  id v11 = (id)qword_10170F000;
  OSSignpostID.init(log:)();
  uint64_t v12 = v4 + OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_ackPairingLockSignpost;
  *(void *)uint64_t v12 = "ackPairingLock";
  *(void *)(v12 + 8) = 14;
  *(unsigned char *)(v12 + 16) = 2;
  unint64_t v13 = (void *)(v4 + OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_cleanupBlock);
  *unint64_t v13 = 0;
  v13[1] = 0;
  uint64_t v14 = OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_locationMonitor;
  *(void *)(v4 + OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_locationMonitor) = a1;
  type metadata accessor for SPAnalyticsItemPairEvent(0);
  swift_allocObject();
  id v43 = a1;
  uint64_t v15 = sub_1011973A8(1);
  uint64_t v16 = OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_pairingAnalytics;
  *(void *)(v4 + OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_pairingAnalytics) = v15;
  uint64_t v17 = OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_serialQueue;
  *(void *)(v4 + OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_serialQueue) = a3;
  *(void *)(v4 + OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_validator) = a2;
  id v42 = a3;
  swift_retain();
  uint64_t v18 = static Data.random(bytes:)();
  uint64_t v20 = v18;
  unint64_t v21 = v19;
  switch(v19 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(v18), v18))
      {
        __break(1u);
LABEL_18:
        __break(1u);
        JUMPOUT(0x100FFF640);
      }
      uint64_t v41 = v16;
      uint64_t v22 = v17;
      uint64_t v23 = v14;
      uint64_t v24 = v10;
      uint64_t v25 = HIDWORD(v18) - (int)v18;
LABEL_8:
      sub_1000361E0(v18, v19);
LABEL_9:
      uint64_t v10 = v24;
      uint64_t v14 = v23;
      uint64_t v17 = v22;
      if (v25 == 32)
      {
        uint64_t v28 = v38;
        UUID.init()();
        id v29 = objc_allocWithZone((Class)SPPairingSession);
        sub_1000361E0(v20, v21);
        Class isa = UUID._bridgeToObjectiveC()().super.isa;
        Class v31 = Data._bridgeToObjectiveC()().super.isa;
        id v32 = [v29 initWithIdentifier:isa nonce:v31];

        sub_10001CFB8(v20, v21);
        (*(void (**)(char *, uint64_t))(v39 + 8))(v28, v40);
        *(void *)(v4 + 16) = v32;
        uint64_t v33 = qword_1016371D8;
        id v34 = v32;
        if (v33 != -1) {
          swift_once();
        }
        uint64_t v44 = 0x7365547265646E75;
        unint64_t v45 = 0xE900000000000074;
        SynchronousCache.cachedValue<A>(key:computeBlock:)();
        swift_bridgeObjectRelease();
        if ((v46 & 1) == 0)
        {
          id v35 = *(id *)(v4 + OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_locationMonitor);
          CurrentLocationMonitor.requestLocation()();
        }
        type metadata accessor for Transaction();
        static Transaction.named<A>(_:with:)();

        swift_release();
        sub_10001CFB8(v20, v21);

        sub_10001CFB8(v20, v21);
      }
      else
      {
LABEL_15:
        sub_10001CFB8(v20, v21);
        static os_log_type_t.error.getter();
        os_log(_:dso:log:_:_:)();

        swift_release();
        sub_10001CFB8(v20, v21);
        swift_release();
        sub_100037A24(*(void *)(v4 + 32), *(void *)(v4 + 40));
        sub_100037A24(*(void *)(v4 + 48), *(void *)(v4 + 56));
        uint64_t v36 = type metadata accessor for OSSignpostID();
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v36 - 8) + 8))(v10, v36);
        swift_release();

        swift_release();
        sub_1000A1534(*(void *)(v4 + OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_cleanupBlock));
        type metadata accessor for ItemPairingCoordinator();
        swift_deallocPartialClassInstance();
        return 0;
      }
      return v4;
    case 2uLL:
      uint64_t v41 = v16;
      uint64_t v22 = v17;
      uint64_t v23 = v14;
      uint64_t v24 = v10;
      uint64_t v27 = *(void *)(v18 + 16);
      uint64_t v26 = *(void *)(v18 + 24);
      uint64_t v25 = v26 - v27;
      if (!__OFSUB__(v26, v27)) {
        goto LABEL_8;
      }
      goto LABEL_18;
    case 3uLL:
      goto LABEL_15;
    default:
      uint64_t v41 = v16;
      uint64_t v22 = v17;
      uint64_t v23 = v14;
      uint64_t v24 = v10;
      uint64_t v25 = BYTE6(v19);
      goto LABEL_9;
  }
}

void sub_100FFF650()
{
  static os_log_type_t.debug.getter();
  sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
  uint64_t v0 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();

  Transaction.capture()();
}

uint64_t sub_100FFF6DC()
{
  uint64_t v1 = v0;
  Swift::String v2 = (uint64_t *)(v0 + OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_cleanupBlock);
  uint64_t v3 = *(void (**)(uint64_t))(v0 + OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_cleanupBlock);
  if (v3)
  {
    uint64_t v4 = swift_retain();
    v3(v4);
    sub_1000A1534((uint64_t)v3);
  }

  swift_release();
  sub_100037A24(*(void *)(v0 + 32), *(void *)(v0 + 40));
  sub_100037A24(*(void *)(v0 + 48), *(void *)(v0 + 56));
  uint64_t v5 = v0 + OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_signpostID;
  uint64_t v6 = type metadata accessor for OSSignpostID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  swift_release();

  swift_release();
  sub_1000A1534(*v2);
  return v1;
}

uint64_t sub_100FFF7E8()
{
  sub_100FFF6DC();

  return swift_deallocClassInstance();
}

uint64_t sub_100FFF840()
{
  return type metadata accessor for ItemPairingCoordinator();
}

uint64_t type metadata accessor for ItemPairingCoordinator()
{
  uint64_t result = qword_101666AA0;
  if (!qword_101666AA0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100FFF894()
{
  uint64_t result = type metadata accessor for OSSignpostID();
  if (v1 <= 0x3F) {
    return swift_updateClassMetadata2();
  }
  return result;
}

uint64_t sub_100FFF980(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchTime();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  id v11 = (char *)&v15 - v10;
  if (qword_1016371D8 != -1) {
    swift_once();
  }
  uint64_t v16 = 0x7365547265646E75;
  unint64_t v17 = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)();
  swift_bridgeObjectRelease();
  if ((v18 & 1) == 0)
  {
    if (qword_101636CD8 != -1) {
      swift_once();
    }
    OS_dispatch_queue.sync<A>(execute:)();
    sub_1010ABD60(v16);
    swift_bridgeObjectRelease();
  }
  static DispatchTime.now()();
  + infix(_:_:)();
  uint64_t v12 = *(void (**)(char *, uint64_t))(v6 + 8);
  v12(v9, v5);
  uint64_t v13 = type metadata accessor for Transaction();
  __chkstk_darwin(v13);
  *(&v15 - 4) = v2;
  *(&v15 - 3) = (uint64_t)v11;
  *(&v15 - 2) = a1;
  *(&v15 - 1) = a2;
  static Transaction.named<A>(_:with:)();
  return ((uint64_t (*)(char *, uint64_t))v12)(v11, v5);
}

uint64_t sub_100FFFC3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v21 = a3;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v20 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  id v11 = (char *)v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v14 = (char *)v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[1] = *(void *)(a2 + OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_serialQueue);
  uint64_t v15 = (void *)swift_allocObject();
  void v15[2] = a1;
  v15[3] = a2;
  v15[4] = a4;
  v15[5] = a5;
  aBlock[4] = sub_1010048F4;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_101601870;
  uint64_t v16 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  sub_1000BD0E8(a4);
  static DispatchQoS.unspecified.getter();
  aBlock[7] = _swiftEmptyArrayStorage;
  sub_101004620((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_10002FE84();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v19);
  return swift_release();
}

uint64_t sub_100FFFF10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v53 = a3;
  uint64_t v54 = a4;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v60 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v57 = (char *)v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v58 = *(void *)(v7 - 8);
  uint64_t v59 = v7;
  __chkstk_darwin(v7);
  uint64_t v56 = (char *)v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = type metadata accessor for UUID();
  uint64_t v55 = *(void *)(v61 - 8);
  uint64_t v13 = __chkstk_darwin(v61);
  uint64_t v15 = (char *)v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  unint64_t v17 = (char *)v49 - v16;
  Transaction.capture()();
  id v18 = [*(id *)(a2 + 16) identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  LODWORD(v18) = *(unsigned __int8 *)(a2 + 64);
  int v52 = static os_log_type_t.default.getter();
  if (v18 > 1)
  {
    uint64_t v50 = v17;
    uint64_t v51 = v5;
    if (qword_1016372A8 != -1) {
      swift_once();
    }
    v49[1] = qword_10170F000;
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v32 = swift_allocObject();
    *(_OWORD *)(v32 + 16) = xmmword_101347BA0;
    id v33 = [*(id *)(a2 + 16) identifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v34 = UUID.uuidString.getter();
    uint64_t v36 = v35;
    uint64_t v55 = *(void *)(v55 + 8);
    ((void (*)(char *, uint64_t))v55)(v15, v61);
    *(void *)(v32 + 56) = &type metadata for String;
    unint64_t v37 = sub_10000B4CC();
    *(void *)(v32 + 64) = v37;
    *(void *)(v32 + 32) = v34;
    *(void *)(v32 + 40) = v36;
    LOBYTE(aBlock) = *(unsigned char *)(a2 + 64);
    uint64_t v38 = String.init<A>(describing:)();
    *(void *)(v32 + 96) = &type metadata for String;
    *(void *)(v32 + 104) = v37;
    *(void *)(v32 + 72) = v38;
    *(void *)(v32 + 80) = v39;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
    (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchQoS.QoSClass.default(_:), v9);
    uint64_t v40 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    uint64_t v41 = swift_allocObject();
    uint64_t v43 = v53;
    uint64_t v42 = v54;
    *(void *)(v41 + 16) = v53;
    *(void *)(v41 + 24) = v42;
    uint64_t v67 = sub_101004904;
    uint64_t v68 = v41;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v64 = 1107296256;
    uint64_t v65 = sub_1004B5480;
    uint64_t v66 = &unk_1016018C0;
    uint64_t v44 = _Block_copy(&aBlock);
    sub_1000BD0E8(v43);
    unint64_t v45 = v56;
    static DispatchQoS.unspecified.getter();
    uint64_t v62 = _swiftEmptyArrayStorage;
    sub_101004620((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_10002FE84();
    char v46 = v57;
    uint64_t v47 = v51;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v44);

    (*(void (**)(char *, uint64_t))(v60 + 8))(v46, v47);
    (*(void (**)(char *, uint64_t))(v58 + 8))(v45, v59);
    ((void (*)(char *, uint64_t))v55)(v50, v61);
  }
  else
  {
    if (qword_1016372A8 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_101342130;
    uint64_t v20 = UUID.uuidString.getter();
    uint64_t v22 = v21;
    *(void *)(v19 + 56) = &type metadata for String;
    *(void *)(v19 + 64) = sub_10000B4CC();
    *(void *)(v19 + 32) = v20;
    *(void *)(v19 + 40) = v22;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    uint64_t v23 = (void *)sub_101000778();
    sub_1003B579C(v23, v24 & 1);
    sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
    (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchQoS.QoSClass.default(_:), v9);
    uint64_t v25 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    uint64_t v26 = swift_allocObject();
    uint64_t v28 = v53;
    uint64_t v27 = v54;
    *(void *)(v26 + 16) = v53;
    *(void *)(v26 + 24) = v27;
    uint64_t v67 = sub_101004910;
    uint64_t v68 = v26;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v64 = 1107296256;
    uint64_t v65 = sub_1004B5480;
    uint64_t v66 = &unk_101601910;
    id v29 = _Block_copy(&aBlock);
    sub_1000BD0E8(v28);
    uint64_t v30 = v56;
    static DispatchQoS.unspecified.getter();
    uint64_t v62 = _swiftEmptyArrayStorage;
    sub_101004620((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_10002FE84();
    Class v31 = v57;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v29);

    (*(void (**)(char *, uint64_t))(v60 + 8))(v31, v5);
    (*(void (**)(char *, uint64_t))(v58 + 8))(v30, v59);
    (*(void (**)(char *, uint64_t))(v55 + 8))(v17, v61);
  }
  return swift_release();
}

uint64_t sub_101000778()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (uint64_t *)((char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = *(void **)(v1 + OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_serialQueue);
  *uint64_t v12 = v13;
  (*(void (**)(void *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  id v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
  if (v13)
  {
    int v52 = v4;
    static os_log_type_t.default.getter();
    if (qword_1016372A8 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_101342130;
  id v16 = [*(id *)(v1 + 16) identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v17 = UUID.uuidString.getter();
  uint64_t v19 = v18;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  *(void *)(v15 + 56) = &type metadata for String;
  *(void *)(v15 + 64) = sub_10000B4CC();
  *(void *)(v15 + 32) = v17;
  *(void *)(v15 + 40) = v19;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  id v20 = [*(id *)(v1 + 16) ecid];
  if (!v20)
  {
LABEL_9:
    static os_log_type_t.error.getter();
    os_log(_:dso:log:_:_:)();
    type metadata accessor for SPPairingSessionError(0);
    uint64_t v53 = 6;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_101004620(&qword_101638770, type metadata accessor for SPPairingSessionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    return v55[0];
  }
  uint64_t v21 = v20;
  uint64_t v22 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v24 = v23;

  id v25 = [*(id *)(v1 + 16) chipId];
  if (!v25)
  {
LABEL_8:
    sub_10001CFB8(v22, v24);
    goto LABEL_9;
  }
  uint64_t v26 = v25;
  uint64_t v27 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v29 = v28;

  id v30 = [*(id *)(v1 + 16) serialNumber];
  if (!v30)
  {
    sub_10001CFB8(v27, v29);
    goto LABEL_8;
  }
  Class v31 = v30;
  uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v34 = v33;
  uint64_t v51 = v33;

  uint64_t v35 = *(void **)(v1 + 16);
  sub_1000361E0(v22, v24);
  sub_1000361E0(v27, v29);
  id v36 = [v35 productId];
  id v37 = [*(id *)(v1 + 16) vendorId];
  v55[0] = v22;
  v55[1] = v24;
  v55[2] = v27;
  v55[3] = v29;
  v55[4] = v32;
  v55[5] = v34;
  v55[6] = (uint64_t)v36;
  v55[7] = (uint64_t)v37;
  uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
  unint64_t v50 = v29;
  uint64_t v39 = (uint64_t)v52;
  v38(v52, 1, 1, v5);
  sub_1008B9BC0(v39, v55);
  sub_100270E18(v39);
  uint64_t v40 = swift_allocObject();
  type metadata accessor for SPPairingSessionError(0);
  uint64_t v54 = 1;
  sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
  sub_101004620(&qword_101638770, type metadata accessor for SPPairingSessionError);
  _BridgedStoredNSError.init(_:userInfo:)();
  *(void *)(v40 + 16) = v53;
  *(unsigned char *)(v40 + 24) = 1;
  uint64_t v41 = dispatch_group_create();
  dispatch_group_enter(v41);
  uint64_t v42 = swift_allocObject();
  *(void *)(v42 + 16) = v41;
  *(void *)(v42 + 24) = v40;
  uint64_t v43 = v41;
  swift_retain();
  Future.addFailure(block:)();
  swift_release();
  swift_release();
  uint64_t v44 = swift_allocObject();
  *(void *)(v44 + 16) = v43;
  *(void *)(v44 + 24) = v40;
  unint64_t v45 = v43;
  swift_retain();
  Future.addSuccess(block:)();
  swift_release();
  swift_release();
  OS_dispatch_group.wait()();
  sub_10001CFB8(v22, v24);
  unint64_t v46 = v50;
  sub_10001CFB8(v27, v50);
  swift_release();

  sub_10001CFB8(v22, v24);
  sub_10001CFB8(v27, v46);
  swift_bridgeObjectRelease();
  *(unsigned char *)(v1 + 64) = 3;
  swift_beginAccess();
  uint64_t v47 = *(void **)(v40 + 16);
  sub_1003B57DC(v47, *(unsigned char *)(v40 + 24));
  swift_release();
  return (uint64_t)v47;
}

void sub_101000E28(uint64_t a1, NSObject *a2, uint64_t a3)
{
  static os_log_type_t.error.getter();
  if (qword_1016372A8 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_101342130;
  swift_errorRetain();
  sub_10000588C(&qword_101638D40);
  uint64_t v6 = String.init<A>(describing:)();
  uint64_t v8 = v7;
  *(void *)(v5 + 56) = &type metadata for String;
  *(void *)(v5 + 64) = sub_10000B4CC();
  *(void *)(v5 + 32) = v6;
  *(void *)(v5 + 40) = v8;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_10000588C(&qword_101642890);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101342130;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v10;
  swift_errorRetain();
  *(void *)(inited + 48) = String.init<A>(describing:)();
  *(void *)(inited + 56) = v11;
  unint64_t v12 = sub_10092D8F8(inited);
  type metadata accessor for SPPairingSessionError(0);
  sub_10065435C(v12);
  swift_bridgeObjectRelease();
  sub_101004620(&qword_101638770, type metadata accessor for SPPairingSessionError);
  _BridgedStoredNSError.init(_:userInfo:)();
  swift_beginAccess();
  uint64_t v13 = *(void **)(a3 + 16);
  char v14 = *(unsigned char *)(a3 + 24);
  *(void *)(a3 + 16) = v15;
  *(unsigned char *)(a3 + 24) = 1;
  sub_1003B579C(v13, v14);
  dispatch_group_leave(a2);
}

void sub_10100106C(unsigned __int8 *a1, NSObject *a2, uint64_t a3)
{
  uint64_t v5 = *a1;
  static os_log_type_t.error.getter();
  if (qword_1016372A8 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  swift_beginAccess();
  uint64_t v6 = *(void **)(a3 + 16);
  char v7 = *(unsigned char *)(a3 + 24);
  *(void *)(a3 + 16) = v5;
  *(unsigned char *)(a3 + 24) = 0;
  sub_1003B579C(v6, v7);
  dispatch_group_leave(a2);
}

uint64_t sub_101001148(void *a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v53 = a3;
  uint64_t v54 = a4;
  int v61 = a2;
  id v60 = a1;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v59 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v57 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = type metadata accessor for DispatchQoS();
  uint64_t v56 = *(void *)(v58 - 8);
  __chkstk_darwin(v58);
  uint64_t v55 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v51 = *(void *)(v9 - 8);
  uint64_t v52 = v9;
  __chkstk_darwin(v9);
  unint64_t v50 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  char v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchPredicate();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (uint64_t *)((char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = *(void **)(v5 + OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_serialQueue);
  *uint64_t v18 = v19;
  (*(void (**)(void *, void, uint64_t))(v16 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v15);
  id v20 = v19;
  char v21 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v16 + 8))(v18, v15);
  if (v21)
  {
    uint64_t v48 = v6;
    static os_log_type_t.default.getter();
    if (qword_1016372A8 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v22 = swift_allocObject();
  long long v49 = xmmword_101342130;
  *(_OWORD *)(v22 + 16) = xmmword_101342130;
  id v23 = [*(id *)(v5 + 16) identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v24 = UUID.uuidString.getter();
  uint64_t v26 = v25;
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  *(void *)(v22 + 56) = &type metadata for String;
  *(void *)(v22 + 64) = sub_10000B4CC();
  *(void *)(v22 + 32) = v24;
  *(void *)(v22 + 40) = v26;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  id v27 = v60;
  static os_log_type_t.default.getter();
  if (v61)
  {
    if (qword_1016372D0 != -1) {
      swift_once();
    }
    uint64_t v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = v49;
    id v29 = v27;
    uint64_t v30 = _convertErrorToNSError(_:)();

    *(void *)(v28 + 56) = sub_10001D4B0(0, (unint64_t *)&qword_101640E40);
    *(void *)(v28 + 64) = sub_100206F48((unint64_t *)&qword_10163C9B0, (unint64_t *)&qword_101640E40);
    *(void *)(v28 + 32) = v30;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    if ([*(id *)(v5 + 16) pairingUsingTool])
    {
      static os_log_type_t.default.getter();
      os_log(_:dso:log:_:_:)();
    }
    else
    {
      type metadata accessor for Transaction();
      uint64_t v34 = swift_allocObject();
      *(void *)(v34 + 16) = v5;
      *(void *)(v34 + 24) = v29;
      id v35 = v29;
      swift_retain();
      static Transaction.asyncTask(name:block:)();
      swift_release();
    }
    uint64_t v31 = v48;
  }
  else
  {
    uint64_t v31 = v48;
    if (qword_1016372D0 != -1) {
      swift_once();
    }
    uint64_t v32 = swift_allocObject();
    *(_OWORD *)(v32 + 16) = v49;
    *(void *)(v32 + 56) = sub_10001D4B0(0, &qword_101666CE8);
    *(void *)(v32 + 64) = sub_100206F48(&qword_101666CF0, &qword_101666CE8);
    *(void *)(v32 + 32) = v27;
    id v33 = v27;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    type metadata accessor for Transaction();
    swift_retain();
    static Transaction.asyncTask(name:block:)();
    swift_release();
    *(unsigned char *)(v5 + 64) = 1;
    sub_100FFF980(0, 0);
  }

  sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  id v37 = v50;
  uint64_t v36 = v51;
  uint64_t v38 = v52;
  (*(void (**)(char *, void, uint64_t))(v51 + 104))(v50, enum case for DispatchQoS.QoSClass.default(_:), v52);
  uint64_t v39 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v36 + 8))(v37, v38);
  uint64_t v40 = swift_allocObject();
  uint64_t v41 = v54;
  *(void *)(v40 + 16) = v53;
  *(void *)(v40 + 24) = v41;
  *(void *)(v40 + 32) = v60;
  *(unsigned char *)(v40 + 40) = v61 & 1;
  aBlock[4] = sub_101004604;
  aBlock[5] = v40;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_101601780;
  uint64_t v42 = _Block_copy(aBlock);
  id v43 = v27;
  swift_retain();
  uint64_t v44 = v55;
  static DispatchQoS.unspecified.getter();
  uint64_t v62 = _swiftEmptyArrayStorage;
  sub_101004620((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_10002FE84();
  unint64_t v45 = v57;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v42);

  (*(void (**)(char *, uint64_t))(v59 + 8))(v45, v31);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v44, v58);
  return swift_release();
}

uint64_t sub_101001A44(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return _swift_task_switch(sub_101001A64, 0, 0);
}

uint64_t sub_101001A64()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_pairingAnalytics);
  *(void *)(v0 + 24) = v1;
  return _swift_task_switch(sub_101001A90, v1, 0);
}

uint64_t sub_101001A90()
{
  sub_101198528();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_101001AF0(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return _swift_task_switch(sub_101001B10, 0, 0);
}

uint64_t sub_101001B10()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_pairingAnalytics);
  *(void *)(v0 + 32) = v1;
  return _swift_task_switch(sub_101001B3C, v1, 0);
}

uint64_t sub_101001B3C()
{
  uint64_t v1 = *(void *)(v0 + 32);
  sub_101198528();
  return _swift_task_switch(sub_101001BA4, v1, 0);
}

uint64_t sub_101001BA4()
{
  uint64_t v2 = (void *)v0[3];
  uint64_t v1 = v0[4];
  type metadata accessor for Transaction();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 40) = 0;
  *(unsigned char *)(v3 + 48) = 0;
  swift_retain();
  id v4 = v2;
  static Transaction.asyncTask(name:block:)();
  swift_release();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_101001C7C(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v67 = a4;
  uint64_t v68 = a5;
  int v78 = a2;
  id v77 = a1;
  sub_101004444(a3, (uint64_t)v80);
  sub_101004444((uint64_t)v80, (uint64_t)v93);
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v73 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v71 = (char *)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = type metadata accessor for DispatchQoS();
  uint64_t v70 = *(void *)(v72 - 8);
  __chkstk_darwin(v72);
  uint64_t v69 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v65 = *(void *)(v11 - 8);
  uint64_t v66 = v11;
  __chkstk_darwin(v11);
  uint64_t v64 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v76 - 8);
  __chkstk_darwin(v76);
  uint64_t v15 = (char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for DispatchPredicate();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (uint64_t *)((char *)&v58 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v20 = *(void **)(v6 + OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_serialQueue);
  *uint64_t v19 = v20;
  (*(void (**)(void *, void, uint64_t))(v17 + 104))(v19, enum case for DispatchPredicate.onQueue(_:), v16);
  id v21 = v20;
  LOBYTE(v20) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v17 + 8))(v19, v16);
  if (v20)
  {
    uint64_t v62 = v8;
    uint64_t v63 = a3;
    static os_log_type_t.default.getter();
    if (qword_1016372A8 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v22 = swift_allocObject();
  long long v74 = xmmword_101342130;
  *(_OWORD *)(v22 + 16) = xmmword_101342130;
  id v23 = [*(id *)(v6 + 16) identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v24 = UUID.uuidString.getter();
  uint64_t v75 = v6;
  uint64_t v26 = v25;
  id v27 = *(void (**)(char *, uint64_t))(v13 + 8);
  v27(v15, v76);
  *(void *)(v22 + 56) = &type metadata for String;
  unint64_t v60 = sub_10000B4CC();
  *(void *)(v22 + 64) = v60;
  *(void *)(v22 + 32) = v24;
  *(void *)(v22 + 40) = v26;
  uint64_t v28 = v75;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v29 = type metadata accessor for Transaction();
  swift_retain();
  uint64_t v61 = v29;
  static Transaction.asyncTask(name:block:)();
  swift_release();
  id v30 = v77;
  static os_log_type_t.default.getter();
  if (v78)
  {
    if (qword_1016372D0 != -1) {
      swift_once();
    }
    uint64_t v31 = swift_allocObject();
    *(_OWORD *)(v31 + 16) = v74;
    id v32 = v30;
    id v33 = v30;
    uint64_t v34 = _convertErrorToNSError(_:)();

    *(void *)(v31 + 56) = sub_10001D4B0(0, (unint64_t *)&qword_101640E40);
    *(void *)(v31 + 64) = sub_100206F48((unint64_t *)&qword_10163C9B0, (unint64_t *)&qword_101640E40);
    *(void *)(v31 + 32) = v34;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    if ([*(id *)(v28 + 16) pairingUsingTool])
    {
      static os_log_type_t.default.getter();
      os_log(_:dso:log:_:_:)();
    }
    else
    {
      uint64_t v45 = swift_allocObject();
      *(void *)(v45 + 16) = v28;
      *(void *)(v45 + 24) = v33;
      swift_retain();
      id v33 = v33;
      static Transaction.asyncTask(name:block:)();
      swift_release();
    }

    uint64_t v44 = v62;
    id v35 = v32;
  }
  else
  {
    uint64_t v59 = v27;
    id v35 = v30;
    if (qword_1016372D0 != -1) {
      swift_once();
    }
    uint64_t v36 = swift_allocObject();
    *(_OWORD *)(v36 + 16) = v74;
    *(void *)(v36 + 56) = sub_10001D4B0(0, &qword_101666CE8);
    *(void *)(v36 + 64) = sub_100206F48(&qword_101666CF0, &qword_101666CE8);
    *(void *)(v36 + 32) = v30;
    id v37 = v30;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    static os_log_type_t.default.getter();
    uint64_t v38 = swift_allocObject();
    *(_OWORD *)(v38 + 16) = v74;
    id v39 = [v37 identifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v40 = UUID.uuidString.getter();
    uint64_t v42 = v41;
    v59(v15, v76);
    unint64_t v43 = v60;
    *(void *)(v38 + 56) = &type metadata for String;
    *(void *)(v38 + 64) = v43;
    *(void *)(v38 + 32) = v40;
    *(void *)(v38 + 40) = v42;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();

    uint64_t v28 = v75;
    *(unsigned char *)(v75 + 64) = 2;
    uint64_t v44 = v62;
  }
  sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  uint64_t v47 = v64;
  uint64_t v46 = v65;
  uint64_t v48 = v66;
  (*(void (**)(char *, void, uint64_t))(v65 + 104))(v64, enum case for DispatchQoS.QoSClass.default(_:), v66);
  long long v49 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v46 + 8))(v47, v48);
  uint64_t v50 = swift_allocObject();
  uint64_t v51 = v68;
  *(void *)(v50 + 16) = v67;
  *(void *)(v50 + 24) = v51;
  *(void *)(v50 + 32) = v77;
  *(unsigned char *)(v50 + 40) = v78 & 1;
  *(void *)&long long v85 = sub_101004604;
  *((void *)&v85 + 1) = v50;
  *(void *)&long long v83 = _NSConcreteStackBlock;
  *((void *)&v83 + 1) = 1107296256;
  *(void *)&long long v84 = sub_1004B5480;
  *((void *)&v84 + 1) = &unk_1016016E0;
  uint64_t v52 = _Block_copy(&v83);
  id v53 = v35;
  swift_retain();
  uint64_t v54 = v69;
  static DispatchQoS.unspecified.getter();
  *(void *)&v81[0] = _swiftEmptyArrayStorage;
  sub_101004620((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_10002FE84();
  uint64_t v55 = v71;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v52);

  (*(void (**)(char *, uint64_t))(v73 + 8))(v55, v44);
  (*(void (**)(char *, uint64_t))(v70 + 8))(v54, v72);
  swift_release();
  uint64_t v56 = v63;
  sub_101004444(v63, (uint64_t)v81);
  uint64_t result = sub_1003B4138((uint64_t)v81);
  if (result != 1)
  {
    uint64_t v92 = v82;
    long long v89 = v81[6];
    long long v90 = v81[7];
    long long v91 = v81[8];
    long long v85 = v81[2];
    long long v86 = v81[3];
    long long v87 = v81[4];
    long long v88 = v81[5];
    long long v83 = v81[0];
    long long v84 = v81[1];
    __chkstk_darwin(result);
    *(&v58 - 2) = v28;
    *(&v58 - 1) = (uint64_t)&v83;
    sub_101004444((uint64_t)v93, (uint64_t)v79);
    sub_1003B41F4(v79);
    static Transaction.named<A>(_:with:)();
    return sub_1003B42C8(v56);
  }
  return result;
}

uint64_t sub_101002750(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return _swift_task_switch(sub_101002770, 0, 0);
}

uint64_t sub_101002770()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_pairingAnalytics);
  *(void *)(v0 + 24) = v1;
  return _swift_task_switch(sub_10100279C, v1, 0);
}

uint64_t sub_10100279C()
{
  sub_101198750();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1010027FC(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return _swift_task_switch(sub_10100281C, 0, 0);
}

uint64_t sub_10100281C()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_pairingAnalytics);
  *(void *)(v0 + 32) = v1;
  return _swift_task_switch(sub_101002848, v1, 0);
}

uint64_t sub_101002848()
{
  uint64_t v2 = (void *)v0[3];
  uint64_t v1 = v0[4];
  type metadata accessor for Transaction();
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 40) = 0;
  *(unsigned char *)(v3 + 48) = 0;
  swift_retain();
  id v4 = v2;
  static Transaction.asyncTask(name:block:)();
  swift_release();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_101002920(uint64_t a1, uint64_t a2, void *a3)
{
  if ([*(id *)(a2 + 16) pairingUsingTool])
  {
    static os_log_type_t.default.getter();
    if (qword_1016372D0 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = *(void *)(a2 + OBJC_IVAR____TtC12searchpartyd22ItemPairingCoordinator_pairingAnalytics);
    swift_retain();
  }
  swift_retain();
  sub_101002C40(a3, v6, (uint64_t)sub_101004684, a1);
  swift_release();
  return swift_release();
}

void sub_101002A34(void *a1, char a2)
{
  Transaction.capture()();
  if (a2)
  {
    id v5 = a1;
    static os_log_type_t.error.getter();
    if (qword_1016372A8 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_101342130;
    type metadata accessor for SPPairingSessionError(0);
    id v7 = v5;
    uint64_t v8 = String.init<A>(describing:)();
    uint64_t v10 = v9;
    *(void *)(v6 + 56) = &type metadata for String;
    *(void *)(v6 + 64) = sub_10000B4CC();
    *(void *)(v6 + 32) = v8;
    *(void *)(v6 + 40) = v10;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    sub_1003B579C(a1, 1);
  }
  else
  {
    static os_log_type_t.default.getter();
    if (qword_1016372A8 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_101342130;
    *(void *)(v4 + 56) = &type metadata for Bool;
    *(void *)(v4 + 64) = &protocol witness table for Bool;
    *(unsigned char *)(v4 + 32) = a1 & 1;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
  }
}

uint64_t sub_101002C40(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v5 = v4;
  uint64_t v30 = a3;
  uint64_t v31 = a4;
  id v32 = a1;
  uint64_t v34 = type metadata accessor for OSSignpostID();
  uint64_t v7 = *(void *)(v34 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = __chkstk_darwin(v34);
  uint64_t v29 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  id v33 = (char *)&v28 - v10;
  static os_log_type_t.default.getter();
  if (qword_1016372A8 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_101347BA0;
  uint64_t v35 = *v4;
  sub_10000588C(&qword_101666C70);
  uint64_t v12 = String.init<A>(describing:)();
  uint64_t v14 = v13;
  *(void *)(v11 + 56) = &type metadata for String;
  unint64_t v15 = sub_10000B4CC();
  *(void *)(v11 + 32) = v12;
  *(void *)(v11 + 40) = v14;
  *(void *)(v11 + 96) = &type metadata for String;
  *(void *)(v11 + 104) = v15;
  *(void *)(v11 + 64) = v15;
  *(void *)(v11 + 72) = 0xD000000000000037;
  *(void *)(v11 + 80) = 0x800000010141CC90;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  id v16 = (id)qword_10170F000;
  uint64_t v17 = v33;
  OSSignpostID.init(log:)();
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  type metadata accessor for Transaction();
  *(void *)(swift_allocObject() + 16) = a2;
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  swift_release();
  uint64_t v18 = v29;
  uint64_t v19 = v34;
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v29, v17, v34);
  unint64_t v20 = (*(unsigned __int8 *)(v7 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v21 = (v8 + v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = v5;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v22 + v20, v18, v19);
  *(void *)(v22 + v21) = a2;
  id v23 = (void *)(v22 + ((v21 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v24 = v31;
  *id v23 = v30;
  v23[1] = v24;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1008BA060(v32);
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = sub_101004094;
  *(void *)(v25 + 24) = v22;
  swift_retain();
  Future.addFailure(block:)();
  swift_release();
  swift_release();
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = sub_101004094;
  *(void *)(v26 + 24) = v22;
  swift_retain();
  Future.addSuccess(block:)();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v17, v19);
}

unsigned char *storeEnumTagSinglePayload for ItemPairingCoordinator.PairingState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x101003158);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}