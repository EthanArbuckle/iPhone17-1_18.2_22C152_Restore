uint64_t sub_100C9DF18()
{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  NSObject *v4;
  os_log_type_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  Swift::String v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t (*v14)(void);
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;

  v18 = v0;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 11));
  if (qword_101637020 != -1) {
    swift_once();
  }
  v1 = v0[40];
  v2 = v0[32];
  v3 = type metadata accessor for Logger();
  sub_100010324(v3, (uint64_t)qword_10170EB40);
  sub_100CBD0EC(v2, v1, type metadata accessor for SharingCircleKeyManager.Instruction);
  v4 = Logger.logObject.getter();
  v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    v7 = v0[48];
    v6 = v0[49];
    v16 = v0[40];
    v8 = swift_slowAlloc();
    v17 = swift_slowAlloc();
    *(_DWORD *)v8 = 136315651;
    v0[22] = v7;
    v0[23] = v6;
    v0[18] = 0;
    v0[19] = 0xE000000000000000;
    _print_unlocked<A, B>(_:_:)();
    v9._countAndFlagsBits = 3026478;
    v9._object = (void *)0xE300000000000000;
    String.append(_:)(v9);
    _print_unlocked<A, B>(_:_:)();
    v0[25] = sub_1008FA0F0(v0[18], v0[19], &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2160;
    v0[26] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 22) = 2081;
    type metadata accessor for UUID();
    sub_100CBFAFC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    v10 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[27] = sub_1008FA0F0(v10, v11, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100CBD154(v16, type metadata accessor for SharingCircleKeyManager.Instruction);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "No local keys for range %s. Not uploading address keys for %{private,mask.hash}s.", (uint8_t *)v8, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100CBD154(v0[40], type metadata accessor for SharingCircleKeyManager.Instruction);
  }

  v12 = v0[31];
  v13 = type metadata accessor for KeyDropInterface.KeyPackage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

uint64_t sub_100C9E300(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v7[28] = a6;
  v7[29] = v6;
  v7[26] = a4;
  v7[27] = a5;
  v7[24] = a2;
  v7[25] = a3;
  v7[23] = a1;
  v7[30] = type metadata accessor for SharingCircleKeyManager.Instruction(0);
  v7[31] = swift_task_alloc();
  v7[32] = swift_task_alloc();
  sub_10000588C(&qword_10165C0B8);
  v7[33] = swift_task_alloc();
  v7[34] = swift_task_alloc();
  v7[35] = swift_task_alloc();
  v7[36] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for TimeBasedKey();
  v7[37] = v10;
  v7[38] = *(void *)(v10 - 8);
  v7[39] = swift_task_alloc();
  v7[40] = *(void *)(type metadata accessor for BookmarkMetaData() - 8);
  v7[41] = swift_task_alloc();
  v11 = (void *)swift_task_alloc();
  v7[42] = v11;
  void *v11 = v7;
  v11[1] = sub_100C9E504;
  return sub_100CA3A68(a2, 9, a3);
}

uint64_t sub_100C9E504(uint64_t a1, uint64_t a2)
{
  v4 = (void *)*v3;
  v4[43] = a1;
  v4[44] = a2;
  swift_task_dealloc();
  if (v2)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v5 = (uint64_t (*)(void))v4[1];
    return v5();
  }
  else
  {
    uint64_t v7 = v4[29];
    return _swift_task_switch(sub_100C9E6AC, v7, 0);
  }
}

uint64_t sub_100C9E6AC()
{
  uint64_t v35 = v0;
  unint64_t v3 = *(void *)(v0 + 352);
  if (!v3) {
    goto LABEL_7;
  }
  if (!is_mul_ok(v3, 0x60uLL))
  {
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v4 = 96 * v3;
  unint64_t v1 = v4 - 1;
  unint64_t v5 = v4 - 96;
  if (v5 <= 1) {
    unint64_t v5 = 1;
  }
  if (v1 < v5)
  {
    __break(1u);
LABEL_7:
    unint64_t v1 = 0;
  }
  uint64_t v6 = *(void *)(*(void *)(v0 + 192) + *(int *)(*(void *)(v0 + 240) + 44));
  if (*(void *)(v6 + 16) && (unint64_t v7 = sub_100724268(9), (v8 & 1) != 0))
  {
    uint64_t v9 = *(void *)(v0 + 328);
    sub_100CBD0EC(*(void *)(v6 + 56) + *(void *)(*(void *)(v0 + 320) + 72) * v7, v9, (uint64_t (*)(void))type metadata accessor for BookmarkMetaData);
    unint64_t v2 = *(void *)(v9 + 8);
    sub_100CBD154(v9, (uint64_t (*)(void))type metadata accessor for BookmarkMetaData);
    if (v2 >= v1)
    {
LABEL_17:
      if (qword_101637020 == -1)
      {
LABEL_18:
        uint64_t v14 = *(void *)(v0 + 248);
        uint64_t v15 = *(void *)(v0 + 192);
        uint64_t v16 = type metadata accessor for Logger();
        sub_100010324(v16, (uint64_t)qword_10170EB40);
        sub_100CBD0EC(v15, v14, type metadata accessor for SharingCircleKeyManager.Instruction);
        v17 = Logger.logObject.getter();
        os_log_type_t v18 = static os_log_type_t.default.getter();
        BOOL v19 = os_log_type_enabled(v17, v18);
        uint64_t v20 = *(void *)(v0 + 248);
        if (v19)
        {
          uint64_t v21 = swift_slowAlloc();
          uint64_t v32 = swift_slowAlloc();
          *(_DWORD *)uint64_t v21 = 136315907;
          uint64_t v33 = 0x7972616D6972702ELL;
          unint64_t v34 = 0xEA0000000000282FLL;
          *(void *)(v0 + 168) = v1;
          v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v22);
          swift_bridgeObjectRelease();
          v23._countAndFlagsBits = 41;
          v23._object = (void *)0xE100000000000000;
          String.append(_:)(v23);
          *(void *)(v0 + 136) = sub_1008FA0F0(v33, v34, &v32);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v21 + 12) = 2080;
          uint64_t v33 = 0x7972616D6972702ELL;
          unint64_t v34 = 0xEA0000000000282FLL;
          *(void *)(v0 + 112) = v2;
          v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
          String.append(_:)(v24);
          swift_bridgeObjectRelease();
          v25._countAndFlagsBits = 41;
          v25._object = (void *)0xE100000000000000;
          String.append(_:)(v25);
          *(void *)(v0 + 88) = sub_1008FA0F0(v33, v34, &v32);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v21 + 22) = 2160;
          *(void *)(v0 + 96) = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v21 + 32) = 2081;
          type metadata accessor for UUID();
          sub_100CBFAFC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)(v0 + 104) = sub_1008FA0F0(v26, v27, &v32);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_100CBD154(v20, type metadata accessor for SharingCircleKeyManager.Instruction);
          _os_log_impl((void *)&_mh_execute_header, v17, v18, "Connection key package reached highWater mark (%s > %s).\nNot uploading connection keys for %{private,mask.hash}s.", (uint8_t *)v21, 0x2Au);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_100CBD154(*(void *)(v0 + 248), type metadata accessor for SharingCircleKeyManager.Instruction);
        }

        uint64_t v28 = *(void *)(v0 + 184);
        uint64_t v29 = type metadata accessor for KeyDropInterface.KeyPackage(0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v28, 1, 1, v29);
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        v30 = *(uint64_t (**)(void))(v0 + 8);
        return v30();
      }
LABEL_25:
      swift_once();
      goto LABEL_18;
    }
  }
  else if (!v1)
  {
    unint64_t v2 = 0;
    goto LABEL_17;
  }
  uint64_t v10 = *(void *)(v0 + 200);
  *(void *)(v0 + 40) = type metadata accessor for OwnedBeaconRecord();
  *(void *)(v0 + 48) = sub_100CBFAFC(&qword_101638DD0, (void (*)(uint64_t))type metadata accessor for OwnedBeaconRecord);
  v11 = sub_10001D958((uint64_t *)(v0 + 16));
  sub_100CBD0EC(v10, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  uint64_t v12 = swift_task_alloc();
  *(void *)(v0 + 360) = v12;
  *(void *)uint64_t v12 = v0;
  *(void *)(v12 + 8) = sub_100C9ED14;
  long long v13 = *(_OWORD *)(v0 + 344);
  *(void *)(v12 + 48) = *(void *)(v0 + 232);
  *(_OWORD *)(v12 + 32) = v13;
  *(unsigned char *)(v12 + 96) = 0;
  *(void *)(v12 + 24) = v0 + 16;
  return _swift_task_switch(sub_100CB23D4, 0, 0);
}

uint64_t sub_100C9ED14(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 368) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = *(void *)(v4 + 232);
    swift_errorRelease();
    uint64_t v6 = sub_100C9F6C4;
    uint64_t v7 = v5;
  }
  else
  {
    uint64_t v8 = *(void *)(v4 + 232);
    *(void *)(v4 + 376) = a1;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v4 + 16);
    uint64_t v6 = sub_100C9EE58;
    uint64_t v7 = v8;
  }
  return _swift_task_switch(v6, v7, 0);
}

uint64_t sub_100C9EE58()
{
  uint64_t v2 = v0[46];
  uint64_t v1 = v0[47];
  uint64_t v3 = v0[26];
  uint64_t v4 = (void *)swift_task_alloc();
  v4[2] = v3;
  uint64_t v5 = sub_1000A4144((uint64_t (*)(char *))sub_100CBECD0, v4, v1);
  swift_task_dealloc();
  uint64_t v6 = *(void *)(v5 + 16);
  if (!v6)
  {
    swift_bridgeObjectRelease();
    v11 = _swiftEmptyArrayStorage;
LABEL_29:
    uint64_t v50 = v0[27];
    unint64_t v51 = v0[28];
    sub_1000361E0(v50, v51);
    v52 = sub_100CBCA7C((uint64_t)v11, v50, v51);
    uint64_t v53 = v0[27];
    unint64_t v54 = v0[28];
    if (v2)
    {
      sub_10001CFB8(v53, v54);
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v56 = v0[26];
      v57 = (unsigned char *)v0[23];
      sub_10001CFB8(v53, v54);
      swift_bridgeObjectRelease();
      uint64_t v58 = type metadata accessor for KeyDropInterface.KeyPackage(0);
      sub_100CBD0EC(v56, (uint64_t)&v57[*(int *)(v58 + 20)], type metadata accessor for KeyDropInterface.KeyAlignment);
      unsigned char *v57 = 9;
      *(void *)&v57[*(int *)(v58 + 24)] = v52;
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(*(void *)(v58 - 8) + 56))(v57, 0, 1, v58);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    v55 = (uint64_t (*)(void))v0[1];
    return v55();
  }
  uint64_t v8 = v0[37];
  uint64_t v7 = v0[38];
  uint64_t v9 = v5 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  uint64_t v10 = *(void *)(v7 + 72);
  swift_bridgeObjectRetain();
  v11 = _swiftEmptyArrayStorage;
  uint64_t v66 = v10;
  uint64_t v67 = v8;
  v75 = v0;
  while (1)
  {
    uint64_t v12 = v0[39];
    sub_100CBD0EC(v9, v12, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
    long long v13 = (uint64_t *)(v12 + *(int *)(v8 + 24));
    unint64_t v14 = v13[1];
    if (v14 >> 60 != 15) {
      break;
    }
    sub_100CBD154(v0[39], (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
LABEL_4:
    v9 += v10;
    if (!--v6)
    {
      swift_bridgeObjectRelease_n();
      goto LABEL_29;
    }
  }
  uint64_t v74 = v6;
  uint64_t v15 = *v13;
  uint64_t v16 = String.utf8Data.getter();
  unint64_t v18 = v17;
  sub_1000361E0(v15, v14);
  uint64_t v76 = sub_100A941DC(v15, v14, v16, v18, 32);
  if (v2)
  {
    uint64_t v60 = v2;
    sub_10001CFB8(v16, v18);
    sub_100037A24(v15, v14);
    goto LABEL_44;
  }
  unint64_t v20 = v19;
  sub_100037A24(v15, v14);
  unint64_t v21 = v20 >> 62;
  switch(v20 >> 62)
  {
    case 1uLL:
      LODWORD(v22) = HIDWORD(v76) - v76;
      if (__OFSUB__(HIDWORD(v76), v76))
      {
        __break(1u);
LABEL_46:
        __break(1u);
        goto LABEL_47;
      }
      uint64_t v22 = (int)v22;
LABEL_12:
      if (v22 == 32)
      {
        v73 = v11;
        uint64_t v26 = (uint64_t *)v0[39];
        uint64_t v28 = v0[35];
        uint64_t v27 = v0[36];
        sub_10001CFB8(v16, v18);
        uint64_t v72 = *v26;
        uint64_t v29 = type metadata accessor for EncryptedData();
        uint64_t v30 = *(void *)(v29 - 8);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v30 + 56))(v27, 1, 1, v29);
        sub_10001D074(v27, v28, &qword_10165C0B8);
        v31 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 48);
        LODWORD(v27) = v31(v28, 1, v29);
        sub_1000361E0(v76, v20);
        uint64_t v32 = v0[35];
        if (v27 == 1)
        {
          sub_10001DAB4(v32, &qword_10165C0B8);
          unint64_t v70 = 0xF000000000000000;
          uint64_t v71 = 0;
        }
        else
        {
          uint64_t v33 = EncryptedData.cipherText.getter();
          unint64_t v70 = v34;
          uint64_t v71 = v33;
          (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v32, v29);
        }
        uint64_t v35 = v75[34];
        sub_10001D074(v75[36], v35, &qword_10165C0B8);
        int v36 = v31(v35, 1, v29);
        uint64_t v37 = v75[34];
        if (v36 == 1)
        {
          sub_10001DAB4(v75[34], &qword_10165C0B8);
          unint64_t v68 = 0xF000000000000000;
          uint64_t v69 = 0;
        }
        else
        {
          uint64_t v38 = EncryptedData.initializationVector.getter();
          unint64_t v68 = v39;
          uint64_t v69 = v38;
          (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v37, v29);
        }
        uint64_t v40 = v75[33];
        sub_10001D074(v75[36], v40, &qword_10165C0B8);
        int v41 = v31(v40, 1, v29);
        uint64_t v42 = v75[36];
        uint64_t v43 = v75[33];
        if (v41 == 1)
        {
          sub_10001CFB8(v76, v20);
          sub_10001DAB4(v42, &qword_10165C0B8);
          sub_10001DAB4(v43, &qword_10165C0B8);
          uint64_t v44 = 0;
          unint64_t v45 = 0xF000000000000000;
        }
        else
        {
          uint64_t v44 = EncryptedData.tag.getter();
          unint64_t v45 = v46;
          sub_10001CFB8(v76, v20);
          sub_10001DAB4(v42, &qword_10165C0B8);
          (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v43, v29);
        }
        v11 = v73;
        uint64_t v0 = v75;
        sub_100CBD154(v75[39], (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          v11 = sub_100A6F4D4(0, v73[2] + 1, 1, v73);
        }
        unint64_t v48 = v11[2];
        unint64_t v47 = v11[3];
        if (v48 >= v47 >> 1) {
          v11 = sub_100A6F4D4((void *)(v47 > 1), v48 + 1, 1, v11);
        }
        uint64_t v2 = 0;
        v11[2] = v48 + 1;
        v49 = &v11[9 * v48];
        v49[4] = v72;
        v49[5] = v76;
        v49[6] = v20;
        v49[7] = v71;
        v49[8] = v70;
        v49[9] = v69;
        uint64_t v8 = v67;
        v49[10] = v68;
        v49[11] = v44;
        v49[12] = v45;
        uint64_t v10 = v66;
        uint64_t v6 = v74;
        goto LABEL_4;
      }
      if (v21)
      {
        if (v21 == 1)
        {
          if (!__OFSUB__(HIDWORD(v76), v76))
          {
            uint64_t v61 = HIDWORD(v76) - (int)v76;
            goto LABEL_43;
          }
LABEL_47:
          __break(1u);
LABEL_48:
          __break(1u);
          JUMPOUT(0x100C9F6B4);
        }
        uint64_t v63 = *(void *)(v76 + 16);
        uint64_t v62 = *(void *)(v76 + 24);
        uint64_t v61 = v62 - v63;
        if (__OFSUB__(v62, v63)) {
          goto LABEL_48;
        }
      }
      else
      {
        uint64_t v61 = BYTE6(v20);
      }
LABEL_43:
      sub_10013019C();
      uint64_t v60 = swift_allocError();
      *(void *)uint64_t v64 = 32;
      *(void *)(v64 + 8) = v61;
      *(unsigned char *)(v64 + 16) = 0;
      swift_willThrow();
      sub_10001CFB8(v76, v20);
      sub_10001CFB8(v16, v18);
LABEL_44:
      _StringGuts.grow(_:)(35);
      v0[7] = 0;
      v0[8] = 0xE000000000000000;
      v65._object = (void *)0x80000001013FB8E0;
      v65._countAndFlagsBits = 0xD000000000000021;
      String.append(_:)(v65);
      v0[22] = v60;
      sub_10000588C(&qword_101638D40);
      _print_unlocked<A, B>(_:_:)();
      return _assertionFailure(_:_:file:line:flags:)();
    case 2uLL:
      uint64_t v24 = *(void *)(v76 + 16);
      uint64_t v23 = *(void *)(v76 + 24);
      BOOL v25 = __OFSUB__(v23, v24);
      uint64_t v22 = v23 - v24;
      if (!v25) {
        goto LABEL_12;
      }
      goto LABEL_46;
    case 3uLL:
      uint64_t v61 = 0;
      goto LABEL_43;
    default:
      uint64_t v22 = BYTE6(v20);
      goto LABEL_12;
  }
}

uint64_t sub_100C9F6C4()
{
  unint64_t v18 = v0;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 2));
  if (qword_101637020 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[32];
  uint64_t v2 = v0[24];
  uint64_t v3 = type metadata accessor for Logger();
  sub_100010324(v3, (uint64_t)qword_10170EB40);
  sub_100CBD0EC(v2, v1, type metadata accessor for SharingCircleKeyManager.Instruction);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v7 = v0[43];
    uint64_t v6 = v0[44];
    uint64_t v16 = v0[32];
    uint64_t v8 = swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315651;
    v0[15] = v7;
    v0[16] = v6;
    v0[9] = 0;
    v0[10] = 0xE000000000000000;
    _print_unlocked<A, B>(_:_:)();
    v9._countAndFlagsBits = 3026478;
    v9._object = (void *)0xE300000000000000;
    String.append(_:)(v9);
    _print_unlocked<A, B>(_:_:)();
    v0[18] = sub_1008FA0F0(v0[9], v0[10], &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2160;
    v0[19] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 22) = 2081;
    type metadata accessor for UUID();
    sub_100CBFAFC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v10 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[20] = sub_1008FA0F0(v10, v11, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100CBD154(v16, type metadata accessor for SharingCircleKeyManager.Instruction);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "No local keys for range %s. Not uploading connection keys for %{private,mask.hash}s.", (uint8_t *)v8, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100CBD154(v0[32], type metadata accessor for SharingCircleKeyManager.Instruction);
  }

  uint64_t v12 = v0[23];
  uint64_t v13 = type metadata accessor for KeyDropInterface.KeyPackage(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, 1, 1, v13);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

uint64_t sub_100C9FAC8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = type metadata accessor for KeyDropInterface.KeyPackage(0);
  uint64_t v5 = *(void *)(a1 + *(int *)(result + 24));
  int64_t v6 = *(void *)(v5 + 16);
  uint64_t v7 = _swiftEmptyArrayStorage;
  if (v6)
  {
    uint64_t result = sub_1000B6F10(0, v6, 0);
    uint64_t v7 = _swiftEmptyArrayStorage;
    uint64_t v8 = (uint64_t *)(v5 + 32);
    unint64_t v9 = _swiftEmptyArrayStorage[2];
    do
    {
      uint64_t v11 = *v8;
      v8 += 9;
      uint64_t v10 = v11;
      uint64_t v13 = v7;
      unint64_t v12 = v7[3];
      if (v9 >= v12 >> 1)
      {
        uint64_t result = sub_1000B6F10(v12 > 1, v9 + 1, 1);
        uint64_t v7 = v13;
      }
      v7[2] = v9 + 1;
      v7[v9++ + 4] = v10;
      --v6;
    }
    while (v6);
  }
  *a2 = v7;
  return result;
}

uint64_t sub_100C9FBA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1 + *(int *)(type metadata accessor for SharingCircleKeyManager.Instruction(0) + 20);
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a2, v3, v4);
}

uint64_t sub_100C9FC24@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1 + *(int *)(type metadata accessor for SharingCircleKeyManager.Instruction(0) + 24);
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a2, v3, v4);
}

uint64_t sub_100C9FCA0()
{
  return Error.localizedDescription.getter();
}

uint64_t sub_100C9FCDC(uint64_t a1, uint64_t a2)
{
  v3[2] = a1;
  v3[3] = a2;
  v3[4] = type metadata accessor for StableIdentifier();
  v3[5] = swift_task_alloc();
  sub_10000588C(&qword_101638CF0);
  v3[6] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UUID();
  v3[7] = v4;
  v3[8] = *(void *)(v4 - 8);
  v3[9] = swift_task_alloc();
  return _swift_task_switch(sub_100C9FDFC, v2, 0);
}

uint64_t sub_100C9FDFC()
{
  uint64_t v1 = v0[7];
  uint64_t v2 = v0[8];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[3];
  uint64_t v5 = type metadata accessor for OwnedBeaconRecord();
  sub_10001D074(v4 + *(int *)(v5 + 28), v3, &qword_101638CF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    uint64_t v6 = v0[2];
    sub_10001DAB4(v0[6], &qword_101638CF0);
    uint64_t v7 = type metadata accessor for KeyDropBeaconGroupAttributes();
    uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v6;
LABEL_7:
    v8(v9, 1, 1, v7);
  }
  else
  {
    uint64_t v10 = v0[5];
    uint64_t v11 = v0[3];
    unint64_t v12 = *(void (**)(uint64_t, void, void))(v0[8] + 32);
    v12(v0[9], v0[6], v0[7]);
    sub_100CBD0EC(v11 + *(int *)(v5 + 24), v10, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        (*(void (**)(void, void))(v0[8] + 8))(v0[9], v0[7]);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_6;
      case 2u:
        uint64_t v16 = v0[8];
        uint64_t v17 = v0[5];
        uint64_t v18 = sub_10000588C(&qword_1016555E0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v19 = (char *)(v17 + *(int *)(v18 + 96));
        char v20 = *v19;
        char v21 = v19[1];
        swift_bridgeObjectRelease();
        uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
        if (v21)
        {
          uint64_t v23 = v0[7];
          uint64_t v24 = v0[5];
          uint64_t v25 = v0[2];
          v22(v0[9], v23);
          uint64_t v26 = type metadata accessor for KeyDropBeaconGroupAttributes();
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v25, 1, 1, v26);
          v22(v24, v23);
        }
        else
        {
          v22(v0[5], v0[7]);
LABEL_15:
          uint64_t v31 = v0[2];
          v12(v31, v0[9], v0[7]);
          uint64_t v32 = type metadata accessor for KeyDropBeaconGroupAttributes();
          *(unsigned char *)(v31 + *(int *)(v32 + 20)) = v20;
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v31, 0, 1, v32);
        }
        break;
      case 3u:
        uint64_t v27 = v0[7];
        uint64_t v28 = v0[8];
        uint64_t v29 = v0[5];
        uint64_t v30 = sub_10000588C((uint64_t *)&unk_1016565E0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        char v20 = *(unsigned char *)(v29 + *(int *)(v30 + 96));
        (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v29, v27);
        goto LABEL_15;
      default:
        (*(void (**)(void, void))(v0[8] + 8))(v0[9], v0[7]);
LABEL_6:
        uint64_t v13 = v0[2];
        swift_bridgeObjectRelease();
        uint64_t v7 = type metadata accessor for KeyDropBeaconGroupAttributes();
        uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
        uint64_t v9 = v13;
        goto LABEL_7;
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

uint64_t sub_100CA020C(uint64_t a1, uint64_t a2)
{
  v3[8] = a2;
  v3[9] = v2;
  v3[7] = a1;
  v3[10] = type metadata accessor for OwnedBeaconRecord();
  v3[11] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UUID();
  v3[12] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[13] = v5;
  v3[14] = *(void *)(v5 + 64);
  v3[15] = swift_task_alloc();
  v3[16] = sub_10000588C(&qword_10163B9E0);
  v3[17] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for BeaconNamingRecord();
  v3[18] = v6;
  v3[19] = *(void *)(v6 - 8);
  v3[20] = swift_task_alloc();
  return _swift_task_switch(sub_100CA0398, v2, 0);
}

uint64_t sub_100CA0398()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(*(void *)(v0 + 72) + 120);
  *(void *)(v0 + 168) = v2;
  *(_DWORD *)(v0 + 216) = *(_DWORD *)(v1 + 20);
  return _swift_task_switch(sub_100CA03C4, v2, 0);
}

uint64_t sub_100CA03C4()
{
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v2 = *(void *)(v0 + 120);
  uint64_t v3 = *(void *)(v0 + 96);
  uint64_t v4 = *(void *)(v0 + 104);
  uint64_t v5 = *(void *)(v0 + 64) + *(int *)(v0 + 216);
  *(void *)(v0 + 176) = *(void *)(v1 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v5, v3);
  unint64_t v6 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = swift_allocObject();
  *(void *)(v0 + 184) = v7;
  *(void *)(v7 + 16) = v1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v7 + v6, v2, v3);
  swift_retain();
  return _swift_task_switch(sub_100CA04C0, 0, 0);
}

uint64_t sub_100CA04C0()
{
  uint64_t v2 = v0[22];
  uint64_t v1 = v0[23];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[24] = v3;
  v3[2] = v2;
  v3[3] = sub_100CBE0C8;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[25] = v4;
  void *v4 = v0;
  v4[1] = sub_100CA05C4;
  uint64_t v6 = v0[16];
  uint64_t v5 = v0[17];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100090CE8, v3, v6);
}

uint64_t sub_100CA05C4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 72);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_100CA0714, v1, 0);
}

uint64_t sub_100CA0714()
{
  uint64_t v18 = v0;
  uint64_t v1 = v0[17];
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(v0[19] + 48))(v1, 1, v0[18]) == 1)
  {
    sub_10001DAB4(v1, &qword_10163B9E0);
    if (qword_101637020 != -1) {
      swift_once();
    }
    uint64_t v2 = v0[11];
    uint64_t v3 = v0[8];
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_10170EB40);
    sub_100CBD0EC(v3, v2, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = v0[11];
      uint64_t v8 = swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 141558275;
      v0[5] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v8 + 12) = 2081;
      sub_100CBFAFC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[6] = sub_1008FA0F0(v9, v10, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100CBD154(v7, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "No name record for beacon %{private,mask.hash}s.", (uint8_t *)v8, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100CBD154(v0[11], (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    }

    uint64_t v14 = v0[7];
    uint64_t v15 = sub_10000588C(&qword_10165C130);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = (uint64_t (*)(void))v0[1];
    return v16();
  }
  else
  {
    sub_100CBD1B4(v1, v0[20], (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
    uint64_t v11 = (void *)swift_task_alloc();
    v0[26] = v11;
    void *v11 = v0;
    v11[1] = sub_100CA0AEC;
    uint64_t v12 = v0[8];
    return sub_100E62920(v12);
  }
}

uint64_t sub_100CA0AEC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v4[2] = v2;
  v4[3] = a1;
  v4[4] = a2;
  uint64_t v5 = v3[9];
  swift_task_dealloc();
  return _swift_task_switch(sub_100CA0C04, v5, 0);
}

uint64_t sub_100CA0C04()
{
  uint64_t v1 = (uint64_t *)v0[20];
  uint64_t v2 = (int *)v0[18];
  uint64_t v3 = v0[7];
  uint64_t v4 = (uint64_t *)((char *)v1 + v2[8]);
  uint64_t v6 = *v4;
  uint64_t v5 = v4[1];
  uint64_t v7 = *(uint64_t *)((char *)v1 + v2[7]);
  uint64_t v8 = (uint64_t *)((char *)v1 + v2[9]);
  uint64_t v10 = *v8;
  uint64_t v9 = v8[1];
  uint64_t v11 = (uint64_t *)(v0[8] + *(int *)(v0[10] + 60));
  uint64_t v12 = v11[1];
  uint64_t v24 = *v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100CB3370(v1, v3);
  uint64_t v22 = v0[4];
  uint64_t v23 = v0[3];
  uint64_t v21 = v0[20];
  uint64_t v14 = v0[7];
  uint64_t v20 = v7;
  uint64_t v15 = sub_10000588C(&qword_10165C130);
  uint64_t v16 = v10;
  uint64_t v17 = (void *)(v14 + *(int *)(v15 + 48));
  sub_100CBD154(v21, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
  void *v17 = v6;
  v17[1] = v5;
  v17[2] = v20;
  v17[3] = v16;
  v17[4] = v9;
  v17[5] = v24;
  v17[6] = v12;
  v17[7] = v23;
  v17[8] = v22;
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 0, 1, v15);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v18 = (uint64_t (*)(void))v0[1];
  return v18();
}

uint64_t sub_100CA0E04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[10] = a3;
  v4[11] = v3;
  v4[8] = a1;
  v4[9] = a2;
  v4[12] = type metadata accessor for OwnedBeaconRecord();
  v4[13] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  v4[14] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[15] = v6;
  v4[16] = *(void *)(v6 + 64);
  v4[17] = swift_task_alloc();
  v4[18] = sub_10000588C(&qword_10163BB70);
  v4[19] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for LostModeRecord();
  v4[20] = v7;
  v4[21] = *(void *)(v7 - 8);
  v4[22] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for OwnerSharingCircle();
  v4[23] = v8;
  v4[24] = *(void *)(v8 - 8);
  v4[25] = swift_task_alloc();
  sub_10000588C(&qword_101638CF0);
  v4[26] = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_101638D10);
  v4[27] = swift_task_alloc();
  v4[28] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Date();
  v4[29] = v9;
  v4[30] = *(void *)(v9 - 8);
  v4[31] = swift_task_alloc();
  v4[32] = swift_task_alloc();
  v4[33] = swift_task_alloc();
  v4[34] = swift_task_alloc();
  v4[35] = swift_task_alloc();
  v4[36] = swift_task_alloc();
  v4[37] = sub_10000588C((uint64_t *)&unk_10163AC90);
  v4[38] = swift_task_alloc();
  v4[39] = swift_task_alloc();
  v4[40] = swift_task_alloc();
  v4[41] = swift_task_alloc();
  v4[42] = swift_task_alloc();
  v4[43] = swift_task_alloc();
  v4[44] = swift_task_alloc();
  v4[45] = swift_task_alloc();
  v4[46] = swift_task_alloc();
  return _swift_task_switch(sub_100CA1190, v3, 0);
}

uint64_t sub_100CA1190()
{
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 120);
  uint64_t v4 = *(void *)(v0 + 96);
  uint64_t v5 = *(void *)(v0 + 80);
  *(void *)(v0 + 376) = *(void *)(*(void *)(v0 + 88) + 120);
  uint64_t v6 = *(int *)(v4 + 20);
  *(_DWORD *)(v0 + 464) = v6;
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  *(void *)(v0 + 384) = v7;
  *(void *)(v0 + 392) = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v7(v1, v5 + v6, v2);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56))(v1, 0, 1, v2);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 400) = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_100CA129C;
  uint64_t v9 = *(void *)(v0 + 208);
  return sub_100E5C1B8(v9, 0);
}

uint64_t sub_100CA129C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 208);
  uint64_t v3 = *(void *)(*(void *)v1 + 88);
  *(void *)(*(void *)v1 + 408) = a1;
  swift_task_dealloc();
  sub_10001DAB4(v2, &qword_101638CF0);
  return _swift_task_switch(sub_100CA13D8, v3, 0);
}

uint64_t sub_100CA13D8()
{
  uint64_t v27 = v0;
  uint64_t v26 = (void *)v0[51];
  swift_bridgeObjectRetain();
  sub_100C2799C(&v26);
  swift_bridgeObjectRelease();
  if (v26[2])
  {
    uint64_t v1 = *(unsigned __int8 *)(v0[24] + 80);
    sub_100CBD0EC((uint64_t)v26 + ((v1 + 32) & ~v1), v0[28], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v2 = 0;
  }
  else
  {
    uint64_t v2 = 1;
  }
  uint64_t v4 = v0[27];
  uint64_t v3 = v0[28];
  uint64_t v5 = v0[23];
  uint64_t v6 = v0[24];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v3, v2, 1, v5);
  swift_release();
  sub_10001D074(v3, v4, (uint64_t *)&unk_101638D10);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    uint64_t v7 = v0[46];
    uint64_t v8 = v0[29];
    uint64_t v9 = v0[30];
    sub_10001DAB4(v0[27], (uint64_t *)&unk_101638D10);
    static Date.distantPast.getter();
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v10(v7, 1, 1, v8);
  }
  else
  {
    uint64_t v12 = v0[36];
    uint64_t v13 = (uint64_t *)v0[25];
    sub_100CBD1B4(v0[27], (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    sub_100CB3370(v13, v12);
    uint64_t v15 = (uint64_t *)v0[25];
    if (*((unsigned char *)v15 + *(int *)(v0[23] + 36)) == 1)
    {
      uint64_t v16 = v0[44];
      sub_100B23648(v15, v16);
      uint64_t v18 = v0[46];
      uint64_t v19 = v0[44];
      uint64_t v20 = v0[29];
      uint64_t v21 = v0[30];
      sub_100CBD154(v0[25], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v21 + 56);
      v10(v19, 0, 1, v20);
      sub_10001D608(v19, v18, (uint64_t *)&unk_10163AC90);
    }
    else
    {
      uint64_t v22 = v0[46];
      uint64_t v23 = v0[29];
      uint64_t v24 = v0[30];
      sub_100CBD154(v0[25], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v24 + 56);
      v10(v22, 1, 1, v23);
    }
  }
  v0[52] = 0;
  v0[53] = v10;
  uint64_t v11 = v0[47];
  return _swift_task_switch(sub_100CA16A4, v11, 0);
}

uint64_t sub_100CA16A4()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 384);
  uint64_t v2 = *(void *)(v0 + 376);
  uint64_t v3 = *(void *)(v0 + 136);
  uint64_t v4 = *(void *)(v0 + 112);
  uint64_t v5 = *(void *)(v0 + 120);
  uint64_t v6 = *(void *)(v0 + 80) + *(int *)(v0 + 464);
  *(void *)(v0 + 432) = *(void *)(v2 + 136);
  v1(v3, v6, v4);
  unint64_t v7 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = swift_allocObject();
  *(void *)(v0 + 440) = v8;
  *(void *)(v8 + 16) = v2;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 32))(v8 + v7, v3, v4);
  swift_retain();
  return _swift_task_switch(sub_100CA1794, 0, 0);
}

uint64_t sub_100CA1794()
{
  uint64_t v2 = v0[54];
  uint64_t v1 = v0[55];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[56] = v3;
  v3[2] = v2;
  v3[3] = sub_100CBE0AC;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[57] = v4;
  void *v4 = v0;
  v4[1] = sub_100CA1898;
  uint64_t v6 = v0[18];
  uint64_t v5 = v0[19];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1009C5FF0, v3, v6);
}

uint64_t sub_100CA1898()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 88);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_100CA19E8, v1, 0);
}

void sub_100CA19E8()
{
  v96 = v0;
  uint64_t v1 = (int *)v0[20];
  uint64_t v2 = v0[19];
  if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(v0[21] + 48))(v2, 1, v1) == 1)
  {
    uint64_t v3 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v0[53];
    uint64_t v4 = v0[45];
    uint64_t v5 = v0[29];
    sub_10001DAB4(v2, &qword_10163BB70);
    v3(v4, 1, 1, v5);
  }
  else
  {
    uint64_t v6 = v0[52];
    uint64_t v7 = v0[43];
    uint64_t v8 = (uint64_t *)v0[22];
    sub_100CBD1B4(v2, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
    uint64_t v9 = (uint64_t *)((char *)v8 + v1[9]);
    uint64_t v10 = v9[1];
    uint64_t v94 = *v9;
    uint64_t v11 = v1[8];
    uint64_t v12 = (uint64_t *)((char *)v8 + v1[7]);
    uint64_t v14 = *v12;
    uint64_t v13 = v12[1];
    uint64_t v16 = *(uint64_t *)((char *)v8 + v11);
    uint64_t v15 = *(uint64_t *)((char *)v8 + v11 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100B23648(v8, v7);
    if (v6) {
      return;
    }
    uint64_t v18 = v0[43];
    uint64_t v19 = 1;
    ((void (*)(uint64_t, void, uint64_t, void))v0[53])(v18, 0, 1, v0[29]);
    id v20 = objc_allocWithZone((Class)SPLostModeInfo);
    id v21 = sub_100B23CB8(v94, v10, v14, v13, v16, v15, v18);
    id v22 = [v21 timestamp];

    if (v22)
    {
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v19 = 0;
    }
    uint64_t v23 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v0[53];
    uint64_t v24 = v0[45];
    uint64_t v25 = v0[42];
    uint64_t v26 = v0[29];
    sub_100CBD154(v0[22], (uint64_t (*)(void))type metadata accessor for LostModeRecord);
    v23(v25, v19, 1, v26);
    sub_10001D608(v25, v24, (uint64_t *)&unk_10163AC90);
  }
  uint64_t v27 = v0[45];
  uint64_t v28 = v0[41];
  uint64_t v29 = v0[29];
  uint64_t v30 = v0[30];
  uint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16);
  v31(v0[34], v0[36], v29);
  sub_10001D074(v27, v28, (uint64_t *)&unk_10163AC90);
  int v32 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29);
  uint64_t v33 = v0[41];
  unint64_t v34 = v31;
  if (v32 == 1)
  {
    static Date.distantPast.getter();
    sub_10001DAB4(v33, (uint64_t *)&unk_10163AC90);
  }
  else
  {
    (*(void (**)(void, void, void))(v0[30] + 32))(v0[33], v0[41], v0[29]);
  }
  uint64_t v35 = v0[46];
  uint64_t v88 = v0[45];
  uint64_t v37 = v0[34];
  uint64_t v36 = v0[35];
  uint64_t v38 = v0[33];
  uint64_t v39 = v0[29];
  uint64_t v40 = v0[30];
  uint64_t v41 = v0[9];
  sub_100CBFAFC((unint64_t *)&qword_1016605E0, (void (*)(uint64_t))&type metadata accessor for Date);
  if (dispatch thunk of static Comparable.>= infix(_:_:)()) {
    uint64_t v42 = v38;
  }
  else {
    uint64_t v42 = v37;
  }
  v91 = v34;
  v34(v36, v42, v39);
  uint64_t v43 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
  v43(v38, v39);
  v93 = v43;
  v43(v37, v39);
  sub_10001D074(v35, v41, (uint64_t *)&unk_10163AC90);
  uint64_t v44 = type metadata accessor for KeyDropLostItemDates(0);
  sub_10001D074(v88, v41 + *(int *)(v44 + 20), (uint64_t *)&unk_10163AC90);
  if (qword_101636B18 != -1) {
    swift_once();
  }
  uint64_t v45 = v0[45];
  uint64_t v46 = v0[46];
  uint64_t v48 = v0[39];
  uint64_t v47 = v0[40];
  uint64_t v82 = v0[32];
  uint64_t v84 = v0[36];
  uint64_t v86 = v0[31];
  uint64_t v89 = v0[35];
  uint64_t v49 = v0[29];
  uint64_t v50 = v0[13];
  uint64_t v51 = v0[10];
  uint64_t v52 = type metadata accessor for Logger();
  sub_100010324(v52, (uint64_t)qword_10170DED0);
  sub_100CBD0EC(v51, v50, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  sub_10001D074(v46, v47, (uint64_t *)&unk_10163AC90);
  sub_10001D074(v45, v48, (uint64_t *)&unk_10163AC90);
  v91(v82, v84, v49);
  v91(v86, v89, v49);
  uint64_t v53 = Logger.logObject.getter();
  os_log_type_t v54 = static os_log_type_t.default.getter();
  BOOL v55 = os_log_type_enabled(v53, v54);
  uint64_t v56 = v0[46];
  uint64_t v92 = v0[45];
  uint64_t v57 = v0[40];
  uint64_t v90 = v0[39];
  if (v55)
  {
    uint64_t v58 = v0[38];
    uint64_t v87 = v0[36];
    uint64_t v81 = v0[31];
    uint64_t v79 = v0[32];
    uint64_t v80 = v0[29];
    uint64_t v83 = v0[28];
    uint64_t v59 = v0[13];
    uint64_t v85 = v0[46];
    uint64_t v60 = swift_slowAlloc();
    v95[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v60 = 141559299;
    v0[2] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v60 + 12) = 2081;
    sub_100CBFAFC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v61 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[3] = sub_1008FA0F0(v61, v62, v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100CBD154(v59, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    *(_WORD *)(v60 + 22) = 2082;
    sub_10001D074(v57, v58, (uint64_t *)&unk_10163AC90);
    uint64_t v63 = String.init<A>(describing:)();
    v0[4] = sub_1008FA0F0(v63, v64, v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10001DAB4(v57, (uint64_t *)&unk_10163AC90);
    *(_WORD *)(v60 + 32) = 2082;
    sub_10001D074(v90, v58, (uint64_t *)&unk_10163AC90);
    uint64_t v65 = String.init<A>(describing:)();
    v0[5] = sub_1008FA0F0(v65, v66, v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10001DAB4(v90, (uint64_t *)&unk_10163AC90);
    *(_WORD *)(v60 + 42) = 2082;
    sub_100CBFAFC((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
    uint64_t v67 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[6] = sub_1008FA0F0(v67, v68, v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v93(v79, v80);
    *(_WORD *)(v60 + 52) = 2082;
    uint64_t v69 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[7] = sub_1008FA0F0(v69, v70, v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v93(v81, v80);
    _os_log_impl((void *)&_mh_execute_header, v53, v54, "Lost item dates for beacon %{private,mask.hash}s delegationStartDate: %{public}s, lostModeEnabledDate: %{public}s, delegationModifiedDate: %{public}s, modifiedDate: %{public}s.", (uint8_t *)v60, 0x3Eu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    sub_10001DAB4(v83, (uint64_t *)&unk_101638D10);
    v93(v87, v80);
    sub_10001DAB4(v92, (uint64_t *)&unk_10163AC90);
    uint64_t v71 = v85;
  }
  else
  {
    uint64_t v72 = v0[36];
    uint64_t v74 = v0[31];
    uint64_t v73 = v0[32];
    uint64_t v76 = v0[28];
    uint64_t v75 = v0[29];
    uint64_t v77 = v0[13];

    v93(v74, v75);
    v93(v73, v75);
    sub_10001DAB4(v90, (uint64_t *)&unk_10163AC90);
    sub_10001DAB4(v57, (uint64_t *)&unk_10163AC90);
    sub_100CBD154(v77, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    sub_10001DAB4(v76, (uint64_t *)&unk_101638D10);
    v93(v72, v75);
    sub_10001DAB4(v92, (uint64_t *)&unk_10163AC90);
    uint64_t v71 = v56;
  }
  sub_10001DAB4(v71, (uint64_t *)&unk_10163AC90);
  (*(void (**)(void, void, void))(v0[30] + 32))(v0[8], v0[35], v0[29]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  v78 = (void (*)(void))v0[1];
  v78();
}

uint64_t sub_100CA24D0(uint64_t a1, uint64_t a2)
{
  v3[15] = a2;
  v3[16] = v2;
  v3[14] = a1;
  v3[17] = type metadata accessor for OwnedBeaconRecord();
  v3[18] = swift_task_alloc();
  v3[19] = swift_task_alloc();
  v3[20] = swift_task_alloc();
  return _swift_task_switch(sub_100CA2584, 0, 0);
}

uint64_t sub_100CA2584()
{
  uint64_t v40 = v0;
  int v1 = *(unsigned __int8 *)(v0[15] + *(int *)(v0[17] + 80));
  v0[5] = 0x5F6761747269615FLL;
  if (v1) {
    unint64_t v2 = 0xEA00000000003130;
  }
  else {
    unint64_t v2 = 0xEA00000000003030;
  }
  v0[6] = v2;
  if (sub_100D1CA38())
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = sub_100D1B318();
    if (v4 >> 60 == 15)
    {
      if (qword_101636B18 != -1) {
        swift_once();
      }
      uint64_t v5 = v0[19];
      uint64_t v6 = v0[15];
      uint64_t v7 = type metadata accessor for Logger();
      sub_100010324(v7, (uint64_t)qword_10170DED0);
      sub_100CBD0EC(v6, v5, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      uint64_t v8 = Logger.logObject.getter();
      os_log_type_t v9 = static os_log_type_t.error.getter();
      BOOL v10 = os_log_type_enabled(v8, v9);
      uint64_t v11 = v0[19];
      if (v10)
      {
        uint64_t v12 = (uint8_t *)swift_slowAlloc();
        v39[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v12 = 136315138;
        type metadata accessor for UUID();
        sub_100CBFAFC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
        v0[11] = sub_1008FA0F0(v13, v14, v39);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100CBD154(v11, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        _os_log_impl((void *)&_mh_execute_header, v8, v9, "product data is missing for the beacon id %s)", v12, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_100CBD154(v0[19], (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      }

      sub_100130078();
      swift_allocError();
      *uint64_t v31 = 27;
      swift_willThrow();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      int v32 = (uint64_t (*)(void))v0[1];
      return v32();
    }
    uint64_t v15 = v3;
    unint64_t v16 = v4;
    uint64_t v17 = Data.hexString.getter();
    unint64_t v19 = v18;
    uint64_t v37 = v17;
    v0[5] = v17;
    v0[6] = v18;
    uint64_t v20 = qword_101636B18;
    swift_bridgeObjectRetain();
    if (v20 != -1) {
      swift_once();
    }
    uint64_t v21 = v0[20];
    uint64_t v22 = v0[15];
    uint64_t v23 = type metadata accessor for Logger();
    sub_100010324(v23, (uint64_t)qword_10170DED0);
    sub_100CBD0EC(v22, v21, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    swift_bridgeObjectRetain();
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.default.getter();
    BOOL v26 = os_log_type_enabled(v24, v25);
    uint64_t v27 = v0[20];
    if (v26)
    {
      uint64_t v28 = swift_slowAlloc();
      v39[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 136315394;
      type metadata accessor for UUID();
      sub_100CBFAFC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[12] = sub_1008FA0F0(v29, v30, v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100CBD154(v27, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      *(_WORD *)(v28 + 12) = 2080;
      swift_bridgeObjectRetain();
      v0[13] = sub_1008FA0F0(v37, v19, v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "hawkeye id %s, product id %s", (uint8_t *)v28, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_100037A24(v15, v16);
    }
    else
    {
      sub_100037A24(v15, v16);
      sub_100CBD154(v27, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);

      swift_bridgeObjectRelease_n();
    }
  }
  uint64_t v34 = *(void *)(v0[16] + 120);
  uint64_t v38 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10165C128 + dword_10165C128);
  uint64_t v35 = (void *)swift_task_alloc();
  v0[21] = v35;
  *uint64_t v35 = v0;
  v35[1] = sub_100CA2BDC;
  uint64_t v36 = v0[15];
  return v38(v36, v34);
}

uint64_t sub_100CA2BDC(uint64_t a1)
{
  *(void *)(*(void *)v1 + 176) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100CA2CDC, 0, 0);
}

uint64_t sub_100CA2CDC()
{
  uint64_t v22 = v0;
  id v1 = [*(id *)(v0 + 176) serialNumber];
  if (v1)
  {
    unint64_t v2 = v1;
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v5 = v4;
    *(void *)(v0 + 56) = v3;
    *(void *)(v0 + 64) = v4;

    *(void *)(v0 + 184) = v5;
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v0 + 192) = v6;
    *uint64_t v6 = v0;
    v6[1] = sub_100CA3098;
    v6[36] = *(void *)(v0 + 128);
    return _swift_task_switch(sub_100CA3390, 0, 0);
  }
  else
  {
    swift_bridgeObjectRelease();
    if (qword_101636B18 != -1) {
      swift_once();
    }
    uint64_t v7 = *(void *)(v0 + 144);
    uint64_t v8 = *(void *)(v0 + 120);
    uint64_t v9 = type metadata accessor for Logger();
    sub_100010324(v9, (uint64_t)qword_10170DED0);
    sub_100CBD0EC(v8, v7, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    BOOL v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    BOOL v12 = os_log_type_enabled(v10, v11);
    uint64_t v13 = *(void *)(v0 + 144);
    if (v12)
    {
      uint64_t v14 = swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 141558275;
      *(void *)(v0 + 80) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v14 + 12) = 2081;
      type metadata accessor for UUID();
      sub_100CBFAFC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 72) = sub_1008FA0F0(v15, v16, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100CBD154(v13, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Could not obtain serial number for beaconIdentifier: %{private,mask.hash}s while creating delegated attributes", (uint8_t *)v14, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100CBD154(*(void *)(v0 + 144), (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    }

    uint64_t v17 = *(void **)(v0 + 176);
    sub_100130078();
    swift_allocError();
    *unint64_t v18 = 25;
    swift_willThrow();

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v19 = *(uint64_t (**)(void))(v0 + 8);
    return v19();
  }
}

uint64_t sub_100CA3098(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  BOOL v10 = *(void **)v5;
  *(void *)(*(void *)v5 + 200) = v4;
  swift_task_dealloc();
  if (v4)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    os_log_type_t v11 = sub_100CA32E8;
  }
  else
  {
    uint64_t v12 = v10[7];
    v10[26] = a4;
    v10[27] = a3;
    v10[28] = a2;
    v10[29] = a1;
    v10[30] = v12;
    os_log_type_t v11 = sub_100CA31F0;
  }
  return _swift_task_switch(v11, 0, 0);
}

uint64_t sub_100CA31F0()
{
  uint64_t v1 = *(void *)(v0 + 240);
  uint64_t v2 = *(void *)(v0 + 216);
  uint64_t v10 = *(void *)(v0 + 224);
  uint64_t v11 = *(void *)(v0 + 232);
  uint64_t v9 = *(void *)(v0 + 208);
  uint64_t v3 = *(void *)(v0 + 184);
  uint64_t v4 = *(void **)(v0 + 112);

  swift_beginAccess();
  uint64_t v6 = *(void *)(v0 + 40);
  uint64_t v5 = *(void *)(v0 + 48);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  void *v4 = v1;
  v4[1] = v3;
  v4[2] = v6;
  v4[3] = v5;
  v4[4] = v11;
  v4[5] = v10;
  v4[6] = v2;
  v4[7] = v9;
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_100CA32E8()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100CA3370()
{
  *(void *)(v1 + 288) = v0;
  return _swift_task_switch(sub_100CA3390, 0, 0);
}

uint64_t sub_100CA3390()
{
  id v1 = [objc_allocWithZone((Class)ACAccountStore) init];
  v0[37] = v1;
  v0[2] = v0;
  v0[7] = v0 + 35;
  v0[3] = sub_100CA34AC;
  uint64_t v2 = swift_continuation_init();
  v0[10] = _NSConcreteStackBlock;
  v0[11] = 0x40000000;
  v0[12] = sub_100C27604;
  v0[13] = &unk_1015EE198;
  v0[14] = v2;
  [v1 aa_primaryAppleAccountWithCompletion:v0 + 10];
  return _swift_continuation_await(v0 + 2);
}

uint64_t sub_100CA34AC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48);
  *(void *)(*(void *)v0 + 304) = v1;
  if (v1) {
    uint64_t v2 = sub_100CA39F8;
  }
  else {
    uint64_t v2 = sub_100CA35BC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100CA35BC()
{
  uint64_t v1 = (void *)v0[37];
  uint64_t v2 = v0[35];
  v0[39] = v2;

  if (v2)
  {
    uint64_t v3 = v0[36];
    return _swift_task_switch(sub_100CA3750, v3, 0);
  }
  else
  {
    if (qword_101636B18 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_10170DED0);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Could not obtain aa_primaryAppleAccount while creating delegated attributes !", v7, 2u);
      swift_slowDealloc();
    }

    sub_100130078();
    swift_allocError();
    *uint64_t v8 = 24;
    swift_willThrow();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
}

uint64_t sub_100CA3750()
{
  sub_100CBC654(v0 + 240);
  return _swift_task_switch(sub_100CA37B8, 0, 0);
}

uint64_t sub_100CA37B8()
{
  sub_10001D608(v0 + 240, v0 + 120, &qword_10165C118);
  if (*(unsigned __int8 *)(v0 + 152) == 255)
  {
    if (qword_101636B18 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100010324(v6, (uint64_t)qword_10170DED0);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "email/phone not found for web metadata", v9, 2u);
      swift_slowDealloc();
    }
    uint64_t v10 = *(void **)(v0 + 312);

    sub_100130078();
    swift_allocError();
    unsigned char *v11 = 26;
    swift_willThrow();

    uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
    return v12();
  }
  else
  {
    uint64_t v1 = *(void **)(v0 + 312);
    sub_1005FCF90((long long *)(v0 + 120), v0 + 200);

    sub_1005FCF90((long long *)(v0 + 200), v0 + 160);
    if (*(unsigned char *)(v0 + 192))
    {
      if (*(unsigned char *)(v0 + 192) == 1)
      {
        uint64_t v2 = 0;
        uint64_t v3 = 0;
        uint64_t v4 = *(void *)(v0 + 160);
        uint64_t v5 = *(void *)(v0 + 168);
      }
      else
      {
        uint64_t v2 = *(void *)(v0 + 160);
        uint64_t v3 = *(void *)(v0 + 168);
        uint64_t v4 = *(void *)(v0 + 176);
        uint64_t v5 = *(void *)(v0 + 184);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_100CBDFA4(v0 + 240);
      }
    }
    else
    {
      uint64_t v4 = 0;
      uint64_t v5 = 0;
      uint64_t v2 = *(void *)(v0 + 160);
      uint64_t v3 = *(void *)(v0 + 168);
    }
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 8);
    return v14(v2, v3, v4, v5);
  }
}

uint64_t sub_100CA39F8()
{
  uint64_t v1 = *(void **)(v0 + 296);
  swift_willThrow();

  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100CA3A68(uint64_t a1, char a2, uint64_t a3)
{
  *(void *)(v4 + 536) = v3;
  *(void *)(v4 + 528) = a3;
  *(unsigned char *)(v4 + 940) = a2;
  *(void *)(v4 + 520) = a1;
  *(void *)(v4 + 544) = type metadata accessor for OwnedBeaconRecord();
  *(void *)(v4 + 552) = swift_task_alloc();
  *(void *)(v4 + 560) = swift_task_alloc();
  *(void *)(v4 + 568) = swift_task_alloc();
  *(void *)(v4 + 576) = *(void *)(type metadata accessor for BookmarkMetaData() - 8);
  *(void *)(v4 + 584) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Date();
  *(void *)(v4 + 592) = v5;
  *(void *)(v4 + 600) = *(void *)(v5 - 8);
  *(void *)(v4 + 608) = swift_task_alloc();
  *(void *)(v4 + 616) = swift_task_alloc();
  *(void *)(v4 + 624) = swift_task_alloc();
  *(void *)(v4 + 632) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for DateInterval();
  *(void *)(v4 + 640) = v6;
  *(void *)(v4 + 648) = *(void *)(v6 - 8);
  *(void *)(v4 + 656) = swift_task_alloc();
  *(void *)(v4 + 664) = swift_task_alloc();
  *(void *)(v4 + 672) = swift_task_alloc();
  *(void *)(v4 + 680) = swift_task_alloc();
  *(void *)(v4 + 688) = sub_10000588C(&qword_10163F7B0);
  *(void *)(v4 + 696) = swift_task_alloc();
  *(void *)(v4 + 704) = swift_task_alloc();
  return _swift_task_switch(sub_100CA3CC8, v3, 0);
}

uint64_t sub_100CA3CC8()
{
  uint64_t v1 = v0[66];
  v0[5] = v0[68];
  uint64_t v2 = sub_100CBFAFC(&qword_101638DD0, (void (*)(uint64_t))type metadata accessor for OwnedBeaconRecord);
  v0[89] = v2;
  v0[6] = v2;
  uint64_t v3 = sub_10001D958(v0 + 2);
  sub_100CBD0EC(v1, (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  uint64_t v4 = (void *)swift_task_alloc();
  v0[90] = (uint64_t)v4;
  void *v4 = v0;
  v4[1] = sub_100CA3DE0;
  uint64_t v5 = v0[88];
  return sub_100C4E6F0(v5, (uint64_t)(v0 + 2));
}

uint64_t sub_100CA3DE0()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 728) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 536);
    uint64_t v4 = sub_100CA6B2C;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 536);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v2 + 16);
    uint64_t v4 = sub_100CA3F08;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100CA3F08()
{
  *(_DWORD *)(v0 + 936) = *(_DWORD *)(*(void *)(v0 + 544) + 24);
  if (sub_10111198C())
  {
    uint64_t v1 = (void *)swift_task_alloc();
    *(void *)(v0 + 736) = v1;
    *uint64_t v1 = v0;
    v1[1] = sub_100CA400C;
    uint64_t v2 = *(void *)(v0 + 680);
  }
  else
  {
    *(void *)(v0 + 744) = 0;
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 752) = v3;
    void *v3 = v0;
    v3[1] = sub_100CA4258;
    uint64_t v2 = *(void *)(v0 + 664);
  }
  return sub_100C289A0(v2);
}

uint64_t sub_100CA400C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 536);
  swift_task_dealloc();
  return _swift_task_switch(sub_100CA411C, v1, 0);
}

uint64_t sub_100CA411C()
{
  uint64_t v1 = *(void *)(v0 + 680);
  uint64_t v2 = *(void *)(v0 + 648);
  uint64_t v3 = *(void *)(v0 + 640);
  uint64_t v4 = *(void *)(v0 + 632);
  uint64_t v5 = *(void *)(v0 + 600);
  uint64_t v6 = *(void *)(v0 + 592);
  DateInterval.end.getter();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  Date.timeIntervalSince(_:)();
  if (v7 > 0.0) {
    double v8 = v7 * 0.0002;
  }
  else {
    double v8 = 0.0;
  }
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  *(double *)(v0 + 744) = v8;
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 752) = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_100CA4258;
  uint64_t v10 = *(void *)(v0 + 664);
  return sub_100C289A0(v10);
}

uint64_t sub_100CA4258()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 536);
  swift_task_dealloc();
  return _swift_task_switch(sub_100CA4368, v1, 0);
}

uint64_t sub_100CA4368()
{
  uint64_t v1 = v0[83];
  uint64_t v2 = v0[81];
  uint64_t v3 = v0[80];
  DateInterval.start.getter();
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v0[95] = v4;
  v0[96] = (v2 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v4(v1, v3);
  uint64_t v5 = (void *)swift_task_alloc();
  v0[97] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100CA4444;
  uint64_t v6 = v0[82];
  return sub_100C289A0(v6);
}

uint64_t sub_100CA4444()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 536);
  swift_task_dealloc();
  return _swift_task_switch(sub_100CA4554, v1, 0);
}

uint64_t sub_100CA4554()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[95];
  uint64_t v13 = v0[89];
  uint64_t v2 = v0[82];
  uint64_t v3 = v0[80];
  uint64_t v4 = v0[76];
  uint64_t v5 = v0[75];
  uint64_t v6 = v0[74];
  uint64_t v7 = v0[68];
  uint64_t v12 = v0[66];
  DateInterval.end.getter();
  v1(v2, v3);
  Date.addingTimeInterval(_:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  DateInterval.init(start:end:)();
  v0[10] = v7;
  v0[11] = v13;
  uint64_t v8 = sub_10001D958(v0 + 7);
  sub_100CBD0EC(v12, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  uint64_t v9 = (void *)swift_task_alloc();
  v0[98] = (uint64_t)v9;
  *uint64_t v9 = v0;
  v9[1] = sub_100CA46D8;
  uint64_t v10 = v0[87];
  return sub_100C4EEFC(v10, (uint64_t)(v0 + 7));
}

uint64_t sub_100CA46D8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 792) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 536);
    uint64_t v4 = sub_100CA6C64;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 536);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v2 + 56);
    uint64_t v4 = sub_100CA4800;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100CA4800()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 536) + 120);
  *(void *)(v0 + 800) = v1;
  return _swift_task_switch(sub_100CA4824, v1, 0);
}

uint64_t sub_100CA4824()
{
  *(void *)(v0 + 808) = *(void *)(*(void *)(v0 + 800) + 136);
  swift_retain();
  return _swift_task_switch(sub_100CA4898, 0, 0);
}

uint64_t sub_100CA4898()
{
  uint64_t v1 = v0[101];
  uint64_t v2 = v0[100];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[102] = v3;
  v3[2] = v1;
  v3[3] = sub_10001DAA0;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[103] = v4;
  uint64_t v5 = type metadata accessor for BeaconKeyManager(0);
  void *v4 = v0;
  v4[1] = sub_100CA49B0;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 12, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10001DAA8, v3, v5);
}

uint64_t sub_100CA49B0()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 536);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 832) = *(void *)(v1 + 96);
  return _swift_task_switch(sub_100CA4B20, v2, 0);
}

uint64_t sub_100CA4B20()
{
  unint64_t v1 = sub_100CBD220(*(void *)(v0 + 528), *(void *)(v0 + 672), *(unint64_t **)(v0 + 696));
  *(void *)(v0 + 840) = v1;
  *(void *)(v0 + 848) = v2;
  if (sub_10111198C())
  {
    unint64_t v3 = **(void **)(v0 + 704);
    if (v3) {
      unint64_t v1 = v3 / 0x60 + 1;
    }
    else {
      unint64_t v1 = 0;
    }
  }
  uint64_t v4 = *(void *)(v0 + 520);
  uint64_t result = type metadata accessor for SharingCircleKeyManager.Instruction(0);
  uint64_t v6 = *(void *)(v4 + *(int *)(result + 44));
  if (*(void *)(v6 + 16) && (uint64_t result = sub_100724268(*(unsigned char *)(v0 + 940)), (v7 & 1) != 0))
  {
    uint64_t v8 = *(void *)(v0 + 584);
    sub_100CBD0EC(*(void *)(v6 + 56) + *(void *)(*(void *)(v0 + 576) + 72) * result, v8, (uint64_t (*)(void))type metadata accessor for BookmarkMetaData);
    unint64_t v9 = *(void *)(v8 + 8);
    uint64_t result = sub_100CBD154(v8, (uint64_t (*)(void))type metadata accessor for BookmarkMetaData);
  }
  else
  {
    unint64_t v9 = 0;
  }
  if (((1 << *(unsigned char *)(v0 + 940)) & 0x1FDDA) == 0)
  {
    if (v9) {
      unint64_t v9 = v9 / 0x60 + 1;
    }
    else {
      unint64_t v9 = 0;
    }
  }
  *(void *)(v0 + 856) = v9;
  unint64_t v10 = v9 + 1;
  if (v9 == -1)
  {
    __break(1u);
  }
  else
  {
    if (v10 <= v1) {
      unint64_t v10 = v1;
    }
    *(void *)(v0 + 864) = v10;
    uint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 872) = v11;
    void *v11 = v0;
    v11[1] = sub_100CA4CD4;
    return sub_100C28394();
  }
  return result;
}

uint64_t sub_100CA4CD4(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 536);
  *(void *)(*(void *)v1 + 880) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100CA4DEC, v2, 0);
}

void sub_100CA4DEC()
{
  uint64_t v1 = v0[110];
  BOOL v2 = v1 != 0;
  uint64_t v3 = v1 - 1;
  if (!v2)
  {
    __break(1u);
LABEL_9:
    __break(1u);
    return;
  }
  uint64_t v4 = v0[108];
  BOOL v2 = __CFADD__(v4, v3);
  unint64_t v5 = v4 + v3;
  if (v2) {
    goto LABEL_9;
  }
  if (v0[106] < v5) {
    unint64_t v5 = v0[106];
  }
  v0[111] = v5;
  uint64_t v6 = (void *)swift_task_alloc();
  v0[112] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_100CA4EB4;
  uint64_t v7 = v0[83];
  sub_100C289A0(v7);
}

uint64_t sub_100CA4EB4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 536);
  swift_task_dealloc();
  return _swift_task_switch(sub_100CA4FC4, v1, 0);
}

uint64_t sub_100CA4FC4()
{
  uint64_t v54 = v0;
  unint64_t v1 = *(void *)(v0 + 888);
  unint64_t v2 = *(void *)(v0 + 864);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(v0 + 760);
  uint64_t v4 = *(void *)(v0 + 664);
  uint64_t v5 = *(void *)(v0 + 640);
  DateInterval.duration.getter();
  uint64_t v7 = v6;
  *(void *)(v0 + 904) = v6;
  v3(v4, v5);
  if (v1 >= v2)
  {
    return _swift_task_switch(sub_100CA582C, 0, 0);
  }
  else
  {
    if (qword_101637020 != -1) {
      swift_once();
    }
    uint64_t v8 = *(void *)(v0 + 552);
    uint64_t v9 = *(void *)(v0 + 528);
    uint64_t v10 = type metadata accessor for Logger();
    sub_100010324(v10, (uint64_t)qword_10170EB40);
    sub_100CBD0EC(v9, v8, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v42 = *(void *)(v0 + 888);
      uint64_t v40 = *(void *)(v0 + 856);
      uint64_t v41 = *(void *)(v0 + 864);
      uint64_t v50 = *(void *)(v0 + 848);
      uint64_t v13 = *(void *)(v0 + 840);
      uint64_t v48 = *(void (**)(uint64_t, uint64_t))(v0 + 760);
      uint64_t v14 = *(void *)(v0 + 744);
      uint64_t v49 = *(void *)(v0 + 704);
      uint64_t v45 = *(void *)(v0 + 696);
      uint64_t v46 = *(void *)(v0 + 640);
      uint64_t v47 = *(void *)(v0 + 672);
      uint64_t v43 = *(void *)(v0 + 552);
      log = v11;
      char v15 = *(unsigned char *)(v0 + 940);
      uint64_t v16 = swift_slowAlloc();
      uint64_t v52 = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136448771;
      unint64_t v17 = sub_1012638E4(v15);
      *(void *)(v0 + 392) = sub_1008FA0F0(v17, v18, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v16 + 12) = 2080;
      strcpy((char *)v53, ".secondary/(");
      BYTE5(v53[1]) = 0;
      HIWORD(v53[1]) = -5120;
      *(void *)(v0 + 400) = v13;
      v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v19);
      swift_bridgeObjectRelease();
      v20._countAndFlagsBits = 41;
      v20._object = (void *)0xE100000000000000;
      String.append(_:)(v20);
      *(void *)(v0 + 408) = sub_1008FA0F0(v53[0], v53[1], &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v16 + 22) = 2080;
      strcpy((char *)v53, ".secondary/(");
      BYTE5(v53[1]) = 0;
      HIWORD(v53[1]) = -5120;
      *(void *)(v0 + 416) = v50;
      v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v21);
      swift_bridgeObjectRelease();
      v22._countAndFlagsBits = 41;
      v22._object = (void *)0xE100000000000000;
      String.append(_:)(v22);
      *(void *)(v0 + 424) = sub_1008FA0F0(v53[0], v53[1], &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v16 + 32) = 2048;
      *(void *)(v0 + 432) = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v16 + 42) = 2080;
      strcpy((char *)v53, ".secondary/(");
      BYTE5(v53[1]) = 0;
      HIWORD(v53[1]) = -5120;
      *(void *)(v0 + 440) = v41;
      v23._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v23);
      swift_bridgeObjectRelease();
      v24._countAndFlagsBits = 41;
      v24._object = (void *)0xE100000000000000;
      String.append(_:)(v24);
      *(void *)(v0 + 448) = sub_1008FA0F0(v53[0], v53[1], &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v16 + 52) = 2080;
      strcpy((char *)v53, ".secondary/(");
      BYTE5(v53[1]) = 0;
      HIWORD(v53[1]) = -5120;
      *(void *)(v0 + 456) = v42;
      v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v25);
      swift_bridgeObjectRelease();
      v26._countAndFlagsBits = 41;
      v26._object = (void *)0xE100000000000000;
      String.append(_:)(v26);
      *(void *)(v0 + 464) = sub_1008FA0F0(v53[0], v53[1], &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v16 + 62) = 2080;
      strcpy((char *)v53, ".secondary/(");
      BYTE5(v53[1]) = 0;
      HIWORD(v53[1]) = -5120;
      *(void *)(v0 + 472) = v50;
      v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v27);
      swift_bridgeObjectRelease();
      v28._countAndFlagsBits = 41;
      v28._object = (void *)0xE100000000000000;
      String.append(_:)(v28);
      *(void *)(v0 + 480) = sub_1008FA0F0(v53[0], v53[1], &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v16 + 72) = 2048;
      *(void *)(v0 + 488) = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v16 + 82) = 2048;
      *(void *)(v0 + 496) = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v16 + 92) = 2160;
      *(void *)(v0 + 504) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v16 + 102) = 2081;
      type metadata accessor for UUID();
      sub_100CBFAFC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 512) = sub_1008FA0F0(v29, v30, &v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100CBD154(v43, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      _os_log_impl((void *)&_mh_execute_header, log, v12, "Satisfied high water for secondary Index Range type: %{public}s - start: %s, end: %s, bookmarkValue: %llu,\nadjusted start: %s, end: %s, highWaterIndex: %s,\nduration: %f, maxDrift: %f,\nbeaconIdentifier: %{private,mask.hash}s.", (uint8_t *)v16, 0x70u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();

      sub_10001DAB4(v45, &qword_10163F7B0);
      v48(v47, v46);
      uint64_t v31 = v49;
    }
    else
    {
      int v32 = *(void (**)(uint64_t, uint64_t))(v0 + 760);
      uint64_t v33 = *(void *)(v0 + 704);
      uint64_t v34 = *(void *)(v0 + 696);
      uint64_t v35 = *(void *)(v0 + 672);
      uint64_t v36 = *(void *)(v0 + 640);
      uint64_t v37 = *(void *)(v0 + 552);
      swift_release();

      sub_100CBD154(v37, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      sub_10001DAB4(v34, &qword_10163F7B0);
      v32(v35, v36);
      uint64_t v31 = v33;
    }
    sub_10001DAB4(v31, &qword_10163F7B0);
    uint64_t v51 = *(void *)(v0 + 848);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v38 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
    return v38(v51, v51);
  }
}

uint64_t sub_100CA582C()
{
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_10170E390;
  *(void *)(v0 + 912) = qword_10170E390;
  swift_retain();
  unint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 920) = v2;
  *unint64_t v2 = v0;
  v2[1] = sub_100CA5938;
  return unsafeBlocking<A>(_:)(v0 + 104, sub_10001D704, v1, &type metadata for Configuration);
}

uint64_t sub_100CA5938()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100CA5A50, 0, 0);
}

uint64_t sub_100CA5A50()
{
  uint64_t v1 = v0[67];
  v0[116] = sub_1010AC260(v0[13]);
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100CA5ACC, v1, 0);
}

uint64_t sub_100CA5ACC()
{
  uint64_t v97 = v0;
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v3 = sub_1010AB688(*(void *)(v0 + 112));
  swift_bridgeObjectRelease();
  if (v3 < 0) {
    return _assertionFailure(_:_:file:line:flags:)();
  }
  unint64_t v4 = *(void *)(v0 + 856);
  if ((v4 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_27:
    swift_once();
    goto LABEL_12;
  }
  unint64_t v5 = *(void *)(v0 + 848);
  double v1 = (double)*(unint64_t *)(v0 + 928) * 86400.0 / ((double)(unint64_t)v3 * 60.0);
  double v2 = (double)v5 - (double)v4;
  BOOL v7 = v1 < v2 && v4 < v5;
  if (!v4 || v7)
  {
    if (qword_101637020 != -1) {
      swift_once();
    }
    uint64_t v33 = *(void *)(v0 + 568);
    uint64_t v34 = *(void *)(v0 + 528);
    uint64_t v35 = type metadata accessor for Logger();
    sub_100010324(v35, (uint64_t)qword_10170EB40);
    sub_100CBD0EC(v34, v33, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = *(void *)(v0 + 904);
      uint64_t v77 = *(void *)(v0 + 864);
      uint64_t v78 = *(void *)(v0 + 888);
      uint64_t v75 = *(void *)(v0 + 856);
      uint64_t v73 = *(void *)(v0 + 848);
      type = v36;
      uint64_t v39 = *(void *)(v0 + 840);
      uint64_t v40 = *(void *)(v0 + 744);
      uint64_t v91 = *(void *)(v0 + 704);
      uint64_t v83 = *(void *)(v0 + 696);
      uint64_t v88 = *(void *)(v0 + 672);
      uint64_t v90 = *(void (**)(uint64_t, uint64_t))(v0 + 760);
      uint64_t v86 = *(void *)(v0 + 640);
      uint64_t v80 = *(void *)(v0 + 568);
      char v41 = *(unsigned char *)(v0 + 940);
      uint64_t v42 = swift_slowAlloc();
      uint64_t v95 = swift_slowAlloc();
      *(_DWORD *)uint64_t v42 = 136448771;
      unint64_t v43 = sub_1012638E4(v41);
      *(void *)(v0 + 264) = sub_1008FA0F0(v43, v44, &v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v42 + 12) = 2080;
      strcpy((char *)v96, ".secondary/(");
      BYTE5(v96[1]) = 0;
      HIWORD(v96[1]) = -5120;
      *(void *)(v0 + 272) = v39;
      v45._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v45);
      swift_bridgeObjectRelease();
      v46._countAndFlagsBits = 41;
      v46._object = (void *)0xE100000000000000;
      String.append(_:)(v46);
      *(void *)(v0 + 280) = sub_1008FA0F0(v96[0], v96[1], &v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v42 + 22) = 2080;
      strcpy((char *)v96, ".secondary/(");
      BYTE5(v96[1]) = 0;
      HIWORD(v96[1]) = -5120;
      *(void *)(v0 + 288) = v73;
      v47._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v47);
      swift_bridgeObjectRelease();
      v48._countAndFlagsBits = 41;
      v48._object = (void *)0xE100000000000000;
      String.append(_:)(v48);
      *(void *)(v0 + 296) = sub_1008FA0F0(v96[0], v96[1], &v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v42 + 32) = 2048;
      *(void *)(v0 + 304) = v75;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v42 + 42) = 2080;
      strcpy((char *)v96, ".secondary/(");
      BYTE5(v96[1]) = 0;
      HIWORD(v96[1]) = -5120;
      *(void *)(v0 + 312) = v77;
      v49._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v49);
      swift_bridgeObjectRelease();
      v50._countAndFlagsBits = 41;
      v50._object = (void *)0xE100000000000000;
      String.append(_:)(v50);
      *(void *)(v0 + 320) = sub_1008FA0F0(v96[0], v96[1], &v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v42 + 52) = 2080;
      strcpy((char *)v96, ".secondary/(");
      BYTE5(v96[1]) = 0;
      HIWORD(v96[1]) = -5120;
      *(void *)(v0 + 328) = v78;
      v51._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v51);
      swift_bridgeObjectRelease();
      v52._countAndFlagsBits = 41;
      v52._object = (void *)0xE100000000000000;
      String.append(_:)(v52);
      *(void *)(v0 + 336) = sub_1008FA0F0(v96[0], v96[1], &v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v42 + 62) = 2080;
      strcpy((char *)v96, ".secondary/(");
      BYTE5(v96[1]) = 0;
      HIWORD(v96[1]) = -5120;
      *(void *)(v0 + 344) = v73;
      v53._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v53);
      swift_bridgeObjectRelease();
      v54._countAndFlagsBits = 41;
      v54._object = (void *)0xE100000000000000;
      String.append(_:)(v54);
      *(void *)(v0 + 352) = sub_1008FA0F0(v96[0], v96[1], &v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v42 + 72) = 2048;
      *(void *)(v0 + 360) = v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v42 + 82) = 2048;
      *(void *)(v0 + 368) = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v42 + 92) = 2160;
      *(void *)(v0 + 376) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v42 + 102) = 2081;
      type metadata accessor for UUID();
      sub_100CBFAFC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v55 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 384) = sub_1008FA0F0(v55, v56, &v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100CBD154(v80, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      _os_log_impl((void *)&_mh_execute_header, type, v37, "Secondary Index Range type: %{public}s - start: %s, end: %s, bookmarkValue: %llu,\nadjusted start: %s, end: %s, highWaterIndex: %s,\nduration: %f, maxDrift: %f,\nbeaconIdentifier: %{private,mask.hash}s.", (uint8_t *)v42, 0x70u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();

      sub_10001DAB4(v83, &qword_10163F7B0);
      v90(v88, v86);
      uint64_t v57 = v91;
    }
    else
    {
      unint64_t v64 = *(void (**)(uint64_t, uint64_t))(v0 + 760);
      uint64_t v65 = *(void *)(v0 + 704);
      uint64_t v66 = *(void *)(v0 + 696);
      uint64_t v67 = *(void *)(v0 + 672);
      uint64_t v68 = *(void *)(v0 + 640);
      uint64_t v69 = *(void *)(v0 + 568);
      swift_release();

      sub_100CBD154(v69, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      sub_10001DAB4(v66, &qword_10163F7B0);
      v64(v67, v68);
      uint64_t v57 = v65;
    }
    sub_10001DAB4(v57, &qword_10163F7B0);
    uint64_t v92 = *(void *)(v0 + 888);
    uint64_t v94 = *(void *)(v0 + 864);
    goto LABEL_22;
  }
  if (qword_101637020 != -1) {
    goto LABEL_27;
  }
LABEL_12:
  uint64_t v8 = *(void *)(v0 + 560);
  uint64_t v9 = *(void *)(v0 + 528);
  uint64_t v10 = type metadata accessor for Logger();
  sub_100010324(v10, (uint64_t)qword_10170EB40);
  sub_100CBD0EC(v9, v8, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = *(void *)(v0 + 904);
    uint64_t v72 = *(void *)(v0 + 856);
    uint64_t v74 = *(void *)(v0 + 864);
    uint64_t v76 = *(void *)(v0 + 888);
    uint64_t v93 = *(void *)(v0 + 848);
    uint64_t v14 = *(void *)(v0 + 840);
    uint64_t v87 = *(void (**)(uint64_t, uint64_t))(v0 + 760);
    uint64_t v15 = *(void *)(v0 + 744);
    uint64_t v89 = *(void *)(v0 + 704);
    uint64_t v85 = *(void *)(v0 + 672);
    uint64_t v82 = *(void *)(v0 + 696);
    uint64_t v84 = *(void *)(v0 + 640);
    uint64_t v79 = *(void *)(v0 + 560);
    char v16 = *(unsigned char *)(v0 + 940);
    uint64_t v17 = swift_slowAlloc();
    uint64_t v95 = swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 136449283;
    unint64_t v18 = sub_1012638E4(v16);
    *(void *)(v0 + 120) = sub_1008FA0F0(v18, v19, &v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 2080;
    strcpy((char *)v96, ".secondary/(");
    BYTE5(v96[1]) = 0;
    HIWORD(v96[1]) = -5120;
    *(void *)(v0 + 128) = v14;
    v20._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v20);
    swift_bridgeObjectRelease();
    v21._countAndFlagsBits = 41;
    v21._object = (void *)0xE100000000000000;
    String.append(_:)(v21);
    *(void *)(v0 + 136) = sub_1008FA0F0(v96[0], v96[1], &v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 22) = 2080;
    strcpy((char *)v96, ".secondary/(");
    BYTE5(v96[1]) = 0;
    HIWORD(v96[1]) = -5120;
    *(void *)(v0 + 144) = v93;
    v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    v23._countAndFlagsBits = 41;
    v23._object = (void *)0xE100000000000000;
    String.append(_:)(v23);
    *(void *)(v0 + 152) = sub_1008FA0F0(v96[0], v96[1], &v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 32) = 2048;
    *(void *)(v0 + 160) = v72;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v17 + 42) = 2080;
    strcpy((char *)v96, ".secondary/(");
    BYTE5(v96[1]) = 0;
    HIWORD(v96[1]) = -5120;
    *(void *)(v0 + 168) = v74;
    v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    v25._countAndFlagsBits = 41;
    v25._object = (void *)0xE100000000000000;
    String.append(_:)(v25);
    *(void *)(v0 + 176) = sub_1008FA0F0(v96[0], v96[1], &v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 52) = 2080;
    strcpy((char *)v96, ".secondary/(");
    BYTE5(v96[1]) = 0;
    HIWORD(v96[1]) = -5120;
    *(void *)(v0 + 184) = v76;
    v26._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    v27._countAndFlagsBits = 41;
    v27._object = (void *)0xE100000000000000;
    String.append(_:)(v27);
    *(void *)(v0 + 192) = sub_1008FA0F0(v96[0], v96[1], &v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 62) = 2080;
    strcpy((char *)v96, ".secondary/(");
    BYTE5(v96[1]) = 0;
    HIWORD(v96[1]) = -5120;
    *(void *)(v0 + 200) = v93;
    v28._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    v29._countAndFlagsBits = 41;
    v29._object = (void *)0xE100000000000000;
    String.append(_:)(v29);
    *(void *)(v0 + 208) = sub_1008FA0F0(v96[0], v96[1], &v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 72) = 2048;
    *(void *)(v0 + 216) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v17 + 82) = 2048;
    *(void *)(v0 + 224) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v17 + 92) = 2048;
    *(double *)(v0 + 232) = v2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v17 + 102) = 2048;
    *(double *)(v0 + 240) = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v17 + 112) = 2160;
    *(void *)(v0 + 248) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v17 + 122) = 2081;
    type metadata accessor for UUID();
    sub_100CBFAFC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 256) = sub_1008FA0F0(v30, v31, &v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100CBD154(v79, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Satisfied low water for secondary Index Range type: %{public}s - start: %s, end: %s, bookmarkValue: %llu,\nadjusted start: %s, end: %s, highWaterIndex: %s,\nduration: %f, maxDrift: %f, remainingKeysToReachHighWater: %f < %f,\nbeaconIdentifier: %{private,mask.hash}s.", (uint8_t *)v17, 0x84u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();

    sub_10001DAB4(v82, &qword_10163F7B0);
    v87(v85, v84);
    uint64_t v32 = v89;
  }
  else
  {
    uint64_t v58 = *(void (**)(uint64_t, uint64_t))(v0 + 760);
    uint64_t v59 = *(void *)(v0 + 704);
    uint64_t v60 = *(void *)(v0 + 696);
    uint64_t v61 = *(void *)(v0 + 672);
    uint64_t v62 = *(void *)(v0 + 640);
    uint64_t v63 = *(void *)(v0 + 560);
    swift_release();

    sub_100CBD154(v63, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    sub_10001DAB4(v60, &qword_10163F7B0);
    v58(v61, v62);
    uint64_t v32 = v59;
  }
  sub_10001DAB4(v32, &qword_10163F7B0);
  uint64_t v92 = *(void *)(v0 + 856);
  uint64_t v94 = v92;
LABEL_22:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v70 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  return v70(v94, v92);
}

uint64_t sub_100CA6B2C()
{
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  double v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100CA6C64()
{
  uint64_t v1 = *(void *)(v0 + 704);
  (*(void (**)(void, void))(v0 + 760))(*(void *)(v0 + 672), *(void *)(v0 + 640));
  sub_10001DAB4(v1, &qword_10163F7B0);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 56);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  double v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100CA6DC8(uint64_t a1, uint64_t a2)
{
  v3[20] = a2;
  v3[21] = v2;
  v3[19] = a1;
  sub_10000588C((uint64_t *)&unk_10163EB40);
  v3[22] = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_101653D40);
  v3[23] = swift_task_alloc();
  uint64_t v4 = sub_10000588C(&qword_10163F7B0);
  v3[24] = v4;
  v3[25] = *(void *)(v4 - 8);
  v3[26] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  v3[27] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[28] = v6;
  v3[29] = *(void *)(v6 + 64);
  v3[30] = swift_task_alloc();
  v3[31] = swift_task_alloc();
  v3[32] = swift_task_alloc();
  return _swift_task_switch(sub_100CA6F70, v2, 0);
}

uint64_t sub_100CA6F70()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 168) + 120);
  *(void *)(v0 + 264) = v1;
  return _swift_task_switch(sub_100CA6F94, v1, 0);
}

uint64_t sub_100CA6F94()
{
  uint64_t v1 = v0[32];
  uint64_t v2 = v0[33];
  uint64_t v3 = v0[28];
  uint64_t v4 = v0[27];
  uint64_t v5 = v0[20];
  v0[34] = *(void *)(v2 + 136);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[35] = v6;
  v0[36] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v1, v5, v4);
  unint64_t v7 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v8 = swift_allocObject();
  v0[37] = v8;
  *(void *)(v8 + 16) = v2;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v8 + v7, v1, v4);
  swift_retain();
  return _swift_task_switch(sub_100CA7094, 0, 0);
}

uint64_t sub_100CA7094()
{
  uint64_t v1 = v0[37];
  uint64_t v2 = v0[34];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[38] = v3;
  v3[2] = v2;
  v3[3] = sub_1002F5A00;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[39] = v4;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_10163BBE0);
  void *v4 = v0;
  v4[1] = sub_100CA71B0;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 7, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1002F7344, v3, v5);
}

uint64_t sub_100CA71B0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 168);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_100CA7300, v1, 0);
}

uint64_t sub_100CA7300()
{
  uint64_t v1 = (long long *)(v0 + 7);
  if (v0[10])
  {
    sub_10001CEB0(v1, (uint64_t)(v0 + 2));
    uint64_t v2 = (void *)swift_task_alloc();
    v0[40] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100CA7488;
    uint64_t v3 = v0[23];
    return sub_100C4EEFC(v3, (uint64_t)(v0 + 2));
  }
  else
  {
    sub_10001DAB4((uint64_t)v1, (uint64_t *)&unk_10163BBE0);
    uint64_t v5 = v0[19];
    uint64_t v6 = type metadata accessor for TimeBasedKey();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = (uint64_t (*)(void))v0[1];
    return v7();
  }
}

uint64_t sub_100CA7488()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 168);
  if (v0)
  {
    swift_errorRelease();
    uint64_t v4 = sub_100CA75C0;
  }
  else
  {
    uint64_t v4 = sub_100CA76E8;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100CA75C0()
{
  uint64_t v1 = v0[23];
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))(v0[25] + 56))(v1, 1, 1, v0[24]);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 2));
  sub_10001DAB4(v1, (uint64_t *)&unk_101653D40);
  uint64_t v2 = v0[19];
  uint64_t v3 = type metadata accessor for TimeBasedKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100CA76E8()
{
  uint64_t v1 = (void *)v0[26];
  uint64_t v2 = v0[23];
  (*(void (**)(uint64_t, void, uint64_t, void))(v0[25] + 56))(v2, 0, 1, v0[24]);
  sub_10001D608(v2, (uint64_t)v1, &qword_10163F7B0);
  if (*v1) {
    unint64_t v3 = *v1 / 0x60uLL + 1;
  }
  else {
    unint64_t v3 = 0;
  }
  v0[41] = v3;
  uint64_t v4 = swift_task_alloc();
  v0[42] = v4;
  *(void *)uint64_t v4 = v0;
  *(void *)(v4 + 8) = sub_100CA7804;
  uint64_t v5 = v0[21];
  *(void *)(v4 + 40) = v3;
  *(void *)(v4 + 48) = v5;
  *(unsigned char *)(v4 + 96) = 1;
  *(void *)(v4 + 24) = v0 + 2;
  *(void *)(v4 + 32) = v3;
  return _swift_task_switch(sub_100CB23D4, 0, 0);
}

uint64_t sub_100CA7804(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 344) = a1;
  *(void *)(v4 + 352) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 168);
  if (v1) {
    uint64_t v6 = sub_100CA7DA0;
  }
  else {
    uint64_t v6 = sub_100CA7938;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_100CA7938()
{
  uint64_t v32 = v0;
  uint64_t v1 = v0[43];
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = type metadata accessor for TimeBasedKey();
  uint64_t v4 = *(void *)(v3 - 8);
  if (v2)
  {
    sub_100CBD0EC(v1+ ((*(unsigned __int8 *)(*(void *)(v3 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v3 - 8) + 80)), v0[22], (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = 1;
  }
  (*(void (**)(void, uint64_t, uint64_t, uint64_t))(v4 + 56))(v0[22], v5, 1, v3);
  swift_bridgeObjectRelease();
  if (qword_101637020 != -1) {
    swift_once();
  }
  uint64_t v6 = (void (*)(uint64_t, uint64_t, uint64_t))v0[35];
  uint64_t v7 = v0[31];
  uint64_t v8 = v0[27];
  uint64_t v9 = v0[20];
  uint64_t v10 = type metadata accessor for Logger();
  sub_100010324(v10, (uint64_t)qword_10170EB40);
  v6(v7, v9, v8);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = v0[41];
    uint64_t v14 = v0[28];
    uint64_t v26 = v0[27];
    uint64_t v27 = v0[31];
    uint64_t v29 = v0[26];
    uint64_t v15 = swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136315651;
    uint64_t v30 = v28;
    strcpy((char *)v31, ".secondary/(");
    BYTE5(v31[1]) = 0;
    HIWORD(v31[1]) = -5120;
    v0[15] = v13;
    v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17._countAndFlagsBits = 41;
    v17._object = (void *)0xE100000000000000;
    String.append(_:)(v17);
    v0[16] = sub_1008FA0F0(v31[0], v31[1], &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2160;
    v0[17] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v15 + 22) = 2081;
    sub_100CBFAFC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[18] = sub_1008FA0F0(v18, v19, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v27, v26);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Found SML Off - secondary key %s for %{private,mask.hash}s.", (uint8_t *)v15, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    sub_10001DAB4(v29, &qword_10163F7B0);
  }
  else
  {
    uint64_t v20 = v0[31];
    uint64_t v21 = v0[27];
    uint64_t v22 = v0[28];
    uint64_t v23 = v0[26];

    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v20, v21);
    sub_10001DAB4(v23, &qword_10163F7B0);
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 2));
  sub_10001D608(v0[22], v0[19], (uint64_t *)&unk_10163EB40);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  Swift::String v24 = (uint64_t (*)(void))v0[1];
  return v24();
}

uint64_t sub_100CA7DA0()
{
  Swift::String v25 = v0;
  if (qword_101637020 != -1) {
    swift_once();
  }
  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[35];
  uint64_t v2 = v0[30];
  uint64_t v3 = v0[27];
  uint64_t v4 = v0[20];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170EB40);
  v1(v2, v4, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = v0[30];
  uint64_t v10 = v0[27];
  uint64_t v11 = v0[28];
  uint64_t v12 = v0[26];
  if (v8)
  {
    uint64_t v23 = v0[26];
    os_log_type_t type = v7;
    uint64_t v13 = swift_slowAlloc();
    uint64_t v21 = (void *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 141558531;
    v0[12] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 12) = 2081;
    sub_100CBFAFC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[13] = sub_1008FA0F0(v14, v15, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    *(_WORD *)(v13 + 22) = 2114;
    swift_errorRetain();
    uint64_t v16 = _swift_stdlib_bridgeErrorToNSError();
    v0[14] = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v21 = v16;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, type, "Could not find SML Off - secondary key for %{private,mask.hash}s,error: %{public}@.", (uint8_t *)v13, 0x20u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    sub_10001DAB4(v23, &qword_10163F7B0);
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    swift_errorRelease();
    sub_10001DAB4(v12, &qword_10163F7B0);
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 2));
  uint64_t v17 = v0[19];
  uint64_t v18 = type metadata accessor for TimeBasedKey();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v19 = (uint64_t (*)(void))v0[1];
  return v19();
}

uint64_t sub_100CA81A4(uint64_t a1)
{
  *(void *)(v2 + 104) = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 112) = v4;
  void *v4 = v2;
  v4[1] = sub_100CA8264;
  v4[12] = a1;
  v4[13] = v1;
  v4[11] = v2 + 16;
  return _swift_task_switch(sub_100C32ED8, 0, 0);
}

uint64_t sub_100CA8264()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  *(void *)(*v1 + 120) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v4 = *(uint64_t (**)(void))(v3 + 8);
    return v4();
  }
  else
  {
    uint64_t v6 = *(void *)(v2 + 104);
    return _swift_task_switch(sub_100CA83AC, v6, 0);
  }
}

uint64_t sub_100CA83AC()
{
  unint64_t v19 = v0;
  unint64_t v1 = v0[8];
  if (v1 >> 60 == 15)
  {
    sub_100130078();
    swift_allocError();
    *uint64_t v2 = 12;
    swift_willThrow();
    sub_1001300CC(v0 + 2);
    uint64_t v3 = (uint64_t (*)(void))v0[1];
    return v3();
  }
  else
  {
    uint64_t v5 = v0[7];
    uint64_t v6 = v0[15];
    sub_1000361E0(v5, v0[8]);
    uint64_t v7 = PrivateKey.publicKey.getter(v5, v1);
    unint64_t v9 = v8;
    sub_1000361E0(v7, v8);
    uint64_t v10 = sub_100A94760(v7, v9);
    if (v6)
    {
      sub_10001CFB8(v7, v9);
      _StringGuts.grow(_:)(35);
      v0[10] = 0;
      v0[11] = 0xE000000000000000;
      v14._object = (void *)0x80000001013F3B70;
      v14._countAndFlagsBits = 0xD000000000000021;
      String.append(_:)(v14);
      v0[12] = v6;
      sub_10000588C(&qword_101638D40);
      _print_unlocked<A, B>(_:_:)();
      return _assertionFailure(_:_:file:line:flags:)();
    }
    else
    {
      uint64_t v12 = v10;
      unint64_t v13 = v11;
      sub_10001CFB8(v7, v9);
      sub_100434E0C(v12, v13, v18);
      sub_10001CFB8(v7, v9);
      sub_100037A24(v5, v1);
      sub_1001300CC(v0 + 2);
      uint64_t v15 = v18[0];
      uint64_t v16 = v18[1];
      uint64_t v17 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
      return v17(v15, v16);
    }
  }
}

uint64_t sub_100CA861C(uint64_t a1, uint64_t a2)
{
  v3[2] = a1;
  v3[3] = v2;
  uint64_t v5 = type metadata accessor for KeyDropJoinToken(0);
  v3[4] = v5;
  v3[5] = *(void *)(v5 - 8);
  v3[6] = swift_task_alloc();
  sub_10000588C(&qword_10163F778);
  v3[7] = swift_task_alloc();
  type metadata accessor for SharingCircleKeyManager.DelegatedKeychain(0);
  uint64_t v6 = swift_task_alloc();
  v3[8] = v6;
  uint64_t v7 = (void *)swift_task_alloc();
  v3[9] = v7;
  void *v7 = v3;
  v7[1] = sub_100CA8780;
  return sub_100C32964(v6, a2);
}

uint64_t sub_100CA8780()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 24);
  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v3 = sub_100CA8B6C;
  }
  else {
    uint64_t v3 = sub_100CA88A8;
  }
  return _swift_task_switch(v3, v2, 0);
}

uint64_t sub_100CA88A8()
{
  uint64_t v1 = (uint64_t *)v0[8];
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 16);
  if (v3)
  {
    uint64_t v4 = v0[5];
    uint64_t v5 = v2 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v6 = *(void *)(v4 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_100CBD0EC(v5, v0[6], type metadata accessor for KeyDropJoinToken);
      if (qword_101636950 != -1) {
        swift_once();
      }
      uint64_t v7 = type metadata accessor for UUID();
      sub_100010324(v7, (uint64_t)qword_10170DAA0);
      if (static UUID.== infix(_:_:)()) {
        break;
      }
      sub_100CBD154(v0[6], type metadata accessor for KeyDropJoinToken);
      v5 += v6;
      if (!--v3) {
        goto LABEL_9;
      }
    }
    sub_100CBD1B4(v0[6], v0[7], type metadata accessor for KeyDropJoinToken);
    uint64_t v8 = 0;
  }
  else
  {
    swift_bridgeObjectRetain();
LABEL_9:
    uint64_t v8 = 1;
  }
  uint64_t v9 = v0[7];
  uint64_t v10 = v0[4];
  uint64_t v11 = v0[5];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, v8, 1, v10);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    uint64_t v12 = v0[8];
    sub_10001DAB4(v0[7], &qword_10163F778);
    sub_100130078();
    swift_allocError();
    *unint64_t v13 = 13;
    swift_willThrow();
    sub_100CBD154(v12, type metadata accessor for SharingCircleKeyManager.DelegatedKeychain);
  }
  else
  {
    uint64_t v15 = v0[7];
    uint64_t v16 = v0[2];
    sub_100CBD154(v0[8], type metadata accessor for SharingCircleKeyManager.DelegatedKeychain);
    sub_100CBD1B4(v15, v16, type metadata accessor for KeyDropJoinToken);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  Swift::String v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

uint64_t sub_100CA8B6C()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100CA8BEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[36] = a3;
  v4[37] = v3;
  v4[34] = a1;
  v4[35] = a2;
  uint64_t v5 = type metadata accessor for P256.Signing.ECDSASignature();
  v4[38] = v5;
  v4[39] = *(void *)(v5 - 8);
  v4[40] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for P256.Signing.PrivateKey();
  v4[41] = v6;
  v4[42] = *(void *)(v6 - 8);
  v4[43] = swift_task_alloc();
  v4[44] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for P256PrivateKey();
  v4[45] = v7;
  v4[46] = *(void *)(v7 - 8);
  v4[47] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for AES.GCM.Nonce();
  v4[48] = v8;
  v4[49] = *(void *)(v8 - 8);
  v4[50] = swift_task_alloc();
  sub_10000588C(&qword_10165C0E0);
  v4[51] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for SymmetricKey();
  v4[52] = v9;
  v4[53] = *(void *)(v9 - 8);
  v4[54] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for AES.GCM.SealedBox();
  v4[55] = v10;
  v4[56] = *(void *)(v10 - 8);
  v4[57] = swift_task_alloc();
  sub_10000588C(&qword_10163F778);
  v4[58] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for KeyDropJoinToken(0);
  v4[59] = v11;
  v4[60] = *(void *)(v11 - 8);
  v4[61] = swift_task_alloc();
  v4[62] = swift_task_alloc();
  sub_10000588C(&qword_10163B070);
  v4[63] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for SymmetricKey256();
  v4[64] = v12;
  v4[65] = *(void *)(v12 - 8);
  v4[66] = swift_task_alloc();
  v4[67] = type metadata accessor for SharingCircleKeyManager.DelegatedKeychain(0);
  v4[68] = swift_task_alloc();
  v4[69] = type metadata accessor for DeviceEventFormat.LocationFormat(0);
  v4[70] = swift_task_alloc();
  return _swift_task_switch(sub_100CA9044, v3, 0);
}

uint64_t sub_100CA9044()
{
  uint64_t v1 = *(void **)(v0 + 560);
  uint64_t v2 = *(void *)(v0 + 552);
  uint64_t v3 = *(void *)(v0 + 288);
  uint64_t v4 = (int *)type metadata accessor for BeaconEstimatedLocation();
  uint64_t v5 = *(void *)(v3 + v4[7]);
  uint64_t v6 = *(void *)(v3 + v4[8]);
  uint64_t v7 = v4[10];
  uint64_t v8 = *(void *)(v3 + v4[9]);
  *(_DWORD *)(v0 + 632) = v7;
  uint64_t v9 = v3 + v7;
  uint64_t v10 = (char *)v1 + *(int *)(v2 + 28);
  uint64_t v11 = type metadata accessor for Date();
  *(void *)(v0 + 568) = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  unint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  *(void *)(v0 + 576) = v13;
  *(void *)(v0 + 584) = (v12 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v13(v10, v9, v11);
  *uint64_t v1 = v5;
  v1[1] = v6;
  v1[2] = v8;
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  *(void *)(v0 + 592) = JSONEncoder.init()();
  sub_100CBFAFC(&qword_101647270, (void (*)(uint64_t))type metadata accessor for DeviceEventFormat.LocationFormat);
  *(void *)(v0 + 600) = dispatch thunk of JSONEncoder.encode<A>(_:)();
  *(void *)(v0 + 608) = v14;
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v0 + 616) = v15;
  *uint64_t v15 = v0;
  v15[1] = sub_100CA933C;
  uint64_t v16 = *(void *)(v0 + 544);
  uint64_t v17 = *(void *)(v0 + 280);
  return sub_100C32964(v16, v17);
}

uint64_t sub_100CA933C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 624) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 296);
  if (v0) {
    uint64_t v4 = sub_100CAA724;
  }
  else {
    uint64_t v4 = sub_100CA9468;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100CA9468()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0[68];
  uint64_t v3 = v0[67];
  uint64_t v4 = (uint64_t *)(v2 + *(int *)(v3 + 24));
  unint64_t v5 = v4[1];
  if (v5 >> 60 == 15) {
    goto LABEL_17;
  }
  uint64_t v6 = *v4;
  uint64_t v7 = v0[65];
  uint64_t v9 = v1[63];
  uint64_t v8 = v1[64];
  sub_10001D074(v2 + *(int *)(v3 + 20), v9, &qword_10163B070);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v9, 1, v8) == 1)
  {
    uint64_t v10 = v1[63];
    uint64_t v11 = &qword_10163B070;
LABEL_16:
    sub_10001DAB4(v10, v11);
LABEL_17:
    unint64_t v26 = v1[76];
    uint64_t v27 = v1[75];
    uint64_t v28 = v1[70];
    uint64_t v29 = v1[68];
    sub_100130078();
    swift_allocError();
    *uint64_t v30 = 21;
    swift_willThrow();
    sub_10001CFB8(v27, v26);
    swift_release();
    sub_100CBD154(v29, type metadata accessor for SharingCircleKeyManager.DelegatedKeychain);
    sub_100CBD154(v28, type metadata accessor for DeviceEventFormat.LocationFormat);
LABEL_18:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v31 = (uint64_t (*)(void))v1[1];
    goto LABEL_19;
  }
  uint64_t v12 = (uint64_t *)v1[68];
  (*(void (**)(void, void, void))(v1[65] + 32))(v1[66], v1[63], v1[64]);
  uint64_t v13 = *v12;
  uint64_t v14 = *(void *)(v13 + 16);
  uint64_t v136 = v6;
  if (v14)
  {
    uint64_t v15 = v1[60];
    uint64_t v16 = v13 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
    sub_100037A38(v6, v5);
    uint64_t v17 = *(void *)(v15 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_100CBD0EC(v16, v1[61], type metadata accessor for KeyDropJoinToken);
      if (qword_101636950 != -1) {
        swift_once();
      }
      uint64_t v18 = type metadata accessor for UUID();
      sub_100010324(v18, (uint64_t)qword_10170DAA0);
      char v19 = static UUID.== infix(_:_:)();
      uint64_t v20 = v1[61];
      if (v19) {
        break;
      }
      sub_100CBD154(v20, type metadata accessor for KeyDropJoinToken);
      v16 += v17;
      if (!--v14) {
        goto LABEL_12;
      }
    }
    sub_100CBD1B4(v20, v1[58], type metadata accessor for KeyDropJoinToken);
    uint64_t v21 = 0;
  }
  else
  {
    sub_100037A38(v6, v5);
    swift_bridgeObjectRetain();
LABEL_12:
    uint64_t v21 = 1;
  }
  uint64_t v22 = v1[59];
  uint64_t v23 = v1[60];
  uint64_t v24 = v1[58];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56))(v24, v21, 1, v22);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v24, 1, v22) == 1)
  {
    uint64_t v25 = v1[58];
    (*(void (**)(void, void))(v1[65] + 8))(v1[66], v1[64]);
    sub_100037A24(v6, v5);
    uint64_t v11 = (uint64_t *)&unk_10163F778;
    uint64_t v10 = v25;
    goto LABEL_16;
  }
  unint64_t v130 = v5;
  uint64_t v137 = v1[78];
  uint64_t v33 = v1[76];
  uint64_t v34 = v1[75];
  uint64_t v35 = v1[51];
  uint64_t v36 = v1[48];
  uint64_t v37 = v1[49];
  sub_100CBD1B4(v1[58], v1[62], type metadata accessor for KeyDropJoinToken);
  v1[24] = v34;
  v1[25] = v33;
  sub_100CBFAFC(&qword_10163AFF8, (void (*)(uint64_t))&type metadata accessor for SymmetricKey256);
  v1[28] = KeyRepresenting.rawValue.getter();
  v1[29] = v38;
  SymmetricKey.init<A>(data:)();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 56))(v35, 1, 1, v36);
  sub_1000362FC();
  static AES.GCM.seal<A>(_:using:nonce:)();
  if (v137)
  {
    uint64_t v131 = v1[75];
    unint64_t v134 = v1[76];
    uint64_t v124 = v1[68];
    uint64_t v127 = v1[70];
    uint64_t v39 = v1[66];
    uint64_t v40 = v1[65];
    uint64_t v41 = v1[64];
    uint64_t v42 = v1[62];
    uint64_t v44 = v1[53];
    uint64_t v43 = v1[54];
    uint64_t v46 = v1[51];
    uint64_t v45 = v1[52];
    sub_100037A24(v136, v130);
    swift_release();
    sub_10001DAB4(v46, &qword_10165C0E0);
    (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v43, v45);
    sub_100CBD154(v42, type metadata accessor for KeyDropJoinToken);
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v39, v41);
    sub_100CBD154(v124, type metadata accessor for SharingCircleKeyManager.DelegatedKeychain);
    sub_100CBD154(v127, type metadata accessor for DeviceEventFormat.LocationFormat);
    sub_10001CFB8(v131, v134);
    goto LABEL_18;
  }
  uint64_t v128 = v1[59];
  uint64_t v48 = v1[53];
  uint64_t v47 = v1[54];
  uint64_t v49 = v1[52];
  uint64_t v51 = v1[49];
  uint64_t v50 = v1[50];
  uint64_t v52 = v1[48];
  uint64_t v132 = v1[62];
  sub_10001DAB4(v1[51], &qword_10165C0E0);
  (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v47, v49);
  AES.GCM.SealedBox.nonce.getter();
  v1[18] = v52;
  uint64_t v53 = sub_100CBFAFC(&qword_10165C0E8, (void (*)(uint64_t))&type metadata accessor for AES.GCM.Nonce);
  v1[19] = v53;
  Swift::String v54 = sub_10001D958(v1 + 15);
  v120 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v51 + 16);
  v120(v54, v50, v52);
  sub_10001CD44(v1 + 15, v1[18]);
  uint64_t v125 = v53;
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
  v118 = *(void (**)(uint64_t, uint64_t))(v51 + 8);
  v118(v50, v52);
  uint64_t v55 = v1[20];
  unint64_t v56 = v1[21];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v1 + 15));
  uint64_t v57 = AES.GCM.SealedBox.ciphertext.getter();
  unint64_t v59 = v58;
  sub_1000361E0(v55, v56);
  sub_100A42CBC(v57, v59);
  sub_10001CFB8(v57, v59);
  sub_10001CFB8(v55, v56);
  uint64_t v60 = AES.GCM.SealedBox.tag.getter();
  unint64_t v62 = v61;
  sub_1000361E0(v55, v56);
  sub_100A42CBC(v60, v62);
  sub_10001CFB8(v60, v62);
  sub_10001CFB8(v55, v56);
  uint64_t v63 = (uint64_t *)(v132 + *(int *)(v128 + 20));
  uint64_t v64 = *v63;
  unint64_t v65 = v63[1];
  v1[22] = *v63;
  v1[23] = v65;
  sub_1000361E0(v64, v65);
  P256.Signing.PrivateKey.init<A>(rawRepresentation:)();
  uint64_t v117 = v55;
  uint64_t v66 = v1[44];
  uint64_t v67 = v1[41];
  uint64_t v68 = v1[42];
  P256.Signing.PrivateKey.rawRepresentation.getter();
  uint64_t v69 = *(void (**)(uint64_t, uint64_t))(v68 + 8);
  v69(v66, v67);
  P256PrivateKey.init(data:)();
  sub_100CBFAFC(&qword_10163AFF0, (void (*)(uint64_t))&type metadata accessor for P256PrivateKey);
  v1[32] = KeyRepresenting.rawValue.getter();
  v1[33] = v70;
  P256.Signing.PrivateKey.init<A>(rawRepresentation:)();
  v1[26] = v55;
  v1[27] = v56;
  P256.Signing.PrivateKey.signature<A>(for:)();
  unint64_t v115 = v56;
  uint64_t v112 = v1[50];
  uint64_t v113 = v1[48];
  uint64_t v72 = v1[39];
  uint64_t v71 = v1[40];
  uint64_t v73 = v1[38];
  uint64_t v129 = P256.Signing.ECDSASignature.rawRepresentation.getter();
  unint64_t v75 = v74;
  unint64_t v133 = v74;
  (*(void (**)(uint64_t, uint64_t))(v72 + 8))(v71, v73);
  sub_1000361E0(v129, v75);
  uint64_t v116 = AES.GCM.SealedBox.ciphertext.getter();
  unint64_t v122 = v76;
  uint64_t v123 = AES.GCM.SealedBox.tag.getter();
  unint64_t v78 = v77;
  AES.GCM.SealedBox.nonce.getter();
  v1[13] = v113;
  v1[14] = v125;
  uint64_t v79 = sub_10001D958(v1 + 10);
  v120(v79, v112, v113);
  sub_10001CD44(v1 + 10, v1[13]);
  dispatch thunk of ContiguousBytes.withUnsafeBytes<A>(_:)();
  v118(v112, v113);
  uint64_t v80 = v1[30];
  unint64_t v81 = v1[31];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v1 + 10));
  v1[2] = v129;
  v1[3] = v133;
  v1[4] = v116;
  v1[5] = v122;
  v1[6] = v123;
  v1[7] = v78;
  unint64_t v135 = v78;
  uint64_t v126 = v80;
  v1[8] = v80;
  v1[9] = v81;
  unint64_t v121 = v81;
  sub_100CBDF2C();
  uint64_t v82 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  unint64_t v119 = v1[76];
  uint64_t v114 = v1[75];
  uint64_t v83 = v82;
  unint64_t v85 = v84;
  v107 = (void (*)(char *, uint64_t, uint64_t))v1[72];
  uint64_t v94 = v1[71];
  uint64_t v110 = v1[68];
  uint64_t v111 = v1[70];
  uint64_t v105 = v1[64];
  uint64_t v106 = v1[66];
  uint64_t v103 = v1[62];
  uint64_t v104 = v1[65];
  uint64_t v100 = v1[56];
  uint64_t v101 = v1[55];
  uint64_t v102 = v1[57];
  uint64_t v98 = v1[45];
  uint64_t v99 = v1[47];
  uint64_t v95 = v1[43];
  uint64_t v96 = v1[41];
  uint64_t v97 = v1[46];
  uint64_t v86 = v1[36] + *((int *)v1 + 158);
  uint64_t v87 = v1[34];
  sub_10000588C(&qword_10163AA98);
  uint64_t v88 = (int *)(type metadata accessor for OwnSubmitLocationInfo() - 8);
  unint64_t v89 = (*(unsigned __int8 *)(*(void *)v88 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v88 + 80);
  uint64_t v90 = swift_allocObject();
  *(_OWORD *)(v90 + 16) = xmmword_101342130;
  uint64_t v91 = (uint64_t *)(v90 + v89);
  v107((char *)v91 + v88[7], v86, v94);
  *uint64_t v91 = v83;
  v91[1] = v85;
  sub_1000361E0(v83, v85);
  uint64_t v92 = UUID.uuidString.getter();
  uint64_t v108 = v93;
  uint64_t v109 = v92;
  sub_10001CFB8(v129, v133);
  sub_10001CFB8(v116, v122);
  sub_10001CFB8(v123, v135);
  sub_10001CFB8(v126, v121);
  sub_10001CFB8(v117, v115);
  sub_10001CFB8(v114, v119);
  swift_release();
  sub_10001CFB8(v83, v85);
  sub_10001CFB8(v129, v133);
  v69(v95, v96);
  (*(void (**)(uint64_t, uint64_t))(v97 + 8))(v99, v98);
  (*(void (**)(uint64_t, uint64_t))(v100 + 8))(v102, v101);
  sub_100CBD154(v103, type metadata accessor for KeyDropJoinToken);
  (*(void (**)(uint64_t, uint64_t))(v104 + 8))(v106, v105);
  sub_100CBD154(v110, type metadata accessor for SharingCircleKeyManager.DelegatedKeychain);
  sub_100CBD154(v111, type metadata accessor for DeviceEventFormat.LocationFormat);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  *(void *)uint64_t v87 = v136;
  *(void *)(v87 + 8) = v130;
  *(unsigned char *)(v87 + 16) = 2;
  *(void *)(v87 + 24) = v109;
  *(void *)(v87 + 32) = v108;
  *(_WORD *)(v87 + 40) = 516;
  *(void *)(v87 + 48) = v90;
  unint64_t v31 = (uint64_t (*)(void))v1[1];
LABEL_19:
  return v31();
}

uint64_t sub_100CAA724()
{
  uint64_t v1 = v0[70];
  sub_10001CFB8(v0[75], v0[76]);
  swift_release();
  sub_100CBD154(v1, type metadata accessor for DeviceEventFormat.LocationFormat);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_100CAA88C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[8] = a4;
  v5[9] = v4;
  v5[6] = a2;
  v5[7] = a3;
  v5[5] = a1;
  uint64_t v7 = type metadata accessor for P256.Signing.PublicKey();
  v5[10] = v7;
  v5[11] = *(void *)(v7 - 8);
  v5[12] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for P256.Signing.PrivateKey();
  v5[13] = v8;
  v5[14] = *(void *)(v8 - 8);
  v5[15] = swift_task_alloc();
  sub_10000588C(&qword_10165C0C8);
  v5[16] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for P256PublicKey();
  v5[17] = v9;
  v5[18] = *(void *)(v9 - 8);
  v5[19] = swift_task_alloc();
  sub_10000588C(&qword_10163B070);
  v5[20] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for SymmetricKey256();
  v5[21] = v10;
  v5[22] = *(void *)(v10 - 8);
  v5[23] = swift_task_alloc();
  sub_10000588C(&qword_10163F778);
  v5[24] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for KeyDropJoinToken(0);
  v5[25] = v11;
  v5[26] = *(void *)(v11 - 8);
  v5[27] = swift_task_alloc();
  v5[28] = swift_task_alloc();
  v5[29] = type metadata accessor for PeerCommunicationIdentifier();
  v5[30] = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_1016607D0);
  v5[31] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for OwnerPeerTrust();
  v5[32] = v12;
  v5[33] = *(void *)(v12 - 8);
  v5[34] = swift_task_alloc();
  v5[35] = swift_task_alloc();
  uint64_t v13 = type metadata accessor for UUID();
  v5[36] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v5[37] = v14;
  v5[38] = *(void *)(v14 + 64);
  v5[39] = swift_task_alloc();
  v5[40] = sub_10000588C((uint64_t *)&unk_101638D10);
  v5[41] = swift_task_alloc();
  uint64_t v15 = type metadata accessor for OwnerSharingCircle();
  v5[42] = v15;
  v5[43] = *(void *)(v15 - 8);
  v5[44] = swift_task_alloc();
  v5[45] = type metadata accessor for SharingCircleKeyManager.DelegatedKeychain(0);
  uint64_t v16 = swift_task_alloc();
  v5[46] = v16;
  uint64_t v17 = (void *)swift_task_alloc();
  v5[47] = v17;
  void *v17 = v5;
  v17[1] = sub_100CAAD9C;
  return sub_100C32964(v16, a4);
}

uint64_t sub_100CAAD9C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 384) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 72);
  if (v0) {
    uint64_t v4 = sub_100CAC21C;
  }
  else {
    uint64_t v4 = sub_100CAAEC8;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100CAAEC8()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 72) + 120);
  *(void *)(v0 + 392) = v1;
  return _swift_task_switch(sub_100CAAEEC, v1, 0);
}

uint64_t sub_100CAAEEC()
{
  uint64_t v1 = v0[49];
  uint64_t v2 = v0[39];
  uint64_t v3 = v0[36];
  uint64_t v4 = v0[37];
  uint64_t v5 = v0[8];
  v0[50] = *(void *)(v1 + 136);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[51] = v6;
  v0[52] = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v2, v5, v3);
  unint64_t v7 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v8 = swift_allocObject();
  v0[53] = v8;
  *(void *)(v8 + 16) = v1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v8 + v7, v2, v3);
  swift_retain();
  return _swift_task_switch(sub_100CAAFEC, 0, 0);
}

uint64_t sub_100CAAFEC()
{
  uint64_t v1 = v0[53];
  uint64_t v2 = v0[50];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[54] = v3;
  v3[2] = v2;
  v3[3] = sub_100CBDE4C;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[55] = v4;
  void *v4 = v0;
  v4[1] = sub_100CAB0F4;
  uint64_t v6 = v0[40];
  uint64_t v5 = v0[41];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100090D14, v3, v6);
}

uint64_t sub_100CAB0F4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 72);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_100CAB244, v1, 0);
}

uint64_t sub_100CAB244()
{
  uint64_t v1 = v0[41];
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(v0[43] + 48))(v1, 1, v0[42]) == 1)
  {
    uint64_t v2 = v0[46];
    sub_10001DAB4(v1, (uint64_t *)&unk_101638D10);
    sub_100130078();
    swift_allocError();
    unsigned char *v3 = 2;
    swift_willThrow();
    sub_100CBD154(v2, type metadata accessor for SharingCircleKeyManager.DelegatedKeychain);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
    return v4();
  }
  else
  {
    sub_100CBD1B4(v1, v0[44], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v6 = swift_bridgeObjectRetain();
    uint64_t v7 = sub_10070FB1C(v6);
    swift_bridgeObjectRelease();
    v0[4] = v7;
    uint64_t v8 = (void *)swift_task_alloc();
    v0[56] = v8;
    uint64_t v9 = sub_10000588C((uint64_t *)&unk_1016636E0);
    uint64_t v10 = sub_100062734((unint64_t *)&qword_10163FBF0, (uint64_t *)&unk_1016636E0);
    *uint64_t v8 = v0;
    v8[1] = sub_100CAB53C;
    uint64_t v11 = v0[32];
    uint64_t v12 = v0[9];
    return Sequence.asyncCompactMap<A>(_:)(&unk_10165C0D8, v12, v9, v11, v10);
  }
}

uint64_t sub_100CAB53C(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 72);
  *(void *)(v3 + 456) = a1;
  *(void *)(v3 + 464) = v1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100CAB678, v4, 0);
}

uint64_t sub_100CAB678()
{
  uint64_t v1 = v0[57];
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v4 = v0[32];
    uint64_t v3 = v0[33];
    uint64_t v5 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v6 = *(void *)(v3 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      uint64_t v7 = v0[34];
      uint64_t v8 = v0[30];
      sub_100CBD0EC(v5, v7, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
      uint64_t v9 = v7 + *(int *)(v4 + 28);
      swift_storeEnumTagMultiPayload();
      LOBYTE(v9) = sub_1009CA754(v9, v8);
      sub_100CBD154(v8, (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
      if (v9) {
        break;
      }
      sub_100CBD154(v0[34], (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
      v5 += v6;
      if (!--v2)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    uint64_t v11 = v0[34];
    uint64_t v12 = v0[31];
    swift_bridgeObjectRelease();
    sub_100CBD1B4(v11, v12, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
    uint64_t v10 = 0;
  }
  else
  {
LABEL_6:
    uint64_t v10 = 1;
  }
  uint64_t v13 = v0[32];
  uint64_t v14 = v0[33];
  uint64_t v15 = v0[31];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(v15, v10, 1, v13);
  swift_bridgeObjectRelease();
  int v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v15, 1, v13);
  uint64_t v17 = (uint64_t *)v0[46];
  uint64_t v18 = v0[31];
  if (v16 == 1)
  {
    uint64_t v19 = v0[44];
    sub_10001DAB4(v18, (uint64_t *)&unk_1016607D0);
    sub_100130078();
    swift_allocError();
    *uint64_t v20 = 14;
    swift_willThrow();
    sub_100CBD154(v19, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v21 = type metadata accessor for SharingCircleKeyManager.DelegatedKeychain;
    uint64_t v22 = (uint64_t)v17;
LABEL_26:
    sub_100CBD154(v22, v21);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v76 = (uint64_t (*)(void))v0[1];
    goto LABEL_27;
  }
  sub_100CBD1B4(v18, v0[35], (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
  uint64_t v23 = *v17;
  uint64_t v24 = *(void *)(v23 + 16);
  if (v24)
  {
    uint64_t v25 = v0[26];
    uint64_t v26 = v23 + ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80));
    uint64_t v27 = *(void *)(v25 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_100CBD0EC(v26, v0[27], type metadata accessor for KeyDropJoinToken);
      char v28 = static UUID.== infix(_:_:)();
      uint64_t v29 = v0[27];
      if (v28) {
        break;
      }
      sub_100CBD154(v29, type metadata accessor for KeyDropJoinToken);
      v26 += v27;
      if (!--v24)
      {
        uint64_t v30 = 1;
        goto LABEL_17;
      }
    }
    sub_100CBD1B4(v29, v0[24], type metadata accessor for KeyDropJoinToken);
    uint64_t v30 = 0;
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v30 = 1;
  }
LABEL_17:
  uint64_t v31 = v0[25];
  uint64_t v32 = v0[26];
  uint64_t v33 = v0[24];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 56))(v33, v30, 1, v31);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v33, 1, v31) == 1)
  {
    uint64_t v34 = v0[24];
    uint64_t v35 = &qword_10163F778;
LABEL_21:
    sub_10001DAB4(v34, v35);
    uint64_t v42 = v0[46];
    uint64_t v43 = v0[44];
    uint64_t v44 = v0[35];
    sub_100130078();
    swift_allocError();
    *uint64_t v45 = 21;
    swift_willThrow();
    sub_100CBD154(v43, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    sub_100CBD154(v42, type metadata accessor for SharingCircleKeyManager.DelegatedKeychain);
    uint64_t v21 = (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust;
    uint64_t v22 = v44;
    goto LABEL_26;
  }
  uint64_t v37 = v0[45];
  uint64_t v36 = v0[46];
  uint64_t v38 = v0[21];
  uint64_t v39 = v0[22];
  uint64_t v40 = v0[20];
  sub_100CBD1B4(v0[24], v0[28], type metadata accessor for KeyDropJoinToken);
  sub_10001D074(v36 + *(int *)(v37 + 20), v40, &qword_10163B070);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48))(v40, 1, v38) == 1)
  {
    uint64_t v41 = v0[20];
    sub_100CBD154(v0[28], type metadata accessor for KeyDropJoinToken);
    uint64_t v35 = &qword_10163B070;
    uint64_t v34 = v41;
    goto LABEL_21;
  }
  uint64_t v46 = v0[58];
  uint64_t v47 = v0[28];
  uint64_t v48 = v0[25];
  (*(void (**)(void, void, void))(v0[22] + 32))(v0[23], v0[20], v0[21]);
  uint64_t v49 = (uint64_t *)(v47 + *(int *)(v48 + 20));
  uint64_t v50 = *v49;
  unint64_t v51 = v49[1];
  v0[2] = *v49;
  v0[3] = v51;
  sub_1000361E0(v50, v51);
  P256.Signing.PrivateKey.init<A>(rawRepresentation:)();
  if (v46)
  {
    uint64_t v52 = v0[46];
    uint64_t v53 = v0[44];
    uint64_t v54 = v0[35];
    uint64_t v55 = v0[28];
    (*(void (**)(void, void))(v0[22] + 8))(v0[23], v0[21]);
    sub_100CBD154(v55, type metadata accessor for KeyDropJoinToken);
    sub_100CBD154(v53, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    sub_100CBD154(v52, type metadata accessor for SharingCircleKeyManager.DelegatedKeychain);
    uint64_t v21 = (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust;
    uint64_t v22 = v54;
    goto LABEL_26;
  }
  uint64_t v57 = v0[17];
  uint64_t v56 = v0[18];
  uint64_t v58 = v0[15];
  uint64_t v59 = v0[16];
  uint64_t v60 = v0[13];
  uint64_t v61 = v0[14];
  uint64_t v63 = v0[11];
  uint64_t v62 = v0[12];
  uint64_t v64 = v0[10];
  P256.Signing.PrivateKey.publicKey.getter();
  (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v58, v60);
  P256.Signing.PublicKey.rawRepresentation.getter();
  (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v62, v64);
  sub_100CBFAFC(&qword_10165AA10, (void (*)(uint64_t))&type metadata accessor for P256PublicKey);
  KeyRepresenting.init(rawValue:)();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v56 + 48))(v59, 1, v57);
  if (result == 1)
  {
    __break(1u);
    return result;
  }
  uint64_t v66 = (_OWORD *)v0[7];
  (*(void (**)(void, void, void))(v0[18] + 32))(v0[19], v0[16], v0[17]);
  uint64_t v67 = sub_100CB88D0(v66);
  unint64_t v69 = v68;
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  type metadata accessor for DeviceEventFormat.LocationFormat(0);
  sub_100CBFAFC(&qword_1016472D0, (void (*)(uint64_t))type metadata accessor for DeviceEventFormat.LocationFormat);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  unint64_t v84 = (void (*)(uint64_t, uint64_t, uint64_t))v0[51];
  uint64_t v81 = v0[42];
  uint64_t v82 = v0[44];
  uint64_t v83 = v0[36];
  uint64_t v79 = v0[46];
  uint64_t v80 = v0[35];
  uint64_t v77 = v0[28];
  uint64_t v70 = v0[23];
  uint64_t v72 = v0[21];
  uint64_t v71 = v0[22];
  uint64_t v73 = v0[19];
  uint64_t v75 = v0[17];
  uint64_t v74 = v0[18];
  uint64_t v78 = v0[5];
  swift_release();
  sub_10001CFB8(v67, v69);
  (*(void (**)(uint64_t, uint64_t))(v74 + 8))(v73, v75);
  (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v70, v72);
  sub_100CBD154(v77, type metadata accessor for KeyDropJoinToken);
  sub_100CBD154(v79, type metadata accessor for SharingCircleKeyManager.DelegatedKeychain);
  sub_100CBD154(v80, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
  v84(v78, v82 + *(int *)(v81 + 24), v83);
  sub_100CBD154(v82, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v76 = (uint64_t (*)(void))v0[1];
LABEL_27:
  return v76();
}

uint64_t sub_100CAC21C()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100CAC36C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  uint64_t v4 = type metadata accessor for UUID();
  v3[5] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[6] = v5;
  v3[7] = *(void *)(v5 + 64);
  v3[8] = swift_task_alloc();
  return _swift_task_switch(sub_100CAC438, 0, 0);
}

uint64_t sub_100CAC438()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 32) + 120);
  *(void *)(v0 + 72) = v1;
  return _swift_task_switch(sub_100CAC45C, v1, 0);
}

uint64_t sub_100CAC45C()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[9];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[5];
  uint64_t v5 = v0[3];
  v0[10] = *(void *)(v2 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v5, v4);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = swift_allocObject();
  v0[11] = v7;
  *(void *)(v7 + 16) = v2;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v7 + v6, v1, v4);
  swift_retain();
  return _swift_task_switch(sub_100CAC550, 0, 0);
}

uint64_t sub_100CAC550()
{
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[12] = v3;
  v3[2] = v2;
  v3[3] = sub_100CBDF14;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[13] = v4;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_1016607D0);
  void *v4 = v0;
  v4[1] = sub_100CC2A60;
  uint64_t v6 = v0[2];
  return withCheckedContinuation<A>(isolation:function:_:)(v6, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100090E94, v3, v5);
}

uint64_t sub_100CAC664(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[25] = a4;
  v5[26] = v4;
  v5[23] = a2;
  v5[24] = a3;
  v5[22] = a1;
  uint64_t v6 = type metadata accessor for SymmetricKey();
  v5[27] = v6;
  v5[28] = *(void *)(v6 - 8);
  v5[29] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for UUID();
  v5[30] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v5[31] = v8;
  v5[32] = *(void *)(v8 + 64);
  v5[33] = swift_task_alloc();
  return _swift_task_switch(sub_100CAC790, v4, 0);
}

uint64_t sub_100CAC790()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 208) + 120);
  *(void *)(v0 + 272) = v1;
  return _swift_task_switch(sub_100CAC7B4, v1, 0);
}

uint64_t sub_100CAC7B4()
{
  uint64_t v1 = v0[33];
  uint64_t v2 = v0[34];
  uint64_t v3 = v0[31];
  uint64_t v4 = v0[30];
  uint64_t v5 = v0[23];
  v0[35] = *(void *)(v2 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v5, v4);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = swift_allocObject();
  v0[36] = v7;
  *(void *)(v7 + 16) = v2;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v7 + v6, v1, v4);
  swift_retain();
  return _swift_task_switch(sub_100CAC8A8, 0, 0);
}

uint64_t sub_100CAC8A8()
{
  uint64_t v2 = v0[35];
  uint64_t v1 = v0[36];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[37] = v3;
  v3[2] = v2;
  v3[3] = sub_1002F5A00;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[38] = v4;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_10163BBE0);
  void *v4 = v0;
  v4[1] = sub_100CAC9C0;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 15, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10001CE50, v3, v5);
}

uint64_t sub_100CAC9C0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 208);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_100CACB10, v1, 0);
}

uint64_t sub_100CACB10()
{
  uint64_t v1 = (long long *)(v0 + 15);
  if (v0[18])
  {
    sub_10001CEB0(v1, (uint64_t)(v0 + 10));
    uint64_t v2 = (void *)swift_task_alloc();
    v0[39] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100CACC64;
    uint64_t v3 = v0[26];
    v2[12] = v0[24];
    v2[13] = v3;
    v2[11] = v0 + 2;
    return _swift_task_switch(sub_100C32ED8, 0, 0);
  }
  else
  {
    sub_10001DAB4((uint64_t)v1, (uint64_t *)&unk_10163BBE0);
    sub_100130078();
    swift_allocError();
    unsigned char *v4 = 0;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
}

uint64_t sub_100CACC64()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 320) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 208);
  if (v0) {
    uint64_t v4 = sub_100CACFB8;
  }
  else {
    uint64_t v4 = sub_100CACD90;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100CACD90()
{
  unint64_t v1 = v0[5];
  if (v1 >> 60 != 15)
  {
    uint64_t v4 = v0[4];
    unint64_t v5 = v0[25];
    if (v5) {
      unint64_t v6 = v5 / 0x60 + 1;
    }
    else {
      unint64_t v6 = 0;
    }
    sub_1000361E0(v0[4], v0[5]);
    uint64_t result = sub_100CB2F80(v4, v1, v6);
    if (v6)
    {
      if (is_mul_ok(v6, 0x60uLL))
      {
        unint64_t v8 = 96 * v6 - 96;
        if (v8 <= 1) {
          unint64_t v8 = 1;
        }
        if (96 * v6 - 1 >= v8)
        {
          unint64_t v15 = v8;
          uint64_t v16 = 96 * v6 - 1;
LABEL_13:
          uint64_t v9 = v0[28];
          uint64_t v10 = v0[29];
          uint64_t v11 = v0[27];
          uint64_t v12 = (unint64_t *)v0[22];
          SymmetricKey.withUnsafeBytes<A>(_:)();
          sub_100037A24(v4, v1);
          sub_1001300CC(v0 + 2);
          unint64_t v13 = v0[20];
          unint64_t v14 = v0[21];
          (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 10));
          swift_task_dealloc();
          swift_task_dealloc();
          *uint64_t v12 = v6;
          v12[1] = v15;
          v12[2] = v16;
          v12[3] = v13;
          v12[4] = v14;
          uint64_t v3 = (uint64_t (*)(void))v0[1];
          goto LABEL_14;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      return result;
    }
    unint64_t v15 = 0;
    uint64_t v16 = 0;
    goto LABEL_13;
  }
  sub_100130078();
  swift_allocError();
  *uint64_t v2 = 8;
  swift_willThrow();
  sub_1001300CC(v0 + 2);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 10));
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
LABEL_14:
  return v3();
}

uint64_t sub_100CACFB8()
{
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 80);
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100CAD030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v8[34] = a7;
  v8[35] = v7;
  v8[32] = a5;
  v8[33] = a6;
  v8[30] = a3;
  v8[31] = a4;
  v8[28] = a1;
  v8[29] = a2;
  v8[36] = type metadata accessor for KeyDropInterface.KeyAlignment(0);
  v8[37] = swift_task_alloc();
  v8[38] = swift_task_alloc();
  sub_10000588C(&qword_10165C0B8);
  v8[39] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for EncryptedData();
  v8[40] = v9;
  v8[41] = *(void *)(v9 - 8);
  v8[42] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for SymmetricKey();
  v8[43] = v10;
  v8[44] = *(void *)(v10 - 8);
  v8[45] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Date();
  v8[46] = v11;
  v8[47] = *(void *)(v11 - 8);
  v8[48] = swift_task_alloc();
  v8[49] = swift_task_alloc();
  v8[50] = sub_10000588C(&qword_10163F7B0);
  v8[51] = swift_task_alloc();
  v8[52] = swift_task_alloc();
  v8[53] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for UUID();
  v8[54] = v12;
  v8[55] = *(void *)(v12 - 8);
  v8[56] = swift_task_alloc();
  return _swift_task_switch(sub_100CAD2E0, v7, 0);
}

uint64_t sub_100CAD2E0()
{
  uint64_t v45 = v0;
  if (qword_101637020 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[29];
  uint64_t v2 = type metadata accessor for Logger();
  v0[57] = sub_100010324(v2, (uint64_t)qword_10170EB40);
  sub_10001D010(v1, (uint64_t)(v0 + 11));
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    os_log_type_t type = v4;
    uint64_t v6 = v0[55];
    uint64_t v5 = v0[56];
    uint64_t v7 = v0[54];
    uint64_t v8 = v0[30];
    uint64_t v9 = swift_slowAlloc();
    uint64_t v44 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 134349571;
    v0[25] = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v9 + 12) = 2160;
    v0[26] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v9 + 22) = 2081;
    uint64_t v11 = v0[14];
    uint64_t v10 = v0[15];
    sub_10001CD44(v0 + 11, v11);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v10 + 8) + 8) + 32))(v11);
    sub_100CBFAFC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v14 = v13;
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    v0[27] = sub_1008FA0F0(v12, v14, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 11));
    _os_log_impl((void *)&_mh_execute_header, v3, type, "Wild bundle secondaryIndex: %{public}llu,\nbeacon-id: %{private,mask.hash}s.", (uint8_t *)v9, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 11));
  }

  unint64_t v15 = (void *)v0[29];
  uint64_t v16 = v15[3];
  uint64_t v17 = v15[4];
  sub_10001CD44(v15, v16);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v17 + 88))(v16, v17))
  {
    uint64_t v18 = v0[55];
    uint64_t v19 = v0[56];
    uint64_t v40 = v0[54];
    typea = (uint64_t *)v0[53];
    uint64_t v20 = v0[49];
    uint64_t v43 = v0[50];
    uint64_t v21 = v0[47];
    uint64_t v22 = v0[48];
    uint64_t v39 = v0[46];
    uint64_t v23 = (void *)v0[29];
    static Date.trustedNow.getter(v20);
    uint64_t v25 = v15[3];
    uint64_t v24 = v15[4];
    sub_10001CD44(v23, v25);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v24 + 8) + 8) + 32))(v25);
    uint64_t v27 = v15[3];
    uint64_t v26 = v15[4];
    sub_10001CD44(v23, v27);
    (*(void (**)(uint64_t, uint64_t))(v26 + 184))(v27, v26);
    uint64_t v28 = sub_1008B5B84(v19, v22, v20, 0);
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v22, v39);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v19, v40);
    uint64_t *typea = v28;
    (*(void (**)(char *, uint64_t, uint64_t))(v21 + 32))((char *)typea + *(int *)(v43 + 36), v20, v39);
    uint64_t v29 = (void *)swift_task_alloc();
    v0[60] = v29;
    *uint64_t v29 = v0;
    v29[1] = sub_100CAD9B4;
    uint64_t v30 = v0[53];
    uint64_t v31 = v0[34];
    uint64_t v32 = v0[33];
    uint64_t v34 = v0[29];
    uint64_t v33 = v0[30];
    return sub_100CAE34C(v34, v30, v33, v32, v31);
  }
  else
  {
    uint64_t v36 = (void *)swift_task_alloc();
    v0[58] = v36;
    *uint64_t v36 = v0;
    v36[1] = sub_100CAD7D8;
    uint64_t v37 = v0[52];
    uint64_t v38 = v0[29];
    return sub_100C4EEFC(v37, v38);
  }
}

uint64_t sub_100CAD7D8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 472) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 280);
  if (v0) {
    os_log_type_t v4 = sub_100CAE14C;
  }
  else {
    os_log_type_t v4 = sub_100CAD904;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100CAD904()
{
  sub_10001D608(v0[52], v0[53], &qword_10163F7B0);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[60] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100CAD9B4;
  uint64_t v2 = v0[53];
  uint64_t v3 = v0[34];
  uint64_t v4 = v0[33];
  uint64_t v6 = v0[29];
  uint64_t v5 = v0[30];
  return sub_100CAE34C(v6, v2, v5, v4, v3);
}

uint64_t sub_100CAD9B4(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 488) = a1;
  *(void *)(v4 + 496) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 280);
  if (v1) {
    uint64_t v6 = sub_100CAE244;
  }
  else {
    uint64_t v6 = sub_100CADAE8;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_100CADAE8()
{
  uint64_t v50 = v0;
  uint64_t v1 = *(void *)(v0 + 232);
  sub_100CB2F80(*(void *)(v0 + 248), *(void *)(v0 + 256), *(void *)(v0 + 240));
  sub_10001D010(v1, v0 + 128);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = *(void *)(v0 + 448);
    uint64_t v48 = *(void *)(v0 + 440);
    uint64_t v46 = *(void *)(v0 + 432);
    uint64_t v5 = *(void *)(v0 + 240);
    uint64_t v6 = swift_slowAlloc();
    uint64_t v49 = swift_slowAlloc();
    *(void *)(v0 + 168) = v5;
    os_log_type_t type = v3;
    *(_DWORD *)uint64_t v6 = 134218755;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 12) = 2050;
    *(void *)(v0 + 176) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 22) = 2160;
    *(void *)(v0 + 184) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 32) = 2081;
    uint64_t v8 = *(void *)(v0 + 152);
    uint64_t v7 = *(void *)(v0 + 160);
    sub_10001CD44((void *)(v0 + 128), v8);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v7 + 8) + 8) + 32))(v8);
    sub_100CBFAFC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v11 = v10;
    (*(void (**)(uint64_t, uint64_t))(v48 + 8))(v4, v46);
    *(void *)(v0 + 192) = sub_1008FA0F0(v9, v11, &v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 128);
    _os_log_impl((void *)&_mh_execute_header, v2, type, "Wild bundle index: %llu,\nsecondaryIndex: %{public}llu,\nbeacon-id: %{private,mask.hash}s.", (uint8_t *)v6, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 128);
  }

  uint64_t v12 = *(void *)(v0 + 496);
  sub_100C4F500();
  if (v12)
  {
    uint64_t v13 = *(void *)(v0 + 424);
    uint64_t v15 = *(void *)(v0 + 352);
    uint64_t v14 = *(void *)(v0 + 360);
    uint64_t v16 = *(void *)(v0 + 344);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    sub_10001DAB4(v13, &qword_10163F7B0);
  }
  else
  {
    uint64_t v36 = *(uint64_t **)(v0 + 424);
    uint64_t v37 = *(void *)(v0 + 408);
    uint64_t v38 = *(void *)(v0 + 400);
    uint64_t v18 = *(void *)(v0 + 376);
    uint64_t v19 = *(void *)(v0 + 336);
    uint64_t v44 = *(void *)(v0 + 344);
    uint64_t v45 = *(void *)(v0 + 360);
    uint64_t v41 = v19;
    uint64_t v42 = *(void *)(v0 + 352);
    uint64_t v21 = *(void *)(v0 + 320);
    uint64_t v20 = *(void *)(v0 + 328);
    uint64_t v23 = *(void *)(v0 + 304);
    uint64_t v22 = *(void *)(v0 + 312);
    uint64_t v39 = *(void *)(v0 + 296);
    uint64_t v40 = *(void *)(v0 + 368);
    uint64_t v35 = *(void *)(v0 + 288);
    uint64_t v25 = *(void **)(v0 + 232);
    uint64_t v24 = *(void *)(v0 + 240);
    uint64_t v43 = *(unsigned char **)(v0 + 224);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v22, v19, v21);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v20 + 56))(v22, 0, 1, v21);
    sub_101268234(v24, 0, 0xC000000000000000, v22, (void *)(v0 + 16));
    uint64_t v26 = v25[3];
    uint64_t v27 = v25[4];
    sub_10001CD44(v25, v26);
    (*(void (**)(uint64_t, uint64_t))(v27 + 184))(v26, v27);
    uint64_t v28 = *v36;
    sub_10001D074((uint64_t)v36, v37, &qword_10163F7B0);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32))(v23 + *(int *)(v35 + 24), v37 + *(int *)(v38 + 36), v40);
    *(void *)(v23 + *(int *)(v35 + 20)) = v28;
    sub_100CBD0EC(v23, v39, type metadata accessor for KeyDropInterface.KeyAlignment);
    sub_10000588C(&qword_101657A00);
    uint64_t v29 = swift_allocObject();
    long long v30 = *(_OWORD *)(v0 + 48);
    long long v31 = *(_OWORD *)(v0 + 64);
    long long v32 = *(_OWORD *)(v0 + 16);
    *(_OWORD *)(v29 + 48) = *(_OWORD *)(v0 + 32);
    *(_OWORD *)(v29 + 64) = v30;
    *(_OWORD *)(v29 + 80) = v31;
    *(void *)(v29 + 96) = *(void *)(v0 + 80);
    *(_OWORD *)(v29 + 16) = xmmword_101342130;
    *(_OWORD *)(v29 + 32) = v32;
    sub_100CBD154(v23, type metadata accessor for KeyDropInterface.KeyAlignment);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v41, v21);
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v45, v44);
    sub_10001DAB4((uint64_t)v36, &qword_10163F7B0);
    *uint64_t v43 = 4;
    uint64_t v33 = type metadata accessor for KeyDropInterface.KeyPackage(0);
    sub_100CBD1B4(v39, (uint64_t)&v43[*(int *)(v33 + 20)], type metadata accessor for KeyDropInterface.KeyAlignment);
    *(void *)&v43[*(int *)(v33 + 24)] = v29;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
  return v17();
}

uint64_t sub_100CAE14C()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100CAE244()
{
  sub_10001DAB4(*(void *)(v0 + 424), &qword_10163F7B0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100CAE34C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[40] = a5;
  v6[41] = v5;
  v6[38] = a3;
  v6[39] = a4;
  v6[36] = a1;
  v6[37] = a2;
  uint64_t v7 = type metadata accessor for KeyDropInterface.KeyPackage(0);
  v6[42] = v7;
  v6[43] = *(void *)(v7 - 8);
  v6[44] = swift_task_alloc();
  v6[45] = swift_task_alloc();
  v6[46] = swift_task_alloc();
  v6[47] = swift_task_alloc();
  v6[48] = swift_task_alloc();
  v6[49] = swift_task_alloc();
  v6[50] = type metadata accessor for KeyDropInterface.KeyAlignment(0);
  v6[51] = swift_task_alloc();
  sub_10000588C(&qword_10165C0B8);
  v6[52] = swift_task_alloc();
  v6[53] = swift_task_alloc();
  v6[54] = swift_task_alloc();
  v6[55] = swift_task_alloc();
  v6[56] = swift_task_alloc();
  v6[57] = swift_task_alloc();
  v6[58] = swift_task_alloc();
  v6[59] = swift_task_alloc();
  v6[60] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for HashAlgorithm();
  v6[61] = v8;
  v6[62] = *(void *)(v8 - 8);
  v6[63] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for TimeBasedKey();
  v6[64] = v9;
  v6[65] = *(void *)(v9 - 8);
  v6[66] = swift_task_alloc();
  v6[67] = swift_task_alloc();
  v6[68] = swift_task_alloc();
  v6[69] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for UUID();
  v6[70] = v10;
  v6[71] = *(void *)(v10 - 8);
  v6[72] = swift_task_alloc();
  return _swift_task_switch(sub_100CAE654, v5, 0);
}

uint64_t sub_100CAE654()
{
  uint64_t v21 = v0;
  if (qword_101637020 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[36];
  uint64_t v2 = type metadata accessor for Logger();
  sub_100010324(v2, (uint64_t)qword_10170EB40);
  sub_10001D010(v1, (uint64_t)(v0 + 20));
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    os_log_type_t type = v4;
    uint64_t v5 = v0[72];
    uint64_t v6 = v0[71];
    uint64_t v7 = v0[70];
    uint64_t v8 = v0[38];
    uint64_t v9 = swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 134349571;
    v0[33] = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v9 + 12) = 2160;
    v0[34] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v9 + 22) = 2081;
    uint64_t v11 = v0[23];
    uint64_t v10 = v0[24];
    sub_10001CD44(v0 + 20, v11);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v10 + 8) + 8) + 32))(v11);
    sub_100CBFAFC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v14 = v13;
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    v0[35] = sub_1008FA0F0(v12, v14, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 20));
    _os_log_impl((void *)&_mh_execute_header, v3, type, "Key bundle for secondaryIndex: %{public}llu,\nbeacon-id: %{private,mask.hash}s.", (uint8_t *)v9, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 20));
  }

  uint64_t v15 = (void *)swift_task_alloc();
  v0[73] = v15;
  *uint64_t v15 = v0;
  v15[1] = sub_100CAE988;
  uint64_t v16 = v0[38];
  uint64_t v17 = v0[36];
  return sub_100CB272C(v17, 0, v16, 0);
}

uint64_t sub_100CAE988(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  v3[74] = a1;
  v3[75] = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v4 = (uint64_t (*)(void))v3[1];
    return v4();
  }
  else
  {
    uint64_t v6 = v3[41];
    return _swift_task_switch(sub_100CAEC08, v6, 0);
  }
}

uint64_t sub_100CAEC08()
{
  uint64_t v1 = v0;
  uint64_t v2 = (void *)v0[36];
  uint64_t v4 = v2[3];
  uint64_t v3 = v2[4];
  sub_10001CD44(v2, v4);
  if ((*(uint64_t (**)(uint64_t, uint64_t))(v3 + 112))(v4, v3))
  {
    uint64_t v5 = (void *)swift_task_alloc();
    v1[76] = v5;
    *uint64_t v5 = v1;
    v5[1] = sub_100CB06EC;
    uint64_t v6 = v1[38];
    uint64_t v7 = v1[36];
    return sub_100CB272C(v7, 1, v6, 0);
  }
  int64_t v9 = v1[75];
  uint64_t v10 = v1[74];
  int64_t v11 = *(void *)(v10 + 16);
  uint64_t v12 = _swiftEmptyArrayStorage;
  v249 = v1;
  if (!v11) {
    goto LABEL_20;
  }
  v244 = v1 + 11;
  v211 = v1 + 31;
  uint64_t v13 = v1[65];
  uint64_t v237 = v1[64];
  uint64_t v14 = v1[62];
  sub_1000B7070(0, v11, 0);
  uint64_t v208 = v10;
  uint64_t v15 = v10 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  uint64_t v235 = *(void *)(v13 + 72);
  unsigned int v231 = enum case for HashAlgorithm.sha256(_:);
  v223 = (void (**)(uint64_t, uint64_t))(v14 + 8);
  v227 = (void (**)(uint64_t, void, uint64_t))(v14 + 104);
  uint64_t v219 = v15;
  while (2)
  {
    int64_t v240 = v11;
    uint64_t v16 = (uint64_t *)v1[69];
    sub_100CBD0EC(v15, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
    uint64_t v17 = *v16;
    uint64_t v18 = (char *)v16 + *(int *)(v237 + 24);
    uint64_t v19 = *((void *)v18 + 2);
    unint64_t v20 = *((void *)v18 + 3);
    sub_1000361E0(v19, v20);
    uint64_t v21 = sub_100A948F8(v19, v20);
    int64_t v22 = v9;
    if (v9)
    {
      unint64_t v27 = (unint64_t)v211;
      static os_log_type_t.error.getter();
      if (qword_101636F48 == -1)
      {
LABEL_40:
        sub_10000588C((uint64_t *)&unk_10163AD00);
        uint64_t v88 = swift_allocObject();
        *(_OWORD *)(v88 + 16) = xmmword_101342130;
        *(void *)unint64_t v27 = v22;
        swift_errorRetain();
        sub_10000588C(&qword_101638D40);
        uint64_t v89 = String.init<A>(describing:)();
        uint64_t v91 = v90;
        *(void *)(v88 + 56) = &type metadata for String;
        *(void *)(v88 + 64) = sub_10000B4CC();
        *(void *)(v88 + 32) = v89;
        *(void *)(v88 + 40) = v91;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        sub_100130148();
        uint64_t v92 = swift_allocError();
        *uint64_t v93 = 0;
        swift_willThrow();
        swift_errorRelease();
        unint64_t v27 = v20;
        uint64_t v25 = v19;
        goto LABEL_71;
      }
LABEL_115:
      swift_once();
      goto LABEL_40;
    }
    unint64_t v23 = v21;
    char v24 = 0;
    uint64_t v25 = sub_100A90C58(v21, 0);
    unint64_t v27 = v26;
    CCECCryptorRelease();
    sub_10001CFB8(v19, v20);
    unint64_t v28 = v27 >> 62;
    switch(v27 >> 62)
    {
      case 1uLL:
        LODWORD(v29) = HIDWORD(v25) - v25;
        if (__OFSUB__(HIDWORD(v25), v25))
        {
          __break(1u);
LABEL_114:
          __break(1u);
          goto LABEL_115;
        }
        uint64_t v29 = (int)v29;
LABEL_13:
        if (v29 != 28)
        {
          if (v28)
          {
            if (v28 == 1)
            {
              unint64_t v94 = (HIDWORD(v25) - v25);
              if (!__OFSUB__(HIDWORD(v25), v25))
              {
                int64_t v22 = (int)v94;
                goto LABEL_70;
              }
              __break(1u);
LABEL_119:
              __break(1u);
LABEL_120:
              uint64_t v25 = sub_100A6F328(v94 > 1, v22, 1, v25);
LABEL_99:
              uint64_t v177 = v249[51];
              v179 = (char *)v249[46];
              uint64_t v178 = v249[47];
              uint64_t v180 = v249[43];
              *(void *)(v25 + 16) = v22;
              unint64_t v181 = (*(unsigned __int8 *)(v180 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v180 + 80);
              uint64_t v182 = *(void *)(v180 + 72);
              sub_100CBD1B4(v178, v25 + v181 + v182 * v23, type metadata accessor for KeyDropInterface.KeyPackage);
              sub_100CBD0EC(v177, (uint64_t)&v179[*(int *)(v27 + 20)], type metadata accessor for KeyDropInterface.KeyAlignment);
              char *v179 = v24;
              *(void *)&v179[*(int *)(v27 + 24)] = v1;
              unint64_t v184 = *(void *)(v25 + 16);
              unint64_t v183 = *(void *)(v25 + 24);
              if (v184 >= v183 >> 1) {
                uint64_t v25 = sub_100A6F328(v183 > 1, v184 + 1, 1, v25);
              }
              uint64_t v185 = v249[49];
              uint64_t v187 = v249[45];
              uint64_t v186 = v249[46];
              *(void *)(v25 + 16) = v184 + 1;
              sub_100CBD1B4(v186, v25 + v181 + v184 * v182, type metadata accessor for KeyDropInterface.KeyPackage);
              sub_100CBD0EC(v185, v187, type metadata accessor for KeyDropInterface.KeyPackage);
              unint64_t v189 = *(void *)(v25 + 16);
              unint64_t v188 = *(void *)(v25 + 24);
              if (v189 >= v188 >> 1) {
                uint64_t v25 = sub_100A6F328(v188 > 1, v189 + 1, 1, v25);
              }
              uint64_t v190 = v249[48];
              uint64_t v192 = v249[44];
              uint64_t v191 = v249[45];
              *(void *)(v25 + 16) = v189 + 1;
              sub_100CBD1B4(v191, v25 + v181 + v189 * v182, type metadata accessor for KeyDropInterface.KeyPackage);
              sub_100CBD0EC(v190, v192, type metadata accessor for KeyDropInterface.KeyPackage);
              unint64_t v194 = *(void *)(v25 + 16);
              unint64_t v193 = *(void *)(v25 + 24);
              if (v194 >= v193 >> 1) {
                uint64_t v25 = sub_100A6F328(v193 > 1, v194 + 1, 1, v25);
              }
              uint64_t v195 = v249[51];
              uint64_t v196 = v249[48];
              uint64_t v197 = v249[49];
              unint64_t v198 = v25 + v181;
              uint64_t v199 = v249[44];
              *(void *)(v25 + 16) = v194 + 1;
              sub_100CBD1B4(v199, v198 + v194 * v182, type metadata accessor for KeyDropInterface.KeyPackage);
              sub_100CBD154(v196, type metadata accessor for KeyDropInterface.KeyPackage);
              sub_100CBD154(v197, type metadata accessor for KeyDropInterface.KeyPackage);
              sub_100CBD154(v195, type metadata accessor for KeyDropInterface.KeyAlignment);
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              v200 = (uint64_t (*)(uint64_t))v249[1];
              return v200(v25);
            }
            uint64_t v123 = *(void *)(v25 + 16);
            unint64_t v94 = *(void *)(v25 + 24);
            int64_t v22 = v94 - v123;
            if (__OFSUB__(v94, v123)) {
              goto LABEL_119;
            }
          }
          else
          {
            int64_t v22 = BYTE6(v27);
          }
LABEL_70:
          sub_10013019C();
          uint64_t v92 = swift_allocError();
          *(void *)uint64_t v124 = 28;
          *(void *)(v124 + 8) = v22;
          *(unsigned char *)(v124 + 16) = 0;
          swift_willThrow();
LABEL_71:
          sub_10001CFB8(v25, v27);
          _StringGuts.grow(_:)(35);
          v1[28] = 0xE000000000000000;
          uint64_t v125 = v1 + 28;
          *(v125 - 1) = 0;
          v126._object = (void *)0x80000001013F3B70;
          v126._countAndFlagsBits = 0xD000000000000021;
          String.append(_:)(v126);
          v125[1] = v92;
          sub_10000588C(&qword_101638D40);
          goto LABEL_72;
        }
        uint64_t v33 = v1[69];
        uint64_t v34 = v1[63];
        uint64_t v36 = v1[60];
        uint64_t v35 = v1[61];
        (*v227)(v34, v231, v35);
        uint64_t v37 = Data.hash(algorithm:)();
        unint64_t v39 = v38;
        (*v223)(v34, v35);
        sub_10001CFB8(v25, v27);
        uint64_t v40 = type metadata accessor for EncryptedData();
        uint64_t v41 = *(void *)(v40 - 8);
        v233 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 56);
        v233(v36, 1, 1, v40);
        sub_101268234(v17, v37, v39, v36, v244);
        sub_100CBD154(v33, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1000B7070(0, _swiftEmptyArrayStorage[2] + 1, 1);
        }
        unint64_t v43 = _swiftEmptyArrayStorage[2];
        unint64_t v42 = _swiftEmptyArrayStorage[3];
        if (v43 >= v42 >> 1) {
          sub_1000B7070(v42 > 1, v43 + 1, 1);
        }
        int64_t v9 = 0;
        _swiftEmptyArrayStorage[2] = v43 + 1;
        uint64_t v44 = &_swiftEmptyArrayStorage[9 * v43];
        uint64_t v1 = v249;
        *((_OWORD *)v44 + 2) = *(_OWORD *)v244;
        long long v45 = *((_OWORD *)v244 + 1);
        long long v46 = *((_OWORD *)v244 + 2);
        long long v47 = *((_OWORD *)v244 + 3);
        v44[12] = v244[8];
        *((_OWORD *)v44 + 4) = v46;
        *((_OWORD *)v44 + 5) = v47;
        *((_OWORD *)v44 + 3) = v45;
        v15 += v235;
        int64_t v11 = v240 - 1;
        if (v240 != 1) {
          continue;
        }
        uint64_t v95 = *(void *)(v208 + 16);
        if (!v95)
        {
          int64_t v9 = 0;
          uint64_t v1 = v249;
          uint64_t v12 = _swiftEmptyArrayStorage;
LABEL_20:
          swift_bridgeObjectRelease();
          uint64_t v48 = _swiftEmptyArrayStorage;
          goto LABEL_21;
        }
        v246 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v41 + 48);
        v212 = (void (**)(uint64_t, uint64_t))(v41 + 8);
        swift_bridgeObjectRetain();
        uint64_t v48 = _swiftEmptyArrayStorage;
        uint64_t v96 = v219;
        do
        {
          uint64_t v97 = v249[68];
          sub_100CBD0EC(v96, v97, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
          uint64_t v98 = v97 + *(int *)(v237 + 24);
          unint64_t v99 = *(void *)(v98 + 40);
          uint64_t v100 = (uint64_t *)v249[68];
          if (v99 >> 60 == 15)
          {
            sub_100CBD154((uint64_t)v100, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
          }
          else
          {
            uint64_t v221 = v96;
            uint64_t v101 = *(void *)(v98 + 32);
            uint64_t v103 = v249[58];
            uint64_t v102 = v249[59];
            uint64_t v232 = *v100;
            v233(v102, 1, 1, v40);
            sub_10001D074(v102, v103, &qword_10165C0B8);
            uint64_t v104 = *v246;
            LODWORD(v103) = (*v246)(v103, 1, v40);
            sub_1000361E0(v101, v99);
            sub_1000361E0(v101, v99);
            uint64_t v105 = v249[58];
            if (v103 == 1)
            {
              sub_10001DAB4(v249[58], &qword_10165C0B8);
              unint64_t v225 = 0xF000000000000000;
              uint64_t v229 = 0;
            }
            else
            {
              uint64_t v106 = EncryptedData.cipherText.getter();
              unint64_t v225 = v107;
              uint64_t v229 = v106;
              (*v212)(v105, v40);
            }
            uint64_t v108 = v249[57];
            sub_10001D074(v249[59], v108, &qword_10165C0B8);
            int v109 = v104(v108, 1, v40);
            uint64_t v110 = v249[57];
            if (v109 == 1)
            {
              sub_10001DAB4(v249[57], &qword_10165C0B8);
              unint64_t v215 = 0xF000000000000000;
              uint64_t v217 = 0;
            }
            else
            {
              uint64_t v111 = EncryptedData.initializationVector.getter();
              unint64_t v215 = v112;
              uint64_t v217 = v111;
              (*v212)(v110, v40);
            }
            uint64_t v113 = v249[56];
            sub_10001D074(v249[59], v113, &qword_10165C0B8);
            int v114 = v104(v113, 1, v40);
            uint64_t v115 = v249[59];
            uint64_t v116 = v249[56];
            if (v114 == 1)
            {
              sub_100037A24(v101, v99);
              sub_10001DAB4(v115, &qword_10165C0B8);
              sub_10001DAB4(v116, &qword_10165C0B8);
              uint64_t v117 = 0;
              unint64_t v118 = 0xF000000000000000;
            }
            else
            {
              uint64_t v117 = EncryptedData.tag.getter();
              unint64_t v118 = v119;
              sub_100037A24(v101, v99);
              sub_10001DAB4(v115, &qword_10165C0B8);
              (*v212)(v116, v40);
            }
            sub_100CBD154(v249[68], (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v48 = sub_100A6F4D4(0, v48[2] + 1, 1, v48);
            }
            unint64_t v121 = v48[2];
            unint64_t v120 = v48[3];
            if (v121 >= v120 >> 1) {
              uint64_t v48 = sub_100A6F4D4((void *)(v120 > 1), v121 + 1, 1, v48);
            }
            v48[2] = v121 + 1;
            unint64_t v122 = &v48[9 * v121];
            v122[4] = v232;
            v122[5] = v101;
            v122[6] = v99;
            v122[7] = v229;
            v122[8] = v225;
            v122[9] = v217;
            v122[10] = v215;
            v122[11] = v117;
            v122[12] = v118;
            uint64_t v96 = v221;
          }
          v96 += v235;
          --v95;
        }
        while (v95);
        uint64_t v1 = v249;
        swift_bridgeObjectRelease_n();
        int64_t v9 = 0;
        uint64_t v12 = _swiftEmptyArrayStorage;
LABEL_21:
        uint64_t v50 = v1[39];
        unint64_t v49 = v1[40];
        sub_1000361E0(v50, v49);
        uint64_t v51 = sub_100CBCA7C((uint64_t)v48, v50, v49);
        uint64_t v53 = v1[39];
        unint64_t v52 = v1[40];
        if (v9)
        {
          swift_bridgeObjectRelease();
          sub_10001CFB8(v53, v52);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          uint64_t v54 = (uint64_t (*)(void))v1[1];
          return v54();
        }
        uint64_t v55 = v51;
        swift_bridgeObjectRelease();
        sub_10001CFB8(v53, v52);
        int64_t v56 = _swiftEmptyArrayStorage[2];
        if (!v56)
        {
          uint64_t v1 = _swiftEmptyArrayStorage;
          goto LABEL_98;
        }
        v206 = v55;
        v245 = v1 + 2;
        v209 = v1 + 30;
        uint64_t v57 = v1[65];
        uint64_t v238 = v1[64];
        uint64_t v58 = v1[62];
        swift_bridgeObjectRetain();
        sub_1000B7070(0, v56, 0);
        uint64_t v59 = (char *)_swiftEmptyArrayStorage
            + ((*(unsigned __int8 *)(v57 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80));
        uint64_t v236 = *(void *)(v57 + 72);
        unsigned int v228 = enum case for HashAlgorithm.sha256(_:);
        v220 = (void (**)(uint64_t, uint64_t))(v58 + 8);
        v224 = (void (**)(uint64_t, void, uint64_t))(v58 + 104);
        v214 = v59;
        while (2)
        {
          int64_t v60 = v56;
          uint64_t v61 = (uint64_t *)v249[67];
          sub_100CBD0EC((uint64_t)v59, (uint64_t)v61, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
          uint64_t v62 = *v61;
          uint64_t v63 = (char *)v61 + *(int *)(v238 + 24);
          uint64_t v65 = *((void *)v63 + 2);
          unint64_t v64 = *((void *)v63 + 3);
          sub_1000361E0(v65, v64);
          uint64_t v66 = sub_100A948F8(v65, v64);
          uint64_t v67 = sub_100A90C58(v66, 0);
          unint64_t v69 = v68;
          CCECCryptorRelease();
          sub_10001CFB8(v65, v64);
          unint64_t v70 = v69 >> 62;
          switch(v69 >> 62)
          {
            case 1uLL:
              LODWORD(v71) = HIDWORD(v67) - v67;
              if (__OFSUB__(HIDWORD(v67), v67))
              {
                __break(1u);
LABEL_117:
                __break(1u);
                swift_once();
                sub_10000588C((uint64_t *)&unk_10163AD00);
                uint64_t v127 = swift_allocObject();
                *(_OWORD *)(v127 + 16) = xmmword_101342130;
                void *v209 = 0;
                swift_errorRetain();
                sub_10000588C(&qword_101638D40);
                uint64_t v128 = String.init<A>(describing:)();
                uint64_t v130 = v129;
                *(void *)(v127 + 56) = &type metadata for String;
                *(void *)(v127 + 64) = sub_10000B4CC();
                *(void *)(v127 + 32) = v128;
                *(void *)(v127 + 40) = v130;
                os_log(_:dso:log:_:_:)();
                swift_bridgeObjectRelease();
                sub_100130148();
                uint64_t v203 = swift_allocError();
                *uint64_t v131 = 0;
                swift_willThrow();
                swift_errorRelease();
                unint64_t v69 = v64;
                uint64_t v67 = v65;
                goto LABEL_112;
              }
              uint64_t v71 = (int)v71;
LABEL_32:
              if (v71 == 28)
              {
                uint64_t v241 = v249[67];
                uint64_t v74 = v249[63];
                uint64_t v76 = v249[60];
                uint64_t v75 = v249[61];
                (*v224)(v74, v228, v75);
                uint64_t v77 = Data.hash(algorithm:)();
                unint64_t v79 = v78;
                (*v220)(v74, v75);
                sub_10001CFB8(v67, v69);
                uint64_t v80 = type metadata accessor for EncryptedData();
                uint64_t v81 = *(void *)(v80 - 8);
                v234 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v81 + 56);
                v234(v76, 1, 1, v80);
                sub_101268234(v62, v77, v79, v76, v245);
                sub_100CBD154(v241, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
                uint64_t v1 = _swiftEmptyArrayStorage;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                {
                  sub_1000B7070(0, _swiftEmptyArrayStorage[2] + 1, 1);
                  uint64_t v1 = _swiftEmptyArrayStorage;
                }
                unint64_t v83 = _swiftEmptyArrayStorage[2];
                unint64_t v82 = _swiftEmptyArrayStorage[3];
                if (v83 >= v82 >> 1)
                {
                  sub_1000B7070(v82 > 1, v83 + 1, 1);
                  uint64_t v1 = _swiftEmptyArrayStorage;
                }
                _swiftEmptyArrayStorage[2] = v83 + 1;
                unint64_t v84 = &_swiftEmptyArrayStorage[9 * v83];
                *((_OWORD *)v84 + 2) = *(_OWORD *)v245;
                long long v85 = *((_OWORD *)v245 + 1);
                long long v86 = *((_OWORD *)v245 + 2);
                long long v87 = *((_OWORD *)v245 + 3);
                v84[12] = v245[8];
                *((_OWORD *)v84 + 4) = v86;
                *((_OWORD *)v84 + 5) = v87;
                *((_OWORD *)v84 + 3) = v85;
                v59 += v236;
                int64_t v56 = v60 - 1;
                if (v60 == 1)
                {
                  uint64_t v12 = _swiftEmptyArrayStorage;
                  swift_bridgeObjectRelease();
                  uint64_t v133 = _swiftEmptyArrayStorage[2];
                  if (v133)
                  {
                    v242 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v81 + 48);
                    v210 = (void (**)(uint64_t, uint64_t))(v81 + 8);
                    v247 = _swiftEmptyArrayStorage;
                    swift_bridgeObjectRetain();
                    uint64_t v134 = (uint64_t)v214;
                    do
                    {
                      uint64_t v135 = v249[66];
                      sub_100CBD0EC(v134, v135, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
                      uint64_t v136 = v135 + *(int *)(v238 + 24);
                      unint64_t v137 = *(void *)(v136 + 40);
                      uint64_t v138 = (uint64_t *)v249[66];
                      if (v137 >> 60 == 15)
                      {
                        sub_100CBD154((uint64_t)v138, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
                      }
                      else
                      {
                        uint64_t v216 = v134;
                        uint64_t v139 = *(void *)(v136 + 32);
                        uint64_t v141 = v249[54];
                        uint64_t v140 = v249[55];
                        uint64_t v226 = *v138;
                        v234(v140, 1, 1, v80);
                        sub_10001D074(v140, v141, &qword_10165C0B8);
                        v142 = *v242;
                        LODWORD(v141) = (*v242)(v141, 1, v80);
                        sub_1000361E0(v139, v137);
                        uint64_t v230 = v139;
                        sub_1000361E0(v139, v137);
                        uint64_t v143 = v249[54];
                        if (v141 == 1)
                        {
                          sub_10001DAB4(v249[54], &qword_10165C0B8);
                          unint64_t v218 = 0xF000000000000000;
                          uint64_t v222 = 0;
                        }
                        else
                        {
                          uint64_t v144 = EncryptedData.cipherText.getter();
                          unint64_t v218 = v145;
                          uint64_t v222 = v144;
                          (*v210)(v143, v80);
                        }
                        uint64_t v146 = v249[53];
                        sub_10001D074(v249[55], v146, &qword_10165C0B8);
                        int v147 = v142(v146, 1, v80);
                        uint64_t v148 = v249[53];
                        if (v147 == 1)
                        {
                          sub_10001DAB4(v249[53], &qword_10165C0B8);
                          uint64_t v149 = 0;
                          unint64_t v213 = 0xF000000000000000;
                        }
                        else
                        {
                          uint64_t v149 = EncryptedData.initializationVector.getter();
                          unint64_t v213 = v150;
                          (*v210)(v148, v80);
                        }
                        uint64_t v151 = v249[52];
                        sub_10001D074(v249[55], v151, &qword_10165C0B8);
                        int v152 = v142(v151, 1, v80);
                        uint64_t v153 = v249[55];
                        uint64_t v154 = v249[52];
                        if (v152 == 1)
                        {
                          sub_100037A24(v139, v137);
                          sub_10001DAB4(v153, &qword_10165C0B8);
                          sub_10001DAB4(v154, &qword_10165C0B8);
                          uint64_t v155 = 0;
                          unint64_t v156 = 0xF000000000000000;
                        }
                        else
                        {
                          uint64_t v155 = EncryptedData.tag.getter();
                          unint64_t v156 = v157;
                          sub_100037A24(v230, v137);
                          sub_10001DAB4(v153, &qword_10165C0B8);
                          (*v210)(v154, v80);
                        }
                        sub_100CBD154(v249[66], (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
                        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                          v247 = sub_100A6F4D4(0, v247[2] + 1, 1, v247);
                        }
                        unint64_t v159 = v247[2];
                        unint64_t v158 = v247[3];
                        if (v159 >= v158 >> 1) {
                          v247 = sub_100A6F4D4((void *)(v158 > 1), v159 + 1, 1, v247);
                        }
                        v247[2] = v159 + 1;
                        v160 = &v247[9 * v159];
                        v160[4] = v226;
                        v160[5] = v230;
                        v160[6] = v137;
                        v160[7] = v222;
                        uint64_t v134 = v216;
                        v160[8] = v218;
                        v160[9] = v149;
                        v160[10] = v213;
                        v160[11] = v155;
                        v160[12] = v156;
                      }
                      v134 += v236;
                      --v133;
                    }
                    while (v133);
                    swift_bridgeObjectRelease();
                    uint64_t v12 = v247;
                  }
                  uint64_t v55 = v206;
LABEL_98:
                  swift_bridgeObjectRelease();
                  uint64_t v162 = v249[39];
                  unint64_t v161 = v249[40];
                  sub_1000361E0(v162, v161);
                  v163 = sub_100CBCA7C((uint64_t)v12, v162, v161);
                  uint64_t v164 = v249[51];
                  uint64_t v239 = v249[50];
                  v166 = (unsigned char *)v249[48];
                  v165 = (unsigned char *)v249[49];
                  v248 = (unsigned char *)v249[47];
                  v207 = v55;
                  unint64_t v27 = v249[42];
                  uint64_t v168 = v249[39];
                  unint64_t v167 = v249[40];
                  v169 = (void *)v249[36];
                  v170 = (uint64_t *)v249[37];
                  v243 = v163;
                  swift_bridgeObjectRelease();
                  sub_10001CFB8(v168, v167);
                  uint64_t v171 = v169[3];
                  uint64_t v172 = v169[4];
                  sub_10001CD44(v169, v171);
                  (*(void (**)(uint64_t, uint64_t))(v172 + 184))(v171, v172);
                  uint64_t v173 = *v170;
                  v174 = (char *)v170 + *(int *)(sub_10000588C(&qword_10163F7B0) + 36);
                  uint64_t v175 = v164 + *(int *)(v239 + 24);
                  uint64_t v176 = type metadata accessor for Date();
                  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v176 - 8) + 16))(v175, v174, v176);
                  *(void *)(v164 + *(int *)(v239 + 20)) = v173;
                  sub_100CBD0EC(v164, (uint64_t)&v165[*(int *)(v27 + 20)], type metadata accessor for KeyDropInterface.KeyAlignment);
                  unsigned char *v165 = 2;
                  *(void *)&v165[*(int *)(v27 + 24)] = v207;
                  sub_100CBD0EC(v164, (uint64_t)&v166[*(int *)(v27 + 20)], type metadata accessor for KeyDropInterface.KeyAlignment);
                  unsigned char *v166 = 3;
                  *(void *)&v166[*(int *)(v27 + 24)] = v243;
                  sub_100CBD0EC(v164, (uint64_t)&v248[*(int *)(v27 + 20)], type metadata accessor for KeyDropInterface.KeyAlignment);
                  unsigned char *v248 = 0;
                  *(void *)&v248[*(int *)(v27 + 24)] = _swiftEmptyArrayStorage;
                  char v24 = 1;
                  uint64_t v25 = sub_100A6F328(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage);
                  unint64_t v23 = *(void *)(v25 + 16);
                  unint64_t v94 = *(void *)(v25 + 24);
                  int64_t v22 = v23 + 1;
                  if (v23 >= v94 >> 1) {
                    goto LABEL_120;
                  }
                  goto LABEL_99;
                }
                continue;
              }
              if (v70)
              {
                if (v70 == 1)
                {
                  if (!__OFSUB__(HIDWORD(v67), v67))
                  {
                    uint64_t v132 = HIDWORD(v67) - (int)v67;
                    goto LABEL_111;
                  }
                  __break(1u);
LABEL_122:
                  __break(1u);
                  JUMPOUT(0x100CB06CCLL);
                }
                uint64_t v202 = *(void *)(v67 + 16);
                uint64_t v201 = *(void *)(v67 + 24);
                uint64_t v132 = v201 - v202;
                if (__OFSUB__(v201, v202)) {
                  goto LABEL_122;
                }
              }
              else
              {
                uint64_t v132 = BYTE6(v69);
              }
LABEL_111:
              sub_10013019C();
              uint64_t v203 = swift_allocError();
              *(void *)uint64_t v204 = 28;
              *(void *)(v204 + 8) = v132;
              *(unsigned char *)(v204 + 16) = 0;
              swift_willThrow();
LABEL_112:
              sub_10001CFB8(v67, v69);
              _StringGuts.grow(_:)(35);
              v249[26] = 0xE000000000000000;
              v249[25] = 0;
              v205._object = (void *)0x80000001013F3B70;
              v205._countAndFlagsBits = 0xD000000000000021;
              String.append(_:)(v205);
              v249[32] = v203;
              sub_10000588C(&qword_101638D40);
LABEL_72:
              _print_unlocked<A, B>(_:_:)();
              return _assertionFailure(_:_:file:line:flags:)();
            case 2uLL:
              uint64_t v73 = *(void *)(v67 + 16);
              uint64_t v72 = *(void *)(v67 + 24);
              BOOL v32 = __OFSUB__(v72, v73);
              uint64_t v71 = v72 - v73;
              if (!v32) {
                goto LABEL_32;
              }
              goto LABEL_117;
            case 3uLL:
              uint64_t v132 = 0;
              goto LABEL_111;
            default:
              uint64_t v71 = BYTE6(v69);
              goto LABEL_32;
          }
        }
      case 2uLL:
        uint64_t v31 = *(void *)(v25 + 16);
        uint64_t v30 = *(void *)(v25 + 24);
        BOOL v32 = __OFSUB__(v30, v31);
        uint64_t v29 = v30 - v31;
        if (!v32) {
          goto LABEL_13;
        }
        goto LABEL_114;
      case 3uLL:
        int64_t v22 = 0;
        goto LABEL_70;
      default:
        uint64_t v29 = BYTE6(v27);
        goto LABEL_13;
    }
  }
}

uint64_t sub_100CB06EC(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  v4[77] = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(void))v4[1];
    return v5();
  }
  else
  {
    uint64_t v7 = v4[41];
    v4[78] = a1;
    return _swift_task_switch(sub_100CB0978, v7, 0);
  }
}

uint64_t sub_100CB0978()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0[78];
  int64_t v3 = v0[77];
  uint64_t v4 = v0[74];
  int64_t v5 = *(void *)(v4 + 16);
  if (!v5) {
    goto LABEL_43;
  }
  uint64_t v208 = v0[78];
  v244 = v0 + 11;
  v211 = v0 + 31;
  uint64_t v6 = v0[65];
  uint64_t v237 = v1[64];
  uint64_t v7 = v1[62];
  sub_1000B7070(0, v5, 0);
  uint64_t v210 = v4;
  uint64_t v8 = v4 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  uint64_t v235 = *(void *)(v6 + 72);
  unsigned int v231 = enum case for HashAlgorithm.sha256(_:);
  v223 = (void (**)(uint64_t, uint64_t))(v7 + 8);
  v227 = (void (**)(uint64_t, void, uint64_t))(v7 + 104);
  uint64_t v219 = v8;
  while (2)
  {
    int64_t v240 = v5;
    int64_t v9 = (uint64_t *)v1[69];
    sub_100CBD0EC(v8, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
    uint64_t v10 = *v9;
    int64_t v11 = (char *)v9 + *(int *)(v237 + 24);
    unint64_t v12 = *((void *)v11 + 2);
    unint64_t v13 = *((void *)v11 + 3);
    sub_1000361E0(v12, v13);
    uint64_t v14 = sub_100A948F8(v12, v13);
    int64_t v15 = v3;
    if (v3)
    {
      unint64_t v20 = (unint64_t)v211;
      static os_log_type_t.error.getter();
      uint64_t v10 = (uint64_t)v249;
      if (qword_101636F48 == -1)
      {
LABEL_17:
        sub_10000588C((uint64_t *)&unk_10163AD00);
        uint64_t v41 = swift_allocObject();
        *(_OWORD *)(v41 + 16) = xmmword_101342130;
        *(void *)unint64_t v20 = v15;
        swift_errorRetain();
        sub_10000588C(&qword_101638D40);
        uint64_t v42 = String.init<A>(describing:)();
        uint64_t v44 = v43;
        *(void *)(v41 + 56) = &type metadata for String;
        *(void *)(v41 + 64) = sub_10000B4CC();
        *(void *)(v41 + 32) = v42;
        *(void *)(v41 + 40) = v44;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        sub_100130148();
        uint64_t v45 = swift_allocError();
        *long long v46 = 0;
        swift_willThrow();
        swift_errorRelease();
        unint64_t v20 = v13;
        uint64_t v18 = v12;
        goto LABEL_67;
      }
LABEL_113:
      swift_once();
      goto LABEL_17;
    }
    uint64_t v16 = (void *)v14;
    char v17 = 0;
    uint64_t v18 = sub_100A90C58(v14, 0);
    unint64_t v20 = v19;
    CCECCryptorRelease();
    sub_10001CFB8(v12, v13);
    unint64_t v21 = v20 >> 62;
    switch(v20 >> 62)
    {
      case 1uLL:
        LODWORD(v22) = HIDWORD(v18) - v18;
        if (__OFSUB__(HIDWORD(v18), v18))
        {
          __break(1u);
LABEL_112:
          __break(1u);
          goto LABEL_113;
        }
        uint64_t v22 = (int)v22;
LABEL_9:
        if (v22 != 28)
        {
          if (v21)
          {
            if (v21 == 1)
            {
              unint64_t v47 = (HIDWORD(v18) - v18);
              uint64_t v10 = (uint64_t)v249;
              if (!__OFSUB__(HIDWORD(v18), v18))
              {
                int64_t v15 = (int)v47;
                goto LABEL_66;
              }
              __break(1u);
LABEL_117:
              __break(1u);
LABEL_118:
              uint64_t v18 = sub_100A6F328(v47 > 1, v15, 1, v18);
LABEL_97:
              uint64_t v175 = v249[51];
              uint64_t v177 = (char *)v249[46];
              uint64_t v176 = v249[47];
              uint64_t v178 = v249[43];
              *(void *)(v18 + 16) = v15;
              unint64_t v179 = (*(unsigned __int8 *)(v178 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v178 + 80);
              uint64_t v180 = *(void *)(v178 + 72);
              sub_100CBD1B4(v176, v18 + v179 + v180 * v12, type metadata accessor for KeyDropInterface.KeyPackage);
              sub_100CBD0EC(v175, (uint64_t)&v177[*(int *)(v20 + 20)], type metadata accessor for KeyDropInterface.KeyAlignment);
              *uint64_t v177 = v17;
              *(void *)&v177[*(int *)(v20 + 24)] = v16;
              unint64_t v182 = *(void *)(v18 + 16);
              unint64_t v181 = *(void *)(v18 + 24);
              if (v182 >= v181 >> 1) {
                uint64_t v18 = sub_100A6F328(v181 > 1, v182 + 1, 1, v18);
              }
              uint64_t v183 = v249[49];
              uint64_t v185 = v249[45];
              uint64_t v184 = v249[46];
              *(void *)(v18 + 16) = v182 + 1;
              sub_100CBD1B4(v184, v18 + v179 + v182 * v180, type metadata accessor for KeyDropInterface.KeyPackage);
              sub_100CBD0EC(v183, v185, type metadata accessor for KeyDropInterface.KeyPackage);
              unint64_t v187 = *(void *)(v18 + 16);
              unint64_t v186 = *(void *)(v18 + 24);
              if (v187 >= v186 >> 1) {
                uint64_t v18 = sub_100A6F328(v186 > 1, v187 + 1, 1, v18);
              }
              uint64_t v188 = v249[48];
              uint64_t v190 = v249[44];
              uint64_t v189 = v249[45];
              *(void *)(v18 + 16) = v187 + 1;
              sub_100CBD1B4(v189, v18 + v179 + v187 * v180, type metadata accessor for KeyDropInterface.KeyPackage);
              sub_100CBD0EC(v188, v190, type metadata accessor for KeyDropInterface.KeyPackage);
              unint64_t v192 = *(void *)(v18 + 16);
              unint64_t v191 = *(void *)(v18 + 24);
              if (v192 >= v191 >> 1) {
                uint64_t v18 = sub_100A6F328(v191 > 1, v192 + 1, 1, v18);
              }
              uint64_t v193 = v249[51];
              uint64_t v194 = v249[48];
              uint64_t v195 = v249[49];
              unint64_t v196 = v18 + v179;
              uint64_t v197 = v249[44];
              *(void *)(v18 + 16) = v192 + 1;
              sub_100CBD1B4(v197, v196 + v192 * v180, type metadata accessor for KeyDropInterface.KeyPackage);
              sub_100CBD154(v194, type metadata accessor for KeyDropInterface.KeyPackage);
              sub_100CBD154(v195, type metadata accessor for KeyDropInterface.KeyPackage);
              sub_100CBD154(v193, type metadata accessor for KeyDropInterface.KeyAlignment);
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              swift_task_dealloc();
              unint64_t v198 = (uint64_t (*)(uint64_t))v249[1];
              return v198(v18);
            }
            uint64_t v117 = *(void *)(v18 + 16);
            unint64_t v47 = *(void *)(v18 + 24);
            int64_t v15 = v47 - v117;
            uint64_t v10 = (uint64_t)v249;
            if (__OFSUB__(v47, v117)) {
              goto LABEL_117;
            }
          }
          else
          {
            int64_t v15 = BYTE6(v20);
LABEL_64:
            uint64_t v10 = (uint64_t)v249;
          }
LABEL_66:
          sub_10013019C();
          uint64_t v45 = swift_allocError();
          *(void *)uint64_t v118 = 28;
          *(void *)(v118 + 8) = v15;
          *(unsigned char *)(v118 + 16) = 0;
          swift_willThrow();
LABEL_67:
          sub_10001CFB8(v18, v20);
          _StringGuts.grow(_:)(35);
          *(void *)(v10 + 224) = 0xE000000000000000;
          uint64_t v119 = v10 + 224;
          *(void *)(v119 - 8) = 0;
          v120._object = (void *)0x80000001013F3B70;
          v120._countAndFlagsBits = 0xD000000000000021;
          String.append(_:)(v120);
          *(void *)(v119 + 8) = v45;
          sub_10000588C(&qword_101638D40);
          goto LABEL_68;
        }
        uint64_t v26 = v249[69];
        uint64_t v27 = v249[63];
        uint64_t v29 = v249[60];
        uint64_t v28 = v249[61];
        (*v227)(v27, v231, v28);
        uint64_t v30 = Data.hash(algorithm:)();
        unint64_t v32 = v31;
        (*v223)(v27, v28);
        sub_10001CFB8(v18, v20);
        uint64_t v33 = type metadata accessor for EncryptedData();
        uint64_t v34 = *(void *)(v33 - 8);
        v233 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 56);
        v233(v29, 1, 1, v33);
        sub_101268234(v10, v30, v32, v29, v244);
        sub_100CBD154(v26, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1000B7070(0, _swiftEmptyArrayStorage[2] + 1, 1);
        }
        unint64_t v36 = _swiftEmptyArrayStorage[2];
        unint64_t v35 = _swiftEmptyArrayStorage[3];
        uint64_t v1 = v249;
        if (v36 >= v35 >> 1) {
          sub_1000B7070(v35 > 1, v36 + 1, 1);
        }
        int64_t v3 = 0;
        _swiftEmptyArrayStorage[2] = v36 + 1;
        uint64_t v37 = &_swiftEmptyArrayStorage[9 * v36];
        *((_OWORD *)v37 + 2) = *(_OWORD *)v244;
        long long v38 = *((_OWORD *)v244 + 1);
        long long v39 = *((_OWORD *)v244 + 2);
        long long v40 = *((_OWORD *)v244 + 3);
        v37[12] = v244[8];
        *((_OWORD *)v37 + 4) = v39;
        *((_OWORD *)v37 + 5) = v40;
        *((_OWORD *)v37 + 3) = v38;
        v8 += v235;
        int64_t v5 = v240 - 1;
        if (v240 != 1) {
          continue;
        }
        uint64_t v48 = *(void *)(v210 + 16);
        if (!v48)
        {
          int64_t v3 = 0;
          uint64_t v2 = v208;
LABEL_43:
          swift_bridgeObjectRelease();
          unint64_t v49 = _swiftEmptyArrayStorage;
          goto LABEL_44;
        }
        v245 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v34 + 48);
        v212 = (void (**)(uint64_t, uint64_t))(v34 + 8);
        swift_bridgeObjectRetain();
        unint64_t v49 = _swiftEmptyArrayStorage;
        uint64_t v50 = v219;
        do
        {
          uint64_t v51 = v1[68];
          sub_100CBD0EC(v50, v51, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
          uint64_t v52 = v51 + *(int *)(v237 + 24);
          unint64_t v53 = *(void *)(v52 + 40);
          uint64_t v54 = (uint64_t *)v1[68];
          if (v53 >> 60 == 15)
          {
            sub_100CBD154((uint64_t)v54, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
          }
          else
          {
            uint64_t v220 = v50;
            uint64_t v55 = *(void *)(v52 + 32);
            uint64_t v57 = v1[58];
            uint64_t v56 = v1[59];
            uint64_t v232 = *v54;
            v233(v56, 1, 1, v33);
            sub_10001D074(v56, v57, &qword_10165C0B8);
            uint64_t v58 = *v245;
            LODWORD(v57) = (*v245)(v57, 1, v33);
            sub_1000361E0(v55, v53);
            sub_1000361E0(v55, v53);
            uint64_t v59 = v1[58];
            if (v57 == 1)
            {
              sub_10001DAB4(v1[58], &qword_10165C0B8);
              unint64_t v224 = 0xF000000000000000;
              uint64_t v228 = 0;
            }
            else
            {
              uint64_t v60 = EncryptedData.cipherText.getter();
              unint64_t v224 = v61;
              uint64_t v228 = v60;
              (*v212)(v59, v33);
            }
            uint64_t v62 = v1[57];
            sub_10001D074(v1[59], v62, &qword_10165C0B8);
            int v63 = v58(v62, 1, v33);
            uint64_t v64 = v1[57];
            if (v63 == 1)
            {
              sub_10001DAB4(v1[57], &qword_10165C0B8);
              unint64_t v214 = 0xF000000000000000;
              uint64_t v217 = 0;
            }
            else
            {
              uint64_t v65 = EncryptedData.initializationVector.getter();
              unint64_t v214 = v66;
              uint64_t v217 = v65;
              (*v212)(v64, v33);
            }
            uint64_t v67 = v1[56];
            sub_10001D074(v1[59], v67, &qword_10165C0B8);
            int v68 = v58(v67, 1, v33);
            uint64_t v69 = v1[59];
            uint64_t v70 = v1[56];
            if (v68 == 1)
            {
              sub_100037A24(v55, v53);
              sub_10001DAB4(v69, &qword_10165C0B8);
              sub_10001DAB4(v70, &qword_10165C0B8);
              uint64_t v71 = 0;
              unint64_t v72 = 0xF000000000000000;
            }
            else
            {
              uint64_t v71 = EncryptedData.tag.getter();
              unint64_t v72 = v73;
              sub_100037A24(v55, v53);
              sub_10001DAB4(v69, &qword_10165C0B8);
              (*v212)(v70, v33);
            }
            sub_100CBD154(v249[68], (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              unint64_t v49 = sub_100A6F4D4(0, v49[2] + 1, 1, v49);
            }
            unint64_t v75 = v49[2];
            unint64_t v74 = v49[3];
            if (v75 >= v74 >> 1) {
              unint64_t v49 = sub_100A6F4D4((void *)(v74 > 1), v75 + 1, 1, v49);
            }
            v49[2] = v75 + 1;
            uint64_t v76 = &v49[9 * v75];
            v76[4] = v232;
            v76[5] = v55;
            v76[6] = v53;
            v76[7] = v228;
            v76[8] = v224;
            v76[9] = v217;
            v76[10] = v214;
            v76[11] = v71;
            v76[12] = v72;
            uint64_t v1 = v249;
            uint64_t v50 = v220;
          }
          v50 += v235;
          --v48;
        }
        while (v48);
        swift_bridgeObjectRelease_n();
        int64_t v3 = 0;
        uint64_t v2 = v208;
LABEL_44:
        uint64_t v78 = v1[39];
        unint64_t v77 = v1[40];
        sub_1000361E0(v78, v77);
        unint64_t v79 = sub_100CBCA7C((uint64_t)v49, v78, v77);
        uint64_t v81 = v1[39];
        unint64_t v80 = v1[40];
        if (v3)
        {
          swift_bridgeObjectRelease();
          sub_10001CFB8(v81, v80);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          swift_task_dealloc();
          unint64_t v82 = (uint64_t (*)(void))v1[1];
          return v82();
        }
        unint64_t v84 = v79;
        swift_bridgeObjectRelease();
        sub_10001CFB8(v81, v80);
        int64_t v85 = *(void *)(v2 + 16);
        uint64_t v16 = _swiftEmptyArrayStorage;
        if (!v85) {
          goto LABEL_95;
        }
        uint64_t v204 = v84;
        v246 = v1 + 2;
        v206 = v1 + 30;
        uint64_t v86 = v1[65];
        uint64_t v238 = v1[64];
        uint64_t v87 = v1[62];
        swift_bridgeObjectRetain();
        sub_1000B7070(0, v85, 0);
        uint64_t v209 = v2;
        uint64_t v88 = v2 + ((*(unsigned __int8 *)(v86 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v86 + 80));
        uint64_t v236 = *(void *)(v86 + 72);
        unsigned int v229 = enum case for HashAlgorithm.sha256(_:);
        uint64_t v221 = (void (**)(uint64_t, uint64_t))(v87 + 8);
        unint64_t v225 = (void (**)(uint64_t, void, uint64_t))(v87 + 104);
        uint64_t v215 = v88;
        while (2)
        {
          int64_t v89 = v85;
          uint64_t v90 = (uint64_t *)v1[67];
          sub_100CBD0EC(v88, (uint64_t)v90, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
          uint64_t v91 = *v90;
          uint64_t v92 = (char *)v90 + *(int *)(v238 + 24);
          uint64_t v94 = *((void *)v92 + 2);
          unint64_t v93 = *((void *)v92 + 3);
          sub_1000361E0(v94, v93);
          uint64_t v95 = sub_100A948F8(v94, v93);
          uint64_t v96 = sub_100A90C58(v95, 0);
          unint64_t v98 = v97;
          CCECCryptorRelease();
          sub_10001CFB8(v94, v93);
          unint64_t v99 = v98 >> 62;
          switch(v98 >> 62)
          {
            case 1uLL:
              LODWORD(v100) = HIDWORD(v96) - v96;
              if (__OFSUB__(HIDWORD(v96), v96))
              {
                __break(1u);
LABEL_115:
                __break(1u);
                swift_once();
                sub_10000588C((uint64_t *)&unk_10163AD00);
                uint64_t v121 = swift_allocObject();
                *(_OWORD *)(v121 + 16) = xmmword_101342130;
                void *v206 = 0;
                swift_errorRetain();
                sub_10000588C(&qword_101638D40);
                uint64_t v122 = String.init<A>(describing:)();
                uint64_t v124 = v123;
                *(void *)(v121 + 56) = &type metadata for String;
                *(void *)(v121 + 64) = sub_10000B4CC();
                *(void *)(v121 + 32) = v122;
                *(void *)(v121 + 40) = v124;
                os_log(_:dso:log:_:_:)();
                swift_bridgeObjectRelease();
                sub_100130148();
                uint64_t v201 = swift_allocError();
                *uint64_t v125 = 0;
                swift_willThrow();
                swift_errorRelease();
                unint64_t v98 = v93;
                uint64_t v96 = v94;
                goto LABEL_110;
              }
              uint64_t v100 = (int)v100;
LABEL_55:
              if (v100 == 28)
              {
                uint64_t v241 = v249[67];
                uint64_t v103 = v249[63];
                uint64_t v105 = v249[60];
                uint64_t v104 = v249[61];
                (*v225)(v103, v229, v104);
                uint64_t v106 = Data.hash(algorithm:)();
                unint64_t v108 = v107;
                (*v221)(v103, v104);
                sub_10001CFB8(v96, v98);
                uint64_t v109 = type metadata accessor for EncryptedData();
                uint64_t v110 = *(void *)(v109 - 8);
                v234 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v110 + 56);
                v234(v105, 1, 1, v109);
                sub_101268234(v91, v106, v108, v105, v246);
                sub_100CBD154(v241, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
                uint64_t v16 = _swiftEmptyArrayStorage;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                {
                  sub_1000B7070(0, _swiftEmptyArrayStorage[2] + 1, 1);
                  uint64_t v16 = _swiftEmptyArrayStorage;
                }
                unint64_t v112 = _swiftEmptyArrayStorage[2];
                unint64_t v111 = _swiftEmptyArrayStorage[3];
                uint64_t v1 = v249;
                if (v112 >= v111 >> 1)
                {
                  sub_1000B7070(v111 > 1, v112 + 1, 1);
                  uint64_t v16 = _swiftEmptyArrayStorage;
                }
                _swiftEmptyArrayStorage[2] = v112 + 1;
                uint64_t v113 = &_swiftEmptyArrayStorage[9 * v112];
                *((_OWORD *)v113 + 2) = *(_OWORD *)v246;
                long long v114 = *((_OWORD *)v246 + 1);
                long long v115 = *((_OWORD *)v246 + 2);
                long long v116 = *((_OWORD *)v246 + 3);
                v113[12] = v246[8];
                *((_OWORD *)v113 + 4) = v115;
                *((_OWORD *)v113 + 5) = v116;
                *((_OWORD *)v113 + 3) = v114;
                v88 += v236;
                int64_t v85 = v89 - 1;
                if (v89 == 1)
                {
                  swift_bridgeObjectRelease();
                  uint64_t v127 = *(void *)(v209 + 16);
                  if (v127)
                  {
                    v242 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v110 + 48);
                    unint64_t v213 = (void (**)(uint64_t, uint64_t))(v110 + 8);
                    swift_bridgeObjectRetain();
                    v247 = _swiftEmptyArrayStorage;
                    uint64_t v128 = v215;
                    do
                    {
                      uint64_t v129 = v1[66];
                      sub_100CBD0EC(v128, v129, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
                      uint64_t v130 = v129 + *(int *)(v238 + 24);
                      unint64_t v131 = *(void *)(v130 + 40);
                      uint64_t v132 = (uint64_t *)v1[66];
                      if (v131 >> 60 == 15)
                      {
                        sub_100CBD154((uint64_t)v132, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
                      }
                      else
                      {
                        uint64_t v216 = v128;
                        uint64_t v133 = *(void *)(v130 + 32);
                        uint64_t v135 = v1[54];
                        uint64_t v134 = v1[55];
                        uint64_t v226 = *v132;
                        v234(v134, 1, 1, v109);
                        sub_10001D074(v134, v135, &qword_10165C0B8);
                        uint64_t v136 = *v242;
                        LODWORD(v135) = (*v242)(v135, 1, v109);
                        sub_1000361E0(v133, v131);
                        uint64_t v230 = v133;
                        sub_1000361E0(v133, v131);
                        uint64_t v137 = v1[54];
                        if (v135 == 1)
                        {
                          sub_10001DAB4(v1[54], &qword_10165C0B8);
                          uint64_t v138 = 0;
                          unint64_t v222 = 0xF000000000000000;
                        }
                        else
                        {
                          uint64_t v138 = EncryptedData.cipherText.getter();
                          unint64_t v222 = v139;
                          (*v213)(v137, v109);
                        }
                        uint64_t v140 = v1[53];
                        sub_10001D074(v1[55], v140, &qword_10165C0B8);
                        int v141 = v136(v140, 1, v109);
                        uint64_t v142 = v1[53];
                        if (v141 == 1)
                        {
                          sub_10001DAB4(v1[53], &qword_10165C0B8);
                          uint64_t v143 = 0;
                          unint64_t v218 = 0xF000000000000000;
                        }
                        else
                        {
                          uint64_t v143 = EncryptedData.initializationVector.getter();
                          unint64_t v218 = v144;
                          (*v213)(v142, v109);
                        }
                        uint64_t v145 = v1[52];
                        sub_10001D074(v1[55], v145, &qword_10165C0B8);
                        int v146 = v136(v145, 1, v109);
                        uint64_t v147 = v1[55];
                        uint64_t v148 = v1[52];
                        if (v146 == 1)
                        {
                          sub_100037A24(v230, v131);
                          sub_10001DAB4(v147, &qword_10165C0B8);
                          sub_10001DAB4(v148, &qword_10165C0B8);
                          uint64_t v149 = 0;
                          unint64_t v150 = 0xF000000000000000;
                        }
                        else
                        {
                          uint64_t v207 = EncryptedData.tag.getter();
                          unint64_t v150 = v151;
                          sub_100037A24(v230, v131);
                          uint64_t v149 = v207;
                          sub_10001DAB4(v147, &qword_10165C0B8);
                          (*v213)(v148, v109);
                        }
                        sub_100CBD154(v249[66], (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
                        if (swift_isUniquelyReferenced_nonNull_native()) {
                          int v152 = v247;
                        }
                        else {
                          int v152 = sub_100A6F4D4(0, v247[2] + 1, 1, v247);
                        }
                        unint64_t v154 = v152[2];
                        unint64_t v153 = v152[3];
                        if (v154 >= v153 >> 1) {
                          int v152 = sub_100A6F4D4((void *)(v153 > 1), v154 + 1, 1, v152);
                        }
                        v152[2] = v154 + 1;
                        v247 = v152;
                        uint64_t v155 = &v152[9 * v154];
                        v155[4] = v226;
                        v155[5] = v230;
                        v155[6] = v131;
                        v155[7] = v138;
                        v155[8] = v222;
                        v155[9] = v143;
                        v155[10] = v218;
                        v155[11] = v149;
                        v155[12] = v150;
                        uint64_t v1 = v249;
                        uint64_t v128 = v216;
                      }
                      v128 += v236;
                      --v127;
                    }
                    while (v127);
                    swift_bridgeObjectRelease_n();
                    unint64_t v84 = v204;
                    unint64_t v156 = v247;
LABEL_96:
                    uint64_t v158 = v1[39];
                    unint64_t v157 = v1[40];
                    sub_1000361E0(v158, v157);
                    unint64_t v159 = sub_100CBCA7C((uint64_t)v156, v158, v157);
                    Swift::String v205 = v84;
                    uint64_t v160 = v1[51];
                    uint64_t v239 = v1[50];
                    unint64_t v161 = v1;
                    uint64_t v164 = v1 + 48;
                    v163 = (unsigned char *)v1[48];
                    uint64_t v162 = (unsigned char *)v164[1];
                    v248 = (unsigned char *)v161[47];
                    unint64_t v20 = v161[42];
                    uint64_t v166 = v161[39];
                    unint64_t v165 = v161[40];
                    unint64_t v167 = (void *)v161[36];
                    uint64_t v168 = (uint64_t *)v161[37];
                    v243 = v159;
                    swift_bridgeObjectRelease();
                    sub_10001CFB8(v166, v165);
                    uint64_t v169 = v167[3];
                    uint64_t v170 = v167[4];
                    sub_10001CD44(v167, v169);
                    (*(void (**)(uint64_t, uint64_t))(v170 + 184))(v169, v170);
                    uint64_t v171 = *v168;
                    uint64_t v172 = (char *)v168 + *(int *)(sub_10000588C(&qword_10163F7B0) + 36);
                    uint64_t v173 = v160 + *(int *)(v239 + 24);
                    uint64_t v174 = type metadata accessor for Date();
                    (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v174 - 8) + 16))(v173, v172, v174);
                    *(void *)(v160 + *(int *)(v239 + 20)) = v171;
                    sub_100CBD0EC(v160, (uint64_t)&v162[*(int *)(v20 + 20)], type metadata accessor for KeyDropInterface.KeyAlignment);
                    *uint64_t v162 = 2;
                    *(void *)&v162[*(int *)(v20 + 24)] = v205;
                    sub_100CBD0EC(v160, (uint64_t)&v163[*(int *)(v20 + 20)], type metadata accessor for KeyDropInterface.KeyAlignment);
                    unsigned char *v163 = 3;
                    *(void *)&v163[*(int *)(v20 + 24)] = v243;
                    sub_100CBD0EC(v160, (uint64_t)&v248[*(int *)(v20 + 20)], type metadata accessor for KeyDropInterface.KeyAlignment);
                    unsigned char *v248 = 0;
                    *(void *)&v248[*(int *)(v20 + 24)] = _swiftEmptyArrayStorage;
                    char v17 = 1;
                    uint64_t v18 = sub_100A6F328(0, 1, 1, (unint64_t)_swiftEmptyArrayStorage);
                    unint64_t v12 = *(void *)(v18 + 16);
                    unint64_t v47 = *(void *)(v18 + 24);
                    int64_t v15 = v12 + 1;
                    if (v12 >= v47 >> 1) {
                      goto LABEL_118;
                    }
                    goto LABEL_97;
                  }
                  unint64_t v84 = v204;
LABEL_95:
                  swift_bridgeObjectRelease();
                  unint64_t v156 = _swiftEmptyArrayStorage;
                  goto LABEL_96;
                }
                continue;
              }
              if (v99)
              {
                if (v99 == 1)
                {
                  if (!__OFSUB__(HIDWORD(v96), v96))
                  {
                    uint64_t v126 = HIDWORD(v96) - (int)v96;
                    goto LABEL_109;
                  }
                  __break(1u);
LABEL_120:
                  __break(1u);
                  JUMPOUT(0x100CB238CLL);
                }
                uint64_t v200 = *(void *)(v96 + 16);
                uint64_t v199 = *(void *)(v96 + 24);
                uint64_t v126 = v199 - v200;
                if (__OFSUB__(v199, v200)) {
                  goto LABEL_120;
                }
              }
              else
              {
                uint64_t v126 = BYTE6(v98);
              }
LABEL_109:
              sub_10013019C();
              uint64_t v201 = swift_allocError();
              *(void *)uint64_t v202 = 28;
              *(void *)(v202 + 8) = v126;
              *(unsigned char *)(v202 + 16) = 0;
              swift_willThrow();
LABEL_110:
              sub_10001CFB8(v96, v98);
              _StringGuts.grow(_:)(35);
              v249[26] = 0xE000000000000000;
              v249[25] = 0;
              v203._object = (void *)0x80000001013F3B70;
              v203._countAndFlagsBits = 0xD000000000000021;
              String.append(_:)(v203);
              v249[32] = v201;
              sub_10000588C(&qword_101638D40);
LABEL_68:
              _print_unlocked<A, B>(_:_:)();
              return _assertionFailure(_:_:file:line:flags:)();
            case 2uLL:
              uint64_t v102 = *(void *)(v96 + 16);
              uint64_t v101 = *(void *)(v96 + 24);
              BOOL v25 = __OFSUB__(v101, v102);
              uint64_t v100 = v101 - v102;
              if (!v25) {
                goto LABEL_55;
              }
              goto LABEL_115;
            case 3uLL:
              uint64_t v126 = 0;
              goto LABEL_109;
            default:
              uint64_t v100 = BYTE6(v98);
              goto LABEL_55;
          }
        }
      case 2uLL:
        uint64_t v24 = *(void *)(v18 + 16);
        uint64_t v23 = *(void *)(v18 + 24);
        BOOL v25 = __OFSUB__(v23, v24);
        uint64_t v22 = v23 - v24;
        if (!v25) {
          goto LABEL_9;
        }
        goto LABEL_112;
      case 3uLL:
        int64_t v15 = 0;
        goto LABEL_64;
      default:
        uint64_t v22 = BYTE6(v20);
        goto LABEL_9;
    }
  }
}

uint64_t sub_100CB23AC(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v5 + 40) = a4;
  *(void *)(v5 + 48) = v4;
  *(unsigned char *)(v5 + 96) = a2;
  *(void *)(v5 + 24) = a1;
  *(void *)(v5 + 32) = a3;
  return _swift_task_switch(sub_100CB23D4, 0, 0);
}

void sub_100CB23D4()
{
  *(void *)(v0 + 16) = _swiftEmptyArrayStorage;
  unint64_t v2 = *(void *)(v0 + 32);
  unint64_t v1 = *(void *)(v0 + 40);
  *(void *)(v0 + 56) = v2;
  if (v2 <= v1)
  {
    unint64_t v3 = v1 - v2;
    if ((uint64_t)(v1 - v2) >= 0) {
      goto LABEL_5;
    }
LABEL_9:
    __break(1u);
    return;
  }
  if ((uint64_t)(v2 - v1) < 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  unint64_t v3 = v1 - v2;
LABEL_5:
  *(void *)(v0 + 64) = v3;
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v4;
  void *v4 = v0;
  v4[1] = sub_100CB24B4;
  uint64_t v5 = *(void *)(v0 + 24);
  char v6 = *(unsigned char *)(v0 + 96);
  sub_100CB272C(v5, v6, v2, 0);
}

uint64_t sub_100CB24B4(uint64_t a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 80) = v1;
  swift_task_dealloc();
  if (v1)
  {
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_100CB2714;
  }
  else
  {
    *(void *)(v4 + 88) = a1;
    uint64_t v5 = sub_100CB25E4;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100CB25E4()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t result = sub_100442B40(*(void *)(v0 + 88));
  if (v1)
  {
    uint64_t v3 = *(void *)(v0 + 56);
    unint64_t v4 = v3 + 1;
    if (v3 == -1)
    {
      __break(1u);
    }
    else
    {
      *(void *)(v0 + 56) = v4;
      unint64_t v5 = *(void *)(v0 + 40);
      if (v4 <= v5)
      {
        unint64_t v6 = v5 - v4;
        if ((uint64_t)(v5 - v4) >= 0) {
          goto LABEL_10;
        }
LABEL_15:
        __break(1u);
        return result;
      }
      if ((uint64_t)(v4 - v5) >= 0)
      {
        unint64_t v6 = v5 - v4;
LABEL_10:
        *(void *)(v0 + 64) = v6;
        int64_t v9 = (void *)swift_task_alloc();
        *(void *)(v0 + 72) = v9;
        *int64_t v9 = v0;
        v9[1] = sub_100CB24B4;
        uint64_t v10 = *(void *)(v0 + 24);
        char v11 = *(unsigned char *)(v0 + 96);
        return sub_100CB272C(v10, v11, v4, 0);
      }
    }
    __break(1u);
    goto LABEL_15;
  }
  uint64_t v7 = *(void *)(v0 + 16);
  uint64_t v8 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v8(v7);
}

uint64_t sub_100CB2714()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100CB272C(uint64_t a1, char a2, uint64_t a3, char a4)
{
  *(void *)(v5 + 80) = a3;
  *(void *)(v5 + 88) = v4;
  *(unsigned char *)(v5 + 153) = a4;
  *(unsigned char *)(v5 + 152) = a2;
  *(void *)(v5 + 72) = a1;
  uint64_t v6 = type metadata accessor for UUID();
  *(void *)(v5 + 96) = v6;
  *(void *)(v5 + 104) = *(void *)(v6 - 8);
  *(void *)(v5 + 112) = swift_task_alloc();
  return _swift_task_switch(sub_100CB27F8, 0, 0);
}

uint64_t sub_100CB27F8()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 120) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100CB289C;
  char v2 = *(unsigned char *)(v0 + 153);
  uint64_t v4 = *(void *)(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 80);
  char v5 = *(unsigned char *)(v0 + 152);
  return sub_100E60E24(v4, v3, v5, v2);
}

uint64_t sub_100CB289C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6 = *v4;
  uint64_t v7 = *v4;
  *(void *)(v6 + 128) = a1;
  *(void *)(v6 + 136) = a2;
  swift_task_dealloc();
  if (v3)
  {
    swift_task_dealloc();
    uint64_t v8 = *(uint64_t (**)(void))(v7 + 8);
    return v8();
  }
  else
  {
    *(unsigned char *)(v6 + 154) = a3;
    return _swift_task_switch(sub_100CB29F4, 0, 0);
  }
}

uint64_t sub_100CB29F4()
{
  uint64_t v29 = v0;
  switch(*(unsigned char *)(v0 + 154))
  {
    case 1:
      uint64_t v2 = *(void *)(v0 + 128);
      swift_task_dealloc();
      uint64_t v3 = *(uint64_t (**)(uint64_t))(v0 + 8);
      return v3(v2);
    case 2:
      uint64_t v6 = *(void *)(v0 + 128);
      uint64_t v5 = *(void *)(v0 + 136);
      sub_100130078();
      swift_allocError();
      unsigned char *v7 = 1;
      swift_willThrow();
      sub_1002F6A08(v6, v5, 2u);
      goto LABEL_9;
    case 3:
      goto LABEL_3;
    default:
      sub_1002F6A08(*(void *)(v0 + 128), *(void *)(v0 + 136), 0);
LABEL_3:
      if (*(unsigned char *)(v0 + 153))
      {
        sub_100130078();
        swift_allocError();
        *uint64_t v1 = 4;
        swift_willThrow();
LABEL_9:
        swift_task_dealloc();
        uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
        return v8();
      }
      else
      {
        if (qword_101637020 != -1) {
          swift_once();
        }
        uint64_t v9 = *(void *)(v0 + 72);
        uint64_t v10 = type metadata accessor for Logger();
        sub_100010324(v10, (uint64_t)qword_10170EB40);
        sub_10001D010(v9, v0 + 16);
        char v11 = Logger.logObject.getter();
        os_log_type_t v12 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v11, v12))
        {
          uint64_t v13 = *(void *)(v0 + 104);
          uint64_t v14 = *(void *)(v0 + 112);
          log = v11;
          uint64_t v15 = *(void *)(v0 + 96);
          uint64_t v16 = swift_slowAlloc();
          uint64_t v28 = swift_slowAlloc();
          *(_DWORD *)uint64_t v16 = 141558275;
          *(void *)(v0 + 56) = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v16 + 12) = 2081;
          os_log_type_t type = v12;
          uint64_t v18 = *(void *)(v0 + 40);
          uint64_t v17 = *(void *)(v0 + 48);
          sub_10001CD44((void *)(v0 + 16), v18);
          (*(void (**)(uint64_t))(*(void *)(*(void *)(v17 + 8) + 8) + 32))(v18);
          sub_100CBFAFC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
          unint64_t v21 = v20;
          (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v14, v15);
          *(void *)(v0 + 64) = sub_1008FA0F0(v19, v21, &v28);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
          _os_log_impl((void *)&_mh_execute_header, log, type, "Retrying key fetch with forceGenerate: %{private,mask.hash}s.", (uint8_t *)v16, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
        }
        uint64_t v22 = (void *)swift_task_alloc();
        *(void *)(v0 + 144) = v22;
        *uint64_t v22 = v0;
        v22[1] = sub_100CB2E54;
        uint64_t v23 = *(void *)(v0 + 80);
        uint64_t v24 = *(void *)(v0 + 72);
        uint64_t v25 = *(unsigned __int8 *)(v0 + 152);
        return sub_100CB272C(v24, v25, v23, 1);
      }
  }
}

uint64_t sub_100CB2E54(uint64_t a1)
{
  uint64_t v4 = *v2;
  swift_task_dealloc();
  uint64_t v5 = swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(uint64_t))(v4 + 8);
  if (!v1) {
    uint64_t v5 = a1;
  }
  return v6(v5);
}

uint64_t sub_100CB2F80(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SymmetricKey();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101637020 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_100010324(v10, (uint64_t)qword_10170EB40);
  char v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 134217984;
    uint64_t v18 = a3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Derive sharing root key: %llu.", v13, 0xCu);
    swift_slowDealloc();
  }

  uint64_t v18 = a1;
  unint64_t v19 = a2;
  sub_1000361E0(a1, a2);
  SymmetricKey.init<A>(data:)();
  uint64_t v18 = a3;
  dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v14 = String.utf8Data.getter();
  unint64_t v16 = v15;
  swift_bridgeObjectRelease();
  uint64_t v18 = v14;
  unint64_t v19 = v16;
  type metadata accessor for SHA256();
  sub_100CBFAFC(&qword_10165C0B0, (void (*)(uint64_t))&type metadata accessor for SHA256);
  sub_1000362FC();
  static HKDF.deriveKey<A>(inputKeyMaterial:info:outputByteCount:)();
  sub_10001CFB8(v14, v16);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t type metadata accessor for SharingCircleKeyManager()
{
  return self;
}

BOOL sub_100CB3244(unint64_t *a1, char a2, uint64_t a3)
{
  if (!a2)
  {
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v5)
  {
LABEL_6:
    unint64_t v6 = *a1;
    unint64_t v7 = *(void *)(a3 + *(int *)(type metadata accessor for KeyDropInterface.KeyAlignment(0) + 20));
    return v6 >= v7;
  }
  unint64_t v6 = *a1;
  unint64_t v7 = *(void *)(a3 + *(int *)(type metadata accessor for KeyDropInterface.KeyAlignment(0) + 20));
  if (v7) {
    unint64_t v7 = v7 / 0x60 + 1;
  }
  return v6 >= v7;
}

unint64_t sub_100CB3350()
{
  return sub_100C36054(*v0);
}

uint64_t sub_100CB3358@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100CB3370(a1, a2);
}

uint64_t sub_100CB3370@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v20 - v9;
  uint64_t v11 = *a1;
  unint64_t v12 = a1[1];
  switch(v12 >> 62)
  {
    case 1uLL:
      if ((int)v11 != v11 >> 32) {
        goto LABEL_7;
      }
      goto LABEL_12;
    case 2uLL:
      if (*(void *)(v11 + 16) == *(void *)(v11 + 24)) {
        goto LABEL_12;
      }
LABEL_7:
      sub_1000361E0(v11, v12);
      goto LABEL_8;
    case 3uLL:
      goto LABEL_3;
    default:
      if ((v12 & 0xFF000000000000) == 0)
      {
LABEL_3:
        sub_10001CFB8(v11, v12);
LABEL_12:
        uint64_t v17 = type metadata accessor for Date();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v10, 1, 1, v17);
LABEL_13:
        Date.init()();
        return sub_10001DAB4((uint64_t)v10, (uint64_t *)&unk_10163AC90);
      }
LABEL_8:
      sub_101156DE4(v11, v12, &v21);
      if (v2)
      {
        __break(1u);
        JUMPOUT(0x100CB3668);
      }
      sub_10001CFB8(v11, v12);
      id v14 = v21;
      if (!v21) {
        goto LABEL_12;
      }
      id v15 = [v21 modificationDate];

      if (v15)
      {
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v16 = type metadata accessor for Date();
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v8, 0, 1, v16);
      }
      else
      {
        uint64_t v16 = type metadata accessor for Date();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v8, 1, 1, v16);
      }
      sub_10001D608((uint64_t)v8, (uint64_t)v10, (uint64_t *)&unk_10163AC90);
      type metadata accessor for Date();
      uint64_t v19 = *(void *)(v16 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v10, 1, v16) == 1) {
        goto LABEL_13;
      }
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v19 + 32))(a2, v10, v16);
  }
}

Swift::Int sub_100CB3678(uint64_t *a1, uint64_t *a2, void (*a3)(void, void, void))
{
  Swift::Int v6 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v6);
  if (result >= v6)
  {
    if (v6 < 0) {
      goto LABEL_136;
    }
    if ((unint64_t)v6 >= 2)
    {
      uint64_t v88 = 0;
      uint64_t v89 = *a1;
      for (uint64_t i = 1; i != v6; ++i)
      {
        unint64_t v91 = *(void *)(v89 + 24 * i);
        uint64_t v92 = v88;
        do
        {
          uint64_t v93 = v89 + v92;
          if (v91 >= *(void *)(v89 + v92)) {
            break;
          }
          if (!v89) {
            goto LABEL_140;
          }
          uint64_t v94 = v89 + v92;
          long long v95 = *(_OWORD *)(v89 + v92 + 32);
          *(_OWORD *)(v89 + v92 + 24) = *(_OWORD *)v93;
          *(void *)(v89 + v92 + 40) = *(void *)(v93 + 16);
          *(void *)uint64_t v94 = v91;
          *(_OWORD *)(v94 + 8) = v95;
          v92 -= 24;
        }
        while (v92 != -24);
        v88 += 24;
      }
    }
    return result;
  }
  if (v6 >= 0) {
    uint64_t v8 = v6;
  }
  else {
    uint64_t v8 = v6 + 1;
  }
  if (v6 < -1) {
    goto LABEL_145;
  }
  Swift::Int v108 = result;
  uint64_t v105 = a1;
  if (v6 < 2)
  {
    uint64_t v11 = _swiftEmptyArrayStorage;
    unint64_t v111 = (char *)&_swiftEmptyArrayStorage[4];
    if (v6 != 1)
    {
      unint64_t v15 = _swiftEmptyArrayStorage[2];
      id v14 = (char *)_swiftEmptyArrayStorage;
LABEL_102:
      unint64_t v107 = v11;
      if (v15 >= 2)
      {
        uint64_t v96 = *v105;
        do
        {
          unint64_t v97 = v15 - 2;
          if (v15 < 2) {
            goto LABEL_131;
          }
          if (!v96) {
            goto LABEL_144;
          }
          unint64_t v98 = v14;
          unint64_t v99 = v14 + 32;
          uint64_t v100 = *(void *)&v14[16 * v97 + 32];
          uint64_t v101 = *(void *)&v99[16 * v15 - 8];
          sub_100CB724C((char *)(v96 + 24 * v100), (char *)(v96 + 24 * *(void *)&v99[16 * v15 - 16]), v96 + 24 * v101, v111, a3);
          if (v3) {
            break;
          }
          if (v101 < v100) {
            goto LABEL_132;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v98 = sub_100B73584((uint64_t)v98);
          }
          if (v97 >= *((void *)v98 + 2)) {
            goto LABEL_133;
          }
          uint64_t v102 = &v98[16 * v97 + 32];
          *(void *)uint64_t v102 = v100;
          *((void *)v102 + 1) = v101;
          unint64_t v103 = *((void *)v98 + 2);
          if (v15 > v103) {
            goto LABEL_134;
          }
          memmove(&v98[16 * v15 + 16], &v98[16 * v15 + 32], 16 * (v103 - v15));
          id v14 = v98;
          *((void *)v98 + 2) = v103 - 1;
          unint64_t v15 = v103 - 1;
        }
        while (v103 > 2);
      }
LABEL_113:
      swift_bridgeObjectRelease();
      v107[2] = 0;
      return swift_bridgeObjectRelease();
    }
    unint64_t v107 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v9 = v8 >> 1;
    sub_10000588C(a2);
    uint64_t v10 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v10 + 16) = v9;
    unint64_t v107 = (void *)v10;
    unint64_t v111 = (char *)(v10 + 32);
  }
  Swift::Int v12 = 0;
  uint64_t v13 = *a1;
  uint64_t v106 = *a1 + 48;
  uint64_t v104 = *a1 - 24;
  id v14 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v109 = v6;
  uint64_t v110 = *a1;
  while (1)
  {
    Swift::Int v16 = v12++;
    if (v12 < v6)
    {
      unint64_t v17 = *(void *)(v13 + 24 * v12);
      unint64_t v18 = *(void *)(v13 + 24 * v16);
      Swift::Int v12 = v16 + 2;
      if (v16 + 2 < v6)
      {
        uint64_t v19 = (unint64_t *)(v106 + 24 * v16);
        unint64_t v20 = v17;
        while (1)
        {
          unint64_t v22 = *v19;
          v19 += 3;
          unint64_t v21 = v22;
          if (v17 < v18 == v22 >= v20) {
            break;
          }
          ++v12;
          unint64_t v20 = v21;
          if (v6 == v12)
          {
            Swift::Int v12 = v6;
            break;
          }
        }
      }
      if (v17 < v18)
      {
        if (v12 < v16) {
          goto LABEL_137;
        }
        if (v16 < v12)
        {
          uint64_t v23 = 24 * v12;
          uint64_t v24 = 24 * v16;
          Swift::Int v25 = v12;
          Swift::Int v26 = v16;
          do
          {
            if (v26 != --v25)
            {
              if (!v13) {
                goto LABEL_143;
              }
              uint64_t v27 = v13 + v24;
              uint64_t v28 = v13 + v23;
              uint64_t v29 = *(void *)(v13 + v24 + 16);
              long long v30 = *(_OWORD *)(v13 + v24);
              uint64_t v31 = *(void *)(v13 + v23 - 8);
              *(_OWORD *)uint64_t v27 = *(_OWORD *)(v13 + v23 - 24);
              *(void *)(v27 + 16) = v31;
              *(_OWORD *)(v28 - 24) = v30;
              *(void *)(v28 - 8) = v29;
            }
            ++v26;
            v23 -= 24;
            v24 += 24;
          }
          while (v26 < v25);
        }
      }
    }
    if (v12 >= v6) {
      goto LABEL_46;
    }
    if (__OFSUB__(v12, v16)) {
      goto LABEL_135;
    }
    if (v12 - v16 >= v108) {
      goto LABEL_46;
    }
    Swift::Int v32 = v16 + v108;
    if (__OFADD__(v16, v108)) {
      goto LABEL_138;
    }
    if (v32 >= v6) {
      Swift::Int v32 = v6;
    }
    if (v32 < v16) {
      break;
    }
    if (v12 != v32)
    {
      uint64_t v33 = v104 + 24 * v12;
      do
      {
        unint64_t v34 = *(void *)(v13 + 24 * v12);
        Swift::Int v35 = v16;
        uint64_t v36 = v33;
        do
        {
          if (v34 >= *(void *)v36) {
            break;
          }
          if (!v13) {
            goto LABEL_141;
          }
          long long v37 = *(_OWORD *)(v36 + 32);
          *(_OWORD *)(v36 + 24) = *(_OWORD *)v36;
          *(void *)(v36 + 40) = *(void *)(v36 + 16);
          *(void *)uint64_t v36 = v34;
          *(_OWORD *)(v36 + 8) = v37;
          v36 -= 24;
          ++v35;
        }
        while (v12 != v35);
        ++v12;
        v33 += 24;
      }
      while (v12 != v32);
      Swift::Int v12 = v32;
    }
LABEL_46:
    if (v12 < v16) {
      goto LABEL_130;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      id v14 = sub_100B729CC(0, *((void *)v14 + 2) + 1, 1, v14);
    }
    unint64_t v39 = *((void *)v14 + 2);
    unint64_t v38 = *((void *)v14 + 3);
    unint64_t v15 = v39 + 1;
    uint64_t v13 = v110;
    if (v39 >= v38 >> 1)
    {
      uint64_t v87 = sub_100B729CC((char *)(v38 > 1), v39 + 1, 1, v14);
      uint64_t v13 = v110;
      id v14 = v87;
    }
    *((void *)v14 + 2) = v15;
    long long v40 = v14 + 32;
    uint64_t v41 = &v14[16 * v39 + 32];
    *(void *)uint64_t v41 = v16;
    *((void *)v41 + 1) = v12;
    if (v39)
    {
      while (1)
      {
        unint64_t v42 = v15 - 1;
        if (v15 >= 4)
        {
          unint64_t v47 = &v40[16 * v15];
          uint64_t v48 = *((void *)v47 - 8);
          uint64_t v49 = *((void *)v47 - 7);
          BOOL v53 = __OFSUB__(v49, v48);
          uint64_t v50 = v49 - v48;
          if (v53) {
            goto LABEL_119;
          }
          uint64_t v52 = *((void *)v47 - 6);
          uint64_t v51 = *((void *)v47 - 5);
          BOOL v53 = __OFSUB__(v51, v52);
          uint64_t v45 = v51 - v52;
          char v46 = v53;
          if (v53) {
            goto LABEL_120;
          }
          unint64_t v54 = v15 - 2;
          uint64_t v55 = &v40[16 * v15 - 32];
          uint64_t v57 = *(void *)v55;
          uint64_t v56 = *((void *)v55 + 1);
          BOOL v53 = __OFSUB__(v56, v57);
          uint64_t v58 = v56 - v57;
          if (v53) {
            goto LABEL_122;
          }
          BOOL v53 = __OFADD__(v45, v58);
          uint64_t v59 = v45 + v58;
          if (v53) {
            goto LABEL_125;
          }
          if (v59 >= v50)
          {
            unint64_t v77 = &v40[16 * v42];
            uint64_t v79 = *(void *)v77;
            uint64_t v78 = *((void *)v77 + 1);
            BOOL v53 = __OFSUB__(v78, v79);
            uint64_t v80 = v78 - v79;
            if (v53) {
              goto LABEL_129;
            }
            BOOL v70 = v45 < v80;
            goto LABEL_83;
          }
        }
        else
        {
          if (v15 != 3)
          {
            uint64_t v71 = *((void *)v14 + 4);
            uint64_t v72 = *((void *)v14 + 5);
            BOOL v53 = __OFSUB__(v72, v71);
            uint64_t v64 = v72 - v71;
            char v65 = v53;
            goto LABEL_77;
          }
          uint64_t v44 = *((void *)v14 + 4);
          uint64_t v43 = *((void *)v14 + 5);
          BOOL v53 = __OFSUB__(v43, v44);
          uint64_t v45 = v43 - v44;
          char v46 = v53;
        }
        if (v46) {
          goto LABEL_121;
        }
        unint64_t v54 = v15 - 2;
        uint64_t v60 = &v40[16 * v15 - 32];
        uint64_t v62 = *(void *)v60;
        uint64_t v61 = *((void *)v60 + 1);
        BOOL v63 = __OFSUB__(v61, v62);
        uint64_t v64 = v61 - v62;
        char v65 = v63;
        if (v63) {
          goto LABEL_124;
        }
        unint64_t v66 = &v40[16 * v42];
        uint64_t v68 = *(void *)v66;
        uint64_t v67 = *((void *)v66 + 1);
        BOOL v53 = __OFSUB__(v67, v68);
        uint64_t v69 = v67 - v68;
        if (v53) {
          goto LABEL_127;
        }
        if (__OFADD__(v64, v69)) {
          goto LABEL_128;
        }
        if (v64 + v69 >= v45)
        {
          BOOL v70 = v45 < v69;
LABEL_83:
          if (v70) {
            unint64_t v42 = v54;
          }
          goto LABEL_85;
        }
LABEL_77:
        if (v65) {
          goto LABEL_123;
        }
        unint64_t v73 = &v40[16 * v42];
        uint64_t v75 = *(void *)v73;
        uint64_t v74 = *((void *)v73 + 1);
        BOOL v53 = __OFSUB__(v74, v75);
        uint64_t v76 = v74 - v75;
        if (v53) {
          goto LABEL_126;
        }
        if (v76 < v64) {
          goto LABEL_15;
        }
LABEL_85:
        unint64_t v81 = v42 - 1;
        if (v42 - 1 >= v15)
        {
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
          goto LABEL_139;
        }
        if (!v13) {
          goto LABEL_142;
        }
        unint64_t v82 = &v40[16 * v81];
        uint64_t v83 = *(void *)v82;
        unint64_t v84 = &v40[16 * v42];
        uint64_t v85 = *((void *)v84 + 1);
        sub_100CB724C((char *)(v13 + 24 * *(void *)v82), (char *)(v13 + 24 * *(void *)v84), v13 + 24 * v85, v111, a3);
        if (v3) {
          goto LABEL_113;
        }
        if (v85 < v83) {
          goto LABEL_116;
        }
        if (v42 > *((void *)v14 + 2)) {
          goto LABEL_117;
        }
        *(void *)unint64_t v82 = v83;
        *(void *)&v40[16 * v81 + 8] = v85;
        unint64_t v86 = *((void *)v14 + 2);
        if (v42 >= v86) {
          goto LABEL_118;
        }
        unint64_t v15 = v86 - 1;
        memmove(&v40[16 * v42], v84 + 16, 16 * (v86 - 1 - v42));
        *((void *)v14 + 2) = v86 - 1;
        uint64_t v13 = v110;
        if (v86 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v15 = 1;
LABEL_15:
    Swift::Int v6 = v109;
    if (v12 >= v109)
    {
      uint64_t v11 = v107;
      goto LABEL_102;
    }
  }
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Int sub_100CB3D94(void **a1)
{
  uint64_t v2 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  v288 = (char *)&v267 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v267 - v6;
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v267 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v267 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  v274 = (char *)&v267 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  v273 = (char *)&v267 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v280 = (uint64_t)&v267 - v19;
  __chkstk_darwin(v18);
  uint64_t v278 = (uint64_t)&v267 - v20;
  uint64_t v21 = type metadata accessor for Date();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = __chkstk_darwin(v21);
  Swift::Int v25 = (char *)&v267 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __chkstk_darwin(v23);
  v311 = (char *)&v267 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  v281 = (char *)&v267 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  v284 = (char *)&v267 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v269 = (uint64_t)&v267 - v33;
  __chkstk_darwin(v32);
  uint64_t v272 = (uint64_t)&v267 - v34;
  uint64_t v293 = type metadata accessor for OwnerSharingCircle();
  uint64_t v286 = *(void *)(v293 - 8);
  uint64_t v35 = __chkstk_darwin(v293);
  uint64_t v277 = (uint64_t)&v267 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = __chkstk_darwin(v35);
  uint64_t v306 = (uint64_t)&v267 - v38;
  uint64_t v39 = __chkstk_darwin(v37);
  uint64_t v314 = (uint64_t)&v267 - v40;
  uint64_t v41 = __chkstk_darwin(v39);
  v310 = (uint64_t *)((char *)&v267 - v42);
  uint64_t v43 = __chkstk_darwin(v41);
  uint64_t v287 = (uint64_t)&v267 - v44;
  uint64_t v45 = __chkstk_darwin(v43);
  uint64_t v283 = (uint64_t)&v267 - v46;
  uint64_t v47 = __chkstk_darwin(v45);
  uint64_t v49 = (uint64_t *)((char *)&v267 - v48);
  __chkstk_darwin(v47);
  v271 = (uint64_t *)((char *)&v267 - v50);
  v312 = a1;
  Swift::Int v51 = (Swift::Int)a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v51);
  if (result >= v51)
  {
    if (v51 < 0) {
      goto LABEL_230;
    }
    if (v51) {
      return sub_100CB6524(0, v51, 1, v312);
    }
    return result;
  }
  if (v51 >= 0) {
    uint64_t v53 = v51;
  }
  else {
    uint64_t v53 = v51 + 1;
  }
  if (v51 < -1)
  {
LABEL_239:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x100CB5E68);
  }
  v292 = v7;
  v298 = v13;
  Swift::Int v275 = result;
  if (v51 < 2)
  {
    uint64_t v57 = _swiftEmptyArrayStorage;
    v285 = (char *)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v286 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v286 + 80));
    if (v51 != 1)
    {
      unint64_t v60 = _swiftEmptyArrayStorage[2];
      uint64_t v59 = (char *)_swiftEmptyArrayStorage;
      goto LABEL_195;
    }
    v268 = v49;
    v270 = _swiftEmptyArrayStorage;
  }
  else
  {
    v268 = v49;
    uint64_t v54 = v53 >> 1;
    uint64_t v55 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v55 + 16) = v54;
    unint64_t v56 = (*(unsigned __int8 *)(v286 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v286 + 80);
    v270 = (void *)v55;
    v285 = (char *)(v55 + v56);
  }
  Swift::Int v58 = 0;
  v304 = (void (**)(uint64_t, uint64_t))(v22 + 8);
  v313 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 56);
  v294 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48);
  v289 = (void (**)(char *, uint64_t, uint64_t))(v22 + 32);
  uint64_t v59 = (char *)_swiftEmptyArrayStorage;
  long long v291 = xmmword_101342130;
  v296 = v10;
  uint64_t v299 = v21;
  v300 = v25;
LABEL_16:
  Swift::Int v61 = v58;
  Swift::Int v62 = v58 + 1;
  v279 = v59;
  Swift::Int v282 = v58;
  if (v58 + 1 >= v51)
  {
    uint64_t v131 = (uint64_t)v298;
    Swift::Int v132 = v275;
    goto LABEL_83;
  }
  Swift::Int v63 = v51;
  uint64_t v64 = (char *)*v312;
  Swift::Int v65 = *(void *)(v286 + 72);
  Swift::Int v305 = v58 + 1;
  unint64_t v66 = v271;
  Swift::Int v67 = v58;
  sub_100CBD0EC((uint64_t)&v64[v65 * v62], (uint64_t)v271, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  v290 = v64;
  Swift::Int v309 = v65;
  uint64_t v68 = (uint64_t)&v64[v65 * v67];
  uint64_t v69 = v268;
  sub_100CBD0EC(v68, (uint64_t)v268, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  uint64_t v71 = v295;
  sub_100CB3370(v66, v272);
  if (v71)
  {
    __break(1u);
    goto LABEL_239;
  }
  uint64_t v73 = v269;
  sub_100CB3370(v69, v269);
  uint64_t v295 = 0;
  Swift::Int v51 = v63;
  uint64_t v74 = v272;
  LODWORD(v308) = static Date.> infix(_:_:)();
  uint64_t v75 = *v304;
  (*v304)(v73, v21);
  v307 = v75;
  v75(v74, v21);
  sub_100CBD154((uint64_t)v69, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  sub_100CBD154((uint64_t)v271, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  Swift::Int v61 = v282;
  Swift::Int v62 = v282 + 2;
  if (v282 + 2 >= v51) {
    goto LABEL_69;
  }
  uint64_t v303 = v309 * v305;
  uint64_t v76 = v290;
  Swift::Int v302 = v309 * v62;
  while (2)
  {
    Swift::Int v305 = v62;
    uint64_t v77 = v283;
    sub_100CBD0EC((uint64_t)&v76[v302], v283, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    sub_100CBD0EC((uint64_t)&v76[v303], v287, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v79 = *(void *)v77;
    unint64_t v80 = *(void *)(v77 + 8);
    unint64_t v81 = v78;
    switch(v80 >> 62)
    {
      case 1uLL:
        if ((int)v79 != v79 >> 32) {
          goto LABEL_26;
        }
        goto LABEL_36;
      case 2uLL:
        if (*(void *)(v79 + 16) == *(void *)(v79 + 24)) {
          goto LABEL_36;
        }
LABEL_26:
        sub_1000361E0(*(void *)v77, *(void *)(v77 + 8));
        goto LABEL_27;
      case 3uLL:
        goto LABEL_22;
      default:
        if ((v80 & 0xFF000000000000) == 0)
        {
LABEL_22:
          sub_10001CFB8(*(void *)v77, *(void *)(v77 + 8));
LABEL_36:
          uint64_t v100 = *v313;
          uint64_t v101 = v278;
          (*v313)(v278, 1, 1, v21);
LABEL_37:
          uint64_t v102 = v280;
          Date.init()();
          sub_10001DAB4(v101, (uint64_t *)&unk_10163AC90);
          unint64_t v103 = v281;
          break;
        }
LABEL_27:
        id v82 = objc_allocWithZone((Class)NSKeyedUnarchiver);
        sub_1000361E0(v79, v80);
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        id v315 = 0;
        id v84 = [v82 initForReadingFromData:isa error:&v315];

        uint64_t v85 = v81;
        if (v84)
        {
          id v86 = v315;
          sub_10001CFB8(v79, v80);
          [v84 _enableStrictSecureDecodingMode];
          id v87 = [objc_allocWithZone((Class)CKRecord) initWithCoder:v84];
          if (v87)
          {
            uint64_t v88 = v87;
          }
          else
          {
            static os_log_type_t.error.getter();
            sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
            uint64_t v96 = (void *)static OS_os_log.default.getter();
            os_log(_:dso:log:_:_:)();

            uint64_t v88 = 0;
          }
        }
        else
        {
          id v89 = v315;
          uint64_t v90 = (void *)_convertNSErrorToError(_:)();

          swift_willThrow();
          sub_10001CFB8(v79, v80);
          LODWORD(v297) = static os_log_type_t.error.getter();
          sub_10000588C((uint64_t *)&unk_10163AD00);
          uint64_t v91 = swift_allocObject();
          *(_OWORD *)(v91 + 16) = v291;
          id v315 = v90;
          swift_errorRetain();
          sub_10000588C(&qword_101638D40);
          uint64_t v92 = String.init<A>(describing:)();
          uint64_t v94 = v93;
          *(void *)(v91 + 56) = &type metadata for String;
          *(void *)(v91 + 64) = sub_10000B4CC();
          *(void *)(v91 + 32) = v92;
          *(void *)(v91 + 40) = v94;
          sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
          long long v95 = (void *)static OS_os_log.default.getter();
          os_log(_:dso:log:_:_:)();
          swift_errorRelease();
          swift_bridgeObjectRelease();

          uint64_t v88 = 0;
          uint64_t v295 = 0;
        }
        uint64_t v21 = v299;
        sub_10001CFB8(v79, v80);
        if (!v88)
        {
          unint64_t v81 = v85;
          goto LABEL_36;
        }
        id v97 = [v88 modificationDate];

        unint64_t v81 = v85;
        if (v97)
        {
          unint64_t v98 = v273;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          unint64_t v99 = v98;
          uint64_t v100 = *v313;
          (*v313)((uint64_t)v98, 0, 1, v21);
        }
        else
        {
          uint64_t v100 = *v313;
          unint64_t v99 = v273;
          (*v313)((uint64_t)v273, 1, 1, v21);
        }
        unint64_t v103 = v281;
        uint64_t v121 = (uint64_t)v99;
        uint64_t v122 = v278;
        sub_10001D608(v121, v278, (uint64_t *)&unk_10163AC90);
        if ((*v294)(v122, 1, v21) == 1)
        {
          uint64_t v101 = v122;
          goto LABEL_37;
        }
        (*v289)(v284, v122, v21);
        uint64_t v102 = v280;
        break;
    }
    uint64_t v105 = *(void *)v287;
    unint64_t v106 = *(void *)(v287 + 8);
    unint64_t v107 = v104;
    switch(v106 >> 62)
    {
      case 1uLL:
        if ((int)v105 != v105 >> 32) {
          goto LABEL_44;
        }
        goto LABEL_58;
      case 2uLL:
        if (*(void *)(v105 + 16) == *(void *)(v105 + 24)) {
          goto LABEL_58;
        }
LABEL_44:
        sub_1000361E0(*(void *)v287, *(void *)(v287 + 8));
        goto LABEL_45;
      case 3uLL:
        goto LABEL_40;
      default:
        if ((v106 & 0xFF000000000000) == 0)
        {
LABEL_40:
          sub_10001CFB8(*(void *)v287, *(void *)(v287 + 8));
LABEL_58:
          uint64_t v59 = v279;
          v100(v102, 1, 1, v21);
LABEL_59:
          uint64_t v10 = v296;
          Date.init()();
          sub_10001DAB4(v102, (uint64_t *)&unk_10163AC90);
          goto LABEL_60;
        }
LABEL_45:
        v301 = v107;
        id v108 = objc_allocWithZone((Class)NSKeyedUnarchiver);
        sub_1000361E0(v105, v106);
        Class v109 = Data._bridgeToObjectiveC()().super.isa;
        id v315 = 0;
        id v110 = [v108 initForReadingFromData:v109 error:&v315];

        if (v110)
        {
          id v111 = v315;
          sub_10001CFB8(v105, v106);
          [v110 _enableStrictSecureDecodingMode];
          id v112 = [objc_allocWithZone((Class)CKRecord) initWithCoder:v110];
          if (v112)
          {
            uint64_t v113 = v112;
          }
          else
          {
            static os_log_type_t.error.getter();
            sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
            uint64_t v123 = (void *)static OS_os_log.default.getter();
            uint64_t v102 = v280;
            os_log(_:dso:log:_:_:)();

            uint64_t v113 = 0;
          }
        }
        else
        {
          id v114 = v315;
          long long v115 = (void *)_convertNSErrorToError(_:)();

          swift_willThrow();
          sub_10001CFB8(v105, v106);
          LODWORD(v295) = static os_log_type_t.error.getter();
          sub_10000588C((uint64_t *)&unk_10163AD00);
          uint64_t v116 = swift_allocObject();
          *(_OWORD *)(v116 + 16) = v291;
          id v315 = v115;
          swift_errorRetain();
          sub_10000588C(&qword_101638D40);
          uint64_t v117 = String.init<A>(describing:)();
          uint64_t v119 = v118;
          *(void *)(v116 + 56) = &type metadata for String;
          *(void *)(v116 + 64) = sub_10000B4CC();
          *(void *)(v116 + 32) = v117;
          *(void *)(v116 + 40) = v119;
          sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
          Swift::String v120 = (void *)static OS_os_log.default.getter();
          os_log(_:dso:log:_:_:)();
          swift_errorRelease();
          swift_bridgeObjectRelease();

          uint64_t v102 = v280;
          uint64_t v113 = 0;
          uint64_t v295 = 0;
        }
        unint64_t v107 = v301;
        sub_10001CFB8(v105, v106);
        uint64_t v21 = v299;
        if (!v113)
        {
          unint64_t v103 = v281;
          goto LABEL_58;
        }
        id v124 = [v113 modificationDate];

        uint64_t v59 = v279;
        if (v124)
        {
          uint64_t v125 = v274;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v126 = 0;
        }
        else
        {
          uint64_t v126 = 1;
          uint64_t v125 = v274;
        }
        unint64_t v103 = v281;
        v100((uint64_t)v125, v126, 1, v21);
        uint64_t v130 = (uint64_t)v125;
        uint64_t v102 = v280;
        sub_10001D608(v130, v280, (uint64_t *)&unk_10163AC90);
        if ((*v294)(v102, 1, v21) == 1) {
          goto LABEL_59;
        }
        (*v289)(v103, v102, v21);
        uint64_t v10 = v296;
LABEL_60:
        uint64_t v127 = v284;
        int v128 = static Date.> infix(_:_:)();
        uint64_t v129 = v307;
        v307((uint64_t)v103, v21);
        v129((uint64_t)v127, v21);
        sub_100CBD154(v287, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        sub_100CBD154(v283, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        if (((v308 ^ v128) & 1) == 0)
        {
          Swift::Int v62 = v305 + 1;
          v76 += v309;
          if (v51 == v305 + 1)
          {
            Swift::Int v62 = v51;
            goto LABEL_68;
          }
          continue;
        }
        Swift::Int v62 = v305;
LABEL_68:
        Swift::Int v61 = v282;
LABEL_69:
        uint64_t v131 = (uint64_t)v298;
        Swift::Int v132 = v275;
        if (v308)
        {
          if (v62 < v61) {
            goto LABEL_231;
          }
          if (v61 < v62)
          {
            uint64_t v133 = 0;
            uint64_t v134 = v309 * (v62 - 1);
            Swift::Int v135 = v62 * v309;
            Swift::Int v136 = v61;
            uint64_t v137 = v61 * v309;
            Swift::Int v276 = v51;
            do
            {
              if (v136 != v62 + v133 - 1)
              {
                unint64_t v139 = v290;
                if (!v290) {
                  goto LABEL_236;
                }
                uint64_t v140 = &v290[v137];
                uint64_t v308 = (uint64_t)&v290[v134];
                sub_100CBD1B4((uint64_t)&v290[v137], v277, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
                if (v137 < v134 || v140 >= &v139[v135])
                {
                  uint64_t v138 = v308;
                  swift_arrayInitWithTakeFrontToBack();
                }
                else
                {
                  uint64_t v138 = v308;
                  if (v137 != v134) {
                    swift_arrayInitWithTakeBackToFront();
                  }
                }
                sub_100CBD1B4(v277, v138, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
                Swift::Int v132 = v275;
                Swift::Int v51 = v276;
              }
              ++v136;
              --v133;
              v134 -= v309;
              v135 -= v309;
              v137 += v309;
            }
            while (v136 < v62 + v133);
            uint64_t v10 = v296;
            uint64_t v131 = (uint64_t)v298;
            uint64_t v59 = v279;
            Swift::Int v61 = v282;
          }
        }
LABEL_83:
        if (v62 < v51)
        {
          if (__OFSUB__(v62, v61)) {
            goto LABEL_229;
          }
          if (v62 - v61 >= v132)
          {
LABEL_144:
            Swift::Int v61 = v282;
          }
          else
          {
            Swift::Int v61 = v282;
            if (__OFADD__(v282, v132)) {
              goto LABEL_232;
            }
            if (v282 + v132 >= v51) {
              Swift::Int v141 = v51;
            }
            else {
              Swift::Int v141 = v282 + v132;
            }
            if (v141 < v282)
            {
LABEL_233:
              __break(1u);
LABEL_234:
              __break(1u);
LABEL_235:
              __break(1u);
LABEL_236:
              __break(1u);
LABEL_237:
              __break(1u);
            }
            if (v62 != v141)
            {
              uint64_t v142 = *(void **)(v286 + 72);
              uint64_t v143 = (void)v142 * (v62 - 1);
              v301 = v142;
              Swift::Int v144 = v62 * (void)v142;
              Swift::Int v276 = v141;
              while (1)
              {
                uint64_t v146 = 0;
                Swift::Int v147 = v282;
                Swift::Int v305 = v62;
                Swift::Int v302 = v144;
                uint64_t v303 = v143;
                while (2)
                {
                  Swift::Int v309 = v147;
                  uint64_t v148 = *v312;
                  uint64_t v308 = v144 + v146;
                  uint64_t v149 = (uint64_t)v148 + v144 + v146;
                  unint64_t v150 = v310;
                  sub_100CBD0EC(v149, (uint64_t)v310, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
                  v307 = (void (*)(uint64_t, uint64_t))(v143 + v146);
                  sub_100CBD0EC((uint64_t)v148 + v143 + v146, v314, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
                  uint64_t v152 = *v150;
                  unint64_t v153 = v150[1];
                  unint64_t v154 = v151;
                  switch(v153 >> 62)
                  {
                    case 1uLL:
                      if ((int)v152 != v152 >> 32) {
                        goto LABEL_103;
                      }
                      goto LABEL_113;
                    case 2uLL:
                      if (*(void *)(v152 + 16) == *(void *)(v152 + 24)) {
                        goto LABEL_113;
                      }
LABEL_103:
                      sub_1000361E0(v152, v153);
                      goto LABEL_104;
                    case 3uLL:
                      goto LABEL_99;
                    default:
                      if ((v153 & 0xFF000000000000) == 0)
                      {
LABEL_99:
                        sub_10001CFB8(v152, v153);
LABEL_113:
                        uint64_t v174 = *v313;
                        (*v313)(v131, 1, 1, v21);
LABEL_114:
                        Date.init()();
                        sub_10001DAB4(v131, (uint64_t *)&unk_10163AC90);
                        break;
                      }
LABEL_104:
                      id v156 = objc_allocWithZone((Class)NSKeyedUnarchiver);
                      sub_1000361E0(v152, v153);
                      Class v157 = Data._bridgeToObjectiveC()().super.isa;
                      id v315 = 0;
                      id v158 = [v156 initForReadingFromData:v157 error:&v315];

                      if (v158)
                      {
                        id v159 = v315;
                        sub_10001CFB8(v152, v153);
                        [v158 _enableStrictSecureDecodingMode];
                        id v160 = [objc_allocWithZone((Class)CKRecord) initWithCoder:v158];
                        if (v160)
                        {
                          unint64_t v161 = v160;
                        }
                        else
                        {
                          static os_log_type_t.error.getter();
                          sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
                          uint64_t v171 = (void *)static OS_os_log.default.getter();
                          os_log(_:dso:log:_:_:)();

                          unint64_t v161 = 0;
                        }
                      }
                      else
                      {
                        id v162 = v315;
                        v163 = (void *)_convertNSErrorToError(_:)();

                        swift_willThrow();
                        sub_10001CFB8(v152, v153);
                        static os_log_type_t.error.getter();
                        sub_10000588C((uint64_t *)&unk_10163AD00);
                        uint64_t v164 = swift_allocObject();
                        v297 = v155;
                        unint64_t v165 = v154;
                        uint64_t v166 = (void *)v164;
                        *(_OWORD *)(v164 + 16) = v291;
                        id v315 = v163;
                        swift_errorRetain();
                        sub_10000588C(&qword_101638D40);
                        uint64_t v167 = String.init<A>(describing:)();
                        uint64_t v169 = v168;
                        v166[7] = &type metadata for String;
                        v166[8] = sub_10000B4CC();
                        v166[4] = v167;
                        v166[5] = v169;
                        sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
                        uint64_t v170 = (void *)static OS_os_log.default.getter();
                        os_log(_:dso:log:_:_:)();
                        swift_errorRelease();
                        unint64_t v154 = v165;
                        uint64_t v155 = v297;
                        swift_bridgeObjectRelease();

                        unint64_t v161 = 0;
                        uint64_t v295 = 0;
                      }
                      uint64_t v10 = v296;
                      sub_10001CFB8(v152, v153);
                      uint64_t v172 = (uint64_t)v292;
                      uint64_t v21 = v299;
                      if (!v161)
                      {
                        uint64_t v131 = (uint64_t)v298;
                        goto LABEL_113;
                      }
                      id v173 = [v161 modificationDate];

                      if (v173)
                      {
                        static Date._unconditionallyBridgeFromObjectiveC(_:)();

                        uint64_t v174 = *v313;
                        (*v313)(v172, 0, 1, v21);
                      }
                      else
                      {
                        uint64_t v174 = *v313;
                        (*v313)(v172, 1, 1, v21);
                      }
                      uint64_t v194 = v172;
                      uint64_t v131 = (uint64_t)v298;
                      sub_10001D608(v194, (uint64_t)v298, (uint64_t *)&unk_10163AC90);
                      if ((*v294)(v131, 1, v21) == 1) {
                        goto LABEL_114;
                      }
                      (*v289)(v311, v131, v21);
                      break;
                  }
                  uint64_t v176 = *(void *)v314;
                  unint64_t v177 = *(void *)(v314 + 8);
                  uint64_t v178 = v175;
                  switch(v177 >> 62)
                  {
                    case 1uLL:
                      if ((int)v176 != v176 >> 32) {
                        goto LABEL_121;
                      }
                      goto LABEL_134;
                    case 2uLL:
                      if (*(void *)(v176 + 16) == *(void *)(v176 + 24)) {
                        goto LABEL_134;
                      }
LABEL_121:
                      sub_1000361E0(*(void *)v314, *(void *)(v314 + 8));
                      goto LABEL_122;
                    case 3uLL:
                      goto LABEL_117;
                    default:
                      if ((v177 & 0xFF000000000000) == 0)
                      {
LABEL_117:
                        sub_10001CFB8(*(void *)v314, *(void *)(v314 + 8));
                        goto LABEL_134;
                      }
LABEL_122:
                      v297 = v178;
                      id v180 = objc_allocWithZone((Class)NSKeyedUnarchiver);
                      sub_1000361E0(v176, v177);
                      Class v181 = Data._bridgeToObjectiveC()().super.isa;
                      id v315 = 0;
                      id v182 = [v180 initForReadingFromData:v181 error:&v315];

                      if (v182)
                      {
                        id v183 = v315;
                        sub_10001CFB8(v176, v177);
                        [v182 _enableStrictSecureDecodingMode];
                        id v184 = [objc_allocWithZone((Class)CKRecord) initWithCoder:v182];
                        if (v184)
                        {
                          uint64_t v185 = v184;
                        }
                        else
                        {
                          static os_log_type_t.error.getter();
                          sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
                          uint64_t v195 = (void *)static OS_os_log.default.getter();
                          os_log(_:dso:log:_:_:)();

                          uint64_t v185 = 0;
                        }
                      }
                      else
                      {
                        id v186 = v315;
                        unint64_t v187 = (void *)_convertNSErrorToError(_:)();

                        swift_willThrow();
                        sub_10001CFB8(v176, v177);
                        static os_log_type_t.error.getter();
                        sub_10000588C((uint64_t *)&unk_10163AD00);
                        uint64_t v188 = swift_allocObject();
                        v290 = v179;
                        uint64_t v189 = (void *)v188;
                        *(_OWORD *)(v188 + 16) = v291;
                        id v315 = v187;
                        swift_errorRetain();
                        sub_10000588C(&qword_101638D40);
                        uint64_t v190 = String.init<A>(describing:)();
                        uint64_t v192 = v191;
                        v189[7] = &type metadata for String;
                        v189[8] = sub_10000B4CC();
                        v189[4] = v190;
                        v189[5] = v192;
                        uint64_t v10 = v296;
                        sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
                        uint64_t v193 = (void *)static OS_os_log.default.getter();
                        os_log(_:dso:log:_:_:)();
                        swift_errorRelease();
                        unint64_t v179 = v290;
                        swift_bridgeObjectRelease();

                        uint64_t v185 = 0;
                        uint64_t v295 = 0;
                      }
                      sub_10001CFB8(v176, v177);
                      uint64_t v131 = (uint64_t)v298;
                      uint64_t v21 = v299;
                      if (!v185)
                      {
                        uint64_t v178 = v297;
LABEL_134:
                        v174((uint64_t)v10, 1, 1, v21);
                        uint64_t v199 = v300;
LABEL_135:
                        Date.init()();
                        uint64_t v200 = v10;
                        sub_10001DAB4((uint64_t)v10, (uint64_t *)&unk_10163AC90);
                        goto LABEL_136;
                      }
                      id v196 = [v185 modificationDate];

                      if (v196)
                      {
                        uint64_t v197 = (uint64_t)v288;
                        static Date._unconditionallyBridgeFromObjectiveC(_:)();

                        uint64_t v198 = 0;
                      }
                      else
                      {
                        uint64_t v198 = 1;
                        uint64_t v197 = (uint64_t)v288;
                      }
                      uint64_t v199 = v300;
                      v174(v197, v198, 1, v21);
                      sub_10001D608(v197, (uint64_t)v10, (uint64_t *)&unk_10163AC90);
                      if ((*v294)((uint64_t)v10, 1, v21) == 1)
                      {
                        uint64_t v178 = v297;
                        goto LABEL_135;
                      }
                      uint64_t v200 = v10;
                      (*v289)(v199, (uint64_t)v10, v21);
                      uint64_t v178 = v297;
LABEL_136:
                      uint64_t v201 = v311;
                      char v202 = static Date.> infix(_:_:)();
                      Swift::String v203 = *v304;
                      (*v304)((uint64_t)v199, v21);
                      v203((uint64_t)v201, v21);
                      sub_100CBD154(v314, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
                      sub_100CBD154((uint64_t)v310, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
                      if (v202)
                      {
                        uint64_t v204 = *v312;
                        Swift::Int v144 = v302;
                        uint64_t v143 = v303;
                        if (!*v312) {
                          goto LABEL_234;
                        }
                        uint64_t v205 = (uint64_t)v204 + v303 + v146;
                        sub_100CBD1B4((uint64_t)v204 + v302 + v146, v306, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
                        uint64_t v10 = v200;
                        swift_arrayInitWithTakeFrontToBack();
                        sub_100CBD1B4(v306, v205, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
                        v146 -= (uint64_t)v301;
                        Swift::Int v147 = v309 + 1;
                        Swift::Int v145 = v305;
                        if (v305 == v309 + 1) {
                          goto LABEL_94;
                        }
                        continue;
                      }
                      Swift::Int v145 = v305;
                      uint64_t v10 = v200;
                      Swift::Int v144 = v302;
                      uint64_t v143 = v303;
LABEL_94:
                      Swift::Int v62 = v145 + 1;
                      v143 += (uint64_t)v301;
                      v144 += (Swift::Int)v301;
                      if (v62 == v276)
                      {
                        Swift::Int v62 = v276;
                        uint64_t v59 = v279;
                        goto LABEL_144;
                      }
                      break;
                  }
                  break;
                }
              }
            }
          }
        }
        if (v62 < v61) {
          goto LABEL_224;
        }
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        Swift::Int v305 = v62;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          uint64_t v59 = sub_100B729CC(0, *((void *)v59 + 2) + 1, 1, v59);
        }
        unint64_t v208 = *((void *)v59 + 2);
        unint64_t v207 = *((void *)v59 + 3);
        unint64_t v60 = v208 + 1;
        if (v208 >= v207 >> 1) {
          uint64_t v59 = sub_100B729CC((char *)(v207 > 1), v208 + 1, 1, v59);
        }
        *((void *)v59 + 2) = v60;
        uint64_t v209 = v59 + 32;
        uint64_t v210 = &v59[16 * v208 + 32];
        Swift::Int v211 = v305;
        *(void *)uint64_t v210 = v282;
        *((void *)v210 + 1) = v211;
        if (v208)
        {
          while (2)
          {
            unint64_t v212 = v60 - 1;
            if (v60 >= 4)
            {
              uint64_t v217 = &v209[16 * v60];
              uint64_t v218 = *((void *)v217 - 8);
              uint64_t v219 = *((void *)v217 - 7);
              BOOL v223 = __OFSUB__(v219, v218);
              uint64_t v220 = v219 - v218;
              if (v223) {
                goto LABEL_213;
              }
              uint64_t v222 = *((void *)v217 - 6);
              uint64_t v221 = *((void *)v217 - 5);
              BOOL v223 = __OFSUB__(v221, v222);
              uint64_t v215 = v221 - v222;
              char v216 = v223;
              if (v223) {
                goto LABEL_214;
              }
              unint64_t v224 = v60 - 2;
              unint64_t v225 = &v209[16 * v60 - 32];
              uint64_t v227 = *(void *)v225;
              uint64_t v226 = *((void *)v225 + 1);
              BOOL v223 = __OFSUB__(v226, v227);
              uint64_t v228 = v226 - v227;
              if (v223) {
                goto LABEL_216;
              }
              BOOL v223 = __OFADD__(v215, v228);
              uint64_t v229 = v215 + v228;
              if (v223) {
                goto LABEL_219;
              }
              if (v229 >= v220)
              {
                v247 = &v209[16 * v212];
                uint64_t v249 = *(void *)v247;
                uint64_t v248 = *((void *)v247 + 1);
                BOOL v223 = __OFSUB__(v248, v249);
                uint64_t v250 = v248 - v249;
                if (v223) {
                  goto LABEL_223;
                }
                BOOL v240 = v215 < v250;
              }
              else
              {
LABEL_164:
                if (v216) {
                  goto LABEL_215;
                }
                unint64_t v224 = v60 - 2;
                uint64_t v230 = &v209[16 * v60 - 32];
                uint64_t v232 = *(void *)v230;
                uint64_t v231 = *((void *)v230 + 1);
                BOOL v233 = __OFSUB__(v231, v232);
                uint64_t v234 = v231 - v232;
                char v235 = v233;
                if (v233) {
                  goto LABEL_218;
                }
                uint64_t v236 = &v209[16 * v212];
                uint64_t v238 = *(void *)v236;
                uint64_t v237 = *((void *)v236 + 1);
                BOOL v223 = __OFSUB__(v237, v238);
                uint64_t v239 = v237 - v238;
                if (v223) {
                  goto LABEL_221;
                }
                if (__OFADD__(v234, v239)) {
                  goto LABEL_222;
                }
                if (v234 + v239 < v215) {
                  goto LABEL_176;
                }
                BOOL v240 = v215 < v239;
              }
              if (v240) {
                unint64_t v212 = v224;
              }
            }
            else
            {
              if (v60 == 3)
              {
                uint64_t v214 = *((void *)v59 + 4);
                uint64_t v213 = *((void *)v59 + 5);
                BOOL v223 = __OFSUB__(v213, v214);
                uint64_t v215 = v213 - v214;
                char v216 = v223;
                goto LABEL_164;
              }
              uint64_t v241 = *((void *)v59 + 4);
              uint64_t v242 = *((void *)v59 + 5);
              BOOL v223 = __OFSUB__(v242, v241);
              uint64_t v234 = v242 - v241;
              char v235 = v223;
LABEL_176:
              if (v235) {
                goto LABEL_217;
              }
              v243 = &v209[16 * v212];
              uint64_t v245 = *(void *)v243;
              uint64_t v244 = *((void *)v243 + 1);
              BOOL v223 = __OFSUB__(v244, v245);
              uint64_t v246 = v244 - v245;
              if (v223) {
                goto LABEL_220;
              }
              if (v246 < v234) {
                goto LABEL_15;
              }
            }
            unint64_t v251 = v212 - 1;
            if (v212 - 1 >= v60)
            {
              __break(1u);
LABEL_210:
              __break(1u);
LABEL_211:
              __break(1u);
LABEL_212:
              __break(1u);
LABEL_213:
              __break(1u);
LABEL_214:
              __break(1u);
LABEL_215:
              __break(1u);
LABEL_216:
              __break(1u);
LABEL_217:
              __break(1u);
LABEL_218:
              __break(1u);
LABEL_219:
              __break(1u);
LABEL_220:
              __break(1u);
LABEL_221:
              __break(1u);
LABEL_222:
              __break(1u);
LABEL_223:
              __break(1u);
LABEL_224:
              __break(1u);
LABEL_225:
              __break(1u);
LABEL_226:
              __break(1u);
LABEL_227:
              __break(1u);
LABEL_228:
              __break(1u);
LABEL_229:
              __break(1u);
LABEL_230:
              __break(1u);
LABEL_231:
              __break(1u);
LABEL_232:
              __break(1u);
              goto LABEL_233;
            }
            if (!*v312) {
              goto LABEL_235;
            }
            v252 = v59;
            v253 = &v209[16 * v251];
            uint64_t v254 = *(void *)v253;
            v255 = &v209[16 * v212];
            uint64_t v256 = *((void *)v255 + 1);
            uint64_t v257 = v295;
            sub_100CB751C((char *)*v312 + *(void *)(v286 + 72) * *(void *)v253, (unint64_t)*v312 + *(void *)(v286 + 72) * *(void *)v255, (unint64_t)*v312 + *(void *)(v286 + 72) * v256, v285);
            uint64_t v295 = v257;
            if (v257)
            {
LABEL_192:
              swift_bridgeObjectRelease();
              v270[2] = 0;
              return swift_bridgeObjectRelease();
            }
            if (v256 < v254) {
              goto LABEL_210;
            }
            if (v212 > *((void *)v252 + 2)) {
              goto LABEL_211;
            }
            *(void *)v253 = v254;
            *(void *)&v209[16 * v251 + 8] = v256;
            unint64_t v258 = *((void *)v252 + 2);
            if (v212 >= v258) {
              goto LABEL_212;
            }
            uint64_t v59 = v252;
            unint64_t v60 = v258 - 1;
            memmove(&v209[16 * v212], v255 + 16, 16 * (v258 - 1 - v212));
            *((void *)v252 + 2) = v258 - 1;
            BOOL v240 = v258 > 2;
            uint64_t v10 = v296;
            if (!v240) {
              goto LABEL_15;
            }
            continue;
          }
        }
        unint64_t v60 = 1;
LABEL_15:
        Swift::Int v51 = (Swift::Int)v312[1];
        Swift::Int v58 = v305;
        if (v305 < v51) {
          goto LABEL_16;
        }
        uint64_t v57 = v270;
LABEL_195:
        uint64_t v259 = v295;
        uint64_t v260 = v286;
        if (v60 >= 2)
        {
          v261 = (char *)*v312;
          v270 = v57;
          do
          {
            unint64_t v262 = v60 - 2;
            if (v60 < 2) {
              goto LABEL_225;
            }
            if (!v261) {
              goto LABEL_237;
            }
            uint64_t v263 = *(void *)&v59[16 * v262 + 32];
            uint64_t v264 = *(void *)&v59[16 * v60 + 24];
            sub_100CB751C(&v261[*(void *)(v260 + 72) * v263], (unint64_t)&v261[*(void *)(v260 + 72) * *(void *)&v59[16 * v60 + 16]], (unint64_t)&v261[*(void *)(v260 + 72) * v264], v285);
            if (v259) {
              goto LABEL_192;
            }
            if (v264 < v263) {
              goto LABEL_226;
            }
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v59 = sub_100B73584((uint64_t)v59);
            }
            if (v262 >= *((void *)v59 + 2)) {
              goto LABEL_227;
            }
            v265 = &v59[16 * v262 + 32];
            *(void *)v265 = v263;
            *((void *)v265 + 1) = v264;
            unint64_t v266 = *((void *)v59 + 2);
            if (v60 > v266) {
              goto LABEL_228;
            }
            memmove(&v59[16 * v60 + 16], &v59[16 * v60 + 32], 16 * (v266 - v60));
            *((void *)v59 + 2) = v266 - 1;
            unint64_t v60 = v266 - 1;
            uint64_t v57 = v270;
          }
          while (v266 > 2);
        }
        swift_bridgeObjectRelease();
        v57[2] = 0;
        return swift_bridgeObjectRelease();
    }
  }
}

Swift::Int sub_100CB5EA8(void *a1)
{
  uint64_t v2 = a1;
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_137;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v78 = 0;
      uint64_t v79 = *v2;
      for (uint64_t i = 1; i != v3; ++i)
      {
        unsigned int v81 = *(unsigned __int8 *)(v79 + i);
        uint64_t v82 = v78;
        do
        {
          unsigned int v83 = *(unsigned __int8 *)(v79 + v82);
          if (v81 >= v83) {
            break;
          }
          if (!v79) {
            goto LABEL_141;
          }
          *(unsigned char *)(v79 + v82 + 1) = v83;
          *(unsigned char *)(v79 + v82--) = v81;
        }
        while (v82 != -1);
        ++v78;
      }
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_146;
  }
  Swift::Int v94 = result;
  Swift::Int v95 = v3;
  if (v3 < 2)
  {
    uint64_t v8 = _swiftEmptyArrayStorage;
    __dst = (unsigned __int8 *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v12 = _swiftEmptyArrayStorage[2];
      uint64_t v11 = (char *)_swiftEmptyArrayStorage;
LABEL_103:
      uint64_t v93 = v8;
      if (v12 >= 2)
      {
        uint64_t v84 = *v2;
        do
        {
          unint64_t v85 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_132;
          }
          if (!v84) {
            goto LABEL_145;
          }
          id v86 = v11;
          id v87 = v11 + 32;
          uint64_t v88 = *(void *)&v11[16 * v85 + 32];
          uint64_t v89 = *(void *)&v11[16 * v12 + 24];
          sub_100CB7D10((unsigned __int8 *)(v84 + v88), (unsigned __int8 *)(v84 + *(void *)&v87[16 * v12 - 16]), v84 + v89, __dst);
          if (v1) {
            break;
          }
          if (v89 < v88) {
            goto LABEL_133;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            id v86 = sub_100B73584((uint64_t)v86);
          }
          if (v85 >= *((void *)v86 + 2)) {
            goto LABEL_134;
          }
          uint64_t v90 = &v86[16 * v85 + 32];
          *(void *)uint64_t v90 = v88;
          *((void *)v90 + 1) = v89;
          unint64_t v91 = *((void *)v86 + 2);
          if (v12 > v91) {
            goto LABEL_135;
          }
          memmove(&v86[16 * v12 + 16], &v86[16 * v12 + 32], 16 * (v91 - v12));
          uint64_t v11 = v86;
          *((void *)v86 + 2) = v91 - 1;
          unint64_t v12 = v91 - 1;
        }
        while (v91 > 2);
      }
LABEL_114:
      swift_bridgeObjectRelease();
      v93[2] = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v93 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + 16) = v6;
    Swift::Int v3 = v95;
    uint64_t v93 = (void *)v7;
    __dst = (unsigned __int8 *)(v7 + 32);
  }
  Swift::Int v9 = 0;
  uint64_t v92 = v2;
  uint64_t v10 = *v2;
  uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  uint64_t v96 = *v2;
  while (1)
  {
    Swift::Int v13 = v9++;
    if (v9 < v3)
    {
      unsigned int v14 = *(unsigned __int8 *)(v10 + v9);
      unsigned int v15 = *(unsigned __int8 *)(v10 + v13);
      Swift::Int v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        unsigned int v16 = v14;
        while (1)
        {
          unsigned int v17 = *(unsigned __int8 *)(v10 + v9);
          if (v14 < v15 == v17 >= v16) {
            break;
          }
          ++v9;
          unsigned int v16 = v17;
          if (v3 == v9)
          {
            Swift::Int v9 = v3;
            break;
          }
        }
      }
      if (v14 < v15)
      {
        if (v9 < v13) {
          goto LABEL_138;
        }
        if (v13 < v9)
        {
          Swift::Int v18 = v9 - 1;
          Swift::Int v19 = v13;
          do
          {
            if (v19 != v18)
            {
              if (!v10) {
                goto LABEL_144;
              }
              char v20 = *(unsigned char *)(v10 + v19);
              *(unsigned char *)(v10 + v19) = *(unsigned char *)(v10 + v18);
              *(unsigned char *)(v10 + v18) = v20;
            }
            BOOL v59 = ++v19 < v18--;
          }
          while (v59);
        }
      }
    }
    if (v9 >= v3) {
      goto LABEL_47;
    }
    if (__OFSUB__(v9, v13)) {
      goto LABEL_136;
    }
    if (v9 - v13 >= v94) {
      goto LABEL_47;
    }
    Swift::Int v21 = v13 + v94;
    if (__OFADD__(v13, v94)) {
      goto LABEL_139;
    }
    if (v21 >= v3) {
      Swift::Int v21 = v3;
    }
    if (v21 < v13) {
      break;
    }
    if (v9 != v21)
    {
      uint64_t v22 = (unsigned char *)(v10 + v9);
      do
      {
        unsigned int v23 = *(unsigned __int8 *)(v10 + v9);
        Swift::Int v24 = v13;
        Swift::Int v25 = v22;
        do
        {
          unsigned int v26 = *(v25 - 1);
          if (v23 >= v26) {
            break;
          }
          if (!v10) {
            goto LABEL_142;
          }
          *Swift::Int v25 = v26;
          *--Swift::Int v25 = v23;
          ++v24;
        }
        while (v9 != v24);
        ++v9;
        ++v22;
      }
      while (v9 != v21);
      Swift::Int v9 = v21;
    }
LABEL_47:
    if (v9 < v13) {
      goto LABEL_131;
    }
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v11 = sub_100B729CC(0, *((void *)v11 + 2) + 1, 1, v11);
    }
    unint64_t v28 = *((void *)v11 + 2);
    unint64_t v27 = *((void *)v11 + 3);
    unint64_t v12 = v28 + 1;
    uint64_t v10 = v96;
    if (v28 >= v27 >> 1)
    {
      uint64_t v77 = sub_100B729CC((char *)(v27 > 1), v28 + 1, 1, v11);
      uint64_t v10 = v96;
      uint64_t v11 = v77;
    }
    *((void *)v11 + 2) = v12;
    uint64_t v29 = v11 + 32;
    uint64_t v30 = &v11[16 * v28 + 32];
    *(void *)uint64_t v30 = v13;
    *((void *)v30 + 1) = v9;
    if (v28)
    {
      while (1)
      {
        unint64_t v31 = v12 - 1;
        if (v12 >= 4)
        {
          uint64_t v36 = &v29[16 * v12];
          uint64_t v37 = *((void *)v36 - 8);
          uint64_t v38 = *((void *)v36 - 7);
          BOOL v42 = __OFSUB__(v38, v37);
          uint64_t v39 = v38 - v37;
          if (v42) {
            goto LABEL_120;
          }
          uint64_t v41 = *((void *)v36 - 6);
          uint64_t v40 = *((void *)v36 - 5);
          BOOL v42 = __OFSUB__(v40, v41);
          uint64_t v34 = v40 - v41;
          char v35 = v42;
          if (v42) {
            goto LABEL_121;
          }
          unint64_t v43 = v12 - 2;
          uint64_t v44 = &v29[16 * v12 - 32];
          uint64_t v46 = *(void *)v44;
          uint64_t v45 = *((void *)v44 + 1);
          BOOL v42 = __OFSUB__(v45, v46);
          uint64_t v47 = v45 - v46;
          if (v42) {
            goto LABEL_123;
          }
          BOOL v42 = __OFADD__(v34, v47);
          uint64_t v48 = v34 + v47;
          if (v42) {
            goto LABEL_126;
          }
          if (v48 >= v39)
          {
            unint64_t v66 = &v29[16 * v31];
            uint64_t v68 = *(void *)v66;
            uint64_t v67 = *((void *)v66 + 1);
            BOOL v42 = __OFSUB__(v67, v68);
            uint64_t v69 = v67 - v68;
            if (v42) {
              goto LABEL_130;
            }
            BOOL v59 = v34 < v69;
            goto LABEL_84;
          }
        }
        else
        {
          if (v12 != 3)
          {
            uint64_t v60 = *((void *)v11 + 4);
            uint64_t v61 = *((void *)v11 + 5);
            BOOL v42 = __OFSUB__(v61, v60);
            uint64_t v53 = v61 - v60;
            char v54 = v42;
            goto LABEL_78;
          }
          uint64_t v33 = *((void *)v11 + 4);
          uint64_t v32 = *((void *)v11 + 5);
          BOOL v42 = __OFSUB__(v32, v33);
          uint64_t v34 = v32 - v33;
          char v35 = v42;
        }
        if (v35) {
          goto LABEL_122;
        }
        unint64_t v43 = v12 - 2;
        uint64_t v49 = &v29[16 * v12 - 32];
        uint64_t v51 = *(void *)v49;
        uint64_t v50 = *((void *)v49 + 1);
        BOOL v52 = __OFSUB__(v50, v51);
        uint64_t v53 = v50 - v51;
        char v54 = v52;
        if (v52) {
          goto LABEL_125;
        }
        uint64_t v55 = &v29[16 * v31];
        uint64_t v57 = *(void *)v55;
        uint64_t v56 = *((void *)v55 + 1);
        BOOL v42 = __OFSUB__(v56, v57);
        uint64_t v58 = v56 - v57;
        if (v42) {
          goto LABEL_128;
        }
        if (__OFADD__(v53, v58)) {
          goto LABEL_129;
        }
        if (v53 + v58 >= v34)
        {
          BOOL v59 = v34 < v58;
LABEL_84:
          if (v59) {
            unint64_t v31 = v43;
          }
          goto LABEL_86;
        }
LABEL_78:
        if (v54) {
          goto LABEL_124;
        }
        Swift::Int v62 = &v29[16 * v31];
        uint64_t v64 = *(void *)v62;
        uint64_t v63 = *((void *)v62 + 1);
        BOOL v42 = __OFSUB__(v63, v64);
        uint64_t v65 = v63 - v64;
        if (v42) {
          goto LABEL_127;
        }
        if (v65 < v53) {
          goto LABEL_15;
        }
LABEL_86:
        unint64_t v70 = v31 - 1;
        if (v31 - 1 >= v12)
        {
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
          goto LABEL_140;
        }
        if (!v10) {
          goto LABEL_143;
        }
        uint64_t v71 = &v29[16 * v70];
        uint64_t v72 = *(void *)v71;
        uint64_t v73 = v29;
        uint64_t v74 = &v29[16 * v31];
        uint64_t v75 = *((void *)v74 + 1);
        sub_100CB7D10((unsigned __int8 *)(v10 + *(void *)v71), (unsigned __int8 *)(v10 + *(void *)v74), v10 + v75, __dst);
        if (v1) {
          goto LABEL_114;
        }
        if (v75 < v72) {
          goto LABEL_117;
        }
        if (v31 > *((void *)v11 + 2)) {
          goto LABEL_118;
        }
        *(void *)uint64_t v71 = v72;
        *(void *)&v73[16 * v70 + 8] = v75;
        unint64_t v76 = *((void *)v11 + 2);
        if (v31 >= v76) {
          goto LABEL_119;
        }
        unint64_t v12 = v76 - 1;
        memmove(v74, v74 + 16, 16 * (v76 - 1 - v31));
        uint64_t v29 = v73;
        *((void *)v11 + 2) = v76 - 1;
        uint64_t v10 = v96;
        if (v76 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v12 = 1;
LABEL_15:
    Swift::Int v3 = v95;
    if (v9 >= v95)
    {
      uint64_t v2 = v92;
      uint64_t v8 = v93;
      goto LABEL_103;
    }
  }
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100CB6524(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v96 = a1;
  uint64_t v7 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v10 = (char *)&v94 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  Swift::Int v13 = (char *)&v94 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  unsigned int v16 = (char *)&v94 - v15;
  __chkstk_darwin(v14);
  Class v109 = (char *)&v94 - v17;
  uint64_t v113 = type metadata accessor for Date();
  uint64_t v18 = *(void *)(v113 - 8);
  uint64_t v19 = __chkstk_darwin(v113);
  Swift::Int v21 = (char *)&v94 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v121 = (char *)&v94 - v22;
  uint64_t v102 = type metadata accessor for OwnerSharingCircle();
  uint64_t v23 = __chkstk_darwin(v102);
  uint64_t v114 = (uint64_t)&v94 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __chkstk_darwin(v23);
  unint64_t v27 = (char *)&v94 - v26;
  uint64_t result = __chkstk_darwin(v25);
  Swift::String v120 = (uint64_t *)((char *)&v94 - v30);
  uint64_t v95 = a2;
  if (a3 != a2)
  {
    unint64_t v98 = v13;
    unint64_t v99 = v10;
    uint64_t v119 = (void **)(v18 + 56);
    unint64_t v103 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
    uint64_t v31 = *(void *)(v29 + 72);
    id v97 = (void (**)(char *, uint64_t, uint64_t))(v18 + 32);
    unint64_t v106 = (void (**)(char *, uint64_t))(v18 + 8);
    uint64_t v110 = v31;
    uint64_t v122 = v31 * a3;
    uint64_t v123 = v31 * (a3 - 1);
    long long v100 = xmmword_101342130;
    uint64_t v104 = a4;
    uint64_t v32 = v113;
    id v112 = v27;
    unint64_t v107 = v21;
    id v108 = v16;
    while (1)
    {
      uint64_t v34 = 0;
      uint64_t v35 = v96;
      uint64_t v111 = a3;
      while (2)
      {
        uint64_t v115 = v35;
        uint64_t v36 = *a4;
        uint64_t v117 = v122 + v34;
        uint64_t v37 = v120;
        sub_100CBD0EC(v122 + v34 + v36, (uint64_t)v120, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        uint64_t v116 = v123 + v34;
        sub_100CBD0EC(v123 + v34 + v36, (uint64_t)v27, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        uint64_t v38 = *v37;
        unint64_t v39 = v37[1];
        switch(v39 >> 62)
        {
          case 1uLL:
            if ((int)v38 == v38 >> 32) {
              goto LABEL_17;
            }
            goto LABEL_12;
          case 2uLL:
            if (*(void *)(v38 + 16) == *(void *)(v38 + 24)) {
              goto LABEL_17;
            }
LABEL_12:
            sub_1000361E0(v38, v39);
            goto LABEL_13;
          case 3uLL:
            goto LABEL_10;
          default:
            if ((v39 & 0xFF000000000000) == 0)
            {
LABEL_10:
              sub_10001CFB8(v38, v39);
LABEL_17:
              uint64_t v47 = (uint64_t)v109;
LABEL_24:
              uint64_t v61 = *v119;
              ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))*v119)(v47, 1, 1, v32);
LABEL_25:
              Date.init()();
              sub_10001DAB4(v47, (uint64_t *)&unk_10163AC90);
              break;
            }
LABEL_13:
            id v41 = objc_allocWithZone((Class)NSKeyedUnarchiver);
            sub_1000361E0(v38, v39);
            Class isa = Data._bridgeToObjectiveC()().super.isa;
            id v124 = 0;
            id v43 = [v41 initForReadingFromData:isa error:&v124];

            if (v43)
            {
              id v44 = v124;
              sub_10001CFB8(v38, v39);
              [v43 _enableStrictSecureDecodingMode];
              id v45 = [objc_allocWithZone((Class)CKRecord) initWithCoder:v43];
              if (v45)
              {
                uint64_t v46 = v45;
              }
              else
              {
                static os_log_type_t.error.getter();
                sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
                uint64_t v55 = (void *)static OS_os_log.default.getter();
                os_log(_:dso:log:_:_:)();

                uint64_t v46 = 0;
              }
            }
            else
            {
              id v48 = v124;
              uint64_t v49 = (void *)_convertNSErrorToError(_:)();

              swift_willThrow();
              sub_10001CFB8(v38, v39);
              static os_log_type_t.error.getter();
              sub_10000588C((uint64_t *)&unk_10163AD00);
              uint64_t v50 = swift_allocObject();
              *(_OWORD *)(v50 + 16) = v100;
              id v124 = v49;
              swift_errorRetain();
              sub_10000588C(&qword_101638D40);
              uint64_t v51 = String.init<A>(describing:)();
              uint64_t v53 = v52;
              *(void *)(v50 + 56) = &type metadata for String;
              *(void *)(v50 + 64) = sub_10000B4CC();
              *(void *)(v50 + 32) = v51;
              *(void *)(v50 + 40) = v53;
              sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
              char v54 = (void *)static OS_os_log.default.getter();
              os_log(_:dso:log:_:_:)();
              swift_errorRelease();
              unint64_t v27 = v112;
              swift_bridgeObjectRelease();

              uint64_t v46 = 0;
              uint64_t v101 = 0;
            }
            sub_10001CFB8(v38, v39);
            if (!v46)
            {
              a4 = v104;
              uint64_t v47 = (uint64_t)v109;
              uint64_t v32 = v113;
              goto LABEL_24;
            }
            id v56 = [v46 modificationDate];

            a4 = v104;
            uint64_t v47 = (uint64_t)v109;
            if (v56)
            {
              uint64_t v57 = (uint64_t)v98;
              static Date._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v58 = (void (*)(void, void, void, void))*v119;
              uint64_t v59 = v57;
              uint64_t v60 = 0;
            }
            else
            {
              uint64_t v58 = (void (*)(void, void, void, void))*v119;
              uint64_t v57 = (uint64_t)v98;
              uint64_t v59 = (uint64_t)v98;
              uint64_t v60 = 1;
            }
            uint64_t v32 = v113;
            uint64_t v84 = v58;
            v58(v59, v60, 1, v113);
            sub_10001D608(v57, v47, (uint64_t *)&unk_10163AC90);
            if ((*v103)(v47, 1, v32) == 1)
            {
              uint64_t v61 = v84;
              goto LABEL_25;
            }
            (*v97)(v121, v47, v32);
            uint64_t v61 = v84;
            break;
        }
        uint64_t v63 = *(void *)v27;
        unint64_t v64 = *((void *)v27 + 1);
        uint64_t v65 = v62;
        switch(v64 >> 62)
        {
          case 1uLL:
            if ((int)v63 == v63 >> 32) {
              goto LABEL_35;
            }
            goto LABEL_30;
          case 2uLL:
            if (*(void *)(v63 + 16) == *(void *)(v63 + 24))
            {
LABEL_35:
              unint64_t v66 = a4;
LABEL_36:
              uint64_t v75 = v107;
              uint64_t v74 = (uint64_t)v108;
              goto LABEL_47;
            }
LABEL_30:
            sub_1000361E0(*(void *)v27, *((void *)v27 + 1));
LABEL_31:
            uint64_t v105 = v65;
            uint64_t v118 = v61;
            unint64_t v66 = a4;
            id v68 = objc_allocWithZone((Class)NSKeyedUnarchiver);
            sub_1000361E0(v63, v64);
            Class v69 = Data._bridgeToObjectiveC()().super.isa;
            id v124 = 0;
            id v70 = [v68 initForReadingFromData:v69 error:&v124];

            if (v70)
            {
              id v71 = v124;
              sub_10001CFB8(v63, v64);
              [v70 _enableStrictSecureDecodingMode];
              id v72 = [objc_allocWithZone((Class)CKRecord) initWithCoder:v70];
              if (v72)
              {
                uint64_t v73 = v72;
              }
              else
              {
                static os_log_type_t.error.getter();
                sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
                unint64_t v85 = (void *)static OS_os_log.default.getter();
                os_log(_:dso:log:_:_:)();

                uint64_t v73 = 0;
              }
            }
            else
            {
              id v76 = v124;
              uint64_t v77 = (void *)_convertNSErrorToError(_:)();

              swift_willThrow();
              sub_10001CFB8(v63, v64);
              static os_log_type_t.error.getter();
              sub_10000588C((uint64_t *)&unk_10163AD00);
              uint64_t v78 = swift_allocObject();
              *(_OWORD *)(v78 + 16) = v100;
              id v124 = v77;
              swift_errorRetain();
              sub_10000588C(&qword_101638D40);
              uint64_t v79 = String.init<A>(describing:)();
              unint64_t v80 = v67;
              uint64_t v82 = v81;
              *(void *)(v78 + 56) = &type metadata for String;
              *(void *)(v78 + 64) = sub_10000B4CC();
              *(void *)(v78 + 32) = v79;
              *(void *)(v78 + 40) = v82;
              uint64_t v67 = v80;
              sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
              unsigned int v83 = (void *)static OS_os_log.default.getter();
              os_log(_:dso:log:_:_:)();
              swift_errorRelease();
              unint64_t v66 = v104;
              swift_bridgeObjectRelease();

              uint64_t v73 = 0;
              uint64_t v101 = 0;
            }
            sub_10001CFB8(v63, v64);
            uint64_t v61 = v118;
            if (!v73)
            {
              uint64_t v75 = v107;
              uint64_t v74 = (uint64_t)v108;
              uint64_t v32 = v113;
              uint64_t v65 = v105;
LABEL_47:
              ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v61)(v74, 1, 1, v32);
LABEL_48:
              Date.init()();
              sub_10001DAB4(v74, (uint64_t *)&unk_10163AC90);
              goto LABEL_49;
            }
            id v86 = [v73 modificationDate];

            uint64_t v75 = v107;
            uint64_t v74 = (uint64_t)v108;
            if (v86)
            {
              uint64_t v87 = (uint64_t)v99;
              static Date._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v88 = 0;
            }
            else
            {
              uint64_t v88 = 1;
              uint64_t v87 = (uint64_t)v99;
            }
            uint64_t v65 = v105;
            uint64_t v32 = v113;
            ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v118)(v87, v88, 1, v113);
            sub_10001D608(v87, v74, (uint64_t *)&unk_10163AC90);
            if ((*v103)(v74, 1, v32) == 1) {
              goto LABEL_48;
            }
            (*v97)(v75, v74, v32);
LABEL_49:
            uint64_t v89 = v121;
            char v90 = static Date.> infix(_:_:)();
            unint64_t v91 = *v106;
            (*v106)(v75, v32);
            v91(v89, v32);
            unint64_t v27 = v112;
            sub_100CBD154((uint64_t)v112, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
            uint64_t result = sub_100CBD154((uint64_t)v120, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
            if (v90)
            {
              uint64_t v92 = *v66;
              if (!*v66) {
                __break(1u);
              }
              a4 = v66;
              uint64_t v93 = v92 + v123 + v34;
              sub_100CBD1B4(v92 + v122 + v34, v114, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
              swift_arrayInitWithTakeFrontToBack();
              uint64_t result = sub_100CBD1B4(v114, v93, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
              uint64_t v33 = v111;
              v34 -= v110;
              uint64_t v35 = v115 + 1;
              uint64_t v32 = v113;
              if (v111 == v115 + 1) {
                goto LABEL_5;
              }
              continue;
            }
            a4 = v66;
            uint64_t v33 = v111;
LABEL_5:
            a3 = v33 + 1;
            v123 += v110;
            v122 += v110;
            if (a3 == v95) {
              return result;
            }
            break;
          case 3uLL:
            goto LABEL_28;
          default:
            if ((v64 & 0xFF000000000000) != 0) {
              goto LABEL_31;
            }
LABEL_28:
            unint64_t v66 = a4;
            sub_10001CFB8(*(void *)v27, *((void *)v27 + 1));
            goto LABEL_36;
        }
        break;
      }
    }
  }
  return result;
}

uint64_t sub_100CB724C(char *__src, char *a2, unint64_t a3, char *__dst, void (*a5)(void, void, void))
{
  uint64_t v5 = __dst;
  uint64_t v7 = a2;
  uint64_t v8 = __src;
  int64_t v9 = a2 - __src;
  int64_t v10 = (a2 - __src) / 24;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = (uint64_t)(a3 - (void)a2) / 24;
  uint64_t v29 = __src;
  unint64_t v28 = __dst;
  if (v10 >= v12)
  {
    if (v11 >= -23)
    {
      if (__dst != a2 || &a2[24 * v12] <= __dst)
      {
        uint64_t v18 = a5;
        memmove(__dst, a2, 24 * v12);
        a5 = v18;
      }
      uint64_t v19 = &v5[24 * v12];
      unint64_t v27 = v19;
      uint64_t v29 = v7;
      if (v8 < v7 && v11 >= 24)
      {
        unint64_t v20 = a3 - 24;
        Swift::Int v21 = v7;
        while (1)
        {
          uint64_t v22 = (char *)(v20 + 24);
          unint64_t v23 = *((void *)v21 - 3);
          v21 -= 24;
          if (*((void *)v19 - 3) >= v23)
          {
            unint64_t v27 = v19 - 24;
            if (v22 < v19 || v20 >= (unint64_t)v19 || v22 != v19)
            {
              long long v25 = *(_OWORD *)(v19 - 24);
              *(void *)(v20 + 16) = *((void *)v19 - 1);
              *(_OWORD *)unint64_t v20 = v25;
            }
            Swift::Int v21 = v7;
            v19 -= 24;
            if (v7 <= v8) {
              goto LABEL_38;
            }
          }
          else
          {
            if (v22 != v7 || v20 >= (unint64_t)v7)
            {
              long long v24 = *(_OWORD *)v21;
              *(void *)(v20 + 16) = *((void *)v21 + 2);
              *(_OWORD *)unint64_t v20 = v24;
            }
            uint64_t v29 = v21;
            if (v21 <= v8) {
              goto LABEL_38;
            }
          }
          v20 -= 24;
          uint64_t v7 = v21;
          if (v19 <= v5) {
            goto LABEL_38;
          }
        }
      }
      goto LABEL_38;
    }
  }
  else if (v9 >= -23)
  {
    if (__dst != __src || &__src[24 * v10] <= __dst)
    {
      Swift::Int v13 = a5;
      memmove(__dst, __src, 24 * v10);
      a5 = v13;
    }
    uint64_t v14 = &v5[24 * v10];
    unint64_t v27 = v14;
    if ((unint64_t)v7 < a3 && v9 >= 24)
    {
      do
      {
        if (*(void *)v7 >= *(void *)v5)
        {
          if (v8 != v5)
          {
            long long v17 = *(_OWORD *)v5;
            *((void *)v8 + 2) = *((void *)v5 + 2);
            *(_OWORD *)uint64_t v8 = v17;
          }
          v5 += 24;
          unint64_t v28 = v5;
          uint64_t v15 = v7;
        }
        else
        {
          uint64_t v15 = v7 + 24;
          if (v8 < v7 || v8 >= v15 || v8 != v7)
          {
            long long v16 = *(_OWORD *)v7;
            *((void *)v8 + 2) = *((void *)v7 + 2);
            *(_OWORD *)uint64_t v8 = v16;
          }
        }
        v8 += 24;
        if (v5 >= v14) {
          break;
        }
        uint64_t v7 = v15;
      }
      while ((unint64_t)v15 < a3);
      uint64_t v29 = v8;
    }
LABEL_38:
    a5(&v29, &v28, &v27);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100CB751C(char *a1, unint64_t a2, unint64_t a3, char *a4)
{
  uint64_t v5 = v4;
  uint64_t v75 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v75 - 8);
  uint64_t v11 = __chkstk_darwin(v75);
  uint64_t v68 = (uint64_t)&v63 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  unint64_t v74 = (unint64_t)&v63 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v69 = (uint64_t)&v63 - v16;
  __chkstk_darwin(v15);
  uint64_t v73 = (uint64_t)&v63 - v17;
  uint64_t v70 = type metadata accessor for OwnerSharingCircle();
  uint64_t v18 = __chkstk_darwin(v70);
  uint64_t v19 = __chkstk_darwin(v18);
  id v72 = (uint64_t *)((char *)&v63 - v20);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v23 = (uint64_t)&v63 - v22;
  __chkstk_darwin(v21);
  unint64_t v71 = (unint64_t)&v63 - v25;
  uint64_t v76 = *(void *)(v26 + 72);
  if (!v76)
  {
    __break(1u);
LABEL_65:
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
    __break(1u);
    goto LABEL_69;
  }
  if (a2 - (void)a1 == 0x8000000000000000 && v76 == -1) {
    goto LABEL_65;
  }
  int64_t v27 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v76 == -1) {
    goto LABEL_66;
  }
  uint64_t v28 = (uint64_t)(a2 - (void)a1) / v76;
  uint64_t v79 = a1;
  uint64_t v78 = a4;
  uint64_t v29 = v27 / v76;
  if (v28 >= v27 / v76)
  {
    uint64_t v67 = v24;
    if ((v29 & 0x8000000000000000) == 0)
    {
      uint64_t v31 = v29 * v76;
      if ((unint64_t)a4 < a2 || a2 + v31 <= (unint64_t)a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != (char *)a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v45 = (unint64_t)&a4[v31];
      unint64_t v77 = (unint64_t)&a4[v31];
      uint64_t v79 = (char *)a2;
      if (v31 >= 1 && (unint64_t)a1 < a2)
      {
        uint64_t v23 = -v76;
        unint64_t v64 = a1;
        uint64_t v65 = (void (**)(uint64_t, uint64_t))(v10 + 8);
        uint64_t v47 = v67;
        uint64_t v69 = -v76;
        unint64_t v66 = (unint64_t)a4;
        while (1)
        {
          id v48 = v72;
          sub_100CBD0EC(v45 + v23, (uint64_t)v72, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
          uint64_t v76 = a2;
          unint64_t v49 = a2 + v23;
          sub_100CBD0EC(a2 + v23, (uint64_t)v47, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
          sub_100CB3370(v48, v74);
          if (v5) {
            goto LABEL_68;
          }
          uint64_t v51 = v68;
          sub_100CB3370(v47, v68);
          uint64_t v73 = 0;
          uint64_t v52 = (uint64_t)v47;
          uint64_t v53 = v69;
          unint64_t v71 = a3 + v69;
          unint64_t v54 = v74;
          LOBYTE(v50) = static Date.> infix(_:_:)();
          uint64_t v55 = *v65;
          uint64_t v56 = v51;
          unint64_t v57 = a3;
          uint64_t v58 = v75;
          (*v65)(v56, v75);
          v55(v54, v58);
          sub_100CBD154(v52, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
          sub_100CBD154((uint64_t)v72, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
          if (v50)
          {
            a3 = v71;
            if (v57 < v76 || v71 >= v76)
            {
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v60 = v66;
              uint64_t v47 = v67;
              uint64_t v5 = v73;
              uint64_t v23 = v69;
            }
            else
            {
              BOOL v59 = v57 == v76;
              unint64_t v60 = v66;
              uint64_t v47 = v67;
              uint64_t v5 = v73;
              uint64_t v23 = v69;
              if (!v59) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            v79 += v23;
          }
          else
          {
            unint64_t v61 = v77;
            v77 += v53;
            uint64_t v23 = v53;
            a3 = v71;
            if (v57 < v61 || v71 >= v61)
            {
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v49 = v76;
              unint64_t v60 = v66;
              uint64_t v47 = v67;
              uint64_t v5 = v73;
            }
            else
            {
              uint64_t v5 = v73;
              uint64_t v47 = v67;
              if (v57 != v61) {
                swift_arrayInitWithTakeBackToFront();
              }
              unint64_t v49 = v76;
              unint64_t v60 = v66;
            }
          }
          unint64_t v45 = v77;
          if (v77 > v60)
          {
            a2 = v49;
            if (v49 > (unint64_t)v64) {
              continue;
            }
          }
          goto LABEL_63;
        }
      }
      goto LABEL_63;
    }
  }
  else if ((v28 & 0x8000000000000000) == 0)
  {
    uint64_t v30 = v28 * v76;
    if (a4 < a1 || &a1[v30] <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v74 = (unint64_t)&a4[v30];
    unint64_t v77 = (unint64_t)&a4[v30];
    BOOL v32 = v30 < 1 || a2 >= a3;
    if (!v32)
    {
      uint64_t v33 = (void (**)(uint64_t, uint64_t))(v10 + 8);
      while (1)
      {
        uint64_t v34 = (uint64_t *)v71;
        sub_100CBD0EC(a2, v71, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        sub_100CBD0EC((uint64_t)a4, v23, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        sub_100CB3370(v34, v73);
        if (v5) {
          goto LABEL_67;
        }
        a1 = (char *)a3;
        uint64_t v36 = v69;
        sub_100CB3370((uint64_t *)v23, v69);
        uint64_t v5 = 0;
        uint64_t v37 = v23;
        uint64_t v38 = v73;
        LOBYTE(v35) = static Date.> infix(_:_:)();
        unint64_t v39 = *v33;
        uint64_t v40 = v36;
        uint64_t v41 = v75;
        (*v33)(v40, v75);
        v39(v38, v41);
        sub_100CBD154(v37, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        sub_100CBD154(v71, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        unint64_t v42 = (unint64_t)v79;
        uint64_t v23 = v37;
        if (v35)
        {
          unint64_t v43 = a2 + v76;
          if ((unint64_t)v79 < a2 || (unint64_t)v79 >= v43)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v79 == (char *)a2)
          {
            unint64_t v42 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        else
        {
          unint64_t v44 = (unint64_t)&v78[v76];
          if (v79 < v78 || (unint64_t)v79 >= v44)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v79 != v78)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          uint64_t v78 = (char *)v44;
          unint64_t v43 = a2;
        }
        uint64_t v79 = (char *)(v42 + v76);
        a4 = v78;
        if ((unint64_t)v78 < v74)
        {
          a2 = v43;
          BOOL v32 = v43 >= (unint64_t)a1;
          a3 = (unint64_t)a1;
          if (!v32) {
            continue;
          }
        }
        break;
      }
    }
LABEL_63:
    sub_100B72C88((unint64_t *)&v79, (unint64_t *)&v78, (uint64_t *)&v77);
    return 1;
  }
LABEL_69:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100CB7D10(unsigned __int8 *__src, unsigned __int8 *a2, unint64_t a3, unsigned __int8 *__dst)
{
  uint64_t v22 = __src;
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  size_t v8 = a2 - __src;
  unint64_t v9 = a3 - (void)a2;
  uint64_t v21 = __dst;
  if (a2 - __src >= (uint64_t)(a3 - (void)a2))
  {
    if ((v9 & 0x8000000000000000) == 0)
    {
      if (__dst != a2 || a3 <= (unint64_t)__dst) {
        memmove(__dst, a2, a3 - (void)a2);
      }
      uint64_t v14 = &v4[v9];
      uint64_t v20 = &v4[v9];
      uint64_t v22 = v6;
      if (v7 < v6 && (unsigned __int8 *)a3 != v6)
      {
        uint64_t v15 = (unsigned __int8 *)(a3 - 1);
        while (1)
        {
          uint64_t v16 = v15 + 1;
          uint64_t v17 = v6 - 1;
          unsigned int v18 = *(v6 - 1);
          if (*(v14 - 1) >= v18)
          {
            uint64_t v20 = v14 - 1;
            if (v16 < v14 || v15 >= v14 || v16 != v14) {
              *uint64_t v15 = *(v14 - 1);
            }
            --v14;
            if (v6 <= v7) {
              goto LABEL_38;
            }
          }
          else
          {
            if (v16 != v6 || v15 >= v6) {
              *uint64_t v15 = v18;
            }
            uint64_t v22 = --v6;
            if (v17 <= v7) {
              goto LABEL_38;
            }
          }
          --v15;
          if (v14 <= v4) {
            goto LABEL_38;
          }
        }
      }
      goto LABEL_38;
    }
  }
  else if ((v8 & 0x8000000000000000) == 0)
  {
    if (__dst != __src || a2 <= __dst) {
      memmove(__dst, __src, v8);
    }
    uint64_t v10 = &v4[v8];
    uint64_t v20 = &v4[v8];
    if (v6 != v7 && (unint64_t)v6 < a3)
    {
      do
      {
        unsigned int v11 = *v6;
        unsigned int v12 = *v4;
        if (v11 >= v12)
        {
          if (v7 != v4) {
            unsigned __int8 *v7 = v12;
          }
          uint64_t v21 = ++v4;
          uint64_t v13 = v6;
        }
        else
        {
          uint64_t v13 = v6 + 1;
          if (v7 < v6 || v7 >= v13 || v7 != v6) {
            unsigned __int8 *v7 = v11;
          }
        }
        ++v7;
        if (v4 >= v10) {
          break;
        }
        uint64_t v6 = v13;
      }
      while ((unint64_t)v13 < a3);
      uint64_t v22 = v7;
    }
LABEL_38:
    sub_100B72CA0(&v22, &v21, &v20);
    return 1;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100CB7F4C@<X0>(unsigned char *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t v2 = a1;
  uint64_t v4 = (uint64_t)&a1[*(int *)(sub_10000588C(&qword_10165AB68) + 48)];
  uint64_t v5 = sub_10000588C(&qword_101652468);
  LOBYTE(v2) = *v2;
  uint64_t result = sub_100CBD0EC(v4, (uint64_t)&a2[*(int *)(v5 + 48)], (uint64_t (*)(void))type metadata accessor for BookmarkMetaData);
  *a2 = (_BYTE)v2;
  return result;
}

uint64_t sub_100CB7FC4(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v10 = type metadata accessor for BookmarkMetaData();
  uint64_t v42 = *(void *)(v10 - 8);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v13 = (char *)v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)v41 - v14;
  uint64_t v16 = sub_10000588C(&qword_10165C1A0);
  __chkstk_darwin(v16 - 8);
  unsigned int v18 = (char *)v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v20 = ~v19;
  uint64_t v21 = *(void *)(a1 + 64);
  uint64_t v22 = -v19;
  v41[3] = a1;
  v41[4] = a1 + 64;
  if (v22 < 64) {
    uint64_t v23 = ~(-1 << v22);
  }
  else {
    uint64_t v23 = -1;
  }
  v41[5] = v20;
  v41[6] = 0;
  v41[7] = v23 & v21;
  v41[8] = a2;
  v41[9] = a3;
  v41[1] = a1;
  swift_bridgeObjectRetain();
  v41[0] = a3;
  swift_retain();
  sub_100BD6FEC((uint64_t)v18);
  uint64_t v24 = sub_10000588C(&qword_101652468);
  for (int i = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 48))(v18, 1, v24);
        ;
        int i = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 48))(v18, 1, v24))
  {
    if (i == 1)
    {
      swift_release();
      swift_bridgeObjectRelease();
      sub_100132C20();
      return swift_release();
    }
    char v26 = *v18;
    sub_100CBD1B4((uint64_t)&v18[*(int *)(v24 + 48)], (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for BookmarkMetaData);
    uint64_t v27 = *a5;
    unint64_t v29 = sub_100724268(v26);
    uint64_t v30 = *(void *)(v27 + 16);
    BOOL v31 = (v28 & 1) == 0;
    uint64_t v32 = v30 + v31;
    if (__OFADD__(v30, v31)) {
      break;
    }
    char v33 = v28;
    if (*(void *)(v27 + 24) >= v32)
    {
      if (a4)
      {
        if (v28) {
          goto LABEL_5;
        }
      }
      else
      {
        sub_100E7F0A4();
        if (v33) {
          goto LABEL_5;
        }
      }
    }
    else
    {
      sub_100E66D88(v32, a4 & 1);
      unint64_t v34 = sub_100724268(v26);
      if ((v33 & 1) != (v35 & 1)) {
        goto LABEL_22;
      }
      unint64_t v29 = v34;
      if (v33)
      {
LABEL_5:
        sub_100CBD0EC((uint64_t)v15, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for BookmarkMetaData);
        sub_100CBD154((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for BookmarkMetaData);
        sub_1006D4CF4((uint64_t)v13, *(void *)(*a5 + 56) + *(void *)(v42 + 72) * v29);
        goto LABEL_6;
      }
    }
    uint64_t v36 = (void *)*a5;
    *(void *)(*a5 + 8 * (v29 >> 6) + 64) |= 1 << v29;
    *(unsigned char *)(v36[6] + v29) = v26;
    sub_100CBD1B4((uint64_t)v15, v36[7] + *(void *)(v42 + 72) * v29, (uint64_t (*)(void))type metadata accessor for BookmarkMetaData);
    uint64_t v37 = v36[2];
    BOOL v38 = __OFADD__(v37, 1);
    uint64_t v39 = v37 + 1;
    if (v38) {
      goto LABEL_21;
    }
    v36[2] = v39;
LABEL_6:
    sub_100BD6FEC((uint64_t)v18);
    uint64_t v24 = sub_10000588C(&qword_101652468);
    a4 = 1;
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100CB8390(uint64_t a1, uint64_t a2)
{
  v2[13] = a2;
  v2[5] = type metadata accessor for OwnedBeaconRecord();
  v2[6] = sub_100CBFAFC(&qword_101638DD0, (void (*)(uint64_t))type metadata accessor for OwnedBeaconRecord);
  uint64_t v5 = sub_10001D958(v2 + 2);
  sub_100CBD0EC(a1, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  return _swift_task_switch(sub_100CB8474, a2, 0);
}

uint64_t sub_100CB8474()
{
  uint64_t v1 = *(void *)(v0 + 104);
  *(void *)(v0 + 112) = *(void *)(v1 + 136);
  sub_10001D010(v0 + 16, v0 + 56);
  uint64_t v2 = swift_allocObject();
  *(void *)(v0 + 120) = v2;
  *(void *)(v2 + 16) = v1;
  sub_10001CEB0((long long *)(v0 + 56), v2 + 24);
  swift_retain();
  return _swift_task_switch(sub_100CB8524, 0, 0);
}

uint64_t sub_100CB8524()
{
  uint64_t v2 = v0[14];
  uint64_t v1 = v0[15];
  Swift::Int v3 = (void *)swift_task_alloc();
  v0[16] = v3;
  v3[2] = v2;
  v3[3] = sub_100CBE090;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[17] = v4;
  uint64_t v5 = sub_10001D4B0(0, (unint64_t *)&unk_10164DC30);
  void *v4 = v0;
  v4[1] = sub_100CB8648;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 12, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100CBE09C, v3, v5);
}

uint64_t sub_100CB8648()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 104);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 144) = *(void *)(v1 + 96);
  return _swift_task_switch(sub_100CB87B8, v2, 0);
}

uint64_t sub_100CB87B8()
{
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 144);
  return v1(v2);
}

size_t sub_100CB881C(size_t result, unint64_t a2)
{
  if (!result) {
    return (size_t)_swiftEmptyArrayStorage;
  }
  Swift::Int v3 = (const void *)result;
  int64_t v4 = a2 - result;
  if (a2 == result) {
    return (size_t)_swiftEmptyArrayStorage;
  }
  if (v4 < 1)
  {
    uint64_t v5 = _swiftEmptyArrayStorage;
    if (!a2) {
      goto LABEL_13;
    }
  }
  else
  {
    sub_10000588C(&qword_10163A788);
    uint64_t v5 = (void *)swift_allocObject();
    uint64_t result = j__malloc_size(v5);
    v5[2] = v4;
    v5[3] = 2 * result - 64;
    if (!a2) {
      goto LABEL_13;
    }
  }
  if ((unint64_t)v3 < a2)
  {
    if ((v4 & 0x8000000000000000) == 0)
    {
      memmove(v5 + 4, v3, v4);
      return (size_t)v5;
    }
    __break(1u);
  }
LABEL_13:
  __break(1u);
  return result;
}

uint64_t sub_100CB88D0(_OWORD *a1)
{
  uint64_t v2 = type metadata accessor for AES.GCM.SealedBox();
  uint64_t v27 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v30 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for AES.GCM.Nonce();
  uint64_t v28 = *(void *)(v4 - 8);
  uint64_t v29 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  unint64_t v9 = (char *)&v25 - v8;
  uint64_t v10 = type metadata accessor for SymmetricKey();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SymmetricKey256();
  sub_100CBFAFC(&qword_10163AFF8, (void (*)(uint64_t))&type metadata accessor for SymmetricKey256);
  *(void *)&long long v32 = KeyRepresenting.rawValue.getter();
  *((void *)&v32 + 1) = v14;
  SymmetricKey.init<A>(data:)();
  long long v35 = a1[3];
  long long v32 = a1[3];
  sub_100061E54((uint64_t)&v35);
  sub_1000362FC();
  uint64_t v15 = v36;
  AES.GCM.Nonce.init<A>(data:)();
  if (v15)
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  }
  else
  {
    uint64_t v36 = v10;
    uint64_t v26 = v2;
    uint64_t v17 = v28;
    uint64_t v16 = v29;
    (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v7, v9, v29);
    long long v18 = a1[1];
    long long v33 = a1[2];
    long long v34 = v18;
    long long v19 = a1[1];
    long long v31 = a1[2];
    long long v32 = v19;
    sub_100061E54((uint64_t)&v34);
    sub_100061E54((uint64_t)&v33);
    AES.GCM.SealedBox.init<A, B>(nonce:ciphertext:tag:)();
    uint64_t v20 = v17;
    uint64_t v21 = v16;
    uint64_t v22 = static AES.GCM.open(_:using:)();
    uint64_t v23 = v36;
    uint64_t v10 = v22;
    (*(void (**)(char *, uint64_t))(v27 + 8))(v30, v26);
    (*(void (**)(char *, uint64_t))(v20 + 8))(v9, v21);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v23);
  }
  return v10;
}

uint64_t sub_100CB8CE0(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v47 = a1;
  uint64_t v44 = type metadata accessor for BookmarkMetaData();
  uint64_t v42 = *(void *)(v44 - 8);
  uint64_t v5 = __chkstk_darwin(v44);
  uint64_t v46 = (uint64_t)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  unint64_t v43 = (int64x2_t *)((char *)&v39 - v7);
  uint64_t v8 = a2 + 64;
  uint64_t v9 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v10 = -1;
  if (v9 < 64) {
    uint64_t v10 = ~(-1 << v9);
  }
  unint64_t v11 = v10 & *(void *)(a2 + 64);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  swift_bridgeObjectRetain();
  int64_t v13 = 0;
  int64_t v40 = v12;
  uint64_t v41 = a2 + 64;
  if (!v11) {
    goto LABEL_7;
  }
LABEL_4:
  unint64_t v14 = __clz(__rbit64(v11));
  v11 &= v11 - 1;
  for (unint64_t i = v14 | (v13 << 6); ; unint64_t i = __clz(__rbit64(v21)) + (v13 << 6))
  {
    __int8 v16 = *(unsigned char *)(*(void *)(a2 + 48) + i);
    uint64_t v17 = (uint64_t *)(*(void *)(a2 + 56) + 16 * i);
    uint64_t v19 = *v17;
    unint64_t v18 = v17[1];
    sub_1000361E0(*v17, v18);
    if (sub_100DC6BD8(v16, a3))
    {
      uint64_t v24 = v43;
      uint64_t v23 = v44;
      unint64_t v45 = &v43->i8[*(int *)(v44 + 20)];
      uint64_t v25 = type metadata accessor for KeyDropInterface.KeyAlignment(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v45, 1, 1, v25);
      *uint64_t v24 = vdupq_n_s64(1uLL);
      v24->i8[*(int *)(v23 + 24)] = v16;
      sub_100CBD1B4((uint64_t)v24, v46, (uint64_t (*)(void))type metadata accessor for BookmarkMetaData);
      uint64_t v26 = v47;
      LODWORD(v45) = swift_isUniquelyReferenced_nonNull_native();
      id v48 = v26;
      unint64_t v28 = sub_100724268(v16);
      uint64_t v29 = v26[2];
      BOOL v30 = (v27 & 1) == 0;
      uint64_t v31 = v29 + v30;
      if (__OFADD__(v29, v30)) {
        goto LABEL_38;
      }
      if (v26[3] >= v31)
      {
        if ((v45 & 1) == 0)
        {
          LODWORD(v47) = v27;
          sub_100E7F0A4();
          LOBYTE(v27) = (_BYTE)v47;
        }
      }
      else
      {
        LODWORD(v47) = v27;
        sub_100E66D88(v31, (int)v45);
        unint64_t v32 = sub_100724268(v16);
        int v33 = v27 & 1;
        LOBYTE(v27) = (_BYTE)v47;
        if ((v47 & 1) != v33) {
          goto LABEL_40;
        }
        unint64_t v28 = v32;
      }
      long long v34 = v48;
      uint64_t v47 = v48;
      if (v27)
      {
        sub_1006D4CF4(v46, v48[7] + *(void *)(v42 + 72) * v28);
      }
      else
      {
        v48[(v28 >> 6) + 8] |= 1 << v28;
        *(unsigned char *)(v34[6] + v28) = v16;
        sub_100CBD1B4(v46, v34[7] + *(void *)(v42 + 72) * v28, (uint64_t (*)(void))type metadata accessor for BookmarkMetaData);
        uint64_t v35 = v34[2];
        BOOL v36 = __OFADD__(v35, 1);
        uint64_t v37 = v35 + 1;
        if (v36) {
          goto LABEL_39;
        }
        v34[2] = v37;
      }
      swift_bridgeObjectRelease();
      sub_10001CFB8(v19, v18);
      int64_t v12 = v40;
      uint64_t v8 = v41;
      if (v11) {
        goto LABEL_4;
      }
    }
    else
    {
      sub_10001CFB8(v19, v18);
      if (v11) {
        goto LABEL_4;
      }
    }
LABEL_7:
    int64_t v20 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    if (v20 >= v12) {
      goto LABEL_35;
    }
    unint64_t v21 = *(void *)(v8 + 8 * v20);
    ++v13;
    if (!v21)
    {
      int64_t v13 = v20 + 1;
      if (v20 + 1 >= v12) {
        goto LABEL_35;
      }
      unint64_t v21 = *(void *)(v8 + 8 * v13);
      if (!v21)
      {
        int64_t v13 = v20 + 2;
        if (v20 + 2 >= v12) {
          goto LABEL_35;
        }
        unint64_t v21 = *(void *)(v8 + 8 * v13);
        if (!v21)
        {
          int64_t v13 = v20 + 3;
          if (v20 + 3 >= v12) {
            goto LABEL_35;
          }
          unint64_t v21 = *(void *)(v8 + 8 * v13);
          if (!v21) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v11 = (v21 - 1) & v21;
  }
  int64_t v22 = v20 + 4;
  if (v22 >= v12)
  {
LABEL_35:
    swift_release();
    return (uint64_t)v47;
  }
  unint64_t v21 = *(void *)(v8 + 8 * v22);
  if (v21)
  {
    int64_t v13 = v22;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v13 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v13 >= v12) {
      goto LABEL_35;
    }
    unint64_t v21 = *(void *)(v8 + 8 * v13);
    ++v22;
    if (v21) {
      goto LABEL_22;
    }
  }
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
LABEL_40:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_100CB9100@<X0>(unint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for KeyDropJoinToken(0);
  uint64_t v70 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v77 = (uint64_t)v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v76 = (uint64_t)v68 - v9;
  unint64_t v10 = type metadata accessor for SharingCircleSecretValue();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  int64_t v13 = (char *)v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101637020 != -1) {
    goto LABEL_48;
  }
  while (1)
  {
    uint64_t v14 = type metadata accessor for Logger();
    sub_100010324(v14, (uint64_t)qword_10170EB40);
    swift_bridgeObjectRetain();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    BOOL v17 = os_log_type_enabled(v15, v16);
    unint64_t v84 = v3;
    uint64_t v69 = a2;
    if (v17)
    {
      unint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)unint64_t v18 = 134217984;
      id v86 = *(void **)(a1 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Initializing SharingCircleKeychain with %ld secretValues.", v18, 0xCu);
      swift_slowDealloc();

      a2 = *(uint64_t **)(a1 + 16);
      if (!a2) {
        break;
      }
      goto LABEL_4;
    }

    swift_bridgeObjectRelease();
    a2 = *(uint64_t **)(a1 + 16);
    if (!a2) {
      break;
    }
LABEL_4:
    uint64_t v79 = 0;
    uint64_t v81 = 0;
    uint64_t v83 = 0;
    uint64_t v19 = *(unsigned __int8 *)(v11 + 80);
    v68[1] = a1;
    uint64_t v20 = a1 + ((v19 + 32) & ~v19);
    uint64_t v21 = *(void *)(v11 + 72);
    int64_t v22 = _swiftEmptyArrayStorage;
    unint64_t v78 = 0xF000000000000000;
    uint64_t v88 = _swiftEmptyDictionarySingleton;
    unint64_t v80 = 0xF000000000000000;
    unint64_t v82 = 0xF000000000000000;
    uint64_t v74 = v21;
    unint64_t v75 = v10;
    while (2)
    {
      sub_100CBD0EC(v20, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for SharingCircleSecretValue);
      switch(swift_getEnumCaseMultiPayload())
      {
        case 1u:
          sub_100037A24(v83, v82);
          uint64_t v23 = *(void *)v13;
          unint64_t v82 = *((void *)v13 + 1);
          uint64_t v83 = v23;
          goto LABEL_6;
        case 2u:
          unint64_t v85 = v22;
          uint64_t v11 = *(void *)v13;
          unint64_t v3 = *((void *)v13 + 1);
          sub_1000361E0(*(void *)v13, v3);
          uint64_t v37 = v88;
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          id v86 = v37;
          a1 = sub_100724268(8);
          uint64_t v40 = v37[2];
          BOOL v41 = (v39 & 1) == 0;
          uint64_t v42 = v40 + v41;
          if (!__OFADD__(v40, v41))
          {
            unint64_t v10 = v39;
            if (v37[3] >= v42)
            {
              if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
                sub_100E7F098();
              }
            }
            else
            {
              sub_100E667F0(v42, isUniquelyReferenced_nonNull_native);
              unint64_t v43 = sub_100724268(8);
              if ((v10 & 1) != (v44 & 1))
              {
LABEL_49:
                KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                __break(1u);
                JUMPOUT(0x100CB98D0);
              }
              a1 = v43;
            }
            id v48 = v86;
            uint64_t v88 = v86;
            if (v10)
            {
              uint64_t v49 = v86[7] + 16 * a1;
              sub_10001CFB8(*(void *)v49, *(void *)(v49 + 8));
              *(void *)uint64_t v49 = v11;
              *(void *)(v49 + 8) = v3;
            }
            else
            {
              v86[(a1 >> 6) + 8] |= 1 << a1;
              *(unsigned char *)(v48[6] + a1) = 8;
              uint64_t v50 = (uint64_t *)(v48[7] + 16 * a1);
              *uint64_t v50 = v11;
              v50[1] = v3;
              uint64_t v51 = v48[2];
              BOOL v52 = __OFADD__(v51, 1);
              uint64_t v53 = v51 + 1;
              if (v52) {
                goto LABEL_46;
              }
              v48[2] = v53;
            }
            swift_bridgeObjectRelease();
            sub_100037A24(v81, v80);
            unint64_t v80 = v3;
            uint64_t v81 = v11;
LABEL_38:
            uint64_t v21 = v74;
            unint64_t v10 = v75;
            int64_t v22 = v85;
LABEL_6:
            v20 += v21;
            a2 = (uint64_t *)((char *)a2 - 1);
            if (!a2)
            {
              uint64_t result = swift_bridgeObjectRelease();
              unint64_t v61 = v78;
              uint64_t v60 = v79;
              unint64_t v63 = v80;
              uint64_t v62 = v81;
              unint64_t v65 = v82;
              uint64_t v64 = v83;
              unint64_t v66 = v88;
              goto LABEL_42;
            }
            continue;
          }
          __break(1u);
LABEL_45:
          __break(1u);
LABEL_46:
          __break(1u);
LABEL_47:
          __break(1u);
LABEL_48:
          swift_once();
          break;
        case 3u:
          uint64_t v24 = *(void *)v13;
          unint64_t v10 = *((void *)v13 + 1);
          type metadata accessor for PropertyListEncoder();
          swift_allocObject();
          uint64_t v25 = PropertyListEncoder.init()();
          id v86 = (void *)v24;
          unint64_t v87 = v10;
          sub_10043C164();
          uint64_t v73 = v25;
          unint64_t v26 = v84;
          uint64_t v27 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
          unint64_t v84 = v26;
          if (v26)
          {
            swift_release();
            sub_100037A24(v83, v82);
            sub_100037A24(v81, v80);
            sub_100037A24(v79, v78);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return sub_10001CFB8(v24, v10);
          }
          a1 = v27;
          unint64_t v29 = v28;
          unint64_t v71 = v10;
          uint64_t v72 = v24;
          unint64_t v85 = v22;
          sub_1000361E0(v27, v28);
          BOOL v30 = v88;
          uint64_t v11 = swift_isUniquelyReferenced_nonNull_native();
          id v86 = v30;
          unint64_t v3 = sub_100724268(10);
          uint64_t v32 = v30[2];
          BOOL v33 = (v31 & 1) == 0;
          uint64_t v34 = v32 + v33;
          if (__OFADD__(v32, v33)) {
            goto LABEL_45;
          }
          unint64_t v10 = v31;
          if (v30[3] >= v34)
          {
            if ((v11 & 1) == 0) {
              sub_100E7F098();
            }
          }
          else
          {
            sub_100E667F0(v34, v11);
            unint64_t v35 = sub_100724268(10);
            if ((v10 & 1) != (v36 & 1)) {
              goto LABEL_49;
            }
            unint64_t v3 = v35;
          }
          unint64_t v54 = v86;
          uint64_t v88 = v86;
          if (v10)
          {
            uint64_t v55 = v86[7] + 16 * v3;
            sub_10001CFB8(*(void *)v55, *(void *)(v55 + 8));
            *(void *)uint64_t v55 = a1;
            *(void *)(v55 + 8) = v29;
          }
          else
          {
            v86[(v3 >> 6) + 8] |= 1 << v3;
            *(unsigned char *)(v54[6] + v3) = 10;
            uint64_t v56 = (unint64_t *)(v54[7] + 16 * v3);
            *uint64_t v56 = a1;
            v56[1] = v29;
            uint64_t v57 = v54[2];
            BOOL v52 = __OFADD__(v57, 1);
            uint64_t v58 = v57 + 1;
            if (v52) {
              goto LABEL_47;
            }
            v54[2] = v58;
          }
          swift_bridgeObjectRelease();
          sub_100037A24(v79, v78);
          sub_10001CFB8(a1, v29);
          swift_release();
          unint64_t v78 = v71;
          uint64_t v79 = v72;
          goto LABEL_38;
        case 4u:
          uint64_t v45 = v76;
          sub_100CBD1B4((uint64_t)v13, v76, type metadata accessor for KeyDropJoinToken);
          sub_100CBD0EC(v45, v77, type metadata accessor for KeyDropJoinToken);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            int64_t v22 = (void *)sub_100A6E62C(0, v22[2] + 1, 1, (unint64_t)v22);
          }
          unint64_t v47 = v22[2];
          unint64_t v46 = v22[3];
          if (v47 >= v46 >> 1) {
            int64_t v22 = (void *)sub_100A6E62C(v46 > 1, v47 + 1, 1, (unint64_t)v22);
          }
          v22[2] = v47 + 1;
          sub_100CBD1B4(v77, (uint64_t)v22+ ((*(unsigned __int8 *)(v70 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80))+ *(void *)(v70 + 72) * v47, type metadata accessor for KeyDropJoinToken);
          sub_100CBD154(v76, type metadata accessor for KeyDropJoinToken);
          goto LABEL_6;
        case 5u:
          sub_100CBD154((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for SharingCircleSecretValue);
          goto LABEL_6;
        default:
          sub_10001CFB8(*(void *)v13, *((void *)v13 + 1));
          goto LABEL_6;
      }
      break;
    }
  }
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v60 = 0;
  uint64_t v62 = 0;
  uint64_t v64 = 0;
  int64_t v22 = _swiftEmptyArrayStorage;
  unint64_t v61 = 0xF000000000000000;
  unint64_t v66 = _swiftEmptyDictionarySingleton;
  unint64_t v63 = 0xF000000000000000;
  unint64_t v65 = 0xF000000000000000;
LABEL_42:
  uint64_t v67 = v69;
  *uint64_t v69 = v64;
  v67[1] = v65;
  v67[2] = v62;
  v67[3] = v63;
  v67[4] = (uint64_t)v22;
  v67[5] = v60;
  v67[6] = v61;
  v67[7] = (uint64_t)v66;
  return result;
}

void *sub_100CB98EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v77 = a3;
  uint64_t v76 = a2;
  uint64_t v6 = sub_10000588C(&qword_10165C0B8);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v9 = (char *)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v72 = (uint64_t)&v68 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v68 - v13;
  __chkstk_darwin(v12);
  uint64_t v94 = (uint64_t)&v68 - v15;
  uint64_t v16 = type metadata accessor for EncryptedData();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v68 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v20 = *(void *)(a1 + 16);
  uint64_t result = _swiftEmptyArrayStorage;
  if (v20)
  {
    uint64_t v70 = v14;
    unint64_t v71 = v9;
    unint64_t v99 = _swiftEmptyArrayStorage;
    sub_1000B7070(0, v20, 0);
    uint64_t v95 = v99;
    uint64_t v74 = type metadata accessor for PropertyListDecoder();
    uint64_t v69 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56);
    id v97 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
    int64_t v22 = (unint64_t *)(a1 + 48);
    unint64_t v75 = v19;
    unint64_t v85 = (void (**)(char *, uint64_t))(v17 + 8);
    uint64_t v73 = v16;
    while (1)
    {
      uint64_t v98 = v4;
      uint64_t v83 = *(v22 - 2);
      int64_t v84 = v20;
      uint64_t v24 = *(v22 - 1);
      unint64_t v23 = *v22;
      uint64_t v25 = v22[1];
      unint64_t v26 = v22[2];
      uint64_t v28 = v22[3];
      unint64_t v27 = v22[4];
      uint64_t v30 = v22[5];
      unint64_t v29 = v22[6];
      unint64_t v82 = v22;
      swift_allocObject();
      sub_1000361E0(v24, v23);
      unint64_t v89 = v26;
      uint64_t v90 = v25;
      unint64_t v31 = v26;
      uint64_t v32 = v75;
      sub_100037A38(v25, v31);
      uint64_t v91 = v28;
      unint64_t v87 = v27;
      sub_100037A38(v28, v27);
      unint64_t v92 = v29;
      uint64_t v93 = v30;
      unint64_t v33 = v29;
      uint64_t v34 = v73;
      sub_100037A38(v30, v33);
      sub_1000361E0(v24, v23);
      PropertyListDecoder.init()();
      sub_100CBFAFC(&qword_10163F750, (void (*)(uint64_t))&type metadata accessor for EncryptedData);
      uint64_t v86 = v24;
      unint64_t v88 = v23;
      uint64_t v35 = v98;
      dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
      if (v35) {
        break;
      }
      uint64_t v36 = EncryptedData.decrypt(key:)();
      uint64_t v98 = 0;
      uint64_t v37 = v36;
      unint64_t v39 = v38;
      uint64_t v40 = *v85;
      (*v85)(v32, v34);
      swift_release();
      uint64_t v41 = v94;
      (*v69)(v94, 1, 1, v34);
      uint64_t v42 = (uint64_t)v70;
      sub_10001D074(v41, (uint64_t)v70, &qword_10165C0B8);
      unint64_t v43 = *v97;
      LODWORD(v41) = (*v97)(v42, 1, v34);
      unint64_t v44 = v39;
      sub_1000361E0(v37, v39);
      uint64_t v96 = v37;
      if (v41 == 1)
      {
        sub_10001DAB4(v42, &qword_10165C0B8);
        unint64_t v80 = 0xF000000000000000;
        uint64_t v81 = 0;
      }
      else
      {
        uint64_t v46 = EncryptedData.cipherText.getter();
        unint64_t v80 = v47;
        uint64_t v81 = v46;
        v40((char *)v42, v34);
      }
      uint64_t v45 = v72;
      uint64_t v48 = v94;
      sub_10001D074(v94, v72, &qword_10165C0B8);
      if (v43(v45, 1, v34) == 1)
      {
        sub_10001DAB4(v45, &qword_10165C0B8);
        unint64_t v78 = 0xF000000000000000;
        uint64_t v79 = 0;
      }
      else
      {
        uint64_t v49 = EncryptedData.initializationVector.getter();
        unint64_t v78 = v50;
        uint64_t v79 = v49;
        v40((char *)v45, v34);
      }
      uint64_t v51 = (uint64_t)v71;
      sub_10001D074(v48, (uint64_t)v71, &qword_10165C0B8);
      if (v43(v51, 1, v34) == 1)
      {
        sub_10001CFB8(v96, v39);
        sub_10001DAB4(v48, &qword_10165C0B8);
        sub_10001DAB4(v51, &qword_10165C0B8);
        uint64_t v52 = 0;
        unint64_t v53 = 0xF000000000000000;
      }
      else
      {
        uint64_t v54 = EncryptedData.tag.getter();
        unint64_t v53 = v55;
        sub_10001CFB8(v96, v44);
        uint64_t v52 = v54;
        sub_10001DAB4(v48, &qword_10165C0B8);
        v40((char *)v51, v34);
      }
      uint64_t v56 = v86;
      unint64_t v57 = v88;
      sub_10001CFB8(v86, v88);
      sub_10001CFB8(v56, v57);
      sub_100037A24(v90, v89);
      sub_100037A24(v91, v87);
      sub_100037A24(v93, v92);
      uint64_t v58 = v95;
      unint64_t v99 = v95;
      unint64_t v60 = v95[2];
      unint64_t v59 = v95[3];
      if (v60 >= v59 >> 1)
      {
        sub_1000B7070(v59 > 1, v60 + 1, 1);
        uint64_t v58 = v99;
      }
      int64_t v22 = v82 + 9;
      v58[2] = v60 + 1;
      uint64_t v95 = v58;
      unint64_t v61 = &v58[9 * v60];
      int64_t v62 = v84;
      uint64_t v63 = v96;
      v61[4] = v83;
      v61[5] = v63;
      uint64_t v64 = v81;
      v61[6] = v44;
      v61[7] = v64;
      uint64_t v65 = v79;
      v61[8] = v80;
      v61[9] = v65;
      v61[10] = v78;
      v61[11] = v52;
      v61[12] = v53;
      int64_t v20 = v62 - 1;
      uint64_t v4 = v98;
      if (!v20) {
        return v95;
      }
    }
    swift_release();
    uint64_t v66 = v86;
    unint64_t v67 = v88;
    sub_10001CFB8(v86, v88);
    sub_10001CFB8(v66, v67);
    sub_100037A24(v90, v89);
    sub_100037A24(v91, v87);
    sub_100037A24(v93, v92);
    return (void *)swift_release();
  }
  return result;
}

unint64_t sub_100CB9F80(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + *(int *)(type metadata accessor for KeyDropInterface.KeyPackage(0) + 24));
  int64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = _swiftEmptyArrayStorage;
  if (!v2) {
    goto LABEL_18;
  }
  swift_bridgeObjectRetain();
  sub_1000B70C0(0, v2, 0);
  uint64_t v3 = _swiftEmptyArrayStorage;
  uint64_t v4 = (unint64_t *)(v1 + 48);
  while (2)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    unint64_t v7 = *v4;
    uint64_t v8 = v4[3];
    uint64_t v37 = v8;
    unint64_t v38 = v4[2];
    uint64_t v9 = v4[5];
    unint64_t v39 = v4[4];
    uint64_t v40 = v4[1];
    unint64_t v10 = v4[6];
    unint64_t v11 = *v4 >> 62;
    v4 += 9;
    unint64_t v36 = v10;
    switch(v7 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v6), v6))
        {
          __break(1u);
LABEL_26:
          __break(1u);
          goto LABEL_27;
        }
        uint64_t v12 = v9;
        uint64_t v14 = HIDWORD(v6) - (int)v6;
LABEL_9:
        uint64_t v17 = v6;
        unint64_t v13 = v7;
        unint64_t v18 = v7;
        uint64_t v19 = v5;
        sub_1000361E0(v6, v18);
        uint64_t v6 = v17;
        uint64_t v5 = v19;
        if (v14 == 6)
        {
LABEL_10:
          uint64_t v41 = v3;
          unint64_t v21 = v3[2];
          unint64_t v20 = v3[3];
          if (v21 >= v20 >> 1)
          {
            uint64_t v23 = v6;
            uint64_t v24 = v5;
            sub_1000B70C0(v20 > 1, v21 + 1, 1);
            uint64_t v6 = v23;
            uint64_t v5 = v24;
            uint64_t v3 = v41;
          }
          v3[2] = v21 + 1;
          int64_t v22 = &v3[3 * v21];
          v22[4] = v5;
          v22[5] = v6;
          v22[6] = v13;
          if (!--v2)
          {
            swift_bridgeObjectRelease();
LABEL_18:
            unint64_t v27 = sub_100CBA600((uint64_t)v3, (uint64_t (*)(uint64_t))sub_100B735D4, &qword_10163A9A8, (void (*)(void, void, void))sub_100B72BB4, (uint64_t)&type metadata for NearOwnerAdvertisement, (uint64_t (*)(BOOL, unint64_t, uint64_t))sub_1000B7090);
            unint64_t v29 = v28;
            uint64_t v31 = v30;
            swift_bridgeObjectRelease();
            return sub_10131231C(v27, v29, v31);
          }
          continue;
        }
LABEL_14:
        unint64_t v7 = v13;
        if (v11)
        {
          uint64_t v9 = v12;
          if (v11 == 1)
          {
            uint64_t v8 = v37;
            if (!__OFSUB__(HIDWORD(v6), v6))
            {
              uint64_t v25 = v6;
              uint64_t v26 = HIDWORD(v6) - (int)v6;
              goto LABEL_23;
            }
LABEL_27:
            __break(1u);
LABEL_28:
            __break(1u);
            JUMPOUT(0x100CBA304);
          }
          uint64_t v34 = *(void *)(v6 + 16);
          uint64_t v33 = *(void *)(v6 + 24);
          uint64_t v26 = v33 - v34;
          uint64_t v8 = v37;
          if (__OFSUB__(v33, v34)) {
            goto LABEL_28;
          }
          uint64_t v25 = v6;
LABEL_23:
          unint64_t v10 = v36;
        }
        else
        {
          uint64_t v25 = v6;
          uint64_t v26 = BYTE6(v7);
          uint64_t v9 = v12;
          unint64_t v10 = v36;
          uint64_t v8 = v37;
        }
LABEL_24:
        sub_10013019C();
        swift_allocError();
        *(void *)uint64_t v35 = 6;
        *(void *)(v35 + 8) = v26;
        *(unsigned char *)(v35 + 16) = 0;
        sub_1000361E0(v25, v7);
        sub_100037A38(v40, v38);
        sub_100037A38(v8, v39);
        sub_100037A38(v9, v10);
        swift_willThrow();
        sub_10001CFB8(v25, v7);
        sub_10001CFB8(v25, v7);
        sub_100037A24(v40, v38);
        sub_100037A24(v8, v39);
        sub_100037A24(v9, v10);
        swift_bridgeObjectRelease();
        return swift_release();
      case 2uLL:
        uint64_t v12 = v9;
        uint64_t v16 = *(void *)(v6 + 16);
        uint64_t v15 = *(void *)(v6 + 24);
        uint64_t v14 = v15 - v16;
        if (!__OFSUB__(v15, v16)) {
          goto LABEL_9;
        }
        goto LABEL_26;
      case 3uLL:
        uint64_t v25 = v6;
        uint64_t v26 = 0;
        goto LABEL_24;
      default:
        uint64_t v12 = v9;
        unint64_t v13 = v7;
        if (BYTE6(v7) != 6) {
          goto LABEL_14;
        }
        goto LABEL_10;
    }
  }
}

void *sub_100CBA314(void *result, uint64_t a2, unint64_t a3)
{
  int64_t v12 = a3 >> 1;
  uint64_t v3 = (a3 >> 1) - a2;
  if (__OFSUB__(a3 >> 1, a2))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (!v3) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v5 = result;
  uint64_t result = (void *)sub_1000B6F10(0, v3 & ~(v3 >> 63), 0);
  if ((v3 & 0x8000000000000000) == 0)
  {
    uint64_t v6 = 0;
    for (unint64_t i = &v5[3 * a2 + 1]; ; i += 3)
    {
      uint64_t v8 = v6 + 1;
      if (__OFADD__(v6, 1)) {
        break;
      }
      if (a2 + v6 >= v12 || v6 >= v3) {
        goto LABEL_13;
      }
      uint64_t v9 = *i;
      unint64_t v13 = i[1];
      sub_1000361E0(*i, v13);
      swift_getAtKeyPath();
      uint64_t result = (void *)sub_10001CFB8(v9, v13);
      unint64_t v11 = _swiftEmptyArrayStorage[2];
      unint64_t v10 = _swiftEmptyArrayStorage[3];
      if (v11 >= v10 >> 1) {
        uint64_t result = (void *)sub_1000B6F10(v10 > 1, v11 + 1, 1);
      }
      _swiftEmptyArrayStorage[2] = v11 + 1;
      _swiftEmptyArrayStorage[v11 + 4] = v14;
      ++v6;
      if (v8 == v3) {
        return _swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
LABEL_15:
  __break(1u);
  return result;
}

void *sub_100CBA480(void *result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(BOOL, unint64_t, uint64_t))
{
  int64_t v6 = a3 >> 1;
  uint64_t v7 = (a3 >> 1) - a2;
  if (__OFSUB__(a3 >> 1, a2))
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  if (!v7) {
    return _swiftEmptyArrayStorage;
  }
  unint64_t v10 = result;
  uint64_t result = (void *)a6(0, v7 & ~(v7 >> 63), 0);
  if ((v7 & 0x8000000000000000) == 0)
  {
    unint64_t v18 = a6;
    uint64_t v11 = 0;
    for (unint64_t i = &v10[3 * a2 + 1]; ; i += 3)
    {
      uint64_t v13 = v11 + 1;
      if (__OFADD__(v11, 1)) {
        break;
      }
      if (a2 + v11 >= v6 || v11 >= v7) {
        goto LABEL_13;
      }
      uint64_t v14 = *i;
      unint64_t v19 = i[1];
      sub_1000361E0(*i, v19);
      swift_getAtKeyPath();
      uint64_t result = (void *)sub_10001CFB8(v14, v19);
      long long v15 = v20;
      unint64_t v17 = _swiftEmptyArrayStorage[2];
      unint64_t v16 = _swiftEmptyArrayStorage[3];
      if (v17 >= v16 >> 1)
      {
        uint64_t result = (void *)v18(v16 > 1, v17 + 1, 1);
        long long v15 = v20;
      }
      _swiftEmptyArrayStorage[2] = v17 + 1;
      *(_OWORD *)&_swiftEmptyArrayStorage[2 * v17 + 4] = v15;
      ++v11;
      if (v13 == v7) {
        return _swiftEmptyArrayStorage;
      }
    }
    __break(1u);
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
LABEL_15:
  __break(1u);
  return result;
}

uint64_t sub_100CBA600(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t *a3, void (*a4)(void, void, void), uint64_t a5, uint64_t (*a6)(BOOL, unint64_t, uint64_t))
{
  uint64_t v47 = a1;
  swift_bridgeObjectRetain();
  sub_100C27910(&v47, a2, a3, a4);
  uint64_t v11 = v47;
  uint64_t v12 = *(void *)(v47 + 16);
  if (!v12
    || (uint64_t v13 = v47 + 32 + 24 * v12,
        uint64_t v14 = *(void *)(v13 - 24),
        unint64_t v15 = *(void *)(v13 - 16),
        unint64_t v16 = *(void *)(v13 - 8),
        uint64_t v17 = sub_1000361E0(v15, v16),
        v16 >> 60 == 15))
  {
    swift_release();
    return 0;
  }
  uint64_t v18 = v14 + 1;
  if (v14 == -1)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    swift_once();
    goto LABEL_16;
  }
  unint64_t v44 = a6;
  uint64_t v19 = 24 * v12 + 8;
  uint64_t v20 = v12;
  do
  {
    uint64_t v21 = *(void *)(v11 + v19);
    if (v21 == -1)
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v21 + 1 != v18) {
      break;
    }
    v19 -= 24;
    uint64_t v18 = v21;
    --v20;
  }
  while (v20);
  uint64_t v22 = *(void *)(a1 + 16);
  if (v22 <= v20) {
    goto LABEL_27;
  }
  if (v12 < v20) {
    goto LABEL_28;
  }
  if (v12 < (unint64_t)v22) {
    goto LABEL_29;
  }
  uint64_t v45 = v15;
  unint64_t v46 = v16;
  uint64_t v43 = *(void *)(a1 + 16);
  unint64_t v23 = (2 * v22) | 1;
  __chkstk_darwin(v17);
  swift_getKeyPath();
  swift_retain();
  uint64_t v24 = sub_100CBA314((void *)(v11 + 32), v20, v23);
  swift_release_n();
  unint64_t v16 = sub_1002A1070((uint64_t)v24);
  char v26 = v25;
  uint64_t v27 = swift_bridgeObjectRelease();
  if (v26) {
    goto LABEL_20;
  }
  __chkstk_darwin(v27);
  swift_getKeyPath();
  swift_retain();
  unint64_t v28 = sub_100CBA314((void *)(v11 + 32), v20, v23);
  swift_release_n();
  unint64_t v15 = sub_100E4CC98((uint64_t)v28);
  char v30 = v29;
  uint64_t v31 = swift_bridgeObjectRelease();
  if (v30)
  {
LABEL_20:
    swift_release();
    sub_10001CFB8(v45, v46);
    return 0;
  }
  if (v15 < v16) {
    goto LABEL_30;
  }
  __chkstk_darwin(v31);
  uint64_t KeyPath = swift_getKeyPath();
  swift_retain();
  sub_100CBA480((void *)(v11 + 32), v20, v23, KeyPath, (uint64_t)v52, v44);
  swift_release_n();
  if (qword_101637020 != -1) {
    goto LABEL_31;
  }
LABEL_16:
  uint64_t v33 = type metadata accessor for Logger();
  sub_100010324(v33, (uint64_t)qword_10170EB40);
  swift_bridgeObjectRetain_n();
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v34, v35))
  {

    swift_release();
    swift_bridgeObjectRelease_n();
    goto LABEL_24;
  }
  uint64_t v36 = swift_slowAlloc();
  uint64_t v42 = swift_slowAlloc();
  unint64_t v50 = v16;
  uint64_t v51 = v42;
  *(_DWORD *)uint64_t v36 = 136315906;
  uint64_t v47 = 0;
  unint64_t v48 = 0xE000000000000000;
  unint64_t v49 = v15;
  _print_unlocked<A, B>(_:_:)();
  v37._countAndFlagsBits = 3026478;
  v37._object = (void *)0xE300000000000000;
  String.append(_:)(v37);
  _print_unlocked<A, B>(_:_:)();
  uint64_t v47 = sub_1008FA0F0(v47, v48, &v51);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  *(_WORD *)(v36 + 12) = 2048;
  swift_bridgeObjectRelease();
  uint64_t v47 = v43;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  *(_WORD *)(v36 + 22) = 2048;
  unint64_t v38 = v15 - v16;
  if ((uint64_t)(v15 - v16) < 0)
  {
    __break(1u);
  }
  else
  {
    BOOL v39 = __OFADD__(v38, 1);
    uint64_t v40 = v38 + 1;
    if (!v39)
    {
      uint64_t v47 = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v36 + 32) = 2048;
      swift_bridgeObjectRelease();
      uint64_t v47 = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Retaining range: %s out of possible %ld. %ld / %ld.", (uint8_t *)v36, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_release();
LABEL_24:
      sub_10001CFB8(v45, v46);
      return v16;
    }
  }
  __break(1u);
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

unint64_t sub_100CBAB98(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + *(int *)(type metadata accessor for KeyDropInterface.KeyPackage(0) + 24));
  int64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = _swiftEmptyArrayStorage;
  if (!v2) {
    goto LABEL_18;
  }
  swift_bridgeObjectRetain();
  sub_1000B7120(0, v2, 0);
  uint64_t v3 = _swiftEmptyArrayStorage;
  uint64_t v4 = (unint64_t *)(v1 + 48);
  while (2)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    unint64_t v7 = *v4;
    uint64_t v8 = v4[3];
    uint64_t v37 = v8;
    unint64_t v38 = v4[2];
    uint64_t v9 = v4[5];
    unint64_t v39 = v4[4];
    uint64_t v40 = v4[1];
    unint64_t v10 = v4[6];
    unint64_t v11 = *v4 >> 62;
    v4 += 9;
    unint64_t v36 = v10;
    switch(v7 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v6), v6))
        {
          __break(1u);
LABEL_26:
          __break(1u);
          goto LABEL_27;
        }
        uint64_t v12 = v9;
        uint64_t v14 = HIDWORD(v6) - (int)v6;
LABEL_9:
        uint64_t v17 = v6;
        unint64_t v13 = v7;
        unint64_t v18 = v7;
        uint64_t v19 = v5;
        sub_1000361E0(v6, v18);
        uint64_t v6 = v17;
        uint64_t v5 = v19;
        if (v14 == 32)
        {
LABEL_10:
          uint64_t v41 = v3;
          unint64_t v21 = v3[2];
          unint64_t v20 = v3[3];
          if (v21 >= v20 >> 1)
          {
            uint64_t v23 = v6;
            uint64_t v24 = v5;
            sub_1000B7120(v20 > 1, v21 + 1, 1);
            uint64_t v6 = v23;
            uint64_t v5 = v24;
            uint64_t v3 = v41;
          }
          v3[2] = v21 + 1;
          uint64_t v22 = &v3[3 * v21];
          v22[4] = v5;
          v22[5] = v6;
          v22[6] = v13;
          if (!--v2)
          {
            swift_bridgeObjectRelease();
LABEL_18:
            unint64_t v27 = sub_100CBA600((uint64_t)v3, (uint64_t (*)(uint64_t))sub_100B735E8, &qword_10163A9C0, (void (*)(void, void, void))sub_100B72BB4, (uint64_t)&type metadata for ConnectionKey, (uint64_t (*)(BOOL, unint64_t, uint64_t))sub_1000B70F0);
            unint64_t v29 = v28;
            uint64_t v31 = v30;
            swift_bridgeObjectRelease();
            return sub_10131231C(v27, v29, v31);
          }
          continue;
        }
LABEL_14:
        unint64_t v7 = v13;
        if (v11)
        {
          uint64_t v9 = v12;
          if (v11 == 1)
          {
            uint64_t v8 = v37;
            if (!__OFSUB__(HIDWORD(v6), v6))
            {
              uint64_t v25 = v6;
              uint64_t v26 = HIDWORD(v6) - (int)v6;
              goto LABEL_23;
            }
LABEL_27:
            __break(1u);
LABEL_28:
            __break(1u);
            JUMPOUT(0x100CBAF1CLL);
          }
          uint64_t v34 = *(void *)(v6 + 16);
          uint64_t v33 = *(void *)(v6 + 24);
          uint64_t v26 = v33 - v34;
          uint64_t v8 = v37;
          if (__OFSUB__(v33, v34)) {
            goto LABEL_28;
          }
          uint64_t v25 = v6;
LABEL_23:
          unint64_t v10 = v36;
        }
        else
        {
          uint64_t v25 = v6;
          uint64_t v26 = BYTE6(v7);
          uint64_t v9 = v12;
          unint64_t v10 = v36;
          uint64_t v8 = v37;
        }
LABEL_24:
        sub_10013019C();
        swift_allocError();
        *(void *)uint64_t v35 = 32;
        *(void *)(v35 + 8) = v26;
        *(unsigned char *)(v35 + 16) = 0;
        sub_1000361E0(v25, v7);
        sub_100037A38(v40, v38);
        sub_100037A38(v8, v39);
        sub_100037A38(v9, v10);
        swift_willThrow();
        sub_10001CFB8(v25, v7);
        sub_10001CFB8(v25, v7);
        sub_100037A24(v40, v38);
        sub_100037A24(v8, v39);
        sub_100037A24(v9, v10);
        swift_bridgeObjectRelease();
        return swift_release();
      case 2uLL:
        uint64_t v12 = v9;
        uint64_t v16 = *(void *)(v6 + 16);
        uint64_t v15 = *(void *)(v6 + 24);
        uint64_t v14 = v15 - v16;
        if (!__OFSUB__(v15, v16)) {
          goto LABEL_9;
        }
        goto LABEL_26;
      case 3uLL:
        uint64_t v25 = v6;
        uint64_t v26 = 0;
        goto LABEL_24;
      default:
        uint64_t v12 = v9;
        unint64_t v13 = v7;
        if (BYTE6(v7) != 32) {
          goto LABEL_14;
        }
        goto LABEL_10;
    }
  }
}

void *sub_100CBAF2C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + *(int *)(type metadata accessor for KeyDropInterface.KeyPackage(0) + 24));
  int64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = _swiftEmptyArrayStorage;
  if (!v2) {
    return v3;
  }
  swift_bridgeObjectRetain();
  sub_1000B7150(0, v2, 0);
  uint64_t v3 = _swiftEmptyArrayStorage;
  uint64_t v4 = (unint64_t *)(v1 + 48);
  while (2)
  {
    uint64_t v5 = *(v4 - 2);
    uint64_t v6 = *(v4 - 1);
    unint64_t v7 = *v4;
    uint64_t v8 = v4[3];
    uint64_t v33 = v8;
    unint64_t v34 = v4[2];
    uint64_t v9 = v4[5];
    unint64_t v35 = v4[4];
    uint64_t v36 = v4[1];
    unint64_t v10 = v4[6];
    unint64_t v11 = *v4 >> 62;
    v4 += 9;
    unint64_t v32 = v10;
    switch(v7 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v6), v6))
        {
          __break(1u);
LABEL_26:
          __break(1u);
          goto LABEL_27;
        }
        uint64_t v12 = v9;
        uint64_t v14 = HIDWORD(v6) - (int)v6;
LABEL_9:
        uint64_t v17 = v6;
        unint64_t v13 = v7;
        unint64_t v18 = v7;
        uint64_t v19 = v5;
        sub_1000361E0(v6, v18);
        uint64_t v6 = v17;
        uint64_t v5 = v19;
        if (v14 == 28)
        {
LABEL_10:
          unint64_t v21 = _swiftEmptyArrayStorage[2];
          unint64_t v20 = _swiftEmptyArrayStorage[3];
          if (v21 >= v20 >> 1)
          {
            uint64_t v23 = v6;
            unint64_t v24 = v13;
            uint64_t v25 = v5;
            sub_1000B7150(v20 > 1, v21 + 1, 1);
            uint64_t v6 = v23;
            uint64_t v5 = v25;
            unint64_t v13 = v24;
          }
          _swiftEmptyArrayStorage[2] = v21 + 1;
          uint64_t v22 = &_swiftEmptyArrayStorage[3 * v21];
          v22[4] = v5;
          v22[5] = v6;
          v22[6] = v13;
          if (!--v2)
          {
            swift_bridgeObjectRelease();
            return v3;
          }
          continue;
        }
LABEL_14:
        unint64_t v7 = v13;
        if (v11)
        {
          uint64_t v9 = v12;
          if (v11 == 1)
          {
            uint64_t v8 = v33;
            if (!__OFSUB__(HIDWORD(v6), v6))
            {
              uint64_t v26 = v6;
              uint64_t v27 = HIDWORD(v6) - (int)v6;
              goto LABEL_22;
            }
LABEL_27:
            __break(1u);
LABEL_28:
            __break(1u);
            JUMPOUT(0x100CBB238);
          }
          uint64_t v29 = *(void *)(v6 + 16);
          uint64_t v28 = *(void *)(v6 + 24);
          uint64_t v27 = v28 - v29;
          uint64_t v8 = v33;
          if (__OFSUB__(v28, v29)) {
            goto LABEL_28;
          }
          uint64_t v26 = v6;
LABEL_22:
          unint64_t v10 = v32;
        }
        else
        {
          uint64_t v26 = v6;
          uint64_t v27 = BYTE6(v7);
          uint64_t v9 = v12;
          unint64_t v10 = v32;
          uint64_t v8 = v33;
        }
LABEL_23:
        sub_10013019C();
        swift_allocError();
        *(void *)uint64_t v30 = 28;
        *(void *)(v30 + 8) = v27;
        *(unsigned char *)(v30 + 16) = 0;
        sub_1000361E0(v26, v7);
        sub_100037A38(v36, v34);
        uint64_t v3 = (void *)v35;
        sub_100037A38(v8, v35);
        sub_100037A38(v9, v10);
        swift_willThrow();
        sub_10001CFB8(v26, v7);
        sub_10001CFB8(v26, v7);
        sub_100037A24(v36, v34);
        sub_100037A24(v8, v35);
        sub_100037A24(v9, v10);
        swift_bridgeObjectRelease();
        swift_release();
        return v3;
      case 2uLL:
        uint64_t v12 = v9;
        uint64_t v16 = *(void *)(v6 + 16);
        uint64_t v15 = *(void *)(v6 + 24);
        uint64_t v14 = v15 - v16;
        if (!__OFSUB__(v15, v16)) {
          goto LABEL_9;
        }
        goto LABEL_26;
      case 3uLL:
        uint64_t v26 = v6;
        uint64_t v27 = 0;
        goto LABEL_23;
      default:
        uint64_t v12 = v9;
        unint64_t v13 = v7;
        if (BYTE6(v7) != 28) {
          goto LABEL_14;
        }
        goto LABEL_10;
    }
  }
}

void *sub_100CBB248(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v119 = a4;
  unint64_t v101 = a3;
  uint64_t v95 = a2;
  uint64_t v91 = type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member(0);
  uint64_t v90 = *(void *)(v91 - 8);
  __chkstk_darwin(v91);
  uint64_t v92 = (uint64_t)v89 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v112 = type metadata accessor for EncryptedData();
  uint64_t v6 = *(void *)(v112 - 8);
  __chkstk_darwin(v112);
  uint64_t v111 = (char *)v89 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v121 = type metadata accessor for KeyDropDownloadResponse.Member(0);
  uint64_t v118 = *(void *)(v121 - 8);
  uint64_t v8 = __chkstk_darwin(v121);
  unint64_t v10 = (char *)v89 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  unint64_t v13 = (char *)v89 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v113 = (char *)v89 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  Swift::String v120 = (char *)v89 - v17;
  __chkstk_darwin(v16);
  uint64_t v110 = (char *)v89 - v18;
  uint64_t v109 = type metadata accessor for SharingCircleKeyManager.Instruction(0);
  uint64_t v19 = __chkstk_darwin(v109);
  uint64_t v106 = (uint64_t)v89 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v122 = (uint64_t)v89 - v22;
  __chkstk_darwin(v21);
  unint64_t v24 = (char *)v89 - v23;
  if (qword_101637020 != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  uint64_t v26 = sub_100010324(v25, (uint64_t)qword_10170EB40);
  sub_100CBD0EC(v119, (uint64_t)v24, type metadata accessor for SharingCircleKeyManager.Instruction);
  swift_bridgeObjectRetain_n();
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.default.getter();
  BOOL v29 = os_log_type_enabled(v27, v28);
  unint64_t v107 = v10;
  uint64_t v108 = v26;
  uint64_t v114 = v13;
  uint64_t v123 = v6;
  if (v29)
  {
    uint64_t v30 = swift_slowAlloc();
    v124[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v30 = 141558787;
    uint64_t v125 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v30 + 12) = 2081;
    type metadata accessor for UUID();
    sub_100CBFAFC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v125 = sub_1008FA0F0(v31, v32, v124);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100CBD154((uint64_t)v24, type metadata accessor for SharingCircleKeyManager.Instruction);
    *(_WORD *)(v30 + 22) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v33 = Array.description.getter();
    unint64_t v35 = v34;
    swift_bridgeObjectRelease();
    uint64_t v125 = sub_1008FA0F0(v33, v35, v124);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v30 + 32) = 2048;
    uint64_t v36 = *(void *)(a1 + 16);
    swift_bridgeObjectRelease();
    uint64_t v125 = v36;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Processing shareId: %{private,mask.hash}s,\nmembers: %s, count: %ld.", (uint8_t *)v30, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();
    sub_100CBD154((uint64_t)v24, type metadata accessor for SharingCircleKeyManager.Instruction);
    swift_bridgeObjectRelease_n();
  }

  uint64_t v37 = (uint64_t)v110;
  uint64_t v38 = v122;
  uint64_t v39 = *(void *)(a1 + 16);
  uint64_t v40 = (uint64_t)v120;
  if (!v39) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v41 = a1 + ((*(unsigned __int8 *)(v118 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v118 + 80));
  uint64_t v94 = (void (**)(char *, uint64_t))(v123 + 8);
  uint64_t v98 = &v126;
  id v97 = (char *)&v125 + 4;
  uint64_t v118 = *(void *)(v118 + 72);
  v89[1] = a1;
  swift_bridgeObjectRetain();
  uint64_t v117 = 0;
  uint64_t v93 = _swiftEmptyArrayStorage;
  *(void *)&long long v42 = 141558787;
  long long v100 = v42;
  unint64_t v99 = (char *)&type metadata for Any + 8;
  *(void *)&long long v42 = 141559555;
  long long v96 = v42;
  do
  {
    sub_100CBD0EC(v41, v37, type metadata accessor for KeyDropDownloadResponse.Member);
    unint64_t v44 = (uint64_t *)(v37 + *(int *)(v121 + 24));
    unint64_t v45 = v44[1];
    uint64_t v123 = v39;
    if (v45 >> 60 == 15)
    {
      sub_100CBD0EC(v119, v38, type metadata accessor for SharingCircleKeyManager.Instruction);
      sub_100CBD0EC(v37, v40, type metadata accessor for KeyDropDownloadResponse.Member);
      unint64_t v46 = Logger.logObject.getter();
      os_log_type_t v47 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v46, v47))
      {
        uint64_t v48 = swift_slowAlloc();
        v124[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v48 = v100;
        *(void *)(v48 + 4) = 1752392040;
        *(_WORD *)(v48 + 12) = 2081;
        type metadata accessor for UUID();
        sub_100CBFAFC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v49 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v48 + 14) = sub_1008FA0F0(v49, v50, v124);
        swift_bridgeObjectRelease();
        sub_100CBD154(v122, type metadata accessor for SharingCircleKeyManager.Instruction);
        *(_WORD *)(v48 + 22) = 2160;
        *(void *)(v48 + 24) = 1752392040;
        *(_WORD *)(v48 + 32) = 2081;
        uint64_t v40 = (uint64_t)v120;
        uint64_t v51 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v48 + 34) = sub_1008FA0F0(v51, v52, v124);
        swift_bridgeObjectRelease();
        sub_100CBD154(v40, type metadata accessor for KeyDropDownloadResponse.Member);
        _os_log_impl((void *)&_mh_execute_header, v46, v47, "Participant for shareId: %{private,mask.hash}s,\nmemberId: %{private,mask.hash}s not yet accepted.", (uint8_t *)v48, 0x2Au);
        swift_arrayDestroy();
        uint64_t v37 = (uint64_t)v110;
        swift_slowDealloc();
        uint64_t v38 = v122;
        swift_slowDealloc();
      }
      else
      {

        sub_100CBD154(v40, type metadata accessor for KeyDropDownloadResponse.Member);
        sub_100CBD154(v38, type metadata accessor for SharingCircleKeyManager.Instruction);
      }
      sub_100CBD154(v37, type metadata accessor for KeyDropDownloadResponse.Member);
      uint64_t v43 = v123;
    }
    else
    {
      uint64_t v53 = *v44;
      type metadata accessor for PropertyListDecoder();
      swift_allocObject();
      sub_1000361E0(v53, v45);
      PropertyListDecoder.init()();
      sub_100CBFAFC(&qword_10163F750, (void (*)(uint64_t))&type metadata accessor for EncryptedData);
      unint64_t v116 = v45;
      uint64_t v54 = v117;
      dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
      uint64_t v115 = v53;
      if (v54)
      {
        swift_release();
        uint64_t v117 = 0;
        uint64_t v55 = v106;
        uint64_t v56 = (uint64_t)v113;
        sub_100CBD0EC(v119, v106, type metadata accessor for SharingCircleKeyManager.Instruction);
        sub_100CBD0EC(v37, v56, type metadata accessor for KeyDropDownloadResponse.Member);
        sub_100CBD0EC(v37, (uint64_t)v114, type metadata accessor for KeyDropDownloadResponse.Member);
        uint64_t v61 = (uint64_t)v107;
        sub_100CBD0EC(v37, (uint64_t)v107, type metadata accessor for KeyDropDownloadResponse.Member);
        swift_errorRetain();
        swift_errorRetain();
        int64_t v62 = Logger.logObject.getter();
        os_log_type_t v63 = static os_log_type_t.error.getter();
        int v64 = v63;
        if (os_log_type_enabled(v62, v63))
        {
          uint64_t v65 = swift_slowAlloc();
          uint64_t v104 = (void *)swift_slowAlloc();
          uint64_t v105 = swift_slowAlloc();
          v124[0] = v105;
          *(_DWORD *)uint64_t v65 = v96;
          uint64_t v125 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v65 + 12) = 2081;
          os_log_t v103 = v62;
          type metadata accessor for UUID();
          int v102 = v64;
          sub_100CBFAFC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v66 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v125 = sub_1008FA0F0(v66, v67, v124);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_100CBD154(v55, type metadata accessor for SharingCircleKeyManager.Instruction);
          *(_WORD *)(v65 + 22) = 2160;
          uint64_t v125 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v65 + 32) = 2081;
          uint64_t v68 = (uint64_t)v113;
          uint64_t v69 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v125 = sub_1008FA0F0(v69, v70, v124);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_100CBD154(v68, type metadata accessor for KeyDropDownloadResponse.Member);
          *(_WORD *)(v65 + 42) = 2080;
          uint64_t v71 = (uint64_t)v114;
          uint64_t v72 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v125 = sub_1008FA0F0(v72, v73, v124);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_100CBD154(v71, type metadata accessor for KeyDropDownloadResponse.Member);
          *(_WORD *)(v65 + 52) = 1024;
          LODWORD(v71) = *(unsigned __int8 *)(v61 + *(int *)(v121 + 20));
          sub_100CBD154(v61, type metadata accessor for KeyDropDownloadResponse.Member);
          LODWORD(v125) = v71;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v65 + 58) = 2112;
          swift_errorRetain();
          uint64_t v74 = _swift_stdlib_bridgeErrorToNSError();
          uint64_t v125 = v74;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v104 = v74;
          swift_errorRelease();
          swift_errorRelease();
          os_log_t v75 = v103;
          _os_log_impl((void *)&_mh_execute_header, v103, (os_log_type_t)v102, "Failed to process members in share-id: %{private,mask.hash}s,\nmember trust memberId: %{private,mask.hash}s,\nmember: %s, owner: %{BOOL}d. %@.", (uint8_t *)v65, 0x44u);
          sub_10000588C((uint64_t *)&unk_101638EA0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
          sub_100037A24(v115, v116);

          swift_errorRelease();
          uint64_t v37 = (uint64_t)v110;
          uint64_t v76 = (uint64_t)v110;
        }
        else
        {
          sub_100CBD154(v61, type metadata accessor for KeyDropDownloadResponse.Member);
          sub_100037A24(v115, v116);

          swift_errorRelease();
          swift_errorRelease();
          sub_100CBD154((uint64_t)v114, type metadata accessor for KeyDropDownloadResponse.Member);
          sub_100CBD154(v56, type metadata accessor for KeyDropDownloadResponse.Member);
          sub_100CBD154(v55, type metadata accessor for SharingCircleKeyManager.Instruction);
          swift_errorRelease();
          uint64_t v76 = v37;
        }
        sub_100CBD154(v76, type metadata accessor for KeyDropDownloadResponse.Member);
        uint64_t v40 = (uint64_t)v120;
        uint64_t v38 = v122;
        uint64_t v43 = v123;
      }
      else
      {
        uint64_t v57 = v95;
        sub_1000361E0(v95, v101);
        uint64_t v58 = EncryptedData.decrypt(key:)();
        unint64_t v60 = v59;
        sub_10001CFB8(v57, v101);
        sub_100CBF8E0();
        dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
        uint64_t v117 = 0;
        (*v94)(v111, v112);
        sub_10001CFB8(v58, v60);
        swift_release();
        uint64_t v77 = v124[0];
        uint64_t v78 = v124[1];
        uint64_t v79 = type metadata accessor for UUID();
        uint64_t v80 = v92;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v79 - 8) + 16))(v92, v37, v79);
        uint64_t v81 = v91;
        *(unsigned char *)(v80 + *(int *)(v91 + 20)) = *(unsigned char *)(v37 + *(int *)(v121 + 20));
        unint64_t v82 = (uint64_t *)(v80 + *(int *)(v81 + 24));
        *unint64_t v82 = v77;
        v82[1] = v78;
        if (swift_isUniquelyReferenced_nonNull_native())
        {
          uint64_t v40 = (uint64_t)v120;
          uint64_t v38 = v122;
          uint64_t v43 = v123;
          unint64_t v83 = (unint64_t)v93;
        }
        else
        {
          unint64_t v83 = sub_100A6ECB4(0, v93[2] + 1, 1, (unint64_t)v93);
          uint64_t v40 = (uint64_t)v120;
          uint64_t v38 = v122;
          uint64_t v43 = v123;
        }
        unint64_t v84 = v116;
        unint64_t v86 = *(void *)(v83 + 16);
        unint64_t v85 = *(void *)(v83 + 24);
        if (v86 >= v85 >> 1) {
          unint64_t v83 = sub_100A6ECB4(v85 > 1, v86 + 1, 1, v83);
        }
        *(void *)(v83 + 16) = v86 + 1;
        unint64_t v87 = (*(unsigned __int8 *)(v90 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v90 + 80);
        uint64_t v93 = (void *)v83;
        sub_100CBD1B4(v92, v83 + v87 + *(void *)(v90 + 72) * v86, type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member);
        sub_100037A24(v115, v84);
        sub_100CBD154(v37, type metadata accessor for KeyDropDownloadResponse.Member);
      }
    }
    v41 += v118;
    uint64_t v39 = v43 - 1;
  }
  while (v39);
  swift_bridgeObjectRelease();
  return v93;
}

void *sub_100CBC3A4(uint64_t a1, char a2)
{
  uint64_t v4 = *(int *)(type metadata accessor for OwnerSharingCircle() + 28);
  uint64_t v5 = &off_10159FA20;
  switch(*(unsigned char *)(a1 + v4))
  {
    case 1:
      uint64_t v6 = &off_10159FA70;
      uint64_t v7 = &off_10159FA48;
      goto LABEL_4;
    case 2:
      uint64_t v6 = &off_10159FAC8;
      uint64_t v7 = &off_10159FA98;
LABEL_4:
      if (a2) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t v5 = v6;
      }
      break;
    case 3:
      uint64_t v5 = &off_10159FAF0;
      break;
    default:
      break;
  }

  return sub_100DF214C((uint64_t)v5);
}

void sub_100CBC458()
{
  if (qword_101636B18 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100010324(v0, (uint64_t)qword_10170DED0);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Fetching AuthKit account", v3, 2u);
    swift_slowDealloc();
  }

  id v4 = [objc_allocWithZone((Class)ACAccountStore) init];
  id v5 = [v4 aa_primaryAppleAccount];

  if (v5)
  {
    id v6 = [v5 aa_altDSID];

    if (!v6
      || (id v7 = [self sharedInstance],
          id v8 = [v7 authKitAccountWithAltDSID:v6],
          v7,
          v6,
          !v8))
    {
      uint64_t v9 = Logger.logObject.getter();
      os_log_type_t v10 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v9, v10))
      {
        uint64_t v11 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v11 = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, v10, "AuthKit account not found", v11, 2u);
        swift_slowDealloc();
      }
    }
  }
  else
  {
    __break(1u);
  }
}

void sub_100CBC654(uint64_t a1@<X8>)
{
  sub_100CBC458();
  if (!v2)
  {
    uint64_t v6 = 0;
    uint64_t v8 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    char v18 = -1;
LABEL_26:
    *(void *)a1 = v6;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v16;
    *(void *)(a1 + 24) = v17;
    *(unsigned char *)(a1 + 32) = v18;
    return;
  }
  uint64_t v3 = v2;
  id v4 = [v2 aa_formattedUsername];
  if (v4)
  {
    id v5 = v4;
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;

    uint64_t v9 = self;
    id v10 = [v9 sharedInstance];
    unsigned int v11 = [v10 phoneAsAppleIDForAccount:v3];

    if (v11)
    {
      if (qword_101636B18 != -1) {
        swift_once();
      }
      uint64_t v12 = type metadata accessor for Logger();
      sub_100010324(v12, (uint64_t)qword_10170DED0);
      unint64_t v13 = Logger.logObject.getter();
      os_log_type_t v14 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v13, v14))
      {
        uint64_t v15 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v15 = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, v14, "Account is MAKO", v15, 2u);
        swift_slowDealloc();
      }

      uint64_t v16 = 0;
      uint64_t v17 = 0;
      char v18 = 1;
      goto LABEL_26;
    }
    id v19 = [v9 sharedInstance];
    id v20 = [v19 additionalInfoForAccount:v3];

    if (!v20) {
      goto LABEL_21;
    }
    uint64_t v21 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    if (*(void *)(v21 + 16) && (uint64_t v22 = sub_100723FF4(0x6D754E656E6F6870, 0xEC00000073726562), (v23 & 1) != 0))
    {
      sub_10012F428(*(void *)(v21 + 56) + 32 * v22, (uint64_t)&v33);
      swift_bridgeObjectRelease();
      if (*((void *)&v34 + 1))
      {
        sub_10000588C(&qword_101647418);
        if ((swift_dynamicCast() & 1) == 0) {
          goto LABEL_21;
        }
        if (*(void *)(v31 + 16))
        {
          uint64_t v24 = *(void *)(v31 + 32);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          if (*(void *)(v24 + 16)
            && (uint64_t v25 = sub_100723FF4(0x6D754E656E6F6870, 0xEB00000000726562), (v26 & 1) != 0))
          {
            sub_10012F428(*(void *)(v24 + 56) + 32 * v25, (uint64_t)&v33);
          }
          else
          {
            long long v33 = 0u;
            long long v34 = 0u;
          }
          swift_bridgeObjectRelease();
          if (*((void *)&v34 + 1))
          {
            if (swift_dynamicCast())
            {

              uint64_t v16 = v31;
              uint64_t v17 = v32;
              char v18 = 2;
              goto LABEL_26;
            }
LABEL_21:
            if (qword_101636B18 != -1) {
              swift_once();
            }
            uint64_t v27 = type metadata accessor for Logger();
            sub_100010324(v27, (uint64_t)qword_10170DED0);
            os_log_type_t v28 = Logger.logObject.getter();
            os_log_type_t v29 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v28, v29))
            {
              uint64_t v30 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v30 = 0;
              _os_log_impl((void *)&_mh_execute_header, v28, v29, "Account has no phone number associated", v30, 2u);
              swift_slowDealloc();
            }

            uint64_t v16 = 0;
            uint64_t v17 = 0;
            char v18 = 0;
            goto LABEL_26;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          long long v33 = 0u;
          long long v34 = 0u;
        }
      }
    }
    else
    {
      long long v33 = 0u;
      long long v34 = 0u;
      swift_bridgeObjectRelease();
    }
    sub_10001DAB4((uint64_t)&v33, (uint64_t *)&unk_101644360);
    goto LABEL_21;
  }
  __break(1u);
}

void *sub_100CBCA7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v68 = a3;
  uint64_t v67 = a2;
  uint64_t v4 = sub_10000588C(&qword_10165C0B8);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v66 = (uint64_t)&v61 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v65 = (uint64_t)&v61 - v11;
  __chkstk_darwin(v10);
  uint64_t v84 = (uint64_t)&v61 - v12;
  uint64_t v91 = type metadata accessor for EncryptedData();
  uint64_t v13 = *(void *)(v91 - 8);
  __chkstk_darwin(v91);
  unint64_t v89 = (char *)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = _swiftEmptyArrayStorage;
  int64_t v85 = *(void *)(a1 + 16);
  if (v85)
  {
    int v64 = v7;
    uint64_t v92 = _swiftEmptyArrayStorage;
    sub_1000B7070(0, v85, 0);
    os_log_type_t v63 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56);
    uint64_t result = v92;
    unint64_t v87 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
    unint64_t v88 = (void (**)(uint64_t, uint64_t))(v13 + 8);
    uint64_t v16 = (unint64_t *)(a1 + 48);
    while (1)
    {
      unint64_t v83 = result;
      uint64_t v17 = *(v16 - 1);
      uint64_t v77 = *(v16 - 2);
      unint64_t v19 = *v16;
      uint64_t v18 = v16[1];
      unint64_t v20 = v16[2];
      uint64_t v21 = v16[3];
      unint64_t v22 = v16[4];
      uint64_t v23 = v16[5];
      unint64_t v24 = v16[6];
      sub_1000361E0(v17, *v16);
      unint64_t v80 = v20;
      uint64_t v81 = v18;
      sub_100037A38(v18, v20);
      uint64_t v82 = v21;
      uint64_t v25 = v21;
      unint64_t v26 = v22;
      sub_100037A38(v25, v22);
      sub_100037A38(v23, v24);
      uint64_t v27 = v90;
      unint64_t v78 = v19;
      uint64_t v79 = v17;
      Data.spEncrypt(key:ivLength:)();
      uint64_t v90 = v27;
      if (v27) {
        break;
      }
      unint64_t v76 = v24;
      type metadata accessor for PropertyListEncoder();
      swift_allocObject();
      uint64_t v28 = PropertyListEncoder.init()();
      sub_100CBFAFC(&qword_10165C0C0, (void (*)(uint64_t))&type metadata accessor for EncryptedData);
      uint64_t v29 = v90;
      uint64_t v30 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
      uint64_t v90 = v29;
      if (v29)
      {
        (*v88)((uint64_t)v89, v91);
        swift_release();
        unint64_t v24 = v76;
        break;
      }
      unint64_t v32 = v31;
      uint64_t v72 = v28;
      uint64_t v75 = v23;
      long long v33 = *v63;
      uint64_t v34 = v84;
      uint64_t v86 = v30;
      uint64_t v35 = v91;
      v33(v84, 1, 1, v91);
      uint64_t v36 = v65;
      sub_10001D074(v34, v65, &qword_10165C0B8);
      uint64_t v37 = *v87;
      uint64_t v38 = v35;
      uint64_t v39 = v86;
      LODWORD(v34) = (*v87)(v36, 1, v38);
      unint64_t v74 = v32;
      sub_1000361E0(v39, v32);
      if (v34 == 1)
      {
        sub_10001DAB4(v36, &qword_10165C0B8);
        uint64_t v40 = 0;
        unint64_t v73 = 0xF000000000000000;
      }
      else
      {
        uint64_t v40 = EncryptedData.cipherText.getter();
        unint64_t v73 = v41;
        (*v88)(v36, v91);
      }
      uint64_t v42 = v66;
      uint64_t v43 = v84;
      sub_10001D074(v84, v66, &qword_10165C0B8);
      if (v37(v42, 1, v91) == 1)
      {
        sub_10001DAB4(v42, &qword_10165C0B8);
        uint64_t v71 = 0;
        unint64_t v70 = 0xF000000000000000;
      }
      else
      {
        uint64_t v71 = EncryptedData.initializationVector.getter();
        unint64_t v70 = v44;
        (*v88)(v42, v91);
      }
      uint64_t v45 = (uint64_t)v64;
      sub_10001D074(v43, (uint64_t)v64, &qword_10165C0B8);
      if (v37(v45, 1, v91) == 1)
      {
        unint64_t v46 = v74;
        sub_10001CFB8(v39, v74);
        sub_10001DAB4(v43, &qword_10165C0B8);
        sub_10001DAB4(v45, &qword_10165C0B8);
        swift_release();
        uint64_t v47 = 0;
        uint64_t v48 = *v88;
        unint64_t v69 = 0xF000000000000000;
      }
      else
      {
        unint64_t v62 = v26;
        uint64_t v49 = v43;
        uint64_t v50 = v45;
        uint64_t v51 = EncryptedData.tag.getter();
        unint64_t v69 = v52;
        unint64_t v46 = v74;
        sub_10001CFB8(v86, v74);
        uint64_t v53 = v49;
        uint64_t v54 = v91;
        uint64_t v55 = v88;
        uint64_t v47 = v51;
        sub_10001DAB4(v53, &qword_10165C0B8);
        uint64_t v48 = *v55;
        uint64_t v56 = v54;
        uint64_t v39 = v86;
        (*v55)(v50, v56);
        unint64_t v26 = v62;
        swift_release();
      }
      v48((uint64_t)v89, v91);
      sub_10001CFB8(v79, v78);
      sub_100037A24(v81, v80);
      sub_100037A24(v82, v26);
      sub_100037A24(v75, v76);
      uint64_t result = v83;
      uint64_t v92 = v83;
      unint64_t v58 = v83[2];
      unint64_t v57 = v83[3];
      if (v58 >= v57 >> 1)
      {
        sub_1000B7070(v57 > 1, v58 + 1, 1);
        uint64_t result = v92;
      }
      v16 += 9;
      result[2] = v58 + 1;
      unint64_t v59 = &result[9 * v58];
      v59[4] = v77;
      v59[5] = v39;
      v59[6] = v46;
      v59[7] = v40;
      uint64_t v60 = v71;
      v59[8] = v73;
      v59[9] = v60;
      v59[10] = v70;
      v59[11] = v47;
      v59[12] = v69;
      if (!--v85) {
        return result;
      }
    }
    sub_10001CFB8(v79, v78);
    sub_100037A24(v81, v80);
    sub_100037A24(v82, v22);
    sub_100037A24(v23, v24);
    return (void *)swift_release();
  }
  return result;
}

uint64_t sub_100CBD0EC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100CBD154(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100CBD1B4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100CBD220(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v66 = a2;
  uint64_t v72 = (char *)a1;
  unint64_t v4 = type metadata accessor for Date();
  unint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v59 - v9;
  unint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  os_log_type_t v63 = (uint32_t *)((char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v65 = (char *)&v59 - v16;
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v59 - v17;
  uint64_t v19 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v20 = v19 - 8;
  __chkstk_darwin(v19);
  unint64_t v22 = (char *)&v59 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100CBD0EC((uint64_t)v72, (uint64_t)v22, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  uint64_t v23 = &v22[*(int *)(v20 + 28)];
  uint64_t v69 = v12;
  unint64_t v70 = v11;
  uint64_t v67 = *(void (**)(char *, char *, unint64_t))(v12 + 16);
  uint64_t v68 = (char *)(v12 + 16);
  v67(v18, v23, v11);
  uint64_t v24 = *(int *)(v20 + 40);
  int v64 = v22;
  uint64_t v25 = *(void (**)(char *, char *, unint64_t))(v5 + 16);
  unint64_t v71 = v4;
  v25(v10, &v22[v24], v4);
  unint64_t v26 = *a3;
  uint64_t v27 = (uint64_t)a3 + *(int *)(sub_10000588C(&qword_10163F7B0) + 36);
  if (v26) {
    unint64_t v28 = ~(v26 / 0x60);
  }
  else {
    unint64_t v28 = 0;
  }
  uint64_t v72 = v18;
  uint64_t v29 = sub_1008B5B84((uint64_t)v18, (uint64_t)v10, v27, 1);
  if (v29 < 0)
  {
    __break(1u);
    goto LABEL_38;
  }
  unint64_t v11 = v29 + v28;
  DateInterval.start.getter();
  uint64_t v30 = (uint64_t)v72;
  uint64_t v31 = (uint64_t)v10;
  unint64_t v32 = sub_1008B5B84((uint64_t)v72, (uint64_t)v10, (uint64_t)v8, 1);
  uint64_t v18 = *(char **)(v5 + 8);
  unint64_t v33 = v71;
  ((void (*)(char *, unint64_t))v18)(v8, v71);
  DateInterval.end.getter();
  uint64_t v66 = v31;
  unint64_t v4 = sub_1008B5B84(v30, v31, (uint64_t)v8, 1);
  ((void (*)(char *, unint64_t))v18)(v8, v33);
  p_ivar_base_size = &AnalyticsEvent.ivar_base_size;
  unint64_t v26 = v5 + 8;
  if ((v11 & 0x8000000000000000) != 0 || v11 < v32)
  {
    uint64_t v8 = v65;
    if ((v32 & 0x8000000000000000) != 0)
    {
      __break(1u);
LABEL_42:
      __break(1u);
    }
    else
    {
      unint64_t v5 = v32 - v11;
      if (!__OFSUB__(v32, v11))
      {
        if ((v5 & 0x8000000000000000) == 0)
        {
          if ((uint64_t)v11 >= 1 && v4 < v11)
          {
            if (v5 <= v4) {
              unint64_t v46 = v4;
            }
            else {
              unint64_t v46 = v32 - v11;
            }
            goto LABEL_30;
          }
          goto LABEL_25;
        }
LABEL_45:
        uint64_t result = _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        return result;
      }
    }
    __break(1u);
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
  if (qword_101636DC0 != -1) {
    goto LABEL_40;
  }
  while (1)
  {
    uint64_t v35 = type metadata accessor for Logger();
    sub_100010324(v35, (uint64_t)qword_10170E588);
    uint64_t v36 = v63;
    unint64_t v37 = v70;
    v67((char *)v63, v72, v70);
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.default.getter();
    int v40 = v39;
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v41 = swift_slowAlloc();
      uint64_t v42 = swift_slowAlloc();
      uint64_t v61 = v42;
      *(_DWORD *)uint64_t v41 = 141558787;
      uint64_t v73 = 1752392040;
      uint64_t v74 = v42;
      unint64_t v62 = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v41 + 12) = 2081;
      int v60 = v40;
      sub_100CBFAFC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      os_log_t v59 = v38;
      uint64_t v43 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v73 = sub_1008FA0F0(v43, v44, &v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint32_t *, unint64_t))(v69 + 8))(v36, v37);
      *(_WORD *)(v41 + 22) = 2048;
      uint64_t v73 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v41 + 32) = 2048;
      uint64_t v73 = v11;
      unint64_t v26 = v62;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      os_log_t v45 = v59;
      _os_log_impl((void *)&_mh_execute_header, v59, (os_log_type_t)v60, "        Buckets clamped for beacon %{private,mask.hash}s,starting secondary index %llu <= factor %lld -- clamping to 1.", (uint8_t *)v41, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      p_ivar_base_size = (_DWORD *)(&AnalyticsEvent + 8);
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(uint32_t *, unint64_t))(v69 + 8))(v36, v37);
    }
    unint64_t v5 = 1;
    uint64_t v8 = v65;
    if (v11 && v4 < v11)
    {
      uint64_t v47 = v4 <= 1 ? 1 : v4;
      os_log_type_t v63 = (uint32_t *)v47;
      unint64_t v5 = 1;
    }
    else
    {
LABEL_25:
      if ((v4 & 0x8000000000000000) != 0) {
        goto LABEL_42;
      }
      unint64_t v46 = v4 - v11;
      if (__OFSUB__(v4, v11)) {
        goto LABEL_44;
      }
      if ((v46 & 0x8000000000000000) != 0) {
        goto LABEL_45;
      }
      if (v5 > v46) {
        unint64_t v46 = v5;
      }
LABEL_30:
      os_log_type_t v63 = (uint32_t *)v46;
    }
    unint64_t v4 = v70;
    if (*((void *)p_ivar_base_size + 440) != -1) {
LABEL_38:
    }
      swift_once();
    uint64_t v48 = type metadata accessor for Logger();
    sub_100010324(v48, (uint64_t)qword_10170E588);
    v67(v8, v72, v4);
    unint64_t v32 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.default.getter();
    if (os_log_type_enabled((os_log_t)v32, v49))
    {
      uint64_t v50 = swift_slowAlloc();
      uint64_t v68 = v18;
      uint64_t v51 = v8;
      uint64_t v52 = v50;
      uint64_t v53 = swift_slowAlloc();
      uint64_t v67 = (void (*)(char *, char *, unint64_t))v53;
      *(_DWORD *)uint64_t v52 = 141559043;
      uint64_t v73 = 1752392040;
      uint64_t v74 = v53;
      unint64_t v62 = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v52 + 12) = 2081;
      uint64_t v65 = (char *)v11;
      sub_100CBFAFC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v54 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v73 = sub_1008FA0F0(v54, v55, &v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v56 = *(void (**)(char *, unint64_t))(v69 + 8);
      unint64_t v11 = (v69 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      unint64_t v57 = v51;
      uint64_t v18 = v68;
      v56(v57, v4);
      *(_WORD *)(v52 + 22) = 2048;
      uint64_t v73 = v5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v52 + 32) = 2048;
      p_ivar_base_size = v63;
      uint64_t v73 = (uint64_t)v63;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v52 + 42) = 2048;
      unint64_t v4 = v70;
      uint64_t v73 = (uint64_t)v65;
      unint64_t v26 = v62;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)v32, v49, "        Buckets for beacon %{private,mask.hash}s,secondary index %llu - %llu (factor %lld).", (uint8_t *)v52, 0x34u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v56 = *(void (**)(char *, unint64_t))(v69 + 8);
      unint64_t v11 = (v69 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      v56(v8, v4);

      p_ivar_base_size = v63;
    }
    ((void (*)(uint64_t, unint64_t))v18)(v66, v71);
    v56(v72, v4);
    if ((unint64_t)p_ivar_base_size >= v5) {
      break;
    }
    __break(1u);
LABEL_40:
    swift_once();
  }
  sub_100CBD154((uint64_t)v64, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  return v5;
}

uint64_t sub_100CBDB68(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v7 = type metadata accessor for EncryptedData();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v11 = a3[1];
  if (v11 >> 60 == 15)
  {
    sub_100130078();
    swift_allocError();
    *uint64_t v12 = 9;
    swift_willThrow();
  }
  else
  {
    uint64_t v13 = *a3;
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    sub_1000361E0(v13, v11);
    PropertyListEncoder.init()();
    uint64_t v21 = a1;
    uint64_t v22 = a2;
    sub_100CBEF1C();
    uint64_t v14 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    if (!v3)
    {
      uint64_t v16 = v14;
      unint64_t v17 = v15;
      sub_1000361E0(v13, v11);
      Data.spEncrypt(key:ivLength:)();
      unint64_t v20 = v17;
      uint64_t v23 = v8;
      sub_100037A24(v13, v11);
      sub_100CBFAFC(&qword_10165C0C0, (void (*)(uint64_t))&type metadata accessor for EncryptedData);
      uint64_t v8 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
      (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v7);
      sub_10001CFB8(v16, v20);
    }
    swift_release();
    sub_100037A24(v13, v11);
  }
  return v8;
}

uint64_t type metadata accessor for SharingCircleKeyManager.DelegatedKeychain(uint64_t a1)
{
  return sub_1000F4EA4(a1, (uint64_t *)&unk_10165C4A0);
}

uint64_t sub_100CBDE4C()
{
  return sub_100CBFCE4((uint64_t (*)(uint64_t, uint64_t))sub_100E5AB7C);
}

uint64_t sub_100CBDE64(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_100033F68;
  return sub_100CAC36C(a1, a2, v2);
}

uint64_t sub_100CBDF14()
{
  return sub_100CBFCE4((uint64_t (*)(uint64_t, uint64_t))sub_100E58EC8);
}

unint64_t sub_100CBDF2C()
{
  unint64_t result = qword_10165C0F0;
  if (!qword_10165C0F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10165C0F0);
  }
  return result;
}

uint64_t type metadata accessor for SharingCircleKeyManager.Instruction(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_10165C3F0);
}

uint64_t sub_100CBDFA4(uint64_t a1)
{
  return a1;
}

uint64_t sub_100CBDFDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 != 0xFF) {
    return sub_100CBDFF0(a1, a2, a3, a4, a5);
  }
  return a1;
}

uint64_t sub_100CBDFF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 >= 2u)
  {
    if (a5 != 2) {
      return result;
    }
    swift_bridgeObjectRelease();
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_100CBE050()
{
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 24);

  return _swift_deallocObject(v0, 64, 7);
}

id sub_100CBE090@<X0>(void *a1@<X8>)
{
  return sub_100E633D4(*(void *)(v1 + 16), (void *)(v1 + 24), a1);
}

uint64_t sub_100CBE09C(uint64_t a1)
{
  return sub_10012A0AC(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100CBE0AC()
{
  return sub_100CBFCE4((uint64_t (*)(uint64_t, uint64_t))sub_100E61414);
}

uint64_t sub_100CBE0C8()
{
  return sub_100CBFCE4(sub_100E5F4E8);
}

uint64_t sub_100CBE0E4@<X0>(uint64_t a1@<X8>)
{
  return sub_100CBEBF0(type metadata accessor for SharingCircleKeyManager.Instruction, type metadata accessor for SharingCircleKeyManager.Instruction, a1);
}

uint64_t sub_100CBE110()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100CBE148()
{
  return sub_10012AF48(*(uint64_t (**)(uint64_t))(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100CBE154()
{
  uint64_t v1 = (int *)(type metadata accessor for SharingCircleKeyManager.Instruction(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  v8(v6 + v1[7], v7);
  v8(v6 + v1[8], v7);
  v8(v6 + v1[9], v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = v6 + v1[14];
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_100CBE2E4()
{
  return sub_100CBE3FC((uint64_t (*)(unint64_t))sub_100C9FBA8);
}

uint64_t sub_100CBE300()
{
  return sub_100CBE3FC((uint64_t (*)(unint64_t))sub_100C9FC24);
}

uint64_t sub_100CBE318()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBE328()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBE338()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBE348()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBE358()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100CBE368()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBE378()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBE388()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBE398()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBE3A8()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100CBE3B8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBE3C8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBE3DC()
{
  return _swift_deallocObject(v0, 17, 7);
}

unint64_t sub_100CBE3EC()
{
  return sub_1012638E4(*(unsigned char *)(v0 + 16));
}

uint64_t sub_100CBE3FC(uint64_t (*a1)(unint64_t))
{
  uint64_t v3 = *(void *)(type metadata accessor for SharingCircleKeyManager.Instruction(0) - 8);
  return a1(v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)));
}

uint64_t sub_100CBE470()
{
  swift_errorRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100CBE4A8()
{
  return sub_100C9FCA0();
}

uint64_t sub_100CBE4B0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBE4C0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBE4D0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBE4E0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBE4F0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBE500()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBE510()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100CBE520()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBE530()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBE540()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBE550()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBE560()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100CBE570()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBE580()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBE590()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBE5A0()
{
  return _swift_deallocObject(v0, 17, 7);
}

void *sub_100CBE5B0(void *a1, void (*a2)(void, void), void (*a3)(uint64_t, uint64_t))
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = a1[5];
  uint64_t v8 = a1[6];
  uint64_t v9 = a1[7];
  uint64_t v10 = a1[8];
  a2(a1[1], a1[2]);
  a3(v5, v6);
  a3(v7, v8);
  a3(v9, v10);
  return a1;
}

uint64_t sub_100CBE648@<X0>(uint64_t a1@<X8>)
{
  return sub_100CBEBF0(type metadata accessor for KeyDropInterface.KeyPackage, type metadata accessor for KeyDropInterface.KeyPackage, a1);
}

uint64_t sub_100CBE674()
{
  return sub_10012AF88(*(uint64_t (**)(uint64_t))(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100CBE67C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBE68C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBE69C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBE6AC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBE6C4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBE6D4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBE6E4()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBE6F4()
{
  return _swift_deallocObject(v0, 17, 7);
}

unint64_t sub_100CBE704()
{
  unint64_t result = qword_10165C168;
  if (!qword_10165C168)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10165C168);
  }
  return result;
}

uint64_t sub_100CBE760()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBE770()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBE780()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBE790()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBE7A8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBE7B8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBE7C8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBE7D8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBE7F8()
{
  return sub_10012B080(*(void (**)(uint64_t *__return_ptr))(v0 + 16));
}

uint64_t sub_100CBE800()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBE810()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBE820()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBE830()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBE840()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBE850()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBE86C@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for KeyDropInterface.KeyPackage(0) - 8);
  return sub_100C9FAC8(v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)), a1);
}

uint64_t sub_100CBE8D0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBE8E0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBE8F0()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBE900()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBE910()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBE920()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBE93C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBE94C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBE95C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBE96C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBE97C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBE98C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBE9A8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBE9B8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBE9C8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBE9D8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBE9E8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBE9F8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBEA0C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBEA1C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBEA2C()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100CBEA3C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100CBEA4C()
{
  return sub_100C9B9B0(*(void *)(v0 + 24), *(double *)(v0 + 16));
}

uint64_t sub_100CBEA5C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBEA6C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBEA7C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBEA8C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBEA9C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBEAAC()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBEAC4()
{
  uint64_t v1 = type metadata accessor for KeyDropInterface.KeyPackage(0);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v5 = v2 | 7;
  uint64_t v6 = v0 + v3 + *(int *)(v1 + 20);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
  v8(v6, v7);
  uint64_t v9 = type metadata accessor for KeyDropInterface.KeyAlignment(0);
  v8(v6 + *(int *)(v9 + 24), v7);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_100CBEBF0@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a1(0) - 8);
  return sub_100CBD0EC(v3 + ((*(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)), a3, a2);
}

uint64_t sub_100CBEC6C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBEC7C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBEC8C()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100CBEC9C()
{
  return _swift_deallocObject(v0, 17, 7);
}

BOOL sub_100CBECAC(unint64_t *a1)
{
  return sub_100CB3244(a1, *(unsigned char *)(v1 + 16), *(void *)(v1 + 24));
}

BOOL sub_100CBECD0(unint64_t *a1)
{
  uint64_t v2 = *(void *)(v1 + 16);
  unint64_t v3 = *a1;
  return v3 >= *(void *)(v2 + *(int *)(type metadata accessor for KeyDropInterface.KeyAlignment(0) + 20));
}

uint64_t sub_100CBED1C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_101654A38);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_100CBED88()
{
  return sub_100CBFCE4((uint64_t (*)(uint64_t, uint64_t))sub_100E5F1B0);
}

uint64_t sub_100CBEDA0(uint64_t a1)
{
  return a1;
}

uint64_t sub_100CBEDF8(uint64_t a1)
{
  return a1;
}

unint64_t sub_100CBEE50()
{
  unint64_t result = qword_10165C188;
  if (!qword_10165C188)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165C188);
  }
  return result;
}

unint64_t sub_100CBEEA4()
{
  unint64_t result = qword_10165C190;
  if (!qword_10165C190)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165C190);
  }
  return result;
}

uint64_t sub_100CBEEFC()
{
  return sub_100CBFCE4((uint64_t (*)(uint64_t, uint64_t))sub_100E5F4A8);
}

unint64_t sub_100CBEF1C()
{
  unint64_t result = qword_10165C1A8;
  if (!qword_10165C1A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165C1A8);
  }
  return result;
}

unint64_t sub_100CBEF70()
{
  unint64_t result = qword_10165C1B0;
  if (!qword_10165C1B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165C1B0);
  }
  return result;
}

unint64_t sub_100CBEFC4()
{
  unint64_t result = qword_10165C1C8;
  if (!qword_10165C1C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165C1C8);
  }
  return result;
}

uint64_t sub_100CBF018(uint64_t a1)
{
  return a1;
}

uint64_t sub_100CBF070()
{
  swift_release();

  return _swift_deallocObject(v0, 25, 7);
}

uint64_t sub_100CBF0B0()
{
  uint64_t v2 = *(void *)(type metadata accessor for SharedBeaconRecord(0) - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)(type metadata accessor for SharingCircleKeyManager.Instruction(0) - 8);
  unint64_t v6 = (v4 + *(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v0 + 16);
  uint64_t v8 = v0 + v3;
  uint64_t v9 = v0 + v4;
  uint64_t v10 = *(void *)(v0 + v4);
  uint64_t v11 = *(void *)(v9 + 8);
  uint64_t v12 = *(void *)(v9 + 16);
  uint64_t v13 = v0 + v6;
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v14;
  *uint64_t v14 = v1;
  v14[1] = sub_100033F68;
  return sub_100C4B120(v7, v8, v10, v11, v12, v13);
}

uint64_t sub_100CBF220()
{
  uint64_t v1 = (int *)type metadata accessor for SharedBeaconRecord(0);
  uint64_t v22 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v20 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v2 = (int *)type metadata accessor for SharingCircleKeyManager.Instruction(0);
  uint64_t v19 = *(unsigned __int8 *)(*((void *)v2 - 1) + 80);
  uint64_t v18 = *(void *)(*((void *)v2 - 1) + 64);
  swift_release();
  uint64_t v23 = v0;
  uint64_t v21 = (v22 + 24) & ~v22;
  uint64_t v3 = v0 + v21;
  sub_10001CFB8(*(void *)(v0 + v21), *(void *)(v0 + v21 + 8));
  uint64_t v4 = v0 + v21 + v1[5];
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  v7(v0 + v21 + v1[6], v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = v0 + v21 + v1[18];
  uint64_t v9 = type metadata accessor for Date();
  unint64_t v17 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);
  v17(v8, v9);
  uint64_t v10 = v0 + v21 + v1[19];
  uint64_t v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v11(v3 + v1[19], 1, v5)) {
    v7(v10, v5);
  }
  uint64_t v12 = v3 + v1[20];
  uint64_t v13 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13))
  {
    uint64_t v14 = v12 + *(int *)(v13 + 20);
    if (!v11(v14, 1, v5)) {
      v7(v14, v5);
    }
  }
  unint64_t v15 = (((v20 + v21 + 7) & 0xFFFFFFFFFFFFFFF8) + v19 + 24) & ~v19;
  swift_bridgeObjectRelease();
  v7(v23 + v15, v5);
  v7(v23 + v15 + v2[5], v5);
  v7(v23 + v15 + v2[6], v5);
  v7(v23 + v15 + v2[7], v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v17(v23 + v15 + v2[12], v9);

  return _swift_deallocObject(v23, v15 + v18, v22 | v19 | 7);
}

uint64_t sub_100CBF5E8()
{
  uint64_t v2 = *(void *)(type metadata accessor for SharedBeaconRecord(0) - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)(type metadata accessor for SharingCircleKeyManager.Instruction(0) - 8);
  unint64_t v6 = (v4 + *(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v0 + 16);
  uint64_t v8 = v0 + v3;
  uint64_t v9 = v0 + v4;
  uint64_t v10 = *(void *)(v0 + v4);
  uint64_t v11 = *(void *)(v9 + 8);
  uint64_t v12 = *(void *)(v9 + 16);
  uint64_t v13 = v0 + v6;
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v14;
  *uint64_t v14 = v1;
  v14[1] = sub_10001D2E4;
  return sub_100C4AADC(v7, v8, v10, v11, v12, v13);
}

uint64_t sub_100CBF758()
{
  uint64_t v2 = *(void *)(type metadata accessor for SharedBeaconRecord(0) - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)(type metadata accessor for SharingCircleKeyManager.Instruction(0) - 8);
  unint64_t v6 = (v4 + *(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v0 + 16);
  uint64_t v8 = v0 + v3;
  uint64_t v9 = v0 + v4;
  uint64_t v10 = *(void *)(v0 + v4);
  uint64_t v11 = *(void *)(v9 + 8);
  uint64_t v12 = *(void *)(v9 + 16);
  uint64_t v13 = v0 + v6;
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v14;
  *uint64_t v14 = v1;
  v14[1] = sub_100033F68;
  return sub_100C4A498(v7, v8, v10, v11, v12, v13);
}

uint64_t type metadata accessor for SharingCircleKeyManager.SharingCircleContent.Member(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_10165C358);
}

unint64_t sub_100CBF8E0()
{
  unint64_t result = qword_10165C208;
  if (!qword_10165C208)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165C208);
  }
  return result;
}

void sub_100CBF934(unsigned __int8 *a1@<X0>, void *a2@<X8>)
{
  sub_100C3596C(a1, v2[2], v2[3], v2[4], a2);
}

uint64_t sub_100CBF954()
{
  return static UUID.== infix(_:_:)() & 1;
}

uint64_t sub_100CBF9A8(uint64_t a1, uint64_t a2)
{
  unint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *unint64_t v6 = v3;
  v6[1] = sub_100033F68;
  return sub_100C31534(a1, a2, v2);
}

unint64_t sub_100CBFA58()
{
  unint64_t result = qword_10165C228;
  if (!qword_10165C228)
  {
    sub_10000592C(&qword_10163FBC0);
    sub_100CBFAFC(&qword_10165C230, (void (*)(uint64_t))type metadata accessor for KeyDropInterface.KeyPackage);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165C228);
  }
  return result;
}

uint64_t sub_100CBFAFC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100CBFB44(uint64_t a1, uint64_t a2)
{
  unint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *unint64_t v6 = v3;
  v6[1] = sub_10001D2E4;
  return sub_100C2D6F0(a1, a2, v2);
}

uint64_t sub_100CBFBF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100C2D9E8(a1, *(uint64_t **)(v2 + 24), *(void *)(v2 + 32), a2);
}

uint64_t sub_100CBFC10(uint64_t a1, uint64_t a2)
{
  unint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *unint64_t v6 = v3;
  v6[1] = sub_100033F68;
  return sub_100C2D340(a1, a2, v2);
}

uint64_t sub_100CBFCBC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100C2D638(a1, *(uint64_t **)(v2 + 24), *(void *)(v2 + 32), a2);
}

uint64_t sub_100CBFCE4(uint64_t (*a1)(uint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return a1(v3, v4);
}

uint64_t *sub_100CBFD6C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_1000361E0(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  }
  return a1;
}

uint64_t sub_100CBFE54(uint64_t a1, uint64_t a2)
{
  sub_10001CFB8(*(void *)a1, *(void *)(a1 + 8));
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UUID();
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t *sub_100CBFED0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000361E0(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

uint64_t *sub_100CBFF68(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000361E0(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10001CFB8(v8, v9);
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

uint64_t *sub_100CC0008(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_10001CFB8(v6, v7);
  uint64_t v8 = *(int *)(a3 + 20);
  unint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_100CC0098(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100CC00AC);
}

uint64_t sub_100CC00AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for UUID();
    unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_100CC0168(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100CC017C);
}

void *sub_100CC017C(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *uint64_t result = 0;
    result[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_10165C2C8);
}

uint64_t sub_100CC024C()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *sub_100CC02E4(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (void *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 24);
    *((unsigned char *)a1 + *(int *)(a3 + 20)) = *((unsigned char *)a2 + *(int *)(a3 + 20));
    uint64_t v9 = (void *)((char *)a1 + v8);
    uint64_t v10 = (void *)((char *)a2 + v8);
    uint64_t v11 = v10[1];
    *uint64_t v9 = *v10;
    v9[1] = v11;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_100CC03C4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_bridgeObjectRelease();
}

uint64_t sub_100CC043C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100CC04CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100CC0574(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  return a1;
}

uint64_t sub_100CC05F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(unsigned char *)(a1 + *(int *)(a3 + 20)) = *(unsigned char *)(a2 + *(int *)(a3 + 20));
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100CC068C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100CC06A0);
}

uint64_t sub_100CC06A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_100CC0764(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100CC0778);
}

uint64_t sub_100CC0778(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t sub_100CC0838()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for SharingCircleKeyManager.SharingCircleContent()
{
  return &type metadata for SharingCircleKeyManager.SharingCircleContent;
}

ValueMetadata *type metadata accessor for SharingCircleKeyManager.KeyDropMemberInfo()
{
  return &type metadata for SharingCircleKeyManager.KeyDropMemberInfo;
}

unsigned char *storeEnumTagSinglePayload for SharingCircleKeyManager.TaskPriority(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100CC09C4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SharingCircleKeyManager.TaskPriority()
{
  return &type metadata for SharingCircleKeyManager.TaskPriority;
}

uint64_t sub_100CC09FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 a5)
{
  if (a5 >= 2u)
  {
    if (a5 != 2) {
      return result;
    }
    swift_bridgeObjectRetain();
  }

  return swift_bridgeObjectRetain();
}

uint64_t destroy for SharingCircleKeyManager.AccountIdentifier(uint64_t a1)
{
  return sub_100CBDFF0(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
}

uint64_t initializeWithCopy for SharingCircleKeyManager.AccountIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned __int8 v7 = *(unsigned char *)(a2 + 32);
  sub_100CC09FC(*(void *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for SharingCircleKeyManager.AccountIdentifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  unsigned __int8 v7 = *(unsigned char *)(a2 + 32);
  sub_100CC09FC(*(void *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  unsigned __int8 v12 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v7;
  sub_100CBDFF0(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for SharingCircleKeyManager.AccountIdentifier(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  unsigned __int8 v9 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v3;
  sub_100CBDFF0(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for SharingCircleKeyManager.AccountIdentifier(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SharingCircleKeyManager.AccountIdentifier(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)uint64_t result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_100CC0C24(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

uint64_t sub_100CC0C2C(uint64_t result, char a2)
{
  *(unsigned char *)(result + 32) = a2;
  return result;
}

ValueMetadata *type metadata accessor for SharingCircleKeyManager.AccountIdentifier()
{
  return &type metadata for SharingCircleKeyManager.AccountIdentifier;
}

void *sub_100CC0C44(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    a1 = (void *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    long long v8 = *(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((void *)((char *)a1 + a3[5]), (void *)((char *)a2 + a3[5]), v7);
    v8((void *)((char *)a1 + a3[6]), (void *)((char *)a2 + a3[6]), v7);
    v8((void *)((char *)a1 + a3[7]), (void *)((char *)a2 + a3[7]), v7);
    uint64_t v9 = a3[9];
    *(void *)((char *)a1 + a3[8]) = *(void *)((char *)a2 + a3[8]);
    *((unsigned char *)a1 + v9) = *((unsigned char *)a2 + v9);
    uint64_t v10 = a3[11];
    *((unsigned char *)a1 + a3[10]) = *((unsigned char *)a2 + a3[10]);
    *(void *)((char *)a1 + v10) = *(void *)((char *)a2 + v10);
    uint64_t v11 = a3[12];
    unsigned __int8 v12 = (char *)a1 + v11;
    uint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = type metadata accessor for Date();
    unint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v15(v12, v13, v14);
  }
  return a1;
}

uint64_t sub_100CC0DF0(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + a2[5], v4);
  v5(a1 + a2[6], v4);
  v5(a1 + a2[7], v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = a1 + a2[12];
  uint64_t v7 = type metadata accessor for Date();
  long long v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);

  return v8(v6, v7);
}

uint64_t sub_100CC0F0C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v7(a1 + a3[6], a2 + a3[6], v6);
  v7(a1 + a3[7], a2 + a3[7], v6);
  uint64_t v8 = a3[9];
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  *(unsigned char *)(a1 + v8) = *(unsigned char *)(a2 + v8);
  uint64_t v9 = a3[11];
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  *(void *)(a1 + v9) = *(void *)(a2 + v9);
  uint64_t v10 = a3[12];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v14(v11, v12, v13);
  return a1;
}

uint64_t sub_100CC1068(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v7(a1 + a3[6], a2 + a3[6], v6);
  v7(a1 + a3[7], a2 + a3[7], v6);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v8 = a3[12];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 24))(v9, v10, v11);
  return a1;
}

uint64_t sub_100CC11D0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v7(a1 + a3[6], a2 + a3[6], v6);
  v7(a1 + a3[7], a2 + a3[7], v6);
  uint64_t v8 = a3[9];
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  *(unsigned char *)(a1 + v8) = *(unsigned char *)(a2 + v8);
  uint64_t v9 = a3[11];
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  *(void *)(a1 + v9) = *(void *)(a2 + v9);
  uint64_t v10 = a3[12];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  return a1;
}

uint64_t sub_100CC1310(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  v7(a1 + a3[6], a2 + a3[6], v6);
  v7(a1 + a3[7], a2 + a3[7], v6);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRelease();
  uint64_t v8 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v8) = *(unsigned char *)(a2 + v8);
  *(void *)(a1 + a3[11]) = *(void *)(a2 + a3[11]);
  swift_bridgeObjectRelease();
  uint64_t v9 = a3[12];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 40))(v10, v11, v12);
  return a1;
}

uint64_t sub_100CC1464(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100CC1478);
}

uint64_t sub_100CC1478(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 32));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
  else
  {
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a3 + 48);
    return v12(v14, a2, v13);
  }
}

uint64_t sub_100CC15A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100CC15B8);
}

uint64_t sub_100CC15B8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + *(int *)(a4 + 32)) = (a2 - 1);
  }
  else
  {
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 48);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

uint64_t sub_100CC16E4()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Date();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *sub_100CC17D4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    unint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for SymmetricKey256();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 1, v11))
    {
      uint64_t v14 = sub_10000588C(&qword_10163B070);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    uint64_t v15 = *(int *)(a3 + 24);
    uint64_t v16 = (char *)v7 + v15;
    unint64_t v17 = (char *)a2 + v15;
    unint64_t v18 = *((void *)v17 + 1);
    if (v18 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
    }
    else
    {
      uint64_t v19 = *(void *)v17;
      sub_1000361E0(*(void *)v17, *((void *)v17 + 1));
      *(void *)uint64_t v16 = v19;
      *((void *)v16 + 1) = v18;
    }
  }
  return v7;
}

uint64_t sub_100CC19A4(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for SymmetricKey256();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  if (!result) {
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  uint64_t v8 = (uint64_t *)(a1 + *(int *)(a2 + 24));
  unint64_t v9 = v8[1];
  if (v9 >> 60 != 15)
  {
    uint64_t v10 = *v8;
    return sub_10001CFB8(v10, v9);
  }
  return result;
}

void *sub_100CC1A9C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SymmetricKey256();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  swift_bridgeObjectRetain();
  if (v11(v8, 1, v9))
  {
    uint64_t v12 = sub_10000588C(&qword_10163B070);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v13 = *(int *)(a3 + 24);
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  unint64_t v16 = *((void *)v15 + 1);
  if (v16 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
  }
  else
  {
    uint64_t v17 = *(void *)v15;
    sub_1000361E0(*(void *)v15, *((void *)v15 + 1));
    *(void *)uint64_t v14 = v17;
    *((void *)v14 + 1) = v16;
  }
  return a1;
}

void *sub_100CC1C0C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SymmetricKey256();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = sub_10000588C(&qword_10163B070);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = *(int *)(a3 + 24);
  unint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (void *)((char *)a2 + v15);
  unint64_t v18 = *(void *)((char *)a2 + v15 + 8);
  if (*(void *)((char *)a1 + v15 + 8) >> 60 != 15)
  {
    if (v18 >> 60 != 15)
    {
      uint64_t v20 = *v17;
      sub_1000361E0(v20, v18);
      uint64_t v21 = *v16;
      unint64_t v22 = v16[1];
      *unint64_t v16 = v20;
      v16[1] = v18;
      sub_10001CFB8(v21, v22);
      return a1;
    }
    sub_100BB9078((uint64_t)v16);
    goto LABEL_12;
  }
  if (v18 >> 60 == 15)
  {
LABEL_12:
    *(_OWORD *)unint64_t v16 = *(_OWORD *)v17;
    return a1;
  }
  uint64_t v19 = *v17;
  sub_1000361E0(v19, v18);
  *unint64_t v16 = v19;
  v16[1] = v18;
  return a1;
}

void *sub_100CC1E24(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SymmetricKey256();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = sub_10000588C(&qword_10163B070);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  *(_OWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

void *sub_100CC1F54(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for SymmetricKey256();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v13)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = sub_10000588C(&qword_10163B070);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = *(int *)(a3 + 24);
  unint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (void *)((char *)a2 + v15);
  unint64_t v18 = *(void *)((char *)a1 + v15 + 8);
  if (v18 >> 60 != 15)
  {
    unint64_t v19 = v17[1];
    if (v19 >> 60 != 15)
    {
      uint64_t v20 = *v16;
      *unint64_t v16 = *v17;
      v16[1] = v19;
      sub_10001CFB8(v20, v18);
      return a1;
    }
    sub_100BB9078((uint64_t)v16);
  }
  *(_OWORD *)unint64_t v16 = *(_OWORD *)v17;
  return a1;
}

uint64_t sub_100CC2134(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100CC2148);
}

uint64_t sub_100CC2148(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_10000588C(&qword_10163B070);
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_100CC21FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100CC2210);
}

void *sub_100CC2210(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_10000588C(&qword_10163B070);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_100CC22BC()
{
  sub_100CC2360();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_100CC2360()
{
  if (!qword_10165C4B0)
  {
    type metadata accessor for SymmetricKey256();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10165C4B0);
    }
  }
}

uint64_t getEnumTagSinglePayload for SharingCircleKeyManager.SharingCircleKeyManagerError(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xE5) {
    goto LABEL_17;
  }
  if (a2 + 27 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 27) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 27;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 27;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 27;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x1C;
  int v8 = v6 - 28;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for SharingCircleKeyManager.SharingCircleKeyManagerError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 27 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 27) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xE5) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xE4)
  {
    unsigned int v6 = ((a2 - 229) >> 8) + 1;
    *uint64_t result = a2 + 27;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100CC2514);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 27;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SharingCircleKeyManager.SharingCircleKeyManagerError()
{
  return &type metadata for SharingCircleKeyManager.SharingCircleKeyManagerError;
}

unint64_t sub_100CC2550()
{
  unint64_t result = qword_10165C4E8;
  if (!qword_10165C4E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165C4E8);
  }
  return result;
}

unint64_t sub_100CC25A8()
{
  unint64_t result = qword_10165C4F0;
  if (!qword_10165C4F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165C4F0);
  }
  return result;
}

unint64_t sub_100CC25FC()
{
  unint64_t result = qword_10165C500;
  if (!qword_10165C500)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165C500);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for SharingCircleKeyManager.KeyDropMemberInfo.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100CC26ECLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for SharingCircleKeyManager.KeyDropMemberInfo.CodingKeys()
{
  return &type metadata for SharingCircleKeyManager.KeyDropMemberInfo.CodingKeys;
}

unint64_t sub_100CC2728()
{
  unint64_t result = qword_10165C510;
  if (!qword_10165C510)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165C510);
  }
  return result;
}

unint64_t sub_100CC2780()
{
  unint64_t result = qword_10165C518;
  if (!qword_10165C518)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165C518);
  }
  return result;
}

unint64_t sub_100CC27D8()
{
  unint64_t result = qword_10165C520;
  if (!qword_10165C520)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165C520);
  }
  return result;
}

uint64_t sub_100CC282C(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000011 && a2 == 0x80000001013F7C50)
  {
    swift_bridgeObjectRelease();
    char v2 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t sub_100CC2A6C@<X0>(int a1@<W0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, unsigned char *a7@<X8>, double a8@<D0>, double a9@<D1>, double a10@<D2>)
{
  int v48 = a6;
  uint64_t v41 = a5;
  int v40 = a3;
  int v44 = a1;
  int v46 = a3;
  uint64_t v47 = type metadata accessor for UUID();
  uint64_t v45 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  uint64_t v17 = &v39[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v18 = sub_10000588C(&qword_101657910);
  __chkstk_darwin(v18 - 8);
  uint64_t v20 = &v39[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v21 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v21 - 8);
  uint64_t v23 = &v39[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v24 = type metadata accessor for Date();
  uint64_t v25 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v27 = &v39[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0)];
  unint64_t v28 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v25 + 16);
  uint64_t v43 = a2;
  v28(v27, a2, v24);
  uint64_t v29 = a4;
  uint64_t v30 = a4;
  uint64_t v31 = v41;
  sub_10001D074(v30, (uint64_t)v23, (uint64_t *)&unk_10163AC90);
  uint64_t v42 = v20;
  sub_10001D074(v31, (uint64_t)v20, &qword_101657910);
  if ((v40 & 0xFE) == 0xC)
  {
    if (qword_101637028 != -1) {
      swift_once();
    }
    uint64_t v32 = v47;
    uint64_t v33 = sub_100010324(v47, (uint64_t)qword_10170EB58);
    uint64_t v34 = v45;
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v45 + 16))(v17, v33, v32);
  }
  else
  {
    UUID.init()();
    uint64_t v32 = v47;
    uint64_t v34 = v45;
  }
  sub_10001DAB4(v31, &qword_101657910);
  sub_10001DAB4(v29, (uint64_t *)&unk_10163AC90);
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v43, v24);
  *a7 = v44;
  uint64_t v35 = (int *)type metadata accessor for RawSearchResult();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v25 + 32))(&a7[v35[5]], v27, v24);
  *(double *)&a7[v35[6]] = a8;
  *(double *)&a7[v35[7]] = a9;
  *(double *)&a7[v35[8]] = a10;
  a7[v35[9]] = v46;
  sub_10001D608((uint64_t)v23, (uint64_t)&a7[v35[10]], (uint64_t *)&unk_10163AC90);
  sub_10001D608((uint64_t)v42, (uint64_t)&a7[v35[11]], &qword_101657910);
  uint64_t result = (*(uint64_t (**)(unsigned char *, unsigned char *, uint64_t))(v34 + 32))(&a7[v35[12]], v17, v32);
  unint64_t v37 = &a7[v35[13]];
  char v38 = BYTE1(v48);
  *unint64_t v37 = v48;
  v37[1] = v38 & 1;
  return result;
}

double sub_100CC2E50(uint64_t a1)
{
  return *(double *)(v1 + *(int *)(a1 + 24));
}

double sub_100CC2E5C(uint64_t a1)
{
  return *(double *)(v1 + *(int *)(a1 + 28));
}

double sub_100CC2E68(uint64_t a1)
{
  return *(double *)(v1 + *(int *)(a1 + 32));
}

uint64_t sub_100CC2E74()
{
  uint64_t v0 = type metadata accessor for UUID();
  sub_10001E384(v0, qword_10170EB58);
  sub_100010324(v0, (uint64_t)qword_10170EB58);
  return UUID.init()();
}

void sub_100CC2EC0()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  uint64_t v27 = *(void *)(v2 - 8);
  uint64_t v28 = v2;
  __chkstk_darwin(v2);
  uint64_t v26 = (uint64_t)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000588C(&qword_101657910);
  __chkstk_darwin(v4 - 8);
  unsigned int v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v11 - 8);
  int v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  Hasher._combine(_:)(*v0);
  uint64_t v14 = (int *)type metadata accessor for RawSearchResult();
  sub_100CC6598((unint64_t *)&unk_10163ADF0, (void (*)(uint64_t))&type metadata accessor for Date);
  dispatch thunk of Hashable.hash(into:)();
  if ((*(void *)&v0[v14[6]] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v15 = *(void *)&v0[v14[6]];
  }
  else {
    Swift::UInt64 v15 = 0;
  }
  Hasher._combine(_:)(v15);
  if ((*(void *)&v0[v14[7]] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v16 = *(void *)&v0[v14[7]];
  }
  else {
    Swift::UInt64 v16 = 0;
  }
  Hasher._combine(_:)(v16);
  if ((*(void *)&v0[v14[8]] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v17 = *(void *)&v0[v14[8]];
  }
  else {
    Swift::UInt64 v17 = 0;
  }
  Hasher._combine(_:)(v17);
  Hasher._combine(_:)(v0[v14[9]]);
  sub_10001D074((uint64_t)&v0[v14[10]], (uint64_t)v13, (uint64_t *)&unk_10163AC90);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v13, 1, v7) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v13, v7);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }
  sub_10001D074((uint64_t)&v0[v14[11]], (uint64_t)v6, &qword_101657910);
  uint64_t v18 = v28;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v6, 1, v28) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v19 = (uint64_t)v6;
    uint64_t v20 = v26;
    sub_100CC45A4(v19, v26);
    Hasher._combine(_:)(1u);
    type metadata accessor for UUID();
    sub_100CC6598(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of Hashable.hash(into:)();
    uint64_t v21 = (void *)(v20 + *(int *)(v18 + 20));
    sub_10001CD44(v21, v21[3]);
    dispatch thunk of RawRepresentable.rawValue.getter();
    Hasher._combine(_:)(v29);
    uint64_t v22 = v21[3];
    uint64_t v23 = v21[4];
    sub_10001CD44(v21, v22);
    sub_100EB7B8C(v22, v23);
    String.hash(into:)();
    swift_bridgeObjectRelease();
    sub_100CC4B54(v20, type metadata accessor for BeaconKeyManager.IndexInformation);
  }
  type metadata accessor for UUID();
  sub_100CC6598(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v24 = &v1[v14[13]];
  if (v24[1])
  {
    Swift::UInt8 v25 = 0;
  }
  else
  {
    Swift::UInt8 v25 = *v24;
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v25);
}

unint64_t sub_100CC341C(char a1)
{
  unint64_t result = 0x737574617473;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6D617473656D6974;
      break;
    case 2:
      unint64_t result = 0x656475746974616CLL;
      break;
    case 3:
      unint64_t result = 0x64757469676E6F6CLL;
      break;
    case 4:
      unint64_t result = 0xD000000000000012;
      break;
    case 5:
      unint64_t result = 0x656372756F73;
      break;
    case 6:
      unint64_t result = 0x657461446E616373;
      break;
    case 7:
      unint64_t result = 0xD000000000000010;
      break;
    case 8:
      unint64_t result = 0x696669746E656469;
      break;
    case 9:
      unint64_t result = 1953393000;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100CC3560(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_10165C600);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_100CC6544();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11[31] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = type metadata accessor for RawSearchResult();
    v11[30] = 1;
    type metadata accessor for Date();
    sub_100CC6598((unint64_t *)&unk_10163ACE0, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v11[29] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[28] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[27] = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[26] = *(unsigned char *)(v3 + *(int *)(v9 + 36));
    v11[25] = 5;
    sub_100429928();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v11[24] = 6;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v11[15] = 7;
    type metadata accessor for BeaconKeyManager.IndexInformation(0);
    sub_100CC6598(&qword_10165C608, (void (*)(uint64_t))type metadata accessor for BeaconKeyManager.IndexInformation);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v11[14] = 8;
    type metadata accessor for UUID();
    sub_100CC6598(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v11[13] = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100CC394C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v39 = a2;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v42 = *(void *)(v3 - 8);
  uint64_t v43 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_101657910);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = type metadata accessor for Date();
  uint64_t v44 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  int v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = sub_10000588C(&qword_10165C5E8);
  uint64_t v14 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  Swift::UInt64 v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = type metadata accessor for RawSearchResult();
  __chkstk_darwin(v48);
  os_log_type_t v49 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = a1[3];
  uint64_t v45 = a1;
  sub_10001CD44(a1, v18);
  sub_100CC6544();
  int v40 = v16;
  uint64_t v19 = v46;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v19) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v45);
  }
  unint64_t v37 = v8;
  char v38 = v11;
  uint64_t v36 = v5;
  uint64_t v46 = v14;
  char v60 = 0;
  char v20 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v21 = v49;
  unsigned char *v49 = v20;
  char v59 = 1;
  sub_100CC6598(&qword_10163ACC0, (void (*)(uint64_t))&type metadata accessor for Date);
  uint64_t v22 = v47;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v23 = (int *)v48;
  (*(void (**)(unsigned char *, char *, uint64_t))(v44 + 32))(&v21[*(int *)(v48 + 20)], v13, v22);
  char v58 = 2;
  KeyedDecodingContainer.decode(_:forKey:)();
  *(void *)&v21[v23[6]] = v24;
  char v57 = 3;
  KeyedDecodingContainer.decode(_:forKey:)();
  Swift::UInt8 v25 = v21;
  *(void *)&v21[v23[7]] = v26;
  char v56 = 4;
  KeyedDecodingContainer.decode(_:forKey:)();
  *(void *)&v21[v23[8]] = v27;
  char v54 = 5;
  sub_100429778();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v21[v23[9]] = v55;
  char v53 = 6;
  uint64_t v28 = (uint64_t)v38;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  sub_10001D608(v28, (uint64_t)&v25[v23[10]], (uint64_t *)&unk_10163AC90);
  type metadata accessor for BeaconKeyManager.IndexInformation(0);
  char v52 = 7;
  sub_100CC6598(&qword_10165C5F8, (void (*)(uint64_t))type metadata accessor for BeaconKeyManager.IndexInformation);
  uint64_t v29 = (uint64_t)v37;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  sub_10001D608(v29, (uint64_t)&v25[v23[11]], &qword_101657910);
  char v51 = 8;
  sub_100CC6598((unint64_t *)&qword_10163B010, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v30 = v36;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(unsigned char *, char *, uint64_t))(v42 + 32))(&v25[v23[12]], v30, v43);
  char v50 = 9;
  __int16 v31 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v46 + 8))(v40, v41);
  uint64_t v32 = (uint64_t)v49;
  uint64_t v33 = &v49[*(int *)(v48 + 52)];
  *uint64_t v33 = v31;
  v33[1] = HIBYTE(v31) & 1;
  sub_100CC4AF0(v32, v39);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v45);
  return sub_100CC4B54(v32, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
}

unint64_t sub_100CC4160()
{
  return sub_100CC341C(*v0);
}

uint64_t sub_100CC4168@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100CC67EC(a1, a2);
  *a3 = result;
  return result;
}

void sub_100CC4190(unsigned char *a1@<X8>)
{
  *a1 = 10;
}

uint64_t sub_100CC419C(uint64_t a1)
{
  unint64_t v2 = sub_100CC6544();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100CC41D8(uint64_t a1)
{
  unint64_t v2 = sub_100CC6544();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100CC4214@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100CC394C(a1, a2);
}

uint64_t sub_100CC422C(void *a1)
{
  return sub_100CC3560(a1);
}

Swift::Int sub_100CC4244()
{
  return Hasher._finalize()();
}

Swift::Int sub_100CC4288()
{
  return Hasher._finalize()();
}

void sub_100CC42C8(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_101342130;
  uint64_t v4 = (int *)type metadata accessor for RawSearchResult();
  uint64_t v5 = *(void *)(a1 + v4[6]);
  *(void *)(v3 + 56) = &type metadata for Double;
  *(void *)(v3 + 64) = &protocol witness table for Double;
  *(void *)(v3 + 32) = v5;
  uint64_t v6 = String.init(format:_:)();
  uint64_t v8 = v7;
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_101342130;
  uint64_t v10 = *(void *)(a1 + v4[7]);
  *(void *)(v9 + 56) = &type metadata for Double;
  *(void *)(v9 + 64) = &protocol witness table for Double;
  *(void *)(v9 + 32) = v10;
  uint64_t v11 = String.init(format:_:)();
  int v13 = v12;
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_101342130;
  uint64_t v15 = *(void *)(a1 + v4[8]);
  *(void *)(v14 + 56) = &type metadata for Double;
  *(void *)(v14 + 64) = &protocol witness table for Double;
  *(void *)(v14 + 32) = v15;
  uint64_t v16 = String.init(format:_:)();
  uint64_t v18 = v17;
  type metadata accessor for Date();
  sub_100CC6598((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
  uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v29 = v19;
  v20._countAndFlagsBits = 8250;
  v20._object = (void *)0xE200000000000000;
  String.append(_:)(v20);
  v21._countAndFlagsBits = v6;
  v21._object = v8;
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._countAndFlagsBits = 47;
  v22._object = (void *)0xE100000000000000;
  String.append(_:)(v22);
  v23._countAndFlagsBits = v11;
  v23._object = v13;
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  v24._countAndFlagsBits = 10272;
  v24._object = (void *)0xE200000000000000;
  String.append(_:)(v24);
  v25._countAndFlagsBits = v16;
  v25._object = v18;
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  v26._countAndFlagsBits = 41;
  v26._object = (void *)0xE100000000000000;
  String.append(_:)(v26);
  *a2 = v28;
  a2[1] = v29;
}

uint64_t sub_100CC4508()
{
  sub_100CC42C8(v0, &v3);
  return v3;
}

uint64_t type metadata accessor for RawSearchResult()
{
  uint64_t result = qword_10165C580;
  if (!qword_10165C580) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100CC45A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100CC4608(unsigned __int8 *a1, unsigned __int8 *a2)
{
  char v52 = (int *)type metadata accessor for RawSearchResult();
  uint64_t v4 = __chkstk_darwin(v52);
  char v51 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  char v50 = (char *)&v47 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  os_log_type_t v49 = (char *)&v47 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v48 = (char *)&v47 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v47 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v47 - v16;
  uint64_t v18 = __chkstk_darwin(v15);
  Swift::String v20 = (char *)&v47 - v19;
  uint64_t v21 = __chkstk_darwin(v18);
  Swift::String v23 = (char *)&v47 - v22;
  uint64_t v24 = __chkstk_darwin(v21);
  Swift::String v26 = (char *)&v47 - v25;
  __chkstk_darwin(v24);
  uint64_t v28 = (char *)&v47 - v27;
  int v29 = *a1;
  int v30 = *a2;
  sub_100CC4AF0((uint64_t)a1, (uint64_t)&v47 - v27);
  sub_100CC4AF0((uint64_t)a2, (uint64_t)v26);
  if (v29 != v30)
  {
    sub_100CC4B54((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
    sub_100CC4B54((uint64_t)v28, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
    sub_100CC4AF0((uint64_t)a1, (uint64_t)v23);
    sub_100CC4AF0((uint64_t)a2, (uint64_t)v20);
    goto LABEL_8;
  }
  char v31 = static Date.== infix(_:_:)();
  sub_100CC4B54((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
  sub_100CC4B54((uint64_t)v28, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
  sub_100CC4AF0((uint64_t)a1, (uint64_t)v23);
  sub_100CC4AF0((uint64_t)a2, (uint64_t)v20);
  if ((v31 & 1) == 0)
  {
LABEL_8:
    sub_100CC4B54((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
    sub_100CC4B54((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
    sub_100CC4AF0((uint64_t)a1, (uint64_t)v17);
    sub_100CC4AF0((uint64_t)a2, (uint64_t)v14);
    uint64_t v36 = (uint64_t)v50;
    uint64_t v35 = (uint64_t)v51;
    uint64_t v38 = (uint64_t)v48;
    uint64_t v37 = (uint64_t)v49;
    goto LABEL_9;
  }
  uint64_t v32 = v52;
  double v33 = *(double *)&v23[v52[6]];
  sub_100CC4B54((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
  double v34 = *(double *)&v20[v32[6]];
  sub_100CC4B54((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
  sub_100CC4AF0((uint64_t)a1, (uint64_t)v17);
  sub_100CC4AF0((uint64_t)a2, (uint64_t)v14);
  uint64_t v36 = (uint64_t)v50;
  uint64_t v35 = (uint64_t)v51;
  uint64_t v38 = (uint64_t)v48;
  uint64_t v37 = (uint64_t)v49;
  if (v33 != v34)
  {
LABEL_9:
    sub_100CC4B54((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
    sub_100CC4B54((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
    sub_100CC4AF0((uint64_t)a1, v38);
    sub_100CC4AF0((uint64_t)a2, v37);
    goto LABEL_10;
  }
  uint64_t v39 = v52;
  double v40 = *(double *)&v17[v52[7]];
  sub_100CC4B54((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
  double v41 = *(double *)&v14[v39[7]];
  sub_100CC4B54((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
  sub_100CC4AF0((uint64_t)a1, v38);
  sub_100CC4AF0((uint64_t)a2, v37);
  if (v40 != v41)
  {
LABEL_10:
    sub_100CC4B54(v37, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
    sub_100CC4B54(v38, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
    sub_100CC4AF0((uint64_t)a1, v36);
    sub_100CC4AF0((uint64_t)a2, v35);
    goto LABEL_11;
  }
  uint64_t v42 = v52;
  double v43 = *(double *)(v38 + v52[8]);
  sub_100CC4B54(v38, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
  double v44 = *(double *)(v37 + v42[8]);
  sub_100CC4B54(v37, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
  sub_100CC4AF0((uint64_t)a1, v36);
  sub_100CC4AF0((uint64_t)a2, v35);
  if (v43 != v44)
  {
LABEL_11:
    char v45 = 0;
    goto LABEL_12;
  }
  char v45 = static UUID.== infix(_:_:)();
LABEL_12:
  sub_100CC4B54(v35, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
  sub_100CC4B54(v36, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
  return v45 & 1;
}

uint64_t sub_100CC4AF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RawSearchResult();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100CC4B54(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void *sub_100CC4BB4(unsigned char *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    void *v4 = *a2;
    uint64_t v4 = (void *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *(unsigned char *)a2;
    uint64_t v7 = a3[5];
    uint64_t v8 = &a1[v7];
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for Date();
    uint64_t v11 = *(void *)(v10 - 8);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
    v12(v8, v9, v10);
    uint64_t v13 = a3[7];
    *(void *)((char *)v4 + a3[6]) = *(void *)((char *)a2 + a3[6]);
    *(void *)((char *)v4 + v13) = *(void *)((char *)a2 + v13);
    uint64_t v14 = a3[9];
    *(void *)((char *)v4 + a3[8]) = *(void *)((char *)a2 + a3[8]);
    *((unsigned char *)v4 + v14) = *((unsigned char *)a2 + v14);
    uint64_t v15 = a3[10];
    uint64_t v16 = (char *)v4 + v15;
    uint64_t v17 = (char *)a2 + v15;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))((char *)a2 + v15, 1, v10))
    {
      uint64_t v18 = sub_10000588C((uint64_t *)&unk_10163AC90);
      memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      v12(v16, v17, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v16, 0, 1, v10);
    }
    uint64_t v20 = a3[11];
    uint64_t v21 = (char *)v4 + v20;
    uint64_t v22 = (char *)a2 + v20;
    uint64_t v23 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
    uint64_t v24 = *(void *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      uint64_t v25 = sub_10000588C(&qword_101657910);
      memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      uint64_t v26 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16))(v21, v22, v26);
      uint64_t v27 = *(int *)(v23 + 20);
      long long v28 = *(_OWORD *)&v22[v27 + 24];
      *(_OWORD *)&v21[v27 + 24] = v28;
      (**(void (***)(void))(v28 - 8))();
      (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
    }
    uint64_t v29 = a3[12];
    int v30 = (char *)v4 + v29;
    char v31 = (char *)a2 + v29;
    uint64_t v32 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 16))(v30, v31, v32);
    *(_WORD *)((char *)v4 + a3[13]) = *(_WORD *)((char *)a2 + a3[13]);
  }
  return v4;
}

uint64_t sub_100CC4F2C(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  uint64_t v8 = a1 + a2[10];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1, v5)) {
    v7(v8, v5);
  }
  uint64_t v9 = a1 + a2[11];
  uint64_t v10 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10))
  {
    uint64_t v11 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v9, v11);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v9 + *(int *)(v10 + 20));
  }
  uint64_t v12 = a1 + a2[12];
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8);

  return v14(v12, v13);
}

unsigned char *sub_100CC50F0(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 16);
  v11(v7, v8, v9);
  uint64_t v12 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  *(void *)&a1[v12] = *(void *)&a2[v12];
  uint64_t v13 = a3[9];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  a1[v13] = a2[v13];
  uint64_t v14 = a3[10];
  uint64_t v15 = &a1[v14];
  uint64_t v16 = &a2[v14];
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48))(&a2[v14], 1, v9))
  {
    uint64_t v17 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    v11(v15, v16, v9);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v10 + 56))(v15, 0, 1, v9);
  }
  uint64_t v18 = a3[11];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  uint64_t v21 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    uint64_t v23 = sub_10000588C(&qword_101657910);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    uint64_t v24 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 16))(v19, v20, v24);
    uint64_t v25 = *(int *)(v21 + 20);
    long long v26 = *(_OWORD *)&v20[v25 + 24];
    *(_OWORD *)&v19[v25 + 24] = v26;
    (**(void (***)(void))(v26 - 8))();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  uint64_t v27 = a3[12];
  long long v28 = &a1[v27];
  uint64_t v29 = &a2[v27];
  uint64_t v30 = type metadata accessor for UUID();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v30 - 8) + 16))(v28, v29, v30);
  *(_WORD *)&a1[a3[13]] = *(_WORD *)&a2[a3[13]];
  return a1;
}

unsigned char *sub_100CC5418(unsigned char *a1, unsigned char *a2, int *a3)
{
  uint64_t v4 = a2;
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  *(void *)&a1[a3[6]] = *(void *)&v4[a3[6]];
  *(void *)&a1[a3[7]] = *(void *)&v4[a3[7]];
  *(void *)&a1[a3[8]] = *(void *)&v4[a3[8]];
  a1[a3[9]] = v4[a3[9]];
  uint64_t v37 = v4;
  uint64_t v38 = a3;
  uint64_t v12 = a3[10];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &v4[v12];
  uint64_t v15 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48);
  LODWORD(v4) = v15(&a1[v12], 1, v9);
  int v16 = v15(v14, 1, v9);
  if (v4)
  {
    if (!v16)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 16))(v13, v14, v9);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v10 + 56))(v13, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v16)
  {
    (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v13, v9);
LABEL_6:
    uint64_t v17 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  v11(v13, v14, v9);
LABEL_7:
  uint64_t v18 = v38[11];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &v37[v18];
  uint64_t v21 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  int v24 = v23(v19, 1, v21);
  int v25 = v23(v20, 1, v21);
  if (!v24)
  {
    if (!v25)
    {
      uint64_t v36 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 24))(v19, v20, v36);
      sub_10026A7C0((uint64_t *)&v19[*(int *)(v21 + 20)], (uint64_t *)&v20[*(int *)(v21 + 20)]);
      goto LABEL_13;
    }
    sub_100CC4B54((uint64_t)v19, type metadata accessor for BeaconKeyManager.IndexInformation);
    goto LABEL_12;
  }
  if (v25)
  {
LABEL_12:
    uint64_t v30 = sub_10000588C(&qword_101657910);
    memcpy(v19, v20, *(void *)(*(void *)(v30 - 8) + 64));
    goto LABEL_13;
  }
  uint64_t v26 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16))(v19, v20, v26);
  uint64_t v27 = *(int *)(v21 + 20);
  long long v28 = &v19[v27];
  uint64_t v29 = *(void *)&v20[v27 + 24];
  *((void *)v28 + 3) = v29;
  *((void *)v28 + 4) = *(void *)&v20[v27 + 32];
  (**(void (***)(void))(v29 - 8))();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
LABEL_13:
  uint64_t v31 = v38[12];
  uint64_t v32 = &a1[v31];
  double v33 = &v37[v31];
  uint64_t v34 = type metadata accessor for UUID();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v34 - 8) + 24))(v32, v33, v34);
  *(_WORD *)&a1[v38[13]] = *(_WORD *)&v37[v38[13]];
  return a1;
}

unsigned char *sub_100CC584C(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 32);
  v11(v7, v8, v9);
  uint64_t v12 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  *(void *)&a1[v12] = *(void *)&a2[v12];
  uint64_t v13 = a3[9];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  a1[v13] = a2[v13];
  uint64_t v14 = a3[10];
  uint64_t v15 = &a1[v14];
  int v16 = &a2[v14];
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48))(&a2[v14], 1, v9))
  {
    uint64_t v17 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    v11(v15, v16, v9);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v10 + 56))(v15, 0, 1, v9);
  }
  uint64_t v18 = a3[11];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  uint64_t v21 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21))
  {
    uint64_t v23 = sub_10000588C(&qword_101657910);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    uint64_t v24 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 32))(v19, v20, v24);
    uint64_t v25 = *(int *)(v21 + 20);
    uint64_t v26 = &v19[v25];
    uint64_t v27 = &v20[v25];
    long long v28 = *((_OWORD *)v27 + 1);
    *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
    *((_OWORD *)v26 + 1) = v28;
    *((void *)v26 + 4) = *((void *)v27 + 4);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  uint64_t v29 = a3[12];
  uint64_t v30 = &a1[v29];
  uint64_t v31 = &a2[v29];
  uint64_t v32 = type metadata accessor for UUID();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v32 - 8) + 32))(v30, v31, v32);
  *(_WORD *)&a1[a3[13]] = *(_WORD *)&a2[a3[13]];
  return a1;
}

unsigned char *sub_100CC5B3C(unsigned char *a1, unsigned char *a2, int *a3)
{
  uint64_t v4 = a2;
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 40);
  v11(v7, v8, v9);
  uint64_t v12 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&v4[a3[6]];
  *(void *)&a1[v12] = *(void *)&v4[v12];
  uint64_t v13 = a3[9];
  *(void *)&a1[a3[8]] = *(void *)&v4[a3[8]];
  a1[v13] = v4[v13];
  double v44 = v4;
  char v45 = a3;
  uint64_t v14 = a3[10];
  uint64_t v15 = &a1[v14];
  int v16 = &v4[v14];
  uint64_t v17 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48);
  LODWORD(v4) = v17(&a1[v14], 1, v9);
  int v18 = v17(v16, 1, v9);
  if (v4)
  {
    if (!v18)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v10 + 32))(v15, v16, v9);
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v10 + 56))(v15, 0, 1, v9);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v18)
  {
    (*(void (**)(unsigned char *, uint64_t))(v10 + 8))(v15, v9);
LABEL_6:
    uint64_t v19 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  v11(v15, v16, v9);
LABEL_7:
  uint64_t v20 = v45[11];
  uint64_t v21 = &a1[v20];
  uint64_t v22 = &v44[v20];
  uint64_t v23 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 48);
  int v26 = v25(v21, 1, v23);
  int v27 = v25(v22, 1, v23);
  if (!v26)
  {
    if (!v27)
    {
      uint64_t v39 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v39 - 8) + 40))(v21, v22, v39);
      uint64_t v40 = *(int *)(v23 + 20);
      uint64_t v41 = (uint64_t)&v21[v40];
      uint64_t v42 = &v22[v40];
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v41);
      long long v43 = *((_OWORD *)v42 + 1);
      *(_OWORD *)uint64_t v41 = *(_OWORD *)v42;
      *(_OWORD *)(v41 + 16) = v43;
      *(void *)(v41 + 32) = *((void *)v42 + 4);
      goto LABEL_13;
    }
    sub_100CC4B54((uint64_t)v21, type metadata accessor for BeaconKeyManager.IndexInformation);
    goto LABEL_12;
  }
  if (v27)
  {
LABEL_12:
    uint64_t v33 = sub_10000588C(&qword_101657910);
    memcpy(v21, v22, *(void *)(*(void *)(v33 - 8) + 64));
    goto LABEL_13;
  }
  uint64_t v28 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 32))(v21, v22, v28);
  uint64_t v29 = *(int *)(v23 + 20);
  uint64_t v30 = &v21[v29];
  uint64_t v31 = &v22[v29];
  long long v32 = *((_OWORD *)v31 + 1);
  *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
  *((_OWORD *)v30 + 1) = v32;
  *((void *)v30 + 4) = *((void *)v31 + 4);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
LABEL_13:
  uint64_t v34 = v45[12];
  uint64_t v35 = &a1[v34];
  uint64_t v36 = &v44[v34];
  uint64_t v37 = type metadata accessor for UUID();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v37 - 8) + 40))(v35, v36, v37);
  *(_WORD *)&a1[v45[13]] = *(_WORD *)&v44[v45[13]];
  return a1;
}

uint64_t sub_100CC5F40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100CC5F54);
}

uint64_t sub_100CC5F54(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84) == a2)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 - 8);
    uint64_t v9 = a3[5];
LABEL_11:
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    return v14(a1 + v9, a2, v7);
  }
  if (a2 == 237)
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + a3[9]);
    if (v10 >= 0x13) {
      return v10 - 18;
    }
    else {
      return 0;
    }
  }
  uint64_t v12 = sub_10000588C((uint64_t *)&unk_10163AC90);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v7 = v12;
    uint64_t v8 = *(void *)(v12 - 8);
    uint64_t v9 = a3[10];
    goto LABEL_11;
  }
  uint64_t v13 = sub_10000588C(&qword_101657910);
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a2)
  {
    uint64_t v7 = v13;
    uint64_t v8 = *(void *)(v13 - 8);
    uint64_t v9 = a3[11];
    goto LABEL_11;
  }
  uint64_t v15 = type metadata accessor for UUID();
  int v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48);
  uint64_t v17 = v15;
  uint64_t v18 = a1 + a3[12];

  return v16(v18, a2, v17);
}

uint64_t sub_100CC611C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100CC6130);
}

uint64_t sub_100CC6130(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result = type metadata accessor for Date();
  if (*(_DWORD *)(*(void *)(result - 8) + 84) == a3)
  {
    uint64_t v9 = result;
    uint64_t v10 = *(void *)(result - 8);
    uint64_t v11 = a4[5];
LABEL_9:
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
    return v14(a1 + v11, a2, a2, v9);
  }
  if (a3 == 237)
  {
    *(unsigned char *)(a1 + a4[9]) = a2 + 18;
    return result;
  }
  uint64_t v12 = sub_10000588C((uint64_t *)&unk_10163AC90);
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
  {
    uint64_t v9 = v12;
    uint64_t v10 = *(void *)(v12 - 8);
    uint64_t v11 = a4[10];
    goto LABEL_9;
  }
  uint64_t v13 = sub_10000588C(&qword_101657910);
  if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
  {
    uint64_t v9 = v13;
    uint64_t v10 = *(void *)(v13 - 8);
    uint64_t v11 = a4[11];
    goto LABEL_9;
  }
  uint64_t v15 = type metadata accessor for UUID();
  int v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
  uint64_t v17 = v15;
  uint64_t v18 = a1 + a4[12];

  return v16(v18, a2, a2, v17);
}

void sub_100CC62FC()
{
  type metadata accessor for Date();
  if (v0 <= 0x3F)
  {
    sub_100CC64A8(319, (unint64_t *)&qword_10165C690, (void (*)(uint64_t))&type metadata accessor for Date);
    if (v1 <= 0x3F)
    {
      sub_100CC64A8(319, (unint64_t *)&unk_10165C590, (void (*)(uint64_t))type metadata accessor for BeaconKeyManager.IndexInformation);
      if (v2 <= 0x3F)
      {
        type metadata accessor for UUID();
        if (v3 <= 0x3F) {
          swift_initStructMetadata();
        }
      }
    }
  }
}

void sub_100CC64A8(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_100CC64FC()
{
  return sub_100CC6598(&qword_10165C5E0, (void (*)(uint64_t))type metadata accessor for RawSearchResult);
}

unint64_t sub_100CC6544()
{
  unint64_t result = qword_10165C5F0;
  if (!qword_10165C5F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165C5F0);
  }
  return result;
}

uint64_t sub_100CC6598(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for RawSearchResult.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF6)
  {
    unsigned int v6 = ((a2 - 247) >> 8) + 1;
    *uint64_t result = a2 + 9;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100CC66ACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 9;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RawSearchResult.CodingKeys()
{
  return &type metadata for RawSearchResult.CodingKeys;
}

unint64_t sub_100CC66E8()
{
  unint64_t result = qword_10165C610;
  if (!qword_10165C610)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165C610);
  }
  return result;
}

unint64_t sub_100CC6740()
{
  unint64_t result = qword_10165C618;
  if (!qword_10165C618)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165C618);
  }
  return result;
}

unint64_t sub_100CC6798()
{
  unint64_t result = qword_10165C620;
  if (!qword_10165C620)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165C620);
  }
  return result;
}

uint64_t sub_100CC67EC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x737574617473 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6D617473656D6974 && a2 == 0xE900000000000070 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656475746974616CLL && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x64757469676E6F6CLL && a2 == 0xE900000000000065 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001013EF030 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x656372756F73 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x657461446E616373 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000101416C00 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 1953393000 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 9;
    }
    else {
      return 10;
    }
  }
}

uint64_t *sub_100CC6BE4(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v25 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v25 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_1000361E0(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a3[5];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UUID();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    v13((char *)a1 + a3[6], (char *)a2 + a3[6], v12);
    uint64_t v14 = a3[8];
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    *(uint64_t *)((char *)a1 + v14) = *(uint64_t *)((char *)a2 + v14);
    uint64_t v15 = a3[10];
    *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    int v16 = (char *)a1 + v15;
    uint64_t v17 = (char *)a2 + v15;
    uint64_t v18 = type metadata accessor for Date();
    uint64_t v19 = *(void *)(v18 - 8);
    uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v19 + 16);
    v20(v16, v17, v18);
    uint64_t v21 = a3[12];
    *((unsigned char *)a1 + a3[11]) = *((unsigned char *)a2 + a3[11]);
    uint64_t v22 = (char *)a1 + v21;
    uint64_t v23 = (char *)a2 + v21;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))((char *)a2 + v21, 1, v18))
    {
      uint64_t v24 = sub_10000588C((uint64_t *)&unk_10163AC90);
      memcpy(v22, v23, *(void *)(*(void *)(v24 - 8) + 64));
    }
    else
    {
      v20(v22, v23, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v22, 0, 1, v18);
    }
    *(uint64_t *)((char *)a1 + a3[13]) = *(uint64_t *)((char *)a2 + a3[13]);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_100CC6E2C(uint64_t a1, int *a2)
{
  sub_10001CFB8(*(void *)a1, *(void *)(a1 + 8));
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for UUID();
  char v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v4, v5);
  v6(a1 + a2[6], v5);
  uint64_t v7 = a1 + a2[10];
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = a1 + a2[12];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v11, 1, v8)) {
    v10(v11, v8);
  }

  return swift_bridgeObjectRelease();
}

uint64_t *sub_100CC6F80(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000361E0(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  v12((char *)a1 + a3[6], (char *)a2 + a3[6], v11);
  uint64_t v13 = a3[8];
  *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  *(uint64_t *)((char *)a1 + v13) = *(uint64_t *)((char *)a2 + v13);
  uint64_t v14 = a3[10];
  *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
  uint64_t v15 = (char *)a1 + v14;
  int v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for Date();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
  v19(v15, v16, v17);
  uint64_t v20 = a3[12];
  *((unsigned char *)a1 + a3[11]) = *((unsigned char *)a2 + a3[11]);
  uint64_t v21 = (char *)a1 + v20;
  uint64_t v22 = (char *)a2 + v20;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))((char *)a2 + v20, 1, v17))
  {
    uint64_t v23 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
  }
  else
  {
    v19(v21, v22, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v21, 0, 1, v17);
  }
  *(uint64_t *)((char *)a1 + a3[13]) = *(uint64_t *)((char *)a2 + a3[13]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *sub_100CC7178(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000361E0(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10001CFB8(v8, v9);
  uint64_t v10 = a3[5];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24);
  v14(v11, v12, v13);
  v14((char *)a1 + a3[6], (char *)a2 + a3[6], v13);
  *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
  *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
  uint64_t v15 = a3[10];
  int v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = type metadata accessor for Date();
  uint64_t v19 = *(void *)(v18 - 8);
  int v27 = *(void (**)(char *, char *, uint64_t))(v19 + 24);
  v27(v16, v17, v18);
  *((unsigned char *)a1 + a3[11]) = *((unsigned char *)a2 + a3[11]);
  uint64_t v20 = a3[12];
  uint64_t v21 = (char *)a2 + v20;
  uint64_t v22 = *(uint64_t (**)(void))(v19 + 48);
  uint64_t v28 = (char *)a1 + v20;
  LODWORD(v14) = v22();
  int v23 = ((uint64_t (*)(char *, uint64_t, uint64_t))v22)(v21, 1, v18);
  if (v14)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v28, v21, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v28, 0, 1, v18);
      goto LABEL_9;
    }
    size_t v24 = *(void *)(*(void *)(sub_10000588C((uint64_t *)&unk_10163AC90) - 8) + 64);
    uint64_t v25 = v28;
  }
  else
  {
    if (!v23)
    {
      v27(v28, v21, v18);
      goto LABEL_9;
    }
    (*(void (**)(char *, uint64_t))(v19 + 8))(v28, v18);
    size_t v24 = *(void *)(*(void *)(sub_10000588C((uint64_t *)&unk_10163AC90) - 8) + 64);
    uint64_t v25 = v28;
  }
  memcpy(v25, v21, v24);
LABEL_9:
  *(uint64_t *)((char *)a1 + a3[13]) = *(uint64_t *)((char *)a2 + a3[13]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *sub_100CC742C(char *a1, char *a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v6 = a3[5];
  unint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v10(&a1[a3[6]], &a2[a3[6]], v9);
  uint64_t v11 = a3[8];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  *(void *)&a1[v11] = *(void *)&a2[v11];
  uint64_t v12 = a3[10];
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = type metadata accessor for Date();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
  v17(v13, v14, v15);
  uint64_t v18 = a3[12];
  a1[a3[11]] = a2[a3[11]];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(&a2[v18], 1, v15))
  {
    uint64_t v21 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    v17(v19, v20, v15);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v19, 0, 1, v15);
  }
  *(void *)&a1[a3[13]] = *(void *)&a2[a3[13]];
  return a1;
}

uint64_t *sub_100CC7614(uint64_t *a1, char *a2, int *a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001CFB8(v6, v7);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = &a2[v8];
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40);
  v12(v9, v10, v11);
  v12((char *)a1 + a3[6], &a2[a3[6]], v11);
  uint64_t v13 = a3[8];
  *(uint64_t *)((char *)a1 + a3[7]) = *(void *)&a2[a3[7]];
  *(uint64_t *)((char *)a1 + v13) = *(void *)&a2[v13];
  uint64_t v14 = a3[10];
  *(uint64_t *)((char *)a1 + a3[9]) = *(void *)&a2[a3[9]];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = &a2[v14];
  uint64_t v17 = type metadata accessor for Date();
  uint64_t v18 = *(void *)(v17 - 8);
  int v26 = *(void (**)(char *, char *, uint64_t))(v18 + 40);
  v26(v15, v16, v17);
  uint64_t v19 = a3[12];
  *((unsigned char *)a1 + a3[11]) = a2[a3[11]];
  uint64_t v20 = &a2[v19];
  uint64_t v21 = *(uint64_t (**)(void))(v18 + 48);
  int v27 = (char *)a1 + v19;
  LODWORD(v12) = v21();
  int v22 = ((uint64_t (*)(char *, uint64_t, uint64_t))v21)(v20, 1, v17);
  if (v12)
  {
    if (!v22)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v27, v20, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v27, 0, 1, v17);
      goto LABEL_9;
    }
    size_t v23 = *(void *)(*(void *)(sub_10000588C((uint64_t *)&unk_10163AC90) - 8) + 64);
    size_t v24 = v27;
  }
  else
  {
    if (!v22)
    {
      v26(v27, v20, v17);
      goto LABEL_9;
    }
    (*(void (**)(char *, uint64_t))(v18 + 8))(v27, v17);
    size_t v23 = *(void *)(*(void *)(sub_10000588C((uint64_t *)&unk_10163AC90) - 8) + 64);
    size_t v24 = v27;
  }
  memcpy(v24, v20, v23);
LABEL_9:
  *(uint64_t *)((char *)a1 + a3[13]) = *(void *)&a2[a3[13]];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100CC78AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100CC78C0);
}

uint64_t sub_100CC78C0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84) == a2)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 - 8);
    uint64_t v9 = a3[5];
LABEL_7:
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    return v12(a1 + v9, a2, v7);
  }
  uint64_t v10 = type metadata accessor for Date();
  if (*(_DWORD *)(*(void *)(v10 - 8) + 84) == a2)
  {
    uint64_t v7 = v10;
    uint64_t v8 = *(void *)(v10 - 8);
    uint64_t v9 = a3[10];
    goto LABEL_7;
  }
  uint64_t v11 = sub_10000588C((uint64_t *)&unk_10163AC90);
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v7 = v11;
    uint64_t v8 = *(void *)(v11 - 8);
    uint64_t v9 = a3[12];
    goto LABEL_7;
  }
  unint64_t v14 = *(void *)(a1 + a3[13]);
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  int v15 = v14 - 1;
  if (v15 < 0) {
    int v15 = -1;
  }
  return (v15 + 1);
}

uint64_t sub_100CC7A2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100CC7A40);
}

uint64_t sub_100CC7A40(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for UUID();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[5];
  }
  else
  {
    uint64_t v12 = type metadata accessor for Date();
    if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
    {
      uint64_t v9 = v12;
      uint64_t v10 = *(void *)(v12 - 8);
      uint64_t v11 = a4[10];
    }
    else
    {
      uint64_t result = sub_10000588C((uint64_t *)&unk_10163AC90);
      if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
      {
        *(void *)(a1 + a4[13]) = a2;
        return result;
      }
      uint64_t v9 = result;
      uint64_t v10 = *(void *)(result - 8);
      uint64_t v11 = a4[12];
    }
  }
  unint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);

  return v14(a1 + v11, a2, a2, v9);
}

uint64_t type metadata accessor for BeaconEstimatedLocation()
{
  uint64_t result = qword_10165C680;
  if (!qword_10165C680) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100CC7BE8()
{
  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date();
    if (v1 <= 0x3F)
    {
      sub_1000C7D80();
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t sub_100CC7D1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 40);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

double sub_100CC7D8C(uint64_t a1)
{
  return *(double *)(v1 + *(int *)(a1 + 36));
}

uint64_t sub_100CC7D98@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v84 = (char *)v81 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v81 - v7;
  uint64_t v9 = type metadata accessor for Date();
  uint64_t v89 = *(void *)(v9 - 8);
  uint64_t v90 = v9;
  __chkstk_darwin(v9);
  unint64_t v88 = (char *)v81 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C(&qword_101638CF0);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v86 = (char *)v81 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  int v15 = (char *)v81 - v14;
  uint64_t v94 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v94 - 8);
  uint64_t v17 = __chkstk_darwin(v94);
  unint64_t v87 = (char *)v81 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v93 = (char *)v81 - v19;
  int64_t v85 = (int *)type metadata accessor for BeaconEstimatedLocation();
  uint64_t v20 = v85[13];
  *(uint64_t *)((char *)a2 + v20) = 0;
  if (CKRecord.recordType.getter() == 0xD000000000000017 && v21 == 0x800000010137B2F0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v22 & 1) == 0)
    {
      sub_100CCAD34();
      swift_allocError();
      *char v54 = 0;
      swift_willThrow();

      return swift_bridgeObjectRelease();
    }
  }
  uint64_t v91 = v20;
  uint64_t v92 = a2;
  id v23 = [a1 recordID];
  id v24 = [v23 recordName];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  uint64_t v25 = v16;
  int v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48);
  uint64_t v27 = v94;
  if (v26(v15, 1, v94) == 1)
  {
    sub_10001DAB4((uint64_t)v15, &qword_101638CF0);
    sub_100CCAD34();
    swift_allocError();
    *uint64_t v28 = 1;
    swift_willThrow();

    return swift_bridgeObjectRelease();
  }
  uint64_t v83 = v25;
  uint64_t v82 = *(void (**)(char *, char *, uint64_t))(v25 + 32);
  v82(v93, v15, v27);
  id v29 = [a1 encryptedValues];
  NSString v30 = String._bridgeToObjectiveC()();
  uint64_t v31 = v29;
  id v32 = [v29 objectForKeyedSubscript:v30];

  if (!v32) {
    goto LABEL_23;
  }
  id v95 = v32;
  uint64_t v33 = sub_10000588C((uint64_t *)&unk_10163AE50);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_23;
  }
  v81[2] = v33;
  uint64_t v34 = v96;
  NSString v35 = String._bridgeToObjectiveC()();
  id v36 = [v31 objectForKeyedSubscript:v35];

  if (!v36) {
    goto LABEL_23;
  }
  id v95 = v36;
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_23;
  }
  uint64_t v37 = v96;
  NSString v38 = String._bridgeToObjectiveC()();
  id v39 = [v31 objectForKeyedSubscript:v38];

  if (!v39) {
    goto LABEL_23;
  }
  id v95 = v39;
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_23;
  }
  uint64_t v40 = v96;
  NSString v41 = String._bridgeToObjectiveC()();
  id v42 = [v31 objectForKeyedSubscript:v41];

  if (!v42)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v89 + 56))(v8, 1, 1, v90);
    goto LABEL_22;
  }
  id v95 = v42;
  uint64_t v43 = v90;
  int v44 = swift_dynamicCast();
  uint64_t v45 = v89;
  v81[0] = *(void *)(v89 + 56);
  v81[1] = v89 + 56;
  ((void (*)(char *, void, uint64_t, uint64_t))v81[0])(v8, v44 ^ 1u, 1, v43);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48))(v8, 1, v43) == 1)
  {
LABEL_22:
    sub_10001DAB4((uint64_t)v8, (uint64_t *)&unk_10163AC90);
LABEL_23:
    static os_log_type_t.error.getter();
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v55 = swift_allocObject();
    *(_OWORD *)(v55 + 16) = xmmword_101342130;
    *(void *)(v55 + 56) = sub_10001D4B0(0, (unint64_t *)&qword_10163AE60);
    *(void *)(v55 + 64) = sub_1000A038C();
    *(void *)(v55 + 32) = a1;
    sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
    id v56 = a1;
    char v57 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();

    sub_100CCAD34();
    swift_allocError();
    *char v58 = 2;
    swift_willThrow();
    swift_unknownObjectRelease();

    goto LABEL_24;
  }
  (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v88, v8, v43);
  NSString v46 = String._bridgeToObjectiveC()();
  id v47 = [v31 objectForKeyedSubscript:v46];

  if (!v47) {
    goto LABEL_19;
  }
  uint64_t v96 = (uint64_t)v47;
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_19;
  }
  uint64_t v48 = (uint64_t)v86;
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  uint64_t v49 = v94;
  if (v26((char *)v48, 1, v94) == 1)
  {
    sub_10001DAB4(v48, &qword_101638CF0);
LABEL_19:
    static os_log_type_t.error.getter();
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v50 = swift_allocObject();
    *(_OWORD *)(v50 + 16) = xmmword_101342130;
    *(void *)(v50 + 56) = sub_10001D4B0(0, (unint64_t *)&qword_10163AE60);
    *(void *)(v50 + 64) = sub_1000A038C();
    *(void *)(v50 + 32) = a1;
    sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
    id v51 = a1;
    char v52 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();

    sub_100CCAD34();
    swift_allocError();
    *char v53 = 2;
    swift_willThrow();
    swift_unknownObjectRelease();

    (*(void (**)(char *, uint64_t))(v89 + 8))(v88, v90);
LABEL_24:
    (*(void (**)(char *, uint64_t))(v83 + 8))(v93, v94);
    return swift_bridgeObjectRelease();
  }
  v82(v87, (char *)v48, v49);
  id v61 = [objc_allocWithZone((Class)NSKeyedArchiver) initRequiringSecureCoding:1];
  [a1 encodeSystemFieldsWithCoder:v61];
  [v61 finishEncoding];
  id v62 = [v61 encodedData];
  uint64_t v63 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v65 = v64;

  uint64_t v67 = v92;
  uint64_t v66 = v93;
  *uint64_t v92 = v63;
  v67[1] = v65;
  uint64_t v68 = v67;
  uint64_t v69 = v85;
  unint64_t v70 = *(void (**)(char *, char *, uint64_t))(v83 + 16);
  v70((char *)v67 + v85[5], v66, v49);
  v70((char *)v68 + v69[6], v87, v49);
  *(uint64_t *)((char *)v68 + v69[7]) = v34;
  *(uint64_t *)((char *)v68 + v69[8]) = v37;
  *(uint64_t *)((char *)v68 + v69[9]) = v40;
  uint64_t v71 = v89;
  uint64_t v72 = v90;
  (*(void (**)(char *, char *, uint64_t))(v89 + 16))((char *)v68 + v69[10], v88, v90);
  *((unsigned char *)v68 + v69[11]) = 7;
  NSString v73 = String._bridgeToObjectiveC()();
  id v74 = [v31 objectForKeyedSubscript:v73];

  if (v74)
  {
    id v95 = v74;
    uint64_t v75 = (uint64_t)v84;
    uint64_t v76 = swift_dynamicCast() ^ 1;
    uint64_t v77 = (char *)v75;
  }
  else
  {
    uint64_t v75 = (uint64_t)v84;
    uint64_t v77 = v84;
    uint64_t v76 = 1;
  }
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v81[0])(v77, v76, 1, v72);
  sub_1000C69AC(v75, (uint64_t)v68 + v85[12]);
  swift_unknownObjectRelease();

  unint64_t v78 = *(void (**)(char *, uint64_t))(v83 + 8);
  uint64_t v79 = v94;
  v78(v87, v94);
  (*(void (**)(char *, uint64_t))(v71 + 8))(v88, v72);
  v78(v93, v79);
  uint64_t v80 = v91;
  uint64_t result = swift_bridgeObjectRelease();
  *(uint64_t *)((char *)v68 + v80) = (uint64_t)_swiftEmptyArrayStorage;
  return result;
}

void sub_100CC8978()
{
  uint64_t v0 = type metadata accessor for URL();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001E384(v2, qword_10170EB70);
  sub_100010324(v0, (uint64_t)qword_10170EB70);
  type metadata accessor for BeaconStore(0);
  sub_100A9DB34((uint64_t)v4);
  URL.appendingPathComponent(_:isDirectory:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

void sub_100CC8AA4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v1;
  unint64_t v12 = v2[1];
  sub_1000361E0(v11, v12);
  Data.hash(into:)();
  sub_10001CFB8(v11, v12);
  uint64_t v13 = (int *)type metadata accessor for BeaconEstimatedLocation();
  type metadata accessor for UUID();
  sub_100CCAB9C(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  dispatch thunk of Hashable.hash(into:)();
  if ((*(uint64_t *)((char *)v2 + v13[7]) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v14 = *(uint64_t *)((char *)v2 + v13[7]);
  }
  else {
    Swift::UInt64 v14 = 0;
  }
  Hasher._combine(_:)(v14);
  if ((*(uint64_t *)((char *)v2 + v13[8]) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v15 = *(uint64_t *)((char *)v2 + v13[8]);
  }
  else {
    Swift::UInt64 v15 = 0;
  }
  Hasher._combine(_:)(v15);
  if ((*(uint64_t *)((char *)v2 + v13[9]) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v16 = *(uint64_t *)((char *)v2 + v13[9]);
  }
  else {
    Swift::UInt64 v16 = 0;
  }
  Hasher._combine(_:)(v16);
  sub_100CCAB9C((unint64_t *)&unk_10163ADF0, (void (*)(uint64_t))&type metadata accessor for Date);
  dispatch thunk of Hashable.hash(into:)();
  Hasher._combine(_:)(*((unsigned __int8 *)v2 + v13[11]));
  sub_10001D074((uint64_t)v2 + v13[12], (uint64_t)v10, (uint64_t *)&unk_10163AC90);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  uint64_t v17 = *(uint64_t *)((char *)v2 + v13[13]);
  if (v17)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    sub_100CCB39C(a1, v17);
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

unint64_t sub_100CC8DE8(char a1)
{
  unint64_t result = 0xD000000000000010;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x696669746E656469;
      break;
    case 3:
      unint64_t result = 0x656475746974616CLL;
      break;
    case 4:
      unint64_t result = 0x64757469676E6F6CLL;
      break;
    case 5:
      unint64_t result = 0xD000000000000012;
      break;
    case 6:
      unint64_t result = 0x6D617473656D6974;
      break;
    case 7:
      unint64_t result = 0x6E6F697461636F6CLL;
      break;
    case 8:
      unint64_t result = 0x657461446E616373;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100CC8F1C(char a1)
{
  unint64_t result = 0xD000000000000010;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x696669746E656469;
      break;
    case 3:
      unint64_t result = 0x656475746974616CLL;
      break;
    case 4:
      unint64_t result = 0x64757469676E6F6CLL;
      break;
    case 5:
      unint64_t result = 0xD000000000000012;
      break;
    case 6:
      unint64_t result = 0x6D617473656D6974;
      break;
    case 7:
      unint64_t result = 0x6E6F697461636F6CLL;
      break;
    case 8:
      unint64_t result = 0x657461446E616373;
      break;
    default:
      return result;
  }
  return result;
}

Swift::Int sub_100CC9050()
{
  Hasher.init(_seed:)();
  sub_100CC8AA4((uint64_t)v1);
  return Hasher._finalize()();
}

Swift::Int sub_100CC9094()
{
  Hasher.init(_seed:)();
  sub_100CC8AA4((uint64_t)v1);
  return Hasher._finalize()();
}

uint64_t sub_100CC90D0()
{
  return static Date.< infix(_:_:)();
}

BOOL sub_100CC90E0()
{
  return (static Date.< infix(_:_:)() & 1) == 0;
}

BOOL sub_100CC9110()
{
  return (static Date.< infix(_:_:)() & 1) == 0;
}

uint64_t sub_100CC913C()
{
  return static Date.< infix(_:_:)();
}

uint64_t sub_100CC9154()
{
  return sub_100CCAB9C(&qword_10165C6E0, (void (*)(uint64_t))type metadata accessor for BeaconEstimatedLocation);
}

uint64_t sub_100CC919C(unsigned __int8 *a1, char *a2)
{
  return sub_10071C574(*a1, *a2);
}

Swift::Int sub_100CC91A8()
{
  return Hasher._finalize()();
}

uint64_t sub_100CC91F0()
{
  return sub_10071FE54();
}

Swift::Int sub_100CC91F8()
{
  return Hasher._finalize()();
}

unint64_t sub_100CC923C@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100CCC28C(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_100CC926C@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_100CC8DE8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_100CC9298()
{
  return sub_100CC8F1C(*v0);
}

unint64_t sub_100CC92A0@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100CCC28C(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100CC92C8(uint64_t a1)
{
  unint64_t v2 = sub_100CCAC3C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100CC9304(uint64_t a1)
{
  unint64_t v2 = sub_100CCAC3C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100CC9340(id *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v85 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v70 = &v66[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v84 = sub_10000588C((uint64_t *)&unk_10165C700);
  uint64_t v6 = __chkstk_darwin(v84);
  uint64_t v76 = &v66[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v6);
  id v74 = &v66[-v8];
  uint64_t v9 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  NSString v73 = &v66[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v69 = &v66[-v13];
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v77 = &v66[-v15];
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v75 = &v66[-v17];
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v68 = &v66[-v19];
  uint64_t v20 = __chkstk_darwin(v18);
  char v22 = &v66[-v21];
  __chkstk_darwin(v20);
  uint64_t v80 = &v66[-v23];
  [*a1 encryptedValues];
  uint64_t ObjectType = swift_getObjectType();
  CKRecordKeyValueSetting.subscript.getter();
  long long v25 = v86;
  int v26 = (int *)type metadata accessor for BeaconEstimatedLocation();
  uint64_t v82 = v2;
  uint64_t v27 = UUID.uuidString.getter();
  if (!*((void *)&v25 + 1))
  {
    swift_bridgeObjectRelease();
    uint64_t v29 = v82;
    goto LABEL_6;
  }
  if (v25 != __PAIR128__(v28, v27))
  {
    char v30 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v29 = v82;
    if (v30) {
      goto LABEL_7;
    }
LABEL_6:
    uint64_t v31 = UUID.uuidString.getter();
    *((void *)&v87 + 1) = &type metadata for String;
    unint64_t v88 = &protocol witness table for String;
    *(void *)&long long v86 = v31;
    *((void *)&v86 + 1) = v32;
    CKRecordKeyValueSetting.subscript.setter();
    goto LABEL_7;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v29 = v82;
LABEL_7:
  CKRecordKeyValueSetting.subscript.getter();
  double v33 = *(double *)(v29 + v26[7]);
  if ((BYTE8(v86) & 1) != 0 || *(double *)&v86 != v33)
  {
    *((void *)&v87 + 1) = &type metadata for Double;
    unint64_t v88 = &protocol witness table for Double;
    *(double *)&long long v86 = v33;
    CKRecordKeyValueSetting.subscript.setter();
  }
  CKRecordKeyValueSetting.subscript.getter();
  double v34 = *(double *)(v29 + v26[8]);
  if ((BYTE8(v86) & 1) != 0 || *(double *)&v86 != v34)
  {
    *((void *)&v87 + 1) = &type metadata for Double;
    unint64_t v88 = &protocol witness table for Double;
    *(double *)&long long v86 = v34;
    CKRecordKeyValueSetting.subscript.setter();
  }
  CKRecordKeyValueSetting.subscript.getter();
  double v35 = *(double *)(v29 + v26[9]);
  uint64_t v79 = v22;
  uint64_t v83 = v26;
  if ((BYTE8(v86) & 1) != 0 || *(double *)&v86 != v35)
  {
    *((void *)&v87 + 1) = &type metadata for Double;
    unint64_t v88 = &protocol witness table for Double;
    *(double *)&long long v86 = v35;
    CKRecordKeyValueSetting.subscript.setter();
  }
  id v36 = v80;
  uint64_t v81 = ObjectType;
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v37 = v29 + v83[10];
  uint64_t v38 = v85;
  uint64_t v39 = (uint64_t)v79;
  uint64_t v71 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v85 + 16);
  uint64_t v72 = v37;
  ((void (*)(unsigned char *))v71)(v79);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v38 + 56))(v39, 0, 1, v4);
  uint64_t v40 = v74;
  uint64_t v41 = (uint64_t)&v74[*(int *)(v84 + 48)];
  sub_10001D074((uint64_t)v36, (uint64_t)v74, (uint64_t *)&unk_10163AC90);
  sub_10001D074(v39, v41, (uint64_t *)&unk_10163AC90);
  id v42 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48);
  unsigned int v43 = v42((uint64_t)v40, 1, v4);
  unint64_t v78 = v42;
  if (v43 == 1)
  {
    sub_10001DAB4(v39, (uint64_t *)&unk_10163AC90);
    sub_10001DAB4((uint64_t)v36, (uint64_t *)&unk_10163AC90);
    unsigned int v44 = v42(v41, 1, v4);
    uint64_t v45 = (uint64_t)v76;
    if (v44 == 1)
    {
      sub_10001DAB4((uint64_t)v40, (uint64_t *)&unk_10163AC90);
      uint64_t v46 = (uint64_t)v75;
      id v47 = v77;
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v48 = v68;
    sub_10001D074((uint64_t)v40, (uint64_t)v68, (uint64_t *)&unk_10163AC90);
    if (v42(v41, 1, v4) != 1)
    {
      uint64_t v49 = v85;
      uint64_t v50 = (uint64_t)v40;
      id v51 = v70;
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v85 + 32))(v70, v41, v4);
      sub_100CCAB9C(&qword_10163AFA0, (void (*)(uint64_t))&type metadata accessor for Date);
      int v67 = dispatch thunk of static Equatable.== infix(_:_:)();
      char v52 = *(void (**)(unsigned char *, uint64_t))(v49 + 8);
      v52(v51, v4);
      sub_10001DAB4((uint64_t)v79, (uint64_t *)&unk_10163AC90);
      sub_10001DAB4((uint64_t)v80, (uint64_t *)&unk_10163AC90);
      v52(v48, v4);
      sub_10001DAB4(v50, (uint64_t *)&unk_10163AC90);
      uint64_t v46 = (uint64_t)v75;
      uint64_t v45 = (uint64_t)v76;
      id v47 = v77;
      if (v67) {
        goto LABEL_24;
      }
      goto LABEL_23;
    }
    sub_10001DAB4((uint64_t)v79, (uint64_t *)&unk_10163AC90);
    sub_10001DAB4((uint64_t)v80, (uint64_t *)&unk_10163AC90);
    (*(void (**)(unsigned char *, uint64_t))(v85 + 8))(v48, v4);
    uint64_t v45 = (uint64_t)v76;
  }
  sub_10001DAB4((uint64_t)v40, (uint64_t *)&unk_10165C700);
  uint64_t v46 = (uint64_t)v75;
  id v47 = v77;
LABEL_23:
  *((void *)&v87 + 1) = v4;
  unint64_t v88 = &protocol witness table for Date;
  char v53 = sub_10001D958((uint64_t *)&v86);
  v71(v53, v72, v4);
  CKRecordKeyValueSetting.subscript.setter();
LABEL_24:
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v54 = v82 + v83[12];
  sub_10001D074(v54, (uint64_t)v47, (uint64_t *)&unk_10163AC90);
  uint64_t v55 = v45 + *(int *)(v84 + 48);
  sub_10001D074(v46, v45, (uint64_t *)&unk_10163AC90);
  sub_10001D074((uint64_t)v47, v55, (uint64_t *)&unk_10163AC90);
  id v56 = v78;
  if (v78(v45, 1, v4) == 1)
  {
    sub_10001DAB4((uint64_t)v47, (uint64_t *)&unk_10163AC90);
    sub_10001DAB4(v46, (uint64_t *)&unk_10163AC90);
    if (v56(v55, 1, v4) == 1)
    {
      sub_10001DAB4(v45, (uint64_t *)&unk_10163AC90);
      return swift_unknownObjectRelease();
    }
  }
  else
  {
    char v57 = v69;
    sub_10001D074(v45, (uint64_t)v69, (uint64_t *)&unk_10163AC90);
    if (v56(v55, 1, v4) != 1)
    {
      uint64_t v58 = v46;
      uint64_t v59 = v85;
      char v60 = v57;
      id v61 = v70;
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v85 + 32))(v70, v55, v4);
      sub_100CCAB9C(&qword_10163AFA0, (void (*)(uint64_t))&type metadata accessor for Date);
      LODWORD(v84) = dispatch thunk of static Equatable.== infix(_:_:)();
      id v62 = *(void (**)(unsigned char *, uint64_t))(v59 + 8);
      v62(v61, v4);
      sub_10001DAB4((uint64_t)v77, (uint64_t *)&unk_10163AC90);
      sub_10001DAB4(v58, (uint64_t *)&unk_10163AC90);
      v62(v60, v4);
      sub_10001DAB4(v45, (uint64_t *)&unk_10163AC90);
      id v56 = v78;
      if (v84) {
        return swift_unknownObjectRelease();
      }
      goto LABEL_31;
    }
    sub_10001DAB4((uint64_t)v47, (uint64_t *)&unk_10163AC90);
    sub_10001DAB4(v46, (uint64_t *)&unk_10163AC90);
    (*(void (**)(unsigned char *, uint64_t))(v85 + 8))(v57, v4);
    id v56 = v78;
  }
  sub_10001DAB4(v45, (uint64_t *)&unk_10165C700);
LABEL_31:
  uint64_t v63 = v73;
  sub_10001D074(v54, (uint64_t)v73, (uint64_t *)&unk_10163AC90);
  if (v56((uint64_t)v63, 1, v4) == 1)
  {
    sub_10001DAB4((uint64_t)v63, (uint64_t *)&unk_10163AC90);
    long long v86 = 0u;
    long long v87 = 0u;
    unint64_t v88 = 0;
  }
  else
  {
    *((void *)&v87 + 1) = v4;
    unint64_t v88 = &protocol witness table for Date;
    uint64_t v64 = sub_10001D958((uint64_t *)&v86);
    (*(void (**)(uint64_t *, unsigned char *, uint64_t))(v85 + 32))(v64, v63, v4);
  }
  CKRecordKeyValueSetting.subscript.setter();
  return swift_unknownObjectRelease();
}

uint64_t sub_100CC9EB0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v36 = a2;
  uint64_t v3 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v3 - 8);
  uint64_t v37 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = type metadata accessor for Date();
  uint64_t v38 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = type metadata accessor for UUID();
  uint64_t v45 = *(void *)(v47 - 8);
  uint64_t v7 = __chkstk_darwin(v47);
  uint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v34 - v10;
  uint64_t v39 = sub_10000588C(&qword_10165C710);
  uint64_t v12 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  uint64_t v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for BeaconEstimatedLocation();
  uint64_t v46 = (int *)__chkstk_darwin(v15);
  uint64_t v41 = v46[13];
  uint64_t v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v17[v41] = 0;
  uint64_t v18 = a1[3];
  unsigned int v43 = a1;
  sub_10001CD44(a1, v18);
  sub_100CCAC3C();
  uint64_t v40 = v14;
  uint64_t v19 = v44;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v19)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v43);
    return swift_bridgeObjectRelease();
  }
  else
  {
    unsigned int v44 = v6;
    uint64_t v35 = v12;
    char v49 = 0;
    sub_100037AA0();
    uint64_t v20 = v39;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(_OWORD *)uint64_t v17 = v48;
    LOBYTE(v48) = 1;
    sub_100CCAB9C((unint64_t *)&qword_10163B010, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v21 = v11;
    uint64_t v22 = v47;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v23 = (uint64_t)v43;
    id v24 = &v17[v46[5]];
    double v34 = *(void (**)(char *, char *, uint64_t))(v45 + 32);
    v34(v24, v21, v22);
    LOBYTE(v48) = 2;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v25 = v22;
    int v26 = v46;
    v34(&v17[v46[6]], v9, v25);
    LOBYTE(v48) = 3;
    KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v27 = v42;
    *(void *)&v17[v26[7]] = v28;
    LOBYTE(v48) = 4;
    KeyedDecodingContainer.decode(_:forKey:)();
    *(void *)&v17[v26[8]] = v29;
    LOBYTE(v48) = 5;
    KeyedDecodingContainer.decode(_:forKey:)();
    *(void *)&v17[v26[9]] = v30;
    LOBYTE(v48) = 6;
    uint64_t v31 = sub_100CCAB9C(&qword_10163ACC0, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    double v34 = (void (*)(char *, char *, uint64_t))v31;
    (*(void (**)(char *, char *, uint64_t))(v38 + 32))(&v17[v26[10]], v44, v27);
    char v49 = 7;
    sub_100429778();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v17[v26[11]] = v48;
    LOBYTE(v48) = 8;
    uint64_t v32 = (uint64_t)v37;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v35 + 8))(v40, v20);
    sub_1000C69AC(v32, (uint64_t)&v17[v26[12]]);
    sub_100CCC2D8((uint64_t)v17, v36, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v23);
    return sub_100CCC340((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
  }
}

uint64_t sub_100CCA690(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_10165C720);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100CCAC3C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v11 = *v3;
  char v12 = 0;
  sub_100037BB4();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = type metadata accessor for BeaconEstimatedLocation();
    LOBYTE(v11) = 1;
    type metadata accessor for UUID();
    sub_100CCAB9C(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v11) = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v11) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 6;
    type metadata accessor for Date();
    sub_100CCAB9C((unint64_t *)&unk_10163ACE0, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v11) = *((unsigned char *)v3 + *(int *)(v9 + 44));
    char v12 = 7;
    sub_100429928();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v11) = 8;
    sub_10000588C((uint64_t *)&unk_10163AC90);
    sub_100CCAC90();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void sub_100CCAA30()
{
  if (qword_101637030 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for URL();
  sub_100010324(v1, (uint64_t)qword_10170EB70);
  UUID.uuidString.getter();
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
}

uint64_t sub_100CCAAE8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100CC9EB0(a1, a2);
}

uint64_t sub_100CCAB00(void *a1)
{
  return sub_100CCA690(a1);
}

uint64_t sub_100CCAB18(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100CCAB9C(&qword_10165C6E8, (void (*)(uint64_t))type metadata accessor for BeaconEstimatedLocation);
  uint64_t result = sub_100CCAB9C(&qword_10165C6F0, (void (*)(uint64_t))type metadata accessor for BeaconEstimatedLocation);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_100CCAB9C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100CCABE4(uint64_t a1)
{
  uint64_t result = sub_100CCAB9C(&qword_10165C6F8, (void (*)(uint64_t))type metadata accessor for BeaconEstimatedLocation);
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100CCAC3C()
{
  unint64_t result = qword_10165C718;
  if (!qword_10165C718)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165C718);
  }
  return result;
}

unint64_t sub_100CCAC90()
{
  unint64_t result = qword_10165C738;
  if (!qword_10165C738)
  {
    sub_10000592C((uint64_t *)&unk_10163AC90);
    sub_100CCAB9C((unint64_t *)&unk_10163ACE0, (void (*)(uint64_t))&type metadata accessor for Date);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165C738);
  }
  return result;
}

unint64_t sub_100CCAD34()
{
  unint64_t result = qword_10165C748;
  if (!qword_10165C748)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165C748);
  }
  return result;
}

void sub_100CCAD88(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    uint64_t v4 = (Swift::UInt8 *)(a2 + 56);
    do
    {
      uint64_t v5 = *((void *)v4 - 2);
      unint64_t v6 = *((void *)v4 - 1);
      Swift::UInt8 v7 = *(v4 - 24);
      Swift::UInt8 v8 = *v4;
      v4 += 32;
      Hasher._combine(_:)(v7);
      sub_1000361E0(v5, v6);
      Data.hash(into:)();
      Hasher._combine(_:)(v8);
      sub_10001CFB8(v5, v6);
      --v3;
    }
    while (v3);
  }
}

uint64_t sub_100CCAE18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  Swift::UInt8 v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::UInt v11 = *(void *)(a2 + 16);
  uint64_t v27 = a1;
  Hasher._combine(_:)(v11);
  if (v11)
  {
    uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    uint64_t v12 = v5 + 16;
    uint64_t v14 = a2 + ((*(unsigned __int8 *)(v12 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 64));
    unint64_t v15 = v12 + 40;
    uint64_t v16 = v12;
    uint64_t v17 = (uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 32);
    id v24 = (void (**)(char *, char *, uint64_t))(v16 + 16);
    uint64_t v25 = v13;
    uint64_t v18 = (void (**)(char *, uint64_t))(v16 - 8);
    uint64_t v26 = v16;
    uint64_t v19 = *(void *)(v16 + 56);
    unint64_t v22 = v15 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v23 = v19;
    while (1)
    {
      v25(v10, v14, v4);
      uint64_t v20 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))v15;
      (*(void (**)(char *, void, uint64_t, uint64_t))v15)(v10, 0, 1, v4);
      uint64_t result = (*v17)(v10, 1, v4);
      if (result == 1) {
        break;
      }
      (*v24)(v7, v10, v4);
      sub_100CCAB9C(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
      dispatch thunk of Hashable.hash(into:)();
      (*v18)(v7, v4);
      v14 += v23;
      if (!--v11) {
        return v20(v10, 1, 1, v4);
      }
    }
  }
  else
  {
    uint64_t v20 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    return v20(v10, 1, 1, v4);
  }
  return result;
}

void sub_100CCB08C(uint64_t a1, uint64_t a2)
{
  Swift::UInt v3 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v3);
  if (v3)
  {
    uint64_t v4 = a2 + 48;
    do
    {
      uint64_t v6 = *(void *)(v4 + 32);
      int v7 = *(unsigned __int8 *)(v4 + 40);
      Hasher._combine(_:)(*(unsigned char *)(v4 - 16));
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      String.hash(into:)();
      swift_bridgeObjectRelease();
      if (v6)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        String.hash(into:)();
        swift_bridgeObjectRelease();
        if (v7 != 2) {
          goto LABEL_9;
        }
      }
      else
      {
        Hasher._combine(_:)(0);
        if (v7 != 2)
        {
LABEL_9:
          Swift::UInt8 v5 = v7 & 1;
          Hasher._combine(_:)(1u);
          goto LABEL_4;
        }
      }
      Swift::UInt8 v5 = 0;
LABEL_4:
      v4 += 64;
      Hasher._combine(_:)(v5);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      --v3;
    }
    while (v3);
  }
}

void sub_100CCB1DC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for WildModeTrackingLocation(0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (Swift::UInt64 *)((char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  Swift::UInt v7 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v7);
  if (v7)
  {
    uint64_t v8 = a2 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v9 = *(void *)(v4 + 72);
    do
    {
      sub_100CCC2D8(v8, (uint64_t)v6, type metadata accessor for WildModeTrackingLocation);
      if ((*v6 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v10 = *v6;
      }
      else {
        Swift::UInt64 v10 = 0;
      }
      Hasher._combine(_:)(v10);
      if ((v6[1] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v11 = v6[1];
      }
      else {
        Swift::UInt64 v11 = 0;
      }
      Hasher._combine(_:)(v11);
      if ((v6[2] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v12 = v6[2];
      }
      else {
        Swift::UInt64 v12 = 0;
      }
      Hasher._combine(_:)(v12);
      type metadata accessor for Date();
      sub_100CCAB9C((unint64_t *)&unk_10163ADF0, (void (*)(uint64_t))&type metadata accessor for Date);
      dispatch thunk of Hashable.hash(into:)();
      sub_100CCC340((uint64_t)v6, type metadata accessor for WildModeTrackingLocation);
      v8 += v9;
      --v7;
    }
    while (v7);
  }
}

void sub_100CCB39C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  unsigned int v43 = *(unsigned int (***)(char *, uint64_t, uint64_t))(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v46 = (uint64_t)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000588C(&qword_101657910);
  __chkstk_darwin(v5 - 8);
  Swift::UInt v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v40 = *(void (***)(char *, uint64_t))(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v42 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v10 - 8);
  uint64_t v47 = (uint64_t)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::UInt64 v12 = (int *)type metadata accessor for RawSearchResult();
  uint64_t v13 = *((void *)v12 - 1);
  __chkstk_darwin(v12);
  unint64_t v15 = (Swift::UInt8 *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  Swift::UInt v16 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v16);
  if (v16)
  {
    uint64_t v17 = a2 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    uint64_t v18 = v40;
    uint64_t v44 = *(void *)(v13 + 72);
    uint64_t v45 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 6);
    ++v40;
    uint64_t v41 = (void (**)(char *, uint64_t, uint64_t))(v18 + 4);
    v43 += 6;
    uint64_t v38 = v8;
    uint64_t v39 = v12;
    do
    {
      sub_100CCC2D8(v17, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
      Hasher._combine(_:)(*v15);
      sub_100CCAB9C((unint64_t *)&unk_10163ADF0, (void (*)(uint64_t))&type metadata accessor for Date);
      dispatch thunk of Hashable.hash(into:)();
      if ((*(void *)&v15[v12[6]] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v20 = *(void *)&v15[v12[6]];
      }
      else {
        Swift::UInt64 v20 = 0;
      }
      Hasher._combine(_:)(v20);
      if ((*(void *)&v15[v12[7]] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v21 = *(void *)&v15[v12[7]];
      }
      else {
        Swift::UInt64 v21 = 0;
      }
      Hasher._combine(_:)(v21);
      if ((*(void *)&v15[v12[8]] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v22 = *(void *)&v15[v12[8]];
      }
      else {
        Swift::UInt64 v22 = 0;
      }
      Hasher._combine(_:)(v22);
      Hasher._combine(_:)(v15[v12[9]]);
      uint64_t v23 = v47;
      sub_10001D074((uint64_t)&v15[v12[10]], v47, (uint64_t *)&unk_10163AC90);
      if ((*v45)(v23, 1, v8) == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        uint64_t v24 = v17;
        Swift::UInt v25 = v16;
        uint64_t v26 = v7;
        uint64_t v27 = v3;
        uint64_t v28 = v42;
        (*v41)(v42, v23, v8);
        Hasher._combine(_:)(1u);
        dispatch thunk of Hashable.hash(into:)();
        uint64_t v29 = v28;
        uint64_t v3 = v27;
        Swift::UInt v7 = v26;
        Swift::UInt v16 = v25;
        uint64_t v17 = v24;
        Swift::UInt64 v12 = v39;
        (*v40)(v29, v8);
      }
      sub_10001D074((uint64_t)&v15[v12[11]], (uint64_t)v7, &qword_101657910);
      if ((*v43)(v7, 1, v3) == 1)
      {
        Hasher._combine(_:)(0);
      }
      else
      {
        uint64_t v30 = v7;
        uint64_t v31 = (uint64_t)v7;
        uint64_t v32 = v46;
        sub_100CC45A4(v31, v46);
        Hasher._combine(_:)(1u);
        type metadata accessor for UUID();
        sub_100CCAB9C(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
        dispatch thunk of Hashable.hash(into:)();
        double v33 = (void *)(v32 + *(int *)(v3 + 20));
        sub_10001CD44(v33, v33[3]);
        dispatch thunk of RawRepresentable.rawValue.getter();
        Hasher._combine(_:)(v48);
        uint64_t v34 = v33[3];
        uint64_t v35 = v33[4];
        sub_10001CD44(v33, v34);
        sub_100EB7B8C(v34, v35);
        Swift::UInt v7 = v30;
        uint64_t v8 = v38;
        String.hash(into:)();
        swift_bridgeObjectRelease();
        sub_100CCC340(v46, type metadata accessor for BeaconKeyManager.IndexInformation);
      }
      type metadata accessor for UUID();
      sub_100CCAB9C(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
      dispatch thunk of Hashable.hash(into:)();
      uint64_t v36 = &v15[v12[13]];
      if (v36[1])
      {
        Swift::UInt8 v19 = 0;
      }
      else
      {
        Swift::UInt8 v19 = *v36;
        Hasher._combine(_:)(1u);
      }
      Hasher._combine(_:)(v19);
      sub_100CCC340((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
      v17 += v44;
      --v16;
    }
    while (v16);
  }
}

uint64_t sub_100CCBA4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  Swift::UInt v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C((uint64_t *)&unk_10165C700);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v29 - v16;
  __chkstk_darwin(v15);
  Swift::UInt8 v19 = (char *)&v29 - v18;
  if ((_s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8)) & 1) == 0)return 0; {
  uint64_t v32 = v5;
  }
  Swift::UInt64 v20 = (int *)type metadata accessor for BeaconEstimatedLocation();
  if ((static UUID.== infix(_:_:)() & 1) == 0
    || (static UUID.== infix(_:_:)() & 1) == 0
    || *(double *)(a1 + v20[7]) != *(double *)(a2 + v20[7])
    || *(double *)(a1 + v20[8]) != *(double *)(a2 + v20[8])
    || *(double *)(a1 + v20[9]) != *(double *)(a2 + v20[9])
    || (static Date.== infix(_:_:)() & 1) == 0
    || *(unsigned __int8 *)(a1 + v20[11]) != *(unsigned __int8 *)(a2 + v20[11]))
  {
    return 0;
  }
  sub_10001D074(a1 + v20[12], (uint64_t)v19, (uint64_t *)&unk_10163AC90);
  sub_10001D074(a2 + v20[12], (uint64_t)v17, (uint64_t *)&unk_10163AC90);
  uint64_t v21 = (uint64_t)&v10[*(int *)(v8 + 48)];
  sub_10001D074((uint64_t)v19, (uint64_t)v10, (uint64_t *)&unk_10163AC90);
  uint64_t v31 = v21;
  sub_10001D074((uint64_t)v17, v21, (uint64_t *)&unk_10163AC90);
  uint64_t v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48);
  if (v30((uint64_t)v10, 1, v4) != 1)
  {
    sub_10001D074((uint64_t)v10, (uint64_t)v14, (uint64_t *)&unk_10163AC90);
    if (v30(v31, 1, v4) != 1)
    {
      uint64_t v23 = v32;
      (*(void (**)(char *, uint64_t, uint64_t))(v32 + 32))(v7, v31, v4);
      sub_100CCAB9C(&qword_10163AFA0, (void (*)(uint64_t))&type metadata accessor for Date);
      LODWORD(v31) = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v24 = *(void (**)(char *, uint64_t))(v23 + 8);
      v24(v7, v4);
      sub_10001DAB4((uint64_t)v17, (uint64_t *)&unk_10163AC90);
      sub_10001DAB4((uint64_t)v19, (uint64_t *)&unk_10163AC90);
      v24(v14, v4);
      sub_10001DAB4((uint64_t)v10, (uint64_t *)&unk_10163AC90);
      if ((v31 & 1) == 0) {
        return 0;
      }
      goto LABEL_18;
    }
    sub_10001DAB4((uint64_t)v17, (uint64_t *)&unk_10163AC90);
    sub_10001DAB4((uint64_t)v19, (uint64_t *)&unk_10163AC90);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v14, v4);
LABEL_14:
    sub_10001DAB4((uint64_t)v10, (uint64_t *)&unk_10165C700);
    return 0;
  }
  sub_10001DAB4((uint64_t)v17, (uint64_t *)&unk_10163AC90);
  sub_10001DAB4((uint64_t)v19, (uint64_t *)&unk_10163AC90);
  if (v30(v31, 1, v4) != 1) {
    goto LABEL_14;
  }
  sub_10001DAB4((uint64_t)v10, (uint64_t *)&unk_10163AC90);
LABEL_18:
  uint64_t v25 = v20[13];
  uint64_t v26 = *(void *)(a2 + v25);
  if (*(void *)(a1 + v25))
  {
    if (v26)
    {
      swift_bridgeObjectRetain();
      uint64_t v27 = swift_bridgeObjectRetain();
      char v28 = sub_100336D68(v27, v26);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v28) {
        return 1;
      }
    }
  }
  else if (!v26)
  {
    return 1;
  }
  return 0;
}

unsigned char *storeEnumTagSinglePayload for BeaconEstimatedLocation.BeaconEstimatedLocationConversionError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100CCBFF0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BeaconEstimatedLocation.BeaconEstimatedLocationConversionError()
{
  return &type metadata for BeaconEstimatedLocation.BeaconEstimatedLocationConversionError;
}

unsigned char *storeEnumTagSinglePayload for BeaconEstimatedLocation.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *uint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100CCC0F4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BeaconEstimatedLocation.CodingKeys()
{
  return &type metadata for BeaconEstimatedLocation.CodingKeys;
}

unint64_t sub_100CCC130()
{
  unint64_t result = qword_10165C750;
  if (!qword_10165C750)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165C750);
  }
  return result;
}

unint64_t sub_100CCC188()
{
  unint64_t result = qword_10165C758;
  if (!qword_10165C758)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165C758);
  }
  return result;
}

unint64_t sub_100CCC1E0()
{
  unint64_t result = qword_10165C760;
  if (!qword_10165C760)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165C760);
  }
  return result;
}

unint64_t sub_100CCC238()
{
  unint64_t result = qword_10165C768;
  if (!qword_10165C768)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165C768);
  }
  return result;
}

unint64_t sub_100CCC28C(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1015A4CC8, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 9) {
    return 9;
  }
  else {
    return v3;
  }
}

uint64_t sub_100CCC2D8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100CCC340(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t *sub_100CCC3A0(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v22 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (uint64_t *)((char *)a1 + v8);
    uint64_t v11 = (uint64_t *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    *(uint64_t *)((char *)a1 + v9) = *(uint64_t *)((char *)a2 + v9);
    uint64_t v13 = a3[7];
    uint64_t v14 = a3[8];
    uint64_t v15 = (uint64_t *)((char *)a1 + v13);
    uint64_t v16 = (uint64_t *)((char *)a2 + v13);
    uint64_t v17 = v16[1];
    *uint64_t v15 = *v16;
    v15[1] = v17;
    uint64_t v18 = (char *)a1 + v14;
    Swift::UInt8 v19 = (char *)a2 + v14;
    uint64_t v20 = type metadata accessor for Date();
    uint64_t v21 = *(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v21(v18, v19, v20);
  }
  return a1;
}

uint64_t sub_100CCC4F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = a1 + *(int *)(a2 + 32);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);

  return v7(v5, v6);
}

uint64_t sub_100CCC5C0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v7);
  uint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  uint64_t v12 = a3[7];
  uint64_t v13 = a3[8];
  uint64_t v14 = (void *)(a1 + v12);
  uint64_t v15 = (void *)(a2 + v12);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  uint64_t v17 = a1 + v13;
  uint64_t v18 = a2 + v13;
  uint64_t v19 = type metadata accessor for Date();
  uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v20(v17, v18, v19);
  return a1;
}

uint64_t sub_100CCC6C8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  uint64_t v10 = a3[7];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  void *v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[8];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 24))(v14, v15, v16);
  return a1;
}

uint64_t sub_100CCC7E4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  return a1;
}

uint64_t sub_100CCC8B8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[7];
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (uint64_t *)(a2 + v12);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  *uint64_t v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[8];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  uint64_t v20 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 40))(v18, v19, v20);
  return a1;
}

uint64_t sub_100CCC9B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100CCC9C4);
}

uint64_t sub_100CCC9C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
  else
  {
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a3 + 32);
    return v12(v14, a2, v13);
  }
}

uint64_t sub_100CCCAF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100CCCB08);
}

uint64_t sub_100CCCB08(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v11 = type metadata accessor for Date();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 32);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

uint64_t type metadata accessor for KeySyncMetadataDisplay()
{
  uint64_t result = qword_10165C7C8;
  if (!qword_10165C7C8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100CCCC84()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Date();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_100CCCD64(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_10165C810);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_100CCD684();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  type metadata accessor for UUID();
  sub_100CCD6D8(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for KeySyncMetadataDisplay();
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[11] = 4;
    type metadata accessor for Date();
    sub_100CCD6D8((unint64_t *)&unk_10163ACE0, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_100CCCFF4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v25 = a2;
  uint64_t v27 = type metadata accessor for Date();
  uint64_t v24 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v26 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v29 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = sub_10000588C(&qword_10165C820);
  uint64_t v28 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (int *)type metadata accessor for KeySyncMetadataDisplay();
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100CCD684();
  uint64_t v31 = v8;
  uint64_t v12 = (uint64_t)v32;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v12) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  uint64_t v23 = v4;
  uint64_t v13 = v26;
  uint64_t v14 = v27;
  uint64_t v32 = a1;
  char v37 = 0;
  sub_100CCD6D8((unint64_t *)&qword_10163B010, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v11, v29, v5);
  char v36 = 1;
  uint64_t v15 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v16 = (uint64_t *)&v11[v9[5]];
  *uint64_t v16 = v15;
  v16[1] = v17;
  char v35 = 2;
  *(void *)&v11[v9[6]] = KeyedDecodingContainer.decode(_:forKey:)();
  char v34 = 3;
  uint64_t v18 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v19 = (uint64_t *)&v11[v9[7]];
  *uint64_t v19 = v18;
  v19[1] = v20;
  char v33 = 4;
  sub_100CCD6D8(&qword_10163ACC0, (void (*)(uint64_t))&type metadata accessor for Date);
  uint64_t v21 = v23;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v28 + 8))(v31, v30);
  (*(void (**)(char *, char *, uint64_t))(v24 + 32))(&v11[v9[8]], v21, v14);
  sub_100CCD720((uint64_t)v11, v25);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v32);
  return sub_100CCD784((uint64_t)v11);
}

unint64_t sub_100CCD50C()
{
  unint64_t result = 0xD000000000000010;
  switch(*v0)
  {
    case 1:
      unint64_t result = 1701869940;
      break;
    case 2:
      unint64_t result = 0x7865646E69;
      break;
    case 3:
      unint64_t result = 0x65636E6575716573;
      break;
    case 4:
      unint64_t result = 0x6D617473656D6974;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100CCD5B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100CCD9EC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100CCD5DC(uint64_t a1)
{
  unint64_t v2 = sub_100CCD684();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100CCD618(uint64_t a1)
{
  unint64_t v2 = sub_100CCD684();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100CCD654@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100CCCFF4(a1, a2);
}

uint64_t sub_100CCD66C(void *a1)
{
  return sub_100CCCD64(a1);
}

unint64_t sub_100CCD684()
{
  unint64_t result = qword_10165C818;
  if (!qword_10165C818)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165C818);
  }
  return result;
}

uint64_t sub_100CCD6D8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100CCD720(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for KeySyncMetadataDisplay();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100CCD784(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for KeySyncMetadataDisplay();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for KeySyncMetadataDisplay.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100CCD8ACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KeySyncMetadataDisplay.CodingKeys()
{
  return &type metadata for KeySyncMetadataDisplay.CodingKeys;
}

unint64_t sub_100CCD8E8()
{
  unint64_t result = qword_10165C828;
  if (!qword_10165C828)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165C828);
  }
  return result;
}

unint64_t sub_100CCD940()
{
  unint64_t result = qword_10165C830;
  if (!qword_10165C830)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165C830);
  }
  return result;
}

unint64_t sub_100CCD998()
{
  unint64_t result = qword_10165C838;
  if (!qword_10165C838)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165C838);
  }
  return result;
}

uint64_t sub_100CCD9EC(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x80000001013EE1B0
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1701869940 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7865646E69 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x65636E6575716573 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6D617473656D6974 && a2 == 0xE900000000000070)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t sub_100CCDBFC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v2 - 8);
  unsigned int v4 = &v20[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  id v5 = [objc_allocWithZone((Class)IDSServiceDelegateProperties) init];
  [v5 setWantsCrossAccountMessaging:1];
  unsigned int v6 = (objc_class *)type metadata accessor for MessagingServiceDelegateTrampoline();
  uint64_t v7 = (char *)objc_allocWithZone(v6);
  *(void *)&v7[OBJC_IVAR____TtC12searchpartyd34MessagingServiceDelegateTrampoline_delegate + 8] = 0;
  *(void *)(swift_unknownObjectWeakInit() + 8) = &off_101604598;
  swift_unknownObjectWeakAssign();
  v21.receiver = v7;
  v21.super_class = v6;
  id v8 = [super init];
  uint64_t v9 = (void *)v1[5];
  v1[5] = v8;

  uint64_t v10 = (void *)v1[8];
  [v10 addDelegate:v1[5] withDelegateProperties:v5 queue:v1[6]];
  id v11 = [v10 devices];
  if (v11)
  {
    uint64_t v12 = v11;
    sub_10001D4B0(0, &qword_101647428);
    uint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    __chkstk_darwin(v14);
    *(void *)&v20[-16] = v1;
    *(void *)&v20[-8] = v13;
    sub_10000588C((uint64_t *)&unk_101638DC0);
    OS_dispatch_queue.sync<A>(execute:)();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for StateCapture();
  swift_allocObject();
  swift_retain();
  v1[17] = StateCapture.init(_:)();
  swift_release();
  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v4, 1, 1, v15);
  uint64_t v16 = swift_allocObject();
  swift_weakInit();
  uint64_t v17 = (void *)swift_allocObject();
  v17[2] = 0;
  v17[3] = 0;
  v17[4] = v16;
  uint64_t v18 = sub_1000212B0((uint64_t)v4, (uint64_t)&unk_10165CAA8, (uint64_t)v17);

  sub_10001DAB4((uint64_t)v4, &qword_10164DBB0);
  v1[16] = v18;
  return swift_release();
}

uint64_t sub_100CCDEF0()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v2 - 8);
  unsigned int v4 = &v20[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  id v5 = [objc_allocWithZone((Class)IDSServiceDelegateProperties) init];
  [v5 setWantsCrossAccountMessaging:1];
  unsigned int v6 = (objc_class *)type metadata accessor for MessagingServiceDelegateTrampoline();
  uint64_t v7 = (char *)objc_allocWithZone(v6);
  *(void *)&v7[OBJC_IVAR____TtC12searchpartyd34MessagingServiceDelegateTrampoline_delegate + 8] = 0;
  *(void *)(swift_unknownObjectWeakInit() + 8) = &off_101604598;
  swift_unknownObjectWeakAssign();
  v21.receiver = v7;
  v21.super_class = v6;
  id v8 = [super init];
  uint64_t v9 = (void *)v1[5];
  v1[5] = v8;

  uint64_t v10 = (void *)v1[8];
  [v10 addDelegate:v1[5] withDelegateProperties:v5 queue:v1[6]];
  id v11 = [v10 devices];
  if (v11)
  {
    uint64_t v12 = v11;
    sub_10001D4B0(0, &qword_101647428);
    uint64_t v13 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    __chkstk_darwin(v14);
    *(void *)&v20[-16] = v1;
    *(void *)&v20[-8] = v13;
    sub_10000588C((uint64_t *)&unk_101638DC0);
    OS_dispatch_queue.sync<A>(execute:)();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for StateCapture();
  swift_allocObject();
  swift_retain();
  v1[17] = StateCapture.init(_:)();
  swift_release();
  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v4, 1, 1, v15);
  uint64_t v16 = swift_allocObject();
  swift_weakInit();
  uint64_t v17 = (void *)swift_allocObject();
  v17[2] = 0;
  v17[3] = 0;
  v17[4] = v16;
  uint64_t v18 = sub_1000212B0((uint64_t)v4, (uint64_t)&unk_10165C9B0, (uint64_t)v17);

  sub_10001DAB4((uint64_t)v4, &qword_10164DBB0);
  v1[16] = v18;
  return swift_release();
}

uint64_t sub_100CCE1E4()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170EB88);
  uint64_t v1 = sub_100010324(v0, (uint64_t)qword_10170EB88);
  if (qword_101637040 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100010324(v0, (uint64_t)qword_10170EBA0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void *sub_100CCE2AC()
{
  uint64_t v1 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v1);
  uint64_t v2 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v2 - 8);
  uint64_t v3 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unsigned int v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_defaultActor_initialize();
  v0[14] = 0xD00000000000002BLL;
  v0[15] = 0x800000010137B8B0;
  v0[17] = _swiftEmptyDictionarySingleton;
  v0[18] = _swiftEmptyDictionarySingleton;
  sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v3);
  static DispatchQoS.unspecified.getter();
  v9[1] = _swiftEmptyArrayStorage;
  sub_100CD792C((unint64_t *)&qword_101638CC0, 255, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000588C((uint64_t *)&unk_1016376F0);
  sub_100062734((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v0[19] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  sub_10000588C(&qword_10165CAB0);
  swift_allocObject();
  sub_100CD6C18(0xD000000000000037, (void *)0x80000001013F3BC0, 6, (uint64_t (*)(void *))sub_10092F150, &qword_10165CAC0, &qword_10165CAB0, (uint64_t)sub_100CD7A1C, 60.0, 30.0);
  v0[16] = v7;
  return v0;
}

uint64_t sub_100CCE5C8()
{
  *(void *)(v1 + 16) = v0;
  return _swift_task_switch(sub_100CCE5E8, v0, 0);
}

uint64_t sub_100CCE5E8()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void **)(v1 + 128);
  uint64_t v3 = v2[18];
  v2[18] = sub_100CD5738;
  v2[19] = v1;
  swift_retain();
  sub_1000A1534(v3);
  uint64_t v4 = v2[20];
  v2[20] = sub_100CD5748;
  v2[21] = v1;
  swift_retain();
  sub_1000A1534(v4);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = sub_100CD5750;
  *(void *)(v5 + 24) = v1;
  uint64_t v6 = v2[22];
  v2[22] = sub_100550870;
  v2[23] = v5;
  swift_retain();
  sub_1000A1534(v6);
  uint64_t v7 = v2[24];
  v2[24] = sub_100CD57B8;
  v2[25] = v1;
  swift_retain();
  sub_1000A1534(v7);
  uint64_t v8 = v2[26];
  v2[26] = sub_100CD57F0;
  v2[27] = v1;
  swift_retain();
  sub_1000A1534(v8);
  swift_retain();
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_1003D022C;
  uint64_t v10 = *(void *)(v0 + 16);
  return unsafeBlocking<A>(_:)(v9, sub_100CD5828, v10, (char *)&type metadata for () + 8);
}

uint64_t sub_100CCE7BC(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v21 = a5;
  int v20 = a4;
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12);
  v19[1] = type metadata accessor for Transaction();
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v12);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (char *)swift_allocObject();
  *((void *)v16 + 2) = a7;
  *((void *)v16 + 3) = a1;
  *((void *)v16 + 4) = a2;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v16[v15], (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
  uint64_t v17 = &v16[(v14 + v15 + 7) & 0xFFFFFFFFFFFFFFF8];
  char *v17 = v20;
  *((void *)v17 + 1) = v21;
  *((void *)v17 + 2) = a6;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static Transaction.asyncTask(name:block:)();
  return swift_release();
}

uint64_t sub_100CCE978(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v26 = a7;
  int v25 = a6;
  uint64_t v24 = a4;
  int v23 = a3;
  uint64_t v22 = a1;
  uint64_t v15 = type metadata accessor for MessagingMessageContext();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void *)(v16 + 64);
  __chkstk_darwin(v15 - 8);
  uint64_t v27 = type metadata accessor for Transaction();
  sub_100CD5E78(a11, (uint64_t)&v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v18 = (*(unsigned __int8 *)(v16 + 80) + 104) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t v19 = swift_allocObject();
  uint64_t v20 = v22;
  *(void *)(v19 + 16) = a12;
  *(void *)(v19 + 24) = v20;
  *(void *)(v19 + 32) = a2;
  *(unsigned char *)(v19 + 40) = v23;
  *(void *)(v19 + 48) = v24;
  *(void *)(v19 + 56) = a5;
  *(unsigned char *)(v19 + 64) = v25;
  *(void *)(v19 + 72) = v26;
  *(void *)(v19 + 80) = a8;
  *(void *)(v19 + 88) = a9;
  *(void *)(v19 + 96) = a10;
  sub_10042681C((uint64_t)&v22 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), v19 + v18);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000361E0(a8, a9);
  swift_bridgeObjectRetain();
  static Transaction.asyncTask(name:block:)();
  return swift_release();
}

uint64_t sub_100CCEB30(uint64_t a1, uint64_t a2)
{
  v3[12] = a2;
  v3[13] = v2;
  v3[11] = a1;
  uint64_t v4 = type metadata accessor for UUID();
  v3[14] = v4;
  v3[15] = *(void *)(v4 - 8);
  v3[16] = swift_task_alloc();
  v3[17] = swift_task_alloc();
  return _swift_task_switch(sub_100CCEC04, v2, 0);
}

uint64_t sub_100CCEC04()
{
  uint64_t v24 = v0;
  uint64_t v1 = v0[11];
  uint64_t v2 = v0[17];
  uint64_t v3 = v0[14];
  uint64_t v4 = v0[15];
  uint64_t v5 = v0[12];
  UUID.init()();
  uint64_t v6 = v3;
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v7(v2, v1, v6);
  sub_10001D010(v5, (uint64_t)(v0 + 2));
  swift_beginAccess();
  sub_1001600AC((uint64_t)(v0 + 2), v2);
  swift_endAccess();
  if (qword_101637038 != -1) {
    swift_once();
  }
  uint64_t v8 = v0[16];
  uint64_t v9 = v0[14];
  uint64_t v10 = v0[11];
  uint64_t v11 = type metadata accessor for Logger();
  sub_100010324(v11, (uint64_t)qword_10170EB88);
  v7(v8, v10, v9);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.info.getter();
  BOOL v14 = os_log_type_enabled(v12, v13);
  uint64_t v16 = v0[15];
  uint64_t v15 = v0[16];
  uint64_t v17 = v0[14];
  if (v14)
  {
    unint64_t v18 = (uint8_t *)swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)unint64_t v18 = 136446210;
    sub_100CD792C((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[10] = sub_1008FA0F0(v19, v20, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Added client: %{public}s", v18, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v16 + 8))(v0[16], v0[14]);
  }

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v21 = (uint64_t (*)(void))v0[1];
  return v21();
}

uint64_t sub_100CCEEF0(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v7 + 48) = a6;
  *(void *)(v7 + 56) = v6;
  *(void *)(v7 + 32) = a4;
  *(void *)(v7 + 40) = a5;
  *(unsigned char *)(v7 + 136) = a2;
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a3;
  uint64_t v8 = type metadata accessor for UUID();
  *(void *)(v7 + 64) = v8;
  *(void *)(v7 + 72) = *(void *)(v8 - 8);
  *(void *)(v7 + 80) = swift_task_alloc();
  sub_10000588C(&qword_101638CF0);
  *(void *)(v7 + 88) = swift_task_alloc();
  return _swift_task_switch(sub_100CCEFEC, v6, 0);
}

uint64_t sub_100CCEFEC()
{
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v16 = *(void *)(v0 + 48);
  uint64_t v4 = *(void *)(v0 + 40);
  long long v15 = *(_OWORD *)(v0 + 24);
  char v5 = *(unsigned char *)(v0 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(v0 + 72) + 56))(v1, 1, 1, *(void *)(v0 + 64));
  uint64_t v6 = sub_101158790((uint64_t)_swiftEmptyArrayStorage);
  *(void *)(v0 + 96) = v6;
  uint64_t v7 = sub_101158790((uint64_t)_swiftEmptyArrayStorage);
  *(void *)(v0 + 104) = v7;
  UUID.init()();
  uint64_t v9 = sub_100CD792C(&qword_10165C980, v8, (void (*)(uint64_t))type metadata accessor for IDSTransportService_ItemSharingCrossAccount);
  uint64_t v10 = swift_task_alloc();
  *(void *)(v0 + 112) = v10;
  *(void *)(v10 + 16) = v3;
  *(void *)(v10 + 24) = v2;
  *(unsigned char *)(v10 + 32) = v5;
  *(_OWORD *)(v10 + 40) = v15;
  *(void *)(v10 + 56) = v4;
  *(void *)(v10 + 64) = v16;
  *(void *)(v10 + 72) = v1;
  *(void *)(v10 + 80) = 0;
  *(_WORD *)(v10 + 88) = 1;
  *(void *)(v10 + 96) = v6;
  *(void *)(v10 + 104) = v7;
  *(void *)(v10 + 112) = 0;
  *(void *)(v10 + 120) = 0;
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v0 + 120) = v11;
  void *v11 = v0;
  v11[1] = sub_100CCF1C0;
  uint64_t v12 = *(void *)(v0 + 64);
  uint64_t v13 = *(void *)(v0 + 16);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v13, v3, v9, 0xD000000000000083, 0x8000000101416CB0, sub_100CD56E0, v10, v12);
}

uint64_t sub_100CCF1C0()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 128) = v0;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 56);
  if (v0) {
    uint64_t v4 = sub_100CCF3BC;
  }
  else {
    uint64_t v4 = sub_100CCF308;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100CCF308()
{
  uint64_t v1 = v0[11];
  (*(void (**)(void, void))(v0[9] + 8))(v0[10], v0[8]);
  sub_10001DAB4(v1, &qword_101638CF0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_100CCF3BC()
{
  uint64_t v1 = v0[11];
  (*(void (**)(void, void))(v0[9] + 8))(v0[10], v0[8]);
  sub_10001DAB4(v1, &qword_101638CF0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(void))v0[1];
  return v2();
}

uint64_t sub_100CCF470(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, unsigned __int8 a11, unsigned __int8 a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v77 = a8;
  uint64_t v90 = a6;
  unint64_t v91 = a7;
  uint64_t v73 = a5;
  int v72 = a4;
  uint64_t v59 = a3;
  uint64_t v92 = a2;
  uint64_t v62 = a1;
  uint64_t v80 = a15;
  uint64_t v81 = a16;
  uint64_t v79 = a14;
  uint64_t v78 = a13;
  int v76 = a12;
  int v75 = a11;
  uint64_t v74 = a10;
  unint64_t v70 = a9;
  uint64_t v84 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v87 = *(void *)(v84 - 8);
  __chkstk_darwin(v84);
  uint64_t v83 = (char *)&v58 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for DispatchQoS();
  uint64_t v85 = *(void *)(v19 - 8);
  uint64_t v86 = v19;
  __chkstk_darwin(v19);
  uint64_t v82 = (char *)&v58 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_10000588C(&qword_101660720);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v69 = *(void *)(v22 + 64);
  __chkstk_darwin(v21);
  uint64_t v89 = (char *)&v58 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_10000588C(&qword_101638CF0);
  uint64_t v68 = *(void *)(v24 - 8);
  uint64_t v67 = *(void *)(v68 + 64);
  __chkstk_darwin(v24 - 8);
  uint64_t v88 = (uint64_t)&v58 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_10000588C(&qword_10163CB58);
  __chkstk_darwin(v26 - 8);
  uint64_t v28 = (char *)&v58 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for UUID();
  uint64_t v64 = *(void *)(v29 - 8);
  uint64_t v30 = v64;
  uint64_t v65 = *(void *)(v64 + 64);
  __chkstk_darwin(v29);
  uint64_t v32 = (char *)&v58 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v33 = *(void (**)(char *, uint64_t))(v30 + 16);
  uint64_t v34 = a3;
  uint64_t v36 = v35;
  uint64_t v63 = v35;
  v33(v32, v34);
  id v61 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  v61(v28, a1, v21);
  uint64_t v60 = v22;
  char v37 = *(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56);
  uint64_t v66 = v21;
  v37(v28, 0, 1, v21);
  uint64_t v38 = v92;
  swift_beginAccess();
  sub_100160238((uint64_t)v28, (uint64_t)v32);
  swift_endAccess();
  uint64_t v71 = *(void *)(v38 + 152);
  ((void (*)(char *, uint64_t, uint64_t))v33)(v32, v59, v36);
  sub_10001D074(v70, v88, &qword_101638CF0);
  v61(v89, v62, v21);
  uint64_t v39 = v64;
  unint64_t v40 = (*(unsigned __int8 *)(v64 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v64 + 80);
  unint64_t v41 = (v65 + v40 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v42 = (*(unsigned __int8 *)(v68 + 80) + v41 + 8) & ~(unint64_t)*(unsigned __int8 *)(v68 + 80);
  unint64_t v43 = (v67 + v42 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v70 = (v43 + 17) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v44 = (v70 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v45 = (v44 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v46 = (*(unsigned __int8 *)(v22 + 80) + v45 + 16) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80);
  uint64_t v47 = swift_allocObject();
  *(void *)(v47 + 16) = v92;
  *(unsigned char *)(v47 + 24) = v72;
  uint64_t v48 = v90;
  *(void *)(v47 + 32) = v73;
  *(void *)(v47 + 40) = v48;
  *(void *)(v47 + 48) = v91;
  (*(void (**)(unint64_t, char *, uint64_t))(v39 + 32))(v47 + v40, v32, v63);
  *(void *)(v47 + v41) = v77;
  sub_1002729C8(v88, v47 + v42);
  unint64_t v49 = v47 + v43;
  *(void *)unint64_t v49 = v74;
  *(unsigned char *)(v49 + 8) = v75 & 1;
  *(unsigned char *)(v49 + 9) = v76;
  *(void *)(v47 + v70) = v78;
  uint64_t v50 = v80;
  *(void *)(v47 + v44) = v79;
  id v51 = (void *)(v47 + v45);
  uint64_t v52 = v81;
  *id v51 = v50;
  v51[1] = v52;
  (*(void (**)(unint64_t, char *, uint64_t))(v60 + 32))(v47 + v46, v89, v66);
  aBlock[4] = sub_100CD05D8;
  aBlock[5] = v47;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015F0CA0;
  char v53 = _Block_copy(aBlock);
  swift_retain();
  sub_1000361E0(v90, v91);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v54 = v82;
  static DispatchQoS.unspecified.getter();
  uint64_t v93 = _swiftEmptyArrayStorage;
  sub_100CD792C((unint64_t *)&qword_10163B7E0, 255, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v55 = v83;
  uint64_t v56 = v84;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v53);
  (*(void (**)(char *, uint64_t))(v87 + 8))(v55, v56);
  (*(void (**)(char *, uint64_t))(v85 + 8))(v54, v86);
  return swift_release();
}

uint64_t sub_100CCFC54(uint64_t a1, int a2, uint64_t a3, void (*a4)(void, void, void), void (*a5)(void, void), char *a6, uint64_t a7, uint64_t a8, unint64_t a9, char a10, unsigned __int8 a11, long long a12, uint64_t a13, uint64_t a14)
{
  uint64_t v35 = a7;
  uint64_t v36 = a8;
  uint64_t v32 = a3;
  char v33 = a4;
  unint64_t v34 = a9;
  int v30 = a11;
  int v31 = a2;
  long long v29 = a12;
  uint64_t v28 = a13;
  uint64_t v17 = sub_10000588C(&qword_101660720);
  v27[0] = *(void *)(v17 - 8);
  v27[1] = v17;
  uint64_t v18 = *(void *)(v27[0] + 64);
  __chkstk_darwin(v17);
  uint64_t v39 = (char *)v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v19 - 8);
  uint64_t v38 = (char *)v27 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = type metadata accessor for UUID();
  uint64_t v21 = *(void *)(v37 - 8);
  uint64_t v22 = __chkstk_darwin(v37);
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)v27 - v23;
  v27[2] = a1;
  *((void *)&v26 + 1) = a14;
  *(void *)&long long v26 = v28;
  sub_1004E9540(v31, v32, v33, a5, a6, v35, v36, v34, (uint64_t)v27 - v23, a10 & 1, v30, v29, *((uint64_t *)&v29 + 1), v26);
  return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v24, v37);
}

uint64_t sub_100CD0000(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[8] = a6;
  v7[9] = a7;
  v7[6] = a4;
  v7[7] = a5;
  sub_10000588C(&qword_10163CB58);
  v7[10] = swift_task_alloc();
  return _swift_task_switch(sub_100CD009C, a4, 0);
}

uint64_t sub_100CD009C()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 56);
  swift_beginAccess();
  sub_100164580(v2, v1);
  swift_endAccess();
  sub_10001DAB4(v1, &qword_10163CB58);
  return _swift_task_switch(sub_100CD0150, 0, 0);
}

uint64_t sub_100CD0150()
{
  v0[5] = v0[9];
  swift_errorRetain();
  sub_10000588C(&qword_101660720);
  CheckedContinuation.resume(throwing:)();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_100CD01E4()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for IDSTransportService_ItemSharingCrossAccount()
{
  return self;
}

uint64_t sub_100CD0260()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100033F68;
  v2[2] = v0;
  return _swift_task_switch(sub_100CCE5E8, v0, 0);
}

uint64_t sub_100CD0304(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100CD792C(&qword_10165C980, a2, (void (*)(uint64_t))type metadata accessor for IDSTransportService_ItemSharingCrossAccount);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100CD035C()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v15 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v3 = (v15 + 56) & ~v15;
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)(sub_10000588C(&qword_101638CF0) - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v14 = *(void *)(v5 + 64);
  uint64_t v16 = sub_10000588C(&qword_101660720);
  uint64_t v7 = *(void *)(v16 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v13 = *(void *)(v7 + 64);
  swift_release();
  sub_10001CFB8(*(void *)(v0 + 40), *(void *)(v0 + 48));
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v9(v0 + v3, v1);
  uint64_t v10 = (v4 + v6 + 8) & ~v6;
  swift_bridgeObjectRelease();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v0 + v10, 1, v1)) {
    v9(v0 + v10, v1);
  }
  unint64_t v11 = (v8
       + ((((((((v14 + v10 + 7) & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
       + 16) & ~v8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v0 + v11, v16);

  return _swift_deallocObject(v0, v11 + v13, v15 | v6 | v8 | 7);
}

uint64_t sub_100CD05D8()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void *)(sub_10000588C(&qword_101638CF0) - 8);
  unint64_t v5 = (v3 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = (v6 + 17) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  sub_10000588C(&qword_101660720);
  *((void *)&v10 + 1) = *(void *)(v0 + v8);
  *(void *)&long long v10 = *(void *)(v0 + v7);
  return sub_100CCFC54(*(void *)(v0 + 16), *(unsigned __int8 *)(v0 + 24), *(void *)(v0 + 32), *(void (**)(void, void, void))(v0 + 40), *(void (**)(void, void))(v0 + 48), (char *)(v0 + v2), *(void *)(v0 + v3), v0 + v5, *(void *)(v0 + v6), *(unsigned char *)(v0 + v6 + 8), *(unsigned char *)(v0 + v6 + 9), v10, *(void *)(v0 + ((v8 + 15) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v0 + ((v8 + 15) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_100CD0790(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100CD07A0()
{
  return swift_release();
}

uint64_t sub_100CD07A8()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = sub_10000588C(&qword_101660720);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v5 + v8) & ~v8;
  uint64_t v10 = v3 | v8 | 7;
  unint64_t v11 = ((*(void *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  swift_errorRelease();

  return _swift_deallocObject(v0, v11, v10);
}

uint64_t sub_100CD0920(uint64_t a1)
{
  uint64_t v3 = v2;
  uint64_t v5 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = v6 + *(void *)(v5 + 64);
  uint64_t v8 = *(void *)(sub_10000588C(&qword_101660720) - 8);
  unint64_t v9 = (v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = v1[2];
  uint64_t v11 = v1[3];
  uint64_t v12 = v1[4];
  uint64_t v13 = (uint64_t)v1 + v6;
  uint64_t v14 = (uint64_t)v1 + v9;
  uint64_t v15 = *(void *)((char *)v1 + ((*(void *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v16 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v16;
  *uint64_t v16 = v3;
  v16[1] = sub_100033F68;
  return sub_100CD0000(a1, v10, v11, v12, v13, v14, v15);
}

uint64_t sub_100CD0ABC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v7 + 48) = a6;
  *(void *)(v7 + 56) = a7;
  *(unsigned char *)(v7 + 80) = a5;
  *(void *)(v7 + 32) = a3;
  *(void *)(v7 + 40) = a4;
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  return _swift_task_switch(sub_100CD0AE8, 0, 0);
}

uint64_t sub_100CD0AE8()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v1 = *(void *)(v0 + 56);
  char v3 = *(unsigned char *)(v0 + 80);
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  uint64_t v6 = swift_task_alloc();
  *(void *)(v0 + 64) = v6;
  long long v7 = *(_OWORD *)(v0 + 32);
  *(void *)(v6 + 16) = v5;
  *(void *)(v6 + 24) = v4;
  *(_OWORD *)(v6 + 32) = v7;
  *(unsigned char *)(v6 + 48) = v3;
  *(void *)(v6 + 56) = v2;
  *(void *)(v6 + 64) = v1;
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_1003D0C90;
  return withTaskGroup<A, B>(of:returning:isolation:body:)(v8);
}

uint64_t sub_100CD0BF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  *(void *)(v8 + 216) = a8;
  *(void *)(v8 + 224) = v14;
  *(unsigned char *)(v8 + 288) = a7;
  *(void *)(v8 + 200) = a5;
  *(void *)(v8 + 208) = a6;
  *(void *)(v8 + 184) = a3;
  *(void *)(v8 + 192) = a4;
  *(void *)(v8 + 176) = a2;
  uint64_t v10 = type metadata accessor for UUID();
  *(void *)(v8 + 232) = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  *(void *)(v8 + 240) = v11;
  *(void *)(v8 + 248) = *(void *)(v11 + 64);
  *(void *)(v8 + 256) = swift_task_alloc();
  sub_10000588C(&qword_10164DBB0);
  *(void *)(v8 + 264) = swift_task_alloc();
  *(void *)(v8 + 272) = swift_task_alloc();
  return _swift_task_switch(sub_100CD0D18, a3, 0);
}

uint64_t sub_100CD0D18()
{
  uint64_t v1 = *(void *)(v0 + 184);
  swift_beginAccess();
  *(void *)(v0 + 280) = *(void *)(v1 + 136);
  swift_bridgeObjectRetain();
  return _swift_task_switch(sub_100CD0DA0, 0, 0);
}

void sub_100CD0DA0()
{
  int64_t v1 = 0;
  uint64_t v36 = (long long *)(v0 + 56);
  uint64_t v37 = (long long *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 280);
  uint64_t v3 = *(void *)(v2 + 64);
  uint64_t v31 = v2 + 64;
  uint64_t v34 = *(void *)(v0 + 240);
  uint64_t v35 = v2;
  uint64_t v4 = -1;
  uint64_t v5 = -1 << *(unsigned char *)(v35 + 32);
  if (-v5 < 64) {
    uint64_t v4 = ~(-1 << -(char)v5);
  }
  unint64_t v6 = v4 & v3;
  int64_t v32 = (unint64_t)(63 - v5) >> 6;
  uint64_t v33 = *(void *)(v0 + 248) + 7;
  while (1)
  {
    if (v6)
    {
      uint64_t v44 = (v6 - 1) & v6;
      int64_t v38 = v1;
      unint64_t v8 = __clz(__rbit64(v6)) | (v1 << 6);
      goto LABEL_23;
    }
    int64_t v9 = v1 + 1;
    if (__OFADD__(v1, 1))
    {
      __break(1u);
LABEL_35:
      __break(1u);
      return;
    }
    if (v9 >= v32) {
      goto LABEL_31;
    }
    unint64_t v10 = *(void *)(v31 + 8 * v9);
    int64_t v11 = v1 + 1;
    if (!v10)
    {
      int64_t v11 = v1 + 2;
      if (v1 + 2 >= v32) {
        goto LABEL_31;
      }
      unint64_t v10 = *(void *)(v31 + 8 * v11);
      if (!v10)
      {
        int64_t v11 = v1 + 3;
        if (v1 + 3 >= v32) {
          goto LABEL_31;
        }
        unint64_t v10 = *(void *)(v31 + 8 * v11);
        if (!v10)
        {
          int64_t v11 = v1 + 4;
          if (v1 + 4 >= v32) {
            goto LABEL_31;
          }
          unint64_t v10 = *(void *)(v31 + 8 * v11);
          if (!v10) {
            break;
          }
        }
      }
    }
LABEL_22:
    uint64_t v44 = (v10 - 1) & v10;
    int64_t v38 = v11;
    unint64_t v8 = __clz(__rbit64(v10)) + (v11 << 6);
LABEL_23:
    uint64_t v13 = *(void *)(v0 + 272);
    uint64_t v43 = *(void *)(v0 + 264);
    uint64_t v14 = *(void *)(v0 + 256);
    uint64_t v15 = *(void *)(v0 + 232);
    char v40 = *(unsigned char *)(v0 + 288);
    uint64_t v16 = *(void *)(v0 + 208);
    uint64_t v41 = *(void *)(v0 + 216);
    uint64_t v42 = *(void *)(v0 + 224);
    uint64_t v17 = *(void *)(v0 + 200);
    uint64_t v39 = *(void *)(v0 + 192);
    sub_10001D010(*(void *)(v35 + 56) + 40 * v8, (uint64_t)v37);
    uint64_t v18 = type metadata accessor for TaskPriority();
    uint64_t v19 = *(void *)(v18 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v13, 1, 1, v18);
    sub_10001CEB0(v37, (uint64_t)v36);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16))(v14, v16, v15);
    unint64_t v20 = (*(unsigned __int8 *)(v34 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
    uint64_t v21 = (char *)swift_allocObject();
    *((void *)v21 + 2) = 0;
    *((void *)v21 + 3) = 0;
    sub_10001CEB0(v36, (uint64_t)(v21 + 32));
    *((void *)v21 + 9) = v39;
    *((void *)v21 + 10) = v17;
    (*(void (**)(char *, uint64_t, uint64_t))(v34 + 32))(&v21[v20], v14, v15);
    uint64_t v22 = &v21[(v33 + v20) & 0xFFFFFFFFFFFFFFF8];
    *uint64_t v22 = v40;
    *((void *)v22 + 1) = v41;
    *((void *)v22 + 2) = v42;
    sub_10001D074(v13, v43, &qword_10164DBB0);
    LODWORD(v13) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v43, 1, v18);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v23 = *(void *)(v0 + 264);
    if (v13 == 1)
    {
      sub_10001DAB4(*(void *)(v0 + 264), &qword_10164DBB0);
    }
    else
    {
      TaskPriority.rawValue.getter();
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v23, v18);
    }
    int64_t v1 = v38;
    if (*((void *)v21 + 2))
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v24 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v26 = v25;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v24 = 0;
      uint64_t v26 = 0;
    }
    uint64_t v27 = **(void **)(v0 + 176);
    uint64_t v28 = swift_allocObject();
    *(void *)(v28 + 16) = &unk_10165CA80;
    *(void *)(v28 + 24) = v21;
    uint64_t v29 = v26 | v24;
    if (v26 | v24)
    {
      uint64_t v29 = v0 + 96;
      *(void *)(v0 + 96) = 0;
      *(void *)(v0 + 104) = 0;
      *(void *)(v0 + 112) = v24;
      *(void *)(v0 + 120) = v26;
    }
    uint64_t v7 = *(void *)(v0 + 272);
    *(void *)(v0 + 152) = 1;
    *(void *)(v0 + 160) = v29;
    *(void *)(v0 + 168) = v27;
    swift_task_create();
    swift_release();
    sub_10001DAB4(v7, &qword_10164DBB0);
    unint64_t v6 = v44;
  }
  uint64_t v12 = v1 + 5;
  if (v1 + 5 < v32)
  {
    unint64_t v10 = *(void *)(v31 + 8 * v12);
    if (!v10)
    {
      while (1)
      {
        int64_t v11 = v12 + 1;
        if (__OFADD__(v12, 1)) {
          goto LABEL_35;
        }
        if (v11 >= v32) {
          goto LABEL_31;
        }
        unint64_t v10 = *(void *)(v31 + 8 * v11);
        ++v12;
        if (v10) {
          goto LABEL_22;
        }
      }
    }
    int64_t v11 = v1 + 5;
    goto LABEL_22;
  }
LABEL_31:
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  int v30 = *(void (**)(void))(v0 + 8);
  v30();
}

uint64_t sub_100CD12A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  *(void *)(v8 + 48) = v10;
  *(void *)(v8 + 56) = v11;
  *(unsigned char *)(v8 + 72) = a8;
  *(void *)(v8 + 32) = a6;
  *(void *)(v8 + 40) = a7;
  *(void *)(v8 + 16) = a4;
  *(void *)(v8 + 24) = a5;
  return _swift_task_switch(sub_100CD12DC, 0, 0);
}

uint64_t sub_100CD12DC()
{
  int64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  sub_10001CD44(v1, v2);
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 + 24) + **(int **)(v3 + 24));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v4;
  void *v4 = v0;
  v4[1] = sub_1001E0274;
  uint64_t v5 = *(void *)(v0 + 48);
  uint64_t v6 = *(void *)(v0 + 56);
  uint64_t v7 = *(void *)(v0 + 32);
  uint64_t v8 = *(void *)(v0 + 40);
  uint64_t v9 = *(unsigned __int8 *)(v0 + 72);
  uint64_t v10 = *(void *)(v0 + 24);
  return v12(v10, v7, v8, v9, v5, v6, v2, v3);
}

uint64_t sub_100CD13F0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  *(void *)(v8 + 80) = v11;
  *(void *)(v8 + 88) = v12;
  *(_OWORD *)(v8 + 64) = v10;
  *(unsigned char *)(v8 + 113) = a7;
  *(void *)(v8 + 48) = a6;
  *(void *)(v8 + 56) = a8;
  *(unsigned char *)(v8 + 112) = a4;
  *(void *)(v8 + 32) = a3;
  *(void *)(v8 + 40) = a5;
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  return _swift_task_switch(sub_100CD1434, 0, 0);
}

uint64_t sub_100CD1434()
{
  uint64_t v1 = *(void *)(v0 + 72);
  char v2 = *(unsigned char *)(v0 + 113);
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 48);
  char v5 = *(unsigned char *)(v0 + 112);
  uint64_t v6 = *(void *)(v0 + 32);
  long long v11 = *(_OWORD *)(v0 + 16);
  long long v12 = *(_OWORD *)(v0 + 56);
  uint64_t v7 = swift_task_alloc();
  *(void *)(v0 + 96) = v7;
  long long v8 = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v7 + 16) = v11;
  *(void *)(v7 + 32) = v6;
  *(unsigned char *)(v7 + 40) = v5;
  *(void *)(v7 + 48) = v4;
  *(void *)(v7 + 56) = v3;
  *(unsigned char *)(v7 + 64) = v2;
  *(_OWORD *)(v7 + 72) = v12;
  *(void *)(v7 + 88) = v1;
  *(_OWORD *)(v7 + 96) = v8;
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_1003D170C;
  return withTaskGroup<A, B>(of:returning:isolation:body:)(v9);
}

uint64_t sub_100CD1574(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 256) = v16;
  *(_OWORD *)(v8 + 224) = v14;
  *(_OWORD *)(v8 + 240) = v15;
  *(unsigned char *)(v8 + 313) = v13;
  *(void *)(v8 + 208) = a7;
  *(void *)(v8 + 216) = a8;
  *(unsigned char *)(v8 + 312) = a6;
  *(void *)(v8 + 192) = a4;
  *(void *)(v8 + 200) = a5;
  *(void *)(v8 + 176) = a2;
  *(void *)(v8 + 184) = a3;
  uint64_t v10 = *(void *)(type metadata accessor for MessagingMessageContext() - 8);
  *(void *)(v8 + 264) = v10;
  *(void *)(v8 + 272) = *(void *)(v10 + 64);
  *(void *)(v8 + 280) = swift_task_alloc();
  sub_10000588C(&qword_10164DBB0);
  *(void *)(v8 + 288) = swift_task_alloc();
  *(void *)(v8 + 296) = swift_task_alloc();
  return _swift_task_switch(sub_100CD16A8, a3, 0);
}

uint64_t sub_100CD16A8()
{
  uint64_t v1 = *(void *)(v0 + 184);
  swift_beginAccess();
  *(void *)(v0 + 304) = *(void *)(v1 + 136);
  swift_bridgeObjectRetain();
  return _swift_task_switch(sub_100CD1730, 0, 0);
}

void sub_100CD1730()
{
  int64_t v1 = 0;
  uint64_t v35 = (long long *)(v0 + 56);
  uint64_t v36 = (long long *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 304);
  uint64_t v3 = *(void *)(v2 + 64);
  uint64_t v31 = v2 + 64;
  uint64_t v33 = *(void *)(v0 + 264);
  uint64_t v34 = v2;
  uint64_t v4 = -1;
  uint64_t v5 = -1 << *(unsigned char *)(v34 + 32);
  if (-v5 < 64) {
    uint64_t v4 = ~(-1 << -(char)v5);
  }
  unint64_t v6 = v4 & v3;
  int64_t v32 = (unint64_t)(63 - v5) >> 6;
  while (1)
  {
    if (v6)
    {
      uint64_t v37 = (v6 - 1) & v6;
      int64_t v38 = v1;
      unint64_t v8 = __clz(__rbit64(v6)) | (v1 << 6);
      goto LABEL_23;
    }
    int64_t v9 = v1 + 1;
    if (__OFADD__(v1, 1))
    {
      __break(1u);
LABEL_35:
      __break(1u);
      return;
    }
    if (v9 >= v32) {
      goto LABEL_31;
    }
    unint64_t v10 = *(void *)(v31 + 8 * v9);
    int64_t v11 = v1 + 1;
    if (!v10)
    {
      int64_t v11 = v1 + 2;
      if (v1 + 2 >= v32) {
        goto LABEL_31;
      }
      unint64_t v10 = *(void *)(v31 + 8 * v11);
      if (!v10)
      {
        int64_t v11 = v1 + 3;
        if (v1 + 3 >= v32) {
          goto LABEL_31;
        }
        unint64_t v10 = *(void *)(v31 + 8 * v11);
        if (!v10)
        {
          int64_t v11 = v1 + 4;
          if (v1 + 4 >= v32) {
            goto LABEL_31;
          }
          unint64_t v10 = *(void *)(v31 + 8 * v11);
          if (!v10) {
            break;
          }
        }
      }
    }
LABEL_22:
    uint64_t v37 = (v10 - 1) & v10;
    int64_t v38 = v11;
    unint64_t v8 = __clz(__rbit64(v10)) + (v11 << 6);
LABEL_23:
    uint64_t v13 = *(void *)(v0 + 296);
    uint64_t v47 = *(void *)(v0 + 288);
    uint64_t v14 = *(void *)(v0 + 280);
    uint64_t v15 = *(void *)(v0 + 256);
    unint64_t v45 = *(void *)(v0 + 240);
    uint64_t v46 = *(void *)(v0 + 248);
    uint64_t v16 = *(void *)(v0 + 216);
    uint64_t v43 = *(void *)(v0 + 224);
    uint64_t v44 = *(void *)(v0 + 232);
    char v42 = *(unsigned char *)(v0 + 313);
    uint64_t v17 = *(void *)(v0 + 200);
    uint64_t v41 = *(void *)(v0 + 208);
    char v40 = *(unsigned char *)(v0 + 312);
    uint64_t v39 = *(void *)(v0 + 192);
    sub_10001D010(*(void *)(v34 + 56) + 40 * v8, (uint64_t)v36);
    uint64_t v18 = type metadata accessor for TaskPriority();
    uint64_t v19 = *(void *)(v18 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v13, 1, 1, v18);
    sub_10001CEB0(v36, (uint64_t)v35);
    sub_100CD5E78(v15, v14);
    unint64_t v20 = (*(unsigned __int8 *)(v33 + 80) + 152) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = 0;
    *(void *)(v21 + 24) = 0;
    sub_10001CEB0(v35, v21 + 32);
    *(void *)(v21 + 72) = v39;
    *(void *)(v21 + 80) = v17;
    *(unsigned char *)(v21 + 88) = v40;
    *(void *)(v21 + 96) = v41;
    *(void *)(v21 + 104) = v16;
    *(unsigned char *)(v21 + 112) = v42;
    *(void *)(v21 + 120) = v43;
    *(void *)(v21 + 128) = v44;
    *(void *)(v21 + 136) = v45;
    *(void *)(v21 + 144) = v46;
    sub_10042681C(v14, v21 + v20);
    sub_10001D074(v13, v47, &qword_10164DBB0);
    uint64_t v22 = v18;
    LODWORD(v18) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v47, 1, v18);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000361E0(v44, v45);
    swift_bridgeObjectRetain();
    uint64_t v23 = *(void *)(v0 + 288);
    if (v18 == 1)
    {
      sub_10001DAB4(*(void *)(v0 + 288), &qword_10164DBB0);
    }
    else
    {
      TaskPriority.rawValue.getter();
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v23, v22);
    }
    unint64_t v6 = v37;
    int64_t v1 = v38;
    if (*(void *)(v21 + 16))
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v24 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v26 = v25;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v24 = 0;
      uint64_t v26 = 0;
    }
    uint64_t v27 = **(void **)(v0 + 176);
    uint64_t v28 = swift_allocObject();
    *(void *)(v28 + 16) = &unk_10165CA48;
    *(void *)(v28 + 24) = v21;
    uint64_t v29 = v26 | v24;
    if (v26 | v24)
    {
      uint64_t v29 = v0 + 96;
      *(void *)(v0 + 96) = 0;
      *(void *)(v0 + 104) = 0;
      *(void *)(v0 + 112) = v24;
      *(void *)(v0 + 120) = v26;
    }
    uint64_t v7 = *(void *)(v0 + 296);
    *(void *)(v0 + 152) = 1;
    *(void *)(v0 + 160) = v29;
    *(void *)(v0 + 168) = v27;
    swift_task_create();
    swift_release();
    sub_10001DAB4(v7, &qword_10164DBB0);
  }
  uint64_t v12 = v1 + 5;
  if (v1 + 5 < v32)
  {
    unint64_t v10 = *(void *)(v31 + 8 * v12);
    if (!v10)
    {
      while (1)
      {
        int64_t v11 = v12 + 1;
        if (__OFADD__(v12, 1)) {
          goto LABEL_35;
        }
        if (v11 >= v32) {
          goto LABEL_31;
        }
        unint64_t v10 = *(void *)(v31 + 8 * v11);
        ++v12;
        if (v10) {
          goto LABEL_22;
        }
      }
    }
    int64_t v11 = v1 + 5;
    goto LABEL_22;
  }
LABEL_31:
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  int v30 = *(void (**)(void))(v0 + 8);
  v30();
}

uint64_t sub_100CD1C50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  *(void *)(v8 + 112) = v15;
  *(void *)(v8 + 120) = v16;
  *(void *)(v8 + 96) = v13;
  *(void *)(v8 + 104) = v14;
  *(unsigned char *)(v8 + 137) = v11;
  *(void *)(v8 + 80) = v10;
  *(void *)(v8 + 88) = v12;
  *(unsigned char *)(v8 + 136) = a7;
  *(void *)(v8 + 64) = a6;
  *(void *)(v8 + 72) = a8;
  *(void *)(v8 + 48) = a4;
  *(void *)(v8 + 56) = a5;
  return _swift_task_switch(sub_100CD1CA0, 0, 0);
}

void sub_100CD1CA0()
{
  uint64_t v1 = *(void *)(v0 + 104);
  long long v7 = *(_OWORD *)(v0 + 88);
  char v2 = *(unsigned char *)(v0 + 137);
  uint64_t v3 = *(void **)(v0 + 48);
  uint64_t v4 = v3[4];
  sub_10001CD44(v3, v3[3]);
  *(unsigned char *)(v0 + 16) = v2;
  *(_OWORD *)(v0 + 24) = v7;
  *(void *)(v0 + 40) = v1;
  uint64_t v6 = *(void *)(v4 + 32) + **(int **)(v4 + 32);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 128) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100CD1DF0;
  __asm { BRAA            X9, X16 }
}

uint64_t sub_100CD1DF0()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_100CD1EE4(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return _swift_task_switch(sub_100CD1F04, 0, 0);
}

uint64_t sub_100CD1F04()
{
  uint64_t v1 = swift_task_alloc();
  *(void *)(v0 + 32) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 16);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1003D2268;
  return withTaskGroup<A, B>(of:returning:isolation:body:)(v2);
}

uint64_t sub_100CD1FE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[23] = a3;
  v4[24] = a4;
  v4[22] = a2;
  sub_10000588C(&qword_10164DBB0);
  v4[25] = swift_task_alloc();
  v4[26] = swift_task_alloc();
  return _swift_task_switch(sub_100CD2094, a3, 0);
}

uint64_t sub_100CD2094()
{
  uint64_t v1 = *(void *)(v0 + 184);
  swift_beginAccess();
  *(void *)(v0 + 216) = *(void *)(v1 + 136);
  swift_bridgeObjectRetain();
  return _swift_task_switch(sub_100CD211C, 0, 0);
}

void sub_100CD211C()
{
  int64_t v1 = 0;
  int64_t v32 = (long long *)(v0 + 56);
  uint64_t v33 = (long long *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 216);
  uint64_t v3 = *(void *)(v2 + 64);
  uint64_t v29 = v2 + 64;
  uint64_t v31 = v2;
  uint64_t v4 = -1;
  uint64_t v5 = -1 << *(unsigned char *)(v31 + 32);
  if (-v5 < 64) {
    uint64_t v4 = ~(-1 << -(char)v5);
  }
  unint64_t v6 = v4 & v3;
  int64_t v30 = (unint64_t)(63 - v5) >> 6;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      uint64_t v34 = (v6 - 1) & v6;
      int64_t v9 = v1;
      unint64_t v10 = v8 | (v1 << 6);
      goto LABEL_23;
    }
    int64_t v11 = v1 + 1;
    if (__OFADD__(v1, 1))
    {
      __break(1u);
LABEL_35:
      __break(1u);
      return;
    }
    if (v11 >= v30) {
      goto LABEL_31;
    }
    unint64_t v12 = *(void *)(v29 + 8 * v11);
    int64_t v13 = v1 + 1;
    if (!v12)
    {
      int64_t v13 = v1 + 2;
      if (v1 + 2 >= v30) {
        goto LABEL_31;
      }
      unint64_t v12 = *(void *)(v29 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v1 + 3;
        if (v1 + 3 >= v30) {
          goto LABEL_31;
        }
        unint64_t v12 = *(void *)(v29 + 8 * v13);
        if (!v12)
        {
          int64_t v13 = v1 + 4;
          if (v1 + 4 >= v30) {
            goto LABEL_31;
          }
          unint64_t v12 = *(void *)(v29 + 8 * v13);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_22:
    uint64_t v34 = (v12 - 1) & v12;
    int64_t v9 = v13;
    unint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
LABEL_23:
    uint64_t v16 = *(void *)(v0 + 200);
    uint64_t v15 = *(void *)(v0 + 208);
    uint64_t v17 = *(void *)(v0 + 192);
    sub_10001D010(*(void *)(v31 + 56) + 40 * v10, (uint64_t)v33);
    uint64_t v18 = type metadata accessor for TaskPriority();
    uint64_t v19 = *(void *)(v18 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v15, 1, 1, v18);
    sub_10001CEB0(v33, (uint64_t)v32);
    unint64_t v20 = (void *)swift_allocObject();
    v20[2] = 0;
    v20[3] = 0;
    sub_10001CEB0(v32, (uint64_t)(v20 + 4));
    v20[9] = v17;
    sub_10001D074(v15, v16, &qword_10164DBB0);
    LODWORD(v15) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v16, 1, v18);
    swift_bridgeObjectRetain();
    uint64_t v21 = *(void *)(v0 + 200);
    if (v15 == 1)
    {
      sub_10001DAB4(*(void *)(v0 + 200), &qword_10164DBB0);
    }
    else
    {
      TaskPriority.rawValue.getter();
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v21, v18);
    }
    int64_t v1 = v9;
    unint64_t v6 = v34;
    if (v20[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v22 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v24 = v23;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v22 = 0;
      uint64_t v24 = 0;
    }
    uint64_t v25 = **(void **)(v0 + 176);
    uint64_t v26 = swift_allocObject();
    *(void *)(v26 + 16) = &unk_10165CA10;
    *(void *)(v26 + 24) = v20;
    uint64_t v27 = v24 | v22;
    if (v24 | v22)
    {
      uint64_t v27 = v0 + 96;
      *(void *)(v0 + 96) = 0;
      *(void *)(v0 + 104) = 0;
      *(void *)(v0 + 112) = v22;
      *(void *)(v0 + 120) = v24;
    }
    uint64_t v7 = *(void *)(v0 + 208);
    *(void *)(v0 + 152) = 1;
    *(void *)(v0 + 160) = v27;
    *(void *)(v0 + 168) = v25;
    swift_task_create();
    swift_release();
    sub_10001DAB4(v7, &qword_10164DBB0);
  }
  uint64_t v14 = v1 + 5;
  if (v1 + 5 < v30)
  {
    unint64_t v12 = *(void *)(v29 + 8 * v14);
    if (!v12)
    {
      while (1)
      {
        int64_t v13 = v14 + 1;
        if (__OFADD__(v14, 1)) {
          goto LABEL_35;
        }
        if (v13 >= v30) {
          goto LABEL_31;
        }
        unint64_t v12 = *(void *)(v29 + 8 * v13);
        ++v14;
        if (v12) {
          goto LABEL_22;
        }
      }
    }
    int64_t v13 = v1 + 5;
    goto LABEL_22;
  }
LABEL_31:
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v28 = *(void (**)(void))(v0 + 8);
  v28();
}

uint64_t sub_100CD255C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return _swift_task_switch(sub_100CD257C, 0, 0);
}

uint64_t sub_100CD257C()
{
  int64_t v1 = (void *)v0[2];
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  sub_10001CD44(v1, v2);
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 + 40) + **(int **)(v3 + 40));
  uint64_t v4 = (void *)swift_task_alloc();
  v0[4] = v4;
  void *v4 = v0;
  v4[1] = sub_1003D2A00;
  uint64_t v5 = v0[3];
  return v7(v5, v2, v3);
}

uint64_t sub_100CD2684(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return _swift_task_switch(sub_100CD26A4, 0, 0);
}

uint64_t sub_100CD26A4()
{
  uint64_t v1 = swift_task_alloc();
  *(void *)(v0 + 32) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 16);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1003D2BF8;
  return withTaskGroup<A, B>(of:returning:isolation:body:)(v2);
}

uint64_t sub_100CD2788(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[23] = a3;
  v4[24] = a4;
  v4[22] = a2;
  sub_10000588C(&qword_10164DBB0);
  v4[25] = swift_task_alloc();
  v4[26] = swift_task_alloc();
  return _swift_task_switch(sub_100CD2834, a3, 0);
}

uint64_t sub_100CD2834()
{
  uint64_t v1 = *(void *)(v0 + 184);
  swift_beginAccess();
  *(void *)(v0 + 216) = *(void *)(v1 + 136);
  swift_bridgeObjectRetain();
  return _swift_task_switch(sub_100CD28BC, 0, 0);
}

void sub_100CD28BC()
{
  int64_t v1 = 0;
  int64_t v32 = (long long *)(v0 + 56);
  uint64_t v33 = (long long *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 216);
  uint64_t v3 = *(void *)(v2 + 64);
  uint64_t v29 = v2 + 64;
  uint64_t v31 = v2;
  uint64_t v4 = -1;
  uint64_t v5 = -1 << *(unsigned char *)(v31 + 32);
  if (-v5 < 64) {
    uint64_t v4 = ~(-1 << -(char)v5);
  }
  unint64_t v6 = v4 & v3;
  int64_t v30 = (unint64_t)(63 - v5) >> 6;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      uint64_t v34 = (v6 - 1) & v6;
      int64_t v9 = v1;
      unint64_t v10 = v8 | (v1 << 6);
      goto LABEL_23;
    }
    int64_t v11 = v1 + 1;
    if (__OFADD__(v1, 1))
    {
      __break(1u);
LABEL_35:
      __break(1u);
      return;
    }
    if (v11 >= v30) {
      goto LABEL_31;
    }
    unint64_t v12 = *(void *)(v29 + 8 * v11);
    int64_t v13 = v1 + 1;
    if (!v12)
    {
      int64_t v13 = v1 + 2;
      if (v1 + 2 >= v30) {
        goto LABEL_31;
      }
      unint64_t v12 = *(void *)(v29 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v1 + 3;
        if (v1 + 3 >= v30) {
          goto LABEL_31;
        }
        unint64_t v12 = *(void *)(v29 + 8 * v13);
        if (!v12)
        {
          int64_t v13 = v1 + 4;
          if (v1 + 4 >= v30) {
            goto LABEL_31;
          }
          unint64_t v12 = *(void *)(v29 + 8 * v13);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_22:
    uint64_t v34 = (v12 - 1) & v12;
    int64_t v9 = v13;
    unint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
LABEL_23:
    uint64_t v16 = *(void *)(v0 + 200);
    uint64_t v15 = *(void *)(v0 + 208);
    uint64_t v17 = *(void *)(v0 + 192);
    sub_10001D010(*(void *)(v31 + 56) + 40 * v10, (uint64_t)v33);
    uint64_t v18 = type metadata accessor for TaskPriority();
    uint64_t v19 = *(void *)(v18 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v15, 1, 1, v18);
    sub_10001CEB0(v33, (uint64_t)v32);
    unint64_t v20 = (void *)swift_allocObject();
    v20[2] = 0;
    v20[3] = 0;
    sub_10001CEB0(v32, (uint64_t)(v20 + 4));
    v20[9] = v17;
    sub_10001D074(v15, v16, &qword_10164DBB0);
    LODWORD(v15) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v16, 1, v18);
    swift_bridgeObjectRetain();
    uint64_t v21 = *(void *)(v0 + 200);
    if (v15 == 1)
    {
      sub_10001DAB4(*(void *)(v0 + 200), &qword_10164DBB0);
    }
    else
    {
      TaskPriority.rawValue.getter();
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v21, v18);
    }
    int64_t v1 = v9;
    unint64_t v6 = v34;
    if (v20[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v22 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v24 = v23;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v22 = 0;
      uint64_t v24 = 0;
    }
    uint64_t v25 = **(void **)(v0 + 176);
    uint64_t v26 = swift_allocObject();
    *(void *)(v26 + 16) = &unk_10165C9E0;
    *(void *)(v26 + 24) = v20;
    uint64_t v27 = v24 | v22;
    if (v24 | v22)
    {
      uint64_t v27 = v0 + 96;
      *(void *)(v0 + 96) = 0;
      *(void *)(v0 + 104) = 0;
      *(void *)(v0 + 112) = v22;
      *(void *)(v0 + 120) = v24;
    }
    uint64_t v7 = *(void *)(v0 + 208);
    *(void *)(v0 + 152) = 1;
    *(void *)(v0 + 160) = v27;
    *(void *)(v0 + 168) = v25;
    swift_task_create();
    swift_release();
    sub_10001DAB4(v7, &qword_10164DBB0);
  }
  uint64_t v14 = v1 + 5;
  if (v1 + 5 < v30)
  {
    unint64_t v12 = *(void *)(v29 + 8 * v14);
    if (!v12)
    {
      while (1)
      {
        int64_t v13 = v14 + 1;
        if (__OFADD__(v14, 1)) {
          goto LABEL_35;
        }
        if (v13 >= v30) {
          goto LABEL_31;
        }
        unint64_t v12 = *(void *)(v29 + 8 * v13);
        ++v14;
        if (v12) {
          goto LABEL_22;
        }
      }
    }
    int64_t v13 = v1 + 5;
    goto LABEL_22;
  }
LABEL_31:
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v28 = *(void (**)(void))(v0 + 8);
  v28();
}

uint64_t sub_100CD2CFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return _swift_task_switch(sub_100CD2D1C, 0, 0);
}

uint64_t sub_100CD2D1C()
{
  int64_t v1 = (void *)v0[2];
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  sub_10001CD44(v1, v2);
  uint64_t v4 = swift_bridgeObjectRetain();
  uint64_t v5 = sub_101158FF0(v4);
  v0[4] = v5;
  swift_bridgeObjectRelease();
  unint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 + 48) + **(int **)(v3 + 48));
  unint64_t v6 = (void *)swift_task_alloc();
  v0[5] = v6;
  *unint64_t v6 = v0;
  v6[1] = sub_1003D33B4;
  return v8(v5, v2, v3);
}

uint64_t sub_100CD2E48()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170EBA0);
  sub_100010324(v0, (uint64_t)qword_10170EBA0);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100CD2EC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_1016373F0 != -1) {
    swift_once();
  }
  unint64_t v6 = *(void **)(a1 + 64);
  swift_beginAccess();
  id v7 = v6;
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v10 = qword_10170F1A0;
  qword_10170F1A0 = 0x8000000000000000;
  sub_10016EB10(a2, a3, v7, isUniquelyReferenced_nonNull_native);
  qword_10170F1A0 = v10;

  swift_bridgeObjectRelease();
  return swift_endAccess();
}

BOOL sub_100CD2FC0(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    uint64_t v4 = *(void *)(a1 + 64);
    id v5 = v2;
    uint64_t v6 = sub_100A9BB14(a2);
    sub_100425AB0(v4, v6);

    swift_bridgeObjectRelease();
  }
  return v2 == 0;
}

uint64_t sub_100CD303C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[16] = a2;
  v3[17] = a3;
  v3[15] = a1;
  uint64_t v4 = type metadata accessor for StateCaptureDateType();
  v3[18] = v4;
  v3[19] = *(void *)(v4 - 8);
  v3[20] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for StateCaptureHintAPI();
  v3[21] = v5;
  v3[22] = *(void *)(v5 - 8);
  v3[23] = swift_task_alloc();
  v3[24] = swift_task_alloc();
  return _swift_task_switch(sub_100CD3198, 0, 0);
}

uint64_t sub_100CD3198()
{
  uint64_t v26 = v0;
  uint64_t v2 = *(void *)(v0 + 184);
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v3 = *(void *)(v0 + 168);
  uint64_t v4 = *(void *)(v0 + 176);
  StateCaptureHint.api.getter();
  (*(void (**)(uint64_t, void, uint64_t))(v4 + 104))(v2, enum case for StateCaptureHintAPI.request(_:), v3);
  sub_100CD792C((unint64_t *)&unk_1016566F0, 255, (void (*)(uint64_t))&type metadata accessor for StateCaptureHintAPI);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  int v5 = *(_DWORD *)(v0 + 200);
  int v6 = *(_DWORD *)(v0 + 204);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v7(v2, v3);
  v7(v1, v3);
  if (v5 != v6)
  {
    uint64_t v11 = 1;
LABEL_4:
    uint64_t v12 = *(void *)(v0 + 120);
    uint64_t v13 = type metadata accessor for StateCaptureStateData();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v12, v11, 1, v13);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
    goto LABEL_5;
  }
  unint64_t v8 = *(os_unfair_lock_s **)(*(void *)(v0 + 136) + 120);
  uint64_t v9 = v8 + 4;
  uint64_t v10 = v8 + 16;
  os_unfair_lock_lock(v8 + 16);
  sub_10106436C(v9, v25);
  os_unfair_lock_unlock(v10);
  long long v16 = v25[1];
  *(_OWORD *)(v0 + 16) = v25[0];
  *(_OWORD *)(v0 + 32) = v16;
  *(_OWORD *)(v0 + 48) = v25[2];
  uint64_t v17 = self;
  uint64_t v18 = (void *)sub_101064384();
  *(_OWORD *)(v0 + 64) = *(_OWORD *)(v0 + 16);
  sub_100BD9800(v0 + 64);
  *(void *)(v0 + 104) = *(void *)(v0 + 32);
  sub_10025C634(v0 + 104);
  *(void *)(v0 + 80) = *(void *)(v0 + 40);
  sub_10025C634(v0 + 80);
  *(void *)(v0 + 88) = *(void *)(v0 + 48);
  sub_10025C634(v0 + 88);
  *(void *)(v0 + 96) = *(void *)(v0 + 56);
  sub_10025C634(v0 + 96);
  *(void *)(v0 + 112) = 0;
  id v19 = [v17 dataWithPropertyList:v18 format:200 options:0 error:v0 + 112];

  id v20 = *(id *)(v0 + 112);
  if (v19)
  {
    uint64_t v22 = *(void *)(v0 + 152);
    uint64_t v21 = *(void *)(v0 + 160);
    uint64_t v23 = *(void *)(v0 + 144);
    static Data._unconditionallyBridgeFromObjectiveC(_:)();

    (*(void (**)(uint64_t, void, uint64_t))(v22 + 104))(v21, enum case for StateCaptureDateType.serialized(_:), v23);
    StateCaptureStateData.init(type:title:data:)();
    uint64_t v11 = 0;
    goto LABEL_4;
  }
  uint64_t v24 = v20;
  _convertNSErrorToError(_:)();

  swift_willThrow();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
LABEL_5:
  return v14();
}

uint64_t sub_100CD35A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[16] = a2;
  v3[17] = a3;
  v3[15] = a1;
  uint64_t v4 = type metadata accessor for StateCaptureDateType();
  v3[18] = v4;
  v3[19] = *(void *)(v4 - 8);
  v3[20] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for StateCaptureHintAPI();
  v3[21] = v5;
  v3[22] = *(void *)(v5 - 8);
  v3[23] = swift_task_alloc();
  v3[24] = swift_task_alloc();
  return _swift_task_switch(sub_100CD79A4, 0, 0);
}

uint64_t sub_100CD3704(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[28] = a4;
  uint64_t v5 = type metadata accessor for ContinuousClock.Instant();
  v4[29] = v5;
  v4[30] = *(void *)(v5 - 8);
  v4[31] = swift_task_alloc();
  v4[32] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ContinuousClock();
  v4[33] = v6;
  v4[34] = *(void *)(v6 - 8);
  v4[35] = swift_task_alloc();
  return _swift_task_switch(sub_100CD3830, 0, 0);
}

uint64_t sub_100CD3830()
{
  if (static Task<>.isCancelled.getter())
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
    return v1();
  }
  else
  {
    swift_beginAccess();
    uint64_t v4 = *(void *)(v0 + 240);
    uint64_t v3 = *(void *)(v0 + 248);
    uint64_t v5 = *(void *)(v0 + 232);
    ContinuousClock.init()();
    *(_OWORD *)(v0 + 176) = xmmword_10137B870;
    *(void *)(v0 + 144) = 0;
    *(void *)(v0 + 136) = 0;
    *(unsigned char *)(v0 + 152) = 1;
    uint64_t v6 = sub_100CD792C((unint64_t *)&unk_1016666F0, 255, (void (*)(uint64_t))&type metadata accessor for ContinuousClock);
    dispatch thunk of Clock.now.getter();
    sub_100CD792C(&qword_101653DE0, 255, (void (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant);
    dispatch thunk of InstantProtocol.advanced(by:)();
    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    *(void *)(v0 + 288) = v7;
    *(void *)(v0 + 296) = (v4 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v7(v3, v5);
    uint64_t v8 = (void *)swift_task_alloc();
    *(void *)(v0 + 304) = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_100CD3A6C;
    uint64_t v10 = *(void *)(v0 + 256);
    uint64_t v9 = *(void *)(v0 + 264);
    return dispatch thunk of Clock.sleep(until:tolerance:)(v10, v0 + 136, v9, v6);
  }
}

uint64_t sub_100CD3A6C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 312) = v0;
  swift_task_dealloc();
  if (v0)
  {
    (*(void (**)(void, void))(v2 + 288))(*(void *)(v2 + 256), *(void *)(v2 + 232));
    uint64_t v3 = sub_100CD4100;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 272);
    uint64_t v4 = *(void *)(v2 + 280);
    uint64_t v6 = *(void *)(v2 + 264);
    (*(void (**)(void, void))(v2 + 288))(*(void *)(v2 + 256), *(void *)(v2 + 232));
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    uint64_t v3 = sub_100CD3BC4;
  }
  return _swift_task_switch(v3, 0, 0);
}

void sub_100CD3BC4()
{
  uint64_t v25 = v0;
  uint64_t v1 = *(void *)(v0 + 312);
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v3 = *(void *)(Strong + 120);
    swift_retain();
    swift_release();
    os_unfair_lock_lock((os_unfair_lock_t)(v3 + 64));
    sub_10106436C((void *)(v3 + 16), (void *)(v0 + 64));
    os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 64));
    if (v1) {
      return;
    }
    long long v4 = *(_OWORD *)(v0 + 80);
    *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 64);
    *(_OWORD *)(v0 + 32) = v4;
    *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 96);
    swift_release();
    if (qword_1016373E0 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100010324(v5, (uint64_t)qword_10170F180);
    *(_OWORD *)(v0 + 160) = *(_OWORD *)(v0 + 16);
    uint64_t v6 = *(void *)(v0 + 32);
    *(_OWORD *)(v0 + 192) = *(_OWORD *)(v0 + 40);
    uint64_t v7 = *(void *)(v0 + 56);
    *(void *)(v0 + 208) = v6;
    *(void *)(v0 + 216) = v7;
    sub_1009C5960(v0 + 160);
    sub_10048307C(v0 + 208);
    sub_10048307C(v0 + 192);
    sub_10048307C(v0 + 200);
    sub_10048307C(v0 + 216);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v8, v9))
    {
      sub_100BD9800(v0 + 160);
      sub_10025C634(v0 + 208);
      sub_10025C634(v0 + 192);
      sub_10025C634(v0 + 200);
      sub_10025C634(v0 + 216);
      sub_100BD9800(v0 + 160);
      sub_10025C634(v0 + 208);
      sub_10025C634(v0 + 192);
      sub_10025C634(v0 + 200);
      sub_10025C634(v0 + 216);

      if (static Task<>.isCancelled.getter()) {
        goto LABEL_8;
      }
      goto LABEL_12;
    }
    uint64_t v10 = swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315138;
    sub_1009C5960(v0 + 160);
    sub_10048307C(v0 + 208);
    sub_10048307C(v0 + 192);
    sub_10048307C(v0 + 200);
    sub_10048307C(v0 + 216);
    log = v8;
    unint64_t v11 = sub_101069E80();
    unint64_t v13 = v12;
    sub_100BD9800(v0 + 160);
    sub_10025C634(v0 + 208);
    sub_10025C634(v0 + 192);
    sub_10025C634(v0 + 200);
    sub_10025C634(v0 + 216);
    *(void *)(v10 + 4) = sub_1008FA0F0(v11, v13, &v24);
    swift_bridgeObjectRelease();
    sub_100BD9800(v0 + 160);
    sub_10025C634(v0 + 208);
    sub_10025C634(v0 + 192);
    sub_10025C634(v0 + 200);
    sub_10025C634(v0 + 216);
    sub_100BD9800(v0 + 160);
    sub_10025C634(v0 + 208);
    sub_10025C634(v0 + 192);
    sub_10025C634(v0 + 200);
    sub_10025C634(v0 + 216);
    _os_log_impl((void *)&_mh_execute_header, log, v9, "%s", (uint8_t *)v10, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  if (static Task<>.isCancelled.getter())
  {
LABEL_8:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v14 = *(void (**)(void))(v0 + 8);
    v14();
    return;
  }
LABEL_12:
  uint64_t v16 = *(void *)(v0 + 240);
  uint64_t v15 = *(void *)(v0 + 248);
  uint64_t v17 = *(void *)(v0 + 232);
  ContinuousClock.init()();
  *(_OWORD *)(v0 + 176) = xmmword_10137B870;
  *(void *)(v0 + 144) = 0;
  *(void *)(v0 + 136) = 0;
  *(unsigned char *)(v0 + 152) = 1;
  uint64_t v18 = sub_100CD792C((unint64_t *)&unk_1016666F0, 255, (void (*)(uint64_t))&type metadata accessor for ContinuousClock);
  dispatch thunk of Clock.now.getter();
  sub_100CD792C(&qword_101653DE0, 255, (void (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)();
  id v19 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
  *(void *)(v0 + 288) = v19;
  *(void *)(v0 + 296) = (v16 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v19(v15, v17);
  id v20 = (void *)swift_task_alloc();
  *(void *)(v0 + 304) = v20;
  *id v20 = v0;
  v20[1] = sub_100CD3A6C;
  uint64_t v22 = *(void *)(v0 + 256);
  uint64_t v21 = *(void *)(v0 + 264);
  dispatch thunk of Clock.sleep(until:tolerance:)(v22, v0 + 136, v21, v18);
}

uint64_t sub_100CD4100()
{
  uint64_t v28 = v0;
  uint64_t v2 = *(void *)(v0 + 272);
  uint64_t v1 = *(void *)(v0 + 280);
  uint64_t v3 = *(void *)(v0 + 264);
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v5 = *(void *)(Strong + 120);
    swift_retain();
    swift_release();
    os_unfair_lock_lock((os_unfair_lock_t)(v5 + 64));
    sub_10106436C((void *)(v5 + 16), (void *)(v0 + 64));
    os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 64));
    long long v6 = *(_OWORD *)(v0 + 80);
    *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 64);
    *(_OWORD *)(v0 + 32) = v6;
    *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 96);
    swift_release();
    if (qword_1016373E0 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100010324(v7, (uint64_t)qword_10170F180);
    *(_OWORD *)(v0 + 160) = *(_OWORD *)(v0 + 16);
    uint64_t v8 = *(void *)(v0 + 32);
    *(_OWORD *)(v0 + 192) = *(_OWORD *)(v0 + 40);
    uint64_t v9 = *(void *)(v0 + 56);
    *(void *)(v0 + 208) = v8;
    *(void *)(v0 + 216) = v9;
    sub_1009C5960(v0 + 160);
    sub_10048307C(v0 + 208);
    sub_10048307C(v0 + 192);
    sub_10048307C(v0 + 200);
    sub_10048307C(v0 + 216);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136315138;
      sub_1009C5960(v0 + 160);
      sub_10048307C(v0 + 208);
      sub_10048307C(v0 + 192);
      sub_10048307C(v0 + 200);
      sub_10048307C(v0 + 216);
      log = v10;
      unint64_t v13 = sub_101069E80();
      unint64_t v15 = v14;
      sub_100BD9800(v0 + 160);
      sub_10025C634(v0 + 208);
      sub_10025C634(v0 + 192);
      sub_10025C634(v0 + 200);
      sub_10025C634(v0 + 216);
      *(void *)(v12 + 4) = sub_1008FA0F0(v13, v15, &v27);
      swift_bridgeObjectRelease();
      sub_100BD9800(v0 + 160);
      sub_10025C634(v0 + 208);
      sub_10025C634(v0 + 192);
      sub_10025C634(v0 + 200);
      sub_10025C634(v0 + 216);
      sub_100BD9800(v0 + 160);
      sub_10025C634(v0 + 208);
      sub_10025C634(v0 + 192);
      sub_10025C634(v0 + 200);
      sub_10025C634(v0 + 216);
      _os_log_impl((void *)&_mh_execute_header, log, v11, "%s", (uint8_t *)v12, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100BD9800(v0 + 160);
      sub_10025C634(v0 + 208);
      sub_10025C634(v0 + 192);
      sub_10025C634(v0 + 200);
      sub_10025C634(v0 + 216);
      sub_100BD9800(v0 + 160);
      sub_10025C634(v0 + 208);
      sub_10025C634(v0 + 192);
      sub_10025C634(v0 + 200);
      sub_10025C634(v0 + 216);
    }
  }
  if (static Task<>.isCancelled.getter())
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
    return v16();
  }
  else
  {
    uint64_t v19 = *(void *)(v0 + 240);
    uint64_t v18 = *(void *)(v0 + 248);
    uint64_t v20 = *(void *)(v0 + 232);
    ContinuousClock.init()();
    *(_OWORD *)(v0 + 176) = xmmword_10137B870;
    *(void *)(v0 + 136) = 0;
    *(void *)(v0 + 144) = 0;
    *(unsigned char *)(v0 + 152) = 1;
    uint64_t v21 = sub_100CD792C((unint64_t *)&unk_1016666F0, 255, (void (*)(uint64_t))&type metadata accessor for ContinuousClock);
    dispatch thunk of Clock.now.getter();
    sub_100CD792C(&qword_101653DE0, 255, (void (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant);
    dispatch thunk of InstantProtocol.advanced(by:)();
    uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    *(void *)(v0 + 288) = v22;
    *(void *)(v0 + 296) = (v19 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v22(v18, v20);
    uint64_t v23 = (void *)swift_task_alloc();
    *(void *)(v0 + 304) = v23;
    *uint64_t v23 = v0;
    v23[1] = sub_100CD3A6C;
    uint64_t v25 = *(void *)(v0 + 256);
    uint64_t v24 = *(void *)(v0 + 264);
    return dispatch thunk of Clock.sleep(until:tolerance:)(v25, v0 + 136, v24, v21);
  }
}

uint64_t sub_100CD465C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[28] = a4;
  uint64_t v5 = type metadata accessor for ContinuousClock.Instant();
  v4[29] = v5;
  v4[30] = *(void *)(v5 - 8);
  v4[31] = swift_task_alloc();
  v4[32] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for ContinuousClock();
  v4[33] = v6;
  v4[34] = *(void *)(v6 - 8);
  v4[35] = swift_task_alloc();
  return _swift_task_switch(sub_100CD4788, 0, 0);
}

uint64_t sub_100CD4788()
{
  if (static Task<>.isCancelled.getter())
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
    return v1();
  }
  else
  {
    swift_beginAccess();
    uint64_t v4 = *(void *)(v0 + 240);
    uint64_t v3 = *(void *)(v0 + 248);
    uint64_t v5 = *(void *)(v0 + 232);
    ContinuousClock.init()();
    *(_OWORD *)(v0 + 176) = xmmword_10137B870;
    *(void *)(v0 + 144) = 0;
    *(void *)(v0 + 136) = 0;
    *(unsigned char *)(v0 + 152) = 1;
    uint64_t v6 = sub_100CD792C((unint64_t *)&unk_1016666F0, 255, (void (*)(uint64_t))&type metadata accessor for ContinuousClock);
    dispatch thunk of Clock.now.getter();
    sub_100CD792C(&qword_101653DE0, 255, (void (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant);
    dispatch thunk of InstantProtocol.advanced(by:)();
    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
    *(void *)(v0 + 288) = v7;
    *(void *)(v0 + 296) = (v4 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v7(v3, v5);
    uint64_t v8 = (void *)swift_task_alloc();
    *(void *)(v0 + 304) = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_100CD49C4;
    uint64_t v10 = *(void *)(v0 + 256);
    uint64_t v9 = *(void *)(v0 + 264);
    return dispatch thunk of Clock.sleep(until:tolerance:)(v10, v0 + 136, v9, v6);
  }
}

uint64_t sub_100CD49C4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 312) = v0;
  swift_task_dealloc();
  if (v0)
  {
    (*(void (**)(void, void))(v2 + 288))(*(void *)(v2 + 256), *(void *)(v2 + 232));
    uint64_t v3 = sub_100CD5058;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 272);
    uint64_t v4 = *(void *)(v2 + 280);
    uint64_t v6 = *(void *)(v2 + 264);
    (*(void (**)(void, void))(v2 + 288))(*(void *)(v2 + 256), *(void *)(v2 + 232));
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    uint64_t v3 = sub_100CD4B1C;
  }
  return _swift_task_switch(v3, 0, 0);
}

void sub_100CD4B1C()
{
  uint64_t v25 = v0;
  uint64_t v1 = *(void *)(v0 + 312);
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v3 = *(void *)(Strong + 120);
    swift_retain();
    swift_release();
    os_unfair_lock_lock((os_unfair_lock_t)(v3 + 64));
    sub_10106436C((void *)(v3 + 16), (void *)(v0 + 64));
    os_unfair_lock_unlock((os_unfair_lock_t)(v3 + 64));
    if (v1) {
      return;
    }
    long long v4 = *(_OWORD *)(v0 + 80);
    *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 64);
    *(_OWORD *)(v0 + 32) = v4;
    *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 96);
    swift_release();
    if (qword_1016373E0 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100010324(v5, (uint64_t)qword_10170F180);
    *(_OWORD *)(v0 + 160) = *(_OWORD *)(v0 + 16);
    uint64_t v6 = *(void *)(v0 + 32);
    *(_OWORD *)(v0 + 192) = *(_OWORD *)(v0 + 40);
    uint64_t v7 = *(void *)(v0 + 56);
    *(void *)(v0 + 208) = v6;
    *(void *)(v0 + 216) = v7;
    sub_1009C5960(v0 + 160);
    sub_10048307C(v0 + 208);
    sub_10048307C(v0 + 192);
    sub_10048307C(v0 + 200);
    sub_10048307C(v0 + 216);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v8, v9))
    {
      sub_100BD9800(v0 + 160);
      sub_10025C634(v0 + 208);
      sub_10025C634(v0 + 192);
      sub_10025C634(v0 + 200);
      sub_10025C634(v0 + 216);
      sub_100BD9800(v0 + 160);
      sub_10025C634(v0 + 208);
      sub_10025C634(v0 + 192);
      sub_10025C634(v0 + 200);
      sub_10025C634(v0 + 216);

      if (static Task<>.isCancelled.getter()) {
        goto LABEL_8;
      }
      goto LABEL_12;
    }
    uint64_t v10 = swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136315138;
    sub_1009C5960(v0 + 160);
    sub_10048307C(v0 + 208);
    sub_10048307C(v0 + 192);
    sub_10048307C(v0 + 200);
    sub_10048307C(v0 + 216);
    log = v8;
    unint64_t v11 = sub_101069E80();
    unint64_t v13 = v12;
    sub_100BD9800(v0 + 160);
    sub_10025C634(v0 + 208);
    sub_10025C634(v0 + 192);
    sub_10025C634(v0 + 200);
    sub_10025C634(v0 + 216);
    *(void *)(v10 + 4) = sub_1008FA0F0(v11, v13, &v24);
    swift_bridgeObjectRelease();
    sub_100BD9800(v0 + 160);
    sub_10025C634(v0 + 208);
    sub_10025C634(v0 + 192);
    sub_10025C634(v0 + 200);
    sub_10025C634(v0 + 216);
    sub_100BD9800(v0 + 160);
    sub_10025C634(v0 + 208);
    sub_10025C634(v0 + 192);
    sub_10025C634(v0 + 200);
    sub_10025C634(v0 + 216);
    _os_log_impl((void *)&_mh_execute_header, log, v9, "%s", (uint8_t *)v10, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  if (static Task<>.isCancelled.getter())
  {
LABEL_8:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v14 = *(void (**)(void))(v0 + 8);
    v14();
    return;
  }
LABEL_12:
  uint64_t v16 = *(void *)(v0 + 240);
  uint64_t v15 = *(void *)(v0 + 248);
  uint64_t v17 = *(void *)(v0 + 232);
  ContinuousClock.init()();
  *(_OWORD *)(v0 + 176) = xmmword_10137B870;
  *(void *)(v0 + 144) = 0;
  *(void *)(v0 + 136) = 0;
  *(unsigned char *)(v0 + 152) = 1;
  uint64_t v18 = sub_100CD792C((unint64_t *)&unk_1016666F0, 255, (void (*)(uint64_t))&type metadata accessor for ContinuousClock);
  dispatch thunk of Clock.now.getter();
  sub_100CD792C(&qword_101653DE0, 255, (void (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant);
  dispatch thunk of InstantProtocol.advanced(by:)();
  uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
  *(void *)(v0 + 288) = v19;
  *(void *)(v0 + 296) = (v16 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v19(v15, v17);
  uint64_t v20 = (void *)swift_task_alloc();
  *(void *)(v0 + 304) = v20;
  *uint64_t v20 = v0;
  v20[1] = sub_100CD49C4;
  uint64_t v22 = *(void *)(v0 + 256);
  uint64_t v21 = *(void *)(v0 + 264);
  dispatch thunk of Clock.sleep(until:tolerance:)(v22, v0 + 136, v21, v18);
}

uint64_t sub_100CD5058()
{
  uint64_t v28 = v0;
  uint64_t v2 = *(void *)(v0 + 272);
  uint64_t v1 = *(void *)(v0 + 280);
  uint64_t v3 = *(void *)(v0 + 264);
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v5 = *(void *)(Strong + 120);
    swift_retain();
    swift_release();
    os_unfair_lock_lock((os_unfair_lock_t)(v5 + 64));
    sub_10106436C((void *)(v5 + 16), (void *)(v0 + 64));
    os_unfair_lock_unlock((os_unfair_lock_t)(v5 + 64));
    long long v6 = *(_OWORD *)(v0 + 80);
    *(_OWORD *)(v0 + 16) = *(_OWORD *)(v0 + 64);
    *(_OWORD *)(v0 + 32) = v6;
    *(_OWORD *)(v0 + 48) = *(_OWORD *)(v0 + 96);
    swift_release();
    if (qword_1016373E0 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100010324(v7, (uint64_t)qword_10170F180);
    *(_OWORD *)(v0 + 160) = *(_OWORD *)(v0 + 16);
    uint64_t v8 = *(void *)(v0 + 32);
    *(_OWORD *)(v0 + 192) = *(_OWORD *)(v0 + 40);
    uint64_t v9 = *(void *)(v0 + 56);
    *(void *)(v0 + 208) = v8;
    *(void *)(v0 + 216) = v9;
    sub_1009C5960(v0 + 160);
    sub_10048307C(v0 + 208);
    sub_10048307C(v0 + 192);
    sub_10048307C(v0 + 200);
    sub_10048307C(v0 + 216);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      *(_DWORD *)uint64_t v12 = 136315138;
      sub_1009C5960(v0 + 160);
      sub_10048307C(v0 + 208);
      sub_10048307C(v0 + 192);
      sub_10048307C(v0 + 200);
      sub_10048307C(v0 + 216);
      log = v10;
      unint64_t v13 = sub_101069E80();
      unint64_t v15 = v14;
      sub_100BD9800(v0 + 160);
      sub_10025C634(v0 + 208);
      sub_10025C634(v0 + 192);
      sub_10025C634(v0 + 200);
      sub_10025C634(v0 + 216);
      *(void *)(v12 + 4) = sub_1008FA0F0(v13, v15, &v27);
      swift_bridgeObjectRelease();
      sub_100BD9800(v0 + 160);
      sub_10025C634(v0 + 208);
      sub_10025C634(v0 + 192);
      sub_10025C634(v0 + 200);
      sub_10025C634(v0 + 216);
      sub_100BD9800(v0 + 160);
      sub_10025C634(v0 + 208);
      sub_10025C634(v0 + 192);
      sub_10025C634(v0 + 200);
      sub_10025C634(v0 + 216);
      _os_log_impl((void *)&_mh_execute_header, log, v11, "%s", (uint8_t *)v12, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100BD9800(v0 + 160);
      sub_10025C634(v0 + 208);
      sub_10025C634(v0 + 192);
      sub_10025C634(v0 + 200);
      sub_10025C634(v0 + 216);
      sub_100BD9800(v0 + 160);
      sub_10025C634(v0 + 208);
      sub_10025C634(v0 + 192);
      sub_10025C634(v0 + 200);
      sub_10025C634(v0 + 216);
    }
  }
  if (static Task<>.isCancelled.getter())
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
    return v16();
  }
  else
  {
    uint64_t v19 = *(void *)(v0 + 240);
    uint64_t v18 = *(void *)(v0 + 248);
    uint64_t v20 = *(void *)(v0 + 232);
    ContinuousClock.init()();
    *(_OWORD *)(v0 + 176) = xmmword_10137B870;
    *(void *)(v0 + 136) = 0;
    *(void *)(v0 + 144) = 0;
    *(unsigned char *)(v0 + 152) = 1;
    uint64_t v21 = sub_100CD792C((unint64_t *)&unk_1016666F0, 255, (void (*)(uint64_t))&type metadata accessor for ContinuousClock);
    dispatch thunk of Clock.now.getter();
    sub_100CD792C(&qword_101653DE0, 255, (void (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant);
    dispatch thunk of InstantProtocol.advanced(by:)();
    uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    *(void *)(v0 + 288) = v22;
    *(void *)(v0 + 296) = (v19 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v22(v18, v20);
    uint64_t v23 = (void *)swift_task_alloc();
    *(void *)(v0 + 304) = v23;
    *uint64_t v23 = v0;
    v23[1] = sub_100CD49C4;
    uint64_t v25 = *(void *)(v0 + 256);
    uint64_t v24 = *(void *)(v0 + 264);
    return dispatch thunk of Clock.sleep(until:tolerance:)(v25, v0 + 136, v24, v21);
  }
}

uint64_t sub_100CD55B4(unint64_t *a1, uint64_t *a2)
{
  sub_100062734(a1, a2);
  v3._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 32;
  v4._object = (void *)0xE100000000000000;
  String.append(_:)(v4);
  v5._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 8250;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  uint64_t v8 = *(void *)(v2 + 16);
  uint64_t v7 = *(void **)(v2 + 24);
  swift_bridgeObjectRetain();
  v9._countAndFlagsBits = v8;
  v9._object = v7;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 62;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  return 60;
}

uint64_t sub_100CD56E0(uint64_t a1)
{
  return sub_100CCF470(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(unsigned __int8 *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 72), *(void *)(v1 + 80), *(unsigned char *)(v1 + 88), *(unsigned char *)(v1 + 89), *(void *)(v1 + 96), *(void *)(v1 + 104), *(void *)(v1 + 112), *(void *)(v1 + 120));
}

void sub_100CD5738(uint64_t a1, uint64_t a2, uint64_t a3, int a4, void *a5)
{
}

uint64_t sub_100CD5748(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  return sub_100CCE7BC(a1, a2, a3, a4, a5, a6, v6);
}

uint64_t sub_100CD5750(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, uint64_t a11)
{
  return sub_100CCE978(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, v12);
}

uint64_t sub_100CD5780()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100CD57B8(uint64_t a1)
{
  return sub_1003D06E4(a1, v1);
}

uint64_t sub_100CD57F0(uint64_t a1)
{
  return sub_1003D06E4(a1, v1);
}

uint64_t sub_100CD5828()
{
  return sub_100CCDEF0();
}

uint64_t sub_100CD584C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_100033F68;
  return sub_100CD35A8(a1, a2, v2);
}

uint64_t sub_100CD58F8()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100CD5934(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_100033F68;
  return sub_100CD465C(a1, v4, v5, v6);
}

BOOL sub_100CD59E8@<W0>(unsigned char *a1@<X8>)
{
  return sub_100CD78F8(a1);
}

uint64_t sub_100CD5A04()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 16);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_100033F68;
  *(_OWORD *)(v2 + 16) = v3;
  return _swift_task_switch(sub_100CD26A4, 0, 0);
}

uint64_t sub_100CD5AB0(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_100033F68;
  return sub_100CD2788(a1, a2, v7, v6);
}

uint64_t sub_100CD5B68()
{
  uint64_t v2 = v0 + 32;
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  void *v4 = v1;
  v4[2] = v2;
  v4[3] = v3;
  v4[1] = sub_100033F68;
  return _swift_task_switch(sub_100CD2D1C, 0, 0);
}

uint64_t sub_100CD5C1C()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 16);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_100033F68;
  *(_OWORD *)(v2 + 16) = v3;
  return _swift_task_switch(sub_100CD1F04, 0, 0);
}

uint64_t sub_100CD5CC8(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_100033F68;
  return sub_100CD1FE8(a1, a2, v7, v6);
}

uint64_t sub_100CD5D80()
{
  swift_unknownObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 32);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_100CD5DC8()
{
  uint64_t v2 = v0 + 32;
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  void *v4 = v1;
  v4[2] = v2;
  v4[3] = v3;
  v4[1] = sub_100033F68;
  return _swift_task_switch(sub_100CD257C, 0, 0);
}

uint64_t sub_100CD5E78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MessagingMessageContext();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100CD5EDC()
{
  uint64_t v1 = type metadata accessor for MessagingMessageContext();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 104) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001CFB8(*(void *)(v0 + 80), *(void *)(v0 + 88));
  swift_bridgeObjectRelease();
  uint64_t v5 = v0 + v3;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  int v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v0 + v3, 1, v6);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  if (!v8) {
    v9(v0 + v3, v6);
  }
  v9(v5 + *(int *)(v1 + 20), v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = v5 + *(int *)(v1 + 44);
  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_100CD60D0()
{
  uint64_t v2 = *(void *)(type metadata accessor for MessagingMessageContext() - 8);
  long long v15 = *(_OWORD *)(v0 + 16);
  uint64_t v14 = *(void *)(v0 + 32);
  char v3 = *(unsigned char *)(v0 + 40);
  uint64_t v4 = *(void *)(v0 + 48);
  uint64_t v5 = *(void *)(v0 + 56);
  char v6 = *(unsigned char *)(v0 + 64);
  uint64_t v7 = *(void *)(v0 + 72);
  uint64_t v8 = *(void *)(v0 + 80);
  uint64_t v10 = *(void *)(v0 + 88);
  uint64_t v9 = *(void *)(v0 + 96);
  uint64_t v11 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 104) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v12 = swift_task_alloc();
  *(void *)(v1 + 16) = v12;
  *(void *)uint64_t v12 = v1;
  *(void *)(v12 + 8) = sub_100033F68;
  *(void *)(v12 + 80) = v9;
  *(void *)(v12 + 88) = v11;
  *(void *)(v12 + 64) = v8;
  *(void *)(v12 + 72) = v10;
  *(unsigned char *)(v12 + 113) = v6;
  *(void *)(v12 + 48) = v5;
  *(void *)(v12 + 56) = v7;
  *(unsigned char *)(v12 + 112) = v3;
  *(void *)(v12 + 32) = v14;
  *(void *)(v12 + 40) = v4;
  *(_OWORD *)(v12 + 16) = v15;
  return _swift_task_switch(sub_100CD1434, 0, 0);
}

uint64_t sub_100CD6218(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(v2 + 32);
  uint64_t v8 = *(void *)(v2 + 48);
  uint64_t v9 = *(void *)(v2 + 56);
  char v10 = *(unsigned char *)(v2 + 40);
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v11;
  void *v11 = v3;
  v11[1] = sub_100033F68;
  return sub_100CD1574(a1, a2, v5, v6, v7, v10, v8, v9);
}

uint64_t sub_100CD6330()
{
  uint64_t v1 = type metadata accessor for MessagingMessageContext();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 152) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  swift_unknownObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001CFB8(*(void *)(v0 + 128), *(void *)(v0 + 136));
  swift_bridgeObjectRelease();
  uint64_t v5 = v0 + v3;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  int v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v0 + v3, 1, v6);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  if (!v8) {
    v9(v0 + v3, v6);
  }
  v9(v5 + *(int *)(v1 + 20), v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = v5 + *(int *)(v1 + 44);
  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_100CD652C()
{
  uint64_t v2 = *(void *)(type metadata accessor for MessagingMessageContext() - 8);
  uint64_t v3 = v0 + 32;
  char v4 = *(unsigned char *)(v0 + 88);
  long long v12 = *(_OWORD *)(v0 + 96);
  long long v13 = *(_OWORD *)(v0 + 72);
  char v5 = *(unsigned char *)(v0 + 112);
  long long v11 = *(_OWORD *)(v0 + 120);
  uint64_t v6 = *(void *)(v0 + 136);
  uint64_t v7 = *(void *)(v0 + 144);
  uint64_t v8 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 152) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v9 = swift_task_alloc();
  *(void *)(v1 + 16) = v9;
  *(void *)uint64_t v9 = v1;
  *(void *)(v9 + 8) = sub_100033F68;
  *(void *)(v9 + 112) = v7;
  *(void *)(v9 + 120) = v8;
  *(void *)(v9 + 104) = v6;
  *(_OWORD *)(v9 + 88) = v11;
  *(unsigned char *)(v9 + 137) = v5;
  *(_OWORD *)(v9 + 72) = v12;
  *(unsigned char *)(v9 + 136) = v4;
  *(_OWORD *)(v9 + 56) = v13;
  *(void *)(v9 + 48) = v3;
  return _swift_task_switch(sub_100CD1CA0, 0, 0);
}

uint64_t sub_100CD6674()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 24;
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100CD6768()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  long long v12 = *(_OWORD *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v5 = v0 + v3;
  unint64_t v6 = (char *)(v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  char v7 = *v6;
  uint64_t v8 = *((void *)v6 + 1);
  uint64_t v9 = *((void *)v6 + 2);
  uint64_t v10 = swift_task_alloc();
  *(void *)(v1 + 16) = v10;
  *(void *)uint64_t v10 = v1;
  *(void *)(v10 + 8) = sub_100033F68;
  *(void *)(v10 + 48) = v8;
  *(void *)(v10 + 56) = v9;
  *(unsigned char *)(v10 + 80) = v7;
  *(void *)(v10 + 32) = v4;
  *(void *)(v10 + 40) = v5;
  *(_OWORD *)(v10 + 16) = v12;
  return _swift_task_switch(sub_100CD0AE8, 0, 0);
}

uint64_t sub_100CD68AC(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = *(void *)(v2 + 24);
  uint64_t v8 = *(void *)(v2 + 32);
  uint64_t v9 = *(void *)(v2 + 40);
  uint64_t v10 = *(void *)(v2 + 56);
  char v11 = *(unsigned char *)(v2 + 48);
  long long v12 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v12;
  *long long v12 = v3;
  v12[1] = sub_100033F68;
  return sub_100CD0BF4(a1, a2, v6, v7, v8, v9, v11, v10);
}

uint64_t sub_100CD699C()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 88) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 24;
  swift_unknownObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 32);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100CD6A98()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = v0 + 32;
  uint64_t v5 = *(void *)(v0 + 72);
  uint64_t v6 = *(void *)(v0 + 80);
  uint64_t v7 = v0 + v3;
  uint64_t v8 = (char *)(v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  char v9 = *v8;
  uint64_t v10 = *((void *)v8 + 1);
  uint64_t v11 = *((void *)v8 + 2);
  uint64_t v12 = swift_task_alloc();
  *(void *)(v1 + 16) = v12;
  *(void *)uint64_t v12 = v1;
  *(void *)(v12 + 48) = v10;
  *(void *)(v12 + 56) = v11;
  *(unsigned char *)(v12 + 72) = v9;
  *(void *)(v12 + 32) = v6;
  *(void *)(v12 + 40) = v7;
  *(void *)(v12 + 16) = v4;
  *(void *)(v12 + 24) = v5;
  *(void *)(v12 + 8) = sub_100033F68;
  return _swift_task_switch(sub_100CD12DC, 0, 0);
}

void sub_100CD6BDC(uint64_t a1, void *a2, uint64_t a3, double a4, double a5)
{
}

void sub_100CD6C18(uint64_t a1, void *a2, uint64_t a3, uint64_t (*a4)(void *), unint64_t *a5, uint64_t *a6, uint64_t a7, double a8, double a9)
{
  uint64_t v40 = a7;
  int64_t v38 = a6;
  uint64_t v37 = a5;
  uint64_t v46 = a4;
  uint64_t v10 = v9;
  uint64_t v39 = a3;
  uint64_t v51 = a1;
  uint64_t v52 = a2;
  uint64_t v13 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v13);
  unint64_t v45 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v15 - 8);
  uint64_t v49 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v16 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  uint64_t v18 = (char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000588C((uint64_t *)&unk_101638CE0);
  uint64_t v19 = swift_allocObject();
  *(_DWORD *)(v19 + 16) = 0;
  *(void *)(v9 + 32) = v19;
  *(void *)(v9 + 40) = 0;
  uint64_t v41 = sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  unsigned int v47 = enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:);
  uint64_t v20 = *(void (**)(void))(v16 + 104);
  uint64_t v48 = v16 + 104;
  uint64_t v50 = (void (*)(char *, void, uint64_t))v20;
  v20(v18);
  static DispatchQoS.unspecified.getter();
  uint64_t v54 = _swiftEmptyArrayStorage;
  uint64_t v43 = sub_100CD792C((unint64_t *)&qword_101638CC0, 255, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  uint64_t v42 = sub_10000588C((uint64_t *)&unk_1016376F0);
  uint64_t v44 = sub_100062734((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)(v9 + 56) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)(v9 + 80) = v46(_swiftEmptyArrayStorage);
  *(void *)(v9 + 88) = sub_10092E738((uint64_t)_swiftEmptyArrayStorage);
  *(_OWORD *)(v9 + 128) = 0u;
  *(_OWORD *)(v9 + 144) = 0u;
  *(_OWORD *)(v9 + 160) = 0u;
  *(_OWORD *)(v9 + 176) = 0u;
  *(_OWORD *)(v9 + 192) = 0u;
  *(_OWORD *)(v9 + 208) = 0u;
  *(_OWORD *)(v9 + 224) = 0u;
  *(_OWORD *)(v9 + 240) = 0u;
  *(_OWORD *)(v9 + 256) = 0u;
  uint64_t v22 = v51;
  uint64_t v21 = v52;
  *(void *)(v9 + 16) = v51;
  *(void *)(v9 + 24) = v21;
  uint64_t v54 = 0;
  unint64_t v55 = 0xE000000000000000;
  swift_bridgeObjectRetain();
  _StringGuts.grow(_:)(45);
  swift_bridgeObjectRelease();
  uint64_t v54 = (void *)0xD00000000000002BLL;
  unint64_t v55 = 0x8000000101416D60;
  v23._countAndFlagsBits = v22;
  v23._object = v21;
  String.append(_:)(v23);
  v50(v18, v47, v49);
  static DispatchQoS.unspecified.getter();
  uint64_t v54 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)(v9 + 48) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  id v24 = objc_allocWithZone((Class)IDSService);
  swift_bridgeObjectRetain();
  NSString v25 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v26 = [v24 initWithService:v25];

  if (v26)
  {
    *(void *)(v10 + 64) = v26;
    type metadata accessor for MessagingQueryController();
    swift_allocObject();
    swift_bridgeObjectRetain();
    *(void *)(v10 + 72) = sub_101278D6C(v22, (uint64_t)v21);
    *(double *)(v10 + 96) = a8;
    *(double *)(v10 + 104) = a9;
    *(void *)(v10 + 112) = v39;
    sub_10000588C(&qword_10165CAB8);
    uint64_t v27 = swift_allocObject();
    *(_DWORD *)(v27 + 64) = 0;
    *(void *)(v27 + 16) = v22;
    *(void *)(v27 + 24) = v21;
    *(void *)(v27 + 32) = _swiftEmptyDictionarySingleton;
    *(void *)(v27 + 40) = _swiftEmptyDictionarySingleton;
    *(void *)(v27 + 48) = _swiftEmptyDictionarySingleton;
    *(void *)(v27 + 56) = _swiftEmptyDictionarySingleton;
    *(void *)(v10 + 120) = v27;
    uint64_t v28 = qword_1016373D8;
    swift_bridgeObjectRetain();
    if (v28 != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    sub_100010324(v29, (uint64_t)qword_10170F168);
    swift_retain();
    int64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v30, v31))
    {
      int64_t v32 = (uint8_t *)swift_slowAlloc();
      uint64_t v54 = (void *)swift_slowAlloc();
      *(_DWORD *)int64_t v32 = 136446210;
      uint64_t v33 = sub_100CD55B4(v37, v38);
      uint64_t v53 = sub_1008FA0F0(v33, v34, (uint64_t *)&v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Created %{public}s", v32, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v35 = swift_release();
    }
    if (qword_1016373E8 != -1) {
      uint64_t v35 = swift_once();
    }
    __chkstk_darwin(v35);
    *(&v36 - 4) = v10;
    *(&v36 - 3) = v22;
    *(&v36 - 2) = (uint64_t)v21;
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  }
  else
  {
    __break(1u);
  }
}

void sub_100CD72C4(uint64_t a1, int a2, void *a3)
{
  uint64_t v27 = a3;
  int v28 = a2;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v27 - v9;
  uint64_t v11 = sub_10000588C(&qword_10163CB58);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000588C(&qword_101660720);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  sub_100164580(a1, (uint64_t)v13);
  swift_endAccess();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_10001DAB4((uint64_t)v13, &qword_10163CB58);
    if (qword_101637038 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_100010324(v18, (uint64_t)qword_10170EB88);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      v30[0] = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 136446210;
      sub_100CD792C((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v29 = sub_1008FA0F0(v22, v23, (uint64_t *)v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Untracked identifier: %{public}s", v21, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v13, v14);
    if (v28)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v10, a1, v4);
      CheckedContinuation.resume(returning:)();
    }
    else
    {
      if (v27)
      {
        id v24 = v27;
      }
      else
      {
        id v25 = objc_allocWithZone((Class)NSError);
        NSString v26 = String._bridgeToObjectiveC()();
        id v24 = [v25 initWithDomain:v26 code:0 userInfo:0];
      }
      v30[0] = v24;
      swift_errorRetain();
      CheckedContinuation.resume(throwing:)();
    }
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  }
}

uint64_t sub_100CD7794(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_10001D2E4;
  return sub_100CD303C(a1, a2, v2);
}

uint64_t sub_100CD7844(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_10001D2E4;
  return sub_100CD3704(a1, v4, v5, v6);
}

BOOL sub_100CD78F8@<W0>(unsigned char *a1@<X8>)
{
  BOOL result = sub_100CD2FC0(*(void *)(v1 + 16), *(void *)(v1 + 24));
  if (!v2) {
    *a1 = result;
  }
  return result;
}

uint64_t sub_100CD792C(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100CD7974()
{
  return sub_100CD2EC8(v0[2], v0[3], v0[4]);
}

uint64_t sub_100CD79A4()
{
  return sub_100CD3198();
}

uint64_t sub_100CD7A1C()
{
  return sub_100CD7974();
}

uint64_t sub_100CD7A34()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170EBB8);
  uint64_t v1 = sub_100010324(v0, (uint64_t)qword_10170EBB8);
  if (qword_101637050 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100010324(v0, (uint64_t)qword_10170EBD0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100CD7AFC(uint64_t a1, uint64_t a2)
{
  if (*(void *)(v2 + 128))
  {
    uint64_t v3 = *(void *)(v2 + 128);
  }
  else
  {
    uint64_t v4 = sub_100CF8CA4(&qword_10165CDE0, a2, (void (*)(uint64_t))type metadata accessor for CircleTrustService);
    type metadata accessor for CircleTrustMessageRouter();
    uint64_t v3 = swift_allocObject();
    swift_retain();
    swift_defaultActor_initialize();
    *(void *)(v3 + 112) = v2;
    *(void *)(v3 + 120) = v4;
    *(void *)(v2 + 128) = v3;
    swift_retain();
    swift_release();
  }
  swift_retain();
  return v3;
}

uint64_t sub_100CD7BB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 160) = a4;
  sub_10000588C(&qword_101638CF0);
  *(void *)(v4 + 168) = swift_task_alloc();
  return _swift_task_switch(sub_100CD7C50, a4, 0);
}

uint64_t sub_100CD7C50()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_1016390C0 + dword_1016390C0);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 176) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100CD7D8C;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100CD7D8C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 160);
  *(void *)(*(void *)v1 + 184) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100CD7EA4, v2, 0);
}

uint64_t sub_100CD7EA4()
{
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (v0[23])
  {
    uint64_t v2 = v0[20];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    v0[15] = type metadata accessor for CircleTrustService();
    v0[16] = sub_100CF8CA4(&qword_10165CC60, v3, (void (*)(uint64_t))type metadata accessor for CircleTrustService);
    v0[12] = v2;
    swift_retain();
    uint64_t v4 = (void *)swift_task_alloc();
    v0[24] = v4;
    void *v4 = v0;
    v4[1] = sub_100CD80A0;
    uint64_t v5 = v0[21];
    return sub_100CCEB30(v5, (uint64_t)(v0 + 12));
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_101637048 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100010324(v7, (uint64_t)qword_10170EBB8);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "No IDSTransportService_ItemSharingCrossAccount available!", v10, 2u);
      swift_slowDealloc();
    }

    swift_task_dealloc();
    uint64_t v11 = (uint64_t (*)(void))v0[1];
    return v11();
  }
}

uint64_t sub_100CD80A0()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 160);
    swift_errorRelease();
    uint64_t v4 = sub_100CD828C;
    uint64_t v5 = v3;
  }
  else
  {
    uint64_t v6 = *(void *)(v2 + 160);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v2 + 96);
    uint64_t v4 = sub_100CD81D0;
    uint64_t v5 = v6;
  }
  return _swift_task_switch(v4, v5, 0);
}

uint64_t sub_100CD81D0()
{
  swift_release();
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 0, 1, v2);
  sub_10001DAB4(v1, &qword_101638CF0);
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_100CD828C()
{
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 96);
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  sub_10001DAB4(v1, &qword_101638CF0);
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_100CD8354(uint64_t a1)
{
  v2[18] = a1;
  v2[19] = v1;
  uint64_t v3 = type metadata accessor for UUID();
  v2[20] = v3;
  v2[21] = *(void *)(v3 - 8);
  v2[22] = swift_task_alloc();
  v2[23] = swift_task_alloc();
  v2[24] = swift_task_alloc();
  v2[25] = swift_task_alloc();
  sub_10000588C(&qword_101638CF0);
  v2[26] = swift_task_alloc();
  v2[27] = swift_task_alloc();
  v2[28] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for OwnerSharingCircle();
  v2[29] = v4;
  v2[30] = *(void *)(v4 - 8);
  v2[31] = swift_task_alloc();
  return _swift_task_switch(sub_100CD84E4, v1, 0);
}

uint64_t sub_100CD84E4()
{
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 256) = v2;
  if (v2)
  {
    uint64_t v4 = *(void *)(v0 + 232);
    uint64_t v3 = *(void *)(v0 + 240);
    int v5 = *(_DWORD *)(v3 + 80);
    *(_DWORD *)(v0 + 320) = v5;
    *(void *)(v0 + 264) = *(void *)(v3 + 72);
    *(void *)(v0 + 272) = 0;
    uint64_t v6 = *(void *)(v0 + 248);
    uint64_t v7 = v1 + ((v5 + 32) & ~(unint64_t)v5);
    swift_bridgeObjectRetain();
    sub_100CF8CEC(v7, v6, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v8 = *(void *)(v6 + *(int *)(v4 + 32));
    uint64_t v9 = *(void *)(v8 + 16);
    if (!v9)
    {
      uint64_t v21 = _swiftEmptyArrayStorage;
      goto LABEL_14;
    }
    uint64_t v10 = *(void *)(v0 + 168);
    sub_10000588C(&qword_10163BC50);
    uint64_t v11 = *(void *)(v10 + 72);
    unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    uint64_t v13 = (void *)swift_allocObject();
    uint64_t v14 = (char *)j__malloc_size(v13);
    if (v11)
    {
      if (&v14[-v12] == (char *)0x8000000000000000 && v11 == -1) {
        goto LABEL_49;
      }
      v13[2] = v9;
      v13[3] = 2 * ((uint64_t)&v14[-v12] / v11);
      swift_bridgeObjectRetain_n();
      uint64_t v20 = sub_100711B04(v0 + 16, (char *)v13 + v12, v9, v8);
      uint64_t v14 = (char *)sub_100132C20();
      if (v20 == v9)
      {
        swift_bridgeObjectRelease();
        uint64_t v21 = v13;
LABEL_14:
        uint64_t v24 = v21[2];
        uint64_t v25 = *(void *)(v0 + 168);
        if (v24)
        {
          int v76 = (void *)(v0 + 128);
          NSString v26 = (char *)v21
              + ((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80));
          uint64_t v78 = *(void *)(v25 + 72);
          uint64_t v87 = *(void (**)(uint64_t, char *, uint64_t))(v25 + 16);
          swift_retain();
          uint64_t v27 = _swiftEmptyDictionarySingleton;
          while (1)
          {
            uint64_t v33 = *(void *)(v0 + 224);
            uint64_t v34 = *(void *)(v0 + 160);
            uint64_t v35 = *(void *)(v0 + 168);
            v87(v33, v26, v34);
            uint64_t v36 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v35 + 56);
            v36(v33, 0, 1, v34);
            uint64_t v85 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48);
            if (v85(v33, 1, v34) == 1) {
              break;
            }
            uint64_t v79 = v24;
            uint64_t v80 = v26;
            uint64_t v84 = *(void *)(v0 + 216);
            uint64_t v37 = *(char **)(v0 + 192);
            int64_t v38 = *(char **)(v0 + 200);
            uint64_t v82 = v27;
            uint64_t v83 = *(void *)(v0 + 184);
            uint64_t v39 = *(void *)(v0 + 160);
            uint64_t v81 = (void (**)(uint64_t, unint64_t, uint64_t))(*(void *)(v0 + 168) + 32);
            uint64_t v77 = *v81;
            (*v81)((uint64_t)v38, *(void *)(v0 + 224), v39);
            sub_100CF8CA4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
            *(void *)(v0 + 80) = dispatch thunk of CustomStringConvertible.description.getter();
            *(void *)(v0 + 88) = v40;
            v41._countAndFlagsBits = 124;
            v41._object = (void *)0xE100000000000000;
            uint64_t v86 = v36;
            String.append(_:)(v41);
            v42._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v42);
            swift_bridgeObjectRelease();
            uint64_t v43 = String.utf8Data.getter();
            unint64_t v45 = v44;
            swift_bridgeObjectRelease();
            *(void *)(v0 + 96) = v43;
            *(void *)(v0 + 104) = v45;
            sub_1000362FC();
            DataProtocol.stableUUID.getter();
            sub_10001CFB8(v43, v45);
            v87(v83, v37, v39);
            v87(v84, v38, v39);
            v86(v84, 0, 1, v39);
            unsigned int v46 = v85(v84, 1, v39);
            uint64_t v47 = *(void *)(v0 + 184);
            if (v46 == 1)
            {
              sub_10001DAB4(*(void *)(v0 + 216), &qword_101638CF0);
              uint64_t v27 = v82;
              swift_bridgeObjectRetain();
              unint64_t v48 = sub_1007240CC(v47);
              char v50 = v49;
              swift_bridgeObjectRelease();
              if (v50)
              {
                char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                *int v76 = v82;
                if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                {
                  sub_100E7F31C();
                  uint64_t v27 = (void *)*v76;
                }
                uint64_t v52 = *(void *)(v0 + 208);
                uint64_t v53 = *(void *)(v0 + 160);
                uint64_t v29 = *(void (**)(unint64_t, uint64_t))(*(void *)(v0 + 168) + 8);
                v29(v27[6] + v48 * v78, v53);
                uint64_t v27 = *(void **)(v0 + 128);
                v77(v52, v27[7] + v48 * v78, v53);
                sub_100166888(v48, (uint64_t)v27);
                swift_bridgeObjectRelease();
                v86(v52, 0, 1, v53);
              }
              else
              {
                uint64_t v28 = *(void *)(v0 + 168);
                v86(*(void *)(v0 + 208), 1, 1, *(void *)(v0 + 160));
                uint64_t v29 = *(void (**)(unint64_t, uint64_t))(v28 + 8);
              }
              uint64_t v30 = *(void *)(v0 + 208);
              v29(*(void *)(v0 + 184), *(void *)(v0 + 160));
              sub_10001DAB4(v30, &qword_101638CF0);
            }
            else
            {
              v77(*(void *)(v0 + 176), *(void *)(v0 + 216), *(void *)(v0 + 160));
              int v54 = swift_isUniquelyReferenced_nonNull_native();
              *(void *)(v0 + 136) = v82;
              unint64_t v55 = sub_1007240CC(v47);
              uint64_t v56 = v82[2];
              BOOL v57 = (v15 & 1) == 0;
              uint64_t v14 = (char *)(v56 + v57);
              if (__OFADD__(v56, v57))
              {
                __break(1u);
LABEL_46:
                __break(1u);
                goto LABEL_47;
              }
              char v58 = v15;
              if (v82[3] >= (uint64_t)v14)
              {
                if ((v54 & 1) == 0) {
                  sub_100E7F31C();
                }
              }
              else
              {
                uint64_t v59 = *(void *)(v0 + 184);
                sub_100E673F4((uint64_t)v14, v54);
                unint64_t v60 = sub_1007240CC(v59);
                if ((v58 & 1) != (v61 & 1))
                {
                  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                }
                unint64_t v55 = v60;
              }
              uint64_t v62 = *(void **)(v0 + 136);
              uint64_t v63 = *(void *)(v0 + 160);
              if (v58)
              {
                (*(void (**)(unint64_t, void, void))(*(void *)(v0 + 168) + 40))(v62[7] + v55 * v78, *(void *)(v0 + 176), *(void *)(v0 + 160));
              }
              else
              {
                uint64_t v65 = *(void *)(v0 + 176);
                uint64_t v64 = *(char **)(v0 + 184);
                v62[(v55 >> 6) + 8] |= 1 << v55;
                unint64_t v66 = v55 * v78;
                v87(v62[6] + v66, v64, v63);
                uint64_t v14 = (char *)((uint64_t (*)(unint64_t, uint64_t, uint64_t))v77)(v62[7] + v66, v65, v63);
                uint64_t v67 = v62[2];
                BOOL v68 = __OFADD__(v67, 1);
                uint64_t v69 = v67 + 1;
                if (v68) {
                  goto LABEL_46;
                }
                v62[2] = v69;
              }
              unint64_t v70 = *(void *)(v0 + 184);
              uint64_t v71 = *(void *)(v0 + 160);
              uint64_t v72 = *(void *)(v0 + 168);
              uint64_t v27 = *(void **)(v0 + 136);
              swift_bridgeObjectRelease();
              uint64_t v29 = *(void (**)(unint64_t, uint64_t))(v72 + 8);
              v29(v70, v71);
            }
            unint64_t v31 = *(void *)(v0 + 200);
            uint64_t v32 = *(void *)(v0 + 160);
            v29(*(void *)(v0 + 192), v32);
            v29(v31, v32);
            NSString v26 = &v80[v78];
            uint64_t v24 = v79 - 1;
            if (v79 == 1)
            {
              v86(*(void *)(v0 + 224), 1, 1, *(void *)(v0 + 160));
              break;
            }
          }
        }
        else
        {
          swift_retain();
          uint64_t v27 = _swiftEmptyDictionarySingleton;
          (*(void (**)(void, uint64_t, uint64_t, void))(v25 + 56))(*(void *)(v0 + 224), 1, 1, *(void *)(v0 + 160));
        }
        swift_release_n();
        *(void *)(v0 + 112) = v27;
        uint64_t v73 = (void *)swift_task_alloc();
        *(void *)(v0 + 280) = v73;
        uint64_t v74 = sub_10000588C(&qword_10165CDC8);
        uint64_t v75 = type metadata accessor for OwnerPeerTrust();
        uint64_t v18 = sub_100062734(&qword_10165CDD0, &qword_10165CDC8);
        void *v73 = v0;
        v73[1] = sub_100CD8DD0;
        uint64_t v15 = *(void *)(v0 + 152);
        uint64_t v14 = (char *)&unk_10165CDC0;
        uint64_t v16 = v74;
        uint64_t v17 = v75;
        return Sequence.asyncCompactMap<A>(_:)(v14, v15, v16, v17, v18);
      }
    }
    else
    {
LABEL_47:
      __break(1u);
    }
    __break(1u);
LABEL_49:
    __break(1u);
    return Sequence.asyncCompactMap<A>(_:)(v14, v15, v16, v17, v18);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v22 = *(uint64_t (**)(void))(v0 + 8);
  return v22();
}

uint64_t sub_100CD8DD0(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  int v5 = *(void **)v2;
  *(void *)(*(void *)v2 + 288) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v6 = v4[19];
    swift_bridgeObjectRelease();
    return _swift_task_switch(sub_100CD99C8, v6, 0);
  }
  else
  {
    v4[37] = a1;
    swift_bridgeObjectRelease();
    uint64_t v7 = (void *)swift_task_alloc();
    v4[38] = v7;
    void *v7 = v5;
    v7[1] = sub_100CD8F74;
    uint64_t v8 = v4[31];
    return sub_100CDB834(v8, a1);
  }
}

uint64_t sub_100CD8F74()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 312) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  uint64_t v3 = *(void *)(v2 + 152);
  if (v0) {
    uint64_t v4 = sub_100CDA450;
  }
  else {
    uint64_t v4 = sub_100CD90BC;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100CD90BC()
{
  sub_100CF8B0C(*(void *)(v0 + 248), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  uint64_t v1 = *(void *)(v0 + 272) + 1;
  if (v1 != *(void *)(v0 + 256))
  {
    *(void *)(v0 + 272) = v1;
    uint64_t v4 = *(void *)(v0 + 248);
    uint64_t v5 = *(void *)(v0 + 232);
    sub_100CF8CEC(*(void *)(v0 + 144)+ ((*(unsigned __int8 *)(v0 + 320) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 320))+ *(void *)(v0 + 264) * v1, v4, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v6 = *(void *)(v4 + *(int *)(v5 + 32));
    uint64_t v7 = *(void *)(v6 + 16);
    if (!v7)
    {
      uint64_t v19 = _swiftEmptyArrayStorage;
      goto LABEL_14;
    }
    uint64_t v8 = *(void *)(v0 + 168);
    sub_10000588C(&qword_10163BC50);
    uint64_t v9 = *(void *)(v8 + 72);
    unint64_t v10 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    uint64_t v11 = (void *)swift_allocObject();
    unint64_t v12 = (char *)j__malloc_size(v11);
    if (v9)
    {
      if (&v12[-v10] == (char *)0x8000000000000000 && v9 == -1) {
        goto LABEL_49;
      }
      v11[2] = v7;
      v11[3] = 2 * ((uint64_t)&v12[-v10] / v9);
      swift_bridgeObjectRetain_n();
      uint64_t v18 = sub_100711B04(v0 + 16, (char *)v11 + v10, v7, v6);
      unint64_t v12 = (char *)sub_100132C20();
      if (v18 == v7)
      {
        swift_bridgeObjectRelease();
        uint64_t v19 = v11;
LABEL_14:
        uint64_t v20 = v19[2];
        uint64_t v21 = *(void *)(v0 + 168);
        if (v20)
        {
          uint64_t v72 = (void *)(v0 + 128);
          uint64_t v22 = (char *)v19
              + ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
          uint64_t v74 = *(void *)(v21 + 72);
          uint64_t v83 = *(void (**)(uint64_t, char *, uint64_t))(v21 + 16);
          swift_retain();
          unint64_t v23 = _swiftEmptyDictionarySingleton;
          while (1)
          {
            uint64_t v29 = *(void *)(v0 + 224);
            uint64_t v30 = *(void *)(v0 + 160);
            uint64_t v31 = *(void *)(v0 + 168);
            v83(v29, v22, v30);
            uint64_t v32 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v31 + 56);
            v32(v29, 0, 1, v30);
            uint64_t v81 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48);
            if (v81(v29, 1, v30) == 1) {
              break;
            }
            uint64_t v75 = v20;
            int v76 = v22;
            uint64_t v80 = *(void *)(v0 + 216);
            uint64_t v33 = *(char **)(v0 + 192);
            uint64_t v34 = *(char **)(v0 + 200);
            uint64_t v78 = v23;
            uint64_t v79 = *(void *)(v0 + 184);
            uint64_t v35 = *(void *)(v0 + 160);
            uint64_t v77 = (void (**)(uint64_t, unint64_t, uint64_t))(*(void *)(v0 + 168) + 32);
            uint64_t v73 = *v77;
            (*v77)((uint64_t)v34, *(void *)(v0 + 224), v35);
            sub_100CF8CA4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
            *(void *)(v0 + 80) = dispatch thunk of CustomStringConvertible.description.getter();
            *(void *)(v0 + 88) = v36;
            v37._countAndFlagsBits = 124;
            v37._object = (void *)0xE100000000000000;
            uint64_t v82 = v32;
            String.append(_:)(v37);
            v38._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v38);
            swift_bridgeObjectRelease();
            uint64_t v39 = String.utf8Data.getter();
            unint64_t v41 = v40;
            swift_bridgeObjectRelease();
            *(void *)(v0 + 96) = v39;
            *(void *)(v0 + 104) = v41;
            sub_1000362FC();
            DataProtocol.stableUUID.getter();
            sub_10001CFB8(v39, v41);
            v83(v79, v33, v35);
            v83(v80, v34, v35);
            v82(v80, 0, 1, v35);
            unsigned int v42 = v81(v80, 1, v35);
            uint64_t v43 = *(void *)(v0 + 184);
            if (v42 == 1)
            {
              sub_10001DAB4(*(void *)(v0 + 216), &qword_101638CF0);
              unint64_t v23 = v78;
              swift_bridgeObjectRetain();
              unint64_t v44 = sub_1007240CC(v43);
              char v46 = v45;
              swift_bridgeObjectRelease();
              if (v46)
              {
                char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                *uint64_t v72 = v78;
                if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                {
                  sub_100E7F31C();
                  unint64_t v23 = (void *)*v72;
                }
                uint64_t v48 = *(void *)(v0 + 208);
                uint64_t v49 = *(void *)(v0 + 160);
                uint64_t v25 = *(void (**)(unint64_t, uint64_t))(*(void *)(v0 + 168) + 8);
                v25(v23[6] + v44 * v74, v49);
                unint64_t v23 = *(void **)(v0 + 128);
                v73(v48, v23[7] + v44 * v74, v49);
                sub_100166888(v44, (uint64_t)v23);
                swift_bridgeObjectRelease();
                v82(v48, 0, 1, v49);
              }
              else
              {
                uint64_t v24 = *(void *)(v0 + 168);
                v82(*(void *)(v0 + 208), 1, 1, *(void *)(v0 + 160));
                uint64_t v25 = *(void (**)(unint64_t, uint64_t))(v24 + 8);
              }
              uint64_t v26 = *(void *)(v0 + 208);
              v25(*(void *)(v0 + 184), *(void *)(v0 + 160));
              sub_10001DAB4(v26, &qword_101638CF0);
            }
            else
            {
              v73(*(void *)(v0 + 176), *(void *)(v0 + 216), *(void *)(v0 + 160));
              int v50 = swift_isUniquelyReferenced_nonNull_native();
              *(void *)(v0 + 136) = v78;
              unint64_t v51 = sub_1007240CC(v43);
              uint64_t v52 = v78[2];
              BOOL v53 = (v13 & 1) == 0;
              unint64_t v12 = (char *)(v52 + v53);
              if (__OFADD__(v52, v53))
              {
                __break(1u);
LABEL_46:
                __break(1u);
                goto LABEL_47;
              }
              char v54 = v13;
              if (v78[3] >= (uint64_t)v12)
              {
                if ((v50 & 1) == 0) {
                  sub_100E7F31C();
                }
              }
              else
              {
                uint64_t v55 = *(void *)(v0 + 184);
                sub_100E673F4((uint64_t)v12, v50);
                unint64_t v56 = sub_1007240CC(v55);
                if ((v54 & 1) != (v57 & 1))
                {
                  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                }
                unint64_t v51 = v56;
              }
              char v58 = *(void **)(v0 + 136);
              uint64_t v59 = *(void *)(v0 + 160);
              if (v54)
              {
                (*(void (**)(unint64_t, void, void))(*(void *)(v0 + 168) + 40))(v58[7] + v51 * v74, *(void *)(v0 + 176), *(void *)(v0 + 160));
              }
              else
              {
                uint64_t v61 = *(void *)(v0 + 176);
                unint64_t v60 = *(char **)(v0 + 184);
                v58[(v51 >> 6) + 8] |= 1 << v51;
                unint64_t v62 = v51 * v74;
                v83(v58[6] + v62, v60, v59);
                unint64_t v12 = (char *)((uint64_t (*)(unint64_t, uint64_t, uint64_t))v73)(v58[7] + v62, v61, v59);
                uint64_t v63 = v58[2];
                BOOL v64 = __OFADD__(v63, 1);
                uint64_t v65 = v63 + 1;
                if (v64) {
                  goto LABEL_46;
                }
                v58[2] = v65;
              }
              unint64_t v66 = *(void *)(v0 + 184);
              uint64_t v67 = *(void *)(v0 + 160);
              uint64_t v68 = *(void *)(v0 + 168);
              unint64_t v23 = *(void **)(v0 + 136);
              swift_bridgeObjectRelease();
              uint64_t v25 = *(void (**)(unint64_t, uint64_t))(v68 + 8);
              v25(v66, v67);
            }
            unint64_t v27 = *(void *)(v0 + 200);
            uint64_t v28 = *(void *)(v0 + 160);
            v25(*(void *)(v0 + 192), v28);
            v25(v27, v28);
            uint64_t v22 = &v76[v74];
            uint64_t v20 = v75 - 1;
            if (v75 == 1)
            {
              v82(*(void *)(v0 + 224), 1, 1, *(void *)(v0 + 160));
              break;
            }
          }
        }
        else
        {
          swift_retain();
          unint64_t v23 = _swiftEmptyDictionarySingleton;
          (*(void (**)(void, uint64_t, uint64_t, void))(v21 + 56))(*(void *)(v0 + 224), 1, 1, *(void *)(v0 + 160));
        }
        swift_release_n();
        *(void *)(v0 + 112) = v23;
        uint64_t v69 = (void *)swift_task_alloc();
        *(void *)(v0 + 280) = v69;
        uint64_t v70 = sub_10000588C(&qword_10165CDC8);
        uint64_t v71 = type metadata accessor for OwnerPeerTrust();
        uint64_t v16 = sub_100062734(&qword_10165CDD0, &qword_10165CDC8);
        *uint64_t v69 = v0;
        v69[1] = sub_100CD8DD0;
        uint64_t v13 = *(void *)(v0 + 152);
        unint64_t v12 = (char *)&unk_10165CDC0;
        uint64_t v14 = v70;
        uint64_t v15 = v71;
        return Sequence.asyncCompactMap<A>(_:)(v12, v13, v14, v15, v16);
      }
    }
    else
    {
LABEL_47:
      __break(1u);
    }
    __break(1u);
LABEL_49:
    __break(1u);
    return Sequence.asyncCompactMap<A>(_:)(v12, v13, v14, v15, v16);
  }
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100CD99C8()
{
  uint64_t v95 = v0;
  if (qword_101637048 != -1) {
LABEL_51:
  }
    swift_once();
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170EBB8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = *(void *)(v0 + 248);
  if (v4)
  {
    uint64_t v6 = swift_slowAlloc();
    uint64_t v94 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136446210;
    swift_getErrorValue();
    uint64_t v7 = Error.localizedDescription.getter();
    *(void *)(v6 + 4) = sub_1008FA0F0(v7, v8, &v94);
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Can't update the circle, error: %{public}s", (uint8_t *)v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  swift_errorRelease();
  sub_100CF8B0C(v5, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  uint64_t v9 = *(void *)(v0 + 272) + 1;
  if (v9 != *(void *)(v0 + 256))
  {
    *(void *)(v0 + 272) = v9;
    uint64_t v12 = *(void *)(v0 + 248);
    uint64_t v13 = *(void *)(v0 + 232);
    sub_100CF8CEC(*(void *)(v0 + 144)+ ((*(unsigned __int8 *)(v0 + 320) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 320))+ *(void *)(v0 + 264) * v9, v12, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v14 = *(void *)(v12 + *(int *)(v13 + 32));
    uint64_t v15 = *(void *)(v14 + 16);
    if (!v15)
    {
      unint64_t v27 = _swiftEmptyArrayStorage;
      goto LABEL_18;
    }
    uint64_t v16 = *(void *)(v0 + 168);
    sub_10000588C(&qword_10163BC50);
    uint64_t v17 = *(void *)(v16 + 72);
    unint64_t v18 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
    uint64_t v19 = (void *)swift_allocObject();
    uint64_t v20 = (char *)j__malloc_size(v19);
    if (v17)
    {
      if (&v20[-v18] == (char *)0x8000000000000000 && v17 == -1) {
        goto LABEL_54;
      }
      void v19[2] = v15;
      v19[3] = 2 * ((uint64_t)&v20[-v18] / v17);
      swift_bridgeObjectRetain_n();
      uint64_t v26 = sub_100711B04(v0 + 16, (char *)v19 + v18, v15, v14);
      uint64_t v20 = (char *)sub_100132C20();
      if (v26 == v15)
      {
        swift_bridgeObjectRelease();
        unint64_t v27 = v19;
LABEL_18:
        uint64_t v28 = v27[2];
        uint64_t v29 = *(void *)(v0 + 168);
        if (v28)
        {
          uint64_t v82 = (void *)(v0 + 128);
          uint64_t v30 = (char *)v27
              + ((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80));
          uint64_t v84 = *(void *)(v29 + 72);
          uint64_t v93 = *(void (**)(uint64_t, char *, uint64_t))(v29 + 16);
          swift_retain();
          uint64_t v31 = _swiftEmptyDictionarySingleton;
          while (1)
          {
            uint64_t v37 = *(void *)(v0 + 224);
            uint64_t v38 = *(void *)(v0 + 160);
            uint64_t v39 = *(void *)(v0 + 168);
            v93(v37, v30, v38);
            unint64_t v40 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v39 + 56);
            v40(v37, 0, 1, v38);
            unint64_t v91 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48);
            if (v91(v37, 1, v38) == 1) {
              break;
            }
            uint64_t v85 = v28;
            uint64_t v86 = v30;
            uint64_t v90 = *(void *)(v0 + 216);
            unint64_t v41 = *(char **)(v0 + 192);
            unsigned int v42 = *(char **)(v0 + 200);
            uint64_t v88 = v31;
            uint64_t v89 = *(void *)(v0 + 184);
            uint64_t v43 = *(void *)(v0 + 160);
            uint64_t v87 = (void (**)(uint64_t, unint64_t, uint64_t))(*(void *)(v0 + 168) + 32);
            uint64_t v83 = *v87;
            (*v87)((uint64_t)v42, *(void *)(v0 + 224), v43);
            sub_100CF8CA4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
            *(void *)(v0 + 80) = dispatch thunk of CustomStringConvertible.description.getter();
            *(void *)(v0 + 88) = v44;
            v45._countAndFlagsBits = 124;
            v45._object = (void *)0xE100000000000000;
            uint64_t v92 = v40;
            String.append(_:)(v45);
            v46._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v46);
            swift_bridgeObjectRelease();
            uint64_t v47 = String.utf8Data.getter();
            unint64_t v49 = v48;
            swift_bridgeObjectRelease();
            *(void *)(v0 + 96) = v47;
            *(void *)(v0 + 104) = v49;
            sub_1000362FC();
            DataProtocol.stableUUID.getter();
            sub_10001CFB8(v47, v49);
            v93(v89, v41, v43);
            v93(v90, v42, v43);
            v92(v90, 0, 1, v43);
            unsigned int v50 = v91(v90, 1, v43);
            uint64_t v51 = *(void *)(v0 + 184);
            if (v50 == 1)
            {
              sub_10001DAB4(*(void *)(v0 + 216), &qword_101638CF0);
              uint64_t v31 = v88;
              swift_bridgeObjectRetain();
              unint64_t v52 = sub_1007240CC(v51);
              char v54 = v53;
              swift_bridgeObjectRelease();
              if (v54)
              {
                char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                *uint64_t v82 = v88;
                if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                {
                  sub_100E7F31C();
                  uint64_t v31 = (void *)*v82;
                }
                uint64_t v56 = *(void *)(v0 + 208);
                uint64_t v57 = *(void *)(v0 + 160);
                uint64_t v33 = *(void (**)(unint64_t, uint64_t))(*(void *)(v0 + 168) + 8);
                v33(v31[6] + v52 * v84, v57);
                uint64_t v31 = *(void **)(v0 + 128);
                v83(v56, v31[7] + v52 * v84, v57);
                sub_100166888(v52, (uint64_t)v31);
                swift_bridgeObjectRelease();
                v92(v56, 0, 1, v57);
              }
              else
              {
                uint64_t v32 = *(void *)(v0 + 168);
                v92(*(void *)(v0 + 208), 1, 1, *(void *)(v0 + 160));
                uint64_t v33 = *(void (**)(unint64_t, uint64_t))(v32 + 8);
              }
              uint64_t v34 = *(void *)(v0 + 208);
              v33(*(void *)(v0 + 184), *(void *)(v0 + 160));
              sub_10001DAB4(v34, &qword_101638CF0);
            }
            else
            {
              v83(*(void *)(v0 + 176), *(void *)(v0 + 216), *(void *)(v0 + 160));
              int v58 = swift_isUniquelyReferenced_nonNull_native();
              *(void *)(v0 + 136) = v88;
              unint64_t v60 = sub_1007240CC(v51);
              uint64_t v61 = v88[2];
              BOOL v62 = (v59 & 1) == 0;
              uint64_t v63 = v61 + v62;
              if (__OFADD__(v61, v62))
              {
                __break(1u);
LABEL_50:
                __break(1u);
                goto LABEL_51;
              }
              char v64 = v59;
              if (v88[3] >= v63)
              {
                if ((v58 & 1) == 0) {
                  sub_100E7F31C();
                }
              }
              else
              {
                uint64_t v65 = *(void *)(v0 + 184);
                sub_100E673F4(v63, v58);
                unint64_t v66 = sub_1007240CC(v65);
                if ((v64 & 1) != (v67 & 1))
                {
                  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                }
                unint64_t v60 = v66;
              }
              uint64_t v68 = *(void **)(v0 + 136);
              uint64_t v69 = *(void *)(v0 + 160);
              if (v64)
              {
                (*(void (**)(unint64_t, void, void))(*(void *)(v0 + 168) + 40))(v68[7] + v60 * v84, *(void *)(v0 + 176), *(void *)(v0 + 160));
              }
              else
              {
                unint64_t v71 = *(void *)(v0 + 176);
                uint64_t v70 = *(char **)(v0 + 184);
                v68[(v60 >> 6) + 8] |= 1 << v60;
                unint64_t v72 = v60 * v84;
                v93(v68[6] + v72, v70, v69);
                v83(v68[7] + v72, v71, v69);
                uint64_t v73 = v68[2];
                BOOL v74 = __OFADD__(v73, 1);
                uint64_t v75 = v73 + 1;
                if (v74) {
                  goto LABEL_50;
                }
                void v68[2] = v75;
              }
              unint64_t v76 = *(void *)(v0 + 184);
              uint64_t v77 = *(void *)(v0 + 160);
              uint64_t v78 = *(void *)(v0 + 168);
              uint64_t v31 = *(void **)(v0 + 136);
              swift_bridgeObjectRelease();
              uint64_t v33 = *(void (**)(unint64_t, uint64_t))(v78 + 8);
              v33(v76, v77);
            }
            unint64_t v35 = *(void *)(v0 + 200);
            uint64_t v36 = *(void *)(v0 + 160);
            v33(*(void *)(v0 + 192), v36);
            v33(v35, v36);
            uint64_t v30 = &v86[v84];
            uint64_t v28 = v85 - 1;
            if (v85 == 1)
            {
              v92(*(void *)(v0 + 224), 1, 1, *(void *)(v0 + 160));
              break;
            }
          }
        }
        else
        {
          swift_retain();
          uint64_t v31 = _swiftEmptyDictionarySingleton;
          (*(void (**)(void, uint64_t, uint64_t, void))(v29 + 56))(*(void *)(v0 + 224), 1, 1, *(void *)(v0 + 160));
        }
        swift_release_n();
        *(void *)(v0 + 112) = v31;
        uint64_t v79 = (void *)swift_task_alloc();
        *(void *)(v0 + 280) = v79;
        uint64_t v80 = sub_10000588C(&qword_10165CDC8);
        uint64_t v81 = type metadata accessor for OwnerPeerTrust();
        uint64_t v24 = sub_100062734(&qword_10165CDD0, &qword_10165CDC8);
        *uint64_t v79 = v0;
        v79[1] = sub_100CD8DD0;
        uint64_t v21 = *(void *)(v0 + 152);
        uint64_t v20 = (char *)&unk_10165CDC0;
        uint64_t v22 = v80;
        uint64_t v23 = v81;
        return Sequence.asyncCompactMap<A>(_:)(v20, v21, v22, v23, v24);
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_54:
    __break(1u);
    return Sequence.asyncCompactMap<A>(_:)(v20, v21, v22, v23, v24);
  }
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

uint64_t sub_100CDA450()
{
  uint64_t v95 = v0;
  if (qword_101637048 != -1) {
LABEL_51:
  }
    swift_once();
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170EBB8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = *(void *)(v0 + 248);
  if (v4)
  {
    uint64_t v6 = swift_slowAlloc();
    uint64_t v94 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136446210;
    swift_getErrorValue();
    uint64_t v7 = Error.localizedDescription.getter();
    *(void *)(v6 + 4) = sub_1008FA0F0(v7, v8, &v94);
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Can't update the circle, error: %{public}s", (uint8_t *)v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  swift_errorRelease();
  sub_100CF8B0C(v5, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  uint64_t v9 = *(void *)(v0 + 272) + 1;
  if (v9 != *(void *)(v0 + 256))
  {
    *(void *)(v0 + 272) = v9;
    uint64_t v12 = *(void *)(v0 + 248);
    uint64_t v13 = *(void *)(v0 + 232);
    sub_100CF8CEC(*(void *)(v0 + 144)+ ((*(unsigned __int8 *)(v0 + 320) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 320))+ *(void *)(v0 + 264) * v9, v12, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v14 = *(void *)(v12 + *(int *)(v13 + 32));
    uint64_t v15 = *(void *)(v14 + 16);
    if (!v15)
    {
      unint64_t v27 = _swiftEmptyArrayStorage;
      goto LABEL_18;
    }
    uint64_t v16 = *(void *)(v0 + 168);
    sub_10000588C(&qword_10163BC50);
    uint64_t v17 = *(void *)(v16 + 72);
    unint64_t v18 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
    uint64_t v19 = (void *)swift_allocObject();
    uint64_t v20 = (char *)j__malloc_size(v19);
    if (v17)
    {
      if (&v20[-v18] == (char *)0x8000000000000000 && v17 == -1) {
        goto LABEL_54;
      }
      void v19[2] = v15;
      v19[3] = 2 * ((uint64_t)&v20[-v18] / v17);
      swift_bridgeObjectRetain_n();
      uint64_t v26 = sub_100711B04(v0 + 16, (char *)v19 + v18, v15, v14);
      uint64_t v20 = (char *)sub_100132C20();
      if (v26 == v15)
      {
        swift_bridgeObjectRelease();
        unint64_t v27 = v19;
LABEL_18:
        uint64_t v28 = v27[2];
        uint64_t v29 = *(void *)(v0 + 168);
        if (v28)
        {
          uint64_t v82 = (void *)(v0 + 128);
          uint64_t v30 = (char *)v27
              + ((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80));
          uint64_t v84 = *(void *)(v29 + 72);
          uint64_t v93 = *(void (**)(uint64_t, char *, uint64_t))(v29 + 16);
          swift_retain();
          uint64_t v31 = _swiftEmptyDictionarySingleton;
          while (1)
          {
            uint64_t v37 = *(void *)(v0 + 224);
            uint64_t v38 = *(void *)(v0 + 160);
            uint64_t v39 = *(void *)(v0 + 168);
            v93(v37, v30, v38);
            unint64_t v40 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v39 + 56);
            v40(v37, 0, 1, v38);
            unint64_t v91 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v39 + 48);
            if (v91(v37, 1, v38) == 1) {
              break;
            }
            uint64_t v85 = v28;
            uint64_t v86 = v30;
            uint64_t v90 = *(void *)(v0 + 216);
            unint64_t v41 = *(char **)(v0 + 192);
            unsigned int v42 = *(char **)(v0 + 200);
            uint64_t v88 = v31;
            uint64_t v89 = *(void *)(v0 + 184);
            uint64_t v43 = *(void *)(v0 + 160);
            uint64_t v87 = (void (**)(uint64_t, unint64_t, uint64_t))(*(void *)(v0 + 168) + 32);
            uint64_t v83 = *v87;
            (*v87)((uint64_t)v42, *(void *)(v0 + 224), v43);
            sub_100CF8CA4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
            *(void *)(v0 + 80) = dispatch thunk of CustomStringConvertible.description.getter();
            *(void *)(v0 + 88) = v44;
            v45._countAndFlagsBits = 124;
            v45._object = (void *)0xE100000000000000;
            uint64_t v92 = v40;
            String.append(_:)(v45);
            v46._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
            String.append(_:)(v46);
            swift_bridgeObjectRelease();
            uint64_t v47 = String.utf8Data.getter();
            unint64_t v49 = v48;
            swift_bridgeObjectRelease();
            *(void *)(v0 + 96) = v47;
            *(void *)(v0 + 104) = v49;
            sub_1000362FC();
            DataProtocol.stableUUID.getter();
            sub_10001CFB8(v47, v49);
            v93(v89, v41, v43);
            v93(v90, v42, v43);
            v92(v90, 0, 1, v43);
            unsigned int v50 = v91(v90, 1, v43);
            uint64_t v51 = *(void *)(v0 + 184);
            if (v50 == 1)
            {
              sub_10001DAB4(*(void *)(v0 + 216), &qword_101638CF0);
              uint64_t v31 = v88;
              swift_bridgeObjectRetain();
              unint64_t v52 = sub_1007240CC(v51);
              char v54 = v53;
              swift_bridgeObjectRelease();
              if (v54)
              {
                char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                *uint64_t v82 = v88;
                if ((isUniquelyReferenced_nonNull_native & 1) == 0)
                {
                  sub_100E7F31C();
                  uint64_t v31 = (void *)*v82;
                }
                uint64_t v56 = *(void *)(v0 + 208);
                uint64_t v57 = *(void *)(v0 + 160);
                uint64_t v33 = *(void (**)(unint64_t, uint64_t))(*(void *)(v0 + 168) + 8);
                v33(v31[6] + v52 * v84, v57);
                uint64_t v31 = *(void **)(v0 + 128);
                v83(v56, v31[7] + v52 * v84, v57);
                sub_100166888(v52, (uint64_t)v31);
                swift_bridgeObjectRelease();
                v92(v56, 0, 1, v57);
              }
              else
              {
                uint64_t v32 = *(void *)(v0 + 168);
                v92(*(void *)(v0 + 208), 1, 1, *(void *)(v0 + 160));
                uint64_t v33 = *(void (**)(unint64_t, uint64_t))(v32 + 8);
              }
              uint64_t v34 = *(void *)(v0 + 208);
              v33(*(void *)(v0 + 184), *(void *)(v0 + 160));
              sub_10001DAB4(v34, &qword_101638CF0);
            }
            else
            {
              v83(*(void *)(v0 + 176), *(void *)(v0 + 216), *(void *)(v0 + 160));
              int v58 = swift_isUniquelyReferenced_nonNull_native();
              *(void *)(v0 + 136) = v88;
              unint64_t v60 = sub_1007240CC(v51);
              uint64_t v61 = v88[2];
              BOOL v62 = (v59 & 1) == 0;
              uint64_t v63 = v61 + v62;
              if (__OFADD__(v61, v62))
              {
                __break(1u);
LABEL_50:
                __break(1u);
                goto LABEL_51;
              }
              char v64 = v59;
              if (v88[3] >= v63)
              {
                if ((v58 & 1) == 0) {
                  sub_100E7F31C();
                }
              }
              else
              {
                uint64_t v65 = *(void *)(v0 + 184);
                sub_100E673F4(v63, v58);
                unint64_t v66 = sub_1007240CC(v65);
                if ((v64 & 1) != (v67 & 1))
                {
                  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
                }
                unint64_t v60 = v66;
              }
              uint64_t v68 = *(void **)(v0 + 136);
              uint64_t v69 = *(void *)(v0 + 160);
              if (v64)
              {
                (*(void (**)(unint64_t, void, void))(*(void *)(v0 + 168) + 40))(v68[7] + v60 * v84, *(void *)(v0 + 176), *(void *)(v0 + 160));
              }
              else
              {
                unint64_t v71 = *(void *)(v0 + 176);
                uint64_t v70 = *(char **)(v0 + 184);
                v68[(v60 >> 6) + 8] |= 1 << v60;
                unint64_t v72 = v60 * v84;
                v93(v68[6] + v72, v70, v69);
                v83(v68[7] + v72, v71, v69);
                uint64_t v73 = v68[2];
                BOOL v74 = __OFADD__(v73, 1);
                uint64_t v75 = v73 + 1;
                if (v74) {
                  goto LABEL_50;
                }
                void v68[2] = v75;
              }
              unint64_t v76 = *(void *)(v0 + 184);
              uint64_t v77 = *(void *)(v0 + 160);
              uint64_t v78 = *(void *)(v0 + 168);
              uint64_t v31 = *(void **)(v0 + 136);
              swift_bridgeObjectRelease();
              uint64_t v33 = *(void (**)(unint64_t, uint64_t))(v78 + 8);
              v33(v76, v77);
            }
            unint64_t v35 = *(void *)(v0 + 200);
            uint64_t v36 = *(void *)(v0 + 160);
            v33(*(void *)(v0 + 192), v36);
            v33(v35, v36);
            uint64_t v30 = &v86[v84];
            uint64_t v28 = v85 - 1;
            if (v85 == 1)
            {
              v92(*(void *)(v0 + 224), 1, 1, *(void *)(v0 + 160));
              break;
            }
          }
        }
        else
        {
          swift_retain();
          uint64_t v31 = _swiftEmptyDictionarySingleton;
          (*(void (**)(void, uint64_t, uint64_t, void))(v29 + 56))(*(void *)(v0 + 224), 1, 1, *(void *)(v0 + 160));
        }
        swift_release_n();
        *(void *)(v0 + 112) = v31;
        uint64_t v79 = (void *)swift_task_alloc();
        *(void *)(v0 + 280) = v79;
        uint64_t v80 = sub_10000588C(&qword_10165CDC8);
        uint64_t v81 = type metadata accessor for OwnerPeerTrust();
        uint64_t v24 = sub_100062734(&qword_10165CDD0, &qword_10165CDC8);
        *uint64_t v79 = v0;
        v79[1] = sub_100CD8DD0;
        uint64_t v21 = *(void *)(v0 + 152);
        uint64_t v20 = (char *)&unk_10165CDC0;
        uint64_t v22 = v80;
        uint64_t v23 = v81;
        return Sequence.asyncCompactMap<A>(_:)(v20, v21, v22, v23, v24);
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_54:
    __break(1u);
    return Sequence.asyncCompactMap<A>(_:)(v20, v21, v22, v23, v24);
  }
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

uint64_t sub_100CDAED8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10001D2E4;
  return sub_100CDAF84(a1, a2);
}

uint64_t sub_100CDAF84(uint64_t a1, uint64_t a2)
{
  v3[16] = a2;
  v3[17] = v2;
  v3[15] = a1;
  uint64_t v4 = type metadata accessor for UUID();
  v3[18] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[19] = v5;
  v3[20] = *(void *)(v5 + 64);
  v3[21] = swift_task_alloc();
  return _swift_task_switch(sub_100CDB050, v2, 0);
}

uint64_t sub_100CDB050()
{
  uint64_t v1 = qword_1016375E8;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_1016390D8 + dword_1016390D8);
    os_log_type_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 176) = v3;
    void *v3 = v0;
    v3[1] = sub_100CDB1A0;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100CDB1A0(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 136);
  *(void *)(*(void *)v1 + 184) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100CDB2B8, v2, 0);
}

uint64_t sub_100CDB2B8()
{
  uint64_t v1 = *(void *)(v0 + 184);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 184);
    return _swift_task_switch(sub_100CDB46C, v2, 0);
  }
  else
  {
    if (qword_101637048 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_10170EBB8);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "No BeaconStoreActor available!", v6, 2u);
      swift_slowDealloc();
    }

    sub_10001CEC8();
    swift_allocError();
    void *v7 = 0x74536E6F63616542;
    v7[1] = 0xEB0000000065726FLL;
    swift_willThrow();
    swift_task_dealloc();
    unint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
    return v8();
  }
}

uint64_t sub_100CDB46C()
{
  uint64_t v1 = v0[23];
  uint64_t v2 = v0[21];
  uint64_t v3 = v0[18];
  uint64_t v4 = v0[19];
  uint64_t v5 = v0[16];
  v0[24] = *(void *)(v1 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v5, v3);
  unint64_t v6 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = swift_allocObject();
  v0[25] = v7;
  *(void *)(v7 + 16) = v1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v7 + v6, v2, v3);
  swift_retain();
  return _swift_task_switch(sub_100CDB560, 0, 0);
}

uint64_t sub_100CDB560()
{
  uint64_t v2 = v0[24];
  uint64_t v1 = v0[25];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[26] = v3;
  v3[2] = v2;
  v3[3] = sub_100CF7ABC;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[27] = v4;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_1016607D0);
  void *v4 = v0;
  v4[1] = sub_100CDB674;
  uint64_t v6 = v0[15];
  return withCheckedContinuation<A>(isolation:function:_:)(v6, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1005545F4, v3, v5);
}

uint64_t sub_100CDB674()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 136);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_100CDB7C4, v1, 0);
}

uint64_t sub_100CDB7C4()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100CDB834(uint64_t a1, uint64_t a2)
{
  v3[17] = a2;
  v3[18] = v2;
  v3[16] = a1;
  v3[19] = *v2;
  sub_10000588C(&qword_101638CF0);
  v3[20] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UUID();
  v3[21] = v4;
  v3[22] = *(void *)(v4 - 8);
  v3[23] = swift_task_alloc();
  v3[24] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for OwnerPeerTrust();
  v3[25] = v5;
  v3[26] = *(void *)(v5 - 8);
  v3[27] = swift_task_alloc();
  v3[28] = *(void *)(type metadata accessor for PeerCommunicationIdentifier() - 8);
  v3[29] = swift_task_alloc();
  return _swift_task_switch(sub_100CDBA14, v2, 0);
}

uint64_t sub_100CDBA14()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 136) + 16);
  *(void *)(v0 + 240) = v1;
  if (v1)
  {
    uint64_t v2 = qword_1016375E8;
    swift_retain();
    if (v2 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
    if (*(void *)(v0 + 80))
    {
      sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
      swift_release();
      sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
      uint64_t v6 = (uint64_t (*)(void))((char *)&dword_1016390C0 + dword_1016390C0);
      uint64_t v4 = (void *)swift_task_alloc();
      *(void *)(v0 + 248) = v4;
      void *v4 = v0;
      v4[1] = sub_100CDBBE8;
      return v6();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
    return v5();
  }
  return result;
}

uint64_t sub_100CDBBE8(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 144);
  *(void *)(*(void *)v1 + 256) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100CDBD00, v2, 0);
}

uint64_t sub_100CDBD00()
{
  uint64_t v1 = v0[32];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 2));
  if (v1)
  {
    uint64_t v2 = v0[28];
    uint64_t v4 = v0[25];
    uint64_t v3 = v0[26];
    uint64_t v5 = v0[17];
    sub_1000B7600(0, v0[30], 0);
    uint64_t v6 = 0;
    uint64_t v7 = v5 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v8 = *(void *)(v3 + 72);
    do
    {
      uint64_t v9 = v0[29];
      uint64_t v10 = v0[27];
      sub_100CF8CEC(v7, v10, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
      sub_100CF8CEC(v10 + *(int *)(v4 + 28), v9, (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
      sub_100CF8B0C(v10, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_1000B7600(0, _swiftEmptyArrayStorage[2] + 1, 1);
      }
      unint64_t v12 = _swiftEmptyArrayStorage[2];
      unint64_t v11 = _swiftEmptyArrayStorage[3];
      if (v12 >= v11 >> 1) {
        sub_1000B7600(v11 > 1, v12 + 1, 1);
      }
      v0[37] = _swiftEmptyArrayStorage;
      uint64_t v13 = v0[29];
      uint64_t v14 = v0[30];
      ++v6;
      _swiftEmptyArrayStorage[2] = v12 + 1;
      sub_100CF89F4(v13, (uint64_t)_swiftEmptyArrayStorage+ ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80))+ *(void *)(v2 + 72) * v12, (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
      v7 += v8;
    }
    while (v6 != v14);
    uint64_t v15 = v0[19];
    v0[15] = _swiftEmptyArrayStorage;
    uint64_t v16 = swift_task_alloc();
    v0[33] = v16;
    *(void *)(v16 + 16) = v15;
    uint64_t v17 = (void *)swift_task_alloc();
    v0[34] = v17;
    uint64_t v18 = sub_10000588C(&qword_10165CDA8);
    uint64_t v19 = sub_100062734(&qword_10165CDB0, &qword_10165CDA8);
    void *v17 = v0;
    v17[1] = sub_100CDC108;
    return Sequence.asyncCompactMap<A>(_:)(&unk_10165CDA0, v16, v18, &type metadata for MessagingDestination, v19);
  }
  else
  {
    if (qword_101637048 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100010324(v20, (uint64_t)qword_10170EBB8);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "No IDSTransportService_ItemSharingCrossAccount available!", v23, 2u);
      swift_slowDealloc();
    }

    sub_10001CEC8();
    swift_allocError();
    *uint64_t v24 = 0xD00000000000002BLL;
    v24[1] = 0x80000001013F8980;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v25 = (uint64_t (*)(void))v0[1];
    return v25();
  }
}

uint64_t sub_100CDC108(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 144);
  *(void *)(v3 + 280) = a1;
  *(void *)(v3 + 288) = v1;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_100CDC260, v4, 0);
}

uint64_t sub_100CDC260()
{
  uint64_t v14 = v0;
  uint64_t v1 = *(void *)(v0 + 288);
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 176);
  uint64_t v4 = *(void *)(v0 + 128);
  sub_10000588C(&qword_10163BC50);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_101342130;
  uint64_t v7 = type metadata accessor for OwnerSharingCircle();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 16))(v6 + v5, v4 + *(int *)(v7 + 20), v2);
  sub_1004F7EA4(5, 1, v6, (uint64_t)v11);
  if (v1)
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
    return v8();
  }
  else
  {
    *(unsigned char *)(v0 + 368) = v11[0];
    *(_OWORD *)(v0 + 304) = v12;
    *(void *)(v0 + 320) = v13;
    uint64_t v10 = *(void *)(v0 + 256);
    return _swift_task_switch(sub_100CDC400, v10, 0);
  }
}

uint64_t sub_100CDC400()
{
  uint64_t v16 = *(void *)(v0 + 320);
  long long v15 = *(_OWORD *)(v0 + 304);
  char v1 = *(unsigned char *)(v0 + 368);
  uint64_t v2 = *(void *)(v0 + 280);
  uint64_t v3 = *(void *)(v0 + 256);
  uint64_t v4 = *(void *)(v0 + 184);
  uint64_t v5 = *(void *)(v0 + 160);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(v0 + 176) + 56))(v5, 1, 1, *(void *)(v0 + 168));
  uint64_t v6 = sub_101158790((uint64_t)_swiftEmptyArrayStorage);
  *(void *)(v0 + 328) = v6;
  uint64_t v7 = sub_101158790((uint64_t)_swiftEmptyArrayStorage);
  *(void *)(v0 + 336) = v7;
  UUID.init()();
  uint64_t v8 = sub_100CF8CA4(&qword_10165C980, 255, (void (*)(uint64_t))type metadata accessor for IDSTransportService_ItemSharingCrossAccount);
  uint64_t v9 = swift_task_alloc();
  *(void *)(v0 + 344) = v9;
  *(void *)(v9 + 16) = v3;
  *(void *)(v9 + 24) = v4;
  *(unsigned char *)(v9 + 32) = v1;
  *(_OWORD *)(v9 + 40) = v15;
  *(void *)(v9 + 56) = v16;
  *(void *)(v9 + 64) = v2;
  *(void *)(v9 + 72) = v5;
  *(void *)(v9 + 80) = 0;
  *(_WORD *)(v9 + 88) = 1;
  *(void *)(v9 + 96) = v6;
  *(void *)(v9 + 104) = v7;
  *(void *)(v9 + 112) = 0;
  *(void *)(v9 + 120) = 0;
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v0 + 352) = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_100CDC5DC;
  uint64_t v11 = *(void *)(v0 + 256);
  uint64_t v12 = *(void *)(v0 + 192);
  uint64_t v13 = *(void *)(v0 + 168);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v12, v11, v8, 0xD000000000000083, 0x8000000101416CB0, sub_100CF717C, v9, v13);
}

uint64_t sub_100CDC5DC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 360) = v0;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 256);
  if (v0) {
    uint64_t v4 = sub_100CDC8B8;
  }
  else {
    uint64_t v4 = sub_100CDC720;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100CDC720()
{
  uint64_t v1 = v0[24];
  uint64_t v2 = v0[21];
  uint64_t v3 = v0[20];
  uint64_t v4 = v0[18];
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v0[22] + 8);
  v5(v0[23], v2);
  sub_10001DAB4(v3, &qword_101638CF0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v5(v1, v2);
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100CDC808, v4, 0);
}

uint64_t sub_100CDC808()
{
  uint64_t v1 = v0[39];
  unint64_t v2 = v0[40];
  swift_release();
  sub_10001CFB8(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_100CDC8B8()
{
  uint64_t v1 = v0[20];
  uint64_t v2 = v0[18];
  (*(void (**)(void, void))(v0[22] + 8))(v0[23], v0[21]);
  sub_10001DAB4(v1, &qword_101638CF0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100CDC974, v2, 0);
}

uint64_t sub_100CDC974()
{
  uint64_t v1 = v0[39];
  unint64_t v2 = v0[40];
  swift_release();
  sub_10001CFB8(v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_100CDCA2C(uint64_t a1, uint64_t a2)
{
  v2[9] = a1;
  v2[10] = a2;
  type metadata accessor for PeerCommunicationIdentifier();
  v2[11] = swift_task_alloc();
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)&dword_101661678 + dword_101661678);
  uint64_t v4 = (void *)swift_task_alloc();
  v2[12] = v4;
  void *v4 = v2;
  v4[1] = sub_100CDCB04;
  return v6(a2);
}

uint64_t sub_100CDCB04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(void **)v4;
  *(void *)(*(void *)v4 + 104) = v3;
  swift_task_dealloc();
  if (v3)
  {
    uint64_t v9 = sub_100CDCCBC;
  }
  else
  {
    v8[14] = a3;
    v8[15] = a2;
    unsigned char v8[16] = a1;
    uint64_t v9 = sub_100CDCC40;
  }
  return _swift_task_switch(v9, 0, 0);
}

uint64_t sub_100CDCC40()
{
  uint64_t v1 = *(void *)(v0 + 112);
  unint64_t v2 = *(int8x16_t **)(v0 + 72);
  *unint64_t v2 = vextq_s8(*(int8x16_t *)(v0 + 120), *(int8x16_t *)(v0 + 120), 8uLL);
  v2[1].i64[0] = v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_100CDCCBC()
{
  uint64_t v17 = v0;
  if (qword_101637048 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = type metadata accessor for Logger();
  sub_100010324(v3, (uint64_t)qword_10170EBB8);
  sub_100CF8CEC(v2, v1, (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = v0[11];
  if (v6)
  {
    uint64_t v8 = swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 141558531;
    v0[5] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 12) = 2081;
    uint64_t v9 = sub_1009C77D8();
    v0[6] = sub_1008FA0F0(v9, v10, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100CF8B0C(v7, (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
    *(_WORD *)(v8 + 22) = 2082;
    swift_getErrorValue();
    uint64_t v11 = Error.localizedDescription.getter();
    v0[8] = sub_1008FA0F0(v11, v12, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Can't get messagingDestination for communicationsIdentifier: %{private,mask.hash}s, error: %{public}s", (uint8_t *)v8, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    sub_100CF8B0C(v7, (uint64_t (*)(void))type metadata accessor for PeerCommunicationIdentifier);
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v13 = (void *)v0[9];
  *uint64_t v13 = 0;
  v13[1] = 0;
  v13[2] = 0;
  swift_task_dealloc();
  uint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

uint64_t type metadata accessor for CircleTrustService()
{
  return self;
}

uint64_t sub_100CDCFE4()
{
  v1[2] = v0;
  v1[3] = *v0;
  sub_10000588C(&qword_10164DBB0);
  v1[4] = swift_task_alloc();
  return _swift_task_switch(sub_100CDD0A0, v0, 0);
}

uint64_t sub_100CDD0A0()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = v0[2];
  uint64_t v4 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v1, 1, 1, v4);
  uint64_t v6 = sub_100CF8CA4(&qword_10165CC40, v5, (void (*)(uint64_t))type metadata accessor for CircleTrustService);
  uint64_t v7 = (void *)swift_allocObject();
  v7[2] = v3;
  v7[3] = v6;
  v7[4] = v3;
  v7[5] = v2;
  swift_retain_n();
  sub_1008F5E44(v1, (uint64_t)&unk_10165CC58, (uint64_t)v7);
  swift_release();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

void sub_100CDD1E0(unint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, unsigned __int8 a18, uint64_t a19, uint64_t a20,uint64_t a21,unsigned __int8 a22,uint64_t a23,unint64_t a24)
{
  uint64_t v87 = a8;
  uint64_t v96 = a7;
  uint64_t v97 = a5;
  unint64_t v85 = a3;
  unint64_t v84 = a2;
  unint64_t v83 = a1;
  uint64_t v103 = a23;
  unint64_t v104 = a24;
  LODWORD(v106) = a22;
  uint64_t v98 = a20;
  int v88 = a18;
  uint64_t v99 = a17;
  uint64_t v100 = a21;
  uint64_t v89 = a16;
  uint64_t v90 = a19;
  uint64_t v94 = a13;
  uint64_t v95 = a14;
  uint64_t v101 = a15;
  uint64_t v102 = a12;
  uint64_t v91 = a11;
  int v92 = a9;
  int v93 = a10;
  uint64_t v86 = *v24;
  uint64_t v27 = type metadata accessor for UUID();
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = *(void *)(v28 + 64);
  uint64_t v30 = __chkstk_darwin(v27);
  uint64_t v105 = (char *)&v71 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  uint64_t v32 = (char *)&v71 - v31;
  uint64_t v33 = sub_10000588C(&qword_101638CF0);
  uint64_t v34 = *(void *)(v33 - 8);
  uint64_t v35 = *(void *)(v34 + 64);
  uint64_t v36 = __chkstk_darwin(v33 - 8);
  __chkstk_darwin(v36);
  uint64_t v38 = (char *)&v71 - v37;
  if ((sub_100EAEA4C() & 1) != 0 && v106 == 2)
  {
    if (qword_101637048 != -1) {
      swift_once();
    }
    uint64_t v39 = type metadata accessor for Logger();
    sub_100010324(v39, (uint64_t)qword_10170EBB8);
    os_log_t v106 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v106, v40))
    {
      unint64_t v41 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v41 = 0;
      _os_log_impl((void *)&_mh_execute_header, v106, v40, "handleCircleTrust received by underage account. Ignoring it.", v41, 2u);
      swift_slowDealloc();
    }
    os_log_t v42 = v106;
  }
  else
  {
    uint64_t v82 = type metadata accessor for Transaction();
    sub_10001D074(a4, (uint64_t)v38, &qword_101638CF0);
    uint64_t v81 = a6;
    uint64_t v43 = *(void (**)(char *, unint64_t, uint64_t))(v28 + 16);
    uint64_t v79 = v32;
    v43(v32, v83, v27);
    v43(v105, v84, v27);
    uint64_t v80 = (uint64_t)&v71 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
    sub_10001D074(v85, v80, &qword_101638CF0);
    uint64_t v44 = *(unsigned __int8 *)(v34 + 80);
    uint64_t v45 = (v44 + 17) & ~v44;
    uint64_t v46 = *(unsigned __int8 *)(v28 + 80);
    uint64_t v47 = (v35 + v46 + v45) & ~v46;
    unint64_t v48 = (v29 + v47 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v49 = (v48 + 31) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v73 = (v49 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v72 = (v73 + 15) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v71 = (v46 + v72 + 16) & ~v46;
    uint64_t v74 = (v29 + v44 + v71) & ~v44;
    unint64_t v75 = (v35 + v74 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v76 = (v75 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v77 = (v76 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v83 = (v77 + 19) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v85 = (v83 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v78 = (v85 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v84 = (v78 + 23) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v50 = swift_allocObject();
    *(unsigned char *)(v50 + 16) = (_BYTE)v106;
    sub_10001D608((uint64_t)v38, v50 + v45, &qword_101638CF0);
    uint64_t v51 = v50 + v47;
    unint64_t v52 = *(void (**)(uint64_t, char *, uint64_t))(v28 + 32);
    v52(v51, v79, v27);
    unint64_t v53 = v50 + v48;
    *(unsigned char *)unint64_t v53 = v88;
    uint64_t v55 = v98;
    uint64_t v54 = v99;
    *(void *)(v53 + 8) = v90;
    *(void *)(v53 + 16) = v55;
    uint64_t v56 = (void *)(v50 + v49);
    *uint64_t v56 = v89;
    v56[1] = v54;
    *(void *)(v50 + v73) = v100;
    uint64_t v57 = (uint64_t *)(v50 + v72);
    uint64_t v58 = v50 + v71;
    uint64_t v60 = v103;
    unint64_t v59 = v104;
    uint64_t *v57 = v103;
    v57[1] = v59;
    v52(v58, v105, v27);
    sub_10001D608(v80, v50 + v74, &qword_101638CF0);
    uint64_t v61 = (void *)(v50 + v75);
    uint64_t v62 = v102;
    *uint64_t v61 = v91;
    v61[1] = v62;
    uint64_t v63 = (void *)(v50 + v76);
    uint64_t v64 = v87;
    *uint64_t v63 = v96;
    v63[1] = v64;
    uint64_t v65 = (void *)(v50 + v77);
    uint64_t v66 = v81;
    *uint64_t v65 = v97;
    v65[1] = v66;
    char v67 = (_DWORD *)(v50 + v83);
    int v68 = v93;
    *char v67 = v92;
    v67[1] = v68;
    *(void *)(v50 + v85) = v94;
    uint64_t v69 = (void *)(v50 + v78);
    uint64_t v70 = v101;
    *uint64_t v69 = v95;
    v69[1] = v70;
    *(void *)(v50 + v84) = v86;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000361E0(v60, v59);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    static Transaction.asyncTask(name:block:)();
    swift_release();
  }
}

uint64_t sub_100CDD87C(char a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 416) = v23;
  *(void *)(v8 + 424) = v24;
  *(_DWORD *)(v8 + 852) = v21;
  *(_DWORD *)(v8 + 848) = v20;
  *(void *)(v8 + 400) = v19;
  *(void *)(v8 + 408) = v22;
  *(_OWORD *)(v8 + 368) = v17;
  *(_OWORD *)(v8 + 384) = v18;
  *(_OWORD *)(v8 + 336) = v15;
  *(_OWORD *)(v8 + 352) = v16;
  *(_OWORD *)(v8 + 320) = v14;
  *(void *)(v8 + 304) = a7;
  *(void *)(v8 + 312) = a8;
  *(void *)(v8 + 288) = a5;
  *(void *)(v8 + 296) = a6;
  *(unsigned char *)(v8 + 861) = a4;
  *(void *)(v8 + 272) = a2;
  *(void *)(v8 + 280) = a3;
  *(unsigned char *)(v8 + 860) = a1;
  uint64_t v9 = type metadata accessor for PeerTrustEnvelopeV1(0);
  *(void *)(v8 + 432) = v9;
  *(void *)(v8 + 440) = *(void *)(v9 - 8);
  *(void *)(v8 + 448) = swift_task_alloc();
  uint64_t v10 = sub_10000588C(&qword_10163A820);
  *(void *)(v8 + 456) = v10;
  *(void *)(v8 + 464) = *(void *)(v10 - 8);
  *(void *)(v8 + 472) = swift_task_alloc();
  *(void *)(v8 + 480) = sub_10000588C(&qword_10163B938);
  *(void *)(v8 + 488) = swift_task_alloc();
  *(void *)(v8 + 496) = swift_task_alloc();
  *(void *)(v8 + 504) = sub_10000588C(&qword_10163B940);
  *(void *)(v8 + 512) = swift_task_alloc();
  *(void *)(v8 + 520) = swift_task_alloc();
  type metadata accessor for CircleTrustDeclineEnvelopeV1(0);
  *(void *)(v8 + 528) = swift_task_alloc();
  sub_10000588C(&qword_101638CF0);
  *(void *)(v8 + 536) = swift_task_alloc();
  *(void *)(v8 + 544) = swift_task_alloc();
  *(void *)(v8 + 552) = swift_task_alloc();
  *(void *)(v8 + 560) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for UUID();
  *(void *)(v8 + 568) = v11;
  *(void *)(v8 + 576) = *(void *)(v11 - 8);
  *(void *)(v8 + 584) = swift_task_alloc();
  *(void *)(v8 + 592) = swift_task_alloc();
  *(void *)(v8 + 600) = swift_task_alloc();
  *(void *)(v8 + 608) = swift_task_alloc();
  *(void *)(v8 + 616) = swift_task_alloc();
  *(void *)(v8 + 624) = swift_task_alloc();
  return _swift_task_switch(sub_100CDDB90, 0, 0);
}

uint64_t sub_100CDDB90()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_101639228 + dword_101639228);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 632) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100CDDCCC;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100CDDCCC(uint64_t a1)
{
  *(void *)(*(void *)v1 + 640) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100CDDDCC, 0, 0);
}

uint64_t sub_100CDDDCC()
{
  uint64_t v1 = *(void *)(v0 + 640);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  if (v1)
  {
    uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 136, (uint64_t *)&unk_101638D30);
    if (*(void *)(v0 + 160))
    {
      sub_10001CEB0((long long *)(v0 + 136), v0 + 96);
      sub_10001CD44((void *)(v0 + 96), *(void *)(v0 + 120));
      uint64_t v9 = (uint64_t (__cdecl *)())((char *)&dword_1016390C0 + dword_1016390C0);
      uint64_t v3 = (void *)swift_task_alloc();
      *(void *)(v0 + 648) = v3;
      void *v3 = v0;
      v3[1] = sub_100CDE0B0;
      return v9();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    if (qword_101637048 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_10170EBB8);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "No BeaconSharingService available!", v7, 2u);
      swift_slowDealloc();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
    return v8();
  }
  return result;
}

uint64_t sub_100CDE0B0(uint64_t a1)
{
  *(void *)(*(void *)v1 + 656) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100CDE1B0, 0, 0);
}

uint64_t sub_100CDE1B0()
{
  uint64_t v1 = v0 + 96;
  if (*(void *)(v0 + 656))
  {
    int v2 = *(unsigned __int8 *)(v0 + 860);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (v2 != 2)
    {
LABEL_5:
      uint64_t v7 = *(void *)(v0 + 520);
      uint64_t v8 = *(int **)(v0 + 504);
      uint64_t v9 = *(void *)(v0 + 304);
      uint64_t v108 = *(void *)(v0 + 312);
      uint64_t v111 = *(void *)(v0 + 320);
      uint64_t v11 = *(void *)(v0 + 288);
      uint64_t v10 = *(void *)(v0 + 296);
      char v12 = *(unsigned char *)(v0 + 861);
      char v13 = *(unsigned char *)(v0 + 860);
      uint64_t v14 = v8[12];
      uint64_t v15 = v7 + v8[16];
      uint64_t v91 = v8;
      long long v16 = (void *)(v7 + v8[20]);
      uint64_t v114 = *(void (**)(void, void))(*(void *)(v0 + 576) + 16);
      ((void (*)(uint64_t, void, void))v114)(v7, *(void *)(v0 + 280), *(void *)(v0 + 568));
      *(unsigned char *)(v7 + v14) = v13;
      *(unsigned char *)uint64_t v15 = v12;
      *(void *)(v15 + 8) = v11;
      *(void *)(v15 + 16) = v10;
      *long long v16 = v9;
      v16[1] = v108;
      int64_t v17 = *(void *)(v111 + 16);
      if (v17)
      {
        uint64_t v109 = *(void *)(v0 + 456);
        uint64_t v112 = *(void *)(v0 + 464);
        uint64_t v19 = *(void *)(v0 + 432);
        uint64_t v18 = *(void *)(v0 + 440);
        uint64_t v20 = *(void *)(v0 + 320);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1000B85D4(0, v17, 0);
        uint64_t v21 = v20 + ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80));
        uint64_t v106 = *(void *)(v18 + 72);
        do
        {
          uint64_t v22 = *(void *)(v0 + 568);
          uint64_t v23 = *(void *)(v0 + 472);
          uint64_t v24 = *(void *)(v0 + 448);
          sub_100CF8CEC(v21, v24, type metadata accessor for PeerTrustEnvelopeV1);
          uint64_t v25 = (void *)(v23 + *(int *)(v109 + 48));
          uint64_t v26 = (uint64_t *)(v23 + *(int *)(v109 + 64));
          ((void (*)(uint64_t, uint64_t, uint64_t))v114)(v23, v24, v22);
          uint64_t v27 = (void *)(v24 + *(int *)(v19 + 20));
          uint64_t v28 = v27[1];
          *uint64_t v25 = *v27;
          v25[1] = v28;
          uint64_t v29 = (uint64_t *)(v24 + *(int *)(v19 + 24));
          uint64_t v30 = *v29;
          unint64_t v31 = v29[1];
          *uint64_t v26 = *v29;
          v26[1] = v31;
          swift_bridgeObjectRetain();
          sub_1000361E0(v30, v31);
          sub_100CF8B0C(v24, type metadata accessor for PeerTrustEnvelopeV1);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            sub_1000B85D4(0, _swiftEmptyArrayStorage[2] + 1, 1);
          }
          unint64_t v33 = _swiftEmptyArrayStorage[2];
          unint64_t v32 = _swiftEmptyArrayStorage[3];
          if (v33 >= v32 >> 1) {
            sub_1000B85D4(v32 > 1, v33 + 1, 1);
          }
          uint64_t v34 = *(void *)(v0 + 472);
          _swiftEmptyArrayStorage[2] = v33 + 1;
          sub_10001D608(v34, (uint64_t)_swiftEmptyArrayStorage+ ((*(unsigned __int8 *)(v112 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v112 + 80))+ *(void *)(v112 + 72) * v33, &qword_10163A820);
          v21 += v106;
          --v17;
        }
        while (v17);
        uint64_t v93 = *(void *)(v0 + 296);
        uint64_t v94 = *(void *)(v0 + 312);
      }
      else
      {
        uint64_t v41 = *(void *)(v0 + 312);
        uint64_t v93 = *(void *)(v0 + 296);
        swift_bridgeObjectRetain();
        uint64_t v94 = v41;
        swift_bridgeObjectRetain();
      }
      *(void *)(v0 + 832) = _swiftEmptyArrayStorage;
      uint64_t v95 = *(void *)(v0 + 568);
      uint64_t v89 = *(void *)(v0 + 512);
      uint64_t v43 = *(void *)(v0 + 488);
      uint64_t v42 = *(void *)(v0 + 496);
      uint64_t v44 = *(int **)(v0 + 480);
      uint64_t v110 = *(void *)(v0 + 416);
      uint64_t v113 = *(void *)(v0 + 424);
      uint64_t v107 = *(void *)(v0 + 408);
      int v105 = *(_DWORD *)(v0 + 852);
      int v104 = *(_DWORD *)(v0 + 848);
      uint64_t v102 = *(void *)(v0 + 392);
      uint64_t v103 = *(void *)(v0 + 400);
      uint64_t v100 = *(void *)(v0 + 376);
      uint64_t v101 = *(void *)(v0 + 384);
      uint64_t v99 = *(void *)(v0 + 368);
      uint64_t v45 = *(void *)(v0 + 344);
      uint64_t v78 = *(void *)(v0 + 352);
      uint64_t v80 = *(void *)(v0 + 504);
      unint64_t v97 = *(void *)(v0 + 336);
      uint64_t v98 = *(void *)(v0 + 360);
      uint64_t v96 = *(void *)(v0 + 328);
      uint64_t v85 = *(void *)(v0 + 288);
      uint64_t v87 = *(void *)(v0 + 304);
      char v84 = *(unsigned char *)(v0 + 861);
      char v82 = *(unsigned char *)(v0 + 860);
      uint64_t v81 = *(void *)(v0 + 520);
      uint64_t v46 = (uint64_t *)(v81 + *(int *)(v80 + 112));
      *(void *)(v81 + *(int *)(v80 + 96)) = _swiftEmptyArrayStorage;
      *uint64_t v46 = v96;
      v46[1] = v97;
      uint64_t v47 = v42 + v44[12];
      uint64_t v83 = v47;
      unint64_t v48 = (void *)(v42 + v44[16]);
      unint64_t v77 = (void *)(v42 + v44[20]);
      unint64_t v49 = (void *)(v42 + v44[24]);
      uint64_t v50 = (void *)(v42 + v44[40]);
      uint64_t v74 = v44[28];
      uint64_t v75 = v44[32];
      uint64_t v76 = v44[36];
      v114(v42, v45);
      sub_10001D074(v78, v47, &qword_101638CF0);
      *unint64_t v48 = v98;
      v48[1] = v99;
      *unint64_t v77 = v100;
      v77[1] = v101;
      void *v49 = v102;
      v49[1] = v103;
      *(_DWORD *)(v42 + v74) = v104;
      *(_DWORD *)(v42 + v75) = v105;
      *(void *)(v42 + v76) = v107;
      *uint64_t v50 = v110;
      v50[1] = v113;
      uint64_t v79 = v91[12];
      uint64_t v51 = v89 + v91[16];
      unint64_t v52 = (void *)(v89 + v91[20]);
      unint64_t v53 = (uint64_t *)(v89 + *(int *)(v80 + 112));
      uint64_t v92 = *(int *)(v80 + 96);
      ((void (*)(void))v114)();
      *(unsigned char *)(v89 + v79) = v82;
      *(unsigned char *)uint64_t v51 = v84;
      *(void *)(v51 + 8) = v85;
      *(void *)(v51 + 16) = v93;
      void *v52 = v87;
      v52[1] = v94;
      *(void *)(v89 + v92) = _swiftEmptyArrayStorage;
      *unint64_t v53 = v96;
      v53[1] = v97;
      uint64_t v54 = v44[12];
      *(_DWORD *)(v0 + 856) = v54;
      uint64_t v55 = v43 + v54;
      uint64_t v56 = (void *)(v43 + v44[16]);
      uint64_t v57 = (void *)(v43 + v44[20]);
      uint64_t v58 = (void *)(v43 + v44[24]);
      uint64_t v88 = v44[32];
      uint64_t v90 = v44[28];
      uint64_t v86 = v44[36];
      unint64_t v59 = (void *)(v43 + v44[40]);
      ((void (*)(uint64_t, uint64_t, uint64_t))v114)(v43, v42, v95);
      sub_10001D074(v83, v55, &qword_101638CF0);
      *uint64_t v56 = v98;
      v56[1] = v99;
      void *v57 = v100;
      v57[1] = v101;
      *uint64_t v58 = v102;
      v58[1] = v103;
      *(_DWORD *)(v43 + v90) = v104;
      *(_DWORD *)(v43 + v88) = v105;
      *(void *)(v43 + v86) = v107;
      *unint64_t v59 = v110;
      v59[1] = v113;
      sub_1000361E0(v96, v97);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1000361E0(v96, v97);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v60 = (void *)swift_task_alloc();
      *(void *)(v0 + 840) = v60;
      *uint64_t v60 = v0;
      v60[1] = sub_100CE0748;
      uint64_t v61 = *(void *)(v0 + 512);
      uint64_t v62 = *(void *)(v0 + 304);
      uint64_t v63 = *(void *)(v0 + 312);
      uint64_t v64 = *(void *)(v0 + 288);
      uint64_t v65 = *(void *)(v0 + 296);
      char v66 = *(unsigned char *)(v0 + 861);
      char v67 = *(unsigned char *)(v0 + 860);
      return sub_1000F8C98(v61, v67, v66, v64, v65, v62, v63, (uint64_t)_swiftEmptyArrayStorage);
    }
    uint64_t v3 = *(void *)(v0 + 576);
    uint64_t v4 = *(void *)(v0 + 568);
    uint64_t v5 = *(void *)(v0 + 560);
    sub_10001D074(*(void *)(v0 + 272), v5, &qword_101638CF0);
    os_log_type_t v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
    *(void *)(v0 + 664) = v6;
    *(void *)(v0 + 672) = (v3 + 48) & 0xFFFFFFFFFFFFLL | 0x60F0000000000000;
    if (v6(v5, 1, v4) == 1)
    {
      sub_10001DAB4(*(void *)(v0 + 560), &qword_101638CF0);
      goto LABEL_5;
    }
    uint64_t v68 = *(void *)(v0 + 624);
    uint64_t v69 = *(void *)(v0 + 576);
    uint64_t v70 = *(void *)(v0 + 568);
    uint64_t v71 = *(void *)(v0 + 560);
    unint64_t v72 = *(void (**)(uint64_t, uint64_t, uint64_t))(v69 + 32);
    *(void *)(v0 + 680) = v72;
    *(void *)(v0 + 688) = (v69 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
    v72(v68, v71, v70);
    uint64_t v73 = *(void *)(v0 + 640);
    return _swift_task_switch(sub_100CDEB84, v73, 0);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_101637048 != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    sub_100010324(v35, (uint64_t)qword_10170EBB8);
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "No IDSTransportService_ItemSharingCrossAccount available!", v38, 2u);
      swift_slowDealloc();
      swift_release();
    }
    else
    {

      swift_release();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v39 = *(uint64_t (**)(void))(v0 + 8);
    return v39();
  }
}

uint64_t sub_100CDEB84()
{
  uint64_t v1 = *(void *)(v0 + 640);
  uint64_t v2 = *(void *)(v0 + 624);
  swift_beginAccess();
  uint64_t v3 = *(void *)(v1 + 240);
  uint64_t v4 = swift_task_alloc();
  *(void *)(v4 + 16) = v2;
  swift_bridgeObjectRetain();
  *(unsigned char *)(v0 + 862) = sub_100A9F998((uint64_t (*)(char *))sub_1005E4C34, v4, v3);
  *(void *)(v0 + 696) = 0;
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return _swift_task_switch(sub_100CDEC64, 0, 0);
}

uint64_t sub_100CDEC64()
{
  uint64_t v146 = v0;
  if (*((unsigned char *)v0 + 862) == 1)
  {
    if (qword_101637048 != -1) {
      swift_once();
    }
    uint64_t v1 = v0[78];
    uint64_t v2 = v0[77];
    uint64_t v3 = v0[76];
    uint64_t v4 = v0[72];
    uint64_t v5 = v0[71];
    uint64_t v6 = v0[35];
    uint64_t v7 = type metadata accessor for Logger();
    v0[88] = sub_100010324(v7, (uint64_t)qword_10170EBB8);
    uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
    v0[89] = v8;
    v0[90] = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v8(v2, v1, v5);
    Swift::Int v141 = v8;
    v8(v3, v6, v5);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    BOOL v11 = os_log_type_enabled(v9, v10);
    uint64_t v12 = v0[77];
    uint64_t v13 = v0[76];
    uint64_t v14 = v0[72];
    uint64_t v15 = v0[71];
    if (v11)
    {
      uint64_t v130 = v0[76];
      uint64_t v16 = swift_slowAlloc();
      uint64_t v143 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 141558787;
      v0[30] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v16 + 12) = 2081;
      sub_100CF8CA4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[31] = sub_1008FA0F0(v17, v18, (uint64_t *)&v143);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
      v19(v12, v15);
      *(_WORD *)(v16 + 22) = 2160;
      v0[32] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v16 + 32) = 2081;
      uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[33] = sub_1008FA0F0(v20, v21, (uint64_t *)&v143);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v19(v130, v15);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "handleCircleTrust received for newly declined share with %{private,mask.hash}s. Declining it.\nDeclined share identifier %{private,mask.hash}s.", (uint8_t *)v16, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
      v19(v0[77], v0[71]);
      v19(v13, v15);
    }

    uint64_t v52 = v0[87];
    uint64_t v53 = v0[66];
    v141(v53, v0[35], v0[71]);
    sub_1004FB4F4(4, 1, v53, (uint64_t)&v143);
    if (v52)
    {
      uint64_t v54 = v0[78];
      uint64_t v55 = v0[71];
      swift_release();
      swift_release();
      swift_errorRelease();
      v19(v54, v55);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v56 = (uint64_t (*)(void))v0[1];
      return v56();
    }
    else
    {
      uint64_t v94 = v0[36];
      uint64_t v95 = v0[37];
      uint64_t v96 = *((unsigned __int8 *)v0 + 861);
      *((unsigned char *)v0 + 863) = (_BYTE)v143;
      *(_OWORD *)(v0 + 91) = v144;
      v0[93] = v145;
      sub_10000588C(&qword_10163BAB0);
      uint64_t v97 = swift_allocObject();
      v0[94] = v97;
      *(_OWORD *)(v97 + 16) = xmmword_101342130;
      *(unsigned char *)(v97 + 32) = v96;
      *(void *)(v97 + 40) = v94;
      *(void *)(v97 + 48) = v95;
      uint64_t v98 = v0[82];
      swift_bridgeObjectRetain();
      return _swift_task_switch(sub_100CDF8D0, v98, 0);
    }
  }
  else
  {
    (*(void (**)(void, void))(v0[72] + 8))(v0[78], v0[71]);
    uint64_t v22 = v0[65];
    uint64_t v23 = (int *)v0[63];
    uint64_t v24 = v0[38];
    uint64_t v135 = v0[39];
    uint64_t v138 = v0[40];
    uint64_t v26 = v0[36];
    uint64_t v25 = v0[37];
    char v27 = *((unsigned char *)v0 + 861);
    char v28 = *((unsigned char *)v0 + 860);
    uint64_t v29 = v23[12];
    uint64_t v30 = v22 + v23[16];
    unint64_t v116 = v23;
    unint64_t v31 = (void *)(v22 + v23[20]);
    uint64_t v142 = *(void (**)(void, void))(v0[72] + 16);
    ((void (*)(uint64_t, void, void))v142)(v22, v0[35], v0[71]);
    *(unsigned char *)(v22 + v29) = v28;
    *(unsigned char *)uint64_t v30 = v27;
    *(void *)(v30 + 8) = v26;
    *(void *)(v30 + 16) = v25;
    *unint64_t v31 = v24;
    v31[1] = v135;
    int64_t v32 = *(void *)(v138 + 16);
    if (v32)
    {
      uint64_t v136 = v0[57];
      uint64_t v139 = v0[58];
      uint64_t v34 = v0[54];
      uint64_t v33 = v0[55];
      uint64_t v35 = v0[40];
      uint64_t v143 = _swiftEmptyArrayStorage;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1000B85D4(0, v32, 0);
      uint64_t v36 = v35 + ((*(unsigned __int8 *)(v33 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80));
      uint64_t v133 = *(void *)(v33 + 72);
      os_log_type_t v37 = _swiftEmptyArrayStorage;
      do
      {
        uint64_t v38 = v0[71];
        uint64_t v39 = v0[59];
        os_log_type_t v40 = v0;
        uint64_t v41 = v0[56];
        sub_100CF8CEC(v36, v41, type metadata accessor for PeerTrustEnvelopeV1);
        uint64_t v42 = (void *)(v39 + *(int *)(v136 + 48));
        uint64_t v43 = (uint64_t *)(v39 + *(int *)(v136 + 64));
        ((void (*)(uint64_t, uint64_t, uint64_t))v142)(v39, v41, v38);
        uint64_t v44 = (void *)(v41 + *(int *)(v34 + 20));
        uint64_t v45 = v44[1];
        *uint64_t v42 = *v44;
        v42[1] = v45;
        uint64_t v46 = (uint64_t *)(v41 + *(int *)(v34 + 24));
        uint64_t v47 = *v46;
        unint64_t v48 = v46[1];
        *uint64_t v43 = *v46;
        v43[1] = v48;
        swift_bridgeObjectRetain();
        sub_1000361E0(v47, v48);
        sub_100CF8B0C(v41, type metadata accessor for PeerTrustEnvelopeV1);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000B85D4(0, v37[2] + 1, 1);
          os_log_type_t v37 = v143;
        }
        unint64_t v50 = v37[2];
        unint64_t v49 = v37[3];
        uint64_t v0 = v40;
        if (v50 >= v49 >> 1)
        {
          sub_1000B85D4(v49 > 1, v50 + 1, 1);
          os_log_type_t v37 = v143;
        }
        uint64_t v51 = v40[59];
        v37[2] = v50 + 1;
        sub_10001D608(v51, (uint64_t)v37+ ((*(unsigned __int8 *)(v139 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v139 + 80))+ *(void *)(v139 + 72) * v50, &qword_10163A820);
        v36 += v133;
        --v32;
      }
      while (v32);
      uint64_t v134 = v40[37];
      uint64_t v137 = v40[39];
    }
    else
    {
      uint64_t v58 = v0[39];
      uint64_t v134 = v0[37];
      swift_bridgeObjectRetain();
      uint64_t v137 = v58;
      swift_bridgeObjectRetain();
      os_log_type_t v37 = _swiftEmptyArrayStorage;
    }
    v0[104] = v37;
    uint64_t v119 = v0[71];
    uint64_t v114 = v0[64];
    uint64_t v60 = v0[61];
    uint64_t v59 = v0[62];
    uint64_t v61 = (int *)v0[60];
    uint64_t v140 = v0[53];
    uint64_t v131 = v0[51];
    uint64_t v132 = v0[52];
    int v128 = *((_DWORD *)v0 + 212);
    int v129 = *((_DWORD *)v0 + 213);
    uint64_t v127 = v0[50];
    uint64_t v125 = v0[48];
    uint64_t v126 = v0[49];
    uint64_t v123 = v0[46];
    uint64_t v124 = v0[47];
    uint64_t v62 = v0[43];
    uint64_t v103 = v0[44];
    uint64_t v105 = v0[63];
    unint64_t v121 = v0[42];
    uint64_t v122 = v0[45];
    uint64_t v120 = v0[41];
    uint64_t v110 = v0[36];
    uint64_t v112 = v0[38];
    char v109 = *((unsigned char *)v0 + 861);
    char v107 = *((unsigned char *)v0 + 860);
    uint64_t v106 = v0[65];
    uint64_t v63 = (uint64_t *)(v106 + *(int *)(v105 + 112));
    *(void *)(v106 + *(int *)(v105 + 96)) = v37;
    *uint64_t v63 = v120;
    v63[1] = v121;
    uint64_t v64 = v59 + v61[12];
    uint64_t v108 = v64;
    uint64_t v65 = (void *)(v59 + v61[16]);
    uint64_t v102 = (void *)(v59 + v61[20]);
    char v66 = (void *)(v59 + v61[24]);
    char v67 = (void *)(v59 + v61[40]);
    uint64_t v99 = v61[28];
    uint64_t v100 = v61[32];
    uint64_t v101 = v61[36];
    v142(v59, v62);
    sub_10001D074(v103, v64, &qword_101638CF0);
    *uint64_t v65 = v122;
    v65[1] = v123;
    *uint64_t v102 = v124;
    v102[1] = v125;
    *char v66 = v126;
    v66[1] = v127;
    *(_DWORD *)(v59 + v99) = v128;
    *(_DWORD *)(v59 + v100) = v129;
    *(void *)(v59 + v101) = v131;
    *char v67 = v132;
    v67[1] = v140;
    uint64_t v104 = v116[12];
    uint64_t v68 = v114 + v116[16];
    uint64_t v69 = (void *)(v114 + v116[20]);
    uint64_t v70 = (uint64_t *)(v114 + *(int *)(v105 + 112));
    uint64_t v117 = *(int *)(v105 + 96);
    ((void (*)(void))v142)();
    *(unsigned char *)(v114 + v104) = v107;
    *(unsigned char *)uint64_t v68 = v109;
    *(void *)(v68 + 8) = v110;
    *(void *)(v68 + 16) = v134;
    *uint64_t v69 = v112;
    v69[1] = v137;
    *(void *)(v114 + v117) = v37;
    *uint64_t v70 = v120;
    v70[1] = v121;
    uint64_t v71 = v61[12];
    *((_DWORD *)v0 + 214) = v71;
    uint64_t v72 = v60 + v71;
    uint64_t v118 = v60 + v71;
    uint64_t v73 = (void *)(v60 + v61[16]);
    uint64_t v74 = (void *)(v60 + v61[20]);
    uint64_t v75 = (void *)(v60 + v61[24]);
    uint64_t v113 = v61[32];
    uint64_t v115 = v61[28];
    uint64_t v111 = v61[36];
    uint64_t v76 = (void *)(v60 + v61[40]);
    ((void (*)(uint64_t, uint64_t, uint64_t))v142)(v60, v59, v119);
    sub_10001D074(v108, v72, &qword_101638CF0);
    void *v73 = v122;
    v73[1] = v123;
    *uint64_t v74 = v124;
    v74[1] = v125;
    void *v75 = v126;
    v75[1] = v127;
    *(_DWORD *)(v60 + v115) = v128;
    *(_DWORD *)(v60 + v113) = v129;
    *(void *)(v60 + v111) = v131;
    *uint64_t v76 = v132;
    v76[1] = v140;
    sub_1000361E0(v120, v121);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000361E0(v120, v121);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v77 = (void *)swift_task_alloc();
    v0[105] = v77;
    *unint64_t v77 = v0;
    v77[1] = sub_100CE0748;
    uint64_t v78 = v0[64];
    uint64_t v79 = v0[61];
    long long v80 = *(_OWORD *)(v0 + 51);
    int v81 = *((_DWORD *)v0 + 213);
    int v82 = *((_DWORD *)v0 + 212);
    uint64_t v84 = v0[49];
    uint64_t v83 = v0[50];
    long long v85 = *(_OWORD *)(v0 + 47);
    long long v86 = *(_OWORD *)(v0 + 45);
    long long v87 = *(_OWORD *)(v0 + 41);
    uint64_t v88 = v0[38];
    uint64_t v89 = v0[39];
    uint64_t v90 = v0[36];
    uint64_t v91 = v0[37];
    char v92 = *((unsigned char *)v0 + 861);
    char v93 = *((unsigned char *)v0 + 860);
    uint64_t v158 = v0[53];
    long long v157 = v80;
    int v155 = v82;
    int v156 = v81;
    uint64_t v153 = v84;
    uint64_t v154 = v83;
    long long v151 = v86;
    long long v152 = v85;
    uint64_t v149 = v79;
    uint64_t v150 = v118;
    long long v148 = v87;
    return sub_1000F8C98(v78, v93, v92, v90, v91, v88, v89, (uint64_t)v37);
  }
}

uint64_t sub_100CDF8D0()
{
  uint64_t v19 = *(void *)(v0 + 752);
  uint64_t v1 = *(void *)(v0 + 744);
  long long v18 = *(_OWORD *)(v0 + 728);
  char v2 = *(unsigned char *)(v0 + 863);
  uint64_t v3 = *(void *)(v0 + 656);
  uint64_t v4 = *(void *)(v0 + 600);
  uint64_t v5 = *(void *)(v0 + 576);
  uint64_t v6 = *(void *)(v0 + 568);
  uint64_t v7 = *(void *)(v0 + 544);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56);
  *(void *)(v0 + 760) = v8;
  *(void *)(v0 + 768) = (v5 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v8(v7, 1, 1, v6);
  uint64_t v9 = sub_101158790((uint64_t)_swiftEmptyArrayStorage);
  *(void *)(v0 + 776) = v9;
  uint64_t v10 = sub_101158790((uint64_t)_swiftEmptyArrayStorage);
  *(void *)(v0 + 784) = v10;
  UUID.init()();
  uint64_t v11 = sub_100CF8CA4(&qword_10165C980, 255, (void (*)(uint64_t))type metadata accessor for IDSTransportService_ItemSharingCrossAccount);
  uint64_t v12 = swift_task_alloc();
  *(void *)(v0 + 792) = v12;
  *(void *)(v12 + 16) = v3;
  *(void *)(v12 + 24) = v4;
  *(unsigned char *)(v12 + 32) = v2;
  *(_OWORD *)(v12 + 40) = v18;
  *(void *)(v12 + 56) = v1;
  *(void *)(v12 + 64) = v19;
  *(void *)(v12 + 72) = v7;
  *(void *)(v12 + 80) = 0;
  *(_WORD *)(v12 + 88) = 1;
  *(void *)(v12 + 96) = v9;
  *(void *)(v12 + 104) = v10;
  *(void *)(v12 + 112) = 0;
  *(void *)(v12 + 120) = 0;
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v0 + 800) = v13;
  *uint64_t v13 = v0;
  v13[1] = sub_100CDFAC8;
  uint64_t v14 = *(void *)(v0 + 656);
  uint64_t v15 = *(void *)(v0 + 568);
  uint64_t v16 = *(void *)(v0 + 552);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v16, v14, v11, 0xD000000000000083, 0x8000000101416CB0, sub_100CF717C, v12, v15);
}

uint64_t sub_100CDFAC8()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 808) = v0;
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 656);
  if (v0) {
    uint64_t v4 = sub_100CE01A0;
  }
  else {
    uint64_t v4 = sub_100CDFC0C;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100CDFC0C()
{
  uint64_t v1 = v0[75];
  uint64_t v2 = v0[71];
  uint64_t v3 = v0[68];
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v0[72] + 8);
  v0[102] = v4;
  v4(v1, v2);
  sub_10001DAB4(v3, &qword_101638CF0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100CDFCCC, 0, 0);
}

uint64_t sub_100CDFCCC()
{
  uint64_t v34 = v0;
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 816);
  uint64_t v2 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 664);
  uint64_t v3 = *(void *)(v0 + 568);
  uint64_t v4 = *(void *)(v0 + 552);
  uint64_t v5 = *(void *)(v0 + 536);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v0 + 760))(v4, 0, 1, v3);
  sub_10001D074(v4, v5, &qword_101638CF0);
  if (v2(v5, 1, v3) == 1)
  {
    unint64_t v6 = *(void *)(v0 + 744);
    uint64_t v7 = *(void *)(v0 + 736);
    uint64_t v8 = *(void *)(v0 + 624);
    uint64_t v9 = *(void *)(v0 + 568);
    uint64_t v10 = *(void *)(v0 + 552);
    uint64_t v11 = *(void *)(v0 + 536);
    swift_release();
    sub_10001CFB8(v7, v6);
    swift_release();
    sub_10001DAB4(v10, &qword_101638CF0);
    v1(v8, v9);
    sub_10001DAB4(v11, &qword_101638CF0);
  }
  else
  {
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 712);
    uint64_t v13 = *(void *)(v0 + 592);
    uint64_t v14 = *(void *)(v0 + 584);
    uint64_t v15 = *(void *)(v0 + 568);
    (*(void (**)(uint64_t, void, uint64_t))(v0 + 680))(v13, *(void *)(v0 + 536), v15);
    v12(v14, v13, v15);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    BOOL v18 = os_log_type_enabled(v16, v17);
    uint64_t v31 = *(void *)(v0 + 736);
    unint64_t v32 = *(void *)(v0 + 744);
    uint64_t v19 = *(void *)(v0 + 624);
    uint64_t v20 = *(void *)(v0 + 592);
    uint64_t v21 = *(void *)(v0 + 584);
    uint64_t v22 = *(void *)(v0 + 568);
    uint64_t v23 = *(void *)(v0 + 552);
    if (v18)
    {
      uint64_t v30 = *(void *)(v0 + 624);
      uint64_t v24 = swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      *(_DWORD *)uint64_t v24 = 141558275;
      *(void *)(v0 + 224) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v24 + 12) = 2081;
      sub_100CF8CA4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 232) = sub_1008FA0F0(v25, v26, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v1(v21, v22);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Decline message identifier is %{private,mask.hash}s.", (uint8_t *)v24, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();
      sub_10001CFB8(v31, v32);
      swift_release();

      v1(v20, v22);
      sub_10001DAB4(v23, &qword_101638CF0);
      uint64_t v27 = v30;
    }
    else
    {
      swift_release();
      sub_10001CFB8(v31, v32);
      swift_release();

      v1(v21, v22);
      v1(v20, v22);
      sub_10001DAB4(v23, &qword_101638CF0);
      uint64_t v27 = v19;
    }
    v1(v27, v22);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v28 = *(uint64_t (**)(void))(v0 + 8);
  return v28();
}

uint64_t sub_100CE01A0()
{
  uint64_t v1 = v0[75];
  uint64_t v2 = v0[71];
  uint64_t v3 = v0[68];
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v0[72] + 8);
  v0[103] = v4;
  v4(v1, v2);
  sub_10001DAB4(v3, &qword_101638CF0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_errorRelease();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100CE0274, 0, 0);
}

uint64_t sub_100CE0274()
{
  uint64_t v34 = v0;
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 824);
  uint64_t v2 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 664);
  uint64_t v3 = *(void *)(v0 + 568);
  uint64_t v4 = *(void *)(v0 + 552);
  uint64_t v5 = *(void *)(v0 + 536);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 760))(v4, 1, 1, v3);
  sub_10001D074(v4, v5, &qword_101638CF0);
  if (v2(v5, 1, v3) == 1)
  {
    unint64_t v6 = *(void *)(v0 + 744);
    uint64_t v7 = *(void *)(v0 + 736);
    uint64_t v8 = *(void *)(v0 + 624);
    uint64_t v9 = *(void *)(v0 + 568);
    uint64_t v10 = *(void *)(v0 + 552);
    uint64_t v11 = *(void *)(v0 + 536);
    swift_release();
    sub_10001CFB8(v7, v6);
    swift_release();
    sub_10001DAB4(v10, &qword_101638CF0);
    v1(v8, v9);
    sub_10001DAB4(v11, &qword_101638CF0);
  }
  else
  {
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 712);
    uint64_t v13 = *(void *)(v0 + 592);
    uint64_t v14 = *(void *)(v0 + 584);
    uint64_t v15 = *(void *)(v0 + 568);
    (*(void (**)(uint64_t, void, uint64_t))(v0 + 680))(v13, *(void *)(v0 + 536), v15);
    v12(v14, v13, v15);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    BOOL v18 = os_log_type_enabled(v16, v17);
    uint64_t v31 = *(void *)(v0 + 736);
    unint64_t v32 = *(void *)(v0 + 744);
    uint64_t v19 = *(void *)(v0 + 624);
    uint64_t v20 = *(void *)(v0 + 592);
    uint64_t v21 = *(void *)(v0 + 584);
    uint64_t v22 = *(void *)(v0 + 568);
    uint64_t v23 = *(void *)(v0 + 552);
    if (v18)
    {
      uint64_t v30 = *(void *)(v0 + 624);
      uint64_t v24 = swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      *(_DWORD *)uint64_t v24 = 141558275;
      *(void *)(v0 + 224) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v24 + 12) = 2081;
      sub_100CF8CA4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 232) = sub_1008FA0F0(v25, v26, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v1(v21, v22);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Decline message identifier is %{private,mask.hash}s.", (uint8_t *)v24, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();
      sub_10001CFB8(v31, v32);
      swift_release();

      v1(v20, v22);
      sub_10001DAB4(v23, &qword_101638CF0);
      uint64_t v27 = v30;
    }
    else
    {
      swift_release();
      sub_10001CFB8(v31, v32);
      swift_release();

      v1(v21, v22);
      v1(v20, v22);
      sub_10001DAB4(v23, &qword_101638CF0);
      uint64_t v27 = v19;
    }
    v1(v27, v22);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v28 = *(uint64_t (**)(void))(v0 + 8);
  return v28();
}

uint64_t sub_100CE0748()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v4 = *(void *)(v2 + 328);
    unint64_t v3 = *(void *)(v2 + 336);
    swift_errorRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001CFB8(v4, v3);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_100CE0B28;
  }
  else
  {
    uint64_t v6 = *(void *)(v2 + 576);
    uint64_t v7 = *(void *)(v2 + 568);
    uint64_t v8 = *(void *)(v2 + 488);
    uint64_t v11 = v8 + *(int *)(v2 + 856);
    uint64_t v12 = *(void *)(v2 + 512);
    sub_10001CFB8(*(void *)(v2 + 328), *(void *)(v2 + 336));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001DAB4(v11, &qword_101638CF0);
    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v9(v8, v7);
    v9(v12, v7);
    uint64_t v5 = sub_100CE099C;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100CE099C()
{
  uint64_t v1 = v0[65];
  uint64_t v2 = v0[62];
  swift_release();
  swift_release();
  sub_10001DAB4(v2, &qword_10163B938);
  sub_10001DAB4(v1, &qword_10163B940);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_100CE0B28()
{
  uint64_t v1 = *(void *)(v0 + 576);
  uint64_t v2 = *(void *)(v0 + 568);
  uint64_t v3 = *(void *)(v0 + 520);
  uint64_t v4 = *(void *)(v0 + 512);
  uint64_t v6 = *(void *)(v0 + 488);
  uint64_t v5 = *(void *)(v0 + 496);
  uint64_t v7 = v6 + *(int *)(v0 + 856);
  swift_release();
  swift_release();
  sub_10001DAB4(v5, &qword_10163B938);
  sub_10001DAB4(v3, &qword_10163B940);
  sub_10001DAB4(v7, &qword_101638CF0);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v1 + 8);
  v8(v6, v2);
  v8(v4, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
  return v9();
}

uint64_t sub_100CE0D04(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *v4;
  uint64_t v15 = a3;
  uint64_t v16 = v8;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9);
  type metadata accessor for Transaction();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v4;
  *(unsigned char *)(v13 + 24) = a2;
  *(void *)(v13 + 32) = v15;
  *(void *)(v13 + 40) = a4;
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v13 + v12, (char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  *(void *)(v13 + ((v11 + v12 + 7) & 0xFFFFFFFFFFFFFFF8)) = v16;
  swift_retain();
  swift_bridgeObjectRetain();
  static Transaction.asyncTask(name:block:)();
  return swift_release();
}

uint64_t sub_100CE0ECC(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 304) = a5;
  *(void *)(v6 + 312) = a6;
  *(void *)(v6 + 288) = a3;
  *(void *)(v6 + 296) = a4;
  *(unsigned char *)(v6 + 408) = a2;
  *(void *)(v6 + 280) = a1;
  uint64_t v7 = type metadata accessor for UUID();
  *(void *)(v6 + 320) = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  *(void *)(v6 + 328) = v8;
  *(void *)(v6 + 336) = *(void *)(v8 + 64);
  *(void *)(v6 + 344) = swift_task_alloc();
  *(void *)(v6 + 352) = swift_task_alloc();
  return _swift_task_switch(sub_100CE0FB0, 0, 0);
}

uint64_t sub_100CE0FB0()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 96, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 120))
  {
    sub_10001CEB0((long long *)(v0 + 96), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_1016390D8 + dword_1016390D8);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 360) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100CE10EC;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100CE10EC(uint64_t a1)
{
  *(void *)(*(void *)v1 + 368) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100CE11EC, 0, 0);
}

uint64_t sub_100CE11EC()
{
  uint64_t v1 = *(void *)(v0 + 368);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  if (v1)
  {
    uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 176, (uint64_t *)&unk_101638D30);
    if (*(void *)(v0 + 200))
    {
      sub_10001CEB0((long long *)(v0 + 176), v0 + 136);
      sub_10001CD44((void *)(v0 + 136), *(void *)(v0 + 160));
      uint64_t v9 = (uint64_t (__cdecl *)())((char *)&dword_1016390F0 + dword_1016390F0);
      uint64_t v3 = (void *)swift_task_alloc();
      *(void *)(v0 + 376) = v3;
      void *v3 = v0;
      v3[1] = sub_100CE13E4;
      return v9();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    if (qword_101637048 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_10170EBB8);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "No BeaconStoreActor available!", v7, 2u);
      swift_slowDealloc();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
    return v8();
  }
  return result;
}

uint64_t sub_100CE13E4(uint64_t a1)
{
  *(void *)(*(void *)v1 + 384) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100CE14E4, 0, 0);
}

uint64_t sub_100CE14E4()
{
  uint64_t v1 = *(void *)(v0 + 384);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 136);
  if (v1)
  {
    uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
    if (*(void *)(v0 + 80))
    {
      sub_10001CEB0((long long *)(v0 + 56), v0 + 216);
      sub_10001CD44((void *)(v0 + 216), *(void *)(v0 + 240));
      uint64_t v9 = (uint64_t (*)(void))((char *)&dword_1016390A8 + dword_1016390A8);
      uint64_t v3 = (void *)swift_task_alloc();
      *(void *)(v0 + 392) = v3;
      void *v3 = v0;
      v3[1] = sub_100CE16F0;
      return v9();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    if (qword_101637048 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_10170EBB8);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "No PeerTrustService available!", v7, 2u);
      swift_slowDealloc();
    }

    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
    return v8();
  }
  return result;
}

uint64_t sub_100CE16F0(uint64_t a1)
{
  *(void *)(*(void *)v1 + 400) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100CE17F0, 0, 0);
}

uint64_t sub_100CE17F0()
{
  uint64_t v1 = v0 + 216;
  uint64_t v2 = *(void *)(v0 + 400);
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 368);
    uint64_t v4 = *(void *)(v0 + 352);
    uint64_t v5 = *(void *)(v0 + 328);
    uint64_t v6 = *(void *)(v0 + 336);
    uint64_t v7 = *(void *)(v0 + 320);
    uint64_t v20 = *(void *)(v0 + 384);
    uint64_t v21 = *(void *)(v0 + 312);
    uint64_t v9 = *(void *)(v0 + 296);
    uint64_t v8 = *(void *)(v0 + 304);
    char v18 = *(unsigned char *)(v0 + 408);
    uint64_t v19 = *(void *)(v0 + 288);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    type metadata accessor for WorkItemQueue.WorkItem();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v8, v7);
    unint64_t v10 = (*(unsigned __int8 *)(v5 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = v2;
    *(unsigned char *)(v11 + 24) = v18;
    *(void *)(v11 + 32) = v19;
    *(void *)(v11 + 40) = v9;
    *(void *)(v11 + 48) = v20;
    *(void *)(v11 + 56) = v3;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v5 + 32))(v11 + v10, v4, v7);
    *(void *)(v11 + ((v6 + v10 + 7) & 0xFFFFFFFFFFFFFFF8)) = v21;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    UUID.init()();
    WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)();
    dispatch thunk of WorkItemQueue.enqueue(_:)();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_101637048 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100010324(v12, (uint64_t)qword_10170EBB8);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "No FamilyCircleService available!", v15, 2u);
      swift_slowDealloc();
    }

    swift_release();
  }
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
  return v16();
}

uint64_t sub_100CE1AD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v7 + 168) = a6;
  *(void *)(v7 + 176) = a7;
  *(void *)(v7 + 152) = a4;
  *(void *)(v7 + 160) = a5;
  *(unsigned char *)(v7 + 472) = a2;
  *(void *)(v7 + 136) = a1;
  *(void *)(v7 + 144) = a3;
  sub_10000588C(&qword_101639E88);
  *(void *)(v7 + 184) = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_101638D10);
  *(void *)(v7 + 192) = swift_task_alloc();
  uint64_t v11 = type metadata accessor for OwnerSharingCircle();
  *(void *)(v7 + 200) = v11;
  *(void *)(v7 + 208) = *(void *)(v11 - 8);
  *(void *)(v7 + 216) = swift_task_alloc();
  *(void *)(v7 + 224) = swift_task_alloc();
  *(void *)(v7 + 232) = swift_task_alloc();
  *(void *)(v7 + 240) = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_1016607D0);
  *(void *)(v7 + 248) = swift_task_alloc();
  sub_10000588C(&qword_101638CF0);
  *(void *)(v7 + 256) = swift_task_alloc();
  uint64_t v12 = type metadata accessor for UUID();
  *(void *)(v7 + 264) = v12;
  *(void *)(v7 + 272) = *(void *)(v12 - 8);
  *(void *)(v7 + 280) = swift_task_alloc();
  *(void *)(v7 + 288) = swift_task_alloc();
  *(void *)(v7 + 296) = swift_task_alloc();
  *(void *)(v7 + 304) = swift_task_alloc();
  *(void *)(v7 + 312) = swift_task_alloc();
  uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_10165CF98 + dword_10165CF98);
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v7 + 320) = v13;
  *uint64_t v13 = v7;
  v13[1] = sub_100CE1D7C;
  return v15(a2, a3, a4);
}

uint64_t sub_100CE1D7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[41] = a2;
  v4[42] = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v5 = sub_100CE1F40;
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = v4[17];
    uint64_t v5 = sub_100CE1E98;
  }
  return _swift_task_switch(v5, v6, 0);
}

uint64_t sub_100CE1E98()
{
  if (*(void *)(v0 + 328)) {
    swift_bridgeObjectRelease();
  }
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 344) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100CE2300;
  uint64_t v2 = *(void *)(v0 + 152);
  uint64_t v3 = *(void *)(v0 + 144);
  uint64_t v4 = *(unsigned __int8 *)(v0 + 472);
  return sub_100EA2DF0(v4, v3, v2);
}

uint64_t sub_100CE1F40()
{
  uint64_t v20 = v0;
  if (qword_101637048 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[34];
  uint64_t v1 = v0[35];
  uint64_t v3 = v0[33];
  uint64_t v4 = v0[22];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170EBB8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = v0[34];
  uint64_t v9 = v0[35];
  uint64_t v11 = v0[33];
  if (v8)
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 141558531;
    v0[7] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2081;
    sub_100CF8CA4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[5] = sub_1008FA0F0(v13, v14, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    *(_WORD *)(v12 + 22) = 2082;
    swift_getErrorValue();
    uint64_t v15 = Error.localizedDescription.getter();
    v0[8] = sub_1008FA0F0(v15, v16, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Failure on handleCircleTrustAck: %{private,mask.hash}s, error: %{public}s.", (uint8_t *)v12, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v17 = (uint64_t (*)(void))v0[1];
  return v17();
}

uint64_t sub_100CE2300(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 352) = a1;
  *(void *)(v3 + 360) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_100CE40E4;
  }
  else {
    uint64_t v4 = sub_100CE2414;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100CE2414()
{
  uint64_t v1 = v0[44];
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = type metadata accessor for OwnerPeerTrust();
  uint64_t v4 = *(void *)(v3 - 8);
  if (v2)
  {
    sub_100CF8CEC(v1+ ((*(unsigned __int8 *)(*(void *)(v3 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v3 - 8) + 80)), v0[31], (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = 1;
  }
  uint64_t v6 = v0[31];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v6, v5, 1, v3);
  swift_bridgeObjectRelease();
  int v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v6, 1, v3);
  uint64_t v8 = v0[33];
  uint64_t v9 = v0[34];
  uint64_t v11 = v0[31];
  uint64_t v10 = v0[32];
  if (v7 == 1)
  {
    sub_10001DAB4(v0[31], (uint64_t *)&unk_1016607D0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v10, 1, 1, v8);
LABEL_7:
    sub_10001DAB4(v0[32], &qword_101638CF0);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v14 = (uint64_t (*)(void))v0[1];
    return v14();
  }
  uint64_t v12 = v11 + *(int *)(v3 + 20);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
  v0[46] = v13;
  v0[47] = (v9 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v13(v10, v12, v8);
  sub_100CF8B0C(v11, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v10, 0, 1, v8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v10, 1, v8) == 1) {
    goto LABEL_7;
  }
  uint64_t v16 = v0[21];
  (*(void (**)(void, void, void))(v0[34] + 32))(v0[39], v0[32], v0[33]);
  return _swift_task_switch(sub_100CE2734, v16, 0);
}

uint64_t sub_100CE2734()
{
  *(void *)(v0 + 384) = *(void *)(*(void *)(v0 + 168) + 136);
  swift_retain();
  return _swift_task_switch(sub_100CE27A8, 0, 0);
}

uint64_t sub_100CE27A8()
{
  uint64_t v1 = v0[48];
  uint64_t v2 = v0[21];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[49] = v3;
  v3[2] = v1;
  v3[3] = sub_100075250;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[50] = v4;
  uint64_t v5 = sub_10000588C(&qword_10163B8C0);
  void *v4 = v0;
  v4[1] = sub_100CE28C4;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 9, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100075258, v3, v5);
}

uint64_t sub_100CE28C4()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 408) = *(void *)(v1 + 72);
  return _swift_task_switch(sub_100CE2A20, 0, 0);
}

uint64_t sub_100CE2A20()
{
  uint64_t v90 = v0;
  uint64_t v1 = v0[51];
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v0[26];
    uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v5 = *(void *)(v3 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_100CF8CEC(v4, v0[29], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      if (static UUID.== infix(_:_:)()) {
        break;
      }
      sub_100CF8B0C(v0[29], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      v4 += v5;
      if (!--v2)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    uint64_t v7 = v0[29];
    uint64_t v8 = v0[24];
    swift_bridgeObjectRelease();
    sub_100CF89F4(v7, v8, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v6 = 0;
  }
  else
  {
LABEL_6:
    uint64_t v6 = 1;
  }
  uint64_t v9 = v0[25];
  uint64_t v10 = v0[26];
  uint64_t v11 = v0[24];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v11, v6, 1, v9);
  swift_bridgeObjectRelease();
  int v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v11, 1, v9);
  uint64_t v13 = v0[24];
  if (v12 == 1)
  {
    (*(void (**)(void, void))(v0[34] + 8))(v0[39], v0[33]);
    sub_10001DAB4(v13, (uint64_t *)&unk_101638D10);
LABEL_31:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v65 = (uint64_t (*)(void))v0[1];
    return v65();
  }
  uint64_t v14 = v0[41];
  uint64_t v15 = v0[30];
  uint64_t v16 = v0[28];
  sub_100CF89F4(v0[24], v15, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  sub_100CF8CEC(v15, v16, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  uint64_t v17 = v0[28];
  if (v14)
  {
    sub_100CF8B0C(v0[28], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  }
  else
  {
    uint64_t v18 = v0[25];
    uint64_t v19 = sub_101158C68((uint64_t)&off_1015A59F0);
    LOBYTE(v18) = sub_100DC6050(*(unsigned __int8 *)(v17 + *(int *)(v18 + 28)), v19);
    swift_bridgeObjectRelease();
    sub_100CF8B0C(v17, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    if (v18)
    {
      if (qword_101637048 != -1) {
        swift_once();
      }
      uint64_t v20 = type metadata accessor for Logger();
      sub_100010324(v20, (uint64_t)qword_10170EBB8);
      uint64_t v21 = Logger.logObject.getter();
      os_log_type_t v22 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v21, v22))
      {
        uint64_t v23 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v23 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "Ignoring incoming UTFS message from non-family member", v23, 2u);
        swift_slowDealloc();
      }
      uint64_t v24 = v0[39];
      uint64_t v25 = v0[33];
      uint64_t v26 = v0[34];
      uint64_t v27 = v0[30];

      (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v24, v25);
      sub_100CF8B0C(v27, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      goto LABEL_31;
    }
  }
  uint64_t v28 = *(void *)(v0[30] + *(int *)(v0[25] + 32));
  v0[10] = v28;
  uint64_t v29 = *(void *)(v28 + 16);
  swift_bridgeObjectRetain();
  if (!v29 || (unint64_t v30 = sub_1007240CC(v0[39]), (v31 & 1) == 0) || *(unsigned char *)(*(void *)(v28 + 56) + v30) != 3)
  {
    if (qword_101637048 != -1) {
      swift_once();
    }
    unint64_t v48 = (void (*)(uint64_t, uint64_t, uint64_t))v0[46];
    uint64_t v49 = v0[39];
    uint64_t v50 = v0[36];
    uint64_t v51 = v0[33];
    uint64_t v52 = type metadata accessor for Logger();
    sub_100010324(v52, (uint64_t)qword_10170EBB8);
    v48(v50, v49, v51);
    uint64_t v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.error.getter();
    BOOL v55 = os_log_type_enabled(v53, v54);
    uint64_t v56 = v0[39];
    uint64_t v57 = v0[36];
    uint64_t v58 = v0[33];
    uint64_t v59 = v0[34];
    if (v55)
    {
      uint64_t v60 = swift_slowAlloc();
      v89[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v60 = 141558275;
      v0[11] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v60 + 12) = 2081;
      sub_100CF8CA4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v61 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[12] = sub_1008FA0F0(v61, v62, v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v63 = *(void (**)(uint64_t, uint64_t))(v59 + 8);
      v63(v57, v58);
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "Member already acked: %{private,mask.hash}s!", (uint8_t *)v60, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v63(v56, v58);
    }
    else
    {

      uint64_t v64 = *(void (**)(uint64_t, uint64_t))(v59 + 8);
      v64(v57, v58);
      v64(v56, v58);
    }
    sub_100CF8B0C(v0[30], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    swift_bridgeObjectRelease();
    goto LABEL_31;
  }
  unint64_t v32 = v0 + 10;
  uint64_t v33 = v0[38];
  uint64_t v34 = v0[33];
  uint64_t v35 = v0[34];
  ((void (*)(uint64_t, void, uint64_t))v0[46])(v33, v0[39], v34);
  uint64_t v36 = v0[10];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v89[0] = v36;
  sub_10016CA2C(0, v33, isUniquelyReferenced_nonNull_native);
  v0[10] = v36;
  swift_bridgeObjectRelease();
  uint64_t v38 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
  v0[52] = v38;
  v0[53] = (v35 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
  v38(v33, v34);
  uint64_t v39 = &qword_101637000;
  if (qword_101637048 != -1) {
    swift_once();
  }
  uint64_t v40 = v0[30];
  uint64_t v41 = v0[27];
  uint64_t v88 = type metadata accessor for Logger();
  v0[54] = sub_100010324(v88, (uint64_t)qword_10170EBB8);
  sub_100CF8CEC(v40, v41, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  uint64_t v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v42, v43))
  {
    uint64_t v44 = v0[27];
    uint64_t v45 = swift_slowAlloc();
    v89[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v45 = 141558275;
    v0[15] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v45 + 12) = 2081;
    sub_100CF8CA4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v46 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[16] = sub_1008FA0F0(v46, v47, v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100CF8B0C(v44, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "Data update on handle circle trust ack. Update %{private,mask.hash}s", (uint8_t *)v45, 0x16u);
    swift_arrayDestroy();
    uint64_t v39 = &qword_101637000;
    swift_slowDealloc();
    unint64_t v32 = v0 + 10;
    swift_slowDealloc();
  }
  else
  {
    sub_100CF8B0C(v0[27], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  }

  uint64_t v67 = v0[45];
  uint64_t v68 = v0[30];
  uint64_t v69 = v0[23];
  uint64_t v70 = swift_task_alloc();
  *(void *)(v70 + 16) = v68;
  *(void *)(v70 + 24) = v32;
  sub_100EE07C0((void (*)(uint64_t, _UNKNOWN **))sub_100CF75B4, v69);
  if (v67)
  {
    uint64_t v71 = v0[30];
    v38(v0[39], v0[33]);
    swift_task_dealloc();
    sub_100CF8B0C(v71, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    swift_bridgeObjectRelease();
    if (v39[9] != -1) {
      swift_once();
    }
    uint64_t v73 = v0[34];
    uint64_t v72 = v0[35];
    uint64_t v74 = v0[33];
    uint64_t v75 = v0[22];
    sub_100010324(v88, (uint64_t)qword_10170EBB8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v73 + 16))(v72, v75, v74);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v76 = Logger.logObject.getter();
    os_log_type_t v77 = static os_log_type_t.error.getter();
    BOOL v78 = os_log_type_enabled(v76, v77);
    uint64_t v80 = v0[34];
    uint64_t v79 = v0[35];
    uint64_t v81 = v0[33];
    if (v78)
    {
      uint64_t v82 = swift_slowAlloc();
      v89[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v82 = 141558531;
      v0[7] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v82 + 12) = 2081;
      sub_100CF8CA4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v83 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[5] = sub_1008FA0F0(v83, v84, v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v79, v81);
      *(_WORD *)(v82 + 22) = 2082;
      swift_getErrorValue();
      uint64_t v85 = Error.localizedDescription.getter();
      v0[8] = sub_1008FA0F0(v85, v86, v89);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v76, v77, "Failure on handleCircleTrustAck: %{private,mask.hash}s, error: %{public}s.", (uint8_t *)v82, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      (*(void (**)(uint64_t, uint64_t))(v80 + 8))(v79, v81);
      swift_errorRelease();
      swift_errorRelease();
    }
    goto LABEL_31;
  }
  uint64_t v87 = v0[21];
  swift_task_dealloc();
  return _swift_task_switch(sub_100CE3704, v87, 0);
}

uint64_t sub_100CE3704()
{
  *(void *)(v0 + 440) = *(void *)(*(void *)(v0 + 168) + 128);
  return _swift_task_switch(sub_100CE372C, 0, 0);
}

uint64_t sub_100CE372C()
{
  uint64_t v1 = v0[55];
  uint64_t v2 = v0[23];
  uint64_t v3 = swift_task_alloc();
  v0[56] = v3;
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[57] = v4;
  void *v4 = v0;
  v4[1] = sub_100CE3824;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v4, 0, 0, 0xD000000000000011, 0x80000001013F27F0, sub_100074FFC, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_100CE3824()
{
  *(void *)(*(void *)v1 + 464) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100CE3C6C;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_100CE3940;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100CE3940()
{
  uint64_t v20 = v0;
  (*(void (**)(void, void, void))(v0 + 368))(*(void *)(v0 + 296), *(void *)(v0 + 176), *(void *)(v0 + 264));
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v0 + 416);
    uint64_t v3 = *(void *)(v0 + 296);
    uint64_t v4 = *(void *)(v0 + 264);
    uint64_t v17 = *(void *)(v0 + 184);
    uint64_t v18 = *(void *)(v0 + 312);
    uint64_t v5 = swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    *(void *)(v0 + 104) = 1752392040;
    uint64_t v19 = v6;
    *(_DWORD *)uint64_t v5 = 141558275;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v5 + 12) = 2081;
    sub_100CF8CA4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 112) = sub_1008FA0F0(v7, v8, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v16(v3, v4);
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Updated circle member %{private,mask.hash}s to unaccepted.", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    sub_10001DAB4(v17, &qword_101639E88);
    v16(v18, v4);
  }
  else
  {
    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v0 + 416);
    uint64_t v10 = *(void *)(v0 + 312);
    uint64_t v11 = *(void *)(v0 + 296);
    uint64_t v12 = *(void *)(v0 + 264);
    uint64_t v13 = *(void *)(v0 + 184);

    v9(v11, v12);
    sub_10001DAB4(v13, &qword_101639E88);
    v9(v10, v12);
  }
  sub_100CF8B0C(*(void *)(v0 + 240), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
  return v14();
}

uint64_t sub_100CE3C6C()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100CE3CD4, 0, 0);
}

uint64_t sub_100CE3CD4()
{
  uint64_t v24 = v0;
  uint64_t v1 = (void (*)(uint64_t, uint64_t))v0[52];
  uint64_t v2 = v0[39];
  uint64_t v3 = v0[33];
  uint64_t v4 = v0[30];
  sub_10001DAB4(v0[23], &qword_101639E88);
  v1(v2, v3);
  sub_100CF8B0C(v4, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  swift_bridgeObjectRelease();
  if (qword_101637048 != -1) {
    swift_once();
  }
  uint64_t v6 = v0[34];
  uint64_t v5 = v0[35];
  uint64_t v7 = v0[33];
  uint64_t v8 = v0[22];
  uint64_t v9 = type metadata accessor for Logger();
  sub_100010324(v9, (uint64_t)qword_10170EBB8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v5, v8, v7);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.error.getter();
  BOOL v12 = os_log_type_enabled(v10, v11);
  uint64_t v14 = v0[34];
  uint64_t v13 = v0[35];
  uint64_t v15 = v0[33];
  if (v12)
  {
    uint64_t v16 = swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 141558531;
    v0[7] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 12) = 2081;
    sub_100CF8CA4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[5] = sub_1008FA0F0(v17, v18, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
    *(_WORD *)(v16 + 22) = 2082;
    swift_getErrorValue();
    uint64_t v19 = Error.localizedDescription.getter();
    v0[8] = sub_1008FA0F0(v19, v20, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Failure on handleCircleTrustAck: %{private,mask.hash}s, error: %{public}s.", (uint8_t *)v16, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v21 = (uint64_t (*)(void))v0[1];
  return v21();
}

uint64_t sub_100CE40E4()
{
  unint64_t v20 = v0;
  if (qword_101637048 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[34];
  uint64_t v1 = v0[35];
  uint64_t v3 = v0[33];
  uint64_t v4 = v0[22];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170EBB8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = v0[34];
  uint64_t v9 = v0[35];
  uint64_t v11 = v0[33];
  if (v8)
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 141558531;
    v0[7] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2081;
    sub_100CF8CA4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[5] = sub_1008FA0F0(v13, v14, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    *(_WORD *)(v12 + 22) = 2082;
    swift_getErrorValue();
    uint64_t v15 = Error.localizedDescription.getter();
    v0[8] = sub_1008FA0F0(v15, v16, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Failure on handleCircleTrustAck: %{private,mask.hash}s, error: %{public}s.", (uint8_t *)v12, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v17 = (uint64_t (*)(void))v0[1];
  return v17();
}

uint64_t sub_100CE44A4(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  return sub_100CE836C(a1, a2, a3, a4, (uint64_t)&unk_1015F1108, (uint64_t)"CircleTrustService.handleCircleTrustAccept", 42, (uint64_t)&unk_10165CCD0);
}

uint64_t sub_100CE44D0(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 40) = a5;
  *(void *)(v6 + 48) = a6;
  *(void *)(v6 + 24) = a2;
  *(void *)(v6 + 32) = a4;
  *(unsigned char *)(v6 + 96) = a3;
  *(void *)(v6 + 16) = a1;
  uint64_t v7 = type metadata accessor for UUID();
  *(void *)(v6 + 56) = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  *(void *)(v6 + 64) = v8;
  *(void *)(v6 + 72) = *(void *)(v8 + 64);
  *(void *)(v6 + 80) = swift_task_alloc();
  *(void *)(v6 + 88) = swift_task_alloc();
  return _swift_task_switch(sub_100CE45B4, 0, 0);
}

uint64_t sub_100CE45B4()
{
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 56);
  uint64_t v16 = *(void *)(v0 + 40);
  uint64_t v17 = *(void *)(v0 + 48);
  uint64_t v5 = *(void *)(v0 + 24);
  uint64_t v15 = *(void *)(v0 + 32);
  char v14 = *(unsigned char *)(v0 + 96);
  uint64_t v6 = *(void *)(v0 + 16);
  type metadata accessor for WorkItemQueue.WorkItem();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v5, v4);
  unint64_t v7 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v8 = (v3 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = (v8 + 31) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v2 + 32))(v10 + v7, v1, v4);
  unint64_t v11 = v10 + v8;
  *(unsigned char *)unint64_t v11 = v14;
  *(void *)(v11 + 8) = v15;
  *(void *)(v11 + 16) = v16;
  *(void *)(v10 + v9) = v6;
  *(void *)(v10 + ((v9 + 15) & 0xFFFFFFFFFFFFFFF8)) = v17;
  swift_bridgeObjectRetain();
  swift_retain();
  UUID.init()();
  WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)();
  dispatch thunk of WorkItemQueue.enqueue(_:)();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

uint64_t sub_100CE477C(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 408) = a4;
  *(void *)(v5 + 416) = a5;
  *(unsigned char *)(v5 + 756) = a2;
  *(void *)(v5 + 392) = a1;
  *(void *)(v5 + 400) = a3;
  sub_10000588C(&qword_101639E88);
  *(void *)(v5 + 424) = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_1016607D0);
  *(void *)(v5 + 432) = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_101638D10);
  *(void *)(v5 + 440) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for UUID();
  *(void *)(v5 + 448) = v6;
  *(void *)(v5 + 456) = *(void *)(v6 - 8);
  *(void *)(v5 + 464) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for OwnerPeerTrust();
  *(void *)(v5 + 472) = v7;
  *(void *)(v5 + 480) = *(void *)(v7 - 8);
  *(void *)(v5 + 488) = swift_task_alloc();
  *(void *)(v5 + 496) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for OwnerSharingCircle();
  *(void *)(v5 + 504) = v8;
  *(void *)(v5 + 512) = *(void *)(v8 - 8);
  *(void *)(v5 + 520) = swift_task_alloc();
  *(void *)(v5 + 528) = swift_task_alloc();
  *(void *)(v5 + 536) = swift_task_alloc();
  return _swift_task_switch(sub_100CE49B8, 0, 0);
}

uint64_t sub_100CE49B8()
{
  unint64_t v20 = v0;
  if (qword_101637048 != -1) {
    swift_once();
  }
  uint64_t v1 = (long long *)(v0 + 12);
  uint64_t v2 = v0[57];
  uint64_t v3 = v0[58];
  uint64_t v4 = v0[56];
  uint64_t v5 = v0[49];
  uint64_t v6 = type metadata accessor for Logger();
  v0[68] = sub_100010324(v6, (uint64_t)qword_10170EBB8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v3, v5, v4);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v11 = v0[57];
  uint64_t v10 = v0[58];
  uint64_t v12 = v0[56];
  if (v9)
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 141558275;
    v0[47] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 12) = 2081;
    sub_100CF8CA4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[48] = sub_1008FA0F0(v14, v15, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Received handleCircleTrustAck -- identifier: %{private,mask.hash}s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v1 = (long long *)(v0 + 12);
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v11 + 8))(v0[58], v0[56]);
  }

  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, (uint64_t)v1, (uint64_t *)&unk_101638D30);
  if (v0[15])
  {
    sub_10001CEB0(v1, (uint64_t)(v0 + 2));
    sub_10001CD44(v0 + 2, v0[5]);
    uint64_t v18 = (uint64_t (__cdecl *)())((char *)&dword_1016390F0 + dword_1016390F0);
    uint64_t v17 = (void *)swift_task_alloc();
    v0[69] = v17;
    void *v17 = v0;
    v17[1] = sub_100CE4D30;
    return v18();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100CE4D30(uint64_t a1)
{
  *(void *)(*(void *)v1 + 560) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100CE4E30, 0, 0);
}

uint64_t sub_100CE4E30()
{
  uint64_t v1 = v0 + 16;
  if (*(void *)(v0 + 560))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 176, (uint64_t *)&unk_101638D30);
    if (*(void *)(v0 + 200))
    {
      sub_10001CEB0((long long *)(v0 + 176), v0 + 136);
      sub_10001CD44((void *)(v0 + 136), *(void *)(v0 + 160));
      os_log_type_t v8 = (uint64_t (*)(void))((char *)&dword_1016390D8 + dword_1016390D8);
      uint64_t v3 = (void *)swift_task_alloc();
      *(void *)(v0 + 568) = v3;
      void *v3 = v0;
      v3[1] = sub_100CE505C;
      return v8();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "No PeerTrustService available!", v6, 2u);
      swift_slowDealloc();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
    return v7();
  }
  return result;
}

uint64_t sub_100CE505C(uint64_t a1)
{
  *(void *)(*(void *)v1 + 576) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100CE515C, 0, 0);
}

uint64_t sub_100CE515C()
{
  unint64_t v15 = v0;
  uint64_t v1 = (uint64_t)(v0 + 17);
  if (v0[72])
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v2 = v0[72];
    swift_retain();
    return _swift_task_switch(sub_100CE54DC, v2, 0);
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    os_log_type_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "No BeaconStoreActor available!", v5, 2u);
    swift_slowDealloc();
  }

  sub_10001CEC8();
  swift_allocError();
  *uint64_t v6 = 0x74536E6F63616542;
  v6[1] = 0xEB0000000065726FLL;
  swift_willThrow();
  swift_release();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136446210;
    swift_getErrorValue();
    uint64_t v10 = Error.localizedDescription.getter();
    v0[41] = sub_1008FA0F0(v10, v11, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Failure on handleCircleTrustAccept, update iCloud data: %{public}s.", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    if (!v0[72]) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  swift_errorRelease();
  swift_errorRelease();
  swift_errorRelease();

  if (v0[72]) {
LABEL_11:
  }
    swift_release();
LABEL_12:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_100CE54DC()
{
  *(void *)(v0 + 584) = *(void *)(*(void *)(v0 + 576) + 128);
  return _swift_task_switch(sub_100CE5504, 0, 0);
}

uint64_t sub_100CE5504()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 592) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100CE55E0;
  uint64_t v2 = *(void *)(v0 + 584);
  return withCheckedContinuation<A>(isolation:function:_:)(v1, 0, 0, 0x696176416E656877, 0xEF2928656C62616CLL, sub_10007561C, v2, (char *)&type metadata for () + 8);
}

uint64_t sub_100CE55E0()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100CE56DC, 0, 0);
}

uint64_t sub_100CE56DC()
{
  return _swift_task_switch(sub_100CE56F8, *(void *)(v0 + 576), 0);
}

uint64_t sub_100CE56F8()
{
  *(void *)(v0 + 600) = *(void *)(*(void *)(v0 + 576) + 136);
  swift_retain();
  return _swift_task_switch(sub_100CE576C, 0, 0);
}

uint64_t sub_100CE576C()
{
  uint64_t v1 = v0[75];
  uint64_t v2 = v0[72];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[76] = v3;
  v3[2] = v1;
  v3[3] = sub_100075250;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[77] = v4;
  uint64_t v5 = sub_10000588C(&qword_10163B8C0);
  void *v4 = v0;
  v4[1] = sub_100CE5888;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 38, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1000757B0, v3, v5);
}

uint64_t sub_100CE5888()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 624) = *(void *)(v1 + 304);
  return _swift_task_switch(sub_100CE59E4, 0, 0);
}

uint64_t sub_100CE59E4()
{
  uint64_t v28 = v0;
  uint64_t v1 = *(void *)(v0 + 624);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 512);
    uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v5 = *(void *)(v3 + 72);
    swift_bridgeObjectRetain();
    while (1)
    {
      sub_100CF8CEC(v4, *(void *)(v0 + 528), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      if (static UUID.== infix(_:_:)()) {
        break;
      }
      sub_100CF8B0C(*(void *)(v0 + 528), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      v4 += v5;
      if (!--v2)
      {
        swift_bridgeObjectRelease();
        goto LABEL_6;
      }
    }
    uint64_t v7 = *(void *)(v0 + 528);
    uint64_t v8 = *(void *)(v0 + 440);
    swift_bridgeObjectRelease();
    sub_100CF89F4(v7, v8, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v6 = 0;
  }
  else
  {
LABEL_6:
    uint64_t v6 = 1;
  }
  uint64_t v9 = *(void *)(v0 + 504);
  uint64_t v10 = *(void *)(v0 + 512);
  uint64_t v11 = *(void *)(v0 + 440);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56))(v11, v6, 1, v9);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v11, 1, v9) == 1)
  {
    sub_10001DAB4(*(void *)(v0 + 440), (uint64_t *)&unk_101638D10);
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "ownerSharingCircle cannot be found", v14, 2u);
      swift_slowDealloc();
    }

    sub_100CF7910();
    swift_allocError();
    *unint64_t v15 = 3;
    swift_willThrow();
    swift_release();
    swift_release();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      uint64_t v27 = swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 136446210;
      swift_getErrorValue();
      uint64_t v19 = Error.localizedDescription.getter();
      *(void *)(v0 + 328) = sub_1008FA0F0(v19, v20, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Failure on handleCircleTrustAccept, update iCloud data: %{public}s.", v18, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      if (!*(void *)(v0 + 576)) {
        goto LABEL_19;
      }
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();

      if (!*(void *)(v0 + 576))
      {
LABEL_19:
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v26 = *(uint64_t (**)(void))(v0 + 8);
        return v26();
      }
    }
    swift_release();
    goto LABEL_19;
  }
  sub_100CF89F4(*(void *)(v0 + 440), *(void *)(v0 + 536), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  uint64_t v21 = (void *)swift_task_alloc();
  *(void *)(v0 + 632) = v21;
  *uint64_t v21 = v0;
  v21[1] = sub_100CE5ED8;
  uint64_t v22 = *(void *)(v0 + 400);
  uint64_t v23 = *(void *)(v0 + 408);
  uint64_t v24 = *(unsigned __int8 *)(v0 + 756);
  return sub_100EA2DF0(v24, v22, v23);
}

uint64_t sub_100CE5ED8(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 640) = a1;
  *(void *)(v3 + 648) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_100CE788C;
  }
  else {
    uint64_t v4 = sub_100CE5FF0;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100CE5FF0()
{
  uint64_t v45 = v0;
  uint64_t v1 = *(void *)(v0 + 640);
  if (*(void *)(v1 + 16))
  {
    uint64_t v2 = *(unsigned __int8 *)(*(void *)(v0 + 480) + 80);
    sub_100CF8CEC(v1 + ((v2 + 32) & ~v2), *(void *)(v0 + 432), (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = 1;
  }
  uint64_t v5 = *(void *)(v0 + 472);
  uint64_t v4 = *(void *)(v0 + 480);
  uint64_t v6 = *(void *)(v0 + 432);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v6, v3, 1, v5);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v6, 1, v5) == 1)
  {
    sub_10001DAB4(*(void *)(v0 + 432), (uint64_t *)&unk_1016607D0);
LABEL_10:
    swift_bridgeObjectRetain_n();
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    BOOL v26 = os_log_type_enabled(v24, v25);
    unint64_t v27 = *(void *)(v0 + 408);
    if (v26)
    {
      uint64_t v28 = *(void *)(v0 + 400);
      uint64_t v29 = swift_slowAlloc();
      v44[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v29 = 141558275;
      *(void *)(v0 + 312) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v29 + 12) = 2081;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 320) = sub_1008FA0F0(v28, v27, v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Missing ownerPeerTrust for %{private,mask.hash}s.", (uint8_t *)v29, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
    }

    sub_100CF7910();
    swift_allocError();
    *unint64_t v30 = 2;
    swift_willThrow();
    swift_release();
    swift_release();
    int v31 = 0;
LABEL_14:
    swift_errorRetain();
    swift_errorRetain();
    unint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      v44[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v34 = 136446210;
      swift_getErrorValue();
      uint64_t v35 = Error.localizedDescription.getter();
      *(void *)(v0 + 328) = sub_1008FA0F0(v35, v36, v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Failure on handleCircleTrustAccept, update iCloud data: %{public}s.", v34, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      if (!v31) {
        goto LABEL_19;
      }
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();

      if (!v31)
      {
LABEL_19:
        sub_100CF8B0C(*(void *)(v0 + 536), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        if (*(void *)(v0 + 576)) {
          swift_release();
        }
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        os_log_type_t v37 = *(uint64_t (**)(void))(v0 + 8);
        return v37();
      }
    }
    sub_100CF8B0C(*(void *)(v0 + 496), (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
    goto LABEL_19;
  }
  uint64_t v7 = *(void *)(v0 + 648);
  uint64_t v8 = *(void *)(v0 + 504);
  uint64_t v9 = *(void *)(v0 + 488);
  uint64_t v10 = *(void *)(v0 + 472);
  sub_100CF89F4(*(void *)(v0 + 432), v9, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
  *(_DWORD *)(v0 + 752) = *(_DWORD *)(v8 + 32);
  uint64_t v11 = swift_bridgeObjectRetain();
  uint64_t v12 = sub_10070FB1C(v11);
  swift_bridgeObjectRelease();
  uint64_t v13 = v9 + *(int *)(v10 + 20);
  uint64_t v14 = swift_task_alloc();
  *(void *)(v14 + 16) = v13;
  LOBYTE(v8) = sub_100A9F998((uint64_t (*)(char *))sub_1006CD4F8, v14, v12);
  swift_release();
  swift_task_dealloc();
  if ((v8 & 1) == 0)
  {
    sub_100CF8B0C(*(void *)(v0 + 488), (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
    goto LABEL_10;
  }
  uint64_t v15 = *(void *)(v0 + 536);
  uint64_t v16 = *(void *)(v0 + 520);
  sub_100CF8CEC(*(void *)(v0 + 488), *(void *)(v0 + 496), (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
  sub_100CF8CEC(v15, v16, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  os_log_type_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  BOOL v19 = os_log_type_enabled(v17, v18);
  uint64_t v20 = *(void *)(v0 + 520);
  if (v19)
  {
    uint64_t v21 = swift_slowAlloc();
    v44[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 141558275;
    *(void *)(v0 + 360) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v21 + 12) = 2081;
    sub_100CF8CA4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 368) = sub_1008FA0F0(v22, v23, v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100CF8B0C(v20, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Data update on circle trust acceptance. Update %{private,mask.hash}s", (uint8_t *)v21, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100CF8B0C(*(void *)(v0 + 520), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  }

  uint64_t v39 = *(void *)(v0 + 536);
  uint64_t v40 = *(void *)(v0 + 496);
  uint64_t v41 = *(void *)(v0 + 424);
  uint64_t v42 = swift_task_alloc();
  *(void *)(v42 + 16) = v39;
  *(void *)(v42 + 24) = v40;
  sub_100EE07C0((void (*)(uint64_t, _UNKNOWN **))sub_100CF7964, v41);
  if (v7)
  {
    sub_100CF8B0C(*(void *)(v0 + 488), (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
    swift_release();
    swift_release();
    swift_task_dealloc();
    int v31 = 1;
    goto LABEL_14;
  }
  swift_task_dealloc();
  uint64_t v43 = *(void *)(v0 + 576);
  return _swift_task_switch(sub_100CE6870, v43, 0);
}

uint64_t sub_100CE6870()
{
  *(void *)(v0 + 656) = *(void *)(*(void *)(v0 + 576) + 128);
  return _swift_task_switch(sub_100CE6898, 0, 0);
}

uint64_t sub_100CE6898()
{
  uint64_t v1 = v0[82];
  uint64_t v2 = v0[53];
  uint64_t v3 = swift_task_alloc();
  v0[83] = v3;
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[84] = v4;
  void *v4 = v0;
  v4[1] = sub_100CE6990;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v4, 0, 0, 0xD000000000000011, 0x80000001013F27F0, sub_1000757B8, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_100CE6990()
{
  *(void *)(*(void *)v1 + 680) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100CE6B98;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_100CE6AAC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100CE6AAC()
{
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 216, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 240))
  {
    sub_10001CEB0((long long *)(v0 + 216), v0 + 56);
    sub_10001CD44((void *)(v0 + 56), *(void *)(v0 + 80));
    uint64_t v3 = (uint64_t (*)(void))((char *)&dword_101639228 + dword_101639228);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 688) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100CE6EDC;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100CE6B98()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100CE6C00, 0, 0);
}

uint64_t sub_100CE6C00()
{
  uint64_t v11 = v0;
  uint64_t v1 = v0[61];
  uint64_t v2 = v0[53];
  swift_release();
  swift_release();
  sub_10001DAB4(v2, &qword_101639E88);
  sub_100CF8B0C(v1, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446210;
    swift_getErrorValue();
    uint64_t v6 = Error.localizedDescription.getter();
    v0[41] = sub_1008FA0F0(v6, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failure on handleCircleTrustAccept, update iCloud data: %{public}s.", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  sub_100CF8B0C(v0[62], (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
  sub_100CF8B0C(v0[67], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  if (v0[72]) {
    swift_release();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_100CE6EDC(uint64_t a1)
{
  *(void *)(*(void *)v1 + 696) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100CE6FDC, 0, 0);
}

uint64_t sub_100CE6FDC()
{
  uint64_t v1 = v0[87];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 7));
  if (v1)
  {
    uint64_t v2 = v0[87];
    swift_retain();
    return _swift_task_switch(sub_100CE71A4, v2, 0);
  }
  else
  {
    swift_release();
    uint64_t v3 = v0[72];
    uint64_t v4 = v0[61];
    sub_10001DAB4(v0[53], &qword_101639E88);
    sub_100CF8B0C(v4, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
    uint64_t v5 = swift_bridgeObjectRetain();
    uint64_t v6 = sub_10070FB1C(v5);
    swift_bridgeObjectRelease();
    v0[43] = v6;
    unint64_t v7 = (void *)swift_task_alloc();
    v0[88] = v7;
    uint64_t v8 = sub_10000588C((uint64_t *)&unk_1016636E0);
    uint64_t v9 = sub_100062734((unint64_t *)&qword_10163FBF0, (uint64_t *)&unk_1016636E0);
    void *v7 = v0;
    v7[1] = sub_100CE73FC;
    uint64_t v10 = v0[59];
    return Sequence.asyncCompactMap<A>(_:)(&unk_10165CD00, v3, v8, v10, v9);
  }
}

uint64_t sub_100CE71A4()
{
  type metadata accessor for Transaction();
  swift_allocObject();
  swift_weakInit();
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  swift_release_n();
  swift_release();
  return _swift_task_switch(sub_100CE7288, 0, 0);
}

uint64_t sub_100CE7288()
{
  swift_release();
  swift_release();
  uint64_t v1 = v0[72];
  uint64_t v2 = v0[61];
  sub_10001DAB4(v0[53], &qword_101639E88);
  sub_100CF8B0C(v2, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
  uint64_t v3 = swift_bridgeObjectRetain();
  uint64_t v4 = sub_10070FB1C(v3);
  swift_bridgeObjectRelease();
  v0[43] = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  v0[88] = v5;
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_1016636E0);
  uint64_t v7 = sub_100062734((unint64_t *)&qword_10163FBF0, (uint64_t *)&unk_1016636E0);
  *uint64_t v5 = v0;
  v5[1] = sub_100CE73FC;
  uint64_t v8 = v0[59];
  return Sequence.asyncCompactMap<A>(_:)(&unk_10165CD00, v1, v6, v8, v7);
}

uint64_t sub_100CE73FC(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 712) = a1;
  *(void *)(v3 + 720) = v1;
  swift_task_dealloc();
  swift_release();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100CE7544, 0, 0);
}

uint64_t sub_100CE7544()
{
  uint64_t v1 = v0[89];
  uint64_t v2 = v0[62];
  uint64_t v3 = (void *)swift_task_alloc();
  v3[2] = v2;
  uint64_t v4 = sub_1000A4214((uint64_t (*)(char *))sub_100CF7A60, v3, v1);
  v0[91] = v4;
  swift_task_dealloc();
  uint64_t v5 = (void *)swift_task_alloc();
  v0[92] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100CE763C;
  uint64_t v6 = v0[67];
  return sub_100CDB834(v6, v4);
}

uint64_t sub_100CE763C()
{
  *(void *)(*(void *)v1 + 744) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0) {
    uint64_t v2 = sub_100CE7B18;
  }
  else {
    uint64_t v2 = sub_100CE7770;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100CE7770()
{
  uint64_t v1 = v0[67];
  uint64_t v2 = v0[62];
  swift_release();
  sub_100CF8B0C(v2, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
  sub_100CF8B0C(v1, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_100CE788C()
{
  uint64_t v9 = v0;
  swift_release();
  swift_release();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446210;
    swift_getErrorValue();
    uint64_t v4 = Error.localizedDescription.getter();
    v0[41] = sub_1008FA0F0(v4, v5, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failure on handleCircleTrustAccept, update iCloud data: %{public}s.", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  sub_100CF8B0C(v0[67], (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  if (v0[72]) {
    swift_release();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_100CE7B18()
{
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138412290;
    uint64_t v5 = _convertErrorToNSError(_:)();
    v0[44] = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Error in handleCircleTrustAccept, send update message: %@", v3, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  swift_errorRelease();
  uint64_t v6 = v0[67];
  uint64_t v7 = v0[62];
  swift_release();
  sub_100CF8B0C(v7, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
  sub_100CF8B0C(v6, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(void))v0[1];
  return v8();
}

uint64_t sub_100CE7D74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for OwnerPeerTrust();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2 + *(int *)(v8 + 20), v4);
  uint64_t v9 = *(int *)(type metadata accessor for OwnerSharingCircle() + 32);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v13 = *(void *)(a1 + v9);
  *(void *)(a1 + v9) = 0x8000000000000000;
  sub_10016CA2C(1u, (uint64_t)v7, isUniquelyReferenced_nonNull_native);
  *(void *)(a1 + v9) = v13;
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_100CE7EB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  uint64_t v5 = type metadata accessor for UUID();
  v3[5] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[6] = v6;
  v3[7] = *(void *)(v6 + 64);
  v3[8] = swift_task_alloc();
  return _swift_task_switch(sub_100CE7F84, a3, 0);
}

uint64_t sub_100CE7F84()
{
  uint64_t v1 = v0[8];
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[6];
  uint64_t v4 = v0[3];
  uint64_t v5 = v0[4];
  v0[9] = *(void *)(v5 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v1, v4, v2);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = swift_allocObject();
  v0[10] = v7;
  *(void *)(v7 + 16) = v5;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))(v7 + v6, v1, v2);
  swift_retain();
  return _swift_task_switch(sub_100CE8074, 0, 0);
}

uint64_t sub_100CE8074()
{
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[11] = v3;
  v3[2] = v2;
  v3[3] = sub_100CF7ABC;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[12] = v4;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_1016607D0);
  void *v4 = v0;
  v4[1] = sub_10027027C;
  uint64_t v6 = v0[2];
  return withCheckedContinuation<A>(isolation:function:_:)(v6, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100090E94, v3, v5);
}

BOOL sub_100CE8188(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)v15 - v9;
  uint64_t v11 = type metadata accessor for OwnerPeerTrust();
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v12(v10, a1 + *(int *)(v11 + 20), v4);
  v12(v8, a2 + *(int *)(v11 + 20), v4);
  sub_100CF8CA4((unint64_t *)&qword_10163B8F0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
  LOBYTE(a2) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v8, v4);
  v13(v10, v4);
  return (a2 & 1) == 0;
}

uint64_t sub_100CE8340(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  return sub_100CE836C(a1, a2, a3, a4, (uint64_t)&unk_1015F11A8, (uint64_t)"CircleTrustService.handleCircleTrustDecline", 43, (uint64_t)&unk_10165CD18);
}

uint64_t sub_100CE836C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v26 = a7;
  uint64_t v27 = a8;
  uint64_t v24 = a3;
  uint64_t v25 = a6;
  uint64_t v9 = v8;
  int v23 = a2;
  uint64_t v22 = *v9;
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21[1] = type metadata accessor for Transaction();
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1, v12);
  unint64_t v16 = (*(unsigned __int8 *)(v13 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v17 = (v14 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v9;
  (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v18 + v16, v15, v12);
  unint64_t v19 = v18 + v17;
  *(unsigned char *)unint64_t v19 = v23;
  *(void *)(v19 + 8) = v24;
  *(void *)(v19 + 16) = a4;
  *(void *)(v18 + ((v17 + 31) & 0xFFFFFFFFFFFFFFF8)) = v22;
  swift_retain();
  swift_bridgeObjectRetain();
  static Transaction.asyncTask(name:block:)();
  return swift_release();
}

uint64_t sub_100CE8538(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 40) = a5;
  *(void *)(v6 + 48) = a6;
  *(void *)(v6 + 24) = a2;
  *(void *)(v6 + 32) = a4;
  *(unsigned char *)(v6 + 96) = a3;
  *(void *)(v6 + 16) = a1;
  uint64_t v7 = type metadata accessor for UUID();
  *(void *)(v6 + 56) = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  *(void *)(v6 + 64) = v8;
  *(void *)(v6 + 72) = *(void *)(v8 + 64);
  *(void *)(v6 + 80) = swift_task_alloc();
  *(void *)(v6 + 88) = swift_task_alloc();
  return _swift_task_switch(sub_100CE861C, 0, 0);
}

uint64_t sub_100CE861C()
{
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 56);
  uint64_t v16 = *(void *)(v0 + 40);
  uint64_t v17 = *(void *)(v0 + 48);
  uint64_t v5 = *(void *)(v0 + 24);
  uint64_t v15 = *(void *)(v0 + 32);
  char v14 = *(unsigned char *)(v0 + 96);
  uint64_t v6 = *(void *)(v0 + 16);
  type metadata accessor for WorkItemQueue.WorkItem();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v5, v4);
  unint64_t v7 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v8 = (v3 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = swift_allocObject();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v2 + 32))(v10 + v7, v1, v4);
  *(void *)(v10 + v8) = v6;
  unint64_t v11 = v10 + v9;
  *(unsigned char *)unint64_t v11 = v14;
  *(void *)(v11 + 8) = v15;
  *(void *)(v11 + 16) = v16;
  *(void *)(v10 + ((v9 + 31) & 0xFFFFFFFFFFFFFFF8)) = v17;
  swift_retain();
  swift_bridgeObjectRetain();
  UUID.init()();
  WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)();
  dispatch thunk of WorkItemQueue.enqueue(_:)();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

uint64_t sub_100CE87EC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 176) = a4;
  *(void *)(v5 + 184) = a5;
  *(unsigned char *)(v5 + 297) = a3;
  *(void *)(v5 + 160) = a1;
  *(void *)(v5 + 168) = a2;
  uint64_t v6 = type metadata accessor for UUID();
  *(void *)(v5 + 192) = v6;
  *(void *)(v5 + 200) = *(void *)(v6 - 8);
  *(void *)(v5 + 208) = swift_task_alloc();
  *(void *)(v5 + 216) = swift_task_alloc();
  return _swift_task_switch(sub_100CE88C4, 0, 0);
}

uint64_t sub_100CE88C4()
{
  uint64_t v22 = v0;
  if (qword_101637048 != -1) {
    swift_once();
  }
  uint64_t v1 = (long long *)(v0 + 7);
  uint64_t v2 = v0[20];
  uint64_t v3 = v0[27];
  uint64_t v5 = v0[24];
  uint64_t v4 = v0[25];
  uint64_t v6 = type metadata accessor for Logger();
  v0[28] = sub_100010324(v6, (uint64_t)qword_10170EBB8);
  unint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[29] = v7;
  v0[30] = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v7(v3, v2, v5);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  BOOL v10 = os_log_type_enabled(v8, v9);
  uint64_t v11 = v0[27];
  uint64_t v13 = v0[24];
  uint64_t v12 = v0[25];
  if (v10)
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 141558275;
    v0[19] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v14 + 12) = 2081;
    sub_100CF8CA4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[16] = sub_1008FA0F0(v15, v16, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v17(v11, v13);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Received handleCircleTrustDecline -- identifier: %{private,mask.hash}s", (uint8_t *)v14, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v1 = (long long *)(v0 + 7);
    swift_slowDealloc();
  }
  else
  {
    uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v17(v0[27], v0[24]);
  }

  v0[31] = v17;
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, (uint64_t)v1, (uint64_t *)&unk_101638D30);
  if (v0[10])
  {
    sub_10001CEB0(v1, (uint64_t)(v0 + 2));
    sub_10001CD44(v0 + 2, v0[5]);
    uint64_t v20 = (uint64_t (__cdecl *)())((char *)&dword_101639228 + dword_101639228);
    unint64_t v19 = (void *)swift_task_alloc();
    v0[32] = v19;
    *unint64_t v19 = v0;
    v19[1] = sub_100CE8C48;
    return v20();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100CE8C48(uint64_t a1)
{
  *(void *)(*(void *)v1 + 264) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100CE8D48, 0, 0);
}

uint64_t sub_100CE8D48()
{
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (v0[33])
  {
    uint64_t v2 = v0[21];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    return _swift_task_switch(sub_100CE900C, v2, 0);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "No SharingService available!", v5, 2u);
      swift_slowDealloc();
    }

    sub_10001CEC8();
    swift_allocError();
    strcpy(v6, "SharingService");
    v6[15] = -18;
    swift_willThrow();
    swift_errorRetain();
    unint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      os_log_type_t v9 = (uint8_t *)swift_slowAlloc();
      BOOL v10 = (void *)swift_slowAlloc();
      *(_DWORD *)os_log_type_t v9 = 138412290;
      uint64_t v11 = _convertErrorToNSError(_:)();
      v0[15] = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *BOOL v10 = v11;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Error in handleCircleTrustDecline: %@", v9, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = (uint64_t (*)(void))v0[1];
    return v12();
  }
}

uint64_t sub_100CE900C()
{
  if (qword_101637680 != -1) {
    swift_once();
  }
  swift_retain();
  AnyCurrentValuePublisher.value.getter();
  swift_release();
  if (*(unsigned char *)(v0 + 296) == 1)
  {
    uint64_t v1 = (void *)swift_task_alloc();
    *(void *)(v0 + 280) = v1;
    *uint64_t v1 = v0;
    v1[1] = sub_100CE9444;
    uint64_t v2 = *(void *)(v0 + 176);
    uint64_t v3 = *(void *)(v0 + 184);
    uint64_t v4 = *(void *)(v0 + 160);
    char v5 = *(unsigned char *)(v0 + 297);
    return sub_100101474(v4, v5, v2, v3);
  }
  else
  {
    *(void *)(v0 + 272) = *(void *)(*(void *)(v0 + 168) + 144);
    return _swift_task_switch(sub_100CE9154, 0, 0);
  }
}

uint64_t sub_100CE9154()
{
  uint64_t v18 = v0;
  if (*(void *)(v0 + 272))
  {
    (*(void (**)(void, void, void))(v0 + 232))(*(void *)(v0 + 208), *(void *)(v0 + 160), *(void *)(v0 + 192));
    uint64_t v1 = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.default.getter();
    BOOL v3 = os_log_type_enabled(v1, v2);
    uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v0 + 248);
    uint64_t v5 = *(void *)(v0 + 208);
    uint64_t v6 = *(void *)(v0 + 192);
    if (v3)
    {
      uint64_t v7 = swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 141558275;
      *(void *)(v0 + 136) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v7 + 12) = 2081;
      sub_100CF8CA4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v8 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 144) = sub_1008FA0F0(v8, v9, &v17);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v4(v5, v6);
      _os_log_impl((void *)&_mh_execute_header, v1, v2, "Ignoring non-me device handleCircleTrustDecline for identifier: %{private,mask.hash}s.", (uint8_t *)v7, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();
    }
    else
    {
      swift_release();
      v4(v5, v6);
    }

    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
    return v16();
  }
  else
  {
    BOOL v10 = (void *)swift_task_alloc();
    *(void *)(v0 + 280) = v10;
    *BOOL v10 = v0;
    v10[1] = sub_100CE9444;
    uint64_t v11 = *(void *)(v0 + 176);
    uint64_t v12 = *(void *)(v0 + 184);
    uint64_t v13 = *(void *)(v0 + 160);
    char v14 = *(unsigned char *)(v0 + 297);
    return sub_100101474(v13, v14, v11, v12);
  }
}

uint64_t sub_100CE9444()
{
  *(void *)(*(void *)v1 + 288) = v0;
  swift_task_dealloc();
  if (v0) {
    os_log_type_t v2 = sub_100CE95CC;
  }
  else {
    os_log_type_t v2 = sub_100CE9558;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100CE9558()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100CE95CC()
{
  swift_release();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138412290;
    uint64_t v5 = _convertErrorToNSError(_:)();
    *(void *)(v0 + 120) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v4 = v5;
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Error in handleCircleTrustDecline: %@", v3, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_100CE9774(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v5 + 352) = a4;
  *(void *)(v5 + 360) = v4;
  *(unsigned char *)(v5 + 752) = a2;
  *(void *)(v5 + 336) = a1;
  *(void *)(v5 + 344) = a3;
  *(void *)(v5 + 368) = sub_10000588C((uint64_t *)&unk_101653D50);
  *(void *)(v5 + 376) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for SharedBeaconRecord(0);
  *(void *)(v5 + 384) = v6;
  *(void *)(v5 + 392) = *(void *)(v6 - 8);
  *(void *)(v5 + 400) = swift_task_alloc();
  *(void *)(v5 + 408) = swift_task_alloc();
  *(void *)(v5 + 416) = sub_10000588C((uint64_t *)&unk_10163B7C0);
  *(void *)(v5 + 424) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for MemberSharingCircle();
  *(void *)(v5 + 432) = v7;
  *(void *)(v5 + 440) = *(void *)(v7 - 8);
  *(void *)(v5 + 448) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for UUID();
  *(void *)(v5 + 456) = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  *(void *)(v5 + 464) = v9;
  *(void *)(v5 + 472) = *(void *)(v9 + 64);
  *(void *)(v5 + 480) = swift_task_alloc();
  *(void *)(v5 + 488) = swift_task_alloc();
  *(void *)(v5 + 496) = swift_task_alloc();
  *(void *)(v5 + 504) = swift_task_alloc();
  sub_10000588C(&qword_101638CF0);
  *(void *)(v5 + 512) = swift_task_alloc();
  return _swift_task_switch(sub_100CE99CC, v4, 0);
}

uint64_t sub_100CE99CC()
{
  uint64_t v15 = v0;
  if (qword_101637048 != -1) {
    swift_once();
  }
  uint64_t v1 = (long long *)(v0 + 12);
  uint64_t v2 = type metadata accessor for Logger();
  v0[65] = sub_100010324(v2, (uint64_t)qword_10170EBB8);
  swift_bridgeObjectRetain_n();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v6 = Array.description.getter();
    unint64_t v8 = v7;
    swift_bridgeObjectRelease();
    uint64_t v9 = v6;
    uint64_t v1 = (long long *)(v0 + 12);
    v0[41] = sub_1008FA0F0(v9, v8, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Sharing Circles updated: %s.", v5, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  uint64_t v10 = qword_1016375E8;
  swift_retain();
  if (v10 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, (uint64_t)v1, (uint64_t *)&unk_101638D30);
  if (v0[15])
  {
    sub_10001CEB0(v1, (uint64_t)(v0 + 2));
    swift_release();
    sub_10001CD44(v0 + 2, v0[5]);
    uint64_t v13 = (uint64_t (__cdecl *)())((char *)&dword_101639228 + dword_101639228);
    uint64_t v12 = (void *)swift_task_alloc();
    v0[66] = v12;
    *uint64_t v12 = v0;
    v12[1] = sub_100CE9CDC;
    return v13();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100CE9CDC(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 360);
  *(void *)(*(void *)v1 + 536) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100CE9DF4, v2, 0);
}

uint64_t sub_100CE9DF4()
{
  uint64_t v1 = v0 + 16;
  if (*(void *)(v0 + 536))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 176, (uint64_t *)&unk_101638D30);
    if (*(void *)(v0 + 200))
    {
      sub_10001CEB0((long long *)(v0 + 176), v0 + 136);
      sub_10001CD44((void *)(v0 + 136), *(void *)(v0 + 160));
      unint64_t v8 = (uint64_t (__cdecl *)())((char *)&dword_1016390D8 + dword_1016390D8);
      uint64_t v3 = (void *)swift_task_alloc();
      *(void *)(v0 + 544) = v3;
      void *v3 = v0;
      v3[1] = sub_100CEA028;
      return v8();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "No BeaconSharingService available!", v6, 2u);
      swift_slowDealloc();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
    return v7();
  }
  return result;
}

uint64_t sub_100CEA028(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 360);
  *(void *)(*(void *)v1 + 552) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100CEA140, v2, 0);
}

uint64_t sub_100CEA140()
{
  uint64_t v1 = v0 + 136;
  if (*(void *)(v0 + 552))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
    if (*(void *)(v0 + 80))
    {
      sub_10001CEB0((long long *)(v0 + 56), v0 + 216);
      sub_10001CD44((void *)(v0 + 216), *(void *)(v0 + 240));
      unint64_t v8 = (uint64_t (__cdecl *)())((char *)&dword_1016390A8 + dword_1016390A8);
      uint64_t v3 = (void *)swift_task_alloc();
      *(void *)(v0 + 560) = v3;
      void *v3 = v0;
      v3[1] = sub_100CEA390;
      return v8();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "No BeaconStoreActor available!", v6, 2u);
      swift_slowDealloc();
      swift_release();
    }
    else
    {

      swift_release();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    unint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
    return v7();
  }
  return result;
}

uint64_t sub_100CEA390(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 360);
  *(void *)(*(void *)v1 + 568) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100CEA4A8, v2, 0);
}

uint64_t sub_100CEA4A8()
{
  uint64_t v1 = v0 + 216;
  if (*(void *)(v0 + 568))
  {
    uint64_t v2 = *(void *)(v0 + 336);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v3 = *(void *)(v2 + 16);
    *(void *)(v0 + 576) = v3;
    uint64_t v4 = *(void *)(v0 + 464);
    uint64_t v5 = *(void *)(v0 + 336);
    if (v3)
    {
      int v6 = *(_DWORD *)(v4 + 80);
      *(_DWORD *)(v0 + 744) = v6;
      *(void *)(v0 + 584) = *(void *)(v4 + 72);
      unint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
      *(void *)(v0 + 592) = v7;
      *(void *)(v0 + 600) = 0;
      uint64_t v8 = *(void *)(v0 + 512);
      uint64_t v9 = *(void *)(v0 + 456);
      uint64_t v10 = v5 + ((v6 + 32) & ~(unint64_t)v6);
      *(void *)(v0 + 608) = (v4 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
      swift_bridgeObjectRetain();
      v7(v8, v10, v9);
      uint64_t v11 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56);
      *(void *)(v0 + 616) = v11;
      v11(v8, 0, 1, v9);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v8, 1, v9) != 1)
      {
        uint64_t v12 = *(void *)(v0 + 504);
        uint64_t v13 = *(void *)(v0 + 512);
        uint64_t v14 = *(void *)(v0 + 456);
        uint64_t v15 = *(void *)(v0 + 464);
        uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32);
        *(void *)(v0 + 624) = v16;
        *(void *)(v0 + 632) = (v15 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
        v16(v12, v13, v14);
        uint64_t v29 = (uint64_t (*)(char, uint64_t, uint64_t))((char *)&dword_10165CF98 + dword_10165CF98);
        uint64_t v17 = (void *)swift_task_alloc();
        *(void *)(v0 + 640) = v17;
        void *v17 = v0;
        v17[1] = sub_100CEA808;
        uint64_t v18 = *(void *)(v0 + 344);
        uint64_t v19 = *(void *)(v0 + 352);
        char v20 = *(unsigned char *)(v0 + 752);
        return v29(v20, v18, v19);
      }
    }
    else
    {
      uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
      uint64_t v26 = *(void *)(v0 + 512);
      uint64_t v27 = *(void *)(v0 + 456);
      swift_bridgeObjectRetain();
      v25(v26, 1, 1, v27);
    }
    swift_bridgeObjectRelease();
    swift_release();
    goto LABEL_12;
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v22, v23))
  {

LABEL_12:
    swift_release();
    swift_release();
    goto LABEL_13;
  }
  uint64_t v24 = (uint8_t *)swift_slowAlloc();
  *(_WORD *)uint64_t v24 = 0;
  _os_log_impl((void *)&_mh_execute_header, v22, v23, "No FamilyCircleService available!", v24, 2u);
  swift_slowDealloc();
  swift_release();
  swift_release();

LABEL_13:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v28 = *(uint64_t (**)(void))(v0 + 8);
  return v28();
}

uint64_t sub_100CEA808(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (void *)*v3;
  v4[81] = a2;
  v4[82] = v2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v5 = v4[45];
    int v6 = sub_100CEA990;
  }
  else
  {
    uint64_t v5 = v4[71];
    int v6 = sub_100CEA924;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_100CEA924()
{
  if (*(void *)(v0 + 648)) {
    swift_bridgeObjectRelease();
  }
  uint64_t v1 = *(void *)(v0 + 552);
  return _swift_task_switch(sub_100CEAE70, v1, 0);
}

uint64_t sub_100CEA990()
{
  uint64_t v38 = v0;
  (*(void (**)(void, void, void))(v0 + 592))(*(void *)(v0 + 480), *(void *)(v0 + 504), *(void *)(v0 + 456));
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v35 = *(void *)(v0 + 504);
    uint64_t v3 = *(void *)(v0 + 480);
    uint64_t v4 = *(void *)(v0 + 456);
    uint64_t v5 = *(void *)(v0 + 464);
    uint64_t v6 = swift_slowAlloc();
    uint64_t v37 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 141558531;
    *(void *)(v6 + 4) = 1752392040;
    *(_WORD *)(v6 + 12) = 2081;
    sub_100CF8CA4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v6 + 14) = sub_1008FA0F0(v7, v8, &v37);
    swift_bridgeObjectRelease();
    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v9(v3, v4);
    *(_WORD *)(v6 + 22) = 2082;
    swift_getErrorValue();
    uint64_t v10 = Error.localizedDescription.getter();
    *(void *)(v6 + 24) = sub_1008FA0F0(v10, v11, &v37);
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Error downloading keys for updated share: %{private,mask.hash}s, %{public}s.", (uint8_t *)v6, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    v9(v35, v4);
  }
  else
  {
    uint64_t v12 = *(void *)(v0 + 504);
    uint64_t v13 = *(void *)(v0 + 480);
    uint64_t v14 = *(void *)(v0 + 456);
    uint64_t v15 = *(void *)(v0 + 464);

    swift_errorRelease();
    swift_errorRelease();
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v16(v13, v14);
    swift_errorRelease();
    v16(v12, v14);
  }
  uint64_t v17 = *(void *)(v0 + 600) + 1;
  if (v17 == *(void *)(v0 + 576))
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(v0 + 616))(*(void *)(v0 + 512), 1, 1, *(void *)(v0 + 456));
LABEL_7:
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v24 = *(uint64_t (**)(void))(v0 + 8);
    return v24();
  }
  *(void *)(v0 + 600) = v17;
  uint64_t v18 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 592);
  uint64_t v19 = *(void *)(v0 + 512);
  uint64_t v20 = *(void *)(v0 + 456);
  uint64_t v21 = *(void *)(v0 + 464);
  unint64_t v22 = *(void *)(v0 + 336)
      + ((*(unsigned __int8 *)(v0 + 744) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 744))
      + *(void *)(v0 + 584) * v17;
  *(void *)(v0 + 608) = (v21 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v18(v19, v22, v20);
  os_log_type_t v23 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v21 + 56);
  *(void *)(v0 + 616) = v23;
  v23(v19, 0, 1, v20);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20) == 1) {
    goto LABEL_7;
  }
  uint64_t v26 = *(void *)(v0 + 504);
  uint64_t v27 = *(void *)(v0 + 512);
  uint64_t v28 = *(void *)(v0 + 456);
  uint64_t v29 = *(void *)(v0 + 464);
  uint64_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 32);
  *(void *)(v0 + 624) = v30;
  *(void *)(v0 + 632) = (v29 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v30(v26, v27, v28);
  unint64_t v36 = (uint64_t (*)(char, uint64_t, uint64_t))((char *)&dword_10165CF98 + dword_10165CF98);
  int v31 = (void *)swift_task_alloc();
  *(void *)(v0 + 640) = v31;
  *int v31 = v0;
  v31[1] = sub_100CEA808;
  uint64_t v32 = *(void *)(v0 + 344);
  uint64_t v33 = *(void *)(v0 + 352);
  char v34 = *(unsigned char *)(v0 + 752);
  return v36(v34, v32, v33);
}

uint64_t sub_100CEAE70()
{
  uint64_t v1 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 624);
  os_log_type_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 592);
  uint64_t v3 = *(void *)(v0 + 552);
  uint64_t v5 = *(void *)(v0 + 496);
  uint64_t v4 = *(void *)(v0 + 504);
  uint64_t v6 = *(void *)(v0 + 456);
  unint64_t v7 = (*(unsigned __int8 *)(v0 + 744) + 24) & ~(unint64_t)*(unsigned __int8 *)(v0 + 744);
  *(void *)(v0 + 664) = *(void *)(v3 + 136);
  v2(v5, v4, v6);
  uint64_t v8 = swift_allocObject();
  *(void *)(v0 + 672) = v8;
  *(void *)(v8 + 16) = v3;
  v1(v8 + v7, v5, v6);
  swift_retain();
  return _swift_task_switch(sub_100CEAF68, 0, 0);
}

uint64_t sub_100CEAF68()
{
  uint64_t v1 = v0[84];
  uint64_t v2 = v0[83];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[85] = v3;
  v3[2] = v2;
  v3[3] = sub_100CF7EA0;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[86] = v4;
  void *v4 = v0;
  v4[1] = sub_100CEB070;
  uint64_t v6 = v0[52];
  uint64_t v5 = v0[53];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100075020, v3, v6);
}

uint64_t sub_100CEB070()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 360);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_100CEB1C0, v1, 0);
}

uint64_t sub_100CEB1C0()
{
  uint64_t v1 = *(void *)(v0 + 432);
  uint64_t v2 = *(void *)(v0 + 424);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 440) + 48))(v2, 1, v1) == 1)
  {
    uint64_t v3 = *(void *)(v0 + 504);
    uint64_t v4 = *(void *)(v0 + 456);
    uint64_t v5 = *(void *)(v0 + 464);
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
    swift_bridgeObjectRelease();
    sub_10001DAB4(v2, (uint64_t *)&unk_10163B7C0);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
    return v6();
  }
  else
  {
    sub_100CF89F4(v2, *(void *)(v0 + 448), (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    *(_DWORD *)(v0 + 748) = *(_DWORD *)(v1 + 24);
    uint64_t v8 = *(void *)(v0 + 552);
    return _swift_task_switch(sub_100CEB398, v8, 0);
  }
}

uint64_t sub_100CEB398()
{
  uint64_t v1 = *(void (**)(unint64_t, uint64_t, uint64_t))(v0 + 624);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 592);
  uint64_t v3 = *(void *)(v0 + 552);
  uint64_t v4 = *(void *)(v0 + 496);
  uint64_t v5 = *(void *)(v0 + 456);
  uint64_t v6 = *(void *)(v0 + 448) + *(int *)(v0 + 748);
  unint64_t v7 = (*(unsigned __int8 *)(v0 + 744) + 24) & ~(unint64_t)*(unsigned __int8 *)(v0 + 744);
  *(void *)(v0 + 696) = *(void *)(v3 + 136);
  v2(v4, v6, v5);
  uint64_t v8 = swift_allocObject();
  *(void *)(v0 + 704) = v8;
  *(void *)(v8 + 16) = v3;
  v1(v8 + v7, v4, v5);
  swift_retain();
  return _swift_task_switch(sub_100CEB498, 0, 0);
}

uint64_t sub_100CEB498()
{
  uint64_t v1 = v0[88];
  uint64_t v2 = v0[87];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[89] = v3;
  v3[2] = v2;
  v3[3] = sub_100CF7EBC;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[90] = v4;
  void *v4 = v0;
  v4[1] = sub_100CEB5A0;
  uint64_t v6 = v0[46];
  uint64_t v5 = v0[47];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100075048, v3, v6);
}

uint64_t sub_100CEB5A0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 360);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_100CEB6F0, v1, 0);
}

uint64_t sub_100CEB6F0()
{
  uint64_t v43 = v0;
  uint64_t v1 = *(void *)(v0 + 376);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)(v0 + 392) + 48))(v1, 1, *(void *)(v0 + 384)) == 1)
  {
    uint64_t v2 = *(void *)(v0 + 504);
    uint64_t v3 = *(void *)(v0 + 456);
    uint64_t v4 = *(void *)(v0 + 464);
    uint64_t v5 = *(void *)(v0 + 448);
    swift_release();
    swift_release();
    swift_release();
    sub_100CF8B0C(v5, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
    swift_bridgeObjectRelease();
    sub_10001DAB4(v1, (uint64_t *)&unk_101653D50);
LABEL_3:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
    return v6();
  }
  uint64_t v8 = *(void *)(v0 + 648);
  uint64_t v10 = *(void *)(v0 + 400);
  uint64_t v9 = *(void *)(v0 + 408);
  sub_100CF89F4(v1, v9, type metadata accessor for SharedBeaconRecord);
  sub_100CF8CEC(v9, v10, type metadata accessor for SharedBeaconRecord);
  uint64_t v11 = *(void *)(v0 + 400);
  if (v8)
  {
    sub_100CF8B0C(*(void *)(v0 + 400), type metadata accessor for SharedBeaconRecord);
LABEL_13:
    unint64_t v22 = (void *)swift_task_alloc();
    *(void *)(v0 + 728) = v22;
    *unint64_t v22 = v0;
    v22[1] = sub_100CEBC7C;
    uint64_t v23 = *(void *)(v0 + 504);
    return sub_1000FC638(v23, 1);
  }
  uint64_t v12 = *(void *)(v0 + 384);
  sub_100CF7ED4();
  uint64_t v40 = Set.init(minimumCapacity:)();
  sub_100DD1C78(&v41, 4);
  sub_100DD1C78(&v42, 1);
  LOBYTE(v12) = sub_100DC6050(*(unsigned __int8 *)(v11 + *(int *)(v12 + 64)), v40);
  swift_bridgeObjectRelease();
  sub_100CF8B0C(v11, type metadata accessor for SharedBeaconRecord);
  if ((v12 & 1) == 0) {
    goto LABEL_13;
  }
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Ignoring incoming UTFS message from non-family member", v15, 2u);
    swift_slowDealloc();
  }
  uint64_t v16 = *(void *)(v0 + 504);
  uint64_t v17 = *(void *)(v0 + 456);
  uint64_t v18 = *(void *)(v0 + 464);
  uint64_t v19 = *(void *)(v0 + 448);
  uint64_t v20 = *(void *)(v0 + 408);

  sub_100CF8B0C(v20, type metadata accessor for SharedBeaconRecord);
  sub_100CF8B0C(v19, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
  uint64_t v21 = *(void *)(v0 + 600) + 1;
  if (v21 == *(void *)(v0 + 576))
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(v0 + 616))(*(void *)(v0 + 512), 1, 1, *(void *)(v0 + 456));
LABEL_17:
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    goto LABEL_3;
  }
  *(void *)(v0 + 600) = v21;
  uint64_t v24 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 592);
  uint64_t v25 = *(void *)(v0 + 512);
  uint64_t v26 = *(void *)(v0 + 456);
  uint64_t v27 = *(void *)(v0 + 464);
  unint64_t v28 = *(void *)(v0 + 336)
      + ((*(unsigned __int8 *)(v0 + 744) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 744))
      + *(void *)(v0 + 584) * v21;
  *(void *)(v0 + 608) = (v27 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v24(v25, v28, v26);
  uint64_t v29 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v27 + 56);
  *(void *)(v0 + 616) = v29;
  v29(v25, 0, 1, v26);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26) == 1) {
    goto LABEL_17;
  }
  uint64_t v30 = *(void *)(v0 + 504);
  uint64_t v31 = *(void *)(v0 + 512);
  uint64_t v32 = *(void *)(v0 + 456);
  uint64_t v33 = *(void *)(v0 + 464);
  char v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 32);
  *(void *)(v0 + 624) = v34;
  *(void *)(v0 + 632) = (v33 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v34(v30, v31, v32);
  uint64_t v39 = (uint64_t (*)(char, uint64_t, uint64_t))((char *)&dword_10165CF98 + dword_10165CF98);
  uint64_t v35 = (void *)swift_task_alloc();
  *(void *)(v0 + 640) = v35;
  *uint64_t v35 = v0;
  v35[1] = sub_100CEA808;
  uint64_t v36 = *(void *)(v0 + 344);
  uint64_t v37 = *(void *)(v0 + 352);
  char v38 = *(unsigned char *)(v0 + 752);
  return v39(v38, v36, v37);
}

uint64_t sub_100CEBC7C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 736) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 360);
  if (v0) {
    uint64_t v4 = sub_100CEC2CC;
  }
  else {
    uint64_t v4 = sub_100CEBDA8;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100CEBDA8()
{
  uint64_t v40 = v0;
  (*(void (**)(void, void, void))(v0 + 592))(*(void *)(v0 + 488), *(void *)(v0 + 504), *(void *)(v0 + 456));
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = *(void *)(v0 + 488);
    uint64_t v4 = *(void *)(v0 + 456);
    uint64_t v36 = *(void *)(v0 + 448);
    uint64_t v37 = *(void *)(v0 + 504);
    uint64_t v34 = *(void *)(v0 + 464);
    uint64_t v35 = *(void *)(v0 + 408);
    uint64_t v5 = swift_slowAlloc();
    uint64_t v39 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 141558275;
    *(void *)(v0 + 312) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v5 + 12) = 2081;
    sub_100CF8CA4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v6 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 320) = sub_1008FA0F0(v6, v7, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v34 + 8);
    v8(v3, v4);
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Downloaded keys for updated share: %{private,mask.hash}s.", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    sub_100CF8B0C(v35, type metadata accessor for SharedBeaconRecord);
    sub_100CF8B0C(v36, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    v8(v37, v4);
  }
  else
  {
    uint64_t v9 = *(void *)(v0 + 504);
    uint64_t v10 = *(void *)(v0 + 488);
    uint64_t v11 = *(void *)(v0 + 456);
    uint64_t v12 = *(void *)(v0 + 464);
    uint64_t v13 = *(void *)(v0 + 448);
    uint64_t v14 = *(void *)(v0 + 408);

    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v15(v10, v11);
    sub_100CF8B0C(v14, type metadata accessor for SharedBeaconRecord);
    sub_100CF8B0C(v13, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
    v15(v9, v11);
  }
  uint64_t v16 = *(void *)(v0 + 600) + 1;
  if (v16 == *(void *)(v0 + 576))
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(v0 + 616))(*(void *)(v0 + 512), 1, 1, *(void *)(v0 + 456));
LABEL_7:
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v23 = *(uint64_t (**)(void))(v0 + 8);
    return v23();
  }
  *(void *)(v0 + 600) = v16;
  uint64_t v17 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 592);
  uint64_t v18 = *(void *)(v0 + 512);
  uint64_t v19 = *(void *)(v0 + 456);
  uint64_t v20 = *(void *)(v0 + 464);
  unint64_t v21 = *(void *)(v0 + 336)
      + ((*(unsigned __int8 *)(v0 + 744) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 744))
      + *(void *)(v0 + 584) * v16;
  *(void *)(v0 + 608) = (v20 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v17(v18, v21, v19);
  unint64_t v22 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v20 + 56);
  *(void *)(v0 + 616) = v22;
  v22(v18, 0, 1, v19);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1) {
    goto LABEL_7;
  }
  uint64_t v25 = *(void *)(v0 + 504);
  uint64_t v26 = *(void *)(v0 + 512);
  uint64_t v27 = *(void *)(v0 + 456);
  uint64_t v28 = *(void *)(v0 + 464);
  uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 32);
  *(void *)(v0 + 624) = v29;
  *(void *)(v0 + 632) = (v28 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v29(v25, v26, v27);
  char v38 = (uint64_t (*)(char, uint64_t, uint64_t))((char *)&dword_10165CF98 + dword_10165CF98);
  uint64_t v30 = (void *)swift_task_alloc();
  *(void *)(v0 + 640) = v30;
  *uint64_t v30 = v0;
  v30[1] = sub_100CEA808;
  uint64_t v31 = *(void *)(v0 + 344);
  uint64_t v32 = *(void *)(v0 + 352);
  char v33 = *(unsigned char *)(v0 + 752);
  return v38(v33, v31, v32);
}

uint64_t sub_100CEC2CC()
{
  uint64_t v39 = v0;
  uint64_t v1 = *(void *)(v0 + 448);
  sub_100CF8B0C(*(void *)(v0 + 408), type metadata accessor for SharedBeaconRecord);
  sub_100CF8B0C(v1, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
  (*(void (**)(void, void, void))(v0 + 592))(*(void *)(v0 + 480), *(void *)(v0 + 504), *(void *)(v0 + 456));
  swift_errorRetain();
  swift_errorRetain();
  os_log_type_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v36 = *(void *)(v0 + 504);
    uint64_t v4 = *(void *)(v0 + 480);
    uint64_t v5 = *(void *)(v0 + 456);
    uint64_t v6 = *(void *)(v0 + 464);
    uint64_t v7 = swift_slowAlloc();
    uint64_t v38 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 141558531;
    *(void *)(v7 + 4) = 1752392040;
    *(_WORD *)(v7 + 12) = 2081;
    sub_100CF8CA4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v8 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v7 + 14) = sub_1008FA0F0(v8, v9, &v38);
    swift_bridgeObjectRelease();
    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v10(v4, v5);
    *(_WORD *)(v7 + 22) = 2082;
    swift_getErrorValue();
    uint64_t v11 = Error.localizedDescription.getter();
    *(void *)(v7 + 24) = sub_1008FA0F0(v11, v12, &v38);
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Error downloading keys for updated share: %{private,mask.hash}s, %{public}s.", (uint8_t *)v7, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
    v10(v36, v5);
  }
  else
  {
    uint64_t v13 = *(void *)(v0 + 504);
    uint64_t v14 = *(void *)(v0 + 480);
    uint64_t v15 = *(void *)(v0 + 456);
    uint64_t v16 = *(void *)(v0 + 464);

    swift_errorRelease();
    swift_errorRelease();
    uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v17(v14, v15);
    swift_errorRelease();
    v17(v13, v15);
  }
  uint64_t v18 = *(void *)(v0 + 600) + 1;
  if (v18 == *(void *)(v0 + 576))
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(v0 + 616))(*(void *)(v0 + 512), 1, 1, *(void *)(v0 + 456));
LABEL_7:
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v25 = *(uint64_t (**)(void))(v0 + 8);
    return v25();
  }
  *(void *)(v0 + 600) = v18;
  uint64_t v19 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 592);
  uint64_t v20 = *(void *)(v0 + 512);
  uint64_t v21 = *(void *)(v0 + 456);
  uint64_t v22 = *(void *)(v0 + 464);
  unint64_t v23 = *(void *)(v0 + 336)
      + ((*(unsigned __int8 *)(v0 + 744) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 744))
      + *(void *)(v0 + 584) * v18;
  *(void *)(v0 + 608) = (v22 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v19(v20, v23, v21);
  uint64_t v24 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v22 + 56);
  *(void *)(v0 + 616) = v24;
  v24(v20, 0, 1, v21);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21) == 1) {
    goto LABEL_7;
  }
  uint64_t v27 = *(void *)(v0 + 504);
  uint64_t v28 = *(void *)(v0 + 512);
  uint64_t v29 = *(void *)(v0 + 456);
  uint64_t v30 = *(void *)(v0 + 464);
  uint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 32);
  *(void *)(v0 + 624) = v31;
  *(void *)(v0 + 632) = (v30 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v31(v27, v28, v29);
  uint64_t v37 = (uint64_t (*)(char, uint64_t, uint64_t))((char *)&dword_10165CF98 + dword_10165CF98);
  uint64_t v32 = (void *)swift_task_alloc();
  *(void *)(v0 + 640) = v32;
  *uint64_t v32 = v0;
  v32[1] = sub_100CEA808;
  uint64_t v33 = *(void *)(v0 + 344);
  uint64_t v34 = *(void *)(v0 + 352);
  char v35 = *(unsigned char *)(v0 + 752);
  return v37(v35, v33, v34);
}

uint64_t sub_100CEC7E8(uint64_t a1)
{
  uint64_t v3 = *v1;
  type metadata accessor for Transaction();
  uint64_t v4 = (void *)swift_allocObject();
  v4[2] = a1;
  v4[3] = v1;
  v4[4] = v3;
  swift_bridgeObjectRetain();
  swift_retain();
  static Transaction.asyncTask(name:block:)();

  return swift_release();
}

uint64_t sub_100CEC8C0(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 160) = a1;
  *(void *)(v2 + 168) = a2;
  return _swift_task_switch(sub_100CEC8E0, 0, 0);
}

uint64_t sub_100CEC8E0()
{
  uint64_t v12 = v0;
  if (qword_101637048 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 176) = sub_100010324(v1, (uint64_t)qword_10170EBB8);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 141558275;
    *(void *)(v0 + 152) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2081;
    type metadata accessor for UUID();
    swift_bridgeObjectRetain();
    uint64_t v5 = Array.description.getter();
    unint64_t v7 = v6;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 128) = sub_1008FA0F0(v5, v7, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Received handleCircleStopped -- identifiers: %{private,mask.hash}s.", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v10 = (uint64_t (__cdecl *)())((char *)&dword_101639228 + dword_101639228);
    unint64_t v9 = (void *)swift_task_alloc();
    *(void *)(v0 + 184) = v9;
    *unint64_t v9 = v0;
    v9[1] = sub_100CECBFC;
    return v10();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100CECBFC(uint64_t a1)
{
  *(void *)(*(void *)v1 + 192) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100CECCFC, 0, 0);
}

uint64_t sub_100CECCFC()
{
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (v0[24])
  {
    uint64_t v2 = v0[21];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    return _swift_task_switch(sub_100CECFAC, v2, 0);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "No SharingService available!", v5, 2u);
      swift_slowDealloc();
    }

    sub_10001CEC8();
    swift_allocError();
    strcpy(v6, "SharingService");
    v6[15] = -18;
    swift_willThrow();
    swift_errorRetain();
    unint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      unint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = (void *)swift_slowAlloc();
      *(_DWORD *)unint64_t v9 = 138412290;
      uint64_t v11 = _convertErrorToNSError(_:)();
      v0[15] = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v10 = v11;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Error in handleCircleStopped: %@", v9, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v12 = (uint64_t (*)(void))v0[1];
    return v12();
  }
}

uint64_t sub_100CECFAC()
{
  if (qword_101637680 != -1) {
    swift_once();
  }
  swift_retain();
  AnyCurrentValuePublisher.value.getter();
  swift_release();
  if (*(unsigned char *)(v0 + 224) == 1)
  {
    uint64_t v1 = (void *)swift_task_alloc();
    *(void *)(v0 + 208) = v1;
    *uint64_t v1 = v0;
    v1[1] = sub_100CED378;
    uint64_t v2 = *(void *)(v0 + 160);
    return sub_100105528(v2);
  }
  else
  {
    *(void *)(v0 + 200) = *(void *)(*(void *)(v0 + 168) + 144);
    return _swift_task_switch(sub_100CED0EC, 0, 0);
  }
}

uint64_t sub_100CED0EC()
{
  uint64_t v12 = v0;
  if (v0[25])
  {
    swift_bridgeObjectRetain_n();
    uint64_t v1 = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v1, v2))
    {
      uint64_t v3 = swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      *(_DWORD *)uint64_t v3 = 141558275;
      v0[17] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v3 + 12) = 2081;
      type metadata accessor for UUID();
      swift_bridgeObjectRetain();
      uint64_t v4 = Array.description.getter();
      unint64_t v6 = v5;
      swift_bridgeObjectRelease();
      v0[18] = sub_1008FA0F0(v4, v6, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v1, v2, "Ignoring non-me device handleCircleStopped for identifiers: %{private,mask.hash}s.", (uint8_t *)v3, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();
    }
    else
    {
      swift_bridgeObjectRelease_n();

      swift_release();
    }
    uint64_t v10 = (uint64_t (*)(void))v0[1];
    return v10();
  }
  else
  {
    unint64_t v7 = (void *)swift_task_alloc();
    v0[26] = v7;
    void *v7 = v0;
    v7[1] = sub_100CED378;
    uint64_t v8 = v0[20];
    return sub_100105528(v8);
  }
}

uint64_t sub_100CED378()
{
  *(void *)(*(void *)v1 + 216) = v0;
  swift_task_dealloc();
  if (v0) {
    os_log_type_t v2 = sub_100CED4EC;
  }
  else {
    os_log_type_t v2 = sub_100CED48C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100CED48C()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100CED4EC()
{
  swift_release();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138412290;
    uint64_t v5 = _convertErrorToNSError(_:)();
    *(void *)(v0 + 120) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v4 = v5;
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Error in handleCircleStopped: %@", v3, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  unint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

void sub_100CED680(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *v4;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10);
  uint64_t v13 = &v24[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (sub_100EAEA4C())
  {
    if (qword_101637048 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_100010324(v14, (uint64_t)qword_10170EBB8);
    os_log_t v28 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v15, "handleCircleRequested received by underage account. Ignoring it.", v16, 2u);
      swift_slowDealloc();
    }
    os_log_t v17 = v28;
  }
  else
  {
    os_log_t v28 = (os_log_t)type metadata accessor for Transaction();
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v11 + 16))(&v24[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)], a1, v10);
    uint64_t v18 = *(unsigned __int8 *)(v11 + 80);
    uint64_t v26 = v9;
    uint64_t v27 = a3;
    uint64_t v19 = (v18 + 16) & ~v18;
    unint64_t v20 = (v12 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
    int v25 = a2;
    unint64_t v21 = (v20 + 15) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v22 = swift_allocObject();
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(v11 + 32))(v22 + v19, v13, v10);
    *(void *)(v22 + v20) = v4;
    unint64_t v23 = v22 + v21;
    *(unsigned char *)unint64_t v23 = v25;
    *(void *)(v23 + 8) = v27;
    *(void *)(v23 + 16) = a4;
    *(void *)(v22 + ((v21 + 31) & 0xFFFFFFFFFFFFFFF8)) = v26;
    swift_retain();
    swift_bridgeObjectRetain();
    static Transaction.asyncTask(name:block:)();
    swift_release();
  }
}

uint64_t sub_100CED958(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 496) = a4;
  *(void *)(v5 + 504) = a5;
  *(unsigned char *)(v5 + 1086) = a3;
  *(void *)(v5 + 480) = a1;
  *(void *)(v5 + 488) = a2;
  sub_10000588C(&qword_101639E88);
  *(void *)(v5 + 512) = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_1016607D0);
  *(void *)(v5 + 520) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for OwnerPeerTrust();
  *(void *)(v5 + 528) = v6;
  *(void *)(v5 + 536) = *(void *)(v6 - 8);
  *(void *)(v5 + 544) = swift_task_alloc();
  *(void *)(v5 + 552) = sub_10000588C((uint64_t *)&unk_101638D10);
  *(void *)(v5 + 560) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for OwnerSharingCircle();
  *(void *)(v5 + 568) = v7;
  *(void *)(v5 + 576) = *(void *)(v7 - 8);
  *(void *)(v5 + 584) = swift_task_alloc();
  *(void *)(v5 + 592) = swift_task_alloc();
  *(void *)(v5 + 600) = swift_task_alloc();
  *(void *)(v5 + 608) = swift_task_alloc();
  *(void *)(v5 + 616) = swift_task_alloc();
  *(void *)(v5 + 624) = swift_task_alloc();
  *(void *)(v5 + 632) = swift_task_alloc();
  *(void *)(v5 + 640) = swift_task_alloc();
  *(void *)(v5 + 648) = swift_task_alloc();
  *(void *)(v5 + 656) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for UUID();
  *(void *)(v5 + 664) = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  *(void *)(v5 + 672) = v9;
  *(void *)(v5 + 680) = *(void *)(v9 + 64);
  *(void *)(v5 + 688) = swift_task_alloc();
  *(void *)(v5 + 696) = swift_task_alloc();
  *(void *)(v5 + 704) = swift_task_alloc();
  *(void *)(v5 + 712) = swift_task_alloc();
  return _swift_task_switch(sub_100CEDC0C, 0, 0);
}

uint64_t sub_100CEDC0C()
{
  unint64_t v20 = v0;
  if (qword_101637048 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[89];
  uint64_t v2 = v0[84];
  uint64_t v3 = v0[83];
  uint64_t v4 = v0[60];
  uint64_t v5 = type metadata accessor for Logger();
  v0[90] = v5;
  v0[91] = sub_100010324(v5, (uint64_t)qword_10170EBB8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  v0[92] = v6;
  v0[93] = (v2 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v1, v4, v3);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = v0[89];
  uint64_t v11 = v0[84];
  uint64_t v12 = v0[83];
  if (v9)
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 141558275;
    v0[54] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 12) = 2081;
    sub_100CF8CA4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[49] = sub_1008FA0F0(v14, v15, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v16(v10, v12);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Received handleCircleRequested -- shareIdentifier: %{private,mask.hash}s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v16(v0[89], v0[83]);
  }

  v0[94] = v16;
  uint64_t v17 = v0[61];
  return _swift_task_switch(sub_100CEDEB8, v17, 0);
}

uint64_t sub_100CEDEB8()
{
  if (qword_101637680 != -1) {
    swift_once();
  }
  swift_retain();
  AnyCurrentValuePublisher.value.getter();
  swift_release();
  if (*(unsigned char *)(v0 + 1085) == 1)
  {
    uint64_t v1 = sub_100CEDF98;
  }
  else
  {
    *(void *)(v0 + 760) = *(void *)(*(void *)(v0 + 488) + 144);
    uint64_t v1 = sub_100CEE0D4;
  }
  return _swift_task_switch(v1, 0, 0);
}

uint64_t sub_100CEDF98()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 216, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 240))
  {
    sub_10001CEB0((long long *)(v0 + 216), v0 + 136);
    sub_10001CD44((void *)(v0 + 136), *(void *)(v0 + 160));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_1016390F0 + dword_1016390F0);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 768) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100CEE510;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100CEE0D4()
{
  uint64_t v15 = v0;
  if (*(void *)(v0 + 760))
  {
    (*(void (**)(void, void, void))(v0 + 736))(*(void *)(v0 + 688), *(void *)(v0 + 480), *(void *)(v0 + 664));
    uint64_t v1 = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.default.getter();
    BOOL v3 = os_log_type_enabled(v1, v2);
    uint64_t v4 = *(void *)(v0 + 688);
    uint64_t v5 = *(void *)(v0 + 664);
    if (v3)
    {
      uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v0 + 752);
      uint64_t v6 = swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 141558275;
      *(void *)(v0 + 448) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v6 + 12) = 2081;
      sub_100CF8CA4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 440) = sub_1008FA0F0(v7, v8, &v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v12(v4, v5);
      _os_log_impl((void *)&_mh_execute_header, v1, v2, "Ignoring non-me device handleCircleRequested for identifier: %{private,mask.hash}s.", (uint8_t *)v6, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(v0 + 752))(*(void *)(v0 + 688), *(void *)(v0 + 664));
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
    return v11();
  }
  else
  {
    if (qword_1016375E8 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 216, (uint64_t *)&unk_101638D30);
    if (*(void *)(v0 + 240))
    {
      sub_10001CEB0((long long *)(v0 + 216), v0 + 136);
      sub_10001CD44((void *)(v0 + 136), *(void *)(v0 + 160));
      uint64_t v13 = (uint64_t (__cdecl *)())((char *)&dword_1016390F0 + dword_1016390F0);
      uint64_t v10 = (void *)swift_task_alloc();
      *(void *)(v0 + 768) = v10;
      *uint64_t v10 = v0;
      v10[1] = sub_100CEE510;
      return v13();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_100CEE510(uint64_t a1)
{
  *(void *)(*(void *)v1 + 776) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100CEE610, 0, 0);
}

uint64_t sub_100CEE610()
{
  uint64_t v1 = v0 + 136;
  if (*(void *)(v0 + 776))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 296, (uint64_t *)&unk_101638D30);
    if (*(void *)(v0 + 320))
    {
      sub_10001CEB0((long long *)(v0 + 296), v0 + 256);
      sub_10001CD44((void *)(v0 + 256), *(void *)(v0 + 280));
      unint64_t v8 = (uint64_t (__cdecl *)())((char *)&dword_1016390D8 + dword_1016390D8);
      uint64_t v3 = (void *)swift_task_alloc();
      *(void *)(v0 + 784) = v3;
      void *v3 = v0;
      v3[1] = sub_100CEE8C0;
      return v8();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "No PeerTrustService available!", v6, 2u);
      swift_slowDealloc();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
    return v7();
  }
  return result;
}

uint64_t sub_100CEE8C0(uint64_t a1)
{
  *(void *)(*(void *)v1 + 792) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100CEE9C0, 0, 0);
}

uint64_t sub_100CEE9C0()
{
  uint64_t v1 = (uint64_t)(v0 + 32);
  if (v0[99])
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v2 = v0[99];
    return _swift_task_switch(sub_100CEED58, v2, 0);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      os_log_type_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "No BeaconStoreActor available!", v5, 2u);
      swift_slowDealloc();
    }

    sub_10001CEC8();
    swift_allocError();
    *uint64_t v6 = 0x74536E6F63616542;
    v6[1] = 0xEB0000000065726FLL;
    swift_willThrow();
    swift_release();
    swift_errorRetain();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 138412290;
      uint64_t v11 = _convertErrorToNSError(_:)();
      v0[46] = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v10 = v11;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Error in handleCircleRequested: %@", v9, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = (uint64_t (*)(void))v0[1];
    return v12();
  }
}

uint64_t sub_100CEED58()
{
  *(void *)(v0 + 800) = *(void *)(*(void *)(v0 + 792) + 128);
  return _swift_task_switch(sub_100CEED80, 0, 0);
}

uint64_t sub_100CEED80()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 808) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100CEEE5C;
  uint64_t v2 = *(void *)(v0 + 800);
  return withCheckedContinuation<A>(isolation:function:_:)(v1, 0, 0, 0x696176416E656877, 0xEF2928656C62616CLL, sub_10007561C, v2, (char *)&type metadata for () + 8);
}

uint64_t sub_100CEEE5C()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100CEEF58, 0, 0);
}

uint64_t sub_100CEEF58()
{
  return _swift_task_switch(sub_100CEEF74, *(void *)(v0 + 792), 0);
}

uint64_t sub_100CEEF74()
{
  *(void *)(v0 + 816) = *(void *)(*(void *)(v0 + 792) + 136);
  swift_retain();
  return _swift_task_switch(sub_100CEEFE8, 0, 0);
}

uint64_t sub_100CEEFE8()
{
  uint64_t v1 = v0[102];
  uint64_t v2 = v0[99];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[103] = v3;
  v3[2] = v1;
  v3[3] = sub_100075250;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[104] = v4;
  uint64_t v5 = sub_10000588C(&qword_10163B8C0);
  void *v4 = v0;
  v4[1] = sub_100CEF104;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 45, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1000757B0, v3, v5);
}

uint64_t sub_100CEF104()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 840) = *(void *)(v1 + 360);
  return _swift_task_switch(sub_100CEF260, 0, 0);
}

uint64_t sub_100CEF260()
{
  uint64_t v1 = *(void *)(v0 + 840);
  uint64_t v18 = *(void *)(v1 + 16);
  if (v18)
  {
    unint64_t v2 = 0;
    uint64_t v17 = *(void *)(v0 + 576);
    uint64_t v16 = *(void *)(v0 + 568);
    while (v2 < *(void *)(v1 + 16))
    {
      uint64_t v3 = *(void *)(v0 + 656);
      unint64_t v4 = (*(unsigned __int8 *)(v17 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
      uint64_t v5 = *(void *)(v17 + 72);
      sub_100CF8CEC(*(void *)(v0 + 840) + v4 + v5 * v2, v3, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      uint64_t v6 = *(void *)(v3 + *(int *)(v16 + 32));
      *(unsigned char *)(v0 + 1084) = 2;
      uint64_t v7 = swift_task_alloc();
      *(void *)(v7 + 16) = v0 + 1084;
      swift_bridgeObjectRetain();
      char v8 = sub_100A9FC78((uint64_t (*)(char *))sub_100CF821C, v7, v6);
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      uint64_t v9 = *(void *)(v0 + 656);
      if (v8)
      {
        sub_100CF89F4(v9, *(void *)(v0 + 648), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1000B721C(0, _swiftEmptyArrayStorage[2] + 1, 1);
        }
        unint64_t v11 = _swiftEmptyArrayStorage[2];
        unint64_t v10 = _swiftEmptyArrayStorage[3];
        if (v11 >= v10 >> 1) {
          sub_1000B721C(v10 > 1, v11 + 1, 1);
        }
        uint64_t v12 = *(void *)(v0 + 648);
        _swiftEmptyArrayStorage[2] = v11 + 1;
        sub_100CF89F4(v12, (uint64_t)_swiftEmptyArrayStorage + v4 + v11 * v5, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      }
      else
      {
        sub_100CF8B0C(v9, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      }
      if (v18 == ++v2) {
        goto LABEL_12;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_12:
    swift_bridgeObjectRelease();
    *(void *)(v0 + 848) = _swiftEmptyArrayStorage[2];
    swift_release();
    if (qword_101636CD8 == -1) {
      goto LABEL_13;
    }
  }
  swift_once();
LABEL_13:
  uint64_t v13 = qword_10170E390;
  *(void *)(v0 + 856) = qword_10170E390;
  swift_retain();
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v0 + 864) = v14;
  *uint64_t v14 = v0;
  v14[1] = sub_100CEF55C;
  return unsafeBlocking<A>(_:)(v0 + 376, sub_10001D704, v13, &type metadata for Configuration);
}

uint64_t sub_100CEF55C()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100CEF674, 0, 0);
}

uint64_t sub_100CEF674()
{
  uint64_t v21 = v0;
  unint64_t v1 = *(void *)(v0 + 848);
  unint64_t v2 = sub_1010AC1FC(*(void *)(v0 + 376));
  swift_bridgeObjectRelease();
  if (v1 >= v2)
  {
    (*(void (**)(void, void, void))(v0 + 736))(*(void *)(v0 + 696), *(void *)(v0 + 480), *(void *)(v0 + 664));
    unint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = *(void *)(v0 + 848);
      uint64_t v19 = *(void *)(v0 + 696);
      uint64_t v7 = *(void *)(v0 + 672);
      uint64_t v18 = *(void *)(v0 + 664);
      uint64_t v8 = swift_slowAlloc();
      uint64_t v20 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 134218755;
      *(void *)(v0 + 400) = v6;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v8 + 12) = 2048;
      *(void *)(v0 + 408) = v2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v8 + 22) = 2160;
      *(void *)(v0 + 416) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v8 + 32) = 2081;
      sub_100CF8CA4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 424) = sub_1008FA0F0(v9, v10, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v19, v18);
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Cannot process handleCircleRequested. existingRequests: %ld >= maxPendingRequestSharedItem: %lu,\nshareIdentifier: %{private,mask.hash}s", (uint8_t *)v8, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(void, void))(*(void *)(v0 + 672) + 8))(*(void *)(v0 + 696), *(void *)(v0 + 664));
    }

    type metadata accessor for SPBeaconSharingError(0);
    *(void *)(v0 + 456) = 10;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100CF8CA4((unint64_t *)&qword_1016385F8, 255, type metadata accessor for SPBeaconSharingError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    swift_release();
    swift_release();
    swift_errorRetain();
    unint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 138412290;
      uint64_t v15 = _convertErrorToNSError(_:)();
      *(void *)(v0 + 368) = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v14 = v15;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Error in handleCircleRequested: %@", v13, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
    return v16();
  }
  else
  {
    uint64_t v3 = *(void *)(v0 + 792);
    return _swift_task_switch(sub_100CEFC24, v3, 0);
  }
}

uint64_t sub_100CEFC24()
{
  uint64_t v1 = *(void *)(v0 + 792);
  unint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 736);
  uint64_t v3 = *(void *)(v0 + 704);
  uint64_t v4 = *(void *)(v0 + 672);
  uint64_t v5 = *(void *)(v0 + 664);
  uint64_t v6 = *(void *)(v0 + 480);
  *(void *)(v0 + 872) = *(void *)(v1 + 136);
  v2(v3, v6, v5);
  int v7 = *(_DWORD *)(v4 + 80);
  *(_DWORD *)(v0 + 1072) = v7;
  unint64_t v8 = (v7 + 24) & ~(unint64_t)v7;
  uint64_t v9 = swift_allocObject();
  *(void *)(v0 + 880) = v9;
  *(void *)(v9 + 16) = v1;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))(v9 + v8, v3, v5);
  swift_retain();
  return _swift_task_switch(sub_100CEFD20, 0, 0);
}

uint64_t sub_100CEFD20()
{
  uint64_t v1 = v0[110];
  uint64_t v2 = v0[109];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[111] = v3;
  v3[2] = v2;
  v3[3] = sub_100CF8238;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[112] = v4;
  void *v4 = v0;
  v4[1] = sub_100CEFE2C;
  uint64_t v5 = v0[70];
  uint64_t v6 = v0[69];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100090D14, v3, v6);
}

uint64_t sub_100CEFE2C()
{
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_100CEFF60, 0, 0);
}

uint64_t sub_100CEFF60()
{
  uint64_t v1 = *(void *)(v0 + 560);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)(v0 + 576) + 48))(v1, 1, *(void *)(v0 + 568)) == 1)
  {
    sub_10001DAB4(v1, (uint64_t *)&unk_101638D10);
    sub_100CF7910();
    swift_allocError();
    *uint64_t v2 = 7;
    swift_willThrow();
    swift_release();
    swift_release();
    swift_errorRetain();
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      uint64_t v6 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 138412290;
      uint64_t v7 = _convertErrorToNSError(_:)();
      *(void *)(v0 + 368) = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v6 = v7;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Error in handleCircleRequested: %@", v5, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
    return v13();
  }
  else
  {
    sub_100CF89F4(v1, *(void *)(v0 + 640), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v8 = (void *)swift_task_alloc();
    *(void *)(v0 + 904) = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_100CF0300;
    uint64_t v9 = *(void *)(v0 + 496);
    uint64_t v10 = *(void *)(v0 + 504);
    uint64_t v11 = *(unsigned __int8 *)(v0 + 1086);
    return sub_100EA2DF0(v11, v9, v10);
  }
}

uint64_t sub_100CF0300(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 912) = a1;
  *(void *)(v3 + 920) = v1;
  swift_task_dealloc();
  if (v1) {
    os_log_type_t v4 = sub_100CF2A88;
  }
  else {
    os_log_type_t v4 = sub_100CF0418;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100CF0418()
{
  uint64_t v1 = *(void *)(v0 + 912);
  if (*(void *)(v1 + 16))
  {
    uint64_t v2 = *(unsigned __int8 *)(*(void *)(v0 + 536) + 80);
    sub_100CF8CEC(v1 + ((v2 + 32) & ~v2), *(void *)(v0 + 520), (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = 1;
  }
  uint64_t v4 = *(void *)(v0 + 536);
  uint64_t v5 = *(void *)(v0 + 528);
  uint64_t v6 = *(void *)(v0 + 520);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v6, v3, 1, v5);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v6, 1, v5) == 1)
  {
    uint64_t v7 = *(void *)(v0 + 640);
    sub_10001DAB4(*(void *)(v0 + 520), (uint64_t *)&unk_1016607D0);
    sub_100CF7910();
    swift_allocError();
    *uint64_t v8 = 7;
    swift_willThrow();
    swift_release();
    swift_release();
    sub_100CF8B0C(v7, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    swift_errorRetain();
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      os_log_type_t v12 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v11 = 138412290;
      uint64_t v13 = _convertErrorToNSError(_:)();
      *(void *)(v0 + 368) = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t v12 = v13;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Error in handleCircleRequested: %@", v11, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v22 = *(uint64_t (**)(void))(v0 + 8);
    return v22();
  }
  else
  {
    uint64_t v14 = *(void *)(v0 + 640);
    uint64_t v15 = *(void *)(v0 + 568);
    sub_100CF89F4(*(void *)(v0 + 520), *(void *)(v0 + 544), (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
    sub_100B958BC();
    sub_100B95910();
    uint64_t v16 = static CaseIterable<>.allMembers.getter();
    uint64_t v17 = sub_1008A5510((uint64_t)&off_1015A5A18, v16);
    *(void *)(v0 + 928) = v17;
    uint64_t v18 = *(int *)(v15 + 24);
    *(_DWORD *)(v0 + 1076) = v18;
    uint64_t v19 = v14 + v18;
    uint64_t v20 = (void *)swift_task_alloc();
    *(void *)(v0 + 936) = v20;
    *uint64_t v20 = v0;
    v20[1] = sub_100CF089C;
    return sub_100E59F38(v19, (uint64_t)v17);
  }
}

uint64_t sub_100CF089C(uint64_t a1)
{
  *(void *)(*(void *)v1 + 944) = a1;
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100CF09BC, 0, 0);
}

uint64_t sub_100CF09BC()
{
  uint64_t v72 = v0;
  uint64_t v1 = *(void *)(v0 + 944);
  uint64_t v2 = *(void *)(v0 + 920);
  uint64_t v3 = *(void *)(v0 + 544);
  uint64_t v4 = (void *)swift_task_alloc();
  v4[2] = v3;
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_1000A3E84((uint64_t (*)(char *))sub_100CF8250, v4, v1);
  swift_task_dealloc();
  uint64_t v6 = *(void *)(v5 + 16);
  swift_bridgeObjectRelease();
  if (v6)
  {
    swift_bridgeObjectRelease();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Already requested by the sharee.", v9, 2u);
      swift_slowDealloc();
    }
    uint64_t v10 = *(void *)(v0 + 640);
    uint64_t v11 = *(void *)(v0 + 544);

    swift_release();
    swift_release();
    sub_100CF8B0C(v10, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    sub_100CF8B0C(v11, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
    goto LABEL_14;
  }
  uint64_t v12 = *(unsigned __int8 *)(v0 + 1072);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 736);
  uint64_t v14 = *(void *)(v0 + 664);
  uint64_t v15 = *(void *)(v0 + 544);
  uint64_t v16 = *(void *)(v0 + 528);
  sub_10000588C(&qword_10163BC50);
  uint64_t v17 = (v12 + 32) & ~v12;
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_101342130;
  v13(v18 + v17, v15 + *(int *)(v16 + 20), v14);
  uint64_t v19 = sub_100DF29F8(v18);
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  if (!v19[2])
  {
    uint64_t v27 = *(void *)(v0 + 672);
    uint64_t v28 = *(void *)(v0 + 664);
    type metadata accessor for BeaconSharingCircleTransformer.Error();
    sub_100CF8CA4(&qword_101639EF0, 255, (void (*)(uint64_t))type metadata accessor for BeaconSharingCircleTransformer.Error);
    swift_allocError();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v27 + 56))(v29, 1, 1, v28);
    swift_willThrow();
LABEL_11:
    uint64_t v30 = *(void *)(v0 + 544);
    sub_100CF8B0C(*(void *)(v0 + 640), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    sub_100CF8B0C(v30, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
    swift_errorRetain();
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = (uint8_t *)swift_slowAlloc();
      uint64_t v34 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v33 = 138412290;
      uint64_t v35 = _convertErrorToNSError(_:)();
      *(void *)(v0 + 368) = v35;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v34 = v35;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Error in handleCircleRequested: %@", v33, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
LABEL_14:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v36 = *(uint64_t (**)(void))(v0 + 8);
    return v36();
  }
  uint64_t v20 = sub_1002AD974(*(void *)(v0 + 640) + *(int *)(v0 + 1076), (unint64_t)v19, 2, *(void *)(v0 + 944), 0, 2, 2);
  *(void *)(v0 + 952) = v20;
  if (v2) {
    goto LABEL_11;
  }
  uint64_t v22 = v20;
  uint64_t v23 = v21;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v67 = *(void *)(v23 + 16);
  if (v67)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = swift_slowAlloc();
      *(_DWORD *)uint64_t v26 = 134218240;
      *(void *)(v0 + 464) = *(void *)(v23 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v26 + 12) = 2048;
      *(void *)(v0 + 472) = *(void *)(v22 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Not empty circlesToDelete list on share request transformation! Count of items to delete: %ld, items to create: %ld", (uint8_t *)v26, 0x16u);
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v68 = v23;
  uint64_t v38 = v22;
  uint64_t v39 = *(void *)(v22 + 16);
  *(void *)(v0 + 960) = v39;
  uint64_t v66 = v38;
  if (v39)
  {
    uint64_t v40 = *(void *)(v0 + 576);
    uint64_t v41 = v38 + ((*(unsigned __int8 *)(v40 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v40 + 80));
    uint64_t v42 = *(void *)(v40 + 72);
    swift_bridgeObjectRetain();
    uint64_t v69 = v42;
    do
    {
      uint64_t v43 = *(void *)(v0 + 632);
      uint64_t v44 = *(void *)(v0 + 624);
      sub_100CF8CEC(v41, v43, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      sub_100CF8CEC(v43, v44, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      uint64_t v45 = Logger.logObject.getter();
      os_log_type_t v46 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v45, v46))
      {
        uint64_t v47 = *(void *)(v0 + 624);
        uint64_t v48 = swift_slowAlloc();
        v71[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v48 = 141558275;
        *(void *)(v48 + 4) = 1752392040;
        *(_WORD *)(v48 + 12) = 2081;
        sub_100CF8CA4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v42 = v69;
        uint64_t v49 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v48 + 14) = sub_1008FA0F0(v49, v50, v71);
        swift_bridgeObjectRelease();
        sub_100CF8B0C(v47, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        _os_log_impl((void *)&_mh_execute_header, v45, v46, "Data update on circle request. Create %{private,mask.hash}s", (uint8_t *)v48, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_100CF8B0C(*(void *)(v0 + 624), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      }

      sub_100CF8B0C(*(void *)(v0 + 632), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      v41 += v42;
      --v39;
    }
    while (v39);
    swift_bridgeObjectRelease();
  }
  uint64_t v51 = v68;
  if (v67)
  {
    uint64_t v52 = *(void *)(v0 + 576);
    uint64_t v53 = v68 + ((*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80));
    uint64_t v54 = *(void *)(v52 + 72);
    swift_bridgeObjectRetain();
    uint64_t v55 = v67;
    uint64_t v70 = v54;
    do
    {
      uint64_t v56 = *(void *)(v0 + 616);
      uint64_t v57 = *(void *)(v0 + 608);
      sub_100CF8CEC(v53, v56, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      sub_100CF8CEC(v56, v57, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      uint64_t v58 = Logger.logObject.getter();
      os_log_type_t v59 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v58, v59))
      {
        uint64_t v60 = *(void *)(v0 + 608);
        uint64_t v61 = swift_slowAlloc();
        v71[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v61 = 141558275;
        *(void *)(v61 + 4) = 1752392040;
        *(_WORD *)(v61 + 12) = 2081;
        sub_100CF8CA4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v54 = v70;
        uint64_t v62 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v61 + 14) = sub_1008FA0F0(v62, v63, v71);
        swift_bridgeObjectRelease();
        sub_100CF8B0C(v60, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        _os_log_impl((void *)&_mh_execute_header, v58, v59, "Data update on circle request. Delete %{private,mask.hash}s", (uint8_t *)v61, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_100CF8B0C(*(void *)(v0 + 608), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      }

      sub_100CF8B0C(*(void *)(v0 + 616), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      v53 += v54;
      --v55;
    }
    while (v55);
    uint64_t v51 = v68;
    swift_bridgeObjectRelease();
  }
  uint64_t v64 = *(void *)(v0 + 512);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_100EE0458(v51, v66, v64);
  swift_bridgeObjectRelease();
  uint64_t v65 = *(void *)(v0 + 792);
  return _swift_task_switch(sub_100CF1578, v65, 0);
}

uint64_t sub_100CF1578()
{
  *(void *)(v0 + 968) = *(void *)(*(void *)(v0 + 792) + 128);
  return _swift_task_switch(sub_100CF15A0, 0, 0);
}

uint64_t sub_100CF15A0()
{
  uint64_t v1 = v0[121];
  uint64_t v2 = v0[64];
  uint64_t v3 = swift_task_alloc();
  v0[122] = v3;
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[123] = v4;
  void *v4 = v0;
  v4[1] = sub_100CF1698;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v4, 0, 0, 0xD000000000000011, 0x80000001013F27F0, sub_1000757B8, v3, (char *)&type metadata for () + 8);
}

uint64_t sub_100CF1698()
{
  *(void *)(*(void *)v1 + 992) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100CF18A0;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_100CF17B4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100CF17B4()
{
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 96, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 120))
  {
    sub_10001CEB0((long long *)(v0 + 96), v0 + 176);
    sub_10001CD44((void *)(v0 + 176), *(void *)(v0 + 200));
    uint64_t v3 = (uint64_t (*)(void))((char *)&dword_101639228 + dword_101639228);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 1000) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100CF1C54;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100CF18A0()
{
  swift_task_dealloc();
  uint64_t v1 = *(void *)(v0 + 792);
  return _swift_task_switch(sub_100CF1908, v1, 0);
}

uint64_t sub_100CF1908()
{
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100CF1970, 0, 0);
}

uint64_t sub_100CF1970()
{
  uint64_t v1 = v0[80];
  uint64_t v2 = v0[68];
  uint64_t v3 = v0[64];
  swift_release();
  swift_release();
  sub_10001DAB4(v3, &qword_101639E88);
  sub_100CF8B0C(v1, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  sub_100CF8B0C(v2, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
  swift_errorRetain();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 138412290;
    uint64_t v8 = _convertErrorToNSError(_:)();
    v0[46] = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v7 = v8;
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error in handleCircleRequested: %@", v6, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_100CF1C54(uint64_t a1)
{
  *(void *)(*(void *)v1 + 1008) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100CF1D54, 0, 0);
}

uint64_t sub_100CF1D54()
{
  uint64_t v1 = *(void *)(v0 + 1008);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 176);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 1008);
    swift_retain();
    uint64_t v3 = (uint64_t)sub_100CF1E9C;
    uint64_t v4 = v2;
    uint64_t v5 = 0;
    return _swift_task_switch(v3, v4, v5);
  }
  uint64_t v3 = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 16, (uint64_t *)&unk_101638D30);
  if (!*(void *)(v0 + 40))
  {
    __break(1u);
    return _swift_task_switch(v3, v4, v5);
  }
  sub_10001CEB0((long long *)(v0 + 16), v0 + 56);
  sub_10001CD44((void *)(v0 + 56), *(void *)(v0 + 80));
  uint64_t v8 = (uint64_t (*)(void))((char *)&dword_1016391F8 + dword_1016391F8);
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 1016) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_100CF206C;
  return v8();
}

uint64_t sub_100CF1E9C()
{
  type metadata accessor for Transaction();
  swift_allocObject();
  swift_weakInit();
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  swift_release_n();
  swift_release();
  return _swift_task_switch(sub_100CF1F80, 0, 0);
}

uint64_t sub_100CF1F80()
{
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 16, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 40))
  {
    sub_10001CEB0((long long *)(v0 + 16), v0 + 56);
    sub_10001CD44((void *)(v0 + 56), *(void *)(v0 + 80));
    uint64_t v3 = (uint64_t (*)(void))((char *)&dword_1016391F8 + dword_1016391F8);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 1016) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100CF206C;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100CF206C(uint64_t a1)
{
  *(void *)(*(void *)v1 + 1024) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100CF216C, 0, 0);
}

uint64_t sub_100CF216C()
{
  if (!*(void *)(v0 + 1024))
  {
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 56);
    if (qword_101636FA0 == -1)
    {
LABEL_18:
      sub_100010324(*(void *)(v0 + 720), (uint64_t)qword_10170EA60);
      uint64_t v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v22, v23))
      {
        uint64_t v24 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v24 = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "No ItemSharingNotificationsService available!", v24, 2u);
        swift_slowDealloc();
      }
      uint64_t v25 = *(void *)(v0 + 640);
      uint64_t v26 = *(void *)(v0 + 544);
      uint64_t v27 = *(void *)(v0 + 512);

      goto LABEL_22;
    }
LABEL_26:
    swift_once();
    goto LABEL_18;
  }
  uint64_t v1 = *(void *)(v0 + 960);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 56);
  if (v1)
  {
    unint64_t v2 = 0;
    uint64_t v3 = *(void *)(v0 + 576);
    uint64_t v4 = *(void *)(v0 + 568);
    while (1)
    {
      uint64_t v5 = *(void *)(v0 + 952);
      if (v2 >= *(void *)(v5 + 16)) {
        break;
      }
      uint64_t v6 = *(void *)(v0 + 600);
      unint64_t v7 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
      uint64_t v8 = *(void *)(v3 + 72);
      sub_100CF8CEC(v5 + v7 + v8 * v2, v6, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      uint64_t v9 = *(void *)(v0 + 600);
      if (*(unsigned char *)(v6 + *(int *)(v4 + 28)) == 2)
      {
        sub_100CF89F4(v9, *(void *)(v0 + 592), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1000B721C(0, _swiftEmptyArrayStorage[2] + 1, 1);
        }
        unint64_t v11 = _swiftEmptyArrayStorage[2];
        unint64_t v10 = _swiftEmptyArrayStorage[3];
        if (v11 >= v10 >> 1) {
          sub_1000B721C(v10 > 1, v11 + 1, 1);
        }
        uint64_t v12 = *(void *)(v0 + 592);
        _swiftEmptyArrayStorage[2] = v11 + 1;
        sub_100CF89F4(v12, (uint64_t)_swiftEmptyArrayStorage + v7 + v11 * v8, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      }
      else
      {
        sub_100CF8B0C(v9, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      }
      if (++v2 == *(void *)(v0 + 960)) {
        goto LABEL_13;
      }
    }
    __break(1u);
    goto LABEL_26;
  }
LABEL_13:
  swift_bridgeObjectRelease();
  *(void *)(v0 + 1032) = _swiftEmptyArrayStorage;
  uint64_t v13 = _swiftEmptyArrayStorage[2];
  *(void *)(v0 + 1040) = v13;
  if (v13)
  {
    uint64_t v14 = *(void *)(v0 + 576);
    uint64_t v15 = *(void *)(v0 + 504);
    uint64_t v16 = *(unsigned __int8 *)(v0 + 1086);
    int v17 = *(_DWORD *)(v14 + 80);
    *(_DWORD *)(v0 + 1080) = v17;
    *(void *)(v0 + 1048) = *(void *)(v14 + 72);
    *(void *)(v0 + 1056) = 0;
    sub_100CF8CEC((uint64_t)_swiftEmptyArrayStorage + ((v17 + 32) & ~(unint64_t)v17), *(void *)(v0 + 584), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v18 = (void *)swift_task_alloc();
    *(void *)(v0 + 1064) = v18;
    *uint64_t v18 = v0;
    v18[1] = sub_100CF2680;
    uint64_t v19 = *(void *)(v0 + 584);
    uint64_t v20 = *(void *)(v0 + 496);
    return sub_100B82710(v19, v16, v20, v15);
  }
  uint64_t v25 = *(void *)(v0 + 640);
  uint64_t v26 = *(void *)(v0 + 544);
  uint64_t v27 = *(void *)(v0 + 512);
  swift_release();
  swift_release();
LABEL_22:
  swift_release();
  swift_release();
  swift_release();
  sub_10001DAB4(v27, &qword_101639E88);
  sub_100CF8B0C(v25, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  sub_100CF8B0C(v26, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v28 = *(uint64_t (**)(void))(v0 + 8);
  return v28();
}

uint64_t sub_100CF2680()
{
  swift_task_dealloc();
  if (v0)
  {
    swift_errorRelease();
    uint64_t v1 = sub_100CF8EB0;
  }
  else
  {
    uint64_t v1 = sub_100CF2798;
  }
  return _swift_task_switch(v1, 0, 0);
}

uint64_t sub_100CF2798()
{
  uint64_t v1 = *(void *)(v0 + 1040);
  uint64_t v2 = *(void *)(v0 + 1056) + 1;
  sub_100CF8B0C(*(void *)(v0 + 584), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  if (v2 == v1)
  {
    uint64_t v3 = *(void *)(v0 + 640);
    uint64_t v4 = *(void *)(v0 + 544);
    uint64_t v5 = *(void *)(v0 + 512);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_10001DAB4(v5, &qword_101639E88);
    sub_100CF8B0C(v3, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    sub_100CF8B0C(v4, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v6 = *(uint64_t (**)(void))(v0 + 8);
    return v6();
  }
  else
  {
    uint64_t v8 = *(void *)(v0 + 1056) + 1;
    *(void *)(v0 + 1056) = v8;
    uint64_t v9 = *(void *)(v0 + 504);
    uint64_t v10 = *(unsigned __int8 *)(v0 + 1086);
    sub_100CF8CEC(*(void *)(v0 + 1032)+ ((*(unsigned __int8 *)(v0 + 1080) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1080))+ *(void *)(v0 + 1048) * v8, *(void *)(v0 + 584), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    unint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 1064) = v11;
    void *v11 = v0;
    v11[1] = sub_100CF2680;
    uint64_t v12 = *(void *)(v0 + 584);
    uint64_t v13 = *(void *)(v0 + 496);
    return sub_100B82710(v12, v10, v13, v9);
  }
}

uint64_t sub_100CF2A88()
{
  uint64_t v1 = v0[80];
  swift_release();
  swift_release();
  sub_100CF8B0C(v1, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    uint64_t v6 = _convertErrorToNSError(_:)();
    v0[46] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Error in handleCircleRequested: %@", v4, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

BOOL sub_100CF2D38(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OwnerSharingCircle();
  v10[2] = a2;
  uint64_t v5 = swift_bridgeObjectRetain();
  uint64_t v6 = sub_100CF85F8(v5, (uint64_t (*)(char *, void))sub_100CF8300, (uint64_t)v10);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(v6 + 16);
  swift_release();
  return *(unsigned char *)(a1 + *(int *)(v4 + 36)) == 2 && v7 != 0;
}

uint64_t sub_100CF2DEC(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a3;
  HIDWORD(v17) = a2;
  uint64_t v7 = *v4;
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Transaction();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, v8);
  unint64_t v12 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v13 = (v10 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v14 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v14 + v12, v11, v8);
  unint64_t v15 = v14 + v13;
  *(unsigned char *)unint64_t v15 = BYTE4(v17);
  *(void *)(v15 + 8) = v18;
  *(void *)(v15 + 16) = a4;
  *(void *)(v14 + ((v13 + 31) & 0xFFFFFFFFFFFFFFF8)) = v7;
  swift_bridgeObjectRetain();
  static Transaction.asyncTask(name:block:)();
  return swift_release();
}

uint64_t sub_100CF2FB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[5] = a1;
  uint64_t v9 = type metadata accessor for UUID();
  v4[6] = v9;
  v4[7] = *(void *)(v9 - 8);
  v4[8] = swift_task_alloc();
  unint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_101641F50 + dword_101641F50);
  uint64_t v10 = (void *)swift_task_alloc();
  v4[9] = v10;
  *uint64_t v10 = v4;
  v10[1] = sub_100CF30E4;
  return v12(a1, a2, a3, a4);
}

uint64_t sub_100CF30E4()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_100CF3220, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    os_log_type_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_100CF3220()
{
  uint64_t v22 = v0;
  if (qword_101637048 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[7];
  uint64_t v2 = v0[8];
  uint64_t v4 = v0[6];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170EBB8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = v0[7];
  uint64_t v9 = v0[8];
  uint64_t v11 = v0[6];
  if (v8)
  {
    log = v6;
    os_log_type_t type = v7;
    uint64_t v12 = swift_slowAlloc();
    uint64_t v18 = (void *)swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 141558531;
    v0[2] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2081;
    sub_100CF8CA4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[3] = sub_1008FA0F0(v13, v14, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    *(_WORD *)(v12 + 22) = 2114;
    swift_errorRetain();
    uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
    v0[4] = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v18 = v15;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, type, "Cannot handle stop from sharee to owner for delegated share %{private,mask.hash}s, %{public}@.", (uint8_t *)v12, 0x20u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  uint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

uint64_t sub_100CF358C(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  return _swift_task_switch(sub_100CF35AC, v1, 0);
}

uint64_t sub_100CF35AC()
{
  uint64_t v11 = v0;
  if (qword_101637048 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170EBB8);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    sub_100551D08();
    swift_bridgeObjectRetain();
    uint64_t v5 = Set.description.getter();
    unint64_t v7 = v6;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 16) = sub_1008FA0F0(v5, v7, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Messaging accounts changed. Accounts: %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  BOOL v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_100CF37CC(uint64_t a1)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = v1;
  return _swift_task_switch(sub_100CF37EC, v1, 0);
}

uint64_t sub_100CF37EC()
{
  unint64_t v14 = v0;
  if (qword_101637048 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170EBB8);
  swift_bridgeObjectRetain_n();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = v0[3];
  if (v4)
  {
    uint64_t v6 = swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315394;
    sub_100CF61D4();
    swift_bridgeObjectRetain();
    uint64_t v7 = Set.description.getter();
    unint64_t v9 = v8;
    swift_bridgeObjectRelease();
    v0[2] = sub_1008FA0F0(v7, v9, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v6 + 12) = 2048;
    uint64_t v10 = *(void *)(v5 + 16);
    swift_bridgeObjectRelease();
    v0[2] = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Messaging devices changed. Devices: %s, count: %ld.", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  *(void *)(v0[4] + 144) = *(void *)(v0[3] + 16);
  uint64_t v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_100CF3A40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_10165CD80 + dword_10165CD80);
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v6 + 16) = v11;
  void *v11 = v6;
  v11[1] = sub_100033F68;
  return v13(a3, a4, a5, a6);
}

uint64_t sub_100CF3B14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13 = a6[1];
  uint64_t v14 = a6[2];
  uint64_t v19 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_10165CC80 + dword_10165CC80);
  uint64_t v15 = a6[3];
  uint64_t v16 = *(unsigned __int8 *)a6;
  uint64_t v17 = (void *)swift_task_alloc();
  *(void *)(v8 + 16) = v17;
  void *v17 = v8;
  v17[1] = sub_100033F68;
  return v19(a3, a4, a5, v16, v13, v14, v15, a7, a8);
}

uint64_t sub_100CF3C14(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100033F68;
  v5[3] = a1;
  return _swift_task_switch(sub_100CF35AC, v4, 0);
}

uint64_t sub_100CF3CC4(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100033F68;
  v5[3] = a1;
  v5[4] = v4;
  return _swift_task_switch(sub_100CF37EC, v4, 0);
}

uint64_t sub_100CF3D74(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100CF8CA4(&qword_10165CC40, a2, (void (*)(uint64_t))type metadata accessor for CircleTrustService);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100CF3DCC()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100CF3E0C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_100033F68;
  return sub_100CD7BB8(a1, v4, v5, v6);
}

uint64_t sub_100CF3ECC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170EBD0);
  sub_100010324(v0, (uint64_t)qword_10170EBD0);
  return Logger.init(subsystem:category:)();
}

void sub_100CF3F50(uint64_t *a1, void (*a2)(char *), uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = sub_10000588C((uint64_t *)&unk_10163B7C0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (uint64_t *)((char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = type metadata accessor for MemberSharingCircle();
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *a1;
  unint64_t v17 = a1[1];
  switch(v17 >> 62)
  {
    case 1uLL:
      if ((int)v18 != v18 >> 32) {
        goto LABEL_3;
      }
      goto LABEL_10;
    case 2uLL:
      if (*(void *)(v18 + 16) == *(void *)(v18 + 24)) {
        goto LABEL_10;
      }
      goto LABEL_3;
    case 3uLL:
      goto LABEL_10;
    default:
      if ((v17 & 0xFF000000000000) == 0)
      {
LABEL_10:
        sub_100CF7ADC();
        swift_allocError();
        *uint64_t v28 = 2;
        swift_willThrow();
        return;
      }
LABEL_3:
      uint64_t v51 = a2;
      uint64_t v52 = v11;
      uint64_t v47 = v14;
      uint64_t v48 = v13;
      uint64_t v50 = a3;
      Class v20 = sub_101155AC4((uint64_t)a1);
      if (v4)
      {
        __break(1u);
        JUMPOUT(0x100CF455CLL);
      }
      Class v21 = v20;
      Class v56 = v21;
      uint64_t v49 = (uint64_t *)(v5 + 24);
      swift_beginAccess();
      uint64_t v22 = *(void *)(v5 + 24);
      uint64_t v23 = v21;
      swift_bridgeObjectRetain();
      id v24 = [(objc_class *)v23 recordID];
      uint64_t v25 = v24;
      if ((v22 & 0xC000000000000001) != 0)
      {
        id v26 = v24;
        char v27 = __CocoaDictionary.contains(_:)();
        swift_bridgeObjectRelease();

        if (v27) {
          goto LABEL_17;
        }
      }
      else if (*(void *)(v22 + 16))
      {
        sub_100724354((uint64_t)v24);
        char v30 = v29;
        swift_bridgeObjectRelease();

        if (v30) {
          goto LABEL_17;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      swift_beginAccess();
      uint64_t v31 = *(void *)(v5 + 16);
      swift_bridgeObjectRetain();
      id v32 = [(objc_class *)v23 recordID];
      uint64_t v33 = v32;
      if (*(void *)(v31 + 16))
      {
        sub_100724354((uint64_t)v32);
        char v35 = v34;
        swift_bridgeObjectRelease();

        uint64_t v36 = v52;
        if (v35)
        {
LABEL_17:

          sub_100CF7ADC();
          swift_allocError();
          *uint64_t v37 = 4;
          swift_willThrow();

          return;
        }
      }
      else
      {
        swift_bridgeObjectRelease();

        uint64_t v36 = v52;
      }
      if (qword_1016371D8 != -1) {
        swift_once();
      }
      uint64_t v53 = 0x7365547265646E75;
      unint64_t v54 = 0xE900000000000074;
      SynchronousCache.cachedValue<A>(key:computeBlock:)();
      swift_bridgeObjectRelease();
      uint64_t v38 = v49;
      if (v55 == 1)
      {
        id v39 = [(objc_class *)v23 valueStore];
        [v39 resetChangedKeys];

        id v40 = [(objc_class *)v23 encryptedValueStore];
        [v40 resetChangedKeys];
      }
      id v41 = [(objc_class *)v23 recordID];

      uint64_t v42 = *v38;
      swift_bridgeObjectRetain();
      uint64_t v43 = sub_1000F78E4(v41, v42);

      swift_bridgeObjectRelease();
      if (v43)
      {
        sub_1002C302C(v43, v36);
        (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v47 + 56))(v36, 0, 1, v48);
        sub_100CF89F4((uint64_t)v36, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      }
      else
      {
        sub_100CF8CEC((uint64_t)a1, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      }
      v51(v16);
      sub_100EE0E4C((id *)&v56, (uint64_t)v16);
      if (sub_1002C51D4((uint64_t)a1, (uint64_t)v16))
      {
        sub_100CF8B0C((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
        Class v44 = v56;
      }
      else
      {
        Class v45 = v56;
        id v46 = [(objc_class *)v56 recordID];
        swift_beginAccess();
        Class v44 = v45;
        sub_100EE7DC4((uint64_t)v44, (uint64_t)v46);
        swift_endAccess();

        sub_100CF8B0C((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
      }

      return;
  }
}

void sub_100CF456C(uint64_t *a1, void (*a2)(char *), uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = sub_10000588C((uint64_t *)&unk_101638D10);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (uint64_t *)((char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = type metadata accessor for OwnerSharingCircle();
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *a1;
  unint64_t v17 = a1[1];
  switch(v17 >> 62)
  {
    case 1uLL:
      if ((int)v18 != v18 >> 32) {
        goto LABEL_3;
      }
      goto LABEL_10;
    case 2uLL:
      if (*(void *)(v18 + 16) == *(void *)(v18 + 24)) {
        goto LABEL_10;
      }
      goto LABEL_3;
    case 3uLL:
      goto LABEL_10;
    default:
      if ((v17 & 0xFF000000000000) == 0)
      {
LABEL_10:
        sub_100CF7ADC();
        swift_allocError();
        *uint64_t v28 = 2;
        swift_willThrow();
        return;
      }
LABEL_3:
      uint64_t v51 = a2;
      uint64_t v52 = v11;
      uint64_t v47 = v14;
      uint64_t v48 = v13;
      uint64_t v50 = a3;
      Class v20 = sub_1011553E4((uint64_t)a1);
      if (v4)
      {
        __break(1u);
        JUMPOUT(0x100CF4B78);
      }
      Class v21 = v20;
      Class v56 = v21;
      uint64_t v49 = (uint64_t *)(v5 + 24);
      swift_beginAccess();
      uint64_t v22 = *(void *)(v5 + 24);
      uint64_t v23 = v21;
      swift_bridgeObjectRetain();
      id v24 = [(objc_class *)v23 recordID];
      uint64_t v25 = v24;
      if ((v22 & 0xC000000000000001) != 0)
      {
        id v26 = v24;
        char v27 = __CocoaDictionary.contains(_:)();
        swift_bridgeObjectRelease();

        if (v27) {
          goto LABEL_17;
        }
      }
      else if (*(void *)(v22 + 16))
      {
        sub_100724354((uint64_t)v24);
        char v30 = v29;
        swift_bridgeObjectRelease();

        if (v30) {
          goto LABEL_17;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      swift_beginAccess();
      uint64_t v31 = *(void *)(v5 + 16);
      swift_bridgeObjectRetain();
      id v32 = [(objc_class *)v23 recordID];
      uint64_t v33 = v32;
      if (*(void *)(v31 + 16))
      {
        sub_100724354((uint64_t)v32);
        char v35 = v34;
        swift_bridgeObjectRelease();

        uint64_t v36 = v52;
        if (v35)
        {
LABEL_17:

          sub_100CF7ADC();
          swift_allocError();
          *uint64_t v37 = 4;
          swift_willThrow();

          return;
        }
      }
      else
      {
        swift_bridgeObjectRelease();

        uint64_t v36 = v52;
      }
      if (qword_1016371D8 != -1) {
        swift_once();
      }
      uint64_t v53 = 0x7365547265646E75;
      unint64_t v54 = 0xE900000000000074;
      SynchronousCache.cachedValue<A>(key:computeBlock:)();
      swift_bridgeObjectRelease();
      uint64_t v38 = v49;
      if (v55 == 1)
      {
        id v39 = [(objc_class *)v23 valueStore];
        [v39 resetChangedKeys];

        id v40 = [(objc_class *)v23 encryptedValueStore];
        [v40 resetChangedKeys];
      }
      id v41 = [(objc_class *)v23 recordID];

      uint64_t v42 = *v38;
      swift_bridgeObjectRetain();
      uint64_t v43 = sub_1000F78E4(v41, v42);

      swift_bridgeObjectRelease();
      if (v43)
      {
        sub_100DF469C(v43, v36);
        (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v47 + 56))(v36, 0, 1, v48);
        sub_100CF89F4((uint64_t)v36, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      }
      else
      {
        sub_100CF8CEC((uint64_t)a1, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      }
      v51(v16);
      sub_100EE1618((id *)&v56, (uint64_t)v16);
      if (sub_100DF98B0((uint64_t)a1, (uint64_t)v16))
      {
        sub_100CF8B0C((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        Class v44 = v56;
      }
      else
      {
        Class v45 = v56;
        id v46 = [(objc_class *)v56 recordID];
        swift_beginAccess();
        Class v44 = v45;
        sub_100EE7DC4((uint64_t)v44, (uint64_t)v46);
        swift_endAccess();

        sub_100CF8B0C((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      }

      return;
  }
}

void sub_100CF4B88(uint64_t *a1, void (*a2)(char *), uint64_t a3)
{
  uint64_t v5 = v3;
  uint64_t v9 = sub_10000588C((uint64_t *)&unk_101653D50);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (uint64_t *)((char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *a1;
  unint64_t v17 = a1[1];
  switch(v17 >> 62)
  {
    case 1uLL:
      if ((int)v18 != v18 >> 32) {
        goto LABEL_3;
      }
      goto LABEL_10;
    case 2uLL:
      if (*(void *)(v18 + 16) == *(void *)(v18 + 24)) {
        goto LABEL_10;
      }
      goto LABEL_3;
    case 3uLL:
      goto LABEL_10;
    default:
      if ((v17 & 0xFF000000000000) == 0)
      {
LABEL_10:
        sub_100CF7ADC();
        swift_allocError();
        *uint64_t v28 = 2;
        swift_willThrow();
        return;
      }
LABEL_3:
      uint64_t v51 = a2;
      uint64_t v52 = v11;
      uint64_t v47 = v14;
      uint64_t v48 = v13;
      uint64_t v50 = a3;
      Class v20 = sub_101155754((uint64_t)a1);
      if (v4)
      {
        __break(1u);
        JUMPOUT(0x100CF5194);
      }
      Class v21 = v20;
      Class v56 = v21;
      uint64_t v49 = (uint64_t *)(v5 + 24);
      swift_beginAccess();
      uint64_t v22 = *(void *)(v5 + 24);
      uint64_t v23 = v21;
      swift_bridgeObjectRetain();
      id v24 = [(objc_class *)v23 recordID];
      uint64_t v25 = v24;
      if ((v22 & 0xC000000000000001) != 0)
      {
        id v26 = v24;
        char v27 = __CocoaDictionary.contains(_:)();
        swift_bridgeObjectRelease();

        if (v27) {
          goto LABEL_17;
        }
      }
      else if (*(void *)(v22 + 16))
      {
        sub_100724354((uint64_t)v24);
        char v30 = v29;
        swift_bridgeObjectRelease();

        if (v30) {
          goto LABEL_17;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      swift_beginAccess();
      uint64_t v31 = *(void *)(v5 + 16);
      swift_bridgeObjectRetain();
      id v32 = [(objc_class *)v23 recordID];
      uint64_t v33 = v32;
      if (*(void *)(v31 + 16))
      {
        sub_100724354((uint64_t)v32);
        char v35 = v34;
        swift_bridgeObjectRelease();

        uint64_t v36 = v52;
        if (v35)
        {
LABEL_17:

          sub_100CF7ADC();
          swift_allocError();
          *uint64_t v37 = 4;
          swift_willThrow();

          return;
        }
      }
      else
      {
        swift_bridgeObjectRelease();

        uint64_t v36 = v52;
      }
      if (qword_1016371D8 != -1) {
        swift_once();
      }
      uint64_t v53 = 0x7365547265646E75;
      unint64_t v54 = 0xE900000000000074;
      SynchronousCache.cachedValue<A>(key:computeBlock:)();
      swift_bridgeObjectRelease();
      uint64_t v38 = v49;
      if (v55 == 1)
      {
        id v39 = [(objc_class *)v23 valueStore];
        [v39 resetChangedKeys];

        id v40 = [(objc_class *)v23 encryptedValueStore];
        [v40 resetChangedKeys];
      }
      id v41 = [(objc_class *)v23 recordID];

      uint64_t v42 = *v38;
      swift_bridgeObjectRetain();
      uint64_t v43 = sub_1000F78E4(v41, v42);

      swift_bridgeObjectRelease();
      if (v43)
      {
        sub_10120C214(v43, v36);
        (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v47 + 56))(v36, 0, 1, v48);
        sub_100CF89F4((uint64_t)v36, (uint64_t)v16, type metadata accessor for SharedBeaconRecord);
      }
      else
      {
        sub_100CF8CEC((uint64_t)a1, (uint64_t)v16, type metadata accessor for SharedBeaconRecord);
      }
      v51(v16);
      sub_100CF51A4((id *)&v56, (uint64_t)v16);
      if (sub_101212AE0((uint64_t)a1, (uint64_t)v16))
      {
        sub_100CF8B0C((uint64_t)v16, type metadata accessor for SharedBeaconRecord);
        Class v44 = v56;
      }
      else
      {
        Class v45 = v56;
        id v46 = [(objc_class *)v56 recordID];
        swift_beginAccess();
        Class v44 = v45;
        sub_100EE7DC4((uint64_t)v44, (uint64_t)v46);
        swift_endAccess();

        sub_100CF8B0C((uint64_t)v16, type metadata accessor for SharedBeaconRecord);
      }

      return;
  }
}

uint64_t sub_100CF51A4(id *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v131 = sub_10000588C((uint64_t *)&unk_10166EAF0);
  __chkstk_darwin(v131);
  uint64_t v127 = (uint64_t)&v112 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_101638CF0);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v119 = (uint64_t)&v112 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v117 = (uint64_t)&v112 - v11;
  __chkstk_darwin(v10);
  uint64_t v132 = (uint64_t)&v112 - v12;
  uint64_t v13 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  uint64_t v128 = *(void *)(v13 - 8);
  uint64_t v129 = v13;
  __chkstk_darwin(v13);
  uint64_t v113 = (_DWORD *)((char *)&v112 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v126 = sub_10000588C(&qword_10165CD88);
  __chkstk_darwin(v126);
  uint64_t v130 = (uint64_t)&v112 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v118 = sub_10000588C((uint64_t *)&unk_101653D30);
  uint64_t v16 = __chkstk_darwin(v118);
  unint64_t v116 = (_DWORD *)((char *)&v112 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v16);
  uint64_t v133 = (uint64_t)&v112 - v18;
  uint64_t v19 = type metadata accessor for Date();
  uint64_t v124 = *(void *)(v19 - 8);
  uint64_t v125 = v19;
  __chkstk_darwin(v19);
  uint64_t v123 = (char *)&v112 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for UUID();
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  id v24 = (char *)&v112 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = (int *)type metadata accessor for SharedBeaconRecord(0);
  __chkstk_darwin(v25);
  char v27 = (char *)&v112 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100CF8CEC(a2, (uint64_t)v27, type metadata accessor for SharedBeaconRecord);
  id v28 = [*a1 encryptedValues];
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v24, v3 + v25[6], v21);
  uint64_t v114 = sub_100CF8CA4((unint64_t *)&qword_10163B8F0, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
  LOBYTE(a1) = dispatch thunk of static Equatable.== infix(_:_:)();
  char v29 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
  uint64_t v115 = v24;
  uint64_t v135 = v21;
  uint64_t v121 = v22 + 8;
  uint64_t v120 = v29;
  v29((uint64_t)v24, v21);
  if ((a1 & 1) == 0)
  {
    uint64_t v30 = UUID.uuidString.getter();
    *((void *)&v138 + 1) = &type metadata for String;
    uint64_t v139 = &protocol witness table for String;
    *(void *)&long long v137 = v30;
    *((void *)&v137 + 1) = v31;
    CKRecordKeyValueSetting.subscript.setter();
  }
  uint64_t v32 = v25[7];
  uint64_t v33 = v3 + v32;
  int v34 = *(unsigned __int8 *)(v3 + v32);
  char v35 = &v27[v32];
  uint64_t v37 = *((void *)v35 + 1);
  uint64_t v36 = *((void *)v35 + 2);
  if (v34 != *v35
    || (*(void *)(v33 + 8) != v37 || *(void *)(v33 + 16) != v36)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    *((void *)&v138 + 1) = &type metadata for String;
    uint64_t v139 = &protocol witness table for String;
    *(void *)&long long v137 = v37;
    *((void *)&v137 + 1) = v36;
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
  }
  uint64_t v38 = v25[8];
  uint64_t v39 = *(void *)(v3 + v38);
  uint64_t v40 = *(void *)(v3 + v38 + 8);
  id v41 = &v27[v38];
  uint64_t v43 = *(void *)v41;
  uint64_t v42 = *((void *)v41 + 1);
  uint64_t v44 = v125;
  if ((v39 != *(void *)v41 || v40 != v42) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    *((void *)&v138 + 1) = &type metadata for String;
    uint64_t v139 = &protocol witness table for String;
    *(void *)&long long v137 = v43;
    *((void *)&v137 + 1) = v42;
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
  }
  uint64_t v45 = v25[9];
  uint64_t v46 = *(void *)(v3 + v45);
  uint64_t v47 = *(void *)(v3 + v45 + 8);
  uint64_t v48 = &v27[v45];
  uint64_t v50 = *(void *)v48;
  uint64_t v49 = *((void *)v48 + 1);
  if ((v46 != *(void *)v48 || v47 != v49) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    *((void *)&v138 + 1) = &type metadata for String;
    uint64_t v139 = &protocol witness table for String;
    *(void *)&long long v137 = v50;
    *((void *)&v137 + 1) = v49;
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
  }
  uint64_t v51 = v25[10];
  uint64_t v52 = *(void *)(v3 + v51);
  uint64_t v53 = *(void *)(v3 + v51 + 8);
  unint64_t v54 = &v27[v51];
  uint64_t v56 = *(void *)v54;
  uint64_t v55 = *((void *)v54 + 1);
  if ((v52 != *(void *)v54 || v53 != v55) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
  {
    *((void *)&v138 + 1) = &type metadata for String;
    uint64_t v139 = &protocol witness table for String;
    *(void *)&long long v137 = v56;
    *((void *)&v137 + 1) = v55;
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
  }
  uint64_t v57 = v25[11];
  uint64_t v58 = *(void *)(v3 + v57);
  uint64_t v59 = *(void *)&v27[v57];
  if (v58 != v59)
  {
    *((void *)&v138 + 1) = &type metadata for Int;
    uint64_t v139 = &protocol witness table for Int;
    *(void *)&long long v137 = v59;
    CKRecordKeyValueSetting.subscript.setter();
  }
  uint64_t v60 = v25[12];
  uint64_t v61 = *(void *)(v3 + v60);
  uint64_t v62 = *(void *)&v27[v60];
  if (v61 != v62)
  {
    *((void *)&v138 + 1) = &type metadata for Int;
    uint64_t v139 = &protocol witness table for Int;
    *(void *)&long long v137 = v62;
    CKRecordKeyValueSetting.subscript.setter();
  }
  uint64_t v63 = v25[15];
  uint64_t v64 = *(void *)(v3 + v63);
  uint64_t v65 = *(void *)&v27[v63];
  if (v64 != v65)
  {
    *((void *)&v138 + 1) = &type metadata for Int;
    uint64_t v139 = &protocol witness table for Int;
    *(void *)&long long v137 = v65;
    CKRecordKeyValueSetting.subscript.setter();
  }
  uint64_t v66 = v25[13];
  int v67 = *(unsigned __int8 *)(v3 + v66);
  int v68 = v27[v66];
  if (v67 != v68)
  {
    *((void *)&v138 + 1) = &type metadata for Bool;
    uint64_t v139 = &protocol witness table for Bool;
    LOBYTE(v137) = v68;
    CKRecordKeyValueSetting.subscript.setter();
  }
  uint64_t v69 = v25[16];
  int v70 = *(unsigned __int8 *)(v3 + v69);
  uint64_t v71 = v27[v69];
  if (v70 != v71)
  {
    *((void *)&v138 + 1) = &type metadata for Int;
    uint64_t v139 = &protocol witness table for Int;
    *(void *)&long long v137 = v71;
    CKRecordKeyValueSetting.subscript.setter();
  }
  id v134 = v28;
  uint64_t v72 = v25[17];
  uint64_t v73 = *(void *)(v3 + v72);
  uint64_t v74 = *(void *)&v27[v72];
  if (v73 != v74)
  {
    *((void *)&v138 + 1) = &type metadata for UInt64;
    uint64_t v139 = &protocol witness table for UInt64;
    *(void *)&long long v137 = v74;
    CKRecordKeyValueSetting.subscript.setter();
  }
  uint64_t v122 = v22;
  uint64_t v76 = v123;
  uint64_t v75 = v124;
  os_log_type_t v77 = *(void (**)(char *, uint64_t, uint64_t))(v124 + 16);
  v77(v123, v3 + v25[18], v44);
  BOOL v78 = &v27[v25[18]];
  sub_100CF8CA4(&qword_10163AFA0, 255, (void (*)(uint64_t))&type metadata accessor for Date);
  char v79 = dispatch thunk of static Equatable.== infix(_:_:)();
  (*(void (**)(char *, uint64_t))(v75 + 8))(v76, v44);
  uint64_t v80 = v133;
  if ((v79 & 1) == 0)
  {
    *((void *)&v138 + 1) = v44;
    uint64_t v139 = &protocol witness table for Date;
    uint64_t v81 = sub_10001D958((uint64_t *)&v137);
    v77((char *)v81, (uint64_t)v78, v44);
    CKRecordKeyValueSetting.subscript.setter();
  }
  sub_10001D074(v3 + v25[20], v80, (uint64_t *)&unk_101653D30);
  uint64_t v82 = (uint64_t)&v27[v25[20]];
  uint64_t v83 = v130;
  uint64_t v84 = v130 + *(int *)(v126 + 48);
  sub_10001D074(v80, v130, (uint64_t *)&unk_101653D30);
  sub_10001D074(v82, v84, (uint64_t *)&unk_101653D30);
  uint64_t v85 = v129;
  unint64_t v86 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v128 + 48);
  if (v86(v83, 1, v129) == 1)
  {
    sub_10001DAB4(v80, (uint64_t *)&unk_101653D30);
    if (v86(v84, 1, v85) == 1)
    {
      sub_10001DAB4(v83, (uint64_t *)&unk_101653D30);
      uint64_t v87 = v132;
      uint64_t v88 = v122;
      goto LABEL_42;
    }
    goto LABEL_39;
  }
  uint64_t v89 = v116;
  sub_10001D074(v83, (uint64_t)v116, (uint64_t *)&unk_101653D30);
  if (v86(v84, 1, v85) == 1)
  {
    sub_10001DAB4(v133, (uint64_t *)&unk_101653D30);
    sub_100CF8B0C((uint64_t)v89, type metadata accessor for SharedBeaconRecord.PropertyListContent);
LABEL_39:
    sub_10001DAB4(v83, &qword_10165CD88);
    uint64_t v87 = v132;
    uint64_t v88 = v122;
LABEL_40:
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    sub_100CF894C();
    uint64_t v92 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    unint64_t v94 = v93;
    swift_release();
    *((void *)&v138 + 1) = &type metadata for Data;
    uint64_t v139 = &protocol witness table for Data;
    *(void *)&long long v137 = v92;
    *((void *)&v137 + 1) = v94;
    sub_1000361E0(v92, v94);
    CKRecordKeyValueSetting.subscript.setter();
    sub_10001CFB8(v92, v94);
    goto LABEL_42;
  }
  uint64_t v90 = v113;
  sub_100CF89F4(v84, (uint64_t)v113, type metadata accessor for SharedBeaconRecord.PropertyListContent);
  BOOL v91 = sub_101213400(v89, v90);
  sub_100CF8B0C((uint64_t)v90, type metadata accessor for SharedBeaconRecord.PropertyListContent);
  sub_10001DAB4(v133, (uint64_t *)&unk_101653D30);
  sub_100CF8B0C((uint64_t)v89, type metadata accessor for SharedBeaconRecord.PropertyListContent);
  sub_10001DAB4(v83, (uint64_t *)&unk_101653D30);
  uint64_t v87 = v132;
  uint64_t v88 = v122;
  if (!v91) {
    goto LABEL_40;
  }
LABEL_42:
  sub_10001D074(v3 + v25[19], v87, &qword_101638CF0);
  uint64_t v95 = (uint64_t)&v27[v25[19]];
  uint64_t v96 = v127;
  uint64_t v97 = v127 + *(int *)(v131 + 48);
  sub_10001D074(v87, v127, &qword_101638CF0);
  sub_10001D074(v95, v97, &qword_101638CF0);
  uint64_t v98 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v88 + 48);
  if (v98(v96, 1, v135) == 1)
  {
    sub_10001DAB4(v87, &qword_101638CF0);
    if (v98(v97, 1, v135) == 1)
    {
      sub_10001DAB4(v96, &qword_101638CF0);
      goto LABEL_52;
    }
  }
  else
  {
    uint64_t v99 = v117;
    sub_10001D074(v96, v117, &qword_101638CF0);
    if (v98(v97, 1, v135) != 1)
    {
      char v107 = *(void (**)(char *, uint64_t, uint64_t))(v88 + 32);
      uint64_t v108 = v115;
      uint64_t v109 = v97;
      uint64_t v110 = v135;
      v107(v115, v109, v135);
      LODWORD(v131) = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v133 = v3;
      uint64_t v111 = v120;
      v120((uint64_t)v108, v110);
      sub_10001DAB4(v132, &qword_101638CF0);
      v111(v99, v110);
      uint64_t v3 = v133;
      sub_10001DAB4(v96, &qword_101638CF0);
      if (v131) {
        goto LABEL_52;
      }
      goto LABEL_48;
    }
    sub_10001DAB4(v132, &qword_101638CF0);
    v120(v99, v135);
  }
  sub_10001DAB4(v96, (uint64_t *)&unk_10166EAF0);
LABEL_48:
  uint64_t v100 = v119;
  sub_10001D074(v95, v119, &qword_101638CF0);
  if (v98(v100, 1, v135) == 1)
  {
    sub_10001DAB4(v100, &qword_101638CF0);
    long long v137 = 0u;
    long long v138 = 0u;
    uint64_t v139 = 0;
  }
  else
  {
    uint64_t v101 = UUID.uuidString.getter();
    *((void *)&v138 + 1) = &type metadata for String;
    uint64_t v139 = &protocol witness table for String;
    *(void *)&long long v137 = v101;
    *((void *)&v137 + 1) = v102;
    v120(v100, v135);
  }
  CKRecordKeyValueSetting.subscript.setter();
LABEL_52:
  uint64_t v103 = v25[14];
  int v104 = *(unsigned __int8 *)(v3 + v103);
  uint64_t v105 = v27[v103];
  if (v104 == 3)
  {
    if (v105 != 3) {
      goto LABEL_60;
    }
LABEL_57:
    sub_100CF8B0C((uint64_t)v27, type metadata accessor for SharedBeaconRecord);
    return swift_unknownObjectRelease();
  }
  if (v105 != 3 && v104 == v105) {
    goto LABEL_57;
  }
  if (v105 != 3)
  {
LABEL_60:
    *((void *)&v138 + 1) = &type metadata for Int;
    uint64_t v139 = &protocol witness table for Int;
    *(void *)&long long v137 = v105;
    goto LABEL_61;
  }
  uint64_t v139 = 0;
  long long v137 = 0u;
  long long v138 = 0u;
LABEL_61:
  CKRecordKeyValueSetting.subscript.setter();
  swift_unknownObjectRelease();
  return sub_100CF8B0C((uint64_t)v27, type metadata accessor for SharedBeaconRecord);
}

unint64_t sub_100CF61D4()
{
  unint64_t result = qword_10165CC70;
  if (!qword_10165CC70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10165CC70);
  }
  return result;
}

uint64_t sub_100CF6228(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[6] = a3;
  v5[7] = a4;
  v5[5] = a1;
  uint64_t v6 = type metadata accessor for UUID();
  v5[8] = v6;
  v5[9] = *(void *)(v6 - 8);
  v5[10] = swift_task_alloc();
  return _swift_task_switch(sub_100CF62EC, v4, 0);
}

uint64_t sub_100CF62EC()
{
  uint64_t v21 = v0;
  if (qword_101637048 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[5];
  uint64_t v3 = v0[9];
  uint64_t v2 = v0[10];
  uint64_t v4 = v0[8];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170EBB8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  swift_bridgeObjectRetain_n();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = v0[9];
  uint64_t v9 = v0[10];
  unint64_t v11 = v0[7];
  uint64_t v12 = v0[8];
  if (v8)
  {
    uint64_t v18 = v0[6];
    os_log_type_t type = v7;
    uint64_t v13 = swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136446723;
    sub_100CF8CA4((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[2] = sub_1008FA0F0(v14, v15, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v12);
    *(_WORD *)(v13 + 12) = 2160;
    v0[3] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 22) = 2081;
    swift_bridgeObjectRetain();
    v0[4] = sub_1008FA0F0(v18, v11, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v6, type, "Message %{public}s delivered successfully from %{private,mask.hash}s.", (uint8_t *)v13, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v10 + 8))(v0[10], v0[8]);
    swift_bridgeObjectRelease_n();
  }

  swift_task_dealloc();
  uint64_t v16 = (uint64_t (*)(void))v0[1];
  return v16();
}

uint64_t sub_100CF65F4(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v9 + 104) = v13;
  *(void *)(v9 + 112) = v8;
  *(void *)(v9 + 88) = a7;
  *(void *)(v9 + 96) = a8;
  *(void *)(v9 + 72) = a5;
  *(void *)(v9 + 80) = a6;
  *(unsigned char *)(v9 + 144) = a4;
  *(void *)(v9 + 56) = a2;
  *(void *)(v9 + 64) = a3;
  uint64_t v10 = type metadata accessor for Logger();
  *(void *)(v9 + 120) = v10;
  *(void *)(v9 + 128) = *(void *)(v10 - 8);
  *(void *)(v9 + 136) = swift_task_alloc();
  return _swift_task_switch(sub_100CF66CC, v8, 0);
}

uint64_t sub_100CF66CC()
{
  uint64_t v41 = v0;
  if (qword_101637048 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 80);
  unint64_t v2 = *(void *)(v0 + 88);
  uint64_t v3 = sub_100010324(*(void *)(v0 + 120), (uint64_t)qword_10170EBB8);
  sub_1000361E0(v1, v2);
  swift_bridgeObjectRetain();
  sub_1000361E0(v1, v2);
  swift_bridgeObjectRetain();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v8 = *(void *)(v0 + 80);
  unint64_t v7 = *(void *)(v0 + 88);
  if (v6)
  {
    uint64_t v9 = *(void *)(v0 + 72);
    unint64_t v35 = *(void *)(v0 + 64);
    uint64_t v36 = *(void *)(v0 + 56);
    uint64_t v10 = *(unsigned __int8 *)(v0 + 144);
    uint64_t v38 = v3;
    uint64_t v11 = swift_slowAlloc();
    uint64_t v40 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136446723;
    sub_1000361E0(v8, v7);
    uint64_t v12 = sub_10052A684(v10, v9, v8, v7);
    unint64_t v14 = v13;
    sub_10001CFB8(v8, v7);
    *(void *)(v0 + 32) = sub_1008FA0F0(v12, v14, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10001CFB8(v8, v7);
    sub_10001CFB8(v8, v7);
    *(_WORD *)(v11 + 12) = 2160;
    *(void *)(v0 + 40) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 22) = 2081;
    swift_bridgeObjectRetain();
    *(void *)(v0 + 48) = sub_1008FA0F0(v36, v35, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Message %{public}s received from %{private,mask.hash}s.", (uint8_t *)v11, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v3 = v38;
    swift_slowDealloc();
  }
  else
  {
    sub_10001CFB8(*(void *)(v0 + 80), *(void *)(v0 + 88));
    sub_10001CFB8(v8, v7);
    swift_bridgeObjectRelease_n();
  }

  (*(void (**)(void, uint64_t, void))(*(void *)(v0 + 128) + 16))(*(void *)(v0 + 136), v3, *(void *)(v0 + 120));
  unint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v40 = swift_slowAlloc();
    *(_DWORD *)uint64_t v17 = 136315138;
    type metadata accessor for Transaction();
    uint64_t result = static Transaction.current.getter();
    if (!result)
    {
      __break(1u);
      return result;
    }
    uint64_t v19 = *(void *)(v0 + 128);
    uint64_t v39 = *(void *)(v0 + 136);
    uint64_t v37 = *(void *)(v0 + 120);
    *(void *)(v0 + 16) = result;
    sub_100CF8CA4(&qword_10165CC88, 255, (void (*)(uint64_t))&type metadata accessor for Transaction);
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v22 = v21;
    swift_release();
    *(void *)(v0 + 24) = sub_1008FA0F0(v20, v22, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "txn: %s", v17, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(v39, v37);
  }
  else
  {
    uint64_t v26 = *(void *)(v0 + 128);
    uint64_t v25 = *(void *)(v0 + 136);
    uint64_t v27 = *(void *)(v0 + 120);

    uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 8))(v25, v27);
  }
  uint64_t v28 = *(void *)(v0 + 104);
  unint64_t v30 = *(void *)(v0 + 88);
  uint64_t v29 = *(void *)(v0 + 96);
  uint64_t v32 = *(void *)(v0 + 72);
  uint64_t v31 = *(void *)(v0 + 80);
  int v33 = *(unsigned __int8 *)(v0 + 144);
  sub_100CD7AFC(v23, v24);
  sub_10056DF7C(v33, v32, v31, v30, v29, v28);
  swift_release();
  swift_task_dealloc();
  int v34 = *(uint64_t (**)(void))(v0 + 8);
  return v34();
}

uint64_t sub_100CF6BE4()
{
  uint64_t v1 = *(void *)(sub_10000588C(&qword_101638CF0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 17) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v3 + v4 + v7) & ~v7;
  uint64_t v9 = *(void *)(v6 + 64);
  unint64_t v14 = (((((((v9 + v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v17 = v2;
  uint64_t v16 = (v9 + v2 + ((v7 + v14 + 16) & ~v7)) & ~v2;
  uint64_t v10 = v0 + v3;
  unint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  int v11 = v15(v10, 1, v5);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  if (!v11) {
    v12(v10, v5);
  }
  v12(v0 + v8, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001CFB8(*(void *)(v0 + v14), *(void *)(v0 + v14 + 8));
  v12(v0 + ((v7 + v14 + 16) & ~v7), v5);
  if (!v15(v0 + v16, 1, v5)) {
    v12(v0 + v16, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, ((((((((((((((v4 + v16 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)+ 19) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 15) & 0xFFFFFFFFFFFFFFF8)+ 23) & 0xFFFFFFFFFFFFFFF8)+ 8, v17 | v7 | 7);
}

uint64_t sub_100CF6EA8()
{
  uint64_t v1 = *(void *)(sub_10000588C(&qword_101638CF0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v5 = (v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = (v6 + 31) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = v0 + v6;
  uint64_t v18 = *(void *)(v8 + 16);
  uint64_t v19 = *(void *)(v8 + 8);
  uint64_t v9 = (uint64_t *)(v0 + v7);
  uint64_t v16 = v9[1];
  uint64_t v17 = *v9;
  uint64_t v14 = v0 + v2;
  uint64_t v15 = v0 + v5;
  char v10 = *(unsigned char *)v8;
  char v11 = *(unsigned char *)(v0 + 16);
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v20 + 16) = v12;
  *uint64_t v12 = v20;
  v12[1] = sub_100033F68;
  return sub_100CDD87C(v11, v14, v15, v10, v19, v18, v17, v16);
}

uint64_t sub_100CF7180()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100CF7260()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = *(void *)(v0 + 32);
  uint64_t v6 = *(void *)(v0 + 40);
  uint64_t v7 = v0 + v3;
  uint64_t v8 = *(void *)(v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  char v9 = *(unsigned char *)(v0 + 24);
  char v10 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v10;
  *char v10 = v1;
  v10[1] = sub_100033F68;
  return sub_100CE0ECC(v4, v9, v5, v6, v7, v8);
}

uint64_t sub_100CF7388()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 64) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100CF7478()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v6 = *(void *)(v0 + 48);
  uint64_t v7 = *(void *)(v0 + 56);
  uint64_t v8 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v9 = *(unsigned __int8 *)(v0 + 24);
  char v10 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v10;
  *char v10 = v1;
  v10[1] = sub_10001D2E4;
  return sub_100CE1AD4(v3, v9, v4, v5, v6, v7, v8);
}

void sub_100CF75B4(uint64_t a1)
{
  sub_100EE3D44(*(uint64_t **)(v1 + 16), a1, *(uint64_t **)(v1 + 24));
}

uint64_t sub_100CF75D8()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v6 = v0 + v3;
  uint64_t v7 = (char *)(v0 + v4);
  uint64_t v8 = *(void *)(v0 + v4 + 8);
  uint64_t v9 = *(void *)(v0 + v4 + 16);
  uint64_t v10 = *(void *)(v0 + ((v4 + 31) & 0xFFFFFFFFFFFFFFF8));
  char v11 = *v7;
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v12;
  *uint64_t v12 = v1;
  v12[1] = sub_100033F68;
  return sub_100CE44D0(v5, v6, v11, v8, v9, v10);
}

uint64_t sub_100CF770C()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((((((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)
     + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100CF77D4()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = v0 + v3;
  uint64_t v6 = *(void *)(v0 + ((v4 + 31) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v7 = *(void *)(v0 + v4 + 8);
  uint64_t v8 = *(void *)(v0 + v4 + 16);
  char v9 = *(unsigned char *)(v0 + v4);
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v10;
  *uint64_t v10 = v1;
  v10[1] = sub_100033F68;
  return sub_100CE477C(v5, v9, v7, v8, v6);
}

unint64_t sub_100CF7910()
{
  unint64_t result = qword_10165CCF0;
  if (!qword_10165CCF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10165CCF0);
  }
  return result;
}

void sub_100CF7964()
{
  uint64_t v1 = *(uint64_t **)(v0 + 16);
  v2[2] = *(void *)(v0 + 24);
  sub_100CF456C(v1, (void (*)(char *))sub_100CF7AD4, (uint64_t)v2);
}

uint64_t sub_100CF79B4(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_100033F68;
  return sub_100CE7EB4(a1, a2, v2);
}

BOOL sub_100CF7A60(uint64_t a1)
{
  return sub_100CE8188(a1, *(void *)(v1 + 16));
}

uint64_t sub_100CF7A80()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100CF7ABC()
{
  return sub_100CF8C1C((uint64_t (*)(uint64_t, uint64_t))sub_100E58EC8);
}

uint64_t sub_100CF7AD4(uint64_t a1)
{
  return sub_100CE7D74(a1, *(void *)(v1 + 16));
}

unint64_t sub_100CF7ADC()
{
  unint64_t result = qword_10165CD08;
  if (!qword_10165CD08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10165CD08);
  }
  return result;
}

uint64_t sub_100CF7B34()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100CF7C28()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v6 = v0 + v3;
  uint64_t v7 = (char *)(v0 + v4);
  uint64_t v8 = *(void *)(v0 + v4 + 8);
  uint64_t v9 = *(void *)(v0 + v4 + 16);
  uint64_t v10 = *(void *)(v0 + ((v4 + 31) & 0xFFFFFFFFFFFFFFF8));
  char v11 = *v7;
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v12;
  *uint64_t v12 = v1;
  v12[1] = sub_100033F68;
  return sub_100CE8538(v5, v6, v11, v8, v9, v10);
}

uint64_t sub_100CF7D60()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = v0 + v3;
  uint64_t v6 = *(void *)(v0 + v4);
  uint64_t v7 = v0 + ((v4 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = *(void *)(v7 + 8);
  uint64_t v9 = *(void *)(v7 + 16);
  char v10 = *(unsigned char *)v7;
  char v11 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v11;
  void *v11 = v1;
  v11[1] = sub_100033F68;
  return sub_100CE87EC(v5, v6, v10, v8, v9);
}

uint64_t sub_100CF7EA0()
{
  return sub_100CF8C1C((uint64_t (*)(uint64_t, uint64_t))sub_100E5AEA4);
}

uint64_t sub_100CF7EBC()
{
  return sub_100CF8C1C((uint64_t (*)(uint64_t, uint64_t))sub_100E5F4A8);
}

unint64_t sub_100CF7ED4()
{
  unint64_t result = qword_10165CD40;
  if (!qword_10165CD40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10165CD40);
  }
  return result;
}

uint64_t sub_100CF7F28()
{
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100CF7F68()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 16);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_100033F68;
  *(_OWORD *)(v2 + 160) = v3;
  return _swift_task_switch(sub_100CEC8E0, 0, 0);
}

uint64_t sub_100CF8018()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((((((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
     + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100CF80E0()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = v0 + v3;
  uint64_t v6 = *(void *)(v0 + v4);
  uint64_t v7 = v0 + ((v4 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = *(void *)(v7 + 8);
  uint64_t v9 = *(void *)(v7 + 16);
  char v10 = *(unsigned char *)v7;
  char v11 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v11;
  void *v11 = v1;
  v11[1] = sub_100033F68;
  return sub_100CED958(v5, v6, v10, v8, v9);
}

BOOL sub_100CF821C(unsigned __int8 *a1)
{
  return *a1 == **(unsigned __int8 **)(v1 + 16);
}

uint64_t sub_100CF8238()
{
  return sub_100CF8C1C((uint64_t (*)(uint64_t, uint64_t))sub_100E5AB7C);
}

BOOL sub_100CF8250(uint64_t a1)
{
  return sub_100CF2D38(a1, *(void *)(v1 + 16));
}

uint64_t sub_100CF8270()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100033F68;
  return sub_1000F094C(v0);
}

uint64_t sub_100CF8300(uint64_t a1, unsigned __int8 a2)
{
  int v2 = a2;
  type metadata accessor for OwnerPeerTrust();
  return static UUID.== infix(_:_:)() & (v2 == 2);
}

uint64_t sub_100CF8354(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(char *, void))
{
  uint64_t v22 = a2;
  uint64_t v29 = a4;
  uint64_t v23 = a1;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t result = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v10 = 0;
  uint64_t v11 = *(void *)(a3 + 64);
  uint64_t v24 = 0;
  uint64_t v25 = a3 + 64;
  uint64_t v12 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v13 = -1;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  unint64_t v14 = v13 & v11;
  uint64_t v28 = v6 + 16;
  int64_t v26 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v27 = v6 + 8;
  while (1)
  {
    if (v14)
    {
      unint64_t v15 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_5;
    }
    int64_t v18 = v10 + 1;
    if (__OFADD__(v10, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v18 >= v26) {
      return sub_1002ACB50(v23, v22, v24, (void *)a3);
    }
    unint64_t v19 = *(void *)(v25 + 8 * v18);
    ++v10;
    if (!v19)
    {
      int64_t v10 = v18 + 1;
      if (v18 + 1 >= v26) {
        return sub_1002ACB50(v23, v22, v24, (void *)a3);
      }
      unint64_t v19 = *(void *)(v25 + 8 * v10);
      if (!v19)
      {
        int64_t v10 = v18 + 2;
        if (v18 + 2 >= v26) {
          return sub_1002ACB50(v23, v22, v24, (void *)a3);
        }
        unint64_t v19 = *(void *)(v25 + 8 * v10);
        if (!v19) {
          break;
        }
      }
    }
LABEL_20:
    unint64_t v14 = (v19 - 1) & v19;
    unint64_t v16 = __clz(__rbit64(v19)) + (v10 << 6);
LABEL_5:
    (*(void (**)(char *, unint64_t, uint64_t))(v6 + 16))(v9, *(void *)(a3 + 48) + *(void *)(v6 + 72) * v16, v5);
    char v17 = v29(v9, *(unsigned __int8 *)(*(void *)(a3 + 56) + v16));
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    if (v17)
    {
      *(unint64_t *)((char *)v23 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v16;
      if (__OFADD__(v24++, 1))
      {
        __break(1u);
        return sub_1002ACB50(v23, v22, v24, (void *)a3);
      }
    }
  }
  int64_t v20 = v18 + 3;
  if (v20 >= v26) {
    return sub_1002ACB50(v23, v22, v24, (void *)a3);
  }
  unint64_t v19 = *(void *)(v25 + 8 * v20);
  if (v19)
  {
    int64_t v10 = v20;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v10 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v10 >= v26) {
      return sub_1002ACB50(v23, v22, v24, (void *)a3);
    }
    unint64_t v19 = *(void *)(v25 + 8 * v10);
    ++v20;
    if (v19) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

uint64_t sub_100CF85F8(uint64_t isStackAllocationSafe, uint64_t (*a2)(char *, void), uint64_t a3)
{
  uint64_t v6 = isStackAllocationSafe;
  char v7 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v8 = (unint64_t)((1 << v7) + 63) >> 6;
  size_t v9 = 8 * v8;
  if ((v7 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v13 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0), v9);
    uint64_t v10 = sub_100CF8354((unint64_t *)((char *)&v13 - ((v9 + 15) & 0x3FFFFFFFFFFFFFF0)), v8, v6, a2);
    if (v3) {
      swift_willThrow();
    }
    else {
      return v10;
    }
  }
  else
  {
    uint64_t v11 = (void *)swift_slowAlloc();
    bzero(v11, v9);
    a3 = sub_100CF8354((unint64_t *)v11, v8, v6, a2);
    swift_slowDealloc();
  }
  return a3;
}

uint64_t sub_100CF8770()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100CF8820()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = v0 + v3;
  uint64_t v5 = (unsigned __int8 *)(v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v6 = *((void *)v5 + 1);
  uint64_t v7 = *((void *)v5 + 2);
  uint64_t v8 = *v5;
  size_t v9 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v9;
  *size_t v9 = v1;
  v9[1] = sub_10001D2E4;
  return sub_100CF2FB8(v4, v8, v6, v7);
}

unint64_t sub_100CF894C()
{
  unint64_t result = qword_10165CD90;
  if (!qword_10165CD90)
  {
    sub_10000592C((uint64_t *)&unk_101653D30);
    sub_100CF8CA4((unint64_t *)&unk_10166EAE0, 255, (void (*)(uint64_t))type metadata accessor for SharedBeaconRecord.PropertyListContent);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10165CD90);
  }
  return result;
}

uint64_t sub_100CF89F4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100CF8A5C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100033F68;
  return sub_100CDCA2C(a1, a2);
}

uint64_t sub_100CF8B0C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100CF8B6C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100033F68;
  return sub_100CDAED8(a1, a2);
}

uint64_t sub_100CF8C1C(uint64_t (*a1)(uint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return a1(v3, v4);
}

uint64_t sub_100CF8CA4(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100CF8CEC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unsigned char *storeEnumTagSinglePayload for CircleTrustServiceError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *uint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100CF8E20);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CircleTrustServiceError()
{
  return &type metadata for CircleTrustServiceError;
}

unint64_t sub_100CF8E5C()
{
  unint64_t result = qword_10165CDE8;
  if (!qword_10165CDE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165CDE8);
  }
  return result;
}

uint64_t sub_100CF8EB8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170EBE8);
  uint64_t v1 = sub_100010324(v0, (uint64_t)qword_10170EBE8);
  if (qword_101637060 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100010324(v0, (uint64_t)qword_10170EC00);
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

unint64_t sub_100CF8F80()
{
  if (*(void *)(v0 + 144))
  {
    unint64_t v1 = *(void *)(v0 + 144);
  }
  else
  {
    sub_10000588C((uint64_t *)&unk_10163EAB8);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_101342130;
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v5 = v4;
    uint64_t v6 = swift_allocObject();
    swift_weakInit();
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = sub_100CFD984;
    *(void *)(v7 + 24) = v6;
    *(void *)(inited + 32) = v3;
    *(void *)(inited + 40) = v5;
    *(void *)(inited + 48) = sub_1001DF664;
    *(void *)(inited + 56) = v7;
    unint64_t v1 = sub_10092E16C(inited);
    *(void *)(v0 + 144) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_100CF9090()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    type metadata accessor for Transaction();
    swift_retain();
    static Transaction.asyncTask(name:block:)();
    return swift_release_n();
  }
  return result;
}

uint64_t sub_100CF9128(void *a1)
{
  v1[2] = a1;
  v1[3] = *a1;
  sub_10000588C(&qword_10164DBB0);
  v1[4] = swift_task_alloc();
  return _swift_task_switch(sub_100CF91E8, a1, 0);
}

uint64_t sub_100CF91E8()
{
  if (qword_101637058 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170EBE8);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Flushing cached familyMembers", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v6 = v0[3];
  uint64_t v5 = v0[4];
  uint64_t v7 = v0[2];

  *(void *)(v7 + 152) = 0;
  swift_bridgeObjectRelease();
  uint64_t v8 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(v5, 1, 1, v8);
  uint64_t v10 = sub_100CFD8B0(&qword_10165CF90, v9, (void (*)(uint64_t))type metadata accessor for FamilyCircleService);
  uint64_t v11 = (void *)swift_allocObject();
  v11[2] = v7;
  v11[3] = v10;
  v11[4] = v7;
  v11[5] = v6;
  swift_retain_n();
  sub_1008F5E44(v5, (uint64_t)&unk_10165CFC8, (uint64_t)v11);
  swift_release();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_100CF93E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[5] = a4;
  uint64_t v6 = sub_10000588C(&qword_10165CFD0);
  v4[6] = v6;
  v4[7] = *(void *)(v6 - 8);
  v4[8] = swift_task_alloc();
  uint64_t v7 = sub_10000588C(&qword_10165CFD8);
  v4[9] = v7;
  v4[10] = *(void *)(v7 - 8);
  v4[11] = swift_task_alloc();
  uint64_t v8 = (void *)swift_task_alloc();
  v4[12] = v8;
  *uint64_t v8 = v4;
  v8[1] = sub_100CF9558;
  unsigned char v8[16] = a4;
  return _swift_task_switch(sub_100CF9A48, a4, 0);
}

uint64_t sub_100CF9558(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 40);
  *(void *)(v3 + 104) = a1;
  *(void *)(v3 + 112) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v5 = sub_100CF9830;
  }
  else {
    uint64_t v5 = sub_100CF9684;
  }
  return _swift_task_switch(v5, v4, 0);
}

uint64_t sub_100CF9684()
{
  type metadata accessor for Transaction();
  uint64_t result = static Transaction.current.getter();
  if (result)
  {
    uint64_t v2 = *(void *)(v0[5] + 136);
    uint64_t v3 = *(void *)(v2 + 16);
    if (v3)
    {
      uint64_t v16 = result;
      uint64_t v4 = v0[10];
      unint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
      uint64_t v5 = v2 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
      uint64_t v14 = *(void *)(v4 + 72);
      uint64_t v6 = (void (**)(uint64_t, uint64_t))(v0[7] + 8);
      uint64_t v7 = (void (**)(uint64_t, uint64_t))(v4 + 8);
      swift_bridgeObjectRetain();
      do
      {
        uint64_t v8 = v0[13];
        uint64_t v9 = v0[11];
        uint64_t v11 = v0[8];
        uint64_t v10 = v0[9];
        uint64_t v12 = v0[6];
        v15(v9, v5, v10);
        v0[2] = v16;
        v0[3] = v8;
        swift_retain();
        swift_bridgeObjectRetain();
        AsyncStream.Continuation.yield(_:)();
        (*v6)(v11, v12);
        (*v7)(v9, v10);
        v5 += v14;
        --v3;
      }
      while (v3);
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v13 = (uint64_t (*)(void))v0[1];
    return v13();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100CF9830()
{
  if (qword_101637058 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170EBE8);
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138543362;
    uint64_t v6 = _convertErrorToNSError(_:)();
    *(void *)(v0 + 32) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Error fetching members: %{public}@", v4, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_100CF9A28()
{
  *(void *)(v1 + 128) = v0;
  return _swift_task_switch(sub_100CF9A48, v0, 0);
}

uint64_t sub_100CF9A48()
{
  uint64_t v1 = *(void *)(v0[16] + 152);
  if (v1)
  {
    swift_bridgeObjectRetain();
    static os_log_type_t.debug.getter();
    if (qword_101637280 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    uint64_t v2 = (uint64_t (*)(uint64_t))v0[1];
    return v2(v1);
  }
  else
  {
    id v4 = [objc_allocWithZone((Class)FAFetchFamilyCircleRequest) init];
    v0[17] = v4;
    [v4 setCachePolicy:1];
    v0[2] = v0;
    v0[7] = v0 + 15;
    v0[3] = sub_100CF9C28;
    uint64_t v5 = swift_continuation_init();
    v0[10] = _NSConcreteStackBlock;
    v0[11] = 0x40000000;
    v0[12] = sub_100CFA148;
    v0[13] = &unk_1015F1420;
    v0[14] = v5;
    [v4 startRequestWithCompletionHandler:v0 + 10];
    return _swift_continuation_await(v0 + 2);
  }
}

uint64_t sub_100CF9C28()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 144) = v2;
  uint64_t v3 = *(void *)(v1 + 128);
  if (v2) {
    id v4 = sub_100CFA0D8;
  }
  else {
    id v4 = sub_100CF9D48;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100CF9D48()
{
  uint64_t v1 = (void *)v0[15];
  id v2 = [v1 members];
  sub_100CFD870();
  unint64_t v3 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v4 = result;
    uint64_t v43 = v1;
    uint64_t v44 = v0;
    if (result) {
      goto LABEL_3;
    }
LABEL_28:
    uint64_t v8 = _swiftEmptyArrayStorage;
    goto LABEL_29;
  }
  uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  uint64_t result = swift_bridgeObjectRetain();
  uint64_t v43 = v1;
  uint64_t v44 = v0;
  if (!v4) {
    goto LABEL_28;
  }
LABEL_3:
  if (v4 < 1)
  {
    __break(1u);
    return result;
  }
  uint64_t v6 = 0;
  unint64_t v7 = v3 & 0xC000000000000001;
  uint64_t v8 = _swiftEmptyArrayStorage;
  uint64_t v9 = &selRef_fetchEncryptedPayloadForUnknownBeacon_completion_;
  unint64_t v45 = v3 & 0xC000000000000001;
  uint64_t v46 = v4;
  do
  {
    if (v7) {
      id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v10 = *(id *)(v3 + 8 * v6 + 32);
    }
    uint64_t v11 = v10;
    id v12 = [v10 v9[339]];
    if (v12)
    {
      uint64_t v13 = v12;
      uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v16 = v15;

      id v17 = [v11 appleID];
      if (v17)
      {
        int64_t v18 = v17;
        uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v50 = v20;
        uint64_t v51 = v19;

        unsigned __int8 v49 = [v11 isMe];
        id v21 = [v11 firstName];
        if (v21)
        {
          uint64_t v22 = v21;
          uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v47 = v24;
          uint64_t v48 = v23;
        }
        else
        {
          uint64_t v47 = 0;
          uint64_t v48 = 0;
        }
        uint64_t v52 = v14;
        id v25 = [v11 lastName];
        if (v25)
        {
          int64_t v26 = v25;
          uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v29 = v28;
        }
        else
        {
          uint64_t v27 = 0;
          uint64_t v29 = 0;
        }
        unint64_t v30 = v3;
        id v31 = [v11 fullName];
        if (v31)
        {
          uint64_t v32 = v31;
          uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v35 = v34;
        }
        else
        {

          uint64_t v33 = 0;
          uint64_t v35 = 0;
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v8 = sub_100A71F88(0, v8[2] + 1, 1, v8);
        }
        unint64_t v37 = v8[2];
        unint64_t v36 = v8[3];
        if (v37 >= v36 >> 1) {
          uint64_t v8 = sub_100A71F88((void *)(v36 > 1), v37 + 1, 1, v8);
        }
        v8[2] = v37 + 1;
        uint64_t v38 = &v8[11 * v37];
        v38[4] = v52;
        v38[5] = v16;
        v38[6] = v51;
        v38[7] = v50;
        *((unsigned char *)v38 + 64) = v49;
        v38[9] = v48;
        v38[10] = v47;
        v38[11] = v27;
        v38[12] = v29;
        v38[13] = v33;
        v38[14] = v35;
        unint64_t v3 = v30;
        unint64_t v7 = v45;
        uint64_t v4 = v46;
        uint64_t v9 = &selRef_fetchEncryptedPayloadForUnknownBeacon_completion_;
      }
      else
      {

        swift_bridgeObjectRelease();
      }
    }
    else
    {
    }
    ++v6;
  }
  while (v4 != v6);
LABEL_29:
  uint64_t v39 = v44[16];
  uint64_t v40 = (void *)v44[17];
  swift_bridgeObjectRelease_n();
  uint64_t v41 = sub_10115A204((uint64_t)v8);
  swift_bridgeObjectRelease();

  *(void *)(v39 + 152) = v41;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v42 = (uint64_t (*)(uint64_t))v44[1];
  return v42(v41);
}

uint64_t sub_100CFA0D8()
{
  uint64_t v1 = *(void **)(v0 + 136);
  swift_willThrow();

  id v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100CFA148(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    sub_10000588C(&qword_101638D40);
    uint64_t v5 = swift_allocError();
    *uint64_t v6 = a3;
    id v7 = a3;
    a1 = v3;
    a2 = (void *)v5;
    return _swift_continuation_throwingResumeWithError(a1, a2);
  }
  if (!a2)
  {
    __break(1u);
    return _swift_continuation_throwingResumeWithError(a1, a2);
  }
  **(void **)(*(void *)(v3 + 64) + 40) = a2;
  id v8 = a2;

  return swift_continuation_throwingResume();
}

uint64_t sub_100CFA208@<X0>(uint64_t a1@<X8>)
{
  sub_10000588C(&qword_101648048);
  unsafeFromAsyncTask<A>(_:)();
  uint64_t v2 = qword_101636FC8;
  uint64_t v3 = swift_bridgeObjectRetain();
  if (v2 != -1) {
    uint64_t v3 = swift_once();
  }
  __chkstk_darwin(v3);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  uint64_t result = sub_10015B4A8(v5, 0);
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = 0;
  return result;
}

uint64_t sub_100CFA33C(char a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v4 + 120) = a3;
  *(void *)(v4 + 128) = v3;
  *(void *)(v4 + 112) = a2;
  *(unsigned char *)(v4 + 336) = a1;
  return _swift_task_switch(sub_100CFA364, 0, 0);
}

uint64_t sub_100CFA364()
{
  if (qword_1016368C0 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 136) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100CFA434;
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 120);
  char v4 = *(unsigned char *)(v0 + 336);
  return sub_10127B8C8(v4, v2, v3);
}

uint64_t sub_100CFA434(uint64_t a1, uint64_t a2)
{
  char v4 = (void *)*v3;
  uint64_t v5 = (void *)*v3;
  v4[18] = a1;
  v4[19] = a2;
  swift_task_dealloc();
  if (v2)
  {
    uint64_t v6 = (uint64_t (*)(void))v5[1];
    return v6();
  }
  else
  {
    id v8 = (void *)swift_task_alloc();
    v4[20] = v8;
    *id v8 = v5;
    v8[1] = sub_100CFA5C0;
    uint64_t v9 = v4[16];
    unsigned char v8[16] = v9;
    return _swift_task_switch(sub_100CF9A48, v9, 0);
  }
}

uint64_t sub_100CFA5C0(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 168) = a1;
  *(void *)(v4 + 176) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 128);
  if (v1) {
    uint64_t v6 = sub_100CFBA38;
  }
  else {
    uint64_t v6 = sub_100CFA6F4;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_100CFA6F4()
{
  uint64_t v1 = *(void *)(v0 + 168);
  char v2 = *(unsigned char *)(v1 + 32);
  *(unsigned char *)(v0 + 337) = v2;
  uint64_t v3 = -1;
  uint64_t v4 = -1 << v2;
  if (-v4 < 64) {
    uint64_t v3 = ~(-1 << -(char)v4);
  }
  unint64_t v5 = v3 & *(void *)(v1 + 56);
  if (v5)
  {
    uint64_t v6 = 0;
    unint64_t v7 = __clz(__rbit64(v5));
    uint64_t v8 = (v5 - 1) & v5;
    goto LABEL_5;
  }
  unint64_t v22 = 63 - v4;
  if (v22 > 0x7F)
  {
    unint64_t v23 = *(void *)(v1 + 64);
    if (v23)
    {
      uint64_t v6 = 1;
LABEL_16:
      uint64_t v8 = (v23 - 1) & v23;
      unint64_t v7 = __clz(__rbit64(v23)) + (v6 << 6);
LABEL_5:
      *(void *)(v0 + 184) = v6;
      *(void *)(v0 + 192) = v8;
      uint64_t v9 = (void *)(*(void *)(v1 + 48) + 88 * v7);
      *(void *)(v0 + 200) = v9[1];
      uint64_t v11 = v9[2];
      uint64_t v10 = v9[3];
      *(void *)(v0 + 208) = v10;
      *(void *)(v0 + 216) = v9[6];
      *(void *)(v0 + 224) = v9[8];
      *(void *)(v0 + 232) = v9[9];
      *(void *)(v0 + 240) = v9[10];
      *(void *)(v0 + 72) = v11;
      *(void *)(v0 + 80) = v10;
      *(void *)(v0 + 88) = 64;
      *(void *)(v0 + 96) = 0xE100000000000000;
      sub_1000336D4();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      char v12 = StringProtocol.contains<A>(_:)();
      NSString v13 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      if (v12)
      {
        uint64_t v14 = (void *)IDSCopyIDForEmailAddress();

        if (v14)
        {
          char v18 = 0;
          goto LABEL_10;
        }
        __break(1u);
      }
      else
      {
        uint64_t v14 = (void *)IDSCopyIDForPhoneNumber();

        if (v14)
        {
          char v18 = 1;
LABEL_10:
          *(unsigned char *)(v0 + 338) = v18;
          uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v21 = v20;

          *(void *)(v0 + 248) = v21;
          *(void *)(v0 + 256) = v19;
          uint64_t v15 = sub_100CFAA08;
          uint64_t v16 = 0;
          uint64_t v17 = 0;
          return _swift_task_switch(v15, v16, v17);
        }
      }
      __break(1u);
      return _swift_task_switch(v15, v16, v17);
    }
    if (v22 >= 0xC0)
    {
      unint64_t v23 = *(void *)(v1 + 72);
      if (v23)
      {
        uint64_t v6 = 2;
        goto LABEL_16;
      }
      if (v22 >= 0x100)
      {
        unint64_t v23 = *(void *)(v1 + 80);
        if (v23)
        {
          uint64_t v6 = 3;
          goto LABEL_16;
        }
        if (v22 >= 0x140)
        {
          unint64_t v23 = *(void *)(v1 + 88);
          if (v23)
          {
            uint64_t v6 = 4;
            goto LABEL_16;
          }
          uint64_t v24 = 0;
          uint64_t v25 = v22 >> 6;
          if (v25 <= 5) {
            uint64_t v25 = 5;
          }
          uint64_t v26 = v25 - 5;
          while (v26 != v24)
          {
            unint64_t v23 = *(void *)(v1 + 96 + 8 * v24++);
            if (v23)
            {
              uint64_t v6 = v24 + 4;
              goto LABEL_16;
            }
          }
        }
      }
    }
  }
  swift_release();
  swift_bridgeObjectRelease();
  sub_100CFD8F8();
  swift_allocError();
  *uint64_t v27 = 1;
  swift_willThrow();
  uint64_t v28 = *(uint64_t (**)(void))(v0 + 8);
  return v28();
}

uint64_t sub_100CFAA08()
{
  uint64_t v1 = qword_10163C990;
  *(void *)(v0 + 264) = qword_10163C990;
  return _swift_task_switch(sub_100CFAA2C, v1, 0);
}

uint64_t sub_100CFAA2C()
{
  uint64_t v2 = *(void *)(v0 + 256);
  uint64_t v1 = *(void *)(v0 + 264);
  uint64_t v3 = *(void *)(v0 + 248);
  char v4 = *(unsigned char *)(v0 + 338);
  sub_10000588C(&qword_10163BAB0);
  uint64_t inited = swift_initStackObject();
  *(void *)(v0 + 272) = inited;
  *(_OWORD *)(inited + 16) = xmmword_101342130;
  *(unsigned char *)(inited + 32) = v4;
  *(void *)(inited + 40) = v2;
  *(void *)(inited + 48) = v3;
  uint64_t v6 = *(void **)(v1 + 112);
  *(void *)(v0 + 280) = v6;
  swift_bridgeObjectRetain();
  if (v6)
  {
    uint64_t v7 = *(void *)(v0 + 264);
    uint64_t v8 = sub_100CFD8B0((unint64_t *)&qword_10163C9B8, 255, (void (*)(uint64_t))type metadata accessor for MessagingQueryController);
    uint64_t v9 = (void *)swift_task_alloc();
    *(void *)(v0 + 288) = v9;
    void v9[2] = inited;
    v9[3] = v6;
    v9[4] = v7;
    id v10 = v6;
    uint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 296) = v11;
    uint64_t v12 = sub_10000588C(&qword_10163C9C0);
    void *v11 = v0;
    v11[1] = sub_100CFAC78;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 104, v7, v8, 0xD00000000000001CLL, 0x80000001013F4210, sub_100CFDCB4, v9, v12);
  }
  else
  {
    sub_10015CEB8();
    uint64_t v13 = swift_allocError();
    *uint64_t v14 = 6;
    swift_willThrow();
    *(void *)(v0 + 312) = v13;
    swift_setDeallocating();
    swift_arrayDestroy();
    return _swift_task_switch(sub_100CFB064, 0, 0);
  }
}

uint64_t sub_100CFAC78()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 304) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 264);
    char v4 = sub_100CFAFC8;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 264);
    swift_task_dealloc();
    char v4 = sub_100CFADA0;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100CFADA0()
{
  unint64_t v1 = *(void *)(v0 + 272);

  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v2 = *(void *)(v0 + 104);
  uint64_t v3 = sub_10080322C(v2);
  if (v5) {
    goto LABEL_26;
  }
  if (*(_DWORD *)(v2 + 36) != v4)
  {
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v6 = 1 << *(unsigned char *)(v2 + 32);
  if (v3 == v6) {
    goto LABEL_20;
  }
  if (v3 < 0 || v3 >= v6) {
    goto LABEL_17;
  }
  if (((*(void *)(v2 + 8 * ((unint64_t)v3 >> 6) + 64) >> v3) & 1) == 0)
  {
LABEL_18:
    __break(1u);
LABEL_19:
    swift_bridgeObjectRetain();
    uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v3 = swift_bridgeObjectRelease();
    if (v15) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
  unint64_t v1 = *(void *)(*(void *)(v2 + 56) + 8 * v3);
  swift_bridgeObjectRetain();
  uint64_t v3 = swift_bridgeObjectRelease();
  if (v1 >> 62) {
    goto LABEL_19;
  }
  if (*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_9:
    if ((v1 & 0xC000000000000001) != 0)
    {
      id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      goto LABEL_12;
    }
    if (*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      id v7 = *(id *)(v1 + 32);
LABEL_12:
      uint64_t v8 = v7;
      swift_bridgeObjectRelease();
      id v9 = [v8 senderCorrelationIdentifier];

      uint64_t v10 = *(void *)(v0 + 128);
      if (v9)
      {
        uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v13 = v12;

        swift_bridgeObjectRelease();
        *(void *)(v0 + 320) = v11;
        *(void *)(v0 + 328) = v13;
        uint64_t v14 = sub_100CFB188;
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v14 = sub_100CFDCB0;
      }
      uint64_t v3 = (uint64_t)v14;
      uint64_t v4 = v10;
      goto LABEL_21;
    }
    __break(1u);
LABEL_26:
    __break(1u);
    return _swift_task_switch(v3, v4, v5);
  }
LABEL_20:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(v0 + 128);
  uint64_t v3 = (uint64_t)sub_100CFB624;
LABEL_21:
  uint64_t v5 = 0;
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_100CFAFC8()
{
  swift_task_dealloc();
  *(void *)(v0 + 312) = *(void *)(v0 + 304);
  swift_setDeallocating();
  swift_arrayDestroy();
  return _swift_task_switch(sub_100CFB064, 0, 0);
}

uint64_t sub_100CFB064()
{
  uint64_t v1 = *(void *)(v0 + 128);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100CFB124, v1, 0);
}

uint64_t sub_100CFB124()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100CFB188()
{
  uint64_t v1 = *(void *)(v0 + 152);
  if (!v1)
  {
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  if (*(void *)(v0 + 320) != *(void *)(v0 + 144) || v1 != *(void *)(v0 + 328))
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v3) {
      goto LABEL_10;
    }
LABEL_15:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    id v9 = (uint64_t (*)())swift_bridgeObjectRelease();
    int64_t v12 = *(void *)(v0 + 184);
    unint64_t v13 = *(void *)(v0 + 192);
    if (v13)
    {
      uint64_t v14 = (v13 - 1) & v13;
      unint64_t v15 = __clz(__rbit64(v13)) | (v12 << 6);
      id v9 = *(uint64_t (**)())(v0 + 168);
LABEL_17:
      *(void *)(v0 + 184) = v12;
      *(void *)(v0 + 192) = v14;
      uint64_t v16 = (void *)(*((void *)v9 + 6) + 88 * v15);
      *(void *)(v0 + 200) = v16[1];
      uint64_t v18 = v16[2];
      uint64_t v17 = v16[3];
      *(void *)(v0 + 208) = v17;
      *(void *)(v0 + 216) = v16[6];
      *(void *)(v0 + 224) = v16[8];
      *(void *)(v0 + 232) = v16[9];
      *(void *)(v0 + 240) = v16[10];
      *(void *)(v0 + 72) = v18;
      *(void *)(v0 + 80) = v17;
      *(void *)(v0 + 88) = 64;
      *(void *)(v0 + 96) = 0xE100000000000000;
      sub_1000336D4();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      char v19 = StringProtocol.contains<A>(_:)();
      NSString v20 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      if ((v19 & 1) == 0)
      {
        uint64_t v21 = (void *)IDSCopyIDForPhoneNumber();

        if (v21)
        {
          char v22 = 1;
LABEL_22:
          *(unsigned char *)(v0 + 338) = v22;
          uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v25 = v24;

          *(void *)(v0 + 248) = v25;
          *(void *)(v0 + 256) = v23;
          id v9 = sub_100CFAA08;
          uint64_t v10 = 0;
          uint64_t v11 = 0;
          return _swift_task_switch(v9, v10, v11);
        }
LABEL_46:
        __break(1u);
        return _swift_task_switch(v9, v10, v11);
      }
      uint64_t v21 = (void *)IDSCopyIDForEmailAddress();

      if (v21)
      {
        char v22 = 0;
        goto LABEL_22;
      }
LABEL_45:
      __break(1u);
      goto LABEL_46;
    }
    int64_t v26 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
    }
    else
    {
      int64_t v27 = (unint64_t)((1 << *(unsigned char *)(v0 + 337)) + 63) >> 6;
      id v9 = *(uint64_t (**)())(v0 + 168);
      if (v26 >= v27) {
        goto LABEL_39;
      }
      uint64_t v28 = (char *)v9 + 56;
      unint64_t v29 = *((void *)v9 + v26 + 7);
      ++v12;
      if (v29)
      {
LABEL_28:
        uint64_t v14 = (v29 - 1) & v29;
        unint64_t v15 = __clz(__rbit64(v29)) + (v12 << 6);
        goto LABEL_17;
      }
      int64_t v12 = v26 + 1;
      if (v26 + 1 >= v27) {
        goto LABEL_39;
      }
      unint64_t v29 = *(void *)&v28[8 * v12];
      if (v29) {
        goto LABEL_28;
      }
      int64_t v12 = v26 + 2;
      if (v26 + 2 >= v27) {
        goto LABEL_39;
      }
      unint64_t v29 = *(void *)&v28[8 * v12];
      if (v29) {
        goto LABEL_28;
      }
      int64_t v30 = v26 + 3;
      if (v30 >= v27)
      {
LABEL_39:
        swift_release();
        swift_bridgeObjectRelease();
        sub_100CFD8F8();
        swift_allocError();
        *id v31 = 1;
        swift_willThrow();
        goto LABEL_40;
      }
      unint64_t v29 = *(void *)&v28[8 * v30];
      if (v29)
      {
        int64_t v12 = v30;
        goto LABEL_28;
      }
      while (1)
      {
        int64_t v12 = v30 + 1;
        if (__OFADD__(v30, 1)) {
          break;
        }
        if (v12 >= v27) {
          goto LABEL_39;
        }
        unint64_t v29 = *(void *)&v28[8 * v12];
        ++v30;
        if (v29) {
          goto LABEL_28;
        }
      }
    }
    __break(1u);
    goto LABEL_45;
  }
  swift_bridgeObjectRelease();
LABEL_10:
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 240))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
    uint64_t v5 = *(void *)(v0 + 232);
    uint64_t v6 = *(void *)(v0 + 240);
    return v4(v5, v6);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100CFD8F8();
  swift_allocError();
  *uint64_t v8 = 2;
  swift_willThrow();
  swift_release();
LABEL_40:
  uint64_t v32 = *(uint64_t (**)(void))(v0 + 8);
  return v32();
}

uint64_t sub_100CFB624()
{
  if (*(void *)(v0 + 152))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v1 = (uint64_t (*)())swift_bridgeObjectRelease();
    int64_t v4 = *(void *)(v0 + 184);
    unint64_t v5 = *(void *)(v0 + 192);
    if (v5)
    {
      uint64_t v6 = (v5 - 1) & v5;
      unint64_t v7 = __clz(__rbit64(v5)) | (v4 << 6);
      uint64_t v1 = *(uint64_t (**)())(v0 + 168);
LABEL_4:
      *(void *)(v0 + 184) = v4;
      *(void *)(v0 + 192) = v6;
      uint64_t v8 = (void *)(*((void *)v1 + 6) + 88 * v7);
      *(void *)(v0 + 200) = v8[1];
      uint64_t v10 = v8[2];
      uint64_t v9 = v8[3];
      *(void *)(v0 + 208) = v9;
      *(void *)(v0 + 216) = v8[6];
      *(void *)(v0 + 224) = v8[8];
      *(void *)(v0 + 232) = v8[9];
      *(void *)(v0 + 240) = v8[10];
      *(void *)(v0 + 72) = v10;
      *(void *)(v0 + 80) = v9;
      *(void *)(v0 + 88) = 64;
      *(void *)(v0 + 96) = 0xE100000000000000;
      sub_1000336D4();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      char v11 = StringProtocol.contains<A>(_:)();
      NSString v12 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      if ((v11 & 1) == 0)
      {
        unint64_t v13 = (void *)IDSCopyIDForPhoneNumber();

        if (v13)
        {
          char v14 = 1;
LABEL_13:
          *(unsigned char *)(v0 + 338) = v14;
          uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v21 = v20;

          *(void *)(v0 + 248) = v21;
          *(void *)(v0 + 256) = v19;
          uint64_t v1 = sub_100CFAA08;
          uint64_t v2 = 0;
          uint64_t v3 = 0;
          return _swift_task_switch(v1, v2, v3);
        }
LABEL_38:
        __break(1u);
        return _swift_task_switch(v1, v2, v3);
      }
      unint64_t v13 = (void *)IDSCopyIDForEmailAddress();

      if (v13)
      {
        char v14 = 0;
        goto LABEL_13;
      }
LABEL_37:
      __break(1u);
      goto LABEL_38;
    }
    int64_t v22 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
      goto LABEL_36;
    }
    int64_t v23 = (unint64_t)((1 << *(unsigned char *)(v0 + 337)) + 63) >> 6;
    uint64_t v1 = *(uint64_t (**)())(v0 + 168);
    if (v22 < v23)
    {
      uint64_t v24 = (char *)v1 + 56;
      unint64_t v25 = *((void *)v1 + v22 + 7);
      ++v4;
      if (v25)
      {
LABEL_19:
        uint64_t v6 = (v25 - 1) & v25;
        unint64_t v7 = __clz(__rbit64(v25)) + (v4 << 6);
        goto LABEL_4;
      }
      int64_t v4 = v22 + 1;
      if (v22 + 1 < v23)
      {
        unint64_t v25 = *(void *)&v24[8 * v4];
        if (v25) {
          goto LABEL_19;
        }
        int64_t v4 = v22 + 2;
        if (v22 + 2 < v23)
        {
          unint64_t v25 = *(void *)&v24[8 * v4];
          if (v25) {
            goto LABEL_19;
          }
          int64_t v27 = v22 + 3;
          if (v27 < v23)
          {
            unint64_t v25 = *(void *)&v24[8 * v27];
            if (v25)
            {
              int64_t v4 = v27;
              goto LABEL_19;
            }
            while (1)
            {
              int64_t v4 = v27 + 1;
              if (__OFADD__(v27, 1)) {
                break;
              }
              if (v4 >= v23) {
                goto LABEL_31;
              }
              unint64_t v25 = *(void *)&v24[8 * v4];
              ++v27;
              if (v25) {
                goto LABEL_19;
              }
            }
LABEL_36:
            __break(1u);
            goto LABEL_37;
          }
        }
      }
    }
LABEL_31:
    swift_release();
    swift_bridgeObjectRelease();
    sub_100CFD8F8();
    swift_allocError();
    *uint64_t v28 = 1;
    swift_willThrow();
    goto LABEL_32;
  }
  if (!*(void *)(v0 + 240))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100CFD8F8();
    swift_allocError();
    *int64_t v26 = 2;
    swift_willThrow();
    swift_release();
LABEL_32:
    unint64_t v29 = *(uint64_t (**)(void))(v0 + 8);
    return v29();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
  uint64_t v16 = *(void *)(v0 + 232);
  uint64_t v17 = *(void *)(v0 + 240);
  return v15(v16, v17);
}

uint64_t sub_100CFBA38()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100CFBA9C@<X0>(void *a1@<X8>)
{
  if (qword_1016368B8 != -1) {
    swift_once();
  }
  sub_10000588C(&qword_101648040);
  uint64_t result = OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  if (v4)
  {
    sub_10000588C(&qword_101638D40);
    return swift_willThrowTypedImpl();
  }
  else
  {
    *a1 = v3;
  }
  return result;
}

uint64_t sub_100CFBB88()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for FamilyCircleService()
{
  return self;
}

uint64_t sub_100CFBC04()
{
  *(void *)(v1 + 16) = v0;
  return _swift_task_switch(sub_100CFBC24, v0, 0);
}

uint64_t sub_100CFBC24()
{
  uint64_t v1 = *(void *)(v0 + 16);
  sub_100CF8F80();
  type metadata accessor for DarwinNotificationHelper();
  swift_allocObject();
  *(void *)(v1 + 128) = DarwinNotificationHelper.init(notificationHandlers:)();
  swift_release();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100CFBCC0(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100CFD8B0(&qword_10165CF90, a2, (void (*)(uint64_t))type metadata accessor for FamilyCircleService);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100CFBD18(uint64_t a1)
{
  return sub_10044B124(a1, qword_10170EC00);
}

uint64_t sub_100CFBD3C(uint64_t a1)
{
  return sub_10044B124(a1, qword_10170EC18);
}

uint64_t sub_100CFBD68(uint64_t result, int a2, uint64_t a3, uint64_t a4)
{
  if (result < 0 || 1 << *(unsigned char *)(a4 + 32) <= result)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (((*(void *)(a4 + 8 * ((unint64_t)result >> 6) + 64) >> result) & 1) == 0)
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  if (*(_DWORD *)(a4 + 36) == a2) {
    return *(void *)(*(void *)(a4 + 56) + 8 * result);
  }
LABEL_8:
  __break(1u);
  return result;
}

uint64_t sub_100CFBDB8(char a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 184) = a2;
  *(void *)(v3 + 192) = a3;
  *(unsigned char *)(v3 + 392) = a1;
  return _swift_task_switch(sub_100CFBDDC, 0, 0);
}

uint64_t sub_100CFBDDC()
{
  if (qword_1016368C0 != -1) {
    swift_once();
  }
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 200) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100CFBEAC;
  uint64_t v2 = *(void *)(v0 + 184);
  uint64_t v3 = *(void *)(v0 + 192);
  char v4 = *(unsigned char *)(v0 + 392);
  return sub_10127B8C8(v4, v2, v3);
}

uint64_t sub_100CFBEAC(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (void *)*v3;
  v6[26] = a1;
  v6[27] = a2;
  swift_task_dealloc();
  if (v2)
  {
    unint64_t v7 = (uint64_t (*)(void))v6[1];
    return v7();
  }
  else if (a2)
  {
    uint64_t v9 = (void *)swift_task_alloc();
    v6[28] = v9;
    uint64_t v10 = sub_10000588C(&qword_10165CFA0);
    *uint64_t v9 = v6;
    v9[1] = sub_100CFC09C;
    return unsafeBlocking<A>(_:)(v6 + 18, sub_100CFBA9C, 0, v10);
  }
  else
  {
    char v11 = (uint64_t (*)(uint64_t, void))v6[1];
    return v11(a1, 0);
  }
}

uint64_t sub_100CFC09C()
{
  *(void *)(*(void *)v1 + 232) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = sub_100CFD858;
  }
  else
  {
    uint64_t v2 = sub_100CFC1B8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100CFC1B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(uint64_t (**)())(v3 + 144);
  if (((unint64_t)v4 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    sub_100CFD870();
    sub_100CFD8B0(&qword_101648030, 255, (void (*)(uint64_t))sub_100CFD870);
    Set.Iterator.init(_cocoa:)();
    uint64_t v4 = *(uint64_t (**)())(v3 + 72);
    unint64_t v5 = *(char **)(v3 + 80);
    uint64_t v6 = *(void *)(v3 + 88);
    uint64_t v7 = *(void *)(v3 + 96);
    unint64_t v8 = *(void *)(v3 + 104);
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v9 = -1;
    uint64_t v10 = -1 << *((unsigned char *)v4 + 32);
    unint64_t v5 = (char *)v4 + 56;
    uint64_t v6 = ~v10;
    uint64_t v11 = -v10;
    if (v11 < 64) {
      uint64_t v9 = ~(-1 << v11);
    }
    unint64_t v8 = v9 & *((void *)v4 + 7);
  }
  *(void *)(v3 + 248) = v5;
  *(void *)(v3 + 256) = v6;
  *(void *)(v3 + 240) = v4;
  *(void *)(v3 + 264) = v7;
  *(void *)(v3 + 272) = v8;
  if (((unint64_t)v4 & 0x8000000000000000) != 0) {
    goto LABEL_9;
  }
LABEL_7:
  if (v8)
  {
    uint64_t v12 = (v8 - 1) & v8;
    unint64_t v13 = __clz(__rbit64(v8)) | (v7 << 6);
    uint64_t v14 = v7;
    goto LABEL_25;
  }
  int64_t v17 = v7 + 1;
  if (!__OFADD__(v7, 1))
  {
    int64_t v18 = (unint64_t)(*(void *)(v3 + 256) + 64) >> 6;
    if (v17 < v18)
    {
      uint64_t v19 = *(void *)(v3 + 248);
      unint64_t v20 = *(void *)(v19 + 8 * v17);
      uint64_t v14 = v7 + 1;
      if (v20) {
        goto LABEL_24;
      }
      uint64_t v14 = v7 + 2;
      if (v7 + 2 >= v18) {
        goto LABEL_38;
      }
      unint64_t v20 = *(void *)(v19 + 8 * v14);
      if (v20) {
        goto LABEL_24;
      }
      uint64_t v14 = v7 + 3;
      if (v7 + 3 >= v18) {
        goto LABEL_38;
      }
      unint64_t v20 = *(void *)(v19 + 8 * v14);
      if (v20)
      {
LABEL_24:
        uint64_t v12 = (v20 - 1) & v20;
        unint64_t v13 = __clz(__rbit64(v20)) + (v14 << 6);
LABEL_25:
        id v16 = *(id *)(*((void *)v4 + 6) + 8 * v13);
        while (1)
        {
          *(void *)(v3 + 288) = v14;
          *(void *)(v3 + 296) = v12;
          *(void *)(v3 + 280) = v16;
          if (!v16) {
            goto LABEL_38;
          }
          id v22 = [v16 appleID];
          if (v22)
          {
            int64_t v23 = v22;
            uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v26 = v25;

            *(void *)(v3 + 112) = v24;
            *(void *)(v3 + 120) = v26;
            *(void *)(v3 + 128) = 64;
            *(void *)(v3 + 136) = 0xE100000000000000;
            sub_1000336D4();
            char v27 = StringProtocol.contains<A>(_:)();
            NSString v28 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            if (v27)
            {
              unint64_t v29 = (void *)IDSCopyIDForEmailAddress();

              if (!v29) {
                goto LABEL_43;
              }
              char v30 = 0;
            }
            else
            {
              unint64_t v29 = (void *)IDSCopyIDForPhoneNumber();

              if (!v29) {
                goto LABEL_44;
              }
              char v30 = 1;
            }
            *(unsigned char *)(v3 + 393) = v30;
            uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v33 = v32;

            *(void *)(v3 + 304) = v33;
            *(void *)(v3 + 312) = v31;
            a2 = qword_10163C990;
            *(void *)(v3 + 320) = qword_10163C990;
            uint64_t v4 = sub_100CFC5C4;
            a3 = 0;
            return _swift_task_switch(v4, a2, a3);
          }

          uint64_t v4 = *(uint64_t (**)())(v3 + 240);
          uint64_t v7 = v14;
          unint64_t v8 = v12;
          *(void *)(v3 + 264) = v14;
          *(void *)(v3 + 272) = v12;
          if (((unint64_t)v4 & 0x8000000000000000) == 0) {
            goto LABEL_7;
          }
LABEL_9:
          uint64_t v15 = __CocoaSet.Iterator.next()();
          if (!v15) {
            goto LABEL_38;
          }
          *(void *)(v3 + 176) = v15;
          sub_100CFD870();
          swift_unknownObjectRetain();
          swift_dynamicCast();
          id v16 = *(id *)(v3 + 168);
          swift_unknownObjectRelease();
          uint64_t v14 = v7;
          uint64_t v12 = v8;
        }
      }
      uint64_t v14 = v7 + 4;
      if (v7 + 4 < v18)
      {
        unint64_t v20 = *(void *)(v19 + 8 * v14);
        if (!v20)
        {
          uint64_t v21 = v7 + 5;
          while (v18 != v21)
          {
            unint64_t v20 = *(void *)(v19 + 8 * v21++);
            if (v20)
            {
              uint64_t v14 = v21 - 1;
              goto LABEL_24;
            }
          }
          goto LABEL_38;
        }
        goto LABEL_24;
      }
    }
LABEL_38:
    sub_100132C20();
    swift_bridgeObjectRelease();
    uint64_t v34 = *(uint64_t (**)(void, void))(v3 + 8);
    return v34(0, 0);
  }
  __break(1u);
LABEL_43:
  __break(1u);
LABEL_44:
  __break(1u);
  return _swift_task_switch(v4, a2, a3);
}

uint64_t sub_100CFC5C4()
{
  uint64_t v2 = *(void *)(v0 + 312);
  uint64_t v1 = *(void *)(v0 + 320);
  uint64_t v3 = *(void *)(v0 + 304);
  char v4 = *(unsigned char *)(v0 + 393);
  sub_10000588C(&qword_10163BAB0);
  uint64_t inited = swift_initStackObject();
  *(void *)(v0 + 328) = inited;
  *(_OWORD *)(inited + 16) = xmmword_101342130;
  *(unsigned char *)(inited + 32) = v4;
  *(void *)(inited + 40) = v2;
  *(void *)(inited + 48) = v3;
  uint64_t v6 = *(void **)(v1 + 112);
  *(void *)(v0 + 336) = v6;
  swift_bridgeObjectRetain();
  if (v6)
  {
    uint64_t v7 = *(void *)(v0 + 320);
    uint64_t v8 = sub_100CFD8B0((unint64_t *)&qword_10163C9B8, 255, (void (*)(uint64_t))type metadata accessor for MessagingQueryController);
    uint64_t v9 = (void *)swift_task_alloc();
    *(void *)(v0 + 344) = v9;
    void v9[2] = inited;
    v9[3] = v6;
    v9[4] = v7;
    id v10 = v6;
    uint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 352) = v11;
    uint64_t v12 = sub_10000588C(&qword_10163C9C0);
    void *v11 = v0;
    v11[1] = sub_100CFC810;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 160, v7, v8, 0xD00000000000001CLL, 0x80000001013F4210, sub_10015CFCC, v9, v12);
  }
  else
  {
    sub_10015CEB8();
    uint64_t v13 = swift_allocError();
    *uint64_t v14 = 6;
    swift_willThrow();
    *(void *)(v0 + 368) = v13;
    swift_setDeallocating();
    swift_arrayDestroy();
    return _swift_task_switch(sub_100CFCBE8, 0, 0);
  }
}

uint64_t sub_100CFC810()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 360) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 320);
    char v4 = sub_100CFCB4C;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 320);
    swift_task_dealloc();
    char v4 = sub_100CFC938;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100CFC938()
{
  unint64_t v1 = *(void *)(v0 + 328);

  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v2 = *(void *)(v0 + 160);
  uint64_t v3 = sub_10080322C(v2);
  if (v5) {
    goto LABEL_25;
  }
  if (*(_DWORD *)(v2 + 36) != v4)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = 1 << *(unsigned char *)(v2 + 32);
  if (v3 == v6) {
    goto LABEL_19;
  }
  if (v3 < 0 || v3 >= v6) {
    goto LABEL_16;
  }
  if (((*(void *)(v2 + 8 * ((unint64_t)v3 >> 6) + 64) >> v3) & 1) == 0)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v1 = *(void *)(*(void *)(v2 + 56) + 8 * v3);
  swift_bridgeObjectRetain();
  uint64_t v3 = swift_bridgeObjectRelease();
  if (!(v1 >> 62))
  {
    if (*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_9;
    }
LABEL_19:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v13 = sub_100CFD50C;
    goto LABEL_20;
  }
LABEL_18:
  swift_bridgeObjectRetain();
  uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v3 = swift_bridgeObjectRelease();
  if (!v14) {
    goto LABEL_19;
  }
LABEL_9:
  if ((v1 & 0xC000000000000001) == 0)
  {
    if (*(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      id v7 = *(id *)(v1 + 32);
      goto LABEL_12;
    }
    __break(1u);
LABEL_25:
    __break(1u);
    return _swift_task_switch(v3, v4, v5);
  }
  id v7 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
LABEL_12:
  uint64_t v8 = v7;
  swift_bridgeObjectRelease();
  id v9 = [v8 senderCorrelationIdentifier];

  if (v9)
  {
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v12 = v11;

    swift_bridgeObjectRelease();
    *(void *)(v0 + 376) = v10;
    *(void *)(v0 + 384) = v12;
    uint64_t v13 = sub_100CFD0F0;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v13 = sub_100CFDCB8;
  }
LABEL_20:
  uint64_t v3 = (uint64_t)v13;
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  return _swift_task_switch(v3, v4, v5);
}

uint64_t sub_100CFCB4C()
{
  swift_task_dealloc();
  *(void *)(v0 + 368) = *(void *)(v0 + 360);
  swift_setDeallocating();
  swift_arrayDestroy();
  return _swift_task_switch(sub_100CFCBE8, 0, 0);
}

uint64_t sub_100CFCBE8()
{
  swift_bridgeObjectRelease();
  if (qword_101637060 != -1) {
LABEL_45:
  }
    swift_once();
  unint64_t v1 = *(void **)(v0 + 280);
  uint64_t v2 = type metadata accessor for Logger();
  sub_100010324(v2, (uint64_t)qword_10170EC00);
  id v3 = v1;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = *(void **)(v0 + 280);
    uint64_t v7 = swift_slowAlloc();
    *(void *)(v0 + 152) = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 141558275;
    *(void *)(v7 + 4) = 1752392040;
    *(_WORD *)(v7 + 12) = 2081;
    id v8 = [v6 appleID];
    if (v8)
    {
      id v9 = v8;
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v12 = v11;
    }
    else
    {
      unint64_t v12 = 0xE300000000000000;
      uint64_t v10 = 7104846;
    }
    uint64_t v14 = *(void **)(v0 + 280);
    *(void *)(v7 + 14) = sub_1008FA0F0(v10, v12, (uint64_t *)(v0 + 152));
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failure on getting correlationIdentifier for appleID: %{private,mask.hash}s", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_errorRelease();
  }
  else
  {
    uint64_t v13 = *(void **)(v0 + 280);

    swift_errorRelease();
  }
  uint64_t v15 = *(void *)(v0 + 288);
  for (unint64_t i = *(void *)(v0 + 296); ; unint64_t i = v18)
  {
    *(void *)(v0 + 264) = v15;
    *(void *)(v0 + 272) = i;
    uint64_t v17 = *(void *)(v0 + 240);
    if ((v17 & 0x8000000000000000) == 0) {
      break;
    }
    uint64_t v21 = __CocoaSet.Iterator.next()();
    if (!v21) {
      goto LABEL_40;
    }
    *(void *)(v0 + 176) = v21;
    sub_100CFD870();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v22 = *(id *)(v0 + 168);
    swift_unknownObjectRelease();
    uint64_t v20 = v15;
    uint64_t v18 = i;
LABEL_29:
    *(void *)(v0 + 288) = v20;
    *(void *)(v0 + 296) = v18;
    *(void *)(v0 + 280) = v22;
    if (!v22) {
      goto LABEL_40;
    }
    id v28 = [v22 appleID];
    if (v28)
    {
      unint64_t v29 = v28;
      uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v32 = v31;

      *(void *)(v0 + 112) = v30;
      *(void *)(v0 + 120) = v32;
      *(void *)(v0 + 128) = 64;
      *(void *)(v0 + 136) = 0xE100000000000000;
      sub_1000336D4();
      char v33 = StringProtocol.contains<A>(_:)();
      NSString v34 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      if (v33)
      {
        uint64_t v35 = (void *)IDSCopyIDForEmailAddress();

        if (v35)
        {
          char v39 = 0;
          goto LABEL_37;
        }
        __break(1u);
      }
      else
      {
        uint64_t v35 = (void *)IDSCopyIDForPhoneNumber();

        if (v35)
        {
          char v39 = 1;
LABEL_37:
          *(unsigned char *)(v0 + 393) = v39;
          uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v42 = v41;

          *(void *)(v0 + 304) = v42;
          *(void *)(v0 + 312) = v40;
          uint64_t v37 = qword_10163C990;
          *(void *)(v0 + 320) = qword_10163C990;
          uint64_t v36 = sub_100CFC5C4;
          uint64_t v38 = 0;
          return _swift_task_switch(v36, v37, v38);
        }
      }
      __break(1u);
      return _swift_task_switch(v36, v37, v38);
    }

    uint64_t v15 = v20;
  }
  if (i)
  {
    uint64_t v18 = (i - 1) & i;
    unint64_t v19 = __clz(__rbit64(i)) | (v15 << 6);
    uint64_t v20 = v15;
LABEL_28:
    id v22 = *(id *)(*(void *)(v17 + 48) + 8 * v19);
    goto LABEL_29;
  }
  int64_t v23 = v15 + 1;
  if (__OFADD__(v15, 1))
  {
    __break(1u);
    goto LABEL_45;
  }
  int64_t v24 = (unint64_t)(*(void *)(v0 + 256) + 64) >> 6;
  if (v23 >= v24) {
    goto LABEL_40;
  }
  uint64_t v25 = *(void *)(v0 + 248);
  unint64_t v26 = *(void *)(v25 + 8 * v23);
  uint64_t v20 = v15 + 1;
  if (v26) {
    goto LABEL_27;
  }
  uint64_t v20 = v15 + 2;
  if (v15 + 2 >= v24) {
    goto LABEL_40;
  }
  unint64_t v26 = *(void *)(v25 + 8 * v20);
  if (v26) {
    goto LABEL_27;
  }
  uint64_t v20 = v15 + 3;
  if (v15 + 3 >= v24) {
    goto LABEL_40;
  }
  unint64_t v26 = *(void *)(v25 + 8 * v20);
  if (v26) {
    goto LABEL_27;
  }
  uint64_t v20 = v15 + 4;
  if (v15 + 4 >= v24) {
    goto LABEL_40;
  }
  unint64_t v26 = *(void *)(v25 + 8 * v20);
  if (v26)
  {
LABEL_27:
    uint64_t v18 = (v26 - 1) & v26;
    unint64_t v19 = __clz(__rbit64(v26)) + (v20 << 6);
    goto LABEL_28;
  }
  uint64_t v27 = v15 + 5;
  while (v24 != v27)
  {
    unint64_t v26 = *(void *)(v25 + 8 * v27++);
    if (v26)
    {
      uint64_t v20 = v27 - 1;
      goto LABEL_27;
    }
  }
LABEL_40:
  sub_100132C20();
  swift_bridgeObjectRelease();
  uint64_t v43 = *(uint64_t (**)(void, void))(v0 + 8);
  return v43(0, 0);
}

uint64_t sub_100CFD0F0()
{
  if (*(void *)(v0 + 376) == *(void *)(v0 + 208) && *(void *)(v0 + 216) == *(void *)(v0 + 384))
  {
    swift_bridgeObjectRelease();
LABEL_8:
    swift_bridgeObjectRelease();
    id v3 = [*(id *)(v0 + 280) altDSID];
    uint64_t v4 = *(void **)(v0 + 280);
    if (v3)
    {
      os_log_type_t v5 = v3;
      uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v8 = v7;

      sub_100132C20();
    }
    else
    {

      sub_100132C20();
LABEL_44:
      uint64_t v6 = 0;
      uint64_t v8 = 0;
    }
    uint64_t v36 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 8);
    return v36(v6, v8);
  }
  char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if (v2) {
    goto LABEL_8;
  }

  uint64_t v12 = *(void *)(v0 + 288);
  for (unint64_t i = *(void *)(v0 + 296); ; unint64_t i = v14)
  {
    *(void *)(v0 + 264) = v12;
    *(void *)(v0 + 272) = i;
    unint64_t v13 = *(void *)(v0 + 240);
    if ((v13 & 0x8000000000000000) != 0)
    {
      uint64_t v17 = __CocoaSet.Iterator.next()();
      if (!v17) {
        goto LABEL_43;
      }
      *(void *)(v0 + 176) = v17;
      sub_100CFD870();
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v18 = *(id *)(v0 + 168);
      swift_unknownObjectRelease();
      uint64_t v16 = v12;
      uint64_t v14 = i;
    }
    else
    {
      if (i)
      {
        uint64_t v14 = (i - 1) & i;
        unint64_t v15 = __clz(__rbit64(i)) | (v12 << 6);
        uint64_t v16 = v12;
      }
      else
      {
        int64_t v19 = v12 + 1;
        if (__OFADD__(v12, 1))
        {
          __break(1u);
          goto LABEL_50;
        }
        int64_t v20 = (unint64_t)(*(void *)(v0 + 256) + 64) >> 6;
        if (v19 >= v20) {
          goto LABEL_43;
        }
        uint64_t v21 = *(void *)(v0 + 248);
        unint64_t v22 = *(void *)(v21 + 8 * v19);
        uint64_t v16 = v12 + 1;
        if (!v22)
        {
          uint64_t v16 = v12 + 2;
          if (v12 + 2 >= v20) {
            goto LABEL_43;
          }
          unint64_t v22 = *(void *)(v21 + 8 * v16);
          if (!v22)
          {
            uint64_t v16 = v12 + 3;
            if (v12 + 3 >= v20) {
              goto LABEL_43;
            }
            unint64_t v22 = *(void *)(v21 + 8 * v16);
            if (!v22)
            {
              uint64_t v16 = v12 + 4;
              if (v12 + 4 >= v20) {
                goto LABEL_43;
              }
              unint64_t v22 = *(void *)(v21 + 8 * v16);
              if (!v22)
              {
                uint64_t v23 = v12 + 5;
                while (v20 != v23)
                {
                  unint64_t v22 = *(void *)(v21 + 8 * v23++);
                  if (v22)
                  {
                    uint64_t v16 = v23 - 1;
                    goto LABEL_30;
                  }
                }
LABEL_43:
                sub_100132C20();
                swift_bridgeObjectRelease();
                goto LABEL_44;
              }
            }
          }
        }
LABEL_30:
        uint64_t v14 = (v22 - 1) & v22;
        unint64_t v15 = __clz(__rbit64(v22)) + (v16 << 6);
      }
      id v18 = *(id *)(*(void *)(v13 + 48) + 8 * v15);
    }
    *(void *)(v0 + 288) = v16;
    *(void *)(v0 + 296) = v14;
    *(void *)(v0 + 280) = v18;
    if (!v18) {
      goto LABEL_43;
    }
    id v24 = [v18 appleID];
    if (v24) {
      break;
    }

    uint64_t v12 = v16;
  }
  uint64_t v25 = v24;
  uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v28 = v27;

  *(void *)(v0 + 112) = v26;
  *(void *)(v0 + 120) = v28;
  *(void *)(v0 + 128) = 64;
  *(void *)(v0 + 136) = 0xE100000000000000;
  sub_1000336D4();
  char v29 = StringProtocol.contains<A>(_:)();
  NSString v30 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if (v29)
  {
    uint64_t v31 = (void *)IDSCopyIDForEmailAddress();

    if (v31)
    {
      char v32 = 0;
      goto LABEL_40;
    }
LABEL_50:
    __break(1u);
LABEL_51:
    __break(1u);
    return _swift_task_switch(v13, v9, v10);
  }
  uint64_t v31 = (void *)IDSCopyIDForPhoneNumber();

  if (!v31) {
    goto LABEL_51;
  }
  char v32 = 1;
LABEL_40:
  *(unsigned char *)(v0 + 393) = v32;
  uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v35 = v34;

  *(void *)(v0 + 304) = v35;
  *(void *)(v0 + 312) = v33;
  uint64_t v9 = qword_10163C990;
  *(void *)(v0 + 320) = qword_10163C990;
  unint64_t v13 = (unint64_t)sub_100CFC5C4;
  uint64_t v10 = 0;
  return _swift_task_switch(v13, v9, v10);
}

uint64_t sub_100CFD50C()
{
  uint64_t v4 = *(void *)(v0 + 288);
  for (unint64_t i = *(void *)(v0 + 296); ; unint64_t i = v6)
  {
    *(void *)(v0 + 264) = v4;
    *(void *)(v0 + 272) = i;
    unint64_t v5 = *(void *)(v0 + 240);
    if ((v5 & 0x8000000000000000) == 0) {
      break;
    }
    uint64_t v9 = __CocoaSet.Iterator.next()();
    if (!v9) {
      goto LABEL_33;
    }
    *(void *)(v0 + 176) = v9;
    sub_100CFD870();
    swift_unknownObjectRetain();
    swift_dynamicCast();
    id v10 = *(id *)(v0 + 168);
    swift_unknownObjectRelease();
    uint64_t v8 = v4;
    uint64_t v6 = i;
LABEL_22:
    *(void *)(v0 + 288) = v8;
    *(void *)(v0 + 296) = v6;
    *(void *)(v0 + 280) = v10;
    if (!v10) {
      goto LABEL_33;
    }
    id v16 = [v10 appleID];
    if (v16)
    {
      uint64_t v17 = v16;
      uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v20 = v19;

      *(void *)(v0 + 112) = v18;
      *(void *)(v0 + 120) = v20;
      *(void *)(v0 + 128) = 64;
      *(void *)(v0 + 136) = 0xE100000000000000;
      sub_1000336D4();
      char v21 = StringProtocol.contains<A>(_:)();
      NSString v22 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      if (v21)
      {
        uint64_t v23 = (void *)IDSCopyIDForEmailAddress();

        if (v23)
        {
          char v24 = 0;
LABEL_30:
          *(unsigned char *)(v0 + 393) = v24;
          uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v27 = v26;

          *(void *)(v0 + 304) = v27;
          *(void *)(v0 + 312) = v25;
          uint64_t v1 = qword_10163C990;
          *(void *)(v0 + 320) = qword_10163C990;
          unint64_t v5 = (unint64_t)sub_100CFC5C4;
          uint64_t v2 = 0;
          return _swift_task_switch(v5, v1, v2);
        }
LABEL_38:
        __break(1u);
      }
      else
      {
        uint64_t v23 = (void *)IDSCopyIDForPhoneNumber();

        if (v23)
        {
          char v24 = 1;
          goto LABEL_30;
        }
      }
      __break(1u);
      return _swift_task_switch(v5, v1, v2);
    }

    uint64_t v4 = v8;
  }
  if (i)
  {
    uint64_t v6 = (i - 1) & i;
    unint64_t v7 = __clz(__rbit64(i)) | (v4 << 6);
    uint64_t v8 = v4;
LABEL_21:
    id v10 = *(id *)(*(void *)(v5 + 48) + 8 * v7);
    goto LABEL_22;
  }
  int64_t v11 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
    goto LABEL_38;
  }
  int64_t v12 = (unint64_t)(*(void *)(v0 + 256) + 64) >> 6;
  if (v11 >= v12) {
    goto LABEL_33;
  }
  uint64_t v13 = *(void *)(v0 + 248);
  unint64_t v14 = *(void *)(v13 + 8 * v11);
  uint64_t v8 = v4 + 1;
  if (v14) {
    goto LABEL_20;
  }
  uint64_t v8 = v4 + 2;
  if (v4 + 2 >= v12) {
    goto LABEL_33;
  }
  unint64_t v14 = *(void *)(v13 + 8 * v8);
  if (v14) {
    goto LABEL_20;
  }
  uint64_t v8 = v4 + 3;
  if (v4 + 3 >= v12) {
    goto LABEL_33;
  }
  unint64_t v14 = *(void *)(v13 + 8 * v8);
  if (v14) {
    goto LABEL_20;
  }
  uint64_t v8 = v4 + 4;
  if (v4 + 4 >= v12) {
    goto LABEL_33;
  }
  unint64_t v14 = *(void *)(v13 + 8 * v8);
  if (v14)
  {
LABEL_20:
    uint64_t v6 = (v14 - 1) & v14;
    unint64_t v7 = __clz(__rbit64(v14)) + (v8 << 6);
    goto LABEL_21;
  }
  uint64_t v15 = v4 + 5;
  while (v12 != v15)
  {
    unint64_t v14 = *(void *)(v13 + 8 * v15++);
    if (v14)
    {
      uint64_t v8 = v15 - 1;
      goto LABEL_20;
    }
  }
LABEL_33:
  sub_100132C20();
  swift_bridgeObjectRelease();
  uint64_t v28 = *(uint64_t (**)(void, void))(v0 + 8);
  return v28(0, 0);
}

uint64_t sub_100CFD858()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_100CFD870()
{
  unint64_t result = qword_10166BF90;
  if (!qword_10166BF90)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_10166BF90);
  }
  return result;
}

uint64_t sub_100CFD8B0(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100CFD8F8()
{
  unint64_t result = qword_10165CFA8;
  if (!qword_10165CFA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10165CFA8);
  }
  return result;
}

uint64_t sub_100CFD94C()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100CFD984()
{
  return sub_100CF9090();
}

uint64_t sub_100CFD98C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100CFD9C4()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100033F68;
  return sub_100CF9128(v0);
}

uint64_t sub_100CFDA54()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100CFDA94(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  unint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_10001D2E4;
  return sub_100CF93E8(a1, v4, v5, v6);
}

unsigned char *storeEnumTagSinglePayload for FamilyCircleServiceError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100CFDC20);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FamilyCircleServiceError()
{
  return &type metadata for FamilyCircleServiceError;
}

unint64_t sub_100CFDC5C()
{
  unint64_t result = qword_10165CFE0;
  if (!qword_10165CFE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165CFE0);
  }
  return result;
}

uint64_t sub_100CFDCBC(void *a1)
{
  int v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_10165D168);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100D013C8();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v12 = *v3;
  char v11 = 0;
  sub_100037BB4();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v12) = *((unsigned char *)v3 + 16);
    char v11 = 1;
    sub_1004C5B88();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    sub_10001D608((uint64_t)v3 + 40, (uint64_t)&v14, &qword_10165D170);
    sub_10001D608((uint64_t)&v14, (uint64_t)&v12, &qword_10165D170);
    char v11 = 3;
    sub_100176DE8();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_10001D608((uint64_t)v3 + 41, (uint64_t)&v13, &qword_10165D178);
    sub_10001D608((uint64_t)&v13, (uint64_t)&v12, &qword_10165D178);
    char v11 = 4;
    sub_1004C5BDC();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    *(void *)&long long v12 = *((void *)v3 + 6);
    char v11 = 5;
    sub_10000588C(&qword_10165D158);
    sub_100D0141C(&qword_10165D180, &qword_10165D090);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100CFDFB8(void *a1)
{
  int v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_10165D198);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_100D014B0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v11 = *v3;
  v10[15] = 0;
  sub_100037BB4();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    type metadata accessor for OwnSubmitLocationInfo();
    LOBYTE(v11) = 1;
    type metadata accessor for Date();
    sub_100D015C4((unint64_t *)&unk_10163ACE0, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100CFE188@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v18 = a2;
  uint64_t v20 = type metadata accessor for Date();
  uint64_t v17 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_10000588C(&qword_10165D188);
  uint64_t v19 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for OwnSubmitLocationInfo();
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100D014B0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  uint64_t v16 = v8;
  long long v11 = v10;
  uint64_t v13 = v19;
  uint64_t v12 = v20;
  char v23 = 0;
  sub_100037AA0();
  uint64_t v14 = v21;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(_OWORD *)long long v11 = v22;
  LOBYTE(v22) = 1;
  sub_100D015C4(&qword_10163ACC0, (void (*)(uint64_t))&type metadata accessor for Date);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v7, v14);
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(&v11[*(int *)(v16 + 20)], v5, v12);
  sub_100D01504((uint64_t)v11, v18);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  return sub_100D01568((uint64_t)v11);
}

uint64_t sub_100CFE4A8(void *a1)
{
  int v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_10165D108);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100D00904();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v9 = v3[1];
  long long v13 = *v3;
  long long v14 = v9;
  long long v15 = v3[2];
  char v12 = 0;
  sub_100D00958();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    *(void *)&long long v13 = *((void *)v3 + 6);
    char v12 = 1;
    sub_10000588C(&qword_10165D120);
    sub_100D01358(&qword_10165D128, (void (*)(void))sub_100D008B0);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100CFE67C(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_10165D1E8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_100D01B50();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_100CFE804()
{
  uint64_t result = 25705;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6570795479656BLL;
      break;
    case 2:
      uint64_t result = 0x64496572616873;
      break;
    case 3:
      uint64_t result = 1701869940;
      break;
    case 4:
      uint64_t result = 1701080941;
      break;
    case 5:
      uint64_t result = 0x6E6F697461636F6CLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100CFE8B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100D009AC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100CFE8E0(uint64_t a1)
{
  unint64_t v2 = sub_100D013C8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100CFE91C(uint64_t a1)
{
  unint64_t v2 = sub_100D013C8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100CFE958()
{
  return *(unsigned __int8 *)(v0 + 41);
}

uint64_t sub_100CFE960()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_100CFE990()
{
  return *(unsigned __int8 *)(v0 + 40);
}

double sub_100CFE998@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100D00C10(a1, (uint64_t)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    double result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(void *)(a2 + 48) = v8;
  }
  return result;
}

uint64_t sub_100CFE9E8(void *a1)
{
  return sub_100CFDCBC(a1);
}

uint64_t sub_100CFEA2C(uint64_t a1)
{
  unint64_t v2 = sub_100D014B0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100CFEA68(uint64_t a1)
{
  unint64_t v2 = sub_100D014B0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100CFEAA4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100CFE188(a1, a2);
}

uint64_t sub_100CFEABC(void *a1)
{
  return sub_100CFDFB8(a1);
}

uint64_t sub_100CFEAD4(uint64_t a1)
{
  unint64_t v2 = sub_100D00904();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100CFEB10(uint64_t a1)
{
  unint64_t v2 = sub_100D00904();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100CFEB4C@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100D01030(a1, v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    double result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(void *)(a2 + 48) = v8;
  }
  return result;
}

uint64_t sub_100CFEB9C(void *a1)
{
  return sub_100CFE4A8(a1);
}

uint64_t sub_100CFEBB4()
{
  uint64_t v1 = 0x526873696C627570;
  if (*v0 != 1) {
    uint64_t v1 = 0x6449746E65696C63;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x41747865746E6F63;
  }
}

uint64_t sub_100CFEC20@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100D01BA4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100CFEC48(uint64_t a1)
{
  unint64_t v2 = sub_100D01B50();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100CFEC84(uint64_t a1)
{
  unint64_t v2 = sub_100D01B50();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100CFECC0@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_100D01D2C(a1, (uint64_t *)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    double result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_100CFED04(void *a1)
{
  return sub_100CFE67C(a1);
}

uint64_t sub_100CFED1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 208) = a2;
  *(void *)(v3 + 216) = a3;
  *(_OWORD *)(v3 + 224) = *(_OWORD *)a1;
  *(void *)(v3 + 240) = *(void *)(a1 + 16);
  *(_OWORD *)(v3 + 248) = *(_OWORD *)(a1 + 24);
  *(void *)(v3 + 264) = *(void *)(a1 + 40);
  uint64_t v4 = type metadata accessor for HashAlgorithm();
  *(void *)(v3 + 272) = v4;
  *(void *)(v3 + 280) = *(void *)(v4 - 8);
  *(void *)(v3 + 288) = swift_task_alloc();
  uint64_t v5 = type metadata accessor for OwnSubmitLocationInfo();
  *(void *)(v3 + 296) = v5;
  *(void *)(v3 + 304) = *(void *)(v5 - 8);
  *(void *)(v3 + 312) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for JSONEncoder.DateEncodingStrategy();
  *(void *)(v3 + 320) = v6;
  *(void *)(v3 + 328) = *(void *)(v6 - 8);
  *(void *)(v3 + 336) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Date();
  *(void *)(v3 + 344) = v7;
  *(void *)(v3 + 352) = *(void *)(v7 - 8);
  *(void *)(v3 + 360) = swift_task_alloc();
  return _swift_task_switch(sub_100CFEF10, 0, 0);
}

id sub_100CFEF10()
{
  unint64_t v1 = sub_10092D8F8((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v85 = v0;
  v0[19] = v1;
  uint64_t v2 = v0 + 19;
  id result = [self currentDevice];
  if (result)
  {
    uint64_t v4 = result;
    id v5 = [result serverFriendlyDescription];

    if (v5)
    {
      uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v8 = v7;

      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *uint64_t v2 = 0x8000000000000000;
      sub_10016C0FC(v6, v8, 0xD000000000000011, 0x80000001013F64E0, isUniquelyReferenced_nonNull_native);
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_100163690(0xD000000000000011, 0x80000001013F64E0);
      swift_bridgeObjectRelease();
      unint64_t v1 = *v2;
    }
    uint64_t v11 = v0[44];
    uint64_t v10 = v0[45];
    uint64_t v12 = v0[43];
    uint64_t v13 = v0[26];
    char v14 = swift_isUniquelyReferenced_nonNull_native();
    sub_10016C0FC(49, 0xE100000000000000, 0x562D747065636341, 0xEE006E6F69737265, v14);
    swift_bridgeObjectRelease();
    char v15 = swift_isUniquelyReferenced_nonNull_native();
    sub_10016C0FC(0xD000000000000010, 0x80000001013F87B0, 0x2D746E65746E6F43, 0xEC00000065707954, v15);
    unint64_t v16 = v1;
    swift_bridgeObjectRelease();
    Date.init()();
    uint64_t v17 = Date.epoch.getter();
    uint64_t v18 = v12;
    uint64_t v19 = v0;
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v18);
    v0[24] = v17;
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v22 = v21;
    char v23 = swift_isUniquelyReferenced_nonNull_native();
    v0[19] = 0x8000000000000000;
    sub_10016C0FC(v20, v22, 0xD000000000000015, 0x80000001013F87D0, v23);
    v0[19] = v16;
    swift_bridgeObjectRelease();
    int64_t v24 = *(void *)(v13 + 16);
    if (v24)
    {
      uint64_t v25 = v0 + 9;
      uint64_t v82 = v85[39];
      uint64_t v80 = v85[38];
      char v79 = v2 - 5;
      uint64_t v26 = v85[26];
      sub_1000B72D0(0, v24, 0);
      uint64_t v27 = 0;
      uint64_t v72 = v26 + 32;
      int64_t v73 = v24;
      do
      {
        uint64_t v78 = v27;
        sub_10001D010(v72 + 40 * v27, (uint64_t)v79);
        uint64_t v28 = v19[17];
        uint64_t v29 = v19[18];
        sub_10001CD44(v79, v28);
        (*(void (**)(uint64_t, uint64_t))(v29 + 64))(v28, v29);
        swift_getAssociatedTypeWitness();
        sub_10000588C(&qword_101638D00);
        uint64_t v30 = _arrayForceCast<A, B>(_:)();
        swift_bridgeObjectRelease();
        int64_t v31 = *(void *)(v30 + 16);
        if (v31)
        {
          sub_1000B72F0(0, v31, 0);
          uint64_t v32 = v30 + 32;
          do
          {
            uint64_t v33 = v19;
            uint64_t v34 = (uint64_t *)v19[39];
            sub_10001D010(v32, (uint64_t)v25);
            uint64_t v35 = v33[12];
            uint64_t v36 = v33[13];
            sub_10001CD44(v25, v35);
            uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t))(v36 + 24))(v35, v36);
            uint64_t v39 = v38;
            uint64_t v41 = v33[12];
            uint64_t v40 = v33[13];
            sub_10001CD44(v25, v41);
            (*(void (**)(uint64_t, uint64_t))(v40 + 32))(v41, v40);
            *uint64_t v34 = v37;
            *(void *)(v82 + 8) = v39;
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v25);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              sub_1000B72F0(0, _swiftEmptyArrayStorage[2] + 1, 1);
            }
            unint64_t v43 = _swiftEmptyArrayStorage[2];
            unint64_t v42 = _swiftEmptyArrayStorage[3];
            uint64_t v19 = v85;
            if (v43 >= v42 >> 1) {
              sub_1000B72F0(v42 > 1, v43 + 1, 1);
            }
            uint64_t v44 = v85[39];
            _swiftEmptyArrayStorage[2] = v43 + 1;
            sub_100D00034(v44, (uint64_t)_swiftEmptyArrayStorage+ ((*(unsigned __int8 *)(v80 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v80 + 80))+ *(void *)(v80 + 72) * v43);
            v32 += 40;
            --v31;
          }
          while (v31);
        }
        swift_bridgeObjectRelease();
        uint64_t v45 = v19[17];
        uint64_t v46 = v19[18];
        sub_10001CD44(v79, v45);
        uint64_t v47 = (*(uint64_t (**)(uint64_t, uint64_t))(v46 + 40))(v45, v46);
        uint64_t v76 = v48;
        uint64_t v77 = v47;
        uint64_t v49 = v19[17];
        uint64_t v50 = v19[18];
        sub_10001CD44(v79, v49);
        char v75 = (*(uint64_t (**)(uint64_t, uint64_t))(v50 + 48))(v49, v50);
        uint64_t v51 = v19[17];
        uint64_t v52 = v19[18];
        sub_10001CD44(v79, v51);
        uint64_t v74 = (*(uint64_t (**)(uint64_t, uint64_t))(v52 + 72))(v51, v52);
        uint64_t v54 = v53;
        uint64_t v55 = v19[17];
        uint64_t v56 = v19[18];
        sub_10001CD44(v79, v55);
        char v57 = (*(uint64_t (**)(uint64_t, uint64_t))(v56 + 80))(v55, v56);
        uint64_t v58 = v19[17];
        uint64_t v59 = v19[18];
        sub_10001CD44(v79, v58);
        char v60 = (*(uint64_t (**)(uint64_t, uint64_t))(v59 + 56))(v58, v59);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v79);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1000B72D0(0, _swiftEmptyArrayStorage[2] + 1, 1);
        }
        uint64_t v61 = v78;
        unint64_t v63 = _swiftEmptyArrayStorage[2];
        unint64_t v62 = _swiftEmptyArrayStorage[3];
        if (v63 >= v62 >> 1)
        {
          sub_1000B72D0(v62 > 1, v63 + 1, 1);
          uint64_t v61 = v78;
        }
        uint64_t v27 = v61 + 1;
        _swiftEmptyArrayStorage[2] = v63 + 1;
        uint64_t v64 = &_swiftEmptyArrayStorage[7 * v63];
        v64[4] = v77;
        v64[5] = v76;
        *((unsigned char *)v64 + 48) = v75;
        v64[7] = v74;
        v64[8] = v54;
        *((unsigned char *)v64 + 72) = v57;
        *((unsigned char *)v64 + 73) = v60;
        v64[10] = _swiftEmptyArrayStorage;
      }
      while (v27 != v73);
    }
    swift_bridgeObjectRelease();
    uint64_t v65 = (void *)v19[42];
    uint64_t v66 = v85[41];
    uint64_t v67 = v85[40];
    uint64_t v68 = v85[33];
    uint64_t v69 = v85[32];
    long long v83 = *((_OWORD *)v85 + 15);
    long long v81 = *((_OWORD *)v85 + 14);
    type metadata accessor for JSONEncoder();
    swift_allocObject();
    v85[46] = JSONEncoder.init()();
    *uint64_t v65 = sub_1003B9190;
    v65[1] = 0;
    (*(void (**)(void *, void, uint64_t))(v66 + 104))(v65, enum case for JSONEncoder.DateEncodingStrategy.custom(_:), v67);
    dispatch thunk of JSONEncoder.dateEncodingStrategy.setter();
    *((_OWORD *)v85 + 1) = v81;
    *((_OWORD *)v85 + 2) = v83;
    v85[6] = v69;
    v85[7] = v68;
    v85[8] = _swiftEmptyArrayStorage;
    sub_100D00098();
    v85[47] = dispatch thunk of JSONEncoder.encode<A>(_:)();
    v85[48] = v70;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v84 = (uint64_t (__cdecl *)())((char *)&dword_10165ABE8 + dword_10165ABE8);
    uint64_t v71 = (void *)swift_task_alloc();
    v85[49] = v71;
    *uint64_t v71 = v85;
    v71[1] = sub_100CFF848;
    return (id)v84();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100CFF848(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 400) = a1;
  *(void *)(v3 + 408) = a2;
  swift_task_dealloc();
  return _swift_task_switch(sub_100CFF948, 0, 0);
}

uint64_t sub_100CFF948()
{
  uint64_t v2 = v0[50];
  unint64_t v1 = v0[51];
  uint64_t v4 = v0[47];
  unint64_t v3 = v0[48];
  uint64_t v6 = v0[35];
  uint64_t v5 = v0[36];
  uint64_t v7 = v0[34];
  v0[22] = v2;
  v0[23] = v1;
  sub_1000361E0(v2, v1);
  sub_1000361E0(v4, v3);
  sub_100A42CBC(v4, v3);
  sub_10001CFB8(v4, v3);
  sub_10001CFB8(v2, v1);
  uint64_t v8 = v0[23];
  v0[52] = v0[22];
  v0[53] = v8;
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v5, enum case for HashAlgorithm.sha256(_:), v7);
  uint64_t v9 = Data.hash(algorithm:)();
  uint64_t v11 = v10;
  v0[54] = v9;
  v0[55] = v10;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  char v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_10165ABE0 + dword_10165ABE0);
  uint64_t v12 = (void *)swift_task_alloc();
  v0[56] = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_100CFFAD0;
  uint64_t v13 = v0[27];
  return v15(v9, v11, v13);
}

uint64_t sub_100CFFAD0(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  *(void *)(*(void *)v2 + 456) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_100CFFD60;
  }
  else
  {
    uint64_t v6 = v4[54];
    unint64_t v7 = v4[55];
    v4[58] = a1;
    sub_10001CFB8(v6, v7);
    uint64_t v5 = sub_100CFFBFC;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100CFFBFC()
{
  uint64_t v13 = v0;
  uint64_t v1 = v0[19];
  uint64_t v3 = v0[57];
  uint64_t v2 = v0[58];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v12 = v1;
  v0[19] = 0x8000000000000000;
  sub_1001EE9C8(v2, (uint64_t)sub_100BD6E00, 0, isUniquelyReferenced_nonNull_native, &v12);
  if (v3)
  {
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = v0[52];
    unint64_t v7 = v0[53];
    v0[19] = v12;
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    sub_10001CFB8(v6, v7);
    uint64_t v8 = v0[19];
    uint64_t v10 = v0[47];
    uint64_t v9 = v0[48];
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[1];
    return v11(v8, v10, v9);
  }
}

uint64_t sub_100CFFD60()
{
  uint64_t v1 = v0[52];
  unint64_t v2 = v0[53];
  sub_10001CFB8(v0[54], v0[55]);
  sub_10001CFB8(v1, v2);
  if (qword_101637000 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_100010324(v3, (uint64_t)qword_10170EAE0);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    unint64_t v7 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 138543362;
    swift_errorRetain();
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError();
    v0[25] = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v7 = v8;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to generate attestation header: %{public}@.", v6, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();
    swift_release();

    swift_errorRelease();
  }
  else
  {
    swift_release();
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
    swift_release();
  }
  uint64_t v9 = v0[19];
  uint64_t v11 = v0[47];
  uint64_t v10 = v0[48];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[1];
  return v12(v9, v11, v10);
}

uint64_t type metadata accessor for OwnSubmitLocationInfo()
{
  uint64_t result = qword_10165D050;
  if (!qword_10165D050) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100D00034(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OwnSubmitLocationInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100D00098()
{
  unint64_t result = qword_10165CFF0;
  if (!qword_10165CFF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165CFF0);
  }
  return result;
}

uint64_t destroy for OwnSubmitRequestBody()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for OwnSubmitRequestBody(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for OwnSubmitRequestBody(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for OwnSubmitRequestBody(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for OwnSubmitRequestBody(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OwnSubmitRequestBody(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OwnSubmitRequestBody()
{
  return &type metadata for OwnSubmitRequestBody;
}

ValueMetadata *type metadata accessor for OwnSubmitRequest()
{
  return &type metadata for OwnSubmitRequest;
}

uint64_t destroy for OwnSubmitPayload(uint64_t a1)
{
  sub_10001CFB8(*(void *)a1, *(void *)(a1 + 8));
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for OwnSubmitPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_1000361E0(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v6;
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for OwnSubmitPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_1000361E0(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  sub_10001CFB8(v6, v7);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for OwnSubmitPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001CFB8(v4, v5);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v6;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for OwnSubmitPayload()
{
  return &type metadata for OwnSubmitPayload;
}

uint64_t sub_100D00534(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100D00548);
}

uint64_t sub_100D00548(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_100D00604(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100D00618);
}

void *sub_100D00618(void *result, uint64_t a2, int a3, uint64_t a4)
{
  unint64_t v5 = result;
  if (a3 == 12)
  {
    *unint64_t result = 0;
    result[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_100D006C8()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100D00760(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100D015C4(&qword_10165D088, (void (*)(uint64_t))type metadata accessor for OwnSubmitLocationInfo);
  uint64_t result = sub_100D015C4(&qword_10165D090, (void (*)(uint64_t))type metadata accessor for OwnSubmitLocationInfo);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_100D007E4()
{
  return sub_100D015C4(&qword_10165D098, (void (*)(uint64_t))type metadata accessor for OwnSubmitLocationInfo);
}

unint64_t sub_100D0082C(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100D0085C();
  unint64_t result = sub_100D008B0();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100D0085C()
{
  unint64_t result = qword_10165D0F8;
  if (!qword_10165D0F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165D0F8);
  }
  return result;
}

unint64_t sub_100D008B0()
{
  unint64_t result = qword_10165D100;
  if (!qword_10165D100)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165D100);
  }
  return result;
}

unint64_t sub_100D00904()
{
  unint64_t result = qword_10165D110;
  if (!qword_10165D110)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165D110);
  }
  return result;
}

unint64_t sub_100D00958()
{
  unint64_t result = qword_10165D118;
  if (!qword_10165D118)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165D118);
  }
  return result;
}

uint64_t sub_100D009AC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6570795479656BLL && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x64496572616873 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 1701869940 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 1701080941 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x6E6F697461636F6CLL && a2 == 0xEC0000006F666E49)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

uint64_t sub_100D00C10@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10000588C(&qword_10165D148);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100D013C8();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  char v25 = 0;
  sub_100037AA0();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v10 = v22;
  unint64_t v9 = v23;
  char v25 = 1;
  sub_1000361E0(v22, v23);
  sub_1004C5AE0();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  int v24 = v22;
  LOBYTE(v22) = 2;
  uint64_t v11 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v13 = v12;
  uint64_t v20 = v11;
  char v25 = 3;
  sub_1005FA260();
  swift_bridgeObjectRetain();
  uint64_t v21 = v13;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  int v19 = v22;
  char v25 = 4;
  sub_1004C5B34();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  int v18 = v22;
  sub_10000588C(&qword_10165D158);
  char v25 = 5;
  sub_100D0141C(&qword_10165D160, &qword_10165D088);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v14 = v22;
  sub_1000361E0(v10, v9);
  swift_bridgeObjectRetain();
  sub_10001CFB8(v10, v9);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  sub_10001CFB8(v10, v9);
  swift_bridgeObjectRelease();
  uint64_t v15 = v21;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = v10;
  *(void *)(a2 + 8) = v9;
  *(unsigned char *)(a2 + 16) = v24;
  *(void *)(a2 + 24) = v20;
  *(void *)(a2 + 32) = v15;
  *(unsigned char *)(a2 + 40) = v19;
  *(unsigned char *)(a2 + 41) = v18;
  *(void *)(a2 + 48) = v14;
  return result;
}

uint64_t sub_100D01030@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = sub_10000588C(&qword_10165D130);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100D00904();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  char v27 = 0;
  sub_100D01304();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v9 = v22;
  uint64_t v17 = v23;
  uint64_t v18 = v21;
  uint64_t v19 = v24;
  uint64_t v10 = v26;
  uint64_t v16 = v25;
  sub_10000588C(&qword_10165D120);
  char v27 = 1;
  sub_100D01358(&qword_10165D140, (void (*)(void))sub_100D0085C);
  uint64_t v20 = v9;
  uint64_t v11 = v19;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v12 = v21;
  swift_bridgeObjectRetain();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v13 = v20;
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v18;
  a2[1] = v13;
  a2[2] = v17;
  a2[3] = v11;
  a2[4] = v16;
  a2[5] = v10;
  a2[6] = v12;
  return result;
}

unint64_t sub_100D01304()
{
  unint64_t result = qword_10165D138;
  if (!qword_10165D138)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165D138);
  }
  return result;
}

uint64_t sub_100D01358(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000592C(&qword_10165D120);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100D013C8()
{
  unint64_t result = qword_10165D150;
  if (!qword_10165D150)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165D150);
  }
  return result;
}

uint64_t sub_100D0141C(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000592C(&qword_10165D158);
    sub_100D015C4(a2, (void (*)(uint64_t))type metadata accessor for OwnSubmitLocationInfo);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_100D014B0()
{
  unint64_t result = qword_10165D190;
  if (!qword_10165D190)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165D190);
  }
  return result;
}

uint64_t sub_100D01504(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OwnSubmitLocationInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100D01568(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for OwnSubmitLocationInfo();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100D015C4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for OwnSubmitLocationInfo.CodingKeys()
{
  return &type metadata for OwnSubmitLocationInfo.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for OwnSubmitPayload.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100D016ECLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OwnSubmitPayload.CodingKeys()
{
  return &type metadata for OwnSubmitPayload.CodingKeys;
}

unsigned char *_s12searchpartyd21OwnSubmitLocationInfoV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100D017F0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OwnSubmitRequestBody.CodingKeys()
{
  return &type metadata for OwnSubmitRequestBody.CodingKeys;
}

ValueMetadata *type metadata accessor for OwnSubmitClientContext()
{
  return &type metadata for OwnSubmitClientContext;
}

unint64_t sub_100D0183C()
{
  unint64_t result = qword_10165D1A0;
  if (!qword_10165D1A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165D1A0);
  }
  return result;
}

unint64_t sub_100D01894()
{
  unint64_t result = qword_10165D1A8;
  if (!qword_10165D1A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165D1A8);
  }
  return result;
}

unint64_t sub_100D018EC()
{
  unint64_t result = qword_10165D1B0;
  if (!qword_10165D1B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165D1B0);
  }
  return result;
}

unint64_t sub_100D01944()
{
  unint64_t result = qword_10165D1B8;
  if (!qword_10165D1B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165D1B8);
  }
  return result;
}

unint64_t sub_100D0199C()
{
  unint64_t result = qword_10165D1C0;
  if (!qword_10165D1C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165D1C0);
  }
  return result;
}

unint64_t sub_100D019F4()
{
  unint64_t result = qword_10165D1C8;
  if (!qword_10165D1C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165D1C8);
  }
  return result;
}

unint64_t sub_100D01A4C()
{
  unint64_t result = qword_10165D1D0;
  if (!qword_10165D1D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165D1D0);
  }
  return result;
}

unint64_t sub_100D01AA4()
{
  unint64_t result = qword_10165D1D8;
  if (!qword_10165D1D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165D1D8);
  }
  return result;
}

unint64_t sub_100D01AFC()
{
  unint64_t result = qword_10165D1E0;
  if (!qword_10165D1E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165D1E0);
  }
  return result;
}

unint64_t sub_100D01B50()
{
  unint64_t result = qword_10165D1F0;
  if (!qword_10165D1F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165D1F0);
  }
  return result;
}

uint64_t sub_100D01BA4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x41747865746E6F63 && a2 == 0xEA00000000007070;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x526873696C627570 && a2 == 0xED00006E6F736165 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6449746E65696C63 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_100D01D2C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_10000588C(&qword_10165D1F8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100D01B50();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  char v27 = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  uint64_t v24 = v9;
  char v26 = 1;
  swift_bridgeObjectRetain();
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v14 = v13;
  uint64_t v22 = v12;
  char v25 = 2;
  swift_bridgeObjectRetain();
  uint64_t v23 = v14;
  uint64_t v15 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v17 = v16;
  uint64_t v18 = v15;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_bridgeObjectRetain();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  swift_bridgeObjectRelease();
  uint64_t v19 = v23;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v24;
  a2[1] = v11;
  a2[2] = v22;
  a2[3] = v19;
  a2[4] = v18;
  a2[5] = v17;
  return result;
}

unsigned char *storeEnumTagSinglePayload for OwnSubmitClientContext.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100D02090);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OwnSubmitClientContext.CodingKeys()
{
  return &type metadata for OwnSubmitClientContext.CodingKeys;
}

unint64_t sub_100D020CC()
{
  unint64_t result = qword_10165D200;
  if (!qword_10165D200)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165D200);
  }
  return result;
}

unint64_t sub_100D02124()
{
  unint64_t result = qword_10165D208;
  if (!qword_10165D208)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165D208);
  }
  return result;
}

unint64_t sub_100D0217C()
{
  unint64_t result = qword_10165D210;
  if (!qword_10165D210)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165D210);
  }
  return result;
}

id sub_100D0246C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ContainerAPSBridge();
  return [super dealloc];
}

uint64_t type metadata accessor for ContainerAPSBridge()
{
  return self;
}

uint64_t sub_100D024D4(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 == 15)
  {
    static os_log_type_t.error.getter();
    if (qword_101637268 != -1) {
      swift_once();
    }
    return os_log(_:dso:log:_:_:)();
  }
  else
  {
    uint64_t result = swift_unknownObjectWeakLoadStrong();
    if (result)
    {
      sub_1000361E0(a1, a2);
      static os_log_type_t.default.getter();
      if (qword_101637268 != -1) {
        swift_once();
      }
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v5 = swift_allocObject();
      *(_OWORD *)(v5 + 16) = xmmword_101342130;
      uint64_t v6 = Data.hexString.getter();
      uint64_t v8 = v7;
      *(void *)(v5 + 56) = &type metadata for String;
      *(void *)(v5 + 64) = sub_10000B4CC();
      *(void *)(v5 + 32) = v6;
      *(void *)(v5 + 40) = v8;
      os_log(_:dso:log:_:_:)();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
      return sub_100037A24(a1, a2);
    }
  }
  return result;
}

uint64_t sub_100D026C8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2 >> 60 == 15 || a4 == 0 || a6 == 0)
  {
    static os_log_type_t.error.getter();
    if (qword_101637268 != -1) {
      swift_once();
    }
    return os_log(_:dso:log:_:_:)();
  }
  else
  {
    uint64_t result = swift_unknownObjectWeakLoadStrong();
    if (result)
    {
      sub_1000361E0(a1, a2);
      static os_log_type_t.default.getter();
      if (qword_101637268 != -1) {
        swift_once();
      }
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v15 = swift_allocObject();
      *(_OWORD *)(v15 + 16) = xmmword_101347500;
      uint64_t v16 = Data.hexString.getter();
      uint64_t v18 = v17;
      *(void *)(v15 + 56) = &type metadata for String;
      unint64_t v19 = sub_10000B4CC();
      *(void *)(v15 + 32) = v16;
      *(void *)(v15 + 40) = v18;
      *(void *)(v15 + 96) = &type metadata for String;
      *(void *)(v15 + 104) = v19;
      *(void *)(v15 + 64) = v19;
      *(void *)(v15 + 72) = a3;
      *(void *)(v15 + 80) = a4;
      *(void *)(v15 + 136) = &type metadata for String;
      *(void *)(v15 + 144) = v19;
      *(void *)(v15 + 112) = a5;
      *(void *)(v15 + 120) = a6;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      sub_100037A24(a1, a2);
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t sub_100D02918(void *a1)
{
  if (a1)
  {
    uint64_t result = swift_unknownObjectWeakLoadStrong();
    if (result)
    {
      id v3 = a1;
      sub_1002069FC(v3);

      return swift_unknownObjectRelease();
    }
  }
  else
  {
    static os_log_type_t.error.getter();
    if (qword_101637268 != -1) {
      swift_once();
    }
    return os_log(_:dso:log:_:_:)();
  }
  return result;
}

ValueMetadata *type metadata accessor for PencilPairingCompleteCommandPayload()
{
  return &type metadata for PencilPairingCompleteCommandPayload;
}

unint64_t sub_100D02A14(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100D02A44();
  unint64_t result = sub_1001E2DE0();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100D02A44()
{
  unint64_t result = qword_10165D2B0;
  if (!qword_10165D2B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165D2B0);
  }
  return result;
}

uint64_t sub_100D02A98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100D02AAC);
}

uint64_t sub_100D02AAC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for FMNAccountType();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_100D02B5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100D02B70);
}

void *sub_100D02B70(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *unint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for FMNAccountType();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for AccessoryIdentityPairingLockAckEndPoint()
{
  uint64_t result = qword_10165D310;
  if (!qword_10165D310) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100D02C64()
{
  sub_10000588C(&qword_101639580);
  OS_dispatch_queue.sync<A>(execute:)();
  URLComponents.init()();
  URLComponents.scheme.setter();
  URLComponents.host.setter();
  URLComponents.path.setter();
  uint64_t v0 = (void (*)(uint64_t *, void))URLComponents.path.modify();
  v1._countAndFlagsBits = 0xD00000000000001ELL;
  v1._object = (void *)0x80000001014170C0;
  String.append(_:)(v1);
  v0(&v7, 0);
  if (qword_101637188 != -1) {
    swift_once();
  }
  objc_super v2 = (void *)qword_10170EE68;
  id v3 = [self sharedInstance];
  unsigned int v4 = [v3 isInternalBuild];

  if (v4)
  {
    NSString v5 = String._bridgeToObjectiveC()();
    id v6 = [v2 stringForKey:v5];

    if (v6)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      URLComponents.host.setter();
    }
  }
}

uint64_t sub_100D02E4C(void *a1)
{
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryEncoding.container()();
  sub_1000BD078((uint64_t)v3, v4);
  sub_100135A44();
  dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
  if (!v1)
  {
    sub_1000BD078((uint64_t)v3, v4);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1000BD078((uint64_t)v3, v4);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v3);
}

double sub_100D02F84@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_100D03140(a1, v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    double result = *(double *)&v7;
    a2[2] = v7;
  }
  return result;
}

uint64_t sub_100D02FC8(void *a1)
{
  return sub_100D02E4C(a1);
}

uint64_t sub_100D02FE0@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, void *a7@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v7) = HIDWORD(result) - result;
      if (__OFSUB__(HIDWORD(result), result))
      {
        __break(1u);
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
        JUMPOUT(0x100D03110);
      }
      uint64_t v7 = (int)v7;
LABEL_6:
      if (v7 != 32) {
        goto LABEL_26;
      }
      switch(a4 >> 62)
      {
        case 1uLL:
          LODWORD(v11) = HIDWORD(a3) - a3;
          if (__OFSUB__(HIDWORD(a3), a3)) {
            goto LABEL_22;
          }
          uint64_t v11 = (int)v11;
LABEL_12:
          if (v11 != 1) {
            goto LABEL_27;
          }
          switch(a6 >> 62)
          {
            case 1uLL:
              LODWORD(v14) = HIDWORD(a5) - a5;
              if (__OFSUB__(HIDWORD(a5), a5)) {
                goto LABEL_24;
              }
              uint64_t v14 = (int)v14;
LABEL_18:
              if (v14 != 100) {
                goto LABEL_28;
              }
              *a7 = result;
              a7[1] = a2;
              a7[2] = a5;
              a7[3] = a6;
              a7[4] = a3;
              a7[5] = a4;
              return result;
            case 2uLL:
              uint64_t v16 = *(void *)(a5 + 16);
              uint64_t v15 = *(void *)(a5 + 24);
              BOOL v10 = __OFSUB__(v15, v16);
              uint64_t v14 = v15 - v16;
              if (!v10) {
                goto LABEL_18;
              }
              goto LABEL_25;
            case 3uLL:
              goto LABEL_28;
            default:
              uint64_t v14 = BYTE6(a6);
              goto LABEL_18;
          }
        case 2uLL:
          uint64_t v13 = *(void *)(a3 + 16);
          uint64_t v12 = *(void *)(a3 + 24);
          BOOL v10 = __OFSUB__(v12, v13);
          uint64_t v11 = v12 - v13;
          if (!v10) {
            goto LABEL_12;
          }
          goto LABEL_23;
        case 3uLL:
          goto LABEL_27;
        default:
          uint64_t v11 = BYTE6(a4);
          goto LABEL_12;
      }
    case 2uLL:
      uint64_t v9 = *(void *)(result + 16);
      uint64_t v8 = *(void *)(result + 24);
      BOOL v10 = __OFSUB__(v8, v9);
      uint64_t v7 = v8 - v9;
      if (!v10) {
        goto LABEL_6;
      }
      goto LABEL_21;
    case 3uLL:
      goto LABEL_26;
    default:
      uint64_t v7 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_100D03140@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryDecoding.container()();
  sub_1000BD078((uint64_t)v19, v20);
  uint64_t v5 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  if (v2)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v19);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  else
  {
    uint64_t v7 = v5;
    unint64_t v8 = v6;
    sub_1000BD078((uint64_t)v19, v20);
    uint64_t v9 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
    unint64_t v22 = v10;
    sub_1000BD078((uint64_t)v19, v20);
    uint64_t v11 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
    uint64_t v17 = v9;
    unint64_t v18 = v22;
    unint64_t v13 = v12;
    sub_1000361E0(v11, v12);
    sub_1000362FC();
    uint64_t v14 = DataProtocol.intValue.getter();
    sub_100435A9C(v14, v11, v13, &v17);
    sub_10001CFB8(v17, v18);
    sub_100D02FE0(v7, v8, v9, v22, v11, v13, v21);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v19);
    uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
    long long v16 = v21[1];
    *a2 = v21[0];
    a2[1] = v16;
    a2[2] = v21[2];
  }
  return result;
}

double sub_100D03304@<D0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, _OWORD *a5@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v10) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_37;
      }
      uint64_t v10 = (int)v10;
LABEL_6:
      if (v10 != 32) {
        goto LABEL_46;
      }
      break;
    case 2uLL:
      uint64_t v12 = *(void *)(a1 + 16);
      uint64_t v11 = *(void *)(a1 + 24);
      BOOL v13 = __OFSUB__(v11, v12);
      uint64_t v10 = v11 - v12;
      if (!v13) {
        goto LABEL_6;
      }
      goto LABEL_38;
    case 3uLL:
      goto LABEL_46;
    default:
      uint64_t v10 = BYTE6(a2);
      goto LABEL_6;
  }
  unint64_t v14 = a4 >> 62;
  switch(a4 >> 62)
  {
    case 1uLL:
      goto LABEL_14;
    case 2uLL:
      goto LABEL_10;
    case 3uLL:
      goto LABEL_47;
    default:
      uint64_t v15 = BYTE6(a4);
      if (BYTE6(a4)) {
        goto LABEL_17;
      }
      __break(1u);
LABEL_10:
      uint64_t v16 = *(void *)(a3 + 16);
      uint64_t v17 = *(void *)(a3 + 24);
      if (v16 == v17) {
        goto LABEL_39;
      }
      BOOL v13 = __OFSUB__(v17, v16);
      uint64_t v15 = v17 - v16;
      if (!v13) {
        goto LABEL_17;
      }
      __break(1u);
LABEL_14:
      if (!((a3 ^ (unint64_t)(a3 << 32)) >> 32)) {
        goto LABEL_40;
      }
      LODWORD(v15) = HIDWORD(a3) - a3;
      if (__OFSUB__(HIDWORD(a3), a3)) {
        goto LABEL_41;
      }
      uint64_t v15 = (int)v15;
LABEL_17:
      if (v15 > 100)
      {
        __break(1u);
        goto LABEL_36;
      }
      if (v14)
      {
        if (v14 == 1)
        {
          if (__OFSUB__(HIDWORD(a3), a3))
          {
LABEL_42:
            __break(1u);
            goto LABEL_43;
          }
          uint64_t v18 = HIDWORD(a3) - (int)a3;
        }
        else
        {
          uint64_t v20 = *(void *)(a3 + 16);
          uint64_t v19 = *(void *)(a3 + 24);
          uint64_t v18 = v19 - v20;
          if (__OFSUB__(v19, v20))
          {
LABEL_43:
            __break(1u);
            goto LABEL_44;
          }
        }
        sub_1000361E0(a3, a4);
      }
      else
      {
        uint64_t v18 = BYTE6(a4);
      }
      if (__OFSUB__(100, v18))
      {
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
      *(void *)&v33[0] = sub_10085E9A4(100 - v18);
      *((void *)&v33[0] + 1) = v21;
      sub_10072AD40((uint64_t *)v33, 0);
      long long v22 = v33[0];
      Data.append(_:)();
      sub_10001CFB8(v22, *((unint64_t *)&v22 + 1));
      if (!v14)
      {
        LOBYTE(v23) = BYTE6(a4);
        goto LABEL_34;
      }
      if (v14 != 1)
      {
        uint64_t v25 = *(void *)(a3 + 16);
        uint64_t v24 = *(void *)(a3 + 24);
        BOOL v13 = __OFSUB__(v24, v25);
        unint64_t v23 = v24 - v25;
        if (!v13) {
          goto LABEL_32;
        }
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x100D035FCLL);
      }
      LODWORD(v23) = HIDWORD(a3) - a3;
      if (__OFSUB__(HIDWORD(a3), a3))
      {
LABEL_44:
        __break(1u);
        goto LABEL_45;
      }
      unint64_t v23 = (int)v23;
LABEL_32:
      if ((v23 & 0x8000000000000000) != 0 || v23 >= 0x100) {
        goto LABEL_48;
      }
LABEL_34:
      LOBYTE(v33[0]) = v23;
      sub_10006145C();
      uint64_t v26 = FixedWidthInteger.data.getter();
      unint64_t v28 = v27;
      sub_10001CFB8(a3, a4);
      sub_100D02FE0(a1, a2, v26, v28, a3, a4, v33);
      long long v29 = v33[1];
      *a5 = v33[0];
      a5[1] = v29;
      double result = *(double *)&v34;
      a5[2] = v34;
      return result;
  }
}

ValueMetadata *type metadata accessor for PencilFinalizePairingCommandPayload()
{
  return &type metadata for PencilFinalizePairingCommandPayload;
}

unint64_t sub_100D0362C(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100D0365C();
  unint64_t result = sub_1001E2E88();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100D0365C()
{
  unint64_t result = qword_10165D348;
  if (!qword_10165D348)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165D348);
  }
  return result;
}

uint64_t sub_100D036B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100D036C4);
}

uint64_t sub_100D036C4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for FMNAccountType();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_100D03774(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100D03788);
}

void *sub_100D03788(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *unint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for FMNAccountType();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for AccessoryPairingLockAckEndpoint()
{
  uint64_t result = qword_10165D3A8;
  if (!qword_10165D3A8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100D0387C()
{
  sub_10000588C(&qword_101639580);
  OS_dispatch_queue.sync<A>(execute:)();
  URLComponents.init()();
  URLComponents.scheme.setter();
  URLComponents.host.setter();
  URLComponents.path.setter();
  URLComponents.path.setter();
  if (qword_101637188 != -1) {
    swift_once();
  }
  uint64_t v0 = (void *)qword_10170EE68;
  id v1 = [self sharedInstance];
  unsigned int v2 = [v1 isInternalBuild];

  if (v2)
  {
    NSString v3 = String._bridgeToObjectiveC()();
    id v4 = [v0 stringForKey:v3];

    if (v4)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      URLComponents.host.setter();
    }
  }
}

uint64_t sub_100D03A3C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = enum case for FMNAccountType.pairingLock(_:);
  uint64_t v3 = type metadata accessor for FMNAccountType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104))(a1, v2, v3);
  type metadata accessor for PairingLockUpdateEndPoint();
  URLComponents.init()();
  URLComponents.scheme.setter();
  URLComponents.path.setter();
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  sub_1010ABD54(v5);
  swift_bridgeObjectRelease();
  return URLComponents.host.setter();
}

uint64_t type metadata accessor for PairingLockUpdateEndPoint()
{
  uint64_t result = qword_10165D438;
  if (!qword_10165D438) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100D03BDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100D03BF0);
}

uint64_t sub_100D03BF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for FMNAccountType();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = type metadata accessor for URLComponents();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t sub_100D03CE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100D03CFC);
}

uint64_t sub_100D03CFC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for FMNAccountType();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = type metadata accessor for URLComponents();
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

void sub_100D03E00()
{
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100010324(v0, (uint64_t)qword_10170EC30);
  oslog = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v1, "Received notification of FMF data update complete", v2, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_100D03EE8(uint64_t a1)
{
  return sub_10044B124(a1, qword_10170EC30);
}

uint64_t sub_100D03F14(uint64_t a1)
{
  return sub_10044B124(a1, qword_10170EC48);
}

void *sub_100D03F3C()
{
  type metadata accessor for SecureLocationsInfo();
  swift_allocObject();
  uint64_t result = sub_100D04040();
  qword_10170EC60 = (uint64_t)result;
  return result;
}

uint64_t sub_100D03F78()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10165D470);
  uint64_t v1 = sub_100010324(v0, (uint64_t)qword_10165D470);
  if (qword_101637078 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100010324(v0, (uint64_t)qword_10170EC48);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void *sub_100D04040()
{
  uint64_t v1 = (void *)v0;
  uint64_t v17 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v17);
  uint64_t v2 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v2 - 8);
  uint64_t v15 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v3 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v5 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)(v0 + 16) = 0;
  *(void *)(v0 + 24) = 0;
  LOBYTE(v20[0]) = 0;
  sub_10000588C(&qword_101657190);
  swift_allocObject();
  uint64_t v18 = CurrentValueSubject.init(_:)();
  *(void *)(v0 + 32) = v18;
  sub_10000588C(&qword_101644840);
  swift_allocObject();
  *(void *)(v0 + 48) = PassthroughSubject.init()();
  swift_allocObject();
  *(void *)(v0 + 64) = PassthroughSubject.init()();
  swift_allocObject();
  *(void *)(v0 + 80) = PassthroughSubject.init()();
  swift_allocObject();
  *(void *)(v0 + 96) = PassthroughSubject.init()();
  sub_10000588C((uint64_t *)&unk_101638CE0);
  uint64_t v6 = swift_allocObject();
  *(_DWORD *)(v6 + 16) = 0;
  *(void *)(v0 + 112) = v6;
  *(unsigned char *)(v0 + 120) = 0;
  v12[1] = sub_10000584C();
  unsigned int v13 = enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:);
  uint64_t v7 = *(void (**)(void))(v3 + 104);
  uint64_t v14 = v3 + 104;
  uint64_t v16 = (void (*)(void, void, void))v7;
  v7(v5);
  static DispatchQoS.unspecified.getter();
  *(void *)&v20[0] = _swiftEmptyArrayStorage;
  v12[0] = sub_100D0D3C8((unint64_t *)&qword_101638CC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000588C((uint64_t *)&unk_1016376F0);
  sub_100062734((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)(v0 + 128) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)(v0 + 136) = &_swiftEmptyDictionarySingleton;
  v16(v5, v13, v15);
  static DispatchQoS.unspecified.getter();
  *(void *)&v20[0] = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)(v0 + 144) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  sub_100D0D0F8(v20);
  sub_100D0CFAC((uint64_t)v20, v0 + 152);
  *(void *)(v0 + 360) = 0;
  swift_retain();
  uint64_t v8 = CurrentValueSubject.eraseToAnyCurrentValuePublisher()();
  swift_release();
  v1[5] = v8;
  uint64_t v19 = v1[6];
  sub_100062734(&qword_10165D758, &qword_101644840);
  v1[7] = Publisher.eraseToAnyPublisher()();
  uint64_t v19 = v1[8];
  v1[9] = Publisher.eraseToAnyPublisher()();
  uint64_t v19 = v1[10];
  v1[11] = Publisher.eraseToAnyPublisher()();
  uint64_t v19 = v1[12];
  v1[13] = Publisher.eraseToAnyPublisher()();
  if (qword_101637680 != -1) {
    swift_once();
  }
  swift_retain();
  uint64_t v9 = AnyCurrentValuePublisher.publisher.getter();
  swift_release();
  uint64_t v19 = v9;
  swift_retain();
  sub_10000588C((uint64_t *)&unk_1016569C0);
  sub_100062734((unint64_t *)&qword_10163A518, (uint64_t *)&unk_1016569C0);
  uint64_t v10 = Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  v1[3] = v10;
  swift_release();
  sub_100D04718();
  type metadata accessor for Transaction();
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  swift_release();
  return v1;
}

uint64_t sub_100D04688()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100033F68;
  return sub_100D09D48();
}

uint64_t sub_100D04718()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = &v19[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_1016371D8 != -1) {
    swift_once();
  }
  uint64_t v20 = 0x7365547265646E75;
  unint64_t v21 = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v22 & 1) == 0)
  {
    uint64_t v7 = swift_allocObject();
    swift_weakInit();
    uint64_t v8 = swift_allocObject();
    swift_weakInit();
    uint64_t v9 = swift_allocObject();
    swift_weakInit();
    uint64_t v10 = swift_allocObject();
    swift_weakInit();
    sub_10000588C((uint64_t *)&unk_10163EAB8);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_10134CDE0;
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 16) = sub_100D0D4D4;
    *(void *)(v12 + 24) = v7;
    *(void *)(inited + 32) = 0xD000000000000027;
    *(void *)(inited + 40) = 0x80000001014174B0;
    *(void *)(inited + 48) = sub_1001DF664;
    *(void *)(inited + 56) = v12;
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = sub_100D0D4DC;
    *(void *)(v13 + 24) = v8;
    *(void *)(inited + 64) = 0xD000000000000028;
    *(void *)(inited + 72) = 0x80000001014174E0;
    *(void *)(inited + 80) = sub_1001E070C;
    *(void *)(inited + 88) = v13;
    *(void *)(inited + 96) = 0xD000000000000021;
    *(void *)(inited + 104) = 0x8000000101417510;
    *(void *)(inited + 112) = sub_100D03E00;
    *(void *)(inited + 120) = 0;
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = sub_100D0D4E4;
    *(void *)(v14 + 24) = v9;
    *(void *)(inited + 128) = 0xD00000000000002FLL;
    *(void *)(inited + 136) = 0x8000000101417540;
    *(void *)(inited + 144) = sub_1001E070C;
    *(void *)(inited + 152) = v14;
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = sub_100D0D4EC;
    *(void *)(v15 + 24) = v10;
    *(void *)(inited + 160) = 0xD000000000000030;
    *(void *)(inited + 168) = 0x8000000101417570;
    *(void *)(inited + 176) = sub_1001E070C;
    *(void *)(inited + 184) = v15;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    sub_10092E16C(inited);
    type metadata accessor for DarwinNotificationHelper();
    swift_allocObject();
    v1[2] = DarwinNotificationHelper.init(notificationHandlers:)();
    swift_release();
    uint64_t v16 = type metadata accessor for TaskPriority();
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v5, 1, 1, v16);
    uint64_t v17 = swift_allocObject();
    swift_weakInit();
    uint64_t v18 = (void *)swift_allocObject();
    v18[2] = 0;
    uint64_t v18[3] = 0;
    v18[4] = v17;
    v18[5] = v2;
    sub_1008F5E44((uint64_t)v5, (uint64_t)&unk_10165D7E0, (uint64_t)v18);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_100D04BB4()
{
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100010324(v0, (uint64_t)qword_10170EC30);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Received notification that autoMe is enabled", v3, 2u);
    swift_slowDealloc();
  }

  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    id v4 = [self standardUserDefaults];
    Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
    NSString v6 = String._bridgeToObjectiveC()();
    [v4 setValue:isa forKey:v6];

    sub_100D0A5C0();
    swift_release();
  }
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    swift_retain();
    swift_release();
    PassthroughSubject.send(_:)();
    swift_release();
  }
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_100D0A5C0();
    return swift_release();
  }
  return result;
}

uint64_t sub_100D04DD0()
{
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100010324(v0, (uint64_t)qword_10170EC30);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Received notification that autoMe is disabled", v3, 2u);
    swift_slowDealloc();
  }

  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    id v4 = [self standardUserDefaults];
    Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
    NSString v6 = String._bridgeToObjectiveC()();
    [v4 setValue:isa forKey:v6];

    sub_100D0A5C0();
    swift_release();
  }
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    swift_retain();
    swift_release();
    PassthroughSubject.send(_:)();
    swift_release();
  }
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_100D0A5C0();
    return swift_release();
  }
  return result;
}

void sub_100D04FE8()
{
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100010324(v0, (uint64_t)qword_10170EC30);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Received owner proactive eligible notification", v3, 2u);
    swift_slowDealloc();
  }

  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    id v4 = self;
    id v5 = [v4 standardUserDefaults];
    NSString v6 = String._bridgeToObjectiveC()();
    unsigned __int8 v7 = [v5 BOOLForKey:v6];
    swift_release();

    if ((v7 & 1) == 0)
    {
      swift_beginAccess();
      if (swift_weakLoadStrong())
      {
        id v8 = [v4 standardUserDefaults];
        Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
        NSString v10 = String._bridgeToObjectiveC()();
        [v8 setValue:isa forKey:v10];
        swift_release();
      }
      swift_beginAccess();
      if (swift_weakLoadStrong())
      {
        swift_retain();
        swift_release();
        PassthroughSubject.send(_:)();
        swift_release();
      }
    }
  }
}

void sub_100D0524C()
{
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100010324(v0, (uint64_t)qword_10170EC30);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Received owner proactive not eligible notification", v3, 2u);
    swift_slowDealloc();
  }

  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    id v4 = self;
    id v5 = [v4 standardUserDefaults];
    NSString v6 = String._bridgeToObjectiveC()();
    unsigned int v7 = [v5 BOOLForKey:v6];
    swift_release();

    if (v7)
    {
      swift_beginAccess();
      if (swift_weakLoadStrong())
      {
        id v8 = [v4 standardUserDefaults];
        Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
        NSString v10 = String._bridgeToObjectiveC()();
        [v8 setValue:isa forKey:v10];
        swift_release();
      }
      swift_beginAccess();
      if (swift_weakLoadStrong())
      {
        swift_retain();
        swift_release();
        PassthroughSubject.send(_:)();
        swift_release();
      }
    }
  }
}

uint64_t sub_100D054AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[181] = a4;
  uint64_t v5 = type metadata accessor for ClientOrigin();
  v4[187] = v5;
  v4[188] = *(void *)(v5 - 8);
  v4[189] = swift_task_alloc();
  type metadata accessor for RequestOrigin();
  v4[190] = swift_task_alloc();
  return _swift_task_switch(sub_100D05598, 0, 0);
}

uint64_t sub_100D05598()
{
  uint64_t v11 = v0;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  v0[191] = Strong;
  if (Strong)
  {
    uint64_t v2 = Strong;
    if (qword_101637088 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_10165D470);
    id v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      NSString v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      *(_DWORD *)NSString v6 = 136446210;
      v0[175] = sub_1008FA0F0(0xD000000000000012, 0x80000001014175B0, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s Monitoring FindMyLocate changes", v6, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    (*(void (**)(void, void, void))(v0[188] + 104))(v0[189], enum case for ClientOrigin.other(_:), v0[187]);
    RequestOrigin.init(_:)();
    type metadata accessor for Session();
    swift_allocObject();
    *(void *)(v2 + 360) = Session.init(_:)();
    swift_release();
    swift_asyncLet_begin();
    swift_asyncLet_begin();
    return _swift_asyncLet_get(v0 + 2, v7, sub_100D058B4, v0 + 170);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    id v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
}

uint64_t sub_100D058B4(uint64_t a1, uint64_t a2)
{
  return _swift_asyncLet_get(v2 + 656, a2, sub_100D058D0, v2 + 1296);
}

uint64_t sub_100D058D0(uint64_t a1, uint64_t a2)
{
  return _swift_asyncLet_finish(v2 + 656, a2, sub_100D058EC, v2 + 1456);
}

uint64_t sub_100D058EC()
{
  return _swift_task_switch(sub_100D05908, 0, 0);
}

uint64_t sub_100D05908(uint64_t a1, uint64_t a2)
{
  return _swift_asyncLet_finish(v2 + 16, a2, sub_100D05924, v2 + 1408);
}

uint64_t sub_100D05924()
{
  return _swift_task_switch(sub_100D05940, 0, 0);
}

uint64_t sub_100D05940()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100D059B4()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100030F18;
  return sub_100D07624();
}

uint64_t sub_100D05A44()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000340BC;
  return sub_100D05AD4();
}

uint64_t sub_100D05AD4()
{
  v1[13] = v0;
  uint64_t v2 = type metadata accessor for PreferenceStreamChange();
  v1[14] = v2;
  v1[15] = *(void *)(v2 - 8);
  v1[16] = swift_task_alloc();
  v1[17] = swift_task_alloc();
  v1[18] = swift_task_alloc();
  v1[19] = swift_task_alloc();
  sub_10000588C(&qword_10165D7B0);
  v1[20] = swift_task_alloc();
  uint64_t v3 = sub_10000588C(&qword_10165D7B8);
  v1[21] = v3;
  v1[22] = *(void *)(v3 - 8);
  v1[23] = swift_task_alloc();
  uint64_t v4 = sub_10000588C(&qword_10165D7C0);
  v1[24] = v4;
  v1[25] = *(void *)(v4 - 8);
  v1[26] = swift_task_alloc();
  return _swift_task_switch(sub_100D05CAC, 0, 0);
}

uint64_t sub_100D05CAC()
{
  uint64_t v14 = v0;
  if (qword_101637088 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[27] = sub_100010324(v1, (uint64_t)qword_10165D470);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446210;
    v0[12] = sub_1008FA0F0(0xD00000000000001ELL, 0x8000000101417490, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v5 = *(void *)(v0[13] + 360);
  v0[28] = v5;
  if (v5)
  {
    swift_retain();
    uint64_t v6 = (void *)swift_task_alloc();
    v0[29] = v6;
    *uint64_t v6 = v0;
    v6[1] = sub_100D06048;
    uint64_t v7 = v0[26];
    return Session.startMonitoringPreferencesChange()(v7);
  }
  else
  {
    id v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136446210;
      v0[10] = sub_1008FA0F0(0xD00000000000001ELL, 0x8000000101417490, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s Missing FindMyLocate.Session!", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = (uint64_t (*)(void))v0[1];
    return v11();
  }
}

uint64_t sub_100D06048()
{
  *(void *)(*(void *)v1 + 240) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100D07234;
  }
  else {
    uint64_t v2 = sub_100D0615C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100D0615C()
{
  AsyncStream.makeAsyncIterator()();
  *(_DWORD *)(v0 + 304) = enum case for PreferenceStreamChange.meDevice(_:);
  *(_DWORD *)(v0 + 308) = enum case for PreferenceStreamChange.myLocation(_:);
  *(_DWORD *)(v0 + 312) = enum case for PreferenceStreamChange.friendRequests(_:);
  *(_DWORD *)(v0 + 316) = enum case for PreferenceStreamChange.initialized(_:);
  *(void *)(v0 + 248) = *(void *)(v0 + 240);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 256) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100D06254;
  uint64_t v2 = *(void *)(v0 + 160);
  uint64_t v3 = *(void *)(v0 + 168);
  return AsyncStream.Iterator.next(isolation:)(v2, 0, 0, v3);
}

uint64_t sub_100D06254()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100D06350, 0, 0);
}

uint64_t sub_100D06350()
{
  uint64_t v70 = v0;
  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 120);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    uint64_t v5 = *(void *)(v0 + 200);
    uint64_t v4 = *(void *)(v0 + 208);
    uint64_t v7 = *(void *)(v0 + 184);
    uint64_t v6 = *(void *)(v0 + 192);
    uint64_t v8 = *(void *)(v0 + 168);
    uint64_t v9 = *(void *)(v0 + 176);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
    return v10();
  }
  uint64_t v13 = *(void *)(v0 + 144);
  uint64_t v12 = *(void *)(v0 + 152);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v12, v1, v2);
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v14(v13, v12, v2);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  BOOL v17 = os_log_type_enabled(v15, v16);
  uint64_t v18 = *(void *)(v0 + 144);
  uint64_t v19 = *(void *)(v0 + 112);
  uint64_t v20 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 120) + 8);
  if (v17)
  {
    uint64_t v21 = swift_slowAlloc();
    v69[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v21 = 136446466;
    *(void *)(v21 + 4) = sub_1008FA0F0(0xD00000000000001ELL, 0x8000000101417490, v69);
    *(_WORD *)(v21 + 12) = 2080;
    sub_100D0D3C8(&qword_10165D7C8, (void (*)(uint64_t))&type metadata accessor for PreferenceStreamChange);
    uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v21 + 14) = sub_1008FA0F0(v22, v23, v69);
    swift_bridgeObjectRelease();
    uint64_t v24 = *v20;
    (*v20)(v18, v19);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "%{public}s Received preference update: %s", (uint8_t *)v21, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v24 = *v20;
    (*v20)(*(void *)(v0 + 144), *(void *)(v0 + 112));
  }

  *(void *)(v0 + 264) = v24;
  int v25 = *(_DWORD *)(v0 + 304);
  uint64_t v26 = *(void *)(v0 + 136);
  uint64_t v27 = *(void *)(v0 + 112);
  uint64_t v28 = *(void *)(v0 + 120);
  v14(v26, *(void *)(v0 + 152), v27);
  int v29 = (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 88))(v26, v27);
  if (v29 == v25)
  {
    uint64_t v30 = *(void *)(v0 + 136);
    uint64_t v31 = *(void *)(v0 + 112);
    uint64_t v32 = *(void *)(v0 + 120);
    v24(*(void *)(v0 + 152), v31);
    (*(void (**)(uint64_t, uint64_t))(v32 + 96))(v30, v31);
    sub_100D0D410(v30);
LABEL_36:
    uint64_t v38 = *(void *)(v0 + 248);
    goto LABEL_37;
  }
  if (v29 != *(_DWORD *)(v0 + 308))
  {
    if (v29 == *(_DWORD *)(v0 + 312))
    {
      uint64_t v43 = *(void *)(v0 + 152);
    }
    else
    {
      if (v29 == *(_DWORD *)(v0 + 316))
      {
        uint64_t v47 = (void *)swift_task_alloc();
        *(void *)(v0 + 272) = v47;
        *uint64_t v47 = v0;
        v47[1] = sub_100D06E98;
        uint64_t v48 = (char *)&type metadata for () + 8;
        uint64_t v49 = sub_100D074B4;
        uint64_t v50 = 0;
        goto LABEL_27;
      }
      v14(*(void *)(v0 + 128), *(void *)(v0 + 152), *(void *)(v0 + 112));
      uint64_t v54 = Logger.logObject.getter();
      os_log_type_t v55 = static os_log_type_t.error.getter();
      BOOL v56 = os_log_type_enabled(v54, v55);
      uint64_t v57 = *(void *)(v0 + 152);
      uint64_t v58 = *(void *)(v0 + 128);
      uint64_t v59 = *(void *)(v0 + 112);
      if (v56)
      {
        uint64_t v60 = swift_slowAlloc();
        v69[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v60 = 136446466;
        *(void *)(v60 + 4) = sub_1008FA0F0(0xD00000000000001ELL, 0x8000000101417490, v69);
        *(_WORD *)(v60 + 12) = 2080;
        sub_100D0D3C8(&qword_10165D7C8, (void (*)(uint64_t))&type metadata accessor for PreferenceStreamChange);
        uint64_t v61 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v60 + 14) = sub_1008FA0F0(v61, v62, v69);
        swift_bridgeObjectRelease();
        v24(v58, v59);
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "%{public}s Unknown preference change %s", (uint8_t *)v60, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        v24(v58, v59);
      }
      v24(v57, v59);
      uint64_t v43 = *(void *)(v0 + 136);
    }
    v24(v43, *(void *)(v0 + 112));
    goto LABEL_36;
  }
  uint64_t v33 = *(unsigned __int8 **)(v0 + 136);
  (*(void (**)(unsigned __int8 *, void))(*(void *)(v0 + 120) + 96))(v33, *(void *)(v0 + 112));
  int v34 = *v33;
  uint64_t v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.default.getter();
  uint64_t v68 = v24;
  if (os_log_type_enabled(v35, v36))
  {
    uint64_t v37 = swift_slowAlloc();
    v69[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v37 = 136446466;
    *(void *)(v37 + 4) = sub_1008FA0F0(0xD00000000000001ELL, 0x8000000101417490, v69);
    *(_WORD *)(v37 + 12) = 1024;
    *(_DWORD *)(v37 + 14) = v34;
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "%{public}s Location sharing status changed: Enabled? %{BOOL}d", (uint8_t *)v37, 0x12u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v38 = *(void *)(v0 + 248);
  uint64_t v39 = swift_allocObject();
  swift_weakInit();
  uint64_t v40 = swift_task_alloc();
  *(void *)(v40 + 16) = v39;
  *(unsigned char *)(v40 + 24) = v34;
  uint64_t v67 = sub_10000588C((uint64_t *)&unk_101638DC0);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  swift_release();
  swift_task_dealloc();
  if (qword_101637680 != -1) {
    swift_once();
  }
  uint64_t v41 = (unsigned __int8 *)(v0 + 324);
  swift_retain();
  AnyCurrentValuePublisher.value.getter();
  swift_release();
  *(unsigned char *)(v0 + 324) = *(unsigned char *)(v0 + 320) == 1;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  if (*(unsigned char *)(v0 + 326) == 1)
  {
    swift_beginAccess();
    int v42 = *v41;
  }
  else
  {
    int v42 = 0;
  }
  swift_retain();
  uint64_t v44 = Logger.logObject.getter();
  os_log_type_t v45 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v44, v45))
  {
    int v66 = v42;
    uint64_t v46 = swift_slowAlloc();
    *(_DWORD *)uint64_t v46 = 67109376;
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    *(_DWORD *)(v46 + 4) = *(unsigned __int8 *)(v0 + 323);
    swift_release();
    *(_WORD *)(v46 + 8) = 1024;
    swift_beginAccess();
    *(_DWORD *)(v46 + 10) = *v41;
    _os_log_impl((void *)&_mh_execute_header, v44, v45, "RecomputeLocationSharing: isMyLocationEnabled %{BOOL}d isThisMeDevice %{BOOL}d", (uint8_t *)v46, 0xEu);
    int v42 = v66;
    swift_slowDealloc();
  }
  else
  {
    swift_release();
  }

  *(void *)(v0 + 280) = v38;
  AnyCurrentValuePublisher.value.getter();
  if (v42 == *(unsigned __int8 *)(v0 + 321))
  {
    v68(*(void *)(v0 + 152), *(void *)(v0 + 112));
LABEL_37:
    *(void *)(v0 + 248) = v38;
    unint64_t v63 = (void *)swift_task_alloc();
    *(void *)(v0 + 256) = v63;
    *unint64_t v63 = v0;
    v63[1] = sub_100D06254;
    uint64_t v64 = *(void *)(v0 + 160);
    uint64_t v65 = *(void *)(v0 + 168);
    return AsyncStream.Iterator.next(isolation:)(v64, 0, 0, v65);
  }
  uint64_t v51 = swift_allocObject();
  swift_weakInit();
  uint64_t v52 = swift_allocObject();
  *(void *)(v0 + 288) = v52;
  *(void *)(v52 + 16) = v51;
  *(unsigned char *)(v52 + 24) = v42;
  uint64_t v53 = (void *)swift_task_alloc();
  *(void *)(v0 + 296) = v53;
  *uint64_t v53 = v0;
  v53[1] = sub_100D07054;
  uint64_t v49 = sub_100D0D4C8;
  uint64_t v47 = (void *)(v0 + 322);
  uint64_t v50 = v52;
  uint64_t v48 = (char *)v67;
LABEL_27:
  return unsafeBlocking<A>(_:)(v47, v49, v50, v48);
}

uint64_t sub_100D06E98()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100D06F94, 0, 0);
}

uint64_t sub_100D06F94()
{
  (*(void (**)(void, void))(v0 + 264))(*(void *)(v0 + 152), *(void *)(v0 + 112));
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 256) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100D06254;
  uint64_t v2 = *(void *)(v0 + 160);
  uint64_t v3 = *(void *)(v0 + 168);
  return AsyncStream.Iterator.next(isolation:)(v2, 0, 0, v3);
}

uint64_t sub_100D07054()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100D0716C, 0, 0);
}

uint64_t sub_100D0716C()
{
  (*(void (**)(void, void))(v0 + 264))(*(void *)(v0 + 152), *(void *)(v0 + 112));
  *(void *)(v0 + 248) = *(void *)(v0 + 280);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 256) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100D06254;
  uint64_t v2 = *(void *)(v0 + 160);
  uint64_t v3 = *(void *)(v0 + 168);
  return AsyncStream.Iterator.next(isolation:)(v2, 0, 0, v3);
}

uint64_t sub_100D07234()
{
  uint64_t v10 = v0;
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = v0[30];
    uint64_t v4 = swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    v0[11] = sub_1008FA0F0(0xD00000000000001ELL, 0x8000000101417490, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2082;
    v0[8] = v3;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v5 = String.init<A>(describing:)();
    v0[9] = sub_1008FA0F0(v5, v6, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "%{public}s error %{public}s", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();

    swift_errorRelease();
  }
  else
  {
    swift_release();
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100D074B4()
{
  if (qword_101637680 != -1) {
    swift_once();
  }
  return sub_10131B7B8();
}

uint64_t sub_100D0750C@<X0>(char a1@<W1>, BOOL *a2@<X8>)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  uint64_t v5 = result;
  if (result)
  {
    *(unsigned char *)(result + 120) = a1 & 1;
    uint64_t result = swift_release();
  }
  *a2 = v5 == 0;
  return result;
}

uint64_t sub_100D0758C@<X0>(BOOL *a1@<X8>)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  uint64_t v3 = result;
  if (result)
  {
    swift_retain();
    swift_release();
    CurrentValueSubject.send(_:)();
    uint64_t result = swift_release();
  }
  *a1 = v3 == 0;
  return result;
}

uint64_t sub_100D07624()
{
  v1[7] = v0;
  uint64_t v2 = type metadata accessor for HandleType();
  v1[8] = v2;
  v1[9] = *(void *)(v2 - 8);
  v1[10] = swift_task_alloc();
  v1[11] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Friend();
  v1[12] = v3;
  v1[13] = *(void *)(v3 - 8);
  v1[14] = swift_task_alloc();
  v1[15] = swift_task_alloc();
  v1[16] = swift_task_alloc();
  v1[17] = swift_task_alloc();
  v1[18] = swift_task_alloc();
  v1[19] = swift_task_alloc();
  v1[20] = swift_task_alloc();
  v1[21] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for FriendStreamChange();
  v1[22] = v4;
  v1[23] = *(void *)(v4 - 8);
  v1[24] = swift_task_alloc();
  v1[25] = swift_task_alloc();
  v1[26] = swift_task_alloc();
  v1[27] = swift_task_alloc();
  v1[28] = swift_task_alloc();
  sub_10000588C(&qword_10165D788);
  v1[29] = swift_task_alloc();
  uint64_t v5 = sub_10000588C(&qword_10165D790);
  v1[30] = v5;
  v1[31] = *(void *)(v5 - 8);
  v1[32] = swift_task_alloc();
  uint64_t v6 = sub_10000588C(&qword_10165D798);
  v1[33] = v6;
  v1[34] = *(void *)(v6 - 8);
  v1[35] = swift_task_alloc();
  return _swift_task_switch(sub_100D07928, 0, 0);
}

uint64_t sub_100D07928()
{
  uint64_t v14 = v0;
  if (qword_101637088 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[36] = sub_100010324(v1, (uint64_t)qword_10165D470);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446210;
    v0[6] = sub_1008FA0F0(0xD00000000000001DLL, 0x8000000101417470, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%{public}s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v5 = *(void *)(v0[7] + 360);
  v0[37] = v5;
  if (v5)
  {
    swift_retain();
    uint64_t v6 = (void *)swift_task_alloc();
    v0[38] = v6;
    *uint64_t v6 = v0;
    v6[1] = sub_100D07D54;
    uint64_t v7 = v0[35];
    return Session.startUpdatingFriends(receiveInitialUpdates:)(v7, 0);
  }
  else
  {
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 136446210;
      v0[2] = sub_1008FA0F0(0xD00000000000001DLL, 0x8000000101417470, &v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s Missing FindMyLocate.Session!", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = (uint64_t (*)(void))v0[1];
    return v11();
  }
}

uint64_t sub_100D07D54()
{
  *(void *)(*(void *)v1 + 312) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100D0967C;
  }
  else {
    uint64_t v2 = sub_100D07E68;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100D07E68()
{
  AsyncStream.makeAsyncIterator()();
  *(_DWORD *)(v0 + 384) = enum case for FriendStreamChange.added(_:);
  *(_DWORD *)(v0 + 388) = enum case for FriendStreamChange.removed(_:);
  *(_DWORD *)(v0 + 392) = enum case for FriendStreamChange.modified(_:);
  *(_DWORD *)(v0 + 396) = enum case for HandleType.follower(_:);
  *(_DWORD *)(v0 + 400) = enum case for HandleType.following(_:);
  *(_DWORD *)(v0 + 404) = enum case for HandleType.futureFollower(_:);
  *(_DWORD *)(v0 + 408) = enum case for HandleType.futureFollowing(_:);
  *(_DWORD *)(v0 + 412) = enum case for HandleType.pendingOffer(_:);
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 320) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100D07F98;
  uint64_t v2 = *(void *)(v0 + 232);
  uint64_t v3 = *(void *)(v0 + 240);
  return AsyncStream.Iterator.next(isolation:)(v2, 0, 0, v3);
}

uint64_t sub_100D07F98()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100D08094, 0, 0);
}

uint64_t sub_100D08094()
{
  uint64_t v149 = v0;
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v2 = *(void *)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 184);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1, v2) == 1)
  {
    uint64_t v5 = *(void *)(v0 + 272);
    uint64_t v4 = *(void *)(v0 + 280);
    uint64_t v7 = *(void *)(v0 + 256);
    uint64_t v6 = *(void *)(v0 + 264);
    uint64_t v8 = *(void *)(v0 + 240);
    uint64_t v9 = *(void *)(v0 + 248);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
    return v10();
  }
  uint64_t v13 = *(void *)(v0 + 216);
  uint64_t v12 = *(void *)(v0 + 224);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v12, v1, v2);
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v14(v13, v12, v2);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  BOOL v17 = os_log_type_enabled(v15, v16);
  uint64_t v18 = *(void *)(v0 + 216);
  if (v17)
  {
    uint64_t v19 = *(void *)(v0 + 208);
    uint64_t v145 = v14;
    uint64_t v20 = *(void *)(v0 + 176);
    uint64_t v21 = *(void *)(v0 + 184);
    uint64_t v22 = swift_slowAlloc();
    uint64_t v148 = swift_slowAlloc();
    *(_DWORD *)uint64_t v22 = 136446466;
    *(void *)(v22 + 4) = sub_1008FA0F0(0xD00000000000001DLL, 0x8000000101417470, &v148);
    *(_WORD *)(v22 + 12) = 2080;
    v145(v19, v18, v20);
    uint64_t v23 = String.init<A>(describing:)();
    *(void *)(v22 + 14) = sub_1008FA0F0(v23, v24, &v148);
    swift_bridgeObjectRelease();
    int v25 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
    uint64_t v26 = v20;
    uint64_t v14 = v145;
    v25(v18, v26);
    uint64_t v27 = v25;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "%{public}s Received friend update: %s", (uint8_t *)v22, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v27 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 184) + 8);
    v27(*(void *)(v0 + 216), *(void *)(v0 + 176));
  }

  *(void *)(v0 + 328) = v27;
  int v28 = *(_DWORD *)(v0 + 384);
  uint64_t v29 = *(void *)(v0 + 200);
  uint64_t v30 = *(void *)(v0 + 176);
  uint64_t v31 = *(void *)(v0 + 184);
  v14(v29, *(void *)(v0 + 224), v30);
  int v32 = (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 88))(v29, v30);
  if (v32 == v28)
  {
    uint64_t v33 = *(void *)(v0 + 200);
    uint64_t v35 = *(void *)(v0 + 128);
    uint64_t v34 = *(void *)(v0 + 136);
    uint64_t v36 = *(void *)(v0 + 96);
    uint64_t v37 = *(void *)(v0 + 104);
    (*(void (**)(uint64_t, void))(*(void *)(v0 + 184) + 96))(v33, *(void *)(v0 + 176));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 32))(v34, v33, v36);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 16))(v35, v34, v36);
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.default.getter();
    BOOL v40 = os_log_type_enabled(v38, v39);
    uint64_t v41 = *(void *)(v0 + 224);
    uint64_t v42 = *(void *)(v0 + 176);
    uint64_t v43 = *(void *)(v0 + 128);
    uint64_t v44 = *(void *)(v0 + 136);
    uint64_t v46 = *(void *)(v0 + 96);
    uint64_t v45 = *(void *)(v0 + 104);
    if (v40)
    {
      uint64_t v141 = *(void *)(v0 + 176);
      uint64_t v146 = v27;
      uint64_t v47 = swift_slowAlloc();
      uint64_t v140 = v41;
      uint64_t v148 = swift_slowAlloc();
      *(_DWORD *)uint64_t v47 = 136446466;
      *(void *)(v47 + 4) = sub_1008FA0F0(0xD00000000000001DLL, 0x8000000101417470, &v148);
      *(_WORD *)(v47 + 12) = 2080;
      sub_100D0D3C8(&qword_10165D7A0, (void (*)(uint64_t))&type metadata accessor for Friend);
      uint64_t v48 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v47 + 14) = sub_1008FA0F0(v48, v49, &v148);
      swift_bridgeObjectRelease();
      uint64_t v50 = *(void (**)(uint64_t, uint64_t))(v45 + 8);
      v50(v43, v46);
      uint64_t v51 = "%{public}s Ignoring newly added friend: %s";
LABEL_11:
      _os_log_impl((void *)&_mh_execute_header, v38, v39, v51, (uint8_t *)v47, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v50(v44, v46);
      v146(v140, v141);
      goto LABEL_33;
    }
    goto LABEL_19;
  }
  if (v32 != *(_DWORD *)(v0 + 388))
  {
    if (v32 != *(_DWORD *)(v0 + 392))
    {
      v14(*(void *)(v0 + 192), *(void *)(v0 + 224), *(void *)(v0 + 176));
      uint64_t v92 = Logger.logObject.getter();
      os_log_type_t v93 = static os_log_type_t.error.getter();
      BOOL v94 = os_log_type_enabled(v92, v93);
      uint64_t v95 = *(void *)(v0 + 224);
      if (v94)
      {
        uint64_t v96 = *(void *)(v0 + 208);
        uint64_t v97 = *(void *)(v0 + 192);
        uint64_t v98 = *(void *)(v0 + 176);
        uint64_t v143 = *(void *)(v0 + 224);
        uint64_t v99 = swift_slowAlloc();
        uint64_t v148 = swift_slowAlloc();
        *(_DWORD *)uint64_t v99 = 136446466;
        *(void *)(v99 + 4) = sub_1008FA0F0(0xD00000000000001DLL, 0x8000000101417470, &v148);
        *(_WORD *)(v99 + 12) = 2080;
        v14(v96, v97, v98);
        uint64_t v100 = String.init<A>(describing:)();
        *(void *)(v99 + 14) = sub_1008FA0F0(v100, v101, &v148);
        swift_bridgeObjectRelease();
        v27(v97, v98);
        _os_log_impl((void *)&_mh_execute_header, v92, v93, "%{public}s Unknown friendship change %s", (uint8_t *)v99, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        v27(v143, v98);
        v27(*(void *)(v0 + 200), *(void *)(v0 + 176));
      }
      else
      {
        uint64_t v111 = *(void *)(v0 + 192);
        uint64_t v112 = *(void *)(v0 + 176);

        v27(v111, v112);
        v27(v95, v112);
        v27(*(void *)(v0 + 200), *(void *)(v0 + 176));
      }
      goto LABEL_33;
    }
    uint64_t v72 = *(void *)(v0 + 200);
    uint64_t v74 = *(void *)(v0 + 112);
    uint64_t v73 = *(void *)(v0 + 120);
    uint64_t v75 = *(void *)(v0 + 96);
    uint64_t v76 = *(void *)(v0 + 104);
    (*(void (**)(uint64_t, void))(*(void *)(v0 + 184) + 96))(v72, *(void *)(v0 + 176));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v76 + 32))(v73, v72, v75);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v76 + 16))(v74, v73, v75);
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.default.getter();
    BOOL v77 = os_log_type_enabled(v38, v39);
    uint64_t v41 = *(void *)(v0 + 224);
    uint64_t v42 = *(void *)(v0 + 176);
    uint64_t v43 = *(void *)(v0 + 112);
    uint64_t v44 = *(void *)(v0 + 120);
    uint64_t v46 = *(void *)(v0 + 96);
    uint64_t v45 = *(void *)(v0 + 104);
    if (v77)
    {
      uint64_t v141 = *(void *)(v0 + 176);
      uint64_t v146 = v27;
      uint64_t v47 = swift_slowAlloc();
      uint64_t v140 = v41;
      uint64_t v148 = swift_slowAlloc();
      *(_DWORD *)uint64_t v47 = 136446466;
      *(void *)(v47 + 4) = sub_1008FA0F0(0xD00000000000001DLL, 0x8000000101417470, &v148);
      *(_WORD *)(v47 + 12) = 2080;
      sub_100D0D3C8(&qword_10165D7A0, (void (*)(uint64_t))&type metadata accessor for Friend);
      uint64_t v78 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v47 + 14) = sub_1008FA0F0(v78, v79, &v148);
      swift_bridgeObjectRelease();
      uint64_t v50 = *(void (**)(uint64_t, uint64_t))(v45 + 8);
      v50(v43, v46);
      uint64_t v51 = "%{public}s Ignoring modified friend: %s";
      goto LABEL_11;
    }
LABEL_19:
    uint64_t v80 = v42;

    long long v81 = *(void (**)(uint64_t, uint64_t))(v45 + 8);
    v81(v43, v46);
    v81(v44, v46);
    v27(v41, v80);
    goto LABEL_33;
  }
  uint64_t v52 = v27;
  int v53 = *(_DWORD *)(v0 + 396);
  uint64_t v54 = *(void *)(v0 + 200);
  uint64_t v55 = *(void *)(v0 + 168);
  uint64_t v56 = *(void *)(v0 + 96);
  uint64_t v57 = *(void *)(v0 + 104);
  uint64_t v58 = *(void *)(v0 + 88);
  uint64_t v59 = *(void *)(v0 + 64);
  uint64_t v60 = *(void *)(v0 + 72);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 184) + 96))(v54, *(void *)(v0 + 176));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v57 + 32))(v55, v54, v56);
  Friend.type.getter();
  int v61 = (*(uint64_t (**)(uint64_t, uint64_t))(v60 + 88))(v58, v59);
  if (v61 == v53)
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 104) + 16))(*(void *)(v0 + 152), *(void *)(v0 + 168), *(void *)(v0 + 96));
    unint64_t v62 = Logger.logObject.getter();
    os_log_type_t v63 = static os_log_type_t.default.getter();
    BOOL v64 = os_log_type_enabled(v62, v63);
    uint64_t v65 = *(void *)(v0 + 152);
    uint64_t v66 = *(void *)(v0 + 96);
    uint64_t v67 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 104) + 8);
    if (v64)
    {
      uint64_t v68 = swift_slowAlloc();
      uint64_t v148 = swift_slowAlloc();
      *(_DWORD *)uint64_t v68 = 136315138;
      sub_100D0D3C8(&qword_10165D7A0, (void (*)(uint64_t))&type metadata accessor for Friend);
      uint64_t v69 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v68 + 4) = sub_1008FA0F0(v69, v70, &v148);
      swift_bridgeObjectRelease();
      uint64_t v71 = *v67;
      (*v67)(v65, v66);
      _os_log_impl((void *)&_mh_execute_header, v62, v63, "Removed a follower: %s", (uint8_t *)v68, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v71 = *v67;
      (*v67)(*(void *)(v0 + 152), *(void *)(v0 + 96));
    }

    *(void *)(v0 + 360) = v71;
    uint64_t v102 = swift_allocObject();
    *(void *)(v0 + 368) = v102;
    swift_weakInit();
    uint64_t v103 = (void *)swift_task_alloc();
    *(void *)(v0 + 376) = v103;
    int v104 = (char *)sub_10000588C((uint64_t *)&unk_101638DC0);
    *uint64_t v103 = v0;
    v103[1] = sub_100D09478;
    uint64_t v105 = sub_100D0D34C;
    uint64_t v106 = (void *)(v0 + 416);
    uint64_t v107 = v102;
  }
  else
  {
    if (v61 != *(_DWORD *)(v0 + 400))
    {
      uint64_t v108 = v52;
      if (v61 == *(_DWORD *)(v0 + 404) || v61 == *(_DWORD *)(v0 + 408))
      {
        uint64_t v109 = *(void *)(v0 + 224);
        uint64_t v110 = *(void *)(v0 + 176);
        (*(void (**)(void, void))(*(void *)(v0 + 104) + 8))(*(void *)(v0 + 168), *(void *)(v0 + 96));
      }
      else
      {
        uint64_t v117 = *(void *)(v0 + 104);
        if (v61 != *(_DWORD *)(v0 + 412))
        {
          (*(void (**)(void, void, void))(v117 + 16))(*(void *)(v0 + 144), *(void *)(v0 + 168), *(void *)(v0 + 96));
          uint64_t v118 = Logger.logObject.getter();
          os_log_type_t v119 = static os_log_type_t.error.getter();
          BOOL v120 = os_log_type_enabled(v118, v119);
          uint64_t v121 = *(void *)(v0 + 224);
          uint64_t v122 = *(void *)(v0 + 176);
          uint64_t v123 = *(void *)(v0 + 144);
          uint64_t v124 = *(void *)(v0 + 104);
          uint64_t v142 = *(void *)(v0 + 96);
          uint64_t v144 = *(void *)(v0 + 168);
          if (v120)
          {
            log = v118;
            os_log_type_t type = v119;
            uint64_t v125 = *(void *)(v0 + 72);
            uint64_t v126 = *(void *)(v0 + 80);
            uint64_t v127 = *(void *)(v0 + 64);
            uint64_t v147 = v108;
            uint64_t v139 = *(void *)(v0 + 176);
            uint64_t v128 = swift_slowAlloc();
            uint64_t v148 = swift_slowAlloc();
            *(_DWORD *)uint64_t v128 = 136446466;
            *(void *)(v128 + 4) = sub_1008FA0F0(0xD00000000000001DLL, 0x8000000101417470, &v148);
            *(_WORD *)(v128 + 12) = 2080;
            Friend.type.getter();
            sub_100D0D3C8(&qword_10165D7A8, (void (*)(uint64_t))&type metadata accessor for HandleType);
            uint64_t v129 = dispatch thunk of CustomStringConvertible.description.getter();
            unint64_t v131 = v130;
            uint64_t v137 = v121;
            uint64_t v132 = *(void (**)(uint64_t, uint64_t))(v125 + 8);
            v132(v126, v127);
            *(void *)(v128 + 14) = sub_1008FA0F0(v129, v131, &v148);
            swift_bridgeObjectRelease();
            uint64_t v133 = *(void (**)(uint64_t, uint64_t))(v124 + 8);
            v133(v123, v142);
            _os_log_impl((void *)&_mh_execute_header, log, type, "%{public}s Unexpected friend.type %s", (uint8_t *)v128, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            v133(v144, v142);
            v147(v137, v139);
          }
          else
          {
            uint64_t v134 = *(void *)(v0 + 72);

            uint64_t v135 = *(void (**)(uint64_t, uint64_t))(v124 + 8);
            v135(v123, v142);
            v135(v144, v142);
            v108(v121, v122);
            uint64_t v132 = *(void (**)(uint64_t, uint64_t))(v134 + 8);
          }
          v132(*(void *)(v0 + 88), *(void *)(v0 + 64));
          goto LABEL_33;
        }
        uint64_t v109 = *(void *)(v0 + 224);
        uint64_t v110 = *(void *)(v0 + 176);
        (*(void (**)(void, void))(v117 + 8))(*(void *)(v0 + 168), *(void *)(v0 + 96));
      }
      v52(v109, v110);
LABEL_33:
      uint64_t v113 = (void *)swift_task_alloc();
      *(void *)(v0 + 320) = v113;
      *uint64_t v113 = v0;
      v113[1] = sub_100D07F98;
      uint64_t v114 = *(void *)(v0 + 232);
      uint64_t v115 = *(void *)(v0 + 240);
      return AsyncStream.Iterator.next(isolation:)(v114, 0, 0, v115);
    }
    (*(void (**)(void, void, void))(*(void *)(v0 + 104) + 16))(*(void *)(v0 + 160), *(void *)(v0 + 168), *(void *)(v0 + 96));
    uint64_t v82 = Logger.logObject.getter();
    os_log_type_t v83 = static os_log_type_t.default.getter();
    BOOL v84 = os_log_type_enabled(v82, v83);
    uint64_t v85 = *(void *)(v0 + 160);
    uint64_t v86 = *(void *)(v0 + 96);
    uint64_t v87 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 104) + 8);
    if (v84)
    {
      uint64_t v88 = swift_slowAlloc();
      uint64_t v148 = swift_slowAlloc();
      *(_DWORD *)uint64_t v88 = 136315138;
      sub_100D0D3C8(&qword_10165D7A0, (void (*)(uint64_t))&type metadata accessor for Friend);
      uint64_t v89 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v88 + 4) = sub_1008FA0F0(v89, v90, &v148);
      swift_bridgeObjectRelease();
      BOOL v91 = *v87;
      (*v87)(v85, v86);
      _os_log_impl((void *)&_mh_execute_header, v82, v83, "Removed a following: %s", (uint8_t *)v88, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      BOOL v91 = *v87;
      (*v87)(*(void *)(v0 + 160), *(void *)(v0 + 96));
    }

    *(void *)(v0 + 336) = v91;
    uint64_t v116 = swift_allocObject();
    *(void *)(v0 + 344) = v116;
    swift_weakInit();
    uint64_t v106 = (void *)swift_task_alloc();
    *(void *)(v0 + 352) = v106;
    *uint64_t v106 = v0;
    v106[1] = sub_100D09278;
    int v104 = (char *)&type metadata for () + 8;
    uint64_t v105 = sub_100D0D354;
    uint64_t v107 = v116;
  }
  return unsafeBlocking<A>(_:)(v106, v105, v107, v104);
}

uint64_t sub_100D09278()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100D09390, 0, 0);
}

uint64_t sub_100D09390()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 328);
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v3 = *(void *)(v0 + 176);
  (*(void (**)(void, void))(v0 + 336))(*(void *)(v0 + 168), *(void *)(v0 + 96));
  v1(v2, v3);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 320) = v4;
  void *v4 = v0;
  v4[1] = sub_100D07F98;
  uint64_t v5 = *(void *)(v0 + 232);
  uint64_t v6 = *(void *)(v0 + 240);
  return AsyncStream.Iterator.next(isolation:)(v5, 0, 0, v6);
}

uint64_t sub_100D09478()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100D09590, 0, 0);
}

uint64_t sub_100D09590()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 328);
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v3 = *(void *)(v0 + 176);
  (*(void (**)(void, void))(v0 + 360))(*(void *)(v0 + 168), *(void *)(v0 + 96));
  v1(v2, v3);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 320) = v4;
  void *v4 = v0;
  v4[1] = sub_100D07F98;
  uint64_t v5 = *(void *)(v0 + 232);
  uint64_t v6 = *(void *)(v0 + 240);
  return AsyncStream.Iterator.next(isolation:)(v5, 0, 0, v6);
}

uint64_t sub_100D0967C()
{
  uint64_t v10 = v0;
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = v0[39];
    uint64_t v4 = swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136446466;
    v0[3] = sub_1008FA0F0(0xD00000000000001DLL, 0x8000000101417470, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v4 + 12) = 2082;
    v0[4] = v3;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v5 = String.init<A>(describing:)();
    v0[5] = sub_1008FA0F0(v5, v6, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "%{public}s error %{public}s", (uint8_t *)v4, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();

    swift_errorRelease();
  }
  else
  {
    swift_release();
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100D09988()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    goto LABEL_3;
  }
  uint64_t v1 = Strong;
  os_log_type_t v2 = *(NSObject **)(Strong + 128);
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = sub_100D0D35C;
  *(void *)(v3 + 24) = v1;
  aBlock[4] = sub_100132424;
  aBlock[5] = v3;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000A70B0;
  aBlock[3] = &unk_1015F1B40;
  uint64_t v4 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v2, v4);
  _Block_release(v4);
  LOBYTE(v2) = swift_isEscapingClosureAtFileLocation();
  swift_release_n();
  uint64_t result = swift_release();
  if (v2)
  {
    __break(1u);
  }
  else
  {
LABEL_3:
    swift_beginAccess();
    uint64_t result = swift_weakLoadStrong();
    if (result)
    {
      swift_retain();
      swift_release();
      PassthroughSubject.send(_:)();
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_100D09B38@<X0>(BOOL *a1@<X8>)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  uint64_t v3 = result;
  if (result)
  {
    PassthroughSubject.send(_:)();
    uint64_t result = swift_release();
  }
  *a1 = v3 == 0;
  return result;
}

void sub_100D09BB8(unsigned __int8 *a1)
{
  int v1 = *a1;
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100010324(v2, (uint64_t)qword_10170EC30);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "LocationSharing: recompute sharing status after me device change", v5, 2u);
    swift_slowDealloc();
  }

  if (v1)
  {
    sub_100D0A5C0();
  }
  else
  {
    oslog = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v6, "LocationSharing: Me device state is unknown. Lets not recompute", v7, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_100D09D48()
{
  v1[5] = v0;
  uint64_t v2 = type metadata accessor for ClientOrigin();
  v1[6] = v2;
  v1[7] = *(void *)(v2 - 8);
  v1[8] = swift_task_alloc();
  type metadata accessor for RequestOrigin();
  v1[9] = swift_task_alloc();
  return _swift_task_switch(sub_100D09E34, 0, 0);
}

uint64_t sub_100D09E34()
{
  if (qword_1016371D8 != -1) {
    swift_once();
  }
  *(void *)(v0 + 16) = 0x7365547265646E75;
  *(void *)(v0 + 24) = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)();
  swift_bridgeObjectRelease();
  if (*(unsigned char *)(v0 + 116))
  {
    swift_task_dealloc();
    swift_task_dealloc();
    int v1 = *(uint64_t (**)(void))(v0 + 8);
    return v1();
  }
  else
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    *(void *)(v0 + 80) = sub_100010324(v3, (uint64_t)qword_10170EC30);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      os_log_type_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "LocationSharing: Computing LocationSharing status", v6, 2u);
      swift_slowDealloc();
    }
    uint64_t v7 = *(void *)(v0 + 64);
    uint64_t v8 = *(void *)(v0 + 48);
    uint64_t v9 = *(void *)(v0 + 56);

    (*(void (**)(uint64_t, void, uint64_t))(v9 + 104))(v7, enum case for ClientOrigin.other(_:), v8);
    RequestOrigin.init(_:)();
    type metadata accessor for Session();
    swift_allocObject();
    *(void *)(v0 + 88) = Session.init(_:)();
    uint64_t v10 = (void *)swift_task_alloc();
    *(void *)(v0 + 96) = v10;
    *uint64_t v10 = v0;
    v10[1] = sub_100D0A0D0;
    return Session.isMyLocationEnabled(cached:)(1);
  }
}

uint64_t sub_100D0A0D0(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 104) = v1;
  swift_task_dealloc();
  if (v1)
  {
    os_log_type_t v5 = sub_100D0A3F8;
  }
  else
  {
    swift_release();
    *(unsigned char *)(v4 + 119) = a1 & 1;
    os_log_type_t v5 = sub_100D0A204;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100D0A204()
{
  char v1 = *(unsigned char *)(v0 + 119);
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v3 + 16) = v2;
  *(unsigned char *)(v3 + 24) = v1;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  swift_task_dealloc();
  swift_retain();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    os_log_type_t v6 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v6 = 67109120;
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    *(_DWORD *)(v0 + 112) = *(unsigned __int8 *)(v0 + 118);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "ComputeLocationSharing: Updating sharing status to %{BOOL}d", v6, 8u);
    swift_slowDealloc();
  }
  else
  {
    swift_release();
  }

  *(unsigned char *)(v0 + 117) = sub_100D0C0B0() & 1;
  CurrentValueSubject.send(_:)();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_100D0A3F8()
{
  swift_release();
  swift_errorRetain();
  swift_errorRetain();
  char v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138412290;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 32) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "ComputeLocationSharing: Error getting status of sharing %@", v3, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v6 = *(uint64_t (**)(void))(v0 + 8);
  return v6();
}

uint64_t sub_100D0A5C0()
{
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100010324(v0, (uint64_t)qword_10170EC30);
  char v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "RecomputeLocationSharing", v3, 2u);
    swift_slowDealloc();
  }

  type metadata accessor for Transaction();
  swift_retain();
  static Transaction.asyncTask(name:block:)();

  return swift_release();
}

uint64_t sub_100D0A6F0(uint64_t a1)
{
  v1[7] = a1;
  uint64_t v2 = type metadata accessor for ClientOrigin();
  v1[8] = v2;
  v1[9] = *(void *)(v2 - 8);
  v1[10] = swift_task_alloc();
  type metadata accessor for RequestOrigin();
  v1[11] = swift_task_alloc();
  return _swift_task_switch(sub_100D0A7DC, 0, 0);
}

uint64_t sub_100D0A7DC()
{
  if (qword_101637680 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 72);
  swift_retain();
  AnyCurrentValuePublisher.value.getter();
  swift_release();
  *(unsigned char *)(v0 + 143) = *(unsigned char *)(v0 + 142) == 1;
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 104))(v1, enum case for ClientOrigin.other(_:), v2);
  RequestOrigin.init(_:)();
  type metadata accessor for Session();
  swift_allocObject();
  *(void *)(v0 + 96) = Session.init(_:)();
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v4;
  void *v4 = v0;
  v4[1] = sub_100D0A94C;
  return Session.isMyLocationEnabled(cached:)(1);
}

uint64_t sub_100D0A94C(char a1)
{
  uint64_t v4 = *v2;
  *(void *)(*v2 + 112) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_100D0AD78;
  }
  else
  {
    swift_release();
    *(unsigned char *)(v4 + 144) = a1 & 1;
    uint64_t v5 = sub_100D0AA80;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_100D0AA80()
{
  char v1 = *(unsigned char *)(v0 + 144);
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v3 + 16) = v2;
  *(unsigned char *)(v3 + 24) = v1;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  swift_task_dealloc();
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  char v4 = *(unsigned char *)(v0 + 137);
  char v5 = *(unsigned char *)(v0 + 143);
  if (qword_101637070 != -1) {
    swift_once();
  }
  char v6 = v4 & v5;
  uint64_t v7 = type metadata accessor for Logger();
  sub_100010324(v7, (uint64_t)qword_10170EC30);
  swift_retain();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 67109376;
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    *(_DWORD *)(v0 + 128) = *(unsigned __int8 *)(v0 + 140);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v10 + 8) = 1024;
    swift_beginAccess();
    *(_DWORD *)(v0 + 120) = *(unsigned __int8 *)(v0 + 143);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "RecomputeLocationSharing: isMyLocationEnabled %{BOOL}d isThisMeDevice %{BOOL}d", (uint8_t *)v10, 0xEu);
    swift_slowDealloc();
  }
  else
  {
    swift_release();
  }

  AnyCurrentValuePublisher.value.getter();
  if ((v6 & 1) != *(unsigned char *)(v0 + 138))
  {
    *(unsigned char *)(v0 + 139) = v6 & 1;
    CurrentValueSubject.send(_:)();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
  return v11();
}

uint64_t sub_100D0AD78()
{
  uint64_t v14 = v0;
  swift_release();
  swift_retain();
  AnyCurrentValuePublisher.value.getter();
  swift_release();
  int v1 = *(unsigned __int8 *)(v0 + 136);
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100010324(v2, (uint64_t)qword_10170EC30);
  swift_retain();
  swift_errorRetain();
  swift_retain();
  swift_errorRetain();
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.error.getter();
  BOOL v5 = os_log_type_enabled(v3, v4);
  uint64_t v6 = *(void *)(v0 + 112);
  if (v5)
  {
    BOOL v12 = v1 == 1;
    uint64_t v7 = swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315650;
    *(void *)(v0 + 48) = v6;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v8 = String.init<A>(describing:)();
    *(void *)(v0 + 40) = sub_1008FA0F0(v8, v9, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    *(_WORD *)(v7 + 12) = 1024;
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    swift_release();
    *(_DWORD *)(v0 + 132) = *(unsigned __int8 *)(v0 + 141);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v7 + 18) = 1024;
    *(_DWORD *)(v0 + 124) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "RecomputeLocationSharing: error recomputing location sharing status. Error %s Sharing enabled: %{BOOL}d isThisMeDevice: %{BOOL}d", (uint8_t *)v7, 0x18u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_release();
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
    swift_release();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

void *sub_100D0B0BC()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  os_log_type_t v4 = (unint64_t *)((char *)v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  BOOL v5 = *(void **)(v0 + 128);
  unint64_t *v4 = (unint64_t)v5;
  (*(void (**)(unint64_t *, void, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  (*(void (**)(unint64_t *, uint64_t))(v2 + 8))(v4, v1);
  if (v5)
  {
    sub_10000588C(&qword_10164D1C0);
    unsafeFromAsyncTask<A>(_:)();
    uint64_t v12 = v54[3];
    uint64_t v51 = (void *)(v0 + 136);
    swift_beginAccess();
    *(void *)(v0 + 136) = _swiftEmptyDictionarySingleton;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v14 = *(void *)(v12 + 16);
    if (v14)
    {
      v47[0] = v12;
      os_log_type_t v4 = (unint64_t *)(v12 + 64);
      uint64_t v11 = _swiftEmptyArrayStorage;
      *(void *)&long long v13 = 136315394;
      long long v48 = v13;
      v47[1] = (uint64_t)&type metadata for Any + 8;
      while (1)
      {
        uint64_t v49 = v14;
        uint64_t v15 = *(v4 - 4);
        long long v52 = *(_OWORD *)(v4 - 3);
        uint64_t v17 = *(v4 - 1);
        unint64_t v16 = *v4;
        unint64_t v18 = v52;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v11 = sub_100A720B4(0, v11[2] + 1, 1, v11);
        }
        unint64_t v20 = v11[2];
        unint64_t v19 = v11[3];
        if (v20 >= v19 >> 1) {
          uint64_t v11 = sub_100A720B4((void *)(v19 > 1), v20 + 1, 1, v11);
        }
        v11[2] = v20 + 1;
        uint64_t v50 = v11;
        uint64_t v21 = &v11[5 * v20];
        uint64_t v22 = v15;
        v21[4] = v15;
        *(_OWORD *)(v21 + 5) = v52;
        v21[7] = v17;
        v21[8] = v16;
        uint64_t v23 = v51;
        swift_beginAccess();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        int v53 = (void *)*v23;
        int v25 = v53;
        *uint64_t v23 = 0x8000000000000000;
        unint64_t v27 = sub_100723FF4(v17, v16);
        uint64_t v28 = v25[2];
        BOOL v29 = (v26 & 1) == 0;
        uint64_t v30 = v28 + v29;
        if (__OFADD__(v28, v29))
        {
          __break(1u);
LABEL_34:
          __break(1u);
          goto LABEL_35;
        }
        char v31 = v26;
        if (v25[3] >= v30)
        {
          if (isUniquelyReferenced_nonNull_native)
          {
            uint64_t v34 = v53;
            if (v26) {
              goto LABEL_22;
            }
          }
          else
          {
            sub_100E7EC1C();
            uint64_t v34 = v53;
            if (v31) {
              goto LABEL_22;
            }
          }
        }
        else
        {
          sub_100E6609C(v30, isUniquelyReferenced_nonNull_native);
          uint64_t v32 = sub_100723FF4(v17, v16);
          if ((v31 & 1) != (v33 & 1))
          {
            uint64_t result = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            __break(1u);
            return result;
          }
          unint64_t v27 = v32;
          uint64_t v34 = v53;
          if (v31)
          {
LABEL_22:
            uint64_t v35 = (uint64_t *)(v34[7] + 16 * v27);
            swift_bridgeObjectRelease();
            *uint64_t v35 = v22;
            v35[1] = v18;
            goto LABEL_26;
          }
        }
        v34[(v27 >> 6) + 8] |= 1 << v27;
        uint64_t v36 = (uint64_t *)(v34[6] + 16 * v27);
        *uint64_t v36 = v17;
        v36[1] = v16;
        uint64_t v37 = (uint64_t *)(v34[7] + 16 * v27);
        *uint64_t v37 = v22;
        v37[1] = v18;
        uint64_t v38 = v34[2];
        BOOL v39 = __OFADD__(v38, 1);
        uint64_t v40 = v38 + 1;
        if (v39) {
          goto LABEL_34;
        }
        v34[2] = v40;
        swift_bridgeObjectRetain();
LABEL_26:
        *uint64_t v51 = v34;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_endAccess();
        if (qword_101637070 != -1) {
          swift_once();
        }
        uint64_t v41 = type metadata accessor for Logger();
        sub_100010324(v41, (uint64_t)qword_10170EC30);
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        uint64_t v42 = Logger.logObject.getter();
        os_log_type_t v43 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v42, v43))
        {
          uint64_t v44 = swift_slowAlloc();
          v54[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v44 = v48;
          swift_bridgeObjectRetain();
          *(void *)(v44 + 4) = sub_1008FA0F0(v17, v16, v54);
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v44 + 12) = 2080;
          swift_bridgeObjectRetain();
          *(void *)(v44 + 14) = sub_1008FA0F0(v22, v18, v54);
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v42, v43, "#sharesLocation with me - %s - %s", (uint8_t *)v44, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }
        uint64_t v11 = v50;
        v4 += 5;
        uint64_t v14 = v49 - 1;
        if (v49 == 1)
        {
          uint64_t v45 = v47[0];
          sub_10015B4A8(v47[0], 0);
          sub_10015B4A8(v45, 0);
          return v11;
        }
      }
    }
    sub_10015B4A8(v12, 0);
    sub_10015B4A8(v12, 0);
  }
  else
  {
LABEL_35:
    __break(1u);
    swift_once();
    uint64_t v7 = type metadata accessor for Logger();
    sub_100010324(v7, (uint64_t)qword_10170EC30);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Unable to get handlesSharingLocationsWithMe", v10, 2u);
      swift_slowDealloc();
    }
    sub_10015B4A8((uint64_t)v4, 1);
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_100D0B798(uint64_t a1)
{
  v1[2] = a1;
  uint64_t v2 = type metadata accessor for Handle();
  v1[3] = v2;
  v1[4] = *(void *)(v2 - 8);
  v1[5] = swift_task_alloc();
  v1[6] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for Friend();
  v1[7] = v3;
  v1[8] = *(void *)(v3 - 8);
  v1[9] = swift_task_alloc();
  v1[10] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for ClientOrigin();
  v1[11] = v4;
  v1[12] = *(void *)(v4 - 8);
  v1[13] = swift_task_alloc();
  type metadata accessor for RequestOrigin();
  v1[14] = swift_task_alloc();
  return _swift_task_switch(sub_100D0B95C, 0, 0);
}

uint64_t sub_100D0B95C()
{
  (*(void (**)(void, void, void))(v0[12] + 104))(v0[13], enum case for ClientOrigin.other(_:), v0[11]);
  RequestOrigin.init(_:)();
  type metadata accessor for Session();
  swift_allocObject();
  v0[15] = Session.init(_:)();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[16] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100D0BA4C;
  return Session.friendsSharingLocationsWithMe()();
}

uint64_t sub_100D0BA4C(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 136) = a1;
  *(void *)(v3 + 144) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v4 = sub_100BC8B30;
  }
  else
  {
    swift_release();
    uint64_t v4 = sub_100D0BB68;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100D0BB68()
{
  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 64);
    uint64_t v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
    uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v30 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 32) + 8);
    uint64_t v31 = *(void *)(v3 + 72);
    char v33 = (void (**)(uint64_t, uint64_t))(v3 + 8);
    swift_bridgeObjectRetain();
    BOOL v5 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v39 = v2;
      uint64_t v40 = v5;
      uint64_t v9 = *(void *)(v0 + 72);
      uint64_t v8 = *(void *)(v0 + 80);
      uint64_t v11 = *(void *)(v0 + 48);
      uint64_t v10 = *(void *)(v0 + 56);
      uint64_t v12 = *(void *)(v0 + 24);
      v32(v8, v4, v10);
      v32(v9, v8, v10);
      Friend.handle.getter();
      uint64_t v13 = Handle.serverID.getter();
      uint64_t v15 = v14;
      unint64_t v16 = *v30;
      (*v30)(v11, v12);
      uint64_t v18 = *(void *)(v0 + 72);
      uint64_t v17 = *(void *)(v0 + 80);
      uint64_t v19 = *(void *)(v0 + 56);
      if (v15)
      {
        uint64_t v38 = v13;
        uint64_t v20 = *(void *)(v0 + 40);
        uint64_t v34 = *(void *)(v0 + 80);
        uint64_t v21 = *(void *)(v0 + 24);
        Friend.handle.getter();
        uint64_t v22 = Handle.identifier.getter();
        uint64_t v36 = v23;
        uint64_t v37 = v22;
        v16(v20, v21);
        Friend.handle.getter();
        uint64_t v35 = Handle.siblingIdentifiers.getter();
        unint64_t v24 = *v33;
        (*v33)(v18, v19);
        v16(v20, v21);
        v24(v34, v19);
        BOOL v5 = v40;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          BOOL v5 = sub_100A720B4(0, v40[2] + 1, 1, v40);
        }
        uint64_t v7 = v39;
        unint64_t v26 = v5[2];
        unint64_t v25 = v5[3];
        if (v26 >= v25 >> 1) {
          BOOL v5 = sub_100A720B4((void *)(v25 > 1), v26 + 1, 1, v5);
        }
        v5[2] = v26 + 1;
        unint64_t v27 = &v5[5 * v26];
        v27[4] = v37;
        v27[5] = v36;
        v27[6] = v35;
        v27[7] = v38;
        v27[8] = v15;
      }
      else
      {
        uint64_t v6 = *v33;
        (*v33)(*(void *)(v0 + 72), *(void *)(v0 + 56));
        v6(v17, v19);
        BOOL v5 = v40;
        uint64_t v7 = v39;
      }
      v4 += v31;
      uint64_t v2 = v7 - 1;
    }
    while (v2);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease();
    BOOL v5 = _swiftEmptyArrayStorage;
  }
  **(void **)(v0 + 16) = v5;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v28 = *(uint64_t (**)(void))(v0 + 8);
  return v28();
}

void *sub_100D0BE90@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_100D0B0BC();
  *a1 = result;
  return result;
}

uint64_t sub_100D0BECC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  swift_beginAccess();
  uint64_t v8 = *(void *)(a1 + 136);
  if (*(void *)(v8 + 16)
    || (sub_100D0B0BC(), result = swift_bridgeObjectRelease(), uint64_t v8 = *(void *)(a1 + 136), *(void *)(v8 + 16)))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_100723FF4(a2, a3);
    if (v11)
    {
      uint64_t v12 = (uint64_t *)(*(void *)(v8 + 56) + 16 * v10);
      uint64_t v14 = *v12;
      uint64_t v13 = v12[1];
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v14 = 0;
      uint64_t v13 = 0;
    }
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v14 = 0;
    uint64_t v13 = 0;
  }
  *a4 = v14;
  a4[1] = v13;
  return result;
}

uint64_t sub_100D0BFB0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  swift_beginAccess();
  uint64_t v8 = *(void *)(a1 + 136);
  if (*(void *)(v8 + 16)
    || (sub_100D0B0BC(), swift_bridgeObjectRelease(), uint64_t v8 = *(void *)(a1 + 136), *(void *)(v8 + 16)))
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v9 = sub_100723FF4(a2, a3);
    if (v10)
    {
      char v11 = (uint64_t *)(*(void *)(v8 + 56) + 16 * v9);
      uint64_t v13 = *v11;
      uint64_t v12 = v11[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      *a4 = v13;
      a4[1] = v12;
      return result;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t result = sub_100BC7464();
  *a4 = result;
  if (v15) {
    a4[1] = v15;
  }
  else {
    a4[1] = 0;
  }
  return result;
}

uint64_t sub_100D0C0B0()
{
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  if (qword_101637680 != -1) {
    swift_once();
  }
  swift_retain();
  AnyCurrentValuePublisher.value.getter();
  swift_release();
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100010324(v0, (uint64_t)qword_10170EC30);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 67109376;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v3 + 8) = 1024;
    swift_beginAccess();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "LocationSharing: isMyLocationEnabled %{BOOL}d isThisMeDevice %{BOOL}d", (uint8_t *)v3, 0xEu);
    swift_slowDealloc();
  }

  if (v5 == 1) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t sub_100D0C2A4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SecureLocation();
  __chkstk_darwin(v2);
  uint64_t v37 = (uint64_t)v31 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v38 = (char *)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  char v10 = (char *)v31 - v9;
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)v31 - v11;
  if (*(void *)(a1 + *(int *)(v2 + 60)) != 100)
  {
    OS_dispatch_queue.sync<A>(execute:)();
    v52[10] = v49;
    v52[11] = v50;
    v52[12] = v51;
    v52[6] = v45;
    v52[7] = v46;
    unsigned char v52[8] = v47;
    v52[9] = v48;
    v52[2] = v41;
    v52[3] = v42;
    v52[4] = v43;
    v52[5] = v44;
    v52[0] = v39;
    v52[1] = v40;
    sub_100551984((uint64_t)v52);
  }
  static Date.trustedNow.getter((uint64_t)v10);
  Date.addingTimeInterval(_:)();
  uint64_t v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v10, v4);
  int v14 = static Date.> infix(_:_:)();
  char v15 = v14;
  if (v14)
  {
    v13(v12, v4);
  }
  else
  {
    int v36 = v14;
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_100010324(v16, (uint64_t)qword_10170EC30);
    uint64_t v17 = v37;
    sub_1001FEF08(a1, v37);
    uint64_t v18 = v38;
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v38, v12, v4);
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.default.getter();
    int v21 = v20;
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v22 = swift_slowAlloc();
      char v33 = v13;
      uint64_t v23 = v22;
      uint64_t v35 = swift_slowAlloc();
      *(void *)&v52[0] = v35;
      *(_DWORD *)uint64_t v23 = 136315394;
      v31[1] = v23 + 4;
      os_log_t v34 = v19;
      sub_100D0D3C8((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
      uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)&long long v39 = sub_1008FA0F0(v24, v25, (uint64_t *)v52);
      int v32 = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1001FEFBC(v17);
      *(_WORD *)(v23 + 12) = 2080;
      uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)&long long v39 = sub_1008FA0F0(v26, v27, (uint64_t *)v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v28 = v33;
      v33(v18, v4);
      os_log_t v29 = v34;
      _os_log_impl((void *)&_mh_execute_header, v34, (os_log_type_t)v32, "Location timestamp %s not within threshold %s", (uint8_t *)v23, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v28(v12, v4);
    }
    else
    {

      v13(v18, v4);
      sub_1001FEFBC(v17);
      v13(v12, v4);
    }
    char v15 = v36;
  }
  return v15 & 1;
}

uint64_t sub_100D0C790(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SecureLocation();
  __chkstk_darwin(v2);
  uint64_t v36 = (uint64_t)v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v35 = (char *)v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  char v10 = (char *)v30 - v9;
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)v30 - v11;
  OS_dispatch_queue.sync<A>(execute:)();
  v39[10] = v38[10];
  v39[11] = v38[11];
  unsigned char v39[12] = v38[12];
  v39[6] = v38[6];
  v39[7] = v38[7];
  v39[8] = v38[8];
  v39[9] = v38[9];
  uint64_t v39[2] = v38[2];
  v39[3] = v38[3];
  v39[4] = v38[4];
  v39[5] = v38[5];
  v39[0] = v38[0];
  v39[1] = v38[1];
  sub_100551984((uint64_t)v39);
  static Date.trustedNow.getter((uint64_t)v10);
  Date.addingTimeInterval(_:)();
  uint64_t v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v10, v4);
  int v14 = static Date.< infix(_:_:)();
  char v15 = v14;
  if (v14)
  {
    int v34 = v14;
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_100010324(v16, (uint64_t)qword_10170EC30);
    uint64_t v17 = v36;
    sub_1001FEF08(a1, v36);
    uint64_t v18 = v35;
    (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v35, v12, v4);
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.default.getter();
    int v21 = v20;
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v22 = swift_slowAlloc();
      int v32 = v21;
      uint64_t v23 = v22;
      uint64_t v33 = swift_slowAlloc();
      *(void *)&v38[0] = v33;
      *(_DWORD *)uint64_t v23 = 136315394;
      v30[1] = v23 + 4;
      os_log_t v31 = v19;
      sub_100D0D3C8((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
      uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v37 = sub_1008FA0F0(v24, v25, (uint64_t *)v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1001FEFBC(v36);
      *(_WORD *)(v23 + 12) = 2080;
      uint64_t v36 = v23 + 14;
      uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v37 = sub_1008FA0F0(v26, v27, (uint64_t *)v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v13(v18, v4);
      os_log_t v28 = v31;
      _os_log_impl((void *)&_mh_execute_header, v31, (os_log_type_t)v32, "Location timestamp %s close to expiring %s", (uint8_t *)v23, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      v13(v18, v4);
      sub_1001FEFBC(v17);
    }
    v13(v12, v4);
    char v15 = v34;
  }
  else
  {
    v13(v12, v4);
  }
  return v15 & 1;
}

uint64_t sub_100D0CC38()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  sub_100D0CFAC(v0 + 152, (uint64_t)v2);
  sub_100D0D014(v2, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_10060ECB4);
  swift_release();
  return v0;
}

uint64_t sub_100D0CD08()
{
  sub_100D0CC38();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SecureLocationsInfo()
{
  return self;
}

void *sub_100D0CD60@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = a1 + 152;
  sub_100D0CFAC(a1 + 152, (uint64_t)v29);
  sub_100D0CFAC((uint64_t)v29, (uint64_t)v30);
  if (sub_10060EC30((uint64_t)v30) == 1)
  {
    if (qword_101636C00 != -1) {
      swift_once();
    }
    *(void *)&long long v17 = 0;
    BYTE8(v17) = 1;
    long long v18 = xmmword_101363E50;
    *(void *)uint64_t v19 = 5;
    *(_OWORD *)&v19[8] = xmmword_101363E40;
    unsigned char v19[24] = 0;
    *(void *)&long long v20 = qword_10170E148;
    *((void *)&v20 + 1) = 0x405E000000000000;
    LOBYTE(v21) = 1;
    *((void *)&v21 + 1) = 0x409C200000000000;
    *(void *)uint64_t v22 = 5;
    *(_OWORD *)&v22[8] = xmmword_101363E30;
    *(_DWORD *)&v22[24] = 16843009;
    *(void *)uint64_t v23 = 5;
    *(_OWORD *)&v23[8] = xmmword_101363E20;
    v23[24] = 1;
    *(void *)&long long v24 = 808334897;
    *((void *)&v24 + 1) = 0xE400000000000000;
    *(void *)&long long v25 = 808334129;
    *((void *)&v25 + 1) = 0xE400000000000000;
    *(void *)&long long v26 = 3157561;
    *((void *)&v26 + 1) = 0xE300000000000000;
    v27[2] = *(_OWORD *)v19;
    void v27[3] = *(_OWORD *)&v19[16];
    v27[0] = v17;
    v27[1] = xmmword_101363E50;
    v27[8] = *(_OWORD *)v23;
    v27[9] = *(_OWORD *)&v23[16];
    v27[6] = *(_OWORD *)v22;
    v27[7] = *(_OWORD *)&v22[16];
    v27[4] = v20;
    v27[5] = v21;
    v27[10] = v24;
    v27[11] = v25;
    v27[12] = v26;
    SharingCircleWildAdvertisementKey.init(key:)(v27);
    sub_100D0CFAC(v3, (uint64_t)v28);
    sub_100D0CFAC((uint64_t)v27, v3);
    swift_bridgeObjectRetain();
    sub_1006F40C4((uint64_t)&v17);
    sub_100D0D014(v28, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_10060ECB4);
    long long v4 = v25;
    a2[10] = v24;
    a2[11] = v4;
    a2[12] = v26;
    long long v5 = *(_OWORD *)&v22[16];
    a2[6] = *(_OWORD *)v22;
    a2[7] = v5;
    long long v6 = *(_OWORD *)&v23[16];
    a2[8] = *(_OWORD *)v23;
    a2[9] = v6;
    long long v7 = *(_OWORD *)&v19[16];
    a2[2] = *(_OWORD *)v19;
    a2[3] = v7;
    long long v8 = v21;
    a2[4] = v20;
    a2[5] = v8;
    long long v10 = v17;
    long long v9 = v18;
  }
  else
  {
    long long v11 = v30[11];
    a2[10] = v30[10];
    a2[11] = v11;
    a2[12] = v30[12];
    long long v12 = v30[7];
    a2[6] = v30[6];
    a2[7] = v12;
    long long v13 = v30[9];
    a2[8] = v30[8];
    a2[9] = v13;
    long long v14 = v30[3];
    a2[2] = v30[2];
    a2[3] = v14;
    long long v15 = v30[5];
    a2[4] = v30[4];
    a2[5] = v15;
    long long v10 = v30[0];
    long long v9 = v30[1];
  }
  *a2 = v10;
  a2[1] = v9;
  return sub_100D0D014(v29, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_100D0D088);
}

uint64_t sub_100D0CFAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_101660F30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void *sub_100D0D014(void *a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19],
    a1[20],
    a1[21],
    a1[22],
    a1[23],
    a1[24],
    a1[25]);
  return a1;
}

uint64_t sub_100D0D088(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t result = a9;
  if (a9)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

double sub_100D0D0F8(_OWORD *a1)
{
  double result = 0.0;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

void *sub_100D0D11C(uint64_t a1, _OWORD *a2)
{
  long long v4 = a2[11];
  v11[10] = a2[10];
  v11[11] = v4;
  v11[12] = a2[12];
  long long v5 = a2[7];
  v11[6] = a2[6];
  v11[7] = v5;
  long long v6 = a2[9];
  unsigned char v11[8] = a2[8];
  v11[9] = v6;
  long long v7 = a2[3];
  v11[2] = a2[2];
  v11[3] = v7;
  long long v8 = a2[5];
  v11[4] = a2[4];
  v11[5] = v8;
  long long v9 = a2[1];
  v11[0] = *a2;
  v11[1] = v9;
  SharingCircleWildAdvertisementKey.init(key:)(v11);
  a1 += 152;
  sub_100D0CFAC(a1, (uint64_t)v12);
  sub_100D0CFAC((uint64_t)v11, a1);
  sub_1006F40C4((uint64_t)a2);
  return sub_100D0D014(v12, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_10060ECB4);
}

void sub_100D0D1D0(unsigned __int8 *a1)
{
}

uint64_t sub_100D0D1D8()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100033F68;
  return sub_100D04688();
}

void sub_100D0D268(unsigned char *a1@<X8>)
{
  *a1 = *(unsigned char *)(v1 + 120);
}

uint64_t sub_100D0D274()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100033F68;
  return sub_100D0A6F0(v0);
}

void sub_100D0D304()
{
  *(unsigned char *)(*(void *)(v0 + 16) + 120) = *(unsigned char *)(v0 + 24);
}

uint64_t sub_100D0D314()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100D0D34C@<X0>(BOOL *a1@<X8>)
{
  return sub_100D09B38(a1);
}

uint64_t sub_100D0D354()
{
  return sub_100D09988();
}

uint64_t sub_100D0D35C()
{
  swift_beginAccess();
  *(void *)(v0 + 136) = _swiftEmptyDictionarySingleton;
  return swift_bridgeObjectRelease();
}

uint64_t sub_100D0D3A0()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100D0D3B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100D0D3C0()
{
  return swift_release();
}

uint64_t sub_100D0D3C8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100D0D410(uint64_t a1)
{
  uint64_t v2 = sub_10000588C(&qword_10165D7D0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100D0D470@<X0>(BOOL *a1@<X8>)
{
  return sub_100D0750C(*(unsigned char *)(v1 + 24), a1);
}

uint64_t sub_100D0D490()
{
  swift_release();

  return _swift_deallocObject(v0, 25, 7);
}

uint64_t sub_100D0D4C8@<X0>(BOOL *a1@<X8>)
{
  return sub_100D0758C(a1);
}

uint64_t sub_100D0D4D4()
{
  return sub_100D04BB4();
}

uint64_t sub_100D0D4DC()
{
  return sub_100D04DD0();
}

void sub_100D0D4E4()
{
}

void sub_100D0D4EC()
{
}

uint64_t sub_100D0D4F4()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100D0D52C()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100D0D56C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  long long v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_10001D2E4;
  return sub_100D054AC(a1, v4, v5, v6);
}

uint64_t sub_100D0D62C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10001D2E4;
  return sub_100D059B4();
}

uint64_t sub_100D0D6C8()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100033F68;
  return sub_100D05A44();
}

void sub_100D0D764(unsigned char *a1@<X8>)
{
}

void sub_100D0D788()
{
}

uint64_t sub_100D0D7A0()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170EC68);
  uint64_t v1 = sub_100010324(v0, (uint64_t)qword_10170EC68);
  if (qword_101637098 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100010324(v0, (uint64_t)qword_10170EC80);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100D0D868()
{
  v1[8] = v0;
  v1[9] = *v0;
  sub_10000588C(&qword_10164DBB0);
  v1[10] = swift_task_alloc();
  return _swift_task_switch(sub_100D0D924, v0, 0);
}

uint64_t sub_100D0D924()
{
  uint64_t v2 = v0[9];
  uint64_t v1 = v0[10];
  uint64_t v3 = v0[8];
  uint64_t v4 = *(NSObject **)(v3 + 128);
  uint64_t v5 = swift_allocObject();
  swift_weakInit();
  v0[6] = sub_100D0F58C;
  v0[7] = v5;
  v0[2] = _NSConcreteStackBlock;
  v0[3] = 1107296256;
  v0[4] = sub_10107F1F0;
  v0[5] = &unk_1015F1D98;
  uint64_t v6 = _Block_copy(v0 + 2);
  swift_release();
  xpc_set_event_stream_handler("com.apple.distnoted.matching", v4, v6);
  _Block_release(v6);
  uint64_t v7 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v1, 1, 1, v7);
  uint64_t v9 = sub_100D0F7D4(&qword_10165D940, v8, (void (*)(uint64_t))type metadata accessor for DistributedNotificationService);
  long long v10 = (void *)swift_allocObject();
  v10[2] = v3;
  v10[3] = v9;
  void v10[4] = v3;
  v10[5] = v2;
  swift_retain_n();
  sub_1008F5E44(v1, (uint64_t)&unk_10165D970, (uint64_t)v10);
  swift_release();
  swift_task_dealloc();
  long long v11 = (uint64_t (*)(void))v0[1];
  return v11();
}

uint64_t sub_100D0DB14(void *a1)
{
  uint64_t v2 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v6 = result;
    if (xpc_dictionary_get_string(a1, _xpc_event_key_name))
    {
      uint64_t v7 = String.init(cString:)();
      uint64_t v9 = v8;
      uint64_t v10 = type metadata accessor for TaskPriority();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v4, 1, 1, v10);
      long long v11 = (void *)swift_allocObject();
      v11[2] = 0;
      v11[3] = 0;
      v11[4] = v6;
      v11[5] = v7;
      v11[6] = v9;
      sub_1008F5E44((uint64_t)v4, (uint64_t)&unk_10165D980, (uint64_t)v11);
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_100D0DC68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[3] = a5;
  v6[4] = a6;
  _OWORD v6[2] = a4;
  return _swift_task_switch(sub_100D0DC8C, a4, 0);
}

uint64_t sub_100D0DC8C()
{
  sub_100D0E030(*(void *)(v0 + 24), *(void **)(v0 + 32));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100D0DCF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 24) = a4;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v4 + 32) = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_100D0DD90;
  return static Task<>.sleep(nanoseconds:)(30000000000);
}

uint64_t sub_100D0DD90()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 24);
  if (v0)
  {
    swift_errorRelease();
    uint64_t v4 = sub_100D0F81C;
  }
  else
  {
    uint64_t v4 = sub_100D0DEC8;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100D0DEC8()
{
  uint64_t v1 = v0[3];
  if (*(unsigned char *)(v1 + 144) == 1)
  {
    if (qword_101637090 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_100010324(v2, (uint64_t)qword_10170EC68);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 134217984;
      v0[2] = 30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Stop special launch event processing -- %llu seconds have passed since launch", v5, 0xCu);
      swift_slowDealloc();
    }

    *(unsigned char *)(v1 + 144) = 0;
  }
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_100D0E030(uint64_t a1, void *a2)
{
  swift_beginAccess();
  if (*(unsigned char *)(v2 + 144) == 1 && !*(void *)(v2 + 160))
  {
    if (qword_101637090 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100010324(v5, (uint64_t)qword_10170EC68);
    swift_bridgeObjectRetain_n();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 136315138;
      v21[0] = v9;
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(29);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v10._countAndFlagsBits = a1;
      v10._object = a2;
      String.append(_:)(v10);
      swift_bridgeObjectRelease();
      v11._countAndFlagsBits = 93;
      v11._object = (void *)0xE100000000000000;
      String.append(_:)(v11);
      swift_bridgeObjectRelease();
      sub_1008FA0F0(0xD00000000000001ALL, 0x8000000101417660, v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Storing launchEvent: %s", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    *(unsigned char *)(v2 + 144) = 0;
    *(void *)(v2 + 152) = a1;
    *(void *)(v2 + 160) = a2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  if (qword_101637090 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100010324(v12, (uint64_t)qword_10170EC68);
  swift_bridgeObjectRetain_n();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v15 = 136315394;
    v21[0] = v16;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(29);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    v17._countAndFlagsBits = a1;
    v17._object = a2;
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18._countAndFlagsBits = 93;
    v18._object = (void *)0xE100000000000000;
    String.append(_:)(v18);
    swift_bridgeObjectRelease();
    sub_1008FA0F0(0xD00000000000001ALL, 0x8000000101417660, v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v15 + 12) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Publishing %s to %ld clients.", (uint8_t *)v15, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v19 = type metadata accessor for Transaction();
  __chkstk_darwin(v19);
  return static Transaction.named<A>(_:with:)();
}

uint64_t sub_100D0E50C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v24 = a4;
  uint64_t v25 = a1;
  uint64_t v7 = sub_10000588C(&qword_10165D960);
  uint64_t v33 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C(&qword_1016579F0);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = *(void *)(a2 + 136);
  uint64_t v15 = *(void *)(result + 16);
  if (v15)
  {
    v23[0] = *(void *)(a2 + 136);
    v23[1] = v4;
    uint64_t v16 = v11 + 16;
    Swift::String v17 = *(void (**)(char *, unint64_t, uint64_t))(v11 + 16);
    unint64_t v18 = result + ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    uint64_t v28 = *(void *)(v11 + 72);
    os_log_t v29 = v17;
    uint64_t v19 = (void (**)(char *, uint64_t))(v33 + 8);
    uint64_t v20 = v24;
    uint64_t v27 = a3;
    uint64_t v33 = v16;
    long long v21 = (void (**)(char *, uint64_t))(v16 - 8);
    swift_bridgeObjectRetain();
    uint64_t v26 = v7;
    uint64_t v22 = v25;
    do
    {
      v29(v13, v18, v10);
      uint64_t v30 = v22;
      uint64_t v31 = v27;
      uint64_t v32 = v20;
      swift_retain();
      swift_bridgeObjectRetain();
      AsyncStream.Continuation.yield(_:)();
      (*v19)(v9, v26);
      (*v21)(v13, v10);
      v18 += v28;
      --v15;
    }
    while (v15);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100D0E75C(uint64_t a1)
{
  uint64_t v3 = sub_10000588C(&qword_10165D960);
  uint64_t v26 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_1016579F0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  uint64_t v25 = a1;
  v10(v9, a1, v6);
  uint64_t v11 = v1 + 17;
  swift_beginAccess();
  unint64_t v12 = v1[17];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v1[17] = v12;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v12 = sub_100A723AC(0, *(void *)(v12 + 16) + 1, 1, v12);
    unint64_t *v11 = v12;
  }
  unint64_t v15 = *(void *)(v12 + 16);
  unint64_t v14 = *(void *)(v12 + 24);
  if (v15 >= v14 >> 1)
  {
    unint64_t v12 = sub_100A723AC(v14 > 1, v15 + 1, 1, v12);
    unint64_t *v11 = v12;
  }
  *(void *)(v12 + 16) = v15 + 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v12+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v15, v9, v6);
  uint64_t result = swift_endAccess();
  uint64_t v17 = v1[20];
  if (v17)
  {
    uint64_t v18 = v1[19];
    uint64_t v19 = qword_101637090;
    swift_bridgeObjectRetain();
    if (v19 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100010324(v20, (uint64_t)qword_10170EC68);
    long long v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Publishing LaunchEvent to new client", v23, 2u);
      swift_slowDealloc();
    }

    uint64_t v24 = type metadata accessor for Transaction();
    __chkstk_darwin(v24);
    *(&v25 - 4) = v25;
    *(&v25 - 3) = v18;
    *(&v25 - 2) = v17;
    static Transaction.named<A>(_:with:)();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v5, v3);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100D0EAE0()
{
  return AsyncStream.Continuation.yield(_:)();
}

uint64_t sub_100D0EB4C()
{
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for DistributedNotificationService()
{
  return self;
}

ValueMetadata *type metadata accessor for DistributedNotification()
{
  return &type metadata for DistributedNotification;
}

uint64_t sub_100D0EBD0()
{
  uint64_t v1 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v1);
  uint64_t v2 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v2 - 8);
  uint64_t v3 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_defaultActor_initialize();
  *(void *)(v0 + 112) = 0xD00000000000001ELL;
  *(void *)(v0 + 120) = 0x800000010137C6A0;
  sub_10000584C();
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v3);
  static DispatchQoS.unspecified.getter();
  v8[1] = _swiftEmptyArrayStorage;
  sub_100D0F7D4((unint64_t *)&qword_101638CC0, 255, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000588C((uint64_t *)&unk_1016376F0);
  sub_1000058D0();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)(v0 + 128) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)(v0 + 136) = _swiftEmptyArrayStorage;
  *(unsigned char *)(v0 + 144) = 1;
  *(void *)(v0 + 152) = 0;
  *(void *)(v0 + 160) = 0;
  return v0;
}

uint64_t sub_100D0EE34()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100033F68;
  return sub_100D0D868();
}

uint64_t sub_100D0EEC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_1016579F0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v11 = (*(unsigned __int8 *)(v5 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v12 = (char *)swift_allocObject();
  *((void *)v12 + 2) = 0;
  *((void *)v12 + 3) = 0;
  *((void *)v12 + 4) = a2;
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v12[v11], (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  swift_retain();
  sub_1008F5E44((uint64_t)v9, (uint64_t)&unk_10165D958, (uint64_t)v12);
  return swift_release();
}

uint64_t sub_100D0F098(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return _swift_task_switch(sub_100D0F0B8, a4, 0);
}

uint64_t sub_100D0F0B8()
{
  sub_100D0E75C(*(void *)(v0 + 24));
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100D0F118(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  v2[2] = a2;
  v2[3] = v3;
  void v2[4] = v4;
  return _swift_task_switch(sub_100D0F140, 0, 0);
}

uint64_t sub_100D0F140()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[2];
  swift_bridgeObjectRetain();
  char v4 = sub_100DC6054(v1, v2, v3);
  swift_bridgeObjectRelease();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5(v4 & 1);
}

unint64_t sub_100D0F1D0(uint64_t a1, void *a2)
{
  _StringGuts.grow(_:)(29);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v4._countAndFlagsBits = a1;
  v4._object = a2;
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 93;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  return 0xD00000000000001ALL;
}

unint64_t sub_100D0F270()
{
  return sub_100D0F1D0(*(void *)v0, *(void **)(v0 + 8));
}

uint64_t sub_100D0F278(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100D0F7D4(&qword_10165D940, a2, (void (*)(uint64_t))type metadata accessor for DistributedNotificationService);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100D0F2D0()
{
  uint64_t v1 = sub_10000588C(&qword_1016579F0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100D0F3A8()
{
  uint64_t v2 = *(void *)(sub_10000588C(&qword_1016579F0) - 8);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[2] = v3;
  v5[3] = v4;
  v5[1] = sub_10001D2E4;
  return _swift_task_switch(sub_100D0F0B8, v3, 0);
}

uint64_t sub_100D0F494()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170EC80);
  sub_100010324(v0, (uint64_t)qword_10170EC80);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100D0F514()
{
  return sub_100D0EAE0();
}

uint64_t sub_100D0F534(uint64_t a1)
{
  return sub_100D0E50C(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100D0F554()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100D0F58C(void *a1)
{
  return sub_100D0DB14(a1);
}

uint64_t sub_100D0F594(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100D0F5A4()
{
  return swift_release();
}

uint64_t sub_100D0F5AC()
{
  swift_unknownObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100D0F5EC()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  void *v3 = v1;
  v3[1] = sub_100033F68;
  v3[3] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v3[4] = v4;
  void *v4 = v3;
  v4[1] = sub_100D0DD90;
  return static Task<>.sleep(nanoseconds:)(30000000000);
}

uint64_t sub_100D0F6D4()
{
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100D0F71C()
{
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[3] = v3;
  v5[4] = v4;
  v5[1] = sub_100033F68;
  v5[2] = v2;
  return _swift_task_switch(sub_100D0DC8C, v2, 0);
}

uint64_t sub_100D0F7D4(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_100D0F820(void *a1@<X0>, void *a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  type metadata accessor for SPPairingSessionError(0);
  sub_100D11238(&qword_101638770, type metadata accessor for SPPairingSessionError);
  _BridgedStoredNSError.code.getter();
  if ((unint64_t)(v15 - 2) > 0x12)
  {
    *(unsigned char *)(a4 + 16) = 0;
    if (!a3)
    {
LABEL_5:
      uint64_t v8 = _BridgedStoredNSError.userInfo.getter();
      uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      if (*(void *)(v8 + 16) && (uint64_t v11 = sub_100723FF4(v9, v10), (v12 & 1) != 0))
      {
        sub_10012F428(*(void *)(v8 + 56) + 32 * v11, (uint64_t)&v15);
      }
      else
      {
        long long v15 = 0u;
        long long v16 = 0u;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*((void *)&v16 + 1))
      {
        if (swift_dynamicCast())
        {
          a2 = a1;
          a3 = v14;
          goto LABEL_14;
        }
      }
      else
      {
        sub_100498978((uint64_t)&v15);
      }
      a2 = 0;
      a3 = 0xE000000000000000;
    }
  }
  else
  {
    *(unsigned char *)(a4 + 16) = byte_10137CC0E[(void)v15 - 2];
    if (!a3) {
      goto LABEL_5;
    }
  }
LABEL_14:
  *(void *)a4 = a2;
  *(void *)(a4 + 8) = a3;
  uint64_t v13 = type metadata accessor for PairingError(0);
  static Date.trustedNow.getter(a4 + *(int *)(v13 + 24));
}

unint64_t sub_100D0F9CC()
{
  sub_10000588C(&qword_101642890);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101342130;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v2;
  unint64_t v12 = sub_100D0FD54(*(unsigned char *)(v0 + 16));
  uint64_t v13 = v3;
  v4._countAndFlagsBits = 2108704;
  v4._object = (void *)0xE300000000000000;
  String.append(_:)(v4);
  uint64_t v5 = *(void *)v0;
  uint64_t v6 = *(void **)(v0 + 8);
  swift_bridgeObjectRetain();
  v7._countAndFlagsBits = v5;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 2108704;
  v8._object = (void *)0xE300000000000000;
  String.append(_:)(v8);
  type metadata accessor for PairingError(0);
  type metadata accessor for Date();
  sub_100D11238((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
  v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  *(void *)(inited + 48) = v12;
  *(void *)(inited + 56) = v13;
  unint64_t v10 = sub_10092D8F8(inited);
  type metadata accessor for SPPairingSessionError(0);
  sub_10065435C(v10);
  swift_bridgeObjectRelease();
  sub_100D11238(&qword_101638770, type metadata accessor for SPPairingSessionError);
  _BridgedStoredNSError.init(_:userInfo:)();
  return v12;
}

unint64_t sub_100D0FD54(char a1)
{
  unint64_t result = 0x6E776F6E6B6E752ELL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x64616552746F6E2ELL;
      break;
    case 2:
      unint64_t result = 0x656E654779656B2ELL;
      break;
    case 3:
      unint64_t result = 0xD000000000000010;
      break;
    case 4:
      unint64_t result = 0x6B726F7774656E2ELL;
      break;
    case 5:
      unint64_t result = 0xD000000000000011;
      break;
    case 6:
      unint64_t result = 0x64696C61766E692ELL;
      break;
    case 7:
      unint64_t result = 0xD000000000000012;
      break;
    case 8:
      unint64_t result = 0x746E65687475612ELL;
      break;
    case 9:
      unint64_t result = 0x746E756F6363612ELL;
      break;
    case 10:
      unint64_t result = 0x636552657661732ELL;
      break;
    case 11:
      unint64_t result = 0x696E756D6D6F632ELL;
      break;
    case 12:
      unint64_t result = 0x754F64656D69742ELL;
      break;
    case 13:
      unint64_t result = 0x70707553746F6E2ELL;
      break;
    case 14:
      unint64_t result = 0x797265747461622ELL;
      break;
    case 15:
      unint64_t result = 0x67696C45746F6E2ELL;
      break;
    case 16:
      unint64_t result = 0x655274696D696C2ELL;
      break;
    case 17:
      unint64_t result = 0x64656B636F6C2ELL;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100D0FFE8@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100D12940(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100D10014()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100D10074()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_100D100C4(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_10165DB00);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  Swift::String v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_100D12240();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v10[14] = *(unsigned char *)(v3 + 16);
    v10[13] = 1;
    sub_100D122E8();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    type metadata accessor for PairingError(0);
    v10[12] = 2;
    type metadata accessor for Date();
    sub_100D11238((unint64_t *)&unk_10163ACE0, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100D102BC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v25 = type metadata accessor for Date();
  uint64_t v22 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_10000588C(&qword_10165DAE8);
  uint64_t v24 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for PairingError(0);
  __chkstk_darwin(v8);
  unint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100D12240();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  uint64_t v11 = (uint64_t)a1;
  uint64_t v21 = v8;
  uint64_t v13 = v24;
  uint64_t v12 = v25;
  unint64_t v14 = v5;
  char v30 = 0;
  uint64_t v15 = (uint64_t)v10;
  *(void *)unint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
  *((void *)v10 + 1) = v16;
  char v28 = 1;
  sub_100D12294();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  unsigned char v10[16] = v29;
  char v27 = 2;
  sub_100D11238(&qword_10163ACC0, (void (*)(uint64_t))&type metadata accessor for Date);
  uint64_t v20 = v14;
  uint64_t v17 = v26;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v13 + 8))(v7, v17);
  (*(void (**)(uint64_t, char *, uint64_t))(v22 + 32))(v15 + *(int *)(v21 + 24), v20, v12);
  sub_1001BF218(v15, v23, type metadata accessor for PairingError);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v11);
  return sub_1001BF288(v15, type metadata accessor for PairingError);
}

uint64_t sub_100D1064C(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_10165DAD8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_100D12188();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  type metadata accessor for UUID();
  sub_100D11238(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for PairingErrorRecord(0);
    v8[14] = 1;
    type metadata accessor for PairingError(0);
    sub_100D11238(&qword_10165DAE0, (void (*)(uint64_t))type metadata accessor for PairingError);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_100D1084C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = a2;
  uint64_t v22 = type metadata accessor for PairingError(0);
  __chkstk_darwin(v22);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for UUID();
  uint64_t v21 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v23 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_10000588C(&qword_10165DAC0);
  uint64_t v24 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for PairingErrorRecord(0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100D12188();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  uint64_t v18 = v9;
  uint64_t v19 = v11;
  uint64_t v12 = v21;
  char v28 = 0;
  sub_100D11238((unint64_t *)&qword_10163B010, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v13 = v23;
  uint64_t v14 = v25;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v19, v13, v14);
  char v27 = 1;
  sub_100D11238(&qword_10165DAD0, (void (*)(uint64_t))type metadata accessor for PairingError);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v24 + 8))(v8, v26);
  uint64_t v15 = (uint64_t)v19;
  sub_100D121DC((uint64_t)v5, (uint64_t)&v19[*(int *)(v18 + 20)]);
  sub_1001BF218(v15, v20, type metadata accessor for PairingErrorRecord);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  return sub_1001BF288(v15, type metadata accessor for PairingErrorRecord);
}

uint64_t sub_100D10C3C()
{
  uint64_t v1 = 1684957547;
  if (*v0 != 1) {
    uint64_t v1 = 1702125924;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6F666E4972657375;
  }
}

uint64_t sub_100D10C88@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100D12950(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100D10CB0(uint64_t a1)
{
  unint64_t v2 = sub_100D12240();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100D10CEC(uint64_t a1)
{
  unint64_t v2 = sub_100D12240();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100D10D28@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100D102BC(a1, a2);
}

uint64_t sub_100D10D40(void *a1)
{
  return sub_100D100C4(a1);
}

uint64_t sub_100D10D58()
{
  v1._countAndFlagsBits = sub_100D0FD54(*(unsigned char *)(v0 + 16));
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 32;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  uint64_t v4 = *(void *)v0;
  uint64_t v3 = *(void **)(v0 + 8);
  swift_bridgeObjectRetain();
  v5._countAndFlagsBits = v4;
  v5._object = v3;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 62;
  v6._object = (void *)0xE100000000000000;
  String.append(_:)(v6);
  return 60;
}

uint64_t sub_100D10DF8()
{
  uint64_t v0 = type metadata accessor for URL();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001E384(v2, qword_10170EC98);
  sub_100010324(v0, (uint64_t)qword_10170EC98);
  type metadata accessor for BeaconStore(0);
  sub_100A9DB34((uint64_t)v4);
  URL.appendingPathComponent(_:isDirectory:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t sub_100D10F14()
{
  if (*v0) {
    return 0x726F727265;
  }
  else {
    return 0x696669746E656469;
  }
}

uint64_t sub_100D10F50@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100D12A88(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100D10F78(uint64_t a1)
{
  unint64_t v2 = sub_100D12188();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100D10FB4(uint64_t a1)
{
  unint64_t v2 = sub_100D12188();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100D10FF0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100D1084C(a1, a2);
}

uint64_t sub_100D11008(void *a1)
{
  return sub_100D1064C(a1);
}

uint64_t sub_100D11020()
{
  type metadata accessor for UUID();
  sub_100D11238((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 32;
  v2._object = (void *)0xE100000000000000;
  String.append(_:)(v2);
  uint64_t v3 = v0 + *(int *)(type metadata accessor for PairingErrorRecord(0) + 20);
  v4._countAndFlagsBits = sub_100D0FD54(*(unsigned char *)(v3 + 16));
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 32;
  v5._object = (void *)0xE100000000000000;
  String.append(_:)(v5);
  uint64_t v6 = *(void *)v3;
  uint64_t v7 = *(void **)(v3 + 8);
  swift_bridgeObjectRetain();
  v8._countAndFlagsBits = v6;
  v8._object = v7;
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 62;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  v10._countAndFlagsBits = 60;
  v10._object = (void *)0xE100000000000000;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 32;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  type metadata accessor for PairingError(0);
  type metadata accessor for Date();
  sub_100D11238((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
  v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 62;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  return 60;
}

uint64_t type metadata accessor for PairingErrorRecord(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_10165DA78);
}

uint64_t type metadata accessor for PairingError(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_10165D9E0);
}

uint64_t sub_100D11238(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *sub_100D11280(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    void *v3 = *a2;
    uint64_t v3 = (void *)(v11 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v5;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    uint64_t v6 = *(int *)(a3 + 24);
    uint64_t v7 = a1 + v6;
    uint64_t v8 = (uint64_t)a2 + v6;
    uint64_t v9 = type metadata accessor for Date();
    Swift::String v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v3;
}

uint64_t sub_100D11370(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t sub_100D113E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_bridgeObjectRetain();
  v9(v6, v7, v8);
  return a1;
}

uint64_t sub_100D11488(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

uint64_t sub_100D1152C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_100D115B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_100D11644(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100D11658);
}

uint64_t sub_100D11658(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for Date();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 24);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_100D11708(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100D1171C);
}

uint64_t sub_100D1171C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 24);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_100D117C4()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_100D11864(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = *(uint64_t *)((char *)a2 + v8);
    uint64_t v12 = *((void *)v10 + 1);
    *(void *)uint64_t v9 = v11;
    *((void *)v9 + 1) = v12;
    v9[16] = v10[16];
    uint64_t v13 = *(int *)(type metadata accessor for PairingError(0) + 24);
    uint64_t v14 = &v9[v13];
    uint64_t v15 = &v10[v13];
    uint64_t v16 = type metadata accessor for Date();
    uint64_t v17 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16);
    swift_bridgeObjectRetain();
    v17(v14, v15, v16);
  }
  return a1;
}

uint64_t sub_100D119AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  uint64_t v6 = v5 + *(int *)(type metadata accessor for PairingError(0) + 24);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);

  return v8(v6, v7);
}

uint64_t sub_100D11A6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = *(void *)(a2 + v7 + 8);
  *(void *)uint64_t v8 = *(void *)(a2 + v7);
  *(void *)(v8 + 8) = v10;
  *(unsigned char *)(v8 + 16) = *(unsigned char *)(a2 + v7 + 16);
  uint64_t v11 = *(int *)(type metadata accessor for PairingError(0) + 24);
  uint64_t v12 = v8 + v11;
  uint64_t v13 = v9 + v11;
  uint64_t v14 = type metadata accessor for Date();
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16);
  swift_bridgeObjectRetain();
  v15(v12, v13, v14);
  return a1;
}

uint64_t sub_100D11B64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v8 = *(void *)v9;
  *(void *)(v8 + 8) = *(void *)(v9 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(v8 + 16) = *(unsigned char *)(v9 + 16);
  uint64_t v10 = *(int *)(type metadata accessor for PairingError(0) + 24);
  uint64_t v11 = v8 + v10;
  uint64_t v12 = v9 + v10;
  uint64_t v13 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

uint64_t sub_100D11C58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(unsigned char *)(v8 + 16) = *(unsigned char *)(v9 + 16);
  uint64_t v10 = *(int *)(type metadata accessor for PairingError(0) + 24);
  uint64_t v11 = v8 + v10;
  uint64_t v12 = v9 + v10;
  uint64_t v13 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  return a1;
}

uint64_t sub_100D11D34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = *(void *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  *(void *)(v8 + 8) = v10;
  swift_bridgeObjectRelease();
  *(unsigned char *)(v8 + 16) = *(unsigned char *)(v9 + 16);
  uint64_t v11 = *(int *)(type metadata accessor for PairingError(0) + 24);
  uint64_t v12 = v8 + v11;
  uint64_t v13 = v9 + v11;
  uint64_t v14 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  return a1;
}

uint64_t sub_100D11E18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100D11E2C);
}

uint64_t sub_100D11E2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = type metadata accessor for PairingError(0);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t sub_100D11F24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100D11F38);
}

uint64_t sub_100D11F38(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = type metadata accessor for PairingError(0);
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

uint64_t sub_100D1203C()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for PairingError(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_100D12104(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100D11238(&qword_10165DAB0, (void (*)(uint64_t))type metadata accessor for PairingErrorRecord);
  uint64_t result = sub_100D11238(&qword_10165DAB8, (void (*)(uint64_t))type metadata accessor for PairingErrorRecord);
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100D12188()
{
  unint64_t result = qword_10165DAC8;
  if (!qword_10165DAC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165DAC8);
  }
  return result;
}

uint64_t sub_100D121DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PairingError(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100D12240()
{
  unint64_t result = qword_10165DAF0;
  if (!qword_10165DAF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165DAF0);
  }
  return result;
}

unint64_t sub_100D12294()
{
  unint64_t result = qword_10165DAF8;
  if (!qword_10165DAF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165DAF8);
  }
  return result;
}

unint64_t sub_100D122E8()
{
  unint64_t result = qword_10165DB08;
  if (!qword_10165DB08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165DB08);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for PairingError.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100D12408);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PairingError.CodingKeys()
{
  return &type metadata for PairingError.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for PairingErrorRecord.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100D1250CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PairingErrorRecord.CodingKeys()
{
  return &type metadata for PairingErrorRecord.CodingKeys;
}

uint64_t getEnumTagSinglePayload for PairingError.ErrorKind(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xEF) {
    goto LABEL_17;
  }
  if (a2 + 17 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 17) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 17;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 17;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 17;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x12;
  int v8 = v6 - 18;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for PairingError.ErrorKind(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 17 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 17) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEE)
  {
    unsigned int v6 = ((a2 - 239) >> 8) + 1;
    *unint64_t result = a2 + 17;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100D126A0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 17;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PairingError.ErrorKind()
{
  return &type metadata for PairingError.ErrorKind;
}

unint64_t sub_100D126DC()
{
  unint64_t result = qword_10165DB10;
  if (!qword_10165DB10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165DB10);
  }
  return result;
}

unint64_t sub_100D12734()
{
  unint64_t result = qword_10165DB18;
  if (!qword_10165DB18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165DB18);
  }
  return result;
}

unint64_t sub_100D1278C()
{
  unint64_t result = qword_10165DB20;
  if (!qword_10165DB20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165DB20);
  }
  return result;
}

unint64_t sub_100D127E4()
{
  unint64_t result = qword_10165DB28;
  if (!qword_10165DB28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165DB28);
  }
  return result;
}

unint64_t sub_100D1283C()
{
  unint64_t result = qword_10165DB30;
  if (!qword_10165DB30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165DB30);
  }
  return result;
}

unint64_t sub_100D12894()
{
  unint64_t result = qword_10165DB38;
  if (!qword_10165DB38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165DB38);
  }
  return result;
}

unint64_t sub_100D128EC()
{
  unint64_t result = qword_10165DB40;
  if (!qword_10165DB40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165DB40);
  }
  return result;
}

unint64_t sub_100D12940(unint64_t result)
{
  if (result >= 0x12) {
    return 18;
  }
  return result;
}

uint64_t sub_100D12950(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6F666E4972657375 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1684957547 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1702125924 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_100D12A88(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x696669746E656469 && a2 == 0xEA00000000007265;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x726F727265 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

unint64_t sub_100D12B80()
{
  unint64_t result = qword_10165DB48;
  if (!qword_10165DB48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165DB48);
  }
  return result;
}

uint64_t sub_100D12BD4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100D12DD0(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_100D12C04(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v4) = HIDWORD(result) - result;
      if (__OFSUB__(HIDWORD(result), result))
      {
        __break(1u);
LABEL_15:
        __break(1u);
LABEL_16:
        __break(1u);
LABEL_17:
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
        JUMPOUT(0x100D12CC8);
      }
      uint64_t v4 = (int)v4;
LABEL_6:
      if (v4 != 32) {
        goto LABEL_18;
      }
      switch(a4 >> 62)
      {
        case 1uLL:
          LODWORD(v8) = HIDWORD(a3) - a3;
          if (__OFSUB__(HIDWORD(a3), a3)) {
            goto LABEL_16;
          }
          uint64_t v8 = (int)v8;
LABEL_12:
          if (v8 != 113) {
            goto LABEL_19;
          }
          return result;
        case 2uLL:
          uint64_t v10 = *(void *)(a3 + 16);
          uint64_t v9 = *(void *)(a3 + 24);
          BOOL v7 = __OFSUB__(v9, v10);
          uint64_t v8 = v9 - v10;
          if (!v7) {
            goto LABEL_12;
          }
          goto LABEL_17;
        case 3uLL:
          goto LABEL_19;
        default:
          uint64_t v8 = BYTE6(a4);
          goto LABEL_12;
      }
    case 2uLL:
      uint64_t v6 = *(void *)(result + 16);
      uint64_t v5 = *(void *)(result + 24);
      BOOL v7 = __OFSUB__(v5, v6);
      uint64_t v4 = v5 - v6;
      if (!v7) {
        goto LABEL_6;
      }
      goto LABEL_15;
    case 3uLL:
      goto LABEL_18;
    default:
      uint64_t v4 = BYTE6(a2);
      goto LABEL_6;
  }
}

ValueMetadata *type metadata accessor for InitiatePairingCommandPayload()
{
  return &type metadata for InitiatePairingCommandPayload;
}

unint64_t sub_100D12CF8(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100D12D28();
  unint64_t result = sub_100D12D7C();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100D12D28()
{
  unint64_t result = qword_10165DB50;
  if (!qword_10165DB50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165DB50);
  }
  return result;
}

unint64_t sub_100D12D7C()
{
  unint64_t result = qword_10165DB58;
  if (!qword_10165DB58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165DB58);
  }
  return result;
}

uint64_t sub_100D12DD0(void *a1)
{
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryDecoding.container()();
  uint64_t v3 = sub_1000BD078((uint64_t)v11, v12);
  uint64_t v4 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  if (!v1)
  {
    uint64_t v6 = v4;
    unint64_t v7 = v5;
    sub_1000BD078((uint64_t)v11, v12);
    uint64_t v8 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
    uint64_t v3 = sub_100D12C04(v6, v7, v8, v10);
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v11);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  return v3;
}

void *sub_100D12F04(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (void *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *(void *)((char *)a1 + a3[5]) = *(void *)((char *)a2 + a3[5]);
    *(void *)((char *)a1 + v8) = *(void *)((char *)a2 + v8);
    uint64_t v9 = a3[8];
    *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
    *(void *)((char *)a1 + v9) = *(void *)((char *)a2 + v9);
    *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_100D12FFC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_bridgeObjectRelease();
}

uint64_t sub_100D13070(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100D13118(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_100D131D4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_100D13278(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(void *)(a1 + a3[5]) = *(void *)(a2 + a3[5]);
  *(void *)(a1 + v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_100D13324(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100D13338);
}

uint64_t sub_100D13338(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 32));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_100D133F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100D1340C);
}

uint64_t sub_100D1340C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for Date();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 32)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for BeaconLocationUpdate()
{
  uint64_t result = qword_10165DBB8;
  if (!qword_10165DBB8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100D13514()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_100D135C8(char a1)
{
  unint64_t result = 0x6D617473656D6974;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x656475746974616CLL;
      break;
    case 2:
      unint64_t result = 0x64757469676E6F6CLL;
      break;
    case 3:
      unint64_t result = 0xD000000000000012;
      break;
    case 4:
      unint64_t result = 0xD000000000000011;
      break;
    case 5:
      unint64_t result = 0x656372756F73;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100D136A8(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_10165DC10);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_100D13F08();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v16 = 0;
  type metadata accessor for Date();
  sub_100D14054((unint64_t *)&unk_10163ACE0, (void (*)(uint64_t))&type metadata accessor for Date);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = type metadata accessor for BeaconLocationUpdate();
    char v15 = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v14 = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v13 = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    uint64_t v12 = *(void *)(v3 + *(int *)(v9 + 32));
    v11[15] = 4;
    sub_10000588C((uint64_t *)&unk_1016636E0);
    sub_100D13FC0((unint64_t *)&qword_101663710, &qword_10163B040);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v11[14] = *(unsigned char *)(v3 + *(int *)(v9 + 36));
    _OWORD v11[13] = 5;
    sub_100429928();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100D13984@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v20 = a2;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v22 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v23 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_10000588C(&qword_10165DC00);
  uint64_t v21 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (int *)type metadata accessor for BeaconLocationUpdate();
  __chkstk_darwin(v8);
  unint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100D13F08();
  uint64_t v25 = v7;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  uint64_t v19 = a1;
  uint64_t v11 = (uint64_t)v10;
  uint64_t v12 = v22;
  char v33 = 0;
  sub_100D14054(&qword_10163ACC0, (void (*)(uint64_t))&type metadata accessor for Date);
  char v13 = v23;
  uint64_t v14 = v24;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v11, v13, v4);
  char v32 = 1;
  KeyedDecodingContainer.decode(_:forKey:)();
  *(void *)(v11 + v8[5]) = v15;
  char v31 = 2;
  KeyedDecodingContainer.decode(_:forKey:)();
  *(void *)(v11 + v8[6]) = v16;
  char v30 = 3;
  KeyedDecodingContainer.decode(_:forKey:)();
  *(void *)(v11 + v8[7]) = v17;
  sub_10000588C((uint64_t *)&unk_1016636E0);
  char v29 = 4;
  sub_100D13FC0((unint64_t *)&qword_10166F9B0, (unint64_t *)&qword_10163B010);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(void *)(v11 + v8[8]) = v26;
  char v27 = 5;
  sub_100429778();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v25, v14);
  *(unsigned char *)(v11 + v8[9]) = v28;
  sub_100D13F5C(v11, v20);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v19);
  return sub_1004BF2A8(v11);
}

unint64_t sub_100D13E30()
{
  return sub_100D135C8(*v0);
}

uint64_t sub_100D13E38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100D142A8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100D13E60(uint64_t a1)
{
  unint64_t v2 = sub_100D13F08();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100D13E9C(uint64_t a1)
{
  unint64_t v2 = sub_100D13F08();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100D13ED8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100D13984(a1, a2);
}

uint64_t sub_100D13EF0(void *a1)
{
  return sub_100D136A8(a1);
}

unint64_t sub_100D13F08()
{
  unint64_t result = qword_10165DC08;
  if (!qword_10165DC08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165DC08);
  }
  return result;
}

uint64_t sub_100D13F5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BeaconLocationUpdate();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100D13FC0(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000592C((uint64_t *)&unk_1016636E0);
    sub_100D14054(a2, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100D14054(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for BeaconLocationUpdate.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100D14168);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BeaconLocationUpdate.CodingKeys()
{
  return &type metadata for BeaconLocationUpdate.CodingKeys;
}

unint64_t sub_100D141A4()
{
  unint64_t result = qword_10165DC18;
  if (!qword_10165DC18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165DC18);
  }
  return result;
}

unint64_t sub_100D141FC()
{
  unint64_t result = qword_10165DC20;
  if (!qword_10165DC20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165DC20);
  }
  return result;
}

unint64_t sub_100D14254()
{
  unint64_t result = qword_10165DC28;
  if (!qword_10165DC28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165DC28);
  }
  return result;
}

uint64_t sub_100D142A8(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x6D617473656D6974 && a2 == 0xE900000000000070
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656475746974616CLL && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x64757469676E6F6CLL && a2 == 0xE900000000000065 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001013EF030 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000101417720 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x656372756F73 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

void destroy for AirPodsLEPairingCommand(uint64_t a1)
{
  sub_100D145AC(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    (void (*)(void))sub_10001CFB8,
    (void (*)(void))sub_100037A24);
}

void sub_100D145AC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, unint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,unint64_t a24,unint64_t a25,uint64_t a26,unint64_t a27,void (*a28)(void),void (*a29)(void))
{
  switch((a27 >> 59) & 6 | (a25 >> 63))
  {
    case 0uLL:
      a28();
      uint64_t v34 = a3;
      unint64_t v35 = a4;
      goto LABEL_9;
    case 1uLL:
      a28();
      ((void (*)(uint64_t, unint64_t))a28)(a3, a4);
      ((void (*)(uint64_t, uint64_t))a28)(a5, a6);
      ((void (*)(uint64_t, unint64_t))a28)(a7, a8);
      uint64_t v34 = a9;
      unint64_t v35 = a10;
      goto LABEL_9;
    case 2uLL:
      a28();
      ((void (*)(uint64_t, unint64_t))a28)(a3, a4);
      ((void (*)(uint64_t, uint64_t))a28)(a5, a6);
      ((void (*)(uint64_t, unint64_t))a28)(a7, a8);
      ((void (*)(uint64_t, unint64_t))a28)(a9, a10);
      ((void (*)(uint64_t, uint64_t))a28)(a11, a12);
      ((void (*)(uint64_t, uint64_t))a28)(a13, a14);
      ((void (*)(uint64_t, uint64_t))a28)(a15, a16);
      ((void (*)(uint64_t, uint64_t))a28)(a17, a18);
      ((void (*)(uint64_t, uint64_t))a28)(a19, a20);
      ((void (*)(uint64_t, uint64_t))a28)(a21, a22);
      ((void (*)(uint64_t, unint64_t))a28)(a23, a24);
      unint64_t v35 = a27 & 0xCFFFFFFFFFFFFFFFLL;
      uint64_t v34 = a26;
      goto LABEL_9;
    case 3uLL:
      a28();
      ((void (*)(uint64_t, unint64_t))a28)(a3, a4);
      ((void (*)(uint64_t, uint64_t))a28)(a5, a6);
      ((void (*)(uint64_t, unint64_t))a28)(a7, a8);
      ((void (*)(uint64_t, unint64_t))a28)(a9, a10);
      ((void (*)(uint64_t, uint64_t))a28)(a11, a12);
      ((void (*)(uint64_t, uint64_t))a28)(a13, a14);
      ((void (*)(uint64_t, uint64_t))a28)(a15, a16);
      ((void (*)(uint64_t, uint64_t))a28)(a17, a18);
      ((void (*)(uint64_t, uint64_t))a28)(a19, a20);
      ((void (*)(uint64_t, uint64_t))a28)(a21, a22);
      uint64_t v34 = a23;
      unint64_t v35 = a24;
      goto LABEL_11;
    case 4uLL:
      a28();
      ((void (*)(uint64_t, unint64_t))a28)(a3, a4);
      ((void (*)(uint64_t, uint64_t))a28)(a5, a6);
      uint64_t v34 = a7;
      unint64_t v35 = a8;
LABEL_9:
      a29 = a28;
LABEL_11:
      ((void (*)(uint64_t, unint64_t))a29)(v34, v35);
      break;
    default:
      return;
  }
}

uint64_t *initializeWithCopy for AirPodsLEPairingCommand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = a2[1];
  uint64_t v4 = a2[2];
  unint64_t v5 = a2[3];
  uint64_t v6 = a2[4];
  uint64_t v7 = a2[5];
  uint64_t v8 = a2[6];
  unint64_t v9 = a2[7];
  unint64_t v13 = a2[9];
  uint64_t v14 = a2[10];
  uint64_t v15 = a2[11];
  uint64_t v16 = a2[12];
  uint64_t v17 = a2[13];
  uint64_t v18 = a2[14];
  uint64_t v19 = a2[15];
  uint64_t v20 = a2[16];
  uint64_t v21 = a2[17];
  uint64_t v22 = a2[18];
  uint64_t v23 = a2[19];
  uint64_t v24 = a2[20];
  uint64_t v25 = a2[21];
  uint64_t v26 = a2[22];
  unint64_t v27 = a2[23];
  unint64_t v28 = a2[24];
  uint64_t v29 = a2[25];
  unint64_t v30 = a2[26];
  uint64_t v10 = a2[8];
  uint64_t v11 = *a2;
  sub_100D145AC(*a2, v3, v4, v5, v6, v7, v8, v9, v10, v13, v14, v15, v16, v17, v18, v19, v20, v21, v22,
    v23,
    v24,
    v25,
    v26,
    v27,
    v28,
    v29,
    v30,
    (void (*)(void))sub_1000361E0,
    (void (*)(void))sub_100037A38);
  *a1 = v11;
  a1[1] = v3;
  a1[2] = v4;
  a1[3] = v5;
  a1[4] = v6;
  a1[5] = v7;
  a1[6] = v8;
  a1[7] = v9;
  a1[8] = v10;
  a1[9] = v13;
  a1[10] = v14;
  a1[11] = v15;
  a1[12] = v16;
  a1[13] = v17;
  a1[14] = v18;
  a1[15] = v19;
  a1[16] = v20;
  a1[17] = v21;
  a1[18] = v22;
  a1[19] = v23;
  a1[20] = v24;
  a1[21] = v25;
  a1[22] = v26;
  a1[23] = v27;
  a1[24] = v28;
  a1[25] = v29;
  a1[26] = v30;
  return a1;
}

uint64_t assignWithCopy for AirPodsLEPairingCommand(uint64_t a1, uint64_t *a2)
{
  uint64_t v48 = a2[1];
  unint64_t v31 = a2[9];
  uint64_t v32 = a2[10];
  uint64_t v33 = a2[11];
  uint64_t v34 = a2[12];
  uint64_t v35 = a2[13];
  uint64_t v36 = a2[14];
  uint64_t v37 = a2[15];
  uint64_t v3 = a2[17];
  uint64_t v38 = a2[16];
  uint64_t v39 = a2[18];
  uint64_t v40 = a2[19];
  uint64_t v41 = a2[20];
  uint64_t v42 = a2[21];
  uint64_t v43 = a2[22];
  unint64_t v44 = a2[23];
  unint64_t v45 = a2[24];
  uint64_t v46 = a2[25];
  unint64_t v47 = a2[26];
  uint64_t v4 = a2[8];
  uint64_t v5 = *a2;
  uint64_t v6 = a2[2];
  unint64_t v7 = a2[3];
  uint64_t v8 = a2[4];
  uint64_t v9 = a2[5];
  uint64_t v10 = a2[6];
  unint64_t v11 = a2[7];
  sub_100D145AC(*a2, v48, v6, v7, v8, v9, v10, v11, v4, v31, v32, v33, v34, v35, v36, v37, v38, v3, v39,
    v40,
    v41,
    v42,
    v43,
    v44,
    v45,
    v46,
    v47,
    (void (*)(void))sub_1000361E0,
    (void (*)(void))sub_100037A38);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  *(void *)a1 = v5;
  *(void *)(a1 + 8) = v48;
  uint64_t v14 = *(void *)(a1 + 16);
  unint64_t v15 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  uint64_t v18 = *(void *)(a1 + 48);
  unint64_t v19 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  long long v20 = *(_OWORD *)(a1 + 64);
  long long v21 = *(_OWORD *)(a1 + 80);
  *(void *)(a1 + 64) = v4;
  *(void *)(a1 + 72) = v31;
  *(void *)(a1 + 80) = v32;
  *(void *)(a1 + 88) = v33;
  long long v22 = *(_OWORD *)(a1 + 96);
  long long v23 = *(_OWORD *)(a1 + 112);
  *(void *)(a1 + 96) = v34;
  *(void *)(a1 + 104) = v35;
  *(void *)(a1 + 112) = v36;
  *(void *)(a1 + 120) = v37;
  long long v24 = *(_OWORD *)(a1 + 128);
  long long v25 = *(_OWORD *)(a1 + 144);
  *(void *)(a1 + 128) = v38;
  *(void *)(a1 + 136) = v3;
  *(void *)(a1 + 144) = v39;
  *(void *)(a1 + 152) = v40;
  long long v26 = *(_OWORD *)(a1 + 160);
  long long v27 = *(_OWORD *)(a1 + 176);
  *(void *)(a1 + 160) = v41;
  *(void *)(a1 + 168) = v42;
  *(void *)(a1 + 176) = v43;
  *(void *)(a1 + 184) = v44;
  long long v28 = *(_OWORD *)(a1 + 192);
  *(void *)(a1 + 192) = v45;
  *(void *)(a1 + 200) = v46;
  unint64_t v29 = *(void *)(a1 + 208);
  *(void *)(a1 + 208) = v47;
  sub_100D145AC(v12, v13, v14, v15, v16, v17, v18, v19, v20, *((unint64_t *)&v20 + 1), v21, *((uint64_t *)&v21 + 1), v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, *((uint64_t *)&v24 + 1), v25,
    *((uint64_t *)&v25 + 1),
    v26,
    *((uint64_t *)&v26 + 1),
    v27,
    *((unint64_t *)&v27 + 1),
    v28,
    *((uint64_t *)&v28 + 1),
    v29,
    (void (*)(void))sub_10001CFB8,
    (void (*)(void))sub_100037A24);
  return a1;
}

uint64_t assignWithTake for AirPodsLEPairingCommand(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 208);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  unint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  unint64_t v12 = *(void *)(a1 + 56);
  long long v13 = *(_OWORD *)(a1 + 64);
  long long v14 = *(_OWORD *)(a1 + 80);
  long long v15 = *(_OWORD *)(a1 + 96);
  long long v16 = *(_OWORD *)(a1 + 112);
  long long v17 = *(_OWORD *)(a1 + 128);
  long long v18 = *(_OWORD *)(a1 + 144);
  long long v19 = *(_OWORD *)(a1 + 160);
  long long v20 = *(_OWORD *)(a1 + 176);
  long long v21 = *(_OWORD *)(a1 + 192);
  unint64_t v22 = *(void *)(a1 + 208);
  long long v23 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v23;
  long long v24 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v24;
  long long v25 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v25;
  long long v26 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v26;
  long long v27 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v27;
  long long v28 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v28;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(void *)(a1 + 208) = v4;
  sub_100D145AC(v5, v6, v7, v8, v9, v10, v11, v12, v13, *((unint64_t *)&v13 + 1), v14, *((uint64_t *)&v14 + 1), v15, *((uint64_t *)&v15 + 1), v16, *((uint64_t *)&v16 + 1), v17, *((uint64_t *)&v17 + 1), v18,
    *((uint64_t *)&v18 + 1),
    v19,
    *((uint64_t *)&v19 + 1),
    v20,
    *((unint64_t *)&v20 + 1),
    v21,
    *((uint64_t *)&v21 + 1),
    v22,
    (void (*)(void))sub_10001CFB8,
    (void (*)(void))sub_100037A24);
  return a1;
}

uint64_t getEnumTagSinglePayload for AirPodsLEPairingCommand(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 216)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unsigned int v2 = (*(void *)(a1 + 24) >> 58) & 0xC | (*(void *)(a1 + 8) >> 60) & 3 | *(unsigned char *)(a1 + 47) & 0x30 | (*(void *)(a1 + 56) >> 54) & 0xC0 | (*(void *)(a1 + 72) >> 52) & 0x300 | (*(void *)(a1 + 88) >> 50) & 0xC00 | *(_WORD *)(a1 + 110) & 0x3000 | (*(void *)(a1 + 120) >> 46) & 0xC000 | (*(void *)(a1 + 136) >> 44) & 0x30000 | (*(void *)(a1 + 152) >> 42) & 0xC0000 | (*(void *)(a1 + 168) >> 40) & 0x300000 | (*(_DWORD *)(a1 + 192) >> 8 << 22);
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for AirPodsLEPairingCommand(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 216) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      unint64_t v3 = -a2;
      *(void *)unint64_t result = 0;
      *(void *)(result + 8) = (unint64_t)(-(char)a2 & 3) << 60;
      *(void *)(result + 16) = 0;
      *(void *)(result + 24) = (v3 << 58) & 0x3000000000000000;
      *(void *)(result + 32) = 0;
      *(void *)(result + 40) = (v3 << 56) & 0x3000000000000000;
      *(void *)(result + 48) = 0;
      *(void *)(result + 56) = (v3 << 54) & 0x3000000000000000;
      *(void *)(result + 64) = 0;
      *(void *)(result + 72) = (v3 << 52) & 0x3000000000000000;
      *(void *)(result + 80) = 0;
      *(void *)(result + 88) = (v3 << 50) & 0x3000000000000000;
      *(void *)(result + 96) = 0;
      *(void *)(result + 104) = (v3 << 48) & 0x3000000000000000;
      *(void *)(result + 112) = 0;
      *(void *)(result + 120) = (v3 << 46) & 0x3000000000000000;
      *(void *)(result + 128) = 0;
      *(void *)(result + 136) = (v3 << 44) & 0x3000000000000000;
      *(void *)(result + 144) = 0;
      *(void *)(result + 152) = (v3 << 42) & 0x3000000000000000;
      *(void *)(result + 160) = 0;
      *(void *)(result + 168) = (v3 << 40) & 0x3000000000000000;
      *(void *)(result + 176) = 0;
      *(void *)(result + 184) = 0;
      *(void *)(result + 200) = 0;
      *(void *)(result + 208) = 0;
      *(void *)(result + 192) = (v3 >> 14) & 0x3FF00;
      return result;
    }
    *(unsigned char *)(result + 216) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_100D1502C(uint64_t result, unsigned int a2)
{
  if (a2 < 5)
  {
    unint64_t v2 = *(void *)(result + 24) & 0xCFFFFFFFFFFFFFFFLL;
    unint64_t v3 = *(void *)(result + 40) & 0xCFFFFFFFFFFFFFFFLL;
    unint64_t v4 = *(void *)(result + 56) & 0xCFFFFFFFFFFFFFFFLL;
    unint64_t v5 = *(void *)(result + 72) & 0xCFFFFFFFFFFFFFFFLL;
    unint64_t v6 = *(void *)(result + 88) & 0xCFFFFFFFFFFFFFFFLL;
    unint64_t v7 = *(void *)(result + 104) & 0xCFFFFFFFFFFFFFFFLL;
    unint64_t v8 = *(void *)(result + 120) & 0xCFFFFFFFFFFFFFFFLL;
    unint64_t v9 = *(void *)(result + 136) & 0xCFFFFFFFFFFFFFFFLL;
    unint64_t v10 = *(void *)(result + 152) & 0xCFFFFFFFFFFFFFFFLL;
    unint64_t v11 = *(void *)(result + 168) & 0xCFFFFFFFFFFFFFFFLL;
    unint64_t v12 = (unint64_t)a2 >> 1;
    unint64_t v13 = *(unsigned __int8 *)(result + 192) | ((unint64_t)a2 << 63);
    unint64_t v14 = *(void *)(result + 208) & 0xCFFFFFFFFFFFFFFFLL | ((v12 & 3) << 60);
    *(void *)(result + 8) &= 0xCFFFFFFFFFFFFFFFLL;
    *(void *)(result + 24) = v2;
    *(void *)(result + 40) = v3;
    *(void *)(result + 56) = v4;
    *(void *)(result + 72) = v5;
    *(void *)(result + 88) = v6;
    *(void *)(result + 104) = v7;
    *(void *)(result + 120) = v8;
    *(void *)(result + 136) = v9;
    *(void *)(result + 152) = v10;
    *(void *)(result + 168) = v11;
    *(void *)(result + 192) = v13;
    *(void *)(result + 208) = v14;
  }
  else
  {
    *(void *)unint64_t result = a2 - 5;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(void *)(result + 184) = 0;
    *(_OWORD *)(result + 192) = xmmword_10134BFB0;
    *(void *)(result + 208) = 0x2000000000000000;
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsLEPairingCommand()
{
  return &type metadata for AirPodsLEPairingCommand;
}

uint64_t *sub_100D1513C@<X0>(uint64_t *a1@<X8>)
{
  sub_1001559B0(v1, (uint64_t)v50);
  sub_1001559B0((uint64_t)v50, (uint64_t)v52);
  sub_1001559B0(v1, (uint64_t)v51);
  switch(sub_100156F10((uint64_t)v51))
  {
    case 1u:
      uint64_t v11 = sub_100157BC4((uint64_t)v51);
      long long v44 = *(_OWORD *)(v11 + 16);
      long long v47 = *(_OWORD *)v11;
      long long v41 = *(_OWORD *)(v11 + 48);
      long long v42 = *(_OWORD *)(v11 + 32);
      uint64_t v12 = *(void *)(v11 + 64);
      uint64_t v13 = *(void *)(v11 + 72);
      a1[3] = (uint64_t)&type metadata for AirPodsLEInitiatePairingCommandPayload;
      a1[4] = sub_100062448();
      uint64_t v14 = swift_allocObject();
      *a1 = v14;
      *(_OWORD *)(v14 + 16) = v47;
      *(_OWORD *)(v14 + 32) = v44;
      *(_OWORD *)(v14 + 48) = v42;
      *(_OWORD *)(v14 + 64) = v41;
      *(void *)(v14 + 80) = v12;
      *(void *)(v14 + 88) = v13;
      sub_1001559B0((uint64_t)v52, (uint64_t)v49);
      long long v15 = (uint64_t *)sub_100157BC4((uint64_t)v49);
      uint64_t v16 = v15[2];
      unint64_t v17 = v15[3];
      uint64_t v18 = v15[4];
      unint64_t v19 = v15[5];
      uint64_t v20 = v15[6];
      unint64_t v21 = v15[7];
      uint64_t v22 = v15[8];
      unint64_t v23 = v15[9];
      sub_1000361E0(*v15, v15[1]);
      sub_1000361E0(v16, v17);
      sub_1000361E0(v18, v19);
      sub_1000361E0(v20, v21);
      return (uint64_t *)sub_1000361E0(v22, v23);
    case 2u:
      long long v24 = (const void *)sub_100157BC4((uint64_t)v51);
      a1[3] = (uint64_t)&type metadata for AirPodsLESendPairingDataCommandPayload;
      a1[4] = sub_100157AD4();
      uint64_t v25 = swift_allocObject();
      *a1 = v25;
      memmove((void *)(v25 + 16), v24, 0xD8uLL);
      sub_1001559B0((uint64_t)v52, (uint64_t)v49);
      long long v26 = (uint64_t *)sub_100157BC4((uint64_t)v49);
      return sub_100D16E00(v26, (void (*)(uint64_t, uint64_t))sub_1000361E0);
    case 3u:
      long long v27 = (const void *)sub_100157BC4((uint64_t)v51);
      a1[3] = (uint64_t)&type metadata for AirPodsLEFinalizePairingCommandPayload;
      a1[4] = sub_1001578B4();
      uint64_t v28 = swift_allocObject();
      *a1 = v28;
      memmove((void *)(v28 + 16), v27, 0xC0uLL);
      sub_1001559B0((uint64_t)v52, (uint64_t)v49);
      unint64_t v29 = (uint64_t *)sub_100157BC4((uint64_t)v49);
      return sub_100D16C08(v29, (void (*)(uint64_t, uint64_t))sub_1000361E0, (void (*)(uint64_t, uint64_t))sub_100037A38);
    case 4u:
      uint64_t v30 = sub_100157BC4((uint64_t)v51);
      long long v45 = *(_OWORD *)(v30 + 16);
      long long v48 = *(_OWORD *)v30;
      long long v43 = *(_OWORD *)(v30 + 32);
      uint64_t v31 = *(void *)(v30 + 48);
      uint64_t v32 = *(void *)(v30 + 56);
      a1[3] = (uint64_t)&type metadata for AirPodsLESendPairingStatusCommandPayload;
      a1[4] = sub_10015785C();
      uint64_t v33 = swift_allocObject();
      *a1 = v33;
      *(_OWORD *)(v33 + 16) = v48;
      *(_OWORD *)(v33 + 32) = v45;
      *(_OWORD *)(v33 + 48) = v43;
      *(void *)(v33 + 64) = v31;
      *(void *)(v33 + 72) = v32;
      sub_1001559B0((uint64_t)v52, (uint64_t)v49);
      uint64_t v34 = (uint64_t *)sub_100157BC4((uint64_t)v49);
      uint64_t v35 = v34[2];
      unint64_t v36 = v34[3];
      uint64_t v37 = v34[4];
      unint64_t v38 = v34[5];
      uint64_t v39 = v34[6];
      unint64_t v40 = v34[7];
      sub_1000361E0(*v34, v34[1]);
      sub_1000361E0(v35, v36);
      sub_1000361E0(v37, v38);
      return (uint64_t *)sub_1000361E0(v39, v40);
    case 5u:
      a1[3] = (uint64_t)&type metadata for AccessoryGenericPayload;
      unint64_t result = (uint64_t *)sub_10006258C();
      goto LABEL_10;
    case 6u:
      a1[3] = (uint64_t)&type metadata for AirPodsPairingCompleteCommandPayload;
      unint64_t result = (uint64_t *)sub_100157808();
      goto LABEL_10;
    case 7u:
      a1[3] = (uint64_t)&type metadata for UnpairCommandPayload;
      unint64_t result = (uint64_t *)sub_100062118();
LABEL_10:
      a1[4] = (uint64_t)result;
      break;
    default:
      uint64_t v3 = sub_100157BC4((uint64_t)v51);
      long long v46 = *(_OWORD *)v3;
      uint64_t v4 = *(void *)(v3 + 16);
      uint64_t v5 = *(void *)(v3 + 24);
      a1[3] = (uint64_t)&type metadata for AirPodsSendBeaconGroupDataCommandPayload;
      a1[4] = sub_1000624F4();
      uint64_t v6 = swift_allocObject();
      *a1 = v6;
      *(_OWORD *)(v6 + 16) = v46;
      *(void *)(v6 + 32) = v4;
      *(void *)(v6 + 40) = v5;
      sub_1001559B0((uint64_t)v52, (uint64_t)v49);
      unint64_t v7 = (uint64_t *)sub_100157BC4((uint64_t)v49);
      uint64_t v8 = v7[2];
      unint64_t v9 = v7[3];
      sub_1000361E0(*v7, v7[1]);
      unint64_t result = (uint64_t *)sub_1000361E0(v8, v9);
      break;
  }
  return result;
}

ValueMetadata *sub_100D15544(char a1)
{
  switch(a1)
  {
    case 1:
      uint64_t v1 = &type metadata for AirPodsSendBeaconGroupDataCommandPayload;
      sub_1000624F4();
      break;
    case 2:
      uint64_t v1 = &type metadata for AirPodsLEInitiatePairingCommandPayload;
      sub_100062448();
      break;
    case 3:
      uint64_t v1 = &type metadata for AirPodsLESendPairingDataCommandPayload;
      sub_100157AD4();
      break;
    case 4:
      uint64_t v1 = &type metadata for AirPodsLEFinalizePairingCommandPayload;
      sub_1001578B4();
      break;
    case 5:
      uint64_t v1 = &type metadata for AirPodsLESendPairingStatusCommandPayload;
      sub_10015785C();
      break;
    case 6:
      uint64_t v1 = &type metadata for AirPodsPairingCompleteCommandPayload;
      sub_100157808();
      break;
    case 7:
      uint64_t v1 = &type metadata for UnpairCommandPayload;
      sub_100062118();
      break;
    default:
      uint64_t v1 = &type metadata for AccessoryGenericPayload;
      sub_10006258C();
      break;
  }
  return v1;
}

uint64_t sub_100D15628(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for Endianness();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryEncoding.container()();
  sub_1001559B0(v3, (uint64_t)v75);
  int v9 = sub_100156F10((uint64_t)v75);
  __int16 v10 = 260;
  switch(v9)
  {
    case 1:
      sub_100157BC4((uint64_t)v75);
      __int16 v10 = 256;
      break;
    case 2:
      sub_100157BC4((uint64_t)v75);
      __int16 v10 = 257;
      break;
    case 3:
      sub_100157BC4((uint64_t)v75);
      __int16 v10 = 258;
      break;
    case 4:
      sub_100157BC4((uint64_t)v75);
      __int16 v10 = 259;
      break;
    case 5:
      __int16 v10 = 267;
      break;
    case 6:
      break;
    case 7:
      __int16 v10 = 516;
      break;
    default:
      sub_100157BC4((uint64_t)v75);
      __int16 v10 = 268;
      break;
  }
  LOWORD(v43) = v10;
  static Endianness.current.getter();
  sub_100179818();
  FixedWidthInteger.convert(to:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  LOWORD(v43) = v57;
  sub_1000BD078((uint64_t)v72, v73);
  dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
  if (!v2)
  {
    sub_1001559B0(v3, (uint64_t)v74);
    switch(sub_100156F10((uint64_t)v74))
    {
      case 1u:
        sub_100157BC4((uint64_t)v74);
        sub_100D1513C((uint64_t *)&v43);
        sub_10000588C(&qword_101639B68);
        if (!swift_dynamicCast()) {
          goto LABEL_30;
        }
        long long v15 = v57;
        unsigned long long v16 = v58;
        unint64_t v24 = *((void *)&v59 + 1);
        uint64_t v25 = v59;
        unint64_t v26 = *((void *)&v60 + 1);
        uint64_t v27 = v60;
        unint64_t v28 = *((void *)&v61 + 1);
        uint64_t v76 = v61;
        sub_1000BD078((uint64_t)v72, v73);
        sub_10033C1D4();
        dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
        sub_10001CFB8(v15, *((unint64_t *)&v15 + 1));
        sub_10001CFB8(v16, *((unint64_t *)&v16 + 1));
        unint64_t v18 = v24;
        uint64_t v17 = v25;
        goto LABEL_21;
      case 2u:
        sub_100157BC4((uint64_t)v74);
        sub_100D1513C(v71);
        sub_10000588C(&qword_101639B68);
        if (!swift_dynamicCast()) {
          goto LABEL_30;
        }
        long long v53 = v67;
        long long v54 = v68;
        long long v55 = v69;
        long long v49 = v63;
        long long v50 = v64;
        long long v51 = v65;
        long long v52 = v66;
        long long v45 = v59;
        long long v46 = v60;
        long long v47 = v61;
        long long v48 = v62;
        long long v43 = v57;
        unsigned long long v44 = v58;
        long long v39 = v67;
        long long v40 = v68;
        long long v41 = v69;
        long long v35 = v63;
        long long v36 = v64;
        long long v37 = v65;
        long long v38 = v66;
        long long v31 = v59;
        long long v32 = v60;
        long long v33 = v61;
        long long v34 = v62;
        uint64_t v56 = v70;
        uint64_t v42 = v70;
        long long v29 = v57;
        unsigned long long v30 = v58;
        sub_1000BD078((uint64_t)v72, v73);
        sub_1003BD1C0();
        dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
        sub_100D16E00((uint64_t *)&v43, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
        return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v72);
      case 3u:
        sub_100157BC4((uint64_t)v74);
        sub_100D1513C(v71);
        sub_10000588C(&qword_101639B68);
        if (!swift_dynamicCast()) {
          goto LABEL_30;
        }
        long long v51 = v65;
        long long v52 = v66;
        long long v53 = v67;
        long long v54 = v68;
        long long v47 = v61;
        long long v48 = v62;
        long long v49 = v63;
        long long v50 = v64;
        long long v43 = v57;
        unsigned long long v44 = v58;
        long long v45 = v59;
        long long v46 = v60;
        long long v37 = v65;
        long long v38 = v66;
        long long v39 = v67;
        long long v40 = v68;
        long long v33 = v61;
        long long v34 = v62;
        long long v35 = v63;
        long long v36 = v64;
        long long v29 = v57;
        unsigned long long v30 = v58;
        long long v31 = v59;
        long long v32 = v60;
        sub_1000BD078((uint64_t)v72, v73);
        sub_1001359F0();
        dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
        sub_100D16C08((uint64_t *)&v43, (void (*)(uint64_t, uint64_t))sub_10001CFB8, (void (*)(uint64_t, uint64_t))sub_100037A24);
        return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v72);
      case 4u:
        sub_100157BC4((uint64_t)v74);
        sub_100D1513C((uint64_t *)&v43);
        sub_10000588C(&qword_101639B68);
        if (!swift_dynamicCast()) {
          goto LABEL_30;
        }
        long long v19 = v57;
        unsigned long long v20 = v58;
        unint64_t v26 = *((void *)&v59 + 1);
        uint64_t v27 = v59;
        unint64_t v28 = *((void *)&v60 + 1);
        uint64_t v76 = v60;
        sub_1000BD078((uint64_t)v72, v73);
        sub_1008B81B4();
        dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
        sub_10001CFB8(v19, *((unint64_t *)&v19 + 1));
        unint64_t v18 = v20 >> 64;
        uint64_t v17 = v20;
LABEL_21:
        sub_10001CFB8(v17, v18);
        sub_10001CFB8(v27, v26);
        uint64_t v13 = v76;
        unint64_t v14 = v28;
        goto LABEL_22;
      case 5u:
        sub_100D1513C((uint64_t *)&v57);
        sub_10000588C(&qword_101639B68);
        if (!swift_dynamicCast()) {
          goto LABEL_30;
        }
        sub_1000BD078((uint64_t)v72, v73);
        sub_1002A576C();
        goto LABEL_29;
      case 6u:
        sub_100D1513C((uint64_t *)&v57);
        sub_10000588C(&qword_101639B68);
        if (!swift_dynamicCast()) {
          goto LABEL_30;
        }
        sub_1000BD078((uint64_t)v72, v73);
        sub_100A38DD8();
        goto LABEL_29;
      case 7u:
        sub_100D1513C((uint64_t *)&v57);
        sub_10000588C(&qword_101639B68);
        if (!swift_dynamicCast()) {
          goto LABEL_30;
        }
        sub_1000BD078((uint64_t)v72, v73);
        sub_1001E2D8C();
LABEL_29:
        dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
        break;
      default:
        sub_100157BC4((uint64_t)v74);
        sub_100D1513C((uint64_t *)&v57);
        sub_10000588C(&qword_101639B68);
        if (swift_dynamicCast())
        {
          long long v11 = v43;
          unsigned long long v12 = v44;
          long long v57 = v43;
          unsigned long long v58 = v44;
          sub_1000BD078((uint64_t)v72, v73);
          sub_10033C228();
          dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
          sub_10001CFB8(v11, *((unint64_t *)&v11 + 1));
          unint64_t v14 = v12 >> 64;
          uint64_t v13 = v12;
LABEL_22:
          sub_10001CFB8(v13, v14);
        }
        else
        {
LABEL_30:
          sub_100D16894();
          swift_allocError();
          *unint64_t v21 = 0;
          swift_willThrow();
        }
        break;
    }
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v72);
}

uint64_t sub_100D15EE0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100D16518(a1, (uint64_t)v5);
  if (!v2) {
    return sub_1001559B0((uint64_t)v5, a2);
  }
  return result;
}

uint64_t sub_100D15F28(void *a1)
{
  sub_1001559B0(v1, (uint64_t)v4);
  return sub_100D15628(a1);
}

uint64_t sub_100D15F78(unsigned __int16 a1)
{
  int v1 = a1;
  int v2 = a1 - 256;
  uint64_t result = 1;
  switch(v2)
  {
    case 0:
      uint64_t result = 2;
      break;
    case 1:
      uint64_t result = 3;
      break;
    case 2:
      uint64_t result = 4;
      break;
    case 3:
      uint64_t result = 5;
      break;
    case 4:
      uint64_t result = 6;
      break;
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      goto LABEL_5;
    case 11:
      uint64_t result = 0;
      break;
    case 12:
      return result;
    default:
      if (v1 == 516) {
        uint64_t result = 7;
      }
      else {
LABEL_5:
      }
        uint64_t result = 8;
      break;
  }
  return result;
}

uint64_t sub_100D16028@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_10001D010(a2, (uint64_t)v63);
  uint64_t v6 = sub_100D15544(a1);
  sub_10001CD44(v63, v63[3]);
  uint64_t DynamicType = swift_getDynamicType();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v63);
  if (v6 != (ValueMetadata *)DynamicType)
  {
    __break(1u);
    JUMPOUT(0x100D164F8);
  }
  switch(a1)
  {
    case 1:
      sub_10001D010(a2, (uint64_t)&v34);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_21;
      }
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      long long v49 = v20;
      long long v50 = v21;
      sub_100D16A7C((uint64_t)&v49);
      goto LABEL_19;
    case 2:
      sub_10001D010(a2, (uint64_t)&v20);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_21;
      }
      long long v16 = v35;
      long long v18 = v34;
      long long v13 = v37;
      long long v14 = v36;
      long long v8 = v38;
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      long long v49 = v18;
      long long v50 = v16;
      long long v51 = v14;
      long long v52 = v13;
      long long v53 = v8;
      sub_100157E4C((uint64_t)&v49);
      goto LABEL_19;
    case 3:
      sub_10001D010(a2, (uint64_t)v48);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_21;
      }
      long long v30 = v59;
      long long v31 = v60;
      long long v32 = v61;
      uint64_t v33 = v62;
      long long v26 = v55;
      long long v27 = v56;
      long long v28 = v57;
      long long v29 = v58;
      long long v22 = v51;
      long long v23 = v52;
      long long v24 = v53;
      long long v25 = v54;
      long long v20 = v49;
      long long v21 = v50;
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      long long v44 = v30;
      long long v45 = v31;
      long long v46 = v32;
      uint64_t v47 = v33;
      long long v40 = v26;
      long long v41 = v27;
      long long v42 = v28;
      long long v43 = v29;
      long long v36 = v22;
      long long v37 = v23;
      long long v38 = v24;
      long long v39 = v25;
      long long v34 = v20;
      long long v35 = v21;
      sub_100D169DC((uint64_t)&v34);
      int v9 = &v34;
      goto LABEL_20;
    case 4:
      sub_10001D010(a2, (uint64_t)v48);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_21;
      }
      long long v28 = v42;
      long long v29 = v43;
      long long v30 = v44;
      long long v31 = v45;
      long long v24 = v38;
      long long v25 = v39;
      long long v26 = v40;
      long long v27 = v41;
      long long v20 = v34;
      long long v21 = v35;
      long long v22 = v36;
      long long v23 = v37;
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      long long v57 = v42;
      long long v58 = v43;
      long long v59 = v44;
      long long v60 = v45;
      long long v53 = v38;
      long long v54 = v39;
      long long v55 = v40;
      long long v56 = v41;
      long long v49 = v34;
      long long v50 = v35;
      long long v51 = v36;
      long long v52 = v37;
      sub_10015641C((uint64_t)&v49);
      goto LABEL_19;
    case 5:
      sub_10001D010(a2, (uint64_t)&v20);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_21;
      }
      long long v17 = v35;
      long long v19 = v34;
      long long v15 = v36;
      long long v10 = v37;
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      long long v49 = v19;
      long long v50 = v17;
      long long v51 = v15;
      long long v52 = v10;
      sub_100D1693C((uint64_t)&v49);
      goto LABEL_19;
    case 6:
      sub_10001D010(a2, (uint64_t)&v34);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_21;
      }
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      sub_10015729C((uint64_t)&v49);
      goto LABEL_19;
    case 7:
      sub_10001D010(a2, (uint64_t)&v34);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_21;
      }
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      sub_100D168E8((uint64_t)&v49);
      goto LABEL_19;
    default:
      sub_10001D010(a2, (uint64_t)&v34);
      sub_10000588C(&qword_101639B68);
      if (swift_dynamicCast())
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
        sub_1001580A4((uint64_t)&v49);
LABEL_19:
        int v9 = &v49;
LABEL_20:
        sub_1001559B0((uint64_t)v9, (uint64_t)v64);
        return sub_1001559B0((uint64_t)v64, a3);
      }
      else
      {
LABEL_21:
        sub_100D16894();
        swift_allocError();
        *unsigned long long v12 = 0;
        swift_willThrow();
        return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      }
  }
}

uint64_t sub_100D16518@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v28 = a2;
  uint64_t v4 = type metadata accessor for Endianness();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = a1[3];
  long long v29 = a1;
  sub_10001CD44(a1, v8);
  dispatch thunk of BinaryDecoding.container()();
  sub_1000BD078((uint64_t)v32, v32[3]);
  sub_100179818();
  dispatch thunk of BinaryDecodingContaining.decode<A>(_:)();
  if (v2)
  {
    uint64_t v9 = (uint64_t)v29;
  }
  else
  {
    uint64_t v10 = v28;
    v33[119] = v30[0];
    static Endianness.current.getter();
    FixedWidthInteger.convert(to:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    __int16 v11 = v31[0];
    char v12 = sub_100D15F78(v31[0]);
    if (v12 != 8)
    {
      char v21 = v12;
      long long v22 = sub_100D15544(v12);
      uint64_t v24 = v23;
      uint64_t v25 = (uint64_t)v29;
      sub_10001D010((uint64_t)v29, (uint64_t)v30);
      v31[3] = (uint64_t)v22;
      v31[4] = v24;
      sub_10001D958(v31);
      dispatch thunk of BinaryDecodable.init(from:)();
      sub_10001D010((uint64_t)v31, (uint64_t)v30);
      sub_100D16028(v21, (uint64_t)v30, (uint64_t)v33);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v31);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v32);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v25);
      return sub_1001559B0((uint64_t)v33, v10);
    }
    static os_log_type_t.error.getter();
    uint64_t v9 = (uint64_t)v29;
    if (qword_101637308 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_101342130;
    LOWORD(v31[0]) = v11;
    uint64_t v14 = FixedWidthInteger.data.getter();
    unint64_t v16 = v15;
    uint64_t v17 = Data.hexString.getter();
    uint64_t v19 = v18;
    sub_10001CFB8(v14, v16);
    *(void *)(v13 + 56) = &type metadata for String;
    *(void *)(v13 + 64) = sub_10000B4CC();
    *(void *)(v13 + 32) = v17;
    *(void *)(v13 + 40) = v19;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    sub_100D16894();
    swift_allocError();
    *long long v20 = 1;
    swift_willThrow();
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v32);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v9);
}

unint64_t sub_100D16894()
{
  unint64_t result = qword_10165DC30;
  if (!qword_10165DC30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165DC30);
  }
  return result;
}

double sub_100D168E8(uint64_t a1)
{
  *(void *)a1 = 2;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(void *)(a1 + 184) = 0;
  double result = -0.0;
  *(_OWORD *)(a1 + 192) = xmmword_10134BFB0;
  *(void *)(a1 + 208) = 0x2000000000000000;
  return result;
}

uint64_t sub_100D1693C(uint64_t result)
{
  uint64_t v1 = *(unsigned __int8 *)(result + 192);
  unint64_t v2 = *(void *)(result + 24) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v3 = *(void *)(result + 40) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v4 = *(void *)(result + 56) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v5 = *(void *)(result + 72) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v6 = *(void *)(result + 88) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v7 = *(void *)(result + 104) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v8 = *(void *)(result + 120) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v9 = *(void *)(result + 136) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v10 = *(void *)(result + 152) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v11 = *(void *)(result + 168) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v12 = *(void *)(result + 208) & 0xCFFFFFFFFFFFFFFFLL | 0x2000000000000000;
  *(void *)(result + 8) &= 0xCFFFFFFFFFFFFFFFLL;
  *(void *)(result + 24) = v2;
  *(void *)(result + 40) = v3;
  *(void *)(result + 56) = v4;
  *(void *)(result + 72) = v5;
  *(void *)(result + 88) = v6;
  *(void *)(result + 104) = v7;
  *(void *)(result + 120) = v8;
  *(void *)(result + 136) = v9;
  *(void *)(result + 152) = v10;
  *(void *)(result + 168) = v11;
  *(void *)(result + 192) = v1;
  *(void *)(result + 208) = v12;
  return result;
}

uint64_t sub_100D169DC(uint64_t result)
{
  uint64_t v1 = *(unsigned __int8 *)(result + 192);
  unint64_t v2 = *(void *)(result + 24) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v3 = *(void *)(result + 40) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v4 = *(void *)(result + 56) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v5 = *(void *)(result + 72) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v6 = *(void *)(result + 88) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v7 = *(void *)(result + 104) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v8 = *(void *)(result + 120) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v9 = *(void *)(result + 136) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v10 = *(void *)(result + 152) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v11 = *(void *)(result + 168) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v12 = *(void *)(result + 208) & 0xCFFFFFFFFFFFFFFFLL | 0x1000000000000000;
  *(void *)(result + 8) &= 0xCFFFFFFFFFFFFFFFLL;
  *(void *)(result + 24) = v2;
  *(void *)(result + 40) = v3;
  *(void *)(result + 56) = v4;
  *(void *)(result + 72) = v5;
  *(void *)(result + 88) = v6;
  *(void *)(result + 104) = v7;
  *(void *)(result + 120) = v8;
  *(void *)(result + 136) = v9;
  *(void *)(result + 152) = v10;
  *(void *)(result + 168) = v11;
  *(void *)(result + 192) = v1;
  *(void *)(result + 208) = v12;
  return result;
}

uint64_t sub_100D16A7C(uint64_t result)
{
  uint64_t v1 = *(unsigned __int8 *)(result + 192);
  unint64_t v2 = *(void *)(result + 24) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v3 = *(void *)(result + 40) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v4 = *(void *)(result + 56) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v5 = *(void *)(result + 72) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v6 = *(void *)(result + 88) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v7 = *(void *)(result + 104) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v8 = *(void *)(result + 120) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v9 = *(void *)(result + 136) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v10 = *(void *)(result + 152) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v11 = *(void *)(result + 168) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v12 = *(void *)(result + 208) & 0xCFFFFFFFFFFFFFFFLL;
  *(void *)(result + 8) &= 0xCFFFFFFFFFFFFFFFLL;
  *(void *)(result + 24) = v2;
  *(void *)(result + 40) = v3;
  *(void *)(result + 56) = v4;
  *(void *)(result + 72) = v5;
  *(void *)(result + 88) = v6;
  *(void *)(result + 104) = v7;
  *(void *)(result + 120) = v8;
  *(void *)(result + 136) = v9;
  *(void *)(result + 152) = v10;
  *(void *)(result + 168) = v11;
  *(void *)(result + 192) = v1;
  *(void *)(result + 208) = v12;
  return result;
}

uint64_t sub_100D16B18()
{
  sub_10001CFB8(*(void *)(v0 + 16), *(void *)(v0 + 24));
  sub_10001CFB8(*(void *)(v0 + 32), *(void *)(v0 + 40));
  sub_10001CFB8(*(void *)(v0 + 48), *(void *)(v0 + 56));
  sub_10001CFB8(*(void *)(v0 + 64), *(void *)(v0 + 72));

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_100D16B68()
{
  sub_10001CFB8(v0[2], v0[3]);
  sub_10001CFB8(v0[4], v0[5]);
  sub_10001CFB8(v0[6], v0[7]);
  sub_10001CFB8(v0[8], v0[9]);
  sub_10001CFB8(v0[10], v0[11]);
  sub_10001CFB8(v0[12], v0[13]);
  sub_10001CFB8(v0[14], v0[15]);
  sub_10001CFB8(v0[16], v0[17]);
  sub_10001CFB8(v0[18], v0[19]);
  sub_10001CFB8(v0[20], v0[21]);
  sub_10001CFB8(v0[22], v0[23]);
  unint64_t v1 = v0[25];
  if (v1 >> 60 != 15) {
    sub_10001CFB8(v0[24], v1);
  }

  return _swift_deallocObject(v0, 208, 7);
}

uint64_t *sub_100D16C08(uint64_t *a1, void (*a2)(uint64_t, uint64_t), void (*a3)(uint64_t, uint64_t))
{
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  uint64_t v8 = a1[5];
  uint64_t v9 = a1[6];
  uint64_t v10 = a1[7];
  uint64_t v11 = a1[8];
  uint64_t v12 = a1[9];
  uint64_t v14 = a1[11];
  uint64_t v15 = a1[10];
  uint64_t v16 = a1[13];
  uint64_t v17 = a1[12];
  uint64_t v18 = a1[15];
  uint64_t v19 = a1[14];
  uint64_t v20 = a1[17];
  uint64_t v21 = a1[16];
  uint64_t v22 = a1[19];
  uint64_t v23 = a1[18];
  uint64_t v24 = a1[21];
  uint64_t v25 = a1[20];
  uint64_t v27 = a1[22];
  uint64_t v26 = a1[23];
  a2(*a1, a1[1]);
  a2(v5, v6);
  a2(v7, v8);
  a2(v9, v10);
  a2(v11, v12);
  a2(v15, v14);
  a2(v17, v16);
  a2(v19, v18);
  a2(v21, v20);
  a2(v23, v22);
  a2(v25, v24);
  a3(v27, v26);
  return a1;
}

uint64_t sub_100D16D68()
{
  sub_10001CFB8(*(void *)(v0 + 16), *(void *)(v0 + 24));
  sub_10001CFB8(*(void *)(v0 + 32), *(void *)(v0 + 40));
  sub_10001CFB8(*(void *)(v0 + 48), *(void *)(v0 + 56));
  sub_10001CFB8(*(void *)(v0 + 64), *(void *)(v0 + 72));
  sub_10001CFB8(*(void *)(v0 + 80), *(void *)(v0 + 88));
  sub_10001CFB8(*(void *)(v0 + 96), *(void *)(v0 + 104));
  sub_10001CFB8(*(void *)(v0 + 112), *(void *)(v0 + 120));
  sub_10001CFB8(*(void *)(v0 + 128), *(void *)(v0 + 136));
  sub_10001CFB8(*(void *)(v0 + 144), *(void *)(v0 + 152));
  sub_10001CFB8(*(void *)(v0 + 160), *(void *)(v0 + 168));
  sub_10001CFB8(*(void *)(v0 + 176), *(void *)(v0 + 184));
  sub_10001CFB8(*(void *)(v0 + 192), *(void *)(v0 + 200));
  sub_10001CFB8(*(void *)(v0 + 216), *(void *)(v0 + 224));

  return _swift_deallocObject(v0, 232, 7);
}

uint64_t *sub_100D16E00(uint64_t *a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v8 = a1[5];
  uint64_t v7 = a1[6];
  uint64_t v9 = a1[7];
  uint64_t v10 = a1[8];
  uint64_t v11 = a1[9];
  uint64_t v13 = a1[11];
  uint64_t v14 = a1[10];
  uint64_t v15 = a1[13];
  uint64_t v16 = a1[12];
  uint64_t v17 = a1[15];
  uint64_t v18 = a1[14];
  uint64_t v19 = a1[17];
  uint64_t v20 = a1[16];
  uint64_t v21 = a1[19];
  uint64_t v22 = a1[18];
  uint64_t v23 = a1[21];
  uint64_t v24 = a1[20];
  uint64_t v25 = a1[23];
  uint64_t v26 = a1[22];
  uint64_t v27 = a1[26];
  uint64_t v28 = a1[25];
  a2(*a1, a1[1]);
  a2(v4, v5);
  a2(v6, v8);
  a2(v7, v9);
  a2(v10, v11);
  a2(v14, v13);
  a2(v16, v15);
  a2(v18, v17);
  a2(v20, v19);
  a2(v22, v21);
  a2(v24, v23);
  a2(v26, v25);
  a2(v28, v27);
  return a1;
}

uint64_t sub_100D16F6C()
{
  sub_10001CFB8(*(void *)(v0 + 16), *(void *)(v0 + 24));
  sub_10001CFB8(*(void *)(v0 + 32), *(void *)(v0 + 40));
  sub_10001CFB8(*(void *)(v0 + 48), *(void *)(v0 + 56));
  sub_10001CFB8(*(void *)(v0 + 64), *(void *)(v0 + 72));
  sub_10001CFB8(*(void *)(v0 + 80), *(void *)(v0 + 88));

  return _swift_deallocObject(v0, 96, 7);
}

uint64_t sub_100D16FC4()
{
  sub_10001CFB8(*(void *)(v0 + 16), *(void *)(v0 + 24));
  sub_10001CFB8(*(void *)(v0 + 32), *(void *)(v0 + 40));

  return _swift_deallocObject(v0, 48, 7);
}

unsigned char *storeEnumTagSinglePayload for AirPodsLEPairingCommand.AccessoryPairingCommandError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *double result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100D170D0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsLEPairingCommand.AccessoryPairingCommandError()
{
  return &type metadata for AirPodsLEPairingCommand.AccessoryPairingCommandError;
}

unint64_t sub_100D1710C()
{
  unint64_t result = qword_10165DC38;
  if (!qword_10165DC38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165DC38);
  }
  return result;
}

uint64_t sub_100D17160@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v88 = (char *)v81 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (int *)type metadata accessor for AccessoryMetadata(0);
  uint64_t v8 = (uint64_t *)*((void *)v7 - 1);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v81 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_10001CD44(a1, v11);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 168))(v11, v12);
  if (v14 >> 60 == 15)
  {
    if (qword_101637420 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_100010324(v15, (uint64_t)qword_10170F1E8);
    sub_10001D010((uint64_t)a1, (uint64_t)v94);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = swift_slowAlloc();
      uint64_t v87 = a2;
      uint64_t v19 = v18;
      uint64_t v85 = swift_slowAlloc();
      v90[0] = v85;
      *(_DWORD *)uint64_t v19 = 141558275;
      uint64_t v93 = 1752392040;
      BOOL v84 = v94;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v19 + 12) = 2081;
      uint64_t v83 = v19 + 14;
      uint64_t v86 = v8;
      uint64_t v21 = v95;
      uint64_t v20 = v96;
      sub_10001CD44(v94, v95);
      uint64_t v22 = v88;
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v20 + 8) + 8) + 32))(v21);
      sub_10028B80C();
      uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v25 = v24;
      (*(void (**)(char *, uint64_t))(v5 + 8))(v22, v4);
      uint64_t v93 = sub_1008FA0F0(v23, v25, v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v8 = v86;
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v94);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "No productData for %{private,mask.hash}s", (uint8_t *)v19, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      a2 = v87;
      swift_slowDealloc();
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v94);
    }

LABEL_10:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))v8[7])(a2, 1, 1, v7);
  }
  unint64_t v26 = v14;
  uint64_t v87 = v5;
  uint64_t v27 = v4;
  uint64_t v85 = v13;
  uint64_t v28 = a1[3];
  uint64_t v29 = a1[4];
  sub_10001CD44(a1, v28);
  uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 24))(v28, v29);
  unint64_t v32 = sub_1009CDB04(v30, v31);
  if ((v32 & 0x100000000) != 0)
  {
    uint64_t v42 = a1[3];
    uint64_t v43 = a1[4];
    sub_10001CD44(a1, v42);
    uint64_t v44 = (*(uint64_t (**)(uint64_t, uint64_t))(v43 + 24))(v42, v43);
    uint64_t v46 = sub_100BBAF68(v44, v45);
    if (v48)
    {
      if (qword_101637420 != -1) {
        swift_once();
      }
      uint64_t v63 = type metadata accessor for Logger();
      sub_100010324(v63, (uint64_t)qword_10170F1E8);
      sub_10001D010((uint64_t)a1, (uint64_t)v94);
      sub_10001D010((uint64_t)a1, (uint64_t)v90);
      long long v64 = Logger.logObject.getter();
      os_log_type_t v65 = static os_log_type_t.default.getter();
      int v66 = v65;
      if (os_log_type_enabled(v64, v65))
      {
        uint64_t v67 = swift_slowAlloc();
        BOOL v84 = (void *)swift_slowAlloc();
        uint64_t v93 = (uint64_t)v84;
        *(_DWORD *)uint64_t v67 = 141558531;
        uint64_t v89 = 1752392040;
        uint64_t v86 = v90;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v67 + 12) = 2081;
        v81[1] = v67 + 14;
        os_log_t v82 = v64;
        LODWORD(v83) = v66;
        uint64_t v69 = v95;
        uint64_t v68 = v96;
        sub_10001CD44(v94, v95);
        uint64_t v70 = v88;
        (*(void (**)(uint64_t))(*(void *)(*(void *)(v68 + 8) + 8) + 32))(v69);
        sub_10028B80C();
        uint64_t v71 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v73 = v72;
        (*(void (**)(char *, uint64_t))(v87 + 8))(v70, v27);
        uint64_t v89 = sub_1008FA0F0(v71, v73, &v93);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v94);
        *(_WORD *)(v67 + 22) = 2082;
        uint64_t v74 = v8;
        uint64_t v75 = v91;
        uint64_t v76 = v92;
        sub_10001CD44(v90, v91);
        uint64_t v77 = v75;
        uint64_t v8 = v74;
        uint64_t v78 = (*(uint64_t (**)(uint64_t, uint64_t))(v76 + 24))(v77, v76);
        uint64_t v89 = sub_1008FA0F0(v78, v79, &v93);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v90);
        os_log_t v80 = v82;
        _os_log_impl((void *)&_mh_execute_header, v82, (os_log_type_t)v83, "Invalid FW version for %{private,mask.hash}s %{public}s", (uint8_t *)v67, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        sub_100037A24(v85, v26);
      }
      else
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v94);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v90);
        sub_100037A24(v85, v26);
      }
      goto LABEL_10;
    }
    uint64_t v49 = v46;
    uint64_t v50 = v47;
    uint64_t v86 = v8;
    uint64_t v87 = a2;
    uint64_t v52 = a1[3];
    uint64_t v51 = a1[4];
    sub_10001CD44(a1, v52);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v51 + 8) + 8) + 32))(v52);
    LOBYTE(v34) = 0;
    LOBYTE(a2) = 0;
    uint64_t v53 = v7[10];
    long long v54 = &v10[v7[15]];
    *(void *)long long v54 = 0;
    *((void *)v54 + 1) = 0xE000000000000000;
    long long v55 = &v10[v53];
    long long v56 = &v10[v7[5]];
    *(void *)long long v56 = v85;
    *((void *)v56 + 1) = v26;
    *(void *)long long v55 = v49;
    *((void *)v55 + 1) = v50;
    v55[16] = 0;
    long long v40 = &v10[v7[8]];
    *(_WORD *)long long v40 = 0;
  }
  else
  {
    __int16 v33 = v32;
    uint64_t v86 = v8;
    uint64_t v87 = a2;
    unint64_t v34 = v32 >> 16;
    a2 = v32 >> 24;
    uint64_t v36 = a1[3];
    uint64_t v35 = a1[4];
    sub_10001CD44(a1, v36);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v35 + 8) + 8) + 32))(v36);
    long long v37 = &v10[v7[10]];
    *(void *)long long v37 = 0;
    *((void *)v37 + 1) = 0;
    v37[16] = 1;
    long long v38 = &v10[v7[15]];
    *(void *)long long v38 = 0;
    *((void *)v38 + 1) = 0xE000000000000000;
    long long v39 = &v10[v7[5]];
    *(void *)long long v39 = v85;
    *((void *)v39 + 1) = v26;
    long long v40 = &v10[v7[8]];
    *(_WORD *)long long v40 = v33;
  }
  v40[2] = v34;
  v40[3] = a2;
  long long v57 = &v10[v7[7]];
  *(void *)long long v57 = 0;
  *((void *)v57 + 1) = 0;
  long long v58 = &v10[v7[6]];
  *(void *)long long v58 = 0;
  *((void *)v58 + 1) = 0;
  long long v59 = &v10[v7[9]];
  *(_DWORD *)long long v59 = 0;
  v59[4] = 1;
  long long v60 = &v10[v7[11]];
  *(void *)long long v60 = 0;
  v60[8] = 1;
  long long v61 = &v10[v7[12]];
  *(_DWORD *)long long v61 = 0;
  v61[4] = 1;
  v10[v7[13]] = 4;
  v10[v7[14]] = 5;
  uint64_t v62 = v87;
  sub_100D179F0((uint64_t)v10, v87);
  ((void (*)(uint64_t, void, uint64_t, int *))v86[7])(v62, 0, 1, v7);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
}

uint64_t sub_100D179F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AccessoryMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for AccessoryBatteryTypeResponsePayload()
{
  return &type metadata for AccessoryBatteryTypeResponsePayload;
}

uint64_t sub_100D17A64@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_100D17B14(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

unint64_t sub_100D17A90(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100D17AC0();
  unint64_t result = sub_100573DD4();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100D17AC0()
{
  unint64_t result = qword_10165DC40;
  if (!qword_10165DC40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165DC40);
  }
  return result;
}

uint64_t sub_100D17B14(void *a1)
{
  uint64_t v3 = type metadata accessor for Endianness();
  __chkstk_darwin(v3 - 8);
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryDecoding.container()();
  uint64_t v4 = sub_1000BD078((uint64_t)v13, v14);
  uint64_t v5 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  if (!v1)
  {
    uint64_t v7 = v5;
    unint64_t v8 = v6;
    sub_1000361E0(v5, v6);
    static Endianness.current.getter();
    sub_10006145C();
    FixedWidthInteger.init(data:ofEndianness:)();
    if (v12 != 1)
    {
      uint64_t v4 = v11;
      sub_10001CFB8(v7, v8);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v13);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
      return v4;
    }
    uint64_t v4 = type metadata accessor for BinaryEncodingError();
    sub_10017986C();
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v4 - 8) + 104))(v9, enum case for BinaryEncodingError.encodingError(_:), v4);
    swift_willThrow();
    sub_10001CFB8(v7, v8);
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v13);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  return v4;
}

uint64_t *sub_100D17CE4(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_1000361E0(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a3[5];
    uint64_t v10 = (char *)a1 + v9;
    unsigned __int8 v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UUID();
    uint64_t v13 = *(void *)(v12 - 8);
    uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
    v14(v10, v11, v12);
    uint64_t v15 = a3[6];
    uint64_t v16 = (char *)a1 + v15;
    os_log_type_t v17 = (char *)a2 + v15;
    type metadata accessor for StableIdentifier();
    uint64_t v99 = v14;
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v20 = *((void *)v17 + 1);
        *(void *)uint64_t v16 = *(void *)v17;
        *((void *)v16 + 1) = v20;
        uint64_t v21 = *((void *)v17 + 3);
        *((void *)v16 + 2) = *((void *)v17 + 2);
        *((void *)v16 + 3) = v21;
        uint64_t v22 = *((void *)v17 + 5);
        *((void *)v16 + 4) = *((void *)v17 + 4);
        *((void *)v16 + 5) = v22;
        goto LABEL_8;
      case 2u:
        v14(v16, v17, v12);
        uint64_t v23 = (int *)sub_10000588C(&qword_1016555E0);
        uint64_t v24 = v23[12];
        unint64_t v25 = &v16[v24];
        unint64_t v26 = (uint64_t *)&v17[v24];
        uint64_t v28 = *v26;
        uint64_t v27 = v26[1];
        *(void *)unint64_t v25 = v28;
        *((void *)v25 + 1) = v27;
        uint64_t v29 = v23[16];
        uint64_t v30 = &v16[v29];
        uint64_t v31 = &v17[v29];
        uint64_t v98 = *((void *)v31 + 1);
        *(void *)uint64_t v30 = *(void *)v31;
        *((void *)v30 + 1) = v98;
        uint64_t v32 = v23[20];
        __int16 v33 = &v16[v32];
        unint64_t v34 = &v17[v32];
        uint64_t v35 = *((void *)v34 + 1);
        *(void *)__int16 v33 = *(void *)v34;
        *((void *)v33 + 1) = v35;
        *(_WORD *)&v16[v23[24]] = *(_WORD *)&v17[v23[24]];
        uint64_t v36 = v23[28];
        long long v37 = &v16[v36];
        long long v38 = &v17[v36];
        uint64_t v39 = *((void *)v38 + 1);
        *(void *)long long v37 = *(void *)v38;
        *((void *)v37 + 1) = v39;
        swift_bridgeObjectRetain();
        goto LABEL_8;
      case 3u:
        v14(v16, v17, v12);
        long long v40 = (int *)sub_10000588C((uint64_t *)&unk_1016565E0);
        uint64_t v41 = v40[12];
        uint64_t v42 = &v16[v41];
        uint64_t v43 = (uint64_t *)&v17[v41];
        uint64_t v45 = *v43;
        uint64_t v44 = v43[1];
        *(void *)uint64_t v42 = v45;
        *((void *)v42 + 1) = v44;
        uint64_t v46 = v40[16];
        uint64_t v47 = &v16[v46];
        char v48 = &v17[v46];
        uint64_t v49 = *((void *)v48 + 1);
        *(void *)uint64_t v47 = *(void *)v48;
        *((void *)v47 + 1) = v49;
        uint64_t v50 = v40[20];
        uint64_t v51 = &v16[v50];
        uint64_t v52 = &v17[v50];
        uint64_t v53 = *((void *)v52 + 1);
        *(void *)uint64_t v51 = *(void *)v52;
        *((void *)v51 + 1) = v53;
        v16[v40[24]] = v17[v40[24]];
LABEL_8:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      default:
        uint64_t v18 = *((void *)v17 + 1);
        *(void *)uint64_t v16 = *(void *)v17;
        *((void *)v16 + 1) = v18;
        break;
    }
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
    uint64_t v54 = a3[7];
    long long v55 = (char *)a1 + v54;
    long long v56 = (char *)a2 + v54;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))((char *)a2 + v54, 1, v12))
    {
      uint64_t v57 = sub_10000588C(&qword_101638CF0);
      memcpy(v55, v56, *(void *)(*(void *)(v57 - 8) + 64));
    }
    else
    {
      v99(v55, v56, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v55, 0, 1, v12);
    }
    uint64_t v58 = a3[8];
    long long v59 = (char *)a1 + v58;
    long long v60 = (char *)a2 + v58;
    uint64_t v61 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v61 - 8) + 16))(v59, v60, v61);
    uint64_t v62 = a3[9];
    uint64_t v63 = (uint64_t *)((char *)a1 + v62);
    long long v64 = (uint64_t *)((char *)a2 + v62);
    uint64_t v65 = *v64;
    unint64_t v66 = v64[1];
    sub_1000361E0(*v64, v66);
    *uint64_t v63 = v65;
    v63[1] = v66;
    uint64_t v67 = a3[10];
    uint64_t v68 = (char *)a1 + v67;
    uint64_t v69 = (char *)a2 + v67;
    unint64_t v70 = *((void *)v69 + 1);
    if (v70 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v68 = *(_OWORD *)v69;
    }
    else
    {
      uint64_t v71 = *(void *)v69;
      sub_1000361E0(*(void *)v69, *((void *)v69 + 1));
      *(void *)uint64_t v68 = v71;
      *((void *)v68 + 1) = v70;
    }
    uint64_t v72 = a3[11];
    unint64_t v73 = (char *)a1 + v72;
    uint64_t v74 = (char *)a2 + v72;
    unint64_t v75 = *((void *)v74 + 1);
    if (v75 >> 60 == 15)
    {
      *(_OWORD *)unint64_t v73 = *(_OWORD *)v74;
    }
    else
    {
      uint64_t v76 = *(void *)v74;
      sub_1000361E0(*(void *)v74, *((void *)v74 + 1));
      *(void *)unint64_t v73 = v76;
      *((void *)v73 + 1) = v75;
    }
    uint64_t v77 = a3[12];
    uint64_t v78 = (uint64_t *)((char *)a1 + v77);
    unint64_t v79 = (uint64_t *)((char *)a2 + v77);
    uint64_t v80 = *v79;
    unint64_t v81 = v79[1];
    sub_1000361E0(*v79, v81);
    *uint64_t v78 = v80;
    v78[1] = v81;
    uint64_t v82 = a3[13];
    uint64_t v83 = (uint64_t *)((char *)a1 + v82);
    BOOL v84 = (uint64_t *)((char *)a2 + v82);
    uint64_t v85 = *v84;
    unint64_t v86 = v84[1];
    sub_1000361E0(*v84, v86);
    *uint64_t v83 = v85;
    v83[1] = v86;
    uint64_t v87 = a3[14];
    uint64_t v88 = a3[15];
    uint64_t v89 = (uint64_t *)((char *)a1 + v87);
    unint64_t v90 = (uint64_t *)((char *)a2 + v87);
    uint64_t v91 = v90[1];
    *uint64_t v89 = *v90;
    v89[1] = v91;
    uint64_t v92 = (uint64_t *)((char *)a1 + v88);
    uint64_t v93 = (uint64_t *)((char *)a2 + v88);
    uint64_t v94 = v93[1];
    *uint64_t v92 = *v93;
    v92[1] = v94;
    uint64_t v95 = a3[17];
    *(uint64_t *)((char *)a1 + a3[16]) = *(uint64_t *)((char *)a2 + a3[16]);
    *(uint64_t *)((char *)a1 + v95) = *(uint64_t *)((char *)a2 + v95);
    uint64_t v96 = a3[19];
    *((unsigned char *)a1 + a3[18]) = *((unsigned char *)a2 + a3[18]);
    *((unsigned char *)a1 + v96) = *((unsigned char *)a2 + v96);
    *((unsigned char *)a1 + a3[20]) = *((unsigned char *)a2 + a3[20]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_100D181E0(uint64_t a1, int *a2)
{
  sub_10001CFB8(*(void *)a1, *(void *)(a1 + 8));
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  uint64_t v8 = a1 + a2[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_5;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 2u:
      v7(v8, v5);
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v7(v8, v5);
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v9 = a1 + a2[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v9, 1, v5)) {
    v7(v9, v5);
  }
  uint64_t v10 = a1 + a2[8];
  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  sub_10001CFB8(*(void *)(a1 + a2[9]), *(void *)(a1 + a2[9] + 8));
  uint64_t v12 = (uint64_t *)(a1 + a2[10]);
  unint64_t v13 = v12[1];
  if (v13 >> 60 != 15) {
    sub_10001CFB8(*v12, v13);
  }
  uint64_t v14 = (uint64_t *)(a1 + a2[11]);
  unint64_t v15 = v14[1];
  if (v15 >> 60 != 15) {
    sub_10001CFB8(*v14, v15);
  }
  sub_10001CFB8(*(void *)(a1 + a2[12]), *(void *)(a1 + a2[12] + 8));
  sub_10001CFB8(*(void *)(a1 + a2[13]), *(void *)(a1 + a2[13] + 8));
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t *sub_100D184CC(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000361E0(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  unint64_t v13 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  v13(v9, v10, v11);
  uint64_t v14 = a3[6];
  unint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  type metadata accessor for StableIdentifier();
  uint64_t v97 = v13;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v18 = *((void *)v16 + 1);
      *(void *)unint64_t v15 = *(void *)v16;
      *((void *)v15 + 1) = v18;
      uint64_t v19 = *((void *)v16 + 3);
      *((void *)v15 + 2) = *((void *)v16 + 2);
      *((void *)v15 + 3) = v19;
      uint64_t v20 = *((void *)v16 + 5);
      *((void *)v15 + 4) = *((void *)v16 + 4);
      *((void *)v15 + 5) = v20;
      goto LABEL_6;
    case 2u:
      v13(v15, v16, v11);
      uint64_t v21 = (int *)sub_10000588C(&qword_1016555E0);
      uint64_t v22 = v21[12];
      uint64_t v23 = &v15[v22];
      uint64_t v24 = (uint64_t *)&v16[v22];
      uint64_t v26 = *v24;
      uint64_t v25 = v24[1];
      *(void *)uint64_t v23 = v26;
      *((void *)v23 + 1) = v25;
      uint64_t v27 = v21[16];
      uint64_t v28 = &v15[v27];
      uint64_t v29 = &v16[v27];
      uint64_t v96 = *((void *)v29 + 1);
      *(void *)uint64_t v28 = *(void *)v29;
      *((void *)v28 + 1) = v96;
      uint64_t v30 = v21[20];
      uint64_t v31 = &v15[v30];
      uint64_t v32 = &v16[v30];
      uint64_t v33 = *((void *)v32 + 1);
      *(void *)uint64_t v31 = *(void *)v32;
      *((void *)v31 + 1) = v33;
      *(_WORD *)&v15[v21[24]] = *(_WORD *)&v16[v21[24]];
      uint64_t v34 = v21[28];
      uint64_t v35 = &v15[v34];
      uint64_t v36 = &v16[v34];
      uint64_t v37 = *((void *)v36 + 1);
      *(void *)uint64_t v35 = *(void *)v36;
      *((void *)v35 + 1) = v37;
      swift_bridgeObjectRetain();
      goto LABEL_6;
    case 3u:
      v13(v15, v16, v11);
      long long v38 = (int *)sub_10000588C((uint64_t *)&unk_1016565E0);
      uint64_t v39 = v38[12];
      long long v40 = &v15[v39];
      uint64_t v41 = (uint64_t *)&v16[v39];
      uint64_t v43 = *v41;
      uint64_t v42 = v41[1];
      *(void *)long long v40 = v43;
      *((void *)v40 + 1) = v42;
      uint64_t v44 = v38[16];
      uint64_t v45 = &v15[v44];
      uint64_t v46 = &v16[v44];
      uint64_t v47 = *((void *)v46 + 1);
      *(void *)uint64_t v45 = *(void *)v46;
      *((void *)v45 + 1) = v47;
      uint64_t v48 = v38[20];
      uint64_t v49 = &v15[v48];
      uint64_t v50 = &v16[v48];
      uint64_t v51 = *((void *)v50 + 1);
      *(void *)uint64_t v49 = *(void *)v50;
      *((void *)v49 + 1) = v51;
      v15[v38[24]] = v16[v38[24]];
LABEL_6:
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      break;
    default:
      uint64_t v17 = *((void *)v16 + 1);
      *(void *)unint64_t v15 = *(void *)v16;
      *((void *)v15 + 1) = v17;
      break;
  }
  swift_bridgeObjectRetain();
  swift_storeEnumTagMultiPayload();
  uint64_t v52 = a3[7];
  uint64_t v53 = (char *)a1 + v52;
  uint64_t v54 = (char *)a2 + v52;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))((char *)a2 + v52, 1, v11))
  {
    uint64_t v55 = sub_10000588C(&qword_101638CF0);
    memcpy(v53, v54, *(void *)(*(void *)(v55 - 8) + 64));
  }
  else
  {
    v97(v53, v54, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v53, 0, 1, v11);
  }
  uint64_t v56 = a3[8];
  uint64_t v57 = (char *)a1 + v56;
  uint64_t v58 = (char *)a2 + v56;
  uint64_t v59 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v59 - 8) + 16))(v57, v58, v59);
  uint64_t v60 = a3[9];
  uint64_t v61 = (uint64_t *)((char *)a1 + v60);
  uint64_t v62 = (uint64_t *)((char *)a2 + v60);
  uint64_t v63 = *v62;
  unint64_t v64 = v62[1];
  sub_1000361E0(*v62, v64);
  *uint64_t v61 = v63;
  v61[1] = v64;
  uint64_t v65 = a3[10];
  unint64_t v66 = (char *)a1 + v65;
  uint64_t v67 = (char *)a2 + v65;
  unint64_t v68 = *((void *)v67 + 1);
  if (v68 >> 60 == 15)
  {
    *(_OWORD *)unint64_t v66 = *(_OWORD *)v67;
  }
  else
  {
    uint64_t v69 = *(void *)v67;
    sub_1000361E0(*(void *)v67, *((void *)v67 + 1));
    *(void *)unint64_t v66 = v69;
    *((void *)v66 + 1) = v68;
  }
  uint64_t v70 = a3[11];
  uint64_t v71 = (char *)a1 + v70;
  uint64_t v72 = (char *)a2 + v70;
  unint64_t v73 = *((void *)v72 + 1);
  if (v73 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v71 = *(_OWORD *)v72;
  }
  else
  {
    uint64_t v74 = *(void *)v72;
    sub_1000361E0(*(void *)v72, *((void *)v72 + 1));
    *(void *)uint64_t v71 = v74;
    *((void *)v71 + 1) = v73;
  }
  uint64_t v75 = a3[12];
  uint64_t v76 = (uint64_t *)((char *)a1 + v75);
  uint64_t v77 = (uint64_t *)((char *)a2 + v75);
  uint64_t v78 = *v77;
  unint64_t v79 = v77[1];
  sub_1000361E0(*v77, v79);
  *uint64_t v76 = v78;
  v76[1] = v79;
  uint64_t v80 = a3[13];
  unint64_t v81 = (uint64_t *)((char *)a1 + v80);
  uint64_t v82 = (uint64_t *)((char *)a2 + v80);
  uint64_t v83 = *v82;
  unint64_t v84 = v82[1];
  sub_1000361E0(*v82, v84);
  *unint64_t v81 = v83;
  v81[1] = v84;
  uint64_t v85 = a3[14];
  uint64_t v86 = a3[15];
  uint64_t v87 = (uint64_t *)((char *)a1 + v85);
  uint64_t v88 = (uint64_t *)((char *)a2 + v85);
  uint64_t v89 = v88[1];
  *uint64_t v87 = *v88;
  v87[1] = v89;
  unint64_t v90 = (uint64_t *)((char *)a1 + v86);
  uint64_t v91 = (uint64_t *)((char *)a2 + v86);
  uint64_t v92 = v91[1];
  *unint64_t v90 = *v91;
  v90[1] = v92;
  uint64_t v93 = a3[17];
  *(uint64_t *)((char *)a1 + a3[16]) = *(uint64_t *)((char *)a2 + a3[16]);
  *(uint64_t *)((char *)a1 + v93) = *(uint64_t *)((char *)a2 + v93);
  uint64_t v94 = a3[19];
  *((unsigned char *)a1 + a3[18]) = *((unsigned char *)a2 + a3[18]);
  *((unsigned char *)a1 + v94) = *((unsigned char *)a2 + v94);
  *((unsigned char *)a1 + a3[20]) = *((unsigned char *)a2 + a3[20]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *sub_100D18978(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000361E0(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10001CFB8(v8, v9);
  uint64_t v10 = a3[5];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v96 = *(void (**)(char *, char *, uint64_t))(v14 + 24);
  v96(v11, v12, v13);
  if (a1 != a2)
  {
    uint64_t v15 = a3[6];
    uint64_t v16 = (uint64_t *)((char *)a1 + v15);
    uint64_t v17 = (uint64_t *)((char *)a2 + v15);
    sub_100D21554((uint64_t)a1 + v15, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    type metadata accessor for StableIdentifier();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        *uint64_t v16 = *v17;
        v16[1] = v17[1];
        v16[2] = v17[2];
        v16[3] = v17[3];
        v16[4] = v17[4];
        v16[5] = v17[5];
        goto LABEL_7;
      case 2u:
        (*(void (**)(void *, void *, uint64_t))(v14 + 16))(v16, v17, v13);
        uint64_t v18 = (int *)sub_10000588C(&qword_1016555E0);
        uint64_t v19 = v18[12];
        uint64_t v20 = (void *)((char *)v16 + v19);
        uint64_t v21 = (void *)((char *)v17 + v19);
        *uint64_t v20 = *v21;
        v20[1] = v21[1];
        uint64_t v22 = v18[16];
        uint64_t v23 = (void *)((char *)v16 + v22);
        uint64_t v24 = (void *)((char *)v17 + v22);
        *uint64_t v23 = *v24;
        v23[1] = v24[1];
        uint64_t v25 = v18[20];
        uint64_t v26 = (void *)((char *)v16 + v25);
        uint64_t v27 = (void *)((char *)v17 + v25);
        *uint64_t v26 = *v27;
        v26[1] = v27[1];
        *(_WORD *)((char *)v16 + v18[24]) = *(_WORD *)((char *)v17 + v18[24]);
        uint64_t v28 = v18[28];
        uint64_t v29 = (void *)((char *)v16 + v28);
        uint64_t v30 = (void *)((char *)v17 + v28);
        *uint64_t v29 = *v30;
        v29[1] = v30[1];
        swift_bridgeObjectRetain();
        goto LABEL_7;
      case 3u:
        (*(void (**)(void *, void *, uint64_t))(v14 + 16))(v16, v17, v13);
        uint64_t v31 = (int *)sub_10000588C((uint64_t *)&unk_1016565E0);
        uint64_t v32 = v31[12];
        uint64_t v33 = (void *)((char *)v16 + v32);
        uint64_t v34 = (void *)((char *)v17 + v32);
        *uint64_t v33 = *v34;
        v33[1] = v34[1];
        uint64_t v35 = v31[16];
        uint64_t v36 = (void *)((char *)v16 + v35);
        uint64_t v37 = (void *)((char *)v17 + v35);
        *uint64_t v36 = *v37;
        v36[1] = v37[1];
        uint64_t v38 = v31[20];
        uint64_t v39 = (void *)((char *)v16 + v38);
        long long v40 = (void *)((char *)v17 + v38);
        *uint64_t v39 = *v40;
        v39[1] = v40[1];
        *((unsigned char *)v16 + v31[24]) = *((unsigned char *)v17 + v31[24]);
LABEL_7:
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        break;
      default:
        *uint64_t v16 = *v17;
        v16[1] = v17[1];
        break;
    }
    swift_bridgeObjectRetain();
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v41 = a3[7];
  uint64_t v42 = (char *)a1 + v41;
  uint64_t v43 = (char *)a2 + v41;
  uint64_t v44 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  int v45 = v44((char *)a1 + v41, 1, v13);
  int v46 = v44(v43, 1, v13);
  if (v45)
  {
    if (!v46)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v42, v43, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v42, 0, 1, v13);
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  if (v46)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v42, v13);
LABEL_14:
    uint64_t v47 = sub_10000588C(&qword_101638CF0);
    memcpy(v42, v43, *(void *)(*(void *)(v47 - 8) + 64));
    goto LABEL_15;
  }
  v96(v42, v43, v13);
LABEL_15:
  uint64_t v48 = a3[8];
  uint64_t v49 = (char *)a1 + v48;
  uint64_t v50 = (char *)a2 + v48;
  uint64_t v51 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v51 - 8) + 24))(v49, v50, v51);
  uint64_t v52 = a3[9];
  uint64_t v53 = (uint64_t *)((char *)a1 + v52);
  uint64_t v54 = (uint64_t *)((char *)a2 + v52);
  uint64_t v55 = *v54;
  unint64_t v56 = v54[1];
  sub_1000361E0(*v54, v56);
  uint64_t v57 = *v53;
  unint64_t v58 = v53[1];
  *uint64_t v53 = v55;
  v53[1] = v56;
  sub_10001CFB8(v57, v58);
  uint64_t v59 = a3[10];
  uint64_t v60 = (uint64_t *)((char *)a1 + v59);
  uint64_t v61 = (uint64_t *)((char *)a2 + v59);
  unint64_t v62 = *(uint64_t *)((char *)a2 + v59 + 8);
  if (*(unint64_t *)((char *)a1 + v59 + 8) >> 60 == 15)
  {
    if (v62 >> 60 != 15)
    {
      uint64_t v63 = *v61;
      sub_1000361E0(v63, v62);
      *uint64_t v60 = v63;
      v60[1] = v62;
      goto LABEL_22;
    }
    goto LABEL_20;
  }
  if (v62 >> 60 == 15)
  {
    sub_1002C0990((uint64_t)v60);
LABEL_20:
    *(_OWORD *)uint64_t v60 = *(_OWORD *)v61;
    goto LABEL_22;
  }
  uint64_t v64 = *v61;
  sub_1000361E0(v64, v62);
  uint64_t v65 = *v60;
  unint64_t v66 = v60[1];
  *uint64_t v60 = v64;
  v60[1] = v62;
  sub_10001CFB8(v65, v66);
LABEL_22:
  uint64_t v67 = a3[11];
  unint64_t v68 = (uint64_t *)((char *)a1 + v67);
  uint64_t v69 = (uint64_t *)((char *)a2 + v67);
  unint64_t v70 = *(uint64_t *)((char *)a2 + v67 + 8);
  if (*(unint64_t *)((char *)a1 + v67 + 8) >> 60 != 15)
  {
    if (v70 >> 60 != 15)
    {
      uint64_t v72 = *v69;
      sub_1000361E0(v72, v70);
      uint64_t v73 = *v68;
      unint64_t v74 = v68[1];
      *unint64_t v68 = v72;
      v68[1] = v70;
      sub_10001CFB8(v73, v74);
      goto LABEL_29;
    }
    sub_1002C0990((uint64_t)v68);
    goto LABEL_27;
  }
  if (v70 >> 60 == 15)
  {
LABEL_27:
    *(_OWORD *)unint64_t v68 = *(_OWORD *)v69;
    goto LABEL_29;
  }
  uint64_t v71 = *v69;
  sub_1000361E0(v71, v70);
  *unint64_t v68 = v71;
  v68[1] = v70;
LABEL_29:
  uint64_t v75 = a3[12];
  uint64_t v76 = (uint64_t *)((char *)a1 + v75);
  uint64_t v77 = (uint64_t *)((char *)a2 + v75);
  uint64_t v78 = *v77;
  unint64_t v79 = v77[1];
  sub_1000361E0(*v77, v79);
  uint64_t v80 = *v76;
  unint64_t v81 = v76[1];
  *uint64_t v76 = v78;
  v76[1] = v79;
  sub_10001CFB8(v80, v81);
  uint64_t v82 = a3[13];
  uint64_t v83 = (uint64_t *)((char *)a1 + v82);
  unint64_t v84 = (uint64_t *)((char *)a2 + v82);
  uint64_t v85 = *v84;
  unint64_t v86 = v84[1];
  sub_1000361E0(*v84, v86);
  uint64_t v87 = *v83;
  unint64_t v88 = v83[1];
  *uint64_t v83 = v85;
  v83[1] = v86;
  sub_10001CFB8(v87, v88);
  uint64_t v89 = a3[14];
  unint64_t v90 = (uint64_t *)((char *)a1 + v89);
  uint64_t v91 = (uint64_t *)((char *)a2 + v89);
  *unint64_t v90 = *v91;
  v90[1] = v91[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v92 = a3[15];
  uint64_t v93 = (uint64_t *)((char *)a1 + v92);
  uint64_t v94 = (uint64_t *)((char *)a2 + v92);
  *uint64_t v93 = *v94;
  v93[1] = v94[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(uint64_t *)((char *)a1 + a3[16]) = *(uint64_t *)((char *)a2 + a3[16]);
  *(uint64_t *)((char *)a1 + a3[17]) = *(uint64_t *)((char *)a2 + a3[17]);
  *((unsigned char *)a1 + a3[18]) = *((unsigned char *)a2 + a3[18]);
  *((unsigned char *)a1 + a3[19]) = *((unsigned char *)a2 + a3[19]);
  *((unsigned char *)a1 + a3[20]) = *((unsigned char *)a2 + a3[20]);
  return a1;
}

_OWORD *sub_100D18FE8(_OWORD *a1, char *a2, int *a3)
{
  *a1 = *(_OWORD *)a2;
  uint64_t v6 = a3[5];
  unint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v11(v7, v8, v9);
  uint64_t v12 = a3[6];
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = &a2[v12];
  uint64_t v15 = type metadata accessor for StableIdentifier();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 3)
  {
    v11(v13, v14, v9);
    uint64_t v18 = (int *)sub_10000588C((uint64_t *)&unk_1016565E0);
    *(_OWORD *)&v13[v18[12]] = *(_OWORD *)&v14[v18[12]];
    *(_OWORD *)&v13[v18[16]] = *(_OWORD *)&v14[v18[16]];
    *(_OWORD *)&v13[v18[20]] = *(_OWORD *)&v14[v18[20]];
    v13[v18[24]] = v14[v18[24]];
    swift_storeEnumTagMultiPayload();
  }
  else if (EnumCaseMultiPayload == 2)
  {
    v11(v13, v14, v9);
    uint64_t v17 = (int *)sub_10000588C(&qword_1016555E0);
    *(_OWORD *)&v13[v17[12]] = *(_OWORD *)&v14[v17[12]];
    *(_OWORD *)&v13[v17[16]] = *(_OWORD *)&v14[v17[16]];
    *(_OWORD *)&v13[v17[20]] = *(_OWORD *)&v14[v17[20]];
    *(_WORD *)&v13[v17[24]] = *(_WORD *)&v14[v17[24]];
    *(_OWORD *)&v13[v17[28]] = *(_OWORD *)&v14[v17[28]];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64));
  }
  uint64_t v19 = a3[7];
  uint64_t v20 = (char *)a1 + v19;
  uint64_t v21 = &a2[v19];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(&a2[v19], 1, v9))
  {
    uint64_t v22 = sub_10000588C(&qword_101638CF0);
    memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    v11(v20, v21, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v20, 0, 1, v9);
  }
  uint64_t v23 = a3[8];
  uint64_t v24 = (char *)a1 + v23;
  uint64_t v25 = &a2[v23];
  uint64_t v26 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32))(v24, v25, v26);
  uint64_t v27 = a3[10];
  *(_OWORD *)((char *)a1 + a3[9]) = *(_OWORD *)&a2[a3[9]];
  *(_OWORD *)((char *)a1 + v27) = *(_OWORD *)&a2[v27];
  uint64_t v28 = a3[12];
  *(_OWORD *)((char *)a1 + a3[11]) = *(_OWORD *)&a2[a3[11]];
  *(_OWORD *)((char *)a1 + v28) = *(_OWORD *)&a2[v28];
  uint64_t v29 = a3[14];
  *(_OWORD *)((char *)a1 + a3[13]) = *(_OWORD *)&a2[a3[13]];
  *(_OWORD *)((char *)a1 + v29) = *(_OWORD *)&a2[v29];
  uint64_t v30 = a3[16];
  *(_OWORD *)((char *)a1 + a3[15]) = *(_OWORD *)&a2[a3[15]];
  *(void *)((char *)a1 + v30) = *(void *)&a2[v30];
  uint64_t v31 = a3[18];
  *(void *)((char *)a1 + a3[17]) = *(void *)&a2[a3[17]];
  *((unsigned char *)a1 + v31) = a2[v31];
  uint64_t v32 = a3[20];
  *((unsigned char *)a1 + a3[19]) = a2[a3[19]];
  *((unsigned char *)a1 + v32) = a2[v32];
  return a1;
}

uint64_t *sub_100D19328(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001CFB8(v6, v7);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v65 = *(void (**)(char *, char *, uint64_t))(v12 + 40);
  v65(v9, v10, v11);
  if (a1 != a2)
  {
    uint64_t v13 = a3[6];
    uint64_t v14 = (char *)a1 + v13;
    uint64_t v15 = (char *)a2 + v13;
    sub_100D21554((uint64_t)a1 + v13, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    uint64_t v16 = type metadata accessor for StableIdentifier();
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 3)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v12 + 32))(v14, v15, v11);
      uint64_t v19 = (int *)sub_10000588C((uint64_t *)&unk_1016565E0);
      *(_OWORD *)&v14[v19[12]] = *(_OWORD *)&v15[v19[12]];
      *(_OWORD *)&v14[v19[16]] = *(_OWORD *)&v15[v19[16]];
      *(_OWORD *)&v14[v19[20]] = *(_OWORD *)&v15[v19[20]];
      v14[v19[24]] = v15[v19[24]];
      swift_storeEnumTagMultiPayload();
    }
    else if (EnumCaseMultiPayload == 2)
    {
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v12 + 32))(v14, v15, v11);
      uint64_t v18 = (int *)sub_10000588C(&qword_1016555E0);
      *(_OWORD *)&v14[v18[12]] = *(_OWORD *)&v15[v18[12]];
      *(_OWORD *)&v14[v18[16]] = *(_OWORD *)&v15[v18[16]];
      *(_OWORD *)&v14[v18[20]] = *(_OWORD *)&v15[v18[20]];
      *(_WORD *)&v14[v18[24]] = *(_WORD *)&v15[v18[24]];
      *(_OWORD *)&v14[v18[28]] = *(_OWORD *)&v15[v18[28]];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
    }
  }
  uint64_t v20 = a3[7];
  uint64_t v21 = (char *)a1 + v20;
  uint64_t v22 = (char *)a2 + v20;
  uint64_t v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  int v24 = v23((char *)a1 + v20, 1, v11);
  int v25 = v23(v22, 1, v11);
  if (v24)
  {
    if (!v25)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v21, v22, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v21, 0, 1, v11);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v25)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v21, v11);
LABEL_12:
    uint64_t v26 = sub_10000588C(&qword_101638CF0);
    memcpy(v21, v22, *(void *)(*(void *)(v26 - 8) + 64));
    goto LABEL_13;
  }
  v65(v21, v22, v11);
LABEL_13:
  uint64_t v27 = a3[8];
  uint64_t v28 = (char *)a1 + v27;
  uint64_t v29 = (char *)a2 + v27;
  uint64_t v30 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v30 - 8) + 40))(v28, v29, v30);
  uint64_t v31 = a3[9];
  uint64_t v32 = *(uint64_t *)((char *)a1 + v31);
  unint64_t v33 = *(uint64_t *)((char *)a1 + v31 + 8);
  *(_OWORD *)((char *)a1 + v31) = *(_OWORD *)((char *)a2 + v31);
  sub_10001CFB8(v32, v33);
  uint64_t v34 = a3[10];
  uint64_t v35 = (uint64_t)a1 + v34;
  uint64_t v36 = (char *)a2 + v34;
  unint64_t v37 = *(uint64_t *)((char *)a1 + v34 + 8);
  if (v37 >> 60 == 15)
  {
LABEL_16:
    *(_OWORD *)uint64_t v35 = *(_OWORD *)v36;
    goto LABEL_18;
  }
  unint64_t v38 = *((void *)v36 + 1);
  if (v38 >> 60 == 15)
  {
    sub_1002C0990(v35);
    goto LABEL_16;
  }
  uint64_t v39 = *(void *)v35;
  *(void *)uint64_t v35 = *(void *)v36;
  *(void *)(v35 + 8) = v38;
  sub_10001CFB8(v39, v37);
LABEL_18:
  uint64_t v40 = a3[11];
  uint64_t v41 = (uint64_t *)((char *)a1 + v40);
  uint64_t v42 = (uint64_t *)((char *)a2 + v40);
  unint64_t v43 = *(uint64_t *)((char *)a1 + v40 + 8);
  if (v43 >> 60 != 15)
  {
    unint64_t v44 = v42[1];
    if (v44 >> 60 != 15)
    {
      uint64_t v45 = *v41;
      *uint64_t v41 = *v42;
      v41[1] = v44;
      sub_10001CFB8(v45, v43);
      goto LABEL_23;
    }
    sub_1002C0990((uint64_t)v41);
  }
  *(_OWORD *)uint64_t v41 = *(_OWORD *)v42;
LABEL_23:
  uint64_t v46 = a3[12];
  uint64_t v47 = *(uint64_t *)((char *)a1 + v46);
  unint64_t v48 = *(uint64_t *)((char *)a1 + v46 + 8);
  *(_OWORD *)((char *)a1 + v46) = *(_OWORD *)((char *)a2 + v46);
  sub_10001CFB8(v47, v48);
  uint64_t v49 = a3[13];
  uint64_t v50 = *(uint64_t *)((char *)a1 + v49);
  unint64_t v51 = *(uint64_t *)((char *)a1 + v49 + 8);
  *(_OWORD *)((char *)a1 + v49) = *(_OWORD *)((char *)a2 + v49);
  sub_10001CFB8(v50, v51);
  uint64_t v52 = a3[14];
  uint64_t v53 = (uint64_t *)((char *)a1 + v52);
  uint64_t v54 = (uint64_t *)((char *)a2 + v52);
  uint64_t v56 = *v54;
  uint64_t v55 = v54[1];
  *uint64_t v53 = v56;
  v53[1] = v55;
  swift_bridgeObjectRelease();
  uint64_t v57 = a3[15];
  unint64_t v58 = (uint64_t *)((char *)a1 + v57);
  uint64_t v59 = (uint64_t *)((char *)a2 + v57);
  uint64_t v61 = *v59;
  uint64_t v60 = v59[1];
  *unint64_t v58 = v61;
  v58[1] = v60;
  swift_bridgeObjectRelease();
  uint64_t v62 = a3[17];
  *(uint64_t *)((char *)a1 + a3[16]) = *(uint64_t *)((char *)a2 + a3[16]);
  *(uint64_t *)((char *)a1 + v62) = *(uint64_t *)((char *)a2 + v62);
  uint64_t v63 = a3[19];
  *((unsigned char *)a1 + a3[18]) = *((unsigned char *)a2 + a3[18]);
  *((unsigned char *)a1 + v63) = *((unsigned char *)a2 + v63);
  *((unsigned char *)a1 + a3[20]) = *((unsigned char *)a2 + a3[20]);
  return a1;
}

uint64_t sub_100D197F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100D19808);
}

uint64_t sub_100D19808(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84) == a2)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 - 8);
    uint64_t v9 = a3[5];
LABEL_9:
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    return v13(a1 + v9, a2, v7);
  }
  uint64_t v10 = type metadata accessor for StableIdentifier();
  if (*(_DWORD *)(*(void *)(v10 - 8) + 84) == a2)
  {
    uint64_t v7 = v10;
    uint64_t v8 = *(void *)(v10 - 8);
    uint64_t v9 = a3[6];
    goto LABEL_9;
  }
  uint64_t v11 = sub_10000588C(&qword_101638CF0);
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v7 = v11;
    uint64_t v8 = *(void *)(v11 - 8);
    uint64_t v9 = a3[7];
    goto LABEL_9;
  }
  uint64_t v12 = type metadata accessor for Date();
  if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a2)
  {
    uint64_t v7 = v12;
    uint64_t v8 = *(void *)(v12 - 8);
    uint64_t v9 = a3[8];
    goto LABEL_9;
  }
  unint64_t v15 = *(void *)(a1 + a3[14] + 8);
  if (v15 >= 0xFFFFFFFF) {
    LODWORD(v15) = -1;
  }
  return (v15 + 1);
}

uint64_t sub_100D199B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100D199CC);
}

uint64_t sub_100D199CC(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for UUID();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[5];
  }
  else
  {
    uint64_t v12 = type metadata accessor for StableIdentifier();
    if (*(_DWORD *)(*(void *)(v12 - 8) + 84) == a3)
    {
      uint64_t v9 = v12;
      uint64_t v10 = *(void *)(v12 - 8);
      uint64_t v11 = a4[6];
    }
    else
    {
      uint64_t v13 = sub_10000588C(&qword_101638CF0);
      if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
      {
        uint64_t v9 = v13;
        uint64_t v10 = *(void *)(v13 - 8);
        uint64_t v11 = a4[7];
      }
      else
      {
        uint64_t result = type metadata accessor for Date();
        if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
        {
          *(void *)(a1 + a4[14] + 8) = (a2 - 1);
          return result;
        }
        uint64_t v9 = result;
        uint64_t v10 = *(void *)(result - 8);
        uint64_t v11 = a4[8];
      }
    }
  }
  unint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);

  return v15(a1 + v11, a2, a2, v9);
}

uint64_t type metadata accessor for OwnedBeaconRecord()
{
  uint64_t result = qword_10165DCA0;
  if (!qword_10165DCA0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100D19BC4()
{
  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    type metadata accessor for StableIdentifier();
    if (v1 <= 0x3F)
    {
      sub_1003426B0();
      if (v2 <= 0x3F)
      {
        type metadata accessor for Date();
        if (v3 <= 0x3F) {
          swift_initStructMetadata();
        }
      }
    }
  }
}

void sub_100D19D5C(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v122 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v145 = v7;
  uint64_t v146 = v8;
  __chkstk_darwin(v7);
  uint64_t v144 = (char *)&v122 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C(&qword_1016429D0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (uint64_t *)((char *)&v122 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = type metadata accessor for StableIdentifier();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v122 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000588C(&qword_101638CF0);
  uint64_t v18 = __chkstk_darwin(v17 - 8);
  uint64_t v140 = (char *)&v122 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v122 - v20;
  uint64_t v22 = type metadata accessor for UUID();
  uint64_t v149 = *(void *)(v22 - 8);
  uint64_t v150 = v22;
  __chkstk_darwin(v22);
  uint64_t v148 = (char *)&v122 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v142 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v143 = a2;
  uint64_t v141 = v142[18];
  *((unsigned char *)a2 + v141) = 3;
  uint64_t v24 = CKRecord.recordType.getter();
  uint64_t v26 = v25;
  if (qword_1016370A8 != -1) {
    swift_once();
  }
  if (v24 == qword_10170ECB0 && v26 == *(void *)algn_10170ECB8)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v27 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v27 & 1) == 0)
    {
      sub_100D21498();
      swift_allocError();
      *uint64_t v42 = 0;
      goto LABEL_15;
    }
  }
  uint64_t v139 = v16;
  id v28 = [a1 recordID];
  id v29 = [v28 recordName];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  uint64_t v31 = v149;
  uint64_t v30 = v150;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v149 + 48))(v21, 1, v150) == 1)
  {
    sub_10001DAB4((uint64_t)v21, &qword_101638CF0);
    sub_100D21498();
    swift_allocError();
    *uint64_t v32 = 2;
LABEL_15:
    swift_willThrow();

    return;
  }
  (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v148, v21, v30);
  id v33 = [a1 encryptedValues];
  NSString v34 = String._bridgeToObjectiveC()();
  id v138 = v33;
  id v35 = [v33 objectForKeyedSubscript:v34];

  if (!v35) {
    goto LABEL_26;
  }
  unint64_t v152 = (unint64_t)v35;
  uint64_t v36 = sub_10000588C((uint64_t *)&unk_10163AE50);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_26;
  }
  uint64_t v137 = v36;
  long long v37 = v151;
  unint64_t v39 = v147;
  sub_101111B94(v37, *((void **)&v37 + 1), v12);
  if (v39)
  {
    __break(1u);
    return;
  }
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    uint64_t v40 = &qword_1016429D0;
    uint64_t v41 = (uint64_t)v12;
LABEL_24:
    sub_10001DAB4(v41, v40);
    goto LABEL_25;
  }
  sub_100D214EC((uint64_t)v12, (uint64_t)v139, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
  NSString v43 = String._bridgeToObjectiveC()();
  id v44 = [v138 objectForKeyedSubscript:v43];

  if (!v44)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v146 + 56))(v6, 1, 1, v145);
    goto LABEL_23;
  }
  *(void *)&long long v151 = v44;
  uint64_t v45 = v145;
  int v46 = swift_dynamicCast();
  uint64_t v47 = v146;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v146 + 56))(v6, v46 ^ 1u, 1, v45);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v47 + 48))(v6, 1, v45) == 1)
  {
LABEL_23:
    sub_100D21554((uint64_t)v139, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    uint64_t v40 = (uint64_t *)&unk_10163AC90;
    uint64_t v41 = (uint64_t)v6;
    goto LABEL_24;
  }
  unint64_t v48 = v144;
  (*(void (**)(char *, char *, uint64_t))(v47 + 32))(v144, v6, v45);
  NSString v49 = String._bridgeToObjectiveC()();
  id v50 = [v138 objectForKeyedSubscript:v49];

  uint64_t v51 = (uint64_t)v139;
  if (!v50 || (unint64_t v152 = (unint64_t)v50, (swift_dynamicCast() & 1) == 0))
  {
    (*(void (**)(char *, uint64_t))(v47 + 8))(v48, v45);
    sub_100D21554(v51, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
LABEL_25:
    uint64_t v31 = v149;
    uint64_t v30 = v150;
LABEL_26:
    static os_log_type_t.error.getter();
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v53 = swift_allocObject();
    *(_OWORD *)(v53 + 16) = xmmword_101342130;
    *(void *)(v53 + 56) = sub_10001D4B0(0, (unint64_t *)&qword_10163AE60);
    *(void *)(v53 + 64) = sub_1000A038C();
    *(void *)(v53 + 32) = a1;
    sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
    id v54 = a1;
    uint64_t v55 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();

    sub_100D21498();
    swift_allocError();
    *uint64_t v56 = 3;
    swift_willThrow();
    swift_unknownObjectRelease();

    (*(void (**)(char *, uint64_t))(v31 + 8))(v148, v30);
    return;
  }
  long long v52 = v151;
  sub_1000361E0(v151, *((unint64_t *)&v151 + 1));
  sub_100434DF4(v52, *((unint64_t *)&v52 + 1), (uint64_t *)&v151);
  unint64_t v147 = *((void *)&v151 + 1);
  uint64_t v57 = v151;
  NSString v58 = String._bridgeToObjectiveC()();
  id v59 = [v138 objectForKeyedSubscript:v58];

  if (!v59)
  {
    uint64_t v64 = v57;
    unint64_t v65 = v147;
LABEL_32:
    sub_10001CFB8(v64, v65);
    sub_10001CFB8(v52, *((unint64_t *)&v52 + 1));
    uint64_t v31 = v149;
    uint64_t v30 = v150;
    uint64_t v66 = (uint64_t)v139;
    (*(void (**)(char *, uint64_t))(v47 + 8))(v144, v45);
    uint64_t v67 = v66;
LABEL_39:
    sub_100D21554(v67, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    goto LABEL_26;
  }
  unint64_t v60 = v147;
  uint64_t v136 = v57;
  unint64_t v152 = (unint64_t)v59;
  if ((swift_dynamicCast() & 1) == 0)
  {
    uint64_t v64 = v136;
    unint64_t v65 = v60;
    goto LABEL_32;
  }
  uint64_t v135 = v52;
  long long v61 = v151;
  sub_1000361E0(v151, *((unint64_t *)&v151 + 1));
  uint64_t v62 = sub_10043A040(v61, *((unint64_t *)&v61 + 1));
  uint64_t v31 = v149;
  uint64_t v30 = v150;
  unint64_t v131 = 0;
  uint64_t v133 = v62;
  unint64_t v134 = v63;
  long long v132 = v61;
  NSString v68 = String._bridgeToObjectiveC()();
  id v69 = [v138 objectForKeyedSubscript:v68];

  if (!v69 || (unint64_t v152 = (unint64_t)v69, (swift_dynamicCast() & 1) == 0))
  {
    sub_10001CFB8(v133, v134);
    sub_10001CFB8(v136, v147);
    sub_10001CFB8(v132, *((unint64_t *)&v132 + 1));
    sub_10001CFB8(v135, *((unint64_t *)&v52 + 1));
    goto LABEL_38;
  }
  unint64_t v130 = *((void *)&v52 + 1);
  long long v70 = v151;
  sub_1000361E0(v151, *((unint64_t *)&v151 + 1));
  unint64_t v129 = *((void *)&v70 + 1);
  unint64_t v71 = v131;
  uint64_t v128 = sub_10043A38C(v70, *((unint64_t *)&v70 + 1));
  unint64_t v131 = v72;
  if (v71)
  {
    sub_10001CFB8(v133, v134);
    sub_10001CFB8(v136, v147);
    sub_10001CFB8(v70, v129);
    sub_10001CFB8(v132, *((unint64_t *)&v132 + 1));
    sub_10001CFB8(v135, v130);
    swift_errorRelease();
LABEL_38:
    (*(void (**)(char *, uint64_t))(v47 + 8))(v144, v45);
    uint64_t v67 = (uint64_t)v139;
    goto LABEL_39;
  }
  NSString v73 = String._bridgeToObjectiveC()();
  id v74 = [v138 objectForKeyedSubscript:v73];

  if (!v74 || (unint64_t v152 = (unint64_t)v74, (swift_dynamicCast() & 1) == 0))
  {
LABEL_53:
    sub_10001CFB8(v128, v131);
    sub_10001CFB8(v133, v134);
    sub_10001CFB8(v136, v147);
    sub_10001CFB8(v70, v129);
    sub_10001CFB8(v132, *((unint64_t *)&v132 + 1));
    sub_10001CFB8(v135, v130);
    (*(void (**)(char *, uint64_t))(v146 + 8))(v144, v145);
    sub_100D21554((uint64_t)v139, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    goto LABEL_25;
  }
  uint64_t v127 = *((void *)&v151 + 1);
  uint64_t v75 = v151;
  NSString v76 = String._bridgeToObjectiveC()();
  id v77 = [v138 objectForKeyedSubscript:v76];

  if (!v77 || (unint64_t v152 = (unint64_t)v77, (swift_dynamicCast() & 1) == 0))
  {
LABEL_52:
    swift_bridgeObjectRelease();
    goto LABEL_53;
  }
  long long v126 = v151;
  NSString v78 = String._bridgeToObjectiveC()();
  id v79 = [v138 objectForKeyedSubscript:v78];

  if (!v79
    || (*(void *)&long long v151 = v79, (swift_dynamicCast() & 1) == 0)
    || (unint64_t v125 = v152,
        NSString v80 = String._bridgeToObjectiveC()(),
        id v81 = [v138 objectForKeyedSubscript:v80],
        v80,
        !v81)
    || (*(void *)&long long v151 = v81, (swift_dynamicCast() & 1) == 0))
  {
    swift_bridgeObjectRelease();
    goto LABEL_52;
  }
  unint64_t v123 = v152;
  NSString v82 = String._bridgeToObjectiveC()();
  id v83 = [v138 objectForKeyedSubscript:v82];

  if (v83 && (*(void *)&long long v151 = v83, swift_dynamicCast())) {
    unint64_t v84 = v152;
  }
  else {
    unint64_t v84 = 0;
  }
  char v85 = sub_1012D6614(v84);
  *((unsigned char *)v143 + v142[19]) = v85;
  NSString v86 = String._bridgeToObjectiveC()();
  id v87 = [v138 objectForKeyedSubscript:v86];

  if (v87 && (*(void *)&long long v151 = v87, swift_dynamicCast())) {
    char v88 = v152;
  }
  else {
    char v88 = 0;
  }
  uint64_t v89 = v143;
  *((unsigned char *)v143 + v142[20]) = v88;
  id v90 = [objc_allocWithZone((Class)NSKeyedArchiver) initRequiringSecureCoding:1];
  [a1 encodeSystemFieldsWithCoder:v90];
  [v90 finishEncoding];
  id v91 = [v90 encodedData];
  uint64_t v92 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v94 = v93;

  *uint64_t v89 = v92;
  v89[1] = v94;
  uint64_t v95 = v142;
  (*(void (**)(char *, char *, uint64_t))(v149 + 16))((char *)v89 + v142[5], v148, v150);
  sub_100D20C84((uint64_t)v139, (uint64_t)v89 + v95[6], (uint64_t (*)(void))type metadata accessor for StableIdentifier);
  (*(void (**)(char *, char *, uint64_t))(v146 + 16))((char *)v89 + v95[8], v144, v145);
  uint64_t v96 = (uint64_t *)((char *)v89 + v95[9]);
  uint64_t v97 = v136;
  unint64_t v98 = v147;
  void *v96 = v136;
  v96[1] = v98;
  sub_1000361E0(v97, v98);
  NSString v99 = String._bridgeToObjectiveC()();
  id v100 = [v138 objectForKeyedSubscript:v99];

  long long v124 = xmmword_101347BB0;
  if (v100)
  {
    unint64_t v152 = (unint64_t)v100;
    if (swift_dynamicCast())
    {
      sub_100434DF4(v151, *((unint64_t *)&v151 + 1), (uint64_t *)&v151);
      long long v101 = v151;
    }
    else
    {
      long long v101 = v124;
    }
  }
  else
  {
    long long v101 = v124;
  }
  *(_OWORD *)((char *)v143 + v142[10]) = v101;
  NSString v102 = String._bridgeToObjectiveC()();
  id v103 = [v138 objectForKeyedSubscript:v102];

  if (v103)
  {
    unint64_t v152 = (unint64_t)v103;
    if (swift_dynamicCast())
    {
      sub_100434DF4(v151, *((unint64_t *)&v151 + 1), (uint64_t *)&v151);
      long long v124 = v151;
    }
  }
  uint64_t v105 = v142;
  int v104 = v143;
  *(_OWORD *)((char *)v143 + v142[11]) = v124;
  uint64_t v106 = (void *)((char *)v104 + v105[12]);
  uint64_t v107 = v133;
  unint64_t v108 = v134;
  *uint64_t v106 = v133;
  v106[1] = v108;
  uint64_t v109 = (void *)((char *)v104 + v105[13]);
  uint64_t v110 = v128;
  unint64_t v111 = v131;
  *uint64_t v109 = v128;
  v109[1] = v111;
  uint64_t v112 = (void *)((char *)v104 + v105[14]);
  uint64_t v113 = v127;
  *uint64_t v112 = v75;
  v112[1] = v113;
  *(_OWORD *)((char *)v104 + v105[15]) = v126;
  *(void *)((char *)v104 + v105[16]) = v125;
  *(void *)((char *)v104 + v105[17]) = v123;
  sub_1000361E0(v107, v108);
  sub_1000361E0(v110, v111);
  NSString v114 = String._bridgeToObjectiveC()();
  id v115 = [v138 objectForKeyedSubscript:v114];

  if (v115 && (*(void *)&long long v151 = v115, (swift_dynamicCast() & 1) != 0))
  {
    char v116 = v152;
    if (v152 >= 3) {
      char v116 = 3;
    }
  }
  else
  {
    char v116 = 3;
  }
  *((unsigned char *)v143 + v141) = v116;
  NSString v117 = String._bridgeToObjectiveC()();
  id v118 = [v138 objectForKeyedSubscript:v117];

  if (v118 && (unint64_t v152 = (unint64_t)v118, (swift_dynamicCast() & 1) != 0))
  {
    uint64_t v119 = (uint64_t)v140;
    UUID.init(uuidString:)();
    swift_unknownObjectRelease();

    swift_bridgeObjectRelease();
    sub_10001CFB8(v128, v131);
    sub_10001CFB8(v133, v134);
    sub_10001CFB8(v136, v147);
    sub_10001CFB8(v70, v129);
    sub_10001CFB8(v132, *((unint64_t *)&v132 + 1));
    sub_10001CFB8(v135, v130);
    (*(void (**)(char *, uint64_t))(v146 + 8))(v144, v145);
    sub_100D21554((uint64_t)v139, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    (*(void (**)(char *, uint64_t))(v149 + 8))(v148, v150);
    sub_1002729C8(v119, (uint64_t)v143 + v142[7]);
  }
  else
  {
    swift_unknownObjectRelease();

    sub_10001CFB8(v128, v131);
    sub_10001CFB8(v133, v134);
    sub_10001CFB8(v136, v147);
    sub_10001CFB8(v70, v129);
    sub_10001CFB8(v132, *((unint64_t *)&v132 + 1));
    sub_10001CFB8(v135, v130);
    (*(void (**)(char *, uint64_t))(v146 + 8))(v144, v145);
    sub_100D21554((uint64_t)v139, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    uint64_t v120 = v149;
    uint64_t v121 = v150;
    (*(void (**)(char *, uint64_t))(v149 + 8))(v148, v150);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v120 + 56))((char *)v143 + v142[7], 1, 1, v121);
  }
}

id sub_100D1B2B4()
{
  NSString v0 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v1 = [(id)swift_getObjCClassFromMetadata() handleWithEmailAddress:v0];

  return v1;
}

uint64_t sub_100D1B318()
{
  uint64_t v1 = type metadata accessor for StableIdentifier();
  __chkstk_darwin(v1);
  unint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = (int *)type metadata accessor for OwnedBeaconRecord();
  sub_100D20C84(v0 + v4[6], (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 3)
  {
    sub_10000588C((uint64_t *)&unk_1016565E0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  if (EnumCaseMultiPayload == 2)
  {
    sub_10000588C(&qword_1016555E0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    swift_bridgeObjectRelease();
    uint64_t v6 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t))(*(void *)(v6 - 8) + 8))(v3, v6);
    return sub_1002AAF08(*(void *)(v0 + v4[16]), *(void *)(v0 + v4[17]));
  }
  sub_100D21554((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
  return 0;
}

uint64_t sub_100D1B4D0()
{
  v1[27] = v0;
  uint64_t v2 = type metadata accessor for OwnedBeaconRecord();
  v1[28] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[29] = v3;
  v1[30] = *(void *)(v3 + 64);
  v1[31] = swift_task_alloc();
  return _swift_task_switch(sub_100D1B598, 0, 0);
}

uint64_t sub_100D1B598()
{
  if (qword_1016371D8 != -1) {
    swift_once();
  }
  *(void *)(v0 + 200) = 0x7365547265646E75;
  *(void *)(v0 + 208) = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)();
  swift_bridgeObjectRelease();
  if (*(unsigned char *)(v0 + 304))
  {
    char v1 = 1;
LABEL_16:
    swift_task_dealloc();
    uint64_t v16 = *(uint64_t (**)(void))(v0 + 8);
    return v16(v1 & 1);
  }
  uint64_t My = type metadata accessor for Feature.FindMy();
  *(void *)(v0 + 80) = My;
  uint64_t v3 = sub_100D20384((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
  *(void *)(v0 + 88) = v3;
  uint64_t v4 = sub_10001D958((uint64_t *)(v0 + 56));
  uint64_t v5 = *(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104);
  v5(v4, enum case for Feature.FindMy.managedCBPeripheral(_:), My);
  char v6 = isFeatureEnabled(_:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 56);
  if ((v6 & 1) == 0) {
    goto LABEL_15;
  }
  if (qword_101637188 != -1) {
    swift_once();
  }
  uint64_t v7 = (void *)qword_10170EE68;
  id v8 = [self sharedInstance];
  unsigned int v9 = [v8 isInternalBuild];

  if (v9)
  {
    NSString v10 = String._bridgeToObjectiveC()();
    unsigned int v11 = [v7 BOOLForKey:v10];

    if (v11)
    {
      char v12 = sub_10111198C();
LABEL_13:
      char v1 = v12;
      goto LABEL_16;
    }
  }
  *(void *)(v0 + 120) = My;
  *(void *)(v0 + 128) = v3;
  uint64_t v13 = sub_10001D958((uint64_t *)(v0 + 96));
  v5(v13, enum case for Feature.FindMy.spPlaySoundAll(_:), My);
  char v14 = isFeatureEnabled(_:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 96);
  if (v14)
  {
    char v12 = sub_100D1CA38();
    goto LABEL_13;
  }
  *(void *)(v0 + 256) = sub_100D1B318();
  *(void *)(v0 + 264) = v15;
  if (v15 >> 60 == 15)
  {
LABEL_15:
    char v1 = 0;
    goto LABEL_16;
  }
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 136, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 160))
  {
    sub_10001CEB0((long long *)(v0 + 136), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v19 = (uint64_t (__cdecl *)())((char *)&dword_1016391B0 + dword_1016391B0);
    uint64_t v18 = (void *)swift_task_alloc();
    *(void *)(v0 + 272) = v18;
    *uint64_t v18 = v0;
    v18[1] = sub_100D1B9A8;
    return v19();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100D1B9A8(uint64_t a1)
{
  *(void *)(*(void *)v1 + 280) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100D1BAA8, 0, 0);
}

uint64_t sub_100D1BAA8()
{
  uint64_t v1 = (uint64_t)(v0 + 2);
  uint64_t v2 = v0[35];
  if (v2)
  {
    uint64_t v3 = v0[31];
    uint64_t v4 = v0[29];
    uint64_t v5 = v0[27];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_100D20C84(v5, v3, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    unint64_t v6 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v7 = swift_allocObject();
    v0[36] = v7;
    *(void *)(v7 + 16) = v2;
    sub_100D214EC(v3, v7 + v6, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    swift_retain();
    id v8 = (void *)swift_task_alloc();
    v0[37] = v8;
    uint64_t v9 = sub_10000588C(&qword_101649EA0);
    *id v8 = v0;
    v8[1] = sub_100D1BC78;
    return unsafeBlocking<A>(_:)((char *)v0 + 305, sub_100D20C10, v7, v9);
  }
  else
  {
    uint64_t v10 = v0[32];
    unint64_t v11 = v0[33];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    BOOL v12 = sub_100DC86D8(v10, v11);
    sub_100037A24(v10, v11);
    swift_task_dealloc();
    uint64_t v13 = (uint64_t (*)(BOOL))v0[1];
    return v13(v12);
  }
}

uint64_t sub_100D1BC78()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100D1BD90, 0, 0);
}

uint64_t sub_100D1BD90()
{
  int v1 = *(unsigned __int8 *)(v0 + 305);
  if (v1 != 2 && (v1 & 1) != 0)
  {
    uint64_t v5 = *(void *)(v0 + 256);
    unint64_t v6 = *(void *)(v0 + 264);
    swift_release();
    sub_100037A24(v5, v6);
    BOOL v4 = 1;
  }
  else
  {
    uint64_t v3 = *(void *)(v0 + 256);
    unint64_t v2 = *(void *)(v0 + 264);
    BOOL v4 = sub_100DC86D8(v3, v2);
    swift_release();
    sub_100037A24(v3, v2);
  }
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(BOOL))(v0 + 8);
  return v7(v4);
}

uint64_t sub_100D1BE58()
{
  uint64_t v1 = type metadata accessor for StableIdentifier();
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v27 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OwnedBeaconRecord();
  sub_100D20C84(v0 + *(int *)(v4 + 24), (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v9 = *((void *)v3 + 4);
      unint64_t v10 = *((void *)v3 + 5);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v27 = v9;
      unint64_t v28 = v10;
      sub_1000336D4();
      uint64_t v11 = Data.init<A>(hexString:)();
      if (v12 >> 60 == 15) {
        return 0;
      }
      uint64_t v13 = v11;
      unint64_t v14 = v12;
      uint64_t v27 = v11;
      unint64_t v28 = v12;
      sub_1000362FC();
      if (DataProtocol.isNull.getter())
      {
        sub_100037A24(v13, v14);
        return 0;
      }
      uint64_t v22 = Data.trimmed.getter();
      sub_100037A24(v13, v14);
      return v22;
    case 2u:
      uint64_t v15 = sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v16 = &v3[*(int *)(v15 + 80)];
      uint64_t v17 = *(void *)v16;
      unint64_t v18 = *((void *)v16 + 1);
      swift_bridgeObjectRelease();
      uint64_t v27 = v17;
      unint64_t v28 = v18;
      goto LABEL_8;
    case 3u:
      uint64_t v5 = sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v6 = &v3[*(int *)(v5 + 80)];
      uint64_t v8 = *(void *)v6;
      unint64_t v7 = *((void *)v6 + 1);
      uint64_t v27 = v8;
      unint64_t v28 = v7;
LABEL_8:
      sub_1000336D4();
      uint64_t v19 = Data.init<A>(hexString:)();
      if (v20 >> 60 == 15)
      {
        uint64_t v21 = type metadata accessor for UUID();
        (*(void (**)(char *, uint64_t))(*(void *)(v21 - 8) + 8))(v3, v21);
        return 0;
      }
      else
      {
        uint64_t v23 = v19;
        unint64_t v24 = v20;
        uint64_t v27 = v19;
        unint64_t v28 = v20;
        sub_1000362FC();
        if (DataProtocol.isNull.getter()) {
          uint64_t v22 = 0;
        }
        else {
          uint64_t v22 = Data.trimmed.getter();
        }
        sub_100037A24(v23, v24);
        uint64_t v25 = type metadata accessor for UUID();
        (*(void (**)(char *, uint64_t))(*(void *)(v25 - 8) + 8))(v3, v25);
      }
      return v22;
    default:
      swift_bridgeObjectRelease();
      return 0;
  }
}

uint64_t sub_100D1C180()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord();
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v16[-1] - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for StableIdentifier();
  __chkstk_darwin(v4);
  unint64_t v6 = (char *)&v16[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100D20C84(v0 + v1[6], (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t My = type metadata accessor for Feature.FindMy();
      uint64_t v17 = My;
      uint64_t v18 = sub_100D20384((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
      unint64_t v10 = sub_10001D958(v16);
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v10, enum case for Feature.FindMy.spPlaySoundAll(_:), My);
      char v7 = isFeatureEnabled(_:)();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v16);
      break;
    case 2u:
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v11 = type metadata accessor for Feature.FindMy();
      uint64_t v17 = v11;
      uint64_t v18 = sub_100D20384((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
      unint64_t v12 = sub_10001D958(v16);
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v11 - 8) + 104))(v12, enum case for Feature.FindMy.spPlaySoundAll(_:), v11);
      LOBYTE(v11) = isFeatureEnabled(_:)();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v16);
      sub_100D20C84(v0, (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      char v7 = (v11 & 1) != 0 || sub_100DF1520(*(void *)&v3[v1[16]], *(void *)&v3[v1[17]]);
      sub_100D21554((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      uint64_t v13 = type metadata accessor for UUID();
      (*(void (**)(char *, uint64_t))(*(void *)(v13 - 8) + 8))(v6, v13);
      break;
    case 3u:
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v8 = type metadata accessor for UUID();
      (*(void (**)(char *, uint64_t))(*(void *)(v8 - 8) + 8))(v6, v8);
      char v7 = 1;
      break;
    default:
      swift_bridgeObjectRelease();
      char v7 = 0;
      break;
  }
  return v7 & 1;
}

uint64_t sub_100D1C588()
{
  uint64_t v1 = type metadata accessor for StableIdentifier();
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OwnedBeaconRecord();
  sub_100D20C84(v0 + *(int *)(v4 + 24), (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 2u:
      uint64_t v9 = sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v10 = &v3[*(int *)(v9 + 96)];
      int v5 = *v10;
      int v6 = v10[1];
      swift_bridgeObjectRelease();
      uint64_t v11 = type metadata accessor for UUID();
      (*(void (**)(char *, uint64_t))(*(void *)(v11 - 8) + 8))(v3, v11);
      break;
    case 3u:
      uint64_t v7 = sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      int v5 = v3[*(int *)(v7 + 96)];
      uint64_t v8 = type metadata accessor for UUID();
      (*(void (**)(char *, uint64_t))(*(void *)(v8 - 8) + 8))(v3, v8);
      int v6 = 0;
      break;
    default:
      sub_100D21554((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      int v5 = 0;
      int v6 = 1;
      break;
  }
  return v5 | (v6 << 8);
}

id sub_100D1C7BC()
{
  uint64_t v1 = type metadata accessor for StableIdentifier();
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OwnedBeaconRecord();
  sub_100D20C84(v0 + *(int *)(v4 + 24), (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      sub_100D21554((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      int v5 = (void **)&SPBeaconTypeDurian;
      goto LABEL_8;
    case 2u:
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      int v6 = (void **)&SPBeaconTypeAccessory;
      goto LABEL_6;
    case 3u:
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      int v6 = (void **)&SPBeaconTypeHele;
LABEL_6:
      uint64_t v7 = *v6;
      uint64_t v8 = type metadata accessor for UUID();
      uint64_t v9 = *(void (**)(char *, uint64_t))(*(void *)(v8 - 8) + 8);
      id v10 = v7;
      v9(v3, v8);
      return v10;
    case 4u:
      sub_100D21554((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      int v5 = (void **)&SPBeaconTypeVirtualMeDevice;
      goto LABEL_8;
    default:
      sub_100D21554((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      int v5 = (void **)&SPBeaconTypeSelfBeaconing;
LABEL_8:
      unint64_t v12 = *v5;
      return v12;
  }
}

uint64_t sub_100D1CA38()
{
  uint64_t v1 = type metadata accessor for StableIdentifier();
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for OwnedBeaconRecord();
  sub_100D20C84(v0 + *(int *)(v4 + 24), (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 3)
  {
    sub_10000588C((uint64_t *)&unk_1016565E0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }
  if (EnumCaseMultiPayload == 2)
  {
    sub_10000588C(&qword_1016555E0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    swift_bridgeObjectRelease();
    uint64_t v6 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t))(*(void *)(v6 - 8) + 8))(v3, v6);
    return 1;
  }
  sub_100D21554((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
  return 0;
}

uint64_t sub_100D1CBDC()
{
  uint64_t result = String.init<A>(_:)();
  qword_10170ECB0 = result;
  *(void *)algn_10170ECB8 = v1;
  return result;
}

uint64_t sub_100D1CC40()
{
  uint64_t v0 = type metadata accessor for URL();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001E384(v2, qword_10170ECC0);
  sub_100010324(v0, (uint64_t)qword_10170ECC0);
  type metadata accessor for BeaconStore(0);
  sub_100A9DB34((uint64_t)v4);
  URL.appendingPathComponent(_:isDirectory:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

void sub_100D1CD60()
{
  NSString v0 = String._bridgeToObjectiveC()();
  id v1 = [self handleWithEmailAddress:v0];

  qword_10170ECD8 = (uint64_t)v1;
}

void sub_100D1CDD8()
{
  id v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  int v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *v0;
  unint64_t v10 = v1[1];
  sub_1000361E0(v9, v10);
  Data.hash(into:)();
  sub_10001CFB8(v9, v10);
  uint64_t v11 = (int *)type metadata accessor for OwnedBeaconRecord();
  sub_100D20384(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  sub_101112A38();
  sub_10001D074((uint64_t)v1 + v11[7], (uint64_t)v8, &qword_101638CF0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  type metadata accessor for Date();
  sub_100D20384((unint64_t *)&unk_10163ADF0, (void (*)(uint64_t))&type metadata accessor for Date);
  dispatch thunk of Hashable.hash(into:)();
  unint64_t v12 = (uint64_t *)((char *)v1 + v11[9]);
  uint64_t v13 = *v12;
  unint64_t v14 = v12[1];
  sub_1000361E0(*v12, v14);
  Data.hash(into:)();
  sub_10001CFB8(v13, v14);
  uint64_t v15 = (uint64_t *)((char *)v1 + v11[10]);
  unint64_t v16 = v15[1];
  if (v16 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v17 = *v15;
    Hasher._combine(_:)(1u);
    sub_1000361E0(v17, v16);
    Data.hash(into:)();
    sub_100037A24(v17, v16);
  }
  uint64_t v18 = (uint64_t *)((char *)v1 + v11[11]);
  unint64_t v19 = v18[1];
  if (v19 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v20 = *v18;
    Hasher._combine(_:)(1u);
    sub_1000361E0(v20, v19);
    Data.hash(into:)();
    sub_100037A24(v20, v19);
  }
  uint64_t v21 = (uint64_t *)((char *)v1 + v11[12]);
  uint64_t v22 = *v21;
  unint64_t v23 = v21[1];
  sub_1000361E0(*v21, v23);
  Data.hash(into:)();
  sub_10001CFB8(v22, v23);
  unint64_t v24 = (uint64_t *)((char *)v1 + v11[13]);
  uint64_t v25 = *v24;
  unint64_t v26 = v24[1];
  sub_1000361E0(*v24, v26);
  Data.hash(into:)();
  sub_10001CFB8(v25, v26);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(uint64_t *)((char *)v1 + v11[16]));
  Hasher._combine(_:)(*(uint64_t *)((char *)v1 + v11[17]));
  Swift::UInt v27 = *((unsigned __int8 *)v1 + v11[18]);
  if (v27 == 3)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v27);
  }
  Hasher._combine(_:)(*((unsigned __int8 *)v1 + v11[19]));
  Hasher._combine(_:)(*((unsigned char *)v1 + v11[20]));
}

uint64_t sub_100D1D2A0(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_10165DD88);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100D215B4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v14 = *v3;
  char v15 = 0;
  sub_100037BB4();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = (int *)type metadata accessor for OwnedBeaconRecord();
    LOBYTE(v14) = 1;
    type metadata accessor for UUID();
    sub_100D20384(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v13 = v3;
    LOBYTE(v14) = 2;
    type metadata accessor for StableIdentifier();
    sub_100D20384((unint64_t *)&unk_10165DD90, (void (*)(uint64_t))type metadata accessor for StableIdentifier);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    unint64_t v10 = v13;
    LOBYTE(v14) = 3;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v14) = 4;
    type metadata accessor for Date();
    sub_100D20384((unint64_t *)&unk_10163ACE0, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v14 = *(_OWORD *)((char *)v10 + v9[9]);
    char v15 = 5;
    sub_1002A89B4();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v14 = *(_OWORD *)((char *)v10 + v9[10]);
    char v15 = 6;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    long long v14 = *(_OWORD *)((char *)v10 + v9[11]);
    char v15 = 7;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    long long v14 = *(_OWORD *)((char *)v10 + v9[12]);
    char v15 = 8;
    sub_10043C164();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v14 = *(_OWORD *)((char *)v10 + v9[13]);
    char v15 = 9;
    sub_10043C654();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v14) = 10;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v14) = 11;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v14) = 12;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v14) = 13;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v14) = *((unsigned char *)v13 + v9[19]);
    char v15 = 14;
    sub_100D2165C();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v14) = 15;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100D1D838@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v59 = a2;
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v61 = *(void *)(v3 - 8);
  uint64_t v62 = v3;
  __chkstk_darwin(v3);
  unint64_t v60 = (char *)&v57 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for StableIdentifier();
  __chkstk_darwin(v8);
  unint64_t v10 = (char *)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v63 = *(void *)(v11 - 8);
  uint64_t v64 = v11;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v65 = sub_10000588C(&qword_10165DD58);
  uint64_t v14 = *(void *)(v65 - 8);
  __chkstk_darwin(v65);
  unint64_t v16 = (char *)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v18 = __chkstk_darwin(v17);
  id v69 = (char *)&v57 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v70 = (int *)v18;
  v69[*(int *)(v18 + 72)] = 3;
  uint64_t v20 = a1[3];
  uint64_t v66 = (uint64_t)a1;
  sub_10001CD44(a1, v20);
  sub_100D215B4();
  uint64_t v67 = v16;
  uint64_t v21 = v68;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v21)
  {
    NSString v68 = v21;
    LODWORD(v67) = 0;
    unsigned int v22 = 0;
  }
  else
  {
    NSString v68 = v10;
    uint64_t v57 = v7;
    uint64_t v58 = v14;
    char v72 = 0;
    sub_100037AA0();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    id v33 = v69;
    *(_OWORD *)id v69 = v71;
    LOBYTE(v71) = 1;
    sub_100D20384((unint64_t *)&qword_10163B010, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v34 = v64;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    id v35 = v70;
    (*(void (**)(char *, char *, uint64_t))(v63 + 32))(&v33[v70[5]], v13, v34);
    LOBYTE(v71) = 2;
    sub_100D20384(&qword_10165DD68, (void (*)(uint64_t))type metadata accessor for StableIdentifier);
    uint64_t v36 = (uint64_t)v68;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    sub_100D214EC(v36, (uint64_t)&v33[v35[6]], (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    LOBYTE(v71) = 3;
    uint64_t v37 = (uint64_t)v57;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    sub_1002729C8(v37, (uint64_t)&v33[v35[7]]);
    LOBYTE(v71) = 4;
    sub_100D20384(&qword_10163ACC0, (void (*)(uint64_t))&type metadata accessor for Date);
    unint64_t v38 = v60;
    uint64_t v39 = v62;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, char *, uint64_t))(v61 + 32))(&v33[v35[8]], v38, v39);
    char v72 = 5;
    sub_1002A87F4();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(_OWORD *)&v33[v35[9]] = v71;
    char v72 = 6;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    *(_OWORD *)&v33[v35[10]] = v71;
    char v72 = 7;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    *(_OWORD *)&v33[v35[11]] = v71;
    char v72 = 8;
    sub_10043C110();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    *(_OWORD *)&v33[v70[12]] = v71;
    char v72 = 9;
    sub_10043C600();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    NSString v68 = 0;
    *(_OWORD *)&v69[v70[13]] = v71;
    LOBYTE(v71) = 10;
    uint64_t v40 = v68;
    uint64_t v41 = KeyedDecodingContainer.decode(_:forKey:)();
    NSString v68 = v40;
    if (v40)
    {
      (*(void (**)(char *, uint64_t))(v58 + 8))(v67, v65);
      LODWORD(v67) = 0;
      unsigned int v22 = 1023;
    }
    else
    {
      NSString v43 = (uint64_t *)&v69[v70[14]];
      *NSString v43 = v41;
      v43[1] = v42;
      LOBYTE(v71) = 11;
      id v44 = v68;
      uint64_t v45 = KeyedDecodingContainer.decode(_:forKey:)();
      NSString v68 = v44;
      if (!v44)
      {
        uint64_t v47 = (uint64_t *)&v69[v70[15]];
        *uint64_t v47 = v45;
        v47[1] = v46;
        LOBYTE(v71) = 12;
        unint64_t v48 = v68;
        uint64_t v49 = KeyedDecodingContainer.decode(_:forKey:)();
        NSString v68 = v48;
        if (!v48)
        {
          *(void *)&v69[v70[16]] = v49;
          LOBYTE(v71) = 13;
          id v50 = v68;
          uint64_t v51 = KeyedDecodingContainer.decode(_:forKey:)();
          NSString v68 = v50;
          if (!v50)
          {
            *(void *)&v69[v70[17]] = v51;
            char v72 = 14;
            sub_100D21608();
            long long v52 = v68;
            KeyedDecodingContainer.decode<A>(_:forKey:)();
            NSString v68 = v52;
            if (!v52)
            {
              v69[v70[19]] = v71;
              LOBYTE(v71) = 15;
              uint64_t v53 = v68;
              char v54 = KeyedDecodingContainer.decode(_:forKey:)();
              NSString v68 = v53;
              if (!v53)
              {
                char v55 = v54;
                (*(void (**)(char *, uint64_t))(v58 + 8))(v67, v65);
                uint64_t v56 = (uint64_t)v69;
                v69[v70[20]] = v55 & 1;
                sub_100D20C84(v56, v59, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
                _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v66);
                return sub_100D21554(v56, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
              }
            }
          }
        }
        (*(void (**)(char *, uint64_t))(v58 + 8))(v67, v65);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v66);
        unint64_t v23 = v69;
        sub_10001CFB8(*(void *)v69, *((void *)v69 + 1));
        LODWORD(v66) = 1;
        LODWORD(v67) = 1;
        LODWORD(v65) = 1;
        int v31 = 1;
        int v30 = 1;
        int v29 = 1;
        int v28 = 1;
        int v27 = 1;
        int v26 = 1;
        LOBYTE(v25) = 1;
LABEL_7:
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v63 + 8))(&v23[v70[5]], v64);
        if (v25) {
          goto LABEL_8;
        }
        goto LABEL_20;
      }
      (*(void (**)(char *, uint64_t))(v58 + 8))(v67, v65);
      unsigned int v22 = 2047;
      LODWORD(v67) = 1;
    }
  }
  unint64_t v23 = v69;
  uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v66);
  int v25 = (v22 >> 2) & 1;
  int v26 = (v22 >> 3) & 1;
  int v27 = (v22 >> 4) & 1;
  int v28 = (v22 >> 5) & 1;
  int v29 = (v22 >> 6) & 1;
  int v30 = (v22 >> 7) & 1;
  int v31 = (v22 >> 8) & 1;
  LODWORD(v65) = (v22 >> 9) & 1;
  if (v22)
  {
    uint64_t result = sub_10001CFB8(*(void *)v23, *((void *)v23 + 1));
    if ((v22 & 2) != 0) {
      goto LABEL_6;
    }
  }
  else if ((v22 & 2) != 0)
  {
LABEL_6:
    LODWORD(v66) = 0;
    goto LABEL_7;
  }
  LODWORD(v66) = 0;
  if ((v22 & 4) != 0)
  {
LABEL_8:
    uint64_t v32 = v70;
    uint64_t result = sub_100D21554((uint64_t)&v23[v70[6]], (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    if ((v26 & 1) == 0) {
      goto LABEL_9;
    }
    goto LABEL_21;
  }
LABEL_20:
  uint64_t v32 = v70;
  if (!v26)
  {
LABEL_9:
    if (v27) {
      goto LABEL_10;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t result = sub_10001DAB4((uint64_t)&v23[v32[7]], &qword_101638CF0);
  if (v27)
  {
LABEL_10:
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v61 + 8))(&v23[v32[8]], v62);
    if ((v28 & 1) == 0) {
      goto LABEL_11;
    }
    goto LABEL_23;
  }
LABEL_22:
  if (!v28)
  {
LABEL_11:
    if (v29) {
      goto LABEL_12;
    }
    goto LABEL_24;
  }
LABEL_23:
  uint64_t result = sub_10001CFB8(*(void *)&v23[v32[9]], *(void *)&v23[v32[9] + 8]);
  if (v29)
  {
LABEL_12:
    uint64_t result = sub_100037A24(*(void *)&v23[v32[10]], *(void *)&v23[v32[10] + 8]);
    if ((v30 & 1) == 0) {
      goto LABEL_13;
    }
    goto LABEL_25;
  }
LABEL_24:
  if (!v30)
  {
LABEL_13:
    if (v31) {
      goto LABEL_14;
    }
    goto LABEL_26;
  }
LABEL_25:
  uint64_t result = sub_100037A24(*(void *)&v23[v32[11]], *(void *)&v23[v32[11] + 8]);
  if (v31)
  {
LABEL_14:
    uint64_t result = sub_10001CFB8(*(void *)&v23[v32[12]], *(void *)&v23[v32[12] + 8]);
    if ((v65 & 1) == 0) {
      goto LABEL_15;
    }
    goto LABEL_27;
  }
LABEL_26:
  if (!v65)
  {
LABEL_15:
    if (v67) {
      goto LABEL_16;
    }
LABEL_28:
    if (!v66) {
      return result;
    }
    return swift_bridgeObjectRelease();
  }
LABEL_27:
  uint64_t result = sub_10001CFB8(*(void *)&v23[v32[13]], *(void *)&v23[v32[13] + 8]);
  if ((v67 & 1) == 0) {
    goto LABEL_28;
  }
LABEL_16:
  uint64_t result = swift_bridgeObjectRelease();
  if ((v66 & 1) == 0) {
    return result;
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_100D1E46C(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 56));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_100D1E4A4(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + *(int *)(a1 + 60));
  swift_bridgeObjectRetain();
  return v2;
}

uint64_t sub_100D1E4DC(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 64));
}

uint64_t sub_100D1E4E8(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 68));
}

BOOL sub_100D1E4F4(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for StableIdentifier();
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100D20C84(v1 + *(int *)(a1 + 24), (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
  BOOL v6 = swift_getEnumCaseMultiPayload() == 0;
  sub_100D21554((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
  return v6;
}

BOOL sub_100D1E5C4(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for StableIdentifier();
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100D20C84(v1 + *(int *)(a1 + 24), (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
  BOOL v6 = swift_getEnumCaseMultiPayload() == 1;
  sub_100D21554((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
  return v6;
}

uint64_t sub_100D1E698()
{
  return sub_10111198C() & 1;
}

BOOL sub_100D1E6C8(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for StableIdentifier();
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100D20C84(v1 + *(int *)(a1 + 24), (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
  BOOL v6 = swift_getEnumCaseMultiPayload() == 4;
  sub_100D21554((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
  return v6;
}

uint64_t sub_100D1E7A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10001D074(v2 + *(int *)(a1 + 28), a2, &qword_101638CF0);
}

Swift::Int sub_100D1E7CC()
{
  return Hasher._finalize()();
}

Swift::Int sub_100D1E810()
{
  return Hasher._finalize()();
}

uint64_t sub_100D1E84C()
{
  return static Date.< infix(_:_:)();
}

BOOL sub_100D1E85C()
{
  return (static Date.< infix(_:_:)() & 1) == 0;
}

BOOL sub_100D1E88C()
{
  return (static Date.< infix(_:_:)() & 1) == 0;
}

uint64_t sub_100D1E8B8()
{
  return static Date.< infix(_:_:)();
}

uint64_t sub_100D1E8CC(id *a1)
{
  uint64_t v124 = type metadata accessor for Date();
  uint64_t v120 = *(void *)(v124 - 8);
  __chkstk_darwin(v124);
  id v115 = (char *)&v115 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v119 = sub_10000588C((uint64_t *)&unk_10165C700);
  __chkstk_darwin(v119);
  uint64_t v123 = (uint64_t)&v115 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v116 = (uint64_t)&v115 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v121 = (uint64_t)&v115 - v8;
  __chkstk_darwin(v7);
  unint64_t v122 = (unint64_t)&v115 - v9;
  uint64_t v10 = sub_10000588C(&qword_101638CF0);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v118 = (uint64_t)&v115 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v115 - v13;
  static os_log_type_t.debug.getter();
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_101342130;
  id v16 = *a1;
  id v17 = [v16 description];
  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v20 = v19;

  *(void *)(v15 + 56) = &type metadata for String;
  *(void *)(v15 + 64) = sub_10000B4CC();
  *(void *)(v15 + 32) = v18;
  *(void *)(v15 + 40) = v20;
  sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
  uint64_t v21 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();

  id v22 = [v16 encryptedValues];
  swift_getObjectType();
  CKRecordKeyValueSetting.subscript.getter();
  long long v23 = v127;
  unint64_t v125 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v24 = sub_101110C7C();
  if (!*((void *)&v23 + 1))
  {
    swift_bridgeObjectRelease();
LABEL_6:
    uint64_t v27 = sub_101110C7C();
    *((void *)&v128 + 1) = &type metadata for String;
    unint64_t v129 = &protocol witness table for String;
    *(void *)&long long v127 = v27;
    *((void *)&v127 + 1) = v28;
    CKRecordKeyValueSetting.subscript.setter();
    goto LABEL_7;
  }
  if (v23 == __PAIR128__(v25, v24))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v26 & 1) == 0) {
    goto LABEL_6;
  }
LABEL_7:
  CKRecordKeyValueSetting.subscript.getter();
  long long v29 = v127;
  uint64_t v30 = v126 + v125[7];
  sub_10001D074(v30, (uint64_t)v14, &qword_101638CF0);
  uint64_t v31 = type metadata accessor for UUID();
  uint64_t v32 = *(void *)(v31 - 8);
  id v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48);
  if (v33(v14, 1, v31) == 1)
  {
    sub_10001DAB4((uint64_t)v14, &qword_101638CF0);
    if (!*((void *)&v29 + 1)) {
      goto LABEL_20;
    }
    goto LABEL_17;
  }
  NSString v117 = (void (*)(uint64_t))v29;
  uint64_t v34 = UUID.uuidString.getter();
  id v35 = v14;
  uint64_t v36 = (void (*)(uint64_t))v34;
  uint64_t v38 = v37;
  (*(void (**)(char *, uint64_t))(v32 + 8))(v35, v31);
  if (*((void *)&v29 + 1))
  {
    if (v38)
    {
      if (v117 != v36 || *((void *)&v29 + 1) != (void)v29)
      {
        char v114 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v39 = v120;
        if (v114) {
          goto LABEL_23;
        }
        goto LABEL_18;
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_20:
      uint64_t v39 = v120;
      goto LABEL_23;
    }
  }
  else if (!v38)
  {
    goto LABEL_20;
  }
LABEL_17:
  swift_bridgeObjectRelease();
  uint64_t v39 = v120;
LABEL_18:
  uint64_t v40 = v118;
  sub_10001D074(v30, v118, &qword_101638CF0);
  if (v33((char *)v40, 1, v31) == 1)
  {
    sub_10001DAB4(v40, &qword_101638CF0);
    long long v127 = 0u;
    long long v128 = 0u;
    unint64_t v129 = 0;
  }
  else
  {
    uint64_t v41 = UUID.uuidString.getter();
    *((void *)&v128 + 1) = &type metadata for String;
    unint64_t v129 = &protocol witness table for String;
    *(void *)&long long v127 = v41;
    *((void *)&v127 + 1) = v42;
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v40, v31);
  }
  CKRecordKeyValueSetting.subscript.setter();
LABEL_23:
  uint64_t v43 = v122;
  uint64_t v44 = v124;
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v45 = v126 + v125[8];
  uint64_t v46 = v121;
  NSString v117 = *(void (**)(uint64_t))(v39 + 16);
  uint64_t v118 = v45;
  v117(v121);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v39 + 56))(v46, 0, 1, v44);
  uint64_t v47 = v39;
  uint64_t v48 = v123;
  uint64_t v49 = v123 + *(int *)(v119 + 48);
  sub_10001D074(v43, v123, (uint64_t *)&unk_10163AC90);
  uint64_t v50 = v44;
  sub_10001D074(v46, v49, (uint64_t *)&unk_10163AC90);
  uint64_t v51 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48);
  if (v51(v48, 1, v44) == 1)
  {
    sub_10001DAB4(v46, (uint64_t *)&unk_10163AC90);
    uint64_t v50 = v124;
    sub_10001DAB4(v43, (uint64_t *)&unk_10163AC90);
    if (v51(v49, 1, v50) == 1)
    {
      sub_10001DAB4(v123, (uint64_t *)&unk_10163AC90);
      goto LABEL_30;
    }
    goto LABEL_28;
  }
  uint64_t v52 = v116;
  sub_10001D074(v48, v116, (uint64_t *)&unk_10163AC90);
  if (v51(v49, 1, v44) == 1)
  {
    sub_10001DAB4(v121, (uint64_t *)&unk_10163AC90);
    sub_10001DAB4(v122, (uint64_t *)&unk_10163AC90);
    (*(void (**)(uint64_t, uint64_t))(v120 + 8))(v52, v44);
LABEL_28:
    sub_10001DAB4(v123, (uint64_t *)&unk_10165C700);
LABEL_29:
    *((void *)&v128 + 1) = v50;
    unint64_t v129 = &protocol witness table for Date;
    uint64_t v53 = sub_10001D958((uint64_t *)&v127);
    ((void (*)(uint64_t *, uint64_t, uint64_t))v117)(v53, v118, v50);
    CKRecordKeyValueSetting.subscript.setter();
    goto LABEL_30;
  }
  uint64_t v67 = v120;
  NSString v68 = v115;
  (*(void (**)(char *, uint64_t, uint64_t))(v120 + 32))(v115, v49, v44);
  sub_100D20384(&qword_10163AFA0, (void (*)(uint64_t))&type metadata accessor for Date);
  char v69 = dispatch thunk of static Equatable.== infix(_:_:)();
  long long v70 = *(void (**)(char *, uint64_t))(v67 + 8);
  v70(v68, v124);
  sub_10001DAB4(v121, (uint64_t *)&unk_10163AC90);
  sub_10001DAB4(v122, (uint64_t *)&unk_10163AC90);
  v70((char *)v52, v124);
  uint64_t v50 = v124;
  sub_10001DAB4(v48, (uint64_t *)&unk_10163AC90);
  if ((v69 & 1) == 0) {
    goto LABEL_29;
  }
LABEL_30:
  CKRecordKeyValueSetting.subscript.getter();
  long long v54 = v127;
  char v55 = v125;
  uint64_t v56 = (uint64_t *)(v126 + v125[9]);
  uint64_t v57 = *v56;
  unint64_t v58 = v56[1];
  sub_1000361E0(*v56, v58);
  if (*((void *)&v54 + 1) >> 60 == 15)
  {
    sub_100037A24(v54, *((unint64_t *)&v54 + 1));
    sub_100037A24(v57, v58);
  }
  else
  {
    sub_100037A38(v54, *((unint64_t *)&v54 + 1));
    char v59 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v54, *((unint64_t *)&v54 + 1), v57, v58);
    sub_10001CFB8(v57, v58);
    sub_100037A24(v54, *((unint64_t *)&v54 + 1));
    sub_100037A24(v54, *((unint64_t *)&v54 + 1));
    if (v59) {
      goto LABEL_34;
    }
  }
  *((void *)&v128 + 1) = &type metadata for Data;
  unint64_t v129 = &protocol witness table for Data;
  *(void *)&long long v127 = v57;
  *((void *)&v127 + 1) = v58;
  sub_1000361E0(v57, v58);
  CKRecordKeyValueSetting.subscript.setter();
LABEL_34:
  uint64_t v60 = v126;
  uint64_t v61 = (uint64_t *)(v126 + v55[10]);
  uint64_t v62 = *v61;
  unint64_t v63 = v61[1];
  unint64_t v122 = v63 >> 60;
  uint64_t v123 = v62;
  uint64_t v64 = v55;
  if (v63 >> 60 == 15) {
    goto LABEL_42;
  }
  uint64_t v65 = v123;
  sub_1000361E0(v123, v63);
  CKRecordKeyValueSetting.subscript.getter();
  long long v66 = v127;
  if (*((void *)&v127 + 1) >> 60 == 15)
  {
    sub_1000361E0(v65, v63);
    sub_100037A24(v66, *((unint64_t *)&v66 + 1));
    sub_100037A24(v65, v63);
LABEL_40:
    *((void *)&v128 + 1) = &type metadata for Data;
    unint64_t v129 = &protocol witness table for Data;
    *(void *)&long long v127 = v65;
    *((void *)&v127 + 1) = v63;
    sub_100037A38(v65, v63);
    CKRecordKeyValueSetting.subscript.setter();
    goto LABEL_41;
  }
  sub_100037A38(v65, v63);
  sub_100037A38(v66, *((unint64_t *)&v66 + 1));
  char v71 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v66, *((unint64_t *)&v66 + 1), v65, v63);
  sub_100037A24(v65, v63);
  sub_100037A24(v66, *((unint64_t *)&v66 + 1));
  sub_100037A24(v66, *((unint64_t *)&v66 + 1));
  if ((v71 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_41:
  sub_100037A24(v65, v63);
  uint64_t v64 = v125;
LABEL_42:
  uint64_t v124 = v63;
  CKRecordKeyValueSetting.subscript.getter();
  long long v72 = v127;
  NSString v73 = (uint64_t *)(v60 + v64[12]);
  uint64_t v74 = *v73;
  unint64_t v75 = v73[1];
  sub_1000361E0(*v73, v75);
  if (*((void *)&v72 + 1) >> 60 == 15)
  {
    sub_100037A24(v72, *((unint64_t *)&v72 + 1));
    sub_100037A24(v74, v75);
  }
  else
  {
    sub_100037A38(v72, *((unint64_t *)&v72 + 1));
    char v76 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v72, *((unint64_t *)&v72 + 1), v74, v75);
    sub_10001CFB8(v74, v75);
    sub_100037A24(v72, *((unint64_t *)&v72 + 1));
    sub_100037A24(v72, *((unint64_t *)&v72 + 1));
    if (v76) {
      goto LABEL_46;
    }
  }
  *((void *)&v128 + 1) = &type metadata for Data;
  unint64_t v129 = &protocol witness table for Data;
  *(void *)&long long v127 = v74;
  *((void *)&v127 + 1) = v75;
  sub_1000361E0(v74, v75);
  CKRecordKeyValueSetting.subscript.setter();
LABEL_46:
  CKRecordKeyValueSetting.subscript.getter();
  long long v77 = v127;
  NSString v78 = (uint64_t *)(v126 + v125[13]);
  uint64_t v79 = *v78;
  unint64_t v80 = v78[1];
  sub_1000361E0(*v78, v80);
  if (*((void *)&v77 + 1) >> 60 == 15)
  {
    sub_100037A24(v77, *((unint64_t *)&v77 + 1));
    sub_100037A24(v79, v80);
    id v81 = v125;
LABEL_49:
    *((void *)&v128 + 1) = &type metadata for Data;
    unint64_t v129 = &protocol witness table for Data;
    *(void *)&long long v127 = v79;
    *((void *)&v127 + 1) = v80;
    sub_1000361E0(v79, v80);
    CKRecordKeyValueSetting.subscript.setter();
    goto LABEL_50;
  }
  sub_100037A38(v77, *((unint64_t *)&v77 + 1));
  char v82 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v77, *((unint64_t *)&v77 + 1), v79, v80);
  sub_10001CFB8(v79, v80);
  sub_100037A24(v77, *((unint64_t *)&v77 + 1));
  sub_100037A24(v77, *((unint64_t *)&v77 + 1));
  id v81 = v125;
  if ((v82 & 1) == 0) {
    goto LABEL_49;
  }
LABEL_50:
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v83 = v126;
  unint64_t v84 = (unint64_t *)(v126 + v81[14]);
  unint64_t v86 = *v84;
  unint64_t v85 = v84[1];
  if (!*((void *)&v127 + 1)) {
    goto LABEL_54;
  }
  if (v127 == __PAIR128__(v85, v86))
  {
    swift_bridgeObjectRelease();
    goto LABEL_55;
  }
  char v87 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  if ((v87 & 1) == 0)
  {
LABEL_54:
    *((void *)&v128 + 1) = &type metadata for String;
    unint64_t v129 = &protocol witness table for String;
    *(void *)&long long v127 = v86;
    *((void *)&v127 + 1) = v85;
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
  }
LABEL_55:
  CKRecordKeyValueSetting.subscript.getter();
  char v88 = (unint64_t *)(v83 + v81[15]);
  unint64_t v90 = *v88;
  unint64_t v89 = v88[1];
  if (!*((void *)&v127 + 1))
  {
    unint64_t v91 = v122;
LABEL_60:
    *((void *)&v128 + 1) = &type metadata for String;
    unint64_t v129 = &protocol witness table for String;
    *(void *)&long long v127 = v90;
    *((void *)&v127 + 1) = v89;
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
    goto LABEL_61;
  }
  if (v127 == __PAIR128__(v89, v90))
  {
    swift_bridgeObjectRelease();
    unint64_t v91 = v122;
    goto LABEL_61;
  }
  char v92 = _stringCompareWithSmolCheck(_:_:expecting:)();
  swift_bridgeObjectRelease();
  unint64_t v91 = v122;
  if ((v92 & 1) == 0) {
    goto LABEL_60;
  }
LABEL_61:
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v93 = *(void *)(v83 + v81[16]);
  if (BYTE8(v127))
  {
    unint64_t v94 = v124;
LABEL_64:
    *((void *)&v128 + 1) = &type metadata for Int;
    unint64_t v129 = &protocol witness table for Int;
    *(void *)&long long v127 = v93;
    CKRecordKeyValueSetting.subscript.setter();
    goto LABEL_65;
  }
  unint64_t v94 = v124;
  if ((void)v127 != v93) {
    goto LABEL_64;
  }
LABEL_65:
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v95 = *(void *)(v83 + v81[17]);
  if ((BYTE8(v127) & 1) != 0 || (void)v127 != v95)
  {
    *((void *)&v128 + 1) = &type metadata for Int;
    unint64_t v129 = &protocol witness table for Int;
    *(void *)&long long v127 = v95;
    CKRecordKeyValueSetting.subscript.setter();
  }
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v96 = *(unsigned __int8 *)(v83 + v81[18]);
  if (BYTE8(v127))
  {
    if (v96 == 3) {
      goto LABEL_76;
    }
    goto LABEL_74;
  }
  if (v96 == 3)
  {
    unint64_t v129 = 0;
    long long v127 = 0u;
    long long v128 = 0u;
LABEL_75:
    CKRecordKeyValueSetting.subscript.setter();
    goto LABEL_76;
  }
  if ((void)v127 != v96)
  {
LABEL_74:
    *((void *)&v128 + 1) = &type metadata for Int;
    unint64_t v129 = &protocol witness table for Int;
    *(void *)&long long v127 = v96;
    goto LABEL_75;
  }
LABEL_76:
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v97 = *(unsigned __int8 *)(v83 + v81[19]);
  if ((BYTE8(v127) & 1) != 0 || (void)v127 != v97)
  {
    *((void *)&v128 + 1) = &type metadata for Int;
    unint64_t v129 = &protocol witness table for Int;
    *(void *)&long long v127 = v97;
    CKRecordKeyValueSetting.subscript.setter();
  }
  if (v91 <= 0xE)
  {
    uint64_t v101 = v123;
    sub_1000361E0(v123, v94);
    CKRecordKeyValueSetting.subscript.getter();
    long long v102 = v127;
    if (*((void *)&v127 + 1) >> 60 == 15)
    {
      sub_1000361E0(v101, v94);
      sub_100037A24(v102, *((unint64_t *)&v102 + 1));
      sub_100037A24(v101, v94);
    }
    else
    {
      sub_100037A38(v101, v94);
      sub_100037A38(v102, *((unint64_t *)&v102 + 1));
      char v103 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v102, *((unint64_t *)&v102 + 1), v101, v94);
      sub_100037A24(v101, v94);
      sub_100037A24(v102, *((unint64_t *)&v102 + 1));
      sub_100037A24(v102, *((unint64_t *)&v102 + 1));
      if (v103)
      {
LABEL_86:
        sub_100037A24(v101, v94);
        goto LABEL_87;
      }
    }
    *((void *)&v128 + 1) = &type metadata for Data;
    unint64_t v129 = &protocol witness table for Data;
    *(void *)&long long v127 = v101;
    *((void *)&v127 + 1) = v94;
    sub_100037A38(v101, v94);
    CKRecordKeyValueSetting.subscript.setter();
    goto LABEL_86;
  }
  NSString v98 = String._bridgeToObjectiveC()();
  id v99 = [v22 objectForKeyedSubscript:v98];
  swift_unknownObjectRelease();

  if (v99)
  {
    NSString v100 = String._bridgeToObjectiveC()();
    [v22 setObject:0 forKeyedSubscript:v100];
  }
LABEL_87:
  uint64_t v104 = v83 + v81[11];
  unint64_t v105 = *(void *)(v104 + 8);
  if (v105 >> 60 != 15)
  {
    uint64_t v109 = *(void *)v104;
    sub_1000361E0(*(void *)v104, *(void *)(v104 + 8));
    CKRecordKeyValueSetting.subscript.getter();
    long long v110 = v127;
    if (*((void *)&v127 + 1) >> 60 == 15)
    {
      sub_1000361E0(v109, v105);
      sub_100037A24(v110, *((unint64_t *)&v110 + 1));
      sub_100037A24(v109, v105);
    }
    else
    {
      sub_100037A38(v109, v105);
      sub_100037A38(v110, *((unint64_t *)&v110 + 1));
      char v111 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v110, *((unint64_t *)&v110 + 1), v109, v105);
      sub_100037A24(v109, v105);
      sub_100037A24(v110, *((unint64_t *)&v110 + 1));
      sub_100037A24(v110, *((unint64_t *)&v110 + 1));
      if (v111)
      {
LABEL_94:
        sub_100037A24(v109, v105);
        id v81 = v125;
        uint64_t v83 = v126;
        goto LABEL_95;
      }
    }
    *((void *)&v128 + 1) = &type metadata for Data;
    unint64_t v129 = &protocol witness table for Data;
    *(void *)&long long v127 = v109;
    *((void *)&v127 + 1) = v105;
    sub_1000361E0(v109, v105);
    CKRecordKeyValueSetting.subscript.setter();
    goto LABEL_94;
  }
  NSString v106 = String._bridgeToObjectiveC()();
  id v107 = [v22 objectForKeyedSubscript:v106];
  swift_unknownObjectRelease();

  if (v107)
  {
    NSString v108 = String._bridgeToObjectiveC()();
    [v22 setObject:0 forKeyedSubscript:v108];
  }
LABEL_95:
  CKRecordKeyValueSetting.subscript.getter();
  int v112 = *(unsigned __int8 *)(v83 + v81[20]);
  if v127 == 2 || ((v112 ^ v127))
  {
    *((void *)&v128 + 1) = &type metadata for Bool;
    unint64_t v129 = &protocol witness table for Bool;
    LOBYTE(v127) = v112;
    CKRecordKeyValueSetting.subscript.setter();
  }
  return swift_unknownObjectRelease();
}

unint64_t sub_100D1FEA4(char a1)
{
  unint64_t result = 0xD000000000000010;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x696669746E656469;
      break;
    case 3:
      unint64_t result = 0x65644970756F7267;
      break;
    case 4:
      unint64_t result = 0x44676E6972696170;
      break;
    case 5:
      unint64_t result = 0x6553646572616873;
      break;
    case 6:
      unint64_t result = 0xD000000000000015;
      break;
    case 7:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 8:
      unint64_t result = 0x4B65746176697270;
      break;
    case 9:
      unint64_t result = 0x654B63696C627570;
      break;
    case 10:
      unint64_t result = 0x6C65646F6DLL;
      break;
    case 11:
      unint64_t result = 0x65566D6574737973;
      break;
    case 12:
      unint64_t result = 0x6449726F646E6576;
      break;
    case 13:
      unint64_t result = 0x49746375646F7270;
      break;
    case 14:
      unint64_t result = 0x4C79726574746162;
      break;
    case 15:
      unint64_t result = 0x7375655A7369;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_100D200B8(char a1)
{
  unint64_t result = 0xD000000000000010;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x696669746E656469;
      break;
    case 3:
      unint64_t result = 0x65644970756F7267;
      break;
    case 4:
      unint64_t result = 0x44676E6972696170;
      break;
    case 5:
      unint64_t result = 0x6553646572616873;
      break;
    case 6:
      unint64_t result = 0xD000000000000015;
      break;
    case 7:
      unint64_t result = 0xD00000000000001BLL;
      break;
    case 8:
      unint64_t result = 0x4B65746176697270;
      break;
    case 9:
      unint64_t result = 0x654B63696C627570;
      break;
    case 10:
      unint64_t result = 0x6C65646F6DLL;
      break;
    case 11:
      unint64_t result = 0x65566D6574737973;
      break;
    case 12:
      unint64_t result = 0x6449726F646E6576;
      break;
    case 13:
      unint64_t result = 0x49746375646F7270;
      break;
    case 14:
      unint64_t result = 0x4C79726574746162;
      break;
    case 15:
      unint64_t result = 0x7375655A7369;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100D202D0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100D1D838(a1, a2);
}

uint64_t sub_100D202E8(void *a1)
{
  return sub_100D1D2A0(a1);
}

uint64_t sub_100D20300(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100D20384(&qword_10165DD20, (void (*)(uint64_t))type metadata accessor for OwnedBeaconRecord);
  uint64_t result = sub_100D20384(&qword_10165DD28, (void (*)(uint64_t))type metadata accessor for OwnedBeaconRecord);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_100D20384(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100D203CC(uint64_t a1)
{
  uint64_t result = sub_100D20384(&qword_10165DD30, (void (*)(uint64_t))type metadata accessor for OwnedBeaconRecord);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100D20424()
{
  return sub_100D20384(&qword_10165DD38, (void (*)(uint64_t))type metadata accessor for OwnedBeaconRecord);
}

uint64_t sub_100D2046C(uint64_t a1)
{
  uint64_t result = sub_100D20384(&qword_10165DD40, (void (*)(uint64_t))type metadata accessor for OwnedBeaconRecord);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100D204C4(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = sub_100D1FEA4(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_100D1FEA4(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int sub_100D20550()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_100D1FEA4(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_100D205B4()
{
  sub_100D1FEA4(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100D20608()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_100D1FEA4(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t sub_100D20668@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100D21A18(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_100D20698@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_100D1FEA4(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_100D206C4()
{
  return sub_100D200B8(*v0);
}

unint64_t sub_100D206CC@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100D21A18(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100D206F4(uint64_t a1)
{
  unint64_t v2 = sub_100D215B4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100D20730(uint64_t a1)
{
  unint64_t v2 = sub_100D215B4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100D2076C@<X0>(uint64_t a1@<X1>, char *a2@<X8>)
{
  uint64_t v4 = sub_10000588C(&qword_10163BBB0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for OwnedBeaconRecord();
  sub_100AE311C(a1 + *(int *)(v7 + 20), (uint64_t)v6);
  uint64_t v8 = type metadata accessor for BeaconProductInfoRecord();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v6, 1, v8) == 1)
  {
    uint64_t result = sub_10001DAB4((uint64_t)v6, &qword_10163BBB0);
    char v10 = 2;
  }
  else
  {
    char v10 = v6[*(int *)(v8 + 20)];
    uint64_t result = sub_100D21554((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
  }
  *a2 = v10;
  return result;
}

uint64_t sub_100D2088C()
{
  char v1 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v19 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v4 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v5 = v0 + v3 + v1[5];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  uint64_t v9 = v0 + v3 + v1[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 24) & ~v2;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 24) & ~v2;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v3 = v18;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v10 = v4 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6)) {
    v8(v10, v6);
  }
  uint64_t v11 = v4 + v1[8];
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  sub_10001CFB8(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v13 = (uint64_t *)(v4 + v1[10]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_10001CFB8(*v13, v14);
  }
  uint64_t v15 = (uint64_t *)(v4 + v1[11]);
  unint64_t v16 = v15[1];
  if (v16 >> 60 != 15) {
    sub_10001CFB8(*v15, v16);
  }
  sub_10001CFB8(*(void *)(v4 + v1[12]), *(void *)(v4 + v1[12] + 8));
  sub_10001CFB8(*(void *)(v4 + v1[13]), *(void *)(v4 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v3 + v19, v2 | 7);
}

uint64_t sub_100D20C10@<X0>(char *a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_100D2076C(v4, a1);
}

uint64_t sub_100D20C84(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100D20CEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v82 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C((uint64_t *)&unk_10166EAF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v82 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C(&qword_101638CF0);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  unint64_t v14 = (char *)&v82 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12);
  id v17 = (char *)&v82 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v82 - v18;
  if ((_s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8)) & 1) == 0)goto LABEL_23; {
  uint64_t v85 = v5;
  }
  uint64_t v20 = type metadata accessor for OwnedBeaconRecord();
  if ((static UUID.== infix(_:_:)() & 1) == 0
    || (sub_101113BD4(a1 + *(int *)(v20 + 24), a2 + *(int *)(v20 + 24)) & 1) == 0)
  {
    goto LABEL_23;
  }
  uint64_t v21 = *(int *)(v20 + 28);
  uint64_t v82 = a1;
  sub_10001D074(a1 + v21, (uint64_t)v19, &qword_101638CF0);
  uint64_t v83 = a2;
  unint64_t v84 = (int *)v20;
  sub_10001D074(a2 + *(int *)(v20 + 28), (uint64_t)v17, &qword_101638CF0);
  uint64_t v22 = (uint64_t)&v10[*(int *)(v8 + 48)];
  sub_10001D074((uint64_t)v19, (uint64_t)v10, &qword_101638CF0);
  sub_10001D074((uint64_t)v17, v22, &qword_101638CF0);
  long long v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v85 + 48);
  if (v23((uint64_t)v10, 1, v4) == 1)
  {
    sub_10001DAB4((uint64_t)v17, &qword_101638CF0);
    sub_10001DAB4((uint64_t)v19, &qword_101638CF0);
    if (v23(v22, 1, v4) == 1)
    {
      sub_10001DAB4((uint64_t)v10, &qword_101638CF0);
      goto LABEL_11;
    }
LABEL_9:
    sub_10001DAB4((uint64_t)v10, (uint64_t *)&unk_10166EAF0);
    goto LABEL_23;
  }
  sub_10001D074((uint64_t)v10, (uint64_t)v14, &qword_101638CF0);
  if (v23(v22, 1, v4) == 1)
  {
    sub_10001DAB4((uint64_t)v17, &qword_101638CF0);
    sub_10001DAB4((uint64_t)v19, &qword_101638CF0);
    (*(void (**)(char *, uint64_t))(v85 + 8))(v14, v4);
    goto LABEL_9;
  }
  uint64_t v24 = v22;
  uint64_t v25 = v85;
  (*(void (**)(char *, uint64_t, uint64_t))(v85 + 32))(v7, v24, v4);
  sub_100D20384((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
  char v26 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v27 = *(void (**)(char *, uint64_t))(v25 + 8);
  v27(v7, v4);
  sub_10001DAB4((uint64_t)v17, &qword_101638CF0);
  sub_10001DAB4((uint64_t)v19, &qword_101638CF0);
  v27(v14, v4);
  sub_10001DAB4((uint64_t)v10, &qword_101638CF0);
  if ((v26 & 1) == 0) {
    goto LABEL_23;
  }
LABEL_11:
  uint64_t v28 = v83;
  long long v29 = v84;
  uint64_t v30 = v82;
  if ((static Date.== infix(_:_:)() & 1) == 0) {
    goto LABEL_23;
  }
  uint64_t v31 = v29[9];
  uint64_t v32 = *(void *)(v30 + v31);
  unint64_t v33 = *(void *)(v30 + v31 + 8);
  uint64_t v34 = (uint64_t *)(v28 + v31);
  uint64_t v35 = *v34;
  unint64_t v36 = v34[1];
  sub_1000361E0(v32, v33);
  sub_1000361E0(v35, v36);
  char v37 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v32, v33, v35, v36);
  sub_10001CFB8(v35, v36);
  sub_10001CFB8(v32, v33);
  if ((v37 & 1) == 0) {
    goto LABEL_23;
  }
  uint64_t v38 = v29[10];
  uint64_t v39 = *(void *)(v30 + v38);
  unint64_t v40 = *(void *)(v30 + v38 + 8);
  uint64_t v41 = (uint64_t *)(v28 + v38);
  uint64_t v42 = *v41;
  unint64_t v43 = v41[1];
  if (v40 >> 60 != 15)
  {
    if (v43 >> 60 == 15) {
      goto LABEL_22;
    }
    sub_100037A38(v39, v40);
    sub_100037A38(v42, v43);
    char v44 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v39, v40, v42, v43);
    sub_100037A24(v42, v43);
    sub_100037A24(v39, v40);
    if (v44) {
      goto LABEL_18;
    }
LABEL_23:
    char v47 = 0;
    return v47 & 1;
  }
  if (v43 >> 60 != 15) {
    goto LABEL_22;
  }
LABEL_18:
  uint64_t v45 = v84[11];
  uint64_t v39 = *(void *)(v30 + v45);
  unint64_t v40 = *(void *)(v30 + v45 + 8);
  uint64_t v46 = (uint64_t *)(v28 + v45);
  uint64_t v42 = *v46;
  unint64_t v43 = v46[1];
  if (v40 >> 60 == 15)
  {
    if (v43 >> 60 == 15) {
      goto LABEL_26;
    }
LABEL_22:
    sub_100037A38(v39, v40);
    sub_100037A38(v42, v43);
    sub_100037A24(v39, v40);
    sub_100037A24(v42, v43);
    goto LABEL_23;
  }
  if (v43 >> 60 == 15) {
    goto LABEL_22;
  }
  sub_100037A38(v39, v40);
  sub_100037A38(v42, v43);
  char v49 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v39, v40, v42, v43);
  sub_100037A24(v42, v43);
  sub_100037A24(v39, v40);
  if ((v49 & 1) == 0) {
    goto LABEL_23;
  }
LABEL_26:
  uint64_t v50 = v84;
  uint64_t v51 = v84[12];
  uint64_t v52 = *(void *)(v30 + v51);
  unint64_t v53 = *(void *)(v30 + v51 + 8);
  long long v54 = (uint64_t *)(v28 + v51);
  uint64_t v55 = *v54;
  unint64_t v56 = v54[1];
  sub_1000361E0(v52, v53);
  sub_1000361E0(v55, v56);
  char v57 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v52, v53, v55, v56);
  sub_10001CFB8(v55, v56);
  sub_10001CFB8(v52, v53);
  if ((v57 & 1) == 0) {
    goto LABEL_23;
  }
  uint64_t v58 = v50[13];
  uint64_t v59 = *(void *)(v30 + v58);
  unint64_t v60 = *(void *)(v30 + v58 + 8);
  uint64_t v61 = (uint64_t *)(v28 + v58);
  uint64_t v62 = *v61;
  unint64_t v63 = v61[1];
  sub_1000361E0(v59, v60);
  sub_1000361E0(v62, v63);
  char v64 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v59, v60, v62, v63);
  sub_10001CFB8(v62, v63);
  sub_10001CFB8(v59, v60);
  if ((v64 & 1) == 0) {
    goto LABEL_23;
  }
  uint64_t v65 = v50[14];
  uint64_t v66 = *(void *)(v30 + v65);
  uint64_t v67 = *(void *)(v30 + v65 + 8);
  NSString v68 = (void *)(v28 + v65);
  if (v66 == *v68 && v67 == v68[1] || (v69 = _stringCompareWithSmolCheck(_:_:expecting:)(), char v47 = 0, (v69 & 1) != 0))
  {
    if ((uint64_t v70 = v50[15],
          uint64_t v71 = *(void *)(v30 + v70),
          uint64_t v72 = *(void *)(v30 + v70 + 8),
          NSString v73 = (void *)(v28 + v70),
          v71 == *v73)
      && v72 == v73[1]
      || (v74 = _stringCompareWithSmolCheck(_:_:expecting:)(), char v47 = 0, (v74 & 1) != 0))
    {
      if (*(void *)(v30 + v50[16]) != *(void *)(v28 + v50[16])
        || *(void *)(v30 + v50[17]) != *(void *)(v28 + v50[17]))
      {
        goto LABEL_23;
      }
      uint64_t v75 = v50[18];
      int v76 = *(unsigned __int8 *)(v30 + v75);
      int v77 = *(unsigned __int8 *)(v28 + v75);
      if (v76 == 3)
      {
        BOOL v78 = v77 == 3;
        uint64_t v80 = v83;
        uint64_t v79 = v84;
        uint64_t v81 = v82;
        if (!v78) {
          goto LABEL_23;
        }
LABEL_43:
        if (*(unsigned __int8 *)(v81 + v79[19]) == *(unsigned __int8 *)(v80 + v79[19]))
        {
          char v47 = *(unsigned char *)(v82 + v84[20]) ^ *(unsigned char *)(v83 + v84[20]) ^ 1;
          return v47 & 1;
        }
        goto LABEL_23;
      }
      char v47 = 0;
      if (v77 != 3)
      {
        BOOL v78 = v76 == v77;
        uint64_t v80 = v83;
        uint64_t v79 = v84;
        uint64_t v81 = v82;
        if (v78) {
          goto LABEL_43;
        }
      }
    }
  }
  return v47 & 1;
}

unint64_t sub_100D21498()
{
  unint64_t result = qword_10165DD50;
  if (!qword_10165DD50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165DD50);
  }
  return result;
}

uint64_t sub_100D214EC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100D21554(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_100D215B4()
{
  unint64_t result = qword_10165DD60;
  if (!qword_10165DD60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165DD60);
  }
  return result;
}

unint64_t sub_100D21608()
{
  unint64_t result = qword_10165DD80;
  if (!qword_10165DD80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165DD80);
  }
  return result;
}

unint64_t sub_100D2165C()
{
  unint64_t result = qword_10165DDA8;
  if (!qword_10165DDA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165DDA8);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for OwnedBeaconRecord.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 15 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 15) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF1) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF0)
  {
    unsigned int v6 = ((a2 - 241) >> 8) + 1;
    *unint64_t result = a2 + 15;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100D2177CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 15;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OwnedBeaconRecord.CodingKeys()
{
  return &type metadata for OwnedBeaconRecord.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for OwnedBeaconRecord.OwnedBeaconRecordConversionError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100D21880);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OwnedBeaconRecord.OwnedBeaconRecordConversionError()
{
  return &type metadata for OwnedBeaconRecord.OwnedBeaconRecordConversionError;
}

unint64_t sub_100D218BC()
{
  unint64_t result = qword_10165DDB0;
  if (!qword_10165DDB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165DDB0);
  }
  return result;
}

unint64_t sub_100D21914()
{
  unint64_t result = qword_10165DDB8;
  if (!qword_10165DDB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165DDB8);
  }
  return result;
}

unint64_t sub_100D2196C()
{
  unint64_t result = qword_10165DDC0;
  if (!qword_10165DDC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165DDC0);
  }
  return result;
}

unint64_t sub_100D219C4()
{
  unint64_t result = qword_10165DDC8;
  if (!qword_10165DDC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165DDC8);
  }
  return result;
}

unint64_t sub_100D21A18(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1015A3478, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0x10) {
    return 16;
  }
  else {
    return v3;
  }
}

uint64_t sub_100D21A64()
{
  uint64_t result = Data.init(base64Encoded:options:)();
  qword_10165DDD0 = result;
  qword_10165DDD8 = v1;
  return result;
}

uint64_t sub_100D21AA4(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for HashAlgorithm();
  uint64_t v80 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unsigned int v6 = (char *)v75 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for String.Encoding();
  uint64_t v83 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v82 = (char *)v75 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101637310 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_100010324(v9, (uint64_t)qword_10170F068);
  sub_100037A38(a1, a2);
  sub_100037A38(a1, a2);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.info.getter();
  BOOL v12 = os_log_type_enabled(v10, v11);
  uint64_t v79 = v6;
  uint64_t v84 = v7;
  if (v12)
  {
    uint64_t v85 = v4;
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v86 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136315138;
    if (a2 >> 60 == 15)
    {
      uint64_t v14 = 0;
      unint64_t v15 = 0xE000000000000000;
    }
    else
    {
      uint64_t v14 = Data.hexString.getter();
      unint64_t v15 = v16;
    }
    uint64_t v88 = sub_1008FA0F0(v14, v15, &v86);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100037A24(a1, a2);
    sub_100037A24(a1, a2);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, " E1 encryption key from server: %s", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v4 = v85;
  }
  else
  {
    sub_100037A24(a1, a2);
    sub_100037A24(a1, a2);
  }
  id v17 = [self defaultStore];
  if (v17)
  {
    id v18 = v17;
    uint64_t v85 = a1;
    unint64_t v19 = a2;
    if (a2 >> 60 == 15)
    {
      if (qword_1016370C0 != -1) {
        swift_once();
      }
      unint64_t v19 = qword_10165DDD8;
      if ((unint64_t)qword_10165DDD8 >> 60 == 15)
      {
        if (qword_1016370D0 != -1) {
          swift_once();
        }
        sub_100010324(v9, (uint64_t)qword_10170ECF8);
        uint64_t v20 = Logger.logObject.getter();
        os_log_type_t v21 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v20, v21))
        {
          uint64_t v22 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v22 = 0;
          _os_log_impl((void *)&_mh_execute_header, v20, v21, " Invalid server public key.", v22, 2u);
          swift_slowDealloc();
        }

        return 0;
      }
      uint64_t v85 = qword_10165DDD0;
      sub_1000361E0(qword_10165DDD0, qword_10165DDD8);
    }
    sub_100037A38(a1, a2);
    id v23 = [v18 aa_primaryAppleAccount];
    uint64_t v78 = v9;
    if (v23)
    {
      uint64_t v24 = v23;
      id v25 = [v23 aa_personID];
      if (v25)
      {
        char v26 = v25;
        uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v29 = v28;

        if (qword_1016370D0 != -1) {
          swift_once();
        }
        uint64_t v30 = sub_100010324(v9, (uint64_t)qword_10170ECF8);
        swift_bridgeObjectRetain_n();
        v75[1] = v30;
        uint64_t v31 = Logger.logObject.getter();
        os_log_type_t v32 = static os_log_type_t.debug.getter();
        BOOL v33 = os_log_type_enabled(v31, v32);
        id v77 = v24;
        if (v33)
        {
          uint64_t v34 = (uint8_t *)swift_slowAlloc();
          uint64_t v35 = swift_slowAlloc();
          id v76 = v18;
          uint64_t v86 = v35;
          *(_DWORD *)uint64_t v34 = 136315138;
          swift_bridgeObjectRetain();
          uint64_t v88 = sub_1008FA0F0(v27, v29, &v86);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v31, v32, "DSID: %s", v34, 0xCu);
          swift_arrayDestroy();
          id v18 = v76;
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        uint64_t v55 = v85;
        unint64_t v56 = v82;
        static String.Encoding.utf8.getter();
        uint64_t v57 = String.data(using:allowLossyConversion:)();
        unint64_t v59 = v58;
        (*(void (**)(char *, uint64_t))(v83 + 8))(v56, v84);
        if (v59 >> 60 == 15)
        {
          swift_bridgeObjectRetain();
          unint64_t v60 = Logger.logObject.getter();
          os_log_type_t v61 = static os_log_type_t.error.getter();
          if (!os_log_type_enabled(v60, v61))
          {
            swift_bridgeObjectRelease_n();

            sub_10001CFB8(v55, v19);
            return 0;
          }
          uint64_t v62 = swift_slowAlloc();
          uint64_t v63 = swift_slowAlloc();
          id v76 = v18;
          uint64_t v86 = v63;
          *(_DWORD *)uint64_t v62 = 141558275;
          uint64_t v88 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v62 + 12) = 2081;
          unint64_t v48 = v19;
          swift_bridgeObjectRetain();
          uint64_t v88 = sub_1008FA0F0(v27, v29, &v86);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v60, v61, "Invalid DSID %{private,mask.hash}s", (uint8_t *)v62, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          uint64_t v49 = v55;
          goto LABEL_39;
        }
        swift_bridgeObjectRelease();
        uint64_t v51 = v79;
        uint64_t v50 = v80;
        (*(void (**)(char *, void, uint64_t))(v80 + 104))(v79, enum case for HashAlgorithm.sha256(_:), v4);
        uint64_t v52 = Data.hash(algorithm:)();
        unint64_t v54 = v64;

        sub_100037A24(v57, v59);
        goto LABEL_41;
      }
    }
    if (qword_1016370D0 != -1) {
      swift_once();
    }
    sub_100010324(v9, (uint64_t)qword_10170ECF8);
    unint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v38 = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Failed to obtain DSID from account. Using device serial number instead to support account signed out.", v38, 2u);
      swift_slowDealloc();
    }

    uint64_t v40 = *(void *)(v81 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_serialNumber);
    unint64_t v39 = *(void *)(v81 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_serialNumber + 8);
    swift_bridgeObjectRetain();
    uint64_t v41 = v82;
    static String.Encoding.utf8.getter();
    uint64_t v42 = String.data(using:allowLossyConversion:)();
    unint64_t v44 = v43;
    (*(void (**)(char *, uint64_t))(v83 + 8))(v41, v84);
    if (v44 >> 60 == 15)
    {
      swift_bridgeObjectRetain();
      uint64_t v45 = Logger.logObject.getter();
      os_log_type_t v46 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v45, v46))
      {
        sub_10001CFB8(v85, v19);

        swift_bridgeObjectRelease_n();
        return 0;
      }
      uint64_t v47 = swift_slowAlloc();
      uint64_t v86 = swift_slowAlloc();
      *(_DWORD *)uint64_t v47 = 141558275;
      uint64_t v88 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v47 + 12) = 2081;
      unint64_t v48 = v19;
      swift_bridgeObjectRetain();
      uint64_t v88 = sub_1008FA0F0(v40, v39, &v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Invalid serial number %{private,mask.hash}s", (uint8_t *)v47, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v49 = v85;
LABEL_39:
      sub_10001CFB8(v49, v48);
      return 0;
    }
    swift_bridgeObjectRelease();
    uint64_t v51 = v79;
    uint64_t v50 = v80;
    (*(void (**)(char *, void, uint64_t))(v80 + 104))(v79, enum case for HashAlgorithm.sha256(_:), v4);
    uint64_t v52 = Data.hash(algorithm:)();
    unint64_t v54 = v53;
    sub_100037A24(v42, v44);
    uint64_t v55 = v85;
LABEL_41:
    (*(void (**)(char *, uint64_t))(v50 + 8))(v51, v4);
    sub_1000361E0(v55, v19);
    uint64_t v65 = sub_10043A56C(v55, v19);
    unint64_t v67 = v66;
    sub_1000361E0(v65, v66);
    sub_100A932C4(&v86);
    sub_10001CFB8(v65, v67);
    sub_100434F38(v86, v87, &v86);
    sub_10001CFB8(v52, v54);
    sub_10001CFB8(v55, v19);

    sub_10001CFB8(v65, v67);
    uint64_t v70 = v86;
    unint64_t v71 = v87;
    uint64_t v72 = v81;
    uint64_t v73 = *(void *)(v81 + 40);
    unint64_t v74 = *(void *)(v81 + 48);
    *(void *)(v81 + 40) = v86;
    *(void *)(v72 + 48) = v71;
    sub_1000361E0(v70, v71);
    sub_100037A24(v73, v74);
    return v70;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100D22844@<X0>(uint64_t a1@<X8>)
{
  unint64_t v3 = v1[6];
  if (v3 >> 60 == 15) {
    goto LABEL_10;
  }
  uint64_t v4 = v1;
  uint64_t v5 = (void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_authNonce);
  unint64_t v6 = *(void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_authNonce + 8);
  if (v6 >> 60 == 15
    || (unint64_t v7 = *(void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber + 8),
        v7 >> 60 == 15)
    || (unint64_t v8 = *(void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_alternateSerialNumber + 8),
        v8 >> 60 == 15)
    || (uint64_t v9 = (void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryCerts),
        unint64_t v10 = *(void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryCerts + 8),
        v10 >> 60 == 15)
    || (unint64_t v11 = *(void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_csr + 8), v11 >> 60 == 15)
    || (unint64_t v12 = *(void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_seedK1 + 8), v12 >> 60 == 15)
    || (unint64_t v13 = *(void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_attestation + 8),
        v13 >> 60 == 15)
    || *(void *)((char *)v4 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySignature + 8) >> 60 == 15)
  {
LABEL_10:
    if (qword_1016370D0 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_100010324(v14, (uint64_t)qword_10170ECF8);
    unint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      id v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Missing pairing info to generate PencilPairingCheckData.", v17, 2u);
      swift_slowDealloc();
    }

    sub_100D234EC(&v68);
  }
  else
  {
    unint64_t v59 = *(void *)((char *)v4 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySignature + 8);
    unint64_t v60 = v11;
    uint64_t v19 = *v5;
    uint64_t v57 = *(void *)((char *)v4 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber);
    uint64_t v56 = *(void *)((char *)v4 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_alternateSerialNumber);
    uint64_t v65 = *v9;
    uint64_t v66 = *(void *)((char *)v4 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_csr);
    uint64_t v67 = *(void *)((char *)v4 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_seedK1);
    uint64_t v64 = *(void *)((char *)v4 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_attestation);
    uint64_t v58 = *(void *)((char *)v4 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySignature);
    uint64_t v62 = v4[5];
    unint64_t v20 = v12;
    sub_100037A38(v62, v3);
    uint64_t v53 = v19;
    sub_100037A38(v19, v6);
    sub_100037A38(v57, v7);
    sub_100037A38(v56, v8);
    sub_100037A38(v65, v10);
    sub_100037A38(v66, v60);
    unint64_t v63 = v20;
    sub_100037A38(v67, v20);
    sub_100037A38(v64, v13);
    sub_100037A38(v58, v59);
    unint64_t v61 = v13;
    if (qword_1016370D0 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_100010324(v21, (uint64_t)qword_10170ECF8);
    sub_100037A38(v62, v3);
    sub_100037A38(v65, v10);
    sub_100037A38(v66, v60);
    sub_100037A38(v67, v20);
    sub_100037A38(v64, v13);
    sub_100037A38(v62, v3);
    sub_100037A38(v65, v10);
    sub_100037A38(v66, v60);
    sub_100037A38(v67, v20);
    sub_100037A38(v64, v13);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    log = v22;
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = swift_slowAlloc();
      *(void *)&long long v68 = swift_slowAlloc();
      *(_DWORD *)uint64_t v24 = 136316162;
      v104[0] = v62;
      v104[1] = v3;
      sub_1000361E0(v62, v3);
      uint64_t v25 = String.init<A>(describing:)();
      v104[0] = sub_1008FA0F0(v25, v26, (uint64_t *)&v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100037A24(v62, v3);
      sub_100037A24(v62, v3);
      *(_WORD *)(v24 + 12) = 2080;
      sub_1000361E0(v65, v10);
      uint64_t v48 = Data.description.getter();
      unint64_t v28 = v27;
      sub_100037A24(v65, v10);
      v104[0] = sub_1008FA0F0(v48, v28, (uint64_t *)&v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100037A24(v65, v10);
      sub_100037A24(v65, v10);
      buf = (uint8_t *)v24;
      *(_WORD *)(v24 + 22) = 2080;
      sub_1000361E0(v66, v60);
      uint64_t v49 = Data.description.getter();
      unint64_t v30 = v29;
      sub_100037A24(v66, v60);
      v104[0] = sub_1008FA0F0(v49, v30, (uint64_t *)&v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100037A24(v66, v60);
      sub_100037A24(v66, v60);
      *((_WORD *)buf + 16) = 2080;
      sub_1000361E0(v67, v63);
      uint64_t v50 = Data.description.getter();
      unint64_t v32 = v31;
      sub_100037A24(v67, v63);
      v104[0] = sub_1008FA0F0(v50, v32, (uint64_t *)&v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100037A24(v67, v63);
      sub_100037A24(v67, v63);
      *((_WORD *)buf + 21) = 2080;
      sub_1000361E0(v64, v61);
      uint64_t v51 = Data.description.getter();
      unint64_t v34 = v33;
      sub_100037A24(v64, v61);
      v104[0] = sub_1008FA0F0(v51, v34, (uint64_t *)&v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100037A24(v64, v61);
      sub_100037A24(v64, v61);
      _os_log_impl((void *)&_mh_execute_header, log, v23, "encryptedBlobE1: %s, accessoryCerts: %s, csr: %s seedK1: %s, accessoryAttestation: %s", buf, 0x34u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100037A24(v62, v3);
      sub_100037A24(v62, v3);
      sub_100037A24(v65, v10);
      sub_100037A24(v65, v10);
      sub_100037A24(v66, v60);
      sub_100037A24(v66, v60);
      sub_100037A24(v67, v63);
      sub_100037A24(v67, v63);
      sub_100037A24(v64, v61);
      sub_100037A24(v64, v61);
    }
    uint64_t v35 = *(void *)((char *)v4 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_ecid);
    uint64_t v55 = *(void *)((char *)v4 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_ecid + 8);
    uint64_t v36 = *(void *)((char *)v4 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_chipId);
    uint64_t v37 = *(void *)((char *)v4 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_chipId + 8);
    uint64_t v38 = *(void *)((char *)v4 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_serialNumber);
    uint64_t v39 = *(void *)((char *)v4 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_serialNumber + 8);
    uint64_t v40 = v4[2];
    unint64_t v41 = v4[3];
    uint64_t v42 = v4[11];
    uint64_t v43 = v4[12];
    uint64_t v45 = v4[13];
    unint64_t v44 = v4[14];
    long long v68 = xmmword_101347BB0;
    uint64_t v69 = v35;
    uint64_t v70 = v55;
    uint64_t v71 = v36;
    uint64_t v72 = v37;
    uint64_t v73 = v38;
    uint64_t v74 = v39;
    uint64_t v75 = v53;
    unint64_t v76 = v6;
    uint64_t v77 = v57;
    unint64_t v78 = v7;
    uint64_t v79 = v56;
    unint64_t v80 = v8;
    uint64_t v81 = 1;
    char v82 = 0;
    uint64_t v83 = _swiftEmptyArrayStorage;
    uint64_t v84 = 0;
    uint64_t v85 = v67;
    unint64_t v86 = v63;
    uint64_t v87 = v65;
    unint64_t v88 = v10;
    uint64_t v89 = v66;
    unint64_t v90 = v60;
    uint64_t v91 = v64;
    unint64_t v92 = v61;
    uint64_t v93 = v58;
    unint64_t v94 = v59;
    long long v95 = xmmword_101347BB0;
    uint64_t v46 = v40;
    uint64_t v96 = v40;
    unint64_t v97 = v41;
    unint64_t v47 = v41;
    uint64_t v98 = v62;
    unint64_t v99 = v3;
    uint64_t v100 = v42;
    uint64_t v101 = v43;
    uint64_t v102 = v45;
    unint64_t v103 = v44;
    SharingCircleWildAdvertisementKey.init(key:)(&v68);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000361E0(v46, v47);
    swift_bridgeObjectRetain();
    sub_100037A38(v45, v44);
  }
  sub_10001D608((uint64_t)&v68, (uint64_t)v104, &qword_10165DDE8);
  return sub_10001D608((uint64_t)v104, a1, &qword_10165DDE8);
}

uint64_t sub_100D23164@<X0>(uint64_t a1@<X8>)
{
  unint64_t v3 = *(void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_attestation + 8);
  if (v3 >> 60 == 15
    || (unint64_t v4 = *(void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_authNonce + 8), v4 >> 60 == 15)
    || (unint64_t v5 = *(void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber + 8),
        v5 >> 60 == 15)
    || (unint64_t v6 = *(void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_alternateSerialNumber + 8),
        v6 >> 60 == 15)
    || (unint64_t v7 = *(void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_payloadSignatureS4 + 8),
        v7 >> 60 == 15)
    || (unint64_t v8 = *(void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryCerts + 8),
        v8 >> 60 == 15)
    || (unint64_t v9 = *(void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_csr + 8), v9 >> 60 == 15)
    || (unint64_t v10 = *(void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_status + 8), v10 >> 60 == 15))
  {
    static os_log_type_t.error.getter();
    if (qword_101637308 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_100D234BC(&v31);
  }
  else
  {
    uint64_t v15 = *(void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_authNonce);
    uint64_t v16 = *(void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessorySerialNumber);
    uint64_t v17 = *(void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_payloadSignatureS4);
    uint64_t v18 = *(void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_alternateSerialNumber);
    uint64_t v20 = *(void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_accessoryCerts);
    uint64_t v21 = *(void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_csr);
    uint64_t v22 = *(void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_attestation);
    uint64_t v19 = *(void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_status);
    uint64_t v30 = *(void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_ecid + 8);
    uint64_t v12 = *(void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_chipId);
    uint64_t v13 = *(void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_serialNumber);
    uint64_t v28 = *(void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_chipId + 8);
    uint64_t v29 = *(void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_serialNumber + 8);
    unint64_t v23 = v1[3];
    uint64_t v24 = v1[2];
    uint64_t v14 = v1[11];
    uint64_t v27 = v1[13];
    uint64_t v25 = v1[12];
    unint64_t v26 = v1[14];
    *(void *)&long long v31 = *(void *)((char *)v1 + OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_ecid);
    *((void *)&v31 + 1) = v30;
    uint64_t v32 = v12;
    uint64_t v33 = v28;
    uint64_t v34 = v13;
    uint64_t v35 = v29;
    uint64_t v36 = v15;
    unint64_t v37 = v4;
    uint64_t v38 = v16;
    unint64_t v39 = v5;
    uint64_t v40 = v18;
    unint64_t v41 = v6;
    uint64_t v42 = v20;
    unint64_t v43 = v8;
    uint64_t v44 = v21;
    unint64_t v45 = v9;
    uint64_t v46 = v17;
    unint64_t v47 = v7;
    uint64_t v48 = v22;
    unint64_t v49 = v3;
    long long v50 = xmmword_101347BB0;
    uint64_t v51 = v24;
    unint64_t v52 = v23;
    uint64_t v53 = v19;
    unint64_t v54 = v10;
    uint64_t v55 = v14;
    uint64_t v56 = v25;
    uint64_t v57 = v27;
    unint64_t v58 = v26;
    SharingCircleWildAdvertisementKey.init(key:)(&v31);
    sub_100037A38(v22, v3);
    sub_100037A38(v15, v4);
    sub_100037A38(v16, v5);
    sub_100037A38(v18, v6);
    sub_100037A38(v17, v7);
    sub_100037A38(v20, v8);
    sub_100037A38(v21, v9);
    sub_100037A38(v19, v10);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000361E0(v24, v23);
    swift_bridgeObjectRetain();
    sub_100037A38(v27, v26);
  }
  sub_10001D608((uint64_t)&v31, (uint64_t)v59, &qword_10165DDE0);
  return sub_10001D608((uint64_t)v59, a1, &qword_10165DDE0);
}

double sub_100D234BC(_OWORD *a1)
{
  double result = 0.0;
  *a1 = xmmword_1013520A0;
  a1[1] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[13] = 0u;
  a1[14] = 0u;
  return result;
}

double sub_100D234EC(_OWORD *a1)
{
  double result = 0.0;
  a1[17] = 0u;
  a1[18] = 0u;
  a1[15] = 0u;
  a1[16] = 0u;
  a1[13] = 0u;
  a1[14] = 0u;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

void *sub_100D2351C(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = a1;
  uint64_t v13 = a2;
  uint64_t v3 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v3);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v2[2] = 0xD000000000000025;
  v2[3] = 0x800000010137D470;
  sub_10000584C();
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v5);
  static DispatchQoS.unspecified.getter();
  uint64_t v14 = _swiftEmptyArrayStorage;
  sub_100D268BC((unint64_t *)&qword_101638CC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000588C((uint64_t *)&unk_1016376F0);
  sub_100062734((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v9 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v2[7] = 0;
  v2[8] = 0;
  void v2[4] = v12;
  v2[5] = v13;
  v2[6] = v9;
  return v2;
}

uint64_t sub_100D237A0(uint64_t a1)
{
  uint64_t v50 = a1;
  uint64_t v1 = sub_10000588C(&qword_1016555A0);
  uint64_t v40 = *(uint64_t (**)())(v1 - 8);
  __chkstk_darwin(v1);
  unint64_t v39 = (char *)v37 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = sub_10000588C(&qword_10165DF80);
  uint64_t v46 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  uint64_t v44 = (char *)v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = sub_10000588C(&qword_10165DF88);
  uint64_t v47 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  unint64_t v45 = (char *)v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v38 = *(void *)(v5 - 8);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v41 = v7;
  uint64_t v42 = (uint64_t)v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v37 - v8;
  if (qword_101636EE0 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_100010324(v10, (uint64_t)qword_10170E7C8);
  sub_100D25FD8(v50, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    uint64_t v52 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136315138;
    v37[1] = v13 + 4;
    type metadata accessor for UUID();
    sub_100D268BC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v51 = sub_1008FA0F0(v14, v15, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100D26040((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Handling freshly paired beacon: %s", v13, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100D26040((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  }

  v37[2] = v5;
  uint64_t v16 = v43;
  uint64_t v17 = *(void *)(v43 + 32);
  sub_10000588C(&qword_10163BC50);
  uint64_t v18 = type metadata accessor for UUID();
  uint64_t v19 = *(void *)(v18 - 8);
  unint64_t v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_101342130;
  unint64_t v22 = v21 + v20;
  uint64_t v23 = v50;
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v19 + 16))(v22, v50 + *(int *)(v5 + 20), v18);
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = v17;
  *(void *)(v24 + 24) = v21;
  swift_retain();
  swift_bridgeObjectRetain();
  sub_10000588C((uint64_t *)&unk_101655548);
  sub_100062734(&qword_1016555A8, (uint64_t *)&unk_101655548);
  uint64_t v25 = v39;
  Deferred.init(createPublisher:)();
  sub_100062734(&qword_1016555B0, &qword_1016555A0);
  uint64_t v26 = Publisher.eraseToAnyPublisher()();
  (*((void (**)(char *, uint64_t))v40 + 1))(v25, v1);
  swift_bridgeObjectRelease();
  uint64_t v52 = v26;
  uint64_t v40 = type metadata accessor for OwnedBeaconRecord;
  uint64_t v27 = v42;
  sub_100D25FD8(v23, v42, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  uint64_t v28 = *(unsigned __int8 *)(v38 + 80);
  unint64_t v39 = (char *)(v28 | 7);
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = v16;
  sub_100098810(v27, v29 + ((v28 + 24) & ~v28));
  swift_retain();
  static Subscribers.Demand.unlimited.getter();
  sub_10000588C(&qword_10165DF90);
  sub_10000588C(&qword_101655570);
  sub_100062734(&qword_10165DF98, &qword_10165DF90);
  sub_100062734(&qword_101655580, &qword_101655570);
  uint64_t v30 = v44;
  Publisher<>.flatMap<A>(maxPublishers:_:)();
  swift_release();
  swift_release();
  sub_100D25FD8(v50, v27, (uint64_t (*)(void))v40);
  uint64_t v31 = swift_allocObject();
  sub_100098810(v27, v31 + ((v28 + 16) & ~v28));
  sub_100062734(&qword_10165DFA0, &qword_10165DF80);
  uint64_t v32 = v45;
  uint64_t v33 = v48;
  Publisher.map<A>(_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v46 + 8))(v30, v33);
  sub_100062734(&qword_10165DFA8, &qword_10165DF88);
  uint64_t v34 = v49;
  uint64_t v35 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v47 + 8))(v32, v34);
  return v35;
}

uint64_t sub_100D24008@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v6 = sub_10000588C(&qword_1016555A0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *(void *)(a1 + 32);
  sub_10000588C(&qword_10163BC50);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  unint64_t v13 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_101342130;
  uint64_t v15 = type metadata accessor for OwnedBeaconRecord();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v12 + 16))(v14 + v13, a2 + *(int *)(v15 + 20), v11);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v10;
  *(void *)(v16 + 24) = v14;
  swift_retain();
  swift_bridgeObjectRetain();
  sub_10000588C((uint64_t *)&unk_101655548);
  sub_100062734(&qword_1016555A8, (uint64_t *)&unk_101655548);
  Deferred.init(createPublisher:)();
  sub_100062734(&qword_1016555B0, &qword_1016555A0);
  uint64_t v17 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t result = swift_bridgeObjectRelease();
  *a3 = v17;
  return result;
}

uint64_t sub_100D24278()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000588C(&qword_10163C6C8);
  __chkstk_darwin(v2 - 8);
  uint64_t v24 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000588C(&qword_10165DF30);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_10165DF38);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v25 = v8;
  uint64_t v26 = v9;
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000588C(&qword_10165DF40);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v27 = v12;
  uint64_t v28 = v13;
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v29 = *(id *)(*(void *)(v0 + 40) + 24);
  swift_retain();
  sub_10000588C(&qword_101643430);
  type metadata accessor for OwnedBeaconRecord();
  sub_100062734(&qword_101643438, &qword_101643430);
  Publisher.compactMap<A>(_:)();
  swift_release();
  swift_retain();
  static Subscribers.Demand.unlimited.getter();
  sub_10000588C(&qword_10165DF48);
  sub_100062734(&qword_10165DF50, &qword_10165DF30);
  sub_100062734(&qword_10165DF58, &qword_10165DF48);
  Publisher<>.flatMap<A>(maxPublishers:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  id v29 = *(id *)(v0 + 48);
  id v16 = v29;
  uint64_t v17 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  uint64_t v18 = (uint64_t)v24;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v24, 1, 1, v17);
  sub_10000584C();
  sub_100062734(&qword_10165DF60, &qword_10165DF38);
  sub_100D268BC((unint64_t *)&qword_10166C020, (void (*)(uint64_t))sub_10000584C);
  id v19 = v16;
  uint64_t v20 = v25;
  Publisher.subscribe<A>(on:options:)();
  sub_10001DAB4(v18, &qword_10163C6C8);

  (*(void (**)(char *, uint64_t))(v26 + 8))(v11, v20);
  sub_100062734(&qword_10165DF68, &qword_10165DF40);
  uint64_t v21 = v27;
  uint64_t v22 = Publisher<>.sink(receiveValue:)();
  (*(void (**)(char *, uint64_t))(v28 + 8))(v15, v21);
  *(void *)(v1 + 56) = v22;
  return swift_release();
}

uint64_t sub_100D24770@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for PairingEvent();
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100D25FD8(a1, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for PairingEvent);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for OwnedBeaconRecord();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(a2, 1, 1, v7);
    return sub_100D26040((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for PairingEvent);
  }
  else
  {
    sub_100098810((uint64_t)v6, a2);
    uint64_t v9 = type metadata accessor for OwnedBeaconRecord();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(a2, 0, 1, v9);
  }
}

uint64_t sub_100D248CC()
{
  return static Transaction.named<A>(_:with:)();
}

uint64_t sub_100D2495C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_release();
}

void sub_100D24A44(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v27 - v6;
  uint64_t v8 = sub_10000588C(&qword_10165DF28);
  __chkstk_darwin(v8);
  uint64_t v10 = (void **)((char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100D25F4C(a1, (uint64_t)v10);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v11 = *v10;
    if (qword_101636EE0 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100010324(v12, (uint64_t)qword_10170E7C8);
    id v13 = v11;
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      id v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      uint64_t v27 = (uint64_t)v13;
      uint64_t v28 = v17;
      *(_DWORD *)id v16 = 136315138;
      type metadata accessor for SPSeparationMonitoringError(0);
      id v18 = v13;
      uint64_t v19 = String.init<A>(describing:)();
      uint64_t v27 = sub_1008FA0F0(v19, v20, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Failed to automatically enroll beacon due to: %s", v16, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
  else
  {
    sub_100098810((uint64_t)v10, (uint64_t)v7);
    if (qword_101636EE0 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_100010324(v21, (uint64_t)qword_10170E7C8);
    sub_100D25FD8((uint64_t)v7, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      *(_DWORD *)uint64_t v24 = 136315138;
      type metadata accessor for UUID();
      sub_100D268BC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v27 = sub_1008FA0F0(v25, v26, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100D26040((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Successfully enrolled beacon %s", v24, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      sub_100D26040((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    }
    sub_100D26040((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  }
}

void sub_100D24EF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v4 - 8);
  uint64_t v75 = &v65[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v76 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v78 = *(void *)(v76 - 8);
  uint64_t v6 = __chkstk_darwin(v76);
  uint64_t v71 = &v65[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v69 = &v65[-v9];
  uint64_t v70 = v10;
  __chkstk_darwin(v8);
  uint64_t v12 = &v65[-v11];
  uint64_t v13 = type metadata accessor for SystemVersionNumber();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v72 = &v65[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = &v65[-v18];
  __chkstk_darwin(v17);
  uint64_t v21 = &v65[-v20];
  if (qword_101636EE0 != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  uint64_t v23 = sub_100010324(v22, (uint64_t)qword_10170E7C8);
  uint64_t v24 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v14 + 16);
  uint64_t v77 = a1;
  v24(v21, a1, v13);
  v24(v19, a2, v13);
  uint64_t v74 = v23;
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.default.getter();
  int v27 = v26;
  BOOL v28 = os_log_type_enabled(v25, v26);
  uint64_t v73 = v14;
  if (v28)
  {
    uint64_t v29 = swift_slowAlloc();
    long long v68 = v12;
    uint64_t v30 = v29;
    uint64_t v67 = swift_slowAlloc();
    v81[0] = v67;
    *(_DWORD *)uint64_t v30 = 136315394;
    sub_100D268BC(&qword_101648258, (void (*)(uint64_t))&type metadata accessor for SystemVersionNumber);
    int v66 = v27;
    uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v80 = sub_1008FA0F0(v31, v32, v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v33 = *(void (**)(unsigned char *, uint64_t))(v14 + 8);
    v33(v21, v13);
    *(_WORD *)(v30 + 12) = 2080;
    uint64_t v34 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v80 = sub_1008FA0F0(v34, v35, v81);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v33(v19, v13);
    uint64_t v36 = v33;
    _os_log_impl((void *)&_mh_execute_header, v25, (os_log_type_t)v66, "Handling local beacon migration from: %s to: %s", (uint8_t *)v30, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v12 = v68;
    swift_slowDealloc();
  }
  else
  {
    uint64_t v36 = *(void (**)(unsigned char *, uint64_t))(v14 + 8);
    v36(v21, v13);
    v36(v19, v13);
  }

  unint64_t v37 = *(char **)(v79 + 32);
  uint64_t v38 = sub_100ACF0EC();
  uint64_t v39 = v78;
  uint64_t v40 = v75;
  uint64_t v41 = v76;
  if (v38[2])
  {
    sub_100D25FD8((uint64_t)v38 + ((*(unsigned __int8 *)(v78 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v78 + 80)), (uint64_t)v75, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v42 = 0;
  }
  else
  {
    uint64_t v42 = 1;
  }
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v39 + 56))(v40, v42, 1, v41);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v39 + 48))(v40, 1, v41) == 1)
  {
    sub_10001DAB4((uint64_t)v40, &qword_10163B9F0);
    uint64_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v43, v44))
    {
      unint64_t v45 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v45 = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "Local beacon not found, can't migrate", v45, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    sub_100098810((uint64_t)v40, (uint64_t)v12);
    uint64_t v46 = sub_100698648((uint64_t)v12, v37);
    int v47 = sub_100DC7494(8u, (uint64_t)v46);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    switch(sub_1000A25C0())
    {
      case 5u:
        swift_bridgeObjectRelease();
        if (v47) {
          goto LABEL_15;
        }
        goto LABEL_24;
      default:
        uint64_t v48 = v72;
        SystemVersionNumber.init(stringLiteral:)();
        sub_100D268BC((unint64_t *)&qword_10163A550, (void (*)(uint64_t))&type metadata accessor for SystemVersionNumber);
        int v49 = dispatch thunk of static Comparable.< infix(_:_:)();
        v36(v48, v13);
        swift_bridgeObjectRelease();
        if (v47 & v49)
        {
LABEL_15:
          uint64_t v50 = v69;
          sub_100D25FD8((uint64_t)v12, (uint64_t)v69, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
          uint64_t v51 = v71;
          sub_100D25FD8((uint64_t)v50, (uint64_t)v71, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
          unint64_t v52 = (*(unsigned __int8 *)(v39 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
          uint64_t v53 = swift_allocObject();
          *(void *)(v53 + 16) = v79;
          sub_100098810((uint64_t)v50, v53 + v52);
          swift_retain_n();
          uint64_t v54 = sub_100AB24F0();
          if (qword_1016371D8 != -1) {
            swift_once();
          }
          v81[0] = 0x7365547265646E75;
          v81[1] = 0xE900000000000074;
          SynchronousCache.cachedValue<A>(key:computeBlock:)();
          swift_bridgeObjectRelease();
          if (v80 == 1)
          {
            uint64_t v55 = Logger.logObject.getter();
            os_log_type_t v56 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v55, v56))
            {
              uint64_t v57 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v57 = 0;
              _os_log_impl((void *)&_mh_execute_header, v55, v56, "Will attempt to automatically enroll local beacon after migration", v57, 2u);
              swift_slowDealloc();
            }

            uint64_t v58 = v79;
            v81[0] = sub_100D237A0((uint64_t)v51);
            sub_10000588C(&qword_10165DF18);
            sub_100062734(&qword_10165DF20, &qword_10165DF18);
            uint64_t v59 = Publisher<>.sink(receiveValue:)();
            swift_release();
            *(void *)(v58 + 64) = v59;
            swift_release();
            swift_release();
            swift_release();
            swift_release();
          }
          else
          {
            uint64_t v60 = type metadata accessor for Transaction();
            __chkstk_darwin(v60);
            *(void *)&v65[-32] = v54;
            *(void *)&v65[-24] = sub_100D25EE8;
            *(void *)&v65[-16] = v53;
            static Transaction.named<A>(_:with:)();
            swift_release();
            swift_release();
            swift_release();
          }
          sub_100D26040((uint64_t)v51, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
          uint64_t v61 = (uint64_t)v12;
        }
        else
        {
LABEL_24:
          uint64_t v62 = Logger.logObject.getter();
          os_log_type_t v63 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v62, v63))
          {
            uint64_t v64 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v64 = 0;
            _os_log_impl((void *)&_mh_execute_header, v62, v63, "Separation Monitoring migration not needed or not possible.", v64, 2u);
            swift_slowDealloc();
          }

          uint64_t v61 = (uint64_t)v12;
        }
        sub_100D26040(v61, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        break;
    }
  }
}

uint64_t sub_100D25998(uint64_t a1, uint64_t a2)
{
  if (qword_101636EE0 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100010324(v4, (uint64_t)qword_10170E7C8);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Will attempt to automatically enroll local beacon after migration", v7, 2u);
    swift_slowDealloc();
  }

  sub_100D237A0(a2);
  sub_10000588C(&qword_10165DF18);
  sub_100062734(&qword_10165DF20, &qword_10165DF18);
  uint64_t v8 = Publisher<>.sink(receiveValue:)();
  swift_release();
  *(void *)(a1 + 64) = v8;
  return swift_release();
}

void sub_100D25B14(uint64_t a1)
{
  uint64_t v2 = sub_10000588C(&qword_10165DF28);
  __chkstk_darwin(v2);
  uint64_t v4 = (void **)((char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_100D25F4C(a1, (uint64_t)v4);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v5 = *v4;
    if (qword_101636EE0 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100010324(v6, (uint64_t)qword_10170E7C8);
    id v7 = v5;
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      uint64_t v19 = (uint64_t)v7;
      uint64_t v20 = v11;
      *(_DWORD *)uint64_t v10 = 136315138;
      type metadata accessor for SPSeparationMonitoringError(0);
      id v12 = v7;
      uint64_t v13 = String.init<A>(describing:)();
      uint64_t v19 = sub_1008FA0F0(v13, v14, &v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed to automatically enroll beacon due to: %s", v10, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
  }
  else
  {
    if (qword_101636EE0 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_100010324(v15, (uint64_t)qword_10170E7C8);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Separation Monitoring auto-enrollment completed succesfully for local beacon.", v18, 2u);
      swift_slowDealloc();
    }

    sub_10001DAB4((uint64_t)v4, &qword_10165DF28);
  }
}

uint64_t sub_100D25E18()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SeparationMonitoringEnrollmentService()
{
  return self;
}

uint64_t sub_100D25E9C()
{
  return sub_100D24278();
}

void sub_100D25EC0(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100D25EE8()
{
  uint64_t v1 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_100D25998(v2, v3);
}

uint64_t sub_100D25F4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_10165DF28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100D25FB4()
{
  return sub_100D248CC();
}

uint64_t sub_100D25FBC(uint64_t a1)
{
  return sub_100D2495C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100D25FD8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100D26040(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100D260A4@<X0>(uint64_t *a1@<X8>)
{
  return sub_100A22998(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_100D260B0()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v19 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v4 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v5 = v0 + v3 + v1[5];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  uint64_t v9 = v0 + v3 + v1[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 24) & ~v2;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 24) & ~v2;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v3 = v18;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v10 = v4 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6)) {
    v8(v10, v6);
  }
  uint64_t v11 = v4 + v1[8];
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  sub_10001CFB8(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v13 = (uint64_t *)(v4 + v1[10]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_10001CFB8(*v13, v14);
  }
  uint64_t v15 = (uint64_t *)(v4 + v1[11]);
  unint64_t v16 = v15[1];
  if (v16 >> 60 != 15) {
    sub_10001CFB8(*v15, v16);
  }
  sub_10001CFB8(*(void *)(v4 + v1[12]), *(void *)(v4 + v1[12] + 8));
  sub_10001CFB8(*(void *)(v4 + v1[13]), *(void *)(v4 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v3 + v19, v2 | 7);
}

uint64_t sub_100D26434@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_100D24008(v4, v5, a1);
}

uint64_t sub_100D264B8()
{
  uint64_t v1 = v0;
  uint64_t v2 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v3 = *(unsigned __int8 *)(*((void *)v2 - 1) + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v20 = *(void *)(*((void *)v2 - 1) + 64);
  uint64_t v5 = v0 + v4;
  sub_10001CFB8(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v6 = v0 + v4 + v2[5];
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  uint64_t v10 = v0 + v4 + v2[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v9(v10, v7);
      uint64_t v19 = v0;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v9(v10, v7);
      uint64_t v19 = v0;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v1 = v19;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v11 = v5 + v2[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v11, 1, v7)) {
    v9(v11, v7);
  }
  uint64_t v12 = v5 + v2[8];
  uint64_t v13 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
  sub_10001CFB8(*(void *)(v5 + v2[9]), *(void *)(v5 + v2[9] + 8));
  unint64_t v14 = (uint64_t *)(v5 + v2[10]);
  unint64_t v15 = v14[1];
  if (v15 >> 60 != 15) {
    sub_10001CFB8(*v14, v15);
  }
  unint64_t v16 = (uint64_t *)(v5 + v2[11]);
  unint64_t v17 = v16[1];
  if (v17 >> 60 != 15) {
    sub_10001CFB8(*v16, v17);
  }
  sub_10001CFB8(*(void *)(v5 + v2[12]), *(void *)(v5 + v2[12] + 8));
  sub_10001CFB8(*(void *)(v5 + v2[13]), *(void *)(v5 + v2[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v1, v4 + v20, v3 | 7);
}

uint64_t sub_100D26838@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  return sub_100D25FD8(v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)), a1, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
}

uint64_t sub_100D268B4@<X0>(uint64_t *a1@<X8>)
{
  return sub_100A23328(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_100D268BC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100D26904@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = v1;
  uint64_t v23 = a1;
  uint64_t v4 = type metadata accessor for SharingCircleSecret();
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_101639EF8);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (_OWORD *)((char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = (uint64_t *)(v3 + *(int *)(v4 + 32));
  uint64_t v11 = *v10;
  unint64_t v12 = v10[1];
  uint64_t v13 = (uint64_t *)(v3 + *(int *)(v4 + 28));
  uint64_t v15 = *v13;
  unint64_t v14 = (void *)v13[1];
  sub_1000361E0(v11, v12);
  swift_bridgeObjectRetain();
  sub_10131CEC8(v11, v12, v15, v14, v9);
  if (v2)
  {
    swift_errorRelease();
    uint64_t v16 = type metadata accessor for SharingCircleSecretValue();
    (*(void (**)(_OWORD *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v9, 1, 1, v16);
  }
  else
  {
    uint64_t v16 = type metadata accessor for SharingCircleSecretValue();
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v9, 0, 1, v16);
  }
  sub_100D29858(v3, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
  type metadata accessor for SharingCircleSecretValue();
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48))(v9, 1, v16) == 1)
  {
    unint64_t v17 = (uint64_t *)&v6[*(int *)(v4 + 32)];
    uint64_t v18 = *v17;
    unint64_t v19 = v17[1];
    sub_1000361E0(*v17, v19);
    sub_100D298C0((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
    uint64_t v20 = v23;
    *uint64_t v23 = v18;
    v20[1] = v19;
    swift_storeEnumTagMultiPayload();
    return sub_10001DAB4((uint64_t)v9, &qword_101639EF8);
  }
  else
  {
    sub_100D298C0((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
    return sub_100D29920((uint64_t)v9, (uint64_t)v23, (uint64_t (*)(void))type metadata accessor for SharingCircleSecretValue);
  }
}

void sub_100D26BC4(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_10000588C(&qword_101638CF0);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v52 - v8;
  uint64_t v61 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v61 - 8);
  uint64_t v11 = __chkstk_darwin(v61);
  uint64_t v13 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v60 = (char *)&v52 - v14;
  if (CKRecord.recordType.getter() == 0xD000000000000013 && v15 == 0x800000010137D540)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v16 & 1) == 0)
    {
      sub_100D296D8();
      swift_allocError();
      *int v27 = 0;
      goto LABEL_13;
    }
  }
  uint64_t v58 = a2;
  uint64_t v59 = v13;
  id v17 = [a1 recordID];
  id v18 = [v17 recordName];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  unint64_t v19 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  uint64_t v20 = v61;
  if (v19(v9, 1, v61) == 1)
  {
    sub_10001DAB4((uint64_t)v9, &qword_101638CF0);
    sub_100D296D8();
    swift_allocError();
    *uint64_t v21 = 1;
LABEL_13:
    swift_willThrow();

    return;
  }
  os_log_type_t v56 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  uint64_t v57 = v10 + 32;
  v56(v60, v9, v20);
  id v22 = [a1 encryptedValues];
  NSString v23 = String._bridgeToObjectiveC()();
  id v24 = [v22 objectForKeyedSubscript:v23];

  if (!v24 || (id v64 = v24, sub_10000588C((uint64_t *)&unk_10163AE50), (swift_dynamicCast() & 1) == 0))
  {
LABEL_11:
    sub_100D296D8();
    swift_allocError();
    *os_log_type_t v26 = 2;
    swift_willThrow();
    swift_unknownObjectRelease();

    (*(void (**)(char *, uint64_t))(v10 + 8))(v60, v61);
    return;
  }
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  uint64_t v25 = v61;
  if (v19(v7, 1, v61) == 1)
  {
    sub_10001DAB4((uint64_t)v7, &qword_101638CF0);
    goto LABEL_11;
  }
  v56(v59, v7, v25);
  NSString v28 = String._bridgeToObjectiveC()();
  id v29 = [v22 objectForKeyedSubscript:v28];

  if (v29 && (id v64 = v29, (swift_dynamicCast() & 1) != 0))
  {
    unint64_t v30 = v63;
    uint64_t v55 = v62;
    NSString v31 = String._bridgeToObjectiveC()();
    id v32 = [v22 objectForKeyedSubscript:v31];

    uint64_t v33 = v59;
    if (v32)
    {
      id v64 = v32;
      if (swift_dynamicCast())
      {
        unint64_t v53 = v63;
        uint64_t v54 = v62;
        id v34 = [objc_allocWithZone((Class)NSKeyedArchiver) initRequiringSecureCoding:1];
        [a1 encodeSystemFieldsWithCoder:v34];
        [v34 finishEncoding];
        unint64_t v35 = v33;
        id v36 = [v34 encodedData];
        uint64_t v37 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v39 = v38;

        swift_unknownObjectRelease();

        uint64_t v40 = v58;
        *uint64_t v58 = v37;
        v40[1] = v39;
        uint64_t v41 = (int *)type metadata accessor for SharingCircleSecret();
        uint64_t v42 = v61;
        uint64_t v43 = v56;
        v56((char *)v40 + v41[5], v60, v61);
        v43((char *)v40 + v41[6], v35, v42);
        os_log_type_t v44 = (uint64_t *)((char *)v40 + v41[8]);
        *os_log_type_t v44 = v55;
        v44[1] = v30;
        unint64_t v45 = (uint64_t *)((char *)v40 + v41[7]);
        unint64_t v46 = v53;
        *unint64_t v45 = v54;
        v45[1] = v46;
        return;
      }
    }
    sub_100D296D8();
    swift_allocError();
    *uint64_t v50 = 5;
    swift_willThrow();
    sub_10001CFB8(v55, v30);
    swift_unknownObjectRelease();

    uint64_t v48 = *(void (**)(char *, uint64_t))(v10 + 8);
    int v49 = v33;
  }
  else
  {
    sub_100D296D8();
    swift_allocError();
    *int v47 = 4;
    swift_willThrow();
    swift_unknownObjectRelease();

    uint64_t v48 = *(void (**)(char *, uint64_t))(v10 + 8);
    int v49 = v59;
  }
  uint64_t v51 = v61;
  v48(v49, v61);
  v48(v60, v51);
}

uint64_t sub_100D272C4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static Data.random(bytes:)();
  unint64_t v4 = v3 >> 62;
  uint64_t v5 = 0;
  switch(v3 >> 62)
  {
    case 1uLL:
      LODWORD(v6) = HIDWORD(result) - result;
      if (__OFSUB__(HIDWORD(result), result))
      {
        __break(1u);
LABEL_9:
        __break(1u);
LABEL_10:
        if (v4 == 1)
        {
          LODWORD(v4) = HIDWORD(result) - result;
          if (!__OFSUB__(HIDWORD(result), result)) {
            goto LABEL_18;
          }
          __break(1u);
        }
        if (v4 != 2)
        {
          uint64_t v5 = BYTE6(v3);
          goto LABEL_20;
        }
        unint64_t v4 = *(void *)(result + 16);
        uint64_t v10 = *(void *)(result + 24);
        BOOL v9 = __OFSUB__(v10, v4);
        uint64_t v5 = v10 - v4;
        if (!v9) {
          goto LABEL_20;
        }
        __break(1u);
LABEL_18:
        uint64_t v5 = (int)v4;
LABEL_20:
        unint64_t v11 = v3;
        uint64_t v12 = result;
        uint64_t v13 = v5;
        sub_10013019C();
        swift_allocError();
        *(void *)uint64_t v14 = 32;
        *(void *)(v14 + 8) = v13;
        *(unsigned char *)(v14 + 16) = 0;
        swift_willThrow();
        sub_10001CFB8(v12, v11);
        swift_unexpectedError();
        __break(1u);
        JUMPOUT(0x100D27414);
      }
      uint64_t v6 = (int)v6;
LABEL_6:
      if (v6 != 32) {
        goto LABEL_10;
      }
      *a1 = result;
      a1[1] = v3;
      return result;
    case 2uLL:
      uint64_t v8 = *(void *)(result + 16);
      uint64_t v7 = *(void *)(result + 24);
      BOOL v9 = __OFSUB__(v7, v8);
      uint64_t v6 = v7 - v8;
      if (!v9) {
        goto LABEL_6;
      }
      goto LABEL_9;
    case 3uLL:
      goto LABEL_20;
    default:
      uint64_t v6 = BYTE6(v3);
      goto LABEL_6;
  }
}

uint64_t sub_100D27424@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = static Data.random(bytes:)();
  unint64_t v4 = v3 >> 62;
  uint64_t v5 = 0;
  switch(v3 >> 62)
  {
    case 1uLL:
      LODWORD(v6) = HIDWORD(result) - result;
      if (__OFSUB__(HIDWORD(result), result))
      {
        __break(1u);
LABEL_9:
        __break(1u);
LABEL_10:
        if (v4 == 1)
        {
          LODWORD(v4) = HIDWORD(result) - result;
          if (!__OFSUB__(HIDWORD(result), result)) {
            goto LABEL_18;
          }
          __break(1u);
        }
        if (v4 != 2)
        {
          uint64_t v5 = BYTE6(v3);
          goto LABEL_20;
        }
        unint64_t v4 = *(void *)(result + 16);
        uint64_t v10 = *(void *)(result + 24);
        BOOL v9 = __OFSUB__(v10, v4);
        uint64_t v5 = v10 - v4;
        if (!v9) {
          goto LABEL_20;
        }
        __break(1u);
LABEL_18:
        uint64_t v5 = (int)v4;
LABEL_20:
        unint64_t v11 = v3;
        uint64_t v12 = result;
        uint64_t v13 = v5;
        sub_10013019C();
        swift_allocError();
        *(void *)uint64_t v14 = 6;
        *(void *)(v14 + 8) = v13;
        *(unsigned char *)(v14 + 16) = 0;
        swift_willThrow();
        sub_10001CFB8(v12, v11);
        swift_unexpectedError();
        __break(1u);
        JUMPOUT(0x100D27574);
      }
      uint64_t v6 = (int)v6;
LABEL_6:
      if (v6 != 6) {
        goto LABEL_10;
      }
      *a1 = result;
      a1[1] = v3;
      return result;
    case 2uLL:
      uint64_t v8 = *(void *)(result + 16);
      uint64_t v7 = *(void *)(result + 24);
      BOOL v9 = __OFSUB__(v7, v8);
      uint64_t v6 = v7 - v8;
      if (!v9) {
        goto LABEL_6;
      }
      goto LABEL_9;
    case 3uLL:
      goto LABEL_20;
    default:
      uint64_t v6 = BYTE6(v3);
      goto LABEL_6;
  }
}

uint64_t sub_100D27584@<X0>(uint64_t (*a1)(char *, uint64_t)@<X0>, uint64_t (*a2)(void, void)@<X1>, uint64_t a3@<X8>)
{
  uint64_t v56 = a3;
  uint64_t v54 = a2;
  uint64_t v51 = a1;
  uint64_t v55 = type metadata accessor for SharingCircleSecret() - 8;
  __chkstk_darwin(v55);
  unint64_t v53 = (_OWORD *)((char *)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v59 = (char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  BOOL v9 = (char *)&v46 - v8;
  uint64_t v57 = (char *)&v46 - v8;
  uint64_t v47 = type metadata accessor for SharingCircleSecretValue();
  uint64_t v10 = __chkstk_darwin(v47);
  uint64_t v48 = (uint64_t)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v58 = (uint64_t)&v46 - v12;
  uint64_t v13 = type metadata accessor for P256.Signing.PrivateKey();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  id v17 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  unint64_t v19 = (char *)&v46 - v18;
  unint64_t v52 = (char *)&v46 - v18;
  P256.Signing.PrivateKey.init(compactRepresentable:)();
  uint64_t v20 = v5;
  uint64_t v46 = v5;
  uint64_t v21 = *(void (**)(char *, uint64_t (*)(void, void), uint64_t))(v5 + 16);
  v21(v9, (uint64_t (*)(void, void))v51, v4);
  id v22 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  uint64_t v50 = v13;
  v22(v17, v19, v13);
  uint64_t v23 = P256.Signing.PrivateKey.rawRepresentation.getter();
  uint64_t v25 = v24;
  os_log_type_t v26 = *(uint64_t (**)(char *, uint64_t))(v14 + 8);
  uint64_t v49 = v14 + 8;
  uint64_t v51 = v26;
  v26(v17, v13);
  uint64_t v27 = type metadata accessor for KeyDropJoinToken(0);
  uint64_t v28 = v58;
  id v29 = (uint64_t *)(v58 + *(int *)(v27 + 20));
  *id v29 = v23;
  v29[1] = v25;
  unint64_t v30 = *(void (**)(uint64_t, char *, uint64_t))(v20 + 32);
  NSString v31 = v57;
  v30(v28, v57, v4);
  swift_storeEnumTagMultiPayload();
  UUID.init()();
  id v32 = v59;
  v21(v59, v54, v4);
  uint64_t v33 = v48;
  sub_100D29858(v28, v48, (uint64_t (*)(void))type metadata accessor for SharingCircleSecretValue);
  uint64_t v34 = (uint64_t)v53;
  *unint64_t v53 = xmmword_101348180;
  unint64_t v35 = (int *)v55;
  v21((char *)(v34 + *(int *)(v55 + 28)), (uint64_t (*)(void, void))v31, v4);
  v21((char *)(v34 + v35[8]), (uint64_t (*)(void, void))v32, v4);
  uint64_t v36 = sub_10131C9DC();
  uint64_t v37 = (uint64_t *)(v34 + v35[10]);
  *uint64_t v37 = v36;
  v37[1] = v38;
  uint64_t v39 = v33;
  unint64_t v40 = sub_10131C800();
  unint64_t v42 = v41;
  sub_100D298C0(v39, (uint64_t (*)(void))type metadata accessor for SharingCircleSecretValue);
  uint64_t v43 = *(void (**)(char *, uint64_t))(v46 + 8);
  v43(v59, v4);
  v43(v57, v4);
  os_log_type_t v44 = (unint64_t *)(v34 + v35[9]);
  *os_log_type_t v44 = v40;
  v44[1] = v42;
  sub_100D29920(v34, v56, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
  sub_100D298C0(v58, (uint64_t (*)(void))type metadata accessor for SharingCircleSecretValue);
  return v51(v52, v50);
}

uint64_t sub_100D279EC@<X0>(uint64_t (*a1)()@<X0>, uint64_t a2@<X8>)
{
  return sub_100D27A24(a1, 1, a2);
}

uint64_t sub_100D27A08@<X0>(uint64_t (*a1)()@<X0>, uint64_t a2@<X8>)
{
  return sub_100D27A24(a1, 2, a2);
}

uint64_t sub_100D27A24@<X0>(uint64_t (*a1)()@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  int v33 = a2;
  uint64_t v37 = a3;
  uint64_t v36 = a1;
  uint64_t v3 = type metadata accessor for SharingCircleSecret();
  uint64_t v4 = (int *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v40 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v38 = (uint64_t (*)())((char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v32 - v10;
  uint64_t v12 = type metadata accessor for SharingCircleSecretValue();
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  id v17 = (char **)((char *)&v32 - v16);
  sub_100D272C4(v39);
  uint64_t v19 = v39[0];
  unint64_t v18 = v39[1];
  void *v17 = v39[0];
  v17[1] = v18;
  unint64_t v34 = v18;
  uint64_t v35 = v19;
  swift_storeEnumTagMultiPayload();
  sub_1000361E0(v19, v18);
  id v32 = v11;
  UUID.init()();
  uint64_t v20 = *(void (**)(char *, uint64_t (*)(), uint64_t))(v40 + 16);
  uint64_t v21 = v38;
  v20((char *)v38, v36, v7);
  uint64_t v36 = type metadata accessor for SharingCircleSecretValue;
  sub_100D29858((uint64_t)v17, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for SharingCircleSecretValue);
  *(_OWORD *)uint64_t v6 = xmmword_101348180;
  v20(&v6[v4[7]], (uint64_t (*)())v11, v7);
  v20(&v6[v4[8]], v21, v7);
  uint64_t v22 = sub_10131C9DC();
  uint64_t v23 = (uint64_t *)&v6[v4[10]];
  *uint64_t v23 = v22;
  v23[1] = v24;
  unint64_t v25 = sub_10131C800();
  unint64_t v27 = v26;
  uint64_t v28 = v36;
  sub_100D298C0((uint64_t)v15, (uint64_t (*)(void))v36);
  id v29 = *(void (**)(char *, uint64_t))(v40 + 8);
  v29((char *)v38, v7);
  v29(v32, v7);
  unint64_t v30 = (unint64_t *)&v6[v4[9]];
  *unint64_t v30 = v25;
  v30[1] = v27;
  sub_100D29920((uint64_t)v6, v37, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
  sub_10001CFB8(v35, v34);
  return sub_100D298C0((uint64_t)v17, (uint64_t (*)(void))v28);
}

uint64_t sub_100D27D30@<X0>(uint64_t (*a1)()@<X0>, uint64_t a2@<X8>)
{
  return sub_100D28118(a1, 3, a2);
}

uint64_t sub_100D27D4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v42 = a2;
  uint64_t v41 = a1;
  uint64_t v36 = type metadata accessor for SharingCircleSecret() - 8;
  __chkstk_darwin(v36);
  uint64_t v3 = (char *)&v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = type metadata accessor for UUID();
  uint64_t v33 = *(void *)(v37 - 8);
  uint64_t v4 = v33;
  uint64_t v5 = __chkstk_darwin(v37);
  uint64_t v35 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v43 = (char *)&v32 - v7;
  uint64_t v8 = type metadata accessor for SharingCircleSecretValue();
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v32 - v12;
  uint64_t v14 = type metadata accessor for SymmetricKey256();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v39 = v14;
  uint64_t v40 = v15;
  __chkstk_darwin(v14);
  id v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = v17;
  static SymmetricKey256.random()();
  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v13, v17, v14);
  unint64_t v34 = v13;
  swift_storeEnumTagMultiPayload();
  unint64_t v18 = v43;
  UUID.init()();
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  uint64_t v20 = v35;
  uint64_t v21 = v37;
  v19(v35, v41, v37);
  sub_100D29858((uint64_t)v13, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for SharingCircleSecretValue);
  *(_OWORD *)uint64_t v3 = xmmword_101348180;
  uint64_t v22 = (int *)v36;
  v19(&v3[*(int *)(v36 + 28)], (uint64_t)v18, v21);
  v19(&v3[v22[8]], (uint64_t)v20, v21);
  uint64_t v23 = sub_10131C9DC();
  uint64_t v24 = (uint64_t *)&v3[v22[10]];
  *uint64_t v24 = v23;
  v24[1] = v25;
  unint64_t v26 = sub_10131C800();
  unint64_t v28 = v27;
  sub_100D298C0((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for SharingCircleSecretValue);
  id v29 = *(void (**)(char *, uint64_t))(v33 + 8);
  v29(v20, v21);
  v29(v43, v21);
  unint64_t v30 = (unint64_t *)&v3[v22[9]];
  *unint64_t v30 = v26;
  v30[1] = v28;
  sub_100D29920((uint64_t)v3, v42, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
  sub_100D298C0((uint64_t)v34, (uint64_t (*)(void))type metadata accessor for SharingCircleSecretValue);
  return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v38, v39);
}

uint64_t sub_100D280FC@<X0>(uint64_t (*a1)()@<X0>, uint64_t a2@<X8>)
{
  return sub_100D28118(a1, 6, a2);
}

uint64_t sub_100D28118@<X0>(uint64_t (*a1)()@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  LODWORD(v35) = a2;
  uint64_t v36 = a1;
  uint64_t v37 = type metadata accessor for SharingCircleSecret();
  __chkstk_darwin(v37);
  uint64_t v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v41 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v12 = (uint64_t (*)())((char *)&v32 - v11);
  uint64_t v13 = type metadata accessor for SharingCircleSecretValue();
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  unint64_t v18 = (_OWORD *)((char *)&v32 - v17);
  uint64_t result = sub_100A9709C(v38);
  if (!v3)
  {
    long long v40 = v39;
    *unint64_t v18 = v39;
    uint64_t v35 = 0;
    swift_storeEnumTagMultiPayload();
    sub_100061E54((uint64_t)&v40);
    UUID.init()();
    uint64_t v34 = a3;
    uint64_t v20 = *(void (**)(char *, uint64_t (*)(), uint64_t))(v8 + 16);
    v20(v41, v36, v7);
    uint64_t v36 = type metadata accessor for SharingCircleSecretValue;
    sub_100D29858((uint64_t)v18, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for SharingCircleSecretValue);
    *(_OWORD *)uint64_t v6 = xmmword_101348180;
    uint64_t v21 = (int *)v37;
    v20(&v6[*(int *)(v37 + 20)], v12, v7);
    v20(&v6[v21[6]], (uint64_t (*)())v41, v7);
    uint64_t v22 = sub_10131C9DC();
    uint64_t v23 = (uint64_t *)&v6[v21[8]];
    *uint64_t v23 = v22;
    v23[1] = v24;
    unint64_t v25 = sub_10131C800();
    unint64_t v33 = v26;
    unint64_t v27 = v36;
    sub_100D298C0((uint64_t)v16, (uint64_t (*)(void))v36);
    unint64_t v28 = *(void (**)(char *, uint64_t))(v8 + 8);
    v28(v41, v7);
    v28((char *)v12, v7);
    id v29 = (unint64_t *)&v6[v21[7]];
    unint64_t v31 = v33;
    uint64_t v30 = v34;
    *id v29 = v25;
    v29[1] = v31;
    sub_100D29920((uint64_t)v6, v30, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
    sub_100B55F50(v38);
    return sub_100D298C0((uint64_t)v18, (uint64_t (*)(void))v27);
  }
  return result;
}

unint64_t sub_100D2842C(char a1)
{
  unint64_t result = 0xD000000000000010;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x696669746E656469;
      break;
    case 2:
      unint64_t result = 0xD000000000000017;
      break;
    case 3:
      unint64_t result = 0x7954746572636573;
      break;
    case 4:
      unint64_t result = 0x6144746572636573;
      break;
    default:
      return result;
  }
  return result;
}

Swift::Int sub_100D284F0()
{
  uint64_t v1 = v0;
  Hasher.init(_seed:)();
  uint64_t v2 = *v0;
  unint64_t v3 = v1[1];
  sub_1000361E0(v2, v3);
  Data.hash(into:)();
  sub_10001CFB8(v2, v3);
  uint64_t v4 = type metadata accessor for SharingCircleSecret();
  type metadata accessor for UUID();
  sub_100D2A794(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  dispatch thunk of Hashable.hash(into:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  uint64_t v5 = (uint64_t *)((char *)v1 + *(int *)(v4 + 32));
  uint64_t v6 = *v5;
  unint64_t v7 = v5[1];
  sub_1000361E0(*v5, v7);
  Data.hash(into:)();
  sub_10001CFB8(v6, v7);
  return Hasher._finalize()();
}

unint64_t sub_100D2864C()
{
  return sub_100D2842C(*v0);
}

uint64_t sub_100D28654@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100D2A568(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100D2867C(uint64_t a1)
{
  unint64_t v2 = sub_100D2972C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100D286B8(uint64_t a1)
{
  unint64_t v2 = sub_100D2972C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100D286FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v5 = *v2;
  unint64_t v6 = v4[1];
  sub_1000361E0(v5, v6);
  Data.hash(into:)();
  sub_10001CFB8(v5, v6);
  type metadata accessor for UUID();
  sub_100D2A794(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  dispatch thunk of Hashable.hash(into:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  unint64_t v7 = (uint64_t *)((char *)v4 + *(int *)(a2 + 32));
  uint64_t v8 = *v7;
  unint64_t v9 = v7[1];
  sub_1000361E0(*v7, v9);
  Data.hash(into:)();

  return sub_10001CFB8(v8, v9);
}

Swift::Int sub_100D28844(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  Hasher.init(_seed:)();
  uint64_t v5 = *v2;
  unint64_t v6 = v4[1];
  sub_1000361E0(v5, v6);
  Data.hash(into:)();
  sub_10001CFB8(v5, v6);
  type metadata accessor for UUID();
  sub_100D2A794(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  dispatch thunk of Hashable.hash(into:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  unint64_t v7 = (uint64_t *)((char *)v4 + *(int *)(a2 + 32));
  uint64_t v8 = *v7;
  unint64_t v9 = v7[1];
  sub_1000361E0(*v7, v9);
  Data.hash(into:)();
  sub_10001CFB8(v8, v9);
  return Hasher._finalize()();
}

uint64_t sub_100D28994()
{
  uint64_t v0 = type metadata accessor for URL();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001E384(v2, qword_10170ECE0);
  sub_100010324(v0, (uint64_t)qword_10170ECE0);
  type metadata accessor for BeaconStore(0);
  sub_100A9DB34((uint64_t)v4);
  URL.appendingPathComponent(_:isDirectory:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t sub_100D28AB0(id *a1)
{
  id v2 = *a1;
  [*a1 encryptedValues];
  swift_getObjectType();
  static os_log_type_t.debug.getter();
  if (qword_101637268 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_101342130;
  id v4 = v2;
  id v5 = [v4 description];
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v8 = v7;

  *(void *)(v3 + 56) = &type metadata for String;
  *(void *)(v3 + 64) = sub_10000B4CC();
  *(void *)(v3 + 32) = v6;
  *(void *)(v3 + 40) = v8;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v9 = type metadata accessor for SharingCircleSecret();
  UUID.uuidString.getter();
  CKRecordKeyValueSetting.subscript.setter();
  sub_1000361E0(*(void *)(v1 + *(int *)(v9 + 32)), *(void *)(v1 + *(int *)(v9 + 32) + 8));
  CKRecordKeyValueSetting.subscript.setter();
  swift_bridgeObjectRetain();
  CKRecordKeyValueSetting.subscript.setter();

  return swift_unknownObjectRelease();
}

uint64_t sub_100D28CF4(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_10165DFF0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100D2972C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v12 = *v3;
  char v13 = 0;
  sub_100037BB4();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v11 = type metadata accessor for SharingCircleSecret();
    LOBYTE(v12) = 1;
    type metadata accessor for UUID();
    sub_100D2A794(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    long long v12 = *(long long *)((char *)v3 + *(int *)(v11 + 32));
    char v13 = 4;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100D28F88@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v32 = a2;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v33 = v3;
  uint64_t v34 = v4;
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v29 - v8;
  uint64_t v37 = sub_10000588C(&qword_10165DFE0);
  uint64_t v35 = *(void *)(v37 - 8);
  __chkstk_darwin(v37);
  uint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for SharingCircleSecret();
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100D2972C();
  uint64_t v36 = v11;
  uint64_t v15 = (uint64_t)v38;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v15) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  uint64_t v30 = v7;
  unint64_t v31 = (int *)v12;
  uint64_t v38 = a1;
  char v40 = 0;
  unint64_t v16 = sub_100037AA0();
  unint64_t v18 = v36;
  uint64_t v17 = v37;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(_OWORD *)uint64_t v14 = v39;
  LOBYTE(v39) = 1;
  sub_100D2A794((unint64_t *)&qword_10163B010, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v19 = v9;
  uint64_t v20 = v33;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  unint64_t v29 = v16;
  uint64_t v21 = v20;
  uint64_t v22 = *(void (**)(char *, char *, uint64_t))(v34 + 32);
  v22(&v14[v31[5]], v19, v20);
  LOBYTE(v39) = 2;
  uint64_t v23 = v30;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  v22(&v14[v31[6]], v23, v21);
  LOBYTE(v39) = 3;
  uint64_t v24 = KeyedDecodingContainer.decode(_:forKey:)();
  unint64_t v25 = v31;
  unint64_t v26 = (uint64_t *)&v14[v31[7]];
  *unint64_t v26 = v24;
  v26[1] = v27;
  char v40 = 4;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v18, v17);
  *(_OWORD *)&v14[v25[8]] = v39;
  sub_100D29858((uint64_t)v14, v32, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v38);
  return sub_100D298C0((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
}

uint64_t sub_100D294DC()
{
  if (qword_1016370C8 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for URL();
  sub_100010324(v0, (uint64_t)qword_10170ECE0);
  UUID.uuidString.getter();
  URL.appendingPathComponent(_:isDirectory:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100D29580@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100D28F88(a1, a2);
}

uint64_t sub_100D29598(void *a1)
{
  return sub_100D28CF4(a1);
}

uint64_t sub_100D295B0(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100D2A794(&qword_10165DFB0, (void (*)(uint64_t))type metadata accessor for SharingCircleSecret);
  uint64_t result = sub_100D2A794(&qword_10165DFB8, (void (*)(uint64_t))type metadata accessor for SharingCircleSecret);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for SharingCircleSecret()
{
  uint64_t result = qword_10165E060;
  if (!qword_10165E060) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100D29680(uint64_t a1)
{
  uint64_t result = sub_100D2A794((unint64_t *)&unk_10165DFC0, (void (*)(uint64_t))type metadata accessor for SharingCircleSecret);
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100D296D8()
{
  unint64_t result = qword_10165DFD0;
  if (!qword_10165DFD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165DFD0);
  }
  return result;
}

unint64_t sub_100D2972C()
{
  unint64_t result = qword_10165DFE8;
  if (!qword_10165DFE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165DFE8);
  }
  return result;
}

uint64_t sub_100D29780(uint64_t a1, uint64_t a2)
{
  if ((_s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8)) & 1) == 0)return 0; {
  uint64_t v4 = type metadata accessor for SharingCircleSecret();
  }
  if ((static UUID.== infix(_:_:)() & 1) == 0 || (static UUID.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v5 = *(int *)(v4 + 28);
  uint64_t v6 = *(void *)(a1 + v5);
  uint64_t v7 = *(void *)(a1 + v5 + 8);
  uint64_t v8 = (void *)(a2 + v5);
  BOOL v9 = v6 == *v8 && v7 == v8[1];
  if (!v9 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  uint64_t v10 = *(int *)(v4 + 32);
  uint64_t v11 = *(void *)(a1 + v10);
  unint64_t v12 = *(void *)(a1 + v10 + 8);
  uint64_t v13 = (uint64_t *)(a2 + v10);
  uint64_t v14 = *v13;
  unint64_t v15 = v13[1];

  return _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v11, v12, v14, v15);
}

uint64_t sub_100D29858(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100D298C0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100D29920(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unsigned char *storeEnumTagSinglePayload for SharingCircleSecret.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100D29A54);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SharingCircleSecret.CodingKeys()
{
  return &type metadata for SharingCircleSecret.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for SharingCircleSecret.ConversionError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100D29B58);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SharingCircleSecret.ConversionError()
{
  return &type metadata for SharingCircleSecret.ConversionError;
}

uint64_t *sub_100D29B90(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v23 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v23 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_1000361E0(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a3[5];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UUID();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    v13((char *)a1 + a3[6], (char *)a2 + a3[6], v12);
    uint64_t v14 = a3[7];
    uint64_t v15 = a3[8];
    unint64_t v16 = (uint64_t *)((char *)a1 + v14);
    uint64_t v17 = (uint64_t *)((char *)a2 + v14);
    uint64_t v18 = v17[1];
    *unint64_t v16 = *v17;
    v16[1] = v18;
    uint64_t v19 = (uint64_t *)((char *)a1 + v15);
    uint64_t v20 = (char *)a2 + v15;
    uint64_t v21 = *(uint64_t *)((char *)a2 + v15);
    unint64_t v22 = *((void *)v20 + 1);
    swift_bridgeObjectRetain();
    sub_1000361E0(v21, v22);
    *uint64_t v19 = v21;
    v19[1] = v22;
  }
  return a1;
}

uint64_t sub_100D29CD4(uint64_t a1, int *a2)
{
  sub_10001CFB8(*(void *)a1, *(void *)(a1 + 8));
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for UUID();
  unsigned int v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  v6(v4, v5);
  v6(a1 + a2[6], v5);
  swift_bridgeObjectRelease();
  uint64_t v7 = (uint64_t *)(a1 + a2[8]);
  uint64_t v8 = *v7;
  unint64_t v9 = v7[1];

  return sub_10001CFB8(v8, v9);
}

uint64_t *sub_100D29D9C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000361E0(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a3[5];
  unint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  v12((char *)a1 + a3[6], (char *)a2 + a3[6], v11);
  uint64_t v13 = a3[7];
  uint64_t v14 = a3[8];
  uint64_t v15 = (uint64_t *)((char *)a1 + v13);
  unint64_t v16 = (uint64_t *)((char *)a2 + v13);
  uint64_t v17 = v16[1];
  *uint64_t v15 = *v16;
  v15[1] = v17;
  uint64_t v18 = (uint64_t *)((char *)a1 + v14);
  uint64_t v19 = *(uint64_t *)((char *)a2 + v14);
  unint64_t v20 = *(uint64_t *)((char *)a2 + v14 + 8);
  swift_bridgeObjectRetain();
  sub_1000361E0(v19, v20);
  *uint64_t v18 = v19;
  v18[1] = v20;
  return a1;
}

uint64_t *sub_100D29E90(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000361E0(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10001CFB8(v8, v9);
  uint64_t v10 = a3[5];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24);
  v14(v11, v12, v13);
  v14((char *)a1 + a3[6], (char *)a2 + a3[6], v13);
  uint64_t v15 = a3[7];
  unint64_t v16 = (uint64_t *)((char *)a1 + v15);
  uint64_t v17 = (uint64_t *)((char *)a2 + v15);
  *unint64_t v16 = *v17;
  v16[1] = v17[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v18 = a3[8];
  uint64_t v19 = (uint64_t *)((char *)a1 + v18);
  unint64_t v20 = (uint64_t *)((char *)a2 + v18);
  uint64_t v21 = *v20;
  unint64_t v22 = v20[1];
  sub_1000361E0(*v20, v22);
  uint64_t v23 = *v19;
  unint64_t v24 = v19[1];
  *uint64_t v19 = v21;
  v19[1] = v22;
  sub_10001CFB8(v23, v24);
  return a1;
}

char *sub_100D29FAC(char *a1, char *a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v6 = a3[5];
  unint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v10(&a1[a3[6]], &a2[a3[6]], v9);
  uint64_t v11 = a3[8];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  *(_OWORD *)&a1[v11] = *(_OWORD *)&a2[v11];
  return a1;
}

uint64_t *sub_100D2A074(uint64_t *a1, char *a2, int *a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001CFB8(v6, v7);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = &a2[v8];
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40);
  v12(v9, v10, v11);
  v12((char *)a1 + a3[6], &a2[a3[6]], v11);
  uint64_t v13 = a3[7];
  uint64_t v14 = (uint64_t *)((char *)a1 + v13);
  uint64_t v15 = (uint64_t *)&a2[v13];
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  *uint64_t v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease();
  uint64_t v18 = a3[8];
  uint64_t v19 = *(uint64_t *)((char *)a1 + v18);
  unint64_t v20 = *(uint64_t *)((char *)a1 + v18 + 8);
  *(_OWORD *)((char *)a1 + v18) = *(_OWORD *)&a2[v18];
  sub_10001CFB8(v19, v20);
  return a1;
}

uint64_t sub_100D2A168(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100D2A17C);
}

uint64_t sub_100D2A17C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 28) + 8);
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    return (v12 + 1);
  }
}

uint64_t sub_100D2A244(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100D2A258);
}

uint64_t sub_100D2A258(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 28) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t sub_100D2A31C()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100D2A3C0()
{
  return sub_100D2A794(&qword_10165E0A8, (void (*)(uint64_t))type metadata accessor for SharingCircleSecret);
}

unint64_t sub_100D2A40C()
{
  unint64_t result = qword_10165E0B0;
  if (!qword_10165E0B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165E0B0);
  }
  return result;
}

unint64_t sub_100D2A464()
{
  unint64_t result = qword_10165E0B8;
  if (!qword_10165E0B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165E0B8);
  }
  return result;
}

unint64_t sub_100D2A4BC()
{
  unint64_t result = qword_10165E0C0;
  if (!qword_10165E0C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165E0C0);
  }
  return result;
}

unint64_t sub_100D2A514()
{
  unint64_t result = qword_10165E0C8[0];
  if (!qword_10165E0C8[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_10165E0C8);
  }
  return result;
}

uint64_t sub_100D2A568(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x80000001013EEA50
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x80000001013F7E70 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x7954746572636573 && a2 == 0xEA00000000006570 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6144746572636573 && a2 == 0xEA00000000006174)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t sub_100D2A794(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100D2A7DC()
{
  return swift_initClassMetadata2();
}

void sub_100D2A840()
{
  unint64_t v1 = *(void (**)(uint64_t))(v0 + 40);
  if (v1)
  {
    uint64_t v2 = swift_retain();
    v1(v2);
    sub_1000A1534((uint64_t)v1);
  }
  if (qword_101636CF0 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_100010324(v3, (uint64_t)qword_10170E3B0);
  oslog = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v4))
  {
    char v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)char v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v4, "All location fetch subscriptions terminated.", v5, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_100D2A950()
{
  return OSAllocatedUnfairLock.callAsFunction<A>(_:)();
}

void sub_100D2A9AC()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  os_log_type_t v4 = (char *)v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  XPCSession.identifier.getter();
  char v17 = 0;
  memset(v16, 0, sizeof(v16));
  swift_beginAccess();
  swift_getTupleTypeMetadata2();
  sub_10001035C(&qword_10163BC60);
  type metadata accessor for Dictionary();
  Dictionary.subscript.setter();
  swift_endAccess();
  if (qword_101636CF0 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170E3B0);
  swift_retain_n();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(void *)&v16[0] = v14;
    *(_DWORD *)uint64_t v8 = 141558275;
    uint64_t v15 = 1752392040;
    uint64_t v18 = v0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 12) = 2081;
    v13[1] = v8 + 14;
    XPCSession.identifier.getter();
    sub_10001035C((unint64_t *)&qword_101638B10);
    uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v10 = v2;
    unint64_t v12 = v11;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v4, v1);
    uint64_t v15 = sub_1008FA0F0(v9, v12, (uint64_t *)v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Removed location fetch subscription %{private,mask.hash}s.", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
}

uint64_t sub_100D2AD40()
{
  sub_1000A1534(*(void *)(v0 + 40));
  swift_release();
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100D2AD88()
{
  uint64_t v0 = sub_10110D850();
  sub_1000A1534(*(void *)(v0 + 40));
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100D2ADDC()
{
  sub_100D2AD88();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for LocationFetchServiceConnections()
{
  return sub_1000103A0();
}

void sub_100D2AE24()
{
}

uint64_t sub_100D2AE40(uint64_t a1, uint64_t a2)
{
  v2[11] = a1;
  v2[12] = a2;
  uint64_t v3 = type metadata accessor for UUID();
  v2[13] = v3;
  v2[14] = *(void *)(v3 - 8);
  v2[15] = swift_task_alloc();
  uint64_t v4 = sub_10000588C(&qword_10163D210);
  v2[16] = v4;
  v2[17] = *(void *)(v4 - 8);
  v2[18] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Duration.UnitsFormatStyle.Unit();
  v2[19] = v5;
  v2[20] = *(void *)(v5 - 8);
  v2[21] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for Logger();
  v2[22] = v6;
  v2[23] = *(void *)(v6 - 8);
  v2[24] = swift_task_alloc();
  uint64_t v7 = sub_10000588C(&qword_101639C68);
  v2[25] = v7;
  void v2[26] = *(void *)(v7 - 8);
  v2[27] = swift_task_alloc();
  v2[28] = swift_task_alloc();
  uint64_t v8 = sub_10000588C((uint64_t *)&unk_1016654A0);
  v2[29] = v8;
  v2[30] = *(void *)(v8 - 8);
  v2[31] = swift_task_alloc();
  v2[32] = swift_task_alloc();
  v2[33] = swift_task_alloc();
  sub_10000588C(&qword_101639A78);
  v2[34] = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Peripheral.ConnectionOptions();
  v2[35] = v9;
  v2[36] = *(void *)(v9 - 8);
  v2[37] = swift_task_alloc();
  sub_10000588C(&qword_101639A80);
  v2[38] = swift_task_alloc();
  sub_10000588C(&qword_101639A88);
  v2[39] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for ContinuousClock.Instant();
  v2[40] = v10;
  v2[41] = *(void *)(v10 - 8);
  v2[42] = swift_task_alloc();
  v2[43] = swift_task_alloc();
  v2[44] = swift_task_alloc();
  v2[45] = swift_task_alloc();
  uint64_t v11 = sub_10000588C(&qword_101639A70);
  v2[46] = v11;
  v2[47] = *(void *)(v11 - 8);
  v2[48] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for ContinuousClock();
  v2[49] = v12;
  v2[50] = *(void *)(v12 - 8);
  v2[51] = swift_task_alloc();
  return _swift_task_switch(sub_100D2B330, 0, 0);
}

uint64_t sub_100D2B330()
{
  ContinuousClock.init()();
  v0[52] = type metadata accessor for Service();
  Identifier.init(stringLiteral:)();
  ContinuousClock.now.getter();
  static Task<>.checkCancellation()();
  uint64_t v1 = v0[38];
  uint64_t v2 = v0[39];
  uint64_t v3 = v0[34];
  uint64_t v4 = type metadata accessor for ConnectUseCase();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v2, 1, 1, v4);
  sub_10000588C(&qword_101639AA8);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_101347BA0;
  static Peripheral.ConnectionOptions.hideFromBTSettings.getter();
  static Peripheral.ConnectionOptions.shouldSkipUnpair.getter();
  v0[6] = v5;
  sub_100DB1F50(&qword_101639AB0, (void (*)(uint64_t))&type metadata accessor for Peripheral.ConnectionOptions);
  sub_10000588C(&qword_101639AB8);
  sub_100062734(&qword_101639AC0, &qword_101639AB8);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v6 = type metadata accessor for PeripheralPairingInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v3, 1, 1, v6);
  Peripheral.Options.init(connectionOptions:pairingInfo:)();
  uint64_t v7 = type metadata accessor for Peripheral.Options();
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v1, 0, 1, v7);
  uint64_t v8 = type metadata accessor for Peripheral();
  v0[53] = v8;
  uint64_t v9 = sub_100DB1F50(&qword_101639AC8, (void (*)(uint64_t))&type metadata accessor for Peripheral);
  v0[54] = v9;
  uint64_t v10 = (void *)swift_task_alloc();
  v0[55] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_100D2B730;
  uint64_t v11 = v0[38];
  uint64_t v12 = v0[39];
  return dispatch thunk of PeripheralProtocol.connect(useCase:options:)(v12, v11, v8, v9);
}

uint64_t sub_100D2B730()
{
  uint64_t v2 = (void *)*v1;
  uint64_t v3 = (void *)*v1;
  v2[56] = v0;
  swift_task_dealloc();
  uint64_t v4 = v2[39];
  uint64_t v5 = v2[38];
  if (v0)
  {
    sub_10001DAB4(v5, &qword_101639A80);
    sub_10001DAB4(v4, &qword_101639A88);
    return _swift_task_switch(sub_100D2BA30, 0, 0);
  }
  else
  {
    sub_10001DAB4(v5, &qword_101639A80);
    sub_10001DAB4(v4, &qword_101639A88);
    uint64_t v6 = (void *)swift_task_alloc();
    v2[57] = v6;
    *uint64_t v6 = v3;
    v6[1] = sub_100D2B91C;
    uint64_t v7 = v2[53];
    uint64_t v8 = v2[54];
    uint64_t v9 = v2[48];
    return dispatch thunk of PeripheralProtocol.subscript.getter(v9, v7, v8);
  }
}

uint64_t sub_100D2B91C(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 464) = a1;
  *(void *)(v3 + 472) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = sub_100D2BF5C;
  }
  else {
    uint64_t v4 = sub_100D2BB38;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_100D2BA30()
{
  (*(void (**)(void, void))(v0[41] + 8))(v0[45], v0[40]);
  v0[89] = v0[56];
  uint64_t v1 = type metadata accessor for Peripheral();
  uint64_t v2 = sub_100DB1F50(&qword_101639AC8, (void (*)(uint64_t))&type metadata accessor for Peripheral);
  uint64_t v3 = (void *)swift_task_alloc();
  v0[90] = v3;
  void *v3 = v0;
  v3[1] = sub_100D2E22C;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v1, v2);
}

uint64_t sub_100D2BB38()
{
  uint64_t v1 = v0[59];
  static Task<>.checkCancellation()();
  if (v1)
  {
    (*(void (**)(void, void))(v0[41] + 8))(v0[45], v0[40]);
    swift_release();
    v0[89] = v1;
    uint64_t v2 = type metadata accessor for Peripheral();
    uint64_t v3 = sub_100DB1F50(&qword_101639AC8, (void (*)(uint64_t))&type metadata accessor for Peripheral);
    uint64_t v4 = (void *)swift_task_alloc();
    v0[90] = v4;
    void *v4 = v0;
    v4[1] = sub_100D2E22C;
    return dispatch thunk of PeripheralProtocol.cancelConnection()(v2, v3);
  }
  else
  {
    uint64_t v5 = v0[30];
    sub_1000B6F60(0, 3, 0);
    type metadata accessor for Characteristic();
    Identifier.init(stringLiteral:)();
    unint64_t v7 = _swiftEmptyArrayStorage[2];
    unint64_t v6 = _swiftEmptyArrayStorage[3];
    if (v7 >= v6 >> 1) {
      sub_1000B6F60(v6 > 1, v7 + 1, 1);
    }
    v0[60] = _swiftEmptyArrayStorage;
    uint64_t v8 = v0[33];
    uint64_t v9 = v0[29];
    _swiftEmptyArrayStorage[2] = v7 + 1;
    unint64_t v10 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    uint64_t v11 = *(void *)(v5 + 72);
    uint64_t v12 = (char *)_swiftEmptyArrayStorage + v10 + v11 * v7;
    uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 32);
    v13(v12, v8, v9);
    Identifier.init(stringLiteral:)();
    unint64_t v15 = _swiftEmptyArrayStorage[2];
    unint64_t v14 = _swiftEmptyArrayStorage[3];
    if (v15 >= v14 >> 1) {
      sub_1000B6F60(v14 > 1, v15 + 1, 1);
    }
    v0[60] = _swiftEmptyArrayStorage;
    uint64_t v16 = v0[33];
    uint64_t v17 = v0[29];
    _swiftEmptyArrayStorage[2] = v15 + 1;
    v13((char *)_swiftEmptyArrayStorage + v10 + v11 * v15, v16, v17);
    Identifier.init(stringLiteral:)();
    unint64_t v19 = _swiftEmptyArrayStorage[2];
    unint64_t v18 = _swiftEmptyArrayStorage[3];
    if (v19 >= v18 >> 1) {
      sub_1000B6F60(v18 > 1, v19 + 1, 1);
    }
    v0[60] = _swiftEmptyArrayStorage;
    uint64_t v20 = v0[33];
    uint64_t v21 = v0[29];
    _swiftEmptyArrayStorage[2] = v19 + 1;
    v13((char *)_swiftEmptyArrayStorage + v10 + v11 * v19, v20, v21);
    uint64_t v22 = sub_100DB1F50(&qword_101639AD0, (void (*)(uint64_t))&type metadata accessor for Service);
    v0[61] = v22;
    uint64_t v23 = (void *)swift_task_alloc();
    v0[62] = v23;
    *uint64_t v23 = v0;
    v23[1] = sub_100D2C064;
    uint64_t v24 = v0[52];
    return dispatch thunk of ServiceProtocol.discover(characteristicIdentifiers:)(_swiftEmptyArrayStorage, v24, v22);
  }
}

uint64_t sub_100D2BF5C()
{
  (*(void (**)(void, void))(v0[41] + 8))(v0[45], v0[40]);
  v0[89] = v0[59];
  uint64_t v1 = type metadata accessor for Peripheral();
  uint64_t v2 = sub_100DB1F50(&qword_101639AC8, (void (*)(uint64_t))&type metadata accessor for Peripheral);
  uint64_t v3 = (void *)swift_task_alloc();
  v0[90] = v3;
  void *v3 = v0;
  v3[1] = sub_100D2E22C;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v1, v2);
}

uint64_t sub_100D2C064()
{
  *(void *)(*(void *)v1 + 504) = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_release();
    uint64_t v2 = sub_100D2C378;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v2 = sub_100D2C1B0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100D2C1B0()
{
  uint64_t v1 = v0[63];
  static Task<>.checkCancellation()();
  if (v1)
  {
    (*(void (**)(void, void))(v0[41] + 8))(v0[45], v0[40]);
    swift_release();
    v0[89] = v1;
    uint64_t v2 = type metadata accessor for Peripheral();
    uint64_t v3 = sub_100DB1F50(&qword_101639AC8, (void (*)(uint64_t))&type metadata accessor for Peripheral);
    uint64_t v4 = (void *)swift_task_alloc();
    v0[90] = v4;
    void *v4 = v0;
    v4[1] = sub_100D2E22C;
    return dispatch thunk of PeripheralProtocol.cancelConnection()(v2, v3);
  }
  else
  {
    v0[64] = type metadata accessor for Characteristic();
    Identifier.init(stringLiteral:)();
    uint64_t v5 = (void *)swift_task_alloc();
    v0[65] = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_100D2C490;
    uint64_t v6 = v0[61];
    uint64_t v7 = v0[52];
    uint64_t v8 = v0[32];
    return dispatch thunk of ServiceProtocol.subscript.getter(v8, v7, v6);
  }
}

uint64_t sub_100D2C378()
{
  uint64_t v1 = v0[45];
  uint64_t v2 = v0[40];
  uint64_t v3 = v0[41];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v0[89] = v0[63];
  uint64_t v4 = type metadata accessor for Peripheral();
  uint64_t v5 = sub_100DB1F50(&qword_101639AC8, (void (*)(uint64_t))&type metadata accessor for Peripheral);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[90] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_100D2E22C;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v4, v5);
}

uint64_t sub_100D2C490(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[66] = a1;
  v3[67] = v1;
  swift_task_dealloc();
  uint64_t v5 = v3[32];
  uint64_t v6 = v3[30];
  uint64_t v7 = v3[29];
  if (v1)
  {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    return _swift_task_switch(sub_100D2C8A0, 0, 0);
  }
  else
  {
    uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v3[68] = v8;
    v3[69] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v8(v5, v7);
    uint64_t v9 = sub_100DB1F50(&qword_101639AE8, (void (*)(uint64_t))&type metadata accessor for Characteristic);
    v3[70] = v9;
    uint64_t v10 = (void *)swift_task_alloc();
    v3[71] = v10;
    *uint64_t v10 = v4;
    v10[1] = sub_100D2C6D4;
    uint64_t v11 = v3[64];
    uint64_t v12 = v3[28];
    return dispatch thunk of CharacteristicProtocol.read()(v12, v11, v9);
  }
}

uint64_t sub_100D2C6D4()
{
  uint64_t v2 = (void *)*v1;
  v2[72] = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_release();
    return _swift_task_switch(sub_100D2CB3C, 0, 0);
  }
  else
  {
    swift_release();
    uint64_t v3 = (void *)swift_task_alloc();
    v2[73] = v3;
    uint64_t v4 = sub_100062734(&qword_101665560, &qword_101639C68);
    v2[74] = v4;
    void *v3 = v2;
    v3[1] = sub_100D2C9B8;
    uint64_t v5 = v2[25];
    return AsyncSequence.first()(v2 + 4, v5, v4);
  }
}

uint64_t sub_100D2C8A0()
{
  uint64_t v1 = v0[45];
  uint64_t v2 = v0[40];
  uint64_t v3 = v0[41];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v0[89] = v0[67];
  uint64_t v4 = type metadata accessor for Peripheral();
  uint64_t v5 = sub_100DB1F50(&qword_101639AC8, (void (*)(uint64_t))&type metadata accessor for Peripheral);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[90] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_100D2E22C;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v4, v5);
}

uint64_t sub_100D2C9B8()
{
  uint64_t v2 = (void *)*v1;
  v2[75] = v0;
  swift_task_dealloc();
  uint64_t v3 = v2[28];
  uint64_t v4 = v2[26];
  uint64_t v5 = v2[25];
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  uint64_t v6 = v4 + 8;
  uint64_t v7 = v8;
  if (v0)
  {
    v7(v3, v5);
    uint64_t v9 = sub_100D2D0A0;
  }
  else
  {
    v2[76] = v7;
    v2[77] = v6 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v7(v3, v5);
    uint64_t v9 = sub_100D2CC54;
  }
  return _swift_task_switch(v9, 0, 0);
}

uint64_t sub_100D2CB3C()
{
  uint64_t v1 = v0[45];
  uint64_t v2 = v0[40];
  uint64_t v3 = v0[41];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v0[89] = v0[72];
  uint64_t v4 = type metadata accessor for Peripheral();
  uint64_t v5 = sub_100DB1F50(&qword_101639AC8, (void (*)(uint64_t))&type metadata accessor for Peripheral);
  uint64_t v6 = (void *)swift_task_alloc();
  v0[90] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_100D2E22C;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v4, v5);
}

uint64_t sub_100D2CC54()
{
  unint64_t v29 = v0;
  uint64_t v1 = v0[4];
  unint64_t v2 = v0[5];
  v0[78] = v1;
  v0[79] = v2;
  if (v2 >> 60 == 15)
  {
    uint64_t v3 = 0;
    unint64_t v4 = 0x8000000000000;
  }
  else
  {
    sub_1000361E0(v1, v2);
    sub_1000361E0(v1, v2);
    uint64_t v5 = sub_1004B4CB8(v1, v2);
    if (v6 >> 60 == 15)
    {
      uint64_t v3 = 0;
      unint64_t v4 = 0x8000000000000;
    }
    else
    {
      uint64_t v7 = v5;
      unint64_t v8 = v6;
      if (qword_101636A58 != -1) {
        swift_once();
      }
      sub_100010324(v0[22], (uint64_t)qword_10170DDA8);
      sub_100037A38(v7, v8);
      sub_1000361E0(v7, v8);
      uint64_t v9 = Logger.logObject.getter();
      os_log_type_t v10 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v9, v10))
      {
        uint64_t v11 = (uint8_t *)swift_slowAlloc();
        uint64_t v28 = swift_slowAlloc();
        *(_DWORD *)uint64_t v11 = 136315138;
        sub_1000361E0(v7, v8);
        uint64_t v12 = sub_1004B4898(v7, v8);
        unint64_t v14 = v13;
        sub_100037A24(v7, v8);
        v0[10] = sub_1008FA0F0(v12, v14, &v28);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100037A24(v7, v8);
        sub_100037A24(v7, v8);
        _os_log_impl((void *)&_mh_execute_header, v9, v10, "DISProductData: %s", v11, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_100037A24(v7, v8);
        sub_100037A24(v7, v8);
      }

      uint64_t v3 = sub_1004B4D44(v7, v8);
      unint64_t v4 = v15;
      sub_100037A24(v7, v8);
    }
    sub_100037A24(v1, v2);
  }
  v0[81] = v4;
  v0[80] = v3;
  uint64_t v16 = v0[75];
  static Task<>.checkCancellation()();
  if (v16)
  {
    uint64_t v17 = v0[45];
    uint64_t v18 = v0[40];
    uint64_t v19 = v0[41];
    swift_release();
    sub_100037A24(v1, v2);
    sub_10001CFB8(v3, v4);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
    v0[89] = v16;
    uint64_t v20 = type metadata accessor for Peripheral();
    uint64_t v21 = sub_100DB1F50(&qword_101639AC8, (void (*)(uint64_t))&type metadata accessor for Peripheral);
    uint64_t v22 = (void *)swift_task_alloc();
    v0[90] = v22;
    *uint64_t v22 = v0;
    v22[1] = sub_100D2E22C;
    return dispatch thunk of PeripheralProtocol.cancelConnection()(v20, v21);
  }
  else
  {
    Identifier.init(stringLiteral:)();
    uint64_t v23 = (void *)swift_task_alloc();
    v0[82] = v23;
    *uint64_t v23 = v0;
    v23[1] = sub_100D2D1B8;
    uint64_t v24 = v0[61];
    uint64_t v25 = v0[52];
    uint64_t v26 = v0[31];
    return dispatch thunk of ServiceProtocol.subscript.getter(v26, v25, v24);
  }
}

uint64_t sub_100D2D0A0()
{
  uint64_t v1 = v0[45];
  uint64_t v2 = v0[40];
  uint64_t v3 = v0[41];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  v0[89] = v0[75];
  uint64_t v4 = type metadata accessor for Peripheral();
  uint64_t v5 = sub_100DB1F50(&qword_101639AC8, (void (*)(uint64_t))&type metadata accessor for Peripheral);
  unint64_t v6 = (void *)swift_task_alloc();
  v0[90] = v6;
  *unint64_t v6 = v0;
  v6[1] = sub_100D2E22C;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v4, v5);
}

uint64_t sub_100D2D1B8(uint64_t a1)
{
  uint64_t v3 = (void *)*v2;
  uint64_t v4 = (void *)*v2;
  v3[83] = a1;
  v3[84] = v1;
  swift_task_dealloc();
  uint64_t v5 = (void (*)(uint64_t, uint64_t))v3[68];
  uint64_t v6 = v3[31];
  uint64_t v7 = v3[29];
  if (v1)
  {
    v5(v6, v7);
    return _swift_task_switch(sub_100D2D54C, 0, 0);
  }
  else
  {
    v5(v6, v7);
    uint64_t v8 = (void *)swift_task_alloc();
    v3[85] = v8;
    *uint64_t v8 = v4;
    v8[1] = sub_100D2D3AC;
    uint64_t v9 = v3[70];
    uint64_t v10 = v3[64];
    uint64_t v11 = v3[27];
    return dispatch thunk of CharacteristicProtocol.read()(v11, v10, v9);
  }
}

uint64_t sub_100D2D3AC()
{
  uint64_t v2 = (void *)*v1;
  v2[86] = v0;
  swift_task_dealloc();
  if (v0)
  {
    swift_release();
    return _swift_task_switch(sub_100D2D80C, 0, 0);
  }
  else
  {
    swift_release();
    uint64_t v3 = (void *)swift_task_alloc();
    v2[87] = v3;
    void *v3 = v2;
    v3[1] = sub_100D2D69C;
    uint64_t v4 = v2[74];
    uint64_t v5 = v2[25];
    return AsyncSequence.first()(v2 + 2, v5, v4);
  }
}

uint64_t sub_100D2D54C()
{
  unint64_t v1 = v0[81];
  uint64_t v2 = v0[80];
  unint64_t v3 = v0[79];
  uint64_t v4 = v0[78];
  uint64_t v5 = v0[45];
  uint64_t v6 = v0[40];
  uint64_t v7 = v0[41];
  swift_release();
  sub_100037A24(v4, v3);
  sub_10001CFB8(v2, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  v0[89] = v0[84];
  uint64_t v8 = type metadata accessor for Peripheral();
  uint64_t v9 = sub_100DB1F50(&qword_101639AC8, (void (*)(uint64_t))&type metadata accessor for Peripheral);
  uint64_t v10 = (void *)swift_task_alloc();
  v0[90] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_100D2E22C;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v8, v9);
}

uint64_t sub_100D2D69C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 704) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2 + 608))(*(void *)(v2 + 216), *(void *)(v2 + 200));
  if (v0) {
    unint64_t v3 = sub_100D2E0DC;
  }
  else {
    unint64_t v3 = sub_100D2D95C;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100D2D80C()
{
  unint64_t v1 = v0[81];
  uint64_t v2 = v0[80];
  unint64_t v3 = v0[79];
  uint64_t v4 = v0[78];
  uint64_t v5 = v0[45];
  uint64_t v6 = v0[40];
  uint64_t v7 = v0[41];
  swift_release();
  sub_100037A24(v4, v3);
  sub_10001CFB8(v2, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  v0[89] = v0[86];
  uint64_t v8 = type metadata accessor for Peripheral();
  uint64_t v9 = sub_100DB1F50(&qword_101639AC8, (void (*)(uint64_t))&type metadata accessor for Peripheral);
  uint64_t v10 = (void *)swift_task_alloc();
  v0[90] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_100D2E22C;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v8, v9);
}

uint64_t sub_100D2D95C()
{
  uint64_t v73 = v0;
  uint64_t v1 = v0[2];
  unint64_t v2 = v0[3];
  if (qword_101636A58 != -1) {
    swift_once();
  }
  uint64_t v3 = sub_100010324(v0[22], (uint64_t)qword_10170DDA8);
  sub_100037A38(v1, v2);
  sub_100037A38(v1, v2);
  uint64_t v68 = v3;
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  unint64_t v70 = v2;
  uint64_t v71 = v1;
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    v72[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136315138;
    if (v2 >> 60 == 15)
    {
      uint64_t v7 = 0;
      unint64_t v8 = 0xE000000000000000;
    }
    else
    {
      uint64_t v7 = Data.hexString.getter();
      unint64_t v8 = v9;
    }
    v0[9] = sub_1008FA0F0(v7, v8, v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100037A24(v1, v2);
    sub_100037A24(v1, v2);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "DIS firmware version: %s", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100037A24(v1, v2);
    sub_100037A24(v1, v2);
  }

  uint64_t v11 = v0[44];
  uint64_t v10 = v0[45];
  uint64_t v12 = v0[43];
  uint64_t v66 = v0[42];
  uint64_t v14 = v0[40];
  uint64_t v13 = v0[41];
  uint64_t v15 = v0[23];
  uint64_t v16 = v0[24];
  uint64_t v17 = v0[22];
  ContinuousClock.now.getter();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v16, v68, v17);
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16);
  v18(v12, v10, v14);
  v18(v66, v11, v14);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  BOOL v21 = os_log_type_enabled(v19, v20);
  uint64_t v22 = v0[42];
  uint64_t v23 = v0[40];
  uint64_t v24 = v0[41];
  uint64_t v25 = v0[23];
  uint64_t v26 = v0[24];
  uint64_t v27 = v0[22];
  if (v21)
  {
    uint64_t v69 = v0[24];
    os_log_type_t v64 = v20;
    uint64_t v28 = v0[20];
    uint64_t v29 = v0[21];
    uint64_t v65 = v0[19];
    unint64_t v63 = v19;
    uint64_t v61 = v0[43];
    uint64_t v30 = (uint8_t *)swift_slowAlloc();
    v72[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v30 = 136446210;
    static Duration.UnitsFormatStyle.Unit.milliseconds.getter();
    sub_100DB1F50(&qword_101653DE0, (void (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant);
    uint64_t v62 = v27;
    uint64_t v31 = static Duration.description<A>(_:_:units:)();
    unint64_t v33 = v32;
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v29, v65);
    v0[8] = sub_1008FA0F0(v31, v33, v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v34 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
    v34(v61, v23);
    uint64_t v67 = v34;
    v34(v22, v23);
    _os_log_impl((void *)&_mh_execute_header, v63, v64, "Raw metadata read time: %{public}s", v30, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v69, v62);
  }
  else
  {
    uint64_t v35 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
    v35(v0[43], v23);
    uint64_t v67 = v35;
    v35(v22, v23);

    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v26, v27);
  }
  uint64_t v59 = v0[80];
  uint64_t v60 = v0[81];
  uint64_t v50 = v0[78];
  uint64_t v36 = v0[50];
  uint64_t v57 = v0[49];
  uint64_t v58 = v0[51];
  uint64_t v37 = v0[47];
  uint64_t v55 = v0[46];
  uint64_t v56 = v0[48];
  uint64_t v53 = v0[45];
  uint64_t v51 = v0[44];
  unint64_t v52 = v0[79];
  uint64_t v49 = v0[40];
  uint64_t v39 = v0[17];
  uint64_t v38 = v0[18];
  uint64_t v40 = v0[16];
  uint64_t v48 = v0[15];
  uint64_t v41 = v0[14];
  uint64_t v54 = v0[13];
  uint64_t v42 = v0[11];
  dispatch thunk of PeripheralProtocol.id.getter();
  Identifier.id.getter();
  swift_release();
  sub_100037A24(v50, v52);
  (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v38, v40);
  v67(v51, v49);
  v67(v53, v49);
  (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v56, v55);
  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v58, v57);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 32))(v42, v48, v54);
  uint64_t v43 = (int *)type metadata accessor for RawAccessoryMetadata(0);
  os_log_type_t v44 = (void *)(v42 + v43[5]);
  *os_log_type_t v44 = v59;
  v44[1] = v60;
  *(_OWORD *)(v42 + v43[6]) = xmmword_101347BB0;
  *(_OWORD *)(v42 + v43[7]) = xmmword_101347BB0;
  *(_OWORD *)(v42 + v43[8]) = xmmword_101347BB0;
  *(_OWORD *)(v42 + v43[9]) = xmmword_101347BB0;
  *(_OWORD *)(v42 + v43[10]) = xmmword_101347BB0;
  unint64_t v45 = (uint64_t *)(v42 + v43[11]);
  *unint64_t v45 = v71;
  v45[1] = v70;
  *(_OWORD *)(v42 + v43[12]) = xmmword_101347BB0;
  *(_OWORD *)(v42 + v43[13]) = xmmword_101347BB0;
  *(_OWORD *)(v42 + v43[14]) = xmmword_101347BB0;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v46 = (uint64_t (*)(void))v0[1];
  return v46();
}

uint64_t sub_100D2E0DC()
{
  unint64_t v1 = v0[81];
  uint64_t v2 = v0[80];
  unint64_t v3 = v0[79];
  uint64_t v4 = v0[78];
  uint64_t v5 = v0[45];
  uint64_t v6 = v0[40];
  uint64_t v7 = v0[41];
  swift_release();
  sub_100037A24(v4, v3);
  sub_10001CFB8(v2, v1);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  v0[89] = v0[88];
  uint64_t v8 = type metadata accessor for Peripheral();
  uint64_t v9 = sub_100DB1F50(&qword_101639AC8, (void (*)(uint64_t))&type metadata accessor for Peripheral);
  uint64_t v10 = (void *)swift_task_alloc();
  v0[90] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_100D2E22C;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v8, v9);
}

uint64_t sub_100D2E22C()
{
  *(void *)(*(void *)v1 + 728) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100D2E4F8;
  }
  else {
    uint64_t v2 = sub_100D2E340;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100D2E340()
{
  uint64_t v1 = v0[50];
  uint64_t v2 = v0[51];
  uint64_t v4 = v0[48];
  uint64_t v3 = v0[49];
  uint64_t v6 = v0[46];
  uint64_t v5 = v0[47];
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v2, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(void))v0[1];
  return v7();
}

uint64_t sub_100D2E4F8()
{
  if (qword_101637238 != -1) {
    swift_once();
  }
  sub_100010324(v0[22], (uint64_t)qword_10170EF80);
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138543362;
    uint64_t v5 = _convertErrorToNSError(_:)();
    v0[7] = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v4 = v5;
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "cancelConnection error in readRawAccessoryMetadata() catch block: %{public}@", v3, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v6 = v0[50];
  uint64_t v7 = v0[51];
  uint64_t v9 = v0[48];
  uint64_t v8 = v0[49];
  uint64_t v11 = v0[46];
  uint64_t v10 = v0[47];
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_100D2E818(uint64_t a1, uint64_t a2)
{
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  uint64_t v4 = type metadata accessor for Date();
  v3[7] = v4;
  v3[8] = *(void *)(v4 - 8);
  v3[9] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  v3[10] = v5;
  v3[11] = *(void *)(v5 - 8);
  v3[12] = swift_task_alloc();
  uint64_t v6 = sub_10000588C(&qword_10163D210);
  v3[13] = v6;
  v3[14] = *(void *)(v6 - 8);
  v3[15] = swift_task_alloc();
  return _swift_task_switch(sub_100D2E998, v2, 0);
}

uint64_t sub_100D2E998()
{
  uint64_t v28 = v0;
  if (qword_1016370D8 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[4];
  uint64_t v3 = v0[14];
  uint64_t v2 = v0[15];
  uint64_t v4 = v0[13];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10165E160);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = v0[14];
  uint64_t v10 = v0[15];
  if (v8)
  {
    uint64_t v11 = v0[11];
    uint64_t v12 = v0[12];
    uint64_t v24 = v0[10];
    uint64_t v26 = v0[13];
    uint64_t v13 = swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136446466;
    os_log_type_t type = v7;
    v0[2] = sub_1008FA0F0(0xD000000000000023, 0x8000000101417DE0, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 12) = 2082;
    Identifier.id.getter();
    sub_100DB1F50((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    log = v6;
    uint64_t v15 = v10;
    unint64_t v17 = v16;
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v24);
    v0[3] = sub_1008FA0F0(v14, v17, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v15, v26);
    uint64_t v6 = log;
    _os_log_impl((void *)&_mh_execute_header, log, type, "%{public}s for %{public}s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v9 + 8))(v0[15], v0[13]);
  }

  static Date.trustedNow.getter(v0[9]);
  Identifier.id.getter();
  uint64_t v18 = (void *)swift_task_alloc();
  v0[16] = v18;
  *uint64_t v18 = v0;
  v18[1] = sub_100D2ECF4;
  uint64_t v19 = v0[12];
  uint64_t v20 = v0[9];
  uint64_t v21 = v0[5];
  return sub_100D81664(v19, 1, v20, v21);
}

uint64_t sub_100D2ECF4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 96);
  uint64_t v2 = *(void *)(*(void *)v0 + 88);
  uint64_t v3 = *(void *)(*(void *)v0 + 80);
  uint64_t v4 = *(void *)(*(void *)v0 + 48);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(sub_100DBAB24, v4, 0);
}

uint64_t sub_100D2EE60(uint64_t a1, uint64_t a2)
{
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  uint64_t v4 = type metadata accessor for Date();
  v3[7] = v4;
  v3[8] = *(void *)(v4 - 8);
  v3[9] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  v3[10] = v5;
  v3[11] = *(void *)(v5 - 8);
  v3[12] = swift_task_alloc();
  uint64_t v6 = sub_10000588C(&qword_10163D210);
  v3[13] = v6;
  v3[14] = *(void *)(v6 - 8);
  v3[15] = swift_task_alloc();
  return _swift_task_switch(sub_100D2EFE0, v2, 0);
}

uint64_t sub_100D2EFE0()
{
  uint64_t v28 = v0;
  if (qword_1016370D8 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[4];
  uint64_t v3 = v0[14];
  uint64_t v2 = v0[15];
  uint64_t v4 = v0[13];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10165E160);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = v0[14];
  uint64_t v10 = v0[15];
  if (v8)
  {
    uint64_t v11 = v0[11];
    uint64_t v12 = v0[12];
    uint64_t v24 = v0[10];
    uint64_t v26 = v0[13];
    uint64_t v13 = swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136446466;
    os_log_type_t type = v7;
    v0[2] = sub_1008FA0F0(0xD000000000000026, 0x8000000101417F10, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 12) = 2082;
    Identifier.id.getter();
    sub_100DB1F50((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    log = v6;
    uint64_t v15 = v10;
    unint64_t v17 = v16;
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v24);
    v0[3] = sub_1008FA0F0(v14, v17, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v15, v26);
    uint64_t v6 = log;
    _os_log_impl((void *)&_mh_execute_header, log, type, "%{public}s for %{public}s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v9 + 8))(v0[15], v0[13]);
  }

  static Date.trustedNow.getter(v0[9]);
  Identifier.id.getter();
  uint64_t v18 = (void *)swift_task_alloc();
  v0[16] = v18;
  *uint64_t v18 = v0;
  v18[1] = sub_100D2ECF4;
  uint64_t v19 = v0[12];
  uint64_t v20 = v0[9];
  uint64_t v21 = v0[5];
  return sub_100D81664(v19, 2, v20, v21);
}

uint64_t sub_100D2F33C(uint64_t a1, uint64_t a2)
{
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  uint64_t v4 = type metadata accessor for Date();
  v3[7] = v4;
  v3[8] = *(void *)(v4 - 8);
  v3[9] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  v3[10] = v5;
  v3[11] = *(void *)(v5 - 8);
  v3[12] = swift_task_alloc();
  uint64_t v6 = sub_10000588C(&qword_10163D210);
  v3[13] = v6;
  v3[14] = *(void *)(v6 - 8);
  v3[15] = swift_task_alloc();
  return _swift_task_switch(sub_100D2F4BC, v2, 0);
}

uint64_t sub_100D2F4BC()
{
  uint64_t v28 = v0;
  if (qword_1016370D8 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[4];
  uint64_t v3 = v0[14];
  uint64_t v2 = v0[15];
  uint64_t v4 = v0[13];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10165E160);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = v0[14];
  uint64_t v10 = v0[15];
  if (v8)
  {
    uint64_t v11 = v0[11];
    uint64_t v12 = v0[12];
    uint64_t v24 = v0[10];
    uint64_t v26 = v0[13];
    uint64_t v13 = swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136446466;
    os_log_type_t type = v7;
    v0[2] = sub_1008FA0F0(0xD000000000000022, 0x8000000101417F40, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 12) = 2082;
    Identifier.id.getter();
    sub_100DB1F50((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    log = v6;
    uint64_t v15 = v10;
    unint64_t v17 = v16;
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v24);
    v0[3] = sub_1008FA0F0(v14, v17, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v15, v26);
    uint64_t v6 = log;
    _os_log_impl((void *)&_mh_execute_header, log, type, "%{public}s for %{public}s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v9 + 8))(v0[15], v0[13]);
  }

  static Date.trustedNow.getter(v0[9]);
  Identifier.id.getter();
  uint64_t v18 = (void *)swift_task_alloc();
  v0[16] = v18;
  *uint64_t v18 = v0;
  v18[1] = sub_100D2F818;
  uint64_t v19 = v0[12];
  uint64_t v20 = v0[9];
  uint64_t v21 = v0[5];
  return sub_100D81664(v19, 3, v20, v21);
}

uint64_t sub_100D2F818()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 96);
  uint64_t v2 = *(void *)(*(void *)v0 + 88);
  uint64_t v3 = *(void *)(*(void *)v0 + 80);
  uint64_t v4 = *(void *)(*(void *)v0 + 48);
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(sub_100D2F984, v4, 0);
}

uint64_t sub_100D2F984()
{
  (*(void (**)(void, void))(v0[8] + 8))(v0[9], v0[7]);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_100D2FA20(uint64_t a1, uint64_t a2)
{
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  uint64_t v4 = type metadata accessor for Date();
  v3[7] = v4;
  v3[8] = *(void *)(v4 - 8);
  v3[9] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  v3[10] = v5;
  v3[11] = *(void *)(v5 - 8);
  v3[12] = swift_task_alloc();
  uint64_t v6 = sub_10000588C(&qword_10163D210);
  v3[13] = v6;
  v3[14] = *(void *)(v6 - 8);
  v3[15] = swift_task_alloc();
  return _swift_task_switch(sub_100D2FBA0, v2, 0);
}

uint64_t sub_100D2FBA0()
{
  uint64_t v28 = v0;
  if (qword_1016370D8 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[4];
  uint64_t v3 = v0[14];
  uint64_t v2 = v0[15];
  uint64_t v4 = v0[13];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10165E160);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = v0[14];
  uint64_t v10 = v0[15];
  if (v8)
  {
    uint64_t v11 = v0[11];
    uint64_t v12 = v0[12];
    uint64_t v24 = v0[10];
    uint64_t v26 = v0[13];
    uint64_t v13 = swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136446466;
    os_log_type_t type = v7;
    v0[2] = sub_1008FA0F0(0xD000000000000022, 0x8000000101417F70, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 12) = 2082;
    Identifier.id.getter();
    sub_100DB1F50((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    log = v6;
    uint64_t v15 = v10;
    unint64_t v17 = v16;
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v24);
    v0[3] = sub_1008FA0F0(v14, v17, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v15, v26);
    uint64_t v6 = log;
    _os_log_impl((void *)&_mh_execute_header, log, type, "%{public}s for %{public}s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v9 + 8))(v0[15], v0[13]);
  }

  static Date.trustedNow.getter(v0[9]);
  Identifier.id.getter();
  uint64_t v18 = (void *)swift_task_alloc();
  v0[16] = v18;
  *uint64_t v18 = v0;
  v18[1] = sub_100D2ECF4;
  uint64_t v19 = v0[12];
  uint64_t v20 = v0[9];
  uint64_t v21 = v0[5];
  return sub_100D81664(v19, 4, v20, v21);
}

uint64_t sub_100D2FEFC(uint64_t a1, uint64_t a2)
{
  v3[20] = a2;
  v3[21] = v2;
  v3[19] = a1;
  sub_10000588C((uint64_t *)&unk_10163B1D0);
  v3[22] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Date();
  v3[23] = v4;
  unsigned char v3[24] = *(void *)(v4 - 8);
  v3[25] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  v3[26] = v5;
  v3[27] = *(void *)(v5 - 8);
  v3[28] = swift_task_alloc();
  v3[29] = swift_task_alloc();
  uint64_t v6 = sub_10000588C(&qword_10163D210);
  v3[30] = v6;
  v3[31] = *(void *)(v6 - 8);
  v3[32] = swift_task_alloc();
  v3[33] = swift_task_alloc();
  return _swift_task_switch(sub_100D300CC, v2, 0);
}

uint64_t sub_100D300CC()
{
  uint64_t v31 = v0;
  if (qword_1016370D8 != -1) {
    swift_once();
  }
  uint64_t v1 = (long long *)(v0 + 7);
  uint64_t v2 = v0[19];
  uint64_t v3 = v0[33];
  uint64_t v4 = v0[30];
  uint64_t v5 = v0[31];
  uint64_t v6 = type metadata accessor for Logger();
  v0[34] = sub_100010324(v6, (uint64_t)qword_10165E160);
  os_log_type_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v0[35] = v7;
  v0[36] = (v5 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v7(v3, v2, v4);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  BOOL v10 = os_log_type_enabled(v8, v9);
  uint64_t v11 = v0[33];
  uint64_t v13 = v0[30];
  uint64_t v12 = v0[31];
  if (v10)
  {
    log = v8;
    uint64_t v14 = v0[29];
    uint64_t v15 = v0[27];
    uint64_t v26 = v0[26];
    uint64_t v16 = swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136446466;
    os_log_type_t type = v9;
    v0[17] = sub_1008FA0F0(0xD000000000000022, 0x8000000101417EB0, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 12) = 2082;
    Identifier.id.getter();
    sub_100DB1F50((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v25 = v13;
    uint64_t v18 = v11;
    unint64_t v20 = v19;
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v26);
    v0[18] = sub_1008FA0F0(v17, v20, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v21(v18, v25);
    uint64_t v8 = log;
    _os_log_impl((void *)&_mh_execute_header, log, type, "%{public}s for %{public}s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v1 = (long long *)(v0 + 7);
    swift_slowDealloc();
  }
  else
  {
    uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v21(v0[33], v0[30]);
  }

  v0[37] = v21;
  static Date.trustedNow.getter(v0[25]);
  uint64_t v22 = qword_1016375E8;
  swift_retain();
  if (v22 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, (uint64_t)v1, (uint64_t *)&unk_101638D30);
  if (v0[10])
  {
    sub_10001CEB0(v1, (uint64_t)(v0 + 2));
    swift_release();
    sub_10001CD44(v0 + 2, v0[5]);
    uint64_t v29 = (uint64_t (__cdecl *)())((char *)&dword_101639150 + dword_101639150);
    uint64_t v24 = (void *)swift_task_alloc();
    v0[38] = v24;
    *uint64_t v24 = v0;
    v24[1] = sub_100D304E4;
    return v29();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100D304E4(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 168);
  *(void *)(*(void *)v1 + 312) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100D305FC, v2, 0);
}

uint64_t sub_100D305FC()
{
  uint64_t v29 = v0;
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (v0[39])
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    Identifier.id.getter();
    uint64_t v2 = v0[39];
    return _swift_task_switch(sub_100D30A38, v2, 0);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_10001CEC8();
    swift_allocError();
    void *v3 = 0xD000000000000013;
    v3[1] = 0x80000001014033F0;
    swift_willThrow();
    uint64_t v4 = (void (*)(uint64_t, uint64_t, uint64_t))v0[35];
    uint64_t v5 = v0[32];
    uint64_t v6 = v0[30];
    uint64_t v7 = v0[19];
    (*(void (**)(void, void))(v0[24] + 8))(v0[25], v0[23]);
    v4(v5, v7, v6);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    BOOL v10 = os_log_type_enabled(v8, v9);
    uint64_t v11 = (void (*)(uint64_t, uint64_t))v0[37];
    uint64_t v12 = v0[32];
    uint64_t v13 = v0[30];
    if (v10)
    {
      uint64_t v14 = v0[29];
      os_log_type_t type = v9;
      uint64_t v16 = v0[26];
      uint64_t v15 = v0[27];
      uint64_t v24 = (void (*)(uint64_t, uint64_t))v0[37];
      uint64_t v17 = swift_slowAlloc();
      uint64_t v26 = (void *)swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 136446466;
      log = v8;
      Identifier.id.getter();
      sub_100DB1F50((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v20 = v19;
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
      v0[15] = sub_1008FA0F0(v18, v20, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v24(v12, v13);
      *(_WORD *)(v17 + 12) = 2114;
      swift_errorRetain();
      uint64_t v21 = _swift_stdlib_bridgeErrorToNSError();
      v0[16] = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v26 = v21;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, log, type, "Failed to store detected device event for %{public}s,\nerror: %{public}@.", (uint8_t *)v17, 0x16u);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      v11(v12, v13);
      swift_errorRelease();
      swift_errorRelease();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v22 = (uint64_t (*)(void))v0[1];
    return v22();
  }
}

uint64_t sub_100D30A38()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[40] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100D30AD8;
  uint64_t v2 = v0[28];
  uint64_t v3 = v0[22];
  return sub_100C12834(v3, v2);
}

uint64_t sub_100D30AD8()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 328) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[39];
    uint64_t v4 = sub_100D310D8;
  }
  else
  {
    uint64_t v6 = v2[27];
    uint64_t v5 = v2[28];
    uint64_t v7 = v2[26];
    uint64_t v8 = v2[21];
    os_log_type_t v9 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v2[42] = v9;
    v2[43] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v9(v5, v7);
    uint64_t v4 = sub_100D30C1C;
    uint64_t v3 = v8;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100D30C1C()
{
  uint64_t v34 = v0;
  uint64_t v1 = v0[22];
  uint64_t v2 = type metadata accessor for LocalFindableAccessoryRecord();
  int v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2);
  sub_10001DAB4(v1, (uint64_t *)&unk_10163B1D0);
  if (v3 == 1)
  {
    sub_1004AF24C();
    swift_allocError();
    *(_OWORD *)uint64_t v4 = xmmword_1013540A0;
    *(unsigned char *)(v4 + 16) = 3;
    swift_willThrow();
    swift_release();
    uint64_t v5 = (void (*)(uint64_t, uint64_t, uint64_t))v0[35];
    uint64_t v6 = v0[32];
    uint64_t v7 = v0[30];
    uint64_t v8 = v0[19];
    (*(void (**)(void, void))(v0[24] + 8))(v0[25], v0[23]);
    v5(v6, v8, v7);
    swift_errorRetain();
    swift_errorRetain();
    os_log_type_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    BOOL v11 = os_log_type_enabled(v9, v10);
    uint64_t v12 = (void (*)(uint64_t, uint64_t))v0[37];
    uint64_t v13 = v0[32];
    uint64_t v14 = v0[30];
    if (v11)
    {
      uint64_t v15 = v0[29];
      os_log_type_t type = v10;
      uint64_t v17 = v0[26];
      uint64_t v16 = v0[27];
      uint64_t v29 = (void (*)(uint64_t, uint64_t))v0[37];
      uint64_t v18 = swift_slowAlloc();
      uint64_t v31 = (void *)swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 136446466;
      log = v9;
      Identifier.id.getter();
      sub_100DB1F50((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v21 = v20;
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
      v0[15] = sub_1008FA0F0(v19, v21, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v29(v13, v14);
      *(_WORD *)(v18 + 12) = 2114;
      swift_errorRetain();
      uint64_t v22 = _swift_stdlib_bridgeErrorToNSError();
      v0[16] = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v31 = v22;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, log, type, "Failed to store detected device event for %{public}s,\nerror: %{public}@.", (uint8_t *)v18, 0x16u);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      v12(v13, v14);
      swift_errorRelease();
      swift_errorRelease();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v28 = (uint64_t (*)(void))v0[1];
    return v28();
  }
  else
  {
    Identifier.id.getter();
    uint64_t v23 = (void *)swift_task_alloc();
    v0[44] = v23;
    *uint64_t v23 = v0;
    v23[1] = sub_100D314C4;
    uint64_t v24 = v0[29];
    uint64_t v25 = v0[25];
    uint64_t v26 = v0[20];
    return sub_100D81664(v24, 5, v25, v26);
  }
}

uint64_t sub_100D310D8()
{
  uint64_t v1 = v0[21];
  (*(void (**)(void, void))(v0[27] + 8))(v0[28], v0[26]);
  return _swift_task_switch(sub_100D31154, v1, 0);
}

uint64_t sub_100D31154()
{
  uint64_t v25 = v0;
  swift_release();
  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[35];
  uint64_t v2 = v0[32];
  uint64_t v3 = v0[30];
  uint64_t v4 = v0[19];
  (*(void (**)(void, void))(v0[24] + 8))(v0[25], v0[23]);
  v1(v2, v4, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v22 = (void (*)(uint64_t, uint64_t))v0[37];
    uint64_t v7 = v0[29];
    uint64_t v20 = v0[32];
    uint64_t v21 = v0[30];
    uint64_t v8 = v0[26];
    uint64_t v9 = v0[27];
    uint64_t v10 = swift_slowAlloc();
    uint64_t v23 = (void *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136446466;
    Identifier.id.getter();
    sub_100DB1F50((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v13 = v12;
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    v0[15] = sub_1008FA0F0(v11, v13, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v22(v20, v21);
    *(_WORD *)(v10 + 12) = 2114;
    swift_errorRetain();
    uint64_t v14 = _swift_stdlib_bridgeErrorToNSError();
    v0[16] = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v23 = v14;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to store detected device event for %{public}s,\nerror: %{public}@.", (uint8_t *)v10, 0x16u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    uint64_t v15 = (void (*)(uint64_t, uint64_t))v0[37];
    uint64_t v16 = v0[32];
    uint64_t v17 = v0[30];
    swift_errorRelease();
    v15(v16, v17);
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v18 = (uint64_t (*)(void))v0[1];
  return v18();
}

uint64_t sub_100D314C4()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(*(void *)v0 + 336);
  uint64_t v2 = *(void *)(*(void *)v0 + 232);
  uint64_t v3 = *(void *)(*(void *)v0 + 208);
  uint64_t v4 = *(void *)(*(void *)v0 + 168);
  swift_task_dealloc();
  v1(v2, v3);
  return _swift_task_switch(sub_100D31640, v4, 0);
}

uint64_t sub_100D31640()
{
  uint64_t v2 = v0[24];
  uint64_t v1 = v0[25];
  uint64_t v3 = v0[23];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_100D3170C(uint64_t a1, uint64_t a2)
{
  v3[20] = a2;
  v3[21] = v2;
  v3[19] = a1;
  sub_10000588C((uint64_t *)&unk_10163B1D0);
  v3[22] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for Date();
  v3[23] = v4;
  unsigned char v3[24] = *(void *)(v4 - 8);
  v3[25] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  v3[26] = v5;
  v3[27] = *(void *)(v5 - 8);
  v3[28] = swift_task_alloc();
  v3[29] = swift_task_alloc();
  uint64_t v6 = sub_10000588C(&qword_10163D210);
  v3[30] = v6;
  v3[31] = *(void *)(v6 - 8);
  v3[32] = swift_task_alloc();
  v3[33] = swift_task_alloc();
  return _swift_task_switch(sub_100D318DC, v2, 0);
}

uint64_t sub_100D318DC()
{
  uint64_t v31 = v0;
  if (qword_1016370D8 != -1) {
    swift_once();
  }
  uint64_t v1 = (long long *)(v0 + 7);
  uint64_t v2 = v0[19];
  uint64_t v3 = v0[33];
  uint64_t v4 = v0[30];
  uint64_t v5 = v0[31];
  uint64_t v6 = type metadata accessor for Logger();
  v0[34] = sub_100010324(v6, (uint64_t)qword_10165E160);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v0[35] = v7;
  v0[36] = (v5 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v7(v3, v2, v4);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  BOOL v10 = os_log_type_enabled(v8, v9);
  uint64_t v11 = v0[33];
  uint64_t v13 = v0[30];
  uint64_t v12 = v0[31];
  if (v10)
  {
    log = v8;
    uint64_t v14 = v0[29];
    uint64_t v15 = v0[27];
    uint64_t v26 = v0[26];
    uint64_t v16 = swift_slowAlloc();
    uint64_t v30 = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 136446466;
    os_log_type_t type = v9;
    v0[17] = sub_1008FA0F0(0xD000000000000025, 0x8000000101417EE0, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 12) = 2082;
    Identifier.id.getter();
    sub_100DB1F50((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v25 = v13;
    uint64_t v18 = v11;
    unint64_t v20 = v19;
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v26);
    v0[18] = sub_1008FA0F0(v17, v20, &v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v21(v18, v25);
    uint64_t v8 = log;
    _os_log_impl((void *)&_mh_execute_header, log, type, "%{public}s for %{public}s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v1 = (long long *)(v0 + 7);
    swift_slowDealloc();
  }
  else
  {
    uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v21(v0[33], v0[30]);
  }

  v0[37] = v21;
  static Date.trustedNow.getter(v0[25]);
  uint64_t v22 = qword_1016375E8;
  swift_retain();
  if (v22 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, (uint64_t)v1, (uint64_t *)&unk_101638D30);
  if (v0[10])
  {
    sub_10001CEB0(v1, (uint64_t)(v0 + 2));
    swift_release();
    sub_10001CD44(v0 + 2, v0[5]);
    uint64_t v29 = (uint64_t (__cdecl *)())((char *)&dword_101639150 + dword_101639150);
    uint64_t v24 = (void *)swift_task_alloc();
    v0[38] = v24;
    *uint64_t v24 = v0;
    v24[1] = sub_100D31CF4;
    return v29();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100D31CF4(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 168);
  *(void *)(*(void *)v1 + 312) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100D31E0C, v2, 0);
}

uint64_t sub_100D31E0C()
{
  uint64_t v29 = v0;
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (v0[39])
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    Identifier.id.getter();
    uint64_t v2 = v0[39];
    return _swift_task_switch(sub_100D32248, v2, 0);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_10001CEC8();
    swift_allocError();
    void *v3 = 0xD000000000000013;
    v3[1] = 0x80000001014033F0;
    swift_willThrow();
    uint64_t v4 = (void (*)(uint64_t, uint64_t, uint64_t))v0[35];
    uint64_t v5 = v0[32];
    uint64_t v6 = v0[30];
    uint64_t v7 = v0[19];
    (*(void (**)(void, void))(v0[24] + 8))(v0[25], v0[23]);
    v4(v5, v7, v6);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    BOOL v10 = os_log_type_enabled(v8, v9);
    uint64_t v11 = (void (*)(uint64_t, uint64_t))v0[37];
    uint64_t v12 = v0[32];
    uint64_t v13 = v0[30];
    if (v10)
    {
      uint64_t v14 = v0[29];
      os_log_type_t type = v9;
      uint64_t v16 = v0[26];
      uint64_t v15 = v0[27];
      uint64_t v24 = (void (*)(uint64_t, uint64_t))v0[37];
      uint64_t v17 = swift_slowAlloc();
      uint64_t v26 = (void *)swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 136446466;
      log = v8;
      Identifier.id.getter();
      sub_100DB1F50((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v20 = v19;
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
      v0[15] = sub_1008FA0F0(v18, v20, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v24(v12, v13);
      *(_WORD *)(v17 + 12) = 2114;
      swift_errorRetain();
      uint64_t v21 = _swift_stdlib_bridgeErrorToNSError();
      v0[16] = v21;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v26 = v21;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, log, type, "Failed to store disappeared device event for %{public}s,\nerror: %{public}@.", (uint8_t *)v17, 0x16u);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      v11(v12, v13);
      swift_errorRelease();
      swift_errorRelease();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v22 = (uint64_t (*)(void))v0[1];
    return v22();
  }
}

uint64_t sub_100D32248()
{
  uint64_t v1 = (void *)swift_task_alloc();
  v0[40] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100D322E8;
  uint64_t v2 = v0[28];
  uint64_t v3 = v0[22];
  return sub_100C12834(v3, v2);
}

uint64_t sub_100D322E8()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 328) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = v2[39];
    uint64_t v4 = sub_100D328E8;
  }
  else
  {
    uint64_t v6 = v2[27];
    uint64_t v5 = v2[28];
    uint64_t v7 = v2[26];
    uint64_t v8 = v2[21];
    os_log_type_t v9 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v2[42] = v9;
    v2[43] = (v6 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v9(v5, v7);
    uint64_t v4 = sub_100D3242C;
    uint64_t v3 = v8;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100D3242C()
{
  uint64_t v34 = v0;
  uint64_t v1 = v0[22];
  uint64_t v2 = type metadata accessor for LocalFindableAccessoryRecord();
  int v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2);
  sub_10001DAB4(v1, (uint64_t *)&unk_10163B1D0);
  if (v3 == 1)
  {
    sub_1004AF24C();
    swift_allocError();
    *(_OWORD *)uint64_t v4 = xmmword_1013540A0;
    *(unsigned char *)(v4 + 16) = 3;
    swift_willThrow();
    swift_release();
    uint64_t v5 = (void (*)(uint64_t, uint64_t, uint64_t))v0[35];
    uint64_t v6 = v0[32];
    uint64_t v7 = v0[30];
    uint64_t v8 = v0[19];
    (*(void (**)(void, void))(v0[24] + 8))(v0[25], v0[23]);
    v5(v6, v8, v7);
    swift_errorRetain();
    swift_errorRetain();
    os_log_type_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    BOOL v11 = os_log_type_enabled(v9, v10);
    uint64_t v12 = (void (*)(uint64_t, uint64_t))v0[37];
    uint64_t v13 = v0[32];
    uint64_t v14 = v0[30];
    if (v11)
    {
      uint64_t v15 = v0[29];
      os_log_type_t type = v10;
      uint64_t v17 = v0[26];
      uint64_t v16 = v0[27];
      uint64_t v29 = (void (*)(uint64_t, uint64_t))v0[37];
      uint64_t v18 = swift_slowAlloc();
      uint64_t v31 = (void *)swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 136446466;
      log = v9;
      Identifier.id.getter();
      sub_100DB1F50((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v21 = v20;
      (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
      v0[15] = sub_1008FA0F0(v19, v21, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v29(v13, v14);
      *(_WORD *)(v18 + 12) = 2114;
      swift_errorRetain();
      uint64_t v22 = _swift_stdlib_bridgeErrorToNSError();
      v0[16] = v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v31 = v22;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, log, type, "Failed to store disappeared device event for %{public}s,\nerror: %{public}@.", (uint8_t *)v18, 0x16u);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      v12(v13, v14);
      swift_errorRelease();
      swift_errorRelease();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v28 = (uint64_t (*)(void))v0[1];
    return v28();
  }
  else
  {
    Identifier.id.getter();
    uint64_t v23 = (void *)swift_task_alloc();
    v0[44] = v23;
    *uint64_t v23 = v0;
    v23[1] = sub_100D32CD4;
    uint64_t v24 = v0[29];
    uint64_t v25 = v0[25];
    uint64_t v26 = v0[20];
    return sub_100D81664(v24, 6, v25, v26);
  }
}

uint64_t sub_100D328E8()
{
  uint64_t v1 = v0[21];
  (*(void (**)(void, void))(v0[27] + 8))(v0[28], v0[26]);
  return _swift_task_switch(sub_100D32964, v1, 0);
}

uint64_t sub_100D32964()
{
  uint64_t v25 = v0;
  swift_release();
  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[35];
  uint64_t v2 = v0[32];
  uint64_t v3 = v0[30];
  uint64_t v4 = v0[19];
  (*(void (**)(void, void))(v0[24] + 8))(v0[25], v0[23]);
  v1(v2, v4, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v22 = (void (*)(uint64_t, uint64_t))v0[37];
    uint64_t v7 = v0[29];
    uint64_t v20 = v0[32];
    uint64_t v21 = v0[30];
    uint64_t v8 = v0[26];
    uint64_t v9 = v0[27];
    uint64_t v10 = swift_slowAlloc();
    uint64_t v23 = (void *)swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 136446466;
    Identifier.id.getter();
    sub_100DB1F50((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v13 = v12;
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
    v0[15] = sub_1008FA0F0(v11, v13, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v22(v20, v21);
    *(_WORD *)(v10 + 12) = 2114;
    swift_errorRetain();
    uint64_t v14 = _swift_stdlib_bridgeErrorToNSError();
    v0[16] = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v23 = v14;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to store disappeared device event for %{public}s,\nerror: %{public}@.", (uint8_t *)v10, 0x16u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    uint64_t v15 = (void (*)(uint64_t, uint64_t))v0[37];
    uint64_t v16 = v0[32];
    uint64_t v17 = v0[30];
    swift_errorRelease();
    v15(v16, v17);
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v18 = (uint64_t (*)(void))v0[1];
  return v18();
}

uint64_t sub_100D32CD4()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(*(void *)v0 + 336);
  uint64_t v2 = *(void *)(*(void *)v0 + 232);
  uint64_t v3 = *(void *)(*(void *)v0 + 208);
  uint64_t v4 = *(void *)(*(void *)v0 + 168);
  swift_task_dealloc();
  v1(v2, v3);
  return _swift_task_switch(sub_100DBAAD4, v4, 0);
}

uint64_t sub_100D32E50(uint64_t a1, char a2)
{
  *(unsigned char *)(v3 + 104) = a2;
  *(void *)(v3 + 32) = a1;
  *(void *)(v3 + 40) = v2;
  *(void *)(v3 + 48) = *v2;
  uint64_t v4 = sub_10000588C(&qword_10163D210);
  *(void *)(v3 + 56) = v4;
  *(void *)(v3 + 64) = *(void *)(v4 - 8);
  *(void *)(v3 + 72) = swift_task_alloc();
  return _swift_task_switch(sub_100D32F40, v2, 0);
}

uint64_t sub_100D32F40()
{
  uint64_t v25 = v0;
  if (qword_1016370D8 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v4 = *(void *)(v0 + 56);
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10165E160);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = *(void *)(v0 + 64);
  uint64_t v9 = *(void *)(v0 + 72);
  uint64_t v11 = *(void *)(v0 + 56);
  if (v8)
  {
    os_log_type_t type = v7;
    uint64_t v12 = swift_slowAlloc();
    uint64_t v24 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136446466;
    *(void *)(v0 + 16) = sub_1008FA0F0(0xD000000000000039, 0x8000000101417B50, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2082;
    sub_100062734(&qword_10163B810, &qword_10163D210);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 24) = sub_1008FA0F0(v13, v14, &v24);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    _os_log_impl((void *)&_mh_execute_header, v6, type, "%{public}s for %{public}s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v10 + 8))(*(void *)(v0 + 72), *(void *)(v0 + 56));
  }

  uint64_t v15 = *(void *)(v0 + 40);
  uint64_t v16 = *(void *)(v0 + 48);
  char v17 = *(unsigned char *)(v0 + 104);
  uint64_t v18 = *(void *)(v0 + 32);
  uint64_t v19 = sub_100DB1F50(&qword_10165E588, (void (*)(uint64_t))type metadata accessor for PencilPairingService);
  uint64_t v20 = swift_task_alloc();
  *(void *)(v0 + 80) = v20;
  *(void *)(v20 + 16) = v15;
  *(void *)(v20 + 24) = v18;
  *(unsigned char *)(v20 + 32) = v17;
  *(void *)(v20 + 40) = v16;
  uint64_t v21 = (void *)swift_task_alloc();
  *(void *)(v0 + 88) = v21;
  *uint64_t v21 = v0;
  v21[1] = sub_100D332B4;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v21, v15, v19, 0xD000000000000039, 0x8000000101417B50, sub_100DAEC48, v20, (char *)&type metadata for () + 8);
}

uint64_t sub_100D332B4()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 96) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 40);
    uint64_t v4 = sub_1000FAFD0;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 40);
    swift_task_dealloc();
    uint64_t v4 = sub_100D333DC;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100D333DC()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100D33440(uint64_t a1)
{
  void v2[4] = a1;
  v2[5] = v1;
  v2[6] = *v1;
  uint64_t v3 = sub_10000588C(&qword_10163D210);
  v2[7] = v3;
  v2[8] = *(void *)(v3 - 8);
  v2[9] = swift_task_alloc();
  return _swift_task_switch(sub_100D3352C, v1, 0);
}

uint64_t sub_100D3352C()
{
  uint64_t v24 = v0;
  if (qword_1016370D8 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[4];
  uint64_t v3 = v0[8];
  uint64_t v2 = v0[9];
  uint64_t v4 = v0[7];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10165E160);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = v0[8];
  uint64_t v9 = v0[9];
  uint64_t v11 = v0[7];
  if (v8)
  {
    os_log_type_t type = v7;
    uint64_t v12 = swift_slowAlloc();
    uint64_t v23 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136446466;
    v0[2] = sub_1008FA0F0(0xD000000000000029, 0x8000000101417C10, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2082;
    sub_100062734(&qword_10163B810, &qword_10163D210);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[3] = sub_1008FA0F0(v13, v14, &v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v9, v11);
    _os_log_impl((void *)&_mh_execute_header, v6, type, "%{public}s for identifier %{public}s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v10 + 8))(v0[9], v0[7]);
  }

  uint64_t v15 = v0[5];
  uint64_t v16 = v0[6];
  uint64_t v17 = v0[4];
  uint64_t v18 = sub_100DB1F50(&qword_10165E588, (void (*)(uint64_t))type metadata accessor for PencilPairingService);
  uint64_t v19 = (void *)swift_task_alloc();
  v0[10] = v19;
  void v19[2] = v15;
  v19[3] = v17;
  v19[4] = v16;
  uint64_t v20 = (void *)swift_task_alloc();
  v0[11] = v20;
  *uint64_t v20 = v0;
  v20[1] = sub_100D332B4;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v20, v15, v18, 0xD000000000000029, 0x8000000101417C10, sub_100DB2924, v19, (char *)&type metadata for () + 8);
}

uint64_t sub_100D33898(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  v23[0] = a2;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v26 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v24 = *(void *)(v10 - 8);
  uint64_t v25 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for BeaconProductInfoRecord();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(v13 - 8);
  uint64_t v16 = (char *)v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23[1] = *(void *)(v4 + 64);
  sub_100DB2E50(a1, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
  unint64_t v17 = (*(unsigned __int8 *)(v14 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  unint64_t v18 = (v15 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = swift_allocObject();
  sub_100DB2DE8((uint64_t)v16, v19 + v17, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
  *(void *)(v19 + v18) = v4;
  uint64_t v20 = (void *)(v19 + ((v18 + 15) & 0xFFFFFFFFFFFFFFF8));
  *uint64_t v20 = v23[0];
  v20[1] = a3;
  aBlock[4] = sub_100DB4A44;
  aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015F2CB0;
  uint64_t v21 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v27 = _swiftEmptyArrayStorage;
  sub_100DB1F50((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v12, v25);
  return swift_release();
}

uint64_t sub_100D33C4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  v23[0] = a2;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v26 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v24 = *(void *)(v10 - 8);
  uint64_t v25 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for PairingErrorRecord(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(v13 - 8);
  uint64_t v16 = (char *)v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23[1] = *(void *)(v4 + 64);
  sub_100DB2E50(a1, (uint64_t)v16, type metadata accessor for PairingErrorRecord);
  unint64_t v17 = (*(unsigned __int8 *)(v14 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  unint64_t v18 = (v15 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = swift_allocObject();
  sub_100DB2DE8((uint64_t)v16, v19 + v17, type metadata accessor for PairingErrorRecord);
  *(void *)(v19 + v18) = v4;
  uint64_t v20 = (void *)(v19 + ((v18 + 15) & 0xFFFFFFFFFFFFFFF8));
  *uint64_t v20 = v23[0];
  v20[1] = a3;
  aBlock[4] = sub_100DBA914;
  aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015F3278;
  uint64_t v21 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v27 = _swiftEmptyArrayStorage;
  sub_100DB1F50((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v12, v25);
  return swift_release();
}

uint64_t sub_100D34000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  v23[0] = a2;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v26 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v24 = *(void *)(v10 - 8);
  uint64_t v25 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for WildModeAssociationRecord(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(v13 - 8);
  uint64_t v16 = (char *)v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23[1] = *(void *)(v4 + 64);
  sub_100DB2E50(a1, (uint64_t)v16, type metadata accessor for WildModeAssociationRecord);
  unint64_t v17 = (*(unsigned __int8 *)(v14 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  unint64_t v18 = (v15 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = swift_allocObject();
  sub_100DB2DE8((uint64_t)v16, v19 + v17, type metadata accessor for WildModeAssociationRecord);
  *(void *)(v19 + v18) = v4;
  uint64_t v20 = (void *)(v19 + ((v18 + 15) & 0xFFFFFFFFFFFFFFF8));
  *uint64_t v20 = v23[0];
  v20[1] = a3;
  aBlock[4] = sub_100DB562C;
  aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015F2D50;
  uint64_t v21 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v27 = _swiftEmptyArrayStorage;
  sub_100DB1F50((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v12, v25);
  return swift_release();
}

uint64_t sub_100D343B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  v23[0] = a2;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v26 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v24 = *(void *)(v10 - 8);
  uint64_t v25 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for SecureLocationsCachedSharedKey(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(v13 - 8);
  uint64_t v16 = (char *)v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23[1] = *(void *)(v4 + 64);
  sub_100DB2E50(a1, (uint64_t)v16, type metadata accessor for SecureLocationsCachedSharedKey);
  unint64_t v17 = (*(unsigned __int8 *)(v14 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  unint64_t v18 = (v15 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = swift_allocObject();
  sub_100DB2DE8((uint64_t)v16, v19 + v17, type metadata accessor for SecureLocationsCachedSharedKey);
  *(void *)(v19 + v18) = v4;
  uint64_t v20 = (void *)(v19 + ((v18 + 15) & 0xFFFFFFFFFFFFFFF8));
  *uint64_t v20 = v23[0];
  v20[1] = a3;
  aBlock[4] = sub_100DB8A58;
  aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015F2F80;
  uint64_t v21 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v27 = _swiftEmptyArrayStorage;
  sub_100DB1F50((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v12, v25);
  return swift_release();
}

uint64_t sub_100D34768(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  v23[0] = a2;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v26 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v24 = *(void *)(v10 - 8);
  uint64_t v25 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for SecureLocationsCachedPayload();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(v13 - 8);
  uint64_t v16 = (char *)v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23[1] = *(void *)(v4 + 64);
  sub_100DB2E50(a1, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for SecureLocationsCachedPayload);
  unint64_t v17 = (*(unsigned __int8 *)(v14 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  unint64_t v18 = (v15 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = swift_allocObject();
  sub_100DB2DE8((uint64_t)v16, v19 + v17, (uint64_t (*)(void))type metadata accessor for SecureLocationsCachedPayload);
  *(void *)(v19 + v18) = v4;
  uint64_t v20 = (void *)(v19 + ((v18 + 15) & 0xFFFFFFFFFFFFFFF8));
  *uint64_t v20 = v23[0];
  v20[1] = a3;
  aBlock[4] = sub_100DBA744;
  aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015F3228;
  uint64_t v21 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v27 = _swiftEmptyArrayStorage;
  sub_100DB1F50((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v12, v25);
  return swift_release();
}

uint64_t sub_100D34B1C(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25[0] = *(void *)(v4 + 64);
  uint64_t v16 = swift_allocObject();
  long long v17 = a1[11];
  *(_OWORD *)(v16 + 176) = a1[10];
  *(_OWORD *)(v16 + 192) = v17;
  *(_OWORD *)(v16 + 208) = a1[12];
  long long v18 = a1[7];
  *(_OWORD *)(v16 + 112) = a1[6];
  *(_OWORD *)(v16 + 128) = v18;
  long long v19 = a1[9];
  *(_OWORD *)(v16 + 144) = a1[8];
  *(_OWORD *)(v16 + 160) = v19;
  long long v20 = a1[3];
  *(_OWORD *)(v16 + 48) = a1[2];
  *(_OWORD *)(v16 + 64) = v20;
  long long v21 = a1[5];
  *(_OWORD *)(v16 + 80) = a1[4];
  *(_OWORD *)(v16 + 96) = v21;
  long long v22 = a1[1];
  *(_OWORD *)(v16 + 16) = *a1;
  *(_OWORD *)(v16 + 32) = v22;
  *(void *)(v16 + 224) = v4;
  *(void *)(v16 + 232) = a2;
  *(void *)(v16 + 240) = a3;
  aBlock[4] = sub_100DB8B00;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015F2FD0;
  uint64_t v23 = _Block_copy(aBlock);
  sub_1006F40C4((uint64_t)a1);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v25[1] = _swiftEmptyArrayStorage;
  sub_100DB1F50((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v23);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
  return swift_release();
}

uint64_t sub_100D34E34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  v23[0] = a2;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v26 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v24 = *(void *)(v10 - 8);
  uint64_t v25 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for SecureLocationsCachedSharingKey(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(v13 - 8);
  uint64_t v16 = (char *)v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23[1] = *(void *)(v4 + 64);
  sub_100DB2E50(a1, (uint64_t)v16, type metadata accessor for SecureLocationsCachedSharingKey);
  unint64_t v17 = (*(unsigned __int8 *)(v14 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  unint64_t v18 = (v15 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = swift_allocObject();
  sub_100DB2DE8((uint64_t)v16, v19 + v17, type metadata accessor for SecureLocationsCachedSharingKey);
  *(void *)(v19 + v18) = v4;
  long long v20 = (void *)(v19 + ((v18 + 15) & 0xFFFFFFFFFFFFFFF8));
  *long long v20 = v23[0];
  v20[1] = a3;
  aBlock[4] = sub_100DB87F0;
  aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015F2F30;
  long long v21 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v27 = _swiftEmptyArrayStorage;
  sub_100DB1F50((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v12, v25);
  return swift_release();
}

uint64_t sub_100D351E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  v23[0] = a2;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v26 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v24 = *(void *)(v10 - 8);
  uint64_t v25 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for LocationProvider();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(v13 - 8);
  uint64_t v16 = (char *)v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23[1] = *(void *)(v4 + 64);
  sub_100DB2E50(a1, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for LocationProvider);
  unint64_t v17 = (*(unsigned __int8 *)(v14 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  unint64_t v18 = (v15 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = swift_allocObject();
  sub_100DB2DE8((uint64_t)v16, v19 + v17, (uint64_t (*)(void))type metadata accessor for LocationProvider);
  *(void *)(v19 + v18) = v4;
  long long v20 = (void *)(v19 + ((v18 + 15) & 0xFFFFFFFFFFFFFFF8));
  *long long v20 = v23[0];
  v20[1] = a3;
  aBlock[4] = sub_100DB58BC;
  aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015F2DA0;
  long long v21 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v27 = _swiftEmptyArrayStorage;
  sub_100DB1F50((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v12, v25);
  return swift_release();
}

uint64_t sub_100D3559C(uint64_t a1, uint64_t a2, void (*a3)(char *), uint64_t a4)
{
  return sub_100D35B9C(a1, a2, a3, a4, &qword_1016592D0, (uint64_t)sub_100DB4AA4, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
}

uint64_t sub_100D355D0(uint64_t a1, uint64_t a2, void (*a3)(long long *))
{
  uint64_t v16 = *(void *)(a1 + 8);
  uint64_t v17 = *(void *)a1;
  uint64_t v14 = *(void *)(a1 + 24);
  uint64_t v15 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v9 = *(void *)(a1 + 72);
  uint64_t v10 = *(void *)(a1 + 80);
  long long v11 = *(_OWORD *)(a1 + 48);
  long long v21 = *(_OWORD *)(a1 + 32);
  uint64_t v4 = v21;
  long long v22 = v11;
  long long v23 = *(_OWORD *)(a1 + 64);
  uint64_t v24 = *(void *)(a1 + 80);
  long long v12 = *(_OWORD *)(a1 + 16);
  long long v19 = *(_OWORD *)a1;
  long long v20 = v12;
  OS_dispatch_queue.sync<A>(execute:)();
  static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  *(void *)&long long v19 = v17;
  *((void *)&v19 + 1) = v16;
  *(void *)&long long v20 = v15;
  *((void *)&v20 + 1) = v14;
  *(void *)&long long v21 = v4;
  *((void *)&v21 + 1) = v5;
  *(void *)&long long v22 = v6;
  *((void *)&v22 + 1) = v7;
  *(void *)&long long v23 = v8;
  *((void *)&v23 + 1) = v9;
  uint64_t v24 = v10;
  char v25 = 0;
  sub_100DB8CC4(a1);
  a3(&v19);
  return sub_100DB8D1C(a1);
}

uint64_t sub_100D35898(long long *a1, uint64_t a2, void (*a3)(unsigned char *))
{
  long long v5 = a1[9];
  long long v6 = a1[11];
  long long v30 = a1[10];
  long long v31 = v6;
  long long v7 = a1[11];
  long long v32 = a1[12];
  long long v8 = a1[5];
  long long v9 = a1[7];
  long long v26 = a1[6];
  long long v27 = v9;
  long long v10 = a1[7];
  long long v11 = a1[9];
  long long v28 = a1[8];
  long long v29 = v11;
  long long v12 = a1[1];
  long long v13 = a1[3];
  long long v22 = a1[2];
  long long v23 = v13;
  long long v14 = a1[3];
  long long v15 = a1[5];
  long long v24 = a1[4];
  long long v25 = v15;
  long long v16 = a1[1];
  long long v20 = *a1;
  long long v21 = v16;
  unsigned char v19[24] = v30;
  v19[25] = v7;
  v19[26] = a1[12];
  v19[20] = v26;
  v19[21] = v10;
  v19[22] = v28;
  v19[23] = v5;
  v19[16] = v22;
  v19[17] = v14;
  v19[18] = v24;
  v19[19] = v8;
  v19[14] = v20;
  v19[15] = v12;
  OS_dispatch_queue.sync<A>(execute:)();
  static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  v19[10] = v30;
  v19[11] = v31;
  v19[12] = v32;
  v19[6] = v26;
  v19[7] = v27;
  v19[8] = v28;
  v19[9] = v29;
  void v19[2] = v22;
  v19[3] = v23;
  v19[4] = v24;
  v19[5] = v25;
  v19[0] = v20;
  v19[1] = v21;
  sub_100DB8BD0((uint64_t)v19);
  sub_10001D608((uint64_t)v19, (uint64_t)v18, &qword_10164A348);
  sub_1006F40C4((uint64_t)a1);
  a3(v18);
  return sub_100551984((uint64_t)a1);
}

uint64_t sub_100D35B9C(uint64_t a1, uint64_t a2, void (*a3)(char *), uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t (*a7)(void))
{
  uint64_t v12 = sub_10000588C(a5);
  __chkstk_darwin(v12);
  long long v14 = (char *)v16 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[4] = *(void *)(a2 + 160);
  v16[5] = a1;
  OS_dispatch_queue.sync<A>(execute:)();
  static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  sub_100DB2E50(a1, (uint64_t)v14, a7);
  swift_storeEnumTagMultiPayload();
  a3(v14);
  return sub_10001DAB4((uint64_t)v14, a5);
}

void sub_100D35E34(uint64_t a1, unint64_t a2)
{
  uint64_t v87 = a1;
  uint64_t v3 = type metadata accessor for SharingCircleSecret();
  __chkstk_darwin(v3);
  uint64_t v77 = (uint64_t)&v71 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = type metadata accessor for URLResourceValues();
  uint64_t v82 = *(void *)(v83 - 8);
  __chkstk_darwin(v83);
  unint64_t v86 = (char *)&v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v85 = type metadata accessor for UUID();
  uint64_t v80 = *(void *)(v85 - 8);
  __chkstk_darwin(v85);
  uint64_t v84 = (char *)&v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v88 = *(void *)(v7 - 8);
  uint64_t v89 = v7;
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v79 = (char *)&v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v81 = (char *)&v71 - v11;
  __chkstk_darwin(v10);
  uint64_t v78 = (char *)&v71 - v12;
  uint64_t v13 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v71 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  long long v19 = (char *)&v71 - v18;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v14 + 104))(v17, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v13);
  sub_100DB1F50((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  id v21 = v91;
  id v20 = v92[0];
  long long v22 = *(void (**)(char *, uint64_t))(v14 + 8);
  v22(v17, v13);
  v22(v19, v13);
  if (v20 == v21)
  {
    static os_log_type_t.default.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_10009FD9C();
    swift_allocError();
    *long long v23 = 0;
    swift_willThrow();
  }
  else
  {
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    sub_100DB1F50(&qword_10165DFB8, (void (*)(uint64_t))type metadata accessor for SharingCircleSecret);
    Class v25 = isa;
    uint64_t v26 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    if (v25)
    {
      swift_release();
    }
    else
    {
      uint64_t v28 = v26;
      uint64_t v29 = v27;
      swift_release();
      long long v30 = sub_1010EB9E4(v28, v29, 0);
      unint64_t v32 = v31;
      uint64_t v75 = v28;
      unint64_t v76 = v29;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10001CFB8((uint64_t)v30, v32);
      unint64_t v74 = sub_1009D0798();
      unint64_t v33 = a2;
      if (qword_1016370C8 != -1) {
        swift_once();
      }
      uint64_t v34 = v89;
      uint64_t v73 = sub_100010324(v89, (uint64_t)qword_10170ECE0);
      UUID.uuidString.getter();
      uint64_t v35 = v78;
      URL.appendingPathComponent(_:isDirectory:)();
      swift_bridgeObjectRelease();
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)();
      uint64_t v36 = v88 + 8;
      uint64_t v37 = *(void (**)(char *, uint64_t))(v88 + 8);
      v37(v35, v34);
      uint64_t v72 = (void *)v3;
      uint64_t v38 = *(int *)(v3 + 20);
      unint64_t v74 = v33;
      uint64_t v39 = v33 + v38;
      uint64_t v40 = v80;
      (*(void (**)(char *, uint64_t, void))(v80 + 16))(v84, v39, v85);
      UUID.uuidString.getter();
      URL.appendingPathComponent(_:isDirectory:)();
      swift_bridgeObjectRelease();
      UUID.uuidString.getter();
      uint64_t v42 = v79;
      URL.appendingPathComponent(_:)();
      swift_bridgeObjectRelease();
      uint64_t v43 = v81;
      URL.appendingPathExtension(_:)();
      uint64_t v44 = v89;
      v37(v42, v89);
      uint64_t v88 = v36;
      uint64_t v79 = (char *)v37;
      v37(v35, v44);
      (*(void (**)(char *, void))(v40 + 8))(v84, v85);
      URLResourceValues.init()();
      URLResourceValues.isExcludedFromBackup.setter();
      URL._bridgeToObjectiveC()(v46);
      uint64_t v48 = v47;
      [(objc_class *)isa writeToURL:v47 atomically:1];

      static os_log_type_t.default.getter();
      if (qword_101637260 != -1) {
        swift_once();
      }
      uint64_t v84 = (char *)sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v49 = swift_allocObject();
      long long v85 = xmmword_101342130;
      *(_OWORD *)(v49 + 16) = xmmword_101342130;
      sub_100DB1F50((unint64_t *)&qword_1016605A0, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v50 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v52 = v51;
      *(void *)(v49 + 56) = &type metadata for String;
      uint64_t v53 = v43;
      unint64_t v54 = sub_10000B4CC();
      *(void *)(v49 + 64) = v54;
      *(void *)(v49 + 32) = v50;
      *(void *)(v49 + 40) = v52;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      sub_10000588C(&qword_101650640);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = v85;
      *(void *)(inited + 32) = NSFileProtectionKey;
      *(void *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      uint64_t v56 = NSFileProtectionKey;
      uint64_t v57 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      unint64_t v58 = sub_10092DE24(inited);
      id v59 = [self defaultManager];
      sub_100653FB8(v58);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0);
      sub_100DB1F50(&qword_1016387D0, type metadata accessor for FileAttributeKey);
      Class v60 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      URL.path.getter();
      NSString v61 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v92[0] = 0;
      LODWORD(v52) = [v59 setAttributes:v60 ofItemAtPath:v61 error:v92];

      if (v52)
      {
        id v62 = v92[0];
        unint64_t v63 = v86;
        URL.setResourceValues(_:)();
        static os_log_type_t.default.getter();
        uint64_t v80 = qword_10170EFB8;
        uint64_t v65 = swift_allocObject();
        *(_OWORD *)(v65 + 16) = v85;
        uint64_t v66 = v74;
        sub_100DB2E50(v74, v77, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
        uint64_t v67 = v72;
        uint64_t v68 = String.init<A>(describing:)();
        *(void *)(v65 + 56) = &type metadata for String;
        *(void *)(v65 + 64) = v54;
        *(void *)(v65 + 32) = v68;
        *(void *)(v65 + 40) = v69;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        v92[3] = v67;
        v92[4] = (id)sub_100DB1F50((unint64_t *)&unk_10165DFC0, (void (*)(uint64_t))type metadata accessor for SharingCircleSecret);
        unint64_t v70 = sub_10001D958((uint64_t *)v92);
        sub_100DB2E50(v66, (uint64_t)v70, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
        PassthroughSubject.send(_:)();
        sub_10001CFB8(v75, v76);

        (*(void (**)(char *, uint64_t))(v82 + 8))(v63, v83);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v92);
      }
      else
      {
        id v64 = v92[0];
        _convertNSErrorToError(_:)();

        swift_willThrow();
        sub_10001CFB8(v75, v76);

        (*(void (**)(char *, uint64_t))(v82 + 8))(v86, v83);
      }
      ((void (*)(char *, uint64_t))v79)(v53, v89);
    }
  }
}

void sub_100D36AB4(uint64_t a1, uint64_t a2)
{
  uint64_t v89 = a1;
  uint64_t v3 = type metadata accessor for MemberSharingCircle();
  __chkstk_darwin(v3);
  uint64_t v79 = (uint64_t)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URLResourceValues();
  uint64_t v86 = *(void *)(v5 - 8);
  uint64_t v87 = v5;
  __chkstk_darwin(v5);
  uint64_t v88 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v84 = type metadata accessor for UUID();
  uint64_t v83 = *(void *)(v84 - 8);
  __chkstk_darwin(v84);
  uint64_t v82 = (char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v90 = *(void *)(v8 - 8);
  uint64_t v91 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v80 = (char *)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v81 = (char *)&v74 - v12;
  __chkstk_darwin(v11);
  long long v85 = (char *)&v74 - v13;
  uint64_t v14 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v74 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  id v20 = (char *)&v74 - v19;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v15 + 104))(v18, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v14);
  sub_100DB1F50((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  id v22 = v93;
  id v21 = v94[0];
  long long v23 = *(void (**)(char *, uint64_t))(v15 + 8);
  v23(v18, v14);
  v23(v20, v14);
  if (v21 == v22)
  {
    static os_log_type_t.default.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_10009FD9C();
    swift_allocError();
    *long long v24 = 0;
    swift_willThrow();
  }
  else
  {
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    sub_100DB1F50(&qword_101640E10, (void (*)(uint64_t))type metadata accessor for MemberSharingCircle);
    Class v26 = isa;
    uint64_t v27 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    if (v26)
    {
      swift_release();
    }
    else
    {
      uint64_t v29 = v27;
      uint64_t v30 = v28;
      swift_release();
      unint64_t v31 = sub_1010EB9E4(v29, v30, 0);
      unint64_t v33 = v32;
      unint64_t v78 = v30;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10001CFB8((uint64_t)v31, v33);
      sub_1009D0798();
      if (qword_101636A48 != -1) {
        swift_once();
      }
      uint64_t v77 = v29;
      uint64_t v34 = v91;
      uint64_t v35 = sub_100010324(v91, (uint64_t)qword_10170DD78);
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)();
      unint64_t v74 = (void *)v3;
      uint64_t v36 = *(int *)(v3 + 20);
      uint64_t v75 = a2;
      uint64_t v37 = a2 + v36;
      uint64_t v38 = v83;
      uint64_t v39 = v82;
      uint64_t v40 = v84;
      (*(void (**)(char *, uint64_t, void))(v83 + 16))(v82, v37, v84);
      uint64_t v41 = v90;
      uint64_t v42 = v81;
      (*(void (**)(char *, uint64_t, uint64_t))(v90 + 16))(v81, v35, v34);
      UUID.uuidString.getter();
      uint64_t v43 = v80;
      URL.appendingPathComponent(_:)();
      swift_bridgeObjectRelease();
      uint64_t v44 = v85;
      URL.appendingPathExtension(_:)();
      unint64_t v45 = *(void (**)(char *, uint64_t))(v41 + 8);
      uint64_t v46 = v43;
      uint64_t v47 = v91;
      v45(v46, v91);
      uint64_t v90 = v41 + 8;
      uint64_t v81 = (char *)v45;
      v45(v42, v47);
      (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v40);
      URLResourceValues.init()();
      URLResourceValues.isExcludedFromBackup.setter();
      URL._bridgeToObjectiveC()(v49);
      uint64_t v51 = v50;
      [(objc_class *)isa writeToURL:v50 atomically:1];

      static os_log_type_t.default.getter();
      if (qword_101637260 != -1) {
        swift_once();
      }
      uint64_t v83 = sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v52 = swift_allocObject();
      long long v84 = xmmword_101342130;
      *(_OWORD *)(v52 + 16) = xmmword_101342130;
      sub_100DB1F50((unint64_t *)&qword_1016605A0, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v53 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v55 = v54;
      *(void *)(v52 + 56) = &type metadata for String;
      uint64_t v56 = v44;
      unint64_t v57 = sub_10000B4CC();
      *(void *)(v52 + 64) = v57;
      *(void *)(v52 + 32) = v53;
      *(void *)(v52 + 40) = v55;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      sub_10000588C(&qword_101650640);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = v84;
      *(void *)(inited + 32) = NSFileProtectionKey;
      *(void *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      id v59 = NSFileProtectionKey;
      Class v60 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      unint64_t v61 = sub_10092DE24(inited);
      id v62 = [self defaultManager];
      sub_100653FB8(v61);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0);
      sub_100DB1F50(&qword_1016387D0, type metadata accessor for FileAttributeKey);
      Class v63 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      URL.path.getter();
      NSString v64 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v94[0] = 0;
      LODWORD(v55) = [v62 setAttributes:v63 ofItemAtPath:v64 error:v94];

      if (v55)
      {
        id v65 = v94[0];
        uint64_t v66 = v88;
        URL.setResourceValues(_:)();
        static os_log_type_t.default.getter();
        uint64_t v82 = (char *)qword_10170EFB8;
        uint64_t v68 = swift_allocObject();
        *(_OWORD *)(v68 + 16) = v84;
        uint64_t v69 = v75;
        sub_100DB2E50(v75, v79, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
        unint64_t v70 = v74;
        uint64_t v71 = String.init<A>(describing:)();
        *(void *)(v68 + 56) = &type metadata for String;
        *(void *)(v68 + 64) = v57;
        *(void *)(v68 + 32) = v71;
        *(void *)(v68 + 40) = v72;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        void v94[3] = v70;
        v94[4] = (id)sub_100DB1F50(&qword_101640E18, (void (*)(uint64_t))type metadata accessor for MemberSharingCircle);
        uint64_t v73 = sub_10001D958((uint64_t *)v94);
        sub_100DB2E50(v69, (uint64_t)v73, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
        PassthroughSubject.send(_:)();
        sub_10001CFB8(v77, v78);

        (*(void (**)(char *, uint64_t))(v86 + 8))(v66, v87);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v94);
      }
      else
      {
        id v67 = v94[0];
        _convertNSErrorToError(_:)();

        swift_willThrow();
        sub_10001CFB8(v77, v78);

        (*(void (**)(char *, uint64_t))(v86 + 8))(v88, v87);
      }
      ((void (*)(char *, uint64_t))v81)(v56, v91);
    }
  }
}

void sub_100D376B4(uint64_t a1, uint64_t a2)
{
  uint64_t v89 = a1;
  uint64_t v3 = type metadata accessor for OwnerSharingCircle();
  __chkstk_darwin(v3);
  uint64_t v79 = (uint64_t)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URLResourceValues();
  uint64_t v86 = *(void *)(v5 - 8);
  uint64_t v87 = v5;
  __chkstk_darwin(v5);
  uint64_t v88 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v84 = type metadata accessor for UUID();
  uint64_t v83 = *(void *)(v84 - 8);
  __chkstk_darwin(v84);
  uint64_t v82 = (char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v90 = *(void *)(v8 - 8);
  uint64_t v91 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v80 = (char *)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v81 = (char *)&v74 - v12;
  __chkstk_darwin(v11);
  long long v85 = (char *)&v74 - v13;
  uint64_t v14 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v74 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  id v20 = (char *)&v74 - v19;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v15 + 104))(v18, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v14);
  sub_100DB1F50((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  id v22 = v93;
  id v21 = v94[0];
  long long v23 = *(void (**)(char *, uint64_t))(v15 + 8);
  v23(v18, v14);
  v23(v20, v14);
  if (v21 == v22)
  {
    static os_log_type_t.default.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_10009FD9C();
    swift_allocError();
    *long long v24 = 0;
    swift_willThrow();
  }
  else
  {
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    sub_100DB1F50(&qword_10165F350, (void (*)(uint64_t))type metadata accessor for OwnerSharingCircle);
    Class v26 = isa;
    uint64_t v27 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    if (v26)
    {
      swift_release();
    }
    else
    {
      uint64_t v29 = v27;
      uint64_t v30 = v28;
      swift_release();
      unint64_t v31 = sub_1010EB9E4(v29, v30, 0);
      unint64_t v33 = v32;
      unint64_t v78 = v30;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10001CFB8((uint64_t)v31, v33);
      sub_1009D0798();
      if (qword_1016370F0 != -1) {
        swift_once();
      }
      uint64_t v77 = v29;
      uint64_t v34 = v91;
      uint64_t v35 = sub_100010324(v91, (uint64_t)qword_10170ED28);
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)();
      unint64_t v74 = (void *)v3;
      uint64_t v36 = *(int *)(v3 + 20);
      uint64_t v75 = a2;
      uint64_t v37 = a2 + v36;
      uint64_t v38 = v83;
      uint64_t v39 = v82;
      uint64_t v40 = v84;
      (*(void (**)(char *, uint64_t, void))(v83 + 16))(v82, v37, v84);
      uint64_t v41 = v90;
      uint64_t v42 = v81;
      (*(void (**)(char *, uint64_t, uint64_t))(v90 + 16))(v81, v35, v34);
      UUID.uuidString.getter();
      uint64_t v43 = v80;
      URL.appendingPathComponent(_:)();
      swift_bridgeObjectRelease();
      uint64_t v44 = v85;
      URL.appendingPathExtension(_:)();
      unint64_t v45 = *(void (**)(char *, uint64_t))(v41 + 8);
      uint64_t v46 = v43;
      uint64_t v47 = v91;
      v45(v46, v91);
      uint64_t v90 = v41 + 8;
      uint64_t v81 = (char *)v45;
      v45(v42, v47);
      (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v40);
      URLResourceValues.init()();
      URLResourceValues.isExcludedFromBackup.setter();
      URL._bridgeToObjectiveC()(v49);
      uint64_t v51 = v50;
      [(objc_class *)isa writeToURL:v50 atomically:1];

      static os_log_type_t.default.getter();
      if (qword_101637260 != -1) {
        swift_once();
      }
      uint64_t v83 = sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v52 = swift_allocObject();
      long long v84 = xmmword_101342130;
      *(_OWORD *)(v52 + 16) = xmmword_101342130;
      sub_100DB1F50((unint64_t *)&qword_1016605A0, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v53 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v55 = v54;
      *(void *)(v52 + 56) = &type metadata for String;
      uint64_t v56 = v44;
      unint64_t v57 = sub_10000B4CC();
      *(void *)(v52 + 64) = v57;
      *(void *)(v52 + 32) = v53;
      *(void *)(v52 + 40) = v55;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      sub_10000588C(&qword_101650640);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = v84;
      *(void *)(inited + 32) = NSFileProtectionKey;
      *(void *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      id v59 = NSFileProtectionKey;
      Class v60 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      unint64_t v61 = sub_10092DE24(inited);
      id v62 = [self defaultManager];
      sub_100653FB8(v61);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0);
      sub_100DB1F50(&qword_1016387D0, type metadata accessor for FileAttributeKey);
      Class v63 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      URL.path.getter();
      NSString v64 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v94[0] = 0;
      LODWORD(v55) = [v62 setAttributes:v63 ofItemAtPath:v64 error:v94];

      if (v55)
      {
        id v65 = v94[0];
        uint64_t v66 = v88;
        URL.setResourceValues(_:)();
        static os_log_type_t.default.getter();
        uint64_t v82 = (char *)qword_10170EFB8;
        uint64_t v68 = swift_allocObject();
        *(_OWORD *)(v68 + 16) = v84;
        uint64_t v69 = v75;
        sub_100DB2E50(v75, v79, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        unint64_t v70 = v74;
        uint64_t v71 = String.init<A>(describing:)();
        *(void *)(v68 + 56) = &type metadata for String;
        *(void *)(v68 + 64) = v57;
        *(void *)(v68 + 32) = v71;
        *(void *)(v68 + 40) = v72;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        void v94[3] = v70;
        v94[4] = (id)sub_100DB1F50(&qword_10165E820, (void (*)(uint64_t))type metadata accessor for OwnerSharingCircle);
        uint64_t v73 = sub_10001D958((uint64_t *)v94);
        sub_100DB2E50(v69, (uint64_t)v73, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
        PassthroughSubject.send(_:)();
        sub_10001CFB8(v77, v78);

        (*(void (**)(char *, uint64_t))(v86 + 8))(v66, v87);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v94);
      }
      else
      {
        id v67 = v94[0];
        _convertNSErrorToError(_:)();

        swift_willThrow();
        sub_10001CFB8(v77, v78);

        (*(void (**)(char *, uint64_t))(v86 + 8))(v88, v87);
      }
      ((void (*)(char *, uint64_t))v81)(v56, v91);
    }
  }
}

void sub_100D382B4(uint64_t a1, uint64_t a2)
{
  uint64_t v89 = a1;
  uint64_t v3 = type metadata accessor for MemberPeerTrust();
  __chkstk_darwin(v3);
  uint64_t v79 = (uint64_t)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URLResourceValues();
  uint64_t v86 = *(void *)(v5 - 8);
  uint64_t v87 = v5;
  __chkstk_darwin(v5);
  uint64_t v88 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v84 = type metadata accessor for UUID();
  uint64_t v83 = *(void *)(v84 - 8);
  __chkstk_darwin(v84);
  uint64_t v82 = (char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v90 = *(void *)(v8 - 8);
  uint64_t v91 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v80 = (char *)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v81 = (char *)&v74 - v12;
  __chkstk_darwin(v11);
  long long v85 = (char *)&v74 - v13;
  uint64_t v14 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v74 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  id v20 = (char *)&v74 - v19;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v15 + 104))(v18, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v14);
  sub_100DB1F50((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  id v22 = v93;
  id v21 = v94[0];
  long long v23 = *(void (**)(char *, uint64_t))(v15 + 8);
  v23(v18, v14);
  v23(v20, v14);
  if (v21 == v22)
  {
    static os_log_type_t.default.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_10009FD9C();
    swift_allocError();
    *long long v24 = 0;
    swift_willThrow();
  }
  else
  {
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    sub_100DB1F50(&qword_10165E818, (void (*)(uint64_t))type metadata accessor for MemberPeerTrust);
    Class v26 = isa;
    uint64_t v27 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    if (v26)
    {
      swift_release();
    }
    else
    {
      uint64_t v29 = v27;
      uint64_t v30 = v28;
      swift_release();
      unint64_t v31 = sub_1010EB9E4(v29, v30, 0);
      unint64_t v33 = v32;
      unint64_t v78 = v30;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10001CFB8((uint64_t)v31, v33);
      sub_1009D0798();
      if (qword_101637160 != -1) {
        swift_once();
      }
      uint64_t v77 = v29;
      uint64_t v34 = v91;
      uint64_t v35 = sub_100010324(v91, (uint64_t)qword_10170EE20);
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)();
      unint64_t v74 = (void *)v3;
      uint64_t v36 = *(int *)(v3 + 20);
      uint64_t v75 = a2;
      uint64_t v37 = a2 + v36;
      uint64_t v38 = v83;
      uint64_t v39 = v82;
      uint64_t v40 = v84;
      (*(void (**)(char *, uint64_t, void))(v83 + 16))(v82, v37, v84);
      uint64_t v41 = v90;
      uint64_t v42 = v81;
      (*(void (**)(char *, uint64_t, uint64_t))(v90 + 16))(v81, v35, v34);
      UUID.uuidString.getter();
      uint64_t v43 = v80;
      URL.appendingPathComponent(_:)();
      swift_bridgeObjectRelease();
      uint64_t v44 = v85;
      URL.appendingPathExtension(_:)();
      unint64_t v45 = *(void (**)(char *, uint64_t))(v41 + 8);
      uint64_t v46 = v43;
      uint64_t v47 = v91;
      v45(v46, v91);
      uint64_t v90 = v41 + 8;
      uint64_t v81 = (char *)v45;
      v45(v42, v47);
      (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v40);
      URLResourceValues.init()();
      URLResourceValues.isExcludedFromBackup.setter();
      URL._bridgeToObjectiveC()(v49);
      uint64_t v51 = v50;
      [(objc_class *)isa writeToURL:v50 atomically:1];

      static os_log_type_t.default.getter();
      if (qword_101637260 != -1) {
        swift_once();
      }
      uint64_t v83 = sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v52 = swift_allocObject();
      long long v84 = xmmword_101342130;
      *(_OWORD *)(v52 + 16) = xmmword_101342130;
      sub_100DB1F50((unint64_t *)&qword_1016605A0, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v53 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v55 = v54;
      *(void *)(v52 + 56) = &type metadata for String;
      uint64_t v56 = v44;
      unint64_t v57 = sub_10000B4CC();
      *(void *)(v52 + 64) = v57;
      *(void *)(v52 + 32) = v53;
      *(void *)(v52 + 40) = v55;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      sub_10000588C(&qword_101650640);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = v84;
      *(void *)(inited + 32) = NSFileProtectionKey;
      *(void *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      id v59 = NSFileProtectionKey;
      Class v60 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      unint64_t v61 = sub_10092DE24(inited);
      id v62 = [self defaultManager];
      sub_100653FB8(v61);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0);
      sub_100DB1F50(&qword_1016387D0, type metadata accessor for FileAttributeKey);
      Class v63 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      URL.path.getter();
      NSString v64 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v94[0] = 0;
      LODWORD(v55) = [v62 setAttributes:v63 ofItemAtPath:v64 error:v94];

      if (v55)
      {
        id v65 = v94[0];
        uint64_t v66 = v88;
        URL.setResourceValues(_:)();
        static os_log_type_t.default.getter();
        uint64_t v82 = (char *)qword_10170EFB8;
        uint64_t v68 = swift_allocObject();
        *(_OWORD *)(v68 + 16) = v84;
        uint64_t v69 = v75;
        sub_100DB2E50(v75, v79, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
        unint64_t v70 = v74;
        uint64_t v71 = String.init<A>(describing:)();
        *(void *)(v68 + 56) = &type metadata for String;
        *(void *)(v68 + 64) = v57;
        *(void *)(v68 + 32) = v71;
        *(void *)(v68 + 40) = v72;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        void v94[3] = v70;
        v94[4] = (id)sub_100DB1F50((unint64_t *)&unk_101661A20, (void (*)(uint64_t))type metadata accessor for MemberPeerTrust);
        uint64_t v73 = sub_10001D958((uint64_t *)v94);
        sub_100DB2E50(v69, (uint64_t)v73, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
        PassthroughSubject.send(_:)();
        sub_10001CFB8(v77, v78);

        (*(void (**)(char *, uint64_t))(v86 + 8))(v66, v87);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v94);
      }
      else
      {
        id v67 = v94[0];
        _convertNSErrorToError(_:)();

        swift_willThrow();
        sub_10001CFB8(v77, v78);

        (*(void (**)(char *, uint64_t))(v86 + 8))(v88, v87);
      }
      ((void (*)(char *, uint64_t))v81)(v56, v91);
    }
  }
}

void sub_100D38EB4(uint64_t a1, uint64_t a2)
{
  uint64_t v89 = a1;
  uint64_t v3 = type metadata accessor for OwnerPeerTrust();
  __chkstk_darwin(v3);
  uint64_t v79 = (uint64_t)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URLResourceValues();
  uint64_t v86 = *(void *)(v5 - 8);
  uint64_t v87 = v5;
  __chkstk_darwin(v5);
  uint64_t v88 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v84 = type metadata accessor for UUID();
  uint64_t v83 = *(void *)(v84 - 8);
  __chkstk_darwin(v84);
  uint64_t v82 = (char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v90 = *(void *)(v8 - 8);
  uint64_t v91 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v80 = (char *)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v81 = (char *)&v74 - v12;
  __chkstk_darwin(v11);
  long long v85 = (char *)&v74 - v13;
  uint64_t v14 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v74 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  id v20 = (char *)&v74 - v19;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v15 + 104))(v18, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v14);
  sub_100DB1F50((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  id v22 = v93;
  id v21 = v94[0];
  long long v23 = *(void (**)(char *, uint64_t))(v15 + 8);
  v23(v18, v14);
  v23(v20, v14);
  if (v21 == v22)
  {
    static os_log_type_t.default.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_10009FD9C();
    swift_allocError();
    *long long v24 = 0;
    swift_willThrow();
  }
  else
  {
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    sub_100DB1F50(&qword_101640798, (void (*)(uint64_t))type metadata accessor for OwnerPeerTrust);
    Class v26 = isa;
    uint64_t v27 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    if (v26)
    {
      swift_release();
    }
    else
    {
      uint64_t v29 = v27;
      uint64_t v30 = v28;
      swift_release();
      unint64_t v31 = sub_1010EB9E4(v29, v30, 0);
      unint64_t v33 = v32;
      unint64_t v78 = v30;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10001CFB8((uint64_t)v31, v33);
      sub_1009D0798();
      if (qword_101636958 != -1) {
        swift_once();
      }
      uint64_t v77 = v29;
      uint64_t v34 = v91;
      uint64_t v35 = sub_100010324(v91, (uint64_t)qword_10170DAB8);
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)();
      unint64_t v74 = (void *)v3;
      uint64_t v36 = *(int *)(v3 + 20);
      uint64_t v75 = a2;
      uint64_t v37 = a2 + v36;
      uint64_t v38 = v83;
      uint64_t v39 = v82;
      uint64_t v40 = v84;
      (*(void (**)(char *, uint64_t, void))(v83 + 16))(v82, v37, v84);
      uint64_t v41 = v90;
      uint64_t v42 = v81;
      (*(void (**)(char *, uint64_t, uint64_t))(v90 + 16))(v81, v35, v34);
      UUID.uuidString.getter();
      uint64_t v43 = v80;
      URL.appendingPathComponent(_:)();
      swift_bridgeObjectRelease();
      uint64_t v44 = v85;
      URL.appendingPathExtension(_:)();
      unint64_t v45 = *(void (**)(char *, uint64_t))(v41 + 8);
      uint64_t v46 = v43;
      uint64_t v47 = v91;
      v45(v46, v91);
      uint64_t v90 = v41 + 8;
      uint64_t v81 = (char *)v45;
      v45(v42, v47);
      (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v40);
      URLResourceValues.init()();
      URLResourceValues.isExcludedFromBackup.setter();
      URL._bridgeToObjectiveC()(v49);
      uint64_t v51 = v50;
      [(objc_class *)isa writeToURL:v50 atomically:1];

      static os_log_type_t.default.getter();
      if (qword_101637260 != -1) {
        swift_once();
      }
      uint64_t v83 = sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v52 = swift_allocObject();
      long long v84 = xmmword_101342130;
      *(_OWORD *)(v52 + 16) = xmmword_101342130;
      sub_100DB1F50((unint64_t *)&qword_1016605A0, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v53 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v55 = v54;
      *(void *)(v52 + 56) = &type metadata for String;
      uint64_t v56 = v44;
      unint64_t v57 = sub_10000B4CC();
      *(void *)(v52 + 64) = v57;
      *(void *)(v52 + 32) = v53;
      *(void *)(v52 + 40) = v55;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      sub_10000588C(&qword_101650640);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = v84;
      *(void *)(inited + 32) = NSFileProtectionKey;
      *(void *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      id v59 = NSFileProtectionKey;
      Class v60 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      unint64_t v61 = sub_10092DE24(inited);
      id v62 = [self defaultManager];
      sub_100653FB8(v61);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0);
      sub_100DB1F50(&qword_1016387D0, type metadata accessor for FileAttributeKey);
      Class v63 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      URL.path.getter();
      NSString v64 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v94[0] = 0;
      LODWORD(v55) = [v62 setAttributes:v63 ofItemAtPath:v64 error:v94];

      if (v55)
      {
        id v65 = v94[0];
        uint64_t v66 = v88;
        URL.setResourceValues(_:)();
        static os_log_type_t.default.getter();
        uint64_t v82 = (char *)qword_10170EFB8;
        uint64_t v68 = swift_allocObject();
        *(_OWORD *)(v68 + 16) = v84;
        uint64_t v69 = v75;
        sub_100DB2E50(v75, v79, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
        unint64_t v70 = v74;
        uint64_t v71 = String.init<A>(describing:)();
        *(void *)(v68 + 56) = &type metadata for String;
        *(void *)(v68 + 64) = v57;
        *(void *)(v68 + 32) = v71;
        *(void *)(v68 + 40) = v72;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        void v94[3] = v70;
        v94[4] = (id)sub_100DB1F50(&qword_1016407A0, (void (*)(uint64_t))type metadata accessor for OwnerPeerTrust);
        uint64_t v73 = sub_10001D958((uint64_t *)v94);
        sub_100DB2E50(v69, (uint64_t)v73, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
        PassthroughSubject.send(_:)();
        sub_10001CFB8(v77, v78);

        (*(void (**)(char *, uint64_t))(v86 + 8))(v66, v87);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v94);
      }
      else
      {
        id v67 = v94[0];
        _convertNSErrorToError(_:)();

        swift_willThrow();
        sub_10001CFB8(v77, v78);

        (*(void (**)(char *, uint64_t))(v86 + 8))(v88, v87);
      }
      ((void (*)(char *, uint64_t))v81)(v56, v91);
    }
  }
}

void sub_100D39AB4(uint64_t a1, unint64_t a2)
{
  uint64_t v87 = a1;
  uint64_t v3 = type metadata accessor for OwnedDeviceKeyRecord();
  __chkstk_darwin(v3);
  uint64_t v77 = (uint64_t)&v71 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = type metadata accessor for URLResourceValues();
  uint64_t v82 = *(void *)(v83 - 8);
  __chkstk_darwin(v83);
  uint64_t v86 = (char *)&v71 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v85 = type metadata accessor for UUID();
  uint64_t v80 = *(void *)(v85 - 8);
  __chkstk_darwin(v85);
  long long v84 = (char *)&v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v88 = *(void *)(v7 - 8);
  uint64_t v89 = v7;
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v79 = (char *)&v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v81 = (char *)&v71 - v11;
  __chkstk_darwin(v10);
  unint64_t v78 = (char *)&v71 - v12;
  uint64_t v13 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v71 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v71 - v18;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v14 + 104))(v17, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v13);
  sub_100DB1F50((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  id v21 = v91;
  id v20 = v92[0];
  id v22 = *(void (**)(char *, uint64_t))(v14 + 8);
  v22(v17, v13);
  v22(v19, v13);
  if (v20 == v21)
  {
    static os_log_type_t.default.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_10009FD9C();
    swift_allocError();
    *long long v23 = 0;
    swift_willThrow();
  }
  else
  {
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    sub_100DB1F50(&qword_10165E7E8, (void (*)(uint64_t))type metadata accessor for OwnedDeviceKeyRecord);
    Class v25 = isa;
    uint64_t v26 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    if (v25)
    {
      swift_release();
    }
    else
    {
      uint64_t v28 = v26;
      uint64_t v29 = v27;
      swift_release();
      uint64_t v30 = sub_1010EB9E4(v28, v29, 0);
      unint64_t v32 = v31;
      uint64_t v75 = v28;
      unint64_t v76 = v29;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10001CFB8((uint64_t)v30, v32);
      unint64_t v74 = sub_1009D0798();
      unint64_t v33 = a2;
      if (qword_1016374B0 != -1) {
        swift_once();
      }
      uint64_t v34 = v89;
      uint64_t v73 = sub_100010324(v89, (uint64_t)qword_10170F308);
      UUID.uuidString.getter();
      uint64_t v35 = v78;
      URL.appendingPathComponent(_:isDirectory:)();
      swift_bridgeObjectRelease();
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)();
      uint64_t v36 = v88 + 8;
      uint64_t v37 = *(void (**)(char *, uint64_t))(v88 + 8);
      v37(v35, v34);
      uint64_t v72 = (void *)v3;
      uint64_t v38 = *(int *)(v3 + 20);
      unint64_t v74 = v33;
      uint64_t v39 = v33 + v38;
      uint64_t v40 = v80;
      (*(void (**)(char *, uint64_t, void))(v80 + 16))(v84, v39, v85);
      UUID.uuidString.getter();
      URL.appendingPathComponent(_:isDirectory:)();
      swift_bridgeObjectRelease();
      UUID.uuidString.getter();
      uint64_t v42 = v79;
      URL.appendingPathComponent(_:)();
      swift_bridgeObjectRelease();
      uint64_t v43 = v81;
      URL.appendingPathExtension(_:)();
      uint64_t v44 = v89;
      v37(v42, v89);
      uint64_t v88 = v36;
      uint64_t v79 = (char *)v37;
      v37(v35, v44);
      (*(void (**)(char *, void))(v40 + 8))(v84, v85);
      URLResourceValues.init()();
      URLResourceValues.isExcludedFromBackup.setter();
      URL._bridgeToObjectiveC()(v46);
      uint64_t v48 = v47;
      [(objc_class *)isa writeToURL:v47 atomically:1];

      static os_log_type_t.default.getter();
      if (qword_101637260 != -1) {
        swift_once();
      }
      long long v84 = (char *)sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v49 = swift_allocObject();
      long long v85 = xmmword_101342130;
      *(_OWORD *)(v49 + 16) = xmmword_101342130;
      sub_100DB1F50((unint64_t *)&qword_1016605A0, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v50 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v52 = v51;
      *(void *)(v49 + 56) = &type metadata for String;
      uint64_t v53 = v43;
      unint64_t v54 = sub_10000B4CC();
      *(void *)(v49 + 64) = v54;
      *(void *)(v49 + 32) = v50;
      *(void *)(v49 + 40) = v52;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      sub_10000588C(&qword_101650640);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = v85;
      *(void *)(inited + 32) = NSFileProtectionKey;
      *(void *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      uint64_t v56 = NSFileProtectionKey;
      unint64_t v57 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      unint64_t v58 = sub_10092DE24(inited);
      id v59 = [self defaultManager];
      sub_100653FB8(v58);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0);
      sub_100DB1F50(&qword_1016387D0, type metadata accessor for FileAttributeKey);
      Class v60 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      URL.path.getter();
      NSString v61 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v92[0] = 0;
      LODWORD(v52) = [v59 setAttributes:v60 ofItemAtPath:v61 error:v92];

      if (v52)
      {
        id v62 = v92[0];
        Class v63 = v86;
        URL.setResourceValues(_:)();
        static os_log_type_t.default.getter();
        uint64_t v80 = qword_10170EFB8;
        uint64_t v65 = swift_allocObject();
        *(_OWORD *)(v65 + 16) = v85;
        uint64_t v66 = v74;
        sub_100DB2E50(v74, v77, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
        id v67 = v72;
        uint64_t v68 = String.init<A>(describing:)();
        *(void *)(v65 + 56) = &type metadata for String;
        *(void *)(v65 + 64) = v54;
        *(void *)(v65 + 32) = v68;
        *(void *)(v65 + 40) = v69;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        v92[3] = v67;
        v92[4] = (id)sub_100DB1F50((unint64_t *)&unk_10166C800, (void (*)(uint64_t))type metadata accessor for OwnedDeviceKeyRecord);
        unint64_t v70 = sub_10001D958((uint64_t *)v92);
        sub_100DB2E50(v66, (uint64_t)v70, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
        PassthroughSubject.send(_:)();
        sub_10001CFB8(v75, v76);

        (*(void (**)(char *, uint64_t))(v82 + 8))(v63, v83);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v92);
      }
      else
      {
        id v64 = v92[0];
        _convertNSErrorToError(_:)();

        swift_willThrow();
        sub_10001CFB8(v75, v76);

        (*(void (**)(char *, uint64_t))(v82 + 8))(v86, v83);
      }
      ((void (*)(char *, uint64_t))v79)(v53, v89);
    }
  }
}

void sub_100D3A734(uint64_t a1, unint64_t a2)
{
  uint64_t v86 = a1;
  uint64_t v3 = (int *)type metadata accessor for KeyAlignmentRecord();
  __chkstk_darwin(v3);
  uint64_t v76 = (uint64_t)v72 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = type metadata accessor for URLResourceValues();
  uint64_t v82 = *(void *)(v83 - 8);
  __chkstk_darwin(v83);
  long long v85 = (char *)v72 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v84 = type metadata accessor for UUID();
  uint64_t v80 = *(void *)(v84 - 8);
  __chkstk_darwin(v84);
  uint64_t v79 = (char *)v72 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v87 = *(char **)(v7 - 8);
  uint64_t v88 = v7;
  uint64_t v8 = __chkstk_darwin(v7);
  unint64_t v78 = (char *)v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v81 = (char *)v72 - v11;
  __chkstk_darwin(v10);
  uint64_t v77 = (char *)v72 - v12;
  uint64_t v13 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)v72 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)v72 - v18;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v14 + 104))(v17, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v13);
  sub_100DB1F50((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  id v21 = v90;
  id v20 = v91[0];
  id v22 = *(void (**)(char *, uint64_t))(v14 + 8);
  v22(v17, v13);
  v22(v19, v13);
  if (v20 == v21)
  {
    static os_log_type_t.default.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_10009FD9C();
    swift_allocError();
    *long long v23 = 0;
    swift_willThrow();
  }
  else
  {
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    sub_100DB1F50(&qword_10163AC78, (void (*)(uint64_t))type metadata accessor for KeyAlignmentRecord);
    Class v25 = isa;
    uint64_t v26 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    if (v25)
    {
      swift_release();
    }
    else
    {
      uint64_t v28 = v26;
      uint64_t v29 = v27;
      swift_release();
      uint64_t v30 = sub_1010EB9E4(v28, v29, 0);
      unint64_t v32 = v31;
      uint64_t v74 = v28;
      unint64_t v75 = v29;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10001CFB8((uint64_t)v30, v32);
      unint64_t v73 = sub_1009D0798();
      unint64_t v33 = (void *)(a2 + v3[6]);
      if (qword_101636870 != -1) {
        swift_once();
      }
      uint64_t v34 = v88;
      uint64_t v72[2] = (void *)sub_100010324(v88, (uint64_t)qword_10170D740);
      v72[1] = v33;
      UUID.uuidString.getter();
      uint64_t v35 = v77;
      URL.appendingPathComponent(_:)();
      swift_bridgeObjectRelease();
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)();
      uint64_t v36 = v87 + 8;
      uint64_t v37 = (void (*)(char *, uint64_t))*((void *)v87 + 1);
      v37(v35, v34);
      v72[0] = v3;
      uint64_t v38 = v3[5];
      unint64_t v73 = a2;
      uint64_t v39 = a2 + v38;
      uint64_t v40 = v80;
      uint64_t v41 = v79;
      (*(void (**)(char *, uint64_t, void))(v80 + 16))(v79, v39, v84);
      UUID.uuidString.getter();
      URL.appendingPathComponent(_:)();
      swift_bridgeObjectRelease();
      UUID.uuidString.getter();
      uint64_t v43 = v78;
      URL.appendingPathComponent(_:)();
      swift_bridgeObjectRelease();
      uint64_t v44 = v81;
      URL.appendingPathExtension(_:)();
      uint64_t v45 = v88;
      v37(v43, v88);
      uint64_t v87 = v36;
      unint64_t v78 = (char *)v37;
      v37(v35, v45);
      (*(void (**)(char *, void))(v40 + 8))(v41, v84);
      URLResourceValues.init()();
      URLResourceValues.isExcludedFromBackup.setter();
      URL._bridgeToObjectiveC()(v47);
      uint64_t v49 = v48;
      [(objc_class *)isa writeToURL:v48 atomically:1];

      static os_log_type_t.default.getter();
      if (qword_101637260 != -1) {
        swift_once();
      }
      uint64_t v80 = sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v50 = swift_allocObject();
      long long v84 = xmmword_101342130;
      *(_OWORD *)(v50 + 16) = xmmword_101342130;
      sub_100DB1F50((unint64_t *)&qword_1016605A0, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v51 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v53 = v52;
      *(void *)(v50 + 56) = &type metadata for String;
      unint64_t v54 = v44;
      unint64_t v55 = sub_10000B4CC();
      *(void *)(v50 + 64) = v55;
      *(void *)(v50 + 32) = v51;
      *(void *)(v50 + 40) = v53;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      sub_10000588C(&qword_101650640);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = v84;
      *(void *)(inited + 32) = NSFileProtectionKey;
      *(void *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      unint64_t v57 = NSFileProtectionKey;
      unint64_t v58 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      unint64_t v59 = sub_10092DE24(inited);
      id v60 = [self defaultManager];
      sub_100653FB8(v59);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0);
      sub_100DB1F50(&qword_1016387D0, type metadata accessor for FileAttributeKey);
      Class v61 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      URL.path.getter();
      NSString v62 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v91[0] = 0;
      LODWORD(v53) = [v60 setAttributes:v61 ofItemAtPath:v62 error:v91];

      if (v53)
      {
        id v63 = v91[0];
        id v64 = v85;
        URL.setResourceValues(_:)();
        static os_log_type_t.default.getter();
        uint64_t v79 = (char *)qword_10170EFB8;
        uint64_t v66 = swift_allocObject();
        *(_OWORD *)(v66 + 16) = v84;
        uint64_t v67 = v73;
        sub_100DB2E50(v73, v76, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
        uint64_t v68 = v72[0];
        uint64_t v69 = String.init<A>(describing:)();
        *(void *)(v66 + 56) = &type metadata for String;
        *(void *)(v66 + 64) = v55;
        *(void *)(v66 + 32) = v69;
        *(void *)(v66 + 40) = v70;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        v91[3] = v68;
        v91[4] = (id)sub_100DB1F50((unint64_t *)&unk_10163AC80, (void (*)(uint64_t))type metadata accessor for KeyAlignmentRecord);
        uint64_t v71 = sub_10001D958((uint64_t *)v91);
        sub_100DB2E50(v67, (uint64_t)v71, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
        PassthroughSubject.send(_:)();
        sub_10001CFB8(v74, v75);

        (*(void (**)(char *, uint64_t))(v82 + 8))(v64, v83);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v91);
      }
      else
      {
        id v65 = v91[0];
        _convertNSErrorToError(_:)();

        swift_willThrow();
        sub_10001CFB8(v74, v75);

        (*(void (**)(char *, uint64_t))(v82 + 8))(v85, v83);
      }
      ((void (*)(char *, uint64_t))v78)(v54, v88);
    }
  }
}

void sub_100D3B3D4(uint64_t a1, uint64_t a2)
{
  uint64_t v88 = a1;
  uint64_t v3 = type metadata accessor for LostModeRecord();
  __chkstk_darwin(v3);
  uint64_t v78 = (uint64_t)&v72 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = type metadata accessor for URLResourceValues();
  uint64_t v84 = *(void *)(v85 - 8);
  __chkstk_darwin(v85);
  uint64_t v87 = (char *)&v72 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v86 = type metadata accessor for UUID();
  uint64_t v82 = *(void *)(v86 - 8);
  __chkstk_darwin(v86);
  uint64_t v81 = (char *)&v72 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v89 = *(void *)(v7 - 8);
  uint64_t v90 = v7;
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v80 = (char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v83 = (char *)&v72 - v11;
  __chkstk_darwin(v10);
  uint64_t v79 = (char *)&v72 - v12;
  uint64_t v13 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v72 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v72 - v18;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v14 + 104))(v17, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v13);
  sub_100DB1F50((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  id v21 = v92;
  id v20 = v93[0];
  id v22 = *(void (**)(char *, uint64_t))(v14 + 8);
  v22(v17, v13);
  v22(v19, v13);
  if (v20 == v21)
  {
    static os_log_type_t.default.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_10009FD9C();
    swift_allocError();
    *long long v23 = 0;
    swift_willThrow();
  }
  else
  {
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    sub_100DB1F50(&qword_10165E810, (void (*)(uint64_t))type metadata accessor for LostModeRecord);
    Class v25 = isa;
    uint64_t v26 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    if (v25)
    {
      swift_release();
    }
    else
    {
      uint64_t v28 = v26;
      uint64_t v29 = v27;
      swift_release();
      uint64_t v30 = sub_1010EB9E4(v28, v29, 0);
      unint64_t v32 = v31;
      uint64_t v75 = v28;
      unint64_t v76 = v29;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10001CFB8((uint64_t)v30, v32);
      uint64_t v77 = (void (*)(char *, uint64_t))sub_1009D0798();
      if (qword_101637130 != -1) {
        swift_once();
      }
      uint64_t v33 = v90;
      sub_100010324(v90, (uint64_t)qword_10170ED90);
      UUID.uuidString.getter();
      uint64_t v34 = v79;
      URL.appendingPathComponent(_:isDirectory:)();
      swift_bridgeObjectRelease();
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)();
      uint64_t v35 = v89 + 8;
      uint64_t v77 = *(void (**)(char *, uint64_t))(v89 + 8);
      v77(v34, v33);
      unint64_t v73 = (void *)v3;
      uint64_t v36 = *(int *)(v3 + 20);
      uint64_t v74 = a2;
      uint64_t v37 = a2 + v36;
      uint64_t v38 = v82;
      uint64_t v39 = v81;
      (*(void (**)(char *, uint64_t, void))(v82 + 16))(v81, v37, v86);
      UUID.uuidString.getter();
      URL.appendingPathComponent(_:isDirectory:)();
      swift_bridgeObjectRelease();
      UUID.uuidString.getter();
      uint64_t v41 = v80;
      URL.appendingPathComponent(_:)();
      swift_bridgeObjectRelease();
      uint64_t v42 = v83;
      URL.appendingPathExtension(_:)();
      uint64_t v43 = v41;
      uint64_t v44 = v90;
      uint64_t v45 = v77;
      v77(v43, v90);
      uint64_t v89 = v35;
      v45(v34, v44);
      (*(void (**)(char *, void))(v38 + 8))(v39, v86);
      URLResourceValues.init()();
      URLResourceValues.isExcludedFromBackup.setter();
      URL._bridgeToObjectiveC()(v47);
      uint64_t v49 = v48;
      [(objc_class *)isa writeToURL:v48 atomically:1];

      static os_log_type_t.default.getter();
      if (qword_101637260 != -1) {
        swift_once();
      }
      uint64_t v82 = sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v50 = swift_allocObject();
      long long v86 = xmmword_101342130;
      *(_OWORD *)(v50 + 16) = xmmword_101342130;
      sub_100DB1F50((unint64_t *)&qword_1016605A0, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v51 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v53 = v52;
      *(void *)(v50 + 56) = &type metadata for String;
      unint64_t v54 = v42;
      unint64_t v55 = sub_10000B4CC();
      *(void *)(v50 + 64) = v55;
      *(void *)(v50 + 32) = v51;
      *(void *)(v50 + 40) = v53;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      sub_10000588C(&qword_101650640);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = v86;
      *(void *)(inited + 32) = NSFileProtectionKey;
      *(void *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      unint64_t v57 = NSFileProtectionKey;
      unint64_t v58 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      unint64_t v59 = sub_10092DE24(inited);
      id v60 = [self defaultManager];
      sub_100653FB8(v59);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0);
      sub_100DB1F50(&qword_1016387D0, type metadata accessor for FileAttributeKey);
      Class v61 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      URL.path.getter();
      NSString v62 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v93[0] = 0;
      LODWORD(v53) = [v60 setAttributes:v61 ofItemAtPath:v62 error:v93];

      if (v53)
      {
        id v63 = v93[0];
        id v64 = v87;
        URL.setResourceValues(_:)();
        static os_log_type_t.default.getter();
        uint64_t v81 = (char *)qword_10170EFB8;
        uint64_t v66 = swift_allocObject();
        *(_OWORD *)(v66 + 16) = v86;
        uint64_t v67 = v74;
        sub_100DB2E50(v74, v78, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
        uint64_t v68 = v73;
        uint64_t v69 = String.init<A>(describing:)();
        *(void *)(v66 + 56) = &type metadata for String;
        *(void *)(v66 + 64) = v55;
        *(void *)(v66 + 32) = v69;
        *(void *)(v66 + 40) = v70;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        v93[3] = v68;
        v93[4] = (id)sub_100DB1F50((unint64_t *)&unk_101661160, (void (*)(uint64_t))type metadata accessor for LostModeRecord);
        uint64_t v71 = sub_10001D958((uint64_t *)v93);
        sub_100DB2E50(v67, (uint64_t)v71, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
        PassthroughSubject.send(_:)();
        sub_10001CFB8(v75, v76);

        (*(void (**)(char *, uint64_t))(v84 + 8))(v64, v85);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v93);
      }
      else
      {
        id v65 = v93[0];
        _convertNSErrorToError(_:)();

        swift_willThrow();
        sub_10001CFB8(v75, v76);

        (*(void (**)(char *, uint64_t))(v84 + 8))(v87, v85);
      }
      v77(v54, v90);
    }
  }
}

void sub_100D3C044(uint64_t a1, uint64_t a2)
{
  uint64_t v89 = a1;
  uint64_t v3 = type metadata accessor for SafeLocation();
  __chkstk_darwin(v3);
  uint64_t v79 = (uint64_t)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URLResourceValues();
  uint64_t v86 = *(void *)(v5 - 8);
  uint64_t v87 = v5;
  __chkstk_darwin(v5);
  uint64_t v88 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v84 = type metadata accessor for UUID();
  uint64_t v83 = *(void *)(v84 - 8);
  __chkstk_darwin(v84);
  uint64_t v82 = (char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v90 = *(void *)(v8 - 8);
  uint64_t v91 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v80 = (char *)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v81 = (char *)&v74 - v12;
  __chkstk_darwin(v11);
  uint64_t v85 = (char *)&v74 - v13;
  uint64_t v14 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v74 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  id v20 = (char *)&v74 - v19;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v15 + 104))(v18, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v14);
  sub_100DB1F50((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  id v22 = v93;
  id v21 = v94[0];
  long long v23 = *(void (**)(char *, uint64_t))(v15 + 8);
  v23(v18, v14);
  v23(v20, v14);
  if (v21 == v22)
  {
    static os_log_type_t.default.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_10009FD9C();
    swift_allocError();
    *long long v24 = 0;
    swift_willThrow();
  }
  else
  {
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    sub_100DB1F50(&qword_10165E7D8, (void (*)(uint64_t))type metadata accessor for SafeLocation);
    Class v26 = isa;
    uint64_t v27 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    if (v26)
    {
      swift_release();
    }
    else
    {
      uint64_t v29 = v27;
      uint64_t v30 = v28;
      swift_release();
      unint64_t v31 = sub_1010EB9E4(v29, v30, 0);
      unint64_t v33 = v32;
      unint64_t v78 = v30;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10001CFB8((uint64_t)v31, v33);
      sub_1009D0798();
      if (qword_1016371B8 != -1) {
        swift_once();
      }
      uint64_t v77 = v29;
      uint64_t v34 = v91;
      uint64_t v35 = sub_100010324(v91, (uint64_t)qword_10170EEB8);
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)();
      uint64_t v74 = (void *)v3;
      uint64_t v36 = *(int *)(v3 + 20);
      uint64_t v75 = a2;
      uint64_t v37 = a2 + v36;
      uint64_t v38 = v83;
      uint64_t v39 = v82;
      uint64_t v40 = v84;
      (*(void (**)(char *, uint64_t, void))(v83 + 16))(v82, v37, v84);
      uint64_t v41 = v90;
      uint64_t v42 = v81;
      (*(void (**)(char *, uint64_t, uint64_t))(v90 + 16))(v81, v35, v34);
      UUID.uuidString.getter();
      uint64_t v43 = v80;
      URL.appendingPathComponent(_:)();
      swift_bridgeObjectRelease();
      uint64_t v44 = v85;
      URL.appendingPathExtension(_:)();
      uint64_t v45 = *(void (**)(char *, uint64_t))(v41 + 8);
      uint64_t v46 = v43;
      uint64_t v47 = v91;
      v45(v46, v91);
      uint64_t v90 = v41 + 8;
      uint64_t v81 = (char *)v45;
      v45(v42, v47);
      (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v40);
      URLResourceValues.init()();
      URLResourceValues.isExcludedFromBackup.setter();
      URL._bridgeToObjectiveC()(v49);
      uint64_t v51 = v50;
      [(objc_class *)isa writeToURL:v50 atomically:1];

      static os_log_type_t.default.getter();
      if (qword_101637260 != -1) {
        swift_once();
      }
      uint64_t v83 = sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v52 = swift_allocObject();
      long long v84 = xmmword_101342130;
      *(_OWORD *)(v52 + 16) = xmmword_101342130;
      sub_100DB1F50((unint64_t *)&qword_1016605A0, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v53 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v55 = v54;
      *(void *)(v52 + 56) = &type metadata for String;
      uint64_t v56 = v44;
      unint64_t v57 = sub_10000B4CC();
      *(void *)(v52 + 64) = v57;
      *(void *)(v52 + 32) = v53;
      *(void *)(v52 + 40) = v55;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      sub_10000588C(&qword_101650640);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = v84;
      *(void *)(inited + 32) = NSFileProtectionKey;
      *(void *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      unint64_t v59 = NSFileProtectionKey;
      id v60 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      unint64_t v61 = sub_10092DE24(inited);
      id v62 = [self defaultManager];
      sub_100653FB8(v61);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0);
      sub_100DB1F50(&qword_1016387D0, type metadata accessor for FileAttributeKey);
      Class v63 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      URL.path.getter();
      NSString v64 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v94[0] = 0;
      LODWORD(v55) = [v62 setAttributes:v63 ofItemAtPath:v64 error:v94];

      if (v55)
      {
        id v65 = v94[0];
        uint64_t v66 = v88;
        URL.setResourceValues(_:)();
        static os_log_type_t.default.getter();
        uint64_t v82 = (char *)qword_10170EFB8;
        uint64_t v68 = swift_allocObject();
        *(_OWORD *)(v68 + 16) = v84;
        uint64_t v69 = v75;
        sub_100DB2E50(v75, v79, (uint64_t (*)(void))type metadata accessor for SafeLocation);
        uint64_t v70 = v74;
        uint64_t v71 = String.init<A>(describing:)();
        *(void *)(v68 + 56) = &type metadata for String;
        *(void *)(v68 + 64) = v57;
        *(void *)(v68 + 32) = v71;
        *(void *)(v68 + 40) = v72;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        void v94[3] = v70;
        v94[4] = (id)sub_100DB1F50((unint64_t *)&unk_101663690, (void (*)(uint64_t))type metadata accessor for SafeLocation);
        unint64_t v73 = sub_10001D958((uint64_t *)v94);
        sub_100DB2E50(v69, (uint64_t)v73, (uint64_t (*)(void))type metadata accessor for SafeLocation);
        PassthroughSubject.send(_:)();
        sub_10001CFB8(v77, v78);

        (*(void (**)(char *, uint64_t))(v86 + 8))(v66, v87);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v94);
      }
      else
      {
        id v67 = v94[0];
        _convertNSErrorToError(_:)();

        swift_willThrow();
        sub_10001CFB8(v77, v78);

        (*(void (**)(char *, uint64_t))(v86 + 8))(v88, v87);
      }
      ((void (*)(char *, uint64_t))v81)(v56, v91);
    }
  }
}

void sub_100D3CC44(uint64_t a1, uint64_t a2)
{
  uint64_t v89 = a1;
  uint64_t v3 = type metadata accessor for LeashRecord();
  __chkstk_darwin(v3);
  uint64_t v79 = (uint64_t)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URLResourceValues();
  uint64_t v86 = *(void *)(v5 - 8);
  uint64_t v87 = v5;
  __chkstk_darwin(v5);
  uint64_t v88 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v84 = type metadata accessor for UUID();
  uint64_t v83 = *(void *)(v84 - 8);
  __chkstk_darwin(v84);
  uint64_t v82 = (char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v90 = *(void *)(v8 - 8);
  uint64_t v91 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v80 = (char *)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v81 = (char *)&v74 - v12;
  __chkstk_darwin(v11);
  uint64_t v85 = (char *)&v74 - v13;
  uint64_t v14 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v74 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  id v20 = (char *)&v74 - v19;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v15 + 104))(v18, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v14);
  sub_100DB1F50((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  id v22 = v93;
  id v21 = v94[0];
  long long v23 = *(void (**)(char *, uint64_t))(v15 + 8);
  v23(v18, v14);
  v23(v20, v14);
  if (v21 == v22)
  {
    static os_log_type_t.default.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_10009FD9C();
    swift_allocError();
    *long long v24 = 0;
    swift_willThrow();
  }
  else
  {
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    sub_100DB1F50(&qword_10165E7E0, (void (*)(uint64_t))type metadata accessor for LeashRecord);
    Class v26 = isa;
    uint64_t v27 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    if (v26)
    {
      swift_release();
    }
    else
    {
      uint64_t v29 = v27;
      uint64_t v30 = v28;
      swift_release();
      unint64_t v31 = sub_1010EB9E4(v29, v30, 0);
      unint64_t v33 = v32;
      unint64_t v78 = v30;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10001CFB8((uint64_t)v31, v33);
      sub_1009D0798();
      if (qword_101637620 != -1) {
        swift_once();
      }
      uint64_t v77 = v29;
      uint64_t v34 = v91;
      uint64_t v35 = sub_100010324(v91, (uint64_t)qword_10170F7B0);
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)();
      uint64_t v74 = (void *)v3;
      uint64_t v36 = *(int *)(v3 + 20);
      uint64_t v75 = a2;
      uint64_t v37 = a2 + v36;
      uint64_t v38 = v83;
      uint64_t v39 = v82;
      uint64_t v40 = v84;
      (*(void (**)(char *, uint64_t, void))(v83 + 16))(v82, v37, v84);
      uint64_t v41 = v90;
      uint64_t v42 = v81;
      (*(void (**)(char *, uint64_t, uint64_t))(v90 + 16))(v81, v35, v34);
      UUID.uuidString.getter();
      uint64_t v43 = v80;
      URL.appendingPathComponent(_:)();
      swift_bridgeObjectRelease();
      uint64_t v44 = v85;
      URL.appendingPathExtension(_:)();
      uint64_t v45 = *(void (**)(char *, uint64_t))(v41 + 8);
      uint64_t v46 = v43;
      uint64_t v47 = v91;
      v45(v46, v91);
      uint64_t v90 = v41 + 8;
      uint64_t v81 = (char *)v45;
      v45(v42, v47);
      (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v40);
      URLResourceValues.init()();
      URLResourceValues.isExcludedFromBackup.setter();
      URL._bridgeToObjectiveC()(v49);
      uint64_t v51 = v50;
      [(objc_class *)isa writeToURL:v50 atomically:1];

      static os_log_type_t.default.getter();
      if (qword_101637260 != -1) {
        swift_once();
      }
      uint64_t v83 = sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v52 = swift_allocObject();
      long long v84 = xmmword_101342130;
      *(_OWORD *)(v52 + 16) = xmmword_101342130;
      sub_100DB1F50((unint64_t *)&qword_1016605A0, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v53 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v55 = v54;
      *(void *)(v52 + 56) = &type metadata for String;
      uint64_t v56 = v44;
      unint64_t v57 = sub_10000B4CC();
      *(void *)(v52 + 64) = v57;
      *(void *)(v52 + 32) = v53;
      *(void *)(v52 + 40) = v55;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      sub_10000588C(&qword_101650640);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = v84;
      *(void *)(inited + 32) = NSFileProtectionKey;
      *(void *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      unint64_t v59 = NSFileProtectionKey;
      id v60 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      unint64_t v61 = sub_10092DE24(inited);
      id v62 = [self defaultManager];
      sub_100653FB8(v61);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0);
      sub_100DB1F50(&qword_1016387D0, type metadata accessor for FileAttributeKey);
      Class v63 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      URL.path.getter();
      NSString v64 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v94[0] = 0;
      LODWORD(v55) = [v62 setAttributes:v63 ofItemAtPath:v64 error:v94];

      if (v55)
      {
        id v65 = v94[0];
        uint64_t v66 = v88;
        URL.setResourceValues(_:)();
        static os_log_type_t.default.getter();
        uint64_t v82 = (char *)qword_10170EFB8;
        uint64_t v68 = swift_allocObject();
        *(_OWORD *)(v68 + 16) = v84;
        uint64_t v69 = v75;
        sub_100DB2E50(v75, v79, (uint64_t (*)(void))type metadata accessor for LeashRecord);
        uint64_t v70 = v74;
        uint64_t v71 = String.init<A>(describing:)();
        *(void *)(v68 + 56) = &type metadata for String;
        *(void *)(v68 + 64) = v57;
        *(void *)(v68 + 32) = v71;
        *(void *)(v68 + 40) = v72;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        void v94[3] = v70;
        v94[4] = (id)sub_100DB1F50((unint64_t *)&unk_10166F980, (void (*)(uint64_t))type metadata accessor for LeashRecord);
        unint64_t v73 = sub_10001D958((uint64_t *)v94);
        sub_100DB2E50(v69, (uint64_t)v73, (uint64_t (*)(void))type metadata accessor for LeashRecord);
        PassthroughSubject.send(_:)();
        sub_10001CFB8(v77, v78);

        (*(void (**)(char *, uint64_t))(v86 + 8))(v66, v87);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v94);
      }
      else
      {
        id v67 = v94[0];
        _convertNSErrorToError(_:)();

        swift_willThrow();
        sub_10001CFB8(v77, v78);

        (*(void (**)(char *, uint64_t))(v86 + 8))(v88, v87);
      }
      ((void (*)(char *, uint64_t))v81)(v56, v91);
    }
  }
}

void sub_100D3D844(uint64_t a1, uint64_t a2)
{
  uint64_t v88 = a1;
  uint64_t found = type metadata accessor for NotifyWhenFoundRecord();
  __chkstk_darwin(found);
  uint64_t v78 = (uint64_t)&v72 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = type metadata accessor for URLResourceValues();
  uint64_t v84 = *(void *)(v85 - 8);
  __chkstk_darwin(v85);
  uint64_t v87 = (char *)&v72 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v86 = type metadata accessor for UUID();
  uint64_t v82 = *(void *)(v86 - 8);
  __chkstk_darwin(v86);
  uint64_t v81 = (char *)&v72 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v89 = *(void *)(v7 - 8);
  uint64_t v90 = v7;
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v80 = (char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v83 = (char *)&v72 - v11;
  __chkstk_darwin(v10);
  uint64_t v79 = (char *)&v72 - v12;
  uint64_t v13 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v72 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v72 - v18;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v14 + 104))(v17, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v13);
  sub_100DB1F50((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  id v21 = v92;
  id v20 = v93[0];
  id v22 = *(void (**)(char *, uint64_t))(v14 + 8);
  v22(v17, v13);
  v22(v19, v13);
  if (v20 == v21)
  {
    static os_log_type_t.default.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_10009FD9C();
    swift_allocError();
    *long long v23 = 0;
    swift_willThrow();
  }
  else
  {
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    sub_100DB1F50(&qword_101645BD8, (void (*)(uint64_t))type metadata accessor for NotifyWhenFoundRecord);
    Class v25 = isa;
    uint64_t v26 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    if (v25)
    {
      swift_release();
    }
    else
    {
      uint64_t v28 = v26;
      uint64_t v29 = v27;
      swift_release();
      uint64_t v30 = sub_1010EB9E4(v28, v29, 0);
      unint64_t v32 = v31;
      uint64_t v75 = v28;
      unint64_t v76 = v29;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10001CFB8((uint64_t)v30, v32);
      uint64_t v77 = (void (*)(char *, uint64_t))sub_1009D0798();
      if (qword_101636B38 != -1) {
        swift_once();
      }
      uint64_t v33 = v90;
      sub_100010324(v90, (uint64_t)qword_10170DF58);
      UUID.uuidString.getter();
      uint64_t v34 = v79;
      URL.appendingPathComponent(_:isDirectory:)();
      swift_bridgeObjectRelease();
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)();
      uint64_t v35 = v89 + 8;
      uint64_t v77 = *(void (**)(char *, uint64_t))(v89 + 8);
      v77(v34, v33);
      unint64_t v73 = (void *)found;
      uint64_t v36 = *(int *)(found + 20);
      uint64_t v74 = a2;
      uint64_t v37 = a2 + v36;
      uint64_t v38 = v82;
      uint64_t v39 = v81;
      (*(void (**)(char *, uint64_t, void))(v82 + 16))(v81, v37, v86);
      UUID.uuidString.getter();
      URL.appendingPathComponent(_:isDirectory:)();
      swift_bridgeObjectRelease();
      UUID.uuidString.getter();
      uint64_t v41 = v80;
      URL.appendingPathComponent(_:)();
      swift_bridgeObjectRelease();
      uint64_t v42 = v83;
      URL.appendingPathExtension(_:)();
      uint64_t v43 = v41;
      uint64_t v44 = v90;
      uint64_t v45 = v77;
      v77(v43, v90);
      uint64_t v89 = v35;
      v45(v34, v44);
      (*(void (**)(char *, void))(v38 + 8))(v39, v86);
      URLResourceValues.init()();
      URLResourceValues.isExcludedFromBackup.setter();
      URL._bridgeToObjectiveC()(v47);
      uint64_t v49 = v48;
      [(objc_class *)isa writeToURL:v48 atomically:1];

      static os_log_type_t.default.getter();
      if (qword_101637260 != -1) {
        swift_once();
      }
      uint64_t v82 = sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v50 = swift_allocObject();
      long long v86 = xmmword_101342130;
      *(_OWORD *)(v50 + 16) = xmmword_101342130;
      sub_100DB1F50((unint64_t *)&qword_1016605A0, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v51 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v53 = v52;
      *(void *)(v50 + 56) = &type metadata for String;
      uint64_t v54 = v42;
      unint64_t v55 = sub_10000B4CC();
      *(void *)(v50 + 64) = v55;
      *(void *)(v50 + 32) = v51;
      *(void *)(v50 + 40) = v53;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      sub_10000588C(&qword_101650640);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = v86;
      *(void *)(inited + 32) = NSFileProtectionKey;
      *(void *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      unint64_t v57 = NSFileProtectionKey;
      unint64_t v58 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      unint64_t v59 = sub_10092DE24(inited);
      id v60 = [self defaultManager];
      sub_100653FB8(v59);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0);
      sub_100DB1F50(&qword_1016387D0, type metadata accessor for FileAttributeKey);
      Class v61 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      URL.path.getter();
      NSString v62 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v93[0] = 0;
      LODWORD(v53) = [v60 setAttributes:v61 ofItemAtPath:v62 error:v93];

      if (v53)
      {
        id v63 = v93[0];
        NSString v64 = v87;
        URL.setResourceValues(_:)();
        static os_log_type_t.default.getter();
        uint64_t v81 = (char *)qword_10170EFB8;
        uint64_t v66 = swift_allocObject();
        *(_OWORD *)(v66 + 16) = v86;
        uint64_t v67 = v74;
        sub_100DB2E50(v74, v78, (uint64_t (*)(void))type metadata accessor for NotifyWhenFoundRecord);
        uint64_t v68 = v73;
        uint64_t v69 = String.init<A>(describing:)();
        *(void *)(v66 + 56) = &type metadata for String;
        *(void *)(v66 + 64) = v55;
        *(void *)(v66 + 32) = v69;
        *(void *)(v66 + 40) = v70;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        v93[3] = v68;
        v93[4] = (id)sub_100DB1F50(&qword_101645BE0, (void (*)(uint64_t))type metadata accessor for NotifyWhenFoundRecord);
        uint64_t v71 = sub_10001D958((uint64_t *)v93);
        sub_100DB2E50(v67, (uint64_t)v71, (uint64_t (*)(void))type metadata accessor for NotifyWhenFoundRecord);
        PassthroughSubject.send(_:)();
        sub_10001CFB8(v75, v76);

        (*(void (**)(char *, uint64_t))(v84 + 8))(v64, v85);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v93);
      }
      else
      {
        id v65 = v93[0];
        _convertNSErrorToError(_:)();

        swift_willThrow();
        sub_10001CFB8(v75, v76);

        (*(void (**)(char *, uint64_t))(v84 + 8))(v87, v85);
      }
      v77(v54, v90);
    }
  }
}

void sub_100D3E4B4(uint64_t a1, uint64_t a2)
{
  uint64_t v97 = a2;
  uint64_t v93 = a1;
  uint64_t v2 = type metadata accessor for BeaconNamingRecord();
  __chkstk_darwin(v2);
  uint64_t v83 = (uint64_t)&v79 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = type metadata accessor for URLResourceValues();
  uint64_t v88 = *(void *)(v89 - 8);
  __chkstk_darwin(v89);
  unint64_t v92 = (char *)&v79 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v91 = type metadata accessor for UUID();
  uint64_t v87 = *(void *)(v91 - 8);
  __chkstk_darwin(v91);
  long long v86 = (char *)&v79 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v94 = *(void *)(v6 - 8);
  uint64_t v95 = v6;
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v84 = (char *)&v79 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v85 = (char *)&v79 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v90 = (char *)&v79 - v12;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v79 - v13;
  uint64_t v15 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v79 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  id v21 = (char *)&v79 - v20;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v16 + 104))(v19, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v15);
  sub_100DB1F50((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  id v23 = v98;
  id v22 = v99[0];
  long long v24 = *(void (**)(char *, uint64_t))(v16 + 8);
  v24(v19, v15);
  v24(v21, v15);
  if (v22 == v23)
  {
    static os_log_type_t.default.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_10009FD9C();
    swift_allocError();
    *Class v25 = 0;
    swift_willThrow();
  }
  else
  {
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    sub_100DB1F50(&qword_10165EBD0, (void (*)(uint64_t))type metadata accessor for BeaconNamingRecord);
    Class v27 = isa;
    uint64_t v28 = v97;
    uint64_t v29 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    if (v27)
    {
      swift_release();
    }
    else
    {
      uint64_t v31 = v29;
      uint64_t v32 = v30;
      swift_release();
      uint64_t v33 = sub_1010EB9E4(v31, v32, 0);
      unint64_t v35 = v34;
      uint64_t v81 = v31;
      unint64_t v82 = v32;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10001CFB8((uint64_t)v33, v35);
      uint64_t v36 = v28 + *(int *)(v2 + 24);
      uint64_t v80 = v36;
      sub_100DBF2A0();
      sub_1009D0798();
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)();
      uint64_t v38 = v94 + 8;
      uint64_t v39 = *(void (**)(char *, uint64_t))(v94 + 8);
      v39(v14, v95);
      uint64_t v40 = v87;
      uint64_t v41 = v86;
      (*(void (**)(char *, uint64_t, void))(v87 + 16))(v86, v28 + *(int *)(v2 + 20), v91);
      uint64_t v43 = v85;
      sub_100DBF2A0();
      uint64_t v80 = 0;
      uint64_t v79 = (void *)v2;
      UUID.uuidString.getter();
      uint64_t v45 = v84;
      URL.appendingPathComponent(_:)();
      swift_bridgeObjectRelease();
      uint64_t v46 = v90;
      URL.appendingPathExtension(_:)();
      uint64_t v47 = v45;
      uint64_t v48 = v95;
      v39(v47, v95);
      uint64_t v94 = v38;
      uint64_t v85 = (char *)v39;
      v39(v43, v48);
      (*(void (**)(char *, void))(v40 + 8))(v41, v91);
      uint64_t v49 = v46;
      URLResourceValues.init()();
      URLResourceValues.isExcludedFromBackup.setter();
      URL._bridgeToObjectiveC()(v51);
      uint64_t v53 = v52;
      [(objc_class *)isa writeToURL:v52 atomically:1];

      static os_log_type_t.default.getter();
      if (qword_101637260 != -1) {
        swift_once();
      }
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v54 = swift_allocObject();
      long long v91 = xmmword_101342130;
      *(_OWORD *)(v54 + 16) = xmmword_101342130;
      sub_100DB1F50((unint64_t *)&qword_1016605A0, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v55 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v57 = v56;
      *(void *)(v54 + 56) = &type metadata for String;
      unint64_t v58 = sub_10000B4CC();
      *(void *)(v54 + 64) = v58;
      *(void *)(v54 + 32) = v55;
      *(void *)(v54 + 40) = v57;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      sub_10000588C(&qword_101650640);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = v91;
      *(void *)(inited + 32) = NSFileProtectionKey;
      *(void *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      id v60 = NSFileProtectionKey;
      Class v61 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      unint64_t v62 = sub_10092DE24(inited);
      id v63 = [self defaultManager];
      sub_100653FB8(v62);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0);
      sub_100DB1F50(&qword_1016387D0, type metadata accessor for FileAttributeKey);
      Class v64 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      URL.path.getter();
      NSString v65 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v99[0] = 0;
      LOBYTE(v57) = [v63 setAttributes:v64 ofItemAtPath:v65 error:v99];

      if (v57)
      {
        id v66 = v99[0];
        uint64_t v67 = v92;
        uint64_t v68 = v49;
        uint64_t v69 = v80;
        URL.setResourceValues(_:)();
        uint64_t v70 = (void (*)(char *, uint64_t))v85;
        if (v69)
        {
          (*(void (**)(char *, uint64_t))(v88 + 8))(v67, v89);

          sub_10001CFB8(v81, v82);
          uint64_t v71 = v68;
        }
        else
        {
          static os_log_type_t.default.getter();
          uint64_t v87 = qword_10170EFB8;
          uint64_t v73 = swift_allocObject();
          *(_OWORD *)(v73 + 16) = v91;
          uint64_t v74 = v97;
          sub_100DB2E50(v97, v83, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
          uint64_t v75 = v79;
          uint64_t v76 = String.init<A>(describing:)();
          *(void *)(v73 + 56) = &type metadata for String;
          *(void *)(v73 + 64) = v58;
          *(void *)(v73 + 32) = v76;
          *(void *)(v73 + 40) = v77;
          os_log(_:dso:log:_:_:)();
          swift_bridgeObjectRelease();
          v99[3] = v75;
          v99[4] = (id)sub_100DB1F50(&qword_10165E808, (void (*)(uint64_t))type metadata accessor for BeaconNamingRecord);
          uint64_t v78 = sub_10001D958((uint64_t *)v99);
          sub_100DB2E50(v74, (uint64_t)v78, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
          PassthroughSubject.send(_:)();
          sub_10001CFB8(v81, v82);

          (*(void (**)(char *, uint64_t))(v88 + 8))(v67, v89);
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v99);
          uint64_t v71 = v90;
        }
        v70(v71, v95);
      }
      else
      {
        id v72 = v99[0];
        _convertNSErrorToError(_:)();

        swift_willThrow();
        sub_10001CFB8(v81, v82);

        (*(void (**)(char *, uint64_t))(v88 + 8))(v92, v89);
        ((void (*)(char *, uint64_t))v85)(v49, v95);
      }
    }
  }
}

void sub_100D3F120(uint64_t a1, uint64_t a2)
{
  uint64_t v88 = a1;
  uint64_t v3 = type metadata accessor for ShareRecord();
  __chkstk_darwin(v3);
  uint64_t v78 = (uint64_t)&v72 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = type metadata accessor for URLResourceValues();
  uint64_t v84 = *(void *)(v85 - 8);
  __chkstk_darwin(v85);
  uint64_t v87 = (char *)&v72 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v86 = type metadata accessor for UUID();
  uint64_t v82 = *(void *)(v86 - 8);
  __chkstk_darwin(v86);
  uint64_t v81 = (char *)&v72 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v89 = *(void *)(v7 - 8);
  uint64_t v90 = v7;
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v80 = (char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v83 = (char *)&v72 - v11;
  __chkstk_darwin(v10);
  uint64_t v79 = (char *)&v72 - v12;
  uint64_t v13 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v72 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v72 - v18;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v14 + 104))(v17, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v13);
  sub_100DB1F50((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  id v21 = v92;
  id v20 = v93[0];
  id v22 = *(void (**)(char *, uint64_t))(v14 + 8);
  v22(v17, v13);
  v22(v19, v13);
  if (v20 == v21)
  {
    static os_log_type_t.default.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_10009FD9C();
    swift_allocError();
    *id v23 = 0;
    swift_willThrow();
  }
  else
  {
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    sub_100DB1F50(&qword_10163AF50, (void (*)(uint64_t))type metadata accessor for ShareRecord);
    Class v25 = isa;
    uint64_t v26 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    if (v25)
    {
      swift_release();
    }
    else
    {
      uint64_t v28 = v26;
      uint64_t v29 = v27;
      swift_release();
      uint64_t v30 = sub_1010EB9E4(v28, v29, 0);
      unint64_t v32 = v31;
      uint64_t v75 = v28;
      unint64_t v76 = v29;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10001CFB8((uint64_t)v30, v32);
      uint64_t v77 = (void (*)(char *, uint64_t))sub_1009D0798();
      if (qword_101636878 != -1) {
        swift_once();
      }
      uint64_t v33 = v90;
      sub_100010324(v90, (uint64_t)qword_10170D758);
      UUID.uuidString.getter();
      unint64_t v34 = v79;
      URL.appendingPathComponent(_:isDirectory:)();
      swift_bridgeObjectRelease();
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)();
      uint64_t v35 = v89 + 8;
      uint64_t v77 = *(void (**)(char *, uint64_t))(v89 + 8);
      v77(v34, v33);
      uint64_t v73 = (void *)v3;
      uint64_t v36 = *(int *)(v3 + 20);
      uint64_t v74 = a2;
      uint64_t v37 = a2 + v36;
      uint64_t v38 = v82;
      uint64_t v39 = v81;
      (*(void (**)(char *, uint64_t, void))(v82 + 16))(v81, v37, v86);
      UUID.uuidString.getter();
      URL.appendingPathComponent(_:isDirectory:)();
      swift_bridgeObjectRelease();
      UUID.uuidString.getter();
      uint64_t v41 = v80;
      URL.appendingPathComponent(_:)();
      swift_bridgeObjectRelease();
      uint64_t v42 = v83;
      URL.appendingPathExtension(_:)();
      uint64_t v43 = v41;
      uint64_t v44 = v90;
      uint64_t v45 = v77;
      v77(v43, v90);
      uint64_t v89 = v35;
      v45(v34, v44);
      (*(void (**)(char *, void))(v38 + 8))(v39, v86);
      URLResourceValues.init()();
      URLResourceValues.isExcludedFromBackup.setter();
      URL._bridgeToObjectiveC()(v47);
      uint64_t v49 = v48;
      [(objc_class *)isa writeToURL:v48 atomically:1];

      static os_log_type_t.default.getter();
      if (qword_101637260 != -1) {
        swift_once();
      }
      uint64_t v82 = sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v50 = swift_allocObject();
      long long v86 = xmmword_101342130;
      *(_OWORD *)(v50 + 16) = xmmword_101342130;
      sub_100DB1F50((unint64_t *)&qword_1016605A0, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v51 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v53 = v52;
      *(void *)(v50 + 56) = &type metadata for String;
      uint64_t v54 = v42;
      unint64_t v55 = sub_10000B4CC();
      *(void *)(v50 + 64) = v55;
      *(void *)(v50 + 32) = v51;
      *(void *)(v50 + 40) = v53;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      sub_10000588C(&qword_101650640);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = v86;
      *(void *)(inited + 32) = NSFileProtectionKey;
      *(void *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      uint64_t v57 = NSFileProtectionKey;
      unint64_t v58 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      unint64_t v59 = sub_10092DE24(inited);
      id v60 = [self defaultManager];
      sub_100653FB8(v59);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0);
      sub_100DB1F50(&qword_1016387D0, type metadata accessor for FileAttributeKey);
      Class v61 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      URL.path.getter();
      NSString v62 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v93[0] = 0;
      LODWORD(v53) = [v60 setAttributes:v61 ofItemAtPath:v62 error:v93];

      if (v53)
      {
        id v63 = v93[0];
        Class v64 = v87;
        URL.setResourceValues(_:)();
        static os_log_type_t.default.getter();
        uint64_t v81 = (char *)qword_10170EFB8;
        uint64_t v66 = swift_allocObject();
        *(_OWORD *)(v66 + 16) = v86;
        uint64_t v67 = v74;
        sub_100DB2E50(v74, v78, (uint64_t (*)(void))type metadata accessor for ShareRecord);
        uint64_t v68 = v73;
        uint64_t v69 = String.init<A>(describing:)();
        *(void *)(v66 + 56) = &type metadata for String;
        *(void *)(v66 + 64) = v55;
        *(void *)(v66 + 32) = v69;
        *(void *)(v66 + 40) = v70;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        v93[3] = v68;
        v93[4] = (id)sub_100DB1F50(&qword_10163AF58, (void (*)(uint64_t))type metadata accessor for ShareRecord);
        uint64_t v71 = sub_10001D958((uint64_t *)v93);
        sub_100DB2E50(v67, (uint64_t)v71, (uint64_t (*)(void))type metadata accessor for ShareRecord);
        PassthroughSubject.send(_:)();
        sub_10001CFB8(v75, v76);

        (*(void (**)(char *, uint64_t))(v84 + 8))(v64, v85);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v93);
      }
      else
      {
        id v65 = v93[0];
        _convertNSErrorToError(_:)();

        swift_willThrow();
        sub_10001CFB8(v75, v76);

        (*(void (**)(char *, uint64_t))(v84 + 8))(v87, v85);
      }
      v77(v54, v90);
    }
  }
}

void sub_100D3FD90(uint64_t a1, uint64_t a2)
{
  uint64_t v89 = a1;
  uint64_t v3 = type metadata accessor for OwnedBeaconGroup(0);
  __chkstk_darwin(v3);
  uint64_t v79 = (uint64_t)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URLResourceValues();
  uint64_t v86 = *(void *)(v5 - 8);
  uint64_t v87 = v5;
  __chkstk_darwin(v5);
  uint64_t v88 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v84 = type metadata accessor for UUID();
  uint64_t v83 = *(void *)(v84 - 8);
  __chkstk_darwin(v84);
  uint64_t v82 = (char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v90 = *(void *)(v8 - 8);
  uint64_t v91 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v80 = (char *)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v81 = (char *)&v74 - v12;
  __chkstk_darwin(v11);
  uint64_t v85 = (char *)&v74 - v13;
  uint64_t v14 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v74 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  id v20 = (char *)&v74 - v19;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v15 + 104))(v18, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v14);
  sub_100DB1F50((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  id v22 = v93;
  id v21 = v94[0];
  id v23 = *(void (**)(char *, uint64_t))(v15 + 8);
  v23(v18, v14);
  v23(v20, v14);
  if (v21 == v22)
  {
    static os_log_type_t.default.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_10009FD9C();
    swift_allocError();
    *long long v24 = 0;
    swift_willThrow();
  }
  else
  {
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    sub_100DB1F50(&qword_101647710, (void (*)(uint64_t))type metadata accessor for OwnedBeaconGroup);
    Class v26 = isa;
    uint64_t v27 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    if (v26)
    {
      swift_release();
    }
    else
    {
      uint64_t v29 = v27;
      uint64_t v30 = v28;
      swift_release();
      unint64_t v31 = sub_1010EB9E4(v29, v30, 0);
      unint64_t v33 = v32;
      unint64_t v78 = v30;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10001CFB8((uint64_t)v31, v33);
      sub_1009D0798();
      if (qword_101636B50 != -1) {
        swift_once();
      }
      uint64_t v77 = v29;
      uint64_t v34 = v91;
      uint64_t v35 = sub_100010324(v91, (uint64_t)qword_10170DF88);
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)();
      uint64_t v74 = (void *)v3;
      uint64_t v36 = *(int *)(v3 + 24);
      uint64_t v75 = a2;
      uint64_t v37 = a2 + v36;
      uint64_t v38 = v83;
      uint64_t v39 = v82;
      uint64_t v40 = v84;
      (*(void (**)(char *, uint64_t, void))(v83 + 16))(v82, v37, v84);
      uint64_t v41 = v90;
      uint64_t v42 = v81;
      (*(void (**)(char *, uint64_t, uint64_t))(v90 + 16))(v81, v35, v34);
      UUID.uuidString.getter();
      uint64_t v43 = v80;
      URL.appendingPathComponent(_:)();
      swift_bridgeObjectRelease();
      uint64_t v44 = v85;
      URL.appendingPathExtension(_:)();
      uint64_t v45 = *(void (**)(char *, uint64_t))(v41 + 8);
      uint64_t v46 = v43;
      uint64_t v47 = v91;
      v45(v46, v91);
      uint64_t v90 = v41 + 8;
      uint64_t v81 = (char *)v45;
      v45(v42, v47);
      (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v40);
      URLResourceValues.init()();
      URLResourceValues.isExcludedFromBackup.setter();
      URL._bridgeToObjectiveC()(v49);
      uint64_t v51 = v50;
      [(objc_class *)isa writeToURL:v50 atomically:1];

      static os_log_type_t.default.getter();
      if (qword_101637260 != -1) {
        swift_once();
      }
      uint64_t v83 = sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v52 = swift_allocObject();
      long long v84 = xmmword_101342130;
      *(_OWORD *)(v52 + 16) = xmmword_101342130;
      sub_100DB1F50((unint64_t *)&qword_1016605A0, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v53 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v55 = v54;
      *(void *)(v52 + 56) = &type metadata for String;
      uint64_t v56 = v44;
      unint64_t v57 = sub_10000B4CC();
      *(void *)(v52 + 64) = v57;
      *(void *)(v52 + 32) = v53;
      *(void *)(v52 + 40) = v55;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      sub_10000588C(&qword_101650640);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = v84;
      *(void *)(inited + 32) = NSFileProtectionKey;
      *(void *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      unint64_t v59 = NSFileProtectionKey;
      id v60 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      unint64_t v61 = sub_10092DE24(inited);
      id v62 = [self defaultManager];
      sub_100653FB8(v61);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0);
      sub_100DB1F50(&qword_1016387D0, type metadata accessor for FileAttributeKey);
      Class v63 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      URL.path.getter();
      NSString v64 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v94[0] = 0;
      LODWORD(v55) = [v62 setAttributes:v63 ofItemAtPath:v64 error:v94];

      if (v55)
      {
        id v65 = v94[0];
        uint64_t v66 = v88;
        URL.setResourceValues(_:)();
        static os_log_type_t.default.getter();
        uint64_t v82 = (char *)qword_10170EFB8;
        uint64_t v68 = swift_allocObject();
        *(_OWORD *)(v68 + 16) = v84;
        uint64_t v69 = v75;
        sub_100DB2E50(v75, v79, type metadata accessor for OwnedBeaconGroup);
        uint64_t v70 = v74;
        uint64_t v71 = String.init<A>(describing:)();
        *(void *)(v68 + 56) = &type metadata for String;
        *(void *)(v68 + 64) = v57;
        *(void *)(v68 + 32) = v71;
        *(void *)(v68 + 40) = v72;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        void v94[3] = v70;
        v94[4] = (id)sub_100DB1F50((unint64_t *)&unk_101647718, (void (*)(uint64_t))type metadata accessor for OwnedBeaconGroup);
        uint64_t v73 = sub_10001D958((uint64_t *)v94);
        sub_100DB2E50(v69, (uint64_t)v73, type metadata accessor for OwnedBeaconGroup);
        PassthroughSubject.send(_:)();
        sub_10001CFB8(v77, v78);

        (*(void (**)(char *, uint64_t))(v86 + 8))(v66, v87);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v94);
      }
      else
      {
        id v67 = v94[0];
        _convertNSErrorToError(_:)();

        swift_willThrow();
        sub_10001CFB8(v77, v78);

        (*(void (**)(char *, uint64_t))(v86 + 8))(v88, v87);
      }
      ((void (*)(char *, uint64_t))v81)(v56, v91);
    }
  }
}

void sub_100D40990(uint64_t a1, uint64_t a2)
{
  uint64_t v89 = a1;
  uint64_t v3 = type metadata accessor for SharedBeaconRecord(0);
  __chkstk_darwin(v3);
  uint64_t v79 = (uint64_t)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URLResourceValues();
  uint64_t v86 = *(void *)(v5 - 8);
  uint64_t v87 = v5;
  __chkstk_darwin(v5);
  uint64_t v88 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v84 = type metadata accessor for UUID();
  uint64_t v83 = *(void *)(v84 - 8);
  __chkstk_darwin(v84);
  uint64_t v82 = (char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v90 = *(void *)(v8 - 8);
  uint64_t v91 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v80 = (char *)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v81 = (char *)&v74 - v12;
  __chkstk_darwin(v11);
  uint64_t v85 = (char *)&v74 - v13;
  uint64_t v14 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v74 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  id v20 = (char *)&v74 - v19;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v15 + 104))(v18, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v14);
  sub_100DB1F50((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  id v22 = v93;
  id v21 = v94[0];
  id v23 = *(void (**)(char *, uint64_t))(v15 + 8);
  v23(v18, v14);
  v23(v20, v14);
  if (v21 == v22)
  {
    static os_log_type_t.default.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_10009FD9C();
    swift_allocError();
    *long long v24 = 0;
    swift_willThrow();
  }
  else
  {
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    sub_100DB1F50((unint64_t *)&unk_10166EAA0, (void (*)(uint64_t))type metadata accessor for SharedBeaconRecord);
    Class v26 = isa;
    uint64_t v27 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    if (v26)
    {
      swift_release();
    }
    else
    {
      uint64_t v29 = v27;
      uint64_t v30 = v28;
      swift_release();
      unint64_t v31 = sub_1010EB9E4(v29, v30, 0);
      unint64_t v33 = v32;
      unint64_t v78 = v30;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10001CFB8((uint64_t)v31, v33);
      sub_1009D0798();
      if (qword_1016375F0 != -1) {
        swift_once();
      }
      uint64_t v77 = v29;
      uint64_t v34 = v91;
      uint64_t v35 = sub_100010324(v91, (uint64_t)qword_10170F760);
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)();
      uint64_t v74 = (void *)v3;
      uint64_t v36 = *(int *)(v3 + 20);
      uint64_t v75 = a2;
      uint64_t v37 = a2 + v36;
      uint64_t v38 = v83;
      uint64_t v39 = v82;
      uint64_t v40 = v84;
      (*(void (**)(char *, uint64_t, void))(v83 + 16))(v82, v37, v84);
      uint64_t v41 = v90;
      uint64_t v42 = v81;
      (*(void (**)(char *, uint64_t, uint64_t))(v90 + 16))(v81, v35, v34);
      UUID.uuidString.getter();
      uint64_t v43 = v80;
      URL.appendingPathComponent(_:)();
      swift_bridgeObjectRelease();
      uint64_t v44 = v85;
      URL.appendingPathExtension(_:)();
      uint64_t v45 = *(void (**)(char *, uint64_t))(v41 + 8);
      uint64_t v46 = v43;
      uint64_t v47 = v91;
      v45(v46, v91);
      uint64_t v90 = v41 + 8;
      uint64_t v81 = (char *)v45;
      v45(v42, v47);
      (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v40);
      URLResourceValues.init()();
      URLResourceValues.isExcludedFromBackup.setter();
      URL._bridgeToObjectiveC()(v49);
      uint64_t v51 = v50;
      [(objc_class *)isa writeToURL:v50 atomically:1];

      static os_log_type_t.default.getter();
      if (qword_101637260 != -1) {
        swift_once();
      }
      uint64_t v83 = sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v52 = swift_allocObject();
      long long v84 = xmmword_101342130;
      *(_OWORD *)(v52 + 16) = xmmword_101342130;
      sub_100DB1F50((unint64_t *)&qword_1016605A0, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v53 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v55 = v54;
      *(void *)(v52 + 56) = &type metadata for String;
      uint64_t v56 = v44;
      unint64_t v57 = sub_10000B4CC();
      *(void *)(v52 + 64) = v57;
      *(void *)(v52 + 32) = v53;
      *(void *)(v52 + 40) = v55;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      sub_10000588C(&qword_101650640);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = v84;
      *(void *)(inited + 32) = NSFileProtectionKey;
      *(void *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      unint64_t v59 = NSFileProtectionKey;
      id v60 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      unint64_t v61 = sub_10092DE24(inited);
      id v62 = [self defaultManager];
      sub_100653FB8(v61);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0);
      sub_100DB1F50(&qword_1016387D0, type metadata accessor for FileAttributeKey);
      Class v63 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      URL.path.getter();
      NSString v64 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v94[0] = 0;
      LODWORD(v55) = [v62 setAttributes:v63 ofItemAtPath:v64 error:v94];

      if (v55)
      {
        id v65 = v94[0];
        uint64_t v66 = v88;
        URL.setResourceValues(_:)();
        static os_log_type_t.default.getter();
        uint64_t v82 = (char *)qword_10170EFB8;
        uint64_t v68 = swift_allocObject();
        *(_OWORD *)(v68 + 16) = v84;
        uint64_t v69 = v75;
        sub_100DB2E50(v75, v79, type metadata accessor for SharedBeaconRecord);
        uint64_t v70 = v74;
        uint64_t v71 = String.init<A>(describing:)();
        *(void *)(v68 + 56) = &type metadata for String;
        *(void *)(v68 + 64) = v57;
        *(void *)(v68 + 32) = v71;
        *(void *)(v68 + 40) = v72;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        void v94[3] = v70;
        v94[4] = (id)sub_100DB1F50(&qword_10165E800, (void (*)(uint64_t))type metadata accessor for SharedBeaconRecord);
        uint64_t v73 = sub_10001D958((uint64_t *)v94);
        sub_100DB2E50(v69, (uint64_t)v73, type metadata accessor for SharedBeaconRecord);
        PassthroughSubject.send(_:)();
        sub_10001CFB8(v77, v78);

        (*(void (**)(char *, uint64_t))(v86 + 8))(v66, v87);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v94);
      }
      else
      {
        id v67 = v94[0];
        _convertNSErrorToError(_:)();

        swift_willThrow();
        sub_10001CFB8(v77, v78);

        (*(void (**)(char *, uint64_t))(v86 + 8))(v88, v87);
      }
      ((void (*)(char *, uint64_t))v81)(v56, v91);
    }
  }
}

void sub_100D41590(uint64_t a1, uint64_t a2)
{
  uint64_t v89 = a1;
  uint64_t v3 = type metadata accessor for OwnedBeaconRecord();
  __chkstk_darwin(v3);
  uint64_t v79 = (uint64_t)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URLResourceValues();
  uint64_t v86 = *(void *)(v5 - 8);
  uint64_t v87 = v5;
  __chkstk_darwin(v5);
  uint64_t v88 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v84 = type metadata accessor for UUID();
  uint64_t v83 = *(void *)(v84 - 8);
  __chkstk_darwin(v84);
  uint64_t v82 = (char *)&v74 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v90 = *(void *)(v8 - 8);
  uint64_t v91 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v80 = (char *)&v74 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v81 = (char *)&v74 - v12;
  __chkstk_darwin(v11);
  uint64_t v85 = (char *)&v74 - v13;
  uint64_t v14 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v74 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  id v20 = (char *)&v74 - v19;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v15 + 104))(v18, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v14);
  sub_100DB1F50((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  id v22 = v93;
  id v21 = v94[0];
  id v23 = *(void (**)(char *, uint64_t))(v15 + 8);
  v23(v18, v14);
  v23(v20, v14);
  if (v21 == v22)
  {
    static os_log_type_t.default.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_10009FD9C();
    swift_allocError();
    *long long v24 = 0;
    swift_willThrow();
  }
  else
  {
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    sub_100DB1F50(&qword_10165DD28, (void (*)(uint64_t))type metadata accessor for OwnedBeaconRecord);
    Class v26 = isa;
    uint64_t v27 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    if (v26)
    {
      swift_release();
    }
    else
    {
      uint64_t v29 = v27;
      uint64_t v30 = v28;
      swift_release();
      unint64_t v31 = sub_1010EB9E4(v29, v30, 0);
      unint64_t v33 = v32;
      unint64_t v78 = v30;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10001CFB8((uint64_t)v31, v33);
      sub_1009D0798();
      if (qword_1016370B0 != -1) {
        swift_once();
      }
      uint64_t v77 = v29;
      uint64_t v34 = v91;
      uint64_t v35 = sub_100010324(v91, (uint64_t)qword_10170ECC0);
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)();
      uint64_t v74 = (void *)v3;
      uint64_t v36 = *(int *)(v3 + 20);
      uint64_t v75 = a2;
      uint64_t v37 = a2 + v36;
      uint64_t v38 = v83;
      uint64_t v39 = v82;
      uint64_t v40 = v84;
      (*(void (**)(char *, uint64_t, void))(v83 + 16))(v82, v37, v84);
      uint64_t v41 = v90;
      uint64_t v42 = v81;
      (*(void (**)(char *, uint64_t, uint64_t))(v90 + 16))(v81, v35, v34);
      UUID.uuidString.getter();
      uint64_t v43 = v80;
      URL.appendingPathComponent(_:)();
      swift_bridgeObjectRelease();
      uint64_t v44 = v85;
      URL.appendingPathExtension(_:)();
      uint64_t v45 = *(void (**)(char *, uint64_t))(v41 + 8);
      uint64_t v46 = v43;
      uint64_t v47 = v91;
      v45(v46, v91);
      uint64_t v90 = v41 + 8;
      uint64_t v81 = (char *)v45;
      v45(v42, v47);
      (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v40);
      URLResourceValues.init()();
      URLResourceValues.isExcludedFromBackup.setter();
      URL._bridgeToObjectiveC()(v49);
      uint64_t v51 = v50;
      [(objc_class *)isa writeToURL:v50 atomically:1];

      static os_log_type_t.default.getter();
      if (qword_101637260 != -1) {
        swift_once();
      }
      uint64_t v83 = sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v52 = swift_allocObject();
      long long v84 = xmmword_101342130;
      *(_OWORD *)(v52 + 16) = xmmword_101342130;
      sub_100DB1F50((unint64_t *)&qword_1016605A0, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v53 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v55 = v54;
      *(void *)(v52 + 56) = &type metadata for String;
      uint64_t v56 = v44;
      unint64_t v57 = sub_10000B4CC();
      *(void *)(v52 + 64) = v57;
      *(void *)(v52 + 32) = v53;
      *(void *)(v52 + 40) = v55;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      sub_10000588C(&qword_101650640);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = v84;
      *(void *)(inited + 32) = NSFileProtectionKey;
      *(void *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      unint64_t v59 = NSFileProtectionKey;
      id v60 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      unint64_t v61 = sub_10092DE24(inited);
      id v62 = [self defaultManager];
      sub_100653FB8(v61);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0);
      sub_100DB1F50(&qword_1016387D0, type metadata accessor for FileAttributeKey);
      Class v63 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      URL.path.getter();
      NSString v64 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v94[0] = 0;
      LODWORD(v55) = [v62 setAttributes:v63 ofItemAtPath:v64 error:v94];

      if (v55)
      {
        id v65 = v94[0];
        uint64_t v66 = v88;
        URL.setResourceValues(_:)();
        static os_log_type_t.default.getter();
        uint64_t v82 = (char *)qword_10170EFB8;
        uint64_t v68 = swift_allocObject();
        *(_OWORD *)(v68 + 16) = v84;
        uint64_t v69 = v75;
        sub_100DB2E50(v75, v79, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        uint64_t v70 = v74;
        uint64_t v71 = String.init<A>(describing:)();
        *(void *)(v68 + 56) = &type metadata for String;
        *(void *)(v68 + 64) = v57;
        *(void *)(v68 + 32) = v71;
        *(void *)(v68 + 40) = v72;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        void v94[3] = v70;
        v94[4] = (id)sub_100DB1F50(&qword_10165DD30, (void (*)(uint64_t))type metadata accessor for OwnedBeaconRecord);
        uint64_t v73 = sub_10001D958((uint64_t *)v94);
        sub_100DB2E50(v69, (uint64_t)v73, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        PassthroughSubject.send(_:)();
        sub_10001CFB8(v77, v78);

        (*(void (**)(char *, uint64_t))(v86 + 8))(v66, v87);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v94);
      }
      else
      {
        id v67 = v94[0];
        _convertNSErrorToError(_:)();

        swift_willThrow();
        sub_10001CFB8(v77, v78);

        (*(void (**)(char *, uint64_t))(v86 + 8))(v88, v87);
      }
      ((void (*)(char *, uint64_t))v81)(v56, v91);
    }
  }
}

void sub_100D42190(uint64_t a1, uint64_t a2)
{
  uint64_t v85 = a1;
  uint64_t v3 = type metadata accessor for BeaconProductInfoRecord();
  __chkstk_darwin(v3);
  uint64_t v74 = (uint64_t)&v68 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = type metadata accessor for URLResourceValues();
  uint64_t v80 = *(void *)(v81 - 8);
  __chkstk_darwin(v81);
  uint64_t v83 = (char *)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v82 = type metadata accessor for UUID();
  uint64_t v78 = *(void *)(v82 - 8);
  __chkstk_darwin(v82);
  uint64_t v77 = (char *)&v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = type metadata accessor for URL();
  uint64_t v86 = *(void *)(v84 - 8);
  uint64_t v7 = __chkstk_darwin(v84);
  uint64_t v75 = (char *)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  unint64_t v76 = (char *)&v68 - v10;
  __chkstk_darwin(v9);
  uint64_t v79 = (char *)&v68 - v11;
  uint64_t v12 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v68 - v17;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v16, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v12);
  sub_100DB1F50((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  id v20 = v88;
  id v19 = v89[0];
  id v21 = *(void (**)(char *, uint64_t))(v13 + 8);
  v21(v16, v12);
  v21(v18, v12);
  if (v19 == v20)
  {
    static os_log_type_t.default.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_10009FD9C();
    swift_allocError();
    *id v22 = 0;
    swift_willThrow();
  }
  else
  {
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    sub_100DB1F50(&qword_10164F250, (void (*)(uint64_t))type metadata accessor for BeaconProductInfoRecord);
    Class v24 = isa;
    uint64_t v25 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    if (v24)
    {
      swift_release();
    }
    else
    {
      uint64_t v27 = v25;
      uint64_t v28 = v26;
      swift_release();
      uint64_t v29 = sub_1010EB9E4(v27, v28, 0);
      unint64_t v31 = v30;
      unint64_t v73 = v28;
      uint64_t v69 = (void *)v3;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10001CFB8((uint64_t)v29, v31);
      sub_1009D0798();
      if (qword_101636D10 != -1) {
        swift_once();
      }
      uint64_t v72 = v27;
      uint64_t v32 = v84;
      uint64_t v33 = sub_100010324(v84, (uint64_t)qword_10170E3E8);
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)();
      uint64_t v34 = v78;
      uint64_t v35 = *(void (**)(char *, uint64_t, void))(v78 + 16);
      uint64_t v36 = v77;
      uint64_t v70 = a2;
      v35(v77, a2, v82);
      uint64_t v37 = v86;
      uint64_t v38 = v76;
      (*(void (**)(char *, uint64_t, uint64_t))(v86 + 16))(v76, v33, v32);
      UUID.uuidString.getter();
      uint64_t v39 = v75;
      URL.appendingPathComponent(_:)();
      swift_bridgeObjectRelease();
      uint64_t v40 = v79;
      URL.appendingPathExtension(_:)();
      uint64_t v41 = *(void (**)(char *, uint64_t))(v37 + 8);
      v41(v39, v32);
      uint64_t v86 = v37 + 8;
      unint64_t v76 = (char *)v41;
      v41(v38, v32);
      (*(void (**)(char *, void))(v34 + 8))(v36, v82);
      URLResourceValues.init()();
      URLResourceValues.isExcludedFromBackup.setter();
      URL._bridgeToObjectiveC()(v43);
      uint64_t v45 = v44;
      [(objc_class *)isa writeToURL:v44 atomically:1];

      static os_log_type_t.default.getter();
      if (qword_101637260 != -1) {
        swift_once();
      }
      uint64_t v78 = sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v46 = swift_allocObject();
      long long v82 = xmmword_101342130;
      *(_OWORD *)(v46 + 16) = xmmword_101342130;
      sub_100DB1F50((unint64_t *)&qword_1016605A0, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v49 = v48;
      *(void *)(v46 + 56) = &type metadata for String;
      uint64_t v50 = v40;
      unint64_t v51 = sub_10000B4CC();
      *(void *)(v46 + 64) = v51;
      *(void *)(v46 + 32) = v47;
      *(void *)(v46 + 40) = v49;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      sub_10000588C(&qword_101650640);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = v82;
      *(void *)(inited + 32) = NSFileProtectionKey;
      *(void *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      uint64_t v53 = NSFileProtectionKey;
      uint64_t v54 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      unint64_t v55 = sub_10092DE24(inited);
      id v56 = [self defaultManager];
      sub_100653FB8(v55);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0);
      sub_100DB1F50(&qword_1016387D0, type metadata accessor for FileAttributeKey);
      Class v57 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      URL.path.getter();
      NSString v58 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v89[0] = 0;
      LODWORD(v49) = [v56 setAttributes:v57 ofItemAtPath:v58 error:v89];

      if (v49)
      {
        id v59 = v89[0];
        id v60 = v83;
        URL.setResourceValues(_:)();
        static os_log_type_t.default.getter();
        uint64_t v77 = (char *)qword_10170EFB8;
        uint64_t v62 = swift_allocObject();
        *(_OWORD *)(v62 + 16) = v82;
        uint64_t v63 = v70;
        sub_100DB2E50(v70, v74, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
        NSString v64 = v69;
        uint64_t v65 = String.init<A>(describing:)();
        *(void *)(v62 + 56) = &type metadata for String;
        *(void *)(v62 + 64) = v51;
        *(void *)(v62 + 32) = v65;
        *(void *)(v62 + 40) = v66;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        v89[3] = v64;
        v89[4] = (id)sub_100DB1F50(&qword_10165E778, (void (*)(uint64_t))type metadata accessor for BeaconProductInfoRecord);
        id v67 = sub_10001D958((uint64_t *)v89);
        sub_100DB2E50(v63, (uint64_t)v67, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
        PassthroughSubject.send(_:)();
        sub_10001CFB8(v72, v73);

        (*(void (**)(char *, uint64_t))(v80 + 8))(v60, v81);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v89);
      }
      else
      {
        id v61 = v89[0];
        _convertNSErrorToError(_:)();

        swift_willThrow();
        sub_10001CFB8(v72, v73);

        (*(void (**)(char *, uint64_t))(v80 + 8))(v83, v81);
      }
      ((void (*)(char *, uint64_t))v76)(v50, v84);
    }
  }
}

void sub_100D42DAC(uint64_t a1, uint64_t a2)
{
  uint64_t v85 = a1;
  uint64_t v3 = type metadata accessor for PairingErrorRecord(0);
  __chkstk_darwin(v3);
  uint64_t v74 = (uint64_t)&v68 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = type metadata accessor for URLResourceValues();
  uint64_t v80 = *(void *)(v81 - 8);
  __chkstk_darwin(v81);
  uint64_t v83 = (char *)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v82 = type metadata accessor for UUID();
  uint64_t v78 = *(void *)(v82 - 8);
  __chkstk_darwin(v82);
  uint64_t v77 = (char *)&v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = type metadata accessor for URL();
  uint64_t v86 = *(void *)(v84 - 8);
  uint64_t v7 = __chkstk_darwin(v84);
  uint64_t v75 = (char *)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  unint64_t v76 = (char *)&v68 - v10;
  __chkstk_darwin(v9);
  uint64_t v79 = (char *)&v68 - v11;
  uint64_t v12 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v68 - v17;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v16, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v12);
  sub_100DB1F50((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  id v20 = v88;
  id v19 = v89[0];
  id v21 = *(void (**)(char *, uint64_t))(v13 + 8);
  v21(v16, v12);
  v21(v18, v12);
  if (v19 == v20)
  {
    static os_log_type_t.default.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_10009FD9C();
    swift_allocError();
    *id v22 = 0;
    swift_willThrow();
  }
  else
  {
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    sub_100DB1F50(&qword_10165DAB8, (void (*)(uint64_t))type metadata accessor for PairingErrorRecord);
    Class v24 = isa;
    uint64_t v25 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    if (v24)
    {
      swift_release();
    }
    else
    {
      uint64_t v27 = v25;
      uint64_t v28 = v26;
      swift_release();
      uint64_t v29 = sub_1010EB9E4(v27, v28, 0);
      unint64_t v31 = v30;
      unint64_t v73 = v28;
      uint64_t v69 = (void *)v3;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10001CFB8((uint64_t)v29, v31);
      sub_1009D0798();
      if (qword_1016370A0 != -1) {
        swift_once();
      }
      uint64_t v72 = v27;
      uint64_t v32 = v84;
      uint64_t v33 = sub_100010324(v84, (uint64_t)qword_10170EC98);
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)();
      uint64_t v34 = v78;
      uint64_t v35 = *(void (**)(char *, uint64_t, void))(v78 + 16);
      uint64_t v36 = v77;
      uint64_t v70 = a2;
      v35(v77, a2, v82);
      uint64_t v37 = v86;
      uint64_t v38 = v76;
      (*(void (**)(char *, uint64_t, uint64_t))(v86 + 16))(v76, v33, v32);
      UUID.uuidString.getter();
      uint64_t v39 = v75;
      URL.appendingPathComponent(_:)();
      swift_bridgeObjectRelease();
      uint64_t v40 = v79;
      URL.appendingPathExtension(_:)();
      uint64_t v41 = *(void (**)(char *, uint64_t))(v37 + 8);
      v41(v39, v32);
      uint64_t v86 = v37 + 8;
      unint64_t v76 = (char *)v41;
      v41(v38, v32);
      (*(void (**)(char *, void))(v34 + 8))(v36, v82);
      URLResourceValues.init()();
      URLResourceValues.isExcludedFromBackup.setter();
      URL._bridgeToObjectiveC()(v43);
      uint64_t v45 = v44;
      [(objc_class *)isa writeToURL:v44 atomically:1];

      static os_log_type_t.default.getter();
      if (qword_101637260 != -1) {
        swift_once();
      }
      uint64_t v78 = sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v46 = swift_allocObject();
      long long v82 = xmmword_101342130;
      *(_OWORD *)(v46 + 16) = xmmword_101342130;
      sub_100DB1F50((unint64_t *)&qword_1016605A0, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v49 = v48;
      *(void *)(v46 + 56) = &type metadata for String;
      uint64_t v50 = v40;
      unint64_t v51 = sub_10000B4CC();
      *(void *)(v46 + 64) = v51;
      *(void *)(v46 + 32) = v47;
      *(void *)(v46 + 40) = v49;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      sub_10000588C(&qword_101650640);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = v82;
      *(void *)(inited + 32) = NSFileProtectionKey;
      *(void *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      uint64_t v53 = NSFileProtectionKey;
      uint64_t v54 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      unint64_t v55 = sub_10092DE24(inited);
      id v56 = [self defaultManager];
      sub_100653FB8(v55);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0);
      sub_100DB1F50(&qword_1016387D0, type metadata accessor for FileAttributeKey);
      Class v57 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      URL.path.getter();
      NSString v58 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v89[0] = 0;
      LODWORD(v49) = [v56 setAttributes:v57 ofItemAtPath:v58 error:v89];

      if (v49)
      {
        id v59 = v89[0];
        id v60 = v83;
        URL.setResourceValues(_:)();
        static os_log_type_t.default.getter();
        uint64_t v77 = (char *)qword_10170EFB8;
        uint64_t v62 = swift_allocObject();
        *(_OWORD *)(v62 + 16) = v82;
        uint64_t v63 = v70;
        sub_100DB2E50(v70, v74, type metadata accessor for PairingErrorRecord);
        NSString v64 = v69;
        uint64_t v65 = String.init<A>(describing:)();
        *(void *)(v62 + 56) = &type metadata for String;
        *(void *)(v62 + 64) = v51;
        *(void *)(v62 + 32) = v65;
        *(void *)(v62 + 40) = v66;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        v89[3] = v64;
        v89[4] = (id)sub_100DB1F50(&qword_10165EB18, (void (*)(uint64_t))type metadata accessor for PairingErrorRecord);
        id v67 = sub_10001D958((uint64_t *)v89);
        sub_100DB2E50(v63, (uint64_t)v67, type metadata accessor for PairingErrorRecord);
        PassthroughSubject.send(_:)();
        sub_10001CFB8(v72, v73);

        (*(void (**)(char *, uint64_t))(v80 + 8))(v60, v81);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v89);
      }
      else
      {
        id v61 = v89[0];
        _convertNSErrorToError(_:)();

        swift_willThrow();
        sub_10001CFB8(v72, v73);

        (*(void (**)(char *, uint64_t))(v80 + 8))(v83, v81);
      }
      ((void (*)(char *, uint64_t))v76)(v50, v84);
    }
  }
}

void sub_100D439C8(uint64_t a1, uint64_t a2)
{
  uint64_t v85 = a1;
  uint64_t v3 = type metadata accessor for WildModeAssociationRecord(0);
  __chkstk_darwin(v3);
  uint64_t v74 = (uint64_t)&v68 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = type metadata accessor for URLResourceValues();
  uint64_t v80 = *(void *)(v81 - 8);
  __chkstk_darwin(v81);
  uint64_t v83 = (char *)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v82 = type metadata accessor for UUID();
  uint64_t v78 = *(void *)(v82 - 8);
  __chkstk_darwin(v82);
  uint64_t v77 = (char *)&v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = type metadata accessor for URL();
  uint64_t v86 = *(void *)(v84 - 8);
  uint64_t v7 = __chkstk_darwin(v84);
  uint64_t v75 = (char *)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  unint64_t v76 = (char *)&v68 - v10;
  __chkstk_darwin(v9);
  uint64_t v79 = (char *)&v68 - v11;
  uint64_t v12 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v68 - v17;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v16, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v12);
  sub_100DB1F50((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  id v20 = v88;
  id v19 = v89[0];
  id v21 = *(void (**)(char *, uint64_t))(v13 + 8);
  v21(v16, v12);
  v21(v18, v12);
  if (v19 == v20)
  {
    static os_log_type_t.default.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_10009FD9C();
    swift_allocError();
    *id v22 = 0;
    swift_willThrow();
  }
  else
  {
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    sub_100DB1F50(&qword_101640328, (void (*)(uint64_t))type metadata accessor for WildModeAssociationRecord);
    Class v24 = isa;
    uint64_t v25 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    if (v24)
    {
      swift_release();
    }
    else
    {
      uint64_t v27 = v25;
      uint64_t v28 = v26;
      swift_release();
      uint64_t v29 = sub_1010EB9E4(v27, v28, 0);
      unint64_t v31 = v30;
      unint64_t v73 = v28;
      uint64_t v69 = (void *)v3;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10001CFB8((uint64_t)v29, v31);
      sub_1009D0798();
      if (qword_101636940 != -1) {
        swift_once();
      }
      uint64_t v72 = v27;
      uint64_t v32 = v84;
      uint64_t v33 = sub_100010324(v84, (uint64_t)qword_10170DA70);
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)();
      uint64_t v34 = v78;
      uint64_t v35 = *(void (**)(char *, uint64_t, void))(v78 + 16);
      uint64_t v36 = v77;
      uint64_t v70 = a2;
      v35(v77, a2, v82);
      uint64_t v37 = v86;
      uint64_t v38 = v76;
      (*(void (**)(char *, uint64_t, uint64_t))(v86 + 16))(v76, v33, v32);
      UUID.uuidString.getter();
      uint64_t v39 = v75;
      URL.appendingPathComponent(_:)();
      swift_bridgeObjectRelease();
      uint64_t v40 = v79;
      URL.appendingPathExtension(_:)();
      uint64_t v41 = *(void (**)(char *, uint64_t))(v37 + 8);
      v41(v39, v32);
      uint64_t v86 = v37 + 8;
      unint64_t v76 = (char *)v41;
      v41(v38, v32);
      (*(void (**)(char *, void))(v34 + 8))(v36, v82);
      URLResourceValues.init()();
      URLResourceValues.isExcludedFromBackup.setter();
      URL._bridgeToObjectiveC()(v43);
      uint64_t v45 = v44;
      [(objc_class *)isa writeToURL:v44 atomically:1];

      static os_log_type_t.default.getter();
      if (qword_101637260 != -1) {
        swift_once();
      }
      uint64_t v78 = sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v46 = swift_allocObject();
      long long v82 = xmmword_101342130;
      *(_OWORD *)(v46 + 16) = xmmword_101342130;
      sub_100DB1F50((unint64_t *)&qword_1016605A0, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v49 = v48;
      *(void *)(v46 + 56) = &type metadata for String;
      uint64_t v50 = v40;
      unint64_t v51 = sub_10000B4CC();
      *(void *)(v46 + 64) = v51;
      *(void *)(v46 + 32) = v47;
      *(void *)(v46 + 40) = v49;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      sub_10000588C(&qword_101650640);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = v82;
      *(void *)(inited + 32) = NSFileProtectionKey;
      *(void *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      uint64_t v53 = NSFileProtectionKey;
      uint64_t v54 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      unint64_t v55 = sub_10092DE24(inited);
      id v56 = [self defaultManager];
      sub_100653FB8(v55);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0);
      sub_100DB1F50(&qword_1016387D0, type metadata accessor for FileAttributeKey);
      Class v57 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      URL.path.getter();
      NSString v58 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v89[0] = 0;
      LODWORD(v49) = [v56 setAttributes:v57 ofItemAtPath:v58 error:v89];

      if (v49)
      {
        id v59 = v89[0];
        id v60 = v83;
        URL.setResourceValues(_:)();
        static os_log_type_t.default.getter();
        uint64_t v77 = (char *)qword_10170EFB8;
        uint64_t v62 = swift_allocObject();
        *(_OWORD *)(v62 + 16) = v82;
        uint64_t v63 = v70;
        sub_100DB2E50(v70, v74, type metadata accessor for WildModeAssociationRecord);
        NSString v64 = v69;
        uint64_t v65 = String.init<A>(describing:)();
        *(void *)(v62 + 56) = &type metadata for String;
        *(void *)(v62 + 64) = v51;
        *(void *)(v62 + 32) = v65;
        *(void *)(v62 + 40) = v66;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        v89[3] = v64;
        v89[4] = (id)sub_100DB1F50(&qword_10165E7F8, (void (*)(uint64_t))type metadata accessor for WildModeAssociationRecord);
        id v67 = sub_10001D958((uint64_t *)v89);
        sub_100DB2E50(v63, (uint64_t)v67, type metadata accessor for WildModeAssociationRecord);
        PassthroughSubject.send(_:)();
        sub_10001CFB8(v72, v73);

        (*(void (**)(char *, uint64_t))(v80 + 8))(v60, v81);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v89);
      }
      else
      {
        id v61 = v89[0];
        _convertNSErrorToError(_:)();

        swift_willThrow();
        sub_10001CFB8(v72, v73);

        (*(void (**)(char *, uint64_t))(v80 + 8))(v83, v81);
      }
      ((void (*)(char *, uint64_t))v76)(v50, v84);
    }
  }
}

void sub_100D445E4(uint64_t a1, uint64_t a2)
{
  uint64_t v85 = a1;
  uint64_t v3 = type metadata accessor for SecureLocationsCachedSharedKey(0);
  __chkstk_darwin(v3);
  uint64_t v74 = (uint64_t)&v68 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = type metadata accessor for URLResourceValues();
  uint64_t v80 = *(void *)(v81 - 8);
  __chkstk_darwin(v81);
  uint64_t v83 = (char *)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v82 = type metadata accessor for UUID();
  uint64_t v78 = *(void *)(v82 - 8);
  __chkstk_darwin(v82);
  uint64_t v77 = (char *)&v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = type metadata accessor for URL();
  uint64_t v86 = *(void *)(v84 - 8);
  uint64_t v7 = __chkstk_darwin(v84);
  uint64_t v75 = (char *)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  unint64_t v76 = (char *)&v68 - v10;
  __chkstk_darwin(v9);
  uint64_t v79 = (char *)&v68 - v11;
  uint64_t v12 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v68 - v17;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v16, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v12);
  sub_100DB1F50((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  id v20 = v88;
  id v19 = v89[0];
  id v21 = *(void (**)(char *, uint64_t))(v13 + 8);
  v21(v16, v12);
  v21(v18, v12);
  if (v19 == v20)
  {
    static os_log_type_t.default.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_10009FD9C();
    swift_allocError();
    *id v22 = 0;
    swift_willThrow();
  }
  else
  {
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    sub_100DB1F50(&qword_10165A870, (void (*)(uint64_t))type metadata accessor for SecureLocationsCachedSharedKey);
    Class v24 = isa;
    uint64_t v25 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    if (v24)
    {
      swift_release();
    }
    else
    {
      uint64_t v27 = v25;
      uint64_t v28 = v26;
      swift_release();
      uint64_t v29 = sub_1010EB9E4(v27, v28, 0);
      unint64_t v31 = v30;
      unint64_t v73 = v28;
      uint64_t v69 = (void *)v3;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10001CFB8((uint64_t)v29, v31);
      sub_1009D0798();
      if (qword_101636FA8 != -1) {
        swift_once();
      }
      uint64_t v72 = v27;
      uint64_t v32 = v84;
      uint64_t v33 = sub_100010324(v84, (uint64_t)qword_10170EA78);
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)();
      uint64_t v34 = v78;
      uint64_t v35 = *(void (**)(char *, uint64_t, void))(v78 + 16);
      uint64_t v36 = v77;
      uint64_t v70 = a2;
      v35(v77, a2, v82);
      uint64_t v37 = v86;
      uint64_t v38 = v76;
      (*(void (**)(char *, uint64_t, uint64_t))(v86 + 16))(v76, v33, v32);
      UUID.uuidString.getter();
      uint64_t v39 = v75;
      URL.appendingPathComponent(_:)();
      swift_bridgeObjectRelease();
      uint64_t v40 = v79;
      URL.appendingPathExtension(_:)();
      uint64_t v41 = *(void (**)(char *, uint64_t))(v37 + 8);
      v41(v39, v32);
      uint64_t v86 = v37 + 8;
      unint64_t v76 = (char *)v41;
      v41(v38, v32);
      (*(void (**)(char *, void))(v34 + 8))(v36, v82);
      URLResourceValues.init()();
      URLResourceValues.isExcludedFromBackup.setter();
      URL._bridgeToObjectiveC()(v43);
      uint64_t v45 = v44;
      [(objc_class *)isa writeToURL:v44 atomically:1];

      static os_log_type_t.default.getter();
      if (qword_101637260 != -1) {
        swift_once();
      }
      uint64_t v78 = sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v46 = swift_allocObject();
      long long v82 = xmmword_101342130;
      *(_OWORD *)(v46 + 16) = xmmword_101342130;
      sub_100DB1F50((unint64_t *)&qword_1016605A0, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v49 = v48;
      *(void *)(v46 + 56) = &type metadata for String;
      uint64_t v50 = v40;
      unint64_t v51 = sub_10000B4CC();
      *(void *)(v46 + 64) = v51;
      *(void *)(v46 + 32) = v47;
      *(void *)(v46 + 40) = v49;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      sub_10000588C(&qword_101650640);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = v82;
      *(void *)(inited + 32) = NSFileProtectionKey;
      *(void *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      uint64_t v53 = NSFileProtectionKey;
      uint64_t v54 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      unint64_t v55 = sub_10092DE24(inited);
      id v56 = [self defaultManager];
      sub_100653FB8(v55);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0);
      sub_100DB1F50(&qword_1016387D0, type metadata accessor for FileAttributeKey);
      Class v57 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      URL.path.getter();
      NSString v58 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v89[0] = 0;
      LODWORD(v49) = [v56 setAttributes:v57 ofItemAtPath:v58 error:v89];

      if (v49)
      {
        id v59 = v89[0];
        id v60 = v83;
        URL.setResourceValues(_:)();
        static os_log_type_t.default.getter();
        uint64_t v77 = (char *)qword_10170EFB8;
        uint64_t v62 = swift_allocObject();
        *(_OWORD *)(v62 + 16) = v82;
        uint64_t v63 = v70;
        sub_100DB2E50(v70, v74, type metadata accessor for SecureLocationsCachedSharedKey);
        NSString v64 = v69;
        uint64_t v65 = String.init<A>(describing:)();
        *(void *)(v62 + 56) = &type metadata for String;
        *(void *)(v62 + 64) = v51;
        *(void *)(v62 + 32) = v65;
        *(void *)(v62 + 40) = v66;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        v89[3] = v64;
        v89[4] = (id)sub_100DB1F50(&qword_10165EA00, (void (*)(uint64_t))type metadata accessor for SecureLocationsCachedSharedKey);
        id v67 = sub_10001D958((uint64_t *)v89);
        sub_100DB2E50(v63, (uint64_t)v67, type metadata accessor for SecureLocationsCachedSharedKey);
        PassthroughSubject.send(_:)();
        sub_10001CFB8(v72, v73);

        (*(void (**)(char *, uint64_t))(v80 + 8))(v60, v81);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v89);
      }
      else
      {
        id v61 = v89[0];
        _convertNSErrorToError(_:)();

        swift_willThrow();
        sub_10001CFB8(v72, v73);

        (*(void (**)(char *, uint64_t))(v80 + 8))(v83, v81);
      }
      ((void (*)(char *, uint64_t))v76)(v50, v84);
    }
  }
}

void sub_100D45200(uint64_t a1, uint64_t a2)
{
  uint64_t v85 = a1;
  uint64_t v3 = type metadata accessor for SecureLocationsCachedPayload();
  __chkstk_darwin(v3);
  uint64_t v74 = (uint64_t)&v68 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v81 = type metadata accessor for URLResourceValues();
  uint64_t v80 = *(void *)(v81 - 8);
  __chkstk_darwin(v81);
  uint64_t v83 = (char *)&v68 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v82 = type metadata accessor for UUID();
  uint64_t v78 = *(void *)(v82 - 8);
  __chkstk_darwin(v82);
  uint64_t v77 = (char *)&v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = type metadata accessor for URL();
  uint64_t v86 = *(void *)(v84 - 8);
  uint64_t v7 = __chkstk_darwin(v84);
  uint64_t v75 = (char *)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  unint64_t v76 = (char *)&v68 - v10;
  __chkstk_darwin(v9);
  uint64_t v79 = (char *)&v68 - v11;
  uint64_t v12 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v68 - v17;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v16, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v12);
  sub_100DB1F50((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  id v20 = v88;
  id v19 = v89[0];
  id v21 = *(void (**)(char *, uint64_t))(v13 + 8);
  v21(v16, v12);
  v21(v18, v12);
  if (v19 == v20)
  {
    static os_log_type_t.default.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_10009FD9C();
    swift_allocError();
    *id v22 = 0;
    swift_willThrow();
  }
  else
  {
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    sub_100DB1F50(&qword_10164A448, (void (*)(uint64_t))type metadata accessor for SecureLocationsCachedPayload);
    Class v24 = isa;
    uint64_t v25 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    if (v24)
    {
      swift_release();
    }
    else
    {
      uint64_t v27 = v25;
      uint64_t v28 = v26;
      swift_release();
      uint64_t v29 = sub_1010EB9E4(v27, v28, 0);
      unint64_t v31 = v30;
      unint64_t v73 = v28;
      uint64_t v69 = (void *)v3;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10001CFB8((uint64_t)v29, v31);
      sub_1009D0798();
      if (qword_101636BB0 != -1) {
        swift_once();
      }
      uint64_t v72 = v27;
      uint64_t v32 = v84;
      uint64_t v33 = sub_100010324(v84, (uint64_t)qword_10170E088);
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)();
      uint64_t v34 = v78;
      uint64_t v35 = *(void (**)(char *, uint64_t, void))(v78 + 16);
      uint64_t v36 = v77;
      uint64_t v70 = a2;
      v35(v77, a2, v82);
      uint64_t v37 = v86;
      uint64_t v38 = v76;
      (*(void (**)(char *, uint64_t, uint64_t))(v86 + 16))(v76, v33, v32);
      UUID.uuidString.getter();
      uint64_t v39 = v75;
      URL.appendingPathComponent(_:)();
      swift_bridgeObjectRelease();
      uint64_t v40 = v79;
      URL.appendingPathExtension(_:)();
      uint64_t v41 = *(void (**)(char *, uint64_t))(v37 + 8);
      v41(v39, v32);
      uint64_t v86 = v37 + 8;
      unint64_t v76 = (char *)v41;
      v41(v38, v32);
      (*(void (**)(char *, void))(v34 + 8))(v36, v82);
      URLResourceValues.init()();
      URLResourceValues.isExcludedFromBackup.setter();
      URL._bridgeToObjectiveC()(v43);
      uint64_t v45 = v44;
      [(objc_class *)isa writeToURL:v44 atomically:1];

      static os_log_type_t.default.getter();
      if (qword_101637260 != -1) {
        swift_once();
      }
      uint64_t v78 = sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v46 = swift_allocObject();
      long long v82 = xmmword_101342130;
      *(_OWORD *)(v46 + 16) = xmmword_101342130;
      sub_100DB1F50((unint64_t *)&qword_1016605A0, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v49 = v48;
      *(void *)(v46 + 56) = &type metadata for String;
      uint64_t v50 = v40;
      unint64_t v51 = sub_10000B4CC();
      *(void *)(v46 + 64) = v51;
      *(void *)(v46 + 32) = v47;
      *(void *)(v46 + 40) = v49;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      sub_10000588C(&qword_101650640);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = v82;
      *(void *)(inited + 32) = NSFileProtectionKey;
      *(void *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      uint64_t v53 = NSFileProtectionKey;
      uint64_t v54 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      unint64_t v55 = sub_10092DE24(inited);
      id v56 = [self defaultManager];
      sub_100653FB8(v55);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0);
      sub_100DB1F50(&qword_1016387D0, type metadata accessor for FileAttributeKey);
      Class v57 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      URL.path.getter();
      NSString v58 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v89[0] = 0;
      LODWORD(v49) = [v56 setAttributes:v57 ofItemAtPath:v58 error:v89];

      if (v49)
      {
        id v59 = v89[0];
        id v60 = v83;
        URL.setResourceValues(_:)();
        static os_log_type_t.default.getter();
        uint64_t v77 = (char *)qword_10170EFB8;
        uint64_t v62 = swift_allocObject();
        *(_OWORD *)(v62 + 16) = v82;
        uint64_t v63 = v70;
        sub_100DB2E50(v70, v74, (uint64_t (*)(void))type metadata accessor for SecureLocationsCachedPayload);
        NSString v64 = v69;
        uint64_t v65 = String.init<A>(describing:)();
        *(void *)(v62 + 56) = &type metadata for String;
        *(void *)(v62 + 64) = v51;
        *(void *)(v62 + 32) = v65;
        *(void *)(v62 + 40) = v66;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        v89[3] = v64;
        v89[4] = (id)sub_100DB1F50(&qword_10165EB00, (void (*)(uint64_t))type metadata accessor for SecureLocationsCachedPayload);
        id v67 = sub_10001D958((uint64_t *)v89);
        sub_100DB2E50(v63, (uint64_t)v67, (uint64_t (*)(void))type metadata accessor for SecureLocationsCachedPayload);
        PassthroughSubject.send(_:)();
        sub_10001CFB8(v72, v73);

        (*(void (**)(char *, uint64_t))(v80 + 8))(v60, v81);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v89);
      }
      else
      {
        id v61 = v89[0];
        _convertNSErrorToError(_:)();

        swift_willThrow();
        sub_10001CFB8(v72, v73);

        (*(void (**)(char *, uint64_t))(v80 + 8))(v83, v81);
      }
      ((void (*)(char *, uint64_t))v76)(v50, v84);
    }
  }
}

void sub_100D45E1C(uint64_t a1, uint64_t a2)
{
  uint64_t v93 = a1;
  uint64_t v91 = type metadata accessor for URLResourceValues();
  uint64_t v90 = *(void *)(v91 - 8);
  __chkstk_darwin(v91);
  unint64_t v92 = (char *)&v77 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v87 = type metadata accessor for UUID();
  unint64_t v86 = *(void *)(v87 - 8);
  __chkstk_darwin(v87);
  uint64_t v85 = (char *)&v77 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = type metadata accessor for URL();
  uint64_t v94 = *(void *)(v89 - 8);
  uint64_t v5 = __chkstk_darwin(v89);
  uint64_t v84 = (char *)&v77 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v88 = (char *)&v77 - v8;
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v77 - v9;
  uint64_t v11 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v77 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v77 - v16;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v12 + 104))(v15, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v11);
  sub_100DB1F50((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v18 = v97;
  uint64_t v19 = v96;
  id v20 = *(void (**)(char *, uint64_t))(v12 + 8);
  v20(v15, v11);
  v20(v17, v11);
  if (v18 == v19)
  {
    static os_log_type_t.default.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_10009FD9C();
    swift_allocError();
    *id v21 = 0;
    swift_willThrow();
  }
  else
  {
    long long v23 = *(_OWORD *)(a2 + 48);
    long long v99 = *(_OWORD *)(a2 + 32);
    long long v100 = v23;
    long long v101 = *(_OWORD *)(a2 + 64);
    uint64_t v102 = *(void *)(a2 + 80);
    long long v24 = *(_OWORD *)(a2 + 16);
    long long v97 = *(_OWORD *)a2;
    long long v98 = v24;
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    sub_100DB8D74();
    Class v25 = isa;
    uint64_t v26 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    if (v25)
    {
      swift_release();
    }
    else
    {
      uint64_t v28 = v26;
      uint64_t v29 = v27;
      swift_release();
      unint64_t v30 = sub_1010EB9E4(v28, v29, 0);
      unint64_t v32 = v31;
      uint64_t v81 = v28;
      unint64_t v82 = v29;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10001CFB8((uint64_t)v30, v32);
      sub_1009D0798();
      if (qword_1016373C8 != -1) {
        swift_once();
      }
      uint64_t v33 = v89;
      uint64_t v80 = sub_100010324(v89, (uint64_t)qword_10170F150);
      uint64_t v34 = v94;
      uint64_t v79 = *(void (**)(char *, uint64_t, uint64_t))(v94 + 16);
      v79(v10, v80, v33);
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)();
      uint64_t v83 = *(void (**)(char *, uint64_t))(v34 + 8);
      v83(v10, v33);
      uint64_t v78 = (long long *)a2;
      uint64_t v35 = String.utf8Data.getter();
      unint64_t v37 = v36;
      *(void *)&long long v97 = v35;
      *((void *)&v97 + 1) = v36;
      sub_1000362FC();
      uint64_t v38 = v85;
      DataProtocol.stableUUID.getter();
      sub_10001CFB8(v35, v37);
      v79(v10, v80, v33);
      uint64_t v39 = v33;
      UUID.uuidString.getter();
      uint64_t v41 = v84;
      URL.appendingPathComponent(_:)();
      swift_bridgeObjectRelease();
      uint64_t v42 = v88;
      URL.appendingPathExtension(_:)();
      uint64_t v43 = v41;
      uint64_t v44 = v39;
      uint64_t v45 = v83;
      v83(v43, v39);
      uint64_t v46 = v10;
      uint64_t v47 = v42;
      uint64_t v94 = v34 + 8;
      v45(v46, v39);
      (*(void (**)(char *, void))(v86 + 8))(v38, v87);
      URLResourceValues.init()();
      URLResourceValues.isExcludedFromBackup.setter();
      URL._bridgeToObjectiveC()(v49);
      unint64_t v51 = v50;
      [(objc_class *)isa writeToURL:v50 atomically:1];

      static os_log_type_t.default.getter();
      if (qword_101637260 != -1) {
        swift_once();
      }
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v52 = swift_allocObject();
      long long v87 = xmmword_101342130;
      *(_OWORD *)(v52 + 16) = xmmword_101342130;
      sub_100DB1F50((unint64_t *)&qword_1016605A0, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v53 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v55 = v54;
      *(void *)(v52 + 56) = &type metadata for String;
      unint64_t v86 = sub_10000B4CC();
      *(void *)(v52 + 64) = v86;
      *(void *)(v52 + 32) = v53;
      *(void *)(v52 + 40) = v55;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      sub_10000588C(&qword_101650640);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = v87;
      *(void *)(inited + 32) = NSFileProtectionKey;
      *(void *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      Class v57 = NSFileProtectionKey;
      NSString v58 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      unint64_t v59 = sub_10092DE24(inited);
      id v60 = [self defaultManager];
      sub_100653FB8(v59);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0);
      sub_100DB1F50(&qword_1016387D0, type metadata accessor for FileAttributeKey);
      Class v61 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      URL.path.getter();
      NSString v62 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      *(void *)&long long v97 = 0;
      unsigned int v63 = [v60 setAttributes:v61 ofItemAtPath:v62 error:&v97];

      if (v63)
      {
        id v64 = (id)v97;
        uint64_t v65 = v92;
        URL.setResourceValues(_:)();
        static os_log_type_t.default.getter();
        uint64_t v67 = swift_allocObject();
        *(_OWORD *)(v67 + 16) = v87;
        uint64_t v68 = (uint64_t)v78;
        long long v69 = v78[3];
        long long v99 = v78[2];
        long long v100 = v69;
        long long v101 = v78[4];
        uint64_t v102 = *((void *)v78 + 10);
        long long v70 = v78[1];
        long long v97 = *v78;
        long long v98 = v70;
        sub_100DB8CC4((uint64_t)v78);
        uint64_t v71 = String.init<A>(describing:)();
        unint64_t v72 = v86;
        *(void *)(v67 + 56) = &type metadata for String;
        *(void *)(v67 + 64) = v72;
        *(void *)(v67 + 32) = v71;
        *(void *)(v67 + 40) = v73;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        *((void *)&v98 + 1) = &type metadata for SecureLocationLabel;
        *(void *)&long long v99 = sub_100DB8DC8();
        uint64_t v74 = swift_allocObject();
        *(void *)&long long v97 = v74;
        long long v75 = *(_OWORD *)(v68 + 48);
        *(_OWORD *)(v74 + 48) = *(_OWORD *)(v68 + 32);
        *(_OWORD *)(v74 + 64) = v75;
        *(_OWORD *)(v74 + 80) = *(_OWORD *)(v68 + 64);
        *(void *)(v74 + 96) = *(void *)(v68 + 80);
        long long v76 = *(_OWORD *)(v68 + 16);
        *(_OWORD *)(v74 + 16) = *(_OWORD *)v68;
        *(_OWORD *)(v74 + 32) = v76;
        sub_100DB8CC4(v68);
        PassthroughSubject.send(_:)();
        sub_10001CFB8(v81, v82);

        (*(void (**)(char *, uint64_t))(v90 + 8))(v65, v91);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v97);
      }
      else
      {
        id v66 = (id)v97;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        sub_10001CFB8(v81, v82);

        (*(void (**)(char *, uint64_t))(v90 + 8))(v92, v91);
      }
      v83(v47, v44);
    }
  }
}

void sub_100D46A64(uint64_t a1, long long *a2)
{
  uint64_t v109 = a1;
  uint64_t v3 = type metadata accessor for URLResourceValues();
  uint64_t v103 = *(void *)(v3 - 8);
  uint64_t v104 = v3;
  __chkstk_darwin(v3);
  NSString v108 = (char *)&v95 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v107 = type metadata accessor for UUID();
  uint64_t v102 = *(void *)(v107 - 8);
  __chkstk_darwin(v107);
  NSString v106 = (char *)&v95 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for URL();
  char v111 = *(void **)(v6 - 8);
  uint64_t v112 = v6;
  uint64_t v7 = __chkstk_darwin(v6);
  long long v101 = (char *)&v95 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  long long v110 = (char *)&v95 - v10;
  __chkstk_darwin(v9);
  unint64_t v105 = (char *)&v95 - v11;
  uint64_t v12 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v95 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v95 - v17;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v16, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v12);
  sub_100DB1F50((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v19 = v115;
  uint64_t v20 = v114;
  id v21 = *(void (**)(char *, uint64_t))(v13 + 8);
  v21(v16, v12);
  v21(v18, v12);
  if (v19 == v20)
  {
    static os_log_type_t.default.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_10009FD9C();
    swift_allocError();
    *id v22 = 0;
    swift_willThrow();
  }
  else
  {
    long long v24 = a2[10];
    long long v25 = a2[11];
    long long v26 = a2[8];
    long long v124 = a2[9];
    long long v125 = v24;
    long long v27 = a2[12];
    long long v126 = v25;
    long long v127 = v27;
    long long v28 = a2[6];
    long long v29 = a2[7];
    long long v30 = a2[4];
    long long v120 = a2[5];
    long long v121 = v28;
    long long v122 = v29;
    long long v123 = v26;
    long long v31 = a2[3];
    long long v117 = a2[2];
    long long v118 = v31;
    long long v119 = v30;
    long long v32 = a2[1];
    long long v115 = *a2;
    long long v116 = v32;
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    sub_1006F33B8();
    uint64_t v33 = v113;
    uint64_t v34 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    if (v33)
    {
      swift_release();
    }
    else
    {
      uint64_t v36 = v34;
      uint64_t v37 = v35;
      swift_release();
      uint64_t v38 = sub_1010EB9E4(v36, v37, 0);
      unint64_t v40 = v39;
      uint64_t v98 = v36;
      unint64_t v99 = v37;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10001CFB8((uint64_t)v38, v40);
      sub_1009D0798();
      if (qword_101636BF0 != -1) {
        swift_once();
      }
      uint64_t v41 = v112;
      uint64_t v42 = sub_100010324(v112, (uint64_t)qword_10170E118);
      uint64_t v43 = v111;
      uint64_t v44 = v105;
      uint64_t v96 = (void (*)(char *))v111[2];
      uint64_t v97 = v42;
      v96(v105);
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)();
      uint64_t v45 = v44;
      uint64_t v46 = v41;
      uint64_t v48 = (void (*)(void, void))v43[1];
      uint64_t v47 = v43 + 1;
      uint64_t v113 = v48;
      v48(v45, v41);
      if (qword_101636BF8 != -1) {
        swift_once();
      }
      sub_100010324(v107, (uint64_t)qword_10170E130);
      uint64_t v49 = v102;
      (*(void (**)(void))(v102 + 16))();
      uint64_t v50 = v105;
      ((void (*)(char *, uint64_t, uint64_t))v96)(v105, v97, v46);
      UUID.uuidString.getter();
      unint64_t v51 = v101;
      URL.appendingPathComponent(_:)();
      swift_bridgeObjectRelease();
      URL.appendingPathExtension(_:)();
      uint64_t v52 = v51;
      uint64_t v53 = v112;
      uint64_t v54 = (void (*)(char *, uint64_t))v113;
      v113(v52, v112);
      char v111 = v47;
      v54(v50, v53);
      (*(void (**)(char *, void))(v49 + 8))(v106, v107);
      URLResourceValues.init()();
      URLResourceValues.isExcludedFromBackup.setter();
      URL._bridgeToObjectiveC()(v56);
      NSString v58 = v57;
      [(objc_class *)isa writeToURL:v57 atomically:1];

      static os_log_type_t.default.getter();
      if (qword_101637260 != -1) {
        swift_once();
      }
      unint64_t v105 = (char *)sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v59 = swift_allocObject();
      long long v107 = xmmword_101342130;
      *(_OWORD *)(v59 + 16) = xmmword_101342130;
      sub_100DB1F50((unint64_t *)&qword_1016605A0, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v60 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v62 = v61;
      *(void *)(v59 + 56) = &type metadata for String;
      NSString v106 = (char *)sub_10000B4CC();
      *(void *)(v59 + 64) = v106;
      *(void *)(v59 + 32) = v60;
      *(void *)(v59 + 40) = v62;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      sub_10000588C(&qword_101650640);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = v107;
      *(void *)(inited + 32) = NSFileProtectionKey;
      *(void *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      id v64 = NSFileProtectionKey;
      uint64_t v65 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      unint64_t v66 = sub_10092DE24(inited);
      id v67 = [self defaultManager];
      sub_100653FB8(v66);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0);
      sub_100DB1F50(&qword_1016387D0, type metadata accessor for FileAttributeKey);
      Class v68 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      URL.path.getter();
      NSString v69 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      *(void *)&long long v115 = 0;
      LODWORD(v59) = [v67 setAttributes:v68 ofItemAtPath:v69 error:&v115];

      if (v59)
      {
        id v70 = (id)v115;
        uint64_t v71 = v108;
        unint64_t v72 = v110;
        URL.setResourceValues(_:)();
        static os_log_type_t.default.getter();
        uint64_t v74 = swift_allocObject();
        *(_OWORD *)(v74 + 16) = v107;
        long long v75 = a2[10];
        long long v76 = a2[11];
        long long v77 = a2[8];
        long long v124 = a2[9];
        long long v125 = v75;
        long long v78 = a2[12];
        long long v126 = v76;
        long long v127 = v78;
        long long v79 = a2[6];
        long long v80 = a2[7];
        long long v81 = a2[4];
        long long v120 = a2[5];
        long long v121 = v79;
        long long v122 = v80;
        long long v123 = v77;
        long long v82 = a2[3];
        long long v117 = a2[2];
        long long v118 = v82;
        long long v119 = v81;
        long long v83 = a2[1];
        long long v115 = *a2;
        long long v116 = v83;
        sub_1006F40C4((uint64_t)a2);
        uint64_t v84 = String.init<A>(describing:)();
        uint64_t v85 = v106;
        *(void *)(v74 + 56) = &type metadata for String;
        *(void *)(v74 + 64) = v85;
        *(void *)(v74 + 32) = v84;
        *(void *)(v74 + 40) = v86;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        *((void *)&v116 + 1) = &type metadata for SecureLocationsConfig;
        *(void *)&long long v117 = sub_100DB8BD8();
        long long v87 = (_OWORD *)swift_allocObject();
        *(void *)&long long v115 = v87;
        long long v88 = a2[11];
        v87[11] = a2[10];
        v87[12] = v88;
        v87[13] = a2[12];
        long long v89 = a2[7];
        v87[7] = a2[6];
        v87[8] = v89;
        long long v90 = a2[9];
        v87[9] = a2[8];
        v87[10] = v90;
        long long v91 = a2[3];
        v87[3] = a2[2];
        v87[4] = v91;
        long long v92 = a2[5];
        v87[5] = a2[4];
        v87[6] = v92;
        long long v93 = a2[1];
        v87[1] = *a2;
        v87[2] = v93;
        sub_1006F40C4((uint64_t)a2);
        PassthroughSubject.send(_:)();
        sub_10001CFB8(v98, v99);

        (*(void (**)(char *, uint64_t))(v103 + 8))(v71, v104);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v115);
        uint64_t v94 = v72;
      }
      else
      {
        id v73 = (id)v115;
        _convertNSErrorToError(_:)();

        swift_willThrow();
        sub_10001CFB8(v98, v99);

        (*(void (**)(char *, uint64_t))(v103 + 8))(v108, v104);
        uint64_t v94 = v110;
      }
      v113(v94, v112);
    }
  }
}

void sub_100D4763C(uint64_t a1, unint64_t a2)
{
  uint64_t v86 = a1;
  uint64_t v3 = (int *)type metadata accessor for BeaconEstimatedLocation();
  __chkstk_darwin(v3);
  uint64_t v76 = (uint64_t)v72 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = type metadata accessor for URLResourceValues();
  uint64_t v82 = *(void *)(v83 - 8);
  __chkstk_darwin(v83);
  uint64_t v85 = (char *)v72 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v84 = type metadata accessor for UUID();
  uint64_t v80 = *(void *)(v84 - 8);
  __chkstk_darwin(v84);
  long long v79 = (char *)v72 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URL();
  long long v87 = *(char **)(v7 - 8);
  uint64_t v88 = v7;
  uint64_t v8 = __chkstk_darwin(v7);
  long long v78 = (char *)v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  long long v81 = (char *)v72 - v11;
  __chkstk_darwin(v10);
  long long v77 = (char *)v72 - v12;
  uint64_t v13 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)v72 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)v72 - v18;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v14 + 104))(v17, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v13);
  sub_100DB1F50((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  id v21 = v90;
  id v20 = v91[0];
  id v22 = *(void (**)(char *, uint64_t))(v14 + 8);
  v22(v17, v13);
  v22(v19, v13);
  if (v20 == v21)
  {
    static os_log_type_t.default.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_10009FD9C();
    swift_allocError();
    *long long v23 = 0;
    swift_willThrow();
  }
  else
  {
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    sub_100DB1F50(&qword_10165C6F0, (void (*)(uint64_t))type metadata accessor for BeaconEstimatedLocation);
    Class v25 = isa;
    uint64_t v26 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    if (v25)
    {
      swift_release();
    }
    else
    {
      uint64_t v28 = v26;
      uint64_t v29 = v27;
      swift_release();
      long long v30 = sub_1010EB9E4(v28, v29, 0);
      unint64_t v32 = v31;
      uint64_t v74 = v28;
      unint64_t v75 = v29;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10001CFB8((uint64_t)v30, v32);
      unint64_t v73 = sub_1009D0798();
      uint64_t v33 = (void *)(a2 + v3[6]);
      if (qword_101637030 != -1) {
        swift_once();
      }
      uint64_t v34 = v88;
      uint64_t v72[2] = (void *)sub_100010324(v88, (uint64_t)qword_10170EB70);
      v72[1] = v33;
      UUID.uuidString.getter();
      uint64_t v35 = v77;
      URL.appendingPathComponent(_:)();
      swift_bridgeObjectRelease();
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)();
      uint64_t v36 = v87 + 8;
      uint64_t v37 = (void (*)(char *, uint64_t))*((void *)v87 + 1);
      v37(v35, v34);
      v72[0] = v3;
      uint64_t v38 = v3[5];
      unint64_t v73 = a2;
      uint64_t v39 = a2 + v38;
      uint64_t v40 = v80;
      uint64_t v41 = v79;
      (*(void (**)(char *, uint64_t, void))(v80 + 16))(v79, v39, v84);
      UUID.uuidString.getter();
      URL.appendingPathComponent(_:)();
      swift_bridgeObjectRelease();
      UUID.uuidString.getter();
      uint64_t v43 = v78;
      URL.appendingPathComponent(_:)();
      swift_bridgeObjectRelease();
      uint64_t v44 = v81;
      URL.appendingPathExtension(_:)();
      uint64_t v45 = v88;
      v37(v43, v88);
      long long v87 = v36;
      long long v78 = (char *)v37;
      v37(v35, v45);
      (*(void (**)(char *, void))(v40 + 8))(v41, v84);
      URLResourceValues.init()();
      URLResourceValues.isExcludedFromBackup.setter();
      URL._bridgeToObjectiveC()(v47);
      uint64_t v49 = v48;
      [(objc_class *)isa writeToURL:v48 atomically:1];

      static os_log_type_t.default.getter();
      if (qword_101637260 != -1) {
        swift_once();
      }
      uint64_t v80 = sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v50 = swift_allocObject();
      long long v84 = xmmword_101342130;
      *(_OWORD *)(v50 + 16) = xmmword_101342130;
      sub_100DB1F50((unint64_t *)&qword_1016605A0, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v51 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v53 = v52;
      *(void *)(v50 + 56) = &type metadata for String;
      uint64_t v54 = v44;
      unint64_t v55 = sub_10000B4CC();
      *(void *)(v50 + 64) = v55;
      *(void *)(v50 + 32) = v51;
      *(void *)(v50 + 40) = v53;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      sub_10000588C(&qword_101650640);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = v84;
      *(void *)(inited + 32) = NSFileProtectionKey;
      *(void *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      Class v57 = NSFileProtectionKey;
      NSString v58 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      unint64_t v59 = sub_10092DE24(inited);
      id v60 = [self defaultManager];
      sub_100653FB8(v59);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0);
      sub_100DB1F50(&qword_1016387D0, type metadata accessor for FileAttributeKey);
      Class v61 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      URL.path.getter();
      NSString v62 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v91[0] = 0;
      LODWORD(v53) = [v60 setAttributes:v61 ofItemAtPath:v62 error:v91];

      if (v53)
      {
        id v63 = v91[0];
        id v64 = v85;
        URL.setResourceValues(_:)();
        static os_log_type_t.default.getter();
        long long v79 = (char *)qword_10170EFB8;
        uint64_t v66 = swift_allocObject();
        *(_OWORD *)(v66 + 16) = v84;
        uint64_t v67 = v73;
        sub_100DB2E50(v73, v76, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
        Class v68 = v72[0];
        uint64_t v69 = String.init<A>(describing:)();
        *(void *)(v66 + 56) = &type metadata for String;
        *(void *)(v66 + 64) = v55;
        *(void *)(v66 + 32) = v69;
        *(void *)(v66 + 40) = v70;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        v91[3] = v68;
        v91[4] = (id)sub_100DB1F50(&qword_10165C6F8, (void (*)(uint64_t))type metadata accessor for BeaconEstimatedLocation);
        uint64_t v71 = sub_10001D958((uint64_t *)v91);
        sub_100DB2E50(v67, (uint64_t)v71, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
        PassthroughSubject.send(_:)();
        sub_10001CFB8(v74, v75);

        (*(void (**)(char *, uint64_t))(v82 + 8))(v64, v83);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v91);
      }
      else
      {
        id v65 = v91[0];
        _convertNSErrorToError(_:)();

        swift_willThrow();
        sub_10001CFB8(v74, v75);

        (*(void (**)(char *, uint64_t))(v82 + 8))(v85, v83);
      }
      ((void (*)(char *, uint64_t))v78)(v54, v88);
    }
  }
}

void sub_100D482DC(uint64_t a1, uint64_t a2)
{
  uint64_t v83 = a1;
  uint64_t v3 = type metadata accessor for SecureLocationsCachedSharingKey(0);
  __chkstk_darwin(v3);
  uint64_t v72 = (uint64_t)&v66 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v78 = type metadata accessor for URLResourceValues();
  uint64_t v77 = *(void *)(v78 - 8);
  __chkstk_darwin(v78);
  long long v81 = (char *)&v66 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v80 = type metadata accessor for UUID();
  uint64_t v75 = *(void *)(v80 - 8);
  __chkstk_darwin(v80);
  long long v79 = (char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = type metadata accessor for URL();
  long long v84 = *(void **)(v82 - 8);
  uint64_t v7 = __chkstk_darwin(v82);
  uint64_t v74 = (char *)&v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v76 = (char *)&v66 - v10;
  __chkstk_darwin(v9);
  unint64_t v73 = (char *)&v66 - v11;
  uint64_t v12 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v66 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v66 - v17;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v16, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v12);
  sub_100DB1F50((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  id v20 = v86;
  id v19 = v87[0];
  id v21 = *(void (**)(char *, uint64_t))(v13 + 8);
  v21(v16, v12);
  v21(v18, v12);
  if (v19 == v20)
  {
    static os_log_type_t.default.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_10009FD9C();
    swift_allocError();
    *id v22 = 0;
    swift_willThrow();
  }
  else
  {
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    sub_100DB1F50(&qword_10165A720, (void (*)(uint64_t))type metadata accessor for SecureLocationsCachedSharingKey);
    Class v24 = isa;
    uint64_t v25 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    if (v24)
    {
      swift_release();
    }
    else
    {
      uint64_t v27 = v25;
      uint64_t v28 = v26;
      swift_release();
      uint64_t v29 = sub_1010EB9E4(v27, v28, 0);
      unint64_t v31 = v30;
      uint64_t v68 = v27;
      unint64_t v69 = v28;
      uint64_t v70 = (void *)v3;
      uint64_t v71 = a2;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10001CFB8((uint64_t)v29, v31);
      sub_1009D0798();
      if (qword_101636FB0 != -1) {
        swift_once();
      }
      uint64_t v32 = v82;
      uint64_t v33 = sub_100010324(v82, (uint64_t)qword_10170EA90);
      uint64_t v34 = v84;
      uint64_t v67 = (void (*)(char *, uint64_t, uint64_t))v84[2];
      uint64_t v35 = v73;
      v67(v73, v33, v32);
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)();
      uint64_t v36 = (void (*)(char *, uint64_t))v34[1];
      v36(v35, v32);
      uint64_t v37 = v75;
      (*(void (**)(void))(v75 + 16))();
      v67(v35, v33, v32);
      UUID.uuidString.getter();
      uint64_t v38 = v74;
      URL.appendingPathComponent(_:)();
      swift_bridgeObjectRelease();
      uint64_t v39 = v76;
      URL.appendingPathExtension(_:)();
      v36(v38, v32);
      long long v84 = v34 + 1;
      uint64_t v74 = (char *)v36;
      v36(v35, v32);
      (*(void (**)(char *, void))(v37 + 8))(v79, v80);
      URLResourceValues.init()();
      URLResourceValues.isExcludedFromBackup.setter();
      URL._bridgeToObjectiveC()(v41);
      uint64_t v43 = v42;
      [(objc_class *)isa writeToURL:v42 atomically:1];

      static os_log_type_t.default.getter();
      if (qword_101637260 != -1) {
        swift_once();
      }
      long long v79 = (char *)sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v44 = swift_allocObject();
      long long v80 = xmmword_101342130;
      *(_OWORD *)(v44 + 16) = xmmword_101342130;
      sub_100DB1F50((unint64_t *)&qword_1016605A0, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v45 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v47 = v46;
      *(void *)(v44 + 56) = &type metadata for String;
      uint64_t v48 = v39;
      unint64_t v49 = sub_10000B4CC();
      *(void *)(v44 + 64) = v49;
      *(void *)(v44 + 32) = v45;
      *(void *)(v44 + 40) = v47;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      sub_10000588C(&qword_101650640);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = v80;
      *(void *)(inited + 32) = NSFileProtectionKey;
      *(void *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      uint64_t v51 = NSFileProtectionKey;
      uint64_t v52 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      unint64_t v53 = sub_10092DE24(inited);
      id v54 = [self defaultManager];
      sub_100653FB8(v53);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0);
      sub_100DB1F50(&qword_1016387D0, type metadata accessor for FileAttributeKey);
      Class v55 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      URL.path.getter();
      NSString v56 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v87[0] = 0;
      LOBYTE(v47) = [v54 setAttributes:v55 ofItemAtPath:v56 error:v87];

      if (v47)
      {
        id v57 = v87[0];
        NSString v58 = v81;
        URL.setResourceValues(_:)();
        static os_log_type_t.default.getter();
        uint64_t v75 = qword_10170EFB8;
        uint64_t v60 = swift_allocObject();
        *(_OWORD *)(v60 + 16) = v80;
        uint64_t v61 = v71;
        sub_100DB2E50(v71, v72, type metadata accessor for SecureLocationsCachedSharingKey);
        NSString v62 = v70;
        uint64_t v63 = String.init<A>(describing:)();
        *(void *)(v60 + 56) = &type metadata for String;
        *(void *)(v60 + 64) = v49;
        *(void *)(v60 + 32) = v63;
        *(void *)(v60 + 40) = v64;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        v87[3] = v62;
        v87[4] = (id)sub_100DB1F50(&qword_10165E9F8, (void (*)(uint64_t))type metadata accessor for SecureLocationsCachedSharingKey);
        id v65 = sub_10001D958((uint64_t *)v87);
        sub_100DB2E50(v61, (uint64_t)v65, type metadata accessor for SecureLocationsCachedSharingKey);
        PassthroughSubject.send(_:)();

        sub_10001CFB8(v68, v69);
        (*(void (**)(char *, uint64_t))(v77 + 8))(v58, v78);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v87);
      }
      else
      {
        id v59 = v87[0];
        _convertNSErrorToError(_:)();

        swift_willThrow();
        sub_10001CFB8(v68, v69);
        (*(void (**)(char *, uint64_t))(v77 + 8))(v81, v78);
      }
      ((void (*)(char *, uint64_t))v74)(v48, v82);
    }
  }
}

void sub_100D48F48(uint64_t a1, unint64_t a2)
{
  uint64_t v87 = a1;
  uint64_t v3 = type metadata accessor for LocationProvider();
  __chkstk_darwin(v3);
  uint64_t v77 = (uint64_t)v73 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = type metadata accessor for URLResourceValues();
  uint64_t v82 = *(void *)(v83 - 8);
  __chkstk_darwin(v83);
  uint64_t v86 = (char *)v73 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v85 = type metadata accessor for UUID();
  uint64_t v80 = *(void *)(v85 - 8);
  __chkstk_darwin(v85);
  long long v84 = (char *)v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v88 = *(void *)(v7 - 8);
  uint64_t v89 = v7;
  uint64_t v8 = __chkstk_darwin(v7);
  long long v79 = (char *)v73 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  long long v81 = (char *)v73 - v11;
  __chkstk_darwin(v10);
  uint64_t v78 = (char *)v73 - v12;
  uint64_t v13 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)v73 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  id v19 = (char *)v73 - v18;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v14 + 104))(v17, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v13);
  sub_100DB1F50((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  id v21 = v91;
  id v20 = v92[0];
  id v22 = *(void (**)(char *, uint64_t))(v14 + 8);
  v22(v17, v13);
  v22(v19, v13);
  if (v20 == v21)
  {
    static os_log_type_t.default.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_10009FD9C();
    swift_allocError();
    *long long v23 = 0;
    swift_willThrow();
  }
  else
  {
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    PropertyListEncoder.init()();
    sub_100DB1F50(&qword_10165E850, (void (*)(uint64_t))type metadata accessor for LocationProvider);
    Class v25 = isa;
    uint64_t v26 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    if (v25)
    {
      swift_release();
    }
    else
    {
      uint64_t v28 = v26;
      uint64_t v29 = v27;
      swift_release();
      unint64_t v30 = sub_1010EB9E4(v28, v29, 0);
      unint64_t v32 = v31;
      uint64_t v75 = v28;
      unint64_t v76 = v29;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_10001CFB8((uint64_t)v30, v32);
      unint64_t v74 = sub_1009D0798();
      v73[0] = v3;
      unint64_t v33 = a2 + *(int *)(v3 + 20);
      unint64_t v35 = a2;
      if (qword_101637638 != -1) {
        swift_once();
      }
      uint64_t v36 = v89;
      v73[2] = sub_100010324(v89, (uint64_t)qword_10170F7E8);
      v73[1] = v33;
      UUID.uuidString.getter();
      uint64_t v37 = v78;
      URL.appendingPathComponent(_:)();
      swift_bridgeObjectRelease();
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)();
      uint64_t v38 = v88 + 8;
      uint64_t v39 = *(void (**)(char *, uint64_t))(v88 + 8);
      v39(v37, v36);
      uint64_t v40 = v80;
      uint64_t v41 = *(void (**)(char *, unint64_t, void))(v80 + 16);
      unint64_t v74 = v35;
      v41(v84, v35, v85);
      UUID.uuidString.getter();
      URL.appendingPathComponent(_:)();
      swift_bridgeObjectRelease();
      UUID.uuidString.getter();
      uint64_t v44 = v79;
      URL.appendingPathComponent(_:)();
      swift_bridgeObjectRelease();
      uint64_t v45 = v81;
      URL.appendingPathExtension(_:)();
      uint64_t v46 = v89;
      v39(v44, v89);
      uint64_t v88 = v38;
      long long v79 = (char *)v39;
      v39(v37, v46);
      (*(void (**)(char *, void))(v40 + 8))(v84, v85);
      URLResourceValues.init()();
      URLResourceValues.isExcludedFromBackup.setter();
      URL._bridgeToObjectiveC()(v48);
      uint64_t v50 = v49;
      [(objc_class *)isa writeToURL:v49 atomically:1];

      static os_log_type_t.default.getter();
      if (qword_101637260 != -1) {
        swift_once();
      }
      long long v84 = (char *)sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v51 = swift_allocObject();
      long long v85 = xmmword_101342130;
      *(_OWORD *)(v51 + 16) = xmmword_101342130;
      sub_100DB1F50((unint64_t *)&qword_1016605A0, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v52 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v54 = v53;
      *(void *)(v51 + 56) = &type metadata for String;
      Class v55 = v45;
      unint64_t v56 = sub_10000B4CC();
      *(void *)(v51 + 64) = v56;
      *(void *)(v51 + 32) = v52;
      *(void *)(v51 + 40) = v54;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      sub_10000588C(&qword_101650640);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = v85;
      *(void *)(inited + 32) = NSFileProtectionKey;
      *(void *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      NSString v58 = NSFileProtectionKey;
      id v59 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      unint64_t v60 = sub_10092DE24(inited);
      id v61 = [self defaultManager];
      sub_100653FB8(v60);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0);
      sub_100DB1F50(&qword_1016387D0, type metadata accessor for FileAttributeKey);
      Class v62 = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      URL.path.getter();
      NSString v63 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v92[0] = 0;
      LOBYTE(v54) = [v61 setAttributes:v62 ofItemAtPath:v63 error:v92];

      if (v54)
      {
        id v64 = v92[0];
        id v65 = v86;
        URL.setResourceValues(_:)();
        static os_log_type_t.default.getter();
        uint64_t v80 = qword_10170EFB8;
        uint64_t v67 = swift_allocObject();
        *(_OWORD *)(v67 + 16) = v85;
        uint64_t v68 = v74;
        sub_100DB2E50(v74, v77, (uint64_t (*)(void))type metadata accessor for LocationProvider);
        unint64_t v69 = (void *)v73[0];
        uint64_t v70 = String.init<A>(describing:)();
        *(void *)(v67 + 56) = &type metadata for String;
        *(void *)(v67 + 64) = v56;
        *(void *)(v67 + 32) = v70;
        *(void *)(v67 + 40) = v71;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        v92[3] = v69;
        v92[4] = (id)sub_100DB1F50(&qword_10165E858, (void (*)(uint64_t))type metadata accessor for LocationProvider);
        uint64_t v72 = sub_10001D958((uint64_t *)v92);
        sub_100DB2E50(v68, (uint64_t)v72, (uint64_t (*)(void))type metadata accessor for LocationProvider);
        PassthroughSubject.send(_:)();

        sub_10001CFB8(v75, v76);
        (*(void (**)(char *, uint64_t))(v82 + 8))(v65, v83);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v92);
      }
      else
      {
        id v66 = v92[0];
        _convertNSErrorToError(_:)();

        swift_willThrow();
        sub_10001CFB8(v75, v76);
        (*(void (**)(char *, uint64_t))(v82 + 8))(v86, v83);
      }
      ((void (*)(char *, uint64_t))v79)(v55, v89);
    }
  }
}

uint64_t sub_100D49BE8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170ECF8);
  sub_100010324(v0, (uint64_t)qword_10170ECF8);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100D49C70()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10165E160);
  uint64_t v1 = sub_100010324(v0, (uint64_t)qword_10165E160);
  if (qword_1016370D0 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100010324(v0, (uint64_t)qword_10170ECF8);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100D49D38()
{
  uint64_t v0 = (void *)sub_101158614((uint64_t)&off_1015A5A40);
  uint64_t result = swift_arrayDestroy();
  off_10165E178 = v0;
  return result;
}

unint64_t sub_100D49D84(uint64_t a1, uint64_t a2, char a3)
{
  switch(a3)
  {
    case 1:
      strcpy((char *)v14, ".underlying(");
      BYTE5(v14[1]) = 0;
      HIWORD(v14[1]) = -5120;
      sub_100DBA97C(a1, a2, 1);
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      v7._countAndFlagsBits = String.init<A>(describing:)();
      String.append(_:)(v7);
      swift_bridgeObjectRelease();
      v8._countAndFlagsBits = 41;
      v8._object = (void *)0xE100000000000000;
      String.append(_:)(v8);
      sub_100DBA9AC(a1, a2, 1);
      return v14[0];
    case 2:
      strcpy((char *)v14, ".response(");
      BYTE3(v14[1]) = 0;
      HIDWORD(v14[1]) = -369098752;
      unint64_t v9 = 0xE800000000000000;
      uint64_t v10 = 0x737365636375732ELL;
      switch((char)a1)
      {
        case 1:
          uint64_t v10 = 0x64696C61766E692ELL;
          unint64_t v9 = 0xED00006574617453;
          break;
        case 2:
          uint64_t v12 = 0x6769666E6F43;
          goto LABEL_10;
        case 3:
          uint64_t v12 = 0x6874676E654CLL;
LABEL_10:
          unint64_t v9 = v12 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
          goto LABEL_12;
        case 4:
          unint64_t v9 = 0xED00006D61726150;
LABEL_12:
          uint64_t v10 = 0x64696C61766E692ELL;
          break;
        case 5:
          uint64_t v10 = 0x64696C61766E692ELL;
          unint64_t v9 = 0xEF646E616D6D6F43;
          break;
        default:
          break;
      }
      unint64_t v13 = v9;
      String.append(_:)(*(Swift::String *)&v10);
      swift_bridgeObjectRelease();
      uint64_t v5 = 41;
      unint64_t v6 = 0xE100000000000000;
      goto LABEL_15;
    case 3:
      unint64_t result = 0x6E776F6E6B6E752ELL;
      switch(a1)
      {
        case 1:
          unint64_t result = 0xD000000000000014;
          break;
        case 2:
          unint64_t result = 0x74756F656D69742ELL;
          break;
        case 3:
          unint64_t result = 0x4E64726F6365722ELL;
          break;
        case 4:
        case 9:
        case 15:
          unint64_t result = 0xD000000000000012;
          break;
        case 5:
          unint64_t result = 0xD000000000000010;
          break;
        case 6:
          unint64_t result = 0x6F707075736E752ELL;
          break;
        case 7:
          unint64_t result = 0x64696C61766E692ELL;
          break;
        case 8:
          unint64_t result = 0xD000000000000011;
          break;
        case 10:
          unint64_t result = 0x64696C61766E692ELL;
          break;
        case 11:
          unint64_t result = 0xD000000000000014;
          break;
        case 12:
          unint64_t result = 0xD000000000000016;
          break;
        case 13:
          unint64_t result = 0xD00000000000001BLL;
          break;
        case 14:
        case 20:
          unint64_t result = 0x676E697373696D2ELL;
          break;
        case 16:
          unint64_t result = 0xD000000000000013;
          break;
        case 17:
          unint64_t result = 0xD000000000000017;
          break;
        case 18:
          unint64_t result = 0xD000000000000013;
          break;
        case 19:
          unint64_t result = 0xD000000000000016;
          break;
        case 21:
          unint64_t result = 0x72756F59746F6E2ELL;
          break;
        case 22:
          unint64_t result = 0xD00000000000001ALL;
          break;
        default:
          return result;
      }
      return result;
    default:
      _StringGuts.grow(_:)(26);
      swift_bridgeObjectRelease();
      v14[0] = 0xD000000000000018;
      v14[1] = 0x8000000101418250;
      uint64_t v5 = a1;
      unint64_t v6 = a2;
LABEL_15:
      String.append(_:)(*(Swift::String *)&v5);
      return v14[0];
  }
}

unint64_t sub_100D4A2C0()
{
  return sub_100D49D84(*(void *)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
}

uint64_t sub_100D4A2CC(uint64_t a1)
{
  v2[8] = a1;
  v2[9] = v1;
  sub_10000588C((uint64_t *)&unk_101665590);
  uint64_t v3 = swift_task_alloc();
  v2[10] = v3;
  type metadata accessor for UUID();
  v2[11] = swift_task_alloc();
  swift_defaultActor_initialize();
  *(void *)(v1 + 112) = 0xD000000000000014;
  *(void *)(v1 + 120) = 0x800000010137D950;
  *(unsigned char *)(v1 + 152) = 0;
  *(void *)(v1 + 168) = 0;
  *(void *)(v1 + 176) = 0;
  *(unsigned char *)(v1 + 184) = 0;
  uint64_t v4 = v1 + OBJC_IVAR____TtC12searchpartyd20PencilPairingService_attachedLocalFindableAccessory;
  type metadata accessor for PencilPairingService.AttachedLocalFindableAccessory(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v5 = OBJC_IVAR____TtC12searchpartyd20PencilPairingService_peripheralStreamProvider;
  sub_10000588C(&qword_10165EB10);
  swift_allocObject();
  *(void *)(v1 + v5) = AsyncStreamProvider.init()();
  uint64_t v6 = OBJC_IVAR____TtC12searchpartyd20PencilPairingService_queue;
  type metadata accessor for WorkItemQueue();
  UUID.init()();
  *(void *)(v1 + v6) = WorkItemQueue.__allocating_init(name:identifier:)();
  uint64_t v7 = static Data.random(bytes:)();
  unint64_t v9 = v8;
  v2[12] = v7;
  v2[13] = v8;
  type metadata accessor for AccessoryPairingInfo(0);
  swift_allocObject();
  sub_1000361E0(v7, v9);
  uint64_t v10 = sub_1001C8174(v7, v9);
  v2[14] = v10;
  if (v10)
  {
    type metadata accessor for CentralManager();
    sub_10000588C((uint64_t *)&unk_101666890);
    uint64_t v11 = type metadata accessor for CentralManager.Options();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_101342130;
    static CentralManager.Options.needsRestrictedStateOperation.getter();
    v2[7] = v13;
    sub_100DB1F50((unint64_t *)&unk_1016655A0, (void (*)(uint64_t))&type metadata accessor for CentralManager.Options);
    sub_10000588C((uint64_t *)&unk_1016668A0);
    sub_100062734((unint64_t *)&unk_1016655B0, (uint64_t *)&unk_1016668A0);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(v3, 0, 1, v11);
    uint64_t v14 = (void *)swift_task_alloc();
    v2[15] = v14;
    *uint64_t v14 = v2;
    v14[1] = sub_100D4A810;
    return CentralManager.__allocating_init(options:)(v3);
  }
  else
  {
    if (qword_1016370D8 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_100010324(v15, (uint64_t)qword_10165E160);
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Missing critical information to init pairing ", v18, 2u);
      swift_slowDealloc();

      sub_10001CFB8(v7, v9);
    }
    else
    {
      sub_10001CFB8(v7, v9);
    }
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    sub_100D6BBBC(v4, type metadata accessor for PencilPairingService.AttachedLocalFindableAccessory);
    swift_release();
    swift_release();
    type metadata accessor for PencilPairingService(0);
    swift_defaultActor_destroy();
    swift_release();
    swift_deallocPartialClassInstance();
    swift_task_dealloc();
    swift_task_dealloc();
    id v19 = (uint64_t (*)(void))v2[1];
    return v19(0);
  }
}

uint64_t sub_100D4A810(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 112);
  uint64_t v5 = *(void **)(*v1 + 72);
  uint64_t v16 = *v1;
  swift_task_dealloc();
  v5[18] = a1;
  v5[20] = v4;
  type metadata accessor for AccessoryPairingValidator();
  uint64_t v6 = swift_allocObject();
  *(void *)(v3 + 128) = type metadata accessor for DeviceIdentityUtility();
  uint64_t v7 = swift_allocObject();
  swift_retain();
  swift_defaultActor_initialize();
  uint64_t v8 = v7 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certExpiryDate;
  uint64_t v9 = type metadata accessor for Date();
  *(void *)(v3 + 136) = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
  *(void *)(v3 + 144) = v11;
  *(void *)(v3 + 152) = (v10 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v11(v8, 1, 1, v9);
  *(void *)(v7 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_refKey) = 0;
  *(void *)(v7 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certs) = _swiftEmptyArrayStorage;
  *(unsigned char *)(v7 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_signingType) = 9;
  *(void *)(v6 + 16) = v7;
  *(void *)(v6 + 24) = 0;
  v5[17] = v6;
  *(_OWORD *)(v3 + 16) = 0u;
  *(_OWORD *)(v3 + 32) = 0u;
  uint64_t v12 = v3 + 16;
  uint64_t v15 = (uint64_t (*)(uint64_t))((char *)&dword_10166ED38 + dword_10166ED38);
  *(void *)(v12 + 32) = 0;
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v12 + 144) = v13;
  *uint64_t v13 = v16;
  v13[1] = sub_100D4AA78;
  return v15(v12);
}

uint64_t sub_100D4AA78(uint64_t a1)
{
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v1 + 144);
  uint64_t v4 = *(void *)(*(void *)v1 + 136);
  uint64_t v5 = *(void *)(*(void *)v1 + 72);
  uint64_t v6 = *(void *)(*(void *)v1 + 64);
  swift_task_dealloc();
  *(void *)(v5 + OBJC_IVAR____TtC12searchpartyd20PencilPairingService_locationPublisher) = a1;
  type metadata accessor for PencilLocationsFetcher();
  uint64_t v7 = swift_allocObject();
  swift_defaultActor_initialize();
  uint64_t v8 = swift_allocObject();
  swift_defaultActor_initialize();
  v3(v8 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certExpiryDate, 1, 1, v4);
  *(void *)(v8 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_refKey) = 0;
  *(void *)(v8 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certs) = _swiftEmptyArrayStorage;
  *(unsigned char *)(v8 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_signingType) = 2;
  *(void *)(v7 + 112) = v8;
  *(void *)(v5 + OBJC_IVAR____TtC12searchpartyd20PencilPairingService_locationsFetcher) = v7;
  *(void *)(v5 + 128) = v6;
  return _swift_task_switch(sub_100D4ACA8, v5, 0);
}

uint64_t sub_100D4ACA8()
{
  sub_10001CFB8(v0[12], v0[13]);
  swift_release();
  uint64_t v1 = v0[9];
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = (uint64_t (*)(uint64_t))v0[1];
  return v2(v1);
}

uint64_t sub_100D4AD2C()
{
  *(void *)(v1 + 16) = v0;
  sub_10000588C(&qword_10164DBB0);
  *(void *)(v1 + 24) = swift_task_alloc();
  return _swift_task_switch(sub_100D4ADC0, v0, 0);
}

uint64_t sub_100D4ADC0()
{
  if (qword_1016370D8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10165E160);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, " PencilPairingService: Starting up.", v4, 2u);
    swift_slowDealloc();
  }
  uint64_t v6 = v0[2];
  uint64_t v5 = v0[3];

  uint64_t v7 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56))(v5, 1, 1, v7);
  uint64_t v8 = (void *)swift_allocObject();
  void v8[2] = 0;
  v8[3] = 0;
  v8[4] = v6;
  swift_retain();
  sub_1000212B0(v5, (uint64_t)&unk_10165E9F0, (uint64_t)v8);
  swift_release();
  sub_10001DAB4(v5, &qword_10164DBB0);
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_100D4AF7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v4 + 16) = v6;
  *uint64_t v6 = v4;
  v6[1] = sub_100033F68;
  v6[435] = a4;
  return _swift_task_switch(sub_100D4B048, a4, 0);
}

uint64_t sub_100D4B028()
{
  *(void *)(v1 + 3480) = v0;
  return _swift_task_switch(sub_100D4B048, v0, 0);
}

uint64_t sub_100D4B048()
{
  uint64_t v1 = qword_1016375E8;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 3256, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 3280))
  {
    sub_10001CEB0((long long *)(v0 + 3256), v0 + 3336);
    swift_release();
    sub_10001CD44((void *)(v0 + 3336), *(void *)(v0 + 3360));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_101639288 + dword_101639288);
    os_log_type_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 3528) = v3;
    void *v3 = v0;
    v3[1] = sub_100D4B198;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100D4B198(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 3480);
  *(void *)(*(void *)v1 + 3576) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100D4B2B0, v2, 0);
}

uint64_t sub_100D4B2B0()
{
  uint64_t v1 = v0[447];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 417));
  if (v1)
  {
    if (qword_1016370D8 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    v0[453] = sub_100010324(v2, (uint64_t)qword_10165E160);
    os_log_type_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Waiting for first unlock", v5, 2u);
      swift_slowDealloc();
    }

    uint64_t v6 = (void *)swift_task_alloc();
    v0[459] = v6;
    *uint64_t v6 = v0;
    v6[1] = sub_100D4B4EC;
    return sub_100611988();
  }
  else
  {
    if (qword_1016370D8 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_100010324(v8, (uint64_t)qword_10165E160);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "First unlock service is not available. Bailing", v11, 2u);
      swift_slowDealloc();
    }

    uint64_t v12 = (uint64_t (*)(void))v0[1];
    return v12();
  }
}

uint64_t sub_100D4B4EC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 3480);
  swift_task_dealloc();
  return _swift_task_switch(sub_100D4B5FC, v1, 0);
}

uint64_t sub_100D4B5FC()
{
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Device is now unlocked", v3, 2u);
    swift_slowDealloc();
  }

  swift_asyncLet_begin();
  swift_asyncLet_begin();
  swift_asyncLet_begin();
  swift_asyncLet_begin();
  swift_asyncLet_begin();
  return _swift_asyncLet_get(v0 + 1936, v4, sub_100D4B7D4, v0 + 3296);
}

uint64_t sub_100D4B7D4(uint64_t a1, uint64_t a2)
{
  return _swift_asyncLet_get(v2 + 2576, a2, sub_100D4B7F0, v2 + 3376);
}

uint64_t sub_100D4B7F0(uint64_t a1, uint64_t a2)
{
  return _swift_asyncLet_get(v2 + 1296, a2, sub_100D4B80C, v2 + 3440);
}

uint64_t sub_100D4B80C(uint64_t a1, uint64_t a2)
{
  return _swift_asyncLet_get(v2 + 656, a2, sub_100D4B828, v2 + 3488);
}

uint64_t sub_100D4B828(uint64_t a1, uint64_t a2)
{
  return _swift_asyncLet_get(v2 + 16, a2, sub_100D4B844, v2 + 3216);
}

uint64_t sub_100D4B844(uint64_t a1, uint64_t a2)
{
  return _swift_asyncLet_finish(v2 + 16, a2, sub_100D4B860, v2 + 3584);
}

uint64_t sub_100D4B860()
{
  return _swift_task_switch(sub_100D4B87C, *(void *)(v0 + 3480), 0);
}

uint64_t sub_100D4B87C(uint64_t a1, uint64_t a2)
{
  return _swift_asyncLet_finish(v2 + 656, a2, sub_100D4B898, v2 + 3632);
}

uint64_t sub_100D4B898()
{
  return _swift_task_switch(sub_100D4B8B4, *(void *)(v0 + 3480), 0);
}

uint64_t sub_100D4B8B4(uint64_t a1, uint64_t a2)
{
  return _swift_asyncLet_finish(v2 + 1296, a2, sub_100D4B8D0, v2 + 3680);
}

uint64_t sub_100D4B8D0()
{
  return _swift_task_switch(sub_100D4B8EC, *(void *)(v0 + 3480), 0);
}

uint64_t sub_100D4B8EC(uint64_t a1, uint64_t a2)
{
  return _swift_asyncLet_finish(v2 + 2576, a2, sub_100D4B908, v2 + 3728);
}

uint64_t sub_100D4B908()
{
  return _swift_task_switch(sub_100D4B924, *(void *)(v0 + 3480), 0);
}

uint64_t sub_100D4B924(uint64_t a1, uint64_t a2)
{
  return _swift_asyncLet_finish(v2 + 1936, a2, sub_100D4B940, v2 + 3536);
}

uint64_t sub_100D4B940()
{
  return _swift_task_switch(sub_100D4B95C, *(void *)(v0 + 3480), 0);
}

uint64_t sub_100D4B95C()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100D4B9BC()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000340BC;
  return sub_100D568F0();
}

uint64_t sub_100D4BA4C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100030F18;
  return sub_100D596C0();
}

uint64_t sub_100D4BADC()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000340BC;
  return sub_100D4BB6C();
}

uint64_t sub_100D4BB6C()
{
  v1[5] = v0;
  v1[6] = *v0;
  sub_10000588C(&qword_10163D218);
  v1[7] = swift_task_alloc();
  sub_10000588C(&qword_10163D220);
  v1[8] = swift_task_alloc();
  uint64_t v2 = sub_10000588C((uint64_t *)&unk_10163D230);
  v1[9] = v2;
  v1[10] = *(void *)(v2 - 8);
  v1[11] = swift_task_alloc();
  uint64_t v3 = sub_10000588C(&qword_10163D228);
  v1[12] = v3;
  v1[13] = *(void *)(v3 - 8);
  v1[14] = swift_task_alloc();
  return _swift_task_switch(sub_100D4BD18, v0, 0);
}

uint64_t sub_100D4BD18()
{
  uint64_t v16 = v0;
  if (qword_1016370D8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 120) = sub_100010324(v1, (uint64_t)qword_10165E160);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    *(void *)(v0 + 32) = sub_1008FA0F0(0xD000000000000027, 0x8000000101418130, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v6 = *(void *)(v0 + 80);
  uint64_t v5 = *(void *)(v0 + 88);
  uint64_t v7 = *(void *)(v0 + 72);
  *(void *)(v0 + 128) = *(void *)(*(void *)(v0 + 40) + 144);
  sub_100D4E988();
  AsyncStream.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  uint64_t v8 = sub_100DB1F50(&qword_10165E588, (void (*)(uint64_t))type metadata accessor for PencilPairingService);
  int v9 = enum case for CentralManager.State.restricted(_:);
  *(_DWORD *)(v0 + 224) = enum case for CentralManager.State.poweredOn(_:);
  *(_DWORD *)(v0 + 228) = v9;
  *(void *)(v0 + 136) = v8;
  *(void *)(v0 + 144) = 0;
  uint64_t v10 = *(void *)(v0 + 40);
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v0 + 152) = v11;
  void *v11 = v0;
  v11[1] = sub_100D4BFC0;
  uint64_t v12 = *(void *)(v0 + 96);
  uint64_t v13 = *(void *)(v0 + 64);
  return AsyncStream.Iterator.next(isolation:)(v13, v10, v8, v12);
}

uint64_t sub_100D4BFC0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40);
  swift_task_dealloc();
  return _swift_task_switch(sub_100D4C0D0, v1, 0);
}

uint64_t sub_100D4C0D0()
{
  uint64_t v1 = *(void **)(v0 + 64);
  uint64_t v2 = sub_10000588C((uint64_t *)&unk_10163D240);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 104) + 8))(*(void *)(v0 + 112), *(void *)(v0 + 96));
    goto LABEL_10;
  }
  uint64_t v3 = *(void *)(v0 + 144);
  uint64_t v4 = *(void *)(v0 + 56);
  *(void *)(v0 + 160) = *v1;
  sub_10001D608((uint64_t)v1 + *(int *)(v2 + 48), v4, &qword_10163D218);
  static Task<>.checkCancellation()();
  if (v3)
  {
    uint64_t v5 = *(void *)(v0 + 56);
    (*(void (**)(void, void))(*(void *)(v0 + 104) + 8))(*(void *)(v0 + 112), *(void *)(v0 + 96));
    swift_release();
    sub_10001DAB4(v5, &qword_10163D218);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      int v9 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v8 = 138412290;
      swift_errorRetain();
      uint64_t v10 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 16) = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *int v9 = v10;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Error from subscribeToAccessoryConnectionChanges: %@", v8, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
LABEL_10:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    long long v23 = *(uint64_t (**)(void))(v0 + 8);
    return v23();
  }
  uint64_t v12 = *(unsigned int *)(v0 + 224);
  uint64_t v11 = *(unsigned int *)(v0 + 228);
  sub_10000588C((uint64_t *)&unk_1016665D0);
  uint64_t v13 = type metadata accessor for CentralManager.State();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 72);
  unint64_t v16 = (*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = swift_allocObject();
  *(void *)(v0 + 168) = v17;
  *(_OWORD *)(v17 + 16) = xmmword_101347BA0;
  unint64_t v18 = v17 + v16;
  id v19 = *(void (**)(unint64_t, uint64_t, uint64_t))(v14 + 104);
  v19(v18, v12, v13);
  v19(v18 + v15, v11, v13);
  id v20 = (void *)swift_task_alloc();
  *(void *)(v0 + 176) = v20;
  uint64_t v21 = type metadata accessor for CentralManager();
  uint64_t v22 = sub_100DB1F50(&qword_101639A90, (void (*)(uint64_t))&type metadata accessor for CentralManager);
  *id v20 = v0;
  v20[1] = sub_100D4C510;
  return CentralManagerProtocol.await(states:)(v17, v21, v22);
}

uint64_t sub_100D4C510()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 184) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 40);
  swift_bridgeObjectRelease();
  if (v0) {
    uint64_t v4 = sub_100D4C9C8;
  }
  else {
    uint64_t v4 = sub_100D4C658;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100D4C658()
{
  uint64_t v1 = v0[20];
  uint64_t v3 = v0[16];
  uint64_t v2 = v0[17];
  uint64_t v5 = v0[6];
  uint64_t v4 = v0[7];
  uint64_t v6 = v0[5];
  type metadata accessor for Transaction();
  v0[24] = static Transaction.$current.getter();
  v0[3] = v1;
  os_log_type_t v7 = (void *)swift_task_alloc();
  v0[25] = v7;
  v7[2] = v4;
  v7[3] = v3;
  v7[4] = v6;
  v7[5] = v5;
  swift_retain();
  uint64_t v8 = (void *)swift_task_alloc();
  v0[26] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_100D4C7B0;
  return TaskLocal.withValue<A>(_:operation:isolation:file:line:)(v8, v0 + 3, &unk_10165E9E0, v7, v6, v2, 0xD000000000000027, 0x8000000101417FE0);
}

uint64_t sub_100D4C7B0()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 216) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 40);
  swift_release();
  swift_release();
  swift_task_dealloc();
  if (v0) {
    uint64_t v4 = sub_100D4CBD8;
  }
  else {
    uint64_t v4 = sub_100D4C8EC;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100D4C8EC()
{
  uint64_t v1 = v0[7];
  swift_release();
  sub_10001DAB4(v1, &qword_10163D218);
  v0[18] = v0[27];
  uint64_t v2 = v0[17];
  uint64_t v3 = v0[5];
  uint64_t v4 = (void *)swift_task_alloc();
  v0[19] = v4;
  void *v4 = v0;
  v4[1] = sub_100D4BFC0;
  uint64_t v5 = v0[12];
  uint64_t v6 = v0[8];
  return AsyncStream.Iterator.next(isolation:)(v6, v3, v2, v5);
}

uint64_t sub_100D4C9C8()
{
  uint64_t v2 = v0[13];
  uint64_t v1 = v0[14];
  uint64_t v3 = v0[12];
  uint64_t v4 = v0[7];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_10001DAB4(v4, &qword_10163D218);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    os_log_type_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = (void *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v7 = 138412290;
    swift_errorRetain();
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
    v0[2] = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v8 = v9;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Error from subscribeToAccessoryConnectionChanges: %@", v7, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_100D4CBD8()
{
  uint64_t v2 = v0[13];
  uint64_t v1 = v0[14];
  uint64_t v3 = v0[12];
  uint64_t v4 = v0[7];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  sub_10001DAB4(v4, &qword_10163D218);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    os_log_type_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = (void *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v7 = 138412290;
    swift_errorRetain();
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
    v0[2] = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v8 = v9;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Error from subscribeToAccessoryConnectionChanges: %@", v7, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_100D4CDF4()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000340BC;
  return sub_100D4CE84();
}

uint64_t sub_100D4CE84()
{
  v1[41] = v0;
  uint64_t v2 = type metadata accessor for UUID();
  v1[42] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[43] = v3;
  v1[44] = *(void *)(v3 + 64);
  v1[45] = swift_task_alloc();
  v1[46] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for CloudStorageStore.State(0);
  v1[47] = v4;
  v1[48] = *(void *)(v4 - 8);
  v1[49] = swift_task_alloc();
  v1[50] = swift_task_alloc();
  v1[51] = swift_task_alloc();
  v1[52] = swift_task_alloc();
  v1[53] = swift_task_alloc();
  v1[54] = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_10164E8B0);
  v1[55] = swift_task_alloc();
  uint64_t v5 = sub_10000588C(&qword_10164E8C8);
  v1[56] = v5;
  v1[57] = *(void *)(v5 - 8);
  v1[58] = swift_task_alloc();
  uint64_t v6 = sub_10000588C(&qword_101656E20);
  v1[59] = v6;
  v1[60] = *(void *)(v6 - 8);
  v1[61] = swift_task_alloc();
  uint64_t v7 = sub_10000588C(&qword_10164E8C0);
  v1[62] = v7;
  v1[63] = *(void *)(v7 - 8);
  v1[64] = swift_task_alloc();
  return _swift_task_switch(sub_100D4D148, v0, 0);
}

uint64_t sub_100D4D148()
{
  if (qword_1016370D8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 520) = sub_100010324(v1, (uint64_t)qword_10165E160);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Monitoring CloudKit state stream", v4, 2u);
    swift_slowDealloc();
  }

  uint64_t v5 = qword_1016375E8;
  swift_retain();
  if (v5 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v8 = (uint64_t (__cdecl *)())((char *)&dword_101639150 + dword_101639150);
    uint64_t v7 = (void *)swift_task_alloc();
    *(void *)(v0 + 528) = v7;
    void *v7 = v0;
    v7[1] = sub_100D4D35C;
    return v8();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100D4D35C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 328);
  *(void *)(*(void *)v1 + 536) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100D4D474, v2, 0);
}

uint64_t sub_100D4D474()
{
  uint64_t v12 = v0;
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (v0[67])
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v2 = v0[67];
    return _swift_task_switch(sub_100D4D7DC, v2, 0);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_10001CEC8();
    swift_allocError();
    void *v3 = 0xD000000000000013;
    v3[1] = 0x80000001014033F0;
    swift_willThrow();
    swift_errorRetain();
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = swift_slowAlloc();
      uint64_t v7 = (void *)swift_slowAlloc();
      uint64_t v11 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136446466;
      v0[39] = sub_1008FA0F0(0xD000000000000016, 0x8000000101418110, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v6 + 12) = 2114;
      swift_errorRetain();
      uint64_t v8 = _swift_stdlib_bridgeErrorToNSError();
      v0[37] = v8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v7 = v8;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s error %{public}@", (uint8_t *)v6, 0x16u);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
}

uint64_t sub_100D4D7DC()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 536) + 128);
  *(void *)(v0 + 544) = v1;
  return _swift_task_switch(sub_100D4D800, v1, 0);
}

uint64_t sub_100D4D800()
{
  uint64_t v2 = v0[60];
  uint64_t v1 = v0[61];
  uint64_t v3 = v0[59];
  uint64_t v4 = v0[41];
  swift_allocObject();
  swift_weakInit();
  (*(void (**)(uint64_t, void, uint64_t))(v2 + 104))(v1, enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v3);
  AsyncStream.init(_:bufferingPolicy:_:)();
  swift_release();
  return _swift_task_switch(sub_100D4D90C, v4, 0);
}

uint64_t sub_100D4D90C()
{
  AsyncStream.makeAsyncIterator()();
  uint64_t v1 = sub_100DB1F50(&qword_10165E588, (void (*)(uint64_t))type metadata accessor for PencilPairingService);
  v0[69] = v1;
  uint64_t v2 = v0[41];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[70] = v3;
  void *v3 = v0;
  v3[1] = sub_100D4DA08;
  uint64_t v4 = v0[55];
  uint64_t v5 = v0[56];
  return AsyncStream.Iterator.next(isolation:)(v4, v2, v1, v5);
}

uint64_t sub_100D4DA08()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 328);
  swift_task_dealloc();
  return _swift_task_switch(sub_100D4DB18, v1, 0);
}

uint64_t sub_100D4DB18()
{
  uint64_t v1 = *(void *)(v0 + 440);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)(v0 + 384) + 48))(v1, 1, *(void *)(v0 + 376)) == 1)
  {
    uint64_t v3 = *(void *)(v0 + 504);
    uint64_t v2 = *(void *)(v0 + 512);
    uint64_t v4 = *(void *)(v0 + 496);
    uint64_t v6 = *(void *)(v0 + 456);
    uint64_t v5 = *(void *)(v0 + 464);
    uint64_t v7 = *(void *)(v0 + 448);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
    return v8();
  }
  uint64_t v11 = *(void *)(v0 + 424);
  uint64_t v10 = *(void *)(v0 + 432);
  sub_100DB2DE8(v1, v10, type metadata accessor for CloudStorageStore.State);
  sub_100DB2E50(v10, v11, type metadata accessor for CloudStorageStore.State);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  BOOL v14 = os_log_type_enabled(v12, v13);
  uint64_t v15 = *(void *)(v0 + 424);
  if (v14)
  {
    unint64_t v16 = (uint64_t *)(v0 + 320);
    uint64_t v17 = *(void *)(v0 + 416);
    uint64_t v18 = swift_slowAlloc();
    *(void *)(v0 + 320) = swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 136446210;
    sub_100DB2E50(v15, v17, type metadata accessor for CloudStorageStore.State);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v20 = *(void *)(v0 + 368);
        uint64_t v22 = *(void *)(v0 + 336);
        uint64_t v21 = *(void *)(v0 + 344);
        (*(void (**)(uint64_t, void, uint64_t))(v21 + 32))(v20, *(void *)(v0 + 416), v22);
        *(void *)(v0 + 232) = 0;
        *(void *)(v0 + 240) = 0xE000000000000000;
        _StringGuts.grow(_:)(25);
        swift_bridgeObjectRelease();
        *(void *)(v0 + 248) = 0xD00000000000002ELL;
        *(void *)(v0 + 256) = 0x8000000101416A30;
        sub_100DB1F50((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        v23._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v23);
        swift_bridgeObjectRelease();
        uint64_t v25 = *(void *)(v0 + 248);
        unint64_t v24 = *(void *)(v0 + 256);
        (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
        unint64_t v16 = (uint64_t *)(v0 + 320);
      }
      else
      {
        uint64_t v25 = 0x6E776F6E6B6E752ELL;
        unint64_t v24 = 0xE800000000000000;
      }
    }
    else
    {
      sub_10001CEB0(*(long long **)(v0 + 416), v0 + 96);
      *(void *)(v0 + 280) = 0;
      *(void *)(v0 + 288) = 0xE000000000000000;
      v26._countAndFlagsBits = 0x65696669646F6D2ELL;
      v26._object = (void *)0xEA00000000002864;
      String.append(_:)(v26);
      sub_10000588C(&qword_10164E8D0);
      _print_unlocked<A, B>(_:_:)();
      v27._countAndFlagsBits = 41;
      v27._object = (void *)0xE100000000000000;
      String.append(_:)(v27);
      uint64_t v25 = *(void *)(v0 + 280);
      unint64_t v24 = *(void *)(v0 + 288);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 96);
    }
    uint64_t v28 = *(void *)(v0 + 424);
    *(void *)(v18 + 4) = sub_1008FA0F0(v25, v24, v16);
    swift_bridgeObjectRelease();
    sub_100D6BBBC(v28, type metadata accessor for CloudStorageStore.State);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "cloudKitAccountStateStream event: %{public}s", (uint8_t *)v18, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100D6BBBC(*(void *)(v0 + 424), type metadata accessor for CloudStorageStore.State);
  }

  sub_100DB2E50(*(void *)(v0 + 432), *(void *)(v0 + 408), type metadata accessor for CloudStorageStore.State);
  int v29 = swift_getEnumCaseMultiPayload();
  if (v29)
  {
    if (v29 == 1)
    {
      unint64_t v30 = *(void *)(v0 + 360);
      uint64_t v31 = *(void *)(v0 + 368);
      uint64_t v32 = *(void *)(v0 + 344);
      uint64_t v34 = *(void *)(v0 + 328);
      uint64_t v33 = *(void *)(v0 + 336);
      unint64_t v35 = *(void (**)(unint64_t, uint64_t, uint64_t))(v32 + 32);
      v35(v30, *(void *)(v0 + 408), v33);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v32 + 16))(v31, v30, v33);
      unint64_t v36 = (*(unsigned __int8 *)(v32 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80);
      uint64_t v37 = swift_allocObject();
      *(void *)(v0 + 568) = v37;
      *(void *)(v37 + 16) = v34;
      v35(v37 + v36, v31, v33);
      swift_retain();
      uint64_t v38 = (void *)swift_task_alloc();
      *(void *)(v0 + 576) = v38;
      *uint64_t v38 = v0;
      v38[1] = sub_100D4E4CC;
      return withTimeout<A>(_:block:)(v38, 0x40AAD21B3B700000, 3, &unk_10165E9C8, v37, (char *)&type metadata for () + 8);
    }
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(*(void *)(v0 + 408));
  }
  sub_100DB2E50(*(void *)(v0 + 432), *(void *)(v0 + 400), type metadata accessor for CloudStorageStore.State);
  uint64_t v39 = Logger.logObject.getter();
  os_log_type_t v40 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v39, v40))
  {
    uint64_t v41 = (uint64_t *)(v0 + 304);
    uint64_t v43 = *(void *)(v0 + 392);
    uint64_t v42 = *(void *)(v0 + 400);
    uint64_t v44 = swift_slowAlloc();
    *(void *)(v0 + 304) = swift_slowAlloc();
    *(_DWORD *)uint64_t v44 = 136315138;
    sub_100DB2E50(v42, v43, type metadata accessor for CloudStorageStore.State);
    int v45 = swift_getEnumCaseMultiPayload();
    if (v45)
    {
      if (v45 == 1)
      {
        uint64_t v64 = *(void *)(v0 + 368);
        uint64_t v47 = *(void *)(v0 + 336);
        uint64_t v46 = *(void *)(v0 + 344);
        (*(void (**)(uint64_t, void, uint64_t))(v46 + 32))(v64, *(void *)(v0 + 392), v47);
        *(void *)(v0 + 200) = 0;
        *(void *)(v0 + 208) = 0xE000000000000000;
        _StringGuts.grow(_:)(25);
        swift_bridgeObjectRelease();
        *(void *)(v0 + 216) = 0xD00000000000002ELL;
        *(void *)(v0 + 224) = 0x8000000101416A30;
        sub_100DB1F50((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        v48._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v48);
        swift_bridgeObjectRelease();
        uint64_t v49 = *(void *)(v0 + 216);
        unint64_t v50 = *(void *)(v0 + 224);
        uint64_t v51 = v47;
        uint64_t v41 = (uint64_t *)(v0 + 304);
        (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v64, v51);
      }
      else
      {
        uint64_t v49 = 0x6E776F6E6B6E752ELL;
        unint64_t v50 = 0xE800000000000000;
      }
    }
    else
    {
      sub_10001CEB0(*(long long **)(v0 + 392), v0 + 136);
      *(void *)(v0 + 264) = 0;
      *(void *)(v0 + 272) = 0xE000000000000000;
      v55._countAndFlagsBits = 0x65696669646F6D2ELL;
      v55._object = (void *)0xEA00000000002864;
      String.append(_:)(v55);
      sub_10000588C(&qword_10164E8D0);
      _print_unlocked<A, B>(_:_:)();
      v56._countAndFlagsBits = 41;
      v56._object = (void *)0xE100000000000000;
      String.append(_:)(v56);
      uint64_t v49 = *(void *)(v0 + 264);
      unint64_t v50 = *(void *)(v0 + 272);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 136);
    }
    uint64_t v57 = *(void *)(v0 + 432);
    uint64_t v58 = *(void *)(v0 + 400);
    *(void *)(v44 + 4) = sub_1008FA0F0(v49, v50, v41);
    swift_bridgeObjectRelease();
    sub_100D6BBBC(v58, type metadata accessor for CloudStorageStore.State);
    _os_log_impl((void *)&_mh_execute_header, v39, v40, "Ignoring %s", (uint8_t *)v44, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v54 = v57;
  }
  else
  {
    uint64_t v52 = *(void *)(v0 + 432);
    uint64_t v53 = *(void *)(v0 + 400);

    sub_100D6BBBC(v53, type metadata accessor for CloudStorageStore.State);
    uint64_t v54 = v52;
  }
  sub_100D6BBBC(v54, type metadata accessor for CloudStorageStore.State);
  uint64_t v59 = *(void *)(v0 + 552);
  uint64_t v60 = *(void *)(v0 + 328);
  id v61 = (void *)swift_task_alloc();
  *(void *)(v0 + 560) = v61;
  *id v61 = v0;
  v61[1] = sub_100D4DA08;
  uint64_t v62 = *(void *)(v0 + 440);
  uint64_t v63 = *(void *)(v0 + 448);
  return AsyncStream.Iterator.next(isolation:)(v62, v60, v59, v63);
}

uint64_t sub_100D4E4CC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 584) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 328);
    uint64_t v4 = sub_100D4E6E0;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 328);
    swift_release();
    uint64_t v4 = sub_100D4E5F4;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100D4E5F4()
{
  uint64_t v1 = v0[54];
  (*(void (**)(void, void))(v0[43] + 8))(v0[45], v0[42]);
  sub_100D6BBBC(v1, type metadata accessor for CloudStorageStore.State);
  uint64_t v2 = v0[69];
  uint64_t v3 = v0[41];
  uint64_t v4 = (void *)swift_task_alloc();
  v0[70] = v4;
  void *v4 = v0;
  v4[1] = sub_100D4DA08;
  uint64_t v5 = v0[55];
  uint64_t v6 = v0[56];
  return AsyncStream.Iterator.next(isolation:)(v5, v3, v2, v6);
}

uint64_t sub_100D4E6E0()
{
  swift_release();
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138543362;
    swift_errorRetain();
    uint64_t v5 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v3 + 4) = v5;
    void *v4 = v5;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "bluetoothUnpair failed: %{public}@", (uint8_t *)v3, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v6 = v0[54];
  uint64_t v7 = v0[45];
  uint64_t v8 = v0[42];
  uint64_t v9 = v0[43];
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  sub_100D6BBBC(v6, type metadata accessor for CloudStorageStore.State);
  uint64_t v10 = v0[69];
  uint64_t v11 = v0[41];
  uint64_t v12 = (void *)swift_task_alloc();
  v0[70] = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_100D4DA08;
  uint64_t v13 = v0[55];
  uint64_t v14 = v0[56];
  return AsyncStream.Iterator.next(isolation:)(v13, v11, v10, v14);
}

uint64_t sub_100D4E8F8()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000340BC;
  return sub_100D4EDDC();
}

uint64_t sub_100D4E988()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000588C(&qword_10163D210);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for PencilPairingService.AttachedLocalFindableAccessory(0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = v1 + OBJC_IVAR____TtC12searchpartyd20PencilPairingService_attachedLocalFindableAccessory;
  swift_beginAccess();
  sub_100DB2E50(v9, (uint64_t)v8, type metadata accessor for PencilPairingService.AttachedLocalFindableAccessory);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v10 = sub_10000588C(&qword_10165E4C0);
      (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, &v8[*(int *)(v10 + 48)], v2);
      sub_10000588C(&qword_10165E960);
      uint64_t v11 = *(void *)(sub_10000588C(&qword_10163D218) - 8);
      unint64_t v12 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
      uint64_t v13 = swift_allocObject();
      *(_OWORD *)(v13 + 16) = xmmword_101342130;
      (*(void (**)(unint64_t, char *, uint64_t))(v3 + 16))(v13 + v12, v5, v2);
      type metadata accessor for PencilPairingService.PeripheralDiscovery(0);
      swift_storeEnumTagMultiPayload();
      swift_storeEnumTagMultiPayload();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      uint64_t v14 = type metadata accessor for UUID();
      (*(void (**)(char *, uint64_t))(*(void *)(v14 - 8) + 8))(v8, v14);
      break;
    case 2u:
      sub_10000588C(&qword_10165E960);
      uint64_t v15 = *(void *)(sub_10000588C(&qword_10163D218) - 8);
      unint64_t v16 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
      uint64_t v17 = swift_allocObject();
      *(_OWORD *)(v17 + 16) = xmmword_101342130;
      uint64_t v18 = (void *)(v17 + v16);
      type metadata accessor for SPPairingSessionError(0);
      v20[1] = 16;
      sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
      sub_100DB1F50(&qword_101638770, type metadata accessor for SPPairingSessionError);
      _BridgedStoredNSError.init(_:userInfo:)();
      *uint64_t v18 = v20[2];
      swift_storeEnumTagMultiPayload();
      goto LABEL_4;
    case 3u:
      break;
    default:
LABEL_4:
      sub_100D6BBBC((uint64_t)v8, type metadata accessor for PencilPairingService.AttachedLocalFindableAccessory);
      break;
  }
  AsyncStreamProvider.stream(initialEvents:)();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100D4EDDC()
{
  v1[58] = v0;
  sub_10000588C(&qword_10163CBA0);
  v1[59] = swift_task_alloc();
  uint64_t v2 = sub_10000588C((uint64_t *)&unk_10164E870);
  v1[60] = v2;
  v1[61] = *(void *)(v2 - 8);
  v1[62] = swift_task_alloc();
  v1[63] = type metadata accessor for BeaconIdentifier();
  v1[64] = swift_task_alloc();
  sub_10000588C(&qword_10163CF20);
  v1[65] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
  v1[66] = v3;
  v1[67] = *(void *)(v3 - 8);
  v1[68] = swift_task_alloc();
  sub_10000588C(&qword_10163B9F0);
  v1[69] = swift_task_alloc();
  sub_10000588C(&qword_101638CF0);
  v1[70] = swift_task_alloc();
  v1[71] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UUID();
  unsigned char v1[72] = v4;
  v1[73] = *(void *)(v4 - 8);
  v1[74] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for DeviceEvent(0);
  v1[75] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v1[76] = v6;
  v1[77] = *(void *)(v6 + 64);
  v1[78] = swift_task_alloc();
  v1[79] = swift_task_alloc();
  v1[80] = swift_task_alloc();
  v1[81] = swift_task_alloc();
  v1[82] = swift_task_alloc();
  v1[83] = swift_task_alloc();
  v1[84] = swift_task_alloc();
  sub_10000588C(&qword_10163D030);
  v1[85] = swift_task_alloc();
  uint64_t v7 = sub_10000588C(&qword_10164E940);
  v1[86] = v7;
  v1[87] = *(void *)(v7 - 8);
  v1[88] = swift_task_alloc();
  uint64_t v8 = sub_10000588C(&qword_10164E948);
  v1[89] = v8;
  v1[90] = *(void *)(v8 - 8);
  v1[91] = swift_task_alloc();
  uint64_t v9 = sub_10000588C(&qword_10164E950);
  v1[92] = v9;
  v1[93] = *(void *)(v9 - 8);
  v1[94] = swift_task_alloc();
  return _swift_task_switch(sub_100D4F258, v0, 0);
}

uint64_t sub_100D4F258()
{
  uint64_t v9 = v0;
  if (qword_1016370D8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 760) = sub_100010324(v1, (uint64_t)qword_10165E160);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    *(void *)(v0 + 456) = sub_1008FA0F0(0xD000000000000015, 0x80000001014180F0, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 96, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 120))
  {
    sub_10001CEB0((long long *)(v0 + 96), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v7 = (uint64_t (__cdecl *)())((char *)&dword_101639138 + dword_101639138);
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v0 + 768) = v6;
    *uint64_t v6 = v0;
    v6[1] = sub_100D4F4F0;
    return v7();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100D4F4F0(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 464);
  *(void *)(*(void *)v1 + 776) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100D4F608, v2, 0);
}

uint64_t sub_100D4F608()
{
  uint64_t v1 = v0[97];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 2));
  if (v1)
  {
    return _swift_task_switch(sub_100D4F950, 0, 0);
  }
  else
  {
    sub_1004AF24C();
    swift_allocError();
    *(_OWORD *)uint64_t v2 = xmmword_10137D880;
    *(unsigned char *)(v2 + 16) = 3;
    swift_willThrow();
    swift_errorRetain();
    swift_errorRetain();
    os_log_type_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      uint64_t v6 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 138543362;
      swift_errorRetain();
      uint64_t v7 = _swift_stdlib_bridgeErrorToNSError();
      v0[56] = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v6 = v7;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to register for device events: %{public}@.", v5, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = (uint64_t (*)(void))v0[1];
    return v8();
  }
}

uint64_t sub_100D4F950()
{
  uint64_t v1 = v0[58];
  (*(void (**)(void, void, void))(v0[87] + 104))(v0[88], enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:), v0[86]);
  AsyncStream.init(_:bufferingPolicy:_:)();
  swift_release();
  return _swift_task_switch(sub_100D4FA30, v1, 0);
}

uint64_t sub_100D4FA30()
{
  uint64_t v1 = v0[91];
  uint64_t v2 = v0[90];
  uint64_t v3 = v0[89];
  AsyncStream.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = sub_100DB1F50(&qword_10165E588, (void (*)(uint64_t))type metadata accessor for PencilPairingService);
  v0[98] = v4;
  uint64_t v5 = v0[58];
  uint64_t v6 = (void *)swift_task_alloc();
  v0[99] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_100D4FB50;
  uint64_t v7 = v0[92];
  uint64_t v8 = v0[85];
  return AsyncStream.Iterator.next(isolation:)(v8, v5, v4, v7);
}