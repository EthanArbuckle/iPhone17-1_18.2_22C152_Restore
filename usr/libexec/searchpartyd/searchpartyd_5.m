uint64_t sub_1003845DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v17;

  v8 = type metadata accessor for OwnedBeaconGroup(0);
  v9 = *(void *)(v8 - 8);
  v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8 - 8);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1003B6E14(a2, (uint64_t)v11, type metadata accessor for OwnedBeaconGroup);
  v12 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  v13 = (v10 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  v14 = swift_allocObject();
  sub_1003B6008((uint64_t)v11, v14 + v12, type metadata accessor for OwnedBeaconGroup);
  *(void *)(v14 + v13) = a1;
  v15 = (void *)(v14 + ((v13 + 15) & 0xFFFFFFFFFFFFFFF8));
  *v15 = a3;
  v15[1] = a4;
  swift_retain();
  swift_retain();
  sub_100382C58(a2, 0, (uint64_t (*)(void))sub_1003B3680, v14);
  return swift_release();
}

void sub_10038475C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *), uint64_t a5)
{
  uint64_t v10 = type metadata accessor for OwnedBeaconGroup(0);
  __chkstk_darwin(v10);
  v12 = (char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    swift_errorRetain();
    if (qword_101637310 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100010324(v13, (uint64_t)qword_10170F068);
    swift_errorRetain();
    swift_errorRetain();
    v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      v16 = (uint8_t *)swift_slowAlloc();
      uint64_t v17 = swift_slowAlloc();
      uint64_t v31 = a1;
      v32 = (void *)v17;
      *(_DWORD *)v16 = 136446210;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v18 = String.init<A>(describing:)();
      uint64_t v31 = sub_1008FA0F0(v18, v19, (uint64_t *)&v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Failed to remove pairing lock due to %{public}s", v16, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    type metadata accessor for UnpairError(0);
    uint64_t v31 = 4;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100394110(&qword_101638630, type metadata accessor for UnpairError);
    _BridgedStoredNSError.init(_:userInfo:)();
    v27 = v32;
    a4(v32);
    swift_errorRelease();
  }
  else
  {
    uint64_t v30 = a5;
    if (qword_101637310 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100010324(v20, (uint64_t)qword_10170F068);
    sub_1003B6E14(a2, (uint64_t)v12, type metadata accessor for OwnedBeaconGroup);
    v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc();
      uint64_t v24 = swift_slowAlloc();
      v28[1] = a3;
      *(_DWORD *)uint64_t v23 = 141558275;
      uint64_t v31 = 1752392040;
      v32 = (void *)v24;
      v29 = a4;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v23 + 12) = 2081;
      type metadata accessor for UUID();
      sub_100394110((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v31 = sub_1008FA0F0(v25, v26, (uint64_t *)&v32);
      a4 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1003B61EC((uint64_t)v12, type metadata accessor for OwnedBeaconGroup);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Successfully removed pairing lock for group %{private,mask.hash}s", (uint8_t *)v23, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1003B61EC((uint64_t)v12, type metadata accessor for OwnedBeaconGroup);
    }

    sub_100384C58(a2, 1, (void (*)(void))a4, v30);
  }
}

uint64_t sub_100384C58(uint64_t a1, int a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v52 = *(void *)(v10 - 8);
  __chkstk_darwin(v10 - 8);
  uint64_t v53 = v11;
  uint64_t v54 = (uint64_t)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000588C(&qword_101642800);
  uint64_t v44 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000588C(&qword_101642808);
  uint64_t v45 = *(void *)(v15 - 8);
  uint64_t v46 = v15;
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v40 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_10000588C(&qword_101642810);
  uint64_t v47 = *(void *)(v18 - 8);
  uint64_t v48 = v18;
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v40 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_10000588C(&qword_101642818);
  uint64_t v50 = *(void *)(v21 - 8);
  uint64_t v51 = v21;
  __chkstk_darwin(v21);
  v49 = (char *)&v40 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v57 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v55 = a1;
  uint64_t v23 = sub_1004D1434();
  swift_retain();
  sub_1003A6558(v23, v5, &v57, a2);
  swift_bridgeObjectRelease();
  swift_release();
  unint64_t v24 = v57;
  if (v57 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v39 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v39) {
      goto LABEL_3;
    }
  }
  else if (*(void *)((v57 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_3:
    uint64_t v25 = swift_allocObject();
    uint64_t v43 = v25;
    *(void *)(v25 + 16) = 0;
    unint64_t v26 = (uint64_t *)(v25 + 16);
    unint64_t v56 = v24;
    swift_bridgeObjectRetain();
    sub_10000588C(&qword_101642820);
    v42 = a3;
    sub_10000588C(&qword_101642828);
    uint64_t v41 = a4;
    sub_100062734(&qword_101642830, &qword_101642820);
    sub_100062734(&qword_101642838, &qword_101642828);
    Publishers.MergeMany.init<A>(_:)();
    sub_100062734(&qword_101642840, &qword_101642800);
    Publisher.collect()();
    (*(void (**)(char *, uint64_t))(v44 + 8))(v14, v12);
    sub_10000588C(&qword_101642848);
    sub_100062734(&qword_101642850, &qword_101642808);
    uint64_t v27 = v46;
    Publisher.map<A>(_:)();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v17, v27);
    sub_10000588C(&qword_101642858);
    sub_100062734(&qword_101642860, &qword_101642810);
    sub_100062734(&qword_101642868, &qword_101642858);
    uint64_t v28 = v48;
    v29 = v49;
    Publisher.catch<A>(_:)();
    (*(void (**)(char *, uint64_t))(v47 + 8))(v20, v28);
    uint64_t v30 = v54;
    sub_1003B6E14(v55, v54, type metadata accessor for OwnedBeaconGroup);
    unint64_t v31 = (*(unsigned __int8 *)(v52 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80);
    unint64_t v32 = (v53 + v31 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v33 = swift_allocObject();
    sub_1003B6008(v30, v33 + v31, type metadata accessor for OwnedBeaconGroup);
    v34 = (void *)(v33 + v32);
    uint64_t v35 = v41;
    void *v34 = v42;
    v34[1] = v35;
    *(void *)(v33 + ((v32 + 23) & 0xFFFFFFFFFFFFFFF8)) = v43;
    sub_100062734(&qword_101642870, &qword_101642818);
    swift_retain();
    swift_retain();
    uint64_t v36 = v51;
    uint64_t v37 = Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v50 + 8))(v29, v36);
    swift_beginAccess();
    *unint64_t v26 = v37;
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  if (a2) {
    sub_10038E3B8(v55, a3, a4);
  }
  else {
    a3(0);
  }

  return swift_bridgeObjectRelease();
}

void sub_1003853B0(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4, char a5, void (*a6)(void))
{
  uint64_t v12 = type metadata accessor for OwnedBeaconGroup(0);
  __chkstk_darwin(v12);
  v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    swift_errorRetain();
    if (qword_101637310 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_100010324(v15, (uint64_t)qword_10170F068);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      unint64_t v32 = a6;
      uint64_t v18 = swift_slowAlloc();
      uint64_t v34 = a4;
      uint64_t v19 = (uint8_t *)v18;
      uint64_t v20 = swift_slowAlloc();
      uint64_t v33 = a3;
      uint64_t v35 = a1;
      uint64_t v36 = (void *)v20;
      *(_DWORD *)uint64_t v19 = 136446210;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v21 = String.init<A>(describing:)();
      uint64_t v35 = sub_1008FA0F0(v21, v22, (uint64_t *)&v36);
      a6 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Failed to send unpair command due to %{public}s", v19, 0xCu);
      swift_arrayDestroy();
      a3 = v33;
      swift_slowDealloc();
      swift_slowDealloc();

      if ((a5 & 1) == 0)
      {
LABEL_6:
        type metadata accessor for UnpairError(0);
        uint64_t v35 = 5;
        sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
        sub_100394110(&qword_101638630, type metadata accessor for UnpairError);
        _BridgedStoredNSError.init(_:userInfo:)();
        uint64_t v23 = v36;
        a6(v36);
        swift_errorRelease();

        return;
      }
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();

      if ((a5 & 1) == 0) {
        goto LABEL_6;
      }
    }
    a3();
    swift_errorRelease();
  }
  else
  {
    if (qword_101637310 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100010324(v24, (uint64_t)qword_10170F068);
    sub_1003B6E14(a2, (uint64_t)v14, type metadata accessor for OwnedBeaconGroup);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = swift_slowAlloc();
      uint64_t v28 = swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 141558275;
      uint64_t v35 = 1752392040;
      uint64_t v36 = (void *)v28;
      uint64_t v34 = a4;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v27 + 12) = 2081;
      type metadata accessor for UUID();
      sub_100394110((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v35 = sub_1008FA0F0(v29, v30, (uint64_t *)&v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1003B61EC((uint64_t)v14, type metadata accessor for OwnedBeaconGroup);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Successfully sent unpair command for group %{private,mask.hash}s", (uint8_t *)v27, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1003B61EC((uint64_t)v14, type metadata accessor for OwnedBeaconGroup);
    }

    a3();
  }
}

uint64_t sub_1003858E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v59 = a2;
  uint64_t v60 = a3;
  uint64_t v67 = sub_10000588C(&qword_101642748);
  unint64_t v4 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  v65 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = sub_10000588C(&qword_101642750);
  v64 = *(void **)(v66 - 8);
  __chkstk_darwin(v66);
  v7 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_10163B9F0);
  uint64_t v56 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v57 = v10;
  uint64_t v58 = (uint64_t)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v61 = (uint64_t)&v51 - v11;
  uint64_t v12 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v53 = *(void *)(v12 - 8);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v54 = v14;
  uint64_t v55 = (uint64_t)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v51 - v15;
  if (qword_101637310 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_100010324(v17, (uint64_t)qword_10170F068);
  sub_1003B6E14(a1, (uint64_t)v16, type metadata accessor for OwnedBeaconGroup);
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = swift_slowAlloc();
    v68[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 141558275;
    uint64_t v69 = 1752392040;
    unint64_t v63 = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v20 + 12) = 2081;
    uint64_t v52 = v20 + 14;
    type metadata accessor for UUID();
    sub_100394110((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v69 = sub_1008FA0F0(v21, v22, v68);
    unint64_t v4 = v63;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1003B61EC((uint64_t)v16, type metadata accessor for OwnedBeaconGroup);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Sending unpair command to all members of group %{private,mask.hash}s", (uint8_t *)v20, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1003B61EC((uint64_t)v16, type metadata accessor for OwnedBeaconGroup);
  }

  uint64_t v23 = sub_1004D1434();
  uint64_t v24 = v62;
  swift_retain();
  unint64_t v25 = (unint64_t)sub_1003A73D8(v23, v24);
  swift_bridgeObjectRelease();
  swift_release();
  if (!(v25 >> 62))
  {
    uint64_t v26 = *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v26) {
      goto LABEL_8;
    }
LABEL_16:
    swift_bridgeObjectRelease();
    uint64_t v35 = _swiftEmptyArrayStorage;
LABEL_17:
    sub_100AA33CC(a1, v61);
    uint64_t v36 = swift_allocObject();
    *(unsigned char *)(v36 + 16) = 0;
    uint64_t v37 = swift_allocObject();
    *(void *)(v37 + 16) = 0;
    v68[0] = (uint64_t)v35;
    sub_10000588C(&qword_101642790);
    sub_100062734(&qword_101642798, &qword_101642790);
    uint64_t v67 = sub_100062734(&qword_1016427A0, &qword_1016427A8);
    v38 = (void *)Sequence<>.merged()();
    swift_bridgeObjectRelease();
    v68[0] = (uint64_t)v38;
    uint64_t v39 = swift_allocObject();
    swift_weakInit();
    uint64_t v40 = v55;
    sub_1003B6E14(a1, v55, type metadata accessor for OwnedBeaconGroup);
    unint64_t v41 = (*(unsigned __int8 *)(v53 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80);
    unint64_t v42 = (v54 + v41 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v43 = (void *)swift_allocObject();
    v43[2] = v39;
    v43[3] = v36;
    uint64_t v44 = v60;
    v43[4] = v59;
    v43[5] = v44;
    sub_1003B6008(v40, (uint64_t)v43 + v41, type metadata accessor for OwnedBeaconGroup);
    *(void *)((char *)v43 + v42) = v37;
    uint64_t v45 = v61;
    uint64_t v46 = v58;
    sub_10001D074(v61, v58, &qword_10163B9F0);
    unint64_t v47 = (*(unsigned __int8 *)(v56 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80);
    unint64_t v48 = (v57 + v47 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v49 = swift_allocObject();
    sub_10001D608(v46, v49 + v47, &qword_10163B9F0);
    *(void *)(v49 + v48) = v36;
    swift_retain_n();
    swift_retain();
    swift_retain();
    sub_10000588C(&qword_1016427A8);
    uint64_t v50 = Publisher.sink(receiveCompletion:receiveValue:)();
    swift_release();
    swift_release();
    swift_release();
    sub_10001DAB4(v45, &qword_10163B9F0);
    swift_beginAccess();
    *(void *)(v37 + 16) = v50;
    swift_release();
    swift_release();
    return swift_release();
  }
  swift_bridgeObjectRetain();
  uint64_t v26 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v26) {
    goto LABEL_16;
  }
LABEL_8:
  v68[0] = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t result = specialized ContiguousArray.reserveCapacity(_:)();
  if ((v26 & 0x8000000000000000) == 0)
  {
    uint64_t v52 = a1;
    uint64_t v28 = 0;
    uint64_t v29 = (void (**)(char *, uint64_t))(v4 + 8);
    unint64_t v30 = v65;
    uint64_t v31 = (void (**)(char *, uint64_t))(v64 + 1);
    unint64_t v63 = v25 & 0xC000000000000001;
    v64 = (void *)v25;
    do
    {
      if (v63)
      {
        uint64_t v32 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        uint64_t v32 = *(void *)(v25 + 8 * v28 + 32);
        swift_retain();
      }
      ++v28;
      uint64_t v69 = v32;
      sub_10000588C(&qword_101642758);
      sub_10000588C(&qword_101642760);
      sub_100062734(&qword_101642768, &qword_101642758);
      Publisher.map<A>(_:)();
      sub_10000588C(&qword_101642770);
      sub_100062734(&qword_101642778, &qword_101642748);
      sub_100062734(&qword_101642780, &qword_101642770);
      uint64_t v33 = v67;
      Publisher.catch<A>(_:)();
      (*v29)(v30, v33);
      sub_100062734(&qword_101642788, &qword_101642750);
      uint64_t v34 = v66;
      Publisher.eraseToAnyPublisher()();
      (*v31)(v7, v34);
      swift_release();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      unint64_t v25 = (unint64_t)v64;
    }
    while (v26 != v28);
    uint64_t v35 = (void *)v68[0];
    swift_bridgeObjectRelease();
    a1 = v52;
    goto LABEL_17;
  }
  __break(1u);
  return result;
}

uint64_t sub_100386328@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  sub_10000588C(&qword_101642760);

  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_1003863B0(uint64_t *a1)
{
  uint64_t v2 = sub_10000588C(&qword_101642760);
  __chkstk_darwin(v2);
  *(uint64_t *)((char *)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0)) = *a1;
  swift_storeEnumTagMultiPayload();
  swift_errorRetain();
  return Just.init(_:)();
}

uint64_t sub_100386460(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12 - 8);
  uint64_t v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v17 = result;
    swift_beginAccess();
    if (*(unsigned char *)(a3 + 16))
    {
      a4(0);
    }
    else
    {
      type metadata accessor for Transaction();
      sub_1003B6E14(a6, (uint64_t)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for OwnedBeaconGroup);
      unint64_t v18 = (*(unsigned __int8 *)(v13 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
      unint64_t v19 = (v14 + v18 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v20 = swift_allocObject();
      sub_1003B6008((uint64_t)v15, v20 + v18, type metadata accessor for OwnedBeaconGroup);
      *(void *)(v20 + v19) = v17;
      uint64_t v21 = (void *)(v20 + ((v19 + 15) & 0xFFFFFFFFFFFFFFF8));
      void *v21 = a4;
      v21[1] = a5;
      swift_retain();
      swift_retain();
      static Transaction.asyncTask(name:block:)();
      swift_release();
      swift_release();
      swift_beginAccess();
      *(void *)(a7 + 16) = 0;
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_100386688(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[24] = a3;
  v4[25] = a4;
  v4[22] = a1;
  v4[23] = a2;
  return _swift_task_switch(sub_1003866AC, 0, 0);
}

uint64_t sub_1003866AC()
{
  uint64_t v1 = v0[23];
  uint64_t v2 = sub_1004D1434();
  uint64_t v3 = *(void *)(v1 + 280);
  swift_retain();
  uint64_t v4 = sub_1003A6B80(v2, v3);
  v0[26] = v4;
  swift_bridgeObjectRelease();
  swift_release();
  v0[15] = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  v0[27] = v5;
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_101660AA0);
  uint64_t v7 = sub_100062734(&qword_1016427C8, (uint64_t *)&unk_101660AA0);
  *uint64_t v5 = v0;
  v5[1] = sub_1003867F0;
  return Sequence.asyncFilter(_:)(&unk_1016427C0, 0, v6, v7);
}

uint64_t sub_1003867F0(uint64_t a1)
{
  *(void *)(*(void *)v1 + 224) = a1;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  return _swift_task_switch(sub_100386910, 0, 0);
}

uint64_t sub_100386910()
{
  if (*(void *)(*(void *)(v0 + 224) + 16))
  {
    if (qword_1016375E8 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 16, (uint64_t *)&unk_101638D30);
    if (*(void *)(v0 + 40))
    {
      sub_10001CEB0((long long *)(v0 + 16), v0 + 56);
      sub_10001CD44((void *)(v0 + 56), *(void *)(v0 + 80));
      uint64_t v6 = (uint64_t (*)(void))((char *)&dword_101639258 + dword_101639258);
      uint64_t v2 = (void *)swift_task_alloc();
      *(void *)(v0 + 232) = v2;
      *uint64_t v2 = v0;
      v2[1] = sub_100386B3C;
      return v6();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    uint64_t v3 = *(void (**)(void *))(v0 + 192);
    swift_bridgeObjectRelease();
    type metadata accessor for UnpairError(0);
    *(void *)(v0 + 168) = 1;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100394110(&qword_101638630, type metadata accessor for UnpairError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v4 = *(void **)(v0 + 160);
    v3(v4);

    uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
    return v5();
  }
  return result;
}

uint64_t sub_100386B3C(uint64_t a1)
{
  *(void *)(*(void *)v1 + 240) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100386C3C, 0, 0);
}

uint64_t sub_100386C3C()
{
  uint64_t v1 = v0[30];
  uint64_t v2 = v0[28];
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 7));
    uint64_t v3 = swift_task_alloc();
    v0[31] = v3;
    *(void *)(v3 + 16) = v2;
    *(void *)(v3 + 24) = v1;
    uint64_t v4 = (void *)swift_task_alloc();
    v0[32] = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_100386ED4;
    return withTaskGroup<A, B>(of:returning:isolation:body:)(v4);
  }
  else
  {
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 7));
    if (qword_101637310 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100010324(v5, (uint64_t)qword_10170F068);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "sendUnpairCommand: missing OwnerCommandService to send unpair!", v8, 2u);
      swift_slowDealloc();
    }
    uint64_t v9 = (void (*)(void *))v0[24];

    type metadata accessor for UnpairError(0);
    v0[17] = 1;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100394110(&qword_101638630, type metadata accessor for UnpairError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v10 = (void *)v0[16];
    v9(v10);

    uint64_t v11 = (uint64_t (*)(void))v0[1];
    return v11();
  }
}

uint64_t sub_100386ED4()
{
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  return _swift_task_switch(sub_100387008, 0, 0);
}

uint64_t sub_100387008()
{
  uint64_t v1 = (void (*)(void *))v0[24];
  type metadata accessor for UnpairError(0);
  v0[19] = 1;
  sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
  sub_100394110(&qword_101638630, type metadata accessor for UnpairError);
  _BridgedStoredNSError.init(_:userInfo:)();
  uint64_t v2 = (void *)v0[18];
  v1(v2);
  swift_release();

  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_10038711C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1003871AC;
  return sub_100D1B4D0();
}

uint64_t sub_1003871AC(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t sub_1003872AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[10] = a3;
  v4[11] = a4;
  v4[9] = a2;
  sub_10000588C(&qword_10164DBB0);
  v4[12] = swift_task_alloc();
  v4[13] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  v4[14] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[15] = v6;
  v4[16] = *(void *)(v6 + 64);
  v4[17] = swift_task_alloc();
  v4[18] = swift_task_alloc();
  v4[19] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for OwnedBeaconRecord();
  v4[20] = v7;
  v4[21] = *(void *)(v7 - 8);
  v4[22] = swift_task_alloc();
  return _swift_task_switch(sub_100387430, 0, 0);
}

uint64_t sub_100387430()
{
  uint64_t v55 = v0;
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 168);
    uint64_t v46 = *(void *)(v0 + 176) + *(int *)(*(void *)(v0 + 160) + 20);
    uint64_t v47 = *(void *)(v0 + 120);
    uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v45 = *(void *)(v3 + 72);
    uint64_t v5 = (void (**)(uint64_t, uint64_t, uint64_t))(v47 + 16);
    uint64_t v6 = (void (**)(uint64_t, uint64_t))(v47 + 8);
    swift_bridgeObjectRetain();
    do
    {
      uint64_t v53 = v2;
      uint64_t v10 = *(void *)(v0 + 176);
      uint64_t v11 = *(void *)(v0 + 152);
      uint64_t v12 = *(void *)(v0 + 112);
      sub_1003B6E14(v4, v10, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      uint64_t v13 = *v5;
      (*v5)(v11, v46, v12);
      sub_1003B61EC(v10, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      if (qword_101637310 != -1) {
        swift_once();
      }
      uint64_t v14 = *(void *)(v0 + 144);
      uint64_t v15 = *(void *)(v0 + 152);
      uint64_t v16 = *(void *)(v0 + 112);
      uint64_t v17 = type metadata accessor for Logger();
      sub_100010324(v17, (uint64_t)qword_10170F068);
      uint64_t v50 = v13;
      v13(v14, v15, v16);
      unint64_t v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.default.getter();
      BOOL v20 = os_log_type_enabled(v18, v19);
      uint64_t v21 = *(void *)(v0 + 144);
      uint64_t v22 = *(void *)(v0 + 112);
      uint64_t v52 = v4;
      if (v20)
      {
        uint64_t v23 = swift_slowAlloc();
        uint64_t v54 = swift_slowAlloc();
        *(_DWORD *)uint64_t v23 = 141558275;
        *(void *)(v23 + 4) = 1752392040;
        *(_WORD *)(v23 + 12) = 2081;
        sub_100394110((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v23 + 14) = sub_1008FA0F0(v24, v25, &v54);
        swift_bridgeObjectRelease();
        uint64_t v51 = *v6;
        (*v6)(v21, v22);
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "sendUnpairCommand: Sending unpair to managed peripheral %{private,mask.hash}s", (uint8_t *)v23, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        uint64_t v51 = *v6;
        (*v6)(v21, v22);
      }

      uint64_t v26 = *(void *)(v0 + 152);
      uint64_t v27 = *(void *)(v0 + 136);
      uint64_t v28 = *(void *)(v0 + 104);
      uint64_t v29 = *(void *)(v0 + 112);
      uint64_t v30 = *(void *)(v0 + 88);
      uint64_t v48 = v28;
      uint64_t v49 = *(void *)(v0 + 96);
      uint64_t v31 = type metadata accessor for TaskPriority();
      uint64_t v32 = *(void *)(v31 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 56))(v28, 1, 1, v31);
      v50(v27, v26, v29);
      unint64_t v33 = (*(unsigned __int8 *)(v47 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80);
      uint64_t v34 = (char *)swift_allocObject();
      *((void *)v34 + 2) = 0;
      *((void *)v34 + 3) = 0;
      *((void *)v34 + 4) = v30;
      (*(void (**)(char *, uint64_t, uint64_t))(v47 + 32))(&v34[v33], v27, v29);
      sub_10001D074(v48, v49, &qword_10164DBB0);
      int v35 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v49, 1, v31);
      swift_retain();
      uint64_t v36 = *(void *)(v0 + 96);
      if (v35 == 1)
      {
        sub_10001DAB4(*(void *)(v0 + 96), &qword_10164DBB0);
      }
      else
      {
        TaskPriority.rawValue.getter();
        (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v36, v31);
      }
      uint64_t v6 = (void (**)(uint64_t, uint64_t))(v47 + 8);
      if (*((void *)v34 + 2))
      {
        swift_getObjectType();
        swift_unknownObjectRetain();
        uint64_t v37 = dispatch thunk of Actor.unownedExecutor.getter();
        uint64_t v39 = v38;
        swift_unknownObjectRelease();
      }
      else
      {
        uint64_t v37 = 0;
        uint64_t v39 = 0;
      }
      uint64_t v40 = **(void **)(v0 + 72);
      uint64_t v41 = swift_allocObject();
      *(void *)(v41 + 16) = &unk_1016427E8;
      *(void *)(v41 + 24) = v34;
      uint64_t v42 = v39 | v37;
      if (v39 | v37)
      {
        uint64_t v42 = v0 + 16;
        *(void *)(v0 + 16) = 0;
        *(void *)(v0 + 24) = 0;
        *(void *)(v0 + 32) = v37;
        *(void *)(v0 + 40) = v39;
      }
      uint64_t v7 = *(void *)(v0 + 152);
      uint64_t v9 = *(void *)(v0 + 104);
      uint64_t v8 = *(void *)(v0 + 112);
      *(void *)(v0 + 48) = 1;
      *(void *)(v0 + 56) = v42;
      *(void *)(v0 + 64) = v40;
      swift_task_create();
      swift_release();
      sub_10001DAB4(v9, &qword_10164DBB0);
      v51(v7, v8);
      uint64_t v4 = v52 + v45;
      uint64_t v2 = v53 - 1;
      uint64_t v5 = (void (**)(uint64_t, uint64_t, uint64_t))(v47 + 16);
    }
    while (v53 != 1);
    swift_bridgeObjectRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v43 = *(uint64_t (**)(void))(v0 + 8);
  return v43();
}

uint64_t sub_100387A38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[7] = a4;
  v5[8] = a5;
  uint64_t v6 = type metadata accessor for UUID();
  v5[9] = v6;
  v5[10] = *(void *)(v6 - 8);
  v5[11] = swift_task_alloc();
  v5[12] = swift_task_alloc();
  return _swift_task_switch(sub_100387B08, 0, 0);
}

uint64_t sub_100387B08()
{
  if (qword_101637310 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  v0[13] = sub_100010324(v1, (uint64_t)qword_10170F068);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Trying RX Unpair...", v4, 2u);
    swift_slowDealloc();
  }

  uint64_t v5 = (void *)swift_task_alloc();
  v0[14] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_100387C60;
  uint64_t v6 = v0[8];
  return sub_10122D1C4(v6, 0);
}

uint64_t sub_100387C60()
{
  *(void *)(*(void *)v1 + 120) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100387FAC;
  }
  else {
    uint64_t v2 = sub_100387D74;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100387D74()
{
  uint64_t v12 = v0;
  (*(void (**)(void, void, void))(v0[10] + 16))(v0[12], v0[8], v0[9]);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = v0[12];
    uint64_t v5 = v0[9];
    uint64_t v4 = v0[10];
    uint64_t v6 = swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    v0[5] = 1752392040;
    *(_DWORD *)uint64_t v6 = 141558275;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 12) = 2081;
    sub_100394110((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[6] = sub_1008FA0F0(v7, v8, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "RX Unpaired %{private,mask.hash}s completed successfully", (uint8_t *)v6, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v0[10] + 8))(v0[12], v0[9]);
  }

  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_100387FAC()
{
  unint64_t v18 = v0;
  (*(void (**)(void, void, void))(v0[10] + 16))(v0[11], v0[8], v0[9]);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    log = v1;
    uint64_t v4 = v0[10];
    uint64_t v3 = v0[11];
    uint64_t v5 = v0[9];
    uint64_t v6 = swift_slowAlloc();
    uint64_t v16 = (void *)swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    v0[2] = 1752392040;
    *(_DWORD *)uint64_t v6 = 141558531;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 12) = 2081;
    sub_100394110((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[3] = sub_1008FA0F0(v7, v8, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    *(_WORD *)(v6 + 22) = 2114;
    swift_errorRetain();
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
    v0[4] = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v16 = v9;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, v2, "RX Unpaired %{private,mask.hash}s with error %{public}@", (uint8_t *)v6, 0x20u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    uint64_t v11 = v0[10];
    uint64_t v10 = v0[11];
    uint64_t v12 = v0[9];
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13();
}

uint64_t sub_1003882C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v51 = a3;
  uint64_t v52 = a2;
  uint64_t v4 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v50 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  uint64_t v54 = (uint64_t)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v45 - v14;
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v45 - v16;
  uint64_t v18 = sub_10000588C(&qword_101642760);
  __chkstk_darwin(v18);
  BOOL v20 = (uint64_t *)((char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001D074(a1, (uint64_t)v20, &qword_101642760);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v21 = *v20;
    os_log_type_t v22 = static os_log_type_t.default.getter();
    if (qword_101637308 != -1) {
      swift_once();
    }
    uint64_t v23 = qword_10170F060;
    if (os_log_type_enabled((os_log_t)qword_10170F060, v22))
    {
      swift_errorRetain();
      swift_errorRetain();
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      v55[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v24 = 136315138;
      uint64_t v56 = v21;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v25 = String.init<A>(describing:)();
      uint64_t v56 = sub_1008FA0F0(v25, v26, v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v22, "Unpair failed. %s", v24, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    return swift_errorRelease();
  }
  else
  {
    (*(void (**)(char *, uint64_t *, uint64_t))(v9 + 32))(v17, v20, v8);
    os_log_type_t v28 = static os_log_type_t.default.getter();
    if (qword_101637308 != -1) {
      swift_once();
    }
    uint64_t v29 = qword_10170F060;
    uint64_t v48 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
    uint64_t v49 = v9 + 16;
    v48(v15, v17, v8);
    if (os_log_type_enabled(v29, v28))
    {
      uint64_t v30 = swift_slowAlloc();
      uint64_t v46 = swift_slowAlloc();
      v55[0] = v46;
      *(_DWORD *)uint64_t v30 = 141558275;
      uint64_t v56 = 1752392040;
      uint64_t v47 = v12;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v30 + 12) = 2081;
      uint64_t v45 = v30 + 14;
      sub_100394110((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v56 = sub_1008FA0F0(v31, v32, v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v12 = v47;
      unint64_t v33 = *(void (**)(char *, uint64_t))(v9 + 8);
      v33(v15, v8);
      _os_log_impl((void *)&_mh_execute_header, v29, v28, "Unpair succeeded for beacon %{private,mask.hash}s", (uint8_t *)v30, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      unint64_t v33 = *(void (**)(char *, uint64_t))(v9 + 8);
      v33(v15, v8);
    }
    uint64_t v34 = (unsigned char *)(v51 + 16);
    sub_10001D074(v52, (uint64_t)v6, &qword_10163B9F0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v6, 1, v53) == 1)
    {
      v33(v17, v8);
      sub_10001DAB4((uint64_t)v6, &qword_10163B9F0);
      uint64_t result = swift_beginAccess();
      unsigned char *v34 = 1;
    }
    else
    {
      sub_1003B6008((uint64_t)v6, v54, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      if (static UUID.== infix(_:_:)())
      {
        if (qword_101637310 != -1) {
          swift_once();
        }
        uint64_t v35 = type metadata accessor for Logger();
        sub_100010324(v35, (uint64_t)qword_10170F068);
        v48(v12, v17, v8);
        uint64_t v36 = Logger.logObject.getter();
        os_log_type_t v37 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v36, v37))
        {
          uint64_t v38 = swift_slowAlloc();
          uint64_t v53 = (uint64_t)v17;
          uint64_t v39 = v8;
          uint64_t v40 = v38;
          uint64_t v52 = swift_slowAlloc();
          v55[0] = v52;
          *(_DWORD *)uint64_t v40 = 141558275;
          uint64_t v56 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v40 + 12) = 2081;
          uint64_t v51 = v40 + 14;
          sub_100394110((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v56 = sub_1008FA0F0(v41, v42, v55);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v33(v12, v39);
          _os_log_impl((void *)&_mh_execute_header, v36, v37, "Unpair command succeeded for primary beacon %{private,mask.hash}s", (uint8_t *)v40, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          sub_1003B61EC(v54, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
          uint64_t v43 = (char *)v53;
          uint64_t v44 = v39;
        }
        else
        {

          v33(v12, v8);
          sub_1003B61EC(v54, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
          uint64_t v43 = v17;
          uint64_t v44 = v8;
        }
        v33(v43, v44);
        uint64_t result = swift_beginAccess();
        unsigned char *v34 = 1;
      }
      else
      {
        sub_1003B61EC(v54, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        return ((uint64_t (*)(char *, uint64_t))v33)(v17, v8);
      }
    }
  }
  return result;
}

uint64_t sub_100388C14@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *a1;
  *(unsigned char *)(a2 + 8) = 0;
  return swift_bridgeObjectRetain();
}

uint64_t sub_100388C24()
{
  return Just.init(_:)();
}

uint64_t sub_100388C7C(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4, void (*a5)(void))
{
  uint64_t v10 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)v35 - v14;
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v16 = *(void *)a1;
    swift_errorRetain();
    if (qword_101637310 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_100010324(v17, (uint64_t)qword_10170F068);
    sub_1003B6E14(a2, (uint64_t)v13, type metadata accessor for OwnedBeaconGroup);
    sub_10015B6F0(v16, 1);
    swift_errorRetain();
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = swift_slowAlloc();
      uint64_t v37 = a4;
      uint64_t v21 = v20;
      uint64_t v22 = swift_slowAlloc();
      v35[1] = v22;
      *(_DWORD *)uint64_t v21 = 141558531;
      uint64_t v38 = 1752392040;
      v39[0] = v22;
      uint64_t v36 = a3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v21 + 12) = 2081;
      type metadata accessor for UUID();
      sub_100394110((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v38 = sub_1008FA0F0(v23, v24, v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1003B61EC((uint64_t)v13, type metadata accessor for OwnedBeaconGroup);
      *(_WORD *)(v21 + 22) = 2082;
      uint64_t v38 = v16;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v25 = String.init<A>(describing:)();
      uint64_t v38 = sub_1008FA0F0(v25, v26, v39);
      a3 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10015B4A8(v16, 1);
      sub_10015B4A8(v16, 1);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Failed to remove related records for %{private,mask.hash}s. Error %{public}s)", (uint8_t *)v21, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1003B61EC((uint64_t)v13, type metadata accessor for OwnedBeaconGroup);
      sub_10015B4A8(v16, 1);
      sub_10015B4A8(v16, 1);
    }

    swift_errorRetain();
    a3(v16);
    sub_10015B4A8(v16, 1);
    sub_10015B4A8(v16, 1);
  }
  else
  {
    if (qword_101637310 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_100010324(v27, (uint64_t)qword_10170F068);
    sub_1003B6E14(a2, (uint64_t)v15, type metadata accessor for OwnedBeaconGroup);
    os_log_type_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      uint64_t v37 = a4;
      *(_DWORD *)uint64_t v30 = 141558275;
      uint64_t v38 = 1752392040;
      v39[0] = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v30 + 12) = 2081;
      uint64_t v36 = a5;
      type metadata accessor for UUID();
      sub_100394110((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v32 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v38 = sub_1008FA0F0(v32, v33, v39);
      a5 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1003B61EC((uint64_t)v15, type metadata accessor for OwnedBeaconGroup);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Successfully removed related records for %{private,mask.hash}s", (uint8_t *)v30, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1003B61EC((uint64_t)v15, type metadata accessor for OwnedBeaconGroup);
    }

    a3(0);
  }
  swift_beginAccess();
  *((void *)a5 + 2) = 0;
  return swift_release();
}

uint64_t sub_100389298(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  sub_1008C0228(a4);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))((char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), a4, v7);
  unint64_t v10 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a1;
  *(void *)(v11 + 24) = a2;
  (*(void (**)(unint64_t, char *, uint64_t))(v8 + 32))(v11 + v10, (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
  swift_retain();
  Future.addSuccess(block:)();
  swift_release();
  swift_release();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a1;
  *(void *)(v12 + 24) = a2;
  swift_retain();
  Future.addFailure(block:)();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_10038946C(unsigned char *a1, void (*a2)(uint64_t *), uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_10000588C(&qword_101642760);
  __chkstk_darwin(v7);
  uint64_t v9 = (uint64_t *)((char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (*a1 == 1)
  {
    uint64_t v10 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v9, a4, v10);
  }
  else
  {
    sub_1003A4778();
    uint64_t v11 = swift_allocError();
    unsigned char *v12 = 0;
    *uint64_t v9 = v11;
  }
  swift_storeEnumTagMultiPayload();
  a2(v9);
  return sub_10001DAB4((uint64_t)v9, &qword_101642760);
}

uint64_t sub_10038959C(uint64_t a1, void (*a2)(void *))
{
  uint64_t v4 = sub_10000588C(&qword_101642760);
  __chkstk_darwin(v4);
  uint64_t v6 = (uint64_t *)((char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  *uint64_t v6 = a1;
  swift_storeEnumTagMultiPayload();
  swift_errorRetain();
  a2(v6);
  return sub_10001DAB4((uint64_t)v6, &qword_101642760);
}

uint64_t sub_10038965C(uint64_t a1, void (*a2)(uint64_t), void (*a3)(uint64_t), uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v12 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v13 = *(void *)(*(void *)(v12 - 8) + 64);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    swift_errorRetain();
    static os_log_type_t.error.getter();
    if (qword_101637308 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_101342130;
    uint64_t v46 = a1;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v17 = String.init<A>(describing:)();
    uint64_t v19 = v18;
    *(void *)(v16 + 56) = &type metadata for String;
    *(void *)(v16 + 64) = sub_10000B4CC();
    *(void *)(v16 + 32) = v17;
    *(void *)(v16 + 40) = v19;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    swift_errorRetain();
    a2(a1);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    uint64_t v42 = v14;
    int v43 = a6;
    uint64_t v44 = a2;
    uint64_t v45 = a3;
    LODWORD(v41) = static os_log_type_t.default.getter();
    if (qword_101637308 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_101342130;
    uint64_t v22 = a4 + *(int *)(v12 + 20);
    uint64_t v23 = UUID.uuidString.getter();
    uint64_t v25 = v24;
    *(void *)(v21 + 56) = &type metadata for String;
    *(void *)(v21 + 64) = sub_10000B4CC();
    *(void *)(v21 + 32) = v23;
    *(void *)(v21 + 40) = v25;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    sub_1008C0228(v22);
    sub_1003B6E14(a4, (uint64_t)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v26 = *(unsigned __int8 *)(v42 + 80);
    uint64_t v27 = (v26 + 16) & ~v26;
    uint64_t v28 = v27 + v13;
    uint64_t v29 = v26 | 7;
    unint64_t v30 = (v27 + v13) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v31 = v30 + 8;
    unint64_t v41 = v30 + 8;
    uint64_t v42 = v29;
    uint64_t v39 = a4;
    unint64_t v32 = (v30 + 23) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v33 = swift_allocObject();
    uint64_t v40 = type metadata accessor for OwnedBeaconRecord;
    sub_1003B6008((uint64_t)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v33 + v27, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    v43 &= 1u;
    *(unsigned char *)(v33 + v28) = v43;
    *(void *)(v33 + v31) = a5;
    uint64_t v34 = (void (**)(uint64_t))(v33 + v32);
    uint64_t v35 = v44;
    uint64_t v36 = v45;
    unsigned char *v34 = v44;
    v34[1] = v36;
    swift_retain();
    swift_retain();
    Future.addSuccess(block:)();
    swift_release();
    swift_release();
    sub_1003B6E14(v39, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v37 = swift_allocObject();
    sub_1003B6008((uint64_t)v15, v37 + v27, (uint64_t (*)(void))v40);
    *(unsigned char *)(v37 + v28) = v43;
    *(void *)(v37 + v41) = 0;
    uint64_t v38 = (void (**)(uint64_t))(v37 + v32);
    void *v38 = v35;
    v38[1] = v36;
    *(void *)(v37 + ((v32 + 23) & 0xFFFFFFFFFFFFFFF8)) = a5;
    swift_retain();
    swift_retain();
    Future.addFailure(block:)();
    swift_release();
    swift_release();
    return swift_release();
  }
}

uint64_t sub_100389ABC(char *a1, uint64_t a2, char a3, uint64_t a4, void (*a5)(uint64_t), void (*a6)(uint64_t))
{
  char v8 = *a1;
  static os_log_type_t.default.getter();
  if (qword_101637308 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_101347500;
  type metadata accessor for OwnedBeaconRecord();
  uint64_t v20 = a2;
  uint64_t v10 = UUID.uuidString.getter();
  uint64_t v12 = v11;
  *(void *)(v9 + 56) = &type metadata for String;
  unint64_t v13 = sub_10000B4CC();
  *(void *)(v9 + 64) = v13;
  *(void *)(v9 + 32) = v10;
  *(void *)(v9 + 40) = v12;
  *(void *)(v9 + 96) = &type metadata for Bool;
  *(void *)(v9 + 104) = &protocol witness table for Bool;
  *(unsigned char *)(v9 + 72) = v8;
  *(void *)(v9 + 136) = &type metadata for Bool;
  *(void *)(v9 + 144) = &protocol witness table for Bool;
  *(unsigned char *)(v9 + 112) = a3 & 1;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  if (v8 & 1) != 0 || (a3)
  {
    static os_log_type_t.default.getter();
    uint64_t v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_101342130;
    uint64_t v18 = UUID.uuidString.getter();
    *(void *)(v17 + 56) = &type metadata for String;
    *(void *)(v17 + 64) = v13;
    *(void *)(v17 + 32) = v18;
    *(void *)(v17 + 40) = v19;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    return sub_100378528(v20, 1, a5, a6);
  }
  else
  {
    sub_1003A4778();
    uint64_t v14 = swift_allocError();
    *uint64_t v15 = 7;
    a5(v14);
    return swift_errorRelease();
  }
}

uint64_t sub_100389D04(uint64_t a1, uint64_t a2, char a3, uint64_t a4, void (*a5)(uint64_t), void (*a6)(uint64_t))
{
  static os_log_type_t.error.getter();
  if (qword_101637308 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_101347500;
  type metadata accessor for OwnedBeaconRecord();
  uint64_t v9 = UUID.uuidString.getter();
  uint64_t v11 = v10;
  *(void *)(v8 + 56) = &type metadata for String;
  unint64_t v12 = sub_10000B4CC();
  *(void *)(v8 + 64) = v12;
  *(void *)(v8 + 32) = v9;
  *(void *)(v8 + 40) = v11;
  *(void *)(v8 + 96) = &type metadata for Bool;
  *(void *)(v8 + 104) = &protocol witness table for Bool;
  *(unsigned char *)(v8 + 72) = a3 & 1;
  swift_errorRetain();
  sub_10000588C((uint64_t *)&unk_101638EB0);
  uint64_t v13 = String.init<A>(describing:)();
  *(void *)(v8 + 136) = &type metadata for String;
  *(void *)(v8 + 144) = v12;
  *(void *)(v8 + 112) = v13;
  *(void *)(v8 + 120) = v14;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  if ((a3 & 1) == 0) {
    return ((uint64_t (*)(uint64_t))a5)(a1);
  }
  static os_log_type_t.default.getter();
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_101342130;
  uint64_t v16 = UUID.uuidString.getter();
  *(void *)(v15 + 56) = &type metadata for String;
  *(void *)(v15 + 64) = v12;
  *(void *)(v15 + 32) = v16;
  *(void *)(v15 + 40) = v17;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  return sub_100378528(a2, 1, a5, a6);
}

uint64_t sub_100389F14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v17[1] = a2;
  uint64_t v9 = type metadata accessor for OSSignpostID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_signpost_type_t.begin.getter();
  if (qword_1016372A8 != -1) {
    swift_once();
  }
  os_signpost(_:dso:log:name:signpostID:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9);
  unint64_t v13 = (*(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v14 = (v11 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v15 = (void (*)(uint64_t))swift_allocObject();
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))((char *)v15 + v13, v12, v9);
  *(void *)((char *)v15 + v14) = a4;
  *(void *)((char *)v15 + ((v14 + 15) & 0xFFFFFFFFFFFFFFF8)) = a5;
  swift_retain();
  sub_100378528(a3, 1, (void (*)(uint64_t))sub_1003A8308, v15);
  return swift_release();
}

uint64_t sub_10038A0FC(uint64_t a1)
{
  static os_signpost_type_t.end.getter();
  if (qword_1016372A8 != -1) {
    swift_once();
  }
  os_signpost(_:dso:log:name:signpostID:)();
  if (a1)
  {
    swift_errorRetain();
    static os_log_type_t.error.getter();
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v2 = swift_allocObject();
    *(_OWORD *)(v2 + 16) = xmmword_101342130;
    swift_getErrorValue();
    uint64_t v3 = Error.localizedDescription.getter();
    uint64_t v5 = v4;
    *(void *)(v2 + 56) = &type metadata for String;
    *(void *)(v2 + 64) = sub_10000B4CC();
    *(void *)(v2 + 32) = v3;
    *(void *)(v2 + 40) = v5;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    Future.finish(error:)();
    return swift_errorRelease();
  }
  else
  {
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    return Future.finish(result:)();
  }
}

uint64_t sub_10038A2AC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, int a6, uint64_t (*a7)(uint64_t), uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v45 = a7;
  int v43 = a6;
  uint64_t v40 = a5;
  uint64_t v38 = a4;
  uint64_t v13 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v41 = *(void *)(v13 - 8);
  uint64_t v14 = *(void *)(v41 + 64);
  __chkstk_darwin(v13);
  uint64_t v44 = (uint64_t)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = type metadata accessor for OSSignpostID();
  uint64_t v39 = *(void *)(v42 - 8);
  uint64_t v15 = *(void *)(v39 + 64);
  __chkstk_darwin(v42);
  static os_log_type_t.default.getter();
  if (qword_1016372A8 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  static os_signpost_type_t.end.getter();
  uint64_t v16 = os_signpost(_:dso:log:name:signpostID:)();
  if ((a3 & 1) == 0) {
    return v45(v16);
  }
  uint64_t v36 = a9;
  uint64_t v37 = a10;
  static os_signpost_type_t.begin.getter();
  os_signpost(_:dso:log:name:signpostID:)();
  uint64_t v34 = a8;
  uint64_t v17 = v40;
  uint64_t v35 = sub_1008C0228(v40 + *(int *)(v13 + 20));
  uint64_t v33 = swift_allocObject();
  swift_weakInit();
  uint64_t v18 = v39;
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v39 + 16);
  unint64_t v32 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = v42;
  v19(v32, a2, v42);
  sub_1003B6E14(v17, v44, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  unint64_t v21 = (*(unsigned __int8 *)(v18 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
  uint64_t v22 = v21 + v15;
  unint64_t v23 = (v21 + v15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v24 = (v23 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v25 = (v24 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v26 = (*(unsigned __int8 *)(v41 + 80) + v25 + 8) & ~(unint64_t)*(unsigned __int8 *)(v41 + 80);
  uint64_t v27 = swift_allocObject();
  unint64_t v28 = v23 + v27;
  (*(void (**)(unint64_t, char *, uint64_t))(v18 + 32))(v27 + v21, v32, v20);
  *(unsigned char *)(v27 + v22) = v43 & 1;
  uint64_t v29 = v44;
  uint64_t v30 = v34;
  *(void *)(v28 + 8) = v45;
  *(void *)(v28 + 16) = v30;
  *(void *)(v27 + v24) = v36;
  *(void *)(v27 + v25) = v33;
  sub_1003B6008(v29, v27 + v26, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  *(void *)(v27 + ((v14 + v26 + 7) & 0xFFFFFFFFFFFFFFF8)) = v37;
  swift_retain();
  swift_retain();
  Future.addCompletion(block:)();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_10038A694(unsigned __int8 *a1, uint64_t a2, uint64_t a3, char a4, void (*a5)(uint64_t), uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v11 = *a1;
  static os_signpost_type_t.end.getter();
  if (qword_1016372A8 != -1) {
    swift_once();
  }
  uint64_t result = os_signpost(_:dso:log:name:signpostID:)();
  if (a2)
  {
    swift_errorRetain();
    static os_log_type_t.error.getter();
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_101342130;
    swift_getErrorValue();
    uint64_t v14 = Error.localizedDescription.getter();
    uint64_t v16 = v15;
    *(void *)(v13 + 56) = &type metadata for String;
    *(void *)(v13 + 64) = sub_10000B4CC();
    *(void *)(v13 + 32) = v14;
    *(void *)(v13 + 40) = v16;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    if (a4)
    {
      static os_log_type_t.error.getter();
      uint64_t v17 = os_log(_:dso:log:_:_:)();
      a5(v17);
    }
    else
    {
      Future.finish(error:)();
    }
    return swift_errorRelease();
  }
  else if (v11 != 2)
  {
    static os_log_type_t.default.getter();
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_101342130;
    *(void *)(v18 + 56) = &type metadata for Bool;
    *(void *)(v18 + 64) = &protocol witness table for Bool;
    *(unsigned char *)(v18 + 32) = v11 & 1;
    os_log(_:dso:log:_:_:)();
    uint64_t v19 = swift_bridgeObjectRelease();
    if (v11 & 1) != 0 || (a4)
    {
      a5(v19);
      swift_beginAccess();
      uint64_t result = swift_weakLoadStrong();
      if (result)
      {
        swift_retain();
        swift_release();
        sub_100A632D8(a9);
        return swift_release();
      }
    }
    else
    {
      return Future.finish(result:)();
    }
  }
  return result;
}

uint64_t sub_10038A974()
{
  static os_log_type_t.default.getter();
  if (qword_1016372A8 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_101342130;
  swift_getErrorValue();
  uint64_t v1 = Error.localizedDescription.getter();
  uint64_t v3 = v2;
  *(void *)(v0 + 56) = &type metadata for String;
  *(void *)(v0 + 64) = sub_10000B4CC();
  *(void *)(v0 + 32) = v1;
  *(void *)(v0 + 40) = v3;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  return Future.finish(error:)();
}

uint64_t sub_10038AA98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a1;
  *(void *)(v10 + 24) = a2;
  swift_retain();
  swift_retain();
  sub_1003ABBD0(a4, a5, a3, (void (*)(uint64_t, uint64_t))sub_1003B4058, v10);
  return swift_release_n();
}

uint64_t sub_10038AB34(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  if (!a1) {
    return a2(0, 0);
  }
  swift_errorRetain();
  a2(a1, 1);

  return swift_errorRelease();
}

uint64_t sub_10038ABAC(uint64_t result)
{
  if (result)
  {
    swift_errorRetain();
    static os_log_type_t.error.getter();
    if (qword_1016372A8 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v1 = swift_allocObject();
    *(_OWORD *)(v1 + 16) = xmmword_101342130;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v2 = String.init<A>(describing:)();
    uint64_t v4 = v3;
    *(void *)(v1 + 56) = &type metadata for String;
    *(void *)(v1 + 64) = sub_10000B4CC();
    *(void *)(v1 + 32) = v2;
    *(void *)(v1 + 40) = v4;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    return swift_errorRelease();
  }
  return result;
}

uint64_t sub_10038ACD4(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v33 = a4;
  uint64_t v11 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11);
  uint64_t v14 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v32 = static os_log_type_t.default.getter();
  if (a1)
  {
    if (qword_1016372A8 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_101342130;
    type metadata accessor for UUID();
    sub_100394110((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v20 = v19;
    *(void *)(v17 + 56) = &type metadata for String;
    *(void *)(v17 + 64) = sub_10000B4CC();
    *(void *)(v17 + 32) = v18;
    *(void *)(v17 + 40) = v20;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    return a3(a1);
  }
  else
  {
    v29[1] = a5;
    uint64_t v30 = a6;
    unint64_t v31 = a3;
    if (qword_1016372A8 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v22 = swift_allocObject();
    *(_OWORD *)(v22 + 16) = xmmword_101342130;
    uint64_t v23 = UUID.uuidString.getter();
    uint64_t v25 = v24;
    *(void *)(v22 + 56) = &type metadata for String;
    *(void *)(v22 + 64) = sub_10000B4CC();
    *(void *)(v22 + 32) = v23;
    *(void *)(v22 + 40) = v25;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    v31(0);
    sub_100A632D8(a2);
    uint64_t v26 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v16, 1, 1, v26);
    sub_1003B6E14(a2, (uint64_t)v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    unint64_t v27 = (*(unsigned __int8 *)(v12 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    unint64_t v28 = (void *)swift_allocObject();
    void v28[2] = 0;
    v28[3] = 0;
    v28[4] = v30;
    sub_1003B6008((uint64_t)v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v28 + v27, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    swift_retain();
    sub_1008F5E44((uint64_t)v16, (uint64_t)&unk_101642720, (uint64_t)v28);
    return swift_release();
  }
}

uint64_t sub_10038B0CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[20] = a4;
  v5[21] = a5;
  v5[22] = type metadata accessor for OwnedBeaconRecord();
  v5[23] = swift_task_alloc();
  v5[24] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for UUID();
  v5[25] = v6;
  v5[26] = *(void *)(v6 - 8);
  v5[27] = swift_task_alloc();
  return _swift_task_switch(sub_10038B1CC, 0, 0);
}

uint64_t sub_10038B1CC()
{
  uint64_t v1 = qword_1016375E8;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_101639240 + dword_101639240);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 224) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_10038B31C;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10038B31C(uint64_t a1)
{
  *(void *)(*(void *)v1 + 232) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10038B41C, 0, 0);
}

uint64_t sub_10038B41C()
{
  uint64_t v23 = v0;
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (v0[29])
  {
    uint64_t v3 = v0[21];
    uint64_t v2 = v0[22];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    UUID.init()();
    uint64_t v4 = v3 + *(int *)(v2 + 20);
    uint64_t v5 = (void *)swift_task_alloc();
    v0[30] = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_10038B880;
    uint64_t v6 = v0[27];
    return sub_1002CEEE8(v6, v4);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_10001CEC8();
    swift_allocError();
    *uint64_t v8 = 0xD000000000000016;
    v8[1] = 0x80000001013F9660;
    swift_willThrow();
    if (qword_101636A90 != -1) {
      swift_once();
    }
    uint64_t v9 = v0[23];
    uint64_t v10 = v0[21];
    uint64_t v11 = type metadata accessor for Logger();
    sub_100010324(v11, (uint64_t)qword_10170DDC8);
    sub_1003B6E14(v10, v9, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = v0[23];
      uint64_t v15 = swift_slowAlloc();
      unint64_t v21 = (void *)swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 141558531;
      v0[15] = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v15 + 12) = 2081;
      sub_100394110((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[16] = sub_1008FA0F0(v16, v17, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1003B61EC(v14, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      *(_WORD *)(v15 + 22) = 2114;
      swift_errorRetain();
      uint64_t v18 = _swift_stdlib_bridgeErrorToNSError();
      v0[17] = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v21 = v18;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Disable notify when found for beacon %{private,mask.hash}s, error - %{public}@", (uint8_t *)v15, 0x20u);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      uint64_t v19 = v0[23];
      swift_errorRelease();
      sub_1003B61EC(v19, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      swift_errorRelease();
      swift_errorRelease();
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v20 = (uint64_t (*)(void))v0[1];
    return v20();
  }
}

uint64_t sub_10038B880()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 248) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[26] + 8))(v2[27], v2[25]);
  if (v0) {
    uint64_t v3 = sub_10038BCA4;
  }
  else {
    uint64_t v3 = sub_10038B9E8;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_10038B9E8()
{
  os_log_type_t v13 = v0;
  if (qword_101636A90 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[24];
  uint64_t v2 = v0[21];
  uint64_t v3 = type metadata accessor for Logger();
  sub_100010324(v3, (uint64_t)qword_10170DDC8);
  sub_1003B6E14(v2, v1, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = v0[24];
    uint64_t v7 = swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 141558275;
    v0[18] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v7 + 12) = 2081;
    sub_100394110((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v8 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[19] = sub_1008FA0F0(v8, v9, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1003B61EC(v6, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Notify when found disabled for beacon %{private,mask.hash}s.", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1003B61EC(v0[24], (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  }
  swift_release();

  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = (uint64_t (*)(void))v0[1];
  return v10();
}

uint64_t sub_10038BCA4()
{
  uint64_t v16 = v0;
  swift_release();
  if (qword_101636A90 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[23];
  uint64_t v2 = v0[21];
  uint64_t v3 = type metadata accessor for Logger();
  sub_100010324(v3, (uint64_t)qword_10170DDC8);
  sub_1003B6E14(v2, v1, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = v0[23];
    uint64_t v7 = swift_slowAlloc();
    uint64_t v14 = (void *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 141558531;
    v0[15] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v7 + 12) = 2081;
    sub_100394110((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v8 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[16] = sub_1008FA0F0(v8, v9, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1003B61EC(v6, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    *(_WORD *)(v7 + 22) = 2114;
    swift_errorRetain();
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError();
    v0[17] = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v14 = v10;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Disable notify when found for beacon %{private,mask.hash}s, error - %{public}@", (uint8_t *)v7, 0x20u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    uint64_t v11 = v0[23];
    swift_errorRelease();
    sub_1003B61EC(v11, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(void))v0[1];
  return v12();
}

uint64_t sub_10038C024(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 176) = a1;
  *(void *)(v2 + 184) = a2;
  return _swift_task_switch(sub_10038C044, 0, 0);
}

uint64_t sub_10038C044()
{
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    if (qword_1016375E8 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
    if (*(void *)(v0 + 80))
    {
      sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
      swift_release();
      sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
      uint64_t v8 = (uint64_t (__cdecl *)())((char *)&dword_101639228 + dword_101639228);
      uint64_t v2 = (void *)swift_task_alloc();
      *(void *)(v0 + 192) = v2;
      *uint64_t v2 = v0;
      v2[1] = sub_10038C30C;
      return v8();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    static os_log_type_t.error.getter();
    if (qword_1016372A8 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v3 = swift_allocObject();
    *(_OWORD *)(v3 + 16) = xmmword_101342130;
    type metadata accessor for OwnedBeaconRecord();
    type metadata accessor for UUID();
    sub_100394110((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v4 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v6 = v5;
    *(void *)(v3 + 56) = &type metadata for String;
    *(void *)(v3 + 64) = sub_10000B4CC();
    *(void *)(v3 + 32) = v4;
    *(void *)(v3 + 40) = v6;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
    return v7();
  }
  return result;
}

uint64_t sub_10038C30C(uint64_t a1)
{
  *(void *)(*(void *)v1 + 200) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10038C40C, 0, 0);
}

uint64_t sub_10038C40C()
{
  uint64_t v1 = v0[25];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 2));
  if (v1)
  {
    uint64_t v2 = (void *)swift_task_alloc();
    v0[26] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10038C614;
    uint64_t v3 = v0[23];
    return sub_100111650(v3);
  }
  else
  {
    static os_log_type_t.error.getter();
    if (qword_1016372A8 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_101342130;
    type metadata accessor for OwnedBeaconRecord();
    type metadata accessor for UUID();
    sub_100394110((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v6 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v8 = v7;
    *(void *)(v5 + 56) = &type metadata for String;
    *(void *)(v5 + 64) = sub_10000B4CC();
    *(void *)(v5 + 32) = v6;
    *(void *)(v5 + 40) = v8;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
}

uint64_t sub_10038C614()
{
  *(void *)(*(void *)v1 + 216) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10038C788;
  }
  else {
    uint64_t v2 = sub_10038C728;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10038C728()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10038C788()
{
  static os_log_type_t.error.getter();
  if (qword_1016372A8 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_101347BA0;
  type metadata accessor for OwnedBeaconRecord();
  type metadata accessor for UUID();
  sub_100394110((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v2 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v4 = v3;
  *(void *)(v1 + 56) = &type metadata for String;
  unint64_t v5 = sub_10000B4CC();
  *(void *)(v1 + 64) = v5;
  *(void *)(v1 + 32) = v2;
  *(void *)(v1 + 40) = v4;
  swift_getErrorValue();
  uint64_t v6 = Error.localizedDescription.getter();
  *(void *)(v1 + 96) = &type metadata for String;
  *(void *)(v1 + 104) = v5;
  *(void *)(v1 + 72) = v6;
  *(void *)(v1 + 80) = v7;
  os_log(_:dso:log:_:_:)();
  swift_release();
  swift_bridgeObjectRelease();
  swift_errorRelease();
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_10038C964(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v24 = a4;
  uint64_t v9 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9 - 8);
  uint64_t v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1)
  {
    uint64_t v23 = v10;
    swift_errorRetain();
    v22[1] = static os_log_type_t.error.getter();
    if (qword_1016372A8 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v13 = swift_allocObject();
    *(_OWORD *)(v13 + 16) = xmmword_101342130;
    uint64_t v25 = a1;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v14 = String.init<A>(describing:)();
    uint64_t v16 = v15;
    *(void *)(v13 + 56) = &type metadata for String;
    *(void *)(v13 + 64) = sub_10000B4CC();
    *(void *)(v13 + 32) = v14;
    *(void *)(v13 + 40) = v16;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    uint64_t v10 = v23;
  }
  sub_1003B6E14(a3, (uint64_t)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for SharedBeaconRecord);
  unint64_t v17 = (*(unsigned __int8 *)(v10 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v18 = (v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = a1;
  sub_1003B6008((uint64_t)v12, v19 + v17, type metadata accessor for SharedBeaconRecord);
  uint64_t v20 = (void *)(v19 + v18);
  *uint64_t v20 = v24;
  v20[1] = a5;
  *(void *)(v19 + ((v18 + 23) & 0xFFFFFFFFFFFFFFF8)) = a2;
  swift_errorRetain();
  swift_retain();
  swift_retain();
  sub_100DBAB30(a3, (uint64_t)sub_1003B1E2C, v19);
  return swift_release();
}

uint64_t sub_10038CBF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t), uint64_t (*a6)(uint64_t))
{
  uint64_t v38 = a6;
  uint64_t v39 = a4;
  uint64_t v10 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v14 = &v35[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v13);
  uint64_t v16 = &v35[-v15];
  uint64_t v17 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v17 - 8);
  uint64_t v19 = &v35[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (a2)
  {
    uint64_t v38 = a5;
    if (qword_101636A90 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100010324(v20, (uint64_t)qword_10170DDC8);
    sub_1003B6E14(a3, (uint64_t)v14, type metadata accessor for SharedBeaconRecord);
    swift_errorRetain();
    swift_errorRetain();
    swift_errorRetain();
    swift_errorRetain();
    unint64_t v21 = Logger.logObject.getter();
    int v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, (os_log_type_t)v22))
    {
      int v36 = v22;
      uint64_t v23 = swift_slowAlloc();
      uint64_t v24 = (void *)swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      uint64_t v37 = v25;
      *(_DWORD *)uint64_t v23 = 141558787;
      uint64_t v40 = 1752392040;
      uint64_t v41 = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v23 + 12) = 2081;
      type metadata accessor for UUID();
      sub_100394110((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v40 = sub_1008FA0F0(v26, v27, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1003B61EC((uint64_t)v14, type metadata accessor for SharedBeaconRecord);
      *(_WORD *)(v23 + 22) = 2112;
      if (a1)
      {
        swift_errorRetain();
        uint64_t v28 = _swift_stdlib_bridgeErrorToNSError();
        uint64_t v40 = v28;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
      }
      else
      {
        uint64_t v40 = 0;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v28 = 0;
      }
      *uint64_t v24 = v28;
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v23 + 32) = 2114;
      swift_errorRetain();
      uint64_t v34 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v40 = v34;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v24[1] = v34;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, (os_log_type_t)v36, "Unpair for beacon %{private,mask.hash}s, success: %@, error: %{public}@.", (uint8_t *)v23, 0x2Au);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1003B61EC((uint64_t)v14, type metadata accessor for SharedBeaconRecord);
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }

    return v39(a2);
  }
  else
  {
    uint64_t v29 = type metadata accessor for TaskPriority();
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56))(v19, 1, 1, v29);
    sub_1003B6E14(a3, (uint64_t)v16, type metadata accessor for SharedBeaconRecord);
    unint64_t v30 = (*(unsigned __int8 *)(v11 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    unint64_t v31 = (void *)swift_allocObject();
    v31[2] = 0;
    v31[3] = 0;
    v31[4] = v38;
    sub_1003B6008((uint64_t)v16, (uint64_t)v31 + v30, type metadata accessor for SharedBeaconRecord);
    int v32 = (uint64_t (**)(uint64_t))((char *)v31 + ((v12 + v30 + 7) & 0xFFFFFFFFFFFFFFF8));
    char *v32 = v39;
    v32[1] = a5;
    swift_retain();
    swift_retain();
    sub_1008F5E44((uint64_t)v19, (uint64_t)&unk_101642740, (uint64_t)v31);
    return swift_release();
  }
}

uint64_t sub_10038D1BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[22] = a6;
  v7[23] = a7;
  v7[20] = a4;
  v7[21] = a5;
  v7[24] = type metadata accessor for SharedBeaconRecord(0);
  v7[25] = swift_task_alloc();
  v7[26] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for UUID();
  v7[27] = v8;
  v7[28] = *(void *)(v8 - 8);
  v7[29] = swift_task_alloc();
  return _swift_task_switch(sub_10038D2C0, 0, 0);
}

uint64_t sub_10038D2C0()
{
  uint64_t v1 = qword_1016375E8;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_101639240 + dword_101639240);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 240) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_10038D410;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10038D410(uint64_t a1)
{
  *(void *)(*(void *)v1 + 248) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10038D510, 0, 0);
}

uint64_t sub_10038D510()
{
  uint64_t v23 = v0;
  uint64_t v1 = v0 + 16;
  if (*(void *)(v0 + 248))
  {
    uint64_t v2 = *(void *)(v0 + 192);
    uint64_t v3 = *(void *)(v0 + 168);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    UUID.init()();
    uint64_t v4 = v3 + *(int *)(v2 + 20);
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v0 + 256) = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_10038D98C;
    uint64_t v6 = *(void *)(v0 + 232);
    return sub_1002CEEE8(v6, v4);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_10001CEC8();
    swift_allocError();
    *uint64_t v8 = 0xD000000000000016;
    v8[1] = 0x80000001013F9660;
    swift_willThrow();
    if (qword_101636A90 != -1) {
      swift_once();
    }
    uint64_t v9 = *(void *)(v0 + 200);
    uint64_t v10 = *(void *)(v0 + 168);
    uint64_t v11 = type metadata accessor for Logger();
    sub_100010324(v11, (uint64_t)qword_10170DDC8);
    sub_1003B6E14(v10, v9, type metadata accessor for SharedBeaconRecord);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = *(void *)(v0 + 200);
      uint64_t v15 = swift_slowAlloc();
      unint64_t v21 = (void *)swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 141558531;
      *(void *)(v0 + 120) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v15 + 12) = 2081;
      sub_100394110((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v0 + 128) = sub_1008FA0F0(v16, v17, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1003B61EC(v14, type metadata accessor for SharedBeaconRecord);
      *(_WORD *)(v15 + 22) = 2114;
      swift_errorRetain();
      uint64_t v18 = _swift_stdlib_bridgeErrorToNSError();
      *(void *)(v0 + 136) = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v21 = v18;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Disable notify when found for beacon %{private,mask.hash}s, error - %{public}@", (uint8_t *)v15, 0x20u);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      uint64_t v19 = *(void *)(v0 + 200);
      swift_errorRelease();
      sub_1003B61EC(v19, type metadata accessor for SharedBeaconRecord);
      swift_errorRelease();
      swift_errorRelease();
    }
    (*(void (**)(void))(v0 + 176))(0);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v20 = *(uint64_t (**)(void))(v0 + 8);
    return v20();
  }
}

uint64_t sub_10038D98C()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 264) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[28] + 8))(v2[29], v2[27]);
  if (v0) {
    uint64_t v3 = sub_10038DDC4;
  }
  else {
    uint64_t v3 = sub_10038DAF4;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_10038DAF4()
{
  uint64_t v13 = v0;
  if (qword_101636A90 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v3 = type metadata accessor for Logger();
  sub_100010324(v3, (uint64_t)qword_10170DDC8);
  sub_1003B6E14(v2, v1, type metadata accessor for SharedBeaconRecord);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = *(void *)(v0 + 208);
    uint64_t v7 = swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 141558275;
    *(void *)(v0 + 144) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v7 + 12) = 2081;
    sub_100394110((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v8 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 152) = sub_1008FA0F0(v8, v9, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1003B61EC(v6, type metadata accessor for SharedBeaconRecord);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Notify when found disabled for beacon %{private,mask.hash}s.", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1003B61EC(*(void *)(v0 + 208), type metadata accessor for SharedBeaconRecord);
  }
  swift_release();

  (*(void (**)(void))(v0 + 176))(0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
  return v10();
}

uint64_t sub_10038DDC4()
{
  uint64_t v16 = v0;
  swift_release();
  if (qword_101636A90 != -1) {
    swift_once();
  }
  uint64_t v1 = *(void *)(v0 + 200);
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v3 = type metadata accessor for Logger();
  sub_100010324(v3, (uint64_t)qword_10170DDC8);
  sub_1003B6E14(v2, v1, type metadata accessor for SharedBeaconRecord);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = *(void *)(v0 + 200);
    uint64_t v7 = swift_slowAlloc();
    uint64_t v14 = (void *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 141558531;
    *(void *)(v0 + 120) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v7 + 12) = 2081;
    sub_100394110((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v8 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 128) = sub_1008FA0F0(v8, v9, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1003B61EC(v6, type metadata accessor for SharedBeaconRecord);
    *(_WORD *)(v7 + 22) = 2114;
    swift_errorRetain();
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 136) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v14 = v10;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Disable notify when found for beacon %{private,mask.hash}s, error - %{public}@", (uint8_t *)v7, 0x20u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    uint64_t v11 = *(void *)(v0 + 200);
    swift_errorRelease();
    sub_1003B61EC(v11, type metadata accessor for SharedBeaconRecord);
    swift_errorRelease();
    swift_errorRelease();
  }
  (*(void (**)(void))(v0 + 176))(0);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

uint64_t sub_10038E158(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  if (a1)
  {
    swift_errorRetain();
    static os_log_type_t.error.getter();
    if (qword_1016372A8 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v3 = swift_allocObject();
    *(_OWORD *)(v3 + 16) = xmmword_101342130;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v4 = String.init<A>(describing:)();
    uint64_t v6 = v5;
    *(void *)(v3 + 56) = &type metadata for String;
    *(void *)(v3 + 64) = sub_10000B4CC();
    *(void *)(v3 + 32) = v4;
    *(void *)(v3 + 40) = v6;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    uint64_t v7 = swift_errorRelease();
  }
  else
  {
    static os_log_type_t.default.getter();
    if (qword_1016372A8 != -1) {
      swift_once();
    }
    uint64_t v7 = os_log(_:dso:log:_:_:)();
  }
  return a2(v7);
}

uint64_t sub_10038E300(void **a1, uint64_t (*a2)(void *))
{
  uint64_t v4 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  uint64_t v5 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v5 = (void *)sub_100B736B0(v5);
  }
  uint64_t v6 = v5[2];
  v8[0] = (char *)v5 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  v8[1] = v6;
  uint64_t result = a2(v8);
  *a1 = v5;
  return result;
}

id sub_10038E3B8(uint64_t a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v104 = a3;
  v103 = a2;
  uint64_t v107 = type metadata accessor for BeaconStoreFileRecord();
  uint64_t v101 = *(void *)(v107 - 8);
  __chkstk_darwin(v107);
  v100 = (char *)&v87 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(uint64_t (**)(uint64_t))(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  unint64_t v9 = (char *)&v87 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v92 = (char *)&v87 - v10;
  v110 = (void *)type metadata accessor for UUID();
  v108 = (uint64_t (*)(uint64_t))*(v110 - 1);
  uint64_t v11 = __chkstk_darwin(v110);
  v88 = (char *)&v87 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  v99 = (char *)&v87 - v14;
  __chkstk_darwin(v13);
  v91 = (char *)&v87 - v15;
  uint64_t v89 = sub_10000588C(&qword_1016426E8);
  __chkstk_darwin(v89);
  v90 = (char *)&v87 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v96 = *(void *)(v17 - 8);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v97 = v19;
  v98 = (char *)&v87 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  unint64_t v21 = (char *)&v87 - v20;
  static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  uint64_t v94 = sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v22 = swift_allocObject();
  long long v93 = xmmword_101342130;
  *(_OWORD *)(v22 + 16) = xmmword_101342130;
  sub_1003B6E14(a1, (uint64_t)v21, type metadata accessor for OwnedBeaconGroup);
  v106 = (int *)v17;
  uint64_t v23 = String.init<A>(describing:)();
  uint64_t v25 = v24;
  *(void *)(v22 + 56) = &type metadata for String;
  unint64_t v95 = sub_10000B4CC();
  *(void *)(v22 + 64) = v95;
  *(void *)(v22 + 32) = v23;
  *(void *)(v22 + 40) = v25;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  if (qword_101637188 != -1) {
    swift_once();
  }
  uint64_t v26 = (void *)qword_10170EE68;
  id v27 = [self sharedInstance];
  unsigned int v28 = [v27 isInternalBuild];

  if (v28)
  {
    NSString v29 = String._bridgeToObjectiveC()();
    unsigned int v30 = [v26 BOOLForKey:v29];
  }
  else
  {
    unsigned int v30 = 0;
  }
  id result = [self defaultStore];
  if (result)
  {
    int v32 = result;
    uint64_t v33 = v9;
    v102 = v6;
    id v34 = [result aa_primaryAppleAccount];

    uint64_t v35 = v105;
    uint64_t v109 = a1;
    if (v34 && (v34, (v30 & 1) == 0))
    {
      v100 = v21;
      sub_10001D4B0(0, &qword_10163CB60);
      uint64_t v51 = a1 + v106[6];
      uint64_t v52 = UUID.uuidString.getter();
      uint64_t v54 = v53;
      id v55 = v35[19];
      v56._countAndFlagsBits = v52;
      v56._object = v54;
      Class isa = CKRecordID.init(recordName:zoneID:)(v56, (CKRecordZoneID)v55).super.isa;
      sub_100AB24F0();
      v106 = (int *)isa;
      v99 = (char *)sub_101015AE0(isa);
      swift_release();
      v98 = (char *)swift_allocBox();
      uint64_t v58 = *(char **)(v101 + 56);
      uint64_t v89 = v59;
      v101 += 56;
      v88 = v58;
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v58)(v59, 1, 1, v107);
      id v60 = v35[20];
      uint64_t v61 = v108;
      uint64_t v62 = v91;
      (*((void (**)(char *, uint64_t, void *))v108 + 2))(v91, v51, v110);
      if (qword_101636B50 != -1) {
        swift_once();
      }
      uint64_t v63 = sub_100010324(v5, (uint64_t)qword_10170DF88);
      v64 = v102;
      v65 = v92;
      uint64_t v66 = (*((uint64_t (**)(char *, uint64_t, uint64_t))v102 + 2))(v92, v63, v5);
      __chkstk_darwin(v66);
      *(&v87 - 4) = (uint64_t)v60;
      *(&v87 - 3) = (uint64_t)v62;
      *(&v87 - 2) = (uint64_t)v65;
      uint64_t v67 = (uint64_t)v90;
      OS_dispatch_queue.sync<A>(execute:)();
      (*((void (**)(char *, uint64_t))v64 + 1))(v65, v5);
      (*((void (**)(char *, void *))v61 + 1))(v62, v110);
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v88)(v67, 0, 1, v107);
      sub_1003A9A40(v67, v89);
      unint64_t v68 = v95;
      uint64_t v69 = v106;
      static os_log_type_t.default.getter();
      uint64_t v70 = swift_allocObject();
      *(_OWORD *)(v70 + 16) = v93;
      v71 = v69;
      v110 = v71;
      id v72 = [v71 description];
      uint64_t v73 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v75 = v74;

      *(void *)(v70 + 56) = &type metadata for String;
      *(void *)(v70 + 64) = v68;
      *(void *)(v70 + 32) = v73;
      *(void *)(v70 + 40) = v75;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      v108 = type metadata accessor for OwnedBeaconGroup;
      uint64_t v76 = (uint64_t)v100;
      sub_1003B6E14(v109, (uint64_t)v100, type metadata accessor for OwnedBeaconGroup);
      uint64_t v77 = *(unsigned __int8 *)(v96 + 80);
      uint64_t v78 = (v77 + 32) & ~v77;
      unint64_t v79 = (v97 + v78 + 7) & 0xFFFFFFFFFFFFFFF8;
      v106 = (int *)(v79 + 16);
      uint64_t v107 = v77 | 7;
      uint64_t v80 = swift_allocObject();
      v81 = v98;
      *(void *)(v80 + 16) = v98;
      *(void *)(v80 + 24) = v35;
      v102 = type metadata accessor for OwnedBeaconGroup;
      sub_1003B6008(v76, v80 + v78, type metadata accessor for OwnedBeaconGroup);
      v82 = (void *)(v80 + v79);
      v84 = v103;
      uint64_t v83 = v104;
      void *v82 = v103;
      v82[1] = v83;
      swift_retain();
      swift_retain();
      swift_retain();
      Future.addSuccess(block:)();
      swift_release();
      swift_release();
      sub_1003B6E14(v109, v76, v108);
      uint64_t v85 = swift_allocObject();
      *(void *)(v85 + 16) = v81;
      *(void *)(v85 + 24) = v35;
      sub_1003B6008(v76, v85 + v78, v102);
      v86 = (void *)(v85 + v79);
      void *v86 = v84;
      v86[1] = v83;
      swift_retain();
      swift_retain();
      swift_retain();
      Future.addFailure(block:)();
      swift_release();
      swift_release();

      swift_release();
      return (id)swift_release();
    }
    else
    {
      uint64_t v36 = v5;
      if (qword_101636F50 != -1) {
        swift_once();
      }
      uint64_t v37 = type metadata accessor for Logger();
      uint64_t v101 = sub_100010324(v37, (uint64_t)qword_10170E9E8);
      uint64_t v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.info.getter();
      BOOL v40 = os_log_type_enabled(v38, v39);
      uint64_t v41 = v99;
      if (v40)
      {
        uint64_t v42 = v35;
        BOOL v43 = v34 != 0;
        uint64_t v44 = swift_slowAlloc();
        *(_DWORD *)uint64_t v44 = 67109376;
        LODWORD(v111) = v30;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v44 + 8) = 1024;
        LODWORD(v111) = v43;
        uint64_t v35 = v42;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "Skipping cloud delete. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v44, 0xEu);
        swift_slowDealloc();
      }

      id v45 = v35[20];
      uint64_t v46 = v109 + v106[6];
      v105 = (id *)*((void *)v108 + 2);
      ((void (*)(char *, uint64_t, void *))v105)(v41, v46, v110);
      if (qword_101636B50 != -1) {
        swift_once();
      }
      uint64_t v47 = sub_100010324(v36, (uint64_t)qword_10170DF88);
      uint64_t v48 = v102;
      uint64_t v49 = (*((uint64_t (**)(char *, uint64_t, uint64_t))v102 + 2))(v33, v47, v36);
      __chkstk_darwin(v49);
      *(&v87 - 4) = (uint64_t)v45;
      *(&v87 - 3) = (uint64_t)v41;
      *(&v87 - 2) = (uint64_t)v33;
      uint64_t v50 = (uint64_t)v100;
      OS_dispatch_queue.sync<A>(execute:)();
      (*((void (**)(char *, uint64_t))v48 + 1))(v33, v36);
      (*((void (**)(char *, void *))v108 + 1))(v41, v110);
      sub_100B79EF4(v50);
      QueueSynchronizer.conditionalSync<A>(_:)();
      sub_100A9E7EC(9);
      sub_100A9EE98();
      v103(0);
      return (id)sub_1003B61EC(v50, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_10038F420(uint64_t a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v104 = a3;
  v103 = a2;
  uint64_t v107 = type metadata accessor for BeaconStoreFileRecord();
  uint64_t v101 = *(void *)(v107 - 8);
  __chkstk_darwin(v107);
  v100 = (char *)&v87 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(uint64_t (**)())(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  unint64_t v9 = (char *)&v87 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v92 = (char *)&v87 - v10;
  v110 = (void *)type metadata accessor for UUID();
  v108 = (uint64_t (*)())*(v110 - 1);
  uint64_t v11 = __chkstk_darwin(v110);
  v88 = (char *)&v87 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  v99 = (char *)&v87 - v14;
  __chkstk_darwin(v13);
  v91 = (char *)&v87 - v15;
  uint64_t v89 = sub_10000588C(&qword_1016426E8);
  __chkstk_darwin(v89);
  v90 = (char *)&v87 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v96 = *(void *)(v17 - 8);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v97 = v19;
  v98 = (char *)&v87 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  unint64_t v21 = (char *)&v87 - v20;
  static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  uint64_t v94 = sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v22 = swift_allocObject();
  long long v93 = xmmword_101342130;
  *(_OWORD *)(v22 + 16) = xmmword_101342130;
  sub_1003B6E14(a1, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  v106 = (int *)v17;
  uint64_t v23 = String.init<A>(describing:)();
  uint64_t v25 = v24;
  *(void *)(v22 + 56) = &type metadata for String;
  unint64_t v95 = sub_10000B4CC();
  *(void *)(v22 + 64) = v95;
  *(void *)(v22 + 32) = v23;
  *(void *)(v22 + 40) = v25;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  if (qword_101637188 != -1) {
    swift_once();
  }
  uint64_t v26 = (void *)qword_10170EE68;
  id v27 = [self sharedInstance];
  unsigned int v28 = [v27 isInternalBuild];

  if (v28)
  {
    NSString v29 = String._bridgeToObjectiveC()();
    unsigned int v30 = [v26 BOOLForKey:v29];
  }
  else
  {
    unsigned int v30 = 0;
  }
  id result = [self defaultStore];
  if (result)
  {
    int v32 = result;
    uint64_t v33 = v9;
    v102 = v6;
    id v34 = [result aa_primaryAppleAccount];

    uint64_t v35 = v105;
    uint64_t v109 = a1;
    if (v34 && (v34, (v30 & 1) == 0))
    {
      v100 = v21;
      sub_10001D4B0(0, &qword_10163CB60);
      uint64_t v51 = a1 + v106[5];
      uint64_t v52 = UUID.uuidString.getter();
      uint64_t v54 = v53;
      id v55 = v35[19];
      v56._countAndFlagsBits = v52;
      v56._object = v54;
      Class isa = CKRecordID.init(recordName:zoneID:)(v56, (CKRecordZoneID)v55).super.isa;
      sub_100AB24F0();
      v106 = (int *)isa;
      v99 = (char *)sub_101015AE0(isa);
      swift_release();
      v98 = (char *)swift_allocBox();
      uint64_t v58 = *(char **)(v101 + 56);
      uint64_t v89 = v59;
      v101 += 56;
      v88 = v58;
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v58)(v59, 1, 1, v107);
      id v60 = v35[20];
      uint64_t v61 = v108;
      uint64_t v62 = v91;
      (*((void (**)(char *, uint64_t, void *))v108 + 2))(v91, v51, v110);
      if (qword_1016370B0 != -1) {
        swift_once();
      }
      uint64_t v63 = sub_100010324(v5, (uint64_t)qword_10170ECC0);
      v64 = v102;
      v65 = v92;
      uint64_t v66 = (*((uint64_t (**)(char *, uint64_t, uint64_t))v102 + 2))(v92, v63, v5);
      __chkstk_darwin(v66);
      *(&v87 - 4) = (uint64_t)v60;
      *(&v87 - 3) = (uint64_t)v62;
      *(&v87 - 2) = (uint64_t)v65;
      uint64_t v67 = (uint64_t)v90;
      OS_dispatch_queue.sync<A>(execute:)();
      (*((void (**)(char *, uint64_t))v64 + 1))(v65, v5);
      (*((void (**)(char *, void *))v61 + 1))(v62, v110);
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v88)(v67, 0, 1, v107);
      sub_1003A9A40(v67, v89);
      unint64_t v68 = v95;
      uint64_t v69 = v106;
      static os_log_type_t.default.getter();
      uint64_t v70 = swift_allocObject();
      *(_OWORD *)(v70 + 16) = v93;
      v71 = v69;
      v110 = v71;
      id v72 = [v71 description];
      uint64_t v73 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v75 = v74;

      *(void *)(v70 + 56) = &type metadata for String;
      *(void *)(v70 + 64) = v68;
      *(void *)(v70 + 32) = v73;
      *(void *)(v70 + 40) = v75;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      v108 = type metadata accessor for OwnedBeaconRecord;
      uint64_t v76 = (uint64_t)v100;
      sub_1003B6E14(v109, (uint64_t)v100, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      uint64_t v77 = *(unsigned __int8 *)(v96 + 80);
      uint64_t v78 = (v77 + 32) & ~v77;
      unint64_t v79 = (v97 + v78 + 7) & 0xFFFFFFFFFFFFFFF8;
      v106 = (int *)(v79 + 16);
      uint64_t v107 = v77 | 7;
      uint64_t v80 = swift_allocObject();
      v81 = v98;
      *(void *)(v80 + 16) = v98;
      *(void *)(v80 + 24) = v35;
      v102 = type metadata accessor for OwnedBeaconRecord;
      sub_1003B6008(v76, v80 + v78, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      v82 = (void *)(v80 + v79);
      v84 = v103;
      uint64_t v83 = v104;
      void *v82 = v103;
      v82[1] = v83;
      swift_retain();
      swift_retain();
      swift_retain();
      Future.addSuccess(block:)();
      swift_release();
      swift_release();
      sub_1003B6E14(v109, v76, (uint64_t (*)(void))v108);
      uint64_t v85 = swift_allocObject();
      *(void *)(v85 + 16) = v81;
      *(void *)(v85 + 24) = v35;
      sub_1003B6008(v76, v85 + v78, (uint64_t (*)(void))v102);
      v86 = (void *)(v85 + v79);
      void *v86 = v84;
      v86[1] = v83;
      swift_retain();
      swift_retain();
      swift_retain();
      Future.addFailure(block:)();
      swift_release();
      swift_release();

      swift_release();
      return (id)swift_release();
    }
    else
    {
      uint64_t v36 = v5;
      if (qword_101636F50 != -1) {
        swift_once();
      }
      uint64_t v37 = type metadata accessor for Logger();
      uint64_t v101 = sub_100010324(v37, (uint64_t)qword_10170E9E8);
      uint64_t v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.info.getter();
      BOOL v40 = os_log_type_enabled(v38, v39);
      uint64_t v41 = v99;
      if (v40)
      {
        uint64_t v42 = v35;
        BOOL v43 = v34 != 0;
        uint64_t v44 = swift_slowAlloc();
        *(_DWORD *)uint64_t v44 = 67109376;
        LODWORD(v111) = v30;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v44 + 8) = 1024;
        LODWORD(v111) = v43;
        uint64_t v35 = v42;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "Skipping cloud delete. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v44, 0xEu);
        swift_slowDealloc();
      }

      id v45 = v35[20];
      uint64_t v46 = v109 + v106[5];
      v105 = (id *)*((void *)v108 + 2);
      ((void (*)(char *, uint64_t, void *))v105)(v41, v46, v110);
      if (qword_1016370B0 != -1) {
        swift_once();
      }
      uint64_t v47 = sub_100010324(v36, (uint64_t)qword_10170ECC0);
      uint64_t v48 = v102;
      uint64_t v49 = (*((uint64_t (**)(char *, uint64_t, uint64_t))v102 + 2))(v33, v47, v36);
      __chkstk_darwin(v49);
      *(&v87 - 4) = (uint64_t)v45;
      *(&v87 - 3) = (uint64_t)v41;
      *(&v87 - 2) = (uint64_t)v33;
      uint64_t v50 = (uint64_t)v100;
      OS_dispatch_queue.sync<A>(execute:)();
      (*((void (**)(char *, uint64_t))v48 + 1))(v33, v36);
      (*((void (**)(char *, void *))v108 + 1))(v41, v110);
      sub_100B79EF4(v50);
      QueueSynchronizer.conditionalSync<A>(_:)();
      sub_100A9E7EC(9);
      sub_100A9EE98();
      v103(0);
      return (id)sub_1003B61EC(v50, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

id sub_100390488(uint64_t a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v104 = a3;
  v103 = a2;
  uint64_t v107 = type metadata accessor for BeaconStoreFileRecord();
  uint64_t v101 = *(void *)(v107 - 8);
  __chkstk_darwin(v107);
  v100 = (char *)&v87 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(uint64_t (**)(uint64_t))(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  unint64_t v9 = (char *)&v87 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  v92 = (char *)&v87 - v10;
  v110 = (void *)type metadata accessor for UUID();
  v108 = (uint64_t (*)(uint64_t))*(v110 - 1);
  uint64_t v11 = __chkstk_darwin(v110);
  v88 = (char *)&v87 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  v99 = (char *)&v87 - v14;
  __chkstk_darwin(v13);
  v91 = (char *)&v87 - v15;
  uint64_t v89 = sub_10000588C(&qword_1016426E8);
  __chkstk_darwin(v89);
  v90 = (char *)&v87 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v96 = *(void *)(v17 - 8);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v97 = v19;
  v98 = (char *)&v87 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  unint64_t v21 = (char *)&v87 - v20;
  static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  uint64_t v94 = sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v22 = swift_allocObject();
  long long v93 = xmmword_101342130;
  *(_OWORD *)(v22 + 16) = xmmword_101342130;
  sub_1003B6E14(a1, (uint64_t)v21, type metadata accessor for SharedBeaconRecord);
  v106 = (int *)v17;
  uint64_t v23 = String.init<A>(describing:)();
  uint64_t v25 = v24;
  *(void *)(v22 + 56) = &type metadata for String;
  unint64_t v95 = sub_10000B4CC();
  *(void *)(v22 + 64) = v95;
  *(void *)(v22 + 32) = v23;
  *(void *)(v22 + 40) = v25;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  if (qword_101637188 != -1) {
    swift_once();
  }
  uint64_t v26 = (void *)qword_10170EE68;
  id v27 = [self sharedInstance];
  unsigned int v28 = [v27 isInternalBuild];

  if (v28)
  {
    NSString v29 = String._bridgeToObjectiveC()();
    unsigned int v30 = [v26 BOOLForKey:v29];
  }
  else
  {
    unsigned int v30 = 0;
  }
  id result = [self defaultStore];
  if (result)
  {
    int v32 = result;
    uint64_t v33 = v9;
    v102 = v6;
    id v34 = [result aa_primaryAppleAccount];

    uint64_t v35 = v105;
    uint64_t v109 = a1;
    if (v34 && (v34, (v30 & 1) == 0))
    {
      v100 = v21;
      sub_10001D4B0(0, &qword_10163CB60);
      uint64_t v51 = a1 + v106[5];
      uint64_t v52 = UUID.uuidString.getter();
      uint64_t v54 = v53;
      id v55 = v35[19];
      v56._countAndFlagsBits = v52;
      v56._object = v54;
      Class isa = CKRecordID.init(recordName:zoneID:)(v56, (CKRecordZoneID)v55).super.isa;
      sub_100AB24F0();
      v106 = (int *)isa;
      v99 = (char *)sub_101015AE0(isa);
      swift_release();
      v98 = (char *)swift_allocBox();
      uint64_t v58 = *(char **)(v101 + 56);
      uint64_t v89 = v59;
      v101 += 56;
      v88 = v58;
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v58)(v59, 1, 1, v107);
      id v60 = v35[20];
      uint64_t v61 = v108;
      uint64_t v62 = v91;
      (*((void (**)(char *, uint64_t, void *))v108 + 2))(v91, v51, v110);
      if (qword_1016375F0 != -1) {
        swift_once();
      }
      uint64_t v63 = sub_100010324(v5, (uint64_t)qword_10170F760);
      v64 = v102;
      v65 = v92;
      uint64_t v66 = (*((uint64_t (**)(char *, uint64_t, uint64_t))v102 + 2))(v92, v63, v5);
      __chkstk_darwin(v66);
      *(&v87 - 4) = (uint64_t)v60;
      *(&v87 - 3) = (uint64_t)v62;
      *(&v87 - 2) = (uint64_t)v65;
      uint64_t v67 = (uint64_t)v90;
      OS_dispatch_queue.sync<A>(execute:)();
      (*((void (**)(char *, uint64_t))v64 + 1))(v65, v5);
      (*((void (**)(char *, void *))v61 + 1))(v62, v110);
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v88)(v67, 0, 1, v107);
      sub_1003A9A40(v67, v89);
      unint64_t v68 = v95;
      uint64_t v69 = v106;
      static os_log_type_t.default.getter();
      uint64_t v70 = swift_allocObject();
      *(_OWORD *)(v70 + 16) = v93;
      v71 = v69;
      v110 = v71;
      id v72 = [v71 description];
      uint64_t v73 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v75 = v74;

      *(void *)(v70 + 56) = &type metadata for String;
      *(void *)(v70 + 64) = v68;
      *(void *)(v70 + 32) = v73;
      *(void *)(v70 + 40) = v75;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      v108 = type metadata accessor for SharedBeaconRecord;
      uint64_t v76 = (uint64_t)v100;
      sub_1003B6E14(v109, (uint64_t)v100, type metadata accessor for SharedBeaconRecord);
      uint64_t v77 = *(unsigned __int8 *)(v96 + 80);
      uint64_t v78 = (v77 + 32) & ~v77;
      unint64_t v79 = (v97 + v78 + 7) & 0xFFFFFFFFFFFFFFF8;
      v106 = (int *)(v79 + 16);
      uint64_t v107 = v77 | 7;
      uint64_t v80 = swift_allocObject();
      v81 = v98;
      *(void *)(v80 + 16) = v98;
      *(void *)(v80 + 24) = v35;
      v102 = type metadata accessor for SharedBeaconRecord;
      sub_1003B6008(v76, v80 + v78, type metadata accessor for SharedBeaconRecord);
      v82 = (void *)(v80 + v79);
      v84 = v103;
      uint64_t v83 = v104;
      void *v82 = v103;
      v82[1] = v83;
      swift_retain();
      swift_retain();
      swift_retain();
      Future.addSuccess(block:)();
      swift_release();
      swift_release();
      sub_1003B6E14(v109, v76, v108);
      uint64_t v85 = swift_allocObject();
      *(void *)(v85 + 16) = v81;
      *(void *)(v85 + 24) = v35;
      sub_1003B6008(v76, v85 + v78, v102);
      v86 = (void *)(v85 + v79);
      void *v86 = v84;
      v86[1] = v83;
      swift_retain();
      swift_retain();
      swift_retain();
      Future.addFailure(block:)();
      swift_release();
      swift_release();

      swift_release();
      return (id)swift_release();
    }
    else
    {
      uint64_t v36 = v5;
      if (qword_101636F50 != -1) {
        swift_once();
      }
      uint64_t v37 = type metadata accessor for Logger();
      uint64_t v101 = sub_100010324(v37, (uint64_t)qword_10170E9E8);
      uint64_t v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.info.getter();
      BOOL v40 = os_log_type_enabled(v38, v39);
      uint64_t v41 = v99;
      if (v40)
      {
        uint64_t v42 = v35;
        BOOL v43 = v34 != 0;
        uint64_t v44 = swift_slowAlloc();
        *(_DWORD *)uint64_t v44 = 67109376;
        LODWORD(v111) = v30;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v44 + 8) = 1024;
        LODWORD(v111) = v43;
        uint64_t v35 = v42;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "Skipping cloud delete. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d", (uint8_t *)v44, 0xEu);
        swift_slowDealloc();
      }

      id v45 = v35[20];
      uint64_t v46 = v109 + v106[5];
      v105 = (id *)*((void *)v108 + 2);
      ((void (*)(char *, uint64_t, void *))v105)(v41, v46, v110);
      if (qword_1016375F0 != -1) {
        swift_once();
      }
      uint64_t v47 = sub_100010324(v36, (uint64_t)qword_10170F760);
      uint64_t v48 = v102;
      uint64_t v49 = (*((uint64_t (**)(char *, uint64_t, uint64_t))v102 + 2))(v33, v47, v36);
      __chkstk_darwin(v49);
      *(&v87 - 4) = (uint64_t)v45;
      *(&v87 - 3) = (uint64_t)v41;
      *(&v87 - 2) = (uint64_t)v33;
      uint64_t v50 = (uint64_t)v100;
      OS_dispatch_queue.sync<A>(execute:)();
      (*((void (**)(char *, uint64_t))v48 + 1))(v33, v36);
      (*((void (**)(char *, void *))v108 + 1))(v41, v110);
      sub_100B79EF4(v50);
      QueueSynchronizer.conditionalSync<A>(_:)();
      sub_100A9E7EC(9);
      sub_100A9EE98();
      v103(0);
      return (id)sub_1003B61EC(v50, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1003914F0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t a6)
{
  uint64_t v24 = a6;
  uint64_t v25 = a5;
  uint64_t v26 = a3;
  uint64_t v27 = a4;
  uint64_t v7 = sub_10000588C(&qword_1016426E8);
  __chkstk_darwin(v7 - 8);
  unint64_t v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for BeaconStoreFileRecord();
  uint64_t v10 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = swift_projectBox();
  v22[1] = static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_101342130;
  id v15 = a1;
  id v16 = [v15 description];
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v19 = v18;

  *(void *)(v14 + 56) = &type metadata for String;
  *(void *)(v14 + 64) = sub_10000B4CC();
  *(void *)(v14 + 32) = v17;
  *(void *)(v14 + 40) = v19;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  sub_10001D074(v13, (uint64_t)v9, &qword_1016426E8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v23) == 1)
  {
    sub_10001DAB4((uint64_t)v9, &qword_1016426E8);
  }
  else
  {
    sub_1003B6008((uint64_t)v9, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
    sub_100B79EF4((uint64_t)v12);
    sub_1003B61EC((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
  }
  sub_100A9E7EC(9);
  v25(0);
  sub_100A9EE98();
  v28[3] = type metadata accessor for OwnedBeaconGroup(0);
  v28[4] = sub_100394110(&qword_101642708, (void (*)(uint64_t))type metadata accessor for OwnedBeaconGroup);
  uint64_t v20 = sub_10001D958(v28);
  sub_1003B6E14(v27, (uint64_t)v20, type metadata accessor for OwnedBeaconGroup);
  PassthroughSubject.send(_:)();
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v28);
}

uint64_t sub_10039184C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t a6)
{
  uint64_t v26 = a6;
  uint64_t v27 = a5;
  uint64_t v28 = a4;
  uint64_t v7 = sub_10000588C(&qword_1016426E8);
  __chkstk_darwin(v7 - 8);
  unint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for BeaconStoreFileRecord();
  uint64_t v10 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v23 = (uint64_t)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = swift_projectBox();
  int v24 = static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_101342130;
  id v14 = a1;
  id v15 = [v14 description];
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = v17;

  *(void *)(v13 + 56) = &type metadata for String;
  *(void *)(v13 + 64) = sub_10000B4CC();
  *(void *)(v13 + 32) = v16;
  *(void *)(v13 + 40) = v18;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  sub_10001D074(v12, (uint64_t)v9, &qword_1016426E8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v25) == 1)
  {
    sub_10001DAB4((uint64_t)v9, &qword_1016426E8);
  }
  else
  {
    uint64_t v19 = v23;
    sub_1003B6008((uint64_t)v9, v23, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
    sub_100B79EF4(v19);
    sub_1003B61EC(v19, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
  }
  QueueSynchronizer.conditionalSync<A>(_:)();
  sub_100A9E7EC(9);
  v27(0);
  sub_100A9EE98();
  v29[3] = type metadata accessor for OwnedBeaconRecord();
  v29[4] = sub_100394110(&qword_10165DD40, (void (*)(uint64_t))type metadata accessor for OwnedBeaconRecord);
  uint64_t v20 = sub_10001D958(v29);
  sub_1003B6E14(v28, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  PassthroughSubject.send(_:)();
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v29);
}

uint64_t sub_100391BE8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t a6)
{
  uint64_t v24 = a6;
  uint64_t v25 = a5;
  uint64_t v26 = a3;
  uint64_t v27 = a4;
  uint64_t v7 = sub_10000588C(&qword_1016426E8);
  __chkstk_darwin(v7 - 8);
  unint64_t v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for BeaconStoreFileRecord();
  uint64_t v10 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = swift_projectBox();
  v22[1] = static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_101342130;
  id v15 = a1;
  id v16 = [v15 description];
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v19 = v18;

  *(void *)(v14 + 56) = &type metadata for String;
  *(void *)(v14 + 64) = sub_10000B4CC();
  *(void *)(v14 + 32) = v17;
  *(void *)(v14 + 40) = v19;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  sub_10001D074(v13, (uint64_t)v9, &qword_1016426E8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v23) == 1)
  {
    sub_10001DAB4((uint64_t)v9, &qword_1016426E8);
  }
  else
  {
    sub_1003B6008((uint64_t)v9, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
    sub_100B79EF4((uint64_t)v12);
    sub_1003B61EC((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
  }
  sub_100A9E7EC(9);
  v25(0);
  sub_100A9EE98();
  v28[3] = type metadata accessor for OwnedDeviceKeyRecord();
  v28[4] = sub_100394110(&qword_101642710, (void (*)(uint64_t))type metadata accessor for OwnedDeviceKeyRecord);
  uint64_t v20 = sub_10001D958(v28);
  sub_1003B6E14(v27, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
  PassthroughSubject.send(_:)();
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v28);
}

uint64_t sub_100391F44(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t a6)
{
  uint64_t v26 = a6;
  uint64_t v27 = a5;
  uint64_t v28 = a4;
  uint64_t v7 = sub_10000588C(&qword_1016426E8);
  __chkstk_darwin(v7 - 8);
  unint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for BeaconStoreFileRecord();
  uint64_t v10 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v23 = (uint64_t)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = swift_projectBox();
  int v24 = static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_101342130;
  id v14 = a1;
  id v15 = [v14 description];
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = v17;

  *(void *)(v13 + 56) = &type metadata for String;
  *(void *)(v13 + 64) = sub_10000B4CC();
  *(void *)(v13 + 32) = v16;
  *(void *)(v13 + 40) = v18;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  sub_10001D074(v12, (uint64_t)v9, &qword_1016426E8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v25) == 1)
  {
    sub_10001DAB4((uint64_t)v9, &qword_1016426E8);
  }
  else
  {
    uint64_t v19 = v23;
    sub_1003B6008((uint64_t)v9, v23, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
    sub_100B79EF4(v19);
    sub_1003B61EC(v19, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
  }
  QueueSynchronizer.conditionalSync<A>(_:)();
  sub_100A9E7EC(9);
  v27(0);
  sub_100A9EE98();
  v29[3] = type metadata accessor for SharedBeaconRecord(0);
  v29[4] = sub_100394110(&qword_101642730, (void (*)(uint64_t))type metadata accessor for SharedBeaconRecord);
  uint64_t v20 = sub_10001D958(v29);
  sub_1003B6E14(v28, (uint64_t)v20, type metadata accessor for SharedBeaconRecord);
  PassthroughSubject.send(_:)();
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v29);
}

uint64_t sub_1003922E0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t a6)
{
  uint64_t v24 = a6;
  uint64_t v25 = a5;
  uint64_t v26 = a3;
  uint64_t v27 = a4;
  uint64_t v7 = sub_10000588C(&qword_1016426E8);
  __chkstk_darwin(v7 - 8);
  unint64_t v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for BeaconStoreFileRecord();
  uint64_t v10 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = swift_projectBox();
  v22[1] = static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_101342130;
  id v15 = a1;
  id v16 = [v15 description];
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v19 = v18;

  *(void *)(v14 + 56) = &type metadata for String;
  *(void *)(v14 + 64) = sub_10000B4CC();
  *(void *)(v14 + 32) = v17;
  *(void *)(v14 + 40) = v19;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  sub_10001D074(v13, (uint64_t)v9, &qword_1016426E8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v23) == 1)
  {
    sub_10001DAB4((uint64_t)v9, &qword_1016426E8);
  }
  else
  {
    sub_1003B6008((uint64_t)v9, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
    sub_100B79EF4((uint64_t)v12);
    sub_1003B61EC((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
  }
  sub_100A9E7EC(9);
  v25(0);
  sub_100A9EE98();
  v28[3] = type metadata accessor for LostModeRecord();
  v28[4] = sub_100394110(&qword_101642880, (void (*)(uint64_t))type metadata accessor for LostModeRecord);
  uint64_t v20 = sub_10001D958(v28);
  sub_1003B6E14(v27, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
  PassthroughSubject.send(_:)();
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v28);
}

uint64_t sub_10039263C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t a6)
{
  uint64_t v24 = a6;
  uint64_t v25 = a5;
  uint64_t v26 = a3;
  uint64_t v27 = a4;
  uint64_t v7 = sub_10000588C(&qword_1016426E8);
  __chkstk_darwin(v7 - 8);
  unint64_t v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for BeaconStoreFileRecord();
  uint64_t v10 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = swift_projectBox();
  v22[1] = static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_101342130;
  id v15 = a1;
  id v16 = [v15 description];
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v19 = v18;

  *(void *)(v14 + 56) = &type metadata for String;
  *(void *)(v14 + 64) = sub_10000B4CC();
  *(void *)(v14 + 32) = v17;
  *(void *)(v14 + 40) = v19;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  sub_10001D074(v13, (uint64_t)v9, &qword_1016426E8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v23) == 1)
  {
    sub_10001DAB4((uint64_t)v9, &qword_1016426E8);
  }
  else
  {
    sub_1003B6008((uint64_t)v9, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
    sub_100B79EF4((uint64_t)v12);
    sub_1003B61EC((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
  }
  sub_100A9E7EC(9);
  v25(0);
  sub_100A9EE98();
  v28[3] = type metadata accessor for ShareRecord();
  v28[4] = sub_100394110(&qword_101642728, (void (*)(uint64_t))type metadata accessor for ShareRecord);
  uint64_t v20 = sub_10001D958(v28);
  sub_1003B6E14(v27, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for ShareRecord);
  PassthroughSubject.send(_:)();
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v28);
}

uint64_t sub_100392998(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t a6)
{
  uint64_t v26 = a6;
  uint64_t v27 = a5;
  uint64_t v28 = a4;
  uint64_t v7 = sub_10000588C(&qword_1016426E8);
  __chkstk_darwin(v7 - 8);
  unint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for BeaconStoreFileRecord();
  uint64_t v10 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v23 = (uint64_t)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = swift_projectBox();
  int v24 = static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_101342130;
  id v14 = a1;
  id v15 = [v14 description];
  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v18 = v17;

  *(void *)(v13 + 56) = &type metadata for String;
  *(void *)(v13 + 64) = sub_10000B4CC();
  *(void *)(v13 + 32) = v16;
  *(void *)(v13 + 40) = v18;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  sub_10001D074(v12, (uint64_t)v9, &qword_1016426E8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v25) == 1)
  {
    sub_10001DAB4((uint64_t)v9, &qword_1016426E8);
  }
  else
  {
    uint64_t v19 = v23;
    sub_1003B6008((uint64_t)v9, v23, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
    sub_100B79EF4(v19);
    sub_1003B61EC(v19, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
  }
  QueueSynchronizer.conditionalSync<A>(_:)();
  sub_100A9E7EC(9);
  v27(0);
  sub_100A9EE98();
  v29[3] = type metadata accessor for BeaconNamingRecord();
  v29[4] = sub_100394110(&qword_1016426F8, (void (*)(uint64_t))type metadata accessor for BeaconNamingRecord);
  uint64_t v20 = sub_10001D958(v29);
  sub_1003B6E14(v28, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
  PassthroughSubject.send(_:)();
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v29);
}

uint64_t sub_100392D34(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t a6)
{
  uint64_t v24 = a6;
  uint64_t v25 = a5;
  uint64_t v26 = a3;
  uint64_t v27 = a4;
  uint64_t v7 = sub_10000588C(&qword_1016426E8);
  __chkstk_darwin(v7 - 8);
  unint64_t v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for BeaconStoreFileRecord();
  uint64_t v10 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = swift_projectBox();
  v22[1] = static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_101342130;
  id v15 = a1;
  id v16 = [v15 description];
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v19 = v18;

  *(void *)(v14 + 56) = &type metadata for String;
  *(void *)(v14 + 64) = sub_10000B4CC();
  *(void *)(v14 + 32) = v17;
  *(void *)(v14 + 40) = v19;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  sub_10001D074(v13, (uint64_t)v9, &qword_1016426E8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v23) == 1)
  {
    sub_10001DAB4((uint64_t)v9, &qword_1016426E8);
  }
  else
  {
    sub_1003B6008((uint64_t)v9, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
    sub_100B79EF4((uint64_t)v12);
    sub_1003B61EC((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
  }
  sub_100A9E7EC(9);
  v25(0);
  sub_100A9EE98();
  v28[3] = type metadata accessor for SafeLocation();
  v28[4] = sub_100394110(&qword_1016429C0, (void (*)(uint64_t))type metadata accessor for SafeLocation);
  uint64_t v20 = sub_10001D958(v28);
  sub_1003B6E14(v27, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for SafeLocation);
  PassthroughSubject.send(_:)();
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v28);
}

uint64_t sub_100393090(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t a6)
{
  uint64_t v24 = a6;
  uint64_t v25 = a5;
  uint64_t v26 = a3;
  uint64_t v27 = a4;
  uint64_t v7 = sub_10000588C(&qword_1016426E8);
  __chkstk_darwin(v7 - 8);
  unint64_t v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for BeaconStoreFileRecord();
  uint64_t v10 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = swift_projectBox();
  v22[1] = static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_101342130;
  id v15 = a1;
  id v16 = [v15 description];
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v19 = v18;

  *(void *)(v14 + 56) = &type metadata for String;
  *(void *)(v14 + 64) = sub_10000B4CC();
  *(void *)(v14 + 32) = v17;
  *(void *)(v14 + 40) = v19;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  sub_10001D074(v13, (uint64_t)v9, &qword_1016426E8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v23) == 1)
  {
    sub_10001DAB4((uint64_t)v9, &qword_1016426E8);
  }
  else
  {
    sub_1003B6008((uint64_t)v9, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
    sub_100B79EF4((uint64_t)v12);
    sub_1003B61EC((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
  }
  sub_100A9E7EC(9);
  v25(0);
  sub_100A9EE98();
  v28[3] = type metadata accessor for LeashRecord();
  v28[4] = sub_100394110(&qword_1016429E0, (void (*)(uint64_t))type metadata accessor for LeashRecord);
  uint64_t v20 = sub_10001D958(v28);
  sub_1003B6E14(v27, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for LeashRecord);
  PassthroughSubject.send(_:)();
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v28);
}

uint64_t sub_1003933EC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t a6)
{
  uint64_t v24 = a6;
  uint64_t v25 = a5;
  uint64_t v26 = a3;
  uint64_t v27 = a4;
  uint64_t v7 = sub_10000588C(&qword_1016426E8);
  __chkstk_darwin(v7 - 8);
  unint64_t v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for BeaconStoreFileRecord();
  uint64_t v10 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = swift_projectBox();
  v22[1] = static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_101342130;
  id v15 = a1;
  id v16 = [v15 description];
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v19 = v18;

  *(void *)(v14 + 56) = &type metadata for String;
  *(void *)(v14 + 64) = sub_10000B4CC();
  *(void *)(v14 + 32) = v17;
  *(void *)(v14 + 40) = v19;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  sub_10001D074(v13, (uint64_t)v9, &qword_1016426E8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v23) == 1)
  {
    sub_10001DAB4((uint64_t)v9, &qword_1016426E8);
  }
  else
  {
    sub_1003B6008((uint64_t)v9, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
    sub_100B79EF4((uint64_t)v12);
    sub_1003B61EC((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
  }
  sub_100A9E7EC(9);
  v25(0);
  sub_100A9EE98();
  v28[3] = type metadata accessor for KeyAlignmentRecord();
  v28[4] = sub_100394110(&qword_101642700, (void (*)(uint64_t))type metadata accessor for KeyAlignmentRecord);
  uint64_t v20 = sub_10001D958(v28);
  sub_1003B6E14(v27, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
  PassthroughSubject.send(_:)();
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v28);
}

uint64_t sub_100393748(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t a6)
{
  uint64_t v24 = a6;
  uint64_t v25 = a5;
  uint64_t v26 = a3;
  uint64_t v27 = a4;
  uint64_t v7 = sub_10000588C(&qword_1016426E8);
  __chkstk_darwin(v7 - 8);
  unint64_t v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for BeaconStoreFileRecord();
  uint64_t v10 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = swift_projectBox();
  v22[1] = static os_log_type_t.default.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_101342130;
  id v15 = a1;
  id v16 = [v15 description];
  uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v19 = v18;

  *(void *)(v14 + 56) = &type metadata for String;
  *(void *)(v14 + 64) = sub_10000B4CC();
  *(void *)(v14 + 32) = v17;
  *(void *)(v14 + 40) = v19;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  swift_beginAccess();
  sub_10001D074(v13, (uint64_t)v9, &qword_1016426E8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v23) == 1)
  {
    sub_10001DAB4((uint64_t)v9, &qword_1016426E8);
  }
  else
  {
    sub_1003B6008((uint64_t)v9, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
    sub_100B79EF4((uint64_t)v12);
    sub_1003B61EC((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
  }
  sub_100A9E7EC(9);
  v25(0);
  sub_100A9EE98();
  v28[3] = type metadata accessor for BeaconEstimatedLocation();
  v28[4] = sub_100394110(&qword_1016426F0, (void (*)(uint64_t))type metadata accessor for BeaconEstimatedLocation);
  uint64_t v20 = sub_10001D958(v28);
  sub_1003B6E14(v27, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
  PassthroughSubject.send(_:)();
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v28);
}

uint64_t sub_100393AA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t))
{
  uint64_t v7 = sub_10000588C(&qword_1016426E8);
  __chkstk_darwin(v7 - 8);
  unint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for BeaconStoreFileRecord();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = swift_projectBox();
  swift_beginAccess();
  sub_10001D074(v14, (uint64_t)v9, &qword_1016426E8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_10001DAB4((uint64_t)v9, &qword_1016426E8);
  }
  else
  {
    sub_1003B6008((uint64_t)v9, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
    sub_100B7AE38((uint64_t)v13);
    sub_1003B61EC((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
  }
  static os_log_type_t.error.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_101347BA0;
  type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v16 = UUID.uuidString.getter();
  uint64_t v18 = v17;
  *(void *)(v15 + 56) = &type metadata for String;
  unint64_t v19 = sub_10000B4CC();
  *(void *)(v15 + 64) = v19;
  *(void *)(v15 + 32) = v16;
  *(void *)(v15 + 40) = v18;
  uint64_t v23 = a1;
  swift_errorRetain();
  sub_10000588C(&qword_101638D40);
  uint64_t v20 = String.init<A>(describing:)();
  *(void *)(v15 + 96) = &type metadata for String;
  *(void *)(v15 + 104) = v19;
  *(void *)(v15 + 72) = v20;
  *(void *)(v15 + 80) = v21;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  return a5(a1);
}

uint64_t sub_100393D74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t), uint64_t a6)
{
  return sub_100393D8C(a1, a2, a3, a4, a5, a6, (void (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
}

uint64_t sub_100393D8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t), uint64_t a6, void (*a7)(void))
{
  uint64_t v26 = a5;
  uint64_t v9 = sub_10000588C(&qword_1016426E8);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for BeaconStoreFileRecord();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = swift_projectBox();
  swift_beginAccess();
  sub_10001D074(v16, (uint64_t)v11, &qword_1016426E8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    sub_10001DAB4((uint64_t)v11, &qword_1016426E8);
  }
  else
  {
    sub_1003B6008((uint64_t)v11, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
    sub_100B7AE38((uint64_t)v15);
    sub_1003B61EC((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for BeaconStoreFileRecord);
  }
  static os_log_type_t.error.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_101347BA0;
  a7(0);
  uint64_t v18 = UUID.uuidString.getter();
  uint64_t v20 = v19;
  *(void *)(v17 + 56) = &type metadata for String;
  unint64_t v21 = sub_10000B4CC();
  *(void *)(v17 + 64) = v21;
  *(void *)(v17 + 32) = v18;
  *(void *)(v17 + 40) = v20;
  uint64_t v27 = a1;
  swift_errorRetain();
  sub_10000588C(&qword_101638D40);
  uint64_t v22 = String.init<A>(describing:)();
  *(void *)(v17 + 96) = &type metadata for String;
  *(void *)(v17 + 104) = v21;
  *(void *)(v17 + 72) = v22;
  *(void *)(v17 + 80) = v23;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  return v26(a1);
}

uint64_t sub_100394068(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t), uint64_t a6)
{
  return sub_100393D8C(a1, a2, a3, a4, a5, a6, (void (*)(void))type metadata accessor for LostModeRecord);
}

uint64_t sub_100394080(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t), uint64_t a6)
{
  return sub_100393D8C(a1, a2, a3, a4, a5, a6, (void (*)(void))type metadata accessor for ShareRecord);
}

uint64_t sub_100394098(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t), uint64_t a6)
{
  return sub_100393D8C(a1, a2, a3, a4, a5, a6, (void (*)(void))type metadata accessor for BeaconNamingRecord);
}

uint64_t sub_1003940B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t), uint64_t a6)
{
  return sub_100393D8C(a1, a2, a3, a4, a5, a6, (void (*)(void))type metadata accessor for SafeLocation);
}

uint64_t sub_1003940C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t), uint64_t a6)
{
  return sub_100393D8C(a1, a2, a3, a4, a5, a6, (void (*)(void))type metadata accessor for LeashRecord);
}

uint64_t sub_1003940E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t), uint64_t a6)
{
  return sub_100393D8C(a1, a2, a3, a4, a5, a6, (void (*)(void))type metadata accessor for KeyAlignmentRecord);
}

uint64_t sub_1003940F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t), uint64_t a6)
{
  return sub_100393D8C(a1, a2, a3, a4, a5, a6, (void (*)(void))type metadata accessor for BeaconEstimatedLocation);
}

uint64_t sub_100394110(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100394158@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result)) {
      goto LABEL_7;
    }
    v11 += a1 - result;
  }
  if (!__OFSUB__(a2, a1))
  {
    __DataStorage._length.getter();
    sub_100A915E8(v11, a3, a4, a5);
    return swift_release();
  }
  __break(1u);
LABEL_7:
  __break(1u);
  return result;
}

Swift::Int sub_100394214(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v141 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v134 = *(void *)(v141 - 8);
  uint64_t v4 = __chkstk_darwin(v141);
  uint64_t v131 = (uint64_t)&v125 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v142 = (uint64_t)&v125 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v138 = (uint64_t)&v125 - v9;
  __chkstk_darwin(v8);
  uint64_t v137 = (uint64_t)&v125 - v10;
  Swift::Int v11 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v11);
  if (result >= v11)
  {
    if (v11 < 0) {
      goto LABEL_142;
    }
    if (v11) {
      return sub_100396E04(0, v11, 1, a1);
    }
    return result;
  }
  if (v11 >= 0) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v11 + 1;
  }
  if (v11 < -1) {
    goto LABEL_150;
  }
  Swift::Int v127 = result;
  if (v11 < 2)
  {
    uint64_t v17 = _swiftEmptyArrayStorage;
    unint64_t v133 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v134 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v134 + 80));
    if (v11 != 1)
    {
      unint64_t v20 = _swiftEmptyArrayStorage[2];
      uint64_t v19 = (char *)_swiftEmptyArrayStorage;
LABEL_107:
      v126 = v17;
      if (v20 >= 2)
      {
        Swift::Int v117 = *a1;
        do
        {
          unint64_t v118 = v20 - 2;
          if (v20 < 2) {
            goto LABEL_137;
          }
          if (!v117) {
            goto LABEL_149;
          }
          v119 = v19;
          v120 = v19 + 32;
          uint64_t v121 = *(void *)&v19[16 * v118 + 32];
          uint64_t v122 = *(void *)&v19[16 * v20 + 24];
          sub_100397DF4(v117 + *(void *)(v134 + 72) * v121, v117 + *(void *)(v134 + 72) * *(void *)&v120[16 * v20 - 16], v117 + *(void *)(v134 + 72) * v122, v133);
          if (v2) {
            break;
          }
          if (v122 < v121) {
            goto LABEL_138;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            v119 = sub_100B73584((uint64_t)v119);
          }
          if (v118 >= *((void *)v119 + 2)) {
            goto LABEL_139;
          }
          v123 = &v119[16 * v118 + 32];
          *(void *)v123 = v121;
          *((void *)v123 + 1) = v122;
          unint64_t v124 = *((void *)v119 + 2);
          if (v20 > v124) {
            goto LABEL_140;
          }
          uint64_t v19 = v119;
          memmove(&v119[16 * v20 + 16], &v119[16 * v20 + 32], 16 * (v124 - v20));
          *((void *)v119 + 2) = v124 - 1;
          unint64_t v20 = v124 - 1;
        }
        while (v124 > 2);
      }
LABEL_118:
      swift_bridgeObjectRelease();
      v126[2] = 0;
      return swift_bridgeObjectRelease();
    }
    v126 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v14 = v13 >> 1;
    uint64_t v15 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v15 + 16) = v14;
    uint64_t v16 = *(unsigned __int8 *)(v134 + 80);
    v126 = (void *)v15;
    unint64_t v133 = v15 + ((v16 + 32) & ~v16);
  }
  Swift::Int v18 = 0;
  uint64_t v19 = (char *)_swiftEmptyArrayStorage;
  v140 = a1;
  while (1)
  {
    Swift::Int v21 = v18;
    Swift::Int v22 = v18 + 1;
    Swift::Int v132 = v18;
    if (v18 + 1 >= v11)
    {
      Swift::Int v39 = v18 + 1;
      goto LABEL_59;
    }
    uint64_t v129 = v2;
    Swift::Int v23 = *(void *)(v134 + 72);
    uint64_t v24 = *a1 + v23 * v22;
    Swift::Int v136 = *a1;
    Swift::Int v25 = v136;
    uint64_t v26 = v137;
    sub_1003B6E14(v24, v137, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v27 = v25 + v23 * v21;
    uint64_t v28 = v138;
    sub_1003B6E14(v27, v138, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    LODWORD(v139) = static Date.< infix(_:_:)();
    sub_1003B61EC(v28, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v29 = v26;
    Swift::Int v30 = v136;
    sub_1003B61EC(v29, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    Swift::Int v143 = v23;
    if (v21 + 2 >= v11)
    {
      Swift::Int v33 = v21 + 2;
    }
    else
    {
      Swift::Int v31 = v23;
      v128 = v19;
      uint64_t v32 = v23 * v22;
      Swift::Int v33 = v21 + 2;
      uint64_t v34 = v31 * (v21 + 2);
      while (1)
      {
        Swift::Int v35 = v11;
        uint64_t v36 = v137;
        sub_1003B6E14(v30 + v34, v137, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        uint64_t v37 = v138;
        sub_1003B6E14(v30 + v32, v138, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        int v38 = static Date.< infix(_:_:)();
        sub_1003B61EC(v37, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        sub_1003B61EC(v36, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        if ((v139 ^ v38)) {
          break;
        }
        v30 += v143;
        ++v33;
        Swift::Int v11 = v35;
        if (v35 == v33)
        {
          Swift::Int v33 = v35;
          uint64_t v19 = v128;
          Swift::Int v21 = v132;
          goto LABEL_25;
        }
      }
      uint64_t v19 = v128;
      Swift::Int v21 = v132;
      Swift::Int v11 = v35;
    }
LABEL_25:
    a1 = v140;
    if ((v139 & 1) == 0)
    {
      Swift::Int v39 = v33;
      goto LABEL_39;
    }
    if (v33 < v21) {
      goto LABEL_143;
    }
    Swift::Int v39 = v33;
    if (v21 < v33) {
      break;
    }
LABEL_39:
    uint64_t v2 = v129;
    if (v39 < v11) {
      goto LABEL_42;
    }
LABEL_59:
    if (v39 < v21) {
      goto LABEL_136;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    Swift::Int v139 = v39;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      uint64_t v19 = sub_100B729CC(0, *((void *)v19 + 2) + 1, 1, v19);
    }
    unint64_t v66 = *((void *)v19 + 2);
    unint64_t v65 = *((void *)v19 + 3);
    unint64_t v20 = v66 + 1;
    if (v66 >= v65 >> 1) {
      uint64_t v19 = sub_100B729CC((char *)(v65 > 1), v66 + 1, 1, v19);
    }
    *((void *)v19 + 2) = v20;
    uint64_t v67 = v19 + 32;
    unint64_t v68 = &v19[16 * v66 + 32];
    Swift::Int v69 = v139;
    *(void *)unint64_t v68 = v21;
    *((void *)v68 + 1) = v69;
    if (v66)
    {
      while (1)
      {
        unint64_t v70 = v20 - 1;
        if (v20 >= 4)
        {
          uint64_t v75 = &v67[16 * v20];
          uint64_t v76 = *((void *)v75 - 8);
          uint64_t v77 = *((void *)v75 - 7);
          BOOL v81 = __OFSUB__(v77, v76);
          uint64_t v78 = v77 - v76;
          if (v81) {
            goto LABEL_125;
          }
          uint64_t v80 = *((void *)v75 - 6);
          uint64_t v79 = *((void *)v75 - 5);
          BOOL v81 = __OFSUB__(v79, v80);
          uint64_t v73 = v79 - v80;
          char v74 = v81;
          if (v81) {
            goto LABEL_126;
          }
          unint64_t v82 = v20 - 2;
          uint64_t v83 = &v67[16 * v20 - 32];
          uint64_t v85 = *(void *)v83;
          uint64_t v84 = *((void *)v83 + 1);
          BOOL v81 = __OFSUB__(v84, v85);
          uint64_t v86 = v84 - v85;
          if (v81) {
            goto LABEL_128;
          }
          BOOL v81 = __OFADD__(v73, v86);
          uint64_t v87 = v73 + v86;
          if (v81) {
            goto LABEL_131;
          }
          if (v87 >= v78)
          {
            v105 = &v67[16 * v70];
            uint64_t v107 = *(void *)v105;
            uint64_t v106 = *((void *)v105 + 1);
            BOOL v81 = __OFSUB__(v106, v107);
            uint64_t v108 = v106 - v107;
            if (v81) {
              goto LABEL_135;
            }
            BOOL v98 = v73 < v108;
            goto LABEL_96;
          }
        }
        else
        {
          if (v20 != 3)
          {
            uint64_t v99 = *((void *)v19 + 4);
            uint64_t v100 = *((void *)v19 + 5);
            BOOL v81 = __OFSUB__(v100, v99);
            uint64_t v92 = v100 - v99;
            char v93 = v81;
            goto LABEL_90;
          }
          uint64_t v72 = *((void *)v19 + 4);
          uint64_t v71 = *((void *)v19 + 5);
          BOOL v81 = __OFSUB__(v71, v72);
          uint64_t v73 = v71 - v72;
          char v74 = v81;
        }
        if (v74) {
          goto LABEL_127;
        }
        unint64_t v82 = v20 - 2;
        v88 = &v67[16 * v20 - 32];
        uint64_t v90 = *(void *)v88;
        uint64_t v89 = *((void *)v88 + 1);
        BOOL v91 = __OFSUB__(v89, v90);
        uint64_t v92 = v89 - v90;
        char v93 = v91;
        if (v91) {
          goto LABEL_130;
        }
        uint64_t v94 = &v67[16 * v70];
        uint64_t v96 = *(void *)v94;
        uint64_t v95 = *((void *)v94 + 1);
        BOOL v81 = __OFSUB__(v95, v96);
        uint64_t v97 = v95 - v96;
        if (v81) {
          goto LABEL_133;
        }
        if (__OFADD__(v92, v97)) {
          goto LABEL_134;
        }
        if (v92 + v97 >= v73)
        {
          BOOL v98 = v73 < v97;
LABEL_96:
          if (v98) {
            unint64_t v70 = v82;
          }
          goto LABEL_98;
        }
LABEL_90:
        if (v93) {
          goto LABEL_129;
        }
        uint64_t v101 = &v67[16 * v70];
        uint64_t v103 = *(void *)v101;
        uint64_t v102 = *((void *)v101 + 1);
        BOOL v81 = __OFSUB__(v102, v103);
        uint64_t v104 = v102 - v103;
        if (v81) {
          goto LABEL_132;
        }
        if (v104 < v92) {
          goto LABEL_15;
        }
LABEL_98:
        unint64_t v109 = v70 - 1;
        if (v70 - 1 >= v20)
        {
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
          goto LABEL_145;
        }
        Swift::Int v110 = *a1;
        if (!*a1) {
          goto LABEL_147;
        }
        uint64_t v111 = v19;
        v112 = &v67[16 * v109];
        uint64_t v113 = *(void *)v112;
        v114 = &v67[16 * v70];
        uint64_t v115 = *((void *)v114 + 1);
        sub_100397DF4(v110 + *(void *)(v134 + 72) * *(void *)v112, v110 + *(void *)(v134 + 72) * *(void *)v114, v110 + *(void *)(v134 + 72) * v115, v133);
        if (v2) {
          goto LABEL_118;
        }
        if (v115 < v113) {
          goto LABEL_122;
        }
        if (v70 > *((void *)v111 + 2)) {
          goto LABEL_123;
        }
        *(void *)v112 = v113;
        *(void *)&v67[16 * v109 + 8] = v115;
        unint64_t v116 = *((void *)v111 + 2);
        if (v70 >= v116) {
          goto LABEL_124;
        }
        uint64_t v19 = v111;
        unint64_t v20 = v116 - 1;
        memmove(&v67[16 * v70], v114 + 16, 16 * (v116 - 1 - v70));
        *((void *)v111 + 2) = v116 - 1;
        a1 = v140;
        if (v116 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v20 = 1;
LABEL_15:
    Swift::Int v11 = a1[1];
    Swift::Int v18 = v139;
    if (v139 >= v11)
    {
      uint64_t v17 = v126;
      goto LABEL_107;
    }
  }
  Swift::Int v139 = v11;
  v128 = v19;
  uint64_t v40 = 0;
  Swift::Int v41 = v143;
  uint64_t v42 = v143 * (v33 - 1);
  Swift::Int v43 = v33 * v143;
  Swift::Int v44 = v21;
  uint64_t v45 = v21 * v143;
  do
  {
    if (v44 != v39 + v40 - 1)
    {
      Swift::Int v46 = v136;
      if (!v136) {
        goto LABEL_148;
      }
      unint64_t v47 = v136 + v45;
      uint64_t v48 = v136 + v42;
      sub_1003B6008(v136 + v45, v131, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      if (v45 < v42 || v47 >= v46 + v43)
      {
        swift_arrayInitWithTakeFrontToBack();
        Swift::Int v41 = v143;
      }
      else
      {
        Swift::Int v41 = v143;
        if (v45 != v42) {
          swift_arrayInitWithTakeBackToFront();
        }
      }
      sub_1003B6008(v131, v48, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      a1 = v140;
      Swift::Int v39 = v33;
    }
    ++v44;
    --v40;
    v42 -= v41;
    v43 -= v41;
    v45 += v41;
  }
  while (v44 < v39 + v40);
  uint64_t v19 = v128;
  uint64_t v2 = v129;
  Swift::Int v21 = v132;
  Swift::Int v11 = v139;
  if (v39 >= v139) {
    goto LABEL_59;
  }
LABEL_42:
  if (__OFSUB__(v39, v21)) {
    goto LABEL_141;
  }
  if (v39 - v21 >= v127) {
    goto LABEL_59;
  }
  if (__OFADD__(v21, v127)) {
    goto LABEL_144;
  }
  if (v21 + v127 >= v11) {
    Swift::Int v49 = v11;
  }
  else {
    Swift::Int v49 = v21 + v127;
  }
  if (v49 >= v21)
  {
    if (v39 != v49)
    {
      v128 = v19;
      uint64_t v129 = v2;
      uint64_t v50 = *(void *)(v134 + 72);
      uint64_t v51 = v50 * (v39 - 1);
      uint64_t v135 = v50;
      Swift::Int v52 = v39 * v50;
      Swift::Int v130 = v49;
      do
      {
        uint64_t v54 = 0;
        Swift::Int v139 = v39;
        Swift::Int v136 = v52;
        while (1)
        {
          Swift::Int v143 = v21;
          Swift::Int v55 = *a1;
          uint64_t v56 = v137;
          sub_1003B6E14(v52 + v54 + *a1, v137, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
          uint64_t v57 = v51;
          uint64_t v58 = v51 + v54 + v55;
          uint64_t v59 = a1;
          uint64_t v60 = v138;
          sub_1003B6E14(v58, v138, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
          char v61 = static Date.< infix(_:_:)();
          sub_1003B61EC(v60, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
          sub_1003B61EC(v56, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
          if ((v61 & 1) == 0) {
            break;
          }
          uint64_t v62 = *v59;
          if (!*v59) {
            goto LABEL_146;
          }
          Swift::Int v52 = v136;
          uint64_t v51 = v57;
          uint64_t v63 = v62 + v57 + v54;
          sub_1003B6008(v62 + v136 + v54, v142, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
          swift_arrayInitWithTakeFrontToBack();
          sub_1003B6008(v142, v63, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
          v54 -= v135;
          Swift::Int v21 = v143 + 1;
          Swift::Int v53 = v139;
          a1 = v140;
          if (v139 == v143 + 1) {
            goto LABEL_52;
          }
        }
        Swift::Int v53 = v139;
        a1 = v59;
        uint64_t v51 = v57;
        Swift::Int v52 = v136;
LABEL_52:
        Swift::Int v39 = v53 + 1;
        v51 += v135;
        v52 += v135;
        Swift::Int v21 = v132;
      }
      while (v39 != v130);
      Swift::Int v39 = v130;
      uint64_t v19 = v128;
      uint64_t v2 = v129;
    }
    goto LABEL_59;
  }
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

Swift::Int sub_100394CF0(void **a1)
{
  uint64_t v2 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  v287 = (char *)&v266 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v266 - v6;
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v266 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v266 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  v273 = (char *)&v266 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  v272 = (char *)&v266 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v280 = (uint64_t)&v266 - v19;
  __chkstk_darwin(v18);
  uint64_t v278 = (uint64_t)&v266 - v20;
  uint64_t v21 = type metadata accessor for Date();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = __chkstk_darwin(v21);
  Swift::Int v25 = (char *)&v266 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __chkstk_darwin(v23);
  v310 = (char *)&v266 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  v277 = (char *)&v266 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  v283 = (char *)&v266 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v268 = (uint64_t)&v266 - v33;
  __chkstk_darwin(v32);
  uint64_t v271 = (uint64_t)&v266 - v34;
  uint64_t v292 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v285 = *(void *)(v292 - 8);
  uint64_t v35 = __chkstk_darwin(v292);
  uint64_t v276 = (uint64_t)&v266 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = __chkstk_darwin(v35);
  uint64_t v305 = (uint64_t)&v266 - v38;
  uint64_t v39 = __chkstk_darwin(v37);
  uint64_t v313 = (uint64_t)&v266 - v40;
  uint64_t v41 = __chkstk_darwin(v39);
  v309 = (uint64_t *)((char *)&v266 - v42);
  uint64_t v43 = __chkstk_darwin(v41);
  uint64_t v286 = (uint64_t)&v266 - v44;
  uint64_t v45 = __chkstk_darwin(v43);
  uint64_t v282 = (uint64_t)&v266 - v46;
  uint64_t v47 = __chkstk_darwin(v45);
  Swift::Int v49 = (uint64_t *)((char *)&v266 - v48);
  __chkstk_darwin(v47);
  v270 = (uint64_t *)((char *)&v266 - v50);
  v311 = a1;
  Swift::Int v51 = (Swift::Int)a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v51);
  if (result >= v51)
  {
    if (v51 < 0) {
      goto LABEL_229;
    }
    if (v51) {
      return sub_1003970C8(0, v51, 1, v311);
    }
    return result;
  }
  if (v51 >= 0) {
    uint64_t v53 = v51;
  }
  else {
    uint64_t v53 = v51 + 1;
  }
  if (v51 < -1)
  {
LABEL_238:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x100396DC4);
  }
  v291 = v7;
  v297 = v13;
  Swift::Int v274 = result;
  if (v51 < 2)
  {
    uint64_t v57 = _swiftEmptyArrayStorage;
    v284 = (char *)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v285 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v285 + 80));
    if (v51 != 1)
    {
      unint64_t v60 = _swiftEmptyArrayStorage[2];
      uint64_t v59 = (char *)_swiftEmptyArrayStorage;
      goto LABEL_194;
    }
    v267 = v49;
    v269 = _swiftEmptyArrayStorage;
  }
  else
  {
    v267 = v49;
    uint64_t v54 = v53 >> 1;
    uint64_t v55 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v55 + 16) = v54;
    unint64_t v56 = (*(unsigned __int8 *)(v285 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v285 + 80);
    v269 = (void *)v55;
    v284 = (char *)(v55 + v56);
  }
  Swift::Int v58 = 0;
  v303 = (void (**)(uint64_t, uint64_t))(v22 + 8);
  v312 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 56);
  v293 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48);
  v288 = (void (**)(char *, uint64_t, uint64_t))(v22 + 32);
  uint64_t v59 = (char *)_swiftEmptyArrayStorage;
  long long v290 = xmmword_101342130;
  v295 = v10;
  uint64_t v298 = v21;
  v299 = v25;
LABEL_16:
  Swift::Int v61 = v58;
  Swift::Int v62 = v58 + 1;
  v279 = v59;
  Swift::Int v281 = v58;
  if (v58 + 1 >= v51)
  {
    uint64_t v130 = (uint64_t)v297;
    Swift::Int v131 = v274;
    goto LABEL_82;
  }
  Swift::Int v63 = v51;
  v64 = (char *)*v311;
  Swift::Int v65 = *(void *)(v285 + 72);
  Swift::Int v304 = v58 + 1;
  unint64_t v66 = v270;
  Swift::Int v67 = v58;
  sub_1003B6E14((uint64_t)&v64[v65 * v62], (uint64_t)v270, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  v289 = v64;
  Swift::Int v308 = v65;
  uint64_t v68 = (uint64_t)&v64[v65 * v67];
  Swift::Int v69 = v267;
  sub_1003B6E14(v68, (uint64_t)v267, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  uint64_t v71 = v294;
  sub_100B23648(v66, v271);
  if (v71)
  {
    __break(1u);
    goto LABEL_238;
  }
  uint64_t v73 = v268;
  sub_100B23648(v69, v268);
  uint64_t v294 = 0;
  Swift::Int v51 = v63;
  uint64_t v74 = v271;
  uint64_t v307 = Date.compare(_:)();
  uint64_t v75 = *v303;
  (*v303)(v73, v21);
  v306 = v75;
  v75(v74, v21);
  sub_1003B61EC((uint64_t)v69, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  sub_1003B61EC((uint64_t)v270, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  Swift::Int v61 = v281;
  Swift::Int v62 = v281 + 2;
  if (v281 + 2 >= v51) {
    goto LABEL_68;
  }
  uint64_t v302 = v308 * v304;
  uint64_t v76 = v289;
  Swift::Int v301 = v308 * v62;
  while (2)
  {
    Swift::Int v304 = v62;
    uint64_t v77 = v282;
    sub_1003B6E14((uint64_t)&v76[v301], v282, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    sub_1003B6E14((uint64_t)&v76[v302], v286, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v79 = *(void *)v77;
    unint64_t v80 = *(void *)(v77 + 8);
    BOOL v81 = v78;
    switch(v80 >> 62)
    {
      case 1uLL:
        if ((int)v79 != v79 >> 32) {
          goto LABEL_26;
        }
        goto LABEL_36;
      case 2uLL:
        if (*(void *)(v79 + 16) == *(void *)(v79 + 24)) {
          goto LABEL_36;
        }
LABEL_26:
        sub_1000361E0(*(void *)v77, *(void *)(v77 + 8));
        goto LABEL_27;
      case 3uLL:
        goto LABEL_22;
      default:
        if ((v80 & 0xFF000000000000) == 0)
        {
LABEL_22:
          sub_10001CFB8(*(void *)v77, *(void *)(v77 + 8));
LABEL_36:
          uint64_t v99 = *v312;
          uint64_t v100 = v278;
          (*v312)(v278, 1, 1, v21);
LABEL_37:
          uint64_t v101 = v280;
          Date.init()();
          sub_10001DAB4(v100, (uint64_t *)&unk_10163AC90);
          break;
        }
LABEL_27:
        id v82 = objc_allocWithZone((Class)NSKeyedUnarchiver);
        sub_1000361E0(v79, v80);
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        id v314 = 0;
        id v84 = [v82 initForReadingFromData:isa error:&v314];

        uint64_t v85 = v81;
        if (v84)
        {
          id v86 = v314;
          sub_10001CFB8(v79, v80);
          [v84 _enableStrictSecureDecodingMode];
          id v87 = [objc_allocWithZone((Class)CKRecord) initWithCoder:v84];
          if (v87)
          {
            v88 = v87;
          }
          else
          {
            static os_log_type_t.error.getter();
            sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
            uint64_t v96 = (void *)static OS_os_log.default.getter();
            os_log(_:dso:log:_:_:)();

            v88 = 0;
          }
        }
        else
        {
          id v89 = v314;
          uint64_t v90 = (void *)_convertNSErrorToError(_:)();

          swift_willThrow();
          sub_10001CFB8(v79, v80);
          LODWORD(v296) = static os_log_type_t.error.getter();
          sub_10000588C((uint64_t *)&unk_10163AD00);
          uint64_t v91 = swift_allocObject();
          *(_OWORD *)(v91 + 16) = v290;
          id v314 = v90;
          swift_errorRetain();
          sub_10000588C(&qword_101638D40);
          uint64_t v92 = String.init<A>(describing:)();
          uint64_t v94 = v93;
          *(void *)(v91 + 56) = &type metadata for String;
          *(void *)(v91 + 64) = sub_10000B4CC();
          *(void *)(v91 + 32) = v92;
          *(void *)(v91 + 40) = v94;
          sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
          uint64_t v95 = (void *)static OS_os_log.default.getter();
          os_log(_:dso:log:_:_:)();
          swift_errorRelease();
          swift_bridgeObjectRelease();

          v88 = 0;
          uint64_t v294 = 0;
        }
        uint64_t v21 = v298;
        sub_10001CFB8(v79, v80);
        if (!v88)
        {
          BOOL v81 = v85;
          goto LABEL_36;
        }
        id v97 = [v88 creationDate];

        BOOL v81 = v85;
        if (v97)
        {
          BOOL v98 = v272;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v99 = *v312;
          (*v312)((uint64_t)v98, 0, 1, v21);
        }
        else
        {
          uint64_t v99 = *v312;
          BOOL v98 = v272;
          (*v312)((uint64_t)v272, 1, 1, v21);
        }
        uint64_t v119 = (uint64_t)v98;
        uint64_t v100 = v278;
        sub_10001D608(v119, v278, (uint64_t *)&unk_10163AC90);
        if ((*v293)(v100, 1, v21) == 1) {
          goto LABEL_37;
        }
        (*v288)(v283, v100, v21);
        uint64_t v101 = v280;
        break;
    }
    uint64_t v103 = *(void *)v286;
    unint64_t v104 = *(void *)(v286 + 8);
    v105 = v102;
    switch(v104 >> 62)
    {
      case 1uLL:
        if ((int)v103 != v103 >> 32) {
          goto LABEL_44;
        }
        goto LABEL_42;
      case 2uLL:
        if (*(void *)(v103 + 16) == *(void *)(v103 + 24)) {
          goto LABEL_42;
        }
LABEL_44:
        sub_1000361E0(*(void *)v286, *(void *)(v286 + 8));
        goto LABEL_45;
      case 3uLL:
        goto LABEL_40;
      default:
        if ((v104 & 0xFF000000000000) == 0)
        {
LABEL_40:
          sub_10001CFB8(*(void *)v286, *(void *)(v286 + 8));
LABEL_42:
          uint64_t v59 = v279;
          goto LABEL_57;
        }
LABEL_45:
        v300 = v105;
        id v106 = objc_allocWithZone((Class)NSKeyedUnarchiver);
        sub_1000361E0(v103, v104);
        Class v107 = Data._bridgeToObjectiveC()().super.isa;
        id v314 = 0;
        id v108 = [v106 initForReadingFromData:v107 error:&v314];

        if (v108)
        {
          id v109 = v314;
          sub_10001CFB8(v103, v104);
          [v108 _enableStrictSecureDecodingMode];
          id v110 = [objc_allocWithZone((Class)CKRecord) initWithCoder:v108];
          if (v110)
          {
            uint64_t v111 = v110;
          }
          else
          {
            static os_log_type_t.error.getter();
            sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
            v120 = (void *)static OS_os_log.default.getter();
            uint64_t v101 = v280;
            os_log(_:dso:log:_:_:)();

            uint64_t v111 = 0;
          }
        }
        else
        {
          id v112 = v314;
          uint64_t v113 = (void *)_convertNSErrorToError(_:)();

          swift_willThrow();
          sub_10001CFB8(v103, v104);
          LODWORD(v294) = static os_log_type_t.error.getter();
          sub_10000588C((uint64_t *)&unk_10163AD00);
          uint64_t v114 = swift_allocObject();
          *(_OWORD *)(v114 + 16) = v290;
          id v314 = v113;
          swift_errorRetain();
          sub_10000588C(&qword_101638D40);
          uint64_t v115 = String.init<A>(describing:)();
          uint64_t v117 = v116;
          *(void *)(v114 + 56) = &type metadata for String;
          *(void *)(v114 + 64) = sub_10000B4CC();
          *(void *)(v114 + 32) = v115;
          *(void *)(v114 + 40) = v117;
          sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
          unint64_t v118 = (void *)static OS_os_log.default.getter();
          os_log(_:dso:log:_:_:)();
          swift_errorRelease();
          swift_bridgeObjectRelease();

          uint64_t v101 = v280;
          uint64_t v111 = 0;
          uint64_t v294 = 0;
        }
        sub_10001CFB8(v103, v104);
        uint64_t v21 = v298;
        if (!v111)
        {
          uint64_t v59 = v279;
          v105 = v300;
LABEL_57:
          v99(v101, 1, 1, v21);
LABEL_58:
          unint64_t v124 = v277;
          Date.init()();
          sub_10001DAB4(v101, (uint64_t *)&unk_10163AC90);
          goto LABEL_59;
        }
        id v121 = [v111 creationDate];

        uint64_t v59 = v279;
        if (v121)
        {
          uint64_t v122 = v273;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v123 = 0;
        }
        else
        {
          uint64_t v123 = 1;
          uint64_t v122 = v273;
        }
        v105 = v300;
        v99((uint64_t)v122, v123, 1, v21);
        uint64_t v129 = (uint64_t)v122;
        uint64_t v101 = v280;
        sub_10001D608(v129, v280, (uint64_t *)&unk_10163AC90);
        if ((*v293)(v101, 1, v21) == 1) {
          goto LABEL_58;
        }
        unint64_t v124 = v277;
        (*v288)(v277, v101, v21);
LABEL_59:
        BOOL v125 = v307 == 1;
        v126 = v283;
        uint64_t v127 = Date.compare(_:)();
        v128 = v306;
        v306((uint64_t)v124, v21);
        v128((uint64_t)v126, v21);
        sub_1003B61EC(v286, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        sub_1003B61EC(v282, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        if ((v125 ^ (v127 != 1)))
        {
          Swift::Int v62 = v304 + 1;
          v76 += v308;
          uint64_t v10 = v295;
          if (v51 == v304 + 1)
          {
            Swift::Int v62 = v51;
            goto LABEL_67;
          }
          continue;
        }
        uint64_t v10 = v295;
        Swift::Int v62 = v304;
LABEL_67:
        Swift::Int v61 = v281;
LABEL_68:
        uint64_t v130 = (uint64_t)v297;
        Swift::Int v131 = v274;
        if (v307 == 1)
        {
          if (v62 < v61) {
            goto LABEL_230;
          }
          if (v61 < v62)
          {
            uint64_t v132 = 0;
            uint64_t v133 = v308 * (v62 - 1);
            Swift::Int v134 = v62 * v308;
            Swift::Int v135 = v61;
            uint64_t v136 = v61 * v308;
            Swift::Int v275 = v51;
            do
            {
              if (v135 != v62 + v132 - 1)
              {
                uint64_t v138 = v289;
                if (!v289) {
                  goto LABEL_235;
                }
                Swift::Int v139 = &v289[v136];
                uint64_t v307 = (uint64_t)&v289[v133];
                sub_1003B6008((uint64_t)&v289[v136], v276, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
                if (v136 < v133 || v139 >= &v138[v134])
                {
                  uint64_t v137 = v307;
                  swift_arrayInitWithTakeFrontToBack();
                }
                else
                {
                  uint64_t v137 = v307;
                  if (v136 != v133) {
                    swift_arrayInitWithTakeBackToFront();
                  }
                }
                sub_1003B6008(v276, v137, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
                Swift::Int v131 = v274;
                Swift::Int v51 = v275;
              }
              ++v135;
              --v132;
              v133 -= v308;
              v134 -= v308;
              v136 += v308;
            }
            while (v135 < v62 + v132);
            uint64_t v10 = v295;
            uint64_t v130 = (uint64_t)v297;
            uint64_t v59 = v279;
            Swift::Int v61 = v281;
          }
        }
LABEL_82:
        if (v62 < v51)
        {
          if (__OFSUB__(v62, v61)) {
            goto LABEL_228;
          }
          if (v62 - v61 >= v131)
          {
LABEL_143:
            Swift::Int v61 = v281;
          }
          else
          {
            Swift::Int v61 = v281;
            if (__OFADD__(v281, v131)) {
              goto LABEL_231;
            }
            if (v281 + v131 >= v51) {
              Swift::Int v140 = v51;
            }
            else {
              Swift::Int v140 = v281 + v131;
            }
            if (v140 < v281)
            {
LABEL_232:
              __break(1u);
LABEL_233:
              __break(1u);
LABEL_234:
              __break(1u);
LABEL_235:
              __break(1u);
LABEL_236:
              __break(1u);
            }
            if (v62 != v140)
            {
              uint64_t v141 = *(void **)(v285 + 72);
              uint64_t v142 = (void)v141 * (v62 - 1);
              v300 = v141;
              Swift::Int v143 = v62 * (void)v141;
              Swift::Int v275 = v140;
              while (1)
              {
                uint64_t v145 = 0;
                Swift::Int v146 = v281;
                Swift::Int v304 = v62;
                Swift::Int v301 = v143;
                uint64_t v302 = v142;
                while (2)
                {
                  Swift::Int v308 = v146;
                  v147 = *v311;
                  uint64_t v307 = v143 + v145;
                  uint64_t v148 = (uint64_t)v147 + v143 + v145;
                  v149 = v309;
                  sub_1003B6E14(v148, (uint64_t)v309, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
                  v306 = (void (*)(uint64_t, uint64_t))(v142 + v145);
                  sub_1003B6E14((uint64_t)v147 + v142 + v145, v313, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
                  uint64_t v151 = *v149;
                  unint64_t v152 = v149[1];
                  v153 = v150;
                  switch(v152 >> 62)
                  {
                    case 1uLL:
                      if ((int)v151 != v151 >> 32) {
                        goto LABEL_102;
                      }
                      goto LABEL_112;
                    case 2uLL:
                      if (*(void *)(v151 + 16) == *(void *)(v151 + 24)) {
                        goto LABEL_112;
                      }
LABEL_102:
                      sub_1000361E0(v151, v152);
                      goto LABEL_103;
                    case 3uLL:
                      goto LABEL_98;
                    default:
                      if ((v152 & 0xFF000000000000) == 0)
                      {
LABEL_98:
                        sub_10001CFB8(v151, v152);
LABEL_112:
                        v173 = *v312;
                        (*v312)(v130, 1, 1, v21);
LABEL_113:
                        Date.init()();
                        sub_10001DAB4(v130, (uint64_t *)&unk_10163AC90);
                        break;
                      }
LABEL_103:
                      id v155 = objc_allocWithZone((Class)NSKeyedUnarchiver);
                      sub_1000361E0(v151, v152);
                      Class v156 = Data._bridgeToObjectiveC()().super.isa;
                      id v314 = 0;
                      id v157 = [v155 initForReadingFromData:v156 error:&v314];

                      if (v157)
                      {
                        id v158 = v314;
                        sub_10001CFB8(v151, v152);
                        [v157 _enableStrictSecureDecodingMode];
                        id v159 = [objc_allocWithZone((Class)CKRecord) initWithCoder:v157];
                        if (v159)
                        {
                          v160 = v159;
                        }
                        else
                        {
                          static os_log_type_t.error.getter();
                          sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
                          v170 = (void *)static OS_os_log.default.getter();
                          os_log(_:dso:log:_:_:)();

                          v160 = 0;
                        }
                      }
                      else
                      {
                        id v161 = v314;
                        v162 = (void *)_convertNSErrorToError(_:)();

                        swift_willThrow();
                        sub_10001CFB8(v151, v152);
                        static os_log_type_t.error.getter();
                        sub_10000588C((uint64_t *)&unk_10163AD00);
                        uint64_t v163 = swift_allocObject();
                        v296 = v154;
                        v164 = v153;
                        v165 = (void *)v163;
                        *(_OWORD *)(v163 + 16) = v290;
                        id v314 = v162;
                        swift_errorRetain();
                        sub_10000588C(&qword_101638D40);
                        uint64_t v166 = String.init<A>(describing:)();
                        uint64_t v168 = v167;
                        v165[7] = &type metadata for String;
                        v165[8] = sub_10000B4CC();
                        v165[4] = v166;
                        v165[5] = v168;
                        sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
                        v169 = (void *)static OS_os_log.default.getter();
                        os_log(_:dso:log:_:_:)();
                        swift_errorRelease();
                        v153 = v164;
                        v154 = v296;
                        swift_bridgeObjectRelease();

                        v160 = 0;
                        uint64_t v294 = 0;
                      }
                      uint64_t v10 = v295;
                      sub_10001CFB8(v151, v152);
                      uint64_t v171 = (uint64_t)v291;
                      uint64_t v21 = v298;
                      if (!v160)
                      {
                        uint64_t v130 = (uint64_t)v297;
                        goto LABEL_112;
                      }
                      id v172 = [v160 creationDate];

                      if (v172)
                      {
                        static Date._unconditionallyBridgeFromObjectiveC(_:)();

                        v173 = *v312;
                        (*v312)(v171, 0, 1, v21);
                      }
                      else
                      {
                        v173 = *v312;
                        (*v312)(v171, 1, 1, v21);
                      }
                      uint64_t v193 = v171;
                      uint64_t v130 = (uint64_t)v297;
                      sub_10001D608(v193, (uint64_t)v297, (uint64_t *)&unk_10163AC90);
                      if ((*v293)(v130, 1, v21) == 1) {
                        goto LABEL_113;
                      }
                      (*v288)(v310, v130, v21);
                      break;
                  }
                  uint64_t v175 = *(void *)v313;
                  unint64_t v176 = *(void *)(v313 + 8);
                  v177 = v174;
                  switch(v176 >> 62)
                  {
                    case 1uLL:
                      if ((int)v175 != v175 >> 32) {
                        goto LABEL_120;
                      }
                      goto LABEL_133;
                    case 2uLL:
                      if (*(void *)(v175 + 16) == *(void *)(v175 + 24)) {
                        goto LABEL_133;
                      }
LABEL_120:
                      sub_1000361E0(*(void *)v313, *(void *)(v313 + 8));
                      goto LABEL_121;
                    case 3uLL:
                      goto LABEL_116;
                    default:
                      if ((v176 & 0xFF000000000000) == 0)
                      {
LABEL_116:
                        sub_10001CFB8(*(void *)v313, *(void *)(v313 + 8));
                        goto LABEL_133;
                      }
LABEL_121:
                      v296 = v177;
                      id v179 = objc_allocWithZone((Class)NSKeyedUnarchiver);
                      sub_1000361E0(v175, v176);
                      Class v180 = Data._bridgeToObjectiveC()().super.isa;
                      id v314 = 0;
                      id v181 = [v179 initForReadingFromData:v180 error:&v314];

                      if (v181)
                      {
                        id v182 = v314;
                        sub_10001CFB8(v175, v176);
                        [v181 _enableStrictSecureDecodingMode];
                        id v183 = [objc_allocWithZone((Class)CKRecord) initWithCoder:v181];
                        if (v183)
                        {
                          v184 = v183;
                        }
                        else
                        {
                          static os_log_type_t.error.getter();
                          sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
                          v194 = (void *)static OS_os_log.default.getter();
                          os_log(_:dso:log:_:_:)();

                          v184 = 0;
                        }
                      }
                      else
                      {
                        id v185 = v314;
                        v186 = (void *)_convertNSErrorToError(_:)();

                        swift_willThrow();
                        sub_10001CFB8(v175, v176);
                        static os_log_type_t.error.getter();
                        sub_10000588C((uint64_t *)&unk_10163AD00);
                        uint64_t v187 = swift_allocObject();
                        v289 = v178;
                        v188 = (void *)v187;
                        *(_OWORD *)(v187 + 16) = v290;
                        id v314 = v186;
                        swift_errorRetain();
                        sub_10000588C(&qword_101638D40);
                        uint64_t v189 = String.init<A>(describing:)();
                        uint64_t v191 = v190;
                        v188[7] = &type metadata for String;
                        v188[8] = sub_10000B4CC();
                        v188[4] = v189;
                        v188[5] = v191;
                        uint64_t v10 = v295;
                        sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
                        v192 = (void *)static OS_os_log.default.getter();
                        os_log(_:dso:log:_:_:)();
                        swift_errorRelease();
                        v178 = v289;
                        swift_bridgeObjectRelease();

                        v184 = 0;
                        uint64_t v294 = 0;
                      }
                      sub_10001CFB8(v175, v176);
                      uint64_t v130 = (uint64_t)v297;
                      uint64_t v21 = v298;
                      if (!v184)
                      {
                        v177 = v296;
LABEL_133:
                        v173((uint64_t)v10, 1, 1, v21);
                        v198 = v299;
LABEL_134:
                        Date.init()();
                        v199 = v10;
                        sub_10001DAB4((uint64_t)v10, (uint64_t *)&unk_10163AC90);
                        goto LABEL_135;
                      }
                      id v195 = [v184 creationDate];

                      if (v195)
                      {
                        uint64_t v196 = (uint64_t)v287;
                        static Date._unconditionallyBridgeFromObjectiveC(_:)();

                        uint64_t v197 = 0;
                      }
                      else
                      {
                        uint64_t v197 = 1;
                        uint64_t v196 = (uint64_t)v287;
                      }
                      v198 = v299;
                      v173(v196, v197, 1, v21);
                      sub_10001D608(v196, (uint64_t)v10, (uint64_t *)&unk_10163AC90);
                      if ((*v293)((uint64_t)v10, 1, v21) == 1)
                      {
                        v177 = v296;
                        goto LABEL_134;
                      }
                      v199 = v10;
                      (*v288)(v198, (uint64_t)v10, v21);
                      v177 = v296;
LABEL_135:
                      v200 = v310;
                      uint64_t v201 = Date.compare(_:)();
                      v202 = *v303;
                      (*v303)((uint64_t)v198, v21);
                      v202((uint64_t)v200, v21);
                      sub_1003B61EC(v313, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
                      sub_1003B61EC((uint64_t)v309, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
                      if (v201 == 1)
                      {
                        v203 = *v311;
                        Swift::Int v143 = v301;
                        uint64_t v142 = v302;
                        if (!*v311) {
                          goto LABEL_233;
                        }
                        uint64_t v204 = (uint64_t)v203 + v302 + v145;
                        sub_1003B6008((uint64_t)v203 + v301 + v145, v305, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
                        uint64_t v10 = v199;
                        swift_arrayInitWithTakeFrontToBack();
                        sub_1003B6008(v305, v204, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
                        v145 -= (uint64_t)v300;
                        Swift::Int v146 = v308 + 1;
                        Swift::Int v144 = v304;
                        if (v304 == v308 + 1) {
                          goto LABEL_93;
                        }
                        continue;
                      }
                      Swift::Int v144 = v304;
                      uint64_t v10 = v199;
                      Swift::Int v143 = v301;
                      uint64_t v142 = v302;
LABEL_93:
                      Swift::Int v62 = v144 + 1;
                      v142 += (uint64_t)v300;
                      v143 += (Swift::Int)v300;
                      if (v62 == v275)
                      {
                        Swift::Int v62 = v275;
                        uint64_t v59 = v279;
                        goto LABEL_143;
                      }
                      break;
                  }
                  break;
                }
              }
            }
          }
        }
        if (v62 < v61) {
          goto LABEL_223;
        }
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        Swift::Int v304 = v62;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          uint64_t v59 = sub_100B729CC(0, *((void *)v59 + 2) + 1, 1, v59);
        }
        unint64_t v207 = *((void *)v59 + 2);
        unint64_t v206 = *((void *)v59 + 3);
        unint64_t v60 = v207 + 1;
        if (v207 >= v206 >> 1) {
          uint64_t v59 = sub_100B729CC((char *)(v206 > 1), v207 + 1, 1, v59);
        }
        *((void *)v59 + 2) = v60;
        v208 = v59 + 32;
        v209 = &v59[16 * v207 + 32];
        Swift::Int v210 = v304;
        *(void *)v209 = v281;
        *((void *)v209 + 1) = v210;
        if (v207)
        {
          while (2)
          {
            unint64_t v211 = v60 - 1;
            if (v60 >= 4)
            {
              v216 = &v208[16 * v60];
              uint64_t v217 = *((void *)v216 - 8);
              uint64_t v218 = *((void *)v216 - 7);
              BOOL v222 = __OFSUB__(v218, v217);
              uint64_t v219 = v218 - v217;
              if (v222) {
                goto LABEL_212;
              }
              uint64_t v221 = *((void *)v216 - 6);
              uint64_t v220 = *((void *)v216 - 5);
              BOOL v222 = __OFSUB__(v220, v221);
              uint64_t v214 = v220 - v221;
              char v215 = v222;
              if (v222) {
                goto LABEL_213;
              }
              unint64_t v223 = v60 - 2;
              v224 = &v208[16 * v60 - 32];
              uint64_t v226 = *(void *)v224;
              uint64_t v225 = *((void *)v224 + 1);
              BOOL v222 = __OFSUB__(v225, v226);
              uint64_t v227 = v225 - v226;
              if (v222) {
                goto LABEL_215;
              }
              BOOL v222 = __OFADD__(v214, v227);
              uint64_t v228 = v214 + v227;
              if (v222) {
                goto LABEL_218;
              }
              if (v228 >= v219)
              {
                v246 = &v208[16 * v211];
                uint64_t v248 = *(void *)v246;
                uint64_t v247 = *((void *)v246 + 1);
                BOOL v222 = __OFSUB__(v247, v248);
                uint64_t v249 = v247 - v248;
                if (v222) {
                  goto LABEL_222;
                }
                BOOL v239 = v214 < v249;
              }
              else
              {
LABEL_163:
                if (v215) {
                  goto LABEL_214;
                }
                unint64_t v223 = v60 - 2;
                v229 = &v208[16 * v60 - 32];
                uint64_t v231 = *(void *)v229;
                uint64_t v230 = *((void *)v229 + 1);
                BOOL v232 = __OFSUB__(v230, v231);
                uint64_t v233 = v230 - v231;
                char v234 = v232;
                if (v232) {
                  goto LABEL_217;
                }
                v235 = &v208[16 * v211];
                uint64_t v237 = *(void *)v235;
                uint64_t v236 = *((void *)v235 + 1);
                BOOL v222 = __OFSUB__(v236, v237);
                uint64_t v238 = v236 - v237;
                if (v222) {
                  goto LABEL_220;
                }
                if (__OFADD__(v233, v238)) {
                  goto LABEL_221;
                }
                if (v233 + v238 < v214) {
                  goto LABEL_175;
                }
                BOOL v239 = v214 < v238;
              }
              if (v239) {
                unint64_t v211 = v223;
              }
            }
            else
            {
              if (v60 == 3)
              {
                uint64_t v213 = *((void *)v59 + 4);
                uint64_t v212 = *((void *)v59 + 5);
                BOOL v222 = __OFSUB__(v212, v213);
                uint64_t v214 = v212 - v213;
                char v215 = v222;
                goto LABEL_163;
              }
              uint64_t v240 = *((void *)v59 + 4);
              uint64_t v241 = *((void *)v59 + 5);
              BOOL v222 = __OFSUB__(v241, v240);
              uint64_t v233 = v241 - v240;
              char v234 = v222;
LABEL_175:
              if (v234) {
                goto LABEL_216;
              }
              v242 = &v208[16 * v211];
              uint64_t v244 = *(void *)v242;
              uint64_t v243 = *((void *)v242 + 1);
              BOOL v222 = __OFSUB__(v243, v244);
              uint64_t v245 = v243 - v244;
              if (v222) {
                goto LABEL_219;
              }
              if (v245 < v233) {
                goto LABEL_15;
              }
            }
            unint64_t v250 = v211 - 1;
            if (v211 - 1 >= v60)
            {
              __break(1u);
LABEL_209:
              __break(1u);
LABEL_210:
              __break(1u);
LABEL_211:
              __break(1u);
LABEL_212:
              __break(1u);
LABEL_213:
              __break(1u);
LABEL_214:
              __break(1u);
LABEL_215:
              __break(1u);
LABEL_216:
              __break(1u);
LABEL_217:
              __break(1u);
LABEL_218:
              __break(1u);
LABEL_219:
              __break(1u);
LABEL_220:
              __break(1u);
LABEL_221:
              __break(1u);
LABEL_222:
              __break(1u);
LABEL_223:
              __break(1u);
LABEL_224:
              __break(1u);
LABEL_225:
              __break(1u);
LABEL_226:
              __break(1u);
LABEL_227:
              __break(1u);
LABEL_228:
              __break(1u);
LABEL_229:
              __break(1u);
LABEL_230:
              __break(1u);
LABEL_231:
              __break(1u);
              goto LABEL_232;
            }
            if (!*v311) {
              goto LABEL_234;
            }
            v251 = v59;
            v252 = &v208[16 * v250];
            uint64_t v253 = *(void *)v252;
            v254 = &v208[16 * v211];
            uint64_t v255 = *((void *)v254 + 1);
            uint64_t v256 = v294;
            sub_100398310((unint64_t)*v311 + *(void *)(v285 + 72) * *(void *)v252, (unint64_t)*v311 + *(void *)(v285 + 72) * *(void *)v254, (unint64_t)*v311 + *(void *)(v285 + 72) * v255, v284);
            uint64_t v294 = v256;
            if (v256)
            {
LABEL_191:
              swift_bridgeObjectRelease();
              v269[2] = 0;
              return swift_bridgeObjectRelease();
            }
            if (v255 < v253) {
              goto LABEL_209;
            }
            if (v211 > *((void *)v251 + 2)) {
              goto LABEL_210;
            }
            *(void *)v252 = v253;
            *(void *)&v208[16 * v250 + 8] = v255;
            unint64_t v257 = *((void *)v251 + 2);
            if (v211 >= v257) {
              goto LABEL_211;
            }
            uint64_t v59 = v251;
            unint64_t v60 = v257 - 1;
            memmove(&v208[16 * v211], v254 + 16, 16 * (v257 - 1 - v211));
            *((void *)v251 + 2) = v257 - 1;
            BOOL v239 = v257 > 2;
            uint64_t v10 = v295;
            if (!v239) {
              goto LABEL_15;
            }
            continue;
          }
        }
        unint64_t v60 = 1;
LABEL_15:
        Swift::Int v51 = (Swift::Int)v311[1];
        Swift::Int v58 = v304;
        if (v304 < v51) {
          goto LABEL_16;
        }
        uint64_t v57 = v269;
LABEL_194:
        uint64_t v258 = v294;
        uint64_t v259 = v285;
        if (v60 >= 2)
        {
          v260 = *v311;
          v269 = v57;
          do
          {
            unint64_t v261 = v60 - 2;
            if (v60 < 2) {
              goto LABEL_224;
            }
            if (!v260) {
              goto LABEL_236;
            }
            uint64_t v262 = *(void *)&v59[16 * v261 + 32];
            uint64_t v263 = *(void *)&v59[16 * v60 + 24];
            sub_100398310((unint64_t)v260 + *(void *)(v259 + 72) * v262, (unint64_t)v260 + *(void *)(v259 + 72) * *(void *)&v59[16 * v60 + 16], (unint64_t)v260 + *(void *)(v259 + 72) * v263, v284);
            if (v258) {
              goto LABEL_191;
            }
            if (v263 < v262) {
              goto LABEL_225;
            }
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v59 = sub_100B73584((uint64_t)v59);
            }
            if (v261 >= *((void *)v59 + 2)) {
              goto LABEL_226;
            }
            v264 = &v59[16 * v261 + 32];
            *(void *)v264 = v262;
            *((void *)v264 + 1) = v263;
            unint64_t v265 = *((void *)v59 + 2);
            if (v60 > v265) {
              goto LABEL_227;
            }
            memmove(&v59[16 * v60 + 16], &v59[16 * v60 + 32], 16 * (v265 - v60));
            *((void *)v59 + 2) = v265 - 1;
            unint64_t v60 = v265 - 1;
            uint64_t v57 = v269;
          }
          while (v265 > 2);
        }
        swift_bridgeObjectRelease();
        v57[2] = 0;
        return swift_bridgeObjectRelease();
    }
  }
}

uint64_t sub_100396E04(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v26 = a1;
  uint64_t v29 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v7 = __chkstk_darwin(v29);
  uint64_t v30 = (uint64_t)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v24 - v10;
  uint64_t result = __chkstk_darwin(v9);
  uint64_t v15 = (char *)&v24 - v14;
  uint64_t v28 = a3;
  uint64_t v25 = a2;
  if (a3 != a2)
  {
    uint64_t v16 = *(void *)(v13 + 72);
    uint64_t v32 = v16 * (v28 - 1);
    uint64_t v27 = v16;
    uint64_t v31 = v16 * v28;
LABEL_5:
    uint64_t v17 = 0;
    uint64_t v18 = v26;
    while (1)
    {
      uint64_t v19 = a4;
      uint64_t v20 = *a4;
      sub_1003B6E14(v31 + v17 + v20, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      sub_1003B6E14(v32 + v17 + v20, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      char v21 = static Date.< infix(_:_:)();
      sub_1003B61EC((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      a4 = v19;
      uint64_t result = sub_1003B61EC((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      if ((v21 & 1) == 0)
      {
LABEL_4:
        v32 += v27;
        v31 += v27;
        if (++v28 == v25) {
          return result;
        }
        goto LABEL_5;
      }
      uint64_t v22 = *v19;
      if (!*v19) {
        break;
      }
      uint64_t v23 = v22 + v32 + v17;
      sub_1003B6008(v22 + v31 + v17, v30, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      swift_arrayInitWithTakeFrontToBack();
      uint64_t result = sub_1003B6008(v30, v23, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      v17 -= v27;
      ++v18;
      a4 = v19;
      if (v28 == v18) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1003970C8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v96 = a1;
  uint64_t v7 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v10 = (char *)&v94 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v94 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v94 - v15;
  __chkstk_darwin(v14);
  id v109 = (char *)&v94 - v17;
  uint64_t v113 = type metadata accessor for Date();
  uint64_t v18 = *(void *)(v113 - 8);
  uint64_t v19 = __chkstk_darwin(v113);
  char v21 = (char *)&v94 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  id v121 = (char *)&v94 - v22;
  uint64_t v102 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v23 = __chkstk_darwin(v102);
  uint64_t v114 = (uint64_t)&v94 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v94 - v26;
  uint64_t result = __chkstk_darwin(v25);
  v120 = (uint64_t *)((char *)&v94 - v30);
  uint64_t v95 = a2;
  if (a3 != a2)
  {
    BOOL v98 = v13;
    uint64_t v99 = v10;
    uint64_t v119 = (void **)(v18 + 56);
    uint64_t v103 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
    uint64_t v31 = *(void *)(v29 + 72);
    id v97 = (void (**)(char *, uint64_t, uint64_t))(v18 + 32);
    id v106 = (void (**)(char *, uint64_t))(v18 + 8);
    uint64_t v110 = v31;
    uint64_t v122 = v31 * a3;
    uint64_t v123 = v31 * (a3 - 1);
    long long v100 = xmmword_101342130;
    unint64_t v104 = a4;
    uint64_t v32 = v113;
    id v112 = v27;
    Class v107 = v21;
    id v108 = v16;
    while (1)
    {
      uint64_t v34 = 0;
      uint64_t v35 = v96;
      uint64_t v111 = a3;
      while (2)
      {
        uint64_t v115 = v35;
        uint64_t v36 = *a4;
        uint64_t v117 = v122 + v34;
        uint64_t v37 = v120;
        sub_1003B6E14(v122 + v34 + v36, (uint64_t)v120, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        uint64_t v116 = v123 + v34;
        sub_1003B6E14(v123 + v34 + v36, (uint64_t)v27, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        uint64_t v38 = *v37;
        unint64_t v39 = v37[1];
        switch(v39 >> 62)
        {
          case 1uLL:
            if ((int)v38 == v38 >> 32) {
              goto LABEL_17;
            }
            goto LABEL_12;
          case 2uLL:
            if (*(void *)(v38 + 16) == *(void *)(v38 + 24)) {
              goto LABEL_17;
            }
LABEL_12:
            sub_1000361E0(v38, v39);
            goto LABEL_13;
          case 3uLL:
            goto LABEL_10;
          default:
            if ((v39 & 0xFF000000000000) == 0)
            {
LABEL_10:
              sub_10001CFB8(v38, v39);
LABEL_17:
              uint64_t v47 = (uint64_t)v109;
LABEL_24:
              Swift::Int v61 = *v119;
              ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))*v119)(v47, 1, 1, v32);
LABEL_25:
              Date.init()();
              sub_10001DAB4(v47, (uint64_t *)&unk_10163AC90);
              break;
            }
LABEL_13:
            id v41 = objc_allocWithZone((Class)NSKeyedUnarchiver);
            sub_1000361E0(v38, v39);
            Class isa = Data._bridgeToObjectiveC()().super.isa;
            id v124 = 0;
            id v43 = [v41 initForReadingFromData:isa error:&v124];

            if (v43)
            {
              id v44 = v124;
              sub_10001CFB8(v38, v39);
              [v43 _enableStrictSecureDecodingMode];
              id v45 = [objc_allocWithZone((Class)CKRecord) initWithCoder:v43];
              if (v45)
              {
                uint64_t v46 = v45;
              }
              else
              {
                static os_log_type_t.error.getter();
                sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
                uint64_t v55 = (void *)static OS_os_log.default.getter();
                os_log(_:dso:log:_:_:)();

                uint64_t v46 = 0;
              }
            }
            else
            {
              id v48 = v124;
              Swift::Int v49 = (void *)_convertNSErrorToError(_:)();

              swift_willThrow();
              sub_10001CFB8(v38, v39);
              static os_log_type_t.error.getter();
              sub_10000588C((uint64_t *)&unk_10163AD00);
              uint64_t v50 = swift_allocObject();
              *(_OWORD *)(v50 + 16) = v100;
              id v124 = v49;
              swift_errorRetain();
              sub_10000588C(&qword_101638D40);
              uint64_t v51 = String.init<A>(describing:)();
              uint64_t v53 = v52;
              *(void *)(v50 + 56) = &type metadata for String;
              *(void *)(v50 + 64) = sub_10000B4CC();
              *(void *)(v50 + 32) = v51;
              *(void *)(v50 + 40) = v53;
              sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
              uint64_t v54 = (void *)static OS_os_log.default.getter();
              os_log(_:dso:log:_:_:)();
              swift_errorRelease();
              uint64_t v27 = v112;
              swift_bridgeObjectRelease();

              uint64_t v46 = 0;
              uint64_t v101 = 0;
            }
            sub_10001CFB8(v38, v39);
            if (!v46)
            {
              a4 = v104;
              uint64_t v47 = (uint64_t)v109;
              uint64_t v32 = v113;
              goto LABEL_24;
            }
            id v56 = [v46 creationDate];

            a4 = v104;
            uint64_t v47 = (uint64_t)v109;
            if (v56)
            {
              uint64_t v57 = (uint64_t)v98;
              static Date._unconditionallyBridgeFromObjectiveC(_:)();

              Swift::Int v58 = (void (*)(void, void, void, void))*v119;
              uint64_t v59 = v57;
              uint64_t v60 = 0;
            }
            else
            {
              Swift::Int v58 = (void (*)(void, void, void, void))*v119;
              uint64_t v57 = (uint64_t)v98;
              uint64_t v59 = (uint64_t)v98;
              uint64_t v60 = 1;
            }
            uint64_t v32 = v113;
            id v84 = v58;
            v58(v59, v60, 1, v113);
            sub_10001D608(v57, v47, (uint64_t *)&unk_10163AC90);
            if ((*v103)(v47, 1, v32) == 1)
            {
              Swift::Int v61 = v84;
              goto LABEL_25;
            }
            (*v97)(v121, v47, v32);
            Swift::Int v61 = v84;
            break;
        }
        uint64_t v63 = *(void *)v27;
        unint64_t v64 = *((void *)v27 + 1);
        Swift::Int v65 = v62;
        switch(v64 >> 62)
        {
          case 1uLL:
            if ((int)v63 == v63 >> 32) {
              goto LABEL_35;
            }
            goto LABEL_30;
          case 2uLL:
            if (*(void *)(v63 + 16) == *(void *)(v63 + 24))
            {
LABEL_35:
              unint64_t v66 = a4;
LABEL_36:
              uint64_t v75 = v107;
              uint64_t v74 = (uint64_t)v108;
              goto LABEL_47;
            }
LABEL_30:
            sub_1000361E0(*(void *)v27, *((void *)v27 + 1));
LABEL_31:
            v105 = v65;
            unint64_t v118 = v61;
            unint64_t v66 = a4;
            id v68 = objc_allocWithZone((Class)NSKeyedUnarchiver);
            sub_1000361E0(v63, v64);
            Class v69 = Data._bridgeToObjectiveC()().super.isa;
            id v124 = 0;
            id v70 = [v68 initForReadingFromData:v69 error:&v124];

            if (v70)
            {
              id v71 = v124;
              sub_10001CFB8(v63, v64);
              [v70 _enableStrictSecureDecodingMode];
              id v72 = [objc_allocWithZone((Class)CKRecord) initWithCoder:v70];
              if (v72)
              {
                uint64_t v73 = v72;
              }
              else
              {
                static os_log_type_t.error.getter();
                sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
                uint64_t v85 = (void *)static OS_os_log.default.getter();
                os_log(_:dso:log:_:_:)();

                uint64_t v73 = 0;
              }
            }
            else
            {
              id v76 = v124;
              uint64_t v77 = (void *)_convertNSErrorToError(_:)();

              swift_willThrow();
              sub_10001CFB8(v63, v64);
              static os_log_type_t.error.getter();
              sub_10000588C((uint64_t *)&unk_10163AD00);
              uint64_t v78 = swift_allocObject();
              *(_OWORD *)(v78 + 16) = v100;
              id v124 = v77;
              swift_errorRetain();
              sub_10000588C(&qword_101638D40);
              uint64_t v79 = String.init<A>(describing:)();
              unint64_t v80 = v67;
              uint64_t v82 = v81;
              *(void *)(v78 + 56) = &type metadata for String;
              *(void *)(v78 + 64) = sub_10000B4CC();
              *(void *)(v78 + 32) = v79;
              *(void *)(v78 + 40) = v82;
              Swift::Int v67 = v80;
              sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
              uint64_t v83 = (void *)static OS_os_log.default.getter();
              os_log(_:dso:log:_:_:)();
              swift_errorRelease();
              unint64_t v66 = v104;
              swift_bridgeObjectRelease();

              uint64_t v73 = 0;
              uint64_t v101 = 0;
            }
            sub_10001CFB8(v63, v64);
            Swift::Int v61 = v118;
            if (!v73)
            {
              uint64_t v75 = v107;
              uint64_t v74 = (uint64_t)v108;
              uint64_t v32 = v113;
              Swift::Int v65 = v105;
LABEL_47:
              ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v61)(v74, 1, 1, v32);
LABEL_48:
              Date.init()();
              sub_10001DAB4(v74, (uint64_t *)&unk_10163AC90);
              goto LABEL_49;
            }
            id v86 = [v73 creationDate];

            uint64_t v75 = v107;
            uint64_t v74 = (uint64_t)v108;
            if (v86)
            {
              uint64_t v87 = (uint64_t)v99;
              static Date._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v88 = 0;
            }
            else
            {
              uint64_t v88 = 1;
              uint64_t v87 = (uint64_t)v99;
            }
            Swift::Int v65 = v105;
            uint64_t v32 = v113;
            ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v118)(v87, v88, 1, v113);
            sub_10001D608(v87, v74, (uint64_t *)&unk_10163AC90);
            if ((*v103)(v74, 1, v32) == 1) {
              goto LABEL_48;
            }
            (*v97)(v75, v74, v32);
LABEL_49:
            id v89 = v121;
            uint64_t v90 = Date.compare(_:)();
            uint64_t v91 = *v106;
            (*v106)(v75, v32);
            v91(v89, v32);
            uint64_t v27 = v112;
            sub_1003B61EC((uint64_t)v112, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
            uint64_t result = sub_1003B61EC((uint64_t)v120, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
            if (v90 == 1)
            {
              uint64_t v92 = *v66;
              if (!*v66) {
                __break(1u);
              }
              a4 = v66;
              uint64_t v93 = v92 + v123 + v34;
              sub_1003B6008(v92 + v122 + v34, v114, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
              swift_arrayInitWithTakeFrontToBack();
              uint64_t result = sub_1003B6008(v114, v93, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
              uint64_t v33 = v111;
              v34 -= v110;
              uint64_t v35 = v115 + 1;
              uint64_t v32 = v113;
              if (v111 == v115 + 1) {
                goto LABEL_5;
              }
              continue;
            }
            a4 = v66;
            uint64_t v33 = v111;
LABEL_5:
            a3 = v33 + 1;
            v123 += v110;
            v122 += v110;
            if (a3 == v95) {
              return result;
            }
            break;
          case 3uLL:
            goto LABEL_28;
          default:
            if ((v64 & 0xFF000000000000) != 0) {
              goto LABEL_31;
            }
LABEL_28:
            unint64_t v66 = a4;
            sub_10001CFB8(*(void *)v27, *((void *)v27 + 1));
            goto LABEL_36;
        }
        break;
      }
    }
  }
  return result;
}

uint64_t sub_100397DF4(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v44 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v8 = __chkstk_darwin(v44);
  uint64_t v43 = (uint64_t)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v40 - v10;
  uint64_t v13 = *(void *)(v12 + 72);
  if (!v13)
  {
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  if (a2 - a1 == 0x8000000000000000 && v13 == -1) {
    goto LABEL_61;
  }
  int64_t v14 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v13 == -1) {
    goto LABEL_62;
  }
  uint64_t v15 = (uint64_t)(a2 - a1) / v13;
  unint64_t v47 = a1;
  unint64_t v46 = a4;
  uint64_t v16 = v14 / v13;
  if (v15 >= v14 / v13)
  {
    if ((v16 & 0x8000000000000000) == 0)
    {
      uint64_t v18 = v16 * v13;
      if (a4 < a2 || a2 + v18 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v26 = a4 + v18;
      unint64_t v45 = a4 + v18;
      unint64_t v47 = a2;
      if (v18 >= 1 && a1 < a2)
      {
        unint64_t v41 = a4;
        unint64_t v42 = a1;
        do
        {
          unint64_t v28 = a3 - v13;
          sub_1003B6E14(v26 - v13, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
          unint64_t v29 = a2 - v13;
          unint64_t v30 = a3;
          uint64_t v31 = (uint64_t)v11;
          uint64_t v32 = v43;
          sub_1003B6E14(a2 - v13, v43, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
          char v33 = static Date.< infix(_:_:)();
          uint64_t v34 = v32;
          uint64_t v11 = (char *)v31;
          sub_1003B61EC(v34, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
          sub_1003B61EC(v31, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
          if (v33)
          {
            if (v30 < a2 || v28 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v36 = v41;
              unint64_t v37 = v42;
            }
            else
            {
              BOOL v35 = v30 == a2;
              unint64_t v36 = v41;
              unint64_t v37 = v42;
              if (!v35) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            v47 -= v13;
          }
          else
          {
            unint64_t v38 = v45;
            v45 -= v13;
            if (v30 < v38 || v28 >= v38)
            {
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v29 = a2;
              unint64_t v36 = v41;
              unint64_t v37 = v42;
            }
            else
            {
              unint64_t v37 = v42;
              if (v30 != v38) {
                swift_arrayInitWithTakeBackToFront();
              }
              unint64_t v29 = a2;
              unint64_t v36 = v41;
            }
          }
          unint64_t v26 = v45;
          if (v45 <= v36) {
            break;
          }
          a2 = v29;
          a3 = v28;
        }
        while (v29 > v37);
      }
      goto LABEL_59;
    }
  }
  else if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v17 = v15 * v13;
    if (a4 < a1 || a1 + v17 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v19 = a4 + v17;
    unint64_t v45 = a4 + v17;
    if (v17 >= 1 && a2 < a3)
    {
      do
      {
        sub_1003B6E14(a2, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        uint64_t v21 = v43;
        sub_1003B6E14(a4, v43, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        char v22 = static Date.< infix(_:_:)();
        sub_1003B61EC(v21, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        sub_1003B61EC((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        unint64_t v23 = v47;
        if (v22)
        {
          unint64_t v24 = a2 + v13;
          if (v47 < a2 || v47 >= v24)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v47 == a2)
          {
            unint64_t v23 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        else
        {
          unint64_t v25 = v46 + v13;
          if (v47 < v46 || v47 >= v25)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v47 != v46)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          unint64_t v46 = v25;
          unint64_t v24 = a2;
        }
        unint64_t v47 = v23 + v13;
        a4 = v46;
        if (v46 >= v19) {
          break;
        }
        a2 = v24;
      }
      while (v24 < a3);
    }
LABEL_59:
    sub_100B72D38(&v47, &v46, (uint64_t *)&v45);
    return 1;
  }
LABEL_63:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100398310(unint64_t a1, unint64_t a2, unint64_t a3, char *a4)
{
  uint64_t v5 = v4;
  uint64_t v84 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v84 - 8);
  uint64_t v11 = __chkstk_darwin(v84);
  uint64_t v77 = (uint64_t)&v72 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  unint64_t v83 = (unint64_t)&v72 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  unint64_t v80 = (unint64_t)&v72 - v16;
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v72 - v17;
  uint64_t v79 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v19 = __chkstk_darwin(v79);
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v82 = (uint64_t *)((char *)&v72 - v21);
  uint64_t v22 = __chkstk_darwin(v20);
  unint64_t v24 = (uint64_t *)((char *)&v72 - v23);
  __chkstk_darwin(v22);
  uint64_t v81 = (uint64_t *)((char *)&v72 - v26);
  uint64_t v85 = *(void *)(v27 + 72);
  if (!v85)
  {
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
  unint64_t v28 = a2;
  if (a2 - a1 == 0x8000000000000000 && v85 == -1) {
    goto LABEL_66;
  }
  int64_t v29 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v85 == -1) {
    goto LABEL_67;
  }
  uint64_t v30 = (uint64_t)(a2 - a1) / v85;
  uint64_t v88 = (char *)a1;
  uint64_t v87 = a4;
  uint64_t v31 = v29 / v85;
  if (v30 >= v29 / v85)
  {
    id v76 = v25;
    if (v31 < 0) {
      goto LABEL_70;
    }
    uint64_t v35 = v31 * v85;
    if ((unint64_t)a4 < v28 || v28 + v35 <= (unint64_t)a4)
    {
      unint64_t v36 = v28;
      swift_arrayInitWithTakeFrontToBack();
    }
    else
    {
      if (a4 == (char *)v28) {
        goto LABEL_43;
      }
      unint64_t v36 = v28;
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v28 = v36;
LABEL_43:
    unint64_t v52 = (unint64_t)&a4[v35];
    unint64_t v86 = (unint64_t)&a4[v35];
    uint64_t v88 = (char *)v28;
    if (v35 >= 1 && a1 < v28)
    {
      uint64_t v54 = -v85;
      unint64_t v73 = a1;
      uint64_t v74 = (void (**)(uint64_t, uint64_t))(v10 + 8);
      uint64_t v55 = v76;
      unint64_t v75 = (unint64_t)a4;
      uint64_t v78 = -v85;
      while (1)
      {
        id v56 = v82;
        unint64_t v57 = v28;
        sub_1003B6E14(v52 + v54, (uint64_t)v82, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        uint64_t v85 = v57;
        unint64_t v58 = v57 + v54;
        sub_1003B6E14(v58, (uint64_t)v55, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        sub_100B23648(v56, v83);
        if (v5) {
          goto LABEL_69;
        }
        uint64_t v60 = v77;
        sub_100B23648(v55, v77);
        uint64_t v81 = 0;
        uint64_t v61 = (uint64_t)v55;
        uint64_t v54 = v78;
        unint64_t v80 = a3 + v78;
        unint64_t v62 = v83;
        uint64_t v63 = Date.compare(_:)();
        unint64_t v64 = *v74;
        uint64_t v65 = v60;
        unint64_t v66 = a3;
        uint64_t v67 = v84;
        (*v74)(v65, v84);
        v64(v62, v67);
        sub_1003B61EC(v61, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        sub_1003B61EC((uint64_t)v82, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        if (v63 == 1)
        {
          a3 = v80;
          if (v66 < v85 || v80 >= v85)
          {
            swift_arrayInitWithTakeFrontToBack();
            unint64_t v69 = v75;
            uint64_t v55 = v76;
            uint64_t v5 = (uint64_t)v81;
            uint64_t v54 = v78;
          }
          else
          {
            BOOL v68 = v66 == v85;
            unint64_t v69 = v75;
            uint64_t v55 = v76;
            uint64_t v5 = (uint64_t)v81;
            uint64_t v54 = v78;
            if (!v68) {
              swift_arrayInitWithTakeBackToFront();
            }
          }
          v88 += v54;
        }
        else
        {
          unint64_t v70 = v86;
          v86 += v54;
          a3 = v80;
          if (v66 < v70 || v80 >= v70)
          {
            swift_arrayInitWithTakeFrontToBack();
            unint64_t v58 = v85;
            unint64_t v69 = v75;
            uint64_t v55 = v76;
            uint64_t v5 = (uint64_t)v81;
          }
          else
          {
            uint64_t v5 = (uint64_t)v81;
            uint64_t v55 = v76;
            if (v66 != v70) {
              swift_arrayInitWithTakeBackToFront();
            }
            unint64_t v58 = v85;
            unint64_t v69 = v75;
          }
        }
        unint64_t v52 = v86;
        if (v86 > v69)
        {
          unint64_t v28 = v58;
          if (v58 > v73) {
            continue;
          }
        }
        goto LABEL_64;
      }
    }
    goto LABEL_64;
  }
  if ((v30 & 0x8000000000000000) == 0)
  {
    uint64_t v32 = v10;
    unint64_t v33 = a2;
    uint64_t v34 = v30 * v85;
    if ((unint64_t)a4 < a1 || a1 + v34 <= (unint64_t)a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != (char *)a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v83 = (unint64_t)&a4[v34];
    unint64_t v86 = (unint64_t)&a4[v34];
    BOOL v37 = v34 < 1 || v33 >= a3;
    if (!v37)
    {
      uint64_t v38 = v33;
      uint64_t v82 = v24;
      unint64_t v39 = (void (**)(unint64_t, uint64_t))(v32 + 8);
      while (1)
      {
        unint64_t v40 = v38;
        unint64_t v41 = v81;
        sub_1003B6E14(v38, (uint64_t)v81, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        sub_1003B6E14((uint64_t)a4, (uint64_t)v24, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        sub_100B23648(v41, (uint64_t)v18);
        if (v5) {
          goto LABEL_68;
        }
        unint64_t v42 = a3;
        unint64_t v44 = v80;
        sub_100B23648(v24, v80);
        uint64_t v5 = 0;
        uint64_t v45 = Date.compare(_:)();
        unint64_t v46 = *v39;
        unint64_t v47 = v44;
        uint64_t v48 = v84;
        (*v39)(v47, v84);
        v46((unint64_t)v18, v48);
        sub_1003B61EC((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        sub_1003B61EC((uint64_t)v81, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        unint64_t v49 = (unint64_t)v88;
        if (v45 == 1)
        {
          unint64_t v50 = v40 + v85;
          if ((unint64_t)v88 < v40 || (unint64_t)v88 >= v50)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v88 == (char *)v40)
          {
            unint64_t v49 = v40;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        else
        {
          unint64_t v51 = (unint64_t)&v87[v85];
          if (v88 < v87 || (unint64_t)v88 >= v51)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v88 != v87)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          uint64_t v87 = (char *)v51;
          unint64_t v50 = v40;
        }
        uint64_t v88 = (char *)(v49 + v85);
        a4 = v87;
        if ((unint64_t)v87 < v83)
        {
          uint64_t v38 = v50;
          BOOL v37 = v50 >= v42;
          a3 = v42;
          if (!v37) {
            continue;
          }
        }
        break;
      }
    }
LABEL_64:
    sub_100B72D38((unint64_t *)&v88, (unint64_t *)&v87, (uint64_t *)&v86);
    return 1;
  }
LABEL_70:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

id sub_100398B08(uint64_t a1, char *a2)
{
  v410 = a2;
  uint64_t v355 = sub_10000588C(&qword_10163B8A8);
  __chkstk_darwin(v355);
  v356 = (char *)&v344 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for KeyDropLostItemDates(0);
  uint64_t v354 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v349 = (uint64_t)&v344 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_101653D30);
  __chkstk_darwin(v6 - 8);
  uint64_t v351 = (uint64_t)&v344 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C((uint64_t *)&unk_101653D50);
  __chkstk_darwin(v8 - 8);
  v390 = (char *)&v344 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v392 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v367 = *(void *)(v392 - 8);
  uint64_t v10 = __chkstk_darwin(v392);
  uint64_t v12 = (char *)&v344 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v346 = (uint64_t)&v344 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v352 = (uint64_t)&v344 - v16;
  uint64_t v353 = v17;
  __chkstk_darwin(v15);
  uint64_t v368 = (uint64_t)&v344 - v18;
  uint64_t v19 = sub_10000588C(&qword_101638CF0);
  uint64_t v20 = __chkstk_darwin(v19 - 8);
  uint64_t v357 = (uint64_t)&v344 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v364 = (uint64_t)&v344 - v22;
  uint64_t v23 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v23 - 8);
  v389 = (char *)&v344 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v388 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v365 = (uint64_t)&v344 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v387 = sub_10000588C(&qword_10163B9E0);
  __chkstk_darwin(v387);
  v372 = (char *)&v344 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v373 = type metadata accessor for BeaconNamingRecord();
  uint64_t v386 = *(void *)(v373 - 8);
  __chkstk_darwin(v373);
  uint64_t v366 = (uint64_t)&v344 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = sub_10000588C((uint64_t *)&unk_10163B1D0);
  __chkstk_darwin(v29 - 8);
  v385 = (char *)&v344 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = sub_10000588C(&qword_10163BBB0);
  uint64_t v32 = __chkstk_darwin(v31 - 8);
  uint64_t v363 = (uint64_t)&v344 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v32);
  uint64_t v369 = (uint64_t)&v344 - v34;
  uint64_t v384 = type metadata accessor for BeaconProductInfoRecord();
  uint64_t v396 = *(void *)(v384 - 8);
  uint64_t v35 = __chkstk_darwin(v384);
  uint64_t v350 = (uint64_t)&v344 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v35);
  uint64_t v360 = (uint64_t)&v344 - v37;
  uint64_t v38 = sub_10000588C(&qword_10163BB80);
  __chkstk_darwin(v38 - 8);
  uint64_t v382 = (uint64_t)&v344 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v383 = type metadata accessor for KeyAlignmentRecord();
  uint64_t v381 = *(void *)(v383 - 8);
  __chkstk_darwin(v383);
  uint64_t v362 = (uint64_t)&v344 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v378 = sub_10000588C((uint64_t *)&unk_101653D40);
  uint64_t v41 = __chkstk_darwin(v378);
  v380 = (char **)((char *)&v344 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v43 = __chkstk_darwin(v41);
  v379 = (uint64_t *)((char *)&v344 - v44);
  __chkstk_darwin(v43);
  unint64_t v46 = (char *)&v344 - v45;
  uint64_t v421 = type metadata accessor for LocationProvider();
  uint64_t v47 = *(void *)(v421 - 8);
  uint64_t v48 = __chkstk_darwin(v421);
  v414 = (void (*)(char *, uint64_t))((char *)&v344 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v48);
  unint64_t v51 = (char *)&v344 - v50;
  uint64_t v52 = sub_10000588C(&qword_1016426B0);
  uint64_t v53 = __chkstk_darwin(v52 - 8);
  uint64_t v416 = (uint64_t)&v344 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v53);
  uint64_t v418 = (uint64_t)&v344 - v55;
  uint64_t v417 = type metadata accessor for Date();
  uint64_t v401 = *(void *)(v417 - 8);
  uint64_t v56 = __chkstk_darwin(v417 - 8);
  unint64_t v58 = (char *)&v344 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = __chkstk_darwin(v56);
  v347 = (char *)&v344 - v60;
  uint64_t v61 = __chkstk_darwin(v59);
  v361 = (char *)&v344 - v62;
  uint64_t v63 = __chkstk_darwin(v61);
  v371 = (char *)&v344 - v64;
  uint64_t v65 = __chkstk_darwin(v63);
  v419 = (char *)&v344 - v66;
  __chkstk_darwin(v65);
  v399 = (char *)&v344 - v67;
  uint64_t v395 = sub_10000588C(&qword_10163BB30);
  uint64_t v68 = __chkstk_darwin(v395);
  v394 = (char *)&v344 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v68);
  v400 = (char *)&v344 - v70;
  uint64_t v71 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v72 = __chkstk_darwin(v71 - 8);
  v344 = (char *)&v344 - ((v73 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = __chkstk_darwin(v72);
  uint64_t v348 = (uint64_t)&v344 - v75;
  uint64_t v76 = __chkstk_darwin(v74);
  v370 = (char *)&v344 - v77;
  __chkstk_darwin(v76);
  v391 = (char **)((char *)&v344 - v78);
  uint64_t v79 = sub_10000588C(&qword_10163BB70);
  __chkstk_darwin(v79 - 8);
  v413 = (uint64_t *)((char *)&v344 - ((v80 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v409 = type metadata accessor for UUID();
  uint64_t v402 = *(void *)(v409 - 8);
  uint64_t v81 = __chkstk_darwin(v409);
  uint64_t v407 = (uint64_t)&v344 - ((v82 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v83 = __chkstk_darwin(v81);
  v393 = (char *)&v344 - v84;
  uint64_t v85 = __chkstk_darwin(v83);
  v412 = (void (*)(uint64_t, uint64_t))((char *)&v344 - v86);
  __chkstk_darwin(v85);
  uint64_t v88 = (char *)&v344 - v87;
  v431[3] = v25;
  v431[4] = sub_100394110(&qword_101638DD0, (void (*)(uint64_t))type metadata accessor for OwnedBeaconRecord);
  id v89 = sub_10001D958(v431);
  sub_1003B6E14(a1, (uint64_t)v89, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  id v411 = [objc_allocWithZone((Class)SPBeacon) init];
  v406 = (int *)v25;
  uint64_t v90 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))*(int *)(v25 + 68);
  v420 = (void *)*(int *)(v25 + 64);
  uint64_t v91 = *(void *)((char *)v420 + (void)v89);
  v403 = v89;
  v415 = v90;
  uint64_t v92 = sub_1002AAF08(v91, *(uint64_t *)((char *)v90 + (void)v89));
  v397 = v46;
  v359 = v12;
  uint64_t v358 = v4;
  v345 = v58;
  if (v93 >> 60 == 15)
  {
    if (qword_101636F50 != -1) {
      swift_once();
    }
    uint64_t v94 = type metadata accessor for Logger();
    sub_100010324(v94, (uint64_t)qword_10170E9E8);
    sub_10001D010((uint64_t)v431, (uint64_t)&v423);
    sub_10001D010((uint64_t)v431, (uint64_t)&v429);
    uint64_t v95 = Logger.logObject.getter();
    os_log_type_t v96 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v95, v96))
    {
      uint64_t v97 = swift_slowAlloc();
      *(_DWORD *)uint64_t v97 = 134218240;
      BOOL v98 = v88;
      uint64_t v99 = sub_10001CD44(&v423, v425);
      long long v100 = v406;
      uint64_t v101 = *(void *)((char *)v99 + v406[16]);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v423);
      *(void *)&long long v422 = v101;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v97 + 12) = 2048;
      uint64_t v102 = *(void *)((char *)sub_10001CD44(&v429, v430) + v100[17]);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v429);
      *(void *)&long long v423 = v102;
      uint64_t v88 = v98;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v95, v96, "Unable to create AccessoryProductData from %ld/%ld", (uint8_t *)v97, 0x16u);
      swift_slowDealloc();
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v429);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v423);
    }

    id v106 = v411;
    UUID.init(uuid:)();
  }
  else
  {
    uint64_t v103 = v92;
    unint64_t v104 = v93;
    if (qword_101636960 != -1) {
      swift_once();
    }
    long long v423 = xmmword_1016408F8;
    sub_1000361E0(xmmword_1016408F8, *((unint64_t *)&xmmword_1016408F8 + 1));
    Data.append(_:)();
    long long v105 = v423;
    long long v429 = v423;
    sub_1000362FC();
    DataProtocol.stableUUID.getter();
    sub_10001CFB8(v105, *((unint64_t *)&v105 + 1));
    sub_100037A24(v103, v104);
    id v106 = v411;
  }
  Class v107 = v403;
  uint64_t v108 = (uint64_t)v403 + v406[5];
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  [v106 setIdentifier:isa];

  swift_bridgeObjectRetain();
  NSString v110 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v106 setModel:v110];

  sub_10001D4B0(0, &qword_10163B870);
  sub_10012E2E4(&qword_10163B878, &qword_10163B870);
  Class v111 = Set._bridgeToObjectiveC()().super.isa;
  [v106 setShares:v111];

  swift_bridgeObjectRetain();
  NSString v112 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v106 setSystemVersion:v112];

  v374 = v88;
  Class v113 = UUID._bridgeToObjectiveC()().super.isa;
  [v106 setProductUUID:v113];

  [v106 setVendorId:*(void *)((char *)v420 + (void)v107)];
  [v106 setProductId:*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)v415 + (void)v107)];
  Class v114 = Date._bridgeToObjectiveC()().super.isa;
  [v106 setPairingDate:v114];

  uint64_t v115 = v108;
  id v116 = sub_100D1C7BC();
  [v106 setType:v116];

  uint64_t v117 = *(void (**)(uint64_t, uint64_t, uint64_t))(v402 + 16);
  uint64_t v118 = (uint64_t)v412;
  uint64_t v408 = v115;
  uint64_t v119 = v409;
  v404 = v117;
  uint64_t v405 = v402 + 16;
  v117((uint64_t)v412, v115, v409);
  uint64_t v398 = *((void *)v410 + 20);
  v120 = sub_100B6D358(v118);
  uint64_t v121 = v120[2];
  uint64_t v122 = (int *)type metadata accessor for LostModeRecord();
  uint64_t v123 = *((void *)v122 - 1);
  if (v121)
  {
    id v124 = v413;
    sub_1003B6E14((uint64_t)v120+ ((*(unsigned __int8 *)(*((void *)v122 - 1) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*((void *)v122 - 1) + 80)), (uint64_t)v413, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
    uint64_t v125 = 0;
  }
  else
  {
    uint64_t v125 = 1;
    id v124 = v413;
  }
  (*(void (**)(uint64_t *, uint64_t, uint64_t, int *))(v123 + 56))(v124, v125, 1, v122);
  swift_bridgeObjectRelease();
  v126 = *(void (**)(uint64_t, uint64_t))(v402 + 8);
  v413 = (uint64_t *)(v402 + 8);
  v412 = v126;
  v126(v118, v119);
  int v127 = (*(uint64_t (**)(uint64_t *, uint64_t, int *))(v123 + 48))(v124, 1, v122);
  v128 = (long long *)v417;
  if (v127 == 1)
  {
    sub_10001DAB4((uint64_t)v124, &qword_10163BB70);
    id v129 = 0;
  }
  else
  {
    uint64_t v130 = (uint64_t *)((char *)v124 + v122[9]);
    uint64_t v131 = v130[1];
    uint64_t v377 = *v130;
    uint64_t v132 = v122[8];
    uint64_t v133 = (uint64_t *)((char *)v124 + v122[7]);
    uint64_t v134 = v133[1];
    uint64_t v375 = *v133;
    uint64_t v135 = *(uint64_t *)((char *)v124 + v132 + 8);
    uint64_t v376 = *(uint64_t *)((char *)v124 + v132);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v137 = (void (*)(void, void, void))v391;
    sub_100B23648(v124, (uint64_t)v391);
    uint64_t v138 = v136;
    id v106 = v411;
    (*(void (**)(void (*)(void, void, void), void, uint64_t, long long *))(v401 + 56))(v137, 0, 1, v128);
    id v139 = objc_allocWithZone((Class)SPLostModeInfo);
    uint64_t v140 = v134;
    uint64_t v119 = v409;
    id v129 = sub_100B23CB8(v377, v131, v375, v140, v376, v135, (uint64_t)v137);
    sub_1003B61EC((uint64_t)v124, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
  }
  uint64_t v141 = (uint64_t)v393;
  [v106 setLostModeInfo:v129];

  v404(v141, v408, v119);
  if (qword_101636CB8 != -1) {
    swift_once();
  }
  sub_1007B4970(v141, 0, 0, &v423);
  uint64_t v143 = v395;
  Swift::Int v144 = v400;
  uint64_t v145 = (uint64_t)&v400[*(int *)(v395 + 48)];
  LOBYTE(v142) = sub_100AF7A38(v145, v141, (void *)v423, 1);
  swift_bridgeObjectRelease();
  v412(v141, v409);
  char v146 = v142 & 1;
  *Swift::Int v144 = v142 & 1;
  [v411 setConnected:v142 & 1];
  uint64_t v147 = *(int *)(v143 + 48);
  uint64_t v148 = v394;
  v149 = &v394[v147];
  char *v394 = v146;
  sub_10001D074(v145, (uint64_t)&v148[v147], (uint64_t *)&unk_10163AC90);
  uint64_t v150 = v401;
  uint64_t v151 = *(char **)(v401 + 48);
  uint64_t v395 = v401 + 48;
  v394 = v151;
  if (((unsigned int (*)(char *, uint64_t, long long *))v151)(v149, 1, v128) == 1)
  {
    Class v152 = 0;
  }
  else
  {
    Class v152 = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, long long *))(v150 + 8))(v149, v128);
  }
  id v153 = v411;
  [v411 setConnectedStateExpiryDate:v152];

  [v153 setIsAppleAudioAccessory:sub_100DF1520(*(void *)((char *)v420 + (void)v403), *(uint64_t *)((char *)v415 + (void)v403))];
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v377 = 0;
  sub_1010ABF18(v423);
  swift_bridgeObjectRelease();
  v154 = v399;
  Date.init(timeIntervalSinceNow:)();
  id v155 = sub_100B6EE9C(v408);
  Class v156 = *(char ***)(v150 + 16);
  v393 = (char *)(v150 + 16);
  v391 = v156;
  ((void (*)(char *, char *, long long *))v156)(v419, v154, v128);
  id v157 = (void **)SPLocationProvider_ptr;
  uint64_t v158 = sub_10001D4B0(0, (unint64_t *)&unk_10166BF70);
  id v159 = (long long *)sub_10012E2E4(&qword_1016426B8, (unint64_t *)&unk_10166BF70);
  swift_bridgeObjectRetain();
  uint64_t v376 = v158;
  uint64_t v375 = (uint64_t)v159;
  v160 = 0;
  *(void *)&long long v423 = Set.init(minimumCapacity:)();
  id v161 = v155;
  v162 = (void **)v155[2];
  v415 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v47 + 56);
  v420 = v161;
  uint64_t v163 = (uint64_t)v414;
  if (v162) {
    goto LABEL_25;
  }
LABEL_28:
  while (1)
  {
    uint64_t v164 = 1;
    v160 = v162;
LABEL_30:
    uint64_t v165 = v418;
    uint64_t v166 = v421;
    (*v415)(v418, v164, 1, v421);
    uint64_t v167 = v165;
    uint64_t v168 = v416;
    sub_10001D608(v167, v416, &qword_1016426B0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v168, 1, v166) == 1) {
      break;
    }
    sub_1003B6008(v168, v163, (uint64_t (*)(void))type metadata accessor for LocationProvider);
    char v169 = sub_100B967D0(*(unsigned __int8 *)(v163 + *(int *)(v166 + 24)), *(void *)(v163 + *(int *)(v166 + 24) + 8), *(void **)(v163 + *(int *)(v166 + 24) + 16));
    id v157 = (void **)sub_100ECF4F0(v169, v170, v171);
    swift_bridgeObjectRelease();
    id v172 = objc_allocWithZone((Class)SPLocationProvider);
    Class v173 = Date._bridgeToObjectiveC()().super.isa;
    id v174 = [v172 initWithTimestamp:v173 provider:v157];

    sub_1003B61EC(v163, (uint64_t (*)(void))type metadata accessor for LocationProvider);
    id v159 = &v423;
    sub_100DCCD24(&v429, v174);

    v128 = (long long *)v417;
    id v161 = v420;
    if (v160 != v162)
    {
LABEL_25:
      while ((unint64_t)v160 < v161[2])
      {
        id v157 = (void **)((char *)v160 + 1);
        sub_1003B6E14((uint64_t)v161+ ((*(unsigned __int8 *)(v47 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v47 + 80))+ *(void *)(v47 + 72) * (void)v160, (uint64_t)v51, (uint64_t (*)(void))type metadata accessor for LocationProvider);
        sub_100394110((unint64_t *)&qword_1016605E0, (void (*)(uint64_t))&type metadata accessor for Date);
        id v159 = v128;
        if ((dispatch thunk of static Comparable.< infix(_:_:)() & 1) == 0)
        {
          sub_1003B6008((uint64_t)v51, v418, (uint64_t (*)(void))type metadata accessor for LocationProvider);
          uint64_t v164 = 0;
          v160 = (void **)((char *)v160 + 1);
          goto LABEL_30;
        }
        sub_1003B61EC((uint64_t)v51, (uint64_t (*)(void))type metadata accessor for LocationProvider);
        v160 = (void **)((char *)v160 + 1);
        id v161 = v420;
        if (v162 == v157) {
          goto LABEL_28;
        }
      }
      __break(1u);
      goto LABEL_78;
    }
  }
  swift_bridgeObjectRelease();
  Class v175 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v176 = v411;
  [v411 setLocationProviders:v175];

  type metadata accessor for BeaconKeyManager(0);
  uint64_t v177 = v377;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  uint64_t v418 = v177;
  uint64_t v178 = v423;
  sub_10001D010((uint64_t)v431, (uint64_t)&v423);
  uint64_t v179 = swift_allocObject();
  *(void *)(v179 + 16) = v178;
  sub_10001CEB0(&v423, v179 + 24);
  uint64_t v421 = v178;
  swift_retain();
  uint64_t v180 = (uint64_t)v397;
  unsafeFromAsyncTask<A>(_:)();
  swift_release();
  id v181 = (uint64_t *)&unk_101653D40;
  id v182 = v379;
  sub_10001D074(v180, (uint64_t)v379, (uint64_t *)&unk_101653D40);
  uint64_t v183 = sub_10000588C(&qword_10163F7B0);
  v184 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v183 - 8) + 48);
  uint64_t v185 = 1;
  if (v184(v182, 1, v183) != 1)
  {
    uint64_t v185 = *v182;
    id v181 = &qword_10163F7B0;
  }
  uint64_t v186 = v409;
  uint64_t v187 = v371;
  sub_10001DAB4((uint64_t)v182, v181);
  [v176 setKeySyncLastObservedIndex:v185];
  v188 = (char *)v380;
  sub_10001D074(v180, (uint64_t)v380, (uint64_t *)&unk_101653D40);
  if (v184((uint64_t *)v188, 1, v183) == 1)
  {
    sub_10001DAB4((uint64_t)v188, (uint64_t *)&unk_101653D40);
    uint64_t v189 = v401;
    uint64_t v190 = *(char ***)(v401 + 56);
    uint64_t v191 = (uint64_t)v370;
    v192 = v370;
    uint64_t v193 = 1;
    uint64_t v194 = v417;
  }
  else
  {
    id v195 = &v188[*(int *)(v183 + 36)];
    uint64_t v191 = (uint64_t)v370;
    uint64_t v194 = v417;
    ((void (*)(char *, char *, uint64_t))v391)(v370, v195, v417);
    sub_10001DAB4((uint64_t)v188, &qword_10163F7B0);
    uint64_t v189 = v401;
    uint64_t v190 = *(char ***)(v401 + 56);
    v192 = (char *)v191;
    uint64_t v193 = 0;
  }
  v380 = v190;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v190)(v192, v193, 1, v194);
  sub_10001D010((uint64_t)v431, (uint64_t)&v429);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v394)(v191, 1, v194) == 1)
  {
    uint64_t v196 = sub_10001CD44(&v429, v430);
    ((void (*)(char *, char *, uint64_t))v391)(v187, (char *)v196 + v406[8], v194);
    sub_10001DAB4(v191, (uint64_t *)&unk_10163AC90);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v189 + 32))(v187, v191, v194);
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v429);
  Class v197 = Date._bridgeToObjectiveC()().super.isa;
  v198 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v189 + 8);
  v199 = *(void (**)(char *, uint64_t))(v189 + 8);
  v199(v187, v194);
  [v176 setKeySyncLastIndexObservationDate:v197];

  [v176 setKeySyncWildIndexFallback:1];
  uint64_t v200 = v407;
  v404(v407, v408, v186);
  uint64_t v201 = v186;
  uint64_t v202 = v382;
  sub_100B6C53C(v382);
  v412(v200, v201);
  uint64_t v203 = v383;
  int v204 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v381 + 48))(v202, 1, v383);
  v415 = v198;
  v414 = v199;
  if (v204 == 1)
  {
    sub_10001DAB4(v202, &qword_10163BB80);
    [v176 setKeyAlignmentLastObservedIndex:0];
    v205 = v361;
    static Date.distantPast.getter();
    Class v206 = Date._bridgeToObjectiveC()().super.isa;
    v199(v205, v194);
    [v176 setKeyAlignmentLastIndexObservationDate:v206];
  }
  else
  {
    uint64_t v207 = v362;
    sub_1003B6008(v202, v362, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
    [v176 setKeyAlignmentLastObservedIndex:*(void *)(v207 + *(int *)(v203 + 28))];
    Class v208 = Date._bridgeToObjectiveC()().super.isa;
    [v176 setKeyAlignmentLastIndexObservationDate:v208];

    sub_1003B61EC(v207, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
  }
  id v209 = [v176 type];
  uint64_t v210 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v212 = v211;
  uint64_t v213 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v215 = v384;
  if (v210 == v213 && v212 == v214)
  {
    uint64_t v216 = v201;
LABEL_47:

    swift_bridgeObjectRelease_n();
    goto LABEL_49;
  }
  char v217 = _stringCompareWithSmolCheck(_:_:expecting:)();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v216 = v201;
  if (v217) {
    goto LABEL_49;
  }
  id v209 = [v176 type];
  uint64_t v234 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v236 = v235;
  if (v234 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v236 == v237) {
    goto LABEL_47;
  }
  char v238 = _stringCompareWithSmolCheck(_:_:expecting:)();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v238)
  {
LABEL_49:
    id v218 = [v176 identifier];
    uint64_t v219 = v407;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v220 = v369;
    sub_100AE311C(v219, v369);
    v412(v219, v216);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v396 + 48))(v220, 1, v215) == 1)
    {
      sub_10001DAB4(v220, &qword_10163BBB0);
    }
    else
    {
      uint64_t v221 = v360;
      sub_1003B6008(v220, v360, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
      id v222 = sub_100853D90();
      [v176 setAccessoryProductInfo:v222];

      sub_1003B61EC(v221, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
    }
  }
  sub_10001D010((uint64_t)v431, (uint64_t)&v423);
  uint64_t v223 = sub_10000588C((uint64_t *)&unk_10164DBF0);
  uint64_t v224 = type metadata accessor for LocalFindableAccessoryRecord();
  uint64_t v225 = (uint64_t)v385;
  int v226 = swift_dynamicCast();
  uint64_t v227 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v224 - 8) + 56);
  uint64_t v416 = v223;
  if (v226)
  {
    v227(v225, 0, 1, v224);
    sub_10001DAB4(v225, (uint64_t *)&unk_10163B1D0);
    id v228 = [v176 identifier];
    uint64_t v229 = v407;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v230 = v363;
    unint64_t v51 = v410;
    sub_100AE311C(v229, v363);
    v412(v229, v216);
    int v231 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v396 + 48))(v230, 1, v215);
    uint64_t v232 = v373;
    uint64_t v233 = (uint64_t)v372;
    if (v231 == 1)
    {
      sub_10001DAB4(v230, &qword_10163BBB0);
    }
    else
    {
      uint64_t v239 = v230;
      uint64_t v240 = v350;
      sub_1003B6008(v239, v350, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
      id v241 = sub_100853D90();
      [v176 setAccessoryProductInfo:v241];

      sub_1003B61EC(v240, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
    }
  }
  else
  {
    v227(v225, 1, 1, v224);
    sub_10001DAB4(v225, (uint64_t *)&unk_10163B1D0);
    unint64_t v51 = v410;
    uint64_t v232 = v373;
    uint64_t v233 = (uint64_t)v372;
  }
  uint64_t v242 = v407;
  uint64_t v243 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v404)(v407, v408, v216);
  __chkstk_darwin(v243);
  QueueSynchronizer.conditionalSync<A>(_:)();
  v412(v242, v216);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v386 + 48))(v233, 1, v232) == 1)
  {
    sub_10001DAB4(v233, &qword_10163B9E0);
    sub_10001D010((uint64_t)v431, (uint64_t)&v422);
    uint64_t v244 = swift_allocObject();
    *(void *)(v244 + 16) = v51;
    sub_10001CEB0(&v422, v244 + 24);
    swift_retain();
    sub_10000588C(&qword_10163A110);
    unsafeFromAsyncTask<A>(_:)();
    swift_release();
    id v157 = (void **)*((void *)&v423 + 1);
    uint64_t v245 = v417;
    v246 = v406;
    if (!*((void *)&v423 + 1))
    {
      uint64_t v47 = v392;
      uint64_t v270 = (uint64_t)v390;
      goto LABEL_80;
    }
    unint64_t v247 = v424;
    uint64_t v418 = v425;
    uint64_t v249 = v426;
    uint64_t v248 = v427;
    unint64_t v250 = v176;
    uint64_t v251 = v428;
    uint64_t v407 = v423;
    NSString v252 = String._bridgeToObjectiveC()();
    [v250 setName:v252];

    uint64_t v253 = sub_1012D4780(v247);
    id v159 = (long long *)v253;
    uint64_t v408 = v248;
    if (v247 == SPBeaconRoleIdOther && v249 && v253)
    {
      swift_bridgeObjectRetain();
      id v254 = [v159 role];
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      id v255 = objc_allocWithZone((Class)SPBeaconRole);
      NSString v256 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      NSString v257 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v258 = [v255 initWithRoleId:v247 role:v256 roleEmoji:v257];

      unint64_t v51 = v410;
      [v411 setRole:v258];
    }
    else
    {
      [v411 setRole:v253];
    }
    uint64_t v47 = v392;
    if (v251)
    {
      swift_bridgeObjectRetain();
      NSString v271 = String._bridgeToObjectiveC()();
      sub_100090C68(v407, (uint64_t)v157);
      swift_bridgeObjectRelease();
    }
    else
    {
LABEL_78:
      sub_100090C68(v407, (uint64_t)v157);
      NSString v271 = 0;
    }
    id v176 = v411;
    [v411 setSerialNumber:v271];

    uint64_t v245 = v417;
    uint64_t v216 = v409;
    uint64_t v270 = (uint64_t)v390;
    v246 = v406;
    goto LABEL_80;
  }
  uint64_t v259 = v366;
  sub_1003B6008(v233, v366, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
  swift_bridgeObjectRetain();
  NSString v260 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v176 setName:v260];

  unint64_t v261 = *(void *)(v259 + *(int *)(v232 + 28));
  uint64_t v262 = sub_1012D4780(v261);
  uint64_t v263 = (void *)v262;
  uint64_t v47 = v392;
  if (v261 == SPBeaconRoleIdOther && *(void *)(v259 + *(int *)(v232 + 36) + 8) && v262)
  {
    swift_bridgeObjectRetain();
    id v264 = [v263 role];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    id v265 = objc_allocWithZone((Class)SPBeaconRole);
    NSString v266 = String._bridgeToObjectiveC()();
    id v176 = v411;
    swift_bridgeObjectRelease();
    NSString v267 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v268 = v265;
    unint64_t v51 = v410;
    id v269 = [v268 initWithRoleId:v261 role:v266 roleEmoji:v267];

    uint64_t v216 = v409;
    uint64_t v259 = v366;
    [v176 setRole:v269];

    uint64_t v263 = v269;
  }
  else
  {
    [v176 setRole:v262];
  }
  uint64_t v245 = v417;
  uint64_t v270 = (uint64_t)v390;
  v246 = v406;

  sub_1003B61EC(v259, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
LABEL_80:
  sub_10001D010((uint64_t)v431, (uint64_t)&v423);
  uint64_t v272 = (uint64_t)v389;
  int v273 = swift_dynamicCast();
  Swift::Int v274 = *(void (**)(uint64_t, uint64_t, uint64_t, int *))(v388 + 56);
  if (v273)
  {
    v274(v272, 0, 1, v246);
    uint64_t v275 = v365;
    sub_1003B6008(v272, v365, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    sub_101110C7C();
    NSString v276 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v176 setStableIdentifier:v276];

    uint64_t v277 = v364;
    sub_10001D074(v275 + v246[7], v364, &qword_101638CF0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v402 + 48))(v277, 1, v216) == 1)
    {
      Class v278 = 0;
    }
    else
    {
      Class v278 = UUID._bridgeToObjectiveC()().super.isa;
      v412(v277, v216);
    }
    uint64_t v296 = (uint64_t)v397;
    [v176 setGroupIdentifier:v278];

    sub_100B351DC(v275);
    if (v297)
    {
      NSString v298 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    else
    {
      NSString v298 = 0;
    }
    [v176 setSerialNumber:v298];

    [v176 setPartIdentifier:sub_100B354CC(v275)];
    [v176 setBatteryLevel:*(unsigned __int8 *)(v275 + v246[19])];
    [v176 setIsZeus:*(unsigned __int8 *)(v275 + v246[20])];
    if (qword_1016370B8 != -1) {
      swift_once();
    }
    [v176 setOwner:qword_10170ECD8];
    [v176 setAccepted:1];
    NSString v300 = String._bridgeToObjectiveC()();
    [v176 setCorrelationIdentifier:v300];

    [v176 setInternalShareType:-1];
    [v176 setOwnerBeaconIdentifier:0];
    swift_bridgeObjectRelease();
    swift_release();
    Swift::Int v301 = v414;
    v414(v419, v245);
    sub_1003B61EC(v275, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    sub_10001DAB4(v296, (uint64_t *)&unk_101653D40);
    v301(v399, v245);
    goto LABEL_94;
  }
  v274(v272, 1, 1, v246);
  sub_10001DAB4(v272, &qword_10163B9F0);
  sub_10001D010((uint64_t)v431, (uint64_t)&v423);
  char v279 = swift_dynamicCast();
  uint64_t v280 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v367 + 56);
  if (v279)
  {
    v280(v270, 0, 1, v47);
    uint64_t v281 = v368;
    sub_1003B6008(v270, v368, type metadata accessor for SharedBeaconRecord);
    uint64_t v282 = (int *)v47;
    NSString v283 = String._bridgeToObjectiveC()();
    [v176 setStableIdentifier:v283];

    uint64_t v284 = v281 + v282[7];
    uint64_t v285 = *(void *)(v284 + 8);
    uint64_t v286 = *(void **)(v284 + 16);
    char v287 = *(unsigned char *)v284;
    swift_bridgeObjectRetain();
    v288 = (void *)sub_100ECF4F0(v287, v285, v286);
    swift_bridgeObjectRelease();
    [v176 setOwner:v288];

    [v176 setAccepted:*(unsigned __int8 *)(v281 + v282[13])];
    swift_bridgeObjectRetain();
    NSString v289 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v176 setCorrelationIdentifier:v289];

    [v176 setInternalShareType:*(unsigned __int8 *)(v281 + v282[16])];
    uint64_t v290 = v351;
    sub_10001D074(v281 + v282[20], v351, (uint64_t *)&unk_101653D30);
    uint64_t v291 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v291 - 8) + 48))(v290, 1, v291) == 1)
    {
      sub_10001DAB4(v290, (uint64_t *)&unk_101653D30);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v402 + 56))(v357, 1, 1, v216);
      Class v292 = 0;
      uint64_t v293 = (uint64_t)v359;
      uint64_t v294 = v358;
      uint64_t v295 = v401;
    }
    else
    {
      uint64_t v305 = v290 + *(int *)(v291 + 20);
      uint64_t v306 = v357;
      sub_10001D074(v305, v357, &qword_101638CF0);
      sub_1003B61EC(v290, type metadata accessor for SharedBeaconRecord.PropertyListContent);
      int v307 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v402 + 48))(v306, 1, v216);
      uint64_t v293 = (uint64_t)v359;
      uint64_t v294 = v358;
      uint64_t v295 = v401;
      if (v307 == 1)
      {
        Class v292 = 0;
      }
      else
      {
        v308.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
        uint64_t v309 = v306;
        Class v292 = v308.super.isa;
        v412(v309, v216);
      }
    }
    [v176 setOwnerBeaconIdentifier:v292];

    uint64_t v310 = v352;
    sub_1003B6E14(v368, v352, type metadata accessor for SharedBeaconRecord);
    unint64_t v311 = (*(unsigned __int8 *)(v367 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v367 + 80);
    uint64_t v312 = swift_allocObject();
    *(void *)(v312 + 16) = v51;
    sub_1003B6008(v310, v312 + v311, type metadata accessor for SharedBeaconRecord);
    swift_retain();
    uint64_t v313 = (uint64_t)v356;
    unsafeFromAsyncTask<A>(_:)();
    swift_release();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v354 + 48))(v313, 1, v294) == 1)
    {
      id v314 = &qword_10163B8A8;
    }
    else
    {
      uint64_t v315 = v349;
      sub_1003B6008(v313, v349, type metadata accessor for KeyDropLostItemDates);
      uint64_t v313 = v348;
      sub_10001D074(v315 + *(int *)(v294 + 20), v348, (uint64_t *)&unk_10163AC90);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v394)(v313, 1, v245) != 1)
      {
        v328 = v347;
        (*(void (**)(char *, uint64_t, uint64_t))(v295 + 32))(v347, v313, v245);
        if (qword_101636888 != -1) {
          swift_once();
        }
        uint64_t v329 = type metadata accessor for Logger();
        sub_100010324(v329, (uint64_t)qword_10170D788);
        uint64_t v330 = v346;
        sub_1003B6E14(v368, v346, type metadata accessor for SharedBeaconRecord);
        v331 = v345;
        ((void (*)(char *, char *, uint64_t))v391)(v345, v328, v245);
        v332 = Logger.logObject.getter();
        os_log_type_t v333 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v332, v333))
        {
          uint64_t v334 = swift_slowAlloc();
          uint64_t v418 = swift_slowAlloc();
          *(void *)&long long v423 = v418;
          *(_DWORD *)uint64_t v334 = 141558531;
          *(void *)&long long v422 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v334 + 12) = 2081;
          sub_100394110((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
          id v176 = v411;
          uint64_t v335 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)&long long v422 = sub_1008FA0F0(v335, v336, (uint64_t *)&v423);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_1003B61EC(v330, type metadata accessor for SharedBeaconRecord);
          *(_WORD *)(v334 + 22) = 2080;
          sub_100394110((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
          uint64_t v337 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)&long long v422 = sub_1008FA0F0(v337, v338, (uint64_t *)&v423);
          v328 = v347;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          v339 = v414;
          v414(v331, v245);
          _os_log_impl((void *)&_mh_execute_header, v332, v333, "Lost mode is enabled for shared beacon %{private,mask.hash}s\nwith timestamp of %s.", (uint8_t *)v334, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_1003B61EC(v330, type metadata accessor for SharedBeaconRecord);
          v339 = v414;
          v414(v331, v245);
        }

        v340 = v344;
        ((void (*)(char *, char *, uint64_t))v391)(v344, v328, v245);
        ((void (*)(char *, void, uint64_t, uint64_t))v380)(v340, 0, 1, v245);
        if (((unsigned int (*)(char *, uint64_t, uint64_t))v394)(v340, 1, v245) == 1)
        {
          Class v341 = 0;
        }
        else
        {
          Class v341 = Date._bridgeToObjectiveC()().super.isa;
          v339(v340, v245);
        }
        uint64_t v342 = v409;
        id v343 = [objc_allocWithZone((Class)SPLostModeInfo) initWithMessage:0 email:0 phoneNumber:0 timestamp:v341];

        [v176 setLostModeInfo:v343];
        swift_bridgeObjectRelease();
        swift_release();

        v339(v419, v245);
        v339(v328, v245);
        sub_1003B61EC(v349, type metadata accessor for KeyDropLostItemDates);
        sub_1003B61EC(v368, type metadata accessor for SharedBeaconRecord);
        sub_10001DAB4((uint64_t)v397, (uint64_t *)&unk_101653D40);
        v339(v399, v245);
        sub_10001DAB4((uint64_t)v400, &qword_10163BB30);
        uint64_t v302 = v374;
        uint64_t v303 = v342;
        goto LABEL_95;
      }
      sub_1003B61EC(v315, type metadata accessor for KeyDropLostItemDates);
      id v314 = (uint64_t *)&unk_10163AC90;
    }
    sub_10001DAB4(v313, v314);
    [v176 setLostModeInfo:0];
    uint64_t v316 = v368;
    if (qword_101636888 != -1) {
      swift_once();
    }
    uint64_t v317 = type metadata accessor for Logger();
    sub_100010324(v317, (uint64_t)qword_10170D788);
    sub_1003B6E14(v316, v293, type metadata accessor for SharedBeaconRecord);
    v318 = Logger.logObject.getter();
    os_log_type_t v319 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v318, v319))
    {
      uint64_t v320 = v293;
      uint64_t v321 = swift_slowAlloc();
      *(void *)&long long v423 = swift_slowAlloc();
      *(_DWORD *)uint64_t v321 = 141558275;
      *(void *)&long long v422 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v321 + 12) = 2081;
      sub_100394110((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v322 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)&long long v422 = sub_1008FA0F0(v322, v323, (uint64_t *)&v423);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1003B61EC(v320, type metadata accessor for SharedBeaconRecord);
      _os_log_impl((void *)&_mh_execute_header, v318, v319, "Lost mode is not enabled for shared beacon %{private,mask.hash}s.", (uint8_t *)v321, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_bridgeObjectRelease();
      swift_release();

      uint64_t v324 = v417;
      v325 = v414;
      v414(v419, v417);
      sub_1003B61EC(v316, type metadata accessor for SharedBeaconRecord);
      sub_10001DAB4((uint64_t)v397, (uint64_t *)&unk_101653D40);
      v325(v399, v324);
      sub_10001DAB4((uint64_t)v400, &qword_10163BB30);
      uint64_t v302 = v374;
      uint64_t v303 = v216;
      id v176 = v411;
      goto LABEL_95;
    }

    sub_1003B61EC(v293, type metadata accessor for SharedBeaconRecord);
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v326 = v417;
    v327 = v414;
    v414(v419, v417);
    sub_1003B61EC(v316, type metadata accessor for SharedBeaconRecord);
    sub_10001DAB4((uint64_t)v397, (uint64_t *)&unk_101653D40);
    v327(v399, v326);
LABEL_94:
    sub_10001DAB4((uint64_t)v400, &qword_10163BB30);
    uint64_t v302 = v374;
    uint64_t v303 = v216;
LABEL_95:
    v412((uint64_t)v302, v303);
    goto LABEL_96;
  }
  v280(v270, 1, 1, v47);
  swift_bridgeObjectRelease();
  swift_release();
  v299 = v414;
  v414(v419, v245);
  sub_10001DAB4((uint64_t)v397, (uint64_t *)&unk_101653D40);
  v299(v399, v245);
  sub_10001DAB4((uint64_t)v400, &qword_10163BB30);
  v412((uint64_t)v374, v216);
  sub_10001DAB4(v270, (uint64_t *)&unk_101653D50);
LABEL_96:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v431);
  return v176;
}

uint64_t *sub_10039C768(uint64_t a1, uint64_t a2)
{
  uint64_t v407 = a2;
  uint64_t v352 = sub_10000588C(&qword_10163B8A8);
  __chkstk_darwin(v352);
  uint64_t v354 = (char *)&v341 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v353 = type metadata accessor for KeyDropLostItemDates(0);
  uint64_t v351 = *(void *)(v353 - 8);
  __chkstk_darwin(v353);
  uint64_t v346 = (uint64_t)&v341 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101653D30);
  __chkstk_darwin(v5 - 8);
  uint64_t v348 = (void **)((char *)&v341 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = sub_10000588C((uint64_t *)&unk_101653D50);
  __chkstk_darwin(v7 - 8);
  v370 = (char *)&v341 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v366 = *(void *)(v9 - 8);
  uint64_t v10 = __chkstk_darwin(v9);
  v356 = (char *)&v341 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v342 = (uint64_t)&v341 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v349 = (uint64_t)&v341 - v15;
  uint64_t v350 = v16;
  __chkstk_darwin(v14);
  uint64_t v362 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))((char *)&v341 - v17);
  uint64_t v18 = sub_10000588C(&qword_101638CF0);
  uint64_t v19 = __chkstk_darwin(v18 - 8);
  uint64_t v355 = (uint64_t)&v341 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v360 = (uint64_t)&v341 - v21;
  uint64_t v22 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v22 - 8);
  uint64_t v386 = (char *)&v341 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v393 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v385 = *(void *)(v393 - 8);
  __chkstk_darwin(v393);
  uint64_t v361 = (uint64_t)&v341 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v383 = sub_10000588C(&qword_10163B9E0);
  __chkstk_darwin(v383);
  v389 = (char *)&v341 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v384 = type metadata accessor for BeaconNamingRecord();
  uint64_t v382 = *(void *)(v384 - 8);
  __chkstk_darwin(v384);
  uint64_t v365 = (uint64_t)&v341 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_10000588C((uint64_t *)&unk_10163B1D0);
  __chkstk_darwin(v27 - 8);
  uint64_t v381 = (char *)&v341 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = sub_10000588C(&qword_10163BBB0);
  uint64_t v30 = __chkstk_darwin(v29 - 8);
  uint64_t v359 = (uint64_t)&v341 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  uint64_t v367 = (uint64_t)&v341 - v32;
  uint64_t v392 = type metadata accessor for BeaconProductInfoRecord();
  uint64_t v391 = *(void *)(v392 - 8);
  uint64_t v33 = __chkstk_darwin(v392);
  uint64_t v347 = (uint64_t)&v341 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  uint64_t v357 = (uint64_t)&v341 - v35;
  uint64_t v36 = sub_10000588C(&qword_10163BB80);
  __chkstk_darwin(v36 - 8);
  uint64_t v369 = (char *)&v341 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v380 = type metadata accessor for KeyAlignmentRecord();
  uint64_t v379 = *(void *)(v380 - 8);
  __chkstk_darwin(v380);
  uint64_t v358 = (uint64_t)&v341 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v376 = sub_10000588C((uint64_t *)&unk_101653D40);
  uint64_t v39 = __chkstk_darwin(v376);
  uint64_t v41 = (char *)&v341 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = __chkstk_darwin(v39);
  uint64_t v377 = (uint64_t *)((char *)&v341 - v43);
  __chkstk_darwin(v42);
  uint64_t v45 = (char *)&v341 - v44;
  uint64_t v420 = type metadata accessor for LocationProvider();
  uint64_t v46 = *(void *)(v420 - 8);
  uint64_t v47 = __chkstk_darwin(v420);
  uint64_t v413 = (uint64_t)&v341 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v47);
  uint64_t v50 = (char *)&v341 - v49;
  uint64_t v51 = sub_10000588C(&qword_1016426B0);
  uint64_t v52 = __chkstk_darwin(v51 - 8);
  uint64_t v415 = (uint64_t)&v341 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v52);
  uint64_t v417 = (uint64_t)&v341 - v54;
  uint64_t v395 = sub_10000588C(&qword_10163BB30);
  uint64_t v55 = __chkstk_darwin(v395);
  uint64_t v388 = (char *)&v341 - ((v56 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v55);
  uint64_t v398 = (char *)&v341 - v57;
  uint64_t v58 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v59 = __chkstk_darwin(v58 - 8);
  Class v341 = (char *)&v341 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = __chkstk_darwin(v59);
  uint64_t v344 = (uint64_t)&v341 - v62;
  uint64_t v63 = __chkstk_darwin(v61);
  uint64_t v368 = (char *)&v341 - v64;
  __chkstk_darwin(v63);
  uint64_t v374 = (uint64_t)&v341 - v65;
  uint64_t v66 = sub_10000588C(&qword_10163BB70);
  __chkstk_darwin(v66 - 8);
  id v411 = (uint64_t *)((char *)&v341 - ((v67 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v416 = type metadata accessor for Date();
  uint64_t v408 = *(void *)(v416 - 8);
  uint64_t v68 = __chkstk_darwin(v416);
  id v343 = (char *)&v341 - ((v69 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = __chkstk_darwin(v68);
  v345 = (char *)&v341 - v71;
  uint64_t v72 = __chkstk_darwin(v70);
  uint64_t v375 = (char *)&v341 - v73;
  uint64_t v74 = __chkstk_darwin(v72);
  uint64_t v418 = (char *)&v341 - v75;
  uint64_t v76 = __chkstk_darwin(v74);
  v397 = (char *)&v341 - v77;
  __chkstk_darwin(v76);
  uint64_t v394 = (uint64_t)&v341 - v78;
  uint64_t v79 = type metadata accessor for UUID();
  uint64_t v402 = *(void *)(v79 - 8);
  uint64_t v80 = __chkstk_darwin(v79);
  uint64_t v405 = (char *)&v341 - ((v81 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = __chkstk_darwin(v80);
  uint64_t v387 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))((char *)&v341 - v83);
  uint64_t v84 = __chkstk_darwin(v82);
  v410 = (void (*)(uint64_t, uint64_t))((char *)&v341 - v85);
  __chkstk_darwin(v84);
  uint64_t v87 = (char *)&v341 - v86;
  v431[3] = v9;
  v431[4] = sub_100394110(&qword_101639EA0, (void (*)(uint64_t))type metadata accessor for SharedBeaconRecord);
  uint64_t v88 = sub_10001D958(v431);
  sub_1003B6E14(a1, (uint64_t)v88, type metadata accessor for SharedBeaconRecord);
  id v409 = [objc_allocWithZone((Class)SPBeacon) init];
  v399 = (int *)v9;
  id v89 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))*(int *)(v9 + 48);
  v419 = (void *)*(int *)(v9 + 44);
  uint64_t v90 = *(void *)((char *)v419 + (void)v88);
  v403 = v88;
  v414 = v89;
  uint64_t v91 = sub_1002AAF08(v90, *(uint64_t *)((char *)v89 + (void)v88));
  uint64_t v412 = v79;
  v390 = v45;
  uint64_t v378 = v41;
  if (v92 >> 60 == 15)
  {
    if (qword_101636F50 != -1) {
      swift_once();
    }
    uint64_t v93 = type metadata accessor for Logger();
    sub_100010324(v93, (uint64_t)qword_10170E9E8);
    sub_10001D010((uint64_t)v431, (uint64_t)&v422);
    sub_10001D010((uint64_t)v431, (uint64_t)&v429);
    uint64_t v94 = Logger.logObject.getter();
    os_log_type_t v95 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v94, v95))
    {
      uint64_t v96 = swift_slowAlloc();
      *(_DWORD *)uint64_t v96 = 134218240;
      uint64_t v97 = sub_10001CD44(&v422, v424);
      BOOL v98 = v399;
      uint64_t v99 = *(void *)((char *)v97 + v399[11]);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v422);
      *(void *)&long long v421 = v99;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v96 + 12) = 2048;
      uint64_t v100 = *(void *)((char *)sub_10001CD44(&v429, v430) + v98[12]);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v429);
      *(void *)&long long v422 = v100;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v94, v95, "Unable to create AccessoryProductData from %ld/%ld", (uint8_t *)v96, 0x16u);
      swift_slowDealloc();
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v429);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v422);
    }

    id v104 = v409;
    UUID.init(uuid:)();
  }
  else
  {
    uint64_t v101 = v91;
    unint64_t v102 = v92;
    if (qword_101636960 != -1) {
      swift_once();
    }
    long long v422 = xmmword_1016408F8;
    sub_1000361E0(xmmword_1016408F8, *((unint64_t *)&xmmword_1016408F8 + 1));
    Data.append(_:)();
    long long v103 = v422;
    long long v429 = v422;
    sub_1000362FC();
    DataProtocol.stableUUID.getter();
    sub_10001CFB8(v103, *((unint64_t *)&v103 + 1));
    sub_100037A24(v101, v102);
    id v104 = v409;
  }
  long long v105 = v403;
  uint64_t v106 = (uint64_t)v403 + v399[5];
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  [v104 setIdentifier:isa];

  swift_bridgeObjectRetain();
  NSString v108 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v104 setModel:v108];

  sub_10001D4B0(0, &qword_10163B870);
  sub_10012E2E4(&qword_10163B878, &qword_10163B870);
  Class v109 = Set._bridgeToObjectiveC()().super.isa;
  [v104 setShares:v109];

  swift_bridgeObjectRetain();
  NSString v110 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v104 setSystemVersion:v110];

  v371 = v87;
  Class v111 = UUID._bridgeToObjectiveC()().super.isa;
  [v104 setProductUUID:v111];

  [v104 setVendorId:*(void *)((char *)v419 + (void)v105)];
  [v104 setProductId:*(uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)v414 + (void)v105)];
  uint64_t v112 = v394;
  sub_10120DE1C(v394);
  Class v113 = Date._bridgeToObjectiveC()().super.isa;
  uint64_t v401 = *(void (**)(uint64_t, uint64_t))(v408 + 8);
  uint64_t v400 = v408 + 8;
  v401(v112, v416);
  [v104 setPairingDate:v113];

  uint64_t v114 = v106;
  [v104 setType:sub_1012138A4()];
  uint64_t v116 = v402 + 16;
  uint64_t v115 = *(void (**)(uint64_t, uint64_t, uint64_t))(v402 + 16);
  uint64_t v117 = (uint64_t)v410;
  uint64_t v406 = v114;
  v404 = v115;
  v115((uint64_t)v410, v114, v412);
  uint64_t v396 = *(void *)(v407 + 160);
  uint64_t v118 = sub_100B6D358(v117);
  uint64_t v119 = v118[2];
  v120 = (int *)type metadata accessor for LostModeRecord();
  uint64_t v121 = *((void *)v120 - 1);
  if (v119)
  {
    uint64_t v122 = v411;
    sub_1003B6E14((uint64_t)v118+ ((*(unsigned __int8 *)(*((void *)v120 - 1) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*((void *)v120 - 1) + 80)), (uint64_t)v411, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
    uint64_t v123 = 0;
  }
  else
  {
    uint64_t v123 = 1;
    uint64_t v122 = v411;
  }
  (*(void (**)(uint64_t *, uint64_t, uint64_t, int *))(v121 + 56))(v122, v123, 1, v120);
  swift_bridgeObjectRelease();
  id v124 = *(void (**)(uint64_t, uint64_t))(v402 + 8);
  id v411 = (uint64_t *)(v402 + 8);
  v410 = v124;
  v124(v117, v412);
  int v125 = (*(uint64_t (**)(uint64_t *, uint64_t, int *))(v121 + 48))(v122, 1, v120);
  uint64_t v126 = (uint64_t)v387;
  if (v125 == 1)
  {
    sub_10001DAB4((uint64_t)v122, &qword_10163BB70);
    id v127 = 0;
  }
  else
  {
    v128 = (uint64_t *)((char *)v122 + v120[9]);
    id v129 = (void (*)(char *, uint64_t, uint64_t))v128[1];
    uint64_t v373 = *v128;
    uint64_t v363 = v129;
    uint64_t v130 = v120[8];
    uint64_t v131 = (uint64_t *)((char *)v122 + v120[7]);
    uint64_t v132 = v131[1];
    uint64_t v364 = *v131;
    uint64_t v133 = *(uint64_t *)((char *)v122 + v130 + 8);
    v372 = *(long long **)((char *)v122 + v130);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v135 = v374;
    sub_100B23648(v122, v374);
    uint64_t v136 = v134;
    id v104 = v409;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v408 + 56))(v135, 0, 1, v416);
    id v137 = objc_allocWithZone((Class)SPLostModeInfo);
    id v127 = sub_100B23CB8(v373, (uint64_t)v363, v364, v132, (uint64_t)v372, v133, v135);
    sub_1003B61EC((uint64_t)v122, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
  }
  [v104 setLostModeInfo:v127];

  v404(v126, v406, v412);
  if (qword_101636CB8 != -1) {
    swift_once();
  }
  sub_1007B4970(v126, 0, 0, &v422);
  uint64_t v139 = v395;
  uint64_t v140 = v398;
  uint64_t v141 = (uint64_t)&v398[*(int *)(v395 + 48)];
  char v142 = sub_100AF7A38(v141, v126, (void *)v422, 1);
  swift_bridgeObjectRelease();
  v410(v126, v412);
  LOBYTE(v138) = v142 & 1;
  unsigned char *v140 = v142 & 1;
  [v409 setConnected:v142 & 1];
  uint64_t v143 = *(int *)(v139 + 48);
  Swift::Int v144 = v388;
  uint64_t v145 = &v388[v143];
  *uint64_t v388 = (_BYTE)v138;
  sub_10001D074(v141, (uint64_t)&v144[v143], (uint64_t *)&unk_10163AC90);
  char v146 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v408 + 48);
  uint64_t v147 = v416;
  uint64_t v388 = (unsigned char *)(v408 + 48);
  uint64_t v387 = v146;
  if (v146((uint64_t)v145, 1, v416) == 1)
  {
    Class v148 = 0;
  }
  else
  {
    Class v148 = Date._bridgeToObjectiveC()().super.isa;
    v401((uint64_t)v145, v147);
  }
  uint64_t v395 = v116;
  id v149 = v409;
  [v409 setConnectedStateExpiryDate:v148];

  [v149 setIsAppleAudioAccessory:sub_100DF1520(*(void *)((char *)v419 + (void)v403), *(uint64_t *)((char *)v414 + (void)v403))];
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v374 = 0;
  sub_1010ABF18(v422);
  swift_bridgeObjectRelease();
  uint64_t v150 = v397;
  Date.init(timeIntervalSinceNow:)();
  uint64_t v151 = sub_100B6EE9C(v406);
  Class v152 = *(void (**)(char *, uint64_t, uint64_t))(v408 + 16);
  id v153 = (long long *)v416;
  uint64_t v364 = v408 + 16;
  uint64_t v363 = v152;
  v152(v418, (uint64_t)v150, v416);
  v154 = (void **)SPLocationProvider_ptr;
  uint64_t v155 = sub_10001D4B0(0, (unint64_t *)&unk_10166BF70);
  Class v156 = (long long *)sub_10012E2E4(&qword_1016426B8, (unint64_t *)&unk_10166BF70);
  swift_bridgeObjectRetain();
  uint64_t v373 = v155;
  v372 = v156;
  id v157 = 0;
  *(void *)&long long v422 = Set.init(minimumCapacity:)();
  uint64_t v158 = (void **)v151[2];
  v414 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v46 + 56);
  id v159 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v46 + 48);
  v160 = &qword_1016605E0;
  v419 = v151;
  if (v158) {
    goto LABEL_25;
  }
LABEL_28:
  while (1)
  {
    uint64_t v161 = 1;
    id v157 = v158;
LABEL_30:
    uint64_t v162 = v417;
    uint64_t v163 = v420;
    (*v414)(v417, v161, 1, v420);
    uint64_t v164 = v162;
    uint64_t v165 = v415;
    sub_10001D608(v164, v415, &qword_1016426B0);
    if ((*v159)(v165, 1, v163) == 1) {
      break;
    }
    uint64_t v166 = v413;
    sub_1003B6008(v165, v413, (uint64_t (*)(void))type metadata accessor for LocationProvider);
    char v167 = sub_100B967D0(*(unsigned __int8 *)(v166 + *(int *)(v163 + 24)), *(void *)(v166 + *(int *)(v163 + 24) + 8), *(void **)(v166 + *(int *)(v163 + 24) + 16));
    v154 = (void **)sub_100ECF4F0(v167, v168, v169);
    swift_bridgeObjectRelease();
    id v170 = objc_allocWithZone((Class)SPLocationProvider);
    Class v171 = Date._bridgeToObjectiveC()().super.isa;
    id v172 = [v170 initWithTimestamp:v171 provider:v154];

    sub_1003B61EC(v166, (uint64_t (*)(void))type metadata accessor for LocationProvider);
    Class v156 = &v422;
    sub_100DCCD24(&v429, v172);

    id v153 = (long long *)v416;
    uint64_t v151 = v419;
    if (v157 != v158)
    {
LABEL_25:
      while ((unint64_t)v157 < v151[2])
      {
        v154 = (void **)((char *)v157 + 1);
        sub_1003B6E14((uint64_t)v151+ ((*(unsigned __int8 *)(v46 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80))+ *(void *)(v46 + 72) * (void)v157, (uint64_t)v50, (uint64_t (*)(void))type metadata accessor for LocationProvider);
        sub_100394110((unint64_t *)&qword_1016605E0, (void (*)(uint64_t))&type metadata accessor for Date);
        Class v156 = v153;
        if ((dispatch thunk of static Comparable.< infix(_:_:)() & 1) == 0)
        {
          sub_1003B6008((uint64_t)v50, v417, (uint64_t (*)(void))type metadata accessor for LocationProvider);
          uint64_t v161 = 0;
          id v157 = (void **)((char *)v157 + 1);
          goto LABEL_30;
        }
        sub_1003B61EC((uint64_t)v50, (uint64_t (*)(void))type metadata accessor for LocationProvider);
        id v157 = (void **)((char *)v157 + 1);
        uint64_t v151 = v419;
        if (v158 == v154) {
          goto LABEL_28;
        }
      }
      __break(1u);
      goto LABEL_93;
    }
  }
  swift_bridgeObjectRelease();
  Class v173 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  v160 = (uint64_t *)v409;
  [v409 setLocationProviders:v173];

  type metadata accessor for BeaconKeyManager(0);
  uint64_t v174 = v374;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  uint64_t v417 = v174;
  uint64_t v175 = v422;
  sub_10001D010((uint64_t)v431, (uint64_t)&v422);
  uint64_t v176 = swift_allocObject();
  *(void *)(v176 + 16) = v175;
  sub_10001CEB0(&v422, v176 + 24);
  uint64_t v420 = v175;
  swift_retain();
  uint64_t v177 = (uint64_t)v390;
  unsafeFromAsyncTask<A>(_:)();
  swift_release();
  uint64_t v178 = (uint64_t *)&unk_101653D40;
  uint64_t v179 = v377;
  sub_10001D074(v177, (uint64_t)v377, (uint64_t *)&unk_101653D40);
  uint64_t v180 = sub_10000588C(&qword_10163F7B0);
  id v181 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v180 - 8) + 48);
  uint64_t v182 = 1;
  if (v181(v179, 1, v180) != 1)
  {
    uint64_t v182 = *v179;
    uint64_t v178 = &qword_10163F7B0;
  }
  uint64_t v183 = v412;
  uint64_t v184 = (uint64_t)v369;
  sub_10001DAB4((uint64_t)v179, v178);
  [v160 setKeySyncLastObservedIndex:v182];
  uint64_t v185 = (uint64_t)v378;
  sub_10001D074(v177, (uint64_t)v378, (uint64_t *)&unk_101653D40);
  unsigned int v186 = v181((uint64_t *)v185, 1, v180);
  uint64_t v187 = (uint64_t)v375;
  if (v186 == 1)
  {
    sub_10001DAB4(v185, (uint64_t *)&unk_101653D40);
    v188 = *(void (***)(uint64_t, uint64_t, uint64_t, uint64_t))(v408 + 56);
    uint64_t v189 = (uint64_t)v368;
    uint64_t v190 = v368;
    uint64_t v191 = 1;
    uint64_t v192 = v416;
  }
  else
  {
    uint64_t v189 = (uint64_t)v368;
    uint64_t v192 = v416;
    v363(v368, v185 + *(int *)(v180 + 36), v416);
    sub_10001DAB4(v185, &qword_10163F7B0);
    v188 = *(void (***)(uint64_t, uint64_t, uint64_t, uint64_t))(v408 + 56);
    uint64_t v190 = (char *)v189;
    uint64_t v191 = 0;
  }
  v414 = v188;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v188)(v190, v191, 1, v192);
  uint64_t v193 = v401;
  sub_10001D010((uint64_t)v431, (uint64_t)&v429);
  if (v387(v189, 1, v192) == 1)
  {
    sub_10001CD44(&v429, v430);
    sub_10120DE1C(v187);
    sub_10001DAB4(v189, (uint64_t *)&unk_10163AC90);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v408 + 32))(v187, v189, v192);
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v429);
  Class v194 = Date._bridgeToObjectiveC()().super.isa;
  v193(v187, v192);
  [v160 setKeySyncLastIndexObservationDate:v194];

  [v160 setKeySyncWildIndexFallback:1];
  id v195 = v405;
  v404((uint64_t)v405, v406, v183);
  sub_100B6C53C(v184);
  v410((uint64_t)v195, v183);
  uint64_t v196 = v380;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v379 + 48))(v184, 1, v380) == 1)
  {
    sub_10001DAB4(v184, &qword_10163BB80);
    [v160 setKeyAlignmentLastObservedIndex:0];
    uint64_t v197 = v394;
    static Date.distantPast.getter();
    Class v198 = Date._bridgeToObjectiveC()().super.isa;
    v193(v197, v192);
    [v160 setKeyAlignmentLastIndexObservationDate:v198];
  }
  else
  {
    uint64_t v199 = v358;
    sub_1003B6008(v184, v358, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
    [v160 setKeyAlignmentLastObservedIndex:*(void *)(v199 + *(int *)(v196 + 28))];
    Class v200 = Date._bridgeToObjectiveC()().super.isa;
    [v160 setKeyAlignmentLastIndexObservationDate:v200];

    sub_1003B61EC(v199, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
  }
  id v201 = [v160 type];
  uint64_t v202 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v204 = v203;
  if (v202 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v204 == v205)
  {
LABEL_46:

    swift_bridgeObjectRelease_n();
    uint64_t v206 = v412;
    uint64_t v207 = v407;
    uint64_t v208 = (uint64_t)v389;
    goto LABEL_48;
  }
  char v209 = _stringCompareWithSmolCheck(_:_:expecting:)();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v206 = v412;
  uint64_t v207 = v407;
  uint64_t v208 = (uint64_t)v389;
  if ((v209 & 1) == 0)
  {
    id v201 = [v160 type];
    uint64_t v225 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v227 = v226;
    if (v225 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v227 != v228)
    {
      char v229 = _stringCompareWithSmolCheck(_:_:expecting:)();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v206 = v412;
      uint64_t v207 = v407;
      uint64_t v208 = (uint64_t)v389;
      if ((v229 & 1) == 0) {
        goto LABEL_51;
      }
      goto LABEL_48;
    }
    goto LABEL_46;
  }
LABEL_48:
  id v210 = [v160 identifier];
  uint64_t v211 = (uint64_t)v405;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v212 = v367;
  sub_100AE311C(v211, v367);
  v410(v211, v206);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v391 + 48))(v212, 1, v392) == 1)
  {
    sub_10001DAB4(v212, &qword_10163BBB0);
  }
  else
  {
    uint64_t v213 = v212;
    uint64_t v214 = v357;
    sub_1003B6008(v213, v357, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
    id v215 = sub_100853D90();
    [v160 setAccessoryProductInfo:v215];

    sub_1003B61EC(v214, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
  }
LABEL_51:
  sub_10001D010((uint64_t)v431, (uint64_t)&v422);
  uint64_t v216 = sub_10000588C((uint64_t *)&unk_10164DBF0);
  uint64_t v217 = type metadata accessor for LocalFindableAccessoryRecord();
  uint64_t v218 = (uint64_t)v381;
  uint64_t v415 = v216;
  int v219 = swift_dynamicCast();
  uint64_t v220 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v217 - 8) + 56);
  if (!v219)
  {
    uint64_t v223 = (void *)v177;
    v220(v218, 1, 1, v217);
    uint64_t v224 = (uint64_t *)&unk_10163B1D0;
    goto LABEL_55;
  }
  v220(v218, 0, 1, v217);
  sub_10001DAB4(v218, (uint64_t *)&unk_10163B1D0);
  id v221 = [v160 identifier];
  uint64_t v222 = (uint64_t)v405;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v218 = v359;
  sub_100AE311C(v222, v359);
  v410(v222, v206);
  uint64_t v223 = (void *)v177;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v391 + 48))(v218, 1, v392) == 1)
  {
    uint64_t v224 = &qword_10163BBB0;
LABEL_55:
    sub_10001DAB4(v218, v224);
    goto LABEL_61;
  }
  uint64_t v230 = v218;
  uint64_t v231 = v347;
  sub_1003B6008(v230, v347, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
  id v232 = sub_100853D90();
  [v160 setAccessoryProductInfo:v232];

  sub_1003B61EC(v231, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
LABEL_61:
  uint64_t v233 = (int *)v393;
  uint64_t v234 = v405;
  uint64_t v235 = v412;
  uint64_t v236 = ((uint64_t (*)(char *, uint64_t, uint64_t))v404)(v405, v406, v412);
  __chkstk_darwin(v236);
  QueueSynchronizer.conditionalSync<A>(_:)();
  v410((uint64_t)v234, v235);
  uint64_t v237 = v384;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v382 + 48))(v208, 1, v384) == 1)
  {
    sub_10001DAB4(v208, &qword_10163B9E0);
    sub_10001D010((uint64_t)v431, (uint64_t)&v421);
    uint64_t v238 = swift_allocObject();
    *(void *)(v238 + 16) = v207;
    sub_10001CEB0(&v421, v238 + 24);
    swift_retain();
    sub_10000588C(&qword_10163A110);
    unsafeFromAsyncTask<A>(_:)();
    swift_release();
    uint64_t v239 = *((void *)&v422 + 1);
    if (!*((void *)&v422 + 1))
    {
      uint64_t v151 = v223;
      uint64_t v265 = (uint64_t)v398;
      NSString v266 = v399;
      uint64_t v268 = (uint64_t)v370;
      uint64_t v267 = (uint64_t)v386;
      id v153 = (long long *)v416;
      id v157 = (void **)v412;
      goto LABEL_78;
    }
    uint64_t v240 = v160;
    unint64_t v241 = v423;
    uint64_t v417 = v424;
    uint64_t v242 = v425;
    uint64_t v406 = v426;
    uint64_t v413 = v427;
    uint64_t v243 = v428;
    uint64_t v244 = v422;
    NSString v245 = String._bridgeToObjectiveC()();
    [v240 setName:v245];

    uint64_t v246 = sub_1012D4780(v241);
    unint64_t v247 = (void *)v246;
    id v153 = (long long *)v416;
    if (v241 == SPBeaconRoleIdOther && v242 && v246)
    {
      swift_bridgeObjectRetain();
      id v248 = [v247 role];
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      id v249 = objc_allocWithZone((Class)SPBeaconRole);
      NSString v250 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      NSString v251 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v252 = [v249 initWithRoleId:v241 role:v250 roleEmoji:v251];

      id v153 = (long long *)v416;
      id v157 = (void **)v412;
      [v409 setRole:v252];

      if (v243)
      {
LABEL_67:
        swift_bridgeObjectRetain();
        NSString v253 = String._bridgeToObjectiveC()();
        sub_100090C68(v244, v239);
        swift_bridgeObjectRelease();
LABEL_77:
        uint64_t v265 = (uint64_t)v398;
        NSString v266 = v399;
        v160 = (uint64_t *)v409;
        [v409 setSerialNumber:v253];

        uint64_t v268 = (uint64_t)v370;
        uint64_t v233 = (int *)v393;
        uint64_t v267 = (uint64_t)v386;
        uint64_t v151 = v390;
        goto LABEL_78;
      }
    }
    else
    {
      [v409 setRole:v246];
      id v157 = (void **)v412;
      if (v243) {
        goto LABEL_67;
      }
    }
    sub_100090C68(v244, v239);
    NSString v253 = 0;
    goto LABEL_77;
  }
  uint64_t v254 = v365;
  sub_1003B6008(v208, v365, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
  swift_bridgeObjectRetain();
  NSString v255 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v160 setName:v255];

  unint64_t v256 = *(void *)(v254 + *(int *)(v237 + 28));
  uint64_t v257 = sub_1012D4780(v256);
  id v258 = (void *)v257;
  uint64_t v151 = v223;
  if (v256 == SPBeaconRoleIdOther && *(void *)(v254 + *(int *)(v237 + 36) + 8) && v257)
  {
    swift_bridgeObjectRetain();
    id v259 = [v258 role];
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    id v260 = objc_allocWithZone((Class)SPBeaconRole);
    NSString v261 = String._bridgeToObjectiveC()();
    uint64_t v233 = (int *)v393;
    swift_bridgeObjectRelease();
    NSString v262 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v263 = v260;
    id v153 = (long long *)v416;
    id v264 = [v263 initWithRoleId:v256 role:v261 roleEmoji:v262];

    id v157 = (void **)v412;
    uint64_t v254 = v365;
    [v160 setRole:v264];

    id v258 = v264;
    uint64_t v265 = (uint64_t)v398;
    NSString v266 = v399;
    uint64_t v267 = (uint64_t)v386;
  }
  else
  {
    [v160 setRole:v257];
    uint64_t v265 = (uint64_t)v398;
    NSString v266 = v399;
    uint64_t v267 = (uint64_t)v386;
    id v153 = (long long *)v416;
    id v157 = (void **)v412;
  }

  sub_1003B61EC(v254, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
  uint64_t v268 = (uint64_t)v370;
LABEL_78:
  sub_10001D010((uint64_t)v431, (uint64_t)&v422);
  int v269 = swift_dynamicCast();
  uint64_t v270 = *(void (**)(uint64_t, uint64_t, uint64_t, int *))(v385 + 56);
  if (v269)
  {
    v270(v267, 0, 1, v233);
    uint64_t v271 = v361;
    sub_1003B6008(v267, v361, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    sub_101110C7C();
    NSString v272 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v160 setStableIdentifier:v272];

    uint64_t v273 = v360;
    sub_10001D074(v271 + v233[7], v360, &qword_101638CF0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, void **))(v402 + 48))(v273, 1, v157) == 1)
    {
      Class v274 = 0;
    }
    else
    {
      Class v274 = UUID._bridgeToObjectiveC()().super.isa;
      v410(v273, (uint64_t)v157);
    }
    char v287 = (void (*)(char *, long long *))v401;
    [v160 setGroupIdentifier:v274];

    sub_100B351DC(v271);
    if (v288)
    {
      NSString v289 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    else
    {
      NSString v289 = 0;
    }
    [v160 setSerialNumber:v289];

    [v160 setPartIdentifier:sub_100B354CC(v271)];
    [v160 setBatteryLevel:*(unsigned __int8 *)(v271 + v233[19])];
    [v160 setIsZeus:*(unsigned __int8 *)(v271 + v233[20])];
    if (qword_1016370B8 != -1) {
      swift_once();
    }
    [v160 setOwner:qword_10170ECD8];
    [v160 setAccepted:1];
    NSString v291 = String._bridgeToObjectiveC()();
    [v160 setCorrelationIdentifier:v291];

    [v160 setInternalShareType:-1];
    [v160 setOwnerBeaconIdentifier:0];
    swift_bridgeObjectRelease();
    swift_release();
    v287(v418, v153);
    sub_1003B61EC(v271, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    sub_10001DAB4((uint64_t)v151, (uint64_t *)&unk_101653D40);
    v287(v397, v153);
    uint64_t v292 = v265;
LABEL_106:
    sub_10001DAB4(v292, &qword_10163BB30);
    v318 = v371;
    uint64_t v319 = (uint64_t)v157;
    goto LABEL_107;
  }
  v270(v267, 1, 1, v233);
  sub_10001DAB4(v267, &qword_10163B9F0);
  sub_10001D010((uint64_t)v431, (uint64_t)&v422);
  char v275 = swift_dynamicCast();
  NSString v276 = *(void (**)(uint64_t, uint64_t, uint64_t, int *))(v366 + 56);
  if ((v275 & 1) == 0)
  {
    v276(v268, 1, 1, v266);
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v290 = (void (*)(char *, long long *))v401;
    v401((uint64_t)v418, (uint64_t)v153);
    sub_10001DAB4((uint64_t)v151, (uint64_t *)&unk_101653D40);
    v290(v397, v153);
    sub_10001DAB4(v265, &qword_10163BB30);
    v410((uint64_t)v371, (uint64_t)v157);
    sub_10001DAB4(v268, (uint64_t *)&unk_101653D50);
    goto LABEL_108;
  }
  v276(v268, 0, 1, v266);
  id v159 = v362;
  sub_1003B6008(v268, (uint64_t)v362, type metadata accessor for SharedBeaconRecord);
  NSString v277 = String._bridgeToObjectiveC()();
  [v160 setStableIdentifier:v277];

  Class v278 = (char *)v159 + v266[7];
  uint64_t v279 = *((void *)v278 + 1);
  uint64_t v280 = (void *)*((void *)v278 + 2);
  char v281 = *v278;
  swift_bridgeObjectRetain();
  uint64_t v282 = (void *)sub_100ECF4F0(v281, v279, v280);
  swift_bridgeObjectRelease();
  [v160 setOwner:v282];

  [v160 setAccepted:*((unsigned __int8 *)v159 + v266[13])];
  swift_bridgeObjectRetain();
  NSString v283 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v160 setCorrelationIdentifier:v283];

  [v160 setInternalShareType:*((unsigned __int8 *)v159 + v266[16])];
  v154 = v348;
  sub_10001D074((uint64_t)v159 + v266[20], (uint64_t)v348, (uint64_t *)&unk_101653D30);
  Class v156 = (long long *)type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  if ((*(unsigned int (**)(void **, uint64_t, long long *))(*((void *)v156 - 1) + 48))(v154, 1, v156) == 1)
  {
    sub_10001DAB4((uint64_t)v154, (uint64_t *)&unk_101653D30);
    (*(void (**)(uint64_t, uint64_t, uint64_t, void **))(v402 + 56))(v355, 1, 1, v157);
    Class v284 = 0;
    uint64_t v285 = (uint64_t)v356;
    uint64_t v286 = v407;
  }
  else
  {
LABEL_93:
    uint64_t v293 = v355;
    sub_10001D074((uint64_t)v154 + *((int *)v156 + 5), v355, &qword_101638CF0);
    sub_1003B61EC((uint64_t)v154, type metadata accessor for SharedBeaconRecord.PropertyListContent);
    int v294 = (*(uint64_t (**)(uint64_t, uint64_t, void **))(v402 + 48))(v293, 1, v157);
    uint64_t v285 = (uint64_t)v356;
    uint64_t v286 = v407;
    if (v294 == 1)
    {
      Class v284 = 0;
    }
    else
    {
      Class v284 = UUID._bridgeToObjectiveC()().super.isa;
      v410(v293, (uint64_t)v157);
    }
  }
  [v160 setOwnerBeaconIdentifier:v284];

  uint64_t v295 = v349;
  sub_1003B6E14((uint64_t)v159, v349, type metadata accessor for SharedBeaconRecord);
  unint64_t v296 = (*(unsigned __int8 *)(v366 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v366 + 80);
  uint64_t v297 = swift_allocObject();
  *(void *)(v297 + 16) = v286;
  sub_1003B6008(v295, v297 + v296, type metadata accessor for SharedBeaconRecord);
  swift_retain();
  NSString v298 = v354;
  unsafeFromAsyncTask<A>(_:)();
  swift_release();
  uint64_t v299 = v353;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v351 + 48))(v298, 1, v353) == 1)
  {
    NSString v300 = &qword_10163B8A8;
    uint64_t v301 = (uint64_t)v298;
LABEL_100:
    sub_10001DAB4(v301, v300);
    uint64_t v306 = (uint64_t)v362;
    [v160 setLostModeInfo:0];
    if (qword_101636888 != -1) {
      swift_once();
    }
    uint64_t v307 = type metadata accessor for Logger();
    sub_100010324(v307, (uint64_t)qword_10170D788);
    sub_1003B6E14(v306, v285, type metadata accessor for SharedBeaconRecord);
    NSUUID v308 = Logger.logObject.getter();
    os_log_type_t v309 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v308, v309))
    {
      uint64_t v310 = v285;
      uint64_t v311 = swift_slowAlloc();
      *(void *)&long long v422 = swift_slowAlloc();
      *(_DWORD *)uint64_t v311 = 141558275;
      *(void *)&long long v421 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v311 + 12) = 2081;
      sub_100394110((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v312 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)&long long v421 = sub_1008FA0F0(v312, v313, (uint64_t *)&v422);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1003B61EC(v310, type metadata accessor for SharedBeaconRecord);
      _os_log_impl((void *)&_mh_execute_header, v308, v309, "Lost mode is not enabled for shared beacon %{private,mask.hash}s.", (uint8_t *)v311, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_bridgeObjectRelease();
      swift_release();

      uint64_t v314 = v416;
      uint64_t v315 = (void (*)(char *, uint64_t))v401;
      v401((uint64_t)v418, v416);
      sub_1003B61EC(v306, type metadata accessor for SharedBeaconRecord);
      sub_10001DAB4((uint64_t)v390, (uint64_t *)&unk_101653D40);
      uint64_t v316 = v397;
      uint64_t v317 = v314;
      v160 = (uint64_t *)v409;
    }
    else
    {

      sub_1003B61EC(v285, type metadata accessor for SharedBeaconRecord);
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v315 = (void (*)(char *, uint64_t))v401;
      v401((uint64_t)v418, (uint64_t)v153);
      sub_1003B61EC(v306, type metadata accessor for SharedBeaconRecord);
      sub_10001DAB4((uint64_t)v151, (uint64_t *)&unk_101653D40);
      uint64_t v316 = v397;
      uint64_t v317 = (uint64_t)v153;
    }
    v315(v316, v317);
    uint64_t v292 = (uint64_t)v398;
    goto LABEL_106;
  }
  uint64_t v302 = (uint64_t)v298;
  uint64_t v303 = v346;
  sub_1003B6008(v302, v346, type metadata accessor for KeyDropLostItemDates);
  uint64_t v304 = v303 + *(int *)(v299 + 20);
  uint64_t v305 = v344;
  sub_10001D074(v304, v344, (uint64_t *)&unk_10163AC90);
  if (v387(v305, 1, (uint64_t)v153) == 1)
  {
    sub_1003B61EC(v303, type metadata accessor for KeyDropLostItemDates);
    NSString v300 = (uint64_t *)&unk_10163AC90;
    uint64_t v301 = v305;
    goto LABEL_100;
  }
  uint64_t v321 = v345;
  (*(void (**)(char *, uint64_t, long long *))(v408 + 32))(v345, v305, v153);
  uint64_t v322 = (uint64_t)v362;
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v323 = type metadata accessor for Logger();
  sub_100010324(v323, (uint64_t)qword_10170D788);
  uint64_t v324 = v342;
  sub_1003B6E14(v322, v342, type metadata accessor for SharedBeaconRecord);
  v325 = v343;
  v363(v343, (uint64_t)v321, (uint64_t)v153);
  uint64_t v326 = Logger.logObject.getter();
  os_log_type_t v327 = static os_log_type_t.default.getter();
  int v328 = v327;
  if (os_log_type_enabled(v326, v327))
  {
    uint64_t v329 = swift_slowAlloc();
    *(void *)&long long v422 = swift_slowAlloc();
    *(_DWORD *)uint64_t v329 = 141558531;
    *(void *)&long long v421 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v329 + 12) = 2081;
    LODWORD(v417) = v328;
    sub_100394110((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v330 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)&long long v421 = sub_1008FA0F0(v330, v331, (uint64_t *)&v422);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1003B61EC(v324, type metadata accessor for SharedBeaconRecord);
    *(_WORD *)(v329 + 22) = 2080;
    sub_100394110((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
    v332 = v343;
    uint64_t v333 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)&long long v421 = sub_1008FA0F0(v333, v334, (uint64_t *)&v422);
    id v153 = (long long *)v416;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v401((uint64_t)v332, (uint64_t)v153);
    _os_log_impl((void *)&_mh_execute_header, v326, (os_log_type_t)v417, "Lost mode is enabled for shared beacon %{private,mask.hash}s\nwith timestamp of %s.", (uint8_t *)v329, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v321 = v345;
    swift_slowDealloc();
  }
  else
  {
    sub_1003B61EC(v324, type metadata accessor for SharedBeaconRecord);
    v401((uint64_t)v325, (uint64_t)v153);
  }

  uint64_t v335 = (uint64_t)v398;
  unint64_t v336 = v341;
  v363(v341, (uint64_t)v321, (uint64_t)v153);
  ((void (*)(char *, void, uint64_t, long long *))v414)(v336, 0, 1, v153);
  if (v387((uint64_t)v336, 1, (uint64_t)v153) == 1)
  {
    Class v337 = 0;
    uint64_t v338 = v412;
    v339 = (void (*)(char *, long long *))v401;
  }
  else
  {
    Class v337 = Date._bridgeToObjectiveC()().super.isa;
    v339 = (void (*)(char *, long long *))v401;
    v401((uint64_t)v336, (uint64_t)v153);
    uint64_t v338 = v412;
  }
  id v340 = [objc_allocWithZone((Class)SPLostModeInfo) initWithMessage:0 email:0 phoneNumber:0 timestamp:v337];

  [v160 setLostModeInfo:v340];
  swift_bridgeObjectRelease();
  swift_release();

  v339(v418, v153);
  v339(v345, v153);
  sub_1003B61EC(v346, type metadata accessor for KeyDropLostItemDates);
  sub_1003B61EC((uint64_t)v362, type metadata accessor for SharedBeaconRecord);
  sub_10001DAB4((uint64_t)v151, (uint64_t *)&unk_101653D40);
  v339(v397, v153);
  sub_10001DAB4(v335, &qword_10163BB30);
  v318 = v371;
  uint64_t v319 = v338;
LABEL_107:
  v410((uint64_t)v318, v319);
LABEL_108:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v431);
  return v160;
}

uint64_t *sub_1003A0448(uint64_t a1, uint64_t a2)
{
  uint64_t v409 = a2;
  uint64_t v356 = sub_10000588C(&qword_10163B8A8);
  __chkstk_darwin(v356);
  uint64_t v358 = (char *)&v344 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v357 = type metadata accessor for KeyDropLostItemDates(0);
  uint64_t v355 = *(void *)(v357 - 8);
  __chkstk_darwin(v357);
  uint64_t v350 = (uint64_t)&v344 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101653D30);
  __chkstk_darwin(v5 - 8);
  uint64_t v352 = (void **)((char *)&v344 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = sub_10000588C((uint64_t *)&unk_101653D50);
  __chkstk_darwin(v7 - 8);
  uint64_t v364 = (char *)&v344 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v388 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v368 = *(void *)(v388 - 8);
  uint64_t v9 = __chkstk_darwin(v388);
  uint64_t v11 = (char *)&v344 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v345 = (uint64_t)&v344 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v353 = (uint64_t)&v344 - v15;
  uint64_t v354 = v16;
  __chkstk_darwin(v14);
  uint64_t v365 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))((char *)&v344 - v17);
  uint64_t v18 = sub_10000588C(&qword_101638CF0);
  uint64_t v19 = __chkstk_darwin(v18 - 8);
  uint64_t v359 = (uint64_t)&v344 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v363 = (uint64_t)&v344 - v21;
  uint64_t v22 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v22 - 8);
  uint64_t v387 = (char *)&v344 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v397 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v386 = *(void *)(v397 - 8);
  __chkstk_darwin(v397);
  uint64_t v374 = (char *)&v344 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v384 = sub_10000588C(&qword_10163B9E0);
  __chkstk_darwin(v384);
  uint64_t v385 = (char *)&v344 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v392 = type metadata accessor for BeaconNamingRecord();
  uint64_t v383 = *(void *)(v392 - 8);
  __chkstk_darwin(v392);
  uint64_t v393 = (uint64_t)&v344 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_10000588C((uint64_t *)&unk_10163B1D0);
  __chkstk_darwin(v27 - 8);
  uint64_t v382 = (char *)&v344 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = sub_10000588C(&qword_10163BBB0);
  uint64_t v30 = __chkstk_darwin(v29 - 8);
  uint64_t v362 = (uint64_t)&v344 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v30);
  uint64_t v369 = (uint64_t)&v344 - v32;
  uint64_t v396 = type metadata accessor for BeaconProductInfoRecord();
  uint64_t v395 = *(void *)(v396 - 8);
  uint64_t v33 = __chkstk_darwin(v396);
  uint64_t v351 = (uint64_t)&v344 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v33);
  uint64_t v360 = (uint64_t)&v344 - v35;
  uint64_t v36 = sub_10000588C(&qword_10163BB80);
  __chkstk_darwin(v36 - 8);
  uint64_t v38 = (char *)&v344 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v372 = type metadata accessor for KeyAlignmentRecord();
  uint64_t v380 = *(void *)(v372 - 8);
  __chkstk_darwin(v372);
  uint64_t v361 = (uint64_t)&v344 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v377 = sub_10000588C((uint64_t *)&unk_101653D40);
  uint64_t v40 = __chkstk_darwin(v377);
  uint64_t v379 = (uint64_t)&v344 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = __chkstk_darwin(v40);
  uint64_t v378 = (uint64_t *)((char *)&v344 - v43);
  __chkstk_darwin(v42);
  uint64_t v399 = (uint64_t)&v344 - v44;
  uint64_t v423 = type metadata accessor for LocationProvider();
  uint64_t v45 = *(void *)(v423 - 8);
  uint64_t v46 = __chkstk_darwin(v423);
  uint64_t v416 = (char *)&v344 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v46);
  uint64_t v49 = (char *)&v344 - v48;
  uint64_t v50 = sub_10000588C(&qword_1016426B0);
  uint64_t v51 = __chkstk_darwin(v50 - 8);
  uint64_t v418 = (uint64_t)&v344 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v51);
  uint64_t v420 = (uint64_t)&v344 - v53;
  uint64_t v391 = sub_10000588C(&qword_10163BB30);
  uint64_t v54 = __chkstk_darwin(v391);
  v390 = (char *)&v344 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v54);
  uint64_t v402 = (char *)&v344 - v56;
  uint64_t v57 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v58 = __chkstk_darwin(v57 - 8);
  uint64_t v344 = (char *)&v344 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = __chkstk_darwin(v58);
  uint64_t v347 = (uint64_t)&v344 - v61;
  uint64_t v62 = __chkstk_darwin(v60);
  v371 = (char *)&v344 - v63;
  __chkstk_darwin(v62);
  uint64_t v376 = (uint64_t)&v344 - v64;
  uint64_t v65 = sub_10000588C(&qword_10163BB70);
  __chkstk_darwin(v65 - 8);
  uint64_t v412 = (uint64_t *)((char *)&v344 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v419 = type metadata accessor for Date();
  uint64_t v410 = *(void *)(v419 - 8);
  uint64_t v67 = __chkstk_darwin(v419);
  uint64_t v346 = (char *)&v344 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v69 = __chkstk_darwin(v67);
  uint64_t v349 = (char *)&v344 - v70;
  uint64_t v71 = __chkstk_darwin(v69);
  v370 = (char *)&v344 - v72;
  uint64_t v73 = __chkstk_darwin(v71);
  long long v421 = (char *)&v344 - v74;
  uint64_t v75 = __chkstk_darwin(v73);
  uint64_t v401 = (char *)&v344 - v76;
  __chkstk_darwin(v75);
  uint64_t v398 = (char *)&v344 - v77;
  uint64_t v78 = type metadata accessor for UUID();
  uint64_t v406 = *(void *)(v78 - 8);
  uint64_t v79 = __chkstk_darwin(v78);
  uint64_t v81 = (char *)&v344 - ((v80 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = __chkstk_darwin(v79);
  uint64_t v413 = (char *)&v344 - v83;
  uint64_t v84 = __chkstk_darwin(v82);
  uint64_t v389 = (uint64_t)&v344 - v85;
  __chkstk_darwin(v84);
  uint64_t v87 = (char *)&v344 - v86;
  uint64_t v88 = type metadata accessor for LocalFindableAccessoryRecord();
  v434[3] = v88;
  v434[4] = sub_100394110(&qword_101642930, (void (*)(uint64_t))type metadata accessor for LocalFindableAccessoryRecord);
  id v89 = sub_10001D958(v434);
  sub_1003B6E14(a1, (uint64_t)v89, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
  id v415 = [objc_allocWithZone((Class)SPBeacon) init];
  uint64_t v405 = v88;
  uint64_t v90 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))*(int *)(v88 + 44);
  long long v422 = (void *)*(int *)(v88 + 40);
  uint64_t v91 = *(void *)((char *)v422 + (void)v89);
  id v411 = v89;
  uint64_t v417 = v90;
  uint64_t v92 = sub_1002AAF08(v91, *(uint64_t *)((char *)v90 + (void)v89));
  uint64_t v414 = v78;
  uint64_t v394 = v87;
  uint64_t v348 = v11;
  uint64_t v373 = v81;
  uint64_t v381 = v38;
  if (v93 >> 60 == 15)
  {
    if (qword_101636F50 != -1) {
      swift_once();
    }
    uint64_t v94 = type metadata accessor for Logger();
    sub_100010324(v94, (uint64_t)qword_10170E9E8);
    sub_10001D010((uint64_t)v434, (uint64_t)&v425);
    sub_10001D010((uint64_t)v434, (uint64_t)&v432);
    os_log_type_t v95 = Logger.logObject.getter();
    os_log_type_t v96 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v95, v96))
    {
      uint64_t v97 = swift_slowAlloc();
      *(_DWORD *)uint64_t v97 = 134218240;
      BOOL v98 = sub_10001CD44(&v425, v427);
      uint64_t v99 = v405;
      uint64_t v100 = *(void *)((char *)v98 + *(int *)(v405 + 40));
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v425);
      *(void *)&long long v424 = v100;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v97 + 12) = 2048;
      uint64_t v101 = *(void *)((char *)sub_10001CD44(&v432, v433) + *(int *)(v99 + 44));
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v432);
      *(void *)&long long v425 = v101;
      uint64_t v78 = v414;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v95, v96, "Unable to create AccessoryProductData from %ld/%ld", (uint8_t *)v97, 0x16u);
      swift_slowDealloc();
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v432);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v425);
    }

    id v105 = v415;
    UUID.init(uuid:)();
  }
  else
  {
    uint64_t v102 = v92;
    unint64_t v103 = v93;
    if (qword_101636960 != -1) {
      swift_once();
    }
    long long v425 = xmmword_1016408F8;
    sub_1000361E0(xmmword_1016408F8, *((unint64_t *)&xmmword_1016408F8 + 1));
    Data.append(_:)();
    long long v104 = v425;
    long long v432 = v425;
    sub_1000362FC();
    DataProtocol.stableUUID.getter();
    sub_10001CFB8(v104, *((unint64_t *)&v104 + 1));
    sub_100037A24(v102, v103);
    id v105 = v415;
  }
  uint64_t v106 = v411;
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  [v105 setIdentifier:isa];

  swift_bridgeObjectRetain();
  NSString v108 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v105 setModel:v108];

  sub_10001D4B0(0, &qword_10163B870);
  sub_10012E2E4(&qword_10163B878, &qword_10163B870);
  Class v109 = Set._bridgeToObjectiveC()().super.isa;
  [v105 setShares:v109];

  swift_bridgeObjectRetain();
  NSString v110 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v105 setSystemVersion:v110];

  Class v111 = UUID._bridgeToObjectiveC()().super.isa;
  [v105 setProductUUID:v111];

  [v105 setVendorId:*(void *)((char *)v422 + (void)v106)];
  [v105 setProductId:*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)v417 + (void)v106)];
  uint64_t v112 = v398;
  Date.init(timeIntervalSince1970:)();
  Class v113 = Date._bridgeToObjectiveC()().super.isa;
  uint64_t v114 = *(void (**)(char *, uint64_t))(v410 + 8);
  uint64_t v404 = v410 + 8;
  v403 = v114;
  v114(v112, v419);
  [v105 setPairingDate:v113];

  [v105 setType:SPBeaconTypeLocalFindable];
  uint64_t v115 = v389;
  uint64_t v407 = *(void (**)(uint64_t, uint64_t *, uint64_t))(v406 + 16);
  uint64_t v408 = v406 + 16;
  v407(v389, v106, v78);
  uint64_t v400 = *(void *)(v409 + 160);
  uint64_t v116 = sub_100B6D358(v115);
  uint64_t v117 = v116[2];
  uint64_t v118 = (int *)type metadata accessor for LostModeRecord();
  uint64_t v119 = *((void *)v118 - 1);
  if (v117)
  {
    v120 = v412;
    sub_1003B6E14((uint64_t)v116+ ((*(unsigned __int8 *)(*((void *)v118 - 1) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*((void *)v118 - 1) + 80)), (uint64_t)v412, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
    uint64_t v121 = 0;
    uint64_t v122 = (uint64_t)v413;
  }
  else
  {
    uint64_t v121 = 1;
    uint64_t v122 = (uint64_t)v413;
    v120 = v412;
  }
  (*(void (**)(uint64_t *, uint64_t, uint64_t, int *))(v119 + 56))(v120, v121, 1, v118);
  swift_bridgeObjectRelease();
  uint64_t v123 = *(uint64_t **)(v406 + 8);
  uint64_t v124 = v414;
  uint64_t v413 = (char *)(v406 + 8);
  uint64_t v412 = v123;
  ((void (*)(uint64_t, uint64_t))v123)(v115, v414);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, int *))(v119 + 48))(v120, 1, v118) == 1)
  {
    sub_10001DAB4((uint64_t)v120, &qword_10163BB70);
    id v125 = 0;
  }
  else
  {
    uint64_t v126 = (uint64_t *)((char *)v120 + v118[9]);
    id v127 = (void (*)(char *, uint64_t, uint64_t))v126[1];
    uint64_t v389 = *v126;
    uint64_t v366 = v127;
    uint64_t v128 = v118[8];
    id v129 = (uint64_t *)((char *)v120 + v118[7]);
    uint64_t v130 = v129[1];
    uint64_t v367 = *v129;
    uint64_t v131 = *(uint64_t *)((char *)v120 + v128 + 8);
    uint64_t v375 = *(long long **)((char *)v120 + v128);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v133 = v376;
    sub_100B23648(v120, v376);
    uint64_t v134 = v132;
    id v105 = v415;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v410 + 56))(v133, 0, 1, v419);
    id v135 = objc_allocWithZone((Class)SPLostModeInfo);
    id v125 = sub_100B23CB8(v389, (uint64_t)v366, v367, v130, (uint64_t)v375, v131, v133);
    sub_1003B61EC((uint64_t)v120, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
  }
  [v105 setLostModeInfo:v125];

  v407(v122, v411, v124);
  if (qword_101636CB8 != -1) {
    swift_once();
  }
  sub_1007B4970(v122, 0, 0, &v425);
  uint64_t v137 = v391;
  uint64_t v138 = v402;
  uint64_t v139 = (uint64_t)&v402[*(int *)(v391 + 48)];
  char v140 = sub_100AF7A38(v139, v122, (void *)v425, 1);
  swift_bridgeObjectRelease();
  ((void (*)(uint64_t, uint64_t))v412)(v122, v124);
  LOBYTE(v136) = v140 & 1;
  *uint64_t v138 = v140 & 1;
  [v415 setConnected:v140 & 1];
  uint64_t v141 = *(int *)(v137 + 48);
  char v142 = v390;
  uint64_t v143 = &v390[v141];
  char *v390 = (char)v136;
  sub_10001D074(v139, (uint64_t)&v142[v141], (uint64_t *)&unk_10163AC90);
  Swift::Int v144 = *(char **)(v410 + 48);
  uint64_t v145 = v419;
  uint64_t v391 = v410 + 48;
  v390 = v144;
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v144)(v143, 1, v419) == 1)
  {
    Class v146 = 0;
  }
  else
  {
    Class v146 = Date._bridgeToObjectiveC()().super.isa;
    v403(v143, v145);
  }
  id v147 = v415;
  [v415 setConnectedStateExpiryDate:v146];

  uint64_t v148 = (uint64_t)v411;
  [v147 setIsAppleAudioAccessory:sub_100DF1520(*(void *)((char *)v422 + (void)v411), *(uint64_t *)((char *)v417 + (void)v411))];
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v389 = 0;
  sub_1010ABF18(v425);
  swift_bridgeObjectRelease();
  id v149 = v401;
  Date.init(timeIntervalSinceNow:)();
  uint64_t v150 = sub_100B6EE9C(v148);
  uint64_t v151 = *(void (**)(char *, uint64_t, uint64_t))(v410 + 16);
  Class v152 = (long long *)v419;
  uint64_t v367 = v410 + 16;
  uint64_t v366 = v151;
  v151(v421, (uint64_t)v149, v419);
  id v153 = (void **)SPLocationProvider_ptr;
  uint64_t v154 = sub_10001D4B0(0, (unint64_t *)&unk_10166BF70);
  uint64_t v155 = (long long *)sub_10012E2E4(&qword_1016426B8, (unint64_t *)&unk_10166BF70);
  swift_bridgeObjectRetain();
  uint64_t v376 = v154;
  uint64_t v375 = v155;
  Class v156 = 0;
  *(void *)&long long v425 = Set.init(minimumCapacity:)();
  id v157 = v150;
  uint64_t v158 = (void **)v150[2];
  uint64_t v417 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v45 + 56);
  id v159 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48);
  v160 = &qword_1016605E0;
  long long v422 = v157;
  uint64_t v161 = (uint64_t)v416;
  if (v158) {
    goto LABEL_25;
  }
LABEL_28:
  while (1)
  {
    uint64_t v162 = 1;
    Class v156 = v158;
LABEL_30:
    uint64_t v163 = v420;
    uint64_t v164 = v423;
    (*v417)(v420, v162, 1, v423);
    uint64_t v165 = v163;
    uint64_t v166 = v418;
    sub_10001D608(v165, v418, &qword_1016426B0);
    if ((*v159)(v166, 1, v164) == 1) {
      break;
    }
    sub_1003B6008(v166, v161, (uint64_t (*)(void))type metadata accessor for LocationProvider);
    char v167 = sub_100B967D0(*(unsigned __int8 *)(v161 + *(int *)(v164 + 24)), *(void *)(v161 + *(int *)(v164 + 24) + 8), *(void **)(v161 + *(int *)(v164 + 24) + 16));
    id v153 = (void **)sub_100ECF4F0(v167, v168, v169);
    swift_bridgeObjectRelease();
    id v170 = objc_allocWithZone((Class)SPLocationProvider);
    Class v171 = Date._bridgeToObjectiveC()().super.isa;
    id v172 = [v170 initWithTimestamp:v171 provider:v153];

    sub_1003B61EC(v161, (uint64_t (*)(void))type metadata accessor for LocationProvider);
    uint64_t v155 = &v425;
    sub_100DCCD24(&v432, v172);

    Class v152 = (long long *)v419;
    id v157 = v422;
    if (v156 != v158)
    {
LABEL_25:
      while ((unint64_t)v156 < v157[2])
      {
        id v153 = (void **)((char *)v156 + 1);
        sub_1003B6E14((uint64_t)v157+ ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))+ *(void *)(v45 + 72) * (void)v156, (uint64_t)v49, (uint64_t (*)(void))type metadata accessor for LocationProvider);
        sub_100394110((unint64_t *)&qword_1016605E0, (void (*)(uint64_t))&type metadata accessor for Date);
        uint64_t v155 = v152;
        if ((dispatch thunk of static Comparable.< infix(_:_:)() & 1) == 0)
        {
          sub_1003B6008((uint64_t)v49, v420, (uint64_t (*)(void))type metadata accessor for LocationProvider);
          uint64_t v162 = 0;
          Class v156 = (void **)((char *)v156 + 1);
          goto LABEL_30;
        }
        sub_1003B61EC((uint64_t)v49, (uint64_t (*)(void))type metadata accessor for LocationProvider);
        Class v156 = (void **)((char *)v156 + 1);
        id v157 = v422;
        if (v158 == v153) {
          goto LABEL_28;
        }
      }
      __break(1u);
      goto LABEL_98;
    }
  }
  swift_bridgeObjectRelease();
  Class v173 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v174 = v415;
  [v415 setLocationProviders:v173];

  type metadata accessor for BeaconKeyManager(0);
  uint64_t v175 = v389;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  uint64_t v420 = v175;
  uint64_t v176 = v425;
  sub_10001D010((uint64_t)v434, (uint64_t)&v425);
  uint64_t v177 = swift_allocObject();
  *(void *)(v177 + 16) = v176;
  sub_10001CEB0(&v425, v177 + 24);
  uint64_t v423 = v176;
  swift_retain();
  uint64_t v178 = v399;
  unsafeFromAsyncTask<A>(_:)();
  swift_release();
  uint64_t v179 = (uint64_t *)&unk_101653D40;
  uint64_t v180 = v378;
  sub_10001D074(v178, (uint64_t)v378, (uint64_t *)&unk_101653D40);
  uint64_t v181 = sub_10000588C(&qword_10163F7B0);
  uint64_t v182 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v181 - 8) + 48);
  uint64_t v183 = 1;
  if (v182(v180, 1, v181) != 1)
  {
    uint64_t v183 = *v180;
    uint64_t v179 = &qword_10163F7B0;
  }
  uint64_t v184 = (uint64_t)v373;
  uint64_t v185 = v372;
  sub_10001DAB4((uint64_t)v180, v179);
  [v174 setKeySyncLastObservedIndex:v183];
  uint64_t v186 = v379;
  sub_10001D074(v178, v379, (uint64_t *)&unk_101653D40);
  if (v182((uint64_t *)v186, 1, v181) == 1)
  {
    sub_10001DAB4(v186, (uint64_t *)&unk_101653D40);
    uint64_t v187 = *(void (***)(uint64_t, uint64_t, uint64_t, uint64_t))(v410 + 56);
    uint64_t v188 = (uint64_t)v371;
    uint64_t v189 = v371;
    uint64_t v190 = 1;
    uint64_t v191 = v419;
  }
  else
  {
    uint64_t v188 = (uint64_t)v371;
    uint64_t v191 = v419;
    v366(v371, v186 + *(int *)(v181 + 36), v419);
    sub_10001DAB4(v186, &qword_10163F7B0);
    uint64_t v187 = *(void (***)(uint64_t, uint64_t, uint64_t, uint64_t))(v410 + 56);
    uint64_t v189 = (char *)v188;
    uint64_t v190 = 0;
  }
  uint64_t v417 = v187;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v187)(v189, v190, 1, v191);
  uint64_t v192 = v403;
  uint64_t v193 = v370;
  sub_10001D010((uint64_t)v434, (uint64_t)&v432);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v390)(v188, 1, v191) == 1)
  {
    sub_10001CD44(&v432, v433);
    Date.init(timeIntervalSince1970:)();
    sub_10001DAB4(v188, (uint64_t *)&unk_10163AC90);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v410 + 32))(v193, v188, v191);
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v432);
  Class v194 = Date._bridgeToObjectiveC()().super.isa;
  v192(v193, v191);
  [v174 setKeySyncLastIndexObservationDate:v194];

  [v174 setKeySyncWildIndexFallback:1];
  uint64_t v195 = v414;
  v407(v184, v411, v414);
  uint64_t v196 = v174;
  uint64_t v197 = (uint64_t)v381;
  sub_100B6C53C((uint64_t)v381);
  ((void (*)(uint64_t, uint64_t))v412)(v184, v195);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v380 + 48))(v197, 1, v185) == 1)
  {
    sub_10001DAB4(v197, &qword_10163BB80);
    [v196 setKeyAlignmentLastObservedIndex:0];
    Class v198 = v398;
    static Date.distantPast.getter();
    Class v199 = Date._bridgeToObjectiveC()().super.isa;
    v192(v198, v191);
    [v196 setKeyAlignmentLastIndexObservationDate:v199];
  }
  else
  {
    uint64_t v200 = v361;
    sub_1003B6008(v197, v361, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
    [v196 setKeyAlignmentLastObservedIndex:*(void *)(v200 + *(int *)(v185 + 28))];
    Class v201 = Date._bridgeToObjectiveC()().super.isa;
    [v196 setKeyAlignmentLastIndexObservationDate:v201];

    sub_1003B61EC(v200, (uint64_t (*)(void))type metadata accessor for KeyAlignmentRecord);
  }
  id v202 = [v196 type];
  uint64_t v203 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v205 = v204;
  uint64_t v206 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v208 = v409;
  if (v203 == v206 && v205 == v207)
  {
LABEL_46:

    swift_bridgeObjectRelease_n();
    uint64_t v209 = v414;
    uint64_t v210 = v392;
    goto LABEL_48;
  }
  char v211 = _stringCompareWithSmolCheck(_:_:expecting:)();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v209 = v414;
  uint64_t v210 = v392;
  if ((v211 & 1) == 0)
  {
    id v202 = [v196 type];
    uint64_t v224 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v226 = v225;
    if (v224 != static String._unconditionallyBridgeFromObjectiveC(_:)() || v226 != v227)
    {
      char v228 = _stringCompareWithSmolCheck(_:_:expecting:)();

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v209 = v414;
      uint64_t v210 = v392;
      if ((v228 & 1) == 0) {
        goto LABEL_51;
      }
      goto LABEL_48;
    }
    goto LABEL_46;
  }
LABEL_48:
  id v212 = [v196 identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v213 = v369;
  sub_100AE311C(v184, v369);
  ((void (*)(uint64_t, uint64_t))v412)(v184, v209);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v395 + 48))(v213, 1, v396) == 1)
  {
    sub_10001DAB4(v213, &qword_10163BBB0);
  }
  else
  {
    uint64_t v214 = v213;
    uint64_t v215 = v360;
    sub_1003B6008(v214, v360, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
    id v216 = sub_100853D90();
    [v196 setAccessoryProductInfo:v216];

    sub_1003B61EC(v215, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
  }
LABEL_51:
  sub_10001D010((uint64_t)v434, (uint64_t)&v425);
  uint64_t v217 = sub_10000588C((uint64_t *)&unk_10164DBF0);
  uint64_t v218 = (uint64_t)v382;
  uint64_t v418 = v217;
  uint64_t v219 = v405;
  int v220 = swift_dynamicCast();
  id v221 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v219 - 8) + 56);
  if (!v220)
  {
    v221(v218, 1, 1, v219);
    uint64_t v223 = (uint64_t *)&unk_10163B1D0;
    goto LABEL_55;
  }
  v221(v218, 0, 1, v219);
  sub_10001DAB4(v218, (uint64_t *)&unk_10163B1D0);
  id v222 = [v196 identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v218 = v362;
  sub_100AE311C(v184, v362);
  ((void (*)(uint64_t, uint64_t))v412)(v184, v209);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v395 + 48))(v218, 1, v396) == 1)
  {
    uint64_t v223 = &qword_10163BBB0;
LABEL_55:
    sub_10001DAB4(v218, v223);
    goto LABEL_61;
  }
  uint64_t v229 = v218;
  uint64_t v230 = v351;
  sub_1003B6008(v229, v351, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
  id v231 = sub_100853D90();
  [v196 setAccessoryProductInfo:v231];

  sub_1003B61EC(v230, (uint64_t (*)(void))type metadata accessor for BeaconProductInfoRecord);
LABEL_61:
  id v232 = (int *)v397;
  uint64_t v233 = v414;
  uint64_t v234 = ((uint64_t (*)(uint64_t, uint64_t *, uint64_t))v407)(v184, v411, v414);
  __chkstk_darwin(v234);
  uint64_t v235 = (uint64_t)v385;
  QueueSynchronizer.conditionalSync<A>(_:)();
  ((void (*)(uint64_t, uint64_t))v412)(v184, v233);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v383 + 48))(v235, 1, v210) != 1)
  {
    uint64_t v255 = v235;
    uint64_t v256 = v393;
    sub_1003B6008(v255, v393, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
    swift_bridgeObjectRetain();
    NSString v257 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    v160 = (uint64_t *)v415;
    [v415 setName:v257];

    unint64_t v258 = *(void *)(v256 + *(int *)(v210 + 28));
    uint64_t v259 = sub_1012D4780(v258);
    id v260 = (void *)v259;
    if (v258 == SPBeaconRoleIdOther && *(void *)(v393 + *(int *)(v210 + 36) + 8) && v259)
    {
      swift_bridgeObjectRetain();
      id v261 = [v260 role];
      static String._unconditionallyBridgeFromObjectiveC(_:)();

      id v262 = objc_allocWithZone((Class)SPBeaconRole);
      NSString v263 = String._bridgeToObjectiveC()();
      v160 = (uint64_t *)v415;
      swift_bridgeObjectRelease();
      NSString v264 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v265 = [v262 initWithRoleId:v258 role:v263 roleEmoji:v264];

      id v232 = (int *)v397;
      [v160 setRole:v265];

      id v260 = v265;
    }
    else
    {
      [v160 setRole:v259];
    }
    uint64_t v266 = (uint64_t)v402;
    uint64_t v267 = (int *)v388;
    uint64_t v268 = (uint64_t)v387;
    uint64_t v247 = v414;

    sub_1003B61EC(v393, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
    goto LABEL_75;
  }
  sub_10001DAB4(v235, &qword_10163B9E0);
  sub_10001D010((uint64_t)v434, (uint64_t)&v424);
  uint64_t v236 = swift_allocObject();
  *(void *)(v236 + 16) = v208;
  sub_10001CEB0(&v424, v236 + 24);
  swift_retain();
  sub_10000588C(&qword_10163A110);
  unsafeFromAsyncTask<A>(_:)();
  swift_release();
  uint64_t v237 = *((void *)&v425 + 1);
  if (!*((void *)&v425 + 1))
  {
    uint64_t v266 = (uint64_t)v402;
    uint64_t v267 = (int *)v388;
    uint64_t v268 = (uint64_t)v387;
    v160 = (uint64_t *)v415;
    uint64_t v247 = v414;
LABEL_75:
    uint64_t v269 = (uint64_t)v374;
    goto LABEL_79;
  }
  uint64_t v238 = v425;
  unint64_t v239 = v426;
  uint64_t v420 = v427;
  uint64_t v241 = v428;
  uint64_t v240 = v429;
  uint64_t v242 = v430;
  uint64_t v243 = v431;
  NSString v244 = String._bridgeToObjectiveC()();
  [v415 setName:v244];

  uint64_t v245 = sub_1012D4780(v239);
  uint64_t v246 = (void *)v245;
  uint64_t v247 = v414;
  if (v239 != SPBeaconRoleIdOther || !v241 || !v245)
  {
    [v415 setRole:v245];
    if (v243) {
      goto LABEL_67;
    }
LABEL_77:
    sub_100090C68(v238, v237);
    NSString v254 = 0;
    goto LABEL_78;
  }
  swift_bridgeObjectRetain();
  id v248 = [v246 role];
  uint64_t v416 = v242;
  id v411 = v240;
  id v249 = v248;
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  id v250 = objc_allocWithZone((Class)SPBeaconRole);
  NSString v251 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v252 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v253 = [v250 initWithRoleId:v239 role:v251 roleEmoji:v252];

  uint64_t v247 = v414;
  [v415 setRole:v253];

  if (!v243) {
    goto LABEL_77;
  }
LABEL_67:
  swift_bridgeObjectRetain();
  NSString v254 = String._bridgeToObjectiveC()();
  sub_100090C68(v238, v237);
  swift_bridgeObjectRelease();
LABEL_78:
  uint64_t v266 = (uint64_t)v402;
  uint64_t v267 = (int *)v388;
  v160 = (uint64_t *)v415;
  [v415 setSerialNumber:v254];

  uint64_t v269 = (uint64_t)v374;
  id v232 = (int *)v397;
  uint64_t v268 = (uint64_t)v387;
LABEL_79:
  sub_10001D010((uint64_t)v434, (uint64_t)&v425);
  int v270 = swift_dynamicCast();
  uint64_t v271 = *(void (**)(uint64_t, uint64_t, uint64_t, int *))(v386 + 56);
  if (v270)
  {
    v271(v268, 0, 1, v232);
    sub_1003B6008(v268, v269, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    sub_101110C7C();
    NSString v272 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v160 setStableIdentifier:v272];

    uint64_t v273 = v363;
    sub_10001D074(v269 + v232[7], v363, &qword_101638CF0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v406 + 48))(v273, 1, v247) == 1)
    {
      Class v274 = 0;
    }
    else
    {
      Class v274 = UUID._bridgeToObjectiveC()().super.isa;
      ((void (*)(uint64_t, uint64_t))v412)(v273, v247);
    }
    char v287 = v403;
    [v160 setGroupIdentifier:v274];

    sub_100B351DC(v269);
    if (v288)
    {
      NSString v289 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }
    else
    {
      NSString v289 = 0;
    }
    [v160 setSerialNumber:v289];

    [v160 setPartIdentifier:sub_100B354CC(v269)];
    [v160 setBatteryLevel:*(unsigned __int8 *)(v269 + v232[19])];
    [v160 setIsZeus:*(unsigned __int8 *)(v269 + v232[20])];
    if (qword_1016370B8 != -1) {
      swift_once();
    }
    [v160 setOwner:qword_10170ECD8];
    [v160 setAccepted:1];
    NSString v293 = String._bridgeToObjectiveC()();
    [v160 setCorrelationIdentifier:v293];

    [v160 setInternalShareType:-1];
    [v160 setOwnerBeaconIdentifier:0];
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v294 = v419;
    v287(v421, v419);
    sub_1003B61EC(v269, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    sub_10001DAB4(v399, (uint64_t *)&unk_101653D40);
    uint64_t v295 = v401;
    unint64_t v296 = (char *)v294;
LABEL_93:
    v287(v295, (uint64_t)v296);
    uint64_t v297 = v266;
LABEL_94:
    sub_10001DAB4(v297, &qword_10163BB30);
    NSString v298 = v394;
    uint64_t v299 = v247;
    goto LABEL_95;
  }
  v271(v268, 1, 1, v232);
  sub_10001DAB4(v268, &qword_10163B9F0);
  sub_10001D010((uint64_t)v434, (uint64_t)&v425);
  uint64_t v275 = (uint64_t)v364;
  char v276 = swift_dynamicCast();
  NSString v277 = *(void (**)(uint64_t, uint64_t, uint64_t, int *))(v368 + 56);
  if ((v276 & 1) == 0)
  {
    v277(v275, 1, 1, v267);
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v290 = v247;
    uint64_t v291 = v419;
    uint64_t v292 = v403;
    v403(v421, v419);
    sub_10001DAB4(v399, (uint64_t *)&unk_101653D40);
    v292(v401, v291);
    sub_10001DAB4(v266, &qword_10163BB30);
    ((void (*)(char *, uint64_t))v412)(v394, v290);
    sub_10001DAB4(v275, (uint64_t *)&unk_101653D50);
    goto LABEL_96;
  }
  v277(v275, 0, 1, v267);
  id v159 = v365;
  sub_1003B6008(v275, (uint64_t)v365, type metadata accessor for SharedBeaconRecord);
  NSString v278 = String._bridgeToObjectiveC()();
  [v160 setStableIdentifier:v278];

  uint64_t v279 = (char *)v159 + v267[7];
  uint64_t v280 = *((void *)v279 + 1);
  char v281 = (void *)*((void *)v279 + 2);
  char v282 = *v279;
  swift_bridgeObjectRetain();
  NSString v283 = (void *)sub_100ECF4F0(v282, v280, v281);
  swift_bridgeObjectRelease();
  [v160 setOwner:v283];

  [v160 setAccepted:*((unsigned __int8 *)v159 + v267[13])];
  swift_bridgeObjectRetain();
  NSString v284 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v160 setCorrelationIdentifier:v284];

  [v160 setInternalShareType:*((unsigned __int8 *)v159 + v267[16])];
  id v153 = v352;
  sub_10001D074((uint64_t)v159 + v267[20], (uint64_t)v352, (uint64_t *)&unk_101653D30);
  uint64_t v155 = (long long *)type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  int v285 = (*(uint64_t (**)(void **, uint64_t, long long *))(*((void *)v155 - 1) + 48))(v153, 1, v155);
  uint64_t v49 = (char *)v419;
  if (v285 == 1)
  {
    sub_10001DAB4((uint64_t)v153, (uint64_t *)&unk_101653D30);
    uint64_t v247 = v414;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v406 + 56))(v359, 1, 1, v414);
    Class v286 = 0;
  }
  else
  {
LABEL_98:
    uint64_t v301 = v359;
    sub_10001D074((uint64_t)v153 + *((int *)v155 + 5), v359, &qword_101638CF0);
    sub_1003B61EC((uint64_t)v153, type metadata accessor for SharedBeaconRecord.PropertyListContent);
    uint64_t v247 = v414;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v406 + 48))(v301, 1, v414) == 1)
    {
      Class v286 = 0;
    }
    else
    {
      Class v286 = UUID._bridgeToObjectiveC()().super.isa;
      ((void (*)(uint64_t, uint64_t))v412)(v301, v247);
    }
  }
  [v160 setOwnerBeaconIdentifier:v286];

  uint64_t v302 = v353;
  sub_1003B6E14((uint64_t)v159, v353, type metadata accessor for SharedBeaconRecord);
  unint64_t v303 = (*(unsigned __int8 *)(v368 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v368 + 80);
  uint64_t v304 = swift_allocObject();
  *(void *)(v304 + 16) = v409;
  sub_1003B6008(v302, v304 + v303, type metadata accessor for SharedBeaconRecord);
  swift_retain();
  uint64_t v305 = v358;
  unsafeFromAsyncTask<A>(_:)();
  swift_release();
  uint64_t v306 = v357;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v355 + 48))(v305, 1, v357) == 1)
  {
    uint64_t v307 = &qword_10163B8A8;
    uint64_t v308 = (uint64_t)v305;
  }
  else
  {
    uint64_t v309 = (uint64_t)v305;
    uint64_t v310 = v350;
    sub_1003B6008(v309, v350, type metadata accessor for KeyDropLostItemDates);
    uint64_t v311 = v310 + *(int *)(v306 + 20);
    uint64_t v312 = v347;
    sub_10001D074(v311, v347, (uint64_t *)&unk_10163AC90);
    if (((unsigned int (*)(uint64_t, uint64_t, char *))v390)(v312, 1, v49) != 1)
    {
      uint64_t v324 = v349;
      (*(void (**)(char *, uint64_t, char *))(v410 + 32))(v349, v312, v49);
      uint64_t v325 = (uint64_t)v365;
      if (qword_101636888 != -1) {
        swift_once();
      }
      uint64_t v326 = type metadata accessor for Logger();
      sub_100010324(v326, (uint64_t)qword_10170D788);
      uint64_t v327 = v345;
      sub_1003B6E14(v325, v345, type metadata accessor for SharedBeaconRecord);
      int v328 = v346;
      v366(v346, (uint64_t)v324, (uint64_t)v49);
      uint64_t v329 = Logger.logObject.getter();
      os_log_type_t v330 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v329, v330))
      {
        uint64_t v331 = swift_slowAlloc();
        *(void *)&long long v425 = swift_slowAlloc();
        *(_DWORD *)uint64_t v331 = 141558531;
        *(void *)&long long v424 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v331 + 12) = 2081;
        sub_100394110((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v332 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)&long long v424 = sub_1008FA0F0(v332, v333, (uint64_t *)&v425);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1003B61EC(v327, type metadata accessor for SharedBeaconRecord);
        *(_WORD *)(v331 + 22) = 2080;
        sub_100394110((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
        unint64_t v334 = v346;
        uint64_t v335 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)&long long v424 = sub_1008FA0F0(v335, v336, (uint64_t *)&v425);
        uint64_t v49 = (char *)v419;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        Class v337 = v334;
        uint64_t v338 = v403;
        v403(v337, (uint64_t)v49);
        os_log_type_t v339 = v330;
        char v287 = v338;
        _os_log_impl((void *)&_mh_execute_header, v329, v339, "Lost mode is enabled for shared beacon %{private,mask.hash}s\nwith timestamp of %s.", (uint8_t *)v331, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_1003B61EC(v327, type metadata accessor for SharedBeaconRecord);
        char v287 = v403;
        v403(v328, (uint64_t)v49);
      }

      uint64_t v266 = (uint64_t)v402;
      uint64_t v340 = v399;
      Class v341 = v344;
      v366(v344, (uint64_t)v349, (uint64_t)v49);
      ((void (*)(char *, void, uint64_t, char *))v417)(v341, 0, 1, v49);
      if (((unsigned int (*)(char *, uint64_t, char *))v390)(v341, 1, v49) == 1)
      {
        Class v342 = 0;
      }
      else
      {
        Class v342 = Date._bridgeToObjectiveC()().super.isa;
        v287(v341, (uint64_t)v49);
      }
      uint64_t v247 = v414;
      id v343 = [objc_allocWithZone((Class)SPLostModeInfo) initWithMessage:0 email:0 phoneNumber:0 timestamp:v342];

      [v160 setLostModeInfo:v343];
      swift_bridgeObjectRelease();
      swift_release();

      v287(v421, (uint64_t)v49);
      v287(v349, (uint64_t)v49);
      sub_1003B61EC(v350, type metadata accessor for KeyDropLostItemDates);
      sub_1003B61EC((uint64_t)v365, type metadata accessor for SharedBeaconRecord);
      sub_10001DAB4(v340, (uint64_t *)&unk_101653D40);
      uint64_t v295 = v401;
      unint64_t v296 = v49;
      goto LABEL_93;
    }
    sub_1003B61EC(v310, type metadata accessor for KeyDropLostItemDates);
    uint64_t v307 = (uint64_t *)&unk_10163AC90;
    uint64_t v308 = v312;
  }
  sub_10001DAB4(v308, v307);
  uint64_t v313 = (uint64_t)v365;
  [v160 setLostModeInfo:0];
  if (qword_101636888 != -1) {
    swift_once();
  }
  uint64_t v314 = type metadata accessor for Logger();
  sub_100010324(v314, (uint64_t)qword_10170D788);
  uint64_t v315 = (uint64_t)v348;
  sub_1003B6E14(v313, (uint64_t)v348, type metadata accessor for SharedBeaconRecord);
  uint64_t v316 = Logger.logObject.getter();
  os_log_type_t v317 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v316, v317))
  {

    sub_1003B61EC(v315, type metadata accessor for SharedBeaconRecord);
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v323 = (void (*)(char *, char *))v403;
    v403(v421, (uint64_t)v49);
    sub_1003B61EC(v313, type metadata accessor for SharedBeaconRecord);
    sub_10001DAB4(v399, (uint64_t *)&unk_101653D40);
    v323(v401, v49);
    uint64_t v297 = (uint64_t)v402;
    goto LABEL_94;
  }
  uint64_t v318 = swift_slowAlloc();
  *(void *)&long long v425 = swift_slowAlloc();
  *(_DWORD *)uint64_t v318 = 141558275;
  *(void *)&long long v424 = 1752392040;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *(_WORD *)(v318 + 12) = 2081;
  sub_100394110((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v319 = dispatch thunk of CustomStringConvertible.description.getter();
  *(void *)&long long v424 = sub_1008FA0F0(v319, v320, (uint64_t *)&v425);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  sub_1003B61EC(v315, type metadata accessor for SharedBeaconRecord);
  _os_log_impl((void *)&_mh_execute_header, v316, v317, "Lost mode is not enabled for shared beacon %{private,mask.hash}s.", (uint8_t *)v318, 0x16u);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();
  swift_bridgeObjectRelease();
  swift_release();

  uint64_t v321 = v419;
  uint64_t v322 = v403;
  v403(v421, v419);
  sub_1003B61EC(v313, type metadata accessor for SharedBeaconRecord);
  sub_10001DAB4(v399, (uint64_t *)&unk_101653D40);
  v160 = (uint64_t *)v415;
  v322(v401, v321);
  sub_10001DAB4((uint64_t)v402, &qword_10163BB30);
  NSString v298 = v394;
  uint64_t v299 = v414;
LABEL_95:
  ((void (*)(char *, uint64_t))v412)(v298, v299);
LABEL_96:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v434);
  return v160;
}

void sub_1003A410C(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v56 = a2;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v5 - 8);
  uint64_t v42 = (uint64_t)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v7 - 8);
  uint64_t v51 = (uint64_t)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v9 = *(void *)(v58 - 8);
  uint64_t v10 = __chkstk_darwin(v58);
  uint64_t v59 = (uint64_t)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v50 = (uint64_t)&v41 - v12;
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v60 = (char *)&v41 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void *)(a1 + 56);
  uint64_t v45 = a1 + 56;
  uint64_t v20 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v21 = -1;
  if (v20 < 64) {
    uint64_t v21 = ~(-1 << v20);
  }
  unint64_t v22 = v21 & v19;
  uint64_t v54 = v14;
  uint64_t v55 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
  uint64_t v52 = v14 + 48;
  uint64_t v53 = v14 + 16;
  uint64_t v48 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  uint64_t v49 = (void (**)(char *, char *, uint64_t))(v14 + 32);
  int64_t v46 = (unint64_t)(v20 + 63) >> 6;
  uint64_t v47 = (uint64_t (**)(char *, uint64_t))(v14 + 8);
  uint64_t v57 = a1;
  uint64_t v23 = (void *)swift_bridgeObjectRetain();
  int64_t v24 = 0;
  uint64_t v43 = a3;
  while (1)
  {
    if (v22)
    {
      unint64_t v25 = __clz(__rbit64(v22));
      v22 &= v22 - 1;
      unint64_t v26 = v25 | (v24 << 6);
      goto LABEL_21;
    }
    if (__OFADD__(v24++, 1))
    {
      __break(1u);
      goto LABEL_37;
    }
    if (v24 >= v46) {
      goto LABEL_35;
    }
    unint64_t v28 = *(void *)(v45 + 8 * v24);
    if (!v28) {
      break;
    }
LABEL_20:
    unint64_t v22 = (v28 - 1) & v28;
    unint64_t v26 = __clz(__rbit64(v28)) + (v24 << 6);
LABEL_21:
    uint64_t v30 = v54;
    (*(void (**)(char *, unint64_t, uint64_t))(v54 + 16))(v18, *(void *)(v57 + 48) + *(void *)(v54 + 72) * v26, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v18, 0, 1, v13);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v18, 1, v13) == 1)
    {
      swift_release();
      return;
    }
    (*v49)(v60, v18, v13);
    uint64_t v31 = v51;
    sub_100ACD178(v51);
    if ((*v48)(v31, 1, v58) == 1)
    {
      sub_10001DAB4(v31, &qword_10163B9F0);
    }
    else
    {
      uint64_t v32 = v31;
      uint64_t v33 = v50;
      sub_1003B6008(v32, v50, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      char v34 = *a3;
      sub_1003B6E14(v33, v59, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      if (v34)
      {
        char v35 = 1;
      }
      else
      {
        uint64_t v36 = *(int *)(v58 + 20);
        if (qword_101636CB8 != -1) {
          swift_once();
        }
        uint64_t v37 = v59 + v36;
        uint64_t v39 = v44;
        sub_1007B4970(v37, 0, 0, &v61);
        uint64_t v44 = v39;
        uint64_t v23 = v38;
        if (v39) {
          goto LABEL_38;
        }
        uint64_t v40 = v42;
        char v35 = sub_100AF7A38(v42, v37, v61, 1);
        swift_bridgeObjectRelease();
        sub_10001DAB4(v40, (uint64_t *)&unk_10163AC90);
        a3 = v43;
      }
      sub_1003B61EC(v59, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      sub_1003B61EC(v50, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      *a3 = v35 & 1;
    }
    uint64_t v23 = (void *)(*v47)(v60, v13);
  }
  int64_t v29 = v24 + 1;
  if (v24 + 1 >= v46) {
    goto LABEL_35;
  }
  unint64_t v28 = *(void *)(v45 + 8 * v29);
  if (v28) {
    goto LABEL_19;
  }
  int64_t v29 = v24 + 2;
  if (v24 + 2 >= v46) {
    goto LABEL_35;
  }
  unint64_t v28 = *(void *)(v45 + 8 * v29);
  if (v28) {
    goto LABEL_19;
  }
  int64_t v29 = v24 + 3;
  if (v24 + 3 >= v46) {
    goto LABEL_35;
  }
  unint64_t v28 = *(void *)(v45 + 8 * v29);
  if (v28) {
    goto LABEL_19;
  }
  int64_t v29 = v24 + 4;
  if (v24 + 4 >= v46)
  {
LABEL_35:
    (*v55)(v18, 1, 1, v13);
    swift_release();
    return;
  }
  unint64_t v28 = *(void *)(v45 + 8 * v29);
  if (v28)
  {
LABEL_19:
    int64_t v24 = v29;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v24 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v24 >= v46) {
      goto LABEL_35;
    }
    unint64_t v28 = *(void *)(v45 + 8 * v24);
    ++v29;
    if (v28) {
      goto LABEL_20;
    }
  }
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
}

unint64_t sub_1003A4778()
{
  unint64_t result = qword_101648900;
  if (!qword_101648900)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101648900);
  }
  return result;
}

uint64_t sub_1003A47CC()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003A4804()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1003A4830(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v10 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = sub_100033F68;
  return sub_10068F570(a1, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1003A4940()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v19 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v4 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v5 = v0 + v3 + v1[5];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  uint64_t v9 = v0 + v3 + v1[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 32) & ~v2;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 32) & ~v2;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v3 = v18;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v10 = v4 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6)) {
    v8(v10, v6);
  }
  uint64_t v11 = v4 + v1[8];
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  sub_10001CFB8(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v13 = (uint64_t *)(v4 + v1[10]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_10001CFB8(*v13, v14);
  }
  uint64_t v15 = (uint64_t *)(v4 + v1[11]);
  unint64_t v16 = v15[1];
  if (v16 >> 60 != 15) {
    sub_10001CFB8(*v15, v16);
  }
  sub_10001CFB8(*(void *)(v4 + v1[12]), *(void *)(v4 + v1[12] + 8));
  sub_10001CFB8(*(void *)(v4 + v1[13]), *(void *)(v4 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, ((v19 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

id sub_1003A4CDC(char *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  char v5 = *(unsigned char *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + v4;
  uint64_t v8 = v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = *(void (**)(void))v8;
  uint64_t v10 = *(void *)(v8 + 8);

  return sub_100382994(a1, v5, v6, v7, v9, v10);
}

uint64_t sub_1003A4D84()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 48) & ~v2;
  uint64_t v19 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  swift_release();
  uint64_t v4 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v5 = v0 + v3 + v1[5];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  uint64_t v9 = v0 + v3 + v1[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 48) & ~v2;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 48) & ~v2;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v3 = v18;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v10 = v4 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6)) {
    v8(v10, v6);
  }
  uint64_t v11 = v4 + v1[8];
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  sub_10001CFB8(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v13 = (uint64_t *)(v4 + v1[10]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_10001CFB8(*v13, v14);
  }
  uint64_t v15 = (uint64_t *)(v4 + v1[11]);
  unint64_t v16 = v15[1];
  if (v16 >> 60 != 15) {
    sub_10001CFB8(*v15, v16);
  }
  sub_10001CFB8(*(void *)(v4 + v1[12]), *(void *)(v4 + v1[12] + 8));
  sub_10001CFB8(*(void *)(v4 + v1[13]), *(void *)(v4 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v3 + v19, v2 | 7);
}

id sub_1003A5110(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  char v4 = *(unsigned char *)(v1 + 16);
  uint64_t v5 = *(void (**)(void))(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_100382B24(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1003A518C()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v19 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v4 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v5 = v0 + v3 + v1[5];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  uint64_t v9 = v0 + v3 + v1[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 24) & ~v2;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 24) & ~v2;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v3 = v18;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v10 = v4 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6)) {
    v8(v10, v6);
  }
  uint64_t v11 = v4 + v1[8];
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  sub_10001CFB8(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v13 = (uint64_t *)(v4 + v1[10]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_10001CFB8(*v13, v14);
  }
  uint64_t v15 = (uint64_t *)(v4 + v1[11]);
  unint64_t v16 = v15[1];
  if (v16 >> 60 != 15) {
    sub_10001CFB8(*v15, v16);
  }
  sub_10001CFB8(*(void *)(v4 + v1[12]), *(void *)(v4 + v1[12] + 8));
  sub_10001CFB8(*(void *)(v4 + v1[13]), *(void *)(v4 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, ((v19 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 9, v2 | 7);
}

uint64_t sub_1003A5524()
{
  uint64_t v2 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = v0 + v3;
  uint64_t v6 = v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v7 = *(void *)v6;
  char v8 = *(unsigned char *)(v6 + 8);
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v9;
  *uint64_t v9 = v1;
  v9[1] = sub_100033F68;
  return sub_100380770(v4, v5, v7, v8);
}

uint64_t sub_1003A563C()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 80) & ~v2;
  uint64_t v19 = *(void *)(*((void *)v1 - 1) + 64);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v4 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v5 = v0 + v3 + v1[5];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  char v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  uint64_t v9 = v0 + v3 + v1[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 80) & ~v2;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 80) & ~v2;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v3 = v18;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v10 = v4 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6)) {
    v8(v10, v6);
  }
  uint64_t v11 = v4 + v1[8];
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  sub_10001CFB8(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v13 = (uint64_t *)(v4 + v1[10]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_10001CFB8(*v13, v14);
  }
  uint64_t v15 = (uint64_t *)(v4 + v1[11]);
  unint64_t v16 = v15[1];
  if (v16 >> 60 != 15) {
    sub_10001CFB8(*v15, v16);
  }
  sub_10001CFB8(*(void *)(v4 + v1[12]), *(void *)(v4 + v1[12] + 8));
  sub_10001CFB8(*(void *)(v4 + v1[13]), *(void *)(v4 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, ((v3 + v19 + 23) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_1003A59FC(char a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_100380D70(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void (**)(void))(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 72), v1 + v4, *(void *)(v1 + ((v4 + *(void *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8)), *(unsigned char *)(v1 + ((v4 + *(void *)(v3 + 64) + 7) & 0xFFFFFFFFFFFFFFF8) + 8), *(void *)(v1 + ((v4 + *(void *)(v3 + 64) + 23) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_1003A5ACC(unsigned __int8 *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for OSSignpostID() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = v4 + *(void *)(v3 + 64);
  uint64_t v6 = (v5 & 0xFFFFFFFFFFFFFFF8) + v1;
  char v7 = *(unsigned char *)(v1 + v5);
  char v8 = *(uint64_t (**)(uint64_t))(v6 + 8);
  uint64_t v9 = *(void *)(v6 + 16);
  uint64_t v10 = *(void (**)(void))(v1 + (((v5 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8));

  return sub_100381BE4(a1, v1 + v4, v7, v8, v9, v10);
}

uint64_t sub_1003A5B8C()
{
  uint64_t v1 = type metadata accessor for OSSignpostID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((((((v4 + *(void *)(v2 + 64)) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
     + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1003A5C54(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for OSSignpostID() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = v4 + *(void *)(v3 + 64);
  uint64_t v6 = (v5 & 0xFFFFFFFFFFFFFFF8) + v1;
  char v7 = *(unsigned char *)(v1 + v5);
  char v8 = *(uint64_t (**)(void))(v6 + 8);
  uint64_t v9 = *(void *)(v6 + 16);
  uint64_t v10 = *(uint64_t (**)(uint64_t))(v1 + (((v5 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8));

  return sub_100381DC4(a1, v1 + v4, v7, v8, v9, v10);
}

uint64_t sub_1003A5D10()
{
  return sub_1003B63BC((void (*)(void))&_swift_release);
}

uint64_t sub_1003A5D28(char *a1)
{
  return sub_1003816D0(a1, *(void *)(v1 + 16), *(uint64_t (**)(void))(v1 + 24));
}

uint64_t sub_1003A5D34()
{
  return sub_1003B63BC((void (*)(void))&_swift_release);
}

uint64_t sub_1003A5D4C(uint64_t a1)
{
  return sub_100381940(a1, *(void *)(v1 + 16), *(uint64_t (**)(uint64_t))(v1 + 24));
}

uint64_t sub_1003A5D58()
{
  return sub_1003B6464((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_1003A5D70()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 16);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_100033F68;
  *(_OWORD *)(v2 + 16) = v3;
  return _swift_task_switch(sub_100381B08, v3, 0);
}

uint64_t sub_1003A5E20()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v5 = *(void *)(v0 + 40);
  char v6 = *(unsigned char *)(v0 + 48);
  char v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  void *v7 = v1;
  v7[1] = sub_100033F68;
  return sub_101198CA4(v2, v3, v4, v5, v6);
}

uint64_t sub_1003A5EDC()
{
  swift_release();

  return _swift_deallocObject(v0, 25, 7);
}

uint64_t sub_1003A5F14()
{
  uint64_t v2 = *(void *)(v0 + 16);
  char v3 = *(unsigned char *)(v0 + 24);
  uint64_t v4 = swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(unsigned char *)(v4 + 24) = v3;
  *(void *)(v4 + 8) = sub_100033F68;
  *(void *)(v4 + 16) = v2;
  return _swift_task_switch(sub_100381868, v2, 0);
}

uint64_t sub_1003A5FC8()
{
  swift_release();
  swift_errorRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 49, 7);
}

uint64_t sub_1003A6010()
{
  uint64_t v1 = type metadata accessor for OSSignpostID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v25 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v3 = (v25 + 16) & ~v25;
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v6 = *(unsigned __int8 *)(*((void *)v5 - 1) + 80);
  uint64_t v24 = *(void *)(*((void *)v5 - 1) + 64);
  uint64_t v7 = v0 + v3;
  uint64_t v8 = (v4 + v6 + 8) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v7, v1);
  swift_release();
  uint64_t v9 = v0 + v8;
  sub_10001CFB8(*(void *)(v0 + v8), *(void *)(v0 + v8 + 8));
  uint64_t v10 = v0 + v8 + v5[5];
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  v13(v10, v11);
  uint64_t v14 = v0 + v8 + v5[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v13(v14, v11);
      uint64_t v23 = (v4 + v6 + 8) & ~v6;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v13(v14, v11);
      uint64_t v23 = (v4 + v6 + 8) & ~v6;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v8 = v23;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v15 = v9 + v5[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v15, 1, v11)) {
    v13(v15, v11);
  }
  uint64_t v16 = v9 + v5[8];
  uint64_t v17 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(v16, v17);
  sub_10001CFB8(*(void *)(v9 + v5[9]), *(void *)(v9 + v5[9] + 8));
  uint64_t v18 = (uint64_t *)(v9 + v5[10]);
  unint64_t v19 = v18[1];
  if (v19 >> 60 != 15) {
    sub_10001CFB8(*v18, v19);
  }
  uint64_t v20 = (uint64_t *)(v9 + v5[11]);
  unint64_t v21 = v20[1];
  if (v21 >> 60 != 15) {
    sub_10001CFB8(*v20, v21);
  }
  sub_10001CFB8(*(void *)(v9 + v5[12]), *(void *)(v9 + v5[12] + 8));
  sub_10001CFB8(*(void *)(v9 + v5[13]), *(void *)(v9 + v5[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, ((((v24 + v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v25 | v6 | 7);
}

uint64_t sub_1003A6444()
{
  uint64_t v1 = *(void *)(type metadata accessor for OSSignpostID() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  unint64_t v5 = (v3 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)(v0 + v3);
  uint64_t v8 = *(void *)(v0 + v6);
  uint64_t v9 = *(void *)(v0 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8));

  return sub_100389F14(v0 + v2, v7, v0 + v5, v8, v9);
}

uint64_t sub_1003A6558(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  LODWORD(v61) = a4;
  uint64_t v60 = a2;
  uint64_t v6 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v44 = (uint64_t)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = v12;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v41 - v13;
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v62 = (char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v18 - 8);
  uint64_t v59 = (char *)&v41 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = *(void *)(a1 + 56);
  uint64_t v50 = a1 + 56;
  uint64_t v21 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v22 = -1;
  if (v21 < 64) {
    uint64_t v22 = ~(-1 << v21);
  }
  unint64_t v23 = v22 & v20;
  uint64_t v57 = v16;
  uint64_t v58 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
  uint64_t v55 = v16 + 48;
  uint64_t v56 = v16 + 16;
  uint64_t v46 = v10;
  uint64_t v53 = (unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  uint64_t v54 = (void (**)(char *, char *, uint64_t))(v16 + 32);
  int v43 = v61 & 1;
  int64_t v51 = (unint64_t)(v21 + 63) >> 6;
  uint64_t v52 = (uint64_t (**)(char *, uint64_t))(v16 + 8);
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v25 = 0;
  uint64_t v48 = v8;
  uint64_t v49 = a1;
  uint64_t v47 = v9;
  uint64_t v42 = v14;
  while (1)
  {
    if (v23)
    {
      unint64_t v26 = __clz(__rbit64(v23));
      v23 &= v23 - 1;
      int64_t v61 = v25;
      unint64_t v27 = v26 | (v25 << 6);
      goto LABEL_24;
    }
    int64_t v28 = v25 + 1;
    if (__OFADD__(v25, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    uint64_t result = (uint64_t)v59;
    if (v28 >= v51) {
      goto LABEL_29;
    }
    unint64_t v29 = *(void *)(v50 + 8 * v28);
    int64_t v30 = v25 + 1;
    if (!v29)
    {
      int64_t v30 = v25 + 2;
      if (v25 + 2 >= v51) {
        goto LABEL_29;
      }
      unint64_t v29 = *(void *)(v50 + 8 * v30);
      if (!v29)
      {
        int64_t v30 = v25 + 3;
        if (v25 + 3 >= v51) {
          goto LABEL_29;
        }
        unint64_t v29 = *(void *)(v50 + 8 * v30);
        if (!v29)
        {
          int64_t v30 = v25 + 4;
          if (v25 + 4 >= v51) {
            goto LABEL_29;
          }
          unint64_t v29 = *(void *)(v50 + 8 * v30);
          if (!v29) {
            break;
          }
        }
      }
    }
LABEL_23:
    unint64_t v23 = (v29 - 1) & v29;
    int64_t v61 = v30;
    unint64_t v27 = __clz(__rbit64(v29)) + (v30 << 6);
LABEL_24:
    uint64_t v32 = v57;
    uint64_t v33 = v59;
    (*(void (**)(char *, unint64_t, uint64_t))(v57 + 16))(v59, *(void *)(a1 + 48) + *(void *)(v57 + 72) * v27, v15);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v33, 0, 1, v15);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v33, 1, v15) == 1) {
      return swift_release();
    }
    (*v54)(v62, v33, v15);
    sub_100ACD178((uint64_t)v8);
    if ((*v53)(v8, 1, v9) == 1)
    {
      sub_10001DAB4((uint64_t)v8, &qword_10163B9F0);
    }
    else
    {
      sub_1003B6008((uint64_t)v8, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      uint64_t v34 = (uint64_t)v14;
      uint64_t v35 = v44;
      sub_1003B6E14(v34, v44, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      unint64_t v36 = (*(unsigned __int8 *)(v46 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80);
      uint64_t v37 = v60;
      uint64_t v38 = a3;
      uint64_t v39 = v36 + v45;
      uint64_t v40 = swift_allocObject();
      *(void *)(v40 + 16) = v37;
      sub_1003B6008(v35, v40 + v36, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      *(unsigned char *)(v40 + v39) = v43;
      a3 = v38;
      sub_10000588C(&qword_101642820);
      swift_allocObject();
      swift_retain();
      Future.init(_:)();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
      if (*(void *)((*v38 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v38 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
      }
      specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized Array._endMutation()();
      uint64_t v14 = v42;
      sub_1003B61EC((uint64_t)v42, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      uint64_t v8 = v48;
      a1 = v49;
      uint64_t v9 = v47;
    }
    uint64_t result = (*v52)(v62, v15);
    int64_t v25 = v61;
  }
  uint64_t v31 = v25 + 5;
  if (v25 + 5 >= v51)
  {
LABEL_29:
    (*v58)(v59, 1, 1, v15);
    return swift_release();
  }
  unint64_t v29 = *(void *)(v50 + 8 * v31);
  if (v29)
  {
    int64_t v30 = v25 + 5;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v30 = v31 + 1;
    if (__OFADD__(v31, 1)) {
      break;
    }
    if (v30 >= v51) {
      goto LABEL_29;
    }
    unint64_t v29 = *(void *)(v50 + 8 * v30);
    ++v31;
    if (v29) {
      goto LABEL_23;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

void *sub_1003A6B80(uint64_t a1, uint64_t a2)
{
  uint64_t v47 = a2;
  uint64_t v3 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v3 - 8);
  unint64_t v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v6 = *(void *)(v46 - 8);
  uint64_t v7 = __chkstk_darwin(v46);
  uint64_t v40 = (uint64_t)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v38 = (uint64_t)&v36 - v9;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(a1 + 56);
  uint64_t v42 = a1 + 56;
  uint64_t v18 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v19 = -1;
  if (v18 < 64) {
    uint64_t v19 = ~(-1 << v18);
  }
  unint64_t v20 = v19 & v17;
  uint64_t v49 = v11 + 16;
  uint64_t v50 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  uint64_t v48 = v11 + 48;
  uint64_t v45 = (void (**)(char *, char *, uint64_t))(v11 + 32);
  int64_t v43 = (unint64_t)(v18 + 63) >> 6;
  uint64_t v44 = (void (**)(char *, uint64_t))(v11 + 8);
  uint64_t v39 = v6;
  uint64_t v21 = (unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  uint64_t v51 = a1;
  uint64_t result = (void *)swift_bridgeObjectRetain();
  int64_t v23 = 0;
  uint64_t v41 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v20)
    {
      unint64_t v24 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      unint64_t v25 = v24 | (v23 << 6);
      goto LABEL_22;
    }
    int64_t v26 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v26 >= v43) {
      goto LABEL_30;
    }
    unint64_t v27 = *(void *)(v42 + 8 * v26);
    ++v23;
    if (!v27)
    {
      int64_t v23 = v26 + 1;
      if (v26 + 1 >= v43) {
        goto LABEL_30;
      }
      unint64_t v27 = *(void *)(v42 + 8 * v23);
      if (!v27)
      {
        int64_t v23 = v26 + 2;
        if (v26 + 2 >= v43) {
          goto LABEL_30;
        }
        unint64_t v27 = *(void *)(v42 + 8 * v23);
        if (!v27)
        {
          int64_t v23 = v26 + 3;
          if (v26 + 3 >= v43) {
            goto LABEL_30;
          }
          unint64_t v27 = *(void *)(v42 + 8 * v23);
          if (!v27) {
            break;
          }
        }
      }
    }
LABEL_21:
    unint64_t v20 = (v27 - 1) & v27;
    unint64_t v25 = __clz(__rbit64(v27)) + (v23 << 6);
LABEL_22:
    (*(void (**)(char *, unint64_t, uint64_t))(v11 + 16))(v16, *(void *)(v51 + 48) + *(void *)(v11 + 72) * v25, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v16, 0, 1, v10);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v16, 1, v10) == 1) {
      goto LABEL_31;
    }
    (*v45)(v13, v16, v10);
    sub_100ACD178((uint64_t)v5);
    (*v44)(v13, v10);
    if ((*v21)(v5, 1, v46) == 1)
    {
      uint64_t result = (void *)sub_10001DAB4((uint64_t)v5, &qword_10163B9F0);
    }
    else
    {
      uint64_t v37 = type metadata accessor for OwnedBeaconRecord;
      uint64_t v29 = v38;
      sub_1003B6008((uint64_t)v5, v38, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      sub_1003B6008(v29, v40, (uint64_t (*)(void))v37);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v41 = (void *)sub_100A6F6C4(0, v41[2] + 1, 1, (unint64_t)v41);
      }
      unint64_t v31 = v41[2];
      unint64_t v30 = v41[3];
      uint64_t v32 = (uint64_t (*)())(v31 + 1);
      if (v31 >= v30 >> 1)
      {
        uint64_t v37 = (uint64_t (*)())(v31 + 1);
        uint64_t v35 = (void *)sub_100A6F6C4(v30 > 1, v31 + 1, 1, (unint64_t)v41);
        uint64_t v32 = v37;
        uint64_t v41 = v35;
      }
      uint64_t v33 = v40;
      uint64_t v34 = v41;
      v41[2] = v32;
      uint64_t result = (void *)sub_1003B6008(v33, (uint64_t)v34+ ((*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80))+ *(void *)(v39 + 72) * v31, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    }
  }
  int64_t v28 = v26 + 4;
  if (v28 >= v43)
  {
LABEL_30:
    (*v50)(v16, 1, 1, v10);
LABEL_31:
    swift_release();
    return v41;
  }
  unint64_t v27 = *(void *)(v42 + 8 * v28);
  if (v27)
  {
    int64_t v23 = v28;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v23 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v23 >= v43) {
      goto LABEL_30;
    }
    unint64_t v27 = *(void *)(v42 + 8 * v23);
    ++v28;
    if (v27) {
      goto LABEL_21;
    }
  }
LABEL_33:
  __break(1u);
  return result;
}

void *sub_1003A70FC(uint64_t a1, uint64_t a2)
{
  v25[3] = a2;
  uint64_t v4 = sub_10000588C(&qword_1016427F8);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (uint64_t *)((char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v24 = type metadata accessor for AirPodsUnpairData.DeviceUnpairData(0);
  uint64_t v7 = __chkstk_darwin(v24);
  uint64_t v23 = (uint64_t)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v21 - v10;
  uint64_t v12 = *(void *)(a1 + 16);
  if (!v12) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v22 = v9;
  uint64_t v13 = (unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v9 + 48);
  swift_bridgeObjectRetain();
  uint64_t v21 = a1;
  uint64_t v14 = (unint64_t *)(a1 + 40);
  uint64_t v15 = _swiftEmptyArrayStorage;
  do
  {
    uint64_t v16 = *(v14 - 1);
    unint64_t v17 = *v14;
    v25[0] = v16;
    v25[1] = v17;
    sub_1000361E0(v16, v17);
    sub_1003832DC(v25, v6);
    if (v2)
    {
      sub_10001CFB8(v16, v17);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v15;
    }
    sub_10001CFB8(v16, v17);
    if ((*v13)(v6, 1, v24) == 1)
    {
      sub_10001DAB4((uint64_t)v6, &qword_1016427F8);
    }
    else
    {
      sub_1003B6008((uint64_t)v6, (uint64_t)v11, type metadata accessor for AirPodsUnpairData.DeviceUnpairData);
      sub_1003B6008((uint64_t)v11, v23, type metadata accessor for AirPodsUnpairData.DeviceUnpairData);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v15 = (void *)sub_100A70304(0, v15[2] + 1, 1, (unint64_t)v15);
      }
      unint64_t v19 = v15[2];
      unint64_t v18 = v15[3];
      if (v19 >= v18 >> 1) {
        uint64_t v15 = (void *)sub_100A70304(v18 > 1, v19 + 1, 1, (unint64_t)v15);
      }
      v15[2] = v19 + 1;
      sub_1003B6008(v23, (uint64_t)v15+ ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80))+ *(void *)(v22 + 72) * v19, type metadata accessor for AirPodsUnpairData.DeviceUnpairData);
    }
    v14 += 2;
    --v12;
  }
  while (v12);
  swift_bridgeObjectRelease();
  return v15;
}

void *sub_1003A73D8(uint64_t a1, uint64_t a2)
{
  uint64_t v41 = a2;
  uint64_t v40 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v40 - 8);
  uint64_t v5 = __chkstk_darwin(v40);
  uint64_t v38 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v37 = (char *)v30 - v8;
  uint64_t v39 = v9;
  __chkstk_darwin(v7);
  uint64_t v36 = (char *)v30 - v10;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t result = _swiftEmptyArrayStorage;
  if (v11)
  {
    v30[0] = v2;
    uint64_t v45 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t result = (void *)sub_10115FE18(a1);
    uint64_t v14 = (uint64_t)result;
    int v16 = v15 & 1;
    uint64_t v34 = a1;
    uint64_t v35 = a1 + 56;
    uint64_t v32 = v4 + 32;
    uint64_t v33 = v4 + 16;
    v30[1] = v4 + 8;
    uint64_t v31 = v4;
    unint64_t v17 = v37;
    unint64_t v18 = v38;
    while ((v14 & 0x8000000000000000) == 0 && v14 < 1 << *(unsigned char *)(a1 + 32))
    {
      if (((*(void *)(v35 + (((unint64_t)v14 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
        goto LABEL_11;
      }
      if (*(_DWORD *)(a1 + 36) != v13) {
        goto LABEL_12;
      }
      uint64_t v19 = *(void *)(a1 + 48);
      uint64_t v20 = *(void *)(v4 + 72);
      uint64_t v43 = v13;
      uint64_t v44 = v11;
      uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
      uint64_t v22 = v36;
      uint64_t v23 = v40;
      int v42 = v16;
      v21(v36, v19 + v20 * v14, v40);
      uint64_t v24 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
      v24(v17, v22, v23);
      v21(v18, (uint64_t)v17, v23);
      unint64_t v25 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
      uint64_t v26 = swift_allocObject();
      *(void *)(v26 + 16) = v41;
      v24((char *)(v26 + v25), v18, v23);
      sub_10000588C(&qword_101642758);
      swift_allocObject();
      uint64_t v4 = v31;
      swift_retain();
      Future.init(_:)();
      uint64_t v27 = v23;
      uint64_t v28 = v44;
      (*(void (**)(char *, uint64_t))(v4 + 8))(v17, v27);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      a1 = v34;
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      uint64_t result = (void *)sub_10052CB9C(v14, v43, v42 & 1, a1);
      uint64_t v14 = (uint64_t)result;
      int v16 = v29 & 1;
      uint64_t v11 = v28 - 1;
      if (!v11)
      {
        sub_1001A1CB8((uint64_t)result, v13, v16);
        return v45;
      }
    }
    __break(1u);
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
  }
  return result;
}

uint64_t sub_1003A7718()
{
  uint64_t v1 = type metadata accessor for OSSignpostID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v25 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v3 = (v25 + 16) & ~v25;
  unint64_t v4 = (v3 + *(void *)(v2 + 64)) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v6 = *(unsigned __int8 *)(*((void *)v5 - 1) + 80);
  uint64_t v24 = *(void *)(*((void *)v5 - 1) + 64);
  uint64_t v7 = v0 + v3;
  uint64_t v8 = (v4 + v6 + 16) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v7, v1);
  swift_release();
  uint64_t v9 = v0 + v8;
  sub_10001CFB8(*(void *)(v0 + v8), *(void *)(v0 + v8 + 8));
  uint64_t v10 = v0 + v8 + v5[5];
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  v13(v10, v11);
  uint64_t v14 = v0 + v8 + v5[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v13(v14, v11);
      uint64_t v23 = (v4 + v6 + 16) & ~v6;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v13(v14, v11);
      uint64_t v23 = (v4 + v6 + 16) & ~v6;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v8 = v23;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v15 = v9 + v5[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v15, 1, v11)) {
    v13(v15, v11);
  }
  uint64_t v16 = v9 + v5[8];
  uint64_t v17 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(v16, v17);
  sub_10001CFB8(*(void *)(v9 + v5[9]), *(void *)(v9 + v5[9] + 8));
  unint64_t v18 = (uint64_t *)(v9 + v5[10]);
  unint64_t v19 = v18[1];
  if (v19 >> 60 != 15) {
    sub_10001CFB8(*v18, v19);
  }
  uint64_t v20 = (uint64_t *)(v9 + v5[11]);
  unint64_t v21 = v20[1];
  if (v21 >> 60 != 15) {
    sub_10001CFB8(*v20, v21);
  }
  sub_10001CFB8(*(void *)(v9 + v5[12]), *(void *)(v9 + v5[12] + 8));
  sub_10001CFB8(*(void *)(v9 + v5[13]), *(void *)(v9 + v5[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, ((((((v8 + v24) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v25 | v6 | 7);
}

uint64_t sub_1003A7B5C(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for OSSignpostID() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = v4 + *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  unint64_t v7 = ((v5 & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v8 = v7 + *(void *)(v6 + 64);
  return sub_10038A2AC(a1, v1 + v4, *(unsigned char *)(v1 + v5), *(void *)((v5 & 0xFFFFFFFFFFFFFFF8) + v1 + 8), v1 + v7, *(unsigned __int8 *)(v1 + v8), *(uint64_t (**)(uint64_t))((v8 & 0xFFFFFFFFFFFFFFF8) + v1 + 8), *(void *)((v8 & 0xFFFFFFFFFFFFFFF8) + v1 + 16), *(void *)(v1 + (((v8 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v1 + (((((v8 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_1003A7C94()
{
  return sub_10038A974();
}

uint64_t sub_1003A7C9C()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1003A7CD4()
{
  uint64_t v1 = type metadata accessor for OSSignpostID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v25 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v3 = (v25 + 16) & ~v25;
  unint64_t v4 = (((((v3 + *(void *)(v2 + 64)) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v6 = *(unsigned __int8 *)(*((void *)v5 - 1) + 80);
  uint64_t v24 = *(void *)(*((void *)v5 - 1) + 64);
  uint64_t v7 = v0 + v3;
  uint64_t v8 = (v6 + v4 + 8) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v7, v1);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v9 = v0 + v8;
  sub_10001CFB8(*(void *)(v0 + v8), *(void *)(v0 + v8 + 8));
  uint64_t v10 = v0 + v8 + v5[5];
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  v13(v10, v11);
  uint64_t v14 = v0 + v8 + v5[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v13(v14, v11);
      uint64_t v23 = v8;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v13(v14, v11);
      uint64_t v23 = v8;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v8 = v23;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v15 = v9 + v5[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v15, 1, v11)) {
    v13(v15, v11);
  }
  uint64_t v16 = v9 + v5[8];
  uint64_t v17 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(v16, v17);
  sub_10001CFB8(*(void *)(v9 + v5[9]), *(void *)(v9 + v5[9] + 8));
  unint64_t v18 = (uint64_t *)(v9 + v5[10]);
  unint64_t v19 = v18[1];
  if (v19 >> 60 != 15) {
    sub_10001CFB8(*v18, v19);
  }
  uint64_t v20 = (uint64_t *)(v9 + v5[11]);
  unint64_t v21 = v20[1];
  if (v21 >> 60 != 15) {
    sub_10001CFB8(*v20, v21);
  }
  sub_10001CFB8(*(void *)(v9 + v5[12]), *(void *)(v9 + v5[12] + 8));
  sub_10001CFB8(*(void *)(v9 + v5[13]), *(void *)(v9 + v5[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, ((v24 + v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v25 | v6 | 7);
}

uint64_t sub_1003A8118(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for OSSignpostID() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = v6 + *(void *)(v5 + 64);
  uint64_t v8 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  return sub_10038A694(a1, a2, v2 + v6, *(unsigned char *)(v2 + v7), *(void (**)(uint64_t))((v7 & 0xFFFFFFFFFFFFFFF8) + v2 + 8), *(void *)((v7 & 0xFFFFFFFFFFFFFFF8) + v2 + 16), *(void *)(v2 + (((v7 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v2 + (((((v7 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)), v2+ ((*(unsigned __int8 *)(v8 + 80)+ (((((v7 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)+ 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)));
}

uint64_t sub_1003A825C()
{
  uint64_t v1 = type metadata accessor for OSSignpostID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1003A8308(uint64_t a1)
{
  type metadata accessor for OSSignpostID();

  return sub_10038A0FC(a1);
}

id sub_1003A83B4@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  id result = sub_100398B08(v1 + ((*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)), *(char **)(*(void *)(v1 + 16) + 280));
  *a1 = result;
  return result;
}

uint64_t sub_1003A8424()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100033F68;
  return sub_10119781C(v2, v3);
}

uint64_t sub_1003A84BC()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100033F68;
  return sub_101197EF8(v0);
}

uint64_t sub_1003A854C@<X0>(uint64_t *a1@<X8>)
{
  return sub_100AB2C04(a1);
}

uint64_t sub_1003A856C(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100033F68;
  return sub_100AF6ACC(a1, v4, v1 + 24);
}

uint64_t sub_1003A861C@<X0>(uint64_t a1@<X8>)
{
  return sub_100AE2A38(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_1003A863C(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100033F68;
  return sub_100AF6B80(a1, v4, v1 + 24);
}

uint64_t sub_1003A86F0(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for SharedBeaconRecord(0) - 8);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_100033F68;
  return sub_100AF7070(a1, v5, v6);
}

uint64_t sub_1003A87D8()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v19 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v4 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v5 = v0 + v3 + v1[5];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  uint64_t v9 = v0 + v3 + v1[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 32) & ~v2;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 32) & ~v2;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v3 = v18;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v10 = v4 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6)) {
    v8(v10, v6);
  }
  uint64_t v11 = v4 + v1[8];
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  sub_10001CFB8(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v13 = (uint64_t *)(v4 + v1[10]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_10001CFB8(*v13, v14);
  }
  uint64_t v15 = (uint64_t *)(v4 + v1[11]);
  unint64_t v16 = v15[1];
  if (v16 >> 60 != 15) {
    sub_10001CFB8(*v15, v16);
  }
  sub_10001CFB8(*(void *)(v4 + v1[12]), *(void *)(v4 + v1[12] + 8));
  sub_10001CFB8(*(void *)(v4 + v1[13]), *(void *)(v4 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, ((v19 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 9, v2 | 7);
}

uint64_t sub_1003A8B70(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void (**)(uint64_t))(v1 + 16);
  uint64_t v6 = *(void (**)(uint64_t))(v1 + 24);
  uint64_t v7 = v1 + v4;
  uint64_t v8 = v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = *(void *)v8;
  int v10 = *(unsigned __int8 *)(v8 + 8);

  return sub_10038965C(a1, v5, v6, v7, v9, v10);
}

uint64_t sub_1003A8C18()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v19 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v4 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v5 = v0 + v3 + v1[5];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  uint64_t v9 = v0 + v3 + v1[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 16) & ~v2;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 16) & ~v2;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v3 = v18;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v10 = v4 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6)) {
    v8(v10, v6);
  }
  uint64_t v11 = v4 + v1[8];
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  sub_10001CFB8(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v13 = (uint64_t *)(v4 + v1[10]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_10001CFB8(*v13, v14);
  }
  uint64_t v15 = (uint64_t *)(v4 + v1[11]);
  unint64_t v16 = v15[1];
  if (v16 >> 60 != 15) {
    sub_10001CFB8(*v15, v16);
  }
  sub_10001CFB8(*(void *)(v4 + v1[12]), *(void *)(v4 + v1[12] + 8));
  sub_10001CFB8(*(void *)(v4 + v1[13]), *(void *)(v4 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, ((((v3 + v19) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_1003A8FBC(char *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = v4 + *(void *)(v3 + 64);
  uint64_t v6 = v1 + v4;
  char v7 = *(unsigned char *)(v1 + v5);
  uint64_t v8 = *(void *)((v5 & 0xFFFFFFFFFFFFFFF8) + v1 + 8);
  uint64_t v9 = (void (**)(uint64_t))(v1 + (((v5 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];

  return sub_100389ABC(a1, v6, v7, v8, v10, v11);
}

uint64_t sub_1003A906C()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v19 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v4 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v5 = v0 + v3 + v1[5];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  uint64_t v9 = v0 + v3 + v1[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 16) & ~v2;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 16) & ~v2;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v3 = v18;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v10 = v4 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6)) {
    v8(v10, v6);
  }
  uint64_t v11 = v4 + v1[8];
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  sub_10001CFB8(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v13 = (uint64_t *)(v4 + v1[10]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_10001CFB8(*v13, v14);
  }
  uint64_t v15 = (uint64_t *)(v4 + v1[11]);
  unint64_t v16 = v15[1];
  if (v16 >> 60 != 15) {
    sub_10001CFB8(*v15, v16);
  }
  sub_10001CFB8(*(void *)(v4 + v1[12]), *(void *)(v4 + v1[12] + 8));
  sub_10001CFB8(*(void *)(v4 + v1[13]), *(void *)(v4 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_errorRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, ((((((v3 + v19) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_1003A9420(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = v4 + *(void *)(v3 + 64);
  unint64_t v6 = ((v5 & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  char v7 = *(unsigned char *)(v1 + v5);
  uint64_t v8 = *(void *)((v5 & 0xFFFFFFFFFFFFFFF8) + v1 + 8);
  uint64_t v9 = *(void (**)(uint64_t))(v1 + v6);
  uint64_t v10 = *(void (**)(uint64_t))(v1 + v6 + 8);

  return sub_100389D04(a1, v1 + v4, v7, v8, v9, v10);
}

uint64_t sub_1003A94E4()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_1003A951C(int a1, char a2)
{
  sub_100DBBAF4(a1, a2 & 1, *(dispatch_group_t *)(v2 + 16));
}

uint64_t sub_1003A9534()
{
  uint64_t v2 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  unint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *unint64_t v5 = v1;
  v5[1] = sub_100033F68;
  v5[22] = v3;
  v5[23] = v4;
  return _swift_task_switch(sub_10038C044, 0, 0);
}

uint64_t sub_1003A961C@<X0>(uint64_t a1@<X8>)
{
  return sub_100B68B6C(*(char **)(v1 + 24), *(void *)(v1 + 32), a1);
}

uint64_t sub_1003A9640(uint64_t *a1)
{
  return sub_1003B171C(a1, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10039184C);
}

uint64_t sub_1003A9670()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v19 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  swift_release();
  uint64_t v4 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v5 = v0 + v3 + v1[5];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  uint64_t v9 = v0 + v3 + v1[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 32) & ~v2;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 32) & ~v2;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v3 = v18;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v10 = v4 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6)) {
    v8(v10, v6);
  }
  uint64_t v11 = v4 + v1[8];
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  sub_10001CFB8(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v13 = (uint64_t *)(v4 + v1[10]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_10001CFB8(*v13, v14);
  }
  uint64_t v15 = (uint64_t *)(v4 + v1[11]);
  unint64_t v16 = v15[1];
  if (v16 >> 60 != 15) {
    sub_10001CFB8(*v15, v16);
  }
  sub_10001CFB8(*(void *)(v4 + v1[12]), *(void *)(v4 + v1[12] + 8));
  sub_10001CFB8(*(void *)(v4 + v1[13]), *(void *)(v4 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, ((v19 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_1003A9A14(uint64_t a1)
{
  return sub_1003B1AC0(a1, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord, (void (*)(void))type metadata accessor for OwnedBeaconRecord);
}

uint64_t sub_1003A9A40(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_1016426E8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003A9AA8@<X0>(void *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  id v12 = [a1 ecid];
  if (!v12)
  {
    static os_log_type_t.error.getter();
    if (qword_1016372A8 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    goto LABEL_23;
  }
  uint64_t v13 = v12;
  uint64_t v14 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v16 = v15;

  id v17 = [a1 chipId];
  if (!v17)
  {
    static os_log_type_t.error.getter();
    if (qword_1016372A8 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    goto LABEL_21;
  }
  uint64_t v18 = v17;
  uint64_t v62 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v63 = v19;

  id v20 = [a1 serialNumber];
  if (!v20)
  {
    static os_log_type_t.error.getter();
    if (qword_1016372A8 == -1) {
      goto LABEL_19;
    }
    goto LABEL_39;
  }
  unint64_t v21 = v20;
  uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v23 = v22;

  id v24 = [a1 systemVersion];
  if (!v24)
  {
    swift_bridgeObjectRelease();
    static os_log_type_t.error.getter();
    if (qword_1016372A8 == -1)
    {
LABEL_19:
      os_log(_:dso:log:_:_:)();
LABEL_20:
      sub_10001CFB8(v62, v63);
LABEL_21:
      uint64_t v45 = v14;
      unint64_t v46 = v16;
LABEL_22:
      sub_10001CFB8(v45, v46);
LABEL_23:
      sub_1003B5540(&v64);
      goto LABEL_24;
    }
LABEL_39:
    swift_once();
    goto LABEL_19;
  }
  uint64_t v25 = v24;
  unint64_t v61 = v16;
  uint64_t v56 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v27 = v26;

  id v28 = [a1 payloadSignature];
  if (!v28)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    static os_log_type_t.error.getter();
    if (qword_1016372A8 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    goto LABEL_28;
  }
  char v29 = v28;
  uint64_t v57 = v27;
  uint64_t v58 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v59 = v30;

  id v31 = [a1 attestation];
  if (!v31)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    static os_log_type_t.error.getter();
    unint64_t v16 = v61;
    if (qword_1016372A8 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    goto LABEL_35;
  }
  uint64_t v32 = v31;
  uint64_t v54 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v55 = v33;

  id v34 = [a1 systemPublicKey];
  unint64_t v16 = v61;
  if (!v34)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    static os_log_type_t.error.getter();
    if (qword_1016372A8 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_10001CFB8(v54, v55);
LABEL_35:
    sub_10001CFB8(v58, v59);
    goto LABEL_20;
  }
  uint64_t v35 = v34;
  uint64_t v36 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v53 = v37;

  id v38 = [a1 refKeyPublicKey];
  if (!v38)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    static os_log_type_t.error.getter();
    if (qword_1016372A8 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_10001CFB8(v36, v53);
    sub_10001CFB8(v54, v55);
    sub_10001CFB8(v58, v59);
LABEL_28:
    sub_10001CFB8(v62, v63);
    uint64_t v45 = v14;
    unint64_t v46 = v61;
    goto LABEL_22;
  }
  uint64_t v39 = v38;
  uint64_t v40 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v51 = v41;
  uint64_t v52 = v40;

  id v50 = [a1 productId];
  id v49 = [a1 vendorId];
  id v42 = [a1 nonce];
  uint64_t v43 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v48 = v44;

  *(void *)&long long v64 = v14;
  *((void *)&v64 + 1) = v61;
  uint64_t v65 = v62;
  unint64_t v66 = v63;
  uint64_t v67 = v60;
  uint64_t v68 = v23;
  id v69 = v50;
  id v70 = v49;
  uint64_t v71 = v56;
  uint64_t v72 = v57;
  uint64_t v73 = v58;
  unint64_t v74 = v59;
  uint64_t v75 = v54;
  unint64_t v76 = v55;
  uint64_t v77 = v36;
  unint64_t v78 = v53;
  uint64_t v79 = v52;
  uint64_t v80 = v51;
  uint64_t v81 = v43;
  uint64_t v82 = v48;
  uint64_t v83 = a2;
  unint64_t v84 = a3;
  uint64_t v85 = a4;
  unint64_t v86 = a5;
  SharingCircleWildAdvertisementKey.init(key:)(&v64);
  sub_1000361E0(a2, a3);
  sub_1000361E0(a4, a5);
LABEL_24:
  sub_10001D608((uint64_t)&v64, (uint64_t)v87, &qword_1016428F8);
  return sub_10001D608((uint64_t)v87, a6, &qword_1016428F8);
}

uint64_t sub_1003AA18C(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v6 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v77 = *(void *)(v6 - 8);
  uint64_t v78 = v6;
  uint64_t v7 = __chkstk_darwin(v6);
  unint64_t v76 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v75 = (char *)&v69 - v9;
  uint64_t v10 = type metadata accessor for OwnedBeaconRecord();
  *(void *)&long long v83 = *(void *)(v10 - 8);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v79 = v12;
  uint64_t v80 = (uint64_t)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v69 - v13;
  uint64_t v86 = swift_allocObject();
  *(void *)(v86 + 16) = a3;
  dispatch_group_t v85 = a3;
  static os_log_type_t.default.getter();
  if (qword_1016372A8 != -1) {
    swift_once();
  }
  uint64_t v84 = sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_101347BA0;
  uint64_t v88 = *a2;
  sub_10000588C(&qword_1016428B0);
  unint64_t v16 = a2;
  uint64_t v17 = String.init<A>(describing:)();
  uint64_t v19 = v18;
  *(void *)(v15 + 56) = &type metadata for String;
  unint64_t v20 = sub_10000B4CC();
  *(void *)(v15 + 32) = v17;
  *(void *)(v15 + 40) = v19;
  unint64_t v21 = v20;
  *(void *)(v15 + 96) = &type metadata for String;
  *(void *)(v15 + 104) = v20;
  *(void *)(v15 + 64) = v20;
  *(void *)(v15 + 72) = 0xD000000000000038;
  *(void *)(v15 + 80) = 0x80000001013F9C70;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v81 = v16;
  uint64_t v22 = sub_100ACF5FC();
  uint64_t v23 = *((void *)v22 + 2);
  if (v23)
  {
    unint64_t v82 = v21;
    uint64_t v24 = *(unsigned __int8 *)(v83 + 80);
    uint64_t v25 = (uint64_t)&v22[(v24 + 32) & ~v24];
    uint64_t v26 = *(void *)(v83 + 72);
    uint64_t v27 = v86;
    while (1)
    {
      sub_1003B6E14(v25, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      if (sub_101113BD4((uint64_t)&v14[*(int *)(v10 + 24)], a1)) {
        break;
      }
      sub_1003B61EC((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      v25 += v26;
      if (!--v23) {
        goto LABEL_7;
      }
    }
    uint64_t v74 = ~v24;
    swift_bridgeObjectRelease();
    static os_log_type_t.default.getter();
    uint64_t v28 = swift_allocObject();
    long long v83 = xmmword_101342130;
    *(_OWORD *)(v28 + 16) = xmmword_101342130;
    char v29 = &v14[*(int *)(v10 + 20)];
    uint64_t v30 = type metadata accessor for UUID();
    sub_100394110((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v32 = v82;
    *(void *)(v28 + 56) = &type metadata for String;
    *(void *)(v28 + 64) = v32;
    *(void *)(v28 + 32) = v31;
    *(void *)(v28 + 40) = v33;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    uint64_t v34 = swift_allocObject();
    *(void *)(v34 + 16) = sub_1003B44B8;
    *(void *)(v34 + 24) = v27;
    uint64_t v72 = v34;
    swift_retain_n();
    static os_log_type_t.default.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    uint64_t v73 = v24;
    uint64_t v35 = swift_allocObject();
    *(_OWORD *)(v35 + 16) = v83;
    uint64_t v70 = v30;
    uint64_t v71 = v29;
    uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v37 = v82;
    *(void *)(v35 + 56) = &type metadata for String;
    *(void *)(v35 + 64) = v37;
    *(void *)(v35 + 32) = v36;
    *(void *)(v35 + 40) = v38;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    uint64_t v39 = v75;
    static SystemInfo.lockState.getter();
    uint64_t v41 = v76;
    uint64_t v40 = v77;
    uint64_t v42 = v78;
    (*(void (**)(char *, void, uint64_t))(v77 + 104))(v76, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v78);
    sub_100394110((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    uint64_t v44 = v87;
    uint64_t v43 = v88;
    uint64_t v45 = *(void (**)(char *, uint64_t))(v40 + 8);
    v45(v41, v42);
    v45(v39, v42);
    if (v43 == v44)
    {
      static os_log_type_t.default.getter();
      os_log(_:dso:log:_:_:)();
      sub_10009FD9C();
      uint64_t v46 = swift_allocError();
      *uint64_t v47 = 0;
      swift_errorRetain();
      static os_log_type_t.error.getter();
      uint64_t v48 = swift_allocObject();
      *(_OWORD *)(v48 + 16) = v83;
      uint64_t v88 = v46;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v49 = String.init<A>(describing:)();
      unint64_t v50 = v82;
      *(void *)(v48 + 56) = &type metadata for String;
      *(void *)(v48 + 64) = v50;
      *(void *)(v48 + 32) = v49;
      *(void *)(v48 + 40) = v51;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      dispatch_group_leave(v85);
      swift_errorRelease();
    }
    uint64_t v52 = dispatch_group_create();
    dispatch_group_enter(v52);
    sub_10000588C(&qword_10163BC50);
    uint64_t v53 = v70;
    uint64_t v54 = *(void *)(v70 - 8);
    unint64_t v55 = (*(unsigned __int8 *)(v54 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80);
    uint64_t v56 = swift_allocObject();
    *(_OWORD *)(v56 + 16) = v83;
    (*(void (**)(unint64_t, char *, uint64_t))(v54 + 16))(v56 + v55, v71, v53);
    uint64_t v57 = swift_allocObject();
    *(void *)(v57 + 16) = v52;
    uint64_t v58 = v52;
    unint64_t v59 = v81;
    sub_100A07010(v56, (uint64_t)sub_1003B7AE8, v57);
    swift_bridgeObjectRelease();
    swift_release();
    OS_dispatch_group.wait()();
    uint64_t v60 = v80;
    sub_1003B6E14((uint64_t)v14, v80, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v61 = (v73 + 16) & v74;
    unint64_t v62 = (v79 + v61 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v63 = (v62 + 23) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v64 = swift_allocObject();
    sub_1003B6008(v60, v64 + v61, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v65 = (uint64_t (**)(uint64_t))(v64 + v62);
    unint64_t v66 = (uint64_t (*)(uint64_t))v72;
    void *v65 = sub_1003B44C0;
    v65[1] = v66;
    unint64_t v67 = v64 + v63;
    *(void *)unint64_t v67 = v59;
    *(_WORD *)(v67 + 8) = 257;
    swift_retain();
    swift_retain();
    sub_10038F420((uint64_t)v14, (void (*)(void))sub_1003A952C, v64);
    swift_release();
    swift_release();
    swift_release();

    sub_1003B61EC((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  }
  else
  {
LABEL_7:
    swift_bridgeObjectRelease();
    dispatch_group_leave(v85);
  }
  return swift_release();
}

uint64_t sub_1003AAADC(uint64_t a1, uint64_t *a2, void *a3)
{
  uint64_t v6 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v77 = *(void *)(v6 - 8);
  uint64_t v78 = v6;
  uint64_t v7 = __chkstk_darwin(v6);
  unint64_t v76 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v75 = (char *)&v69 - v9;
  uint64_t v10 = type metadata accessor for OwnedBeaconRecord();
  *(void *)&long long v83 = *(void *)(v10 - 8);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v79 = v12;
  uint64_t v80 = (uint64_t)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v69 - v13;
  uint64_t v86 = swift_allocObject();
  *(void *)(v86 + 16) = a3;
  dispatch_group_t v85 = a3;
  static os_log_type_t.default.getter();
  if (qword_1016372A8 != -1) {
    swift_once();
  }
  uint64_t v84 = sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_101347BA0;
  uint64_t v88 = *a2;
  sub_10000588C(&qword_1016428B0);
  unint64_t v16 = a2;
  uint64_t v17 = String.init<A>(describing:)();
  uint64_t v19 = v18;
  *(void *)(v15 + 56) = &type metadata for String;
  unint64_t v20 = sub_10000B4CC();
  *(void *)(v15 + 32) = v17;
  *(void *)(v15 + 40) = v19;
  unint64_t v21 = v20;
  *(void *)(v15 + 96) = &type metadata for String;
  *(void *)(v15 + 104) = v20;
  *(void *)(v15 + 64) = v20;
  *(void *)(v15 + 72) = 0xD000000000000038;
  *(void *)(v15 + 80) = 0x80000001013F9C70;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v81 = v16;
  uint64_t v22 = sub_100ACF5FC();
  uint64_t v23 = *((void *)v22 + 2);
  if (v23)
  {
    unint64_t v82 = v21;
    uint64_t v24 = *(unsigned __int8 *)(v83 + 80);
    uint64_t v25 = (uint64_t)&v22[(v24 + 32) & ~v24];
    uint64_t v26 = *(void *)(v83 + 72);
    uint64_t v27 = v86;
    while (1)
    {
      sub_1003B6E14(v25, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      if (sub_101113BD4((uint64_t)&v14[*(int *)(v10 + 24)], a1)) {
        break;
      }
      sub_1003B61EC((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      v25 += v26;
      if (!--v23) {
        goto LABEL_7;
      }
    }
    uint64_t v74 = ~v24;
    swift_bridgeObjectRelease();
    static os_log_type_t.default.getter();
    uint64_t v28 = swift_allocObject();
    long long v83 = xmmword_101342130;
    *(_OWORD *)(v28 + 16) = xmmword_101342130;
    char v29 = &v14[*(int *)(v10 + 20)];
    uint64_t v30 = type metadata accessor for UUID();
    sub_100394110((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v32 = v82;
    *(void *)(v28 + 56) = &type metadata for String;
    *(void *)(v28 + 64) = v32;
    *(void *)(v28 + 32) = v31;
    *(void *)(v28 + 40) = v33;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    uint64_t v34 = swift_allocObject();
    *(void *)(v34 + 16) = sub_1003B637C;
    *(void *)(v34 + 24) = v27;
    uint64_t v72 = v34;
    swift_retain_n();
    static os_log_type_t.default.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    uint64_t v73 = v24;
    uint64_t v35 = swift_allocObject();
    *(_OWORD *)(v35 + 16) = v83;
    uint64_t v70 = v30;
    uint64_t v71 = v29;
    uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v37 = v82;
    *(void *)(v35 + 56) = &type metadata for String;
    *(void *)(v35 + 64) = v37;
    *(void *)(v35 + 32) = v36;
    *(void *)(v35 + 40) = v38;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    uint64_t v39 = v75;
    static SystemInfo.lockState.getter();
    uint64_t v41 = v76;
    uint64_t v40 = v77;
    uint64_t v42 = v78;
    (*(void (**)(char *, void, uint64_t))(v77 + 104))(v76, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v78);
    sub_100394110((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    uint64_t v44 = v87;
    uint64_t v43 = v88;
    uint64_t v45 = *(void (**)(char *, uint64_t))(v40 + 8);
    v45(v41, v42);
    v45(v39, v42);
    if (v43 == v44)
    {
      static os_log_type_t.default.getter();
      os_log(_:dso:log:_:_:)();
      sub_10009FD9C();
      uint64_t v46 = swift_allocError();
      *uint64_t v47 = 0;
      swift_errorRetain();
      static os_log_type_t.error.getter();
      uint64_t v48 = swift_allocObject();
      *(_OWORD *)(v48 + 16) = v83;
      uint64_t v88 = v46;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v49 = String.init<A>(describing:)();
      unint64_t v50 = v82;
      *(void *)(v48 + 56) = &type metadata for String;
      *(void *)(v48 + 64) = v50;
      *(void *)(v48 + 32) = v49;
      *(void *)(v48 + 40) = v51;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      dispatch_group_leave(v85);
      swift_errorRelease();
    }
    uint64_t v52 = dispatch_group_create();
    dispatch_group_enter(v52);
    sub_10000588C(&qword_10163BC50);
    uint64_t v53 = v70;
    uint64_t v54 = *(void *)(v70 - 8);
    unint64_t v55 = (*(unsigned __int8 *)(v54 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80);
    uint64_t v56 = swift_allocObject();
    *(_OWORD *)(v56 + 16) = v83;
    (*(void (**)(unint64_t, char *, uint64_t))(v54 + 16))(v56 + v55, v71, v53);
    uint64_t v57 = swift_allocObject();
    *(void *)(v57 + 16) = v52;
    uint64_t v58 = v52;
    unint64_t v59 = v81;
    sub_100A07010(v56, (uint64_t)sub_1003B7AE8, v57);
    swift_bridgeObjectRelease();
    swift_release();
    OS_dispatch_group.wait()();
    uint64_t v60 = v80;
    sub_1003B6E14((uint64_t)v14, v80, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v61 = (v73 + 16) & v74;
    unint64_t v62 = (v79 + v61 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v63 = (v62 + 23) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v64 = swift_allocObject();
    sub_1003B6008(v60, v64 + v61, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v65 = (void *)(v64 + v62);
    uint64_t v66 = v72;
    void *v65 = sub_1003B7BEC;
    v65[1] = v66;
    unint64_t v67 = v64 + v63;
    *(void *)unint64_t v67 = v59;
    *(_WORD *)(v67 + 8) = 257;
    swift_retain();
    swift_retain();
    sub_10038F420((uint64_t)v14, (void (*)(void))sub_1003A952C, v64);
    swift_release();
    swift_release();
    swift_release();

    sub_1003B61EC((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  }
  else
  {
LABEL_7:
    swift_bridgeObjectRelease();
    dispatch_group_leave(v85);
  }
  return swift_release();
}

uint64_t sub_1003AB42C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v37 = a3;
  uint64_t v45 = a2;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v43 = *(void *)(v4 - 8);
  uint64_t v44 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v41 = *(void *)(v7 - 8);
  uint64_t v42 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v38 = *(void *)(v14 - 8);
  uint64_t v39 = v14;
  __chkstk_darwin(v14);
  uint64_t v36 = (uint64_t)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000588C(&qword_10163B9F0);
  uint64_t v17 = __chkstk_darwin(v16 - 8);
  uint64_t v19 = (char *)&v36 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  unint64_t v40 = (unint64_t)&v36 - v20;
  uint64_t v46 = a1;
  unint64_t v21 = *(void **)(a1 + 280);
  sub_100AB24F0();
  QueueSynchronizer.conditionalSync<A>(_:)();
  swift_release();
  if (LOBYTE(aBlock[0]) != 1) {
    goto LABEL_9;
  }
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  char v22 = sub_1010AB668(aBlock[0]);
  swift_bridgeObjectRelease();
  if (v22)
  {
    uint64_t v23 = (void *)swift_allocObject();
    uint64_t v24 = v46;
    uint64_t v25 = v37;
    v23[2] = v45;
    v23[3] = v25;
    v23[4] = v24;
    swift_retain();
    swift_retain();
    swift_retain();
    static os_log_type_t.default.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    uint64_t v27 = v40;
    sub_100AFE7F0((uint64_t)v21, (uint64_t)sub_1003B6508, (unint64_t)v23, v40);
    sub_10001D074(v27, (uint64_t)v19, &qword_10163B9F0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v19, 1, v39) == 1)
    {
      sub_10001DAB4(v27, &qword_10163B9F0);
      uint64_t v28 = (uint64_t)v19;
    }
    else
    {
      uint64_t v34 = v36;
      sub_1003B6008((uint64_t)v19, v36, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      swift_retain();
      swift_retain();
      sub_100B3B370(v34, 0, v21, (uint64_t)v21, (uint64_t)sub_1003B6508, (uint64_t)v23);
      swift_release();
      swift_release();
      sub_1003B61EC(v34, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      uint64_t v28 = v27;
    }
    sub_10001DAB4(v28, &qword_10163B9F0);
  }
  else
  {
LABEL_9:
    static os_log_type_t.default.getter();
    if (qword_1016372A8 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
    (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, enum case for DispatchQoS.QoSClass.default(_:), v10);
    char v29 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    uint64_t v30 = swift_allocObject();
    uint64_t v31 = v45;
    *(void *)(v30 + 16) = v46;
    *(void *)(v30 + 24) = v31;
    aBlock[4] = (uint64_t)sub_1003B64B4;
    aBlock[5] = v30;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1004B5480;
    aBlock[3] = (uint64_t)&unk_1015BD370;
    unint64_t v32 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v47 = _swiftEmptyArrayStorage;
    sub_100394110((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v33 = v44;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v32);

    (*(void (**)(char *, uint64_t))(v43 + 8))(v6, v33);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v9, v42);
  }
  return swift_release();
}

uint64_t sub_1003ABBD0(uint64_t a1, int a2, uint64_t a3, void (*a4)(uint64_t, uint64_t), uint64_t a5)
{
  int v89 = a2;
  uint64_t v9 = type metadata accessor for ShareRecord();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9 - 8);
  uint64_t v12 = (char *)v74 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v87 = *(void *)(v13 - 8);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v86 = (char *)v74 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  dispatch_group_t v85 = (char *)v74 - v16;
  uint64_t v17 = type metadata accessor for OwnedBeaconRecord();
  *(void *)&long long v91 = *(void *)(v17 - 8);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v90 = (uint64_t)v74 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v96 = (uint64_t)v74 - v21;
  uint64_t v94 = v22;
  __chkstk_darwin(v20);
  uint64_t v24 = (char *)v74 - v23;
  uint64_t v25 = swift_allocObject();
  uint64_t v75 = a4;
  *(void *)(v25 + 16) = a4;
  *(void *)(v25 + 24) = a5;
  uint64_t v95 = v25;
  uint64_t v93 = *(void *)(a3 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_localPairingMonitor);
  uint64_t v26 = *(void *)(a3 + 280);
  v74[3] = v17;
  uint64_t v27 = (uint64_t (*)())(a1 + *(int *)(v17 + 20));
  uint64_t v88 = v26;
  uint64_t v76 = a5;
  swift_retain();
  uint64_t v92 = v27;
  uint64_t v28 = sub_100B6DD88();
  uint64_t v29 = v28[2];
  if (v29)
  {
    uint64_t v30 = (uint64_t)v28 + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    uint64_t v31 = *(void *)(v10 + 72);
    while (1)
    {
      sub_1003B6E14(v30, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for ShareRecord);
      if (!*(void *)(a3 + 40)) {
        break;
      }
      swift_retain();
      sub_1004E5D28((uint64_t)v12, (uint64_t)sub_10038ABAC, 0);
      swift_release();
      sub_1003B61EC((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for ShareRecord);
      v30 += v31;
      if (!--v29) {
        goto LABEL_5;
      }
    }
    uint64_t result = swift_release();
    __break(1u);
  }
  else
  {
LABEL_5:
    swift_bridgeObjectRelease();
    uint64_t v84 = a1;
    sub_1003B6E14(a1, (uint64_t)v24, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    sub_1003B6E14((uint64_t)v24, v96, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v32 = *(unsigned __int8 *)(v91 + 80);
    uint64_t v33 = (v32 + 16) & ~v32;
    unint64_t v34 = (v94 + v33 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v35 = (v34 + 23) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v80 = v32 | 7;
    uint64_t v36 = swift_allocObject();
    uint64_t v78 = v33;
    sub_1003B6008((uint64_t)v24, v36 + v33, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    unint64_t v79 = v34;
    uint64_t v37 = (uint64_t (**)(uint64_t))(v36 + v34);
    uint64_t v38 = (uint64_t (*)(uint64_t))v95;
    *uint64_t v37 = sub_1003B4098;
    v37[1] = v38;
    unint64_t v77 = v35;
    *(void *)(v36 + v35) = v93;
    uint64_t v81 = v36;
    *(void *)(v36 + ((v35 + 15) & 0xFFFFFFFFFFFFFFF8)) = a3;
    swift_retain_n();
    swift_retain_n();
    swift_retain_n();
    static os_log_type_t.default.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    uint64_t v82 = ~v32;
    uint64_t v83 = v32;
    v74[2] = sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v39 = swift_allocObject();
    long long v91 = xmmword_101342130;
    *(_OWORD *)(v39 + 16) = xmmword_101342130;
    uint64_t v40 = type metadata accessor for UUID();
    v74[1] = sub_100394110((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v43 = v42;
    *(void *)(v39 + 56) = &type metadata for String;
    unint64_t v44 = sub_10000B4CC();
    *(void *)(v39 + 64) = v44;
    *(void *)(v39 + 32) = v41;
    *(void *)(v39 + 40) = v43;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    uint64_t v45 = v85;
    static SystemInfo.lockState.getter();
    uint64_t v47 = v86;
    uint64_t v46 = v87;
    (*(void (**)(char *, void, uint64_t))(v87 + 104))(v86, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v13);
    sub_100394110((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    uint64_t v49 = v97;
    uint64_t v48 = v98;
    unint64_t v50 = *(void (**)(char *, uint64_t))(v46 + 8);
    v50(v47, v13);
    v50(v45, v13);
    if (v48 == v49)
    {
      static os_log_type_t.default.getter();
      os_log(_:dso:log:_:_:)();
      sub_10009FD9C();
      uint64_t v51 = swift_allocError();
      *uint64_t v52 = 0;
      static os_log_type_t.default.getter();
      if (qword_1016372A8 != -1) {
        swift_once();
      }
      uint64_t v53 = swift_allocObject();
      *(_OWORD *)(v53 + 16) = v91;
      uint64_t v54 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v53 + 56) = &type metadata for String;
      *(void *)(v53 + 64) = v44;
      *(void *)(v53 + 32) = v54;
      *(void *)(v53 + 40) = v55;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      swift_errorRetain();
      v75(v51, 1);
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v56 = dispatch_group_create();
    dispatch_group_enter(v56);
    sub_10000588C(&qword_10163BC50);
    uint64_t v57 = *(void *)(v40 - 8);
    unint64_t v58 = (*(unsigned __int8 *)(v57 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v57 + 80);
    uint64_t v59 = swift_allocObject();
    *(_OWORD *)(v59 + 16) = v91;
    (*(void (**)(unint64_t, uint64_t (*)(), uint64_t))(v57 + 16))(v59 + v58, v92, v40);
    uint64_t v60 = swift_allocObject();
    *(void *)(v60 + 16) = v56;
    uint64_t v61 = v56;
    uint64_t v62 = v88;
    sub_100A07010(v59, (uint64_t)sub_1003B7AE8, v60);
    swift_bridgeObjectRelease();
    swift_release();
    OS_dispatch_group.wait()();
    uint64_t v63 = v84;
    uint64_t v64 = v90;
    sub_1003B6E14(v84, v90, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    unint64_t v65 = v77;
    uint64_t v66 = swift_allocObject();
    uint64_t v92 = type metadata accessor for OwnedBeaconRecord;
    sub_1003B6008(v64, v66 + v78, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    unint64_t v67 = (uint64_t (**)(uint64_t))(v66 + v79);
    uint64_t v68 = (uint64_t (*)(uint64_t))v81;
    *unint64_t v67 = sub_1003A94E0;
    v67[1] = v68;
    unint64_t v69 = v66 + v65;
    *(void *)unint64_t v69 = v62;
    *(unsigned char *)(v69 + 8) = v89 & 1;
    *(unsigned char *)(v69 + 9) = 1;
    swift_retain();
    swift_retain();
    sub_10038F420(v63, (void (*)(void))sub_1003A952C, v66);
    swift_release();
    swift_release();

    sub_1003B61EC(v96, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    swift_release();
    swift_release();
    swift_release();
    type metadata accessor for Transaction();
    uint64_t v70 = swift_allocObject();
    swift_weakInit();
    sub_1003B6E14(v63, v64, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v71 = (v83 + 24) & v82;
    uint64_t v72 = swift_allocObject();
    *(void *)(v72 + 16) = v70;
    sub_1003B6008(v64, v72 + v71, (uint64_t (*)(void))v92);
    swift_retain();
    static Transaction.asyncTask(name:block:)();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

void sub_1003AC670(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  int v89 = a2;
  uint64_t v7 = type metadata accessor for ShareRecord();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7 - 8);
  uint64_t v10 = (char *)v76 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v87 = *(void *)(v11 - 8);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v86 = (char *)v76 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  dispatch_group_t v85 = (char *)v76 - v14;
  uint64_t v15 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v90 = (uint64_t)v76 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v98 = (uint64_t)v76 - v20;
  uint64_t v96 = v21;
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)v76 - v22;
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = a4;
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = sub_1001E06E0;
  *(void *)(v25 + 24) = v24;
  uint64_t v95 = v25;
  uint64_t v94 = *(void *)(a3 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_localPairingMonitor);
  uint64_t v26 = *(void *)(a3 + 280);
  v76[2] = v15;
  uint64_t v27 = *(int *)(v15 + 20);
  uint64_t v97 = a1;
  uint64_t v28 = (uint64_t (*)())(a1 + v27);
  uint64_t v88 = v26;
  unint64_t v77 = a4;
  _Block_copy(a4);
  uint64_t v91 = v24;
  swift_retain();
  uint64_t v93 = v28;
  uint64_t v29 = sub_100B6DD88();
  uint64_t v30 = v29[2];
  if (v30)
  {
    uint64_t v31 = (uint64_t)v29 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
    uint64_t v32 = *(void *)(v8 + 72);
    while (1)
    {
      sub_1003B6E14(v31, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for ShareRecord);
      if (!*(void *)(a3 + 40)) {
        break;
      }
      swift_retain();
      sub_1004E5D28((uint64_t)v10, (uint64_t)sub_10038ABAC, 0);
      swift_release();
      sub_1003B61EC((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for ShareRecord);
      v31 += v32;
      if (!--v30) {
        goto LABEL_5;
      }
    }
    swift_release();
    _Block_release(v77);
    __break(1u);
  }
  else
  {
LABEL_5:
    swift_bridgeObjectRelease();
    sub_1003B6E14(v97, (uint64_t)v23, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    sub_1003B6E14((uint64_t)v23, v98, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v33 = *(unsigned __int8 *)(v16 + 80);
    uint64_t v34 = (v33 + 16) & ~v33;
    unint64_t v35 = (v96 + v34 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v36 = (v35 + 23) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v81 = v33 | 7;
    uint64_t v37 = swift_allocObject();
    uint64_t v79 = v34;
    sub_1003B6008((uint64_t)v23, v37 + v34, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    unint64_t v80 = v35;
    uint64_t v38 = (uint64_t (**)(uint64_t))(v37 + v35);
    uint64_t v40 = v94;
    uint64_t v39 = (uint64_t (*)(uint64_t))v95;
    char *v38 = sub_1003B6E7C;
    v38[1] = v39;
    unint64_t v78 = v36;
    *(void *)(v37 + v36) = v40;
    uint64_t v82 = v37;
    *(void *)(v37 + ((v36 + 15) & 0xFFFFFFFFFFFFFFF8)) = a3;
    swift_retain_n();
    swift_retain_n();
    swift_retain_n();
    static os_log_type_t.default.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    uint64_t v83 = ~v33;
    uint64_t v84 = v33;
    v76[1] = sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v41 = swift_allocObject();
    long long v92 = xmmword_101342130;
    *(_OWORD *)(v41 + 16) = xmmword_101342130;
    uint64_t v42 = type metadata accessor for UUID();
    v76[0] = sub_100394110((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v43 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v45 = v44;
    *(void *)(v41 + 56) = &type metadata for String;
    unint64_t v46 = sub_10000B4CC();
    *(void *)(v41 + 64) = v46;
    *(void *)(v41 + 32) = v43;
    *(void *)(v41 + 40) = v45;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    uint64_t v47 = v85;
    static SystemInfo.lockState.getter();
    uint64_t v49 = v86;
    uint64_t v48 = v87;
    (*(void (**)(char *, void, uint64_t))(v87 + 104))(v86, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v11);
    sub_100394110((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    uint64_t v51 = v99;
    uint64_t v50 = v100;
    uint64_t v52 = *(void (**)(char *, uint64_t))(v48 + 8);
    v52(v49, v11);
    v52(v47, v11);
    if (v50 == v51)
    {
      static os_log_type_t.default.getter();
      os_log(_:dso:log:_:_:)();
      sub_10009FD9C();
      swift_allocError();
      *uint64_t v53 = 0;
      static os_log_type_t.default.getter();
      if (qword_1016372A8 != -1) {
        swift_once();
      }
      uint64_t v54 = swift_allocObject();
      *(_OWORD *)(v54 + 16) = v92;
      uint64_t v55 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v54 + 56) = &type metadata for String;
      *(void *)(v54 + 64) = v46;
      *(void *)(v54 + 32) = v55;
      *(void *)(v54 + 40) = v56;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      uint64_t v57 = (void (**)(const void *, void *))v77;
      _Block_copy(v77);
      unint64_t v58 = (void *)_convertErrorToNSError(_:)();
      v57[2](v57, v58);

      _Block_release(v57);
      swift_errorRelease();
    }
    uint64_t v59 = dispatch_group_create();
    dispatch_group_enter(v59);
    sub_10000588C(&qword_10163BC50);
    uint64_t v60 = *(void *)(v42 - 8);
    unint64_t v61 = (*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80);
    uint64_t v62 = swift_allocObject();
    *(_OWORD *)(v62 + 16) = v92;
    (*(void (**)(unint64_t, uint64_t (*)(), uint64_t))(v60 + 16))(v62 + v61, v93, v42);
    uint64_t v63 = swift_allocObject();
    *(void *)(v63 + 16) = v59;
    uint64_t v64 = v59;
    uint64_t v65 = v88;
    sub_100A07010(v62, (uint64_t)sub_1003B7AE8, v63);
    swift_bridgeObjectRelease();
    swift_release();
    OS_dispatch_group.wait()();
    uint64_t v66 = v97;
    uint64_t v67 = v90;
    sub_1003B6E14(v97, v90, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    unint64_t v68 = v78;
    uint64_t v69 = swift_allocObject();
    uint64_t v93 = type metadata accessor for OwnedBeaconRecord;
    sub_1003B6008(v67, v69 + v79, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v70 = (uint64_t (**)(uint64_t))(v69 + v80);
    uint64_t v71 = (uint64_t (*)(uint64_t))v82;
    *uint64_t v70 = sub_1003A94E0;
    v70[1] = v71;
    unint64_t v72 = v69 + v68;
    *(void *)unint64_t v72 = v65;
    *(unsigned char *)(v72 + 8) = v89 & 1;
    *(unsigned char *)(v72 + 9) = 1;
    swift_retain();
    swift_retain();
    sub_10038F420(v66, (void (*)(void))sub_1003A952C, v69);
    swift_release();
    swift_release();

    sub_1003B61EC(v98, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    swift_release();
    swift_release();
    swift_release();
    type metadata accessor for Transaction();
    uint64_t v73 = swift_allocObject();
    swift_weakInit();
    sub_1003B6E14(v66, v67, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v74 = (v84 + 24) & v83;
    uint64_t v75 = swift_allocObject();
    *(void *)(v75 + 16) = v73;
    sub_1003B6008(v67, v75 + v74, (uint64_t (*)(void))v93);
    swift_retain();
    static Transaction.asyncTask(name:block:)();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
  }
}

void sub_1003AD160()
{
  uint64_t v0 = sub_10000588C(&qword_1016429E8);
  __chkstk_darwin(v0 - 8);
  uint64_t v81 = (char *)&v70 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v96 = type metadata accessor for URLResourceValues();
  uint64_t v98 = *(char **)(v96 - 8);
  __chkstk_darwin(v96);
  long long v92 = (char *)&v70 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = type metadata accessor for URL();
  uint64_t v102 = *(void *)(v97 - 8);
  __chkstk_darwin(v97);
  uint64_t v4 = (char *)&v70 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000588C(&qword_101649E40);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = type metadata accessor for DirectorySequence();
  uint64_t v79 = *(void *)(v80 - 8);
  __chkstk_darwin(v80);
  uint64_t v101 = (char *)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Calendar.Component();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v70 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Calendar();
  uint64_t v99 = *(void *)(v13 - 8);
  uint64_t v100 = (uint64_t (*)(char *, uint64_t, uint64_t))v13;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v17 = __chkstk_darwin(v16 - 8);
  uint64_t v91 = (char *)&v70 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v70 - v19;
  uint64_t v21 = type metadata accessor for Date();
  uint64_t v22 = *(void **)(v21 - 8);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v82 = (char *)&v70 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v70 - v26;
  __chkstk_darwin(v25);
  int v89 = (char *)&v70 - v28;
  id v90 = [self defaultManager];
  static Calendar.current.getter();
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for Calendar.Component.day(_:), v9);
  static Date.trustedNow.getter((uint64_t)v27);
  Calendar.date(byAdding:value:to:wrappingComponents:)();
  uint64_t v29 = (void (*)(char *, uint64_t))v22[1];
  uint64_t v84 = v22 + 1;
  uint64_t v83 = v29;
  v29(v27, v21);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  (*(void (**)(char *, uint64_t (*)(char *, uint64_t, uint64_t)))(v99 + 8))(v15, v100);
  uint64_t v30 = (unsigned int (*)(char *, uint64_t, uint64_t))v22[6];
  uint64_t v86 = v22 + 6;
  dispatch_group_t v85 = v30;
  if (v30(v20, 1, v21) != 1)
  {
    uint64_t v31 = (void (*)(void))v22[4];
    uint64_t v75 = v22 + 4;
    uint64_t v74 = v31;
    ((void (*)(char *, char *, uint64_t))v31)(v89, v20, v21);
    static os_log_type_t.default.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    uint64_t v73 = sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v32 = swift_allocObject();
    long long v72 = xmmword_101342130;
    *(_OWORD *)(v32 + 16) = xmmword_101342130;
    sub_100394110((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
    uint64_t v87 = v21;
    uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v35 = v34;
    *(void *)(v32 + 56) = &type metadata for String;
    unint64_t v71 = sub_10000B4CC();
    *(void *)(v32 + 64) = v71;
    *(void *)(v32 + 32) = v33;
    *(void *)(v32 + 40) = v35;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    if (qword_101636B38 != -1) {
      swift_once();
    }
    uint64_t v36 = v97;
    sub_100010324(v97, (uint64_t)qword_10170DF58);
    NSFileManager.deepSequence(at:includingPropertiesForKeys:options:)();
    DirectorySequence.next()();
    uint64_t v37 = v102 + 48;
    uint64_t v100 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v102 + 48);
    int v38 = v100(v7, 1, v36);
    uint64_t v39 = (uint64_t)v81;
    if (v38 == 1)
    {
LABEL_10:

      (*(void (**)(char *, uint64_t))(v79 + 8))(v101, v80);
      v83(v89, v87);
      return;
    }
    uint64_t v99 = *(void *)(v102 + 32);
    v102 += 32;
    uint64_t v40 = (void (**)(char *, uint64_t))(v102 - 24);
    NSURLResourceKey v94 = NSURLCreationDateKey;
    uint64_t v95 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v98 + 56);
    uint64_t v88 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v98 + 48);
    unint64_t v78 = (void (**)(char *, uint64_t, uint64_t))(v98 + 32);
    uint64_t v76 = (void (**)(char *, uint64_t))(v98 + 8);
    uint64_t v98 = "shold: %{public}@";
    unint64_t v93 = 0x80000001013FB020;
    long long v70 = xmmword_101347BA0;
    uint64_t v77 = v37;
    ((void (*)(char *, char *, uint64_t))v99)(v4, v7, v36);
    while (1)
    {
      if (URL.pathExtension.getter() == 0xD000000000000010 && v41 == v93)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        char v42 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if ((v42 & 1) == 0)
        {
          (*v40)(v4, v36);
          goto LABEL_13;
        }
      }
      type metadata accessor for URLResourceKey(0);
      sub_100394110(&qword_1016387B0, type metadata accessor for URLResourceKey);
      uint64_t v43 = v94;
      id v104 = (id)Set.init(minimumCapacity:)();
      uint64_t v44 = v43;
      sub_100DCF1F8(&v103, v44);
      uint64_t v45 = v103;

      URL.resourceValues(forKeys:)();
      swift_bridgeObjectRelease();
      uint64_t v46 = v96;
      (*v95)(v39, 0, 1, v96);
      int v47 = (*v88)(v39, 1, v46);
      uint64_t v49 = v91;
      uint64_t v48 = v92;
      if (v47 == 1)
      {
        uint64_t v36 = v97;
        (*v40)(v4, v97);
        sub_10001DAB4(v39, &qword_1016429E8);
      }
      else
      {
        (*v78)(v92, v39, v46);
        URLResourceValues.creationDate.getter();
        uint64_t v50 = v87;
        if (v85(v49, 1, v87) == 1)
        {
          (*v76)(v48, v46);
          uint64_t v51 = v97;
          (*v40)(v4, v97);
          uint64_t v52 = (uint64_t)v49;
          uint64_t v36 = v51;
          sub_10001DAB4(v52, (uint64_t *)&unk_10163AC90);
        }
        else
        {
          uint64_t v53 = v82;
          v74();
          if (static Date.< infix(_:_:)())
          {
            static os_log_type_t.default.getter();
            uint64_t v54 = swift_allocObject();
            *(_OWORD *)(v54 + 16) = v72;
            uint64_t v55 = URL.absoluteString.getter();
            unint64_t v56 = v71;
            *(void *)(v54 + 56) = &type metadata for String;
            *(void *)(v54 + 64) = v56;
            *(void *)(v54 + 32) = v55;
            *(void *)(v54 + 40) = v57;
            os_log(_:dso:log:_:_:)();
            swift_bridgeObjectRelease();
            URL._bridgeToObjectiveC()(v58);
            uint64_t v60 = v59;
            id v104 = 0;
            unsigned int v61 = [v90 removeItemAtURL:v59 error:&v104];

            if (v61)
            {
              id v62 = v104;
            }
            else
            {
              id v63 = v104;
              uint64_t v64 = (void *)_convertNSErrorToError(_:)();

              swift_willThrow();
              static os_log_type_t.error.getter();
              uint64_t v65 = swift_allocObject();
              *(_OWORD *)(v65 + 16) = v70;
              uint64_t v66 = URL.absoluteString.getter();
              *(void *)(v65 + 56) = &type metadata for String;
              *(void *)(v65 + 64) = v56;
              *(void *)(v65 + 32) = v66;
              *(void *)(v65 + 40) = v67;
              id v104 = v64;
              swift_errorRetain();
              sub_10000588C(&qword_101638D40);
              uint64_t v68 = String.init<A>(describing:)();
              *(void *)(v65 + 96) = &type metadata for String;
              *(void *)(v65 + 104) = v56;
              *(void *)(v65 + 72) = v68;
              *(void *)(v65 + 80) = v69;
              os_log(_:dso:log:_:_:)();
              swift_bridgeObjectRelease();
              swift_errorRelease();
            }
            v83(v82, v87);
            (*v76)(v92, v96);
            uint64_t v36 = v97;
            (*v40)(v4, v97);
            uint64_t v39 = (uint64_t)v81;
          }
          else
          {
            v83(v53, v50);
            (*v76)(v48, v46);
            uint64_t v36 = v97;
            (*v40)(v4, v97);
          }
        }
      }
LABEL_13:
      DirectorySequence.next()();
      if (v100(v7, 1, v36) == 1) {
        goto LABEL_10;
      }
      ((void (*)(char *, char *, uint64_t))v99)(v4, v7, v36);
    }
  }
  sub_10001DAB4((uint64_t)v20, (uint64_t *)&unk_10163AC90);
  static os_log_type_t.error.getter();
  if (qword_101637260 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
}

uint64_t sub_1003AE024(uint64_t a1, uint64_t a2)
{
  uint64_t v82 = a2;
  uint64_t v77 = a1;
  uint64_t v2 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v2 - 8);
  uint64_t v78 = (uint64_t)&v66 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v75 = *(void *)(v79 - 8);
  __chkstk_darwin(v79);
  uint64_t v73 = (uint64_t)&v66 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v81 = *(void *)(v5 - 8);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v80 = (char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v66 - v8;
  uint64_t v10 = sub_10000588C(&qword_101638CF0);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v70 = (uint64_t)&v66 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  long long v72 = (char *)&v66 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v69 = (uint64_t)&v66 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  unint64_t v71 = (char *)&v66 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v74 = (uint64_t)&v66 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v76 = (char *)&v66 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v66 - v24;
  uint64_t v26 = __chkstk_darwin(v23);
  uint64_t v28 = (char *)&v66 - v27;
  __chkstk_darwin(v26);
  uint64_t v30 = (char *)&v66 - v29;
  uint64_t v31 = type metadata accessor for UUID();
  uint64_t v32 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v83 = (char *)&v66 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v34 = v85;
  swift_getKeyPath();
  sub_1010AD23C(v34, (uint64_t)v30);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v35 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48);
  if (v35((uint64_t)v30, 1, v31) != 1)
  {
    uint64_t v67 = v35;
    uint64_t v68 = v32;
    (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v83, v30, v31);
    static SystemInfo.lockState.getter();
    int v38 = v80;
    uint64_t v37 = v81;
    (*(void (**)(char *, void, uint64_t))(v81 + 104))(v80, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v5);
    sub_100394110((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
    dispatch thunk of RawRepresentable.rawValue.getter();
    dispatch thunk of RawRepresentable.rawValue.getter();
    uint64_t v39 = v85;
    uint64_t v40 = v84;
    uint64_t v41 = *(void (**)(char *, uint64_t))(v37 + 8);
    v41(v38, v5);
    v41(v9, v5);
    if (v39 == v40)
    {
      static os_log_type_t.default.getter();
      char v42 = v67;
      if (qword_1016372A8 != -1) {
        swift_once();
      }
      os_log(_:dso:log:_:_:)();
      uint64_t v43 = v68;
      uint64_t v44 = (uint64_t)v76;
      (*(void (**)(char *, char *, uint64_t))(v68 + 16))(v76, v83, v31);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v43 + 56))(v44, 0, 1, v31);
      uint64_t v45 = v74;
      sub_10001D074(v44, v74, &qword_101638CF0);
      if (v42(v45, 1, v31) != 1)
      {
        v46.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
        (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v45, v31);
LABEL_23:
        (*(void (**)(uint64_t, Class))(v82 + 16))(v82, v46.super.isa);

        sub_10001DAB4(v44, &qword_101638CF0);
        return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v83, v31);
      }
    }
    else
    {
      uint64_t v48 = v78;
      sub_10037A7A0(v78);
      uint64_t v49 = v79;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v75 + 48))(v48, 1, v79) != 1)
      {
        uint64_t v56 = v31;
        uint64_t v57 = v73;
        sub_1003B6008(v48, v73, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        static os_log_type_t.default.getter();
        if (qword_1016372A8 != -1) {
          swift_once();
        }
        sub_10000588C((uint64_t *)&unk_10163AD00);
        uint64_t v58 = swift_allocObject();
        *(_OWORD *)(v58 + 16) = xmmword_101342130;
        uint64_t v59 = v57 + *(int *)(v49 + 20);
        uint64_t v60 = UUID.uuidString.getter();
        uint64_t v62 = v61;
        *(void *)(v58 + 56) = &type metadata for String;
        *(void *)(v58 + 64) = sub_10000B4CC();
        *(void *)(v58 + 32) = v60;
        *(void *)(v58 + 40) = v62;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        uint64_t v43 = v68;
        uint64_t v63 = (uint64_t)v71;
        uint64_t v31 = v56;
        (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v71, v59, v56);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v43 + 56))(v63, 0, 1, v56);
        uint64_t v64 = v69;
        sub_10001D074(v63, v69, &qword_101638CF0);
        if (v67(v64, 1, v56) == 1)
        {
          Class isa = 0;
        }
        else
        {
          Class isa = UUID._bridgeToObjectiveC()().super.isa;
          (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v64, v56);
        }
        (*(void (**)(uint64_t, Class))(v82 + 16))(v82, isa);

        sub_10001DAB4(v63, &qword_101638CF0);
        sub_1003B61EC(v57, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v83, v31);
      }
      uint64_t v50 = v31;
      sub_10001DAB4(v48, &qword_10163B9F0);
      static os_log_type_t.error.getter();
      if (qword_1016372A8 != -1) {
        swift_once();
      }
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v51 = swift_allocObject();
      *(_OWORD *)(v51 + 16) = xmmword_101342130;
      uint64_t v52 = UUID.uuidString.getter();
      uint64_t v54 = v53;
      *(void *)(v51 + 56) = &type metadata for String;
      *(void *)(v51 + 64) = sub_10000B4CC();
      *(void *)(v51 + 32) = v52;
      *(void *)(v51 + 40) = v54;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      uint64_t v43 = v68;
      uint64_t v44 = (uint64_t)v72;
      uint64_t v31 = v50;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v68 + 56))(v72, 1, 1, v50);
      uint64_t v55 = v70;
      sub_10001D074(v44, v70, &qword_101638CF0);
      if (v67(v55, 1, v50) != 1)
      {
        v46.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
        (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v55, v50);
        goto LABEL_23;
      }
    }
    v46.super.Class isa = 0;
    goto LABEL_23;
  }
  sub_10001DAB4((uint64_t)v30, &qword_101638CF0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v32 + 56))(v28, 1, 1, v31);
  sub_10001D074((uint64_t)v28, (uint64_t)v25, &qword_101638CF0);
  if (v35((uint64_t)v25, 1, v31) == 1)
  {
    Class v36 = 0;
  }
  else
  {
    Class v36 = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v32 + 8))(v25, v31);
  }
  (*(void (**)(uint64_t, Class))(v82 + 16))(v82, v36);

  return sub_10001DAB4((uint64_t)v28, &qword_101638CF0);
}

void sub_1003AEB00()
{
  sub_1002BE890();
  sub_101205044();
  sub_100B3C0CC();
  sub_1013128BC();
  sub_10086EAE8();
  if (qword_101636EF0 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100010324(v0, (uint64_t)qword_10170E840);
  oslog = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    uint64_t v2 = swift_slowAlloc();
    *(_DWORD *)uint64_t v2 = 67110144;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v2 + 8) = 1024;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v2 + 14) = 1024;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v2 + 20) = 1024;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v2 + 26) = 1024;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, oslog, v1, "\"Deleted account keychain items. deletedItemSharingKey: %{BOOL}d, deletedObservationKey: %{BOOL}d, deletedBeaconStoreKey: %{BOOL}d, deletedKeyManagerKey: %{BOOL}d deletedStandaloneBeaconDatabaseKey: %{BOOL}d.", (uint8_t *)v2, 0x20u);
    swift_slowDealloc();
  }
  else
  {
  }
}

void sub_1003AECFC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for PairingErrorRecord(0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_100B6CA70();
  uint64_t v8 = v7[2];
  if (v8)
  {
    uint64_t v16 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v9 = (uint64_t)v7 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v10 = *(void *)(v4 + 72);
    do
    {
      sub_1003B6E14(v9, (uint64_t)v6, type metadata accessor for PairingErrorRecord);
      sub_100D0F9CC();
      sub_1003B61EC((uint64_t)v6, type metadata accessor for PairingErrorRecord);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v9 += v10;
      --v8;
    }
    while (v8);
    uint64_t v11 = v16;
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v11 = _swiftEmptyArrayStorage;
  }
  static os_log_type_t.info.getter();
  if (qword_101637308 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_101342130;
  uint64_t v13 = v11[2];
  *(void *)(v12 + 56) = &type metadata for Int;
  *(void *)(v12 + 64) = &protocol witness table for Int;
  *(void *)(v12 + 32) = v13;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_100A9B9C4((uint64_t)v11);
  swift_bridgeObjectRelease();
  sub_10000588C(&qword_101638D40);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class))(a2 + 16))(a2, isa);
  swift_bridgeObjectRelease();
}

void sub_1003AEFA8(uint64_t a1, int a2, uint64_t a3, const void *a4)
{
  int v78 = a2;
  uint64_t v75 = type metadata accessor for UUID();
  uint64_t v71 = *(void *)(v75 - 8);
  __chkstk_darwin(v75);
  v68[1] = v7;
  uint64_t v70 = (char *)v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v8 - 8);
  uint64_t v69 = (char *)v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = type metadata accessor for LocalFindableAccessoryRecord();
  __chkstk_darwin(v73);
  uint64_t v74 = (char *)v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v11 = __chkstk_darwin(v77);
  uint64_t v72 = (uint64_t)v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v76 = (char *)v68 - v13;
  uint64_t v14 = sub_10000588C(&qword_10163BB20);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)v68 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)v68 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v24 = (char *)v68 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v26 = (char *)v68 - v25;
  uint64_t v81 = (void (*)(uint64_t))swift_allocObject();
  *((void *)v81 + 2) = a4;
  uint64_t v79 = a3;
  _Block_copy(a4);
  uint64_t v80 = a4;
  _Block_copy(a4);
  sub_100ACCD98(a1, (uint64_t)&v83);
  if (v84)
  {
    sub_10001CEB0(&v83, (uint64_t)v85);
    sub_10001D010((uint64_t)v85, (uint64_t)&v83);
    sub_10000588C((uint64_t *)&unk_10164DBF0);
    if (swift_dynamicCast())
    {
      sub_1003B6008((uint64_t)v26, (uint64_t)v24, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      sub_10037F0D0((uint64_t)v24, v78 & 1, (void (*)(void))sub_1001DF814, v81);
      uint64_t v27 = (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord;
      uint64_t v28 = (uint64_t)v24;
    }
    else
    {
      Class v36 = v76;
      char v37 = swift_dynamicCast();
      int v38 = v81;
      if ((v37 & 1) == 0)
      {
        uint64_t v48 = (uint64_t)v74;
        if (swift_dynamicCast())
        {
          uint64_t v49 = swift_allocObject();
          *(void *)(v49 + 16) = sub_1001DF814;
          *(void *)(v49 + 24) = v38;
          uint64_t v50 = type metadata accessor for TaskPriority();
          uint64_t v51 = (uint64_t)v69;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56))(v69, 1, 1, v50);
          uint64_t v52 = v71;
          uint64_t v53 = v70;
          uint64_t v54 = a1;
          uint64_t v55 = v75;
          (*(void (**)(char *, uint64_t, uint64_t))(v71 + 16))(v70, v54, v75);
          unint64_t v56 = (*(unsigned __int8 *)(v52 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80);
          uint64_t v57 = (char *)swift_allocObject();
          *((void *)v57 + 2) = 0;
          *((void *)v57 + 3) = 0;
          *((void *)v57 + 4) = v79;
          *((void *)v57 + 5) = sub_1003B7ADC;
          *((void *)v57 + 6) = v49;
          (*(void (**)(char *, char *, uint64_t))(v52 + 32))(&v57[v56], v53, v55);
          swift_retain();
          swift_retain();
          swift_retain();
          sub_1008F5E44(v51, (uint64_t)&unk_1016429B0, (uint64_t)v57);
          swift_release();
          swift_release();
          uint64_t v35 = v80;
          (*((void (**)(const void *, void))v80 + 2))(v80, 0);
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v85);
          sub_1003B61EC(v48, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
        }
        else
        {
          static os_log_type_t.error.getter();
          if (qword_1016372A8 != -1) {
            swift_once();
          }
          sub_10000588C((uint64_t *)&unk_10163AD00);
          uint64_t v60 = swift_allocObject();
          *(_OWORD *)(v60 + 16) = xmmword_101342130;
          sub_10001D010((uint64_t)v85, (uint64_t)v82);
          uint64_t v61 = String.init<A>(describing:)();
          uint64_t v63 = v62;
          *(void *)(v60 + 56) = &type metadata for String;
          *(void *)(v60 + 64) = sub_10000B4CC();
          *(void *)(v60 + 32) = v61;
          *(void *)(v60 + 40) = v63;
          os_log(_:dso:log:_:_:)();
          swift_bridgeObjectRelease();
          sub_1003A4778();
          swift_allocError();
          unsigned char *v64 = 3;
          uint64_t v65 = (void *)_convertErrorToNSError(_:)();
          uint64_t v35 = v80;
          (*((void (**)(const void *, void *))v80 + 2))(v80, v65);

          swift_errorRelease();
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v85);
        }
        goto LABEL_11;
      }
      uint64_t v39 = (uint64_t)v36;
      uint64_t v40 = v72;
      sub_1003B6008(v39, v72, type metadata accessor for SharedBeaconRecord);
      sub_10037FFBC(v40, (uint64_t)sub_1001DF814, (uint64_t)v38);
      uint64_t v27 = type metadata accessor for SharedBeaconRecord;
      uint64_t v28 = v40;
    }
    sub_1003B61EC(v28, v27);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v85);
    uint64_t v35 = v80;
LABEL_11:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v83);
LABEL_28:
    swift_release();
    goto LABEL_29;
  }
  sub_10001DAB4((uint64_t)&v83, (uint64_t *)&unk_10163BBE0);
  sub_100AE75E0(a1, (uint64_t)v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) != 1)
  {
    uint64_t v41 = (uint64_t)v20;
    sub_1003B6008((uint64_t)v16, (uint64_t)v20, type metadata accessor for OwnedBeaconGroup);
    v85[0] = 0;
    uint64_t v42 = sub_1004D1434();
    uint64_t v43 = v79;
    swift_retain();
    sub_1003A410C(v42, v43, v85);
    swift_bridgeObjectRelease();
    swift_release();
    int v44 = v85[0];
    static os_log_type_t.default.getter();
    if (v44 == 1)
    {
      uint64_t v45 = v81;
      if (qword_101637308 != -1) {
        swift_once();
      }
      os_log(_:dso:log:_:_:)();
      int v46 = v78 & 1;
      uint64_t v47 = (uint64_t)v20;
    }
    else
    {
      uint64_t v45 = v81;
      if (qword_1016372A8 != -1) {
        swift_once();
      }
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v58 = swift_allocObject();
      *(_OWORD *)(v58 + 16) = xmmword_101342130;
      *(void *)(v58 + 56) = &type metadata for Bool;
      *(void *)(v58 + 64) = &protocol witness table for Bool;
      char v59 = v78;
      *(unsigned char *)(v58 + 32) = v78 & 1;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      if ((v59 & 1) == 0)
      {
        sub_1003A4778();
        swift_allocError();
        *uint64_t v66 = 7;
        uint64_t v67 = (void *)_convertErrorToNSError(_:)();
        uint64_t v35 = v80;
        (*((void (**)(const void *, void *))v80 + 2))(v80, v67);

        swift_errorRelease();
        goto LABEL_27;
      }
      uint64_t v47 = v41;
      int v46 = 1;
    }
    sub_1003802C8(v47, v46, (uint64_t)sub_1001DF814, (uint64_t)v45);
    uint64_t v35 = v80;
LABEL_27:
    sub_1003B61EC(v41, type metadata accessor for OwnedBeaconGroup);
    goto LABEL_28;
  }
  sub_10001DAB4((uint64_t)v16, &qword_10163BB20);
  static os_log_type_t.error.getter();
  if (qword_1016372A8 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v29 = swift_allocObject();
  *(_OWORD *)(v29 + 16) = xmmword_101342130;
  sub_100394110((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v32 = v31;
  *(void *)(v29 + 56) = &type metadata for String;
  *(void *)(v29 + 64) = sub_10000B4CC();
  *(void *)(v29 + 32) = v30;
  *(void *)(v29 + 40) = v32;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  type metadata accessor for SPOwnerSessionError(0);
  *(void *)&long long v83 = 2;
  sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
  sub_100394110(&qword_101638460, type metadata accessor for SPOwnerSessionError);
  _BridgedStoredNSError.init(_:userInfo:)();
  uint64_t v33 = *(void **)v85;
  uint64_t v34 = (void *)_convertErrorToNSError(_:)();
  uint64_t v35 = v80;
  (*((void (**)(const void *, void *))v80 + 2))(v80, v34);
  swift_release();

LABEL_29:
  _Block_release(v35);
}

uint64_t sub_1003AFBE0(char a1, uint64_t a2)
{
  if (qword_101637310 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100010324(v4, (uint64_t)qword_10170F068);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 67109120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "setAlwaysBeaconWildState to %{BOOL}d", v7, 8u);
    swift_slowDealloc();
  }

  id v8 = [self standardUserDefaults];
  NSString v9 = String._bridgeToObjectiveC()();
  [v8 setBool:a1 & 1 forKey:v9];

  uint64_t v10 = CFNotificationCenterGetDarwinNotifyCenter();
  if (v10)
  {
    uint64_t v11 = v10;
    CFStringRef v12 = (const __CFString *)SPBeaconingStateChangedNotification;
    static os_log_type_t.default.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    CFNotificationCenterPostNotification(v11, v12, 0, 0, 1u);
  }
  else
  {
    static os_log_type_t.error.getter();
    if (qword_101637260 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, 1);
}

uint64_t sub_1003AFE84(uint64_t a1, void (*a2)(uint64_t, unint64_t, uint64_t))
{
  uint64_t v40 = a2;
  uint64_t v2 = sub_10000588C(&qword_101642998);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v37 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for OfflineFindingInfo();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v39 = (uint64_t)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10037A7A0((uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_10001DAB4((uint64_t)v10, &qword_10163B9F0);
    sub_1003A4778();
    uint64_t v15 = swift_allocError();
    unsigned char *v16 = 1;
    swift_errorRetain();
    v40(0, 0xF000000000000000, v15);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    uint64_t v18 = v40;
    sub_1003B6008((uint64_t)v10, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    sub_10037E2BC((uint64_t)v14, (uint64_t)v4);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
    {
      sub_10001DAB4((uint64_t)v4, &qword_101642998);
      sub_1003A4778();
      uint64_t v19 = swift_allocError();
      *uint64_t v20 = 1;
      swift_errorRetain();
      v18(0, 0xF000000000000000, v19);
      swift_errorRelease();
      swift_errorRelease();
    }
    else
    {
      uint64_t v21 = v39;
      sub_1003B6008((uint64_t)v4, v39, (uint64_t (*)(void))type metadata accessor for OfflineFindingInfo);
      uint64_t v22 = self;
      sub_100BFE804();
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v42 = 0;
      id v24 = [v22 dataWithPropertyList:isa format:200 options:0 error:&v42];

      id v25 = v42;
      if (v24)
      {
        uint64_t v26 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v28 = v27;

        sub_1000361E0(v26, v28);
        v18(v26, v28, 0);
        sub_10001CFB8(v26, v28);
        sub_10001CFB8(v26, v28);
      }
      else
      {
        uint64_t v29 = v25;
        uint64_t v30 = _convertNSErrorToError(_:)();

        swift_willThrow();
        if (qword_101636BE0 != -1) {
          swift_once();
        }
        uint64_t v31 = type metadata accessor for Logger();
        sub_100010324(v31, (uint64_t)qword_10170E0E8);
        swift_errorRetain();
        swift_errorRetain();
        uint64_t v32 = Logger.logObject.getter();
        os_log_type_t v33 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v32, v33))
        {
          uint64_t v34 = (uint8_t *)swift_slowAlloc();
          int v38 = (void *)swift_slowAlloc();
          id v42 = v38;
          *(_DWORD *)uint64_t v34 = 136315138;
          uint64_t v21 = v39;
          char v37 = v34 + 4;
          swift_getErrorValue();
          uint64_t v35 = Error.localizedDescription.getter();
          uint64_t v41 = sub_1008FA0F0(v35, v36, (uint64_t *)&v42);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          swift_errorRelease();
          swift_errorRelease();
          _os_log_impl((void *)&_mh_execute_header, v32, v33, "PropertyListSerialization error: %s", v34, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          swift_errorRelease();
          swift_errorRelease();
        }

        swift_errorRetain();
        v18(0, 0xF000000000000000, v30);
        swift_errorRelease();
        swift_errorRelease();
      }
      sub_1003B61EC(v21, (uint64_t (*)(void))type metadata accessor for OfflineFindingInfo);
    }
    return sub_1003B61EC((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  }
}

uint64_t sub_1003B04E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v8 = [self standardUserDefaults];
  UUID.uuidString.getter();
  NSString v9 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v10 = String._bridgeToObjectiveC()();
  [v8 setObject:v9 forKey:v10];

  if (qword_101636BE0 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_100010324(v11, (uint64_t)qword_10170E0E8);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    uint64_t v15 = swift_slowAlloc();
    uint64_t v20 = a2;
    uint64_t v22 = v15;
    *(_DWORD *)uint64_t v14 = 136315138;
    sub_100394110((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v21 = sub_1008FA0F0(v16, v17, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Poisoning beacon UUID: %s", v14, 0xCu);
    swift_arrayDestroy();
    a2 = v20;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }

  return (*(uint64_t (**)(uint64_t))(a2 + 16))(a2);
}

uint64_t sub_1003B0814(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v70 = a3;
  LODWORD(v64) = a2;
  uint64_t v8 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v8 - 8);
  uint64_t v65 = &v60[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = type metadata accessor for OwnedBeaconGroup(0);
  __chkstk_darwin(v10);
  uint64_t v12 = &v60[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = qword_101637310;
  uint64_t v67 = a4;
  swift_retain();
  id v66 = a5;
  if (v13 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_100010324(v14, (uint64_t)qword_10170F068);
  sub_1003B6E14(a1, (uint64_t)v12, type metadata accessor for OwnedBeaconGroup);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  BOOL v17 = os_log_type_enabled(v15, v16);
  uint64_t v68 = v10;
  uint64_t v69 = a1;
  if (v17)
  {
    uint64_t v18 = swift_slowAlloc();
    *(void *)&long long v72 = swift_slowAlloc();
    *(_DWORD *)uint64_t v18 = 141558275;
    uint64_t v71 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v18 + 12) = 2081;
    type metadata accessor for UUID();
    sub_100394110((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v71 = sub_1008FA0F0(v19, v20, (uint64_t *)&v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1003B61EC((uint64_t)v12, type metadata accessor for OwnedBeaconGroup);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "removeAirPodsPairingLock for %{private,mask.hash}s", (uint8_t *)v18, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1003B61EC((uint64_t)v12, type metadata accessor for OwnedBeaconGroup);
  }

  uint64_t v21 = swift_bridgeObjectRetain();
  uint64_t v22 = sub_10036D3E8(v21);
  swift_bridgeObjectRelease();
  uint64_t v23 = v70;
  swift_retain();
  id v24 = sub_1003A70FC(v22, v23);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRetain_n();
  id v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v25, v26))
  {
    unint64_t v27 = (uint8_t *)swift_slowAlloc();
    *(void *)&long long v72 = swift_slowAlloc();
    *(_DWORD *)unint64_t v27 = 136315138;
    type metadata accessor for AirPodsUnpairData.DeviceUnpairData(0);
    swift_bridgeObjectRetain();
    uint64_t v28 = Array.description.getter();
    unint64_t v30 = v29;
    swift_bridgeObjectRelease();
    uint64_t v71 = sub_1008FA0F0(v28, v30, (uint64_t *)&v72);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "unpairDevices: %s", v27, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  id v31 = (id)MobileGestalt_get_current_device();
  if (v31)
  {
    uint64_t v32 = v31;
    uint64_t v63 = v24;
    uint64_t uniqueChipID = MobileGestalt_get_uniqueChipID();

    id v34 = (id)MobileGestalt_get_current_device();
    if (v34)
    {
      uint64_t v35 = v34;
      int v61 = v64 & 1;
      uint64_t chipID = MobileGestalt_get_chipID();

      *(void *)&long long v72 = uniqueChipID;
      uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v39 = v38;
      uint64_t v64 = v38;
      *(void *)&long long v72 = chipID;
      uint64_t v40 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v42 = v41;
      uint64_t v62 = v41;
      id v43 = sub_100F2C724();
      uint64_t v45 = v44;
      uint64_t v46 = v68;
      uint64_t v47 = v69;
      uint64_t v48 = MACAddress.udid.getter();
      *(void *)&long long v72 = v37;
      *((void *)&v72 + 1) = v39;
      uint64_t v73 = v40;
      uint64_t v74 = v42;
      id v75 = v43;
      uint64_t v76 = v45;
      uint64_t v77 = v48;
      uint64_t v78 = v49;
      char v79 = v61;
      uint64_t v80 = v63;
      uint64_t v50 = sub_100A46CC8();
      uint64_t v51 = v47 + *(int *)(v46 + 24);
      uint64_t v52 = type metadata accessor for UUID();
      uint64_t v53 = *(void *)(v52 - 8);
      uint64_t v54 = (uint64_t)v65;
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v53 + 16))(v65, v51, v52);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v53 + 56))(v54, 0, 1, v52);
      uint64_t v55 = v67;
      swift_retain();
      id v56 = v66;
      sub_10098A8A4(v54, &v72, v50, v55, v56);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();

      sub_10001DAB4(v54, &qword_101638CF0);
      return swift_release();
    }
  }
  else
  {
    id v58 = v66;

    swift_release_n();
    __break(1u);
  }
  id v59 = v66;

  uint64_t result = swift_release_n();
  __break(1u);
  return result;
}

uint64_t sub_1003B0F10()
{
  os_log_type_t v1 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v19 = *(void *)(*((void *)v1 - 1) + 64);
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v4 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v5 = v0 + v3 + v1[5];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  uint64_t v9 = v0 + v3 + v1[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 40) & ~v2;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 40) & ~v2;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v3 = v18;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v10 = v4 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6)) {
    v8(v10, v6);
  }
  uint64_t v11 = v4 + v1[8];
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  sub_10001CFB8(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v13 = (uint64_t *)(v4 + v1[10]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_10001CFB8(*v13, v14);
  }
  uint64_t v15 = (uint64_t *)(v4 + v1[11]);
  unint64_t v16 = v15[1];
  if (v16 >> 60 != 15) {
    sub_10001CFB8(*v15, v16);
  }
  sub_10001CFB8(*(void *)(v4 + v1[12]), *(void *)(v4 + v1[12] + 8));
  sub_10001CFB8(*(void *)(v4 + v1[13]), *(void *)(v4 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v3 + v19, v2 | 7);
}

uint64_t sub_1003B129C(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_100033F68;
  return sub_10038B0CC(a1, v5, v6, v7, v8);
}

uint64_t sub_1003B1398()
{
  os_log_type_t v1 = (int *)type metadata accessor for SharedBeaconRecord(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v16 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v3 = v0 + ((v2 + 24) & ~v2);
  sub_10001CFB8(*(void *)v3, *(void *)(v3 + 8));
  uint64_t v4 = v3 + v1[5];
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  v7(v3 + v1[6], v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = v3 + v1[18];
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  uint64_t v10 = v3 + v1[19];
  uint64_t v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v11(v10, 1, v5)) {
    v7(v10, v5);
  }
  uint64_t v12 = v3 + v1[20];
  uint64_t v13 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13))
  {
    uint64_t v14 = v12 + *(int *)(v13 + 20);
    if (!v11(v14, 1, v5)) {
      v7(v14, v5);
    }
  }
  swift_release();

  return _swift_deallocObject(v0, ((v16 + ((v2 + 24) & ~v2) + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_1003B1648(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for SharedBeaconRecord(0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = v1 + v4;
  uint64_t v7 = (uint64_t *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];

  return sub_10038C964(a1, v5, v6, v8, v9);
}

uint64_t sub_1003B16F0(uint64_t *a1)
{
  return sub_1003B171C(a1, type metadata accessor for SharedBeaconRecord, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_100391F44);
}

uint64_t sub_1003B171C(uint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = *(void *)(a2(0) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v3 + 16);
  uint64_t v8 = *(void *)(v3 + 24);
  uint64_t v9 = v3 + v6;
  uint64_t v10 = (uint64_t *)(v3 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  uint64_t v13 = *a1;

  return a3(v13, v7, v8, v9, v11, v12);
}

uint64_t sub_1003B17DC()
{
  uint64_t v1 = (int *)type metadata accessor for SharedBeaconRecord(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v16 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  swift_release();
  uint64_t v3 = v0 + ((v2 + 32) & ~v2);
  sub_10001CFB8(*(void *)v3, *(void *)(v3 + 8));
  uint64_t v4 = v3 + v1[5];
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  v7(v3 + v1[6], v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = v3 + v1[18];
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  uint64_t v10 = v3 + v1[19];
  uint64_t v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v11(v10, 1, v5)) {
    v7(v10, v5);
  }
  uint64_t v12 = v3 + v1[20];
  uint64_t v13 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13))
  {
    uint64_t v14 = v12 + *(int *)(v13 + 20);
    if (!v11(v14, 1, v5)) {
      v7(v14, v5);
    }
  }
  swift_release();

  return _swift_deallocObject(v0, ((v16 + ((v2 + 32) & ~v2) + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_1003B1A94(uint64_t a1)
{
  return sub_1003B1AC0(a1, type metadata accessor for SharedBeaconRecord, (void (*)(void))type metadata accessor for SharedBeaconRecord);
}

uint64_t sub_1003B1AC0(uint64_t a1, uint64_t (*a2)(void), void (*a3)(void))
{
  uint64_t v6 = *(void *)(a2(0) - 8);
  unint64_t v7 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v8 = (*(void *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  return sub_100393D8C(a1, *(void *)(v3 + 16), *(void *)(v3 + 24), v3 + v7, *(uint64_t (**)(uint64_t))(v3 + v8), *(void *)(v3 + v8 + 8), a3);
}

uint64_t sub_1003B1B6C()
{
  uint64_t v1 = (int *)type metadata accessor for SharedBeaconRecord(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v16 = *(void *)(*((void *)v1 - 1) + 64);
  swift_errorRelease();
  uint64_t v3 = v0 + ((v2 + 24) & ~v2);
  sub_10001CFB8(*(void *)v3, *(void *)(v3 + 8));
  uint64_t v4 = v3 + v1[5];
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  v7(v3 + v1[6], v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = v3 + v1[18];
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  uint64_t v10 = v3 + v1[19];
  uint64_t v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v11(v10, 1, v5)) {
    v7(v10, v5);
  }
  uint64_t v12 = v3 + v1[20];
  uint64_t v13 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13))
  {
    uint64_t v14 = v12 + *(int *)(v13 + 20);
    if (!v11(v14, 1, v5)) {
      v7(v14, v5);
    }
  }
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, ((((v16 + ((v2 + 24) & ~v2) + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_1003B1E2C(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for SharedBeaconRecord(0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(v1 + 16);
  unint64_t v7 = *(uint64_t (**)(uint64_t))(v1 + v5);
  uint64_t v8 = *(uint64_t (**)(uint64_t))(v1 + v5 + 8);
  uint64_t v9 = *(uint64_t (**)(uint64_t))(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8));

  return sub_10038CBF4(a1, v6, v1 + v4, v7, v8, v9);
}

uint64_t sub_1003B1EDC()
{
  uint64_t v1 = (int *)type metadata accessor for SharedBeaconRecord(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v16 = *(void *)(*((void *)v1 - 1) + 64);
  swift_unknownObjectRelease();
  swift_release();
  uint64_t v3 = v0 + ((v2 + 40) & ~v2);
  sub_10001CFB8(*(void *)v3, *(void *)(v3 + 8));
  uint64_t v4 = v3 + v1[5];
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  v7(v3 + v1[6], v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = v3 + v1[18];
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  uint64_t v10 = v3 + v1[19];
  uint64_t v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v11(v10, 1, v5)) {
    v7(v10, v5);
  }
  uint64_t v12 = v3 + v1[20];
  uint64_t v13 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13))
  {
    uint64_t v14 = v12 + *(int *)(v13 + 20);
    if (!v11(v14, 1, v5)) {
      v7(v14, v5);
    }
  }
  swift_release();

  return _swift_deallocObject(v0, ((v16 + ((v2 + 40) & ~v2) + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_1003B2194(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for SharedBeaconRecord(0) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = (uint64_t)v1 + v5;
  uint64_t v10 = (void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v13;
  *uint64_t v13 = v2;
  v13[1] = sub_100033F68;
  return sub_10038D1BC(a1, v6, v7, v8, v9, v11, v12);
}

uint64_t sub_1003B22D0()
{
  uint64_t v1 = (int *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  uint64_t v6 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v7 = v0 + v3 + v1[8];
  uint64_t v8 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = v6 + v1[9];
  uint64_t v10 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_1003B2448()
{
  uint64_t v1 = *(void *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = v0 + v2;
  unint64_t v5 = (uint64_t *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];

  return sub_1003845DC(v3, v4, v6, v7);
}

uint64_t sub_1003B24DC()
{
  uint64_t v1 = (int *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (v3 + *(void *)(*(void *)v1 + 64) + 31) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v7 = v6 + v1[8];
  uint64_t v8 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = v6 + v1[9];
  uint64_t v10 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v5 + 16, v4);
}

void sub_1003B2660(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = v4 + *(void *)(v3 + 64);
  unint64_t v6 = (v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void (**)(void))(v1 + v6);
  uint64_t v8 = *(void *)(v1 + v6 + 8);
  char v9 = *(unsigned char *)(v1 + v6 + 16);
  uint64_t v10 = *(void (**)(void))(v1 + ((v5 + 31) & 0xFFFFFFFFFFFFFFF8));

  sub_1003853B0(a1, v1 + v4, v7, v8, v9, v10);
}

uint64_t sub_1003B2714()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1003B2724()
{
  swift_release();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1003B275C()
{
  uint64_t v1 = (int *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 48) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  swift_release();
  swift_release();
  uint64_t v6 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v7 = v0 + v3 + v1[8];
  uint64_t v8 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = v6 + v1[9];
  uint64_t v10 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_1003B28E0(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = (void (*)(void))v1[4];
  uint64_t v8 = v1[5];
  uint64_t v9 = *(void *)((char *)v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_100386460(a1, v5, v6, v7, v8, (uint64_t)v1 + v4, v9);
}

uint64_t sub_1003B2984()
{
  uint64_t v1 = *(void *)(sub_10000588C(&qword_10163B9F0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = v0 + v3;
  uint64_t v6 = (int *)type metadata accessor for OwnedBeaconRecord();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v6 - 1) + 48))(v0 + v3, 1, v6))
  {
    sub_10001CFB8(*(void *)v5, *(void *)(v5 + 8));
    uint64_t v7 = v5 + v6[5];
    uint64_t v8 = type metadata accessor for UUID();
    uint64_t v9 = *(void *)(v8 - 8);
    unint64_t v20 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v20(v7, v8);
    uint64_t v10 = v5 + v6[6];
    type metadata accessor for StableIdentifier();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 4u:
        goto LABEL_7;
      case 1u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_7;
      case 2u:
        v20(v10, v8);
        uint64_t v19 = v4;
        sub_10000588C(&qword_1016555E0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_6;
      case 3u:
        v20(v10, v8);
        uint64_t v19 = v4;
        sub_10000588C((uint64_t *)&unk_1016565E0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_6:
        uint64_t v4 = v19;
LABEL_7:
        swift_bridgeObjectRelease();
        break;
      default:
        break;
    }
    uint64_t v11 = v5 + v6[7];
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v11, 1, v8)) {
      v20(v11, v8);
    }
    uint64_t v12 = v5 + v6[8];
    uint64_t v13 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
    sub_10001CFB8(*(void *)(v5 + v6[9]), *(void *)(v5 + v6[9] + 8));
    uint64_t v14 = (uint64_t *)(v5 + v6[10]);
    unint64_t v15 = v14[1];
    if (v15 >> 60 != 15) {
      sub_10001CFB8(*v14, v15);
    }
    uint64_t v16 = (uint64_t *)(v5 + v6[11]);
    unint64_t v17 = v16[1];
    if (v17 >> 60 != 15) {
      sub_10001CFB8(*v16, v17);
    }
    sub_10001CFB8(*(void *)(v5 + v6[12]), *(void *)(v5 + v6[12] + 8));
    sub_10001CFB8(*(void *)(v5 + v6[13]), *(void *)(v5 + v6[13] + 8));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();

  return _swift_deallocObject(v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_1003B2D5C(uint64_t a1)
{
  uint64_t v3 = *(void *)(sub_10000588C(&qword_10163B9F0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_1003882C8(a1, v1 + v4, v5);
}

uint64_t sub_1003B2E00()
{
  uint64_t v2 = *(void *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = swift_task_alloc();
  long long v9 = *(_OWORD *)(v0 + v5);
  *(void *)(v1 + 16) = v8;
  *(void *)uint64_t v8 = v1;
  *(void *)(v8 + 8) = sub_100033F68;
  *(_OWORD *)(v8 + 192) = v9;
  *(void *)(v8 + 176) = v6;
  *(void *)(v8 + 184) = v7;
  return _swift_task_switch(sub_1003866AC, 0, 0);
}

uint64_t sub_1003B2F28(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_100033F68;
  return sub_1003872AC(a1, a2, v7, v6);
}

uint64_t sub_1003B2FDC()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1003B30B0(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v4 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  long long v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *long long v9 = v2;
  v9[1] = sub_100033F68;
  return sub_100387A38(a1, v5, v6, v7, v8);
}

uint64_t sub_1003B31AC(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100033F68;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1016505D0 + dword_1016505D0);
  return v6(a1, v4);
}

uint64_t sub_1003B3264()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1003B3330(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return sub_100389298(a1, a2, v6, v7);
}

uint64_t sub_1003B33B4()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1003B3480(unsigned char *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v4 = *(void (**)(uint64_t *))(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_10038946C(a1, v4, v5, v6);
}

uint64_t sub_1003B34F4(uint64_t a1)
{
  return sub_10038959C(a1, *(void (**)(void *))(v1 + 16));
}

uint64_t sub_1003B3500()
{
  uint64_t v1 = (int *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v7 = v6 + v1[8];
  uint64_t v8 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = v6 + v1[9];
  uint64_t v10 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v5 + 16, v4);
}

void sub_1003B3680(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v1 + v4;
  uint64_t v7 = *(void *)(v1 + v5);
  uint64_t v8 = v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = *(void (**)(void *))v8;
  uint64_t v10 = *(void *)(v8 + 8);

  sub_10038475C(a1, v6, v7, v9, v10);
}

uint64_t sub_1003B372C()
{
  uint64_t v1 = (int *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v7 = v6 + v1[8];
  uint64_t v8 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = v6 + v1[9];
  uint64_t v10 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v5 + 8, v4);
}

uint64_t sub_1003B38AC(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void (**)(void))(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v7 = *(void (**)(void))(v1 + v5);
  uint64_t v8 = *(void *)(v1 + v5 + 8);

  return sub_100388C7C(a1, v1 + v4, v7, v8, v6);
}

uint64_t sub_1003B395C(void **a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = v1 + v4;
  uint64_t v8 = v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = *(void (**)(void))v8;
  uint64_t v10 = *(void *)(v8 + 8);

  return sub_100B2B684(a1, v5, v6, v7, v9, v10);
}

uint64_t sub_1003B3A04()
{
  uint64_t v1 = (int *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  swift_release();
  uint64_t v6 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v7 = v0 + v3 + v1[8];
  uint64_t v8 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = v6 + v1[9];
  uint64_t v10 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_1003B3B84(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v7 = *(uint64_t (**)(uint64_t))(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_100393AA4(a1, v5, v6, v1 + v4, v7);
}

uint64_t sub_1003B3C28()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v19 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v4 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v5 = v0 + v3 + v1[5];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  uint64_t v9 = v0 + v3 + v1[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 24) & ~v2;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 24) & ~v2;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v3 = v18;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v10 = v4 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6)) {
    v8(v10, v6);
  }
  uint64_t v11 = v4 + v1[8];
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  sub_10001CFB8(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v13 = (uint64_t *)(v4 + v1[10]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_10001CFB8(*v13, v14);
  }
  unint64_t v15 = (uint64_t *)(v4 + v1[11]);
  unint64_t v16 = v15[1];
  if (v16 >> 60 != 15) {
    sub_10001CFB8(*v15, v16);
  }
  sub_10001CFB8(*(void *)(v4 + v1[12]), *(void *)(v4 + v1[12] + 8));
  sub_10001CFB8(*(void *)(v4 + v1[13]), *(void *)(v4 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v19 + v3 + 1, v2 | 7);
}

uint64_t sub_1003B3FB0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v2 + 16);
  int v8 = *(unsigned __int8 *)(v2 + v6 + *(void *)(v5 + 64));

  return sub_10038AA98(a1, a2, v7, v2 + v6, v8);
}

uint64_t sub_1003B4058(uint64_t a1, char a2)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t *))(v2 + 16);
  uint64_t v5 = a1;
  char v6 = a2 & 1;
  return v3(&v5);
}

uint64_t sub_1003B4098(uint64_t a1)
{
  return sub_10038AB34(a1, *(uint64_t (**)(uint64_t, uint64_t))(v1 + 16));
}

uint64_t sub_1003B40AC()
{
  *(void *)(v0 + 80) = 0;
  return swift_release();
}

uint64_t sub_1003B40B8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003B40C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1003B40D8()
{
  return swift_release();
}

uint64_t sub_1003B40E0()
{
  return sub_1003B56E0(56);
}

uint64_t sub_1003B40E8()
{
  return sub_1003B5070((uint64_t (*)(void, void, void, void, void))sub_1003728FC);
}

uint64_t sub_1003B4100()
{
  return sub_1003B5800((void (*)(void))&_swift_bridgeObjectRelease);
}

void sub_1003B4118()
{
  sub_100374080(*(void (**)(void *, uint64_t))(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1003B4138(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 40);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

uint64_t sub_1003B4150()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100033F68;
  v2[2] = v0;
  return _swift_task_switch(sub_100374B0C, v0, 0);
}

uint64_t *sub_1003B41F4(uint64_t *a1)
{
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];
  uint64_t v4 = a1[10];
  unint64_t v5 = a1[11];
  uint64_t v6 = a1[12];
  unint64_t v7 = a1[13];
  uint64_t v8 = a1[14];
  unint64_t v10 = a1[15];
  unint64_t v11 = a1[17];
  uint64_t v12 = a1[16];
  sub_1000361E0(*a1, a1[1]);
  sub_1000361E0(v2, v3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000361E0(v4, v5);
  sub_1000361E0(v6, v7);
  sub_1000361E0(v8, v10);
  sub_1000361E0(v12, v11);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1003B42C8(uint64_t a1)
{
  return a1;
}

uint64_t sub_1003B432C(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, unint64_t a16, uint64_t a17, unint64_t a18)
{
  if (a6)
  {
    sub_10001CFB8(result, a2);
    sub_10001CFB8(a3, a4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001CFB8(a11, a12);
    sub_10001CFB8(a13, a14);
    sub_10001CFB8(a15, a16);
    sub_10001CFB8(a17, a18);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1003B440C@<X0>(unsigned char *a1@<X8>)
{
  return sub_10100BA70(v1, a1);
}

uint64_t *sub_1003B4428(uint64_t *a1)
{
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  unint64_t v5 = a1[5];
  uint64_t v6 = a1[6];
  unint64_t v7 = a1[7];
  uint64_t v8 = a1[8];
  unint64_t v9 = a1[9];
  sub_10001CFB8(*a1, a1[1]);
  sub_10001CFB8(v2, v3);
  sub_10001CFB8(v4, v5);
  sub_100037A24(v6, v7);
  sub_100037A24(v8, v9);
  return a1;
}

void sub_1003B44B8()
{
  dispatch_group_leave(*(dispatch_group_t *)(v0 + 16));
}

uint64_t sub_1003B44C0(uint64_t a1)
{
  return sub_10038E158(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

uint64_t sub_1003B44CC()
{
  return _swift_deallocObject(v0, 25, 7);
}

uint64_t sub_1003B4504()
{
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

void sub_1003B455C(uint64_t a1, uint64_t a2)
{
  sub_100375540(a1, a2, *(NSObject **)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void **)(v2 + 48));
}

uint64_t sub_1003B4570()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 16);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_100033F68;
  *(_OWORD *)(v2 + 16) = v3;
  return _swift_task_switch(sub_100376114, 0, 0);
}

uint64_t sub_1003B461C()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v19 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  swift_release();
  uint64_t v4 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v5 = v0 + v3 + v1[5];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  uint64_t v9 = v0 + v3 + v1[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 32) & ~v2;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 32) & ~v2;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v3 = v18;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v10 = v4 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6)) {
    v8(v10, v6);
  }
  uint64_t v11 = v4 + v1[8];
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  sub_10001CFB8(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v13 = (uint64_t *)(v4 + v1[10]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_10001CFB8(*v13, v14);
  }
  unint64_t v15 = (uint64_t *)(v4 + v1[11]);
  unint64_t v16 = v15[1];
  if (v16 >> 60 != 15) {
    sub_10001CFB8(*v15, v16);
  }
  sub_10001CFB8(*(void *)(v4 + v1[12]), *(void *)(v4 + v1[12] + 8));
  sub_10001CFB8(*(void *)(v4 + v1[13]), *(void *)(v4 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v3 + v19, v2 | 7);
}

uint64_t sub_1003B49A8()
{
  uint64_t v2 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  uint64_t v5 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_100033F68;
  return sub_100376620(v3, v4, v5);
}

uint64_t sub_1003B4A88()
{
  uint64_t v1 = (int *)type metadata accessor for BeaconEstimatedLocation();
  uint64_t v25 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v2 = (v25 + 16) & ~v25;
  uint64_t v3 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v4 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v24 = *(unsigned __int8 *)(*((void *)v4 - 1) + 80);
  uint64_t v26 = (v2 + v3 + v24) & ~v24;
  uint64_t v23 = *(void *)(*((void *)v4 - 1) + 64);
  uint64_t v5 = v0 + v2;
  sub_10001CFB8(*(void *)(v0 + v2), *(void *)(v0 + v2 + 8));
  uint64_t v6 = v0 + v2 + v1[5];
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v22 = *(void *)(v7 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
  v8(v6, v7);
  v8(v5 + v1[6], v7);
  uint64_t v9 = v5 + v1[10];
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v11 = *(void *)(v10 - 8);
  unint64_t v27 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v27(v9, v10);
  uint64_t v12 = v5 + v1[12];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v12, 1, v10)) {
    v27(v12, v10);
  }
  swift_bridgeObjectRelease();
  uint64_t v13 = v26;
  uint64_t v14 = v0 + v26;
  sub_10001CFB8(*(void *)(v0 + v26), *(void *)(v0 + v26 + 8));
  v8(v0 + v26 + v4[5], v7);
  uint64_t v15 = v0 + v26 + v4[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_8;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_8;
    case 2u:
      v8(v15, v7);
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_7;
    case 3u:
      v8(v15, v7);
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_7:
      uint64_t v13 = v26;
LABEL_8:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v16 = v14 + v4[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48))(v16, 1, v7)) {
    v8(v16, v7);
  }
  v27(v14 + v4[8], v10);
  sub_10001CFB8(*(void *)(v14 + v4[9]), *(void *)(v14 + v4[9] + 8));
  unint64_t v17 = (uint64_t *)(v14 + v4[10]);
  unint64_t v18 = v17[1];
  if (v18 >> 60 != 15) {
    sub_10001CFB8(*v17, v18);
  }
  uint64_t v19 = (uint64_t *)(v14 + v4[11]);
  unint64_t v20 = v19[1];
  if (v20 >> 60 != 15) {
    sub_10001CFB8(*v19, v20);
  }
  sub_10001CFB8(*(void *)(v14 + v4[12]), *(void *)(v14 + v4[12] + 8));
  sub_10001CFB8(*(void *)(v14 + v4[13]), *(void *)(v14 + v4[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v13 + v23, v25 | v24 | 7);
}

uint64_t sub_1003B4F58(uint64_t a1)
{
  type metadata accessor for BeaconEstimatedLocation();
  type metadata accessor for OwnedBeaconRecord();

  return sub_100376214(a1);
}

double sub_1003B5030(uint64_t a1)
{
  *(void *)(a1 + 144) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t sub_1003B5050()
{
  return sub_1003B56E0(56);
}

uint64_t sub_1003B5058()
{
  return sub_1003B5070((uint64_t (*)(void, void, void, void, void))sub_10036F088);
}

uint64_t sub_1003B5070(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_1003B508C()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100033F68;
  return sub_100370698(v2, v3);
}

uint64_t sub_1003B5124()
{
  swift_release();
  swift_release();

  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

void sub_1003B517C(uint64_t a1)
{
  sub_100370AC4(a1, *(NSObject **)(v1 + 16), *(void *)(v1 + 24), *(unsigned __int8 *)(v1 + 32), *(void *)(v1 + 40), *(void **)(v1 + 48), *(void *)(v1 + 56));
}

uint64_t sub_1003B5190()
{
  swift_release();
  swift_release();

  sub_10001CFB8(*(void *)(v0 + 48), *(void *)(v0 + 56));
  sub_10001CFB8(*(void *)(v0 + 64), *(void *)(v0 + 72));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001CFB8(*(void *)(v0 + 128), *(void *)(v0 + 136));
  sub_10001CFB8(*(void *)(v0 + 144), *(void *)(v0 + 152));
  sub_10001CFB8(*(void *)(v0 + 160), *(void *)(v0 + 168));
  sub_10001CFB8(*(void *)(v0 + 176), *(void *)(v0 + 184));
  sub_10001CFB8(*(void *)(v0 + 192), *(void *)(v0 + 200));
  sub_10001CFB8(*(void *)(v0 + 208), *(void *)(v0 + 216));
  sub_10001CFB8(*(void *)(v0 + 224), *(void *)(v0 + 232));
  sub_10001CFB8(*(void *)(v0 + 240), *(void *)(v0 + 248));
  swift_release();
  sub_10001CFB8(*(void *)(v0 + 272), *(void *)(v0 + 280));

  return _swift_deallocObject(v0, 296, 7);
}

void sub_1003B5250(void *a1)
{
  sub_100370FD4(a1, *(NSObject **)(v1 + 16), *(void *)(v1 + 24), *(objc_class **)(v1 + 32), *(void **)(v1 + 40), v1 + 48, *(void *)(v1 + 240), *(void *)(v1 + 248), *(unsigned char *)(v1 + 256), *(void **)(v1 + 264), *(void *)(v1 + 272), *(void *)(v1 + 280));
}

uint64_t sub_1003B529C(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, unint64_t a16, uint64_t a17, unint64_t a18, uint64_t a19, unint64_t a20,uint64_t a21,unint64_t a22,uint64_t a23,unint64_t a24)
{
  if (a6)
  {
    sub_1000361E0(result, a2);
    sub_1000361E0(a3, a4);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000361E0(a11, a12);
    sub_1000361E0(a13, a14);
    sub_1000361E0(a15, a16);
    sub_1000361E0(a17, a18);
    sub_1000361E0(a19, a20);
    sub_1000361E0(a21, a22);
    return sub_1000361E0(a23, a24);
  }
  return result;
}

void *sub_1003B53B4(void *a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  a2(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], a1[8], a1[9], a1[10], a1[11], a1[12], a1[13], a1[14], a1[15], a1[16], a1[17], a1[18],
    a1[19],
    a1[20],
    a1[21],
    a1[22],
    a1[23]);
  return a1;
}

uint64_t sub_1003B5428(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, unint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, unint64_t a16, uint64_t a17, unint64_t a18, uint64_t a19, unint64_t a20,uint64_t a21,unint64_t a22,uint64_t a23,unint64_t a24)
{
  if (a6)
  {
    sub_10001CFB8(result, a2);
    sub_10001CFB8(a3, a4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001CFB8(a11, a12);
    sub_10001CFB8(a13, a14);
    sub_10001CFB8(a15, a16);
    sub_10001CFB8(a17, a18);
    sub_10001CFB8(a19, a20);
    sub_10001CFB8(a21, a22);
    return sub_10001CFB8(a23, a24);
  }
  return result;
}

double sub_1003B5540(_OWORD *a1)
{
  double result = 0.0;
  a1[10] = 0u;
  a1[11] = 0u;
  a1[8] = 0u;
  a1[9] = 0u;
  a1[6] = 0u;
  a1[7] = 0u;
  a1[4] = 0u;
  a1[5] = 0u;
  a1[2] = 0u;
  a1[3] = 0u;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

uint64_t sub_1003B5560()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100033F68;
  return sub_101197FC4(v0);
}

uint64_t sub_1003B55F0()
{
  return sub_1003B62E0((void (*)(void))&_swift_release, (void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_1003B561C()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = v0[5];
  uint64_t v6 = v0[6];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  void *v7 = v1;
  v7[1] = sub_100033F68;
  return sub_101197C44(v2, v3, v4, v5, v6);
}

uint64_t sub_1003B56D8()
{
  return sub_1003B56E0(48);
}

uint64_t sub_1003B56E0(uint64_t a1)
{
  swift_release();

  swift_release();

  return _swift_deallocObject(v1, a1, 7);
}

uint64_t sub_1003B5734()
{
  return sub_10036E284(*(void *)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1003B5740()
{
  return sub_1003B5800((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_1003B5758()
{
  swift_release();
  sub_1003B579C(*(id *)(v0 + 32), *(unsigned char *)(v0 + 40));

  return _swift_deallocObject(v0, 41, 7);
}

void sub_1003B579C(id a1, char a2)
{
  if (a2) {
}
  }

uint64_t sub_1003B57A8()
{
  return (*(uint64_t (**)(void, void))(v0 + 16))(*(void *)(v0 + 32), *(unsigned __int8 *)(v0 + 40));
}

id sub_1003B57DC(id result, char a2)
{
  if (a2) {
    return result;
  }
  return result;
}

uint64_t sub_1003B57E8()
{
  return sub_1003B5800((void (*)(void))&_swift_release);
}

uint64_t sub_1003B5800(void (*a1)(void))
{
  swift_release();
  a1(*(void *)(v1 + 32));

  return _swift_deallocObject(v1, 40, 7);
}

void sub_1003B5850(char a1)
{
  sub_10036DB88(a1, *(void (**)(void **, uint64_t))(v1 + 16));
}

uint64_t sub_1003B585C()
{
  return sub_1003B62E0((void (*)(void))&_swift_unknownObjectRelease, (void (*)(void))&_swift_release);
}

uint64_t sub_1003B5888(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_100033F68;
  return sub_100AB5640(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1003B5958(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10001D2E4;
  return sub_100AF6B80(a1, v4, v1 + 24);
}

uint64_t sub_1003B5A18()
{
  uint64_t v1 = (int *)type metadata accessor for SharedBeaconRecord(0);
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v16 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v3 = v0 + ((v2 + 24) & ~v2);
  sub_10001CFB8(*(void *)v3, *(void *)(v3 + 8));
  uint64_t v4 = v3 + v1[5];
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  v7(v3 + v1[6], v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = v3 + v1[18];
  uint64_t v9 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  uint64_t v10 = v3 + v1[19];
  uint64_t v11 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v11(v10, 1, v5)) {
    v7(v10, v5);
  }
  uint64_t v12 = v3 + v1[20];
  uint64_t v13 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13))
  {
    uint64_t v14 = v12 + *(int *)(v13 + 20);
    if (!v11(v14, 1, v5)) {
      v7(v14, v5);
    }
  }

  return _swift_deallocObject(v0, ((v2 + 24) & ~v2) + v16, v2 | 7);
}

uint64_t sub_1003B5CA8()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100033F68;
  v2[17] = v0;
  return _swift_task_switch(sub_10037AD0C, 0, 0);
}

uint64_t sub_1003B5D50(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100033F68;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_101642968 + dword_101642968);
  return v6(a1, v4);
}

uint64_t sub_1003B5E08()
{
  return sub_1003B6464((void (*)(void))&_swift_release);
}

uint64_t sub_1003B5E20()
{
  return sub_10037B7C4(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1003B5E28()
{
  return sub_1003B63BC((void (*)(void))&_swift_unknownObjectRelease);
}

uint64_t sub_1003B5E40(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_10001D2E4;
  return sub_1009CED60(a1, v4, v5, v6);
}

uint64_t sub_1003B5EF4()
{
  return sub_1003B63BC((void (*)(void))&_swift_unknownObjectRelease);
}

uint64_t sub_1003B5F0C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_100033F68;
  return sub_1012DD194(a1, v4, v5, v6);
}

uint64_t sub_1003B5FC0(uint64_t a1)
{
  return sub_1012DD49C(a1);
}

uint64_t sub_1003B5FDC()
{
  return sub_10015B17C();
}

uint64_t sub_1003B5FF8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003B6008(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t *sub_1003B6070(uint64_t *a1)
{
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  unint64_t v5 = a1[5];
  sub_100037A24(*a1, a1[1]);
  sub_10001CFB8(v2, v3);
  sub_100037A24(v4, v5);
  return a1;
}

uint64_t sub_1003B60D4()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1003B6110()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 56) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1003B61EC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1003B624C()
{
  return sub_1003B6464((void (*)(void))&_swift_release);
}

void sub_1003B6264()
{
  sub_10037CF64(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1003B626C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1003B62AC(char a1)
{
  sub_10037D320(a1, *(NSObject **)(v1 + 16));
}

uint64_t sub_1003B62B4()
{
  return sub_1003B62E0((void (*)(void))&_swift_unknownObjectRelease, (void (*)(void))&_swift_release);
}

uint64_t sub_1003B62E0(void (*a1)(void), void (*a2)(void))
{
  a1(v2[2]);
  a2(v2[4]);
  a2(v2[6]);

  return _swift_deallocObject(v2, 56, 7);
}

uint64_t sub_1003B6344(uint64_t a1)
{
  return sub_100A5482C(a1, v1);
}

uint64_t sub_1003B6360(uint64_t a1)
{
  return sub_100A4E0F8(a1, v1);
}

void sub_1003B637C()
{
  j__dispatch_group_leave(*(dispatch_group_t *)(v0 + 16));
}

uint64_t sub_1003B6388()
{
  return sub_100379954(*(void (**)(char *))(v0 + 16));
}

uint64_t sub_1003B63A4()
{
  return sub_1003B63BC((void (*)(void))&_swift_release);
}

uint64_t sub_1003B63BC(void (*a1)(void))
{
  a1(*(void *)(v1 + 16));
  swift_release();

  return _swift_deallocObject(v1, 40, 7);
}

uint64_t sub_1003B6404()
{
  return sub_100379A28(*(void *)(v0 + 16), *(void (**)(uint64_t))(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1003B6410@<X0>(uint64_t *a1@<X8>)
{
  return sub_100376B60(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_1003B642C(uint64_t a1)
{
  return sub_10037A108(a1, *(void (**)(char *))(v1 + 16));
}

uint64_t sub_1003B6434(uint64_t a1)
{
  return sub_10037A2D0(a1, *(uint64_t (**)(uint64_t))(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1003B6440()
{
  return sub_100377080(v0[2], v0[3], v0[4]);
}

uint64_t sub_1003B644C()
{
  return sub_1003B6464((void (*)(void))&_swift_release);
}

uint64_t sub_1003B6464(void (*a1)(void))
{
  swift_release();
  a1(*(void *)(v1 + 24));

  return _swift_deallocObject(v1, 32, 7);
}

uint64_t sub_1003B64B4()
{
  return sub_100377110();
}

uint64_t sub_1003B64C0()
{
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1003B6508(uint64_t a1)
{
  return sub_1003771E8(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1003B6514()
{
  uint64_t v1 = *(void *)(sub_10000588C((uint64_t *)&unk_101656900) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = v0 + v3;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_errorRelease();
  }
  else
  {
    sub_10001CFB8(*(void *)v5, *(void *)(v5 + 8));
    uint64_t v6 = (int *)type metadata accessor for OwnedBeaconRecord();
    uint64_t v7 = v5 + v6[5];
    uint64_t v8 = type metadata accessor for UUID();
    uint64_t v9 = *(void *)(v8 - 8);
    unint64_t v20 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
    v20(v7, v8);
    uint64_t v10 = v5 + v6[6];
    type metadata accessor for StableIdentifier();
    switch(swift_getEnumCaseMultiPayload())
    {
      case 0u:
      case 4u:
        goto LABEL_8;
      case 1u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_8;
      case 2u:
        v20(v10, v8);
        uint64_t v19 = v4;
        sub_10000588C(&qword_1016555E0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_7;
      case 3u:
        v20(v10, v8);
        uint64_t v19 = v4;
        sub_10000588C((uint64_t *)&unk_1016565E0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_7:
        uint64_t v4 = v19;
LABEL_8:
        swift_bridgeObjectRelease();
        break;
      default:
        break;
    }
    uint64_t v11 = v5 + v6[7];
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v11, 1, v8)) {
      v20(v11, v8);
    }
    uint64_t v12 = v5 + v6[8];
    uint64_t v13 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
    sub_10001CFB8(*(void *)(v5 + v6[9]), *(void *)(v5 + v6[9] + 8));
    uint64_t v14 = (uint64_t *)(v5 + v6[10]);
    unint64_t v15 = v14[1];
    if (v15 >> 60 != 15) {
      sub_10001CFB8(*v14, v15);
    }
    uint64_t v16 = (uint64_t *)(v5 + v6[11]);
    unint64_t v17 = v16[1];
    if (v17 >> 60 != 15) {
      sub_10001CFB8(*v16, v17);
    }
    sub_10001CFB8(*(void *)(v5 + v6[12]), *(void *)(v5 + v6[12] + 8));
    sub_10001CFB8(*(void *)(v5 + v6[13]), *(void *)(v5 + v6[13] + 8));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, ((((((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_1003B68F8()
{
  uint64_t v1 = *(void *)(sub_10000588C((uint64_t *)&unk_101656900) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_100377674(v0 + v2, v3);
}

uint64_t sub_1003B69A0(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = type metadata accessor for OwnedBeaconRecord();
  return sub_101113BD4(a1 + *(int *)(v4 + 24), v3) & 1;
}

BOOL sub_1003B69F0(uint64_t a1)
{
  return (sub_100D20CEC(a1, *(void *)(v1 + 16)) & 1) == 0;
}

uint64_t sub_1003B6A24()
{
  uint64_t v1 = v0;
  unint64_t v2 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v3 = *(unsigned __int8 *)(*((void *)v2 - 1) + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v20 = *(void *)(*((void *)v2 - 1) + 64);
  uint64_t v5 = v0 + v4;
  sub_10001CFB8(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v6 = v0 + v4 + v2[5];
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  uint64_t v10 = v0 + v4 + v2[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v9(v10, v7);
      uint64_t v19 = v0;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v9(v10, v7);
      uint64_t v19 = v0;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v1 = v19;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v11 = v5 + v2[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v11, 1, v7)) {
    v9(v11, v7);
  }
  uint64_t v12 = v5 + v2[8];
  uint64_t v13 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
  sub_10001CFB8(*(void *)(v5 + v2[9]), *(void *)(v5 + v2[9] + 8));
  uint64_t v14 = (uint64_t *)(v5 + v2[10]);
  unint64_t v15 = v14[1];
  if (v15 >> 60 != 15) {
    sub_10001CFB8(*v14, v15);
  }
  uint64_t v16 = (uint64_t *)(v5 + v2[11]);
  unint64_t v17 = v16[1];
  if (v17 >> 60 != 15) {
    sub_10001CFB8(*v16, v17);
  }
  sub_10001CFB8(*(void *)(v5 + v2[12]), *(void *)(v5 + v2[12] + 8));
  sub_10001CFB8(*(void *)(v5 + v2[13]), *(void *)(v5 + v2[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v1, v4 + v20, v3 | 7);
}

uint64_t sub_1003B6DA4(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_100378290(a1, v4);
}

uint64_t sub_1003B6E14(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1003B6E7C(uint64_t a1)
{
  return sub_1003802A0(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_1003B6E88()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v19 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v4 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v5 = v0 + v3 + v1[5];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  uint64_t v9 = v0 + v3 + v1[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 16) & ~v2;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 16) & ~v2;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v3 = v18;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v10 = v4 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6)) {
    v8(v10, v6);
  }
  uint64_t v11 = v4 + v1[8];
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  sub_10001CFB8(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v13 = (uint64_t *)(v4 + v1[10]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_10001CFB8(*v13, v14);
  }
  unint64_t v15 = (uint64_t *)(v4 + v1[11]);
  unint64_t v16 = v15[1];
  if (v16 >> 60 != 15) {
    sub_10001CFB8(*v15, v16);
  }
  sub_10001CFB8(*(void *)(v4 + v1[12]), *(void *)(v4 + v1[12] + 8));
  sub_10001CFB8(*(void *)(v4 + v1[13]), *(void *)(v4 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, ((((((v19 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_1003B723C(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (v5 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(uint64_t (**)(uint64_t))(v1 + v5);
  uint64_t v8 = *(void *)(v1 + v5 + 8);
  uint64_t v9 = *(void *)(v1 + v6);
  uint64_t v10 = *(void *)(v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8));

  return sub_10038ACD4(a1, v1 + v4, v7, v8, v9, v10);
}

uint64_t sub_1003B72F8()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v19 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v4 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v5 = v0 + v3 + v1[5];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  uint64_t v9 = v0 + v3 + v1[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 16) & ~v2;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 16) & ~v2;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v3 = v18;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v10 = v4 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6)) {
    v8(v10, v6);
  }
  uint64_t v11 = v4 + v1[8];
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  sub_10001CFB8(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v13 = (uint64_t *)(v4 + v1[10]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_10001CFB8(*v13, v14);
  }
  unint64_t v15 = (uint64_t *)(v4 + v1[11]);
  unint64_t v16 = v15[1];
  if (v16 >> 60 != 15) {
    sub_10001CFB8(*v15, v16);
  }
  sub_10001CFB8(*(void *)(v4 + v1[12]), *(void *)(v4 + v1[12] + 8));
  sub_10001CFB8(*(void *)(v4 + v1[13]), *(void *)(v4 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, ((((v19 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 10, v2 | 7);
}

uint64_t sub_1003B769C(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v1 + v4;
  uint64_t v7 = *(void *)(v1 + v5);
  uint64_t v8 = *(void *)(v1 + v5 + 8);
  uint64_t v9 = v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = *(void *)v9;
  int v11 = *(unsigned __int8 *)(v9 + 8);
  int v12 = *(unsigned __int8 *)(v9 + 9);

  return sub_100DBBAFC(a1, v6, v7, v8, v10, v11, v12);
}

uint64_t sub_1003B7758()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v19 = *(void *)(*((void *)v1 - 1) + 64);
  swift_release();
  uint64_t v4 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v5 = v0 + v3 + v1[5];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  uint64_t v9 = v0 + v3 + v1[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 24) & ~v2;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v8(v9, v6);
      uint64_t v18 = (v2 + 24) & ~v2;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v3 = v18;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v10 = v4 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v10, 1, v6)) {
    v8(v10, v6);
  }
  uint64_t v11 = v4 + v1[8];
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  sub_10001CFB8(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v13 = (uint64_t *)(v4 + v1[10]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_10001CFB8(*v13, v14);
  }
  unint64_t v15 = (uint64_t *)(v4 + v1[11]);
  unint64_t v16 = v15[1];
  if (v16 >> 60 != 15) {
    sub_10001CFB8(*v15, v16);
  }
  sub_10001CFB8(*(void *)(v4 + v1[12]), *(void *)(v4 + v1[12] + 8));
  sub_10001CFB8(*(void *)(v4 + v1[13]), *(void *)(v4 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v3 + v19, v2 | 7);
}

uint64_t sub_1003B7BB4@<X0>(uint64_t a1@<X8>)
{
  return sub_1003A861C(a1);
}

uint64_t sub_1003B7BD4@<X0>(uint64_t a1@<X8>)
{
  return sub_1003A961C(a1);
}

uint64_t sub_1003B7BF0()
{
  uint64_t v1 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = 0;
  unint64_t v34 = 0xE000000000000000;
  _StringGuts.grow(_:)(84);
  v7._countAndFlagsBits = 0x7069726373627553;
  v7._object = (void *)0xEC0000006E6F6974;
  String.append(_:)(v7);
  v8._object = (void *)0x80000001013FB0A0;
  v8._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v8);
  uint64_t v9 = (int *)type metadata accessor for NotifyMeRequest.Subscription();
  v10._countAndFlagsBits = UUID.uuidString.getter();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._object = (void *)0xEC000000203A6574;
  v11._countAndFlagsBits = 0x6144747261747320;
  String.append(_:)(v11);
  sub_10001D074(v0, (uint64_t)v6, (uint64_t *)&unk_10163AC90);
  v12._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 0x3A64697575616220;
  v13._object = (void *)0xE900000000000020;
  String.append(_:)(v13);
  sub_10001D074(v0 + v9[7], (uint64_t)v3, &qword_101638CF0);
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v3, 1, v14) == 1)
  {
    sub_10001DAB4((uint64_t)v3, &qword_101638CF0);
    uint64_t v16 = 0;
    unint64_t v17 = (void *)0xE000000000000000;
  }
  else
  {
    uint64_t v16 = UUID.uuidString.getter();
    unint64_t v17 = v18;
    (*(void (**)(char *, uint64_t))(v15 + 8))(v3, v14);
  }
  v19._countAndFlagsBits = v16;
  v19._object = v17;
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._countAndFlagsBits = 0x756F632073646920;
  v20._object = (void *)0xEB0000000020746ELL;
  String.append(_:)(v20);
  v32._countAndFlagsBits = *(void *)(*(void *)(v0 + v9[8]) + 16);
  v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._countAndFlagsBits = 0xD000000000000016;
  v22._object = (void *)0x80000001013FB0C0;
  String.append(_:)(v22);
  sub_10001D074(v0 + v9[9], (uint64_t)v6, (uint64_t *)&unk_10163AC90);
  v23._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v23);
  swift_bridgeObjectRelease();
  v32._countAndFlagsBits = 0;
  v32._object = (void *)0xE000000000000000;
  _StringGuts.grow(_:)(22);
  swift_bridgeObjectRelease();
  v32._countAndFlagsBits = 0xD000000000000014;
  v32._object = (void *)0x80000001013FB0E0;
  v31[1] = *(void *)(*(void *)(v0 + v9[11]) + 16);
  v24._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  strcpy((char *)&v32, " productId: ");
  BYTE5(v32._object) = 0;
  HIWORD(v32._object) = -5120;
  uint64_t v25 = (uint64_t *)(v0 + v9[10]);
  uint64_t v26 = v25[1];
  if (v26) {
    uint64_t v27 = *v25;
  }
  else {
    uint64_t v27 = 0;
  }
  if (v26) {
    uint64_t v28 = (void *)v25[1];
  }
  else {
    uint64_t v28 = (void *)0xE000000000000000;
  }
  swift_bridgeObjectRetain();
  v29._countAndFlagsBits = v27;
  v29._object = v28;
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  String.append(_:)(v32);
  swift_bridgeObjectRelease();
  return v33;
}

uint64_t sub_1003B804C(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_101642AB8);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  Swift::String v7 = (char *)v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1003BBA1C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v9[1] = a2;
  sub_10000588C(&qword_101642AC8);
  sub_1003BBC20(&qword_101642AD0, &qword_101642AD8);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_1003B81D4()
{
  return 0x6269726373627573;
}

uint64_t sub_1003B81F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x6269726373627573 && a2 == 0xE900000000000065)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1003B8294(uint64_t a1)
{
  unint64_t v2 = sub_1003BBA1C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1003B82D0(uint64_t a1)
{
  unint64_t v2 = sub_1003BBA1C();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_1003B830C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1003BBA70(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1003B8338(void *a1)
{
  return sub_1003B804C(a1, *v1);
}

unint64_t sub_1003B8354(char a1)
{
  unint64_t result = 0x7461447472617473;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x7069726373627573;
      break;
    case 2:
      unint64_t result = 0x646E756F46636F6CLL;
      break;
    case 3:
      unint64_t result = 0x646975756162;
      break;
    case 4:
      unint64_t result = 7562345;
      break;
    case 5:
      unint64_t result = 0xD000000000000014;
      break;
    case 6:
      unint64_t result = 0x49746375646F7270;
      break;
    case 7:
      unint64_t result = 0x7261646E6F636573;
      break;
    case 8:
      unint64_t result = 0x76654464656E776FLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1003B84A4(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_101642B10);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  Swift::String v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1003BBCB4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v14) = 0;
  type metadata accessor for Date();
  sub_1003BBE38((unint64_t *)&unk_10163ACE0, (void (*)(uint64_t))&type metadata accessor for Date);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v2)
  {
    Swift::String v11 = (int *)type metadata accessor for NotifyMeRequest.Subscription();
    uint64_t v12 = v3;
    LOBYTE(v14) = 1;
    type metadata accessor for UUID();
    sub_1003BBE38(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v14) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v14) = 3;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    uint64_t v14 = *(void *)(v12 + v11[8]);
    char v13 = 4;
    sub_10000588C((uint64_t *)&unk_10164DBD0);
    sub_1003BBD08((unint64_t *)&qword_10163F7E0, (void (*)(void))sub_100037BB4);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v14) = 5;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v14) = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    uint64_t v14 = *(void *)(v12 + v11[11]);
    char v13 = 7;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v14 = *(void *)(v12 + v11[12]);
    char v13 = 8;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1003B8894@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v39 = a2;
  uint64_t v3 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v3 - 8);
  uint64_t v40 = (char *)v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v43 = *(void *)(v5 - 8);
  uint64_t v44 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  Swift::String v11 = (char *)v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  char v13 = (char *)v37 - v12;
  uint64_t v41 = sub_10000588C(&qword_101642AF8);
  uint64_t v14 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  uint64_t v16 = (char *)v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = type metadata accessor for NotifyMeRequest.Subscription();
  __chkstk_darwin(v47);
  uint64_t v18 = (char *)v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = a1[3];
  uint64_t v45 = a1;
  sub_10001CD44(a1, v19);
  sub_1003BBCB4();
  uint64_t v42 = v16;
  uint64_t v20 = v46;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v20) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v45);
  }
  uint64_t v21 = (uint64_t)v40;
  uint64_t v38 = v11;
  uint64_t v46 = v14;
  uint64_t v22 = type metadata accessor for Date();
  LOBYTE(v49) = 0;
  uint64_t v23 = sub_1003BBE38(&qword_10163ACC0, (void (*)(uint64_t))&type metadata accessor for Date);
  uint64_t v24 = v41;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v37[1] = v23;
  v37[2] = v22;
  sub_10001D608((uint64_t)v13, (uint64_t)v18, (uint64_t *)&unk_10163AC90);
  LOBYTE(v49) = 1;
  sub_1003BBE38((unint64_t *)&qword_10163B010, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v25 = v7;
  uint64_t v26 = v44;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v27 = (uint64_t)v45;
  uint64_t v28 = v25;
  Swift::String v29 = (int *)v47;
  (*(void (**)(char *, char *, uint64_t))(v43 + 32))(&v18[*(int *)(v47 + 20)], v28, v26);
  LOBYTE(v49) = 2;
  v18[v29[6]] = KeyedDecodingContainer.decode(_:forKey:)() & 1;
  LOBYTE(v49) = 3;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  sub_10001D608(v21, (uint64_t)&v18[v29[7]], &qword_101638CF0);
  sub_10000588C((uint64_t *)&unk_10164DBD0);
  char v48 = 4;
  uint64_t v30 = sub_1003BBD08((unint64_t *)&qword_101642B08, (void (*)(void))sub_100037AA0);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v40 = (char *)v30;
  *(void *)&v18[v29[8]] = v49;
  LOBYTE(v49) = 5;
  uint64_t v31 = (uint64_t)v38;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  sub_10001D608(v31, (uint64_t)&v18[v29[9]], (uint64_t *)&unk_10163AC90);
  LOBYTE(v49) = 6;
  uint64_t v32 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v33 = (uint64_t *)&v18[v29[10]];
  *uint64_t v33 = v32;
  v33[1] = v34;
  char v48 = 7;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(void *)&v18[v29[11]] = v49;
  char v48 = 8;
  uint64_t v35 = v42;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v46 + 8))(v35, v24);
  *(void *)&v18[v29[12]] = v49;
  sub_1003BBD78((uint64_t)v18, v39);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
  return sub_1003BBDDC((uint64_t)v18);
}

unint64_t sub_1003B90B8()
{
  return sub_1003B8354(*v0);
}

uint64_t sub_1003B90C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1003BC268(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1003B90E8(uint64_t a1)
{
  unint64_t v2 = sub_1003BBCB4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1003B9124(uint64_t a1)
{
  unint64_t v2 = sub_1003BBCB4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1003B9160@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1003B8894(a1, a2);
}

uint64_t sub_1003B9178(void *a1)
{
  return sub_1003B84A4(a1);
}

uint64_t sub_1003B9190(uint64_t a1, void *a2)
{
  sub_10001CD44(a2, a2[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  Date.epoch.getter();
  sub_1000BD078((uint64_t)v3, v4);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v3);
}

uint64_t sub_1003B9238(uint64_t a1, uint64_t a2)
{
  v2[8] = a1;
  v2[9] = a2;
  uint64_t v3 = type metadata accessor for HashAlgorithm();
  v2[10] = v3;
  v2[11] = *(void *)(v3 - 8);
  v2[12] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for JSONEncoder.DateEncodingStrategy();
  v2[13] = v4;
  v2[14] = *(void *)(v4 - 8);
  v2[15] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Date();
  v2[16] = v5;
  v2[17] = *(void *)(v5 - 8);
  v2[18] = swift_task_alloc();
  return _swift_task_switch(sub_1003B93B0, 0, 0);
}

void sub_1003B93B0()
{
  unint64_t v1 = sub_10092D8F8((uint64_t)_swiftEmptyArrayStorage);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(1702195828, 0xE400000000000000, 0xD00000000000001BLL, 0x80000001013F64C0, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  id v3 = [self currentDevice];
  if (!v3)
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v4 = v3;
  id v5 = [v3 serverFriendlyDescription];

  if (!v5)
  {
LABEL_7:
    __break(1u);
    return;
  }
  uint64_t v6 = v0[17];
  uint64_t v7 = v0[18];
  uint64_t v8 = (void *)v0[15];
  uint64_t v9 = v0[16];
  uint64_t v32 = v0[14];
  uint64_t v33 = v0[13];
  uint64_t v34 = v0[8];
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;

  char v13 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(v10, v12, 0xD000000000000011, 0x80000001013F64E0, v13);
  unint64_t v14 = v1;
  swift_bridgeObjectRelease();
  Date.init()();
  uint64_t v15 = Date.epoch.getter();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v9);
  v0[4] = v15;
  uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v18 = v17;
  char v19 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(v16, v18, 0xD000000000000015, 0x80000001013F6500, v19);
  swift_bridgeObjectRelease();
  v0[5] = 1;
  uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v22 = v21;
  char v23 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(v20, v22, 0xD000000000000013, 0x80000001013F6520, v23);
  unint64_t v24 = v14;
  uint64_t v25 = swift_bridgeObjectRelease();
  uint64_t v26 = sub_100BCABFC(v25);
  uint64_t v28 = v27;
  char v29 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(v26, v28, 0x6567412D72657355, 0xEA0000000000746ELL, v29);
  v0[19] = v24;
  swift_bridgeObjectRelease();
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  v0[20] = JSONEncoder.init()();
  *uint64_t v8 = sub_1003B9190;
  v8[1] = 0;
  (*(void (**)(void *, void, uint64_t))(v32 + 104))(v8, enum case for JSONEncoder.DateEncodingStrategy.custom(_:), v33);
  dispatch thunk of JSONEncoder.dateEncodingStrategy.setter();
  v0[6] = v34;
  sub_1003B9F88();
  v0[21] = dispatch thunk of JSONEncoder.encode<A>(_:)();
  v0[22] = v30;
  swift_bridgeObjectRelease();
  uint64_t v35 = (void (__cdecl *)())((char *)&dword_10165AC30 + dword_10165AC30);
  uint64_t v31 = (void *)swift_task_alloc();
  v0[23] = v31;
  *uint64_t v31 = v0;
  v31[1] = sub_1003B9824;
  v35();
}

uint64_t sub_1003B9824(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 192) = a1;
  *(void *)(v3 + 200) = a2;
  swift_task_dealloc();
  return _swift_task_switch(sub_1003B9924, 0, 0);
}

uint64_t sub_1003B9924()
{
  uint64_t v2 = v0[24];
  unint64_t v1 = v0[25];
  uint64_t v4 = v0[21];
  unint64_t v3 = v0[22];
  uint64_t v6 = v0[11];
  uint64_t v5 = v0[12];
  uint64_t v7 = v0[10];
  v0[2] = v2;
  v0[3] = v1;
  sub_1000361E0(v2, v1);
  sub_1000361E0(v4, v3);
  sub_100A42CBC(v4, v3);
  sub_10001CFB8(v4, v3);
  sub_10001CFB8(v2, v1);
  uint64_t v8 = v0[3];
  v0[26] = v0[2];
  v0[27] = v8;
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v5, enum case for HashAlgorithm.sha256(_:), v7);
  uint64_t v9 = Data.hash(algorithm:)();
  uint64_t v11 = v10;
  v0[28] = v9;
  v0[29] = v10;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_10165AC28 + dword_10165AC28);
  uint64_t v12 = (void *)swift_task_alloc();
  v0[30] = v12;
  void *v12 = v0;
  v12[1] = sub_1003B9AAC;
  uint64_t v13 = v0[9];
  return v15(v9, v11, v13);
}

uint64_t sub_1003B9AAC(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  *(void *)(*(void *)v2 + 248) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_1003B9D10;
  }
  else
  {
    uint64_t v6 = v4[28];
    unint64_t v7 = v4[29];
    v4[32] = a1;
    sub_10001CFB8(v6, v7);
    uint64_t v5 = sub_1003B9BD8;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1003B9BD8()
{
  uint64_t v13 = v0;
  uint64_t v2 = v0[31];
  uint64_t v1 = v0[32];
  uint64_t v3 = v0[19];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v12 = v3;
  sub_1001EE9C8(v1, (uint64_t)sub_100BD6E00, 0, isUniquelyReferenced_nonNull_native, &v12);
  if (v2)
  {
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v6 = v0[26];
    unint64_t v7 = v0[27];
    uint64_t v8 = v12;
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    sub_10001CFB8(v6, v7);
    uint64_t v9 = v0[21];
    uint64_t v10 = v0[22];
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[1];
    return v11(v8, v9, v10);
  }
}

uint64_t sub_1003B9D10()
{
  uint64_t v1 = v0[26];
  unint64_t v2 = v0[27];
  sub_10001CFB8(v0[28], v0[29]);
  sub_10001CFB8(v1, v2);
  if (qword_101636A50 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_100010324(v3, (uint64_t)qword_10170DD90);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    unint64_t v7 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 138543362;
    swift_errorRetain();
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError();
    v0[7] = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v7 = v8;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Could not sign request: %{public}@.", v6, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();
    swift_release();

    swift_errorRelease();
  }
  else
  {
    swift_release();
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
    swift_release();
  }
  uint64_t v9 = v0[21];
  uint64_t v10 = v0[22];
  uint64_t v11 = v0[19];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[1];
  return v12(v11, v9, v10);
}

unint64_t sub_1003B9F88()
{
  unint64_t result = qword_101642A00;
  if (!qword_101642A00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101642A00);
  }
  return result;
}

uint64_t type metadata accessor for NotifyMeRequest.Subscription()
{
  uint64_t result = qword_101642A60;
  if (!qword_101642A60) {
    return swift_getSingletonMetadata();
  }
  return result;
}

ValueMetadata *type metadata accessor for NotifyMeRequest.RequestBody()
{
  return &type metadata for NotifyMeRequest.RequestBody;
}

ValueMetadata *type metadata accessor for NotifyMeRequest()
{
  return &type metadata for NotifyMeRequest;
}

uint64_t *sub_1003BA048(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(void *)(v7 - 8);
    uint64_t v32 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48);
    uint64_t v31 = v8;
    if (v32(a2, 1, v7))
    {
      uint64_t v9 = sub_10000588C((uint64_t *)&unk_10163AC90);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v11 = a3[5];
    uint64_t v12 = (char *)a1 + v11;
    uint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = type metadata accessor for UUID();
    uint64_t v15 = *(void *)(v14 - 8);
    uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v15 + 16);
    v16(v12, v13, v14);
    uint64_t v17 = a3[7];
    *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
    uint64_t v18 = (char *)a1 + v17;
    char v19 = (char *)a2 + v17;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))((char *)a2 + v17, 1, v14))
    {
      uint64_t v20 = sub_10000588C(&qword_101638CF0);
      memcpy(v18, v19, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      v16(v18, v19, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v18, 0, 1, v14);
    }
    uint64_t v21 = a3[9];
    *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
    uint64_t v22 = (char *)a1 + v21;
    char v23 = (char *)a2 + v21;
    swift_bridgeObjectRetain();
    if (v32((uint64_t *)v23, 1, v7))
    {
      uint64_t v24 = sub_10000588C((uint64_t *)&unk_10163AC90);
      memcpy(v22, v23, *(void *)(*(void *)(v24 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v22, v23, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v22, 0, 1, v7);
    }
    uint64_t v25 = a3[10];
    uint64_t v26 = a3[11];
    uint64_t v27 = (uint64_t *)((char *)a1 + v25);
    uint64_t v28 = (uint64_t *)((char *)a2 + v25);
    uint64_t v29 = v28[1];
    void *v27 = *v28;
    v27[1] = v29;
    *(uint64_t *)((char *)a1 + v26) = *(uint64_t *)((char *)a2 + v26);
    *(uint64_t *)((char *)a1 + a3[12]) = *(uint64_t *)((char *)a2 + a3[12]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1003BA3D8(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v6(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  }
  uint64_t v14 = v5;
  uint64_t v7 = a1 + a2[5];
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = a1 + a2[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v11, 1, v8)) {
    v10(v11, v8);
  }
  swift_bridgeObjectRelease();
  uint64_t v12 = a1 + a2[9];
  if (!v6(v12, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v12, v4);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

char *sub_1003BA5E0(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  uint64_t v29 = v7;
  if (v30(a2, 1, v6))
  {
    uint64_t v8 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = a3[5];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
  v14(v10, v11, v12);
  uint64_t v15 = a3[7];
  a1[a3[6]] = a2[a3[6]];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(&a2[v15], 1, v12))
  {
    uint64_t v18 = sub_10000588C(&qword_101638CF0);
    memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    v14(v16, v17, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v16, 0, 1, v12);
  }
  uint64_t v19 = a3[9];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  swift_bridgeObjectRetain();
  if (v30(v21, 1, v6))
  {
    uint64_t v22 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v29 + 16))(v20, v21, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v20, 0, 1, v6);
  }
  uint64_t v23 = a3[10];
  uint64_t v24 = a3[11];
  uint64_t v25 = &a1[v23];
  uint64_t v26 = &a2[v23];
  uint64_t v27 = *((void *)v26 + 1);
  *(void *)uint64_t v25 = *(void *)v26;
  *((void *)v25 + 1) = v27;
  *(void *)&a1[v24] = *(void *)&a2[v24];
  *(void *)&a1[a3[12]] = *(void *)&a2[a3[12]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

char *sub_1003BA920(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  uint64_t v36 = v8;
  int v10 = v8(a2, 1, v6);
  uint64_t v35 = v7;
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    uint64_t v11 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = a3[5];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v16 + 24);
  v17(v13, v14, v15);
  a1[a3[6]] = a2[a3[6]];
  uint64_t v37 = a3;
  uint64_t v38 = a2;
  uint64_t v18 = a3[7];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  uint64_t v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  int v22 = v21(&a1[v18], 1, v15);
  int v23 = v21(v20, 1, v15);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 16))(v19, v20, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v19, 0, 1, v15);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
LABEL_12:
    uint64_t v24 = sub_10000588C(&qword_101638CF0);
    memcpy(v19, v20, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_13;
  }
  v17(v19, v20, v15);
LABEL_13:
  *(void *)&a1[v37[8]] = *(void *)&v38[v37[8]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v25 = v37[9];
  uint64_t v26 = &a1[v25];
  uint64_t v27 = &v38[v25];
  int v28 = v36(&a1[v25], 1, v6);
  int v29 = v36(v27, 1, v6);
  if (!v28)
  {
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v35 + 24))(v26, v27, v6);
      goto LABEL_19;
    }
    (*(void (**)(char *, uint64_t))(v35 + 8))(v26, v6);
    goto LABEL_18;
  }
  if (v29)
  {
LABEL_18:
    uint64_t v30 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v26, v27, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v26, 0, 1, v6);
LABEL_19:
  uint64_t v31 = v37[10];
  uint64_t v32 = &a1[v31];
  uint64_t v33 = &v38[v31];
  *(void *)uint64_t v32 = *(void *)v33;
  *((void *)v32 + 1) = *((void *)v33 + 1);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&a1[v37[11]] = *(void *)&v38[v37[11]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)&a1[v37[12]] = *(void *)&v38[v37[12]];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *sub_1003BADD0(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  uint64_t v25 = v7;
  if (v26(a2, 1, v6))
  {
    uint64_t v8 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = a3[5];
  int v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v14(v10, v11, v12);
  uint64_t v15 = a3[7];
  a1[a3[6]] = a2[a3[6]];
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(&a2[v15], 1, v12))
  {
    uint64_t v18 = sub_10000588C(&qword_101638CF0);
    memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    v14(v16, v17, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v16, 0, 1, v12);
  }
  uint64_t v19 = a3[9];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  if (v26(&a2[v19], 1, v6))
  {
    uint64_t v22 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v20, v21, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v20, 0, 1, v6);
  }
  uint64_t v23 = a3[11];
  *(_OWORD *)&a1[a3[10]] = *(_OWORD *)&a2[a3[10]];
  *(void *)&a1[v23] = *(void *)&a2[v23];
  *(void *)&a1[a3[12]] = *(void *)&a2[a3[12]];
  return a1;
}

char *sub_1003BB0F0(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  uint64_t v38 = v8;
  int v10 = v8(a2, 1, v6);
  uint64_t v37 = v7;
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    uint64_t v11 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = a3[5];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v16 + 40);
  v17(v13, v14, v15);
  uint64_t v18 = a3[7];
  uint64_t v39 = a3;
  uint64_t v40 = a2;
  a1[a3[6]] = a2[a3[6]];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  uint64_t v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  int v22 = v21(&a1[v18], 1, v15);
  int v23 = v21(v20, 1, v15);
  if (v22)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v19, v20, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v19, 0, 1, v15);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v23)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
LABEL_12:
    uint64_t v24 = sub_10000588C(&qword_101638CF0);
    memcpy(v19, v20, *(void *)(*(void *)(v24 - 8) + 64));
    goto LABEL_13;
  }
  v17(v19, v20, v15);
LABEL_13:
  *(void *)&a1[v39[8]] = *(void *)&v40[v39[8]];
  swift_bridgeObjectRelease();
  uint64_t v25 = v39[9];
  uint64_t v26 = &a1[v25];
  uint64_t v27 = &v40[v25];
  int v28 = v38(&a1[v25], 1, v6);
  int v29 = v38(v27, 1, v6);
  if (!v28)
  {
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v37 + 40))(v26, v27, v6);
      goto LABEL_19;
    }
    (*(void (**)(char *, uint64_t))(v37 + 8))(v26, v6);
    goto LABEL_18;
  }
  if (v29)
  {
LABEL_18:
    uint64_t v30 = sub_10000588C((uint64_t *)&unk_10163AC90);
    memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
    goto LABEL_19;
  }
  (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v26, v27, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v26, 0, 1, v6);
LABEL_19:
  uint64_t v31 = v39[10];
  uint64_t v32 = &a1[v31];
  uint64_t v33 = &v40[v31];
  uint64_t v35 = *(void *)v33;
  uint64_t v34 = *((void *)v33 + 1);
  *(void *)uint64_t v32 = v35;
  *((void *)v32 + 1) = v34;
  swift_bridgeObjectRelease();
  *(void *)&a1[v39[11]] = *(void *)&v40[v39[11]];
  swift_bridgeObjectRelease();
  *(void *)&a1[v39[12]] = *(void *)&v40[v39[12]];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1003BB574(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003BB588);
}

uint64_t sub_1003BB588(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_8:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = type metadata accessor for UUID();
  if (*(_DWORD *)(*(void *)(v11 - 8) + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = a3[5];
LABEL_7:
    uint64_t v10 = a1 + v13;
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_8;
  }
  uint64_t v14 = sub_10000588C(&qword_101638CF0);
  if (*(_DWORD *)(*(void *)(v14 - 8) + 84) == a2)
  {
    uint64_t v8 = v14;
    uint64_t v12 = *(void *)(v14 - 8);
    uint64_t v13 = a3[7];
    goto LABEL_7;
  }
  unint64_t v16 = *(void *)(a1 + a3[8]);
  if (v16 >= 0xFFFFFFFF) {
    LODWORD(v16) = -1;
  }
  return (v16 + 1);
}

uint64_t sub_1003BB6F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1003BB704);
}

uint64_t sub_1003BB704(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t v13 = type metadata accessor for UUID();
    if (*(_DWORD *)(*(void *)(v13 - 8) + 84) == a3)
    {
      uint64_t v10 = v13;
      uint64_t v14 = *(void *)(v13 - 8);
      uint64_t v15 = a4[5];
    }
    else
    {
      uint64_t result = sub_10000588C(&qword_101638CF0);
      if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
      {
        *(void *)(a1 + a4[8]) = (a2 - 1);
        return result;
      }
      uint64_t v10 = result;
      uint64_t v14 = *(void *)(result - 8);
      uint64_t v15 = a4[7];
    }
    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

void sub_1003BB868()
{
  sub_1003BB9C8(319, (unint64_t *)&qword_10165C690, (void (*)(uint64_t))&type metadata accessor for Date);
  if (v0 <= 0x3F)
  {
    type metadata accessor for UUID();
    if (v1 <= 0x3F)
    {
      sub_1003BB9C8(319, (unint64_t *)&qword_101655AB0, (void (*)(uint64_t))&type metadata accessor for UUID);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void sub_1003BB9C8(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t sub_1003BBA1C()
{
  unint64_t result = qword_101642AC0;
  if (!qword_101642AC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101642AC0);
  }
  return result;
}

void *sub_1003BBA70(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_101642AE0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10001CD44(a1, a1[3]);
  sub_1003BBA1C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  else
  {
    sub_10000588C(&qword_101642AC8);
    sub_1003BBC20(&qword_101642AE8, &qword_101642AF0);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v7 = (void *)v9[1];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  return v7;
}

uint64_t sub_1003BBC20(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000592C(&qword_101642AC8);
    sub_1003BBE38(a2, (void (*)(uint64_t))type metadata accessor for NotifyMeRequest.Subscription);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1003BBCB4()
{
  unint64_t result = qword_101642B00;
  if (!qword_101642B00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101642B00);
  }
  return result;
}

uint64_t sub_1003BBD08(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000592C((uint64_t *)&unk_10164DBD0);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1003BBD78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for NotifyMeRequest.Subscription();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003BBDDC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for NotifyMeRequest.Subscription();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1003BBE38(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for NotifyMeRequest.Subscription.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *uint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1003BBF4CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NotifyMeRequest.Subscription.CodingKeys()
{
  return &type metadata for NotifyMeRequest.Subscription.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for NotifyMeRequest.RequestBody.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1003BC020);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for NotifyMeRequest.RequestBody.CodingKeys()
{
  return &type metadata for NotifyMeRequest.RequestBody.CodingKeys;
}

unint64_t sub_1003BC05C()
{
  unint64_t result = qword_101642B18;
  if (!qword_101642B18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101642B18);
  }
  return result;
}

unint64_t sub_1003BC0B4()
{
  unint64_t result = qword_101642B20;
  if (!qword_101642B20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101642B20);
  }
  return result;
}

unint64_t sub_1003BC10C()
{
  unint64_t result = qword_101642B28;
  if (!qword_101642B28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101642B28);
  }
  return result;
}

unint64_t sub_1003BC164()
{
  unint64_t result = qword_101642B30;
  if (!qword_101642B30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101642B30);
  }
  return result;
}

unint64_t sub_1003BC1BC()
{
  unint64_t result = qword_101642B38;
  if (!qword_101642B38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101642B38);
  }
  return result;
}

unint64_t sub_1003BC214()
{
  unint64_t result = qword_101642B40;
  if (!qword_101642B40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101642B40);
  }
  return result;
}

uint64_t sub_1003BC268(uint64_t a1, uint64_t a2)
{
  if (a1 == 0x7461447472617473 && a2 == 0xE900000000000065
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7069726373627573 && a2 == 0xEE0064496E6F6974 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x646E756F46636F6CLL && a2 == 0xEF64656C62616E45 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x646975756162 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 7562345 && a2 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001013FB100 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x49746375646F7270 && a2 == 0xE900000000000064 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x7261646E6F636573 && a2 == 0xEC00000073644979 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x76654464656E776FLL && a2 == 0xEE00736449656369)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 8;
    }
    else {
      return 9;
    }
  }
}

uint64_t destroy for AirPodsLESendPairingDataCommandPayload(uint64_t *a1)
{
  sub_10001CFB8(*a1, a1[1]);
  sub_10001CFB8(a1[2], a1[3]);
  sub_10001CFB8(a1[4], a1[5]);
  sub_10001CFB8(a1[6], a1[7]);
  sub_10001CFB8(a1[8], a1[9]);
  sub_10001CFB8(a1[10], a1[11]);
  sub_10001CFB8(a1[12], a1[13]);
  sub_10001CFB8(a1[14], a1[15]);
  sub_10001CFB8(a1[16], a1[17]);
  sub_10001CFB8(a1[18], a1[19]);
  sub_10001CFB8(a1[20], a1[21]);
  sub_10001CFB8(a1[22], a1[23]);
  uint64_t v2 = a1[25];
  unint64_t v3 = a1[26];

  return sub_10001CFB8(v2, v3);
}

uint64_t initializeWithCopy for AirPodsLESendPairingDataCommandPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_1000361E0(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 16);
  unint64_t v7 = *(void *)(a2 + 24);
  sub_1000361E0(v6, v7);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  sub_1000361E0(v8, v9);
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  uint64_t v10 = *(void *)(a2 + 48);
  unint64_t v11 = *(void *)(a2 + 56);
  sub_1000361E0(v10, v11);
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  uint64_t v12 = *(void *)(a2 + 64);
  unint64_t v13 = *(void *)(a2 + 72);
  sub_1000361E0(v12, v13);
  *(void *)(a1 + 64) = v12;
  *(void *)(a1 + 72) = v13;
  uint64_t v14 = *(void *)(a2 + 80);
  unint64_t v15 = *(void *)(a2 + 88);
  sub_1000361E0(v14, v15);
  *(void *)(a1 + 80) = v14;
  *(void *)(a1 + 88) = v15;
  uint64_t v16 = *(void *)(a2 + 96);
  unint64_t v17 = *(void *)(a2 + 104);
  sub_1000361E0(v16, v17);
  *(void *)(a1 + 96) = v16;
  *(void *)(a1 + 104) = v17;
  uint64_t v18 = *(void *)(a2 + 112);
  unint64_t v19 = *(void *)(a2 + 120);
  sub_1000361E0(v18, v19);
  *(void *)(a1 + 112) = v18;
  *(void *)(a1 + 120) = v19;
  uint64_t v20 = *(void *)(a2 + 128);
  unint64_t v21 = *(void *)(a2 + 136);
  sub_1000361E0(v20, v21);
  *(void *)(a1 + 128) = v20;
  *(void *)(a1 + 136) = v21;
  uint64_t v22 = *(void *)(a2 + 144);
  unint64_t v23 = *(void *)(a2 + 152);
  sub_1000361E0(v22, v23);
  *(void *)(a1 + 144) = v22;
  *(void *)(a1 + 152) = v23;
  uint64_t v24 = *(void *)(a2 + 160);
  unint64_t v25 = *(void *)(a2 + 168);
  sub_1000361E0(v24, v25);
  *(void *)(a1 + 160) = v24;
  *(void *)(a1 + 168) = v25;
  uint64_t v26 = *(void *)(a2 + 176);
  unint64_t v27 = *(void *)(a2 + 184);
  sub_1000361E0(v26, v27);
  *(void *)(a1 + 176) = v26;
  *(void *)(a1 + 184) = v27;
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  uint64_t v29 = *(void *)(a2 + 200);
  unint64_t v28 = *(void *)(a2 + 208);
  sub_1000361E0(v29, v28);
  *(void *)(a1 + 200) = v29;
  *(void *)(a1 + 208) = v28;
  return a1;
}

uint64_t assignWithCopy for AirPodsLESendPairingDataCommandPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_1000361E0(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  sub_10001CFB8(v6, v7);
  uint64_t v8 = *(void *)(a2 + 16);
  unint64_t v9 = *(void *)(a2 + 24);
  sub_1000361E0(v8, v9);
  uint64_t v10 = *(void *)(a1 + 16);
  unint64_t v11 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v9;
  sub_10001CFB8(v10, v11);
  uint64_t v12 = *(void *)(a2 + 32);
  unint64_t v13 = *(void *)(a2 + 40);
  sub_1000361E0(v12, v13);
  uint64_t v14 = *(void *)(a1 + 32);
  unint64_t v15 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v13;
  sub_10001CFB8(v14, v15);
  uint64_t v16 = *(void *)(a2 + 48);
  unint64_t v17 = *(void *)(a2 + 56);
  sub_1000361E0(v16, v17);
  uint64_t v18 = *(void *)(a1 + 48);
  unint64_t v19 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = v16;
  *(void *)(a1 + 56) = v17;
  sub_10001CFB8(v18, v19);
  uint64_t v20 = *(void *)(a2 + 64);
  unint64_t v21 = *(void *)(a2 + 72);
  sub_1000361E0(v20, v21);
  uint64_t v22 = *(void *)(a1 + 64);
  unint64_t v23 = *(void *)(a1 + 72);
  *(void *)(a1 + 64) = v20;
  *(void *)(a1 + 72) = v21;
  sub_10001CFB8(v22, v23);
  uint64_t v24 = *(void *)(a2 + 80);
  unint64_t v25 = *(void *)(a2 + 88);
  sub_1000361E0(v24, v25);
  uint64_t v26 = *(void *)(a1 + 80);
  unint64_t v27 = *(void *)(a1 + 88);
  *(void *)(a1 + 80) = v24;
  *(void *)(a1 + 88) = v25;
  sub_10001CFB8(v26, v27);
  uint64_t v28 = *(void *)(a2 + 96);
  unint64_t v29 = *(void *)(a2 + 104);
  sub_1000361E0(v28, v29);
  uint64_t v30 = *(void *)(a1 + 96);
  unint64_t v31 = *(void *)(a1 + 104);
  *(void *)(a1 + 96) = v28;
  *(void *)(a1 + 104) = v29;
  sub_10001CFB8(v30, v31);
  uint64_t v32 = *(void *)(a2 + 112);
  unint64_t v33 = *(void *)(a2 + 120);
  sub_1000361E0(v32, v33);
  uint64_t v34 = *(void *)(a1 + 112);
  unint64_t v35 = *(void *)(a1 + 120);
  *(void *)(a1 + 112) = v32;
  *(void *)(a1 + 120) = v33;
  sub_10001CFB8(v34, v35);
  uint64_t v36 = *(void *)(a2 + 128);
  unint64_t v37 = *(void *)(a2 + 136);
  sub_1000361E0(v36, v37);
  uint64_t v38 = *(void *)(a1 + 128);
  unint64_t v39 = *(void *)(a1 + 136);
  *(void *)(a1 + 128) = v36;
  *(void *)(a1 + 136) = v37;
  sub_10001CFB8(v38, v39);
  uint64_t v40 = *(void *)(a2 + 144);
  unint64_t v41 = *(void *)(a2 + 152);
  sub_1000361E0(v40, v41);
  uint64_t v42 = *(void *)(a1 + 144);
  unint64_t v43 = *(void *)(a1 + 152);
  *(void *)(a1 + 144) = v40;
  *(void *)(a1 + 152) = v41;
  sub_10001CFB8(v42, v43);
  uint64_t v44 = *(void *)(a2 + 160);
  unint64_t v45 = *(void *)(a2 + 168);
  sub_1000361E0(v44, v45);
  uint64_t v46 = *(void *)(a1 + 160);
  unint64_t v47 = *(void *)(a1 + 168);
  *(void *)(a1 + 160) = v44;
  *(void *)(a1 + 168) = v45;
  sub_10001CFB8(v46, v47);
  uint64_t v48 = *(void *)(a2 + 176);
  unint64_t v49 = *(void *)(a2 + 184);
  sub_1000361E0(v48, v49);
  uint64_t v50 = *(void *)(a1 + 176);
  unint64_t v51 = *(void *)(a1 + 184);
  *(void *)(a1 + 176) = v48;
  *(void *)(a1 + 184) = v49;
  sub_10001CFB8(v50, v51);
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  uint64_t v53 = *(void *)(a2 + 200);
  unint64_t v52 = *(void *)(a2 + 208);
  sub_1000361E0(v53, v52);
  uint64_t v54 = *(void *)(a1 + 200);
  unint64_t v55 = *(void *)(a1 + 208);
  *(void *)(a1 + 200) = v53;
  *(void *)(a1 + 208) = v52;
  sub_10001CFB8(v54, v55);
  return a1;
}

__n128 initializeWithTake for AirPodsLESendPairingDataCommandPayload(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  __n128 result = *(__n128 *)(a2 + 160);
  long long v10 = *(_OWORD *)(a2 + 176);
  long long v11 = *(_OWORD *)(a2 + 192);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 192) = v11;
  *(__n128 *)(a1 + 160) = result;
  return result;
}

uint64_t assignWithTake for AirPodsLESendPairingDataCommandPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001CFB8(v4, v5);
  uint64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_10001CFB8(v6, v7);
  uint64_t v8 = *(void *)(a1 + 32);
  unint64_t v9 = *(void *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  sub_10001CFB8(v8, v9);
  uint64_t v10 = *(void *)(a1 + 48);
  unint64_t v11 = *(void *)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  sub_10001CFB8(v10, v11);
  uint64_t v12 = *(void *)(a1 + 64);
  unint64_t v13 = *(void *)(a1 + 72);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  sub_10001CFB8(v12, v13);
  uint64_t v14 = *(void *)(a1 + 80);
  unint64_t v15 = *(void *)(a1 + 88);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  sub_10001CFB8(v14, v15);
  uint64_t v16 = *(void *)(a1 + 96);
  unint64_t v17 = *(void *)(a1 + 104);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  sub_10001CFB8(v16, v17);
  uint64_t v18 = *(void *)(a1 + 112);
  unint64_t v19 = *(void *)(a1 + 120);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  sub_10001CFB8(v18, v19);
  uint64_t v20 = *(void *)(a1 + 128);
  unint64_t v21 = *(void *)(a1 + 136);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  sub_10001CFB8(v20, v21);
  uint64_t v22 = *(void *)(a1 + 144);
  unint64_t v23 = *(void *)(a1 + 152);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  sub_10001CFB8(v22, v23);
  uint64_t v24 = *(void *)(a1 + 160);
  unint64_t v25 = *(void *)(a1 + 168);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  sub_10001CFB8(v24, v25);
  uint64_t v26 = *(void *)(a1 + 176);
  unint64_t v27 = *(void *)(a1 + 184);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  sub_10001CFB8(v26, v27);
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  uint64_t v28 = *(void *)(a1 + 200);
  unint64_t v29 = *(void *)(a1 + 208);
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  sub_10001CFB8(v28, v29);
  return a1;
}

uint64_t getEnumTagSinglePayload for AirPodsLESendPairingDataCommandPayload(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 216)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AirPodsLESendPairingDataCommandPayload(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 13;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 216) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 216) = 0;
    }
    if (a2)
    {
      *(void *)__n128 result = 0;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsLESendPairingDataCommandPayload()
{
  return &type metadata for AirPodsLESendPairingDataCommandPayload;
}

uint64_t sub_1003BCC3C(void *a1)
{
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryEncoding.container()();
  sub_1000BD078((uint64_t)v6, v7);
  sub_100135A44();
  dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
  if (!v1)
  {
    sub_1000BD078((uint64_t)v6, v7);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1000BD078((uint64_t)v6, v7);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1000BD078((uint64_t)v6, v7);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1000BD078((uint64_t)v6, v7);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1000BD078((uint64_t)v6, v7);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1000BD078((uint64_t)v6, v7);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1000BD078((uint64_t)v6, v7);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1000BD078((uint64_t)v6, v7);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1000BD078((uint64_t)v6, v7);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1000BD078((uint64_t)v6, v7);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1000BD078((uint64_t)v6, v7);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_10006145C();
    uint64_t v2 = FixedWidthInteger.data.getter();
    unint64_t v4 = v3;
    sub_1000BD078((uint64_t)v6, v7);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_10001CFB8(v2, v4);
    sub_1000BD078((uint64_t)v6, v7);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v6);
}

double sub_1003BD098@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1003BD39C(a1, (uint64_t)v11);
  if (!v2)
  {
    long long v5 = v11[11];
    *(_OWORD *)(a2 + 160) = v11[10];
    *(_OWORD *)(a2 + 176) = v5;
    *(_OWORD *)(a2 + 192) = v11[12];
    *(void *)(a2 + 208) = v12;
    long long v6 = v11[7];
    *(_OWORD *)(a2 + 96) = v11[6];
    *(_OWORD *)(a2 + 112) = v6;
    long long v7 = v11[9];
    *(_OWORD *)(a2 + 128) = v11[8];
    *(_OWORD *)(a2 + 144) = v7;
    long long v8 = v11[3];
    *(_OWORD *)(a2 + 32) = v11[2];
    *(_OWORD *)(a2 + 48) = v8;
    long long v9 = v11[5];
    *(_OWORD *)(a2 + 64) = v11[4];
    *(_OWORD *)(a2 + 80) = v9;
    double result = *(double *)v11;
    long long v10 = v11[1];
    *(_OWORD *)a2 = v11[0];
    *(_OWORD *)(a2 + 16) = v10;
  }
  return result;
}

uint64_t sub_1003BD124(void *a1)
{
  return sub_1003BCC3C(a1);
}

unint64_t sub_1003BD13C(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1003BD16C();
  unint64_t result = sub_1003BD1C0();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1003BD16C()
{
  unint64_t result = qword_101642B48;
  if (!qword_101642B48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101642B48);
  }
  return result;
}

unint64_t sub_1003BD1C0()
{
  unint64_t result = qword_101642B50;
  if (!qword_101642B50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101642B50);
  }
  return result;
}

uint64_t sub_1003BD214@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, unint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v28) = HIDWORD(result) - result;
      if (__OFSUB__(HIDWORD(result), result))
      {
        __break(1u);
LABEL_15:
        __break(1u);
LABEL_16:
        __break(1u);
LABEL_17:
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
        JUMPOUT(0x1003BD37CLL);
      }
      uint64_t v28 = (int)v28;
LABEL_6:
      if (v28 != 32) {
        goto LABEL_18;
      }
      switch(a11 >> 62)
      {
        case 1uLL:
          LODWORD(v32) = HIDWORD(a10) - a10;
          if (__OFSUB__(HIDWORD(a10), a10)) {
            goto LABEL_16;
          }
          uint64_t v32 = (int)v32;
LABEL_12:
          if (v32 != 1) {
            goto LABEL_19;
          }
          *(void *)a9 = result;
          *(void *)(a9 + 8) = a2;
          *(void *)(a9 + 16) = a10;
          *(void *)(a9 + 24) = a11;
          *(void *)(a9 + 32) = a3;
          *(void *)(a9 + 40) = a4;
          *(void *)(a9 + 48) = a12;
          *(void *)(a9 + 56) = a13;
          *(void *)(a9 + 64) = a5;
          *(void *)(a9 + 72) = a6;
          *(void *)(a9 + 80) = a7;
          *(void *)(a9 + 88) = a8;
          *(void *)(a9 + 96) = a14;
          *(void *)(a9 + 104) = a15;
          *(void *)(a9 + 112) = a16;
          *(void *)(a9 + 120) = a17;
          *(void *)(a9 + 128) = a18;
          *(void *)(a9 + 136) = a19;
          *(void *)(a9 + 144) = a20;
          *(void *)(a9 + 152) = a21;
          *(void *)(a9 + 160) = a22;
          *(void *)(a9 + 168) = a23;
          *(void *)(a9 + 176) = a24;
          *(void *)(a9 + 184) = a25;
          *(unsigned char *)(a9 + 192) = a26;
          *(void *)(a9 + 200) = a27;
          *(void *)(a9 + 208) = a28;
          return result;
        case 2uLL:
          uint64_t v34 = *(void *)(a10 + 16);
          uint64_t v33 = *(void *)(a10 + 24);
          BOOL v31 = __OFSUB__(v33, v34);
          uint64_t v32 = v33 - v34;
          if (!v31) {
            goto LABEL_12;
          }
          goto LABEL_17;
        case 3uLL:
          goto LABEL_19;
        default:
          uint64_t v32 = BYTE6(a11);
          goto LABEL_12;
      }
    case 2uLL:
      uint64_t v30 = *(void *)(result + 16);
      uint64_t v29 = *(void *)(result + 24);
      BOOL v31 = __OFSUB__(v29, v30);
      uint64_t v28 = v29 - v30;
      if (!v31) {
        goto LABEL_6;
      }
      goto LABEL_15;
    case 3uLL:
      goto LABEL_18;
    default:
      uint64_t v28 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_1003BD39C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for Endianness();
  __chkstk_darwin(v5 - 8);
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryDecoding.container()();
  sub_1000BD078((uint64_t)v100, v101);
  uint64_t v6 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  if (v2) {
    goto LABEL_19;
  }
  uint64_t v8 = v6;
  unint64_t v104 = v7;
  sub_1000BD078((uint64_t)v100, v101);
  uint64_t v96 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  unint64_t v97 = v9;
  sub_1000BD078((uint64_t)v100, v101);
  uint64_t v94 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  unint64_t v95 = v10;
  sub_1000BD078((uint64_t)v100, v101);
  uint64_t v92 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  unint64_t v93 = v11;
  sub_1000BD078((uint64_t)v100, v101);
  uint64_t v90 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  unint64_t v91 = v12;
  sub_1000BD078((uint64_t)v100, v101);
  unint64_t v13 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  unint64_t v15 = v14;
  uint64_t v98 = v90;
  unint64_t v99 = v91;
  uint64_t v85 = sub_1000362FC();
  uint64_t v16 = DataProtocol.intValue.getter();
  uint64_t v17 = v16 - 1;
  if (__OFSUB__(v16, 1))
  {
    __break(1u);
    goto LABEL_11;
  }
  if ((unsigned __int128)(v17 * (__int128)20) >> 64 != (20 * v17) >> 63)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  if (20 * v17 < 0)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  uint64_t v86 = Data.subdata(in:)();
  unint64_t v87 = v18;
  uint64_t v88 = v13;
  unint64_t v89 = v15;
  sub_1000BD078((uint64_t)v100, v101);
  uint64_t v83 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  unint64_t v84 = v19;
  sub_1000BD078((uint64_t)v100, v101);
  uint64_t v81 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  unint64_t v82 = v20;
  sub_1000BD078((uint64_t)v100, v101);
  uint64_t v21 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  unint64_t v13 = v22;
  sub_1000361E0(v21, v22);
  static Endianness.current.getter();
  sub_100179818();
  FixedWidthInteger.init(data:ofEndianness:)();
  if (BYTE2(v98) == 1)
  {
    uint64_t v23 = type metadata accessor for BinaryEncodingError();
    sub_100036350((unint64_t *)&qword_101639620, (void (*)(uint64_t))&type metadata accessor for BinaryEncodingError);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v23 - 8) + 104))(v24, enum case for BinaryEncodingError.encodingError(_:), v23);
    swift_willThrow();
    uint64_t v25 = v21;
LABEL_18:
    sub_10001CFB8(v25, v13);
    sub_10001CFB8(v81, v82);
    sub_10001CFB8(v83, v84);
    sub_10001CFB8(v86, v87);
    sub_10001CFB8(v88, v89);
    sub_10001CFB8(v90, v91);
    sub_10001CFB8(v92, v93);
    sub_10001CFB8(v94, v95);
    sub_10001CFB8(v96, v97);
    sub_10001CFB8(v8, v104);
LABEL_19:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v100);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  uint64_t v80 = v21;
  sub_1000361E0(v81, v82);
  sub_100435A9C((unsigned __int16)v98, v81, v82, &v98);
  uint64_t v78 = v98;
  unint64_t v79 = v99;
  sub_1000BD078((uint64_t)v100, v101);
  uint64_t v76 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  unint64_t v77 = v26;
  sub_1000BD078((uint64_t)v100, v101);
  uint64_t v27 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  unint64_t v29 = v28;
  uint64_t v98 = v27;
  unint64_t v99 = v28;
  uint64_t v30 = DataProtocol.intValue.getter();
  sub_10001CFB8(v27, v29);
  sub_1000361E0(v76, v77);
  sub_100435A9C(v30, v76, v77, &v98);
  uint64_t v74 = v98;
  unint64_t v75 = v99;
  sub_1000BD078((uint64_t)v100, v101);
  uint64_t v72 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  unint64_t v73 = v31;
  sub_1000BD078((uint64_t)v100, v101);
  uint64_t v32 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  unint64_t v34 = v33;
  uint64_t v98 = v32;
  unint64_t v99 = v33;
  uint64_t v35 = DataProtocol.intValue.getter();
  sub_10001CFB8(v32, v34);
  sub_1000361E0(v72, v73);
  sub_100435A9C(v35, v72, v73, &v98);
  uint64_t v70 = v98;
  unint64_t v71 = v99;
  sub_1000BD078((uint64_t)v100, v101);
  uint64_t v68 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  unint64_t v69 = v36;
  sub_1000BD078((uint64_t)v100, v101);
  uint64_t v37 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  unint64_t v39 = v38;
  uint64_t v98 = v37;
  unint64_t v99 = v38;
  uint64_t v40 = DataProtocol.intValue.getter();
  sub_10001CFB8(v37, v39);
  sub_1000361E0(v68, v69);
  sub_100435A9C(v40, v68, v69, &v98);
  uint64_t v66 = v98;
  unint64_t v67 = v99;
  sub_1000BD078((uint64_t)v100, v101);
  uint64_t v64 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  unint64_t v65 = v41;
  sub_1000BD078((uint64_t)v100, v101);
  uint64_t v62 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  unint64_t v63 = v42;
  uint64_t v98 = v62;
  unint64_t v99 = v42;
  uint64_t v85 = DataProtocol.intValue.getter();
  sub_1000BD078((uint64_t)v100, v101);
  uint64_t v43 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  unint64_t v60 = v44;
  uint64_t v61 = v43;
  if (v85 > 3)
  {
LABEL_13:
    if (qword_101637320 != -1) {
      swift_once();
    }
    uint64_t v54 = type metadata accessor for Logger();
    sub_100010324(v54, (uint64_t)qword_10170F098);
    unint64_t v55 = Logger.logObject.getter();
    os_log_type_t v56 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v55, v56))
    {
      uint64_t v57 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v57 = 134217984;
      uint64_t v98 = v85;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "Invalid beaconPartId %ld!", v57, 0xCu);
      swift_slowDealloc();
    }

    uint64_t v58 = type metadata accessor for BinaryDecodingError();
    sub_100036350((unint64_t *)&qword_101639630, (void (*)(uint64_t))&type metadata accessor for BinaryDecodingError);
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v58 - 8) + 104))(v59, enum case for BinaryDecodingError.decodingError(_:), v58);
    swift_willThrow();
    sub_10001CFB8(v61, v60);
    sub_10001CFB8(v62, v63);
    sub_10001CFB8(v64, v65);
    sub_10001CFB8(v66, v67);
    sub_10001CFB8(v68, v69);
    sub_10001CFB8(v70, v71);
    sub_10001CFB8(v72, v73);
    sub_10001CFB8(v74, v75);
    sub_10001CFB8(v76, v77);
    sub_10001CFB8(v78, v79);
    uint64_t v25 = v80;
    goto LABEL_18;
  }
  sub_10001CFB8(v80, v13);
  sub_10001CFB8(v81, v82);
  sub_10001CFB8(v88, v89);
  sub_10001CFB8(v76, v77);
  sub_10001CFB8(v72, v73);
  sub_10001CFB8(v68, v69);
  sub_10001CFB8(v62, v63);
  if (v85 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    sub_1003BD214(v8, v104, v96, v97, v94, v95, v92, v93, (uint64_t)v102, v90, v91, v86, v87, v83, v84, v78, v79, v74, v75,
      v70,
      v71,
      v66,
      v67,
      v64,
      v65,
      v85,
      v61,
      v60);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v100);
    uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
    long long v46 = v102[11];
    long long v47 = v102[12];
    long long v48 = v102[9];
    *(_OWORD *)(a2 + 160) = v102[10];
    *(_OWORD *)(a2 + 176) = v46;
    *(_OWORD *)(a2 + 192) = v47;
    long long v49 = v102[7];
    long long v50 = v102[8];
    long long v51 = v102[5];
    *(_OWORD *)(a2 + 96) = v102[6];
    *(_OWORD *)(a2 + 112) = v49;
    *(void *)(a2 + 208) = v103;
    *(_OWORD *)(a2 + 128) = v50;
    *(_OWORD *)(a2 + 144) = v48;
    long long v52 = v102[3];
    *(_OWORD *)(a2 + 32) = v102[2];
    *(_OWORD *)(a2 + 48) = v52;
    *(_OWORD *)(a2 + 64) = v102[4];
    *(_OWORD *)(a2 + 80) = v51;
    long long v53 = v102[1];
    *(_OWORD *)a2 = v102[0];
    *(_OWORD *)(a2 + 16) = v53;
  }
  return result;
}

uint64_t sub_1003BDEBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003BDED0);
}

uint64_t sub_1003BDED0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for FMNAccountType();
    unint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    unint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1003BDF80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1003BDF94);
}

void *sub_1003BDF94(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for FMNAccountType();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for NotifyMeEndpoint()
{
  uint64_t result = qword_101642BB0;
  if (!qword_101642BB0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1003BE088()
{
  sub_10000588C(&qword_101639580);
  OS_dispatch_queue.sync<A>(execute:)();
  URLComponents.init()();
  URLComponents.scheme.setter();
  URLComponents.host.setter();
  URLComponents.path.setter();
  unint64_t v0 = (uint64_t (*)(uint64_t *, void))URLComponents.path.modify();
  v1._countAndFlagsBits = 0x697263736275732FLL;
  v1._object = (void *)0xEA00000000006562;
  String.append(_:)(v1);
  return v0(&v3, 0);
}

uint64_t sub_1003BE18C()
{
  uint64_t v1 = type metadata accessor for LocalizationUtility.Table();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = &v10[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000588C(&qword_1016552B0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101342130;
  uint64_t v6 = (void *)(v0 + *(int *)(type metadata accessor for ItemShareRequestReceivedUserNotification() + 32));
  uint64_t v7 = v6[1];
  *(void *)(inited + 32) = *v6;
  *(void *)(inited + 40) = v7;
  (*(void (**)(unsigned char *, void, uint64_t))(v2 + 104))(v4, enum case for LocalizationUtility.Table.itemSharing(_:), v1);
  swift_bridgeObjectRetain();
  static LocalizationUtility.localizedString(key:table:)();
  (*(void (**)(unsigned char *, uint64_t))(v2 + 8))(v4, v1);
  sub_100A9A508(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v8 = String.init(format:arguments:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_1003BE34C()
{
  uint64_t v1 = type metadata accessor for LocalizationUtility.Table();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = &v10[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10000588C(&qword_1016552B0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101342130;
  uint64_t v6 = (void *)(v0 + *(int *)(type metadata accessor for ItemShareRequestReceivedUserNotification() + 28));
  uint64_t v7 = v6[1];
  *(void *)(inited + 32) = *v6;
  *(void *)(inited + 40) = v7;
  (*(void (**)(unsigned char *, void, uint64_t))(v2 + 104))(v4, enum case for LocalizationUtility.Table.itemSharing(_:), v1);
  swift_bridgeObjectRetain();
  static LocalizationUtility.localizedString(key:table:)();
  swift_bridgeObjectRelease();
  (*(void (**)(unsigned char *, uint64_t))(v2 + 8))(v4, v1);
  sub_100A9A508(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  uint64_t v8 = String.init(format:arguments:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_1003BE544()
{
  return *(unsigned __int8 *)(v0 + 1);
}

uint64_t sub_1003BE54C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 24);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

unint64_t sub_1003BE5C4()
{
  sub_10000588C((uint64_t *)&unk_101637F00);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101342130;
  *(void *)(inited + 32) = 0x6564496572616873;
  *(void *)(inited + 40) = 0xEF7265696669746ELL;
  uint64_t v1 = UUID.uuidString.getter();
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 48) = v1;
  *(void *)(inited + 56) = v2;
  return sub_10092CEEC(inited);
}

uint64_t type metadata accessor for ItemShareRequestReceivedUserNotification()
{
  uint64_t result = qword_101642C40;
  if (!qword_101642C40) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void *sub_1003BE6AC(_WORD *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *(_WORD *)a2;
    uint64_t v7 = a3[6];
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
    uint64_t v11 = a3[7];
    uint64_t v12 = a3[8];
    unint64_t v13 = (void *)((char *)v4 + v11);
    unint64_t v14 = (void *)((char *)a2 + v11);
    uint64_t v15 = v14[1];
    *unint64_t v13 = *v14;
    v13[1] = v15;
    uint64_t v16 = (void *)((char *)v4 + v12);
    uint64_t v17 = (void *)((char *)a2 + v12);
    uint64_t v18 = v17[1];
    void *v16 = *v17;
    v16[1] = v18;
    *((unsigned char *)v4 + a3[9]) = *((unsigned char *)a2 + a3[9]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t sub_1003BE7C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 24);
  uint64_t v3 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

_WORD *sub_1003BE85C(_WORD *a1, _WORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  uint64_t v10 = a3[7];
  uint64_t v11 = a3[8];
  uint64_t v12 = (void *)((char *)a1 + v10);
  unint64_t v13 = (void *)((char *)a2 + v10);
  uint64_t v14 = v13[1];
  void *v12 = *v13;
  v12[1] = v14;
  uint64_t v15 = (void *)((char *)a1 + v11);
  uint64_t v16 = (void *)((char *)a2 + v11);
  uint64_t v17 = v16[1];
  *uint64_t v15 = *v16;
  v15[1] = v17;
  *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

unsigned char *sub_1003BE924(unsigned char *a1, unsigned char *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v6 = a3[6];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  uint64_t v10 = a3[7];
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[8];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  void *v14 = *v15;
  v14[1] = v15[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[a3[9]] = a2[a3[9]];
  return a1;
}

_WORD *sub_1003BEA1C(_WORD *a1, _WORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[8];
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  *(_OWORD *)((char *)a1 + v10) = *(_OWORD *)((char *)a2 + v10);
  *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  return a1;
}

_WORD *sub_1003BEAC8(_WORD *a1, _WORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  uint64_t v10 = a3[7];
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (uint64_t *)((char *)a2 + v10);
  uint64_t v14 = *v12;
  uint64_t v13 = v12[1];
  *uint64_t v11 = v14;
  v11[1] = v13;
  swift_bridgeObjectRelease();
  uint64_t v15 = a3[8];
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (uint64_t *)((char *)a2 + v15);
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  void *v16 = v19;
  v16[1] = v18;
  swift_bridgeObjectRelease();
  *((unsigned char *)a1 + a3[9]) = *((unsigned char *)a2 + a3[9]);
  return a1;
}

uint64_t sub_1003BEB98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003BEBAC);
}

uint64_t sub_1003BEBAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 24);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 28) + 8);
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    return (v12 + 1);
  }
}

uint64_t sub_1003BEC74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1003BEC88);
}

uint64_t sub_1003BEC88(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 24);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 28) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t sub_1003BED4C()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for MessagingAccount(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for MessagingAccount(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for MessagingAccount(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for AccessoryManufacturerNameResponsePayload()
{
  return &type metadata for AccessoryManufacturerNameResponsePayload;
}

uint64_t sub_1003BEEB8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1003BF084(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1003BEEE4(void *a1)
{
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryEncoding.container()();
  uint64_t v1 = String.utf8Data.getter();
  unint64_t v3 = v2;
  sub_1000BD078((uint64_t)v5, v6);
  sub_100135A44();
  dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
  sub_10001CFB8(v1, v3);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v5);
}

unint64_t sub_1003BEFAC(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1003BEFDC();
  unint64_t result = sub_1003BF030();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1003BEFDC()
{
  unint64_t result = qword_101642C88;
  if (!qword_101642C88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101642C88);
  }
  return result;
}

unint64_t sub_1003BF030()
{
  unint64_t result = qword_101642C90;
  if (!qword_101642C90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101642C90);
  }
  return result;
}

uint64_t sub_1003BF084(void *a1)
{
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryDecoding.container()();
  uint64_t v3 = sub_1000BD078((uint64_t)v12, v13);
  uint64_t v4 = dispatch thunk of BinaryDecodingContaining.decode()();
  if (!v1)
  {
    uint64_t v6 = v4;
    unint64_t v7 = v5;
    sub_1000362FC();
    uint64_t v8 = DataProtocol.nullTerminatedUTF8String.getter();
    if (v9)
    {
      uint64_t v3 = v8;
      sub_10001CFB8(v6, v7);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v12);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
      return v3;
    }
    uint64_t v3 = type metadata accessor for BinaryEncodingError();
    sub_10017986C();
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v3 - 8) + 104))(v11, enum case for BinaryEncodingError.encodingError(_:), v3);
    swift_willThrow();
    sub_10001CFB8(v6, v7);
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v12);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  return v3;
}

unint64_t sub_1003BF1F8(char a1)
{
  unint64_t result = 0x6449616E6D66;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000010;
      break;
    case 2:
      unint64_t result = 0x754E6C6169726573;
      break;
    case 3:
      unint64_t result = 1684628325;
      break;
    case 4:
      unint64_t result = 0x644970696863;
      break;
    case 5:
      unint64_t result = 0x657261776D726966;
      break;
    case 6:
      unint64_t result = 0x44746375646F7270;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1003BF2EC(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_101642E88);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_1003C7D3C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  type metadata accessor for UUID();
  sub_1003C7D90(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for AccessoryUnpairData();
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[12] = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[11] = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[10] = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v8[9] = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

unint64_t sub_1003BF598()
{
  return sub_1003BF1F8(*v0);
}

uint64_t sub_1003BF5A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1003C54DC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1003BF5C8(uint64_t a1)
{
  unint64_t v2 = sub_1003C7D3C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1003BF604(uint64_t a1)
{
  unint64_t v2 = sub_1003C7D3C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1003BF640(void *a1)
{
  return sub_1003BF2EC(a1);
}

uint64_t sub_1003BF658()
{
  uint64_t result = Data.init(base64Encoded:options:)();
  qword_101642C98 = result;
  qword_101642CA0 = v1;
  return result;
}

id sub_1003BF698()
{
  uint64_t v1 = *(void **)(v0 + 24);
  if (v1)
  {
    id v2 = *(id *)(v0 + 24);
  }
  else
  {
    id v3 = [objc_allocWithZone((Class)ACAccountStore) init];
    uint64_t v4 = *(void **)(v0 + 24);
    *(void *)(v0 + 24) = v3;
    id v2 = v3;

    uint64_t v1 = 0;
  }
  id v5 = v1;
  return v2;
}

uint64_t sub_1003BF704(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  unint64_t v60 = a2;
  uint64_t v61 = a3;
  uint64_t v56 = *v3;
  uint64_t v57 = a1;
  uint64_t v58 = sub_10000588C(&qword_101642DB8);
  __chkstk_darwin(v58);
  uint64_t v59 = (void *)((char *)v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v5 - 8);
  unint64_t v55 = (char *)v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v52 = *(void *)(v54 - 8);
  __chkstk_darwin(v54);
  long long v53 = (char *)v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v50 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v50);
  long long v51 = (char *)v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v9 - 8);
  v49[1] = (char *)v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C((uint64_t *)&unk_101649E20);
  __chkstk_darwin(v11 - 8);
  uint64_t v62 = (char *)v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for FMNAccountType();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for AccessoryPairingLockCheckEndPoint();
  uint64_t v18 = __chkstk_darwin(v17);
  unint64_t v20 = (char *)v49 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  unint64_t v22 = (char *)v49 - v21;
  static os_log_type_t.default.getter();
  if (qword_101637308 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_101342130;
  *(void *)(v23 + 56) = &type metadata for String;
  *(void *)(v23 + 64) = sub_10000B4CC();
  *(void *)(v23 + 32) = 0xD000000000000036;
  *(void *)(v23 + 40) = 0x80000001013FB530;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v24 = enum case for FMNAccountType.accessory(_:);
  uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 104);
  v25(v16, enum case for FMNAccountType.accessory(_:), v13);
  type metadata accessor for AccountURLComponents();
  swift_allocObject();
  *(void *)unint64_t v22 = sub_1010E7A64((uint64_t)v16);
  v25(&v22[*(int *)(v17 + 20)], v24, v13);
  type metadata accessor for SearchPartyURLSessionFactory(0);
  swift_allocObject();
  uint64_t v26 = type metadata accessor for FMNMockingPreferences();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v62, 1, 1, v26);
  uint64_t v27 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)();
  type metadata accessor for ServerInteractionController(0);
  uint64_t v28 = swift_allocObject();
  sub_1003C6720((uint64_t)v22, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for AccessoryPairingLockCheckEndPoint);
  uint64_t v29 = sub_1004A43F8((uint64_t)v20, v27, v28);
  sub_1003C66C0((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for AccessoryPairingLockCheckEndPoint);
  uint64_t v30 = v63;
  id v31 = sub_1003BF698();
  uint64_t v32 = sub_1004C6DD4();

  if (v32 && (uint64_t v33 = sub_1004C6EF0(), v35 = v34, v32, v35))
  {
    sub_10000584C();
    static DispatchQoS.unspecified.getter();
    unint64_t v65 = _swiftEmptyArrayStorage;
    sub_1003C7D90((unint64_t *)&qword_101638CC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
    sub_10000588C((uint64_t *)&unk_1016376F0);
    sub_1001BF100((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    (*(void (**)(char *, void, uint64_t))(v52 + 104))(v53, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v54);
    uint64_t v36 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
    uint64_t v37 = type metadata accessor for TaskPriority();
    uint64_t v38 = (uint64_t)v55;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v55, 1, 1, v37);
    uint64_t v39 = swift_allocObject();
    *(void *)(v39 + 16) = 0;
    *(void *)(v39 + 24) = 0;
    uint64_t v40 = v57;
    long long v41 = *(_OWORD *)(v57 + 112);
    *(_OWORD *)(v39 + 128) = *(_OWORD *)(v57 + 96);
    *(_OWORD *)(v39 + 144) = v41;
    *(_OWORD *)(v39 + 160) = *(_OWORD *)(v40 + 128);
    long long v42 = *(_OWORD *)(v40 + 48);
    *(_OWORD *)(v39 + 64) = *(_OWORD *)(v40 + 32);
    *(_OWORD *)(v39 + 80) = v42;
    long long v43 = *(_OWORD *)(v40 + 80);
    *(_OWORD *)(v39 + 96) = *(_OWORD *)(v40 + 64);
    *(_OWORD *)(v39 + 112) = v43;
    long long v44 = *(_OWORD *)(v40 + 16);
    *(_OWORD *)(v39 + 32) = *(_OWORD *)v40;
    *(_OWORD *)(v39 + 48) = v44;
    *(void *)(v39 + 176) = v33;
    *(void *)(v39 + 184) = v35;
    *(void *)(v39 + 192) = v30;
    *(void *)(v39 + 200) = v36;
    uint64_t v45 = v61;
    *(void *)(v39 + 208) = v60;
    *(void *)(v39 + 216) = v45;
    uint64_t v46 = v56;
    *(void *)(v39 + 224) = v29;
    *(void *)(v39 + 232) = v46;
    sub_1003C643C((uint64_t *)v40);
    swift_retain();
    swift_retain();
    sub_1008F5E44(v38, (uint64_t)&unk_101642DC8, v39);
    return swift_release();
  }
  else
  {
    static os_log_type_t.error.getter();
    if (qword_1016372A8 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    type metadata accessor for SPPairingSessionError(0);
    uint64_t v64 = 1;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_1003C7D90(&qword_101638770, type metadata accessor for SPPairingSessionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v48 = (uint64_t)v59;
    *uint64_t v59 = v65;
    swift_storeEnumTagMultiPayload();
    v60(v48);
    swift_release();
    return sub_10001DAB4(v48, &qword_101642DB8);
  }
}

uint64_t sub_1003BFF9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 160) = v14;
  *(void *)(v8 + 168) = v15;
  *(_OWORD *)(v8 + 144) = v13;
  *(void *)(v8 + 128) = a7;
  *(void *)(v8 + 136) = a8;
  *(void *)(v8 + 112) = a5;
  *(void *)(v8 + 120) = a6;
  *(void *)(v8 + 104) = a4;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  *(void *)(v8 + 176) = v9;
  *(void *)(v8 + 184) = *(void *)(v9 - 8);
  *(void *)(v8 + 192) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for DispatchQoS();
  *(void *)(v8 + 200) = v10;
  *(void *)(v8 + 208) = *(void *)(v10 - 8);
  *(void *)(v8 + 216) = swift_task_alloc();
  return _swift_task_switch(sub_1003C00D4, 0, 0);
}

uint64_t sub_1003C00D4()
{
  uint64_t v1 = (uint64_t *)v0[13];
  uint64_t v2 = *(void *)(v0[16] + 16);
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1003C643C(v1);
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_10166CCF0 + dword_10166CCF0);
  id v3 = (void *)swift_task_alloc();
  v0[28] = v3;
  *id v3 = v0;
  v3[1] = sub_1003C01A8;
  uint64_t v4 = v0[14];
  uint64_t v5 = v0[15];
  uint64_t v6 = v0[13];
  return v8(v6, v4, v5, v2);
}

uint64_t sub_1003C01A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (void *)*v3;
  v4[8] = v3;
  v4[9] = a1;
  v4[10] = a2;
  v4[11] = a3;
  v4[29] = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1003C02B0, 0, 0);
}

uint64_t sub_1003C02B0()
{
  uint64_t v1 = v0[29];
  if (v1)
  {
    uint64_t v2 = v0[10];
    unint64_t v3 = v0[11];
    uint64_t v4 = (void *)v0[20];
    uint64_t v5 = v0[18];
    uint64_t v6 = v0[19];
    uint64_t v7 = (void *)v0[17];
    uint64_t v29 = v0[16];
    uint64_t v31 = v0[21];
    uint64_t v8 = v0[13];
    swift_bridgeObjectRetain();
    sub_1000361E0(v2, v3);
    sub_1004A9DB0(v1, v2, v3, 0, v4);
    sub_1001D7860(v1, v2, v3);
    uint64_t v9 = (void *)swift_allocObject();
    void v9[2] = v7;
    v9[3] = v5;
    v9[4] = v6;
    id v10 = v7;
    swift_retain();
    Future.addFailure(block:)();
    swift_release();
    swift_release();
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = v10;
    *(void *)(v11 + 24) = v5;
    *(void *)(v11 + 32) = v6;
    *(void *)(v11 + 40) = v29;
    *(_OWORD *)(v11 + 48) = *(_OWORD *)v8;
    long long v12 = *(_OWORD *)(v8 + 16);
    long long v13 = *(_OWORD *)(v8 + 32);
    long long v14 = *(_OWORD *)(v8 + 64);
    *(_OWORD *)(v11 + 96) = *(_OWORD *)(v8 + 48);
    *(_OWORD *)(v11 + 112) = v14;
    *(_OWORD *)(v11 + 64) = v12;
    *(_OWORD *)(v11 + 80) = v13;
    long long v15 = *(_OWORD *)(v8 + 80);
    long long v16 = *(_OWORD *)(v8 + 96);
    long long v17 = *(_OWORD *)(v8 + 128);
    *(_OWORD *)(v11 + 160) = *(_OWORD *)(v8 + 112);
    *(_OWORD *)(v11 + 176) = v17;
    *(_OWORD *)(v11 + 128) = v15;
    *(_OWORD *)(v11 + 144) = v16;
    *(void *)(v11 + 192) = v31;
    sub_1003C643C((uint64_t *)v8);
    id v18 = v10;
    swift_retain();
    swift_retain();
    Future.addSuccess(block:)();
    swift_release();
    swift_release();
    swift_release();
    sub_1001D7860(v1, v2, v3);
  }
  else
  {
    static os_log_type_t.error.getter();
    if (qword_101637308 != -1) {
      swift_once();
    }
    uint64_t v19 = v0[27];
    uint64_t v20 = v0[24];
    uint64_t v30 = v0[26];
    uint64_t v32 = v0[25];
    uint64_t v21 = v0[22];
    uint64_t v22 = v0[23];
    uint64_t v23 = v0[18];
    uint64_t v24 = v0[19];
    os_log(_:dso:log:_:_:)();
    uint64_t v25 = swift_allocObject();
    *(void *)(v25 + 16) = v23;
    *(void *)(v25 + 24) = v24;
    v0[6] = sub_1003C7FE8;
    v0[7] = v25;
    v0[2] = _NSConcreteStackBlock;
    v0[3] = 1107296256;
    v0[4] = sub_1004B5480;
    v0[5] = &unk_1015BDD20;
    uint64_t v26 = _Block_copy(v0 + 2);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    v0[12] = _swiftEmptyArrayStorage;
    sub_1003C7D90((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_1001BF100((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v26);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v20, v21);
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v19, v32);
    swift_release();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v27 = (uint64_t (*)(void))v0[1];
  return v27();
}

uint64_t sub_1003C06A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a3;
  uint64_t v20 = a4;
  uint64_t v23 = a2;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v22 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  id v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_log_type_t.error.getter();
  if (qword_101637308 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_101342130;
  aBlock[0] = a1;
  swift_errorRetain();
  sub_10000588C(&qword_101638D40);
  uint64_t v12 = String.init<A>(describing:)();
  uint64_t v14 = v13;
  *(void *)(v11 + 56) = &type metadata for String;
  *(void *)(v11 + 64) = sub_10000B4CC();
  *(void *)(v11 + 32) = v12;
  *(void *)(v11 + 40) = v14;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v15 = swift_allocObject();
  uint64_t v16 = v20;
  *(void *)(v15 + 16) = v19;
  *(void *)(v15 + 24) = v16;
  aBlock[4] = sub_1003C69C8;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015BDF50;
  long long v17 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v24 = _swiftEmptyArrayStorage;
  sub_1003C7D90((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_1001BF100((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v21);
  return swift_release();
}

uint64_t sub_1003C0A30(void (*a1)(void *), uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7 = sub_10000588C(a3);
  __chkstk_darwin(v7);
  uint64_t v9 = (void *)((char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for SPPairingSessionError(0);
  v11[0] = a4;
  sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
  sub_1003C7D90(&qword_101638770, type metadata accessor for SPPairingSessionError);
  _BridgedStoredNSError.init(_:userInfo:)();
  *uint64_t v9 = v11[1];
  swift_storeEnumTagMultiPayload();
  a1(v9);
  return sub_10001DAB4((uint64_t)v9, a3);
}

uint64_t sub_1003C0B6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v99 = a6;
  uint64_t v103 = a3;
  uint64_t v104 = a4;
  uint64_t v105 = a2;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v108 = *(void *)(v7 - 8);
  uint64_t v109 = v7;
  __chkstk_darwin(v7);
  uint64_t v106 = (char *)&v94 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v110 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  Class v107 = (char *)&v94 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v101 = type metadata accessor for AccessoryPairingLockCheckResponse();
  uint64_t v97 = *(void *)(v101 - 8);
  uint64_t v11 = *(void *)(v97 + 64);
  uint64_t v12 = __chkstk_darwin(v101);
  uint64_t v98 = (uint64_t)&v94 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v102 = (uint64_t)&v94 - v13;
  uint64_t v14 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v14 - 8);
  uint64_t v15 = type metadata accessor for FMNServerInteractionController.FMNResponseFields();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v94 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v22 = (char *)&v94 - v21;
  __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v94 - v23;
  uint64_t v25 = FMNServerInteractionController.FMNResponseFields.statusCode.getter();
  if (v25 == 409)
  {
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (qword_101637308 != -1) {
      swift_once();
    }
    uint64_t v33 = qword_10170F060;
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v22, a1, v15);
    if (os_log_type_enabled(v33, v32))
    {
      uint64_t v34 = (uint8_t *)swift_slowAlloc();
      uint64_t v35 = (void **)swift_slowAlloc();
      uint64_t v100 = v9;
      aBlock = v35;
      *(_DWORD *)uint64_t v34 = 136446210;
      sub_1003C7D90((unint64_t *)&qword_101649E30, (void (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields);
      uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter();
      Class v111 = (void *)sub_1008FA0F0(v36, v37, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v16 + 8))(v22, v15);
      _os_log_impl((void *)&_mh_execute_header, v33, v32, "Linked to another Apple ID. %{public}s", v34, 0xCu);
      swift_arrayDestroy();
      uint64_t v9 = v100;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v16 + 8))(v22, v15);
    }
    uint64_t v56 = swift_allocObject();
    uint64_t v57 = v104;
    *(void *)(v56 + 16) = v103;
    *(void *)(v56 + 24) = v57;
    uint64_t v116 = sub_1003C6610;
    uint64_t v117 = v56;
    aBlock = _NSConcreteStackBlock;
    uint64_t v113 = 1107296256;
    uint64_t v58 = &unk_1015BDE10;
    goto LABEL_23;
  }
  if (v25 != 200)
  {
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (qword_101637308 != -1) {
      swift_once();
    }
    uint64_t v39 = qword_10170F060;
    (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, a1, v15);
    if (os_log_type_enabled(v39, v38))
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc();
      long long v41 = (void **)swift_slowAlloc();
      uint64_t v100 = v9;
      aBlock = v41;
      *(_DWORD *)uint64_t v40 = 136446210;
      sub_1003C7D90((unint64_t *)&qword_101649E30, (void (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields);
      uint64_t v42 = dispatch thunk of CustomStringConvertible.description.getter();
      Class v111 = (void *)sub_1008FA0F0(v42, v43, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
      _os_log_impl((void *)&_mh_execute_header, v39, v38, "Pairing lock failed: %{public}s", v40, 0xCu);
      swift_arrayDestroy();
      uint64_t v9 = v100;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v15);
    }
    uint64_t v59 = swift_allocObject();
    uint64_t v60 = v104;
    *(void *)(v59 + 16) = v103;
    *(void *)(v59 + 24) = v60;
    uint64_t v116 = sub_1003C7FE8;
    uint64_t v117 = v59;
    aBlock = _NSConcreteStackBlock;
    uint64_t v113 = 1107296256;
    uint64_t v58 = &unk_1015BDDC0;
LABEL_23:
    uint64_t v114 = sub_1004B5480;
    uint64_t v115 = v58;
    uint64_t v61 = _Block_copy(&aBlock);
    swift_retain();
    uint64_t v62 = v107;
    static DispatchQoS.unspecified.getter();
    Class v111 = _swiftEmptyArrayStorage;
    sub_1003C7D90((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_1001BF100((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v63 = v106;
    uint64_t v64 = v109;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v61);
    (*(void (**)(char *, uint64_t))(v108 + 8))(v63, v64);
    (*(void (**)(char *, uint64_t))(v110 + 8))(v62, v9);
    return swift_release();
  }
  uint64_t v100 = v9;
  os_log_type_t v26 = static os_log_type_t.default.getter();
  if (qword_101637308 != -1) {
    swift_once();
  }
  uint64_t v27 = qword_10170F060;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v24, a1, v15);
  if (os_log_type_enabled(v27, v26))
  {
    uint64_t v28 = swift_slowAlloc();
    os_log_t v95 = v27;
    uint64_t v29 = (uint8_t *)v28;
    uint64_t v96 = (void **)swift_slowAlloc();
    aBlock = v96;
    *(_DWORD *)uint64_t v29 = 136446210;
    uint64_t v94 = v29 + 4;
    sub_1003C7D90((unint64_t *)&qword_101649E30, (void (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields);
    uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
    Class v111 = (void *)sub_1008FA0F0(v30, v31, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v24, v15);
    _os_log_impl((void *)&_mh_execute_header, v95, v26, "Pairing success: %{public}s", v29, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v24, v15);
  }
  uint64_t v44 = FMNServerInteractionController.FMNResponseFields.data.getter();
  unint64_t v46 = v45;
  static String.Encoding.utf8.getter();
  uint64_t v47 = String.init(data:encoding:)();
  uint64_t v49 = v48;
  sub_10001CFB8(v44, v46);
  if (v49)
  {
    static os_log_type_t.info.getter();
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v50 = swift_allocObject();
    *(_OWORD *)(v50 + 16) = xmmword_101342130;
    *(void *)(v50 + 56) = &type metadata for String;
    *(void *)(v50 + 64) = sub_10000B4CC();
    *(void *)(v50 + 32) = v47;
    *(void *)(v50 + 40) = v49;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
  }
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  uint64_t v51 = JSONDecoder.init()();
  uint64_t v52 = FMNServerInteractionController.FMNResponseFields.data.getter();
  unint64_t v54 = v53;
  sub_1003C7D90(&qword_101642DD0, (void (*)(uint64_t))type metadata accessor for AccessoryPairingLockCheckResponse);
  uint64_t v55 = v102;
  uint64_t v101 = v51;
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  sub_10001CFB8(v52, v54);
  if (qword_101636AA0 != -1) {
    swift_once();
  }
  uint64_t v66 = qword_101642CA0;
  if ((unint64_t)qword_101642CA0 >> 60 == 15)
  {
    static os_log_type_t.error.getter();
    os_log(_:dso:log:_:_:)();
    uint64_t v67 = swift_allocObject();
    uint64_t v68 = v104;
    *(void *)(v67 + 16) = v103;
    *(void *)(v67 + 24) = v68;
    uint64_t v116 = sub_1003C6698;
    uint64_t v117 = v67;
    aBlock = _NSConcreteStackBlock;
    uint64_t v113 = 1107296256;
    uint64_t v114 = sub_1004B5480;
    uint64_t v115 = &unk_1015BDEB0;
    unint64_t v69 = _Block_copy(&aBlock);
    swift_retain();
    uint64_t v70 = v55;
    unint64_t v71 = v107;
    static DispatchQoS.unspecified.getter();
    Class v111 = _swiftEmptyArrayStorage;
    sub_1003C7D90((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_1001BF100((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v72 = v106;
    uint64_t v73 = v109;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    swift_release();
    _Block_release(v69);
    (*(void (**)(char *, uint64_t))(v108 + 8))(v72, v73);
    (*(void (**)(char *, uint64_t))(v110 + 8))(v71, v100);
    sub_1003C66C0(v70, (uint64_t (*)(void))type metadata accessor for AccessoryPairingLockCheckResponse);
  }
  else
  {
    uint64_t v74 = qword_101642C98;
    sub_100037A38(qword_101642C98, qword_101642CA0);
    uint64_t v75 = sub_1003C57F0(v99, v55);
    uint64_t v77 = v76;
    uint64_t v78 = *(void *)(v55 + 16);
    unint64_t v79 = *(void *)(v55 + 24);
    sub_1000361E0(v78, v79);
    uint64_t v80 = (id)kSecKeyAlgorithmECDSASignatureMessageX962SHA256;
    uint64_t v99 = v74;
    uint64_t v81 = v74;
    unint64_t v82 = v77;
    char v83 = sub_100A8C768(v81, v66, v75, v77, v78, v79, v80);

    sub_10001CFB8(v78, v79);
    static os_log_type_t.default.getter();
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v84 = swift_allocObject();
    *(_OWORD *)(v84 + 16) = xmmword_101342130;
    *(void *)(v84 + 56) = &type metadata for Bool;
    *(void *)(v84 + 64) = &protocol witness table for Bool;
    *(unsigned char *)(v84 + 32) = v83 & 1;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    uint64_t v85 = v102;
    uint64_t v86 = v98;
    sub_1003C6720(v102, v98, (uint64_t (*)(void))type metadata accessor for AccessoryPairingLockCheckResponse);
    unint64_t v87 = (*(unsigned __int8 *)(v97 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v97 + 80);
    uint64_t v88 = swift_allocObject();
    uint64_t v89 = v104;
    *(void *)(v88 + 16) = v103;
    *(void *)(v88 + 24) = v89;
    sub_1003C68AC(v86, v88 + v87, (uint64_t (*)(void))type metadata accessor for AccessoryPairingLockCheckResponse);
    uint64_t v116 = sub_1003C6914;
    uint64_t v117 = v88;
    aBlock = _NSConcreteStackBlock;
    uint64_t v113 = 1107296256;
    uint64_t v114 = sub_1004B5480;
    uint64_t v115 = &unk_1015BDF00;
    uint64_t v90 = _Block_copy(&aBlock);
    swift_retain();
    unint64_t v91 = v107;
    static DispatchQoS.unspecified.getter();
    Class v111 = _swiftEmptyArrayStorage;
    sub_1003C7D90((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_1001BF100((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v92 = v106;
    uint64_t v93 = v109;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v90);
    sub_10001CFB8(v75, v82);
    sub_100037A24(v99, v66);
    swift_release();
    (*(void (**)(char *, uint64_t))(v108 + 8))(v92, v93);
    (*(void (**)(char *, uint64_t))(v110 + 8))(v91, v100);
    sub_1003C66C0(v85, (uint64_t (*)(void))type metadata accessor for AccessoryPairingLockCheckResponse);
  }
  return swift_release();
}

uint64_t sub_1003C1ED0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v66 = a4;
  uint64_t v64 = a3;
  uint64_t v61 = a2;
  uint64_t v52 = a1;
  uint64_t v4 = type metadata accessor for AccessoryUnpairData();
  uint64_t v59 = *(void *)(v4 - 8);
  __chkstk_darwin(v4 - 8);
  uint64_t v60 = v5;
  uint64_t v62 = (uint64_t)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v6 - 8);
  uint64_t v63 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v58 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v56 = *(void *)(v58 - 8);
  __chkstk_darwin(v58);
  uint64_t v57 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v54);
  uint64_t v55 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v10 - 8);
  unint64_t v53 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000588C((uint64_t *)&unk_101649E20);
  __chkstk_darwin(v12 - 8);
  uint64_t v51 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for FMNAccountType();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v50 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for AccessoryUnpairEndpoint();
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v50 = (uint64_t)&v50 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v50 - v21;
  uint64_t v23 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)&v50 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_log_type_t.default.getter();
  if (qword_101637308 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_101342130;
  sub_1003C5E38(v52, (uint64_t)v25);
  uint64_t v27 = String.init<A>(describing:)();
  uint64_t v29 = v28;
  *(void *)(v26 + 56) = &type metadata for String;
  *(void *)(v26 + 64) = sub_10000B4CC();
  *(void *)(v26 + 32) = v27;
  *(void *)(v26 + 40) = v29;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v30 = enum case for FMNAccountType.accessory(_:);
  unint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 104);
  v31(v17, enum case for FMNAccountType.accessory(_:), v14);
  type metadata accessor for AccountURLComponents();
  swift_allocObject();
  *(void *)uint64_t v22 = sub_1010E7A64((uint64_t)v17);
  v31(&v22[*(int *)(v18 + 20)], v30, v14);
  type metadata accessor for SearchPartyURLSessionFactory(0);
  swift_allocObject();
  uint64_t v32 = type metadata accessor for FMNMockingPreferences();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v51, 1, 1, v32);
  uint64_t v33 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)();
  type metadata accessor for ServerInteractionController(0);
  uint64_t v34 = swift_allocObject();
  uint64_t v35 = v50;
  sub_1003C6720((uint64_t)v22, v50, (uint64_t (*)(void))type metadata accessor for AccessoryUnpairEndpoint);
  uint64_t v36 = sub_1004A3BC8(v35, v33, v34);
  sub_1003C66C0((uint64_t)v22, (uint64_t (*)(void))type metadata accessor for AccessoryUnpairEndpoint);
  sub_10000584C();
  static DispatchQoS.unspecified.getter();
  uint64_t v67 = _swiftEmptyArrayStorage;
  sub_1003C7D90((unint64_t *)&qword_101638CC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000588C((uint64_t *)&unk_1016376F0);
  sub_1001BF100((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v56 + 104))(v57, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v58);
  uint64_t v37 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v38 = type metadata accessor for TaskPriority();
  uint64_t v39 = (uint64_t)v63;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v63, 1, 1, v38);
  uint64_t v40 = v62;
  sub_1003C6720(v61, v62, (uint64_t (*)(void))type metadata accessor for AccessoryUnpairData);
  unint64_t v41 = (*(unsigned __int8 *)(v59 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v59 + 80);
  unint64_t v42 = (v60 + v41 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v43 = (v42 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v44 = (v43 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v45 = swift_allocObject();
  *(void *)(v45 + 16) = 0;
  *(void *)(v45 + 24) = 0;
  sub_1003C68AC(v40, v45 + v41, (uint64_t (*)(void))type metadata accessor for AccessoryUnpairData);
  uint64_t v46 = v64;
  *(void *)(v45 + v42) = v65;
  *(void *)(v45 + v43) = v37;
  uint64_t v47 = (void *)(v45 + v44);
  uint64_t v48 = v66;
  *uint64_t v47 = v46;
  v47[1] = v48;
  *(void *)(v45 + ((v44 + 23) & 0xFFFFFFFFFFFFFFF8)) = v36;
  swift_retain();
  swift_retain();
  sub_1008F5E44(v39, (uint64_t)&unk_101642DB0, v45);
  return swift_release();
}

uint64_t sub_1003C26B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[17] = a8;
  v8[18] = v13;
  v8[15] = a6;
  unsigned char v8[16] = a7;
  v8[13] = a4;
  v8[14] = a5;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  v8[19] = v9;
  v8[20] = *(void *)(v9 - 8);
  v8[21] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for DispatchQoS();
  v8[22] = v10;
  v8[23] = *(void *)(v10 - 8);
  v8[24] = swift_task_alloc();
  type metadata accessor for AccessoryUnpairData();
  v8[25] = swift_task_alloc();
  return _swift_task_switch(sub_1003C2810, 0, 0);
}

uint64_t sub_1003C2810()
{
  uint64_t v1 = v0[14];
  sub_1003C6720(v0[13], v0[25], (uint64_t (*)(void))type metadata accessor for AccessoryUnpairData);
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_101641DB8 + dword_101641DB8);
  swift_retain();
  unint64_t v3 = (void *)swift_task_alloc();
  v0[26] = (uint64_t)v3;
  *unint64_t v3 = v0;
  v3[1] = sub_1003C28F0;
  uint64_t v4 = v0[25];
  return v6(v4, v2);
}

uint64_t sub_1003C28F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (void *)*v3;
  v4[8] = v3;
  v4[9] = a1;
  v4[10] = a2;
  v4[11] = a3;
  v4[27] = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1003C29F8, 0, 0);
}

uint64_t sub_1003C29F8()
{
  uint64_t v1 = v0[27];
  if (v1)
  {
    uint64_t v2 = v0[10];
    unint64_t v3 = v0[11];
    uint64_t v5 = v0[17];
    uint64_t v4 = (void *)v0[18];
    uint64_t v6 = (void *)v0[15];
    uint64_t v7 = v0[16];
    swift_bridgeObjectRetain();
    sub_1000361E0(v2, v3);
    sub_1004AA0AC(v1, v2, v3, 0, v4);
    sub_1001D7860(v1, v2, v3);
    uint64_t v8 = (void *)swift_allocObject();
    void v8[2] = v6;
    v8[3] = v7;
    v8[4] = v5;
    id v9 = v6;
    swift_retain();
    Future.addFailure(block:)();
    swift_release();
    swift_release();
    uint64_t v10 = (void *)swift_allocObject();
    v10[2] = v9;
    v10[3] = v7;
    v10[4] = v5;
    id v11 = v9;
    swift_retain();
    Future.addSuccess(block:)();
    swift_release();
    swift_release();
    swift_release();
    sub_1001D7860(v1, v2, v3);
  }
  else
  {
    static os_log_type_t.error.getter();
    if (qword_101637308 != -1) {
      swift_once();
    }
    uint64_t v12 = v0[24];
    uint64_t v13 = v0[21];
    uint64_t v22 = v0[23];
    uint64_t v23 = v0[22];
    uint64_t v14 = v0[19];
    uint64_t v15 = v0[20];
    uint64_t v16 = v0[16];
    uint64_t v17 = v0[17];
    os_log(_:dso:log:_:_:)();
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = v16;
    *(void *)(v18 + 24) = v17;
    v0[6] = sub_1003C61B4;
    v0[7] = v18;
    v0[2] = _NSConcreteStackBlock;
    v0[3] = 1107296256;
    v0[4] = sub_1004B5480;
    v0[5] = &unk_1015BDB68;
    uint64_t v19 = _Block_copy(v0 + 2);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    v0[12] = _swiftEmptyArrayStorage;
    sub_1003C7D90((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_1001BF100((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v19);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v12, v23);
    swift_release();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v20 = (uint64_t (*)(void))v0[1];
  return v20();
}

uint64_t sub_1003C2DAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = a3;
  uint64_t v21 = a4;
  uint64_t v25 = a2;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v24 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v22 = *(void *)(v8 - 8);
  uint64_t v23 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_log_type_t.error.getter();
  if (qword_101637308 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_101342130;
  aBlock[0] = a1;
  swift_errorRetain();
  sub_10000588C(&qword_101638D40);
  uint64_t v12 = String.init<A>(describing:)();
  uint64_t v14 = v13;
  *(void *)(v11 + 56) = &type metadata for String;
  *(void *)(v11 + 64) = sub_10000B4CC();
  *(void *)(v11 + 32) = v12;
  *(void *)(v11 + 40) = v14;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v15 = (void *)swift_allocObject();
  uint64_t v16 = v21;
  v15[2] = v20;
  v15[3] = v16;
  v15[4] = a1;
  aBlock[4] = sub_10027B0F4;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015BDCA8;
  uint64_t v17 = _Block_copy(aBlock);
  swift_errorRetain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v26 = _swiftEmptyArrayStorage;
  sub_1003C7D90((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_1001BF100((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v10, v23);
  return swift_release();
}

uint64_t sub_1003C3144(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v26 = a2;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v27 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = FMNServerInteractionController.FMNResponseFields.statusCode.getter();
  static os_log_type_t.default.getter();
  if (v13 == 200)
  {
    if (qword_101637308 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = a3;
    *(void *)(v14 + 24) = a4;
    uint64_t v33 = sub_1003C6214;
    uint64_t v34 = v14;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    uint64_t v30 = 1107296256;
    unint64_t v31 = sub_1004B5480;
    uint64_t v32 = &unk_1015BDC58;
    uint64_t v15 = _Block_copy(&aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v28 = _swiftEmptyArrayStorage;
    sub_1003C7D90((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_1001BF100((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v15);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v12, v10);
  }
  else
  {
    uint64_t v23 = a3;
    uint64_t v24 = v10;
    uint64_t v25 = v7;
    if (qword_101637308 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_101342130;
    uint64_t aBlock = FMNServerInteractionController.FMNResponseFields.statusCode.getter();
    uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v19 = v18;
    *(void *)(v16 + 56) = &type metadata for String;
    *(void *)(v16 + 64) = sub_10000B4CC();
    *(void *)(v16 + 32) = v17;
    *(void *)(v16 + 40) = v19;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = v23;
    *(void *)(v20 + 24) = a4;
    uint64_t v33 = sub_1003C61F4;
    uint64_t v34 = v20;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    uint64_t v30 = 1107296256;
    unint64_t v31 = sub_1004B5480;
    uint64_t v32 = &unk_1015BDC08;
    uint64_t v21 = _Block_copy(&aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v28 = _swiftEmptyArrayStorage;
    sub_1003C7D90((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_1001BF100((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v21);
    (*(void (**)(char *, uint64_t))(v25 + 8))(v9, v6);
    (*(void (**)(char *, uint64_t))(v27 + 8))(v12, v24);
  }
  return swift_release();
}

void sub_1003C36A4(void (*a1)())
{
  type metadata accessor for SPPairingSessionError(0);
  sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
  sub_1003C7D90(&qword_101638770, type metadata accessor for SPPairingSessionError);
  _BridgedStoredNSError.init(_:userInfo:)();
  a1();
}

uint64_t sub_1003C3760(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v48 = a2;
  uint64_t v49 = a3;
  uint64_t v4 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v4 - 8);
  uint64_t v46 = (char *)v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v44 = *(void *)(v6 - 8);
  uint64_t v45 = v6;
  __chkstk_darwin(v6);
  unint64_t v43 = (char *)v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v42);
  v41[2] = (char *)v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v9 - 8);
  v41[1] = (char *)v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C((uint64_t *)&unk_101649E20);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for FMNAccountType();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for AccessoryPairingLockAckEndpoint();
  uint64_t v19 = v18 - 8;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v22 = (char *)v41 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v24 = (char *)v41 - v23;
  uint64_t v25 = enum case for FMNAccountType.accessory(_:);
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 104);
  v26(v17, enum case for FMNAccountType.accessory(_:), v14);
  type metadata accessor for AccountURLComponents();
  swift_allocObject();
  *(void *)uint64_t v24 = sub_1010E7A64((uint64_t)v17);
  v26(&v24[*(int *)(v19 + 28)], v25, v14);
  type metadata accessor for SearchPartyURLSessionFactory(0);
  swift_allocObject();
  uint64_t v27 = type metadata accessor for FMNMockingPreferences();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56))(v13, 1, 1, v27);
  uint64_t v28 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)();
  type metadata accessor for ServerInteractionController(0);
  uint64_t v29 = swift_allocObject();
  sub_1003C6720((uint64_t)v24, (uint64_t)v22, (uint64_t (*)(void))type metadata accessor for AccessoryPairingLockAckEndpoint);
  uint64_t v30 = sub_1004A4810((uint64_t)v22, v28, v29);
  sub_1003C66C0((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for AccessoryPairingLockAckEndpoint);
  sub_10000584C();
  static DispatchQoS.unspecified.getter();
  uint64_t v50 = _swiftEmptyArrayStorage;
  sub_1003C7D90((unint64_t *)&qword_101638CC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000588C((uint64_t *)&unk_1016376F0);
  sub_1001BF100((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  (*(void (**)(char *, void, uint64_t))(v44 + 104))(v43, enum case for OS_dispatch_queue.AutoreleaseFrequency.inherit(_:), v45);
  uint64_t v31 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v32 = type metadata accessor for TaskPriority();
  uint64_t v33 = (uint64_t)v46;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v46, 1, 1, v32);
  uint64_t v34 = swift_allocObject();
  *(void *)(v34 + 16) = 0;
  *(void *)(v34 + 24) = 0;
  long long v35 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v34 + 96) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v34 + 112) = v35;
  *(_OWORD *)(v34 + 128) = *(_OWORD *)(a1 + 96);
  long long v36 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v34 + 32) = *(_OWORD *)a1;
  *(_OWORD *)(v34 + 48) = v36;
  long long v37 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v34 + 64) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v34 + 80) = v37;
  uint64_t v38 = v48;
  *(void *)(v34 + 144) = v47;
  *(void *)(v34 + 152) = v31;
  uint64_t v39 = v49;
  *(void *)(v34 + 160) = v38;
  *(void *)(v34 + 168) = v39;
  *(void *)(v34 + 176) = v30;
  sub_1003C543C((void *)a1);
  swift_retain();
  swift_retain();
  sub_1008F5E44(v33, (uint64_t)&unk_101642D90, v34);
  return swift_release();
}

uint64_t sub_1003C3D48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[17] = a8;
  v8[18] = v13;
  v8[15] = a6;
  unsigned char v8[16] = a7;
  v8[13] = a4;
  v8[14] = a5;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  v8[19] = v9;
  v8[20] = *(void *)(v9 - 8);
  v8[21] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for DispatchQoS();
  v8[22] = v10;
  v8[23] = *(void *)(v10 - 8);
  v8[24] = swift_task_alloc();
  return _swift_task_switch(sub_1003C3E74, 0, 0);
}

uint64_t sub_1003C3E74()
{
  uint64_t v1 = (void *)v0[13];
  uint64_t v2 = *(void *)(v0[14] + 16);
  swift_retain();
  sub_1003C543C(v1);
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10166FDD0 + dword_10166FDD0);
  unint64_t v3 = (void *)swift_task_alloc();
  v0[25] = v3;
  *unint64_t v3 = v0;
  v3[1] = sub_1003C3F3C;
  uint64_t v4 = v0[13];
  return v6(v4, v2);
}

uint64_t sub_1003C3F3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (void *)*v3;
  v4[8] = v3;
  v4[9] = a1;
  v4[10] = a2;
  v4[11] = a3;
  v4[26] = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1003C4044, 0, 0);
}

uint64_t sub_1003C4044()
{
  uint64_t v1 = v0[26];
  if (v1)
  {
    uint64_t v2 = v0[10];
    unint64_t v3 = v0[11];
    uint64_t v5 = v0[17];
    uint64_t v4 = (void *)v0[18];
    uint64_t v6 = (void *)v0[15];
    uint64_t v7 = v0[16];
    swift_bridgeObjectRetain();
    sub_1000361E0(v2, v3);
    sub_1004AA3A8(v1, v2, v3, 0, v4);
    sub_1001D7860(v1, v2, v3);
    uint64_t v8 = (void *)swift_allocObject();
    void v8[2] = v6;
    v8[3] = v7;
    v8[4] = v5;
    id v9 = v6;
    swift_retain();
    Future.addFailure(block:)();
    swift_release();
    swift_release();
    uint64_t v10 = (void *)swift_allocObject();
    v10[2] = v9;
    v10[3] = v7;
    v10[4] = v5;
    id v11 = v9;
    swift_retain();
    Future.addSuccess(block:)();
    swift_release();
    swift_release();
    swift_release();
    sub_1001D7860(v1, v2, v3);
  }
  else
  {
    static os_log_type_t.error.getter();
    if (qword_101637308 != -1) {
      swift_once();
    }
    uint64_t v12 = v0[24];
    uint64_t v13 = v0[21];
    uint64_t v22 = v0[23];
    uint64_t v23 = v0[22];
    uint64_t v14 = v0[19];
    uint64_t v15 = v0[20];
    uint64_t v16 = v0[16];
    uint64_t v17 = v0[17];
    os_log(_:dso:log:_:_:)();
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = v16;
    *(void *)(v18 + 24) = v17;
    v0[6] = sub_1003C5C0C;
    v0[7] = v18;
    v0[2] = _NSConcreteStackBlock;
    v0[3] = 1107296256;
    v0[4] = sub_1004B5480;
    v0[5] = &unk_1015BD960;
    uint64_t v19 = _Block_copy(v0 + 2);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    v0[12] = _swiftEmptyArrayStorage;
    sub_1003C7D90((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_1001BF100((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v19);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v13, v14);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v12, v23);
    swift_release();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v20 = (uint64_t (*)(void))v0[1];
  return v20();
}

uint64_t sub_1003C43F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a3;
  uint64_t v20 = a4;
  uint64_t v23 = a2;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v22 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_log_type_t.error.getter();
  if (qword_101637308 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_101342130;
  aBlock[0] = a1;
  swift_errorRetain();
  sub_10000588C(&qword_101638D40);
  uint64_t v12 = String.init<A>(describing:)();
  uint64_t v14 = v13;
  *(void *)(v11 + 56) = &type metadata for String;
  *(void *)(v11 + 64) = sub_10000B4CC();
  *(void *)(v11 + 32) = v12;
  *(void *)(v11 + 40) = v14;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v15 = swift_allocObject();
  uint64_t v16 = v20;
  *(void *)(v15 + 16) = v19;
  *(void *)(v15 + 24) = v16;
  aBlock[4] = sub_1003C5DC4;
  aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015BDAF0;
  uint64_t v17 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v24 = _swiftEmptyArrayStorage;
  sub_1003C7D90((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_1001BF100((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v21);
  return swift_release();
}

uint64_t sub_1003C4780(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v48 = a3;
  uint64_t v49 = a4;
  uint64_t v50 = a2;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v52 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v53 = *(void *)(v7 - 8);
  uint64_t v54 = v7;
  __chkstk_darwin(v7);
  uint64_t v51 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for AccessoryPairingLockAckResponse();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v47 = (char *)&v41 - v14;
  uint64_t v15 = FMNServerInteractionController.FMNResponseFields.statusCode.getter();
  static os_log_type_t.default.getter();
  if (v15 == 200)
  {
    uint64_t v42 = v10;
    uint64_t v45 = v5;
    uint64_t v46 = v4;
    if (qword_101637308 != -1) {
      swift_once();
    }
    uint64_t v44 = sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v16 = swift_allocObject();
    long long v43 = xmmword_101342130;
    *(_OWORD *)(v16 + 16) = xmmword_101342130;
    type metadata accessor for FMNServerInteractionController.FMNResponseFields();
    sub_1003C7D90((unint64_t *)&qword_101649E30, (void (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields);
    uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v19 = v18;
    *(void *)(v16 + 56) = &type metadata for String;
    *(void *)(v16 + 64) = sub_10000B4CC();
    *(void *)(v16 + 32) = v17;
    *(void *)(v16 + 40) = v19;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    uint64_t v20 = FMNServerInteractionController.FMNResponseFields.data.getter();
    unint64_t v22 = v21;
    sub_1003C7D90(&qword_101642D98, (void (*)(uint64_t))type metadata accessor for AccessoryPairingLockAckResponse);
    uint64_t v23 = (uint64_t)v47;
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    sub_10001CFB8(v20, v22);
    sub_1003C6720(v23, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for AccessoryPairingLockAckResponse);
    unint64_t v34 = (*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80);
    uint64_t v35 = swift_allocObject();
    uint64_t v36 = v49;
    *(void *)(v35 + 16) = v48;
    *(void *)(v35 + 24) = v36;
    sub_1003C68AC((uint64_t)v13, v35 + v34, (uint64_t (*)(void))type metadata accessor for AccessoryPairingLockAckResponse);
    uint64_t v60 = sub_1003C5D90;
    uint64_t v61 = v35;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v57 = 1107296256;
    uint64_t v58 = sub_1004B5480;
    uint64_t v59 = &unk_1015BDAA0;
    long long v37 = _Block_copy(&aBlock);
    swift_retain();
    uint64_t v38 = v51;
    static DispatchQoS.unspecified.getter();
    uint64_t v55 = _swiftEmptyArrayStorage;
    sub_1003C7D90((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_1001BF100((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v39 = v52;
    uint64_t v40 = v46;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v37);
    swift_release();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v39, v40);
    (*(void (**)(char *, uint64_t))(v53 + 8))(v38, v54);
    sub_1003C66C0(v23, (uint64_t (*)(void))type metadata accessor for AccessoryPairingLockAckResponse);
  }
  else
  {
    if (qword_101637308 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_101342130;
    type metadata accessor for FMNServerInteractionController.FMNResponseFields();
    sub_1003C7D90((unint64_t *)&qword_101649E30, (void (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields);
    uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v27 = v26;
    *(void *)(v24 + 56) = &type metadata for String;
    *(void *)(v24 + 64) = sub_10000B4CC();
    *(void *)(v24 + 32) = v25;
    *(void *)(v24 + 40) = v27;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    uint64_t v28 = swift_allocObject();
    uint64_t v29 = v49;
    *(void *)(v28 + 16) = v48;
    *(void *)(v28 + 24) = v29;
    uint64_t v60 = sub_1003C7FE4;
    uint64_t v61 = v28;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v57 = 1107296256;
    uint64_t v58 = sub_1004B5480;
    uint64_t v59 = &unk_1015BDA00;
    uint64_t v30 = _Block_copy(&aBlock);
    swift_retain();
    uint64_t v31 = v51;
    static DispatchQoS.unspecified.getter();
    uint64_t v55 = _swiftEmptyArrayStorage;
    sub_1003C7D90((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_1001BF100((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v32 = v52;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v30);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v32, v4);
    (*(void (**)(char *, uint64_t))(v53 + 8))(v31, v54);
  }
  return swift_release();
}

uint64_t sub_1003C51B4(void (*a1)(char *), uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t (*a5)(void))
{
  uint64_t v9 = sub_10000588C(a4);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1003C6720(a3, (uint64_t)v11, a5);
  swift_storeEnumTagMultiPayload();
  a1(v11);
  return sub_10001DAB4((uint64_t)v11, a4);
}

uint64_t type metadata accessor for AccessoryPairingValidator()
{
  return self;
}

uint64_t sub_1003C52AC()
{
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001CFB8(*(void *)(v0 + 80), *(void *)(v0 + 88));
  sub_10001CFB8(*(void *)(v0 + 96), *(void *)(v0 + 104));
  swift_bridgeObjectRelease();
  unint64_t v1 = *(void *)(v0 + 136);
  if (v1 >> 60 != 15) {
    sub_10001CFB8(*(void *)(v0 + 128), v1);
  }
  swift_release();

  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 184, 7);
}

uint64_t sub_1003C534C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[18];
  uint64_t v7 = v1[19];
  uint64_t v8 = v1[20];
  uint64_t v9 = v1[21];
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_10001D2E4;
  return sub_1003C3D48(a1, v4, v5, (uint64_t)(v1 + 4), v6, v7, v8, v9);
}

void *sub_1003C543C(void *a1)
{
  uint64_t v2 = a1[6];
  unint64_t v3 = a1[7];
  uint64_t v4 = a1[8];
  unint64_t v5 = a1[9];
  uint64_t v6 = a1[12];
  unint64_t v7 = a1[13];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000361E0(v2, v3);
  sub_1000361E0(v4, v5);
  swift_bridgeObjectRetain();
  sub_100037A38(v6, v7);
  return a1;
}

uint64_t sub_1003C54DC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6449616E6D66 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001013F10B0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x754E6C6169726573 && a2 == 0xEC0000007265626DLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 1684628325 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x644970696863 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x657261776D726966 && a2 == 0xEF6E6F6973726556 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x44746375646F7270 && a2 == 0xEB00000000617461)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 6;
    }
    else {
      return 7;
    }
  }
}

uint64_t sub_1003C57F0(uint64_t a1, uint64_t a2)
{
  static os_log_type_t.debug.getter();
  if (qword_101637308 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_101342130;
  type metadata accessor for AccessoryPairingLockCheckResponse();
  uint64_t v4 = UUID.data.getter();
  unint64_t v6 = v5;
  uint64_t v7 = Data.hexString.getter();
  uint64_t v9 = v8;
  sub_10001CFB8(v4, v6);
  *(void *)(v3 + 56) = &type metadata for String;
  unint64_t v10 = sub_10000B4CC();
  *(void *)(v3 + 64) = v10;
  *(void *)(v3 + 32) = v7;
  *(void *)(v3 + 40) = v9;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  static os_log_type_t.debug.getter();
  uint64_t v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_101342130;
  uint64_t v13 = *(void *)(a2 + 48);
  uint64_t v12 = *(void *)(a2 + 56);
  *(void *)(v11 + 56) = &type metadata for String;
  *(void *)(v11 + 64) = v10;
  *(void *)(v11 + 32) = v13;
  *(void *)(v11 + 40) = v12;
  swift_bridgeObjectRetain();
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  static os_log_type_t.debug.getter();
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_101342130;
  uint64_t v15 = Data.hexString.getter();
  *(void *)(v14 + 56) = &type metadata for String;
  *(void *)(v14 + 64) = v10;
  *(void *)(v14 + 32) = v15;
  *(void *)(v14 + 40) = v16;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  static os_log_type_t.debug.getter();
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_101342130;
  uint64_t v18 = Data.hexString.getter();
  *(void *)(v17 + 56) = &type metadata for String;
  *(void *)(v17 + 64) = v10;
  *(void *)(v17 + 32) = v18;
  *(void *)(v17 + 40) = v19;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  static os_log_type_t.debug.getter();
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_101342130;
  uint64_t v21 = Data.hexString.getter();
  *(void *)(v20 + 56) = &type metadata for String;
  *(void *)(v20 + 64) = v10;
  *(void *)(v20 + 32) = v21;
  *(void *)(v20 + 40) = v22;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  static os_log_type_t.debug.getter();
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_101342130;
  uint64_t v24 = Data.hexString.getter();
  *(void *)(v23 + 56) = &type metadata for String;
  *(void *)(v23 + 64) = v10;
  *(void *)(v23 + 32) = v24;
  *(void *)(v23 + 40) = v25;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  static os_log_type_t.debug.getter();
  uint64_t v26 = swift_allocObject();
  *(_OWORD *)(v26 + 16) = xmmword_101342130;
  uint64_t v27 = Data.hexString.getter();
  *(void *)(v26 + 56) = &type metadata for String;
  *(void *)(v26 + 64) = v10;
  *(void *)(v26 + 32) = v27;
  *(void *)(v26 + 40) = v28;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v30 = UUID.data.getter();
  Data.append(_:)();
  Data.append(_:)();
  Data.append(_:)();
  Data.append(_:)();
  Data.append(_:)();
  return v30;
}

uint64_t sub_1003C5C0C()
{
  return sub_1003C0A30(*(void (**)(void *))(v0 + 16), *(void *)(v0 + 24), &qword_101642DA0, 6);
}

uint64_t sub_1003C5C34(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1003C5C44()
{
  return swift_release();
}

uint64_t sub_1003C5C50(uint64_t a1)
{
  return sub_1003C43F0(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1003C5C60(uint64_t a1)
{
  return sub_1003C4780(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1003C5C6C()
{
  return sub_1003C0A30(*(void (**)(void *))(v0 + 16), *(void *)(v0 + 24), &qword_101642DA0, 1);
}

uint64_t sub_1003C5C94()
{
  unint64_t v1 = (int *)(type metadata accessor for AccessoryPairingLockAckResponse() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v6 = v0 + v3 + v1[7];
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_1003C5D90()
{
  return sub_1003C6948((uint64_t (*)(void))type metadata accessor for AccessoryPairingLockAckResponse, &qword_101642DA0, (uint64_t (*)(void))type metadata accessor for AccessoryPairingLockAckResponse);
}

uint64_t sub_1003C5DC4()
{
  return sub_1003C0A30(*(void (**)(void *))(v0 + 16), *(void *)(v0 + 24), &qword_101642DA0, 5);
}

uint64_t type metadata accessor for AccessoryUnpairData()
{
  uint64_t result = qword_101642E30;
  if (!qword_101642E30) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1003C5E38(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_101638CF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003C5EA0()
{
  uint64_t v1 = *(void *)(type metadata accessor for AccessoryUnpairData() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (((*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectRelease();
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v0 + v3, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  swift_release();

  return _swift_deallocObject(v0, ((((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8, v4);
}

uint64_t sub_1003C6044(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for AccessoryUnpairData() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)(v1 + 16);
  uint64_t v10 = *(void *)(v1 + 24);
  uint64_t v11 = v1 + v5;
  uint64_t v12 = *(void *)(v1 + v6);
  uint64_t v13 = *(void *)(v1 + v7);
  uint64_t v14 = *(void *)(v1 + v8);
  uint64_t v15 = *(void *)(v1 + v8 + 8);
  uint64_t v16 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v16;
  void *v16 = v2;
  v16[1] = sub_100033F68;
  return sub_1003C26B8(a1, v9, v10, v11, v12, v13, v14, v15);
}

void sub_1003C61B4()
{
  sub_1003C36A4(*(void (**)())(v0 + 16));
}

uint64_t sub_1003C61D8(uint64_t a1)
{
  return sub_1003C2DAC(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1003C61E8(uint64_t a1)
{
  return sub_1003C3144(a1, v1[2], v1[3], v1[4]);
}

void sub_1003C61F4()
{
  sub_1003C36A4(*(void (**)())(v0 + 16));
}

uint64_t sub_1003C6214()
{
  return (*(uint64_t (**)(void))(v0 + 16))(0);
}

uint64_t sub_1003C6240()
{
  swift_release();
  swift_errorRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1003C6280()
{
  swift_unknownObjectRelease();
  sub_10001CFB8(*(void *)(v0 + 32), *(void *)(v0 + 40));
  sub_10001CFB8(*(void *)(v0 + 48), *(void *)(v0 + 56));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001CFB8(*(void *)(v0 + 112), *(void *)(v0 + 120));
  sub_10001CFB8(*(void *)(v0 + 128), *(void *)(v0 + 136));
  swift_bridgeObjectRelease();
  unint64_t v1 = *(void *)(v0 + 168);
  if (v1 >> 60 != 15) {
    sub_10001CFB8(*(void *)(v0 + 160), v1);
  }
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 240, 7);
}

uint64_t sub_1003C6338(uint64_t a1)
{
  uint64_t v4 = v1[3];
  uint64_t v11 = v1[2];
  uint64_t v5 = v1[22];
  uint64_t v6 = v1[23];
  uint64_t v7 = v1[24];
  uint64_t v8 = v1[25];
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_100033F68;
  return sub_1003BFF9C(a1, v11, v4, (uint64_t)(v1 + 4), v5, v6, v7, v8);
}

uint64_t *sub_1003C643C(uint64_t *a1)
{
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];
  uint64_t v4 = a1[10];
  unint64_t v5 = a1[11];
  uint64_t v6 = a1[12];
  unint64_t v7 = a1[13];
  uint64_t v10 = a1[16];
  unint64_t v9 = a1[17];
  sub_1000361E0(*a1, a1[1]);
  sub_1000361E0(v2, v3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000361E0(v4, v5);
  sub_1000361E0(v6, v7);
  swift_bridgeObjectRetain();
  sub_100037A38(v10, v9);
  return a1;
}

uint64_t sub_1003C6510()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1003C6550(uint64_t a1)
{
  return sub_1003C06A0(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1003C655C()
{
  swift_release();
  swift_release();
  sub_10001CFB8(*(void *)(v0 + 48), *(void *)(v0 + 56));
  sub_10001CFB8(*(void *)(v0 + 64), *(void *)(v0 + 72));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001CFB8(*(void *)(v0 + 128), *(void *)(v0 + 136));
  sub_10001CFB8(*(void *)(v0 + 144), *(void *)(v0 + 152));
  swift_bridgeObjectRelease();
  unint64_t v1 = *(void *)(v0 + 184);
  if (v1 >> 60 != 15) {
    sub_10001CFB8(*(void *)(v0 + 176), v1);
  }

  return _swift_deallocObject(v0, 200, 7);
}

uint64_t sub_1003C65FC(uint64_t a1)
{
  return sub_1003C0B6C(a1, v1[2], v1[3], v1[4], v1[5], (uint64_t)(v1 + 6));
}

uint64_t sub_1003C6610()
{
  return sub_1003C0A30(*(void (**)(void *))(v0 + 16), *(void *)(v0 + 24), &qword_101642DB8, 18);
}

uint64_t sub_1003C6638()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003C6670()
{
  return sub_1003C0A30(*(void (**)(void *))(v0 + 16), *(void *)(v0 + 24), &qword_101642DB8, 1);
}

uint64_t sub_1003C6698()
{
  return sub_1003C0A30(*(void (**)(void *))(v0 + 16), *(void *)(v0 + 24), &qword_101642DB8, 3);
}

uint64_t sub_1003C66C0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1003C6720(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1003C6788()
{
  unint64_t v1 = (int *)(type metadata accessor for AccessoryPairingLockCheckResponse() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_release();
  uint64_t v6 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  sub_10001CFB8(*(void *)(v6 + 16), *(void *)(v6 + 24));
  sub_10001CFB8(*(void *)(v6 + 32), *(void *)(v6 + 40));
  swift_bridgeObjectRelease();
  uint64_t v7 = v0 + v3 + v1[10];
  uint64_t v8 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_1003C68AC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1003C6914()
{
  return sub_1003C6948((uint64_t (*)(void))type metadata accessor for AccessoryPairingLockCheckResponse, &qword_101642DB8, (uint64_t (*)(void))type metadata accessor for AccessoryPairingLockCheckResponse);
}

uint64_t sub_1003C6948(uint64_t (*a1)(void), uint64_t *a2, uint64_t (*a3)(void))
{
  uint64_t v6 = *(void *)(a1(0) - 8);
  return sub_1003C51B4(*(void (**)(char *))(v3 + 16), *(void *)(v3 + 24), v3 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)), a2, a3);
}

uint64_t sub_1003C69C8()
{
  return sub_1003C0A30(*(void (**)(void *))(v0 + 16), *(void *)(v0 + 24), &qword_101642DB8, 5);
}

uint64_t destroy for AccessoryPairingCheckData(uint64_t *a1)
{
  sub_10001CFB8(*a1, a1[1]);
  sub_10001CFB8(a1[2], a1[3]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001CFB8(a1[10], a1[11]);
  sub_10001CFB8(a1[12], a1[13]);
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v3 = a1[17];
  if (v3 >> 60 != 15)
  {
    uint64_t v4 = a1[16];
    return sub_10001CFB8(v4, v3);
  }
  return result;
}

uint64_t initializeWithCopy for AccessoryPairingCheckData(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_1000361E0(*a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = a2[2];
  unint64_t v7 = a2[3];
  sub_1000361E0(v6, v7);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = a2[5];
  *(void *)(a1 + 32) = a2[4];
  *(void *)(a1 + 40) = v8;
  uint64_t v9 = a2[7];
  *(void *)(a1 + 48) = a2[6];
  *(void *)(a1 + 56) = v9;
  uint64_t v10 = a2[9];
  *(void *)(a1 + 64) = a2[8];
  *(void *)(a1 + 72) = v10;
  uint64_t v11 = a2[10];
  unint64_t v12 = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000361E0(v11, v12);
  *(void *)(a1 + 80) = v11;
  *(void *)(a1 + 88) = v12;
  uint64_t v13 = a2[12];
  unint64_t v14 = a2[13];
  sub_1000361E0(v13, v14);
  *(void *)(a1 + 96) = v13;
  *(void *)(a1 + 104) = v14;
  uint64_t v15 = a2[15];
  *(void *)(a1 + 112) = a2[14];
  *(void *)(a1 + 120) = v15;
  uint64_t v16 = a2 + 16;
  unint64_t v17 = a2[17];
  swift_bridgeObjectRetain();
  if (v17 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 128) = *v16;
  }
  else
  {
    uint64_t v18 = *(void *)v16;
    sub_1000361E0(v18, v17);
    *(void *)(a1 + 128) = v18;
    *(void *)(a1 + 136) = v17;
  }
  return a1;
}

uint64_t *assignWithCopy for AccessoryPairingCheckData(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_1000361E0(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_10001CFB8(v6, v7);
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  sub_1000361E0(v8, v9);
  uint64_t v10 = a1[2];
  unint64_t v11 = a1[3];
  a1[2] = v8;
  a1[3] = v9;
  sub_10001CFB8(v10, v11);
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[6] = a2[6];
  a1[7] = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[8] = a2[8];
  a1[9] = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v12 = a2[10];
  unint64_t v13 = a2[11];
  sub_1000361E0(v12, v13);
  uint64_t v14 = a1[10];
  unint64_t v15 = a1[11];
  a1[10] = v12;
  a1[11] = v13;
  sub_10001CFB8(v14, v15);
  uint64_t v16 = a2[12];
  unint64_t v17 = a2[13];
  sub_1000361E0(v16, v17);
  uint64_t v18 = a1[12];
  unint64_t v19 = a1[13];
  a1[12] = v16;
  a1[13] = v17;
  sub_10001CFB8(v18, v19);
  a1[14] = a2[14];
  a1[15] = a2[15];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v20 = a2 + 16;
  unint64_t v21 = a2[17];
  if ((unint64_t)a1[17] >> 60 != 15)
  {
    if (v21 >> 60 != 15)
    {
      uint64_t v23 = *v20;
      sub_1000361E0(*v20, v21);
      uint64_t v24 = a1[16];
      unint64_t v25 = a1[17];
      a1[16] = v23;
      a1[17] = v21;
      sub_10001CFB8(v24, v25);
      return a1;
    }
    sub_1001E132C((uint64_t)(a1 + 16));
    goto LABEL_6;
  }
  if (v21 >> 60 == 15)
  {
LABEL_6:
    *((_OWORD *)a1 + 8) = *(_OWORD *)v20;
    return a1;
  }
  uint64_t v22 = *v20;
  sub_1000361E0(*v20, v21);
  a1[16] = v22;
  a1[17] = v21;
  return a1;
}

uint64_t *assignWithTake for AccessoryPairingCheckData(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001CFB8(v4, v5);
  uint64_t v6 = a1[2];
  unint64_t v7 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  sub_10001CFB8(v6, v7);
  uint64_t v8 = *(void *)(a2 + 40);
  a1[4] = *(void *)(a2 + 32);
  a1[5] = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 56);
  a1[6] = *(void *)(a2 + 48);
  a1[7] = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 72);
  a1[8] = *(void *)(a2 + 64);
  a1[9] = v10;
  swift_bridgeObjectRelease();
  uint64_t v11 = a1[10];
  unint64_t v12 = a1[11];
  *((_OWORD *)a1 + 5) = *(_OWORD *)(a2 + 80);
  sub_10001CFB8(v11, v12);
  uint64_t v13 = a1[12];
  unint64_t v14 = a1[13];
  *((_OWORD *)a1 + 6) = *(_OWORD *)(a2 + 96);
  sub_10001CFB8(v13, v14);
  uint64_t v15 = *(void *)(a2 + 120);
  a1[14] = *(void *)(a2 + 112);
  a1[15] = v15;
  swift_bridgeObjectRelease();
  uint64_t v16 = (uint64_t *)(a2 + 128);
  unint64_t v17 = a1[17];
  if (v17 >> 60 != 15)
  {
    unint64_t v18 = *(void *)(a2 + 136);
    if (v18 >> 60 != 15)
    {
      uint64_t v19 = a1[16];
      a1[16] = *v16;
      a1[17] = v18;
      sub_10001CFB8(v19, v17);
      return a1;
    }
    sub_1001E132C((uint64_t)(a1 + 16));
  }
  *((_OWORD *)a1 + 8) = *(_OWORD *)v16;
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessoryPairingCheckData(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 144)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessoryPairingCheckData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 144) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 144) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryPairingCheckData()
{
  return &type metadata for AccessoryPairingCheckData;
}

uint64_t destroy for AccessoryPairingAckData(void *a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001CFB8(a1[6], a1[7]);
  sub_10001CFB8(a1[8], a1[9]);
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v3 = a1[13];
  if (v3 >> 60 != 15)
  {
    uint64_t v4 = a1[12];
    return sub_10001CFB8(v4, v3);
  }
  return result;
}

uint64_t initializeWithCopy for AccessoryPairingAckData(uint64_t a1, void *a2)
{
  uint64_t v4 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = a2[3];
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = a2[5];
  *(void *)(a1 + 32) = a2[4];
  *(void *)(a1 + 40) = v6;
  uint64_t v7 = a2[6];
  unint64_t v8 = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000361E0(v7, v8);
  *(void *)(a1 + 48) = v7;
  *(void *)(a1 + 56) = v8;
  uint64_t v9 = a2[8];
  unint64_t v10 = a2[9];
  sub_1000361E0(v9, v10);
  *(void *)(a1 + 64) = v9;
  *(void *)(a1 + 72) = v10;
  uint64_t v11 = a2[11];
  *(void *)(a1 + 80) = a2[10];
  *(void *)(a1 + 88) = v11;
  unint64_t v12 = a2 + 12;
  unint64_t v13 = a2[13];
  swift_bridgeObjectRetain();
  if (v13 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 96) = *v12;
  }
  else
  {
    uint64_t v14 = *(void *)v12;
    sub_1000361E0(v14, v13);
    *(void *)(a1 + 96) = v14;
    *(void *)(a1 + 104) = v13;
  }
  return a1;
}

void *assignWithCopy for AccessoryPairingAckData(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[6];
  unint64_t v5 = a2[7];
  sub_1000361E0(v4, v5);
  uint64_t v6 = a1[6];
  unint64_t v7 = a1[7];
  a1[6] = v4;
  a1[7] = v5;
  sub_10001CFB8(v6, v7);
  uint64_t v8 = a2[8];
  unint64_t v9 = a2[9];
  sub_1000361E0(v8, v9);
  uint64_t v10 = a1[8];
  unint64_t v11 = a1[9];
  a1[8] = v8;
  a1[9] = v9;
  sub_10001CFB8(v10, v11);
  a1[10] = a2[10];
  a1[11] = a2[11];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v12 = a2 + 12;
  unint64_t v13 = a2[13];
  if (a1[13] >> 60 != 15)
  {
    if (v13 >> 60 != 15)
    {
      uint64_t v15 = *v12;
      sub_1000361E0(*v12, v13);
      uint64_t v16 = a1[12];
      unint64_t v17 = a1[13];
      a1[12] = v15;
      a1[13] = v13;
      sub_10001CFB8(v16, v17);
      return a1;
    }
    sub_1001E132C((uint64_t)(a1 + 12));
    goto LABEL_6;
  }
  if (v13 >> 60 == 15)
  {
LABEL_6:
    *((_OWORD *)a1 + 6) = *(_OWORD *)v12;
    return a1;
  }
  uint64_t v14 = *v12;
  sub_1000361E0(*v12, v13);
  a1[12] = v14;
  a1[13] = v13;
  return a1;
}

void *assignWithTake for AccessoryPairingAckData(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  a1[4] = *(void *)(a2 + 32);
  a1[5] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a1[6];
  unint64_t v8 = a1[7];
  *((_OWORD *)a1 + 3) = *(_OWORD *)(a2 + 48);
  sub_10001CFB8(v7, v8);
  uint64_t v9 = a1[8];
  unint64_t v10 = a1[9];
  *((_OWORD *)a1 + 4) = *(_OWORD *)(a2 + 64);
  sub_10001CFB8(v9, v10);
  uint64_t v11 = *(void *)(a2 + 88);
  a1[10] = *(void *)(a2 + 80);
  a1[11] = v11;
  swift_bridgeObjectRelease();
  unint64_t v12 = (void *)(a2 + 96);
  unint64_t v13 = a1[13];
  if (v13 >> 60 != 15)
  {
    unint64_t v14 = *(void *)(a2 + 104);
    if (v14 >> 60 != 15)
    {
      uint64_t v15 = a1[12];
      a1[12] = *v12;
      a1[13] = v14;
      sub_10001CFB8(v15, v13);
      return a1;
    }
    sub_1001E132C((uint64_t)(a1 + 12));
  }
  *((_OWORD *)a1 + 6) = *(_OWORD *)v12;
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessoryPairingAckData(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 112)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessoryPairingAckData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 112) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 112) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryPairingAckData()
{
  return &type metadata for AccessoryPairingAckData;
}

uint64_t *sub_1003C7318(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v32 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v32 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    unint64_t v10 = (uint64_t *)((char *)a1 + v8);
    uint64_t v11 = (uint64_t *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *unint64_t v10 = *v11;
    v10[1] = v12;
    unint64_t v13 = (uint64_t *)((char *)a1 + v9);
    unint64_t v14 = (uint64_t *)((char *)a2 + v9);
    uint64_t v15 = v14[1];
    *unint64_t v13 = *v14;
    v13[1] = v15;
    uint64_t v16 = a3[7];
    uint64_t v17 = a3[8];
    unint64_t v18 = (uint64_t *)((char *)a1 + v16);
    uint64_t v19 = (uint64_t *)((char *)a2 + v16);
    uint64_t v20 = v19[1];
    *unint64_t v18 = *v19;
    v18[1] = v20;
    unint64_t v21 = (uint64_t *)((char *)a1 + v17);
    uint64_t v22 = (uint64_t *)((char *)a2 + v17);
    uint64_t v23 = v22[1];
    void *v21 = *v22;
    v21[1] = v23;
    uint64_t v24 = a3[9];
    uint64_t v25 = a3[10];
    uint64_t v26 = (uint64_t *)((char *)a1 + v24);
    uint64_t v27 = (uint64_t *)((char *)a2 + v24);
    uint64_t v28 = v27[1];
    *uint64_t v26 = *v27;
    v26[1] = v28;
    uint64_t v29 = (uint64_t *)((char *)a1 + v25);
    uint64_t v30 = (uint64_t *)((char *)a2 + v25);
    uint64_t v31 = v30[1];
    void *v29 = *v30;
    v29[1] = v31;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1003C7478(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1003C7540(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v7);
  unint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = (void *)(a1 + v8);
  unint64_t v13 = (void *)(a2 + v8);
  uint64_t v14 = v13[1];
  void *v12 = *v13;
  v12[1] = v14;
  uint64_t v15 = a3[7];
  uint64_t v16 = a3[8];
  uint64_t v17 = (void *)(a1 + v15);
  unint64_t v18 = (void *)(a2 + v15);
  uint64_t v19 = v18[1];
  *uint64_t v17 = *v18;
  v17[1] = v19;
  uint64_t v20 = (void *)(a1 + v16);
  unint64_t v21 = (void *)(a2 + v16);
  uint64_t v22 = v21[1];
  *uint64_t v20 = *v21;
  v20[1] = v22;
  uint64_t v23 = a3[9];
  uint64_t v24 = a3[10];
  uint64_t v25 = (void *)(a1 + v23);
  uint64_t v26 = (void *)(a2 + v23);
  uint64_t v27 = v26[1];
  *uint64_t v25 = *v26;
  v25[1] = v27;
  uint64_t v28 = (void *)(a1 + v24);
  uint64_t v29 = (void *)(a2 + v24);
  uint64_t v30 = v29[1];
  *uint64_t v28 = *v29;
  v28[1] = v30;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1003C7650(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = a3[6];
  uint64_t v11 = (void *)(a1 + v10);
  uint64_t v12 = (void *)(a2 + v10);
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[7];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (void *)(a2 + v13);
  void *v14 = *v15;
  v14[1] = v15[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v16 = a3[8];
  uint64_t v17 = (void *)(a1 + v16);
  unint64_t v18 = (void *)(a2 + v16);
  *uint64_t v17 = *v18;
  v17[1] = v18[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v19 = a3[9];
  uint64_t v20 = (void *)(a1 + v19);
  unint64_t v21 = (void *)(a2 + v19);
  *uint64_t v20 = *v21;
  v20[1] = v21[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v22 = a3[10];
  uint64_t v23 = (void *)(a1 + v22);
  uint64_t v24 = (void *)(a2 + v22);
  *uint64_t v23 = *v24;
  v23[1] = v24[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1003C77C8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  uint64_t v9 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  *(_OWORD *)(a1 + v9) = *(_OWORD *)(a2 + v9);
  return a1;
}

uint64_t sub_1003C7874(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[6];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (uint64_t *)(a2 + v12);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  *uint64_t v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[7];
  unint64_t v18 = (void *)(a1 + v17);
  uint64_t v19 = (uint64_t *)(a2 + v17);
  uint64_t v21 = *v19;
  uint64_t v20 = v19[1];
  *unint64_t v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease();
  uint64_t v22 = a3[8];
  uint64_t v23 = (void *)(a1 + v22);
  uint64_t v24 = (uint64_t *)(a2 + v22);
  uint64_t v26 = *v24;
  uint64_t v25 = v24[1];
  *uint64_t v23 = v26;
  v23[1] = v25;
  swift_bridgeObjectRelease();
  uint64_t v27 = a3[9];
  uint64_t v28 = (void *)(a1 + v27);
  uint64_t v29 = (uint64_t *)(a2 + v27);
  uint64_t v31 = *v29;
  uint64_t v30 = v29[1];
  *uint64_t v28 = v31;
  v28[1] = v30;
  swift_bridgeObjectRelease();
  uint64_t v32 = a3[10];
  uint64_t v33 = (void *)(a1 + v32);
  unint64_t v34 = (uint64_t *)(a2 + v32);
  uint64_t v36 = *v34;
  uint64_t v35 = v34[1];
  *uint64_t v33 = v36;
  v33[1] = v35;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1003C798C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003C79A0);
}

uint64_t sub_1003C79A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_1003C7A64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1003C7A78);
}

uint64_t sub_1003C7A78(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t sub_1003C7B38()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AccessoryPairingValidator.Error(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1003C7CACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryPairingValidator.Error()
{
  return &type metadata for AccessoryPairingValidator.Error;
}

unint64_t sub_1003C7CE8()
{
  unint64_t result = qword_101642E80;
  if (!qword_101642E80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101642E80);
  }
  return result;
}

unint64_t sub_1003C7D3C()
{
  unint64_t result = qword_101642E90;
  if (!qword_101642E90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101642E90);
  }
  return result;
}

uint64_t sub_1003C7D90(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AccessoryUnpairData.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *uint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1003C7EA4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryUnpairData.CodingKeys()
{
  return &type metadata for AccessoryUnpairData.CodingKeys;
}

unint64_t sub_1003C7EE0()
{
  unint64_t result = qword_101642E98;
  if (!qword_101642E98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101642E98);
  }
  return result;
}

unint64_t sub_1003C7F38()
{
  unint64_t result = qword_101642EA0;
  if (!qword_101642EA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101642EA0);
  }
  return result;
}

unint64_t sub_1003C7F90()
{
  unint64_t result = qword_101642EA8;
  if (!qword_101642EA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101642EA8);
  }
  return result;
}

ValueMetadata *type metadata accessor for FindMyAccessoryRegisterIntent()
{
  return &type metadata for FindMyAccessoryRegisterIntent;
}

unint64_t sub_1003C80A4()
{
  return 0xD000000000000012;
}

uint64_t sub_1003C80C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1003C862C(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1003C80EC(uint64_t a1)
{
  unint64_t v2 = sub_1003C83FC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1003C8128(uint64_t a1)
{
  unint64_t v2 = sub_1003C83FC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1003C8164@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = sub_10000588C(&qword_101642EB0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1003C83FC();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v10 = v9;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  *a2 = v10;
  return result;
}

uint64_t sub_1003C82C8(void *a1)
{
  uint64_t v2 = sub_10000588C(&qword_101642EC0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1003C83FC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  KeyedEncodingContainer.encode(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

unint64_t sub_1003C83FC()
{
  unint64_t result = qword_101642EB8;
  if (!qword_101642EB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101642EB8);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for FindMyAccessoryRegisterIntent.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1003C84ECLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for FindMyAccessoryRegisterIntent.CodingKeys()
{
  return &type metadata for FindMyAccessoryRegisterIntent.CodingKeys;
}

unint64_t sub_1003C8528()
{
  unint64_t result = qword_101642EC8;
  if (!qword_101642EC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101642EC8);
  }
  return result;
}

unint64_t sub_1003C8580()
{
  unint64_t result = qword_101642ED0;
  if (!qword_101642ED0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101642ED0);
  }
  return result;
}

unint64_t sub_1003C85D8()
{
  unint64_t result = qword_101642ED8;
  if (!qword_101642ED8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101642ED8);
  }
  return result;
}

uint64_t sub_1003C862C(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000012 && a2 == 0x80000001013FB750)
  {
    swift_bridgeObjectRelease();
    char v2 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v2 = v3 ^ 1;
  }
  return v2 & 1;
}

uint64_t sub_1003C86B4(void *a1)
{
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryEncoding.container()();
  sub_1000BD078((uint64_t)v3, v4);
  sub_100135A44();
  dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
  if (!v1)
  {
    sub_1000BD078((uint64_t)v3, v4);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v3);
}

uint64_t sub_1003C87B4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1003C8F84(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_1003C87E4(void *a1)
{
  return sub_1003C86B4(a1);
}

BOOL sub_1003C8804(char *a1, char *a2)
{
  return word_1013562B6[*a1] == word_1013562B6[*a2];
}

Swift::Int sub_1003C8828()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(word_1013562B6[v1]);
  return Hasher._finalize()();
}

void sub_1003C8878()
{
  Hasher._combine(_:)(word_1013562B6[*v0]);
}

Swift::Int sub_1003C88B0()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(word_1013562B6[v1]);
  return Hasher._finalize()();
}

uint64_t sub_1003C88FC@<X0>(__int16 *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1003C90B8(*a1);
  *a2 = result;
  return result;
}

void sub_1003C8928(_WORD *a1@<X8>)
{
  *a1 = word_1013562B6[*v1];
}

uint64_t sub_1003C8940()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1003C89A0()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1003C89F0()
{
  uint64_t result = 0x737365636375732ELL;
  switch(*v0)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      uint64_t result = 0x64696C61766E692ELL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1003C8AB4(unsigned __int8 a1)
{
  int v1 = a1;
  uint64_t result = 0x737365636375732ELL;
  if (v1 != 6)
  {
    unint64_t v3 = 0xE800000000000000;
    String.append(_:)(*(Swift::String *)&result);
    swift_bridgeObjectRelease();
    v4._countAndFlagsBits = 41;
    v4._object = (void *)0xE100000000000000;
    String.append(_:)(v4);
    return 0x28726F7272652ELL;
  }
  return result;
}

uint64_t sub_1003C8BF4(void *a1, int a2)
{
  char v3 = BYTE2(a2);
  uint64_t v5 = sub_10000588C(&qword_101642F08);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_1003C9A0C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v10[14] = v3;
    v10[13] = 1;
    sub_1003C9AB4();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1003C8D6C()
{
  if (*v0) {
    return 0x7574617453776172;
  }
  else {
    return 0x65646F63706FLL;
  }
}

uint64_t sub_1003C8DA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1003C9758(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1003C8DD0(uint64_t a1)
{
  unint64_t v2 = sub_1003C9A0C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1003C8E0C(uint64_t a1)
{
  unint64_t v2 = sub_1003C9A0C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1003C8E48@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1003C9850(a1);
  if (!v2)
  {
    *(_WORD *)a2 = result;
    *(unsigned char *)(a2 + 2) = BYTE2(result);
  }
  return result;
}

uint64_t sub_1003C8E7C(void *a1)
{
  return sub_1003C8BF4(a1, *v1 | (*((unsigned __int8 *)v1 + 2) << 16));
}

uint64_t sub_1003C8EA0(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v4) = HIDWORD(result) - result;
      if (__OFSUB__(HIDWORD(result), result))
      {
        __break(1u);
LABEL_15:
        __break(1u);
LABEL_16:
        __break(1u);
LABEL_17:
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
        JUMPOUT(0x1003C8F64);
      }
      uint64_t v4 = (int)v4;
LABEL_6:
      if (v4 != 2) {
        goto LABEL_18;
      }
      switch(a4 >> 62)
      {
        case 1uLL:
          LODWORD(v8) = HIDWORD(a3) - a3;
          if (__OFSUB__(HIDWORD(a3), a3)) {
            goto LABEL_16;
          }
          uint64_t v8 = (int)v8;
LABEL_12:
          if (v8 != 2) {
            goto LABEL_19;
          }
          return result;
        case 2uLL:
          uint64_t v10 = *(void *)(a3 + 16);
          uint64_t v9 = *(void *)(a3 + 24);
          BOOL v7 = __OFSUB__(v9, v10);
          uint64_t v8 = v9 - v10;
          if (!v7) {
            goto LABEL_12;
          }
          goto LABEL_17;
        case 3uLL:
          goto LABEL_19;
        default:
          uint64_t v8 = BYTE6(a4);
          goto LABEL_12;
      }
    case 2uLL:
      uint64_t v6 = *(void *)(result + 16);
      uint64_t v5 = *(void *)(result + 24);
      BOOL v7 = __OFSUB__(v5, v6);
      uint64_t v4 = v5 - v6;
      if (!v7) {
        goto LABEL_6;
      }
      goto LABEL_15;
    case 3uLL:
      goto LABEL_18;
    default:
      uint64_t v4 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_1003C8F84(void *a1)
{
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryDecoding.container()();
  uint64_t v3 = sub_1000BD078((uint64_t)v11, v12);
  uint64_t v4 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  if (!v1)
  {
    uint64_t v6 = v4;
    unint64_t v7 = v5;
    sub_1000BD078((uint64_t)v11, v12);
    uint64_t v8 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
    uint64_t v3 = sub_1003C8EA0(v6, v7, v8, v10);
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v11);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  return v3;
}

uint64_t sub_1003C90B8(__int16 a1)
{
  if ((unsigned __int16)(a1 + 1) >= 6u) {
    return 6;
  }
  else {
    return (0x40302010005uLL >> (8 * (a1 + 1)));
  }
}

uint64_t sub_1003C90E8(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = type metadata accessor for Endianness();
  __chkstk_darwin(v8 - 8);
  sub_1000361E0(a1, a2);
  static Endianness.current.getter();
  sub_100179818();
  FixedWidthInteger.init(data:ofEndianness:)();
  if (v13 == 1)
  {
    sub_10001CFB8(a3, a4);
    sub_10001CFB8(a1, a2);
  }
  else
  {
    static Endianness.current.getter();
    FixedWidthInteger.init(data:ofEndianness:)();
    sub_10001CFB8(a1, a2);
    if (v11 != 1 && (unsigned __int16)(v10 + 1) <= 5u) {
      return dword_1013562C4[(__int16)(v10 + 1)] | v12;
    }
  }
  return 393216;
}

uint64_t destroy for AirPodsSendBeaconGroupDataCommandPayload(uint64_t *a1)
{
  sub_10001CFB8(*a1, a1[1]);
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];

  return sub_10001CFB8(v2, v3);
}

uint64_t *initializeWithCopy for AirPodsSendBeaconGroupDataCommandPayload(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_1000361E0(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  uint64_t v7 = a2[2];
  unint64_t v6 = a2[3];
  sub_1000361E0(v7, v6);
  a1[2] = v7;
  a1[3] = v6;
  return a1;
}

uint64_t *assignWithCopy for AirPodsSendBeaconGroupDataCommandPayload(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_1000361E0(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_10001CFB8(v6, v7);
  uint64_t v9 = a2[2];
  unint64_t v8 = a2[3];
  sub_1000361E0(v9, v8);
  uint64_t v10 = a1[2];
  unint64_t v11 = a1[3];
  a1[2] = v9;
  a1[3] = v8;
  sub_10001CFB8(v10, v11);
  return a1;
}

uint64_t *assignWithTake for AirPodsSendBeaconGroupDataCommandPayload(uint64_t *a1, _OWORD *a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_10001CFB8(v4, v5);
  uint64_t v6 = a1[2];
  unint64_t v7 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_10001CFB8(v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for AirPodsSendBeaconGroupDataCommandPayload(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AirPodsSendBeaconGroupDataCommandPayload(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 - 13;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2)
    {
      *(void *)uint64_t result = 0;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryCommandResponsePayload()
{
  return &type metadata for AccessoryCommandResponsePayload;
}

unint64_t sub_1003C9458(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1003C9488();
  unint64_t result = sub_1002A5910();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1003C9488()
{
  unint64_t result = qword_101642EE0;
  if (!qword_101642EE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101642EE0);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for AccessoryCommandResponse(uint64_t result, __int16 *a2)
{
  __int16 v2 = *a2;
  *(unsigned char *)(result + 2) = *((unsigned char *)a2 + 2);
  *(_WORD *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for AccessoryCommandResponse(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFB)
  {
    if ((a2 + 33554181) >> 24)
    {
      int v2 = *((unsigned __int8 *)a1 + 3);
      if (*((unsigned char *)a1 + 3)) {
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776965;
      }
    }
    else
    {
      int v2 = *(unsigned __int16 *)((char *)a1 + 3);
      if (*(unsigned __int16 *)((char *)a1 + 3)) {
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776965;
      }
    }
  }
  unsigned int v4 = *((unsigned __int8 *)a1 + 2);
  BOOL v5 = v4 >= 6;
  int v6 = v4 - 6;
  if (!v5) {
    int v6 = -1;
  }
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessoryCommandResponse(uint64_t result, unsigned int a2, unsigned int a3)
{
  if ((a3 + 33554181) >> 24) {
    int v3 = 1;
  }
  else {
    int v3 = 2;
  }
  if (a3 <= 0xFA) {
    int v3 = 0;
  }
  if (a2 > 0xFA)
  {
    *(_WORD *)unint64_t result = a2 - 251;
    *(unsigned char *)(result + 2) = (a2 - 251) >> 16;
    if (v3)
    {
      unsigned int v4 = ((a2 - 251) >> 24) + 1;
      if (v3 == 2) {
        *(_WORD *)(result + 3) = v4;
      }
      else {
        *(unsigned char *)(result + 3) = v4;
      }
    }
  }
  else
  {
    if (!v3) {
      goto LABEL_10;
    }
    if (v3 == 2)
    {
      *(_WORD *)(result + 3) = 0;
LABEL_10:
      if (!a2) {
        return result;
      }
LABEL_16:
      *(unsigned char *)(result + 2) = a2 + 5;
      return result;
    }
    *(unsigned char *)(result + 3) = 0;
    if (a2) {
      goto LABEL_16;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryCommandResponse()
{
  return &type metadata for AccessoryCommandResponse;
}

unsigned char *storeEnumTagSinglePayload for AccessoryCommandResponse.RawResponseStatus(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1003C96C8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryCommandResponse.RawResponseStatus()
{
  return &type metadata for AccessoryCommandResponse.RawResponseStatus;
}

unint64_t sub_1003C9704()
{
  unint64_t result = qword_101642EE8;
  if (!qword_101642EE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101642EE8);
  }
  return result;
}

uint64_t sub_1003C9758(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65646F63706FLL && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7574617453776172 && a2 == 0xE900000000000073)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1003C9850(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_101642EF0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = &v10[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_1003C9A0C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  v10[15] = 0;
  unsigned __int16 v7 = KeyedDecodingContainer.decode(_:forKey:)();
  v10[13] = 1;
  sub_1003C9A60();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
  int v8 = v10[14];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  return v7 | (v8 << 16);
}

unint64_t sub_1003C9A0C()
{
  unint64_t result = qword_101642EF8;
  if (!qword_101642EF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101642EF8);
  }
  return result;
}

unint64_t sub_1003C9A60()
{
  unint64_t result = qword_101642F00;
  if (!qword_101642F00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101642F00);
  }
  return result;
}

unint64_t sub_1003C9AB4()
{
  unint64_t result = qword_101642F10;
  if (!qword_101642F10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101642F10);
  }
  return result;
}

unint64_t sub_1003C9B08()
{
  unint64_t result = qword_101642F18;
  if (!qword_101642F18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101642F18);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AccessoryCommandResponse.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1003C9C28);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryCommandResponse.CodingKeys()
{
  return &type metadata for AccessoryCommandResponse.CodingKeys;
}

unint64_t sub_1003C9C64()
{
  unint64_t result = qword_101642F20;
  if (!qword_101642F20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101642F20);
  }
  return result;
}

unint64_t sub_1003C9CBC()
{
  unint64_t result = qword_101642F28;
  if (!qword_101642F28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101642F28);
  }
  return result;
}

unint64_t sub_1003C9D14()
{
  unint64_t result = qword_101642F30;
  if (!qword_101642F30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101642F30);
  }
  return result;
}

uint64_t sub_1003C9D68()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170DDF0);
  uint64_t v1 = sub_100010324(v0, (uint64_t)qword_10170DDF0);
  if (qword_101636B18 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100010324(v0, (uint64_t)qword_10170DED0);
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1003C9E30()
{
  v1[32] = v0;
  sub_10000588C(&qword_101643008);
  v1[33] = swift_task_alloc();
  sub_10000588C(&qword_10163B9F0);
  v1[34] = swift_task_alloc();
  uint64_t v2 = type metadata accessor for DeviceVersion();
  v1[35] = v2;
  v1[36] = *(void *)(v2 - 8);
  v1[37] = swift_task_alloc();
  v1[38] = swift_task_alloc();
  v1[39] = swift_task_alloc();
  v1[40] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for DeviceVersion.Platform();
  v1[41] = v3;
  v1[42] = *(void *)(v3 - 8);
  v1[43] = swift_task_alloc();
  v1[44] = swift_task_alloc();
  v1[45] = swift_task_alloc();
  v1[46] = swift_task_alloc();
  v1[47] = swift_task_alloc();
  v1[48] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for LeaderDevice();
  v1[49] = v4;
  v1[50] = *(void *)(v4 - 8);
  v1[51] = swift_task_alloc();
  v1[52] = swift_task_alloc();
  v1[53] = swift_task_alloc();
  v1[54] = swift_task_alloc();
  v1[55] = swift_task_alloc();
  v1[56] = swift_task_alloc();
  v1[57] = swift_task_alloc();
  v1[58] = swift_task_alloc();
  v1[59] = swift_task_alloc();
  sub_10000588C(&qword_101638CF0);
  v1[60] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  v1[61] = v5;
  v1[62] = *(void *)(v5 - 8);
  v1[63] = swift_task_alloc();
  v1[64] = swift_task_alloc();
  v1[65] = swift_task_alloc();
  v1[66] = swift_task_alloc();
  v1[67] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for OwnedBeaconRecord();
  v1[68] = v6;
  v1[69] = *(void *)(v6 - 8);
  v1[70] = swift_task_alloc();
  v1[71] = swift_task_alloc();
  v1[72] = swift_task_alloc();
  v1[73] = swift_task_alloc();
  v1[74] = swift_task_alloc();
  v1[75] = swift_task_alloc();
  return _swift_task_switch(sub_1003CA230, v0, 0);
}

uint64_t sub_1003CA230()
{
  uint64_t v1 = qword_1016375E8;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_1000977C4((uint64_t)&xmmword_10166E8F0, v0 + 56);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_101639138 + dword_101639138);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 608) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_1003CA378;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1003CA378(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 256);
  *(void *)(*(void *)v1 + 616) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1003CA490, v2, 0);
}

uint64_t sub_1003CA490()
{
  uint64_t v1 = *(void *)(v0 + 616);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  if (v1)
  {
    uint64_t result = sub_1000977C4((uint64_t)&xmmword_10166E8F0, v0 + 136);
    if (*(void *)(v0 + 160))
    {
      sub_10001CEB0((long long *)(v0 + 136), v0 + 96);
      sub_10001CD44((void *)(v0 + 96), *(void *)(v0 + 120));
      uint64_t v10 = (uint64_t (*)(void))((char *)&dword_1016390D8 + dword_1016390D8);
      uint64_t v3 = (void *)swift_task_alloc();
      *(void *)(v0 + 624) = v3;
      *uint64_t v3 = v0;
      v3[1] = sub_1003CA894;
      return v10();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    if (qword_101636B18 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_10170DED0);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      unsigned __int16 v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unsigned __int16 v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "error missing ObservationStoreService", v7, 2u);
      swift_slowDealloc();
    }

    sub_10001CEC8();
    swift_allocError();
    *uint64_t v8 = 0xD000000000000017;
    v8[1] = 0x80000001013FB7A0;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
    return v9(0);
  }
  return result;
}

uint64_t sub_1003CA894(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 256);
  *(void *)(*(void *)v1 + 632) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1003CA9AC, v2, 0);
}

uint64_t sub_1003CA9AC()
{
  uint64_t v1 = *(void *)(v0 + 632);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 96);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 632);
    return _swift_task_switch(sub_1003CAD3C, v2, 0);
  }
  else
  {
    if (qword_101636B18 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_10170DED0);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      os_log_type_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "error missing ObservationStoreService", v6, 2u);
      swift_slowDealloc();
    }

    sub_10001CEC8();
    swift_allocError();
    void *v7 = 0xD000000000000010;
    v7[1] = 0x80000001013F23D0;
    swift_willThrow();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
    return v8(0);
  }
}

uint64_t sub_1003CAD3C()
{
  *(void *)(v0 + 640) = *(void *)(*(void *)(v0 + 632) + 136);
  swift_retain();
  return _swift_task_switch(sub_1003CADB0, 0, 0);
}

uint64_t sub_1003CADB0()
{
  uint64_t v1 = v0[80];
  uint64_t v2 = v0[79];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[81] = v3;
  v3[2] = v1;
  v3[3] = sub_1000909A4;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[82] = v4;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101660AA0);
  v0[83] = v5;
  *uint64_t v4 = v0;
  v4[1] = sub_1003CAED0;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 28, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1000909AC, v3, v5);
}

uint64_t sub_1003CAED0()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 256);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 672) = *(void *)(v1 + 224);
  return _swift_task_switch(sub_1003CB040, v2, 0);
}

uint64_t sub_1003CB040()
{
  uint64_t v1 = v0[84];
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = v0[69];
    uint64_t v36 = v0[68];
    uint64_t v4 = v0[62];
    uint64_t v5 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v6 = *(void *)(v3 + 72);
    long long v37 = (void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
    uint64_t v34 = v4;
    uint64_t v35 = (void (**)(uint64_t, uint64_t))(v4 + 8);
    swift_bridgeObjectRetain();
    uint64_t v7 = &_swiftEmptyDictionarySingleton;
    while (1)
    {
      uint64_t v38 = v2;
      uint64_t v11 = v0[75];
      uint64_t v12 = v0[74];
      uint64_t v13 = v0[67];
      uint64_t v14 = v0[61];
      sub_1003CED84(v5, v11, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      uint64_t v15 = *v37;
      (*v37)(v13, v11 + *(int *)(v36 + 20), v14);
      sub_1003CED84(v11, v12, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      swift_bridgeObjectRetain();
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v18 = sub_1007240CC(v13);
      uint64_t v19 = v7[2];
      BOOL v20 = (v17 & 1) == 0;
      uint64_t result = v19 + v20;
      if (__OFADD__(v19, v20))
      {
        __break(1u);
LABEL_25:
        __break(1u);
        return result;
      }
      char v22 = v17;
      if (v7[3] >= result)
      {
        if (isUniquelyReferenced_nonNull_native)
        {
          uint64_t v24 = v7;
          uint64_t v27 = v0[74];
          if (v17) {
            goto LABEL_3;
          }
        }
        else
        {
          sub_100E7E050();
          uint64_t v24 = v7;
          uint64_t v27 = v0[74];
          if (v22) {
            goto LABEL_3;
          }
        }
      }
      else
      {
        uint64_t v23 = v0[67];
        sub_100E64D18(result, isUniquelyReferenced_nonNull_native);
        uint64_t v24 = v7;
        unint64_t v25 = sub_1007240CC(v23);
        if ((v22 & 1) != (v26 & 1))
        {
          return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
        }
        unint64_t v18 = v25;
        uint64_t v27 = v0[74];
        if (v22)
        {
LABEL_3:
          sub_1003CEF50(v27, v24[7] + v18 * v6);
          goto LABEL_4;
        }
      }
      uint64_t v28 = v0[67];
      uint64_t v29 = v0[61];
      v24[(v18 >> 6) + 8] |= 1 << v18;
      v15(v24[6] + *(void *)(v34 + 72) * v18, v28, v29);
      uint64_t result = sub_1003CEDEC(v27, v24[7] + v18 * v6, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      uint64_t v30 = v24[2];
      BOOL v31 = __OFADD__(v30, 1);
      uint64_t v32 = v30 + 1;
      if (v31) {
        goto LABEL_25;
      }
      v24[2] = v32;
LABEL_4:
      uint64_t v8 = v0[75];
      uint64_t v9 = v0[67];
      uint64_t v10 = v0[61];
      swift_bridgeObjectRelease();
      (*v35)(v9, v10);
      sub_1003CEE54(v8, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      swift_bridgeObjectRelease();
      v5 += v6;
      uint64_t v7 = v24;
      uint64_t v2 = v38 - 1;
      if (v38 == 1)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_18;
      }
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v24 = &_swiftEmptyDictionarySingleton;
LABEL_18:
  v0[85] = v24;
  uint64_t v33 = (void *)swift_task_alloc();
  v0[86] = v33;
  *uint64_t v33 = v0;
  v33[1] = sub_1003CB3B8;
  return sub_101104310(90.0);
}

uint64_t sub_1003CB3B8(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 696) = a1;
  *(void *)(v4 + 704) = v1;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 256);
  if (v1) {
    uint64_t v6 = sub_1003CD164;
  }
  else {
    uint64_t v6 = sub_1003CB4F0;
  }
  return _swift_task_switch(v6, v5, 0);
}

uint64_t sub_1003CB4F0()
{
  uint64_t v81 = v0;
  if (qword_101636B18 != -1) {
LABEL_50:
  }
    swift_once();
  uint64_t v1 = type metadata accessor for Logger();
  *(void *)(v0 + 712) = sub_100010324(v1, (uint64_t)qword_10170DED0);
  swift_bridgeObjectRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = *(void *)(v0 + 696);
  if (v4)
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 134217984;
    *(void *)(v0 + 248) = *(void *)(v5 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Found %ld nearby beacons", v6, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease();
  }

  int64_t v7 = 0;
  uint64_t v8 = *(void *)(v0 + 696);
  uint64_t v79 = *(void *)(v0 + 680);
  uint64_t v70 = *(void *)(v0 + 552);
  uint64_t v71 = *(void *)(v0 + 544);
  uint64_t v9 = *(void *)(v0 + 496);
  uint64_t v65 = *(void *)(v0 + 392);
  uint64_t v66 = *(void *)(v0 + 400);
  uint64_t v10 = *(void *)(v0 + 336);
  uint64_t v77 = v8 + 56;
  uint64_t v11 = *(void *)(v0 + 288);
  uint64_t v12 = -1;
  uint64_t v13 = -1 << *(unsigned char *)(v8 + 32);
  if (-v13 < 64) {
    uint64_t v12 = ~(-1 << -(char)v13);
  }
  unint64_t v14 = v12 & *(void *)(v8 + 56);
  int64_t v78 = (unint64_t)(63 - v13) >> 6;
  uint64_t v15 = (void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32);
  uint64_t v16 = (void (**)(uint64_t, uint64_t))(v9 + 8);
  *(_DWORD *)(v0 + 768) = enum case for DeviceVersion.Platform.iOS(_:);
  unint64_t v69 = (void (**)(void))(v10 + 104);
  *(_DWORD *)(v0 + 772) = enum case for DeviceVersion.Platform.macOS(_:);
  uint64_t v67 = (void (**)(void, void))(v10 + 8);
  uint64_t v68 = (void (**)(uint64_t, os_log_type_t *, uint64_t))(v10 + 16);
  uint64_t v64 = (void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32);
  uint64_t v73 = *(void *)(v0 + 704);
  uint64_t v72 = _swiftEmptyArrayStorage;
LABEL_8:
  *(void *)(v0 + 728) = v72;
  *(void *)(v0 + 720) = v73;
  while (1)
  {
    if (v14)
    {
      unint64_t v17 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v18 = v17 | (v7 << 6);
      goto LABEL_23;
    }
    if (__OFADD__(v7++, 1))
    {
      __break(1u);
LABEL_49:
      __break(1u);
      goto LABEL_50;
    }
    if (v7 >= v78) {
      goto LABEL_44;
    }
    unint64_t v20 = *(void *)(v77 + 8 * v7);
    if (!v20) {
      break;
    }
LABEL_22:
    unint64_t v14 = (v20 - 1) & v20;
    unint64_t v18 = __clz(__rbit64(v20)) + (v7 << 6);
LABEL_23:
    uint64_t v23 = *(void *)(v0 + 480);
    uint64_t v22 = *(void *)(v0 + 488);
    uint64_t v24 = *(void (**)(uint64_t, unint64_t, uint64_t))(v9 + 16);
    v24(v23, *(void *)(v8 + 48) + *(void *)(v9 + 72) * v18, v22);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v23, 0, 1, v22);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v23, 1, v22) == 1) {
      goto LABEL_45;
    }
    unint64_t v25 = *v15;
    (*v15)(*(void *)(v0 + 528), *(void *)(v0 + 480), *(void *)(v0 + 488));
    if (*(void *)(v79 + 16))
    {
      unint64_t v26 = sub_1007240CC(*(void *)(v0 + 528));
      if (v27)
      {
        uint64_t v58 = *(void *)(v0 + 584);
        uint64_t v62 = v8;
        uint64_t v28 = *(void *)(v0 + 576);
        uint64_t v63 = *(void *)(v0 + 568);
        sub_1003CED84(*(void *)(v79 + 56) + *(void *)(v70 + 72) * v26, v28, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        sub_1003CEDEC(v28, v58, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        sub_1003CED84(v58, v63, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        swift_bridgeObjectRetain();
        sub_100850824();
        if (v73)
        {
          sub_1003CEE54(*(void *)(v0 + 568), (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
          v24(*(void *)(v0 + 504), *(void *)(v0 + 528), *(void *)(v0 + 488));
          swift_errorRetain();
          swift_errorRetain();
          BOOL v31 = Logger.logObject.getter();
          os_log_type_t type = static os_log_type_t.error.getter();
          BOOL v32 = os_log_type_enabled(v31, type);
          uint64_t v59 = *(void *)(v0 + 584);
          uint64_t v33 = *(void *)(v0 + 528);
          uint64_t v74 = *(void *)(v0 + 504);
          uint64_t v34 = *(void *)(v0 + 488);
          if (v32)
          {
            uint64_t v53 = *(void *)(v0 + 528);
            uint64_t v35 = swift_slowAlloc();
            uint64_t v48 = (void *)swift_slowAlloc();
            v80[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v35 = 141558531;
            *(void *)(v35 + 4) = 1752392040;
            *(_WORD *)(v35 + 12) = 2081;
            sub_1003CEF08((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
            uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter();
            *(void *)(v35 + 14) = sub_1008FA0F0(v36, v37, v80);
            swift_bridgeObjectRelease();
            uint64_t v49 = *v16;
            (*v16)(v74, v34);
            *(_WORD *)(v35 + 22) = 2114;
            swift_errorRetain();
            uint64_t v38 = _swift_stdlib_bridgeErrorToNSError();
            *(void *)(v35 + 24) = v38;
            *uint64_t v48 = v38;
            swift_errorRelease();
            swift_errorRelease();
            _os_log_impl((void *)&_mh_execute_header, v31, type, "Cannot convert to leader device %{private,mask.hash}s, %{public}@", (uint8_t *)v35, 0x20u);
            sub_10000588C((uint64_t *)&unk_101638EA0);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            swift_errorRelease();
            sub_1003CEE54(v59, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
            v49(v53, v34);
          }
          else
          {

            swift_errorRelease();
            swift_errorRelease();
            uint64_t v39 = *v16;
            (*v16)(v74, v34);
            swift_errorRelease();
            sub_1003CEE54(v59, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
            v39(v33, v34);
          }
        }
        else
        {
          uint64_t v29 = *(void *)(v0 + 376);
          uint64_t v52 = *(void *)(v0 + 328);
          *(void *)typea = *(void *)(v0 + 384);
          (*v69)();
          (*v68)(v29, *(os_log_type_t **)typea, v52);
          swift_bridgeObjectRetain();
          DeviceVersion.init(systemVersion:platform:)();
          uint64_t v30 = *(void *)(v0 + 568);
          uint64_t v54 = *(void *)(v0 + 520);
          uint64_t v75 = *(void *)(v0 + 488);
          uint64_t v40 = *(void *)(v0 + 464);
          uint64_t typeb = *(void *)(v0 + 472);
          uint64_t v60 = *(void *)(v0 + 456);
          uint64_t v51 = *(void *)(v0 + 320);
          uint64_t v50 = *(void *)(v0 + 280);
          (*v67)(*(void *)(v0 + 384), *(void *)(v0 + 328));
          (*v64)(v40, v51, v50);
          v24(v54, v30 + *(int *)(v71 + 20), v75);
          sub_1003CEE54(v30, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
          v25(v40 + *(int *)(v65 + 20), v54, v75);
          sub_1003CEDEC(v40, typeb, (uint64_t (*)(void))type metadata accessor for LeaderDevice);
          sub_1003CED84(typeb, v60, (uint64_t (*)(void))type metadata accessor for LeaderDevice);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v72 = (void *)sub_100A6E5F8(0, v72[2] + 1, 1, (unint64_t)v72);
          }
          unint64_t v42 = v72[2];
          unint64_t v41 = v72[3];
          if (v42 >= v41 >> 1) {
            uint64_t v72 = (void *)sub_100A6E5F8(v41 > 1, v42 + 1, 1, (unint64_t)v72);
          }
          uint64_t v43 = *(void *)(v0 + 584);
          uint64_t v76 = *(void *)(v0 + 528);
          uint64_t v61 = *(void *)(v0 + 488);
          uint64_t v44 = *(void *)(v0 + 472);
          uint64_t v45 = *(void *)(v0 + 456);
          v72[2] = v42 + 1;
          sub_1003CEDEC(v45, (uint64_t)v72+ ((*(unsigned __int8 *)(v66 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v66 + 80))+ *(void *)(v66 + 72) * v42, (uint64_t (*)(void))type metadata accessor for LeaderDevice);
          sub_1003CEE54(v44, (uint64_t (*)(void))type metadata accessor for LeaderDevice);
          sub_1003CEE54(v43, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
          (*v16)(v76, v61);
        }
        uint64_t v73 = 0;
        uint64_t v8 = v62;
        goto LABEL_8;
      }
    }
    (*v16)(*(void *)(v0 + 528), *(void *)(v0 + 488));
  }
  int64_t v21 = v7 + 1;
  if (v7 + 1 >= v78) {
    goto LABEL_44;
  }
  unint64_t v20 = *(void *)(v77 + 8 * v21);
  if (v20) {
    goto LABEL_21;
  }
  int64_t v21 = v7 + 2;
  if (v7 + 2 >= v78) {
    goto LABEL_44;
  }
  unint64_t v20 = *(void *)(v77 + 8 * v21);
  if (v20)
  {
LABEL_21:
    int64_t v7 = v21;
    goto LABEL_22;
  }
  int64_t v21 = v7 + 3;
  if (v7 + 3 < v78)
  {
    unint64_t v20 = *(void *)(v77 + 8 * v21);
    if (!v20)
    {
      while (1)
      {
        int64_t v7 = v21 + 1;
        if (__OFADD__(v21, 1)) {
          goto LABEL_49;
        }
        if (v7 >= v78) {
          goto LABEL_44;
        }
        unint64_t v20 = *(void *)(v77 + 8 * v7);
        ++v21;
        if (v20) {
          goto LABEL_22;
        }
      }
    }
    goto LABEL_21;
  }
LABEL_44:
  (*(void (**)(void, uint64_t, uint64_t, void))(v9 + 56))(*(void *)(v0 + 480), 1, 1, *(void *)(v0 + 488));
LABEL_45:
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v46 = *(void *)(v0 + 632);
  return _swift_task_switch(sub_1003CBFD0, v46, 0);
}

uint64_t sub_1003CBFD0()
{
  *(void *)(v0 + 736) = *(void *)(*(void *)(v0 + 632) + 136);
  swift_retain();
  return _swift_task_switch(sub_1003CC044, 0, 0);
}

uint64_t sub_1003CC044()
{
  uint64_t v1 = v0[92];
  uint64_t v2 = v0[79];
  os_log_type_t v3 = (void *)swift_task_alloc();
  v0[93] = v3;
  v3[2] = v1;
  v3[3] = sub_1003CD95C;
  v3[4] = v2;
  BOOL v4 = (void *)swift_task_alloc();
  v0[94] = v4;
  *BOOL v4 = v0;
  v4[1] = sub_1003CC154;
  uint64_t v5 = v0[83];
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 27, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1003CF0E0, v3, v5);
}

uint64_t sub_1003CC154()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 256);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 760) = *(void *)(v1 + 216);
  return _swift_task_switch(sub_1003CC2C4, v2, 0);
}

id sub_1003CC2C4()
{
  unint64_t v87 = v0;
  uint64_t v1 = v0[95];
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    sub_1003CED84(v1+ ((*(unsigned __int8 *)(v0[69] + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0[69] + 80))+ *(void *)(v0[69] + 72) * (v2 - 1), v0[34], (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = 1;
  }
  uint64_t v4 = v0[69];
  uint64_t v5 = v0[68];
  uint64_t v6 = v0[34];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v6, v3, 1, v5);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v6, 1, v5) == 1)
  {
    sub_10001DAB4(v0[34], &qword_10163B9F0);
    sub_100F2C724();
    uint64_t v7 = String.utf8Data.getter();
    unint64_t v9 = v8;
    swift_bridgeObjectRelease();
    v0[25] = v7;
    v0[26] = v9;
    sub_1000362FC();
    DataProtocol.stableUUID.getter();
    sub_10001CFB8(v7, v9);
    id result = (id)MobileGestalt_get_current_device();
    if (!result)
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
    uint64_t v11 = result;
    id v12 = (id)MobileGestalt_copy_productType_obj();

    if (v12)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    uint64_t v20 = v0[90];
    char v21 = sub_100850824();
    if (v20)
    {
      uint64_t v22 = v0[64];
      uint64_t v23 = v0[61];
      uint64_t v24 = v0[62];
      swift_release();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v22, v23);
      goto LABEL_17;
    }
    (*(void (**)(void, void, void))(v0[42] + 104))(v0[44], *(unsigned int *)((char *)v0 + qword_101356420[v21]), v0[41]);
    id result = (id)MobileGestalt_get_current_device();
    if (!result)
    {
LABEL_40:
      __break(1u);
      return result;
    }
    unint64_t v25 = result;
    id v26 = (id)MobileGestalt_copy_buildVersion_obj();

    if (v26)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    (*(void (**)(void, void, void))(v0[42] + 16))(v0[43], v0[44], v0[41]);
    DeviceVersion.init(systemVersion:platform:)();
    uint64_t v29 = v0 + 64;
    uint64_t v38 = v0[56];
    uint64_t v40 = v0[36];
    uint64_t v39 = v0[37];
    uint64_t v41 = v0[35];
    (*(void (**)(void, void))(v0[42] + 8))(v0[44], v0[41]);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v40 + 32))(v38, v39, v41);
  }
  else
  {
    uint64_t v13 = v0[90];
    sub_1003CEDEC(v0[34], v0[70], (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    swift_bridgeObjectRetain();
    char v14 = sub_100850824();
    if (v13)
    {
      uint64_t v15 = v0[70];
      swift_release();
      swift_release();
      sub_1003CEE54(v15, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
LABEL_17:
      swift_bridgeObjectRelease();
      goto LABEL_18;
    }
    uint64_t v16 = v0[45];
    uint64_t v17 = v0[46];
    uint64_t v19 = v0[41];
    uint64_t v18 = v0[42];
    (*(void (**)(uint64_t, void, uint64_t))(v18 + 104))(v17, *(unsigned int *)((char *)v0 + qword_101356420[v14]), v19);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16))(v16, v17, v19);
    swift_bridgeObjectRetain();
    DeviceVersion.init(systemVersion:platform:)();
    uint64_t v27 = v0[70];
    uint64_t v28 = v0[68];
    uint64_t v29 = v0 + 65;
    uint64_t v30 = v0[62];
    uint64_t v81 = v0[61];
    uint64_t v82 = v0[65];
    uint64_t v83 = v0[56];
    uint64_t v32 = v0[38];
    uint64_t v31 = v0[39];
    uint64_t v34 = v0[35];
    uint64_t v33 = v0[36];
    (*(void (**)(void, void))(v0[42] + 8))(v0[46], v0[41]);
    uint64_t v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 32);
    v35(v32, v31, v34);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v82, v27 + *(int *)(v28 + 20), v81);
    sub_1003CEE54(v27, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    v35(v83, v32, v34);
  }
  uint64_t v43 = v0[55];
  uint64_t v42 = v0[56];
  (*(void (**)(uint64_t, void, void))(v0[62] + 32))(v42 + *(int *)(v0[49] + 20), *v29, v0[61]);
  sub_1003CED84(v42, v43, (uint64_t (*)(void))type metadata accessor for LeaderDevice);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v45 = (void *)v0[91];
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    uint64_t v45 = (void *)sub_100A6E5F8(0, v45[2] + 1, 1, v0[91]);
  }
  unint64_t v47 = v45[2];
  unint64_t v46 = v45[3];
  if (v47 >= v46 >> 1) {
    uint64_t v45 = (void *)sub_100A6E5F8(v46 > 1, v47 + 1, 1, (unint64_t)v45);
  }
  uint64_t v48 = v0[55];
  uint64_t v49 = v0[50];
  v45[2] = v47 + 1;
  unint64_t v50 = (*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80);
  uint64_t v51 = *(void *)(v49 + 72);
  sub_1003CEDEC(v48, (uint64_t)v45 + v50 + v51 * v47, (uint64_t (*)(void))type metadata accessor for LeaderDevice);
  v86[0] = v45;
  swift_bridgeObjectRetain_n();
  sub_1003CD8B4(v86);
  swift_bridgeObjectRelease();
  uint64_t v52 = v86[0];
  uint64_t v53 = v86[0][2];
  if (!v53)
  {
    uint64_t v60 = v0[49];
    uint64_t v61 = v0[50];
    uint64_t v62 = v0[33];
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v61 + 56))(v62, 1, 1, v60);
    goto LABEL_32;
  }
  uint64_t v54 = (char *)v86[0] + v50;
  swift_retain();
  uint64_t v55 = (uint64_t)v54;
  do
  {
    uint64_t v56 = v0[53];
    sub_1003CED84(v55, v56, (uint64_t (*)(void))type metadata accessor for LeaderDevice);
    sub_1003CD3C0(v56);
    sub_1003CEE54(v56, (uint64_t (*)(void))type metadata accessor for LeaderDevice);
    v55 += v51;
    --v53;
  }
  while (v53);
  swift_bridgeObjectRelease();
  id result = (id)swift_release();
  if (!v52[2])
  {
    __break(1u);
    goto LABEL_39;
  }
  uint64_t v57 = v0[49];
  uint64_t v58 = v0[50];
  uint64_t v59 = v0[33];
  sub_1003CED84((uint64_t)v54, v59, (uint64_t (*)(void))type metadata accessor for LeaderDevice);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v58 + 56))(v59, 0, 1, v57);
LABEL_32:
  uint64_t v63 = v0[49];
  uint64_t v64 = v0[50];
  uint64_t v65 = v0[33];
  swift_release();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48))(v65, 1, v63) != 1)
  {
    uint64_t v67 = v0[54];
    uint64_t v69 = v0[51];
    uint64_t v68 = v0[52];
    sub_1003CEDEC(v0[33], v67, (uint64_t (*)(void))type metadata accessor for LeaderDevice);
    sub_1003CED84(v67, v68, (uint64_t (*)(void))type metadata accessor for LeaderDevice);
    sub_1003CED84(v67, v69, (uint64_t (*)(void))type metadata accessor for LeaderDevice);
    uint64_t v70 = Logger.logObject.getter();
    os_log_type_t v71 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v70, v71))
    {
      uint64_t v72 = v0[52];
      uint64_t v84 = v0[51];
      uint64_t v73 = swift_slowAlloc();
      v86[0] = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v73 = 136315394;
      sub_1003CEF08((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v74 = dispatch thunk of CustomStringConvertible.description.getter();
      v0[29] = sub_1008FA0F0(v74, v75, (uint64_t *)v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1003CEE54(v72, (uint64_t (*)(void))type metadata accessor for LeaderDevice);
      *(_WORD *)(v73 + 12) = 2080;
      uint64_t v76 = DeviceVersion.debugDescription.getter();
      v0[30] = sub_1008FA0F0(v76, v77, (uint64_t *)v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1003CEE54(v84, (uint64_t (*)(void))type metadata accessor for LeaderDevice);
      _os_log_impl((void *)&_mh_execute_header, v70, v71, "Beacon identifier %s elected as the leader. Model : %s.", (uint8_t *)v73, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v78 = v0[51];
      sub_1003CEE54(v0[52], (uint64_t (*)(void))type metadata accessor for LeaderDevice);
      sub_1003CEE54(v78, (uint64_t (*)(void))type metadata accessor for LeaderDevice);
    }

    uint64_t v79 = v0[56];
    uint64_t v80 = v0[54];
    char v85 = static UUID.== infix(_:_:)();
    swift_release();
    swift_release();
    sub_1003CEE54(v80, (uint64_t (*)(void))type metadata accessor for LeaderDevice);
    sub_1003CEE54(v79, (uint64_t (*)(void))type metadata accessor for LeaderDevice);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v36 = (uint64_t (*)(uint64_t))v0[1];
    uint64_t v37 = v85 & 1;
    goto LABEL_19;
  }
  uint64_t v66 = v0[56];
  sub_10001DAB4(v0[33], &qword_101643008);
  sub_1003CEEB4();
  swift_allocError();
  swift_willThrow();
  swift_release();
  swift_release();
  sub_1003CEE54(v66, (uint64_t (*)(void))type metadata accessor for LeaderDevice);
LABEL_18:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v36 = (uint64_t (*)(uint64_t))v0[1];
  uint64_t v37 = 0;
LABEL_19:
  return (id)v36(v37);
}

uint64_t sub_1003CD164()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1(0);
}

void sub_1003CD3C0(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for LeaderDevice();
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  unint64_t v8 = (char *)&v18 - v7;
  if (qword_101636B18 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_100010324(v9, (uint64_t)qword_10170DED0);
  sub_1003CED84(a1, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for LeaderDevice);
  sub_1003CED84(a1, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for LeaderDevice);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v20 = v1;
    uint64_t v13 = v12;
    uint64_t v19 = swift_slowAlloc();
    uint64_t v22 = v19;
    *(_DWORD *)uint64_t v13 = 141558531;
    uint64_t v21 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 12) = 2081;
    type metadata accessor for UUID();
    sub_1003CEF08((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v21 = sub_1008FA0F0(v14, v15, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1003CEE54((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for LeaderDevice);
    *(_WORD *)(v13 + 22) = 2080;
    uint64_t v16 = DeviceVersion.debugDescription.getter();
    uint64_t v21 = sub_1008FA0F0(v16, v17, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1003CEE54((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for LeaderDevice);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Sorted candidates: %{private,mask.hash}s, %s)", (uint8_t *)v13, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1003CEE54((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for LeaderDevice);
    sub_1003CEE54((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for LeaderDevice);
  }
}

uint64_t type metadata accessor for LeaderCheckService()
{
  return self;
}

uint64_t sub_1003CD72C()
{
  return _swift_task_switch(sub_1003CD748, v0, 0);
}

uint64_t sub_1003CD748()
{
  if (qword_101636AA8 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170DDF0);
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "LeaderCheckService - inside startup() function", v4, 2u);
    swift_slowDealloc();
  }

  uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
  return v5();
}

uint64_t sub_1003CD85C(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1003CEF08(&qword_101643000, a2, (void (*)(uint64_t))type metadata accessor for LeaderCheckService);
  *(void *)(a1 + 8) = result;
  return result;
}

Swift::Int sub_1003CD8B4(void **a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for LeaderDevice() - 8);
  os_log_type_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    os_log_type_t v3 = (void *)sub_100B735C0(v3);
  }
  uint64_t v4 = v3[2];
  v6[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  Swift::Int result = sub_1003CD964(v6);
  *a1 = v3;
  return result;
}

void *sub_1003CD95C@<X0>(void *a1@<X8>)
{
  return sub_100E5FAF8(a1);
}

Swift::Int sub_1003CD964(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v147 = type metadata accessor for LeaderDevice();
  uint64_t v143 = *(void *)(v147 - 8);
  uint64_t v4 = __chkstk_darwin(v147);
  uint64_t v138 = (uint64_t)&v129 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v148 = (uint64_t)&v129 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v129 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v129 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v129 - v15;
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v139 = (char *)&v129 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v129 - v20;
  __chkstk_darwin(v19);
  uint64_t v135 = (uint64_t)&v129 - v22;
  uint64_t v150 = a1;
  Swift::Int v23 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v23);
  if (result >= v23)
  {
    if (v23 < 0) {
      goto LABEL_147;
    }
    if (v23) {
      return sub_1003CE53C(0, v23, 1, v150);
    }
    return result;
  }
  if (v23 >= 0) {
    uint64_t v25 = v23;
  }
  else {
    uint64_t v25 = v23 + 1;
  }
  if (v23 < -1) {
    goto LABEL_155;
  }
  Swift::Int v131 = result;
  uint64_t v145 = v13;
  if (v23 < 2)
  {
    uint64_t v29 = (char *)_swiftEmptyArrayStorage;
    unint64_t v142 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v143 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v143 + 80));
    uint64_t v130 = _swiftEmptyArrayStorage;
    if (v23 != 1)
    {
      unint64_t v31 = _swiftEmptyArrayStorage[2];
LABEL_113:
      if (v31 >= 2)
      {
        uint64_t v122 = *v150;
        do
        {
          unint64_t v123 = v31 - 2;
          if (v31 < 2) {
            goto LABEL_142;
          }
          if (!v122) {
            goto LABEL_154;
          }
          uint64_t v124 = v29;
          uint64_t v125 = *(void *)&v29[16 * v123 + 32];
          uint64_t v126 = *(void *)&v29[16 * v31 + 24];
          sub_1003CE80C(v122 + *(void *)(v143 + 72) * v125, v122 + *(void *)(v143 + 72) * *(void *)&v29[16 * v31 + 16], v122 + *(void *)(v143 + 72) * v126, v142);
          if (v2) {
            break;
          }
          if (v126 < v125) {
            goto LABEL_143;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v124 = sub_100B73584((uint64_t)v29);
          }
          if (v123 >= *((void *)v124 + 2)) {
            goto LABEL_144;
          }
          id v127 = &v124[16 * v123 + 32];
          *(void *)id v127 = v125;
          *((void *)v127 + 1) = v126;
          unint64_t v128 = *((void *)v124 + 2);
          if (v31 > v128) {
            goto LABEL_145;
          }
          memmove(&v124[16 * v31 + 16], &v124[16 * v31 + 32], 16 * (v128 - v31));
          *((void *)v124 + 2) = v128 - 1;
          unint64_t v31 = v128 - 1;
          uint64_t v29 = v124;
        }
        while (v128 > 2);
      }
LABEL_124:
      swift_bridgeObjectRelease();
      v130[2] = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    uint64_t v26 = v25 >> 1;
    uint64_t v27 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v27 + 16) = v26;
    uint64_t v28 = *(unsigned __int8 *)(v143 + 80);
    uint64_t v130 = (void *)v27;
    unint64_t v142 = v27 + ((v28 + 32) & ~v28);
  }
  uint64_t v30 = 0;
  uint64_t v29 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v144 = v10;
  uint64_t v141 = v16;
  uint64_t v133 = v21;
  while (1)
  {
    uint64_t v32 = v30;
    Swift::Int v33 = v30 + 1;
    if (v30 + 1 < v23)
    {
      uint64_t v134 = v2;
      uint64_t v34 = *v150;
      uint64_t v35 = *(void *)(v143 + 72);
      Swift::Int v137 = v30 + 1;
      uint64_t v36 = v30;
      uint64_t v37 = v135;
      sub_1003CED84(v34 + v35 * v33, v135, (uint64_t (*)(void))type metadata accessor for LeaderDevice);
      uint64_t v140 = v36;
      uint64_t v136 = v34;
      uint64_t v149 = v35;
      sub_1003CED84(v34 + v35 * v36, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for LeaderDevice);
      if (static DeviceVersion.== infix(_:_:)()) {
        int v38 = static UUID.< infix(_:_:)();
      }
      else {
        int v38 = static DeviceVersion.< infix(_:_:)();
      }
      LODWORD(v146) = v38;
      uint64_t v39 = (uint64_t)v139;
      sub_1003CEE54((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for LeaderDevice);
      sub_1003CEE54(v37, (uint64_t (*)(void))type metadata accessor for LeaderDevice);
      uint64_t v32 = v140;
      uint64_t v2 = v134;
      if (v140 + 2 >= v23)
      {
        Swift::Int v33 = v140 + 2;
        if ((v146 & 1) == 0) {
          goto LABEL_44;
        }
      }
      else
      {
        uint64_t v132 = v29;
        uint64_t v40 = v136;
        v137 *= v149;
        Swift::Int v41 = v140 + 2;
        uint64_t v42 = v149 * (v140 + 2);
        while (1)
        {
          sub_1003CED84(v40 + v42, v39, (uint64_t (*)(void))type metadata accessor for LeaderDevice);
          sub_1003CED84(v40 + v137, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for LeaderDevice);
          int v43 = (static DeviceVersion.== infix(_:_:)() & 1) != 0
              ? static UUID.< infix(_:_:)()
              : static DeviceVersion.< infix(_:_:)();
          int v44 = v43;
          sub_1003CEE54((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for LeaderDevice);
          sub_1003CEE54(v39, (uint64_t (*)(void))type metadata accessor for LeaderDevice);
          if ((v146 ^ v44)) {
            break;
          }
          v40 += v149;
          ++v41;
          uint64_t v39 = (uint64_t)v139;
          if (v23 == v41)
          {
            Swift::Int v33 = v23;
            uint64_t v29 = v132;
            uint64_t v32 = v140;
            if (v146) {
              goto LABEL_31;
            }
            goto LABEL_44;
          }
        }
        uint64_t v29 = v132;
        Swift::Int v33 = v41;
        uint64_t v32 = v140;
        if ((v146 & 1) == 0) {
          goto LABEL_44;
        }
      }
LABEL_31:
      if (v33 < v32) {
        goto LABEL_148;
      }
      if (v32 < v33)
      {
        Swift::Int v137 = v23;
        uint64_t v132 = v29;
        uint64_t v45 = 0;
        uint64_t v46 = v32;
        uint64_t v47 = v149 * (v33 - 1);
        uint64_t v48 = v33 * v149;
        Swift::Int v49 = v46;
        uint64_t v50 = v46 * v149;
        do
        {
          if (v49 != v33 + v45 - 1)
          {
            Swift::Int v52 = v33;
            uint64_t v53 = v136;
            if (!v136) {
              goto LABEL_153;
            }
            unint64_t v54 = v136 + v50;
            uint64_t v146 = v136 + v47;
            sub_1003CEDEC(v136 + v50, v138, (uint64_t (*)(void))type metadata accessor for LeaderDevice);
            if (v50 < v47 || v54 >= v53 + v48)
            {
              uint64_t v51 = v146;
              swift_arrayInitWithTakeFrontToBack();
            }
            else
            {
              uint64_t v51 = v146;
              if (v50 != v47) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            sub_1003CEDEC(v138, v51, (uint64_t (*)(void))type metadata accessor for LeaderDevice);
            Swift::Int v33 = v52;
          }
          ++v49;
          --v45;
          v47 -= v149;
          v48 -= v149;
          v50 += v149;
        }
        while (v49 < v33 + v45);
        uint64_t v29 = v132;
        uint64_t v32 = v140;
        uint64_t v16 = v141;
        Swift::Int v23 = v137;
      }
    }
LABEL_44:
    if (v33 >= v23) {
      goto LABEL_65;
    }
    if (__OFSUB__(v33, v32)) {
      goto LABEL_146;
    }
    if (v33 - v32 >= v131) {
      goto LABEL_65;
    }
    if (__OFADD__(v32, v131)) {
      goto LABEL_149;
    }
    Swift::Int v55 = v32 + v131 >= v23 ? v23 : v32 + v131;
    if (v55 < v32) {
      break;
    }
    if (v33 != v55)
    {
      uint64_t v140 = v32;
      uint64_t v132 = v29;
      uint64_t v134 = v2;
      uint64_t v56 = *(void *)(v143 + 72);
      uint64_t v149 = v56 * (v33 - 1);
      uint64_t v146 = v56;
      Swift::Int v57 = v33 * v56;
      Swift::Int v137 = v55;
      do
      {
        uint64_t v58 = 0;
        uint64_t v59 = v140;
        while (1)
        {
          Swift::Int v60 = v33;
          uint64_t v61 = *v150;
          uint64_t v62 = (uint64_t)v145;
          sub_1003CED84(v57 + v58 + *v150, (uint64_t)v145, (uint64_t (*)(void))type metadata accessor for LeaderDevice);
          uint64_t v63 = v149 + v58 + v61;
          uint64_t v64 = (uint64_t)v144;
          sub_1003CED84(v63, (uint64_t)v144, (uint64_t (*)(void))type metadata accessor for LeaderDevice);
          char v65 = (static DeviceVersion.== infix(_:_:)() & 1) != 0
              ? static UUID.< infix(_:_:)()
              : static DeviceVersion.< infix(_:_:)();
          uint64_t v66 = v62;
          char v67 = v65;
          sub_1003CEE54(v64, (uint64_t (*)(void))type metadata accessor for LeaderDevice);
          sub_1003CEE54(v66, (uint64_t (*)(void))type metadata accessor for LeaderDevice);
          if ((v67 & 1) == 0) {
            break;
          }
          uint64_t v68 = *v150;
          if (!*v150) {
            goto LABEL_151;
          }
          uint64_t v69 = v68 + v149 + v58;
          sub_1003CEDEC(v68 + v57 + v58, v148, (uint64_t (*)(void))type metadata accessor for LeaderDevice);
          swift_arrayInitWithTakeFrontToBack();
          sub_1003CEDEC(v148, v69, (uint64_t (*)(void))type metadata accessor for LeaderDevice);
          v58 -= v146;
          ++v59;
          Swift::Int v33 = v60;
          if (v60 == v59) {
            goto LABEL_55;
          }
        }
        Swift::Int v33 = v60;
LABEL_55:
        ++v33;
        v149 += v146;
        v57 += v146;
      }
      while (v33 != v137);
      Swift::Int v33 = v137;
      uint64_t v2 = v134;
      uint64_t v29 = v132;
      uint64_t v32 = v140;
      uint64_t v16 = v141;
    }
LABEL_65:
    if (v33 < v32) {
      goto LABEL_141;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v149 = v33;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      uint64_t v29 = sub_100B729CC(0, *((void *)v29 + 2) + 1, 1, v29);
    }
    unint64_t v72 = *((void *)v29 + 2);
    unint64_t v71 = *((void *)v29 + 3);
    unint64_t v31 = v72 + 1;
    if (v72 >= v71 >> 1) {
      uint64_t v29 = sub_100B729CC((char *)(v71 > 1), v72 + 1, 1, v29);
    }
    *((void *)v29 + 2) = v31;
    uint64_t v73 = v29 + 32;
    uint64_t v74 = &v29[16 * v72 + 32];
    uint64_t v75 = v149;
    *(void *)uint64_t v74 = v32;
    *((void *)v74 + 1) = v75;
    if (v72)
    {
      while (1)
      {
        unint64_t v76 = v31 - 1;
        if (v31 >= 4)
        {
          uint64_t v81 = &v73[16 * v31];
          uint64_t v82 = *((void *)v81 - 8);
          uint64_t v83 = *((void *)v81 - 7);
          BOOL v87 = __OFSUB__(v83, v82);
          uint64_t v84 = v83 - v82;
          if (v87) {
            goto LABEL_130;
          }
          uint64_t v86 = *((void *)v81 - 6);
          uint64_t v85 = *((void *)v81 - 5);
          BOOL v87 = __OFSUB__(v85, v86);
          uint64_t v79 = v85 - v86;
          char v80 = v87;
          if (v87) {
            goto LABEL_131;
          }
          unint64_t v88 = v31 - 2;
          uint64_t v89 = &v73[16 * v31 - 32];
          uint64_t v91 = *(void *)v89;
          uint64_t v90 = *((void *)v89 + 1);
          BOOL v87 = __OFSUB__(v90, v91);
          uint64_t v92 = v90 - v91;
          if (v87) {
            goto LABEL_133;
          }
          BOOL v87 = __OFADD__(v79, v92);
          uint64_t v93 = v79 + v92;
          if (v87) {
            goto LABEL_136;
          }
          if (v93 >= v84)
          {
            Class v111 = &v73[16 * v76];
            uint64_t v113 = *(void *)v111;
            uint64_t v112 = *((void *)v111 + 1);
            BOOL v87 = __OFSUB__(v112, v113);
            uint64_t v114 = v112 - v113;
            if (v87) {
              goto LABEL_140;
            }
            BOOL v104 = v79 < v114;
            goto LABEL_102;
          }
        }
        else
        {
          if (v31 != 3)
          {
            uint64_t v105 = *((void *)v29 + 4);
            uint64_t v106 = *((void *)v29 + 5);
            BOOL v87 = __OFSUB__(v106, v105);
            uint64_t v98 = v106 - v105;
            char v99 = v87;
            goto LABEL_96;
          }
          uint64_t v78 = *((void *)v29 + 4);
          uint64_t v77 = *((void *)v29 + 5);
          BOOL v87 = __OFSUB__(v77, v78);
          uint64_t v79 = v77 - v78;
          char v80 = v87;
        }
        if (v80) {
          goto LABEL_132;
        }
        unint64_t v88 = v31 - 2;
        uint64_t v94 = &v73[16 * v31 - 32];
        uint64_t v96 = *(void *)v94;
        uint64_t v95 = *((void *)v94 + 1);
        BOOL v97 = __OFSUB__(v95, v96);
        uint64_t v98 = v95 - v96;
        char v99 = v97;
        if (v97) {
          goto LABEL_135;
        }
        uint64_t v100 = &v73[16 * v76];
        uint64_t v102 = *(void *)v100;
        uint64_t v101 = *((void *)v100 + 1);
        BOOL v87 = __OFSUB__(v101, v102);
        uint64_t v103 = v101 - v102;
        if (v87) {
          goto LABEL_138;
        }
        if (__OFADD__(v98, v103)) {
          goto LABEL_139;
        }
        if (v98 + v103 >= v79)
        {
          BOOL v104 = v79 < v103;
LABEL_102:
          if (v104) {
            unint64_t v76 = v88;
          }
          goto LABEL_104;
        }
LABEL_96:
        if (v99) {
          goto LABEL_134;
        }
        Class v107 = &v73[16 * v76];
        uint64_t v109 = *(void *)v107;
        uint64_t v108 = *((void *)v107 + 1);
        BOOL v87 = __OFSUB__(v108, v109);
        uint64_t v110 = v108 - v109;
        if (v87) {
          goto LABEL_137;
        }
        if (v110 < v98) {
          goto LABEL_14;
        }
LABEL_104:
        unint64_t v115 = v76 - 1;
        if (v76 - 1 >= v31)
        {
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
          goto LABEL_150;
        }
        if (!*v150) {
          goto LABEL_152;
        }
        uint64_t v116 = v29;
        uint64_t v117 = &v73[16 * v115];
        uint64_t v118 = *(void *)v117;
        uint64_t v119 = &v73[16 * v76];
        uint64_t v120 = *((void *)v119 + 1);
        sub_1003CE80C(*v150 + *(void *)(v143 + 72) * *(void *)v117, *v150 + *(void *)(v143 + 72) * *(void *)v119, *v150 + *(void *)(v143 + 72) * v120, v142);
        if (v2) {
          goto LABEL_124;
        }
        if (v120 < v118) {
          goto LABEL_127;
        }
        if (v76 > *((void *)v116 + 2)) {
          goto LABEL_128;
        }
        *(void *)uint64_t v117 = v118;
        *(void *)&v73[16 * v115 + 8] = v120;
        unint64_t v121 = *((void *)v116 + 2);
        if (v76 >= v121) {
          goto LABEL_129;
        }
        uint64_t v29 = v116;
        unint64_t v31 = v121 - 1;
        memmove(&v73[16 * v76], v119 + 16, 16 * (v121 - 1 - v76));
        *((void *)v116 + 2) = v121 - 1;
        uint64_t v16 = v141;
        if (v121 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v31 = 1;
LABEL_14:
    Swift::Int v23 = v150[1];
    uint64_t v30 = v149;
    uint64_t v21 = v133;
    if (v149 >= v23) {
      goto LABEL_113;
    }
  }
LABEL_150:
  __break(1u);
LABEL_151:
  __break(1u);
LABEL_152:
  __break(1u);
LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
LABEL_155:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1003CE53C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v31 = a4;
  uint64_t v26 = a1;
  uint64_t v27 = type metadata accessor for LeaderDevice();
  uint64_t v6 = __chkstk_darwin(v27);
  uint64_t v30 = (uint64_t)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v24 - v9;
  uint64_t result = __chkstk_darwin(v8);
  uint64_t v14 = (char *)&v24 - v13;
  uint64_t v29 = a3;
  uint64_t v25 = a2;
  if (a3 != a2)
  {
    uint64_t v15 = *(void *)(v12 + 72);
    uint64_t v32 = v15 * (v29 - 1);
    uint64_t v28 = v15;
    uint64_t v16 = v15 * v29;
LABEL_5:
    uint64_t v17 = 0;
    uint64_t v18 = v26;
    while (1)
    {
      uint64_t v19 = *v31;
      sub_1003CED84(v16 + v17 + *v31, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for LeaderDevice);
      sub_1003CED84(v32 + v17 + v19, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for LeaderDevice);
      if (static DeviceVersion.== infix(_:_:)()) {
        char v20 = static UUID.< infix(_:_:)();
      }
      else {
        char v20 = static DeviceVersion.< infix(_:_:)();
      }
      char v21 = v20;
      sub_1003CEE54((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for LeaderDevice);
      uint64_t result = sub_1003CEE54((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for LeaderDevice);
      if ((v21 & 1) == 0)
      {
LABEL_4:
        v32 += v28;
        v16 += v28;
        if (++v29 == v25) {
          return result;
        }
        goto LABEL_5;
      }
      uint64_t v22 = *v31;
      if (!*v31) {
        break;
      }
      uint64_t v23 = v22 + v32 + v17;
      sub_1003CEDEC(v22 + v16 + v17, v30, (uint64_t (*)(void))type metadata accessor for LeaderDevice);
      swift_arrayInitWithTakeFrontToBack();
      uint64_t result = sub_1003CEDEC(v30, v23, (uint64_t (*)(void))type metadata accessor for LeaderDevice);
      v17 -= v28;
      if (v29 == ++v18) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_1003CE80C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v46 = type metadata accessor for LeaderDevice();
  uint64_t v8 = __chkstk_darwin(v46);
  uint64_t v45 = (uint64_t)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v43 - v11;
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v43 - v14;
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v43 - v16;
  uint64_t v19 = *(void *)(v18 + 72);
  if (!v19)
  {
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
    goto LABEL_69;
  }
  unint64_t v20 = a1;
  if (a2 - a1 == 0x8000000000000000 && v19 == -1) {
    goto LABEL_67;
  }
  int64_t v21 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v19 == -1) {
    goto LABEL_68;
  }
  uint64_t v22 = (uint64_t)(a2 - a1) / v19;
  unint64_t v49 = a1;
  unint64_t v48 = a4;
  uint64_t v23 = v21 / v19;
  if (v22 >= v21 / v19)
  {
    if ((v23 & 0x8000000000000000) == 0)
    {
      unint64_t v44 = a1;
      uint64_t v25 = v23 * v19;
      if (a4 < a2 || a2 + v25 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v33 = a4 + v25;
      unint64_t v47 = a4 + v25;
      unint64_t v49 = a2;
      if (v25 >= 1 && v44 < a2)
      {
        uint64_t v35 = -v19;
        do
        {
          sub_1003CED84(v33 + v35, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for LeaderDevice);
          unint64_t v36 = a2 + v35;
          uint64_t v37 = v45;
          sub_1003CED84(a2 + v35, v45, (uint64_t (*)(void))type metadata accessor for LeaderDevice);
          if (static DeviceVersion.== infix(_:_:)()) {
            char v38 = static UUID.< infix(_:_:)();
          }
          else {
            char v38 = static DeviceVersion.< infix(_:_:)();
          }
          char v39 = v38;
          unint64_t v40 = a3 + v35;
          sub_1003CEE54(v37, (uint64_t (*)(void))type metadata accessor for LeaderDevice);
          sub_1003CEE54((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for LeaderDevice);
          if (v39)
          {
            if (a3 < a2 || v40 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (a3 != a2)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            v49 += v35;
          }
          else
          {
            unint64_t v41 = v47;
            v47 += v35;
            if (a3 < v41 || v40 >= v41)
            {
              swift_arrayInitWithTakeFrontToBack();
            }
            else if (a3 != v41)
            {
              swift_arrayInitWithTakeBackToFront();
            }
            unint64_t v36 = a2;
          }
          unint64_t v33 = v47;
          if (v47 <= a4) {
            break;
          }
          a2 = v36;
          a3 += v35;
        }
        while (v36 > v44);
      }
      goto LABEL_65;
    }
  }
  else if ((v22 & 0x8000000000000000) == 0)
  {
    uint64_t v24 = v22 * v19;
    if (a4 < v20 || v20 + v24 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != v20)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v26 = a4 + v24;
    unint64_t v47 = a4 + v24;
    if (v24 >= 1 && a2 < a3)
    {
      do
      {
        sub_1003CED84(a2, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for LeaderDevice);
        sub_1003CED84(a4, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for LeaderDevice);
        if (static DeviceVersion.== infix(_:_:)()) {
          char v28 = static UUID.< infix(_:_:)();
        }
        else {
          char v28 = static DeviceVersion.< infix(_:_:)();
        }
        char v29 = v28;
        sub_1003CEE54((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for LeaderDevice);
        sub_1003CEE54((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for LeaderDevice);
        unint64_t v30 = v49;
        if (v29)
        {
          unint64_t v31 = a2 + v19;
          if (v49 < a2 || v49 >= v31)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v49 == a2)
          {
            unint64_t v30 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        else
        {
          unint64_t v32 = v48 + v19;
          if (v49 < v48 || v49 >= v32)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v49 != v48)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          unint64_t v48 = v32;
          unint64_t v31 = a2;
        }
        unint64_t v49 = v30 + v19;
        a4 = v48;
        if (v48 >= v26) {
          break;
        }
        a2 = v31;
      }
      while (v31 < a3);
    }
LABEL_65:
    sub_100B72B9C(&v49, &v48, (uint64_t *)&v47);
    return 1;
  }
LABEL_69:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1003CED84(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1003CEDEC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1003CEE54(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_1003CEEB4()
{
  unint64_t result = qword_101643010;
  if (!qword_101643010)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101643010);
  }
  return result;
}

uint64_t sub_1003CEF08(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1003CEF50(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OwnedBeaconRecord();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unsigned char *storeEnumTagSinglePayload for LeaderCheckService.LeaderCheckError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1003CF050);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for LeaderCheckService.LeaderCheckError()
{
  return &type metadata for LeaderCheckService.LeaderCheckError;
}

unint64_t sub_1003CF08C()
{
  unint64_t result = qword_101643018;
  if (!qword_101643018)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101643018);
  }
  return result;
}

uint64_t sub_1003CF0E4(void *a1, uint64_t a2, char a3)
{
  uint64_t v7 = type metadata accessor for Endianness();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryEncoding.container()();
  if (a3 == 2)
  {
    if (a2) {
      char v11 = 19;
    }
    else {
      char v11 = 8;
    }
  }
  else if (a3 == 1)
  {
    char v11 = 40;
  }
  else
  {
    char v11 = 0;
  }
  LOBYTE(v20) = v11;
  static Endianness.current.getter();
  sub_10006145C();
  FixedWidthInteger.convert(to:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  LOBYTE(v20) = v15;
  sub_1000BD078((uint64_t)v18, v19);
  dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
  if (!v3)
  {
    if (a3)
    {
      if (a3 == 1)
      {
        uint64_t v16 = &type metadata for AirTagSoundStartPayload;
        unint64_t v17 = sub_1003CFC68();
        uint64_t v15 = a2;
        swift_bridgeObjectRetain();
        sub_10000588C(&qword_101639B68);
        if (swift_dynamicCast())
        {
          uint64_t v15 = v20;
          sub_1000BD078((uint64_t)v18, v19);
          sub_1003CFD10();
          dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
          swift_bridgeObjectRelease();
          return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v18);
        }
LABEL_18:
        sub_1003CFC14();
        swift_allocError();
        *uint64_t v13 = 0;
        swift_willThrow();
        return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v18);
      }
      unint64_t v12 = sub_10006258C();
      uint64_t v16 = &type metadata for AccessoryGenericPayload;
      unint64_t v17 = v12;
      sub_10000588C(&qword_101639B68);
      if (!swift_dynamicCast()) {
        goto LABEL_18;
      }
      sub_1000BD078((uint64_t)v18, v19);
      sub_1002A576C();
    }
    else
    {
      uint64_t v16 = &type metadata for AirTagCommandAckPayload;
      unint64_t v17 = sub_1003CFCBC();
      LOBYTE(v15) = a2;
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_18;
      }
      LOBYTE(v15) = v20;
      sub_1000BD078((uint64_t)v18, v19);
      sub_1003CFD64();
    }
    dispatch thunk of BinaryEncodingContaining.encode<A>(_:)();
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v18);
}

char *sub_1003CF458@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_1003CF954(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(unsigned char *)(a2 + 8) = v5;
  }
  return result;
}

uint64_t sub_1003CF488(void *a1)
{
  return sub_1003CF0E4(a1, *(void *)v1, *(unsigned char *)(v1 + 8));
}

uint64_t sub_1003CF4A8(unsigned __int8 a1)
{
  if (a1 > 0x12u)
  {
    if (a1 != 19)
    {
      if (a1 == 40) {
        return 1;
      }
      return 4;
    }
    return 3;
  }
  else
  {
    if (a1)
    {
      if (a1 == 8) {
        return 2;
      }
      return 4;
    }
    return 0;
  }
}

uint64_t initializeBufferWithCopyOfBuffer for AirTagCommand(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  sub_1003CF540(*(void *)a2, v4);
  *(void *)a1 = v3;
  *(unsigned char *)(a1 + 8) = v4;
  return a1;
}

uint64_t sub_1003CF540(uint64_t a1, char a2)
{
  if (a2 == 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for AirTagCommand(uint64_t a1)
{
  return sub_1003CF564(*(void *)a1, *(unsigned char *)(a1 + 8));
}

uint64_t sub_1003CF564(uint64_t a1, char a2)
{
  if (a2 == 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t assignWithCopy for AirTagCommand(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  sub_1003CF540(*(void *)a2, v4);
  uint64_t v5 = *(void *)a1;
  *(void *)a1 = v3;
  char v6 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v4;
  sub_1003CF564(v5, v6);
  return a1;
}

uint64_t assignWithTake for AirTagCommand(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  char v5 = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v3;
  sub_1003CF564(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for AirTagCommand(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AirTagCommand(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1003CF698(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u) {
    return *(unsigned __int8 *)(a1 + 8);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_1003CF6B0(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for AirTagCommand()
{
  return &type metadata for AirTagCommand;
}

uint64_t sub_1003CF6D8(uint64_t a1, uint64_t a2)
{
  sub_10001D010(a2, (uint64_t)v9);
  switch((char)a1)
  {
    case 1:
      sub_1003CFC68();
      int v4 = &type metadata for AirTagSoundStartPayload;
      break;
    case 2:
    case 3:
      sub_10006258C();
      int v4 = &type metadata for AccessoryGenericPayload;
      break;
    default:
      sub_1003CFCBC();
      int v4 = &type metadata for AirTagCommandAckPayload;
      break;
  }
  sub_10001CD44(v9, v9[3]);
  uint64_t DynamicType = swift_getDynamicType();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v9);
  if (v4 != (ValueMetadata *)DynamicType)
  {
    __break(1u);
    JUMPOUT(0x1003CF934);
  }
  switch((char)a1)
  {
    case 1:
      sub_10001D010(a2, (uint64_t)v8);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_15;
      }
      a1 = v10;
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      break;
    case 2:
      sub_10001D010(a2, (uint64_t)v8);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_15;
      }
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      a1 = 0;
      break;
    case 3:
      sub_10001D010(a2, (uint64_t)v8);
      sub_10000588C(&qword_101639B68);
      if ((swift_dynamicCast() & 1) == 0) {
        goto LABEL_15;
      }
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      a1 = 1;
      break;
    default:
      sub_10001D010(a2, (uint64_t)v8);
      sub_10000588C(&qword_101639B68);
      if (swift_dynamicCast())
      {
        a1 = v10;
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      }
      else
      {
LABEL_15:
        sub_1003CFC14();
        swift_allocError();
        *char v6 = 0;
        swift_willThrow();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a2);
      }
      break;
  }
  return a1;
}

char *sub_1003CF954(void *a1)
{
  uint64_t v3 = type metadata accessor for Endianness();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = &v15[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryDecoding.container()();
  uint64_t v7 = (char *)sub_1000BD078((uint64_t)v17, v18);
  sub_10006145C();
  dispatch thunk of BinaryDecodingContaining.decode<A>(_:)();
  if (!v1)
  {
    char v19 = v15[0];
    static Endianness.current.getter();
    uint64_t v7 = &v19;
    FixedWidthInteger.convert(to:)();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
    if (LOBYTE(v16[0]) > 0x12u)
    {
      if (LOBYTE(v16[0]) == 19)
      {
        uint64_t v8 = &type metadata for AccessoryGenericPayload;
        uint64_t v9 = 3;
        goto LABEL_11;
      }
      if (LOBYTE(v16[0]) == 40)
      {
        uint64_t v8 = &type metadata for AirTagSoundStartPayload;
        uint64_t v9 = 1;
        unint64_t v10 = sub_1003CFC68();
LABEL_12:
        unint64_t v11 = v10;
        goto LABEL_13;
      }
    }
    else
    {
      if (!LOBYTE(v16[0]))
      {
        uint64_t v8 = &type metadata for AirTagCommandAckPayload;
        unint64_t v11 = sub_1003CFCBC();
        uint64_t v9 = 0;
LABEL_13:
        sub_10001D010((uint64_t)a1, (uint64_t)v15);
        v16[3] = (uint64_t)v8;
        v16[4] = v11;
        sub_10001D958(v16);
        dispatch thunk of BinaryDecodable.init(from:)();
        sub_10001D010((uint64_t)v16, (uint64_t)v15);
        uint64_t v7 = (char *)sub_1003CF6D8(v9, (uint64_t)v15);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v16);
        goto LABEL_15;
      }
      if (LOBYTE(v16[0]) == 8)
      {
        uint64_t v8 = &type metadata for AccessoryGenericPayload;
        uint64_t v9 = 2;
LABEL_11:
        unint64_t v10 = sub_10006258C();
        goto LABEL_12;
      }
    }
    sub_1003CFC14();
    swift_allocError();
    unsigned char *v12 = 1;
    swift_willThrow();
  }
LABEL_15:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v17);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  return v7;
}

unint64_t sub_1003CFC14()
{
  unint64_t result = qword_101643020;
  if (!qword_101643020)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101643020);
  }
  return result;
}

unint64_t sub_1003CFC68()
{
  unint64_t result = qword_101643028;
  if (!qword_101643028)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101643028);
  }
  return result;
}

unint64_t sub_1003CFCBC()
{
  unint64_t result = qword_101643030;
  if (!qword_101643030)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101643030);
  }
  return result;
}

unint64_t sub_1003CFD10()
{
  unint64_t result = qword_101643038;
  if (!qword_101643038)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101643038);
  }
  return result;
}

unint64_t sub_1003CFD64()
{
  unint64_t result = qword_101643040;
  if (!qword_101643040)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101643040);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for AirTagCommand.AirTagCommandError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1003CFE84);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AirTagCommand.AirTagCommandError()
{
  return &type metadata for AirTagCommand.AirTagCommandError;
}

unint64_t sub_1003CFEC0()
{
  unint64_t result = qword_101643048;
  if (!qword_101643048)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101643048);
  }
  return result;
}

uint64_t sub_1003CFF18()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170DE08);
  uint64_t v1 = sub_100010324(v0, (uint64_t)qword_10170DE08);
  if (qword_101636AB8 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100010324(v0, (uint64_t)qword_10170DE20);
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1003CFFE0()
{
  *(void *)(v1 + 16) = v0;
  return _swift_task_switch(sub_1003D0000, v0, 0);
}

uint64_t sub_1003D0000()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void **)(v1 + 136);
  uint64_t v3 = v2[18];
  v2[18] = sub_1003D47C4;
  v2[19] = v1;
  swift_retain();
  sub_1000A1534(v3);
  uint64_t v4 = v2[20];
  v2[20] = sub_1003D47D4;
  v2[21] = v1;
  swift_retain();
  sub_1000A1534(v4);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = sub_1003D47DC;
  *(void *)(v5 + 24) = v1;
  uint64_t v6 = v2[22];
  v2[22] = sub_1003D4844;
  v2[23] = v5;
  swift_retain();
  sub_1000A1534(v6);
  uint64_t v7 = v2[24];
  v2[24] = sub_1003D486C;
  v2[25] = v1;
  swift_retain();
  sub_1000A1534(v7);
  uint64_t v8 = v2[26];
  v2[26] = sub_1003D48A4;
  v2[27] = v1;
  swift_retain();
  sub_1000A1534(v8);
  uint64_t v9 = v2[30];
  v2[30] = sub_1003D48DC;
  v2[31] = v1;
  swift_retain();
  sub_1000A1534(v9);
  uint64_t v10 = v2[32];
  v2[32] = sub_1003D48E4;
  v2[33] = v1;
  swift_retain();
  sub_1000A1534(v10);
  swift_retain();
  unint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v0 + 24) = v11;
  *unint64_t v11 = v0;
  v11[1] = sub_1003D022C;
  uint64_t v12 = *(void *)(v0 + 16);
  return unsafeBlocking<A>(_:)(v11, sub_1003D48EC, v12, (char *)&type metadata for () + 8);
}

uint64_t sub_1003D022C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_1003D0344, v1, 0);
}

uint64_t sub_1003D0344()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003D0358(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v21 = a5;
  int v20 = a4;
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12);
  v19[1] = type metadata accessor for Transaction();
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))((char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), a3, v12);
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (char *)swift_allocObject();
  *((void *)v16 + 2) = a7;
  *((void *)v16 + 3) = a1;
  *((void *)v16 + 4) = a2;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v16[v15], (char *)v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), v12);
  unint64_t v17 = &v16[(v14 + v15 + 7) & 0xFFFFFFFFFFFFFFF8];
  *unint64_t v17 = v20;
  *((void *)v17 + 1) = v21;
  *((void *)v17 + 2) = a6;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static Transaction.asyncTask(name:block:)();
  return swift_release();
}

uint64_t sub_1003D0514(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v27 = a7;
  uint64_t v28 = a8;
  int v26 = a6;
  uint64_t v25 = a4;
  int v24 = a3;
  uint64_t v23 = a1;
  uint64_t v14 = type metadata accessor for MessagingMessageContext();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  __chkstk_darwin(v14 - 8);
  uint64_t v29 = type metadata accessor for Transaction();
  sub_1003D56D0(a11, (uint64_t)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for MessagingMessageContext);
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 104) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = swift_allocObject();
  uint64_t v19 = v23;
  *(void *)(v18 + 16) = a12;
  *(void *)(v18 + 24) = v19;
  *(void *)(v18 + 32) = a2;
  *(unsigned char *)(v18 + 40) = v24;
  *(void *)(v18 + 48) = v25;
  *(void *)(v18 + 56) = a5;
  *(unsigned char *)(v18 + 64) = v26;
  uint64_t v20 = v28;
  *(void *)(v18 + 72) = v27;
  *(void *)(v18 + 80) = v20;
  *(void *)(v18 + 88) = a9;
  *(void *)(v18 + 96) = a10;
  sub_1003D592C((uint64_t)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v18 + v17, (uint64_t (*)(void))type metadata accessor for MessagingMessageContext);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000361E0(v20, a9);
  swift_bridgeObjectRetain();
  static Transaction.asyncTask(name:block:)();
  return swift_release();
}

uint64_t sub_1003D06E4(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Transaction();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a2;
  *(void *)(v4 + 24) = a1;
  swift_retain();
  swift_bridgeObjectRetain();
  static Transaction.asyncTask(name:block:)();

  return swift_release();
}

uint64_t sub_1003D0788(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v20 = a3;
  HIDWORD(v19) = a2;
  uint64_t v10 = type metadata accessor for BeaconSharingSessionContext();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10 - 8);
  uint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Transaction();
  sub_1003D56D0(a1, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
  unint64_t v14 = (*(unsigned __int8 *)(v11 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  unint64_t v15 = (v12 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a6;
  sub_1003D592C((uint64_t)v13, v16 + v14, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
  unint64_t v17 = v16 + v15;
  *(unsigned char *)unint64_t v17 = BYTE4(v19);
  *(void *)(v17 + 8) = v20;
  *(void *)(v17 + 16) = a4;
  *(void *)(v16 + ((v15 + 31) & 0xFFFFFFFFFFFFFFF8)) = a5;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  return swift_release();
}

uint64_t sub_1003D0938(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Transaction();
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a2;
  *(void *)(v4 + 24) = a1;
  swift_retain();
  swift_retain();
  static Transaction.asyncTask(name:block:)();

  return swift_release();
}

uint64_t sub_1003D09E0()
{
  swift_bridgeObjectRelease();

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for IDSTransportService_FMD()
{
  return self;
}

uint64_t sub_1003D0A5C()
{
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100033F68;
  v2[2] = v0;
  return _swift_task_switch(sub_1003D0000, v0, 0);
}

uint64_t sub_1003D0B00(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_1003D6A24(&qword_101643188, a2, (void (*)(uint64_t))type metadata accessor for IDSTransportService_FMD);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1003D0B58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v7 + 48) = a6;
  *(void *)(v7 + 56) = a7;
  *(unsigned char *)(v7 + 80) = a5;
  *(void *)(v7 + 32) = a3;
  *(void *)(v7 + 40) = a4;
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  return _swift_task_switch(sub_1003D0B84, 0, 0);
}

uint64_t sub_1003D0B84()
{
  uint64_t v2 = *(void *)(v0 + 48);
  uint64_t v1 = *(void *)(v0 + 56);
  char v3 = *(unsigned char *)(v0 + 80);
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  uint64_t v6 = swift_task_alloc();
  *(void *)(v0 + 64) = v6;
  long long v7 = *(_OWORD *)(v0 + 32);
  *(void *)(v6 + 16) = v5;
  *(void *)(v6 + 24) = v4;
  *(_OWORD *)(v6 + 32) = v7;
  *(unsigned char *)(v6 + 48) = v3;
  *(void *)(v6 + 56) = v2;
  *(void *)(v6 + 64) = v1;
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_1003D0C90;
  return withTaskGroup<A, B>(of:returning:isolation:body:)(v8);
}

uint64_t sub_1003D0C90()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_1003D0344, 0, 0);
}

uint64_t sub_1003D0DA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  *(void *)(v8 + 192) = a8;
  *(void *)(v8 + 200) = v14;
  *(unsigned char *)(v8 + 264) = a7;
  *(void *)(v8 + 176) = a5;
  *(void *)(v8 + 184) = a6;
  *(void *)(v8 + 160) = a3;
  *(void *)(v8 + 168) = a4;
  *(void *)(v8 + 152) = a2;
  uint64_t v10 = type metadata accessor for UUID();
  *(void *)(v8 + 208) = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  *(void *)(v8 + 216) = v11;
  *(void *)(v8 + 224) = *(void *)(v11 + 64);
  *(void *)(v8 + 232) = swift_task_alloc();
  sub_10000588C(&qword_10164DBB0);
  *(void *)(v8 + 240) = swift_task_alloc();
  *(void *)(v8 + 248) = swift_task_alloc();
  return _swift_task_switch(sub_1003D0ECC, a3, 0);
}

uint64_t sub_1003D0ECC()
{
  *(void *)(v0 + 256) = *(void *)(*(void *)(v0 + 160) + 144);
  swift_bridgeObjectRetain();
  return _swift_task_switch(sub_1003D0F40, 0, 0);
}

void sub_1003D0F40()
{
  int64_t v1 = 0;
  uint64_t v35 = (long long *)(v0 + 56);
  unint64_t v36 = (long long *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 256);
  uint64_t v3 = *(void *)(v2 + 64);
  uint64_t v30 = v2 + 64;
  uint64_t v33 = *(void *)(v0 + 216);
  uint64_t v34 = v2;
  uint64_t v4 = -1;
  uint64_t v5 = -1 << *(unsigned char *)(v34 + 32);
  if (-v5 < 64) {
    uint64_t v4 = ~(-1 << -(char)v5);
  }
  unint64_t v6 = v4 & v3;
  int64_t v31 = (unint64_t)(63 - v5) >> 6;
  uint64_t v32 = *(void *)(v0 + 224) + 7;
  while (1)
  {
    if (v6)
    {
      uint64_t v37 = (v6 - 1) & v6;
      int64_t v38 = v1;
      unint64_t v8 = __clz(__rbit64(v6)) | (v1 << 6);
      goto LABEL_23;
    }
    int64_t v9 = v1 + 1;
    if (__OFADD__(v1, 1))
    {
      __break(1u);
LABEL_35:
      __break(1u);
      return;
    }
    if (v9 >= v31) {
      goto LABEL_31;
    }
    unint64_t v10 = *(void *)(v30 + 8 * v9);
    int64_t v11 = v1 + 1;
    if (!v10)
    {
      int64_t v11 = v1 + 2;
      if (v1 + 2 >= v31) {
        goto LABEL_31;
      }
      unint64_t v10 = *(void *)(v30 + 8 * v11);
      if (!v10)
      {
        int64_t v11 = v1 + 3;
        if (v1 + 3 >= v31) {
          goto LABEL_31;
        }
        unint64_t v10 = *(void *)(v30 + 8 * v11);
        if (!v10)
        {
          int64_t v11 = v1 + 4;
          if (v1 + 4 >= v31) {
            goto LABEL_31;
          }
          unint64_t v10 = *(void *)(v30 + 8 * v11);
          if (!v10) {
            break;
          }
        }
      }
    }
LABEL_22:
    uint64_t v37 = (v10 - 1) & v10;
    int64_t v38 = v11;
    unint64_t v8 = __clz(__rbit64(v10)) + (v11 << 6);
LABEL_23:
    uint64_t v13 = *(void *)(v0 + 248);
    uint64_t v44 = *(void *)(v0 + 240);
    uint64_t v14 = *(void *)(v0 + 232);
    uint64_t v15 = *(void *)(v0 + 208);
    char v41 = *(unsigned char *)(v0 + 264);
    uint64_t v16 = *(void *)(v0 + 184);
    uint64_t v42 = *(void *)(v0 + 192);
    uint64_t v43 = *(void *)(v0 + 200);
    uint64_t v39 = *(void *)(v0 + 168);
    uint64_t v40 = *(void *)(v0 + 176);
    sub_10001D010(*(void *)(v34 + 56) + 40 * v8, (uint64_t)v36);
    uint64_t v17 = type metadata accessor for TaskPriority();
    uint64_t v18 = *(void *)(v17 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56))(v13, 1, 1, v17);
    sub_10001CEB0(v36, (uint64_t)v35);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16))(v14, v16, v15);
    unint64_t v19 = (*(unsigned __int8 *)(v33 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
    uint64_t v20 = (char *)swift_allocObject();
    *((void *)v20 + 2) = 0;
    *((void *)v20 + 3) = 0;
    sub_10001CEB0(v35, (uint64_t)(v20 + 32));
    *((void *)v20 + 9) = v39;
    *((void *)v20 + 10) = v40;
    (*(void (**)(char *, uint64_t, uint64_t))(v33 + 32))(&v20[v19], v14, v15);
    uint64_t v21 = &v20[(v32 + v19) & 0xFFFFFFFFFFFFFFF8];
    char *v21 = v41;
    *((void *)v21 + 1) = v42;
    *((void *)v21 + 2) = v43;
    sub_1003D4B50(v13, v44);
    LODWORD(v13) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v44, 1, v17);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v22 = *(void *)(v0 + 240);
    if (v13 == 1)
    {
      sub_10001DAB4(*(void *)(v0 + 240), &qword_10164DBB0);
    }
    else
    {
      TaskPriority.rawValue.getter();
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v22, v17);
    }
    unint64_t v6 = v37;
    int64_t v1 = v38;
    if (*((void *)v20 + 2))
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v23 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v25 = v24;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v23 = 0;
      uint64_t v25 = 0;
    }
    uint64_t v26 = **(void **)(v0 + 152);
    uint64_t v27 = swift_allocObject();
    *(void *)(v27 + 16) = &unk_1016432C8;
    *(void *)(v27 + 24) = v20;
    uint64_t v28 = v25 | v23;
    if (v25 | v23)
    {
      uint64_t v28 = v0 + 96;
      *(void *)(v0 + 96) = 0;
      *(void *)(v0 + 104) = 0;
      *(void *)(v0 + 112) = v23;
      *(void *)(v0 + 120) = v25;
    }
    uint64_t v7 = *(void *)(v0 + 248);
    *(void *)(v0 + 128) = 1;
    *(void *)(v0 + 136) = v28;
    *(void *)(v0 + 144) = v26;
    swift_task_create();
    swift_release();
    sub_10001DAB4(v7, &qword_10164DBB0);
  }
  uint64_t v12 = v1 + 5;
  if (v1 + 5 < v31)
  {
    unint64_t v10 = *(void *)(v30 + 8 * v12);
    if (!v10)
    {
      while (1)
      {
        int64_t v11 = v12 + 1;
        if (__OFADD__(v12, 1)) {
          goto LABEL_35;
        }
        if (v11 >= v31) {
          goto LABEL_31;
        }
        unint64_t v10 = *(void *)(v30 + 8 * v11);
        ++v12;
        if (v10) {
          goto LABEL_22;
        }
      }
    }
    int64_t v11 = v1 + 5;
    goto LABEL_22;
  }
LABEL_31:
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v29 = *(void (**)(void))(v0 + 8);
  v29();
}

uint64_t sub_1003D1440(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  *(void *)(v8 + 48) = v10;
  *(void *)(v8 + 56) = v11;
  *(unsigned char *)(v8 + 72) = a8;
  *(void *)(v8 + 32) = a6;
  *(void *)(v8 + 40) = a7;
  *(void *)(v8 + 16) = a4;
  *(void *)(v8 + 24) = a5;
  return _swift_task_switch(sub_1003D1474, 0, 0);
}

uint64_t sub_1003D1474()
{
  int64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  sub_10001CD44(v1, v2);
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 + 8) + **(int **)(v3 + 8));
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1001E0274;
  uint64_t v5 = *(void *)(v0 + 48);
  uint64_t v6 = *(void *)(v0 + 56);
  uint64_t v7 = *(void *)(v0 + 32);
  uint64_t v8 = *(void *)(v0 + 40);
  uint64_t v9 = *(unsigned __int8 *)(v0 + 72);
  uint64_t v10 = *(void *)(v0 + 24);
  return v12(v10, v7, v8, v9, v5, v6, v2, v3);
}

uint64_t sub_1003D1588(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  *(void *)(v8 + 80) = v11;
  *(void *)(v8 + 88) = v12;
  *(_OWORD *)(v8 + 64) = v10;
  *(unsigned char *)(v8 + 113) = a7;
  *(void *)(v8 + 48) = a6;
  *(void *)(v8 + 56) = a8;
  *(unsigned char *)(v8 + 112) = a4;
  *(void *)(v8 + 32) = a3;
  *(void *)(v8 + 40) = a5;
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  return _swift_task_switch(sub_1003D15CC, 0, 0);
}

uint64_t sub_1003D15CC()
{
  uint64_t v1 = *(void *)(v0 + 72);
  char v2 = *(unsigned char *)(v0 + 113);
  uint64_t v4 = *(void *)(v0 + 40);
  uint64_t v3 = *(void *)(v0 + 48);
  char v5 = *(unsigned char *)(v0 + 112);
  uint64_t v6 = *(void *)(v0 + 32);
  long long v11 = *(_OWORD *)(v0 + 16);
  long long v12 = *(_OWORD *)(v0 + 56);
  uint64_t v7 = swift_task_alloc();
  *(void *)(v0 + 96) = v7;
  long long v8 = *(_OWORD *)(v0 + 80);
  *(_OWORD *)(v7 + 16) = v11;
  *(void *)(v7 + 32) = v6;
  *(unsigned char *)(v7 + 40) = v5;
  *(void *)(v7 + 48) = v4;
  *(void *)(v7 + 56) = v3;
  *(unsigned char *)(v7 + 64) = v2;
  *(_OWORD *)(v7 + 72) = v12;
  *(void *)(v7 + 88) = v1;
  *(_OWORD *)(v7 + 96) = v8;
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 104) = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_1003D170C;
  return withTaskGroup<A, B>(of:returning:isolation:body:)(v9);
}

uint64_t sub_1003D170C()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_1003D0344, 0, 0);
}

uint64_t sub_1003D1824(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 232) = v16;
  *(_OWORD *)(v8 + 216) = v15;
  *(_OWORD *)(v8 + 200) = v14;
  *(unsigned char *)(v8 + 289) = v13;
  *(void *)(v8 + 184) = a7;
  *(void *)(v8 + 192) = a8;
  *(unsigned char *)(v8 + 288) = a6;
  *(void *)(v8 + 168) = a4;
  *(void *)(v8 + 176) = a5;
  *(void *)(v8 + 152) = a2;
  *(void *)(v8 + 160) = a3;
  uint64_t v10 = *(void *)(type metadata accessor for MessagingMessageContext() - 8);
  *(void *)(v8 + 240) = v10;
  *(void *)(v8 + 248) = *(void *)(v10 + 64);
  *(void *)(v8 + 256) = swift_task_alloc();
  sub_10000588C(&qword_10164DBB0);
  *(void *)(v8 + 264) = swift_task_alloc();
  *(void *)(v8 + 272) = swift_task_alloc();
  return _swift_task_switch(sub_1003D195C, a3, 0);
}

uint64_t sub_1003D195C()
{
  *(void *)(v0 + 280) = *(void *)(*(void *)(v0 + 160) + 144);
  swift_bridgeObjectRetain();
  return _swift_task_switch(sub_1003D19D0, 0, 0);
}

void sub_1003D19D0()
{
  int64_t v1 = 0;
  uint64_t v34 = (long long *)(v0 + 56);
  uint64_t v35 = (long long *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 280);
  uint64_t v3 = *(void *)(v2 + 64);
  uint64_t v30 = v2 + 64;
  uint64_t v32 = *(void *)(v0 + 240);
  uint64_t v33 = v2;
  uint64_t v4 = -1;
  uint64_t v5 = -1 << *(unsigned char *)(v33 + 32);
  if (-v5 < 64) {
    uint64_t v4 = ~(-1 << -(char)v5);
  }
  unint64_t v6 = v4 & v3;
  int64_t v31 = (unint64_t)(63 - v5) >> 6;
  while (1)
  {
    if (v6)
    {
      uint64_t v36 = (v6 - 1) & v6;
      int64_t v37 = v1;
      unint64_t v8 = __clz(__rbit64(v6)) | (v1 << 6);
      goto LABEL_23;
    }
    int64_t v9 = v1 + 1;
    if (__OFADD__(v1, 1))
    {
      __break(1u);
LABEL_35:
      __break(1u);
      return;
    }
    if (v9 >= v31) {
      goto LABEL_31;
    }
    unint64_t v10 = *(void *)(v30 + 8 * v9);
    int64_t v11 = v1 + 1;
    if (!v10)
    {
      int64_t v11 = v1 + 2;
      if (v1 + 2 >= v31) {
        goto LABEL_31;
      }
      unint64_t v10 = *(void *)(v30 + 8 * v11);
      if (!v10)
      {
        int64_t v11 = v1 + 3;
        if (v1 + 3 >= v31) {
          goto LABEL_31;
        }
        unint64_t v10 = *(void *)(v30 + 8 * v11);
        if (!v10)
        {
          int64_t v11 = v1 + 4;
          if (v1 + 4 >= v31) {
            goto LABEL_31;
          }
          unint64_t v10 = *(void *)(v30 + 8 * v11);
          if (!v10) {
            break;
          }
        }
      }
    }
LABEL_22:
    uint64_t v36 = (v10 - 1) & v10;
    int64_t v37 = v11;
    unint64_t v8 = __clz(__rbit64(v10)) + (v11 << 6);
LABEL_23:
    uint64_t v13 = *(void *)(v0 + 272);
    uint64_t v47 = *(void *)(v0 + 264);
    uint64_t v14 = *(void *)(v0 + 256);
    uint64_t v38 = v14;
    uint64_t v15 = *(void *)(v0 + 232);
    unint64_t v45 = *(void *)(v0 + 216);
    uint64_t v46 = *(void *)(v0 + 224);
    uint64_t v16 = *(void *)(v0 + 192);
    uint64_t v43 = *(void *)(v0 + 200);
    uint64_t v44 = *(void *)(v0 + 208);
    char v42 = *(unsigned char *)(v0 + 289);
    uint64_t v17 = *(void *)(v0 + 176);
    uint64_t v41 = *(void *)(v0 + 184);
    char v40 = *(unsigned char *)(v0 + 288);
    uint64_t v39 = *(void *)(v0 + 168);
    sub_10001D010(*(void *)(v33 + 56) + 40 * v8, (uint64_t)v35);
    uint64_t v18 = type metadata accessor for TaskPriority();
    uint64_t v19 = *(void *)(v18 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v13, 1, 1, v18);
    sub_10001CEB0(v35, (uint64_t)v34);
    sub_1003D56D0(v15, v14, (uint64_t (*)(void))type metadata accessor for MessagingMessageContext);
    unint64_t v20 = (*(unsigned __int8 *)(v32 + 80) + 152) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80);
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = 0;
    *(void *)(v21 + 24) = 0;
    sub_10001CEB0(v34, v21 + 32);
    *(void *)(v21 + 72) = v39;
    *(void *)(v21 + 80) = v17;
    *(unsigned char *)(v21 + 88) = v40;
    *(void *)(v21 + 96) = v41;
    *(void *)(v21 + 104) = v16;
    *(unsigned char *)(v21 + 112) = v42;
    *(void *)(v21 + 120) = v43;
    *(void *)(v21 + 128) = v44;
    *(void *)(v21 + 136) = v45;
    *(void *)(v21 + 144) = v46;
    sub_1003D592C(v38, v21 + v20, (uint64_t (*)(void))type metadata accessor for MessagingMessageContext);
    sub_1003D4B50(v13, v47);
    LODWORD(v13) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v47, 1, v18);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000361E0(v44, v45);
    swift_bridgeObjectRetain();
    uint64_t v22 = *(void *)(v0 + 264);
    if (v13 == 1)
    {
      sub_10001DAB4(*(void *)(v0 + 264), &qword_10164DBB0);
    }
    else
    {
      TaskPriority.rawValue.getter();
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v22, v18);
    }
    unint64_t v6 = v36;
    int64_t v1 = v37;
    if (*(void *)(v21 + 16))
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v23 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v25 = v24;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v23 = 0;
      uint64_t v25 = 0;
    }
    uint64_t v26 = **(void **)(v0 + 152);
    uint64_t v27 = swift_allocObject();
    *(void *)(v27 + 16) = &unk_101643290;
    *(void *)(v27 + 24) = v21;
    uint64_t v28 = v25 | v23;
    if (v25 | v23)
    {
      uint64_t v28 = v0 + 96;
      *(void *)(v0 + 96) = 0;
      *(void *)(v0 + 104) = 0;
      *(void *)(v0 + 112) = v23;
      *(void *)(v0 + 120) = v25;
    }
    uint64_t v7 = *(void *)(v0 + 272);
    *(void *)(v0 + 128) = 1;
    *(void *)(v0 + 136) = v28;
    *(void *)(v0 + 144) = v26;
    swift_task_create();
    swift_release();
    sub_10001DAB4(v7, &qword_10164DBB0);
  }
  uint64_t v12 = v1 + 5;
  if (v1 + 5 < v31)
  {
    unint64_t v10 = *(void *)(v30 + 8 * v12);
    if (!v10)
    {
      while (1)
      {
        int64_t v11 = v12 + 1;
        if (__OFADD__(v12, 1)) {
          goto LABEL_35;
        }
        if (v11 >= v31) {
          goto LABEL_31;
        }
        unint64_t v10 = *(void *)(v30 + 8 * v11);
        ++v12;
        if (v10) {
          goto LABEL_22;
        }
      }
    }
    int64_t v11 = v1 + 5;
    goto LABEL_22;
  }
LABEL_31:
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v29 = *(void (**)(void))(v0 + 8);
  v29();
}

uint64_t sub_1003D1EF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8)
{
  *(void *)(v8 + 80) = v15;
  *(void *)(v8 + 88) = v16;
  *(void *)(v8 + 64) = v13;
  *(void *)(v8 + 72) = v14;
  *(unsigned char *)(v8 + 105) = v11;
  *(void *)(v8 + 48) = v10;
  *(void *)(v8 + 56) = v12;
  *(unsigned char *)(v8 + 104) = a7;
  *(void *)(v8 + 32) = a6;
  *(void *)(v8 + 40) = a8;
  *(void *)(v8 + 16) = a4;
  *(void *)(v8 + 24) = a5;
  return _swift_task_switch(sub_1003D1F40, 0, 0);
}

void sub_1003D1F40()
{
  int64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = v1[4];
  sub_10001CD44(v1, v1[3]);
  uint64_t v4 = *(void *)(v2 + 16) + **(int **)(v2 + 16);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 96) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1003D2070;
  __asm { BRAA            X9, X16 }
}

uint64_t sub_1003D2070()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  int64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1003D2164(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return _swift_task_switch(sub_1003D2184, 0, 0);
}

uint64_t sub_1003D2184()
{
  uint64_t v1 = swift_task_alloc();
  *(void *)(v0 + 32) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 16);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1003D2268;
  return withTaskGroup<A, B>(of:returning:isolation:body:)(v2);
}

uint64_t sub_1003D2268()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_1003D0344, 0, 0);
}

uint64_t sub_1003D2380(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[20] = a3;
  v4[21] = a4;
  v4[19] = a2;
  sub_10000588C(&qword_10164DBB0);
  v4[22] = swift_task_alloc();
  v4[23] = swift_task_alloc();
  return _swift_task_switch(sub_1003D242C, a3, 0);
}

uint64_t sub_1003D242C()
{
  *(void *)(v0 + 192) = *(void *)(*(void *)(v0 + 160) + 144);
  swift_bridgeObjectRetain();
  return _swift_task_switch(sub_1003D24A0, 0, 0);
}

void sub_1003D24A0()
{
  int64_t v1 = 0;
  uint64_t v32 = (long long *)(v0 + 56);
  uint64_t v33 = (long long *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 192);
  uint64_t v3 = *(void *)(v2 + 64);
  uint64_t v29 = v2 + 64;
  uint64_t v31 = v2;
  uint64_t v4 = -1;
  uint64_t v5 = -1 << *(unsigned char *)(v31 + 32);
  if (-v5 < 64) {
    uint64_t v4 = ~(-1 << -(char)v5);
  }
  unint64_t v6 = v4 & v3;
  int64_t v30 = (unint64_t)(63 - v5) >> 6;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      uint64_t v34 = (v6 - 1) & v6;
      int64_t v9 = v1;
      unint64_t v10 = v8 | (v1 << 6);
      goto LABEL_23;
    }
    int64_t v11 = v1 + 1;
    if (__OFADD__(v1, 1))
    {
      __break(1u);
LABEL_35:
      __break(1u);
      return;
    }
    if (v11 >= v30) {
      goto LABEL_31;
    }
    unint64_t v12 = *(void *)(v29 + 8 * v11);
    int64_t v13 = v1 + 1;
    if (!v12)
    {
      int64_t v13 = v1 + 2;
      if (v1 + 2 >= v30) {
        goto LABEL_31;
      }
      unint64_t v12 = *(void *)(v29 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v1 + 3;
        if (v1 + 3 >= v30) {
          goto LABEL_31;
        }
        unint64_t v12 = *(void *)(v29 + 8 * v13);
        if (!v12)
        {
          int64_t v13 = v1 + 4;
          if (v1 + 4 >= v30) {
            goto LABEL_31;
          }
          unint64_t v12 = *(void *)(v29 + 8 * v13);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_22:
    uint64_t v34 = (v12 - 1) & v12;
    int64_t v9 = v13;
    unint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
LABEL_23:
    uint64_t v16 = *(void *)(v0 + 176);
    uint64_t v15 = *(void *)(v0 + 184);
    uint64_t v17 = *(void *)(v0 + 168);
    sub_10001D010(*(void *)(v31 + 56) + 40 * v10, (uint64_t)v33);
    uint64_t v18 = type metadata accessor for TaskPriority();
    uint64_t v19 = *(void *)(v18 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v15, 1, 1, v18);
    sub_10001CEB0(v33, (uint64_t)v32);
    unint64_t v20 = (void *)swift_allocObject();
    v20[2] = 0;
    v20[3] = 0;
    sub_10001CEB0(v32, (uint64_t)(v20 + 4));
    v20[9] = v17;
    sub_1003D4B50(v15, v16);
    LODWORD(v15) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v16, 1, v18);
    swift_bridgeObjectRetain();
    uint64_t v21 = *(void *)(v0 + 176);
    if (v15 == 1)
    {
      sub_10001DAB4(*(void *)(v0 + 176), &qword_10164DBB0);
    }
    else
    {
      TaskPriority.rawValue.getter();
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v21, v18);
    }
    int64_t v1 = v9;
    unint64_t v6 = v34;
    if (v20[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v22 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v24 = v23;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v22 = 0;
      uint64_t v24 = 0;
    }
    uint64_t v25 = **(void **)(v0 + 152);
    uint64_t v26 = swift_allocObject();
    *(void *)(v26 + 16) = &unk_101643258;
    *(void *)(v26 + 24) = v20;
    uint64_t v27 = v24 | v22;
    if (v24 | v22)
    {
      uint64_t v27 = v0 + 96;
      *(void *)(v0 + 96) = 0;
      *(void *)(v0 + 104) = 0;
      *(void *)(v0 + 112) = v22;
      *(void *)(v0 + 120) = v24;
    }
    uint64_t v7 = *(void *)(v0 + 184);
    *(void *)(v0 + 128) = 1;
    *(void *)(v0 + 136) = v27;
    *(void *)(v0 + 144) = v25;
    swift_task_create();
    swift_release();
    sub_10001DAB4(v7, &qword_10164DBB0);
  }
  uint64_t v14 = v1 + 5;
  if (v1 + 5 < v30)
  {
    unint64_t v12 = *(void *)(v29 + 8 * v14);
    if (!v12)
    {
      while (1)
      {
        int64_t v13 = v14 + 1;
        if (__OFADD__(v14, 1)) {
          goto LABEL_35;
        }
        if (v13 >= v30) {
          goto LABEL_31;
        }
        unint64_t v12 = *(void *)(v29 + 8 * v13);
        ++v14;
        if (v12) {
          goto LABEL_22;
        }
      }
    }
    int64_t v13 = v1 + 5;
    goto LABEL_22;
  }
LABEL_31:
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v28 = *(void (**)(void))(v0 + 8);
  v28();
}

uint64_t sub_1003D28D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return _swift_task_switch(sub_1003D28F8, 0, 0);
}

uint64_t sub_1003D28F8()
{
  int64_t v1 = (void *)v0[2];
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  sub_10001CD44(v1, v2);
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 + 24) + **(int **)(v3 + 24));
  uint64_t v4 = (void *)swift_task_alloc();
  v0[4] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1003D2A00;
  uint64_t v5 = v0[3];
  return v7(v5, v2, v3);
}

uint64_t sub_1003D2A00()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  int64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1003D2AF4(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return _swift_task_switch(sub_1003D2B14, 0, 0);
}

uint64_t sub_1003D2B14()
{
  uint64_t v1 = swift_task_alloc();
  *(void *)(v0 + 32) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 16);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1003D2BF8;
  return withTaskGroup<A, B>(of:returning:isolation:body:)(v2);
}

uint64_t sub_1003D2BF8()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_1003D6A88, 0, 0);
}

uint64_t sub_1003D2D10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[20] = a3;
  v4[21] = a4;
  v4[19] = a2;
  sub_10000588C(&qword_10164DBB0);
  v4[22] = swift_task_alloc();
  v4[23] = swift_task_alloc();
  return _swift_task_switch(sub_1003D2DBC, a3, 0);
}

uint64_t sub_1003D2DBC()
{
  *(void *)(v0 + 192) = *(void *)(*(void *)(v0 + 160) + 144);
  swift_bridgeObjectRetain();
  return _swift_task_switch(sub_1003D2E30, 0, 0);
}

void sub_1003D2E30()
{
  int64_t v1 = 0;
  uint64_t v32 = (long long *)(v0 + 56);
  uint64_t v33 = (long long *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 192);
  uint64_t v3 = *(void *)(v2 + 64);
  uint64_t v29 = v2 + 64;
  uint64_t v31 = v2;
  uint64_t v4 = -1;
  uint64_t v5 = -1 << *(unsigned char *)(v31 + 32);
  if (-v5 < 64) {
    uint64_t v4 = ~(-1 << -(char)v5);
  }
  unint64_t v6 = v4 & v3;
  int64_t v30 = (unint64_t)(63 - v5) >> 6;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      uint64_t v34 = (v6 - 1) & v6;
      int64_t v9 = v1;
      unint64_t v10 = v8 | (v1 << 6);
      goto LABEL_23;
    }
    int64_t v11 = v1 + 1;
    if (__OFADD__(v1, 1))
    {
      __break(1u);
LABEL_35:
      __break(1u);
      return;
    }
    if (v11 >= v30) {
      goto LABEL_31;
    }
    unint64_t v12 = *(void *)(v29 + 8 * v11);
    int64_t v13 = v1 + 1;
    if (!v12)
    {
      int64_t v13 = v1 + 2;
      if (v1 + 2 >= v30) {
        goto LABEL_31;
      }
      unint64_t v12 = *(void *)(v29 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v1 + 3;
        if (v1 + 3 >= v30) {
          goto LABEL_31;
        }
        unint64_t v12 = *(void *)(v29 + 8 * v13);
        if (!v12)
        {
          int64_t v13 = v1 + 4;
          if (v1 + 4 >= v30) {
            goto LABEL_31;
          }
          unint64_t v12 = *(void *)(v29 + 8 * v13);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_22:
    uint64_t v34 = (v12 - 1) & v12;
    int64_t v9 = v13;
    unint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
LABEL_23:
    uint64_t v16 = *(void *)(v0 + 176);
    uint64_t v15 = *(void *)(v0 + 184);
    uint64_t v17 = *(void *)(v0 + 168);
    sub_10001D010(*(void *)(v31 + 56) + 40 * v10, (uint64_t)v33);
    uint64_t v18 = type metadata accessor for TaskPriority();
    uint64_t v19 = *(void *)(v18 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v15, 1, 1, v18);
    sub_10001CEB0(v33, (uint64_t)v32);
    unint64_t v20 = (void *)swift_allocObject();
    v20[2] = 0;
    v20[3] = 0;
    sub_10001CEB0(v32, (uint64_t)(v20 + 4));
    v20[9] = v17;
    sub_1003D4B50(v15, v16);
    LODWORD(v15) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v16, 1, v18);
    swift_bridgeObjectRetain();
    uint64_t v21 = *(void *)(v0 + 176);
    if (v15 == 1)
    {
      sub_10001DAB4(*(void *)(v0 + 176), &qword_10164DBB0);
    }
    else
    {
      TaskPriority.rawValue.getter();
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v21, v18);
    }
    int64_t v1 = v9;
    unint64_t v6 = v34;
    if (v20[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v22 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v24 = v23;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v22 = 0;
      uint64_t v24 = 0;
    }
    uint64_t v25 = **(void **)(v0 + 152);
    uint64_t v26 = swift_allocObject();
    *(void *)(v26 + 16) = &unk_101643220;
    *(void *)(v26 + 24) = v20;
    uint64_t v27 = v24 | v22;
    if (v24 | v22)
    {
      uint64_t v27 = v0 + 96;
      *(void *)(v0 + 96) = 0;
      *(void *)(v0 + 104) = 0;
      *(void *)(v0 + 112) = v22;
      *(void *)(v0 + 120) = v24;
    }
    uint64_t v7 = *(void *)(v0 + 184);
    *(void *)(v0 + 128) = 1;
    *(void *)(v0 + 136) = v27;
    *(void *)(v0 + 144) = v25;
    swift_task_create();
    swift_release();
    sub_10001DAB4(v7, &qword_10164DBB0);
  }
  uint64_t v14 = v1 + 5;
  if (v1 + 5 < v30)
  {
    unint64_t v12 = *(void *)(v29 + 8 * v14);
    if (!v12)
    {
      while (1)
      {
        int64_t v13 = v14 + 1;
        if (__OFADD__(v14, 1)) {
          goto LABEL_35;
        }
        if (v13 >= v30) {
          goto LABEL_31;
        }
        unint64_t v12 = *(void *)(v29 + 8 * v13);
        ++v14;
        if (v12) {
          goto LABEL_22;
        }
      }
    }
    int64_t v13 = v1 + 5;
    goto LABEL_22;
  }
LABEL_31:
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v28 = *(void (**)(void))(v0 + 8);
  v28();
}

uint64_t sub_1003D3268(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return _swift_task_switch(sub_1003D3288, 0, 0);
}

uint64_t sub_1003D3288()
{
  int64_t v1 = (void *)v0[2];
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  sub_10001CD44(v1, v2);
  uint64_t v4 = swift_bridgeObjectRetain();
  uint64_t v5 = sub_101158FF0(v4);
  v0[4] = v5;
  swift_bridgeObjectRelease();
  unint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 + 32) + **(int **)(v3 + 32));
  unint64_t v6 = (void *)swift_task_alloc();
  v0[5] = v6;
  *unint64_t v6 = v0;
  v6[1] = sub_1003D33B4;
  return v8(v5, v2, v3);
}

uint64_t sub_1003D33B4()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  int64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1003D34C4(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 40) = a5;
  *(void *)(v6 + 48) = a6;
  *(void *)(v6 + 24) = a2;
  *(void *)(v6 + 32) = a4;
  *(unsigned char *)(v6 + 72) = a3;
  *(void *)(v6 + 16) = a1;
  return _swift_task_switch(sub_1003D34F0, 0, 0);
}

uint64_t sub_1003D34F0()
{
  uint64_t v1 = *(void *)(v0 + 32);
  char v2 = *(unsigned char *)(v0 + 72);
  uint64_t v3 = swift_task_alloc();
  *(void *)(v0 + 56) = v3;
  long long v4 = *(_OWORD *)(v0 + 40);
  *(_OWORD *)(v3 + 16) = *(_OWORD *)(v0 + 16);
  *(unsigned char *)(v3 + 32) = v2;
  *(void *)(v3 + 40) = v1;
  *(_OWORD *)(v3 + 48) = v4;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v0 + 64) = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_1003D35F4;
  return withTaskGroup<A, B>(of:returning:isolation:body:)(v5);
}

uint64_t sub_1003D35F4()
{
  swift_task_dealloc();
  swift_task_dealloc();
  return _swift_task_switch(sub_1003D0344, 0, 0);
}

uint64_t sub_1003D370C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 184) = a7;
  *(void *)(v8 + 192) = a8;
  *(unsigned char *)(v8 + 248) = a5;
  *(void *)(v8 + 168) = a4;
  *(void *)(v8 + 176) = a6;
  *(void *)(v8 + 152) = a2;
  *(void *)(v8 + 160) = a3;
  uint64_t v10 = *(void *)(type metadata accessor for BeaconSharingSessionContext() - 8);
  *(void *)(v8 + 200) = v10;
  *(void *)(v8 + 208) = *(void *)(v10 + 64);
  *(void *)(v8 + 216) = swift_task_alloc();
  sub_10000588C(&qword_10164DBB0);
  *(void *)(v8 + 224) = swift_task_alloc();
  *(void *)(v8 + 232) = swift_task_alloc();
  return _swift_task_switch(sub_1003D3820, a3, 0);
}

uint64_t sub_1003D3820()
{
  *(void *)(v0 + 240) = *(void *)(*(void *)(v0 + 160) + 144);
  swift_bridgeObjectRetain();
  return _swift_task_switch(sub_1003D3894, 0, 0);
}

void sub_1003D3894()
{
  int64_t v1 = 0;
  uint64_t v35 = (long long *)(v0 + 56);
  uint64_t v36 = (long long *)(v0 + 16);
  uint64_t v29 = (void *)(v0 + 96);
  uint64_t v33 = *(void *)(v0 + 200);
  uint64_t v34 = *(void *)(v0 + 240);
  uint64_t v28 = v34 + 64;
  uint64_t v2 = -1;
  uint64_t v3 = -1 << *(unsigned char *)(v34 + 32);
  if (-v3 < 64) {
    uint64_t v2 = ~(-1 << -(char)v3);
  }
  unint64_t v4 = v2 & *(void *)(v34 + 64);
  int64_t v30 = (unint64_t)(63 - v3) >> 6;
  uint64_t v32 = *(void *)(v0 + 208) + 7;
  while (1)
  {
    if (v4)
    {
      uint64_t v37 = (v4 - 1) & v4;
      int64_t v38 = v1;
      unint64_t v6 = __clz(__rbit64(v4)) | (v1 << 6);
      goto LABEL_23;
    }
    int64_t v7 = v1 + 1;
    if (__OFADD__(v1, 1))
    {
      __break(1u);
LABEL_35:
      __break(1u);
      return;
    }
    if (v7 >= v30) {
      goto LABEL_31;
    }
    unint64_t v8 = *(void *)(v28 + 8 * v7);
    int64_t v9 = v1 + 1;
    if (!v8)
    {
      int64_t v9 = v1 + 2;
      if (v1 + 2 >= v30) {
        goto LABEL_31;
      }
      unint64_t v8 = *(void *)(v28 + 8 * v9);
      if (!v8)
      {
        int64_t v9 = v1 + 3;
        if (v1 + 3 >= v30) {
          goto LABEL_31;
        }
        unint64_t v8 = *(void *)(v28 + 8 * v9);
        if (!v8)
        {
          int64_t v9 = v1 + 4;
          if (v1 + 4 >= v30) {
            goto LABEL_31;
          }
          unint64_t v8 = *(void *)(v28 + 8 * v9);
          if (!v8) {
            break;
          }
        }
      }
    }
LABEL_22:
    uint64_t v37 = (v8 - 1) & v8;
    int64_t v38 = v9;
    unint64_t v6 = __clz(__rbit64(v8)) + (v9 << 6);
LABEL_23:
    uint64_t v11 = *(void *)(v0 + 232);
    uint64_t v12 = *(void *)(v0 + 216);
    uint64_t v42 = *(void *)(v0 + 192);
    uint64_t v43 = *(void *)(v0 + 224);
    char v39 = *(unsigned char *)(v0 + 248);
    uint64_t v13 = *(void *)(v0 + 168);
    uint64_t v40 = *(void *)(v0 + 176);
    uint64_t v41 = *(void *)(v0 + 184);
    sub_10001D010(*(void *)(v34 + 56) + 40 * v6, (uint64_t)v36);
    uint64_t v14 = type metadata accessor for TaskPriority();
    uint64_t v15 = *(void *)(v14 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56))(v11, 1, 1, v14);
    sub_10001CEB0(v36, (uint64_t)v35);
    sub_1003D56D0(v13, v12, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
    unint64_t v16 = (*(unsigned __int8 *)(v33 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v33 + 80);
    unint64_t v17 = (v32 + v16) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = 0;
    *(void *)(v18 + 24) = 0;
    sub_10001CEB0(v35, v18 + 32);
    sub_1003D592C(v12, v18 + v16, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
    unint64_t v19 = v18 + v17;
    *(unsigned char *)unint64_t v19 = v39;
    *(void *)(v19 + 8) = v40;
    *(void *)(v19 + 16) = v41;
    *(void *)(v18 + ((v17 + 31) & 0xFFFFFFFFFFFFFFF8)) = v42;
    sub_1003D4B50(v11, v43);
    LODWORD(v11) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v43, 1, v14);
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v20 = *(void *)(v31 + 224);
    if (v11 == 1)
    {
      sub_10001DAB4(*(void *)(v31 + 224), &qword_10164DBB0);
    }
    else
    {
      TaskPriority.rawValue.getter();
      (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v20, v14);
    }
    unint64_t v4 = v37;
    int64_t v1 = v38;
    uint64_t v0 = v31;
    if (*(void *)(v18 + 16))
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v21 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v23 = v22;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v21 = 0;
      uint64_t v23 = 0;
    }
    uint64_t v24 = **(void **)(v31 + 152);
    uint64_t v25 = swift_allocObject();
    *(void *)(v25 + 16) = &unk_1016431E8;
    *(void *)(v25 + 24) = v18;
    uint64_t v26 = (void *)(v23 | v21);
    if (v23 | v21)
    {
      uint64_t v26 = v29;
      void *v29 = 0;
      v29[1] = 0;
      *(void *)(v31 + 112) = v21;
      *(void *)(v31 + 120) = v23;
    }
    uint64_t v5 = *(void *)(v31 + 232);
    *(void *)(v31 + 128) = 1;
    *(void *)(v31 + 136) = v26;
    *(void *)(v31 + 144) = v24;
    swift_task_create();
    swift_release();
    sub_10001DAB4(v5, &qword_10164DBB0);
  }
  uint64_t v10 = v1 + 5;
  if (v1 + 5 < v30)
  {
    unint64_t v8 = *(void *)(v28 + 8 * v10);
    if (!v8)
    {
      while (1)
      {
        int64_t v9 = v10 + 1;
        if (__OFADD__(v10, 1)) {
          goto LABEL_35;
        }
        if (v9 >= v30) {
          goto LABEL_31;
        }
        unint64_t v8 = *(void *)(v28 + 8 * v9);
        ++v10;
        if (v8) {
          goto LABEL_22;
        }
      }
    }
    int64_t v9 = v1 + 5;
    goto LABEL_22;
  }
LABEL_31:
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v27 = *(void (**)(void))(v0 + 8);
  v27();
}

uint64_t sub_1003D3D84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 40) = a8;
  *(void *)(v8 + 48) = v10;
  *(void *)(v8 + 24) = a5;
  *(void *)(v8 + 32) = a7;
  *(unsigned char *)(v8 + 64) = a6;
  *(void *)(v8 + 16) = a4;
  return _swift_task_switch(sub_1003D3DB8, 0, 0);
}

uint64_t sub_1003D3DB8()
{
  int64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  sub_10001CD44(v1, v2);
  uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 + 40)
                                                                                              + **(int **)(v3 + 40));
  unint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v0 + 56) = v4;
  *unint64_t v4 = v0;
  v4[1] = sub_1003D3EC8;
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v6 = *(void *)(v0 + 48);
  uint64_t v7 = *(void *)(v0 + 32);
  uint64_t v8 = *(unsigned __int8 *)(v0 + 64);
  uint64_t v9 = *(void *)(v0 + 24);
  return v11(v9, v8, v7, v5, v6, v2, v3);
}

uint64_t sub_1003D3EC8()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  int64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

uint64_t sub_1003D3FBC(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return _swift_task_switch(sub_1003D3FDC, 0, 0);
}

uint64_t sub_1003D3FDC()
{
  uint64_t v1 = swift_task_alloc();
  *(void *)(v0 + 32) = v1;
  *(_OWORD *)(v1 + 16) = *(_OWORD *)(v0 + 16);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 40) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1003D2BF8;
  return withTaskGroup<A, B>(of:returning:isolation:body:)(v2);
}

uint64_t sub_1003D40C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[20] = a3;
  v4[21] = a4;
  v4[19] = a2;
  sub_10000588C(&qword_10164DBB0);
  v4[22] = swift_task_alloc();
  v4[23] = swift_task_alloc();
  return _swift_task_switch(sub_1003D416C, a3, 0);
}

uint64_t sub_1003D416C()
{
  *(void *)(v0 + 192) = *(void *)(*(void *)(v0 + 160) + 144);
  swift_bridgeObjectRetain();
  return _swift_task_switch(sub_1003D41E0, 0, 0);
}

void sub_1003D41E0()
{
  int64_t v1 = 0;
  uint64_t v32 = (long long *)(v0 + 56);
  uint64_t v33 = (long long *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 192);
  uint64_t v3 = *(void *)(v2 + 64);
  uint64_t v29 = v2 + 64;
  uint64_t v31 = v2;
  uint64_t v4 = -1;
  uint64_t v5 = -1 << *(unsigned char *)(v31 + 32);
  if (-v5 < 64) {
    uint64_t v4 = ~(-1 << -(char)v5);
  }
  unint64_t v6 = v4 & v3;
  int64_t v30 = (unint64_t)(63 - v5) >> 6;
  while (1)
  {
    if (v6)
    {
      unint64_t v8 = __clz(__rbit64(v6));
      uint64_t v34 = (v6 - 1) & v6;
      int64_t v9 = v1;
      unint64_t v10 = v8 | (v1 << 6);
      goto LABEL_23;
    }
    int64_t v11 = v1 + 1;
    if (__OFADD__(v1, 1))
    {
      __break(1u);
LABEL_35:
      __break(1u);
      return;
    }
    if (v11 >= v30) {
      goto LABEL_31;
    }
    unint64_t v12 = *(void *)(v29 + 8 * v11);
    int64_t v13 = v1 + 1;
    if (!v12)
    {
      int64_t v13 = v1 + 2;
      if (v1 + 2 >= v30) {
        goto LABEL_31;
      }
      unint64_t v12 = *(void *)(v29 + 8 * v13);
      if (!v12)
      {
        int64_t v13 = v1 + 3;
        if (v1 + 3 >= v30) {
          goto LABEL_31;
        }
        unint64_t v12 = *(void *)(v29 + 8 * v13);
        if (!v12)
        {
          int64_t v13 = v1 + 4;
          if (v1 + 4 >= v30) {
            goto LABEL_31;
          }
          unint64_t v12 = *(void *)(v29 + 8 * v13);
          if (!v12) {
            break;
          }
        }
      }
    }
LABEL_22:
    uint64_t v34 = (v12 - 1) & v12;
    int64_t v9 = v13;
    unint64_t v10 = __clz(__rbit64(v12)) + (v13 << 6);
LABEL_23:
    uint64_t v16 = *(void *)(v0 + 176);
    uint64_t v15 = *(void *)(v0 + 184);
    uint64_t v17 = *(void *)(v0 + 168);
    sub_10001D010(*(void *)(v31 + 56) + 40 * v10, (uint64_t)v33);
    uint64_t v18 = type metadata accessor for TaskPriority();
    uint64_t v19 = *(void *)(v18 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v15, 1, 1, v18);
    sub_10001CEB0(v33, (uint64_t)v32);
    uint64_t v20 = (void *)swift_allocObject();
    v20[2] = 0;
    v20[3] = 0;
    sub_10001CEB0(v32, (uint64_t)(v20 + 4));
    v20[9] = v17;
    sub_1003D4B50(v15, v16);
    LODWORD(v15) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v16, 1, v18);
    swift_retain();
    uint64_t v21 = *(void *)(v0 + 176);
    if (v15 == 1)
    {
      sub_10001DAB4(*(void *)(v0 + 176), &qword_10164DBB0);
    }
    else
    {
      TaskPriority.rawValue.getter();
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v21, v18);
    }
    int64_t v1 = v9;
    unint64_t v6 = v34;
    if (v20[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v22 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v24 = v23;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v22 = 0;
      uint64_t v24 = 0;
    }
    uint64_t v25 = **(void **)(v0 + 152);
    uint64_t v26 = swift_allocObject();
    *(void *)(v26 + 16) = &unk_1016431B8;
    *(void *)(v26 + 24) = v20;
    uint64_t v27 = v24 | v22;
    if (v24 | v22)
    {
      uint64_t v27 = v0 + 96;
      *(void *)(v0 + 96) = 0;
      *(void *)(v0 + 104) = 0;
      *(void *)(v0 + 112) = v22;
      *(void *)(v0 + 120) = v24;
    }
    uint64_t v7 = *(void *)(v0 + 184);
    *(void *)(v0 + 128) = 1;
    *(void *)(v0 + 136) = v27;
    *(void *)(v0 + 144) = v25;
    swift_task_create();
    swift_release();
    sub_10001DAB4(v7, &qword_10164DBB0);
  }
  uint64_t v14 = v1 + 5;
  if (v1 + 5 < v30)
  {
    unint64_t v12 = *(void *)(v29 + 8 * v14);
    if (!v12)
    {
      while (1)
      {
        int64_t v13 = v14 + 1;
        if (__OFADD__(v14, 1)) {
          goto LABEL_35;
        }
        if (v13 >= v30) {
          goto LABEL_31;
        }
        unint64_t v12 = *(void *)(v29 + 8 * v13);
        ++v14;
        if (v12) {
          goto LABEL_22;
        }
      }
    }
    int64_t v13 = v1 + 5;
    goto LABEL_22;
  }
LABEL_31:
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v28 = *(void (**)(void))(v0 + 8);
  v28();
}

uint64_t sub_1003D4618(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return _swift_task_switch(sub_1003D4638, 0, 0);
}

uint64_t sub_1003D4638()
{
  int64_t v1 = (void *)v0[2];
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  sub_10001CD44(v1, v2);
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 + 48) + **(int **)(v3 + 48));
  uint64_t v4 = (void *)swift_task_alloc();
  v0[4] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1003D6A84;
  uint64_t v5 = v0[3];
  return v7(v5, v2, v3);
}

uint64_t sub_1003D4740()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170DE20);
  sub_100010324(v0, (uint64_t)qword_10170DE20);
  return Logger.init(subsystem:category:)();
}

void sub_1003D47C4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, void *a5)
{
}

uint64_t sub_1003D47D4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  return sub_1003D0358(a1, a2, a3, a4, a5, a6, v6);
}

uint64_t sub_1003D47DC(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, uint64_t a11)
{
  return sub_1003D0514(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, v12);
}

uint64_t sub_1003D480C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003D4844(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8)
{
  return sub_1004E7DD0(a1, a2, a3, a4, a5, a6, a7, a8, *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, uint64_t, uint64_t))(v8 + 16));
}

uint64_t sub_1003D486C(uint64_t a1)
{
  return sub_1003D06E4(a1, v1);
}

uint64_t sub_1003D48A4(uint64_t a1)
{
  return sub_1003D06E4(a1, v1);
}

uint64_t sub_1003D48DC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1003D0788(a1, a2, a3, a4, a5, v5);
}

uint64_t sub_1003D48E4(uint64_t a1)
{
  return sub_1003D0938(a1, v1);
}

uint64_t sub_1003D48EC()
{
  return sub_100CCDBFC();
}

uint64_t sub_1003D4910()
{
  return sub_1003D5400((void (*)(void))&_swift_release);
}

uint64_t sub_1003D4928()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 16);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_100033F68;
  *(_OWORD *)(v2 + 16) = v3;
  return _swift_task_switch(sub_1003D3FDC, 0, 0);
}

uint64_t sub_1003D49D4(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_100033F68;
  return sub_1003D40C0(a1, a2, v7, v6);
}

uint64_t sub_1003D4A88()
{
  return sub_1003D55C8((void (*)(void))&_swift_release);
}

uint64_t sub_1003D4AA0()
{
  uint64_t v2 = v0 + 32;
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[2] = v2;
  v4[3] = v3;
  v4[1] = sub_100033F68;
  return _swift_task_switch(sub_1003D4638, 0, 0);
}

uint64_t sub_1003D4B50(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_10164DBB0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003D4BB8()
{
  uint64_t v1 = *(void *)(type metadata accessor for BeaconSharingSessionContext() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_release();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
LABEL_4:
    uint64_t v6 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v0 + v3, v6);
    goto LABEL_6;
  }
  if (EnumCaseMultiPayload != 1)
  {
    if (EnumCaseMultiPayload) {
      goto LABEL_6;
    }
    goto LABEL_4;
  }
  swift_bridgeObjectRelease();
LABEL_6:
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, ((((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_1003D4CFC()
{
  uint64_t v2 = *(void *)(type metadata accessor for BeaconSharingSessionContext() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v6 = v0 + v3;
  char v7 = *(unsigned char *)(v0 + v4);
  uint64_t v8 = *(void *)(v0 + v4 + 8);
  uint64_t v9 = *(void *)(v0 + v4 + 16);
  uint64_t v10 = *(void *)(v0 + ((v4 + 31) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v11 = swift_task_alloc();
  *(void *)(v1 + 16) = v11;
  *(void *)uint64_t v11 = v1;
  *(void *)(v11 + 40) = v9;
  *(void *)(v11 + 48) = v10;
  *(unsigned char *)(v11 + 72) = v7;
  *(void *)(v11 + 24) = v6;
  *(void *)(v11 + 32) = v8;
  *(void *)(v11 + 8) = sub_100033F68;
  *(void *)(v11 + 16) = v5;
  return _swift_task_switch(sub_1003D34F0, 0, 0);
}

uint64_t sub_1003D4E3C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = *(void *)(v2 + 24);
  uint64_t v8 = *(void *)(v2 + 40);
  uint64_t v9 = *(void *)(v2 + 48);
  uint64_t v10 = *(void *)(v2 + 56);
  char v11 = *(unsigned char *)(v2 + 32);
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v12;
  void *v12 = v3;
  v12[1] = sub_100033F68;
  return sub_1003D370C(a1, a2, v6, v7, v11, v8, v9, v10);
}

uint64_t sub_1003D4F1C()
{
  uint64_t v1 = *(void *)(type metadata accessor for BeaconSharingSessionContext() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 72) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_unknownObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 32);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
LABEL_4:
    uint64_t v6 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v0 + v3, v6);
    goto LABEL_6;
  }
  if (EnumCaseMultiPayload != 1)
  {
    if (EnumCaseMultiPayload) {
      goto LABEL_6;
    }
    goto LABEL_4;
  }
  swift_bridgeObjectRelease();
LABEL_6:
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, ((((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_1003D5068()
{
  uint64_t v2 = *(void *)(type metadata accessor for BeaconSharingSessionContext() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 72) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = v0 + 32;
  uint64_t v6 = v0 + v3;
  char v7 = *(unsigned char *)(v0 + v4);
  uint64_t v8 = *(void *)(v0 + v4 + 8);
  uint64_t v9 = *(void *)(v0 + v4 + 16);
  uint64_t v10 = *(void *)(v0 + ((v4 + 31) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v11 = swift_task_alloc();
  *(void *)(v1 + 16) = v11;
  *(void *)uint64_t v11 = v1;
  *(void *)(v11 + 40) = v9;
  *(void *)(v11 + 48) = v10;
  *(unsigned char *)(v11 + 64) = v7;
  *(void *)(v11 + 24) = v6;
  *(void *)(v11 + 32) = v8;
  *(void *)(v11 + 8) = sub_100033F68;
  *(void *)(v11 + 16) = v5;
  return _swift_task_switch(sub_1003D3DB8, 0, 0);
}

uint64_t sub_1003D51A8()
{
  return sub_1003D5400((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_1003D51C0()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 16);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_100033F68;
  *(_OWORD *)(v2 + 16) = v3;
  return _swift_task_switch(sub_1003D2B14, 0, 0);
}

uint64_t sub_1003D526C(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_100033F68;
  return sub_1003D2D10(a1, a2, v7, v6);
}

uint64_t sub_1003D5320()
{
  return sub_1003D55C8((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_1003D5338()
{
  uint64_t v2 = v0 + 32;
  uint64_t v3 = *(void *)(v0 + 72);
  unint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *unint64_t v4 = v1;
  v4[2] = v2;
  v4[3] = v3;
  v4[1] = sub_100033F68;
  return _swift_task_switch(sub_1003D3288, 0, 0);
}

uint64_t sub_1003D53E8()
{
  return sub_1003D5400((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_1003D5400(void (*a1)(void))
{
  swift_release();
  a1(*(void *)(v1 + 24));

  return _swift_deallocObject(v1, 32, 7);
}

uint64_t sub_1003D5450()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 16);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_10001D2E4;
  *(_OWORD *)(v2 + 16) = v3;
  return _swift_task_switch(sub_1003D2184, 0, 0);
}

uint64_t sub_1003D54FC(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_100033F68;
  return sub_1003D2380(a1, a2, v7, v6);
}

uint64_t sub_1003D55B0()
{
  return sub_1003D55C8((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_1003D55C8(void (*a1)(void))
{
  swift_unknownObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1 + 32);
  a1(*(void *)(v1 + 72));

  return _swift_deallocObject(v1, 80, 7);
}

uint64_t sub_1003D5620()
{
  uint64_t v2 = v0 + 32;
  uint64_t v3 = *(void *)(v0 + 72);
  unint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *unint64_t v4 = v1;
  v4[2] = v2;
  v4[3] = v3;
  v4[1] = sub_100033F68;
  return _swift_task_switch(sub_1003D28F8, 0, 0);
}

uint64_t sub_1003D56D0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1003D5738()
{
  uint64_t v1 = type metadata accessor for MessagingMessageContext();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 104) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001CFB8(*(void *)(v0 + 80), *(void *)(v0 + 88));
  swift_bridgeObjectRelease();
  uint64_t v5 = v0 + v3;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  int v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v0 + v3, 1, v6);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  if (!v8) {
    v9(v0 + v3, v6);
  }
  v9(v5 + *(int *)(v1 + 20), v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = v5 + *(int *)(v1 + 44);
  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_1003D592C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1003D5994()
{
  uint64_t v2 = *(void *)(type metadata accessor for MessagingMessageContext() - 8);
  long long v15 = *(_OWORD *)(v0 + 16);
  uint64_t v14 = *(void *)(v0 + 32);
  char v3 = *(unsigned char *)(v0 + 40);
  uint64_t v4 = *(void *)(v0 + 48);
  uint64_t v5 = *(void *)(v0 + 56);
  char v6 = *(unsigned char *)(v0 + 64);
  uint64_t v7 = *(void *)(v0 + 72);
  uint64_t v8 = *(void *)(v0 + 80);
  uint64_t v10 = *(void *)(v0 + 88);
  uint64_t v9 = *(void *)(v0 + 96);
  uint64_t v11 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 104) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v12 = swift_task_alloc();
  *(void *)(v1 + 16) = v12;
  *(void *)uint64_t v12 = v1;
  *(void *)(v12 + 8) = sub_100033F68;
  *(void *)(v12 + 80) = v9;
  *(void *)(v12 + 88) = v11;
  *(void *)(v12 + 64) = v8;
  *(void *)(v12 + 72) = v10;
  *(unsigned char *)(v12 + 113) = v6;
  *(void *)(v12 + 48) = v5;
  *(void *)(v12 + 56) = v7;
  *(unsigned char *)(v12 + 112) = v3;
  *(void *)(v12 + 32) = v14;
  *(void *)(v12 + 40) = v4;
  *(_OWORD *)(v12 + 16) = v15;
  return _swift_task_switch(sub_1003D15CC, 0, 0);
}

uint64_t sub_1003D5ADC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(v2 + 32);
  uint64_t v8 = *(void *)(v2 + 48);
  uint64_t v9 = *(void *)(v2 + 56);
  char v10 = *(unsigned char *)(v2 + 40);
  uint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v11;
  *uint64_t v11 = v3;
  v11[1] = sub_100033F68;
  return sub_1003D1824(a1, a2, v5, v6, v7, v10, v8, v9);
}

uint64_t sub_1003D5BF4()
{
  uint64_t v1 = type metadata accessor for MessagingMessageContext();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 152) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  swift_unknownObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 32);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001CFB8(*(void *)(v0 + 128), *(void *)(v0 + 136));
  swift_bridgeObjectRelease();
  uint64_t v5 = v0 + v3;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  int v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v0 + v3, 1, v6);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  if (!v8) {
    v9(v0 + v3, v6);
  }
  v9(v5 + *(int *)(v1 + 20), v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = v5 + *(int *)(v1 + 44);
  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_1003D5DF0()
{
  uint64_t v2 = *(void *)(type metadata accessor for MessagingMessageContext() - 8);
  uint64_t v3 = v0 + 32;
  char v4 = *(unsigned char *)(v0 + 88);
  long long v12 = *(_OWORD *)(v0 + 96);
  long long v13 = *(_OWORD *)(v0 + 72);
  char v5 = *(unsigned char *)(v0 + 112);
  long long v11 = *(_OWORD *)(v0 + 120);
  uint64_t v6 = *(void *)(v0 + 136);
  uint64_t v7 = *(void *)(v0 + 144);
  uint64_t v8 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 152) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v9 = swift_task_alloc();
  *(void *)(v1 + 16) = v9;
  *(void *)uint64_t v9 = v1;
  *(void *)(v9 + 80) = v7;
  *(void *)(v9 + 88) = v8;
  *(void *)(v9 + 72) = v6;
  *(_OWORD *)(v9 + 56) = v11;
  *(unsigned char *)(v9 + 105) = v5;
  *(_OWORD *)(v9 + 40) = v12;
  *(unsigned char *)(v9 + 104) = v4;
  *(_OWORD *)(v9 + 24) = v13;
  *(void *)(v9 + 8) = sub_100033F68;
  *(void *)(v9 + 16) = v3;
  return _swift_task_switch(sub_1003D1F40, 0, 0);
}

uint64_t sub_1003D5F34()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 24;
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1003D6028()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  long long v12 = *(_OWORD *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 32);
  uint64_t v5 = v0 + v3;
  unint64_t v6 = (char *)(v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  char v7 = *v6;
  uint64_t v8 = *((void *)v6 + 1);
  uint64_t v9 = *((void *)v6 + 2);
  uint64_t v10 = swift_task_alloc();
  *(void *)(v1 + 16) = v10;
  *(void *)uint64_t v10 = v1;
  *(void *)(v10 + 8) = sub_100033F68;
  *(void *)(v10 + 48) = v8;
  *(void *)(v10 + 56) = v9;
  *(unsigned char *)(v10 + 80) = v7;
  *(void *)(v10 + 32) = v4;
  *(void *)(v10 + 40) = v5;
  *(_OWORD *)(v10 + 16) = v12;
  return _swift_task_switch(sub_1003D0B84, 0, 0);
}

uint64_t sub_1003D616C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = *(void *)(v2 + 24);
  uint64_t v8 = *(void *)(v2 + 32);
  uint64_t v9 = *(void *)(v2 + 40);
  uint64_t v10 = *(void *)(v2 + 56);
  char v11 = *(unsigned char *)(v2 + 48);
  long long v12 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v12;
  void *v12 = v3;
  v12[1] = sub_100033F68;
  return sub_1003D0DA8(a1, a2, v6, v7, v8, v9, v11, v10);
}

uint64_t sub_1003D625C()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 88) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 24;
  swift_unknownObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 32);
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1003D6358()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 88) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = v0 + 32;
  uint64_t v5 = *(void *)(v0 + 72);
  uint64_t v6 = *(void *)(v0 + 80);
  uint64_t v7 = v0 + v3;
  uint64_t v8 = (char *)(v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  char v9 = *v8;
  uint64_t v10 = *((void *)v8 + 1);
  uint64_t v11 = *((void *)v8 + 2);
  uint64_t v12 = swift_task_alloc();
  *(void *)(v1 + 16) = v12;
  *(void *)uint64_t v12 = v1;
  *(void *)(v12 + 48) = v10;
  *(void *)(v12 + 56) = v11;
  *(unsigned char *)(v12 + 72) = v9;
  *(void *)(v12 + 32) = v6;
  *(void *)(v12 + 40) = v7;
  *(void *)(v12 + 16) = v4;
  *(void *)(v12 + 24) = v5;
  *(void *)(v12 + 8) = sub_100033F68;
  return _swift_task_switch(sub_1003D1474, 0, 0);
}

uint64_t sub_1003D649C(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10001D2E4;
  uint64_t v6 = (uint64_t (*)(uint64_t, int *))((char *)&dword_1016505D0 + dword_1016505D0);
  return v6(a1, v4);
}

void sub_1003D6554(uint64_t a1, int a2, void *a3)
{
  uint64_t v27 = a3;
  int v28 = a2;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v27 - v9;
  uint64_t v11 = sub_10000588C(&qword_10163CB58);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000588C(&qword_101660720);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  sub_100164580(a1, (uint64_t)v13);
  swift_endAccess();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_10001DAB4((uint64_t)v13, &qword_10163CB58);
    if (qword_101636AB0 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_100010324(v18, (uint64_t)qword_10170DE08);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v8, a1, v4);
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      v30[0] = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 136446210;
      sub_1003D6A24((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v29 = sub_1008FA0F0(v22, v23, (uint64_t *)v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Untracked identifier: %{public}s", v21, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v17, v13, v14);
    if (v28)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v10, a1, v4);
      CheckedContinuation.resume(returning:)();
    }
    else
    {
      if (v27)
      {
        id v24 = v27;
      }
      else
      {
        id v25 = objc_allocWithZone((Class)NSError);
        NSString v26 = String._bridgeToObjectiveC()();
        id v24 = [v25 initWithDomain:v26 code:0 userInfo:0];
      }
      v30[0] = v24;
      swift_errorRetain();
      CheckedContinuation.resume(throwing:)();
    }
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  }
}

uint64_t sub_1003D6A24(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *sub_1003D6A8C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v3);
  uint64_t v4 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000584C();
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v5);
  static DispatchQoS.unspecified.getter();
  uint64_t v12 = _swiftEmptyArrayStorage;
  sub_1003D76EC((unint64_t *)&qword_101638CC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000588C((uint64_t *)&unk_1016376F0);
  sub_100062734((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v1[2] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v1[4] = 0;
  sub_10000588C(&qword_101648980);
  swift_allocObject();
  uint64_t v9 = PassthroughSubject.init()();
  v1[5] = v9;
  swift_allocObject();
  v1[6] = PassthroughSubject.init()();
  v1[7] = &_swiftEmptySetSingleton;
  v1[3] = a1;
  uint64_t v12 = (void *)v9;
  sub_100062734(&qword_10163C7C0, &qword_101648980);
  v1[8] = Publisher.eraseToAnyPublisher()();
  return v1;
}

uint64_t sub_1003D6D80(uint64_t a1)
{
  uint64_t v3 = sub_10000588C(&qword_10163C6C8);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  uint64_t v29 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = sub_10000588C(&qword_101643410);
  uint64_t v32 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  id v25 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_101643418);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v33 = v9;
  uint64_t v34 = v10;
  __chkstk_darwin(v9);
  uint64_t v27 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1[4] = a1;
  swift_retain();
  swift_release();
  uint64_t v12 = (void *)v1[6];
  int v28 = v1;
  id v35 = v12;
  swift_retain();
  static OS_dispatch_queue.SchedulerTimeType.Stride.milliseconds(_:)();
  uint64_t v13 = (void *)v1[2];
  id v36 = v13;
  uint64_t v14 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v5, 1, 1, v14);
  id v26 = v13;
  sub_10000588C(&qword_101648980);
  sub_10000584C();
  sub_100062734(&qword_10163C7C0, &qword_101648980);
  sub_1003D76EC((unint64_t *)&qword_10166C020, (void (*)(uint64_t))sub_10000584C);
  Publisher.debounce<A>(for:scheduler:options:)();
  sub_1003D7734((uint64_t)v5);

  uint64_t v15 = *(void (**)(char *, uint64_t))(v29 + 8);
  uint64_t v16 = v31;
  v15(v7, v31);
  swift_release();
  static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)();
  id v35 = v26;
  sub_100062734(&qword_101643420, &qword_101643410);
  uint64_t v17 = v27;
  uint64_t v18 = v30;
  uint64_t v19 = v25;
  Publisher.throttle<A>(for:scheduler:latest:)();
  v15(v7, v16);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v19, v18);
  uint64_t v20 = swift_allocObject();
  uint64_t v21 = v28;
  swift_weakInit();
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = sub_1003D77CC;
  *(void *)(v22 + 24) = v20;
  sub_100062734(&qword_101643428, &qword_101643418);
  uint64_t v23 = v33;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v34 + 8))(v17, v23);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  id v35 = *(id *)(v21[3] + 24);
  swift_allocObject();
  swift_weakInit();
  swift_retain();
  sub_10000588C(&qword_101643430);
  sub_100062734(&qword_101643438, &qword_101643430);
  Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1003D7364()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_1003D7428();
    return swift_release();
  }
  return result;
}

uint64_t sub_1003D73BC()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_retain();
    PassthroughSubject.send(_:)();
    swift_release();
    return swift_release();
  }
  return result;
}

void sub_1003D7428()
{
  if (*(void *)(v0 + 32))
  {
    swift_retain();
    sub_1004EAC64();
    swift_release();
  }
}

uint64_t sub_1003D7644()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t sub_1003D7694()
{
  sub_1003D7644();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CloudKitIDSUpdateManager()
{
  return self;
}

uint64_t sub_1003D76EC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1003D7734(uint64_t a1)
{
  uint64_t v2 = sub_10000588C(&qword_10163C6C8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1003D7794()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1003D77CC()
{
  return sub_1003D7364();
}

uint64_t sub_1003D77D4()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1003D780C()
{
  return sub_1003D73BC();
}

uint64_t sub_1003D7814(void *a1)
{
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryEncoding.container()();
  sub_1000BD078((uint64_t)v3, v4);
  sub_100135A44();
  dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
  if (!v1)
  {
    sub_1000BD078((uint64_t)v3, v4);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1000BD078((uint64_t)v3, v4);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1000BD078((uint64_t)v3, v4);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1000BD078((uint64_t)v3, v4);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1000BD078((uint64_t)v3, v4);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1000BD078((uint64_t)v3, v4);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v3);
}

__n128 sub_1003D7A5C@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1003D8580(a1, v7);
  if (!v2)
  {
    long long v5 = v7[5];
    *(_OWORD *)(a2 + 64) = v7[4];
    *(_OWORD *)(a2 + 80) = v5;
    *(_OWORD *)(a2 + 96) = v7[6];
    long long v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
    __n128 result = (__n128)v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(__n128 *)(a2 + 48) = result;
  }
  return result;
}

uint64_t sub_1003D7AB0(void *a1)
{
  return sub_1003D7814(a1);
}

uint64_t sub_1003D7AC8@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, void *a9@<X8>, uint64_t a10, unint64_t a11, uint64_t a12, unint64_t a13, uint64_t a14, unint64_t a15)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v15) = HIDWORD(result) - result;
      if (__OFSUB__(HIDWORD(result), result))
      {
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        __break(1u);
LABEL_57:
        __break(1u);
LABEL_58:
        __break(1u);
LABEL_59:
        __break(1u);
LABEL_60:
        __break(1u);
LABEL_61:
        __break(1u);
LABEL_62:
        __break(1u);
LABEL_63:
        __break(1u);
LABEL_64:
        __break(1u);
        JUMPOUT(0x1003D7D94);
      }
      uint64_t v15 = (int)v15;
LABEL_6:
      if (v15 != 114) {
        goto LABEL_58;
      }
      switch(a4 >> 62)
      {
        case 1uLL:
          LODWORD(v19) = HIDWORD(a3) - a3;
          if (__OFSUB__(HIDWORD(a3), a3)) {
            goto LABEL_46;
          }
          uint64_t v19 = (int)v19;
LABEL_12:
          if (v19 != 32) {
            goto LABEL_59;
          }
          switch(a8 >> 62)
          {
            case 1uLL:
              LODWORD(v22) = HIDWORD(a7) - a7;
              if (__OFSUB__(HIDWORD(a7), a7)) {
                goto LABEL_48;
              }
              uint64_t v22 = (int)v22;
LABEL_18:
              if (v22 != 100) {
                goto LABEL_60;
              }
              switch(a11 >> 62)
              {
                case 1uLL:
                  LODWORD(v25) = HIDWORD(a10) - a10;
                  if (__OFSUB__(HIDWORD(a10), a10)) {
                    goto LABEL_50;
                  }
                  uint64_t v25 = (int)v25;
LABEL_24:
                  if (v25 != 1) {
                    goto LABEL_61;
                  }
                  switch(a6 >> 62)
                  {
                    case 1uLL:
                      LODWORD(v28) = HIDWORD(a5) - a5;
                      if (__OFSUB__(HIDWORD(a5), a5)) {
                        goto LABEL_52;
                      }
                      uint64_t v28 = (int)v28;
LABEL_30:
                      if (v28 != 60) {
                        goto LABEL_62;
                      }
                      switch(a13 >> 62)
                      {
                        case 1uLL:
                          LODWORD(v31) = HIDWORD(a12) - a12;
                          if (__OFSUB__(HIDWORD(a12), a12)) {
                            goto LABEL_54;
                          }
                          uint64_t v31 = (int)v31;
LABEL_36:
                          if (v31 != 8) {
                            goto LABEL_63;
                          }
                          switch(a15 >> 62)
                          {
                            case 1uLL:
                              LODWORD(v34) = HIDWORD(a14) - a14;
                              if (__OFSUB__(HIDWORD(a14), a14)) {
                                goto LABEL_56;
                              }
                              uint64_t v34 = (int)v34;
LABEL_42:
                              if (v34 != 24) {
                                goto LABEL_64;
                              }
                              *a9 = result;
                              a9[1] = a2;
                              a9[2] = a3;
                              a9[3] = a4;
                              a9[4] = a5;
                              a9[5] = a6;
                              a9[6] = a7;
                              a9[7] = a8;
                              a9[8] = a10;
                              a9[9] = a11;
                              a9[10] = a12;
                              a9[11] = a13;
                              a9[12] = a14;
                              a9[13] = a15;
                              return result;
                            case 2uLL:
                              uint64_t v36 = *(void *)(a14 + 16);
                              uint64_t v35 = *(void *)(a14 + 24);
                              BOOL v18 = __OFSUB__(v35, v36);
                              uint64_t v34 = v35 - v36;
                              if (!v18) {
                                goto LABEL_42;
                              }
                              goto LABEL_57;
                            case 3uLL:
                              goto LABEL_64;
                            default:
                              uint64_t v34 = BYTE6(a15);
                              goto LABEL_42;
                          }
                        case 2uLL:
                          uint64_t v33 = *(void *)(a12 + 16);
                          uint64_t v32 = *(void *)(a12 + 24);
                          BOOL v18 = __OFSUB__(v32, v33);
                          uint64_t v31 = v32 - v33;
                          if (!v18) {
                            goto LABEL_36;
                          }
                          goto LABEL_55;
                        case 3uLL:
                          goto LABEL_63;
                        default:
                          uint64_t v31 = BYTE6(a13);
                          goto LABEL_36;
                      }
                    case 2uLL:
                      uint64_t v30 = *(void *)(a5 + 16);
                      uint64_t v29 = *(void *)(a5 + 24);
                      BOOL v18 = __OFSUB__(v29, v30);
                      uint64_t v28 = v29 - v30;
                      if (!v18) {
                        goto LABEL_30;
                      }
                      goto LABEL_53;
                    case 3uLL:
                      goto LABEL_62;
                    default:
                      uint64_t v28 = BYTE6(a6);
                      goto LABEL_30;
                  }
                case 2uLL:
                  uint64_t v27 = *(void *)(a10 + 16);
                  uint64_t v26 = *(void *)(a10 + 24);
                  BOOL v18 = __OFSUB__(v26, v27);
                  uint64_t v25 = v26 - v27;
                  if (!v18) {
                    goto LABEL_24;
                  }
                  goto LABEL_51;
                case 3uLL:
                  goto LABEL_61;
                default:
                  uint64_t v25 = BYTE6(a11);
                  goto LABEL_24;
              }
            case 2uLL:
              uint64_t v24 = *(void *)(a7 + 16);
              uint64_t v23 = *(void *)(a7 + 24);
              BOOL v18 = __OFSUB__(v23, v24);
              uint64_t v22 = v23 - v24;
              if (!v18) {
                goto LABEL_18;
              }
              goto LABEL_49;
            case 3uLL:
              goto LABEL_60;
            default:
              uint64_t v22 = BYTE6(a8);
              goto LABEL_18;
          }
        case 2uLL:
          uint64_t v21 = *(void *)(a3 + 16);
          uint64_t v20 = *(void *)(a3 + 24);
          BOOL v18 = __OFSUB__(v20, v21);
          uint64_t v19 = v20 - v21;
          if (!v18) {
            goto LABEL_12;
          }
          goto LABEL_47;
        case 3uLL:
          goto LABEL_59;
        default:
          uint64_t v19 = BYTE6(a4);
          goto LABEL_12;
      }
    case 2uLL:
      uint64_t v17 = *(void *)(result + 16);
      uint64_t v16 = *(void *)(result + 24);
      BOOL v18 = __OFSUB__(v16, v17);
      uint64_t v15 = v16 - v17;
      if (!v18) {
        goto LABEL_6;
      }
      goto LABEL_45;
    case 3uLL:
      goto LABEL_58;
    default:
      uint64_t v15 = BYTE6(a2);
      goto LABEL_6;
  }
}

__n128 sub_1003D7E04@<Q0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, unint64_t a11, uint64_t a12, unint64_t a13)
{
  uint64_t v17 = 0;
  switch(a6 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a5), a5)) {
        goto LABEL_23;
      }
      uint64_t v17 = HIDWORD(a5) - (int)a5;
LABEL_6:
      sub_1000361E0(a5, a6);
LABEL_7:
      if (__OFSUB__(60, v17))
      {
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        __break(1u);
LABEL_25:
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
        JUMPOUT(0x1003D8148);
      }
      *(void *)&v50[0] = sub_10085E9A4(60 - v17);
      *((void *)&v50[0] + 1) = v20;
      sub_10072AD40((uint64_t *)v50, 0);
      long long v21 = v50[0];
      Data.append(_:)();
      sub_10001CFB8(v21, *((unint64_t *)&v21 + 1));
      uint64_t v22 = 0;
      switch(a8 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(a7), a7)) {
            goto LABEL_25;
          }
          uint64_t v22 = HIDWORD(a7) - (int)a7;
LABEL_13:
          sub_1000361E0(a7, a8);
LABEL_14:
          if (__OFSUB__(100, v22)) {
            goto LABEL_22;
          }
          *(void *)&v50[0] = sub_10085E9A4(100 - v22);
          *((void *)&v50[0] + 1) = v25;
          sub_10072AD40((uint64_t *)v50, 0);
          long long v26 = v50[0];
          Data.append(_:)();
          sub_10001CFB8(v26, *((unint64_t *)&v26 + 1));
          uint64_t v27 = 0;
          switch(a8 >> 62)
          {
            case 1uLL:
              LODWORD(v27) = HIDWORD(a7) - a7;
              if (__OFSUB__(HIDWORD(a7), a7)) {
                goto LABEL_27;
              }
              uint64_t v27 = (int)v27;
LABEL_20:
              *(void *)&v50[0] = v27;
              sub_1000361E0(a5, a6);
              sub_1000361E0(a7, a8);
              sub_10000D64C();
              uint64_t v31 = FixedWidthInteger.data.getter();
              unint64_t v42 = a2;
              unint64_t v33 = v32;
              uint64_t v41 = a3;
              uint64_t v34 = Data.trimmed.getter();
              uint64_t v35 = a1;
              unint64_t v37 = v36;
              sub_10001CFB8(v31, v33);
              sub_10001CFB8(a7, a8);
              sub_10001CFB8(a5, a6);
              sub_10001CFB8(a7, a8);
              sub_10001CFB8(a5, a6);
              sub_1003D7AC8(v35, v42, v41, a4, a5, a6, a7, a8, v50, v34, v37, a10, a11, a12, a13);
              long long v38 = v50[5];
              *(_OWORD *)(a9 + 64) = v50[4];
              *(_OWORD *)(a9 + 80) = v38;
              *(_OWORD *)(a9 + 96) = v50[6];
              long long v39 = v50[1];
              *(_OWORD *)a9 = v50[0];
              *(_OWORD *)(a9 + 16) = v39;
              __n128 result = (__n128)v50[3];
              *(_OWORD *)(a9 + 32) = v50[2];
              *(__n128 *)(a9 + 48) = result;
              return result;
            case 2uLL:
              uint64_t v29 = *(void *)(a7 + 16);
              uint64_t v28 = *(void *)(a7 + 24);
              BOOL v30 = __OFSUB__(v28, v29);
              uint64_t v27 = v28 - v29;
              if (!v30) {
                goto LABEL_20;
              }
              goto LABEL_28;
            case 3uLL:
              goto LABEL_20;
            default:
              uint64_t v27 = BYTE6(a8);
              goto LABEL_20;
          }
        case 2uLL:
          uint64_t v24 = *(void *)(a7 + 16);
          uint64_t v23 = *(void *)(a7 + 24);
          uint64_t v22 = v23 - v24;
          if (!__OFSUB__(v23, v24)) {
            goto LABEL_13;
          }
          goto LABEL_26;
        case 3uLL:
          goto LABEL_14;
        default:
          uint64_t v22 = BYTE6(a8);
          goto LABEL_14;
      }
    case 2uLL:
      uint64_t v19 = *(void *)(a5 + 16);
      uint64_t v18 = *(void *)(a5 + 24);
      uint64_t v17 = v18 - v19;
      if (!__OFSUB__(v18, v19)) {
        goto LABEL_6;
      }
      goto LABEL_24;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v17 = BYTE6(a6);
      goto LABEL_7;
  }
}

uint64_t destroy for AirPodsSWFinalizePairingCommandPayload(uint64_t *a1)
{
  sub_10001CFB8(*a1, a1[1]);
  sub_10001CFB8(a1[2], a1[3]);
  sub_10001CFB8(a1[4], a1[5]);
  sub_10001CFB8(a1[6], a1[7]);
  sub_10001CFB8(a1[8], a1[9]);
  sub_10001CFB8(a1[10], a1[11]);
  uint64_t v2 = a1[12];
  unint64_t v3 = a1[13];

  return sub_10001CFB8(v2, v3);
}

uint64_t *initializeWithCopy for AirPodsSWFinalizePairingCommandPayload(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_1000361E0(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  uint64_t v6 = a2[2];
  unint64_t v7 = a2[3];
  sub_1000361E0(v6, v7);
  a1[2] = v6;
  a1[3] = v7;
  uint64_t v8 = a2[4];
  unint64_t v9 = a2[5];
  sub_1000361E0(v8, v9);
  a1[4] = v8;
  a1[5] = v9;
  uint64_t v10 = a2[6];
  unint64_t v11 = a2[7];
  sub_1000361E0(v10, v11);
  a1[6] = v10;
  a1[7] = v11;
  uint64_t v12 = a2[8];
  unint64_t v13 = a2[9];
  sub_1000361E0(v12, v13);
  a1[8] = v12;
  a1[9] = v13;
  uint64_t v14 = a2[10];
  unint64_t v15 = a2[11];
  sub_1000361E0(v14, v15);
  a1[10] = v14;
  a1[11] = v15;
  uint64_t v17 = a2[12];
  unint64_t v16 = a2[13];
  sub_1000361E0(v17, v16);
  a1[12] = v17;
  a1[13] = v16;
  return a1;
}

uint64_t *assignWithCopy for AirPodsSWFinalizePairingCommandPayload(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_1000361E0(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_10001CFB8(v6, v7);
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  sub_1000361E0(v8, v9);
  uint64_t v10 = a1[2];
  unint64_t v11 = a1[3];
  a1[2] = v8;
  a1[3] = v9;
  sub_10001CFB8(v10, v11);
  uint64_t v12 = a2[4];
  unint64_t v13 = a2[5];
  sub_1000361E0(v12, v13);
  uint64_t v14 = a1[4];
  unint64_t v15 = a1[5];
  a1[4] = v12;
  a1[5] = v13;
  sub_10001CFB8(v14, v15);
  uint64_t v16 = a2[6];
  unint64_t v17 = a2[7];
  sub_1000361E0(v16, v17);
  uint64_t v18 = a1[6];
  unint64_t v19 = a1[7];
  a1[6] = v16;
  a1[7] = v17;
  sub_10001CFB8(v18, v19);
  uint64_t v20 = a2[8];
  unint64_t v21 = a2[9];
  sub_1000361E0(v20, v21);
  uint64_t v22 = a1[8];
  unint64_t v23 = a1[9];
  a1[8] = v20;
  a1[9] = v21;
  sub_10001CFB8(v22, v23);
  uint64_t v24 = a2[10];
  unint64_t v25 = a2[11];
  sub_1000361E0(v24, v25);
  uint64_t v26 = a1[10];
  unint64_t v27 = a1[11];
  a1[10] = v24;
  a1[11] = v25;
  sub_10001CFB8(v26, v27);
  uint64_t v29 = a2[12];
  unint64_t v28 = a2[13];
  sub_1000361E0(v29, v28);
  uint64_t v30 = a1[12];
  unint64_t v31 = a1[13];
  a1[12] = v29;
  a1[13] = v28;
  sub_10001CFB8(v30, v31);
  return a1;
}

uint64_t *assignWithTake for AirPodsSWFinalizePairingCommandPayload(uint64_t *a1, _OWORD *a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_10001CFB8(v4, v5);
  uint64_t v6 = a1[2];
  unint64_t v7 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_10001CFB8(v6, v7);
  uint64_t v8 = a1[4];
  unint64_t v9 = a1[5];
  *((_OWORD *)a1 + 2) = a2[2];
  sub_10001CFB8(v8, v9);
  uint64_t v10 = a1[6];
  unint64_t v11 = a1[7];
  *((_OWORD *)a1 + 3) = a2[3];
  sub_10001CFB8(v10, v11);
  uint64_t v12 = a1[8];
  unint64_t v13 = a1[9];
  *((_OWORD *)a1 + 4) = a2[4];
  sub_10001CFB8(v12, v13);
  uint64_t v14 = a1[10];
  unint64_t v15 = a1[11];
  *((_OWORD *)a1 + 5) = a2[5];
  sub_10001CFB8(v14, v15);
  uint64_t v16 = a1[12];
  unint64_t v17 = a1[13];
  *((_OWORD *)a1 + 6) = a2[6];
  sub_10001CFB8(v16, v17);
  return a1;
}

uint64_t getEnumTagSinglePayload for AirPodsSWFinalizePairingCommandPayload(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 112)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AirPodsSWFinalizePairingCommandPayload(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 13;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 112) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 112) = 0;
    }
    if (a2)
    {
      *(void *)__n128 result = 0;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsSWFinalizePairingCommandPayload()
{
  return &type metadata for AirPodsSWFinalizePairingCommandPayload;
}

unint64_t sub_1003D84FC(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1003D852C();
  unint64_t result = sub_10033BF70();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1003D852C()
{
  unint64_t result = qword_101643440;
  if (!qword_101643440)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101643440);
  }
  return result;
}

uint64_t sub_1003D8580@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryDecoding.container()();
  sub_1000BD078((uint64_t)v37, v38);
  uint64_t v5 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  if (v2)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v37);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  else
  {
    uint64_t v7 = v5;
    unint64_t v8 = v6;
    sub_1000BD078((uint64_t)v37, v38);
    uint64_t v9 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
    unint64_t v40 = v10;
    sub_1000BD078((uint64_t)v37, v38);
    uint64_t v33 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
    unint64_t v34 = v11;
    sub_1000BD078((uint64_t)v37, v38);
    uint64_t v35 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
    unint64_t v36 = v12;
    uint64_t v31 = v35;
    unint64_t v32 = v12;
    sub_1000361E0(v33, v34);
    sub_1000362FC();
    uint64_t v13 = DataProtocol.intValue.getter();
    sub_100435A9C(v13, v33, v34, &v35);
    uint64_t v29 = v35;
    unint64_t v30 = v36;
    sub_1000BD078((uint64_t)v37, v38);
    uint64_t v27 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
    unint64_t v28 = v14;
    sub_1000BD078((uint64_t)v37, v38);
    uint64_t v15 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
    unint64_t v25 = v16;
    uint64_t v26 = v15;
    sub_1000BD078((uint64_t)v37, v38);
    uint64_t v17 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
    unint64_t v19 = v18;
    sub_10001CFB8(v33, v34);
    sub_1003D7AC8(v7, v8, v9, v40, v27, v28, v29, v30, v39, v31, v32, v26, v25, v17, v19);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v37);
    uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
    long long v21 = v39[5];
    long long v22 = v39[6];
    a2[4] = v39[4];
    a2[5] = v21;
    a2[6] = v22;
    long long v23 = v39[1];
    *a2 = v39[0];
    a2[1] = v23;
    long long v24 = v39[3];
    a2[2] = v39[2];
    a2[3] = v24;
  }
  return result;
}

uint64_t sub_1003D8884(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003D8898);
}

uint64_t sub_1003D8898(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    unint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_1003D8958(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1003D896C);
}

uint64_t sub_1003D896C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for SharedBeaconGroup()
{
  uint64_t result = qword_1016434A0;
  if (!qword_1016434A0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1003D8A74()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1003D8A80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)(v8 + 688) = a8;
  *(void *)(v8 + 680) = a7;
  *(void *)(v8 + 672) = a6;
  *(unsigned char *)(v8 + 832) = a5;
  *(void *)(v8 + 664) = a4;
  *(void *)(v8 + 656) = a3;
  *(void *)(v8 + 648) = a2;
  *(void *)(v8 + 640) = a1;
  *(void *)(v8 + 696) = type metadata accessor for BeaconIdentifier();
  *(void *)(v8 + 704) = swift_task_alloc();
  *(void *)(v8 + 712) = swift_task_alloc();
  return _swift_task_switch(sub_1003D8B40, 0, 0);
}

uint64_t sub_1003D8B40()
{
  uint64_t v68 = v0;
  sub_10001D608(*(void *)(v0 + 656), v0 + 456, &qword_1016434E0);
  unint64_t v1 = *(void *)(v0 + 464);
  if (v1 >> 60 == 15)
  {
    if (qword_101636F08 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_100010324(v2, (uint64_t)qword_10170E858);
    unsigned int v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Missing primary root key!", v5, 2u);
      swift_slowDealloc();
    }

    sub_1003DCD74();
    swift_allocError();
    *uint64_t v6 = 3;
    swift_willThrow();
    goto LABEL_26;
  }
  uint64_t v7 = *(void *)(v0 + 680);
  uint64_t v8 = *(void *)(v0 + 672);
  uint64_t v9 = *(void *)(v0 + 648);
  uint64_t v10 = *(void *)(v0 + 456);
  uint64_t v11 = *(void *)(v0 + 472);
  unint64_t v12 = *(void *)(v0 + 480);
  uint64_t v13 = *(void *)(v0 + 488);
  unint64_t v14 = *(void *)(v0 + 496);
  sub_1003DCDC8(*(void *)(v0 + 656), (void (*)(void))sub_1000361E0);
  uint64_t v15 = sub_100A03614(v9, v8, v7);
  *(void *)(v0 + 720) = v15;
  *(void *)(v0 + 728) = v16;
  *(void *)(v0 + 736) = v17;
  unint64_t v18 = v15;
  unint64_t v19 = v17;
  unint64_t v59 = v12;
  uint64_t v60 = v11;
  unint64_t v62 = v14;
  uint64_t v66 = v16;
  if (qword_101636F08 != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  *(void *)(v0 + 744) = sub_100010324(v20, (uint64_t)qword_10170E858);
  unint64_t v21 = v19;
  sub_1003DCE94(v18, v66, v19);
  long long v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v58 = v13;
    uint64_t v24 = v10;
    unint64_t v25 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)unint64_t v25 = 134217984;
    if (v21 >> 60 == 15) {
      unint64_t v26 = 0;
    }
    else {
      unint64_t v26 = v18;
    }
    *(void *)(v0 + 632) = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_1003DCEB0(v18, v66, v21);
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Found keyGenerationHint %llu", v25, 0xCu);
    uint64_t v10 = v24;
    uint64_t v13 = v58;
    swift_slowDealloc();
  }
  else
  {
    sub_1003DCEB0(v18, v66, v21);
  }
  int v27 = *(unsigned __int8 *)(v0 + 832);

  if (v27)
  {
    if (v27 != 1)
    {
      unint64_t v37 = Logger.logObject.getter();
      os_log_type_t v38 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v37, v38))
      {
        long long v39 = (uint8_t *)swift_slowAlloc();
        uint64_t v67 = swift_slowAlloc();
        *(_DWORD *)long long v39 = 136315138;
        *(void *)(v0 + 624) = sub_1008FA0F0(0xD000000000000010, 0x80000001013F28C0, &v67);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "Invalid key sequence %s!", v39, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      uint64_t v32 = *(void *)(v0 + 656);
      sub_1003DCD74();
      swift_allocError();
      char v34 = 1;
      goto LABEL_25;
    }
    sub_10001D608(*(void *)(v0 + 664), v0 + 408, &qword_1016434E0);
    unint64_t v28 = *(void *)(v0 + 416);
    if (v28 >> 60 == 15)
    {
      uint64_t v29 = Logger.logObject.getter();
      os_log_type_t v30 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v29, v30))
      {
        uint64_t v31 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v31 = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, v30, "Missing secondary root key!", v31, 2u);
        swift_slowDealloc();
      }
      uint64_t v32 = *(void *)(v0 + 656);

      sub_1003DCD74();
      swift_allocError();
      char v34 = 4;
LABEL_25:
      *uint64_t v33 = v34;
      swift_willThrow();
      sub_1003DCEB0(v18, v66, v21);
      sub_1003DCDC8(v32, (void (*)(void))sub_10001CFB8);
LABEL_26:
      swift_task_dealloc();
      swift_task_dealloc();
      unint64_t v40 = *(uint64_t (**)(void))(v0 + 8);
      return v40();
    }
    unint64_t v42 = v21;
    unint64_t v64 = *(void *)(v0 + 672);
    uint64_t v43 = *(void *)(v0 + 664);
    uint64_t v44 = *(void *)(v0 + 408);
    uint64_t v45 = *(void *)(v0 + 424);
    unint64_t v46 = *(void *)(v0 + 432);
    uint64_t v47 = *(void *)(v0 + 440);
    unint64_t v61 = *(void *)(v0 + 448);
    sub_1003DCE94(v18, v66, v42);
    sub_1003DCDC8(v43, (void (*)(void))sub_1000361E0);
    sub_1000361E0(v45, v46);
    sub_1000361E0(v44, v28);
    sub_1000361E0(v47, v61);
    sub_1009DC0D4(v45, v46, v44, v28, v47, v61, v18, v66, (uint64_t *)(v0 + 232), v42, v64);
    sub_1003DCDC8(*(void *)(v0 + 664), (void (*)(void))sub_10001CFB8);
    unint64_t v36 = (uint64_t *)(v0 + 232);
  }
  else
  {
    unint64_t v35 = v21;
    unint64_t v36 = (uint64_t *)(v0 + 16);
    unint64_t v63 = *(void *)(v0 + 672);
    sub_1003DCE94(v18, v66, v35);
    sub_1000361E0(v60, v59);
    sub_1000361E0(v10, v1);
    sub_1000361E0(v13, v62);
    sub_1009DC0D4(v60, v59, v10, v1, v13, v62, v18, v66, (uint64_t *)(v0 + 16), v35, v63);
  }
  uint64_t v48 = v36[7];
  *(void *)(v0 + 752) = v48;
  unint64_t v49 = v36[8];
  *(void *)(v0 + 760) = v49;
  uint64_t v50 = v36[6];
  uint64_t v51 = v36[4];
  *(void *)(v0 + 768) = v51;
  unint64_t v52 = v36[5];
  *(void *)(v0 + 776) = v52;
  uint64_t v53 = v36[2];
  *(void *)(v0 + 784) = v53;
  unint64_t v54 = v36[3];
  *(void *)(v0 + 792) = v54;
  uint64_t v55 = *v36;
  unint64_t v56 = v36[1];
  *(void *)(v0 + 800) = v56;
  *(void *)(v0 + 808) = v55;
  *(void *)(v0 + 160) = v55;
  *(void *)(v0 + 168) = v56;
  *(void *)(v0 + 176) = v53;
  *(void *)(v0 + 184) = v54;
  *(void *)(v0 + 192) = v51;
  *(void *)(v0 + 200) = v52;
  *(void *)(v0 + 208) = v50;
  *(void *)(v0 + 216) = v48;
  *(void *)(v0 + 224) = v49;
  sub_100037A38(v55, v56);
  sub_1000361E0(v53, v54);
  sub_1000361E0(v51, v52);
  sub_1000361E0(v48, v49);
  char v65 = (char *)&dword_101650668 + dword_101650668;
  Swift::Int v57 = (void *)swift_task_alloc();
  *(void *)(v0 + 816) = v57;
  *Swift::Int v57 = v0;
  v57[1] = sub_1003D93C8;
  return ((uint64_t (*)(uint64_t, void, void, uint64_t))v65)(v0 + 88, 0, 0, v0 + 592);
}

uint64_t sub_1003D93C8()
{
  *(void *)(*(void *)v1 + 824) = v0;
  swift_task_dealloc();
  return _swift_task_switch(sub_1003D94C8, 0, 0);
}

void sub_1003D94C8()
{
  uint64_t v143 = v0;
  unint64_t v1 = *(void *)(v0 + 104);
  if (v1 >> 60 == 15)
  {
    uint64_t v3 = *(void *)(v0 + 176);
    unint64_t v2 = *(void *)(v0 + 184);
    uint64_t v4 = *(void *)(v0 + 192);
    unint64_t v5 = *(void *)(v0 + 200);
    uint64_t v6 = *(void *)(v0 + 216);
    unint64_t v7 = *(void *)(v0 + 224);
    sub_100037A24(*(void *)(v0 + 160), *(void *)(v0 + 168));
    sub_10001CFB8(v3, v2);
    sub_10001CFB8(v4, v5);
    sub_10001CFB8(v6, v7);
    uint64_t v132 = 0;
    uint64_t v133 = 0;
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    unint64_t v11 = 0xF000000000000000;
    goto LABEL_14;
  }
  unint64_t v12 = *(void *)(v0 + 88);
  if (*(void *)(v0 + 736) >> 60 == 15) {
    unint64_t v13 = 0;
  }
  else {
    unint64_t v13 = *(void *)(v0 + 720);
  }
  BOOL v14 = v12 >= v13;
  unint64_t v15 = v12 - v13;
  if (!v14)
  {
    __break(1u);
    return;
  }
  uint64_t v124 = *(void *)(v0 + 88);
  uint64_t v16 = *(void *)(v0 + 96);
  uint64_t v132 = *(void *)(v0 + 112);
  uint64_t v133 = *(void *)(v0 + 128);
  uint64_t v9 = *(void *)(v0 + 144);
  unint64_t v134 = *(void *)(v0 + 136);
  unint64_t v136 = *(void *)(v0 + 152);
  unint64_t v138 = *(void *)(v0 + 120);
  if (v15 <= *(void *)(v0 + 688))
  {
    uint64_t v127 = *(void *)(v0 + 96);
    uint64_t v33 = *(void *)(v0 + 176);
    unint64_t v32 = *(void *)(v0 + 184);
    uint64_t v34 = *(void *)(v0 + 192);
    unint64_t v35 = *(void *)(v0 + 200);
    uint64_t v36 = *(void *)(v0 + 216);
    unint64_t v37 = *(void *)(v0 + 224);
    sub_100037A24(*(void *)(v0 + 160), *(void *)(v0 + 168));
    sub_10001CFB8(v33, v32);
    sub_10001CFB8(v34, v35);
    sub_10001CFB8(v36, v37);
    uint64_t v38 = *(void *)(v0 + 824);
  }
  else
  {
    uint64_t v129 = *(void *)(v0 + 144);
    uint64_t v17 = *(void *)(v0 + 824);
    uint64_t v18 = *(void *)(v0 + 680);
    uint64_t v19 = *(void *)(v0 + 648);
    char v20 = *(unsigned char *)(v0 + 832);
    sub_10000588C(&qword_10163A7A8);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_101342130;
    *(void *)(inited + 32) = v124;
    *(void *)(inited + 40) = v16;
    *(void *)(inited + 48) = v1;
    sub_1000361E0(v16, v1);
    sub_1009FD71C(v19, v20, inited, v18);
    if (v17)
    {
      unint64_t v105 = *(void *)(v0 + 800);
      uint64_t v107 = *(void *)(v0 + 808);
      uint64_t v109 = *(void *)(v0 + 784);
      unint64_t v111 = *(void *)(v0 + 792);
      uint64_t v113 = *(void *)(v0 + 768);
      unint64_t v115 = *(void *)(v0 + 776);
      uint64_t v118 = *(void *)(v0 + 752);
      unint64_t v121 = *(void *)(v0 + 760);
      unint64_t v22 = *(void *)(v0 + 736);
      uint64_t v23 = *(void *)(v0 + 728);
      uint64_t v24 = *(void *)(v0 + 720);
      uint64_t v25 = *(void *)(v0 + 656);
      swift_setDeallocating();
      swift_arrayDestroy();
      sub_1003DCFF8(v124, v16, v1, v132, v138, v133, v134, v129, v136);
      sub_1003DCDC8(v25, (void (*)(void))sub_10001CFB8);
      sub_1003DCEB0(v24, v23, v22);
      sub_100037A24(v107, v105);
      sub_10001CFB8(v109, v111);
      sub_10001CFB8(v113, v115);
      sub_10001CFB8(v118, v121);
      uint64_t v27 = *(void *)(v0 + 176);
      unint64_t v26 = *(void *)(v0 + 184);
      uint64_t v28 = *(void *)(v0 + 192);
      unint64_t v29 = *(void *)(v0 + 200);
      uint64_t v30 = *(void *)(v0 + 216);
      unint64_t v31 = *(void *)(v0 + 224);
      sub_100037A24(*(void *)(v0 + 160), *(void *)(v0 + 168));
      sub_10001CFB8(v27, v26);
      sub_10001CFB8(v28, v29);
      sub_10001CFB8(v30, v31);
LABEL_24:
      swift_task_dealloc();
      swift_task_dealloc();
      char v65 = *(void (**)(void))(v0 + 8);
      goto LABEL_25;
    }
    uint64_t v127 = v16;
    uint64_t v40 = *(void *)(v0 + 176);
    unint64_t v39 = *(void *)(v0 + 184);
    uint64_t v41 = *(void *)(v0 + 192);
    unint64_t v42 = *(void *)(v0 + 200);
    uint64_t v43 = *(void *)(v0 + 216);
    unint64_t v44 = *(void *)(v0 + 224);
    sub_100037A24(*(void *)(v0 + 160), *(void *)(v0 + 168));
    sub_10001CFB8(v40, v39);
    sub_10001CFB8(v41, v42);
    sub_10001CFB8(v43, v44);
    swift_setDeallocating();
    swift_arrayDestroy();
    uint64_t v38 = 0;
    uint64_t v9 = v129;
  }
  unint64_t v10 = v136;
  unint64_t v8 = v138;
  *(void *)(v0 + 360) = v132;
  *(void *)(v0 + 368) = v138;
  unint64_t v11 = v134;
  *(void *)(v0 + 376) = v133;
  *(void *)(v0 + 384) = v134;
  *(void *)(v0 + 392) = v9;
  *(void *)(v0 + 400) = v136;
  sub_100037A38(v132, v138);
  sub_1000361E0(v133, v134);
  sub_100037A38(v9, v136);
  sub_1003DCFF8(v124, v127, v1, v132, v138, v133, v134, v9, v136);
  if (v138 >> 60 == 15)
  {
LABEL_14:
    unint64_t v137 = v10;
    unint64_t v139 = v8;
    unint64_t v135 = v11;
    uint64_t v130 = v9;
    sub_1003DCECC(*(void *)(v0 + 648), *(void *)(v0 + 704));
    uint64_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.error.getter();
    BOOL v47 = os_log_type_enabled(v45, v46);
    uint64_t v48 = *(void *)(v0 + 704);
    if (v47)
    {
      int v49 = *(unsigned __int8 *)(v0 + 832);
      uint64_t v50 = swift_slowAlloc();
      uint64_t v140 = swift_slowAlloc();
      *(_DWORD *)uint64_t v50 = 136446723;
      if (v49) {
        uint64_t v51 = 0x61646E6F6365732ELL;
      }
      else {
        uint64_t v51 = 0x7972616D6972702ELL;
      }
      if (v49) {
        unint64_t v52 = 0xEA00000000007972;
      }
      else {
        unint64_t v52 = 0xE800000000000000;
      }
      *(void *)(v0 + 568) = sub_1008FA0F0(v51, v52, &v140);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v50 + 12) = 2160;
      *(void *)(v0 + 576) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v50 + 22) = 2081;
      type metadata accessor for UUID();
      sub_1003DD088((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v141 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v142 = v53;
      v54._countAndFlagsBits = 47;
      v54._object = (void *)0xE100000000000000;
      String.append(_:)(v54);
      v55._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v55);
      swift_bridgeObjectRelease();
      *(void *)(v0 + 584) = sub_1008FA0F0(v141, v142, &v140);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1003DCF30(v48);
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Failed to generate %{public}s key for %{private,mask.hash}s", (uint8_t *)v50, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1003DCF30(*(void *)(v0 + 704));
    }

    uint64_t v56 = *(void *)(v0 + 808);
    unint64_t v57 = *(void *)(v0 + 800);
    unint64_t v58 = *(void *)(v0 + 792);
    uint64_t v59 = *(void *)(v0 + 784);
    unint64_t v60 = *(void *)(v0 + 776);
    uint64_t v61 = *(void *)(v0 + 768);
    unint64_t v62 = *(void *)(v0 + 760);
    uint64_t v63 = *(void *)(v0 + 752);
    uint64_t v119 = *(void *)(v0 + 728);
    unint64_t v122 = *(void *)(v0 + 736);
    uint64_t v116 = *(void *)(v0 + 720);
    uint64_t v125 = *(void *)(v0 + 656);
    sub_1003DCD74();
    swift_allocError();
    unsigned char *v64 = 0;
    swift_willThrow();
    sub_100037A24(v56, v57);
    sub_10001CFB8(v59, v58);
    sub_10001CFB8(v61, v60);
    sub_10001CFB8(v63, v62);
    sub_1003DCF8C(v132, v139, v133, v135, v130, v137);
    sub_1003DCEB0(v116, v119, v122);
    sub_1003DCDC8(v125, (void (*)(void))sub_10001CFB8);
    goto LABEL_24;
  }
  sub_100037A38(v132, v138);
  sub_1000361E0(v133, v134);
  sub_100037A38(v9, v136);
  sub_100037A38(v132, v138);
  uint64_t v66 = sub_100A8C640();
  sub_100435A9C(6, v66, v67, &v141);
  uint64_t v126 = v141;
  unint64_t v128 = v142;
  uint64_t v68 = String.utf8Data.getter();
  unint64_t v70 = v69;
  sub_1000361E0(v132, v138);
  uint64_t v71 = sub_100A941DC(v132, v138, v68, v70, 32);
  if (v38)
  {
    sub_10001CFB8(v68, v70);
    sub_100037A24(v132, v138);
    uint64_t v141 = 0;
    unint64_t v142 = 0xE000000000000000;
    _StringGuts.grow(_:)(35);
    unint64_t v74 = v142;
    *(void *)(v0 + 552) = v141;
    *(void *)(v0 + 560) = v74;
    v75._object = (void *)0x80000001013FB8E0;
    v75._countAndFlagsBits = 0xD000000000000021;
    String.append(_:)(v75);
    *(void *)(v0 + 600) = v38;
    sub_10000588C(&qword_101638D40);
    _print_unlocked<A, B>(_:_:)();
    _assertionFailure(_:_:file:line:flags:)();
    return;
  }
  unint64_t v73 = v72;
  uint64_t v131 = v71;
  sub_100037A24(v132, v138);
  sub_100434DF4(v131, v73, &v141);
  sub_10001CFB8(v68, v70);
  uint64_t v76 = *(void *)(v0 + 712);
  uint64_t v77 = *(void *)(v0 + 672);
  uint64_t v78 = *(void *)(v0 + 648);
  uint64_t v79 = v141;
  unint64_t v80 = v142;
  *(unsigned char *)(v0 + 504) = *(unsigned char *)(v0 + 832);
  *(void *)(v0 + 512) = v77;
  *(void *)(v0 + 520) = v126;
  unint64_t v81 = v128;
  *(void *)(v0 + 528) = v128;
  *(void *)(v0 + 536) = v79;
  *(void *)(v0 + 544) = v80;
  sub_1003DCECC(v78, v76);
  sub_1000361E0(v126, v128);
  sub_1000361E0(v79, v80);
  sub_1000361E0(v126, v128);
  unint64_t v120 = v80;
  uint64_t v123 = v79;
  sub_1000361E0(v79, v80);
  uint64_t v82 = Logger.logObject.getter();
  os_log_type_t v83 = static os_log_type_t.debug.getter();
  BOOL v84 = os_log_type_enabled(v82, v83);
  unint64_t v103 = *(void *)(v0 + 800);
  uint64_t v104 = *(void *)(v0 + 808);
  uint64_t v106 = *(void *)(v0 + 784);
  unint64_t v108 = *(void *)(v0 + 792);
  uint64_t v110 = *(void *)(v0 + 768);
  unint64_t v112 = *(void *)(v0 + 776);
  uint64_t v114 = *(void *)(v0 + 752);
  unint64_t v117 = *(void *)(v0 + 760);
  uint64_t v101 = *(void *)(v0 + 728);
  unint64_t v102 = *(void *)(v0 + 736);
  uint64_t v99 = *(void *)(v0 + 712);
  uint64_t v100 = *(void *)(v0 + 720);
  if (v84)
  {
    os_log_type_t type = v83;
    uint64_t v98 = *(void *)(v0 + 656);
    log = v82;
    uint64_t v85 = swift_slowAlloc();
    uint64_t v140 = swift_slowAlloc();
    *(_DWORD *)uint64_t v85 = 136315394;
    sub_1000361E0(v126, v128);
    sub_1000361E0(v79, v120);
    uint64_t v86 = sub_10113D624();
    unint64_t v88 = v87;
    sub_10001CFB8(v126, v128);
    sub_10001CFB8(v79, v120);
    *(void *)(v0 + 608) = sub_1008FA0F0(v86, v88, &v140);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10001CFB8(v126, v128);
    sub_10001CFB8(v79, v120);
    sub_10001CFB8(v126, v128);
    sub_10001CFB8(v79, v120);
    *(_WORD *)(v85 + 12) = 2080;
    type metadata accessor for UUID();
    sub_1003DD088((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v141 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v142 = v89;
    v90._countAndFlagsBits = 47;
    v90._object = (void *)0xE100000000000000;
    String.append(_:)(v90);
    v91._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v91);
    swift_bridgeObjectRelease();
    *(void *)(v0 + 616) = sub_1008FA0F0(v141, v142, &v140);
    unint64_t v81 = v128;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1003DCF30(v99);
    _os_log_impl((void *)&_mh_execute_header, log, type, "managedKey %s for beacon %s", (uint8_t *)v85, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    sub_100037A24(v132, v138);

    sub_100037A24(v132, v138);
    sub_10001CFB8(v133, v134);
    unint64_t v10 = v136;
    sub_100037A24(v9, v136);
    sub_1003DCDC8(v98, (void (*)(void))sub_10001CFB8);
    sub_1003DCEB0(v100, v101, v102);
    sub_100037A24(v132, v138);
    sub_10001CFB8(v133, v134);
  }
  else
  {
    uint64_t v92 = *(void *)(v0 + 656);
    sub_100037A24(v132, v138);

    sub_100037A24(v132, v138);
    sub_10001CFB8(v133, v134);
    sub_100037A24(v9, v136);
    sub_1003DCDC8(v92, (void (*)(void))sub_10001CFB8);
    sub_1003DCF30(v99);
    sub_10001CFB8(v126, v128);
    sub_10001CFB8(v79, v120);
    sub_10001CFB8(v126, v128);
    sub_10001CFB8(v79, v120);
    sub_1003DCEB0(v100, v101, v102);
    sub_100037A24(v132, v138);
    sub_10001CFB8(v133, v134);
  }
  sub_100037A24(v9, v10);
  sub_100037A24(v104, v103);
  sub_10001CFB8(v106, v108);
  sub_10001CFB8(v110, v112);
  sub_10001CFB8(v114, v117);
  uint64_t v93 = *(void *)(v0 + 672);
  char v94 = *(unsigned char *)(v0 + 832);
  uint64_t v95 = *(void *)(v0 + 640);
  swift_task_dealloc();
  swift_task_dealloc();
  *(unsigned char *)uint64_t v95 = v94;
  *(void *)(v95 + 8) = v93;
  *(void *)(v95 + 16) = v126;
  *(void *)(v95 + 24) = v81;
  *(void *)(v95 + 32) = v123;
  *(void *)(v95 + 40) = v120;
  char v65 = *(void (**)(void))(v0 + 8);
LABEL_25:
  v65();
}

uint64_t sub_1003DA28C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  *(void *)(v7 + 720) = a7;
  *(void *)(v7 + 712) = a6;
  *(unsigned char *)(v7 + 973) = a5;
  *(void *)(v7 + 704) = a4;
  *(unsigned char *)(v7 + 972) = a3;
  *(void *)(v7 + 696) = a2;
  *(void *)(v7 + 688) = a1;
  sub_10001D608(a2, v7 + 216, &qword_1016434E0);
  long long v8 = *(_OWORD *)(v7 + 232);
  *(_OWORD *)(v7 + 728) = *(_OWORD *)(v7 + 216);
  *(_OWORD *)(v7 + 744) = v8;
  *(_OWORD *)(v7 + 760) = *(_OWORD *)(v7 + 248);
  *(void *)(v7 + 776) = type metadata accessor for BeaconIdentifier();
  *(void *)(v7 + 784) = swift_task_alloc();
  *(void *)(v7 + 792) = swift_task_alloc();
  uint64_t v9 = type metadata accessor for Connection.TransactionMode();
  *(void *)(v7 + 800) = v9;
  *(void *)(v7 + 808) = *(void *)(v9 - 8);
  *(void *)(v7 + 816) = swift_task_alloc();
  return _swift_task_switch(sub_1003DA3D4, 0, 0);
}

uint64_t sub_1003DA3D4()
{
  uint64_t v53 = v0;
  sub_10001D608(*(void *)(v0 + 696), v0 + 312, &qword_1016434E0);
  unint64_t v1 = *(void *)(v0 + 320);
  if (v1 >> 60 == 15)
  {
    if (qword_101636F08 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_100010324(v2, (uint64_t)qword_10170E858);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      unint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Missing primary root key!", v5, 2u);
      swift_slowDealloc();
    }

    sub_1003DCD74();
    swift_allocError();
    *uint64_t v6 = 3;
    swift_willThrow();
    goto LABEL_29;
  }
  uint64_t v7 = *(void *)(v0 + 312);
  uint64_t v8 = *(void *)(v0 + 328);
  unint64_t v9 = *(void *)(v0 + 336);
  uint64_t v11 = *(void *)(v0 + 344);
  unint64_t v10 = *(void *)(v0 + 352);
  if (!*(unsigned char *)(v0 + 972)) {
    goto LABEL_18;
  }
  if (*(unsigned char *)(v0 + 972) != 1)
  {
    unint64_t v23 = *(void *)(v0 + 768);
    uint64_t v24 = *(void *)(v0 + 760);
    unint64_t v25 = *(void *)(v0 + 752);
    uint64_t v26 = *(void *)(v0 + 744);
    sub_1000361E0(*(void *)(v0 + 728), *(void *)(v0 + 736));
    sub_1000361E0(v26, v25);
    sub_1000361E0(v24, v23);
    if (qword_101636F08 == -1)
    {
LABEL_21:
      uint64_t v27 = type metadata accessor for Logger();
      sub_100010324(v27, (uint64_t)qword_10170E858);
      uint64_t v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v28, v29))
      {
        uint64_t v30 = (uint8_t *)swift_slowAlloc();
        uint64_t v52 = swift_slowAlloc();
        *(_DWORD *)uint64_t v30 = 136315138;
        *(void *)(v0 + 624) = sub_1008FA0F0(0xD000000000000010, 0x80000001013F28C0, &v52);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "Invalid key sequence %s!", v30, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      uint64_t v31 = *(void *)(v0 + 696);
      sub_1003DCD74();
      swift_allocError();
      char v33 = 1;
LABEL_28:
      char *v32 = v33;
      swift_willThrow();
      sub_1003DCDC8(v31, (void (*)(void))sub_10001CFB8);
LABEL_29:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v45 = *(uint64_t (**)(void))(v0 + 8);
      return v45();
    }
LABEL_36:
    swift_once();
    goto LABEL_21;
  }
  unint64_t v12 = *(void *)(v0 + 704);
  if (!v12)
  {
    unint64_t v37 = *(void *)(v0 + 768);
    uint64_t v38 = *(void *)(v0 + 760);
    unint64_t v39 = *(void *)(v0 + 752);
    uint64_t v40 = *(void *)(v0 + 744);
    sub_1000361E0(*(void *)(v0 + 728), *(void *)(v0 + 736));
    sub_1000361E0(v40, v39);
    sub_1000361E0(v38, v37);
    if (qword_101636F08 == -1)
    {
LABEL_25:
      uint64_t v41 = type metadata accessor for Logger();
      sub_100010324(v41, (uint64_t)qword_10170E858);
      unint64_t v42 = Logger.logObject.getter();
      os_log_type_t v43 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v42, v43))
      {
        unint64_t v44 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v44 = 0;
        _os_log_impl((void *)&_mh_execute_header, v42, v43, "Secondary index should never be 0!", v44, 2u);
        swift_slowDealloc();
      }
      uint64_t v31 = *(void *)(v0 + 696);

      sub_1003DCD74();
      swift_allocError();
      char v33 = 2;
      goto LABEL_28;
    }
LABEL_40:
    swift_once();
    goto LABEL_25;
  }
  if (!is_mul_ok(v12, 0x60uLL))
  {
    __break(1u);
LABEL_38:
    __break(1u);
    goto LABEL_39;
  }
  if (96 * v12 - 96 <= 1) {
    unint64_t v13 = 1;
  }
  else {
    unint64_t v13 = 96 * v12 - 96;
  }
  if (96 * v12 - 1 < v13) {
    goto LABEL_38;
  }
  unint64_t v14 = v12 + 1;
  if (!is_mul_ok(v14, 0x60uLL))
  {
LABEL_39:
    __break(1u);
    goto LABEL_40;
  }
  uint64_t v15 = 96 * v14;
  unint64_t v16 = 96 * v14 - 1;
  if (v16 >= v15 - 96) {
    goto LABEL_19;
  }
  __break(1u);
LABEL_18:
  unint64_t v13 = *(void *)(v0 + 704);
  unint64_t v16 = v13 + 96;
  if (v13 >= 0xFFFFFFFFFFFFFFA0)
  {
    __break(1u);
    goto LABEL_36;
  }
LABEL_19:
  unint64_t v50 = v10;
  unint64_t v51 = v9;
  uint64_t v49 = v8;
  *(void *)(v0 + 824) = v16;
  uint64_t v17 = *(void *)(v0 + 712);
  uint64_t v18 = *(void *)(v0 + 696);
  uint64_t v19 = *(void *)(v0 + 688);
  *(void *)(v0 + 664) = _swiftEmptyArrayStorage;
  sub_1003DCDC8(v18, (void (*)(void))sub_1000361E0);
  uint64_t v20 = sub_100A03614(v19, v13, v17);
  *(void *)(v0 + 832) = v20;
  *(void *)(v0 + 840) = v21;
  *(void *)(v0 + 848) = v22;
  unint64_t v34 = v20;
  uint64_t v35 = v21;
  unint64_t v36 = v22;
  sub_1000361E0(v49, v51);
  sub_1000361E0(v7, v1);
  sub_1000361E0(v11, v50);
  sub_1003DCE94(v34, v35, v36);
  sub_1009DC0D4(v49, v51, v7, v1, v11, v50, v34, v35, (uint64_t *)(v0 + 16), v36, v13);
  *(void *)(v0 + 856) = 0;
  long long v47 = *(_OWORD *)(v0 + 16);
  *(_OWORD *)(v0 + 104) = *(_OWORD *)(v0 + 32);
  long long v48 = *(_OWORD *)(v0 + 64);
  *(_OWORD *)(v0 + 120) = *(_OWORD *)(v0 + 48);
  *(_OWORD *)(v0 + 136) = v48;
  *(void *)(v0 + 152) = *(void *)(v0 + 80);
  *(_OWORD *)(v0 + 88) = v47;
  sub_1003DD0D0((void *)(v0 + 16), (void (*)(void, void))sub_100037A38, (void (*)(uint64_t, uint64_t))sub_1000361E0);
  return _swift_task_switch(sub_1003DAAC4, 0, 0);
}

uint64_t sub_1003DAAC4()
{
  if (static Task<>.isCancelled.getter())
  {
    unint64_t v1 = sub_1003DAE34;
  }
  else
  {
    uint64_t v19 = (_OWORD *)(v0 + 264);
    uint64_t v17 = v0;
    uint64_t v4 = *(void *)(v0 + 144);
    uint64_t v3 = v0 + 144;
    uint64_t v2 = v4;
    uint64_t v5 = *(void *)(v3 + 688);
    if (*(void *)(v3 + 704) >> 60 == 15) {
      uint64_t v5 = 0;
    }
    *(_DWORD *)(v3 + 824) = enum case for Connection.TransactionMode.deferred(_:);
    uint64_t v18 = *(void *)(v3 + 712);
    *(void *)(v3 + 720) = v5;
    uint64_t v6 = *(void *)(v3 - 56);
    unint64_t v7 = *(void *)(v3 - 48);
    uint64_t v8 = *(void *)(v3 - 40);
    unint64_t v9 = *(void *)(v3 - 32);
    uint64_t v11 = *(void *)(v3 - 24);
    unint64_t v10 = *(void *)(v3 - 16);
    *(void *)(v3 + 728) = *(void *)(v3 - 8);
    *(void *)(v3 + 736) = v2;
    unint64_t v12 = *(void *)(v3 + 8);
    *(void *)(v3 + 744) = v12;
    sub_1000361E0(v2, v12);
    sub_1000361E0(v2, v12);
    sub_100037A38(v6, v7);
    sub_1000361E0(v8, v9);
    sub_1000361E0(v11, v10);
    sub_1000361E0(v2, v12);
    sub_100037A38(v6, v7);
    sub_1000361E0(v8, v9);
    sub_100A8E7CC(v6, v7, v8, v9, v2, v12, 1, (void *)(v3 - 8), v19, (uint64_t *)v3);
    *(void *)(v3 + 752) = v18;
    if (v18)
    {
      sub_10001CFB8(v2, v12);
      sub_10001CFB8(v2, v12);
      sub_10001CFB8(v8, v9);
      sub_100037A24(v6, v7);
      sub_100037A24(v6, v7);
      sub_10001CFB8(v8, v9);
      sub_10001CFB8(v11, v10);
      sub_10001CFB8(v2, v12);
      static os_log_type_t.error.getter();
      if (qword_101636F48 != -1) {
        swift_once();
      }
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v13 = swift_allocObject();
      *(_OWORD *)(v13 + 16) = xmmword_101342130;
      uint64_t v14 = _convertErrorToNSError(_:)();
      *(void *)(v13 + 56) = sub_1002C4E3C();
      *(void *)(v13 + 64) = sub_1003DD088((unint64_t *)&qword_10163C9B0, (void (*)(uint64_t))sub_1002C4E3C);
      *(void *)(v13 + 32) = v14;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      unint64_t v1 = sub_1003DD314;
    }
    else
    {
      *(void *)(v17 + 904) = *(void *)(v17 + 264);
      long long v15 = *(_OWORD *)(v17 + 288);
      *(_OWORD *)(v17 + 912) = *(_OWORD *)(v17 + 272);
      *(_OWORD *)(v17 + 928) = v15;
      *(void *)(v17 + 944) = *(void *)(v17 + 304);
      sub_10001CFB8(v2, v12);
      sub_10001CFB8(v8, v9);
      sub_100037A24(v6, v7);
      sub_100037A24(v6, v7);
      sub_10001CFB8(v8, v9);
      sub_10001CFB8(v11, v10);
      sub_10001CFB8(v2, v12);
      unint64_t v1 = sub_1003DB65C;
    }
  }
  return _swift_task_switch(v1, 0, 0);
}

uint64_t sub_1003DAE34()
{
  uint64_t v57 = v0;
  uint64_t v2 = *(void *)(v0 + 104);
  unint64_t v1 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 120);
  unint64_t v4 = *(void *)(v0 + 128);
  uint64_t v5 = *(void *)(v0 + 144);
  unint64_t v6 = *(void *)(v0 + 152);
  sub_100037A24(*(void *)(v0 + 88), *(void *)(v0 + 96));
  sub_10001CFB8(v2, v1);
  sub_10001CFB8(v3, v4);
  sub_10001CFB8(v5, v6);
  p_ivar_base_size = &AnalyticsEvent.ivar_base_size;
  if (!*(void *)(*(void *)(v0 + 664) + 16))
  {
    char v8 = *(unsigned char *)(v0 + 973);
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v9 = swift_allocObject();
    *(_OWORD *)(v9 + 16) = xmmword_101342130;
    *(void *)(v9 + 56) = &type metadata for UInt8;
    *(void *)(v9 + 64) = &protocol witness table for UInt8;
    *(unsigned char *)(v9 + 32) = v8;
    uint64_t v10 = String.init(format:_:)();
    unint64_t v12 = v11;
    if (qword_101636F08 != -1) {
      swift_once();
    }
    uint64_t v13 = *(void *)(v0 + 792);
    uint64_t v14 = *(void *)(v0 + 688);
    uint64_t v15 = type metadata accessor for Logger();
    sub_100010324(v15, (uint64_t)qword_10170E858);
    sub_1003DCECC(v14, v13);
    swift_bridgeObjectRetain();
    unint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      os_log_type_t v52 = v17;
      uint64_t v50 = v10;
      int v18 = *(unsigned __int8 *)(v0 + 972);
      uint64_t v19 = swift_slowAlloc();
      uint64_t v54 = swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 136316163;
      unint64_t v20 = 0xEA00000000007972;
      unint64_t v21 = 0x61646E6F6365732ELL;
      if (v18 != 1)
      {
        unint64_t v21 = 0xD000000000000010;
        unint64_t v20 = 0x80000001013F28C0;
      }
      if (v18) {
        uint64_t v22 = v21;
      }
      else {
        uint64_t v22 = 0x7972616D6972702ELL;
      }
      if (v18) {
        unint64_t v23 = v20;
      }
      else {
        unint64_t v23 = 0xE800000000000000;
      }
      uint64_t v24 = *(void *)(v0 + 792);
      uint64_t v25 = *(void *)(v0 + 704);
      *(void *)(v0 + 632) = sub_1008FA0F0(v22, v23, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v19 + 12) = 2048;
      *(void *)(v0 + 680) = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v19 + 22) = 2080;
      swift_bridgeObjectRetain();
      *(void *)(v0 + 616) = sub_1008FA0F0(v50, v12, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v19 + 32) = 2160;
      *(void *)(v0 + 600) = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v19 + 42) = 2081;
      type metadata accessor for UUID();
      sub_1003DD088((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v55 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v56 = v26;
      v27._countAndFlagsBits = 47;
      v27._object = (void *)0xE100000000000000;
      String.append(_:)(v27);
      v28._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v28);
      swift_bridgeObjectRelease();
      *(void *)(v0 + 584) = sub_1008FA0F0(v55, v56, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1003DCF30(v24);
      _os_log_impl((void *)&_mh_execute_header, v16, v52, "No match for sequence %s index %llu hint %s %{private,mask.hash}s", (uint8_t *)v19, 0x34u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      p_ivar_base_size = (_DWORD *)(&AnalyticsEvent + 8);
    }
    else
    {
      uint64_t v29 = *(void *)(v0 + 792);
      swift_bridgeObjectRelease_n();
      sub_1003DCF30(v29);
    }
  }
  if (*((void *)p_ivar_base_size + 481) != -1) {
    swift_once();
  }
  uint64_t v30 = *(void *)(v0 + 784);
  uint64_t v31 = *(void *)(v0 + 688);
  uint64_t v32 = type metadata accessor for Logger();
  sub_100010324(v32, (uint64_t)qword_10170E858);
  sub_1003DCECC(v31, v30);
  char v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.debug.getter();
  BOOL v35 = os_log_type_enabled(v33, v34);
  unint64_t v36 = *(void *)(v0 + 848);
  uint64_t v37 = *(void *)(v0 + 840);
  uint64_t v38 = *(void *)(v0 + 832);
  uint64_t v39 = *(void *)(v0 + 784);
  if (v35)
  {
    uint64_t v53 = *(void *)(v0 + 696);
    unint64_t v51 = *(void *)(v0 + 848);
    uint64_t v40 = swift_slowAlloc();
    uint64_t v54 = swift_slowAlloc();
    *(_DWORD *)uint64_t v40 = 136315394;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    uint64_t v41 = Array.description.getter();
    unint64_t v43 = v42;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 656) = sub_1008FA0F0(v41, v43, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v40 + 12) = 2080;
    type metadata accessor for UUID();
    sub_1003DD088((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v55 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v56 = v44;
    v45._countAndFlagsBits = 47;
    v45._object = (void *)0xE100000000000000;
    String.append(_:)(v45);
    v46._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v46);
    swift_bridgeObjectRelease();
    *(void *)(v0 + 648) = sub_1008FA0F0(v55, v56, &v54);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1003DCF30(v39);
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "primaryKeys: %s for beacon %s", (uint8_t *)v40, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    sub_1003DD0D0((void *)(v0 + 16), (void (*)(void, void))sub_100037A24, (void (*)(uint64_t, uint64_t))sub_10001CFB8);

    sub_1003DCDC8(v53, (void (*)(void))sub_10001CFB8);
    sub_1003DCEB0(v38, v37, v51);
  }
  else
  {
    sub_1003DCDC8(*(void *)(v0 + 696), (void (*)(void))sub_10001CFB8);
    sub_1003DCEB0(v38, v37, v36);
    sub_1003DCF30(v39);
    sub_1003DD0D0((void *)(v0 + 16), (void (*)(void, void))sub_100037A24, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
  }
  swift_beginAccess();
  uint64_t v47 = *(void *)(v0 + 664);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  long long v48 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v48(v47);
}

uint64_t sub_1003DB65C()
{
  uint64_t v172 = v0;
  unint64_t v1 = *(void *)(v0 + 872);
  if (v1 >= *(void *)(v0 + 824))
  {
    uint64_t v166 = (void *)(v0 + 16);
    uint64_t v153 = *(void *)(v0 + 936);
    unint64_t v157 = *(void *)(v0 + 944);
    uint64_t v145 = *(void *)(v0 + 920);
    unint64_t v148 = *(void *)(v0 + 928);
    unint64_t v143 = *(void *)(v0 + 912);
    uint64_t v16 = *(void *)(v0 + 904);
    unint64_t v17 = *(void *)(v0 + 888);
    uint64_t v18 = *(void *)(v0 + 880);
    uint64_t v20 = *(void *)(v0 + 104);
    unint64_t v19 = *(void *)(v0 + 112);
    uint64_t v21 = *(void *)(v0 + 120);
    unint64_t v22 = *(void *)(v0 + 128);
    uint64_t v23 = *(void *)(v0 + 144);
    unint64_t v24 = *(void *)(v0 + 152);
    sub_100037A24(*(void *)(v0 + 88), *(void *)(v0 + 96));
    sub_10001CFB8(v20, v19);
    sub_10001CFB8(v21, v22);
    sub_10001CFB8(v23, v24);
    sub_10001CFB8(v18, v17);
    sub_100037A24(v16, v143);
    sub_10001CFB8(v145, v148);
    sub_100037A24(v153, v157);
    p_ivar_base_size = &AnalyticsEvent.ivar_base_size;
    if (!*(void *)(*(void *)(v0 + 664) + 16))
    {
      char v26 = *(unsigned char *)(v0 + 973);
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v27 = swift_allocObject();
      *(_OWORD *)(v27 + 16) = xmmword_101342130;
      *(void *)(v27 + 56) = &type metadata for UInt8;
      *(void *)(v27 + 64) = &protocol witness table for UInt8;
      *(unsigned char *)(v27 + 32) = v26;
      uint64_t v28 = String.init(format:_:)();
      unint64_t v30 = v29;
      if (qword_101636F08 != -1) {
        swift_once();
      }
      uint64_t v31 = *(void *)(v0 + 792);
      uint64_t v32 = *(void *)(v0 + 688);
      uint64_t v33 = type metadata accessor for Logger();
      sub_100010324(v33, (uint64_t)qword_10170E858);
      sub_1003DCECC(v32, v31);
      swift_bridgeObjectRetain();
      os_log_type_t v34 = Logger.logObject.getter();
      os_log_type_t v35 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v34, v35))
      {
        os_log_type_t v158 = v35;
        int v36 = *(unsigned __int8 *)(v0 + 972);
        uint64_t v37 = swift_slowAlloc();
        uint64_t v169 = swift_slowAlloc();
        *(_DWORD *)uint64_t v37 = 136316163;
        unint64_t v38 = 0xEA00000000007972;
        unint64_t v39 = 0x61646E6F6365732ELL;
        if (v36 != 1)
        {
          unint64_t v39 = 0xD000000000000010;
          unint64_t v38 = 0x80000001013F28C0;
        }
        if (v36) {
          uint64_t v40 = v39;
        }
        else {
          uint64_t v40 = 0x7972616D6972702ELL;
        }
        if (v36) {
          unint64_t v41 = v38;
        }
        else {
          unint64_t v41 = 0xE800000000000000;
        }
        uint64_t v42 = *(void *)(v0 + 792);
        uint64_t v43 = *(void *)(v0 + 704);
        *(void *)(v0 + 632) = sub_1008FA0F0(v40, v41, &v169);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v37 + 12) = 2048;
        *(void *)(v0 + 680) = v43;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v37 + 22) = 2080;
        swift_bridgeObjectRetain();
        *(void *)(v0 + 616) = sub_1008FA0F0(v28, v30, &v169);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v37 + 32) = 2160;
        *(void *)(v0 + 600) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v37 + 42) = 2081;
        type metadata accessor for UUID();
        sub_1003DD088((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v170 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v171 = v44;
        v45._countAndFlagsBits = 47;
        v45._object = (void *)0xE100000000000000;
        String.append(_:)(v45);
        v46._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
        String.append(_:)(v46);
        swift_bridgeObjectRelease();
        *(void *)(v0 + 584) = sub_1008FA0F0(v170, v171, &v169);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1003DCF30(v42);
        _os_log_impl((void *)&_mh_execute_header, v34, v158, "No match for sequence %s index %llu hint %s %{private,mask.hash}s", (uint8_t *)v37, 0x34u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        p_ivar_base_size = (_DWORD *)(&AnalyticsEvent + 8);
      }
      else
      {
        uint64_t v59 = *(void *)(v0 + 792);
        swift_bridgeObjectRelease_n();
        sub_1003DCF30(v59);
      }
    }
    if (*((void *)p_ivar_base_size + 481) == -1) {
      goto LABEL_29;
    }
    goto LABEL_62;
  }
  unint64_t v2 = *(void *)(v0 + 864);
  if (v1 < v2)
  {
    __break(1u);
LABEL_62:
    swift_once();
LABEL_29:
    uint64_t v60 = *(void *)(v0 + 784);
    uint64_t v61 = *(void *)(v0 + 688);
    uint64_t v62 = type metadata accessor for Logger();
    sub_100010324(v62, (uint64_t)qword_10170E858);
    sub_1003DCECC(v61, v60);
    uint64_t v63 = Logger.logObject.getter();
    os_log_type_t v64 = static os_log_type_t.debug.getter();
    BOOL v65 = os_log_type_enabled(v63, v64);
    unint64_t v66 = *(void *)(v0 + 848);
    uint64_t v67 = *(void *)(v0 + 840);
    uint64_t v68 = *(void *)(v0 + 832);
    uint64_t v69 = *(void *)(v0 + 784);
    if (v65)
    {
      uint64_t v161 = *(void *)(v0 + 696);
      uint64_t v70 = swift_slowAlloc();
      uint64_t v169 = swift_slowAlloc();
      *(_DWORD *)uint64_t v70 = 136315394;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      uint64_t v149 = v67;
      unint64_t v154 = v66;
      uint64_t v71 = Array.description.getter();
      unint64_t v73 = v72;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 656) = sub_1008FA0F0(v71, v73, &v169);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v70 + 12) = 2080;
      type metadata accessor for UUID();
      sub_1003DD088((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v170 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v171 = v74;
      v75._countAndFlagsBits = 47;
      v75._object = (void *)0xE100000000000000;
      String.append(_:)(v75);
      v76._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v76);
      swift_bridgeObjectRelease();
      *(void *)(v0 + 648) = sub_1008FA0F0(v170, v171, &v169);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1003DCF30(v69);
      _os_log_impl((void *)&_mh_execute_header, v63, v64, "primaryKeys: %s for beacon %s", (uint8_t *)v70, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      sub_1003DD0D0(v166, (void (*)(void, void))sub_100037A24, (void (*)(uint64_t, uint64_t))sub_10001CFB8);

      sub_1003DCDC8(v161, (void (*)(void))sub_10001CFB8);
      sub_1003DCEB0(v68, v149, v154);
    }
    else
    {
      sub_1003DCDC8(*(void *)(v0 + 696), (void (*)(void))sub_10001CFB8);
      sub_1003DCEB0(v68, v67, v66);
      sub_1003DCF30(v69);
      sub_1003DD0D0(v166, (void (*)(void, void))sub_100037A24, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
    }
    swift_beginAccess();
    uint64_t v77 = *(void *)(v0 + 664);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v78 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v78(v77);
  }
  if (v1 - v2 <= *(void *)(v0 + 720))
  {
    uint64_t v15 = *(void *)(v0 + 896);
  }
  else
  {
    unint64_t v3 = *(void *)(v0 + 888);
    uint64_t v4 = *(void *)(v0 + 880);
    sub_10000588C(&qword_10163A7A8);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_101342130;
    *(void *)(inited + 32) = v1;
    *(void *)(inited + 40) = v4;
    *(void *)(inited + 48) = v3;
    sub_1000361E0(v4, v3);
    uint64_t v6 = sub_1009FCF40();
    if (!v6)
    {
      sub_1001A149C();
      swift_allocError();
      *(_DWORD *)uint64_t v79 = 2;
      *(unsigned char *)(v79 + 4) = 1;
      swift_willThrow();
      goto LABEL_36;
    }
    uint64_t v7 = v6;
    uint64_t v152 = *(void *)(v0 + 896);
    unsigned int v147 = *(_DWORD *)(v0 + 968);
    uint64_t v8 = *(void *)(v0 + 816);
    uint64_t v9 = *(void *)(v0 + 808);
    uint64_t v10 = *(void *)(v0 + 800);
    uint64_t v11 = *(void *)(v0 + 712);
    char v12 = *(unsigned char *)(v0 + 972);
    uint64_t v13 = *(void *)(v0 + 688);
    uint64_t v14 = swift_task_alloc();
    *(void *)(v14 + 16) = inited;
    *(void *)(v14 + 24) = v11;
    *(void *)(v14 + 32) = v13;
    *(unsigned char *)(v14 + 40) = v12;
    *(void *)(v14 + 48) = v7;
    (*(void (**)(uint64_t, void, uint64_t))(v9 + 104))(v8, v147, v10);
    uint64_t v15 = v152;
    Connection.transaction(_:block:)();
    (*(void (**)(void, void))(*(void *)(v0 + 808) + 8))(*(void *)(v0 + 816), *(void *)(v0 + 800));
    swift_release();
    if (v152)
    {
      swift_task_dealloc();
LABEL_36:
      unint64_t v162 = *(void *)(v0 + 944);
      unint64_t v150 = *(void *)(v0 + 928);
      uint64_t v155 = *(void *)(v0 + 936);
      unint64_t type = *(void *)(v0 + 912);
      uint64_t v144 = *(void *)(v0 + 920);
      unint64_t v139 = *(void *)(v0 + 888);
      uint64_t v141 = *(void *)(v0 + 904);
      unint64_t v136 = *(void *)(v0 + 848);
      uint64_t v138 = *(void *)(v0 + 880);
      uint64_t v80 = *(void *)(v0 + 840);
      uint64_t v81 = *(void *)(v0 + 832);
      uint64_t v146 = *(void *)(v0 + 696);
      uint64_t v83 = *(void *)(v0 + 104);
      unint64_t v82 = *(void *)(v0 + 112);
      uint64_t v84 = *(void *)(v0 + 120);
      unint64_t v85 = *(void *)(v0 + 128);
      uint64_t v86 = *(void *)(v0 + 144);
      unint64_t v87 = *(void *)(v0 + 152);
      sub_100037A24(*(void *)(v0 + 88), *(void *)(v0 + 96));
      sub_10001CFB8(v83, v82);
      sub_10001CFB8(v84, v85);
      sub_10001CFB8(v86, v87);
      sub_1003DCEB0(v81, v80, v136);
      swift_setDeallocating();
      swift_arrayDestroy();
      sub_1003DD0D0((void *)(v0 + 16), (void (*)(void, void))sub_100037A24, (void (*)(uint64_t, uint64_t))sub_10001CFB8);
      sub_10001CFB8(v138, v139);
      sub_100037A24(v141, type);
      sub_10001CFB8(v144, v150);
      sub_100037A24(v155, v162);
      sub_1003DCDC8(v146, (void (*)(void))sub_10001CFB8);
      swift_bridgeObjectRelease();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      unint64_t v88 = *(uint64_t (**)(void))(v0 + 8);
      return v88();
    }
    swift_setDeallocating();
    swift_arrayDestroy();
    swift_task_dealloc();
    unint64_t v2 = *(void *)(v0 + 872);
  }
  unint64_t v47 = v0 + 456;
  *(void *)(v0 + 952) = v2;
  *(_OWORD *)(v0 + 456) = *(_OWORD *)(v0 + 280);
  uint64_t v48 = *(void *)(v0 + 456);
  unint64_t v49 = *(void *)(v0 + 464);
  sub_100061E54(v0 + 456);
  uint64_t v50 = sub_100A948F8(v48, v49);
  if (!v15)
  {
    uint64_t v89 = sub_100A90C58(v50, 0);
    id v159 = (_OWORD *)(v0 + 408);
    Swift::String v90 = (void *)(v0 + 440);
    char v167 = (_OWORD *)(v0 + 472);
    unint64_t v91 = v0 + 552;
    unint64_t v93 = v92;
    CCECCryptorRelease();
    sub_1000CE9DC(v0 + 456);
    unint64_t v94 = v93;
    unint64_t v95 = v93 >> 62;
    uint64_t v96 = 0;
    switch(v95)
    {
      case 1uLL:
        uint64_t v98 = v89;
        LODWORD(v97) = HIDWORD(v89) - v89;
        if (!__OFSUB__(HIDWORD(v89), v89))
        {
          uint64_t v97 = (int)v97;
          goto LABEL_46;
        }
        __break(1u);
        goto LABEL_68;
      case 2uLL:
        uint64_t v100 = *(void *)(v89 + 16);
        uint64_t v99 = *(void *)(v89 + 24);
        BOOL v101 = __OFSUB__(v99, v100);
        uint64_t v97 = v99 - v100;
        if (!v101) {
          goto LABEL_45;
        }
LABEL_68:
        __break(1u);
        goto LABEL_69;
      case 3uLL:
        goto LABEL_59;
      default:
        uint64_t v97 = BYTE6(v94);
LABEL_45:
        uint64_t v98 = v89;
LABEL_46:
        if (v97 == 28)
        {
          uint64_t v137 = v0 + 440;
          int v164 = *(unsigned __int8 *)(v0 + 973);
          uint64_t v102 = v98;
          unint64_t v103 = v94;
          sub_1000361E0(v98, v94);
          uint64_t v104 = static MACAddress.length.getter();
          sub_100435A9C(v104, v102, v103, (uint64_t *)(v0 + 552));
          uint64_t v105 = *(void *)(v0 + 552);
          unint64_t v106 = *(void *)(v0 + 560);
          unsigned __int8 v140 = Data.subscript.getter();
          sub_10001CFB8(v105, v106);
          sub_10001CFB8(v102, v103);
          if (v164 != v140
            || (sub_10001D608(v0 + 264, v137, &qword_1016434F8),
                sub_10001D608(v137, (uint64_t)v167, &qword_1016434F8),
                *(void *)(v0 + 480) >> 60 == 15))
          {
            unint64_t v107 = *(void *)(v0 + 944);
            uint64_t v108 = *(void *)(v0 + 936);
            unint64_t v109 = *(void *)(v0 + 928);
            uint64_t v110 = *(void *)(v0 + 920);
            unint64_t v111 = *(void *)(v0 + 912);
            uint64_t v112 = *(void *)(v0 + 904);
            sub_10001CFB8(*(void *)(v0 + 880), *(void *)(v0 + 888));
            sub_100037A24(v112, v111);
            sub_10001CFB8(v110, v109);
            sub_100037A24(v108, v107);
LABEL_50:
            *(void *)(v0 + 960) = 0;
            return _swift_task_switch(sub_1003DCA28, 0, 0);
          }
          *id v159 = *v167;
          sub_100061E54(v0 + 456);
          sub_100091B38(v137);
          uint64_t v117 = sub_100A94760(v48, v49);
          unint64_t v119 = v118;
          sub_1000CE9DC(v0 + 456);
          sub_100434E0C(v117, v119, (uint64_t *)(v0 + 536));
          sub_100435A9C(6, *(void *)(v0 + 536), *(void *)(v0 + 544), (uint64_t *)(v0 + 504));
          uint64_t v48 = *(void *)(v0 + 504);
          unint64_t v47 = *(void *)(v0 + 512);
          uint64_t v120 = String.utf8Data.getter();
          unint64_t v122 = v121;
          uint64_t v123 = *(void *)(v0 + 408);
          unint64_t v124 = *(void *)(v0 + 416);
          sub_100061E54((uint64_t)v159);
          uint64_t v125 = sub_100A941DC(v123, v124, v120, v122, 32);
          unint64_t v127 = v126;
          sub_1003DD160(v137);
          sub_100434DF4(v125, v127, (uint64_t *)(v0 + 488));
          sub_10001CFB8(v120, v122);
          uint64_t v96 = *(void *)(v0 + 488);
          unint64_t v91 = *(void *)(v0 + 496);
          Swift::String v90 = *(void **)(v0 + 664);
          sub_1000361E0(v48, v47);
          sub_1000361E0(v96, v91);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          if (isUniquelyReferenced_nonNull_native)
          {
LABEL_64:
            unint64_t v130 = v90[2];
            unint64_t v129 = v90[3];
            if (v130 >= v129 >> 1) {
              Swift::String v90 = sub_100A70338((void *)(v129 > 1), v130 + 1, 1, v90);
            }
            uint64_t v165 = *(void *)(v0 + 936);
            unint64_t v168 = *(void *)(v0 + 944);
            uint64_t v160 = *(void *)(v0 + 920);
            unint64_t v163 = *(void *)(v0 + 928);
            uint64_t v151 = *(void *)(v0 + 904);
            unint64_t v156 = *(void *)(v0 + 912);
            unint64_t v131 = *(void *)(v0 + 888);
            uint64_t v132 = *(void *)(v0 + 880);
            uint64_t v133 = *(void *)(v0 + 872);
            char v134 = *(unsigned char *)(v0 + 972);
            v90[2] = v130 + 1;
            unint64_t v135 = &v90[6 * v130];
            *((unsigned char *)v135 + 32) = v134;
            v135[5] = v133;
            v135[6] = v48;
            v135[7] = v47;
            v135[8] = v96;
            v135[9] = v91;
            sub_10001CFB8(v48, v47);
            sub_10001CFB8(v96, v91);
            sub_1003DD160(v137);
            sub_10001CFB8(v132, v131);
            sub_100037A24(v151, v156);
            sub_10001CFB8(v160, v163);
            sub_100037A24(v165, v168);
            *(void *)(v0 + 664) = v90;
            goto LABEL_50;
          }
LABEL_71:
          Swift::String v90 = sub_100A70338(0, v90[2] + 1, 1, v90);
          goto LABEL_64;
        }
        if (v95)
        {
          if (v95 == 1)
          {
            if (!__OFSUB__(HIDWORD(v98), v98))
            {
              uint64_t v96 = HIDWORD(v98) - (int)v98;
LABEL_59:
              unint64_t v115 = v94;
              sub_10013019C();
              uint64_t v55 = swift_allocError();
              *(void *)uint64_t v116 = 28;
              *(void *)(v116 + 8) = v96;
              *(unsigned char *)(v116 + 16) = 0;
              swift_willThrow();
              sub_10001CFB8(v89, v115);
              goto LABEL_26;
            }
LABEL_69:
            __break(1u);
          }
          else
          {
            uint64_t v114 = *(void *)(v98 + 16);
            uint64_t v113 = *(void *)(v98 + 24);
            uint64_t v96 = v113 - v114;
            if (!__OFSUB__(v113, v114)) {
              goto LABEL_59;
            }
          }
          __break(1u);
          goto LABEL_71;
        }
        uint64_t v96 = BYTE6(v94);
        goto LABEL_59;
    }
  }
  static os_log_type_t.error.getter();
  if (qword_101636F48 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v51 = swift_allocObject();
  *(_OWORD *)(v51 + 16) = xmmword_101342130;
  *(void *)(v0 + 592) = v15;
  swift_errorRetain();
  sub_10000588C(&qword_101638D40);
  uint64_t v52 = String.init<A>(describing:)();
  uint64_t v54 = v53;
  *(void *)(v51 + 56) = &type metadata for String;
  *(void *)(v51 + 64) = sub_10000B4CC();
  *(void *)(v51 + 32) = v52;
  *(void *)(v51 + 40) = v54;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_100130148();
  uint64_t v55 = swift_allocError();
  *unint64_t v56 = 0;
  swift_willThrow();
  swift_errorRelease();
  sub_1000CE9DC(v0 + 456);
LABEL_26:
  _StringGuts.grow(_:)(35);
  *(void *)(v0 + 568) = 0;
  *(void *)(v0 + 576) = 0xE000000000000000;
  v57._object = (void *)0x80000001013F3B70;
  v57._countAndFlagsBits = 0xD000000000000021;
  String.append(_:)(v57);
  *(void *)(v0 + 608) = v55;
  sub_10000588C(&qword_101638D40);
  _print_unlocked<A, B>(_:_:)();
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t sub_1003DCA28()
{
  if (static Task<>.isCancelled.getter())
  {
    unint64_t v1 = sub_1003DAE34;
LABEL_8:
    char v12 = v1;
    goto LABEL_9;
  }
  uint64_t v2 = *(void *)(v0 + 144);
  uint64_t v15 = *(void *)(v0 + 960);
  *(void *)(v0 + 864) = *(void *)(v0 + 952);
  uint64_t v3 = *(void *)(v0 + 88);
  unint64_t v4 = *(void *)(v0 + 96);
  uint64_t v5 = *(void *)(v0 + 104);
  unint64_t v6 = *(void *)(v0 + 112);
  uint64_t v7 = *(void *)(v0 + 120);
  unint64_t v8 = *(void *)(v0 + 128);
  *(void *)(v0 + 872) = *(void *)(v0 + 136);
  *(void *)(v0 + 880) = v2;
  unint64_t v9 = *(void *)(v0 + 152);
  *(void *)(v0 + 888) = v9;
  sub_1000361E0(v2, v9);
  sub_1000361E0(v2, v9);
  sub_100037A38(v3, v4);
  sub_1000361E0(v5, v6);
  sub_1000361E0(v7, v8);
  sub_1000361E0(v2, v9);
  sub_100037A38(v3, v4);
  sub_1000361E0(v5, v6);
  sub_100A8E7CC(v3, v4, v5, v6, v2, v9, 1, (void *)(v0 + 136), (_OWORD *)(v0 + 264), (uint64_t *)(v0 + 144));
  *(void *)(v0 + 896) = v15;
  if (!v15)
  {
    *(void *)(v0 + 904) = *(void *)(v0 + 264);
    long long v13 = *(_OWORD *)(v0 + 288);
    *(_OWORD *)(v0 + 912) = *(_OWORD *)(v0 + 272);
    *(_OWORD *)(v0 + 928) = v13;
    *(void *)(v0 + 944) = *(void *)(v0 + 304);
    sub_10001CFB8(v2, v9);
    sub_10001CFB8(v5, v6);
    sub_100037A24(v3, v4);
    sub_100037A24(v3, v4);
    sub_10001CFB8(v5, v6);
    sub_10001CFB8(v7, v8);
    sub_10001CFB8(v2, v9);
    unint64_t v1 = sub_1003DB65C;
    goto LABEL_8;
  }
  sub_10001CFB8(v2, v9);
  sub_10001CFB8(v2, v9);
  sub_10001CFB8(v5, v6);
  sub_100037A24(v3, v4);
  sub_100037A24(v3, v4);
  sub_10001CFB8(v5, v6);
  sub_10001CFB8(v7, v8);
  sub_10001CFB8(v2, v9);
  static os_log_type_t.error.getter();
  if (qword_101636F48 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_101342130;
  uint64_t v11 = _convertErrorToNSError(_:)();
  *(void *)(v10 + 56) = sub_1002C4E3C();
  *(void *)(v10 + 64) = sub_1003DD088((unint64_t *)&qword_10163C9B0, (void (*)(uint64_t))sub_1002C4E3C);
  *(void *)(v10 + 32) = v11;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  swift_errorRelease();
  char v12 = sub_1003DD314;
LABEL_9:
  return _swift_task_switch(v12, 0, 0);
}

unint64_t sub_1003DCD74()
{
  unint64_t result = qword_1016434E8;
  if (!qword_1016434E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_1016434E8);
  }
  return result;
}

uint64_t sub_1003DCDC8(uint64_t a1, void (*a2)(void))
{
  return a1;
}

void sub_1003DCE04(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void))
{
  if (a2 >> 60 != 15)
  {
    a7();
    ((void (*)(uint64_t, uint64_t))a7)(a3, a4);
    ((void (*)(uint64_t, uint64_t))a7)(a5, a6);
  }
}

uint64_t sub_1003DCE94(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 >> 60 != 15) {
    return sub_1000361E0(a2, a3);
  }
  return result;
}

uint64_t sub_1003DCEB0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 >> 60 != 15) {
    return sub_10001CFB8(a2, a3);
  }
  return result;
}

uint64_t sub_1003DCECC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BeaconIdentifier();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003DCF30(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for BeaconIdentifier();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1003DCF8C(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  if (a4 >> 60 != 15)
  {
    sub_100037A24(result, a2);
    sub_10001CFB8(a3, a4);
    return sub_100037A24(a5, a6);
  }
  return result;
}

void sub_1003DCFF8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, unint64_t a9)
{
  if (a3 >> 60 != 15)
  {
    sub_10001CFB8(a2, a3);
    sub_100037A24(a4, a5);
    sub_10001CFB8(a6, a7);
    sub_100037A24(a8, a9);
  }
}

uint64_t sub_1003DD088(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *sub_1003DD0D0(void *a1, void (*a2)(void, void), void (*a3)(uint64_t, uint64_t))
{
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  uint64_t v8 = a1[5];
  uint64_t v9 = a1[7];
  uint64_t v10 = a1[8];
  a2(*a1, a1[1]);
  a3(v5, v6);
  a3(v7, v8);
  a3(v9, v10);
  return a1;
}

uint64_t sub_1003DD160(uint64_t a1)
{
  return a1;
}

uint64_t sub_1003DD190()
{
  return sub_100A01678(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned __int8 *)(v0 + 40), *(void *)(v0 + 48));
}

unsigned char *storeEnumTagSinglePayload for LTKGenerator.Error(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1003DD284);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LTKGenerator.Error()
{
  return &type metadata for LTKGenerator.Error;
}

unint64_t sub_1003DD2C0()
{
  unint64_t result = qword_101643500[0];
  if (!qword_101643500[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_101643500);
  }
  return result;
}

uint64_t sub_1003DD318()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1003DD3B4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = *(int *)(a3 + 36);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for UUID();
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t sub_1003DD498(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 36);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

void *sub_1003DD510(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 36);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

void *sub_1003DD5A8(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 36);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

void *sub_1003DD63C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 36);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

void *sub_1003DD6B8(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(int *)(a3 + 36);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t sub_1003DD744(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003DD758);
}

uint64_t sub_1003DD758(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for UUID();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 36);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1003DD808(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1003DD81C);
}

void *sub_1003DD81C(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 36);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for AttachedAccessoryEvents()
{
  return sub_1000103A0();
}

Swift::Int sub_1003DD8DC()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 1);
  return Hasher._finalize()();
}

void sub_1003DD924()
{
  Hasher._combine(_:)(*v0 + 1);
}

Swift::Int sub_1003DD954()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1 + 1);
  return Hasher._finalize()();
}

void *sub_1003DD998@<X0>(void *result@<X0>, char *a2@<X8>)
{
  if (*result >= 4uLL) {
    char v2 = 3;
  }
  else {
    char v2 = 0x2010003u >> (8 * *result);
  }
  *a2 = v2;
  return result;
}

void sub_1003DD9C0(void *a1@<X8>)
{
  *a1 = *v1 + 1;
}

uint64_t type metadata accessor for AttachedAccessoryEvents.DetectionEventType()
{
  return sub_1000103A0();
}

uint64_t type metadata accessor for AttachedAccessoryEvents.ConnectionEventType()
{
  return sub_1000103A0();
}

unsigned char *sub_1003DDA04(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1003DDAD0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t type metadata accessor for AttachedAccessoryEvents.AttachmentEventType()
{
  return sub_1000103A0();
}

unsigned char *storeEnumTagSinglePayload for EventGroup(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1003DDBDCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EventGroup()
{
  return &type metadata for EventGroup;
}

unsigned char *sub_1003DDC14(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1003DDCB0);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t type metadata accessor for AttachedAccessoryEvents.Error()
{
  return sub_1000103A0();
}

void sub_1003DDCF0()
{
  swift_checkMetadataState();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Date();
    if (v1 <= 0x3F)
    {
      sub_1003426B0();
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

uint64_t *sub_1003DDE00(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a3 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  uint64_t v29 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v29 - 8);
  int v7 = *(_DWORD *)(v6 + 80);
  uint64_t v8 = v5 + v7;
  uint64_t v9 = *(void *)(v6 + 64) + 7;
  uint64_t v30 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v30 - 8);
  uint64_t v11 = *(_DWORD *)(v10 + 80);
  if (*(_DWORD *)(v10 + 84)) {
    uint64_t v12 = *(void *)(v10 + 64);
  }
  else {
    uint64_t v12 = *(void *)(v10 + 64) + 1;
  }
  unsigned int v13 = v11 | v7 | *(_DWORD *)(v4 + 80) & 0xF8;
  if (v12 + ((v11 + ((v9 + (v8 & ~(unint64_t)v7)) & 0xFFFFFFFFFFFFFFF8) + 40) & ~v11) > 0x18
    || ((*(_DWORD *)(v10 + 80) | v7 | *(_DWORD *)(v4 + 80)) & 0x100000) != 0
    || v13 > 7)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    uint64_t v18 = (uint64_t *)(v16 + (((v13 | 7) + 16) & ~(unint64_t)(v13 | 7)));
    swift_retain();
  }
  else
  {
    unint64_t v17 = ~(unint64_t)v7;
    size_t __n = v12;
    uint64_t v18 = a1;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v4 + 16))(a1, a2, v3);
    unint64_t v19 = ((unint64_t)a1 + v8) & v17;
    unint64_t v20 = ((unint64_t)a2 + v8) & v17;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))(v19, v20, v29);
    unint64_t v21 = (v9 + v19) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v22 = (v9 + v20) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v23 = *(void *)(v22 + 24);
    *(void *)(v21 + 24) = v23;
    *(void *)(v21 + 32) = *(void *)(v22 + 32);
    (**(void (***)(unint64_t, unint64_t))(v23 - 8))(v21, v22);
    uint64_t v24 = v22 + v11;
    uint64_t v25 = (void *)((v21 + v11 + 40) & ~v11);
    char v26 = (const void *)((v24 + 40) & ~v11);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v26, 1, v30))
    {
      memcpy(v25, v26, __n);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v25, v26, v30);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v25, 0, 1, v30);
    }
  }
  return v18;
}

uint64_t sub_1003DE11C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v3)();
  uint64_t v4 = *(void *)(v3 + 56);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6 + 8;
  unint64_t v8 = (v4 + a1 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v8, v5);
  unint64_t v9 = (*(void *)(v7 + 56) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v9);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  unint64_t v12 = (v9 + *(unsigned __int8 *)(v11 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v15 = v11;
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v11 + 48))(v12, 1, v10);
  if (!result)
  {
    uint64_t v14 = *(uint64_t (**)(unint64_t, uint64_t))(v15 + 8);
    return v14(v12, v10);
  }
  return result;
}

uint64_t sub_1003DE288(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = v8 + 16;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v6 + v10;
  uint64_t v12 = (v6 + v10 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v12, v13, v7);
  uint64_t v14 = *(void *)(v9 + 48) + 7;
  unint64_t v15 = (v14 + v12) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = (v14 + v13) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v17 = *(void *)(v16 + 24);
  *(void *)(v15 + 24) = v17;
  *(void *)(v15 + 32) = *(void *)(v16 + 32);
  (**(void (***)(unint64_t, unint64_t))(v17 - 8))(v15, v16);
  uint64_t v18 = type metadata accessor for UUID();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(unsigned __int8 *)(v19 + 80);
  unint64_t v21 = (void *)((v20 + 40 + v15) & ~v20);
  unint64_t v22 = (const void *)((v20 + 40 + v16) & ~v20);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v19 + 48))(v22, 1, v18))
  {
    if (*(_DWORD *)(v19 + 84)) {
      size_t v23 = *(void *)(v19 + 64);
    }
    else {
      size_t v23 = *(void *)(v19 + 64) + 1;
    }
    memcpy(v21, v22, v23);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v19 + 16))(v21, v22, v18);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v21, 0, 1, v18);
  }
  return a1;
}

uint64_t sub_1003DE484(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = v8 + 24;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v6 + v10;
  uint64_t v12 = (v6 + v10 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 24))(v12, v13, v7);
  uint64_t v14 = *(void *)(v9 + 40) + 7;
  unint64_t v15 = (uint64_t *)((v14 + v12) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v16 = (uint64_t *)((v14 + v13) & 0xFFFFFFFFFFFFFFF8);
  sub_10026A7C0(v15, v16);
  uint64_t v17 = type metadata accessor for UUID();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(unsigned __int8 *)(v18 + 80);
  uint64_t v20 = (void *)(((unint64_t)v15 + v19 + 40) & ~v19);
  unint64_t v21 = (void *)(((unint64_t)v16 + v19 + 40) & ~v19);
  unint64_t v22 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v18 + 48);
  int v23 = v22(v20, 1, v17);
  int v24 = v22(v21, 1, v17);
  if (v23)
  {
    if (!v24)
    {
      (*(void (**)(void *, void *, uint64_t))(v18 + 16))(v20, v21, v17);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v20, 0, 1, v17);
      return a1;
    }
    int v25 = *(_DWORD *)(v18 + 84);
    size_t v26 = *(void *)(v18 + 64);
  }
  else
  {
    if (!v24)
    {
      (*(void (**)(void *, void *, uint64_t))(v18 + 24))(v20, v21, v17);
      return a1;
    }
    uint64_t v28 = *(void (**)(void *, uint64_t))(v18 + 8);
    uint64_t v27 = v18 + 8;
    v28(v20, v17);
    int v25 = *(_DWORD *)(v27 + 76);
    size_t v26 = *(void *)(v27 + 56);
  }
  if (v25) {
    size_t v29 = v26;
  }
  else {
    size_t v29 = v26 + 1;
  }
  memcpy(v20, v21, v29);
  return a1;
}

uint64_t sub_1003DE6A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = v8 + 32;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v6 + v10;
  uint64_t v12 = (v6 + v10 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v12, v13, v7);
  uint64_t v14 = *(void *)(v9 + 32) + 7;
  unint64_t v15 = (v14 + v12) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = (v14 + v13) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v17 = *(void *)(v16 + 32);
  long long v18 = *(_OWORD *)(v16 + 16);
  *(_OWORD *)unint64_t v15 = *(_OWORD *)v16;
  *(_OWORD *)(v15 + 16) = v18;
  *(void *)(v15 + 32) = v17;
  uint64_t v19 = type metadata accessor for UUID();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(unsigned __int8 *)(v20 + 80);
  unint64_t v22 = (void *)((v21 + 40 + v15) & ~v21);
  int v23 = (const void *)((v21 + 40 + v16) & ~v21);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v20 + 48))(v23, 1, v19))
  {
    if (*(_DWORD *)(v20 + 84)) {
      size_t v24 = *(void *)(v20 + 64);
    }
    else {
      size_t v24 = *(void *)(v20 + 64) + 1;
    }
    memcpy(v22, v23, v24);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v20 + 32))(v22, v23, v19);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v22, 0, 1, v19);
  }
  return a1;
}

uint64_t sub_1003DE860(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = v8 + 40;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v6 + v10;
  uint64_t v12 = (v6 + v10 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 40))(v12, v13, v7);
  uint64_t v14 = *(void *)(v9 + 24) + 7;
  unint64_t v15 = (v14 + v12) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = (v14 + v13) & 0xFFFFFFFFFFFFFFF8;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v15);
  long long v17 = *(_OWORD *)v16;
  long long v18 = *(_OWORD *)(v16 + 16);
  *(void *)(v15 + 32) = *(void *)(v16 + 32);
  *(_OWORD *)unint64_t v15 = v17;
  *(_OWORD *)(v15 + 16) = v18;
  uint64_t v19 = type metadata accessor for UUID();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(unsigned __int8 *)(v20 + 80);
  unint64_t v22 = (void *)((v21 + 40 + v15) & ~v21);
  int v23 = (void *)((v21 + 40 + v16) & ~v21);
  size_t v24 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v20 + 48);
  int v25 = v24(v22, 1, v19);
  int v26 = v24(v23, 1, v19);
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(void *, void *, uint64_t))(v20 + 32))(v22, v23, v19);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v22, 0, 1, v19);
      return a1;
    }
    int v27 = *(_DWORD *)(v20 + 84);
    size_t v28 = *(void *)(v20 + 64);
  }
  else
  {
    if (!v26)
    {
      (*(void (**)(void *, void *, uint64_t))(v20 + 40))(v22, v23, v19);
      return a1;
    }
    uint64_t v30 = *(void (**)(void *, uint64_t))(v20 + 8);
    uint64_t v29 = v20 + 8;
    v30(v22, v19);
    int v27 = *(_DWORD *)(v29 + 76);
    size_t v28 = *(void *)(v29 + 56);
  }
  if (v27) {
    size_t v31 = v28;
  }
  else {
    size_t v31 = v28 + 1;
  }
  memcpy(v22, v23, v31);
  return a1;
}

uint64_t sub_1003DEA90(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v39 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v39 - 8);
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  if (v9 <= v7) {
    unsigned int v10 = v7;
  }
  else {
    unsigned int v10 = *(_DWORD *)(v8 + 84);
  }
  uint64_t v11 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v12 = v11;
  unsigned int v13 = *(_DWORD *)(v11 + 84);
  unsigned int v14 = v13 - 1;
  if (!v13) {
    unsigned int v14 = 0;
  }
  if (v10 <= v14) {
    unsigned int v15 = v14;
  }
  else {
    unsigned int v15 = v10;
  }
  if (v15 <= 0x7FFFFFFF) {
    unsigned int v16 = 0x7FFFFFFF;
  }
  else {
    unsigned int v16 = v15;
  }
  uint64_t v17 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v18 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v19 = *(void *)(v11 + 64);
  if (v13) {
    uint64_t v20 = v19;
  }
  else {
    uint64_t v20 = v19 + 1;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v21 = *(void *)(v6 + 64) + v17;
  uint64_t v22 = *(void *)(v8 + 64) + 7;
  uint64_t v23 = v18 + 40;
  if (a2 <= v16) {
    goto LABEL_35;
  }
  uint64_t v24 = v20 + ((v23 + ((v22 + (v21 & ~v17)) & 0xFFFFFFFFFFFFFFF8)) & ~v18);
  char v25 = 8 * v24;
  if (v24 > 3) {
    goto LABEL_18;
  }
  unsigned int v27 = ((a2 - v16 + ~(-1 << v25)) >> v25) + 1;
  if (HIWORD(v27))
  {
    int v26 = *(_DWORD *)((char *)a1 + v24);
    if (v26) {
      goto LABEL_25;
    }
LABEL_35:
    if (v7 == v16)
    {
      size_t v31 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v6 + 48);
      uint64_t v32 = a1;
      uint64_t v33 = v7;
      uint64_t v34 = v5;
      return v31(v32, v33, v34);
    }
    uint64_t v32 = (unsigned __int16 *)(((unint64_t)a1 + v21) & ~v17);
    if (v9 == v16)
    {
      size_t v31 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v8 + 48);
      uint64_t v33 = v9;
      uint64_t v34 = v39;
      return v31(v32, v33, v34);
    }
    unint64_t v36 = ((unint64_t)v32 + v22) & 0xFFFFFFFFFFFFFFF8;
    if ((v15 & 0x80000000) == 0)
    {
      unint64_t v37 = *(void *)(v36 + 24);
      if (v37 >= 0xFFFFFFFF) {
        LODWORD(v37) = -1;
      }
      return (v37 + 1);
    }
    if (v13 >= 2)
    {
      unsigned int v38 = (*(uint64_t (**)(unint64_t))(v12 + 48))((v23 + v36) & ~v18);
      if (v38 >= 2) {
        return v38 - 1;
      }
      else {
        return 0;
      }
    }
    return 0;
  }
  if (v27 > 0xFF)
  {
    int v26 = *(unsigned __int16 *)((char *)a1 + v24);
    if (*(unsigned __int16 *)((char *)a1 + v24)) {
      goto LABEL_25;
    }
    goto LABEL_35;
  }
  if (v27 < 2) {
    goto LABEL_35;
  }
LABEL_18:
  int v26 = *((unsigned __int8 *)a1 + v24);
  if (!*((unsigned char *)a1 + v24)) {
    goto LABEL_35;
  }
LABEL_25:
  int v28 = (v26 - 1) << v25;
  if (v24 > 3) {
    int v28 = 0;
  }
  if (v24)
  {
    if (v24 <= 3) {
      int v29 = v24;
    }
    else {
      int v29 = 4;
    }
    switch(v29)
    {
      case 2:
        int v30 = *a1;
        break;
      case 3:
        int v30 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v30 = *(_DWORD *)a1;
        break;
      default:
        int v30 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v30 = 0;
  }
  return v16 + (v30 | v28) + 1;
}

void sub_1003DEE2C(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v38 = *(void *)(a4 + 16);
  uint64_t v6 = *(void *)(v38 - 8);
  uint64_t v37 = v6;
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v36 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v36 - 8);
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  if (v9 <= v7) {
    unsigned int v10 = v7;
  }
  else {
    unsigned int v10 = *(_DWORD *)(v8 + 84);
  }
  int v11 = 0;
  uint64_t v12 = *(void *)(type metadata accessor for UUID() - 8);
  unsigned int v13 = *(_DWORD *)(v12 + 84);
  unsigned int v14 = v13 - 1;
  if (!v13) {
    unsigned int v14 = 0;
  }
  uint64_t v15 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v16 = *(void *)(v8 + 64);
  uint64_t v17 = *(unsigned __int8 *)(v12 + 80);
  if (v10 <= v14) {
    unsigned int v18 = v14;
  }
  else {
    unsigned int v18 = v10;
  }
  if (v18 <= 0x7FFFFFFF) {
    unsigned int v19 = 0x7FFFFFFF;
  }
  else {
    unsigned int v19 = v18;
  }
  uint64_t v20 = *(void *)(v6 + 64) + v15;
  uint64_t v21 = v16 + 7;
  unint64_t v22 = (v17 + 40 + ((v16 + 7 + (v20 & ~v15)) & 0xFFFFFFFFFFFFFFF8)) & ~v17;
  if (v13) {
    uint64_t v23 = *(void *)(v12 + 64);
  }
  else {
    uint64_t v23 = *(void *)(v12 + 64) + 1;
  }
  size_t v24 = v23 + v22;
  if (a3 <= v19) {
    goto LABEL_23;
  }
  if (v24 <= 3)
  {
    unsigned int v25 = ((a3 - v19 + ~(-1 << (8 * v24))) >> (8 * v24)) + 1;
    if (HIWORD(v25))
    {
      int v11 = 4;
      if (v19 >= a2) {
        goto LABEL_31;
      }
LABEL_24:
      unsigned int v26 = ~v19 + a2;
      if (v24 < 4)
      {
        int v27 = (v26 >> (8 * v24)) + 1;
        if (v24)
        {
          int v28 = v26 & ~(-1 << (8 * v24));
          bzero(a1, v24);
          if (v24 == 3)
          {
            *(_WORD *)a1 = v28;
            a1[2] = BYTE2(v28);
          }
          else if (v24 == 2)
          {
            *(_WORD *)a1 = v28;
          }
          else
          {
            *a1 = v28;
          }
        }
      }
      else
      {
        bzero(a1, v24);
        *(_DWORD *)a1 = v26;
        int v27 = 1;
      }
      switch(v11)
      {
        case 1:
          a1[v24] = v27;
          break;
        case 2:
          *(_WORD *)&a1[v24] = v27;
          break;
        case 3:
LABEL_60:
          __break(1u);
          JUMPOUT(0x1003DF240);
        case 4:
          *(_DWORD *)&a1[v24] = v27;
          break;
        default:
          return;
      }
      return;
    }
    if (v25 >= 0x100) {
      int v11 = 2;
    }
    else {
      int v11 = v25 > 1;
    }
LABEL_23:
    if (v19 >= a2) {
      goto LABEL_31;
    }
    goto LABEL_24;
  }
  int v11 = 1;
  if (v19 < a2) {
    goto LABEL_24;
  }
LABEL_31:
  int v29 = a1;
  switch(v11)
  {
    case 1:
      a1[v24] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_36;
    case 2:
      *(_WORD *)&a1[v24] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_36;
    case 3:
      goto LABEL_60;
    case 4:
      *(_DWORD *)&a1[v24] = 0;
      goto LABEL_35;
    default:
LABEL_35:
      if (!a2) {
        return;
      }
LABEL_36:
      if (v7 == v19)
      {
        uint64_t v30 = v38;
        size_t v31 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v37 + 56);
        uint64_t v32 = a2;
        uint64_t v33 = v7;
LABEL_40:
        v31(v29, v32, v33, v30);
        return;
      }
      int v29 = (unsigned char *)((unint64_t)&a1[v20] & ~v15);
      if (v9 == v19)
      {
        size_t v31 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
        uint64_t v32 = a2;
        uint64_t v33 = v9;
        uint64_t v30 = v36;
        goto LABEL_40;
      }
      unint64_t v34 = (unint64_t)&v29[v21] & 0xFFFFFFFFFFFFFFF8;
      if ((v18 & 0x80000000) != 0)
      {
        if (v13 >= 2)
        {
          os_log_type_t v35 = *(void (**)(unint64_t, void))(v12 + 56);
          v35((v17 + 40 + v34) & ~v17, (a2 + 1));
        }
      }
      else if ((a2 & 0x80000000) != 0)
      {
        *(_OWORD *)(v34 + 8) = 0u;
        *(_OWORD *)(v34 + 24) = 0u;
        *(void *)unint64_t v34 = a2 ^ 0x80000000;
      }
      else
      {
        *(void *)(v34 + 24) = (a2 - 1);
      }
      break;
  }
}

uint64_t type metadata accessor for AttachedAccessoryEvents.EventAtTimeWithType()
{
  return sub_1000103A0();
}

uint64_t sub_1003DF280(char a1)
{
  if (a1) {
    return 4;
  }
  else {
    return 1;
  }
}

uint64_t sub_1003DF290(uint64_t a1)
{
  if (a1 == 4) {
    unsigned int v1 = 1;
  }
  else {
    unsigned int v1 = 2;
  }
  if (a1 == 1) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t sub_1003DF2A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return == infix<A>(_:_:)(a1, a2, a3, WitnessTable, &protocol witness table for Int);
}

uint64_t sub_1003DF31C(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return RawRepresentable<>.hashValue.getter(a1, a2, WitnessTable, &protocol witness table for Int);
}

uint64_t sub_1003DF388(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return RawRepresentable<>.hash(into:)(a1, a2, a3, WitnessTable, &protocol witness table for Int);
}

uint64_t sub_1003DF3F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return RawRepresentable<>._rawHashValue(seed:)(a1, a2, a3, WitnessTable, &protocol witness table for Int);
}

uint64_t sub_1003DF468@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1003DF290(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1003DF49C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1003DF280(*v1);
  *a1 = result;
  return result;
}

uint64_t sub_1003DF4D0()
{
  return sub_1003DF280(*v0);
}

uint64_t sub_1003DF4E0(char a1)
{
  if (a1) {
    return 4;
  }
  else {
    return 2;
  }
}

uint64_t sub_1003DF4F4(uint64_t a1)
{
  if (a1 == 4) {
    unsigned int v1 = 1;
  }
  else {
    unsigned int v1 = 2;
  }
  if (a1 == 2) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t sub_1003DF50C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return == infix<A>(_:_:)(a1, a2, a3, WitnessTable, &protocol witness table for Int);
}

uint64_t sub_1003DF580(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return RawRepresentable<>.hashValue.getter(a1, a2, WitnessTable, &protocol witness table for Int);
}

uint64_t sub_1003DF5EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return RawRepresentable<>.hash(into:)(a1, a2, a3, WitnessTable, &protocol witness table for Int);
}

uint64_t sub_1003DF65C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return RawRepresentable<>._rawHashValue(seed:)(a1, a2, a3, WitnessTable, &protocol witness table for Int);
}

uint64_t sub_1003DF6CC@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1003DF4F4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1003DF700@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1003DF4E0(*v1);
  *a1 = result;
  return result;
}

uint64_t sub_1003DF734()
{
  return sub_1003DF4E0(*v0);
}

uint64_t sub_1003DF744()
{
  return 2;
}

uint64_t sub_1003DF74C(char a1)
{
  return (a1 & 1u) + 3;
}

BOOL sub_1003DF758(char a1)
{
  return (a1 & 1) == 0;
}

BOOL sub_1003DF764(uint64_t a1, char a2)
{
  return (a2 & 1) == 0 && sub_1003DF77C(a1);
}

BOOL sub_1003DF77C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)v16 - v8;
  __chkstk_darwin(v7);
  int v11 = (char *)v16 - v10;
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  sub_1010AB6E4(v16[1]);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v11, a1, v2);
  Date.addingTimeInterval(_:)();
  static Date.trustedNow.getter((uint64_t)v6);
  Date.timeIntervalSince(_:)();
  double v13 = v12;
  unsigned int v14 = *(void (**)(char *, uint64_t))(v3 + 8);
  v14(v6, v2);
  v14(v9, v2);
  v14(v11, v2);
  return v13 <= 0.0;
}

uint64_t sub_1003DF98C(uint64_t a1)
{
  if (a1 == 4) {
    unsigned int v1 = 1;
  }
  else {
    unsigned int v1 = 2;
  }
  if (a1 == 3) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t sub_1003DF9A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return == infix<A>(_:_:)(a1, a2, a3, WitnessTable, &protocol witness table for Int);
}

uint64_t sub_1003DFA18(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return RawRepresentable<>.hashValue.getter(a1, a2, WitnessTable, &protocol witness table for Int);
}

uint64_t sub_1003DFA84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return RawRepresentable<>.hash(into:)(a1, a2, a3, WitnessTable, &protocol witness table for Int);
}

uint64_t sub_1003DFAF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return RawRepresentable<>._rawHashValue(seed:)(a1, a2, a3, WitnessTable, &protocol witness table for Int);
}

uint64_t sub_1003DFB64@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1003DF98C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1003DFB98@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1003DF74C(*v1);
  *a1 = result;
  return result;
}

uint64_t sub_1003DFBCC()
{
  return sub_1003DF74C(*v0);
}

BOOL sub_1003DFBDC()
{
  return sub_1003DF758(*v0);
}

BOOL sub_1003DFBEC(uint64_t a1)
{
  return sub_1003DF764(a1, *v1);
}

BOOL sub_1003DFBFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AttachedAccessoryEvents.EventAtTimeWithType();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v39 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v38 = (char *)&v38 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  double v12 = (char *)&v38 - v11;
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v38 - v14;
  uint64_t v16 = (void *)(a1 + *(int *)(v13 + 40));
  uint64_t v17 = v16[3];
  uint64_t v18 = v16[4];
  sub_10001CD44(v16, v17);
  uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t))(v18 + 8))(v17, v18);
  uint64_t v20 = (void *)(a2 + *(int *)(v4 + 40));
  uint64_t v22 = v20[3];
  uint64_t v21 = v20[4];
  sub_10001CD44(v20, v22);
  uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 8))(v22, v21);
  size_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v24(v15, a1, v4);
  v24(v12, a2, v4);
  if (v19 == v23) {
    char v25 = static Date.== infix(_:_:)();
  }
  else {
    char v25 = 0;
  }
  unsigned int v26 = *(void (**)(char *, uint64_t))(v5 + 8);
  v26(v12, v4);
  v26(v15, v4);
  int v27 = v38;
  v24(v38, a1, v4);
  int v28 = v39;
  v24(v39, a2, v4);
  if (v25)
  {
    int v29 = &v27[*(int *)(v4 + 40)];
    uint64_t v30 = *((void *)v29 + 3);
    uint64_t v31 = *((void *)v29 + 4);
    sub_10001CD44(v29, v30);
    int v32 = (*(unsigned __int8 (**)(uint64_t, uint64_t))(v31 + 16))(v30, v31);
    uint64_t v33 = &v28[*(int *)(v4 + 40)];
    uint64_t v34 = *((void *)v33 + 3);
    uint64_t v35 = *((void *)v33 + 4);
    sub_10001CD44(v33, v34);
    BOOL v36 = v32 == (*(unsigned __int8 (**)(uint64_t, uint64_t))(v35 + 16))(v34, v35);
  }
  else
  {
    BOOL v36 = 0;
  }
  v26(v27, v4);
  v26(v28, v4);
  return v36;
}

uint64_t sub_1003DFF0C(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for AttachedAccessoryEvents.EventAtTimeWithType();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)v39 - v10;
  double v12 = (void *)((char *)a1 + *(int *)(v9 + 40));
  uint64_t v13 = v12[3];
  uint64_t v14 = v12[4];
  v39[0] = v12;
  sub_10001CD44(v12, v13);
  LOBYTE(v40) = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 16))(v13, v14);
  int v40 = v40;
  uint64_t v15 = (void *)((char *)a2 + *(int *)(v4 + 40));
  uint64_t v16 = v15[3];
  uint64_t v17 = v15[4];
  sub_10001CD44(v15, v16);
  unsigned __int8 v18 = (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 16))(v16, v17);
  uint64_t v19 = *(void (**)(char *, void *, uint64_t))(v5 + 16);
  v39[1] = a1;
  uint64_t v20 = a1;
  uint64_t v21 = v8;
  v19(v11, v20, v4);
  v39[2] = a2;
  v19(v8, a2, v4);
  if (v40 == v18)
  {
    uint64_t v22 = *(void (**)(char *, uint64_t))(v5 + 8);
    v22(v11, v4);
    v22(v8, v4);
  }
  else
  {
    uint64_t v23 = &v11[*(int *)(v4 + 40)];
    uint64_t v24 = *((void *)v23 + 3);
    uint64_t v25 = *((void *)v23 + 4);
    sub_10001CD44(v23, v24);
    uint64_t v26 = (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8))(v24, v25);
    int v27 = &v21[*(int *)(v4 + 40)];
    uint64_t v29 = *((void *)v27 + 3);
    uint64_t v28 = *((void *)v27 + 4);
    sub_10001CD44(v27, v29);
    uint64_t v30 = (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 8))(v29, v28);
    uint64_t v31 = *(void (**)(char *, uint64_t))(v5 + 8);
    v31(v11, v4);
    v31(v21, v4);
    if (v26 != v30)
    {
      uint64_t v33 = v39[0][3];
      uint64_t v34 = v39[0][4];
      sub_10001CD44(v39[0], v33);
      uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 8))(v33, v34);
      uint64_t v36 = v15[3];
      uint64_t v37 = v15[4];
      sub_10001CD44(v15, v36);
      char v32 = v35 < (*(uint64_t (**)(uint64_t, uint64_t))(v37 + 8))(v36, v37);
      return v32 & 1;
    }
  }
  char v32 = static Date.> infix(_:_:)();
  return v32 & 1;
}

uint64_t sub_1003E0228(void *a1, void *a2)
{
  return sub_1003DFF0C(a1, a2);
}

BOOL sub_1003E0240(uint64_t a1, uint64_t a2)
{
  return sub_1003DFBFC(a1, a2);
}

uint64_t sub_1003E024C()
{
  return swift_getWitnessTable();
}

uint64_t sub_1003E0268()
{
  return swift_getWitnessTable();
}

unint64_t sub_1003E0288()
{
  unint64_t result = qword_101643808;
  if (!qword_101643808)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101643808);
  }
  return result;
}

uint64_t sub_1003E02DC()
{
  return swift_getWitnessTable();
}

uint64_t sub_1003E02F8()
{
  return swift_getWitnessTable();
}

uint64_t sub_1003E0314()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for CompanionPublishActivity()
{
  return self;
}

unint64_t sub_1003E0358(uint64_t a1)
{
  unint64_t result = sub_1003E0380();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1003E0380()
{
  unint64_t result = qword_1016438D0;
  if (!qword_1016438D0)
  {
    type metadata accessor for CompanionPublishActivity();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016438D0);
  }
  return result;
}

void *sub_1003E03D4(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for StableIdentifier();
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    v22[1] = v1;
    uint64_t v7 = (int *)type metadata accessor for OwnedBeaconRecord();
    uint64_t v8 = a1
       + ((*(unsigned __int8 *)(*((void *)v7 - 1) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*((void *)v7 - 1) + 80));
    uint64_t v9 = a1;
    uint64_t v10 = *(void *)(*((void *)v7 - 1) + 72);
    v22[0] = v9;
    swift_bridgeObjectRetain();
    uint64_t v25 = _swiftEmptyArrayStorage;
    uint64_t v23 = v10;
    uint64_t v24 = v3;
    while (1)
    {
      sub_100418628(v8 + v7[6], (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 3) {
        break;
      }
      if (EnumCaseMultiPayload == 2)
      {
        sub_10000588C(&qword_1016555E0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_9;
      }
      sub_100418B1C((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
LABEL_4:
      v8 += v10;
      if (!--v6)
      {
        swift_bridgeObjectRelease();
        return v25;
      }
    }
    sub_10000588C((uint64_t *)&unk_1016565E0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_9:
    swift_bridgeObjectRelease();
    uint64_t v12 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t))(*(void *)(v12 - 8) + 8))(v5, v12);
    uint64_t v13 = sub_1002AAF08(*(void *)(v8 + v7[16]), *(void *)(v8 + v7[17]));
    if (v14 >> 60 != 15)
    {
      uint64_t v15 = v13;
      unint64_t v16 = v14;
      if (swift_isUniquelyReferenced_nonNull_native()) {
        uint64_t v17 = v25;
      }
      else {
        uint64_t v17 = sub_100A70494(0, v25[2] + 1, 1, v25);
      }
      unint64_t v19 = v17[2];
      unint64_t v18 = v17[3];
      if (v19 >= v18 >> 1) {
        uint64_t v17 = sub_100A70494((void *)(v18 > 1), v19 + 1, 1, v17);
      }
      void v17[2] = v19 + 1;
      uint64_t v25 = v17;
      uint64_t v20 = &v17[2 * v19];
      v20[4] = v15;
      v20[5] = v16;
      uint64_t v10 = v23;
    }
    goto LABEL_4;
  }
  return _swiftEmptyArrayStorage;
}

uint64_t sub_1003E06C8(uint64_t a1)
{
  uint64_t v42 = sub_10000588C((uint64_t *)&unk_1016477D0);
  uint64_t v2 = __chkstk_darwin(v42);
  unint64_t v41 = (uint64_t *)((char *)&v36 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v4 = __chkstk_darwin(v2);
  int v40 = (uint64_t *)((char *)&v36 - v5);
  __chkstk_darwin(v4);
  uint64_t v39 = (uint64_t *)((char *)&v36 - v6);
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v37 = a1 + 64;
  uint64_t v8 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v9 = -1;
  if (v8 < 64) {
    uint64_t v9 = ~(-1 << v8);
  }
  unint64_t v10 = v9 & v7;
  int64_t v38 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v43 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v12 = 0;
  uint64_t v13 = _swiftEmptyArrayStorage;
  unint64_t v14 = v40;
  Swift::String v45 = _swiftEmptyArrayStorage;
  if (!v10) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v15 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  int64_t v44 = v12;
  for (unint64_t i = v15 | (v12 << 6); ; unint64_t i = __clz(__rbit64(v18)) + (v19 << 6))
  {
    uint64_t v21 = *(void *)(v43 + 56);
    uint64_t v22 = (uint64_t *)(*(void *)(v43 + 48) + 16 * i);
    uint64_t v23 = *v22;
    unint64_t v24 = v22[1];
    uint64_t v25 = v21 + *(void *)(*(void *)(type metadata accessor for OwnedBeaconGroup.PairingState(0) - 8) + 72) * i;
    uint64_t v26 = v42;
    int v27 = v39;
    sub_100418628(v25, (uint64_t)v39 + *(int *)(v42 + 48), type metadata accessor for OwnedBeaconGroup.PairingState);
    uint64_t *v27 = v23;
    v27[1] = v24;
    sub_10001D608((uint64_t)v27, (uint64_t)v14, (uint64_t *)&unk_1016477D0);
    uint64_t v28 = *(int *)(v26 + 48);
    uint64_t v29 = v41;
    uint64_t v30 = (uint64_t)v41 + v28;
    uint64_t v31 = *v14;
    unint64_t v32 = v14[1];
    *unint64_t v41 = *v14;
    v29[1] = v32;
    sub_100418628((uint64_t)v14 + v28, (uint64_t)v29 + v28, type metadata accessor for OwnedBeaconGroup.PairingState);
    sub_1000361E0(v23, v24);
    sub_1000361E0(v31, v32);
    sub_100418B1C(v30, type metadata accessor for OwnedBeaconGroup.PairingState);
    sub_10001DAB4((uint64_t)v14, (uint64_t *)&unk_1016477D0);
    uint64_t v13 = v45;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_100A6EB48(0, v13[2] + 1, 1, v13);
      uint64_t v13 = (void *)result;
    }
    unint64_t v34 = v13[2];
    unint64_t v33 = v13[3];
    if (v34 >= v33 >> 1)
    {
      uint64_t result = (uint64_t)sub_100A6EB48((void *)(v33 > 1), v34 + 1, 1, v13);
      uint64_t v13 = (void *)result;
    }
    v13[2] = v34 + 1;
    uint64_t v35 = &v13[2 * v34];
    v35[4] = v31;
    v35[5] = v32;
    int64_t v12 = v44;
    Swift::String v45 = v13;
    if (v10) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v17 >= v38) {
      goto LABEL_27;
    }
    unint64_t v18 = *(void *)(v37 + 8 * v17);
    int64_t v19 = v12 + 1;
    if (!v18)
    {
      int64_t v19 = v12 + 2;
      if (v12 + 2 >= v38) {
        goto LABEL_27;
      }
      unint64_t v18 = *(void *)(v37 + 8 * v19);
      if (!v18)
      {
        int64_t v19 = v12 + 3;
        if (v12 + 3 >= v38) {
          goto LABEL_27;
        }
        unint64_t v18 = *(void *)(v37 + 8 * v19);
        if (!v18)
        {
          int64_t v19 = v12 + 4;
          if (v12 + 4 >= v38) {
            goto LABEL_27;
          }
          unint64_t v18 = *(void *)(v37 + 8 * v19);
          if (!v18) {
            break;
          }
        }
      }
    }
LABEL_20:
    unint64_t v10 = (v18 - 1) & v18;
    int64_t v44 = v19;
  }
  uint64_t v20 = v12 + 5;
  if (v12 + 5 >= v38)
  {
LABEL_27:
    swift_release();
    return (uint64_t)v13;
  }
  unint64_t v18 = *(void *)(v37 + 8 * v20);
  if (v18)
  {
    int64_t v19 = v12 + 5;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v19 = v20 + 1;
    if (__OFADD__(v20, 1)) {
      break;
    }
    if (v19 >= v38) {
      goto LABEL_27;
    }
    unint64_t v18 = *(void *)(v37 + 8 * v19);
    ++v20;
    if (v18) {
      goto LABEL_20;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_1003E0A70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v46 = a2;
  uint64_t v3 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  uint64_t v54 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_1016477D0);
  uint64_t v45 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v53 = (_OWORD *)((char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (_OWORD *)((char *)&v44 - v10);
  __chkstk_darwin(v9);
  uint64_t v51 = (uint64_t *)((char *)&v44 - v12);
  uint64_t v13 = *(void *)(a1 + 64);
  uint64_t v48 = a1 + 64;
  uint64_t v14 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & v13;
  Swift::String v57 = v5;
  int64_t v49 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v50 = v5 + 2;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v18 = 0;
  uint64_t v47 = v3;
  uint64_t v52 = v11;
  while (1)
  {
    if (v16)
    {
      uint64_t v55 = (v16 - 1) & v16;
      int64_t v56 = v18;
      unint64_t v19 = __clz(__rbit64(v16)) | (v18 << 6);
      goto LABEL_24;
    }
    int64_t v20 = v18 + 1;
    if (__OFADD__(v18, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v20 >= v49) {
      goto LABEL_30;
    }
    unint64_t v21 = *(void *)(v48 + 8 * v20);
    int64_t v22 = v18 + 1;
    if (!v21)
    {
      int64_t v22 = v18 + 2;
      if (v18 + 2 >= v49) {
        goto LABEL_30;
      }
      unint64_t v21 = *(void *)(v48 + 8 * v22);
      if (!v21)
      {
        int64_t v22 = v18 + 3;
        if (v18 + 3 >= v49) {
          goto LABEL_30;
        }
        unint64_t v21 = *(void *)(v48 + 8 * v22);
        if (!v21)
        {
          int64_t v22 = v18 + 4;
          if (v18 + 4 >= v49) {
            goto LABEL_30;
          }
          unint64_t v21 = *(void *)(v48 + 8 * v22);
          if (!v21) {
            break;
          }
        }
      }
    }
LABEL_23:
    uint64_t v55 = (v21 - 1) & v21;
    int64_t v56 = v22;
    unint64_t v19 = __clz(__rbit64(v21)) + (v22 << 6);
LABEL_24:
    unint64_t v24 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v19);
    uint64_t v25 = *v24;
    unint64_t v26 = v24[1];
    int v27 = v51;
    sub_100418628(*(void *)(a1 + 56) + *(void *)(v54 + 72) * v19, (uint64_t)v51 + *(int *)(v6 + 48), type metadata accessor for OwnedBeaconGroup.PairingState);
    uint64_t *v27 = v25;
    v27[1] = v26;
    sub_10001D608((uint64_t)v27, (uint64_t)v11, (uint64_t *)&unk_1016477D0);
    uint64_t v28 = *(int *)(v6 + 48);
    uint64_t v29 = v53;
    uint64_t v30 = (uint64_t)v53 + v28;
    *uint64_t v53 = *v11;
    sub_100418628((uint64_t)v11 + v28, (uint64_t)v29 + v28, type metadata accessor for OwnedBeaconGroup.PairingState);
    sub_100418628(v30, (uint64_t)v57, type metadata accessor for OwnedBeaconGroup.PairingState);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload != 1)
      {
        sub_1000361E0(v25, v26);
        sub_100418B1C((uint64_t)v57, type metadata accessor for OwnedBeaconGroup.PairingState);
        sub_100418B1C(v30, type metadata accessor for OwnedBeaconGroup.PairingState);
        goto LABEL_5;
      }
      unint64_t v32 = (int *)sub_10000588C(&qword_101643D80);
      uint64_t v33 = (uint64_t)v57;
      unint64_t v34 = (uint64_t *)&v57[v32[16]];
      uint64_t v35 = v6;
      uint64_t v36 = a1;
      uint64_t v38 = *v34;
      unint64_t v37 = v34[1];
      sub_1000361E0(v25, v26);
      uint64_t v39 = v38;
      a1 = v36;
      uint64_t v6 = v35;
      sub_100037A24(v39, v37);
      int v40 = v50[v32[24]];
      sub_10001DAB4(v33 + v32[12], (uint64_t *)&unk_1016477E0);
      uint64_t v41 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v41 - 8) + 8))(v33, v41);
    }
    else
    {
      uint64_t v42 = sub_10000588C((uint64_t *)&unk_101647810);
      int v40 = v50[*(int *)(v42 + 48)];
      sub_1000361E0(v25, v26);
      sub_10001DAB4((uint64_t)v57, (uint64_t *)&unk_1016477E0);
    }
    sub_100418B1C(v30, type metadata accessor for OwnedBeaconGroup.PairingState);
    if (v40 == 2)
    {
      swift_release();
      uint64_t v43 = v46;
      sub_10001D608((uint64_t)v52, v46, (uint64_t *)&unk_1016477D0);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v45 + 56))(v43, 0, 1, v6);
    }
LABEL_5:
    uint64_t v11 = v52;
    uint64_t result = sub_10001DAB4((uint64_t)v52, (uint64_t *)&unk_1016477D0);
    unint64_t v16 = v55;
    int64_t v18 = v56;
  }
  uint64_t v23 = v18 + 5;
  if (v18 + 5 >= v49)
  {
LABEL_30:
    swift_release();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v45 + 56))(v46, 1, 1, v6);
  }
  unint64_t v21 = *(void *)(v48 + 8 * v23);
  if (v21)
  {
    int64_t v22 = v18 + 5;
    goto LABEL_23;
  }
  while (1)
  {
    int64_t v22 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v22 >= v49) {
      goto LABEL_30;
    }
    unint64_t v21 = *(void *)(v48 + 8 * v22);
    ++v23;
    if (v21) {
      goto LABEL_23;
    }
  }
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_1003E0FAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = a2;
  uint64_t v3 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  uint64_t v55 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_1016477D0);
  uint64_t v48 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v54 = (_OWORD *)((char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v59 = (_OWORD *)((char *)&v48 - v10);
  __chkstk_darwin(v9);
  uint64_t v53 = (uint64_t *)((char *)&v48 - v11);
  uint64_t v12 = *(void *)(a1 + 64);
  uint64_t v50 = a1 + 64;
  uint64_t v13 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v14 = -1;
  if (v13 < 64) {
    uint64_t v14 = ~(-1 << v13);
  }
  unint64_t v15 = v14 & v12;
  int64_t v51 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v52 = v5 + 2;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v17 = 0;
  int64_t v56 = v5;
  if (!v15) {
    goto LABEL_5;
  }
LABEL_4:
  uint64_t v57 = (v15 - 1) & v15;
  int64_t v58 = v17;
  for (unint64_t i = __clz(__rbit64(v15)) | (v17 << 6); ; unint64_t i = __clz(__rbit64(v20)) + (v21 << 6))
  {
    uint64_t v23 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v25 = *v23;
    unint64_t v24 = v23[1];
    unint64_t v26 = v53;
    sub_100418628(*(void *)(a1 + 56) + *(void *)(v55 + 72) * i, (uint64_t)v53 + *(int *)(v6 + 48), type metadata accessor for OwnedBeaconGroup.PairingState);
    *unint64_t v26 = v25;
    v26[1] = v24;
    uint64_t v27 = (uint64_t)v26;
    uint64_t v28 = v59;
    sub_10001D608(v27, (uint64_t)v59, (uint64_t *)&unk_1016477D0);
    uint64_t v29 = *(int *)(v6 + 48);
    uint64_t v30 = v54;
    uint64_t v31 = (uint64_t)v54 + v29;
    *uint64_t v54 = *v28;
    sub_100418628((uint64_t)v28 + v29, (uint64_t)v30 + v29, type metadata accessor for OwnedBeaconGroup.PairingState);
    sub_100418628(v31, (uint64_t)v5, type metadata accessor for OwnedBeaconGroup.PairingState);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload != 1)
      {
        sub_1000361E0(v25, v24);
        sub_100418B1C((uint64_t)v5, type metadata accessor for OwnedBeaconGroup.PairingState);
        sub_100418B1C(v31, type metadata accessor for OwnedBeaconGroup.PairingState);
LABEL_30:
        swift_release();
        uint64_t v47 = v49;
        sub_10001D608((uint64_t)v59, v49, (uint64_t *)&unk_1016477D0);
        return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v48 + 56))(v47, 0, 1, v6);
      }
      uint64_t v33 = (int *)sub_10000588C(&qword_101643D80);
      unint64_t v34 = (uint64_t *)&v5[v33[16]];
      uint64_t v35 = v3;
      uint64_t v36 = v6;
      uint64_t v37 = a1;
      uint64_t v39 = *v34;
      unint64_t v38 = v34[1];
      sub_1000361E0(v25, v24);
      uint64_t v40 = v39;
      a1 = v37;
      uint64_t v6 = v36;
      uint64_t v3 = v35;
      sub_100037A24(v40, v38);
      int v41 = v52[v33[24]];
      uint64_t v42 = v33[12];
      uint64_t v43 = v56;
      sub_10001DAB4((uint64_t)&v56[v42], (uint64_t *)&unk_1016477E0);
      uint64_t v44 = type metadata accessor for UUID();
      (*(void (**)(char *, uint64_t))(*(void *)(v44 - 8) + 8))(v43, v44);
    }
    else
    {
      uint64_t v45 = sub_10000588C((uint64_t *)&unk_101647810);
      uint64_t v46 = (uint64_t)v5;
      int v41 = v52[*(int *)(v45 + 48)];
      sub_1000361E0(v25, v24);
      sub_10001DAB4(v46, (uint64_t *)&unk_1016477E0);
    }
    sub_100418B1C(v31, type metadata accessor for OwnedBeaconGroup.PairingState);
    if (v41 != 2) {
      goto LABEL_30;
    }
    uint64_t result = sub_10001DAB4((uint64_t)v59, (uint64_t *)&unk_1016477D0);
    uint64_t v5 = v56;
    unint64_t v15 = v57;
    int64_t v17 = v58;
    if (v57) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v19 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v19 >= v51) {
      goto LABEL_28;
    }
    unint64_t v20 = *(void *)(v50 + 8 * v19);
    int64_t v21 = v17 + 1;
    if (!v20)
    {
      int64_t v21 = v17 + 2;
      if (v17 + 2 >= v51) {
        goto LABEL_28;
      }
      unint64_t v20 = *(void *)(v50 + 8 * v21);
      if (!v20)
      {
        int64_t v21 = v17 + 3;
        if (v17 + 3 >= v51) {
          goto LABEL_28;
        }
        unint64_t v20 = *(void *)(v50 + 8 * v21);
        if (!v20)
        {
          int64_t v21 = v17 + 4;
          if (v17 + 4 >= v51) {
            goto LABEL_28;
          }
          unint64_t v20 = *(void *)(v50 + 8 * v21);
          if (!v20) {
            break;
          }
        }
      }
    }
LABEL_20:
    uint64_t v57 = (v20 - 1) & v20;
    int64_t v58 = v21;
  }
  uint64_t v22 = v17 + 5;
  if (v17 + 5 >= v51)
  {
LABEL_28:
    swift_release();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 56))(v49, 1, 1, v6);
  }
  unint64_t v20 = *(void *)(v50 + 8 * v22);
  if (v20)
  {
    int64_t v21 = v17 + 5;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v21 = v22 + 1;
    if (__OFADD__(v22, 1)) {
      break;
    }
    if (v21 >= v51) {
      goto LABEL_28;
    }
    unint64_t v20 = *(void *)(v50 + 8 * v21);
    ++v22;
    if (v20) {
      goto LABEL_20;
    }
  }
LABEL_32:
  __break(1u);
  return result;
}

void *sub_1003E14F0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v66 = sub_10000588C((uint64_t *)&unk_1016477D0);
  uint64_t v4 = __chkstk_darwin(v66);
  BOOL v65 = (uint64_t *)((char *)&v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v70 = (uint64_t *)((char *)&v58 - v7);
  uint64_t v8 = __chkstk_darwin(v6);
  os_log_type_t v64 = (uint64_t *)((char *)&v58 - v9);
  __chkstk_darwin(v8);
  uint64_t v63 = (uint64_t *)((char *)&v58 - v10);
  int64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = _swiftEmptyArrayStorage;
  if (v11)
  {
    Swift::String v76 = _swiftEmptyArrayStorage;
    sub_1000B765C(0, v11, 0);
    uint64_t v14 = sub_100803228(a1);
    uint64_t v15 = 0;
    uint64_t v16 = a1 + 64;
    char v17 = *(unsigned char *)(a1 + 32);
    uint64_t v58 = a1 + 80;
    int64_t v59 = v11;
    uint64_t v61 = a1 + 64;
    uint64_t v62 = a1;
    uint64_t v60 = v13;
    while (1)
    {
      if (v14 < 0 || v14 >= 1 << v17)
      {
        __break(1u);
LABEL_41:
        __break(1u);
LABEL_42:
        __break(1u);
LABEL_43:
        __break(1u);
LABEL_44:
        __break(1u);
LABEL_45:
        __break(1u);
LABEL_46:
        __break(1u);
LABEL_47:
        __break(1u);
LABEL_48:
        __break(1u);
LABEL_49:
        __break(1u);
        JUMPOUT(0x1003E1A48);
      }
      unint64_t v20 = (unint64_t)v14 >> 6;
      if ((*(void *)(v16 + 8 * ((unint64_t)v14 >> 6)) & (1 << v14)) == 0) {
        goto LABEL_41;
      }
      if (*(_DWORD *)(a1 + 36) != v13) {
        goto LABEL_42;
      }
      uint64_t v71 = v2;
      uint64_t v67 = v15 + 1;
      uint64_t v21 = v66;
      uint64_t v22 = (uint64_t)v63;
      uint64_t v23 = (uint64_t)v63 + *(int *)(v66 + 48);
      uint64_t v68 = v14 & 0x3F;
      uint64_t v69 = 1 << v14;
      uint64_t v24 = *(void *)(a1 + 56);
      uint64_t v25 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v14);
      uint64_t v26 = *v25;
      unint64_t v27 = v25[1];
      *uint64_t v63 = *v25;
      *(void *)(v22 + 8) = v27;
      uint64_t v28 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
      sub_100418628(v24 + *(void *)(*(void *)(v28 - 8) + 72) * v14, v23, type metadata accessor for OwnedBeaconGroup.PairingState);
      uint64_t v29 = v64;
      uint64_t *v64 = v26;
      v29[1] = v27;
      sub_100418628(v23, (uint64_t)v29 + *(int *)(v21 + 48), type metadata accessor for OwnedBeaconGroup.PairingState);
      uint64_t v30 = (uint64_t)v29;
      uint64_t v31 = v70;
      sub_10001D608(v30, (uint64_t)v70, (uint64_t *)&unk_1016477D0);
      sub_1000361E0(v26, v27);
      sub_1000361E0(v26, v27);
      sub_10001DAB4(v22, (uint64_t *)&unk_1016477D0);
      uint64_t v32 = *(int *)(v21 + 48);
      uint64_t v33 = v65;
      uint64_t v34 = (uint64_t)v65 + v32;
      uint64_t v36 = *v31;
      unint64_t v35 = v31[1];
      uint64_t *v65 = *v31;
      v33[1] = v35;
      sub_100418628((uint64_t)v31 + v32, (uint64_t)v33 + v32, type metadata accessor for OwnedBeaconGroup.PairingState);
      uint64_t v74 = v36;
      unint64_t v75 = v35;
      uint64_t v37 = 0;
      switch(v35 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v36), v36)) {
            goto LABEL_48;
          }
          uint64_t v37 = HIDWORD(v36) - (int)v36;
LABEL_15:
          sub_1000361E0(v36, v35);
          sub_1000361E0(v36, v35);
LABEL_16:
          uint64_t v40 = 20 - v37;
          if (__OFSUB__(20, v37)) {
            goto LABEL_43;
          }
          if (v40)
          {
            if (v40 <= 14)
            {
              if (v40 < 0) {
                goto LABEL_47;
              }
              uint64_t v42 = 0;
              unint64_t v43 = (unint64_t)(20 - v37) << 48;
            }
            else
            {
              type metadata accessor for __DataStorage();
              swift_allocObject();
              uint64_t v41 = __DataStorage.init(length:)();
              if ((unint64_t)v40 >= 0x7FFFFFFF)
              {
                type metadata accessor for Data.RangeReference();
                uint64_t v42 = swift_allocObject();
                *(void *)(v42 + 16) = 0;
                *(void *)(v42 + 24) = v40;
                unint64_t v43 = v41 | 0x8000000000000000;
              }
              else
              {
                uint64_t v42 = v40 << 32;
                unint64_t v43 = v41 | 0x4000000000000000;
              }
            }
          }
          else
          {
            uint64_t v42 = 0;
            unint64_t v43 = 0xC000000000000000;
          }
          uint64_t v44 = v71;
          uint64_t v72 = v42;
          unint64_t v73 = v43;
          sub_10072AD40(&v72, 0);
          uint64_t v71 = v44;
          uint64_t v45 = v72;
          unint64_t v46 = v73;
          Data.append(_:)();
          sub_10001CFB8(v45, v46);
          sub_10001CFB8(v36, v35);
          uint64_t v47 = v74;
          unint64_t v48 = v75;
          sub_100418B1C(v34, type metadata accessor for OwnedBeaconGroup.PairingState);
          sub_10001DAB4((uint64_t)v70, (uint64_t *)&unk_1016477D0);
          uint64_t v12 = v76;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1000B765C(0, v12[2] + 1, 1);
            uint64_t v12 = v76;
          }
          unint64_t v50 = v12[2];
          unint64_t v49 = v12[3];
          if (v50 >= v49 >> 1)
          {
            sub_1000B765C(v49 > 1, v50 + 1, 1);
            uint64_t v12 = v76;
          }
          v12[2] = v50 + 1;
          int64_t v51 = &v12[2 * v50];
          v51[4] = v47;
          v51[5] = v48;
          a1 = v62;
          char v17 = *(unsigned char *)(v62 + 32);
          unint64_t v18 = 1 << v17;
          if (v14 >= 1 << v17) {
            goto LABEL_44;
          }
          uint64_t v16 = v61;
          uint64_t v52 = *(void *)(v61 + 8 * v20);
          if ((v52 & v69) == 0) {
            goto LABEL_45;
          }
          LODWORD(v13) = v60;
          if (*(_DWORD *)(v62 + 36) != v60) {
            goto LABEL_46;
          }
          unint64_t v53 = v52 & (-2 << v68);
          if (v53)
          {
            unint64_t v18 = __clz(__rbit64(v53)) | v14 & 0xFFFFFFFFFFFFFFC0;
          }
          else
          {
            unint64_t v54 = v20 + 1;
            unint64_t v55 = (v18 + 63) >> 6;
            if (v20 + 1 < v55)
            {
              unint64_t v56 = *(void *)(v61 + 8 * v54);
              uint64_t v2 = v71;
              int64_t v19 = v59;
              if (v56)
              {
LABEL_38:
                unint64_t v18 = __clz(__rbit64(v56)) + (v54 << 6);
              }
              else
              {
                while (v55 - 2 != v20)
                {
                  unint64_t v56 = *(void *)(v58 + 8 * v20++);
                  if (v56)
                  {
                    unint64_t v54 = v20 + 1;
                    goto LABEL_38;
                  }
                }
              }
              goto LABEL_5;
            }
          }
          uint64_t v2 = v71;
          int64_t v19 = v59;
LABEL_5:
          uint64_t v15 = v67;
          uint64_t v14 = v18;
          if (v67 == v19) {
            return v12;
          }
          break;
        case 2uLL:
          uint64_t v39 = *(void *)(v36 + 16);
          uint64_t v38 = *(void *)(v36 + 24);
          uint64_t v37 = v38 - v39;
          if (!__OFSUB__(v38, v39)) {
            goto LABEL_15;
          }
          goto LABEL_49;
        case 3uLL:
          goto LABEL_16;
        default:
          uint64_t v37 = BYTE6(v35);
          goto LABEL_16;
      }
    }
  }
  return v12;
}

uint64_t sub_1003E1A58()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170DE38);
  sub_100010324(v0, (uint64_t)qword_10170DE38);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_1003E1ADC()
{
  if (qword_101636AC0 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();

  return sub_100010324(v0, (uint64_t)qword_10170DE38);
}

uint64_t sub_1003E1B40()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  sub_10001E384(v0, qword_1016438D8);
  sub_100010324(v0, (uint64_t)qword_1016438D8);
  return static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)();
}

id sub_1003E1B90()
{
  uint64_t v1 = *(void **)(v0 + 128);
  id v2 = v1;
  if (v1 == (void *)1)
  {
    swift_unownedRetainStrong();
    swift_unownedRetain();
    swift_unownedRetain();
    swift_release();
    uint64_t v3 = self;
    swift_unownedRetainStrong();
    id v4 = *(id *)(v0 + 48);
    swift_release();
    [v3 setSharedInstanceQueue:v4];

    id v2 = [v3 sharedInstance];
    swift_unownedRelease();
    swift_unownedRelease();
    uint64_t v5 = *(void **)(v0 + 128);
    *(void *)(v0 + 128) = v2;
    id v6 = v2;
    sub_100419ABC(v5);
  }
  sub_100419ACC(v1);
  return v2;
}

unint64_t sub_1003E1C68()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  id v4 = (uint64_t *)((char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = *(void **)(v0 + 48);
  *id v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  uint64_t v8 = *(void (**)(void *, uint64_t))(v2 + 8);
  unint64_t v7 = v2 + 8;
  v8(v4, v1);
  if ((v5 & 1) == 0)
  {
    __break(1u);
    swift_once();
    uint64_t v12 = type metadata accessor for Logger();
    sub_100010324(v12, (uint64_t)qword_10170F068);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      v24[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136446210;
      *(void *)&v23[0] = v4;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v16 = String.init<A>(describing:)();
      *(void *)&v23[0] = sub_1008FA0F0(v16, v17, v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Unable to retrieve lastRetryAttempt due to %{public}s", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    unint64_t v18 = sub_10092E74C((uint64_t)_swiftEmptyArrayStorage);
    swift_errorRelease();
    goto LABEL_14;
  }
  id v9 = [self standardUserDefaults];
  NSString v10 = String._bridgeToObjectiveC()();
  id v11 = [v9 objectForKey:v10];

  if (v11)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v23, 0, sizeof(v23));
  }
  sub_10001D608((uint64_t)v23, (uint64_t)v24, (uint64_t *)&unk_101644360);
  if (v24[3])
  {
    if (swift_dynamicCast())
    {
      uint64_t v1 = v21;
      unint64_t v7 = v22;
      sub_1000361E0(v21, v22);
      type metadata accessor for MACAddress();
      type metadata accessor for Date();
      sub_100414C30(&qword_10163E568, (void (*)(uint64_t))&type metadata accessor for MACAddress);
      sub_100414C30(&qword_1016477B0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
      sub_100414C30((unint64_t *)&unk_10165F130, (void (*)(uint64_t))&type metadata accessor for MACAddress);
      sub_100414C30(&qword_10163ACC0, (void (*)(uint64_t))&type metadata accessor for Date);
      sub_100414C30((unint64_t *)&unk_10163ACE0, (void (*)(uint64_t))&type metadata accessor for Date);
      unint64_t v18 = Dictionary<>.init(dataRepresentation:)();
LABEL_14:
      sub_10001CFB8(v1, v7);
      return v18;
    }
  }
  else
  {
    sub_10001DAB4((uint64_t)v24, (uint64_t *)&unk_101644360);
  }
  return sub_10092E74C((uint64_t)_swiftEmptyArrayStorage);
}

void sub_1003E2180()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  id v4 = (uint64_t *)((char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = *(void **)(v0 + 48);
  *id v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if (v5)
  {
    id v7 = [self standardUserDefaults];
    type metadata accessor for MACAddress();
    type metadata accessor for Date();
    sub_100414C30(&qword_10163E568, (void (*)(uint64_t))&type metadata accessor for MACAddress);
    sub_100414C30(&qword_1016477B0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
    sub_100414C30((unint64_t *)&unk_10165F130, (void (*)(uint64_t))&type metadata accessor for MACAddress);
    sub_100414C30(&qword_10163ACC0, (void (*)(uint64_t))&type metadata accessor for Date);
    sub_100414C30((unint64_t *)&unk_10163ACE0, (void (*)(uint64_t))&type metadata accessor for Date);
    uint64_t v8 = Dictionary<>.dataRepresentation.getter();
    unint64_t v10 = v9;
    swift_bridgeObjectRelease();
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_10001CFB8(v8, v10);
    NSString v12 = String._bridgeToObjectiveC()();
    [v7 setObject:isa forKey:v12];
  }
  else
  {
    __break(1u);
  }
}

unint64_t sub_1003E2458()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  id v4 = (uint64_t *)((char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = *(void **)(v0 + 48);
  *id v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  uint64_t v8 = *(void (**)(void *, uint64_t))(v2 + 8);
  unint64_t v7 = v2 + 8;
  v8(v4, v1);
  if ((v5 & 1) == 0)
  {
    __break(1u);
    swift_once();
    uint64_t v12 = type metadata accessor for Logger();
    sub_100010324(v12, (uint64_t)qword_10170F068);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      v24[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136446210;
      *(void *)&v23[0] = v4;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v16 = String.init<A>(describing:)();
      *(void *)&v23[0] = sub_1008FA0F0(v16, v17, v24);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Unable to retrieve lastRetryAttempt due to %{public}s", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    unint64_t v18 = sub_10092E788((uint64_t)_swiftEmptyArrayStorage);
    swift_errorRelease();
    goto LABEL_14;
  }
  id v9 = [self standardUserDefaults];
  NSString v10 = String._bridgeToObjectiveC()();
  id v11 = [v9 objectForKey:v10];

  if (v11)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v23, 0, sizeof(v23));
  }
  sub_10001D608((uint64_t)v23, (uint64_t)v24, (uint64_t *)&unk_101644360);
  if (v24[3])
  {
    if (swift_dynamicCast())
    {
      uint64_t v1 = v21;
      unint64_t v7 = v22;
      sub_1000361E0(v21, v22);
      type metadata accessor for MACAddress();
      sub_100414C30(&qword_10163E568, (void (*)(uint64_t))&type metadata accessor for MACAddress);
      sub_100414C30(&qword_1016477B0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
      sub_100414C30((unint64_t *)&unk_10165F130, (void (*)(uint64_t))&type metadata accessor for MACAddress);
      unint64_t v18 = Dictionary<>.init(dataRepresentation:)();
LABEL_14:
      sub_10001CFB8(v1, v7);
      return v18;
    }
  }
  else
  {
    sub_10001DAB4((uint64_t)v24, (uint64_t *)&unk_101644360);
  }
  return sub_10092E788((uint64_t)_swiftEmptyArrayStorage);
}

void sub_1003E2910()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  id v4 = (uint64_t *)((char *)&v13 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = *(void **)(v0 + 48);
  *id v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if (v5)
  {
    id v7 = [self standardUserDefaults];
    type metadata accessor for MACAddress();
    sub_100414C30(&qword_10163E568, (void (*)(uint64_t))&type metadata accessor for MACAddress);
    sub_100414C30(&qword_1016477B0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
    sub_100414C30((unint64_t *)&unk_10165F130, (void (*)(uint64_t))&type metadata accessor for MACAddress);
    uint64_t v8 = Dictionary<>.dataRepresentation.getter();
    unint64_t v10 = v9;
    swift_bridgeObjectRelease();
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    sub_10001CFB8(v8, v10);
    NSString v12 = String._bridgeToObjectiveC()();
    [v7 setObject:isa forKey:v12];
  }
  else
  {
    __break(1u);
  }
}

uint64_t sub_1003E2B74()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  char v6 = sub_1010ABF5C(v22);
  swift_bridgeObjectRelease();
  if (v6) {
    return 1;
  }
  if (qword_101636AC0 != -1) {
    swift_once();
  }
  uint64_t v7 = sub_100010324(v2, (uint64_t)qword_10170DE38);
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    unint64_t v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Pairing retry on all devices is NOT allowed from server. Checking for Me device or only connectable device.", v10, 2u);
    swift_slowDealloc();
  }

  if (qword_101637680 != -1) {
    swift_once();
  }
  swift_retain();
  AnyCurrentValuePublisher.value.getter();
  swift_release();
  int v11 = v22;
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, v7, v2);
  swift_retain();
  NSString v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 67240704;
    LODWORD(v22) = v11 == 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v14 + 8) = 2048;
    uint64_t v22 = *(void *)(v1 + 152);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v14 + 18) = 1026;
    uint64_t result = (uint64_t)[self defaultStore];
    if (!result)
    {
      __break(1u);
      goto LABEL_24;
    }
    uint64_t v16 = (void *)result;
    id v17 = [result aa_primaryAppleAccount];

    if (v17)
    {

      int v18 = 1;
    }
    else
    {
      int v18 = 0;
    }
    LODWORD(v22) = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "isPairingRetryAllowed: isMeDevice %{BOOL,public}d, connectableDevicesCount %ld, isiCloudSignedIn %{BOOL,public}d.", (uint8_t *)v14, 0x18u);
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  if (v11 == 1 || *(void *)(v1 + 152) == 1) {
    return 1;
  }
  uint64_t result = (uint64_t)[self defaultStore];
  if (result)
  {
    int64_t v19 = (void *)result;
    id v20 = [result aa_primaryAppleAccount];

    if (v20)
    {

      return 0;
    }
    return 1;
  }
LABEL_24:
  __break(1u);
  return result;
}

uint64_t sub_1003E2FC8()
{
  if (*v0) {
    return 0x74756F656D69742ELL;
  }
  else {
    return 0x6E776F6E6B6E752ELL;
  }
}

void sub_1003E2FFC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000588C(&qword_101643F48);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v54 = v2;
  uint64_t v55 = v3;
  __chkstk_darwin(v2);
  uint64_t v52 = (char *)v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000588C(&qword_101643F50);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v56 = v5;
  uint64_t v57 = v6;
  __chkstk_darwin(v5);
  int64_t v51 = (char *)v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_101643F58);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v58 = v8;
  uint64_t v59 = v9;
  __chkstk_darwin(v8);
  unint64_t v53 = (char *)v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C(&qword_10163C6C8);
  __chkstk_darwin(v11 - 8);
  uint64_t v39 = (char *)v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000588C(&qword_101643F60);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = sub_10000588C(&qword_101643F68);
  uint64_t v44 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  int v18 = (char *)v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = sub_10000588C(&qword_101643F70);
  uint64_t v50 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  id v20 = (char *)v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = *(void *)(v0 + 16);
  id v60 = (id)sub_100AB2C40();
  sub_10000588C((uint64_t *)&unk_101653E90);
  uint64_t v48 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v47 = &protocol conformance descriptor for AnyPublisher<A, B>;
  sub_100062734(&qword_10163BD20, (uint64_t *)&unk_101653E90);
  Publisher.compactMap<A>(_:)();
  swift_release();
  uint64_t v45 = &protocol conformance descriptor for Publishers.CompactMap<A, B>;
  sub_100062734(&qword_101643F78, &qword_101643F60);
  uint64_t v43 = sub_100414C30(&qword_101647700, (void (*)(uint64_t))type metadata accessor for OwnedBeaconGroup);
  Publisher<>.removeDuplicates()();
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  id v60 = *(id *)(v0 + 48);
  id v21 = v60;
  uint64_t v22 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56);
  uint64_t v41 = v23 + 56;
  uint64_t v24 = (uint64_t)v39;
  v40(v39, 1, 1, v22);
  v38[1] = sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  v38[2] = &protocol conformance descriptor for Publishers.RemoveDuplicates<A>;
  sub_100062734(&qword_101643F80, &qword_101643F68);
  v38[0] = sub_10027B124();
  id v25 = v21;
  uint64_t v26 = v42;
  Publisher.receive<A>(on:options:)();
  sub_10001DAB4(v24, &qword_10163C6C8);

  (*(void (**)(char *, uint64_t))(v44 + 8))(v18, v26);
  sub_100062734(&qword_101643F88, &qword_101643F70);
  swift_retain();
  uint64_t v27 = v46;
  uint64_t v28 = Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v50 + 8))(v20, v27);
  *(void *)(v1 + 80) = v28;
  swift_release();
  id v60 = *(id *)(v49 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_recordDeletedPublisher);
  swift_retain();
  sub_10000588C((uint64_t *)&unk_10163BD30);
  sub_100062734(&qword_101656740, (uint64_t *)&unk_10163BD30);
  uint64_t v29 = v52;
  Publisher.compactMap<A>(_:)();
  swift_release();
  sub_100062734(&qword_101643F90, &qword_101643F48);
  uint64_t v30 = v51;
  uint64_t v31 = v54;
  Publisher<>.removeDuplicates()();
  (*(void (**)(char *, uint64_t))(v55 + 8))(v29, v31);
  id v60 = v25;
  v40((char *)v24, 1, 1, v22);
  sub_100062734(&qword_101643F98, &qword_101643F50);
  id v32 = v25;
  uint64_t v33 = v53;
  uint64_t v34 = v56;
  Publisher.receive<A>(on:options:)();
  sub_10001DAB4(v24, &qword_10163C6C8);

  (*(void (**)(char *, uint64_t))(v57 + 8))(v30, v34);
  sub_100062734(&qword_101643FA0, &qword_101643F58);
  swift_retain();
  uint64_t v35 = v58;
  uint64_t v36 = Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v59 + 8))(v33, v35);
  *(void *)(v1 + 88) = v36;
  swift_release();
  sub_1003EE640();
  sub_1003E85F8();

  id v37 = [self defaultCenter];
  [v37 addObserver:v1 selector:"pairedDeviceNameChanged:" name:BluetoothMagicPairedDeviceNameChangedNotification object:0];
}

uint64_t sub_1003E38D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1003E38F0(a1, &qword_10163BCC8, a2);
}

uint64_t sub_1003E38E4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1003E38F0(a1, &qword_10163BCC0, a2);
}

uint64_t sub_1003E38F0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  sub_10001D010(a1, (uint64_t)v8);
  sub_10000588C(a2);
  uint64_t v5 = type metadata accessor for OwnedBeaconGroup(0);
  int v6 = swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(a3, v6 ^ 1u, 1, v5);
}

void sub_1003E3994(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  if (*a1 != *(void *)(a2 + 152))
  {
    if (qword_101636AC0 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_10170DE38);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 134349056;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "connectableDevicesChanged: %{public}ld", v7, 0xCu);
      swift_slowDealloc();
    }

    *(void *)(a2 + 152) = v2;
  }
}

uint64_t sub_1003E3ABC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_1003F3960(a2, a3);
    return swift_release();
  }
  return result;
}

uint64_t sub_1003E3B30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v14[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  id v10 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(a2
                                                              + OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject), "identifier"));
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  swift_beginAccess();
  if (!*(void *)(*(void *)(a1 + 184) + 16)) {
    goto LABEL_5;
  }
  swift_bridgeObjectRetain();
  sub_1007240CC((uint64_t)v9);
  if ((v11 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
    char v13 = 0;
    goto LABEL_6;
  }
  swift_retain();
  swift_bridgeObjectRelease();
  (*(void (**)(unsigned char *, uint64_t))(v7 + 8))(v9, v6);
  QueueSynchronizer.conditionalSync<A>(_:)();
  uint64_t result = swift_release();
  char v13 = v14[47];
LABEL_6:
  *a3 = v13;
  return result;
}

void sub_1003E3CFC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v44 = a1;
  uint64_t v3 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v43 = (uint64_t)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v42 = (uint64_t)&v42 - v6;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  char v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  char v13 = (char *)&v42 - v12;
  uint64_t v14 = type metadata accessor for DispatchPredicate();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (uint64_t *)((char *)&v42 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  int v18 = *(void **)(v2 + 48);
  *uint64_t v17 = v18;
  (*(void (**)(void *, void, uint64_t))(v15 + 104))(v17, enum case for DispatchPredicate.onQueue(_:), v14);
  id v19 = v18;
  LOBYTE(v18) = _dispatchPreconditionTest(_:)();
  id v21 = *(void (**)(void *, uint64_t))(v15 + 8);
  uint64_t v20 = v15 + 8;
  v21(v17, v14);
  if ((v18 & 1) == 0)
  {
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v20 = v44;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, v44 + *(int *)(v3 + 24), v7);
  swift_beginAccess();
  char v22 = sub_100DC8CB8((uint64_t)v13, v11);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v7);
  swift_endAccess();
  if (v22)
  {
    uint64_t v43 = v7;
    if (qword_101636AC0 == -1)
    {
LABEL_4:
      uint64_t v23 = type metadata accessor for Logger();
      sub_100010324(v23, (uint64_t)qword_10170DE38);
      uint64_t v24 = v42;
      sub_100418628(v20, v42, type metadata accessor for OwnedBeaconGroup);
      id v25 = Logger.logObject.getter();
      os_log_type_t v26 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v25, v26))
      {
        uint64_t v27 = swift_slowAlloc();
        v45[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v27 = 141558275;
        uint64_t v46 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v27 + 12) = 2081;
        sub_100414C30((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v46 = sub_1008FA0F0(v28, v29, v45);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100418B1C(v24, type metadata accessor for OwnedBeaconGroup);
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "Posting SPAccessoryDidPair Darwin notification for %{private,mask.hash}s", (uint8_t *)v27, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_100418B1C(v24, type metadata accessor for OwnedBeaconGroup);
      }

      dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)();
      uint64_t My = type metadata accessor for Feature.FindMy();
      v45[3] = My;
      v45[4] = sub_100414C30((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
      uint64_t v39 = sub_10001D958(v45);
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v39, enum case for Feature.FindMy.managedCBPeripheral(_:), My);
      LOBYTE(My) = isFeatureEnabled(_:)();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v45);
      if (My)
      {
        uint64_t v40 = (void *)SPManagedCBPeripheralChangedNotification;
        type metadata accessor for DarwinNotificationHelper();
        swift_allocObject();
        id v41 = v40;
        DarwinNotificationHelper.init(notificationName:rateLimit:)();
        dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)();
        swift_release();
      }
      return;
    }
LABEL_17:
    swift_once();
    goto LABEL_4;
  }
  if (qword_101636AC0 != -1) {
    swift_once();
  }
  uint64_t v30 = type metadata accessor for Logger();
  sub_100010324(v30, (uint64_t)qword_10170DE38);
  uint64_t v31 = v20;
  uint64_t v32 = v43;
  sub_100418628(v31, v43, type metadata accessor for OwnedBeaconGroup);
  uint64_t v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v33, v34))
  {
    uint64_t v35 = swift_slowAlloc();
    v45[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v35 = 141558275;
    uint64_t v46 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v35 + 12) = 2081;
    sub_100414C30((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v46 = sub_1008FA0F0(v36, v37, v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100418B1C(v32, type metadata accessor for OwnedBeaconGroup);
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "Already posted SPAccessoryDidPair for %{private,mask.hash}s", (uint8_t *)v35, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100418B1C(v32, type metadata accessor for OwnedBeaconGroup);
  }
}

void sub_1003E44BC(uint64_t a1)
{
  uint64_t v169 = type metadata accessor for MACAddress();
  uint64_t v155 = *(void **)(v169 - 8);
  __chkstk_darwin(v169);
  uint64_t v166 = (char *)&v142 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000588C(&qword_101643CC0);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v168 = (uint64_t)&v142 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v153 = (uint64_t)&v142 - v7;
  uint64_t v170 = (int *)type metadata accessor for BluetoothManagerDevice();
  uint64_t v157 = *((void *)v170 - 1);
  uint64_t v8 = __chkstk_darwin(v170);
  uint64_t v151 = (uint64_t)&v142 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v158 = (uint64_t)&v142 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  unint64_t v171 = (char *)&v142 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v156 = (uint64_t)&v142 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  char v167 = (char *)&v142 - v17;
  __chkstk_darwin(v16);
  id v19 = (char *)&v142 - v18;
  uint64_t v162 = sub_10000588C((uint64_t *)&unk_1016477E0);
  uint64_t v20 = __chkstk_darwin(v162);
  id v159 = (char *)&v142 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v161 = (char *)&v142 - v22;
  uint64_t v23 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v24 = __chkstk_darwin(v23);
  unint64_t v160 = (unint64_t)&v142 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v150 = (uint64_t)&v142 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v30 = (char *)&v142 - v29;
  __chkstk_darwin(v28);
  uint64_t v32 = (char *)&v142 - v31;
  uint64_t v33 = type metadata accessor for DispatchPredicate();
  uint64_t v34 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  uint64_t v36 = (uint64_t *)((char *)&v142 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v37 = *(void **)(v1 + 48);
  *uint64_t v36 = v37;
  (*(void (**)(void *, void, uint64_t))(v34 + 104))(v36, enum case for DispatchPredicate.onQueue(_:), v33);
  id v38 = v37;
  LOBYTE(v37) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v34 + 8))(v36, v33);
  if (v37)
  {
    uint64_t v163 = v23;
    uint64_t v165 = v1;
    uint64_t v152 = v19;
    if (qword_101636AC0 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v149 = type metadata accessor for Logger();
  uint64_t v39 = sub_100010324(v149, (uint64_t)qword_10170DE38);
  sub_100418628(a1, (uint64_t)v32, type metadata accessor for OwnedBeaconGroup);
  uint64_t v164 = a1;
  sub_100418628(a1, (uint64_t)v30, type metadata accessor for OwnedBeaconGroup);
  uint64_t v40 = Logger.logObject.getter();
  os_log_type_t v41 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v40, v41))
  {
    uint64_t v42 = swift_slowAlloc();
    unint64_t v148 = (void (**)(char *, uint64_t, uint64_t))swift_slowAlloc();
    v172[0] = (uint64_t)v148;
    *(_DWORD *)uint64_t v42 = 141558787;
    uint64_t v173 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v42 + 12) = 2081;
    uint64_t v154 = v39;
    uint64_t v43 = v163;
    type metadata accessor for UUID();
    sub_100414C30((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v44 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v173 = sub_1008FA0F0(v44, v45, v172);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100418B1C((uint64_t)v32, type metadata accessor for OwnedBeaconGroup);
    *(_WORD *)(v42 + 22) = 2160;
    uint64_t v173 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v42 + 32) = 2081;
    sub_100414C30((unint64_t *)&qword_101649EE0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
    uint64_t v46 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v173 = sub_1008FA0F0(v46, v47, v172);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v39 = v154;
    sub_100418B1C((uint64_t)v30, type metadata accessor for OwnedBeaconGroup);
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "BA unpaired groupIdentifier: %{private,mask.hash}s, mac: %{private,mask.hash}s.\nNeed to BT unpair.", (uint8_t *)v42, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100418B1C((uint64_t)v32, type metadata accessor for OwnedBeaconGroup);
    sub_100418B1C((uint64_t)v30, type metadata accessor for OwnedBeaconGroup);

    uint64_t v43 = v163;
  }
  uint64_t v48 = (uint64_t)v161;
  uint64_t v49 = sub_1003E8328();
  uint64_t v50 = v164;
  uint64_t v51 = v164 + *(int *)(v43 + 28);
  *(&v142 - 2) = __chkstk_darwin(v49);
  *(&v142 - 1) = v51;
  OS_dispatch_queue.sync<A>(execute:)();
  sub_10001DAB4(v48, (uint64_t *)&unk_1016477E0);
  uint64_t v52 = *(void *)(sub_100AE840C(v51) + 16);
  swift_bridgeObjectRelease();
  if (v52)
  {
    uint64_t v53 = v160;
    sub_100418628(v50, v160, type metadata accessor for OwnedBeaconGroup);
    uint64_t v54 = Logger.logObject.getter();
    os_log_type_t v55 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v54, v55))
    {
      uint64_t v56 = swift_slowAlloc();
      v172[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v56 = 141558275;
      uint64_t v173 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v56 + 12) = 2081;
      sub_100414C30((unint64_t *)&qword_101649EE0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
      uint64_t v57 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v173 = sub_1008FA0F0(v57, v58, v172);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100418B1C(v53, type metadata accessor for OwnedBeaconGroup);
      _os_log_impl((void *)&_mh_execute_header, v54, v55, "We have at least one beacon group for the same MAC: %{private,mask.hash}s, do NOT BT unpair.", (uint8_t *)v56, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      goto LABEL_44;
    }
    swift_release();
    uint64_t v106 = v53;
    goto LABEL_40;
  }
  id v59 = sub_1003E1B90();
  if (!v59
    || (id v60 = v59, v61 = [v59 pairedDevices], v60, !v61)
    || (uint64_t v62 = static Array._unconditionallyBridgeFromObjectiveC(_:)(),
        v61,
        unint64_t v63 = (unint64_t)sub_1004C74B4(v62),
        swift_bridgeObjectRelease(),
        !v63))
  {
    uint64_t v54 = Logger.logObject.getter();
    os_log_type_t v107 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v54, v107))
    {
LABEL_45:

LABEL_46:
      swift_release();
      return;
    }
    uint64_t v108 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v108 = 0;
    _os_log_impl((void *)&_mh_execute_header, v54, v107, "Unable to retrieve BT paired devices!", v108, 2u);
LABEL_44:
    swift_slowDealloc();
    goto LABEL_45;
  }
  uint64_t v154 = v39;
  if (v63 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v64 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v64 = *(void *)((v63 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  uint64_t v65 = (uint64_t)v167;
  uint64_t v66 = (uint64_t)v159;
  uint64_t v144 = v49;
  uint64_t v143 = 0;
  if (v64)
  {
    if (v64 >= 1)
    {
      uint64_t v67 = 0;
      unint64_t v160 = v63 & 0xC000000000000001;
      uint64_t v68 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v155 + 6);
      unint64_t v148 = (void (**)(char *, uint64_t, uint64_t))(v155 + 4);
      unsigned int v147 = (void (**)(void))(v155 + 2);
      uint64_t v146 = (void (**)(char *, uint64_t))(v155 + 1);
      uint64_t v69 = (void (**)(uint64_t, uint64_t, uint64_t, int *))(v157 + 56);
      uint64_t v145 = (uint64_t (**)(uint64_t, uint64_t, int *))(v157 + 48);
      uint64_t v155 = _swiftEmptyArrayStorage;
      uint64_t v161 = (char *)v64;
      uint64_t v162 = v63;
      while (1)
      {
        id v72 = v160
            ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)()
            : *(id *)(v63 + 8 * (void)v67 + 32);
        unint64_t v73 = v72;
        uint64_t v74 = v170[10];
        *(void *)&v171[v74] = 0;
        id v75 = [v72 address];
        if (!v75) {
          break;
        }
        Swift::String v76 = v75;
        static String._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v77 = v169;
        MACAddress.init(string:type:)();
        if ((*v68)(v66, 1, v77) == 1)
        {

          sub_10001DAB4(v66, (uint64_t *)&unk_1016477E0);
          uint64_t v65 = (uint64_t)v167;
          goto LABEL_18;
        }
        (*v148)(v166, v66, v77);
        *(void *)&v171[v74] = v73;
        (*v147)();
        id v78 = v73;
        id v79 = [v78 name];
        if (v79)
        {
          uint64_t v80 = v79;
          uint64_t v81 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v83 = v82;
        }
        else
        {
          uint64_t v81 = 0;
          unint64_t v83 = 0xE000000000000000;
        }
        uint64_t v84 = v170;
        unint64_t v85 = v171;
        uint64_t v86 = (uint64_t *)&v171[v170[5]];
        uint64_t *v86 = v81;
        v86[1] = v83;
        *(_DWORD *)&v85[v84[6]] = [v78 vendorId];
        id v87 = [v78 productName];
        if (v87)
        {
          unint64_t v88 = v87;
          uint64_t v89 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v91 = v90;
        }
        else
        {
          uint64_t v89 = 0;
          unint64_t v91 = 0xE000000000000000;
        }
        unint64_t v92 = v170;
        uint64_t v93 = (uint64_t)v171;
        unint64_t v94 = (uint64_t *)&v171[v170[7]];
        *unint64_t v94 = v89;
        v94[1] = v91;
        *(_DWORD *)(v93 + v92[8]) = [v78 productId];
        uint64_t v95 = sub_1002AAF08([v78 vendorId], [v78 productId]);
        uint64_t v97 = v96;

        (*v146)(v166, v169);
        uint64_t v98 = (uint64_t *)(v93 + v92[9]);
        uint64_t *v98 = v95;
        v98[1] = v97;
        uint64_t v70 = v168;
        sub_100418628(v93, v168, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
        (*v69)(v70, 0, 1, v92);
        sub_100418B1C(v93, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
        int v99 = (*v145)(v70, 1, v92);
        uint64_t v65 = (uint64_t)v167;
        uint64_t v66 = (uint64_t)v159;
        if (v99 != 1)
        {
          uint64_t v100 = v70;
          uint64_t v101 = v156;
          sub_100418690(v100, v156, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
          sub_100418690(v101, v158, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v71 = v161;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            uint64_t v155 = (void *)sub_100A70460(0, v155[2] + 1, 1, (unint64_t)v155);
          }
          unint64_t v104 = v155[2];
          unint64_t v103 = v155[3];
          if (v104 >= v103 >> 1) {
            uint64_t v155 = (void *)sub_100A70460(v103 > 1, v104 + 1, 1, (unint64_t)v155);
          }
          uint64_t v105 = v155;
          v155[2] = v104 + 1;
          sub_100418690(v158, (uint64_t)v105+ ((*(unsigned __int8 *)(v157 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v157 + 80))+ *(void *)(v157 + 72) * v104, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
          goto LABEL_20;
        }
LABEL_19:
        sub_10001DAB4(v70, &qword_101643CC0);
        uint64_t v71 = v161;
LABEL_20:
        ++v67;
        unint64_t v63 = v162;
        if (v71 == v67) {
          goto LABEL_48;
        }
      }

LABEL_18:
      uint64_t v70 = v168;
      (*v69)(v168, 1, 1, v170);
      goto LABEL_19;
    }
    __break(1u);
    goto LABEL_84;
  }
  uint64_t v155 = _swiftEmptyArrayStorage;
LABEL_48:
  swift_bridgeObjectRelease_n();
  uint64_t v109 = v155[2];
  if (v109)
  {
    uint64_t v110 = (uint64_t)v155
         + ((*(unsigned __int8 *)(v157 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v157 + 80));
    uint64_t v111 = *(void *)(v157 + 72);
    swift_bridgeObjectRetain();
    uint64_t v49 = v152;
    while (1)
    {
      sub_100418628(v110, v65, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
      if (static MACAddress.== infix(_:_:)()) {
        break;
      }
      sub_100418B1C(v65, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
      v110 += v111;
      if (!--v109)
      {
        swift_bridgeObjectRelease();
        uint64_t v112 = 1;
        goto LABEL_54;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v113 = v153;
    sub_100418690(v65, v153, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
    uint64_t v112 = 0;
  }
  else
  {
    uint64_t v112 = 1;
    uint64_t v49 = v152;
LABEL_54:
    uint64_t v113 = v153;
  }
  uint64_t v114 = v157;
  unint64_t v115 = v170;
  (*(void (**)(uint64_t, uint64_t, uint64_t, int *))(v157 + 56))(v113, v112, 1, v170);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(v114 + 48))(v113, 1, v115) == 1)
  {
    sub_10001DAB4(v113, &qword_101643CC0);
    uint64_t v116 = v150;
    sub_100418628(v164, v150, type metadata accessor for OwnedBeaconGroup);
    uint64_t v54 = Logger.logObject.getter();
    os_log_type_t v117 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v54, v117))
    {
      uint64_t v118 = swift_slowAlloc();
      v172[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v118 = 141558275;
      uint64_t v173 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v118 + 12) = 2081;
      sub_100414C30((unint64_t *)&qword_101649EE0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
      uint64_t v119 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v173 = sub_1008FA0F0(v119, v120, v172);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100418B1C(v116, type metadata accessor for OwnedBeaconGroup);
      _os_log_impl((void *)&_mh_execute_header, v54, v117, "No BT device for %{private,mask.hash}s!", (uint8_t *)v118, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      goto LABEL_46;
    }
    swift_release();
    uint64_t v106 = v116;
LABEL_40:
    sub_100418B1C(v106, type metadata accessor for OwnedBeaconGroup);
LABEL_41:

    return;
  }
  sub_100418690(v113, (uint64_t)v49, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
  uint64_t v121 = v151;
  sub_100418628((uint64_t)v49, v151, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
  unint64_t v122 = Logger.logObject.getter();
  os_log_type_t v123 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v122, v123))
  {
    unint64_t v124 = (uint8_t *)swift_slowAlloc();
    v172[0] = swift_slowAlloc();
    *(_DWORD *)unint64_t v124 = 136315138;
    uint64_t v125 = sub_1001E0BAC();
    uint64_t v173 = sub_1008FA0F0(v125, v126, v172);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100418B1C(v121, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
    _os_log_impl((void *)&_mh_execute_header, v122, v123, "BT unpairing %s...", v124, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100418B1C(v121, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
  }

  unint64_t v127 = *(void **)((char *)v49 + v170[10]);
  if (!v127)
  {
    if (qword_101637310 == -1)
    {
LABEL_74:
      sub_100010324(v149, (uint64_t)qword_10170F068);
      unint64_t v139 = Logger.logObject.getter();
      os_log_type_t v140 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v139, v140))
      {
        uint64_t v141 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v141 = 0;
        _os_log_impl((void *)&_mh_execute_header, v139, v140, "We should always have an underlying BluetoothDevice here!", v141, 2u);
        swift_slowDealloc();
      }

      swift_release();
      goto LABEL_77;
    }
LABEL_84:
    swift_once();
    goto LABEL_74;
  }
  uint64_t v54 = v127;
  id v128 = sub_1003E1B90();
  if (v128)
  {
    unint64_t v129 = v128;
    [v128 setDevicePairingEnabled:1];
  }
  id v130 = sub_1003E1B90();
  if (v130)
  {
    unint64_t v131 = v130;
    [v130 unpairDevice:v54];
  }
  id v132 = sub_1003E1B90();
  if (v132)
  {
    uint64_t v133 = v132;
    [v132 setDevicePairingEnabled:0];
  }
  uint64_t My = type metadata accessor for Feature.FindMy();
  v172[3] = My;
  v172[4] = sub_100414C30((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
  unint64_t v135 = sub_10001D958(v172);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v135, enum case for Feature.FindMy.managedCBPeripheral(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v172);
  if ((My & 1) == 0)
  {
    sub_100418B1C((uint64_t)v49, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
    swift_release();
    goto LABEL_41;
  }
  unint64_t v136 = (void *)SPManagedCBPeripheralChangedNotification;
  type metadata accessor for DarwinNotificationHelper();
  swift_allocObject();
  id v137 = v136;
  DarwinNotificationHelper.init(notificationName:rateLimit:)();
  uint64_t v138 = v143;
  dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)();
  if (!v138)
  {
    sub_100418B1C((uint64_t)v49, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
    swift_release();
    swift_release();
    goto LABEL_41;
  }

  swift_release();
  swift_release();
  swift_errorRelease();
LABEL_77:
  sub_100418B1C((uint64_t)v49, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
}

uint64_t sub_1003E5C54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v23 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v26 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v22 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v24 = *(void *)(v7 - 8);
  uint64_t v25 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for Notification();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21[1] = *(void *)(a2 + 48);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a3, v10);
  unint64_t v14 = (*(unsigned __int8 *)(v11 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  unint64_t v15 = (v12 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a1;
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v16 + v14, v13, v10);
  *(void *)(v16 + v15) = a2;
  aBlock[4] = sub_100419BE0;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015BFBD0;
  uint64_t v17 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  aBlock[7] = _swiftEmptyArrayStorage;
  sub_100414C30((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  id v19 = v22;
  uint64_t v18 = v23;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v19, v18);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v9, v25);
  return swift_release();
}

void sub_1003E6008(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = sub_10000588C(&qword_101643CC0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (void *)((char *)v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = type metadata accessor for BluetoothManagerDevice();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  unint64_t v14 = (char *)v41 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)v41 - v15;
  Transaction.capture()();
  Notification.object.getter();
  if (!v45[3])
  {
    uint64_t v18 = (uint64_t *)&unk_101644360;
    id v19 = v45;
    goto LABEL_6;
  }
  sub_10001D4B0(0, &qword_101643FA8);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_7:
    if (qword_101636AC0 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100010324(v20, (uint64_t)qword_10170DE38);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "notification.object is not of expected type BluetoothDevice!", v23, 2u);
      swift_slowDealloc();
    }

    return;
  }
  id v17 = v44;
  sub_1001E0710(v17, (uint64_t)v6);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {

    uint64_t v18 = &qword_101643CC0;
    id v19 = v6;
LABEL_6:
    sub_10001DAB4((uint64_t)v19, v18);
    goto LABEL_7;
  }
  uint64_t v43 = a3;
  sub_100418690((uint64_t)v6, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
  if (qword_101636AC0 != -1) {
    swift_once();
  }
  uint64_t v24 = type metadata accessor for Logger();
  uint64_t v25 = sub_100010324(v24, (uint64_t)qword_10170DE38);
  sub_100418628((uint64_t)v16, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = (uint8_t *)swift_slowAlloc();
    uint64_t v29 = swift_slowAlloc();
    v41[1] = v25;
    v45[0] = v29;
    id v42 = v17;
    *(_DWORD *)uint64_t v28 = 136315138;
    uint64_t v30 = sub_1001E0BAC();
    id v44 = (id)sub_1008FA0F0(v30, v31, v45);
    id v17 = v42;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100418B1C((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "pairedDeviceNameChanged: %s", v28, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100418B1C((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
  }

  __chkstk_darwin(v32);
  v41[-2] = v16;
  v41[-1] = v33;
  sub_10000588C(&qword_10165F6B0);
  Lock.callAsFunction<A>(_:)();
  uint64_t v34 = (void *)v45[0];
  if (v45[0])
  {
    sub_1003E683C(v45[0], (uint64_t)v16);

    uint64_t v35 = (uint64_t)v16;
  }
  else
  {
    sub_100418628((uint64_t)v16, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      id v38 = (uint8_t *)swift_slowAlloc();
      v45[0] = swift_slowAlloc();
      *(_DWORD *)id v38 = 136315138;
      id v42 = v17;
      type metadata accessor for MACAddress();
      sub_100414C30((unint64_t *)&qword_101649EE0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
      uint64_t v39 = dispatch thunk of CustomStringConvertible.description.getter();
      id v44 = (id)sub_1008FA0F0(v39, v40, v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100418B1C((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "Unable to retrieve peripheral for %s", v38, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      sub_100418B1C((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
    }
    uint64_t v35 = (uint64_t)v16;
  }
  sub_100418B1C(v35, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
}

void sub_1003E683C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v56 = a2;
  uint64_t v5 = type metadata accessor for BluetoothManagerDevice();
  __chkstk_darwin(v5);
  uint64_t v54 = (uint64_t)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_10163BB20);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v53 = (uint64_t)&v52 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v55 = (uint64_t)&v52 - v14;
  uint64_t v15 = type metadata accessor for DispatchPredicate();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (uint64_t *)((char *)&v52 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v19 = *(void **)(v3 + 48);
  *uint64_t v18 = v19;
  (*(void (**)(void *, void, uint64_t))(v16 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v15);
  id v20 = v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)();
  uint64_t v21 = (*(uint64_t (**)(void *, uint64_t))(v16 + 8))(v18, v15);
  if ((v19 & 1) == 0)
  {
    __break(1u);
    goto LABEL_32;
  }
  __chkstk_darwin(v21);
  *(&v52 - 2) = v3;
  *(&v52 - 1) = a1;
  QueueSynchronizer.conditionalSync<A>(_:)();
  if (v58[0])
  {
    if (qword_101636AC0 == -1)
    {
LABEL_4:
      uint64_t v22 = type metadata accessor for Logger();
      sub_100010324(v22, (uint64_t)qword_10170DE38);
      uint64_t v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v23, v24))
      {
LABEL_22:

        return;
      }
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Pairing in progress. Ignore name change.", v25, 2u);
LABEL_11:
      swift_slowDealloc();
      goto LABEL_22;
    }
LABEL_32:
    swift_once();
    goto LABEL_4;
  }
  uint64_t v26 = v56;
  sub_100AE800C((uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_10001DAB4((uint64_t)v9, &qword_10163BB20);
    if (qword_101636AC0 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_100010324(v27, (uint64_t)qword_10170DE38);
    uint64_t v28 = v54;
    sub_100418628(v26, v54, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v23, v29))
    {
      sub_100418B1C(v28, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
      goto LABEL_22;
    }
    uint64_t v30 = (uint8_t *)swift_slowAlloc();
    v58[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v30 = 136315138;
    type metadata accessor for MACAddress();
    sub_100414C30((unint64_t *)&qword_101649EE0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
    uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v57 = sub_1008FA0F0(v31, v32, v58);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100418B1C(v28, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
    _os_log_impl((void *)&_mh_execute_header, v23, v29, "No beacon group for paired device: %s", v30, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    goto LABEL_11;
  }
  uint64_t v33 = (uint64_t)v9;
  uint64_t v34 = v55;
  sub_100418690(v33, v55, type metadata accessor for OwnedBeaconGroup);
  if (sub_1004CF378())
  {
    uint64_t v35 = (uint64_t *)(v26 + *(int *)(v5 + 20));
    uint64_t v36 = *v35;
    uint64_t v37 = v35[1];
    id v38 = (void *)(v34 + *(int *)(v10 + 36));
    if (v36 == *v38 && v37 == v38[1] || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      if (qword_101636AC0 != -1) {
        swift_once();
      }
      uint64_t v39 = type metadata accessor for Logger();
      sub_100010324(v39, (uint64_t)qword_10170DE38);
      unint64_t v40 = Logger.logObject.getter();
      os_log_type_t v41 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v40, v41))
      {
        id v42 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v42 = 0;
        _os_log_impl((void *)&_mh_execute_header, v40, v41, "Name has not changed!", v42, 2u);
        swift_slowDealloc();
      }
    }
    else
    {
      uint64_t v51 = type metadata accessor for Transaction();
      __chkstk_darwin(v51);
      *(&v52 - 4) = v3;
      *(&v52 - 3) = v34;
      *(&v52 - 2) = v26;
      static Transaction.named<A>(_:with:)();
    }
  }
  else
  {
    if (qword_101636AC0 != -1) {
      swift_once();
    }
    uint64_t v43 = type metadata accessor for Logger();
    sub_100010324(v43, (uint64_t)qword_10170DE38);
    uint64_t v44 = v53;
    sub_100418628(v34, v53, type metadata accessor for OwnedBeaconGroup);
    unint64_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v47 = swift_slowAlloc();
      uint64_t v48 = swift_slowAlloc();
      *(_DWORD *)uint64_t v47 = 141558275;
      uint64_t v57 = 1752392040;
      v58[0] = v48;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v47 + 12) = 2081;
      type metadata accessor for UUID();
      sub_100414C30((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v49 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v57 = sub_1008FA0F0(v49, v50, v58);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100418B1C(v44, type metadata accessor for OwnedBeaconGroup);
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Ignore name change while beacon group pending pairing: %{private,mask.hash}s.", (uint8_t *)v47, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100418B1C(v44, type metadata accessor for OwnedBeaconGroup);
    }
  }
  sub_100418B1C(v34, type metadata accessor for OwnedBeaconGroup);
}

uint64_t sub_1003E7184(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v22 = a3;
  uint64_t v24 = a2;
  uint64_t v28 = a1;
  uint64_t v7 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v26 = *(void *)(v7 - 8);
  uint64_t v25 = *(void *)(v26 + 64);
  __chkstk_darwin(v7 - 8);
  uint64_t v23 = (uint64_t)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for BluetoothManagerDevice();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9 - 8);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = *(void *)(a2 + 16);
  sub_100418628(a4, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
  uint64_t v13 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v14 = swift_allocObject();
  sub_100418690((uint64_t)v12, v14 + ((v13 + 16) & ~v13), (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
  sub_100418628(a4, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
  uint64_t v15 = v23;
  sub_100418628(a3, v23, type metadata accessor for OwnedBeaconGroup);
  uint64_t v16 = (v13 + 24) & ~v13;
  unint64_t v17 = (v11 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = (v17 + *(unsigned __int8 *)(v26 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v26 + 80);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v28;
  sub_100418690((uint64_t)v12, v19 + v16, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
  *(void *)(v19 + v17) = v24;
  sub_100418690(v15, v19 + v18, type metadata accessor for OwnedBeaconGroup);
  swift_retain();
  swift_retain();
  sub_101072EAC(v22, 0, (void (*)(uint64_t))sub_1004196FC, v14, (void (*)(uint64_t (*)(uint64_t)))sub_1004199CC, (void (*)(uint64_t (*)(uint64_t)))v19);
  swift_release();
  return swift_release();
}

uint64_t sub_1003E7460(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)(a2 + *(int *)(type metadata accessor for BluetoothManagerDevice() + 20));
  uint64_t v5 = *v3;
  uint64_t v4 = v3[1];
  uint64_t v6 = (void *)(a1 + *(int *)(type metadata accessor for OwnedBeaconGroup(0) + 36));
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v6 = v5;
  v6[1] = v4;
  return result;
}

void sub_1003E74C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v41 = a3;
  uint64_t v42 = a4;
  uint64_t v40 = type metadata accessor for BluetoothManagerDevice();
  __chkstk_darwin(v40);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v39 - v14;
  __chkstk_darwin(v13);
  unint64_t v17 = (char *)&v39 - v16;
  uint64_t v18 = sub_10000588C(&qword_10163C650);
  __chkstk_darwin(v18);
  id v20 = (uint64_t *)((char *)&v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  Transaction.capture()();
  sub_10001D074(a1, (uint64_t)v20, &qword_10163C650);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v21 = *v20;
    if (qword_101636AC0 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_100010324(v22, (uint64_t)qword_10170DE38);
    sub_100418628(a5, (uint64_t)v12, type metadata accessor for OwnedBeaconGroup);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = swift_slowAlloc();
      uint64_t v44 = swift_slowAlloc();
      *(_DWORD *)uint64_t v25 = 136315394;
      uint64_t v26 = sub_1004D6904();
      uint64_t v43 = sub_1008FA0F0(v26, v27, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100418B1C((uint64_t)v12, type metadata accessor for OwnedBeaconGroup);
      *(_WORD *)(v25 + 12) = 2080;
      uint64_t v43 = v21;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v28 = String.init<A>(describing:)();
      uint64_t v43 = sub_1008FA0F0(v28, v29, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Failed to save new name for %s. Error %s", (uint8_t *)v25, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      sub_100418B1C((uint64_t)v12, type metadata accessor for OwnedBeaconGroup);
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    sub_100418690((uint64_t)v20, (uint64_t)v17, type metadata accessor for OwnedBeaconGroup);
    if (qword_101636AC0 != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    sub_100010324(v30, (uint64_t)qword_10170DE38);
    sub_100418628((uint64_t)v17, (uint64_t)v15, type metadata accessor for OwnedBeaconGroup);
    sub_100418628(v41, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
    uint64_t v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v31, v32))
    {
      uint64_t v33 = swift_slowAlloc();
      uint64_t v44 = swift_slowAlloc();
      *(_DWORD *)uint64_t v33 = 136315394;
      uint64_t v34 = sub_1004D6904();
      uint64_t v43 = sub_1008FA0F0(v34, v35, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100418B1C((uint64_t)v15, type metadata accessor for OwnedBeaconGroup);
      *(_WORD *)(v33 + 12) = 2080;
      uint64_t v36 = (uint64_t *)&v8[*(int *)(v40 + 20)];
      uint64_t v37 = *v36;
      unint64_t v38 = v36[1];
      swift_bridgeObjectRetain();
      uint64_t v43 = sub_1008FA0F0(v37, v38, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100418B1C((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Successfully updated %s with new name %s", (uint8_t *)v33, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100418B1C((uint64_t)v15, type metadata accessor for OwnedBeaconGroup);
      sub_100418B1C((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
    }

    sub_100A9E7EC(15);
    sub_100418B1C((uint64_t)v17, type metadata accessor for OwnedBeaconGroup);
  }
}

uint64_t sub_1003E7B30(char *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v53 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v49 - v8;
  uint64_t v10 = type metadata accessor for DispatchPredicate();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char **)((char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = (char *)v2[6];
  *uint64_t v13 = v14;
  (*(void (**)(char **, void, uint64_t))(v11 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v10);
  uint64_t v15 = v14;
  uint64_t v16 = _dispatchPreconditionTest(_:)();
  (*(void (**)(char **, uint64_t))(v11 + 8))(v13, v10);
  if ((v16 & 1) == 0)
  {
    __break(1u);
LABEL_21:
    swift_once();
    goto LABEL_10;
  }
  uint64_t v16 = *(void *)&a1[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject];
  id v17 = [(id)v16 identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  swift_beginAccess();
  uint64_t v18 = v2[23];
  if (*(void *)(v18 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v19 = sub_1007240CC((uint64_t)v9);
    if (v20)
    {
      uint64_t v21 = *(void *)(*(void *)(v18 + 56) + 8 * v19);
      swift_retain();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
      if (qword_101636AC0 != -1) {
        swift_once();
      }
      uint64_t v22 = type metadata accessor for Logger();
      sub_100010324(v22, (uint64_t)qword_10170DE38);
      swift_retain_n();
      uint64_t v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v23, v24))
      {
        uint64_t v25 = (uint8_t *)swift_slowAlloc();
        v55[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v25 = 136315138;
        swift_retain();
        uint64_t v26 = sub_100E0A8F0();
        unint64_t v28 = v27;
        swift_release();
        uint64_t v54 = sub_1008FA0F0(v26, v28, v55);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "Found existing pairing manager %s", v25, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        return v21;
      }

LABEL_18:
      swift_release_n();
      return v21;
    }
    swift_bridgeObjectRelease();
  }
  unint64_t v29 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  uint64_t v51 = v5 + 8;
  uint64_t v52 = v4;
  unint64_t v50 = v29;
  v29((uint64_t)v9, v4);
  uint64_t v5 = v2[2];
  uint64_t v30 = (void *)swift_allocObject();
  void v30[2] = v2;
  id v30[3] = a1;
  v30[4] = v5;
  swift_retain();
  uint64_t v14 = a1;
  swift_retain();
  unsafeFromAsyncTask<A>(_:)();
  swift_release();
  LODWORD(a1) = LOBYTE(v55[0]);
  if (qword_101636AC0 != -1) {
    goto LABEL_21;
  }
LABEL_10:
  uint64_t v31 = type metadata accessor for Logger();
  sub_100010324(v31, (uint64_t)qword_10170DE38);
  sub_100A3C59C(0xD000000000000032, 0x80000001013FC080);
  uint64_t v32 = v2[3];
  uint64_t v33 = v2[5];
  uint64_t v49 = type metadata accessor for AirPodsPairingManager();
  swift_allocObject();
  uint64_t v34 = v14;
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v35 = sub_100E0AAB8(v5, v32, v34, v33, (int)a1);
  if (v35)
  {
    uint64_t v21 = v35;
    id v36 = [(id)v16 identifier];
    uint64_t v37 = (uint64_t)v53;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    swift_beginAccess();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v54 = v2[23];
    v2[23] = 0x8000000000000000;
    sub_10016DE08(v21, v37, isUniquelyReferenced_nonNull_native);
    v2[23] = v54;
    swift_bridgeObjectRelease();
    v50(v37, v52);
    swift_endAccess();
    swift_retain_n();
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = (uint8_t *)swift_slowAlloc();
      v55[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v41 = 136315138;
      uint64_t v53 = (char *)(v41 + 4);
      sub_100414C30(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
      swift_bridgeObjectRetain();
      uint64_t v42 = Dictionary.description.getter();
      unint64_t v44 = v43;
      swift_bridgeObjectRelease();
      uint64_t v54 = sub_1008FA0F0(v42, v44, v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "pairingManagers: %s", v41, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return v21;
    }

    goto LABEL_18;
  }
  unint64_t v45 = Logger.logObject.getter();
  os_log_type_t v46 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v45, v46))
  {
    uint64_t v47 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v47 = 0;
    _os_log_impl((void *)&_mh_execute_header, v45, v46, "Unable to create a new AirPodsPairingManager!", v47, 2u);
    swift_slowDealloc();
  }

  return 0;
}

void *sub_1003E8328()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *(void **)(v1 + 48);
  *uint64_t v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) == 0)
  {
    __break(1u);
    goto LABEL_14;
  }
  uint64_t v5 = *(void **)(v1 + 96);
  if (v5)
  {
    uint64_t v8 = qword_101636AC0;
    swift_retain();
    if (v8 == -1)
    {
LABEL_4:
      uint64_t v9 = type metadata accessor for Logger();
      sub_100010324(v9, (uint64_t)qword_10170DE38);
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v12 = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "Found existing PrivacyAlertSupport.", v12, 2u);
        swift_slowDealloc();
      }

      return v5;
    }
LABEL_14:
    swift_once();
    goto LABEL_4;
  }
  if (qword_101636AC0 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_100010324(v13, (uint64_t)qword_10170DE38);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Creating new PrivacyAlertSupport.", v16, 2u);
    swift_slowDealloc();
  }

  type metadata accessor for PrivacyAlertSupport();
  swift_allocObject();
  uint64_t v17 = swift_retain();
  uint64_t v5 = (void *)sub_100EFE214(v17);
  *(void *)(v1 + 96) = v5;
  swift_retain();
  swift_release();
  return v5;
}

uint64_t sub_1003E85F8()
{
  uint64_t v1 = v0;
  if (qword_101636AC0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100010324(v2, (uint64_t)qword_10170DE38);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "classicPairingInitialSetup", v5, 2u);
    swift_slowDealloc();
  }

  uint64_t v6 = swift_allocObject();
  swift_weakInit();
  sub_10000588C((uint64_t *)&unk_10163EAB8);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101342130;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = sub_1004194A8;
  *(void *)(v8 + 24) = v6;
  *(void *)(inited + 32) = 0xD000000000000025;
  *(void *)(inited + 40) = 0x80000001013FBFE0;
  *(void *)(inited + 48) = sub_1001DF664;
  *(void *)(inited + 56) = v8;
  swift_retain();
  sub_10092E16C(inited);
  type metadata accessor for DarwinNotificationHelper();
  swift_allocObject();
  uint64_t v9 = DarwinNotificationHelper.init(notificationHandlers:)();
  swift_release();
  *(void *)(v1 + 120) = v9;
  return swift_release();
}

uint64_t sub_1003E87CC()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    DarwinNotification.value.getter();
    uint64_t v1 = type metadata accessor for Transaction();
    __chkstk_darwin(v1);
    static Transaction.named<A>(_:with:)();
    return swift_release();
  }
  return result;
}

uint64_t sub_1003E88A8(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10000588C(&qword_10163C6C8);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_101643EF0);
  uint64_t v36 = *(void *)(v7 - 8);
  uint64_t v37 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C(&qword_101643EF8);
  uint64_t v38 = *(void *)(v10 - 8);
  uint64_t v39 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000588C(&qword_101643F00);
  uint64_t v41 = *(void *)(v13 - 8);
  uint64_t v42 = v13;
  __chkstk_darwin(v13);
  os_log_type_t v40 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchPredicate();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (void **)((char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = *(void **)(v2 + 48);
  *uint64_t v18 = v19;
  (*(void (**)(void *, void, uint64_t))(v16 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v15);
  id v20 = v19;
  char v21 = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v16 + 8))(v18, v15);
  if ((v21 & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  uint64_t v35 = a1;
  sub_10000588C(&qword_101643CB8);
  swift_allocObject();
  uint64_t v22 = PassthroughSubject.init()();
  *(void *)(v2 + 136) = v22;
  swift_retain();
  swift_release();
  uint64_t v43 = v22;
  sub_100062734(&qword_101643EA0, &qword_101643CB8);
  uint64_t v43 = Publisher.eraseToAnyPublisher()();
  if (qword_101636AC8 != -1) {
LABEL_5:
  }
    swift_once();
  uint64_t v23 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  sub_100010324(v23, (uint64_t)qword_1016438D8);
  id v44 = v20;
  uint64_t v24 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v6, 1, 1, v24);
  id v25 = v20;
  sub_10000588C(&qword_101643EA8);
  sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  sub_100062734(&qword_101643EB0, &qword_101643EA8);
  sub_10027B124();
  Publisher.timeout<A>(_:scheduler:options:customError:)();
  sub_10001DAB4((uint64_t)v6, &qword_10163C6C8);

  swift_release();
  sub_10000588C(&qword_101643EC0);
  sub_100062734(&qword_101643F08, &qword_101643EF0);
  uint64_t v26 = v37;
  Publisher.map<A>(_:)();
  (*(void (**)(char *, uint64_t))(v36 + 8))(v9, v26);
  sub_10000588C(&qword_101643ED0);
  sub_100062734(&qword_101643F10, &qword_101643EF8);
  sub_100062734(&qword_101643EE0, &qword_101643ED0);
  uint64_t v27 = v39;
  unint64_t v28 = v40;
  Publisher.catch<A>(_:)();
  (*(void (**)(char *, uint64_t))(v38 + 8))(v12, v27);
  uint64_t v29 = swift_allocObject();
  swift_weakInit();
  uint64_t v30 = swift_allocObject();
  uint64_t v31 = v35;
  *(void *)(v30 + 16) = v29;
  *(void *)(v30 + 24) = v31;
  sub_100062734(&qword_101643F18, &qword_101643F00);
  id v32 = v31;
  uint64_t v33 = v42;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v41 + 8))(v28, v33);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  return swift_release();
}

id sub_1003E8F94@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  *(void *)a2 = v2;
  *(unsigned char *)(a2 + 8) = 0;
  return v2;
}

void sub_1003E8FA8(char **a1, uint64_t a2, char *a3)
{
  uint64_t v5 = sub_10000588C(&qword_101643CC8);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (void **)((char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = type metadata accessor for BluetoothManagerDevice();
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v56 - v16;
  uint64_t v18 = *a1;
  char v19 = *((unsigned char *)a1 + 8);
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    if (v19)
    {
      if (v18)
      {
        type metadata accessor for Transaction();
        uint64_t v50 = swift_allocObject();
        swift_weakInit();
        uint64_t v51 = swift_allocObject();
        *(void *)(v51 + 16) = v50;
        *(void *)(v51 + 24) = a3;
        uint64_t v52 = a3;
        swift_retain();
        static Transaction.asyncTask(name:block:)();
        swift_release();
        swift_release();
      }
      else
      {
        if (qword_101636AC0 != -1) {
          swift_once();
        }
        uint64_t v21 = type metadata accessor for Logger();
        sub_100010324(v21, (uint64_t)qword_10170DE38);
        uint64_t v22 = Logger.logObject.getter();
        os_log_type_t v23 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v22, v23))
        {
          uint64_t v24 = (uint8_t *)swift_slowAlloc();
          id v25 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v24 = 138412290;
          sub_100414B68();
          swift_allocError();
          *uint64_t v26 = 0;
          uint64_t v27 = _swift_stdlib_bridgeErrorToNSError();
          uint64_t v65 = v27;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *id v25 = v27;
          _os_log_impl((void *)&_mh_execute_header, v22, v23, "subscribeToPairingEvents failure: %@", v24, 0xCu);
          sub_10000588C((uint64_t *)&unk_101638EA0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
          swift_release();

          return;
        }
      }
    }
    else
    {
      uint64_t v62 = Strong;
      unint64_t v28 = *(void **)&v18[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject];
      id v63 = v18;
      uint64_t v29 = v18;
      id v30 = [v28 identifier];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      id v59 = *(id *)&a3[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject];
      id v31 = [v59 identifier];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      char v32 = static UUID.== infix(_:_:)();
      uint64_t v33 = *(void (**)(char *, uint64_t))(v12 + 8);
      v33(v15, v11);
      id v60 = v33;
      v33(v17, v11);
      uint64_t v65 = 0;
      unint64_t v66 = 0xE000000000000000;
      _StringGuts.grow(_:)(46);
      swift_bridgeObjectRelease();
      uint64_t v65 = 0xD000000000000019;
      unint64_t v66 = 0x80000001013FBF50;
      if (v32) {
        uint64_t v34 = 1702195828;
      }
      else {
        uint64_t v34 = 0x65736C6166;
      }
      if (v32) {
        unint64_t v35 = 0xE400000000000000;
      }
      else {
        unint64_t v35 = 0xE500000000000000;
      }
      unint64_t v36 = v35;
      String.append(_:)(*(Swift::String *)&v34);
      swift_bridgeObjectRelease();
      v37._object = (void *)0x80000001013FBFB0;
      v37._countAndFlagsBits = 0xD000000000000013;
      String.append(_:)(v37);
      uint64_t v38 = v65;
      unint64_t v39 = v66;
      if (qword_101636AC0 != -1) {
        swift_once();
      }
      uint64_t v40 = type metadata accessor for Logger();
      uint64_t v61 = sub_100010324(v40, (uint64_t)qword_10170DE38);
      sub_100A3C59C(v38, v39);
      swift_bridgeObjectRelease();
      if (v32)
      {
        sub_1003F77AC((uint64_t)a3, v7);
        uint64_t v41 = sub_10000588C(&qword_101643CD0);
        if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(*(void *)(v41 - 8) + 48))(v7, 1, v41) != 1)
        {
          uint64_t v54 = *v7;
          sub_100418690((uint64_t)v7 + *(int *)(v41 + 48), (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
          sub_1003F8944((uint64_t)v54, (uint64_t)v10, 0, 0, (uint64_t)_swiftEmptyArrayStorage);

          sub_1004190CC(v63, 0);
          swift_release();
          sub_100418B1C((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
          return;
        }
        sub_10001DAB4((uint64_t)v7, &qword_101643CC8);
        uint64_t v42 = a3;
        uint64_t v43 = Logger.logObject.getter();
        os_log_type_t v44 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v43, v44))
        {
          unint64_t v45 = (uint8_t *)swift_slowAlloc();
          uint64_t v58 = swift_slowAlloc();
          uint64_t v65 = v58;
          *(_DWORD *)unint64_t v45 = 136446210;
          uint64_t v57 = v45;
          id v46 = [v59 identifier:v45 + 4];
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          sub_100414C30((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter();
          unint64_t v49 = v48;
          v60(v17, v11);
          uint64_t v64 = sub_1008FA0F0(v47, v49, &v65);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v43, v44, "Unable to sanitize MAC address for peripheral %{public}s", v57, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
        id v55 = v63;
        sub_100A3C59C(0, 0xE000000000000000);
        id v53 = v55;
      }
      else
      {
        id v53 = v63;
      }
      sub_1004190CC(v53, 0);
    }
    swift_release();
  }
}

uint64_t sub_1003E97D0(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 40) = a1;
  *(void *)(v2 + 48) = a2;
  return _swift_task_switch(sub_1003E97F0, 0, 0);
}

uint64_t sub_1003E97F0()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  v0[7] = Strong;
  if (Strong)
  {
    uint64_t v2 = (void *)swift_task_alloc();
    v0[8] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1003E98E4;
    uint64_t v3 = v0[6];
    return sub_1003FD6EC(v3);
  }
  else
  {
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
}

uint64_t sub_1003E98E4(char a1)
{
  *(unsigned char *)(*(void *)v1 + 72) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1003E99E4, 0, 0);
}

uint64_t sub_1003E99E4()
{
  if (*(unsigned char *)(v0 + 72))
  {
    uint64_t v2 = *(void *)(v0 + 48);
    uint64_t v1 = *(void *)(v0 + 56);
    type metadata accessor for Transaction();
    uint64_t v3 = swift_task_alloc();
    *(void *)(v3 + 16) = v1;
    *(void *)(v3 + 24) = v2;
    static Transaction.named<A>(_:with:)();
    swift_release();
    swift_task_dealloc();
  }
  else
  {
    if (qword_101636AC0 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_10170DE38);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Got connection event but timed out waiting for pairing event.", v7, 2u);
      swift_slowDealloc();
    }
    swift_release();
  }
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_1003E9B84(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v12 = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[1] = *(void *)(a2 + 48);
  uint64_t v13 = (void *)swift_allocObject();
  v13[2] = a2;
  v13[3] = a3;
  v13[4] = a1;
  aBlock[4] = sub_100419474;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015BFA90;
  uint64_t v14 = _Block_copy(aBlock);
  swift_retain();
  id v15 = a3;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  aBlock[7] = _swiftEmptyArrayStorage;
  sub_100414C30((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v18);
  return swift_release();
}

uint64_t sub_1003E9E64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[1] = *(void *)(a2 + 48);
  uint64_t v13 = (void *)swift_allocObject();
  v13[2] = a1;
  v13[3] = a3;
  v13[4] = a2;
  aBlock[4] = sub_10041952C;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015BFB08;
  uint64_t v14 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  aBlock[7] = _swiftEmptyArrayStorage;
  sub_100414C30((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v17);
  return swift_release();
}

void sub_1003EA140(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v155 = a3;
  uint64_t v4 = sub_10000588C(&qword_10163BB20);
  __chkstk_darwin(v4 - 8);
  uint64_t v149 = (uint8_t *)&v138 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v147 = *(void *)(v6 - 8);
  uint64_t v148 = v6;
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v144 = (uint64_t)&v138 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v145 = (uint64_t)&v138 - v9;
  uint64_t v10 = sub_10000588C((uint64_t *)&unk_1016477E0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (uint8_t *)&v138 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for MACAddress();
  uint64_t v156 = *(void *)(v13 - 8);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v151 = (char *)&v138 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  uint64_t v154 = (void (*)(uint64_t, uint64_t))((char *)&v138 - v16);
  uint64_t v17 = sub_10000588C(&qword_101643F30);
  __chkstk_darwin(v17 - 8);
  uint64_t v158 = (char *)&v138 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for BluetoothPairingState();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v146 = (char *)&v138 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __chkstk_darwin(v21);
  id v25 = (char *)&v138 - v24;
  uint64_t v26 = __chkstk_darwin(v23);
  uint64_t v150 = (char *)&v138 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  id v159 = (char *)&v138 - v29;
  __chkstk_darwin(v28);
  id v31 = (char *)&v138 - v30;
  Transaction.capture()();
  if (qword_101636AC0 != -1) {
    swift_once();
  }
  uint64_t v32 = type metadata accessor for Logger();
  uint64_t v33 = sub_100010324(v32, (uint64_t)qword_10170DE38);
  uint64_t v34 = Logger.logObject.getter();
  os_log_type_t v35 = static os_log_type_t.info.getter();
  int v36 = v35;
  BOOL v37 = os_log_type_enabled(v34, v35);
  uint64_t v152 = v12;
  uint64_t v153 = v13;
  uint64_t v143 = v25;
  uint64_t v157 = (uint8_t *)v33;
  if (v37)
  {
    uint64_t v38 = swift_slowAlloc();
    uint64_t v142 = (void (*)(char *, char *, uint64_t))swift_slowAlloc();
    uint64_t v160 = a2;
    v161[0] = (uint64_t)v142;
    *(_DWORD *)uint64_t v38 = 134218242;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v38 + 12) = 2080;
    uint64_t v140 = v38 + 14;
    uint64_t v160 = a2;
    sub_1001ACBF0();
    LODWORD(v141) = v36;
    uint64_t v39 = FixedWidthInteger.data.getter();
    uint64_t v40 = v19;
    unint64_t v42 = v41;
    uint64_t v43 = v31;
    uint64_t v44 = Data.hexString.getter();
    uint64_t v45 = v20;
    unint64_t v47 = v46;
    unint64_t v48 = v42;
    uint64_t v19 = v40;
    sub_10001CFB8(v39, v48);
    uint64_t v49 = v44;
    id v31 = v43;
    uint64_t v160 = sub_1008FA0F0(v49, v47, v161);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v20 = v45;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v34, (os_log_type_t)v141, "handlePairingNotification. State %llu. Raw %s", (uint8_t *)v38, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v50 = (uint64_t)v158;
  BluetoothPairingState.init(rawValue:)();
  int v51 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 48))(v50, 1, v19);
  uint64_t v52 = v159;
  if (v51 != 1)
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v20 + 32))(v31, v50, v19);
    uint64_t v142 = *(void (**)(char *, char *, uint64_t))(v20 + 16);
    uint64_t v141 = v20 + 16;
    v142(v52, v31, v19);
    uint64_t v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v56, v57))
    {
      uint64_t v58 = (uint8_t *)swift_slowAlloc();
      uint64_t v59 = swift_slowAlloc();
      uint64_t v158 = v31;
      v161[0] = v59;
      *(_DWORD *)uint64_t v58 = 136446210;
      sub_100414C30(&qword_101643F38, (void (*)(uint64_t))&type metadata accessor for BluetoothPairingState);
      uint64_t v60 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v160 = sub_1008FA0F0(v60, v61, v161);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v62 = *(void (**)(char *, uint64_t))(v20 + 8);
      v62(v52, v19);
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "BluetoothPairingState %{public}s", v58, 0xCu);
      swift_arrayDestroy();
      id v31 = v158;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v62 = *(void (**)(char *, uint64_t))(v20 + 8);
      v62(v52, v19);
    }

    uint64_t v63 = (uint64_t)v154;
    char v64 = BluetoothPairingState.isUnpaired.getter();
    uint64_t v65 = v155;
    if (v64)
    {
      id v159 = (char *)v62;
      uint64_t v66 = BluetoothPairingState.macAddress.getter();
      __chkstk_darwin(v66);
      *(&v138 - 2) = v63;
      *(&v138 - 1) = v67;
      sub_10000588C(&qword_10165F6B0);
      Lock.callAsFunction<A>(_:)();
      uint64_t v68 = (char *)v161[0];
      uint64_t v69 = v156 + 8;
      uint64_t v70 = *(void (**)(uint64_t, uint64_t))(v156 + 8);
      uint64_t v71 = v153;
      v70(v63, v153);
      if (v68)
      {
        sub_100A3C59C(0xD000000000000013, 0x80000001013FC060);
        BluetoothPairingState.macAddress.getter();
        sub_1003EB638(v68, v63);

        v70(v63, v71);
LABEL_15:
        id v72 = v31;
        uint64_t v73 = v19;
LABEL_16:
        ((void (*)(char *, uint64_t))v159)(v72, v73);
        return;
      }
      uint64_t v154 = v70;
      unint64_t v83 = v150;
      uint64_t v158 = v31;
      v142(v150, v31, v19);
      uint64_t v84 = Logger.logObject.getter();
      os_log_type_t v85 = static os_log_type_t.error.getter();
      int v86 = v85;
      if (os_log_type_enabled(v84, v85))
      {
        LODWORD(v151) = v86;
        uint64_t v87 = swift_slowAlloc();
        uint64_t v156 = v69;
        unint64_t v88 = (uint8_t *)v87;
        uint64_t v89 = swift_slowAlloc();
        uint64_t v157 = (uint8_t *)v19;
        v161[0] = v89;
        *(_DWORD *)unint64_t v88 = 136315138;
        uint64_t v149 = v88 + 4;
        BluetoothPairingState.macAddress.getter();
        sub_100414C30((unint64_t *)&qword_101649EE0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
        uint64_t v139 = v20;
        uint64_t v90 = v153;
        uint64_t v91 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v93 = v92;
        unint64_t v94 = v154;
        v154(v63, v90);
        uint64_t v160 = sub_1008FA0F0(v91, v93, v161);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v95 = (void (*)(char *, uint64_t))v159;
        ((void (*)(char *, uint8_t *))v159)(v83, v157);
        _os_log_impl((void *)&_mh_execute_header, v84, (os_log_type_t)v151, "Unable to retrieve peripheral from %s", v88, 0xCu);
        swift_arrayDestroy();
        uint64_t v19 = (uint64_t)v157;
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v96 = (uint64_t)v152;
      }
      else
      {
        uint64_t v95 = (void (*)(char *, uint64_t))v159;
        ((void (*)(char *, uint64_t))v159)(v83, v19);

        uint64_t v96 = (uint64_t)v152;
        uint64_t v90 = v153;
        unint64_t v94 = v154;
      }
      uint64_t v112 = v158;
      BluetoothPairingState.macAddress.getter();
      swift_beginAccess();
      sub_101127C6C(v63, v96);
      v94(v63, v90);
    }
    else
    {
      if ((BluetoothPairingState.isPaired.getter() & 1) == 0)
      {
        v62(v31, v19);
        return;
      }
      id v159 = (char *)v62;
      uint64_t v139 = v20;
      uint64_t v74 = v151;
      BluetoothPairingState.macAddress.getter();
      swift_beginAccess();
      uint64_t v151 = v65 + 112;
      LOBYTE(v74) = sub_100DCF650(v63, v74);
      uint64_t v75 = v63;
      uint64_t v77 = v156 + 8;
      Swift::String v76 = *(void (**)(uint64_t, uint64_t))(v156 + 8);
      uint64_t v78 = v153;
      v76(v75, v153);
      swift_endAccess();
      if ((v74 & 1) == 0)
      {
        uint64_t v156 = v77;
        uint64_t v97 = v146;
        v142(v146, v31, v19);
        uint64_t v98 = Logger.logObject.getter();
        os_log_type_t v99 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v98, v99))
        {
          uint64_t v100 = swift_slowAlloc();
          uint64_t v101 = v78;
          uint64_t v155 = (char *)v76;
          uint64_t v102 = (uint8_t *)v100;
          uint64_t v103 = swift_slowAlloc();
          uint64_t v157 = (uint8_t *)v19;
          v161[0] = v103;
          uint64_t v158 = v31;
          *(_DWORD *)uint64_t v102 = 136315138;
          uint64_t v152 = v102 + 4;
          unint64_t v104 = v97;
          uint64_t v105 = (char *)v154;
          BluetoothPairingState.macAddress.getter();
          sub_100414C30((unint64_t *)&qword_101649EE0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
          uint64_t v106 = dispatch thunk of CustomStringConvertible.description.getter();
          unint64_t v108 = v107;
          ((void (*)(void, uint64_t))v155)(v105, v101);
          uint64_t v160 = sub_1008FA0F0(v106, v108, v161);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          uint64_t v109 = v104;
          uint64_t v110 = v157;
          uint64_t v111 = (void (*)(char *, uint8_t *))v159;
          ((void (*)(char *, uint8_t *))v159)(v109, v157);
          _os_log_impl((void *)&_mh_execute_header, v98, v99, "Already handling pairing event for this MAC %s.", v102, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          v111(v158, v110);
        }
        else
        {

          unint64_t v122 = (void (*)(char *, uint64_t))v159;
          ((void (*)(char *, uint64_t))v159)(v97, v19);
          v122(v31, v19);
        }
        return;
      }
      BluetoothPairingState.macAddress.getter();
      uint64_t v79 = (uint64_t)v149;
      sub_100AE800C((uint64_t)v149);
      v76(v75, v78);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v147 + 48))(v79, 1, v148) != 1)
      {
        uint64_t v155 = (char *)v76;
        uint64_t v156 = v77;
        uint64_t v113 = v19;
        uint64_t v114 = v145;
        sub_100418690(v79, v145, type metadata accessor for OwnedBeaconGroup);
        uint64_t v115 = v144;
        sub_100418628(v114, v144, type metadata accessor for OwnedBeaconGroup);
        uint64_t v116 = Logger.logObject.getter();
        os_log_type_t v117 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v116, v117))
        {
          uint64_t v118 = (uint8_t *)swift_slowAlloc();
          uint64_t v119 = swift_slowAlloc();
          uint64_t v158 = v31;
          v161[0] = v119;
          *(_DWORD *)uint64_t v118 = 136315138;
          uint64_t v157 = v118 + 4;
          uint64_t v120 = sub_1004D6904();
          uint64_t v160 = sub_1008FA0F0(v120, v121, v161);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_100418B1C(v115, type metadata accessor for OwnedBeaconGroup);
          _os_log_impl((void *)&_mh_execute_header, v116, v117, "Received pairing event for existing %s", v118, 0xCu);
          swift_arrayDestroy();
          id v31 = v158;
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_100418B1C(v115, type metadata accessor for OwnedBeaconGroup);
        }

        uint64_t v123 = (uint64_t)v152;
        dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)();
        uint64_t v124 = (uint64_t)v154;
        BluetoothPairingState.macAddress.getter();
        swift_beginAccess();
        sub_101127C6C(v124, v123);
        ((void (*)(uint64_t, uint64_t))v155)(v124, v153);
        sub_10001DAB4(v123, (uint64_t *)&unk_1016477E0);
        swift_endAccess();
        sub_100418B1C(v114, type metadata accessor for OwnedBeaconGroup);
        id v72 = v31;
        uint64_t v73 = v113;
        goto LABEL_16;
      }
      sub_10001DAB4(v79, &qword_10163BB20);
      uint64_t v80 = BluetoothPairingState.macAddress.getter();
      __chkstk_darwin(v80);
      *(&v138 - 2) = v75;
      *(&v138 - 1) = v81;
      sub_10000588C(&qword_10165F6B0);
      Lock.callAsFunction<A>(_:)();
      unint64_t v82 = (void *)v161[0];
      v76(v75, v78);
      if (v82)
      {
        sub_100A3C59C(0xD000000000000013, 0x80000001013FC060);
        v161[0] = (uint64_t)v82;
        swift_retain();
        PassthroughSubject.send(_:)();
        swift_release();
        LOBYTE(v161[0]) = 2;
        swift_retain();
        PassthroughSubject.send(completion:)();
        swift_release();
        sub_1003ED388(v82);

        goto LABEL_15;
      }
      uint64_t v125 = v77;
      unint64_t v126 = v76;
      unint64_t v127 = v143;
      uint64_t v158 = v31;
      v142(v143, v31, v19);
      id v128 = Logger.logObject.getter();
      uint64_t v129 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v128, (os_log_type_t)v129))
      {
        uint64_t v130 = swift_slowAlloc();
        uint64_t v156 = v125;
        unint64_t v131 = (uint8_t *)v130;
        uint64_t v132 = swift_slowAlloc();
        uint64_t v157 = (uint8_t *)v19;
        v161[0] = v132;
        *(_DWORD *)unint64_t v131 = 136315138;
        uint64_t v155 = (char *)(v131 + 4);
        uint64_t v133 = (uint64_t)v154;
        BluetoothPairingState.macAddress.getter();
        sub_100414C30((unint64_t *)&qword_101649EE0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
        uint64_t v134 = v153;
        uint64_t v135 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v137 = v136;
        v126(v133, v134);
        uint64_t v160 = sub_1008FA0F0(v135, v137, v161);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v95 = (void (*)(char *, uint64_t))v159;
        ((void (*)(char *, uint8_t *))v159)(v143, v157);
        _os_log_impl((void *)&_mh_execute_header, v128, (os_log_type_t)v129, "Unable to retrieve peripheral from %s", v131, 0xCu);
        swift_arrayDestroy();
        uint64_t v19 = (uint64_t)v157;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        uint64_t v95 = (void (*)(char *, uint64_t))v159;
        ((void (*)(char *, uint64_t))v159)(v127, v19);

        uint64_t v134 = v153;
        uint64_t v133 = (uint64_t)v154;
      }
      uint64_t v96 = (uint64_t)v152;
      uint64_t v112 = v158;
      BluetoothPairingState.macAddress.getter();
      swift_beginAccess();
      sub_101127C6C(v133, v96);
      v126(v133, v134);
    }
    sub_10001DAB4(v96, (uint64_t *)&unk_1016477E0);
    swift_endAccess();
    v95(v112, v19);
    return;
  }
  sub_10001DAB4(v50, &qword_101643F30);
  id v53 = Logger.logObject.getter();
  os_log_type_t v54 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v53, v54))
  {
    id v55 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v55 = 0;
    _os_log_impl((void *)&_mh_execute_header, v53, v54, "Invalid bluetooth pairing state.", v55, 2u);
    swift_slowDealloc();
  }
}

void sub_1003EB638(char *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v98 = a2;
  unint64_t v93 = a1;
  uint64_t v89 = sub_10000588C((uint64_t *)&unk_1016477E0);
  __chkstk_darwin(v89);
  uint64_t v91 = (uint64_t)&v78 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v87 = *(void *)(v5 - 8);
  uint64_t v88 = v5;
  __chkstk_darwin(v5);
  os_log_type_t v85 = (char *)&v78 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = type metadata accessor for DispatchQoS();
  uint64_t v84 = *(void *)(v86 - 8);
  __chkstk_darwin(v86);
  unint64_t v83 = (char *)&v78 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for MACAddress();
  uint64_t v9 = *(NSObject **)(v8 - 8);
  Class isa = v9[8].isa;
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v95 = ((char *)&v78 - (((unint64_t)isa + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = __chkstk_darwin(v11);
  unint64_t v92 = (char *)&v78 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v78 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v78 - v17;
  uint64_t v19 = type metadata accessor for DispatchPredicate();
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (uint8_t **)((char *)&v78 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v23 = *(void **)(v3 + 48);
  *uint64_t v22 = v23;
  (*(void (**)(void *, void, uint64_t))(v20 + 104))(v22, enum case for DispatchPredicate.onQueue(_:), v19);
  id v82 = v23;
  uint64_t v24 = _dispatchPreconditionTest(_:)();
  uint64_t v26 = *(void (**)(void *, uint64_t))(v20 + 8);
  uint64_t v25 = v20 + 8;
  v26(v22, v19);
  if ((v24 & 1) == 0)
  {
    __break(1u);
LABEL_24:
    swift_once();
LABEL_4:
    uint64_t v29 = type metadata accessor for Logger();
    uint64_t v30 = sub_100010324(v29, (uint64_t)qword_10170DE38);
    id v31 = v92;
    v96(v92, v18, v25);
    uint64_t v80 = v30;
    uint64_t v32 = Logger.logObject.getter();
    uint64_t v33 = v25;
    os_log_type_t v34 = static os_log_type_t.default.getter();
    BOOL v35 = os_log_type_enabled(v32, v34);
    uint64_t v79 = v24;
    if (v35)
    {
      int v36 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)int v36 = 136446210;
      uint64_t v78 = v36 + 4;
      sub_100414C30((unint64_t *)&qword_101649EE0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
      uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v100 = (void *)sub_1008FA0F0(v37, v38, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v94(v31, v33);
      _os_log_impl((void *)&_mh_execute_header, v32, v34, "Received unpair event for address %{public}s.", v36, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      v94(v31, v33);
    }

    uint64_t v46 = sub_1003E7B30(v93);
    uint64_t v47 = v98;
    unint64_t v48 = v95;
    if (v46)
    {
      uint64_t v49 = (void (*)(char *, uint64_t))v46;
      QueueSynchronizer.conditionalSync<A>(_:)();
      if (aBlock[0])
      {
        uint64_t v50 = Logger.logObject.getter();
        os_log_type_t v51 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v50, v51))
        {
          uint64_t v52 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v52 = 0;
          _os_log_impl((void *)&_mh_execute_header, v50, v51, "Pairing is in progress. Deferring unpair!", v52, 2u);
          swift_slowDealloc();
        }

        swift_beginAccess();
        uint64_t v53 = v91;
        sub_101127C6C(v47, v91);
        sub_10001DAB4(v53, (uint64_t *)&unk_1016477E0);
        swift_endAccess();
      }
      else
      {
        uint64_t v58 = dispatch_group_create();
        dispatch_group_enter(v58);
        uint64_t v59 = v79;
        unint64_t v94 = v49;
        v96((char *)v79, (char *)v47, v33);
        uint64_t isa_low = LOBYTE(v48[10].isa);
        unint64_t v92 = 0;
        uint64_t v61 = v59;
        uint64_t v62 = (isa_low + 16) & ~isa_low;
        uint64_t v90 = isa_low | 7;
        unint64_t v63 = ((unint64_t)isa + v62 + 7) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v64 = swift_allocObject();
        uint64_t v65 = (void (*)(uint64_t, uint64_t, uint64_t))v48[4].isa;
        v65(v64 + v62, v61, v33);
        *(void *)(v64 + v63) = v58;
        uint64_t v95 = v58;
        sub_100E0C800(v47, (uint64_t)sub_100419188, v64);
        swift_release();
        v96((char *)v61, (char *)v47, v33);
        uint64_t v66 = swift_allocObject();
        v65(v66 + v62, v61, v33);
        *(void *)(v66 + v63) = v81;
        uint64_t v67 = v93;
        *(void *)(v66 + ((v63 + 15) & 0xFFFFFFFFFFFFFFF8)) = v93;
        aBlock[4] = (uint64_t)sub_1004192D0;
        aBlock[5] = v66;
        aBlock[0] = (uint64_t)_NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        aBlock[2] = (uint64_t)sub_1004B5480;
        aBlock[3] = (uint64_t)&unk_1015BF9F0;
        uint64_t v68 = _Block_copy(aBlock);
        swift_retain();
        uint64_t v69 = v67;
        uint64_t v70 = v83;
        static DispatchQoS.unspecified.getter();
        uint64_t v100 = _swiftEmptyArrayStorage;
        sub_100414C30((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_10000588C((uint64_t *)&unk_10163F350);
        sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
        uint64_t v71 = v85;
        uint64_t v72 = v88;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        uint64_t v73 = v95;
        OS_dispatch_group.notify(qos:flags:queue:execute:)();
        _Block_release(v68);
        (*(void (**)(char *, uint64_t))(v87 + 8))(v71, v72);
        (*(void (**)(char *, uint64_t))(v84 + 8))(v70, v86);
        swift_release();
        uint64_t v74 = sub_1003E8328();
        uint64_t v75 = __chkstk_darwin(v74);
        Swift::String v76 = (uint8_t *)v98;
        *(&v78 - 2) = (uint8_t *)v75;
        *(&v78 - 1) = v76;
        uint64_t v77 = v91;
        OS_dispatch_queue.sync<A>(execute:)();
        sub_10001DAB4(v77, (uint64_t *)&unk_1016477E0);
        swift_release();
      }
      swift_release();
    }
    else
    {
      os_log_type_t v54 = Logger.logObject.getter();
      os_log_type_t v55 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v54, v55))
      {
        uint64_t v56 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v56 = 0;
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "Unable to create a new pairing manager to handle unpair!", v56, 2u);
        swift_slowDealloc();
      }

      swift_beginAccess();
      uint64_t v57 = v91;
      sub_101127C6C(v47, v91);
      sub_10001DAB4(v57, (uint64_t *)&unk_1016477E0);
      swift_endAccess();
    }
    return;
  }
  uint64_t v27 = (char *)v98;
  uint64_t v96 = (void (*)(char *, char *, uint64_t))v9[2].isa;
  uint64_t v97 = v9 + 2;
  v96(v16, (char *)v98, v8);
  swift_beginAccess();
  uint64_t v90 = v3 + 112;
  char v28 = sub_100DCF650((uint64_t)v18, v16);
  uint64_t v24 = (uint64_t)v18;
  unint64_t v94 = (void (*)(char *, uint64_t))v9[1].isa;
  v94(v18, v8);
  swift_endAccess();
  uint64_t v18 = v27;
  uint64_t v25 = v8;
  if (v28)
  {
    uint64_t v95 = v9;
    uint64_t v81 = v3;
    if (qword_101636AC0 == -1) {
      goto LABEL_4;
    }
    goto LABEL_24;
  }
  if (qword_101636AC0 != -1) {
    swift_once();
  }
  uint64_t v39 = type metadata accessor for Logger();
  sub_100010324(v39, (uint64_t)qword_10170DE38);
  v96((char *)v95, v18, v8);
  uint64_t v40 = Logger.logObject.getter();
  os_log_type_t v41 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v40, v41))
  {
    unint64_t v42 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)unint64_t v42 = 136446210;
    sub_100414C30((unint64_t *)&qword_101649EE0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
    uint64_t v43 = v95;
    uint64_t v44 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v100 = (void *)sub_1008FA0F0(v44, v45, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v94((char *)v43, v25);
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "Already handling unpairing event for this MAC %{public}s.", v42, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    v94((char *)v95, v8);
  }
}

void sub_1003EC308(uint64_t a1, NSObject *a2)
{
  uint64_t v4 = type metadata accessor for MACAddress();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101636AC0 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_100010324(v8, (uint64_t)qword_10170DE38);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    v19[0] = a2;
    uint64_t v12 = (uint8_t *)v11;
    v20[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136446210;
    sub_100414C30((unint64_t *)&qword_101649EE0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v19[1] = sub_1008FA0F0(v13, v14, v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Unpair completed for address %{public}s.", v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a2 = v19[0];
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }

  uint64_t My = type metadata accessor for Feature.FindMy();
  v20[3] = My;
  v20[4] = sub_100414C30((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
  uint64_t v16 = sub_10001D958(v20);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v16, enum case for Feature.FindMy.managedCBPeripheral(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v20);
  if (My)
  {
    uint64_t v17 = (void *)SPManagedCBPeripheralChangedNotification;
    type metadata accessor for DarwinNotificationHelper();
    swift_allocObject();
    id v18 = v17;
    DarwinNotificationHelper.init(notificationName:rateLimit:)();
    dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)();
    swift_release();
  }
  dispatch_group_leave(a2);
}

void sub_1003EC6A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000588C(&qword_101643CC0);
  __chkstk_darwin(v6 - 8);
  uint64_t v71 = (uint64_t)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for BluetoothManagerDevice();
  uint64_t v69 = *(void *)(v8 - 8);
  uint64_t v70 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v72 = (char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v59 - v11;
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v65 = *(void *)(v13 - 8);
  uint64_t v66 = v13;
  __chkstk_darwin(v13);
  uint64_t v64 = (char *)&v59 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000588C((uint64_t *)&unk_1016477E0);
  __chkstk_darwin(v15 - 8);
  uint64_t v63 = (uint64_t)&v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for MACAddress();
  uint64_t v77 = *(void *)(v17 - 8);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v61 = (char *)&v59 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v67 = (char *)&v59 - v21;
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v59 - v22;
  if (qword_101636AC0 != -1) {
    swift_once();
  }
  uint64_t v62 = v12;
  uint64_t v24 = type metadata accessor for Logger();
  uint64_t v25 = sub_100010324(v24, (uint64_t)qword_10170DE38);
  uint64_t v26 = v77 + 16;
  uint64_t v75 = *(void (**)(char *, uint64_t, uint64_t))(v77 + 16);
  uint64_t v76 = a1;
  v75(v23, a1, v17);
  uint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.default.getter();
  BOOL v29 = os_log_type_enabled(v27, v28);
  uint64_t v73 = a2;
  uint64_t v68 = v25;
  if (v29)
  {
    uint64_t v30 = (uint8_t *)swift_slowAlloc();
    v79[0] = swift_slowAlloc();
    uint64_t v60 = a3;
    *(_DWORD *)uint64_t v30 = 136446210;
    sub_100414C30((unint64_t *)&qword_101649EE0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
    uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v78 = sub_1008FA0F0(v31, v32, v79);
    a3 = v60;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v74 = *(void (**)(char *, uint64_t))(v77 + 8);
    v74(v23, v17);
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Removing %{public}s from unpairing addresses.", v30, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a2 = v73;
    swift_slowDealloc();
  }
  else
  {
    uint64_t v74 = *(void (**)(char *, uint64_t))(v77 + 8);
    v74(v23, v17);
  }

  swift_beginAccess();
  uint64_t v33 = v63;
  uint64_t v34 = v76;
  sub_101127C6C(v76, v63);
  sub_10001DAB4(v33, (uint64_t *)&unk_1016477E0);
  swift_endAccess();
  id v35 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(a3
                                                              + OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject), "identifier"));
  uint64_t v36 = (uint64_t)v64;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)();

  swift_beginAccess();
  sub_1001645A0(v36);
  (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v36, v66);
  swift_endAccess();
  swift_release();
  uint64_t v37 = v67;
  v75(v67, v34, v17);
  unint64_t v38 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v38, v39))
  {
    uint64_t v40 = (uint8_t *)swift_slowAlloc();
    v79[0] = swift_slowAlloc();
    uint64_t v66 = v26;
    *(_DWORD *)uint64_t v40 = 136446210;
    sub_100414C30((unint64_t *)&qword_101649EE0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
    uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v78 = sub_1008FA0F0(v41, v42, v79);
    a2 = v73;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v74(v37, v17);
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "Resetting attempted retries for %{public}s.", v40, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    v74(v37, v17);
  }

  uint64_t v43 = (uint64_t)v72;
  v79[0] = sub_1003E2458();
  uint64_t v44 = v76;
  sub_100164788(v76);
  sub_1003E2910();
  uint64_t v45 = v71;
  sub_1003FCC18(v44, v71);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v69 + 48))(v45, 1, v70) == 1)
  {
    sub_10001DAB4(v45, &qword_101643CC0);
    uint64_t v46 = v61;
    v75(v61, v76, v17);
    uint64_t v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v47, v48))
    {
      uint64_t v49 = (uint8_t *)swift_slowAlloc();
      v79[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v49 = 136446210;
      sub_100414C30((unint64_t *)&qword_101649EE0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
      uint64_t v50 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v78 = sub_1008FA0F0(v50, v51, v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v74(v46, v17);
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "No BT device matching %{public}s after unpair as expected.", v49, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      v74(v46, v17);
    }
  }
  else
  {
    uint64_t v52 = (uint64_t)v62;
    sub_100418690(v45, (uint64_t)v62, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
    sub_100418628(v52, v43, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
    uint64_t v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v53, v54))
    {
      uint64_t v55 = v43;
      uint64_t v56 = (uint8_t *)swift_slowAlloc();
      v79[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v56 = 136315138;
      uint64_t v57 = sub_1001E0BAC();
      uint64_t v78 = sub_1008FA0F0(v57, v58, v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100418B1C(v55, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "Found paired BT device %s after unpair. Need to pair.", v56, 0xCu);
      swift_arrayDestroy();
      a2 = v73;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100418B1C(v43, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
    }

    sub_10132A910(v76, *(void *)(*(void *)(a2 + 32) + 24));
    sub_100418B1C(v52, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
  }
}

void sub_1003ED190()
{
  if (qword_101636AC0 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100010324(v0, (uint64_t)qword_10170DE38);
  swift_errorRetain();
  swift_errorRetain();
  oslog = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    *(_DWORD *)uint64_t v2 = 136446210;
    swift_errorRetain();
    sub_10000588C((uint64_t *)&unk_101638EB0);
    uint64_t v3 = String.init<A>(describing:)();
    sub_1008FA0F0(v3, v4, &v6);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, oslog, v1, "Fake classic pairing completed with error %{public}s", v2, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
}

uint64_t sub_1003ED388(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10000588C(&qword_10163C6C8);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = sub_10000588C(&qword_101643E80);
  uint64_t v44 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  uint64_t v53 = (char *)v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_101643E88);
  uint64_t v47 = *(void *)(v8 - 8);
  uint64_t v48 = v8;
  __chkstk_darwin(v8);
  uint64_t v45 = (char *)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C(&qword_101643E90);
  uint64_t v50 = *(void *)(v10 - 8);
  uint64_t v51 = v10;
  __chkstk_darwin(v10);
  uint64_t v49 = (char *)v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000588C(&qword_101643E98);
  uint64_t v13 = *(void (***)(char *, void))(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v52 = (char *)v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchPredicate();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (void *)((char *)v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = *(void **)(v2 + 48);
  *uint64_t v18 = v19;
  (*(void (**)(void *, void, uint64_t))(v16 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v15);
  id v20 = v19;
  uint64_t v21 = _dispatchPreconditionTest(_:)();
  uint64_t v23 = *(void (**)(void *, uint64_t))(v16 + 8);
  uint64_t v22 = (void (*)(char *, uint64_t, uint64_t, uint64_t))(v16 + 8);
  v23(v18, v15);
  if ((v21 & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  uint64_t v41 = v13;
  uint64_t v42 = v12;
  uint64_t v43 = a1;
  sub_10000588C(&qword_101643CB8);
  swift_allocObject();
  uint64_t v24 = (void *)PassthroughSubject.init()();
  *(void *)(v2 + 144) = v24;
  swift_retain();
  swift_release();
  v40[1] = v24;
  id v54 = v24;
  sub_100062734(&qword_101643EA0, &qword_101643CB8);
  id v54 = (id)Publisher.eraseToAnyPublisher()();
  id v55 = v20;
  uint64_t v21 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56);
  v40[0] = v2;
  v22(v6, 1, 1, v21);
  uint64_t v13 = (void (**)(char *, void))v20;
  sub_10000588C(&qword_101643EA8);
  sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  sub_100062734(&qword_101643EB0, &qword_101643EA8);
  sub_10027B124();
  Publisher.receive<A>(on:options:)();
  sub_10001DAB4((uint64_t)v6, &qword_10163C6C8);

  swift_release();
  if (qword_101636AC8 != -1) {
LABEL_5:
  }
    swift_once();
  uint64_t v25 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride();
  sub_100010324(v25, (uint64_t)qword_1016438D8);
  id v54 = v13;
  v22(v6, 1, 1, v21);
  sub_100062734(&qword_101643EB8, &qword_101643E80);
  uint64_t v26 = v13;
  os_log_type_t v28 = v45;
  uint64_t v27 = v46;
  BOOL v29 = v53;
  Publisher.timeout<A>(_:scheduler:options:customError:)();
  sub_10001DAB4((uint64_t)v6, &qword_10163C6C8);

  (*(void (**)(char *, uint64_t))(v44 + 8))(v29, v27);
  sub_10000588C(&qword_101643EC0);
  sub_100062734(&qword_101643EC8, &qword_101643E88);
  uint64_t v30 = v48;
  uint64_t v31 = v49;
  Publisher.map<A>(_:)();
  (*(void (**)(char *, uint64_t))(v47 + 8))(v28, v30);
  sub_10000588C(&qword_101643ED0);
  sub_100062734(&qword_101643ED8, &qword_101643E90);
  sub_100062734(&qword_101643EE0, &qword_101643ED0);
  uint64_t v32 = v51;
  uint64_t v33 = v52;
  Publisher.catch<A>(_:)();
  (*(void (**)(char *, uint64_t))(v50 + 8))(v31, v32);
  uint64_t v34 = swift_allocObject();
  swift_weakInit();
  uint64_t v35 = swift_allocObject();
  uint64_t v36 = v43;
  *(void *)(v35 + 16) = v34;
  *(void *)(v35 + 24) = v36;
  sub_100062734(&qword_101643EE8, &qword_101643E98);
  id v37 = v36;
  uint64_t v38 = v42;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  v41[1](v33, v38);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  return swift_release();
}

uint64_t sub_1003EDBC8()
{
  return Just.init(_:)();
}

void sub_1003EDC1C(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v77 = a3;
  uint64_t v4 = type metadata accessor for MACAddress();
  uint64_t v74 = *(void *)(v4 - 8);
  uint64_t v75 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v67 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C((uint64_t *)&unk_1016477E0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v67 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C(&qword_101643CC8);
  __chkstk_darwin(v10 - 8);
  uint64_t v76 = (void **)((char *)&v67 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = type metadata accessor for BluetoothManagerDevice();
  __chkstk_darwin(v12 - 8);
  uint64_t v73 = (uint64_t)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v67 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  id v20 = (char *)&v67 - v19;
  id v78 = *(id *)a1;
  char v21 = *(unsigned char *)(a1 + 8);
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    if (v21)
    {
      if ((v78 & 1) == 0)
      {
        if (qword_101636AC0 != -1) {
          swift_once();
        }
        uint64_t v22 = type metadata accessor for Logger();
        sub_100010324(v22, (uint64_t)qword_10170DE38);
        uint64_t v23 = Logger.logObject.getter();
        os_log_type_t v24 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v23, v24))
        {
          uint64_t v25 = (uint8_t *)swift_slowAlloc();
          uint64_t v26 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v25 = 138412290;
          sub_100414B68();
          swift_allocError();
          unsigned char *v27 = 0;
          uint64_t v28 = _swift_stdlib_bridgeErrorToNSError();
          unint64_t v79 = v28;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v26 = v28;
          _os_log_impl((void *)&_mh_execute_header, v23, v24, "subscribeToConnectionEvents failure: %@", v25, 0xCu);
          sub_10000588C((uint64_t *)&unk_101638EA0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }

        goto LABEL_32;
      }
      if (qword_101636AC0 != -1) {
        swift_once();
      }
      uint64_t v51 = type metadata accessor for Logger();
      sub_100010324(v51, (uint64_t)qword_10170DE38);
      uint64_t v52 = Logger.logObject.getter();
      os_log_type_t v53 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v52, v53))
      {
        id v54 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v54 = 0;
        _os_log_impl((void *)&_mh_execute_header, v52, v53, "Got pairing event but timed out waiting for connection event.", v54, 2u);
        swift_slowDealloc();
      }

      goto LABEL_31;
    }
    uint64_t v71 = v9;
    uint64_t v72 = v6;
    BOOL v29 = v77;
    uint64_t v30 = *(void **)&v77[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject];
    uint64_t v31 = (char *)v78;
    id v32 = [v30 identifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    id v33 = [*(id *)&v31[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject] identifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    int v34 = static UUID.== infix(_:_:)();
    uint64_t v35 = *(void (**)(char *, uint64_t))(v15 + 8);
    v35(v18, v14);
    v35(v20, v14);
    unint64_t v79 = 0;
    unint64_t v80 = 0xE000000000000000;
    _StringGuts.grow(_:)(49);
    swift_bridgeObjectRelease();
    unint64_t v79 = 0xD000000000000019;
    unint64_t v80 = 0x80000001013FBF50;
    int v70 = v34;
    if (v34) {
      uint64_t v36 = 1702195828;
    }
    else {
      uint64_t v36 = 0x65736C6166;
    }
    if (v34) {
      unint64_t v37 = 0xE400000000000000;
    }
    else {
      unint64_t v37 = 0xE500000000000000;
    }
    unint64_t v38 = v37;
    String.append(_:)(*(Swift::String *)&v36);
    swift_bridgeObjectRelease();
    v39._object = (void *)0x80000001013FBF70;
    v39._countAndFlagsBits = 0xD000000000000016;
    String.append(_:)(v39);
    uint64_t v41 = v79;
    unint64_t v40 = v80;
    if (qword_101636AC0 != -1) {
      swift_once();
    }
    uint64_t v42 = type metadata accessor for Logger();
    uint64_t v43 = sub_100010324(v42, (uint64_t)qword_10170DE38);
    sub_100A3C59C(v41, v40);
    swift_bridgeObjectRelease();
    uint64_t v44 = v29;
    uint64_t v69 = v43;
    uint64_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.debug.getter();
    uint64_t v47 = v31;
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v48 = (uint8_t *)swift_slowAlloc();
      uint64_t v49 = (void *)swift_slowAlloc();
      uint64_t v68 = v47;
      *(_DWORD *)uint64_t v48 = 138412290;
      unint64_t v79 = (unint64_t)v44;
      uint64_t v50 = v44;
      uint64_t v47 = v68;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v49 = v44;

      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Paired peripheral: %@", v48, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v45 = v44;
    }
    uint64_t v9 = v71;
    uint64_t v6 = v72;
    id v55 = v78;

    uint64_t v56 = v76;
    if ((v70 & 1) == 0)
    {
      sub_1004190CC(v55, 0);
LABEL_32:
      swift_release();
      return;
    }
    sub_1003F77AC((uint64_t)v47, v76);
    uint64_t v57 = sub_10000588C(&qword_101643CD0);
    if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(*(void *)(v57 - 8) + 48))(v56, 1, v57) != 1)
    {
      uint64_t v64 = *v56;
      uint64_t v65 = (uint64_t)v56 + *(int *)(v57 + 48);
      uint64_t v66 = v73;
      sub_100418690(v65, v73, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
      sub_1003F8944((uint64_t)v64, v66, 0, 0, (uint64_t)_swiftEmptyArrayStorage);

      sub_1004190CC(v55, 0);
      sub_100418B1C(v66, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
LABEL_31:
      sub_100A3AC74(v6);
      swift_beginAccess();
      sub_101127C6C((uint64_t)v6, (uint64_t)v9);
      (*(void (**)(char *, uint64_t))(v74 + 8))(v6, v75);
      sub_10001DAB4((uint64_t)v9, (uint64_t *)&unk_1016477E0);
      swift_endAccess();
      goto LABEL_32;
    }
    sub_10001DAB4((uint64_t)v56, &qword_101643CC8);
    sub_1004190D8(v55, 0);
    id v58 = v47;
    uint64_t v59 = Logger.logObject.getter();
    os_log_type_t v60 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v59, v60))
    {
      uint64_t v61 = (uint8_t *)swift_slowAlloc();
      uint64_t v62 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v61 = 138412290;
      unint64_t v79 = (unint64_t)v58;
      id v63 = v58;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v62 = v55;
      sub_1004190CC(v55, 0);
      sub_1004190CC(v55, 0);
      _os_log_impl((void *)&_mh_execute_header, v59, v60, "Unable to sanitize MAC address for peripheral %@", v61, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_release();
      sub_1004190CC(v55, 0);
    }
    else
    {
      sub_1004190CC(v55, 0);
      sub_1004190CC(v55, 0);

      swift_release();
    }
  }
}

uint64_t sub_1003EE640()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000588C(&qword_10163C6C8);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000588C(&qword_101643D98);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_101643DA0);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1016371D8 != -1) {
    swift_once();
  }
  uint64_t v27 = 0x7365547265646E75;
  unint64_t v28 = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v29 & 1) == 0)
  {
    uint64_t v26 = v10;
    if (qword_101636AC0 != -1) {
      swift_once();
    }
    uint64_t v25 = v6;
    uint64_t v14 = type metadata accessor for Logger();
    sub_100010324(v14, (uint64_t)qword_10170DE38);
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "connectionEventInitialSetup", v17, 2u);
      swift_slowDealloc();
    }

    sub_10000588C(&qword_10163AAE0);
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_101342130;
    *(void *)(v18 + 56) = &type metadata for BAServiceIdentifier;
    *(void *)(v18 + 64) = &off_1015CE038;
    *(unsigned char *)(v18 + 32) = 1;
    uint64_t v19 = sub_10132C4E8(v18);
    swift_bridgeObjectRelease();
    uint64_t v27 = v19;
    id v29 = *(id *)(v1 + 48);
    id v20 = v29;
    uint64_t v21 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56))(v4, 1, 1, v21);
    id v22 = v20;
    sub_10000588C(&qword_101643DA8);
    sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
    sub_100062734(&qword_101643DB0, &qword_101643DA8);
    sub_10027B124();
    Publisher.receive<A>(on:options:)();
    sub_10001DAB4((uint64_t)v4, &qword_10163C6C8);

    swift_release();
    swift_retain();
    sub_10000588C(&qword_101643DB8);
    sub_100062734(&qword_101643DC0, &qword_101643D98);
    Publisher.compactMap<A>(_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v25 + 8))(v8, v5);
    uint64_t v23 = swift_allocObject();
    swift_weakInit();
    uint64_t v24 = swift_allocObject();
    *(void *)(v24 + 16) = sub_100415CE4;
    *(void *)(v24 + 24) = v23;
    sub_100062734(&qword_101643DC8, &qword_101643DA0);
    Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v26 + 8))(v12, v9);
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    return swift_release();
  }
  return result;
}

void sub_1003EEBEC(char **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_10000588C(&qword_10163C6C8);
  __chkstk_darwin(v6 - 8);
  uint64_t v170 = (char *)&v141 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v153 = sub_10000588C(&qword_1016417E0);
  uint64_t v152 = *(void *)(v153 - 8);
  __chkstk_darwin(v153);
  uint64_t v151 = (char *)&v141 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v157 = sub_10000588C(&qword_1016417E8);
  uint64_t v155 = *(void *)(v157 - 8);
  __chkstk_darwin(v157);
  uint64_t v154 = (char *)&v141 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v159 = sub_10000588C(&qword_1016417F0);
  uint64_t v158 = *(void *)(v159 - 8);
  __chkstk_darwin(v159);
  uint64_t v156 = (char *)&v141 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v163 = sub_10000588C(&qword_1016417F8);
  uint64_t v161 = *(void *)(v163 - 8);
  __chkstk_darwin(v163);
  uint64_t v160 = (char *)&v141 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v165 = sub_10000588C(&qword_101641800);
  uint64_t v164 = *(void *)(v165 - 8);
  __chkstk_darwin(v165);
  uint64_t v162 = (char *)&v141 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v168 = sub_10000588C(&qword_101643DD0);
  uint64_t v167 = *(void *)(v168 - 8);
  __chkstk_darwin(v168);
  uint64_t v166 = (char *)&v141 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000588C(&qword_101643DD8);
  uint64_t v171 = *(void *)(v14 - 8);
  uint64_t v172 = v14;
  __chkstk_darwin(v14);
  uint64_t v169 = (char *)&v141 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000588C(&qword_101643CC0);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v141 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v149 = (void *)type metadata accessor for BluetoothManagerDevice();
  uint64_t v148 = *(v149 - 1);
  __chkstk_darwin(v149);
  uint64_t v147 = (uint64_t)&v141 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for BeaconObservation();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v179 = (int *)v20;
  uint64_t v180 = v21;
  __chkstk_darwin(v20);
  uint64_t v181 = (char *)&v141 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_10000588C(&qword_10163BB20);
  uint64_t v24 = __chkstk_darwin(v23 - 8);
  uint64_t v182 = (uint8_t *)&v141 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v24);
  uint64_t v175 = (uint64_t)&v141 - v26;
  uint64_t v27 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v183 = *(unsigned int (***)(uint64_t, uint64_t, unint64_t))(v27 - 8);
  unint64_t v184 = v27;
  uint64_t v28 = __chkstk_darwin(v27);
  uint64_t v30 = (char *)&v141 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = __chkstk_darwin(v28);
  id v33 = (char *)&v141 - v32;
  uint64_t v34 = __chkstk_darwin(v31);
  uint64_t v173 = (uint64_t)&v141 - v35;
  __chkstk_darwin(v34);
  unint64_t v37 = (char *)&v141 - v36;
  unint64_t v38 = *a1;
  int v39 = *((char *)a1 + 8);
  if (qword_101636AC0 != -1) {
    swift_once();
  }
  uint64_t v178 = type metadata accessor for Logger();
  uint64_t v40 = sub_100010324(v178, (uint64_t)qword_10170DE38);
  uint64_t v41 = v38;
  uint64_t v42 = v38;
  uint64_t v177 = (char *)v40;
  uint64_t v43 = Logger.logObject.getter();
  os_log_type_t v44 = static os_log_type_t.debug.getter();
  BOOL v45 = os_log_type_enabled(v43, v44);
  uint64_t v150 = v18;
  if (v45)
  {
    int v46 = v39;
    uint64_t v47 = swift_slowAlloc();
    uint64_t v176 = a2;
    uint64_t v48 = (uint8_t *)v47;
    uint64_t v146 = (void *)swift_slowAlloc();
    id v185 = v146;
    id v174 = v33;
    uint64_t v145 = v48;
    *(_DWORD *)uint64_t v48 = 136315138;
    uint64_t v144 = v48 + 4;
    uint64_t v49 = v38;
    uint64_t v50 = v30;
    uint64_t v51 = v37;
    uint64_t v52 = a3;
    unint64_t v53 = sub_101321248(v38, v39);
    unint64_t v55 = v54;

    uint64_t v56 = v53;
    a3 = v52;
    unint64_t v37 = v51;
    uint64_t v30 = v50;
    id v186 = (id)sub_1008FA0F0(v56, v55, (uint64_t *)&v185);
    id v33 = v174;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    int v39 = v46;
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v43, v44, "connectionEvent: %s", v145, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a2 = v176;
    swift_slowDealloc();
  }
  else
  {
  }
  if ((v39 & 0x80000000) == 0)
  {
    uint64_t v57 = *(void **)&v38[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject];
    id v58 = v38;
    if ([v57 connectedTransport] == 1)
    {
      uint64_t v59 = (uint64_t)v182;
      sub_1003F0968((uint64_t)v58, *(uint8_t **)(a2 + 16), (uint64_t)v182);
      if (v183[6](v59, 1, v184) == 1)
      {

        sub_10001DAB4(v59, &qword_10163BB20);
      }
      else
      {
        LODWORD(v176) = v39;
        sub_100418690(v59, (uint64_t)v33, type metadata accessor for OwnedBeaconGroup);
        if (qword_101636EE0 != -1) {
          swift_once();
        }
        sub_100010324(v178, (uint64_t)qword_10170E7C8);
        sub_100418628((uint64_t)v33, (uint64_t)v30, type metadata accessor for OwnedBeaconGroup);
        uint64_t v84 = Logger.logObject.getter();
        os_log_type_t v85 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v84, v85))
        {
          uint64_t v86 = (uint8_t *)swift_slowAlloc();
          uint64_t v87 = (void *)swift_slowAlloc();
          id v174 = v33;
          id v185 = v87;
          *(_DWORD *)uint64_t v86 = 136315138;
          uint64_t v182 = v86 + 4;
          type metadata accessor for UUID();
          uint64_t v183 = (unsigned int (**)(uint64_t, uint64_t, unint64_t))v30;
          sub_100414C30((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v88 = dispatch thunk of CustomStringConvertible.description.getter();
          id v186 = (id)sub_1008FA0F0(v88, v89, (uint64_t *)&v185);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_100418B1C((uint64_t)v183, type metadata accessor for OwnedBeaconGroup);
          _os_log_impl((void *)&_mh_execute_header, v84, v85, "Saving classic bluetooth disconnect event for: %s", v86, 0xCu);
          swift_arrayDestroy();
          id v33 = v174;
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_100418B1C((uint64_t)v30, type metadata accessor for OwnedBeaconGroup);
        }

        if (qword_101636CB8 != -1) {
          swift_once();
        }
        uint64_t v97 = qword_10170E330;
        uint64_t v98 = &v33[*(int *)(v184 + 24)];
        uint64_t v99 = type metadata accessor for UUID();
        uint64_t v100 = (uint64_t)v181;
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v99 - 8) + 16))(v181, v98, v99);
        uint64_t v101 = v179;
        static Date.trustedNow.getter(v100 + v179[5]);
        *(unsigned char *)(v100 + v101[6]) = 38;
        sub_10000588C(&qword_10163A778);
        unint64_t v102 = (*(unsigned __int8 *)(v180 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v180 + 80);
        uint64_t v103 = swift_allocObject();
        *(_OWORD *)(v103 + 16) = xmmword_101342130;
        sub_100418628(v100, v103 + v102, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        uint64_t v104 = type metadata accessor for Transaction();
        __chkstk_darwin(v104);
        *(&v141 - 4) = v97;
        *(&v141 - 3) = v103;
        *(&v141 - 2) = 0;
        *(&v141 - 1) = 0;
        static Transaction.named<A>(_:with:)();
        swift_bridgeObjectRelease();
        sub_100418B1C(v100, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        sub_100A9E7EC(23);
        dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)();
        type metadata accessor for Transaction();
        static Transaction.asyncTask(name:block:)();

        sub_100418B1C((uint64_t)v33, type metadata accessor for OwnedBeaconGroup);
      }
      goto LABEL_49;
    }
    uint64_t v75 = v38;
    goto LABEL_48;
  }
  uint64_t v60 = OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject;
  uint64_t v61 = *(void **)&v38[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject];
  uint64_t v62 = v38;
  if ([v61 connectedTransport] != 1)
  {
    uint64_t v76 = v38;
    uint64_t v77 = v62;
    id v78 = Logger.logObject.getter();
    os_log_type_t v79 = static os_log_type_t.debug.getter();
    if (!os_log_type_enabled(v78, v79))
    {

LABEL_49:
      unint64_t v38 = 0;
      LOBYTE(v63) = 0;
      goto LABEL_50;
    }
    unint64_t v80 = (uint8_t *)swift_slowAlloc();
    id v185 = (id)swift_slowAlloc();
    *(_DWORD *)unint64_t v80 = 136315138;
    unsigned int v81 = [*(id *)&v38[v60] connectedTransport];
    if (v81 == 2)
    {
      unint64_t v82 = 0xEA00000000007967;
      uint64_t v83 = 0x72656E45776F6C2ELL;
    }
    else
    {
      unint64_t v82 = 0xE800000000000000;
      if (v81 == 1) {
        uint64_t v83 = 0x63697373616C632ELL;
      }
      else {
        uint64_t v83 = 0x6E776F6E6B6E752ELL;
      }
    }
    id v186 = (id)sub_1008FA0F0(v83, v82, (uint64_t *)&v185);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v78, v79, "Ignoring non-classic connection: %s", v80, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v75 = v38;
LABEL_48:

    goto LABEL_49;
  }
  LODWORD(v63) = v39 & 1;
  uint64_t v64 = *(uint8_t **)(a2 + 16);
  uint64_t v65 = (void *)swift_allocObject();
  v65[2] = a2;
  v65[3] = v62;
  v65[4] = v64;
  LODWORD(v176) = v39;
  uint64_t v66 = v38;
  swift_retain();
  swift_retain();
  unsafeFromAsyncTask<A>(_:)();
  swift_release();
  char v67 = (char)v185;
  uint64_t v68 = v175;
  sub_1003F0968((uint64_t)v62, v64, v175);
  if (v183[6](v68, 1, v184) == 1)
  {
    sub_10001DAB4(v68, &qword_10163BB20);
    if (v67)
    {
      if (qword_101636CD8 != -1) {
        swift_once();
      }
      OS_dispatch_queue.sync<A>(execute:)();
      char v69 = sub_1010ABF74((uint64_t)v185);
      swift_bridgeObjectRelease();
      if (v69)
      {
        int v70 = Logger.logObject.getter();
        os_log_type_t v71 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v70, v71))
        {
          uint64_t v72 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v72 = 0;
          _os_log_impl((void *)&_mh_execute_header, v70, v71, "Checking if force pair is needed when no iCloud", v72, 2u);
          swift_slowDealloc();
        }

        type metadata accessor for Transaction();
        uint64_t v73 = swift_allocObject();
        *(void *)(v73 + 16) = a2;
        *(void *)(v73 + 24) = v62;
        uint64_t v74 = v38;
        swift_retain();
        static Transaction.asyncTask(name:block:)();
        swift_release();
      }
    }
  }
  else
  {
    uint64_t v177 = v38;
    sub_100418690(v68, (uint64_t)v37, type metadata accessor for OwnedBeaconGroup);
    if (qword_101636EE0 != -1) {
      swift_once();
    }
    sub_100010324(v178, (uint64_t)qword_10170E7C8);
    uint64_t v90 = v173;
    sub_100418628((uint64_t)v37, v173, type metadata accessor for OwnedBeaconGroup);
    uint64_t v91 = Logger.logObject.getter();
    os_log_type_t v92 = static os_log_type_t.debug.getter();
    BOOL v93 = os_log_type_enabled(v91, v92);
    uint64_t v142 = a3;
    uint64_t v143 = v37;
    LODWORD(v174) = v63;
    uint64_t v182 = v62;
    if (v93)
    {
      unint64_t v94 = (uint8_t *)swift_slowAlloc();
      id v185 = (id)swift_slowAlloc();
      *(_DWORD *)unint64_t v94 = 136315138;
      type metadata accessor for UUID();
      sub_100414C30((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v95 = dispatch thunk of CustomStringConvertible.description.getter();
      id v186 = (id)sub_1008FA0F0(v95, v96, (uint64_t *)&v185);
      uint64_t v62 = v182;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100418B1C(v173, type metadata accessor for OwnedBeaconGroup);
      _os_log_impl((void *)&_mh_execute_header, v91, v92, "Saving classic bluetooth connect event for: %s", v94, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      unint64_t v37 = v143;
      swift_slowDealloc();
    }
    else
    {
      sub_100418B1C(v90, type metadata accessor for OwnedBeaconGroup);
    }

    if (qword_101636CB8 != -1) {
      swift_once();
    }
    uint64_t v105 = qword_10170E330;
    uint64_t v106 = &v37[*(int *)(v184 + 24)];
    uint64_t v107 = type metadata accessor for UUID();
    uint64_t v108 = (uint64_t)v181;
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v107 - 8) + 16))(v181, v106, v107);
    uint64_t v109 = v179;
    static Date.trustedNow.getter(v108 + v179[5]);
    *(unsigned char *)(v108 + v109[6]) = 37;
    sub_10000588C(&qword_10163A778);
    unint64_t v110 = (*(unsigned __int8 *)(v180 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v180 + 80);
    uint64_t v111 = swift_allocObject();
    *(_OWORD *)(v111 + 16) = xmmword_101342130;
    sub_100418628(v108, v111 + v110, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    uint64_t v112 = type metadata accessor for Transaction();
    __chkstk_darwin(v112);
    *(&v141 - 4) = v105;
    *(&v141 - 3) = v111;
    *(&v141 - 2) = 0;
    *(&v141 - 1) = 0;
    static Transaction.named<A>(_:with:)();
    swift_bridgeObjectRelease();
    sub_100418B1C(v108, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    sub_100A9E7EC(23);
    dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)();
    type metadata accessor for Transaction();
    static Transaction.asyncTask(name:block:)();
    uint64_t v113 = (uint64_t)v150;
    sub_100401ED8((uint64_t)v62, (uint64_t)v150);
    if ((*(unsigned int (**)(uint64_t, uint64_t, void *))(v148 + 48))(v113, 1, v149) == 1)
    {
      sub_10001DAB4(v113, &qword_101643CC0);
    }
    else
    {
      uint64_t v114 = v113;
      uint64_t v115 = v147;
      sub_100418690(v114, v147, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
      sub_1003E683C((uint64_t)v62, v115);
      sub_100418B1C(v115, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
    }
    id v185 = (id)sub_1003F865C((char *)v62);
    id v186 = *(id *)(a2 + 48);
    id v116 = v186;
    uint64_t v181 = (char *)type metadata accessor for OS_dispatch_queue.SchedulerOptions();
    uint64_t v117 = *((void *)v181 - 1);
    uint64_t v180 = *(void *)(v117 + 56);
    uint64_t v118 = v117 + 56;
    uint64_t v119 = (uint64_t)v170;
    ((void (*)(char *, uint64_t, uint64_t, char *))v180)(v170, 1, 1, v181);
    uint64_t v178 = v118;
    uint64_t v179 = (int *)v116;
    uint64_t v120 = sub_10000588C((uint64_t *)&unk_101649C90);
    uint64_t v176 = a2;
    uint64_t v121 = v120;
    uint64_t v183 = (unsigned int (**)(uint64_t, uint64_t, unint64_t))sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
    uint64_t v122 = sub_100062734((unint64_t *)&unk_101649CA0, (uint64_t *)&unk_101649C90);
    unint64_t v184 = sub_10027B124();
    uint64_t v123 = v151;
    uint64_t v173 = v121;
    uint64_t v175 = v122;
    Publisher.receive<A>(on:options:)();
    sub_10001DAB4(v119, &qword_10163C6C8);

    swift_release();
    static Subscribers.Demand.unlimited.getter();
    uint64_t v150 = (char *)type metadata accessor for Peripheral();
    uint64_t v149 = &protocol conformance descriptor for Publishers.ReceiveOn<A, B>;
    sub_100062734(&qword_101641830, &qword_1016417E0);
    uint64_t v124 = v154;
    uint64_t v125 = v153;
    Publisher.flatMap<A, B>(maxPublishers:_:)();
    (*(void (**)(char *, uint64_t))(v152 + 8))(v123, v125);
    unint64_t v126 = v179;
    unint64_t v127 = (void (*)(uint64_t, uint64_t, uint64_t, char *))v180;
    id v185 = v179;
    id v128 = v181;
    ((void (*)(uint64_t, uint64_t, uint64_t, char *))v180)(v119, 1, 1, v181);
    sub_100062734(&qword_101641838, &qword_1016417E8);
    uint64_t v129 = v126;
    uint64_t v130 = v156;
    uint64_t v131 = v157;
    Publisher.receive<A>(on:options:)();
    sub_10001DAB4(v119, &qword_10163C6C8);

    (*(void (**)(char *, uint64_t))(v155 + 8))(v124, v131);
    static Subscribers.Demand.unlimited.getter();
    sub_100062734(&qword_101641840, &qword_1016417F0);
    uint64_t v132 = v160;
    uint64_t v133 = v159;
    Publisher.flatMap<A, B>(maxPublishers:_:)();
    (*(void (**)(char *, uint64_t))(v158 + 8))(v130, v133);
    id v185 = v129;
    v127(v119, 1, 1, v128);
    sub_100062734(&qword_101641848, &qword_1016417F8);
    uint64_t v134 = v129;
    uint64_t v62 = v182;
    uint64_t v135 = v162;
    uint64_t v136 = v163;
    Publisher.receive<A>(on:options:)();
    sub_10001DAB4(v119, &qword_10163C6C8);

    (*(void (**)(char *, uint64_t))(v161 + 8))(v132, v136);
    sub_10000588C(&qword_101655B50);
    sub_100062734(&qword_101641850, &qword_101641800);
    unint64_t v137 = v166;
    uint64_t v138 = v165;
    Publisher.map<A>(_:)();
    (*(void (**)(char *, uint64_t))(v164 + 8))(v135, v138);
    sub_10000588C(&qword_10163C890);
    sub_100062734(&qword_101643DF8, &qword_101643DD0);
    sub_100062734(&qword_10163C8A0, &qword_10163C890);
    id v63 = v169;
    uint64_t v139 = v168;
    Publisher.catch<A>(_:)();
    (*(void (**)(char *, uint64_t))(v167 + 8))(v137, v139);
    swift_allocObject();
    swift_weakInit();
    sub_100062734(&qword_101643E00, &qword_101643DD8);
    uint64_t v140 = v172;
    Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v171 + 8))(v63, v140);
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
    sub_100418B1C((uint64_t)v143, type metadata accessor for OwnedBeaconGroup);
    a3 = v142;
    unint64_t v38 = v177;
    LOBYTE(v63) = (_BYTE)v174;
  }
  sub_1003FFEF8((uint64_t)v62);
  id v185 = v62;
  swift_retain();
  PassthroughSubject.send(_:)();
  swift_release();
  LOBYTE(v185) = 2;
  swift_retain();
  PassthroughSubject.send(completion:)();
  swift_release();
LABEL_50:
  *(void *)a3 = v38;
  *(unsigned char *)(a3 + 8) = (_BYTE)v63;
}

uint64_t sub_1003F0968@<X0>(uint64_t a1@<X0>, uint8_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v56 = a2;
  uint64_t v55 = type metadata accessor for UUID();
  uint64_t v47 = *(void **)(v55 - 8);
  uint64_t v5 = __chkstk_darwin(v55);
  unint64_t v54 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  unint64_t v53 = (char *)&v46 - v7;
  uint64_t v57 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v48 = *(void *)(v57 - 8);
  __chkstk_darwin(v57);
  uint64_t v9 = (char *)&v46 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for MACAddress();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100A3AC74(v13);
  uint64_t v14 = MACAddress.data.getter();
  unint64_t v16 = v15;
  uint64_t v17 = *(void (**)(char *, uint64_t))(v11 + 8);
  v17(v13, v10);
  v59[0] = v14;
  v59[1] = v16;
  sub_1000362FC();
  char v18 = DataProtocol.isNull.getter();
  sub_10001CFB8(v14, v16);
  if ((v18 & 1) == 0)
  {
    sub_100A3AC74(v13);
    sub_100AE800C(a3);
    return ((uint64_t (*)(char *, uint64_t))v17)(v13, v10);
  }
  uint64_t v19 = sub_100AE4A24();
  if (qword_101637310 != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  uint64_t v21 = sub_100010324(v20, (uint64_t)qword_10170F068);
  swift_bridgeObjectRetain_n();
  uint64_t v52 = v21;
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.default.getter();
  BOOL v24 = os_log_type_enabled(v22, v23);
  uint64_t v46 = a3;
  if (!v24)
  {

    swift_bridgeObjectRelease_n();
    uint64_t v29 = v19[2];
    if (!v29) {
      goto LABEL_15;
    }
LABEL_9:
    uint64_t v51 = a1;
    uint64_t v31 = (uint64_t)v19 + ((*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80));
    uint64_t v50 = OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject;
    uint64_t v56 = *(uint8_t **)(v49 + 32);
    uint64_t v32 = (void (**)(char *, uint64_t))(v47 + 1);
    uint64_t v33 = *(void *)(v48 + 72);
    uint64_t v47 = v19;
    swift_bridgeObjectRetain();
    unint64_t v49 = 0x80000001013FBC00;
    uint64_t v34 = v53;
    do
    {
      uint64_t v35 = sub_100418628(v31, (uint64_t)v9, type metadata accessor for OwnedBeaconGroup);
      __chkstk_darwin(v35);
      *(&v46 - 2) = v36;
      *(&v46 - 1) = v37;
      sub_10000588C(&qword_10165F6B0);
      Lock.callAsFunction<A>(_:)();
      unint64_t v38 = (char *)v59[0];
      if (v59[0])
      {
        sub_100A3C59C(0xD00000000000001ALL, v49);
        id v39 = [*(id *)&v38[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject] identifier];
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        id v40 = [*(id *)(v51 + v50) identifier];
        uint64_t v41 = v54;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)();

        LOBYTE(v40) = static UUID.== infix(_:_:)();
        uint64_t v42 = *v32;
        uint64_t v43 = v41;
        uint64_t v44 = v55;
        (*v32)(v43, v55);
        v42(v34, v44);
        if (v40)
        {
          swift_bridgeObjectRelease();
          uint64_t v45 = v46;
          sub_100418690((uint64_t)v9, v46, type metadata accessor for OwnedBeaconGroup);
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v57);
          return swift_bridgeObjectRelease();
        }
      }
      sub_100418B1C((uint64_t)v9, type metadata accessor for OwnedBeaconGroup);
      v31 += v33;
      --v29;
    }
    while (v29);
    swift_bridgeObjectRelease();
    a3 = v46;
    goto LABEL_15;
  }
  uint64_t v25 = (uint8_t *)swift_slowAlloc();
  v59[0] = swift_slowAlloc();
  *(_DWORD *)uint64_t v25 = 136315138;
  uint64_t v56 = v25 + 4;
  swift_bridgeObjectRetain();
  uint64_t v26 = Array.description.getter();
  unint64_t v28 = v27;
  swift_bridgeObjectRelease();
  uint64_t v58 = sub_1008FA0F0(v26, v28, v59);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease();
  _os_log_impl((void *)&_mh_execute_header, v22, v23, "All groups: %s", v25, 0xCu);
  swift_arrayDestroy();
  a3 = v46;
  swift_slowDealloc();
  swift_slowDealloc();

  uint64_t v29 = v19[2];
  if (v29) {
    goto LABEL_9;
  }
LABEL_15:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v48 + 56))(a3, 1, 1, v57);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1003F1020@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_10000588C(&qword_10163C8B0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C((uint64_t *)&unk_101649E80);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (char *)*a1;
  v29[3] = &type metadata for BAServiceIdentifier;
  v29[4] = &off_1015CE038;
  LOBYTE(v29[0]) = 1;
  uint64_t v13 = (uint64_t *)&v12[OBJC_IVAR____TtC12searchpartyd10Peripheral_services];
  swift_beginAccess();
  uint64_t v14 = *v13;
  unint64_t v28 = v29;
  swift_bridgeObjectRetain();
  uint64_t v15 = sub_100E4E988((uint64_t (*)(uint64_t *))sub_10015AF64, (uint64_t)v27, v14);
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v29);
  if (v15)
  {
    unint64_t v16 = sub_100A9B7E0((uint64_t)&off_1015A1388);
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = v15;
    *(void *)(v17 + 24) = v16;
    sub_10000588C((uint64_t *)&unk_101649E90);
    swift_allocObject();
    swift_retain();
    swift_bridgeObjectRetain();
    v29[0] = Future.init(_:)();
    sub_100062734((unint64_t *)&qword_101671CE0, (uint64_t *)&unk_101649E90);
    uint64_t v18 = Publisher.eraseToAnyPublisher()();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
  }
  else
  {
    if (qword_101636AC0 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100010324(v20, (uint64_t)qword_10170DE38);
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      os_log_type_t v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v26 = v9;
      *(_WORD *)os_log_type_t v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "No FindMy service", v23, 2u);
      uint64_t v9 = v26;
      swift_slowDealloc();
    }

    v29[0] = v12;
    type metadata accessor for Peripheral();
    BOOL v24 = v12;
    Just.init(_:)();
    sub_100061234();
    Just.setFailureType<A>(to:)();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    sub_100062734(&qword_10163C8B8, (uint64_t *)&unk_101649E80);
    uint64_t v18 = Publisher.eraseToAnyPublisher()();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  *a2 = v18;
  return result;
}

uint64_t sub_1003F1454(uint64_t a1)
{
  uint64_t v2 = sub_10000588C(&qword_101643CC0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for BluetoothManagerDevice();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (!result) {
    return result;
  }
  sub_10001D074(a1, (uint64_t)v35, &qword_101655B50);
  if (v36)
  {
    sub_10006105C((uint64_t)v35, (uint64_t)v32);
    if (qword_101636AC0 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_100010324(v10, (uint64_t)qword_10170DE38);
    sub_1000610B8((uint64_t)v32, (uint64_t)v31);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 138543362;
      sub_100061234();
      swift_allocError();
      sub_1000610B8((uint64_t)v31, v15);
      uint64_t v16 = _swift_stdlib_bridgeErrorToNSError();
      void v30[2] = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v14 = v16;
      sub_100061288((uint64_t)v31);
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "registerForConnectionEvents error: %{public}@", v13, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_release();
    }
    else
    {

      swift_release();
      sub_100061288((uint64_t)v31);
    }
    return sub_100061288((uint64_t)v32);
  }
  uint64_t v17 = (void *)v35[0];
  uint64_t v33 = &type metadata for BAServiceIdentifier;
  uint64_t v34 = &off_1015CE038;
  v32[0] = 1;
  uint64_t v18 = (uint64_t *)(v35[0] + OBJC_IVAR____TtC12searchpartyd10Peripheral_services);
  uint64_t v19 = swift_beginAccess();
  uint64_t v20 = *v18;
  __chkstk_darwin(v19);
  v30[-2] = v32;
  swift_bridgeObjectRetain();
  uint64_t v21 = sub_100E4E988((uint64_t (*)(uint64_t *))sub_10015AF64, (uint64_t)&v30[-4], v20);
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v32);
  if (!v21) {
    goto LABEL_10;
  }
  sub_100401ED8((uint64_t)v17, (uint64_t)v4);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5) == 1)
  {
    swift_release();
    sub_10001DAB4((uint64_t)v4, &qword_101643CC0);
LABEL_10:
    if (qword_101636AC0 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_100010324(v22, (uint64_t)qword_10170DE38);
    os_log_type_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "Owner characteristic not available. ", v25, 2u);
      swift_slowDealloc();
    }

    return swift_release();
  }
  sub_100418690((uint64_t)v4, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
  if (qword_101636AC0 != -1) {
    swift_once();
  }
  uint64_t v26 = type metadata accessor for Logger();
  sub_100010324(v26, (uint64_t)qword_10170DE38);
  unint64_t v27 = Logger.logObject.getter();
  os_log_type_t v28 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v29 = 0;
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "Owner characteristic available. Check verifyFindMyNetworkId for unpaired parts.", v29, 2u);
    swift_slowDealloc();
  }

  sub_1003F1A2C(v21, (uint64_t)v17, (uint64_t)v8);
  swift_release();
  swift_release();
  return sub_100418B1C((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
}

void sub_1003F1A2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for DispatchPredicate();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = &v22[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = *(void **)(v3 + 48);
  *uint64_t v10 = v11;
  (*(void (**)(void *, void, uint64_t))(v8 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  id v12 = v11;
  LOBYTE(v11) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v8 + 8))(v10, v7);
  if ((v11 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    swift_once();
    goto LABEL_5;
  }
  os_log_type_t v24 = &type metadata for BACharacteristicIdentifier.FindMy;
  uint64_t v25 = &off_1015CE018;
  v23[0] = 3;
  uint64_t v13 = swift_beginAccess();
  uint64_t v14 = *(void *)(a1 + 40);
  __chkstk_darwin(v13);
  *(void *)&v22[-16] = v23;
  swift_bridgeObjectRetain();
  uint64_t v15 = sub_100E4E9E4((uint64_t (*)(uint64_t *))sub_100332E60, (uint64_t)&v22[-32], v14);
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v23);
  if (v15)
  {
    uint64_t v16 = sub_1003E8328();
    uint64_t v17 = type metadata accessor for Transaction();
    __chkstk_darwin(v17);
    *(void *)&v22[-48] = v16;
    *(void *)&v22[-40] = a2;
    *(void *)&v22[-32] = v15;
    *(void *)&v22[-24] = a3;
    *(void *)&v22[-16] = v3;
    *(void *)&v22[-8] = a1;
    static Transaction.named<A>(_:with:)();
    swift_release();
    swift_release();
    return;
  }
  if (qword_101636AC0 != -1) {
    goto LABEL_9;
  }
LABEL_5:
  uint64_t v18 = type metadata accessor for Logger();
  sub_100010324(v18, (uint64_t)qword_10170DE38);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v21 = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Missing Paired Owner Characteristic!", v21, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_1003F1D3C(void *a1, char a2)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    if (a2) {
      uint64_t v5 = 1702195828;
    }
    else {
      uint64_t v5 = 0x65736C6166;
    }
    if (a2) {
      unint64_t v6 = 0xE400000000000000;
    }
    else {
      unint64_t v6 = 0xE500000000000000;
    }
    unint64_t v7 = v6;
    String.append(_:)(*(Swift::String *)&v5);
    swift_bridgeObjectRelease();
    v8._object = (void *)0x80000001013FBE40;
    v8._countAndFlagsBits = 0xD000000000000020;
    String.append(_:)(v8);
    if (qword_101636AC0 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_100010324(v9, (uint64_t)qword_10170DE38);
    sub_100A3C59C(0x203F64656B6146, 0xE700000000000000);
    swift_bridgeObjectRelease();
    if (a2) {
      sub_1003F3960((uint64_t)a1, (uint64_t)_swiftEmptyArrayStorage);
    }
    else {
      sub_1003E88A8(a1);
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_1003F1EC4(uint64_t a1, uint64_t a2)
{
  v2[17] = a1;
  v2[18] = a2;
  sub_10000588C(&qword_101643E68);
  v2[19] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for StandaloneBeacon();
  v2[20] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[21] = v4;
  v2[22] = *(void *)(v4 + 64);
  v2[23] = swift_task_alloc();
  v2[24] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for MACAddress();
  v2[25] = v5;
  v2[26] = *(void *)(v5 - 8);
  v2[27] = swift_task_alloc();
  sub_10000588C(&qword_101643CC8);
  v2[28] = swift_task_alloc();
  return _swift_task_switch(sub_1003F2058, 0, 0);
}

uint64_t sub_1003F2058()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_1016391C8 + dword_1016391C8);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 232) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1003F2194;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1003F2194(uint64_t a1)
{
  *(void *)(*(void *)v1 + 240) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1003F2294, 0, 0);
}

uint64_t sub_1003F2294()
{
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (!v0[30])
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_101636AC0 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_100010324(v16, (uint64_t)qword_10170DE38);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Missing StandaloneBeaconService!", v19, 2u);
      swift_slowDealloc();
    }

    sub_100414B68();
    swift_allocError();
    *os_log_type_t v20 = 0;
    swift_willThrow();
    if (qword_101636AC0 != -1) {
      swift_once();
    }
    sub_100010324(v16, (uint64_t)qword_10170DE38);
    swift_errorRetain();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      os_log_type_t v23 = (uint8_t *)swift_slowAlloc();
      os_log_type_t v24 = (void *)swift_slowAlloc();
      *(_DWORD *)os_log_type_t v23 = 138412290;
      uint64_t v25 = _convertErrorToNSError(_:)();
      v0[15] = v25;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t v24 = v25;
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Error in shouldForcePair: %@", v23, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    goto LABEL_20;
  }
  uint64_t v2 = (void *)v0[28];
  uint64_t v3 = v0[18];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  sub_1003F77AC(v3, v2);
  uint64_t v4 = sub_10000588C(&qword_101643CD0);
  int v5 = (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(v2, 1, v4);
  unint64_t v6 = (void *)v0[28];
  if (v5 == 1)
  {
    sub_10001DAB4((uint64_t)v6, &qword_101643CC8);
    if (qword_101636AC0 != -1) {
      swift_once();
    }
    uint64_t v7 = (void *)v0[18];
    uint64_t v8 = type metadata accessor for Logger();
    sub_100010324(v8, (uint64_t)qword_10170DE38);
    id v9 = v7;
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    BOOL v12 = os_log_type_enabled(v10, v11);
    uint64_t v13 = (void *)v0[18];
    if (v12)
    {
      log = v10;
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      uint64_t v30 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 138412290;
      v0[16] = v13;
      id v15 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v30 = v13;

      _os_log_impl((void *)&_mh_execute_header, log, v11, "Unable to get MAC address for %@", v14, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      swift_release();
    }
    else
    {

      swift_release();
    }
LABEL_20:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    os_log_type_t v28 = (uint64_t (*)(void))v0[1];
    return v28();
  }
  uint64_t v26 = (char *)v0[27];
  v0[31] = *v6;
  sub_100418B1C((uint64_t)v6 + *(int *)(v4 + 48), (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
  sub_100A3AC74(v26);
  uint64_t v27 = v0[30];
  return _swift_task_switch(sub_1003F2808, v27, 0);
}

uint64_t sub_1003F2808()
{
  sub_100FBE558(v0[27], *(void *)(v0[30] + 128));
  v0[32] = 0;
  uint64_t v2 = v0[26];
  uint64_t v1 = v0[27];
  uint64_t v3 = v0[25];
  v0[33] = dispatch thunk of _AnySequenceBox.__copyToContiguousArray()();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(sub_1003F28F0, 0, 0);
}

uint64_t sub_1003F28F0()
{
  uint64_t v19 = v0;
  uint64_t v1 = v0[32];
  uint64_t v18 = v0[33];
  swift_retain();
  sub_10040D598(&v18, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon, (uint64_t (*)(uint64_t))sub_100B736D8, sub_10040F770);
  if (v1)
  {
    return swift_release();
  }
  else
  {
    swift_release();
    if (*(void *)(v18 + 16))
    {
      uint64_t v3 = *(unsigned __int8 *)(v0[21] + 80);
      sub_100418628(v18 + ((v3 + 32) & ~v3), v0[19], (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
      uint64_t v4 = 0;
    }
    else
    {
      uint64_t v4 = 1;
    }
    uint64_t v5 = v0[20];
    uint64_t v6 = v0[21];
    uint64_t v7 = v0[19];
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v7, v4, 1, v5);
    swift_release();
    int v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v7, 1, v5);
    id v9 = (void *)v0[31];
    if (v8 == 1)
    {
      uint64_t v10 = v0[19];

      swift_release();
      sub_10001DAB4(v10, &qword_101643E68);
    }
    else
    {
      uint64_t v12 = v0[23];
      uint64_t v11 = v0[24];
      uint64_t v13 = v0[21];
      uint64_t v14 = v0[17];
      sub_100418690(v0[19], v11, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
      sub_100418628(v11, v12, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
      unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
      uint64_t v16 = swift_allocObject();
      *(void *)(v16 + 16) = v14;
      sub_100418690(v12, v16 + v15, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
      swift_retain();
      sub_1003F3724(v11, (uint64_t)sub_1004186FC, v16);
      swift_release();

      swift_release();
      sub_100418B1C(v11, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
    }
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v17 = (uint64_t (*)(void))v0[1];
    return v17();
  }
}

uint64_t sub_1003F2BD0()
{
  swift_release();
  if (qword_101636AC0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170DE38);
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138412290;
    uint64_t v6 = _convertErrorToNSError(_:)();
    *(void *)(v0 + 120) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Error in shouldForcePair: %@", v4, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

void sub_1003F2DEC(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v29 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v27 = v11;
  uint64_t v28 = v12;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for StandaloneBeacon();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void *)(v16 + 64);
  __chkstk_darwin(v15 - 8);
  if (a2)
  {
    aBlock[0] = a1;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    swift_willThrowTypedImpl();
    if (qword_101636AC0 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_100010324(v21, (uint64_t)qword_10170DE38);
    swift_errorRetain();
    os_log_type_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      os_log_type_t v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = (void *)swift_slowAlloc();
      *(_DWORD *)os_log_type_t v24 = 138412290;
      uint64_t v26 = _convertErrorToNSError(_:)();
      aBlock[0] = v26;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v25 = v26;
      sub_100173E88(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "forcePair error: %@", v24, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_100173E88(a1, 1);
    }
    else
    {
      sub_100173E88(a1, 1);
      sub_100173E88(a1, 1);
    }
  }
  else if (a1)
  {
    sub_100418628(a4, (uint64_t)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
    unint64_t v18 = (*(unsigned __int8 *)(v16 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = a3;
    sub_100418690((uint64_t)&v27 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), v19 + v18, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
    aBlock[4] = sub_100418D68;
    aBlock[5] = v19;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1004B5480;
    aBlock[3] = &unk_1015BF8B0;
    uint64_t v20 = _Block_copy(aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v30 = _swiftEmptyArrayStorage;
    sub_100414C30((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v20);
    (*(void (**)(char *, uint64_t))(v29 + 8))(v10, v8);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v14, v27);
    swift_release();
  }
}

void sub_1003F331C(uint64_t a1, char a2)
{
}

uint64_t sub_1003F333C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v26 = a2;
  uint64_t v27 = a3;
  uint64_t v25 = *v3;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v31 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v29 = *(void *)(v9 - 8);
  uint64_t v30 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for StandaloneBeacon();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12 - 8);
  uint64_t v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = v3[6];
  sub_100418628(a1, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
  unint64_t v16 = (*(unsigned __int8 *)(v13 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v17 = (v14 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = (v17 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = (v18 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = swift_allocObject();
  sub_100418690((uint64_t)v15, v20 + v16, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
  *(void *)(v20 + v17) = v4;
  uint64_t v21 = (void *)(v20 + v18);
  uint64_t v22 = v27;
  void *v21 = v26;
  v21[1] = v22;
  *(void *)(v20 + v19) = v25;
  aBlock[4] = sub_100419000;
  aBlock[5] = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015BF900;
  os_log_type_t v23 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v32 = _swiftEmptyArrayStorage;
  sub_100414C30((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v23);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v8, v6);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v11, v30);
  return swift_release();
}

uint64_t sub_1003F3724(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v22 = a2;
  uint64_t v6 = *v3;
  uint64_t v7 = type metadata accessor for StandaloneBeacon();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7 - 8);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  sub_100418628(a1, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
  unint64_t v15 = (*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v16 = (v9 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = (v16 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = 0;
  *(void *)(v18 + 24) = 0;
  sub_100418690((uint64_t)v10, v18 + v15, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
  *(void *)(v18 + v16) = v3;
  unint64_t v19 = (void *)(v18 + v17);
  *unint64_t v19 = v22;
  v19[1] = a3;
  *(void *)(v18 + ((v17 + 23) & 0xFFFFFFFFFFFFFFF8)) = v6;
  swift_retain();
  swift_retain();
  sub_1008F5E44((uint64_t)v13, (uint64_t)&unk_101643E78, v18);
  return swift_release();
}

uint64_t sub_1003F3960(uint64_t a1, uint64_t a2)
{
  os_log_type_t v3 = v2;
  uint64_t v49 = a2;
  uint64_t v5 = type metadata accessor for MACAddress();
  uint64_t v46 = *(void *)(v5 - 8);
  uint64_t v47 = v5;
  __chkstk_darwin(v5);
  uint64_t v45 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_101643CC8);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (uint64_t *)((char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v10 = (int *)type metadata accessor for BluetoothManagerDevice();
  uint64_t v48 = *((void *)v10 - 1);
  uint64_t v11 = *(void *)(v48 + 64);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v50 = (char *)&v41 - v14;
  uint64_t v15 = type metadata accessor for DispatchPredicate();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (uint8_t **)((char *)&v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v19 = (void *)*((void *)v3 + 6);
  *uint64_t v18 = v19;
  (*(void (**)(void *, void, uint64_t))(v16 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v15);
  id v20 = v19;
  uint64_t v21 = _dispatchPreconditionTest(_:)();
  os_log_type_t v23 = *(void (**)(void *, uint64_t))(v16 + 8);
  uint64_t v22 = (char *)(v16 + 8);
  v23(v18, v15);
  if ((v21 & 1) == 0)
  {
    __break(1u);
LABEL_11:
    swift_once();
    goto LABEL_5;
  }
  sub_1003F77AC(a1, v9);
  uint64_t v24 = sub_10000588C(&qword_101643CD0);
  uint64_t v22 = v3;
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 48))(v9, 1, v24) == 1)
  {
    sub_10001DAB4((uint64_t)v9, &qword_101643CC8);
    *(void *)&v13[v10[10]] = 0;
    MACAddress.init(stringLiteral:)();
    uint64_t v25 = &v13[v10[5]];
    *(void *)uint64_t v25 = 0;
    *((void *)v25 + 1) = 0xE000000000000000;
    *(_DWORD *)&v13[v10[6]] = 0;
    uint64_t v26 = &v13[v10[7]];
    *(void *)uint64_t v26 = 0;
    *((void *)v26 + 1) = 0xE000000000000000;
    *(_DWORD *)&v13[v10[8]] = 0;
    *(_OWORD *)&v13[v10[9]] = xmmword_101347BB0;
    sub_1003F8944(a1, (uint64_t)v13, 0, 0, (uint64_t)_swiftEmptyArrayStorage);
    os_log_type_t v3 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
    return sub_100418B1C((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
  }
  uint64_t v21 = *v9;
  os_log_type_t v3 = v50;
  sub_100418690((uint64_t)v9 + *(int *)(v24 + 48), (uint64_t)v50, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
  if (qword_101636AC0 != -1) {
    goto LABEL_11;
  }
LABEL_5:
  uint64_t v27 = type metadata accessor for Logger();
  sub_100010324(v27, (uint64_t)qword_10170DE38);
  id v28 = (id)v21;
  uint64_t v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v31 = (uint8_t *)swift_slowAlloc();
    uint64_t v43 = swift_slowAlloc();
    uint64_t v52 = v43;
    uint64_t v42 = v31;
    *(_DWORD *)uint64_t v31 = 136446210;
    uint64_t v41 = v31 + 4;
    uint64_t v32 = v45;
    sub_100A3AC74(v45);
    sub_100414C30((unint64_t *)&qword_101649EE0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
    uint64_t v33 = v47;
    uint64_t v34 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v44 = v22;
    unint64_t v36 = v35;
    (*(void (**)(char *, uint64_t))(v46 + 8))(v32, v33);
    uint64_t v51 = sub_1008FA0F0(v34, v36, &v52);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    uint64_t v22 = v44;
    os_log_type_t v3 = v50;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Unpairing LE with classic MAC address: %{public}s", v42, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  type metadata accessor for Transaction();
  sub_100418628((uint64_t)v3, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
  unint64_t v37 = (*(unsigned __int8 *)(v48 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v48 + 80);
  uint64_t v38 = swift_allocObject();
  *(void *)(v38 + 16) = v28;
  *(void *)(v38 + 24) = v22;
  sub_100418690((uint64_t)v13, v38 + v37, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
  *(void *)(v38 + ((v11 + v37 + 7) & 0xFFFFFFFFFFFFFFF8)) = v49;
  id v39 = v28;
  swift_retain();
  swift_bridgeObjectRetain();
  static Transaction.asyncTask(name:block:)();

  swift_release();
  return sub_100418B1C((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
}

uint64_t sub_1003F3FF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[19] = a3;
  v4[20] = a4;
  v4[17] = a1;
  v4[18] = a2;
  uint64_t v5 = type metadata accessor for MACAddress();
  v4[21] = v5;
  v4[22] = *(void *)(v5 - 8);
  v4[23] = swift_task_alloc();
  return _swift_task_switch(sub_1003F40B4, 0, 0);
}

uint64_t sub_1003F40B4()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    os_log_type_t v3 = (uint64_t (__cdecl *)())((char *)&dword_1016391C8 + dword_1016391C8);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 192) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1003F41F0;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1003F41F0(uint64_t a1)
{
  *(void *)(*(void *)v1 + 200) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1003F42F0, 0, 0);
}

uint64_t sub_1003F42F0()
{
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (v0[25])
  {
    uint64_t v2 = (char *)v0[23];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_100A3AC74(v2);
    uint64_t v11 = (uint64_t (*)(uint64_t))((char *)&dword_101671DC0 + dword_101671DC0);
    uint64_t v3 = (void *)swift_task_alloc();
    v0[26] = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_1003F44B8;
    uint64_t v4 = v0[23];
    return v11(v4);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_101637310 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100010324(v6, (uint64_t)qword_10170F068);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Missing StandaloneBeaconService!", v9, 2u);
      swift_slowDealloc();
    }

    swift_task_dealloc();
    uint64_t v10 = (uint64_t (*)(void))v0[1];
    return v10();
  }
}

uint64_t sub_1003F44B8()
{
  uint64_t v2 = *(void **)v1;
  *(void *)(*(void *)v1 + 216) = v0;
  swift_task_dealloc();
  (*(void (**)(void, void))(v2[22] + 8))(v2[23], v2[21]);
  if (v0) {
    uint64_t v3 = sub_1003F4708;
  }
  else {
    uint64_t v3 = sub_1003F4620;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_1003F4620()
{
  type metadata accessor for Transaction();
  uint64_t v1 = swift_task_alloc();
  long long v2 = *(_OWORD *)(v0 + 152);
  *(int8x16_t *)(v1 + 16) = vextq_s8(*(int8x16_t *)(v0 + 136), *(int8x16_t *)(v0 + 136), 8uLL);
  *(_OWORD *)(v1 + 32) = v2;
  static Transaction.named<A>(_:with:)();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_1003F4708()
{
  uint64_t v14 = v0;
  if (qword_101636AC0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170DE38);
  swift_errorRetain();
  swift_errorRetain();
  long long v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  BOOL v4 = os_log_type_enabled(v2, v3);
  uint64_t v5 = *(void *)(v0 + 216);
  if (v4)
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136446210;
    *(void *)(v0 + 120) = v5;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v7 = String.init<A>(describing:)();
    *(void *)(v0 + 128) = sub_1008FA0F0(v7, v8, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Unable to remove standalone beacons due to %{public}s.", v6, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  type metadata accessor for Transaction();
  uint64_t v9 = swift_task_alloc();
  long long v10 = *(_OWORD *)(v0 + 152);
  *(int8x16_t *)(v9 + 16) = vextq_s8(*(int8x16_t *)(v0 + 136), *(int8x16_t *)(v0 + 136), 8uLL);
  *(_OWORD *)(v9 + 32) = v10;
  static Transaction.named<A>(_:with:)();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v11 = *(uint64_t (**)(void))(v0 + 8);
  return v11();
}

uint64_t sub_1003F49B0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  os_log_type_t v23 = a3;
  uint64_t v24 = a5;
  uint64_t v26 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v29 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v27 = *(void *)(v10 - 8);
  uint64_t v28 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for BluetoothManagerDevice();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(v13 - 8);
  uint64_t v25 = *(void *)(a2 + 48);
  sub_100418628(a4, (uint64_t)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
  unint64_t v16 = (*(unsigned __int8 *)(v14 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = (void *)swift_allocObject();
  void v17[2] = a1;
  v17[3] = a2;
  uint64_t v18 = v23;
  v17[4] = v23;
  sub_100418690((uint64_t)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v17 + v16, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
  *(void *)((char *)v17 + ((v15 + v16 + 7) & 0xFFFFFFFFFFFFFFF8)) = v24;
  aBlock[4] = sub_100415C1C;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015BF3B0;
  unint64_t v19 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  id v20 = v18;
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  uint64_t aBlock[7] = _swiftEmptyArrayStorage;
  sub_100414C30((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v21 = v26;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v9, v21);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v12, v28);
  return swift_release();
}

void sub_1003F4D78(NSObject *a1)
{
  uint64_t v2 = v1;
  uint64_t v243 = a1;
  uint64_t v3 = sub_10000588C(&qword_10163C6C8);
  __chkstk_darwin(v3 - 8);
  id v221 = &v201[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v224 = sub_10000588C(&qword_101643CE8);
  uint64_t v223 = *(void *)(v224 - 8);
  __chkstk_darwin(v224);
  id v222 = &v201[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_10165F410);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  id v216 = (uint64_t *)&v201[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v7);
  uint64_t v226 = &v201[-v9];
  uint64_t v218 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  __chkstk_darwin(v218);
  uint64_t v219 = &v201[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = sub_10000588C(&qword_10163BB20);
  __chkstk_darwin(v11 - 8);
  uint64_t v234 = &v201[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v235 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v231 = *(void *)(v235 - 8);
  uint64_t v13 = __chkstk_darwin(v235);
  uint64_t v225 = &v201[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v227 = &v201[-v16];
  uint64_t v17 = __chkstk_darwin(v15);
  char v228 = &v201[-v18];
  __chkstk_darwin(v17);
  uint64_t v230 = &v201[-v19];
  uint64_t v20 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v21 = __chkstk_darwin(v20 - 8);
  uint64_t v229 = &v201[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v23 = __chkstk_darwin(v21);
  id v232 = &v201[-v24];
  __chkstk_darwin(v23);
  uint64_t v26 = &v201[-v25];
  uint64_t v242 = type metadata accessor for MACAddress();
  uint64_t v237 = *(void *)(v242 - 8);
  uint64_t v27 = __chkstk_darwin(v242);
  uint64_t v217 = &v201[-((v28 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v233 = &v201[-v30];
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v33 = &v201[-v32];
  uint64_t v34 = __chkstk_darwin(v31);
  uint64_t v236 = &v201[-v35];
  __chkstk_darwin(v34);
  unint64_t v37 = &v201[-v36];
  uint64_t v38 = type metadata accessor for Date();
  uint64_t v238 = *(void *)(v38 - 8);
  uint64_t v239 = v38;
  uint64_t v39 = __chkstk_darwin(v38);
  uint64_t v41 = &v201[-((v40 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v39);
  uint64_t v240 = &v201[-v42];
  uint64_t v43 = sub_10000588C(&qword_101643CC8);
  __chkstk_darwin(v43 - 8);
  uint64_t v45 = &v201[-((v44 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v46 = type metadata accessor for BluetoothManagerDevice();
  __chkstk_darwin(v46 - 8);
  uint64_t v241 = &v201[-((v47 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v48 = type metadata accessor for DispatchPredicate();
  uint64_t v49 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  uint64_t v51 = &v201[-((v50 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v52 = *(void **)(v2 + 48);
  *uint64_t v51 = v52;
  (*(void (**)(void *, void, uint64_t))(v49 + 104))(v51, enum case for DispatchPredicate.onQueue(_:), v48);
  id v220 = v52;
  uint64_t v53 = _dispatchPreconditionTest(_:)();
  uint64_t v55 = *(void (**)(void *, uint64_t))(v49 + 8);
  uint64_t v54 = v49 + 8;
  v55(v51, v48);
  if ((v53 & 1) == 0)
  {
    __break(1u);
    goto LABEL_91;
  }
  uint64_t v56 = sub_1003E2B74();
  if ((v56 & 1) == 0)
  {
    if (qword_101636AC0 != -1) {
      swift_once();
    }
    uint64_t v63 = type metadata accessor for Logger();
    sub_100010324(v63, (uint64_t)qword_10170DE38);
    uint64_t v59 = Logger.logObject.getter();
    os_log_type_t v60 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v59, v60)) {
      goto LABEL_13;
    }
    uint64_t v61 = swift_slowAlloc();
    *(_WORD *)uint64_t v61 = 0;
    uint64_t v62 = "Pairing retry is NOT allowed on this device!";
    goto LABEL_12;
  }
  uint64_t v53 = v2;
  __chkstk_darwin(v56);
  uint64_t v57 = v243;
  *(void *)&v201[-16] = v2;
  *(void *)&v201[-8] = v57;
  QueueSynchronizer.conditionalSync<A>(_:)();
  if (v244[0])
  {
    if (qword_101636AC0 != -1) {
      swift_once();
    }
    uint64_t v58 = type metadata accessor for Logger();
    sub_100010324(v58, (uint64_t)qword_10170DE38);
    uint64_t v59 = Logger.logObject.getter();
    os_log_type_t v60 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v59, v60)) {
      goto LABEL_13;
    }
    uint64_t v61 = swift_slowAlloc();
    *(_WORD *)uint64_t v61 = 0;
    uint64_t v62 = "Pairing in progress. Not retrying";
LABEL_12:
    _os_log_impl((void *)&_mh_execute_header, v59, v60, v62, (uint8_t *)v61, 2u);
    swift_slowDealloc();
LABEL_13:

    return;
  }
  uint64_t v64 = sub_1003E8328();
  OS_dispatch_queue.sync<A>(execute:)();
  if (v244[0])
  {
    if (qword_101636AC0 != -1) {
      swift_once();
    }
    uint64_t v65 = type metadata accessor for Logger();
    sub_100010324(v65, (uint64_t)qword_10170DE38);
    uint64_t v66 = Logger.logObject.getter();
    os_log_type_t v67 = static os_log_type_t.default.getter();
    if (!os_log_type_enabled(v66, v67)) {
      goto LABEL_25;
    }
    uint64_t v68 = swift_slowAlloc();
    *(_WORD *)uint64_t v68 = 0;
    char v69 = "Handling Privacy Alert. Not retrying";
LABEL_24:
    _os_log_impl((void *)&_mh_execute_header, v66, v67, v69, (uint8_t *)v68, 2u);
    swift_slowDealloc();
LABEL_25:

    swift_release();
    return;
  }
  sub_1003F77AC((uint64_t)v243, v45);
  uint64_t v70 = sub_10000588C(&qword_101643CD0);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v70 - 8) + 48))(v45, 1, v70) == 1)
  {
    sub_10001DAB4((uint64_t)v45, &qword_101643CC8);
    if (qword_101636AC0 != -1) {
      swift_once();
    }
    uint64_t v71 = type metadata accessor for Logger();
    sub_100010324(v71, (uint64_t)qword_10170DE38);
    uint64_t v66 = Logger.logObject.getter();
    os_log_type_t v67 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v66, v67)) {
      goto LABEL_25;
    }
    uint64_t v68 = swift_slowAlloc();
    *(_WORD *)uint64_t v68 = 0;
    char v69 = "Unable to sanitize MAC address for retry pairing";
    goto LABEL_24;
  }
  uint64_t v210 = 0;
  uint64_t v214 = v64;
  uint64_t v72 = *(void **)v45;
  sub_100418690((uint64_t)&v45[*(int *)(v70 + 48)], (uint64_t)v241, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
  sub_100A3AC74(v37);
  unint64_t v73 = sub_1003E1C68();
  if (*(void *)(v73 + 16))
  {
    unint64_t v74 = sub_100724804((uint64_t)v37);
    uint64_t v75 = v239;
    uint64_t v76 = v237;
    uint64_t v78 = v238;
    if (v77)
    {
      (*(void (**)(unsigned char *, unint64_t, uint64_t))(v238 + 16))(v26, *(void *)(v73 + 56) + *(void *)(v238 + 72) * v74, v239);
      os_log_type_t v79 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v78 + 56);
      unint64_t v80 = v26;
      uint64_t v81 = 0;
    }
    else
    {
      os_log_type_t v79 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v238 + 56);
      unint64_t v80 = v26;
      uint64_t v81 = 1;
    }
    char v211 = v79;
    v79(v80, v81, 1, v75);
  }
  else
  {
    uint64_t v78 = v238;
    uint64_t v75 = v239;
    char v211 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v238 + 56);
    v211(v26, 1, 1, v239);
    uint64_t v76 = v237;
  }
  swift_bridgeObjectRelease();
  uint64_t v83 = *(void (**)(char *, uint64_t))(v76 + 8);
  uint64_t v82 = v76 + 8;
  uint64_t v215 = v83;
  v83(v37, v242);
  id v212 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v78 + 48);
  if (v212(v26, 1, v75) == 1)
  {
    static Date.distantPast.getter();
    sub_10001DAB4((uint64_t)v26, (uint64_t *)&unk_10163AC90);
  }
  else
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v78 + 32))(v240, v26, v75);
  }
  static Date.trustedNow.getter((uint64_t)v41);
  Date.timeIntervalSince(_:)();
  double v85 = v84;
  uint64_t v86 = v78 + 8;
  uint64_t v213 = *(void (**)(unsigned char *, uint64_t))(v78 + 8);
  v213(v41, v75);
  double v87 = *(double *)(v53 + 168);
  if (v87 >= v85)
  {
    uint64_t v98 = v72;
    if (qword_101636AC0 != -1) {
      swift_once();
    }
    uint64_t v99 = type metadata accessor for Logger();
    sub_100010324(v99, (uint64_t)qword_10170DE38);
    swift_retain_n();
    uint64_t v100 = Logger.logObject.getter();
    os_log_type_t v101 = static os_log_type_t.default.getter();
    BOOL v102 = os_log_type_enabled(v100, v101);
    uint64_t v103 = v241;
    if (v102)
    {
      uint64_t v104 = swift_slowAlloc();
      *(_DWORD *)uint64_t v104 = 134218240;
      *(double *)NSString v244 = v85;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v104 + 12) = 2048;
      *(double *)NSString v244 = v87;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      _os_log_impl((void *)&_mh_execute_header, v100, v101, "Time since last attempt %f. Threshold %f. Not retrying.", (uint8_t *)v104, 0x16u);
      uint64_t v105 = v240;
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
      uint64_t v105 = v240;
    }

    swift_release();
    goto LABEL_67;
  }
  uint64_t v88 = v72;
  if (v85 > 86400.0)
  {
    uint64_t v89 = v82;
    uint64_t v90 = v236;
    sub_100A3AC74(v236);
    unint64_t v91 = sub_1003E2458();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v244[0] = v91;
    sub_10016E04C(0, (uint64_t)v90, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    BOOL v93 = v90;
    uint64_t v82 = v89;
    uint64_t v75 = v239;
    v215(v93, v242);
    sub_1003E2910();
  }
  sub_100A3AC74(v33);
  unint64_t v94 = sub_1003E2458();
  if (*(void *)(v94 + 16) && (unint64_t v95 = sub_100724804((uint64_t)v33), (v96 & 1) != 0)) {
    uint64_t v97 = *(char **)(*(void *)(v94 + 56) + 8 * v95);
  }
  else {
    uint64_t v97 = 0;
  }
  swift_bridgeObjectRelease();
  v215(v33, v242);
  uint64_t v106 = *(void *)(v53 + 176);
  if (__OFSUB__(v106, v97))
  {
    __break(1u);
LABEL_103:
    swift_once();
    goto LABEL_49;
  }
  if (v106 - (uint64_t)v97 < 1)
  {
    uint64_t v120 = *(void *)(v53 + 176);
    uint64_t v33 = v97;
    if (qword_101636AC0 == -1)
    {
LABEL_54:
      uint64_t v121 = type metadata accessor for Logger();
      sub_100010324(v121, (uint64_t)qword_10170DE38);
      swift_retain();
      uint64_t v122 = Logger.logObject.getter();
      os_log_type_t v123 = static os_log_type_t.default.getter();
      BOOL v124 = os_log_type_enabled(v122, v123);
      uint64_t v103 = v241;
      if (v124)
      {
        uint64_t v125 = swift_slowAlloc();
        *(_DWORD *)uint64_t v125 = 134218240;
        v244[0] = v120;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        *(_WORD *)(v125 + 12) = 2048;
        v244[0] = (uint64_t)v33;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v122, v123, "Exceeded number of retries per day %ld. Attempted: %ld", (uint8_t *)v125, 0x16u);
        uint64_t v105 = v240;
        swift_slowDealloc();
      }
      else
      {
        swift_release();
        uint64_t v105 = v240;
      }

      swift_release();
LABEL_67:
      v213(v105, v75);
      sub_100418B1C((uint64_t)v103, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
      return;
    }
LABEL_105:
    swift_once();
    goto LABEL_54;
  }
  uint64_t v206 = *(void *)(v53 + 176);
  uint64_t v208 = (uint64_t)v97;
  if (qword_101636AC0 != -1) {
    goto LABEL_103;
  }
LABEL_49:
  uint64_t v207 = v86;
  uint64_t v107 = type metadata accessor for Logger();
  uint64_t v108 = sub_100010324(v107, (uint64_t)qword_10170DE38);
  uint64_t v109 = v243;
  swift_retain_n();
  unint64_t v110 = v109;
  uint64_t v204 = v108;
  uint64_t v111 = Logger.logObject.getter();
  os_log_type_t v112 = static os_log_type_t.default.getter();
  int v113 = v112;
  uint64_t v243 = v111;
  BOOL v114 = os_log_type_enabled(v111, v112);
  id v209 = v88;
  uint64_t v203 = v110;
  if (v114)
  {
    uint64_t v115 = swift_slowAlloc();
    id v116 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v115 = 138412802;
    uint64_t v205 = v82;
    v244[0] = (uint64_t)v110;
    uint64_t v117 = v110;
    int v202 = v113;
    uint64_t v118 = v117;
    uint64_t v82 = v205;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *id v116 = v110;

    *(_WORD *)(v115 + 12) = 2048;
    v244[0] = v208;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v115 + 22) = 2048;
    swift_release();
    v244[0] = v206;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    uint64_t v119 = v243;
    _os_log_impl((void *)&_mh_execute_header, v243, (os_log_type_t)v202, "Retry pairing for peripheral %@. Attempted %ld. Daily limit %ld", (uint8_t *)v115, 0x20u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  unint64_t v126 = v233;
  uint64_t v75 = (uint64_t)v234;
  sub_100A3AC74(v233);
  unint64_t v127 = v232;
  static Date.trustedNow.getter((uint64_t)v232);
  uint64_t v88 = (void *)v238;
  uint64_t v128 = v239;
  v211(v127, 0, 1, v239);
  v244[0] = sub_1003E1C68();
  if (v212(v127, 1, v128) == 1)
  {
    sub_10001DAB4((uint64_t)v127, (uint64_t *)&unk_10163AC90);
    uint64_t v129 = v229;
    sub_1001645B8((uint64_t)v126, (uint64_t)v229);
    uint64_t v130 = v126;
    uint64_t v33 = (char *)v242;
    v215(v130, v242);
    sub_10001DAB4((uint64_t)v129, (uint64_t *)&unk_10163AC90);
  }
  else
  {
    uint64_t v131 = (void (*)(unsigned char *, unsigned char *, uint64_t))v88[4];
    v88 += 4;
    v131(v41, v127, v128);
    uint64_t v132 = (void *)v244[0];
    char v133 = swift_isUniquelyReferenced_nonNull_native();
    id v245 = v132;
    sub_10016DE48((uint64_t)v41, (uint64_t)v126, v133);
    v244[0] = (uint64_t)v245;
    swift_bridgeObjectRelease();
    uint64_t v134 = v126;
    uint64_t v33 = (char *)v242;
    v215(v134, v242);
  }
  uint64_t v120 = v235;
  sub_1003E2180();
  uint64_t v135 = v236;
  id v136 = v209;
  sub_100A3AC74(v236);
  uint64_t v137 = v208 + 1;
  if (__OFADD__(v208, 1))
  {
    __break(1u);
    goto LABEL_105;
  }
  unint64_t v138 = sub_1003E2458();
  char v139 = swift_isUniquelyReferenced_nonNull_native();
  v244[0] = v138;
  sub_10016E04C(v137, (uint64_t)v135, v139);
  swift_bridgeObjectRelease();
  uint64_t v140 = (void (*)(char *, char *))v215;
  v215(v135, (uint64_t)v33);
  sub_1003E2910();
  uint64_t v41 = *(unsigned char **)(v53 + 16);
  sub_100A3AC74(v135);
  sub_100AE800C(v75);
  v140(v135, v33);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v231 + 48))(v75, 1, v120) == 1)
  {
    sub_10001DAB4(v75, &qword_10163BB20);
    uint64_t v141 = v239;
LABEL_74:
    uint64_t v154 = v241;
    sub_1003F8944((uint64_t)v136, (uint64_t)v241, 0, 1, (uint64_t)_swiftEmptyArrayStorage);
    swift_release();

    v213(v240, v141);
    sub_100418B1C((uint64_t)v154, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
    return;
  }
  uint64_t v142 = v230;
  sub_100418690(v75, (uint64_t)v230, type metadata accessor for OwnedBeaconGroup);
  char v143 = sub_1004D6DA8();
  uint64_t v144 = v228;
  sub_100418628((uint64_t)v142, (uint64_t)v228, type metadata accessor for OwnedBeaconGroup);
  if (v143)
  {
    sub_100418B1C((uint64_t)v144, type metadata accessor for OwnedBeaconGroup);
    uint64_t v145 = v227;
    sub_100418628((uint64_t)v142, (uint64_t)v227, type metadata accessor for OwnedBeaconGroup);
    uint64_t v141 = v239;
  }
  else
  {
    char v146 = v144[*(int *)(v120 + 32)];
    sub_100418B1C((uint64_t)v144, type metadata accessor for OwnedBeaconGroup);
    uint64_t v145 = v227;
    sub_100418628((uint64_t)v142, (uint64_t)v227, type metadata accessor for OwnedBeaconGroup);
    uint64_t v141 = v239;
    if (v146)
    {
      sub_100418B1C((uint64_t)v145, type metadata accessor for OwnedBeaconGroup);
LABEL_73:
      sub_100418B1C((uint64_t)v142, type metadata accessor for OwnedBeaconGroup);
      goto LABEL_74;
    }
  }
  char v147 = sub_1004D6B84();
  sub_100418B1C((uint64_t)v145, type metadata accessor for OwnedBeaconGroup);
  if ((v147 & 1) == 0) {
    goto LABEL_73;
  }
  uint64_t v205 = v82;
  uint64_t v148 = v225;
  sub_100418628((uint64_t)v142, (uint64_t)v225, type metadata accessor for OwnedBeaconGroup);
  uint64_t v149 = Logger.logObject.getter();
  os_log_type_t v150 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v149, v150))
  {
    uint64_t v151 = swift_slowAlloc();
    v244[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v151 = 136315138;
    uint64_t v152 = sub_1004D6904();
    id v245 = (id)sub_1008FA0F0(v152, v153, v244);
    uint64_t v33 = (char *)v242;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100418B1C((uint64_t)v148, type metadata accessor for OwnedBeaconGroup);
    _os_log_impl((void *)&_mh_execute_header, v149, v150, "Retry LE pairing for %s.", (uint8_t *)v151, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100418B1C((uint64_t)v148, type metadata accessor for OwnedBeaconGroup);
  }

  uint64_t v155 = (uint64_t)v226;
  uint64_t v156 = v203;
  uint64_t v157 = swift_bridgeObjectRetain();
  uint64_t v158 = v210;
  sub_1003E0A70(v157, v155);
  swift_bridgeObjectRelease();
  uint64_t v45 = (unsigned char *)sub_10000588C((uint64_t *)&unk_1016477D0);
  unint64_t v37 = *(char **)(*((void *)v45 - 1) + 48);
  if (((unsigned int (*)(uint64_t, uint64_t, unsigned char *))v37)(v155, 1, v45) == 1)
  {
    sub_10001DAB4(v155, (uint64_t *)&unk_10165F410);
    id v159 = v209;
LABEL_78:
    uint64_t v160 = (void (*)(char *, char *))v215;
    goto LABEL_81;
  }
  uint64_t v243 = v158;
  uint64_t v161 = v156;
  sub_10001CFB8(*(void *)v155, *(void *)(v155 + 8));
  uint64_t v26 = v219;
  sub_100418690(v155 + *((int *)v45 + 12), (uint64_t)v219, type metadata accessor for OwnedBeaconGroup.PairingState);
  if (swift_getEnumCaseMultiPayload())
  {
    sub_100418B1C((uint64_t)v26, type metadata accessor for OwnedBeaconGroup.PairingState);
    id v159 = v209;
    uint64_t v160 = (void (*)(char *, char *))v215;
    uint64_t v156 = v161;
    goto LABEL_81;
  }
  uint64_t v54 = v237;
  if ((*(unsigned int (**)(unsigned char *, uint64_t, char *))(v237 + 48))(v26, 1, v33) == 1)
  {
    sub_10001DAB4((uint64_t)v26, (uint64_t *)&unk_1016477E0);
    id v159 = v209;
    uint64_t v156 = v161;
    goto LABEL_78;
  }
LABEL_91:
  (*(void (**)(char *, unsigned char *, char *))(v54 + 32))(v217, v26, v33);
  uint64_t v179 = swift_bridgeObjectRetain();
  uint64_t v180 = v216;
  sub_1003E0FAC(v179, (uint64_t)v216);
  swift_bridgeObjectRelease();
  if (((unsigned int (*)(uint64_t *, uint64_t, unsigned char *))v37)(v180, 1, v45) == 1)
  {
    sub_10001DAB4((uint64_t)v180, (uint64_t *)&unk_10165F410);
    uint64_t v160 = (void (*)(char *, char *))v215;
    v215(v217, (uint64_t)v33);
    id v159 = v209;
    uint64_t v156 = v203;
  }
  else
  {
    uint64_t v182 = *v180;
    unint64_t v181 = v180[1];
    sub_100418B1C((uint64_t)v180 + *((int *)v45 + 12), type metadata accessor for OwnedBeaconGroup.PairingState);
    uint64_t v183 = sub_100ACD578(v182, v181);
    unint64_t v184 = sub_1003E03D4((uint64_t)v183);
    swift_bridgeObjectRelease();
    uint64_t v156 = v203;
    if (v184[2])
    {
      uint64_t v185 = v184[4];
      unint64_t v186 = v184[5];
      sub_1000361E0(v185, v186);
      swift_bridgeObjectRelease();
      uint64_t v187 = (void *)swift_allocObject();
      v187[2] = v53;
      v187[3] = v156;
      v187[4] = v41;
      uint64_t v188 = v156;
      swift_retain();
      swift_retain();
      unsafeFromAsyncTask<A>(_:)();
      swift_release();
      int v189 = LOBYTE(v244[0]);
      uint64_t My = type metadata accessor for Feature.FindMy();
      v244[3] = My;
      v244[4] = sub_100414C30((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
      uint64_t v191 = sub_10001D958(v244);
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v191, enum case for Feature.FindMy.smilingWheel(_:), My);
      LOBYTE(My) = isFeatureEnabled(_:)();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v244);
      if ((My & 1) != 0 && sub_100DC8590(v185, v186))
      {
        uint64_t v192 = Logger.logObject.getter();
        os_log_type_t v193 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v192, v193))
        {
          Class v194 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)Class v194 = 0;
          _os_log_impl((void *)&_mh_execute_header, v192, v193, "Starting AirPods LE pairing retry using FindMyBluetooth", v194, 2u);
          swift_slowDealloc();
        }

        uint64_t v195 = v230;
        uint64_t v196 = v217;
        sub_1003F6EDC((uint64_t)v217, (uint64_t)&v230[*(int *)(v235 + 28)], v189, 0, 0);
        sub_10001CFB8(v182, v181);
        sub_10001CFB8(v185, v186);
        swift_release();

        v215(v196, v242);
        uint64_t v178 = v195;
        goto LABEL_87;
      }
      uint64_t v197 = (char *)v242;
      Class v198 = v215;
      v215(v217, v242);
      uint64_t v199 = v185;
      uint64_t v160 = (void (*)(char *, char *))v198;
      unint64_t v200 = v186;
      uint64_t v33 = v197;
      sub_10001CFB8(v199, v200);
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v160 = (void (*)(char *, char *))v215;
      v215(v217, (uint64_t)v33);
    }
    sub_10001CFB8(v182, v181);
    id v159 = v209;
  }
LABEL_81:
  uint64_t v162 = sub_1003E7B30((char *)v156);
  uint64_t v163 = v236;
  if (v162)
  {
    uint64_t v164 = v162;
    uint64_t v165 = sub_100A3AC74(v236);
    __chkstk_darwin(v165);
    uint64_t v243 = v164;
    *(void *)&v201[-32] = v164;
    *(void *)&v201[-24] = v163;
    *(_OWORD *)&v201[-16] = xmmword_101347BB0;
    sub_10000588C(&qword_101643CF0);
    OS_dispatch_queue.sync<A>(execute:)();
    uint64_t v166 = v244[0];
    v160(v163, v33);
    v244[0] = v166;
    uint64_t v167 = v220;
    id v245 = v220;
    uint64_t v168 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
    uint64_t v169 = (uint64_t)v221;
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v168 - 8) + 56))(v221, 1, 1, v168);
    sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
    sub_100062734(&qword_101643CF8, &qword_101643CF0);
    sub_10027B124();
    id v170 = v167;
    uint64_t v171 = v222;
    Publisher.receive<A>(on:options:)();
    sub_10001DAB4(v169, &qword_10163C6C8);

    swift_release();
    uint64_t v172 = swift_allocObject();
    swift_weakInit();
    uint64_t v173 = swift_allocObject();
    *(void *)(v173 + 16) = sub_100415620;
    *(void *)(v173 + 24) = v172;
    sub_100062734(&qword_101643D00, &qword_101643CE8);
    uint64_t v174 = v224;
    Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(unsigned char *, uint64_t))(v223 + 8))(v171, v174);
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v175 = Logger.logObject.getter();
    os_log_type_t v176 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v175, v176))
    {
      uint64_t v177 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v177 = 0;
      _os_log_impl((void *)&_mh_execute_header, v175, v176, "Unable to create a new pairing manager to handle retry!", v177, 2u);
      swift_slowDealloc();
    }
    swift_release();
  }
  uint64_t v178 = v230;
LABEL_87:
  sub_100418B1C((uint64_t)v178, type metadata accessor for OwnedBeaconGroup);
  v213(v240, v239);
  sub_100418B1C((uint64_t)v241, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
}

uint64_t sub_1003F6EDC(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v33 = a4;
  uint64_t v34 = a5;
  int v31 = a3;
  uint64_t v7 = type metadata accessor for MACAddress();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v30 - v12;
  if (qword_101636AC0 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_100010324(v14, (uint64_t)qword_10170DE38);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Starting AirPods LE force pair using FindMyBluetooth", v17, 2u);
    swift_slowDealloc();
  }

  v30[1] = type metadata accessor for Transaction();
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v18(v13, a2, v7);
  v18(v11, a1, v7);
  uint64_t v19 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v20 = (v19 + 24) & ~v19;
  uint64_t v21 = (v9 + v19 + v20) & ~v19;
  uint64_t v22 = v21 + v9;
  uint64_t v23 = swift_allocObject();
  unint64_t v24 = (v22 & 0xFFFFFFFFFFFFFFF8) + v23;
  *(void *)(v23 + 16) = v32;
  uint64_t v25 = v23 + v20;
  uint64_t v26 = *(void (**)(uint64_t, char *, uint64_t))(v8 + 32);
  v26(v25, v13, v7);
  v26(v23 + v21, v11, v7);
  *(unsigned char *)(v23 + v22) = v31 & 1;
  uint64_t v28 = v33;
  uint64_t v27 = v34;
  *(void *)(v24 + 8) = v33;
  *(void *)(v24 + 16) = v27;
  swift_retain();
  sub_1000BD0E8(v28);
  static Transaction.asyncTask(name:block:)();
  return swift_release();
}

uint64_t sub_1003F719C(char *a1)
{
  uint64_t v39 = a1;
  uint64_t v1 = type metadata accessor for MACAddress();
  uint64_t v38 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000588C(&qword_101643CC0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for BluetoothManagerDevice();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v36 = (uint64_t)&v33 - v12;
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  os_log_type_t v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v34 = v11;
    uint64_t v35 = v7;
    uint64_t v37 = v1;
    if (qword_101636AC0 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_100010324(v18, (uint64_t)qword_10170DE38);
    uint64_t v19 = v39;
    sub_100A3C59C(0xD000000000000018, 0x80000001013FBDD0);
    id v20 = [*(id *)&v19[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject] identifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    swift_beginAccess();
    sub_1001645A0((uint64_t)v16);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    swift_endAccess();
    swift_release();
    sub_100A3AC74(v3);
    sub_1003FCC18((uint64_t)v3, (uint64_t)v6);
    uint64_t v21 = *(void (**)(char *, uint64_t))(v38 + 8);
    v21(v3, v37);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v35) == 1)
    {
      sub_10001DAB4((uint64_t)v6, &qword_101643CC0);
      uint64_t v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v22, v23))
      {
        unint64_t v24 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v24 = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "No BT device from BluetoothManager after pairing. Need to unpair", v24, 2u);
        swift_slowDealloc();
      }

      uint64_t v25 = v39;
      sub_100A3AC74(v3);
      sub_1003EB638(v25, (uint64_t)v3);
      swift_release();
      return ((uint64_t (*)(char *, uint64_t))v21)(v3, v37);
    }
    else
    {
      uint64_t v26 = v36;
      sub_100418690((uint64_t)v6, v36, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
      uint64_t v27 = (uint64_t)v34;
      sub_100418628(v26, (uint64_t)v34, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
      uint64_t v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v28, v29))
      {
        uint64_t v30 = (uint8_t *)swift_slowAlloc();
        v41[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v30 = 136315138;
        uint64_t v31 = sub_1001E0BAC();
        uint64_t v40 = sub_1008FA0F0(v31, v32, v41);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100418B1C(v27, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "Found BT device from BluetoothManager after pairing as expected. %s", v30, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        swift_release();
      }
      else
      {
        swift_release();

        sub_100418B1C(v27, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
      }
      return sub_100418B1C(v26, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
    }
  }
  return result;
}

uint64_t sub_1003F77AC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v123 = a1;
  uint64_t v122 = type metadata accessor for UUID();
  uint64_t v112 = *(void *)(v122 - 8);
  uint64_t v4 = __chkstk_darwin(v122);
  uint64_t v121 = (char *)&v109 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v120 = (char *)&v109 - v6;
  uint64_t v7 = sub_10000588C((uint64_t *)&unk_1016477E0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v109 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for MACAddress();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v129 = (char *)&v109 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000588C(&qword_101643CC0);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v109 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  os_log_type_t v16 = (int *)type metadata accessor for BluetoothManagerDevice();
  uint64_t v118 = *((void *)v16 - 1);
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v125 = (uint64_t)&v109 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v119 = (uint64_t)&v109 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  os_log_type_t v23 = (char *)&v109 - v22;
  __chkstk_darwin(v21);
  uint64_t v117 = (uint64_t)&v109 - v24;
  id v25 = sub_1003E1B90();
  if (v25
    && (uint64_t v26 = v25, v27 = [v25 pairedDevices], v26, v27)
    && (uint64_t v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)(),
        v27,
        unint64_t v29 = (unint64_t)sub_1004C74B4(v28),
        swift_bridgeObjectRelease(),
        v29))
  {
    unint64_t v127 = v29;
    if (v29 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v30 = result;
    }
    else
    {
      uint64_t v30 = *(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
    }
    uint64_t v111 = a2;
    uint64_t v110 = v2;
    if (v30)
    {
      uint64_t v130 = v10;
      unint64_t v32 = v127;
      if (v30 < 1)
      {
        __break(1u);
        return result;
      }
      uint64_t v33 = v30;
      uint64_t v34 = 0;
      unint64_t v132 = v127 & 0xC000000000000001;
      unint64_t v126 = (unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
      uint64_t v115 = (void (**)(char *, char *, uint64_t))(v11 + 16);
      id v116 = (void (**)(char *, char *, uint64_t))(v11 + 32);
      BOOL v114 = (void (**)(char *, uint64_t))(v11 + 8);
      uint64_t v131 = (char *)(v118 + 56);
      int v113 = (uint64_t (**)(char *, uint64_t, int *))(v118 + 48);
      BOOL v124 = _swiftEmptyArrayStorage;
      uint64_t v128 = v30;
      while (1)
      {
        id v35 = v132 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v32 + 8 * v34 + 32);
        uint64_t v36 = v35;
        uint64_t v37 = v16[10];
        *(void *)&v23[v37] = 0;
        id v38 = [v35 address];
        if (!v38) {
          break;
        }
        uint64_t v39 = v38;
        static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v40 = v9;

        MACAddress.init(string:type:)();
        uint64_t v41 = v130;
        if ((*v126)(v9, 1, v130) == 1)
        {

          sub_10001DAB4((uint64_t)v9, (uint64_t *)&unk_1016477E0);
          unint64_t v32 = v127;
          uint64_t v33 = v128;
          goto LABEL_10;
        }
        uint64_t v42 = v129;
        (*v116)(v129, v9, v41);
        *(void *)&v23[v37] = v36;
        (*v115)(v23, v42, v41);
        id v43 = v36;
        id v44 = [v43 name];
        if (v44)
        {
          uint64_t v45 = v44;
          uint64_t v46 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v48 = v47;
        }
        else
        {
          uint64_t v46 = 0;
          unint64_t v48 = 0xE000000000000000;
        }
        uint64_t v49 = (uint64_t *)&v23[v16[5]];
        uint64_t *v49 = v46;
        v49[1] = v48;
        *(_DWORD *)&v23[v16[6]] = [v43 vendorId];
        id v50 = [v43 productName];
        if (v50)
        {
          uint64_t v51 = v50;
          uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v54 = v53;
        }
        else
        {
          uint64_t v52 = 0;
          unint64_t v54 = 0xE000000000000000;
        }
        uint64_t v55 = (uint64_t *)&v23[v16[7]];
        *uint64_t v55 = v52;
        v55[1] = v54;
        *(_DWORD *)&v23[v16[8]] = [v43 productId];
        uint64_t v56 = sub_1002AAF08([v43 vendorId], [v43 productId]);
        uint64_t v58 = v57;

        (*v114)(v129, v130);
        uint64_t v59 = (uint64_t *)&v23[v16[9]];
        *uint64_t v59 = v56;
        v59[1] = v58;
        sub_100418628((uint64_t)v23, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
        (*(void (**)(char *, void, uint64_t, int *))v131)(v15, 0, 1, v16);
        sub_100418B1C((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
        int v60 = (*v113)(v15, 1, v16);
        uint64_t v9 = v40;
        unint64_t v32 = v127;
        uint64_t v33 = v128;
        if (v60 != 1)
        {
          uint64_t v61 = v117;
          sub_100418690((uint64_t)v15, v117, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
          sub_100418690(v61, v119, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
          if (swift_isUniquelyReferenced_nonNull_native()) {
            unint64_t v62 = (unint64_t)v124;
          }
          else {
            unint64_t v62 = sub_100A70460(0, v124[2] + 1, 1, (unint64_t)v124);
          }
          unint64_t v64 = *(void *)(v62 + 16);
          unint64_t v63 = *(void *)(v62 + 24);
          if (v64 >= v63 >> 1) {
            unint64_t v62 = sub_100A70460(v63 > 1, v64 + 1, 1, v62);
          }
          *(void *)(v62 + 16) = v64 + 1;
          unint64_t v65 = (*(unsigned __int8 *)(v118 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v118 + 80);
          BOOL v124 = (void *)v62;
          sub_100418690(v119, v62 + v65 + *(void *)(v118 + 72) * v64, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
          uint64_t v33 = v128;
          goto LABEL_12;
        }
LABEL_11:
        sub_10001DAB4((uint64_t)v15, &qword_101643CC0);
LABEL_12:
        if (v33 == ++v34) {
          goto LABEL_40;
        }
      }

LABEL_10:
      (*(void (**)(char *, uint64_t, uint64_t, int *))v131)(v15, 1, 1, v16);
      goto LABEL_11;
    }
    BOOL v124 = _swiftEmptyArrayStorage;
LABEL_40:
    swift_bridgeObjectRelease_n();
    if (qword_101636AC0 != -1) {
      swift_once();
    }
    uint64_t v72 = type metadata accessor for Logger();
    uint64_t v73 = sub_100010324(v72, (uint64_t)qword_10170DE38);
    unint64_t v74 = v124;
    swift_bridgeObjectRetain_n();
    uint64_t v130 = v73;
    uint64_t v75 = Logger.logObject.getter();
    os_log_type_t v76 = static os_log_type_t.default.getter();
    BOOL v77 = os_log_type_enabled(v75, v76);
    uint64_t v78 = v111;
    if (v77)
    {
      uint64_t v79 = swift_slowAlloc();
      v134[0] = (id)swift_slowAlloc();
      *(_DWORD *)uint64_t v79 = 134218242;
      uint64_t v133 = v74[2];
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v79 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v80 = Array.description.getter();
      unint64_t v82 = v81;
      swift_bridgeObjectRelease();
      uint64_t v133 = sub_1008FA0F0(v80, v82, (uint64_t *)v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v75, v76, "[sanitizedMAC] All paired devices [%ld]: %s", (uint8_t *)v79, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v83 = v74[2];
    uint64_t v84 = v125;
    if (v83)
    {
      unint64_t v85 = *(void *)(v110 + 32);
      uint64_t v131 = (char *)OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject;
      unint64_t v132 = v85;
      uint64_t v86 = (uint64_t)v74
          + ((*(unsigned __int8 *)(v118 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v118 + 80));
      double v87 = (void (**)(char *, uint64_t))(v112 + 8);
      uint64_t v88 = *(void *)(v118 + 72);
      uint64_t v89 = v120;
      while (1)
      {
        uint64_t v90 = sub_100418628(v86, v84, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
        __chkstk_darwin(v90);
        *(&v109 - 2) = v84;
        *(&v109 - 1) = v91;
        sub_10000588C(&qword_10165F6B0);
        Lock.callAsFunction<A>(_:)();
        id v92 = v134[0];
        if (v134[0])
        {
          id v93 = [*(id *)((char *)v134[0] + OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject) identifier];
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          id v94 = [*(id *)&v131[v123] identifier];
          unint64_t v95 = v121;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)();

          LOBYTE(v94) = static UUID.== infix(_:_:)();
          char v96 = *v87;
          uint64_t v97 = v95;
          uint64_t v98 = v122;
          (*v87)(v97, v122);
          v96(v89, v98);
          if (v94)
          {
            swift_bridgeObjectRelease();
            uint64_t v100 = v92;
            os_log_type_t v101 = Logger.logObject.getter();
            os_log_type_t v102 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v101, v102))
            {
              uint64_t v103 = (uint8_t *)swift_slowAlloc();
              uint64_t v104 = (void *)swift_slowAlloc();
              *(_DWORD *)uint64_t v103 = 138412290;
              v134[0] = v100;
              uint64_t v105 = v100;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              *uint64_t v104 = v92;

              _os_log_impl((void *)&_mh_execute_header, v101, v102, "[sanitizedMAC] Found BT peripheral: %@", v103, 0xCu);
              sub_10000588C((uint64_t *)&unk_101638EA0);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {

              os_log_type_t v101 = v100;
            }
            uint64_t v106 = (NSObject **)v111;

            uint64_t v107 = sub_10000588C(&qword_101643CD0);
            uint64_t v108 = (uint64_t)v106 + *(int *)(v107 + 48);
            char *v106 = v100;
            sub_100418690(v125, v108, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
            return (*(uint64_t (**)(NSObject **, void, uint64_t, uint64_t))(*(void *)(v107 - 8) + 56))(v106, 0, 1, v107);
          }
          uint64_t v84 = v125;
          sub_100418B1C(v125, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
        }
        else
        {
          sub_100418B1C(v84, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
        }
        v86 += v88;
        if (!--v83)
        {
          swift_bridgeObjectRelease();
          uint64_t v78 = v111;
          goto LABEL_54;
        }
      }
    }
    swift_bridgeObjectRelease();
LABEL_54:
    uint64_t v99 = sub_10000588C(&qword_101643CD0);
    return (*(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v99 - 8) + 56))(v78, 1, 1, v99);
  }
  else
  {
    if (qword_101636AC0 != -1) {
      swift_once();
    }
    uint64_t v66 = type metadata accessor for Logger();
    sub_100010324(v66, (uint64_t)qword_10170DE38);
    os_log_type_t v67 = Logger.logObject.getter();
    os_log_type_t v68 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v67, v68))
    {
      char v69 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v69 = 0;
      _os_log_impl((void *)&_mh_execute_header, v67, v68, "[sanitizedMAC] Unable to retrieve BT paired devices!", v69, 2u);
      swift_slowDealloc();
    }

    uint64_t v70 = sub_10000588C(&qword_101643CD0);
    uint64_t v71 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v70 - 8) + 56);
    return v71(a2, 1, 1, v70);
  }
}

uint64_t sub_1003F865C(char *a1)
{
  uint64_t v2 = sub_10000588C(&qword_10163C8B0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_101649E80);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ([*(id *)&a1[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject] state] != (id)2) {
    return sub_1013285F8(a1, 0);
  }
  if (qword_101636AC0 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_100010324(v10, (uint64_t)qword_10170DE38);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Peripheral is already connected. No need to connect again.", v13, 2u);
    swift_slowDealloc();
  }

  v17[1] = a1;
  type metadata accessor for Peripheral();
  uint64_t v14 = a1;
  Just.init(_:)();
  sub_100061234();
  Just.setFailureType<A>(to:)();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  sub_100062734(&qword_10163C8B8, (uint64_t *)&unk_101649E80);
  uint64_t v15 = Publisher.eraseToAnyPublisher()();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return v15;
}

void sub_1003F8944(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  uint64_t v40 = a1;
  uint64_t v36 = a2;
  uint64_t v37 = a5;
  int v38 = a4;
  int v35 = a3;
  uint64_t v5 = type metadata accessor for MACAddress();
  uint64_t v39 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = &v34[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  os_log_type_t v12 = &v34[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10);
  uint64_t v14 = &v34[-v13];
  uint64_t v15 = type metadata accessor for DispatchPredicate();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = &v34[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  if (qword_1016371D8 != -1) {
    swift_once();
  }
  uint64_t v42 = 0x7365547265646E75;
  unint64_t v43 = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)();
  swift_bridgeObjectRelease();
  if ((v44 & 1) == 0)
  {
    uint64_t v19 = *(void **)(v41 + 48);
    *uint64_t v18 = v19;
    (*(void (**)(void *, void, uint64_t))(v16 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v15);
    id v20 = v19;
    LOBYTE(v19) = _dispatchPreconditionTest(_:)();
    (*(void (**)(void *, uint64_t))(v16 + 8))(v18, v15);
    if ((v19 & 1) == 0)
    {
      __break(1u);
      goto LABEL_19;
    }
    static SystemInfo.lockState.getter();
    (*(void (**)(unsigned char *, void, uint64_t))(v9 + 104))(v12, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v8);
    sub_100414C30((unint64_t *)&qword_1016429C8, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
    char v21 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v22 = *(void (**)(unsigned char *, uint64_t))(v9 + 8);
    v22(v12, v8);
    v22(v14, v8);
    if (v21)
    {
      if (qword_101637310 == -1)
      {
LABEL_7:
        uint64_t v23 = type metadata accessor for Logger();
        sub_100010324(v23, (uint64_t)qword_10170F068);
        uint64_t v24 = Logger.logObject.getter();
        os_log_type_t v25 = static os_log_type_t.default.getter();
        if (!os_log_type_enabled(v24, v25))
        {
LABEL_15:

          return;
        }
        uint64_t v26 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v26 = 0;
        id v27 = "Not handling pairing/connection event before first unlock!";
LABEL_14:
        _os_log_impl((void *)&_mh_execute_header, v24, v25, v27, v26, 2u);
        swift_slowDealloc();
        goto LABEL_15;
      }
LABEL_19:
      swift_once();
      goto LABEL_7;
    }
    uint64_t v28 = v40;
    sub_100A3AC74(v7);
    char v29 = MACAddress.isNull.getter();
    (*(void (**)(char *, uint64_t))(v39 + 8))(v7, v5);
    if (v29)
    {
      if (qword_101636AC0 != -1) {
        swift_once();
      }
      uint64_t v30 = type metadata accessor for Logger();
      sub_100010324(v30, (uint64_t)qword_10170DE38);
      uint64_t v24 = Logger.logObject.getter();
      os_log_type_t v25 = static os_log_type_t.error.getter();
      if (!os_log_type_enabled(v24, v25)) {
        goto LABEL_15;
      }
      uint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v26 = 0;
      id v27 = "Void MAC address detected. Abort pairing!";
      goto LABEL_14;
    }
    uint64_t v31 = type metadata accessor for Transaction();
    __chkstk_darwin(v31);
    uint64_t v32 = v41;
    *(void *)&v34[-48] = v28;
    *(void *)&v34[-40] = v32;
    v34[-32] = v35 & 1;
    uint64_t v33 = v37;
    *(void *)&v34[-24] = v36;
    *(void *)&v34[-16] = v33;
    v34[-8] = v38 & 1;
    static Transaction.named<A>(_:with:)();
  }
}

uint64_t sub_1003F8EE0(uint64_t a1, char *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t v90 = a6;
  int v87 = a4;
  int v88 = a7;
  uint64_t v85 = a5;
  uint64_t v89 = a1;
  uint64_t v9 = type metadata accessor for BluetoothManagerDevice();
  uint64_t v83 = *(void *)(v9 - 8);
  __chkstk_darwin(v9 - 8);
  uint64_t v84 = v10;
  uint64_t v86 = (uint64_t)v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C(&qword_10163C6C8);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)v57 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = sub_10000588C(&qword_1016417E0);
  uint64_t v60 = *(void *)(v61 - 8);
  __chkstk_darwin(v61);
  uint64_t v15 = (char *)v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = sub_10000588C(&qword_1016417E8);
  uint64_t v62 = *(void *)(v63 - 8);
  __chkstk_darwin(v63);
  uint64_t v59 = (char *)v57 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = sub_10000588C(&qword_1016417F0);
  uint64_t v68 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  unint64_t v64 = (char *)v57 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = sub_10000588C(&qword_1016417F8);
  uint64_t v71 = *(void *)(v74 - 8);
  __chkstk_darwin(v74);
  unint64_t v65 = (char *)v57 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = sub_10000588C(&qword_101641800);
  uint64_t v73 = *(void *)(v76 - 8);
  __chkstk_darwin(v76);
  uint64_t v70 = (char *)v57 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v75 = sub_10000588C(&qword_101643D38);
  uint64_t v72 = *(void *)(v75 - 8);
  __chkstk_darwin(v75);
  char v69 = (char *)v57 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_10000588C(&qword_101643D40);
  uint64_t v78 = *(void *)(v21 - 8);
  uint64_t v79 = v21;
  __chkstk_darwin(v21);
  BOOL v77 = (char *)v57 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_10000588C(&qword_101643D48);
  uint64_t v81 = *(void *)(v23 - 8);
  uint64_t v82 = v23;
  __chkstk_darwin(v23);
  uint64_t v80 = (char *)v57 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101636AC0 != -1) {
    swift_once();
  }
  uint64_t v25 = type metadata accessor for Logger();
  sub_100010324(v25, (uint64_t)qword_10170DE38);
  sub_100A3C59C(0xD000000000000022, 0x80000001013FBD30);
  id v96 = (id)sub_1003F865C(a2);
  uint64_t v66 = a3;
  uint64_t v26 = *(void **)(a3 + 48);
  id v97 = v26;
  uint64_t v94 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  uint64_t v27 = *(void *)(v94 - 8);
  uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56);
  uint64_t v95 = v27 + 56;
  v28(v13, 1, 1, v94);
  uint64_t v58 = v28;
  v57[0] = v26;
  uint64_t v29 = sub_10000588C((uint64_t *)&unk_101649C90);
  uint64_t v91 = sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  uint64_t v30 = sub_100062734((unint64_t *)&unk_101649CA0, (uint64_t *)&unk_101649C90);
  unint64_t v92 = sub_10027B124();
  uint64_t v31 = v15;
  v57[2] = v29;
  v57[3] = v30;
  Publisher.receive<A>(on:options:)();
  sub_10001DAB4((uint64_t)v13, &qword_10163C6C8);

  swift_release();
  static Subscribers.Demand.unlimited.getter();
  uint64_t v93 = type metadata accessor for Peripheral();
  v57[1] = &protocol conformance descriptor for Publishers.ReceiveOn<A, B>;
  sub_100062734(&qword_101641830, &qword_1016417E0);
  uint64_t v32 = v59;
  uint64_t v33 = v61;
  Publisher.flatMap<A, B>(maxPublishers:_:)();
  (*(void (**)(char *, uint64_t))(v60 + 8))(v31, v33);
  uint64_t v34 = (void *)v57[0];
  id v96 = (id)v57[0];
  v28(v13, 1, 1, v94);
  sub_100062734(&qword_101641838, &qword_1016417E8);
  id v35 = v34;
  uint64_t v36 = v64;
  uint64_t v37 = v63;
  Publisher.receive<A>(on:options:)();
  sub_10001DAB4((uint64_t)v13, &qword_10163C6C8);

  (*(void (**)(char *, uint64_t))(v62 + 8))(v32, v37);
  *(void *)(swift_allocObject() + 16) = &off_1015A13B0;
  static Subscribers.Demand.unlimited.getter();
  sub_100062734(&qword_101641840, &qword_1016417F0);
  int v38 = v65;
  uint64_t v39 = v67;
  Publisher.flatMap<A, B>(maxPublishers:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v68 + 8))(v36, v39);
  id v96 = v35;
  v58(v13, 1, 1, v94);
  sub_100062734(&qword_101641848, &qword_1016417F8);
  id v40 = v35;
  uint64_t v41 = v70;
  uint64_t v42 = v74;
  Publisher.receive<A>(on:options:)();
  sub_10001DAB4((uint64_t)v13, &qword_10163C6C8);

  (*(void (**)(char *, uint64_t))(v71 + 8))(v38, v42);
  sub_100062734(&qword_101641850, &qword_101641800);
  unint64_t v43 = v69;
  uint64_t v44 = v76;
  Publisher.compactMap<A>(_:)();
  (*(void (**)(char *, uint64_t))(v73 + 8))(v41, v44);
  sub_10000588C(&qword_101655B50);
  uint64_t v45 = v77;
  uint64_t v46 = v75;
  Publishers.CompactMap.map<A>(_:)();
  (*(void (**)(char *, uint64_t))(v72 + 8))(v43, v46);
  sub_10000588C(&qword_10163C890);
  sub_100062734(&qword_101643D50, &qword_101643D40);
  sub_100062734(&qword_10163C8A0, &qword_10163C890);
  uint64_t v47 = v79;
  unint64_t v48 = v80;
  Publisher.catch<A>(_:)();
  (*(void (**)(char *, uint64_t))(v78 + 8))(v45, v47);
  uint64_t v49 = swift_allocObject();
  swift_weakInit();
  uint64_t v50 = v86;
  sub_100418628(v85, v86, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
  unint64_t v51 = (*(unsigned __int8 *)(v83 + 80) + 33) & ~(unint64_t)*(unsigned __int8 *)(v83 + 80);
  unint64_t v52 = (v84 + v51 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v53 = swift_allocObject();
  *(void *)(v53 + 16) = v89;
  *(void *)(v53 + 24) = v49;
  *(unsigned char *)(v53 + 32) = v87 & 1;
  sub_100418690(v50, v53 + v51, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
  unint64_t v54 = v53 + v52;
  *(void *)unint64_t v54 = v90;
  *(unsigned char *)(v54 + 8) = v88 & 1;
  sub_100062734(&qword_101643D58, &qword_101643D48);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v55 = v82;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v81 + 8))(v48, v55);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  return swift_release();
}

uint64_t sub_1003F9BF8@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v27 = a3;
  uint64_t v5 = sub_10000588C(&qword_10163C8B0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C((uint64_t *)&unk_101649E80);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (char *)*a1;
  void v30[3] = &type metadata for BAServiceIdentifier;
  v30[4] = &off_1015CE038;
  LOBYTE(v30[0]) = 1;
  uint64_t v14 = (uint64_t *)&v13[OBJC_IVAR____TtC12searchpartyd10Peripheral_services];
  swift_beginAccess();
  uint64_t v15 = *v14;
  uint64_t v29 = v30;
  swift_bridgeObjectRetain();
  uint64_t v16 = sub_100E4E988((uint64_t (*)(uint64_t *))sub_10015AF64, (uint64_t)v28, v15);
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v30);
  if (v16)
  {
    uint64_t v17 = sub_100A9B7E0(a2);
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = v16;
    *(void *)(v18 + 24) = v17;
    sub_10000588C((uint64_t *)&unk_101649E90);
    swift_allocObject();
    swift_retain();
    swift_bridgeObjectRetain();
    v30[0] = Future.init(_:)();
    sub_100062734((unint64_t *)&qword_101671CE0, (uint64_t *)&unk_101649E90);
    uint64_t v19 = Publisher.eraseToAnyPublisher()();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
  }
  else
  {
    if (qword_101636AC0 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_100010324(v21, (uint64_t)qword_10170DE38);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "No FindMy service", v24, 2u);
      swift_slowDealloc();
    }

    v30[0] = v13;
    type metadata accessor for Peripheral();
    uint64_t v25 = v13;
    Just.init(_:)();
    sub_100061234();
    Just.setFailureType<A>(to:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    sub_100062734(&qword_10163C8B8, (uint64_t *)&unk_101649E80);
    uint64_t v19 = Publisher.eraseToAnyPublisher()();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  uint64_t *v27 = v19;
  return result;
}

uint64_t sub_1003FA01C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint8_t *a5, uint8_t *a6, char a7)
{
  Transaction.capture()();
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_10001D074(a1, (uint64_t)v42, &qword_101655B50);
    if (v43)
    {
      sub_10006105C((uint64_t)v42, (uint64_t)v39);
      if (qword_101636AC0 != -1) {
        swift_once();
      }
      uint64_t v13 = type metadata accessor for Logger();
      sub_100010324(v13, (uint64_t)qword_10170DE38);
      sub_1000610B8((uint64_t)v39, (uint64_t)v38);
      uint64_t v14 = Logger.logObject.getter();
      os_log_type_t v15 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v14, v15))
      {
        uint64_t v16 = (uint8_t *)swift_slowAlloc();
        uint64_t v17 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v16 = 138543362;
        sub_100061234();
        swift_allocError();
        sub_1000610B8((uint64_t)v38, v18);
        uint64_t v37 = _swift_stdlib_bridgeErrorToNSError();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *uint64_t v17 = v37;
        sub_100061288((uint64_t)v38);
        _os_log_impl((void *)&_mh_execute_header, v14, v15, "registerForConnectionEvents error: %{public}@", v16, 0xCu);
        sub_10000588C((uint64_t *)&unk_101638EA0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        swift_release();
      }
      else
      {

        swift_release();
        sub_100061288((uint64_t)v38);
      }
      return sub_100061288((uint64_t)v39);
    }
    else
    {
      uint64_t v19 = (char *)v42[0];
      id v40 = &type metadata for BAServiceIdentifier;
      uint64_t v41 = &off_1015CE038;
      v39[0] = 1;
      uint64_t v20 = (uint64_t *)(v42[0] + OBJC_IVAR____TtC12searchpartyd10Peripheral_services);
      uint64_t v21 = swift_beginAccess();
      uint64_t v22 = *v20;
      __chkstk_darwin(v21);
      v36[2] = v39;
      swift_bridgeObjectRetain();
      uint64_t v23 = sub_100E4E988((uint64_t (*)(uint64_t *))sub_100158AAC, (uint64_t)v36, v22);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v39);
      if (v23)
      {
        if (a4)
        {
          if (qword_101636AC0 != -1) {
            swift_once();
          }
          uint64_t v24 = type metadata accessor for Logger();
          sub_100010324(v24, (uint64_t)qword_10170DE38);
          uint64_t v25 = Logger.logObject.getter();
          os_log_type_t v26 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v25, v26))
          {
            uint64_t v27 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v27 = 0;
            _os_log_impl((void *)&_mh_execute_header, v25, v26, "Bypassing Privacy Alert and force pairing", v27, 2u);
            swift_slowDealloc();
          }

          sub_1003FBA44(v23, v19, a5, 1, a6);
        }
        else
        {
          if (qword_101636AC0 != -1) {
            swift_once();
          }
          uint64_t v32 = type metadata accessor for Logger();
          sub_100010324(v32, (uint64_t)qword_10170DE38);
          uint64_t v33 = Logger.logObject.getter();
          os_log_type_t v34 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v33, v34))
          {
            id v35 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)id v35 = 0;
            _os_log_impl((void *)&_mh_execute_header, v33, v34, "Owner characteristic available. Proceed with privacy alert.", v35, 2u);
            swift_slowDealloc();
          }

          sub_1003FA584(v23, (uint64_t)v19, (uint64_t)a5, a7 & 1);
        }

        swift_release();
      }
      else
      {
        if (qword_101636AC0 != -1) {
          swift_once();
        }
        uint64_t v28 = type metadata accessor for Logger();
        sub_100010324(v28, (uint64_t)qword_10170DE38);
        uint64_t v29 = Logger.logObject.getter();
        os_log_type_t v30 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v29, v30))
        {
          uint64_t v31 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v31 = 0;
          _os_log_impl((void *)&_mh_execute_header, v29, v30, "No FindMy service", v31, 2u);
          swift_slowDealloc();
        }
      }
      return swift_release();
    }
  }
  return result;
}

void sub_1003FA584(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v9 = type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = &v24[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = *(void **)(v4 + 48);
  void *v12 = v13;
  (*(void (**)(void *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  id v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
  if ((v13 & 1) == 0)
  {
    __break(1u);
LABEL_9:
    swift_once();
    goto LABEL_5;
  }
  os_log_type_t v26 = &type metadata for BACharacteristicIdentifier.FindMy;
  uint64_t v27 = &off_1015CE018;
  v25[0] = 3;
  uint64_t v15 = swift_beginAccess();
  uint64_t v16 = *(void *)(a1 + 40);
  __chkstk_darwin(v15);
  *(void *)&v24[-16] = v25;
  swift_bridgeObjectRetain();
  uint64_t v17 = sub_100E4E9E4((uint64_t (*)(uint64_t *))sub_100332E60, (uint64_t)&v24[-32], v16);
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v25);
  if (v17)
  {
    uint64_t v18 = sub_1003E8328();
    uint64_t v19 = type metadata accessor for Transaction();
    __chkstk_darwin(v19);
    *(void *)&v24[-64] = v18;
    *(void *)&v24[-56] = a2;
    *(void *)&v24[-48] = v17;
    *(void *)&v24[-40] = a3;
    v24[-32] = a4 & 1;
    *(void *)&v24[-24] = v4;
    *(void *)&v24[-16] = a1;
    static Transaction.named<A>(_:with:)();
    swift_release();
    swift_release();
    return;
  }
  if (qword_101636AC0 != -1) {
    goto LABEL_9;
  }
LABEL_5:
  uint64_t v20 = type metadata accessor for Logger();
  sub_100010324(v20, (uint64_t)qword_10170DE38);
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Missing Paired Owner Characteristic!", v23, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_1003FA8A8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v46 = a1;
  uint64_t v47 = a8;
  uint64_t v37 = a7;
  uint64_t v38 = a5;
  char v8 = a6;
  int v40 = a6;
  uint64_t v39 = a3;
  uint64_t v13 = type metadata accessor for BluetoothManagerDevice();
  uint64_t v42 = *(void *)(v13 - 8);
  uint64_t v14 = *(void *)(v42 + 64);
  __chkstk_darwin(v13 - 8);
  uint64_t v41 = (uint64_t)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000588C(&qword_10163C6C8);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_10000588C(&qword_101643D08);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v44 = v18;
  uint64_t v45 = v19;
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v36 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = a2;
  uint64_t v49 = a3;
  uint64_t v50 = a4;
  uint64_t v51 = a5;
  char v52 = v8;
  sub_10000588C(&qword_101643D10);
  uint64_t v22 = v43;
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v43 = v22;
  id v53 = *(id *)(v37 + 48);
  id v23 = v53;
  uint64_t v24 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v17, 1, 1, v24);
  sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  sub_100062734(&qword_101643D18, &qword_101643D10);
  sub_10027B124();
  id v25 = v23;
  Publisher.receive<A>(on:options:)();
  sub_10001DAB4((uint64_t)v17, &qword_10163C6C8);

  swift_release();
  uint64_t v26 = swift_allocObject();
  swift_weakInit();
  uint64_t v27 = v41;
  sub_100418628(v38, v41, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
  unint64_t v28 = (*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80);
  unint64_t v29 = (v14 + v28 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v30 = swift_allocObject();
  uint64_t v31 = v39;
  *(void *)(v30 + 16) = v26;
  *(void *)(v30 + 24) = v31;
  sub_100418690(v27, v30 + v28, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
  *(void *)(v30 + v29) = v46;
  unint64_t v32 = v30 + ((v29 + 15) & 0xFFFFFFFFFFFFFFF8);
  *(void *)unint64_t v32 = v47;
  *(unsigned char *)(v32 + 8) = v40;
  sub_100062734(&qword_101643D20, &qword_101643D08);
  id v33 = v31;
  swift_retain();
  swift_retain();
  uint64_t v34 = v44;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v45 + 8))(v21, v34);
  AnyCancellable.store(in:)();
  return swift_release();
}

uint64_t sub_1003FACEC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  uint64_t v12 = type metadata accessor for BluetoothManagerDevice();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12 - 8);
  uint64_t v15 = (char *)v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v17 = result;
    v24[2] = type metadata accessor for Transaction();
    uint64_t v18 = swift_allocObject();
    swift_weakInit();
    sub_100418628(a4, (uint64_t)v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
    unint64_t v19 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
    unint64_t v20 = (v14 + v19 + 7) & 0xFFFFFFFFFFFFFFF8;
    v24[1] = v17;
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = v18;
    *(void *)(v21 + 24) = a3;
    sub_100418690((uint64_t)v15, v21 + v19, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
    *(void *)(v21 + v20) = a5;
    unint64_t v22 = v21 + ((v20 + 15) & 0xFFFFFFFFFFFFFFF8);
    *(void *)unint64_t v22 = a6;
    *(unsigned char *)(v22 + 8) = a7 & 1;
    swift_retain();
    id v23 = a3;
    swift_retain();
    swift_retain();
    static Transaction.asyncTask(name:block:)();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1003FAF0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  *(unsigned char *)(v6 + 240) = a6;
  *(void *)(v6 + 128) = a4;
  *(void *)(v6 + 136) = a5;
  *(void *)(v6 + 112) = a2;
  *(void *)(v6 + 120) = a3;
  *(void *)(v6 + 104) = a1;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  *(void *)(v6 + 144) = v7;
  *(void *)(v6 + 152) = *(void *)(v7 - 8);
  *(void *)(v6 + 160) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for DispatchQoS();
  *(void *)(v6 + 168) = v8;
  *(void *)(v6 + 176) = *(void *)(v8 - 8);
  *(void *)(v6 + 184) = swift_task_alloc();
  uint64_t v9 = *(void *)(type metadata accessor for BluetoothManagerDevice() - 8);
  *(void *)(v6 + 192) = v9;
  *(void *)(v6 + 200) = *(void *)(v9 + 64);
  *(void *)(v6 + 208) = swift_task_alloc();
  *(void *)(v6 + 216) = swift_task_alloc();
  return _swift_task_switch(sub_1003FB0A4, 0, 0);
}

uint64_t sub_1003FB0A4()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  v0[28] = Strong;
  if (Strong)
  {
    uint64_t v2 = (void *)swift_task_alloc();
    v0[29] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1003FB1CC;
    uint64_t v3 = v0[14];
    return sub_1003FD6EC(v3);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
}

uint64_t sub_1003FB1CC(char a1)
{
  *(unsigned char *)(*(void *)v1 + 241) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1003FB2CC, 0, 0);
}

uint64_t sub_1003FB2CC()
{
  uint64_t v36 = v0;
  if (*(unsigned char *)(v0 + 241) == 1)
  {
    uint64_t v2 = *(void *)(v0 + 216);
    uint64_t v1 = *(void *)(v0 + 224);
    uint64_t v3 = *(void *)(v0 + 192);
    uint64_t v4 = *(void *)(v0 + 200);
    uint64_t v29 = *(void *)(v0 + 184);
    uint64_t v33 = *(void *)(v0 + 176);
    uint64_t v34 = *(void *)(v0 + 168);
    uint64_t v30 = *(void *)(v0 + 160);
    uint64_t v31 = *(void *)(v0 + 144);
    char v28 = *(unsigned char *)(v0 + 240);
    uint64_t v5 = *(void *)(v0 + 128);
    uint64_t v27 = *(void *)(v0 + 136);
    uint64_t v6 = *(void **)(v0 + 112);
    uint64_t v32 = *(void *)(v0 + 152);
    sub_100418628(*(void *)(v0 + 120), v2, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
    unint64_t v7 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    unint64_t v8 = (v4 + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 16) = v5;
    sub_100418690(v2, v10 + v7, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
    *(void *)(v10 + v8) = v1;
    *(void *)(v10 + v9) = v27;
    unint64_t v11 = v10 + ((v9 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v12 = v6;
    *(void *)unint64_t v11 = v6;
    *(unsigned char *)(v11 + 8) = v28;
    *(void *)(v0 + 48) = sub_1004152C4;
    *(void *)(v0 + 56) = v10;
    *(void *)(v0 + 16) = _NSConcreteStackBlock;
    *(void *)(v0 + 24) = 1107296256;
    *(void *)(v0 + 32) = sub_1004B5480;
    *(void *)(v0 + 40) = &unk_1015BF248;
    uint64_t v13 = _Block_copy((const void *)(v0 + 16));
    swift_retain();
    swift_retain();
    swift_retain();
    id v14 = v12;
    static DispatchQoS.unspecified.getter();
    *(void *)(v0 + 96) = _swiftEmptyArrayStorage;
    sub_100414C30((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v13);
    (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v30, v31);
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v29, v34);
    swift_release();
    swift_release();
  }
  else
  {
    if (qword_101636AC0 != -1) {
      swift_once();
    }
    uint64_t v15 = *(void *)(v0 + 208);
    uint64_t v16 = *(void *)(v0 + 120);
    uint64_t v17 = type metadata accessor for Logger();
    sub_100010324(v17, (uint64_t)qword_10170DE38);
    sub_100418628(v16, v15, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    BOOL v20 = os_log_type_enabled(v18, v19);
    uint64_t v21 = *(void *)(v0 + 208);
    if (v20)
    {
      unint64_t v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v35 = swift_slowAlloc();
      *(_DWORD *)unint64_t v22 = 136446210;
      uint64_t v23 = sub_1001E0BAC();
      *(void *)(v0 + 88) = sub_1008FA0F0(v23, v24, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100418B1C(v21, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "FindMy pairing has been completed for %{public}s.", v22, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_release();
    }
    else
    {
      swift_release();
      sub_100418B1C(v21, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v25 = *(uint64_t (**)(void))(v0 + 8);
  return v25();
}

void sub_1003FB7C0(uint64_t a1, uint8_t *a2, uint64_t a3, uint64_t a4, char *a5, char a6)
{
  uint64_t v11 = type metadata accessor for BluetoothManagerDevice();
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  Transaction.capture()();
  if (qword_101636AC0 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_100010324(v14, (uint64_t)qword_10170DE38);
  sub_100418628((uint64_t)a2, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc();
    id v25 = a5;
    uint64_t v18 = (uint8_t *)v17;
    uint64_t v19 = swift_slowAlloc();
    uint64_t v24 = a3;
    uint64_t v27 = v19;
    *(_DWORD *)uint64_t v18 = 136446210;
    uint64_t v23 = a2;
    uint64_t v20 = sub_1001E0BAC();
    uint64_t v26 = sub_1008FA0F0(v20, v21, &v27);
    a2 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100418B1C((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "FindMy pairing is not completed for %{public}s. Attempt to pair...", v18, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    a5 = v25;
    swift_slowDealloc();
  }
  else
  {
    sub_100418B1C((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
  }

  sub_1003FBA44(a4, a5, a2, a6 & 1, (uint8_t *)_swiftEmptyArrayStorage);
}

void sub_1003FBA44(uint64_t a1, char *a2, uint8_t *a3, int a4, uint8_t *a5)
{
  uint64_t v6 = v5;
  uint64_t v62 = a3;
  uint64_t v63 = a5;
  int v61 = a4;
  unint64_t v64 = a2;
  uint64_t v8 = sub_10000588C(&qword_10163C6C8);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C(&qword_101643CE8);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchPredicate();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (uint8_t **)((char *)&v54 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v19 = *(void **)(v6 + 48);
  *uint64_t v18 = v19;
  (*(void (**)(void *, void, uint64_t))(v16 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v15);
  id v60 = v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v16 + 8))(v18, v15);
  if ((v19 & 1) == 0)
  {
    __break(1u);
LABEL_30:
    swift_once();
    goto LABEL_10;
  }
  uint64_t v67 = &type metadata for BACharacteristicIdentifier.FindMy;
  uint64_t v68 = &off_1015CE018;
  LOBYTE(v66[0]) = 0;
  uint64_t v20 = swift_beginAccess();
  uint64_t v21 = *(void *)(a1 + 40);
  __chkstk_darwin(v20);
  *(&v54 - 2) = (uint8_t *)v66;
  swift_bridgeObjectRetain();
  uint64_t v22 = sub_100E4E9E4((uint64_t (*)(uint64_t *))sub_100158ACC, (uint64_t)(&v54 - 4), v21);
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v66);
  if (v22)
  {
    uint64_t My = type metadata accessor for Feature.FindMy();
    uint64_t v67 = (ValueMetadata *)My;
    uint64_t v68 = (_UNKNOWN **)sub_100414C30((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
    uint64_t v24 = sub_10001D958(v66);
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v24, enum case for Feature.FindMy.baAirpods(_:), My);
    LOBYTE(My) = isFeatureEnabled(_:)();
    uint64_t v25 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v66);
    if (My)
    {
      __chkstk_darwin(v25);
      uint64_t v26 = v64;
      *(&v54 - 2) = (uint8_t *)v6;
      *(&v54 - 1) = (uint8_t *)v26;
      QueueSynchronizer.conditionalSync<A>(_:)();
      if (v66[0])
      {
        if (qword_101636AC0 != -1) {
          swift_once();
        }
        uint64_t v27 = type metadata accessor for Logger();
        sub_100010324(v27, (uint64_t)qword_10170DE38);
        char v28 = Logger.logObject.getter();
        os_log_type_t v29 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v28, v29))
        {
          uint64_t v30 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v30 = 0;
          uint64_t v31 = "Pairing in progress. Not pairing.";
LABEL_17:
          _os_log_impl((void *)&_mh_execute_header, v28, v29, v31, v30, 2u);
          swift_slowDealloc();
          swift_release();

          return;
        }
      }
      else
      {
        uint64_t v58 = 0;
        if (qword_101636AC0 != -1) {
          swift_once();
        }
        uint64_t v37 = type metadata accessor for Logger();
        uint64_t v38 = sub_100010324(v37, (uint64_t)qword_10170DE38);
        swift_retain_n();
        uint64_t v39 = Logger.logObject.getter();
        os_log_type_t v40 = static os_log_type_t.default.getter();
        BOOL v41 = os_log_type_enabled(v39, v40);
        uint64_t v59 = v12;
        if (v41)
        {
          uint64_t v42 = (uint8_t *)swift_slowAlloc();
          uint64_t v56 = swift_slowAlloc();
          v66[0] = v56;
          uint64_t v55 = v42;
          *(_DWORD *)uint64_t v42 = 136446210;
          unint64_t v54 = v42 + 4;
          swift_retain();
          uint64_t v43 = sub_100A6DA6C();
          uint64_t v57 = v38;
          unint64_t v45 = v44;
          swift_release();
          id v65 = (id)sub_1008FA0F0(v43, v45, v66);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v39, v40, "Pairing characteristic %{public}s available. Proceed with FindMy pairing.", v55, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_release_n();
        }
        uint64_t v46 = sub_1003E7B30(v64);
        if (v46)
        {
          uint64_t v47 = (char *)__chkstk_darwin(v46);
          *(&v54 - 6) = (uint8_t *)v47;
          *((unsigned char *)&v54 - 40) = v61 & 1;
          uint64_t v48 = v63;
          *(&v54 - 4) = v62;
          *(&v54 - 3) = v48;
          *(&v54 - 2) = (uint8_t *)v22;
          unint64_t v64 = v47;
          sub_10000588C(&qword_101643CF0);
          OS_dispatch_queue.sync<A>(execute:)();
          uint64_t v49 = v60;
          id v65 = v60;
          uint64_t v50 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56))(v10, 1, 1, v50);
          sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
          sub_100062734(&qword_101643CF8, &qword_101643CF0);
          sub_10027B124();
          id v51 = v49;
          Publisher.receive<A>(on:options:)();
          sub_10001DAB4((uint64_t)v10, &qword_10163C6C8);

          swift_release();
          uint64_t v52 = swift_allocObject();
          swift_weakInit();
          uint64_t v53 = swift_allocObject();
          *(void *)(v53 + 16) = sub_100414D54;
          *(void *)(v53 + 24) = v52;
          sub_100062734(&qword_101643D00, &qword_101643CE8);
          Publisher<>.sink(receiveValue:)();
          swift_release();
          (*(void (**)(char *, uint64_t))(v59 + 8))(v14, v11);
          swift_beginAccess();
          AnyCancellable.store(in:)();
          swift_endAccess();
          swift_release();
          swift_release();
LABEL_28:
          swift_release();
          return;
        }
        char v28 = Logger.logObject.getter();
        os_log_type_t v29 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v28, v29))
        {
          uint64_t v30 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v30 = 0;
          uint64_t v31 = "Unable to create a new pairing manager to pair AirPods!";
          goto LABEL_17;
        }
      }
    }
    else
    {
      if (qword_101636AC0 != -1) {
        swift_once();
      }
      uint64_t v36 = type metadata accessor for Logger();
      sub_100010324(v36, (uint64_t)qword_10170DE38);
      char v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v28, v29))
      {
        uint64_t v30 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v30 = 0;
        uint64_t v31 = "Internal Settings -> Feature Flags -> FindMy -> baAirpods is disabled.";
        goto LABEL_17;
      }
    }

    goto LABEL_28;
  }
  if (qword_101636AC0 != -1) {
    goto LABEL_30;
  }
LABEL_10:
  uint64_t v32 = type metadata accessor for Logger();
  sub_100010324(v32, (uint64_t)qword_10170DE38);
  uint64_t v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v33, v34))
  {
    uint64_t v35 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v35 = 0;
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "Missing FindMy Pairing Characteristic!", v35, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_1003FC460(char *a1)
{
  uint64_t v2 = type metadata accessor for MACAddress();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_101643CC0);
  __chkstk_darwin(v6 - 8);
  uint64_t v50 = (uint64_t)v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for BluetoothManagerDevice();
  uint64_t v48 = *(void *)(v8 - 8);
  uint64_t v49 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)v41 - v12;
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    unint64_t v45 = v11;
    uint64_t v47 = v5;
    if (qword_101636AC0 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    uint64_t v20 = sub_100010324(v19, (uint64_t)qword_10170DE38);
    sub_100A3C59C(0xD000000000000015, 0x80000001013FBC40);
    id v21 = [*(id *)&a1[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject] identifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    swift_beginAccess();
    sub_1001645A0((uint64_t)v17);
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    swift_endAccess();
    swift_release();
    swift_retain_n();
    uint64_t v46 = v20;
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v43 = v2;
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      unint64_t v44 = v13;
      v41[1] = v25;
      v52[0] = v25;
      *(_DWORD *)uint64_t v24 = 136315138;
      v41[0] = v24 + 4;
      uint64_t v42 = a1;
      type metadata accessor for AirPodsPairingManager();
      sub_100414C30(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
      swift_bridgeObjectRetain();
      uint64_t v26 = Dictionary.description.getter();
      unint64_t v28 = v27;
      a1 = v42;
      swift_bridgeObjectRelease();
      uint64_t v51 = sub_1008FA0F0(v26, v28, v52);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      uint64_t v2 = v43;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "pairingManagers: %s", v24, 0xCu);
      swift_arrayDestroy();
      uint64_t v13 = v44;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    os_log_type_t v29 = v47;
    sub_100A3AC74(v47);
    uint64_t v30 = v50;
    sub_1003FCC18((uint64_t)v29, v50);
    uint64_t v31 = *(void (**)(char *, uint64_t))(v3 + 8);
    v31(v29, v2);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 48))(v30, 1, v49) == 1)
    {
      sub_10001DAB4(v30, &qword_101643CC0);
      uint64_t v32 = Logger.logObject.getter();
      os_log_type_t v33 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v32, v33))
      {
        os_log_type_t v34 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v34 = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "No BT device from BluetoothManager after pairing. Need to unpair", v34, 2u);
        swift_slowDealloc();
      }

      sub_100A3AC74(v29);
      sub_1003EB638(a1, (uint64_t)v29);
      swift_release();
      return ((uint64_t (*)(char *, uint64_t))v31)(v29, v2);
    }
    else
    {
      sub_100418690(v30, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
      uint64_t v35 = (uint64_t)v45;
      sub_100418628((uint64_t)v13, (uint64_t)v45, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
      uint64_t v36 = Logger.logObject.getter();
      os_log_type_t v37 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v36, v37))
      {
        uint64_t v38 = (uint8_t *)swift_slowAlloc();
        v52[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v38 = 136315138;
        uint64_t v39 = sub_1001E0BAC();
        uint64_t v51 = sub_1008FA0F0(v39, v40, v52);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100418B1C(v35, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
        _os_log_impl((void *)&_mh_execute_header, v36, v37, "Found BT device from BluetoothManager after pairing as expected. %s", v38, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        swift_release();
      }
      else
      {

        sub_100418B1C(v35, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
        swift_release();
      }
      return sub_100418B1C((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
    }
  }
  return result;
}

uint64_t sub_1003FCC18@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_1016477E0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v81 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v99 = type metadata accessor for MACAddress();
  uint64_t v7 = *(void *)(v99 - 8);
  __chkstk_darwin(v99);
  id v96 = (char *)&v81 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_101643CC0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v81 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = (int *)type metadata accessor for BluetoothManagerDevice();
  uint64_t v92 = *((void *)v12 - 1);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v81 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v90 = (uint64_t)&v81 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v81 - v19;
  __chkstk_darwin(v18);
  uint64_t v89 = (uint64_t)&v81 - v21;
  id v22 = sub_1003E1B90();
  if (v22
    && (os_log_type_t v23 = v22, v24 = [v22 pairedDevices], v23, v24)
    && (uint64_t v25 = static Array._unconditionallyBridgeFromObjectiveC(_:)(),
        v24,
        unint64_t v26 = (unint64_t)sub_1004C74B4(v25),
        swift_bridgeObjectRelease(),
        v26))
  {
    if (v26 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v27 = result;
    }
    else
    {
      uint64_t v27 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
    }
    uint64_t v83 = a1;
    uint64_t v84 = a2;
    uint64_t v82 = v15;
    if (v27)
    {
      uint64_t v94 = v6;
      if (v27 >= 1)
      {
        uint64_t v29 = v27;
        uint64_t v30 = 0;
        uint64_t v93 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
        int v87 = (void (**)(char *, char *, uint64_t))(v7 + 16);
        int v88 = (void (**)(char *, uint64_t, uint64_t))(v7 + 32);
        id v97 = (void (**)(char *, uint64_t, uint64_t, int *))(v92 + 56);
        unint64_t v98 = v26 & 0xC000000000000001;
        uint64_t v85 = (uint64_t (**)(char *, uint64_t, int *))(v92 + 48);
        uint64_t v86 = (void (**)(char *, uint64_t))(v7 + 8);
        uint64_t v91 = _swiftEmptyArrayStorage;
        uint64_t v95 = (void *)v26;
        while (1)
        {
          id v31 = v98 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v26 + 8 * v30 + 32);
          uint64_t v32 = v31;
          uint64_t v33 = v12[10];
          *(void *)&v20[v33] = 0;
          id v34 = [v31 address];
          if (!v34) {
            break;
          }
          uint64_t v35 = v34;
          static String._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v36 = (uint64_t)v94;
          uint64_t v37 = v99;
          MACAddress.init(string:type:)();
          if ((*v93)(v36, 1, v37) == 1)
          {

            sub_10001DAB4(v36, (uint64_t *)&unk_1016477E0);
            unint64_t v26 = (unint64_t)v95;
            goto LABEL_10;
          }
          uint64_t v38 = v96;
          (*v88)(v96, v36, v37);
          *(void *)&v20[v33] = v32;
          (*v87)(v20, v38, v37);
          id v39 = v32;
          id v40 = [v39 name];
          if (v40)
          {
            BOOL v41 = v40;
            uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v44 = v43;
          }
          else
          {
            uint64_t v42 = 0;
            unint64_t v44 = 0xE000000000000000;
          }
          unint64_t v45 = (uint64_t *)&v20[v12[5]];
          *unint64_t v45 = v42;
          v45[1] = v44;
          *(_DWORD *)&v20[v12[6]] = [v39 vendorId];
          id v46 = [v39 productName];
          if (v46)
          {
            uint64_t v47 = v46;
            uint64_t v48 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v50 = v49;
          }
          else
          {
            uint64_t v48 = 0;
            unint64_t v50 = 0xE000000000000000;
          }
          uint64_t v51 = (uint64_t *)&v20[v12[7]];
          *uint64_t v51 = v48;
          v51[1] = v50;
          *(_DWORD *)&v20[v12[8]] = [v39 productId];
          uint64_t v52 = sub_1002AAF08([v39 vendorId], [v39 productId]);
          uint64_t v54 = v53;

          (*v86)(v96, v99);
          uint64_t v55 = (uint64_t *)&v20[v12[9]];
          *uint64_t v55 = v52;
          v55[1] = v54;
          sub_100418628((uint64_t)v20, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
          (*v97)(v11, 0, 1, v12);
          sub_100418B1C((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
          int v56 = (*v85)(v11, 1, v12);
          unint64_t v26 = (unint64_t)v95;
          if (v56 != 1)
          {
            uint64_t v57 = v89;
            sub_100418690((uint64_t)v11, v89, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
            sub_100418690(v57, v90, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v91 = (void *)sub_100A70460(0, v91[2] + 1, 1, (unint64_t)v91);
            }
            unint64_t v59 = v91[2];
            unint64_t v58 = v91[3];
            if (v59 >= v58 >> 1) {
              uint64_t v91 = (void *)sub_100A70460(v58 > 1, v59 + 1, 1, (unint64_t)v91);
            }
            int v61 = v91;
            uint64_t v60 = v92;
            v91[2] = v59 + 1;
            sub_100418690(v90, (uint64_t)v61+ ((*(unsigned __int8 *)(v60 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v60 + 80))+ *(void *)(v60 + 72) * v59, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
            unint64_t v26 = (unint64_t)v95;
            goto LABEL_12;
          }
LABEL_11:
          sub_10001DAB4((uint64_t)v11, &qword_101643CC0);
LABEL_12:
          if (v29 == ++v30) {
            goto LABEL_39;
          }
        }

LABEL_10:
        (*v97)(v11, 1, 1, v12);
        goto LABEL_11;
      }
      __break(1u);
    }
    else
    {
      uint64_t v91 = _swiftEmptyArrayStorage;
LABEL_39:
      swift_bridgeObjectRelease_n();
      if (qword_101636AC0 != -1) {
        swift_once();
      }
      uint64_t v67 = type metadata accessor for Logger();
      sub_100010324(v67, (uint64_t)qword_10170DE38);
      uint64_t v68 = v91;
      swift_bridgeObjectRetain_n();
      char v69 = Logger.logObject.getter();
      os_log_type_t v70 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v69, v70))
      {
        uint64_t v71 = swift_slowAlloc();
        uint64_t v72 = swift_slowAlloc();
        *(_DWORD *)uint64_t v71 = 134218242;
        uint64_t v100 = v68[2];
        uint64_t v101 = v72;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v71 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v73 = Array.description.getter();
        unint64_t v75 = v74;
        swift_bridgeObjectRelease();
        uint64_t v100 = sub_1008FA0F0(v73, v75, &v101);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v69, v70, "All paired devices [%ld]: %s", (uint8_t *)v71, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t v76 = v84;
      uint64_t v77 = (uint64_t)v82;
      uint64_t v78 = v68[2];
      if (v78)
      {
        uint64_t v79 = (uint64_t)v68
            + ((*(unsigned __int8 *)(v92 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v92 + 80));
        uint64_t v80 = *(void *)(v92 + 72);
        swift_bridgeObjectRetain();
        while (1)
        {
          sub_100418628(v79, v77, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
          if (static MACAddress.== infix(_:_:)()) {
            break;
          }
          sub_100418B1C(v77, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
          v79 += v80;
          if (!--v78)
          {
            swift_bridgeObjectRelease();
            goto LABEL_49;
          }
        }
        swift_bridgeObjectRelease();
        sub_100418690(v77, v76, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
        (*(void (**)(uint64_t, void, uint64_t, int *))(v92 + 56))(v76, 0, 1, v12);
      }
      else
      {
LABEL_49:
        (*(void (**)(uint64_t, uint64_t, uint64_t, int *))(v92 + 56))(v76, 1, 1, v12);
      }
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    if (qword_101636AC0 != -1) {
      swift_once();
    }
    uint64_t v62 = type metadata accessor for Logger();
    sub_100010324(v62, (uint64_t)qword_10170DE38);
    uint64_t v63 = Logger.logObject.getter();
    os_log_type_t v64 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v63, v64))
    {
      id v65 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v65 = 0;
      _os_log_impl((void *)&_mh_execute_header, v63, v64, "Unable to retrieve BT paired devices!", v65, 2u);
      swift_slowDealloc();
    }

    uint64_t v66 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v92 + 56);
    return v66(a2, 1, 1, v12);
  }
  return result;
}

uint64_t sub_1003FD6EC(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  v2[5] = sub_10000588C(&qword_10163BB20);
  v2[6] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for OwnedBeaconGroup(0);
  v2[7] = v3;
  v2[8] = *(void *)(v3 - 8);
  v2[9] = swift_task_alloc();
  return _swift_task_switch(sub_1003FD7E0, 0, 0);
}

uint64_t sub_1003FD7E0()
{
  uint64_t v1 = *(void *)(v0[4] + 16);
  v0[10] = v1;
  uint64_t v5 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_101643CE0 + dword_101643CE0);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[11] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1003FD89C;
  uint64_t v3 = v0[3];
  return v5(v3, v1);
}

uint64_t sub_1003FD89C(char a1)
{
  *(unsigned char *)(*(void *)v1 + 121) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1003FD99C, 0, 0);
}

uint64_t sub_1003FD99C()
{
  uint64_t v21 = v0;
  if (*(unsigned char *)(v0 + 121) == 1)
  {
    if (qword_101636AC0 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_100010324(v1, (uint64_t)qword_10170DE38);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "isPairingPending: standalone pairing is required.", v4, 2u);
      swift_slowDealloc();
    }

    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v0 + 96) = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_1003FDDB8;
    uint64_t v6 = *(void *)(v0 + 24);
    return sub_1003FF01C(v6);
  }
  else
  {
    sub_100AB24F0();
    QueueSynchronizer.conditionalSync<A>(_:)();
    swift_release();
    if (*(unsigned char *)(v0 + 120) == 1)
    {
      uint64_t v9 = *(void **)(v0 + 24);
      uint64_t v8 = *(void *)(v0 + 32);
      uint64_t v10 = swift_allocObject();
      *(void *)(v0 + 104) = v10;
      *(void *)(v10 + 16) = v8;
      *(void *)(v10 + 24) = v9;
      swift_retain();
      id v11 = v9;
      uint64_t v12 = (void *)swift_task_alloc();
      *(void *)(v0 + 112) = v12;
      void *v12 = v0;
      v12[1] = sub_1003FDEF4;
      uint64_t v14 = *(void *)(v0 + 40);
      uint64_t v13 = *(void *)(v0 + 48);
      return unsafeBlocking<A>(_:)(v13, sub_100414C9C, v10, v14);
    }
    else
    {
      if (qword_101636AC0 != -1) {
        swift_once();
      }
      uint64_t v15 = type metadata accessor for Logger();
      sub_100010324(v15, (uint64_t)qword_10170DE38);
      uint64_t v16 = Logger.logObject.getter();
      os_log_type_t v17 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v16, v17))
      {
        uint64_t v18 = (uint8_t *)swift_slowAlloc();
        uint64_t v20 = swift_slowAlloc();
        *(_DWORD *)uint64_t v18 = 136315138;
        *(void *)(v0 + 16) = sub_1008FA0F0(0xD000000000000016, 0x80000001013FBBE0, &v20);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v16, v17, "%s BeaconStore is not available. Not allowing pairing", v18, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v19 = *(uint64_t (**)(void))(v0 + 8);
      return v19(0);
    }
  }
}

uint64_t sub_1003FDDB8(uint64_t a1)
{
  uint64_t v5 = *v1;
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v3 = *(uint64_t (**)(uint64_t))(v5 + 8);
  return v3(a1);
}

uint64_t sub_1003FDEF4()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_1003FE00C, 0, 0);
}

uint64_t sub_1003FE00C()
{
  uint64_t v1 = v0[6];
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(v0[8] + 48))(v1, 1, v0[7]) == 1)
  {
    sub_10001DAB4(v1, &qword_10163BB20);
    char v2 = 1;
  }
  else
  {
    uint64_t v3 = v0[9];
    sub_100418690(v1, v3, type metadata accessor for OwnedBeaconGroup);
    char v2 = sub_1004CF378() ^ 1;
    sub_100418B1C(v3, type metadata accessor for OwnedBeaconGroup);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4(v2 & 1);
}

uint64_t sub_1003FE110(uint64_t a1, uint64_t a2)
{
  v3[9] = a2;
  v3[10] = v2;
  v3[8] = a1;
  v3[11] = sub_10000588C(&qword_10163BB20);
  v3[12] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for OwnedBeaconGroup(0);
  v3[13] = v4;
  v3[14] = *(void *)(v4 - 8);
  v3[15] = swift_task_alloc();
  v3[16] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for Logger();
  v3[17] = v5;
  v3[18] = *(void *)(v5 - 8);
  v3[19] = swift_task_alloc();
  return _swift_task_switch(sub_1003FE274, 0, 0);
}

uint64_t sub_1003FE274()
{
  uint64_t My = type metadata accessor for Feature.FindMy();
  *(void *)(v0 + 40) = My;
  *(void *)(v0 + 48) = sub_100414C30((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
  uint64_t v2 = sub_10001D958((uint64_t *)(v0 + 16));
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v2, enum case for Feature.FindMy.managedCBPeripheral(_:), My);
  char v3 = isFeatureEnabled(_:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  if ((v3 & 1) == 0)
  {
    if (qword_101637310 != -1) {
      swift_once();
    }
    sub_100010324(*(void *)(v0 + 136), (uint64_t)qword_10170F068);
    unint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Requires standalone pairing [false], feature disabled.", v30, 2u);
      swift_slowDealloc();
    }

    goto LABEL_28;
  }
  uint64_t v4 = self;
  id v5 = [v4 defaultStore];
  if (!v5)
  {
    __break(1u);
    goto LABEL_32;
  }
  uint64_t v13 = v5;
  id v14 = [v5 aa_primaryAppleAccount];

  if (!v14) {
    goto LABEL_7;
  }

  id v5 = [v4 defaultStore];
  if (!v5)
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    return withCheckedContinuation<A>(isolation:function:_:)(v5, v6, v7, v8, v9, v10, v11, v12);
  }
  uint64_t v15 = v5;
  id v16 = [v5 aa_primaryAppleAccount];

  if (!v16 || (id v17 = sub_1004C6CDC(), v16, v17 != (id)2))
  {
    uint64_t v31 = sub_100AB24F0();
    *(void *)(v0 + 160) = v31;
    uint64_t v32 = (void *)swift_task_alloc();
    *(void *)(v0 + 168) = v32;
    void *v32 = v0;
    v32[1] = sub_1003FE7D4;
    unint64_t v9 = 0x80000001013FBC20;
    uint64_t v12 = &type metadata for Bool;
    uint64_t v10 = sub_100414CC8;
    id v5 = (id)(v0 + 200);
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    unint64_t v8 = 0xD000000000000014;
    uint64_t v11 = v31;
    return withCheckedContinuation<A>(isolation:function:_:)(v5, v6, v7, v8, v9, v10, v11, v12);
  }
LABEL_7:
  if (qword_101637310 != -1) {
    swift_once();
  }
  uint64_t v19 = *(void *)(v0 + 144);
  uint64_t v18 = *(void *)(v0 + 152);
  uint64_t v20 = *(void *)(v0 + 136);
  uint64_t v21 = sub_100010324(v20, (uint64_t)qword_10170F068);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v19 + 16))(v18, v21, v20);
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v22, v23)) {
    goto LABEL_27;
  }
  uint64_t v24 = swift_slowAlloc();
  *(_DWORD *)uint64_t v24 = 67109376;
  id v5 = [v4 defaultStore];
  if (!v5) {
    goto LABEL_33;
  }
  uint64_t v25 = v5;
  id v26 = [v5 aa_primaryAppleAccount];

  if (v26)
  {

    int v27 = 1;
  }
  else
  {
    int v27 = 0;
  }
  *(_DWORD *)(v0 + 192) = v27;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *(_WORD *)(v24 + 8) = 1024;
  id v5 = [v4 defaultStore];
  if (!v5) {
    goto LABEL_34;
  }
  uint64_t v33 = v5;
  id v34 = [v5 aa_primaryAppleAccount];

  if (v34)
  {
    id v35 = sub_1004C6CDC();

    BOOL v36 = v35 == (id)2;
  }
  else
  {
    BOOL v36 = 0;
  }
  *(_DWORD *)(v0 + 196) = v36;
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  _os_log_impl((void *)&_mh_execute_header, v22, v23, "Requires standalone pairing [true] isiCloudSignedIn: %{BOOL}d isiCloudAccountStandard %{BOOL}d.", (uint8_t *)v24, 0xEu);
  swift_slowDealloc();
LABEL_27:
  uint64_t v38 = *(void *)(v0 + 144);
  uint64_t v37 = *(void *)(v0 + 152);
  uint64_t v39 = *(void *)(v0 + 136);

  (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v39);
LABEL_28:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  id v40 = *(uint64_t (**)(void))(v0 + 8);
  return v40(v3 & 1);
}

uint64_t sub_1003FE7D4()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_1003FE8D0, 0, 0);
}

uint64_t sub_1003FE8D0()
{
  swift_release();
  if (*(unsigned char *)(v0 + 200) == 1)
  {
    uint64_t v1 = *(void *)(v0 + 72);
    uint64_t v2 = *(void *)(v0 + 80);
    char v3 = *(void **)(v0 + 64);
    uint64_t v4 = (void *)swift_allocObject();
    *(void *)(v0 + 176) = v4;
    v4[2] = v2;
    v4[3] = v3;
    v4[4] = v1;
    swift_retain();
    id v5 = v3;
    swift_retain();
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v0 + 184) = v6;
    *uint64_t v6 = v0;
    v6[1] = sub_1003FEAFC;
    uint64_t v8 = *(void *)(v0 + 88);
    uint64_t v7 = *(void *)(v0 + 96);
    return unsafeBlocking<A>(_:)(v7, sub_100414CE8, v4, v8);
  }
  else
  {
    if (qword_101637310 != -1) {
      swift_once();
    }
    sub_100010324(*(void *)(v0 + 136), (uint64_t)qword_10170F068);
    unint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Requires standalone pairing [true], manatee is not available.", v11, 2u);
      swift_slowDealloc();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v12 = *(uint64_t (**)(uint64_t))(v0 + 8);
    return v12(1);
  }
}

uint64_t sub_1003FEAFC()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_1003FEC14, 0, 0);
}

uint64_t sub_1003FEC14()
{
  uint64_t v21 = v0;
  uint64_t v1 = v0[13];
  uint64_t v2 = v0[12];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0[14] + 48))(v2, 1, v1) == 1)
  {
    sub_10001DAB4(v2, &qword_10163BB20);
LABEL_5:
    if (qword_101637310 != -1) {
      swift_once();
    }
    sub_100010324(v0[17], (uint64_t)qword_10170F068);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Requires standalone pairing [false] group not found, isFindMyNetworkEnabled: true (default).", v6, 2u);
      swift_slowDealloc();
    }

    uint64_t v7 = 0;
    goto LABEL_10;
  }
  uint64_t v3 = v0[16];
  sub_100418690(v2, v3, type metadata accessor for OwnedBeaconGroup);
  if (*(unsigned char *)(v3 + *(int *)(v1 + 32)))
  {
    sub_100418B1C(v0[16], type metadata accessor for OwnedBeaconGroup);
    goto LABEL_5;
  }
  if (qword_101637310 != -1) {
    swift_once();
  }
  uint64_t v10 = v0[16];
  uint64_t v11 = v0[15];
  sub_100010324(v0[17], (uint64_t)qword_10170F068);
  sub_100418628(v10, v11, type metadata accessor for OwnedBeaconGroup);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  BOOL v14 = os_log_type_enabled(v12, v13);
  uint64_t v16 = v0[15];
  uint64_t v15 = v0[16];
  if (v14)
  {
    id v17 = (uint8_t *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)id v17 = 136446210;
    type metadata accessor for UUID();
    sub_100414C30((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[7] = sub_1008FA0F0(v18, v19, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100418B1C(v16, type metadata accessor for OwnedBeaconGroup);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Requires standalone pairing [true] group: %{public}s, isFindMyNetworkEnabled: false.", v17, 0xCu);
    uint64_t v7 = 1;
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    sub_100418B1C(v15, type metadata accessor for OwnedBeaconGroup);
  }
  else
  {

    sub_100418B1C(v16, type metadata accessor for OwnedBeaconGroup);
    sub_100418B1C(v15, type metadata accessor for OwnedBeaconGroup);
    uint64_t v7 = 1;
  }
LABEL_10:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = (uint64_t (*)(uint64_t))v0[1];
  return v8(v7);
}

uint64_t sub_1003FF01C(uint64_t a1)
{
  v2[25] = a1;
  v2[26] = v1;
  uint64_t v3 = type metadata accessor for MACAddress();
  v2[27] = v3;
  v2[28] = *(void *)(v3 - 8);
  v2[29] = swift_task_alloc();
  sub_10000588C(&qword_101643CC8);
  v2[30] = swift_task_alloc();
  type metadata accessor for BluetoothManagerDevice();
  v2[31] = swift_task_alloc();
  v2[32] = swift_task_alloc();
  v2[33] = swift_task_alloc();
  return _swift_task_switch(sub_1003FF154, 0, 0);
}

uint64_t sub_1003FF154()
{
  uint64_t My = type metadata accessor for Feature.FindMy();
  *(void *)(v0 + 40) = My;
  *(void *)(v0 + 48) = sub_100414C30((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
  uint64_t v2 = sub_10001D958((uint64_t *)(v0 + 16));
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v2, enum case for Feature.FindMy.managedCBPeripheral(_:), My);
  char v3 = isFeatureEnabled(_:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  if ((v3 & 1) == 0)
  {
LABEL_10:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    BOOL v14 = *(uint64_t (**)(BOOL))(v0 + 8);
    return v14((v3 & 1) == 0);
  }
  if (qword_101636AC0 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  *(void *)(v0 + 272) = sub_100010324(v4, (uint64_t)qword_10170DE38);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Checking standalone beacons...", v7, 2u);
    swift_slowDealloc();
  }
  uint64_t v8 = *(void **)(v0 + 240);
  uint64_t v9 = *(void *)(v0 + 200);

  sub_1003F77AC(v9, v8);
  uint64_t v10 = sub_10000588C(&qword_101643CD0);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v8, 1, v10) == 1)
  {
    sub_10001DAB4(*(void *)(v0 + 240), &qword_101643CC8);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      os_log_type_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Unable to sanitize MAC address for pairing pending check", v13, 2u);
      swift_slowDealloc();
    }

    goto LABEL_10;
  }
  uint64_t v16 = *(void *)(v0 + 264);
  id v17 = *(id **)(v0 + 240);

  sub_100418690((uint64_t)v17 + *(int *)(v10 + 48), v16, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 96, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 120))
  {
    sub_10001CEB0((long long *)(v0 + 96), v0 + 56);
    sub_10001CD44((void *)(v0 + 56), *(void *)(v0 + 80));
    unint64_t v19 = (uint64_t (*)(void))((char *)&dword_1016391C8 + dword_1016391C8);
    uint64_t v18 = (void *)swift_task_alloc();
    *(void *)(v0 + 280) = v18;
    *uint64_t v18 = v0;
    v18[1] = sub_1003FF584;
    return v19();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1003FF584(uint64_t a1)
{
  *(void *)(*(void *)v1 + 288) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1003FF684, 0, 0);
}

uint64_t sub_1003FF684()
{
  uint64_t v1 = (uint64_t)(v0 + 7);
  if (v0[36])
  {
    uint64_t v2 = v0[33];
    uint64_t v4 = v0[28];
    uint64_t v3 = v0[29];
    uint64_t v5 = v0[27];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v2, v5);
    uint64_t v6 = v0[36];
    return _swift_task_switch(sub_1003FF820, v6, 0);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Missing StandaloneBeaconService!", v9, 2u);
      swift_slowDealloc();
    }
    uint64_t v10 = v0[33];

    sub_100418B1C(v10, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v11 = (uint64_t (*)(void))v0[1];
    return v11(0);
  }
}

uint64_t sub_1003FF820()
{
  sub_100FBE558(v0[29], *(void *)(v0[36] + 128));
  v0[37] = 0;
  uint64_t v2 = v0[28];
  uint64_t v1 = v0[29];
  uint64_t v3 = v0[27];
  v0[38] = dispatch thunk of _AnySequenceBox.__copyToContiguousArray()();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return _swift_task_switch(sub_1003FF908, 0, 0);
}

uint64_t sub_1003FF908()
{
  uint64_t v15 = v0;
  sub_100418628(v0[33], v0[32], (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
  swift_retain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = v0[38];
    uint64_t v4 = v0[32];
    uint64_t v5 = swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 134218242;
    v0[23] = *(void *)(v3 + 16);
    uint64_t v14 = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    *(_WORD *)(v5 + 12) = 2082;
    sub_100414C30((unint64_t *)&qword_101649EE0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
    uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[24] = sub_1008FA0F0(v7, v8, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100418B1C(v4, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Found %ld existing standlone beacons matching %{public}s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v9 = v0[32];
    swift_release();
    sub_100418B1C(v9, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
  }
  swift_release();

  uint64_t v10 = v0[33];
  uint64_t v11 = *(void *)(v0[38] + 16);
  swift_release();
  sub_100418B1C(v10, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v12 = (uint64_t (*)(BOOL))v0[1];
  return v12(v11 == 0);
}

uint64_t sub_1003FFBD4()
{
  id v17 = v0;
  sub_100418628(v0[33], v0[31], (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = v0[37];
    uint64_t v15 = v0[33];
    uint64_t v4 = v0[31];
    uint64_t v5 = swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446466;
    sub_100414C30((unint64_t *)&qword_101649EE0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
    uint64_t v6 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[20] = sub_1008FA0F0(v6, v7, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100418B1C(v4, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
    *(_WORD *)(v5 + 12) = 2082;
    v0[21] = v3;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v8 = String.init<A>(describing:)();
    v0[22] = sub_1008FA0F0(v8, v9, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Failed to retrieve standalone beacons for %{public}s. %{public}s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();

    swift_errorRelease();
    uint64_t v10 = v15;
  }
  else
  {
    uint64_t v11 = v0[33];
    uint64_t v12 = v0[31];

    swift_release();
    swift_errorRelease();
    swift_errorRelease();
    sub_100418B1C(v12, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
    swift_errorRelease();
    uint64_t v10 = v11;
  }
  sub_100418B1C(v10, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v13 = (uint64_t (*)(void))v0[1];
  return v13(0);
}

void sub_1003FFEF8(uint64_t a1)
{
  uint64_t v3 = sub_10000588C(&qword_10163BB20);
  __chkstk_darwin(v3 - 8);
  uint64_t v191 = (uint64_t)&v188 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  uint64_t v213 = *(void *)(v5 - 8);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v203 = (char *)&v188 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v215 = (uint64_t)&v188 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  Class v194 = (char *)&v188 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  int v202 = (char *)&v188 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  os_log_type_t v193 = (char *)&v188 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  id v220 = (char *)&v188 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  *(void *)&long long v217 = (char *)&v188 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  id v216 = (char *)&v188 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v188 - v23;
  uint64_t v25 = __chkstk_darwin(v22);
  int v27 = (char *)&v188 - v26;
  __chkstk_darwin(v25);
  os_log_type_t v29 = (char *)&v188 - v28;
  uint64_t v212 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v204 = *(void *)(v212 - 8);
  uint64_t v30 = __chkstk_darwin(v212);
  uint64_t v192 = (char *)&v188 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v190 = (uint64_t)&v188 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v206 = (uint64_t)&v188 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v211 = (uint64_t)&v188 - v37;
  uint64_t v38 = __chkstk_darwin(v36);
  uint64_t v197 = (uint64_t)&v188 - v39;
  uint64_t v40 = __chkstk_darwin(v38);
  Class v198 = (char *)&v188 - v41;
  __chkstk_darwin(v40);
  unint64_t v43 = (char *)&v188 - v42;
  uint64_t v44 = sub_10000588C(&qword_101643CC8);
  __chkstk_darwin(v44 - 8);
  id v46 = (id *)((char *)&v188 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v47 = type metadata accessor for BluetoothManagerDevice();
  uint64_t v48 = __chkstk_darwin(v47 - 8);
  unint64_t v50 = (char *)&v188 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = __chkstk_darwin(v48);
  uint64_t v189 = (uint64_t)&v188 - v52;
  __chkstk_darwin(v51);
  uint64_t v54 = (char *)&v188 - v53;
  sub_1003F77AC(a1, v46);
  uint64_t v55 = sub_10000588C(&qword_101643CD0);
  if ((*(unsigned int (**)(id *, uint64_t, uint64_t))(*(void *)(v55 - 8) + 48))(v46, 1, v55) == 1)
  {
    sub_10001DAB4((uint64_t)v46, &qword_101643CC8);
    if (qword_101636AC0 != -1) {
      goto LABEL_156;
    }
    goto LABEL_3;
  }

  sub_100418690((uint64_t)v46 + *(int *)(v55 + 48), (uint64_t)v54, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
  uint64_t v60 = *(void *)(v1 + 16);
  uint64_t v188 = v54;
  uint64_t v200 = v60;
  uint64_t v61 = sub_100AE840C((uint64_t)v54);
  uint64_t v62 = v61;
  unint64_t v210 = *(void *)(v61 + 16);
  if (v210 < 2)
  {
    swift_bridgeObjectRelease();
    if (qword_101637310 != -1) {
      swift_once();
    }
    uint64_t v99 = type metadata accessor for Logger();
    sub_100010324(v99, (uint64_t)qword_10170F068);
    uint64_t v100 = (uint64_t)v188;
    sub_100418628((uint64_t)v188, (uint64_t)v50, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
    uint64_t v101 = Logger.logObject.getter();
    os_log_type_t v102 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v101, v102))
    {
      uint64_t v103 = swift_slowAlloc();
      uint64_t v221 = swift_slowAlloc();
      *(_DWORD *)uint64_t v103 = 141558275;
      uint64_t v225 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v103 + 12) = 2081;
      type metadata accessor for MACAddress();
      sub_100414C30((unint64_t *)&qword_101649EE0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
      uint64_t v104 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v225 = sub_1008FA0F0(v104, v105, &v221);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100418B1C((uint64_t)v50, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
      uint64_t v106 = "No more than one beacon group matching %{private,mask.hash}s.";
LABEL_122:
      _os_log_impl((void *)&_mh_execute_header, v101, v102, v106, (uint8_t *)v103, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v165 = v100;
      uint64_t v166 = (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice;
    }
    else
    {

      uint64_t v119 = (uint64_t)v50;
LABEL_124:
      sub_100418B1C(v119, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
      uint64_t v165 = v100;
      uint64_t v166 = (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice;
    }
LABEL_141:
    sub_100418B1C(v165, v166);
    return;
  }
  unint64_t v63 = 0;
  uint64_t v225 = (uint64_t)_swiftEmptyArrayStorage;
  *(void *)&long long v214 = v27 + 2;
  uint64_t v219 = v5;
  Class v201 = v43;
  uint64_t v209 = v61;
  do
  {
    if (v63 >= *(void *)(v62 + 16))
    {
      __break(1u);
      goto LABEL_143;
    }
    uint64_t v64 = *(void *)(v204 + 72);
    unint64_t v208 = (*(unsigned __int8 *)(v204 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v204 + 80);
    uint64_t v218 = v64;
    unint64_t v207 = v62 + v208;
    sub_100418628(v62 + v208 + v64 * v63, (uint64_t)v43, type metadata accessor for OwnedBeaconGroup);
    uint64_t v65 = *(void *)&v43[*(int *)(v212 + 40)];
    uint64_t v66 = *(void *)(v65 + 16);
    if (v43[*(int *)(v212 + 32)] != 1)
    {
      if (v66)
      {
        sub_10000588C(&qword_101643CD8);
        uint64_t v84 = *(void *)(v213 + 72);
        unint64_t v85 = (*(unsigned __int8 *)(v213 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v213 + 80);
        uint64_t v86 = (void *)swift_allocObject();
        size_t v87 = j__malloc_size(v86);
        if (!v84) {
          goto LABEL_144;
        }
        if (v87 - v85 == 0x8000000000000000 && v84 == -1) {
          goto LABEL_152;
        }
        v86[2] = v66;
        v86[3] = 2 * ((uint64_t)(v87 - v85) / v84);
        uint64_t v205 = (char *)sub_100711EFC(&v221, (uint64_t)v86 + v85, v66, v65);
        uint64_t v199 = v222;
        uint64_t v196 = v223;
        uint64_t v195 = v224;
        swift_bridgeObjectRetain_n();
        sub_100132C20();
        if (v205 != (char *)v66) {
          goto LABEL_147;
        }
        swift_bridgeObjectRelease();
        uint64_t v89 = (char *)v86;
      }
      else
      {
        uint64_t v89 = (char *)_swiftEmptyArrayStorage;
      }
      uint64_t v90 = *((void *)v89 + 2);
      uint64_t v62 = v209;
      if (v90)
      {
        uint64_t v91 = v213;
        uint64_t v92 = (uint64_t)&v89[(*(unsigned __int8 *)(v213 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v213 + 80)];
        uint64_t v205 = v89;
        swift_retain();
        uint64_t v93 = *(void *)(v91 + 72);
        while (1)
        {
          sub_100418628(v92, (uint64_t)v29, type metadata accessor for OwnedBeaconGroup.PairingState);
          sub_100418628((uint64_t)v29, (uint64_t)v27, type metadata accessor for OwnedBeaconGroup.PairingState);
          if (swift_getEnumCaseMultiPayload())
          {
            sub_100418B1C((uint64_t)v27, type metadata accessor for OwnedBeaconGroup.PairingState);
            sub_100418B1C((uint64_t)v29, type metadata accessor for OwnedBeaconGroup.PairingState);
          }
          else
          {
            uint64_t v94 = sub_10000588C((uint64_t *)&unk_101647810);
            int v95 = *(unsigned __int8 *)(v214 + *(int *)(v94 + 48));
            sub_10001DAB4((uint64_t)v27, (uint64_t *)&unk_1016477E0);
            sub_100418B1C((uint64_t)v29, type metadata accessor for OwnedBeaconGroup.PairingState);
            if (v95 == 2)
            {
              uint64_t v199 = v63;
              goto LABEL_47;
            }
          }
          v92 += v93;
          if (!--v90)
          {
            swift_release_n();
            goto LABEL_9;
          }
        }
      }
      swift_release();
      goto LABEL_9;
    }
    if (v66)
    {
      sub_10000588C(&qword_101643CD8);
      uint64_t v67 = *(void *)(v213 + 72);
      unint64_t v68 = (*(unsigned __int8 *)(v213 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v213 + 80);
      char v69 = (void *)swift_allocObject();
      size_t v70 = j__malloc_size(v69);
      if (!v67) {
        goto LABEL_145;
      }
      if (v70 - v68 == 0x8000000000000000 && v67 == -1) {
        goto LABEL_153;
      }
      v69[2] = v66;
      v69[3] = 2 * ((uint64_t)(v70 - v68) / v67);
      uint64_t v205 = (char *)sub_100711EFC(&v221, (uint64_t)v69 + v68, v66, v65);
      uint64_t v199 = v222;
      uint64_t v196 = v223;
      uint64_t v195 = v224;
      swift_bridgeObjectRetain_n();
      sub_100132C20();
      if (v205 != (char *)v66) {
        goto LABEL_146;
      }
      swift_bridgeObjectRelease();
      uint64_t v72 = (char *)v69;
      uint64_t v73 = v69[2];
      if (v73) {
        goto LABEL_21;
      }
LABEL_35:
      swift_release();
      uint64_t v62 = v209;
LABEL_9:
      unint64_t v43 = v201;
      sub_100418B1C((uint64_t)v201, type metadata accessor for OwnedBeaconGroup);
      goto LABEL_10;
    }
    uint64_t v72 = (char *)_swiftEmptyArrayStorage;
    uint64_t v73 = _swiftEmptyArrayStorage[2];
    if (!v73) {
      goto LABEL_35;
    }
LABEL_21:
    uint64_t v199 = v63;
    uint64_t v74 = v213;
    uint64_t v75 = (uint64_t)&v72[(*(unsigned __int8 *)(v213 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v213 + 80)];
    uint64_t v205 = v72;
    swift_retain();
    uint64_t v76 = *(void *)(v74 + 72);
    while (1)
    {
      sub_100418628(v75, (uint64_t)v24, type metadata accessor for OwnedBeaconGroup.PairingState);
      uint64_t v77 = (uint64_t)v24;
      uint64_t v78 = (uint64_t)v24;
      uint64_t v79 = (uint64_t)v216;
      sub_100418628(v77, (uint64_t)v216, type metadata accessor for OwnedBeaconGroup.PairingState);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      sub_100418B1C(v79, type metadata accessor for OwnedBeaconGroup.PairingState);
      uint64_t v81 = v217;
      sub_100418628(v78, v217, type metadata accessor for OwnedBeaconGroup.PairingState);
      if (!EnumCaseMultiPayload)
      {
        sub_100418B1C(v81, type metadata accessor for OwnedBeaconGroup.PairingState);
        sub_100418B1C(v78, type metadata accessor for OwnedBeaconGroup.PairingState);
        uint64_t v62 = v209;
        uint64_t v24 = (char *)v78;
        goto LABEL_47;
      }
      unint64_t v82 = (unint64_t)v220;
      swift_storeEnumTagMultiPayload();
      char v83 = sub_1004DBD54(v81, v82);
      sub_100418B1C(v82, type metadata accessor for OwnedBeaconGroup.PairingState);
      sub_100418B1C(v81, type metadata accessor for OwnedBeaconGroup.PairingState);
      sub_100418B1C(v78, type metadata accessor for OwnedBeaconGroup.PairingState);
      uint64_t v24 = (char *)v78;
      if (v83) {
        break;
      }
      v75 += v76;
      if (!--v73)
      {
        swift_release_n();
        uint64_t v62 = v209;
        unint64_t v63 = v199;
        goto LABEL_9;
      }
    }
    uint64_t v62 = v209;
LABEL_47:
    swift_release_n();
    unint64_t v43 = v201;
    sub_100418690((uint64_t)v201, v197, type metadata accessor for OwnedBeaconGroup);
    uint64_t v96 = v225;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_1000B7A9C(0, *(void *)(v96 + 16) + 1, 1);
      uint64_t v96 = v225;
    }
    unint64_t v98 = *(void *)(v96 + 16);
    unint64_t v97 = *(void *)(v96 + 24);
    if (v98 >= v97 >> 1)
    {
      sub_1000B7A9C(v97 > 1, v98 + 1, 1);
      uint64_t v96 = v225;
    }
    *(void *)(v96 + 16) = v98 + 1;
    sub_100418690(v197, v96 + v208 + v98 * v218, type metadata accessor for OwnedBeaconGroup);
    unint64_t v63 = v199;
LABEL_10:
    ++v63;
  }
  while (v63 != v210);
  uint64_t v107 = *(void *)(v225 + 16);
  if (v107)
  {
    uint64_t v108 = v225 + v208;
    uint64_t v109 = qword_101637310;
    Class v201 = (char *)v225;
    swift_retain();
    uint64_t v110 = (uint64_t)v203;
    if (v109 != -1) {
      swift_once();
    }
    uint64_t v111 = type metadata accessor for Logger();
    id v216 = &v226;
    *(void *)&long long v112 = 136315138;
    long long v214 = v112;
    uint64_t v205 = (char *)&type metadata for Any + 8;
    uint64_t v113 = (uint64_t)v198;
    *(void *)&long long v217 = v111;
    do
    {
      sub_100010324(v111, (uint64_t)qword_10170F068);
      sub_100418628(v108, v113, type metadata accessor for OwnedBeaconGroup);
      BOOL v114 = Logger.logObject.getter();
      os_log_type_t v115 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v114, v115))
      {
        id v116 = (uint8_t *)swift_slowAlloc();
        uint64_t v221 = swift_slowAlloc();
        *(_DWORD *)id v116 = v214;
        uint64_t v117 = sub_1004D6904();
        uint64_t v225 = sub_1008FA0F0(v117, v118, &v221);
        uint64_t v113 = (uint64_t)v198;
        uint64_t v110 = (uint64_t)v203;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100418B1C(v113, type metadata accessor for OwnedBeaconGroup);
        _os_log_impl((void *)&_mh_execute_header, v114, v115, "Clean up incomplete beacon group %s", v116, 0xCu);
        swift_arrayDestroy();
        uint64_t v111 = v217;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_100418B1C(v113, type metadata accessor for OwnedBeaconGroup);
      }

      sub_100BF7464(v108);
      v108 += v218;
      --v107;
    }
    while (v107);
    swift_release_n();
    uint64_t v62 = v209;
  }
  else
  {
    swift_release();
    uint64_t v110 = (uint64_t)v203;
  }
  unint64_t v120 = 0;
  uint64_t v225 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v121 = (uint64_t)v202;
  *(void *)&long long v217 = v202 + 2;
  while (v120 < *(void *)(v62 + 16))
  {
    id v216 = (char *)v120;
    uint64_t v123 = v207 + v218 * v120;
    uint64_t v124 = v211;
    sub_100418628(v123, v211, type metadata accessor for OwnedBeaconGroup);
    uint64_t v125 = *(void *)(v124 + *(int *)(v212 + 40));
    uint64_t v126 = *(void *)(v125 + 16);
    if (*(unsigned char *)(v124 + *(int *)(v212 + 32)) == 1)
    {
      if (v126)
      {
        sub_10000588C(&qword_101643CD8);
        uint64_t v127 = *(void *)(v213 + 72);
        unint64_t v128 = (*(unsigned __int8 *)(v213 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v213 + 80);
        uint64_t v129 = (void *)swift_allocObject();
        size_t v130 = j__malloc_size(v129);
        if (!v127) {
          goto LABEL_149;
        }
        if (v130 - v128 == 0x8000000000000000 && v127 == -1) {
          goto LABEL_155;
        }
        v129[2] = v126;
        v129[3] = 2 * ((uint64_t)(v130 - v128) / v127);
        uint64_t v132 = sub_100711EFC(&v221, (uint64_t)v129 + v128, v126, v125);
        swift_bridgeObjectRetain_n();
        sub_100132C20();
        if (v132 != v126) {
          goto LABEL_150;
        }
        swift_bridgeObjectRelease();
        uint64_t v110 = (uint64_t)v203;
        uint64_t v121 = (uint64_t)v202;
      }
      else
      {
        uint64_t v129 = _swiftEmptyArrayStorage;
      }
      uint64_t v139 = v129[2];
      uint64_t v140 = (uint64_t)v194;
      if (v139)
      {
        uint64_t v141 = v213;
        uint64_t v142 = (uint64_t)v129
             + ((*(unsigned __int8 *)(v213 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v213 + 80));
        swift_retain();
        uint64_t v143 = *(void *)(v141 + 72);
        while (1)
        {
          sub_100418628(v142, v140, type metadata accessor for OwnedBeaconGroup.PairingState);
          uint64_t v144 = v215;
          sub_100418628(v140, v215, type metadata accessor for OwnedBeaconGroup.PairingState);
          int v145 = swift_getEnumCaseMultiPayload();
          sub_100418B1C(v144, type metadata accessor for OwnedBeaconGroup.PairingState);
          sub_100418628(v140, v110, type metadata accessor for OwnedBeaconGroup.PairingState);
          if (!v145) {
            break;
          }
          unint64_t v146 = (unint64_t)v220;
          swift_storeEnumTagMultiPayload();
          char v147 = sub_1004DBD54(v110, v146);
          sub_100418B1C(v146, type metadata accessor for OwnedBeaconGroup.PairingState);
          sub_100418B1C(v110, type metadata accessor for OwnedBeaconGroup.PairingState);
          sub_100418B1C(v140, type metadata accessor for OwnedBeaconGroup.PairingState);
          if (v147)
          {
            uint64_t v121 = (uint64_t)v202;
            goto LABEL_69;
          }
          v142 += v143;
          if (!--v139)
          {
            swift_release_n();
            uint64_t v121 = (uint64_t)v202;
            goto LABEL_107;
          }
        }
        sub_100418B1C(v110, type metadata accessor for OwnedBeaconGroup.PairingState);
        sub_100418B1C(v140, type metadata accessor for OwnedBeaconGroup.PairingState);
        uint64_t v121 = (uint64_t)v202;
LABEL_69:
        uint64_t v62 = v209;
        goto LABEL_70;
      }
      swift_release();
LABEL_107:
      uint64_t v62 = v209;
    }
    else
    {
      if (v126)
      {
        sub_10000588C(&qword_101643CD8);
        uint64_t v133 = *(void *)(v213 + 72);
        unint64_t v134 = (*(unsigned __int8 *)(v213 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v213 + 80);
        uint64_t v135 = (void *)swift_allocObject();
        size_t v136 = j__malloc_size(v135);
        if (!v133) {
          goto LABEL_148;
        }
        if (v136 - v134 == 0x8000000000000000 && v133 == -1) {
          goto LABEL_154;
        }
        v135[2] = v126;
        v135[3] = 2 * ((uint64_t)(v136 - v134) / v133);
        uint64_t v138 = sub_100711EFC(&v221, (uint64_t)v135 + v134, v126, v125);
        swift_bridgeObjectRetain_n();
        sub_100132C20();
        if (v138 != v126) {
          goto LABEL_151;
        }
        swift_bridgeObjectRelease();
        uint64_t v110 = (uint64_t)v203;
        uint64_t v121 = (uint64_t)v202;
      }
      else
      {
        uint64_t v135 = _swiftEmptyArrayStorage;
      }
      uint64_t v148 = v135[2];
      uint64_t v149 = (uint64_t)v193;
      uint64_t v62 = v209;
      if (v148)
      {
        uint64_t v150 = v213;
        uint64_t v151 = (uint64_t)v135
             + ((*(unsigned __int8 *)(v213 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v213 + 80));
        swift_retain();
        uint64_t v152 = *(void *)(v150 + 72);
        do
        {
          sub_100418628(v151, v149, type metadata accessor for OwnedBeaconGroup.PairingState);
          sub_100418628(v149, v121, type metadata accessor for OwnedBeaconGroup.PairingState);
          if (swift_getEnumCaseMultiPayload())
          {
            sub_100418B1C(v121, type metadata accessor for OwnedBeaconGroup.PairingState);
            sub_100418B1C(v149, type metadata accessor for OwnedBeaconGroup.PairingState);
          }
          else
          {
            uint64_t v153 = sub_10000588C((uint64_t *)&unk_101647810);
            int v154 = *(unsigned __int8 *)(v217 + *(int *)(v153 + 48));
            sub_10001DAB4(v121, (uint64_t *)&unk_1016477E0);
            sub_100418B1C(v149, type metadata accessor for OwnedBeaconGroup.PairingState);
            if (v154 == 2)
            {
LABEL_70:
              uint64_t v122 = (uint64_t)v216;
              swift_release_n();
              sub_100418B1C(v211, type metadata accessor for OwnedBeaconGroup);
              goto LABEL_71;
            }
          }
          v151 += v152;
          --v148;
        }
        while (v148);
        swift_release_n();
      }
      else
      {
        swift_release();
      }
    }
    sub_100418690(v211, v206, type metadata accessor for OwnedBeaconGroup);
    uint64_t v155 = v225;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_1000B7A9C(0, *(void *)(v155 + 16) + 1, 1);
      uint64_t v155 = v225;
    }
    unint64_t v157 = *(void *)(v155 + 16);
    unint64_t v156 = *(void *)(v155 + 24);
    if (v157 >= v156 >> 1)
    {
      sub_1000B7A9C(v156 > 1, v157 + 1, 1);
      uint64_t v155 = v225;
    }
    *(void *)(v155 + 16) = v157 + 1;
    sub_100418690(v206, v155 + v208 + v157 * v218, type metadata accessor for OwnedBeaconGroup);
    uint64_t v122 = (uint64_t)v216;
LABEL_71:
    unint64_t v120 = v122 + 1;
    if (v120 == v210)
    {
      swift_bridgeObjectRelease();
      uint64_t v158 = v225;
      if (*(void *)(v225 + 16) > 1uLL)
      {
        uint64_t v221 = v225;
        swift_bridgeObjectRetain();
        sub_10040D598(&v221, type metadata accessor for OwnedBeaconGroup, (uint64_t (*)(uint64_t))sub_100B736C4, (uint64_t (*)(void *))sub_10040D65C);
        if (*(void *)(v221 + 16))
        {
          uint64_t v159 = v191;
          sub_100418628(v221 + v208, v191, type metadata accessor for OwnedBeaconGroup);
          uint64_t v160 = 0;
        }
        else
        {
          uint64_t v160 = 1;
          uint64_t v159 = v191;
        }
        uint64_t v167 = v204;
        uint64_t v168 = v212;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v204 + 56))(v159, v160, 1, v212);
        swift_release();
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v167 + 48))(v159, 1, v168) == 1)
        {
          swift_release();
          sub_10001DAB4(v159, &qword_10163BB20);
          uint64_t v169 = (uint64_t)v188;
          if (qword_101637310 != -1) {
            swift_once();
          }
          uint64_t v170 = type metadata accessor for Logger();
          sub_100010324(v170, (uint64_t)qword_10170F068);
          uint64_t v171 = Logger.logObject.getter();
          os_log_type_t v172 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v171, v172))
          {
            uint64_t v173 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v173 = 0;
            _os_log_impl((void *)&_mh_execute_header, v171, v172, "Unable to extract the most recent beacon group!", v173, 2u);
            uint64_t v169 = (uint64_t)v188;
            swift_slowDealloc();
          }

          uint64_t v166 = (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice;
          uint64_t v165 = v169;
        }
        else
        {
          uint64_t v174 = v159;
          uint64_t v175 = v190;
          uint64_t v176 = sub_100418690(v174, v190, type metadata accessor for OwnedBeaconGroup);
          __chkstk_darwin(v176);
          *(&v188 - 2) = (char *)v175;
          uint64_t v177 = sub_1000A46EC((uint64_t (*)(char *))sub_100414C78, &v188 - 4, v158);
          uint64_t v178 = *(void *)(v177 + 16);
          if (v178)
          {
            uint64_t v215 = v177;
            uint64_t v179 = v177 + v208;
            if (qword_101637310 != -1) {
              swift_once();
            }
            uint64_t v180 = type metadata accessor for Logger();
            id v220 = &v226;
            *(void *)&long long v181 = 136315138;
            long long v217 = v181;
            id v216 = (char *)&type metadata for Any + 8;
            uint64_t v182 = (uint64_t)v192;
            uint64_t v219 = v180;
            do
            {
              sub_100010324(v180, (uint64_t)qword_10170F068);
              sub_100418628(v179, v182, type metadata accessor for OwnedBeaconGroup);
              uint64_t v183 = Logger.logObject.getter();
              os_log_type_t v184 = static os_log_type_t.default.getter();
              if (os_log_type_enabled(v183, v184))
              {
                uint64_t v185 = (uint8_t *)swift_slowAlloc();
                uint64_t v221 = swift_slowAlloc();
                *(_DWORD *)uint64_t v185 = v217;
                uint64_t v186 = sub_1004D6904();
                uint64_t v225 = sub_1008FA0F0(v186, v187, &v221);
                uint64_t v180 = v219;
                uint64_t v182 = (uint64_t)v192;
                UnsafeMutableRawBufferPointer.copyMemory(from:)();
                swift_bridgeObjectRelease();
                sub_100418B1C(v182, type metadata accessor for OwnedBeaconGroup);
                _os_log_impl((void *)&_mh_execute_header, v183, v184, "Clean up older complete beacon group %s", v185, 0xCu);
                swift_arrayDestroy();
                swift_slowDealloc();
                swift_slowDealloc();
              }
              else
              {
                sub_100418B1C(v182, type metadata accessor for OwnedBeaconGroup);
              }

              sub_100BF7464(v179);
              v179 += v218;
              --v178;
            }
            while (v178);
          }
          swift_bridgeObjectRelease();
          sub_100418B1C((uint64_t)v188, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
          uint64_t v166 = type metadata accessor for OwnedBeaconGroup;
          uint64_t v165 = v190;
        }
        goto LABEL_141;
      }
      swift_release();
      if (qword_101637310 != -1) {
        swift_once();
      }
      uint64_t v161 = type metadata accessor for Logger();
      sub_100010324(v161, (uint64_t)qword_10170F068);
      uint64_t v100 = (uint64_t)v188;
      uint64_t v162 = v189;
      sub_100418628((uint64_t)v188, v189, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
      uint64_t v101 = Logger.logObject.getter();
      os_log_type_t v102 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v101, v102))
      {
        uint64_t v103 = swift_slowAlloc();
        uint64_t v221 = swift_slowAlloc();
        *(_DWORD *)uint64_t v103 = 141558275;
        uint64_t v225 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v103 + 12) = 2081;
        type metadata accessor for MACAddress();
        sub_100414C30((unint64_t *)&qword_101649EE0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
        uint64_t v163 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v225 = sub_1008FA0F0(v163, v164, &v221);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100418B1C(v162, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
        uint64_t v106 = "No more than one complete beacon group matching %{private,mask.hash}s.";
        goto LABEL_122;
      }

      uint64_t v119 = v162;
      goto LABEL_124;
    }
  }
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  __break(1u);
LABEL_151:
  __break(1u);
LABEL_152:
  __break(1u);
LABEL_153:
  __break(1u);
LABEL_154:
  __break(1u);
LABEL_155:
  __break(1u);
LABEL_156:
  swift_once();
LABEL_3:
  uint64_t v56 = type metadata accessor for Logger();
  sub_100010324(v56, (uint64_t)qword_10170DE38);
  uint64_t v57 = Logger.logObject.getter();
  os_log_type_t v58 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v57, v58))
  {
    unint64_t v59 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v59 = 0;
    _os_log_impl((void *)&_mh_execute_header, v57, v58, "Unable to sanitize MAC address for beacon group cleanup", v59, 2u);
    swift_slowDealloc();
  }
}

BOOL sub_100401D24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)v15 - v9;
  uint64_t v11 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v12(v10, a1 + *(int *)(v11 + 24), v4);
  v12(v8, a2 + *(int *)(v11 + 24), v4);
  sub_100414C30((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
  LOBYTE(a2) = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v8, v4);
  v13(v10, v4);
  return (a2 & 1) == 0;
}

uint64_t sub_100401ED8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v113 = a1;
  uint64_t v112 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v112 - 8);
  uint64_t v5 = __chkstk_darwin(v112);
  uint64_t v111 = (char *)&v100 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v110 = (char *)&v100 - v7;
  uint64_t v8 = sub_10000588C((uint64_t *)&unk_1016477E0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v100 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for MACAddress();
  uint64_t v122 = *(char **)(v11 - 8);
  __chkstk_darwin(v11);
  unint64_t v120 = (char *)&v100 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000588C(&qword_101643CC0);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v100 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for BluetoothManagerDevice();
  uint64_t v115 = *(void *)(v16 - 8);
  uint64_t v17 = __chkstk_darwin(v16);
  id v116 = (char *)&v100 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v109 = (uint64_t)&v100 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v100 - v22;
  __chkstk_darwin(v21);
  uint64_t v108 = (uint64_t)&v100 - v24;
  id v25 = sub_1003E1B90();
  if (v25
    && (uint64_t v26 = v25, v27 = [v25 pairedDevices], v26, v27)
    && (uint64_t v28 = static Array._unconditionallyBridgeFromObjectiveC(_:)(),
        v27,
        unint64_t v29 = (unint64_t)sub_1004C74B4(v28),
        swift_bridgeObjectRelease(),
        v29))
  {
    unint64_t v118 = v29;
    if (v29 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v30 = result;
    }
    else
    {
      uint64_t v30 = *(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
    }
    uint64_t v103 = a2;
    uint64_t v102 = v2;
    uint64_t v101 = v4;
    if (v30)
    {
      uint64_t v121 = v11;
      if (v30 >= 1)
      {
        uint64_t v32 = v30;
        uint64_t v33 = 0;
        unint64_t v34 = v118;
        uint64_t v123 = v118 & 0xC000000000000001;
        uint64_t v117 = (unsigned int (**)(char *, uint64_t, uint64_t))(v122 + 48);
        uint64_t v106 = (void (**)(char *, char *, uint64_t))(v122 + 16);
        uint64_t v107 = (void (**)(char *, char *, uint64_t))(v122 + 32);
        unint64_t v105 = (void (**)(char *, uint64_t))(v122 + 8);
        uint64_t v122 = (char *)(v115 + 56);
        uint64_t v104 = (uint64_t (**)(char *, uint64_t, int *))(v115 + 48);
        BOOL v114 = _swiftEmptyArrayStorage;
        uint64_t v119 = v30;
        while (1)
        {
          id v35 = v123 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v34 + 8 * v33 + 32);
          uint64_t v36 = v35;
          uint64_t v37 = *(int *)(v16 + 40);
          *(void *)&v23[v37] = 0;
          id v38 = [v35 address];
          if (!v38) {
            break;
          }
          uint64_t v39 = v38;
          uint64_t v40 = (int *)v16;
          static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v41 = v10;

          MACAddress.init(string:type:)();
          uint64_t v42 = v121;
          if ((*v117)(v10, 1, v121) == 1)
          {

            sub_10001DAB4((uint64_t)v10, (uint64_t *)&unk_1016477E0);
            uint64_t v16 = (uint64_t)v40;
            unint64_t v34 = v118;
            uint64_t v32 = v119;
            goto LABEL_10;
          }
          unint64_t v43 = v120;
          (*v107)(v120, v10, v42);
          *(void *)&v23[v37] = v36;
          (*v106)(v23, v43, v42);
          id v44 = v36;
          id v45 = [v44 name];
          if (v45)
          {
            id v46 = v45;
            uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v49 = v48;
          }
          else
          {
            uint64_t v47 = 0;
            unint64_t v49 = 0xE000000000000000;
          }
          unint64_t v50 = (uint64_t *)&v23[v40[5]];
          *unint64_t v50 = v47;
          v50[1] = v49;
          *(_DWORD *)&v23[v40[6]] = [v44 vendorId];
          id v51 = [v44 productName];
          if (v51)
          {
            uint64_t v52 = v51;
            uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v55 = v54;
          }
          else
          {
            uint64_t v53 = 0;
            unint64_t v55 = 0xE000000000000000;
          }
          uint64_t v56 = (uint64_t *)&v23[v40[7]];
          *uint64_t v56 = v53;
          v56[1] = v55;
          *(_DWORD *)&v23[v40[8]] = [v44 productId];
          uint64_t v57 = sub_1002AAF08([v44 vendorId], [v44 productId]);
          uint64_t v59 = v58;

          (*v105)(v120, v121);
          uint64_t v60 = (uint64_t *)&v23[v40[9]];
          *uint64_t v60 = v57;
          v60[1] = v59;
          sub_100418628((uint64_t)v23, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
          (*(void (**)(char *, void, uint64_t, int *))v122)(v15, 0, 1, v40);
          sub_100418B1C((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
          int v61 = (*v104)(v15, 1, v40);
          uint64_t v10 = v41;
          uint64_t v16 = (uint64_t)v40;
          unint64_t v34 = v118;
          uint64_t v32 = v119;
          if (v61 != 1)
          {
            uint64_t v62 = v108;
            sub_100418690((uint64_t)v15, v108, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
            sub_100418690(v62, v109, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
            if (swift_isUniquelyReferenced_nonNull_native()) {
              unint64_t v63 = (unint64_t)v114;
            }
            else {
              unint64_t v63 = sub_100A70460(0, v114[2] + 1, 1, (unint64_t)v114);
            }
            unint64_t v65 = *(void *)(v63 + 16);
            unint64_t v64 = *(void *)(v63 + 24);
            uint64_t v32 = v119;
            if (v65 >= v64 >> 1) {
              unint64_t v63 = sub_100A70460(v64 > 1, v65 + 1, 1, v63);
            }
            *(void *)(v63 + 16) = v65 + 1;
            unint64_t v66 = (*(unsigned __int8 *)(v115 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v115 + 80);
            BOOL v114 = (void *)v63;
            sub_100418690(v109, v63 + v66 + *(void *)(v115 + 72) * v65, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
            goto LABEL_12;
          }
LABEL_11:
          sub_10001DAB4((uint64_t)v15, &qword_101643CC0);
LABEL_12:
          if (v32 == ++v33) {
            goto LABEL_40;
          }
        }

LABEL_10:
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))v122)(v15, 1, 1, v16);
        goto LABEL_11;
      }
      __break(1u);
    }
    else
    {
      BOOL v114 = _swiftEmptyArrayStorage;
LABEL_40:
      swift_bridgeObjectRelease_n();
      if (qword_101636AC0 != -1) {
        swift_once();
      }
      uint64_t v72 = type metadata accessor for Logger();
      sub_100010324(v72, (uint64_t)qword_10170DE38);
      uint64_t v73 = v114;
      swift_bridgeObjectRetain_n();
      uint64_t v74 = Logger.logObject.getter();
      os_log_type_t v75 = static os_log_type_t.default.getter();
      BOOL v76 = os_log_type_enabled(v74, v75);
      uint64_t v77 = (uint64_t)v116;
      if (v76)
      {
        uint64_t v78 = swift_slowAlloc();
        uint64_t v123 = swift_slowAlloc();
        uint64_t v125 = (char *)v123;
        *(_DWORD *)uint64_t v78 = 134218242;
        uint64_t v124 = v73[2];
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v78 + 12) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v79 = Array.description.getter();
        unint64_t v81 = v80;
        swift_bridgeObjectRelease();
        uint64_t v124 = sub_1008FA0F0(v79, v81, (uint64_t *)&v125);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v74, v75, "All paired devices [%ld]: %s", (uint8_t *)v78, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      uint64_t v82 = v103;
      uint64_t v83 = v73[2];
      if (v83)
      {
        uint64_t v84 = (uint64_t)v73
            + ((*(unsigned __int8 *)(v115 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v115 + 80));
        uint64_t v85 = *(void *)(v102 + 32);
        uint64_t v122 = (char *)OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject;
        uint64_t v123 = v85;
        uint64_t v86 = (void (**)(char *, uint64_t))(v101 + 8);
        uint64_t v87 = *(void *)(v115 + 72);
        swift_bridgeObjectRetain();
        do
        {
          uint64_t v88 = sub_100418628(v84, v77, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
          __chkstk_darwin(v88);
          *(&v100 - 2) = v77;
          *(&v100 - 1) = v89;
          sub_10000588C(&qword_10165F6B0);
          Lock.callAsFunction<A>(_:)();
          uint64_t v90 = v125;
          if (v125)
          {
            id v91 = [*(id *)&v125[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject] identifier];
            uint64_t v92 = v110;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)();

            id v93 = [*(id *)&v122[v113] identifier];
            uint64_t v94 = v111;
            static UUID._unconditionallyBridgeFromObjectiveC(_:)();

            LOBYTE(v93) = static UUID.== infix(_:_:)();
            int v95 = *v86;
            uint64_t v96 = v94;
            uint64_t v97 = v112;
            (*v86)(v96, v112);
            unint64_t v98 = v92;
            uint64_t v77 = (uint64_t)v116;
            v95(v98, v97);
            if (v93)
            {
              swift_bridgeObjectRelease();
              uint64_t v99 = v103;
              sub_100418690(v77, v103, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v115 + 56))(v99, 0, 1, v16);
              return swift_bridgeObjectRelease();
            }
          }
          sub_100418B1C(v77, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
          v84 += v87;
          --v83;
        }
        while (v83);
        swift_bridgeObjectRelease();
        uint64_t v82 = v103;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v115 + 56))(v82, 1, 1, v16);
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    if (qword_101636AC0 != -1) {
      swift_once();
    }
    uint64_t v67 = type metadata accessor for Logger();
    sub_100010324(v67, (uint64_t)qword_10170DE38);
    unint64_t v68 = Logger.logObject.getter();
    os_log_type_t v69 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v68, v69))
    {
      size_t v70 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)size_t v70 = 0;
      _os_log_impl((void *)&_mh_execute_header, v68, v69, "Unable to retrieve BT paired devices!", v70, 2u);
      swift_slowDealloc();
    }

    uint64_t v71 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v115 + 56);
    return v71(a2, 1, 1, v16);
  }
  return result;
}

id *sub_100402C30()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  sub_100419ABC(v0[16]);
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_100402CE0()
{
  sub_100402C30();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ClassicPairingSupport()
{
  return self;
}

unsigned char *storeEnumTagSinglePayload for ClassicPairingSupport.Error(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100402E04);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ClassicPairingSupport.Error()
{
  return &type metadata for ClassicPairingSupport.Error;
}

unint64_t sub_100402E40()
{
  unint64_t result = qword_101643CA8;
  if (!qword_101643CA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101643CA8);
  }
  return result;
}

uint64_t sub_100402E94@<X0>(uint64_t a1@<X8>)
{
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  v11[0] = 0xD000000000000010;
  v11[1] = 0x80000001013FBB50;
  v2._countAndFlagsBits = UUID.uuidString.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  id v3 = [self standardUserDefaults];
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v5 = [v3 valueForKey:v4];

  if (v5)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v10, 0, sizeof(v10));
  }
  sub_10001D608((uint64_t)v10, (uint64_t)v11, (uint64_t *)&unk_101644360);
  if (v11[3])
  {
    uint64_t v6 = type metadata accessor for Date();
    int v7 = swift_dynamicCast();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(a1, v7 ^ 1u, 1, v6);
  }
  else
  {
    sub_10001DAB4((uint64_t)v11, (uint64_t *)&unk_101644360);
    uint64_t v9 = type metadata accessor for Date();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(a1, 1, 1, v9);
  }
}

uint64_t sub_100403078(void *a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(void))
{
  id v5 = v4;
  uint64_t v137 = a3;
  uint64_t v138 = a4;
  uint64_t v141 = a2;
  uint64_t v121 = *v5;
  uint64_t v120 = type metadata accessor for BeaconIdentifier();
  __chkstk_darwin(v120);
  uint64_t v124 = (char *)v118 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v8 - 8);
  uint64_t v123 = (uint64_t)v118 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C(&qword_10163F7B0);
  uint64_t v133 = *(void *)(v10 - 8);
  uint64_t v134 = v10;
  __chkstk_darwin(v10);
  uint64_t v122 = (uint64_t)v118 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v131 = sub_10000588C((uint64_t *)&unk_101653D40);
  uint64_t v12 = __chkstk_darwin(v131);
  uint64_t v132 = (uint64_t)v118 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v135 = (char *)v118 - v14;
  uint64_t v15 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v128 = *(void *)(v15 - 8);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  uint64_t v140 = (uint64_t)v118 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v129 = v17;
  __chkstk_darwin(v16);
  uint64_t v130 = (uint64_t)v118 - v18;
  uint64_t v19 = type metadata accessor for Endianness();
  __chkstk_darwin(v19 - 8);
  uint64_t v148 = (char *)v118 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for StableIdentifier();
  __chkstk_darwin(v21);
  unint64_t v146 = (char *)v118 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v23 - 8);
  uint64_t v139 = (uint64_t)v118 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v25 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v142 = *(void *)(v25 - 8);
  uint64_t v26 = __chkstk_darwin(v25);
  uint64_t v127 = (uint64_t)v118 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v136 = (uint64_t)v118 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v125 = (uint64_t)v118 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  unint64_t v34 = (char *)v118 - v33;
  uint64_t v126 = v35;
  __chkstk_darwin(v32);
  uint64_t v143 = (uint64_t)v118 - v36;
  unint64_t v37 = v5[2];
  id v38 = (void *)swift_allocObject();
  v38[2] = v5;
  void v38[3] = a1;
  v38[4] = v37;
  swift_retain();
  uint64_t v39 = a1;
  swift_retain();
  unsafeFromAsyncTask<A>(_:)();
  swift_release();
  LODWORD(v40) = v152;
  if (qword_101636CD8 != -1) {
    goto LABEL_54;
  }
  while (2)
  {
    OS_dispatch_queue.sync<A>(execute:)();
    char v41 = sub_1010ABF74(v152);
    uint64_t result = swift_bridgeObjectRelease();
    if ((v41 & 1) == 0) {
      return result;
    }
    if (v40)
    {
      if (qword_101636AC0 == -1)
      {
LABEL_5:
        uint64_t v43 = type metadata accessor for Logger();
        sub_100010324(v43, (uint64_t)qword_10170DE38);
        id v44 = Logger.logObject.getter();
        os_log_type_t v45 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v44, v45))
        {
          id v46 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)id v46 = 0;
          _os_log_impl((void *)&_mh_execute_header, v44, v45, "Checking if legacy LE force pair is needed when FMN is off", v46, 2u);
          swift_slowDealloc();
        }

        type metadata accessor for Transaction();
        uint64_t v47 = swift_allocObject();
        *(void *)(v47 + 16) = v5;
        *(void *)(v47 + 24) = v39;
        swift_retain();
        unint64_t v48 = v39;
        static Transaction.asyncTask(name:block:)();
        return swift_release();
      }
LABEL_57:
      swift_once();
      goto LABEL_5;
    }
    if (qword_101636AC0 != -1) {
      swift_once();
    }
    uint64_t v49 = type metadata accessor for Logger();
    v118[1] = sub_100010324(v49, (uint64_t)qword_10170DE38);
    unint64_t v50 = Logger.logObject.getter();
    os_log_type_t v51 = static os_log_type_t.default.getter();
    BOOL v52 = os_log_type_enabled(v50, v51);
    uint64_t v53 = v142;
    if (v52)
    {
      unint64_t v54 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v54 = 0;
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "Checking if legacy LE force pair is needed when we have a group and FMN is on", v54, 2u);
      swift_slowDealloc();
    }

    uint64_t v55 = sub_1004D1434();
    swift_retain();
    uint64_t v56 = sub_100413300(v55, v37);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v57 = v56[2];
    int v145 = (int *)v25;
    uint64_t v119 = v5;
    if (!v57)
    {
      uint64_t v117 = 1;
      goto LABEL_43;
    }
    uint64_t v150 = (uint64_t (*)())((char *)v56
                         + ((*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80)));
    id v5 = v146;
    char v147 = v146 + 8;
    uint64_t v149 = *(void *)(v53 + 72);
    v118[0] = v56;
    swift_bridgeObjectRetain();
    uint64_t v40 = 0;
    uint64_t v144 = v57;
    while (1)
    {
      sub_100418628((uint64_t)v150 + v149 * v40, (uint64_t)v34, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      sub_100418628((uint64_t)&v34[*(int *)(v25 + 24)], (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 3) {
        break;
      }
      if (EnumCaseMultiPayload == 2)
      {
        sub_10000588C(&qword_1016555E0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }
      sub_100418B1C((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
LABEL_15:
      ++v40;
      sub_100418B1C((uint64_t)v34, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      if (v40 == v57)
      {
        swift_bridgeObjectRelease();
        uint64_t v117 = 1;
        uint64_t v53 = v142;
LABEL_43:
        uint64_t v116 = v139;
        goto LABEL_44;
      }
    }
    sub_10000588C((uint64_t *)&unk_1016565E0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_20:
    swift_bridgeObjectRelease();
    uint64_t v59 = type metadata accessor for UUID();
    (*(void (**)(void *, uint64_t))(*(void *)(v59 - 8) + 8))(v5, v59);
    uint64_t v60 = sub_1002AAF08(*(void *)&v34[*(int *)(v25 + 64)], *(void *)&v34[*(int *)(v25 + 68)]);
    if (v61 >> 60 == 15) {
      goto LABEL_15;
    }
    uint64_t v62 = v60;
    unint64_t v37 = v61;
    uint64_t v39 = (char *)Set.init(minimumCapacity:)();
    uint64_t v63 = static Hasher._hash(seed:_:)();
    uint64_t v64 = -1 << v39[32];
    unint64_t v25 = v63 & ~v64;
    if (((*(void *)&v39[((v25 >> 3) & 0xFFFFFFFFFFFFFF8) + 56] >> v25) & 1) == 0) {
      goto LABEL_27;
    }
    uint64_t v65 = *((void *)v39 + 6);
    if (*(void *)(v65 + 8 * v25) != 8213)
    {
      uint64_t v66 = ~v64;
      while (1)
      {
        unint64_t v25 = (v25 + 1) & v66;
        if (((*(void *)&v39[((v25 >> 3) & 0xFFFFFFFFFFFFFF8) + 56] >> v25) & 1) == 0) {
          break;
        }
        if (*(void *)(v65 + 8 * v25) == 8213) {
          goto LABEL_28;
        }
      }
LABEL_27:
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v151 = v39;
      sub_100DDF204(8213, v25, isUniquelyReferenced_nonNull_native);
      uint64_t v39 = v151;
      swift_bridgeObjectRelease();
    }
LABEL_28:
    uint64_t v152 = (uint64_t)v39;
    sub_100DCA424((uint64_t *)&v151, 8216);
    sub_100DCA424((uint64_t *)&v151, 8220);
    switch(v37 >> 62)
    {
      case 1uLL:
        LODWORD(v68) = HIDWORD(v62) - v62;
        if (!__OFSUB__(HIDWORD(v62), v62))
        {
          uint64_t v68 = (int)v68;
          goto LABEL_32;
        }
        __break(1u);
        goto LABEL_56;
      case 2uLL:
        uint64_t v70 = *(void *)(v62 + 16);
        uint64_t v69 = *(void *)(v62 + 24);
        BOOL v71 = __OFSUB__(v69, v70);
        uint64_t v68 = v69 - v70;
        if (v71)
        {
LABEL_56:
          __break(1u);
          goto LABEL_57;
        }
LABEL_32:
        if (v68 < -1)
        {
          __break(1u);
LABEL_54:
          swift_once();
          continue;
        }
LABEL_33:
        Data.subdata(in:)();
        static Endianness.current.getter();
        sub_100091A80();
        FixedWidthInteger.init(data:ofEndianness:)();
        uint64_t v72 = v152;
        if ((BYTE4(v151) & 1) != 0 || v151 != 76)
        {
          swift_bridgeObjectRelease();
          sub_100037A24(v62, v37);
          uint64_t v57 = v144;
          unint64_t v25 = (unint64_t)v145;
          goto LABEL_15;
        }
        swift_bridgeObjectRetain();
        sub_1002AA5D4(v62, v37);
        static Endianness.current.getter();
        id v5 = v146;
        FixedWidthInteger.init(data:ofEndianness:)();
        if (BYTE4(v151)) {
          uint64_t v73 = 0;
        }
        else {
          uint64_t v73 = (int)v151;
        }
        BOOL v74 = sub_100DC71B4(v73, v72);
        swift_bridgeObjectRelease_n();
        sub_100037A24(v62, v37);
        uint64_t v57 = v144;
        unint64_t v25 = (unint64_t)v145;
        if (!v74) {
          goto LABEL_15;
        }
        swift_bridgeObjectRelease();
        uint64_t v116 = v139;
        sub_100418690((uint64_t)v34, v139, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        uint64_t v117 = 0;
        uint64_t v53 = v142;
LABEL_44:
        (*(void (**)(uint64_t, uint64_t, uint64_t, unint64_t))(v53 + 56))(v116, v117, 1, v25);
        swift_bridgeObjectRelease();
        int v75 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(v53 + 48))(v116, 1, v25);
        uint64_t v76 = v140;
        uint64_t v77 = v143;
        if (v75 == 1)
        {
          sub_10001DAB4(v116, &qword_10163B9F0);
          uint64_t v78 = Logger.logObject.getter();
          os_log_type_t v79 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v78, v79))
          {
            unint64_t v80 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)unint64_t v80 = 0;
            _os_log_impl((void *)&_mh_execute_header, v78, v79, "Not legacy LE force pairing, it's not alphawasp", v80, 2u);
            swift_slowDealloc();
          }

          return v137();
        }
        else
        {
          uint64_t v150 = type metadata accessor for OwnedBeaconRecord;
          sub_100418690(v116, v143, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
          uint64_t v81 = v125;
          sub_100418628(v77, v125, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
          uint64_t v82 = v130;
          sub_100418628(v141, v130, type metadata accessor for OwnedBeaconGroup);
          sub_100418628(v81, v136, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
          sub_100418628(v82, v76, type metadata accessor for OwnedBeaconGroup);
          uint64_t v83 = *(unsigned __int8 *)(v53 + 80);
          uint64_t v84 = (v83 + 24) & ~v83;
          unint64_t v85 = (v126 + *(unsigned __int8 *)(v128 + 80) + v84) & ~(unint64_t)*(unsigned __int8 *)(v128 + 80);
          unint64_t v86 = (v129 + v85 + 7) & 0xFFFFFFFFFFFFFFF8;
          uint64_t v87 = swift_allocObject();
          *(void *)(v87 + 16) = v119;
          uint64_t v88 = v87 + v84;
          uint64_t v89 = v150;
          sub_100418690(v81, v88, (uint64_t (*)(void))v150);
          uint64_t v90 = v82;
          uint64_t v91 = v143;
          sub_100418690(v90, v87 + v85, type metadata accessor for OwnedBeaconGroup);
          uint64_t v149 = v87;
          uint64_t v92 = (uint64_t (**)(void))(v87 + v86);
          uint64_t v94 = (void (*)(void))v137;
          id v93 = v138;
          char *v92 = v137;
          v92[1] = v93;
          uint64_t v95 = v127;
          sub_100418628(v91, v127, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
          uint64_t v96 = swift_allocObject();
          uint64_t v97 = v89;
          uint64_t v98 = (uint64_t)v119;
          sub_100418690(v95, v96 + ((v83 + 16) & ~v83), (uint64_t (*)(void))v97);
          swift_retain_n();
          swift_retain_n();
          uint64_t v99 = (uint64_t)v135;
          unsafeFromAsyncTask<A>(_:)();
          swift_release();
          uint64_t v100 = v132;
          sub_10001D074(v99, v132, (uint64_t *)&unk_101653D40);
          uint64_t v101 = v134;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v133 + 48))(v100, 1, v134) == 1)
          {
            sub_10001DAB4(v100, (uint64_t *)&unk_101653D40);
            sub_100414B68();
            uint64_t v102 = swift_allocError();
            *uint64_t v103 = 0;
            uint64_t v104 = v136;
            uint64_t v105 = v140;
            sub_100404220(v102, 1, v98, v136, v140, v94);
            swift_errorRelease();
          }
          else
          {
            uint64_t v106 = v101;
            uint64_t v107 = v122;
            sub_10001D608(v100, v122, &qword_10163F7B0);
            uint64_t v108 = v145;
            uint64_t v109 = v143 + v145[5];
            uint64_t v110 = v123;
            sub_100402E94(v123);
            uint64_t v111 = (uint64_t)v124;
            uint64_t v112 = &v124[*(int *)(v120 + 20)];
            uint64_t v113 = type metadata accessor for UUID();
            (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v113 - 8) + 16))(v112, v109, v113);
            uid_t v114 = getuid();
            sub_100DC5FC0(v114);
            uint64_t v115 = *(int *)(v106 + 36);
            uint64_t v91 = v143;
            sub_1004172B4(v111, v107 + v115, v143 + v108[8], v110, (void (*)(uint64_t, void))sub_100416D34, v149);
            sub_100418B1C(v111, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
            sub_10001DAB4(v110, (uint64_t *)&unk_10163AC90);
            sub_10001DAB4(v107, &qword_10163F7B0);
            uint64_t v104 = v136;
            uint64_t v105 = v140;
          }
          sub_10001DAB4(v99, (uint64_t *)&unk_101653D40);
          swift_release();
          swift_release();
          sub_100418B1C(v104, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
          sub_100418B1C(v105, type metadata accessor for OwnedBeaconGroup);
          swift_release();
          return sub_100418B1C(v91, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        }
      default:
        goto LABEL_33;
    }
  }
}

void sub_100404220(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void))
{
  if (qword_101636AC0 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_100010324(v10, (uint64_t)qword_10170DE38);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Starting legacy LE force pairing", v13, 2u);
    swift_slowDealloc();
  }

  if (a2)
  {
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    swift_willThrowTypedImpl();
    swift_errorRetain();
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      uint64_t v20 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 138412290;
      uint64_t v22 = _convertErrorToNSError(_:)();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v20 = v22;
      sub_100173E88(a1, 1);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "legacy LE forcePair error: %@", v19, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_100173E88(a1, 1);
    }
    else
    {
      sub_100173E88(a1, 1);
      sub_100173E88(a1, 1);
    }
  }
  else if (a1)
  {
    sub_10040466C(a4, a5, (uint64_t)sub_10040453C, 0);
  }
  else
  {
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Should not legacy LE force pair", v16, 2u);
      swift_slowDealloc();
    }

    a6();
  }
}

void sub_10040453C(uint64_t a1, char a2)
{
}

void sub_10040455C(uint64_t a1, char a2, uint64_t (*a3)(void), const char *a4)
{
  if (a2)
  {
    sub_10000588C(&qword_101638D40);
    swift_willThrowTypedImpl();
  }
  if (qword_101636AC0 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100010324(v6, (uint64_t)qword_10170DE38);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = a3();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, a4, v9, 2u);
    swift_slowDealloc();
  }
}

void sub_10040466C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_100D1BE58();
  if (v12 >> 60 == 15)
  {
    if (qword_101636AC0 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100010324(v13, (uint64_t)qword_10170DE38);
    os_log_t v22 = (os_log_t)Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v14))
    {
      os_log_type_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v14, "Invalid serial number. Cannot force pair!", v15, 2u);
      swift_slowDealloc();
    }
    os_log_t v16 = v22;
  }
  else
  {
    uint64_t v17 = v11;
    unint64_t v18 = v12;
    sub_1004060F4(v11, v12, a2, a3, a4);
    uint64_t v19 = a1 + *(int *)(type metadata accessor for OwnedBeaconRecord() + 20);
    static Date.trustedNow.getter((uint64_t)v10);
    uint64_t v20 = type metadata accessor for Date();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v10, 0, 1, v20);
    sub_10041311C(v19, (uint64_t)v10);
    sub_100037A24(v17, v18);
    sub_10001DAB4((uint64_t)v10, (uint64_t *)&unk_10163AC90);
  }
}

uint64_t sub_1004048A0(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 120) = a1;
  *(void *)(v2 + 128) = a2;
  return _swift_task_switch(sub_1004048C0, 0, 0);
}

uint64_t sub_1004048C0()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    id v3 = (uint64_t (__cdecl *)())((char *)&dword_101639138 + dword_101639138);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 136) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1004049FC;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1004049FC(uint64_t a1)
{
  *(void *)(*(void *)v1 + 144) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100404AFC, 0, 0);
}

uint64_t sub_100404AFC()
{
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (v0[18])
  {
    uint64_t v2 = v0[16];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v3 = type metadata accessor for OwnedBeaconRecord();
    uint64_t v4 = v2 + *(int *)(v3 + 20);
    uint64_t v5 = v2 + *(int *)(v3 + 32);
    uint64_t v6 = (void *)swift_task_alloc();
    v0[19] = v6;
    *uint64_t v6 = v0;
    v6[1] = sub_100404D00;
    uint64_t v7 = v0[15];
    return sub_1011044F4(v7, v4, v5);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_101636AC0 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_100010324(v9, (uint64_t)qword_10170DE38);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      unint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Missing ObservationStoreService!", v12, 2u);
      swift_slowDealloc();
    }

    uint64_t v13 = v0[15];
    uint64_t v14 = sub_10000588C(&qword_10163F7B0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
    os_log_type_t v15 = (uint64_t (*)(void))v0[1];
    return v15();
  }
}

uint64_t sub_100404D00()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100404DFC, 0, 0);
}

uint64_t sub_100404DFC()
{
  swift_release();
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = sub_10000588C(&qword_10163F7B0);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 0, 1, v2);
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_100404EA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[25] = a7;
  v8[26] = a8;
  v8[23] = a5;
  v8[24] = a6;
  v8[22] = a4;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  v8[27] = v9;
  v8[28] = *(void *)(v9 - 8);
  v8[29] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for DispatchQoS();
  v8[30] = v10;
  v8[31] = *(void *)(v10 - 8);
  v8[32] = swift_task_alloc();
  v8[33] = type metadata accessor for StandaloneBeacon();
  v8[34] = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_10163AC90);
  v8[35] = swift_task_alloc();
  v8[36] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for Date();
  v8[37] = v11;
  v8[38] = *(void *)(v11 - 8);
  v8[39] = swift_task_alloc();
  unsigned char v8[40] = type metadata accessor for BeaconIdentifier();
  v8[41] = swift_task_alloc();
  v8[42] = swift_task_alloc();
  sub_10000588C(&qword_10163EB60);
  v8[43] = swift_task_alloc();
  v8[44] = swift_task_alloc();
  return _swift_task_switch(sub_100405114, 0, 0);
}

uint64_t sub_100405114()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 104, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 128))
  {
    sub_10001CEB0((long long *)(v0 + 104), v0 + 64);
    sub_10001CD44((void *)(v0 + 64), *(void *)(v0 + 88));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_101639138 + dword_101639138);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 360) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100405250;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100405250(uint64_t a1)
{
  *(void *)(*(void *)v1 + 368) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100405350, 0, 0);
}

uint64_t sub_100405350()
{
  uint64_t v1 = (uint64_t)(v0 + 8);
  if (v0[46])
  {
    uint64_t v2 = v0[42];
    uint64_t v3 = v0[40];
    uint64_t v4 = v0[22];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v5 = v2 + *(int *)(v3 + 20);
    uint64_t v6 = type metadata accessor for UUID();
    v0[47] = v6;
    uint64_t v7 = *(void *)(v6 - 8);
    uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
    v0[48] = v8;
    v0[49] = (v7 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v8(v5, v4, v6);
    uid_t v9 = getuid();
    sub_100DC5FC0(v9);
    uint64_t v10 = (void *)swift_task_alloc();
    v0[50] = v10;
    *uint64_t v10 = v0;
    v10[1] = sub_1004057CC;
    uint64_t v11 = v0[44];
    uint64_t v12 = v0[42];
    return sub_1011048AC(v11, v12);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_101636AC0 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_100010324(v14, (uint64_t)qword_10170DE38);
    os_log_type_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Missing ObservationStoreService!", v17, 2u);
      swift_slowDealloc();
    }

    sub_100414B68();
    uint64_t v18 = swift_allocError();
    *uint64_t v19 = 0;
    swift_willThrow();
    uint64_t v20 = v0[32];
    uint64_t v21 = v0[29];
    uint64_t v29 = v0[31];
    uint64_t v30 = v0[30];
    uint64_t v22 = v0[27];
    uint64_t v23 = v0[24];
    uint64_t v24 = v0[25];
    uint64_t v28 = v0[28];
    unint64_t v25 = (void *)swift_allocObject();
    v25[2] = v18;
    v25[3] = v23;
    uint64_t v25[4] = v24;
    v0[6] = sub_100418B10;
    v0[7] = v25;
    v0[2] = _NSConcreteStackBlock;
    v0[3] = 1107296256;
    v0[4] = sub_1004B5480;
    v0[5] = &unk_1015BF860;
    uint64_t v26 = _Block_copy(v0 + 2);
    swift_errorRetain();
    swift_retain();
    static DispatchQoS.unspecified.getter();
    v0[21] = _swiftEmptyArrayStorage;
    sub_100414C30((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v26);
    swift_errorRelease();
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v21, v22);
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v20, v30);
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v27 = (uint64_t (*)(void))v0[1];
    return v27();
  }
}

uint64_t sub_1004057CC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 408) = v0;
  swift_task_dealloc();
  sub_100418B1C(*(void *)(v2 + 336), (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  if (v0) {
    uint64_t v3 = sub_100405C9C;
  }
  else {
    uint64_t v3 = sub_100405914;
  }
  return _swift_task_switch(v3, 0, 0);
}

uint64_t sub_100405914()
{
  uint64_t v1 = v0[43];
  sub_10001D074(v0[44], v1, &qword_10163EB60);
  uint64_t v2 = type metadata accessor for ObservedAdvertisement(0);
  int v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2);
  uint64_t v4 = v0[43];
  if (v3 == 1)
  {
    sub_10001DAB4(v0[43], &qword_10163EB60);
    uint64_t v5 = 1;
  }
  else
  {
    (*(void (**)(void, uint64_t, void))(v0[38] + 16))(v0[36], v4 + *(int *)(v2 + 44), v0[37]);
    sub_100418B1C(v4, type metadata accessor for ObservedAdvertisement);
    uint64_t v5 = 0;
  }
  uint64_t v6 = v0[37];
  uint64_t v7 = v0[38];
  uint64_t v8 = v0[36];
  uint64_t v9 = v0[34];
  uint64_t v10 = v0[22];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(v8, v5, 1, v6);
  sub_100418628(v10, v9, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
  int v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v8, 1, v6);
  uint64_t v13 = v0[38];
  uint64_t v12 = v0[39];
  uint64_t v14 = v0[36];
  uint64_t v15 = v0[37];
  uint64_t v16 = v0[34];
  if (v11 == 1)
  {
    (*(void (**)(void, uint64_t, void))(v13 + 16))(v0[39], v16 + *(int *)(v0[33] + 32), v0[37]);
    sub_100418B1C(v16, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
    sub_10001DAB4(v14, (uint64_t *)&unk_10163AC90);
  }
  else
  {
    sub_100418B1C(v0[34], (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(v12, v14, v15);
  }
  uint64_t v17 = (void (*)(uint64_t, uint64_t, uint64_t))v0[48];
  uint64_t v18 = v0[47];
  uint64_t v19 = v0[40];
  uint64_t v20 = v0[41];
  uint64_t v21 = v0[38];
  unint64_t v30 = v0[39];
  uint64_t v31 = v0[37];
  uint64_t v32 = v0[44];
  uint64_t v22 = v0[35];
  uint64_t v29 = v0[25];
  uint64_t v27 = v0[33];
  uint64_t v28 = (void (*)(uint64_t, void))v0[24];
  uint64_t v23 = v0[22];
  sub_100402E94(v22);
  v17(v20 + *(int *)(v19 + 20), v23, v18);
  uid_t v24 = getuid();
  sub_100DC5FC0(v24);
  sub_1004172B4(v20, v30, v23 + *(int *)(v27 + 32), v22, v28, v29);
  swift_release();
  sub_100418B1C(v20, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
  sub_10001DAB4(v22, (uint64_t *)&unk_10163AC90);
  (*(void (**)(unint64_t, uint64_t))(v21 + 8))(v30, v31);
  sub_10001DAB4(v32, &qword_10163EB60);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v25 = (uint64_t (*)(void))v0[1];
  return v25();
}

uint64_t sub_100405C9C()
{
  swift_release();
  uint64_t v1 = v0[51];
  uint64_t v2 = v0[32];
  uint64_t v3 = v0[29];
  uint64_t v12 = v0[31];
  uint64_t v13 = v0[30];
  uint64_t v4 = v0[27];
  uint64_t v5 = v0[24];
  uint64_t v6 = v0[25];
  uint64_t v11 = v0[28];
  uint64_t v7 = (void *)swift_allocObject();
  v7[2] = v1;
  v7[3] = v5;
  v7[4] = v6;
  v0[6] = sub_100418B10;
  v0[7] = v7;
  v0[2] = _NSConcreteStackBlock;
  v0[3] = 1107296256;
  v0[4] = sub_1004B5480;
  v0[5] = &unk_1015BF860;
  uint64_t v8 = _Block_copy(v0 + 2);
  swift_errorRetain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v0[21] = _swiftEmptyArrayStorage;
  sub_100414C30((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v8);
  swift_errorRelease();
  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v3, v4);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v2, v13);
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(void))v0[1];
  return v9();
}

uint64_t sub_100405F44(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t))
{
  if (qword_101636AC0 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100010324(v4, (uint64_t)qword_10170DE38);
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 138412290;
    uint64_t v10 = _convertErrorToNSError(_:)();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v8 = v10;
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Error in shouldForcePair: %@", v7, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
  }

  return a2(a1, 1);
}

uint64_t sub_1004060F4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v25 = a4;
  uint64_t v26 = a5;
  unint64_t v24 = a2;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v30 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v28 = *(void *)(v11 - 8);
  uint64_t v29 = v11;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  __chkstk_darwin(v14 - 8);
  uint64_t v27 = *(void *)(v5 + 48);
  sub_100418628(a3, (uint64_t)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for OwnedBeaconGroup);
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  uint64_t v18 = (void *)swift_allocObject();
  v18[2] = v5;
  v18[3] = a1;
  unint64_t v19 = v24;
  v18[4] = v24;
  sub_100418690((uint64_t)&v24 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v18 + v17, type metadata accessor for OwnedBeaconGroup);
  uint64_t v20 = (void *)((char *)v18 + ((v16 + v17 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v21 = v26;
  *uint64_t v20 = v25;
  v20[1] = v21;
  aBlock[4] = sub_100418114;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015BF6A8;
  uint64_t v22 = _Block_copy(aBlock);
  swift_retain();
  sub_1000361E0(a1, v19);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v31 = _swiftEmptyArrayStorage;
  sub_100414C30((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v13, v29);
  return swift_release();
}

uint64_t sub_1004064B8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void (*a5)(void), uint64_t a6)
{
  uint64_t v102 = a5;
  uint64_t v103 = a6;
  uint64_t v105 = a4;
  uint64_t v9 = sub_10000588C((uint64_t *)&unk_1016477E0);
  __chkstk_darwin(v9 - 8);
  uint64_t v104 = (char *)&v90 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for MACAddress();
  uint64_t v98 = *(void *)(v11 - 8);
  uint64_t v99 = v11;
  __chkstk_darwin(v11);
  uint64_t v95 = (char *)&v90 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000588C(&qword_10163C6C8);
  __chkstk_darwin(v13 - 8);
  uint64_t v91 = (char *)&v90 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v94 = sub_10000588C(&qword_101643CE8);
  uint64_t v93 = *(void *)(v94 - 8);
  __chkstk_darwin(v94);
  uint64_t v92 = (char *)&v90 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v106 = type metadata accessor for OwnedBeaconGroup(0);
  __chkstk_darwin(v106);
  uint64_t v90 = (uint64_t)&v90 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for Endianness();
  __chkstk_darwin(v17 - 8);
  uint64_t v97 = (char *)&v90 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for StableIdentifier();
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v90 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v23 = *((void *)v22 - 1);
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v90 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v107 = a1;
  uint64_t v100 = a2;
  unint64_t v101 = a3;
  uint64_t v26 = sub_100ACD578(a2, a3);
  uint64_t v27 = v26[2];
  if (v27)
  {
    uint64_t v28 = (uint64_t)v26 + ((*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80));
    id v109 = *(id *)(v23 + 72);
    uint64_t v96 = v26;
    swift_bridgeObjectRetain();
    uint64_t v29 = _swiftEmptyArrayStorage;
    uint64_t v108 = v19;
    while (1)
    {
      sub_100418628(v28, (uint64_t)v25, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      sub_100418628((uint64_t)&v25[v22[6]], (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 3) {
        break;
      }
      if (EnumCaseMultiPayload == 2)
      {
        sub_10000588C(&qword_1016555E0);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_9;
      }
      sub_100418B1C((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      sub_100418B1C((uint64_t)v25, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
LABEL_4:
      v28 += (uint64_t)v109;
      if (!--v27)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_17;
      }
    }
    sub_10000588C((uint64_t *)&unk_1016565E0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_9:
    swift_bridgeObjectRelease();
    uint64_t v31 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t))(*(void *)(v31 - 8) + 8))(v21, v31);
    uint64_t v32 = sub_1002AAF08(*(void *)&v25[v22[16]], *(void *)&v25[v22[17]]);
    unint64_t v34 = v33;
    sub_100418B1C((uint64_t)v25, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    if (v34 >> 60 != 15)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v29 = sub_100A70494(0, v29[2] + 1, 1, v29);
      }
      unint64_t v36 = v29[2];
      unint64_t v35 = v29[3];
      unint64_t v37 = v29;
      if (v36 >= v35 >> 1) {
        unint64_t v37 = sub_100A70494((void *)(v35 > 1), v36 + 1, 1, v29);
      }
      v37[2] = v36 + 1;
      uint64_t v29 = v37;
      id v38 = &v37[2 * v36];
      v38[4] = v32;
      v38[5] = v34;
    }
    goto LABEL_4;
  }
  swift_bridgeObjectRelease();
  uint64_t v29 = _swiftEmptyArrayStorage;
LABEL_17:
  uint64_t v39 = v29[2];
  uint64_t v40 = (uint64_t)v104;
  uint64_t v41 = v105;
  uint64_t v42 = v29;
  uint64_t v43 = v106;
  uint64_t v44 = v107;
  if (!v39)
  {
    swift_bridgeObjectRelease();
    uint64_t v46 = 0;
    unint64_t v45 = 0xF000000000000000;
LABEL_22:
    char v47 = 1;
    goto LABEL_23;
  }
  uint64_t v46 = v42[4];
  unint64_t v45 = v42[5];
  sub_1000361E0(v46, v45);
  swift_bridgeObjectRelease();
  sub_1000361E0(v46, v45);
  if (sub_1002AA484(v46, v45) != 76)
  {
    sub_10001CFB8(v46, v45);
    goto LABEL_22;
  }
  sub_1002AA5D4(v46, v45);
  static Endianness.current.getter();
  sub_100091A80();
  FixedWidthInteger.init(data:ofEndianness:)();
  sub_10001CFB8(v46, v45);
  char v47 = BYTE4(v111[0]) | (LODWORD(v111[0]) != 8220);
LABEL_23:
  uint64_t My = type metadata accessor for Feature.FindMy();
  v111[3] = (char *)My;
  v111[4] = (char *)sub_100414C30((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
  uint64_t v49 = sub_10001D958((uint64_t *)v111);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v49, enum case for Feature.FindMy.smilingWheel(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)();
  uint64_t v50 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v111);
  if (My & 1) == 0 || (v47)
  {
    uint64_t v59 = v41 + *(int *)(v43 + 28);
    __chkstk_darwin(v50);
    *(&v90 - 2) = v59;
    *(&v90 - 1) = v60;
    sub_10000588C(&qword_10165F6B0);
    Lock.callAsFunction<A>(_:)();
    unint64_t v61 = v111[0];
    if (v111[0])
    {
      uint64_t v62 = sub_1003E7B30(v111[0]);
      if (v62)
      {
        *(&v90 - 4) = __chkstk_darwin(v62);
        *(&v90 - 3) = v59;
        uint64_t v63 = v101;
        *(&v90 - 2) = v100;
        *(&v90 - 1) = v63;
        sub_10000588C(&qword_101643CF0);
        OS_dispatch_queue.sync<A>(execute:)();
        id v110 = *(id *)(v44 + 48);
        id v64 = v110;
        uint64_t v65 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
        uint64_t v66 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v65 - 8) + 56);
        id v109 = v61;
        uint64_t v67 = (uint64_t)v91;
        v66(v91, 1, 1, v65);
        sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
        sub_100062734(&qword_101643CF8, &qword_101643CF0);
        sub_10027B124();
        id v68 = v64;
        uint64_t v69 = v92;
        Publisher.receive<A>(on:options:)();
        sub_10001DAB4(v67, &qword_10163C6C8);

        swift_release();
        uint64_t v70 = swift_allocObject();
        swift_weakInit();
        BOOL v71 = (void *)swift_allocObject();
        uint64_t v72 = v102;
        uint64_t v73 = v103;
        v71[2] = v70;
        v71[3] = v72;
        v71[4] = v73;
        uint64_t v74 = swift_allocObject();
        *(void *)(v74 + 16) = sub_1004181C4;
        *(void *)(v74 + 24) = v71;
        sub_100062734(&qword_101643D00, &qword_101643CE8);
        swift_retain();
        uint64_t v75 = v94;
        Publisher<>.sink(receiveValue:)();
        swift_release();
        (*(void (**)(char *, uint64_t))(v93 + 8))(v69, v75);
        swift_beginAccess();
        AnyCancellable.store(in:)();
        swift_endAccess();

        swift_release();
        swift_release();
      }
      else
      {
        if (qword_101636AC0 != -1) {
          swift_once();
        }
        uint64_t v84 = type metadata accessor for Logger();
        sub_100010324(v84, (uint64_t)qword_10170DE38);
        unint64_t v85 = Logger.logObject.getter();
        os_log_type_t v86 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v85, v86))
        {
          uint64_t v87 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v87 = 0;
          _os_log_impl((void *)&_mh_execute_header, v85, v86, "Missing pairing manager to force pair!", v87, 2u);
          swift_slowDealloc();
        }

        sub_100414B68();
        swift_allocError();
        unsigned char *v88 = 0;
        v102();
        swift_errorRelease();
      }
    }
    else
    {
      if (qword_101636AC0 != -1) {
        swift_once();
      }
      uint64_t v77 = type metadata accessor for Logger();
      sub_100010324(v77, (uint64_t)qword_10170DE38);
      uint64_t v78 = v90;
      sub_100418628(v41, v90, type metadata accessor for OwnedBeaconGroup);
      os_log_type_t v79 = Logger.logObject.getter();
      os_log_type_t v80 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v79, v80))
      {
        uint64_t v81 = (uint8_t *)swift_slowAlloc();
        v111[0] = (char *)swift_slowAlloc();
        *(_DWORD *)uint64_t v81 = 136446210;
        sub_100414C30((unint64_t *)&qword_101649EE0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
        uint64_t v82 = dispatch thunk of CustomStringConvertible.description.getter();
        id v110 = (id)sub_1008FA0F0(v82, v83, (uint64_t *)v111);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100418B1C(v78, type metadata accessor for OwnedBeaconGroup);
        _os_log_impl((void *)&_mh_execute_header, v79, v80, "Missing peripheral for %{public}s to force pair!", v81, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_100418B1C(v78, type metadata accessor for OwnedBeaconGroup);
      }

      sub_100414B68();
      swift_allocError();
      *uint64_t v89 = 0;
      v102();
      swift_errorRelease();
    }
    return sub_100037A24(v46, v45);
  }
  else
  {
    sub_1004D1A54(v100, v101, v40);
    uint64_t v52 = v98;
    uint64_t v51 = v99;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v98 + 48))(v40, 1, v99) == 1)
    {
      sub_10001DAB4(v40, (uint64_t *)&unk_1016477E0);
      if (qword_101636AC0 != -1) {
        swift_once();
      }
      uint64_t v53 = type metadata accessor for Logger();
      sub_100010324(v53, (uint64_t)qword_10170DE38);
      unint64_t v54 = Logger.logObject.getter();
      os_log_type_t v55 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v54, v55))
      {
        uint64_t v56 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v56 = 0;
        _os_log_impl((void *)&_mh_execute_header, v54, v55, "Invalid state. No MAC address to start LE pairing", v56, 2u);
        swift_slowDealloc();
      }

      sub_100414B68();
      swift_allocError();
      *uint64_t v57 = 0;
      v102();
      sub_100037A24(v46, v45);
      return swift_errorRelease();
    }
    else
    {
      uint64_t v76 = (uint64_t)v95;
      (*(void (**)(char *, uint64_t, uint64_t))(v52 + 32))(v95, v40, v51);
      sub_1003F6EDC(v76, v41 + *(int *)(v43 + 28), 0, (uint64_t)v102, v103);
      sub_100037A24(v46, v45);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v52 + 8))(v76, v51);
    }
  }
}

uint64_t sub_100407434(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v93 = (void (*)(void))a3;
  uint64_t v94 = a4;
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v6 - 8);
  uint64_t v92 = (uint64_t)v84 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_10163C6C8);
  __chkstk_darwin(v8 - 8);
  uint64_t v88 = (char *)v84 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C(&qword_101643CE8);
  uint64_t v90 = *(void *)(v10 - 8);
  uint64_t v91 = v10;
  __chkstk_darwin(v10);
  uint64_t v89 = (char *)v84 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Endianness();
  __chkstk_darwin(v12 - 8);
  uint64_t v13 = type metadata accessor for MACAddress();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)v84 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)v84 - v18;
  uint64_t v20 = (int *)type metadata accessor for StandaloneBeacon();
  uint64_t v21 = a1 + v20[6];
  uint64_t v95 = v14;
  uint64_t v96 = v19;
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v22(v19, v21, v13);
  uint64_t v23 = (uint64_t *)(a1 + v20[9]);
  uint64_t v25 = *v23;
  unint64_t v24 = v23[1];
  if (sub_1002AA484(*v23, v24) == 76)
  {
    sub_1002AA5D4(v25, v24);
    static Endianness.current.getter();
    sub_100091A80();
    FixedWidthInteger.init(data:ofEndianness:)();
    char v26 = BYTE4(v98[0]) | (LODWORD(v98[0]) != 8220);
  }
  else
  {
    char v26 = 1;
  }
  uint64_t My = type metadata accessor for Feature.FindMy();
  v98[3] = (char *)My;
  v98[4] = (char *)sub_100414C30((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
  uint64_t v28 = sub_10001D958((uint64_t *)v98);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v28, enum case for Feature.FindMy.smilingWheel(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)();
  uint64_t v29 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v98);
  if ((My & 1) != 0 && (v26 & 1) == 0)
  {
    uint64_t v30 = (uint64_t)v96;
    sub_1003F6EDC(a1 + v20[5], (uint64_t)v96, 1, (uint64_t)v93, v94);
    uint64_t v31 = *(uint64_t (**)(uint64_t, uint64_t))(v95 + 8);
    uint64_t v32 = v30;
    return v31(v32, v13);
  }
  uint64_t v87 = v13;
  __chkstk_darwin(v29);
  v84[-2] = (uint64_t)v96;
  v84[-1] = v33;
  sub_10000588C(&qword_10165F6B0);
  Lock.callAsFunction<A>(_:)();
  if (v98[0])
  {
    os_log_type_t v86 = v98[0];
    uint64_t v34 = sub_1003E7B30(v98[0]);
    if (!v34)
    {
      uint64_t v13 = v87;
      if (qword_101636AC0 != -1) {
        swift_once();
      }
      uint64_t v52 = type metadata accessor for Logger();
      sub_100010324(v52, (uint64_t)qword_10170DE38);
      uint64_t v53 = Logger.logObject.getter();
      os_log_type_t v54 = static os_log_type_t.error.getter();
      BOOL v55 = os_log_type_enabled(v53, v54);
      uint64_t v56 = v93;
      if (v55)
      {
        uint64_t v57 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v57 = 0;
        _os_log_impl((void *)&_mh_execute_header, v53, v54, "Missing pairing manager to force pair!", v57, 2u);
        swift_slowDealloc();
      }

      sub_100414B68();
      swift_allocError();
      *uint64_t v58 = 0;
      v56();

      swift_errorRelease();
      goto LABEL_24;
    }
    uint64_t v35 = a2;
    uint64_t v36 = v34;
    swift_bridgeObjectRetain();
    unint64_t v37 = (char *)String.utf8Data.getter();
    uint64_t v39 = v38;
    swift_bridgeObjectRelease();
    v98[0] = v37;
    v98[1] = v39;
    sub_1000362FC();
    if (DataProtocol.isNull.getter())
    {
      sub_10001CFB8((uint64_t)v37, (unint64_t)v39);
      uint64_t v13 = v87;
      if (qword_101636AC0 != -1) {
        swift_once();
      }
      uint64_t v40 = type metadata accessor for Logger();
      sub_100010324(v40, (uint64_t)qword_10170DE38);
      uint64_t v41 = Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v41, v42))
      {
        uint64_t v43 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v43 = 0;
        _os_log_impl((void *)&_mh_execute_header, v41, v42, "Invalid serial number. Cannot force pair!", v43, 2u);
        swift_slowDealloc();
      }

      swift_release();
LABEL_24:
      uint64_t v32 = (uint64_t)v96;
      uint64_t v31 = *(uint64_t (**)(uint64_t, uint64_t))(v95 + 8);
      return v31(v32, v13);
    }
    uint64_t v60 = Data.trimmed.getter();
    uint64_t v62 = v61;
    uint64_t v63 = sub_10001CFB8((uint64_t)v37, (unint64_t)v39);
    v84[1] = v36;
    __chkstk_darwin(v63);
    uint64_t v64 = (uint64_t)v96;
    v84[-4] = v36;
    v84[-3] = v64;
    v84[-2] = v60;
    v84[-1] = v62;
    unint64_t v65 = v62;
    uint64_t v66 = v60;
    uint64_t v67 = v60;
    v84[0] = v60;
    unint64_t v68 = v65;
    unint64_t v85 = v65;
    sub_1000361E0(v66, v65);
    sub_10000588C(&qword_101643CF0);
    OS_dispatch_queue.sync<A>(execute:)();
    sub_10001CFB8(v67, v68);
    id v97 = *(id *)(v35 + 48);
    id v69 = v97;
    uint64_t v70 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
    uint64_t v71 = (uint64_t)v88;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v70 - 8) + 56))(v88, 1, 1, v70);
    sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
    sub_100062734(&qword_101643CF8, &qword_101643CF0);
    sub_10027B124();
    id v72 = v69;
    uint64_t v73 = v89;
    Publisher.receive<A>(on:options:)();
    sub_10001DAB4(v71, &qword_10163C6C8);

    swift_release();
    uint64_t v74 = swift_allocObject();
    swift_weakInit();
    uint64_t v75 = (void *)swift_allocObject();
    uint64_t v76 = (uint64_t)v93;
    uint64_t v77 = v94;
    v75[2] = v74;
    v75[3] = v76;
    v75[4] = v77;
    uint64_t v78 = swift_allocObject();
    *(void *)(v78 + 16) = sub_100419D40;
    *(void *)(v78 + 24) = v75;
    sub_100062734(&qword_101643D00, &qword_101643CE8);
    swift_retain();
    uint64_t v79 = v91;
    Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v90 + 8))(v73, v79);
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
    uint64_t v80 = v92;
    static Date.trustedNow.getter(v92);
    uint64_t v81 = type metadata accessor for Date();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v81 - 8) + 56))(v80, 0, 1, v81);
    sub_10041311C(a1, v80);

    swift_release();
    sub_10001CFB8(v84[0], v85);
    sub_10001DAB4(v80, (uint64_t *)&unk_10163AC90);
    return (*(uint64_t (**)(char *, uint64_t))(v95 + 8))(v96, v87);
  }
  else
  {
    if (qword_101636AC0 != -1) {
      swift_once();
    }
    uint64_t v44 = type metadata accessor for Logger();
    sub_100010324(v44, (uint64_t)qword_10170DE38);
    uint64_t v45 = v87;
    v22(v17, (uint64_t)v96, v87);
    uint64_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v46, v47))
    {
      unint64_t v48 = (uint8_t *)swift_slowAlloc();
      v98[0] = (char *)swift_slowAlloc();
      *(_DWORD *)unint64_t v48 = 136446210;
      sub_100414C30((unint64_t *)&qword_101649EE0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
      uint64_t v49 = dispatch thunk of CustomStringConvertible.description.getter();
      id v97 = (id)sub_1008FA0F0(v49, v50, (uint64_t *)v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v51 = *(void (**)(char *, uint64_t))(v95 + 8);
      v51(v17, v45);
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Missing peripheral for %{public}s to force pair!", v48, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v51 = *(void (**)(char *, uint64_t))(v95 + 8);
      v51(v17, v45);
    }

    uint64_t v82 = v93;
    sub_100414B68();
    swift_allocError();
    *unint64_t v83 = 0;
    v82();
    swift_errorRelease();
    return ((uint64_t (*)(char *, uint64_t))v51)(v96, v45);
  }
}

uint64_t sub_100408068(void *a1, uint64_t a2, uint64_t a3, void (*a4)(void, void), uint64_t a5)
{
  uint64_t v58 = a5;
  uint64_t v60 = a4;
  uint64_t v6 = type metadata accessor for MACAddress();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v59 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_101643CC0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for BluetoothManagerDevice();
  uint64_t v57 = *(void *)(v12 - 8);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v48 - v16;
  uint64_t v18 = type metadata accessor for UUID();
  uint64_t v55 = *(void *)(v18 - 8);
  uint64_t v56 = v18;
  __chkstk_darwin(v18);
  os_log_type_t v54 = (char *)&v48 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v21 = result;
    uint64_t v53 = v15;
    if (qword_101636AC0 != -1) {
      swift_once();
    }
    uint64_t v52 = v12;
    uint64_t v22 = type metadata accessor for Logger();
    uint64_t v23 = sub_100010324(v22, (uint64_t)qword_10170DE38);
    unint64_t v24 = a1;
    uint64_t v51 = v23;
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.default.getter();
    BOOL v27 = os_log_type_enabled(v25, v26);
    uint64_t v61 = v24;
    if (v27)
    {
      uint64_t v28 = swift_slowAlloc();
      uint64_t v49 = v17;
      uint64_t v29 = (uint8_t *)v28;
      uint64_t v30 = swift_slowAlloc();
      uint64_t v50 = v21;
      unint64_t v48 = (void *)v30;
      *(_DWORD *)uint64_t v29 = 138412290;
      v63[0] = v61;
      uint64_t v31 = v7;
      uint64_t v32 = v61;
      unint64_t v24 = v61;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v48 = v24;

      uint64_t v7 = v31;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "LE Pairing completed for %@.", v29, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v17 = v49;
      swift_slowDealloc();
    }
    else
    {

      uint64_t v25 = v24;
    }
    uint64_t v33 = v59;
    uint64_t v34 = (uint64_t)v53;

    id v35 = [*(id *)((char *)&v24->isa + OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject) identifier];
    uint64_t v36 = (uint64_t)v54;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    swift_beginAccess();
    sub_1001645A0(v36);
    (*(void (**)(uint64_t, uint64_t))(v55 + 8))(v36, v56);
    swift_endAccess();
    swift_release();
    sub_100A3AC74(v33);
    sub_1003FCC18((uint64_t)v33, (uint64_t)v11);
    unint64_t v37 = *(void (**)(char *, uint64_t))(v7 + 8);
    v37(v33, v6);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v11, 1, v52) == 1)
    {
      sub_10001DAB4((uint64_t)v11, &qword_101643CC0);
      id v38 = Logger.logObject.getter();
      os_log_type_t v39 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v38, v39))
      {
        uint64_t v40 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v40 = 0;
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "No BT device from BluetoothManager after pairing. Need to unpair", v40, 2u);
        swift_slowDealloc();
      }

      uint64_t v41 = (char *)v61;
      sub_100A3AC74(v33);
      sub_1003EB638(v41, (uint64_t)v33);
      v37(v33, v6);
    }
    else
    {
      sub_100418690((uint64_t)v11, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
      sub_100418628((uint64_t)v17, v34, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
      os_log_type_t v42 = Logger.logObject.getter();
      os_log_type_t v43 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v42, v43))
      {
        uint64_t v44 = v34;
        uint64_t v45 = (uint8_t *)swift_slowAlloc();
        v63[0] = (id)swift_slowAlloc();
        *(_DWORD *)uint64_t v45 = 136315138;
        uint64_t v46 = sub_1001E0BAC();
        uint64_t v62 = sub_1008FA0F0(v46, v47, (uint64_t *)v63);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100418B1C(v44, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
        _os_log_impl((void *)&_mh_execute_header, v42, v43, "Found BT device from BluetoothManager after pairing as expected. %s", v45, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        sub_100418B1C(v34, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
      }
      sub_100418B1C((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
    }
    v60(0, 0);
    return swift_release();
  }
  return result;
}

uint64_t sub_1004087AC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + 168) = a5;
  *(void *)(v6 + 176) = a6;
  *(unsigned char *)(v6 + 264) = a4;
  *(void *)(v6 + 152) = a2;
  *(void *)(v6 + 160) = a3;
  *(void *)(v6 + 144) = a1;
  uint64_t v7 = type metadata accessor for MACAddress();
  *(void *)(v6 + 184) = v7;
  *(void *)(v6 + 192) = *(void *)(v7 - 8);
  *(void *)(v6 + 200) = swift_task_alloc();
  *(void *)(v6 + 208) = swift_task_alloc();
  return _swift_task_switch(sub_100408888, 0, 0);
}

uint64_t sub_100408888()
{
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v2 = *(void *)(v0 + 184);
  uint64_t v3 = *(void *)(v0 + 192);
  uint64_t v4 = *(void *)(v0 + 152);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  *(void *)(v0 + 216) = v5;
  *(void *)(v0 + 224) = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v5(v1, v4, v2);
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v8 = (uint64_t (__cdecl *)())((char *)&dword_101639300 + dword_101639300);
    uint64_t v7 = (void *)swift_task_alloc();
    *(void *)(v0 + 232) = v7;
    void *v7 = v0;
    v7[1] = sub_1004089EC;
    return v8();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1004089EC(uint64_t a1)
{
  *(void *)(*(void *)v1 + 240) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100408AEC, 0, 0);
}

uint64_t sub_100408AEC()
{
  if (*(void *)(v0 + 240))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
    uint64_t v1 = (void *)swift_task_alloc();
    *(void *)(v0 + 248) = v1;
    *uint64_t v1 = v0;
    v1[1] = sub_100408CC4;
    char v2 = *(unsigned char *)(v0 + 264);
    uint64_t v3 = *(void *)(v0 + 152);
    uint64_t v4 = *(void *)(v0 + 160);
    return sub_10003AA54(v4, v3, 0, 0xF000000000000000, v2, 1);
  }
  else
  {
    (*(void (**)(void, void))(*(void *)(v0 + 192) + 8))(*(void *)(v0 + 208), *(void *)(v0 + 184));
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
    if (qword_101636AC0 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100010324(v6, (uint64_t)qword_10170DE38);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Unable to get AirPodsLEPairingService", v9, 2u);
      swift_slowDealloc();
    }

    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
    return v10();
  }
}

uint64_t sub_100408CC4()
{
  *(void *)(*(void *)v1 + 256) = v0;
  swift_task_dealloc();
  if (v0) {
    char v2 = sub_1004090B4;
  }
  else {
    char v2 = sub_100408DD8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100408DD8()
{
  uint64_t v22 = v0;
  if (qword_101636AC0 != -1) {
    swift_once();
  }
  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[27];
  uint64_t v2 = v0[25];
  uint64_t v3 = v0[23];
  uint64_t v4 = v0[20];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170DE38);
  v1(v2, v4, v3);
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v10 = v0[24];
  uint64_t v9 = v0[25];
  uint64_t v11 = v0[23];
  if (v8)
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v21 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 141558275;
    v0[16] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2081;
    sub_100414C30((unint64_t *)&qword_101649EE0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[17] = sub_1008FA0F0(v13, v14, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v15(v9, v11);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "LE Pairing completed for %{private,mask.hash}s", (uint8_t *)v12, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
    v15(v0[25], v0[23]);
  }

  uint64_t v16 = v0[26];
  uint64_t v17 = v0[23];
  uint64_t v18 = v0[21];
  sub_100409324(v0[18], v16);
  v15(v16, v17);
  if (v18) {
    ((void (*)(void, void))v0[21])(0, 0);
  }
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v19 = (uint64_t (*)(void))v0[1];
  return v19();
}

uint64_t sub_1004090B4()
{
  swift_release();
  if (qword_101636AC0 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170DE38);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138543362;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    v0[15] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "startDiscoveryAndPairingSession error: %{public}@", v4, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = v0[26];
  uint64_t v8 = v0[23];
  uint64_t v9 = v0[24];
  uint64_t v10 = v0[21];
  uint64_t v11 = v0[18];

  sub_100409324(v11, v7);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  uint64_t v12 = v0[32];
  if (v10)
  {
    uint64_t v13 = (void (*)(uint64_t, uint64_t))v0[21];
    swift_errorRetain();
    v13(v12, 1);
    swift_errorRelease();
  }
  swift_errorRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

void sub_100409324(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for MACAddress();
  uint64_t v8 = *(void *)(v31 - 8);
  uint64_t v9 = __chkstk_darwin(v31);
  uint64_t v11 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v30 - v12;
  uint64_t v14 = *(void *)(*(void *)(a1 + 32) + 24);
  uint64_t v32 = a2;
  uint64_t v33 = v14;
  sub_10000588C(&qword_10165F6B0);
  Lock.callAsFunction<A>(_:)();
  if (v34[0])
  {
    id v30 = (id)v34[0];
    id v15 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v34[0]
                                                                + OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject), "identifier"));
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    swift_beginAccess();
    sub_1001645A0((uint64_t)v7);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    swift_endAccess();
    swift_release();
    if (qword_101636AC0 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_100010324(v16, (uint64_t)qword_10170DE38);
    uint64_t v17 = v31;
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v11, a2, v31);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = swift_slowAlloc();
      v34[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 136446466;
      uint64_t v35 = sub_1008FA0F0(0xD000000000000047, 0x80000001013FBD80, v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v20 + 12) = 2082;
      sub_100414C30((unint64_t *)&qword_101649EE0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
      uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v35 = sub_1008FA0F0(v21, v22, v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v17);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "%{public}s Cleaned pairing manager for %{public}s", (uint8_t *)v20, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v17);
    }
  }
  else
  {
    if (qword_101636AC0 != -1) {
      swift_once();
    }
    uint64_t v23 = type metadata accessor for Logger();
    sub_100010324(v23, (uint64_t)qword_10170DE38);
    uint64_t v24 = v31;
    (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v13, a2, v31);
    uint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = swift_slowAlloc();
      v34[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v27 = 136446466;
      uint64_t v35 = sub_1008FA0F0(0xD000000000000047, 0x80000001013FBD80, v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v27 + 12) = 2082;
      sub_100414C30((unint64_t *)&qword_101649EE0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
      uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v35 = sub_1008FA0F0(v28, v29, v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v24);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "%{public}s Missing peripheral for %{public}s to clean the pairing manager", (uint8_t *)v27, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v8 + 8))(v13, v24);
    }
  }
}

uint64_t sub_100409984(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v43 = a1;
  uint64_t v44 = a7;
  uint64_t v36 = a5;
  unint64_t v37 = a3;
  uint64_t v12 = type metadata accessor for BluetoothManagerDevice();
  uint64_t v39 = *(void *)(v12 - 8);
  uint64_t v13 = *(void *)(v39 + 64);
  __chkstk_darwin(v12 - 8);
  uint64_t v38 = (uint64_t)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000588C(&qword_10163C6C8);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000588C(&qword_101643D08);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v41 = v17;
  uint64_t v42 = v18;
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = a2;
  uint64_t v46 = a3;
  uint64_t v47 = a4;
  uint64_t v48 = a5;
  char v49 = 0;
  sub_10000588C(&qword_101643D10);
  uint64_t v21 = v40;
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v40 = v21;
  id v50 = *(id *)(a6 + 48);
  id v22 = v50;
  uint64_t v23 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v16, 1, 1, v23);
  sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  sub_100062734(&qword_101643D18, &qword_101643D10);
  sub_10027B124();
  id v24 = v22;
  Publisher.receive<A>(on:options:)();
  sub_10001DAB4((uint64_t)v16, &qword_10163C6C8);

  swift_release();
  uint64_t v25 = swift_allocObject();
  swift_weakInit();
  uint64_t v26 = v38;
  sub_100418628(v36, v38, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
  unint64_t v27 = (*(unsigned __int8 *)(v39 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80);
  unint64_t v28 = (v13 + v27 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v29 = (void *)swift_allocObject();
  uint64_t v30 = v43;
  void v29[2] = v25;
  v29[3] = v30;
  uint64_t v31 = v37;
  v29[4] = v37;
  sub_100418690(v26, (uint64_t)v29 + v27, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
  *(void *)((char *)v29 + v28) = v44;
  sub_100062734(&qword_101643D20, &qword_101643D08);
  swift_retain();
  id v32 = v31;
  swift_retain();
  uint64_t v33 = v41;
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v42 + 8))(v20, v33);
  AnyCancellable.store(in:)();
  return swift_release();
}

uint64_t sub_100409DA4(unint64_t *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = type metadata accessor for BluetoothManagerDevice();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11 - 8);
  unint64_t v14 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v20 = type metadata accessor for Transaction();
    uint64_t v16 = swift_allocObject();
    swift_weakInit();
    sub_100418628(a5, (uint64_t)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
    unint64_t v17 = (*(unsigned __int8 *)(v12 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    uint64_t v18 = (void *)swift_allocObject();
    v18[2] = v16;
    v18[3] = a3;
    v18[4] = a4;
    v18[5] = v14;
    sub_100418690((uint64_t)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v18 + v17, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
    *(void *)((char *)v18 + ((v13 + v17 + 7) & 0xFFFFFFFFFFFFFFF8)) = a6;
    swift_retain();
    swift_retain();
    id v19 = a4;
    sub_100416214(v14);
    swift_retain();
    static Transaction.asyncTask(name:block:)();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_100409FB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[16] = a5;
  v6[17] = a6;
  v6[14] = a3;
  v6[15] = a4;
  v6[12] = a1;
  v6[13] = a2;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  v6[18] = v7;
  v6[19] = *(void *)(v7 - 8);
  v6[20] = swift_task_alloc();
  uint64_t v8 = type metadata accessor for DispatchQoS();
  v6[21] = v8;
  v6[22] = *(void *)(v8 - 8);
  v6[23] = swift_task_alloc();
  uint64_t v9 = *(void *)(type metadata accessor for BluetoothManagerDevice() - 8);
  unsigned char v6[24] = v9;
  v6[25] = *(void *)(v9 + 64);
  v6[26] = swift_task_alloc();
  return _swift_task_switch(sub_10040A138, 0, 0);
}

uint64_t sub_10040A138()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v2 = Strong;
    uint64_t v3 = v0[25];
    uint64_t v4 = v0[26];
    uint64_t v5 = v0[24];
    uint64_t v21 = v0[22];
    uint64_t v22 = v0[21];
    uint64_t v17 = v0[23];
    uint64_t v18 = v0[20];
    uint64_t v19 = v0[18];
    uint64_t v16 = v0[17];
    uint64_t v6 = (void *)v0[14];
    unint64_t v7 = v0[15];
    uint64_t v8 = v0[13];
    uint64_t v20 = v0[19];
    sub_100418628(v0[16], v4, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
    unint64_t v9 = (*(unsigned __int8 *)(v5 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    unint64_t v10 = (v3 + v9 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v11 = (void *)swift_allocObject();
    void v11[2] = v8;
    v11[3] = v2;
    void v11[4] = v6;
    v11[5] = v7;
    sub_100418690(v4, (uint64_t)v11 + v9, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
    *(void *)((char *)v11 + v10) = v16;
    v0[6] = sub_100416398;
    v0[7] = v11;
    v0[2] = _NSConcreteStackBlock;
    v0[3] = 1107296256;
    v0[4] = sub_1004B5480;
    v0[5] = &unk_1015BF4C8;
    uint64_t v12 = _Block_copy(v0 + 2);
    swift_retain();
    swift_retain();
    id v13 = v6;
    sub_100416214(v7);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    v0[11] = _swiftEmptyArrayStorage;
    sub_100414C30((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v12);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v17, v22);
    swift_release();
    swift_release();
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  unint64_t v14 = (uint64_t (*)(void))v0[1];
  return v14();
}

uint64_t sub_10040A454(uint64_t a1, uint64_t a2, char *a3, unint64_t a4, uint8_t *a5, uint64_t a6)
{
  uint64_t v183 = a5;
  uint64_t v184 = a6;
  unint64_t v186 = a4;
  uint64_t v188 = a3;
  uint64_t v168 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v167 = *(void *)(v168 - 8);
  __chkstk_darwin(v168);
  uint64_t v169 = (uint64_t)&v164 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_10163AB18);
  uint64_t v175 = *(void *)(v9 - 8);
  uint64_t v176 = v9;
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v165 = (uint64_t *)((char *)&v164 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v166 = (uint64_t *)((char *)&v164 - v13);
  __chkstk_darwin(v12);
  uint64_t v173 = (uint64_t *)((char *)&v164 - v14);
  uint64_t v15 = sub_10000588C(&qword_101643E18);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  os_log_type_t v172 = (uint64_t *)((char *)&v164 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v16);
  uint64_t v177 = (uint64_t)&v164 - v18;
  uint64_t v19 = type metadata accessor for BluetoothManagerDevice();
  uint64_t v178 = *(void *)(v19 - 8);
  __chkstk_darwin(v19 - 8);
  uint64_t v179 = v20;
  uint64_t v180 = (uint64_t)&v164 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v182 = (uint64_t)&v164 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v171 = (uint64_t)&v164 - v26;
  __chkstk_darwin(v25);
  uint64_t v170 = (uint64_t)&v164 - v27;
  uint64_t v28 = sub_10000588C(&qword_10163BB20);
  uint64_t v29 = __chkstk_darwin(v28 - 8);
  uint64_t v31 = (char *)&v164 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = __chkstk_darwin(v29);
  uint64_t v174 = (uint64_t)&v164 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v36 = (char *)&v164 - v35;
  uint64_t v37 = __chkstk_darwin(v34);
  uint64_t v39 = (char *)&v164 - v38;
  uint64_t v40 = __chkstk_darwin(v37);
  uint64_t v42 = (char *)&v164 - v41;
  __chkstk_darwin(v40);
  uint64_t v44 = (char *)&v164 - v43;
  uint64_t v181 = a1;
  Transaction.capture()();
  uint64_t v45 = *(uint8_t **)(a2 + 16);
  uint64_t v185 = a2;
  sub_1003F0968((uint64_t)v188, v45, (uint64_t)v44);
  unint64_t v187 = v44;
  sub_10001D074((uint64_t)v44, (uint64_t)v42, &qword_10163BB20);
  uint64_t v46 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48);
  if (v46(v42, 1, v21) == 1)
  {
    sub_10001DAB4((uint64_t)v42, &qword_10163BB20);
    unint64_t v47 = v186;
    if (v186) {
      goto LABEL_3;
    }
LABEL_14:
    uint64_t v58 = (uint64_t)v187;
    sub_10001D074((uint64_t)v187, (uint64_t)v39, &qword_10163BB20);
    if (v46(v39, 1, v21) != 1)
    {
      uint64_t v83 = v170;
      sub_100418690((uint64_t)v39, v170, type metadata accessor for OwnedBeaconGroup);
      uint64_t v84 = v180;
      sub_100418628((uint64_t)v183, v180, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
      unint64_t v85 = (*(unsigned __int8 *)(v178 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v178 + 80);
      unint64_t v86 = (v179 + v85 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v87 = swift_allocObject();
      uint64_t v88 = v188;
      *(void *)(v87 + 16) = v185;
      *(void *)(v87 + 24) = v88;
      sub_100418690(v84, v87 + v85, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
      *(void *)(v87 + v86) = v181;
      *(void *)(v87 + ((v86 + 15) & 0xFFFFFFFFFFFFFFF8)) = v184;
      swift_retain();
      uint64_t v89 = v88;
      swift_retain();
      swift_retain();
      sub_100403078(v89, v83, sub_1004167E4, (uint64_t (*)(void))v87);
      swift_release();
      sub_100418B1C(v83, type metadata accessor for OwnedBeaconGroup);
LABEL_35:
      os_log_type_t v54 = &qword_10163BB20;
      uint64_t v55 = v58;
      return sub_10001DAB4(v55, v54);
    }
    uint64_t v59 = (uint64_t)v39;
LABEL_18:
    sub_10001DAB4(v59, &qword_10163BB20);
    if (qword_101636AC0 != -1) {
      swift_once();
    }
    uint64_t v60 = type metadata accessor for Logger();
    sub_100010324(v60, (uint64_t)qword_10170DE38);
    uint64_t v61 = Logger.logObject.getter();
    os_log_type_t v62 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v61, v62))
    {
      uint64_t v63 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v63 = 0;
      _os_log_impl((void *)&_mh_execute_header, v61, v62, "Cannot force from verifyFindMyNetworkId without a beaconGroup", v63, 2u);
      swift_slowDealloc();
    }

    goto LABEL_35;
  }
  if (qword_101636AC0 != -1) {
    swift_once();
  }
  uint64_t v56 = type metadata accessor for Logger();
  uint64_t v57 = sub_100010324(v56, (uint64_t)qword_10170DE38);
  sub_1004CCF70(v57);
  sub_100418B1C((uint64_t)v42, type metadata accessor for OwnedBeaconGroup);
  unint64_t v47 = v186;
  if (!v186) {
    goto LABEL_14;
  }
LABEL_3:
  if (v47 == 1)
  {
    uint64_t v58 = (uint64_t)v187;
    sub_10001D074((uint64_t)v187, (uint64_t)v36, &qword_10163BB20);
    if (v46(v36, 1, v21) != 1)
    {
      uint64_t v90 = v171;
      uint64_t v91 = sub_100418690((uint64_t)v36, v171, type metadata accessor for OwnedBeaconGroup);
      uint64_t v189 = (uint8_t *)_swiftEmptyArrayStorage;
      uint64_t v92 = *(void *)(v90 + *(int *)(v21 + 40));
      __chkstk_darwin(v91);
      *(&v164 - 2) = v90;
      *(&v164 - 1) = (uint64_t)&v189;
      swift_bridgeObjectRetain();
      sub_100E08804((void (*)(void *))sub_1004167C4, (uint64_t)(&v164 - 4), v92);
      swift_bridgeObjectRelease();
      uint64_t v93 = v189;
      swift_bridgeObjectRetain();
      sub_1003FBA44(v184, v188, v183, 1, v93);
      swift_bridgeObjectRelease();
      sub_10001DAB4(v58, &qword_10163BB20);
      sub_100418B1C(v90, type metadata accessor for OwnedBeaconGroup);
      return swift_bridgeObjectRelease();
    }
    uint64_t v59 = (uint64_t)v36;
    goto LABEL_18;
  }
  if (v47 != 2)
  {
    uint64_t v64 = v174;
    sub_10001D074((uint64_t)v187, v174, &qword_10163BB20);
    if (v46((char *)v64, 1, v21) == 1)
    {
      sub_10001DAB4(v64, &qword_10163BB20);
      if (qword_101636AC0 != -1) {
        swift_once();
      }
      uint64_t v65 = type metadata accessor for Logger();
      sub_100010324(v65, (uint64_t)qword_10170DE38);
      uint64_t v66 = Logger.logObject.getter();
      os_log_type_t v67 = static os_log_type_t.debug.getter();
      BOOL v68 = os_log_type_enabled(v66, v67);
      uint64_t v69 = (uint64_t)v187;
      if (v68)
      {
        uint64_t v70 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v70 = 0;
        _os_log_impl((void *)&_mh_execute_header, v66, v67, "Cannot force from verifyFindMyNetworkId without a beaconGroup", v70, 2u);
        swift_slowDealloc();
      }

      os_log_type_t v54 = &qword_10163BB20;
      uint64_t v55 = v69;
      return sub_10001DAB4(v55, v54);
    }
    sub_100418690(v64, v182, type metadata accessor for OwnedBeaconGroup);
    uint64_t v174 = *(int *)(v21 + 40);
    sub_100416214(v47);
    uint64_t v94 = swift_bridgeObjectRetain();
    uint64_t v95 = sub_100411F50(v94, (uint64_t (*)(char *, unint64_t, uint64_t))sub_100412A14);
    swift_bridgeObjectRelease();
    uint64_t v96 = sub_1003E06C8(v95);
    swift_release();
    uint64_t v97 = v185;
    swift_retain();
    uint64_t v98 = sub_10041387C(v96, v97);
    uint64_t v171 = 0;
    swift_bridgeObjectRelease();
    swift_release();
    if (v98[2])
    {
      uint64_t v99 = v175;
      uint64_t v100 = v177;
      sub_10001D074((uint64_t)v98 + ((*(unsigned __int8 *)(v175 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v175 + 80)), v177, &qword_10163AB18);
      uint64_t v101 = 0;
      uint64_t v102 = v176;
    }
    else
    {
      uint64_t v101 = 1;
      uint64_t v102 = v176;
      uint64_t v100 = v177;
      uint64_t v99 = v175;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v99 + 56))(v100, v101, 1, v102);
    swift_bridgeObjectRelease();
    uint64_t v103 = *(void *)(v47 + 16);
    if (v103)
    {
      uint64_t v104 = (unsigned char *)(v47 + 56);
      uint64_t v105 = (uint8_t *)_swiftEmptyArrayStorage;
      do
      {
        if (*v104 == 2)
        {
          uint8_t v109 = *(v104 - 24);
          uint64_t v110 = *((void *)v104 - 2);
          unint64_t v111 = *((void *)v104 - 1);
          sub_1000361E0(v110, v111);
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v189 = v105;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
          {
            sub_1000B7AD8(0, *((void *)v105 + 2) + 1, 1);
            uint64_t v105 = v189;
          }
          unint64_t v107 = *((void *)v105 + 2);
          unint64_t v106 = *((void *)v105 + 3);
          if (v107 >= v106 >> 1)
          {
            sub_1000B7AD8(v106 > 1, v107 + 1, 1);
            uint64_t v105 = v189;
          }
          *((void *)v105 + 2) = v107 + 1;
          uint64_t v108 = &v105[32 * v107];
          v108[32] = v109;
          *((void *)v108 + 5) = v110;
          *((void *)v108 + 6) = v111;
          v108[56] = 2;
        }
        v104 += 32;
        --v103;
      }
      while (v103);
    }
    else
    {
      uint64_t v105 = (uint8_t *)_swiftEmptyArrayStorage;
    }
    sub_100416558(v186);
    int64_t v113 = *((void *)v105 + 2);
    if (v113)
    {
      uint64_t v189 = (uint8_t *)_swiftEmptyArrayStorage;
      sub_1000B765C(0, v113, 0);
      uid_t v114 = v189;
      uint64_t v115 = (unint64_t *)(v105 + 48);
      do
      {
        uint64_t v116 = *(v115 - 1);
        unint64_t v117 = *v115;
        sub_1000361E0(v116, *v115);
        uint64_t v189 = v114;
        unint64_t v119 = *((void *)v114 + 2);
        unint64_t v118 = *((void *)v114 + 3);
        if (v119 >= v118 >> 1)
        {
          sub_1000B765C(v118 > 1, v119 + 1, 1);
          uid_t v114 = v189;
        }
        v115 += 4;
        *((void *)v114 + 2) = v119 + 1;
        uint64_t v120 = &v114[16 * v119];
        *((void *)v120 + 4) = v116;
        *((void *)v120 + 5) = v117;
        --v113;
      }
      while (v113);
      uint64_t v121 = swift_release();
    }
    else
    {
      uint64_t v121 = swift_release();
      uid_t v114 = (uint8_t *)_swiftEmptyArrayStorage;
    }
    __chkstk_darwin(v121);
    uint64_t v122 = v177;
    *(&v164 - 2) = v177;
    swift_bridgeObjectRetain();
    uint64_t v123 = sub_1000A4754((uint64_t)sub_100416568, (uint64_t)(&v164 - 4), (uint64_t)v114);
    uint64_t v124 = *(void *)(v182 + v174);
    swift_bridgeObjectRetain();
    uint64_t v125 = sub_100411F50(v124, (uint64_t (*)(char *, unint64_t, uint64_t))sub_100412568);
    swift_bridgeObjectRelease();
    uint64_t v126 = sub_1003E14F0(v125);
    swift_release();
    uint64_t v127 = swift_bridgeObjectRetain();
    uint64_t v128 = sub_100411F50(v127, (uint64_t (*)(char *, unint64_t, uint64_t))sub_1004120BC);
    swift_bridgeObjectRelease();
    unint64_t v129 = *(void *)(v128 + 16);
    swift_release();
    uint64_t v189 = (uint8_t *)v123;
    sub_100442E40((uint64_t)v126);
    sub_100416588();
    uint64_t v130 = Array<A>.uniqued()();
    swift_bridgeObjectRelease();
    uint64_t v131 = v172;
    sub_10001D074(v122, (uint64_t)v172, &qword_101643E18);
    uint64_t v132 = v176;
    int v133 = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v175 + 48))(v131, 1, v176);
    uint64_t v134 = v173;
    if (v133 == 1)
    {
      swift_bridgeObjectRelease();
      uint64_t v135 = &qword_101643E18;
      uint64_t v136 = v131;
    }
    else
    {
      unint64_t v186 = v129;
      uint64_t v137 = *(int *)(v132 + 48);
      uint64_t v138 = (uint64_t)v173 + v137;
      uint64_t v139 = (uint64_t)v131 + v137;
      uint64_t v140 = *v131;
      unint64_t v141 = v131[1];
      *uint64_t v173 = v140;
      v134[1] = v141;
      sub_10001D608(v139, (uint64_t)v134 + v137, &qword_10163B9F0);
      uint64_t v142 = *(int *)(v132 + 48);
      uint64_t v143 = v166;
      uint64_t v144 = (uint64_t)v166 + v142;
      *uint64_t v166 = v140;
      v143[1] = v141;
      sub_10001D074(v138, (uint64_t)v143 + v142, &qword_10163B9F0);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v167 + 48))(v144, 1, v168) == 1)
      {
        sub_1000361E0(v140, v141);
        sub_10001DAB4((uint64_t)v134, &qword_10163AB18);
        swift_bridgeObjectRelease();
        sub_10001CFB8(v140, v141);
        uint64_t v135 = &qword_10163B9F0;
        uint64_t v136 = (void *)v144;
      }
      else
      {
        sub_100418690(v144, v169, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        uint64_t v145 = *(int *)(v132 + 48);
        unint64_t v146 = v165;
        uint64_t v147 = (uint64_t)v165 + v145;
        uint64_t *v165 = v140;
        v146[1] = v141;
        sub_10001D074(v138, (uint64_t)v146 + v145, &qword_10163B9F0);
        sub_1000361E0(v140, v141);
        sub_1004D1DEC(v140, v141);
        uint64_t v148 = v140;
        unint64_t v150 = v149;
        sub_10001CFB8(v140, v141);
        char v151 = sub_10027396C(v140, v150, (uint64_t)v114);
        sub_10001CFB8(v148, v150);
        sub_10001DAB4(v147, &qword_10163B9F0);
        swift_bridgeObjectRelease();
        if ((v151 & 1) != 0 || v186)
        {
          uint64_t v154 = v180;
          sub_100418628((uint64_t)v183, v180, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
          unint64_t v155 = (*(unsigned __int8 *)(v178 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v178 + 80);
          unint64_t v156 = (void *)swift_allocObject();
          uint64_t v157 = v185;
          v156[2] = v130;
          v156[3] = v157;
          uint64_t v158 = v184;
          v156[4] = v181;
          v156[5] = v158;
          uint64_t v159 = (uint64_t)v156 + v155;
          uint64_t v160 = v188;
          v156[6] = v188;
          sub_100418690(v154, v159, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
          swift_retain();
          uint64_t v161 = v160;
          swift_retain();
          swift_retain();
          uint64_t v162 = v169;
          uint64_t v163 = v182;
          sub_10040466C(v169, v182, (uint64_t)sub_100416738, (uint64_t)v156);
          swift_release();
          sub_100418B1C(v162, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
          sub_10001DAB4((uint64_t)v173, &qword_10163AB18);
          sub_100418B1C(v163, type metadata accessor for OwnedBeaconGroup);
          uint64_t v153 = (uint64_t)v187;
LABEL_67:
          sub_10001DAB4(v153, &qword_10163BB20);
          os_log_type_t v54 = &qword_101643E18;
          uint64_t v55 = v122;
          return sub_10001DAB4(v55, v54);
        }
        sub_100418B1C(v169, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        uint64_t v135 = &qword_10163AB18;
        uint64_t v136 = v173;
      }
    }
    sub_10001DAB4((uint64_t)v136, v135);
    uint64_t v152 = (uint64_t)v187;
    if (*(void *)(v130 + 16)) {
      sub_1003FBA44(v184, v188, v183, 1, (uint8_t *)v130);
    }
    swift_bridgeObjectRelease();
    sub_100418B1C(v182, type metadata accessor for OwnedBeaconGroup);
    uint64_t v153 = v152;
    goto LABEL_67;
  }
  uint64_t v48 = (uint64_t)v187;
  sub_10001D074((uint64_t)v187, (uint64_t)v31, &qword_10163BB20);
  unsigned int v49 = v46(v31, 1, v21);
  sub_10001DAB4((uint64_t)v31, &qword_10163BB20);
  if (v49 == 1)
  {
    if (qword_101636AC0 != -1) {
      swift_once();
    }
    uint64_t v50 = type metadata accessor for Logger();
    sub_100010324(v50, (uint64_t)qword_10170DE38);
    uint64_t v51 = Logger.logObject.getter();
    os_log_type_t v52 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v51, v52))
    {
      uint64_t v53 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v53 = 0;
      _os_log_impl((void *)&_mh_execute_header, v51, v52, "All parts paired on verifyFindMyNetworkId but there is no beaconGroup. Attempt to re-pair...", v53, 2u);
      swift_slowDealloc();
    }

    sub_1003FBA44(v184, v188, v183, 0, (uint8_t *)_swiftEmptyArrayStorage);
    os_log_type_t v54 = &qword_10163BB20;
    uint64_t v55 = v48;
    return sub_10001DAB4(v55, v54);
  }
  if (qword_101636AC0 != -1) {
    swift_once();
  }
  uint64_t v71 = type metadata accessor for Logger();
  sub_100010324(v71, (uint64_t)qword_10170DE38);
  id v72 = Logger.logObject.getter();
  os_log_type_t v73 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v72, v73))
  {
    uint64_t v74 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v74 = 0;
    _os_log_impl((void *)&_mh_execute_header, v72, v73, "All parts paired on verifyFindMyNetworkId and we have beaconGroup. Check if pairing is pending...", v74, 2u);
    swift_slowDealloc();
  }

  type metadata accessor for Transaction();
  uint64_t v75 = swift_allocObject();
  swift_weakInit();
  uint64_t v76 = v180;
  sub_100418628((uint64_t)v183, v180, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
  unint64_t v77 = (*(unsigned __int8 *)(v178 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v178 + 80);
  unint64_t v78 = (v179 + v77 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v79 = swift_allocObject();
  uint64_t v80 = v188;
  *(void *)(v79 + 16) = v75;
  *(void *)(v79 + 24) = v80;
  sub_100418690(v76, v79 + v77, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
  *(void *)(v79 + v78) = v181;
  *(void *)(v79 + ((v78 + 15) & 0xFFFFFFFFFFFFFFF8)) = v184;
  uint64_t v81 = v80;
  swift_retain();
  swift_retain();
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  swift_release();
  sub_10001DAB4(v48, &qword_10163BB20);
  return swift_release();
}

uint64_t sub_10040B8A8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for BluetoothManagerDevice();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9 - 8);
  type metadata accessor for Transaction();
  uint64_t v12 = swift_allocObject();
  swift_weakInit();
  sub_100418628(a3, (uint64_t)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
  unint64_t v13 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v14 = (v11 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v12;
  *(void *)(v15 + 24) = a2;
  sub_100418690((uint64_t)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v15 + v13, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
  *(void *)(v15 + v14) = a4;
  *(void *)(v15 + ((v14 + 15) & 0xFFFFFFFFFFFFFFF8)) = a5;
  swift_retain();
  id v16 = a2;
  swift_retain();
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  swift_release();
  return swift_release();
}

uint64_t sub_10040BA7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[16] = a4;
  v5[17] = a5;
  v5[14] = a2;
  v5[15] = a3;
  v5[13] = a1;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  v5[18] = v6;
  v5[19] = *(void *)(v6 - 8);
  v5[20] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DispatchQoS();
  v5[21] = v7;
  v5[22] = *(void *)(v7 - 8);
  v5[23] = swift_task_alloc();
  uint64_t v8 = *(void *)(type metadata accessor for BluetoothManagerDevice() - 8);
  unsigned char v5[24] = v8;
  v5[25] = *(void *)(v8 + 64);
  v5[26] = swift_task_alloc();
  v5[27] = swift_task_alloc();
  return _swift_task_switch(sub_10040BC10, 0, 0);
}

uint64_t sub_10040BC10()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  v0[28] = Strong;
  if (Strong)
  {
    uint64_t v2 = (void *)swift_task_alloc();
    v0[29] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10040BD38;
    uint64_t v3 = v0[14];
    return sub_1003FD6EC(v3);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
}

uint64_t sub_10040BD38(char a1)
{
  *(unsigned char *)(*(void *)v1 + 240) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10040BE38, 0, 0);
}

uint64_t sub_10040BE38()
{
  uint64_t v33 = v0;
  if (*((unsigned char *)v0 + 240) == 1)
  {
    uint64_t v2 = v0[27];
    uint64_t v1 = v0[28];
    uint64_t v3 = v0[24];
    uint64_t v4 = v0[25];
    uint64_t v30 = v0[22];
    uint64_t v31 = v0[21];
    uint64_t v26 = v0[23];
    uint64_t v27 = v0[20];
    uint64_t v28 = v0[18];
    uint64_t v5 = v0[16];
    uint64_t v24 = (void *)v0[14];
    uint64_t v25 = v0[17];
    uint64_t v29 = v0[19];
    sub_100418628(v0[15], v2, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
    unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    unint64_t v7 = (v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = v5;
    sub_100418690(v2, v9 + v6, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
    *(void *)(v9 + v7) = v1;
    *(void *)(v9 + v8) = v25;
    *(void *)(v9 + ((v8 + 15) & 0xFFFFFFFFFFFFFFF8)) = v24;
    v0[6] = sub_100417F90;
    v0[7] = v9;
    v0[2] = _NSConcreteStackBlock;
    v0[3] = 1107296256;
    v0[4] = sub_1004B5480;
    v0[5] = &unk_1015BF658;
    uint64_t v10 = _Block_copy(v0 + 2);
    swift_retain();
    swift_retain();
    swift_retain();
    id v11 = v24;
    static DispatchQoS.unspecified.getter();
    v0[12] = _swiftEmptyArrayStorage;
    sub_100414C30((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v10);
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v27, v28);
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v26, v31);
    swift_release();
    swift_release();
  }
  else
  {
    if (qword_101636AC0 != -1) {
      swift_once();
    }
    uint64_t v12 = v0[26];
    uint64_t v13 = v0[15];
    uint64_t v14 = type metadata accessor for Logger();
    sub_100010324(v14, (uint64_t)qword_10170DE38);
    sub_100418628(v13, v12, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    BOOL v17 = os_log_type_enabled(v15, v16);
    uint64_t v18 = v0[26];
    if (v17)
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 136446210;
      uint64_t v20 = sub_1001E0BAC();
      v0[11] = sub_1008FA0F0(v20, v21, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100418B1C(v18, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "FindMy pairing has been completed for %{public}s.", v19, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_release();
    }
    else
    {
      swift_release();
      sub_100418B1C(v18, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v22 = (uint64_t (*)(void))v0[1];
  return v22();
}

uint64_t sub_10040C314(uint64_t *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  uint64_t result = sub_1004CF630(*a1, v5);
  if ((result & 0x1FE) == 0)
  {
    sub_1004D1DEC(v4, v5);
    uint64_t v7 = v4;
    uint64_t v9 = v8;
    uint64_t v10 = (void *)*a3;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    *a3 = (uint64_t)v10;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_100A6EA38(0, v10[2] + 1, 1, v10);
      uint64_t v10 = (void *)result;
      *a3 = result;
    }
    unint64_t v12 = v10[2];
    unint64_t v11 = v10[3];
    if (v12 >= v11 >> 1)
    {
      uint64_t result = (uint64_t)sub_100A6EA38((void *)(v11 > 1), v12 + 1, 1, v10);
      uint64_t v10 = (void *)result;
    }
    _OWORD v10[2] = v12 + 1;
    uint64_t v13 = &v10[2 * v12];
    v13[4] = v7;
    v13[5] = v9;
    *a3 = (uint64_t)v10;
  }
  return result;
}

uint64_t sub_10040C3FC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_101643E18);
  __chkstk_darwin(v4 - 8);
  unint64_t v6 = (uint64_t *)((char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = *a1;
  unint64_t v8 = a1[1];
  sub_10001D074(a2, (uint64_t)v6, &qword_101643E18);
  uint64_t v9 = sub_10000588C(&qword_10163AB18);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v6, 1, v9) == 1)
  {
    sub_1000361E0(v7, v8);
    sub_10001DAB4((uint64_t)v6, &qword_101643E18);
    sub_100037A24(v7, v8);
    sub_100037A24(0, 0xF000000000000000);
    char v10 = 1;
  }
  else
  {
    uint64_t v11 = *v6;
    unint64_t v12 = v6[1];
    uint64_t v13 = (uint64_t)v6 + *(int *)(v9 + 48);
    sub_1000361E0(v7, v8);
    sub_1004D1DEC(v11, v12);
    unint64_t v15 = v14;
    sub_10001CFB8(v11, v12);
    sub_10001DAB4(v13, &qword_10163B9F0);
    sub_1000361E0(v7, v8);
    LOBYTE(v13) = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v7, v8, v11, v15);
    sub_10001CFB8(v11, v15);
    sub_10001CFB8(v7, v8);
    sub_10001CFB8(v7, v8);
    char v10 = v13 ^ 1;
  }
  return v10 & 1;
}

void sub_10040C5C4(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8)
{
  uint64_t v35 = a8;
  uint64_t v36 = a5;
  uint64_t v38 = a7;
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v37 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  unint64_t v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for DispatchQoS();
  uint64_t v39 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for BluetoothManagerDevice();
  uint64_t v34 = *(char **)(v18 - 8);
  uint64_t v19 = *((void *)v34 + 8);
  __chkstk_darwin(v18 - 8);
  uint64_t v40 = v15;
  if ((a2 & 1) == 0)
  {
    if (qword_101636AC0 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100010324(v20, (uint64_t)qword_10170DE38);
    unint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v33 = a3;
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Done force pairing case from verifyFindMyNetworkId", v23, 2u);
      a3 = v33;
      swift_slowDealloc();
    }
  }
  if (*(void *)(a3 + 16))
  {
    uint64_t v33 = *(void *)(a4 + 48);
    sub_100418628(v35, (uint64_t)&v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
    uint64_t v24 = v34[80];
    uint64_t v34 = v17;
    uint64_t v35 = v12;
    uint64_t v25 = (v24 + 48) & ~v24;
    uint64_t v26 = (void *)swift_allocObject();
    v26[2] = v36;
    v26[3] = a4;
    v26[4] = a6;
    uint64_t v27 = v38;
    v26[5] = v38;
    sub_100418690((uint64_t)&v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)v26 + v25, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
    *(void *)((char *)v26 + ((v19 + v25 + 7) & 0xFFFFFFFFFFFFFFF8)) = a3;
    aBlock[4] = sub_10041834C;
    aBlock[5] = v26;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1004B5480;
    aBlock[3] = &unk_1015BF748;
    uint64_t v28 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_retain();
    id v29 = v27;
    swift_bridgeObjectRetain();
    uint64_t v30 = v34;
    static DispatchQoS.unspecified.getter();
    uint64_t v41 = _swiftEmptyArrayStorage;
    sub_100414C30((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v31 = v35;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v28);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v14, v31);
    (*(void (**)(char *, uint64_t))(v39 + 8))(v30, v40);
    swift_release();
  }
}

uint64_t sub_10040CA88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[16] = a4;
  v5[17] = a5;
  v5[14] = a2;
  v5[15] = a3;
  v5[13] = a1;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  v5[18] = v6;
  v5[19] = *(void *)(v6 - 8);
  v5[20] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for DispatchQoS();
  v5[21] = v7;
  v5[22] = *(void *)(v7 - 8);
  v5[23] = swift_task_alloc();
  uint64_t v8 = *(void *)(type metadata accessor for BluetoothManagerDevice() - 8);
  unsigned char v5[24] = v8;
  v5[25] = *(void *)(v8 + 64);
  v5[26] = swift_task_alloc();
  v5[27] = swift_task_alloc();
  return _swift_task_switch(sub_10040CC1C, 0, 0);
}

uint64_t sub_10040CC1C()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  v0[28] = Strong;
  if (Strong)
  {
    uint64_t v2 = (void *)swift_task_alloc();
    v0[29] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10040CD44;
    uint64_t v3 = v0[14];
    return sub_1003FD6EC(v3);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
}

uint64_t sub_10040CD44(char a1)
{
  *(unsigned char *)(*(void *)v1 + 240) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10040CE44, 0, 0);
}

uint64_t sub_10040CE44()
{
  uint64_t v33 = v0;
  if (*((unsigned char *)v0 + 240) == 1)
  {
    uint64_t v2 = v0[27];
    uint64_t v1 = v0[28];
    uint64_t v3 = v0[24];
    uint64_t v4 = v0[25];
    uint64_t v30 = v0[22];
    uint64_t v31 = v0[21];
    uint64_t v26 = v0[23];
    uint64_t v27 = v0[20];
    uint64_t v28 = v0[18];
    uint64_t v5 = v0[16];
    uint64_t v24 = (void *)v0[14];
    uint64_t v25 = v0[17];
    uint64_t v29 = v0[19];
    sub_100418628(v0[15], v2, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
    unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
    unint64_t v7 = (v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v9 = swift_allocObject();
    *(void *)(v9 + 16) = v5;
    sub_100418690(v2, v9 + v6, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
    *(void *)(v9 + v7) = v1;
    *(void *)(v9 + v8) = v25;
    *(void *)(v9 + ((v8 + 15) & 0xFFFFFFFFFFFFFFF8)) = v24;
    v0[6] = sub_100417F90;
    v0[7] = v9;
    v0[2] = _NSConcreteStackBlock;
    v0[3] = 1107296256;
    v0[4] = sub_1004B5480;
    v0[5] = &unk_1015BF798;
    uint64_t v10 = _Block_copy(v0 + 2);
    swift_retain();
    swift_retain();
    swift_retain();
    id v11 = v24;
    static DispatchQoS.unspecified.getter();
    v0[12] = _swiftEmptyArrayStorage;
    sub_100414C30((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v10);
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v27, v28);
    (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v26, v31);
    swift_release();
    swift_release();
  }
  else
  {
    if (qword_101636AC0 != -1) {
      swift_once();
    }
    uint64_t v12 = v0[26];
    uint64_t v13 = v0[15];
    uint64_t v14 = type metadata accessor for Logger();
    sub_100010324(v14, (uint64_t)qword_10170DE38);
    sub_100418628(v13, v12, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    BOOL v17 = os_log_type_enabled(v15, v16);
    uint64_t v18 = v0[26];
    if (v17)
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      uint64_t v32 = swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 136446210;
      uint64_t v20 = sub_1001E0BAC();
      v0[11] = sub_1008FA0F0(v20, v21, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100418B1C(v18, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "FindMy pairing has been completed for %{public}s.", v19, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_release();
    }
    else
    {
      swift_release();
      sub_100418B1C(v18, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
    }
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  os_log_type_t v22 = (uint64_t (*)(void))v0[1];
  return v22();
}

void sub_10040D320(uint64_t a1, uint8_t *a2, uint64_t a3, uint64_t a4, char *a5)
{
  uint64_t v9 = type metadata accessor for BluetoothManagerDevice();
  __chkstk_darwin(v9 - 8);
  id v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  Transaction.capture()();
  if (qword_101636AC0 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100010324(v12, (uint64_t)qword_10170DE38);
  sub_100418628((uint64_t)a2, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = swift_slowAlloc();
    v19[1] = a3;
    os_log_type_t v16 = (uint8_t *)v15;
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v16 = 136446210;
    v19[0] = a2;
    uint64_t v17 = sub_1001E0BAC();
    void v19[2] = sub_1008FA0F0(v17, v18, &v20);
    a2 = (uint8_t *)v19[0];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100418B1C((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "FindMy pairing is not completed for %{public}s. Attempt to pair...", v16, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100418B1C((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for BluetoothManagerDevice);
  }

  sub_1003FBA44(a4, a5, a2, 1, (uint8_t *)_swiftEmptyArrayStorage);
}

uint64_t sub_10040D598(uint64_t *a1, uint64_t (*a2)(void), uint64_t (*a3)(uint64_t), uint64_t (*a4)(void *))
{
  uint64_t v7 = *(void *)(a2(0) - 8);
  uint64_t v8 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v8 = a3(v8);
  }
  uint64_t v9 = *(void *)(v8 + 16);
  v11[0] = v8 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
  v11[1] = v9;
  uint64_t result = a4(v11);
  *a1 = v8;
  return result;
}

Swift::Int sub_10040D65C(void **a1)
{
  uint64_t v2 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  char v287 = (char *)&v266 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v266 - v6;
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v266 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v266 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v273 = (char *)&v266 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  NSString v272 = (char *)&v266 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v280 = (uint64_t)&v266 - v19;
  __chkstk_darwin(v18);
  uint64_t v278 = (uint64_t)&v266 - v20;
  uint64_t v21 = type metadata accessor for Date();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v266 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __chkstk_darwin(v23);
  uint64_t v310 = (char *)&v266 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  NSString v277 = (char *)&v266 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  NSString v283 = (char *)&v266 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v268 = (uint64_t)&v266 - v33;
  __chkstk_darwin(v32);
  uint64_t v271 = (uint64_t)&v266 - v34;
  uint64_t v292 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v285 = *(void *)(v292 - 8);
  uint64_t v35 = __chkstk_darwin(v292);
  uint64_t v276 = (uint64_t)&v266 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = __chkstk_darwin(v35);
  uint64_t v305 = (uint64_t)&v266 - v38;
  uint64_t v39 = __chkstk_darwin(v37);
  uint64_t v313 = (uint64_t)&v266 - v40;
  uint64_t v41 = __chkstk_darwin(v39);
  uint64_t v309 = (uint64_t *)((char *)&v266 - v42);
  uint64_t v43 = __chkstk_darwin(v41);
  uint64_t v286 = (uint64_t)&v266 - v44;
  uint64_t v45 = __chkstk_darwin(v43);
  uint64_t v282 = (uint64_t)&v266 - v46;
  uint64_t v47 = __chkstk_darwin(v45);
  unsigned int v49 = (uint64_t *)((char *)&v266 - v48);
  __chkstk_darwin(v47);
  int v270 = (uint64_t *)((char *)&v266 - v50);
  uint64_t v311 = a1;
  Swift::Int v51 = (Swift::Int)a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v51);
  if (result >= v51)
  {
    if (v51 < 0) {
      goto LABEL_229;
    }
    if (v51) {
      return sub_10041024C(0, v51, 1, v311);
    }
    return result;
  }
  if (v51 >= 0) {
    uint64_t v53 = v51;
  }
  else {
    uint64_t v53 = v51 + 1;
  }
  if (v51 < -1)
  {
LABEL_238:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    JUMPOUT(0x10040F730);
  }
  uint64_t v291 = v7;
  uint64_t v297 = v13;
  Swift::Int v274 = result;
  if (v51 < 2)
  {
    uint64_t v57 = _swiftEmptyArrayStorage;
    NSString v284 = (char *)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v285 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v285 + 80));
    if (v51 != 1)
    {
      unint64_t v60 = _swiftEmptyArrayStorage[2];
      uint64_t v59 = (char *)_swiftEmptyArrayStorage;
      goto LABEL_194;
    }
    uint64_t v267 = v49;
    uint64_t v269 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v267 = v49;
    uint64_t v54 = v53 >> 1;
    uint64_t v55 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v55 + 16) = v54;
    unint64_t v56 = (*(unsigned __int8 *)(v285 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v285 + 80);
    uint64_t v269 = (void *)v55;
    NSString v284 = (char *)(v55 + v56);
  }
  Swift::Int v58 = 0;
  unint64_t v303 = (void (**)(uint64_t, uint64_t))(v22 + 8);
  uint64_t v312 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 56);
  NSString v293 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48);
  uint64_t v288 = (void (**)(char *, uint64_t, uint64_t))(v22 + 32);
  uint64_t v59 = (char *)_swiftEmptyArrayStorage;
  long long v290 = xmmword_101342130;
  uint64_t v295 = v10;
  uint64_t v298 = v21;
  uint64_t v299 = v25;
LABEL_16:
  Swift::Int v61 = v58;
  Swift::Int v62 = v58 + 1;
  uint64_t v279 = v59;
  Swift::Int v281 = v58;
  if (v58 + 1 >= v51)
  {
    uint64_t v130 = (uint64_t)v297;
    Swift::Int v131 = v274;
    goto LABEL_82;
  }
  Swift::Int v63 = v51;
  uint64_t v64 = (char *)*v311;
  Swift::Int v65 = *(void *)(v285 + 72);
  Swift::Int v304 = v58 + 1;
  uint64_t v66 = v270;
  Swift::Int v67 = v58;
  sub_100418628((uint64_t)&v64[v65 * v62], (uint64_t)v270, type metadata accessor for OwnedBeaconGroup);
  NSString v289 = v64;
  Swift::Int v308 = v65;
  uint64_t v68 = (uint64_t)&v64[v65 * v67];
  uint64_t v69 = v267;
  sub_100418628(v68, (uint64_t)v267, type metadata accessor for OwnedBeaconGroup);
  uint64_t v71 = v294;
  sub_100B23648(v66, v271);
  if (v71)
  {
    __break(1u);
    goto LABEL_238;
  }
  uint64_t v73 = v268;
  sub_100B23648(v69, v268);
  uint64_t v294 = 0;
  Swift::Int v51 = v63;
  uint64_t v74 = v271;
  uint64_t v307 = Date.compare(_:)();
  uint64_t v75 = *v303;
  (*v303)(v73, v21);
  uint64_t v306 = v75;
  v75(v74, v21);
  sub_100418B1C((uint64_t)v69, type metadata accessor for OwnedBeaconGroup);
  sub_100418B1C((uint64_t)v270, type metadata accessor for OwnedBeaconGroup);
  Swift::Int v61 = v281;
  Swift::Int v62 = v281 + 2;
  if (v281 + 2 >= v51) {
    goto LABEL_68;
  }
  uint64_t v302 = v308 * v304;
  uint64_t v76 = v289;
  Swift::Int v301 = v308 * v62;
  while (2)
  {
    Swift::Int v304 = v62;
    uint64_t v77 = v282;
    sub_100418628((uint64_t)&v76[v301], v282, type metadata accessor for OwnedBeaconGroup);
    sub_100418628((uint64_t)&v76[v302], v286, type metadata accessor for OwnedBeaconGroup);
    uint64_t v79 = *(void *)v77;
    unint64_t v80 = *(void *)(v77 + 8);
    uint64_t v81 = v78;
    switch(v80 >> 62)
    {
      case 1uLL:
        if ((int)v79 != v79 >> 32) {
          goto LABEL_26;
        }
        goto LABEL_36;
      case 2uLL:
        if (*(void *)(v79 + 16) == *(void *)(v79 + 24)) {
          goto LABEL_36;
        }
LABEL_26:
        sub_1000361E0(*(void *)v77, *(void *)(v77 + 8));
        goto LABEL_27;
      case 3uLL:
        goto LABEL_22;
      default:
        if ((v80 & 0xFF000000000000) == 0)
        {
LABEL_22:
          sub_10001CFB8(*(void *)v77, *(void *)(v77 + 8));
LABEL_36:
          uint64_t v99 = *v312;
          uint64_t v100 = v278;
          (*v312)(v278, 1, 1, v21);
LABEL_37:
          uint64_t v101 = v280;
          Date.init()();
          sub_10001DAB4(v100, (uint64_t *)&unk_10163AC90);
          break;
        }
LABEL_27:
        id v82 = objc_allocWithZone((Class)NSKeyedUnarchiver);
        sub_1000361E0(v79, v80);
        Class isa = Data._bridgeToObjectiveC()().super.isa;
        id v314 = 0;
        id v84 = [v82 initForReadingFromData:isa error:&v314];

        unint64_t v85 = v81;
        if (v84)
        {
          id v86 = v314;
          sub_10001CFB8(v79, v80);
          [v84 _enableStrictSecureDecodingMode];
          id v87 = [objc_allocWithZone((Class)CKRecord) initWithCoder:v84];
          if (v87)
          {
            uint64_t v88 = v87;
          }
          else
          {
            static os_log_type_t.error.getter();
            sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
            uint64_t v96 = (void *)static OS_os_log.default.getter();
            os_log(_:dso:log:_:_:)();

            uint64_t v88 = 0;
          }
        }
        else
        {
          id v89 = v314;
          uint64_t v90 = (void *)_convertNSErrorToError(_:)();

          swift_willThrow();
          sub_10001CFB8(v79, v80);
          LODWORD(v296) = static os_log_type_t.error.getter();
          sub_10000588C((uint64_t *)&unk_10163AD00);
          uint64_t v91 = swift_allocObject();
          *(_OWORD *)(v91 + 16) = v290;
          id v314 = v90;
          swift_errorRetain();
          sub_10000588C(&qword_101638D40);
          uint64_t v92 = String.init<A>(describing:)();
          uint64_t v94 = v93;
          *(void *)(v91 + 56) = &type metadata for String;
          *(void *)(v91 + 64) = sub_10000B4CC();
          *(void *)(v91 + 32) = v92;
          *(void *)(v91 + 40) = v94;
          sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
          uint64_t v95 = (void *)static OS_os_log.default.getter();
          os_log(_:dso:log:_:_:)();
          swift_errorRelease();
          swift_bridgeObjectRelease();

          uint64_t v88 = 0;
          uint64_t v294 = 0;
        }
        uint64_t v21 = v298;
        sub_10001CFB8(v79, v80);
        if (!v88)
        {
          uint64_t v81 = v85;
          goto LABEL_36;
        }
        id v97 = [v88 creationDate];

        uint64_t v81 = v85;
        if (v97)
        {
          uint64_t v98 = v272;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v99 = *v312;
          (*v312)((uint64_t)v98, 0, 1, v21);
        }
        else
        {
          uint64_t v99 = *v312;
          uint64_t v98 = v272;
          (*v312)((uint64_t)v272, 1, 1, v21);
        }
        uint64_t v119 = (uint64_t)v98;
        uint64_t v100 = v278;
        sub_10001D608(v119, v278, (uint64_t *)&unk_10163AC90);
        if ((*v293)(v100, 1, v21) == 1) {
          goto LABEL_37;
        }
        (*v288)(v283, v100, v21);
        uint64_t v101 = v280;
        break;
    }
    uint64_t v103 = *(void *)v286;
    unint64_t v104 = *(void *)(v286 + 8);
    uint64_t v105 = v102;
    switch(v104 >> 62)
    {
      case 1uLL:
        if ((int)v103 != v103 >> 32) {
          goto LABEL_44;
        }
        goto LABEL_42;
      case 2uLL:
        if (*(void *)(v103 + 16) == *(void *)(v103 + 24)) {
          goto LABEL_42;
        }
LABEL_44:
        sub_1000361E0(*(void *)v286, *(void *)(v286 + 8));
        goto LABEL_45;
      case 3uLL:
        goto LABEL_40;
      default:
        if ((v104 & 0xFF000000000000) == 0)
        {
LABEL_40:
          sub_10001CFB8(*(void *)v286, *(void *)(v286 + 8));
LABEL_42:
          uint64_t v59 = v279;
          goto LABEL_57;
        }
LABEL_45:
        NSString v300 = v105;
        id v106 = objc_allocWithZone((Class)NSKeyedUnarchiver);
        sub_1000361E0(v103, v104);
        Class v107 = Data._bridgeToObjectiveC()().super.isa;
        id v314 = 0;
        id v108 = [v106 initForReadingFromData:v107 error:&v314];

        if (v108)
        {
          id v109 = v314;
          sub_10001CFB8(v103, v104);
          [v108 _enableStrictSecureDecodingMode];
          id v110 = [objc_allocWithZone((Class)CKRecord) initWithCoder:v108];
          if (v110)
          {
            unint64_t v111 = v110;
          }
          else
          {
            static os_log_type_t.error.getter();
            sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
            uint64_t v120 = (void *)static OS_os_log.default.getter();
            uint64_t v101 = v280;
            os_log(_:dso:log:_:_:)();

            unint64_t v111 = 0;
          }
        }
        else
        {
          id v112 = v314;
          int64_t v113 = (void *)_convertNSErrorToError(_:)();

          swift_willThrow();
          sub_10001CFB8(v103, v104);
          LODWORD(v294) = static os_log_type_t.error.getter();
          sub_10000588C((uint64_t *)&unk_10163AD00);
          uint64_t v114 = swift_allocObject();
          *(_OWORD *)(v114 + 16) = v290;
          id v314 = v113;
          swift_errorRetain();
          sub_10000588C(&qword_101638D40);
          uint64_t v115 = String.init<A>(describing:)();
          uint64_t v117 = v116;
          *(void *)(v114 + 56) = &type metadata for String;
          *(void *)(v114 + 64) = sub_10000B4CC();
          *(void *)(v114 + 32) = v115;
          *(void *)(v114 + 40) = v117;
          sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
          unint64_t v118 = (void *)static OS_os_log.default.getter();
          os_log(_:dso:log:_:_:)();
          swift_errorRelease();
          swift_bridgeObjectRelease();

          uint64_t v101 = v280;
          unint64_t v111 = 0;
          uint64_t v294 = 0;
        }
        sub_10001CFB8(v103, v104);
        uint64_t v21 = v298;
        if (!v111)
        {
          uint64_t v59 = v279;
          uint64_t v105 = v300;
LABEL_57:
          v99(v101, 1, 1, v21);
LABEL_58:
          uint64_t v124 = v277;
          Date.init()();
          sub_10001DAB4(v101, (uint64_t *)&unk_10163AC90);
          goto LABEL_59;
        }
        id v121 = [v111 creationDate];

        uint64_t v59 = v279;
        if (v121)
        {
          uint64_t v122 = v273;
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          uint64_t v123 = 0;
        }
        else
        {
          uint64_t v123 = 1;
          uint64_t v122 = v273;
        }
        uint64_t v105 = v300;
        v99((uint64_t)v122, v123, 1, v21);
        uint64_t v129 = (uint64_t)v122;
        uint64_t v101 = v280;
        sub_10001D608(v129, v280, (uint64_t *)&unk_10163AC90);
        if ((*v293)(v101, 1, v21) == 1) {
          goto LABEL_58;
        }
        uint64_t v124 = v277;
        (*v288)(v277, v101, v21);
LABEL_59:
        BOOL v125 = v307 == 1;
        uint64_t v126 = v283;
        uint64_t v127 = Date.compare(_:)();
        uint64_t v128 = v306;
        v306((uint64_t)v124, v21);
        v128((uint64_t)v126, v21);
        sub_100418B1C(v286, type metadata accessor for OwnedBeaconGroup);
        sub_100418B1C(v282, type metadata accessor for OwnedBeaconGroup);
        if ((v125 ^ (v127 != 1)))
        {
          Swift::Int v62 = v304 + 1;
          v76 += v308;
          uint64_t v10 = v295;
          if (v51 == v304 + 1)
          {
            Swift::Int v62 = v51;
            goto LABEL_67;
          }
          continue;
        }
        uint64_t v10 = v295;
        Swift::Int v62 = v304;
LABEL_67:
        Swift::Int v61 = v281;
LABEL_68:
        uint64_t v130 = (uint64_t)v297;
        Swift::Int v131 = v274;
        if (v307 == 1)
        {
          if (v62 < v61) {
            goto LABEL_230;
          }
          if (v61 < v62)
          {
            uint64_t v132 = 0;
            uint64_t v133 = v308 * (v62 - 1);
            Swift::Int v134 = v62 * v308;
            Swift::Int v135 = v61;
            uint64_t v136 = v61 * v308;
            Swift::Int v275 = v51;
            do
            {
              if (v135 != v62 + v132 - 1)
              {
                uint64_t v138 = v289;
                if (!v289) {
                  goto LABEL_235;
                }
                uint64_t v139 = &v289[v136];
                uint64_t v307 = (uint64_t)&v289[v133];
                sub_100418690((uint64_t)&v289[v136], v276, type metadata accessor for OwnedBeaconGroup);
                if (v136 < v133 || v139 >= &v138[v134])
                {
                  uint64_t v137 = v307;
                  swift_arrayInitWithTakeFrontToBack();
                }
                else
                {
                  uint64_t v137 = v307;
                  if (v136 != v133) {
                    swift_arrayInitWithTakeBackToFront();
                  }
                }
                sub_100418690(v276, v137, type metadata accessor for OwnedBeaconGroup);
                Swift::Int v131 = v274;
                Swift::Int v51 = v275;
              }
              ++v135;
              --v132;
              v133 -= v308;
              v134 -= v308;
              v136 += v308;
            }
            while (v135 < v62 + v132);
            uint64_t v10 = v295;
            uint64_t v130 = (uint64_t)v297;
            uint64_t v59 = v279;
            Swift::Int v61 = v281;
          }
        }
LABEL_82:
        if (v62 < v51)
        {
          if (__OFSUB__(v62, v61)) {
            goto LABEL_228;
          }
          if (v62 - v61 >= v131)
          {
LABEL_143:
            Swift::Int v61 = v281;
          }
          else
          {
            Swift::Int v61 = v281;
            if (__OFADD__(v281, v131)) {
              goto LABEL_231;
            }
            if (v281 + v131 >= v51) {
              Swift::Int v140 = v51;
            }
            else {
              Swift::Int v140 = v281 + v131;
            }
            if (v140 < v281)
            {
LABEL_232:
              __break(1u);
LABEL_233:
              __break(1u);
LABEL_234:
              __break(1u);
LABEL_235:
              __break(1u);
LABEL_236:
              __break(1u);
            }
            if (v62 != v140)
            {
              unint64_t v141 = *(void **)(v285 + 72);
              uint64_t v142 = (void)v141 * (v62 - 1);
              NSString v300 = v141;
              Swift::Int v143 = v62 * (void)v141;
              Swift::Int v275 = v140;
              while (1)
              {
                uint64_t v145 = 0;
                Swift::Int v146 = v281;
                Swift::Int v304 = v62;
                Swift::Int v301 = v143;
                uint64_t v302 = v142;
                while (2)
                {
                  Swift::Int v308 = v146;
                  uint64_t v147 = *v311;
                  uint64_t v307 = v143 + v145;
                  uint64_t v148 = (uint64_t)v147 + v143 + v145;
                  unint64_t v149 = v309;
                  sub_100418628(v148, (uint64_t)v309, type metadata accessor for OwnedBeaconGroup);
                  uint64_t v306 = (void (*)(uint64_t, uint64_t))(v142 + v145);
                  sub_100418628((uint64_t)v147 + v142 + v145, v313, type metadata accessor for OwnedBeaconGroup);
                  uint64_t v151 = *v149;
                  unint64_t v152 = v149[1];
                  uint64_t v153 = v150;
                  switch(v152 >> 62)
                  {
                    case 1uLL:
                      if ((int)v151 != v151 >> 32) {
                        goto LABEL_102;
                      }
                      goto LABEL_112;
                    case 2uLL:
                      if (*(void *)(v151 + 16) == *(void *)(v151 + 24)) {
                        goto LABEL_112;
                      }
LABEL_102:
                      sub_1000361E0(v151, v152);
                      goto LABEL_103;
                    case 3uLL:
                      goto LABEL_98;
                    default:
                      if ((v152 & 0xFF000000000000) == 0)
                      {
LABEL_98:
                        sub_10001CFB8(v151, v152);
LABEL_112:
                        uint64_t v173 = *v312;
                        (*v312)(v130, 1, 1, v21);
LABEL_113:
                        Date.init()();
                        sub_10001DAB4(v130, (uint64_t *)&unk_10163AC90);
                        break;
                      }
LABEL_103:
                      id v155 = objc_allocWithZone((Class)NSKeyedUnarchiver);
                      sub_1000361E0(v151, v152);
                      Class v156 = Data._bridgeToObjectiveC()().super.isa;
                      id v314 = 0;
                      id v157 = [v155 initForReadingFromData:v156 error:&v314];

                      if (v157)
                      {
                        id v158 = v314;
                        sub_10001CFB8(v151, v152);
                        [v157 _enableStrictSecureDecodingMode];
                        id v159 = [objc_allocWithZone((Class)CKRecord) initWithCoder:v157];
                        if (v159)
                        {
                          uint64_t v160 = v159;
                        }
                        else
                        {
                          static os_log_type_t.error.getter();
                          sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
                          uint64_t v170 = (void *)static OS_os_log.default.getter();
                          os_log(_:dso:log:_:_:)();

                          uint64_t v160 = 0;
                        }
                      }
                      else
                      {
                        id v161 = v314;
                        uint64_t v162 = (void *)_convertNSErrorToError(_:)();

                        swift_willThrow();
                        sub_10001CFB8(v151, v152);
                        static os_log_type_t.error.getter();
                        sub_10000588C((uint64_t *)&unk_10163AD00);
                        uint64_t v163 = swift_allocObject();
                        unint64_t v296 = v154;
                        uint64_t v164 = v153;
                        uint64_t v165 = (void *)v163;
                        *(_OWORD *)(v163 + 16) = v290;
                        id v314 = v162;
                        swift_errorRetain();
                        sub_10000588C(&qword_101638D40);
                        uint64_t v166 = String.init<A>(describing:)();
                        uint64_t v168 = v167;
                        v165[7] = &type metadata for String;
                        v165[8] = sub_10000B4CC();
                        v165[4] = v166;
                        v165[5] = v168;
                        sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
                        uint64_t v169 = (void *)static OS_os_log.default.getter();
                        os_log(_:dso:log:_:_:)();
                        swift_errorRelease();
                        uint64_t v153 = v164;
                        uint64_t v154 = v296;
                        swift_bridgeObjectRelease();

                        uint64_t v160 = 0;
                        uint64_t v294 = 0;
                      }
                      uint64_t v10 = v295;
                      sub_10001CFB8(v151, v152);
                      uint64_t v171 = (uint64_t)v291;
                      uint64_t v21 = v298;
                      if (!v160)
                      {
                        uint64_t v130 = (uint64_t)v297;
                        goto LABEL_112;
                      }
                      id v172 = [v160 creationDate];

                      if (v172)
                      {
                        static Date._unconditionallyBridgeFromObjectiveC(_:)();

                        uint64_t v173 = *v312;
                        (*v312)(v171, 0, 1, v21);
                      }
                      else
                      {
                        uint64_t v173 = *v312;
                        (*v312)(v171, 1, 1, v21);
                      }
                      uint64_t v193 = v171;
                      uint64_t v130 = (uint64_t)v297;
                      sub_10001D608(v193, (uint64_t)v297, (uint64_t *)&unk_10163AC90);
                      if ((*v293)(v130, 1, v21) == 1) {
                        goto LABEL_113;
                      }
                      (*v288)(v310, v130, v21);
                      break;
                  }
                  uint64_t v175 = *(void *)v313;
                  unint64_t v176 = *(void *)(v313 + 8);
                  uint64_t v177 = v174;
                  switch(v176 >> 62)
                  {
                    case 1uLL:
                      if ((int)v175 != v175 >> 32) {
                        goto LABEL_120;
                      }
                      goto LABEL_133;
                    case 2uLL:
                      if (*(void *)(v175 + 16) == *(void *)(v175 + 24)) {
                        goto LABEL_133;
                      }
LABEL_120:
                      sub_1000361E0(*(void *)v313, *(void *)(v313 + 8));
                      goto LABEL_121;
                    case 3uLL:
                      goto LABEL_116;
                    default:
                      if ((v176 & 0xFF000000000000) == 0)
                      {
LABEL_116:
                        sub_10001CFB8(*(void *)v313, *(void *)(v313 + 8));
                        goto LABEL_133;
                      }
LABEL_121:
                      unint64_t v296 = v177;
                      id v179 = objc_allocWithZone((Class)NSKeyedUnarchiver);
                      sub_1000361E0(v175, v176);
                      Class v180 = Data._bridgeToObjectiveC()().super.isa;
                      id v314 = 0;
                      id v181 = [v179 initForReadingFromData:v180 error:&v314];

                      if (v181)
                      {
                        id v182 = v314;
                        sub_10001CFB8(v175, v176);
                        [v181 _enableStrictSecureDecodingMode];
                        id v183 = [objc_allocWithZone((Class)CKRecord) initWithCoder:v181];
                        if (v183)
                        {
                          uint64_t v184 = v183;
                        }
                        else
                        {
                          static os_log_type_t.error.getter();
                          sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
                          Class v194 = (void *)static OS_os_log.default.getter();
                          os_log(_:dso:log:_:_:)();

                          uint64_t v184 = 0;
                        }
                      }
                      else
                      {
                        id v185 = v314;
                        unint64_t v186 = (void *)_convertNSErrorToError(_:)();

                        swift_willThrow();
                        sub_10001CFB8(v175, v176);
                        static os_log_type_t.error.getter();
                        sub_10000588C((uint64_t *)&unk_10163AD00);
                        uint64_t v187 = swift_allocObject();
                        NSString v289 = v178;
                        uint64_t v188 = (void *)v187;
                        *(_OWORD *)(v187 + 16) = v290;
                        id v314 = v186;
                        swift_errorRetain();
                        sub_10000588C(&qword_101638D40);
                        uint64_t v189 = String.init<A>(describing:)();
                        uint64_t v191 = v190;
                        v188[7] = &type metadata for String;
                        v188[8] = sub_10000B4CC();
                        v188[4] = v189;
                        v188[5] = v191;
                        uint64_t v10 = v295;
                        sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
                        uint64_t v192 = (void *)static OS_os_log.default.getter();
                        os_log(_:dso:log:_:_:)();
                        swift_errorRelease();
                        uint64_t v178 = v289;
                        swift_bridgeObjectRelease();

                        uint64_t v184 = 0;
                        uint64_t v294 = 0;
                      }
                      sub_10001CFB8(v175, v176);
                      uint64_t v130 = (uint64_t)v297;
                      uint64_t v21 = v298;
                      if (!v184)
                      {
                        uint64_t v177 = v296;
LABEL_133:
                        v173((uint64_t)v10, 1, 1, v21);
                        Class v198 = v299;
LABEL_134:
                        Date.init()();
                        uint64_t v199 = v10;
                        sub_10001DAB4((uint64_t)v10, (uint64_t *)&unk_10163AC90);
                        goto LABEL_135;
                      }
                      id v195 = [v184 creationDate];

                      if (v195)
                      {
                        uint64_t v196 = (uint64_t)v287;
                        static Date._unconditionallyBridgeFromObjectiveC(_:)();

                        uint64_t v197 = 0;
                      }
                      else
                      {
                        uint64_t v197 = 1;
                        uint64_t v196 = (uint64_t)v287;
                      }
                      Class v198 = v299;
                      v173(v196, v197, 1, v21);
                      sub_10001D608(v196, (uint64_t)v10, (uint64_t *)&unk_10163AC90);
                      if ((*v293)((uint64_t)v10, 1, v21) == 1)
                      {
                        uint64_t v177 = v296;
                        goto LABEL_134;
                      }
                      uint64_t v199 = v10;
                      (*v288)(v198, (uint64_t)v10, v21);
                      uint64_t v177 = v296;
LABEL_135:
                      uint64_t v200 = v310;
                      uint64_t v201 = Date.compare(_:)();
                      int v202 = *v303;
                      (*v303)((uint64_t)v198, v21);
                      v202((uint64_t)v200, v21);
                      sub_100418B1C(v313, type metadata accessor for OwnedBeaconGroup);
                      sub_100418B1C((uint64_t)v309, type metadata accessor for OwnedBeaconGroup);
                      if (v201 == 1)
                      {
                        uint64_t v203 = *v311;
                        Swift::Int v143 = v301;
                        uint64_t v142 = v302;
                        if (!*v311) {
                          goto LABEL_233;
                        }
                        uint64_t v204 = (uint64_t)v203 + v302 + v145;
                        sub_100418690((uint64_t)v203 + v301 + v145, v305, type metadata accessor for OwnedBeaconGroup);
                        uint64_t v10 = v199;
                        swift_arrayInitWithTakeFrontToBack();
                        sub_100418690(v305, v204, type metadata accessor for OwnedBeaconGroup);
                        v145 -= (uint64_t)v300;
                        Swift::Int v146 = v308 + 1;
                        Swift::Int v144 = v304;
                        if (v304 == v308 + 1) {
                          goto LABEL_93;
                        }
                        continue;
                      }
                      Swift::Int v144 = v304;
                      uint64_t v10 = v199;
                      Swift::Int v143 = v301;
                      uint64_t v142 = v302;
LABEL_93:
                      Swift::Int v62 = v144 + 1;
                      v142 += (uint64_t)v300;
                      v143 += (Swift::Int)v300;
                      if (v62 == v275)
                      {
                        Swift::Int v62 = v275;
                        uint64_t v59 = v279;
                        goto LABEL_143;
                      }
                      break;
                  }
                  break;
                }
              }
            }
          }
        }
        if (v62 < v61) {
          goto LABEL_223;
        }
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        Swift::Int v304 = v62;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          uint64_t v59 = sub_100B729CC(0, *((void *)v59 + 2) + 1, 1, v59);
        }
        unint64_t v207 = *((void *)v59 + 2);
        unint64_t v206 = *((void *)v59 + 3);
        unint64_t v60 = v207 + 1;
        if (v207 >= v206 >> 1) {
          uint64_t v59 = sub_100B729CC((char *)(v206 > 1), v207 + 1, 1, v59);
        }
        *((void *)v59 + 2) = v60;
        unint64_t v208 = v59 + 32;
        uint64_t v209 = &v59[16 * v207 + 32];
        Swift::Int v210 = v304;
        *(void *)uint64_t v209 = v281;
        *((void *)v209 + 1) = v210;
        if (v207)
        {
          while (2)
          {
            unint64_t v211 = v60 - 1;
            if (v60 >= 4)
            {
              id v216 = &v208[16 * v60];
              uint64_t v217 = *((void *)v216 - 8);
              uint64_t v218 = *((void *)v216 - 7);
              BOOL v222 = __OFSUB__(v218, v217);
              uint64_t v219 = v218 - v217;
              if (v222) {
                goto LABEL_212;
              }
              uint64_t v221 = *((void *)v216 - 6);
              uint64_t v220 = *((void *)v216 - 5);
              BOOL v222 = __OFSUB__(v220, v221);
              uint64_t v214 = v220 - v221;
              char v215 = v222;
              if (v222) {
                goto LABEL_213;
              }
              unint64_t v223 = v60 - 2;
              uint64_t v224 = &v208[16 * v60 - 32];
              uint64_t v226 = *(void *)v224;
              uint64_t v225 = *((void *)v224 + 1);
              BOOL v222 = __OFSUB__(v225, v226);
              uint64_t v227 = v225 - v226;
              if (v222) {
                goto LABEL_215;
              }
              BOOL v222 = __OFADD__(v214, v227);
              uint64_t v228 = v214 + v227;
              if (v222) {
                goto LABEL_218;
              }
              if (v228 >= v219)
              {
                uint64_t v246 = &v208[16 * v211];
                uint64_t v248 = *(void *)v246;
                uint64_t v247 = *((void *)v246 + 1);
                BOOL v222 = __OFSUB__(v247, v248);
                uint64_t v249 = v247 - v248;
                if (v222) {
                  goto LABEL_222;
                }
                BOOL v239 = v214 < v249;
              }
              else
              {
LABEL_163:
                if (v215) {
                  goto LABEL_214;
                }
                unint64_t v223 = v60 - 2;
                uint64_t v229 = &v208[16 * v60 - 32];
                uint64_t v231 = *(void *)v229;
                uint64_t v230 = *((void *)v229 + 1);
                BOOL v232 = __OFSUB__(v230, v231);
                uint64_t v233 = v230 - v231;
                char v234 = v232;
                if (v232) {
                  goto LABEL_217;
                }
                uint64_t v235 = &v208[16 * v211];
                uint64_t v237 = *(void *)v235;
                uint64_t v236 = *((void *)v235 + 1);
                BOOL v222 = __OFSUB__(v236, v237);
                uint64_t v238 = v236 - v237;
                if (v222) {
                  goto LABEL_220;
                }
                if (__OFADD__(v233, v238)) {
                  goto LABEL_221;
                }
                if (v233 + v238 < v214) {
                  goto LABEL_175;
                }
                BOOL v239 = v214 < v238;
              }
              if (v239) {
                unint64_t v211 = v223;
              }
            }
            else
            {
              if (v60 == 3)
              {
                uint64_t v213 = *((void *)v59 + 4);
                uint64_t v212 = *((void *)v59 + 5);
                BOOL v222 = __OFSUB__(v212, v213);
                uint64_t v214 = v212 - v213;
                char v215 = v222;
                goto LABEL_163;
              }
              uint64_t v240 = *((void *)v59 + 4);
              uint64_t v241 = *((void *)v59 + 5);
              BOOL v222 = __OFSUB__(v241, v240);
              uint64_t v233 = v241 - v240;
              char v234 = v222;
LABEL_175:
              if (v234) {
                goto LABEL_216;
              }
              uint64_t v242 = &v208[16 * v211];
              uint64_t v244 = *(void *)v242;
              uint64_t v243 = *((void *)v242 + 1);
              BOOL v222 = __OFSUB__(v243, v244);
              uint64_t v245 = v243 - v244;
              if (v222) {
                goto LABEL_219;
              }
              if (v245 < v233) {
                goto LABEL_15;
              }
            }
            unint64_t v250 = v211 - 1;
            if (v211 - 1 >= v60)
            {
              __break(1u);
LABEL_209:
              __break(1u);
LABEL_210:
              __break(1u);
LABEL_211:
              __break(1u);
LABEL_212:
              __break(1u);
LABEL_213:
              __break(1u);
LABEL_214:
              __break(1u);
LABEL_215:
              __break(1u);
LABEL_216:
              __break(1u);
LABEL_217:
              __break(1u);
LABEL_218:
              __break(1u);
LABEL_219:
              __break(1u);
LABEL_220:
              __break(1u);
LABEL_221:
              __break(1u);
LABEL_222:
              __break(1u);
LABEL_223:
              __break(1u);
LABEL_224:
              __break(1u);
LABEL_225:
              __break(1u);
LABEL_226:
              __break(1u);
LABEL_227:
              __break(1u);
LABEL_228:
              __break(1u);
LABEL_229:
              __break(1u);
LABEL_230:
              __break(1u);
LABEL_231:
              __break(1u);
              goto LABEL_232;
            }
            if (!*v311) {
              goto LABEL_234;
            }
            NSString v251 = v59;
            NSString v252 = &v208[16 * v250];
            uint64_t v253 = *(void *)v252;
            NSString v254 = &v208[16 * v211];
            uint64_t v255 = *((void *)v254 + 1);
            uint64_t v256 = v294;
            sub_10041123C((unint64_t)*v311 + *(void *)(v285 + 72) * *(void *)v252, (unint64_t)*v311 + *(void *)(v285 + 72) * *(void *)v254, (unint64_t)*v311 + *(void *)(v285 + 72) * v255, v284);
            uint64_t v294 = v256;
            if (v256)
            {
LABEL_191:
              swift_bridgeObjectRelease();
              v269[2] = 0;
              return swift_bridgeObjectRelease();
            }
            if (v255 < v253) {
              goto LABEL_209;
            }
            if (v211 > *((void *)v251 + 2)) {
              goto LABEL_210;
            }
            *(void *)NSString v252 = v253;
            *(void *)&v208[16 * v250 + 8] = v255;
            unint64_t v257 = *((void *)v251 + 2);
            if (v211 >= v257) {
              goto LABEL_211;
            }
            uint64_t v59 = v251;
            unint64_t v60 = v257 - 1;
            memmove(&v208[16 * v211], v254 + 16, 16 * (v257 - 1 - v211));
            *((void *)v251 + 2) = v257 - 1;
            BOOL v239 = v257 > 2;
            uint64_t v10 = v295;
            if (!v239) {
              goto LABEL_15;
            }
            continue;
          }
        }
        unint64_t v60 = 1;
LABEL_15:
        Swift::Int v51 = (Swift::Int)v311[1];
        Swift::Int v58 = v304;
        if (v304 < v51) {
          goto LABEL_16;
        }
        uint64_t v57 = v269;
LABEL_194:
        uint64_t v258 = v294;
        uint64_t v259 = v285;
        if (v60 >= 2)
        {
          id v260 = *v311;
          uint64_t v269 = v57;
          do
          {
            unint64_t v261 = v60 - 2;
            if (v60 < 2) {
              goto LABEL_224;
            }
            if (!v260) {
              goto LABEL_236;
            }
            uint64_t v262 = *(void *)&v59[16 * v261 + 32];
            uint64_t v263 = *(void *)&v59[16 * v60 + 24];
            sub_10041123C((unint64_t)v260 + *(void *)(v259 + 72) * v262, (unint64_t)v260 + *(void *)(v259 + 72) * *(void *)&v59[16 * v60 + 16], (unint64_t)v260 + *(void *)(v259 + 72) * v263, v284);
            if (v258) {
              goto LABEL_191;
            }
            if (v263 < v262) {
              goto LABEL_225;
            }
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v59 = sub_100B73584((uint64_t)v59);
            }
            if (v261 >= *((void *)v59 + 2)) {
              goto LABEL_226;
            }
            NSString v264 = &v59[16 * v261 + 32];
            *(void *)NSString v264 = v262;
            *((void *)v264 + 1) = v263;
            unint64_t v265 = *((void *)v59 + 2);
            if (v60 > v265) {
              goto LABEL_227;
            }
            memmove(&v59[16 * v60 + 16], &v59[16 * v60 + 32], 16 * (v265 - v60));
            *((void *)v59 + 2) = v265 - 1;
            unint64_t v60 = v265 - 1;
            uint64_t v57 = v269;
          }
          while (v265 > 2);
        }
        swift_bridgeObjectRelease();
        v57[2] = 0;
        return swift_bridgeObjectRelease();
    }
  }
}

Swift::Int sub_10040F770(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v141 = type metadata accessor for StandaloneBeacon();
  uint64_t v134 = *(void *)(v141 - 8);
  uint64_t v4 = __chkstk_darwin(v141);
  uint64_t v131 = (uint64_t)&v125 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v142 = (uint64_t)&v125 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v138 = (uint64_t)&v125 - v9;
  __chkstk_darwin(v8);
  uint64_t v137 = (uint64_t)&v125 - v10;
  Swift::Int v11 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v11);
  if (result >= v11)
  {
    if (v11 < 0) {
      goto LABEL_142;
    }
    if (v11) {
      return sub_100410F78(0, v11, 1, a1);
    }
    return result;
  }
  if (v11 >= 0) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v11 + 1;
  }
  if (v11 < -1) {
    goto LABEL_150;
  }
  Swift::Int v127 = result;
  if (v11 < 2)
  {
    uint64_t v17 = _swiftEmptyArrayStorage;
    unint64_t v133 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v134 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v134 + 80));
    if (v11 != 1)
    {
      unint64_t v20 = _swiftEmptyArrayStorage[2];
      uint64_t v19 = (char *)_swiftEmptyArrayStorage;
LABEL_107:
      uint64_t v126 = v17;
      if (v20 >= 2)
      {
        Swift::Int v117 = *a1;
        do
        {
          unint64_t v118 = v20 - 2;
          if (v20 < 2) {
            goto LABEL_137;
          }
          if (!v117) {
            goto LABEL_149;
          }
          uint64_t v119 = v19;
          uint64_t v120 = v19 + 32;
          uint64_t v121 = *(void *)&v19[16 * v118 + 32];
          uint64_t v122 = *(void *)&v19[16 * v20 + 24];
          sub_100411A34(v117 + *(void *)(v134 + 72) * v121, v117 + *(void *)(v134 + 72) * *(void *)&v120[16 * v20 - 16], v117 + *(void *)(v134 + 72) * v122, v133);
          if (v2) {
            break;
          }
          if (v122 < v121) {
            goto LABEL_138;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v119 = sub_100B73584((uint64_t)v119);
          }
          if (v118 >= *((void *)v119 + 2)) {
            goto LABEL_139;
          }
          uint64_t v123 = &v119[16 * v118 + 32];
          *(void *)uint64_t v123 = v121;
          *((void *)v123 + 1) = v122;
          unint64_t v124 = *((void *)v119 + 2);
          if (v20 > v124) {
            goto LABEL_140;
          }
          uint64_t v19 = v119;
          memmove(&v119[16 * v20 + 16], &v119[16 * v20 + 32], 16 * (v124 - v20));
          *((void *)v119 + 2) = v124 - 1;
          unint64_t v20 = v124 - 1;
        }
        while (v124 > 2);
      }
LABEL_118:
      swift_bridgeObjectRelease();
      v126[2] = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v126 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v14 = v13 >> 1;
    uint64_t v15 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v15 + 16) = v14;
    uint64_t v16 = *(unsigned __int8 *)(v134 + 80);
    uint64_t v126 = (void *)v15;
    unint64_t v133 = v15 + ((v16 + 32) & ~v16);
  }
  Swift::Int v18 = 0;
  uint64_t v19 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v140 = a1;
  while (1)
  {
    Swift::Int v21 = v18;
    Swift::Int v22 = v18 + 1;
    Swift::Int v132 = v18;
    if (v18 + 1 >= v11)
    {
      Swift::Int v39 = v18 + 1;
      goto LABEL_59;
    }
    uint64_t v129 = v2;
    Swift::Int v23 = *(void *)(v134 + 72);
    uint64_t v24 = *a1 + v23 * v22;
    Swift::Int v136 = *a1;
    Swift::Int v25 = v136;
    uint64_t v26 = v137;
    sub_100418628(v24, v137, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
    uint64_t v27 = v25 + v23 * v21;
    uint64_t v28 = v138;
    sub_100418628(v27, v138, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
    LODWORD(v139) = static Date.< infix(_:_:)();
    sub_100418B1C(v28, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
    uint64_t v29 = v26;
    Swift::Int v30 = v136;
    sub_100418B1C(v29, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
    Swift::Int v143 = v23;
    if (v21 + 2 >= v11)
    {
      Swift::Int v33 = v21 + 2;
    }
    else
    {
      Swift::Int v31 = v23;
      uint64_t v128 = v19;
      uint64_t v32 = v23 * v22;
      Swift::Int v33 = v21 + 2;
      uint64_t v34 = v31 * (v21 + 2);
      while (1)
      {
        Swift::Int v35 = v11;
        uint64_t v36 = v137;
        sub_100418628(v30 + v34, v137, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
        uint64_t v37 = v138;
        sub_100418628(v30 + v32, v138, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
        int v38 = static Date.< infix(_:_:)();
        sub_100418B1C(v37, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
        sub_100418B1C(v36, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
        if ((v139 ^ v38)) {
          break;
        }
        v30 += v143;
        ++v33;
        Swift::Int v11 = v35;
        if (v35 == v33)
        {
          Swift::Int v33 = v35;
          uint64_t v19 = v128;
          Swift::Int v21 = v132;
          goto LABEL_25;
        }
      }
      uint64_t v19 = v128;
      Swift::Int v21 = v132;
      Swift::Int v11 = v35;
    }
LABEL_25:
    a1 = v140;
    if ((v139 & 1) == 0)
    {
      Swift::Int v39 = v33;
      goto LABEL_39;
    }
    if (v33 < v21) {
      goto LABEL_143;
    }
    Swift::Int v39 = v33;
    if (v21 < v33) {
      break;
    }
LABEL_39:
    uint64_t v2 = v129;
    if (v39 < v11) {
      goto LABEL_42;
    }
LABEL_59:
    if (v39 < v21) {
      goto LABEL_136;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    Swift::Int v139 = v39;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      uint64_t v19 = sub_100B729CC(0, *((void *)v19 + 2) + 1, 1, v19);
    }
    unint64_t v66 = *((void *)v19 + 2);
    unint64_t v65 = *((void *)v19 + 3);
    unint64_t v20 = v66 + 1;
    if (v66 >= v65 >> 1) {
      uint64_t v19 = sub_100B729CC((char *)(v65 > 1), v66 + 1, 1, v19);
    }
    *((void *)v19 + 2) = v20;
    Swift::Int v67 = v19 + 32;
    uint64_t v68 = &v19[16 * v66 + 32];
    Swift::Int v69 = v139;
    *(void *)uint64_t v68 = v21;
    *((void *)v68 + 1) = v69;
    if (v66)
    {
      while (1)
      {
        unint64_t v70 = v20 - 1;
        if (v20 >= 4)
        {
          uint64_t v75 = &v67[16 * v20];
          uint64_t v76 = *((void *)v75 - 8);
          uint64_t v77 = *((void *)v75 - 7);
          BOOL v81 = __OFSUB__(v77, v76);
          uint64_t v78 = v77 - v76;
          if (v81) {
            goto LABEL_125;
          }
          uint64_t v80 = *((void *)v75 - 6);
          uint64_t v79 = *((void *)v75 - 5);
          BOOL v81 = __OFSUB__(v79, v80);
          uint64_t v73 = v79 - v80;
          char v74 = v81;
          if (v81) {
            goto LABEL_126;
          }
          unint64_t v82 = v20 - 2;
          uint64_t v83 = &v67[16 * v20 - 32];
          uint64_t v85 = *(void *)v83;
          uint64_t v84 = *((void *)v83 + 1);
          BOOL v81 = __OFSUB__(v84, v85);
          uint64_t v86 = v84 - v85;
          if (v81) {
            goto LABEL_128;
          }
          BOOL v81 = __OFADD__(v73, v86);
          uint64_t v87 = v73 + v86;
          if (v81) {
            goto LABEL_131;
          }
          if (v87 >= v78)
          {
            uint64_t v105 = &v67[16 * v70];
            uint64_t v107 = *(void *)v105;
            uint64_t v106 = *((void *)v105 + 1);
            BOOL v81 = __OFSUB__(v106, v107);
            uint64_t v108 = v106 - v107;
            if (v81) {
              goto LABEL_135;
            }
            BOOL v98 = v73 < v108;
            goto LABEL_96;
          }
        }
        else
        {
          if (v20 != 3)
          {
            uint64_t v99 = *((void *)v19 + 4);
            uint64_t v100 = *((void *)v19 + 5);
            BOOL v81 = __OFSUB__(v100, v99);
            uint64_t v92 = v100 - v99;
            char v93 = v81;
            goto LABEL_90;
          }
          uint64_t v72 = *((void *)v19 + 4);
          uint64_t v71 = *((void *)v19 + 5);
          BOOL v81 = __OFSUB__(v71, v72);
          uint64_t v73 = v71 - v72;
          char v74 = v81;
        }
        if (v74) {
          goto LABEL_127;
        }
        unint64_t v82 = v20 - 2;
        uint64_t v88 = &v67[16 * v20 - 32];
        uint64_t v90 = *(void *)v88;
        uint64_t v89 = *((void *)v88 + 1);
        BOOL v91 = __OFSUB__(v89, v90);
        uint64_t v92 = v89 - v90;
        char v93 = v91;
        if (v91) {
          goto LABEL_130;
        }
        uint64_t v94 = &v67[16 * v70];
        uint64_t v96 = *(void *)v94;
        uint64_t v95 = *((void *)v94 + 1);
        BOOL v81 = __OFSUB__(v95, v96);
        uint64_t v97 = v95 - v96;
        if (v81) {
          goto LABEL_133;
        }
        if (__OFADD__(v92, v97)) {
          goto LABEL_134;
        }
        if (v92 + v97 >= v73)
        {
          BOOL v98 = v73 < v97;
LABEL_96:
          if (v98) {
            unint64_t v70 = v82;
          }
          goto LABEL_98;
        }
LABEL_90:
        if (v93) {
          goto LABEL_129;
        }
        uint64_t v101 = &v67[16 * v70];
        uint64_t v103 = *(void *)v101;
        uint64_t v102 = *((void *)v101 + 1);
        BOOL v81 = __OFSUB__(v102, v103);
        uint64_t v104 = v102 - v103;
        if (v81) {
          goto LABEL_132;
        }
        if (v104 < v92) {
          goto LABEL_15;
        }
LABEL_98:
        unint64_t v109 = v70 - 1;
        if (v70 - 1 >= v20)
        {
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
          goto LABEL_145;
        }
        Swift::Int v110 = *a1;
        if (!*a1) {
          goto LABEL_147;
        }
        unint64_t v111 = v19;
        id v112 = &v67[16 * v109];
        uint64_t v113 = *(void *)v112;
        uint64_t v114 = &v67[16 * v70];
        uint64_t v115 = *((void *)v114 + 1);
        sub_100411A34(v110 + *(void *)(v134 + 72) * *(void *)v112, v110 + *(void *)(v134 + 72) * *(void *)v114, v110 + *(void *)(v134 + 72) * v115, v133);
        if (v2) {
          goto LABEL_118;
        }
        if (v115 < v113) {
          goto LABEL_122;
        }
        if (v70 > *((void *)v111 + 2)) {
          goto LABEL_123;
        }
        *(void *)id v112 = v113;
        *(void *)&v67[16 * v109 + 8] = v115;
        unint64_t v116 = *((void *)v111 + 2);
        if (v70 >= v116) {
          goto LABEL_124;
        }
        uint64_t v19 = v111;
        unint64_t v20 = v116 - 1;
        memmove(&v67[16 * v70], v114 + 16, 16 * (v116 - 1 - v70));
        *((void *)v111 + 2) = v116 - 1;
        a1 = v140;
        if (v116 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v20 = 1;
LABEL_15:
    Swift::Int v11 = a1[1];
    Swift::Int v18 = v139;
    if (v139 >= v11)
    {
      uint64_t v17 = v126;
      goto LABEL_107;
    }
  }
  Swift::Int v139 = v11;
  uint64_t v128 = v19;
  uint64_t v40 = 0;
  Swift::Int v41 = v143;
  uint64_t v42 = v143 * (v33 - 1);
  Swift::Int v43 = v33 * v143;
  Swift::Int v44 = v21;
  uint64_t v45 = v21 * v143;
  do
  {
    if (v44 != v39 + v40 - 1)
    {
      Swift::Int v46 = v136;
      if (!v136) {
        goto LABEL_148;
      }
      unint64_t v47 = v136 + v45;
      uint64_t v48 = v136 + v42;
      sub_100418690(v136 + v45, v131, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
      if (v45 < v42 || v47 >= v46 + v43)
      {
        swift_arrayInitWithTakeFrontToBack();
        Swift::Int v41 = v143;
      }
      else
      {
        Swift::Int v41 = v143;
        if (v45 != v42) {
          swift_arrayInitWithTakeBackToFront();
        }
      }
      sub_100418690(v131, v48, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
      a1 = v140;
      Swift::Int v39 = v33;
    }
    ++v44;
    --v40;
    v42 -= v41;
    v43 -= v41;
    v45 += v41;
  }
  while (v44 < v39 + v40);
  uint64_t v19 = v128;
  uint64_t v2 = v129;
  Swift::Int v21 = v132;
  Swift::Int v11 = v139;
  if (v39 >= v139) {
    goto LABEL_59;
  }
LABEL_42:
  if (__OFSUB__(v39, v21)) {
    goto LABEL_141;
  }
  if (v39 - v21 >= v127) {
    goto LABEL_59;
  }
  if (__OFADD__(v21, v127)) {
    goto LABEL_144;
  }
  if (v21 + v127 >= v11) {
    Swift::Int v49 = v11;
  }
  else {
    Swift::Int v49 = v21 + v127;
  }
  if (v49 >= v21)
  {
    if (v39 != v49)
    {
      uint64_t v128 = v19;
      uint64_t v129 = v2;
      uint64_t v50 = *(void *)(v134 + 72);
      uint64_t v51 = v50 * (v39 - 1);
      uint64_t v135 = v50;
      Swift::Int v52 = v39 * v50;
      Swift::Int v130 = v49;
      do
      {
        uint64_t v54 = 0;
        Swift::Int v139 = v39;
        Swift::Int v136 = v52;
        while (1)
        {
          Swift::Int v143 = v21;
          Swift::Int v55 = *a1;
          uint64_t v56 = v137;
          sub_100418628(v52 + v54 + *a1, v137, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
          uint64_t v57 = v51;
          uint64_t v58 = v51 + v54 + v55;
          uint64_t v59 = a1;
          uint64_t v60 = v138;
          sub_100418628(v58, v138, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
          char v61 = static Date.< infix(_:_:)();
          sub_100418B1C(v60, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
          sub_100418B1C(v56, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
          if ((v61 & 1) == 0) {
            break;
          }
          uint64_t v62 = *v59;
          if (!*v59) {
            goto LABEL_146;
          }
          Swift::Int v52 = v136;
          uint64_t v51 = v57;
          uint64_t v63 = v62 + v57 + v54;
          sub_100418690(v62 + v136 + v54, v142, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
          swift_arrayInitWithTakeFrontToBack();
          sub_100418690(v142, v63, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
          v54 -= v135;
          Swift::Int v21 = v143 + 1;
          Swift::Int v53 = v139;
          a1 = v140;
          if (v139 == v143 + 1) {
            goto LABEL_52;
          }
        }
        Swift::Int v53 = v139;
        a1 = v59;
        uint64_t v51 = v57;
        Swift::Int v52 = v136;
LABEL_52:
        Swift::Int v39 = v53 + 1;
        v51 += v135;
        v52 += v135;
        Swift::Int v21 = v132;
      }
      while (v39 != v130);
      Swift::Int v39 = v130;
      uint64_t v19 = v128;
      uint64_t v2 = v129;
    }
    goto LABEL_59;
  }
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10041024C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v96 = a1;
  uint64_t v7 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v10 = (char *)&v94 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v94 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v94 - v15;
  __chkstk_darwin(v14);
  unint64_t v109 = (char *)&v94 - v17;
  uint64_t v113 = type metadata accessor for Date();
  uint64_t v18 = *(void *)(v113 - 8);
  uint64_t v19 = __chkstk_darwin(v113);
  Swift::Int v21 = (char *)&v94 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v121 = (char *)&v94 - v22;
  uint64_t v102 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v23 = __chkstk_darwin(v102);
  uint64_t v114 = (uint64_t)&v94 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v94 - v26;
  uint64_t result = __chkstk_darwin(v25);
  uint64_t v120 = (uint64_t *)((char *)&v94 - v30);
  uint64_t v95 = a2;
  if (a3 != a2)
  {
    BOOL v98 = v13;
    uint64_t v99 = v10;
    uint64_t v119 = (void **)(v18 + 56);
    uint64_t v103 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
    uint64_t v31 = *(void *)(v29 + 72);
    uint64_t v97 = (void (**)(char *, uint64_t, uint64_t))(v18 + 32);
    uint64_t v106 = (void (**)(char *, uint64_t))(v18 + 8);
    uint64_t v110 = v31;
    uint64_t v122 = v31 * a3;
    uint64_t v123 = v31 * (a3 - 1);
    long long v100 = xmmword_101342130;
    uint64_t v104 = a4;
    uint64_t v32 = v113;
    id v112 = v27;
    uint64_t v107 = v21;
    uint64_t v108 = v16;
    while (1)
    {
      uint64_t v34 = 0;
      uint64_t v35 = v96;
      uint64_t v111 = a3;
      while (2)
      {
        uint64_t v115 = v35;
        uint64_t v36 = *a4;
        uint64_t v117 = v122 + v34;
        uint64_t v37 = v120;
        sub_100418628(v122 + v34 + v36, (uint64_t)v120, type metadata accessor for OwnedBeaconGroup);
        uint64_t v116 = v123 + v34;
        sub_100418628(v123 + v34 + v36, (uint64_t)v27, type metadata accessor for OwnedBeaconGroup);
        uint64_t v38 = *v37;
        unint64_t v39 = v37[1];
        switch(v39 >> 62)
        {
          case 1uLL:
            if ((int)v38 == v38 >> 32) {
              goto LABEL_17;
            }
            goto LABEL_12;
          case 2uLL:
            if (*(void *)(v38 + 16) == *(void *)(v38 + 24)) {
              goto LABEL_17;
            }
LABEL_12:
            sub_1000361E0(v38, v39);
            goto LABEL_13;
          case 3uLL:
            goto LABEL_10;
          default:
            if ((v39 & 0xFF000000000000) == 0)
            {
LABEL_10:
              sub_10001CFB8(v38, v39);
LABEL_17:
              uint64_t v47 = (uint64_t)v109;
LABEL_24:
              char v61 = *v119;
              ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))*v119)(v47, 1, 1, v32);
LABEL_25:
              Date.init()();
              sub_10001DAB4(v47, (uint64_t *)&unk_10163AC90);
              break;
            }
LABEL_13:
            id v41 = objc_allocWithZone((Class)NSKeyedUnarchiver);
            sub_1000361E0(v38, v39);
            Class isa = Data._bridgeToObjectiveC()().super.isa;
            id v124 = 0;
            id v43 = [v41 initForReadingFromData:isa error:&v124];

            if (v43)
            {
              id v44 = v124;
              sub_10001CFB8(v38, v39);
              [v43 _enableStrictSecureDecodingMode];
              id v45 = [objc_allocWithZone((Class)CKRecord) initWithCoder:v43];
              if (v45)
              {
                Swift::Int v46 = v45;
              }
              else
              {
                static os_log_type_t.error.getter();
                sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
                Swift::Int v55 = (void *)static OS_os_log.default.getter();
                os_log(_:dso:log:_:_:)();

                Swift::Int v46 = 0;
              }
            }
            else
            {
              id v48 = v124;
              Swift::Int v49 = (void *)_convertNSErrorToError(_:)();

              swift_willThrow();
              sub_10001CFB8(v38, v39);
              static os_log_type_t.error.getter();
              sub_10000588C((uint64_t *)&unk_10163AD00);
              uint64_t v50 = swift_allocObject();
              *(_OWORD *)(v50 + 16) = v100;
              id v124 = v49;
              swift_errorRetain();
              sub_10000588C(&qword_101638D40);
              uint64_t v51 = String.init<A>(describing:)();
              uint64_t v53 = v52;
              *(void *)(v50 + 56) = &type metadata for String;
              *(void *)(v50 + 64) = sub_10000B4CC();
              *(void *)(v50 + 32) = v51;
              *(void *)(v50 + 40) = v53;
              sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
              uint64_t v54 = (void *)static OS_os_log.default.getter();
              os_log(_:dso:log:_:_:)();
              swift_errorRelease();
              uint64_t v27 = v112;
              swift_bridgeObjectRelease();

              Swift::Int v46 = 0;
              uint64_t v101 = 0;
            }
            sub_10001CFB8(v38, v39);
            if (!v46)
            {
              a4 = v104;
              uint64_t v47 = (uint64_t)v109;
              uint64_t v32 = v113;
              goto LABEL_24;
            }
            id v56 = [v46 creationDate];

            a4 = v104;
            uint64_t v47 = (uint64_t)v109;
            if (v56)
            {
              uint64_t v57 = (uint64_t)v98;
              static Date._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v58 = (void (*)(void, void, void, void))*v119;
              uint64_t v59 = v57;
              uint64_t v60 = 0;
            }
            else
            {
              uint64_t v58 = (void (*)(void, void, void, void))*v119;
              uint64_t v57 = (uint64_t)v98;
              uint64_t v59 = (uint64_t)v98;
              uint64_t v60 = 1;
            }
            uint64_t v32 = v113;
            uint64_t v84 = v58;
            v58(v59, v60, 1, v113);
            sub_10001D608(v57, v47, (uint64_t *)&unk_10163AC90);
            if ((*v103)(v47, 1, v32) == 1)
            {
              char v61 = v84;
              goto LABEL_25;
            }
            (*v97)(v121, v47, v32);
            char v61 = v84;
            break;
        }
        uint64_t v63 = *(void *)v27;
        unint64_t v64 = *((void *)v27 + 1);
        unint64_t v65 = v62;
        switch(v64 >> 62)
        {
          case 1uLL:
            if ((int)v63 == v63 >> 32) {
              goto LABEL_35;
            }
            goto LABEL_30;
          case 2uLL:
            if (*(void *)(v63 + 16) == *(void *)(v63 + 24))
            {
LABEL_35:
              unint64_t v66 = a4;
LABEL_36:
              uint64_t v75 = v107;
              uint64_t v74 = (uint64_t)v108;
              goto LABEL_47;
            }
LABEL_30:
            sub_1000361E0(*(void *)v27, *((void *)v27 + 1));
LABEL_31:
            uint64_t v105 = v65;
            unint64_t v118 = v61;
            unint64_t v66 = a4;
            id v68 = objc_allocWithZone((Class)NSKeyedUnarchiver);
            sub_1000361E0(v63, v64);
            Class v69 = Data._bridgeToObjectiveC()().super.isa;
            id v124 = 0;
            id v70 = [v68 initForReadingFromData:v69 error:&v124];

            if (v70)
            {
              id v71 = v124;
              sub_10001CFB8(v63, v64);
              [v70 _enableStrictSecureDecodingMode];
              id v72 = [objc_allocWithZone((Class)CKRecord) initWithCoder:v70];
              if (v72)
              {
                uint64_t v73 = v72;
              }
              else
              {
                static os_log_type_t.error.getter();
                sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
                uint64_t v85 = (void *)static OS_os_log.default.getter();
                os_log(_:dso:log:_:_:)();

                uint64_t v73 = 0;
              }
            }
            else
            {
              id v76 = v124;
              uint64_t v77 = (void *)_convertNSErrorToError(_:)();

              swift_willThrow();
              sub_10001CFB8(v63, v64);
              static os_log_type_t.error.getter();
              sub_10000588C((uint64_t *)&unk_10163AD00);
              uint64_t v78 = swift_allocObject();
              *(_OWORD *)(v78 + 16) = v100;
              id v124 = v77;
              swift_errorRetain();
              sub_10000588C(&qword_101638D40);
              uint64_t v79 = String.init<A>(describing:)();
              uint64_t v80 = v67;
              uint64_t v82 = v81;
              *(void *)(v78 + 56) = &type metadata for String;
              *(void *)(v78 + 64) = sub_10000B4CC();
              *(void *)(v78 + 32) = v79;
              *(void *)(v78 + 40) = v82;
              Swift::Int v67 = v80;
              sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
              uint64_t v83 = (void *)static OS_os_log.default.getter();
              os_log(_:dso:log:_:_:)();
              swift_errorRelease();
              unint64_t v66 = v104;
              swift_bridgeObjectRelease();

              uint64_t v73 = 0;
              uint64_t v101 = 0;
            }
            sub_10001CFB8(v63, v64);
            char v61 = v118;
            if (!v73)
            {
              uint64_t v75 = v107;
              uint64_t v74 = (uint64_t)v108;
              uint64_t v32 = v113;
              unint64_t v65 = v105;
LABEL_47:
              ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v61)(v74, 1, 1, v32);
LABEL_48:
              Date.init()();
              sub_10001DAB4(v74, (uint64_t *)&unk_10163AC90);
              goto LABEL_49;
            }
            id v86 = [v73 creationDate];

            uint64_t v75 = v107;
            uint64_t v74 = (uint64_t)v108;
            if (v86)
            {
              uint64_t v87 = (uint64_t)v99;
              static Date._unconditionallyBridgeFromObjectiveC(_:)();

              uint64_t v88 = 0;
            }
            else
            {
              uint64_t v88 = 1;
              uint64_t v87 = (uint64_t)v99;
            }
            unint64_t v65 = v105;
            uint64_t v32 = v113;
            ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v118)(v87, v88, 1, v113);
            sub_10001D608(v87, v74, (uint64_t *)&unk_10163AC90);
            if ((*v103)(v74, 1, v32) == 1) {
              goto LABEL_48;
            }
            (*v97)(v75, v74, v32);
LABEL_49:
            uint64_t v89 = v121;
            uint64_t v90 = Date.compare(_:)();
            BOOL v91 = *v106;
            (*v106)(v75, v32);
            v91(v89, v32);
            uint64_t v27 = v112;
            sub_100418B1C((uint64_t)v112, type metadata accessor for OwnedBeaconGroup);
            uint64_t result = sub_100418B1C((uint64_t)v120, type metadata accessor for OwnedBeaconGroup);
            if (v90 == 1)
            {
              uint64_t v92 = *v66;
              if (!*v66) {
                __break(1u);
              }
              a4 = v66;
              uint64_t v93 = v92 + v123 + v34;
              sub_100418690(v92 + v122 + v34, v114, type metadata accessor for OwnedBeaconGroup);
              swift_arrayInitWithTakeFrontToBack();
              uint64_t result = sub_100418690(v114, v93, type metadata accessor for OwnedBeaconGroup);
              uint64_t v33 = v111;
              v34 -= v110;
              uint64_t v35 = v115 + 1;
              uint64_t v32 = v113;
              if (v111 == v115 + 1) {
                goto LABEL_5;
              }
              continue;
            }
            a4 = v66;
            uint64_t v33 = v111;
LABEL_5:
            a3 = v33 + 1;
            v123 += v110;
            v122 += v110;
            if (a3 == v95) {
              return result;
            }
            break;
          case 3uLL:
            goto LABEL_28;
          default:
            if ((v64 & 0xFF000000000000) != 0) {
              goto LABEL_31;
            }
LABEL_28:
            unint64_t v66 = a4;
            sub_10001CFB8(*(void *)v27, *((void *)v27 + 1));
            goto LABEL_36;
        }
        break;
      }
    }
  }
  return result;
}

uint64_t sub_100410F78(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v26 = a1;
  uint64_t v29 = type metadata accessor for StandaloneBeacon();
  uint64_t v7 = __chkstk_darwin(v29);
  uint64_t v30 = (uint64_t)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v24 - v10;
  uint64_t result = __chkstk_darwin(v9);
  uint64_t v15 = (char *)&v24 - v14;
  uint64_t v28 = a3;
  uint64_t v25 = a2;
  if (a3 != a2)
  {
    uint64_t v16 = *(void *)(v13 + 72);
    uint64_t v32 = v16 * (v28 - 1);
    uint64_t v27 = v16;
    uint64_t v31 = v16 * v28;
LABEL_5:
    uint64_t v17 = 0;
    uint64_t v18 = v26;
    while (1)
    {
      uint64_t v19 = a4;
      uint64_t v20 = *a4;
      sub_100418628(v31 + v17 + v20, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
      sub_100418628(v32 + v17 + v20, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
      char v21 = static Date.< infix(_:_:)();
      sub_100418B1C((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
      a4 = v19;
      uint64_t result = sub_100418B1C((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
      if ((v21 & 1) == 0)
      {
LABEL_4:
        v32 += v27;
        v31 += v27;
        if (++v28 == v25) {
          return result;
        }
        goto LABEL_5;
      }
      uint64_t v22 = *v19;
      if (!*v19) {
        break;
      }
      uint64_t v23 = v22 + v32 + v17;
      sub_100418690(v22 + v31 + v17, v30, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
      swift_arrayInitWithTakeFrontToBack();
      uint64_t result = sub_100418690(v30, v23, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
      v17 -= v27;
      ++v18;
      a4 = v19;
      if (v28 == v18) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_10041123C(unint64_t a1, unint64_t a2, unint64_t a3, char *a4)
{
  uint64_t v5 = v4;
  uint64_t v84 = type metadata accessor for Date();
  uint64_t v10 = *(void *)(v84 - 8);
  uint64_t v11 = __chkstk_darwin(v84);
  uint64_t v77 = (uint64_t)&v72 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  unint64_t v83 = (unint64_t)&v72 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  unint64_t v80 = (unint64_t)&v72 - v16;
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v72 - v17;
  uint64_t v79 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v19 = __chkstk_darwin(v79);
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v82 = (uint64_t *)((char *)&v72 - v21);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v24 = (uint64_t *)((char *)&v72 - v23);
  __chkstk_darwin(v22);
  uint64_t v81 = (uint64_t *)((char *)&v72 - v26);
  uint64_t v85 = *(void *)(v27 + 72);
  if (!v85)
  {
    __break(1u);
LABEL_66:
    __break(1u);
LABEL_67:
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
  unint64_t v28 = a2;
  if (a2 - a1 == 0x8000000000000000 && v85 == -1) {
    goto LABEL_66;
  }
  int64_t v29 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v85 == -1) {
    goto LABEL_67;
  }
  uint64_t v30 = (uint64_t)(a2 - a1) / v85;
  uint64_t v88 = (char *)a1;
  uint64_t v87 = a4;
  uint64_t v31 = v29 / v85;
  if (v30 >= v29 / v85)
  {
    id v76 = v25;
    if (v31 < 0) {
      goto LABEL_70;
    }
    uint64_t v35 = v31 * v85;
    if ((unint64_t)a4 < v28 || v28 + v35 <= (unint64_t)a4)
    {
      unint64_t v36 = v28;
      swift_arrayInitWithTakeFrontToBack();
    }
    else
    {
      if (a4 == (char *)v28) {
        goto LABEL_43;
      }
      unint64_t v36 = v28;
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v28 = v36;
LABEL_43:
    unint64_t v52 = (unint64_t)&a4[v35];
    unint64_t v86 = (unint64_t)&a4[v35];
    uint64_t v88 = (char *)v28;
    if (v35 >= 1 && a1 < v28)
    {
      uint64_t v54 = -v85;
      unint64_t v73 = a1;
      uint64_t v74 = (void (**)(uint64_t, uint64_t))(v10 + 8);
      Swift::Int v55 = v76;
      unint64_t v75 = (unint64_t)a4;
      uint64_t v78 = -v85;
      while (1)
      {
        id v56 = v82;
        unint64_t v57 = v28;
        sub_100418628(v52 + v54, (uint64_t)v82, type metadata accessor for OwnedBeaconGroup);
        uint64_t v85 = v57;
        unint64_t v58 = v57 + v54;
        sub_100418628(v58, (uint64_t)v55, type metadata accessor for OwnedBeaconGroup);
        sub_100B23648(v56, v83);
        if (v5) {
          goto LABEL_69;
        }
        uint64_t v60 = v77;
        sub_100B23648(v55, v77);
        uint64_t v81 = 0;
        uint64_t v61 = (uint64_t)v55;
        uint64_t v54 = v78;
        unint64_t v80 = a3 + v78;
        unint64_t v62 = v83;
        uint64_t v63 = Date.compare(_:)();
        unint64_t v64 = *v74;
        uint64_t v65 = v60;
        unint64_t v66 = a3;
        uint64_t v67 = v84;
        (*v74)(v65, v84);
        v64(v62, v67);
        sub_100418B1C(v61, type metadata accessor for OwnedBeaconGroup);
        sub_100418B1C((uint64_t)v82, type metadata accessor for OwnedBeaconGroup);
        if (v63 == 1)
        {
          a3 = v80;
          if (v66 < v85 || v80 >= v85)
          {
            swift_arrayInitWithTakeFrontToBack();
            unint64_t v69 = v75;
            Swift::Int v55 = v76;
            uint64_t v5 = (uint64_t)v81;
            uint64_t v54 = v78;
          }
          else
          {
            BOOL v68 = v66 == v85;
            unint64_t v69 = v75;
            Swift::Int v55 = v76;
            uint64_t v5 = (uint64_t)v81;
            uint64_t v54 = v78;
            if (!v68) {
              swift_arrayInitWithTakeBackToFront();
            }
          }
          v88 += v54;
        }
        else
        {
          unint64_t v70 = v86;
          v86 += v54;
          a3 = v80;
          if (v66 < v70 || v80 >= v70)
          {
            swift_arrayInitWithTakeFrontToBack();
            unint64_t v58 = v85;
            unint64_t v69 = v75;
            Swift::Int v55 = v76;
            uint64_t v5 = (uint64_t)v81;
          }
          else
          {
            uint64_t v5 = (uint64_t)v81;
            Swift::Int v55 = v76;
            if (v66 != v70) {
              swift_arrayInitWithTakeBackToFront();
            }
            unint64_t v58 = v85;
            unint64_t v69 = v75;
          }
        }
        unint64_t v52 = v86;
        if (v86 > v69)
        {
          unint64_t v28 = v58;
          if (v58 > v73) {
            continue;
          }
        }
        goto LABEL_64;
      }
    }
    goto LABEL_64;
  }
  if ((v30 & 0x8000000000000000) == 0)
  {
    uint64_t v32 = v10;
    unint64_t v33 = a2;
    uint64_t v34 = v30 * v85;
    if ((unint64_t)a4 < a1 || a1 + v34 <= (unint64_t)a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != (char *)a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v83 = (unint64_t)&a4[v34];
    unint64_t v86 = (unint64_t)&a4[v34];
    BOOL v37 = v34 < 1 || v33 >= a3;
    if (!v37)
    {
      uint64_t v38 = v33;
      uint64_t v82 = v24;
      unint64_t v39 = (void (**)(unint64_t, uint64_t))(v32 + 8);
      while (1)
      {
        unint64_t v40 = v38;
        id v41 = v81;
        sub_100418628(v38, (uint64_t)v81, type metadata accessor for OwnedBeaconGroup);
        sub_100418628((uint64_t)a4, (uint64_t)v24, type metadata accessor for OwnedBeaconGroup);
        sub_100B23648(v41, (uint64_t)v18);
        if (v5) {
          goto LABEL_68;
        }
        unint64_t v42 = a3;
        unint64_t v44 = v80;
        sub_100B23648(v24, v80);
        uint64_t v5 = 0;
        uint64_t v45 = Date.compare(_:)();
        Swift::Int v46 = *v39;
        unint64_t v47 = v44;
        uint64_t v48 = v84;
        (*v39)(v47, v84);
        v46((unint64_t)v18, v48);
        sub_100418B1C((uint64_t)v24, type metadata accessor for OwnedBeaconGroup);
        sub_100418B1C((uint64_t)v81, type metadata accessor for OwnedBeaconGroup);
        unint64_t v49 = (unint64_t)v88;
        if (v45 == 1)
        {
          unint64_t v50 = v40 + v85;
          if ((unint64_t)v88 < v40 || (unint64_t)v88 >= v50)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v88 == (char *)v40)
          {
            unint64_t v49 = v40;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        else
        {
          unint64_t v51 = (unint64_t)&v87[v85];
          if (v88 < v87 || (unint64_t)v88 >= v51)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v88 != v87)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          uint64_t v87 = (char *)v51;
          unint64_t v50 = v40;
        }
        uint64_t v88 = (char *)(v49 + v85);
        a4 = v87;
        if ((unint64_t)v87 < v83)
        {
          uint64_t v38 = v50;
          BOOL v37 = v50 >= v42;
          a3 = v42;
          if (!v37) {
            continue;
          }
        }
        break;
      }
    }
LABEL_64:
    sub_100B72D50((unint64_t *)&v88, (unint64_t *)&v87, (uint64_t *)&v86);
    return 1;
  }
LABEL_70:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100411A34(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v44 = type metadata accessor for StandaloneBeacon();
  uint64_t v8 = __chkstk_darwin(v44);
  uint64_t v43 = (uint64_t)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v40 - v10;
  uint64_t v13 = *(void *)(v12 + 72);
  if (!v13)
  {
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  if (a2 - a1 == 0x8000000000000000 && v13 == -1) {
    goto LABEL_61;
  }
  int64_t v14 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v13 == -1) {
    goto LABEL_62;
  }
  uint64_t v15 = (uint64_t)(a2 - a1) / v13;
  unint64_t v47 = a1;
  unint64_t v46 = a4;
  uint64_t v16 = v14 / v13;
  if (v15 >= v14 / v13)
  {
    if ((v16 & 0x8000000000000000) == 0)
    {
      uint64_t v18 = v16 * v13;
      if (a4 < a2 || a2 + v18 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v26 = a4 + v18;
      unint64_t v45 = a4 + v18;
      unint64_t v47 = a2;
      if (v18 >= 1 && a1 < a2)
      {
        unint64_t v41 = a4;
        unint64_t v42 = a1;
        do
        {
          unint64_t v28 = a3 - v13;
          sub_100418628(v26 - v13, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
          unint64_t v29 = a2 - v13;
          unint64_t v30 = a3;
          uint64_t v31 = (uint64_t)v11;
          uint64_t v32 = v43;
          sub_100418628(a2 - v13, v43, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
          char v33 = static Date.< infix(_:_:)();
          uint64_t v34 = v32;
          uint64_t v11 = (char *)v31;
          sub_100418B1C(v34, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
          sub_100418B1C(v31, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
          if (v33)
          {
            if (v30 < a2 || v28 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v36 = v41;
              unint64_t v37 = v42;
            }
            else
            {
              BOOL v35 = v30 == a2;
              unint64_t v36 = v41;
              unint64_t v37 = v42;
              if (!v35) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            v47 -= v13;
          }
          else
          {
            unint64_t v38 = v45;
            v45 -= v13;
            if (v30 < v38 || v28 >= v38)
            {
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v29 = a2;
              unint64_t v36 = v41;
              unint64_t v37 = v42;
            }
            else
            {
              unint64_t v37 = v42;
              if (v30 != v38) {
                swift_arrayInitWithTakeBackToFront();
              }
              unint64_t v29 = a2;
              unint64_t v36 = v41;
            }
          }
          unint64_t v26 = v45;
          if (v45 <= v36) {
            break;
          }
          a2 = v29;
          a3 = v28;
        }
        while (v29 > v37);
      }
      goto LABEL_59;
    }
  }
  else if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v17 = v15 * v13;
    if (a4 < a1 || a1 + v17 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v19 = a4 + v17;
    unint64_t v45 = a4 + v17;
    if (v17 >= 1 && a2 < a3)
    {
      do
      {
        sub_100418628(a2, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
        uint64_t v21 = v43;
        sub_100418628(a4, v43, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
        char v22 = static Date.< infix(_:_:)();
        sub_100418B1C(v21, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
        sub_100418B1C((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for StandaloneBeacon);
        unint64_t v23 = v47;
        if (v22)
        {
          unint64_t v24 = a2 + v13;
          if (v47 < a2 || v47 >= v24)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v47 == a2)
          {
            unint64_t v23 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        else
        {
          unint64_t v25 = v46 + v13;
          if (v47 < v46 || v47 >= v25)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v47 != v46)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          unint64_t v46 = v25;
          unint64_t v24 = a2;
        }
        unint64_t v47 = v23 + v13;
        a4 = v46;
        if (v46 >= v19) {
          break;
        }
        a2 = v24;
      }
      while (v24 < a3);
    }
LABEL_59:
    sub_100B72D68(&v47, &v46, (uint64_t *)&v45);
    return 1;
  }
LABEL_63:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100411F50(uint64_t isStackAllocationSafe, uint64_t (*a2)(char *, unint64_t, uint64_t))
{
  uint64_t v4 = v2;
  uint64_t v5 = isStackAllocationSafe;
  char v6 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v7 = (unint64_t)((1 << v6) + 63) >> 6;
  size_t v8 = 8 * v7;
  if ((v6 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v8);
    uint64_t v9 = a2((char *)&v12 - ((v8 + 15) & 0x3FFFFFFFFFFFFFF0), v7, v5);
    if (v2) {
      swift_willThrow();
    }
    else {
      return v9;
    }
  }
  else
  {
    uint64_t v10 = (void *)swift_slowAlloc();
    bzero(v10, v8);
    uint64_t v4 = a2((char *)v10, v7, v5);
    swift_slowDealloc();
  }
  return v4;
}

uint64_t sub_1004120BC(unint64_t *a1, uint64_t a2, void *a3)
{
  uint64_t v38 = a2;
  unint64_t v39 = a1;
  uint64_t v48 = sub_10000588C((uint64_t *)&unk_1016477D0);
  uint64_t v4 = __chkstk_darwin(v48);
  unint64_t v47 = (uint64_t *)((char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v4);
  unint64_t v50 = (uint64_t *)((char *)&v38 - v6);
  uint64_t v7 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  uint64_t v45 = *(void *)(v7 - 8);
  uint64_t v46 = v7;
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t result = __chkstk_darwin(v8);
  uint64_t v51 = (uint64_t)&v38 - v11;
  int64_t v12 = 0;
  unint64_t v49 = a3;
  uint64_t v15 = a3[8];
  int64_t v14 = a3 + 8;
  uint64_t v13 = v15;
  uint64_t v16 = 1 << *((unsigned char *)v14 - 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & v13;
  uint64_t v44 = v10;
  uint64_t v40 = 0;
  uint64_t v41 = v10 + 2;
  unint64_t v42 = v14;
  int64_t v43 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v19 = v51;
  while (1)
  {
    if (v18)
    {
      unint64_t v20 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v21 = v20 | (v12 << 6);
      goto LABEL_19;
    }
    BOOL v22 = __OFADD__(v12++, 1);
    if (v22)
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v12 >= v43) {
      return sub_1002ACF38(v39, v38, v40, v49);
    }
    unint64_t v23 = v42[v12];
    if (!v23) {
      break;
    }
LABEL_18:
    unint64_t v18 = (v23 - 1) & v23;
    unint64_t v21 = __clz(__rbit64(v23)) + (v12 << 6);
LABEL_19:
    unint64_t v25 = (uint64_t *)(v49[6] + 16 * v21);
    uint64_t v27 = *v25;
    unint64_t v26 = v25[1];
    sub_100418628(v49[7] + *(void *)(v45 + 72) * v21, v19, type metadata accessor for OwnedBeaconGroup.PairingState);
    uint64_t v28 = v48;
    uint64_t v29 = *(int *)(v48 + 48);
    unint64_t v30 = v50;
    uint64_t v31 = (uint64_t)v50 + v29;
    *unint64_t v50 = v27;
    v30[1] = v26;
    sub_100418628(v19, (uint64_t)v30 + v29, type metadata accessor for OwnedBeaconGroup.PairingState);
    uint64_t v32 = *(int *)(v28 + 48);
    char v33 = v47;
    uint64_t v34 = (uint64_t)v47 + v32;
    *unint64_t v47 = v27;
    v33[1] = v26;
    sub_100418628(v31, (uint64_t)v33 + v32, type metadata accessor for OwnedBeaconGroup.PairingState);
    uint64_t v35 = v44;
    sub_100418628(v34, v44, type metadata accessor for OwnedBeaconGroup.PairingState);
    if (swift_getEnumCaseMultiPayload())
    {
      sub_1000361E0(v27, v26);
      sub_1000361E0(v27, v26);
      sub_100418B1C(v35, type metadata accessor for OwnedBeaconGroup.PairingState);
      goto LABEL_5;
    }
    uint64_t v36 = sub_10000588C((uint64_t *)&unk_101647810);
    int v37 = *(unsigned __int8 *)(v41 + *(int *)(v36 + 48));
    if (v37 == 3)
    {
      sub_1000361E0(v27, v26);
      sub_1000361E0(v27, v26);
      sub_10001DAB4(v35, (uint64_t *)&unk_1016477E0);
LABEL_5:
      sub_10001DAB4((uint64_t)v50, (uint64_t *)&unk_1016477D0);
      sub_100418B1C(v34, type metadata accessor for OwnedBeaconGroup.PairingState);
      sub_100418B1C(v51, type metadata accessor for OwnedBeaconGroup.PairingState);
      uint64_t result = sub_10001CFB8(v27, v26);
    }
    else
    {
      sub_1000361E0(v27, v26);
      sub_1000361E0(v27, v26);
      sub_10001DAB4(v35, (uint64_t *)&unk_1016477E0);
      sub_10001DAB4((uint64_t)v50, (uint64_t *)&unk_1016477D0);
      sub_100418B1C(v34, type metadata accessor for OwnedBeaconGroup.PairingState);
      sub_100418B1C(v51, type metadata accessor for OwnedBeaconGroup.PairingState);
      uint64_t result = sub_10001CFB8(v27, v26);
      if (v37 == 2)
      {
        *(unint64_t *)((char *)v39 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
        BOOL v22 = __OFADD__(v40++, 1);
        if (v22) {
          goto LABEL_33;
        }
      }
    }
  }
  int64_t v24 = v12 + 1;
  if (v12 + 1 >= v43) {
    return sub_1002ACF38(v39, v38, v40, v49);
  }
  unint64_t v23 = v42[v24];
  if (v23) {
    goto LABEL_17;
  }
  int64_t v24 = v12 + 2;
  if (v12 + 2 >= v43) {
    return sub_1002ACF38(v39, v38, v40, v49);
  }
  unint64_t v23 = v42[v24];
  if (v23) {
    goto LABEL_17;
  }
  int64_t v24 = v12 + 3;
  if (v12 + 3 >= v43) {
    return sub_1002ACF38(v39, v38, v40, v49);
  }
  unint64_t v23 = v42[v24];
  if (v23)
  {
LABEL_17:
    int64_t v12 = v24;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v12 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v12 >= v43) {
      return sub_1002ACF38(v39, v38, v40, v49);
    }
    unint64_t v23 = v42[v12];
    ++v24;
    if (v23) {
      goto LABEL_18;
    }
  }
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_100412568(unint64_t *a1, uint64_t a2, void *a3)
{
  uint64_t v38 = a2;
  unint64_t v39 = a1;
  uint64_t v48 = sub_10000588C((uint64_t *)&unk_1016477D0);
  uint64_t v4 = __chkstk_darwin(v48);
  unint64_t v47 = (uint64_t *)((char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v4);
  unint64_t v50 = (uint64_t *)((char *)&v38 - v6);
  uint64_t v7 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  uint64_t v45 = *(void *)(v7 - 8);
  uint64_t v46 = v7;
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t result = __chkstk_darwin(v8);
  uint64_t v51 = (uint64_t)&v38 - v11;
  int64_t v12 = 0;
  unint64_t v49 = a3;
  uint64_t v15 = a3[8];
  int64_t v14 = a3 + 8;
  uint64_t v13 = v15;
  uint64_t v16 = 1 << *((unsigned char *)v14 - 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & v13;
  uint64_t v44 = v10;
  uint64_t v40 = 0;
  uint64_t v41 = v10 + 2;
  unint64_t v42 = v14;
  int64_t v43 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v19 = v51;
  while (1)
  {
    if (v18)
    {
      unint64_t v20 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v21 = v20 | (v12 << 6);
      goto LABEL_19;
    }
    BOOL v22 = __OFADD__(v12++, 1);
    if (v22)
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v12 >= v43) {
      return sub_1002ACF38(v39, v38, v40, v49);
    }
    unint64_t v23 = v42[v12];
    if (!v23) {
      break;
    }
LABEL_18:
    unint64_t v18 = (v23 - 1) & v23;
    unint64_t v21 = __clz(__rbit64(v23)) + (v12 << 6);
LABEL_19:
    unint64_t v25 = (uint64_t *)(v49[6] + 16 * v21);
    uint64_t v27 = *v25;
    unint64_t v26 = v25[1];
    sub_100418628(v49[7] + *(void *)(v45 + 72) * v21, v19, type metadata accessor for OwnedBeaconGroup.PairingState);
    uint64_t v28 = v48;
    uint64_t v29 = *(int *)(v48 + 48);
    unint64_t v30 = v50;
    uint64_t v31 = (uint64_t)v50 + v29;
    *unint64_t v50 = v27;
    v30[1] = v26;
    sub_100418628(v19, (uint64_t)v30 + v29, type metadata accessor for OwnedBeaconGroup.PairingState);
    uint64_t v32 = *(int *)(v28 + 48);
    char v33 = v47;
    uint64_t v34 = (uint64_t)v47 + v32;
    *unint64_t v47 = v27;
    v33[1] = v26;
    sub_100418628(v31, (uint64_t)v33 + v32, type metadata accessor for OwnedBeaconGroup.PairingState);
    uint64_t v35 = v44;
    sub_100418628(v34, v44, type metadata accessor for OwnedBeaconGroup.PairingState);
    if (swift_getEnumCaseMultiPayload())
    {
      sub_1000361E0(v27, v26);
      sub_1000361E0(v27, v26);
      sub_100418B1C(v35, type metadata accessor for OwnedBeaconGroup.PairingState);
      goto LABEL_5;
    }
    uint64_t v36 = sub_10000588C((uint64_t *)&unk_101647810);
    int v37 = *(unsigned __int8 *)(v41 + *(int *)(v36 + 48));
    if (v37 == 3)
    {
      sub_1000361E0(v27, v26);
      sub_1000361E0(v27, v26);
      sub_10001DAB4(v35, (uint64_t *)&unk_1016477E0);
LABEL_5:
      sub_10001DAB4((uint64_t)v50, (uint64_t *)&unk_1016477D0);
      sub_100418B1C(v34, type metadata accessor for OwnedBeaconGroup.PairingState);
      sub_100418B1C(v51, type metadata accessor for OwnedBeaconGroup.PairingState);
      uint64_t result = sub_10001CFB8(v27, v26);
    }
    else
    {
      sub_1000361E0(v27, v26);
      sub_1000361E0(v27, v26);
      sub_10001DAB4(v35, (uint64_t *)&unk_1016477E0);
      sub_10001DAB4((uint64_t)v50, (uint64_t *)&unk_1016477D0);
      sub_100418B1C(v34, type metadata accessor for OwnedBeaconGroup.PairingState);
      sub_100418B1C(v51, type metadata accessor for OwnedBeaconGroup.PairingState);
      uint64_t result = sub_10001CFB8(v27, v26);
      if (v37 == 1)
      {
        *(unint64_t *)((char *)v39 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
        BOOL v22 = __OFADD__(v40++, 1);
        if (v22) {
          goto LABEL_33;
        }
      }
    }
  }
  int64_t v24 = v12 + 1;
  if (v12 + 1 >= v43) {
    return sub_1002ACF38(v39, v38, v40, v49);
  }
  unint64_t v23 = v42[v24];
  if (v23) {
    goto LABEL_17;
  }
  int64_t v24 = v12 + 2;
  if (v12 + 2 >= v43) {
    return sub_1002ACF38(v39, v38, v40, v49);
  }
  unint64_t v23 = v42[v24];
  if (v23) {
    goto LABEL_17;
  }
  int64_t v24 = v12 + 3;
  if (v12 + 3 >= v43) {
    return sub_1002ACF38(v39, v38, v40, v49);
  }
  unint64_t v23 = v42[v24];
  if (v23)
  {
LABEL_17:
    int64_t v12 = v24;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v12 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v12 >= v43) {
      return sub_1002ACF38(v39, v38, v40, v49);
    }
    unint64_t v23 = v42[v12];
    ++v24;
    if (v23) {
      goto LABEL_18;
    }
  }
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_100412A14(unint64_t *a1, uint64_t a2, void *a3)
{
  uint64_t v47 = a2;
  uint64_t v48 = a1;
  uint64_t v57 = sub_10000588C((uint64_t *)&unk_1016477D0);
  uint64_t v4 = __chkstk_darwin(v57);
  id v56 = (uint64_t *)((char *)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v4);
  uint64_t v61 = (uint64_t *)((char *)&v46 - v6);
  uint64_t v7 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  uint64_t v54 = *(void *)(v7 - 8);
  uint64_t v55 = v7;
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t result = __chkstk_darwin(v8);
  int64_t v12 = (char *)&v46 - v11;
  uint64_t v49 = 0;
  unint64_t v50 = (char *)&v46 - v11;
  int64_t v13 = 0;
  unint64_t v58 = a3;
  uint64_t v16 = a3[8];
  uint64_t v15 = a3 + 8;
  uint64_t v14 = v16;
  uint64_t v17 = 1 << *((unsigned char *)v15 - 32);
  uint64_t v18 = -1;
  if (v17 < 64) {
    uint64_t v18 = ~(-1 << v17);
  }
  unint64_t v19 = v18 & v14;
  uint64_t v60 = v10;
  uint64_t v51 = v10 + 2;
  unint64_t v52 = v15;
  int64_t v53 = (unint64_t)(v17 + 63) >> 6;
  while (v19)
  {
    unint64_t v20 = __clz(__rbit64(v19));
    v19 &= v19 - 1;
    int64_t v59 = v13;
    unint64_t v21 = v20 | (v13 << 6);
LABEL_18:
    unint64_t v26 = (uint64_t *)(v58[6] + 16 * v21);
    uint64_t v28 = *v26;
    unint64_t v27 = v26[1];
    sub_100418628(v58[7] + *(void *)(v54 + 72) * v21, (uint64_t)v12, type metadata accessor for OwnedBeaconGroup.PairingState);
    uint64_t v29 = v57;
    uint64_t v30 = *(int *)(v57 + 48);
    uint64_t v31 = v61;
    uint64_t v32 = (uint64_t)v61 + v30;
    *uint64_t v61 = v28;
    v31[1] = v27;
    sub_100418628((uint64_t)v12, (uint64_t)v31 + v30, type metadata accessor for OwnedBeaconGroup.PairingState);
    uint64_t v33 = *(int *)(v29 + 48);
    uint64_t v34 = v56;
    uint64_t v35 = (uint64_t)v56 + v33;
    *id v56 = v28;
    v34[1] = v27;
    sub_100418628(v32, (uint64_t)v34 + v33, type metadata accessor for OwnedBeaconGroup.PairingState);
    sub_100418628(v35, v60, type metadata accessor for OwnedBeaconGroup.PairingState);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload == 1)
      {
        int v37 = (int *)sub_10000588C(&qword_101643D80);
        uint64_t v38 = v60;
        unint64_t v39 = (uint64_t *)(v60 + v37[16]);
        uint64_t v41 = *v39;
        unint64_t v40 = v39[1];
        sub_1000361E0(v28, v27);
        sub_1000361E0(v28, v27);
        sub_100037A24(v41, v40);
        int v42 = *(unsigned __int8 *)(v51 + v37[24]);
        sub_10001DAB4(v38 + v37[12], (uint64_t *)&unk_1016477E0);
        uint64_t v43 = type metadata accessor for UUID();
        uint64_t v44 = v38;
        int64_t v12 = v50;
        (*(void (**)(uint64_t, uint64_t))(*(void *)(v43 - 8) + 8))(v44, v43);
        goto LABEL_22;
      }
      sub_1000361E0(v28, v27);
      sub_1000361E0(v28, v27);
      sub_100418B1C(v60, type metadata accessor for OwnedBeaconGroup.PairingState);
      sub_10001DAB4((uint64_t)v61, (uint64_t *)&unk_1016477D0);
      sub_100418B1C(v35, type metadata accessor for OwnedBeaconGroup.PairingState);
      sub_100418B1C((uint64_t)v12, type metadata accessor for OwnedBeaconGroup.PairingState);
      uint64_t result = sub_10001CFB8(v28, v27);
      int64_t v13 = v59;
    }
    else
    {
      uint64_t v45 = sub_10000588C((uint64_t *)&unk_101647810);
      int v42 = *(unsigned __int8 *)(v51 + *(int *)(v45 + 48));
      sub_1000361E0(v28, v27);
      sub_1000361E0(v28, v27);
      sub_10001DAB4(v60, (uint64_t *)&unk_1016477E0);
LABEL_22:
      sub_10001DAB4((uint64_t)v61, (uint64_t *)&unk_1016477D0);
      sub_100418B1C(v35, type metadata accessor for OwnedBeaconGroup.PairingState);
      sub_100418B1C((uint64_t)v12, type metadata accessor for OwnedBeaconGroup.PairingState);
      uint64_t result = sub_10001CFB8(v28, v27);
      int64_t v13 = v59;
      if (v42 == 2)
      {
        *(unint64_t *)((char *)v48 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v21;
        BOOL v22 = __OFADD__(v49++, 1);
        if (v22) {
          goto LABEL_33;
        }
      }
    }
  }
  BOOL v22 = __OFADD__(v13, 1);
  int64_t v23 = v13 + 1;
  if (v22)
  {
    __break(1u);
    goto LABEL_32;
  }
  if (v23 >= v53) {
    return sub_1002ACF38(v48, v47, v49, v58);
  }
  unint64_t v24 = v52[v23];
  if (v24)
  {
LABEL_17:
    unint64_t v19 = (v24 - 1) & v24;
    int64_t v59 = v23;
    unint64_t v21 = __clz(__rbit64(v24)) + (v23 << 6);
    goto LABEL_18;
  }
  int64_t v25 = v23 + 1;
  if (v23 + 1 >= v53) {
    return sub_1002ACF38(v48, v47, v49, v58);
  }
  unint64_t v24 = v52[v25];
  if (v24) {
    goto LABEL_16;
  }
  int64_t v25 = v23 + 2;
  if (v23 + 2 >= v53) {
    return sub_1002ACF38(v48, v47, v49, v58);
  }
  unint64_t v24 = v52[v25];
  if (v24) {
    goto LABEL_16;
  }
  int64_t v25 = v23 + 3;
  if (v23 + 3 >= v53) {
    return sub_1002ACF38(v48, v47, v49, v58);
  }
  unint64_t v24 = v52[v25];
  if (v24)
  {
LABEL_16:
    int64_t v23 = v25;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v23 = v25 + 1;
    if (__OFADD__(v25, 1)) {
      break;
    }
    if (v23 >= v53) {
      return sub_1002ACF38(v48, v47, v49, v58);
    }
    unint64_t v24 = v52[v23];
    ++v25;
    if (v24) {
      goto LABEL_17;
    }
  }
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

uint64_t sub_100412F3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a1;
  uint64_t v9 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_101643CE0 + dword_101643CE0);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v4 + 24) = v7;
  void *v7 = v4;
  v7[1] = sub_100412FFC;
  return v9(a3, a4);
}

uint64_t sub_100412FFC(char a1)
{
  *(unsigned char *)(*(void *)v1 + 32) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1004130FC, 0, 0);
}

uint64_t sub_1004130FC()
{
  **(unsigned char **)(v0 + 16) = *(unsigned char *)(v0 + 32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10041311C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v12 = 0;
  unint64_t v13 = 0xE000000000000000;
  _StringGuts.grow(_:)(18);
  swift_bridgeObjectRelease();
  unint64_t v12 = 0xD000000000000010;
  unint64_t v13 = 0x80000001013FBB50;
  v6._countAndFlagsBits = UUID.uuidString.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  id v7 = [self standardUserDefaults];
  sub_10001D074(a2, (uint64_t)v5, (uint64_t *)&unk_10163AC90);
  uint64_t v8 = type metadata accessor for Date();
  uint64_t v9 = *(void *)(v8 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v5, 1, v8) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v5, v8);
  }
  NSString v11 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v7 setObject:isa forKey:v11];

  swift_unknownObjectRelease();
}

void *sub_100413300(uint64_t a1, uint64_t a2)
{
  uint64_t v47 = a2;
  uint64_t v3 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v36 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v6 = *(void *)(v46 - 8);
  uint64_t v7 = __chkstk_darwin(v46);
  uint64_t v40 = (uint64_t)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v38 = (uint64_t)&v36 - v9;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  unint64_t v13 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(a1 + 56);
  uint64_t v42 = a1 + 56;
  uint64_t v18 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v19 = -1;
  if (v18 < 64) {
    uint64_t v19 = ~(-1 << v18);
  }
  unint64_t v20 = v19 & v17;
  uint64_t v49 = v11 + 16;
  unint64_t v50 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  uint64_t v48 = v11 + 48;
  uint64_t v45 = (void (**)(char *, char *, uint64_t))(v11 + 32);
  int64_t v43 = (unint64_t)(v18 + 63) >> 6;
  uint64_t v44 = (void (**)(char *, uint64_t))(v11 + 8);
  uint64_t v39 = v6;
  unint64_t v21 = (unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48);
  uint64_t v51 = a1;
  uint64_t result = (void *)swift_bridgeObjectRetain();
  int64_t v23 = 0;
  uint64_t v41 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v20)
    {
      unint64_t v24 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      unint64_t v25 = v24 | (v23 << 6);
      goto LABEL_22;
    }
    int64_t v26 = v23 + 1;
    if (__OFADD__(v23, 1))
    {
      __break(1u);
      goto LABEL_33;
    }
    if (v26 >= v43) {
      goto LABEL_30;
    }
    unint64_t v27 = *(void *)(v42 + 8 * v26);
    ++v23;
    if (!v27)
    {
      int64_t v23 = v26 + 1;
      if (v26 + 1 >= v43) {
        goto LABEL_30;
      }
      unint64_t v27 = *(void *)(v42 + 8 * v23);
      if (!v27)
      {
        int64_t v23 = v26 + 2;
        if (v26 + 2 >= v43) {
          goto LABEL_30;
        }
        unint64_t v27 = *(void *)(v42 + 8 * v23);
        if (!v27)
        {
          int64_t v23 = v26 + 3;
          if (v26 + 3 >= v43) {
            goto LABEL_30;
          }
          unint64_t v27 = *(void *)(v42 + 8 * v23);
          if (!v27) {
            break;
          }
        }
      }
    }
LABEL_21:
    unint64_t v20 = (v27 - 1) & v27;
    unint64_t v25 = __clz(__rbit64(v27)) + (v23 << 6);
LABEL_22:
    (*(void (**)(char *, unint64_t, uint64_t))(v11 + 16))(v16, *(void *)(v51 + 48) + *(void *)(v11 + 72) * v25, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v16, 0, 1, v10);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v16, 1, v10) == 1) {
      goto LABEL_31;
    }
    (*v45)(v13, v16, v10);
    sub_100ACD178((uint64_t)v5);
    (*v44)(v13, v10);
    if ((*v21)(v5, 1, v46) == 1)
    {
      uint64_t result = (void *)sub_10001DAB4((uint64_t)v5, &qword_10163B9F0);
    }
    else
    {
      int v37 = type metadata accessor for OwnedBeaconRecord;
      uint64_t v29 = v38;
      sub_100418690((uint64_t)v5, v38, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      sub_100418690(v29, v40, (uint64_t (*)(void))v37);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v41 = (void *)sub_100A6F6C4(0, v41[2] + 1, 1, (unint64_t)v41);
      }
      unint64_t v31 = v41[2];
      unint64_t v30 = v41[3];
      uint64_t v32 = (uint64_t (*)())(v31 + 1);
      if (v31 >= v30 >> 1)
      {
        int v37 = (uint64_t (*)())(v31 + 1);
        uint64_t v35 = (void *)sub_100A6F6C4(v30 > 1, v31 + 1, 1, (unint64_t)v41);
        uint64_t v32 = v37;
        uint64_t v41 = v35;
      }
      uint64_t v33 = v40;
      uint64_t v34 = v41;
      void v41[2] = v32;
      uint64_t result = (void *)sub_100418690(v33, (uint64_t)v34+ ((*(unsigned __int8 *)(v39 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v39 + 80))+ *(void *)(v39 + 72) * v31, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    }
  }
  int64_t v28 = v26 + 4;
  if (v28 >= v43)
  {
LABEL_30:
    (*v50)(v16, 1, 1, v10);
LABEL_31:
    swift_release();
    return v41;
  }
  unint64_t v27 = *(void *)(v42 + 8 * v28);
  if (v27)
  {
    int64_t v23 = v28;
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v23 = v28 + 1;
    if (__OFADD__(v28, 1)) {
      break;
    }
    if (v23 >= v43) {
      goto LABEL_30;
    }
    unint64_t v27 = *(void *)(v42 + 8 * v23);
    ++v28;
    if (v27) {
      goto LABEL_21;
    }
  }
LABEL_33:
  __break(1u);
  return result;
}

void *sub_10041387C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_10000588C(&qword_10163AB18);
  uint64_t v24 = *(void *)(v5 - 8);
  uint64_t v25 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (void *)((char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  int64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = _swiftEmptyArrayStorage;
  if (v8)
  {
    v22[0] = v2;
    unint64_t v27 = _swiftEmptyArrayStorage;
    sub_1000B7B08(0, v8, 0);
    uint64_t v9 = v27;
    v22[1] = *(void *)(a2 + 16);
    int64_t v23 = v7;
    uint64_t v10 = (unint64_t *)(a1 + 40);
    do
    {
      int64_t v26 = v9;
      uint64_t v11 = *(v10 - 1);
      unint64_t v12 = *v10;
      uint64_t v13 = (uint64_t)v7 + *(int *)(v25 + 48);
      uint64_t *v7 = v11;
      v7[1] = v12;
      sub_1000361E0(v11, v12);
      sub_1000361E0(v11, v12);
      uint64_t v14 = sub_100ACD578(v11, v12);
      uint64_t v15 = v14[2];
      uint64_t v16 = type metadata accessor for OwnedBeaconRecord();
      uint64_t v17 = *(void *)(v16 - 8);
      if (v15)
      {
        sub_100418628((uint64_t)v14+ ((*(unsigned __int8 *)(*(void *)(v16 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v16 - 8) + 80)), v13, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        uint64_t v18 = 0;
      }
      else
      {
        uint64_t v18 = 1;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 56))(v13, v18, 1, v16);
      swift_bridgeObjectRelease();
      sub_10001CFB8(v11, v12);
      uint64_t v9 = v26;
      unint64_t v27 = v26;
      unint64_t v20 = v26[2];
      unint64_t v19 = v26[3];
      if (v20 >= v19 >> 1)
      {
        sub_1000B7B08(v19 > 1, v20 + 1, 1);
        uint64_t v9 = v27;
      }
      v10 += 2;
      void v9[2] = v20 + 1;
      uint64_t v7 = v23;
      sub_10001D608((uint64_t)v23, (uint64_t)v9+ ((*(unsigned __int8 *)(v24 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80))+ *(void *)(v24 + 72) * v20, &qword_10163AB18);
      --v8;
    }
    while (v8);
  }
  return v9;
}

uint64_t sub_100413AF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v25 = a3;
  uint64_t v26 = a4;
  uint64_t v23 = a1;
  uint64_t v24 = a2;
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v5);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v6 - 8);
  uint64_t v22 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v7 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  void v19[2] = sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  unsigned int v21 = enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:);
  unint64_t v20 = *(void (**)(char *))(v7 + 104);
  v20(v9);
  static DispatchQoS.unspecified.getter();
  uint64_t v27 = (uint64_t)_swiftEmptyArrayStorage;
  v19[1] = sub_100414C30((unint64_t *)&qword_101638CC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000588C((uint64_t *)&unk_1016376F0);
  sub_100062734((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)(v4 + 48) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  ((void (*)(char *, void, uint64_t))v20)(v9, v21, v22);
  static DispatchQoS.unspecified.getter();
  uint64_t v27 = (uint64_t)_swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)(v4 + 56) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)(v4 + 72) = &_swiftEmptySetSingleton;
  *(void *)(v4 + 80) = 0;
  *(void *)(v4 + 88) = 0;
  *(void *)(v4 + 96) = 0;
  *(void *)(v4 + 104) = &_swiftEmptySetSingleton;
  *(void *)(v4 + 112) = &_swiftEmptySetSingleton;
  *(_OWORD *)(v4 + 120) = xmmword_1013520A0;
  sub_10000588C(&qword_101643CB8);
  swift_allocObject();
  *(void *)(v4 + 136) = PassthroughSubject.init()();
  swift_allocObject();
  uint64_t v10 = PassthroughSubject.init()();
  *(void *)(v4 + 152) = 0;
  *(void *)(v4 + 160) = 0;
  *(void *)(v4 + 144) = v10;
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  sub_1010ABF94(v27);
  uint64_t v12 = v11;
  swift_bridgeObjectRelease();
  *(void *)(v4 + 168) = v12;
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v13 = sub_1010ABF48(v27);
  swift_bridgeObjectRelease();
  *(void *)(v4 + 176) = v13;
  *(void *)(v4 + 184) = _swiftEmptyDictionarySingleton;
  uint64_t v14 = v24;
  *(void *)(v4 + 16) = v23;
  *(void *)(v4 + 24) = v14;
  uint64_t v15 = v26;
  *(void *)(v4 + 32) = v25;
  *(void *)(v4 + 40) = v15;
  uint64_t v16 = *(void **)(v4 + 48);
  type metadata accessor for QueueSynchronizer();
  swift_allocObject();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  id v17 = v16;
  *(void *)(v4 + 64) = QueueSynchronizer.init(queue:)();
  if (qword_1016371D8 != -1) {
    swift_once();
  }
  uint64_t v27 = 0x7365547265646E75;
  unint64_t v28 = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)();
  swift_bridgeObjectRelease();
  return v4;
}

void sub_100414028(uint64_t a1, uint64_t a2, unsigned char *a3, const void *a4)
{
  uint64_t v93 = a3;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v90 = *(void *)(v7 - 8);
  uint64_t v91 = v7;
  __chkstk_darwin(v7);
  uint64_t v88 = (char *)v77 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v89 = type metadata accessor for DispatchQoS();
  uint64_t v87 = *(void *)(v89 - 8);
  __chkstk_darwin(v89);
  unint64_t v86 = (char *)v77 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for MACAddress();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)v77 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)v77 - v15;
  _Block_copy(a4);
  _Block_copy(a4);
  if (qword_101636AC0 != -1) {
    swift_once();
  }
  uint64_t v85 = v14;
  uint64_t v17 = type metadata accessor for Logger();
  uint64_t v18 = sub_100010324(v17, (uint64_t)qword_10170DE38);
  unint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  uint64_t v92 = a1;
  unint64_t v83 = v19;
  v19(v16, a1, v10);
  swift_bridgeObjectRetain_n();
  uint64_t v84 = v18;
  unint64_t v20 = Logger.logObject.getter();
  int v21 = static os_log_type_t.debug.getter();
  BOOL v22 = os_log_type_enabled(v20, (os_log_type_t)v21);
  uint64_t v94 = a4;
  uint64_t v81 = v11;
  if (v22)
  {
    int v79 = v21;
    uint64_t v23 = swift_slowAlloc();
    uint64_t v78 = swift_slowAlloc();
    aBlock[0] = v78;
    *(_DWORD *)uint64_t v23 = 136315394;
    sub_100414C30((unint64_t *)&qword_101649EE0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v96 = (void *)sub_1008FA0F0(v24, v25, aBlock);
    v77[1] = v97;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    unint64_t v80 = *(void (**)(char *, uint64_t))(v11 + 8);
    v80(v16, v10);
    *(_WORD *)(v23 + 12) = 2080;
    int64_t v26 = *(void *)(a2 + 16);
    uint64_t v82 = a2;
    if (v26)
    {
      v77[0] = v10;
      uint64_t v96 = _swiftEmptyArrayStorage;
      sub_1000B6ED0(0, v26, 0);
      uint64_t v27 = v96;
      unint64_t v28 = (unint64_t *)(a2 + 40);
      do
      {
        uint64_t v29 = *(v28 - 1);
        unint64_t v30 = *v28;
        sub_1000361E0(v29, *v28);
        uint64_t v31 = Data.hexString.getter();
        uint64_t v33 = v32;
        sub_10001CFB8(v29, v30);
        uint64_t v96 = v27;
        unint64_t v35 = v27[2];
        unint64_t v34 = v27[3];
        if (v35 >= v34 >> 1)
        {
          sub_1000B6ED0(v34 > 1, v35 + 1, 1);
          uint64_t v27 = v96;
        }
        v28 += 2;
        v27[2] = v35 + 1;
        uint64_t v36 = &v27[2 * v35];
        v36[4] = v31;
        v36[5] = v33;
        --v26;
      }
      while (v26);
      uint64_t v10 = v77[0];
    }
    uint64_t v38 = Array.description.getter();
    unint64_t v40 = v39;
    swift_bridgeObjectRelease();
    uint64_t v96 = (void *)sub_1008FA0F0(v38, v40, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v41 = v82;
    swift_bridgeObjectRelease_n();
    a2 = v41;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v20, (os_log_type_t)v79, "forceRePairing: %s, forcePairSerialNumber: %s", (uint8_t *)v23, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    unint64_t v80 = *(void (**)(char *, uint64_t))(v11 + 8);
    v80(v16, v10);

    uint64_t v37 = swift_bridgeObjectRelease_n();
  }
  __chkstk_darwin(v37);
  uint64_t v42 = v92;
  v77[-2] = v92;
  v77[-1] = v43;
  sub_10000588C(&qword_10165F6B0);
  Lock.callAsFunction<A>(_:)();
  uint64_t v44 = (void *)aBlock[0];
  if (aBlock[0])
  {
    uint64_t v45 = swift_allocObject();
    swift_weakInit();
    uint64_t v46 = (void *)swift_allocObject();
    v46[2] = v45;
    v46[3] = v44;
    v46[4] = a2;
    aBlock[4] = (uint64_t)sub_100414C0C;
    aBlock[5] = (uint64_t)v46;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1004B5480;
    aBlock[3] = (uint64_t)&unk_1015BF130;
    uint64_t v47 = _Block_copy(aBlock);
    swift_bridgeObjectRetain();
    swift_retain();
    id v48 = v44;
    uint64_t v49 = v86;
    static DispatchQoS.unspecified.getter();
    uint64_t v96 = _swiftEmptyArrayStorage;
    sub_100414C30((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    unint64_t v50 = v88;
    uint64_t v51 = v91;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v47);
    (*(void (**)(char *, uint64_t))(v90 + 8))(v50, v51);
    (*(void (**)(char *, uint64_t))(v87 + 8))(v49, v89);
    swift_release();
    swift_release();
    unint64_t v52 = (void (**)(void, void))v94;
    (*((void (**)(const void *, void))v94 + 2))(v94, 0);
  }
  else
  {
    int64_t v53 = v85;
    v83(v85, v42, v10);
    swift_bridgeObjectRetain_n();
    uint64_t v54 = Logger.logObject.getter();
    uint64_t v55 = v10;
    os_log_type_t v56 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v54, v56))
    {
      uint64_t v57 = swift_slowAlloc();
      uint64_t v58 = swift_slowAlloc();
      aBlock[0] = v58;
      *(_DWORD *)uint64_t v57 = 136315394;
      sub_100414C30((unint64_t *)&qword_101649EE0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
      uint64_t v59 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v96 = (void *)sub_1008FA0F0(v59, v60, aBlock);
      uint64_t v93 = v97;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v80(v53, v55);
      *(_WORD *)(v57 + 12) = 2080;
      int64_t v61 = *(void *)(a2 + 16);
      unint64_t v52 = (void (**)(void, void))v94;
      uint64_t v82 = a2;
      if (v61)
      {
        uint64_t v92 = v58;
        uint64_t v96 = _swiftEmptyArrayStorage;
        sub_1000B6ED0(0, v61, 0);
        unint64_t v62 = v96;
        uint64_t v63 = (unint64_t *)(a2 + 40);
        do
        {
          uint64_t v64 = *(v63 - 1);
          unint64_t v65 = *v63;
          sub_1000361E0(v64, *v63);
          uint64_t v66 = Data.hexString.getter();
          uint64_t v68 = v67;
          sub_10001CFB8(v64, v65);
          uint64_t v96 = v62;
          unint64_t v70 = v62[2];
          unint64_t v69 = v62[3];
          if (v70 >= v69 >> 1)
          {
            sub_1000B6ED0(v69 > 1, v70 + 1, 1);
            unint64_t v62 = v96;
          }
          v63 += 2;
          v62[2] = v70 + 1;
          id v71 = &v62[2 * v70];
          v71[4] = v66;
          v71[5] = v68;
          --v61;
        }
        while (v61);
        unint64_t v52 = (void (**)(void, void))v94;
      }
      uint64_t v72 = Array.description.getter();
      unint64_t v74 = v73;
      swift_bridgeObjectRelease();
      uint64_t v96 = (void *)sub_1008FA0F0(v72, v74, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v54, v56, "Could not retreive peripheral for forceRePairing: %s, forcePairSerialNumber: %s", (uint8_t *)v57, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      v80(v53, v55);

      swift_bridgeObjectRelease_n();
      unint64_t v52 = (void (**)(void, void))v94;
    }
    sub_100414B68();
    swift_allocError();
    *unint64_t v75 = 0;
    _Block_copy(v52);
    id v76 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void *))v52)[2](v52, v76);

    swift_errorRelease();
    _Block_release(v52);
  }
  _Block_release(v52);
  _Block_release(v52);
}

unint64_t sub_100414B68()
{
  unint64_t result = qword_101643CB0;
  if (!qword_101643CB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101643CB0);
  }
  return result;
}

uint64_t sub_100414BBC()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100414BF4()
{
  return sub_100419550((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_100414C0C()
{
  return sub_1003E3ABC(v0[2], v0[3], v0[4]);
}

uint64_t sub_100414C18(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100414C28()
{
  return swift_release();
}

uint64_t sub_100414C30(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

BOOL sub_100414C78(uint64_t a1)
{
  return sub_100401D24(a1, *(void *)(v1 + 16));
}

uint64_t sub_100414C9C@<X0>(uint64_t a1@<X8>)
{
  return sub_1003F0968(*(void *)(v1 + 24), *(uint8_t **)(*(void *)(v1 + 16) + 16), a1);
}

uint64_t sub_100414CC8(uint64_t a1)
{
  return sub_10100CFA8(a1, v1);
}

uint64_t sub_100414CD0()
{
  return sub_100419550((void (*)(void))&_swift_release);
}

uint64_t sub_100414CE8@<X0>(uint64_t a1@<X8>)
{
  return sub_1003F0968(*(void *)(v1 + 24), *(uint8_t **)(v1 + 32), a1);
}

uint64_t sub_100414D10@<X0>(unsigned char *a1@<X8>)
{
  return sub_1003E3B30(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_100414D2C@<X0>(uint64_t *a1@<X8>)
{
  return sub_100E0B2CC(*(void **)(v1 + 16), *(unsigned __int8 *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), a1);
}

uint64_t sub_100414D54(char *a1)
{
  return sub_1003FC460(a1);
}

uint64_t sub_100414D5C(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(v1 + 16))(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
}

uint64_t sub_100414D90@<X0>(char *a1@<X8>)
{
  return sub_100E09974(v1, a1);
}

uint64_t sub_100414DAC(uint64_t a1)
{
  return sub_1003FA8A8(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(unsigned __int8 *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64));
}

uint64_t sub_100414DD4@<X0>(uint64_t *a1@<X8>)
{
  return sub_100415E9C(a1);
}

uint64_t sub_100414DF0(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for BluetoothManagerDevice() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void **)(v1 + 24);
  uint64_t v8 = v1 + v4;
  uint64_t v9 = *(void *)(v1 + v5);
  uint64_t v10 = v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = *(void *)v10;
  char v12 = *(unsigned char *)(v10 + 8);

  return sub_1003FACEC(a1, v6, v7, v8, v9, v11, v12);
}

uint64_t sub_100414EA8()
{
  uint64_t v1 = type metadata accessor for BluetoothManagerDevice();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  swift_release();

  uint64_t v5 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v0 + v3, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = (uint64_t *)(v0 + v3 + *(int *)(v1 + 36));
  unint64_t v7 = v6[1];
  if (v7 >> 60 != 15) {
    sub_10001CFB8(*v6, v7);
  }

  swift_release();
  swift_release();

  return _swift_deallocObject(v0, ((((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 9, v2 | 7);
}

uint64_t sub_100415018()
{
  uint64_t v2 = *(void *)(type metadata accessor for BluetoothManagerDevice() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v6 = *(void *)(v0 + 24);
  uint64_t v7 = *(void *)(v0 + v4);
  uint64_t v8 = v0 + v3;
  uint64_t v9 = v0 + ((v4 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = *(void *)v9;
  char v11 = *(unsigned char *)(v9 + 8);
  char v12 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v12;
  void *v12 = v1;
  v12[1] = sub_100033F68;
  return sub_1003FAF0C(v5, v6, v8, v7, v10, v11);
}

uint64_t sub_10041514C()
{
  uint64_t v1 = type metadata accessor for BluetoothManagerDevice();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  swift_release();
  uint64_t v5 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v0 + v3, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = (uint64_t *)(v0 + v3 + *(int *)(v1 + 36));
  unint64_t v7 = v6[1];
  if (v7 >> 60 != 15) {
    sub_10001CFB8(*v6, v7);
  }
  unint64_t v8 = (((((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;

  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v8 + 9, v2 | 7);
}

void sub_1004152C4()
{
  uint64_t v1 = *(void *)(type metadata accessor for BluetoothManagerDevice() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v4 = (v3 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v6 = *(void *)(v0 + v3);
  unint64_t v7 = (uint8_t *)(v0 + v2);
  uint64_t v8 = *(void *)(v0 + v4);
  uint64_t v9 = v0 + ((v4 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = *(char **)v9;
  char v11 = *(unsigned char *)(v9 + 8);

  sub_1003FB7C0(v5, v7, v6, v8, v10, v11);
}

uint64_t sub_100415374(uint64_t a1)
{
  return sub_1003F8EE0(a1, *(char **)(v1 + 16), *(void *)(v1 + 24), *(unsigned __int8 *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(unsigned __int8 *)(v1 + 56));
}

uint64_t sub_10041539C()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1004153D4@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1003F9BF8(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_1004153DC()
{
  uint64_t v1 = type metadata accessor for BluetoothManagerDevice();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 33) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  swift_release();
  swift_release();
  uint64_t v5 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v0 + v3, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = (uint64_t *)(v0 + v3 + *(int *)(v1 + 36));
  unint64_t v7 = v6[1];
  if (v7 >> 60 != 15) {
    sub_10001CFB8(*v6, v7);
  }

  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 9, v2 | 7);
}

uint64_t sub_100415534(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for BluetoothManagerDevice() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 33) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = *(void *)(v1 + 24);
  char v7 = *(unsigned char *)(v1 + 32);
  uint64_t v8 = (uint8_t *)(v1 + v4);
  uint64_t v9 = v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = *(uint8_t **)v9;
  char v11 = *(unsigned char *)(v9 + 8);

  return sub_1003FA01C(a1, v5, v6, v7, v8, v10, v11);
}

uint64_t sub_1004155E4@<X0>(BOOL *a1@<X8>)
{
  return sub_100EFEA20(v1, a1);
}

uint64_t sub_100415600@<X0>(uint64_t *a1@<X8>)
{
  return sub_100E0BAA8(*(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), a1);
}

uint64_t sub_100415620(char *a1)
{
  return sub_1003F719C(a1);
}

uint64_t sub_100415628()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100415660()
{
  return sub_100419550((void (*)(void))&_swift_release);
}

uint64_t sub_100415678(uint64_t a1)
{
  uint64_t v4 = v1 + 16;
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(v1 + 32);
  char v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_100033F68;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_101643D60 + dword_101643D60);
  return v8(a1, v4, v6, v5);
}

uint64_t sub_100415740()
{
  uint64_t v1 = type metadata accessor for MACAddress();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = (v5 + v3 + v4) & ~v3;
  unint64_t v7 = (v6 + v5) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v8(v0 + v4, v1);
  v8(v0 + v6, v1);
  if (*(void *)(v7 + v0 + 8)) {
    swift_release();
  }

  return _swift_deallocObject(v0, v7 + 24, v3 | 7);
}

uint64_t sub_100415848()
{
  uint64_t v2 = *(void *)(type metadata accessor for MACAddress() - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = (v5 + v3 + v4) & ~v3;
  uint64_t v7 = v6 + v5;
  uint64_t v8 = (v7 & 0xFFFFFFFFFFFFFFF8) + v0;
  uint64_t v9 = *(void *)(v0 + 16);
  uint64_t v10 = v0 + v4;
  uint64_t v11 = v0 + v6;
  char v12 = *(unsigned char *)(v0 + v7);
  uint64_t v13 = *(void *)(v8 + 8);
  uint64_t v14 = *(void *)(v8 + 16);
  uint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v15;
  *uint64_t v15 = v1;
  v15[1] = sub_100033F68;
  return sub_1004087AC(v9, v10, v11, v12, v13, v14);
}

uint64_t sub_10041597C()
{
  uint64_t v1 = type metadata accessor for BluetoothManagerDevice();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);

  swift_release();
  uint64_t v5 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v0 + v3, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = (uint64_t *)(v0 + v3 + *(int *)(v1 + 36));
  unint64_t v7 = v6[1];
  if (v7 >> 60 != 15) {
    sub_10001CFB8(*v6, v7);
  }

  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_100415AD4()
{
  uint64_t v2 = *(void *)(type metadata accessor for BluetoothManagerDevice() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = *(void *)(v0 + 24);
  uint64_t v6 = v0 + v3;
  uint64_t v7 = *(void *)(v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v8;
  *uint64_t v8 = v1;
  v8[1] = sub_100033F68;
  return sub_1003F3FF0(v4, v5, v6, v7);
}

uint64_t sub_100415BE4(uint64_t a1)
{
  return sub_1003F49B0(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_100415C04()
{
  return sub_100415ED8((void (*)(void))&_swift_bridgeObjectRelease);
}

void sub_100415C1C()
{
  uint64_t v1 = *(void *)(type metadata accessor for BluetoothManagerDevice() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = v0 + v2;
  uint64_t v5 = *(void *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));
  Transaction.capture()();
  sub_1003F8944(v3, v4, 1, 0, v5);
}

void sub_100415CDC(char **a1@<X0>, uint64_t a2@<X8>)
{
  sub_1003EEBEC(a1, v2, a2);
}

uint64_t sub_100415CE4(void *a1, char a2)
{
  return sub_1003F1D3C(a1, a2);
}

uint64_t sub_100415CF4()
{
  return sub_100419550((void (*)(void))&_swift_release);
}

uint64_t sub_100415D0C(uint64_t a1)
{
  uint64_t v4 = v1 + 16;
  uint64_t v6 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(v1 + 32);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  void *v7 = v2;
  v7[1] = sub_10001D2E4;
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_101643D60 + dword_101643D60);
  return v8(a1, v4, v6, v5);
}

uint64_t sub_100415DD8()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100033F68;
  return sub_1003F1EC4(v2, v3);
}

uint64_t sub_100415E70(uint64_t a1)
{
  return sub_1003F1454(a1);
}

uint64_t sub_100415E78(uint64_t a1)
{
  return sub_100409984(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56));
}

uint64_t sub_100415E9C@<X0>(uint64_t *a1@<X8>)
{
  return sub_100EFE4CC(*(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(NSObject **)(v1 + 40), *(unsigned __int8 *)(v1 + 48), a1);
}

uint64_t sub_100415EC0()
{
  return sub_100415ED8((void (*)(void))&_swift_release);
}

uint64_t sub_100415ED8(void (*a1)(void))
{
  uint64_t v3 = type metadata accessor for BluetoothManagerDevice();
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(v3 - 8) + 80);
  uint64_t v5 = (v4 + 40) & ~v4;
  uint64_t v6 = *(void *)(*(void *)(v3 - 8) + 64);
  swift_release();
  swift_release();

  uint64_t v7 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v1 + v5, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = (uint64_t *)(v1 + v5 + *(int *)(v3 + 36));
  unint64_t v9 = v8[1];
  if (v9 >> 60 != 15) {
    sub_10001CFB8(*v8, v9);
  }
  unint64_t v10 = (v6 + v5 + 7) & 0xFFFFFFFFFFFFFFF8;

  a1(*(void *)(v1 + v10));

  return _swift_deallocObject(v1, v10 + 8, v4 | 7);
}

uint64_t sub_100416048(unint64_t *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for BluetoothManagerDevice() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = (void *)v1[4];
  uint64_t v8 = *(void *)((char *)v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));

  return sub_100409DA4(a1, v5, v6, v7, (uint64_t)v1 + v4, v8);
}

uint64_t sub_1004160F0()
{
  uint64_t v2 = *(void *)(type metadata accessor for BluetoothManagerDevice() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = v0[2];
  uint64_t v5 = v0[3];
  uint64_t v6 = v0[4];
  uint64_t v7 = v0[5];
  uint64_t v8 = (uint64_t)v0 + v3;
  uint64_t v9 = *(void *)((char *)v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8));
  unint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v10;
  *unint64_t v10 = v1;
  v10[1] = sub_100033F68;
  return sub_100409FB4(v4, v5, v6, v7, v8, v9);
}

unint64_t sub_100416214(unint64_t result)
{
  if (result >= 3) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_100416228()
{
  uint64_t v1 = type metadata accessor for BluetoothManagerDevice();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 48) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  swift_release();
  swift_release();

  if (*(void *)(v0 + 40) >= 3uLL) {
    swift_bridgeObjectRelease();
  }
  uint64_t v5 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v0 + v3, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = (uint64_t *)(v0 + v3 + *(int *)(v1 + 36));
  unint64_t v7 = v6[1];
  if (v7 >> 60 != 15) {
    sub_10001CFB8(*v6, v7);
  }

  swift_release();

  return _swift_deallocObject(v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_100416398()
{
  uint64_t v1 = *(void *)(type metadata accessor for BluetoothManagerDevice() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *((void *)v0 + 2);
  uint64_t v4 = *((void *)v0 + 3);
  uint64_t v5 = (char *)*((void *)v0 + 4);
  unint64_t v6 = *((void *)v0 + 5);
  uint64_t v7 = *(void *)&v0[(*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8];

  return sub_10040A454(v3, v4, v5, v6, &v0[v2], v7);
}

uint64_t sub_100416430()
{
  uint64_t v2 = *(void *)(type metadata accessor for BluetoothManagerDevice() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v6 = *(void *)(v0 + 24);
  uint64_t v7 = v0 + v3;
  uint64_t v8 = *(void *)(v0 + v4);
  uint64_t v9 = *(void *)(v0 + ((v4 + 15) & 0xFFFFFFFFFFFFFFF8));
  unint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v10;
  *unint64_t v10 = v1;
  v10[1] = sub_100033F68;
  return sub_10040CA88(v5, v6, v7, v8, v9);
}

unint64_t sub_100416558(unint64_t result)
{
  if (result >= 3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100416568(uint64_t *a1)
{
  return sub_10040C3FC(a1, *(void *)(v1 + 16)) & 1;
}

unint64_t sub_100416588()
{
  unint64_t result = qword_101643E30;
  if (!qword_101643E30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101643E30);
  }
  return result;
}

uint64_t sub_1004165DC()
{
  uint64_t v1 = type metadata accessor for BluetoothManagerDevice();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 56) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  uint64_t v5 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v0 + v3, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = (uint64_t *)(v0 + v3 + *(int *)(v1 + 36));
  unint64_t v7 = v6[1];
  if (v7 >> 60 != 15) {
    sub_10001CFB8(*v6, v7);
  }

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

void sub_100416738(uint64_t a1, char a2)
{
  char v4 = a2 & 1;
  uint64_t v5 = *(void *)(type metadata accessor for BluetoothManagerDevice() - 8);
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = v2[5];
  unint64_t v10 = (void *)v2[6];
  uint64_t v11 = (uint64_t)v2 + ((*(unsigned __int8 *)(v5 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  sub_10040C5C4(a1, v4, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_1004167C4(uint64_t *a1)
{
  return sub_10040C314(a1, *(void *)(v1 + 16), *(uint64_t **)(v1 + 24));
}

uint64_t sub_1004167E4()
{
  uint64_t v1 = *(void *)(type metadata accessor for BluetoothManagerDevice() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = *(void **)(v0 + 24);
  uint64_t v6 = *(void *)(v0 + v3);
  uint64_t v7 = *(void *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8));

  return sub_10040B8A8(v4, v5, v0 + v2, v6, v7);
}

uint64_t sub_100416880()
{
  return sub_100419550((void (*)(void))&_swift_release);
}

uint64_t sub_100416898()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v2 = *(unsigned __int8 *)(*((void *)v1 - 1) + 80);
  uint64_t v24 = *(void *)(*((void *)v1 - 1) + 64);
  uint64_t v3 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v23 = *(unsigned __int8 *)(*(void *)(v3 - 8) + 80);
  uint64_t v22 = *(void *)(*(void *)(v3 - 8) + 64);
  swift_release();
  uint64_t v25 = (v2 + 24) & ~v2;
  uint64_t v4 = v0 + v25;
  sub_10001CFB8(*(void *)v4, *(void *)(v4 + 8));
  uint64_t v5 = v0 + v25 + v1[5];
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v5, v6);
  uint64_t v9 = v0 + v25 + v1[6];
  type metadata accessor for StableIdentifier();
  int64_t v26 = v8;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v8(v9, v6);
      uint64_t v10 = v2;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v8(v9, v6);
      uint64_t v10 = v2;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v2 = v10;
      uint64_t v8 = v26;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v11 = v4 + v1[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v11, 1, v6)) {
    v8(v11, v6);
  }
  uint64_t v12 = v4 + v1[8];
  uint64_t v13 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
  sub_10001CFB8(*(void *)(v4 + v1[9]), *(void *)(v4 + v1[9] + 8));
  uint64_t v14 = (uint64_t *)(v4 + v1[10]);
  unint64_t v15 = v14[1];
  if (v15 >> 60 != 15) {
    sub_10001CFB8(*v14, v15);
  }
  uint64_t v16 = (uint64_t *)(v4 + v1[11]);
  unint64_t v17 = v16[1];
  if (v17 >> 60 != 15) {
    sub_10001CFB8(*v16, v17);
  }
  uint64_t v18 = (v25 + v24 + v23) & ~v23;
  sub_10001CFB8(*(void *)(v4 + v1[12]), *(void *)(v4 + v1[12] + 8));
  sub_10001CFB8(*(void *)(v4 + v1[13]), *(void *)(v4 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001CFB8(*(void *)(v0 + v18), *(void *)(v0 + v18 + 8));
  v26(v0 + v18 + *(int *)(v3 + 24), v6);
  uint64_t v19 = v0 + v18 + *(int *)(v3 + 28);
  uint64_t v20 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v20 - 8) + 8))(v19, v20);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, ((v22 + v18 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | v23 | 7);
}

void sub_100416D34(uint64_t a1, char a2)
{
  char v4 = a2 & 1;
  uint64_t v5 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(void *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  unint64_t v9 = (v6 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v2 + 16);
  uint64_t v11 = *(void (**)(void))(v2 + ((*(void *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8));

  sub_100404220(a1, v4, v10, v2 + v6, v2 + v9, v11);
}

uint64_t sub_100416E4C()
{
  uint64_t v1 = v0;
  uint64_t v2 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v3 = *(unsigned __int8 *)(*((void *)v2 - 1) + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v20 = *(void *)(*((void *)v2 - 1) + 64);
  uint64_t v5 = v0 + v4;
  sub_10001CFB8(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v6 = v0 + v4 + v2[5];
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  unint64_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  uint64_t v10 = v0 + v4 + v2[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v9(v10, v7);
      uint64_t v19 = v0;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v9(v10, v7);
      uint64_t v19 = v0;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v1 = v19;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v11 = v5 + v2[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v11, 1, v7)) {
    v9(v11, v7);
  }
  uint64_t v12 = v5 + v2[8];
  uint64_t v13 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
  sub_10001CFB8(*(void *)(v5 + v2[9]), *(void *)(v5 + v2[9] + 8));
  uint64_t v14 = (uint64_t *)(v5 + v2[10]);
  unint64_t v15 = v14[1];
  if (v15 >> 60 != 15) {
    sub_10001CFB8(*v14, v15);
  }
  uint64_t v16 = (uint64_t *)(v5 + v2[11]);
  unint64_t v17 = v16[1];
  if (v17 >> 60 != 15) {
    sub_10001CFB8(*v16, v17);
  }
  sub_10001CFB8(*(void *)(v5 + v2[12]), *(void *)(v5 + v2[12] + 8));
  sub_10001CFB8(*(void *)(v5 + v2[13]), *(void *)(v5 + v2[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v1, v4 + v20, v3 | 7);
}

uint64_t sub_1004171CC(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  uint64_t v6 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_100033F68;
  v6[15] = a1;
  v6[16] = v5;
  return _swift_task_switch(sub_1004048C0, 0, 0);
}

uint64_t sub_1004172B4(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, void (*a5)(uint64_t, void), uint64_t a6)
{
  uint64_t v75 = a6;
  id v76 = a5;
  unint64_t v73 = a3;
  unint64_t v74 = (void (*)(char *, uint64_t))a1;
  uint64_t v71 = type metadata accessor for BeaconIdentifier();
  uint64_t v8 = __chkstk_darwin(v71);
  unint64_t v70 = (char *)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v69 = (uint64_t)&v64 - v10;
  uint64_t v11 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v67 = (uint64_t)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  unint64_t v15 = (char *)&v64 - v14;
  uint64_t v16 = type metadata accessor for Date();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v72 = (char *)&v64 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v64 - v21;
  uint64_t v23 = __chkstk_darwin(v20);
  uint64_t v25 = (char *)&v64 - v24;
  __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v64 - v26;
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v28 = sub_1010ABF80(v79[0]);
  swift_bridgeObjectRelease();
  uint64_t v65 = v28;
  double v29 = (double)v28;
  static Date.trustedNow.getter((uint64_t)v27);
  unint64_t v68 = a2;
  uint64_t v77 = v27;
  Date.timeIntervalSince(_:)();
  double v31 = v30;
  sub_10001D074(a4, (uint64_t)v15, (uint64_t *)&unk_10163AC90);
  uint64_t v66 = *(void (**)(char *, unint64_t, uint64_t))(v17 + 16);
  v66(v22, v73, v16);
  uint64_t v32 = v17;
  uint64_t v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
  if (v33(v15, 1, v16) == 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v25, v22, v16);
    sub_10001DAB4((uint64_t)v15, (uint64_t *)&unk_10163AC90);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v32 + 8))(v22, v16);
    (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v25, v15, v16);
  }
  Date.timeIntervalSince(_:)();
  double v35 = v34;
  uint64_t v36 = *(void (**)(char *, uint64_t))(v32 + 8);
  unint64_t v37 = v32 + 8;
  v36(v25, v16);
  uint64_t v38 = v36;
  if (v35 <= v29 || v31 <= v29)
  {
    uint64_t v47 = v67;
    sub_10001D074(a4, v67, (uint64_t *)&unk_10163AC90);
    if (v33((char *)v47, 1, v16) == 1)
    {
      sub_10001DAB4(v47, (uint64_t *)&unk_10163AC90);
      unint64_t v73 = 0xE500000000000000;
      uint64_t v48 = 0x726576654ELL;
    }
    else
    {
      uint64_t v48 = Date.description.getter();
      unint64_t v73 = v49;
      v36((char *)v47, v16);
    }
    uint64_t v50 = (uint64_t)v70;
    uint64_t v51 = v72;
    if (qword_101636AC0 != -1) {
      swift_once();
    }
    uint64_t v52 = type metadata accessor for Logger();
    sub_100010324(v52, (uint64_t)qword_10170DE38);
    sub_100418628((uint64_t)v74, v50, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    v66(v51, v68, v16);
    swift_bridgeObjectRetain();
    int64_t v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v53, v54))
    {
      uint64_t v55 = swift_slowAlloc();
      unint64_t v70 = (char *)swift_slowAlloc();
      v79[0] = (uint64_t)v70;
      *(_DWORD *)uint64_t v55 = 141558787;
      uint64_t v78 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v55 + 12) = 2081;
      unint64_t v74 = v38;
      type metadata accessor for UUID();
      uint64_t v71 = v48;
      sub_100414C30((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v56 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v78 = sub_1008FA0F0(v56, v57, v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100418B1C(v50, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      *(_WORD *)(v55 + 22) = 2082;
      sub_100414C30((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
      uint64_t v58 = v72;
      uint64_t v59 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v78 = sub_1008FA0F0(v59, v60, v79);
      uint64_t v38 = v74;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v38(v58, v16);
      *(_WORD *)(v55 + 32) = 2080;
      unint64_t v61 = v73;
      swift_bridgeObjectRetain();
      uint64_t v78 = sub_1008FA0F0(v71, v61, v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "Not force pairing %{private,mask.hash}s: lastObserved: %{public}s lastForcePaired: %s", (uint8_t *)v55, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100418B1C(v50, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      v38(v51, v16);

      swift_bridgeObjectRelease_n();
    }
    uint64_t v46 = 0;
  }
  else
  {
    if (qword_101636AC0 != -1) {
      swift_once();
    }
    uint64_t v39 = type metadata accessor for Logger();
    sub_100010324(v39, (uint64_t)qword_10170DE38);
    uint64_t v40 = v69;
    sub_100418628((uint64_t)v74, v69, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = swift_slowAlloc();
      v79[0] = swift_slowAlloc();
      unint64_t v73 = v37;
      *(_DWORD *)uint64_t v43 = 141558531;
      uint64_t v78 = 1752392040;
      unint64_t v74 = v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v43 + 12) = 2081;
      type metadata accessor for UUID();
      sub_100414C30((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v44 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v78 = sub_1008FA0F0(v44, v45, v79);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100418B1C(v40, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
      *(_WORD *)(v43 + 22) = 2048;
      uint64_t v78 = v65;
      uint64_t v38 = v74;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "shouldForcePair beacon %{private,mask.hash}s threshold: %ld seconds", (uint8_t *)v43, 0x20u);
      uint64_t v46 = 1;
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100418B1C(v40, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);

      uint64_t v46 = 1;
    }
  }
  unint64_t v62 = v77;
  v76(v46, 0);
  return ((uint64_t (*)(char *, uint64_t))v38)(v62, v16);
}

uint64_t sub_100417CF4()
{
  uint64_t v1 = type metadata accessor for BluetoothManagerDevice();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  swift_release();

  uint64_t v5 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v0 + v3, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = (uint64_t *)(v0 + v3 + *(int *)(v1 + 36));
  unint64_t v7 = v6[1];
  if (v7 >> 60 != 15) {
    sub_10001CFB8(*v6, v7);
  }

  swift_release();
  swift_release();

  return _swift_deallocObject(v0, ((((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

uint64_t sub_100417E64()
{
  uint64_t v2 = *(void *)(type metadata accessor for BluetoothManagerDevice() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v6 = *(void *)(v0 + 24);
  uint64_t v7 = v0 + v3;
  uint64_t v8 = *(void *)(v0 + v4);
  uint64_t v9 = *(void *)(v0 + ((v4 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v10;
  *uint64_t v10 = v1;
  v10[1] = sub_100033F68;
  return sub_10040BA7C(v5, v6, v7, v8, v9);
}

uint64_t sub_100417F94()
{
  uint64_t v1 = (int *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  sub_10001CFB8(*(void *)(v0 + 24), *(void *)(v0 + 32));
  uint64_t v6 = v0 + v3;
  sub_10001CFB8(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v7 = v0 + v3 + v1[8];
  uint64_t v8 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  uint64_t v9 = v6 + v1[9];
  uint64_t v10 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, v5, v4);
}

uint64_t sub_100418114()
{
  uint64_t v1 = *(void *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  unint64_t v5 = v0[4];
  uint64_t v6 = (uint64_t)v0 + v2;
  uint64_t v7 = (char *)v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = *(void (**)(void))v7;
  uint64_t v9 = *((void *)v7 + 1);

  return sub_1004064B8(v3, v4, v5, v6, v8, v9);
}

uint64_t sub_1004181AC()
{
  return sub_1004194E4((void (*)(void))&_swift_release);
}

uint64_t sub_1004181C4(void *a1, uint64_t a2)
{
  return sub_100408068(a1, a2, *(void *)(v2 + 16), *(void (**)(void, void))(v2 + 24), *(void *)(v2 + 32));
}

uint64_t sub_1004181E4()
{
  uint64_t v1 = type metadata accessor for BluetoothManagerDevice();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 48) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  swift_release();
  swift_release();
  swift_release();

  uint64_t v5 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v0 + v3, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = (uint64_t *)(v0 + v3 + *(int *)(v1 + 36));
  unint64_t v7 = v6[1];
  if (v7 >> 60 != 15) {
    sub_10001CFB8(*v6, v7);
  }

  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v2 | 7);
}

void sub_10041834C()
{
  uint64_t v1 = *(void *)(type metadata accessor for BluetoothManagerDevice() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = *(char **)(v0 + 40);
  uint64_t v5 = (uint8_t *)(v0 + v2);
  uint64_t v6 = *(uint8_t **)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));
  Transaction.capture()();
  sub_1003FBA44(v3, v4, v5, 1, v6);
}

uint64_t sub_100418410()
{
  uint64_t v1 = type metadata accessor for BluetoothManagerDevice();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  swift_release();
  uint64_t v5 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v0 + v3, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v6 = (uint64_t *)(v0 + v3 + *(int *)(v1 + 36));
  unint64_t v7 = v6[1];
  if (v7 >> 60 != 15) {
    sub_10001CFB8(*v6, v7);
  }
  unint64_t v8 = (((((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;

  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v8 + 8, v2 | 7);
}

void sub_100418588()
{
  uint64_t v1 = *(void *)(type metadata accessor for BluetoothManagerDevice() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_10040D320(*(void *)(v0 + 16), (uint8_t *)(v0 + v2), *(void *)(v0 + v3), *(void *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8)), *(char **)(v0 + ((((v3 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_100418628(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100418690(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void sub_1004186FC(uint64_t a1, char a2)
{
  char v4 = a2 & 1;
  uint64_t v5 = *(void *)(type metadata accessor for StandaloneBeacon() - 8);
  uint64_t v6 = *(void *)(v2 + 16);
  uint64_t v7 = v2 + ((*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  sub_1003F2DEC(a1, v4, v6, v7);
}

uint64_t sub_100418780()
{
  uint64_t v1 = (int *)(type metadata accessor for StandaloneBeacon() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v14 = v2 | 7;
  unint64_t v4 = ((((((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
     + 8;
  swift_unknownObjectRelease();
  uint64_t v5 = v0 + v3;
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = v5 + v1[7];
  uint64_t v8 = type metadata accessor for MACAddress();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
  v9(v7, v8);
  v9(v5 + v1[8], v8);
  swift_bridgeObjectRelease();
  uint64_t v10 = v5 + v1[10];
  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  sub_10001CFB8(*(void *)(v5 + v1[11]), *(void *)(v5 + v1[11] + 8));
  uint64_t v12 = v5 + v1[12];
  sub_10001CFB8(*(void *)v12, *(void *)(v12 + 8));
  sub_10001CFB8(*(void *)(v12 + 16), *(void *)(v12 + 24));
  sub_10001CFB8(*(void *)(v12 + 32), *(void *)(v12 + 40));
  sub_10001CFB8(*(void *)(v5 + v1[13]), *(void *)(v5 + v1[13] + 8));
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v4, v14);
}

uint64_t sub_1004189A4(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for StandaloneBeacon() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void *)(v1 + 16);
  uint64_t v9 = *(void *)(v1 + 24);
  uint64_t v10 = v1 + v5;
  uint64_t v11 = *(void *)(v1 + v6);
  uint64_t v12 = *(void *)(v1 + v7);
  uint64_t v13 = *(void *)(v1 + v7 + 8);
  uint64_t v14 = *(void *)(v1 + ((v7 + 23) & 0xFFFFFFFFFFFFFFF8));
  unint64_t v15 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v15;
  *unint64_t v15 = v2;
  v15[1] = sub_100033F68;
  return sub_100404EA4(a1, v8, v9, v10, v11, v12, v13, v14);
}

uint64_t sub_100418AF8()
{
  return sub_1004194E4((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_100418B10()
{
  return sub_100405F44(*(void *)(v0 + 16), *(uint64_t (**)(uint64_t, uint64_t))(v0 + 24));
}

uint64_t sub_100418B1C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100418B80()
{
  uint64_t v1 = (int *)(type metadata accessor for StandaloneBeacon() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_release();
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  uint64_t v8 = v6 + v1[7];
  uint64_t v9 = type metadata accessor for MACAddress();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8);
  v10(v8, v9);
  v10(v6 + v1[8], v9);
  swift_bridgeObjectRelease();
  uint64_t v11 = v6 + v1[10];
  uint64_t v12 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  sub_10001CFB8(*(void *)(v6 + v1[11]), *(void *)(v6 + v1[11] + 8));
  uint64_t v13 = v6 + v1[12];
  sub_10001CFB8(*(void *)v13, *(void *)(v13 + 8));
  sub_10001CFB8(*(void *)(v13 + 16), *(void *)(v13 + 24));
  sub_10001CFB8(*(void *)(v13 + 32), *(void *)(v13 + 40));
  sub_10001CFB8(*(void *)(v6 + v1[13]), *(void *)(v6 + v1[13] + 8));

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_100418D68()
{
  uint64_t v1 = *(void *)(type metadata accessor for StandaloneBeacon() - 8);
  return sub_1003F333C(v0 + ((*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)), (uint64_t)sub_1003F331C, 0);
}

uint64_t sub_100418DE4()
{
  uint64_t v1 = (int *)(type metadata accessor for StandaloneBeacon() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v14 = v2 | 7;
  unint64_t v4 = ((((((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
     + 8;
  uint64_t v5 = v0 + v3;
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = v5 + v1[7];
  uint64_t v8 = type metadata accessor for MACAddress();
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
  v9(v7, v8);
  v9(v5 + v1[8], v8);
  swift_bridgeObjectRelease();
  uint64_t v10 = v5 + v1[10];
  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10, v11);
  sub_10001CFB8(*(void *)(v5 + v1[11]), *(void *)(v5 + v1[11] + 8));
  uint64_t v12 = v5 + v1[12];
  sub_10001CFB8(*(void *)v12, *(void *)(v12 + 8));
  sub_10001CFB8(*(void *)(v12 + 16), *(void *)(v12 + 24));
  sub_10001CFB8(*(void *)(v12 + 32), *(void *)(v12 + 40));
  sub_10001CFB8(*(void *)(v5 + v1[13]), *(void *)(v5 + v1[13] + 8));
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v4, v14);
}

uint64_t sub_100419000()
{
  uint64_t v1 = *(void *)(type metadata accessor for StandaloneBeacon() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v4 = (v3 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)(v0 + v3);
  uint64_t v6 = *(void *)(v0 + v4);
  uint64_t v7 = *(void *)(v0 + v4 + 8);

  return sub_100407434(v0 + v2, v5, v6, v7);
}

uint64_t sub_1004190A8()
{
  return sub_1004194E4((void (*)(void))&_swift_release);
}

void sub_1004190C4(uint64_t a1)
{
  sub_1003EDC1C(a1, *(void *)(v1 + 16), *(char **)(v1 + 24));
}

void sub_1004190CC(id a1, char a2)
{
  if ((a2 & 1) == 0) {
}
  }

id sub_1004190D8(id result, char a2)
{
  if ((a2 & 1) == 0) {
    return result;
  }
  return result;
}

uint64_t sub_1004190E4()
{
  uint64_t v1 = type metadata accessor for MACAddress();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6 + 8, v5);
}

void sub_100419188()
{
  uint64_t v1 = *(void *)(type metadata accessor for MACAddress() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(NSObject **)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));

  sub_1003EC308(v0 + v2, v3);
}

uint64_t sub_100419214()
{
  uint64_t v1 = type metadata accessor for MACAddress();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6 + 8, v5);
}

void sub_1004192D0()
{
  uint64_t v1 = *(void *)(type metadata accessor for MACAddress() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void *)(v0 + v3);
  uint64_t v5 = *(void *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8));

  sub_1003EC6A0(v0 + v2, v4, v5);
}

void sub_100419368(uint64_t a1@<X8>)
{
  sub_100EFEB50(*(void *)(v1 + 24), a1);
}

void sub_100419388(char **a1)
{
  sub_1003E8FA8(a1, *(void *)(v1 + 16), *(char **)(v1 + 24));
}

uint64_t sub_100419394()
{
  uint64_t v2 = swift_task_alloc();
  long long v3 = *(_OWORD *)(v0 + 16);
  *(void *)(v1 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_100033F68;
  *(_OWORD *)(v2 + 40) = v3;
  return _swift_task_switch(sub_1003E97F0, 0, 0);
}

uint64_t sub_100419440(uint64_t a1)
{
  return sub_1003E9B84(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_10041945C()
{
  return sub_100419550((void (*)(void))&_swift_release);
}

void sub_100419474()
{
  sub_1003F4D78(*(NSObject **)(v0 + 24));
  Transaction.capture()();
}

uint64_t sub_1004194A8()
{
  return sub_1003E87CC();
}

uint64_t sub_1004194B0(uint64_t a1)
{
  return sub_1003E9E64(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1004194CC()
{
  return sub_1004194E4((void (*)(void))&_swift_release);
}

uint64_t sub_1004194E4(void (*a1)(void))
{
  a1(*(void *)(v1 + 16));
  swift_release();

  return _swift_deallocObject(v1, 40, 7);
}

void sub_10041952C()
{
  sub_1003EA140(*(void *)(v0 + 16), *(void *)(v0 + 24), *(char **)(v0 + 32));
}

uint64_t sub_100419538()
{
  return sub_100419550((void (*)(void))&_swift_release);
}

uint64_t sub_100419550(void (*a1)(void))
{
  swift_release();

  a1(*(void *)(v1 + 32));

  return _swift_deallocObject(v1, 40, 7);
}

uint64_t sub_1004195A8(uint64_t a1)
{
  return sub_1003E7184(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1004195C8()
{
  uint64_t v1 = type metadata accessor for BluetoothManagerDevice();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v5 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v0 + v3, v5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v6 = (uint64_t *)(v0 + v3 + *(int *)(v1 + 36));
  unint64_t v7 = v6[1];
  if (v7 >> 60 != 15) {
    sub_10001CFB8(*v6, v7);
  }

  return _swift_deallocObject(v0, v3 + v4, v2 | 7);
}

uint64_t sub_1004196FC(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for BluetoothManagerDevice() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_1003E7460(a1, v4);
}

uint64_t sub_10041976C()
{
  uint64_t v1 = type metadata accessor for BluetoothManagerDevice();
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v16 = *(void *)(*(void *)(v1 - 8) + 64);
  uint64_t v4 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(v4 - 8) + 80);
  uint64_t v14 = *(void *)(*(void *)(v4 - 8) + 64);
  swift_release();
  uint64_t v6 = type metadata accessor for MACAddress();
  unint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8);
  v7(v0 + v3, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v8 = (uint64_t *)(v0 + v3 + *(int *)(v1 + 36));
  unint64_t v9 = v8[1];
  if (v9 >> 60 != 15) {
    sub_10001CFB8(*v8, v9);
  }
  uint64_t v15 = v2 | v5 | 7;
  unint64_t v10 = (((v16 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + v5 + 8) & ~v5;

  swift_release();
  sub_10001CFB8(*(void *)(v0 + v10), *(void *)(v0 + v10 + 8));
  unint64_t v11 = v0 + v10 + *(int *)(v4 + 24);
  uint64_t v12 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  v7(v0 + v10 + *(int *)(v4 + 28), v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, v10 + v14, v15);
}

void sub_1004199CC(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for BluetoothManagerDevice() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  uint64_t v7 = *(void *)(v1 + 16);
  uint64_t v8 = *(void *)(v1 + v5);
  uint64_t v9 = v1 + ((v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));

  sub_1003E74C8(a1, v7, v1 + v4, v8, v9);
}

void sub_100419ABC(id a1)
{
  if (a1 != (id)1) {
}
  }

id sub_100419ACC(id result)
{
  if (result != (id)1) {
    return result;
  }
  return result;
}

uint64_t sub_100419ADC(uint64_t a1)
{
  return sub_1003E5C54(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100419AF8()
{
  uint64_t v1 = type metadata accessor for Notification();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

void sub_100419BE0()
{
  uint64_t v1 = *(void *)(type metadata accessor for Notification() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8));

  sub_1003E6008(v3, v0 + v2, v4);
}

uint64_t sub_100419CBC@<X0>(uint64_t *a1@<X8>)
{
  return sub_100415600(a1);
}

uint64_t sub_100419D0C@<X0>(unsigned char *a1@<X8>)
{
  return sub_100414D10(a1);
}

void sub_100419D24(uint64_t a1@<X8>)
{
}

uint64_t sub_100419D48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[20] = a4;
  v5[21] = v4;
  v5[18] = a2;
  v5[19] = a3;
  v5[17] = a1;
  v5[22] = type metadata accessor for PencilSecureLocationsFetchEndpoint();
  v5[23] = swift_task_alloc();
  type metadata accessor for SearchpartyAccount();
  unsigned char v5[24] = swift_task_alloc();
  v5[25] = swift_task_alloc();
  return _swift_task_switch(sub_100419E20, v4, 0);
}

uint64_t sub_100419E20()
{
  v0[26] = *(void *)(v0[21] + 112);
  uint64_t v1 = (void *)swift_task_alloc();
  v0[27] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100419EC0;
  uint64_t v2 = v0[25];
  return sub_10028C83C(v2);
}

uint64_t sub_100419EC0()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 224) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 168);
  if (v0) {
    uint64_t v4 = sub_10041A228;
  }
  else {
    uint64_t v4 = sub_100419FEC;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_100419FEC()
{
  uint64_t v1 = (void *)v0[25];
  v0[29] = v1[2];
  v0[30] = v1[3];
  v0[31] = v1[4];
  v0[32] = v1[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_10041ACB4((uint64_t)v1, (uint64_t (*)(void))type metadata accessor for SearchpartyAccount);
  type metadata accessor for ServerInteractionController();
  v0[33] = ServerInteractionController.__allocating_init(bundleIdentifier:)();
  uint64_t v2 = (void *)swift_task_alloc();
  v0[34] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_10041A0FC;
  uint64_t v3 = v0[24];
  return sub_10028C83C(v3);
}

uint64_t sub_10041A0FC()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 280) = v0;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 168);
  if (v0) {
    uint64_t v4 = sub_10041A584;
  }
  else {
    uint64_t v4 = sub_10041A2A8;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10041A228()
{
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10041A2A8()
{
  uint64_t v2 = *(void *)(v0 + 248);
  uint64_t v1 = *(void *)(v0 + 256);
  long long v14 = *(_OWORD *)(v0 + 232);
  uint64_t v3 = *(void *)(v0 + 184);
  uint64_t v4 = *(void *)(v0 + 176);
  unint64_t v6 = *(void *)(v0 + 152);
  uint64_t v5 = *(void *)(v0 + 160);
  uint64_t v7 = *(void *)(v0 + 144);
  sub_101260DF8(*(void *)(v0 + 192), v3);
  *(void *)(v0 + 40) = v4;
  *(void *)(v0 + 48) = sub_10041AB64();
  uint64_t v8 = sub_10001D958((uint64_t *)(v0 + 16));
  sub_10041ABBC(v3, (uint64_t)v8);
  *(void *)(v0 + 80) = &type metadata for PencilSecureLocationsFetchRequest;
  unint64_t v9 = sub_10041AC20();
  *(void *)(v0 + 56) = v7;
  *(void *)(v0 + 88) = v9;
  *(void *)(v0 + 64) = v6;
  *(void *)(v0 + 72) = v5;
  *(void *)(v0 + 120) = &type metadata for SearchpartyCredential;
  *(void *)(v0 + 128) = sub_100098728();
  uint64_t v10 = swift_allocObject();
  *(void *)(v0 + 96) = v10;
  *(_OWORD *)(v10 + 16) = v14;
  *(void *)(v10 + 32) = v2;
  *(void *)(v10 + 40) = v1;
  sub_100037A38(v7, v6);
  uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&async function pointer to dispatch thunk of ServerInteractionController.send(endpoint:content:credential:)
                                                                   + async function pointer to dispatch thunk of ServerInteractionController.send(endpoint:content:credential:));
  swift_bridgeObjectRetain();
  unint64_t v11 = (void *)swift_task_alloc();
  *(void *)(v0 + 288) = v11;
  *unint64_t v11 = v0;
  v11[1] = sub_10041A43C;
  uint64_t v12 = *(void *)(v0 + 136);
  return v15(v12, v0 + 16, v0 + 56, v0 + 96);
}

uint64_t sub_10041A43C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 296) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 168);
    uint64_t v4 = sub_10041A6C8;
  }
  else
  {
    uint64_t v5 = v2 + 16;
    uint64_t v6 = v2 + 96;
    uint64_t v7 = v2 + 56;
    uint64_t v8 = *(void *)(v2 + 168);
    sub_10041AD14(v6);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v7);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v5);
    uint64_t v4 = sub_10041A620;
    uint64_t v3 = v8;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10041A584()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10041A620()
{
  uint64_t v1 = *(void *)(v0 + 184);
  swift_release();
  sub_10041ACB4(v1, (uint64_t (*)(void))type metadata accessor for PencilSecureLocationsFetchEndpoint);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10041A6C8()
{
  uint64_t v1 = *(void *)(v0 + 184);
  swift_release();
  sub_10041ACB4(v1, (uint64_t (*)(void))type metadata accessor for PencilSecureLocationsFetchEndpoint);
  sub_10041AD14(v0 + 96);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 56);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_10041A794()
{
  swift_release();
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for PencilSecureLocationsFetch()
{
  return self;
}

uint64_t sub_10041A7F0(uint64_t a1)
{
  *(void *)(v1 + 120) = type metadata accessor for PencilSecureLocationsFetch();
  *(void *)(v1 + 128) = swift_allocObject();
  swift_defaultActor_initialize();
  if (a1)
  {
    *(void *)(*(void *)(v1 + 128) + 112) = a1;
    uint64_t v3 = *(uint64_t (**)(uint64_t))(v1 + 8);
    uint64_t v4 = *(void *)(v1 + 128);
    return v3(v4);
  }
  else
  {
    if (qword_1016375E8 != -1) {
      swift_once();
    }
    swift_beginAccess();
    uint64_t result = sub_1000977C4((uint64_t)&xmmword_10166E8F0, v1 + 56);
    if (*(void *)(v1 + 80))
    {
      sub_10001CEB0((long long *)(v1 + 56), v1 + 16);
      sub_10001CD44((void *)(v1 + 16), *(void *)(v1 + 40));
      uint64_t v7 = (uint64_t (__cdecl *)())((char *)&dword_101639340 + dword_101639340);
      uint64_t v6 = (void *)swift_task_alloc();
      *(void *)(v1 + 136) = v6;
      *uint64_t v6 = v1;
      v6[1] = sub_10041A98C;
      return v7();
    }
    else
    {
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_10041A98C(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 16;
  uint64_t v5 = *v1;
  swift_task_dealloc();
  if (a1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v4);
    *(void *)(*(void *)(v3 + 128) + 112) = a1;
    uint64_t v6 = *(uint64_t (**)(uint64_t))(v5 + 8);
    uint64_t v7 = *(void *)(v3 + 128);
    return v6(v7);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v4);
    sub_10001CEC8();
    swift_allocError();
    strcpy(v9, "AccountService");
    v9[15] = -18;
    swift_willThrow();
    swift_defaultActor_destroy();
    swift_deallocPartialClassInstance();
    uint64_t v10 = *(uint64_t (**)(void))(v5 + 8);
    return v10();
  }
}

unint64_t sub_10041AB64()
{
  unint64_t result = qword_101644078;
  if (!qword_101644078)
  {
    type metadata accessor for PencilSecureLocationsFetchEndpoint();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644078);
  }
  return result;
}

uint64_t sub_10041ABBC(uint64_t a1, uint64_t a2)
{
  uint64_t Endpoint = type metadata accessor for PencilSecureLocationsFetchEndpoint();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(Endpoint - 8) + 16))(a2, a1, Endpoint);
  return a2;
}

unint64_t sub_10041AC20()
{
  unint64_t result = qword_101644080;
  if (!qword_101644080)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644080);
  }
  return result;
}

uint64_t sub_10041AC74()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10041ACB4(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10041AD14(uint64_t a1)
{
  uint64_t v2 = sub_10000588C(&qword_10163A238);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for KeyUnion()
{
  return &type metadata for KeyUnion;
}

unint64_t sub_10041AD88()
{
  unint64_t result = qword_101644088;
  if (!qword_101644088)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644088);
  }
  return result;
}

uint64_t sub_10041ADDC(char *a1, char *a2)
{
  return sub_100719F84(*a1, *a2);
}

Swift::Int sub_10041ADE8()
{
  return Hasher._finalize()();
}

uint64_t sub_10041AE48()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10041AE8C()
{
  return Hasher._finalize()();
}

uint64_t sub_10041AEE8@<X0>(Swift::String *a1@<X0>, char *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1015A1400, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3 == 1) {
    char v5 = 1;
  }
  else {
    char v5 = 2;
  }
  if (!v3) {
    char v5 = 0;
  }
  *a2 = v5;
  return result;
}

void sub_10041AF48(uint64_t *a1@<X8>)
{
  uint64_t v2 = 84;
  if (*v1) {
    uint64_t v2 = 80;
  }
  *a1 = v2;
  a1[1] = 0xE100000000000000;
}

uint64_t sub_10041AF68()
{
  if (*v0) {
    return 80;
  }
  else {
    return 84;
  }
}

uint64_t sub_10041AF84@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1015A1400, v3);
  uint64_t result = swift_bridgeObjectRelease();
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

uint64_t sub_10041AFE8(uint64_t a1)
{
  unint64_t v2 = sub_10041B6D0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10041B024(uint64_t a1)
{
  unint64_t v2 = sub_10041B6D0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10041B060()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_10041B0C0()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_10041B110(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v7 = sub_10000588C(&qword_1016440A8);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_10041B6D0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if ((a3 & 0x2000000000000000) != 0)
  {
    LOBYTE(v12) = 1;
    char v14 = 0;
    sub_1000361E0(a2, a3 & 0xDFFFFFFFFFFFFFFFLL);
    sub_10041B778();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    if (!v3)
    {
      uint64_t v12 = a2;
      unint64_t v13 = a3 & 0xDFFFFFFFFFFFFFFFLL;
      char v14 = 1;
      goto LABEL_7;
    }
LABEL_5:
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    return sub_1001A1AD8(a2, a3);
  }
  LOBYTE(v12) = 0;
  char v14 = 0;
  sub_1000361E0(a2, a3);
  sub_10041B778();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v3) {
    goto LABEL_5;
  }
  uint64_t v12 = a2;
  unint64_t v13 = a3;
  char v14 = 1;
LABEL_7:
  sub_100037BB4();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  sub_1001A1AD8(a2, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_10041B340(uint64_t *a1, uint64_t *a2)
{
  return sub_10041B39C(*a1, a1[1], *a2, a2[1]);
}

uint64_t sub_10041B354@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10041B46C(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_10041B380(void *a1)
{
  return sub_10041B110(a1, *(void *)v1, *(void *)(v1 + 8));
}

uint64_t sub_10041B39C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((a2 & 0x2000000000000000) != 0)
  {
    if ((a4 & 0x2000000000000000) != 0)
    {
      sub_1001A1790(a1, a2);
      sub_1001A1790(a3, a4);
      uint64_t v8 = a1;
      unint64_t v9 = a2 & 0xDFFFFFFFFFFFFFFFLL;
      uint64_t v10 = a3;
      unint64_t v11 = a4 & 0xDFFFFFFFFFFFFFFFLL;
      goto LABEL_7;
    }
  }
  else if ((a4 & 0x2000000000000000) == 0)
  {
    sub_1001A1790(a1, a2);
    sub_1001A1790(a3, a4);
    uint64_t v8 = a1;
    unint64_t v9 = a2;
    uint64_t v10 = a3;
    unint64_t v11 = a4;
LABEL_7:
    char v12 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v8, v9, v10, v11);
    sub_1001A1AD8(a3, a4);
    sub_1001A1AD8(a1, a2);
    return v12 & 1;
  }
  char v12 = 0;
  return v12 & 1;
}

uint64_t sub_10041B46C(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_101644090);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (uint64_t)sub_10001CD44(a1, a1[3]);
  sub_10041B6D0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v1)
  {
    char v12 = 0;
    sub_10041B724();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    char v12 = 1;
    if (v10)
    {
      sub_100037AA0();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v7 = sub_10043A040(v10, v11);
    }
    else
    {
      sub_100037AA0();
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      uint64_t v7 = sub_10043A38C(v10, v11);
    }
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  return v7;
}

unint64_t sub_10041B6D0()
{
  unint64_t result = qword_101644098;
  if (!qword_101644098)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644098);
  }
  return result;
}

unint64_t sub_10041B724()
{
  unint64_t result = qword_1016440A0;
  if (!qword_1016440A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016440A0);
  }
  return result;
}

unint64_t sub_10041B778()
{
  unint64_t result = qword_1016440B0;
  if (!qword_1016440B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016440B0);
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyUnion.PayloadType()
{
  return &type metadata for KeyUnion.PayloadType;
}

unsigned char *_s12searchpartyd8KeyUnionO11PayloadTypeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10041B8ACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyUnion.CodingKeys()
{
  return &type metadata for KeyUnion.CodingKeys;
}

unint64_t sub_10041B8E8()
{
  unint64_t result = qword_1016440B8;
  if (!qword_1016440B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016440B8);
  }
  return result;
}

unint64_t sub_10041B940()
{
  unint64_t result = qword_1016440C0;
  if (!qword_1016440C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016440C0);
  }
  return result;
}

unint64_t sub_10041B998()
{
  unint64_t result = qword_1016440C8;
  if (!qword_1016440C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016440C8);
  }
  return result;
}

unint64_t sub_10041B9F0()
{
  unint64_t result = qword_1016440D0;
  if (!qword_1016440D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016440D0);
  }
  return result;
}

unint64_t sub_10041BA44()
{
  unint64_t result = qword_1016440D8;
  if (!qword_1016440D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016440D8);
  }
  return result;
}

uint64_t sub_10041BA98()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170DE50);
  sub_100010324(v0, (uint64_t)qword_10170DE50);
  return Logger.init(subsystem:category:)();
}

id sub_10041BB20()
{
  uint64_t v1 = *(void **)(v0 + 56);
  if (v1)
  {
    id v2 = *(id *)(v0 + 56);
  }
  else
  {
    int v3 = (objc_class *)type metadata accessor for UnknownDiscoveryTrampoline();
    unsigned int v4 = (char *)objc_allocWithZone(v3);
    *(void *)&v4[OBJC_IVAR____TtC12searchpartyd26UnknownDiscoveryTrampoline_implementation] = v0;
    v9.receiver = v4;
    v9.super_class = v3;
    swift_retain();
    id v5 = [super init];
    unsigned int v6 = *(void **)(v0 + 56);
    *(void *)(v0 + 56) = v5;
    id v2 = v5;

    uint64_t v1 = 0;
  }
  id v7 = v1;
  return v2;
}

void *sub_10041BBBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = a3;
  uint64_t v18 = a4;
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v5);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v6 - 8);
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v14 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4[2] = 0xD000000000000017;
  v4[3] = 0x8000000101357380;
  sub_10000584C();
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v7);
  static DispatchQoS.unspecified.getter();
  uint64_t v19 = _swiftEmptyArrayStorage;
  sub_10041ECCC((unint64_t *)&qword_101638CC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000588C((uint64_t *)&unk_1016376F0);
  sub_1001BF100((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v4[5] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  type metadata accessor for XPCSessionManager();
  swift_allocObject();
  v4[6] = XPCSessionManager.init(name:)();
  v4[7] = 0;
  v4[4] = v15;
  uint64_t v11 = v16;
  v4[8] = 0;
  v4[9] = v11;
  uint64_t v12 = v18;
  v4[10] = v17;
  v4[11] = v12;
  return v4;
}

uint64_t sub_10041BE70()
{
  uint64_t v1 = *(NSObject **)(v0 + 40);
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = sub_10041D31C;
  *(void *)(v2 + 24) = v0;
  v5[4] = sub_100132424;
  v5[5] = v2;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 1107296256;
  v5[2] = sub_1000A70B0;
  v5[3] = &unk_1015BFE50;
  int v3 = _Block_copy(v5);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v1, v3);
  _Block_release(v3);
  LOBYTE(v1) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (v1) {
    __break(1u);
  }
  return result;
}

uint64_t sub_10041BFA4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for XPCServiceDescription();
  uint64_t v23 = *(void *)(v2 - 8);
  uint64_t v24 = v2;
  __chkstk_darwin(v2);
  unsigned int v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for MachServiceName();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v23 - v10;
  uint64_t v12 = type metadata accessor for DispatchPredicate();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (uint64_t *)((char *)&v23 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = *(void **)(a1 + 40);
  *uint64_t v15 = v16;
  (*(void (**)(void *, void, uint64_t))(v13 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v12);
  id v17 = v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v13 + 8))(v15, v12);
  if ((v16 & 1) == 0)
  {
    __break(1u);
    goto LABEL_5;
  }
  MachServiceName.init(_:)();
  (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v9, v11, v5);
  sub_10041BB20();
  if (qword_101636AD8 != -1) {
LABEL_5:
  }
    swift_once();
  uint64_t v18 = (void *)qword_1016440E0;
  uint64_t v19 = self;
  id v20 = v18;
  id v21 = [v19 interfaceWithProtocol:&OBJC_PROTOCOL___SPUnknownDiscoveryXPCClientProtocol];
  swift_retain_n();
  XPCServiceDescription.init(name:options:exportedObject:exportedInterface:remoteObjectInterface:shouldAccept:interruptionHandler:invalidationHandler:)();
  XPCSessionManager.register(service:)();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v4, v24);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v11, v5);
}

uint64_t sub_10041C340(void *a1)
{
  uint64_t v2 = v1;
  if (qword_101636AD0 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100010324(v4, (uint64_t)qword_10170DE50);
  id v5 = a1;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138412290;
    aBlock[0] = v5;
    id v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v9 = v5;

    _os_log_impl((void *)&_mh_execute_header, v6, v7, "shouldAccept: %@", v8, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  sub_10041EB78();
  char v11 = NSXPCConnection.hasEntitlement<A>(_:)();
  if (v11)
  {
    uint64_t v12 = *(NSObject **)(v2 + 40);
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = v2;
    *(void *)(v13 + 24) = v5;
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = sub_10041EBD0;
    *(void *)(v14 + 24) = v13;
    aBlock[4] = sub_1003B7AE0;
    aBlock[5] = v14;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1000A70B0;
    aBlock[3] = &unk_1015C0030;
    uint64_t v15 = _Block_copy(aBlock);
    id v16 = v5;
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(v12, v15);
    _Block_release(v15);
    LOBYTE(v15) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if ((v15 & 1) == 0) {
      return v11 & 1;
    }
    __break(1u);
  }
  id v17 = v5;
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v18, v19))
  {
    id v20 = (uint8_t *)swift_slowAlloc();
    id v21 = (void *)swift_slowAlloc();
    *(_DWORD *)id v20 = 138412290;
    aBlock[0] = v17;
    uint64_t v22 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v21 = v17;

    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Missing entitlement: %@", v20, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v18 = v17;
  }

  return v11 & 1;
}

uint64_t sub_10041C748(void *a1)
{
  uint64_t v2 = v1;
  if (qword_101636AD0 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100010324(v4, (uint64_t)qword_10170DE50);
  id v5 = a1;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138412290;
    v18[0] = v5;
    id v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v9 = v5;

    _os_log_impl((void *)&_mh_execute_header, v6, v7, "interruptionHandler: %@", v8, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  char v11 = *(NSObject **)(v2 + 40);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v2;
  *(void *)(v12 + 24) = v5;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = sub_10041EB40;
  *(void *)(v13 + 24) = v12;
  v18[4] = sub_1003B7AE0;
  v18[5] = v13;
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 1107296256;
  v18[2] = sub_1000A70B0;
  v18[3] = &unk_1015BFFB8;
  uint64_t v14 = _Block_copy(v18);
  id v15 = v5;
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v11, v14);
  _Block_release(v14);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

uint64_t sub_10041CA0C(void *a1)
{
  uint64_t v2 = v1;
  if (qword_101636AD0 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100010324(v4, (uint64_t)qword_10170DE50);
  id v5 = a1;
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 138412290;
    v18[0] = v5;
    id v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v9 = v5;

    _os_log_impl((void *)&_mh_execute_header, v6, v7, "invalidationHandler: %@", v8, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  char v11 = *(NSObject **)(v2 + 40);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v2;
  *(void *)(v12 + 24) = v5;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = sub_10041ED84;
  *(void *)(v13 + 24) = v12;
  v18[4] = sub_1003B7AE0;
  v18[5] = v13;
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 1107296256;
  v18[2] = sub_1000A70B0;
  v18[3] = &unk_1015BFEC8;
  uint64_t v14 = _Block_copy(v18);
  id v15 = v5;
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v11, v14);
  _Block_release(v14);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

id sub_10041CCD0()
{
  id result = [self interfaceWithProtocol:&OBJC_PROTOCOL___SPUnknownDiscoveryXPCProtocol];
  qword_1016440E0 = (uint64_t)result;
  return result;
}

uint64_t sub_10041CD20(void *a1, void *a2)
{
  if (!a1[8])
  {
    uint64_t v4 = a1[4];
    uint64_t v5 = a1[9];
    uint64_t v6 = (void *)a1[10];
    uint64_t v7 = a1[11];
    type metadata accessor for UnknownDiscoverySession();
    swift_allocObject();
    swift_retain();
    swift_retain();
    id v8 = v6;
    swift_retain();
    uint64_t v9 = sub_101116830(v4, v5, v8, v7);
    if (qword_101636AD0 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_100010324(v10, (uint64_t)qword_10170DE50);
    swift_retain();
    char v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v15 = swift_slowAlloc();
      *(_DWORD *)uint64_t v13 = 136315138;
      sub_1008FA0F0(0xD000000000000017, 0x80000001013FC2D0, &v15);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Created new UnknownDiscoverySession: %s", v13, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release();
    }
    a1[8] = v9;
    swift_retain();
    swift_release();
  }
  swift_retain();
  sub_101120640(a2);
  return swift_release();
}

uint64_t sub_10041CF6C(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (void *)((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v8 = *(void **)(v2 + 40);
  void *v7 = v8;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v11 = *(void *)(v2 + 64);
  if (!v11) {
    return result;
  }
  os_log_type_t v12 = *(NSObject **)(v11 + 16);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v11;
  *(void *)(v13 + 24) = a1;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = sub_10041EB08;
  *(void *)(v14 + 24) = v13;
  aBlock[4] = sub_1003B7AE0;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000A70B0;
  aBlock[3] = &unk_1015BFF40;
  uint64_t v15 = _Block_copy(aBlock);
  swift_retain_n();
  id v16 = a1;
  swift_retain();
  swift_release();
  dispatch_sync(v12, v15);
  _Block_release(v15);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  OS_dispatch_queue.sync<A>(execute:)();
  if (LOBYTE(aBlock[0]) == 1)
  {
    *(void *)(v2 + 64) = 0;
    swift_release();
    sub_1011CE548();
  }
  return swift_release();
}

id *sub_10041D20C()
{
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  swift_release();
  swift_release();

  swift_release();
  return v0;
}

uint64_t sub_10041D26C()
{
  sub_10041D20C();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for UnknownDiscoveryService()
{
  return self;
}

uint64_t sub_10041D2C4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_10041D2F8()
{
  return sub_10041BE70();
}

uint64_t sub_10041D31C()
{
  return sub_10041BFA4(v0);
}

uint64_t sub_10041D324()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10041D334(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_10041D344()
{
  return swift_release();
}

uint64_t sub_10041D35C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10041D36C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (qword_101636AD0 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100010324(v6, (uint64_t)qword_10170DE50);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    id v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)id v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "UnknownDiscoveryService.start", v9, 2u);
    swift_slowDealloc();
  }

  uint64_t v10 = *(NSObject **)(v3 + 40);
  uint64_t v11 = (void *)swift_allocObject();
  void v11[2] = v3;
  v11[3] = a1;
  void v11[4] = a2;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = sub_10041EC78;
  *(void *)(v12 + 24) = v11;
  v16[4] = sub_1003B7AE0;
  uint64_t v16[5] = v12;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 1107296256;
  void v16[2] = sub_1000A70B0;
  v16[3] = &unk_1015C0288;
  uint64_t v13 = _Block_copy(v16);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v10, v13);
  _Block_release(v13);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

uint64_t sub_10041D590(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v37 = a2;
  uint64_t v38 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v39 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(a1 + 64);
  uint64_t v40 = v8;
  if (v15)
  {
    swift_retain();
    sub_101116E38();
    sub_10000584C();
    (*(void (**)(char *, void, uint64_t))(v12 + 104))(v14, enum case for DispatchQoS.QoSClass.default(_:), v11);
    id v16 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = v37;
    *(void *)(v17 + 24) = a3;
    uint64_t v46 = sub_10041ED88;
    uint64_t v47 = v17;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v43 = 1107296256;
    uint64_t v44 = sub_1004B5480;
    unint64_t v45 = &unk_1015C0328;
    uint64_t v18 = _Block_copy(&aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v41 = _swiftEmptyArrayStorage;
    sub_10041ECCC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_1001BF100((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v19 = v38;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v18);
    swift_release();

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v19);
    (*(void (**)(char *, uint64_t))(v39 + 8))(v10, v40);
  }
  else
  {
    uint64_t v34 = a3;
    double v35 = v10;
    uint64_t v21 = v37;
    uint64_t v20 = v38;
    uint64_t v36 = v5;
    if (qword_101636AD0 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_100010324(v22, (uint64_t)qword_10170DE50);
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    uint64_t v25 = v20;
    uint64_t v26 = v7;
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "No session to start discovery", v27, 2u);
      swift_slowDealloc();
    }

    sub_10000584C();
    (*(void (**)(char *, void, uint64_t))(v12 + 104))(v14, enum case for DispatchQoS.QoSClass.default(_:), v11);
    uint64_t v28 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    uint64_t v29 = swift_allocObject();
    uint64_t v30 = v34;
    *(void *)(v29 + 16) = v21;
    *(void *)(v29 + 24) = v30;
    uint64_t v46 = sub_10041ED88;
    uint64_t v47 = v29;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v43 = 1107296256;
    uint64_t v44 = sub_1004B5480;
    unint64_t v45 = &unk_1015C02D8;
    double v31 = _Block_copy(&aBlock);
    swift_retain();
    uint64_t v32 = v35;
    static DispatchQoS.unspecified.getter();
    uint64_t v41 = _swiftEmptyArrayStorage;
    sub_10041ECCC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_1001BF100((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v31);

    (*(void (**)(char *, uint64_t))(v36 + 8))(v26, v25);
    (*(void (**)(char *, uint64_t))(v39 + 8))(v32, v40);
  }
  return swift_release();
}

uint64_t sub_10041DBCC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (qword_101636AD0 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100010324(v6, (uint64_t)qword_10170DE50);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "UnknownDiscoveryService.stopUnknownDiscovery", v9, 2u);
    swift_slowDealloc();
  }

  uint64_t v10 = *(NSObject **)(v3 + 40);
  uint64_t v11 = (void *)swift_allocObject();
  void v11[2] = v3;
  v11[3] = a1;
  void v11[4] = a2;
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = sub_10041EC58;
  *(void *)(v12 + 24) = v11;
  v16[4] = sub_1003B7AE0;
  uint64_t v16[5] = v12;
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 1107296256;
  void v16[2] = sub_1000A70B0;
  v16[3] = &unk_1015C0170;
  uint64_t v13 = _Block_copy(v16);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v10, v13);
  _Block_release(v13);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

uint64_t sub_10041DDF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v37 = a2;
  uint64_t v38 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v39 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(a1 + 64);
  uint64_t v40 = v8;
  if (v15)
  {
    swift_retain();
    sub_10132825C();
    sub_10000584C();
    (*(void (**)(char *, void, uint64_t))(v12 + 104))(v14, enum case for DispatchQoS.QoSClass.default(_:), v11);
    id v16 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = v37;
    *(void *)(v17 + 24) = a3;
    uint64_t v46 = sub_1003C6214;
    uint64_t v47 = v17;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v43 = 1107296256;
    uint64_t v44 = sub_1004B5480;
    unint64_t v45 = &unk_1015C0210;
    uint64_t v18 = _Block_copy(&aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v41 = _swiftEmptyArrayStorage;
    sub_10041ECCC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_1001BF100((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v19 = v38;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v18);
    swift_release();

    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v19);
    (*(void (**)(char *, uint64_t))(v39 + 8))(v10, v40);
  }
  else
  {
    uint64_t v34 = a3;
    double v35 = v10;
    uint64_t v21 = v37;
    uint64_t v20 = v38;
    uint64_t v36 = v5;
    if (qword_101636AD0 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_100010324(v22, (uint64_t)qword_10170DE50);
    uint64_t v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.error.getter();
    uint64_t v25 = v20;
    uint64_t v26 = v7;
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "No session to stop discovery", v27, 2u);
      swift_slowDealloc();
    }

    sub_10000584C();
    (*(void (**)(char *, void, uint64_t))(v12 + 104))(v14, enum case for DispatchQoS.QoSClass.default(_:), v11);
    uint64_t v28 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    uint64_t v29 = swift_allocObject();
    uint64_t v30 = v34;
    *(void *)(v29 + 16) = v21;
    *(void *)(v29 + 24) = v30;
    uint64_t v46 = sub_10041ED88;
    uint64_t v47 = v29;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v43 = 1107296256;
    uint64_t v44 = sub_1004B5480;
    unint64_t v45 = &unk_1015C01C0;
    double v31 = _Block_copy(&aBlock);
    swift_retain();
    uint64_t v32 = v35;
    static DispatchQoS.unspecified.getter();
    uint64_t v41 = _swiftEmptyArrayStorage;
    sub_10041ECCC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_1001BF100((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v31);

    (*(void (**)(char *, uint64_t))(v36 + 8))(v26, v25);
    (*(void (**)(char *, uint64_t))(v39 + 8))(v32, v40);
  }
  return swift_release();
}

uint64_t sub_10041E430(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  if (qword_101636AD0 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_100010324(v8, (uint64_t)qword_10170DE50);
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "UnknownDiscoveryService.fetchEncryptedPayload", v11, 2u);
    swift_slowDealloc();
  }

  uint64_t v12 = *(NSObject **)(v4 + 40);
  uint64_t v13 = (void *)swift_allocObject();
  v13[2] = v4;
  v13[3] = a2;
  v13[4] = a3;
  v13[5] = a1;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = sub_10041EC30;
  *(void *)(v14 + 24) = v13;
  v19[4] = sub_1003B7AE0;
  v19[5] = v14;
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 1107296256;
  void v19[2] = sub_1000A70B0;
  void v19[3] = &unk_1015C00A8;
  uint64_t v15 = _Block_copy(v19);
  swift_retain();
  swift_retain();
  id v16 = a1;
  swift_retain();
  swift_release();
  dispatch_sync(v12, v15);
  _Block_release(v15);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

uint64_t sub_10041E65C(uint64_t a1, uint64_t (*a2)(uint64_t a1), uint64_t a3, void *a4)
{
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v24 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  os_log_type_t v10 = (char *)&v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v22 = *(void *)(v11 - 8);
  uint64_t v23 = v11;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(void *)(a1 + 64))
  {
    swift_retain();
    sub_101115B4C(a4, a2, a3);
    return swift_release();
  }
  else
  {
    sub_10000584C();
    (*(void (**)(char *, void, uint64_t))(v15 + 104))(v17, enum case for DispatchQoS.QoSClass.default(_:), v14);
    uint64_t v19 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = a2;
    *(void *)(v20 + 24) = a3;
    aBlock[4] = sub_10041EC4C;
    aBlock[5] = v20;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1004B5480;
    aBlock[3] = &unk_1015C00F8;
    uint64_t v21 = _Block_copy(aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    uint64_t v25 = _swiftEmptyArrayStorage;
    sub_10041ECCC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_1001BF100((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v21);

    (*(void (**)(char *, uint64_t))(v24 + 8))(v10, v8);
    (*(void (**)(char *, uint64_t))(v22 + 8))(v13, v23);
    return swift_release();
  }
}

uint64_t sub_10041EA38(void (*a1)(char *))
{
  uint64_t v2 = sub_10000588C(&qword_101649E40);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(v4, 1, 1, v5);
  a1(v4);
  return sub_100020198((uint64_t)v4);
}

void sub_10041EB08()
{
  sub_101120BE0(*(void **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_10041EB10()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10041EB20@<X0>(BOOL *a1@<X8>)
{
  return sub_101116798(v1, a1);
}

uint64_t sub_10041EB40()
{
  return sub_10041CF6C(*(void **)(v0 + 24));
}

uint64_t sub_10041EB68()
{
  return _swift_deallocObject(v0, 32, 7);
}

unint64_t sub_10041EB78()
{
  unint64_t result = qword_1016441D0;
  if (!qword_1016441D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016441D0);
  }
  return result;
}

uint64_t sub_10041EBD0()
{
  return sub_10041CD20(*(void **)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_10041EBD8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10041EBE8()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_10041EC30()
{
  return sub_10041E65C(*(void *)(v0 + 16), *(uint64_t (**)(uint64_t))(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_10041EC3C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10041EC4C()
{
  return sub_10041EA38(*(void (**)(char *))(v0 + 16));
}

uint64_t sub_10041EC58()
{
  return sub_10041DDF0(v0[2], v0[3], v0[4]);
}

uint64_t sub_10041EC64()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10041EC78()
{
  return sub_10041D590(v0[2], v0[3], v0[4]);
}

uint64_t sub_10041EC84()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10041EC94()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10041ECCC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10041ED8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URLComponents();
  uint64_t v5 = **(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8);

  return v5(a1, a2, v4);
}

uint64_t sub_10041EDF8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URLComponents();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t sub_10041EE5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URLComponents();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  return a1;
}

uint64_t sub_10041EEC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URLComponents();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  return a1;
}

uint64_t sub_10041EF24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URLComponents();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  return a1;
}

uint64_t sub_10041EF88(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URLComponents();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  return a1;
}

uint64_t sub_10041EFEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10041F000);
}

uint64_t sub_10041F000(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URLComponents();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_10041F06C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10041F080);
}

uint64_t sub_10041F080(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URLComponents();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for FetchDevicesEndpoint()
{
  uint64_t result = qword_101644230;
  if (!qword_101644230) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10041F13C()
{
  uint64_t result = type metadata accessor for URLComponents();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_10041F1C8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for URLComponents();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

unsigned char *storeEnumTagSinglePayload for LocationSource(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 18 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 18) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xEE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xED)
  {
    unsigned int v6 = ((a2 - 238) >> 8) + 1;
    *uint64_t result = a2 + 18;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10041F2FCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 18;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LocationSource()
{
  return &type metadata for LocationSource;
}

unint64_t sub_10041F334(char a1)
{
  unint64_t result = 0x6E776F6E6B6E752ELL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000017;
      break;
    case 2:
    case 7:
    case 16:
    case 17:
      unint64_t result = 0xD000000000000011;
      break;
    case 3:
      unint64_t result = 0xD00000000000001CLL;
      break;
    case 4:
      unint64_t result = 0xD000000000000014;
      break;
    case 5:
      unint64_t result = 0xD000000000000019;
      break;
    case 6:
      unint64_t result = 0xD000000000000014;
      break;
    case 8:
      unint64_t result = 0xD000000000000015;
      break;
    case 9:
      unint64_t result = 0x627550666C65732ELL;
      break;
    case 10:
      unint64_t result = 0xD000000000000015;
      break;
    case 11:
      unint64_t result = 0x52746E65746E692ELL;
      break;
    case 12:
      unint64_t result = 0xD00000000000001DLL;
      break;
    case 13:
      unint64_t result = 0xD00000000000001ELL;
      break;
    case 14:
      unint64_t result = 0xD000000000000019;
      break;
    case 15:
      unint64_t result = 0xD000000000000014;
      break;
    case 18:
      unint64_t result = 0xD000000000000015;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_10041F568@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10041F764(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10041F594()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_10041F5F4()
{
  return RawRepresentable<>.encode(to:)();
}

void sub_10041F644(void *a1@<X8>)
{
  *a1 = &off_1015A14A0;
}

unint64_t sub_10041F654()
{
  return sub_10041F334(*v0);
}

unint64_t sub_10041F660()
{
  unint64_t result = qword_101644268;
  if (!qword_101644268)
  {
    sub_10000592C(&qword_101644270);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644268);
  }
  return result;
}

unint64_t sub_10041F6C0()
{
  unint64_t result = qword_101644278;
  if (!qword_101644278)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644278);
  }
  return result;
}

BOOL sub_10041F714(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 < *a2;
}

BOOL sub_10041F728(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 >= *a1;
}

BOOL sub_10041F73C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 >= *a2;
}

BOOL sub_10041F750(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a2 < *a1;
}

unint64_t sub_10041F764(unint64_t result)
{
  if (result >= 0x13) {
    return 19;
  }
  return result;
}

unint64_t sub_10041F774()
{
  unint64_t result = qword_101644280;
  if (!qword_101644280)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644280);
  }
  return result;
}

uint64_t destroy for AirPodsSWSendPairingDataCommandPayload(uint64_t *a1)
{
  sub_10001CFB8(*a1, a1[1]);
  sub_10001CFB8(a1[2], a1[3]);
  sub_10001CFB8(a1[4], a1[5]);
  sub_10001CFB8(a1[6], a1[7]);
  sub_10001CFB8(a1[8], a1[9]);
  sub_10001CFB8(a1[10], a1[11]);
  sub_10001CFB8(a1[12], a1[13]);
  sub_10001CFB8(a1[14], a1[15]);
  sub_10001CFB8(a1[16], a1[17]);
  sub_10001CFB8(a1[18], a1[19]);
  sub_10001CFB8(a1[20], a1[21]);
  sub_10001CFB8(a1[22], a1[23]);
  sub_10001CFB8(a1[24], a1[25]);
  sub_10001CFB8(a1[27], a1[28]);
  sub_10001CFB8(a1[29], a1[30]);
  uint64_t v2 = a1[31];
  unint64_t v3 = a1[32];

  return sub_10001CFB8(v2, v3);
}

uint64_t initializeWithCopy for AirPodsSWSendPairingDataCommandPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_1000361E0(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 16);
  unint64_t v7 = *(void *)(a2 + 24);
  sub_1000361E0(v6, v7);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = *(void *)(a2 + 32);
  unint64_t v9 = *(void *)(a2 + 40);
  sub_1000361E0(v8, v9);
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  uint64_t v10 = *(void *)(a2 + 48);
  unint64_t v11 = *(void *)(a2 + 56);
  sub_1000361E0(v10, v11);
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  uint64_t v12 = *(void *)(a2 + 64);
  unint64_t v13 = *(void *)(a2 + 72);
  sub_1000361E0(v12, v13);
  *(void *)(a1 + 64) = v12;
  *(void *)(a1 + 72) = v13;
  uint64_t v14 = *(void *)(a2 + 80);
  unint64_t v15 = *(void *)(a2 + 88);
  sub_1000361E0(v14, v15);
  *(void *)(a1 + 80) = v14;
  *(void *)(a1 + 88) = v15;
  uint64_t v16 = *(void *)(a2 + 96);
  unint64_t v17 = *(void *)(a2 + 104);
  sub_1000361E0(v16, v17);
  *(void *)(a1 + 96) = v16;
  *(void *)(a1 + 104) = v17;
  uint64_t v18 = *(void *)(a2 + 112);
  unint64_t v19 = *(void *)(a2 + 120);
  sub_1000361E0(v18, v19);
  *(void *)(a1 + 112) = v18;
  *(void *)(a1 + 120) = v19;
  uint64_t v20 = *(void *)(a2 + 128);
  unint64_t v21 = *(void *)(a2 + 136);
  sub_1000361E0(v20, v21);
  *(void *)(a1 + 128) = v20;
  *(void *)(a1 + 136) = v21;
  uint64_t v22 = *(void *)(a2 + 144);
  unint64_t v23 = *(void *)(a2 + 152);
  sub_1000361E0(v22, v23);
  *(void *)(a1 + 144) = v22;
  *(void *)(a1 + 152) = v23;
  uint64_t v24 = *(void *)(a2 + 160);
  unint64_t v25 = *(void *)(a2 + 168);
  sub_1000361E0(v24, v25);
  *(void *)(a1 + 160) = v24;
  *(void *)(a1 + 168) = v25;
  uint64_t v26 = *(void *)(a2 + 176);
  unint64_t v27 = *(void *)(a2 + 184);
  sub_1000361E0(v26, v27);
  *(void *)(a1 + 176) = v26;
  *(void *)(a1 + 184) = v27;
  uint64_t v28 = *(void *)(a2 + 192);
  unint64_t v29 = *(void *)(a2 + 200);
  sub_1000361E0(v28, v29);
  *(void *)(a1 + 192) = v28;
  *(void *)(a1 + 200) = v29;
  *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
  uint64_t v30 = *(void *)(a2 + 216);
  unint64_t v31 = *(void *)(a2 + 224);
  sub_1000361E0(v30, v31);
  *(void *)(a1 + 216) = v30;
  *(void *)(a1 + 224) = v31;
  uint64_t v32 = *(void *)(a2 + 232);
  unint64_t v33 = *(void *)(a2 + 240);
  sub_1000361E0(v32, v33);
  *(void *)(a1 + 232) = v32;
  *(void *)(a1 + 240) = v33;
  uint64_t v35 = *(void *)(a2 + 248);
  unint64_t v34 = *(void *)(a2 + 256);
  sub_1000361E0(v35, v34);
  *(void *)(a1 + 248) = v35;
  *(void *)(a1 + 256) = v34;
  return a1;
}

uint64_t assignWithCopy for AirPodsSWSendPairingDataCommandPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_1000361E0(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  sub_10001CFB8(v6, v7);
  uint64_t v8 = *(void *)(a2 + 16);
  unint64_t v9 = *(void *)(a2 + 24);
  sub_1000361E0(v8, v9);
  uint64_t v10 = *(void *)(a1 + 16);
  unint64_t v11 = *(void *)(a1 + 24);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v9;
  sub_10001CFB8(v10, v11);
  uint64_t v12 = *(void *)(a2 + 32);
  unint64_t v13 = *(void *)(a2 + 40);
  sub_1000361E0(v12, v13);
  uint64_t v14 = *(void *)(a1 + 32);
  unint64_t v15 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = v12;
  *(void *)(a1 + 40) = v13;
  sub_10001CFB8(v14, v15);
  uint64_t v16 = *(void *)(a2 + 48);
  unint64_t v17 = *(void *)(a2 + 56);
  sub_1000361E0(v16, v17);
  uint64_t v18 = *(void *)(a1 + 48);
  unint64_t v19 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = v16;
  *(void *)(a1 + 56) = v17;
  sub_10001CFB8(v18, v19);
  uint64_t v20 = *(void *)(a2 + 64);
  unint64_t v21 = *(void *)(a2 + 72);
  sub_1000361E0(v20, v21);
  uint64_t v22 = *(void *)(a1 + 64);
  unint64_t v23 = *(void *)(a1 + 72);
  *(void *)(a1 + 64) = v20;
  *(void *)(a1 + 72) = v21;
  sub_10001CFB8(v22, v23);
  uint64_t v24 = *(void *)(a2 + 80);
  unint64_t v25 = *(void *)(a2 + 88);
  sub_1000361E0(v24, v25);
  uint64_t v26 = *(void *)(a1 + 80);
  unint64_t v27 = *(void *)(a1 + 88);
  *(void *)(a1 + 80) = v24;
  *(void *)(a1 + 88) = v25;
  sub_10001CFB8(v26, v27);
  uint64_t v28 = *(void *)(a2 + 96);
  unint64_t v29 = *(void *)(a2 + 104);
  sub_1000361E0(v28, v29);
  uint64_t v30 = *(void *)(a1 + 96);
  unint64_t v31 = *(void *)(a1 + 104);
  *(void *)(a1 + 96) = v28;
  *(void *)(a1 + 104) = v29;
  sub_10001CFB8(v30, v31);
  uint64_t v32 = *(void *)(a2 + 112);
  unint64_t v33 = *(void *)(a2 + 120);
  sub_1000361E0(v32, v33);
  uint64_t v34 = *(void *)(a1 + 112);
  unint64_t v35 = *(void *)(a1 + 120);
  *(void *)(a1 + 112) = v32;
  *(void *)(a1 + 120) = v33;
  sub_10001CFB8(v34, v35);
  uint64_t v36 = *(void *)(a2 + 128);
  unint64_t v37 = *(void *)(a2 + 136);
  sub_1000361E0(v36, v37);
  uint64_t v38 = *(void *)(a1 + 128);
  unint64_t v39 = *(void *)(a1 + 136);
  *(void *)(a1 + 128) = v36;
  *(void *)(a1 + 136) = v37;
  sub_10001CFB8(v38, v39);
  uint64_t v40 = *(void *)(a2 + 144);
  unint64_t v41 = *(void *)(a2 + 152);
  sub_1000361E0(v40, v41);
  uint64_t v42 = *(void *)(a1 + 144);
  unint64_t v43 = *(void *)(a1 + 152);
  *(void *)(a1 + 144) = v40;
  *(void *)(a1 + 152) = v41;
  sub_10001CFB8(v42, v43);
  uint64_t v44 = *(void *)(a2 + 160);
  unint64_t v45 = *(void *)(a2 + 168);
  sub_1000361E0(v44, v45);
  uint64_t v46 = *(void *)(a1 + 160);
  unint64_t v47 = *(void *)(a1 + 168);
  *(void *)(a1 + 160) = v44;
  *(void *)(a1 + 168) = v45;
  sub_10001CFB8(v46, v47);
  uint64_t v48 = *(void *)(a2 + 176);
  unint64_t v49 = *(void *)(a2 + 184);
  sub_1000361E0(v48, v49);
  uint64_t v50 = *(void *)(a1 + 176);
  unint64_t v51 = *(void *)(a1 + 184);
  *(void *)(a1 + 176) = v48;
  *(void *)(a1 + 184) = v49;
  sub_10001CFB8(v50, v51);
  uint64_t v52 = *(void *)(a2 + 192);
  unint64_t v53 = *(void *)(a2 + 200);
  sub_1000361E0(v52, v53);
  uint64_t v54 = *(void *)(a1 + 192);
  unint64_t v55 = *(void *)(a1 + 200);
  *(void *)(a1 + 192) = v52;
  *(void *)(a1 + 200) = v53;
  sub_10001CFB8(v54, v55);
  *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
  uint64_t v56 = *(void *)(a2 + 216);
  unint64_t v57 = *(void *)(a2 + 224);
  sub_1000361E0(v56, v57);
  uint64_t v58 = *(void *)(a1 + 216);
  unint64_t v59 = *(void *)(a1 + 224);
  *(void *)(a1 + 216) = v56;
  *(void *)(a1 + 224) = v57;
  sub_10001CFB8(v58, v59);
  uint64_t v60 = *(void *)(a2 + 232);
  unint64_t v61 = *(void *)(a2 + 240);
  sub_1000361E0(v60, v61);
  uint64_t v62 = *(void *)(a1 + 232);
  unint64_t v63 = *(void *)(a1 + 240);
  *(void *)(a1 + 232) = v60;
  *(void *)(a1 + 240) = v61;
  sub_10001CFB8(v62, v63);
  uint64_t v65 = *(void *)(a2 + 248);
  unint64_t v64 = *(void *)(a2 + 256);
  sub_1000361E0(v65, v64);
  uint64_t v66 = *(void *)(a1 + 248);
  unint64_t v67 = *(void *)(a1 + 256);
  *(void *)(a1 + 248) = v65;
  *(void *)(a1 + 256) = v64;
  sub_10001CFB8(v66, v67);
  return a1;
}

uint64_t assignWithTake for AirPodsSWSendPairingDataCommandPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001CFB8(v4, v5);
  uint64_t v6 = *(void *)(a1 + 16);
  unint64_t v7 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_10001CFB8(v6, v7);
  uint64_t v8 = *(void *)(a1 + 32);
  unint64_t v9 = *(void *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  sub_10001CFB8(v8, v9);
  uint64_t v10 = *(void *)(a1 + 48);
  unint64_t v11 = *(void *)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  sub_10001CFB8(v10, v11);
  uint64_t v12 = *(void *)(a1 + 64);
  unint64_t v13 = *(void *)(a1 + 72);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  sub_10001CFB8(v12, v13);
  uint64_t v14 = *(void *)(a1 + 80);
  unint64_t v15 = *(void *)(a1 + 88);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  sub_10001CFB8(v14, v15);
  uint64_t v16 = *(void *)(a1 + 96);
  unint64_t v17 = *(void *)(a1 + 104);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  sub_10001CFB8(v16, v17);
  uint64_t v18 = *(void *)(a1 + 112);
  unint64_t v19 = *(void *)(a1 + 120);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  sub_10001CFB8(v18, v19);
  uint64_t v20 = *(void *)(a1 + 128);
  unint64_t v21 = *(void *)(a1 + 136);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  sub_10001CFB8(v20, v21);
  uint64_t v22 = *(void *)(a1 + 144);
  unint64_t v23 = *(void *)(a1 + 152);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  sub_10001CFB8(v22, v23);
  uint64_t v24 = *(void *)(a1 + 160);
  unint64_t v25 = *(void *)(a1 + 168);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  sub_10001CFB8(v24, v25);
  uint64_t v26 = *(void *)(a1 + 176);
  unint64_t v27 = *(void *)(a1 + 184);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  sub_10001CFB8(v26, v27);
  uint64_t v28 = *(void *)(a1 + 192);
  unint64_t v29 = *(void *)(a1 + 200);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  sub_10001CFB8(v28, v29);
  *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
  uint64_t v30 = *(void *)(a1 + 216);
  unint64_t v31 = *(void *)(a1 + 224);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  sub_10001CFB8(v30, v31);
  uint64_t v32 = *(void *)(a1 + 232);
  unint64_t v33 = *(void *)(a1 + 240);
  *(_OWORD *)(a1 + 232) = *(_OWORD *)(a2 + 232);
  sub_10001CFB8(v32, v33);
  uint64_t v34 = *(void *)(a1 + 248);
  unint64_t v35 = *(void *)(a1 + 256);
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  sub_10001CFB8(v34, v35);
  return a1;
}

uint64_t getEnumTagSinglePayload for AirPodsSWSendPairingDataCommandPayload(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 264)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AirPodsSWSendPairingDataCommandPayload(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 248) = 0u;
    *(void *)unint64_t result = a2 - 13;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 264) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 264) = 0;
    }
    if (a2)
    {
      *(void *)unint64_t result = 0;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AirPodsSWSendPairingDataCommandPayload()
{
  return &type metadata for AirPodsSWSendPairingDataCommandPayload;
}

uint64_t sub_10041FE10(void *a1)
{
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryEncoding.container()();
  sub_1000BD078((uint64_t)v6, v7);
  sub_100135A44();
  dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
  if (!v1)
  {
    sub_1000BD078((uint64_t)v6, v7);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1000BD078((uint64_t)v6, v7);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1000BD078((uint64_t)v6, v7);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1000BD078((uint64_t)v6, v7);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1000BD078((uint64_t)v6, v7);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1000BD078((uint64_t)v6, v7);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1000BD078((uint64_t)v6, v7);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1000BD078((uint64_t)v6, v7);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1000BD078((uint64_t)v6, v7);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1000BD078((uint64_t)v6, v7);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1000BD078((uint64_t)v6, v7);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1000BD078((uint64_t)v6, v7);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_10006145C();
    uint64_t v2 = FixedWidthInteger.data.getter();
    unint64_t v4 = v3;
    sub_1000BD078((uint64_t)v6, v7);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_10001CFB8(v2, v4);
    sub_1000BD078((uint64_t)v6, v7);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1000BD078((uint64_t)v6, v7);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1000BD078((uint64_t)v6, v7);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v6);
}

void *sub_100420338@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  unint64_t result = sub_100420604(a1, __src);
  if (!v2) {
    return memcpy(a2, __src, 0x108uLL);
  }
  return result;
}

uint64_t sub_10042038C(void *a1)
{
  return sub_10041FE10(a1);
}

unint64_t sub_1004203A4(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1004203D4();
  unint64_t result = sub_10033BFC4();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1004203D4()
{
  unint64_t result = qword_101644288;
  if (!qword_101644288)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644288);
  }
  return result;
}

uint64_t sub_100420428@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v34) = HIDWORD(result) - result;
      if (__OFSUB__(HIDWORD(result), result))
      {
        __break(1u);
LABEL_15:
        __break(1u);
LABEL_16:
        __break(1u);
LABEL_17:
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
        JUMPOUT(0x1004205E4);
      }
      uint64_t v34 = (int)v34;
LABEL_6:
      if (v34 != 32) {
        goto LABEL_18;
      }
      switch(a6 >> 62)
      {
        case 1uLL:
          LODWORD(v38) = HIDWORD(a5) - a5;
          if (__OFSUB__(HIDWORD(a5), a5)) {
            goto LABEL_16;
          }
          uint64_t v38 = (int)v38;
LABEL_12:
          if (v38 != 1) {
            goto LABEL_19;
          }
          *(void *)a9 = result;
          *(void *)(a9 + 8) = a2;
          *(void *)(a9 + 16) = a5;
          *(void *)(a9 + 24) = a6;
          *(void *)(a9 + 32) = a3;
          *(void *)(a9 + 40) = a4;
          *(void *)(a9 + 48) = a7;
          *(void *)(a9 + 56) = a8;
          *(void *)(a9 + 64) = a10;
          *(void *)(a9 + 72) = a11;
          *(void *)(a9 + 80) = a12;
          *(void *)(a9 + 88) = a13;
          *(void *)(a9 + 96) = a14;
          *(void *)(a9 + 104) = a15;
          *(void *)(a9 + 112) = a16;
          *(void *)(a9 + 120) = a17;
          *(void *)(a9 + 128) = a18;
          *(void *)(a9 + 136) = a19;
          *(void *)(a9 + 144) = a20;
          *(void *)(a9 + 152) = a21;
          *(void *)(a9 + 160) = a22;
          *(void *)(a9 + 168) = a23;
          *(void *)(a9 + 176) = a24;
          *(void *)(a9 + 184) = a25;
          *(void *)(a9 + 192) = a26;
          *(void *)(a9 + 200) = a27;
          *(unsigned char *)(a9 + 208) = a28;
          *(void *)(a9 + 216) = a29;
          *(void *)(a9 + 224) = a30;
          *(void *)(a9 + 232) = a31;
          *(void *)(a9 + 240) = a32;
          *(void *)(a9 + 248) = a33;
          *(void *)(a9 + 256) = a34;
          return result;
        case 2uLL:
          uint64_t v40 = *(void *)(a5 + 16);
          uint64_t v39 = *(void *)(a5 + 24);
          BOOL v37 = __OFSUB__(v39, v40);
          uint64_t v38 = v39 - v40;
          if (!v37) {
            goto LABEL_12;
          }
          goto LABEL_17;
        case 3uLL:
          goto LABEL_19;
        default:
          uint64_t v38 = BYTE6(a6);
          goto LABEL_12;
      }
    case 2uLL:
      uint64_t v36 = *(void *)(result + 16);
      uint64_t v35 = *(void *)(result + 24);
      BOOL v37 = __OFSUB__(v35, v36);
      uint64_t v34 = v35 - v36;
      if (!v37) {
        goto LABEL_6;
      }
      goto LABEL_15;
    case 3uLL:
      goto LABEL_18;
    default:
      uint64_t v34 = BYTE6(a2);
      goto LABEL_6;
  }
}

void *sub_100420604@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = type metadata accessor for Endianness();
  __chkstk_darwin(v5 - 8);
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryDecoding.container()();
  sub_1000BD078((uint64_t)v129, v130);
  uint64_t v6 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  if (v2) {
    goto LABEL_4;
  }
  unint64_t v8 = v7;
  uint64_t v126 = v6;
  sub_1000BD078((uint64_t)v129, v130);
  uint64_t v124 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  unint64_t v125 = v9;
  sub_1000BD078((uint64_t)v129, v130);
  uint64_t v10 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  unint64_t v15 = v11;
  uint64_t v123 = v10;
  uint64_t v127 = v10;
  unint64_t v128 = v11;
  sub_1000362FC();
  if (DataProtocol.intValue.getter() < 1)
  {
    if (qword_101637320 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100010324(v24, (uint64_t)qword_10170F098);
    sub_1000361E0(v123, v15);
    unint64_t v25 = Logger.logObject.getter();
    os_log_type_t v26 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v26))
    {
      unint64_t v122 = v15;
      unint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)unint64_t v27 = 134217984;
      unint64_t v128 = v122;
      uint64_t v127 = DataProtocol.intValue.getter();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      sub_10001CFB8(v123, v122);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Invalid number of beacons: %ld", v27, 0xCu);
      unint64_t v15 = v122;
      swift_slowDealloc();
    }
    else
    {
      sub_10001CFB8(v123, v15);
    }

    uint64_t v28 = type metadata accessor for BinaryEncodingError();
    sub_10017986C();
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v28 - 8) + 104))(v29, enum case for BinaryEncodingError.encodingError(_:), v28);
    swift_willThrow();
    sub_10001CFB8(v123, v15);
    sub_10001CFB8(v124, v125);
    uint64_t v12 = v126;
    unint64_t v13 = v8;
    goto LABEL_3;
  }
  unint64_t v120 = v8;
  unint64_t v121 = v15;
  sub_1000BD078((uint64_t)v129, v130);
  uint64_t v16 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  unint64_t v18 = v17;
  uint64_t v127 = v123;
  unint64_t v128 = v121;
  unint64_t v19 = &v127;
  uint64_t v20 = DataProtocol.intValue.getter();
  uint64_t v21 = v20 - 1;
  if (__OFSUB__(v20, 1))
  {
    __break(1u);
    goto LABEL_34;
  }
  if ((unsigned __int128)(v21 * (__int128)20) >> 64 != (20 * v21) >> 63)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (20 * v21 < 0)
  {
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }
  uint64_t v22 = Data.subdata(in:)();
  unint64_t v118 = v18;
  unint64_t v119 = v23;
  uint64_t v117 = v16;
  sub_1000BD078((uint64_t)v129, v130);
  uint64_t v114 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  unint64_t v115 = v30;
  uint64_t v116 = v22;
  sub_1000BD078((uint64_t)v129, v130);
  uint64_t v112 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  unint64_t v113 = v31;
  sub_1000BD078((uint64_t)v129, v130);
  uint64_t v110 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  unint64_t v111 = v32;
  sub_1000BD078((uint64_t)v129, v130);
  uint64_t v33 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  uint64_t v35 = v33;
  unint64_t v36 = v34;
  sub_1000361E0(v33, v34);
  static Endianness.current.getter();
  sub_100179818();
  FixedWidthInteger.init(data:ofEndianness:)();
  if (BYTE2(v127) == 1)
  {
    if (qword_101637320 != -1) {
      swift_once();
    }
    uint64_t v37 = type metadata accessor for Logger();
    sub_100010324(v37, (uint64_t)qword_10170F098);
    sub_1000361E0(v35, v36);
    sub_1000361E0(v35, v36);
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc();
      uint64_t v127 = swift_slowAlloc();
      *(_DWORD *)uint64_t v40 = 136315138;
      uint64_t v41 = Data.hexString.getter();
      uint64_t v132 = sub_1008FA0F0(v41, v42, &v127);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10001CFB8(v35, v36);
      sub_10001CFB8(v35, v36);
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Invalid certs length: %s", v40, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10001CFB8(v35, v36);
      sub_10001CFB8(v35, v36);
    }

    uint64_t v51 = type metadata accessor for BinaryEncodingError();
    sub_10017986C();
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v51 - 8) + 104))(v52, enum case for BinaryEncodingError.encodingError(_:), v51);
    swift_willThrow();
    uint64_t v53 = v35;
    unint64_t v54 = v36;
    goto LABEL_51;
  }
  uint64_t v108 = v35;
  unint64_t v109 = v36;
  uint64_t v43 = (unsigned __int16)v127;
  sub_1000361E0(v110, v111);
  sub_100435A9C(v43, v110, v111, &v127);
  uint64_t v106 = v127;
  unint64_t v107 = v128;
  sub_1000BD078((uint64_t)v129, v130);
  uint64_t v104 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  unint64_t v105 = v44;
  sub_1000BD078((uint64_t)v129, v130);
  uint64_t v102 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  unint64_t v103 = v45;
  sub_1000361E0(v102, v45);
  static Endianness.current.getter();
  FixedWidthInteger.init(data:ofEndianness:)();
  if (BYTE2(v127) == 1)
  {
    if (qword_101637320 != -1) {
      swift_once();
    }
    uint64_t v46 = type metadata accessor for Logger();
    sub_100010324(v46, (uint64_t)qword_10170F098);
    sub_1000361E0(v102, v103);
    sub_1000361E0(v102, v103);
    unint64_t v19 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v47))
    {
      uint64_t v48 = (uint8_t *)swift_slowAlloc();
      uint64_t v127 = swift_slowAlloc();
      *(_DWORD *)uint64_t v48 = 136315138;
      uint64_t v49 = Data.hexString.getter();
      uint64_t v132 = sub_1008FA0F0(v49, v50, &v127);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10001CFB8(v102, v103);
      sub_10001CFB8(v102, v103);
      _os_log_impl((void *)&_mh_execute_header, v19, v47, "Invalid CSR length: %s", v48, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
LABEL_37:

      uint64_t v64 = type metadata accessor for BinaryEncodingError();
      sub_10017986C();
      swift_allocError();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v64 - 8) + 104))(v65, enum case for BinaryEncodingError.encodingError(_:), v64);
      swift_willThrow();
LABEL_50:
      sub_10001CFB8(v102, v103);
      sub_10001CFB8(v104, v105);
      sub_10001CFB8(v106, v107);
      uint64_t v53 = v108;
      unint64_t v54 = v109;
LABEL_51:
      sub_10001CFB8(v53, v54);
      sub_10001CFB8(v110, v111);
      sub_10001CFB8(v112, v113);
      sub_10001CFB8(v114, v115);
      sub_10001CFB8(v116, v119);
      sub_10001CFB8(v117, v118);
      sub_10001CFB8(v123, v121);
      sub_10001CFB8(v124, v125);
      uint64_t v12 = v126;
      unint64_t v13 = v120;
LABEL_3:
      sub_10001CFB8(v12, v13);
LABEL_4:
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v129);
      return (void *)_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
    }
LABEL_36:
    sub_10001CFB8(v102, v103);
    sub_10001CFB8(v102, v103);
    goto LABEL_37;
  }
  uint64_t v55 = (unsigned __int16)v127;
  sub_1000361E0(v104, v105);
  sub_100435A9C(v55, v104, v105, &v127);
  uint64_t v100 = v127;
  unint64_t v101 = v128;
  sub_1000BD078((uint64_t)v129, v130);
  uint64_t v98 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  unint64_t v99 = v56;
  sub_1000BD078((uint64_t)v129, v130);
  uint64_t v96 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  unint64_t v97 = v57;
  sub_1000361E0(v96, v57);
  static Endianness.current.getter();
  sub_10006145C();
  FixedWidthInteger.init(data:ofEndianness:)();
  if (BYTE1(v127) == 1)
  {
    if (qword_101637320 != -1) {
      swift_once();
    }
    uint64_t v58 = type metadata accessor for Logger();
    sub_100010324(v58, (uint64_t)qword_10170F098);
    sub_1000361E0(v96, v97);
    sub_1000361E0(v96, v97);
    unint64_t v59 = Logger.logObject.getter();
    os_log_type_t v60 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v59, v60))
    {
      unint64_t v61 = (uint8_t *)swift_slowAlloc();
      uint64_t v127 = swift_slowAlloc();
      *(_DWORD *)unint64_t v61 = 136315138;
      uint64_t v62 = Data.hexString.getter();
      uint64_t v132 = sub_1008FA0F0(v62, v63, &v127);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10001CFB8(v96, v97);
      sub_10001CFB8(v96, v97);
      _os_log_impl((void *)&_mh_execute_header, v59, v60, "Invalid signature length: %s", v61, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10001CFB8(v96, v97);
      sub_10001CFB8(v96, v97);
    }

    uint64_t v74 = type metadata accessor for BinaryEncodingError();
    sub_10017986C();
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v74 - 8) + 104))(v75, enum case for BinaryEncodingError.encodingError(_:), v74);
    swift_willThrow();
LABEL_49:
    sub_10001CFB8(v96, v97);
    sub_10001CFB8(v98, v99);
    sub_10001CFB8(v100, v101);
    goto LABEL_50;
  }
  uint64_t v66 = v127;
  sub_1000361E0(v98, v99);
  sub_100435A9C(v66, v98, v99, &v127);
  uint64_t v94 = v127;
  unint64_t v95 = v128;
  sub_1000BD078((uint64_t)v129, v130);
  uint64_t v92 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  unint64_t v93 = v67;
  sub_1000BD078((uint64_t)v129, v130);
  uint64_t v90 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  unint64_t v91 = v68;
  sub_1000361E0(v90, v68);
  static Endianness.current.getter();
  FixedWidthInteger.init(data:ofEndianness:)();
  if ((v127 & 0x100) != 0 || (char v69 = v127, v127 > 3u))
  {
    if (qword_101637320 != -1) {
      swift_once();
    }
    uint64_t v76 = type metadata accessor for Logger();
    sub_100010324(v76, (uint64_t)qword_10170F098);
    sub_1000361E0(v90, v91);
    sub_1000361E0(v90, v91);
    uint64_t v77 = Logger.logObject.getter();
    os_log_type_t v78 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v77, v78))
    {
      int v79 = (uint8_t *)swift_slowAlloc();
      uint64_t v127 = swift_slowAlloc();
      *(_DWORD *)int v79 = 136315138;
      uint64_t v80 = Data.hexString.getter();
      uint64_t v132 = sub_1008FA0F0(v80, v81, &v127);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10001CFB8(v90, v91);
      sub_10001CFB8(v90, v91);
      _os_log_impl((void *)&_mh_execute_header, v77, v78, "Invalid beaconPartId: %s", v79, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10001CFB8(v90, v91);
      sub_10001CFB8(v90, v91);
    }

    uint64_t v82 = type metadata accessor for BinaryEncodingError();
    sub_10017986C();
    swift_allocError();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v82 - 8) + 104))(v83, enum case for BinaryEncodingError.encodingError(_:), v82);
    swift_willThrow();
    sub_10001CFB8(v90, v91);
    sub_10001CFB8(v92, v93);
    sub_10001CFB8(v94, v95);
    goto LABEL_49;
  }
  sub_1000BD078((uint64_t)v129, v130);
  uint64_t v89 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  uint64_t v71 = v70;
  sub_1000BD078((uint64_t)v129, v130);
  uint64_t v72 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  uint64_t v87 = v73;
  uint64_t v88 = v72;
  sub_1000BD078((uint64_t)v129, v130);
  uint64_t v84 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  uint64_t v86 = v85;
  sub_10001CFB8(v117, v118);
  sub_10001CFB8(v90, v91);
  sub_10001CFB8(v98, v99);
  sub_10001CFB8(v104, v105);
  sub_10001CFB8(v110, v111);
  sub_100420428(v126, v120, v124, v125, v123, v121, v116, v119, (uint64_t)v131, v114, v115, v112, v113, v106, v107, v108, v36, v100, v101,
    v102,
    v103,
    v94,
    v95,
    v96,
    v97,
    v92,
    v93,
    v69,
    v89,
    v71,
    v88,
    v87,
    v84,
    v86);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v129);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  return memcpy(a2, v131, 0x108uLL);
}

uint64_t sub_1004218D8(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v27 = a1 + 64;
  uint64_t v2 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  int64_t v41 = (unint64_t)(v2 + 63) >> 6;
  uint64_t v5 = (char *)v39 + 8;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v7 = 0;
  unint64_t v8 = _swiftEmptyArrayStorage;
  uint64_t v26 = result;
  if (v4) {
    goto LABEL_36;
  }
LABEL_6:
  int64_t v9 = v7 + 1;
  if (!__OFADD__(v7, 1))
  {
    if (v9 < v41)
    {
      unint64_t v10 = *(void *)(v27 + 8 * v9);
      ++v7;
      if (v10) {
        goto LABEL_21;
      }
      int64_t v7 = v9 + 1;
      if (v9 + 1 >= v41) {
        goto LABEL_37;
      }
      unint64_t v10 = *(void *)(v27 + 8 * v7);
      if (v10) {
        goto LABEL_21;
      }
      int64_t v7 = v9 + 2;
      if (v9 + 2 >= v41) {
        goto LABEL_37;
      }
      unint64_t v10 = *(void *)(v27 + 8 * v7);
      if (v10) {
        goto LABEL_21;
      }
      int64_t v7 = v9 + 3;
      if (v9 + 3 >= v41) {
        goto LABEL_37;
      }
      unint64_t v10 = *(void *)(v27 + 8 * v7);
      if (v10)
      {
LABEL_21:
        unint64_t v4 = (v10 - 1) & v10;
        for (unint64_t i = __clz(__rbit64(v10)) + (v7 << 6); ; unint64_t i = v25 | (v7 << 6))
        {
          sub_100173F4C(*(void *)(v1 + 48) + 40 * i, (uint64_t)v38);
          sub_10012F428(*(void *)(v1 + 56) + 32 * i, (uint64_t)v5);
          v36[0] = v39[0];
          v36[1] = v39[1];
          uint64_t v37 = v40;
          v35[0] = v38[0];
          v35[1] = v38[1];
          sub_100173F4C((uint64_t)v35, (uint64_t)&v28);
          if (swift_dynamicCast())
          {
            long long v32 = v31;
            sub_10012F428((uint64_t)v36 + 8, (uint64_t)&v28);
            sub_10000588C(&qword_101651CF0);
            swift_dynamicCast();
          }
          else
          {
            unint64_t v13 = v5;
            if (qword_1016373D8 != -1) {
              swift_once();
            }
            uint64_t v14 = type metadata accessor for Logger();
            sub_100010324(v14, (uint64_t)qword_10170F168);
            sub_100173F4C((uint64_t)v35, (uint64_t)&v28);
            unint64_t v15 = Logger.logObject.getter();
            os_log_type_t v16 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v15, v16))
            {
              uint64_t v17 = swift_slowAlloc();
              *(void *)&long long v31 = swift_slowAlloc();
              *(_DWORD *)uint64_t v17 = 136446210;
              uint64_t v18 = AnyHashable.description.getter();
              *(void *)(v17 + 4) = sub_1008FA0F0(v18, v19, (uint64_t *)&v31);
              swift_bridgeObjectRelease();
              sub_1004268DC((uint64_t)&v28);
              _os_log_impl((void *)&_mh_execute_header, v15, v16, "Dropping non-String metadata key: %{public}s", (uint8_t *)v17, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {
              sub_1004268DC((uint64_t)&v28);
            }

            long long v32 = 0u;
            long long v33 = 0u;
            long long v34 = 0u;
            uint64_t v5 = v13;
            uint64_t v1 = v26;
          }
          sub_10001DAB4((uint64_t)v35, (uint64_t *)&unk_101651D10);
          if (*((void *)&v32 + 1))
          {
            long long v28 = v32;
            long long v29 = v33;
            long long v30 = v34;
            uint64_t result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              uint64_t result = (uint64_t)sub_100A705C4(0, v8[2] + 1, 1, v8);
              unint64_t v8 = (void *)result;
            }
            unint64_t v21 = v8[2];
            unint64_t v20 = v8[3];
            if (v21 >= v20 >> 1)
            {
              uint64_t result = (uint64_t)sub_100A705C4((void *)(v20 > 1), v21 + 1, 1, v8);
              unint64_t v8 = (void *)result;
            }
            void v8[2] = v21 + 1;
            uint64_t v22 = &v8[6 * v21];
            long long v23 = v28;
            long long v24 = v30;
            v22[3] = v29;
            v22[4] = v24;
            void v22[2] = v23;
            if (!v4) {
              goto LABEL_6;
            }
          }
          else
          {
            uint64_t result = sub_10001DAB4((uint64_t)&v32, (uint64_t *)&unk_101644350);
            if (!v4) {
              goto LABEL_6;
            }
          }
LABEL_36:
          unint64_t v25 = __clz(__rbit64(v4));
          v4 &= v4 - 1;
        }
      }
      int64_t v11 = v9 + 4;
      if (v11 < v41)
      {
        unint64_t v10 = *(void *)(v27 + 8 * v11);
        if (v10)
        {
          int64_t v7 = v11;
          goto LABEL_21;
        }
        while (1)
        {
          int64_t v7 = v11 + 1;
          if (__OFADD__(v11, 1)) {
            goto LABEL_39;
          }
          if (v7 >= v41) {
            break;
          }
          unint64_t v10 = *(void *)(v27 + 8 * v7);
          ++v11;
          if (v10) {
            goto LABEL_21;
          }
        }
      }
    }
LABEL_37:
    swift_release();
    return (uint64_t)v8;
  }
  __break(1u);
LABEL_39:
  __break(1u);
  return result;
}

void sub_100421D68(char *a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v97 = a3;
  unint64_t v98 = a4;
  unint64_t v99 = a1;
  uint64_t v11 = sub_10000588C((uint64_t *)&unk_101644330);
  __chkstk_darwin(v11 - 8);
  unint64_t v13 = (char *)&v89 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for MessagingMessageContext();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v89 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = &v7[OBJC_IVAR____TtC12searchpartyd34MessagingServiceDelegateTrampoline_delegate];
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong)
  {
    if (qword_1016373D8 != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    sub_100010324(v30, (uint64_t)qword_10170F168);
    unint64_t v99 = v7;
    long long v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      long long v33 = (uint8_t *)swift_slowAlloc();
      long long v34 = (void *)swift_slowAlloc();
      *(_DWORD *)long long v33 = 138412290;
      unint64_t v100 = (unint64_t)v99;
      uint64_t v35 = v99;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v34 = v99;

      _os_log_impl((void *)&_mh_execute_header, v31, v32, "MessagingServiceDelegateTrampoline: No delegate for %@", v33, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return;
    }

    goto LABEL_49;
  }
  if (v99)
  {
    if (a2)
    {
      if (v98 >> 60 == 15)
      {
        uint64_t v20 = qword_1016373D8;
        unint64_t v21 = v99;
        unint64_t v99 = a2;
        if (v20 != -1) {
          swift_once();
        }
        uint64_t v22 = type metadata accessor for Logger();
        sub_100010324(v22, (uint64_t)qword_10170F168);
        long long v23 = v7;
        long long v24 = Logger.logObject.getter();
        os_log_type_t v25 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v24, v25))
        {
          uint64_t v26 = swift_slowAlloc();
          unint64_t v98 = (unint64_t)v21;
          uint64_t v27 = (uint8_t *)v26;
          long long v28 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v27 = 138412290;
          unint64_t v100 = (unint64_t)v23;
          long long v29 = v23;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *long long v28 = v23;

          _os_log_impl((void *)&_mh_execute_header, v24, v25, "MessagingServiceDelegateTrampoline: No data for %@", v27, 0xCu);
          sub_10000588C((uint64_t *)&unk_101638EA0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          swift_unknownObjectRelease();
          return;
        }

        swift_unknownObjectRelease();
        goto LABEL_49;
      }
      uint64_t v96 = Strong;
      if (a6)
      {
        uint64_t v93 = *((void *)v18 + 1);
        unint64_t v95 = v99;
        id v51 = a2;
        sub_100037A38(v97, v98);
        swift_bridgeObjectRetain();
        uint64_t v52 = (char *)_s12searchpartyd20MessagingDestinationV20stringRepresentationACSgSS_tcfC_0();
        if (v54)
        {
          uint64_t v55 = v54;
          id v94 = v51;
          if (a7)
          {
            uint64_t v92 = v53;
            unint64_t v99 = v52;
            uint64_t v56 = qword_1016373E8;
            id v57 = a7;
            uint64_t v58 = v57;
            if (v56 != -1) {
              id v57 = (id)swift_once();
            }
            __chkstk_darwin(v57);
            sub_10000588C(&qword_101644320);
            OSAllocatedUnfairLock.callAsFunction<A>(_:)();
            if (v101) {
              unint64_t v59 = v100;
            }
            else {
              unint64_t v59 = 0xD000000000000011;
            }
            if (v101) {
              unint64_t v60 = v101;
            }
            else {
              unint64_t v60 = 0x80000001013FC5D0;
            }
            id v61 = v58;
            sub_100F87B00(v61, (uint64_t)v13);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
            {

              sub_100037A24(v97, v98);
              swift_unknownObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();

              sub_10001DAB4((uint64_t)v13, (uint64_t *)&unk_101644330);
            }
            else
            {
              unint64_t v90 = v59;
              unint64_t v91 = v60;
              sub_10042681C((uint64_t)v13, (uint64_t)v17);
              id v79 = v94;
              id v80 = [v79 uniqueID];
              if (v80)
              {
                unint64_t v81 = v80;
                uint64_t ObjectType = swift_getObjectType();
                uint64_t v83 = static String._unconditionallyBridgeFromObjectiveC(_:)();
                uint64_t v85 = v84;

                uint64_t v88 = ObjectType;
                uint64_t v87 = v97;
                unint64_t v86 = v98;
                (*(void (**)(unint64_t, unint64_t, uint64_t, uint64_t, uint64_t, unint64_t, char *, uint64_t, uint64_t, char *, uint64_t, uint64_t))(v93 + 24))(v90, v91, v83, v85, v97, v98, v99, v92, v55, v17, v88, v93);
                sub_100037A24(v87, v86);
                swift_bridgeObjectRelease();

                swift_unknownObjectRelease();
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();

                sub_100426880((uint64_t)v17);
              }
              else
              {
                __break(1u);
              }
            }
            return;
          }
          swift_bridgeObjectRelease();
          if (qword_1016373D8 != -1) {
            swift_once();
          }
          uint64_t v72 = type metadata accessor for Logger();
          sub_100010324(v72, (uint64_t)qword_10170F168);
          uint64_t v73 = v7;
          uint64_t v74 = Logger.logObject.getter();
          os_log_type_t v75 = static os_log_type_t.error.getter();
          if (!os_log_type_enabled(v74, v75))
          {

            sub_100037A24(v97, v98);
            swift_unknownObjectRelease();
            uint64_t v71 = v95;
LABEL_50:
            goto LABEL_46;
          }
          uint64_t v76 = (uint8_t *)swift_slowAlloc();
          uint64_t v77 = (void *)swift_slowAlloc();
          *(_DWORD *)uint64_t v76 = 138412290;
          unint64_t v100 = (unint64_t)v73;
          os_log_type_t v78 = v73;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *uint64_t v77 = v73;

          _os_log_impl((void *)&_mh_execute_header, v74, v75, "MessagingServiceDelegateTrampoline: No context for %@", v76, 0xCu);
          sub_10000588C((uint64_t *)&unk_101638EA0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
          sub_100037A24(v97, v98);

          swift_unknownObjectRelease();
          uint64_t v71 = v95;
LABEL_46:

          return;
        }
      }
      else
      {
        uint64_t v62 = v99;
        id v63 = a2;
        sub_100037A38(v97, v98);
      }
      if (qword_1016373D8 != -1) {
        swift_once();
      }
      uint64_t v64 = type metadata accessor for Logger();
      sub_100010324(v64, (uint64_t)qword_10170F168);
      uint64_t v65 = v7;
      uint64_t v66 = Logger.logObject.getter();
      os_log_type_t v67 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v66, v67))
      {
        unint64_t v68 = (uint8_t *)swift_slowAlloc();
        char v69 = (void *)swift_slowAlloc();
        *(_DWORD *)unint64_t v68 = 138412290;
        unint64_t v100 = (unint64_t)v65;
        uint64_t v70 = v65;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *char v69 = v65;

        _os_log_impl((void *)&_mh_execute_header, v66, v67, "MessagingServiceDelegateTrampoline: No fromID for %@", v68, 0xCu);
        sub_10000588C((uint64_t *)&unk_101638EA0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        sub_100037A24(v97, v98);

        swift_unknownObjectRelease();
        goto LABEL_45;
      }

      sub_100037A24(v97, v98);
    }
    else
    {
      uint64_t v43 = qword_1016373D8;
      unint64_t v99 = v99;
      if (v43 != -1) {
        swift_once();
      }
      uint64_t v44 = type metadata accessor for Logger();
      sub_100010324(v44, (uint64_t)qword_10170F168);
      unint64_t v45 = v7;
      uint64_t v46 = Logger.logObject.getter();
      os_log_type_t v47 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v46, v47))
      {
        uint64_t v48 = (uint8_t *)swift_slowAlloc();
        uint64_t v49 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v48 = 138412290;
        unint64_t v100 = (unint64_t)v45;
        unint64_t v50 = v45;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        void *v49 = v45;

        _os_log_impl((void *)&_mh_execute_header, v46, v47, "MessagingServiceDelegateTrampoline: No account for %@", v48, 0xCu);
        sub_10000588C((uint64_t *)&unk_101638EA0);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
        swift_unknownObjectRelease();

LABEL_45:
        uint64_t v71 = v99;
        goto LABEL_46;
      }
    }
    swift_unknownObjectRelease();
LABEL_49:
    uint64_t v71 = v99;
    goto LABEL_50;
  }
  if (qword_1016373D8 != -1) {
    swift_once();
  }
  uint64_t v36 = type metadata accessor for Logger();
  sub_100010324(v36, (uint64_t)qword_10170F168);
  uint64_t v37 = v7;
  uint64_t v38 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v38, v39))
  {
    uint64_t v40 = (uint8_t *)swift_slowAlloc();
    int64_t v41 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v40 = 138412290;
    unint64_t v100 = (unint64_t)v37;
    unint64_t v42 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *int64_t v41 = v37;

    _os_log_impl((void *)&_mh_execute_header, v38, v39, "MessagingServiceDelegateTrampoline: No service for %@", v40, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_unknownObjectRelease();
  }
  else
  {

    swift_unknownObjectRelease();
  }
}

void sub_100422BFC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v100 = a5;
  uint64_t v102 = a1;
  uint64_t v13 = sub_10000588C((uint64_t *)&unk_101644330);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v97 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for MessagingMessageContext();
  unint64_t v103 = *(unsigned int (***)(char *, uint64_t, uint64_t))(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v101 = (uint64_t)&v97 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_10000588C(&qword_101649E40);
  __chkstk_darwin(v18 - 8);
  uint64_t v20 = (char *)&v97 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for URL();
  uint64_t v22 = *(char **)(v21 - 8);
  uint64_t v106 = v21;
  unint64_t v107 = v22;
  __chkstk_darwin(v21);
  unint64_t v105 = (char *)&v97 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v24 = &v7[OBJC_IVAR____TtC12searchpartyd34MessagingServiceDelegateTrampoline_delegate];
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong)
  {
    if (qword_1016373D8 != -1) {
      swift_once();
    }
    uint64_t v36 = type metadata accessor for Logger();
    sub_100010324(v36, (uint64_t)qword_10170F168);
    unint64_t v107 = v7;
    long long v28 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v37))
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      os_log_type_t v39 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v38 = 138412290;
      unint64_t v108 = (unint64_t)v107;
      uint64_t v40 = v107;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *os_log_type_t v39 = v107;

      _os_log_impl((void *)&_mh_execute_header, v28, v37, "MessagingServiceDelegateTrampoline: No delegate for %@", v38, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
LABEL_38:

      return;
    }

    uint64_t v55 = v107;

    return;
  }
  uint64_t v104 = Strong;
  if (!a2)
  {
    if (qword_1016373D8 != -1) {
      swift_once();
    }
    uint64_t v41 = type metadata accessor for Logger();
    sub_100010324(v41, (uint64_t)qword_10170F168);
    unint64_t v42 = v7;
    long long v28 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v43))
    {
      uint64_t v44 = (uint8_t *)swift_slowAlloc();
      unint64_t v45 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v44 = 138412290;
      unint64_t v108 = (unint64_t)v42;
      uint64_t v46 = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v45 = v42;

      _os_log_impl((void *)&_mh_execute_header, v28, v43, "MessagingServiceDelegateTrampoline: No account for %@", v44, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
LABEL_37:
      swift_unknownObjectRelease();
      goto LABEL_38;
    }

    swift_unknownObjectRelease();
    return;
  }
  uint64_t v99 = *((void *)v24 + 1);
  sub_100020260(a3, (uint64_t)v20);
  uint64_t v27 = v106;
  uint64_t v26 = v107;
  if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v107 + 6))(v20, 1, v106) == 1)
  {
    long long v28 = a2;
    sub_10001DAB4((uint64_t)v20, &qword_101649E40);
    if (qword_1016373D8 != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    sub_100010324(v29, (uint64_t)qword_10170F168);
    uint64_t v30 = v7;
    long long v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      long long v33 = (uint8_t *)swift_slowAlloc();
      long long v34 = (void *)swift_slowAlloc();
      *(_DWORD *)long long v33 = 138412290;
      unint64_t v108 = (unint64_t)v30;
      uint64_t v35 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v34 = v30;

      _os_log_impl((void *)&_mh_execute_header, v31, v32, "MessagingServiceDelegateTrampoline: No resourceURL for %@", v33, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_unknownObjectRelease();
      return;
    }

    goto LABEL_37;
  }
  (*((void (**)(char *, char *, uint64_t))v26 + 4))(v105, v20, v27);
  uint64_t v47 = v27;
  if (!a6)
  {
    uint64_t v56 = qword_1016373D8;
    id v57 = a2;
    if (v56 != -1) {
      swift_once();
    }
    uint64_t v58 = type metadata accessor for Logger();
    sub_100010324(v58, (uint64_t)qword_10170F168);
    unint64_t v59 = v7;
    unint64_t v60 = Logger.logObject.getter();
    os_log_type_t v61 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v60, v61))
    {
      uint64_t v62 = (uint8_t *)swift_slowAlloc();
      id v63 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v62 = 138412290;
      unint64_t v108 = (unint64_t)v59;
      uint64_t v64 = v59;
      uint64_t v47 = v106;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *id v63 = v59;

      uint64_t v65 = "MessagingServiceDelegateTrampoline: No fromID for %@";
LABEL_47:
      _os_log_impl((void *)&_mh_execute_header, v60, v61, v65, v62, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
LABEL_49:

      swift_unknownObjectRelease();
      (*((void (**)(char *, uint64_t))v107 + 1))(v105, v47);
      return;
    }
LABEL_48:

    goto LABEL_49;
  }
  if (!a7)
  {
    uint64_t v66 = qword_1016373D8;
    id v57 = a2;
    if (v66 != -1) {
      swift_once();
    }
    uint64_t v67 = type metadata accessor for Logger();
    sub_100010324(v67, (uint64_t)qword_10170F168);
    unint64_t v59 = v7;
    unint64_t v60 = Logger.logObject.getter();
    os_log_type_t v61 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v60, v61))
    {
      uint64_t v62 = (uint8_t *)swift_slowAlloc();
      unint64_t v68 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v62 = 138412290;
      unint64_t v108 = (unint64_t)v59;
      char v69 = v59;
      uint64_t v47 = v106;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v68 = v59;

      uint64_t v65 = "MessagingServiceDelegateTrampoline: No context for %@";
      goto LABEL_47;
    }
    goto LABEL_48;
  }
  if (a4)
  {
    if (v102)
    {
      uint64_t v48 = qword_1016373E8;
      id v49 = a2;
      id v50 = a7;
      uint64_t v51 = swift_bridgeObjectRetain();
      if (v48 != -1) {
        uint64_t v51 = swift_once();
      }
      __chkstk_darwin(v51);
      sub_10000588C(&qword_101644320);
      OSAllocatedUnfairLock.callAsFunction<A>(_:)();
      if (v109) {
        unint64_t v52 = v108;
      }
      else {
        unint64_t v52 = 0xD000000000000011;
      }
      if (v109) {
        unint64_t v53 = v109;
      }
      else {
        unint64_t v53 = 0x80000001013FC5D0;
      }
      id v54 = v50;
      sub_100F87B00(v54, (uint64_t)v15);
      if (v103[6](v15, 1, v16) == 1)
      {
        (*((void (**)(char *, uint64_t))v107 + 1))(v105, v106);
        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        sub_10001DAB4((uint64_t)v15, (uint64_t *)&unk_101644330);
        return;
      }
      sub_10042681C((uint64_t)v15, v101);
      id v80 = v49;
      id v81 = [v80 uniqueID];
      if (v81)
      {
        uint64_t v82 = v81;
        unint64_t v103 = (unsigned int (**)(char *, uint64_t, uint64_t))v52;
        uint64_t v97 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v102 = v83;

        if (*(void *)(sub_1004218D8(a4) + 16))
        {
          sub_10000588C((uint64_t *)&unk_101644340);
          uint64_t v84 = (void *)static _DictionaryStorage.allocate(capacity:)();
        }
        else
        {
          uint64_t v84 = _swiftEmptyDictionarySingleton;
        }
        id v98 = v54;
        unint64_t v108 = (unint64_t)v84;
        uint64_t v86 = swift_bridgeObjectRetain();
        sub_1008FFFDC(v86, 1, &v108);
        swift_bridgeObjectRelease();
        unint64_t v87 = v108;
        uint64_t v88 = _s12searchpartyd20MessagingDestinationV20stringRepresentationACSgSS_tcfC_0();
        if (v90)
        {
          uint64_t v91 = v88;
          uint64_t v92 = v89;
          uint64_t v93 = v90;
          uint64_t ObjectType = swift_getObjectType();
          uint64_t v95 = v101;
          uint64_t v96 = v105;
          (*(void (**)(unsigned int (**)(char *, uint64_t, uint64_t), unint64_t, uint64_t, uint64_t, char *, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v99 + 32))(v103, v53, v97, v102, v105, v87, v91, v92, v93, v101, ObjectType, v99);
          swift_bridgeObjectRelease();

          swift_unknownObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRelease();
          sub_100426880(v95);
          (*((void (**)(char *, uint64_t))v107 + 1))(v96, v106);
          return;
        }
        goto LABEL_64;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
LABEL_64:
    __break(1u);
    swift_unexpectedError();
    __break(1u);
    return;
  }
  uint64_t v70 = qword_1016373D8;
  id v71 = a2;
  uint64_t v72 = a7;
  if (v70 != -1) {
    swift_once();
  }
  uint64_t v73 = type metadata accessor for Logger();
  sub_100010324(v73, (uint64_t)qword_10170F168);
  uint64_t v74 = v7;
  os_log_type_t v75 = Logger.logObject.getter();
  os_log_type_t v76 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v75, v76))
  {
    uint64_t v77 = (uint8_t *)swift_slowAlloc();
    os_log_type_t v78 = (void *)swift_slowAlloc();
    unint64_t v103 = v72;
    *(_DWORD *)uint64_t v77 = 138412290;
    unint64_t v108 = (unint64_t)v74;
    id v79 = v74;
    uint64_t v72 = v103;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *os_log_type_t v78 = v74;

    _os_log_impl((void *)&_mh_execute_header, v75, v76, "MessagingServiceDelegateTrampoline: No metadata for %@", v77, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    uint64_t v47 = v106;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
  uint64_t v85 = v107;

  swift_unknownObjectRelease();
  (*((void (**)(char *, uint64_t))v85 + 1))(v105, v47);
}

void sub_100423C54(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, int a5, char *a6)
{
  uint64_t v64 = a6;
  int v63 = a5;
  uint64_t v11 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = &v6[OBJC_IVAR____TtC12searchpartyd34MessagingServiceDelegateTrampoline_delegate];
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong)
  {
    if (qword_1016373D8 != -1) {
      swift_once();
    }
    uint64_t v30 = type metadata accessor for Logger();
    sub_100010324(v30, (uint64_t)qword_10170F168);
    uint64_t v64 = v6;
    long long v31 = Logger.logObject.getter();
    os_log_type_t v32 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v31, v32))
    {
      long long v33 = (uint8_t *)swift_slowAlloc();
      long long v34 = (void *)swift_slowAlloc();
      *(_DWORD *)long long v33 = 138412290;
      v65[0] = (uint64_t)v64;
      uint64_t v35 = v64;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      void *v34 = v64;

      _os_log_impl((void *)&_mh_execute_header, v31, v32, "MessagingServiceDelegateTrampoline: No delegate for %@", v33, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return;
    }

LABEL_34:
    uint64_t v58 = v64;

    return;
  }
  if (!a2)
  {
    if (qword_1016373D8 != -1) {
      swift_once();
    }
    uint64_t v36 = type metadata accessor for Logger();
    sub_100010324(v36, (uint64_t)qword_10170F168);
    os_log_type_t v37 = v6;
    long long v24 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v38))
    {
      os_log_type_t v39 = (uint8_t *)swift_slowAlloc();
      uint64_t v40 = (void *)swift_slowAlloc();
      *(_DWORD *)os_log_type_t v39 = 138412290;
      v65[0] = (uint64_t)v37;
      uint64_t v41 = v37;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v40 = v37;

      _os_log_impl((void *)&_mh_execute_header, v24, v38, "MessagingServiceDelegateTrampoline: No account for %@", v39, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
      goto LABEL_22;
    }

    swift_unknownObjectRelease();
    return;
  }
  uint64_t v62 = Strong;
  if (!a4)
  {
    uint64_t v42 = qword_1016373D8;
    uint64_t v64 = a2;
    if (v42 != -1) {
      swift_once();
    }
    uint64_t v43 = type metadata accessor for Logger();
    sub_100010324(v43, (uint64_t)qword_10170F168);
    uint64_t v44 = v6;
    long long v24 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v24, v45))
    {
      uint64_t v46 = (uint8_t *)swift_slowAlloc();
      uint64_t v47 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v46 = 138412290;
      v65[0] = (uint64_t)v44;
      uint64_t v48 = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v47 = v44;

      _os_log_impl((void *)&_mh_execute_header, v24, v45, "MessagingServiceDelegateTrampoline: No identifier for %@", v46, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      goto LABEL_22;
    }

    swift_unknownObjectRelease();
    goto LABEL_34;
  }
  uint64_t v61 = *((void *)v18 + 1);
  id v20 = a2;
  swift_bridgeObjectRetain();
  UUID.init(uuidString:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) != 1)
  {
    swift_bridgeObjectRelease();
    uint64_t v49 = (*(uint64_t (**)(char *, char *, uint64_t))(v15 + 32))(v17, v13, v14);
    if (a1)
    {
      if (qword_1016373E8 != -1) {
        uint64_t v49 = swift_once();
      }
      __chkstk_darwin(v49);
      sub_10000588C(&qword_101644320);
      OSAllocatedUnfairLock.callAsFunction<A>(_:)();
      uint64_t v51 = v65[0];
      uint64_t v50 = v65[1];
      id v52 = v20;
      id v53 = [v52 uniqueID];
      if (v53)
      {
        id v54 = v53;
        if (!v50)
        {
          uint64_t v50 = 0x80000001013FC5D0;
          uint64_t v51 = 0xD000000000000011;
        }
        uint64_t ObjectType = swift_getObjectType();
        uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v57 = v56;

        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *, void, char *, uint64_t, uint64_t))(v61 + 8))(v51, v50, v55, v57, v17, v63 & 1, v64, ObjectType, v61);
        swift_bridgeObjectRelease();

        swift_unknownObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
        return;
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    return;
  }
  sub_10001DAB4((uint64_t)v13, &qword_101638CF0);
  if (qword_1016373D8 != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  sub_100010324(v21, (uint64_t)qword_10170F168);
  uint64_t v22 = v6;
  swift_bridgeObjectRetain();
  uint64_t v23 = v22;
  long long v24 = Logger.logObject.getter();
  os_log_type_t v25 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v24, v25))
  {
    uint64_t v26 = swift_slowAlloc();
    uint64_t v64 = (char *)v20;
    uint64_t v27 = v26;
    long long v28 = (void *)swift_slowAlloc();
    v65[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v27 = 136315394;
    swift_bridgeObjectRetain();
    uint64_t v66 = sub_1008FA0F0(a3, a4, v65);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v27 + 12) = 2112;
    uint64_t v66 = (uint64_t)v23;
    uint64_t v29 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *long long v28 = v23;

    _os_log_impl((void *)&_mh_execute_header, v24, v25, "MessagingServiceDelegateTrampoline: identifier [%s] is not a valid UUID for %@", (uint8_t *)v27, 0x16u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

LABEL_22:
    swift_unknownObjectRelease();

    return;
  }

  swift_bridgeObjectRelease_n();
  swift_unknownObjectRelease();
}

void sub_100424740(uint64_t a1, void *a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v82 = a5;
  uint64_t v12 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v78 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v83 = *(char **)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v78 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = &v6[OBJC_IVAR____TtC12searchpartyd34MessagingServiceDelegateTrampoline_delegate];
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  if (!Strong)
  {
    if (qword_1016373D8 != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    sub_100010324(v31, (uint64_t)qword_10170F168);
    uint64_t v83 = v6;
    os_log_type_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v32, v33))
    {
      long long v34 = (uint8_t *)swift_slowAlloc();
      uint64_t v35 = (void *)swift_slowAlloc();
      *(_DWORD *)long long v34 = 138412290;
      unint64_t v84 = (unint64_t)v83;
      uint64_t v36 = v83;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v35 = v83;

      _os_log_impl((void *)&_mh_execute_header, v32, v33, "MessagingServiceDelegateTrampoline: No delegate for %@", v34, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return;
    }

    goto LABEL_40;
  }
  if (a2)
  {
    uint64_t v81 = Strong;
    if (a4)
    {
      uint64_t v80 = *((void *)v18 + 1);
      id v20 = a2;
      swift_bridgeObjectRetain();
      UUID.init(uuidString:)();
      uint64_t v21 = (void (**)(char *, char *, uint64_t))v83;
      if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v83 + 6))(v14, 1, v15) == 1)
      {
        sub_10001DAB4((uint64_t)v14, &qword_101638CF0);
        if (qword_1016373D8 != -1) {
          swift_once();
        }
        uint64_t v22 = type metadata accessor for Logger();
        sub_100010324(v22, (uint64_t)qword_10170F168);
        uint64_t v23 = v6;
        swift_bridgeObjectRetain();
        long long v24 = v23;
        os_log_type_t v25 = Logger.logObject.getter();
        os_log_type_t v26 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v25, v26))
        {
          uint64_t v27 = swift_slowAlloc();
          long long v28 = (void *)swift_slowAlloc();
          uint64_t v29 = swift_slowAlloc();
          uint64_t v83 = v20;
          unint64_t v84 = v29;
          *(_DWORD *)uint64_t v27 = 136315394;
          swift_bridgeObjectRetain();
          uint64_t v86 = sub_1008FA0F0(a3, a4, (uint64_t *)&v84);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v27 + 12) = 2112;
          uint64_t v86 = (uint64_t)v24;
          uint64_t v30 = v24;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *long long v28 = v24;

          _os_log_impl((void *)&_mh_execute_header, v25, v26, "MessagingServiceDelegateTrampoline: identifier [%s] is not a valid UUID for %@", (uint8_t *)v27, 0x16u);
          sub_10000588C((uint64_t *)&unk_101638EA0);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

LABEL_22:
          swift_unknownObjectRelease();

          return;
        }

        swift_bridgeObjectRelease_n();
        swift_unknownObjectRelease();

        return;
      }
      swift_bridgeObjectRelease();
      v21[4](v17, v14, v15);
      if (a6)
      {
        if (a1) {
          goto LABEL_25;
        }
      }
      else
      {
        uint64_t v68 = IDSCopyLocalDeviceUniqueID();
        if (!v68)
        {
LABEL_47:
          if (qword_1016373D8 != -1) {
            swift_once();
          }
          uint64_t v74 = type metadata accessor for Logger();
          sub_100010324(v74, (uint64_t)qword_10170F168);
          os_log_type_t v75 = Logger.logObject.getter();
          os_log_type_t v76 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v75, v76))
          {
            uint64_t v77 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v77 = 0;
            _os_log_impl((void *)&_mh_execute_header, v75, v76, "Ignoring IDSCopyLocalDeviceUniqueID() failed to return a value!", v77, 2u);
            swift_slowDealloc();
          }

          swift_unknownObjectRelease();
          goto LABEL_35;
        }
        char v69 = (void *)v68;
        uint64_t v70 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v72 = v71;

        unint64_t v84 = 0x3A656369766564;
        unint64_t v85 = 0xE700000000000000;
        v73._countAndFlagsBits = v70;
        v73._object = v72;
        String.append(_:)(v73);
        swift_bridgeObjectRelease();
        uint64_t v82 = v84;
        if (a1)
        {
LABEL_25:
          uint64_t v50 = qword_1016373E8;
          uint64_t v51 = swift_bridgeObjectRetain();
          if (v50 != -1) {
            uint64_t v51 = swift_once();
          }
          __chkstk_darwin(v51);
          sub_10000588C(&qword_101644320);
          OSAllocatedUnfairLock.callAsFunction<A>(_:)();
          unint64_t v52 = v84;
          if (!v85) {
            unint64_t v52 = 0xD000000000000011;
          }
          unint64_t v79 = v52;
          if (v85) {
            unint64_t v53 = v85;
          }
          else {
            unint64_t v53 = 0x80000001013FC5D0;
          }
          id v54 = v20;
          id v55 = [v54 uniqueID];
          if (v55)
          {
            uint64_t v56 = v55;
            uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)();
            uint64_t v59 = v58;

            uint64_t v60 = _s12searchpartyd20MessagingDestinationV20stringRepresentationACSgSS_tcfC_0();
            if (v62)
            {
              uint64_t v63 = v60;
              uint64_t v64 = v61;
              uint64_t v65 = v62;
              uint64_t ObjectType = swift_getObjectType();
              (*(void (**)(unint64_t, unint64_t, uint64_t, uint64_t, char *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v80 + 16))(v79, v53, v57, v59, v17, v63, v64, v65, ObjectType, v80);
              swift_bridgeObjectRelease();

              swift_unknownObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
LABEL_35:
              (*((void (**)(char *, uint64_t))v83 + 1))(v17, v15);
              return;
            }
          }
          else
          {
            __break(1u);
          }
          __break(1u);
          return;
        }
      }
      __break(1u);
      goto LABEL_47;
    }
    uint64_t v43 = qword_1016373D8;
    uint64_t v83 = a2;
    if (v43 != -1) {
      swift_once();
    }
    uint64_t v44 = type metadata accessor for Logger();
    sub_100010324(v44, (uint64_t)qword_10170F168);
    os_log_type_t v45 = v6;
    os_log_type_t v25 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v25, v46))
    {
      uint64_t v47 = (uint8_t *)swift_slowAlloc();
      uint64_t v48 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v47 = 138412290;
      unint64_t v84 = (unint64_t)v45;
      uint64_t v49 = v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v48 = v45;

      _os_log_impl((void *)&_mh_execute_header, v25, v46, "MessagingServiceDelegateTrampoline: No identifier for %@", v47, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      goto LABEL_22;
    }

    swift_unknownObjectRelease();
LABEL_40:
    uint64_t v67 = v83;

    return;
  }
  if (qword_1016373D8 != -1) {
    swift_once();
  }
  uint64_t v37 = type metadata accessor for Logger();
  sub_100010324(v37, (uint64_t)qword_10170F168);
  os_log_type_t v38 = v6;
  os_log_type_t v25 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v25, v39))
  {
    uint64_t v40 = (uint8_t *)swift_slowAlloc();
    uint64_t v41 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v40 = 138412290;
    unint64_t v84 = (unint64_t)v38;
    uint64_t v42 = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v41 = v38;

    _os_log_impl((void *)&_mh_execute_header, v25, v39, "MessagingServiceDelegateTrampoline: No account for %@", v40, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    goto LABEL_22;
  }

  swift_unknownObjectRelease();
}

uint64_t sub_1004253BC(uint64_t a1, uint64_t a2)
{
  uint64_t v51 = a1;
  uint64_t v3 = type metadata accessor for Logger();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (!a2 || (uint64_t v7 = sub_10042D0B8(a2)) == 0)
  {
    if (qword_1016373D8 != -1) {
      swift_once();
    }
    uint64_t v13 = sub_100010324(v3, (uint64_t)qword_10170F168);
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v13, v3);
    swift_bridgeObjectRetain_n();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      uint64_t result = swift_slowAlloc();
      unint64_t v54 = result;
      *(_DWORD *)uint64_t v16 = 136315138;
      if (!a2)
      {
LABEL_48:
        __break(1u);
        return result;
      }
      unint64_t v53 = (unint64_t)(v16 + 4);
      swift_bridgeObjectRetain();
      uint64_t v17 = Set.description.getter();
      unint64_t v19 = v18;
      swift_bridgeObjectRelease();
      uint64_t v56 = sub_1008FA0F0(v17, v19, (uint64_t *)&v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "MessagingServiceDelegateTrampoline: Unable to convert accounts to Set<IDSAccount> %s", v16, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }
  uint64_t v8 = v7;
  unint64_t v53 = v7 & 0xC000000000000001;
  if ((v7 & 0xC000000000000001) != 0)
  {
    uint64_t v9 = __CocoaSet.count.getter();
    if (v9)
    {
LABEL_5:
      uint64_t v59 = _swiftEmptyArrayStorage;
      sub_1000B7B38(0, v9 & ~(v9 >> 63), 0);
      if (v53)
      {
        uint64_t result = __CocoaSet.startIndex.getter();
        unsigned __int8 v12 = 1;
      }
      else
      {
        uint64_t result = sub_101160478(v8);
        unsigned __int8 v12 = v21 & 1;
      }
      uint64_t v56 = result;
      uint64_t v57 = v11;
      unsigned __int8 v58 = v12;
      if (v9 < 0)
      {
        __break(1u);
      }
      else
      {
        uint64_t v22 = v8 & 0xFFFFFFFFFFFFFF8;
        if (v8 < 0) {
          uint64_t v22 = v8;
        }
        uint64_t v52 = v22;
        while (1)
        {
          uint64_t v29 = v56;
          uint64_t v28 = v57;
          uint64_t v30 = v58;
          sub_10115FF7C(v56, v57, v58, v8);
          os_log_type_t v32 = v31;
          uint64_t result = (uint64_t)[v31 uniqueID];
          if (!result) {
            break;
          }
          os_log_type_t v33 = (void *)result;
          uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v36 = v35;

          uint64_t v37 = v59;
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = sub_1000B7B38(0, v37[2] + 1, 1);
            uint64_t v37 = v59;
          }
          unint64_t v39 = v37[2];
          unint64_t v38 = v37[3];
          if (v39 >= v38 >> 1)
          {
            uint64_t result = sub_1000B7B38(v38 > 1, v39 + 1, 1);
            uint64_t v37 = v59;
          }
          v37[2] = v39 + 1;
          uint64_t v40 = &v37[2 * v39];
          v40[4] = v34;
          v40[5] = v36;
          if (v53)
          {
            if ((v30 & 1) == 0) {
              goto LABEL_46;
            }
            if (__CocoaSet.Index.handleBitPattern.getter()) {
              swift_isUniquelyReferenced_nonNull_native();
            }
            sub_10000588C(&qword_101644328);
            uint64_t v41 = (void (*)(unint64_t *, void))Set.Index._asCocoa.modify();
            __CocoaSet.formIndex(after:isUnique:)();
            v41(&v54, 0);
            if (!--v9)
            {
LABEL_32:
              sub_1001A1CB8(v56, v57, v58);
              swift_bridgeObjectRelease();
              id v20 = v59;
              goto LABEL_33;
            }
          }
          else
          {
            uint64_t v23 = sub_10052CB9C(v29, v28, v30, v8);
            uint64_t v25 = v24;
            char v27 = v26;
            sub_1001A1CB8(v29, v28, v30);
            uint64_t v56 = v23;
            uint64_t v57 = v25;
            unsigned __int8 v58 = v27 & 1;
            if (!--v9) {
              goto LABEL_32;
            }
          }
        }
      }
      __break(1u);
LABEL_46:
      __break(1u);
      goto LABEL_47;
    }
  }
  else
  {
    uint64_t v9 = *(void *)(v7 + 16);
    if (v9) {
      goto LABEL_5;
    }
  }
  swift_bridgeObjectRelease();
  id v20 = _swiftEmptyArrayStorage;
LABEL_33:
  uint64_t v42 = sub_1011590C4((uint64_t)v20);
  uint64_t result = swift_bridgeObjectRelease();
  if (!v51)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  if (qword_1016373E8 != -1) {
    uint64_t result = swift_once();
  }
  __chkstk_darwin(result);
  v50[-2] = v43;
  sub_10000588C(&qword_101644320);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  unint64_t v44 = v54;
  unint64_t v45 = v55;
  if (v55) {
    unint64_t v46 = v55;
  }
  else {
    unint64_t v46 = 0x80000001013FC5D0;
  }
  uint64_t v47 = v50[1] + OBJC_IVAR____TtC12searchpartyd34MessagingServiceDelegateTrampoline_delegate;
  if (swift_unknownObjectWeakLoadStrong())
  {
    if (!v45) {
      unint64_t v44 = 0xD000000000000011;
    }
    uint64_t v48 = *(void *)(v47 + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(unint64_t, unint64_t, uint64_t, uint64_t, uint64_t))(v48 + 40))(v44, v46, v42, ObjectType, v48);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
}

uint64_t sub_100425AB0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    uint64_t result = (uint64_t)sub_1004C75DC(a2);
    if (result)
    {
      if (!a1)
      {
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }
      unint64_t v10 = result;
      if (qword_1016373E8 != -1) {
        uint64_t result = swift_once();
      }
      __chkstk_darwin(result);
      *(&v37 - 2) = a1;
      sub_10000588C(&qword_101644320);
      OSAllocatedUnfairLock.callAsFunction<A>(_:)();
      if (*((void *)&v41[0] + 1)) {
        unint64_t v11 = *(void *)&v41[0];
      }
      else {
        unint64_t v11 = 0xD000000000000011;
      }
      if (*((void *)&v41[0] + 1)) {
        unint64_t v12 = *((void *)&v41[0] + 1);
      }
      else {
        unint64_t v12 = 0x80000001013FC5D0;
      }
      uint64_t v13 = v2 + OBJC_IVAR____TtC12searchpartyd34MessagingServiceDelegateTrampoline_delegate;
      if (!swift_unknownObjectWeakLoadStrong())
      {
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      uint64_t v14 = *(void *)(v13 + 8);
      if (v10 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v15) {
          goto LABEL_15;
        }
      }
      else
      {
        uint64_t v15 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v15)
        {
LABEL_15:
          uint64_t v37 = v14;
          unint64_t v38 = (uint8_t *)v11;
          unint64_t v39 = (char *)v12;
          uint64_t v40 = _swiftEmptyArrayStorage;
          uint64_t result = sub_1000B7514(0, v15 & ~(v15 >> 63), 0);
          if ((v15 & 0x8000000000000000) == 0)
          {
            uint64_t v16 = 0;
            uint64_t v17 = v40;
            do
            {
              if ((v10 & 0xC000000000000001) != 0) {
                id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
              }
              else {
                id v18 = *(id *)(v10 + 8 * v16 + 32);
              }
              sub_100E8F03C(v18, (uint64_t)v41);
              uint64_t v40 = v17;
              unint64_t v20 = v17[2];
              unint64_t v19 = v17[3];
              if (v20 >= v19 >> 1)
              {
                sub_1000B7514(v19 > 1, v20 + 1, 1);
                uint64_t v17 = v40;
              }
              ++v16;
              void v17[2] = v20 + 1;
              char v21 = &v17[20 * v20];
              long long v22 = v41[1];
              void v21[2] = v41[0];
              v21[3] = v22;
              long long v23 = v41[2];
              long long v24 = v41[3];
              long long v25 = v41[5];
              v21[6] = v41[4];
              v21[7] = v25;
              v21[4] = v23;
              v21[5] = v24;
              long long v26 = v41[6];
              long long v27 = v41[7];
              long long v28 = v41[9];
              v21[10] = v41[8];
              v21[11] = v28;
              v21[8] = v26;
              v21[9] = v27;
            }
            while (v15 != v16);
            swift_bridgeObjectRelease();
            unint64_t v12 = (unint64_t)v39;
            unint64_t v11 = (unint64_t)v38;
            uint64_t v14 = v37;
            goto LABEL_34;
          }
          __break(1u);
          goto LABEL_36;
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v17 = _swiftEmptyArrayStorage;
LABEL_34:
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(unint64_t, unint64_t, void *, uint64_t, uint64_t))(v14 + 48))(v11, v12, v17, ObjectType, v14);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_unknownObjectRelease();
    }
  }
  if (qword_1016373D8 != -1) {
    swift_once();
  }
  uint64_t v29 = sub_100010324(v5, (uint64_t)qword_10170F168);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v29, v5);
  swift_bridgeObjectRetain_n();
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v30, v31))
  {

    swift_bridgeObjectRelease_n();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  os_log_type_t v32 = (uint8_t *)swift_slowAlloc();
  uint64_t result = swift_slowAlloc();
  *(void *)&v41[0] = result;
  *(_DWORD *)os_log_type_t v32 = 136315138;
  if (a2)
  {
    unint64_t v38 = v32 + 4;
    swift_bridgeObjectRetain();
    unint64_t v39 = (char *)&type metadata for Any + 8;
    uint64_t v33 = Array.description.getter();
    unint64_t v35 = v34;
    swift_bridgeObjectRelease();
    uint64_t v40 = (void *)sub_1008FA0F0(v33, v35, (uint64_t *)v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "MessagingServiceDelegateTrampoline: Unable to convert devices to [IDSDevice] %s", v32, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_10042603C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for Logger();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2)
  {
    uint64_t result = (uint64_t)sub_1004C75DC(a2);
    if (result)
    {
      if (!a1)
      {
LABEL_36:
        __break(1u);
        goto LABEL_37;
      }
      unint64_t v10 = result;
      if (qword_1016373E8 != -1) {
        uint64_t result = swift_once();
      }
      __chkstk_darwin(result);
      *(&v37 - 2) = a1;
      sub_10000588C(&qword_101644320);
      OSAllocatedUnfairLock.callAsFunction<A>(_:)();
      if (*((void *)&v41[0] + 1)) {
        unint64_t v11 = *(void *)&v41[0];
      }
      else {
        unint64_t v11 = 0xD000000000000011;
      }
      if (*((void *)&v41[0] + 1)) {
        unint64_t v12 = *((void *)&v41[0] + 1);
      }
      else {
        unint64_t v12 = 0x80000001013FC5D0;
      }
      uint64_t v13 = v2 + OBJC_IVAR____TtC12searchpartyd34MessagingServiceDelegateTrampoline_delegate;
      if (!swift_unknownObjectWeakLoadStrong())
      {
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      uint64_t v14 = *(void *)(v13 + 8);
      if (v10 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (v15) {
          goto LABEL_15;
        }
      }
      else
      {
        uint64_t v15 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v15)
        {
LABEL_15:
          uint64_t v37 = v14;
          unint64_t v38 = (uint8_t *)v11;
          unint64_t v39 = (char *)v12;
          uint64_t v40 = _swiftEmptyArrayStorage;
          uint64_t result = sub_1000B7514(0, v15 & ~(v15 >> 63), 0);
          if ((v15 & 0x8000000000000000) == 0)
          {
            uint64_t v16 = 0;
            uint64_t v17 = v40;
            do
            {
              if ((v10 & 0xC000000000000001) != 0) {
                id v18 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
              }
              else {
                id v18 = *(id *)(v10 + 8 * v16 + 32);
              }
              sub_100E8F03C(v18, (uint64_t)v41);
              uint64_t v40 = v17;
              unint64_t v20 = v17[2];
              unint64_t v19 = v17[3];
              if (v20 >= v19 >> 1)
              {
                sub_1000B7514(v19 > 1, v20 + 1, 1);
                uint64_t v17 = v40;
              }
              ++v16;
              void v17[2] = v20 + 1;
              char v21 = &v17[20 * v20];
              long long v22 = v41[1];
              void v21[2] = v41[0];
              v21[3] = v22;
              long long v23 = v41[2];
              long long v24 = v41[3];
              long long v25 = v41[5];
              v21[6] = v41[4];
              v21[7] = v25;
              v21[4] = v23;
              v21[5] = v24;
              long long v26 = v41[6];
              long long v27 = v41[7];
              long long v28 = v41[9];
              v21[10] = v41[8];
              v21[11] = v28;
              v21[8] = v26;
              v21[9] = v27;
            }
            while (v15 != v16);
            swift_bridgeObjectRelease();
            unint64_t v12 = (unint64_t)v39;
            unint64_t v11 = (unint64_t)v38;
            uint64_t v14 = v37;
            goto LABEL_34;
          }
          __break(1u);
          goto LABEL_36;
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v17 = _swiftEmptyArrayStorage;
LABEL_34:
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(unint64_t, unint64_t, void *, uint64_t, uint64_t))(v14 + 56))(v11, v12, v17, ObjectType, v14);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_unknownObjectRelease();
    }
  }
  if (qword_1016373D8 != -1) {
    swift_once();
  }
  uint64_t v29 = sub_100010324(v5, (uint64_t)qword_10170F168);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v29, v5);
  swift_bridgeObjectRetain_n();
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.error.getter();
  if (!os_log_type_enabled(v30, v31))
  {

    swift_bridgeObjectRelease_n();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  os_log_type_t v32 = (uint8_t *)swift_slowAlloc();
  uint64_t result = swift_slowAlloc();
  *(void *)&v41[0] = result;
  *(_DWORD *)os_log_type_t v32 = 136315138;
  if (a2)
  {
    unint64_t v38 = v32 + 4;
    swift_bridgeObjectRetain();
    unint64_t v39 = (char *)&type metadata for Any + 8;
    uint64_t v33 = Array.description.getter();
    unint64_t v35 = v34;
    swift_bridgeObjectRelease();
    uint64_t v40 = (void *)sub_1008FA0F0(v33, v35, (uint64_t *)v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "MessagingServiceDelegateTrampoline: Unable to convert devices to [IDSDevice] %s", v32, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
LABEL_37:
  __break(1u);
  return result;
}

uint64_t sub_1004265C8(void *a1, uint64_t a2, void *a3, uint64_t a4, void (*a5)(void *, uint64_t))
{
  if (a4) {
    uint64_t v8 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  }
  else {
    uint64_t v8 = 0;
  }
  id v9 = a3;
  id v10 = a1;
  a5(a3, v8);

  return swift_bridgeObjectRelease();
}

id sub_100426798()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for MessagingServiceDelegateTrampoline();
  return [super dealloc];
}

uint64_t type metadata accessor for MessagingServiceDelegateTrampoline()
{
  return self;
}

uint64_t sub_100426800@<X0>(void *a1@<X8>)
{
  return sub_101063E68(*(void **)(v1 + 16), a1);
}

uint64_t sub_10042681C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MessagingMessageContext();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100426880(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MessagingMessageContext();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1004268DC(uint64_t a1)
{
  return a1;
}

void sub_100426930(void *a1, NSObject *a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  if (!a1)
  {
    if (qword_1016373D8 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_100010324(v21, (uint64_t)qword_10170F168);
    uint64_t v56 = v6;
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v7, v22))
    {

      goto LABEL_27;
    }
    long long v23 = (uint8_t *)swift_slowAlloc();
    long long v24 = (void *)swift_slowAlloc();
    *(_DWORD *)long long v23 = 138412290;
    long long v25 = v56;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *long long v24 = v56;

    _os_log_impl((void *)&_mh_execute_header, v7, v22, "MessagingServiceDelegateTrampoline: No account for %@", v23, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
LABEL_24:

    return;
  }
  uint64_t v7 = a2;
  if (!a2)
  {
    uint64_t v26 = qword_1016373D8;
    uint64_t v56 = a1;
    if (v26 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_100010324(v27, (uint64_t)qword_10170F168);
    long long v28 = v6;
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v7, v29))
    {

      goto LABEL_27;
    }
    uint64_t v30 = (uint8_t *)swift_slowAlloc();
    os_log_type_t v31 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v30 = 138412290;
    os_log_type_t v32 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *os_log_type_t v31 = v28;

    _os_log_impl((void *)&_mh_execute_header, v7, v29, "MessagingServiceDelegateTrampoline: No session for %@", v30, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    goto LABEL_24;
  }
  uint64_t v56 = (char *)a1;
  if (!a4)
  {
    id v33 = a1;
    unint64_t v34 = v7;
    goto LABEL_20;
  }
  unint64_t v54 = a1;
  unint64_t v55 = v7;
  swift_bridgeObjectRetain();
  uint64_t v10 = _s12searchpartyd20MessagingDestinationV20stringRepresentationACSgSS_tcfC_0();
  if (!v12)
  {
LABEL_20:
    if (qword_1016373D8 != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    sub_100010324(v35, (uint64_t)qword_10170F168);
    uint64_t v36 = v6;
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      unint64_t v39 = (uint8_t *)swift_slowAlloc();
      uint64_t v40 = (void *)swift_slowAlloc();
      *(_DWORD *)unint64_t v39 = 138412290;
      uint64_t v41 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v40 = v36;

      _os_log_impl((void *)&_mh_execute_header, v37, v38, "MessagingServiceDelegateTrampoline: No fromID for %@", v39, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      goto LABEL_24;
    }

LABEL_27:
    uint64_t v42 = v56;
    goto LABEL_28;
  }
  uint64_t v13 = v12;
  if (a6 >> 60 == 15)
  {
    swift_bridgeObjectRelease();
    if (qword_1016373D8 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_100010324(v14, (uint64_t)qword_10170F168);
    uint64_t v15 = v6;
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v16, v17))
    {
      id v18 = (uint8_t *)swift_slowAlloc();
      unint64_t v19 = (void *)swift_slowAlloc();
      *(_DWORD *)id v18 = 138412290;
      unint64_t v20 = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v19 = v15;

      _os_log_impl((void *)&_mh_execute_header, v16, v17, "MessagingServiceDelegateTrampoline: No context for %@", v18, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return;
    }

    goto LABEL_36;
  }
  uint64_t v43 = v10;
  uint64_t v44 = v11;
  unint64_t v45 = &v6[OBJC_IVAR____TtC12searchpartyd34MessagingServiceDelegateTrampoline_delegate];
  if (!swift_unknownObjectWeakLoadStrong())
  {
    swift_bridgeObjectRelease();
LABEL_36:

    uint64_t v42 = v54;
    goto LABEL_28;
  }
  uint64_t v53 = *((void *)v45 + 1);
  unint64_t v46 = v54;
  sub_100037A38(a5, a6);
  uint64_t v57 = v46;
  id v47 = [v46 uniqueID];
  if (!v47)
  {
    __break(1u);
    return;
  }
  uint64_t v48 = v47;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v50 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v52 = v51;

  (*(void (**)(uint64_t, uint64_t, NSObject *, uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(v53 + 64))(v50, v52, v55, v43, v44, v13, a5, a6, ObjectType, v53);
  swift_unknownObjectRelease();

  sub_100037A24(a5, a6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v42 = v55;
LABEL_28:
}

uint64_t sub_1004270C8(uint64_t a1)
{
  return a1;
}

uint64_t sub_1004270F0@<X0>(void *a1@<X8>)
{
  return sub_100426800(a1);
}

unint64_t sub_100427108(char a1)
{
  unint64_t result = 0x657461446E616373;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6E6F697461636F6CLL;
      break;
    case 2:
      unint64_t result = 0x797469726F697270;
      break;
    case 3:
      unint64_t result = 0xD000000000000010;
      break;
    case 4:
      unint64_t result = 0xD000000000000012;
      break;
    case 5:
      unint64_t result = 0x656372756F73;
      break;
    case 6:
      unint64_t result = 0x7942737574617473;
      break;
    case 7:
    case 8:
      unint64_t result = 0xD000000000000015;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10042722C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_101644590);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_1004296D0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11[31] = 0;
  type metadata accessor for Date();
  sub_10042988C((unint64_t *)&unk_10163ACE0, (void (*)(uint64_t))&type metadata accessor for Date);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = type metadata accessor for BeaconPayloadFile.MetaData(0);
    v11[30] = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v11[29] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[28] = *(unsigned char *)(v3 + *(int *)(v9 + 28));
    v11[27] = 3;
    sub_1004298D4();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v11[26] = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    v11[25] = *(unsigned char *)(v3 + *(int *)(v9 + 36));
    unsigned char v11[24] = 5;
    sub_100429928();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v11[15] = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
    v11[14] = 7;
    KeyedEncodingContainer.encode(_:forKey:)();
    _OWORD v11[13] = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100427564@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v29 = a2;
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v30 = *(void *)(v3 - 8);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  id v33 = (char *)&v27 - v7;
  uint64_t v8 = sub_10000588C(&qword_101644570);
  uint64_t v31 = *(void *)(v8 - 8);
  uint64_t v32 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for BeaconPayloadFile.MetaData(0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1004296D0();
  unint64_t v34 = v10;
  uint64_t v14 = v35;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v14) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  long long v28 = (int *)v11;
  uint64_t v35 = v13;
  char v46 = 0;
  sub_10042988C(&qword_10163ACC0, (void (*)(uint64_t))&type metadata accessor for Date);
  uint64_t v15 = v32;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v16 = (uint64_t)v35;
  os_log_type_t v17 = v33;
  id v33 = *(char **)(v30 + 32);
  ((void (*)(char *, char *, uint64_t))v33)(v35, v17, v3);
  char v45 = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  id v18 = v6;
  unint64_t v19 = v28;
  ((void (*)(uint64_t, char *, uint64_t))v33)(v16 + v28[5], v18, v3);
  char v44 = 2;
  uint64_t v20 = v16;
  *(unsigned char *)(v16 + v19[6]) = KeyedDecodingContainer.decode(_:forKey:)() & 1;
  char v42 = 3;
  sub_100429724();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v21 = v31;
  *(unsigned char *)(v20 + v19[7]) = v43;
  char v41 = 4;
  uint64_t v22 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v23 = v20 + v19[8];
  *(void *)uint64_t v23 = v22;
  *(unsigned char *)(v23 + 8) = v24 & 1;
  char v39 = 5;
  sub_100429778();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(unsigned char *)(v20 + v19[9]) = v40;
  char v38 = 6;
  *(unsigned char *)(v20 + v19[10]) = KeyedDecodingContainer.decode(_:forKey:)();
  char v37 = 7;
  *(unsigned char *)(v20 + v19[11]) = KeyedDecodingContainer.decode(_:forKey:)();
  char v36 = 8;
  char v25 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v21 + 8))(v34, v15);
  *(unsigned char *)(v20 + v19[12]) = v25;
  sub_1004297CC(v20, v29);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  return sub_100429830(v20);
}

unint64_t sub_100427AE0()
{
  return sub_100427108(*v0);
}

uint64_t sub_100427AE8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100429EB4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100427B10(uint64_t a1)
{
  unint64_t v2 = sub_1004296D0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100427B4C(uint64_t a1)
{
  unint64_t v2 = sub_1004296D0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100427B88@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100427564(a1, a2);
}

uint64_t sub_100427BA0(void *a1)
{
  return sub_10042722C(a1);
}

uint64_t sub_100427BBC()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100427C1C()
{
  return RawRepresentable<>.encode(to:)();
}

unint64_t sub_100427C6C@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100429EA4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100427C98(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v26 - v9;
  uint64_t v11 = v1 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile____lazy_storage___metaData;
  uint64_t v12 = sub_10000588C((uint64_t *)&unk_10163EA90);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v11, 1, 1, v12);
  uint64_t v13 = v2 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile____lazy_storage___scanDate;
  uint64_t v14 = sub_10000588C((uint64_t *)&unk_10163AC90);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  uint64_t v15 = v2 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile_fileURL;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v2 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile_fileURL, a1, v4);
  uint64_t v16 = sub_10042948C();
  if (v17 >> 60 == 15)
  {
    type metadata accessor for BeaconPayloadFile(0);
    id v18 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v18(a1, v4);
    v18(v15, v4);
    sub_10001DAB4(v2 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile____lazy_storage___metaData, &qword_10163EAA8);
    sub_10001DAB4(v2 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile____lazy_storage___scanDate, &qword_10163AE40);
    swift_deallocPartialClassInstance();
    return 0;
  }
  else
  {
    uint64_t v19 = v16;
    unint64_t v20 = v17;
    uint64_t v21 = (uint64_t *)(v2 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile_hashedAdvertisement);
    uint64_t *v21 = v16;
    v21[1] = v17;
    sub_1000361E0(v16, v17);
    URL.deletingLastPathComponent()();
    URL.deletingLastPathComponent()();
    sub_100037A24(v19, v20);
    uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v22(a1, v4);
    v22((uint64_t)v8, v4);
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v2 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile_rootURL, v10, v4);
    uint64_t v23 = v2 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile_initializedWithMetaData;
    uint64_t v24 = type metadata accessor for BeaconPayloadFile.MetaData(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v23, 1, 1, v24);
  }
  return v2;
}

uint64_t sub_100427FE0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = sub_10000588C(&qword_10163EAA8);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = &v13[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v4);
  uint64_t v8 = &v13[-v7];
  uint64_t v9 = v1 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile____lazy_storage___metaData;
  swift_beginAccess();
  sub_10001D074(v9, (uint64_t)v8, &qword_10163EAA8);
  uint64_t v10 = sub_10000588C((uint64_t *)&unk_10163EA90);
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10) != 1) {
    return sub_10001D608((uint64_t)v8, a1, (uint64_t *)&unk_10163EA90);
  }
  sub_10001DAB4((uint64_t)v8, &qword_10163EAA8);
  sub_1004281B8(v1, a1);
  sub_10001D074(a1, (uint64_t)v6, (uint64_t *)&unk_10163EA90);
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v11 + 56))(v6, 0, 1, v10);
  swift_beginAccess();
  sub_100062604((uint64_t)v6, v9, &qword_10163EAA8);
  return swift_endAccess();
}

uint64_t sub_1004281B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_10163EA90);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = &v15[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for BeaconPayloadFile.MetaData(0);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = &v15[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001D074(a1 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile_initializedWithMetaData, (uint64_t)v6, (uint64_t *)&unk_10163EA90);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_10001DAB4((uint64_t)v6, (uint64_t *)&unk_10163EA90);
    uint64_t v12 = URL.extendedAttribute(name:)();
    unint64_t v14 = v13;
    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    PropertyListDecoder.init()();
    sub_10042988C(&qword_1016445A0, (void (*)(uint64_t))type metadata accessor for BeaconPayloadFile.MetaData);
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    sub_10001CFB8(v12, v14);
    swift_release();
  }
  else
  {
    sub_10042997C((uint64_t)v6, (uint64_t)v10);
    sub_10042997C((uint64_t)v10, a2);
  }
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(a2, 0, 1, v7);
}

uint64_t sub_100428440@<X0>(uint64_t a1@<X8>)
{
  uint64_t v24 = a1;
  uint64_t v2 = type metadata accessor for BeaconPayloadFile.MetaData(0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_10163EA90);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_10163AE40);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  unint64_t v14 = (char *)&v23 - v13;
  uint64_t v15 = v1 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile____lazy_storage___scanDate;
  swift_beginAccess();
  sub_10001D074(v15, (uint64_t)v14, &qword_10163AE40);
  uint64_t v16 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v14, 1, v16) != 1) {
    return sub_10001D608((uint64_t)v14, v24, (uint64_t *)&unk_10163AC90);
  }
  sub_10001DAB4((uint64_t)v14, &qword_10163AE40);
  sub_100427FE0((uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1, v2))
  {
    sub_10001DAB4((uint64_t)v8, (uint64_t *)&unk_10163EA90);
    uint64_t v18 = type metadata accessor for Date();
    uint64_t v19 = v24;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v24, 1, 1, v18);
  }
  else
  {
    sub_1004297CC((uint64_t)v8, (uint64_t)v5);
    sub_10001DAB4((uint64_t)v8, (uint64_t *)&unk_10163EA90);
    uint64_t v21 = type metadata accessor for Date();
    uint64_t v22 = *(void *)(v21 - 8);
    uint64_t v19 = v24;
    (*(void (**)(uint64_t, char *, uint64_t))(v22 + 16))(v24, v5, v21);
    sub_100429830((uint64_t)v5);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
  }
  sub_10001D074(v19, (uint64_t)v12, (uint64_t *)&unk_10163AC90);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v12, 0, 1, v16);
  swift_beginAccess();
  sub_100062604((uint64_t)v12, v15, &qword_10163AE40);
  return swift_endAccess();
}

uint64_t sub_1004287F4()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile_rootURL;
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
  v3(v1, v2);
  sub_10001CFB8(*(void *)(v0 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile_hashedAdvertisement), *(void *)(v0 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile_hashedAdvertisement + 8));
  v3(v0 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile_fileURL, v2);
  sub_10001DAB4(v0 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile_initializedWithMetaData, (uint64_t *)&unk_10163EA90);
  sub_10001DAB4(v0 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile____lazy_storage___metaData, &qword_10163EAA8);
  sub_10001DAB4(v0 + OBJC_IVAR____TtC12searchpartyd17BeaconPayloadFile____lazy_storage___scanDate, &qword_10163AE40);

  return swift_deallocClassInstance();
}

uint64_t sub_100428920()
{
  return type metadata accessor for BeaconPayloadFile(0);
}

uint64_t type metadata accessor for BeaconPayloadFile(uint64_t a1)
{
  return sub_1000F4EA4(a1, (uint64_t *)&unk_1016443B0);
}

void sub_100428948()
{
  type metadata accessor for URL();
  if (v0 <= 0x3F)
  {
    sub_100428AB4();
    if (v1 <= 0x3F)
    {
      sub_100278584(319, &qword_1016443C8, (uint64_t *)&unk_10163EA90);
      if (v2 <= 0x3F)
      {
        sub_100278584(319, (unint64_t *)&unk_1016443D0, (uint64_t *)&unk_10163AC90);
        if (v3 <= 0x3F) {
          swift_updateClassMetadata2();
        }
      }
    }
  }
}

void sub_100428AB4()
{
  if (!qword_1016443C0)
  {
    type metadata accessor for BeaconPayloadFile.MetaData(255);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1016443C0);
    }
  }
}

uint64_t type metadata accessor for BeaconPayloadFile.MetaData(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_101644518);
}

void *sub_100428B2C(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (void *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((void *)((char *)a1 + a3[5]), (void *)((char *)a2 + a3[5]), v7);
    uint64_t v9 = a3[7];
    *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
    *((unsigned char *)a1 + v9) = *((unsigned char *)a2 + v9);
    uint64_t v10 = a3[8];
    uint64_t v11 = a3[9];
    uint64_t v12 = (char *)a1 + v10;
    uint64_t v13 = (char *)a2 + v10;
    v12[8] = v13[8];
    *(void *)uint64_t v12 = *(void *)v13;
    *((unsigned char *)a1 + v11) = *((unsigned char *)a2 + v11);
    uint64_t v14 = a3[11];
    *((unsigned char *)a1 + a3[10]) = *((unsigned char *)a2 + a3[10]);
    *((unsigned char *)a1 + v14) = *((unsigned char *)a2 + v14);
    *((unsigned char *)a1 + a3[12]) = *((unsigned char *)a2 + a3[12]);
  }
  return a1;
}

uint64_t sub_100428C6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t))v7)((void *)(v4 - 8), a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);

  return v7(v5, v4);
}

uint64_t sub_100428D0C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[7];
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(unsigned char *)(a1 + v8) = *(unsigned char *)(a2 + v8);
  uint64_t v9 = a3[8];
  uint64_t v10 = a3[9];
  uint64_t v11 = a1 + v9;
  uint64_t v12 = a2 + v9;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  *(void *)uint64_t v11 = *(void *)v12;
  *(unsigned char *)(a1 + v10) = *(unsigned char *)(a2 + v10);
  uint64_t v13 = a3[11];
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  *(unsigned char *)(a1 + v13) = *(unsigned char *)(a2 + v13);
  *(unsigned char *)(a1 + a3[12]) = *(unsigned char *)(a2 + a3[12]);
  return a1;
}

uint64_t sub_100428DFC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(unsigned char *)(a1 + a3[7]) = *(unsigned char *)(a2 + a3[7]);
  uint64_t v8 = a3[8];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  char v11 = *(unsigned char *)(v10 + 8);
  *(void *)uint64_t v9 = *(void *)v10;
  *(unsigned char *)(v9 + 8) = v11;
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
  *(unsigned char *)(a1 + a3[12]) = *(unsigned char *)(a2 + a3[12]);
  return a1;
}

uint64_t sub_100428EF8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[7];
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(unsigned char *)(a1 + v8) = *(unsigned char *)(a2 + v8);
  uint64_t v9 = a3[8];
  uint64_t v10 = a3[9];
  uint64_t v11 = a1 + v9;
  uint64_t v12 = a2 + v9;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  *(void *)uint64_t v11 = *(void *)v12;
  *(unsigned char *)(a1 + v10) = *(unsigned char *)(a2 + v10);
  uint64_t v13 = a3[11];
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  *(unsigned char *)(a1 + v13) = *(unsigned char *)(a2 + v13);
  *(unsigned char *)(a1 + a3[12]) = *(unsigned char *)(a2 + a3[12]);
  return a1;
}

uint64_t sub_100428FE8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[7];
  *(unsigned char *)(a1 + a3[6]) = *(unsigned char *)(a2 + a3[6]);
  *(unsigned char *)(a1 + v8) = *(unsigned char *)(a2 + v8);
  uint64_t v9 = a3[8];
  uint64_t v10 = a3[9];
  uint64_t v11 = a1 + v9;
  uint64_t v12 = a2 + v9;
  *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
  *(void *)uint64_t v11 = *(void *)v12;
  *(unsigned char *)(a1 + v10) = *(unsigned char *)(a2 + v10);
  uint64_t v13 = a3[11];
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  *(unsigned char *)(a1 + v13) = *(unsigned char *)(a2 + v13);
  *(unsigned char *)(a1 + a3[12]) = *(unsigned char *)(a2 + a3[12]);
  return a1;
}

uint64_t sub_1004290D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1004290EC);
}

uint64_t sub_1004290EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
    if (v10 >= 2) {
      return ((v10 + 2147483646) & 0x7FFFFFFF) + 1;
    }
    else {
      return 0;
    }
  }
}

uint64_t sub_1004291BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1004291D0);
}

uint64_t sub_1004291D0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for Date();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 24)) = a2 + 1;
  }
  return result;
}

uint64_t sub_10042928C()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_10042935C(uint64_t a1, uint64_t a2)
{
  if ((static Date.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = (int *)type metadata accessor for BeaconPayloadFile.MetaData(0);
  if ((static Date.== infix(_:_:)() & 1) == 0
    || *(unsigned __int8 *)(a1 + v4[6]) != *(unsigned __int8 *)(a2 + v4[6])
    || *(unsigned __int8 *)(a1 + v4[7]) != *(unsigned __int8 *)(a2 + v4[7]))
  {
    return 0;
  }
  uint64_t v5 = v4[8];
  uint64_t v6 = (double *)(a1 + v5);
  char v7 = *(unsigned char *)(a1 + v5 + 8);
  uint64_t v8 = (double *)(a2 + v5);
  int v9 = *(unsigned __int8 *)(a2 + v5 + 8);
  if ((v7 & 1) == 0)
  {
    if (*v6 != *v8) {
      LOBYTE(v9) = 1;
    }
    if (v9) {
      return 0;
    }
LABEL_11:
    if (*(unsigned __int8 *)(a1 + v4[9]) != *(unsigned __int8 *)(a2 + v4[9])
      || *(unsigned __int8 *)(a1 + v4[10]) != *(unsigned __int8 *)(a2 + v4[10])
      || *(unsigned __int8 *)(a1 + v4[11]) != *(unsigned __int8 *)(a2 + v4[11]))
    {
      return 0;
    }
    uint64_t v10 = v4[12];
    int v11 = *(unsigned __int8 *)(a1 + v10);
    int v12 = *(unsigned __int8 *)(a2 + v10);
    if (v11 == 2)
    {
      if (v12 != 2) {
        return 0;
      }
    }
    else
    {
      BOOL v13 = (v11 & 1) == 0;
      if (v12 == 2 || ((v13 ^ v12) & 1) == 0) {
        return 0;
      }
    }
    return 1;
  }
  if (v9) {
    goto LABEL_11;
  }
  return 0;
}

uint64_t sub_10042948C()
{
  uint64_t v0 = type metadata accessor for URL();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  unint64_t v3 = (char *)v13 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  URL.deletingLastPathComponent()();
  uint64_t v4 = URL.lastPathComponent.getter();
  uint64_t v6 = v5;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v13[0] = v4;
  v13[1] = v6;
  sub_1000336D4();
  uint64_t v7 = Data.init<A>(hexString:)();
  if (v8 >> 60 == 15) {
    return 0;
  }
  uint64_t v9 = v7;
  unint64_t v10 = v8;
  sub_1000361E0(v7, v8);
  sub_100434DF4(v9, v10, v13);
  sub_100037A24(v9, v10);
  return v13[0];
}

unint64_t sub_1004296D0()
{
  unint64_t result = qword_101644578;
  if (!qword_101644578)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644578);
  }
  return result;
}

unint64_t sub_100429724()
{
  unint64_t result = qword_101644580;
  if (!qword_101644580)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644580);
  }
  return result;
}

unint64_t sub_100429778()
{
  unint64_t result = qword_101644588;
  if (!qword_101644588)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644588);
  }
  return result;
}

uint64_t sub_1004297CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BeaconPayloadFile.MetaData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100429830(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for BeaconPayloadFile.MetaData(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_10042988C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1004298D4()
{
  unint64_t result = qword_101644598;
  if (!qword_101644598)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644598);
  }
  return result;
}

unint64_t sub_100429928()
{
  unint64_t result = qword_10165C730;
  if (!qword_10165C730)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165C730);
  }
  return result;
}

uint64_t sub_10042997C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BeaconPayloadFile.MetaData(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unsigned char *storeEnumTagSinglePayload for BeaconPayloadFile.BeaconPayloadFileError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100429AACLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BeaconPayloadFile.BeaconPayloadFileError()
{
  return &type metadata for BeaconPayloadFile.BeaconPayloadFileError;
}

unsigned char *storeEnumTagSinglePayload for BeaconPayloadFile.MetaData.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *unint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100429BB0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BeaconPayloadFile.MetaData.CodingKeys()
{
  return &type metadata for BeaconPayloadFile.MetaData.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for BeaconPayloadFile.ObservationValue(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100429CB4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BeaconPayloadFile.ObservationValue()
{
  return &type metadata for BeaconPayloadFile.ObservationValue;
}

unint64_t sub_100429CF0()
{
  unint64_t result = qword_1016445A8;
  if (!qword_1016445A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016445A8);
  }
  return result;
}

unint64_t sub_100429D48()
{
  unint64_t result = qword_1016445B0;
  if (!qword_1016445B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016445B0);
  }
  return result;
}

unint64_t sub_100429DA0()
{
  unint64_t result = qword_1016445B8;
  if (!qword_1016445B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016445B8);
  }
  return result;
}

unint64_t sub_100429DF8()
{
  unint64_t result = qword_1016445C0;
  if (!qword_1016445C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016445C0);
  }
  return result;
}

unint64_t sub_100429E50()
{
  unint64_t result = qword_1016445C8;
  if (!qword_1016445C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016445C8);
  }
  return result;
}

unint64_t sub_100429EA4(unint64_t result)
{
  if (result >= 4) {
    return 4;
  }
  return result;
}

uint64_t sub_100429EB4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x657461446E616373 && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F697461636F6CLL && a2 == 0xEC00000065746144 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x797469726F697270 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001013FC770 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x80000001013EF030 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x656372756F73 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x7942737574617473 && a2 == 0xEA00000000006574 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001013FC790 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001013FC7B0)
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 8;
    }
    else {
      return 9;
    }
  }
}

unint64_t sub_10042A25C()
{
  unint64_t result = qword_1016445D0;
  if (!qword_1016445D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016445D0);
  }
  return result;
}

uint64_t CryptoAdvertisementKeys.dateInterval.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for DateInterval();
  unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

uint64_t CryptoAdvertisementKeys.publicKey.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CryptoAdvertisementKeys() + 20);
  uint64_t v2 = *(void *)v1;
  sub_1000361E0(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t type metadata accessor for CryptoAdvertisementKeys()
{
  uint64_t result = qword_101644668;
  if (!qword_101644668) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t CryptoAdvertisementKeys.privateKey.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CryptoAdvertisementKeys() + 24);
  uint64_t v2 = *(void *)v1;
  sub_100037A38(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t CryptoAdvertisementKeys.advertisement.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CryptoAdvertisementKeys() + 28);
  uint64_t v2 = *(void *)v1;
  sub_1000361E0(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t sub_10042A430(char *a1, char *a2)
{
  return sub_10071C448(*a1, *a2);
}

Swift::Int sub_10042A43C()
{
  return Hasher._finalize()();
}

uint64_t sub_10042A4E4()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_10042A574()
{
  return Hasher._finalize()();
}

unint64_t sub_10042A618@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10042C0D4(*a1);
  *a2 = result;
  return result;
}

void sub_10042A648(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xE100000000000000;
  uint64_t v3 = 68;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE200000000000000;
      uint64_t v3 = 21840;
      goto LABEL_3;
    case 2:
      *a1 = 21072;
      a1[1] = 0xE200000000000000;
      break;
    case 3:
      *a1 = 65;
      a1[1] = 0xE100000000000000;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t sub_10042A6B0()
{
  uint64_t result = 68;
  switch(*v0)
  {
    case 1:
      uint64_t result = 21840;
      break;
    case 2:
      uint64_t result = 21072;
      break;
    case 3:
      uint64_t result = 65;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_10042A70C@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10042C0D4(a1);
  *a2 = result;
  return result;
}

uint64_t sub_10042A734(uint64_t a1)
{
  unint64_t v2 = sub_10042AB30();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10042A770(uint64_t a1)
{
  unint64_t v2 = sub_10042AB30();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t CryptoAdvertisementKeys.encode(to:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_1016445D8);
  v22[0] = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v10 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_10042AB30();
  uint64_t v11 = v2;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_10000588C(&qword_1016445E8);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_101347BA0;
  DateInterval.start.getter();
  Date.timeIntervalSinceReferenceDate.getter();
  uint64_t v14 = v13;
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  *(void *)(v12 + 32) = v14;
  DateInterval.duration.getter();
  *(void *)(v12 + 40) = v15;
  *(void *)&long long v23 = v12;
  char v24 = 0;
  sub_10000588C(&qword_1016445F0);
  sub_10042B1C4(&qword_1016445F8);
  uint64_t v16 = v22[1];
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  swift_bridgeObjectRelease();
  if (v16) {
    return (*(uint64_t (**)(char *, uint64_t))(v22[0] + 8))(v10, v8);
  }
  uint64_t v18 = v22[0];
  uint64_t v19 = (int *)type metadata accessor for CryptoAdvertisementKeys();
  long long v23 = *(_OWORD *)(v11 + v19[5]);
  char v24 = 1;
  sub_100037BB4();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  unint64_t v20 = (void *)(v11 + v19[6]);
  unint64_t v21 = v20[1];
  if (v21 >> 60 != 15)
  {
    *(void *)&long long v23 = *v20;
    *((void *)&v23 + 1) = v21;
    char v24 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  long long v23 = *(_OWORD *)(v11 + v19[7]);
  char v24 = 3;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v10, v8);
}

unint64_t sub_10042AB30()
{
  unint64_t result = qword_1016445E0;
  if (!qword_1016445E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016445E0);
  }
  return result;
}

uint64_t CryptoAdvertisementKeys.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v42 = a2;
  uint64_t v3 = type metadata accessor for Date();
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_101644600);
  uint64_t v43 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (int *)type metadata accessor for CryptoAdvertisementKeys();
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_10042AB30();
  uint64_t v12 = v44;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v12) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  char v44 = v5;
  char v41 = a1;
  uint64_t v13 = v43;
  sub_10000588C(&qword_1016445F0);
  char v46 = 0;
  sub_10042B1C4(&qword_101644608);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v14 = v6;
  uint64_t v15 = v45;
  char v46 = 1;
  sub_100037AA0();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v39 = v15;
  unint64_t v16 = *((void *)&v45 + 1);
  uint64_t v40 = v45;
  char v46 = 2;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v37 = v45;
  unint64_t v38 = v16;
  unint64_t v17 = *((void *)&v45 + 1);
  char v46 = 3;
  uint64_t result = KeyedDecodingContainer.decode<A>(_:forKey:)();
  unint64_t v19 = v17;
  uint64_t v20 = v37;
  uint64_t v21 = v39;
  if (!*(void *)(v39 + 16))
  {
    __break(1u);
    goto LABEL_10;
  }
  long long v35 = v45;
  unint64_t v36 = v19;
  uint64_t result = Date.init(timeIntervalSinceReferenceDate:)();
  if (*(void *)(v21 + 16) < 2uLL)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  unint64_t v34 = v8;
  swift_bridgeObjectRelease();
  DateInterval.init(start:duration:)();
  unint64_t v22 = v36;
  uint64_t v23 = v40;
  char v44 = v11;
  if (v36 >> 60 == 15)
  {
    uint64_t v24 = 0;
    unint64_t v25 = 0xF000000000000000;
    uint64_t v26 = v20;
  }
  else
  {
    uint64_t v26 = v20;
    sub_100037A38(v20, v36);
    uint64_t v24 = sub_10043A040(v20, v22);
  }
  uint64_t v27 = (uint64_t)v44;
  long long v28 = (uint64_t *)&v44[v9[6]];
  *long long v28 = v24;
  v28[1] = v25;
  unint64_t v29 = v38;
  sub_1000361E0(v23, v38);
  uint64_t v30 = sub_10043A38C(v23, v29);
  uint64_t v31 = (uint64_t *)(v27 + v9[5]);
  *uint64_t v31 = v30;
  v31[1] = v32;
  sub_100434E0C(v35, *((unint64_t *)&v35 + 1), (uint64_t *)&v45);
  uint64_t v33 = (uint64_t)v41;
  (*(void (**)(char *, uint64_t))(v13 + 8))(v34, v14);
  sub_100037A24(v26, v36);
  sub_10001CFB8(v40, v38);
  *(_OWORD *)(v27 + v9[7]) = v45;
  sub_10042B544(v27, v42);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v33);
  return sub_10042B5A8(v27);
}

uint64_t sub_10042B1C4(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000592C(&qword_1016445F0);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10042B228@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return CryptoAdvertisementKeys.init(from:)(a1, a2);
}

uint64_t sub_10042B240(void *a1)
{
  return CryptoAdvertisementKeys.encode(to:)(a1);
}

unint64_t CryptoAdvertisementKeys.description.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for HashAlgorithm();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v34 = 0;
  unint64_t v35 = 0xE000000000000000;
  _StringGuts.grow(_:)(35);
  swift_bridgeObjectRelease();
  unint64_t v34 = 0xD000000000000019;
  unint64_t v35 = 0x80000001013FC7D0;
  uint64_t v6 = type metadata accessor for CryptoAdvertisementKeys();
  uint64_t v7 = (uint64_t *)(v0 + *(int *)(v6 + 28));
  unint64_t v8 = v7[1];
  uint64_t v32 = *v7;
  unint64_t v33 = v8;
  sub_10025C42C();
  v9._countAndFlagsBits = RawRepresentable<>.hexString.getter();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 2108704;
  v10._object = (void *)0xE300000000000000;
  String.append(_:)(v10);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for HashAlgorithm.sha256(_:), v2);
  uint64_t v11 = Data.hash(algorithm:)();
  unint64_t v13 = v12;
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  uint64_t v32 = v11;
  unint64_t v33 = v13;
  sub_1001D780C();
  uint64_t v14 = RawRepresentable<>.hexString.getter();
  unint64_t v16 = v15;
  sub_10001CFB8(v11, v13);
  v17._countAndFlagsBits = v14;
  v17._object = v16;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 2108704;
  v18._object = (void *)0xE300000000000000;
  String.append(_:)(v18);
  unint64_t v20 = v34;
  unint64_t v19 = v35;
  unint64_t v34 = 0;
  unint64_t v35 = 0xE000000000000000;
  _StringGuts.grow(_:)(18);
  type metadata accessor for DateInterval();
  sub_10042B604();
  uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
  unint64_t v23 = v22;
  swift_bridgeObjectRelease();
  unint64_t v34 = v21;
  unint64_t v35 = v23;
  v24._countAndFlagsBits = 0x746176697270202CLL;
  v24._object = (void *)0xEE00203A79654B65;
  String.append(_:)(v24);
  if (*(void *)(v1 + *(int *)(v6 + 24) + 8) >> 60 == 15) {
    uint64_t v25 = 0x65736C6166;
  }
  else {
    uint64_t v25 = 1702195828;
  }
  if (*(void *)(v1 + *(int *)(v6 + 24) + 8) >> 60 == 15) {
    unint64_t v26 = 0xE500000000000000;
  }
  else {
    unint64_t v26 = 0xE400000000000000;
  }
  unint64_t v27 = v26;
  String.append(_:)(*(Swift::String *)&v25);
  swift_bridgeObjectRelease();
  uint64_t v28 = v34;
  unint64_t v29 = (void *)v35;
  unint64_t v34 = v20;
  unint64_t v35 = v19;
  swift_bridgeObjectRetain();
  v30._countAndFlagsBits = v28;
  v30._object = v29;
  String.append(_:)(v30);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v34;
}

uint64_t sub_10042B544(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CryptoAdvertisementKeys();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10042B5A8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CryptoAdvertisementKeys();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_10042B604()
{
  unint64_t result = qword_10163FF58;
  if (!qword_10163FF58)
  {
    type metadata accessor for DateInterval();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10163FF58);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for CryptoAdvertisementKeys(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for DateInterval();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    Swift::String v9 = (uint64_t *)((char *)a1 + v8);
    Swift::String v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = *v10;
    unint64_t v12 = v10[1];
    sub_1000361E0(*v10, v12);
    *Swift::String v9 = v11;
    v9[1] = v12;
    uint64_t v13 = a3[6];
    uint64_t v14 = (char *)a1 + v13;
    uint64_t v15 = (char *)a2 + v13;
    unint64_t v16 = *((void *)v15 + 1);
    if (v16 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
    }
    else
    {
      uint64_t v18 = *(void *)v15;
      sub_1000361E0(*(void *)v15, *((void *)v15 + 1));
      *(void *)uint64_t v14 = v18;
      *((void *)v14 + 1) = v16;
    }
    uint64_t v19 = a3[7];
    unint64_t v20 = (uint64_t *)((char *)a1 + v19);
    uint64_t v21 = (uint64_t *)((char *)a2 + v19);
    uint64_t v22 = *v21;
    unint64_t v23 = v21[1];
    sub_1000361E0(*v21, v23);
    *unint64_t v20 = v22;
    v20[1] = v23;
  }
  return a1;
}

uint64_t destroy for CryptoAdvertisementKeys(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  sub_10001CFB8(*(void *)(a1 + a2[5]), *(void *)(a1 + a2[5] + 8));
  int v5 = (uint64_t *)(a1 + a2[6]);
  unint64_t v6 = v5[1];
  if (v6 >> 60 != 15) {
    sub_10001CFB8(*v5, v6);
  }
  uint64_t v7 = (uint64_t *)(a1 + a2[7]);
  uint64_t v8 = *v7;
  unint64_t v9 = v7[1];

  return sub_10001CFB8(v8, v9);
}

uint64_t initializeWithCopy for CryptoAdvertisementKeys(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (uint64_t *)(a1 + v7);
  unint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  unint64_t v11 = v9[1];
  sub_1000361E0(*v9, v11);
  *uint64_t v8 = v10;
  v8[1] = v11;
  uint64_t v12 = a3[6];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = (uint64_t *)(a2 + v12);
  unint64_t v15 = v14[1];
  if (v15 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  }
  else
  {
    uint64_t v16 = *v14;
    sub_1000361E0(*v14, v14[1]);
    *(void *)uint64_t v13 = v16;
    *(void *)(v13 + 8) = v15;
  }
  uint64_t v17 = a3[7];
  uint64_t v18 = (uint64_t *)(a1 + v17);
  uint64_t v19 = (uint64_t *)(a2 + v17);
  uint64_t v20 = *v19;
  unint64_t v21 = v19[1];
  sub_1000361E0(*v19, v21);
  *uint64_t v18 = v20;
  v18[1] = v21;
  return a1;
}

uint64_t assignWithCopy for CryptoAdvertisementKeys(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (uint64_t *)(a1 + v7);
  unint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v10 = *v9;
  unint64_t v11 = v9[1];
  sub_1000361E0(*v9, v11);
  uint64_t v12 = *v8;
  unint64_t v13 = v8[1];
  *uint64_t v8 = v10;
  v8[1] = v11;
  sub_10001CFB8(v12, v13);
  uint64_t v14 = a3[6];
  unint64_t v15 = (uint64_t *)(a1 + v14);
  uint64_t v16 = (uint64_t *)(a2 + v14);
  unint64_t v17 = *(void *)(a2 + v14 + 8);
  if (*(void *)(a1 + v14 + 8) >> 60 != 15)
  {
    if (v17 >> 60 != 15)
    {
      uint64_t v19 = *v16;
      sub_1000361E0(v19, v17);
      uint64_t v20 = *v15;
      unint64_t v21 = v15[1];
      *unint64_t v15 = v19;
      v15[1] = v17;
      sub_10001CFB8(v20, v21);
      goto LABEL_8;
    }
    sub_10042BA84((uint64_t)v15);
    goto LABEL_6;
  }
  if (v17 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)unint64_t v15 = *(_OWORD *)v16;
    goto LABEL_8;
  }
  uint64_t v18 = *v16;
  sub_1000361E0(v18, v17);
  *unint64_t v15 = v18;
  v15[1] = v17;
LABEL_8:
  uint64_t v22 = a3[7];
  unint64_t v23 = (uint64_t *)(a1 + v22);
  Swift::String v24 = (uint64_t *)(a2 + v22);
  uint64_t v25 = *v24;
  unint64_t v26 = v24[1];
  sub_1000361E0(*v24, v26);
  uint64_t v27 = *v23;
  unint64_t v28 = v23[1];
  *unint64_t v23 = v25;
  v23[1] = v26;
  sub_10001CFB8(v27, v28);
  return a1;
}

uint64_t sub_10042BA84(uint64_t a1)
{
  return a1;
}

uint64_t initializeWithTake for CryptoAdvertisementKeys(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  return a1;
}

uint64_t assignWithTake for CryptoAdvertisementKeys(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = *(void *)(a1 + v7);
  unint64_t v9 = *(void *)(a1 + v7 + 8);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  sub_10001CFB8(v8, v9);
  uint64_t v10 = a3[6];
  unint64_t v11 = (uint64_t *)(a1 + v10);
  uint64_t v12 = (uint64_t *)(a2 + v10);
  unint64_t v13 = *(void *)(a1 + v10 + 8);
  if (v13 >> 60 != 15)
  {
    unint64_t v14 = v12[1];
    if (v14 >> 60 != 15)
    {
      uint64_t v15 = *v11;
      *unint64_t v11 = *v12;
      v11[1] = v14;
      sub_10001CFB8(v15, v13);
      goto LABEL_6;
    }
    sub_10042BA84((uint64_t)v11);
  }
  *(_OWORD *)unint64_t v11 = *(_OWORD *)v12;
LABEL_6:
  uint64_t v16 = a3[7];
  uint64_t v17 = *(void *)(a1 + v16);
  unint64_t v18 = *(void *)(a1 + v16 + 8);
  *(_OWORD *)(a1 + v16) = *(_OWORD *)(a2 + v16);
  sub_10001CFB8(v17, v18);
  return a1;
}

uint64_t getEnumTagSinglePayload for CryptoAdvertisementKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10042BC74);
}

uint64_t sub_10042BC74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DateInterval();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8) >> 60;
    if (((4 * v10) & 0xC) != 0) {
      return 16 - ((4 * v10) & 0xC | (v10 >> 2));
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for CryptoAdvertisementKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10042BD5C);
}

uint64_t sub_10042BD5C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for DateInterval();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    unint64_t v11 = (void *)(a1 + *(int *)(a4 + 20));
    *unint64_t v11 = 0;
    v11[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  return result;
}

uint64_t sub_10042BE28()
{
  uint64_t result = type metadata accessor for DateInterval();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for CryptoAdvertisementKeys.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10042BF94);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CryptoAdvertisementKeys.CodingKeys()
{
  return &type metadata for CryptoAdvertisementKeys.CodingKeys;
}

unint64_t sub_10042BFD0()
{
  unint64_t result = qword_1016446A8;
  if (!qword_1016446A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016446A8);
  }
  return result;
}

unint64_t sub_10042C028()
{
  unint64_t result = qword_1016446B0;
  if (!qword_1016446B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016446B0);
  }
  return result;
}

unint64_t sub_10042C080()
{
  unint64_t result = qword_1016446B8;
  if (!qword_1016446B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016446B8);
  }
  return result;
}

unint64_t sub_10042C0D4(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1015A14D8, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

uint64_t sub_10042C120(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10000588C(&qword_101644838);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000588C((uint64_t *)&unk_101638CE0);
  uint64_t v8 = swift_allocObject();
  *(_DWORD *)(v8 + 16) = 0;
  *(void *)(v1 + 16) = v8;
  *(unsigned char *)(v1 + 24) = 0;
  sub_10000588C(&qword_101644840);
  swift_allocObject();
  *(void *)(v1 + 32) = PassthroughSubject.init()();
  *(void *)(v1 + 48) = &_swiftEmptySetSingleton;
  uint64_t v9 = swift_allocObject();
  *(_DWORD *)(v9 + 16) = 0;
  *(void *)(v1 + 56) = v9;
  *(unsigned char *)(v1 + 64) = 1;
  *(void *)(v1 + 40) = a1;
  uint64_t v10 = *(void *)(v1 + 16);
  swift_retain();
  swift_retain();
  v14[1] = AnyCurrentValuePublisher.publisher.getter();
  sub_10000588C(&qword_10163FE78);
  sub_100062734(&qword_10163FE80, &qword_10163FE78);
  Publisher.filter(_:)();
  swift_release();
  uint64_t v11 = swift_allocObject();
  swift_weakInit();
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = v11;
  *(void *)(v12 + 24) = v10;
  sub_100062734(&qword_101644848, &qword_101644838);
  swift_retain();
  Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  swift_beginAccess();
  AnyCancellable.store(in:)();
  swift_endAccess();
  swift_release();
  swift_release();
  swift_release();
  return v2;
}

uint64_t sub_10042C3F8()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    static os_log_type_t.default.getter();
    if (qword_101637268 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v1 = swift_allocObject();
    *(_OWORD *)(v1 + 16) = xmmword_101342130;
    *(void *)(v1 + 56) = &type metadata for Bool;
    *(void *)(v1 + 64) = &protocol witness table for Bool;
    *(unsigned char *)(v1 + 32) = v2;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    PassthroughSubject.send(_:)();
    return swift_release();
  }
  return result;
}

uint64_t sub_10042C55C@<X0>(unsigned char *a1@<X8>)
{
  static os_log_type_t.default.getter();
  if (qword_101637268 != -1) {
    swift_once();
  }
  uint64_t result = os_log(_:dso:log:_:_:)();
  *a1 = 1;
  return result;
}

uint64_t sub_10042C5FC(uint64_t a1)
{
  *(unsigned char *)(a1 + 24) = 1;
  static os_log_type_t.default.getter();
  if (qword_101637268 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  static os_log_type_t.default.getter();
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 16) = xmmword_101342130;
  *(void *)(v1 + 56) = &type metadata for Bool;
  *(void *)(v1 + 64) = &protocol witness table for Bool;
  *(unsigned char *)(v1 + 32) = 1;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  return PassthroughSubject.send(_:)();
}

uint64_t sub_10042C738@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  static os_log_type_t.default.getter();
  if (qword_101637268 != -1) {
    swift_once();
  }
  uint64_t result = os_log(_:dso:log:_:_:)();
  *(unsigned char *)(a1 + 24) = 0;
  *a2 = 1;
  return result;
}

uint64_t sub_10042C7E0()
{
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CloudKitUpdateEligibility()
{
  return self;
}

uint64_t sub_10042C85C()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10042C894()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10042C8D4()
{
  return sub_10042C3F8();
}

uint64_t sub_10042C8DC@<X0>(unsigned char *a1@<X8>)
{
  return sub_10042C55C(a1);
}

uint64_t sub_10042C8F8()
{
  uint64_t v0 = type metadata accessor for URL();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (uint64_t)&v28 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v2);
  uint64_t v7 = (char *)&v28 - v6;
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v28 - v8;
  id v10 = [self defaultManager];
  type metadata accessor for BeaconStore(0);
  sub_100A9DB34(v4);
  uint64_t v11 = 1;
  URL.appendingPathComponent(_:isDirectory:)();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v1 + 8);
  v12(v4, v0);
  URL.appendingPathComponent(_:)();
  v12((uint64_t)v7, v0);
  URL.path.getter();
  v12((uint64_t)v9, v0);
  NSString v13 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  LOBYTE(v4) = [v10 fileExistsAtPath:v13];

  if ((v4 & 1) == 0)
  {
    if (qword_101636F68 != -1) {
      swift_once();
    }
    unint64_t v14 = (void *)qword_10170EA30;
    sub_100A9DB34((uint64_t)v7);
    URL.appendingPathComponent(_:isDirectory:)();
    v12((uint64_t)v7, v0);
    v15._countAndFlagsBits = 0x65746176697250;
    v15._object = (void *)0xE700000000000000;
    URL.appendPathComponent(_:)(v15);
    id v16 = [v14 ownerName];
    uint64_t v17 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v19 = v18;

    v20._countAndFlagsBits = v17;
    v20._object = v19;
    URL.appendPathComponent(_:)(v20);
    swift_bridgeObjectRelease();
    id v21 = [v14 zoneName];
    uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    Swift::String v24 = v23;

    v28._countAndFlagsBits = v22;
    v28._object = v24;
    v25._countAndFlagsBits = 0x6E656B6F742ELL;
    v25._object = (void *)0xE600000000000000;
    String.append(_:)(v25);
    URL.appendPathComponent(_:)(v28);
    swift_bridgeObjectRelease();
    URL.path.getter();
    v12((uint64_t)v9, v0);
    NSString v26 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    uint64_t v11 = (uint64_t)[v10 fileExistsAtPath:v26];
  }
  return v11;
}

uint64_t sub_10042CCB8()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Date();
    if (v2 <= 0x3F) {
      return swift_initClassMetadata2();
    }
  }
  return result;
}

void sub_10042CDF8(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001) != 0)
  {
    swift_bridgeObjectRetain();
    __CocoaSet.makeIterator()();
    sub_10001D4B0(0, qword_10166CFD0);
    sub_100434514();
    Set.Iterator.init(_cocoa:)();
    uint64_t v1 = v18;
    uint64_t v17 = v19;
    uint64_t v2 = v20;
    uint64_t v3 = v21;
    unint64_t v4 = v22;
  }
  else
  {
    uint64_t v5 = -1 << *(unsigned char *)(a1 + 32);
    uint64_t v17 = a1 + 56;
    uint64_t v2 = ~v5;
    uint64_t v6 = -v5;
    if (v6 < 64) {
      uint64_t v7 = ~(-1 << v6);
    }
    else {
      uint64_t v7 = -1;
    }
    unint64_t v4 = v7 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v3 = 0;
  }
  uint64_t v16 = v2;
  int64_t v8 = (unint64_t)(v2 + 64) >> 6;
  if (v1 < 0) {
    goto LABEL_10;
  }
LABEL_8:
  if (v4)
  {
    uint64_t v9 = (v4 - 1) & v4;
    unint64_t v10 = __clz(__rbit64(v4)) | (v3 << 6);
    uint64_t v11 = v3;
    goto LABEL_29;
  }
  int64_t v13 = v3 + 1;
  if (!__OFADD__(v3, 1))
  {
    if (v13 < v8)
    {
      unint64_t v14 = *(void *)(v17 + 8 * v13);
      uint64_t v11 = v3 + 1;
      if (v14) {
        goto LABEL_28;
      }
      uint64_t v11 = v3 + 2;
      if (v3 + 2 >= v8) {
        goto LABEL_33;
      }
      unint64_t v14 = *(void *)(v17 + 8 * v11);
      if (v14) {
        goto LABEL_28;
      }
      uint64_t v11 = v3 + 3;
      if (v3 + 3 >= v8) {
        goto LABEL_33;
      }
      unint64_t v14 = *(void *)(v17 + 8 * v11);
      if (v14) {
        goto LABEL_28;
      }
      uint64_t v11 = v3 + 4;
      if (v3 + 4 >= v8) {
        goto LABEL_33;
      }
      unint64_t v14 = *(void *)(v17 + 8 * v11);
      if (v14)
      {
LABEL_28:
        uint64_t v9 = (v14 - 1) & v14;
        unint64_t v10 = __clz(__rbit64(v14)) + (v11 << 6);
LABEL_29:
        id v12 = *(id *)(*(void *)(v1 + 48) + 8 * v10);
        if (v12)
        {
          do
          {
            if (objc_msgSend(v12, "isActive", v16)) {
              break;
            }

            uint64_t v3 = v11;
            unint64_t v4 = v9;
            if ((v1 & 0x8000000000000000) == 0) {
              goto LABEL_8;
            }
LABEL_10:
            if (!__CocoaSet.Iterator.next()()) {
              break;
            }
            sub_10001D4B0(0, qword_10166CFD0);
            swift_unknownObjectRetain();
            swift_dynamicCast();
            id v12 = v23;
            swift_unknownObjectRelease();
            uint64_t v11 = v3;
            uint64_t v9 = v4;
          }
          while (v23);
        }
        goto LABEL_33;
      }
      uint64_t v11 = v3 + 5;
      if (v3 + 5 < v8)
      {
        unint64_t v14 = *(void *)(v17 + 8 * v11);
        if (!v14)
        {
          uint64_t v15 = v3 + 6;
          while (v8 != v15)
          {
            unint64_t v14 = *(void *)(v17 + 8 * v15++);
            if (v14)
            {
              uint64_t v11 = v15 - 1;
              goto LABEL_28;
            }
          }
          goto LABEL_33;
        }
        goto LABEL_28;
      }
    }
LABEL_33:
    sub_100132C20();
    return;
  }
  __break(1u);
}

uint64_t sub_10042D0B8(uint64_t a1)
{
  if (*(void *)(a1 + 16))
  {
    sub_10000588C(&qword_1016449B0);
    uint64_t v2 = (void *)static _SetStorage.allocate(capacity:)();
  }
  else
  {
    uint64_t v2 = &_swiftEmptySetSingleton;
  }
  uint64_t v27 = a1 + 56;
  uint64_t v3 = -1 << *(unsigned char *)(a1 + 32);
  if (-v3 < 64) {
    uint64_t v4 = ~(-1 << -(char)v3);
  }
  else {
    uint64_t v4 = -1;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 56);
  int64_t v26 = (unint64_t)(63 - v3) >> 6;
  uint64_t v6 = (char *)(v2 + 7);
  swift_bridgeObjectRetain();
  uint64_t result = swift_retain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      uint64_t v10 = (v5 - 1) & v5;
      unint64_t v11 = __clz(__rbit64(v5)) | (v8 << 6);
      int64_t v12 = v8;
      goto LABEL_28;
    }
    int64_t v13 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
    if (v13 >= v26) {
      goto LABEL_39;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v13);
    int64_t v12 = v8 + 1;
    if (!v14)
    {
      int64_t v12 = v8 + 2;
      if (v8 + 2 >= v26) {
        goto LABEL_39;
      }
      unint64_t v14 = *(void *)(v27 + 8 * v12);
      if (!v14)
      {
        int64_t v12 = v8 + 3;
        if (v8 + 3 >= v26) {
          goto LABEL_39;
        }
        unint64_t v14 = *(void *)(v27 + 8 * v12);
        if (!v14)
        {
          int64_t v12 = v8 + 4;
          if (v8 + 4 >= v26) {
            goto LABEL_39;
          }
          unint64_t v14 = *(void *)(v27 + 8 * v12);
          if (!v14) {
            break;
          }
        }
      }
    }
LABEL_27:
    uint64_t v10 = (v14 - 1) & v14;
    unint64_t v11 = __clz(__rbit64(v14)) + (v12 << 6);
LABEL_28:
    sub_100173F4C(*(void *)(a1 + 48) + 40 * v11, (uint64_t)v28);
    v16.Class isa = AnyHashable._bridgeToObjectiveC()().isa;
    sub_1004268DC((uint64_t)v28);
    self;
    uint64_t v17 = swift_dynamicCastObjCClass();
    if (!v17)
    {
      swift_release_n();

      sub_100132C20();
      return 0;
    }
    uint64_t v18 = v17;
    uint64_t result = NSObject._rawHashValue(seed:)(v2[5]);
    uint64_t v19 = -1 << *((unsigned char *)v2 + 32);
    unint64_t v20 = result & ~v19;
    unint64_t v21 = v20 >> 6;
    if (((-1 << v20) & ~*(void *)&v6[8 * (v20 >> 6)]) != 0)
    {
      unint64_t v9 = __clz(__rbit64((-1 << v20) & ~*(void *)&v6[8 * (v20 >> 6)])) | v20 & 0x7FFFFFFFFFFFFFC0;
    }
    else
    {
      char v22 = 0;
      unint64_t v23 = (unint64_t)(63 - v19) >> 6;
      do
      {
        if (++v21 == v23 && (v22 & 1) != 0)
        {
          __break(1u);
          goto LABEL_41;
        }
        BOOL v24 = v21 == v23;
        if (v21 == v23) {
          unint64_t v21 = 0;
        }
        v22 |= v24;
        uint64_t v25 = *(void *)&v6[8 * v21];
      }
      while (v25 == -1);
      unint64_t v9 = __clz(__rbit64(~v25)) + (v21 << 6);
    }
    *(void *)&v6[(v9 >> 3) & 0x1FFFFFFFFFFFFFF8] |= 1 << v9;
    *(void *)(v2[6] + 8 * v9) = v18;
    ++v2[2];
    int64_t v8 = v12;
    unint64_t v5 = v10;
  }
  int64_t v15 = v8 + 5;
  if (v8 + 5 >= v26)
  {
LABEL_39:
    swift_release();
    sub_100132C20();
    return (uint64_t)v2;
  }
  unint64_t v14 = *(void *)(v27 + 8 * v15);
  if (v14)
  {
    int64_t v12 = v8 + 5;
    goto LABEL_27;
  }
  while (1)
  {
    int64_t v12 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v12 >= v26) {
      goto LABEL_39;
    }
    unint64_t v14 = *(void *)(v27 + 8 * v12);
    ++v15;
    if (v14) {
      goto LABEL_27;
    }
  }
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_10042D3F8()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v0);
  uint64_t v1 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v1 - 8);
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  unint64_t v5 = (char *)v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v2);
  static DispatchQoS.unspecified.getter();
  v7[1] = _swiftEmptyArrayStorage;
  sub_100434404((unint64_t *)&qword_101638CC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000588C((uint64_t *)&unk_1016376F0);
  sub_100062734((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t result = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  qword_101644850 = result;
  return result;
}

uint64_t sub_10042D654(uint64_t a1, unint64_t a2)
{
  id v4 = objc_allocWithZone((Class)IDSAccountController);
  swift_bridgeObjectRetain();
  NSString v5 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v6 = [v4 initWithService:v5];

  if (!v6)
  {
    if (qword_1016373D8 != -1) {
      swift_once();
    }
    uint64_t v20 = type metadata accessor for Logger();
    sub_100010324(v20, (uint64_t)qword_10170F168);
    swift_bridgeObjectRetain_n();
    unint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      unint64_t v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v25 = swift_slowAlloc();
      *(_DWORD *)unint64_t v23 = 136315138;
      swift_bridgeObjectRetain();
      sub_1008FA0F0(a1, a2, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Unable to create IDSAccountController for service: %s", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    return 0;
  }
  id v7 = [v6 accounts];
  if (!v7
    || (int64_t v8 = v7,
        uint64_t v9 = static Set._unconditionallyBridgeFromObjectiveC(_:)(),
        v8,
        uint64_t v10 = sub_10042D0B8(v9),
        swift_bridgeObjectRelease(),
        !v10))
  {
    if (qword_1016373D8 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100010324(v13, (uint64_t)qword_10170F168);
    id v14 = v6;
    int64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 138412290;
      uint64_t v25 = (uint64_t)v14;
      id v19 = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v18 = v6;

      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Unable to get accounts from: %@", v17, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
    }
    return 0;
  }
  sub_10042CDF8(v10);
  uint64_t v12 = v11;
  swift_bridgeObjectRelease();

  return v12;
}

Swift::Int sub_10042DA30()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(~v1);
  return Hasher._finalize()();
}

void sub_10042DA78()
{
  Hasher._combine(_:)(~*v0);
}

Swift::Int sub_10042DAA8()
{
  int v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(~v1);
  return Hasher._finalize()();
}

_DWORD *sub_10042DAEC@<X0>(_DWORD *result@<X0>, char *a2@<X8>)
{
  if (*result > 0xFFFFFFFC) {
    char v2 = ~*result;
  }
  else {
    char v2 = 3;
  }
  *a2 = v2;
  return result;
}

void sub_10042DB04(int *a1@<X8>)
{
  *a1 = ~*v1;
}

void sub_10042DB14(void *a1@<X8>)
{
  *a1 = &off_1015A1558;
}

uint64_t sub_10042DB24()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_10042DB84()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_10042DBD8()
{
  id v1 = [*(id *)(v0 + 56) destination];
  if (v1)
  {
    char v2 = v1;
    unint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    NSString v5 = v4;
  }
  else
  {
    NSString v5 = (void *)0x80000001013FCB60;
    unint64_t v3 = 0xD000000000000011;
  }
  type metadata accessor for MessagingSession();
  swift_getWitnessTable();
  v6._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 32;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  v8._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 8250;
  v9._object = (void *)0xE200000000000000;
  String.append(_:)(v9);
  v10._countAndFlagsBits = v3;
  v10._object = v5;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 62;
  v11._object = (void *)0xE100000000000000;
  String.append(_:)(v11);
  return 60;
}

uint64_t sub_10042DD68(void *a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  uint64_t v10 = swift_allocObject();
  sub_10042DDE8(a1, a2, a3, a4, a5);
  return v10;
}

void *sub_10042DDE8(void *a1, uint64_t a2, uint64_t a3, double a4, double a5)
{
  Swift::String v6 = v5;
  uint64_t v84 = a3;
  uint64_t v110 = a2;
  id v98 = a1;
  Swift::String v9 = (void *)*v5;
  uint64_t v10 = type metadata accessor for Date();
  uint64_t v105 = *(void *)(v10 - 8);
  uint64_t v106 = v10;
  __chkstk_darwin(v10);
  uint64_t v83 = (uint64_t)v82 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v12 - 8);
  uint64_t v86 = (char *)v82 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for UUID();
  uint64_t v108 = *(void *)(v14 - 8);
  uint64_t v109 = v14;
  __chkstk_darwin(v14);
  unint64_t v85 = (char *)v82 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v97 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v97);
  uint64_t v96 = (char *)v82 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v17 - 8);
  uint64_t v95 = (char *)v82 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v94 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v93 = *(void *)(v94 - 8);
  __chkstk_darwin(v94);
  uint64_t v92 = (char *)v82 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for DispatchWorkItemFlags();
  __chkstk_darwin(v20);
  sub_10000588C((uint64_t *)&unk_101638CE0);
  uint64_t v21 = swift_allocObject();
  *(_DWORD *)(v21 + 16) = 0;
  v6[5] = v21;
  uint64_t v87 = qword_101644860;
  *(void *)((char *)v6 + qword_101644860) = 0;
  uint64_t v88 = qword_101644868;
  *(void *)((char *)v6 + qword_101644868) = 0;
  uint64_t v89 = qword_101644870;
  *(void *)((char *)v6 + qword_101644870) = 0;
  os_log_type_t v22 = (void *)((char *)v6 + qword_101644878);
  *os_log_type_t v22 = 0;
  v22[1] = 0;
  uint64_t v90 = v22;
  uint64_t v23 = qword_101644880;
  unint64_t v24 = v9[11];
  uint64_t v25 = (uint64_t (*)(uint64_t))v9[12];
  int64_t v26 = (void *)v9[13];
  unint64_t v103 = (void *)v9[10];
  uint64_t aBlock = v103;
  unint64_t v112 = v24;
  uint64_t v101 = v25;
  unint64_t v113 = v25;
  uint64_t v114 = v26;
  uint64_t v27 = type metadata accessor for MessagingSession();
  unint64_t v28 = sub_10015CEB8();
  uint64_t v107 = v27;
  v82[2] = type metadata accessor for PassthroughSubject();
  uint64_t v29 = PassthroughSubject.__allocating_init()();
  uint64_t v104 = v23;
  *(void *)((char *)v6 + v23) = v29;
  uint64_t v30 = qword_101644888;
  unint64_t v102 = v24;
  uint64_t v100 = v26;
  type metadata accessor for SessionMessage();
  v82[3] = v28;
  v82[1] = type metadata accessor for PassthroughSubject();
  uint64_t v31 = PassthroughSubject.__allocating_init()();
  uint64_t v99 = v30;
  *(void *)((char *)v6 + v30) = v31;
  *(void *)((char *)v6 + qword_101644890) = 0;
  *(void *)((char *)v6 + qword_101644898) = 0;
  *(void *)((char *)v6 + qword_1016448A0) = 0;
  *(void *)((char *)v6 + qword_1016448B0) = 0;
  uint64_t v32 = qword_1016448B8;
  unint64_t v115 = SharingCircleWildAdvertisementKey.init(key:);
  uint64_t v116 = 0;
  uint64_t aBlock = _NSConcreteStackBlock;
  unint64_t v112 = 1107296256;
  unint64_t v113 = sub_1004B5480;
  uint64_t v114 = &unk_1015C0C38;
  _Block_copy(&aBlock);
  uint64_t v117 = _swiftEmptyArrayStorage;
  sub_100434404((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  type metadata accessor for DispatchWorkItem();
  swift_allocObject();
  *(void *)((char *)v6 + v32) = DispatchWorkItem.init(flags:block:)();
  *(void *)((char *)v6 + qword_1016448C0) = 0;
  static Date.distantPast.getter();
  *((unsigned char *)v6 + qword_1016448D0) = 0;
  uint64_t v91 = sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  uint64_t aBlock = 0;
  unint64_t v112 = 0xE000000000000000;
  _StringGuts.grow(_:)(45);
  swift_bridgeObjectRelease();
  uint64_t aBlock = (void *)0xD00000000000002BLL;
  unint64_t v112 = 0x80000001013FCBB0;
  uint64_t v33 = *(void *)(v110 + 16);
  unint64_t v34 = *(void **)(v110 + 24);
  swift_bridgeObjectRetain();
  v35._countAndFlagsBits = v33;
  v35._object = v34;
  String.append(_:)(v35);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, void, uint64_t))(v93 + 104))(v92, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v94);
  static DispatchQoS.unspecified.getter();
  uint64_t aBlock = _swiftEmptyArrayStorage;
  sub_100434404((unint64_t *)&qword_101638CC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000588C((uint64_t *)&unk_1016376F0);
  sub_100062734((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
  uint64_t v37 = v108;
  uint64_t v36 = v109;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v38 = v110;
  uint64_t v39 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v40 = v98;
  v6[6] = v39;
  v6[7] = v40;
  *(void *)((char *)v6 + qword_101644858) = v38;
  id v41 = v40;
  swift_retain();
  id v42 = [v41 sessionID];
  if (!v42) {
    goto LABEL_4;
  }
  uint64_t v43 = v42;
  static String._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v44 = (uint64_t)v86;
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v37 + 48))(v44, 1, v36) == 1)
  {
    sub_10001DAB4(v44, &qword_101638CF0);
LABEL_4:
    uint64_t aBlock = v103;
    unint64_t v112 = v102;
    unint64_t v113 = v101;
    uint64_t v114 = v100;
    type metadata accessor for MessagingSession.MessagingSessionError();
    swift_getWitnessTable();
    swift_allocError();
    *long long v45 = 0;
    swift_willThrow();

    swift_release();
    int v46 = 0;
    goto LABEL_5;
  }
  uint64_t v48 = v85;
  (*(void (**)(char *, uint64_t, uint64_t))(v37 + 32))(v85, v44, v36);
  (*(void (**)(uint64_t, char *, uint64_t))(v37 + 16))((uint64_t)v6 + qword_10170DE80, v48, v36);
  id v49 = [v41 destination];
  if (v49)
  {

    uint64_t aBlock = *(void **)((char *)v6 + v99);
    swift_getWitnessTable();
    *(void *)((char *)v6 + qword_10170DE90) = Publisher.eraseToAnyPublisher()();
    uint64_t aBlock = *(void **)((char *)v6 + v104);
    swift_getWitnessTable();
    *(void *)((char *)v6 + qword_10170DE88) = Publisher.eraseToAnyPublisher()();
    uint64_t v50 = v83;
    static Date.trustedNow.getter(v83);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v105 + 32))((uint64_t)v6 + qword_1016448A8, v50, v106);
    *((double *)v6 + 2) = a4;
    *((double *)v6 + 3) = a5;
    v6[4] = v84;
    uint64_t v105 = type metadata accessor for Future();
    uint64_t v51 = swift_allocObject();
    swift_weakInit();
    uint64_t v52 = (void *)swift_allocObject();
    unint64_t v53 = v102;
    unint64_t v54 = v103;
    v52[2] = v103;
    uint64_t v56 = v100;
    unint64_t v55 = v101;
    uint64_t v52[3] = v53;
    v52[4] = v55;
    v52[5] = v56;
    v52[6] = v51;
    uint64_t v57 = Future.__allocating_init(_:)();
    *(void *)((char *)v6 + qword_101644870) = v57;
    unsigned __int8 v58 = (void *)v57;
    uint64_t v106 = v57;
    swift_retain();
    swift_release();
    uint64_t aBlock = v58;
    uint64_t v59 = swift_allocObject();
    swift_weakInit();
    uint64_t v60 = (void *)swift_allocObject();
    v60[2] = v54;
    v60[3] = v53;
    unsigned char v60[4] = v55;
    v60[5] = v56;
    v60[6] = v59;
    uint64_t v61 = swift_allocObject();
    swift_weakInit();
    uint64_t v62 = (void *)swift_allocObject();
    v62[2] = v54;
    v62[3] = v53;
    v62[4] = v55;
    v62[5] = v56;
    v62[6] = v61;
    swift_getWitnessTable();
    uint64_t v63 = Publisher.sink(receiveCompletion:receiveValue:)();
    swift_release();
    swift_release();
    *(void *)((char *)v6 + qword_1016448A0) = v63;
    swift_release();
    uint64_t v64 = type metadata accessor for MessagingSessionDelegateTrampoline();
    uint64_t v65 = swift_retain();
    id v66 = sub_10121DFD4(v65, v64, v107, (uint64_t)&off_1015C08D8);
    swift_release();
    uint64_t v67 = qword_101644868;
    uint64_t v68 = *(void **)((char *)v6 + qword_101644868);
    *(void *)((char *)v6 + qword_101644868) = v66;

    sub_10042FB24(0, 1);
    [(id)v6[7] setDelegate:*(void *)((char *)v6 + v67) queue:v6[6]];
    swift_release();

    swift_release();
    (*(void (**)(char *, uint64_t))(v108 + 8))(v85, v109);
    return v6;
  }
  if (qword_1016373D8 != -1) {
    swift_once();
  }
  uint64_t v69 = type metadata accessor for Logger();
  sub_100010324(v69, (uint64_t)qword_10170F168);
  id v70 = v41;
  id v71 = Logger.logObject.getter();
  os_log_type_t v72 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v71, v72))
  {
    Swift::String v73 = (uint8_t *)swift_slowAlloc();
    id v98 = (void *)swift_slowAlloc();
    uint64_t v117 = v98;
    *(_DWORD *)Swift::String v73 = 136315138;
    id v74 = [v70 destination];
    if (v74)
    {
      os_log_type_t v75 = v74;
      uint64_t v76 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v78 = v77;
    }
    else
    {
      uint64_t v76 = 0;
      unint64_t v78 = 0;
    }
    uint64_t aBlock = (void *)v76;
    unint64_t v112 = v78;
    sub_10000588C(&qword_101644320);
    uint64_t v79 = String.init<A>(describing:)();
    uint64_t aBlock = (void *)sub_1008FA0F0(v79, v80, (uint64_t *)&v117);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v71, v72, "Invalid IDSSession, destination is [%s]", v73, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v37 = v108;
    uint64_t v36 = v109;
    uint64_t v48 = v85;
  }
  else
  {
  }
  uint64_t aBlock = v103;
  unint64_t v112 = v102;
  unint64_t v113 = v101;
  uint64_t v114 = v100;
  type metadata accessor for MessagingSession.MessagingSessionError();
  swift_getWitnessTable();
  swift_allocError();
  void *v81 = 0;
  swift_willThrow();

  swift_release();
  (*(void (**)(char *, uint64_t))(v37 + 8))(v48, v36);
  int v46 = 1;
LABEL_5:
  swift_release();

  if (v46) {
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))((uint64_t)v6 + qword_10170DE80, v36);
  }
  swift_release();
  swift_release();

  swift_release();
  sub_1000A1534(*v90);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v105 + 8))((uint64_t)v6 + qword_1016448C8, v106);
  swift_deallocPartialClassInstance();
  return v6;
}

uint64_t sub_10042EE20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v13 = (void *)swift_allocObject();
  uint64_t v13[2] = a4;
  v13[3] = a5;
  v13[4] = a6;
  v13[5] = a7;
  v13[6] = a1;
  v13[7] = a2;
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v15 = Strong;
    uint64_t v16 = (uint64_t (*)(uint64_t, char))swift_allocObject();
    *((void *)v16 + 2) = a4;
    *((void *)v16 + 3) = a5;
    *((void *)v16 + 4) = a6;
    *((void *)v16 + 5) = a7;
    *((void *)v16 + 6) = sub_100434884;
    *((void *)v16 + 7) = v13;
    uint64_t v17 = (uint64_t (**)(uint64_t, char))(v15 + qword_101644878);
    uint64_t v18 = *(void *)(v15 + qword_101644878);
    *uint64_t v17 = sub_1004348C4;
    v17[1] = v16;
    swift_retain();
    sub_1000A1534(v18);
  }
  else
  {
    swift_retain();
  }
  return swift_release();
}

uint64_t sub_10042EF44()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_retain();
    swift_release();
    PassthroughSubject.send(completion:)();
    return swift_release();
  }
  return result;
}

uint64_t sub_10042EFCC()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    swift_retain();
    swift_release();
    PassthroughSubject.send(_:)();
    return swift_release();
  }
  return result;
}

uint64_t sub_10042F054()
{
  uint64_t v1 = v0;
  if (qword_1016373D8 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100010324(v2, (uint64_t)qword_10170F168);
  swift_retain_n();
  unint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446466;
    uint64_t v6 = sub_10042DBD8();
    sub_1008FA0F0(v6, v7, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    *(_WORD *)(v5 + 12) = 2082;
    uint64_t v8 = *(void *)(v0 + qword_101644858);
    uint64_t v9 = *(void *)(v8 + 16);
    unint64_t v10 = *(void *)(v8 + 24);
    swift_bridgeObjectRetain();
    sub_1008FA0F0(v9, v10, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Deleted session: %{public}s service: %{public}s", (uint8_t *)v5, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  swift_release();

  uint64_t v11 = v0 + qword_10170DE80;
  uint64_t v12 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  swift_release();
  swift_release();

  swift_release();
  sub_1000A1534(*(void *)(v1 + qword_101644878));
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v13 = v1 + qword_1016448A8;
  uint64_t v14 = type metadata accessor for Date();
  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8);
  v15(v13, v14);
  swift_release();
  swift_release();
  v15(v1 + qword_1016448C8, v14);
  return v1;
}

uint64_t sub_10042F400()
{
  sub_10042F054();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MessagingSession()
{
  return swift_getGenericMetadata();
}

uint64_t sub_10042F470()
{
  sub_1004314AC();
  [*(id *)(v0 + 56) endSession];
  return sub_101063728(v0);
}

uint64_t sub_10042F4B8()
{
  [*(id *)(v0 + 56) endSession];
  return sub_101063728(v0);
}

uint64_t sub_10042F4FC(uint64_t a1)
{
  uint64_t v3 = sub_10000588C(&qword_1016449C8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v31[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = sub_10000588C(&qword_101644998);
  __chkstk_darwin(v7);
  uint64_t v9 = &v31[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = *(void *)(v1 + qword_101644860);
  if (v10)
  {
    uint64_t v35 = v1;
    type metadata accessor for PropertyListEncoder();
    swift_allocObject();
    swift_retain();
    PropertyListEncoder.init()();
    sub_100062734(&qword_1016449D8, &qword_101644998);
    uint64_t v11 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
    unint64_t v13 = v12;
    swift_release();
    unint64_t v33 = v13;
    uint64_t v34 = v10;
    if (qword_1016373D8 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_100010324(v15, (uint64_t)qword_10170F168);
    sub_10043457C(a1, (uint64_t)v9);
    swift_retain_n();
    uint64_t v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.info.getter();
    int v18 = v17;
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v19 = swift_slowAlloc();
      uint64_t v37 = swift_slowAlloc();
      *(_DWORD *)uint64_t v19 = 136446722;
      int v32 = v18;
      uint64_t v20 = sub_10042DBD8();
      uint64_t v36 = sub_1008FA0F0(v20, v21, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v19 + 12) = 2082;
      uint64_t v22 = sub_1004E55E8();
      uint64_t v36 = sub_1008FA0F0(v22, v23, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10001DAB4((uint64_t)v9, &qword_101644998);
      *(_WORD *)(v19 + 22) = 2082;
      swift_release();
      type metadata accessor for UUID();
      sub_100434404((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v36 = sub_1008FA0F0(v24, v25, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, (os_log_type_t)v32, "%{public}s: Sending (Internal): %{public}s over session: %{public}s", (uint8_t *)v19, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_release_n();
      sub_10001DAB4((uint64_t)v9, &qword_101644998);

      swift_release();
    }
    uint64_t v26 = v11;
    unint64_t v27 = v33;
    uint64_t v28 = swift_allocObject();
    swift_weakInit();
    uint64_t v29 = (void *)swift_allocObject();
    void v29[2] = v28;
    v29[3] = v26;
    v29[4] = v27;
    sub_10000588C(&qword_1016449E0);
    swift_allocObject();
    sub_1000361E0(v26, v27);
    uint64_t v37 = Future.init(_:)();
    sub_100062734(qword_1016449E8, &qword_1016449E0);
    uint64_t v14 = Publisher.eraseToAnyPublisher()();
    swift_release();
    sub_10001CFB8(v26, v27);
    swift_release();
  }
  else
  {
    uint64_t v37 = 4;
    sub_10015CEB8();
    Fail.init(error:)();
    sub_100062734(&qword_1016449D0, &qword_1016449C8);
    uint64_t v14 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
  }
  return v14;
}

uint64_t sub_10042FB24(int a1, int a2)
{
  int v27 = a1;
  LODWORD(v28) = a2;
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  uint64_t v5 = type metadata accessor for DispatchTime();
  uint64_t v25 = *(void *)(v5 - 8);
  uint64_t v26 = v5;
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v25 - v9;
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags();
  __chkstk_darwin(v11);
  uint64_t v12 = swift_allocObject();
  swift_weakInit();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = *(void *)(v3 + 80);
  *(_OWORD *)(v13 + 24) = *(_OWORD *)(v4 + 88);
  *(void *)(v13 + 40) = *(void *)(v3 + 104);
  *(void *)(v13 + 48) = v12;
  uint64_t v36 = sub_1004346DC;
  uint64_t v37 = v13;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v33 = 1107296256;
  uint64_t v34 = sub_1004B5480;
  uint64_t v35 = &unk_1015C0B20;
  _Block_copy(&aBlock);
  uint64_t v31 = _swiftEmptyArrayStorage;
  sub_100434404((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  swift_retain();
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  type metadata accessor for DispatchWorkItem();
  swift_allocObject();
  uint64_t v14 = DispatchWorkItem.init(flags:block:)();
  swift_release();
  swift_release();
  char v29 = v27;
  uint64_t v30 = v2;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = v2;
  *(void *)(v15 + 24) = v14;
  p_ivar_base_size = &AnalyticsEvent.ivar_base_size;
  if (v28)
  {
    uint64_t v17 = qword_101636AE0;
    swift_retain();
    swift_retain();
    if (v17 != -1) {
      swift_once();
    }
    dispatch_queue_t v28 = (dispatch_queue_t)qword_101644850;
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = sub_100434740;
    *(void *)(v18 + 24) = v15;
    uint64_t v19 = swift_allocObject();
    uint64_t v20 = sub_1000A14F4;
    *(void *)(v19 + 16) = sub_1000A14F4;
    *(void *)(v19 + 24) = v18;
    uint64_t v36 = sub_1003B7AE0;
    uint64_t v37 = v19;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v33 = 1107296256;
    uint64_t v34 = sub_1000A70B0;
    uint64_t v35 = &unk_1015C0BC0;
    unint64_t v21 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(v28, v21);
    _Block_release(v21);
    LOBYTE(v21) = swift_isEscapingClosureAtFileLocation();
    uint64_t result = swift_release();
    if (v21)
    {
      __break(1u);
      return result;
    }
    p_ivar_base_size = (_DWORD *)(&AnalyticsEvent + 8);
  }
  else
  {
    swift_retain();
    swift_retain();
    sub_1004301E8((uint64_t)v2, v14);
    uint64_t v20 = 0;
  }
  if (*((void *)p_ivar_base_size + 348) != -1) {
    swift_once();
  }
  static DispatchTime.now()();
  + infix(_:_:)();
  uint64_t v23 = v26;
  uint64_t v24 = *(void (**)(char *, uint64_t))(v25 + 8);
  v24(v8, v26);
  OS_dispatch_queue.asyncAfter(deadline:execute:)();
  swift_release();
  swift_release();
  v24(v10, v23);
  return sub_1000A1534((uint64_t)v20);
}

uint64_t sub_1004300D0(char a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t result = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((a1 & 1) == 0)
  {
    static Date.trustedNow.getter((uint64_t)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
    uint64_t v9 = a2 + qword_1016448A8;
    swift_beginAccess();
    (*(void (**)(uint64_t, char *, uint64_t))(v5 + 40))(v9, v8, v4);
    uint64_t result = swift_endAccess();
    *(void *)(a2 + qword_1016448B0) = 0;
  }
  return result;
}

uint64_t sub_1004301E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = qword_1016448B8;
  swift_retain();
  dispatch thunk of DispatchWorkItem.cancel()();
  swift_release();
  uint64_t v5 = qword_1016448C0;
  if (*(void *)(a1 + qword_1016448C0))
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  *(void *)(a1 + v5) = 0;
  swift_release();
  *(void *)(a1 + v4) = a2;
  swift_retain();

  return swift_release();
}

uint64_t sub_100430298()
{
  uint64_t v1 = *v0;
  uint64_t v2 = sub_10000588C(&qword_101644998);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v8 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1004E5040(0, 1, 0, 0xE000000000000000, (uint64_t)v4);
  v8[6] = sub_10042F4FC((uint64_t)v4);
  uint64_t v5 = swift_allocObject();
  swift_weakInit();
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = *(void *)(v1 + 80);
  *(_OWORD *)(v6 + 24) = *(_OWORD *)(v1 + 88);
  *(void *)(v6 + 40) = *(void *)(v1 + 104);
  *(void *)(v6 + 48) = v5;
  sub_10000588C(&qword_1016449B8);
  sub_100062734(&qword_1016449C0, &qword_1016449B8);
  Publisher.oneshot(_:)();
  swift_release();
  swift_release();
  return sub_10001DAB4((uint64_t)v4, &qword_101644998);
}

void sub_100430654(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11 = type metadata accessor for DispatchTime();
  uint64_t v41 = *(void *)(v11 - 8);
  uint64_t v42 = v11;
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v40 = (char *)&v39 - v15;
  uint64_t v16 = type metadata accessor for DispatchWorkItemFlags();
  __chkstk_darwin(v16);
  unint64_t v17 = *(void *)a1;
  char v18 = *(unsigned char *)(a1 + 8);
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v20 = Strong;
    if (v18)
    {
      sub_1001EE1D4(v17);
      if (qword_1016373D8 != -1) {
        swift_once();
      }
      uint64_t v21 = type metadata accessor for Logger();
      sub_100010324(v21, (uint64_t)qword_10170F168);
      swift_retain();
      sub_100434678(v17, 1);
      swift_retain();
      sub_100434678(v17, 1);
      uint64_t v22 = Logger.logObject.getter();
      os_log_type_t v23 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v22, v23))
      {
        uint64_t v24 = swift_slowAlloc();
        uint64_t aBlock = swift_slowAlloc();
        *(_DWORD *)uint64_t v24 = 136446466;
        uint64_t v25 = sub_10042DBD8();
        id v49 = (void *)sub_1008FA0F0(v25, v26, &aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v24 + 12) = 2082;
        id v49 = (void *)v17;
        sub_10015CEB8();
        uint64_t v27 = Error.localizedDescription.getter();
        id v49 = (void *)sub_1008FA0F0(v27, v28, &aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100434684(v17, 1);
        sub_100434684(v17, 1);
        _os_log_impl((void *)&_mh_execute_header, v22, v23, "%{public}s: Error sending .heartbeat: %{public}s", (uint8_t *)v24, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        sub_100434684(v17, 1);
        swift_release();
      }
      else
      {
        swift_release();
        sub_100434684(v17, 1);
        swift_release_n();
        sub_100434684(v17, 1);
        sub_100434684(v17, 1);
      }
    }
    else
    {
      uint64_t v29 = swift_allocObject();
      swift_weakInit();
      uint64_t v30 = (void *)swift_allocObject();
      void v30[2] = a3;
      void v30[3] = a4;
      v30[4] = a5;
      void v30[5] = a6;
      v30[6] = v29;
      id v47 = sub_1004346A8;
      uint64_t v48 = v30;
      uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
      uint64_t v44 = 1107296256;
      long long v45 = sub_1004B5480;
      int v46 = &unk_1015C0A58;
      _Block_copy(&aBlock);
      id v49 = _swiftEmptyArrayStorage;
      sub_100434404((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      swift_retain();
      sub_10000588C((uint64_t *)&unk_10163F350);
      sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
      dispatch thunk of SetAlgebra.init<A>(_:)();
      type metadata accessor for DispatchWorkItem();
      swift_allocObject();
      uint64_t v31 = DispatchWorkItem.init(flags:block:)();
      swift_release();
      swift_release();
      if (qword_101636AE0 != -1) {
        swift_once();
      }
      int v32 = qword_101644850;
      uint64_t v33 = swift_allocObject();
      *(void *)(v33 + 16) = v20;
      *(void *)(v33 + 24) = v31;
      uint64_t v34 = swift_allocObject();
      *(void *)(v34 + 16) = sub_1004346C4;
      *(void *)(v34 + 24) = v33;
      id v47 = sub_1003B7AE0;
      uint64_t v48 = (void *)v34;
      uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
      uint64_t v44 = 1107296256;
      long long v45 = sub_1000A70B0;
      int v46 = &unk_1015C0AD0;
      uint64_t v35 = _Block_copy(&aBlock);
      swift_retain();
      swift_retain();
      swift_retain();
      swift_release();
      dispatch_sync(v32, v35);
      _Block_release(v35);
      LOBYTE(v32) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if (v32)
      {
        __break(1u);
      }
      else
      {
        static DispatchTime.now()();
        uint64_t v36 = v40;
        + infix(_:_:)();
        uint64_t v37 = v42;
        uint64_t v38 = *(void (**)(char *, uint64_t))(v41 + 8);
        v38(v14, v42);
        OS_dispatch_queue.asyncAfter(deadline:execute:)();
        swift_release();
        swift_release();
        v38(v36, v37);
        swift_release();
      }
    }
  }
}

uint64_t sub_100430D44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void))
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    a6();
    return swift_release();
  }
  return result;
}

uint64_t sub_100430DA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Date.trustedNow.getter((uint64_t)v7);
  uint64_t v8 = a1 + qword_1016448C8;
  swift_beginAccess();
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 40))(v8, v7, v4);
  swift_endAccess();
  *(void *)(a1 + qword_1016448C0) = a2;
  swift_retain();
  return swift_release();
}

uint64_t sub_100430EC4()
{
  uint64_t v0 = sub_10000588C(&qword_101644998);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1004E5040(1, 1, 0, 0xE000000000000000, (uint64_t)v2);
  v4[6] = sub_10042F4FC((uint64_t)v2);
  swift_retain();
  sub_10000588C(&qword_1016449B8);
  sub_100062734(&qword_1016449C0, &qword_1016449B8);
  Publisher.oneshot(_:)();
  swift_release();
  swift_release();
  return sub_10001DAB4((uint64_t)v2, &qword_101644998);
}

void sub_10043120C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8) == 1)
  {
    unint64_t v1 = *(void *)a1;
    sub_1001EE1D4(*(void *)a1);
    if (qword_1016373D8 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_100010324(v2, (uint64_t)qword_10170F168);
    sub_100434678(v1, 1);
    swift_retain();
    sub_100434678(v1, 1);
    swift_retain();
    oslog = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v3))
    {
      uint64_t v4 = swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      *(_DWORD *)uint64_t v4 = 136446466;
      uint64_t v5 = sub_10042DBD8();
      sub_1008FA0F0(v5, v6, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v4 + 12) = 2082;
      sub_10015CEB8();
      uint64_t v7 = Error.localizedDescription.getter();
      sub_1008FA0F0(v7, v8, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100434684(v1, 1);
      sub_100434684(v1, 1);
      _os_log_impl((void *)&_mh_execute_header, oslog, v3, "%{public}s: Error sending .heartbeatReply: %{public}s", (uint8_t *)v4, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_100434684(v1, 1);
    }
    else
    {
      sub_100434684(v1, 1);
      swift_release_n();
      sub_100434684(v1, 1);
      sub_100434684(v1, 1);
    }
  }
}

uint64_t sub_1004314AC()
{
  uint64_t v1 = type metadata accessor for DispatchTime();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v16 - v6;
  uint64_t v8 = sub_10000588C(&qword_101644998);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  if ((v17 & 1) == 0)
  {
    uint64_t v12 = dispatch_group_create();
    sub_1004E5040(2, 1, 0, 0xE000000000000000, (uint64_t)v10);
    dispatch_group_enter(v12);
    uint64_t v17 = sub_10042F4FC((uint64_t)v10);
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = v12;
    *(void *)(v13 + 24) = v0;
    uint64_t v14 = v12;
    swift_retain();
    sub_10000588C(&qword_1016449B8);
    sub_100062734(&qword_1016449C0, &qword_1016449B8);
    Publisher.oneshot(_:)();
    swift_release();
    swift_release();
    static DispatchTime.now()();
    + infix(_:_:)();
    uint64_t v15 = *(void (**)(char *, uint64_t))(v2 + 8);
    v15(v5, v1);
    OS_dispatch_group.wait(timeout:)();

    v15(v7, v1);
    return sub_10001DAB4((uint64_t)v10, &qword_101644998);
  }
  return result;
}

void sub_100431958(uint64_t a1, dispatch_group_t group)
{
  if (*(unsigned char *)(a1 + 8) == 1)
  {
    unint64_t v3 = *(void *)a1;
    sub_1001EE1D4(*(void *)a1);
    if (qword_1016373D8 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_10170F168);
    sub_100434678(v3, 1);
    swift_retain();
    sub_100434678(v3, 1);
    swift_retain();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136446466;
      uint64_t v8 = sub_10042DBD8();
      sub_1008FA0F0(v8, v9, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v7 + 12) = 2082;
      sub_10015CEB8();
      uint64_t v10 = Error.localizedDescription.getter();
      sub_1008FA0F0(v10, v11, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100434684(v3, 1);
      sub_100434684(v3, 1);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s: Error sending .shuttingDown: %{public}s", (uint8_t *)v7, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_100434684(v3, 1);
    }
    else
    {
      sub_100434684(v3, 1);
      swift_release_n();
      sub_100434684(v3, 1);
      sub_100434684(v3, 1);
    }
  }
  dispatch_group_leave(group);
}

uint64_t sub_100431BE0()
{
  if (qword_1016373D8 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100010324(v0, (uint64_t)qword_10170F168);
  swift_retain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    unint64_t v3 = (uint8_t *)swift_slowAlloc();
    v15[0] = swift_slowAlloc();
    *(_DWORD *)unint64_t v3 = 136446210;
    uint64_t v4 = sub_10042DBD8();
    sub_1008FA0F0(v4, v5, v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "%{public}s: heartbeat timed out", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  if ((v15[0] & 1) == 0) {
    return sub_10042FB24(1, 0);
  }
  swift_retain_n();
  os_log_type_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = swift_slowAlloc();
    v15[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136446466;
    uint64_t v9 = sub_10042DBD8();
    sub_1008FA0F0(v9, v10, v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2082;
    uint64_t v11 = sub_10042DBD8();
    unint64_t v13 = v12;
    swift_release();
    sub_1008FA0F0(v11, v13, v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "%{public}s: *** SESSION FAILED [%{public}s] ***", (uint8_t *)v8, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  return sub_10042F470();
}

void sub_100431F70(unsigned char *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_10000588C(&qword_101644998);
  __chkstk_darwin(v4 - 8);
  os_log_type_t v6 = (char *)v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1016373D8 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = sub_100010324(v7, (uint64_t)qword_10170F168);
  sub_10043457C((uint64_t)a1, (uint64_t)v6);
  swift_retain_n();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    v24[0] = swift_slowAlloc();
    uint64_t v26 = v24[0];
    *(_DWORD *)uint64_t v11 = 136446722;
    v24[1] = v8;
    uint64_t v12 = sub_10042DBD8();
    uint64_t v25 = sub_1008FA0F0(v12, v13, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 12) = 2082;
    uint64_t v14 = sub_1004E55E8();
    uint64_t v25 = sub_1008FA0F0(v14, v15, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10001DAB4((uint64_t)v6, &qword_101644998);
    *(_WORD *)(v11 + 22) = 2082;
    swift_release();
    type metadata accessor for UUID();
    sub_100434404((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v25 = sub_1008FA0F0(v16, v17, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "%{public}s: read internal message: %{public}s over session: %{public}s", (uint8_t *)v11, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    int v18 = *a1;
    if (*a1) {
      goto LABEL_5;
    }
LABEL_9:
    sub_100430EC4();
    return;
  }
  swift_release_n();
  sub_10001DAB4((uint64_t)v6, &qword_101644998);

  swift_release();
  int v18 = *a1;
  if (!*a1) {
    goto LABEL_9;
  }
LABEL_5:
  if (v18 != 1)
  {
    swift_retain_n();
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v26 = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 136446210;
      uint64_t v22 = sub_10042DBD8();
      uint64_t v25 = sub_1008FA0F0(v22, v23, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "%{public}s: received .shuttingDown message", v21, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    [*(id *)(v2 + 56) endSession];
    sub_101063728(v2);
  }
}

uint64_t getEnumTagSinglePayload for HeartbeatConfiguration(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for HeartbeatConfiguration(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 24) = v3;
  return result;
}

ValueMetadata *type metadata accessor for HeartbeatConfiguration()
{
  return &type metadata for HeartbeatConfiguration;
}

uint64_t sub_100432444()
{
  return sub_10042DBD8();
}

uint64_t sub_100432468(uint64_t a1, uint64_t a2)
{
  id v3 = [*(id *)(a1 + 56) sessionID];
  if (v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
  }
  id v8 = [*(id *)(a2 + 56) sessionID];
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v12 = v11;

    if (v7)
    {
      if (v12)
      {
        if (v5 == v10 && v7 == v12)
        {
          swift_bridgeObjectRelease();
          char v14 = 1;
        }
        else
        {
          char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
        }
        goto LABEL_18;
      }
      goto LABEL_13;
    }
    if (v12)
    {
      char v14 = 0;
      goto LABEL_18;
    }
  }
  else if (v7)
  {
LABEL_13:
    char v14 = 0;
LABEL_18:
    swift_bridgeObjectRelease();
    return v14 & 1;
  }
  char v14 = 1;
  return v14 & 1;
}

void sub_100432578()
{
  id v1 = [*(id *)(v0 + 56) sessionID];
  if (v1)
  {
    uint64_t v2 = v1;
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int sub_100432614()
{
  return Hasher._finalize()();
}

Swift::Int sub_100432654()
{
  return sub_100432614();
}

void sub_100432678()
{
}

Swift::Int sub_10043269C()
{
  return Hasher._finalize()();
}

uint64_t sub_1004326DC(uint64_t *a1, uint64_t *a2)
{
  return sub_100432468(*a1, *a2) & 1;
}

void sub_100432700()
{
  id v1 = v0;
  uint64_t v51 = *v0;
  uint64_t v2 = sub_10000588C(&qword_101644958);
  uint64_t v49 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v45 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1016373D8 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170F168);
  swift_retain_n();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v50 = v2;
  if (v8)
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc();
    uint64_t v53 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136446210;
    uint64_t v10 = sub_10042DBD8();
    uint64_t v55 = sub_1008FA0F0(v10, v11, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "%{public}s: sessionStarted", v9, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  uint64_t v12 = *(void *)((char *)v0 + qword_101644878);
  if (v12)
  {
    uint64_t v13 = *(void *)((char *)v0 + qword_101644878 + 8);
    char v14 = (void *)v0[7];
    swift_retain();
    id v15 = [v14 destination];
    if (v15
      && (uint64_t v16 = v15,
          static String._unconditionallyBridgeFromObjectiveC(_:)(),
          v16,
          _s12searchpartyd20MessagingDestinationV20stringRepresentationACSgSS_tcfC_0(),
          v17))
    {
      uint64_t v26 = sub_101063C0C();
      swift_bridgeObjectRelease();
      swift_retain_n();
      swift_retain_n();
      uint64_t v27 = Logger.logObject.getter();
      os_log_type_t v28 = static os_log_type_t.default.getter();
      int v29 = v28;
      uint64_t v48 = v27;
      if (os_log_type_enabled(v27, v28))
      {
        uint64_t v31 = swift_slowAlloc();
        uint64_t v47 = swift_slowAlloc();
        uint64_t v55 = v47;
        *(_DWORD *)uint64_t v31 = 136446466;
        uint64_t v32 = sub_10042DBD8();
        uint64_t v53 = sub_1008FA0F0(v32, v33, &v55);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v31 + 12) = 2082;
        uint64_t v46 = v31 + 14;
        uint64_t v53 = 60;
        unint64_t v54 = 0xE100000000000000;
        uint64_t v52 = v26;
        type metadata accessor for MessagingDatagramConnection();
        sub_100434404(&qword_101644978, (void (*)(uint64_t))type metadata accessor for MessagingDatagramConnection);
        swift_retain();
        v34._countAndFlagsBits = CustomStringConvertible.typeDescription.getter();
        HIDWORD(v45) = v29;
        String.append(_:)(v34);
        swift_bridgeObjectRelease();
        v35._countAndFlagsBits = 8250;
        v35._object = (void *)0xE200000000000000;
        String.append(_:)(v35);
        v36._countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter();
        String.append(_:)(v36);
        swift_bridgeObjectRelease();
        v37._countAndFlagsBits = 62;
        v37._object = (void *)0xE100000000000000;
        String.append(_:)(v37);
        swift_release();
        uint64_t v53 = sub_1008FA0F0(v53, v54, &v55);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        uint64_t v38 = v48;
        _os_log_impl((void *)&_mh_execute_header, v48, BYTE4(v45), "%{public}s: Created %{public}s", (uint8_t *)v31, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_release_n();
        swift_release_n();
      }
      uint64_t v40 = v49;
      uint64_t v39 = v50;
      *(void *)((char *)v1 + qword_101644860) = v26;
      swift_retain();
      swift_release();
      uint64_t v53 = v26[6];
      swift_retain();
      sub_10000588C(&qword_101644960);
      sub_100062734(&qword_101644968, &qword_101644960);
      Publisher.first(where:)();
      swift_release();
      uint64_t v41 = swift_allocObject();
      swift_weakInit();
      uint64_t v42 = swift_allocObject();
      uint64_t v43 = v51;
      *(void *)(v42 + 16) = *(void *)(v51 + 80);
      *(_OWORD *)(v42 + 24) = *(_OWORD *)(v43 + 88);
      *(void *)(v42 + 40) = *(void *)(v43 + 104);
      *(void *)(v42 + 48) = v41;
      *(void *)(v42 + 56) = v26;
      *(void *)(v42 + 64) = v12;
      *(void *)(v42 + 72) = v13;
      sub_1000BD0E8(v12);
      sub_100062734(&qword_101644970, &qword_101644958);
      swift_retain();
      uint64_t v44 = Publisher<>.sink(receiveValue:)();
      swift_release();
      sub_1000A1534(v12);
      swift_release();
      (*(void (**)(char *, uint64_t))(v40 + 8))(v4, v39);
      *(void *)((char *)v1 + qword_101644890) = v44;
      swift_release();
    }
    else
    {
      int v18 = Logger.logObject.getter();
      os_log_type_t v19 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v18, v19))
      {
        os_log_type_t v20 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v20 = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "Invalid destinationString!", v20, 2u);
        swift_slowDealloc();

        sub_1000A1534(v12);
      }
      else
      {
        sub_1000A1534(v12);
      }
    }
  }
  else
  {
    swift_retain_n();
    uint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      unint64_t v23 = (uint8_t *)swift_slowAlloc();
      uint64_t v53 = swift_slowAlloc();
      *(_DWORD *)unint64_t v23 = 136446210;
      uint64_t v24 = sub_10042DBD8();
      uint64_t v55 = sub_1008FA0F0(v24, v25, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "%{public}s: sessionStarted called with no promise!", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
  }
}

BOOL sub_100433190(void *a1)
{
  return *a1 == 3;
}

uint64_t sub_1004331A0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, void), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v14 = result;
    uint64_t v15 = swift_allocObject();
    swift_weakInit();
    uint64_t v16 = (void *)swift_allocObject();
    void v16[2] = a6;
    v16[3] = a7;
    v16[4] = a8;
    uint64_t v16[5] = a9;
    void v16[6] = v15;
    uint64_t v17 = swift_allocObject();
    swift_weakInit();
    int v18 = (void *)swift_allocObject();
    v18[2] = a6;
    v18[3] = a7;
    v18[4] = a8;
    v18[5] = a9;
    void v18[6] = v17;
    swift_retain();
    sub_10000588C(&qword_101644980);
    sub_100062734(&qword_101644988, &qword_101644980);
    uint64_t v19 = Publisher.sink(receiveCompletion:receiveValue:)();
    swift_release();
    swift_release();
    swift_release();
    *(void *)(v14 + qword_101644898) = v19;
    swift_release();
    uint64_t v20 = swift_retain();
    a4(v20, 0);
    swift_release();
    *(void *)(v14 + qword_101644890) = 0;
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1004333B8()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    PassthroughSubject.send(completion:)();
    *(void *)(v1 + qword_101644898) = 0;
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_100433448()
{
  uint64_t v0 = type metadata accessor for UUID();
  v19[4] = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  void v19[3] = (char *)v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for SessionMessage();
  uint64_t v3 = type metadata accessor for Optional();
  v19[8] = *(void *)(v3 - 8);
  v19[9] = v3;
  uint64_t v4 = __chkstk_darwin(v3);
  v19[10] = (char *)v19 - v5;
  v19[11] = *(void *)(v2 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  void v19[2] = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  v19[5] = (char *)v19 - v9;
  __chkstk_darwin(v8);
  v19[7] = (char *)v19 - v10;
  uint64_t v11 = sub_10000588C(&qword_101644990);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000588C(&qword_101644998);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)v19 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    v19[1] = v0;
    void v19[6] = v2;
    sub_10042FB24(0, 1);
    type metadata accessor for PropertyListDecoder();
    swift_allocObject();
    PropertyListDecoder.init()();
    sub_100062734(&qword_1016449A0, &qword_101644998);
    dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
    swift_release();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v13, 0, 1, v14);
    sub_1004344AC((uint64_t)v13, (uint64_t)v17);
    sub_100431F70(v17);
    swift_release();
    return sub_10001DAB4((uint64_t)v17, &qword_101644998);
  }
  return result;
}

uint64_t sub_100433D10(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    if (qword_1016373D8 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_100010324(v11, (uint64_t)qword_10170F168);
    swift_retain_n();
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136446466;
      uint64_t v15 = sub_10042DBD8();
      sub_1008FA0F0(v15, v16, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v14 + 12) = 1024;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "%{public}s: session ended with reason: %u", (uint8_t *)v14, 0x12u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    goto LABEL_11;
  }
  swift_errorRetain();
  if (qword_1016373D8 != -1) {
    goto LABEL_15;
  }
  while (1)
  {
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_10170F168);
    swift_errorRetain();
    swift_retain();
    swift_errorRetain();
    swift_retain();
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 136446722;
      uint64_t v7 = sub_10042DBD8();
      sub_1008FA0F0(v7, v8, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v6 + 12) = 1024;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v6 + 18) = 2082;
      swift_getErrorValue();
      uint64_t v9 = Error.localizedDescription.getter();
      sub_1008FA0F0(v9, v10, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "%{public}s: session ended with reason: %u error: %{public}s", (uint8_t *)v6, 0x1Cu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_release_n();
      swift_errorRelease();
      swift_errorRelease();
    }
LABEL_11:
    if (qword_101636AE0 != -1) {
      swift_once();
    }
    uint64_t v17 = qword_101644850;
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = sub_100434320;
    *(void *)(v18 + 24) = v2;
    aBlock[4] = (uint64_t)sub_100132424;
    aBlock[5] = v18;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    aBlock[2] = (uint64_t)sub_1000A70B0;
    aBlock[3] = (uint64_t)&unk_1015C0918;
    uint64_t v19 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    swift_release();
    dispatch_sync(v17, v19);
    _Block_release(v19);
    LOBYTE(v17) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    uint64_t result = swift_release();
    if ((v17 & 1) == 0) {
      break;
    }
    __break(1u);
LABEL_15:
    swift_once();
  }
  return result;
}

uint64_t sub_100434244(uint64_t a1)
{
  swift_retain();
  dispatch thunk of DispatchWorkItem.cancel()();
  swift_release();
  uint64_t v2 = qword_1016448C0;
  if (*(void *)(a1 + qword_1016448C0))
  {
    swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()();
    swift_release();
  }
  *(void *)(a1 + v2) = 0;
  swift_release();
  *(void *)(a1 + qword_101644870) = 0;
  swift_release();
  uint64_t v3 = (void *)(a1 + qword_101644878);
  uint64_t v4 = *(void *)(a1 + qword_101644878);
  *uint64_t v3 = 0;
  v3[1] = 0;

  return sub_1000A1534(v4);
}

uint64_t sub_100434304()
{
  return swift_getWitnessTable();
}

uint64_t sub_100434320()
{
  return sub_100434244(v0);
}

uint64_t sub_100434328()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100434338(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100434348()
{
  return swift_release();
}

uint64_t sub_100434350()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100434388()
{
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_1004343D0(uint64_t a1)
{
  return sub_1004331A0(a1, *(void *)(v1 + 48), *(void *)(v1 + 56), *(void (**)(uint64_t, void))(v1 + 64), *(void *)(v1 + 72), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_100434404(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10043444C()
{
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100434484(uint64_t a1)
{
  return sub_100434834(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_1004333B8);
}

uint64_t sub_10043449C()
{
  return sub_100433448();
}

uint64_t sub_1004344AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_101644998);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_100434514()
{
  unint64_t result = qword_1016449A8;
  if (!qword_1016449A8)
  {
    sub_10001D4B0(255, qword_10166CFD0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016449A8);
  }
  return result;
}

uint64_t sub_10043457C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_101644998);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

void sub_1004345E4(BOOL *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + qword_1016448B0);
  BOOL v3 = __OFADD__(v2, 1);
  uint64_t v4 = v2 + 1;
  if (v3)
  {
    __break(1u);
  }
  else
  {
    *(void *)(v1 + qword_1016448B0) = v4;
    *a1 = v4 >= *(void *)(v1 + 32);
  }
}

void sub_100434614(unsigned char *a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + qword_1016448D0);
  *(unsigned char *)(v1 + qword_1016448D0) = 1;
  *a1 = v2;
}

uint64_t sub_100434630()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_100434670(uint64_t a1)
{
  sub_100431958(a1, *(dispatch_group_t *)(v1 + 16));
}

unint64_t sub_100434678(unint64_t result, char a2)
{
  if (a2) {
    return sub_1001EE1D4(result);
  }
  return result;
}

unint64_t sub_100434684(unint64_t result, char a2)
{
  if (a2) {
    return sub_1001EE1E4(result);
  }
  return result;
}

void sub_100434690(uint64_t a1)
{
}

void sub_100434698(uint64_t a1)
{
  sub_100430654(a1, v1[6], v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_1004346A8()
{
  return sub_1004346F4((void (*)(void))sub_100431BE0);
}

uint64_t sub_1004346C4()
{
  return sub_100430DA4(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1004346CC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1004346DC()
{
  return sub_1004346F4((void (*)(void))sub_100430298);
}

uint64_t sub_1004346F4(void (*a1)(void))
{
  return sub_100430D44(v1[6], v1[2], v1[3], v1[4], v1[5], a1);
}

uint64_t sub_10043471C()
{
  return sub_1004300D0(*(unsigned char *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100434740()
{
  return sub_1004301E8(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100434748()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100434780()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100434790()
{
  swift_release();
  sub_10001CFB8(*(void *)(v0 + 24), *(void *)(v0 + 32));

  return _swift_deallocObject(v0, 40, 7);
}

void sub_1004347D0(uint64_t a1, uint64_t a2)
{
  sub_100F45F64(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
}

uint64_t type metadata accessor for MessagingSession.MessagingSessionError()
{
  return swift_getGenericMetadata();
}

uint64_t sub_1004347F4(uint64_t a1, uint64_t a2)
{
  return sub_10042EE20(a1, a2, v2[6], v2[2], v2[3], v2[4], v2[5]);
}

uint64_t sub_100434804(uint64_t a1)
{
  return sub_100434834(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_10042EF44);
}

uint64_t sub_10043481C(uint64_t a1)
{
  return sub_100434834(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_10042EFCC);
}

uint64_t sub_100434834(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void))
{
  return a2(a1, v2[6], v2[2], v2[3], v2[4], v2[5]);
}

uint64_t sub_10043484C()
{
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100434884(uint64_t a1, char a2)
{
  BOOL v3 = *(uint64_t (**)(uint64_t *))(v2 + 48);
  uint64_t v5 = a1;
  char v6 = a2 & 1;
  return v3(&v5);
}

uint64_t sub_1004348C4(uint64_t a1, char a2)
{
  (*(void (**)(uint64_t, void))(v2 + 48))(a1, a2 & 1);
  return 0;
}

uint64_t sub_1004348F4(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFE && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 1;
  if (v4 >= 3) {
    return v5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for UserNotificationPublisher.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)unint64_t result = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483646;
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFE) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 1;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for InternalSessionMessageType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100434A70);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InternalSessionMessageType()
{
  return &type metadata for InternalSessionMessageType;
}

unint64_t sub_100434AA8(void *a1)
{
  a1[1] = sub_100434AE0();
  a1[2] = sub_100434B34();
  unint64_t result = sub_100434B88();
  a1[3] = result;
  return result;
}

unint64_t sub_100434AE0()
{
  unint64_t result = qword_101644A70;
  if (!qword_101644A70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644A70);
  }
  return result;
}

unint64_t sub_100434B34()
{
  unint64_t result = qword_101644A78;
  if (!qword_101644A78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644A78);
  }
  return result;
}

unint64_t sub_100434B88()
{
  unint64_t result = qword_101644A80;
  if (!qword_101644A80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644A80);
  }
  return result;
}

uint64_t sub_100434BDC()
{
  return sub_100062734(&qword_101644A88, &qword_101644A90);
}

unint64_t sub_100434C1C()
{
  unint64_t result = qword_101644A98;
  if (!qword_101644A98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644A98);
  }
  return result;
}

void *PairingNonce.length.unsafeMutableAddressor()
{
  return &static PairingNonce.length;
}

uint64_t sub_100434CC8@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v3 = a2 >> 62;
  uint64_t v5 = result;
  uint64_t v6 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v7) = HIDWORD(result) - result;
      if (__OFSUB__(HIDWORD(result), result))
      {
        __break(1u);
LABEL_16:
        __break(1u);
        goto LABEL_17;
      }
      uint64_t v7 = (int)v7;
LABEL_6:
      if (v7 == 72)
      {
        *a3 = result;
        a3[1] = a2;
        return result;
      }
      if (!v3)
      {
        uint64_t v6 = BYTE6(a2);
        goto LABEL_14;
      }
      if (v3 != 1)
      {
        uint64_t v12 = *(void *)(result + 16);
        uint64_t v11 = *(void *)(result + 24);
        uint64_t v6 = v11 - v12;
        if (!__OFSUB__(v11, v12)) {
          goto LABEL_14;
        }
LABEL_18:
        __break(1u);
        JUMPOUT(0x100434DE4);
      }
      if (__OFSUB__(HIDWORD(result), result))
      {
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      uint64_t v6 = HIDWORD(result) - (int)result;
LABEL_14:
      sub_10013019C();
      swift_allocError();
      *(void *)uint64_t v13 = 72;
      *(void *)(v13 + 8) = v6;
      *(unsigned char *)(v13 + 16) = 0;
      swift_willThrow();
      return sub_10001CFB8(v5, a2);
    case 2uLL:
      uint64_t v9 = *(void *)(result + 16);
      uint64_t v8 = *(void *)(result + 24);
      BOOL v10 = __OFSUB__(v8, v9);
      uint64_t v7 = v8 - v9;
      if (!v10) {
        goto LABEL_6;
      }
      goto LABEL_16;
    case 3uLL:
      goto LABEL_14;
    default:
      uint64_t v7 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_100434DF4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_10043552C(a1, a2, a3);
}

uint64_t sub_100434E0C@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v3 = a2 >> 62;
  uint64_t v5 = result;
  uint64_t v6 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v7) = HIDWORD(result) - result;
      if (__OFSUB__(HIDWORD(result), result))
      {
        __break(1u);
LABEL_16:
        __break(1u);
        goto LABEL_17;
      }
      uint64_t v7 = (int)v7;
LABEL_6:
      if (v7 == 28)
      {
        *a3 = result;
        a3[1] = a2;
        return result;
      }
      if (!v3)
      {
        uint64_t v6 = BYTE6(a2);
        goto LABEL_14;
      }
      if (v3 != 1)
      {
        uint64_t v12 = *(void *)(result + 16);
        uint64_t v11 = *(void *)(result + 24);
        uint64_t v6 = v11 - v12;
        if (!__OFSUB__(v11, v12)) {
          goto LABEL_14;
        }
LABEL_18:
        __break(1u);
        JUMPOUT(0x100434F28);
      }
      if (__OFSUB__(HIDWORD(result), result))
      {
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      uint64_t v6 = HIDWORD(result) - (int)result;
LABEL_14:
      sub_10013019C();
      swift_allocError();
      *(void *)uint64_t v13 = 28;
      *(void *)(v13 + 8) = v6;
      *(unsigned char *)(v13 + 16) = 0;
      swift_willThrow();
      return sub_10001CFB8(v5, a2);
    case 2uLL:
      uint64_t v9 = *(void *)(result + 16);
      uint64_t v8 = *(void *)(result + 24);
      BOOL v10 = __OFSUB__(v8, v9);
      uint64_t v7 = v8 - v9;
      if (!v10) {
        goto LABEL_6;
      }
      goto LABEL_16;
    case 3uLL:
      goto LABEL_14;
    default:
      uint64_t v7 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_100434F38@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v3 = a2 >> 62;
  uint64_t v5 = result;
  uint64_t v6 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v7) = HIDWORD(result) - result;
      if (__OFSUB__(HIDWORD(result), result))
      {
        __break(1u);
LABEL_16:
        __break(1u);
        goto LABEL_17;
      }
      uint64_t v7 = (int)v7;
LABEL_6:
      if (v7 == 113)
      {
        *a3 = result;
        a3[1] = a2;
        return result;
      }
      if (!v3)
      {
        uint64_t v6 = BYTE6(a2);
        goto LABEL_14;
      }
      if (v3 != 1)
      {
        uint64_t v12 = *(void *)(result + 16);
        uint64_t v11 = *(void *)(result + 24);
        uint64_t v6 = v11 - v12;
        if (!__OFSUB__(v11, v12)) {
          goto LABEL_14;
        }
LABEL_18:
        __break(1u);
        JUMPOUT(0x100435054);
      }
      if (__OFSUB__(HIDWORD(result), result))
      {
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      uint64_t v6 = HIDWORD(result) - (int)result;
LABEL_14:
      sub_10013019C();
      swift_allocError();
      *(void *)uint64_t v13 = 113;
      *(void *)(v13 + 8) = v6;
      *(unsigned char *)(v13 + 16) = 0;
      swift_willThrow();
      return sub_10001CFB8(v5, a2);
    case 2uLL:
      uint64_t v9 = *(void *)(result + 16);
      uint64_t v8 = *(void *)(result + 24);
      BOOL v10 = __OFSUB__(v8, v9);
      uint64_t v7 = v8 - v9;
      if (!v10) {
        goto LABEL_6;
      }
      goto LABEL_16;
    case 3uLL:
      goto LABEL_14;
    default:
      uint64_t v7 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_100435064@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v3 = a2 >> 62;
  uint64_t v5 = result;
  uint64_t v6 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v7) = HIDWORD(result) - result;
      if (__OFSUB__(HIDWORD(result), result))
      {
        __break(1u);
LABEL_16:
        __break(1u);
        goto LABEL_17;
      }
      uint64_t v7 = (int)v7;
LABEL_6:
      if (v7 == 114)
      {
        *a3 = result;
        a3[1] = a2;
        return result;
      }
      if (!v3)
      {
        uint64_t v6 = BYTE6(a2);
        goto LABEL_14;
      }
      if (v3 != 1)
      {
        uint64_t v12 = *(void *)(result + 16);
        uint64_t v11 = *(void *)(result + 24);
        uint64_t v6 = v11 - v12;
        if (!__OFSUB__(v11, v12)) {
          goto LABEL_14;
        }
LABEL_18:
        __break(1u);
        JUMPOUT(0x100435180);
      }
      if (__OFSUB__(HIDWORD(result), result))
      {
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      uint64_t v6 = HIDWORD(result) - (int)result;
LABEL_14:
      sub_10013019C();
      swift_allocError();
      *(void *)uint64_t v13 = 114;
      *(void *)(v13 + 8) = v6;
      *(unsigned char *)(v13 + 16) = 0;
      swift_willThrow();
      return sub_10001CFB8(v5, a2);
    case 2uLL:
      uint64_t v9 = *(void *)(result + 16);
      uint64_t v8 = *(void *)(result + 24);
      BOOL v10 = __OFSUB__(v8, v9);
      uint64_t v7 = v8 - v9;
      if (!v10) {
        goto LABEL_6;
      }
      goto LABEL_16;
    case 3uLL:
      goto LABEL_14;
    default:
      uint64_t v7 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_100435190@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v3 = a2 >> 62;
  uint64_t v5 = result;
  uint64_t v6 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v7) = HIDWORD(result) - result;
      if (__OFSUB__(HIDWORD(result), result))
      {
        __break(1u);
LABEL_16:
        __break(1u);
        goto LABEL_17;
      }
      uint64_t v7 = (int)v7;
LABEL_6:
      if (v7 == 89)
      {
        *a3 = result;
        a3[1] = a2;
        return result;
      }
      if (!v3)
      {
        uint64_t v6 = BYTE6(a2);
        goto LABEL_14;
      }
      if (v3 != 1)
      {
        uint64_t v12 = *(void *)(result + 16);
        uint64_t v11 = *(void *)(result + 24);
        uint64_t v6 = v11 - v12;
        if (!__OFSUB__(v11, v12)) {
          goto LABEL_14;
        }
LABEL_18:
        __break(1u);
        JUMPOUT(0x1004352ACLL);
      }
      if (__OFSUB__(HIDWORD(result), result))
      {
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      uint64_t v6 = HIDWORD(result) - (int)result;
LABEL_14:
      sub_10013019C();
      swift_allocError();
      *(void *)uint64_t v13 = 89;
      *(void *)(v13 + 8) = v6;
      *(unsigned char *)(v13 + 16) = 0;
      swift_willThrow();
      return sub_10001CFB8(v5, a2);
    case 2uLL:
      uint64_t v9 = *(void *)(result + 16);
      uint64_t v8 = *(void *)(result + 24);
      BOOL v10 = __OFSUB__(v8, v9);
      uint64_t v7 = v8 - v9;
      if (!v10) {
        goto LABEL_6;
      }
      goto LABEL_16;
    case 3uLL:
      goto LABEL_14;
    default:
      uint64_t v7 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_1004352BC@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v3 = a2 >> 62;
  uint64_t v5 = result;
  uint64_t v6 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v7) = HIDWORD(result) - result;
      if (__OFSUB__(HIDWORD(result), result))
      {
        __break(1u);
LABEL_16:
        __break(1u);
        goto LABEL_17;
      }
      uint64_t v7 = (int)v7;
LABEL_6:
      if (v7 == 60)
      {
        *a3 = result;
        a3[1] = a2;
        return result;
      }
      if (!v3)
      {
        uint64_t v6 = BYTE6(a2);
        goto LABEL_14;
      }
      if (v3 != 1)
      {
        uint64_t v12 = *(void *)(result + 16);
        uint64_t v11 = *(void *)(result + 24);
        uint64_t v6 = v11 - v12;
        if (!__OFSUB__(v11, v12)) {
          goto LABEL_14;
        }
LABEL_18:
        __break(1u);
        JUMPOUT(0x1004353D8);
      }
      if (__OFSUB__(HIDWORD(result), result))
      {
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      uint64_t v6 = HIDWORD(result) - (int)result;
LABEL_14:
      sub_10013019C();
      swift_allocError();
      *(void *)uint64_t v13 = 60;
      *(void *)(v13 + 8) = v6;
      *(unsigned char *)(v13 + 16) = 0;
      swift_willThrow();
      return sub_10001CFB8(v5, a2);
    case 2uLL:
      uint64_t v9 = *(void *)(result + 16);
      uint64_t v8 = *(void *)(result + 24);
      BOOL v10 = __OFSUB__(v8, v9);
      uint64_t v7 = v8 - v9;
      if (!v10) {
        goto LABEL_6;
      }
      goto LABEL_16;
    case 3uLL:
      goto LABEL_14;
    default:
      uint64_t v7 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_1004353E8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_100435400(a1, a2, a3);
}

uint64_t sub_100435400@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v3 = a2 >> 62;
  uint64_t v5 = result;
  uint64_t v6 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v7) = HIDWORD(result) - result;
      if (__OFSUB__(HIDWORD(result), result))
      {
        __break(1u);
LABEL_16:
        __break(1u);
        goto LABEL_17;
      }
      uint64_t v7 = (int)v7;
LABEL_6:
      if (v7 == 6)
      {
        *a3 = result;
        a3[1] = a2;
        return result;
      }
      if (!v3)
      {
        uint64_t v6 = BYTE6(a2);
        goto LABEL_14;
      }
      if (v3 != 1)
      {
        uint64_t v12 = *(void *)(result + 16);
        uint64_t v11 = *(void *)(result + 24);
        uint64_t v6 = v11 - v12;
        if (!__OFSUB__(v11, v12)) {
          goto LABEL_14;
        }
LABEL_18:
        __break(1u);
        JUMPOUT(0x10043551CLL);
      }
      if (__OFSUB__(HIDWORD(result), result))
      {
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      uint64_t v6 = HIDWORD(result) - (int)result;
LABEL_14:
      sub_10013019C();
      swift_allocError();
      *(void *)uint64_t v13 = 6;
      *(void *)(v13 + 8) = v6;
      *(unsigned char *)(v13 + 16) = 0;
      swift_willThrow();
      return sub_10001CFB8(v5, a2);
    case 2uLL:
      uint64_t v9 = *(void *)(result + 16);
      uint64_t v8 = *(void *)(result + 24);
      BOOL v10 = __OFSUB__(v8, v9);
      uint64_t v7 = v8 - v9;
      if (!v10) {
        goto LABEL_6;
      }
      goto LABEL_16;
    case 3uLL:
      goto LABEL_14;
    default:
      uint64_t v7 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_10043552C@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v3 = a2 >> 62;
  uint64_t v5 = result;
  uint64_t v6 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v7) = HIDWORD(result) - result;
      if (__OFSUB__(HIDWORD(result), result))
      {
        __break(1u);
LABEL_16:
        __break(1u);
        goto LABEL_17;
      }
      uint64_t v7 = (int)v7;
LABEL_6:
      if (v7 == 32)
      {
        *a3 = result;
        a3[1] = a2;
        return result;
      }
      if (!v3)
      {
        uint64_t v6 = BYTE6(a2);
        goto LABEL_14;
      }
      if (v3 != 1)
      {
        uint64_t v12 = *(void *)(result + 16);
        uint64_t v11 = *(void *)(result + 24);
        uint64_t v6 = v11 - v12;
        if (!__OFSUB__(v11, v12)) {
          goto LABEL_14;
        }
LABEL_18:
        __break(1u);
        JUMPOUT(0x100435648);
      }
      if (__OFSUB__(HIDWORD(result), result))
      {
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      uint64_t v6 = HIDWORD(result) - (int)result;
LABEL_14:
      sub_10013019C();
      swift_allocError();
      *(void *)uint64_t v13 = 32;
      *(void *)(v13 + 8) = v6;
      *(unsigned char *)(v13 + 16) = 0;
      swift_willThrow();
      return sub_10001CFB8(v5, a2);
    case 2uLL:
      uint64_t v9 = *(void *)(result + 16);
      uint64_t v8 = *(void *)(result + 24);
      BOOL v10 = __OFSUB__(v8, v9);
      uint64_t v7 = v8 - v9;
      if (!v10) {
        goto LABEL_6;
      }
      goto LABEL_16;
    case 3uLL:
      goto LABEL_14;
    default:
      uint64_t v7 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_100435658@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = result;
  uint64_t v5 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v6) = HIDWORD(result) - result;
      if (__OFSUB__(HIDWORD(result), result))
      {
        __break(1u);
LABEL_16:
        __break(1u);
        goto LABEL_17;
      }
      uint64_t v6 = (int)v6;
LABEL_6:
      if (v6 == 1326)
      {
        *a3 = result;
        a3[1] = a2;
        return result;
      }
      if (a2 >> 62 == 2)
      {
        uint64_t v11 = *(void *)(result + 16);
        uint64_t v10 = *(void *)(result + 24);
        uint64_t v5 = v10 - v11;
        if (!__OFSUB__(v10, v11)) {
          goto LABEL_14;
        }
        __break(1u);
      }
      if (__OFSUB__(HIDWORD(result), result))
      {
LABEL_17:
        __break(1u);
        JUMPOUT(0x100435764);
      }
      uint64_t v5 = HIDWORD(result) - (int)result;
LABEL_14:
      sub_10013019C();
      swift_allocError();
      *(void *)uint64_t v12 = 1326;
      *(void *)(v12 + 8) = v5;
      *(unsigned char *)(v12 + 16) = 0;
      swift_willThrow();
      return sub_10001CFB8(v4, a2);
    case 2uLL:
      uint64_t v8 = *(void *)(result + 16);
      uint64_t v7 = *(void *)(result + 24);
      BOOL v9 = __OFSUB__(v7, v8);
      uint64_t v6 = v7 - v8;
      if (!v9) {
        goto LABEL_6;
      }
      goto LABEL_16;
    case 3uLL:
      goto LABEL_14;
    default:
      uint64_t v5 = BYTE6(a2);
      goto LABEL_14;
  }
}

uint64_t sub_100435774@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = result;
  uint64_t v5 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v6) = HIDWORD(result) - result;
      if (__OFSUB__(HIDWORD(result), result))
      {
        __break(1u);
LABEL_16:
        __break(1u);
        goto LABEL_17;
      }
      uint64_t v6 = (int)v6;
LABEL_6:
      if (v6 == 1286)
      {
        *a3 = result;
        a3[1] = a2;
        return result;
      }
      if (a2 >> 62 == 2)
      {
        uint64_t v11 = *(void *)(result + 16);
        uint64_t v10 = *(void *)(result + 24);
        uint64_t v5 = v10 - v11;
        if (!__OFSUB__(v10, v11)) {
          goto LABEL_14;
        }
        __break(1u);
      }
      if (__OFSUB__(HIDWORD(result), result))
      {
LABEL_17:
        __break(1u);
        JUMPOUT(0x100435880);
      }
      uint64_t v5 = HIDWORD(result) - (int)result;
LABEL_14:
      sub_10013019C();
      swift_allocError();
      *(void *)uint64_t v12 = 1286;
      *(void *)(v12 + 8) = v5;
      *(unsigned char *)(v12 + 16) = 0;
      swift_willThrow();
      return sub_10001CFB8(v4, a2);
    case 2uLL:
      uint64_t v8 = *(void *)(result + 16);
      uint64_t v7 = *(void *)(result + 24);
      BOOL v9 = __OFSUB__(v7, v8);
      uint64_t v6 = v7 - v8;
      if (!v9) {
        goto LABEL_6;
      }
      goto LABEL_16;
    case 3uLL:
      goto LABEL_14;
    default:
      uint64_t v5 = BYTE6(a2);
      goto LABEL_14;
  }
}

uint64_t sub_100435890@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v3 = a2 >> 62;
  uint64_t v5 = result;
  uint64_t v6 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v7) = HIDWORD(result) - result;
      if (__OFSUB__(HIDWORD(result), result))
      {
        __break(1u);
LABEL_16:
        __break(1u);
        goto LABEL_17;
      }
      uint64_t v7 = (int)v7;
LABEL_6:
      if (v7 == 85)
      {
        *a3 = result;
        a3[1] = a2;
        return result;
      }
      if (!v3)
      {
        uint64_t v6 = BYTE6(a2);
        goto LABEL_14;
      }
      if (v3 != 1)
      {
        uint64_t v12 = *(void *)(result + 16);
        uint64_t v11 = *(void *)(result + 24);
        uint64_t v6 = v11 - v12;
        if (!__OFSUB__(v11, v12)) {
          goto LABEL_14;
        }
LABEL_18:
        __break(1u);
        JUMPOUT(0x1004359ACLL);
      }
      if (__OFSUB__(HIDWORD(result), result))
      {
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      uint64_t v6 = HIDWORD(result) - (int)result;
LABEL_14:
      sub_10013019C();
      swift_allocError();
      *(void *)uint64_t v13 = 85;
      *(void *)(v13 + 8) = v6;
      *(unsigned char *)(v13 + 16) = 0;
      swift_willThrow();
      return sub_10001CFB8(v5, a2);
    case 2uLL:
      uint64_t v9 = *(void *)(result + 16);
      uint64_t v8 = *(void *)(result + 24);
      BOOL v10 = __OFSUB__(v8, v9);
      uint64_t v7 = v8 - v9;
      if (!v10) {
        goto LABEL_6;
      }
      goto LABEL_16;
    case 3uLL:
      goto LABEL_14;
    default:
      uint64_t v7 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t KeyRepresentable<>.init(data:)(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *(void *)(a4 + 8);
  BOOL v10 = *(uint64_t (**)(uint64_t, uint64_t))(v9 + 48);
  sub_1000361E0(a1, a2);
  uint64_t v11 = v10(a3, v9);
  uint64_t v12 = sub_10043A250(a1, a2, v11);
  if (!v4) {
    (*(void (**)(uint64_t))(a4 + 24))(v12);
  }
  return sub_10001CFB8(a1, a2);
}

void *CollaborativeKeyGen.v1.C2.length.unsafeMutableAddressor()
{
  return &static CollaborativeKeyGen.v1.C2.length;
}

uint64_t sub_100435A9C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  unint64_t v5 = a3 >> 62;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  switch(a3 >> 62)
  {
    case 1uLL:
      uint64_t v10 = (int)a2;
      uint64_t v9 = a2 >> 32;
      break;
    case 2uLL:
      uint64_t v10 = *(void *)(a2 + 16);
      uint64_t v9 = *(void *)(a2 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v10 = 0;
      uint64_t v9 = BYTE6(a3);
      break;
  }
  uint64_t v11 = sub_1008AA59C(v10, v9, a2, a3);
  if (a1 && (v11 & 0x8000000000000000) == 0 && v11 < a1)
  {
    switch((int)v5)
    {
      case 1:
        uint64_t v12 = a2 >> 32;
        goto LABEL_12;
      case 2:
        uint64_t v12 = *(void *)(a2 + 24);
        goto LABEL_14;
      default:
        goto LABEL_16;
    }
  }
  uint64_t v12 = sub_1008AA520(v10, a1, a2, a3);
  uint64_t v13 = 0;
  switch((int)v5)
  {
    case 1:
LABEL_12:
      uint64_t v13 = (int)a2;
      break;
    case 2:
LABEL_14:
      uint64_t v13 = *(void *)(a2 + 16);
      break;
    default:
      break;
  }
  if (v12 < v13)
  {
LABEL_18:
    __break(1u);
    JUMPOUT(0x100435C08);
  }
LABEL_16:
  uint64_t v14 = Data._Representation.subscript.getter();
  uint64_t v16 = v15;
  uint64_t result = sub_10001CFB8(a2, a3);
  *a4 = v14;
  a4[1] = v16;
  return result;
}

uint64_t sub_100435C38(uint64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v3 = *(void *)(a2 + 16);
    if ((uint64_t)v3 >= result) {
      unint64_t v4 = result;
    }
    else {
      unint64_t v4 = *(void *)(a2 + 16);
    }
    if (result) {
      unint64_t v5 = v4;
    }
    else {
      unint64_t v5 = 0;
    }
    if (v3 >= v5)
    {
      type metadata accessor for OwnedDeviceKeyRecord();
      return a2;
    }
  }
  __break(1u);
  return result;
}

int64_t sub_100435CCC(int64_t result, uint64_t a2)
{
  if (result < 0)
  {
    __break(1u);
  }
  else
  {
    unint64_t v2 = *(void *)(a2 + 16);
    if ((uint64_t)v2 >= result) {
      unint64_t v3 = result;
    }
    else {
      unint64_t v3 = *(void *)(a2 + 16);
    }
    if (!result) {
      unint64_t v3 = 0;
    }
    if (v2 >= v3) {
      return a2;
    }
  }
  __break(1u);
  return result;
}

uint64_t Advertisement.nearOwner.getter(uint64_t a1, unint64_t a2)
{
  return sub_100437B84(a1, a2, 6);
}

void *Advertisement.length.unsafeMutableAddressor()
{
  return &static Advertisement.length;
}

void *NearOwnerAdvertisement.length.unsafeMutableAddressor()
{
  return &static NearOwnerAdvertisement.length;
}

uint64_t StandardPublicKey.init(data:)(uint64_t a1, unint64_t a2)
{
  return sub_10043A56C(a1, a2);
}

uint64_t Advertisement.hashed.getter()
{
  uint64_t v0 = type metadata accessor for HashAlgorithm();
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  unint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))(v3, enum case for HashAlgorithm.sha256(_:), v0);
  uint64_t v4 = Data.hash(algorithm:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  return v4;
}

uint64_t KeyRepresenting.rawValue.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(a2 + 8) + 40))();
}

SecKeyRef sub_100435E70(uint64_t a1, unint64_t a2)
{
  type metadata accessor for CFString(0);
  uint64_t v5 = v4;
  uint64_t v23 = v4;
  error[0] = (CFErrorRef)kSecAttrKeyTypeEC;
  sub_100173E4C(error, v21);
  uint64_t v6 = (id)kSecAttrKeyType;
  CFStringRef v7 = (id)kSecAttrKeyTypeEC;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_10016D21C(v21, v6, isUniquelyReferenced_nonNull_native);

  swift_bridgeObjectRelease();
  uint64_t v23 = v5;
  error[0] = (CFErrorRef)kSecAttrKeyClassPrivate;
  sub_100173E4C(error, v21);
  uint64_t v9 = (id)kSecAttrKeyClass;
  CFStringRef v10 = (id)kSecAttrKeyClassPrivate;
  char v11 = swift_isUniquelyReferenced_nonNull_native();
  sub_10016D21C(v21, v9, v11);

  swift_bridgeObjectRelease();
  error[0] = 0;
  sub_1000361E0(a1, a2);
  CFDataRef isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10001CFB8(a1, a2);
  sub_10001D4B0(0, (unint64_t *)&qword_10165F5D0);
  sub_1004424C4();
  CFDictionaryRef v13 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  SecKeyRef v14 = SecKeyCreateWithData(isa, v13, error);

  if (!v14) {
    goto LABEL_4;
  }
  if (error[0])
  {

LABEL_4:
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_101342130;
    *(CFErrorRef *)&v21[0] = error[0];
    sub_10000588C(&qword_1016454C0);
    uint64_t v16 = String.init<A>(describing:)();
    uint64_t v18 = v17;
    *(void *)(v15 + 56) = &type metadata for String;
    *(void *)(v15 + 64) = sub_10000B4CC();
    *(void *)(v15 + 32) = v16;
    *(void *)(v15 + 40) = v18;
    sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
    uint64_t v19 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();

    sub_10044252C();
    swift_allocError();
    swift_willThrow();
  }
  return v14;
}

uint64_t PrivateKey.init(data:)(uint64_t a1, unint64_t a2)
{
  return sub_10043A040(a1, a2);
}

uint64_t PrivateKey.publicKey.getter(uint64_t a1, unint64_t a2)
{
  return sub_100436F20(a1, a2);
}

uint64_t PublicKey.advertisement.getter(uint64_t a1, unint64_t a2)
{
  sub_1000361E0(a1, a2);
  uint64_t v4 = sub_100A94760(a1, a2);
  unint64_t v6 = v5;
  sub_10001CFB8(a1, a2);
  sub_100434E0C(v4, v6, &v8);
  return v8;
}

uint64_t NearOwnerAdvertisement.init(macAddress:ek:)(uint64_t a1)
{
  uint64_t v2 = MACAddress.data.getter();
  unint64_t v4 = v3;
  sub_1000361E0(v2, v3);
  Data.subscript.getter();
  sub_10001CFB8(v2, v4);
  Data._Representation.subscript.setter();
  uint64_t v5 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return v2;
}

uint64_t Advertisement.init(macAddress:pubKey2:ek:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = sub_10043AAFC(a1, a2, a3);
  sub_10001CFB8(a2, a3);
  return v5;
}

uint64_t KeyRepresenting.init(rawValue:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = *(void *)(a4 + 8);
  char v11 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 48);
  unint64_t v12 = a2 >> 62;
  sub_1000361E0(a1, a2);
  uint64_t v13 = v11(a3, v10);
  switch(v12)
  {
    case 1uLL:
      LODWORD(v14) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_14:
        __break(1u);
        JUMPOUT(0x100436538);
      }
      uint64_t v14 = (int)v14;
LABEL_6:
      if (v14 == v13)
      {
LABEL_7:
        (*(void (**)(uint64_t, unint64_t, uint64_t, uint64_t))(a4 + 24))(a1, a2, a3, a4);
        uint64_t v18 = 0;
      }
      else
      {
LABEL_9:
        sub_10001CFB8(a1, a2);
        uint64_t v18 = 1;
      }
      sub_10001CFB8(a1, a2);
      uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 56);
      return v19(a5, v18, 1, a3);
    case 2uLL:
      uint64_t v16 = *(void *)(a1 + 16);
      uint64_t v15 = *(void *)(a1 + 24);
      BOOL v17 = __OFSUB__(v15, v16);
      uint64_t v14 = v15 - v16;
      if (!v17) {
        goto LABEL_6;
      }
      goto LABEL_14;
    case 3uLL:
      if (v13) {
        goto LABEL_9;
      }
      goto LABEL_7;
    default:
      uint64_t v14 = BYTE6(a2);
      goto LABEL_6;
  }
}

void *SharedSecretKey.length.unsafeMutableAddressor()
{
  return &static SharedSecretKey.length;
}

uint64_t Advertisement.macAddress.getter@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_1016477E0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1000361E0(a1, a2);
  uint64_t v9 = static MACAddress.length.getter();
  sub_100435A9C(v9, a1, a2, &v13);
  MACAddress.init(data:type:)();
  uint64_t v10 = type metadata accessor for MACAddress();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v10);
  if (result != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(a3, v8, v10);
  }
  __break(1u);
  return result;
}

void *RefKey.length.unsafeMutableAddressor()
{
  return &static RefKey.length;
}

void *SikPub.length.unsafeMutableAddressor()
{
  return &static SikPub.length;
}

void *CollaborativeKeyGen.C1.length.unsafeMutableAddressor()
{
  return &static CollaborativeKeyGen.C1.length;
}

void *CollaborativeKeyGen.v2.C2.length.unsafeMutableAddressor()
{
  return &static CollaborativeKeyGen.v2.C2.length;
}

uint64_t Advertisement.hint.getter(uint64_t a1, unint64_t a2)
{
  sub_1000361E0(a1, a2);
  uint64_t v4 = static MACAddress.length.getter();
  sub_100435A9C(v4, a1, a2, v9);
  uint64_t v5 = v9[0];
  unint64_t v6 = v9[1];
  uint64_t v7 = Data.subscript.getter();
  sub_10001CFB8(v5, v6);
  return v7;
}

uint64_t PublicKey.init(data:)(uint64_t a1, unint64_t a2)
{
  return sub_10043A38C(a1, a2);
}

uint64_t sub_100436740(uint64_t a1, unint64_t a2, char a3)
{
  if (!a3)
  {
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    unint64_t v11 = 0xD000000000000019;
    v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v7);
    swift_bridgeObjectRelease();
    v8._countAndFlagsBits = 0x6C6175746361202CLL;
    v8._object = (void *)0xEA0000000000203ALL;
    String.append(_:)(v8);
    v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v9);
    swift_bridgeObjectRelease();
    return v11;
  }
  if (a3 == 1)
  {
    sub_1000361E0(a1, a2);
    _StringGuts.grow(_:)(27);
    swift_bridgeObjectRelease();
    unint64_t v11 = 0xD000000000000018;
    v5._countAndFlagsBits = Data.hexString.getter();
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    v6._countAndFlagsBits = 41;
    v6._object = (void *)0xE100000000000000;
    String.append(_:)(v6);
    sub_1004426D0(a1, a2, 1);
    return v11;
  }
  if (a1 | a2) {
    return 0x64696C61766E692ELL;
  }
  else {
    return 0x7479426F72657A2ELL;
  }
}