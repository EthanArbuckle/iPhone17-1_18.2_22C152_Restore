uint64_t sub_10043691C()
{
  uint64_t v0;

  return sub_100436740(*(void *)v0, *(void *)(v0 + 8), *(unsigned char *)(v0 + 16));
}

uint64_t KeyRepresentableInternal.hash(into:)(uint64_t a1, uint64_t a2, unint64_t a3)
{
  sub_1000361E0(a2, a3);
  Data.hash(into:)();

  return sub_10001CFB8(a2, a3);
}

uint64_t sub_100436990()
{
  return 1635017060;
}

uint64_t sub_1004369A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 1635017060 && a2 == 0xE400000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_100436A28(uint64_t a1)
{
  unint64_t v2 = sub_10043AC30();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100436A64(uint64_t a1)
{
  unint64_t v2 = sub_10043AC30();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t KeyRepresentableInternal.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000588C(&qword_101644AD0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_10043AC30();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11[0] = a2;
  v11[1] = a3;
  sub_100037BB4();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

Swift::Int KeyRepresentableInternal.hashValue.getter(uint64_t a1, unint64_t a2)
{
  return Hasher._finalize()();
}

void *KeyRepresentableInternal.init(from:)(void *a1)
{
  return sub_10043AC84(a1);
}

void *sub_100436C70@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_10043AC84(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_100436C9C(void *a1)
{
  return KeyRepresentableInternal.encode(to:)(a1, *v1, v1[1]);
}

uint64_t sub_100436CB8(uint64_t a1, uint64_t a2)
{
  return _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8));
}

uint64_t SecurityKeyRepresentable.init(rawValue:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  (*(void (**)(void))(a2 + 16))();
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a1 - 8) + 56);

  return v5(a3, 0, 1, a1);
}

id sub_100436D54@<X0>(void **a1@<X8>)
{
  uint64_t v2 = *v1;
  *a1 = *v1;
  return v2;
}

void *CommitmentKey.length.unsafeMutableAddressor()
{
  return &static CommitmentKey.length;
}

uint64_t static SharingCircleWildAdvertisementKey.length.getter()
{
  return 32;
}

uint64_t sub_100436D74()
{
  return 7955819;
}

uint64_t sub_100436D88(uint64_t a1)
{
  unint64_t v2 = sub_10043ADF4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100436DC4(uint64_t a1)
{
  unint64_t v2 = sub_10043ADF4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t CommitmentKey.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100439BB8(a1, a2, a3, &qword_101644AE0, (void (*)(void))sub_10043ADF4);
}

void *CommitmentKey.init(from:)(void *a1)
{
  return sub_10043B8F8(a1, &qword_1016455B8, (void (*)(void))sub_10043ADF4);
}

void *sub_100436E78@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_100437164(a1, &qword_1016455B8, (void (*)(void))sub_10043ADF4, a2);
}

uint64_t sub_100436EB4(void *a1)
{
  return CommitmentKey.encode(to:)(a1, *v1, v1[1]);
}

uint64_t sub_100436EDC(void *a1)
{
  return sub_10049113C(*a1, a1[1]);
}

void *EncryptedPrivateKey.length.unsafeMutableAddressor()
{
  return &static EncryptedPrivateKey.length;
}

uint64_t static EncryptedPrivateKey.length.getter()
{
  return 174;
}

uint64_t EncryptedPrivateKey.init(data:)(uint64_t a1, unint64_t a2)
{
  return sub_10043AE9C(a1, a2);
}

uint64_t EncryptedPrivateKey.publicKey.getter(uint64_t a1, unint64_t a2)
{
  return sub_100436F20(a1, a2);
}

uint64_t sub_100436F20(uint64_t a1, unint64_t a2)
{
  sub_1000361E0(a1, a2);
  sub_100435A9C(57, a1, a2, &v10);
  uint64_t result = v10;
  unint64_t v5 = v11;
  switch(v11 >> 62)
  {
    case 1uLL:
      LODWORD(v6) = HIDWORD(v10) - v10;
      if (__OFSUB__(HIDWORD(v10), v10))
      {
        __break(1u);
LABEL_9:
        __break(1u);
LABEL_10:
        sub_10001CFB8(result, v5);
        _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
        JUMPOUT(0x10043701CLL);
      }
      uint64_t v6 = (int)v6;
LABEL_6:
      if (v6 != 57) {
        goto LABEL_10;
      }
      return result;
    case 2uLL:
      uint64_t v8 = *(void *)(v10 + 16);
      uint64_t v7 = *(void *)(v10 + 24);
      BOOL v9 = __OFSUB__(v7, v8);
      uint64_t v6 = v7 - v8;
      if (!v9) {
        goto LABEL_6;
      }
      goto LABEL_9;
    case 3uLL:
      goto LABEL_10;
    default:
      uint64_t v6 = BYTE6(v11);
      goto LABEL_6;
  }
}

void *PublicKey.length.unsafeMutableAddressor()
{
  return &static PublicKey.length;
}

uint64_t sub_100437038(uint64_t a1)
{
  unint64_t v2 = sub_10043AFC8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100437074(uint64_t a1)
{
  unint64_t v2 = sub_10043AFC8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t EncryptedPrivateKey.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100439BB8(a1, a2, a3, &qword_101644AF8, (void (*)(void))sub_10043AFC8);
}

void *EncryptedPrivateKey.init(from:)(void *a1)
{
  return sub_10043B8F8(a1, &qword_1016455B0, (void (*)(void))sub_10043AFC8);
}

void *sub_100437128@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_100437164(a1, &qword_1016455B0, (void (*)(void))sub_10043AFC8, a2);
}

void *sub_100437164@<X0>(void *a1@<X0>, uint64_t *a2@<X3>, void (*a3)(void)@<X4>, void *a4@<X8>)
{
  uint64_t result = sub_10043B8F8(a1, a2, a3);
  if (!v4)
  {
    *a4 = result;
    a4[1] = v7;
  }
  return result;
}

uint64_t sub_10043719C(void *a1)
{
  return EncryptedPrivateKey.encode(to:)(a1, *v1, v1[1]);
}

uint64_t sub_1004371B8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100491140(*(void *)a1, *(void *)(a1 + 8), a2);
}

void *PrivateKey.length.unsafeMutableAddressor()
{
  return &static PrivateKey.length;
}

uint64_t static CollaborativeKeyGen.v2.C3.length.getter()
{
  return 85;
}

void sub_1004371D8(uint64_t a1)
{
}

uint64_t sub_1004371F4(uint64_t a1)
{
  unint64_t v2 = sub_10043B01C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100437230(uint64_t a1)
{
  unint64_t v2 = sub_10043B01C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t PrivateKey.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100439BB8(a1, a2, a3, &qword_101644B08, (void (*)(void))sub_10043B01C);
}

void *PrivateKey.init(from:)(void *a1)
{
  return sub_10043B8F8(a1, &qword_1016455A8, (void (*)(void))sub_10043B01C);
}

void *sub_1004372E4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_100437164(a1, &qword_1016455A8, (void (*)(void))sub_10043B01C, a2);
}

uint64_t sub_100437320(void *a1)
{
  return PrivateKey.encode(to:)(a1, *v1, v1[1]);
}

uint64_t sub_10043733C(void *a1)
{
  return sub_1004911DC(*a1, a1[1]);
}

void *StandardPublicKey.length.unsafeMutableAddressor()
{
  return &static StandardPublicKey.length;
}

uint64_t static StandardPublicKey.length.getter()
{
  return 65;
}

void sub_10043735C(uint64_t a1)
{
}

uint64_t sub_100437378(uint64_t a1)
{
  unint64_t v2 = sub_10043B070();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004373B4(uint64_t a1)
{
  unint64_t v2 = sub_10043B070();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t StandardPublicKey.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100439BB8(a1, a2, a3, &qword_101644B18, (void (*)(void))sub_10043B070);
}

void *StandardPublicKey.init(from:)(void *a1)
{
  return sub_10043B8F8(a1, &qword_1016455A0, (void (*)(void))sub_10043B070);
}

void *sub_100437468@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_100437164(a1, &qword_1016455A0, (void (*)(void))sub_10043B070, a2);
}

uint64_t sub_1004374A4(void *a1)
{
  return StandardPublicKey.encode(to:)(a1, *v1, v1[1]);
}

uint64_t sub_1004374C0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1004911E0(*(void *)a1, *(void *)(a1 + 8), a2);
}

uint64_t static PublicKey.length.getter()
{
  return 57;
}

void sub_1004374D4(uint64_t a1)
{
}

void sub_1004374F0(double a1, uint64_t a2, uint64_t a3, double *a4, uint64_t *a5)
{
  type metadata accessor for __DataStorage();
  swift_allocObject();
  double v9 = a1;
  uint64_t v10 = __DataStorage.init(length:)();
  sub_10072AF34((int *)&v9, 0);
  uint64_t v8 = v10 | 0x4000000000000000;
  *a4 = v9;
  *a5 = v8;
}

uint64_t sub_100437580(uint64_t a1)
{
  unint64_t v2 = sub_10043B0C4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004375BC(uint64_t a1)
{
  unint64_t v2 = sub_10043B0C4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t PublicKey.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100439BB8(a1, a2, a3, &qword_101644B28, (void (*)(void))sub_10043B0C4);
}

void *PublicKey.init(from:)(void *a1)
{
  return sub_10043B8F8(a1, &qword_101645598, (void (*)(void))sub_10043B0C4);
}

void *sub_100437670@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_100437164(a1, &qword_101645598, (void (*)(void))sub_10043B0C4, a2);
}

uint64_t sub_1004376AC(void *a1)
{
  return PublicKey.encode(to:)(a1, *v1, v1[1]);
}

uint64_t sub_1004376C8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10049127C(*(void *)a1, *(void *)(a1 + 8), a2);
}

uint64_t static NearOwnerAdvertisement.length.getter()
{
  return 6;
}

uint64_t NearOwnerAdvertisement.description.getter(uint64_t a1, uint64_t a2)
{
  return sub_100437C04(a1, a2, (void (*)(uint64_t, uint64_t))sub_100264FE8);
}

uint64_t sub_1004376FC(uint64_t a1)
{
  unint64_t v2 = sub_10043B118();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100437738(uint64_t a1)
{
  unint64_t v2 = sub_10043B118();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NearOwnerAdvertisement.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100439BB8(a1, a2, a3, &qword_101644B38, (void (*)(void))sub_10043B118);
}

void *NearOwnerAdvertisement.init(from:)(void *a1)
{
  return sub_10043B8F8(a1, &qword_101645590, (void (*)(void))sub_10043B118);
}

uint64_t sub_1004377EC(uint64_t a1, uint64_t a2)
{
  return sub_100437D50(a1, a2, (void (*)(uint64_t, uint64_t))sub_100264FE8);
}

void *sub_100437804@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_100437164(a1, &qword_101645590, (void (*)(void))sub_10043B118, a2);
}

uint64_t sub_100437840(void *a1)
{
  return NearOwnerAdvertisement.encode(to:)(a1, *v1, v1[1]);
}

uint64_t sub_10043785C(void *a1)
{
  return sub_100491318(*a1, a1[1]);
}

uint64_t static Advertisement.length.getter()
{
  return 28;
}

uint64_t Advertisement.address.getter(uint64_t a1, unint64_t a2)
{
  sub_1000361E0(a1, a2);
  uint64_t v4 = static MACAddress.length.getter();
  sub_100435A9C(v4, a1, a2, &v6);
  return v6;
}

uint64_t sub_1004378B8(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = type metadata accessor for HmacAlgorithm();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = a3;
  unint64_t v25 = a4;
  sub_1000361E0(a3, a4);
  uint64_t v12 = String.utf8Data.getter();
  unint64_t v14 = v13;
  Data.append(_:)();
  sub_10001CFB8(v12, v14);
  uint64_t v15 = v24;
  unint64_t v16 = v25;
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for HmacAlgorithm.sha256(_:), v8);
  sub_1000361E0(v15, v16);
  sub_1000361E0(a1, a2);
  uint64_t v17 = Data.hmac(key:algorithm:)();
  unint64_t v19 = v18;
  sub_10001CFB8(a1, a2);
  sub_10001CFB8(v15, v16);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  sub_100435A9C(6, v17, v19, v22);
  sub_100435400(v22[0], v22[1], &v23);
  sub_10001CFB8(v24, v25);
  return v23;
}

uint64_t SharingCircleWildAdvertisementKey.data.getter(uint64_t a1, unint64_t a2)
{
  return a1;
}

void *NearbyTokenKey.length.unsafeMutableAddressor()
{
  return &static NearbyTokenKey.length;
}

uint64_t Advertisement.nfcPartial.getter(uint64_t a1, unint64_t a2)
{
  return sub_100437B84(a1, a2, 12);
}

uint64_t sub_100437B84(uint64_t a1, unint64_t a2, uint64_t a3)
{
  sub_1000361E0(a1, a2);
  sub_100435A9C(a3, a1, a2, &v7);
  return v7;
}

void *NFCPartialAdvertisement.length.unsafeMutableAddressor()
{
  return &static NFCPartialAdvertisement.length;
}

uint64_t Advertisement.description.getter(uint64_t a1, uint64_t a2)
{
  return sub_100437C04(a1, a2, (void (*)(uint64_t, uint64_t))sub_10025C42C);
}

uint64_t sub_100437C04(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  return RawRepresentable<>.hexString.getter();
}

uint64_t sub_100437C48(uint64_t a1)
{
  unint64_t v2 = sub_10043B16C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100437C84(uint64_t a1)
{
  unint64_t v2 = sub_10043B16C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t Advertisement.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100439BB8(a1, a2, a3, &qword_101644B48, (void (*)(void))sub_10043B16C);
}

void *Advertisement.init(from:)(void *a1)
{
  return sub_10043B8F8(a1, &qword_101645588, (void (*)(void))sub_10043B16C);
}

uint64_t sub_100437D38(uint64_t a1, uint64_t a2)
{
  return sub_100437D50(a1, a2, (void (*)(uint64_t, uint64_t))sub_10025C42C);
}

uint64_t sub_100437D50(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t))
{
  return RawRepresentable<>.hexString.getter();
}

void *sub_100437D98@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_100437164(a1, &qword_101645588, (void (*)(void))sub_10043B16C, a2);
}

uint64_t sub_100437DD4(void *a1)
{
  return Advertisement.encode(to:)(a1, *v1, v1[1]);
}

uint64_t sub_100437DF0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10049131C(*(void *)a1, *(void *)(a1 + 8), a2);
}

void *HashedAdvertisement.length.unsafeMutableAddressor()
{
  return &static HashedAdvertisement.length;
}

uint64_t sub_100437E08(uint64_t a1)
{
  unint64_t v2 = sub_10043B1C0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100437E44(uint64_t a1)
{
  unint64_t v2 = sub_10043B1C0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t HashedAdvertisement.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100439BB8(a1, a2, a3, &qword_101644B58, (void (*)(void))sub_10043B1C0);
}

void *HashedAdvertisement.init(from:)(void *a1)
{
  return sub_10043B8F8(a1, &qword_101645580, (void (*)(void))sub_10043B1C0);
}

void *sub_100437EF8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_100437164(a1, &qword_101645580, (void (*)(void))sub_10043B1C0, a2);
}

uint64_t sub_100437F34(void *a1)
{
  return HashedAdvertisement.encode(to:)(a1, *v1, v1[1]);
}

uint64_t sub_100437F50(uint64_t a1)
{
  unint64_t v2 = sub_10043B214();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100437F8C(uint64_t a1)
{
  unint64_t v2 = sub_10043B214();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t PairingNonce.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100439BB8(a1, a2, a3, &qword_101644B68, (void (*)(void))sub_10043B214);
}

void *PairingNonce.init(from:)(void *a1)
{
  return sub_10043B8F8(a1, &qword_101645578, (void (*)(void))sub_10043B214);
}

void *sub_100438040@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_100437164(a1, &qword_101645578, (void (*)(void))sub_10043B214, a2);
}

uint64_t sub_10043807C(void *a1)
{
  return PairingNonce.encode(to:)(a1, *v1, v1[1]);
}

uint64_t sub_100438098(uint64_t a1)
{
  unint64_t v2 = sub_10043B268();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004380D4(uint64_t a1)
{
  unint64_t v2 = sub_10043B268();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t SharedSecretKey.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100439BB8(a1, a2, a3, &qword_101644B78, (void (*)(void))sub_10043B268);
}

void *SharedSecretKey.init(from:)(void *a1)
{
  return sub_10043B8F8(a1, &qword_101645570, (void (*)(void))sub_10043B268);
}

void *sub_100438188@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_100437164(a1, &qword_101645570, (void (*)(void))sub_10043B268, a2);
}

uint64_t sub_1004381C4(void *a1)
{
  return SharedSecretKey.encode(to:)(a1, *v1, v1[1]);
}

void *AntiTrackingKey.length.unsafeMutableAddressor()
{
  return &static AntiTrackingKey.length;
}

uint64_t static AntiTrackingKey.length.getter()
{
  return 72;
}

uint64_t sub_1004381F4(uint64_t a1)
{
  unint64_t v2 = sub_10043B2BC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100438230(uint64_t a1)
{
  unint64_t v2 = sub_10043B2BC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t AntiTrackingKey.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100439BB8(a1, a2, a3, &qword_101644B88, (void (*)(void))sub_10043B2BC);
}

void *AntiTrackingKey.init(from:)(void *a1)
{
  return sub_10043B8F8(a1, &qword_101645568, (void (*)(void))sub_10043B2BC);
}

void *sub_1004382E4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_100437164(a1, &qword_101645568, (void (*)(void))sub_10043B2BC, a2);
}

uint64_t sub_100438320(void *a1)
{
  return AntiTrackingKey.encode(to:)(a1, *v1, v1[1]);
}

uint64_t sub_10043833C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1004913B8(*(void *)a1, *(void *)(a1 + 8), a2);
}

void *IntermediateKey.length.unsafeMutableAddressor()
{
  return &static IntermediateKey.length;
}

uint64_t sub_100438354(uint64_t a1)
{
  unint64_t v2 = sub_10043B310();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100438390(uint64_t a1)
{
  unint64_t v2 = sub_10043B310();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t IntermediateKey.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100439BB8(a1, a2, a3, &qword_101644B98, (void (*)(void))sub_10043B310);
}

void *IntermediateKey.init(from:)(void *a1)
{
  return sub_10043B8F8(a1, &qword_101645560, (void (*)(void))sub_10043B310);
}

void *sub_100438444@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_100437164(a1, &qword_101645560, (void (*)(void))sub_10043B310, a2);
}

uint64_t sub_100438480(void *a1)
{
  return IntermediateKey.encode(to:)(a1, *v1, v1[1]);
}

void *CommandKey.length.unsafeMutableAddressor()
{
  return &static CommandKey.length;
}

uint64_t sub_1004384A8(uint64_t a1)
{
  unint64_t v2 = sub_10043B364();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004384E4(uint64_t a1)
{
  unint64_t v2 = sub_10043B364();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t CommandKey.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100439BB8(a1, a2, a3, &qword_101644BA8, (void (*)(void))sub_10043B364);
}

void *CommandKey.init(from:)(void *a1)
{
  return sub_10043B8F8(a1, &qword_101645558, (void (*)(void))sub_10043B364);
}

uint64_t sub_100438598@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = result;
  a3[1] = a2;
  return result;
}

void *sub_1004385A0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_100437164(a1, &qword_101645558, (void (*)(void))sub_10043B364, a2);
}

uint64_t sub_1004385DC(void *a1)
{
  return CommandKey.encode(to:)(a1, *v1, v1[1]);
}

void *ConnectionKey.length.unsafeMutableAddressor()
{
  return &static ConnectionKey.length;
}

uint64_t sub_100438604(uint64_t a1)
{
  unint64_t v2 = sub_10043B3B8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100438640(uint64_t a1)
{
  unint64_t v2 = sub_10043B3B8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t ConnectionKey.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100439BB8(a1, a2, a3, &qword_101644BB8, (void (*)(void))sub_10043B3B8);
}

void *ConnectionKey.init(from:)(void *a1)
{
  return sub_10043B8F8(a1, &qword_101645550, (void (*)(void))sub_10043B3B8);
}

void *sub_1004386F4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_100437164(a1, &qword_101645550, (void (*)(void))sub_10043B3B8, a2);
}

uint64_t sub_100438730(void *a1)
{
  return ConnectionKey.encode(to:)(a1, *v1, v1[1]);
}

void *LongTermKey.length.unsafeMutableAddressor()
{
  return &static LongTermKey.length;
}

uint64_t static LongTermKey.length.getter()
{
  return 16;
}

uint64_t sub_100438760(uint64_t a1)
{
  unint64_t v2 = sub_10043B40C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10043879C(uint64_t a1)
{
  unint64_t v2 = sub_10043B40C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t LongTermKey.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100439BB8(a1, a2, a3, &qword_101644BC8, (void (*)(void))sub_10043B40C);
}

void *LongTermKey.init(from:)(void *a1)
{
  return sub_10043B8F8(a1, &qword_101645548, (void (*)(void))sub_10043B40C);
}

void *sub_100438850@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_100437164(a1, &qword_101645548, (void (*)(void))sub_10043B40C, a2);
}

uint64_t sub_10043888C(void *a1)
{
  return LongTermKey.encode(to:)(a1, *v1, v1[1]);
}

uint64_t sub_1004388A8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100491454(*(void *)a1, *(void *)(a1 + 8), a2);
}

uint64_t sub_1004388B4(uint64_t a1)
{
  unint64_t v2 = sub_10043B460();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004388F0(uint64_t a1)
{
  unint64_t v2 = sub_10043B460();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NearbyTokenKey.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100439BB8(a1, a2, a3, &qword_101644BD8, (void (*)(void))sub_10043B460);
}

void *NearbyTokenKey.init(from:)(void *a1)
{
  return sub_10043B8F8(a1, &qword_101645540, (void (*)(void))sub_10043B460);
}

void *sub_1004389A4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_100437164(a1, &qword_101645540, (void (*)(void))sub_10043B460, a2);
}

uint64_t sub_1004389E0(void *a1)
{
  return NearbyTokenKey.encode(to:)(a1, *v1, v1[1]);
}

uint64_t static NFCPartialAdvertisement.length.getter()
{
  return 12;
}

uint64_t sub_100438A04(uint64_t a1)
{
  unint64_t v2 = sub_10043B4B4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100438A40(uint64_t a1)
{
  unint64_t v2 = sub_10043B4B4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t NFCPartialAdvertisement.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100439BB8(a1, a2, a3, &qword_101644BE8, (void (*)(void))sub_10043B4B4);
}

void *NFCPartialAdvertisement.init(from:)(void *a1)
{
  return sub_10043B8F8(a1, &qword_101645538, (void (*)(void))sub_10043B4B4);
}

void *sub_100438AF4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_100437164(a1, &qword_101645538, (void (*)(void))sub_10043B4B4, a2);
}

uint64_t sub_100438B30(void *a1)
{
  return NFCPartialAdvertisement.encode(to:)(a1, *v1, v1[1]);
}

uint64_t sub_100438B4C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10049158C(*(void *)a1, *(void *)(a1 + 8), a2);
}

void *EncryptedBlobE1.length.unsafeMutableAddressor()
{
  return &static EncryptedBlobE1.length;
}

uint64_t static EncryptedBlobE1.length.getter()
{
  return 113;
}

uint64_t sub_100438B6C(uint64_t a1)
{
  unint64_t v2 = sub_10043B508();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100438BA8(uint64_t a1)
{
  unint64_t v2 = sub_10043B508();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t EncryptedBlobE1.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100439BB8(a1, a2, a3, &qword_101644BF8, (void (*)(void))sub_10043B508);
}

void *EncryptedBlobE1.init(from:)(void *a1)
{
  return sub_10043B8F8(a1, &qword_101645530, (void (*)(void))sub_10043B508);
}

void *sub_100438C5C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_100437164(a1, &qword_101645530, (void (*)(void))sub_10043B508, a2);
}

uint64_t sub_100438C98(void *a1)
{
  return EncryptedBlobE1.encode(to:)(a1, *v1, v1[1]);
}

uint64_t sub_100438CB4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100491628(*(void *)a1, *(void *)(a1 + 8), a2);
}

void *FindMyNetworkId.length.unsafeMutableAddressor()
{
  return &static FindMyNetworkId.length;
}

uint64_t FindMyNetworkId.init(altDSID:)()
{
  return sub_10043A77C();
}

uint64_t sub_100438CE4(uint64_t a1)
{
  unint64_t v2 = sub_10043B55C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100438D20(uint64_t a1)
{
  unint64_t v2 = sub_10043B55C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t FindMyNetworkId.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100439BB8(a1, a2, a3, &qword_101644C08, (void (*)(void))sub_10043B55C);
}

void *FindMyNetworkId.init(from:)(void *a1)
{
  return sub_10043B8F8(a1, &qword_101645528, (void (*)(void))sub_10043B55C);
}

void *sub_100438DD4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_100437164(a1, &qword_101645528, (void (*)(void))sub_10043B55C, a2);
}

uint64_t sub_100438E10(void *a1)
{
  return FindMyNetworkId.encode(to:)(a1, *v1, v1[1]);
}

void *EncryptedBlobE2.length.unsafeMutableAddressor()
{
  return &static EncryptedBlobE2.length;
}

uint64_t static EncryptedBlobE2.length.getter()
{
  return 1326;
}

uint64_t sub_100438E40(uint64_t a1)
{
  unint64_t v2 = sub_10043B5B0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100438E7C(uint64_t a1)
{
  unint64_t v2 = sub_10043B5B0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t EncryptedBlobE2.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100439BB8(a1, a2, a3, &qword_101644C18, (void (*)(void))sub_10043B5B0);
}

void *EncryptedBlobE2.init(from:)(void *a1)
{
  return sub_10043B8F8(a1, &qword_101645520, (void (*)(void))sub_10043B5B0);
}

void *sub_100438F30@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_100437164(a1, &qword_101645520, (void (*)(void))sub_10043B5B0, a2);
}

uint64_t sub_100438F6C(void *a1)
{
  return EncryptedBlobE2.encode(to:)(a1, *v1, v1[1]);
}

uint64_t sub_100438F88@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1004916C4(*(void *)a1, *(void *)(a1 + 8), a2);
}

void *EncryptedBlobE3.length.unsafeMutableAddressor()
{
  return &static EncryptedBlobE3.length;
}

uint64_t static EncryptedBlobE3.length.getter()
{
  return 1040;
}

uint64_t sub_100438FA8(uint64_t a1)
{
  unint64_t v2 = sub_10043B604();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100438FE4(uint64_t a1)
{
  unint64_t v2 = sub_10043B604();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t EncryptedBlobE3.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100439BB8(a1, a2, a3, &qword_101644C28, (void (*)(void))sub_10043B604);
}

void *EncryptedBlobE3.init(from:)(void *a1)
{
  return sub_10043B8F8(a1, &qword_101645518, (void (*)(void))sub_10043B604);
}

void *sub_100439098@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_100437164(a1, &qword_101645518, (void (*)(void))sub_10043B604, a2);
}

uint64_t sub_1004390D4(void *a1)
{
  return EncryptedBlobE3.encode(to:)(a1, *v1, v1[1]);
}

uint64_t sub_1004390F0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100491758(*(void *)a1, *(void *)(a1 + 8), a2);
}

void *EncryptedBlobE4.length.unsafeMutableAddressor()
{
  return &static EncryptedBlobE4.length;
}

uint64_t static EncryptedBlobE4.length.getter()
{
  return 1286;
}

uint64_t sub_100439110(uint64_t a1)
{
  unint64_t v2 = sub_10043B658();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10043914C(uint64_t a1)
{
  unint64_t v2 = sub_10043B658();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t EncryptedBlobE4.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100439BB8(a1, a2, a3, &qword_101644C38, (void (*)(void))sub_10043B658);
}

void *EncryptedBlobE4.init(from:)(void *a1)
{
  return sub_10043B8F8(a1, &qword_101645510, (void (*)(void))sub_10043B658);
}

void *sub_100439200@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_100437164(a1, &qword_101645510, (void (*)(void))sub_10043B658, a2);
}

uint64_t sub_10043923C(void *a1)
{
  return EncryptedBlobE4.encode(to:)(a1, *v1, v1[1]);
}

uint64_t sub_100439258@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1004917EC(*(void *)a1, *(void *)(a1 + 8), a2);
}

uint64_t static SikPub.length.getter()
{
  return 100;
}

uint64_t sub_10043926C(uint64_t a1)
{
  unint64_t v2 = sub_10043B6AC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004392A8(uint64_t a1)
{
  unint64_t v2 = sub_10043B6AC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t RefKey.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100439BB8(a1, a2, a3, &qword_101644C48, (void (*)(void))sub_10043B6AC);
}

void *RefKey.init(from:)(void *a1)
{
  return sub_10043B8F8(a1, &qword_101645508, (void (*)(void))sub_10043B6AC);
}

void *sub_10043935C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_100437164(a1, &qword_101645508, (void (*)(void))sub_10043B6AC, a2);
}

uint64_t sub_100439398(void *a1)
{
  return RefKey.encode(to:)(a1, *v1, v1[1]);
}

uint64_t sub_1004393B4(void *a1)
{
  return sub_100491880(*a1, a1[1]);
}

uint64_t sub_1004393C0(uint64_t a1)
{
  unint64_t v2 = sub_10043B700();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004393FC(uint64_t a1)
{
  unint64_t v2 = sub_10043B700();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t SikPub.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100439BB8(a1, a2, a3, &qword_101644C58, (void (*)(void))sub_10043B700);
}

void *SikPub.init(from:)(void *a1)
{
  return sub_10043B8F8(a1, &qword_101645500, (void (*)(void))sub_10043B700);
}

void *sub_1004394B0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_100437164(a1, &qword_101645500, (void (*)(void))sub_10043B700, a2);
}

uint64_t sub_1004394EC(void *a1)
{
  return SikPub.encode(to:)(a1, *v1, v1[1]);
}

uint64_t sub_100439508(uint64_t a1)
{
  unint64_t v2 = sub_10043B754();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100439544(uint64_t a1)
{
  unint64_t v2 = sub_10043B754();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t CollaborativeKeyGen.C1.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100439BB8(a1, a2, a3, &qword_101644C68, (void (*)(void))sub_10043B754);
}

void *CollaborativeKeyGen.C1.init(from:)(void *a1)
{
  return sub_10043B8F8(a1, &qword_1016454F8, (void (*)(void))sub_10043B754);
}

void *sub_1004395F8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_100437164(a1, &qword_1016454F8, (void (*)(void))sub_10043B754, a2);
}

uint64_t sub_100439634(void *a1)
{
  return CollaborativeKeyGen.C1.encode(to:)(a1, *v1, v1[1]);
}

uint64_t static CollaborativeKeyGen.v1.C2.length.getter()
{
  return 89;
}

uint64_t sub_100439658(uint64_t a1)
{
  unint64_t v2 = sub_10043B7A8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100439694(uint64_t a1)
{
  unint64_t v2 = sub_10043B7A8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t CollaborativeKeyGen.v1.C2.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100439BB8(a1, a2, a3, &qword_101644C78, (void (*)(void))sub_10043B7A8);
}

void *CollaborativeKeyGen.v1.C2.init(from:)(void *a1)
{
  return sub_10043B8F8(a1, &qword_1016454F0, (void (*)(void))sub_10043B7A8);
}

void *sub_100439748@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_100437164(a1, &qword_1016454F0, (void (*)(void))sub_10043B7A8, a2);
}

uint64_t sub_100439784(void *a1)
{
  return CollaborativeKeyGen.v1.C2.encode(to:)(a1, *v1, v1[1]);
}

uint64_t sub_1004397A0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100491920(*(void *)a1, *(void *)(a1 + 8), a2);
}

void *CollaborativeKeyGen.v1.C3.length.unsafeMutableAddressor()
{
  return &static CollaborativeKeyGen.v1.C3.length;
}

uint64_t static CollaborativeKeyGen.v1.C3.length.getter()
{
  return 60;
}

uint64_t sub_1004397C0(uint64_t a1)
{
  unint64_t v2 = sub_10043B7FC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004397FC(uint64_t a1)
{
  unint64_t v2 = sub_10043B7FC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t CollaborativeKeyGen.v1.C3.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100439BB8(a1, a2, a3, &qword_101644C88, (void (*)(void))sub_10043B7FC);
}

void *CollaborativeKeyGen.v1.C3.init(from:)(void *a1)
{
  return sub_10043B8F8(a1, &qword_1016454E8, (void (*)(void))sub_10043B7FC);
}

void *sub_1004398B0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_100437164(a1, &qword_1016454E8, (void (*)(void))sub_10043B7FC, a2);
}

uint64_t sub_1004398EC(void *a1)
{
  return CollaborativeKeyGen.v1.C3.encode(to:)(a1, *v1, v1[1]);
}

uint64_t sub_100439908@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1004919BC(*(void *)a1, *(void *)(a1 + 8), a2);
}

uint64_t static CollaborativeKeyGen.v2.C2.length.getter()
{
  return 114;
}

uint64_t sub_10043991C(uint64_t a1)
{
  unint64_t v2 = sub_10043B850();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100439958(uint64_t a1)
{
  unint64_t v2 = sub_10043B850();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t CollaborativeKeyGen.v2.C2.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100439BB8(a1, a2, a3, &qword_101644C98, (void (*)(void))sub_10043B850);
}

void *CollaborativeKeyGen.v2.C2.init(from:)(void *a1)
{
  return sub_10043B8F8(a1, &qword_1016454E0, (void (*)(void))sub_10043B850);
}

void *sub_100439A0C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_100437164(a1, &qword_1016454E0, (void (*)(void))sub_10043B850, a2);
}

uint64_t sub_100439A48(void *a1)
{
  return CollaborativeKeyGen.v2.C2.encode(to:)(a1, *v1, v1[1]);
}

uint64_t sub_100439A64@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100491A58(*(void *)a1, *(void *)(a1 + 8), a2);
}

void *CollaborativeKeyGen.v2.C3.length.unsafeMutableAddressor()
{
  return &static CollaborativeKeyGen.v2.C3.length;
}

uint64_t sub_100439A7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 7955819 && a2 == 0xE300000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_100439B04(uint64_t a1)
{
  unint64_t v2 = sub_10043B8A4();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100439B40(uint64_t a1)
{
  unint64_t v2 = sub_10043B8A4();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t CollaborativeKeyGen.v2.C3.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_100439BB8(a1, a2, a3, &qword_101644CA8, (void (*)(void))sub_10043B8A4);
}

uint64_t sub_100439BB8(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, void (*a5)(void))
{
  uint64_t v14 = a3;
  uint64_t v8 = sub_10000588C(a4);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  a5();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v15 = a2;
  uint64_t v16 = v14;
  sub_10043AE48();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

void *CollaborativeKeyGen.v2.C3.init(from:)(void *a1)
{
  return sub_10043B8F8(a1, &qword_1016454D0, (void (*)(void))sub_10043B8A4);
}

void *sub_100439D50@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_100437164(a1, &qword_1016454D0, (void (*)(void))sub_10043B8A4, a2);
}

uint64_t sub_100439D8C(void *a1)
{
  return CollaborativeKeyGen.v2.C3.encode(to:)(a1, *v1, v1[1]);
}

uint64_t _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v8) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_26:
        __break(1u);
LABEL_27:
        __break(1u);
LABEL_28:
        __break(1u);
LABEL_29:
        __break(1u);
        JUMPOUT(0x10043A010);
      }
      uint64_t v8 = (int)v8;
LABEL_6:
      switch(a4 >> 62)
      {
        case 1uLL:
          LODWORD(v12) = HIDWORD(a3) - a3;
          if (__OFSUB__(HIDWORD(a3), a3)) {
            goto LABEL_27;
          }
          uint64_t v12 = (int)v12;
LABEL_11:
          if (v8 == v12)
          {
            if (v8 < 1)
            {
              char v17 = 1;
            }
            else
            {
              switch(a2 >> 62)
              {
                case 1uLL:
                  if (a1 >> 32 < (int)a1) {
                    goto LABEL_29;
                  }
                  sub_1000361E0(a3, a4);
                  sub_1000361E0(a1, a2);
                  char v17 = sub_100BFBE64((int)a1, a1 >> 32, a2 & 0x3FFFFFFFFFFFFFFFLL, a3, a4);
                  sub_10001CFB8(a3, a4);
                  uint64_t v18 = a1;
                  unint64_t v19 = a2;
                  break;
                case 2uLL:
                  uint64_t v20 = a2 & 0x3FFFFFFFFFFFFFFFLL;
                  uint64_t v21 = *(void *)(a1 + 16);
                  uint64_t v22 = *(void *)(a1 + 24);
                  sub_1000361E0(a3, a4);
                  swift_retain();
                  swift_retain();
                  char v17 = sub_100BFBE64(v21, v22, v20, a3, a4);
                  sub_10001CFB8(a3, a4);
                  swift_release();
                  swift_release();
                  return v17 & 1;
                case 3uLL:
                  sub_1000361E0(a3, a4);
                  uint64_t v16 = 0;
                  uint64_t v15 = 0;
                  goto LABEL_22;
                default:
                  sub_1000361E0(a3, a4);
                  uint64_t v15 = a2 & 0xFFFFFFFFFFFFFFLL;
                  uint64_t v16 = a1;
LABEL_22:
                  char v17 = sub_100BFBD8C(v16, v15, a3, a4);
                  uint64_t v18 = a3;
                  unint64_t v19 = a4;
                  break;
              }
              sub_10001CFB8(v18, v19);
            }
          }
          else
          {
            char v17 = 0;
          }
          return v17 & 1;
        case 2uLL:
          uint64_t v14 = *(void *)(a3 + 16);
          uint64_t v13 = *(void *)(a3 + 24);
          BOOL v11 = __OFSUB__(v13, v14);
          uint64_t v12 = v13 - v14;
          if (!v11) {
            goto LABEL_11;
          }
          goto LABEL_28;
        case 3uLL:
          char v17 = v8 == 0;
          return v17 & 1;
        default:
          uint64_t v12 = BYTE6(a4);
          goto LABEL_11;
      }
    case 2uLL:
      uint64_t v10 = *(void *)(a1 + 16);
      uint64_t v9 = *(void *)(a1 + 24);
      BOOL v11 = __OFSUB__(v9, v10);
      uint64_t v8 = v9 - v10;
      if (!v11) {
        goto LABEL_6;
      }
      goto LABEL_26;
    case 3uLL:
      goto LABEL_6;
    default:
      uint64_t v8 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_10043A040(uint64_t a1, unint64_t a2)
{
  if (qword_101636AE8 != -1) {
    swift_once();
  }
  if (_s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(a1, a2, qword_101644AA0, *(unint64_t *)algn_101644AA8))
  {
    static os_log_type_t.error.getter();
    if (qword_101637230 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_10013019C();
    swift_allocError();
    *(void *)uint64_t v4 = 0;
    *(void *)(v4 + 8) = 0;
    *(unsigned char *)(v4 + 16) = 2;
    goto LABEL_20;
  }
  unint64_t v5 = a2 >> 62;
  uint64_t v6 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v7) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_23:
        __break(1u);
        goto LABEL_24;
      }
      uint64_t v7 = (int)v7;
LABEL_12:
      if (v7 != 85)
      {
        if (!v5)
        {
          uint64_t v6 = BYTE6(a2);
          goto LABEL_19;
        }
        if (v5 != 1)
        {
          uint64_t v12 = *(void *)(a1 + 16);
          uint64_t v11 = *(void *)(a1 + 24);
          uint64_t v6 = v11 - v12;
          if (!__OFSUB__(v11, v12)) {
            goto LABEL_19;
          }
LABEL_25:
          __break(1u);
          JUMPOUT(0x10043A240);
        }
        if (!__OFSUB__(HIDWORD(a1), a1))
        {
          uint64_t v6 = HIDWORD(a1) - (int)a1;
LABEL_19:
          sub_10013019C();
          swift_allocError();
          *(void *)uint64_t v13 = 85;
          *(void *)(v13 + 8) = v6;
          *(unsigned char *)(v13 + 16) = 0;
LABEL_20:
          swift_willThrow();
          sub_10001CFB8(a1, a2);
          return a1;
        }
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      return a1;
    case 2uLL:
      uint64_t v9 = *(void *)(a1 + 16);
      uint64_t v8 = *(void *)(a1 + 24);
      BOOL v10 = __OFSUB__(v8, v9);
      uint64_t v7 = v8 - v9;
      if (!v10) {
        goto LABEL_12;
      }
      goto LABEL_23;
    case 3uLL:
      goto LABEL_19;
    default:
      uint64_t v7 = BYTE6(a2);
      goto LABEL_12;
  }
}

uint64_t sub_10043A250(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3 = a2 >> 62;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v7) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_18:
        __break(1u);
        goto LABEL_19;
      }
      uint64_t v7 = (int)v7;
LABEL_6:
      if (v7 != a3)
      {
        if (!v3)
        {
          uint64_t v11 = BYTE6(a2);
          goto LABEL_15;
        }
        if (v3 != 1)
        {
          uint64_t v13 = *(void *)(a1 + 16);
          uint64_t v12 = *(void *)(a1 + 24);
          uint64_t v11 = v12 - v13;
          if (!__OFSUB__(v12, v13)) {
            goto LABEL_15;
          }
LABEL_20:
          __break(1u);
          JUMPOUT(0x10043A37CLL);
        }
        if (!__OFSUB__(HIDWORD(a1), a1))
        {
          uint64_t v11 = HIDWORD(a1) - (int)a1;
LABEL_15:
          sub_10013019C();
          swift_allocError();
          *(void *)uint64_t v14 = a3;
          *(void *)(v14 + 8) = v11;
          *(unsigned char *)(v14 + 16) = 0;
          swift_willThrow();
          sub_10001CFB8(a1, a2);
          return a1;
        }
LABEL_19:
        __break(1u);
        goto LABEL_20;
      }
      return a1;
    case 2uLL:
      uint64_t v9 = *(void *)(a1 + 16);
      uint64_t v8 = *(void *)(a1 + 24);
      BOOL v10 = __OFSUB__(v8, v9);
      uint64_t v7 = v8 - v9;
      if (!v10) {
        goto LABEL_6;
      }
      goto LABEL_18;
    case 3uLL:
      if (!a3) {
        return a1;
      }
      uint64_t v11 = 0;
      goto LABEL_15;
    default:
      uint64_t v7 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_10043A38C(uint64_t a1, unint64_t a2)
{
  if (qword_101636AF8 != -1) {
    swift_once();
  }
  if (_s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(a1, a2, qword_101644AC0, *(unint64_t *)algn_101644AC8))
  {
    static os_log_type_t.error.getter();
    if (qword_101637230 != -1) {
      swift_once();
    }
    uint64_t v3 = 2;
    os_log(_:dso:log:_:_:)();
    sub_10013019C();
    swift_allocError();
    *(void *)uint64_t v6 = 0;
    *(void *)(v6 + 8) = 0;
    *(unsigned char *)(v6 + 16) = 2;
    swift_willThrow();
  }
  else
  {
    sub_1000361E0(a1, a2);
    uint64_t v7 = sub_10043A250(a1, a2, 57);
    if (!v2)
    {
      uint64_t v3 = v7;
      uint64_t v9 = sub_100A94760(a1, a2);
      sub_10001CFB8(v9, v10);
      sub_10001CFB8(a1, a2);
      return v3;
    }
  }
  sub_10001CFB8(a1, a2);
  return v3;
}

uint64_t sub_10043A56C(uint64_t a1, unint64_t a2)
{
  if (qword_101636AF0 != -1) {
    swift_once();
  }
  if (_s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(a1, a2, qword_101644AB0, *(unint64_t *)algn_101644AB8))
  {
    static os_log_type_t.error.getter();
    if (qword_101637230 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_10013019C();
    swift_allocError();
    *(void *)uint64_t v4 = 0;
    *(void *)(v4 + 8) = 0;
    *(unsigned char *)(v4 + 16) = 2;
    goto LABEL_20;
  }
  unint64_t v5 = a2 >> 62;
  uint64_t v6 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v7) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_23:
        __break(1u);
        goto LABEL_24;
      }
      uint64_t v7 = (int)v7;
LABEL_12:
      if (v7 != 65)
      {
        if (!v5)
        {
          uint64_t v6 = BYTE6(a2);
          goto LABEL_19;
        }
        if (v5 != 1)
        {
          uint64_t v12 = *(void *)(a1 + 16);
          uint64_t v11 = *(void *)(a1 + 24);
          uint64_t v6 = v11 - v12;
          if (!__OFSUB__(v11, v12)) {
            goto LABEL_19;
          }
LABEL_25:
          __break(1u);
          JUMPOUT(0x10043A76CLL);
        }
        if (!__OFSUB__(HIDWORD(a1), a1))
        {
          uint64_t v6 = HIDWORD(a1) - (int)a1;
LABEL_19:
          sub_10013019C();
          swift_allocError();
          *(void *)uint64_t v13 = 65;
          *(void *)(v13 + 8) = v6;
          *(unsigned char *)(v13 + 16) = 0;
LABEL_20:
          swift_willThrow();
          sub_10001CFB8(a1, a2);
          return a1;
        }
LABEL_24:
        __break(1u);
        goto LABEL_25;
      }
      return a1;
    case 2uLL:
      uint64_t v9 = *(void *)(a1 + 16);
      uint64_t v8 = *(void *)(a1 + 24);
      BOOL v10 = __OFSUB__(v8, v9);
      uint64_t v7 = v8 - v9;
      if (!v10) {
        goto LABEL_12;
      }
      goto LABEL_23;
    case 3uLL:
      goto LABEL_19;
    default:
      uint64_t v7 = BYTE6(a2);
      goto LABEL_12;
  }
}

uint64_t sub_10043A77C()
{
  uint64_t v0 = type metadata accessor for HashAlgorithm();
  uint64_t v34 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v27 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for String.Encoding();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  static String.Encoding.utf8.getter();
  uint64_t v7 = String.data(using:allowLossyConversion:)();
  unint64_t v9 = v8;
  swift_bridgeObjectRelease();
  BOOL v10 = *(void (**)(char *, uint64_t))(v4 + 8);
  v10(v6, v3);
  if (v9 >> 60 == 15) {
    goto LABEL_6;
  }
  uint64_t v33 = v7;
  static String.Encoding.utf8.getter();
  uint64_t v11 = String.data(using:allowLossyConversion:)();
  unint64_t v13 = v12;
  v10(v6, v3);
  if (v13 >> 60 == 15)
  {
LABEL_5:
    sub_100037A24(v33, v9);
LABEL_6:
    sub_10013019C();
    swift_allocError();
    *(_OWORD *)uint64_t v16 = xmmword_101354080;
    *(unsigned char *)(v16 + 16) = 2;
    return swift_willThrow();
  }
  uint64_t v32 = v11;
  static String.Encoding.utf8.getter();
  uint64_t v31 = String.data(using:allowLossyConversion:)();
  unint64_t v15 = v14;
  v10(v6, v3);
  if (v15 >> 60 == 15)
  {
    sub_100037A24(v32, v13);
    goto LABEL_5;
  }
  unint64_t v18 = v15;
  uint64_t v19 = v32;
  uint64_t v36 = v32;
  unint64_t v37 = v13;
  sub_1000361E0(v32, v13);
  uint64_t v20 = v33;
  Data.append(_:)();
  unint64_t v30 = v18;
  Data.append(_:)();
  uint64_t v21 = v36;
  unint64_t v22 = v37;
  uint64_t v23 = v34;
  (*(void (**)(char *, void, uint64_t))(v34 + 104))(v2, enum case for HashAlgorithm.sha256(_:), v0);
  sub_1000361E0(v21, v22);
  uint64_t v24 = Data.hash(algorithm:)();
  unint64_t v28 = v25;
  uint64_t v29 = v24;
  sub_10001CFB8(v21, v22);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v2, v0);
  sub_10001CFB8(v36, v37);
  uint64_t v26 = v38;
  sub_10043552C(v29, v28, &v35);
  sub_100037A24(v20, v9);
  sub_100037A24(v19, v13);
  uint64_t result = sub_100037A24(v31, v30);
  if (!v26) {
    return v35;
  }
  return result;
}

uint64_t sub_10043AAFC(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = MACAddress.data.getter();
  unint64_t v8 = v7;
  unint64_t v11 = v7;
  sub_1000361E0(v6, v7);
  Data.subscript.getter();
  sub_10001CFB8(v6, v8);
  Data._Representation.subscript.setter();
  sub_1000361E0(v6, v11);
  sub_1000361E0(v6, v11);
  sub_1000361E0(a2, a3);
  sub_100A42CBC(a2, a3);
  sub_10001CFB8(a2, a3);
  uint64_t v9 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(a1, v9);
  sub_10001CFB8(v6, v11);
  sub_10001CFB8(v6, v11);
  return v6;
}

unint64_t sub_10043AC30()
{
  unint64_t result = qword_101644AD8;
  if (!qword_101644AD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644AD8);
  }
  return result;
}

void *sub_10043AC84(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_1016455C0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v7 = sub_10001CD44(a1, a1[3]);
  sub_10043AC30();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  else
  {
    sub_100037AA0();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    unint64_t v7 = v9;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  return v7;
}

unint64_t sub_10043ADF4()
{
  unint64_t result = qword_101644AE8;
  if (!qword_101644AE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644AE8);
  }
  return result;
}

unint64_t sub_10043AE48()
{
  unint64_t result = qword_101644AF0;
  if (!qword_101644AF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644AF0);
  }
  return result;
}

uint64_t sub_10043AE9C(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2 >> 62;
  uint64_t v5 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v6) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1))
      {
        __break(1u);
LABEL_16:
        __break(1u);
        goto LABEL_17;
      }
      uint64_t v6 = (int)v6;
LABEL_6:
      if (v6 != 174)
      {
        if (!v2)
        {
          uint64_t v5 = BYTE6(a2);
          goto LABEL_13;
        }
        if (v2 != 1)
        {
          uint64_t v11 = *(void *)(a1 + 16);
          uint64_t v10 = *(void *)(a1 + 24);
          uint64_t v5 = v10 - v11;
          if (!__OFSUB__(v10, v11)) {
            goto LABEL_13;
          }
LABEL_18:
          __break(1u);
          JUMPOUT(0x10043AFB8);
        }
        if (!__OFSUB__(HIDWORD(a1), a1))
        {
          uint64_t v5 = HIDWORD(a1) - (int)a1;
LABEL_13:
          sub_10013019C();
          swift_allocError();
          *(void *)uint64_t v12 = 174;
          *(void *)(v12 + 8) = v5;
          *(unsigned char *)(v12 + 16) = 0;
          swift_willThrow();
          sub_10001CFB8(a1, a2);
          return a1;
        }
LABEL_17:
        __break(1u);
        goto LABEL_18;
      }
      return a1;
    case 2uLL:
      uint64_t v8 = *(void *)(a1 + 16);
      uint64_t v7 = *(void *)(a1 + 24);
      BOOL v9 = __OFSUB__(v7, v8);
      uint64_t v6 = v7 - v8;
      if (!v9) {
        goto LABEL_6;
      }
      goto LABEL_16;
    case 3uLL:
      goto LABEL_13;
    default:
      uint64_t v6 = BYTE6(a2);
      goto LABEL_6;
  }
}

unint64_t sub_10043AFC8()
{
  unint64_t result = qword_101644B00;
  if (!qword_101644B00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644B00);
  }
  return result;
}

unint64_t sub_10043B01C()
{
  unint64_t result = qword_101644B10;
  if (!qword_101644B10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644B10);
  }
  return result;
}

unint64_t sub_10043B070()
{
  unint64_t result = qword_101644B20;
  if (!qword_101644B20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644B20);
  }
  return result;
}

unint64_t sub_10043B0C4()
{
  unint64_t result = qword_101644B30;
  if (!qword_101644B30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644B30);
  }
  return result;
}

unint64_t sub_10043B118()
{
  unint64_t result = qword_101644B40;
  if (!qword_101644B40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644B40);
  }
  return result;
}

unint64_t sub_10043B16C()
{
  unint64_t result = qword_101644B50;
  if (!qword_101644B50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644B50);
  }
  return result;
}

unint64_t sub_10043B1C0()
{
  unint64_t result = qword_101644B60;
  if (!qword_101644B60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644B60);
  }
  return result;
}

unint64_t sub_10043B214()
{
  unint64_t result = qword_101644B70;
  if (!qword_101644B70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644B70);
  }
  return result;
}

unint64_t sub_10043B268()
{
  unint64_t result = qword_101644B80;
  if (!qword_101644B80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644B80);
  }
  return result;
}

unint64_t sub_10043B2BC()
{
  unint64_t result = qword_101644B90;
  if (!qword_101644B90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644B90);
  }
  return result;
}

unint64_t sub_10043B310()
{
  unint64_t result = qword_101644BA0;
  if (!qword_101644BA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644BA0);
  }
  return result;
}

unint64_t sub_10043B364()
{
  unint64_t result = qword_101644BB0;
  if (!qword_101644BB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644BB0);
  }
  return result;
}

unint64_t sub_10043B3B8()
{
  unint64_t result = qword_101644BC0;
  if (!qword_101644BC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644BC0);
  }
  return result;
}

unint64_t sub_10043B40C()
{
  unint64_t result = qword_101644BD0;
  if (!qword_101644BD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644BD0);
  }
  return result;
}

unint64_t sub_10043B460()
{
  unint64_t result = qword_101644BE0;
  if (!qword_101644BE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644BE0);
  }
  return result;
}

unint64_t sub_10043B4B4()
{
  unint64_t result = qword_101644BF0;
  if (!qword_101644BF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644BF0);
  }
  return result;
}

unint64_t sub_10043B508()
{
  unint64_t result = qword_101644C00;
  if (!qword_101644C00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644C00);
  }
  return result;
}

unint64_t sub_10043B55C()
{
  unint64_t result = qword_101644C10;
  if (!qword_101644C10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644C10);
  }
  return result;
}

unint64_t sub_10043B5B0()
{
  unint64_t result = qword_101644C20;
  if (!qword_101644C20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644C20);
  }
  return result;
}

unint64_t sub_10043B604()
{
  unint64_t result = qword_101644C30;
  if (!qword_101644C30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644C30);
  }
  return result;
}

unint64_t sub_10043B658()
{
  unint64_t result = qword_101644C40;
  if (!qword_101644C40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644C40);
  }
  return result;
}

unint64_t sub_10043B6AC()
{
  unint64_t result = qword_101644C50;
  if (!qword_101644C50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644C50);
  }
  return result;
}

unint64_t sub_10043B700()
{
  unint64_t result = qword_101644C60;
  if (!qword_101644C60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644C60);
  }
  return result;
}

unint64_t sub_10043B754()
{
  unint64_t result = qword_101644C70;
  if (!qword_101644C70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644C70);
  }
  return result;
}

unint64_t sub_10043B7A8()
{
  unint64_t result = qword_101644C80;
  if (!qword_101644C80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644C80);
  }
  return result;
}

unint64_t sub_10043B7FC()
{
  unint64_t result = qword_101644C90;
  if (!qword_101644C90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644C90);
  }
  return result;
}

unint64_t sub_10043B850()
{
  unint64_t result = qword_101644CA0;
  if (!qword_101644CA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644CA0);
  }
  return result;
}

unint64_t sub_10043B8A4()
{
  unint64_t result = qword_101644CB0;
  if (!qword_101644CB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644CB0);
  }
  return result;
}

void *sub_10043B8F8(void *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t v6 = sub_10000588C(a2);
  uint64_t v13 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v9 = sub_10001CD44(a1, a1[3]);
  a3();
  uint64_t v10 = v9;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v3)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  else
  {
    sub_100442580();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v6);
    uint64_t v10 = v12;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  return v10;
}

unint64_t sub_10043BA80()
{
  unint64_t result = qword_101644CB8;
  if (!qword_101644CB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644CB8);
  }
  return result;
}

unint64_t sub_10043BAD4(uint64_t a1)
{
  unint64_t result = sub_10043BAFC();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10043BAFC()
{
  unint64_t result = qword_101644CC0;
  if (!qword_101644CC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644CC0);
  }
  return result;
}

unint64_t sub_10043BB50(uint64_t a1)
{
  unint64_t result = sub_10043BB78();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10043BB78()
{
  unint64_t result = qword_101644CC8;
  if (!qword_101644CC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644CC8);
  }
  return result;
}

uint64_t sub_10043BBCC(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10043FFE8(a1, a2, a3, (uint64_t (*)(void))sub_10043BC20, (uint64_t (*)(void))sub_10043BC74, (uint64_t (*)(void))sub_10043BCC8, (uint64_t (*)(void))sub_10043BD1C);
}

unint64_t sub_10043BC20()
{
  unint64_t result = qword_101644CD0;
  if (!qword_101644CD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644CD0);
  }
  return result;
}

unint64_t sub_10043BC74()
{
  unint64_t result = qword_101644CD8;
  if (!qword_101644CD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644CD8);
  }
  return result;
}

unint64_t sub_10043BCC8()
{
  unint64_t result = qword_101644CE0;
  if (!qword_101644CE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644CE0);
  }
  return result;
}

unint64_t sub_10043BD1C()
{
  unint64_t result = qword_101644CE8;
  if (!qword_101644CE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644CE8);
  }
  return result;
}

unint64_t sub_10043BD74()
{
  unint64_t result = qword_101644CF0;
  if (!qword_101644CF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644CF0);
  }
  return result;
}

unint64_t sub_10043BDC8(uint64_t a1)
{
  unint64_t result = sub_10043BDF0();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10043BDF0()
{
  unint64_t result = qword_101644CF8;
  if (!qword_101644CF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644CF8);
  }
  return result;
}

uint64_t sub_10043BE44(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10043FFE8(a1, a2, a3, (uint64_t (*)(void))sub_10043BE98, (uint64_t (*)(void))sub_10043BEEC, (uint64_t (*)(void))sub_10043BF40, (uint64_t (*)(void))sub_10043BF94);
}

unint64_t sub_10043BE98()
{
  unint64_t result = qword_101644D00;
  if (!qword_101644D00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644D00);
  }
  return result;
}

unint64_t sub_10043BEEC()
{
  unint64_t result = qword_101644D08;
  if (!qword_101644D08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644D08);
  }
  return result;
}

unint64_t sub_10043BF40()
{
  unint64_t result = qword_101644D10;
  if (!qword_101644D10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644D10);
  }
  return result;
}

unint64_t sub_10043BF94()
{
  unint64_t result = qword_101644D18;
  if (!qword_101644D18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644D18);
  }
  return result;
}

unint64_t sub_10043BFEC()
{
  unint64_t result = qword_101644D20;
  if (!qword_101644D20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644D20);
  }
  return result;
}

unint64_t sub_10043C040(uint64_t a1)
{
  unint64_t result = sub_10043C068();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10043C068()
{
  unint64_t result = qword_101644D28;
  if (!qword_101644D28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644D28);
  }
  return result;
}

uint64_t sub_10043C0BC(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10043FFE8(a1, a2, a3, (uint64_t (*)(void))sub_10043C110, (uint64_t (*)(void))sub_10043C164, (uint64_t (*)(void))sub_10043C1B8, (uint64_t (*)(void))sub_10043C20C);
}

unint64_t sub_10043C110()
{
  unint64_t result = qword_10165DD70;
  if (!qword_10165DD70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165DD70);
  }
  return result;
}

unint64_t sub_10043C164()
{
  unint64_t result = qword_10166C850;
  if (!qword_10166C850)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166C850);
  }
  return result;
}

unint64_t sub_10043C1B8()
{
  unint64_t result = qword_101644D30;
  if (!qword_101644D30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644D30);
  }
  return result;
}

unint64_t sub_10043C20C()
{
  unint64_t result = qword_101644D38;
  if (!qword_101644D38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644D38);
  }
  return result;
}

unint64_t sub_10043C264()
{
  unint64_t result = qword_101644D40;
  if (!qword_101644D40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644D40);
  }
  return result;
}

unint64_t sub_10043C2B8(uint64_t a1)
{
  unint64_t result = sub_10043C2E0();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10043C2E0()
{
  unint64_t result = qword_101644D48;
  if (!qword_101644D48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644D48);
  }
  return result;
}

uint64_t sub_10043C334(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10043FFE8(a1, a2, a3, (uint64_t (*)(void))sub_10043C388, (uint64_t (*)(void))sub_10043C3DC, (uint64_t (*)(void))sub_10043C430, (uint64_t (*)(void))sub_10043C484);
}

unint64_t sub_10043C388()
{
  unint64_t result = qword_101644D50;
  if (!qword_101644D50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644D50);
  }
  return result;
}

unint64_t sub_10043C3DC()
{
  unint64_t result = qword_101644D58;
  if (!qword_101644D58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644D58);
  }
  return result;
}

unint64_t sub_10043C430()
{
  unint64_t result = qword_101644D60;
  if (!qword_101644D60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644D60);
  }
  return result;
}

unint64_t sub_10043C484()
{
  unint64_t result = qword_101644D68;
  if (!qword_101644D68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644D68);
  }
  return result;
}

unint64_t sub_10043C4DC()
{
  unint64_t result = qword_101644D70;
  if (!qword_101644D70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644D70);
  }
  return result;
}

unint64_t sub_10043C530(uint64_t a1)
{
  unint64_t result = sub_10043C558();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10043C558()
{
  unint64_t result = qword_101644D78;
  if (!qword_101644D78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644D78);
  }
  return result;
}

uint64_t sub_10043C5AC(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10043FFE8(a1, a2, a3, (uint64_t (*)(void))sub_10043C600, (uint64_t (*)(void))sub_10043C654, (uint64_t (*)(void))sub_10043C6A8, (uint64_t (*)(void))sub_10043C6FC);
}

unint64_t sub_10043C600()
{
  unint64_t result = qword_10166C830;
  if (!qword_10166C830)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10166C830);
  }
  return result;
}

unint64_t sub_10043C654()
{
  unint64_t result = qword_10165DDA0;
  if (!qword_10165DDA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10165DDA0);
  }
  return result;
}

unint64_t sub_10043C6A8()
{
  unint64_t result = qword_101644D80;
  if (!qword_101644D80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644D80);
  }
  return result;
}

unint64_t sub_10043C6FC()
{
  unint64_t result = qword_101644D88;
  if (!qword_101644D88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644D88);
  }
  return result;
}

unint64_t sub_10043C754()
{
  unint64_t result = qword_101644D90;
  if (!qword_101644D90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644D90);
  }
  return result;
}

unint64_t sub_10043C7A8(uint64_t a1)
{
  unint64_t result = sub_10043C7D0();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10043C7D0()
{
  unint64_t result = qword_101644D98;
  if (!qword_101644D98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644D98);
  }
  return result;
}

uint64_t sub_10043C824(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10043FFE8(a1, a2, a3, (uint64_t (*)(void))sub_10026D3A0, (uint64_t (*)(void))sub_10026C650, (uint64_t (*)(void))sub_10043C878, (uint64_t (*)(void))sub_100264FE8);
}

unint64_t sub_10043C878()
{
  unint64_t result = qword_101644DA0;
  if (!qword_101644DA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644DA0);
  }
  return result;
}

unint64_t sub_10043C8D0()
{
  unint64_t result = qword_101644DA8;
  if (!qword_101644DA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644DA8);
  }
  return result;
}

unint64_t sub_10043C924(uint64_t a1)
{
  unint64_t result = sub_10043C94C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10043C94C()
{
  unint64_t result = qword_101644DB0;
  if (!qword_101644DB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644DB0);
  }
  return result;
}

uint64_t sub_10043C9A0(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10043FFE8(a1, a2, a3, (uint64_t (*)(void))sub_10026D3F4, (uint64_t (*)(void))sub_10026C6F8, (uint64_t (*)(void))sub_10043C9F4, (uint64_t (*)(void))sub_10025C42C);
}

unint64_t sub_10043C9F4()
{
  unint64_t result = qword_101644DB8;
  if (!qword_101644DB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644DB8);
  }
  return result;
}

unint64_t sub_10043CA4C()
{
  unint64_t result = qword_101644DC0;
  if (!qword_101644DC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644DC0);
  }
  return result;
}

unint64_t sub_10043CAA0(uint64_t a1)
{
  unint64_t result = sub_10043CAC8();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10043CAC8()
{
  unint64_t result = qword_101644DC8;
  if (!qword_101644DC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644DC8);
  }
  return result;
}

uint64_t sub_10043CB1C(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10043FFE8(a1, a2, a3, (uint64_t (*)(void))sub_10043CB70, (uint64_t (*)(void))sub_10043CBC4, (uint64_t (*)(void))sub_10043CC18, (uint64_t (*)(void))sub_1001D780C);
}

unint64_t sub_10043CB70()
{
  unint64_t result = qword_101644DD0;
  if (!qword_101644DD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644DD0);
  }
  return result;
}

unint64_t sub_10043CBC4()
{
  unint64_t result = qword_101644DD8;
  if (!qword_101644DD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644DD8);
  }
  return result;
}

unint64_t sub_10043CC18()
{
  unint64_t result = qword_101644DE0;
  if (!qword_101644DE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644DE0);
  }
  return result;
}

unint64_t sub_10043CC70()
{
  unint64_t result = qword_101644DE8;
  if (!qword_101644DE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644DE8);
  }
  return result;
}

unint64_t sub_10043CCC4(uint64_t a1)
{
  unint64_t result = sub_10043CCEC();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10043CCEC()
{
  unint64_t result = qword_101644DF0;
  if (!qword_101644DF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644DF0);
  }
  return result;
}

uint64_t sub_10043CD40(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10043FFE8(a1, a2, a3, (uint64_t (*)(void))sub_10043CD94, (uint64_t (*)(void))sub_10043CDE8, (uint64_t (*)(void))sub_10043CE3C, (uint64_t (*)(void))sub_10043CE90);
}

unint64_t sub_10043CD94()
{
  unint64_t result = qword_101644DF8;
  if (!qword_101644DF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644DF8);
  }
  return result;
}

unint64_t sub_10043CDE8()
{
  unint64_t result = qword_101644E00;
  if (!qword_101644E00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644E00);
  }
  return result;
}

unint64_t sub_10043CE3C()
{
  unint64_t result = qword_101644E08;
  if (!qword_101644E08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644E08);
  }
  return result;
}

unint64_t sub_10043CE90()
{
  unint64_t result = qword_101644E10;
  if (!qword_101644E10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644E10);
  }
  return result;
}

unint64_t sub_10043CEE8()
{
  unint64_t result = qword_101644E18;
  if (!qword_101644E18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644E18);
  }
  return result;
}

unint64_t sub_10043CF3C(uint64_t a1)
{
  unint64_t result = sub_10043CF64();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10043CF64()
{
  unint64_t result = qword_101644E20;
  if (!qword_101644E20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644E20);
  }
  return result;
}

uint64_t sub_10043CFB8(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10043FFE8(a1, a2, a3, (uint64_t (*)(void))sub_1002A87F4, (uint64_t (*)(void))sub_1002A89B4, (uint64_t (*)(void))sub_10043D00C, (uint64_t (*)(void))sub_10043D060);
}

unint64_t sub_10043D00C()
{
  unint64_t result = qword_101644E28;
  if (!qword_101644E28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644E28);
  }
  return result;
}

unint64_t sub_10043D060()
{
  unint64_t result = qword_101644E30;
  if (!qword_101644E30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644E30);
  }
  return result;
}

unint64_t sub_10043D0B8()
{
  unint64_t result = qword_101644E38;
  if (!qword_101644E38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644E38);
  }
  return result;
}

unint64_t sub_10043D10C(uint64_t a1)
{
  unint64_t result = sub_10043D134();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10043D134()
{
  unint64_t result = qword_101644E40;
  if (!qword_101644E40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644E40);
  }
  return result;
}

uint64_t sub_10043D188(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10043FFE8(a1, a2, a3, (uint64_t (*)(void))sub_10043D1DC, (uint64_t (*)(void))sub_10043D230, (uint64_t (*)(void))sub_10043D284, (uint64_t (*)(void))sub_10043D2D8);
}

unint64_t sub_10043D1DC()
{
  unint64_t result = qword_101644E48;
  if (!qword_101644E48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644E48);
  }
  return result;
}

unint64_t sub_10043D230()
{
  unint64_t result = qword_101644E50;
  if (!qword_101644E50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644E50);
  }
  return result;
}

unint64_t sub_10043D284()
{
  unint64_t result = qword_101644E58;
  if (!qword_101644E58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644E58);
  }
  return result;
}

unint64_t sub_10043D2D8()
{
  unint64_t result = qword_101644E60;
  if (!qword_101644E60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644E60);
  }
  return result;
}

unint64_t sub_10043D330()
{
  unint64_t result = qword_101644E68;
  if (!qword_101644E68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644E68);
  }
  return result;
}

unint64_t sub_10043D384(uint64_t a1)
{
  unint64_t result = sub_10043D3AC();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10043D3AC()
{
  unint64_t result = qword_101644E70;
  if (!qword_101644E70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644E70);
  }
  return result;
}

uint64_t sub_10043D400(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10043FFE8(a1, a2, a3, (uint64_t (*)(void))sub_10043D454, (uint64_t (*)(void))sub_10043D4A8, (uint64_t (*)(void))sub_10043D4FC, (uint64_t (*)(void))sub_10043D550);
}

unint64_t sub_10043D454()
{
  unint64_t result = qword_101644E78;
  if (!qword_101644E78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644E78);
  }
  return result;
}

unint64_t sub_10043D4A8()
{
  unint64_t result = qword_101644E80;
  if (!qword_101644E80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644E80);
  }
  return result;
}

unint64_t sub_10043D4FC()
{
  unint64_t result = qword_101644E88;
  if (!qword_101644E88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644E88);
  }
  return result;
}

unint64_t sub_10043D550()
{
  unint64_t result = qword_101644E90;
  if (!qword_101644E90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644E90);
  }
  return result;
}

unint64_t sub_10043D5A8()
{
  unint64_t result = qword_101644E98;
  if (!qword_101644E98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644E98);
  }
  return result;
}

unint64_t sub_10043D5FC(uint64_t a1)
{
  unint64_t result = sub_10043D624();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10043D624()
{
  unint64_t result = qword_101644EA0;
  if (!qword_101644EA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644EA0);
  }
  return result;
}

uint64_t sub_10043D678(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10043FFE8(a1, a2, a3, (uint64_t (*)(void))sub_10043D6CC, (uint64_t (*)(void))sub_10043D720, (uint64_t (*)(void))sub_10043D774, (uint64_t (*)(void))sub_10043D7C8);
}

unint64_t sub_10043D6CC()
{
  unint64_t result = qword_101644EA8;
  if (!qword_101644EA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644EA8);
  }
  return result;
}

unint64_t sub_10043D720()
{
  unint64_t result = qword_101644EB0;
  if (!qword_101644EB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644EB0);
  }
  return result;
}

unint64_t sub_10043D774()
{
  unint64_t result = qword_101644EB8;
  if (!qword_101644EB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644EB8);
  }
  return result;
}

unint64_t sub_10043D7C8()
{
  unint64_t result = qword_101644EC0;
  if (!qword_101644EC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644EC0);
  }
  return result;
}

unint64_t sub_10043D820()
{
  unint64_t result = qword_101644EC8;
  if (!qword_101644EC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644EC8);
  }
  return result;
}

unint64_t sub_10043D874(uint64_t a1)
{
  unint64_t result = sub_10043D89C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10043D89C()
{
  unint64_t result = qword_101644ED0;
  if (!qword_101644ED0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644ED0);
  }
  return result;
}

uint64_t sub_10043D8F0(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10043FFE8(a1, a2, a3, (uint64_t (*)(void))sub_10043D944, (uint64_t (*)(void))sub_10043D998, (uint64_t (*)(void))sub_10043D9EC, (uint64_t (*)(void))sub_10043DA40);
}

unint64_t sub_10043D944()
{
  unint64_t result = qword_101644ED8;
  if (!qword_101644ED8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644ED8);
  }
  return result;
}

unint64_t sub_10043D998()
{
  unint64_t result = qword_101644EE0;
  if (!qword_101644EE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644EE0);
  }
  return result;
}

unint64_t sub_10043D9EC()
{
  unint64_t result = qword_101644EE8;
  if (!qword_101644EE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644EE8);
  }
  return result;
}

unint64_t sub_10043DA40()
{
  unint64_t result = qword_101644EF0;
  if (!qword_101644EF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644EF0);
  }
  return result;
}

unint64_t sub_10043DA98()
{
  unint64_t result = qword_101644EF8;
  if (!qword_101644EF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644EF8);
  }
  return result;
}

unint64_t sub_10043DAEC(uint64_t a1)
{
  unint64_t result = sub_10043DB14();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10043DB14()
{
  unint64_t result = qword_101644F00;
  if (!qword_101644F00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644F00);
  }
  return result;
}

uint64_t sub_10043DB68(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10043FFE8(a1, a2, a3, (uint64_t (*)(void))sub_10043DBBC, (uint64_t (*)(void))sub_10043DC10, (uint64_t (*)(void))sub_10043DC64, (uint64_t (*)(void))sub_10043DCB8);
}

unint64_t sub_10043DBBC()
{
  unint64_t result = qword_101644F08;
  if (!qword_101644F08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644F08);
  }
  return result;
}

unint64_t sub_10043DC10()
{
  unint64_t result = qword_101644F10;
  if (!qword_101644F10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644F10);
  }
  return result;
}

unint64_t sub_10043DC64()
{
  unint64_t result = qword_101644F18;
  if (!qword_101644F18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644F18);
  }
  return result;
}

unint64_t sub_10043DCB8()
{
  unint64_t result = qword_101644F20;
  if (!qword_101644F20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644F20);
  }
  return result;
}

unint64_t sub_10043DD10()
{
  unint64_t result = qword_101644F28;
  if (!qword_101644F28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644F28);
  }
  return result;
}

unint64_t sub_10043DD64(uint64_t a1)
{
  unint64_t result = sub_10043DD8C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10043DD8C()
{
  unint64_t result = qword_101644F30;
  if (!qword_101644F30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644F30);
  }
  return result;
}

uint64_t sub_10043DDE0(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10043FFE8(a1, a2, a3, (uint64_t (*)(void))sub_10043DE34, (uint64_t (*)(void))sub_10043DE88, (uint64_t (*)(void))sub_10043DEDC, (uint64_t (*)(void))sub_10043DF30);
}

unint64_t sub_10043DE34()
{
  unint64_t result = qword_101644F38;
  if (!qword_101644F38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644F38);
  }
  return result;
}

unint64_t sub_10043DE88()
{
  unint64_t result = qword_101644F40;
  if (!qword_101644F40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644F40);
  }
  return result;
}

unint64_t sub_10043DEDC()
{
  unint64_t result = qword_101644F48;
  if (!qword_101644F48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644F48);
  }
  return result;
}

unint64_t sub_10043DF30()
{
  unint64_t result = qword_101644F50;
  if (!qword_101644F50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644F50);
  }
  return result;
}

unint64_t sub_10043DF88()
{
  unint64_t result = qword_101644F58;
  if (!qword_101644F58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644F58);
  }
  return result;
}

unint64_t sub_10043DFDC(uint64_t a1)
{
  unint64_t result = sub_10043E004();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10043E004()
{
  unint64_t result = qword_101644F60;
  if (!qword_101644F60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644F60);
  }
  return result;
}

uint64_t sub_10043E058(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10043FFE8(a1, a2, a3, (uint64_t (*)(void))sub_10043E0AC, (uint64_t (*)(void))sub_10043E100, (uint64_t (*)(void))sub_10043E154, (uint64_t (*)(void))sub_10043E1A8);
}

unint64_t sub_10043E0AC()
{
  unint64_t result = qword_101644F68;
  if (!qword_101644F68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644F68);
  }
  return result;
}

unint64_t sub_10043E100()
{
  unint64_t result = qword_101644F70;
  if (!qword_101644F70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644F70);
  }
  return result;
}

unint64_t sub_10043E154()
{
  unint64_t result = qword_101644F78;
  if (!qword_101644F78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644F78);
  }
  return result;
}

unint64_t sub_10043E1A8()
{
  unint64_t result = qword_101644F80;
  if (!qword_101644F80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644F80);
  }
  return result;
}

unint64_t sub_10043E200()
{
  unint64_t result = qword_101644F88;
  if (!qword_101644F88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644F88);
  }
  return result;
}

unint64_t sub_10043E254(uint64_t a1)
{
  unint64_t result = sub_10043E27C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10043E27C()
{
  unint64_t result = qword_101644F90;
  if (!qword_101644F90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644F90);
  }
  return result;
}

uint64_t sub_10043E2D0(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10043FFE8(a1, a2, a3, (uint64_t (*)(void))sub_10043E324, (uint64_t (*)(void))sub_10043E378, (uint64_t (*)(void))sub_10043E3CC, (uint64_t (*)(void))sub_10043E420);
}

unint64_t sub_10043E324()
{
  unint64_t result = qword_101644F98;
  if (!qword_101644F98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644F98);
  }
  return result;
}

unint64_t sub_10043E378()
{
  unint64_t result = qword_101644FA0;
  if (!qword_101644FA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644FA0);
  }
  return result;
}

unint64_t sub_10043E3CC()
{
  unint64_t result = qword_101644FA8;
  if (!qword_101644FA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644FA8);
  }
  return result;
}

unint64_t sub_10043E420()
{
  unint64_t result = qword_101644FB0;
  if (!qword_101644FB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644FB0);
  }
  return result;
}

unint64_t sub_10043E478()
{
  unint64_t result = qword_101644FB8;
  if (!qword_101644FB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644FB8);
  }
  return result;
}

unint64_t sub_10043E4CC(uint64_t a1)
{
  unint64_t result = sub_10043E4F4();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10043E4F4()
{
  unint64_t result = qword_101644FC0;
  if (!qword_101644FC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644FC0);
  }
  return result;
}

uint64_t sub_10043E548(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10043FFE8(a1, a2, a3, (uint64_t (*)(void))sub_10043E59C, (uint64_t (*)(void))sub_10043E5F0, (uint64_t (*)(void))sub_10043E644, (uint64_t (*)(void))sub_100061628);
}

unint64_t sub_10043E59C()
{
  unint64_t result = qword_101644FC8;
  if (!qword_101644FC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644FC8);
  }
  return result;
}

unint64_t sub_10043E5F0()
{
  unint64_t result = qword_101644FD0;
  if (!qword_101644FD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644FD0);
  }
  return result;
}

unint64_t sub_10043E644()
{
  unint64_t result = qword_101644FD8;
  if (!qword_101644FD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644FD8);
  }
  return result;
}

unint64_t sub_10043E69C()
{
  unint64_t result = qword_101644FE0;
  if (!qword_101644FE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644FE0);
  }
  return result;
}

unint64_t sub_10043E6F0(uint64_t a1)
{
  unint64_t result = sub_10043E718();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10043E718()
{
  unint64_t result = qword_101644FE8;
  if (!qword_101644FE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644FE8);
  }
  return result;
}

uint64_t sub_10043E76C(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10043FFE8(a1, a2, a3, (uint64_t (*)(void))sub_10043E7C0, (uint64_t (*)(void))sub_10043E814, (uint64_t (*)(void))sub_10043E868, (uint64_t (*)(void))sub_10043E8BC);
}

unint64_t sub_10043E7C0()
{
  unint64_t result = qword_101644FF0;
  if (!qword_101644FF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644FF0);
  }
  return result;
}

unint64_t sub_10043E814()
{
  unint64_t result = qword_101644FF8;
  if (!qword_101644FF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101644FF8);
  }
  return result;
}

unint64_t sub_10043E868()
{
  unint64_t result = qword_101645000;
  if (!qword_101645000)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645000);
  }
  return result;
}

unint64_t sub_10043E8BC()
{
  unint64_t result = qword_101645008;
  if (!qword_101645008)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645008);
  }
  return result;
}

unint64_t sub_10043E914()
{
  unint64_t result = qword_101645010;
  if (!qword_101645010)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645010);
  }
  return result;
}

unint64_t sub_10043E968(uint64_t a1)
{
  unint64_t result = sub_10043E990();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10043E990()
{
  unint64_t result = qword_101645018;
  if (!qword_101645018)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645018);
  }
  return result;
}

uint64_t sub_10043E9E4(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10043FFE8(a1, a2, a3, (uint64_t (*)(void))sub_10043EA38, (uint64_t (*)(void))sub_10043EA8C, (uint64_t (*)(void))sub_10043EAE0, (uint64_t (*)(void))sub_10043EB34);
}

unint64_t sub_10043EA38()
{
  unint64_t result = qword_101645020;
  if (!qword_101645020)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645020);
  }
  return result;
}

unint64_t sub_10043EA8C()
{
  unint64_t result = qword_101645028;
  if (!qword_101645028)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645028);
  }
  return result;
}

unint64_t sub_10043EAE0()
{
  unint64_t result = qword_101645030;
  if (!qword_101645030)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645030);
  }
  return result;
}

unint64_t sub_10043EB34()
{
  unint64_t result = qword_101645038;
  if (!qword_101645038)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645038);
  }
  return result;
}

unint64_t sub_10043EB8C()
{
  unint64_t result = qword_101645040;
  if (!qword_101645040)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645040);
  }
  return result;
}

unint64_t sub_10043EBE0(uint64_t a1)
{
  unint64_t result = sub_10043EC08();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10043EC08()
{
  unint64_t result = qword_101645048;
  if (!qword_101645048)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645048);
  }
  return result;
}

uint64_t sub_10043EC5C(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10043FFE8(a1, a2, a3, (uint64_t (*)(void))sub_10043ECB0, (uint64_t (*)(void))sub_10043ED04, (uint64_t (*)(void))sub_10043ED58, (uint64_t (*)(void))sub_10043EDAC);
}

unint64_t sub_10043ECB0()
{
  unint64_t result = qword_101645050;
  if (!qword_101645050)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645050);
  }
  return result;
}

unint64_t sub_10043ED04()
{
  unint64_t result = qword_101645058;
  if (!qword_101645058)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645058);
  }
  return result;
}

unint64_t sub_10043ED58()
{
  unint64_t result = qword_101645060;
  if (!qword_101645060)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645060);
  }
  return result;
}

unint64_t sub_10043EDAC()
{
  unint64_t result = qword_101645068;
  if (!qword_101645068)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645068);
  }
  return result;
}

unint64_t sub_10043EE04()
{
  unint64_t result = qword_101645070;
  if (!qword_101645070)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645070);
  }
  return result;
}

unint64_t sub_10043EE58(uint64_t a1)
{
  unint64_t result = sub_10043EE80();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10043EE80()
{
  unint64_t result = qword_101645078;
  if (!qword_101645078)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645078);
  }
  return result;
}

uint64_t sub_10043EED4(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10043FFE8(a1, a2, a3, (uint64_t (*)(void))sub_10043EF28, (uint64_t (*)(void))sub_10043EF7C, (uint64_t (*)(void))sub_10043EFD0, (uint64_t (*)(void))sub_10043F024);
}

unint64_t sub_10043EF28()
{
  unint64_t result = qword_101645080;
  if (!qword_101645080)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645080);
  }
  return result;
}

unint64_t sub_10043EF7C()
{
  unint64_t result = qword_101645088;
  if (!qword_101645088)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645088);
  }
  return result;
}

unint64_t sub_10043EFD0()
{
  unint64_t result = qword_101645090;
  if (!qword_101645090)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645090);
  }
  return result;
}

unint64_t sub_10043F024()
{
  unint64_t result = qword_101645098;
  if (!qword_101645098)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645098);
  }
  return result;
}

unint64_t sub_10043F07C()
{
  unint64_t result = qword_1016450A0;
  if (!qword_1016450A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016450A0);
  }
  return result;
}

unint64_t sub_10043F0D0(uint64_t a1)
{
  unint64_t result = sub_10043F0F8();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10043F0F8()
{
  unint64_t result = qword_1016450A8;
  if (!qword_1016450A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016450A8);
  }
  return result;
}

uint64_t sub_10043F14C(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10043FFE8(a1, a2, a3, (uint64_t (*)(void))sub_10043F1A0, (uint64_t (*)(void))sub_10043F1F4, (uint64_t (*)(void))sub_10043F248, (uint64_t (*)(void))sub_10043F29C);
}

unint64_t sub_10043F1A0()
{
  unint64_t result = qword_1016450B0;
  if (!qword_1016450B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016450B0);
  }
  return result;
}

unint64_t sub_10043F1F4()
{
  unint64_t result = qword_1016450B8;
  if (!qword_1016450B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016450B8);
  }
  return result;
}

unint64_t sub_10043F248()
{
  unint64_t result = qword_1016450C0;
  if (!qword_1016450C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016450C0);
  }
  return result;
}

unint64_t sub_10043F29C()
{
  unint64_t result = qword_1016450C8;
  if (!qword_1016450C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016450C8);
  }
  return result;
}

unint64_t sub_10043F2F4()
{
  unint64_t result = qword_1016450D0;
  if (!qword_1016450D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016450D0);
  }
  return result;
}

unint64_t sub_10043F348(uint64_t a1)
{
  unint64_t result = sub_10043F370();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10043F370()
{
  unint64_t result = qword_1016450D8;
  if (!qword_1016450D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016450D8);
  }
  return result;
}

uint64_t sub_10043F3C4(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10043FFE8(a1, a2, a3, (uint64_t (*)(void))sub_10043F418, (uint64_t (*)(void))sub_10043F46C, (uint64_t (*)(void))sub_10043F4C0, (uint64_t (*)(void))sub_10043F514);
}

unint64_t sub_10043F418()
{
  unint64_t result = qword_1016450E0;
  if (!qword_1016450E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016450E0);
  }
  return result;
}

unint64_t sub_10043F46C()
{
  unint64_t result = qword_1016450E8;
  if (!qword_1016450E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016450E8);
  }
  return result;
}

unint64_t sub_10043F4C0()
{
  unint64_t result = qword_1016450F0;
  if (!qword_1016450F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016450F0);
  }
  return result;
}

unint64_t sub_10043F514()
{
  unint64_t result = qword_1016450F8;
  if (!qword_1016450F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016450F8);
  }
  return result;
}

unint64_t sub_10043F56C()
{
  unint64_t result = qword_101645100;
  if (!qword_101645100)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645100);
  }
  return result;
}

unint64_t sub_10043F5C0(uint64_t a1)
{
  unint64_t result = sub_10043F5E8();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10043F5E8()
{
  unint64_t result = qword_101645108;
  if (!qword_101645108)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645108);
  }
  return result;
}

unint64_t sub_10043F63C(uint64_t a1)
{
  unint64_t result = sub_10043F664();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10043F664()
{
  unint64_t result = qword_101645110;
  if (!qword_101645110)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645110);
  }
  return result;
}

uint64_t sub_10043F6B8(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10043FFE8(a1, a2, a3, (uint64_t (*)(void))sub_10043F70C, (uint64_t (*)(void))sub_10043F760, (uint64_t (*)(void))sub_10043F7B4, (uint64_t (*)(void))sub_10043F808);
}

unint64_t sub_10043F70C()
{
  unint64_t result = qword_101645118;
  if (!qword_101645118)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645118);
  }
  return result;
}

unint64_t sub_10043F760()
{
  unint64_t result = qword_101645120;
  if (!qword_101645120)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645120);
  }
  return result;
}

unint64_t sub_10043F7B4()
{
  unint64_t result = qword_101645128;
  if (!qword_101645128)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645128);
  }
  return result;
}

unint64_t sub_10043F808()
{
  unint64_t result = qword_101645130;
  if (!qword_101645130)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645130);
  }
  return result;
}

unint64_t sub_10043F860()
{
  unint64_t result = qword_101645138;
  if (!qword_101645138)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645138);
  }
  return result;
}

unint64_t sub_10043F8B4(uint64_t a1)
{
  unint64_t result = sub_10043F8DC();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10043F8DC()
{
  unint64_t result = qword_101645140;
  if (!qword_101645140)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645140);
  }
  return result;
}

unint64_t sub_10043F930(uint64_t a1)
{
  unint64_t result = sub_10043F958();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10043F958()
{
  unint64_t result = qword_101645148;
  if (!qword_101645148)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645148);
  }
  return result;
}

uint64_t sub_10043F9AC(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10043FFE8(a1, a2, a3, (uint64_t (*)(void))sub_10043FA00, (uint64_t (*)(void))sub_10043FA54, (uint64_t (*)(void))sub_10043FAA8, (uint64_t (*)(void))sub_10043FAFC);
}

unint64_t sub_10043FA00()
{
  unint64_t result = qword_101645150;
  if (!qword_101645150)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645150);
  }
  return result;
}

unint64_t sub_10043FA54()
{
  unint64_t result = qword_101645158;
  if (!qword_101645158)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645158);
  }
  return result;
}

unint64_t sub_10043FAA8()
{
  unint64_t result = qword_101645160;
  if (!qword_101645160)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645160);
  }
  return result;
}

unint64_t sub_10043FAFC()
{
  unint64_t result = qword_101645168;
  if (!qword_101645168)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645168);
  }
  return result;
}

unint64_t sub_10043FB54()
{
  unint64_t result = qword_101645170;
  if (!qword_101645170)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645170);
  }
  return result;
}

unint64_t sub_10043FBA8(uint64_t a1)
{
  unint64_t result = sub_10043FBD0();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10043FBD0()
{
  unint64_t result = qword_101645178;
  if (!qword_101645178)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645178);
  }
  return result;
}

unint64_t sub_10043FC24(uint64_t a1)
{
  unint64_t result = sub_10043FC4C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10043FC4C()
{
  unint64_t result = qword_101645180;
  if (!qword_101645180)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645180);
  }
  return result;
}

uint64_t sub_10043FCA0(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10043FFE8(a1, a2, a3, (uint64_t (*)(void))sub_10043FCF4, (uint64_t (*)(void))sub_10043FD48, (uint64_t (*)(void))sub_10043FD9C, (uint64_t (*)(void))sub_10043FDF0);
}

unint64_t sub_10043FCF4()
{
  unint64_t result = qword_101645188;
  if (!qword_101645188)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645188);
  }
  return result;
}

unint64_t sub_10043FD48()
{
  unint64_t result = qword_101645190;
  if (!qword_101645190)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645190);
  }
  return result;
}

unint64_t sub_10043FD9C()
{
  unint64_t result = qword_101645198;
  if (!qword_101645198)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645198);
  }
  return result;
}

unint64_t sub_10043FDF0()
{
  unint64_t result = qword_1016451A0;
  if (!qword_1016451A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016451A0);
  }
  return result;
}

unint64_t sub_10043FE48()
{
  unint64_t result = qword_1016451A8;
  if (!qword_1016451A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016451A8);
  }
  return result;
}

unint64_t sub_10043FE9C(uint64_t a1)
{
  unint64_t result = sub_10043FEC4();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10043FEC4()
{
  unint64_t result = qword_1016451B0;
  if (!qword_1016451B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016451B0);
  }
  return result;
}

unint64_t sub_10043FF18(uint64_t a1)
{
  unint64_t result = sub_10043FF40();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_10043FF40()
{
  unint64_t result = qword_1016451B8;
  if (!qword_1016451B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016451B8);
  }
  return result;
}

uint64_t sub_10043FF94(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_10043FFE8(a1, a2, a3, (uint64_t (*)(void))sub_10044004C, (uint64_t (*)(void))sub_1004400A0, (uint64_t (*)(void))sub_1004400F4, (uint64_t (*)(void))sub_100440148);
}

uint64_t sub_10043FFE8(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void), uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  a1[1] = a4();
  a1[2] = a5();
  a1[3] = a6();
  uint64_t result = a7();
  a1[4] = result;
  return result;
}

unint64_t sub_10044004C()
{
  unint64_t result = qword_1016451C0;
  if (!qword_1016451C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016451C0);
  }
  return result;
}

unint64_t sub_1004400A0()
{
  unint64_t result = qword_1016451C8;
  if (!qword_1016451C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016451C8);
  }
  return result;
}

unint64_t sub_1004400F4()
{
  unint64_t result = qword_1016451D0;
  if (!qword_1016451D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016451D0);
  }
  return result;
}

unint64_t sub_100440148()
{
  unint64_t result = qword_1016451D8;
  if (!qword_1016451D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016451D8);
  }
  return result;
}

unint64_t sub_1004401A0()
{
  unint64_t result = qword_1016451E0;
  if (!qword_1016451E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016451E0);
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyRepresentableInternal()
{
  return &type metadata for KeyRepresentableInternal;
}

ValueMetadata *type metadata accessor for LocationDecryptionKey()
{
  return &type metadata for LocationDecryptionKey;
}

ValueMetadata *type metadata accessor for CommitmentKey()
{
  return &type metadata for CommitmentKey;
}

ValueMetadata *type metadata accessor for EncryptedPrivateKey()
{
  return &type metadata for EncryptedPrivateKey;
}

ValueMetadata *type metadata accessor for PrivateKey()
{
  return &type metadata for PrivateKey;
}

ValueMetadata *type metadata accessor for StandardPublicKey()
{
  return &type metadata for StandardPublicKey;
}

ValueMetadata *type metadata accessor for PublicKey()
{
  return &type metadata for PublicKey;
}

ValueMetadata *type metadata accessor for NearOwnerAdvertisement()
{
  return &type metadata for NearOwnerAdvertisement;
}

ValueMetadata *type metadata accessor for Advertisement()
{
  return &type metadata for Advertisement;
}

ValueMetadata *type metadata accessor for HashedAdvertisement()
{
  return &type metadata for HashedAdvertisement;
}

ValueMetadata *type metadata accessor for PairingNonce()
{
  return &type metadata for PairingNonce;
}

ValueMetadata *type metadata accessor for SharedSecretKey()
{
  return &type metadata for SharedSecretKey;
}

ValueMetadata *type metadata accessor for AntiTrackingKey()
{
  return &type metadata for AntiTrackingKey;
}

ValueMetadata *type metadata accessor for IntermediateKey()
{
  return &type metadata for IntermediateKey;
}

ValueMetadata *type metadata accessor for CommandKey()
{
  return &type metadata for CommandKey;
}

ValueMetadata *type metadata accessor for ConnectionKey()
{
  return &type metadata for ConnectionKey;
}

ValueMetadata *type metadata accessor for LongTermKey()
{
  return &type metadata for LongTermKey;
}

ValueMetadata *type metadata accessor for NearbyTokenKey()
{
  return &type metadata for NearbyTokenKey;
}

ValueMetadata *type metadata accessor for NFCPartialAdvertisement()
{
  return &type metadata for NFCPartialAdvertisement;
}

ValueMetadata *type metadata accessor for EncryptedBlobE1()
{
  return &type metadata for EncryptedBlobE1;
}

ValueMetadata *type metadata accessor for FindMyNetworkId()
{
  return &type metadata for FindMyNetworkId;
}

ValueMetadata *type metadata accessor for EncryptedBlobE2()
{
  return &type metadata for EncryptedBlobE2;
}

ValueMetadata *type metadata accessor for EncryptedBlobE3()
{
  return &type metadata for EncryptedBlobE3;
}

ValueMetadata *type metadata accessor for EncryptedBlobE4()
{
  return &type metadata for EncryptedBlobE4;
}

ValueMetadata *type metadata accessor for RefKey()
{
  return &type metadata for RefKey;
}

ValueMetadata *type metadata accessor for SikPub()
{
  return &type metadata for SikPub;
}

ValueMetadata *type metadata accessor for CollaborativeKeyGen.C1()
{
  return &type metadata for CollaborativeKeyGen.C1;
}

ValueMetadata *type metadata accessor for CollaborativeKeyGen.v1.C2()
{
  return &type metadata for CollaborativeKeyGen.v1.C2;
}

ValueMetadata *type metadata accessor for CollaborativeKeyGen.v1.C3()
{
  return &type metadata for CollaborativeKeyGen.v1.C3;
}

ValueMetadata *type metadata accessor for CollaborativeKeyGen.v2.C2()
{
  return &type metadata for CollaborativeKeyGen.v2.C2;
}

ValueMetadata *type metadata accessor for CollaborativeKeyGen.v2.C3()
{
  return &type metadata for CollaborativeKeyGen.v2.C3;
}

ValueMetadata *_s2C3V10CodingKeysOMa()
{
  return &_s2C3V10CodingKeysON;
}

ValueMetadata *_s2C2V10CodingKeysOMa()
{
  return &_s2C2V10CodingKeysON;
}

ValueMetadata *_s2C3V10CodingKeysOMa_0()
{
  return &_s2C3V10CodingKeysON_0;
}

ValueMetadata *_s2C2V10CodingKeysOMa_0()
{
  return &_s2C2V10CodingKeysON_0;
}

ValueMetadata *_s2C1V10CodingKeysOMa()
{
  return &_s2C1V10CodingKeysON;
}

ValueMetadata *type metadata accessor for SikPub.CodingKeys()
{
  return &type metadata for SikPub.CodingKeys;
}

ValueMetadata *type metadata accessor for RefKey.CodingKeys()
{
  return &type metadata for RefKey.CodingKeys;
}

ValueMetadata *type metadata accessor for EncryptedBlobE4.CodingKeys()
{
  return &type metadata for EncryptedBlobE4.CodingKeys;
}

ValueMetadata *type metadata accessor for EncryptedBlobE3.CodingKeys()
{
  return &type metadata for EncryptedBlobE3.CodingKeys;
}

ValueMetadata *type metadata accessor for EncryptedBlobE2.CodingKeys()
{
  return &type metadata for EncryptedBlobE2.CodingKeys;
}

ValueMetadata *type metadata accessor for FindMyNetworkId.CodingKeys()
{
  return &type metadata for FindMyNetworkId.CodingKeys;
}

ValueMetadata *type metadata accessor for EncryptedBlobE1.CodingKeys()
{
  return &type metadata for EncryptedBlobE1.CodingKeys;
}

ValueMetadata *type metadata accessor for NFCPartialAdvertisement.CodingKeys()
{
  return &type metadata for NFCPartialAdvertisement.CodingKeys;
}

ValueMetadata *type metadata accessor for NearbyTokenKey.CodingKeys()
{
  return &type metadata for NearbyTokenKey.CodingKeys;
}

ValueMetadata *type metadata accessor for LongTermKey.CodingKeys()
{
  return &type metadata for LongTermKey.CodingKeys;
}

ValueMetadata *type metadata accessor for ConnectionKey.CodingKeys()
{
  return &type metadata for ConnectionKey.CodingKeys;
}

ValueMetadata *type metadata accessor for CommandKey.CodingKeys()
{
  return &type metadata for CommandKey.CodingKeys;
}

ValueMetadata *type metadata accessor for IntermediateKey.CodingKeys()
{
  return &type metadata for IntermediateKey.CodingKeys;
}

ValueMetadata *type metadata accessor for AntiTrackingKey.CodingKeys()
{
  return &type metadata for AntiTrackingKey.CodingKeys;
}

ValueMetadata *type metadata accessor for SharedSecretKey.CodingKeys()
{
  return &type metadata for SharedSecretKey.CodingKeys;
}

ValueMetadata *type metadata accessor for PairingNonce.CodingKeys()
{
  return &type metadata for PairingNonce.CodingKeys;
}

ValueMetadata *type metadata accessor for HashedAdvertisement.CodingKeys()
{
  return &type metadata for HashedAdvertisement.CodingKeys;
}

ValueMetadata *type metadata accessor for Advertisement.CodingKeys()
{
  return &type metadata for Advertisement.CodingKeys;
}

ValueMetadata *type metadata accessor for NearOwnerAdvertisement.CodingKeys()
{
  return &type metadata for NearOwnerAdvertisement.CodingKeys;
}

ValueMetadata *type metadata accessor for PublicKey.CodingKeys()
{
  return &type metadata for PublicKey.CodingKeys;
}

ValueMetadata *type metadata accessor for StandardPublicKey.CodingKeys()
{
  return &type metadata for StandardPublicKey.CodingKeys;
}

ValueMetadata *type metadata accessor for PrivateKey.CodingKeys()
{
  return &type metadata for PrivateKey.CodingKeys;
}

ValueMetadata *type metadata accessor for EncryptedPrivateKey.CodingKeys()
{
  return &type metadata for EncryptedPrivateKey.CodingKeys;
}

ValueMetadata *type metadata accessor for CommitmentKey.CodingKeys()
{
  return &type metadata for CommitmentKey.CodingKeys;
}

ValueMetadata *type metadata accessor for KeyRepresentableInternal.CodingKeys()
{
  return &type metadata for KeyRepresentableInternal.CodingKeys;
}

unint64_t sub_1004405D8()
{
  unint64_t result = qword_1016451E8;
  if (!qword_1016451E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016451E8);
  }
  return result;
}

unint64_t sub_100440630()
{
  unint64_t result = qword_1016451F0;
  if (!qword_1016451F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016451F0);
  }
  return result;
}

unint64_t sub_100440688()
{
  unint64_t result = qword_1016451F8;
  if (!qword_1016451F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016451F8);
  }
  return result;
}

unint64_t sub_1004406E0()
{
  unint64_t result = qword_101645200;
  if (!qword_101645200)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645200);
  }
  return result;
}

unint64_t sub_100440738()
{
  unint64_t result = qword_101645208;
  if (!qword_101645208)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645208);
  }
  return result;
}

unint64_t sub_100440790()
{
  unint64_t result = qword_101645210;
  if (!qword_101645210)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645210);
  }
  return result;
}

unint64_t sub_1004407E8()
{
  unint64_t result = qword_101645218;
  if (!qword_101645218)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645218);
  }
  return result;
}

unint64_t sub_100440840()
{
  unint64_t result = qword_101645220;
  if (!qword_101645220)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645220);
  }
  return result;
}

unint64_t sub_100440898()
{
  unint64_t result = qword_101645228;
  if (!qword_101645228)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645228);
  }
  return result;
}

unint64_t sub_1004408F0()
{
  unint64_t result = qword_101645230;
  if (!qword_101645230)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645230);
  }
  return result;
}

unint64_t sub_100440948()
{
  unint64_t result = qword_101645238;
  if (!qword_101645238)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645238);
  }
  return result;
}

unint64_t sub_1004409A0()
{
  unint64_t result = qword_101645240;
  if (!qword_101645240)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645240);
  }
  return result;
}

unint64_t sub_1004409F8()
{
  unint64_t result = qword_101645248;
  if (!qword_101645248)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645248);
  }
  return result;
}

unint64_t sub_100440A50()
{
  unint64_t result = qword_101645250;
  if (!qword_101645250)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645250);
  }
  return result;
}

unint64_t sub_100440AA8()
{
  unint64_t result = qword_101645258;
  if (!qword_101645258)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645258);
  }
  return result;
}

unint64_t sub_100440B00()
{
  unint64_t result = qword_101645260;
  if (!qword_101645260)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645260);
  }
  return result;
}

unint64_t sub_100440B58()
{
  unint64_t result = qword_101645268;
  if (!qword_101645268)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645268);
  }
  return result;
}

unint64_t sub_100440BB0()
{
  unint64_t result = qword_101645270;
  if (!qword_101645270)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645270);
  }
  return result;
}

unint64_t sub_100440C08()
{
  unint64_t result = qword_101645278;
  if (!qword_101645278)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645278);
  }
  return result;
}

unint64_t sub_100440C60()
{
  unint64_t result = qword_101645280;
  if (!qword_101645280)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645280);
  }
  return result;
}

unint64_t sub_100440CB8()
{
  unint64_t result = qword_101645288;
  if (!qword_101645288)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645288);
  }
  return result;
}

unint64_t sub_100440D10()
{
  unint64_t result = qword_101645290;
  if (!qword_101645290)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645290);
  }
  return result;
}

unint64_t sub_100440D68()
{
  unint64_t result = qword_101645298;
  if (!qword_101645298)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645298);
  }
  return result;
}

unint64_t sub_100440DC0()
{
  unint64_t result = qword_1016452A0;
  if (!qword_1016452A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016452A0);
  }
  return result;
}

unint64_t sub_100440E18()
{
  unint64_t result = qword_1016452A8;
  if (!qword_1016452A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016452A8);
  }
  return result;
}

unint64_t sub_100440E70()
{
  unint64_t result = qword_1016452B0;
  if (!qword_1016452B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016452B0);
  }
  return result;
}

unint64_t sub_100440EC8()
{
  unint64_t result = qword_1016452B8;
  if (!qword_1016452B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016452B8);
  }
  return result;
}

unint64_t sub_100440F20()
{
  unint64_t result = qword_1016452C0;
  if (!qword_1016452C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016452C0);
  }
  return result;
}

unint64_t sub_100440F78()
{
  unint64_t result = qword_1016452C8;
  if (!qword_1016452C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016452C8);
  }
  return result;
}

unint64_t sub_100440FD0()
{
  unint64_t result = qword_1016452D0;
  if (!qword_1016452D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016452D0);
  }
  return result;
}

unint64_t sub_100441028()
{
  unint64_t result = qword_1016452D8;
  if (!qword_1016452D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016452D8);
  }
  return result;
}

unint64_t sub_100441080()
{
  unint64_t result = qword_1016452E0;
  if (!qword_1016452E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016452E0);
  }
  return result;
}

unint64_t sub_1004410D8()
{
  unint64_t result = qword_1016452E8;
  if (!qword_1016452E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016452E8);
  }
  return result;
}

unint64_t sub_100441130()
{
  unint64_t result = qword_1016452F0;
  if (!qword_1016452F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016452F0);
  }
  return result;
}

unint64_t sub_100441188()
{
  unint64_t result = qword_1016452F8;
  if (!qword_1016452F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016452F8);
  }
  return result;
}

unint64_t sub_1004411E0()
{
  unint64_t result = qword_101645300;
  if (!qword_101645300)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645300);
  }
  return result;
}

unint64_t sub_100441238()
{
  unint64_t result = qword_101645308;
  if (!qword_101645308)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645308);
  }
  return result;
}

unint64_t sub_100441290()
{
  unint64_t result = qword_101645310;
  if (!qword_101645310)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645310);
  }
  return result;
}

unint64_t sub_1004412E8()
{
  unint64_t result = qword_101645318;
  if (!qword_101645318)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645318);
  }
  return result;
}

unint64_t sub_100441340()
{
  unint64_t result = qword_101645320;
  if (!qword_101645320)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645320);
  }
  return result;
}

unint64_t sub_100441398()
{
  unint64_t result = qword_101645328;
  if (!qword_101645328)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645328);
  }
  return result;
}

unint64_t sub_1004413F0()
{
  unint64_t result = qword_101645330;
  if (!qword_101645330)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645330);
  }
  return result;
}

unint64_t sub_100441448()
{
  unint64_t result = qword_101645338;
  if (!qword_101645338)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645338);
  }
  return result;
}

unint64_t sub_1004414A0()
{
  unint64_t result = qword_101645340;
  if (!qword_101645340)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645340);
  }
  return result;
}

unint64_t sub_1004414F8()
{
  unint64_t result = qword_101645348;
  if (!qword_101645348)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645348);
  }
  return result;
}

unint64_t sub_100441550()
{
  unint64_t result = qword_101645350;
  if (!qword_101645350)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645350);
  }
  return result;
}

unint64_t sub_1004415A8()
{
  unint64_t result = qword_101645358;
  if (!qword_101645358)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645358);
  }
  return result;
}

unint64_t sub_100441600()
{
  unint64_t result = qword_101645360;
  if (!qword_101645360)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645360);
  }
  return result;
}

unint64_t sub_100441658()
{
  unint64_t result = qword_101645368;
  if (!qword_101645368)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645368);
  }
  return result;
}

unint64_t sub_1004416B0()
{
  unint64_t result = qword_101645370;
  if (!qword_101645370)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645370);
  }
  return result;
}

unint64_t sub_100441708()
{
  unint64_t result = qword_101645378;
  if (!qword_101645378)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645378);
  }
  return result;
}

unint64_t sub_100441760()
{
  unint64_t result = qword_101645380;
  if (!qword_101645380)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645380);
  }
  return result;
}

unint64_t sub_1004417B8()
{
  unint64_t result = qword_101645388;
  if (!qword_101645388)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645388);
  }
  return result;
}

unint64_t sub_100441810()
{
  unint64_t result = qword_101645390;
  if (!qword_101645390)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645390);
  }
  return result;
}

unint64_t sub_100441868()
{
  unint64_t result = qword_101645398;
  if (!qword_101645398)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645398);
  }
  return result;
}

unint64_t sub_1004418C0()
{
  unint64_t result = qword_1016453A0;
  if (!qword_1016453A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016453A0);
  }
  return result;
}

unint64_t sub_100441918()
{
  unint64_t result = qword_1016453A8;
  if (!qword_1016453A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016453A8);
  }
  return result;
}

unint64_t sub_100441970()
{
  unint64_t result = qword_1016453B0;
  if (!qword_1016453B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016453B0);
  }
  return result;
}

unint64_t sub_1004419C8()
{
  unint64_t result = qword_1016453B8;
  if (!qword_1016453B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016453B8);
  }
  return result;
}

unint64_t sub_100441A20()
{
  unint64_t result = qword_1016453C0;
  if (!qword_1016453C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016453C0);
  }
  return result;
}

unint64_t sub_100441A78()
{
  unint64_t result = qword_1016453C8;
  if (!qword_1016453C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016453C8);
  }
  return result;
}

unint64_t sub_100441AD0()
{
  unint64_t result = qword_1016453D0;
  if (!qword_1016453D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016453D0);
  }
  return result;
}

unint64_t sub_100441B28()
{
  unint64_t result = qword_1016453D8;
  if (!qword_1016453D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016453D8);
  }
  return result;
}

unint64_t sub_100441B80()
{
  unint64_t result = qword_1016453E0;
  if (!qword_1016453E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016453E0);
  }
  return result;
}

unint64_t sub_100441BD8()
{
  unint64_t result = qword_1016453E8;
  if (!qword_1016453E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016453E8);
  }
  return result;
}

unint64_t sub_100441C30()
{
  unint64_t result = qword_1016453F0;
  if (!qword_1016453F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016453F0);
  }
  return result;
}

unint64_t sub_100441C88()
{
  unint64_t result = qword_1016453F8;
  if (!qword_1016453F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016453F8);
  }
  return result;
}

unint64_t sub_100441CE0()
{
  unint64_t result = qword_101645400;
  if (!qword_101645400)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645400);
  }
  return result;
}

unint64_t sub_100441D38()
{
  unint64_t result = qword_101645408;
  if (!qword_101645408)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645408);
  }
  return result;
}

unint64_t sub_100441D90()
{
  unint64_t result = qword_101645410;
  if (!qword_101645410)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645410);
  }
  return result;
}

unint64_t sub_100441DE8()
{
  unint64_t result = qword_101645418;
  if (!qword_101645418)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645418);
  }
  return result;
}

unint64_t sub_100441E40()
{
  unint64_t result = qword_101645420;
  if (!qword_101645420)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645420);
  }
  return result;
}

unint64_t sub_100441E98()
{
  unint64_t result = qword_101645428;
  if (!qword_101645428)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645428);
  }
  return result;
}

unint64_t sub_100441EF0()
{
  unint64_t result = qword_101645430;
  if (!qword_101645430)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645430);
  }
  return result;
}

unint64_t sub_100441F48()
{
  unint64_t result = qword_101645438;
  if (!qword_101645438)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645438);
  }
  return result;
}

unint64_t sub_100441FA0()
{
  unint64_t result = qword_101645440;
  if (!qword_101645440)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645440);
  }
  return result;
}

unint64_t sub_100441FF8()
{
  unint64_t result = qword_101645448;
  if (!qword_101645448)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645448);
  }
  return result;
}

unint64_t sub_100442050()
{
  unint64_t result = qword_101645450;
  if (!qword_101645450)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645450);
  }
  return result;
}

unint64_t sub_1004420A8()
{
  unint64_t result = qword_101645458;
  if (!qword_101645458)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645458);
  }
  return result;
}

unint64_t sub_100442100()
{
  unint64_t result = qword_101645460;
  if (!qword_101645460)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645460);
  }
  return result;
}

unint64_t sub_100442158()
{
  unint64_t result = qword_101645468;
  if (!qword_101645468)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645468);
  }
  return result;
}

unint64_t sub_1004421B0()
{
  unint64_t result = qword_101645470;
  if (!qword_101645470)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645470);
  }
  return result;
}

unint64_t sub_100442208()
{
  unint64_t result = qword_101645478;
  if (!qword_101645478)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645478);
  }
  return result;
}

unint64_t sub_100442260()
{
  unint64_t result = qword_101645480;
  if (!qword_101645480)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645480);
  }
  return result;
}

unint64_t sub_1004422B8()
{
  unint64_t result = qword_101645488;
  if (!qword_101645488)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645488);
  }
  return result;
}

unint64_t sub_100442310()
{
  unint64_t result = qword_101645490;
  if (!qword_101645490)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645490);
  }
  return result;
}

unint64_t sub_100442368()
{
  unint64_t result = qword_101645498;
  if (!qword_101645498)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645498);
  }
  return result;
}

unint64_t sub_1004423C0()
{
  unint64_t result = qword_1016454A0;
  if (!qword_1016454A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016454A0);
  }
  return result;
}

unint64_t sub_100442418()
{
  unint64_t result = qword_1016454A8;
  if (!qword_1016454A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016454A8);
  }
  return result;
}

unint64_t sub_100442470()
{
  unint64_t result = qword_1016454B0;
  if (!qword_1016454B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016454B0);
  }
  return result;
}

unint64_t sub_1004424C4()
{
  unint64_t result = qword_1016454B8;
  if (!qword_1016454B8)
  {
    sub_10001D4B0(255, (unint64_t *)&qword_10165F5D0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016454B8);
  }
  return result;
}

unint64_t sub_10044252C()
{
  unint64_t result = qword_1016454C8;
  if (!qword_1016454C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016454C8);
  }
  return result;
}

unint64_t sub_100442580()
{
  unint64_t result = qword_1016454D8;
  if (!qword_1016454D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016454D8);
  }
  return result;
}

unsigned char *_s2C3V10CodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100442670);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for PrivateKey.PrivateKeyError()
{
  return &type metadata for PrivateKey.PrivateKeyError;
}

uint64_t sub_1004426AC(uint64_t a1, unint64_t a2, char a3)
{
  if (a3 == 1) {
    return sub_1000361E0(a1, a2);
  }
  return a1;
}

uint64_t destroy for KeyRepresentableError(uint64_t a1)
{
  return sub_1004426D0(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t sub_1004426D0(uint64_t a1, unint64_t a2, char a3)
{
  if (a3 == 1) {
    return sub_10001CFB8(a1, a2);
  }
  return a1;
}

uint64_t _s12searchpartyd21KeyRepresentableErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_1004426AC(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for KeyRepresentableError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  sub_1004426AC(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_1004426D0(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for KeyRepresentableError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_1004426D0(v4, v5, v6);
  return a1;
}

ValueMetadata *type metadata accessor for KeyRepresentableError()
{
  return &type metadata for KeyRepresentableError;
}

unint64_t sub_1004427E4()
{
  unint64_t result = qword_1016455C8;
  if (!qword_1016455C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016455C8);
  }
  return result;
}

uint64_t sub_100442854(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  char v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  char v3 = sub_100A6E8E0(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[5 * v8 + 4];
  if (a1 + 32 < v9 + 40 * v2 && v9 < a1 + 32 + 40 * v2) {
    goto LABEL_24;
  }
  sub_10000588C(&qword_101657C00);
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1004429C0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  char v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  char v3 = sub_100A6E25C(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100442B14(uint64_t a1)
{
  return sub_100446C5C(a1, (uint64_t (*)(void))sub_100A6F2F4, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
}

uint64_t sub_100442B40(uint64_t a1)
{
  return sub_100446C5C(a1, (uint64_t (*)(void))sub_100A6F46C, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
}

uint64_t sub_100442B6C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  char v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  char v3 = sub_100A6F4D4(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[9 * v8 + 4];
  if (a1 + 32 < v9 + 72 * v2 && v9 < a1 + 32 + 72 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100442CC8(uint64_t a1)
{
  return sub_100446C5C(a1, (uint64_t (*)(void))sub_100A6F600, type metadata accessor for KeyDropCreateRequest.Member);
}

uint64_t sub_100442CF4(uint64_t a1)
{
  return sub_100446C5C(a1, (uint64_t (*)(void))sub_100A6EC80, (uint64_t (*)(void))type metadata accessor for SharingCircleSecret);
}

uint64_t sub_100442D20(unint64_t a1)
{
  return sub_10044559C(a1, (uint64_t (*)(uint64_t, void, unint64_t))sub_10044894C);
}

uint64_t sub_100442D38(unint64_t a1)
{
  return sub_10044559C(a1, (uint64_t (*)(uint64_t, void, unint64_t))sub_10044872C);
}

uint64_t sub_100442D50(uint64_t a1)
{
  return sub_100446C5C(a1, (uint64_t (*)(void))sub_100A6F7BC, (uint64_t (*)(void))type metadata accessor for DefaultConfigurationLayer);
}

uint64_t sub_100442D7C(uint64_t a1)
{
  return sub_100444F4C(a1, (uint64_t (*)(void))sub_100A6F7F0, (uint64_t *)&unk_10164DBF0);
}

uint64_t sub_100442D9C(uint64_t a1)
{
  return sub_100446C5C(a1, (uint64_t (*)(void))sub_100A6F668, (uint64_t (*)(void))&type metadata accessor for UUID);
}

uint64_t sub_100442DC8(uint64_t a1)
{
  return sub_100444F4C(a1, (uint64_t (*)(void))sub_100A6F9DC, &qword_10163BCC0);
}

uint64_t sub_100442DE8(uint64_t a1)
{
  return sub_100446C5C(a1, (uint64_t (*)(void))sub_100A6F9A8, (uint64_t (*)(void))type metadata accessor for MemberPeerTrust);
}

uint64_t sub_100442E14(uint64_t a1)
{
  return sub_100446C5C(a1, (uint64_t (*)(void))sub_100A6F84C, (uint64_t (*)(void))type metadata accessor for OwnerPeerTrust);
}

uint64_t sub_100442E40(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  char v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  char v3 = sub_100A6EA38(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100442F94(uint64_t a1)
{
  return sub_100446E44(a1, (uint64_t (*)(void))sub_100A6FC28, type metadata accessor for ObservedAdvertisement);
}

uint64_t sub_100442FC0(uint64_t a1)
{
  return sub_100446E44(a1, (uint64_t (*)(void))sub_100A6FEB8, (uint64_t (*)(void))&type metadata accessor for URLQueryItem);
}

uint64_t sub_100442FEC(uint64_t a1)
{
  return sub_100446E44(a1, (uint64_t (*)(void))sub_100A70010, type metadata accessor for SharingCircleKeyManager.MemberDeviceDecryptionKey);
}

uint64_t sub_100443018(int64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v52 = a2;
  uint64_t v8 = type metadata accessor for OwnedDeviceKeyRecord();
  uint64_t v53 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  v51 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C((uint64_t *)&unk_101660670);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11);
  __chkstk_darwin(v14);
  char v17 = (char *)&v43 - v16;
  unint64_t v18 = a4 >> 1;
  uint64_t v19 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v49 = v15;
  unint64_t v50 = a4;
  uint64_t v54 = a1;
  a1 = *v4;
  int64_t v20 = *(void *)(*v4 + 16);
  a4 = v20 + v19;
  if (__OFADD__(v20, v19))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *int64_t v4 = a1;
  if (!isUniquelyReferenced_nonNull_native || (int64_t v22 = *(void *)(a1 + 24) >> 1, v22 < (uint64_t)a4))
  {
    if (v20 <= (uint64_t)a4) {
      int64_t v23 = v20 + v19;
    }
    else {
      int64_t v23 = v20;
    }
    a1 = sub_100A700E0(isUniquelyReferenced_nonNull_native, v23, 1, a1);
    *int64_t v4 = a1;
    int64_t v22 = *(void *)(a1 + 24) >> 1;
  }
  uint64_t v24 = *(void *)(a1 + 16);
  uint64_t v25 = v22 - v24;
  if (v18 == a3)
  {
    if (v19 <= 0)
    {
      uint64_t v19 = 0;
      a4 = a3;
      goto LABEL_23;
    }
LABEL_29:
    __break(1u);
LABEL_30:
    a1 = *(void *)(a1 + 16);
    uint64_t v34 = v53;
    v44 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v53 + 56);
    uint64_t v45 = v53 + 56;
    v44(v17, 1, 1, v8);
    uint64_t v25 = v49;
    sub_10001D074((uint64_t)v17, v49, (uint64_t *)&unk_101660670);
    v47 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48);
    uint64_t v48 = v34 + 48;
    if (v47(v25, 1, v8) == 1)
    {
LABEL_31:
      sub_10001DAB4((uint64_t)v17, (uint64_t *)&unk_101660670);
      swift_unknownObjectRelease();
      return sub_10001DAB4(v25, (uint64_t *)&unk_101660670);
    }
    do
    {
LABEL_36:
      sub_10001DAB4(v25, (uint64_t *)&unk_101660670);
      unint64_t v36 = *(void *)(*v4 + 24);
      int64_t v35 = v36 >> 1;
      if ((uint64_t)(v36 >> 1) < a1 + 1)
      {
        uint64_t v42 = sub_100A700E0(v36 > 1, a1 + 1, 1, *v4);
        *int64_t v4 = v42;
        unint64_t v46 = v42;
        int64_t v35 = *(void *)(v42 + 24) >> 1;
      }
      else
      {
        unint64_t v46 = *v4;
      }
      uint64_t v37 = *(unsigned __int8 *)(v53 + 80);
      sub_10001D074((uint64_t)v17, (uint64_t)v13, (uint64_t *)&unk_101660670);
      if (v47((uint64_t)v13, 1, v8) == 1)
      {
LABEL_34:
        sub_10001DAB4((uint64_t)v13, (uint64_t *)&unk_101660670);
        int64_t v35 = a1;
      }
      else
      {
        v46 += (v37 + 32) & ~v37;
        if (a1 > v35) {
          int64_t v35 = a1;
        }
        uint64_t v38 = (uint64_t)v51;
        while (1)
        {
          sub_100449454((uint64_t)v13, v38, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
          if (v35 == a1) {
            break;
          }
          sub_10001DAB4((uint64_t)v17, (uint64_t *)&unk_101660670);
          sub_100449454(v38, v46 + *(void *)(v53 + 72) * a1, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
          if (a4 == v18)
          {
            uint64_t v39 = 1;
            a4 = v18;
          }
          else
          {
            v40 = sub_101310B54(v55, a4, v54, v52, a3, v50);
            sub_1004493EC(v41, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
            ((void (*)(void (**)(uint64_t *), void))v40)(v55, 0);
            BOOL v31 = __OFADD__(a4++, 1);
            if (v31) {
              goto LABEL_51;
            }
            uint64_t v39 = 0;
            uint64_t v38 = (uint64_t)v51;
          }
          v44(v17, v39, 1, v8);
          sub_10001D074((uint64_t)v17, (uint64_t)v13, (uint64_t *)&unk_101660670);
          ++a1;
          if (v47((uint64_t)v13, 1, v8) == 1) {
            goto LABEL_34;
          }
        }
        sub_1004494BC(v38, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
        a1 = v35;
      }
      *(void *)(*v4 + 16) = v35;
      uint64_t v25 = v49;
      sub_10001D074((uint64_t)v17, v49, (uint64_t *)&unk_101660670);
    }
    while (v47(v25, 1, v8) != 1);
    goto LABEL_31;
  }
  if (v25 < v19)
  {
    __break(1u);
    goto LABEL_36;
  }
  if (v19 < 0
    || ((uint64_t v26 = *(void *)(v53 + 72),
         unint64_t v27 = a1
             + ((*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80))
             + v26 * v24,
         unint64_t v28 = v52 + v26 * a3,
         v28 < v27 + v26 * v19)
      ? (BOOL v29 = v27 >= v28 + v26 * v19)
      : (BOOL v29 = 1),
        !v29))
  {
LABEL_52:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  swift_arrayInitWithCopy();
  if (v19)
  {
    uint64_t v30 = *(void *)(a1 + 16);
    BOOL v31 = __OFADD__(v30, v19);
    uint64_t v32 = v30 + v19;
    if (v31)
    {
      __break(1u);
LABEL_51:
      __break(1u);
      goto LABEL_52;
    }
    *(void *)(a1 + 16) = v32;
  }
  a4 = v18;
LABEL_23:
  if (v19 == v25) {
    goto LABEL_30;
  }

  return swift_unknownObjectRelease();
}

uint64_t sub_10044365C()
{
  uint64_t v2 = v0;
  uint64_t v47 = type metadata accessor for OwnedDeviceKeyRecord();
  uint64_t v3 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  uint64_t v45 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101660670);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v46 = (uint64_t)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v40 - v9;
  __chkstk_darwin(v8);
  uint64_t v48 = (uint64_t)&v40 - v11;
  uint64_t v12 = dispatch thunk of _AnySequenceBox._underestimatedCount.getter();
  unint64_t v13 = *v0;
  int64_t v14 = *(void *)(*v0 + 16);
  int64_t v15 = v14 + v12;
  if (__OFADD__(v14, v12))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v16 = v12;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v2 = v13;
  if (!isUniquelyReferenced_nonNull_native || (int64_t v18 = *(void *)(v13 + 24) >> 1, v18 < v15))
  {
    if (v14 <= v15) {
      int64_t v19 = v15;
    }
    else {
      int64_t v19 = v14;
    }
    unint64_t v13 = sub_100A700E0(isUniquelyReferenced_nonNull_native, v19, 1, v13);
    *uint64_t v2 = v13;
    int64_t v18 = *(void *)(v13 + 24) >> 1;
  }
  uint64_t v1 = *(void *)(v3 + 72);
  int64_t v20 = v18 - *(void *)(v13 + 16);
  unint64_t v44 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v21 = dispatch thunk of _AnySequenceBox.__copyContents(initializing:)();
  uint64_t v23 = v22;
  swift_release();
  sub_10000588C(&qword_1016455D8);
  *(void *)(swift_initStackObject() + 16) = v21;
  if (v23 < v16) {
    goto LABEL_15;
  }
  if (v23 >= 1)
  {
    uint64_t v24 = *(void *)(v13 + 16);
    BOOL v25 = __OFADD__(v24, v23);
    uint64_t v26 = v24 + v23;
    if (v25)
    {
      __break(1u);
LABEL_19:
      uint64_t v41 = v21;
      do
      {
        sub_10001DAB4(v21, (uint64_t *)&unk_101660670);
        uint64_t v29 = *v2;
        unint64_t v30 = *(void *)(*v2 + 24);
        int64_t v31 = v30 >> 1;
        if ((uint64_t)(v30 >> 1) < v20 + 1)
        {
          uint64_t v29 = sub_100A700E0(v30 > 1, v20 + 1, 1, *v2);
          *uint64_t v2 = v29;
          int64_t v31 = *(void *)(v29 + 24) >> 1;
        }
        uint64_t v32 = v46;
        sub_10001D074(v48, v46, (uint64_t *)&unk_101660670);
        if (v43(v32, 1, v47) == 1)
        {
          uint64_t v33 = v46;
LABEL_32:
          sub_10001DAB4(v33, (uint64_t *)&unk_101660670);
          int64_t v37 = v20;
        }
        else
        {
          if (v20 <= v31) {
            int64_t v34 = v31;
          }
          else {
            int64_t v34 = v20;
          }
          int64_t v42 = v34;
          uint64_t v35 = (uint64_t)v45;
          uint64_t v36 = v29 + v44 + v1 * v20;
          uint64_t v33 = v46;
          while (1)
          {
            sub_100449454(v33, v35, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
            int64_t v37 = v42;
            if (v42 == v20) {
              break;
            }
            uint64_t v38 = v48;
            sub_10001DAB4(v48, (uint64_t *)&unk_101660670);
            sub_100449454(v35, v36, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
            ++v20;
            dispatch thunk of _AnyIteratorBoxBase.next()();
            uint64_t v39 = v38;
            uint64_t v33 = v46;
            sub_10001D074(v39, v46, (uint64_t *)&unk_101660670);
            v36 += v1;
            if (v43(v33, 1, v47) == 1) {
              goto LABEL_32;
            }
          }
          sub_1004494BC(v35, (uint64_t (*)(void))type metadata accessor for OwnedDeviceKeyRecord);
          int64_t v20 = v37;
        }
        *(void *)(*v2 + 16) = v37;
        uint64_t v21 = v41;
        sub_10001D074(v48, v41, (uint64_t *)&unk_101660670);
      }
      while (v43(v21, 1, v47) != 1);
      goto LABEL_17;
    }
    *(void *)(v13 + 16) = v26;
  }
  if (v23 != v20) {
    return swift_release();
  }
LABEL_16:
  int64_t v20 = *(void *)(v13 + 16);
  uint64_t v28 = v48;
  dispatch thunk of _AnyIteratorBoxBase.next()();
  uint64_t v21 = (uint64_t)v10;
  sub_10001D074(v28, (uint64_t)v10, (uint64_t *)&unk_101660670);
  uint64_t v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (v43((uint64_t)v10, 1, v47) != 1) {
    goto LABEL_19;
  }
LABEL_17:
  sub_10001DAB4(v48, (uint64_t *)&unk_101660670);
  swift_release();
  return sub_10001DAB4(v21, (uint64_t *)&unk_101660670);
}

uint64_t sub_100443B14(uint64_t a1)
{
  return sub_100446434(a1, (uint64_t (*)(void))sub_100A6FBAC, &qword_10163A790);
}

uint64_t sub_100443B34(uint64_t a1)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  v86 = (char *)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_101638CF0);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v87 = (uint64_t)&v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  __chkstk_darwin(v10);
  uint64_t v16 = (char *)&v70 - v15;
  uint64_t v17 = *(void *)(a1 + 16);
  int64_t v18 = *v1;
  int64_t v19 = *(void *)(*v1 + 16);
  int64_t v20 = v19 + v17;
  if (__OFADD__(v19, v17))
  {
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v85 = v11;
  uint64_t v2 = v5;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t *v1 = v18;
  if (!isUniquelyReferenced_nonNull_native || (int64_t v22 = *(void *)(v18 + 24) >> 1, v22 < v20))
  {
    if (v19 <= v20) {
      int64_t v23 = v19 + v17;
    }
    else {
      int64_t v23 = v19;
    }
    int64_t v18 = sub_100A6F668(isUniquelyReferenced_nonNull_native, v23, 1, v18);
    unint64_t *v1 = v18;
    int64_t v22 = *(void *)(v18 + 24) >> 1;
  }
  uint64_t v24 = *(void *)(v18 + 16);
  int64_t v19 = *(void *)(v5 + 72);
  int64_t v25 = v22 - v24;
  unint64_t v84 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v26 = sub_100711B04(&v88, v18 + v84 + v19 * v24, v22 - v24, a1);
  if (v26 < v17) {
    goto LABEL_17;
  }
  if (v26)
  {
    uint64_t v29 = *(void *)(v18 + 16);
    BOOL v30 = __OFADD__(v29, v26);
    uint64_t v31 = v29 + v26;
    if (v30)
    {
      __break(1u);
      goto LABEL_22;
    }
    *(void *)(v18 + 16) = v31;
  }
  if (v26 == v25)
  {
LABEL_18:
    int64_t v18 = *(void *)(v18 + 16);
    uint64_t v17 = v88;
    uint64_t v28 = v89;
    int64_t v27 = v90;
    int64_t v25 = v91;
    int64_t v79 = v90;
    int64_t v83 = v89;
    if (v92)
    {
      unint64_t v33 = (v92 - 1) & v92;
      unint64_t v34 = __clz(__rbit64(v92)) | (v91 << 6);
LABEL_20:
      (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v16, *(void *)(v17 + 48) + v34 * v19, v4);
      v74 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56);
      v74(v16, 0, 1, v4);
      unint64_t v35 = v33;
LABEL_43:
      unint64_t v81 = v35;
      int64_t v82 = v25;
      unint64_t v88 = v17;
      int64_t v89 = v83;
      int64_t v90 = v79;
      int64_t v91 = v25;
      unint64_t v92 = v35;
      uint64_t v41 = v85;
      sub_10001D074((uint64_t)v16, v85, &qword_101638CF0);
      v80 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
      int v42 = v80(v41, 1, v4);
      uint64_t v43 = v87;
      if (v42 == 1)
      {
LABEL_81:
        sub_10001DAB4((uint64_t)v16, &qword_101638CF0);
        sub_100132C20();
        return sub_10001DAB4(v85, &qword_101638CF0);
      }
      v78 = (void (**)(void, void, void))(v5 + 32);
      v72 = (void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v73 = v5 + 56;
      v71 = (void (**)(char *, uint64_t))(v5 + 8);
      uint64_t v44 = v85;
      uint64_t v45 = v86;
      v75 = v16;
      while (1)
      {
        sub_10001DAB4(v44, &qword_101638CF0);
        uint64_t v47 = *v1;
        unint64_t v48 = *(void *)(*v1 + 24);
        int64_t v49 = v48 >> 1;
        if ((uint64_t)(v48 >> 1) < v18 + 1)
        {
          uint64_t v47 = sub_100A6F668(v48 > 1, v18 + 1, 1, *v1);
          unint64_t *v1 = v47;
          int64_t v49 = *(void *)(v47 + 24) >> 1;
        }
        sub_10001D074((uint64_t)v16, v43, &qword_101638CF0);
        if (v80(v43, 1, v4) != 1) {
          break;
        }
LABEL_50:
        sub_10001DAB4(v43, &qword_101638CF0);
        int64_t v46 = v18;
LABEL_46:
        *(void *)(*v1 + 16) = v46;
        uint64_t v44 = v85;
        sub_10001D074((uint64_t)v16, v85, &qword_101638CF0);
        if (v80(v44, 1, v4) == 1)
        {
          int64_t v82 = v91;
          int64_t v83 = v89;
          unint64_t v81 = v92;
          goto LABEL_81;
        }
      }
      unint64_t v77 = v47 + v84;
      unint64_t v50 = *v78;
      if (v18 <= v49) {
        int64_t v51 = v49;
      }
      else {
        int64_t v51 = v18;
      }
      int64_t v79 = v51;
      v76 = v50;
      while (1)
      {
        v55 = v45;
        uint64_t v56 = v43;
        uint64_t v57 = v43;
        v58 = v45;
        v59 = (uint64_t (*)(unint64_t, char *, uint64_t))v50;
        v50(v55, v56, v4);
        if (v18 == v79)
        {
          (*v71)(v58, v4);
          int64_t v46 = v79;
          int64_t v18 = v79;
          uint64_t v45 = v58;
          uint64_t v43 = v57;
          uint64_t v16 = v75;
          goto LABEL_46;
        }
        uint64_t v16 = v75;
        sub_10001DAB4((uint64_t)v75, &qword_101638CF0);
        int64_t v60 = v18;
        uint64_t result = v59(v77 + v18 * v19, v58, v4);
        uint64_t v61 = v89;
        int64_t v62 = v91;
        int64_t v83 = v60;
        unint64_t v81 = v88;
        int64_t v82 = v90;
        if (v92) {
          break;
        }
        int64_t v65 = v91 + 1;
        if (__OFADD__(v91, 1))
        {
          __break(1u);
          return result;
        }
        int64_t v66 = (unint64_t)(v90 + 64) >> 6;
        int64_t v64 = v91;
        if (v65 < v66)
        {
          unint64_t v67 = *(void *)(v89 + 8 * v65);
          if (v67) {
            goto LABEL_65;
          }
          int64_t v68 = v91 + 2;
          int64_t v64 = v91 + 1;
          if (v91 + 2 < v66)
          {
            unint64_t v67 = *(void *)(v89 + 8 * v68);
            if (v67) {
              goto LABEL_68;
            }
            int64_t v64 = v91 + 2;
            if (v91 + 3 < v66)
            {
              unint64_t v67 = *(void *)(v89 + 8 * (v91 + 3));
              if (v67)
              {
                int64_t v65 = v91 + 3;
                goto LABEL_65;
              }
              int64_t v68 = v91 + 4;
              int64_t v64 = v91 + 3;
              if (v91 + 4 < v66)
              {
                unint64_t v67 = *(void *)(v89 + 8 * v68);
                if (v67)
                {
LABEL_68:
                  int64_t v65 = v68;
                  goto LABEL_65;
                }
                int64_t v65 = v91 + 5;
                int64_t v64 = v91 + 4;
                if (v91 + 5 < v66)
                {
                  unint64_t v67 = *(void *)(v89 + 8 * v65);
                  if (!v67)
                  {
                    int64_t v64 = v66 - 1;
                    int64_t v69 = v91 + 6;
                    do
                    {
                      if (v66 == v69)
                      {
                        uint64_t v16 = v75;
                        goto LABEL_56;
                      }
                      unint64_t v67 = *(void *)(v89 + 8 * v69++);
                    }
                    while (!v67);
                    int64_t v65 = v69 - 1;
                    uint64_t v16 = v75;
                  }
LABEL_65:
                  unint64_t v52 = (v67 - 1) & v67;
                  unint64_t v63 = __clz(__rbit64(v67)) + (v65 << 6);
                  int64_t v62 = v65;
LABEL_61:
                  unint64_t v53 = v81;
                  (*v72)(v16, *(void *)(v81 + 48) + v63 * v19, v4);
                  v74(v16, 0, 1, v4);
                  int64_t v64 = v62;
                  goto LABEL_57;
                }
              }
            }
          }
        }
LABEL_56:
        v74(v16, 1, 1, v4);
        unint64_t v52 = 0;
        unint64_t v53 = v81;
LABEL_57:
        unint64_t v88 = v53;
        int64_t v89 = v61;
        int64_t v18 = v83 + 1;
        int64_t v90 = v82;
        int64_t v91 = v64;
        unint64_t v92 = v52;
        uint64_t v43 = v87;
        sub_10001D074((uint64_t)v16, v87, &qword_101638CF0);
        int v54 = v80(v43, 1, v4);
        uint64_t v45 = v86;
        unint64_t v50 = v76;
        if (v54 == 1) {
          goto LABEL_50;
        }
      }
      unint64_t v52 = (v92 - 1) & v92;
      unint64_t v63 = __clz(__rbit64(v92)) | (v91 << 6);
      goto LABEL_61;
    }
LABEL_22:
    int64_t v36 = v25 + 1;
    if (__OFADD__(v25, 1))
    {
      __break(1u);
LABEL_41:
      uint64_t v17 = v11;
      int64_t v18 = v12;
      uint64_t v4 = v13;
      uint64_t v16 = v14;
    }
    else
    {
      int64_t v37 = (unint64_t)(v27 + 64) >> 6;
      int64_t v82 = v25;
      if (v36 < v37)
      {
        unint64_t v38 = *(void *)(v28 + 8 * v36);
        if (v38)
        {
LABEL_25:
          unint64_t v33 = (v38 - 1) & v38;
          unint64_t v34 = __clz(__rbit64(v38)) + (v36 << 6);
          int64_t v25 = v36;
          goto LABEL_20;
        }
        int64_t v39 = v25 + 2;
        int64_t v82 = v25 + 1;
        if (v25 + 2 < v37)
        {
          int64_t v14 = v16;
          uint64_t v13 = v4;
          int64_t v12 = v18;
          uint64_t v11 = v17;
          unint64_t v38 = *(void *)(v28 + 8 * v39);
          if (v38)
          {
LABEL_28:
            int64_t v36 = v39;
            goto LABEL_25;
          }
          int64_t v82 = v25 + 2;
          if (v25 + 3 < v37)
          {
            unint64_t v38 = *(void *)(v83 + 8 * (v25 + 3));
            if (v38)
            {
              int64_t v36 = v25 + 3;
              goto LABEL_25;
            }
            int64_t v39 = v25 + 4;
            int64_t v82 = v25 + 3;
            if (v25 + 4 < v37)
            {
              unint64_t v38 = *(void *)(v83 + 8 * v39);
              if (v38) {
                goto LABEL_28;
              }
              int64_t v36 = v25 + 5;
              int64_t v82 = v25 + 4;
              if (v25 + 5 < v37)
              {
                unint64_t v38 = *(void *)(v83 + 8 * v36);
                if (!v38)
                {
                  int64_t v82 = v37 - 1;
                  int64_t v40 = v25 + 6;
                  do
                  {
                    if (v37 == v40) {
                      goto LABEL_41;
                    }
                    unint64_t v38 = *(void *)(v83 + 8 * v40++);
                  }
                  while (!v38);
                  int64_t v36 = v40 - 1;
                }
                goto LABEL_25;
              }
            }
          }
        }
      }
    }
    v74 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56);
    v74(v16, 1, 1, v4);
    unint64_t v35 = 0;
    int64_t v25 = v82;
    goto LABEL_43;
  }

  return sub_100132C20();
}

uint64_t sub_1004443F4(uint64_t a1)
{
  return sub_100446C5C(a1, (uint64_t (*)(void))sub_100A700AC, (uint64_t (*)(void))type metadata accessor for MemberSharingCircle);
}

uint64_t sub_100444420(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= *(void *)(v3 + 24) >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    int64_t v23 = v4 + v2;
  }
  else {
    int64_t v23 = v4;
  }
  unint64_t v3 = sub_100A702F0(isUniquelyReferenced_nonNull_native, v23, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = *(void *)(v3 + 16);
  uint64_t v10 = (*(void *)(v3 + 24) >> 1) - v9;
  uint64_t v11 = *(void *)(sub_10000588C(&qword_10163A888) - 8);
  uint64_t v12 = *(void *)(v11 + 72);
  if (v10 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v13 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  unint64_t v14 = v3 + v13 + v12 * v9;
  unint64_t v15 = a1 + v13;
  uint64_t v16 = v12 * v8;
  unint64_t v17 = v14 + v16;
  unint64_t v18 = v15 + v16;
  if (v15 < v17 && v14 < v18) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v20 = *(void *)(v3 + 16);
  BOOL v21 = __OFADD__(v20, v8);
  uint64_t v22 = v20 + v8;
  if (!v21)
  {
    *(void *)(v3 + 16) = v22;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    unint64_t *v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1004445D4(uint64_t a1)
{
  return sub_100446434(a1, (uint64_t (*)(void))sub_100A6F9F0, &qword_10163BA10);
}

uint64_t sub_1004445F4(uint64_t a1)
{
  return sub_100444F4C(a1, (uint64_t (*)(void))sub_100A70870, (uint64_t *)&unk_101657950);
}

uint64_t sub_100444614(uint64_t a1)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  v86 = (char *)&v70 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_101638CF0);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v87 = (uint64_t)&v70 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  __chkstk_darwin(v10);
  uint64_t v16 = (char *)&v70 - v15;
  uint64_t v17 = *(void *)(a1 + 16);
  int64_t v18 = *v1;
  int64_t v19 = *(void *)(*v1 + 16);
  int64_t v20 = v19 + v17;
  if (__OFADD__(v19, v17))
  {
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t v85 = v11;
  uint64_t v2 = v5;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t *v1 = v18;
  if (!isUniquelyReferenced_nonNull_native || (int64_t v22 = *(void *)(v18 + 24) >> 1, v22 < v20))
  {
    if (v19 <= v20) {
      int64_t v23 = v19 + v17;
    }
    else {
      int64_t v23 = v19;
    }
    int64_t v18 = sub_100A6F668(isUniquelyReferenced_nonNull_native, v23, 1, v18);
    unint64_t *v1 = v18;
    int64_t v22 = *(void *)(v18 + 24) >> 1;
  }
  uint64_t v24 = *(void *)(v18 + 16);
  int64_t v19 = *(void *)(v5 + 72);
  int64_t v25 = v22 - v24;
  unint64_t v84 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v26 = sub_100712BF8(&v88, (char *)(v18 + v84 + v19 * v24), v22 - v24, a1);
  if (v26 < v17) {
    goto LABEL_17;
  }
  if (v26)
  {
    uint64_t v29 = *(void *)(v18 + 16);
    BOOL v30 = __OFADD__(v29, v26);
    uint64_t v31 = v29 + v26;
    if (v30)
    {
      __break(1u);
      goto LABEL_22;
    }
    *(void *)(v18 + 16) = v31;
  }
  if (v26 == v25)
  {
LABEL_18:
    int64_t v18 = *(void *)(v18 + 16);
    uint64_t v17 = v88;
    uint64_t v28 = v89;
    int64_t v27 = v90;
    int64_t v25 = v91;
    int64_t v79 = v90;
    int64_t v83 = v89;
    if (v92)
    {
      unint64_t v33 = (v92 - 1) & v92;
      unint64_t v34 = __clz(__rbit64(v92)) | (v91 << 6);
LABEL_20:
      (*(void (**)(char *, unint64_t, uint64_t))(v2 + 16))(v16, *(void *)(v17 + 48) + v34 * v19, v4);
      v74 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56);
      v74(v16, 0, 1, v4);
      unint64_t v35 = v33;
LABEL_43:
      unint64_t v81 = v35;
      int64_t v82 = v25;
      unint64_t v88 = v17;
      int64_t v89 = v83;
      int64_t v90 = v79;
      int64_t v91 = v25;
      unint64_t v92 = v35;
      uint64_t v41 = v85;
      sub_10001D074((uint64_t)v16, v85, &qword_101638CF0);
      v80 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
      int v42 = v80(v41, 1, v4);
      uint64_t v43 = v87;
      if (v42 == 1)
      {
LABEL_81:
        sub_10001DAB4((uint64_t)v16, &qword_101638CF0);
        sub_100132C20();
        return sub_10001DAB4(v85, &qword_101638CF0);
      }
      v78 = (void (**)(void, void, void))(v5 + 32);
      v72 = (void (**)(char *, unint64_t, uint64_t))(v5 + 16);
      uint64_t v73 = v5 + 56;
      v71 = (void (**)(char *, uint64_t))(v5 + 8);
      uint64_t v44 = v85;
      uint64_t v45 = v86;
      v75 = v16;
      while (1)
      {
        sub_10001DAB4(v44, &qword_101638CF0);
        uint64_t v47 = *v1;
        unint64_t v48 = *(void *)(*v1 + 24);
        int64_t v49 = v48 >> 1;
        if ((uint64_t)(v48 >> 1) < v18 + 1)
        {
          uint64_t v47 = sub_100A6F668(v48 > 1, v18 + 1, 1, *v1);
          unint64_t *v1 = v47;
          int64_t v49 = *(void *)(v47 + 24) >> 1;
        }
        sub_10001D074((uint64_t)v16, v43, &qword_101638CF0);
        if (v80(v43, 1, v4) != 1) {
          break;
        }
LABEL_50:
        sub_10001DAB4(v43, &qword_101638CF0);
        int64_t v46 = v18;
LABEL_46:
        *(void *)(*v1 + 16) = v46;
        uint64_t v44 = v85;
        sub_10001D074((uint64_t)v16, v85, &qword_101638CF0);
        if (v80(v44, 1, v4) == 1)
        {
          int64_t v82 = v91;
          int64_t v83 = v89;
          unint64_t v81 = v92;
          goto LABEL_81;
        }
      }
      unint64_t v77 = v47 + v84;
      unint64_t v50 = *v78;
      if (v18 <= v49) {
        int64_t v51 = v49;
      }
      else {
        int64_t v51 = v18;
      }
      int64_t v79 = v51;
      v76 = v50;
      while (1)
      {
        v55 = v45;
        uint64_t v56 = v43;
        uint64_t v57 = v43;
        v58 = v45;
        v59 = (uint64_t (*)(unint64_t, char *, uint64_t))v50;
        v50(v55, v56, v4);
        if (v18 == v79)
        {
          (*v71)(v58, v4);
          int64_t v46 = v79;
          int64_t v18 = v79;
          uint64_t v45 = v58;
          uint64_t v43 = v57;
          uint64_t v16 = v75;
          goto LABEL_46;
        }
        uint64_t v16 = v75;
        sub_10001DAB4((uint64_t)v75, &qword_101638CF0);
        int64_t v60 = v18;
        uint64_t result = v59(v77 + v18 * v19, v58, v4);
        uint64_t v61 = v89;
        int64_t v62 = v91;
        int64_t v83 = v60;
        unint64_t v81 = v88;
        int64_t v82 = v90;
        if (v92) {
          break;
        }
        int64_t v65 = v91 + 1;
        if (__OFADD__(v91, 1))
        {
          __break(1u);
          return result;
        }
        int64_t v66 = (unint64_t)(v90 + 64) >> 6;
        int64_t v64 = v91;
        if (v65 < v66)
        {
          unint64_t v67 = *(void *)(v89 + 8 * v65);
          if (v67) {
            goto LABEL_65;
          }
          int64_t v68 = v91 + 2;
          int64_t v64 = v91 + 1;
          if (v91 + 2 < v66)
          {
            unint64_t v67 = *(void *)(v89 + 8 * v68);
            if (v67) {
              goto LABEL_68;
            }
            int64_t v64 = v91 + 2;
            if (v91 + 3 < v66)
            {
              unint64_t v67 = *(void *)(v89 + 8 * (v91 + 3));
              if (v67)
              {
                int64_t v65 = v91 + 3;
                goto LABEL_65;
              }
              int64_t v68 = v91 + 4;
              int64_t v64 = v91 + 3;
              if (v91 + 4 < v66)
              {
                unint64_t v67 = *(void *)(v89 + 8 * v68);
                if (v67)
                {
LABEL_68:
                  int64_t v65 = v68;
                  goto LABEL_65;
                }
                int64_t v65 = v91 + 5;
                int64_t v64 = v91 + 4;
                if (v91 + 5 < v66)
                {
                  unint64_t v67 = *(void *)(v89 + 8 * v65);
                  if (!v67)
                  {
                    int64_t v64 = v66 - 1;
                    int64_t v69 = v91 + 6;
                    do
                    {
                      if (v66 == v69)
                      {
                        uint64_t v16 = v75;
                        goto LABEL_56;
                      }
                      unint64_t v67 = *(void *)(v89 + 8 * v69++);
                    }
                    while (!v67);
                    int64_t v65 = v69 - 1;
                    uint64_t v16 = v75;
                  }
LABEL_65:
                  unint64_t v52 = (v67 - 1) & v67;
                  unint64_t v63 = __clz(__rbit64(v67)) + (v65 << 6);
                  int64_t v62 = v65;
LABEL_61:
                  unint64_t v53 = v81;
                  (*v72)(v16, *(void *)(v81 + 48) + v63 * v19, v4);
                  v74(v16, 0, 1, v4);
                  int64_t v64 = v62;
                  goto LABEL_57;
                }
              }
            }
          }
        }
LABEL_56:
        v74(v16, 1, 1, v4);
        unint64_t v52 = 0;
        unint64_t v53 = v81;
LABEL_57:
        unint64_t v88 = v53;
        int64_t v89 = v61;
        int64_t v18 = v83 + 1;
        int64_t v90 = v82;
        int64_t v91 = v64;
        unint64_t v92 = v52;
        uint64_t v43 = v87;
        sub_10001D074((uint64_t)v16, v87, &qword_101638CF0);
        int v54 = v80(v43, 1, v4);
        uint64_t v45 = v86;
        unint64_t v50 = v76;
        if (v54 == 1) {
          goto LABEL_50;
        }
      }
      unint64_t v52 = (v92 - 1) & v92;
      unint64_t v63 = __clz(__rbit64(v92)) | (v91 << 6);
      goto LABEL_61;
    }
LABEL_22:
    int64_t v36 = v25 + 1;
    if (__OFADD__(v25, 1))
    {
      __break(1u);
LABEL_41:
      uint64_t v17 = v11;
      int64_t v18 = v12;
      uint64_t v4 = v13;
      uint64_t v16 = v14;
    }
    else
    {
      int64_t v37 = (unint64_t)(v27 + 64) >> 6;
      int64_t v82 = v25;
      if (v36 < v37)
      {
        unint64_t v38 = *(void *)(v28 + 8 * v36);
        if (v38)
        {
LABEL_25:
          unint64_t v33 = (v38 - 1) & v38;
          unint64_t v34 = __clz(__rbit64(v38)) + (v36 << 6);
          int64_t v25 = v36;
          goto LABEL_20;
        }
        int64_t v39 = v25 + 2;
        int64_t v82 = v25 + 1;
        if (v25 + 2 < v37)
        {
          unint64_t v14 = v16;
          uint64_t v13 = v4;
          int64_t v12 = v18;
          uint64_t v11 = v17;
          unint64_t v38 = *(void *)(v28 + 8 * v39);
          if (v38)
          {
LABEL_28:
            int64_t v36 = v39;
            goto LABEL_25;
          }
          int64_t v82 = v25 + 2;
          if (v25 + 3 < v37)
          {
            unint64_t v38 = *(void *)(v83 + 8 * (v25 + 3));
            if (v38)
            {
              int64_t v36 = v25 + 3;
              goto LABEL_25;
            }
            int64_t v39 = v25 + 4;
            int64_t v82 = v25 + 3;
            if (v25 + 4 < v37)
            {
              unint64_t v38 = *(void *)(v83 + 8 * v39);
              if (v38) {
                goto LABEL_28;
              }
              int64_t v36 = v25 + 5;
              int64_t v82 = v25 + 4;
              if (v25 + 5 < v37)
              {
                unint64_t v38 = *(void *)(v83 + 8 * v36);
                if (!v38)
                {
                  int64_t v82 = v37 - 1;
                  int64_t v40 = v25 + 6;
                  do
                  {
                    if (v37 == v40) {
                      goto LABEL_41;
                    }
                    unint64_t v38 = *(void *)(v83 + 8 * v40++);
                  }
                  while (!v38);
                  int64_t v36 = v40 - 1;
                }
                goto LABEL_25;
              }
            }
          }
        }
      }
    }
    v74 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v2 + 56);
    v74(v16, 1, 1, v4);
    unint64_t v35 = 0;
    int64_t v25 = v82;
    goto LABEL_43;
  }

  return sub_100132C20();
}

uint64_t sub_100444ED4(uint64_t a1)
{
  return sub_100446C5C(a1, (uint64_t (*)(void))sub_100A70884, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
}

uint64_t sub_100444F00(uint64_t a1)
{
  return sub_100446C5C(a1, (uint64_t (*)(void))sub_100A701B0, (uint64_t (*)(void))type metadata accessor for ShareRecord);
}

uint64_t sub_100444F2C(uint64_t a1)
{
  return sub_100444F4C(a1, (uint64_t (*)(void))sub_100A70C30, &qword_1016390A0);
}

uint64_t sub_100444F4C(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3)
{
  unint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *v3;
  uint64_t v6 = *(void *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  if (swift_isUniquelyReferenced_nonNull_native()
    && (int64_t)(v6 + v4) <= *(void *)(v5 + 24) >> 1)
  {
    unint64_t v10 = *(void *)(a1 + 16);
    if (v10) {
      goto LABEL_5;
    }
LABEL_15:
    if (!v4) {
      goto LABEL_16;
    }
    goto LABEL_18;
  }
  uint64_t v5 = a2();
  unint64_t v10 = *(void *)(a1 + 16);
  if (!v10) {
    goto LABEL_15;
  }
LABEL_5:
  uint64_t v11 = *(void *)(v5 + 16);
  if ((*(void *)(v5 + 24) >> 1) - v11 < (uint64_t)v10)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  unint64_t v12 = v5 + 40 * v11 + 32;
  if (a1 + 32 < v12 + 40 * v10 && v12 < a1 + 32 + 40 * v10) {
    goto LABEL_21;
  }
  sub_10000588C(a3);
  swift_arrayInitWithCopy();
  if (v10 < v4)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v14 = *(void *)(v5 + 16);
  BOOL v15 = __OFADD__(v14, v10);
  uint64_t v16 = v14 + v10;
  if (!v15)
  {
    *(void *)(v5 + 16) = v16;
LABEL_16:
    uint64_t result = swift_bridgeObjectRelease();
    *unint64_t v3 = v5;
    return result;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1004450CC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  unint64_t v3 = sub_100A70CCC(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v9 = (unint64_t)&v3[4 * v8 + 4];
  if (a1 + 32 < v9 + 32 * v2 && v9 < a1 + 32 + 32 * v2) {
    goto LABEL_24;
  }
  sub_10000588C((uint64_t *)&unk_101657790);
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100445230(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    int64_t v15 = v4 + v2;
  }
  else {
    int64_t v15 = v4;
  }
  unint64_t v3 = sub_100A711B4(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v10 = (unint64_t)&v3[4 * v9 + 4];
  if (a1 + 32 < v10 + 32 * v8 && v10 < a1 + 32 + 32 * v8) {
    goto LABEL_24;
  }
  sub_10000588C(&qword_1016455E0);
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v12 = v3[2];
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1004453A0(unint64_t a1)
{
  return sub_10044559C(a1, (uint64_t (*)(uint64_t, void, unint64_t))sub_100448D8C);
}

uint64_t sub_1004453B8(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v3 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!((unint64_t)*v1 >> 62))
  {
    uint64_t v4 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v5 = v4 + v3;
    if (!__OFADD__(v4, v3)) {
      goto LABEL_5;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v5 = v15 + v3;
  if (__OFADD__(v15, v3)) {
    goto LABEL_21;
  }
LABEL_5:
  unint64_t v6 = *v1;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  uint64_t *v1 = v6;
  if (isUniquelyReferenced_nonNull_bridgeObject)
  {
    if ((v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
    {
      uint64_t v8 = v6 & 0xFFFFFFFFFFFFFF8;
      if (v5 <= *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        goto LABEL_11;
      }
    }
  }
  if (v6 >> 62) {
    goto LABEL_23;
  }
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    swift_bridgeObjectRelease();
    uint64_t *v1 = v9;
    uint64_t v8 = v9 & 0xFFFFFFFFFFFFFF8;
LABEL_11:
    uint64_t result = sub_100448FAC(v8 + 8 * *(void *)(v8 + 16) + 32, (*(void *)(v8 + 24) >> 1) - *(void *)(v8 + 16), a1);
    if (v11 >= v3) {
      break;
    }
LABEL_22:
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v11 >= 1)
  {
    uint64_t v12 = *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v13 = __OFADD__(v12, v11);
    uint64_t v14 = v12 + v11;
    if (v13)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v1 & 0xFFFFFFFFFFFFFF8) + 0x10) = v14;
  }
  swift_bridgeObjectRelease();

  return specialized Array._endMutation()();
}

uint64_t sub_100445584(unint64_t a1)
{
  return sub_10044559C(a1, (uint64_t (*)(uint64_t, void, unint64_t))sub_1004491CC);
}

uint64_t sub_10044559C(unint64_t a1, uint64_t (*a2)(uint64_t, void, unint64_t))
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!((unint64_t)*v2 >> 62))
  {
    uint64_t v6 = *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v7 = v6 + v5;
    if (!__OFADD__(v6, v5)) {
      goto LABEL_5;
    }
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  swift_bridgeObjectRetain();
  uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  uint64_t v7 = v17 + v5;
  if (__OFADD__(v17, v5)) {
    goto LABEL_21;
  }
LABEL_5:
  unint64_t v8 = *v2;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *unint64_t v2 = v8;
  if (isUniquelyReferenced_nonNull_bridgeObject)
  {
    if ((v8 & 0x8000000000000000) == 0 && (v8 & 0x4000000000000000) == 0)
    {
      uint64_t v10 = v8 & 0xFFFFFFFFFFFFFF8;
      if (v7 <= *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
        goto LABEL_11;
      }
    }
  }
  if (v8 >> 62) {
    goto LABEL_23;
  }
  while (1)
  {
    swift_bridgeObjectRetain();
    uint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)();
    swift_bridgeObjectRelease();
    *unint64_t v2 = v11;
    uint64_t v10 = v11 & 0xFFFFFFFFFFFFFF8;
LABEL_11:
    uint64_t result = a2(v10 + 8 * *(void *)(v10 + 16) + 32, (*(void *)(v10 + 24) >> 1) - *(void *)(v10 + 16), a1);
    if (v13 >= v5) {
      break;
    }
LABEL_22:
    __break(1u);
LABEL_23:
    swift_bridgeObjectRetain();
    _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  if (v13 >= 1)
  {
    uint64_t v14 = *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    BOOL v15 = __OFADD__(v14, v13);
    uint64_t v16 = v14 + v13;
    if (v15)
    {
      __break(1u);
      return result;
    }
    *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10) = v16;
  }
  swift_bridgeObjectRelease();

  return specialized Array._endMutation()();
}

uint64_t sub_100445770(uint64_t a1)
{
  return sub_100446E44(a1, (uint64_t (*)(void))sub_100A71500, (uint64_t (*)(void))type metadata accessor for KeySyncMetadataDisplay);
}

uint64_t sub_10044579C(uint64_t a1)
{
  return sub_100446C5C(a1, (uint64_t (*)(void))sub_100A712C4, (uint64_t (*)(void))type metadata accessor for SecureLocation);
}

uint64_t sub_1004457C8(uint64_t a1)
{
  return sub_100446C5C(a1, (uint64_t (*)(void))sub_100A716D4, type metadata accessor for WildModeTrackingLocation);
}

uint64_t sub_1004457F4(uint64_t result)
{
  uint64_t v3 = *(void *)(result + 16);
  uint64_t v4 = *(void **)v1;
  int64_t v5 = *(void *)(*(void *)v1 + 16);
  int64_t v6 = v5 + v3;
  if (__OFADD__(v5, v3))
  {
    __break(1u);
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v7 = result;
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (int64_t v9 = v4[3] >> 1, v9 < v6))
  {
    if (v5 <= v6) {
      int64_t v10 = v5 + v3;
    }
    else {
      int64_t v10 = v5;
    }
    uint64_t v4 = sub_100A71708(isUniquelyReferenced_nonNull_native, v10, 1, v4);
    int64_t v9 = v4[3] >> 1;
  }
  uint64_t v11 = v4[2];
  uint64_t v12 = v9 - v11;
  uint64_t result = sub_1007129FC((uint64_t)v34, &v4[v11 + 4], v9 - v11, v7);
  if (result < v3) {
    goto LABEL_15;
  }
  if (result)
  {
    uint64_t v14 = v4[2];
    BOOL v15 = __OFADD__(v14, result);
    uint64_t v16 = v14 + result;
    if (v15)
    {
      __break(1u);
      goto LABEL_48;
    }
    v4[2] = v16;
  }
  if (result != v12)
  {
LABEL_13:
    uint64_t result = sub_100132C20();
    *(void *)uint64_t v1 = v4;
    return result;
  }
LABEL_16:
  int64_t v2 = v4[2];
  uint64_t v3 = v34[0];
  uint64_t v33 = v34[1];
  uint64_t v13 = v35;
  int64_t v6 = v36;
  if (v37)
  {
    unint64_t v17 = (v37 - 1) & v37;
    unint64_t v18 = __clz(__rbit64(v37)) | (v36 << 6);
    int64_t v19 = (unint64_t)(v35 + 64) >> 6;
    goto LABEL_18;
  }
LABEL_48:
  int64_t v29 = v6 + 1;
  if (__OFADD__(v6, 1)) {
    goto LABEL_66;
  }
  int64_t v19 = (unint64_t)(v13 + 64) >> 6;
  if (v29 >= v19) {
    goto LABEL_13;
  }
  unint64_t v30 = *(void *)(v33 + 8 * v29);
  int64_t v31 = v6 + 1;
  if (!v30)
  {
    int64_t v31 = v6 + 2;
    if (v6 + 2 >= v19) {
      goto LABEL_13;
    }
    unint64_t v30 = *(void *)(v33 + 8 * v31);
    if (!v30)
    {
      int64_t v31 = v6 + 3;
      if (v6 + 3 >= v19) {
        goto LABEL_13;
      }
      unint64_t v30 = *(void *)(v33 + 8 * v31);
      if (!v30)
      {
        int64_t v31 = v6 + 4;
        if (v6 + 4 >= v19) {
          goto LABEL_13;
        }
        unint64_t v30 = *(void *)(v33 + 8 * v31);
        if (!v30)
        {
          int64_t v31 = v6 + 5;
          if (v6 + 5 >= v19) {
            goto LABEL_13;
          }
          unint64_t v30 = *(void *)(v33 + 8 * v31);
          if (!v30)
          {
            int64_t v32 = v6 + 6;
            do
            {
              if (v19 == v32) {
                goto LABEL_13;
              }
              unint64_t v30 = *(void *)(v33 + 8 * v32++);
            }
            while (!v30);
            int64_t v31 = v32 - 1;
          }
        }
      }
    }
  }
  unint64_t v17 = (v30 - 1) & v30;
  unint64_t v18 = __clz(__rbit64(v30)) + (v31 << 6);
  int64_t v6 = v31;
LABEL_18:
  uint64_t v20 = *(void *)(*(void *)(v3 + 56) + 8 * v18);
  uint64_t result = swift_bridgeObjectRetain();
  while (1)
  {
    unint64_t v21 = v4[3];
    int64_t v22 = v21 >> 1;
    if ((uint64_t)(v21 >> 1) < v2 + 1) {
      break;
    }
    if (v2 < v22) {
      goto LABEL_23;
    }
LABEL_20:
    v4[2] = v2;
  }
  uint64_t result = (uint64_t)sub_100A71708((void *)(v21 > 1), v2 + 1, 1, v4);
  uint64_t v4 = (void *)result;
  int64_t v22 = *(void *)(result + 24) >> 1;
  if (v2 >= v22) {
    goto LABEL_20;
  }
  while (1)
  {
LABEL_23:
    v4[v2++ + 4] = v20;
    if (v17)
    {
      unint64_t v23 = __clz(__rbit64(v17));
      v17 &= v17 - 1;
      unint64_t v24 = v23 | (v6 << 6);
      goto LABEL_41;
    }
    int64_t v25 = v6 + 1;
    if (__OFADD__(v6, 1)) {
      break;
    }
    if (v25 >= v19) {
      goto LABEL_45;
    }
    unint64_t v26 = *(void *)(v33 + 8 * v25);
    int64_t v27 = v6 + 1;
    if (!v26)
    {
      int64_t v27 = v6 + 2;
      if (v6 + 2 >= v19) {
        goto LABEL_45;
      }
      unint64_t v26 = *(void *)(v33 + 8 * v27);
      if (!v26)
      {
        int64_t v27 = v6 + 3;
        if (v6 + 3 >= v19) {
          goto LABEL_45;
        }
        unint64_t v26 = *(void *)(v33 + 8 * v27);
        if (!v26)
        {
          int64_t v27 = v6 + 4;
          if (v6 + 4 >= v19) {
            goto LABEL_45;
          }
          unint64_t v26 = *(void *)(v33 + 8 * v27);
          if (!v26)
          {
            int64_t v27 = v6 + 5;
            if (v6 + 5 >= v19) {
              goto LABEL_45;
            }
            unint64_t v26 = *(void *)(v33 + 8 * v27);
            if (!v26)
            {
              int64_t v28 = v6 + 6;
              while (v19 != v28)
              {
                unint64_t v26 = *(void *)(v33 + 8 * v28++);
                if (v26)
                {
                  int64_t v27 = v28 - 1;
                  goto LABEL_40;
                }
              }
LABEL_45:
              v4[2] = v2;
              goto LABEL_13;
            }
          }
        }
      }
    }
LABEL_40:
    unint64_t v17 = (v26 - 1) & v26;
    unint64_t v24 = __clz(__rbit64(v26)) + (v27 << 6);
    int64_t v6 = v27;
LABEL_41:
    uint64_t v20 = *(void *)(*(void *)(v3 + 56) + 8 * v24);
    if (v2 >= v22)
    {
      uint64_t result = swift_bridgeObjectRetain();
      goto LABEL_20;
    }
    uint64_t result = swift_bridgeObjectRetain();
  }
  __break(1u);
LABEL_66:
  __break(1u);
  return result;
}

uint64_t sub_100445B80(uint64_t a1)
{
  return sub_100446434(a1, (uint64_t (*)(void))sub_100A71730, &qword_101657C20);
}

uint64_t sub_100445BA0(uint64_t a1)
{
  return sub_100446434(a1, (uint64_t (*)(void))sub_100A71744, (uint64_t *)&unk_10164E820);
}

uint64_t sub_100445BC0(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
    goto LABEL_21;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    unint64_t v8 = *(void *)(a1 + 16);
    if (v8) {
      goto LABEL_5;
    }
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
  if (v4 <= v5) {
    int64_t v15 = v4 + v2;
  }
  else {
    int64_t v15 = v4;
  }
  uint64_t v3 = sub_100A717E8(isUniquelyReferenced_nonNull_native, v15, 1, v3);
  unint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v9 = v3[2];
  if ((v3[3] >> 1) - v9 < (uint64_t)v8)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  unint64_t v10 = (unint64_t)&v3[7 * v9 + 4];
  if (a1 + 32 < v10 + 56 * v8 && v10 < a1 + 32 + 56 * v8) {
    goto LABEL_24;
  }
  swift_arrayInitWithCopy();
  if (v8 < v2)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v12 = v3[2];
  BOOL v13 = __OFADD__(v12, v8);
  uint64_t v14 = v12 + v8;
  if (!v13)
  {
    v3[2] = v14;
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100445D20(uint64_t a1)
{
  return sub_100446E44(a1, (uint64_t (*)(void))sub_100A71EC4, (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralBeaconInfo);
}

uint64_t sub_100445D4C(uint64_t a1)
{
  return sub_100446C5C(a1, (uint64_t (*)(void))sub_100A701E4, (uint64_t (*)(void))type metadata accessor for SafeLocation);
}

uint64_t sub_100445D78(int64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v61 = a2;
  uint64_t v8 = type metadata accessor for Bit();
  uint64_t v62 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  int64_t v60 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C(&qword_10163C630);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  BOOL v13 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11);
  __chkstk_darwin(v14);
  uint64_t v16 = (uint64_t)&v47;
  unint64_t v18 = (char *)&v47 - v17;
  uint64_t v19 = a4 >> 1;
  uint64_t v20 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v58 = v15;
  unint64_t v59 = a4;
  uint64_t v63 = a1;
  a1 = *v4;
  int64_t v21 = *(void *)(*v4 + 16);
  int64_t v22 = v21 + v20;
  if (__OFADD__(v21, v20))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *int64_t v4 = a1;
  if (!isUniquelyReferenced_nonNull_native || (int64_t v24 = *(void *)(a1 + 24) >> 1, v24 < v22))
  {
    if (v21 <= v22) {
      int64_t v25 = v21 + v20;
    }
    else {
      int64_t v25 = v21;
    }
    a1 = sub_100A71F0C(isUniquelyReferenced_nonNull_native, v25, 1, a1);
    *int64_t v4 = a1;
    int64_t v24 = *(void *)(a1 + 24) >> 1;
  }
  uint64_t v16 = *(void *)(a1 + 16);
  uint64_t v26 = v24 - v16;
  if (v19 == a3)
  {
    if (v20 <= 0)
    {
      uint64_t v20 = 0;
      uint64_t v16 = a3;
      goto LABEL_23;
    }
LABEL_29:
    __break(1u);
LABEL_30:
    uint64_t v57 = v16;
    a1 = *(void *)(a1 + 16);
    uint64_t v35 = v62;
    int64_t v49 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v62 + 56);
    uint64_t v50 = v62 + 56;
    v49(v18, 1, 1, v8);
    uint64_t v26 = v58;
    sub_10001D074((uint64_t)v18, v58, &qword_10163C630);
    v55 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48);
    uint64_t v56 = v35 + 48;
    if (v55(v26, 1, v8) == 1)
    {
LABEL_31:
      sub_10001DAB4((uint64_t)v18, &qword_10163C630);
      swift_unknownObjectRelease();
      return sub_10001DAB4(v26, &qword_10163C630);
    }
LABEL_33:
    unint64_t v53 = (void (**)(void, void, void))(v62 + 32);
    uint64_t v47 = (void (**)(char *, uint64_t))(v62 + 8);
    unint64_t v48 = (void (**)(char *))(v62 + 16);
    do
    {
      sub_10001DAB4(v26, &qword_10163C630);
      uint64_t v37 = *v4;
      unint64_t v38 = *(void *)(*v4 + 24);
      int64_t v39 = v38 >> 1;
      if ((uint64_t)(v38 >> 1) < a1 + 1)
      {
        uint64_t v37 = sub_100A71F0C(v38 > 1, a1 + 1, 1, *v4);
        *int64_t v4 = v37;
        int64_t v39 = *(void *)(v37 + 24) >> 1;
      }
      uint64_t v40 = *(unsigned __int8 *)(v62 + 80);
      sub_10001D074((uint64_t)v18, (uint64_t)v13, &qword_10163C630);
      if (v55((uint64_t)v13, 1, v8) == 1)
      {
LABEL_34:
        sub_10001DAB4((uint64_t)v13, &qword_10163C630);
        int64_t v36 = a1;
      }
      else
      {
        uint64_t v52 = v37 + ((v40 + 32) & ~v40);
        uint64_t v41 = *v53;
        if (a1 <= v39) {
          int64_t v42 = v39;
        }
        else {
          int64_t v42 = a1;
        }
        int64_t v54 = v42;
        uint64_t v43 = v60;
        int64_t v51 = v41;
        while (1)
        {
          v41(v43, v13, v8);
          if (v54 == a1) {
            break;
          }
          sub_10001DAB4((uint64_t)v18, &qword_10163C630);
          v41(v52 + *(void *)(v62 + 72) * a1, v43, v8);
          if (v57 == v19)
          {
            uint64_t v44 = 1;
            uint64_t v57 = v19;
          }
          else
          {
            int64_t v46 = sub_101310C98(v64, v57, v63, v61, a3, v59);
            (*v48)(v18);
            ((void (*)(uint64_t *, void))v46)(v64, 0);
            if (__OFADD__(v57, 1)) {
              goto LABEL_51;
            }
            ++v57;
            uint64_t v44 = 0;
            uint64_t v43 = v60;
          }
          v49(v18, v44, 1, v8);
          sub_10001D074((uint64_t)v18, (uint64_t)v13, &qword_10163C630);
          unsigned int v45 = v55((uint64_t)v13, 1, v8);
          ++a1;
          uint64_t v41 = v51;
          if (v45 == 1) {
            goto LABEL_34;
          }
        }
        (*v47)(v43, v8);
        int64_t v36 = v54;
        a1 = v54;
      }
      *(void *)(*v4 + 16) = v36;
      uint64_t v26 = v58;
      sub_10001D074((uint64_t)v18, v58, &qword_10163C630);
    }
    while (v55(v26, 1, v8) != 1);
    goto LABEL_31;
  }
  if (v26 < v20)
  {
    __break(1u);
    goto LABEL_33;
  }
  if (v20 < 0
    || ((uint64_t v27 = *(void *)(v62 + 72),
         unint64_t v28 = a1
             + ((*(unsigned __int8 *)(v62 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80))
             + v27 * v16,
         unint64_t v29 = v61 + v27 * a3,
         v29 < v28 + v27 * v20)
      ? (BOOL v30 = v28 >= v29 + v27 * v20)
      : (BOOL v30 = 1),
        !v30))
  {
LABEL_52:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  swift_arrayInitWithCopy();
  if (v20)
  {
    uint64_t v31 = *(void *)(a1 + 16);
    BOOL v32 = __OFADD__(v31, v20);
    uint64_t v33 = v31 + v20;
    if (v32)
    {
      __break(1u);
LABEL_51:
      __break(1u);
      goto LABEL_52;
    }
    *(void *)(a1 + 16) = v33;
  }
  uint64_t v16 = v19;
LABEL_23:
  if (v20 == v26) {
    goto LABEL_30;
  }

  return swift_unknownObjectRelease();
}

uint64_t sub_1004463E8(uint64_t a1)
{
  return sub_100446C5C(a1, (uint64_t (*)(void))sub_100A71F0C, (uint64_t (*)(void))&type metadata accessor for Bit);
}

uint64_t sub_100446414(uint64_t a1)
{
  return sub_100446434(a1, (uint64_t (*)(void))sub_100A71F74, (uint64_t *)&unk_101657AD0);
}

uint64_t sub_100446434(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *v3;
  uint64_t v6 = *(void *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (swift_isUniquelyReferenced_nonNull_native() && v6 + v4 <= *(void *)(v5 + 24) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
  uint64_t v5 = a2();
  if (!*(void *)(a1 + 16))
  {
LABEL_15:
    if (!v4) {
      goto LABEL_16;
    }
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v10 = *(void *)(v5 + 16);
  uint64_t v11 = (*(void *)(v5 + 24) >> 1) - v10;
  uint64_t v12 = *(void *)(sub_10000588C(a3) - 8);
  uint64_t v13 = *(void *)(v12 + 72);
  if (v11 < v4)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  unint64_t v14 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  unint64_t v15 = v5 + v14 + v13 * v10;
  unint64_t v16 = a1 + v14;
  uint64_t v17 = v13 * v4;
  unint64_t v18 = v15 + v17;
  unint64_t v19 = v16 + v17;
  if (v16 < v18 && v15 < v19) {
    goto LABEL_21;
  }
  swift_arrayInitWithCopy();
  if (!v4)
  {
LABEL_16:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v3 = v5;
    return result;
  }
  uint64_t v21 = *(void *)(v5 + 16);
  BOOL v22 = __OFADD__(v21, v4);
  uint64_t v23 = v21 + v4;
  if (!v22)
  {
    *(void *)(v5 + 16) = v23;
    goto LABEL_16;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1004465EC(int64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v52 = a2;
  uint64_t v8 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v53 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  int64_t v51 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C(&qword_10163B9F0);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v43 - v16;
  unint64_t v18 = a4 >> 1;
  uint64_t v19 = (a4 >> 1) - a3;
  if (__OFSUB__(a4 >> 1, a3))
  {
    __break(1u);
    goto LABEL_28;
  }
  uint64_t v49 = v15;
  unint64_t v50 = a4;
  uint64_t v54 = a1;
  a1 = *v4;
  int64_t v20 = *(void *)(*v4 + 16);
  a4 = v20 + v19;
  if (__OFADD__(v20, v19))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v4 = a1;
  if (!isUniquelyReferenced_nonNull_native || (int64_t v22 = *(void *)(a1 + 24) >> 1, v22 < (uint64_t)a4))
  {
    if (v20 <= (uint64_t)a4) {
      int64_t v23 = v20 + v19;
    }
    else {
      int64_t v23 = v20;
    }
    a1 = sub_100A6F6C4(isUniquelyReferenced_nonNull_native, v23, 1, a1);
    *uint64_t v4 = a1;
    int64_t v22 = *(void *)(a1 + 24) >> 1;
  }
  uint64_t v24 = *(void *)(a1 + 16);
  uint64_t v25 = v22 - v24;
  if (v18 == a3)
  {
    if (v19 <= 0)
    {
      uint64_t v19 = 0;
      a4 = a3;
      goto LABEL_23;
    }
LABEL_29:
    __break(1u);
LABEL_30:
    a1 = *(void *)(a1 + 16);
    uint64_t v34 = v53;
    uint64_t v44 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v53 + 56);
    uint64_t v45 = v53 + 56;
    v44(v17, 1, 1, v8);
    uint64_t v25 = v49;
    sub_10001D074((uint64_t)v17, v49, &qword_10163B9F0);
    uint64_t v47 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v34 + 48);
    uint64_t v48 = v34 + 48;
    if (v47(v25, 1, v8) == 1)
    {
LABEL_31:
      sub_10001DAB4((uint64_t)v17, &qword_10163B9F0);
      swift_unknownObjectRelease();
      return sub_10001DAB4(v25, &qword_10163B9F0);
    }
    do
    {
LABEL_36:
      sub_10001DAB4(v25, &qword_10163B9F0);
      unint64_t v36 = *(void *)(*v4 + 24);
      int64_t v35 = v36 >> 1;
      if ((uint64_t)(v36 >> 1) < a1 + 1)
      {
        uint64_t v42 = sub_100A6F6C4(v36 > 1, a1 + 1, 1, *v4);
        *uint64_t v4 = v42;
        unint64_t v46 = v42;
        int64_t v35 = *(void *)(v42 + 24) >> 1;
      }
      else
      {
        unint64_t v46 = *v4;
      }
      uint64_t v37 = *(unsigned __int8 *)(v53 + 80);
      sub_10001D074((uint64_t)v17, (uint64_t)v13, &qword_10163B9F0);
      if (v47((uint64_t)v13, 1, v8) == 1)
      {
LABEL_34:
        sub_10001DAB4((uint64_t)v13, &qword_10163B9F0);
        int64_t v35 = a1;
      }
      else
      {
        v46 += (v37 + 32) & ~v37;
        if (a1 > v35) {
          int64_t v35 = a1;
        }
        uint64_t v38 = (uint64_t)v51;
        while (1)
        {
          sub_100449454((uint64_t)v13, v38, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
          if (v35 == a1) {
            break;
          }
          sub_10001DAB4((uint64_t)v17, &qword_10163B9F0);
          sub_100449454(v38, v46 + *(void *)(v53 + 72) * a1, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
          if (a4 == v18)
          {
            uint64_t v39 = 1;
            a4 = v18;
          }
          else
          {
            uint64_t v40 = sub_101310DE0(v55, a4, v54, v52, a3, v50);
            sub_1004493EC(v41, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
            ((void (*)(void (**)(uint64_t *), void))v40)(v55, 0);
            BOOL v31 = __OFADD__(a4++, 1);
            if (v31) {
              goto LABEL_51;
            }
            uint64_t v39 = 0;
            uint64_t v38 = (uint64_t)v51;
          }
          v44(v17, v39, 1, v8);
          sub_10001D074((uint64_t)v17, (uint64_t)v13, &qword_10163B9F0);
          ++a1;
          if (v47((uint64_t)v13, 1, v8) == 1) {
            goto LABEL_34;
          }
        }
        sub_1004494BC(v38, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        a1 = v35;
      }
      *(void *)(*v4 + 16) = v35;
      uint64_t v25 = v49;
      sub_10001D074((uint64_t)v17, v49, &qword_10163B9F0);
    }
    while (v47(v25, 1, v8) != 1);
    goto LABEL_31;
  }
  if (v25 < v19)
  {
    __break(1u);
    goto LABEL_36;
  }
  if (v19 < 0
    || ((uint64_t v26 = *(void *)(v53 + 72),
         unint64_t v27 = a1
             + ((*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80))
             + v26 * v24,
         unint64_t v28 = v52 + v26 * a3,
         v28 < v27 + v26 * v19)
      ? (BOOL v29 = v27 >= v28 + v26 * v19)
      : (BOOL v29 = 1),
        !v29))
  {
LABEL_52:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  swift_arrayInitWithCopy();
  if (v19)
  {
    uint64_t v30 = *(void *)(a1 + 16);
    BOOL v31 = __OFADD__(v30, v19);
    uint64_t v32 = v30 + v19;
    if (v31)
    {
      __break(1u);
LABEL_51:
      __break(1u);
      goto LABEL_52;
    }
    *(void *)(a1 + 16) = v32;
  }
  a4 = v18;
LABEL_23:
  if (v19 == v25) {
    goto LABEL_30;
  }

  return swift_unknownObjectRelease();
}

uint64_t sub_100446C30(uint64_t a1)
{
  return sub_100446C5C(a1, (uint64_t (*)(void))sub_100A72378, (uint64_t (*)(void))type metadata accessor for KeyGenerationBeaconInfo);
}

uint64_t sub_100446C5C(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *v3;
  uint64_t v6 = *(void *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (swift_isUniquelyReferenced_nonNull_native() && v6 + v4 <= *(void *)(v5 + 24) >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_15;
  }
  uint64_t v5 = a2();
  if (!*(void *)(a1 + 16))
  {
LABEL_15:
    if (!v4) {
      goto LABEL_16;
    }
    goto LABEL_18;
  }
LABEL_5:
  uint64_t v10 = *(void *)(v5 + 16);
  uint64_t v11 = (*(void *)(v5 + 24) >> 1) - v10;
  uint64_t v12 = *(void *)(a3(0) - 8);
  uint64_t v13 = *(void *)(v12 + 72);
  if (v11 < v4)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  unint64_t v14 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  unint64_t v15 = v5 + v14 + v13 * v10;
  unint64_t v16 = a1 + v14;
  uint64_t v17 = v13 * v4;
  unint64_t v18 = v15 + v17;
  unint64_t v19 = v16 + v17;
  if (v16 < v18 && v15 < v19) {
    goto LABEL_21;
  }
  swift_arrayInitWithCopy();
  if (!v4)
  {
LABEL_16:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v3 = v5;
    return result;
  }
  uint64_t v21 = *(void *)(v5 + 16);
  BOOL v22 = __OFADD__(v21, v4);
  uint64_t v23 = v21 + v4;
  if (!v22)
  {
    *(void *)(v5 + 16) = v23;
    goto LABEL_16;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100446E18(uint64_t a1)
{
  return sub_100446E44(a1, (uint64_t (*)(void))sub_100A72550, (uint64_t (*)(void))type metadata accessor for LocationOfInterestProvider.RemappingOperation);
}

uint64_t sub_100446E44(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(void))
{
  unint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *v3;
  uint64_t v6 = *(void *)(*v3 + 16);
  if (__OFADD__(v6, v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  if (swift_isUniquelyReferenced_nonNull_native()
    && (int64_t)(v6 + v4) <= *(void *)(v5 + 24) >> 1)
  {
    unint64_t v10 = *(void *)(a1 + 16);
    if (v10) {
      goto LABEL_5;
    }
LABEL_15:
    if (!v4) {
      goto LABEL_16;
    }
    goto LABEL_18;
  }
  uint64_t v5 = a2();
  unint64_t v10 = *(void *)(a1 + 16);
  if (!v10) {
    goto LABEL_15;
  }
LABEL_5:
  uint64_t v11 = *(void *)(v5 + 16);
  uint64_t v12 = (*(void *)(v5 + 24) >> 1) - v11;
  uint64_t v13 = *(void *)(a3(0) - 8);
  uint64_t v14 = *(void *)(v13 + 72);
  if (v12 < (uint64_t)v10)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  unint64_t v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v16 = v5 + v15 + v14 * v11;
  unint64_t v17 = a1 + v15;
  uint64_t v18 = v14 * v10;
  unint64_t v19 = v16 + v18;
  unint64_t v20 = v17 + v18;
  if (v17 < v19 && v16 < v20) {
    goto LABEL_21;
  }
  swift_arrayInitWithCopy();
  if (v10 < v4)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t v22 = *(void *)(v5 + 16);
  BOOL v23 = __OFADD__(v22, v10);
  uint64_t v24 = v22 + v10;
  if (!v23)
  {
    *(void *)(v5 + 16) = v24;
LABEL_16:
    uint64_t result = swift_bridgeObjectRelease();
    *uint64_t v3 = v5;
    return result;
  }
LABEL_20:
  __break(1u);
LABEL_21:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100447004(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  int isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  if (isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
    goto LABEL_18;
  }
  if (v4 <= v5) {
    int64_t v14 = v4 + v2;
  }
  else {
    int64_t v14 = v4;
  }
  uint64_t v3 = sub_100A70C58(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(void *)(a1 + 16))
  {
LABEL_18:
    if (!v2) {
      goto LABEL_19;
    }
    goto LABEL_21;
  }
LABEL_5:
  uint64_t v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v9 = (char *)v3 + v8 + 32;
  if (a1 + 32 < (unint64_t)&v9[v2] && (unint64_t)v9 < a1 + 32 + v2) {
    goto LABEL_24;
  }
  memcpy(v9, (const void *)(a1 + 32), v2);
  if (!v2)
  {
LABEL_19:
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)uint64_t v1 = v3;
    return result;
  }
  uint64_t v11 = v3[2];
  BOOL v12 = __OFADD__(v11, v2);
  uint64_t v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_10044714C(uint64_t a1)
{
  uint64_t v22 = a1 + 64;
  uint64_t v1 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v2 = -1;
  if (v1 < 64) {
    uint64_t v2 = ~(-1 << v1);
  }
  unint64_t v3 = v2 & *(void *)(a1 + 64);
  int64_t v23 = (unint64_t)(v1 + 63) >> 6;
  uint64_t result = (void *)swift_bridgeObjectRetain();
  int64_t v5 = 0;
  while (1)
  {
    if (v3)
    {
      unint64_t v6 = __clz(__rbit64(v3));
      v3 &= v3 - 1;
      unint64_t v7 = v6 | (v5 << 6);
      goto LABEL_22;
    }
    int64_t v8 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v8 >= v23) {
      goto LABEL_29;
    }
    unint64_t v9 = *(void *)(v22 + 8 * v8);
    ++v5;
    if (!v9)
    {
      int64_t v5 = v8 + 1;
      if (v8 + 1 >= v23) {
        goto LABEL_29;
      }
      unint64_t v9 = *(void *)(v22 + 8 * v5);
      if (!v9)
      {
        int64_t v5 = v8 + 2;
        if (v8 + 2 >= v23) {
          goto LABEL_29;
        }
        unint64_t v9 = *(void *)(v22 + 8 * v5);
        if (!v9)
        {
          int64_t v5 = v8 + 3;
          if (v8 + 3 >= v23) {
            goto LABEL_29;
          }
          unint64_t v9 = *(void *)(v22 + 8 * v5);
          if (!v9)
          {
            int64_t v10 = v8 + 4;
            if (v10 >= v23)
            {
LABEL_29:
              swift_release();
              return _swiftEmptyArrayStorage;
            }
            unint64_t v9 = *(void *)(v22 + 8 * v10);
            int64_t v5 = v10;
            if (!v9) {
              break;
            }
          }
        }
      }
    }
LABEL_21:
    unint64_t v3 = (v9 - 1) & v9;
    unint64_t v7 = __clz(__rbit64(v9)) + (v5 << 6);
LABEL_22:
    uint64_t v11 = *(void *)(*(void *)(a1 + 56) + 8 * v7);
    int64_t v12 = *(void *)(v11 + 16);
    if (v12)
    {
      unint64_t v25 = v3;
      swift_bridgeObjectRetain();
      sub_1000B6ED0(0, v12, 0);
      uint64_t v13 = *(void *)(type metadata accessor for UUID() - 8);
      uint64_t v14 = v11 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
      uint64_t v15 = *(void *)(v13 + 72);
      do
      {
        uint64_t v16 = UUID.uuidString.getter();
        uint64_t v18 = v17;
        unint64_t v20 = _swiftEmptyArrayStorage[2];
        unint64_t v19 = _swiftEmptyArrayStorage[3];
        if (v20 >= v19 >> 1) {
          sub_1000B6ED0(v19 > 1, v20 + 1, 1);
        }
        _swiftEmptyArrayStorage[2] = v20 + 1;
        uint64_t v21 = &_swiftEmptyArrayStorage[2 * v20];
        v21[4] = v16;
        v21[5] = v18;
        v14 += v15;
        --v12;
      }
      while (v12);
      swift_bridgeObjectRelease();
      unint64_t v3 = v25;
    }
    uint64_t result = (void *)sub_1004429C0((uint64_t)_swiftEmptyArrayStorage);
  }
  while (1)
  {
    int64_t v5 = v10 + 1;
    if (__OFADD__(v10, 1)) {
      break;
    }
    if (v5 >= v23) {
      goto LABEL_29;
    }
    unint64_t v9 = *(void *)(v22 + 8 * v5);
    ++v10;
    if (v9) {
      goto LABEL_21;
    }
  }
LABEL_31:
  __break(1u);
  return result;
}

void *sub_100447408(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + *(int *)(a1 + 24));
  id v3 = v2;
  return v2;
}

uint64_t sub_100447434()
{
  uint64_t v1 = type metadata accessor for LocalizationUtility.Table();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  int64_t v4 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = v0 + *(int *)(type metadata accessor for LeftBehindUserNotification() + 20);
  unint64_t v7 = *(void **)(v5 + 8);
  uint64_t v6 = *(void *)(v5 + 16);
  unint64_t v8 = *(void *)(v5 + 24);
  if ((*(unsigned char *)(v5 + 32) & 1) == 0)
  {
    id v10 = v7;
    swift_bridgeObjectRetain();
    if (v8)
    {
      uint64_t v11 = HIBYTE(v8) & 0xF;
      if ((v8 & 0x2000000000000000) == 0) {
        uint64_t v11 = v6 & 0xFFFFFFFFFFFFLL;
      }
      if (v11)
      {
        id v39 = v10;
        uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v14 = v13;
        if (v12 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v14 == v15) {
          goto LABEL_29;
        }
        char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v17) {
          goto LABEL_32;
        }
        uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v34 = v33;
        if (v32 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v34 == v35)
        {
LABEL_29:
          swift_bridgeObjectRelease_n();
        }
        else
        {
          _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
        }
LABEL_32:
        id v10 = v39;
        sub_10000588C((uint64_t *)&unk_10163AD00);
        uint64_t v36 = swift_allocObject();
        *(_OWORD *)(v36 + 16) = xmmword_101342130;
        *(void *)(v36 + 56) = &type metadata for String;
        *(void *)(v36 + 64) = sub_10000B4CC();
        *(void *)(v36 + 32) = v6;
        *(void *)(v36 + 40) = v8;
        goto LABEL_33;
      }
      swift_bridgeObjectRelease();
    }
    uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v23 = v22;
    if (v21 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v23 == v24) {
      goto LABEL_20;
    }
    char v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v26) {
      goto LABEL_33;
    }
    uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v29 = v28;
    if (v27 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v29 == v30)
    {
LABEL_20:
      swift_bridgeObjectRelease_n();
    }
    else
    {
      _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
LABEL_33:
    (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for LocalizationUtility.Table.default(_:), v1);
    static LocalizationUtility.localizedString(key:table:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    uint64_t v20 = String.init(format:arguments:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    return v20;
  }
  uint64_t v9 = *(void *)v5;
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for LocalizationUtility.Table.default(_:), v1);
  swift_bridgeObjectRetain();
  static LocalizationUtility.localizedString(key:table:)();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v18 = swift_allocObject();
  *(_OWORD *)(v18 + 16) = xmmword_101342130;
  uint64_t v19 = *(void *)(v9 + 16);
  sub_1004484A8(v9, v7, v6, v8, 1);
  *(void *)(v18 + 56) = &type metadata for Int;
  *(void *)(v18 + 64) = &protocol witness table for Int;
  *(void *)(v18 + 32) = v19;
  uint64_t v20 = static String.localizedStringWithFormat(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v20;
}

uint64_t sub_1004479CC()
{
  uint64_t v1 = type metadata accessor for LocalizationUtility.Table();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  int64_t v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for LeftBehindUserNotification();
  uint64_t v6 = __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void **)(v0 + *(int *)(v6 + 24));
  if (!v9 || (char *)[*(id *)(v0 + *(int *)(v6 + 24)) type] - 1 > (char *)3)
  {
    uint64_t v15 = (uint64_t *)(v0 + *(int *)(v5 + 28));
    uint64_t v12 = *v15;
    uint64_t v14 = v15[1];
    swift_bridgeObjectRetain();
    if (v14) {
      goto LABEL_7;
    }
LABEL_10:
    (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for LocalizationUtility.Table.default(_:), v1);
    uint64_t v18 = static LocalizationUtility.localizedString(key:table:)();
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    return v18;
  }
  id v10 = [v9 name];
  if (!v10)
  {
    sub_1004493EC(v0, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for LeftBehindUserNotification);
LABEL_9:
    uint64_t v19 = (uint64_t *)&v8[*(int *)(v5 + 28)];
    uint64_t v12 = *v19;
    uint64_t v14 = v19[1];
    swift_bridgeObjectRetain();
    sub_1004494BC((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for LeftBehindUserNotification);
    if (v14) {
      goto LABEL_7;
    }
    goto LABEL_10;
  }
  uint64_t v11 = v10;
  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v14 = v13;

  sub_1004493EC(v0, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for LeftBehindUserNotification);
  if (!v14) {
    goto LABEL_9;
  }
  sub_1004494BC((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for LeftBehindUserNotification);
LABEL_7:
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for LocalizationUtility.Table.default(_:), v1);
  static LocalizationUtility.localizedString(key:table:)();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_101347BA0;
  uint64_t v17 = *(void *)(*(void *)(v0 + *(int *)(v5 + 20)) + 16);
  *(void *)(v16 + 56) = &type metadata for Int;
  *(void *)(v16 + 64) = &protocol witness table for Int;
  *(void *)(v16 + 32) = v17;
  *(void *)(v16 + 96) = &type metadata for String;
  *(void *)(v16 + 104) = sub_10000B4CC();
  *(void *)(v16 + 72) = v12;
  *(void *)(v16 + 80) = v14;
  uint64_t v18 = static String.localizedStringWithFormat(_:_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v18;
}

unint64_t sub_100447D74()
{
  uint64_t v1 = v0;
  uint64_t v31 = type metadata accessor for UUID();
  uint64_t v30 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v3 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v4 = self;
  uint64_t v5 = type metadata accessor for LeftBehindUserNotification();
  uint64_t v6 = *(void *)(v1 + *(int *)(v5 + 32));
  *(void *)&long long v32 = 0;
  id v7 = [v4 archivedDataWithRootObject:v6 requiringSecureCoding:1 error:&v32];
  id v8 = (id)v32;
  if (v7)
  {
    uint64_t v9 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v11 = v10;
  }
  else
  {
    uint64_t v12 = v8;
    _convertNSErrorToError(_:)();

    swift_willThrow();
    swift_errorRelease();
    uint64_t v9 = 0;
    unint64_t v11 = 0xF000000000000000;
  }
  sub_10000588C((uint64_t *)&unk_101637F00);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101347500;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v14;
  if (v11 >> 60 == 15)
  {
    id v15 = [objc_allocWithZone((Class)NSNull) init];
    *(void *)(inited + 72) = sub_10001D4B0(0, (unint64_t *)&qword_1016455D0);
    *(void *)(inited + 48) = v15;
  }
  else
  {
    uint64_t v33 = &type metadata for Data;
    *(void *)&long long v32 = v9;
    *((void *)&v32 + 1) = v11;
    sub_100173E4C(&v32, (_OWORD *)(inited + 48));
  }
  *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 88) = v16;
  uint64_t v17 = *(void **)(v1 + *(int *)(v5 + 24));
  if (v17)
  {
    sub_100037A38(v9, v11);
    id v18 = [v17 identifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v19 = UUID.uuidString.getter();
    uint64_t v21 = v20;
    (*(void (**)(char *, uint64_t))(v30 + 8))(v3, v31);
    uint64_t v33 = &type metadata for String;
    *(void *)&long long v32 = v19;
    *((void *)&v32 + 1) = v21;
    sub_100173E4C(&v32, (_OWORD *)(inited + 96));
  }
  else
  {
    id v22 = objc_allocWithZone((Class)NSNull);
    sub_100037A38(v9, v11);
    id v23 = [v22 init];
    *(void *)(inited + 120) = sub_10001D4B0(0, (unint64_t *)&qword_1016455D0);
    *(void *)(inited + 96) = v23;
  }
  *(void *)(inited + 128) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 136) = v24;
  uint64_t v25 = swift_bridgeObjectRetain();
  char v26 = sub_10044714C(v25);
  swift_bridgeObjectRelease();
  *(void *)(inited + 168) = sub_10000588C(&qword_101654A30);
  *(void *)(inited + 144) = v26;
  unint64_t v27 = sub_10092CEEC(inited);
  sub_100037A24(v9, v11);
  return v27;
}

uint64_t sub_10044812C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v26 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v26[0] = 0;
  *((void *)&v26[0] + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(98);
  long long v28 = v26[0];
  v6._countAndFlagsBits = 0xD00000000000001FLL;
  v6._object = (void *)0x80000001013FCFB0;
  String.append(_:)(v6);
  sub_10028B80C();
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0x6E6974736564202CLL;
  v8._object = (void *)0xEF203A6E6F697461;
  String.append(_:)(v8);
  uint64_t v9 = (int *)type metadata accessor for LeftBehindUserNotification();
  LOBYTE(v26[0]) = *(unsigned char *)(v0 + v9[9]);
  _print_unlocked<A, B>(_:_:)();
  v10._countAndFlagsBits = 0x747865746E6F6320;
  v10._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v10);
  uint64_t v11 = v0 + v9[5];
  char v12 = *(unsigned char *)(v11 + 32);
  long long v13 = *(_OWORD *)(v11 + 16);
  v26[0] = *(_OWORD *)v11;
  v26[1] = v13;
  char v27 = v12;
  _print_unlocked<A, B>(_:_:)();
  v14._object = (void *)0x80000001013FCFD0;
  v14._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v14);
  id v15 = *(void **)(v0 + v9[6]);
  if (v15)
  {
    id v16 = [v15 identifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v17 = UUID.uuidString.getter();
    uint64_t v19 = v18;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
  else
  {
    uint64_t v19 = (void *)0xE400000000000000;
    uint64_t v17 = 1701736302;
  }
  v20._countAndFlagsBits = v17;
  v20._object = v19;
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = 0x6F697461636F6C20;
  v21._object = (void *)0xEB00000000203A6ELL;
  String.append(_:)(v21);
  id v22 = *(void **)(v1 + v9[8]);
  [v22 coordinate];
  Double.write<A>(to:)();
  v23._countAndFlagsBits = 8236;
  v23._object = (void *)0xE200000000000000;
  String.append(_:)(v23);
  [v22 coordinate];
  Double.write<A>(to:)();
  v24._countAndFlagsBits = 62;
  v24._object = (void *)0xE100000000000000;
  String.append(_:)(v24);
  return v28;
}

uint64_t sub_100448434(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 36));
}

uint64_t sub_10044844C(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 40));
}

uint64_t type metadata accessor for LeftBehindUserNotification()
{
  uint64_t result = qword_1016456A0;
  if (!qword_1016456A0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1004484A8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t result = swift_bridgeObjectRelease();
  if ((a5 & 1) == 0)
  {

    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t (*sub_100448508(uint64_t (**a1)(), unint64_t a2, uint64_t a3))()
{
  Swift::String v6 = (uint64_t (*)())malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_100448624(v6, a2, a3);
  return sub_100448570;
}

uint64_t (*sub_100448574(void (**a1)(id *a1), unint64_t a2, uint64_t a3))()
{
  Swift::String v6 = (void (*)(id *))malloc(0x28uLL);
  *a1 = v6;
  *((void *)v6 + 4) = sub_1004486A4(v6, a2, a3);
  return sub_100448570;
}

void sub_1004485DC(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

uint64_t (*sub_100448624(uint64_t (*result)(), unint64_t a2, uint64_t a3))()
{
  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)uint64_t v3 = v4;
    return sub_100449E64;
  }
  __break(1u);
  return result;
}

void (*sub_1004486A4(void (*result)(id *a1), unint64_t a2, uint64_t a3))(id *a1)
{
  uint64_t v3 = result;
  if ((a3 & 0xC000000000000001) != 0)
  {
    id v4 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_5;
  }
  if ((a2 & 0x8000000000000000) != 0)
  {
    __break(1u);
  }
  else if (*(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10) > a2)
  {
    id v4 = *(id *)(a3 + 8 * a2 + 32);
LABEL_5:
    *(void *)uint64_t v3 = v4;
    return sub_100448724;
  }
  __break(1u);
  return result;
}

void sub_100448724(id *a1)
{
}

uint64_t sub_10044872C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_10044951C(&qword_101645640, &qword_101645638);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          sub_10000588C(&qword_101645638);
          char v12 = sub_100448508(v16, i, a3);
          id v14 = *v13;
          ((void (*)(uint64_t (**)(), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_10001D4B0(0, &qword_10163A090);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_10044894C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_10044951C(&qword_101645630, &qword_101645628);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          sub_10000588C(&qword_101645628);
          char v12 = sub_100448508(v16, i, a3);
          id v14 = *v13;
          ((void (*)(uint64_t (**)(), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_10001D4B0(0, &qword_10163A098);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100448B6C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_10044951C(&qword_101645620, &qword_101645618);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          sub_10000588C(&qword_101645618);
          char v12 = sub_100448574(v16, i, a3);
          id v14 = *v13;
          ((void (*)(void (**)(id *), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_10001D4B0(0, (unint64_t *)&qword_101646830);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100448D8C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_10044951C(&qword_101645600, &qword_1016455F8);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          sub_10000588C(&qword_1016455F8);
          char v12 = sub_100448508(v16, i, a3);
          id v14 = *v13;
          ((void (*)(uint64_t (**)(), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_10001D4B0(0, (unint64_t *)&unk_10164DC30);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100448FAC(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_10044951C(&qword_1016455F0, &qword_1016455E8);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          sub_10000588C(&qword_1016455E8);
          char v12 = sub_100448508(v16, i, a3);
          id v14 = *v13;
          ((void (*)(uint64_t (**)(), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_10001D4B0(0, &qword_101665FA0);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1004491CC(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v6 = a3 >> 62;
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      return a3;
    }
  }
  else
  {
    uint64_t v7 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7) {
      return a3;
    }
  }
  if (!a1) {
    goto LABEL_19;
  }
  uint64_t v8 = a3 & 0xFFFFFFFFFFFFFF8;
  if (v6)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 <= a2)
    {
      if (v7 >= 1)
      {
        sub_10044951C(&qword_101645610, &qword_101645608);
        swift_bridgeObjectRetain();
        for (unint64_t i = 0; i != v7; ++i)
        {
          sub_10000588C(&qword_101645608);
          char v12 = sub_100448508(v16, i, a3);
          id v14 = *v13;
          ((void (*)(uint64_t (**)(), void))v12)(v16, 0);
          *(void *)(a1 + 8 * i) = v14;
        }
        swift_bridgeObjectRelease();
        return a3;
      }
      goto LABEL_18;
    }
LABEL_17:
    __break(1u);
LABEL_18:
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  uint64_t v9 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v9 > a2)
  {
    __break(1u);
    goto LABEL_17;
  }
  if (v8 + 32 >= a1 + 8 * v9 || v8 + 32 + 8 * v9 <= a1)
  {
    sub_10001D4B0(0, &qword_101665FB0);
    swift_arrayInitWithCopy();
    return a3;
  }
LABEL_20:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1004493EC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100449454(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1004494BC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_10044951C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000592C(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *sub_10044956C(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v27 = *a2;
    *a1 = *a2;
    a1 = (void *)(v27 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = *(void *)v10;
    char v12 = (void *)*((void *)v10 + 1);
    uint64_t v13 = *((void *)v10 + 2);
    uint64_t v14 = *((void *)v10 + 3);
    char v15 = v10[32];
    sub_1004496CC(*(void *)v10, v12, v13, v14, v15);
    *(void *)uint64_t v9 = v11;
    *((void *)v9 + 1) = v12;
    *((void *)v9 + 2) = v13;
    *((void *)v9 + 3) = v14;
    v9[32] = v15;
    uint64_t v16 = a3[6];
    uint64_t v17 = a3[7];
    id v18 = *(void **)((char *)a2 + v16);
    *(void *)((char *)a1 + v16) = v18;
    uint64_t v19 = (void *)((char *)a1 + v17);
    Swift::String v20 = (void *)((char *)a2 + v17);
    uint64_t v21 = v20[1];
    *uint64_t v19 = *v20;
    v19[1] = v21;
    uint64_t v22 = a3[8];
    uint64_t v23 = a3[9];
    Swift::String v24 = *(void **)((char *)a2 + v22);
    *(void *)((char *)a1 + v22) = v24;
    *((unsigned char *)a1 + v23) = *((unsigned char *)a2 + v23);
    *((unsigned char *)a1 + a3[10]) = *((unsigned char *)a2 + a3[10]);
    id v25 = v18;
    swift_bridgeObjectRetain();
    id v26 = v24;
  }
  return a1;
}

id sub_1004496CC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5)
  {
    return (id)swift_bridgeObjectRetain();
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return a2;
  }
}

void sub_100449744(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  uint64_t v5 = a1 + a2[5];
  sub_1004484A8(*(void *)v5, *(void **)(v5 + 8), *(void *)(v5 + 16), *(void *)(v5 + 24), *(unsigned char *)(v5 + 32));

  swift_bridgeObjectRelease();
  unint64_t v6 = *(void **)(a1 + a2[8]);
}

uint64_t sub_1004497EC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = *(void *)v9;
  uint64_t v11 = *(void **)(v9 + 8);
  uint64_t v12 = *(void *)(v9 + 16);
  uint64_t v13 = *(void *)(v9 + 24);
  char v14 = *(unsigned char *)(v9 + 32);
  sub_1004496CC(*(void *)v9, v11, v12, v13, v14);
  *(void *)uint64_t v8 = v10;
  *(void *)(v8 + 8) = v11;
  *(void *)(v8 + 16) = v12;
  *(void *)(v8 + 24) = v13;
  *(unsigned char *)(v8 + 32) = v14;
  uint64_t v15 = a3[6];
  uint64_t v16 = a3[7];
  uint64_t v17 = *(void **)(a2 + v15);
  *(void *)(a1 + v15) = v17;
  id v18 = (void *)(a1 + v16);
  uint64_t v19 = (void *)(a2 + v16);
  uint64_t v20 = v19[1];
  *id v18 = *v19;
  v18[1] = v20;
  uint64_t v21 = a3[8];
  uint64_t v22 = a3[9];
  uint64_t v23 = *(void **)(a2 + v21);
  *(void *)(a1 + v21) = v23;
  *(unsigned char *)(a1 + v22) = *(unsigned char *)(a2 + v22);
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  id v24 = v17;
  swift_bridgeObjectRetain();
  id v25 = v23;
  return a1;
}

uint64_t sub_1004498FC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = *(void *)v9;
  uint64_t v11 = *(void **)(v9 + 8);
  uint64_t v12 = *(void *)(v9 + 16);
  uint64_t v13 = *(void *)(v9 + 24);
  char v14 = *(unsigned char *)(v9 + 32);
  sub_1004496CC(*(void *)v9, v11, v12, v13, v14);
  uint64_t v15 = *(void *)v8;
  uint64_t v16 = *(void **)(v8 + 8);
  uint64_t v17 = *(void *)(v8 + 16);
  uint64_t v18 = *(void *)(v8 + 24);
  char v19 = *(unsigned char *)(v8 + 32);
  *(void *)uint64_t v8 = v10;
  *(void *)(v8 + 8) = v11;
  *(void *)(v8 + 16) = v12;
  *(void *)(v8 + 24) = v13;
  *(unsigned char *)(v8 + 32) = v14;
  sub_1004484A8(v15, v16, v17, v18, v19);
  uint64_t v20 = a3[6];
  uint64_t v21 = *(void **)(a1 + v20);
  uint64_t v22 = *(void **)(a2 + v20);
  *(void *)(a1 + v20) = v22;
  id v23 = v22;

  uint64_t v24 = a3[7];
  id v25 = (void *)(a1 + v24);
  id v26 = (void *)(a2 + v24);
  *id v25 = *v26;
  v25[1] = v26[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v27 = a3[8];
  long long v28 = *(void **)(a2 + v27);
  uint64_t v29 = *(void **)(a1 + v27);
  *(void *)(a1 + v27) = v28;
  id v30 = v28;

  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  return a1;
}

uint64_t sub_100449A44(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = (long long *)(a2 + v7);
  long long v11 = *v10;
  long long v12 = v10[1];
  *(unsigned char *)(v9 + 32) = *((unsigned char *)v10 + 32);
  *(_OWORD *)uint64_t v9 = v11;
  *(_OWORD *)(v9 + 16) = v12;
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  uint64_t v13 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(void *)(a1 + v13) = *(void *)(a2 + v13);
  uint64_t v14 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v14) = *(unsigned char *)(a2 + v14);
  return a1;
}

uint64_t sub_100449B00(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(unsigned char *)(v9 + 32);
  uint64_t v11 = *(void *)v8;
  long long v12 = *(void **)(v8 + 8);
  uint64_t v13 = *(void *)(v8 + 16);
  uint64_t v14 = *(void *)(v8 + 24);
  char v15 = *(unsigned char *)(v8 + 32);
  long long v16 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v16;
  *(unsigned char *)(v8 + 32) = v10;
  sub_1004484A8(v11, v12, v13, v14, v15);
  uint64_t v17 = a3[6];
  uint64_t v18 = *(void **)(a1 + v17);
  *(void *)(a1 + v17) = *(void *)(a2 + v17);

  uint64_t v19 = a3[7];
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (uint64_t *)(a2 + v19);
  uint64_t v23 = *v21;
  uint64_t v22 = v21[1];
  *uint64_t v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease();
  uint64_t v24 = a3[8];
  id v25 = *(void **)(a1 + v24);
  *(void *)(a1 + v24) = *(void *)(a2 + v24);

  uint64_t v26 = a3[10];
  *(unsigned char *)(a1 + a3[9]) = *(unsigned char *)(a2 + a3[9]);
  *(unsigned char *)(a1 + v26) = *(unsigned char *)(a2 + v26);
  return a1;
}

uint64_t sub_100449BF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100449C08);
}

uint64_t sub_100449C08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 32));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_100449CC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100449CDC);
}

uint64_t sub_100449CDC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 32)) = (a2 - 1);
  }
  return result;
}

uint64_t sub_100449D98()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void sub_100449E68(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = sub_100FD0B38(a1);
  if (v5)
  {
    __chkstk_darwin(v5);
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    swift_release();
  }
  else
  {
    if (qword_101636B18 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100010324(v6, (uint64_t)qword_10170DED0);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 141558275;
      uint64_t v12 = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v9 + 12) = 2081;
      if (a3)
      {
        unint64_t v11 = a3;
      }
      else
      {
        a2 = 0x6E776F6E6B6E75;
        unint64_t v11 = 0xE700000000000000;
      }
      swift_bridgeObjectRetain();
      sub_1008FA0F0(a2, v11, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Failed to store wrapped connection for context %{private,mask.hash}s.", (uint8_t *)v9, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
  }
}

uint64_t sub_10044A110()
{
  if (qword_101636B18 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();

  return sub_100010324(v0, (uint64_t)qword_10170DED0);
}

void sub_10044A174(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  LODWORD(v28) = a6;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  XPCSession.identifier.getter();
  swift_beginAccess();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v32 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = 0x8000000000000000;
  v29[0] = a2;
  v29[1] = a3;
  v29[2] = a4;
  v29[3] = a5;
  char v30 = v28;
  sub_10016BA88(v29, (uint64_t)v14, isUniquelyReferenced_nonNull_native);
  *(void *)(a1 + 56) = v32;
  swift_bridgeObjectRelease();
  long long v16 = *(void (**)(char *, uint64_t))(v12 + 8);
  uint64_t v28 = v12 + 8;
  v16(v14, v11);
  swift_endAccess();
  if (qword_101636B18 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_100010324(v17, (uint64_t)qword_10170DED0);
  swift_retain_n();
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    v31[0] = v27;
    *(_DWORD *)uint64_t v20 = 141558275;
    uint64_t v32 = 1752392040;
    id v25 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v20 + 12) = 2081;
    uint64_t v26 = v20 + 14;
    XPCSession.identifier.getter();
    sub_100482848((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v23 = v22;
    v25(v14, v11);
    uint64_t v32 = sub_1008FA0F0(v21, v23, v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Added new delegated location publish subscription %{private,mask.hash}s.", (uint8_t *)v20, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
}

uint64_t sub_10044A50C(double a1)
{
  uint64_t v2 = v1;
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  sub_1010AB8E8(aBlock[0]);
  uint64_t v5 = v4;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(NSObject **)(v1 + 88);
  uint64_t v7 = swift_allocObject();
  *(unsigned char *)(v7 + 16) = 2;
  *(void *)(v7 + 24) = v2;
  *(void *)(v7 + 32) = v5;
  *(double *)(v7 + 40) = a1;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = sub_100485BEC;
  *(void *)(v8 + 24) = v7;
  aBlock[4] = (uint64_t)sub_1003B7AE0;
  aBlock[5] = v8;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = (uint64_t)sub_1000A70B0;
  aBlock[3] = (uint64_t)&unk_1015C4830;
  uint64_t v9 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v6, v9);
  _Block_release(v9);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

uint64_t sub_10044A6F4(uint64_t a1, uint64_t *a2)
{
  uint64_t v33 = a2;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = a1 + 56;
  uint64_t v10 = *(void *)(a1 + 56);
  uint64_t v12 = 1 << *(unsigned char *)(a1 + 32);
  unint64_t v37 = (unint64_t)_swiftEmptyArrayStorage;
  if (v12 < 64) {
    uint64_t v13 = ~(-1 << v12);
  }
  else {
    uint64_t v13 = -1;
  }
  unint64_t v14 = v13 & v10;
  uint64_t v35 = v4 + 16;
  uint64_t v36 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
  uint64_t v34 = v4 + 48;
  uint64_t v32 = (void (**)(char *, char *, uint64_t))(v4 + 32);
  int64_t v30 = (unint64_t)(v12 + 63) >> 6;
  uint64_t v31 = (uint64_t (**)(char *, uint64_t))(v4 + 8);
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v16 = 0;
  uint64_t v28 = a1 + 56;
  uint64_t v29 = a1;
  if (v14) {
    goto LABEL_7;
  }
LABEL_8:
  int64_t v19 = v16 + 1;
  if (__OFADD__(v16, 1))
  {
    __break(1u);
  }
  else
  {
    if (v19 >= v30) {
      goto LABEL_31;
    }
    unint64_t v20 = *(void *)(v11 + 8 * v19);
    ++v16;
    if (v20) {
      goto LABEL_23;
    }
    int64_t v16 = v19 + 1;
    if (v19 + 1 >= v30) {
      goto LABEL_31;
    }
    unint64_t v20 = *(void *)(v11 + 8 * v16);
    if (v20) {
      goto LABEL_23;
    }
    int64_t v16 = v19 + 2;
    if (v19 + 2 >= v30) {
      goto LABEL_31;
    }
    unint64_t v20 = *(void *)(v11 + 8 * v16);
    if (v20) {
      goto LABEL_23;
    }
    int64_t v16 = v19 + 3;
    if (v19 + 3 >= v30) {
      goto LABEL_31;
    }
    unint64_t v20 = *(void *)(v11 + 8 * v16);
    if (v20) {
      goto LABEL_23;
    }
    int64_t v21 = v19 + 4;
    if (v21 >= v30)
    {
LABEL_31:
      (*v36)(v9, 1, 1, v3);
LABEL_32:
      swift_release();
      return v37;
    }
    unint64_t v20 = *(void *)(v11 + 8 * v21);
    if (v20)
    {
      int64_t v16 = v21;
LABEL_23:
      unint64_t v14 = (v20 - 1) & v20;
      for (unint64_t i = __clz(__rbit64(v20)) + (v16 << 6); ; unint64_t i = v17 | (v16 << 6))
      {
        (*(void (**)(char *, unint64_t, uint64_t))(v4 + 16))(v9, *(void *)(a1 + 48) + *(void *)(v4 + 72) * i, v3);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56))(v9, 0, 1, v3);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3) == 1) {
          break;
        }
        (*v32)(v6, v9, v3);
        uint64_t v22 = *v33;
        if (*(void *)(*v33 + 16) && (unint64_t v23 = sub_1007240CC((uint64_t)v6), (v24 & 1) != 0))
        {
          id v25 = *v31;
          id v26 = *(id *)(*(void *)(v22 + 56) + 8 * v23);
          v25(v6, v3);
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v37 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          uint64_t result = specialized Array._endMutation()();
          uint64_t v11 = v28;
          a1 = v29;
          if (!v14) {
            goto LABEL_8;
          }
        }
        else
        {
          uint64_t result = (*v31)(v6, v3);
          if (!v14) {
            goto LABEL_8;
          }
        }
LABEL_7:
        unint64_t v17 = __clz(__rbit64(v14));
        v14 &= v14 - 1;
      }
      goto LABEL_32;
    }
    while (1)
    {
      int64_t v16 = v21 + 1;
      if (__OFADD__(v21, 1)) {
        break;
      }
      if (v16 >= v30) {
        goto LABEL_31;
      }
      unint64_t v20 = *(void *)(v11 + 8 * v16);
      ++v21;
      if (v20) {
        goto LABEL_23;
      }
    }
  }
  __break(1u);
  return result;
}

void *sub_10044AAE4(uint64_t a1)
{
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = _swiftEmptyArrayStorage;
  if (v6)
  {
    uint64_t v15 = v1;
    unint64_t v17 = _swiftEmptyArrayStorage;
    sub_1000B7034(0, v6, 0);
    uint64_t v7 = v17;
    uint64_t v8 = (void *)(a1 + 32);
    do
    {
      uint64_t v10 = v8[3];
      uint64_t v9 = v8[4];
      sub_10001CD44(v8, v10);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v9 + 8) + 8) + 32))(v10);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v17 = v7;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_1000B7034(0, v7[2] + 1, 1);
        uint64_t v7 = v17;
      }
      unint64_t v13 = v7[2];
      unint64_t v12 = v7[3];
      if (v13 >= v12 >> 1)
      {
        sub_1000B7034(v12 > 1, v13 + 1, 1);
        uint64_t v7 = v17;
      }
      v7[2] = v13 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))((unint64_t)v7+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v13, v5, v16);
      unint64_t v17 = v7;
      v8 += 5;
      --v6;
    }
    while (v6);
  }
  return v7;
}

void *sub_10044ACC8(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  int64_t v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = _swiftEmptyArrayStorage;
  if (v7)
  {
    v15[0] = v1;
    uint64_t v18 = _swiftEmptyArrayStorage;
    sub_1000B7034(0, v7, 0);
    uint64_t v8 = v18;
    uint64_t v9 = *(void *)(type metadata accessor for LocalFindableAccessoryRecord() - 8);
    uint64_t v10 = a1 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
    uint64_t v17 = *(void *)(v9 + 72);
    uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
    v15[1] = v4 + 32;
    uint64_t v16 = v11;
    do
    {
      v16(v6, v10, v3);
      uint64_t v18 = v8;
      unint64_t v13 = v8[2];
      unint64_t v12 = v8[3];
      if (v13 >= v12 >> 1)
      {
        sub_1000B7034(v12 > 1, v13 + 1, 1);
        uint64_t v8 = v18;
      }
      v8[2] = v13 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))((unint64_t)v8+ ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))+ *(void *)(v4 + 72) * v13, v6, v3);
      v10 += v17;
      --v7;
    }
    while (v7);
  }
  return v8;
}

unint64_t sub_10044AED4()
{
  unint64_t result = qword_1016456F0;
  if (!qword_1016456F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016456F0);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for BeaconManagerCommandError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10044AFF4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for BeaconManagerCommandError()
{
  return &type metadata for BeaconManagerCommandError;
}

uint64_t sub_10044B02C(uint64_t a1)
{
  return sub_10044B124(a1, qword_10170DE98);
}

uint64_t sub_10044B058()
{
  sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
  uint64_t result = OS_os_log.init(subsystem:category:)();
  qword_10170DEB0 = result;
  return result;
}

uint64_t sub_10044B0D4(uint64_t a1)
{
  return sub_10044B124(a1, qword_10170DEB8);
}

uint64_t sub_10044B100(uint64_t a1)
{
  return sub_10044B124(a1, qword_10170DED0);
}

uint64_t sub_10044B124(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for Logger();
  sub_10001E384(v3, a2);
  sub_100010324(v3, (uint64_t)a2);
  return Logger.init(subsystem:category:)();
}

void *sub_10044B19C(uint64_t a1)
{
  uint64_t v33 = a1;
  uint64_t v44 = type metadata accessor for UUID();
  uint64_t v1 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v41 = (char *)&v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v3 - 8);
  uint64_t v43 = (char *)&v32 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v5);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v6 - 8);
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  (*(void (**)(char *, void, uint64_t))(v8 + 104))(v10, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v7);
  static DispatchQoS.unspecified.getter();
  *(void *)&long long aBlock = _swiftEmptyArrayStorage;
  sub_100482848((unint64_t *)&qword_101638CC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000588C((uint64_t *)&unk_1016376F0);
  sub_100062734((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
  uint64_t v11 = v33;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v42 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v52 = _swiftEmptyArrayStorage;
  uint64_t v12 = *(void *)(v11 + 16);
  if (v12)
  {
    unint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v1 + 16);
    uint64_t v13 = v1 + 16;
    id v39 = v14;
    uint64_t v15 = v11 + ((*(unsigned __int8 *)(v13 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 64));
    uint64_t v40 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 40);
    uint64_t v34 = *(void *)(v13 + 56);
    uint64_t v38 = (unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 32);
    uint64_t v36 = (void (**)(uint64_t, char *, uint64_t))(v13 + 16);
    uint64_t v35 = &v46;
    unint64_t v37 = (void (**)(uint64_t, uint64_t))(v13 - 8);
    swift_bridgeObjectRetain();
    uint64_t v16 = 0;
    uint64_t v17 = v44;
    uint64_t v18 = (uint64_t)v41;
    while (1)
    {
      int64_t v19 = v43;
      v39(v43, v15, v17);
      unint64_t v20 = *v40;
      (*v40)(v19, 0, 1, v17);
      if ((*v38)(v19, 1, v17) == 1)
      {

        swift_bridgeObjectRelease();
        goto LABEL_13;
      }
      (*v36)(v18, v19, v17);
      sub_100ACCD98(v18, (uint64_t)&aBlock);
      if (!v47) {
        break;
      }
      sub_10001CEB0(&aBlock, (uint64_t)v51);
      sub_10001D010((uint64_t)v51, (uint64_t)v50);
      uint64_t v21 = swift_allocObject();
      *(void *)(v21 + 16) = &v52;
      sub_10001CEB0(v50, v21 + 24);
      sub_1000A1534((uint64_t)v16);
      uint64_t v22 = swift_allocObject();
      *(void *)(v22 + 16) = sub_100483918;
      *(void *)(v22 + 24) = v21;
      uint64_t v48 = sub_1003B7AE0;
      uint64_t v49 = (uint64_t (*)())v22;
      *(void *)&long long aBlock = _NSConcreteStackBlock;
      *((void *)&aBlock + 1) = 1107296256;
      unint64_t v46 = sub_1000A70B0;
      uint64_t v47 = &unk_1015C4150;
      unint64_t v23 = _Block_copy(&aBlock);
      uint64_t v16 = v49;
      swift_retain();
      swift_release();
      dispatch_sync(v42, v23);
      _Block_release(v23);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v51);
      (*v37)(v18, v17);
      LOBYTE(v23) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if (v23)
      {
        __break(1u);
        goto LABEL_15;
      }
      v15 += v34;
      uint64_t v16 = sub_100483918;
      if (!--v12) {
        goto LABEL_9;
      }
    }
    swift_bridgeObjectRelease();
    sub_10001DAB4((uint64_t)&aBlock, (uint64_t *)&unk_10163BBE0);
    static os_log_type_t.error.getter();
    if (qword_101637250 == -1) {
      goto LABEL_12;
    }
LABEL_15:
    swift_once();
LABEL_12:
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v24 = swift_allocObject();
    *(_OWORD *)(v24 + 16) = xmmword_101342130;
    sub_100482848((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    id v25 = v41;
    uint64_t v26 = v44;
    uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v29 = v28;
    *(void *)(v24 + 56) = &type metadata for String;
    *(void *)(v24 + 64) = sub_10000B4CC();
    *(void *)(v24 + 32) = v27;
    *(void *)(v24 + 40) = v29;
    os_log(_:dso:log:_:_:)();

    swift_bridgeObjectRelease();
    (*v37)((uint64_t)v25, v26);
  }
  else
  {
    unint64_t v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56);
    swift_bridgeObjectRetain();
    uint64_t v16 = 0;
LABEL_9:
    v20(v43, 1, 1, v44);

    swift_bridgeObjectRelease();
  }
LABEL_13:
  int64_t v30 = v52;
  sub_1000A1534((uint64_t)v16);
  return v30;
}

uint64_t sub_10044B9B8(void **a1, uint64_t a2)
{
  sub_10001D010(a2, (uint64_t)v8);
  uint64_t v3 = *a1;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *a1 = v3;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v3 = sub_100A6F7F0(0, v3[2] + 1, 1, v3);
    *a1 = v3;
  }
  unint64_t v6 = v3[2];
  unint64_t v5 = v3[3];
  if (v6 >= v5 >> 1)
  {
    uint64_t v3 = sub_100A6F7F0((void *)(v5 > 1), v6 + 1, 1, v3);
    *a1 = v3;
  }
  v3[2] = v6 + 1;
  return sub_10001CEB0(v8, (uint64_t)&v3[5 * v6 + 4]);
}

uint64_t sub_10044BA7C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LocalFindableAccessoryRecord();
  __chkstk_darwin(v2);
  uint64_t v4 = &v106[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  unint64_t v5 = (int *)type metadata accessor for SharedBeaconRecord(0);
  uint64_t v6 = __chkstk_darwin(v5);
  v109 = &v106[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = &v106[-v9];
  uint64_t v11 = __chkstk_darwin(v8);
  v108 = &v106[-v12];
  uint64_t v13 = __chkstk_darwin(v11);
  v110 = &v106[-v14];
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = &v106[-v16];
  uint64_t v18 = __chkstk_darwin(v15);
  v111 = &v106[-v19];
  __chkstk_darwin(v18);
  uint64_t v21 = &v106[-v20];
  uint64_t v22 = type metadata accessor for UUID();
  uint64_t v113 = *(void *)(v22 - 8);
  uint64_t v114 = v22;
  __chkstk_darwin(v22);
  v112 = &v106[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v24 = type metadata accessor for OwnedBeaconRecord();
  __chkstk_darwin(v24);
  uint64_t v26 = &v106[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v115 = (unsigned char *)a1;
  sub_10001D010(a1, (uint64_t)v120);
  sub_10000588C((uint64_t *)&unk_10164DBF0);
  if (swift_dynamicCast())
  {
    if (qword_101636B10 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_100010324(v27, (uint64_t)qword_10170DEB8);
    sub_10001D010((uint64_t)v115, (uint64_t)v117);
    uint64_t v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = swift_slowAlloc();
      v115 = (unsigned char *)swift_slowAlloc();
      v121 = v115;
      *(_DWORD *)uint64_t v30 = 141558275;
      uint64_t v116 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v30 + 12) = 2081;
      v111 = (unsigned char *)(v30 + 14);
      uint64_t v32 = v118;
      uint64_t v31 = v119;
      sub_10001CD44(v117, v118);
      uint64_t v33 = v112;
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v31 + 8) + 8) + 32))(v32);
      sub_100482848((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v34 = v114;
      uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v37 = v36;
      (*(void (**)(unsigned char *, uint64_t))(v113 + 8))(v33, v34);
      uint64_t v116 = sub_1008FA0F0(v35, v37, (uint64_t *)&v121);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v117);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Allowed to locate owned beacon %{private,mask.hash}s.", (uint8_t *)v30, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v117);
    }

    sub_100485AFC((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v45 = 1;
    goto LABEL_45;
  }
  if (swift_dynamicCast())
  {
    uint64_t v38 = v111;
    sub_100485510((uint64_t)v21, (uint64_t)v111, type metadata accessor for SharedBeaconRecord);
    uint64_t My = type metadata accessor for Feature.FindMy();
    uint64_t v118 = My;
    uint64_t v119 = sub_100482848((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
    uint64_t v40 = sub_10001D958(v117);
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v40, enum case for Feature.FindMy.itemSharing(_:), My);
    LOBYTE(My) = isFeatureEnabled(_:)();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v117);
    if ((My & 1) == 0)
    {
      int v48 = v38[v5[13]];
      sub_100485A94((uint64_t)v38, (uint64_t)v10, type metadata accessor for SharedBeaconRecord);
      uint64_t v43 = (uint64_t)v115;
      if (v48 == 1)
      {
        uint64_t v49 = *(void *)&v10[v5[11]];
        unint64_t v50 = v109;
        sub_100485A94((uint64_t)v10, (uint64_t)v109, type metadata accessor for SharedBeaconRecord);
        if (v49 == -1)
        {
          uint64_t v102 = *(void *)&v50[v5[12]];
          sub_100485AFC((uint64_t)v50, type metadata accessor for SharedBeaconRecord);
          sub_100485AFC((uint64_t)v10, type metadata accessor for SharedBeaconRecord);
          if (v102 != -1) {
            goto LABEL_32;
          }
LABEL_39:
          if (qword_101636B10 != -1) {
            swift_once();
          }
          uint64_t v90 = type metadata accessor for Logger();
          sub_100010324(v90, (uint64_t)qword_10170DEB8);
          sub_10001D010(v43, (uint64_t)v117);
          int64_t v91 = Logger.logObject.getter();
          os_log_type_t v92 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v91, v92))
          {
            uint64_t v93 = swift_slowAlloc();
            v121 = (unsigned char *)swift_slowAlloc();
            *(_DWORD *)uint64_t v93 = 141558275;
            uint64_t v116 = 1752392040;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v93 + 12) = 2081;
            v115 = (unsigned char *)(v93 + 14);
            uint64_t v95 = v118;
            uint64_t v94 = v119;
            sub_10001CD44(v117, v118);
            v96 = v112;
            (*(void (**)(uint64_t))(*(void *)(*(void *)(v94 + 8) + 8) + 32))(v95);
            sub_100482848((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
            uint64_t v97 = v114;
            uint64_t v98 = dispatch thunk of CustomStringConvertible.description.getter();
            unint64_t v100 = v99;
            (*(void (**)(unsigned char *, uint64_t))(v113 + 8))(v96, v97);
            uint64_t v116 = sub_1008FA0F0(v98, v100, (uint64_t *)&v121);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v117);
            _os_log_impl((void *)&_mh_execute_header, v91, v92, "Allowed to locate shared self-beacon %{private,mask.hash}s.", (uint8_t *)v93, 0x16u);
            uint64_t v45 = 1;
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            sub_100485AFC((uint64_t)v111, type metadata accessor for SharedBeaconRecord);
            goto LABEL_45;
          }

          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v117);
          unint64_t v46 = type metadata accessor for SharedBeaconRecord;
          uint64_t v47 = (uint64_t)v38;
LABEL_44:
          sub_100485AFC(v47, v46);
          uint64_t v45 = 1;
          goto LABEL_45;
        }
        sub_100485AFC((uint64_t)v50, type metadata accessor for SharedBeaconRecord);
      }
      sub_100485AFC((uint64_t)v10, type metadata accessor for SharedBeaconRecord);
LABEL_32:
      if (qword_101636B10 != -1) {
        swift_once();
      }
      uint64_t v78 = type metadata accessor for Logger();
      sub_100010324(v78, (uint64_t)qword_10170DEB8);
      sub_10001D010(v43, (uint64_t)v117);
      int64_t v79 = Logger.logObject.getter();
      os_log_type_t v80 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v79, v80))
      {
        uint64_t v81 = swift_slowAlloc();
        v121 = (unsigned char *)swift_slowAlloc();
        *(_DWORD *)uint64_t v81 = 141558275;
        uint64_t v116 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v81 + 12) = 2081;
        v115 = (unsigned char *)(v81 + 14);
        uint64_t v83 = v118;
        uint64_t v82 = v119;
        sub_10001CD44(v117, v118);
        unint64_t v84 = v112;
        (*(void (**)(uint64_t))(*(void *)(*(void *)(v82 + 8) + 8) + 32))(v83);
        sub_100482848((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v85 = v114;
        uint64_t v86 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v88 = v87;
        (*(void (**)(unsigned char *, uint64_t))(v113 + 8))(v84, v85);
        uint64_t v116 = sub_1008FA0F0(v86, v88, (uint64_t *)&v121);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v117);
        _os_log_impl((void *)&_mh_execute_header, v79, v80, "Not locating shared beacon %{private,mask.hash}s.", (uint8_t *)v81, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        int64_t v89 = v111;
      }
      else
      {

        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v117);
        int64_t v89 = v38;
      }
      sub_100485AFC((uint64_t)v89, type metadata accessor for SharedBeaconRecord);
      uint64_t v45 = 0;
      goto LABEL_45;
    }
    int v41 = v38[v5[16]];
    uint64_t v42 = *(void *)&v38[v5[11]];
    sub_100485A94((uint64_t)v38, (uint64_t)v17, type metadata accessor for SharedBeaconRecord);
    uint64_t v43 = (uint64_t)v115;
    if (v42 == -1)
    {
      uint64_t v62 = *(void *)&v17[v5[12]];
      sub_100485AFC((uint64_t)v17, type metadata accessor for SharedBeaconRecord);
      uint64_t v44 = v110;
      sub_100485A94((uint64_t)v38, (uint64_t)v110, type metadata accessor for SharedBeaconRecord);
      if (v62 == -1)
      {
        int v103 = v44[v5[16]];
        v104 = v108;
        sub_100485A94((uint64_t)v44, (uint64_t)v108, type metadata accessor for SharedBeaconRecord);
        BOOL v63 = v103 == 4 || v104[v5[16]] == 1;
        sub_100485AFC((uint64_t)v104, type metadata accessor for SharedBeaconRecord);
        sub_100485AFC((uint64_t)v44, type metadata accessor for SharedBeaconRecord);
        int v105 = v38[v5[13]];
        int v64 = v105 & v63;
        if (v105 != 1) {
          goto LABEL_28;
        }
        goto LABEL_26;
      }
    }
    else
    {
      sub_100485AFC((uint64_t)v17, type metadata accessor for SharedBeaconRecord);
      uint64_t v44 = v110;
      sub_100485A94((uint64_t)v38, (uint64_t)v110, type metadata accessor for SharedBeaconRecord);
    }
    sub_100485AFC((uint64_t)v44, type metadata accessor for SharedBeaconRecord);
    BOOL v63 = 0;
    int v64 = 0;
    if (v38[v5[13]] != 1) {
      goto LABEL_28;
    }
LABEL_26:
    if (v41 == 2) {
      int v64 = 1;
    }
LABEL_28:
    if (qword_101636B10 != -1) {
      swift_once();
    }
    uint64_t v65 = type metadata accessor for Logger();
    sub_100010324(v65, (uint64_t)qword_10170DEB8);
    sub_10001D010(v43, (uint64_t)v117);
    int64_t v66 = Logger.logObject.getter();
    os_log_type_t v67 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v66, v67))
    {
      LODWORD(v109) = v41 == 2;
      uint64_t v68 = swift_slowAlloc();
      v110 = (unsigned char *)swift_slowAlloc();
      v121 = v110;
      *(_DWORD *)uint64_t v68 = 141559043;
      uint64_t v116 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v68 + 12) = 2081;
      BOOL v107 = v63;
      LODWORD(v108) = v64;
      uint64_t v70 = v118;
      uint64_t v69 = v119;
      sub_10001CD44(v117, v118);
      v71 = v112;
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v69 + 8) + 8) + 32))(v70);
      sub_100482848((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v72 = v114;
      uint64_t v73 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v75 = v74;
      v76 = v71;
      uint64_t v38 = v111;
      (*(void (**)(unsigned char *, uint64_t))(v113 + 8))(v76, v72);
      uint64_t v116 = sub_1008FA0F0(v73, v75, (uint64_t *)&v121);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v117);
      *(_WORD *)(v68 + 22) = 1024;
      LODWORD(v116) = v109;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v68 + 28) = 1024;
      LODWORD(v116) = v107;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v68 + 34) = 1024;
      uint64_t v43 = (uint64_t)v115;
      int v77 = (int)v108;
      LODWORD(v116) = v108;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v66, v67, "Should locate shared beacon? beacon:%{private,mask.hash}s, isExplicitSharedBeacon: %{BOOL}d, isUTSFAutomaticSelfBeacon: %{BOOL}d, result: %{BOOL}d.", (uint8_t *)v68, 0x28u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      if (!v77) {
        goto LABEL_32;
      }
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v117);

      if ((v64 & 1) == 0) {
        goto LABEL_32;
      }
    }
    goto LABEL_39;
  }
  if (swift_dynamicCast())
  {
    unint64_t v46 = (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord;
    uint64_t v47 = (uint64_t)v4;
    goto LABEL_44;
  }
  if (qword_101636B10 != -1) {
    swift_once();
  }
  uint64_t v51 = type metadata accessor for Logger();
  sub_100010324(v51, (uint64_t)qword_10170DEB8);
  sub_10001D010((uint64_t)v115, (uint64_t)v117);
  uint64_t v52 = Logger.logObject.getter();
  os_log_type_t v53 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v52, v53))
  {
    uint64_t v54 = swift_slowAlloc();
    v121 = (unsigned char *)swift_slowAlloc();
    *(_DWORD *)uint64_t v54 = 141558275;
    uint64_t v116 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v54 + 12) = 2081;
    v115 = (unsigned char *)(v54 + 14);
    uint64_t v56 = v118;
    uint64_t v55 = v119;
    sub_10001CD44(v117, v118);
    uint64_t v57 = v112;
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v55 + 8) + 8) + 32))(v56);
    sub_100482848((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v58 = v114;
    uint64_t v59 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v61 = v60;
    (*(void (**)(unsigned char *, uint64_t))(v113 + 8))(v57, v58);
    uint64_t v116 = sub_1008FA0F0(v59, v61, (uint64_t *)&v121);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v117);
    _os_log_impl((void *)&_mh_execute_header, v52, v53, "Unknown beacon type, not locating %{private,mask.hash}s.", (uint8_t *)v54, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v117);
  }

  uint64_t v45 = 0;
LABEL_45:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v120);
  return v45;
}

uint64_t sub_10044CCF0(char *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  unint64_t v7 = v6;
  uint64_t v112 = a6;
  uint64_t v111 = a5;
  int v119 = a4;
  uint64_t v107 = a2;
  uint64_t v118 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v117 = *(void *)(v118 - 8);
  __chkstk_darwin(v118);
  v115 = (char *)&v105 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v116 = type metadata accessor for DispatchQoS();
  uint64_t v114 = *(void *)(v116 - 8);
  __chkstk_darwin(v116);
  uint64_t v113 = (char *)&v105 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v108 = *(void *)(v12 - 8);
  __chkstk_darwin(v12 - 8);
  uint64_t v109 = v13;
  uint64_t v110 = (uint64_t)&v105 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000588C(&qword_10163BB20);
  __chkstk_darwin(v14 - 8);
  v128 = (void (**)(char *, uint64_t))((char *)&v105 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  *(void *)&long long v127 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v16 = *(void *)(v127 - 8);
  uint64_t v17 = __chkstk_darwin(v127);
  uint64_t v124 = (uint64_t)&v105 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v123 = (uint64_t)&v105 - v20;
  __chkstk_darwin(v19);
  uint64_t v122 = (uint64_t)&v105 - v21;
  uint64_t v22 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v22 - 8);
  uint64_t v24 = (char *)&v105 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for UUID();
  uint64_t v26 = *(uint8_t **)(v25 - 8);
  uint64_t v27 = __chkstk_darwin(v25);
  v129 = (char *)&v105 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  v125 = (uint8_t **)((char *)&v105 - v29);
  if (qword_101636B10 != -1) {
    goto LABEL_43;
  }
  while (1)
  {
    uint64_t v30 = type metadata accessor for Logger();
    uint64_t v31 = sub_100010324(v30, (uint64_t)qword_10170DEB8);
    swift_bridgeObjectRetain_n();
    uint64_t v131 = v31;
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.default.getter();
    BOOL v34 = os_log_type_enabled(v32, v33);
    uint64_t v120 = a3;
    uint64_t v132 = v25;
    unint64_t v130 = v7;
    if (v34)
    {
      uint64_t v35 = (uint8_t *)swift_slowAlloc();
      v126 = (char *)swift_slowAlloc();
      *(void *)&long long aBlock = v126;
      v106 = v35;
      *(_DWORD *)uint64_t v35 = 136446210;
      int v105 = v35 + 4;
      sub_100483504();
      uint64_t v36 = v16;
      swift_bridgeObjectRetain();
      uint64_t v37 = Set.description.getter();
      unint64_t v39 = v38;
      swift_bridgeObjectRelease();
      uint64_t v40 = v37;
      uint64_t v16 = v36;
      v139 = (void *)sub_1008FA0F0(v40, v39, (uint64_t *)&aBlock);
      unint64_t v7 = v130;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "Latest locations requested for sources %{public}s.", v106, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    int v41 = (uint8_t *)_swiftEmptyArrayStorage;
    if (*((void *)a1 + 2)) {
      break;
    }
    a3 = *(void *)(v7 + 280);
    uint64_t v78 = sub_100AD2AD4();
    uint64_t v24 = (char *)v78;
    v142 = _swiftEmptyArrayStorage;
    uint64_t v26 = *(uint8_t **)(v78 + 16);
    if (!v26)
    {
LABEL_36:
      swift_bridgeObjectRelease();
      v125 = sub_100AE4A24();
      unint64_t v87 = Logger.logObject.getter();
      os_log_type_t v88 = static os_log_type_t.default.getter();
      BOOL v89 = os_log_type_enabled(v87, v88);
      unint64_t v7 = v130;
      if (v89)
      {
        uint64_t v90 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v90 = 0;
        _os_log_impl((void *)&_mh_execute_header, v87, v88, "Latest locations requested default empty array []. Returning all owned beacons.", v90, 2u);
        swift_slowDealloc();
      }

      uint64_t v77 = v107;
      uint64_t v43 = v41;
      goto LABEL_39;
    }
    int64_t v79 = 0;
    uint64_t v25 = v78 + 32;
    while ((unint64_t)v79 < *((void *)v24 + 2))
    {
      sub_10001D010(v25, (uint64_t)&aBlock);
      uint64_t v80 = (uint64_t)v136;
      uint64_t v16 = (uint64_t)v137;
      sub_10001CD44(&aBlock, (uint64_t)v136);
      if (sub_1012D4B88(v80, v16))
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&aBlock);
      }
      else
      {
        sub_10001CEB0(&aBlock, (uint64_t)&v139);
        uint64_t v81 = v142;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000B7570(0, v81[2] + 1, 1);
          uint64_t v81 = v142;
        }
        unint64_t v7 = v81[2];
        unint64_t v82 = v81[3];
        if (v7 >= v82 >> 1) {
          sub_1000B7570(v82 > 1, v7 + 1, 1);
        }
        uint64_t v83 = v140;
        uint64_t v16 = v141;
        uint64_t v84 = sub_1000BD078((uint64_t)&v139, v140);
        __chkstk_darwin(v84);
        a1 = (char *)&v105 - ((v85 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v86 + 16))(a1);
        sub_1006985B0(v7, (uint64_t)a1, (uint64_t *)&v142, v83, v16);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v139);
      }
      ++v79;
      v25 += 40;
      if (v26 == v79)
      {
        int v41 = (uint8_t *)v142;
        goto LABEL_36;
      }
    }
    __break(1u);
LABEL_43:
    swift_once();
  }
  uint64_t v42 = sub_10044B19C((uint64_t)a1);
  uint64_t v43 = (uint8_t *)v42;
  v142 = &_swiftEmptySetSingleton;
  uint64_t v44 = v42[2];
  v106 = (uint8_t *)v42;
  if (!v44) {
    goto LABEL_16;
  }
  uint64_t v45 = v42 + 4;
  unint64_t v46 = (unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48);
  uint64_t v47 = (void (**)(uint64_t, char *, uint64_t))(v26 + 32);
  v126 = (char *)(v16 + 48);
  int v105 = v26;
  int v48 = (void (**)(uint64_t, uint64_t))(v26 + 8);
  swift_bridgeObjectRetain();
  uint64_t v49 = (uint64_t)v125;
  v121 = v24;
  do
  {
    uint64_t v52 = v45[3];
    uint64_t v53 = v45[4];
    sub_10001CD44(v45, v52);
    (*(void (**)(uint64_t, uint64_t))(v53 + 192))(v52, v53);
    uint64_t v54 = v132;
    if ((*v46)(v24, 1, v132) == 1)
    {
      uint64_t v50 = (uint64_t)v24;
      uint64_t v51 = &qword_101638CF0;
LABEL_9:
      sub_10001DAB4(v50, v51);
      goto LABEL_10;
    }
    (*v47)(v49, v24, v54);
    uint64_t v55 = v128;
    sub_100AE75E0(v49, (uint64_t)v128);
    if ((*(unsigned int (**)(void (**)(char *, uint64_t), uint64_t, void))v126)(v55, 1, v127) == 1)
    {
      (*v48)(v49, v54);
      uint64_t v50 = (uint64_t)v55;
      uint64_t v51 = &qword_10163BB20;
      goto LABEL_9;
    }
    uint64_t v56 = v48;
    uint64_t v57 = v47;
    uint64_t v58 = v122;
    sub_100485510((uint64_t)v55, v122, type metadata accessor for OwnedBeaconGroup);
    uint64_t v59 = v124;
    sub_100485A94(v58, v124, type metadata accessor for OwnedBeaconGroup);
    uint64_t v60 = v123;
    sub_100DCFCA0(v123, v59);
    uint64_t v61 = v60;
    uint64_t v49 = (uint64_t)v125;
    sub_100485AFC(v61, type metadata accessor for OwnedBeaconGroup);
    uint64_t v62 = v58;
    uint64_t v47 = v57;
    int v48 = v56;
    uint64_t v24 = v121;
    sub_100485AFC(v62, type metadata accessor for OwnedBeaconGroup);
    (*v48)(v49, v54);
LABEL_10:
    v45 += 5;
    --v44;
  }
  while (v44);
  uint64_t v43 = v106;
  swift_bridgeObjectRelease();
  unint64_t v7 = v130;
  uint64_t v26 = v105;
LABEL_16:
  uint64_t v63 = swift_bridgeObjectRetain();
  v125 = sub_1007103A4(v63);
  swift_bridgeObjectRelease();
  uint64_t v64 = *((void *)v43 + 2);
  if (v64)
  {
    uint64_t v65 = (uint64_t)(v43 + 32);
    v128 = (void (**)(char *, uint64_t))(v26 + 8);
    swift_bridgeObjectRetain_n();
    *(void *)&long long v66 = 141558275;
    long long v127 = v66;
    v126 = (char *)&type metadata for Any + 8;
    os_log_type_t v67 = v129;
    uint64_t v68 = v132;
    do
    {
      sub_10001D010(v65, (uint64_t)&aBlock);
      sub_10001D010((uint64_t)&aBlock, (uint64_t)&v139);
      uint64_t v69 = Logger.logObject.getter();
      os_log_type_t v70 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v69, v70))
      {
        uint64_t v71 = swift_slowAlloc();
        uint64_t v133 = swift_slowAlloc();
        *(_DWORD *)uint64_t v71 = v127;
        *(void *)(v71 + 4) = 1752392040;
        *(_WORD *)(v71 + 12) = 2081;
        uint64_t v73 = v140;
        uint64_t v72 = v141;
        sub_10001CD44(&v139, v140);
        (*(void (**)(uint64_t))(*(void *)(*(void *)(v72 + 8) + 8) + 32))(v73);
        sub_100482848((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v74 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v76 = v75;
        (*v128)(v67, v68);
        *(void *)(v71 + 14) = sub_1008FA0F0(v74, v76, &v133);
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v139);
        _os_log_impl((void *)&_mh_execute_header, v69, v70, "Latest locations requested for beacon %{private,mask.hash}s.", (uint8_t *)v71, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v139);
      }

      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&aBlock);
      v65 += 40;
      --v64;
    }
    while (v64);
    uint64_t v43 = v106;
    swift_bridgeObjectRelease_n();
    unint64_t v7 = v130;
  }
  swift_bridgeObjectRelease();
  uint64_t v77 = v107;
LABEL_39:
  int64_t v91 = (uint8_t *)sub_10047BBC4((uint64_t)v43);
  swift_bridgeObjectRelease();
  sub_100A6B254();
  uint64_t v92 = v110;
  sub_10001D074(v77, v110, (uint64_t *)&unk_10163AC90);
  unint64_t v93 = (*(unsigned __int8 *)(v108 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v108 + 80);
  unint64_t v94 = v7;
  unint64_t v95 = (v109 + v93 + 7) & 0xFFFFFFFFFFFFFFF8;
  v96 = (void *)swift_allocObject();
  v96[2] = v94;
  v96[3] = v91;
  v96[4] = v120;
  sub_10001D608(v92, (uint64_t)v96 + v93, (uint64_t *)&unk_10163AC90);
  *(void *)((char *)v96 + v95) = v125;
  uint64_t v97 = (void *)((char *)v96 + ((v95 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v98 = v112;
  *uint64_t v97 = v111;
  v97[1] = v98;
  v137 = sub_100483440;
  v138 = v96;
  *(void *)&long long aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256;
  v135 = sub_1004B5480;
  v136 = &unk_1015C4060;
  unint64_t v99 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  unint64_t v100 = v113;
  static DispatchQoS.unspecified.getter();
  v139 = _swiftEmptyArrayStorage;
  sub_100482848((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  v101 = v115;
  uint64_t v102 = v118;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v99);
  (*(void (**)(char *, uint64_t))(v117 + 8))(v101, v102);
  (*(void (**)(char *, uint64_t))(v114 + 8))(v100, v116);
  swift_release();
  if (v119)
  {
    uint64_t v103 = type metadata accessor for Transaction();
    __chkstk_darwin(v103);
    *(&v105 - 2) = (uint8_t *)v94;
    *(&v105 - 1) = v91;
    static Transaction.named<A>(_:with:)();
  }
  swift_bridgeObjectRelease();
  return sub_1008C065C();
}

uint64_t sub_10044DD24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v49 = a7;
  uint64_t v50 = a5;
  uint64_t v47 = a6;
  uint64_t v48 = a3;
  uint64_t v45 = a4;
  uint64_t v8 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v44 = *(void *)(v8 - 8);
  uint64_t v9 = *(void *)(v44 + 64);
  __chkstk_darwin(v8 - 8);
  uint64_t v46 = (uint64_t)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  char v13 = sub_1010AB850(v54);
  swift_bridgeObjectRelease();
  if (v13) {
    sub_10044E19C(a2);
  }
  uint64_t v14 = a2;
  uint64_t v15 = _swiftEmptyArrayStorage;
  v57[0] = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v16 = *(void *)(v14 + 16);
  uint64_t v17 = swift_bridgeObjectRetain();
  if (v16)
  {
    uint64_t v18 = v17;
    uint64_t v19 = v17 + 32;
    do
    {
      sub_10001D010(v19, (uint64_t)&v54);
      uint64_t v21 = v55;
      uint64_t v20 = v56;
      sub_10001CD44(&v54, v55);
      if ((*(uint64_t (**)(uint64_t, uint64_t))(v20 + 112))(v21, v20))
      {
        sub_10001CEB0(&v54, (uint64_t)v51);
        uint64_t v22 = (void *)v57[0];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000B7570(0, v22[2] + 1, 1);
          uint64_t v22 = (void *)v57[0];
        }
        unint64_t v24 = v22[2];
        unint64_t v23 = v22[3];
        if (v24 >= v23 >> 1) {
          sub_1000B7570(v23 > 1, v24 + 1, 1);
        }
        uint64_t v25 = v52;
        uint64_t v26 = v53;
        uint64_t v27 = sub_1000BD078((uint64_t)v51, v52);
        __chkstk_darwin(v27);
        uint64_t v29 = (char *)&v42 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v30 + 16))(v29);
        sub_1006985B0(v24, (uint64_t)v29, v57, v25, v26);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v51);
      }
      else
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v54);
      }
      v19 += 40;
      --v16;
    }
    while (v16);
    uint64_t v15 = (void *)v57[0];
  }
  else
  {
    uint64_t v18 = v17;
  }
  swift_bridgeObjectRelease();
  uint64_t v31 = type metadata accessor for TaskPriority();
  uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56);
  uint64_t v43 = v12;
  v32(v12, 1, 1, v31);
  uint64_t v33 = v46;
  sub_10001D074(v45, v46, (uint64_t *)&unk_10163AC90);
  unint64_t v34 = (*(unsigned __int8 *)(v44 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v44 + 80);
  unint64_t v35 = (v9 + v34 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v36 = (v35 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v37 = (void *)swift_allocObject();
  v37[2] = 0;
  v37[3] = 0;
  uint64_t v38 = v48;
  v37[4] = v18;
  v37[5] = v38;
  sub_10001D608(v33, (uint64_t)v37 + v34, (uint64_t *)&unk_10163AC90);
  *(void *)((char *)v37 + v35) = v50;
  *(void *)((char *)v37 + v36) = v15;
  unint64_t v39 = (void *)((char *)v37 + ((v36 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v40 = v49;
  *unint64_t v39 = v47;
  v39[1] = v40;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_100885EBC((uint64_t)v43, (uint64_t)&unk_101645770, (uint64_t)v37);
  return swift_release();
}

void sub_10044E19C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for LocationFetcher();
  uint64_t v37 = *(void *)(v4 - 8);
  uint64_t v5 = *(void *)(v37 + 64);
  uint64_t v6 = __chkstk_darwin(v4 - 8);
  uint64_t v38 = (uint64_t)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  unint64_t v39 = (char *)&v35 - v7;
  id v8 = [self mainBundle];
  id v9 = [v8 bundleIdentifier];

  if (v9)
  {
    uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v40 = v10;
  }
  else
  {
    uint64_t v36 = 0;
    uint64_t v40 = 0;
  }
  uint64_t v11 = sub_10080D1A8();
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v12 = sub_1010ABA34(v41[0]);
  swift_bridgeObjectRelease();
  uint64_t My = type metadata accessor for Feature.FindMy();
  uint64_t v42 = (ValueMetadata *)My;
  unint64_t v43 = sub_100482848((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
  uint64_t v14 = sub_10001D958(v41);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v14, enum case for Feature.FindMy.networkScalingImprovements(_:), My);
  char v15 = isFeatureEnabled(_:)();
  uint64_t v16 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v41);
  __chkstk_darwin(v16);
  *(&v35 - 2) = a1;
  *(&v35 - 1) = v2;
  sub_10000588C((uint64_t *)&unk_1016636E0);
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v17 = v41[0];
  if (*(void *)(v41[0] + 16))
  {
    uint64_t v18 = *(void *)(v2 + 280);
    uint64_t v42 = &_s13DefaultPolicyVN;
    unint64_t v43 = sub_100075104();
    uint64_t v19 = swift_allocObject();
    v41[0] = v19;
    *(void *)(v19 + 16) = v12;
    *(unsigned char *)(v19 + 24) = 1;
    *(void *)(v19 + 32) = &off_1015A1580;
    *(unsigned char *)(v19 + 40) = 0;
    uint64_t v20 = v40;
    *(void *)(v19 + 48) = v36;
    *(void *)(v19 + 56) = v20;
    *(void *)(v19 + 64) = v11;
    *(unsigned char *)(v19 + 72) = v15 & 1;
    *(void *)(v19 + 80) = 0;
    *(void *)(v19 + 88) = 0;
    *(unsigned char *)(v19 + 96) = 1;
    uint64_t v21 = qword_101636CB8;
    swift_retain();
    if (v21 != -1) {
      swift_once();
    }
    uint64_t v22 = qword_10170E330;
    swift_retain();
    unint64_t v23 = sub_10092DC10((uint64_t)_swiftEmptyArrayStorage);
    unint64_t v24 = v39;
    sub_1005A2BA4(v18, v41, v22, v23, v39);
    swift_bridgeObjectRetain();
    uint64_t v25 = swift_bridgeObjectRetain();
    uint64_t v26 = sub_10047A344(v25, v17);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v27 = swift_allocObject();
    *(void *)(v27 + 16) = v2;
    *(void *)(v27 + 24) = v17;
    type metadata accessor for Transaction();
    uint64_t v28 = v38;
    sub_100485A94((uint64_t)v24, v38, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
    unint64_t v29 = (*(unsigned __int8 *)(v37 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
    uint64_t v30 = (void *)swift_allocObject();
    v30[2] = sub_100482920;
    v30[3] = v27;
    v30[4] = v26;
    sub_100485510(v28, (uint64_t)v30 + v29, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    static Transaction.asyncTask(name:block:)();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    sub_100485AFC((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_101636B10 != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    sub_100010324(v31, (uint64_t)qword_10170DEB8);
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v32, v33))
    {
      unint64_t v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v34 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, v33, "No new beacons to locate on disk. Skipping.", v34, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_10044E778(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[81] = v16;
  v8[80] = v15;
  v8[79] = a8;
  v8[78] = a7;
  v8[77] = a6;
  v8[76] = a5;
  v8[75] = a4;
  uint64_t v9 = type metadata accessor for OwnedBeaconGroup(0);
  v8[82] = v9;
  v8[83] = *(void *)(v9 - 8);
  v8[84] = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_10163AC90);
  v8[85] = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Date();
  v8[86] = v10;
  v8[87] = *(void *)(v10 - 8);
  v8[88] = swift_task_alloc();
  v8[89] = swift_task_alloc();
  v8[90] = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_101638D50);
  v8[91] = swift_task_alloc();
  v8[92] = swift_task_alloc();
  uint64_t v11 = type metadata accessor for BeaconEstimatedLocation();
  v8[93] = v11;
  v8[94] = *(void *)(v11 - 8);
  v8[95] = swift_task_alloc();
  v8[96] = swift_task_alloc();
  v8[97] = swift_task_alloc();
  v8[98] = swift_task_alloc();
  v8[99] = swift_task_alloc();
  v8[100] = swift_task_alloc();
  v8[101] = swift_task_alloc();
  sub_10000588C(&qword_101639428);
  v8[102] = swift_task_alloc();
  v8[103] = swift_task_alloc();
  uint64_t v12 = type metadata accessor for UUID();
  v8[104] = v12;
  v8[105] = *(void *)(v12 - 8);
  v8[106] = swift_task_alloc();
  v8[107] = swift_task_alloc();
  v8[108] = swift_task_alloc();
  v8[109] = swift_task_alloc();
  v8[110] = swift_task_alloc();
  v8[111] = swift_task_alloc();
  v8[112] = swift_task_alloc();
  v8[113] = swift_task_alloc();
  return _swift_task_switch(sub_10044EADC, 0, 0);
}

uint64_t sub_10044EADC()
{
  v0[60] = 0;
  UUID.init()();
  v0[114] = type metadata accessor for AnalyticsEvent(0);
  uint64_t v1 = (char *)swift_allocObject();
  v0[115] = v1;
  swift_defaultActor_initialize();
  *((void *)v1 + 14) = sub_10092D664((uint64_t)_swiftEmptyArrayStorage);
  UUID.init()();
  uint64_t v2 = &v1[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
  uint64_t v3 = type metadata accessor for DispatchTime();
  v0[116] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v4 + 56);
  v0[117] = v5;
  v0[118] = (v4 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  v5(v2, 1, 1, v3);
  v5(&v1[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v3);
  *((void *)v1 + 15) = 0xD00000000000002ELL;
  *((void *)v1 + 16) = 0x80000001013FD270;
  return _swift_task_switch(sub_10044EC4C, v1, 0);
}

uint64_t sub_10044EC4C()
{
  uint64_t v1 = (void (*)(uint64_t, void, uint64_t, uint64_t))v0[117];
  uint64_t v2 = v0[116];
  uint64_t v3 = v0[115];
  uint64_t v4 = v0[103];
  uint64_t v5 = v0[102];
  static DispatchTime.now()();
  v1(v4, 0, 1, v2);
  sub_10001D608(v4, v5, &qword_101639428);
  uint64_t v6 = v3 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime;
  swift_beginAccess();
  sub_100062604(v5, v6, &qword_101639428);
  swift_endAccess();
  return _swift_task_switch(sub_10044ED50, 0, 0);
}

uint64_t sub_10044ED50()
{
  *(void *)(v0 + 432) = _swiftEmptyDictionarySingleton;
  *(void *)(v0 + 440) = 0;
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 256, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 280))
  {
    sub_10001CEB0((long long *)(v0 + 256), v0 + 176);
    sub_10001CD44((void *)(v0 + 176), *(void *)(v0 + 200));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_1016390D8 + dword_1016390D8);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 952) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10044EE98;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10044EE98(uint64_t a1)
{
  *(void *)(*(void *)v1 + 960) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10044EF98, 0, 0);
}

uint64_t sub_10044EF98()
{
  uint64_t v1 = v0 + 176;
  if (!*(void *)(v0 + 960))
  {
    uint64_t v14 = *(void *)(v0 + 904);
    uint64_t v15 = *(void *)(v0 + 840);
    uint64_t v16 = *(void *)(v0 + 832);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_10001CEC8();
    swift_allocError();
    *uint64_t v17 = 0xD000000000000010;
    v17[1] = 0x80000001013F23D0;
    swift_willThrow();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v16);
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
    return v18();
  }
  uint64_t v2 = *(void *)(v0 + 600);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  uint64_t v3 = *(void *)(v2 + 16);
  *(void *)(v0 + 968) = v3;
  if (v3)
  {
    uint64_t v4 = *(void *)(v0 + 600);
    *(_OWORD *)(v0 + 976) = 0u;
    *(_OWORD *)(v0 + 992) = 0u;
    uint64_t v5 = *(void *)(v0 + 960);
    uint64_t v6 = v4 + 32;
    swift_bridgeObjectRetain();
    sub_10001D010(v6, v0 + 296);
    uint64_t v7 = *(void *)(v0 + 320);
    uint64_t v8 = *(void *)(v0 + 328);
    sub_10001CD44((void *)(v0 + 296), v7);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v8 + 8) + 8) + 32))(v7);
    uint64_t v9 = *(void *)(v0 + 320);
    uint64_t v10 = *(void *)(v0 + 328);
    uint64_t v11 = sub_10001CD44((void *)(v0 + 296), v9);
    uint64_t v92 = (char *)&dword_101660EB8 + dword_101660EB8;
    uint64_t v12 = (void *)swift_task_alloc();
    *(void *)(v0 + 1008) = v12;
    *uint64_t v12 = v0;
    v12[1] = sub_10044F9F8;
    return ((uint64_t (*)(void *, uint64_t, uint64_t, uint64_t))v92)(v11, v5, v9, v10);
  }
  uint64_t v19 = *(void *)(v0 + 624);
  uint64_t v20 = *(void *)(v19 + 16);
  uint64_t v81 = v20;
  if (!v20)
  {
LABEL_48:
    *(void *)(v0 + 1200) = v20;
    *(void *)(v0 + 408) = 0;
    uint64_t v71 = *(void *)(v0 + 920);
    uint64_t v72 = *(void *)(v0 + 904);
    uint64_t v73 = *(void *)(v0 + 632);
    uint64_t v74 = *(void *)(v0 + 600);
    unint64_t v75 = (void *)swift_task_alloc();
    *(void *)(v0 + 1208) = v75;
    v75[2] = v74;
    v75[3] = v73;
    v75[4] = v72;
    v75[5] = v0 + 440;
    v75[6] = v0 + 480;
    v75[7] = v0 + 408;
    return _swift_task_switch(sub_1004535F8, v71, 0);
  }
  int64_t v91 = (void *)(v0 + 136);
  unint64_t v93 = (void *)(v0 + 96);
  uint64_t v84 = (void *)(v0 + 216);
  uint64_t v21 = *(void *)(v0 + 840);
  uint64_t v22 = *(void *)(v0 + 664);
  uint64_t v78 = *(void *)(v0 + 656);
  uint64_t v83 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 696) + 8);
  unint64_t v76 = (void (**)(uint64_t, uint64_t))(v21 + 8);
  uint64_t v77 = (void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16);
  uint64_t v79 = *(void *)(v22 + 72);
  uint64_t v80 = v19 + ((*(unsigned __int8 *)(v22 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v22 + 80));
  swift_bridgeObjectRetain();
  uint64_t v23 = 0;
  uint64_t v82 = v0 + 56;
  while (1)
  {
    uint64_t v89 = v23;
    sub_100485A94(v80 + v23 * v79, *(void *)(v0 + 672), type metadata accessor for OwnedBeaconGroup);
    uint64_t v25 = sub_1004D1434();
    unint64_t v26 = sub_10044A6F4(v25, (uint64_t *)(v0 + 432));
    swift_bridgeObjectRelease();
    unint64_t v27 = v26 >> 62;
    if (v26 >> 62) {
      break;
    }
    uint64_t v28 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v28) {
      goto LABEL_16;
    }
LABEL_11:
    uint64_t v24 = *(void *)(v0 + 672);
    swift_bridgeObjectRelease();
    sub_100485AFC(v24, type metadata accessor for OwnedBeaconGroup);
LABEL_12:
    swift_bridgeObjectRelease();
LABEL_13:
    uint64_t v23 = v89 + 1;
    if (v89 + 1 == v81)
    {
      swift_bridgeObjectRelease();
      uint64_t v20 = 0;
      goto LABEL_48;
    }
  }
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_11;
  }
LABEL_16:
  unint64_t v88 = v26 & 0xC000000000000001;
  if ((v26 & 0xC000000000000001) != 0)
  {
    id v29 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_52;
    }
    id v29 = *(id *)(v26 + 32);
  }
  uint64_t v30 = v29;
  swift_bridgeObjectRelease();
  if (v27)
  {
    swift_bridgeObjectRetain();
    uint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v31 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v32 = *(void *)(v0 + 672);
  unint64_t v33 = *(void *)(*(void *)(v32 + *(int *)(v78 + 40)) + 16);
  if (v33 >= 0x100) {
    return _assertionFailure(_:_:file:line:flags:)();
  }
  if (v31 != v33)
  {
    sub_100485AFC(v32, type metadata accessor for OwnedBeaconGroup);

    goto LABEL_12;
  }
  if (!v27)
  {
    uint64_t v34 = *(void *)((v26 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    id v35 = v30;
    if (v34) {
      goto LABEL_29;
    }
    goto LABEL_39;
  }
  swift_bridgeObjectRetain();
  id v36 = v30;
  uint64_t v34 = _CocoaArrayWrapper.endIndex.getter();
  if (!v34)
  {
LABEL_39:
    uint64_t v64 = *(void *)(v0 + 848);
    uint64_t v65 = *(void *)(v0 + 832);
    uint64_t v66 = *(void *)(v0 + 672);
    swift_bridgeObjectRelease_n();

    (*v77)(v64, v66 + *(int *)(v78 + 24), v65);
    id v67 = v30;
    uint64_t v68 = *(void *)(v0 + 432);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    sub_10016BA48((uint64_t)v67, v64, isUniquelyReferenced_nonNull_native);
    *(void *)(v0 + 432) = v68;
    swift_bridgeObjectRelease();
    (*v76)(v64, v65);

    sub_100485AFC(v66, type metadata accessor for OwnedBeaconGroup);
    goto LABEL_13;
  }
LABEL_29:
  uint64_t v37 = 0;
  uint64_t v86 = v30;
  unint64_t v87 = v26;
  uint64_t v85 = v34;
  while (1)
  {
    id v38 = v88 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v26 + 8 * v37 + 32);
    unint64_t v39 = v38;
    if (__OFADD__(v37, 1)) {
      break;
    }
    uint64_t v90 = v37 + 1;
    uint64_t v40 = *(void *)(v0 + 720);
    uint64_t v41 = *(void *)(v0 + 704);
    uint64_t v42 = *(void *)(v0 + 688);
    *(void *)(v0 + 80) = sub_10001D4B0(0, (unint64_t *)&qword_101638DB0);
    *(void *)(v0 + 88) = &off_101609190;
    *(void *)(v0 + 56) = v30;
    id v43 = v30;
    id v44 = [v39 timestamp];
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v45 = v43;
    id v46 = [v43 timestamp];
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    LOBYTE(v46) = static Date.== infix(_:_:)();
    uint64_t v47 = *v83;
    (*v83)(v41, v42);
    v47(v40, v42);
    sub_10001D010(v82, (uint64_t)v84);
    if ((v46 & 1) == 0)
    {
      uint64_t v48 = v39;
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v84);
      sub_10001D010(v82, (uint64_t)v91);
LABEL_41:
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v91);
      sub_10001D010(v82, (uint64_t)v93);
LABEL_42:
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v93);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v82);

LABEL_43:
      swift_bridgeObjectRelease();

      uint64_t v70 = *(void *)(v0 + 672);
      swift_bridgeObjectRelease();
      sub_100485AFC(v70, type metadata accessor for OwnedBeaconGroup);

      goto LABEL_13;
    }
    uint64_t v48 = v39;
    id v49 = v39;
    [v49 longitude];
    double v51 = v50;
    [*sub_10001CD44(v84, *(void *)(v0 + 240)) longitude];
    double v53 = v52;

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v84);
    sub_10001D010(v82, (uint64_t)v91);
    unint64_t v26 = v87;
    if (v51 != v53) {
      goto LABEL_41;
    }
    id v54 = v49;
    [v54 latitude];
    double v56 = v55;
    [*sub_10001CD44(v91, *(void *)(v0 + 160)) latitude];
    double v58 = v57;

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v91);
    sub_10001D010(v82, (uint64_t)v93);
    if (v56 != v58) {
      goto LABEL_42;
    }
    id v59 = v54;
    [v59 horizontalAccuracy];
    double v61 = v60;
    [*sub_10001CD44(v93, *(void *)(v0 + 120)) horizontalAccuracy];
    double v63 = v62;

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v93);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v82);

    if (v61 != v63) {
      goto LABEL_43;
    }
    ++v37;
    uint64_t v30 = v86;
    if (v90 == v85) {
      goto LABEL_39;
    }
  }
  __break(1u);
LABEL_52:
  __break(1u);
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t sub_10044F9F8(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = *v1;
  uint64_t v7 = *v1;
  *(void *)(v3 + 1016) = a1;
  swift_task_dealloc();
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v3 + 1024) = v4;
  *uint64_t v4 = v7;
  v4[1] = sub_10044FB5C;
  uint64_t v5 = *(void *)(v2 + 896);
  return sub_100E62DA0(v5);
}

uint64_t sub_10044FB5C(uint64_t a1)
{
  *(void *)(*(void *)v1 + 1032) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10044FC5C, 0, 0);
}

uint64_t sub_10044FC5C()
{
  uint64_t v173 = v0;
  uint64_t v1 = *(void *)(v0 + 1032);
  *(void *)(v0 + 424) = _swiftEmptyArrayStorage;
  uint64_t v2 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  if (!v2)
  {
LABEL_17:
    uint64_t v22 = *(void *)(v0 + 976);
    swift_bridgeObjectRelease();
    *(void *)(v0 + 416) = *(void *)(v0 + 424);
    swift_retain();
    sub_1004747A8((void **)(v0 + 416));
    if (v22)
    {
      swift_bridgeObjectRelease_n();
      return swift_release();
    }
    uint64_t v24 = *(void *)(v0 + 752);
    uint64_t v25 = *(void *)(v0 + 744);
    uint64_t v26 = *(void *)(v0 + 736);
    swift_release();
    uint64_t v27 = *(void *)(v0 + 416);
    *(void *)(v0 + 1040) = v27;
    sub_100E4CD4C(v27, v26);
    uint64_t v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
    v169 = (void *)(v0 + 296);
    if (v28(v26, 1, v25) == 1)
    {
      id v29 = (void *)(v0 + 440);
      uint64_t v30 = *(void *)(v0 + 736);
      swift_bridgeObjectRelease();
      swift_release();
      sub_10001DAB4(v30, (uint64_t *)&unk_101638D50);
      if (qword_101636B10 != -1) {
        swift_once();
      }
      uint64_t v31 = *(void *)(v0 + 896);
      uint64_t v32 = *(void *)(v0 + 888);
      uint64_t v33 = *(void *)(v0 + 840);
      uint64_t v34 = *(void *)(v0 + 832);
      uint64_t v35 = type metadata accessor for Logger();
      sub_100010324(v35, (uint64_t)qword_10170DEB8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v33 + 16))(v32, v31, v34);
      id v36 = Logger.logObject.getter();
      os_log_type_t v37 = static os_log_type_t.default.getter();
      BOOL v38 = os_log_type_enabled(v36, v37);
      uint64_t v39 = *(void *)(v0 + 888);
      uint64_t v40 = *(void *)(v0 + 840);
      uint64_t v41 = *(void *)(v0 + 832);
      if (v38)
      {
        uint64_t v42 = swift_slowAlloc();
        v172[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v42 = 141558275;
        *(void *)(v0 + 448) = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v42 + 12) = 2081;
        sub_100482848((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v43 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v0 + 456) = sub_1008FA0F0(v43, v44, v172);
        id v29 = (void *)(v0 + 440);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        uint64_t v45 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
        v45(v39, v41);
        _os_log_impl((void *)&_mh_execute_header, v36, v37, "No cached latest location found for beacon %{private,mask.hash}s and given filter.", (uint8_t *)v42, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        uint64_t v45 = *(void (**)(uint64_t, uint64_t))(v40 + 8);
        v45(v39, v41);
      }

      if (!__OFADD__(*v29, 1))
      {
        v153 = (void *)(v0 + 480);
        id v59 = *(void **)(v0 + 1016);
        *(void *)(v0 + 440) = *v29 + 1;
        uint64_t v60 = *(void *)(v0 + 320);
        uint64_t v61 = *(void *)(v0 + 328);
        sub_10001CD44(v169, v60);
        char v62 = (*(uint64_t (**)(uint64_t, uint64_t))(v61 + 112))(v60, v61);
        swift_bridgeObjectRelease_n();

        if ((v62 & 1) == 0) {
          goto LABEL_36;
        }
        if (!__OFADD__(*v153, 1))
        {
          ++*v153;
LABEL_36:
          v45(*(void *)(v0 + 896), *(void *)(v0 + 832));
          double v63 = *(double *)(v0 + 992);
          uint64_t v64 = *(void *)(v0 + 984);
          uint64_t v65 = *(void *)(v0 + 968);
          uint64_t v66 = *(void *)(v0 + 1000) + 1;
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v169);
          if (v66 != v65)
          {
            uint64_t v120 = *(void *)(v0 + 1000) + 1;
            *(void *)(v0 + 1000) = v120;
            *(double *)(v0 + 992) = v63;
            *(void *)(v0 + 984) = v64;
            *(void *)(v0 + 976) = 0;
            uint64_t v121 = *(void *)(v0 + 960);
            sub_10001D010(*(void *)(v0 + 600) + 40 * v120 + 32, (uint64_t)v169);
            uint64_t v123 = *(void *)(v0 + 320);
            uint64_t v122 = *(void *)(v0 + 328);
            sub_10001CD44(v169, v123);
            (*(void (**)(uint64_t))(*(void *)(*(void *)(v122 + 8) + 8) + 32))(v123);
            uint64_t v124 = *(void *)(v0 + 320);
            uint64_t v125 = *(void *)(v0 + 328);
            v126 = sub_10001CD44(v169, v124);
            v171 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_101660EB8
                                                                              + dword_101660EB8);
            long long v127 = (void *)swift_task_alloc();
            *(void *)(v0 + 1008) = v127;
            *long long v127 = v0;
            v127[1] = sub_10044F9F8;
            return v171((uint64_t)v126, v121, v124, v125);
          }
          uint64_t v150 = v64;
          swift_bridgeObjectRelease();
          uint64_t v52 = *(void *)(v0 + 624);
          uint64_t v157 = *(void *)(v52 + 16);
          if (v157)
          {
            v161 = (void *)(v0 + 216);
            uint64_t v67 = *(void *)(v0 + 840);
            uint64_t v68 = *(void *)(v0 + 664);
            uint64_t v154 = *(void *)(v0 + 656);
            v160 = (void (**)(uint64_t, uint64_t))(*(void *)(v0 + 696) + 8);
            v151 = (void (**)(uint64_t, uint64_t))(v67 + 8);
            v152 = (void (**)(uint64_t, uint64_t, uint64_t))(v67 + 16);
            uint64_t v155 = *(void *)(v68 + 72);
            unint64_t v156 = v52 + ((*(unsigned __int8 *)(v68 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v68 + 80));
            swift_bridgeObjectRetain();
            uint64_t v69 = 0;
            uint64_t v70 = 0;
            v158 = (void *)(v0 + 96);
            uint64_t v159 = v0 + 56;
            while (1)
            {
              uint64_t v167 = v70;
              sub_100485A94(v156 + v70 * v155, *(void *)(v0 + 672), type metadata accessor for OwnedBeaconGroup);
              uint64_t v72 = sub_1004D1434();
              unint64_t v73 = sub_10044A6F4(v72, (uint64_t *)(v0 + 432));
              uint64_t v166 = v69;
              swift_bridgeObjectRelease();
              unint64_t v74 = v73 >> 62;
              if (v73 >> 62)
              {
                swift_bridgeObjectRetain();
                if (!_CocoaArrayWrapper.endIndex.getter())
                {
LABEL_39:
                  uint64_t v71 = *(void *)(v0 + 672);
                  swift_bridgeObjectRelease();
                  sub_100485AFC(v71, type metadata accessor for OwnedBeaconGroup);
LABEL_40:
                  swift_bridgeObjectRelease();
                  goto LABEL_41;
                }
              }
              else
              {
                uint64_t v75 = *(void *)((v73 & 0xFFFFFFFFFFFFFF8) + 0x10);
                swift_bridgeObjectRetain();
                if (!v75) {
                  goto LABEL_39;
                }
              }
              unint64_t v165 = v73 & 0xC000000000000001;
              if ((v73 & 0xC000000000000001) != 0)
              {
                id v76 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
              }
              else
              {
                if (!*(void *)((v73 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
                  goto LABEL_106;
                }
                id v76 = *(id *)(v73 + 32);
              }
              uint64_t v77 = v76;
              swift_bridgeObjectRelease();
              if (v74)
              {
                swift_bridgeObjectRetain();
                uint64_t v78 = _CocoaArrayWrapper.endIndex.getter();
                swift_bridgeObjectRelease();
              }
              else
              {
                uint64_t v78 = *(void *)((v73 & 0xFFFFFFFFFFFFFF8) + 0x10);
              }
              uint64_t v79 = *(void *)(v0 + 672);
              unint64_t v80 = *(void *)(*(void *)(v79 + *(int *)(v154 + 40)) + 16);
              if (v80 >= 0x100) {
                return _assertionFailure(_:_:file:line:flags:)();
              }
              if (v78 != v80)
              {
                sub_100485AFC(v79, type metadata accessor for OwnedBeaconGroup);

                goto LABEL_40;
              }
              if (v74)
              {
                swift_bridgeObjectRetain();
                id v83 = v77;
                uint64_t v81 = _CocoaArrayWrapper.endIndex.getter();
                if (v81)
                {
LABEL_57:
                  uint64_t v84 = 0;
                  v163 = v77;
                  unint64_t v164 = v73;
                  uint64_t v162 = v81;
                  while (1)
                  {
                    if (v165)
                    {
                      id v85 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
                      uint64_t v86 = v84 + 1;
                      if (__OFADD__(v84, 1)) {
                        goto LABEL_105;
                      }
                    }
                    else
                    {
                      id v85 = *(id *)(v73 + 8 * v84 + 32);
                      uint64_t v86 = v84 + 1;
                      if (__OFADD__(v84, 1)) {
                        goto LABEL_105;
                      }
                    }
                    uint64_t v168 = v86;
                    uint64_t v87 = *(void *)(v0 + 720);
                    uint64_t v88 = *(void *)(v0 + 704);
                    uint64_t v89 = *(void *)(v0 + 688);
                    uint64_t v90 = v85;
                    *(void *)(v0 + 80) = sub_10001D4B0(0, (unint64_t *)&qword_101638DB0);
                    *(void *)(v0 + 88) = &off_101609190;
                    *(void *)(v0 + 56) = v77;
                    id v91 = v77;
                    id v92 = [v90 timestamp];
                    static Date._unconditionallyBridgeFromObjectiveC(_:)();

                    v170 = v91;
                    id v93 = [v91 timestamp];
                    static Date._unconditionallyBridgeFromObjectiveC(_:)();

                    LOBYTE(v93) = static Date.== infix(_:_:)();
                    uint64_t v94 = *v160;
                    (*v160)(v88, v89);
                    v94(v87, v89);
                    sub_10001D010(v159, (uint64_t)v161);
                    if ((v93 & 1) == 0) {
                      break;
                    }
                    unint64_t v95 = v90;
                    id v96 = v90;
                    [v96 longitude];
                    double v98 = v97;
                    [*sub_10001CD44(v161, *(void *)(v0 + 240)) longitude];
                    double v100 = v99;

                    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v161);
                    sub_10001D010(v159, v0 + 136);
                    uint64_t v101 = v0 + 96;
                    unint64_t v73 = v164;
                    if (v98 != v100) {
                      goto LABEL_70;
                    }
                    id v102 = v96;
                    [v102 latitude];
                    double v104 = v103;
                    [*(id *)((v0 + 136) + 160) latitude];
                    double v106 = v105;

                    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 136);
                    sub_10001D010(v159, (uint64_t)v158);
                    if (v104 != v106) {
                      goto LABEL_71;
                    }
                    id v107 = v102;
                    [v107 horizontalAccuracy];
                    double v109 = v108;
                    [*sub_10001CD44(v158, *(void *)(v0 + 120)) horizontalAccuracy];
                    double v111 = v110;

                    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v158);
                    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v159);
                    uint64_t v112 = v170;

                    if (v109 != v111) {
                      goto LABEL_72;
                    }
                    ++v84;
                    uint64_t v77 = v163;
                    if (v168 == v162) {
                      goto LABEL_68;
                    }
                  }
                  unint64_t v95 = v90;
                  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v161);
                  sub_10001D010(v159, v0 + 136);
                  uint64_t v101 = v0 + 96;
LABEL_70:
                  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 136);
                  sub_10001D010(v159, v101);
LABEL_71:
                  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v101);
                  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v159);
                  uint64_t v112 = v170;

LABEL_72:
                  swift_bridgeObjectRelease();

                  uint64_t v119 = *(void *)(v0 + 672);
                  swift_bridgeObjectRelease();
                  sub_100485AFC(v119, type metadata accessor for OwnedBeaconGroup);

                  goto LABEL_41;
                }
              }
              else
              {
                uint64_t v81 = *(void *)((v73 & 0xFFFFFFFFFFFFFF8) + 0x10);
                swift_bridgeObjectRetain();
                id v82 = v77;
                if (v81) {
                  goto LABEL_57;
                }
              }
LABEL_68:
              uint64_t v113 = *(void *)(v0 + 848);
              uint64_t v114 = *(void *)(v0 + 832);
              uint64_t v115 = *(void *)(v0 + 672);
              swift_bridgeObjectRelease_n();

              (*v152)(v113, v115 + *(int *)(v154 + 24), v114);
              id v116 = v77;
              uint64_t v117 = *(void *)(v0 + 432);
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              v172[0] = v117;
              sub_10016BA48((uint64_t)v116, v113, isUniquelyReferenced_nonNull_native);
              *(void *)(v0 + 432) = v172[0];
              swift_bridgeObjectRelease();
              (*v151)(v113, v114);

              sub_100485AFC(v115, type metadata accessor for OwnedBeaconGroup);
LABEL_41:
              uint64_t v69 = v166;
              uint64_t v70 = v167 + 1;
              if (v167 + 1 == v157)
              {
                uint64_t v52 = swift_bridgeObjectRelease();
                goto LABEL_96;
              }
            }
          }
          uint64_t v69 = 0;
LABEL_96:
          v143 = (void *)(v0 + 408);
          *(void *)(v0 + 1200) = v69;
          *(void *)(v0 + 408) = 0;
          if (v150 <= 0) {
            goto LABEL_101;
          }
          double v144 = v63 / (double)v150;
          if ((~*(void *)&v144 & 0x7FF0000000000000) != 0)
          {
            if (v144 > -9.22337204e18)
            {
              if (v144 < 9.22337204e18)
              {
                void *v143 = (uint64_t)v144;
LABEL_101:
                uint64_t v145 = *(void *)(v0 + 920);
                uint64_t v146 = *(void *)(v0 + 904);
                uint64_t v147 = *(void *)(v0 + 632);
                uint64_t v148 = *(void *)(v0 + 600);
                v149 = (void *)swift_task_alloc();
                *(void *)(v0 + 1208) = v149;
                v149[2] = v148;
                v149[3] = v147;
                v149[4] = v146;
                v149[5] = v0 + 440;
                v149[6] = v153;
                v149[7] = v143;
                uint64_t v52 = (uint64_t)sub_1004535F8;
                uint64_t v53 = v145;
                uint64_t v54 = 0;
                return _swift_task_switch(v52, v53, v54);
              }
LABEL_119:
              __break(1u);
              return _swift_task_switch(v52, v53, v54);
            }
LABEL_118:
            __break(1u);
            goto LABEL_119;
          }
LABEL_117:
          __break(1u);
          goto LABEL_118;
        }
        goto LABEL_110;
      }
    }
    else
    {
      uint64_t v46 = *(void *)(v0 + 984);
      uint64_t v47 = *(void *)(v0 + 720);
      uint64_t v48 = *(void *)(v0 + 696);
      uint64_t v49 = *(void *)(v0 + 688);
      sub_100485510(*(void *)(v0 + 736), *(void *)(v0 + 792), (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      Date.init()();
      Date.timeIntervalSince(_:)();
      double v50 = *(uint64_t (**)(uint64_t, uint64_t))(v48 + 8);
      *(void *)(v0 + 1048) = v51;
      *(void *)(v0 + 1056) = v50;
      *(void *)(v0 + 1064) = (v48 + 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
      uint64_t v52 = v50(v47, v49);
      *(void *)(v0 + 1072) = v46 + 1;
      if (!__OFADD__(v46, 1))
      {
        uint64_t v55 = *(void *)(v27 + 16);
        if (v55)
        {
          uint64_t v56 = *(void *)(v0 + 752);
          uint64_t v57 = v27 + ((*(unsigned __int8 *)(v56 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v56 + 80));
          uint64_t v58 = *(void *)(v56 + 72);
          swift_retain();
          do
          {
            sub_100453C50(v57, *(void *)(v0 + 896));
            v57 += v58;
            --v55;
          }
          while (v55);
          swift_release();
        }
        *(void *)(v0 + 1080) = 0;
        uint64_t v128 = *(void *)(v0 + 696);
        uint64_t v129 = *(void *)(v0 + 688);
        uint64_t v130 = *(void *)(v0 + 680);
        uint64_t v131 = *(void *)(v0 + 616);
        *(void *)(v0 + 464) = 0;
        sub_10001D074(v131, v130, (uint64_t *)&unk_10163AC90);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v128 + 48))(v130, 1, v129) == 1)
        {
          sub_10001DAB4(*(void *)(v0 + 680), (uint64_t *)&unk_10163AC90);
          uint64_t v132 = v0 + 296;
        }
        else
        {
          uint64_t v133 = *(void *)(v0 + 712);
          uint64_t v134 = *(void *)(v0 + 688);
          (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v0 + 696) + 32))(v133, *(void *)(v0 + 680), v134);
          Date.timeIntervalSinceNow.getter();
          double v136 = v135;
          uint64_t v52 = v50(v133, v134);
          if ((~*(void *)&v136 & 0x7FF0000000000000) == 0)
          {
LABEL_111:
            __break(1u);
            goto LABEL_112;
          }
          if (v136 <= -9.22337204e18)
          {
LABEL_112:
            __break(1u);
            goto LABEL_113;
          }
          uint64_t v132 = v0 + 296;
          if (v136 >= 9.22337204e18)
          {
LABEL_113:
            __break(1u);
            goto LABEL_114;
          }
          *(void *)(v0 + 464) = (uint64_t)v136;
        }
        uint64_t v137 = *(void *)(v0 + 744);
        uint64_t v138 = *(void *)(v0 + 728);
        *(void *)(v0 + 472) = 0;
        sub_1002A1990(v27, v138);
        if (v28(v138, 1, v137) == 1)
        {
          sub_10001DAB4(*(void *)(v0 + 728), (uint64_t *)&unk_101638D50);
        }
        else
        {
          uint64_t v139 = *(void *)(v0 + 784);
          sub_100485510(*(void *)(v0 + 728), v139, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
          Date.timeIntervalSinceNow.getter();
          double v141 = v140;
          uint64_t v52 = sub_100485AFC(v139, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
          if ((~*(void *)&v141 & 0x7FF0000000000000) == 0)
          {
LABEL_114:
            __break(1u);
            goto LABEL_115;
          }
          if (v141 <= -9.22337204e18)
          {
LABEL_115:
            __break(1u);
            goto LABEL_116;
          }
          if (v141 >= 9.22337204e18)
          {
LABEL_116:
            __break(1u);
            goto LABEL_117;
          }
          *(void *)(v0 + 472) = (uint64_t)v141;
        }
        v142 = (void *)swift_task_alloc();
        *(void *)(v0 + 1088) = v142;
        void *v142 = v0;
        v142[1] = sub_100450E40;
        return sub_100E630C0(v132);
      }
      __break(1u);
    }
    __break(1u);
LABEL_110:
    __break(1u);
    goto LABEL_111;
  }
  unint64_t v3 = 0;
  uint64_t v4 = (uint64_t *)(v0 + 424);
  while (v3 < *(void *)(v1 + 16))
  {
    uint64_t v5 = *(void *)(v0 + 752);
    uint64_t v6 = *(void *)(v0 + 608);
    unint64_t v7 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    uint64_t v8 = *(void *)(v5 + 72);
    sub_100485A94(*(void *)(v0 + 1032) + v7 + v8 * v3, *(void *)(v0 + 808), (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    if (!*(void *)(v6 + 16)) {
      goto LABEL_12;
    }
    uint64_t v9 = *(void *)(v0 + 608);
    Swift::UInt v10 = *(unsigned __int8 *)(*(void *)(v0 + 808) + *(int *)(*(void *)(v0 + 744) + 44));
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v10);
    Swift::Int v11 = Hasher._finalize()();
    uint64_t v12 = -1 << *(unsigned char *)(v9 + 32);
    unint64_t v13 = v11 & ~v12;
    if ((*(void *)(v9 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8) + 56) >> v13))
    {
      uint64_t v14 = *(void *)(v0 + 608);
      uint64_t v15 = *(void *)(v14 + 48);
      if (*(unsigned __int8 *)(v15 + v13) == v10)
      {
LABEL_12:
        sub_100485510(*(void *)(v0 + 808), *(void *)(v0 + 800), (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
        uint64_t v18 = *(void *)(v0 + 424);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000B7B88(0, *(void *)(v18 + 16) + 1, 1);
          uint64_t v18 = *v4;
        }
        unint64_t v20 = *(void *)(v18 + 16);
        unint64_t v19 = *(void *)(v18 + 24);
        if (v20 >= v19 >> 1)
        {
          sub_1000B7B88(v19 > 1, v20 + 1, 1);
          uint64_t v18 = *v4;
        }
        uint64_t v21 = *(void *)(v0 + 800);
        *(void *)(v18 + 16) = v20 + 1;
        sub_100485510(v21, v18 + v7 + v20 * v8, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
        goto LABEL_4;
      }
      uint64_t v16 = ~v12;
      uint64_t v17 = v14 + 56;
      while (1)
      {
        unint64_t v13 = (v13 + 1) & v16;
        if (((*(void *)(v17 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) == 0) {
          break;
        }
        if (*(unsigned __int8 *)(v15 + v13) == v10) {
          goto LABEL_12;
        }
      }
    }
    sub_100485AFC(*(void *)(v0 + 808), (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
LABEL_4:
    if (++v3 == v2) {
      goto LABEL_17;
    }
  }
  __break(1u);
LABEL_105:
  __break(1u);
LABEL_106:
  __break(1u);
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t sub_100450E40(double a1)
{
  *(double *)(*(void *)v1 + 1096) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100450F40, 0, 0);
}

uint64_t sub_100450F40()
{
  v234 = v0;
  uint64_t v1 = v0 + 2;
  uint64_t v2 = v0 + 37;
  if (qword_101636B10 != -1) {
    swift_once();
  }
  uint64_t v3 = v0[112];
  uint64_t v4 = v0[110];
  uint64_t v5 = v0[105];
  uint64_t v6 = v0[104];
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = sub_100010324(v7, (uint64_t)qword_10170DEB8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  v0[138] = v8;
  v0[139] = v9;
  v0[140] = (v5 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v227 = v9;
  v9(v4, v3, v6);
  sub_10001D010((uint64_t)(v0 + 37), (uint64_t)(v0 + 2));
  Swift::UInt v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = v0[137];
    os_log_type_t typeb = v11;
    uint64_t v13 = v0[110];
    uint64_t v14 = v0[105];
    uint64_t v15 = v0[104];
    v224 = v0 + 37;
    uint64_t v16 = swift_slowAlloc();
    v233[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v16 = 141558787;
    v0[71] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 12) = 2081;
    sub_100482848((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v18 = v0;
    v0[72] = sub_1008FA0F0(v17, v19, v233);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    unint64_t v20 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v20(v13, v15);
    *(_WORD *)(v16 + 22) = 2048;
    v18[73] = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 32) = 2048;
    uint64_t v21 = v18[5];
    uint64_t v22 = v18[6];
    sub_10001CD44(v1, v21);
    uint64_t v23 = sub_10110171C(v21, v22);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v1);
    v18[74] = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v10, typeb, "Applying location filter for beacon %{private,mask.hash}s, transmitPower: %f, beaconType: %lu.", (uint8_t *)v16, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v2 = v224;
    swift_slowDealloc();
  }
  else
  {
    uint64_t v24 = v0[110];
    uint64_t v25 = v0[105];
    uint64_t v26 = v0[104];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 2));
    uint64_t v18 = v0;
    unint64_t v20 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
    v20(v24, v26);
  }

  v203 = v18 + 54;
  v18[141] = v20;
  double v27 = *((double *)v18 + 137);
  uint64_t v28 = sub_100A9BD7C(v18[130]);
  uint64_t v29 = v18[40];
  uint64_t v30 = v18[41];
  sub_10001CD44(v2, v29);
  uint64_t v31 = sub_10110171C(v29, v30);
  id v32 = sub_1011030EC((uint64_t)v28, v31, v27);
  v18[142] = v32;
  swift_bridgeObjectRelease();
  if (v32)
  {
    *(void *)type = v18 + 58;
    v222 = v20;
    v212 = (void (*)(uint64_t, uint64_t))v18[132];
    uint64_t v215 = v18[130];
    v217 = v18 + 59;
    uint64_t v33 = v18[99];
    uint64_t v34 = v18[97];
    uint64_t v35 = (int *)v18[93];
    uint64_t v36 = v18[90];
    uint64_t v37 = v18[86];
    sub_100485A94(v33, v34, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    double v38 = *(double *)(v34 + v35[7]);
    double v39 = *(double *)(v34 + v35[8]);
    id v40 = objc_allocWithZone((Class)CLLocation);
    double v41 = *(double *)(v34 + v35[9]);
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    id v43 = [v40 initWithCoordinate:isa verticalAccuracy:v38 horizontalAccuracy:v39 timestamp:v41];

    sub_100485AFC(v34, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    id v44 = v32;
    [v44 coordinate];
    double v46 = v45;
    [v44 coordinate];
    double v48 = v47;
    id v49 = objc_allocWithZone((Class)CLLocation);
    [v44 horizontalAccuracy];
    double v51 = v50;
    id v52 = [v44 timestamp];
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    Class v53 = Date._bridgeToObjectiveC()().super.isa;
    v212(v36, v37);
    id v54 = [v49 initWithCoordinate:v53 altitude:v46 horizontalAccuracy:v48 verticalAccuracy:-1.0 timestamp:v51];

    [v43 distanceFromLocation:v54];
    uint64_t v56 = v55;

    double v57 = *(double *)(v33 + v35[9]);
    id v225 = v44;
    [v44 horizontalAccuracy];
    double v59 = v58;
    uint64_t v60 = *(void *)(v215 + 16);
    uint64_t v61 = v18;
    if (v60)
    {
      uint64_t v62 = v18[96];
      uint64_t v63 = v18[94];
      uint64_t v64 = *(int *)(v18[93] + 44);
      uint64_t v65 = v18[130] + ((*(unsigned __int8 *)(v63 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v63 + 80));
      swift_retain();
      uint64_t v66 = *(void *)(v63 + 72);
      uint64_t v67 = _swiftEmptyArrayStorage;
      do
      {
        uint64_t v68 = v61[96];
        sub_100485A94(v65, v68, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
        char v69 = *(unsigned char *)(v62 + v64);
        sub_100485AFC(v68, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v67 = sub_100A706EC(0, v67[2] + 1, 1, v67);
        }
        unint64_t v71 = v67[2];
        unint64_t v70 = v67[3];
        if (v71 >= v70 >> 1) {
          uint64_t v67 = sub_100A706EC((void *)(v70 > 1), v71 + 1, 1, v67);
        }
        v67[2] = v71 + 1;
        *((unsigned char *)v67 + v71 + 32) = v69;
        v65 += v66;
        --v60;
      }
      while (v60);
      uint64_t v18 = v61;
      swift_release();
    }
    else
    {
      uint64_t v67 = _swiftEmptyArrayStorage;
    }
    v213 = (void (*)(uint64_t, uint64_t))v18[132];
    uint64_t v84 = v18[112];
    uint64_t v85 = v18[108];
    uint64_t v86 = v18[104];
    uint64_t v87 = v18[93];
    uint64_t v88 = v18[90];
    uint64_t v208 = v18[99];
    uint64_t v210 = v18[86];
    sub_100A9BF4C((uint64_t)v67);
    swift_bridgeObjectRelease();
    id v89 = objc_allocWithZone((Class)NSSet);
    Class v90 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    id v91 = [v89 initWithArray:v90];
    v61[143] = v91;

    v227(v85, v84, v86);
    id v92 = [v225 timestamp];
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    [v225 coordinate];
    double v94 = v93;
    [v225 coordinate];
    double v96 = v95;
    [v225 horizontalAccuracy];
    double v98 = v97;
    double v99 = (void *)sub_101103478(*(unsigned char *)(v208 + *(int *)(v87 + 44)));
    id v100 = objc_allocWithZone((Class)SPBeaconLocation);
    id v101 = v99;
    Class v102 = Date._bridgeToObjectiveC()().super.isa;
    id v103 = [v100 initWithTimestamp:v102 latitude:v101 longitude:v94 horizontalAccuracy:v96 source:v98];

    v213(v88, v210);
    uint64_t v104 = v61[108];
    uint64_t v105 = v61[104];
    if (v103)
    {
      uint64_t v106 = *v203;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v233[0] = v106;
      sub_10016BA48((uint64_t)v103, v104, isUniquelyReferenced_nonNull_native);
      uint64_t *v203 = v233[0];
      swift_bridgeObjectRelease();
      v222(v104, v105);
    }
    else
    {
      double v108 = (void *)sub_1001634D0(v61[108]);
      v222(v104, v105);
    }
    uint64_t v109 = v61[131];
    uint64_t v110 = v61[127];
    double v111 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v61[117];
    uint64_t v112 = v61[116];
    uint64_t v113 = v61[113];
    uint64_t v114 = v61[99];
    uint64_t v115 = (char *)swift_allocObject();
    v61[144] = v115;
    long long v230 = *(_OWORD *)(v61 + 129);
    swift_defaultActor_initialize();
    *((void *)v115 + 14) = sub_10092D664((uint64_t)_swiftEmptyArrayStorage);
    UUID.init()();
    v111(&v115[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime], 1, 1, v112);
    v111(&v115[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v112);
    *((void *)v115 + 15) = 0xD000000000000030;
    *((void *)v115 + 16) = 0x80000001013FD2A0;
    uint64_t v116 = swift_task_alloc();
    v61[145] = v116;
    *(void *)(v116 + 16) = v113;
    *(void *)(v116 + 24) = v109;
    *(void *)(v116 + 32) = v225;
    *(void *)(v116 + 40) = v114;
    *(_OWORD *)(v116 + 48) = v230;
    *(void *)(v116 + 64) = *(void *)type;
    *(void *)(v116 + 72) = v217;
    *(void *)(v116 + 80) = v56;
    *(double *)(v116 + 88) = vabdd_f64(v57, v59);
    *(void *)(v116 + 96) = v91;
    *(void *)(v116 + 104) = v110;
    uint64_t v117 = (uint64_t)sub_10045244C;
    goto LABEL_73;
  }
  uint64_t v72 = v18[112];
  uint64_t v73 = v18[109];
  uint64_t v74 = v18[104];
  swift_bridgeObjectRelease();
  swift_release();
  v227(v73, v72, v74);
  uint64_t v75 = Logger.logObject.getter();
  os_log_type_t v76 = static os_log_type_t.error.getter();
  BOOL v77 = os_log_type_enabled(v75, v76);
  uint64_t v78 = (void *)v18[127];
  uint64_t v79 = v18[109];
  uint64_t v80 = v18[104];
  if (v77)
  {
    v228 = (void *)v18[127];
    uint64_t v81 = swift_slowAlloc();
    v233[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v81 = 141558275;
    v18[61] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v81 + 12) = 2081;
    sub_100482848((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v82 = dispatch thunk of CustomStringConvertible.description.getter();
    v18[62] = sub_1008FA0F0(v82, v83, v233);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v20(v79, v80);
    _os_log_impl((void *)&_mh_execute_header, v75, v76, "Could not produce filtered location for beacon %{private,mask.hash}s.", (uint8_t *)v81, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_bridgeObjectRelease_n();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    v20(v79, v80);
  }
  uint64_t v118 = v18[112];
  uint64_t v119 = v18[104];
  sub_100485AFC(v18[99], (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
  v20(v118, v119);
  uint64_t v120 = v18[135];
  uint64_t v121 = v18[134];
  double v122 = *((double *)v18 + 131) + *((double *)v18 + 124);
  uint64_t v123 = v18[121];
  uint64_t v124 = v18[125] + 1;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v2);
  uint64_t v125 = v18 + 54;
  if (v124 != v123)
  {
    uint64_t v183 = v18[125] + 1;
    v18[125] = v183;
    *((double *)v18 + 124) = v122;
    v18[123] = v121;
    v18[122] = v120;
    uint64_t v184 = v18[120];
    sub_10001D010(v18[75] + 40 * v183 + 32, (uint64_t)v2);
    uint64_t v185 = v18[40];
    uint64_t v186 = v18[41];
    sub_10001CD44(v2, v185);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v186 + 8) + 8) + 32))(v185);
    uint64_t v187 = v18[40];
    uint64_t v188 = v18[41];
    v189 = sub_10001CD44(v2, v187);
    v232 = (char *)&dword_101660EB8 + dword_101660EB8;
    v190 = (void *)swift_task_alloc();
    v18[126] = v190;
    void *v190 = v18;
    v190[1] = sub_10044F9F8;
    return ((uint64_t (*)(void *, uint64_t, uint64_t, uint64_t))v232)(v189, v184, v187, v188);
  }
  swift_bridgeObjectRelease();
  uint64_t v117 = v18[78];
  uint64_t v206 = *(void *)(v117 + 16);
  if (!v206)
  {
LABEL_67:
    v192 = v18 + 51;
    v18[150] = v120;
    v18[51] = 0;
    if (v121 <= 0)
    {
LABEL_72:
      uint64_t v115 = (char *)v18[115];
      uint64_t v194 = v18[113];
      uint64_t v195 = v18[79];
      uint64_t v196 = v18[75];
      v197 = (void *)swift_task_alloc();
      v18[151] = v197;
      v197[2] = v196;
      v197[3] = v195;
      v197[4] = v194;
      v197[5] = v18 + 55;
      v197[6] = v18 + 60;
      v197[7] = v192;
      uint64_t v117 = (uint64_t)sub_1004535F8;
LABEL_73:
      v126 = v115;
      uint64_t v127 = 0;
      return _swift_task_switch(v117, v126, v127);
    }
    double v193 = v122 / (double)v121;
    if ((~*(void *)&v193 & 0x7FF0000000000000) != 0)
    {
      if (v193 > -9.22337204e18)
      {
        if (v193 < 9.22337204e18)
        {
          void *v192 = (uint64_t)v193;
          goto LABEL_72;
        }
LABEL_81:
        __break(1u);
        return _swift_task_switch(v117, v126, v127);
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_81;
  }
  uint64_t v128 = (uint64_t)(v18 + 7);
  uint64_t v129 = v18[105];
  uint64_t v130 = v18[83];
  uint64_t v202 = v18[82];
  v211 = (void (**)(uint64_t, uint64_t))(v18[87] + 8);
  v200 = (void (**)(uint64_t, uint64_t, uint64_t))(v129 + 16);
  uint64_t v198 = v121;
  v199 = (void (**)(uint64_t, uint64_t))(v129 + 8);
  uint64_t v204 = *(void *)(v130 + 72);
  unint64_t v205 = v117 + ((*(unsigned __int8 *)(v130 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v130 + 80));
  swift_bridgeObjectRetain();
  uint64_t v131 = 0;
  v214 = v18 + 27;
  v207 = v18 + 17;
  v209 = v18 + 12;
  while (1)
  {
    uint64_t v223 = v131;
    sub_100485A94(v205 + v131 * v204, v18[84], type metadata accessor for OwnedBeaconGroup);
    uint64_t v133 = sub_1004D1434();
    unint64_t v134 = sub_10044A6F4(v133, v125);
    swift_bridgeObjectRelease();
    unint64_t v135 = v134 >> 62;
    if (v134 >> 62) {
      break;
    }
    uint64_t v136 = *(void *)((v134 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v136) {
      goto LABEL_31;
    }
LABEL_26:
    uint64_t v132 = v18[84];
    swift_bridgeObjectRelease();
    sub_100485AFC(v132, type metadata accessor for OwnedBeaconGroup);
LABEL_27:
    swift_bridgeObjectRelease();
LABEL_28:
    uint64_t v131 = v223 + 1;
    if (v223 + 1 == v206)
    {
      uint64_t v117 = swift_bridgeObjectRelease();
      uint64_t v121 = v198;
      goto LABEL_67;
    }
  }
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_26;
  }
LABEL_31:
  unint64_t typea = v134 & 0xC000000000000001;
  if ((v134 & 0xC000000000000001) != 0)
  {
    id v137 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v134 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_77;
    }
    id v137 = *(id *)(v134 + 32);
  }
  v231 = v137;
  swift_bridgeObjectRelease();
  if (v135)
  {
    swift_bridgeObjectRetain();
    uint64_t v138 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v138 = *(void *)((v134 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v139 = v18[84];
  unint64_t v140 = *(void *)(*(void *)(v139 + *(int *)(v202 + 40)) + 16);
  if (v140 >= 0x100) {
    return _assertionFailure(_:_:file:line:flags:)();
  }
  if (v138 != v140)
  {
    sub_100485AFC(v139, type metadata accessor for OwnedBeaconGroup);

    goto LABEL_27;
  }
  uint64_t v201 = v120;
  if (!v135)
  {
    uint64_t v141 = *(void *)((v134 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    id v142 = v231;
    if (v141) {
      goto LABEL_44;
    }
    goto LABEL_54;
  }
  swift_bridgeObjectRetain();
  id v143 = v231;
  uint64_t v141 = _CocoaArrayWrapper.endIndex.getter();
  if (!v141)
  {
LABEL_54:
    uint64_t v176 = v18[106];
    uint64_t v177 = v18[104];
    uint64_t v178 = v18[84];
    swift_bridgeObjectRelease_n();

    (*v200)(v176, v178 + *(int *)(v202 + 24), v177);
    id v179 = v231;
    uint64_t v180 = v18[54];
    char v181 = swift_isUniquelyReferenced_nonNull_native();
    v233[0] = v180;
    sub_10016BA48((uint64_t)v179, v176, v181);
    v18[54] = v233[0];
    swift_bridgeObjectRelease();
    (*v199)(v176, v177);

    sub_100485AFC(v178, type metadata accessor for OwnedBeaconGroup);
LABEL_59:
    uint64_t v125 = v203;
    uint64_t v120 = v201;
    goto LABEL_28;
  }
LABEL_44:
  uint64_t v144 = 0;
  id v216 = (id)v141;
  unint64_t v218 = v134;
  while (1)
  {
    id v145 = typea ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v134 + 8 * v144 + 32);
    uint64_t v146 = v145;
    if (__OFADD__(v144, 1)) {
      break;
    }
    id v226 = (id)(v144 + 1);
    uint64_t v147 = v18[90];
    uint64_t v148 = v18[88];
    uint64_t v149 = v18[86];
    v18[10] = sub_10001D4B0(0, (unint64_t *)&qword_101638DB0);
    v18[11] = &off_101609190;
    v18[7] = v231;
    id v150 = v231;
    v151 = v146;
    id v152 = [v146 timestamp];
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    v229 = v150;
    id v153 = [v150 timestamp];
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    LOBYTE(v153) = static Date.== infix(_:_:)();
    uint64_t v154 = v18;
    uint64_t v155 = v128;
    unint64_t v156 = *v211;
    (*v211)(v148, v149);
    v156(v147, v149);
    uint64_t v128 = v155;
    sub_10001D010(v155, (uint64_t)v214);
    if ((v153 & 1) == 0)
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v214);
      uint64_t v162 = (uint64_t)v207;
      sub_10001D010(v155, (uint64_t)v207);
      uint64_t v18 = v154;
      uint64_t v163 = (uint64_t)v209;
      unint64_t v164 = v151;
LABEL_56:
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v162);
      sub_10001D010(v128, v163);
      v170 = v229;
LABEL_57:
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v163);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v128);

LABEL_58:
      swift_bridgeObjectRelease();

      uint64_t v182 = v18[84];
      swift_bridgeObjectRelease();
      sub_100485AFC(v182, type metadata accessor for OwnedBeaconGroup);

      goto LABEL_59;
    }
    id v157 = v151;
    [v157 longitude];
    double v159 = v158;
    [*sub_10001CD44(v214, v154[30]) longitude];
    double v161 = v160;

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v214);
    uint64_t v162 = (uint64_t)v207;
    sub_10001D010(v155, (uint64_t)v207);
    uint64_t v18 = v154;
    uint64_t v163 = (uint64_t)v209;
    unint64_t v164 = v151;
    if (v159 != v161) {
      goto LABEL_56;
    }
    id v165 = v157;
    [v165 latitude];
    double v167 = v166;
    [*sub_10001CD44(v207, v18[20]) latitude];
    double v169 = v168;

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v207);
    sub_10001D010(v128, (uint64_t)v209);
    v170 = v229;
    if (v167 != v169) {
      goto LABEL_57;
    }
    id v171 = v165;
    [v171 horizontalAccuracy];
    double v173 = v172;
    [*sub_10001CD44(v209, v18[15]) horizontalAccuracy];
    double v175 = v174;

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v209);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v128);

    if (v173 != v175) {
      goto LABEL_58;
    }
    ++v144;
    unint64_t v134 = v218;
    if (v226 == v216) {
      goto LABEL_54;
    }
  }
  __break(1u);
LABEL_77:
  __break(1u);
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t sub_10045244C()
{
  uint64_t v1 = *(void *)(v0 + 1080);
  sub_10118B228((uint64_t)sub_1004838A0);
  *(void *)(v0 + 1168) = v1;
  if (v1)
  {
    swift_errorRelease();
    swift_release();
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    uint64_t v2 = sub_100453B98;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
    swift_task_dealloc();
    uint64_t v2 = sub_100452534;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100452534()
{
  v0[147] = v0[146];
  type metadata accessor for AnalyticsPublisher();
  v0[148] = swift_allocObject();
  swift_defaultActor_initialize();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[149] = v1;
  void *v1 = v0;
  v1[1] = sub_1004525F0;
  uint64_t v2 = v0[144];
  return sub_101196838(v2);
}

uint64_t sub_1004525F0()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_100452708, 0, 0);
}

uint64_t sub_100452708()
{
  uint64_t v145 = v0;
  uint64_t v1 = *(void **)(v0 + 1136);
  uint64_t v141 = (void *)(v0 + 296);
  uint64_t v2 = *(void *)(v0 + 792);
  uint64_t v3 = *(void *)(v0 + 760);
  (*(void (**)(void, void, void))(v0 + 1112))(*(void *)(v0 + 856), *(void *)(v0 + 896), *(void *)(v0 + 832));
  sub_100485A94(v2, v3, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
  id v4 = v1;
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  uint64_t v139 = v5;
  uint64_t v123 = v0;
  if (os_log_type_enabled(v5, v6))
  {
    unint64_t v135 = *(void **)(v0 + 1144);
    uint64_t v7 = *(void **)(v0 + 1136);
    uint64_t v112 = *(void (**)(uint64_t, uint64_t))(v0 + 1128);
    v126 = *(void (**)(uint64_t, uint64_t))(v0 + 1056);
    uint64_t v133 = *(void **)(v0 + 1016);
    uint64_t v8 = *(void *)(v0 + 856);
    os_log_type_t typea = v6;
    uint64_t v9 = *(void *)(v0 + 832);
    uint64_t v115 = *(void *)(v0 + 760);
    uint64_t v121 = *(void *)(v0 + 720);
    uint64_t v124 = *(void *)(v0 + 688);
    uint64_t v10 = swift_slowAlloc();
    v144[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 141559811;
    *(void *)(v0 + 504) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v10 + 12) = 2081;
    sub_100482848((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 512) = sub_1008FA0F0(v11, v12, v144);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v112(v8, v9);
    *(_WORD *)(v10 + 22) = 2160;
    *(void *)(v0 + 520) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v10 + 32) = 2081;
    uint64_t v13 = v0;
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 528) = sub_1008FA0F0(v14, v15, v144);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100485AFC(v115, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    *(_WORD *)(v10 + 42) = 2049;
    [v7 coordinate];
    *(void *)(v0 + 536) = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    *(_WORD *)(v10 + 52) = 2049;
    [v7 coordinate];
    *(void *)(v0 + 544) = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    *(_WORD *)(v10 + 62) = 2050;
    [v7 horizontalAccuracy];
    *(void *)(v0 + 552) = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    *(_WORD *)(v10 + 72) = 2082;
    id v19 = [v7 timestamp];
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    sub_100482848((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v22 = v21;
    v126(v121, v124);
    *(void *)(v0 + 560) = sub_1008FA0F0(v20, v22, v144);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();

    _os_log_impl((void *)&_mh_execute_header, v139, typea, "Filtered cached latest location returned to client for beacon %{private,mask.hash}s, locationUUID: %{private,mask.hash}s, lat: %{private}f, long: %{private}f, accuracy: %{public}f, timestamp: %{public}s.", (uint8_t *)v10, 0x52u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_release();
    swift_bridgeObjectRelease_n();
  }
  else
  {
    uint64_t v23 = *(void **)(v0 + 1144);
    uint64_t v24 = *(void **)(v0 + 1136);
    uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v0 + 1128);
    uint64_t v26 = *(void **)(v0 + 1016);
    uint64_t v27 = *(void *)(v0 + 856);
    uint64_t v28 = *(void *)(v0 + 832);
    uint64_t v29 = *(void *)(v0 + 760);
    swift_bridgeObjectRelease_n();

    v25(v27, v28);
    sub_100485AFC(v29, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);

    uint64_t v13 = v0;
    swift_release();
  }
  uint64_t v30 = *(void *)(v13 + 896);
  uint64_t v31 = *(void *)(v13 + 840);
  uint64_t v32 = *(void *)(v13 + 832);
  sub_100485AFC(*(void *)(v13 + 792), (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
  (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v30, v32);
  uint64_t v33 = *(void *)(v13 + 1176);
  uint64_t v34 = *(void *)(v13 + 1072);
  double v35 = *(double *)(v13 + 1048) + *(double *)(v13 + 992);
  uint64_t v36 = *(void *)(v13 + 968);
  uint64_t v37 = *(void *)(v13 + 1000) + 1;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v141);
  if (v37 != v36)
  {
    uint64_t v93 = *(void *)(v13 + 1000) + 1;
    *(void *)(v13 + 1000) = v93;
    *(double *)(v13 + 992) = v35;
    *(void *)(v13 + 984) = v34;
    *(void *)(v13 + 976) = v33;
    uint64_t v94 = *(void *)(v13 + 960);
    sub_10001D010(*(void *)(v13 + 600) + 40 * v93 + 32, (uint64_t)v141);
    uint64_t v95 = *(void *)(v13 + 320);
    uint64_t v96 = *(void *)(v13 + 328);
    sub_10001CD44(v141, v95);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v96 + 8) + 8) + 32))(v95);
    uint64_t v97 = *(void *)(v13 + 320);
    uint64_t v98 = *(void *)(v13 + 328);
    double v99 = sub_10001CD44(v141, v97);
    id v143 = (char *)&dword_101660EB8 + dword_101660EB8;
    id v100 = (void *)swift_task_alloc();
    *(void *)(v13 + 1008) = v100;
    *id v100 = v13;
    v100[1] = sub_10044F9F8;
    return ((uint64_t (*)(void *, uint64_t, uint64_t, uint64_t))v143)(v99, v94, v97, v98);
  }
  uint64_t v113 = v34;
  swift_bridgeObjectRelease();
  uint64_t v40 = *(void *)(v13 + 624);
  uint64_t v122 = *(void *)(v40 + 16);
  if (!v122)
  {
LABEL_47:
    Class v102 = (void *)(v13 + 408);
    *(void *)(v13 + 1200) = v33;
    *(void *)(v13 + 408) = 0;
    if (v113 <= 0) {
      goto LABEL_52;
    }
    double v103 = v35 / (double)v113;
    if ((~*(void *)&v103 & 0x7FF0000000000000) != 0)
    {
      if (v103 > -9.22337204e18)
      {
        if (v103 < 9.22337204e18)
        {
          *Class v102 = (uint64_t)v103;
LABEL_52:
          uint64_t v104 = v13 + 480;
          uint64_t v105 = v13 + 440;
          uint64_t v106 = *(void *)(v13 + 920);
          uint64_t v107 = *(void *)(v13 + 904);
          uint64_t v108 = v13;
          uint64_t v109 = *(void *)(v13 + 632);
          uint64_t v110 = *(void *)(v108 + 600);
          double v111 = (void *)swift_task_alloc();
          *(void *)(v108 + 1208) = v111;
          v111[2] = v110;
          v111[3] = v109;
          v111[4] = v107;
          v111[5] = v105;
          v111[6] = v104;
          v111[7] = v102;
          uint64_t v40 = (uint64_t)sub_1004535F8;
          uint64_t v38 = v106;
          uint64_t v39 = 0;
          return _swift_task_switch(v40, v38, v39);
        }
LABEL_60:
        __break(1u);
        return _swift_task_switch(v40, v38, v39);
      }
    }
    else
    {
      __break(1u);
    }
    __break(1u);
    goto LABEL_60;
  }
  uint64_t v142 = v13 + 56;
  double v41 = (void *)(v13 + 136);
  uint64_t v138 = (void *)(v13 + 216);
  uint64_t v120 = (uint64_t *)(v13 + 432);
  uint64_t v42 = *(void *)(v13 + 840);
  uint64_t v43 = *(void *)(v13 + 664);
  uint64_t v117 = *(void *)(v13 + 656);
  uint64_t v127 = (void (**)(uint64_t, uint64_t))(*(void *)(v13 + 696) + 8);
  uint64_t v114 = (void (**)(uint64_t, uint64_t))(v42 + 8);
  uint64_t v116 = (void (**)(uint64_t, uint64_t, uint64_t))(v42 + 16);
  uint64_t v118 = *(void *)(v43 + 72);
  unint64_t v119 = v40 + ((*(unsigned __int8 *)(v43 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v43 + 80));
  swift_bridgeObjectRetain();
  uint64_t v44 = 0;
  uint64_t v125 = (void *)(v13 + 96);
  while (1)
  {
    uint64_t v134 = v44;
    sub_100485A94(v119 + v44 * v118, *(void *)(v13 + 672), type metadata accessor for OwnedBeaconGroup);
    uint64_t v46 = sub_1004D1434();
    unint64_t v47 = sub_10044A6F4(v46, v120);
    *(void *)type = v33;
    swift_bridgeObjectRelease();
    unint64_t v48 = v47 >> 62;
    if (v47 >> 62) {
      break;
    }
    uint64_t v49 = *(void *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v49) {
      goto LABEL_12;
    }
LABEL_7:
    uint64_t v45 = *(void *)(v13 + 672);
    swift_bridgeObjectRelease();
    sub_100485AFC(v45, type metadata accessor for OwnedBeaconGroup);
LABEL_8:
    swift_bridgeObjectRelease();
LABEL_9:
    uint64_t v33 = *(void *)type;
    uint64_t v44 = v134 + 1;
    if (v134 + 1 == v122)
    {
      uint64_t v40 = swift_bridgeObjectRelease();
      goto LABEL_47;
    }
  }
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_7;
  }
LABEL_12:
  unint64_t v130 = v47 & 0xC000000000000001;
  if ((v47 & 0xC000000000000001) != 0)
  {
    id v50 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_56;
    }
    id v50 = *(id *)(v47 + 32);
  }
  unint64_t v140 = v50;
  swift_bridgeObjectRelease();
  if (v48)
  {
    swift_bridgeObjectRetain();
    uint64_t v51 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v51 = *(void *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v52 = *(void *)(v13 + 672);
  unint64_t v53 = *(void *)(*(void *)(v52 + *(int *)(v117 + 40)) + 16);
  if (v53 >= 0x100) {
    return _assertionFailure(_:_:file:line:flags:)();
  }
  if (v51 != v53)
  {
    sub_100485AFC(v52, type metadata accessor for OwnedBeaconGroup);

    goto LABEL_8;
  }
  if (!v48)
  {
    uint64_t v54 = *(void *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    id v55 = v140;
    if (v54) {
      goto LABEL_25;
    }
    goto LABEL_35;
  }
  swift_bridgeObjectRetain();
  id v56 = v140;
  uint64_t v54 = _CocoaArrayWrapper.endIndex.getter();
  if (!v54)
  {
LABEL_35:
    uint64_t v86 = *(void *)(v13 + 848);
    uint64_t v87 = *(void *)(v13 + 832);
    uint64_t v88 = *(void *)(v13 + 672);
    swift_bridgeObjectRelease_n();

    (*v116)(v86, v88 + *(int *)(v117 + 24), v87);
    id v89 = v140;
    uint64_t v90 = *(void *)(v123 + 432);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v144[0] = v90;
    sub_10016BA48((uint64_t)v89, v86, isUniquelyReferenced_nonNull_native);
    *(void *)(v123 + 432) = v144[0];
    swift_bridgeObjectRelease();
    (*v114)(v86, v87);

    uint64_t v13 = v123;
    sub_100485AFC(v88, type metadata accessor for OwnedBeaconGroup);
    goto LABEL_9;
  }
LABEL_25:
  uint64_t v57 = 0;
  uint64_t v128 = v54;
  unint64_t v129 = v47;
  while (1)
  {
    id v58 = v130 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v47 + 8 * v57 + 32);
    double v59 = v58;
    if (__OFADD__(v57, 1)) {
      break;
    }
    uint64_t v136 = v57 + 1;
    uint64_t v60 = *(void *)(v13 + 720);
    uint64_t v61 = *(void *)(v13 + 704);
    uint64_t v62 = *(void *)(v13 + 688);
    *(void *)(v13 + 80) = sub_10001D4B0(0, (unint64_t *)&qword_101638DB0);
    *(void *)(v13 + 88) = &off_101609190;
    *(void *)(v13 + 56) = v140;
    id v63 = v140;
    id v64 = [v59 timestamp];
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    id v137 = v63;
    id v65 = [v63 timestamp];
    static Date._unconditionallyBridgeFromObjectiveC(_:)();

    LOBYTE(v65) = static Date.== infix(_:_:)();
    uint64_t v66 = v13;
    uint64_t v67 = *v127;
    (*v127)(v61, v62);
    v67(v60, v62);
    sub_10001D010(v142, (uint64_t)v138);
    if ((v65 & 1) == 0)
    {
      uint64_t v68 = v59;
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v138);
      sub_10001D010(v142, (uint64_t)v41);
      uint64_t v13 = v66;
      uint64_t v74 = (uint64_t)v125;
LABEL_37:
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v41);
      sub_10001D010(v142, v74);
LABEL_38:
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v74);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v142);
      uint64_t v85 = v137;

LABEL_39:
      swift_bridgeObjectRelease();

      uint64_t v92 = *(void *)(v13 + 672);
      swift_bridgeObjectRelease();
      sub_100485AFC(v92, type metadata accessor for OwnedBeaconGroup);

      goto LABEL_9;
    }
    uint64_t v68 = v59;
    id v69 = v59;
    [v69 longitude];
    double v71 = v70;
    [*(id *)(*sub_10001CD44(v138, *(void *)(v66 + 240))) longitude];
    double v73 = v72;

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v138);
    sub_10001D010(v142, (uint64_t)v41);
    uint64_t v13 = v66;
    uint64_t v74 = (uint64_t)v125;
    unint64_t v47 = v129;
    if (v71 != v73) {
      goto LABEL_37;
    }
    id v75 = v69;
    [v75 latitude];
    double v77 = v76;
    [*(id *)(*sub_10001CD44(v41, *(void *)(v13 + 160))) latitude];
    double v79 = v78;

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v41);
    sub_10001D010(v142, (uint64_t)v125);
    if (v77 != v79) {
      goto LABEL_38;
    }
    id v80 = v75;
    [v80 horizontalAccuracy];
    double v82 = v81;
    [*(id *)(*sub_10001CD44(v125, *(void *)(v13 + 120))) horizontalAccuracy];
    double v84 = v83;

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v125);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v142);
    uint64_t v85 = v137;

    if (v82 != v84) {
      goto LABEL_39;
    }
    ++v57;
    if (v136 == v128) {
      goto LABEL_35;
    }
  }
  __break(1u);
LABEL_56:
  __break(1u);
  return _assertionFailure(_:_:file:line:flags:)();
}

uint64_t sub_1004535F8()
{
  uint64_t v1 = *(void *)(v0 + 1200);
  sub_10118B228((uint64_t)sub_100483890);
  if (v1) {
    swift_errorRelease();
  }
  uint64_t v2 = *(void *)(v0 + 920);
  swift_task_dealloc();
  return _swift_task_switch(sub_10045369C, v2, 0);
}

uint64_t sub_10045369C()
{
  uint64_t v1 = (void (*)(uint64_t, void, uint64_t, uint64_t))v0[117];
  uint64_t v2 = v0[116];
  uint64_t v3 = v0[115];
  uint64_t v4 = v0[103];
  uint64_t v5 = v0[102];
  static DispatchTime.now()();
  v1(v4, 0, 1, v2);
  sub_10001D608(v4, v5, &qword_101639428);
  uint64_t v6 = v3 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime;
  swift_beginAccess();
  sub_100062604(v5, v6, &qword_101639428);
  swift_endAccess();
  return _swift_task_switch(sub_1004537A0, 0, 0);
}

uint64_t sub_1004537A0()
{
  type metadata accessor for AnalyticsPublisher();
  v0[152] = swift_allocObject();
  swift_defaultActor_initialize();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[153] = v1;
  void *v1 = v0;
  v1[1] = sub_100453854;
  uint64_t v2 = v0[115];
  return sub_101196838(v2);
}

uint64_t sub_100453854()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_10045396C, 0, 0);
}

uint64_t sub_10045396C()
{
  uint64_t v1 = v0[113];
  uint64_t v2 = v0[105];
  uint64_t v3 = v0[104];
  uint64_t v4 = (void (*)(uint64_t))v0[80];
  uint64_t v5 = swift_bridgeObjectRetain();
  v4(v5);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v6 = (uint64_t (*)(void))v0[1];
  return v6();
}

uint64_t sub_100453B98()
{
  v0[147] = 0;
  type metadata accessor for AnalyticsPublisher();
  v0[148] = swift_allocObject();
  swift_defaultActor_initialize();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[149] = v1;
  void *v1 = v0;
  v1[1] = sub_1004525F0;
  uint64_t v2 = v0[144];
  return sub_101196838(v2);
}

void sub_100453C50(uint64_t a1, uint64_t a2)
{
  uint64_t v42 = type metadata accessor for BeaconEstimatedLocation();
  uint64_t v5 = __chkstk_darwin(v42);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v45 = (uint64_t)&v37 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v44 = (uint64_t)&v37 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v43 = (uint64_t)&v37 - v13;
  __chkstk_darwin(v12);
  unint64_t v15 = (char *)&v37 - v14;
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  id v19 = (char *)&v37 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101636B10 != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  sub_100010324(v20, (uint64_t)qword_10170DEB8);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, a2, v16);
  sub_100485A94(a1, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
  sub_100485A94(a1, v43, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
  sub_100485A94(a1, v44, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
  sub_100485A94(a1, v45, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
  sub_100485A94(a1, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
  unint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.default.getter();
  int v23 = v22;
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v24 = swift_slowAlloc();
    uint64_t v40 = swift_slowAlloc();
    uint64_t v47 = v40;
    *(_DWORD *)uint64_t v24 = 141559811;
    uint64_t v46 = 1752392040;
    os_log_t v39 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v24 + 12) = 2081;
    uint64_t v41 = v2;
    sub_100482848((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v37 = v7;
    int v38 = v23;
    uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v46 = sub_1008FA0F0(v25, v26, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    *(_WORD *)(v24 + 22) = 2160;
    uint64_t v46 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v24 + 32) = 2081;
    uint64_t v27 = (int *)v42;
    uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v46 = sub_1008FA0F0(v28, v29, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100485AFC((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    *(_WORD *)(v24 + 42) = 2049;
    uint64_t v30 = v43;
    uint64_t v46 = *(void *)(v43 + v27[7]);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_100485AFC(v30, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    *(_WORD *)(v24 + 52) = 2049;
    uint64_t v31 = v44;
    uint64_t v46 = *(void *)(v44 + v27[8]);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_100485AFC(v31, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    *(_WORD *)(v24 + 62) = 2050;
    uint64_t v32 = v45;
    uint64_t v46 = *(void *)(v45 + v27[9]);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_100485AFC(v32, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    *(_WORD *)(v24 + 72) = 2082;
    uint64_t v33 = (uint64_t)v37;
    type metadata accessor for Date();
    sub_100482848((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
    uint64_t v34 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v46 = sub_1008FA0F0(v34, v35, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100485AFC(v33, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    os_log_t v36 = v39;
    _os_log_impl((void *)&_mh_execute_header, v39, (os_log_type_t)v38, "Filtering the following latest location for beacon %{private,mask.hash}s, locationUUID: %{private,mask.hash}s, lat: %{private}f, long: %{private}f, accuracy: %{public}f, timestamp: %{public}s.", (uint8_t *)v24, 0x52u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    sub_100485AFC((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    sub_100485AFC(v43, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    sub_100485AFC(v44, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    sub_100485AFC(v45, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    sub_100485AFC((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
  }
}

id sub_100454298(double a1, double a2, double a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10, void *a11, void *a12)
{
  uint64_t v56 = a7;
  uint64_t v21 = type metadata accessor for UUID();
  uint64_t v51 = *(void *)(v21 - 8);
  uint64_t v52 = v21;
  __chkstk_darwin(v21);
  id v50 = (char *)&v49 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000588C(&qword_10163C5D0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10135C910;
  *(void *)(inited + 32) = 0x496E6F6973736573;
  *(void *)(inited + 40) = 0xE900000000000044;
  UUID.uuidString.getter();
  NSString v24 = String._bridgeToObjectiveC()();
  id result = (id)swift_bridgeObjectRelease();
  *(void *)(inited + 48) = v24;
  *(unsigned char *)(inited + 56) = 0;
  *(void *)(inited + 64) = 0x6E6F697461636F6CLL;
  *(void *)(inited + 72) = 0xEF79636E65636552;
  if ((~*(void *)&a1 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_15;
  }
  if (a1 <= -9.22337204e18)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (a1 >= 9.22337204e18)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v54 = a12;
  id v55 = a11;
  id v26 = objc_allocWithZone((Class)NSNumber);
  unint64_t v53 = a10;
  *(void *)(inited + 80) = [v26 initWithInteger:(uint64_t)a1];
  *(unsigned char *)(inited + 88) = 0;
  *(void *)(inited + 96) = 0xD000000000000010;
  *(void *)(inited + 104) = 0x80000001013FD2E0;
  [a5 horizontalAccuracy];
  *(void *)(inited + 112) = [objc_allocWithZone((Class)NSNumber) initWithDouble:v27];
  *(unsigned char *)(inited + 120) = 0;
  strcpy((char *)(inited + 128), "locationSource");
  *(unsigned char *)(inited + 143) = -18;
  uint64_t v28 = type metadata accessor for BeaconEstimatedLocation();
  sub_1011A7C44(*(unsigned char *)(a6 + *(int *)(v28 + 44)));
  NSString v29 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  *(void *)(inited + 144) = v29;
  *(unsigned char *)(inited + 152) = 0;
  *(void *)(inited + 160) = 0xD000000000000013;
  *(void *)(inited + 168) = 0x80000001013FD300;
  *(void *)(inited + 176) = [objc_allocWithZone((Class)NSNumber) initWithInteger:*(void *)(v56 + 16)];
  *(unsigned char *)(inited + 184) = 0;
  *(void *)(inited + 192) = 0xD000000000000010;
  *(void *)(inited + 200) = 0x80000001013FD320;
  *(void *)(inited + 208) = [objc_allocWithZone((Class)NSNumber) initWithInteger:*(void *)(a8 + 16)];
  *(unsigned char *)(inited + 216) = 0;
  *(void *)(inited + 224) = 0xD000000000000011;
  *(void *)(inited + 232) = 0x80000001013FD340;
  *(void *)(inited + 240) = [objc_allocWithZone((Class)NSNumber) initWithInteger:*a9];
  *(unsigned char *)(inited + 248) = 0;
  *(void *)(inited + 256) = 0xD000000000000010;
  *(void *)(inited + 264) = 0x80000001013FD360;
  uint64_t v30 = v54;
  *(void *)(inited + 272) = [objc_allocWithZone((Class)NSNumber) initWithInteger:*v53];
  *(unsigned char *)(inited + 280) = 0;
  *(void *)(inited + 288) = 0xD00000000000001ALL;
  *(void *)(inited + 296) = 0x80000001013FD380;
  *(void *)(inited + 304) = [objc_allocWithZone((Class)NSNumber) initWithDouble:a2];
  *(unsigned char *)(inited + 312) = 0;
  *(void *)(inited + 320) = 0xD000000000000024;
  *(void *)(inited + 328) = 0x80000001013FD3A0;
  *(void *)(inited + 336) = [objc_allocWithZone((Class)NSNumber) initWithDouble:a3];
  *(unsigned char *)(inited + 344) = 0;
  *(void *)(inited + 352) = 0x6F43656372756F73;
  *(void *)(inited + 360) = 0xEB00000000746E75;
  *(void *)(inited + 368) = [objc_allocWithZone((Class)NSNumber) initWithInteger:[v55 count]];
  *(unsigned char *)(inited + 376) = 0;
  *(void *)(inited + 384) = 0xD000000000000013;
  *(void *)(inited + 392) = 0x80000001013FD3D0;
  id result = [v30 systemVersion];
  if (!result)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  *(void *)(inited + 400) = result;
  *(unsigned char *)(inited + 408) = 0;
  strcpy((char *)(inited + 416), "batteryLevel");
  *(unsigned char *)(inited + 429) = 0;
  *(_WORD *)(inited + 430) = -5120;
  *(void *)(inited + 432) = [objc_allocWithZone((Class)NSNumber) initWithInteger:[v30 batteryLevel]];
  *(unsigned char *)(inited + 440) = 0;
  *(void *)(inited + 448) = 0xD00000000000001BLL;
  *(void *)(inited + 456) = 0x80000001013FD3F0;
  id result = [v30 systemVersion];
  if (!result)
  {
LABEL_18:
    __break(1u);
    return result;
  }
  *(void *)(inited + 464) = result;
  *(unsigned char *)(inited + 472) = 0;
  *(void *)(inited + 480) = 0x6563697665447369;
  *(void *)(inited + 488) = 0xEF6465687361654CLL;
  id v31 = SPBeaconTaskNameBeginLeashing;
  id v32 = [v30 taskInformation];
  type metadata accessor for SPBeaconTaskName(0);
  sub_10001D4B0(0, &qword_101653D80);
  sub_100482848(&qword_1016387E0, type metadata accessor for SPBeaconTaskName);
  uint64_t v33 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  if (*(void *)(v33 + 16) && (uint64_t v34 = sub_1007248DC(v31), (v35 & 1) != 0))
  {
    id v36 = *(id *)(*(void *)(v33 + 56) + 8 * v34);

    swift_bridgeObjectRelease();
    id v37 = [v36 state];

    BOOL v38 = v37 == 0;
  }
  else
  {

    swift_bridgeObjectRelease();
    BOOL v38 = 0;
  }
  *(void *)(inited + 496) = v38;
  *(unsigned char *)(inited + 504) = 1;
  *(void *)(inited + 512) = 0xD000000000000011;
  *(void *)(inited + 520) = 0x80000001013F72A0;
  *(void *)(inited + 528) = [v30 connected];
  *(unsigned char *)(inited + 536) = 1;
  unint64_t v39 = sub_10092E03C(inited);
  id v40 = [self sharedInstance];
  unsigned int v41 = [v40 isInternalBuild];

  if (v41)
  {
    id v42 = [v30 identifier];
    uint64_t v43 = v50;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    UUID.uuidString.getter();
    (*(void (**)(char *, uint64_t))(v51 + 8))(v43, v52);
    NSString v44 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v57 = v39;
    sub_10016D430((uint64_t)v44, 0, 0x6544646572696170, 0xEE00444965636976, isUniquelyReferenced_nonNull_native);
    unint64_t v39 = v57;
    swift_bridgeObjectRelease();
    id v46 = [v30 serialNumber];
    if (v46)
    {
      uint64_t v47 = (uint64_t)v46;
      char v48 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v57 = v39;
      sub_10016D430(v47, 0, 0xD000000000000018, 0x80000001013F72C0, v48);
      unint64_t v39 = v57;
      swift_bridgeObjectRelease();
    }
  }
  return (id)v39;
}

unint64_t sub_100454A70(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, void *a6)
{
  sub_10000588C(&qword_10163C5D0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10134BFA0;
  *(void *)(inited + 32) = 0xD000000000000013;
  *(void *)(inited + 40) = 0x80000001013FD410;
  *(void *)(inited + 48) = [objc_allocWithZone((Class)NSNumber) initWithInteger:*(void *)(a1 + 16)];
  *(unsigned char *)(inited + 56) = 0;
  *(void *)(inited + 64) = 0xD00000000000001CLL;
  *(void *)(inited + 72) = 0x80000001013FD430;
  *(void *)(inited + 80) = [objc_allocWithZone((Class)NSNumber) initWithInteger:*(void *)(a2 + 16)];
  *(unsigned char *)(inited + 88) = 0;
  *(void *)(inited + 96) = 0x496E6F6973736573;
  *(void *)(inited + 104) = 0xE900000000000044;
  UUID.uuidString.getter();
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  *(void *)(inited + 112) = v12;
  *(unsigned char *)(inited + 120) = 0;
  *(void *)(inited + 128) = 0xD000000000000012;
  *(void *)(inited + 136) = 0x80000001013FD450;
  *(void *)(inited + 144) = [objc_allocWithZone((Class)NSNumber) initWithInteger:*a4];
  *(unsigned char *)(inited + 152) = 0;
  *(void *)(inited + 160) = 0xD00000000000001BLL;
  *(void *)(inited + 168) = 0x80000001013FD470;
  *(void *)(inited + 176) = [objc_allocWithZone((Class)NSNumber) initWithInteger:*a5];
  *(unsigned char *)(inited + 184) = 0;
  strcpy((char *)(inited + 192), "averageRecency");
  *(unsigned char *)(inited + 207) = -18;
  *(void *)(inited + 208) = [objc_allocWithZone((Class)NSNumber) initWithInteger:*a6];
  *(unsigned char *)(inited + 216) = 0;
  return sub_10092E03C(inited);
}

uint64_t sub_100454C68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  NSString v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[1] = *(void *)(a2 + 88);
  uint64_t v13 = (void *)swift_allocObject();
  v13[2] = a1;
  v13[3] = a2;
  v13[4] = a3;
  aBlock[4] = sub_1004835A0;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015C40B0;
  uint64_t v14 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  static DispatchQoS.unspecified.getter();
  uint64_t aBlock[7] = _swiftEmptyArrayStorage;
  sub_100482848((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v17);
  return swift_release();
}

uint64_t sub_100454F4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  Transaction.capture()();
  id v5 = [self mainBundle];
  id v6 = [v5 bundleIdentifier];

  if (v6)
  {
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v9 = v8;
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v9 = 0;
  }
  uint64_t v10 = sub_10080D1A8();
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v11 = sub_1010ABA34(v19);
  swift_bridgeObjectRelease();
  uint64_t My = type metadata accessor for Feature.FindMy();
  uint64_t v22 = My;
  uint64_t v23 = sub_100482848((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
  uint64_t v13 = sub_10001D958(&v19);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v13, enum case for Feature.FindMy.networkScalingImprovements(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v19);
  uint64_t v19 = v11;
  char v20 = 0;
  uint64_t v21 = &off_1015A15F8;
  LOBYTE(v22) = 0;
  uint64_t v23 = v7;
  uint64_t v24 = v9;
  uint64_t v25 = v10;
  char v26 = My & 1;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  char v29 = 1;
  OS_dispatch_queue.sync<A>(execute:)();
  sub_1010AB8E8(v18);
  double v15 = v14;
  swift_bridgeObjectRelease();
  unint64_t v16 = sub_10092DC10((uint64_t)_swiftEmptyArrayStorage);
  sub_100476B84(a3, (uint64_t)&v19, 0, v16, a2, v15, 60.0);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1004551F8(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v211 = a2;
  uint64_t v3 = (void *)type metadata accessor for UUID();
  uint64_t v224 = *(v3 - 1);
  uint64_t v4 = __chkstk_darwin(v3);
  unint64_t v6 = (unint64_t)&v198 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)&v198 - v8;
  __chkstk_darwin(v7);
  v209 = (char *)&v198 - v10;
  uint64_t v11 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v11 - 8);
  unint64_t v205 = (char *)&v198 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000588C(&qword_1016456F8);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v215 = (char *)&v198 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  unint64_t v17 = (unint64_t)&v198 - v16;
  uint64_t v220 = type metadata accessor for Date();
  uint64_t v223 = *(void *)(v220 - 8);
  uint64_t v18 = __chkstk_darwin(v220);
  v217 = (char *)&v198 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  v219 = (char *)&v198 - v20;
  uint64_t v21 = sub_10000588C((uint64_t *)&unk_101653D50);
  __chkstk_darwin(v21 - 8);
  *(void *)&long long v226 = (char *)&v198 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v227 = (char *)type metadata accessor for SharedBeaconRecord(0);
  uint64_t v202 = (uint64_t (*)())*((void *)v227 - 1);
  __chkstk_darwin(v227);
  unint64_t v225 = (unint64_t)&v198 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Configuration = type metadata accessor for LocationFetchConfiguration();
  uint64_t v208 = *(void **)(Configuration - 8);
  uint64_t v24 = __chkstk_darwin(Configuration);
  uint64_t v212 = (uint64_t)&v198 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v210 = v25;
  __chkstk_darwin(v24);
  v207 = (char *)&v198 - v26;
  if (qword_101636B10 != -1) {
    goto LABEL_145;
  }
LABEL_2:
  uint64_t v27 = type metadata accessor for Logger();
  uint64_t v28 = sub_100010324(v27, (uint64_t)qword_10170DEB8);
  sub_10048250C((uint64_t)a1);
  sub_10048250C((uint64_t)a1);
  id v229 = (id)v28;
  char v29 = Logger.logObject.getter();
  os_log_type_t v30 = static os_log_type_t.default.getter();
  BOOL v31 = os_log_type_enabled(v29, v30);
  v221 = (unsigned __int8 *)v17;
  if (v31)
  {
    id v32 = (uint8_t *)swift_slowAlloc();
    unint64_t v228 = swift_slowAlloc();
    *(void *)&long long aBlock = v228;
    *(_DWORD *)id v32 = 136446210;
    v222 = v32 + 4;
    uint64_t v33 = v32;
    sub_10048250C((uint64_t)a1);
    uint64_t v34 = sub_10113AD2C();
    unint64_t v36 = v35;
    sub_10048257C((uint64_t)a1);
    uint64_t v238 = sub_1008FA0F0(v34, v36, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10048257C((uint64_t)a1);
    sub_10048257C((uint64_t)a1);
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "One-shot location request with context %{public}s.", v33, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10048257C((uint64_t)a1);
    sub_10048257C((uint64_t)a1);
  }

  uint64_t v37 = (uint64_t)a1;
  swift_retain();
  sub_10000588C(&qword_101639158);
  unsafeFromAsyncTask<A>(_:)();
  swift_release();
  uint64_t v38 = aBlock;
  id v206 = [self currentConnection];
  LODWORD(v216) = *a1;
  if (v216 == 2)
  {
    sub_100A6B254();
    sub_1008C065C();
  }
  uint64_t v39 = *(void *)(*((void *)a1 + 1) + 16);
  uint64_t v204 = v38;
  v213 = a1;
  if (v39)
  {
    uint64_t v40 = v211;
    swift_retain();
    uint64_t v41 = swift_bridgeObjectRetain();
    id v42 = sub_10047B718(v41, v40);
    swift_bridgeObjectRelease();
    swift_release();
    swift_retain();
    uint64_t v43 = sub_100478FA0((uint64_t)v42, v40);
    unint64_t v228 = 0;
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v44 = swift_bridgeObjectRetain();
    uint64_t v45 = sub_1011591E8(v44);
    swift_bridgeObjectRelease();
    id v46 = sub_100659D50((uint64_t)v43, v45, 0, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    int64_t v47 = v46[2];
    if (v47)
    {
      uint64_t v238 = (uint64_t)_swiftEmptyArrayStorage;
      sub_1000B7034(0, v47, 0);
      uint64_t v48 = (uint64_t)(v46 + 4);
      uint64_t v49 = (void *)v238;
      do
      {
        sub_10001D010(v48, (uint64_t)&aBlock);
        id v50 = v232;
        uint64_t v51 = v233;
        sub_10001CD44(&aBlock, (uint64_t)v232);
        (*(void (**)(void *))(*(void *)(*((void *)v51 + 1) + 8) + 32))(v50);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&aBlock);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000B7034(0, v49[2] + 1, 1);
          uint64_t v49 = (void *)v238;
        }
        unint64_t v53 = v49[2];
        unint64_t v52 = v49[3];
        if (v53 >= v52 >> 1)
        {
          sub_1000B7034(v52 > 1, v53 + 1, 1);
          uint64_t v49 = (void *)v238;
        }
        v49[2] = v53 + 1;
        (*(void (**)(unint64_t, unint64_t, void *))(v224 + 32))((unint64_t)v49+ ((*(unsigned __int8 *)(v224 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v224 + 80))+ *(void *)(v224 + 72) * v53, v6, v3);
        uint64_t v238 = (uint64_t)v49;
        v48 += 40;
        --v47;
      }
      while (v47);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v49 = _swiftEmptyArrayStorage;
    }
    uint64_t v37 = (uint64_t)v213;
    unint64_t v64 = v228;
  }
  else
  {
    uint64_t v54 = sub_100AD2AD4();
    uint64_t v55 = swift_bridgeObjectRetain();
    uint64_t v56 = sub_1011591E8(v55);
    swift_bridgeObjectRelease();
    unint64_t v57 = sub_100659D50(v54, v56, 0, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    int64_t v58 = v57[2];
    if (v58)
    {
      uint64_t v238 = (uint64_t)_swiftEmptyArrayStorage;
      sub_1000B7034(0, v58, 0);
      uint64_t v59 = (uint64_t)(v57 + 4);
      uint64_t v49 = (void *)v238;
      do
      {
        sub_10001D010(v59, (uint64_t)&aBlock);
        uint64_t v60 = v232;
        uint64_t v61 = v233;
        sub_10001CD44(&aBlock, (uint64_t)v232);
        (*(void (**)(void *))(*(void *)(*((void *)v61 + 1) + 8) + 32))(v60);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&aBlock);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000B7034(0, v49[2] + 1, 1);
          uint64_t v49 = (void *)v238;
        }
        unint64_t v63 = v49[2];
        unint64_t v62 = v49[3];
        if (v63 >= v62 >> 1)
        {
          sub_1000B7034(v62 > 1, v63 + 1, 1);
          uint64_t v49 = (void *)v238;
        }
        v49[2] = v63 + 1;
        (*(void (**)(unint64_t, char *, void *))(v224 + 32))((unint64_t)v49+ ((*(unsigned __int8 *)(v224 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v224 + 80))+ *(void *)(v224 + 72) * v63, v9, v3);
        uint64_t v238 = (uint64_t)v49;
        v59 += 40;
        --v58;
      }
      while (v58);
      swift_bridgeObjectRelease();
      unint64_t v64 = 0;
      uint64_t v37 = (uint64_t)v213;
    }
    else
    {
      swift_bridgeObjectRelease();
      unint64_t v64 = 0;
      uint64_t v49 = _swiftEmptyArrayStorage;
    }
  }
  v214 = *(unint64_t **)(v37 + 32);
  uint64_t v65 = v211;
  swift_retain();
  uint64_t v66 = swift_bridgeObjectRetain();
  uint64_t v67 = sub_1004792DC(v66, v65);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v68 = sub_10047BBC4((uint64_t)v67);
  swift_bridgeObjectRelease();
  id v69 = v207;
  uint64_t v70 = sub_10113A364((char)v216, (uint64_t)v207);
  BOOL v71 = v69[1] == 1;
  v222 = v3;
  unint64_t v6 = (unint64_t)v227;
  if (!v71) {
    goto LABEL_45;
  }
  double v72 = _swiftEmptyArrayStorage;
  v237[0] = (uint64_t)_swiftEmptyArrayStorage;
  a1 = (unsigned __int8 *)v68[2];
  swift_bridgeObjectRetain();
  if (!a1) {
    goto LABEL_44;
  }
  unint64_t v218 = v64;
  unint64_t v17 = 0;
  unint64_t v228 = (unint64_t)v68;
  uint64_t v73 = (uint64_t)(v68 + 4);
  uint64_t v74 = (void (**)(char *, uint64_t, uint64_t, unint64_t))((char *)v202 + 56);
  uint64_t v9 = (char *)v226;
  do
  {
    if (v17 >= *(void *)(v228 + 16)) {
      goto LABEL_144;
    }
    sub_10001D010(v73, (uint64_t)&aBlock);
    sub_10001D010((uint64_t)&aBlock, (uint64_t)&v238);
    sub_10000588C((uint64_t *)&unk_10164DBF0);
    char v75 = swift_dynamicCast();
    double v76 = *v74;
    if (v75)
    {
      v76(v9, 0, 1, v6);
      uint64_t v77 = v225;
      sub_100485510((uint64_t)v9, v225, type metadata accessor for SharedBeaconRecord);
      int v78 = *(unsigned __int8 *)(v77 + *(int *)(v6 + 64));
      sub_100485AFC(v77, type metadata accessor for SharedBeaconRecord);
      if (v78 != 1)
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&aBlock);
        goto LABEL_32;
      }
    }
    else
    {
      v76(v9, 1, 1, v6);
      sub_10001DAB4((uint64_t)v9, (uint64_t *)&unk_101653D50);
    }
    sub_10001CEB0(&aBlock, (uint64_t)&v238);
    uint64_t v79 = v237[0];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_1000B7570(0, *(void *)(v79 + 16) + 1, 1);
      uint64_t v79 = v237[0];
    }
    unint64_t v81 = *(void *)(v79 + 16);
    unint64_t v80 = *(void *)(v79 + 24);
    if (v81 >= v80 >> 1) {
      sub_1000B7570(v80 > 1, v81 + 1, 1);
    }
    uint64_t v82 = v239;
    uint64_t v83 = (uint64_t)v240;
    uint64_t v84 = sub_1000BD078((uint64_t)&v238, v239);
    __chkstk_darwin(v84);
    uint64_t v86 = (char *)&v198 - ((v85 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v87 + 16))(v86);
    sub_1006985B0(v81, (uint64_t)v86, v237, v82, v83);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v238);
    uint64_t v3 = v222;
    uint64_t v9 = (char *)v226;
    unint64_t v6 = (unint64_t)v227;
LABEL_32:
    ++v17;
    v73 += 40;
  }
  while (a1 != (unsigned __int8 *)v17);
  double v72 = (void *)v237[0];
  uint64_t v37 = (uint64_t)v213;
  unint64_t v64 = v218;
  uint64_t v68 = (void *)v228;
LABEL_44:
  swift_bridgeObjectRelease();
  sub_10044E19C((uint64_t)v72);
  uint64_t v70 = swift_release();
  id v69 = v207;
LABEL_45:
  if (*v69 != 1)
  {
    unint64_t v218 = v64;
    swift_bridgeObjectRelease();
    uint64_t v202 = 0;
    uint64_t Configuration = 0;
LABEL_60:
    uint64_t v116 = v219;
    uint64_t v117 = static Date.distantPast.getter();
    __chkstk_darwin(v117);
    uint64_t v118 = v211;
    unint64_t v119 = v214;
    *(&v198 - 4) = v211;
    *(&v198 - 3) = (uint64_t)v119;
    *(&v198 - 2) = (uint64_t)v116;
    swift_bridgeObjectRetain();
    uint64_t v120 = (char *)v218;
    uint64_t v121 = sub_1000D137C((uint64_t)_swiftEmptyDictionarySingleton, (void (*)(uint64_t *, char *))sub_100482698, (uint64_t)(&v198 - 6), (uint64_t)v49);
    swift_bridgeObjectRelease_n();
    uint64_t v122 = *(void (**)(char *, char *))(v223 + 8);
    v223 += 8;
    id v216 = v122;
    v122(v116, (char *)v220);
    v242 = _swiftEmptyDictionarySingleton;
    swift_retain();
    unint64_t v6 = sub_100478CC8((uint64_t)_swiftEmptyDictionarySingleton, v121, v118, (uint64_t *)&v242);
    v227 = v120;
    swift_release();
    uint64_t v241 = v6;
    swift_bridgeObjectRelease();
    uint64_t v9 = v215;
    a1 = v221;
    if (*(unsigned char *)(v37 + 56) & 1) != 0 || (*(unsigned char *)(v37 + 57))
    {
      sub_10048250C(v37);
      sub_10048250C(v37);
      if (v206)
      {
        id v123 = v206;
        uint64_t v124 = Logger.logObject.getter();
        os_log_type_t v125 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v124, v125))
        {
          id v229 = v123;
          uint64_t v126 = swift_slowAlloc();
          *(void *)&long long aBlock = swift_slowAlloc();
          *(_DWORD *)uint64_t v126 = 141558275;
          uint64_t v238 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v126 + 12) = 2081;
          if (*(void *)(v37 + 48))
          {
            uint64_t v127 = *(void *)(v37 + 40);
            unint64_t v128 = *(void *)(v37 + 48);
          }
          else
          {
            uint64_t v127 = 0x6E776F6E6B6E75;
            unint64_t v128 = 0xE700000000000000;
          }
          swift_bridgeObjectRetain();
          uint64_t v238 = sub_1008FA0F0(v127, v128, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10048257C(v37);
          sub_10048257C(v37);
          _os_log_impl((void *)&_mh_execute_header, v124, v125, "Subscribing context for %{private,mask.hash}s.", (uint8_t *)v126, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          uint64_t v3 = v222;
          a1 = v221;
          id v123 = v229;
        }
        else
        {
          sub_10048257C(v37);
          sub_10048257C(v37);

          a1 = v221;
        }
        unint64_t v6 = *(void *)(v211 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_locationFetchService);
        sub_100474C70(v123, v37);
        type metadata accessor for Transaction();
        uint64_t v135 = swift_allocObject();
        *(void *)(v135 + 16) = v6;
        long long v136 = *(_OWORD *)(v37 + 48);
        *(_OWORD *)(v135 + 56) = *(_OWORD *)(v37 + 32);
        *(_OWORD *)(v135 + 72) = v136;
        *(_OWORD *)(v135 + 88) = *(_OWORD *)(v37 + 64);
        *(_OWORD *)(v135 + 97) = *(_OWORD *)(v37 + 73);
        long long v137 = *(_OWORD *)(v37 + 16);
        *(_OWORD *)(v135 + 24) = *(_OWORD *)v37;
        *(_OWORD *)(v135 + 40) = v137;
        sub_10048250C(v37);
        swift_retain();
        static Transaction.asyncTask(name:block:)();

        swift_release();
      }
      else
      {
        unint64_t v129 = Logger.logObject.getter();
        os_log_type_t v130 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v129, v130))
        {
          unint64_t v6 = swift_slowAlloc();
          *(void *)&long long aBlock = swift_slowAlloc();
          *(_DWORD *)unint64_t v6 = 141558531;
          uint64_t v238 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v6 + 12) = 2081;
          unint64_t v131 = *(void *)(v37 + 48);
          uint64_t v132 = v37;
          if (v131)
          {
            uint64_t v133 = *(void *)(v37 + 40);
            unint64_t v134 = v131;
          }
          else
          {
            uint64_t v133 = 0x6E776F6E6B6E75;
            unint64_t v134 = 0xE700000000000000;
          }
          swift_bridgeObjectRetain();
          uint64_t v238 = sub_1008FA0F0(v133, v134, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10048257C(v132);
          sub_10048257C(v132);
          *(_WORD *)(v6 + 22) = 2080;
          uint64_t v238 = 0;
          sub_10000588C(&qword_101645728);
          uint64_t v138 = String.init<A>(describing:)();
          uint64_t v238 = sub_1008FA0F0(v138, v139, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v129, v130, "Did not subscribe context for %{private,mask.hash}s,\nconnection: %s. No connection.", (uint8_t *)v6, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          uint64_t v3 = v222;
          a1 = v221;
        }
        else
        {
          sub_10048257C(v37);
          sub_10048257C(v37);
        }
      }
    }
    uint64_t v140 = v242[8];
    uint64_t v208 = v242 + 8;
    uint64_t v141 = 1 << *((unsigned char *)v242 + 32);
    uint64_t v142 = -1;
    if (v141 < 64) {
      uint64_t v142 = ~(-1 << v141);
    }
    unint64_t v228 = v142 & v140;
    unint64_t v17 = (unint64_t)(v141 + 63) >> 6;
    uint64_t v212 = v224 + 16;
    v214 = (unint64_t *)(v224 + 8);
    unint64_t v199 = v17 - 1;
    uint64_t v143 = swift_bridgeObjectRetain();
    uint64_t v144 = 0;
    int64_t v210 = v17;
    unint64_t v200 = v17 - 5;
    v213 = (unsigned __int8 *)v143;
    uint64_t v201 = v143 + 104;
    while (1)
    {
      if (v228)
      {
        unint64_t v145 = __clz(__rbit64(v228));
        v228 &= v228 - 1;
        *(void *)&long long v226 = v144;
        unint64_t v146 = v145 | (v144 << 6);
      }
      else
      {
        int64_t v150 = v144 + 1;
        if (__OFADD__(v144, 1)) {
          goto LABEL_143;
        }
        if (v150 >= v210)
        {
          *(void *)&long long v226 = v144;
          goto LABEL_90;
        }
        unint64_t v151 = v208[v150];
        if (!v151)
        {
          if (v144 + 2 >= v210) {
            goto LABEL_139;
          }
          unint64_t v151 = v208[v144 + 2];
          if (v151)
          {
            int64_t v150 = v144 + 2;
          }
          else
          {
            if (v144 + 3 >= v210)
            {
              *(void *)&long long v226 = v144 + 2;
              goto LABEL_90;
            }
            unint64_t v151 = v208[v144 + 3];
            if (v151)
            {
              int64_t v150 = v144 + 3;
            }
            else
            {
              int64_t v150 = v144 + 4;
              if (v144 + 4 >= v210)
              {
                *(void *)&long long v226 = v144 + 3;
                goto LABEL_90;
              }
              unint64_t v151 = v208[v150];
              if (!v151)
              {
                while (v200 != v144)
                {
                  unint64_t v151 = *(void *)(v201 + 8 * v144++);
                  if (v151)
                  {
                    int64_t v150 = v144 + 4;
                    goto LABEL_88;
                  }
                }
                int64_t v150 = v199;
LABEL_139:
                *(void *)&long long v226 = v150;
LABEL_90:
                uint64_t v152 = sub_10000588C(&qword_101645710);
                (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v152 - 8) + 56))(v9, 1, 1, v152);
                unint64_t v228 = 0;
                goto LABEL_91;
              }
            }
          }
        }
LABEL_88:
        unint64_t v228 = (v151 - 1) & v151;
        unint64_t v146 = __clz(__rbit64(v151)) + (v150 << 6);
        *(void *)&long long v226 = v150;
      }
      uint64_t v147 = v213;
      (*(void (**)(char *, unint64_t, void *))(v224 + 16))(v9, *((void *)v213 + 6) + *(void *)(v224 + 72) * v146, v3);
      uint64_t v148 = *((void *)v147 + 7) + 40 * v146;
      uint64_t v149 = sub_10000588C(&qword_101645710);
      sub_10001D010(v148, (uint64_t)&v9[*(int *)(v149 + 48)]);
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v149 - 8) + 56))(v9, 0, 1, v149);
LABEL_91:
      sub_10001D608((uint64_t)v9, (uint64_t)a1, &qword_1016456F8);
      uint64_t v153 = sub_10000588C(&qword_101645710);
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(*(void *)(v153 - 8) + 48))(a1, 1, v153) == 1)
      {
        swift_release();
        uint64_t v195 = type metadata accessor for TaskPriority();
        uint64_t v196 = (uint64_t)v205;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v195 - 8) + 56))(v205, 1, 1, v195);
        v197 = (void *)swift_allocObject();
        v197[2] = 0;
        v197[3] = 0;
        v197[4] = v211;
        swift_retain();
        sub_1008F5E44(v196, (uint64_t)&unk_101645720, (uint64_t)v197);

        swift_release();
        swift_release();
        sub_100485AFC((uint64_t)v207, (uint64_t (*)(void))type metadata accessor for LocationFetchConfiguration);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return sub_1000A1534((uint64_t)v202);
      }
      sub_10001CEB0((long long *)&a1[*(int *)(v153 + 48)], (uint64_t)&aBlock);
      uint64_t v154 = v232;
      uint64_t v155 = v233;
      sub_10001CD44(&aBlock, (uint64_t)v232);
      uint64_t v156 = (*((uint64_t (**)(void *, uint64_t (*)()))v155 + 2))(v154, v155);
      uint64_t v9 = v227;
      unint64_t v6 = sub_10044A6F4(v156, &v241);
      v227 = v9;
      swift_bridgeObjectRelease();
      unint64_t v17 = v6 >> 62;
      if (v6 >> 62)
      {
        swift_bridgeObjectRetain();
        if (!_CocoaArrayWrapper.endIndex.getter()) {
          goto LABEL_79;
        }
LABEL_94:
        unint64_t v225 = v6 & 0xC000000000000001;
        if ((v6 & 0xC000000000000001) != 0)
        {
          double v158 = (void *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (!*(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_142;
          }
          double v158 = *(id *)(v6 + 32);
        }
        uint64_t v3 = v158;
        swift_bridgeObjectRelease();
        if (v17)
        {
          swift_bridgeObjectRetain();
          uint64_t v159 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v159 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        double v160 = v232;
        double v161 = v233;
        sub_10001CD44(&aBlock, (uint64_t)v232);
        if (v159 != (*((unsigned __int8 (**)(void *, uint64_t (*)()))v161 + 3))(v160, v161))
        {

          uint64_t v3 = v222;
          goto LABEL_80;
        }
        if (v17)
        {
          swift_bridgeObjectRetain();
          unint64_t v164 = v3;
          uint64_t v162 = _CocoaArrayWrapper.endIndex.getter();
          if (v162)
          {
LABEL_106:
            unint64_t v17 = 4;
            unint64_t v218 = v162;
            while (1)
            {
              id v165 = v225 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v6 + 8 * v17);
              double v166 = v165;
              if (__OFADD__(v17 - 4, 1)) {
                break;
              }
              id v229 = (id)(v17 - 3);
              uint64_t v239 = sub_10001D4B0(0, (unint64_t *)&qword_101638DB0);
              v240 = &off_101609190;
              uint64_t v238 = (uint64_t)v3;
              double v167 = v3;
              double v168 = v3;
              id v169 = [v166 timestamp];
              v170 = v219;
              static Date._unconditionallyBridgeFromObjectiveC(_:)();

              id v171 = [v168 timestamp];
              double v172 = v217;
              static Date._unconditionallyBridgeFromObjectiveC(_:)();

              LOBYTE(v171) = static Date.== infix(_:_:)();
              double v173 = v172;
              uint64_t v9 = (char *)v220;
              double v174 = v216;
              v216(v173, (char *)v220);
              v174(v170, v9);
              sub_10001D010((uint64_t)&v238, (uint64_t)v237);
              if ((v171 & 1) == 0)
              {
                _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v237);
                sub_10001D010((uint64_t)&v238, (uint64_t)v236);
LABEL_121:
                _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v236);
                sub_10001D010((uint64_t)&v238, (uint64_t)v235);
LABEL_122:
                _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v235);
                _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v238);
                swift_bridgeObjectRelease();

LABEL_124:
                uint64_t v3 = v222;
                uint64_t v9 = v215;
                a1 = v221;
                goto LABEL_81;
              }
              id v175 = v166;
              [v175 longitude];
              double v177 = v176;
              [*sub_10001CD44(v237, v237[3]) longitude];
              double v179 = v178;

              _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v237);
              sub_10001D010((uint64_t)&v238, (uint64_t)v236);
              if (v177 != v179) {
                goto LABEL_121;
              }
              id v180 = v175;
              [v180 latitude];
              double v182 = v181;
              [*sub_10001CD44(v236, v236[3]) latitude];
              double v184 = v183;

              _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v236);
              sub_10001D010((uint64_t)&v238, (uint64_t)v235);
              if (v182 != v184) {
                goto LABEL_122;
              }
              id v185 = v180;
              [v185 horizontalAccuracy];
              double v187 = v186;
              [*sub_10001CD44(v235, v235[3]) horizontalAccuracy];
              double v189 = v188;

              _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v235);
              _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v238);

              if (v187 != v189)
              {

                swift_bridgeObjectRelease();
                goto LABEL_124;
              }
              ++v17;
              a1 = v221;
              uint64_t v3 = v167;
              if (v229 == (id)v218) {
                goto LABEL_116;
              }
            }
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
LABEL_144:
            __break(1u);
LABEL_145:
            swift_once();
            goto LABEL_2;
          }
        }
        else
        {
          uint64_t v162 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          uint64_t v163 = v3;
          if (v162) {
            goto LABEL_106;
          }
        }
LABEL_116:

        swift_bridgeObjectRelease_n();
        v190 = v232;
        v191 = v233;
        sub_10001CD44(&aBlock, (uint64_t)v232);
        uint64_t v192 = (uint64_t)v209;
        (*((void (**)(void *, uint64_t (*)()))v191 + 1))(v190, v191);
        unint64_t v6 = v3;
        uint64_t v193 = v241;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v238 = v193;
        sub_10016BA48(v6, v192, isUniquelyReferenced_nonNull_native);
        uint64_t v241 = v238;
        swift_bridgeObjectRelease();
        unint64_t v17 = *v214;
        uint64_t v3 = v222;
        ((void (*)(uint64_t, _DWORD *))*v214)(v192, v222);

        ((void (*)(unsigned __int8 *, void *))v17)(a1, v3);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&aBlock);
        uint64_t v9 = v215;
        uint64_t v144 = v226;
      }
      else
      {
        uint64_t v157 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v157) {
          goto LABEL_94;
        }
LABEL_79:
        swift_bridgeObjectRelease();
LABEL_80:
        uint64_t v9 = v215;
LABEL_81:
        uint64_t v144 = v226;
        swift_bridgeObjectRelease();
        ((void (*)(unsigned __int8 *, void *))*v214)(a1, v3);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&aBlock);
      }
    }
  }
  __chkstk_darwin(v70);
  uint64_t v88 = v211;
  id v89 = v214;
  *(&v198 - 4) = v211;
  *(&v198 - 3) = (uint64_t)v89;
  *(&v198 - 2) = v90;
  swift_bridgeObjectRetain();
  uint64_t v91 = sub_1000D137C((uint64_t)_swiftEmptyDictionarySingleton, (void (*)(uint64_t *, char *))sub_100485D94, (uint64_t)(&v198 - 6), (uint64_t)v49);
  swift_bridgeObjectRelease();
  if (v216)
  {
    swift_retain();
    uint64_t v92 = sub_10047B1E4((uint64_t)v68, v91, v88);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v68 = v92;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  unint64_t v218 = v64;
  uint64_t v93 = v68[2];
  if (v93)
  {
    unint64_t v94 = (unint64_t)v68;
    uint64_t v95 = (uint64_t)(v68 + 4);
    v227 = (char *)(v224 + 8);
    unint64_t v228 = v94;
    swift_bridgeObjectRetain_n();
    *(void *)&long long v96 = 141558275;
    long long v226 = v96;
    unint64_t v225 = (unint64_t)&type metadata for Any + 8;
    uint64_t v97 = v209;
    do
    {
      sub_10001D010(v95, (uint64_t)&aBlock);
      sub_10001D010((uint64_t)&aBlock, (uint64_t)&v238);
      uint64_t v98 = Logger.logObject.getter();
      os_log_type_t v99 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v98, v99))
      {
        uint64_t v100 = swift_slowAlloc();
        v237[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v100 = v226;
        *(void *)(v100 + 4) = 1752392040;
        *(_WORD *)(v100 + 12) = 2081;
        uint64_t v102 = v239;
        id v101 = v240;
        sub_10001CD44(&v238, v239);
        (*(void (**)(uint64_t))(*((void *)v101[1] + 1) + 32))(v102);
        sub_100482848((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v103 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v105 = v104;
        (*(void (**)(char *, _DWORD *))v227)(v97, v222);
        *(void *)(v100 + 14) = sub_1008FA0F0(v103, v105, v237);
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v238);
        _os_log_impl((void *)&_mh_execute_header, v98, v99, "One-shot location fetching ACSN for beacon without recent location: %{private,mask.hash}s.", (uint8_t *)v100, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v3 = v222;
        swift_slowDealloc();
      }
      else
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v238);
      }

      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&aBlock);
      v95 += 40;
      --v93;
    }
    while (v93);
    unint64_t v106 = v228;
    swift_bridgeObjectRelease_n();
    uint64_t v88 = v211;
    uint64_t v37 = (uint64_t)v213;
  }
  else
  {
    unint64_t v106 = (unint64_t)v68;
  }
  uint64_t v107 = *(NSObject **)(v88 + 88);
  uint64_t v108 = v212;
  sub_100485A94((uint64_t)v207, v212, (uint64_t (*)(void))type metadata accessor for LocationFetchConfiguration);
  unint64_t v109 = (*((unsigned __int8 *)v208 + 80) + 128) & ~(unint64_t)*((unsigned __int8 *)v208 + 80);
  uint64_t v110 = swift_allocObject();
  long long v111 = *(_OWORD *)(v37 + 48);
  *(_OWORD *)(v110 + 48) = *(_OWORD *)(v37 + 32);
  *(_OWORD *)(v110 + 64) = v111;
  *(_OWORD *)(v110 + 80) = *(_OWORD *)(v37 + 64);
  *(_OWORD *)(v110 + 89) = *(_OWORD *)(v37 + 73);
  long long v112 = *(_OWORD *)(v37 + 16);
  *(_OWORD *)(v110 + 16) = *(_OWORD *)v37;
  *(_OWORD *)(v110 + 32) = v112;
  *(void *)(v110 + 112) = v88;
  *(void *)(v110 + 120) = v106;
  sub_100485510(v108, v110 + v109, (uint64_t (*)(void))type metadata accessor for LocationFetchConfiguration);
  uint64_t v113 = swift_allocObject();
  *(void *)(v113 + 16) = sub_100482834;
  *(void *)(v113 + 24) = v110;
  uint64_t Configuration = v110;
  v233 = sub_100132424;
  uint64_t v234 = v113;
  *(void *)&long long aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256;
  v231 = sub_1000A70B0;
  v232 = &unk_1015C3D68;
  uint64_t v114 = _Block_copy(&aBlock);
  sub_10048250C(v37);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v107, v114);
  _Block_release(v114);
  LOBYTE(v107) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((v107 & 1) == 0)
  {
    uint64_t v202 = sub_100482834;
    goto LABEL_60;
  }
  __break(1u);
  return result;
}

uint64_t sub_100457540(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 120) = a1;
  *(void *)(v2 + 128) = a2;
  return _swift_task_switch(sub_100457560, 0, 0);
}

uint64_t sub_100457560()
{
  uint64_t v1 = qword_1016375E8;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_101639150 + dword_101639150);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 136) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_1004576B0;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1004576B0(uint64_t a1)
{
  *(void *)(*(void *)v1 + 144) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1004577B0, 0, 0);
}

uint64_t sub_1004577B0()
{
  uint64_t v1 = v0[18];
  uint64_t v2 = (void *)v0[15];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 2));
  *uint64_t v2 = v1;
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_10045781C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a2, v9);
  uint64_t v13 = sub_100B6E218(a2);
  v17[2] = a4;
  v17[3] = a5;
  uint64_t v14 = sub_1000A48D4((uint64_t (*)(char *))sub_10048329C, v17, (uint64_t)v13);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v18 = *a1;
  *a1 = 0x8000000000000000;
  sub_10016E518(v14, (uint64_t)v12, isUniquelyReferenced_nonNull_native);
  *a1 = v18;
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_1004579A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for BeaconEstimatedLocation();
  uint64_t result = __chkstk_darwin(v10);
  uint64_t v13 = (char *)v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(a2 + 16);
  if (!v14) {
    goto LABEL_9;
  }
  int v15 = *(unsigned __int8 *)(a1 + *(int *)(v10 + 44));
  if (*(unsigned __int8 *)(a2 + 32) == v15)
  {
LABEL_3:
    sub_100485A94(a1, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a3, v6);
    sub_100482848((unint64_t *)&qword_1016605E0, (void (*)(uint64_t))&type metadata accessor for Date);
    char v16 = dispatch thunk of static Comparable.< infix(_:_:)() ^ 1;
LABEL_10:
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    sub_100485AFC((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    return v16 & 1;
  }
  if (v14 == 1)
  {
LABEL_9:
    sub_100485A94(a1, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a3, v6);
    char v16 = 0;
    goto LABEL_10;
  }
  uint64_t v17 = 33;
  while (1)
  {
    uint64_t v18 = v17 - 31;
    if (__OFADD__(v17 - 32, 1)) {
      break;
    }
    if (*(unsigned __int8 *)(a2 + v17) == v15) {
      goto LABEL_3;
    }
    ++v17;
    if (v18 == v14) {
      goto LABEL_9;
    }
  }
  __break(1u);
  return result;
}

uint64_t sub_100457C24(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6 = *a1;
  uint64_t v8 = *((void *)a1 + 5);
  uint64_t v7 = *((void *)a1 + 6);
  uint64_t v9 = *((void *)a1 + 2);
  uint64_t v10 = *((void *)a1 + 9);
  uint64_t v19 = *((void *)a1 + 10);
  unsigned __int8 v11 = a1[88];
  uint64_t v12 = qword_101636CD8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v12 != -1) {
    swift_once();
  }
  BOOL v13 = v6 == 3;
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v14 = sub_1010ABA34(v22);
  swift_bridgeObjectRelease();
  uint64_t My = type metadata accessor for Feature.FindMy();
  uint64_t v25 = My;
  uint64_t v26 = sub_100482848((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
  char v16 = sub_10001D958(&v22);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v16, enum case for Feature.FindMy.networkScalingImprovements(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v22);
  uint64_t v22 = v14;
  char v23 = 0;
  uint64_t v24 = &off_1015A1620;
  LOBYTE(v25) = v13;
  uint64_t v26 = v8;
  uint64_t v27 = v7;
  uint64_t v28 = v9;
  char v29 = My & 1;
  uint64_t v30 = v10;
  uint64_t v31 = v19;
  unsigned __int8 v32 = v11;
  double v17 = *(double *)(a4 + *(int *)(type metadata accessor for LocationFetchConfiguration() + 32));
  sub_100476B84(a3, (uint64_t)&v22, (a1[56] & 1) == 0, *((void *)a1 + 8), a2, v17, *(double *)(a4 + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100457E38(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v194 = a4;
  double v183 = a1;
  uint64_t v191 = type metadata accessor for Date();
  uint64_t v190 = *(void *)(v191 - 8);
  __chkstk_darwin(v191);
  double v189 = (char *)&v167 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_101645760);
  uint64_t v8 = __chkstk_darwin(v7);
  double v184 = (char *)&v167 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v188 = (uint64_t)&v167 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v178 = (uint64_t)&v167 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  double v177 = (char *)&v167 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v175 = (uint64_t)&v167 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  os_log_t v176 = (os_log_t)((char *)&v167 - v19);
  uint64_t v20 = __chkstk_darwin(v18);
  double v173 = (char *)&v167 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v196 = (char *)&v167 - v23;
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v167 - v24;
  uint64_t v180 = sub_10000588C(&qword_101638CF0);
  uint64_t v26 = __chkstk_darwin(v180);
  double v179 = (char *)&v167 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v181 = (uint64_t)&v167 - v29;
  __chkstk_darwin(v28);
  uint64_t v195 = (char *)&v167 - v30;
  uint64_t v31 = type metadata accessor for UUID();
  uint64_t v198 = *(void *)(v31 - 8);
  uint64_t v199 = v31;
  uint64_t v32 = __chkstk_darwin(v31);
  double v182 = (char *)&v167 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = __chkstk_darwin(v32);
  id v185 = (char *)&v167 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  double v186 = (char *)&v167 - v37;
  __chkstk_darwin(v36);
  double v174 = (char *)&v167 - v38;
  uint64_t v39 = sub_10000588C((uint64_t *)&unk_101638D50);
  __chkstk_darwin(v39 - 8);
  uint64_t v41 = (char *)&v167 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = type metadata accessor for BeaconEstimatedLocation();
  uint64_t v43 = *(void *)(v42 - 8);
  uint64_t v44 = __chkstk_darwin(v42);
  uint64_t v187 = (uint64_t)&v167 - ((v45 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v44);
  int64_t v47 = (char *)&v167 - v46;
  id v197 = *(id *)(a3 + 280);
  sub_100ACCD98(a2, (uint64_t)&v202);
  if (!*((void *)&v203 + 1)) {
    return sub_10001DAB4((uint64_t)&v202, (uint64_t *)&unk_10163BBE0);
  }
  sub_10001CEB0(&v202, (uint64_t)&v205);
  uint64_t v192 = v7;
  uint64_t v48 = (char *)*(int *)(v7 + 48);
  uint64_t v193 = a2;
  sub_100E4CD4C(*(void *)&v48[a2], (uint64_t)v41);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42) == 1)
  {
    sub_10001DAB4((uint64_t)v41, (uint64_t *)&unk_101638D50);
  }
  else
  {
    id v171 = (void (*)(char *, uint64_t))v43;
    uint64_t v170 = v42;
    double v172 = v47;
    sub_100485510((uint64_t)v41, (uint64_t)v47, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    uint64_t v50 = v206;
    uint64_t v51 = v207;
    sub_10001CD44(&v205, v206);
    uint64_t v52 = (uint64_t)v195;
    (*(void (**)(uint64_t, uint64_t))(v51 + 192))(v50, v51);
    uint64_t v54 = (void *)v198;
    uint64_t v53 = v199;
    uint64_t v55 = v198 + 48;
    double v168 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v198 + 48);
    int v56 = v168(v52, 1, v199);
    uint64_t v169 = v55;
    if (v56 == 1)
    {
      sub_10001DAB4(v52, &qword_101638CF0);
      uint64_t v57 = v192;
    }
    else
    {
      int64_t v58 = (void (*)(char *, uint64_t, uint64_t))v54[4];
      uint64_t v59 = (uint64_t)v174;
      v58(v174, v52, v53);
      uint64_t v60 = *v194;
      uint64_t v57 = v192;
      if (*(void *)(*v194 + 16) && (unint64_t v61 = sub_1007240CC(v59), (v62 & 1) != 0))
      {
        sub_10001D010(*(void *)(v60 + 56) + 40 * v61, (uint64_t)&v202);
        sub_10001DAB4((uint64_t)&v202, (uint64_t *)&unk_10164E7C0);
        uint64_t v63 = v59;
        uint64_t v54 = (void *)v198;
        (*(void (**)(uint64_t, uint64_t))(v198 + 8))(v63, v53);
      }
      else
      {
        uint64_t v204 = 0;
        long long v202 = 0u;
        long long v203 = 0u;
        sub_10001DAB4((uint64_t)&v202, (uint64_t *)&unk_10164E7C0);
        sub_100AF03FC(v59, (uint64_t)&v200);
        if (v201)
        {
          sub_10001CEB0(&v200, (uint64_t)&v202);
          uint64_t v64 = v198;
          uint64_t v65 = (uint64_t)v186;
          (*(void (**)(char *, uint64_t, uint64_t))(v198 + 16))(v186, v59, v53);
          sub_10001D010((uint64_t)&v202, (uint64_t)&v200);
          sub_10015E5B0((uint64_t)&v200, v65);
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v202);
          uint64_t v66 = v59;
          uint64_t v54 = (void *)v64;
          (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v66, v53);
        }
        else
        {
          uint64_t v67 = v59;
          uint64_t v54 = (void *)v198;
          (*(void (**)(uint64_t, uint64_t))(v198 + 8))(v67, v53);
          sub_10001DAB4((uint64_t)&v200, (uint64_t *)&unk_10164E7C0);
        }
      }
    }
    sub_100AE3328(&v205);
    double v69 = v68;
    double v174 = v48;
    uint64_t v70 = *(void *)&v48[v193];
    uint64_t v71 = *(int *)(v57 + 48);
    double v72 = (uint64_t *)v54[2];
    uint64_t v195 = (char *)(v54 + 2);
    uint64_t v194 = v72;
    ((void (*)(char *))v72)(v25);
    *(void *)&v25[v71] = v70;
    uint64_t v73 = *(void *)(v70 + 16);
    if (v73)
    {
      uint64_t v74 = v70 + ((*((unsigned __int8 *)v171 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v171 + 80));
      uint64_t v75 = *((void *)v171 + 9);
      swift_bridgeObjectRetain_n();
      do
      {
        sub_10045951C(v74, (uint64_t)v25);
        v74 += v75;
        --v73;
      }
      while (v73);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    sub_10001DAB4((uint64_t)v25, &qword_101645760);
    uint64_t v76 = *(int *)(v57 + 48);
    uint64_t v77 = v196;
    uint64_t v78 = v193;
    uint64_t v79 = v199;
    ((void (*)(char *, uint64_t, uint64_t))v194)(v196, v193, v199);
    *(void *)&v77[v76] = *(void *)&v174[v78];
    uint64_t v80 = swift_bridgeObjectRetain();
    unint64_t v81 = sub_100A9BD7C(v80);
    swift_bridgeObjectRelease();
    uint64_t v82 = v206;
    uint64_t v83 = v207;
    sub_10001CD44(&v205, v206);
    uint64_t v84 = sub_10110171C(v82, v83);
    id v85 = sub_1011030EC((uint64_t)v81, v84, v69);
    swift_bridgeObjectRelease();
    uint64_t v86 = (void (*)(char *, uint64_t))v54[1];
    v86(v77, v79);
    id v171 = v86;
    if (v85)
    {
      if (qword_101636B10 != -1) {
        swift_once();
      }
      double v173 = (char *)(v54 + 1);
      uint64_t v87 = type metadata accessor for Logger();
      sub_100010324(v87, (uint64_t)qword_10170DEB8);
      uint64_t v88 = *(int *)(v192 + 48);
      uint64_t v89 = (uint64_t)v177;
      ((void (*)(char *, uint64_t, uint64_t))v194)(v177, v78, v199);
      *(void *)(v89 + v88) = *(void *)&v174[v78];
      uint64_t v90 = v178;
      sub_10001D074(v89, v178, &qword_101645760);
      uint64_t v91 = v188;
      sub_10001D608(v89, v188, &qword_101645760);
      uint64_t v92 = v187;
      sub_100485A94((uint64_t)v172, v187, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      id v93 = v85;
      swift_bridgeObjectRetain();
      unint64_t v94 = Logger.logObject.getter();
      os_log_type_t v95 = static os_log_type_t.default.getter();
      int v96 = v95;
      if (os_log_type_enabled(v94, v95))
      {
        uint64_t v97 = swift_slowAlloc();
        os_log_t v176 = v94;
        uint64_t v98 = v97;
        double v177 = (char *)swift_slowAlloc();
        *(void *)&long long v202 = v177;
        *(_DWORD *)uint64_t v98 = 141559811;
        *(void *)&long long v200 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v98 + 12) = 2081;
        uint64_t v167 = v98 + 14;
        LODWORD(v175) = v96;
        os_log_type_t v99 = v196;
        uint64_t v100 = v199;
        ((void (*)(char *, uint64_t, uint64_t))v194)(v196, v90, v199);
        id v101 = v186;
        (*(void (**)(char *, char *, uint64_t))(v198 + 32))(v186, v99, v100);
        sub_100482848((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v102 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v103 = v90;
        unint64_t v105 = v104;
        v171(v101, v199);
        *(void *)&long long v200 = sub_1008FA0F0(v102, v105, (uint64_t *)&v202);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v106 = v199;
        swift_bridgeObjectRelease();
        sub_10001DAB4(v188, &qword_101645760);
        sub_10001DAB4(v103, &qword_101645760);
        *(_WORD *)(v98 + 22) = 2160;
        *(void *)&long long v200 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v98 + 32) = 2081;
        uint64_t v107 = v187;
        uint64_t v108 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)&long long v200 = sub_1008FA0F0(v108, v109, (uint64_t *)&v202);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100485AFC(v107, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
        *(_WORD *)(v98 + 42) = 2049;
        [v93 coordinate];
        *(void *)&long long v200 = v110;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        *(_WORD *)(v98 + 52) = 2049;
        [v93 coordinate];
        *(void *)&long long v200 = v111;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        *(_WORD *)(v98 + 62) = 2050;
        [v93 horizontalAccuracy];
        *(void *)&long long v200 = v112;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        *(_WORD *)(v98 + 72) = 2082;
        uint64_t v188 = v98 + 74;
        id v113 = [v93 timestamp];
        uint64_t v114 = v189;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        sub_100482848((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
        uint64_t v115 = v191;
        uint64_t v116 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v118 = v117;
        (*(void (**)(char *, uint64_t))(v190 + 8))(v114, v115);
        *(void *)&long long v200 = sub_1008FA0F0(v116, v118, (uint64_t *)&v202);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        os_log_t v119 = v176;
        _os_log_impl((void *)&_mh_execute_header, v176, (os_log_type_t)v175, "Filtered cached latest location returned to client for beacon %{private,mask.hash}s, locationUUID: %{private,mask.hash}s, lat: %{private}f, long: %{private}f, accuracy: %{public}f, timestamp: %{public}s.", (uint8_t *)v98, 0x52u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v121 = v185;
        uint64_t v122 = (uint64_t)v184;
      }
      else
      {
        sub_10001DAB4(v91, &qword_101645760);
        sub_10001DAB4(v90, &qword_101645760);
        sub_100485AFC(v92, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);

        uint64_t v121 = v185;
        uint64_t v122 = (uint64_t)v184;
        uint64_t v106 = v199;
      }
      __chkstk_darwin(v120);
      uint64_t v140 = v193;
      *(&v167 - 2) = v141;
      *(&v167 - 1) = v140;
      uint64_t v142 = v179;
      QueueSynchronizer.conditionalSync<A>(_:)();
      uint64_t v143 = (uint64_t)v142;
      uint64_t v144 = v181;
      sub_10001D608(v143, v181, &qword_101638CF0);
      uint64_t v145 = *(int *)(v192 + 48);
      ((void (*)(uint64_t, uint64_t, uint64_t))v194)(v122, v140, v106);
      *(void *)(v122 + v145) = *(void *)&v174[v140];
      if (v168(v144, 1, v106) == 1)
      {
        unint64_t v146 = v196;
        uint64_t v147 = (void (*)(char *, char *, uint64_t))v194;
        id v197 = v93;
        ((void (*)(char *, uint64_t, uint64_t))v194)(v196, v122, v106);
        swift_bridgeObjectRetain();
        sub_10001DAB4(v122, &qword_101645760);
        (*(void (**)(char *, char *, uint64_t))(v198 + 32))(v121, v146, v106);
        sub_10001DAB4(v144, &qword_101638CF0);
        id v93 = v197;
        uint64_t v148 = v147;
      }
      else
      {
        swift_bridgeObjectRetain();
        sub_10001DAB4(v122, &qword_101645760);
        (*(void (**)(char *, uint64_t, uint64_t))(v198 + 32))(v121, v144, v106);
        uint64_t v148 = (void (*)(char *, char *, uint64_t))v194;
      }
      uint64_t v149 = (uint64_t)v182;
      v148(v182, v121, v106);
      id v150 = [v93 timestamp];
      unint64_t v151 = v189;
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      [v93 coordinate];
      double v153 = v152;
      [v93 coordinate];
      double v155 = v154;
      [v93 horizontalAccuracy];
      double v157 = v156;
      double v158 = (void *)sub_101103478(v172[*(int *)(v170 + 44)]);
      id v159 = objc_allocWithZone((Class)SPBeaconLocation);
      id v160 = v158;
      Class isa = Date._bridgeToObjectiveC()().super.isa;
      id v162 = [v159 initWithTimestamp:isa latitude:v160 longitude:v153 horizontalAccuracy:v155 source:v157];

      (*(void (**)(char *, uint64_t))(v190 + 8))(v151, v191);
      if (v162)
      {
        uint64_t v163 = v183;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)&long long v202 = *v163;
        void *v163 = 0x8000000000000000;
        sub_10016BA48((uint64_t)v162, v149, isUniquelyReferenced_nonNull_native);
        void *v163 = v202;
        swift_bridgeObjectRelease();
        id v165 = v171;
        v171((char *)v149, v106);
      }
      else
      {
        uint64_t v166 = sub_1001634D0(v149);
        id v165 = v171;
        v171((char *)v149, v106);

        id v93 = (id)v166;
      }

      v165(v121, v106);
    }
    else
    {
      if (qword_101636B10 != -1) {
        swift_once();
      }
      uint64_t v123 = type metadata accessor for Logger();
      sub_100010324(v123, (uint64_t)qword_10170DEB8);
      uint64_t v124 = *(int *)(v192 + 48);
      uint64_t v125 = (uint64_t)v173;
      ((void (*)(char *, uint64_t, uint64_t))v194)(v173, v78, v199);
      *(void *)(v125 + v124) = *(void *)&v174[v78];
      os_log_t v126 = v176;
      sub_10001D074(v125, (uint64_t)v176, &qword_101645760);
      uint64_t v127 = v175;
      sub_10001D608(v125, v175, &qword_101645760);
      swift_bridgeObjectRetain();
      unint64_t v128 = Logger.logObject.getter();
      os_log_type_t v129 = static os_log_type_t.error.getter();
      int v130 = v129;
      if (os_log_type_enabled(v128, v129))
      {
        uint64_t v131 = swift_slowAlloc();
        uint64_t v132 = swift_slowAlloc();
        os_log_t v133 = v126;
        uint64_t v134 = v199;
        double v173 = (char *)(v54 + 1);
        *(void *)&long long v202 = v132;
        *(_DWORD *)uint64_t v131 = 141558275;
        *(void *)&long long v200 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v131 + 12) = 2081;
        uint64_t v193 = v131 + 14;
        LODWORD(v197) = v130;
        uint64_t v135 = v196;
        ((void (*)(char *, os_log_t, uint64_t))v194)(v196, v133, v134);
        long long v136 = v186;
        ((void (*)(char *, char *, uint64_t))v54[4])(v186, v135, v134);
        sub_100482848((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v137 = dispatch thunk of CustomStringConvertible.description.getter();
        unint64_t v139 = v138;
        v171(v136, v134);
        *(void *)&long long v200 = sub_1008FA0F0(v137, v139, (uint64_t *)&v202);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_10001DAB4(v175, &qword_101645760);
        sub_10001DAB4((uint64_t)v176, &qword_101645760);
        _os_log_impl((void *)&_mh_execute_header, v128, (os_log_type_t)v197, "Could not produce filtered location for beacon %{private,mask.hash}s.", (uint8_t *)v131, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        sub_10001DAB4(v127, &qword_101645760);
        sub_10001DAB4((uint64_t)v126, &qword_101645760);
      }
    }
    sub_100485AFC((uint64_t)v172, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v205);
}

void sub_10045951C(uint64_t a1, uint64_t a2)
{
  uint64_t v64 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  unint64_t v61 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = type metadata accessor for BeaconEstimatedLocation();
  uint64_t v6 = __chkstk_darwin(v62);
  uint64_t v63 = (uint64_t)&v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v52 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v52 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v52 - v15;
  __chkstk_darwin(v14);
  uint64_t v67 = (uint64_t)&v52 - v17;
  uint64_t v18 = sub_10000588C(&qword_101645760);
  uint64_t v19 = __chkstk_darwin(v18);
  os_log_t v60 = (os_log_t)((char *)&v52 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v65 = (uint64_t)&v52 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v66 = (uint64_t)&v52 - v24;
  __chkstk_darwin(v23);
  uint64_t v26 = (char *)&v52 - v25;
  if (qword_101636B10 != -1) {
    swift_once();
  }
  uint64_t v27 = type metadata accessor for Logger();
  sub_100010324(v27, (uint64_t)qword_10170DEB8);
  uint64_t v28 = *(int *)(v18 + 48);
  uint64_t v59 = v4;
  int64_t v58 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 16);
  v58(v26, a2, v64);
  *(void *)&v26[v28] = *(void *)(a2 + v28);
  sub_10001D074((uint64_t)v26, v66, &qword_101645760);
  sub_10001D608((uint64_t)v26, v65, &qword_101645760);
  sub_100485A94(a1, v67, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
  sub_100485A94(a1, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
  sub_100485A94(a1, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
  sub_100485A94(a1, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
  uint64_t v29 = v63;
  sub_100485A94(a1, v63, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
  swift_bridgeObjectRetain();
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.default.getter();
  int v32 = v31;
  if (os_log_type_enabled(v30, v31))
  {
    uint64_t v33 = swift_slowAlloc();
    uint64_t v57 = swift_slowAlloc();
    uint64_t v69 = v57;
    *(_DWORD *)uint64_t v33 = 141559811;
    uint64_t v68 = 1752392040;
    uint64_t v54 = v13;
    uint64_t v55 = v10;
    uint64_t v53 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v33 + 12) = 2081;
    int v56 = v32;
    uint64_t v52 = v33 + 14;
    os_log_t v34 = v60;
    uint64_t v35 = v66;
    uint64_t v36 = v64;
    v58((char *)v60, v66, v64);
    uint64_t v37 = v59;
    uint64_t v38 = v61;
    (*(void (**)(char *, os_log_t, uint64_t))(v59 + 32))(v61, v34, v36);
    sub_100482848((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    os_log_t v60 = v30;
    uint64_t v39 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v41 = v40;
    (*(void (**)(char *, uint64_t))(v37 + 8))(v38, v36);
    uint64_t v68 = sub_1008FA0F0(v39, v41, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10001DAB4(v65, &qword_101645760);
    sub_10001DAB4(v35, &qword_101645760);
    *(_WORD *)(v33 + 22) = 2160;
    uint64_t v68 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v33 + 32) = 2081;
    uint64_t v42 = (int *)v62;
    uint64_t v43 = v67;
    uint64_t v44 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v68 = sub_1008FA0F0(v44, v45, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100485AFC(v43, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    *(_WORD *)(v33 + 42) = 2049;
    uint64_t v46 = (uint64_t)v53;
    uint64_t v68 = *(void *)&v53[v42[7]];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_100485AFC(v46, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    *(_WORD *)(v33 + 52) = 2049;
    uint64_t v47 = (uint64_t)v54;
    uint64_t v68 = *(void *)&v54[v42[8]];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_100485AFC(v47, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    *(_WORD *)(v33 + 62) = 2050;
    uint64_t v48 = (uint64_t)v55;
    uint64_t v68 = *(void *)&v55[v42[9]];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_100485AFC(v48, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    *(_WORD *)(v33 + 72) = 2082;
    uint64_t v49 = v63;
    type metadata accessor for Date();
    sub_100482848((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
    uint64_t v50 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v68 = sub_1008FA0F0(v50, v51, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100485AFC(v49, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    uint64_t v30 = v60;
    _os_log_impl((void *)&_mh_execute_header, v60, (os_log_type_t)v56, "Filtering the following latest location for beacon %{private,mask.hash}s, locationUUID: %{private,mask.hash}s, lat: %{private}f, long: %{private}f, accuracy: %{public}f, timestamp: %{public}s.", (uint8_t *)v33, 0x52u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10001DAB4(v65, &qword_101645760);
    sub_10001DAB4(v66, &qword_101645760);
    sub_100485AFC(v67, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    sub_100485AFC((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    sub_100485AFC((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    sub_100485AFC((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    sub_100485AFC(v29, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
  }
}

uint64_t sub_100459CEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 144) = a4;
  return _swift_task_switch(sub_100459D0C, 0, 0);
}

uint64_t sub_100459D0C()
{
  uint64_t v1 = qword_1016375E8;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_1016392E8 + dword_1016392E8);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 152) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_100459E5C;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100459E5C(uint64_t a1)
{
  *(void *)(*(void *)v1 + 160) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100459F5C, 0, 0);
}

uint64_t sub_100459F5C()
{
  uint64_t v1 = v0[20];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 2));
  if (v1)
  {
    uint64_t v2 = v0[20];
    return _swift_task_switch(sub_10045A1F0, v2, 0);
  }
  else
  {
    sub_10001CEC8();
    swift_allocError();
    *uint64_t v3 = 0xD00000000000001CLL;
    v3[1] = 0x80000001013F8080;
    swift_willThrow();
    if (qword_101636B18 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_10170DED0);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      uint64_t v8 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 138543362;
      swift_errorRetain();
      uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
      v0[17] = v9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v8 = v9;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Error publishing locations to FindMy service when the app is foregrounded: %{public}@", v7, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
    uint64_t v10 = (uint64_t (*)(void))v0[1];
    return v10();
  }
}

uint64_t sub_10045A1F0()
{
  uint64_t v1 = v0[20];
  v0[15] = 0xD000000000000013;
  v0[16] = 0x80000001013F80A0;
  uint64_t v4 = (char *)&async function pointer to dispatch thunk of AsyncKeyedThrottle.throttle(key:block:skipBlock:)
     + async function pointer to dispatch thunk of AsyncKeyedThrottle.throttle(key:block:skipBlock:);
  swift_retain();
  uint64_t v2 = (void *)swift_task_alloc();
  v0[21] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_10045A308;
  return ((uint64_t (*)(void *, void *, uint64_t, void (*)(), void))v4)(v0 + 15, &unk_1016411F8, v1, sub_100871C18, 0);
}

uint64_t sub_10045A308()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 176) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  swift_release();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 160);
    uint64_t v4 = sub_10045A4AC;
  }
  else
  {
    uint64_t v4 = sub_10045A44C;
    uint64_t v3 = 0;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_10045A44C()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10045A4AC()
{
  return _swift_task_switch(sub_10045A4C8, 0, 0);
}

uint64_t sub_10045A4C8()
{
  swift_release();
  if (qword_101636B18 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170DED0);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 138543362;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 136) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v5 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Error publishing locations to FindMy service when the app is foregrounded: %{public}@", v4, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
  return v7();
}

uint64_t sub_10045A6CC(char a1, uint64_t a2, double a3, double a4)
{
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v8 = sub_1010ABA34(v15);
  swift_bridgeObjectRelease();
  uint64_t My = type metadata accessor for Feature.FindMy();
  uint64_t v18 = My;
  uint64_t v19 = sub_100482848((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
  uint64_t v10 = sub_10001D958(&v15);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v10, enum case for Feature.FindMy.networkScalingImprovements(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v15);
  uint64_t v15 = v8;
  char v16 = 0;
  uint64_t v17 = &off_1015A1648;
  LOBYTE(v18) = a1;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = _swiftEmptyArrayStorage;
  char v22 = My & 1;
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  char v25 = 1;
  uint64_t v11 = sub_100ACFFCC();
  uint64_t v12 = sub_100A9A618((uint64_t)v11);
  swift_bridgeObjectRelease();
  unint64_t v13 = sub_10092DC10((uint64_t)_swiftEmptyArrayStorage);
  sub_100476B84((uint64_t)v12, (uint64_t)&v15, 1, v13, a2, a3, a4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10045A8DC(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(unsigned char *)(v5 + 552) = a4;
  *(void *)(v5 + 168) = a3;
  *(void *)(v5 + 176) = v4;
  *(void *)(v5 + 152) = a1;
  *(void *)(v5 + 160) = a2;
  sub_10000588C(&qword_101641FB0);
  *(void *)(v5 + 184) = swift_task_alloc();
  uint64_t v6 = type metadata accessor for DelegatedBeaconMetadata(0);
  *(void *)(v5 + 192) = v6;
  *(void *)(v5 + 200) = *(void *)(v6 - 8);
  *(void *)(v5 + 208) = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_10163AC90);
  *(void *)(v5 + 216) = swift_task_alloc();
  *(void *)(v5 + 224) = swift_task_alloc();
  uint64_t v7 = type metadata accessor for OwnerSharingCircle();
  *(void *)(v5 + 232) = v7;
  *(void *)(v5 + 240) = *(void *)(v7 - 8);
  *(void *)(v5 + 248) = swift_task_alloc();
  sub_10000588C((uint64_t *)&unk_101638D10);
  *(void *)(v5 + 256) = swift_task_alloc();
  *(void *)(v5 + 264) = swift_task_alloc();
  uint64_t v8 = type metadata accessor for UUID();
  *(void *)(v5 + 272) = v8;
  *(void *)(v5 + 280) = *(void *)(v8 - 8);
  *(void *)(v5 + 288) = swift_task_alloc();
  *(void *)(v5 + 296) = swift_task_alloc();
  uint64_t v9 = *(void *)(sub_10000588C(&qword_101638CF0) - 8);
  *(void *)(v5 + 304) = v9;
  *(void *)(v5 + 312) = *(void *)(v9 + 64);
  *(void *)(v5 + 320) = swift_task_alloc();
  *(void *)(v5 + 328) = swift_task_alloc();
  *(void *)(v5 + 336) = swift_task_alloc();
  uint64_t v10 = type metadata accessor for Date();
  *(void *)(v5 + 344) = v10;
  *(void *)(v5 + 352) = *(void *)(v10 - 8);
  *(void *)(v5 + 360) = swift_task_alloc();
  *(void *)(v5 + 368) = swift_task_alloc();
  return _swift_task_switch(sub_10045AC08, 0, 0);
}

uint64_t sub_10045AC08()
{
  type metadata accessor for BeaconStoreActor();
  swift_allocObject();
  uint64_t v1 = swift_retain();
  *(void *)(v0 + 376) = sub_100E579B8(v1);
  uint64_t v2 = qword_1016375E8;
  swift_retain();
  if (v2 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v5 = (uint64_t (__cdecl *)())((char *)&dword_101639390 + dword_101639390);
    uint64_t v4 = (void *)swift_task_alloc();
    *(void *)(v0 + 384) = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_10045AD94;
    return v5();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10045AD94(uint64_t a1)
{
  *(void *)(*(void *)v1 + 392) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10045AE94, 0, 0);
}

uint64_t sub_10045AE94()
{
  uint64_t v58 = v0;
  uint64_t v1 = v0 + 16;
  if (!*(void *)(v0 + 392))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_1003A4778();
    swift_allocError();
    *unint64_t v13 = 7;
    swift_willThrow();
LABEL_36:
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v44 = *(uint64_t (**)(void))(v0 + 8);
    return v44();
  }
  int v2 = *(unsigned __int8 *)(v0 + 552);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  if (v2 == 1)
  {
    if (qword_101636B18 != -1) {
      swift_once();
    }
    unint64_t v3 = *(void *)(v0 + 160);
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_10170DED0);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v5, v6))
    {
      log = v5;
      uint64_t v7 = *(void *)(v0 + 152);
      uint64_t v8 = *(void *)(v0 + 160);
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      v57[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136446210;
      BOOL v10 = v8 == 0;
      if (v8) {
        uint64_t v11 = v7;
      }
      else {
        uint64_t v11 = 0x6E776F6E6B6E75;
      }
      if (v10) {
        unint64_t v12 = 0xE700000000000000;
      }
      else {
        unint64_t v12 = v3;
      }
      swift_bridgeObjectRetain();
      *(void *)(v0 + 144) = sub_1008FA0F0(v11, v12, v57);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      uint64_t v5 = log;
      _os_log_impl((void *)&_mh_execute_header, log, v6, "Subscribing delegation location updates for context: %{public}s.", v9, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }

    type metadata accessor for Transaction();
    uint64_t v23 = (void *)static Transaction.currentNSXPCConnection.getter();
    if (v23)
    {
      uint64_t v24 = v23;
      sub_100449E68(v23, *(void *)(v0 + 152), *(void *)(v0 + 160));

      swift_release();
      swift_release();
      id v56 = 0;
LABEL_41:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v53 = *(uint64_t (**)(id))(v0 + 8);
      return v53(v56);
    }
    unint64_t v40 = Logger.logObject.getter();
    os_log_type_t v41 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v42 = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "Error! Subscribing delegation location updates: BeaconManagerServiceError.connectionError", v42, 2u);
      swift_slowDealloc();
    }

    sub_1003A4778();
    swift_allocError();
    *uint64_t v43 = 7;
    swift_willThrow();
    swift_release();
    goto LABEL_36;
  }
  if (qword_101636B18 != -1) {
    swift_once();
  }
  unint64_t v14 = *(void *)(v0 + 160);
  uint64_t v15 = type metadata accessor for Logger();
  *(void *)(v0 + 400) = sub_100010324(v15, (uint64_t)qword_10170DED0);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  char v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v19 = *(void *)(v0 + 152);
    uint64_t v18 = *(void *)(v0 + 160);
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    v57[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 136446210;
    if (v18) {
      uint64_t v21 = v19;
    }
    else {
      uint64_t v21 = 0x6E776F6E6B6E75;
    }
    if (v18) {
      unint64_t v22 = v14;
    }
    else {
      unint64_t v22 = 0xE700000000000000;
    }
    swift_bridgeObjectRetain();
    *(void *)(v0 + 136) = sub_1008FA0F0(v21, v22, v57);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "One time API to return the delegated location timestamp for %{public}s.", v20, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }

  uint64_t v25 = *(void *)(v0 + 168);
  static Date.distantPast.getter();
  uint64_t v26 = *(void *)(v25 + 16);
  *(void *)(v0 + 408) = v26;
  if (!v26)
  {
    uint64_t v45 = *(void *)(v0 + 336);
    uint64_t v46 = *(void *)(v0 + 272);
    uint64_t v47 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 280) + 56);
    swift_bridgeObjectRetain();
    v47(v45, 1, 1, v46);
    goto LABEL_40;
  }
  uint64_t v27 = *(void *)(v0 + 168);
  uint64_t v28 = *(void *)(v0 + 272);
  uint64_t v29 = *(void *)(v0 + 280);
  int v30 = *(_DWORD *)(v29 + 80);
  *(_DWORD *)(v0 + 544) = v30;
  *(void *)(v0 + 416) = *(void *)(v29 + 72);
  os_log_type_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16);
  *(void *)(v0 + 424) = v31;
  *(void *)(v0 + 432) = 0;
  uint64_t v32 = *(void *)(v0 + 336);
  uint64_t v33 = v27 + ((v30 + 32) & ~(unint64_t)v30);
  *(void *)(v0 + 440) = (v29 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  swift_bridgeObjectRetain();
  v31(v32, v33, v28);
  os_log_t v34 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v29 + 56);
  v34(v32, 0, 1, v28);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v32, 1, v28) == 1)
  {
LABEL_40:
    uint64_t v48 = *(void *)(v0 + 368);
    uint64_t v49 = *(void *)(v0 + 344);
    uint64_t v50 = *(void *)(v0 + 352);
    swift_bridgeObjectRelease();
    id v51 = objc_allocWithZone((Class)SPDelegatedLocationResult);
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    id v56 = [v51 initWithTimestamp:isa];

    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v48, v49);
    goto LABEL_41;
  }
  uint64_t v35 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 424);
  uint64_t v36 = *(void *)(v0 + 376);
  uint64_t v37 = *(void *)(v0 + 328);
  uint64_t v38 = *(void *)(v0 + 296);
  uint64_t v39 = *(void *)(v0 + 272);
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v0 + 280) + 32))(v38, *(void *)(v0 + 336), v39);
  v35(v37, v38, v39);
  v34(v37, 0, 1, v39);
  return _swift_task_switch(sub_10045B788, v36, 0);
}

uint64_t sub_10045B788()
{
  uint64_t v1 = v0[47];
  uint64_t v3 = v0[40];
  uint64_t v2 = v0[41];
  uint64_t v5 = v0[38];
  uint64_t v4 = v0[39];
  v0[56] = *(void *)(v1 + 136);
  sub_10001D074(v2, v3, &qword_101638CF0);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = v6 + v4;
  uint64_t v8 = swift_allocObject();
  v0[57] = v8;
  *(void *)(v8 + 16) = v1;
  sub_10001D608(v3, v8 + v6, &qword_101638CF0);
  *(unsigned char *)(v8 + v7) = 1;
  swift_retain();
  return _swift_task_switch(sub_10045B874, 0, 0);
}

uint64_t sub_10045B874()
{
  uint64_t v2 = v0[56];
  uint64_t v1 = v0[57];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[58] = v3;
  v3[2] = v2;
  v3[3] = sub_100485474;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[59] = v4;
  uint64_t v5 = sub_10000588C(&qword_10163B8C0);
  *uint64_t v4 = v0;
  v4[1] = sub_10045B98C;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 15, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_100075258, v3, v5);
}

uint64_t sub_10045B98C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 376);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 480) = *(void *)(v1 + 120);
  return _swift_task_switch(sub_10045BAFC, v2, 0);
}

uint64_t sub_10045BAFC()
{
  sub_10001DAB4(*(void *)(v0 + 328), &qword_101638CF0);
  return _swift_task_switch(sub_10045BB6C, 0, 0);
}

uint64_t sub_10045BB6C()
{
  uint64_t v50 = v0;
  uint64_t v1 = *(void *)(v0 + 480);
  if (*(void *)(v1 + 16))
  {
    uint64_t v2 = *(unsigned __int8 *)(*(void *)(v0 + 240) + 80);
    sub_100485A94(v1 + ((v2 + 32) & ~v2), *(void *)(v0 + 264), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = 1;
  }
  uint64_t v5 = *(void *)(v0 + 256);
  uint64_t v4 = *(void *)(v0 + 264);
  uint64_t v6 = *(void *)(v0 + 232);
  uint64_t v7 = *(void *)(v0 + 240);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(v4, v3, 1, v6);
  swift_bridgeObjectRelease();
  sub_10001D074(v4, v5, (uint64_t *)&unk_101638D10);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
  {
    uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 424);
    uint64_t v10 = *(void *)(v0 + 288);
    uint64_t v9 = *(void *)(v0 + 296);
    uint64_t v11 = *(void *)(v0 + 272);
    sub_10001DAB4(*(void *)(v0 + 256), (uint64_t *)&unk_101638D10);
    v8(v10, v9, v11);
    unint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    BOOL v14 = os_log_type_enabled(v12, v13);
    uint64_t v15 = *(void *)(v0 + 288);
    uint64_t v16 = *(void *)(v0 + 296);
    uint64_t v18 = *(void *)(v0 + 272);
    uint64_t v17 = *(void *)(v0 + 280);
    uint64_t v19 = *(void *)(v0 + 264);
    if (v14)
    {
      uint64_t v47 = *(void *)(v0 + 296);
      uint64_t v20 = swift_slowAlloc();
      uint64_t v49 = swift_slowAlloc();
      *(_DWORD *)uint64_t v20 = 141558275;
      *(void *)(v20 + 4) = 1752392040;
      *(_WORD *)(v20 + 12) = 2081;
      sub_100482848((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v20 + 14) = sub_1008FA0F0(v21, v22, &v49);
      swift_bridgeObjectRelease();
      uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
      v23(v15, v18);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Beacon %{private,mask.hash}s is not delegated", (uint8_t *)v20, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_10001DAB4(v19, (uint64_t *)&unk_101638D10);
      v23(v47, v18);
    }
    else
    {

      uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
      v27(v15, v18);
      sub_10001DAB4(v19, (uint64_t *)&unk_101638D10);
      v27(v16, v18);
    }
    uint64_t v28 = *(void *)(v0 + 432) + 1;
    if (v28 == *(void *)(v0 + 408))
    {
      (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 280) + 56))(*(void *)(v0 + 336), 1, 1, *(void *)(v0 + 272));
LABEL_12:
      uint64_t v35 = *(void *)(v0 + 368);
      uint64_t v36 = *(void *)(v0 + 344);
      uint64_t v37 = *(void *)(v0 + 352);
      swift_bridgeObjectRelease();
      id v38 = objc_allocWithZone((Class)SPDelegatedLocationResult);
      Class isa = Date._bridgeToObjectiveC()().super.isa;
      id v48 = [v38 initWithTimestamp:isa];

      swift_release();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v35, v36);
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      unint64_t v40 = *(uint64_t (**)(id))(v0 + 8);
      return v40(v48);
    }
    uint64_t v29 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 424);
    uint64_t v30 = *(void *)(v0 + 336);
    uint64_t v31 = *(void *)(v0 + 272);
    uint64_t v32 = *(void *)(v0 + 280);
    unint64_t v33 = *(void *)(v0 + 168)
        + ((*(unsigned __int8 *)(v0 + 544) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 544))
        + *(void *)(v0 + 416) * v28;
    *(void *)(v0 + 432) = v28;
    *(void *)(v0 + 440) = (v32 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
    v29(v30, v33, v31);
    os_log_t v34 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v32 + 56);
    v34(v30, 0, 1, v31);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31) == 1) {
      goto LABEL_12;
    }
    uint64_t v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 424);
    uint64_t v43 = *(void *)(v0 + 376);
    uint64_t v44 = *(void *)(v0 + 328);
    uint64_t v45 = *(void *)(v0 + 296);
    uint64_t v46 = *(void *)(v0 + 272);
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v0 + 280) + 32))(v45, *(void *)(v0 + 336), v46);
    v42(v44, v45, v46);
    v34(v44, 0, 1, v46);
    uint64_t v26 = sub_10045B788;
    uint64_t v25 = v43;
  }
  else
  {
    uint64_t v24 = *(void *)(v0 + 232);
    sub_100485510(*(void *)(v0 + 256), *(void *)(v0 + 248), (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    *(_DWORD *)(v0 + 548) = *(_DWORD *)(v24 + 20);
    uint64_t v25 = *(void *)(v0 + 392);
    uint64_t v26 = sub_10045C140;
  }
  return _swift_task_switch(v26, v25, 0);
}

uint64_t sub_10045C140()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 392) + 152);
  *(void *)(v0 + 488) = v1;
  return _swift_task_switch(sub_10045C164, v1, 0);
}

uint64_t sub_10045C164()
{
  *(void *)(v0 + 496) = *(void *)(*(void *)(v0 + 488) + 136);
  swift_retain();
  return _swift_task_switch(sub_10045C1D8, 0, 0);
}

uint64_t sub_10045C1D8()
{
  uint64_t v2 = v0[61];
  uint64_t v1 = v0[62];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[63] = v3;
  v3[2] = v1;
  v3[3] = sub_10001DAA0;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[64] = v4;
  uint64_t v5 = type metadata accessor for BeaconKeyManager(0);
  *uint64_t v4 = v0;
  v4[1] = sub_10045C2EC;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10001DAA8, v3, v5);
}

uint64_t sub_10045C2EC()
{
  uint64_t v1 = *v0;
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 520) = *(void *)(v1 + 128);
  return _swift_task_switch(sub_10045C448, 0, 0);
}

uint64_t sub_10045C448()
{
  uint64_t v1 = *(int *)(v0 + 548);
  uint64_t v2 = *(void *)(v0 + 248);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v0 + 528) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10045C504;
  uint64_t v4 = *(void *)(v0 + 184);
  return sub_10064EF3C(v4, v2 + v1);
}

uint64_t sub_10045C504()
{
  *(void *)(*(void *)v1 + 536) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10045CC04;
  }
  else {
    uint64_t v2 = sub_10045C618;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10045C618()
{
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v2 = *(void *)(v0 + 184);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 200) + 48))(v2, 1, v1) == 1)
  {
    uint64_t v3 = *(void *)(v0 + 344);
    uint64_t v4 = *(void *)(v0 + 352);
    uint64_t v5 = *(void *)(v0 + 224);
    sub_10001DAB4(v2, &qword_101641FB0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v5, 1, 1, v3);
  }
  else
  {
    uint64_t v6 = *(void *)(v0 + 224);
    uint64_t v7 = *(void *)(v0 + 208);
    sub_100485510(v2, v7, type metadata accessor for DelegatedBeaconMetadata);
    sub_10001D074(v7 + *(int *)(v1 + 24), v6, (uint64_t *)&unk_10163AC90);
    sub_100485AFC(v7, type metadata accessor for DelegatedBeaconMetadata);
  }
  uint64_t v8 = *(void *)(v0 + 344);
  uint64_t v9 = *(void *)(v0 + 352);
  uint64_t v11 = *(void *)(v0 + 216);
  uint64_t v10 = *(void *)(v0 + 224);
  swift_release();
  sub_10001D074(v10, v11, (uint64_t *)&unk_10163AC90);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v11, 1, v8) == 1)
  {
    sub_10001DAB4(*(void *)(v0 + 216), (uint64_t *)&unk_10163AC90);
    unint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      BOOL v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)BOOL v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Delegated publish hasn't happened on this device yet", v14, 2u);
      swift_slowDealloc();
    }
    uint64_t v15 = *(void *)(v0 + 296);
    uint64_t v16 = *(void *)(v0 + 272);
    uint64_t v17 = *(void *)(v0 + 280);
    uint64_t v18 = *(void *)(v0 + 264);
    uint64_t v19 = *(void *)(v0 + 248);
    uint64_t v20 = *(void *)(v0 + 224);

    sub_10001DAB4(v20, (uint64_t *)&unk_10163AC90);
    sub_100485AFC(v19, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    sub_10001DAB4(v18, (uint64_t *)&unk_101638D10);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v15, v16);
  }
  else
  {
    uint64_t v21 = *(void *)(v0 + 352);
    uint64_t v23 = *(void *)(v0 + 272);
    uint64_t v22 = *(void *)(v0 + 280);
    uint64_t v24 = *(void *)(v0 + 264);
    uint64_t v25 = *(void *)(v0 + 248);
    uint64_t v26 = *(void *)(v0 + 224);
    uint64_t v51 = *(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 32);
    uint64_t v52 = *(void *)(v0 + 296);
    v51(*(void *)(v0 + 360), *(void *)(v0 + 216), *(void *)(v0 + 344));
    char v27 = static Date.> infix(_:_:)();
    sub_10001DAB4(v26, (uint64_t *)&unk_10163AC90);
    sub_100485AFC(v25, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    sub_10001DAB4(v24, (uint64_t *)&unk_101638D10);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v52, v23);
    uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
    if (v27)
    {
      uint64_t v29 = *(void *)(v0 + 360);
      uint64_t v30 = *(void *)(v0 + 368);
      uint64_t v31 = *(void *)(v0 + 344);
      v28(v30, v31);
      v51(v30, v29, v31);
    }
    else
    {
      v28(*(void *)(v0 + 360), *(void *)(v0 + 344));
    }
  }
  uint64_t v32 = *(void *)(v0 + 432) + 1;
  if (v32 == *(void *)(v0 + 408))
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 280) + 56))(*(void *)(v0 + 336), 1, 1, *(void *)(v0 + 272));
LABEL_14:
    uint64_t v39 = *(void *)(v0 + 368);
    uint64_t v40 = *(void *)(v0 + 344);
    uint64_t v41 = *(void *)(v0 + 352);
    swift_bridgeObjectRelease();
    id v42 = objc_allocWithZone((Class)SPDelegatedLocationResult);
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    id v53 = [v42 initWithTimestamp:isa];

    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v39, v40);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v44 = *(uint64_t (**)(id))(v0 + 8);
    return v44(v53);
  }
  unint64_t v33 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 424);
  uint64_t v34 = *(void *)(v0 + 336);
  uint64_t v35 = *(void *)(v0 + 272);
  uint64_t v36 = *(void *)(v0 + 280);
  unint64_t v37 = *(void *)(v0 + 168)
      + ((*(unsigned __int8 *)(v0 + 544) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 544))
      + *(void *)(v0 + 416) * v32;
  *(void *)(v0 + 432) = v32;
  *(void *)(v0 + 440) = (v36 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v33(v34, v37, v35);
  id v38 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v36 + 56);
  v38(v34, 0, 1, v35);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35) == 1) {
    goto LABEL_14;
  }
  uint64_t v46 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 424);
  uint64_t v47 = *(void *)(v0 + 376);
  uint64_t v48 = *(void *)(v0 + 328);
  uint64_t v49 = *(void *)(v0 + 296);
  uint64_t v50 = *(void *)(v0 + 272);
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v0 + 280) + 32))(v49, *(void *)(v0 + 336), v50);
  v46(v48, v49, v50);
  v38(v48, 0, 1, v50);
  return _swift_task_switch(sub_10045B788, v47, 0);
}

uint64_t sub_10045CC04()
{
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Database error", v3, 2u);
    swift_slowDealloc();
  }
  uint64_t v4 = *(void *)(v0 + 344);
  uint64_t v5 = *(void *)(v0 + 352);
  uint64_t v6 = *(void *)(v0 + 224);
  swift_errorRelease();

  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v6, 1, 1, v4);
  uint64_t v7 = *(void *)(v0 + 344);
  uint64_t v8 = *(void *)(v0 + 352);
  uint64_t v10 = *(void *)(v0 + 216);
  uint64_t v9 = *(void *)(v0 + 224);
  swift_release();
  sub_10001D074(v9, v10, (uint64_t *)&unk_10163AC90);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v10, 1, v7) == 1)
  {
    sub_10001DAB4(*(void *)(v0 + 216), (uint64_t *)&unk_10163AC90);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      os_log_type_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Delegated publish hasn't happened on this device yet", v13, 2u);
      swift_slowDealloc();
    }
    uint64_t v14 = *(void *)(v0 + 296);
    uint64_t v15 = *(void *)(v0 + 272);
    uint64_t v16 = *(void *)(v0 + 280);
    uint64_t v17 = *(void *)(v0 + 264);
    uint64_t v18 = *(void *)(v0 + 248);
    uint64_t v19 = *(void *)(v0 + 224);

    sub_10001DAB4(v19, (uint64_t *)&unk_10163AC90);
    sub_100485AFC(v18, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    sub_10001DAB4(v17, (uint64_t *)&unk_101638D10);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
  }
  else
  {
    uint64_t v20 = *(void *)(v0 + 352);
    uint64_t v22 = *(void *)(v0 + 272);
    uint64_t v21 = *(void *)(v0 + 280);
    uint64_t v23 = *(void *)(v0 + 264);
    uint64_t v24 = *(void *)(v0 + 248);
    uint64_t v25 = *(void *)(v0 + 224);
    uint64_t v50 = *(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32);
    uint64_t v51 = *(void *)(v0 + 296);
    v50(*(void *)(v0 + 360), *(void *)(v0 + 216), *(void *)(v0 + 344));
    char v26 = static Date.> infix(_:_:)();
    sub_10001DAB4(v25, (uint64_t *)&unk_10163AC90);
    sub_100485AFC(v24, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
    sub_10001DAB4(v23, (uint64_t *)&unk_101638D10);
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v51, v22);
    char v27 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
    if (v26)
    {
      uint64_t v28 = *(void *)(v0 + 360);
      uint64_t v29 = *(void *)(v0 + 368);
      uint64_t v30 = *(void *)(v0 + 344);
      v27(v29, v30);
      v50(v29, v28, v30);
    }
    else
    {
      v27(*(void *)(v0 + 360), *(void *)(v0 + 344));
    }
  }
  uint64_t v31 = *(void *)(v0 + 432) + 1;
  if (v31 == *(void *)(v0 + 408))
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 280) + 56))(*(void *)(v0 + 336), 1, 1, *(void *)(v0 + 272));
LABEL_13:
    uint64_t v38 = *(void *)(v0 + 368);
    uint64_t v39 = *(void *)(v0 + 344);
    uint64_t v40 = *(void *)(v0 + 352);
    swift_bridgeObjectRelease();
    id v41 = objc_allocWithZone((Class)SPDelegatedLocationResult);
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    id v52 = [v41 initWithTimestamp:isa];

    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v38, v39);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v43 = *(uint64_t (**)(id))(v0 + 8);
    return v43(v52);
  }
  uint64_t v32 = *(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 424);
  uint64_t v33 = *(void *)(v0 + 336);
  uint64_t v34 = *(void *)(v0 + 272);
  uint64_t v35 = *(void *)(v0 + 280);
  unint64_t v36 = *(void *)(v0 + 168)
      + ((*(unsigned __int8 *)(v0 + 544) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0 + 544))
      + *(void *)(v0 + 416) * v31;
  *(void *)(v0 + 432) = v31;
  *(void *)(v0 + 440) = (v35 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v32(v33, v36, v34);
  unint64_t v37 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v35 + 56);
  v37(v33, 0, 1, v34);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34) == 1) {
    goto LABEL_13;
  }
  uint64_t v45 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 424);
  uint64_t v46 = *(void *)(v0 + 376);
  uint64_t v47 = *(void *)(v0 + 328);
  uint64_t v48 = *(void *)(v0 + 296);
  uint64_t v49 = *(void *)(v0 + 272);
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v0 + 280) + 32))(v48, *(void *)(v0 + 336), v49);
  v45(v47, v48, v49);
  v37(v47, 0, 1, v49);
  return _swift_task_switch(sub_10045B788, v46, 0);
}

void *sub_10045D1CC(uint64_t a1, double a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_10163B1D0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for LocalFindableAccessoryRecord();
  uint64_t v62 = *(void *)(v9 - 8);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v63 = (uint64_t)v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v61 = (uint64_t)v54 - v12;
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)v54 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Date.trustedNow.getter((uint64_t)v16);
  uint64_t v60 = a1;
  uint64_t v64 = a1;
  double v65 = a2;
  uint64_t v66 = v2;
  uint64_t v67 = v16;
  uint64_t v59 = v16;
  sub_10000588C((uint64_t *)&unk_101653DC0);
  OS_dispatch_queue.sync<A>(execute:)();
  if (*(void *)(v70 + 16))
  {
    uint64_t v58 = v13;
    uint64_t v17 = v70;
    sub_10047BDB0(v70);
    if (qword_101636CD8 != -1) {
      swift_once();
    }
    OS_dispatch_queue.sync<A>(execute:)();
    char v18 = sub_1010AC18C(v69[0]);
    swift_bridgeObjectRelease();
    uint64_t v19 = sub_101158C68((uint64_t)&off_1015A15D0);
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v20 = swift_bridgeObjectRetain();
    uint64_t v21 = sub_10047A83C(v20, v17, (uint64_t)&off_1015A15A8, v18 & 1, v3, v19);
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v22 = sub_10044AAE4(v21);
    swift_bridgeObjectRetain();
    uint64_t v23 = swift_bridgeObjectRetain();
    uint64_t v24 = sub_10047AA98(v23, v17, (uint64_t)v22);
    swift_bridgeObjectRelease();
    uint64_t v57 = v17;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (*(void *)(v21 + 16))
    {
      uint64_t v25 = v24;
      char v26 = sub_100A7072C(0, 1, 1, _swiftEmptyArrayStorage);
      unint64_t v28 = v26[2];
      unint64_t v27 = v26[3];
      if (v28 >= v27 >> 1) {
        char v26 = sub_100A7072C((void *)(v27 > 1), v28 + 1, 1, v26);
      }
      uint64_t v13 = v58;
      _OWORD v26[2] = v28 + 1;
      uint64_t v29 = &v26[2 * v28];
      uint64_t v29[4] = v21;
      *((unsigned char *)v29 + 40) = 1;
      uint64_t v24 = v25;
    }
    else
    {
      swift_bridgeObjectRelease();
      char v26 = _swiftEmptyArrayStorage;
      uint64_t v13 = v58;
    }
    id v56 = v26;
    uint64_t v35 = v24[2];
    if (v35)
    {
      v54[2] = 0;
      uint64_t v55 = v14;
      uint64_t v36 = (uint64_t)(v24 + 4);
      unint64_t v37 = (void (**)(char *, void, uint64_t, uint64_t))(v62 + 56);
      uint64_t v38 = (unsigned int (**)(char *, uint64_t, uint64_t))(v62 + 48);
      v54[1] = v24;
      swift_bridgeObjectRetain();
      uint64_t v39 = _swiftEmptyArrayStorage;
      do
      {
        sub_10001D010(v36, (uint64_t)v69);
        sub_10001D010((uint64_t)v69, (uint64_t)v68);
        sub_10000588C((uint64_t *)&unk_10164DBF0);
        int v40 = swift_dynamicCast();
        (*v37)(v8, v40 ^ 1u, 1, v9);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v69);
        if ((*v38)(v8, 1, v9) == 1)
        {
          sub_10001DAB4((uint64_t)v8, (uint64_t *)&unk_10163B1D0);
        }
        else
        {
          uint64_t v41 = v61;
          sub_100485510((uint64_t)v8, v61, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
          sub_100485510(v41, v63, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v39 = (void *)sub_100A706F8(0, v39[2] + 1, 1, (unint64_t)v39);
          }
          unint64_t v43 = v39[2];
          unint64_t v42 = v39[3];
          if (v43 >= v42 >> 1) {
            uint64_t v39 = (void *)sub_100A706F8(v42 > 1, v43 + 1, 1, (unint64_t)v39);
          }
          v39[2] = v43 + 1;
          sub_100485510(v63, (uint64_t)v39+ ((*(unsigned __int8 *)(v62 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v62 + 80))+ *(void *)(v62 + 72) * v43, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
        }
        v36 += 40;
        --v35;
      }
      while (v35);
      swift_bridgeObjectRelease_n();
      uint64_t v13 = v58;
      uint64_t v14 = v55;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v39 = _swiftEmptyArrayStorage;
    }
    uint64_t v44 = sub_10044ACC8((uint64_t)v39);
    uint64_t v45 = swift_bridgeObjectRetain();
    uint64_t v46 = sub_10047AA98(v45, v57, (uint64_t)v44);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v39[2])
    {
      uint64_t v34 = v56;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v34 = sub_100A7072C(0, v34[2] + 1, 1, v34);
      }
      unint64_t v48 = v34[2];
      unint64_t v47 = v34[3];
      if (v48 >= v47 >> 1) {
        uint64_t v34 = sub_100A7072C((void *)(v47 > 1), v48 + 1, 1, v34);
      }
      void v34[2] = v48 + 1;
      uint64_t v49 = &v34[2 * v48];
      v49[4] = v39;
      *((unsigned char *)v49 + 40) = 2;
      if (v46[2]) {
        goto LABEL_32;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v34 = v56;
      if (v46[2])
      {
LABEL_32:
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v34 = sub_100A7072C(0, v34[2] + 1, 1, v34);
        }
        unint64_t v51 = v34[2];
        unint64_t v50 = v34[3];
        if (v51 >= v50 >> 1) {
          uint64_t v34 = sub_100A7072C((void *)(v50 > 1), v51 + 1, 1, v34);
        }
        void v34[2] = v51 + 1;
        id v52 = &v34[2 * v51];
        v52[4] = v46;
        *((unsigned char *)v52 + 40) = 0;
        goto LABEL_39;
      }
    }
    swift_bridgeObjectRelease();
    goto LABEL_39;
  }
  swift_bridgeObjectRelease();
  if (qword_101636B10 != -1) {
    swift_once();
  }
  uint64_t v30 = type metadata accessor for Logger();
  sub_100010324(v30, (uint64_t)qword_10170DEB8);
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v33 = 0;
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "Skipping fetching locations from server. No beacons remaining to fetch.", v33, 2u);
    swift_slowDealloc();
  }

  uint64_t v34 = _swiftEmptyArrayStorage;
LABEL_39:
  (*(void (**)(char *, uint64_t))(v14 + 8))(v59, v13);
  return v34;
}

uint64_t sub_10045DA2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>, double a5@<D0>)
{
  uint64_t v26 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v13 = (char *)v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(double *)&v27[2] = a5;
  v27[3] = a2;
  v27[4] = a3;
  swift_bridgeObjectRetain();
  uint64_t v14 = sub_1000A441C((uint64_t)sub_10048323C, v27, a1);
  int64_t v15 = *(void *)(v14 + 16);
  if (v15)
  {
    v24[1] = v5;
    uint64_t v25 = a4;
    uint64_t v31 = _swiftEmptyArrayStorage;
    sub_1000B7034(0, v15, 0);
    v24[0] = v14;
    uint64_t v16 = v14 + 32;
    uint64_t v17 = v31;
    do
    {
      sub_10001D010(v16, (uint64_t)v28);
      uint64_t v19 = v29;
      uint64_t v18 = v30;
      sub_10001CD44(v28, v29);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v18 + 8) + 8) + 32))(v19);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v28);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B7034(0, v17[2] + 1, 1);
        uint64_t v17 = v31;
      }
      unint64_t v21 = v17[2];
      unint64_t v20 = v17[3];
      if (v21 >= v20 >> 1)
      {
        sub_1000B7034(v20 > 1, v21 + 1, 1);
        uint64_t v17 = v31;
      }
      v17[2] = v21 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))((unint64_t)v17+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(void *)(v11 + 72) * v21, v13, v26);
      uint64_t v31 = v17;
      v16 += 40;
      --v15;
    }
    while (v15);
    swift_bridgeObjectRelease();
    a4 = v25;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v17 = _swiftEmptyArrayStorage;
  }
  uint64_t v22 = sub_101158244((uint64_t)v17);
  uint64_t result = swift_bridgeObjectRelease();
  *a4 = v22;
  return result;
}

uint64_t sub_10045DCA8(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v207 = a2;
  uint64_t v208 = a3;
  uint64_t v206 = type metadata accessor for Logger();
  uint64_t v209 = *(void *)(v206 - 8);
  uint64_t v4 = __chkstk_darwin(v206);
  uint64_t v6 = (char *)&v184 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  long long v203 = (char *)&v184 - v7;
  uint64_t v217 = type metadata accessor for BeaconObservation();
  uint64_t v219 = *(void *)(v217 - 8);
  uint64_t v8 = __chkstk_darwin(v217);
  unint64_t v218 = (char **)((char *)&v184 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v8);
  os_log_t v216 = (os_log_t)((char *)&v184 - v10);
  uint64_t v11 = type metadata accessor for UUID();
  v214 = *(uint64_t **)(v11 - 8);
  uint64_t v215 = v11;
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v190 = (uint64_t)&v184 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v192 = (char *)&v184 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v201 = (char *)&v184 - v17;
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v184 - v18;
  uint64_t v20 = sub_10000588C((uint64_t *)&unk_101655530);
  __chkstk_darwin(v20 - 8);
  uint64_t v198 = (uint64_t)&v184 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v23 = __chkstk_darwin(v22 - 8);
  uint64_t v185 = (uint64_t)&v184 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = __chkstk_darwin(v23);
  double v186 = (char *)&v184 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  long long v200 = (char *)&v184 - v28;
  __chkstk_darwin(v27);
  uint64_t v199 = (char *)&v184 - v29;
  uint64_t v30 = type metadata accessor for Date();
  uint64_t v195 = *(void *)(v30 - 8);
  uint64_t v31 = __chkstk_darwin(v30);
  uint64_t v188 = (char *)&v184 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = __chkstk_darwin(v31);
  os_log_t v35 = (os_log_t)((char *)&v184 - v34);
  uint64_t v36 = __chkstk_darwin(v33);
  uint64_t v38 = (char *)&v184 - v37;
  uint64_t v39 = __chkstk_darwin(v36);
  double v184 = (char *)&v184 - v40;
  uint64_t v41 = __chkstk_darwin(v39);
  uint64_t v194 = (char *)&v184 - v42;
  uint64_t v43 = __chkstk_darwin(v41);
  uint64_t v193 = (char *)&v184 - v44;
  uint64_t v45 = __chkstk_darwin(v43);
  long long v202 = (char *)&v184 - v46;
  uint64_t v47 = __chkstk_darwin(v45);
  uint64_t v212 = (char *)&v184 - v48;
  uint64_t v49 = __chkstk_darwin(v47);
  int64_t v210 = (char *)&v184 - v50;
  uint64_t v51 = __chkstk_darwin(v49);
  v213 = (char *)&v184 - v52;
  __chkstk_darwin(v51);
  unint64_t v54 = (unint64_t)&v184 - v53;
  if (qword_101636CB8 != -1) {
    goto LABEL_59;
  }
  while (1)
  {
    uint64_t v55 = (void *)a1;
    uint64_t v57 = *(void *)(a1 + 24);
    uint64_t v56 = *(void *)(a1 + 32);
    uint64_t v211 = v55;
    sub_10001CD44(v55, v57);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v56 + 8) + 8) + 32))(v57);
    sub_10000588C(&qword_101655540);
    uint64_t v58 = v204;
    OS_dispatch_queue.sync<A>(execute:)();
    uint64_t v204 = v58;
    uint64_t v59 = v222;
    uint64_t v60 = v222[2];
    os_log_t v191 = v35;
    uint64_t v187 = v38;
    id v197 = v19;
    uint64_t v205 = (char *)v54;
    double v189 = v6;
    if (!v60 || (unint64_t v61 = sub_1007240CC((uint64_t)v19), (v62 & 1) == 0))
    {
      swift_bridgeObjectRelease();
      a1 = (uint64_t)_swiftEmptyArrayStorage;
      goto LABEL_18;
    }
    uint64_t v63 = *(void *)(v59[7] + 8 * v61);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v64 = sub_1007100C0(v63);
    swift_bridgeObjectRelease();
    size_t v65 = sub_100B752E8((uint64_t)v64);
    swift_release();
    a1 = (uint64_t)_swiftEmptyArrayStorage;
    v222 = _swiftEmptyArrayStorage;
    uint64_t v6 = *(char **)(v65 + 16);
    if (!v6) {
      break;
    }
    unint64_t v54 = 0;
    os_log_t v35 = v216;
    uint64_t v66 = v217;
    while (v54 < *(void *)(v65 + 16))
    {
      uint64_t v19 = (char *)((*(unsigned __int8 *)(v219 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v219 + 80));
      uint64_t v38 = *(char **)(v219 + 72);
      sub_100485A94((uint64_t)&v19[v65 + (void)v38 * v54], (uint64_t)v35, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      if (*((unsigned char *)&v35->isa + *(int *)(v66 + 24)) == 5)
      {
        uint64_t v67 = (uint64_t)v35;
        uint64_t v68 = v30;
        sub_100485510(v67, (uint64_t)v218, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1000B77F0(0, *(void *)(a1 + 16) + 1, 1);
        }
        a1 = (uint64_t)v222;
        unint64_t v70 = v222[2];
        unint64_t v69 = v222[3];
        if (v70 >= v69 >> 1)
        {
          sub_1000B77F0(v69 > 1, v70 + 1, 1);
          a1 = (uint64_t)v222;
        }
        *(void *)(a1 + 16) = v70 + 1;
        sub_100485510((uint64_t)v218, (uint64_t)&v19[a1 + v70 * (void)v38], (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        uint64_t v30 = v68;
        os_log_t v35 = v216;
        uint64_t v66 = v217;
      }
      else
      {
        sub_100485AFC((uint64_t)v35, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      }
      if (v6 == (char *)++v54)
      {
        a1 = (uint64_t)v222;
        unint64_t v54 = (unint64_t)v205;
        goto LABEL_17;
      }
    }
    __break(1u);
LABEL_59:
    swift_once();
  }
LABEL_17:
  swift_release();
LABEL_18:
  uint64_t v71 = v195;
  double v72 = v211;
  uint64_t v73 = v214 + 1;
  uint64_t v74 = (char **)v214[1];
  ((void (*)(char *, uint64_t))v74)(v197, v215);
  uint64_t v75 = v198;
  sub_100E4D5E0(a1, v198);
  swift_bridgeObjectRelease();
  uint64_t v76 = v217;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v219 + 48))(v75, 1, v217) == 1)
  {
    sub_10001DAB4(v75, (uint64_t *)&unk_101655530);
    uint64_t v77 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v71 + 56);
    uint64_t v78 = (uint64_t)v199;
    v77(v199, 1, 1, v30);
LABEL_21:
    static Date.distantPast.getter();
    sub_10001DAB4(v78, (uint64_t *)&unk_10163AC90);
    goto LABEL_23;
  }
  uint64_t v79 = v75 + *(int *)(v76 + 20);
  uint64_t v78 = (uint64_t)v199;
  (*(void (**)(char *, uint64_t, uint64_t))(v71 + 16))(v199, v79, v30);
  sub_100485AFC(v75, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
  uint64_t v77 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v71 + 56);
  v77((char *)v78, 0, 1, v30);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v71 + 48))(v78, 1, v30) == 1) {
    goto LABEL_21;
  }
  (*(void (**)(unint64_t, uint64_t, uint64_t))(v71 + 32))(v54, v78, v30);
LABEL_23:
  Date.addingTimeInterval(_:)();
  uint64_t v80 = v72[3];
  uint64_t v81 = v72[4];
  sub_10001CD44(v72, v80);
  uint64_t v82 = (uint64_t)v201;
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v81 + 8) + 8) + 32))(v80);
  uint64_t v83 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_beaconUUIDsLocating;
  uint64_t v84 = *(void *)(v207 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_beaconUUIDsLocating);
  if (*(void *)(v84 + 16))
  {
    swift_bridgeObjectRetain();
    unint64_t v85 = sub_1007240CC(v82);
    if (v86)
    {
      uint64_t v87 = *(void (**)(char *, unint64_t, uint64_t))(v71 + 16);
      unint64_t v88 = *(void *)(v84 + 56) + *(void *)(v71 + 72) * v85;
      uint64_t v219 = v83;
      uint64_t v89 = v200;
      v87(v200, v88, v30);
      v77(v89, 0, 1, v30);
      uint64_t v90 = (uint64_t)v89;
      uint64_t v83 = v219;
    }
    else
    {
      uint64_t v91 = v200;
      v77(v200, 1, 1, v30);
      uint64_t v90 = (uint64_t)v91;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v90 = (uint64_t)v200;
    v77(v200, 1, 1, v30);
  }
  v214 = v73;
  ((void (*)(uint64_t, uint64_t))v74)(v82, v215);
  uint64_t v92 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v71 + 48);
  int v93 = v92(v90, 1, v30);
  unint64_t v218 = v74;
  if (v93 == 1)
  {
    static Date.distantPast.getter();
    sub_10001DAB4(v90, (uint64_t *)&unk_10163AC90);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t))(v71 + 32))(v210, v90, v30);
  }
  Date.addingTimeInterval(_:)();
  unint64_t v94 = v208;
  if (static Date.> infix(_:_:)())
  {
    uint64_t v95 = v209;
    if (qword_101636B10 != -1) {
      swift_once();
    }
    uint64_t v96 = v206;
    uint64_t v97 = sub_100010324(v206, (uint64_t)qword_10170DEB8);
    (*(void (**)(char *, uint64_t, uint64_t))(v95 + 16))(v203, v97, v96);
    sub_10001D010((uint64_t)v211, (uint64_t)&v222);
    uint64_t v98 = *(void (**)(char *, char *, uint64_t))(v71 + 16);
    os_log_type_t v99 = v212;
    v98(v202, v212, v30);
    uint64_t v100 = v193;
    v98(v193, v99, v30);
    id v101 = v194;
    v98(v194, v208, v30);
    uint64_t v102 = Logger.logObject.getter();
    os_log_type_t v103 = static os_log_type_t.default.getter();
    int v104 = v103;
    if (os_log_type_enabled(v102, v103))
    {
      uint64_t v105 = swift_slowAlloc();
      uint64_t v106 = swift_slowAlloc();
      uint64_t v219 = v106;
      *(_DWORD *)uint64_t v105 = 141558787;
      uint64_t v220 = 1752392040;
      v221 = (void *)v106;
      uint64_t v107 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v105 + 12) = 2081;
      os_log_t v216 = (os_log_t)(v105 + 14);
      LODWORD(v217) = v104;
      uint64_t v108 = v223;
      uint64_t v109 = v224;
      sub_10001CD44(&v222, v223);
      uint64_t v110 = v192;
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v109 + 8) + 8) + 32))(v108);
      sub_100482848((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v111 = v215;
      uint64_t v112 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v114 = v113;
      ((void (*)(char *, uint64_t))v218)(v110, v111);
      uint64_t v220 = sub_1008FA0F0(v112, v114, (uint64_t *)&v221);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v222);
      *(_WORD *)(v105 + 22) = 2082;
      uint64_t v115 = v202;
      uint64_t v116 = Date.debugDescription.getter();
      uint64_t v220 = sub_1008FA0F0(v116, v117, (uint64_t *)&v221);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      unint64_t v118 = *(void (**)(char *, uint64_t))(v71 + 8);
      v118(v115, v30);
      *(_WORD *)(v105 + 32) = 2050;
      os_log_t v119 = v194;
      uint64_t v120 = v193;
      Date.timeIntervalSince(_:)();
      uint64_t v220 = v121;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v118(v120, v30);
      v118(v119, v30);
      _os_log_impl((void *)&_mh_execute_header, v102, (os_log_type_t)v217, "Not fetching locations for beacon %{private,mask.hash}s.\nWaiting until %{public}s, %{public}f seconds due to locating in progress.", (uint8_t *)v105, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v209 + 8))(v203, v206);
LABEL_42:
      v118(v212, v107);
      v118(v210, v107);
      v118(v213, v107);
      v118(v205, v107);
      return 0;
    }

    id v150 = *(void (**)(char *, uint64_t))(v71 + 8);
    v150(v100, v30);
    v150(v101, v30);
    v150(v202, v30);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v222);
    (*(void (**)(char *, uint64_t))(v209 + 8))(v203, v96);
    v150(v99, v30);
    v150(v210, v30);
    unint64_t v151 = v213;
    goto LABEL_47;
  }
  sub_100482848((unint64_t *)&qword_1016605E0, (void (*)(uint64_t))&type metadata accessor for Date);
  char v122 = dispatch thunk of static Comparable.< infix(_:_:)();
  uint64_t v123 = v209;
  if (v122)
  {
    if (qword_101636B10 != -1) {
      swift_once();
    }
    uint64_t v124 = v206;
    uint64_t v125 = sub_100010324(v206, (uint64_t)qword_10170DEB8);
    os_log_t v126 = v189;
    (*(void (**)(char *, uint64_t, uint64_t))(v123 + 16))(v189, v125, v124);
    sub_10001D010((uint64_t)v211, (uint64_t)&v222);
    uint64_t v127 = *(void (**)(char *, char *, uint64_t))(v71 + 16);
    unint64_t v128 = v187;
    os_log_type_t v129 = v213;
    v127(v187, v213, v30);
    v127((char *)v191, v129, v30);
    int v130 = v188;
    v127(v188, v208, v30);
    uint64_t v131 = Logger.logObject.getter();
    os_log_type_t v132 = static os_log_type_t.default.getter();
    int v133 = v132;
    if (os_log_type_enabled(v131, v132))
    {
      uint64_t v134 = swift_slowAlloc();
      uint64_t v135 = swift_slowAlloc();
      uint64_t v219 = v135;
      *(_DWORD *)uint64_t v134 = 141558787;
      uint64_t v220 = 1752392040;
      v221 = (void *)v135;
      uint64_t v107 = v30;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v134 + 12) = 2081;
      uint64_t v211 = (void *)(v134 + 14);
      os_log_t v216 = v131;
      LODWORD(v217) = v133;
      uint64_t v136 = v223;
      uint64_t v137 = v224;
      sub_10001CD44(&v222, v223);
      unint64_t v138 = v192;
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v137 + 8) + 8) + 32))(v136);
      sub_100482848((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      unint64_t v139 = v128;
      uint64_t v140 = v215;
      uint64_t v141 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v143 = v142;
      ((void (*)(char *, uint64_t))v218)(v138, v140);
      uint64_t v220 = sub_1008FA0F0(v141, v143, (uint64_t *)&v221);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v222);
      *(_WORD *)(v134 + 22) = 2082;
      uint64_t v144 = Date.debugDescription.getter();
      uint64_t v220 = sub_1008FA0F0(v144, v145, (uint64_t *)&v221);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      unint64_t v118 = *(void (**)(char *, uint64_t))(v71 + 8);
      v118(v139, v30);
      *(_WORD *)(v134 + 32) = 2050;
      unint64_t v146 = v188;
      os_log_t v147 = v191;
      Date.timeIntervalSince(_:)();
      uint64_t v220 = v148;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      v118((char *)v147, v30);
      v118(v146, v30);
      os_log_t v149 = v216;
      _os_log_impl((void *)&_mh_execute_header, v216, (os_log_type_t)v217, "Not fetching locations for beacon %{private,mask.hash}s.\nWaiting until %{public}s, %{public}f seconds.", (uint8_t *)v134, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      (*(void (**)(char *, uint64_t))(v209 + 8))(v189, v206);
      goto LABEL_42;
    }

    id v150 = *(void (**)(char *, uint64_t))(v71 + 8);
    v150((char *)v191, v30);
    v150(v130, v30);
    v150(v128, v30);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v222);
    (*(void (**)(char *, uint64_t))(v209 + 8))(v126, v124);
    v150(v212, v30);
    v150(v210, v30);
    unint64_t v151 = v129;
LABEL_47:
    v150(v151, v30);
    v150(v205, v30);
    return 0;
  }
  uint64_t v152 = v211[3];
  uint64_t v153 = v211[4];
  sub_10001CD44(v211, v152);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v153 + 8) + 8) + 32))(v152);
  uint64_t v154 = (uint64_t)v186;
  (*(void (**)(char *, char *, uint64_t))(v71 + 16))(v186, v94, v30);
  v77((char *)v154, 0, 1, v30);
  v222 = *(void **)(v207 + v83);
  if (v92(v154, 1, v30) == 1)
  {
    swift_bridgeObjectRetain();
    sub_10001DAB4(v154, (uint64_t *)&unk_10163AC90);
    uint64_t v155 = v185;
    uint64_t v156 = v190;
    sub_10016488C(v190, v185);
    double v157 = (void (*)(char *, uint64_t))v218;
    ((void (*)(uint64_t, uint64_t))v218)(v156, v215);
    sub_10001DAB4(v155, (uint64_t *)&unk_10163AC90);
  }
  else
  {
    uint64_t v160 = (uint64_t)v184;
    (*(void (**)(char *, uint64_t, uint64_t))(v71 + 32))(v184, v154, v30);
    swift_bridgeObjectRetain();
    uint64_t v161 = (uint64_t)v222;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v221 = (void *)v161;
    uint64_t v163 = v190;
    sub_10016E75C(v160, v190, isUniquelyReferenced_nonNull_native);
    v222 = v221;
    swift_bridgeObjectRelease();
    double v157 = (void (*)(char *, uint64_t))v218;
    ((void (*)(uint64_t, uint64_t))v218)(v163, v215);
  }
  uint64_t v164 = (uint64_t)v222;
  uint64_t v165 = *(void *)(v207 + v83);
  *(void *)(v207 + v83) = v222;
  swift_bridgeObjectRetain();
  char v166 = sub_100DF72BC(v165, v164);
  swift_bridgeObjectRelease();
  if ((v166 & 1) == 0) {
    sub_100A9E7EC(13);
  }
  swift_bridgeObjectRelease();
  uint64_t v167 = v206;
  if (qword_101636B10 != -1) {
    swift_once();
  }
  sub_100010324(v167, (uint64_t)qword_10170DEB8);
  sub_10001D010((uint64_t)v211, (uint64_t)&v222);
  double v168 = Logger.logObject.getter();
  os_log_type_t v169 = static os_log_type_t.default.getter();
  int v170 = v169;
  if (os_log_type_enabled(v168, v169))
  {
    uint64_t v171 = swift_slowAlloc();
    uint64_t v172 = swift_slowAlloc();
    uint64_t v217 = v172;
    *(_DWORD *)uint64_t v171 = 141558275;
    uint64_t v220 = 1752392040;
    v221 = (void *)v172;
    uint64_t v219 = v30;
    uint64_t v173 = v71;
    v214 = (uint64_t *)&v221;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v171 + 12) = 2081;
    uint64_t v211 = (void *)(v171 + 14);
    LODWORD(v216) = v170;
    uint64_t v174 = v223;
    uint64_t v175 = v224;
    sub_10001CD44(&v222, v223);
    os_log_t v176 = v192;
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v175 + 8) + 8) + 32))(v174);
    sub_100482848((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v177 = v215;
    uint64_t v178 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v180 = v179;
    v157(v176, v177);
    uint64_t v220 = sub_1008FA0F0(v178, v180, (uint64_t *)&v221);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v222);
    _os_log_impl((void *)&_mh_execute_header, v168, (os_log_type_t)v216, "Added ACSN locating state for beacon: %{private,mask.hash}s.", (uint8_t *)v171, 0x16u);
    uint64_t v158 = 1;
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v181 = *(void (**)(char *, uint64_t))(v173 + 8);
    uint64_t v182 = v219;
    v181(v212, v219);
    v181(v210, v182);
    v181(v213, v182);
    v181(v205, v182);
  }
  else
  {

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v222);
    double v183 = *(void (**)(char *, uint64_t))(v71 + 8);
    v183(v212, v30);
    v183(v210, v30);
    v183(v213, v30);
    v183(v205, v30);
    return 1;
  }
  return v158;
}

BOOL sub_10045F6B0(void *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v80 = a6;
  uint64_t v71 = a5;
  LODWORD(v90) = a4;
  uint64_t v91 = (char *)a3;
  uint64_t v93 = a2;
  uint64_t v7 = sub_10000588C((uint64_t *)&unk_101653C90);
  __chkstk_darwin(v7 - 8);
  uint64_t v78 = (char *)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = sub_10000588C(&qword_101645750);
  uint64_t v79 = *(void *)(v88 - 8);
  uint64_t v9 = __chkstk_darwin(v88);
  uint64_t v76 = (char *)&v70 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v77 = (uint64_t)&v70 - v11;
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v86 = *(void *)(v12 - 8);
  uint64_t v87 = v12;
  uint64_t v13 = __chkstk_darwin(v12);
  double v72 = (char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v73 = (char *)&v70 - v16;
  __chkstk_darwin(v15);
  unint64_t v85 = (char *)&v70 - v17;
  uint64_t v18 = sub_10000588C((uint64_t *)&unk_101653CA0);
  uint64_t v19 = __chkstk_darwin(v18 - 8);
  uint64_t v74 = (char *)&v70 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  uint64_t v75 = (uint64_t)&v70 - v21;
  uint64_t v22 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v22 - 8);
  uint64_t v83 = (char *)&v70 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v81 = *(void *)(v24 - 8);
  uint64_t v82 = v24;
  __chkstk_darwin(v24);
  uint64_t v84 = (uint64_t)&v70 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_10000588C((uint64_t *)&unk_101653D50);
  __chkstk_darwin(v26 - 8);
  uint64_t v28 = (char *)&v70 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v92 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v89 = (uint64_t)&v70 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for UUID();
  uint64_t v32 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v34 = (char *)&v70 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = a1[3];
  uint64_t v35 = a1[4];
  sub_10001CD44(a1, v36);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v35 + 8) + 8) + 32))(v36);
  LOBYTE(v35) = sub_100DC7280((uint64_t)v34, v93);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v34, v31);
  if ((v35 & 1) == 0) {
    return 0;
  }
  sub_10001D010((uint64_t)a1, (uint64_t)v94);
  sub_10000588C((uint64_t *)&unk_10164DBF0);
  char v37 = swift_dynamicCast();
  uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v92 + 56);
  if (v37)
  {
    v38(v28, 0, 1, v29);
    uint64_t v39 = v89;
    sub_100485510((uint64_t)v28, v89, type metadata accessor for SharedBeaconRecord);
    BOOL v40 = sub_100272E58(*(unsigned __int8 *)(v39 + *(int *)(v29 + 64)), (uint64_t)v91);
    sub_100485AFC(v39, type metadata accessor for SharedBeaconRecord);
    return v40;
  }
  v38(v28, 1, 1, v29);
  sub_10001DAB4((uint64_t)v28, (uint64_t *)&unk_101653D50);
  if ((v90 & 1) == 0) {
    return 0;
  }
  sub_10001D010((uint64_t)a1, (uint64_t)v94);
  uint64_t v41 = (uint64_t)v83;
  uint64_t v42 = v82;
  char v43 = swift_dynamicCast();
  uint64_t v44 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v81 + 56);
  if ((v43 & 1) == 0)
  {
    v44(v41, 1, 1, v42);
    sub_10001DAB4(v41, &qword_10163B9F0);
    return 0;
  }
  v44(v41, 0, 1, v42);
  uint64_t v45 = v41;
  uint64_t v46 = v84;
  sub_100485510(v45, v84, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  uint64_t v47 = v46 + *(int *)(v42 + 20);
  uint64_t v92 = *(void *)(*(void *)(v71 + 280) + 160);
  uint64_t v93 = v47;
  if (qword_1016370F0 != -1) {
    swift_once();
  }
  uint64_t v48 = v87;
  uint64_t v49 = sub_100010324(v87, (uint64_t)qword_10170ED28);
  uint64_t v50 = v85;
  uint64_t v51 = *(void (**)(char *, uint64_t, uint64_t))(v86 + 16);
  v51(v85, v49, v48);
  uint64_t v52 = v73;
  v51(v73, (uint64_t)v50, v48);
  uint64_t v53 = v88;
  uint64_t v54 = (uint64_t)v76;
  uint64_t v91 = &v76[*(int *)(v88 + 40)];
  uint64_t v55 = (uint64_t)v91;
  uint64_t v56 = type metadata accessor for DirectorySequence();
  uint64_t v57 = *(void *)(v56 - 8);
  uint64_t v58 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v57 + 56);
  uint64_t v90 = v57 + 56;
  v58(v55, 1, 1, v56);
  v51((char *)v54, (uint64_t)v52, v48);
  *(void *)(v54 + *(int *)(v53 + 36)) = v92;
  v51(v72, (uint64_t)v52, v48);
  swift_retain();
  uint64_t v59 = (uint64_t)v78;
  DirectorySequence.init(at:includingPropertiesForKeys:options:)();
  uint64_t v60 = *(void (**)(char *, uint64_t))(v86 + 8);
  v60(v52, v48);
  v58(v59, 0, 1, v56);
  sub_100062604(v59, (uint64_t)v91, (uint64_t *)&unk_101653C90);
  uint64_t v61 = v77;
  sub_10001D608(v54, v77, &qword_101645750);
  char v62 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v79 + 56);
  uint64_t v63 = (uint64_t)v74;
  uint64_t v64 = v88;
  v62(v74, 1, 1, v88);
  sub_10001DAB4(v63, &qword_101645758);
  sub_10001D608(v61, v63, &qword_101645750);
  v62((char *)v63, 0, 1, v64);
  sub_10001D608(v63, v75, (uint64_t *)&unk_101653CA0);
  uint64_t v65 = ((uint64_t (*)(char *, uint64_t))v60)(v85, v87);
  __chkstk_darwin(v65);
  uint64_t v66 = v93;
  *(&v70 - 2) = v80;
  *(&v70 - 1) = v66;
  sub_100658408(sub_10048321C, (uint64_t)(&v70 - 4));
  uint64_t v68 = *(void *)(v67 + 16);
  swift_bridgeObjectRelease();
  BOOL v40 = v68 != 0;
  sub_100485AFC(v84, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  return v40;
}

uint64_t sub_10046004C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v63 = a5;
  uint64_t v64 = a3;
  uint64_t v66 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v71 = *(void *)(v66 - 8);
  __chkstk_darwin(v66);
  unint64_t v69 = (char *)&v62 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = type metadata accessor for DispatchQoS();
  uint64_t v68 = *(void *)(v70 - 8);
  __chkstk_darwin(v70);
  uint64_t v67 = (char *)&v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v72 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v72 - 8);
  __chkstk_darwin(v72);
  uint64_t v12 = (char *)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = _swiftEmptyArrayStorage;
  v81[0] = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v14 = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v65 = a4;
  if (v14)
  {
    uint64_t v62 = a2;
    uint64_t v15 = a2 + 32;
    uint64_t v16 = (void (**)(char *, uint64_t))(v10 + 8);
    while (1)
    {
      sub_10001D010(v15, (uint64_t)&aBlock);
      uint64_t v17 = v75;
      uint64_t v18 = v76;
      sub_10001CD44(&aBlock, (uint64_t)v75);
      uint64_t v19 = *(void *)(*((void *)v18 + 1) + 8);
      uint64_t v20 = *(void (**)(void *, uint64_t))(v19 + 32);
      swift_bridgeObjectRetain();
      v20(v17, v19);
      if (!*(void *)(a1 + 16)) {
        break;
      }
      sub_1007240CC((uint64_t)v12);
      char v22 = v21;
      (*v16)(v12, v72);
      swift_bridgeObjectRelease();
      if ((v22 & 1) == 0) {
        goto LABEL_9;
      }
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&aBlock);
LABEL_4:
      v15 += 40;
      if (!--v14)
      {
        uint64_t v32 = (void *)v81[0];
        a2 = v62;
        uint64_t v13 = _swiftEmptyArrayStorage;
        goto LABEL_16;
      }
    }
    (*v16)(v12, v72);
    swift_bridgeObjectRelease();
LABEL_9:
    sub_10001CEB0(&aBlock, (uint64_t)v78);
    uint64_t v23 = v81[0];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_1000B7570(0, *(void *)(v23 + 16) + 1, 1);
      uint64_t v23 = v81[0];
    }
    unint64_t v25 = *(void *)(v23 + 16);
    unint64_t v24 = *(void *)(v23 + 24);
    if (v25 >= v24 >> 1) {
      sub_1000B7570(v24 > 1, v25 + 1, 1);
    }
    uint64_t v26 = v79;
    uint64_t v27 = v80;
    uint64_t v28 = sub_1000BD078((uint64_t)v78, v79);
    __chkstk_darwin(v28);
    uint64_t v30 = (char *)&v62 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v31 + 16))(v30);
    sub_1006985B0(v25, (uint64_t)v30, v81, v26, v27);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v78);
    goto LABEL_4;
  }
  uint64_t v32 = _swiftEmptyArrayStorage;
LABEL_16:
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  v81[0] = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v34 = v32[2];
  if (v34)
  {
    uint64_t v35 = a2;
    unint64_t v36 = 0;
    uint64_t v37 = (uint64_t)(v32 + 4);
    while (v36 < v32[2])
    {
      sub_10001D010(v37, (uint64_t)&aBlock);
      uint64_t v38 = v75;
      uint64_t v39 = v76;
      sub_10001CD44(&aBlock, (uint64_t)v75);
      if ((*((uint64_t (**)(void *, void (*)()))v39 + 14))(v38, v39))
      {
        sub_10001CEB0(&aBlock, (uint64_t)v78);
        uint64_t v40 = v81[0];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000B7570(0, *(void *)(v40 + 16) + 1, 1);
          uint64_t v40 = v81[0];
        }
        unint64_t v42 = *(void *)(v40 + 16);
        unint64_t v41 = *(void *)(v40 + 24);
        if (v42 >= v41 >> 1) {
          sub_1000B7570(v41 > 1, v42 + 1, 1);
        }
        uint64_t v43 = v79;
        uint64_t v44 = v80;
        uint64_t v45 = sub_1000BD078((uint64_t)v78, v79);
        __chkstk_darwin(v45);
        uint64_t v47 = (char *)&v62 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v48 + 16))(v47);
        sub_1006985B0(v42, (uint64_t)v47, v81, v43, v44);
        uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v78);
      }
      else
      {
        uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&aBlock);
      }
      ++v36;
      v37 += 40;
      if (v34 == v36)
      {
        uint64_t v13 = (void *)v81[0];
        uint64_t v49 = v66;
        a2 = v35;
        goto LABEL_29;
      }
    }
    __break(1u);
  }
  else
  {
    uint64_t v49 = v66;
LABEL_29:
    uint64_t v50 = v65;
    swift_release();
    uint64_t v51 = sub_10044AAE4((uint64_t)v13);
    uint64_t v52 = sub_101158244((uint64_t)v51);
    swift_bridgeObjectRelease();
    if (v13[2])
    {
      uint64_t v53 = type metadata accessor for Transaction();
      __chkstk_darwin(v53);
      uint64_t v54 = v64;
      *(&v62 - 6) = (uint64_t)v64;
      *(&v62 - 5) = v50;
      uint64_t v55 = v63;
      *(&v62 - 4) = (uint64_t)v13;
      *(&v62 - 3) = v55;
      *(&v62 - 2) = v52;
      static Transaction.named<A>(_:with:)();
      swift_release();
      uint64_t v56 = v54;
    }
    else
    {
      swift_release();
      uint64_t v56 = v64;
    }
    uint64_t v57 = (void *)swift_allocObject();
    uint64_t v57[2] = v56;
    uint64_t v57[3] = a2;
    v57[4] = v52;
    v57[5] = v50;
    uint64_t v76 = sub_100482F04;
    uint64_t v77 = v57;
    *(void *)&long long aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1) = 1107296256;
    uint64_t v74 = sub_1004B5480;
    uint64_t v75 = &unk_1015C3F20;
    uint64_t v58 = _Block_copy(&aBlock);
    id v59 = v56;
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v60 = v67;
    static DispatchQoS.unspecified.getter();
    v78[0] = _swiftEmptyArrayStorage;
    sub_100482848((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v61 = v69;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v58);
    (*(void (**)(char *, uint64_t))(v71 + 8))(v61, v49);
    (*(void (**)(char *, uint64_t))(v68 + 8))(v60, v70);
    return swift_release();
  }
  return result;
}

uint64_t sub_1004608B0(uint64_t a1, dispatch_group_t group, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  if (group) {
    dispatch_group_enter(group);
  }
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = a3;
  v12[3] = group;
  v12[4] = a1;
  v12[5] = a6;
  swift_retain();
  uint64_t v13 = group;
  swift_retain();
  swift_bridgeObjectRetain();
  sub_100461418(a4, a5, (void (*)(void))sub_100483070, (uint64_t)v12);
  return swift_release();
}

uint64_t sub_100460978(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for DispatchQoS();
  uint64_t v13 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v15 = (char *)v20 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[1] = *(void *)(a2 + 48);
  uint64_t v16 = (void *)swift_allocObject();
  void v16[2] = a3;
  v16[3] = a4;
  v16[4] = a5;
  v16[5] = a2;
  aBlock[4] = sub_100483168;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015C3FE8;
  uint64_t v17 = _Block_copy(aBlock);
  id v18 = a3;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  char v22 = _swiftEmptyArrayStorage;
  sub_100482848((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v17);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v21);
  return swift_release();
}

void sub_100460C5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v56[0] = a1;
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v56 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v64 = (char *)v56 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v56 - v13;
  uint64_t v15 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)v56 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  Transaction.capture()();
  uint64_t v18 = *(void *)(a3 + 56);
  uint64_t v59 = a3 + 56;
  uint64_t v19 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v20 = -1;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  unint64_t v21 = v20 & v18;
  uint64_t v71 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_beaconUUIDsLocating;
  uint64_t v72 = v10 + 16;
  uint64_t v66 = v10;
  uint64_t v67 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56);
  uint64_t v65 = v10 + 48;
  int64_t v60 = (unint64_t)(v19 + 63) >> 6;
  uint64_t v61 = (void (**)(char *, char *, uint64_t))(v10 + 32);
  uint64_t v68 = (void (**)(unint64_t, uint64_t))(v10 + 8);
  swift_bridgeObjectRetain();
  int64_t v22 = 0;
  *(void *)&long long v23 = 141558275;
  long long v57 = v23;
  v56[1] = (char *)&type metadata for Any + 8;
  uint64_t v62 = v17;
  uint64_t v63 = v14;
  uint64_t v58 = a4;
  while (1)
  {
    if (v21)
    {
      uint64_t v70 = (v21 - 1) & v21;
      unint64_t v25 = __clz(__rbit64(v21)) | (v22 << 6);
      goto LABEL_22;
    }
    int64_t v26 = v22 + 1;
    if (__OFADD__(v22, 1))
    {
      __break(1u);
LABEL_39:
      __break(1u);
      return;
    }
    if (v26 >= v60) {
      goto LABEL_34;
    }
    unint64_t v27 = *(void *)(v59 + 8 * v26);
    ++v22;
    if (!v27)
    {
      int64_t v22 = v26 + 1;
      if (v26 + 1 >= v60) {
        goto LABEL_34;
      }
      unint64_t v27 = *(void *)(v59 + 8 * v22);
      if (!v27)
      {
        int64_t v22 = v26 + 2;
        if (v26 + 2 >= v60) {
          goto LABEL_34;
        }
        unint64_t v27 = *(void *)(v59 + 8 * v22);
        if (!v27) {
          break;
        }
      }
    }
LABEL_21:
    uint64_t v70 = (v27 - 1) & v27;
    unint64_t v25 = __clz(__rbit64(v27)) + (v22 << 6);
LABEL_22:
    uint64_t v29 = v66;
    uint64_t v30 = *(void *)(v66 + 72);
    uint64_t v31 = *(void (**)(char *, unint64_t, uint64_t))(v66 + 16);
    v31(v17, *(void *)(a3 + 48) + v30 * v25, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v17, 0, 1, v9);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v17, 1, v9) == 1) {
      goto LABEL_35;
    }
    int64_t v69 = v22;
    (*v61)(v14, v17, v9);
    uint64_t v32 = *(void *)(a4 + v71);
    swift_bridgeObjectRetain_n();
    unint64_t v33 = sub_1007240CC((uint64_t)v14);
    char v35 = v34;
    swift_bridgeObjectRelease();
    if (v35)
    {
      uint64_t v36 = a4;
      uint64_t v37 = a3;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v73 = v32;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_100E81D34();
        uint64_t v32 = v73;
      }
      (*v68)(*(void *)(v32 + 48) + v33 * v30, v9);
      uint64_t v32 = v73;
      uint64_t v39 = *(void *)(v73 + 56);
      uint64_t v40 = type metadata accessor for Date();
      uint64_t v41 = *(void *)(v40 - 8);
      (*(void (**)(char *, unint64_t, uint64_t))(v41 + 32))(v8, v39 + *(void *)(v41 + 72) * v33, v40);
      sub_1001683CC(v33, v32);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v8, 0, 1, v40);
      a3 = v37;
      a4 = v36;
      uint64_t v14 = v63;
    }
    else
    {
      uint64_t v42 = type metadata accessor for Date();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v8, 1, 1, v42);
    }
    sub_10001DAB4((uint64_t)v8, (uint64_t *)&unk_10163AC90);
    uint64_t v43 = *(void *)(a4 + v71);
    *(void *)(a4 + v71) = v32;
    swift_bridgeObjectRetain();
    char v44 = sub_100DF72BC(v43, v32);
    swift_bridgeObjectRelease();
    if ((v44 & 1) == 0) {
      sub_100A9E7EC(13);
    }
    swift_bridgeObjectRelease();
    if (qword_101636B10 != -1) {
      swift_once();
    }
    uint64_t v45 = type metadata accessor for Logger();
    sub_100010324(v45, (uint64_t)qword_10170DEB8);
    uint64_t v46 = v64;
    v31(v64, (unint64_t)v14, v9);
    uint64_t v47 = Logger.logObject.getter();
    os_log_type_t v48 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v47, v48))
    {
      uint64_t v49 = v46;
      uint64_t v50 = swift_slowAlloc();
      uint64_t v73 = swift_slowAlloc();
      *(_DWORD *)uint64_t v50 = v57;
      *(void *)(v50 + 4) = 1752392040;
      *(_WORD *)(v50 + 12) = 2081;
      sub_100482848((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v51 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v50 + 14) = sub_1008FA0F0(v51, v52, &v73);
      swift_bridgeObjectRelease();
      uint64_t v53 = *v68;
      uint64_t v54 = v49;
      uint64_t v14 = v63;
      (*v68)((unint64_t)v54, v9);
      _os_log_impl((void *)&_mh_execute_header, v47, v48, "Removed ACSN locating state for beacon: %{private,mask.hash}s - exhaustive fetch.", (uint8_t *)v50, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v53((unint64_t)v14, v9);
      a4 = v58;
    }
    else
    {

      unint64_t v24 = *v68;
      (*v68)((unint64_t)v46, v9);
      v24((unint64_t)v14, v9);
    }
    uint64_t v17 = v62;
    int64_t v22 = v69;
    unint64_t v21 = v70;
  }
  int64_t v28 = v26 + 3;
  if (v28 < v60)
  {
    unint64_t v27 = *(void *)(v59 + 8 * v28);
    if (!v27)
    {
      while (1)
      {
        int64_t v22 = v28 + 1;
        if (__OFADD__(v28, 1)) {
          goto LABEL_39;
        }
        if (v22 >= v60) {
          goto LABEL_34;
        }
        unint64_t v27 = *(void *)(v59 + 8 * v22);
        ++v28;
        if (v27) {
          goto LABEL_21;
        }
      }
    }
    int64_t v22 = v28;
    goto LABEL_21;
  }
LABEL_34:
  (*v67)(v17, 1, 1, v9);
LABEL_35:
  swift_release();
  uint64_t v55 = v56[0];
  sub_10047BDB0(a3);
  if (v55) {
    dispatch_group_leave(v55);
  }
}

uint64_t sub_100461418(uint64_t a1, void *a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v71 = a4;
  uint64_t v68 = a3;
  uint64_t v70 = a1;
  uint64_t v74 = type metadata accessor for UUID();
  uint64_t v72 = *(void (**)(char *, uint64_t))(v74 - 8);
  __chkstk_darwin(v74);
  uint64_t v6 = (void (*)(char *, uint64_t))((char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = type metadata accessor for LocationFetcher();
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v65 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = a2[3];
  uint64_t v11 = a2[4];
  sub_10001CD44(a2, v10);
  char v12 = (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 24))(v10, v11);
  uint64_t v13 = a2[3];
  uint64_t v14 = a2[4];
  sub_10001CD44(a2, v13);
  char v15 = (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 48))(v13, v14);
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v21 = a2[3];
  uint64_t v20 = a2[4];
  sub_10001CD44(a2, v21);
  uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 56))(v21, v20);
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v23 = sub_1010ABA34(v82);
  swift_bridgeObjectRelease();
  uint64_t My = type metadata accessor for Feature.FindMy();
  *((void *)&v83 + 1) = My;
  *(void *)&long long v84 = sub_100482848((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
  unint64_t v25 = sub_10001D958((uint64_t *)&v82);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v25, enum case for Feature.FindMy.networkScalingImprovements(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v82);
  *(void *)&long long v82 = v23;
  BYTE8(v82) = v12 & 1;
  *(void *)&long long v83 = &off_1015A1670;
  BYTE8(v83) = v15;
  *(void *)&long long v84 = v17;
  *((void *)&v84 + 1) = v19;
  *(void *)&long long v85 = v22;
  BYTE8(v85) = My & 1;
  long long v86 = 0uLL;
  char v87 = 1;
  uint64_t v26 = *(void *)(v73 + 280);
  uint64_t v80 = &_s13DefaultPolicyVN;
  unint64_t v81 = sub_100075104();
  uint64_t v27 = swift_allocObject();
  *(void *)&long long v79 = v27;
  long long v28 = v85;
  *(_OWORD *)(v27 + 48) = v84;
  *(_OWORD *)(v27 + 64) = v28;
  *(_OWORD *)(v27 + 80) = v86;
  *(unsigned char *)(v27 + 96) = v87;
  long long v29 = v83;
  *(_OWORD *)(v27 + 16) = v82;
  *(_OWORD *)(v27 + 32) = v29;
  uint64_t v30 = qword_101636CB8;
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v31 = v22;
  if (v30 != -1) {
    swift_once();
  }
  uint64_t v32 = qword_10170E330;
  swift_retain();
  unint64_t v33 = _swiftEmptyArrayStorage;
  unint64_t v34 = sub_10092DC10((uint64_t)_swiftEmptyArrayStorage);
  sub_1005A2BA4(v26, &v79, v32, v34, v9);
  if (qword_101636B10 != -1) {
    swift_once();
  }
  uint64_t v35 = type metadata accessor for Logger();
  uint64_t v36 = sub_100010324(v35, (uint64_t)qword_10170DEB8);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v37 = Logger.logObject.getter();
  os_log_type_t v38 = static os_log_type_t.default.getter();
  BOOL v39 = os_log_type_enabled(v37, v38);
  uint64_t v73 = v31;
  uint64_t v67 = v9;
  uint64_t v69 = v36;
  if (v39)
  {
    uint64_t v40 = (uint8_t *)swift_slowAlloc();
    uint64_t v66 = swift_slowAlloc();
    *(void *)&long long v79 = v66;
    *(_DWORD *)uint64_t v40 = 136446210;
    uint64_t v65 = v40 + 4;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v41 = sub_10047495C();
    unint64_t v43 = v42;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v75[0] = sub_1008FA0F0(v41, v43, (uint64_t *)&v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "Exhaustive fetch with internal policy %{public}s.", v40, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  uint64_t v44 = v71;
  uint64_t v78 = _swiftEmptyArrayStorage;
  uint64_t v45 = *(void *)(v70 + 16);
  uint64_t v46 = swift_bridgeObjectRetain();
  if (v45)
  {
    uint64_t v47 = v46 + 32;
    os_log_type_t v48 = (void (**)(void, uint64_t))((char *)v72 + 8);
    uint64_t v72 = v6;
    do
    {
      sub_10001D010(v47, (uint64_t)&v79);
      uint64_t v50 = v80;
      unint64_t v49 = v81;
      sub_10001CD44(&v79, (uint64_t)v80);
      (*(void (**)(ValueMetadata *))(*(void *)(*(void *)(v49 + 8) + 8) + 32))(v50);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      LOBYTE(v49) = sub_1004779D8(v6, (uint64_t)&v82);
      (*v48)(v6, v74);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v49)
      {
        sub_10001CEB0(&v79, (uint64_t)v75);
        uint64_t v51 = v78;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000B7570(0, v51[2] + 1, 1);
          uint64_t v51 = v78;
        }
        unint64_t v53 = v51[2];
        unint64_t v52 = v51[3];
        if (v53 >= v52 >> 1) {
          sub_1000B7570(v52 > 1, v53 + 1, 1);
        }
        uint64_t v54 = v76;
        uint64_t v55 = v77;
        uint64_t v56 = sub_1000BD078((uint64_t)v75, v76);
        __chkstk_darwin(v56);
        uint64_t v58 = (char *)&v65 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v59 + 16))(v58);
        sub_1006985B0(v53, (uint64_t)v58, (uint64_t *)&v78, v54, v55);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v75);
        uint64_t v6 = v72;
      }
      else
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v79);
      }
      v47 += 40;
      --v45;
    }
    while (v45);
    unint64_t v33 = v78;
    uint64_t v44 = v71;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v60 = (uint64_t)v67;
  if (v33[2])
  {
    sub_1008BE548((uint64_t)v33, (uint64_t)v68, v44);
    swift_release();
  }
  else
  {
    swift_release();
    uint64_t v61 = Logger.logObject.getter();
    os_log_type_t v62 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v61, v62))
    {
      uint64_t v63 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v63 = 0;
      _os_log_impl((void *)&_mh_execute_header, v61, v62, "Skipping exhaustive fetch since all beacons located recently.", v63, 2u);
      swift_slowDealloc();
    }

    sub_10092E7C4((uint64_t)_swiftEmptyArrayStorage);
    v68();
    swift_bridgeObjectRelease();
  }
  return sub_100485AFC(v60, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
}

void sub_100461DDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v8 - 8);
  uint64_t v67 = (char *)v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v74 = *(void *)(v10 - 8);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v70 = (char *)v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v62 - v13;
  uint64_t v15 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v15 - 8);
  uint64_t v73 = (char *)v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10044AAE4(a2);
  uint64_t v18 = sub_101158244((uint64_t)v17);
  swift_bridgeObjectRelease();
  unint64_t v19 = *(void *)(a3 + 16);
  unint64_t v20 = *(void *)(v18 + 16);
  v62[0] = a1;
  if (v19 > v20 >> 3)
  {
    uint64_t v21 = sub_1008A160C(a3, v18);
  }
  else
  {
    uint64_t v80 = (void *)v18;
    sub_10089EA08(a3);
    uint64_t v21 = v80;
  }
  uint64_t v22 = v21[7];
  uint64_t v64 = (char *)(v21 + 7);
  uint64_t v23 = 1 << *((unsigned char *)v21 + 32);
  uint64_t v24 = -1;
  if (v23 < 64) {
    uint64_t v24 = ~(-1 << v23);
  }
  unint64_t v25 = v24 & v22;
  uint64_t v26 = v74;
  uint64_t v78 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_beaconUUIDsLocating;
  uint64_t v79 = v74 + 16;
  uint64_t v71 = v74 + 48;
  uint64_t v72 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v74 + 56);
  int64_t v65 = (unint64_t)(v23 + 63) >> 6;
  uint64_t v66 = (void (**)(char *, char *, uint64_t))(v74 + 32);
  uint64_t v75 = (void (**)(unint64_t, uint64_t))(v74 + 8);
  swift_bridgeObjectRetain();
  int64_t v27 = 0;
  *(void *)&long long v28 = 141558275;
  long long v63 = v28;
  v62[1] = (char *)&type metadata for Any + 8;
  uint64_t v68 = v21;
  uint64_t v69 = v14;
  long long v29 = v73;
  while (1)
  {
    if (v25)
    {
      uint64_t v77 = (v25 - 1) & v25;
      unint64_t v31 = __clz(__rbit64(v25)) | (v27 << 6);
      goto LABEL_25;
    }
    int64_t v32 = v27 + 1;
    if (__OFADD__(v27, 1))
    {
      __break(1u);
LABEL_42:
      __break(1u);
      return;
    }
    if (v32 >= v65) {
      goto LABEL_37;
    }
    unint64_t v33 = *(void *)&v64[8 * v32];
    ++v27;
    if (!v33)
    {
      int64_t v27 = v32 + 1;
      if (v32 + 1 >= v65) {
        goto LABEL_37;
      }
      unint64_t v33 = *(void *)&v64[8 * v27];
      if (!v33)
      {
        int64_t v27 = v32 + 2;
        if (v32 + 2 >= v65) {
          goto LABEL_37;
        }
        unint64_t v33 = *(void *)&v64[8 * v27];
        if (!v33) {
          break;
        }
      }
    }
LABEL_24:
    uint64_t v77 = (v33 - 1) & v33;
    unint64_t v31 = __clz(__rbit64(v33)) + (v27 << 6);
LABEL_25:
    uint64_t v35 = *(void *)(v26 + 72);
    uint64_t v36 = *(void (**)(char *, unint64_t, uint64_t))(v26 + 16);
    v36(v29, v21[6] + v35 * v31, v10);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v29, 0, 1, v10);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v29, 1, v10) == 1) {
      goto LABEL_38;
    }
    int64_t v76 = v27;
    (*v66)(v14, v29, v10);
    uint64_t v37 = *(void *)(a4 + v78);
    swift_bridgeObjectRetain_n();
    unint64_t v38 = sub_1007240CC((uint64_t)v14);
    char v40 = v39;
    swift_bridgeObjectRelease();
    if (v40)
    {
      uint64_t v41 = v67;
      uint64_t v42 = a4;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v80 = (void *)v37;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_100E81D34();
        uint64_t v37 = (uint64_t)v80;
      }
      (*v75)(*(void *)(v37 + 48) + v38 * v35, v10);
      uint64_t v37 = (uint64_t)v80;
      uint64_t v44 = v80[7];
      uint64_t v45 = type metadata accessor for Date();
      uint64_t v46 = *(void *)(v45 - 8);
      (*(void (**)(char *, unint64_t, uint64_t))(v46 + 32))(v41, v44 + *(void *)(v46 + 72) * v38, v45);
      sub_1001683CC(v38, v37);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, void, uint64_t, uint64_t))(v46 + 56))(v41, 0, 1, v45);
      a4 = v42;
      uint64_t v47 = (uint64_t)v41;
      uint64_t v26 = v74;
      uint64_t v14 = v69;
    }
    else
    {
      uint64_t v48 = type metadata accessor for Date();
      uint64_t v47 = (uint64_t)v67;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56))(v67, 1, 1, v48);
    }
    sub_10001DAB4(v47, (uint64_t *)&unk_10163AC90);
    uint64_t v49 = *(void *)(a4 + v78);
    *(void *)(a4 + v78) = v37;
    swift_bridgeObjectRetain();
    char v50 = sub_100DF72BC(v49, v37);
    swift_bridgeObjectRelease();
    if ((v50 & 1) == 0) {
      sub_100A9E7EC(13);
    }
    swift_bridgeObjectRelease();
    if (qword_101636B10 != -1) {
      swift_once();
    }
    uint64_t v51 = type metadata accessor for Logger();
    sub_100010324(v51, (uint64_t)qword_10170DEB8);
    unint64_t v52 = v70;
    v36(v70, (unint64_t)v14, v10);
    unint64_t v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v53, v54))
    {
      uint64_t v55 = v52;
      uint64_t v56 = swift_slowAlloc();
      uint64_t v80 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v56 = v63;
      *(void *)(v56 + 4) = 1752392040;
      *(_WORD *)(v56 + 12) = 2081;
      sub_100482848((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v57 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v56 + 14) = sub_1008FA0F0(v57, v58, (uint64_t *)&v80);
      swift_bridgeObjectRelease();
      uint64_t v59 = *v75;
      uint64_t v60 = v55;
      uint64_t v14 = v69;
      (*v75)((unint64_t)v60, v10);
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "Removed ACSN locating state for beacon: %{private,mask.hash}s - online fetch.", (uint8_t *)v56, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v59((unint64_t)v14, v10);
      uint64_t v26 = v74;
    }
    else
    {

      uint64_t v30 = *v75;
      (*v75)((unint64_t)v52, v10);
      v30((unint64_t)v14, v10);
    }
    long long v29 = v73;
    uint64_t v21 = v68;
    int64_t v27 = v76;
    unint64_t v25 = v77;
  }
  int64_t v34 = v32 + 3;
  if (v34 < v65)
  {
    unint64_t v33 = *(void *)&v64[8 * v34];
    if (!v33)
    {
      while (1)
      {
        int64_t v27 = v34 + 1;
        if (__OFADD__(v34, 1)) {
          goto LABEL_42;
        }
        if (v27 >= v65) {
          goto LABEL_37;
        }
        unint64_t v33 = *(void *)&v64[8 * v27];
        ++v34;
        if (v33) {
          goto LABEL_24;
        }
      }
    }
    int64_t v27 = v34;
    goto LABEL_24;
  }
LABEL_37:
  (*v72)(v29, 1, 1, v10);
LABEL_38:
  swift_release();
  uint64_t v61 = v62[0];
  sub_10047BDB0((uint64_t)v21);
  swift_bridgeObjectRelease();
  if (v61) {
    dispatch_group_leave(v61);
  }
}

uint64_t sub_100462618@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v57 = a3;
  uint64_t v5 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = (void *)type metadata accessor for UUID();
  uint64_t v8 = *(v70 - 1);
  uint64_t v9 = __chkstk_darwin(v70);
  uint64_t v55 = (char *)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v68 = (char *)&v54 - v12;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v54 - v13;
  int64_t v15 = *(void *)(a1 + 16);
  uint64_t v16 = _swiftEmptyArrayStorage;
  uint64_t v61 = v7;
  if (v15)
  {
    uint64_t v74 = _swiftEmptyArrayStorage;
    sub_1000B7034(0, v15, 0);
    uint64_t v17 = a1 + 32;
    uint64_t v18 = v8;
    uint64_t v69 = (void *)(v8 + 32);
    uint64_t v16 = v74;
    do
    {
      sub_10001D010(v17, (uint64_t)v71);
      uint64_t v20 = v72;
      uint64_t v19 = v73;
      sub_10001CD44(v71, v72);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v19 + 8) + 8) + 32))(v20);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v71);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B7034(0, v16[2] + 1, 1);
        uint64_t v16 = v74;
      }
      unint64_t v22 = v16[2];
      unint64_t v21 = v16[3];
      if (v22 >= v21 >> 1)
      {
        sub_1000B7034(v21 > 1, v22 + 1, 1);
        uint64_t v16 = v74;
      }
      void v16[2] = v22 + 1;
      (*(void (**)(unint64_t, char *, void *))(v18 + 32))((unint64_t)v16+ ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80))+ *(void *)(v18 + 72) * v22, v14, v70);
      uint64_t v74 = v16;
      v17 += 40;
      --v15;
    }
    while (v15);
    uint64_t v7 = v61;
    uint64_t v23 = v18;
  }
  else
  {
    uint64_t v23 = v8;
  }
  uint64_t v24 = sub_101158244((uint64_t)v16);
  swift_bridgeObjectRelease();
  uint64_t v25 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_beaconUUIDsLocalLocating;
  if (*(void *)(*(void *)(a2 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_beaconUUIDsLocalLocating) + 16) <= *(void *)(v24 + 16) >> 3)
  {
    v71[0] = v24;
    uint64_t v28 = swift_bridgeObjectRetain();
    sub_10089EA08(v28);
    swift_bridgeObjectRelease();
    int64_t v27 = (void *)v71[0];
  }
  else
  {
    uint64_t v26 = swift_bridgeObjectRetain();
    int64_t v27 = sub_1008A160C(v26, v24);
    swift_bridgeObjectRelease();
  }
  long long v29 = sub_1007100E0((uint64_t)v27);
  swift_bridgeObjectRelease();
  v71[0] = *(void *)(a2 + v25);
  swift_retain();
  swift_bridgeObjectRetain();
  sub_101020BCC((uint64_t)v29);
  swift_release();
  uint64_t v30 = v71[0];
  uint64_t v31 = *(void *)(a2 + v25);
  *(void *)(a2 + v25) = v71[0];
  swift_bridgeObjectRetain();
  char v32 = sub_10072A704(v31, v30);
  swift_bridgeObjectRelease();
  if ((v32 & 1) == 0) {
    sub_100A9E7EC(13);
  }
  swift_bridgeObjectRelease();
  uint64_t v33 = v29[2];
  uint64_t v56 = v29;
  if (v33)
  {
    uint64_t v36 = *(void (**)(char *, char *, void *))(v23 + 16);
    uint64_t v35 = v23 + 16;
    int64_t v34 = v36;
    uint64_t v37 = (char *)v29 + ((*(unsigned __int8 *)(v35 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v35 + 64));
    uint64_t v38 = *(void *)(v35 + 56);
    uint64_t v67 = (unsigned int (**)(char *, uint64_t, void *))(v35 + 32);
    uint64_t v64 = (void (**)(char *, char *, void *))(v35 + 16);
    uint64_t v65 = v38;
    swift_retain();
    uint64_t v69 = (void *)(v35 + 40);
    unint64_t v54 = (v35 + 40) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    *(void *)&long long v39 = 141558275;
    long long v59 = v39;
    long long v63 = (void (**)(char *, void *))(v35 - 8);
    uint64_t v62 = (v35 - 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    unint64_t v58 = (char *)&type metadata for Any + 8;
    char v40 = v55;
    uint64_t v41 = v70;
    uint64_t v42 = v68;
    uint64_t v60 = v35;
    uint64_t v66 = v36;
    while (1)
    {
      v34(v7, v37, v41);
      uint64_t v44 = (void *)*v69;
      ((void (*)(char *, void, uint64_t, void *))*v69)(v7, 0, 1, v41);
      if ((*v67)(v7, 1, v41) == 1) {
        break;
      }
      uint64_t v70 = v44;
      (*v64)(v42, v7, v41);
      if (qword_101636B10 != -1) {
        swift_once();
      }
      uint64_t v45 = type metadata accessor for Logger();
      sub_100010324(v45, (uint64_t)qword_10170DEB8);
      v34(v40, v42, v41);
      uint64_t v46 = Logger.logObject.getter();
      os_log_type_t v47 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v46, v47))
      {
        uint64_t v48 = swift_slowAlloc();
        v71[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v48 = v59;
        *(void *)(v48 + 4) = 1752392040;
        *(_WORD *)(v48 + 12) = 2081;
        sub_100482848((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v49 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v48 + 14) = sub_1008FA0F0(v49, v50, v71);
        swift_bridgeObjectRelease();
        unint64_t v43 = *v63;
        (*v63)(v40, v41);
        _os_log_impl((void *)&_mh_execute_header, v46, v47, "Added disk locating state for beacon: %{private,mask.hash}s.", (uint8_t *)v48, 0x16u);
        swift_arrayDestroy();
        uint64_t v7 = v61;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        unint64_t v43 = *v63;
        (*v63)(v40, v41);
      }

      uint64_t v42 = v68;
      v43(v68, v41);
      int64_t v34 = v66;
      v37 += v65;
      if (!--v33)
      {
        ((void (*)(char *, uint64_t, uint64_t, void *))v70)(v7, 1, 1, v41);
        break;
      }
    }
  }
  else
  {
    uint64_t v51 = *(void (**)(char *, uint64_t, uint64_t, void *))(v23 + 56);
    swift_retain();
    v51(v7, 1, 1, v70);
  }
  unint64_t v52 = v56;
  uint64_t result = swift_release();
  *uint64_t v57 = v52;
  return result;
}

uint64_t sub_100462D08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v48 = (char *)v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v37 - v9;
  uint64_t v11 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_beaconUUIDsLocalLocating;
  uint64_t v49 = *(void *)(a2 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_beaconUUIDsLocalLocating);
  swift_bridgeObjectRetain();
  sub_10089F210(a3);
  uint64_t v15 = v49;
  uint64_t v16 = *(void *)(a2 + v14);
  *(void *)(a2 + v14) = v49;
  swift_bridgeObjectRetain();
  char v17 = sub_10072A704(v16, v15);
  swift_bridgeObjectRelease();
  if ((v17 & 1) == 0) {
    sub_100A9E7EC(13);
  }
  swift_bridgeObjectRelease();
  uint64_t v18 = *(void *)(a3 + 16);
  v37[2] = a3;
  if (v18)
  {
    unint64_t v21 = *(void (**)(char *, unint64_t, uint64_t))(v6 + 16);
    uint64_t v20 = v6 + 16;
    uint64_t v19 = v21;
    unint64_t v22 = a3 + ((*(unsigned __int8 *)(v20 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 64));
    uint64_t v23 = *(void *)(v20 + 56);
    uint64_t v46 = (unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 32);
    uint64_t v42 = (void (**)(char *, char *, uint64_t))(v20 + 16);
    uint64_t v43 = v23;
    swift_bridgeObjectRetain();
    os_log_type_t v47 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 40);
    v37[1] = (v20 + 40) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    *(void *)&long long v24 = 141558275;
    long long v38 = v24;
    uint64_t v41 = (void (**)(char *, uint64_t))(v20 - 8);
    uint64_t v40 = (v20 - 8) & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    v37[3] = (char *)&type metadata for Any + 8;
    uint64_t v25 = v48;
    uint64_t v39 = v20;
    uint64_t v44 = v21;
    uint64_t v45 = v13;
    while (1)
    {
      v19(v13, v22, v5);
      int64_t v27 = *v47;
      (*v47)(v13, 0, 1, v5);
      if ((*v46)(v13, 1, v5) == 1) {
        break;
      }
      (*v42)(v10, v13, v5);
      if (qword_101636B10 != -1) {
        swift_once();
      }
      uint64_t v28 = type metadata accessor for Logger();
      sub_100010324(v28, (uint64_t)qword_10170DEB8);
      long long v29 = v10;
      v19(v25, (unint64_t)v10, v5);
      uint64_t v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v30, v31))
      {
        uint64_t v32 = swift_slowAlloc();
        uint64_t v49 = swift_slowAlloc();
        *(_DWORD *)uint64_t v32 = v38;
        *(void *)(v32 + 4) = 1752392040;
        *(_WORD *)(v32 + 12) = 2081;
        sub_100482848((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v32 + 14) = sub_1008FA0F0(v33, v34, &v49);
        swift_bridgeObjectRelease();
        uint64_t v26 = *v41;
        (*v41)(v48, v5);
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "Shared fetch - Removed disk locating state for beacon: %{private,mask.hash}s.", (uint8_t *)v32, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v25 = v48;
        swift_slowDealloc();
      }
      else
      {
        uint64_t v26 = *v41;
        (*v41)(v25, v5);
      }

      uint64_t v10 = v29;
      v26(v29, v5);
      uint64_t v19 = v44;
      v22 += v43;
      --v18;
      uint64_t v13 = v45;
      if (!v18)
      {
        v27(v45, 1, 1, v5);
        return swift_bridgeObjectRelease();
      }
    }
  }
  else
  {
    uint64_t v35 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
    swift_bridgeObjectRetain();
    v35(v13, 1, 1, v5);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1004631C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = type metadata accessor for LocationFetcher();
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v23[-1] - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = *(void *)(a2 + 280);
  sub_10001D010(a3, (uint64_t)v23);
  uint64_t v18 = qword_101636CB8;
  swift_retain();
  swift_bridgeObjectRetain();
  if (v18 != -1) {
    swift_once();
  }
  uint64_t v19 = qword_10170E330;
  swift_retain();
  sub_1005A2BA4(v17, v23, v19, a4, v16);
  uint64_t v20 = (void *)swift_allocObject();
  void v20[2] = a1;
  v20[3] = a6;
  v20[4] = a7;
  swift_retain();
  swift_retain();
  sub_1008BE548(a5, (uint64_t)sub_100482E80, (uint64_t)v20);
  swift_release();
  return sub_100485AFC((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
}

uint64_t sub_100463360(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void *), uint64_t a5)
{
  uint64_t v35 = a4;
  uint64_t v29 = a3;
  uint64_t v8 = type metadata accessor for LocationFetcher();
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = [self mainBundle];
  id v12 = [v11 bundleIdentifier];

  if (v12)
  {
    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v15 = v14;
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v15 = 0;
  }
  uint64_t v16 = sub_10080D1A8();
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v28 = v5;
  uint64_t v17 = sub_1010ABA34(v32[0]);
  swift_bridgeObjectRelease();
  uint64_t My = type metadata accessor for Feature.FindMy();
  uint64_t v33 = (ValueMetadata *)My;
  unint64_t v34 = sub_100482848((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
  uint64_t v19 = sub_10001D958(v32);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v19, enum case for Feature.FindMy.networkScalingImprovements(_:), My);
  char v20 = isFeatureEnabled(_:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v32);
  uint64_t v21 = *(void *)(a2 + 280);
  uint64_t v33 = &_s13DefaultPolicyVN;
  unint64_t v34 = sub_100075104();
  uint64_t v22 = swift_allocObject();
  v32[0] = v22;
  *(void *)(v22 + 16) = v17;
  *(unsigned char *)(v22 + 24) = 0;
  *(void *)(v22 + 32) = &off_1015A1698;
  *(unsigned char *)(v22 + 40) = 0;
  *(void *)(v22 + 48) = v13;
  *(void *)(v22 + 56) = v15;
  *(void *)(v22 + 64) = v16;
  *(unsigned char *)(v22 + 72) = v20 & 1;
  *(void *)(v22 + 80) = 0;
  *(void *)(v22 + 88) = 0;
  *(unsigned char *)(v22 + 96) = 1;
  uint64_t v23 = qword_101636CB8;
  swift_retain();
  if (v23 != -1) {
    swift_once();
  }
  uint64_t v24 = qword_10170E330;
  swift_retain();
  unint64_t v25 = sub_10092DC10((uint64_t)_swiftEmptyArrayStorage);
  sub_1005A2BA4(v21, v32, v24, v25, v10);
  sub_100ACCD98(v29, (uint64_t)&v30);
  if (v31)
  {
    sub_10001CEB0(&v30, (uint64_t)v32);
    sub_10000588C((uint64_t *)&unk_101657630);
    uint64_t v26 = swift_allocObject();
    *(_OWORD *)(v26 + 16) = xmmword_101342130;
    sub_10001D010((uint64_t)v32, v26 + 32);
    swift_retain();
    sub_1005DC81C((void *)v26, v10, v35, a5);
    swift_bridgeObjectRelease();
    swift_release();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v32);
  }
  else
  {
    sub_10001DAB4((uint64_t)&v30, (uint64_t *)&unk_10163BBE0);
    v35(_swiftEmptyArrayStorage);
  }
  return sub_100485AFC((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
}

uint64_t sub_100463728(uint64_t a1, void (*a2)(void *), uint64_t a3)
{
  uint64_t v32 = a3;
  uint64_t v33 = a2;
  uint64_t v4 = (int *)type metadata accessor for RawSearchResult();
  uint64_t v5 = *((void *)v4 - 1);
  __chkstk_darwin(v4);
  uint64_t v7 = (unsigned __int8 *)&v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C((uint64_t *)&unk_101638D50);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10115B240(a1);
  if (!v11) {
    goto LABEL_12;
  }
  uint64_t v12 = v11;
  uint64_t v13 = *(void *)(v11 + 16);
  uint64_t v14 = type metadata accessor for BeaconEstimatedLocation();
  uint64_t v15 = *(void *)(v14 - 8);
  if (v13)
  {
    sub_100485A94(v12 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80)), (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v10, 0, 1, v14);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v10, 1, 1, v14);
  }
  swift_bridgeObjectRelease();
  type metadata accessor for BeaconEstimatedLocation();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v10, 1, v14) == 1)
  {
    sub_10001DAB4((uint64_t)v10, (uint64_t *)&unk_101638D50);
    goto LABEL_12;
  }
  uint64_t v16 = *(void **)&v10[*(int *)(v14 + 52)];
  swift_bridgeObjectRetain();
  sub_100485AFC((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
  if (!v16)
  {
LABEL_12:
    swift_bridgeObjectRelease();
    uint64_t v16 = _swiftEmptyArrayStorage;
    uint64_t v17 = _swiftEmptyArrayStorage[2];
    if (!v17) {
      goto LABEL_13;
    }
    goto LABEL_9;
  }
  uint64_t v17 = v16[2];
  if (!v17)
  {
LABEL_13:
    swift_bridgeObjectRelease();
    uint64_t v29 = _swiftEmptyArrayStorage;
    goto LABEL_14;
  }
LABEL_9:
  unint64_t v34 = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)();
  uint64_t v18 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v31 = v16;
  uint64_t v19 = (uint64_t)v16 + ((v18 + 32) & ~v18);
  uint64_t v20 = *(void *)(v5 + 72);
  do
  {
    sub_100485A94(v19, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
    uint64_t v21 = *v7;
    double v22 = *(double *)&v7[v4[6]];
    double v23 = *(double *)&v7[v4[7]];
    double v24 = *(double *)&v7[v4[8]];
    id v25 = objc_allocWithZone((Class)SPRawSearchResult);
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    Class v27 = Data._bridgeToObjectiveC()().super.isa;
    Class v28 = Date._bridgeToObjectiveC()().super.isa;
    [v25 initWithHashedPublicKey:isa publicKey:v27 status:v21 timestamp:v28 latitude:v22 longitude:v23 horizontalAccuracy:v24];

    sub_100485AFC((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    v19 += v20;
    --v17;
  }
  while (v17);
  uint64_t v29 = v34;
  swift_bridgeObjectRelease();
LABEL_14:
  v33(v29);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100463B08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v11 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11 - 8);
  uint64_t v14 = *(void *)(a2 + 280);
  sub_100485A94(a4, (uint64_t)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  unint64_t v15 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v16 = swift_allocObject();
  sub_100485510((uint64_t)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v16 + v15, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  swift_retain();
  sub_100B3C35C(a3, 0, (void (*)(Class))sub_100485298, v16, v14, a5, a6);
  swift_release();
  return swift_release();
}

uint64_t sub_100463C74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(int *)(type metadata accessor for OwnedBeaconGroup(0) + 40);
  uint64_t v5 = *(void *)(a1 + v4);
  long long v8[2] = a2;
  uint64_t v6 = sub_100476668((void (*)(char *))sub_100485308, (uint64_t)v8, v5);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(a1 + v4) = v6;
  return result;
}

uint64_t sub_100463CEC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v50 = a2;
  uint64_t v52 = a3;
  uint64_t v5 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = &v41[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v51 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = &v41[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v11 = sub_10000588C((uint64_t *)&unk_1016477E0);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = &v41[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v14 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = &v41[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v15);
  uint64_t v19 = &v41[-v18];
  sub_100485A94(a1, (uint64_t)&v41[-v18], type metadata accessor for OwnedBeaconGroup.PairingState);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    sub_100485A94(a1, v52, type metadata accessor for OwnedBeaconGroup.PairingState);
    return sub_100485AFC((uint64_t)v19, type metadata accessor for OwnedBeaconGroup.PairingState);
  }
  uint64_t v46 = v10;
  os_log_type_t v47 = v7;
  uint64_t v20 = v51;
  uint64_t v49 = v3;
  uint64_t v21 = (int *)sub_10000588C(&qword_101643D80);
  uint64_t v22 = (uint64_t)&v19[v21[12]];
  sub_100037A24(*(void *)&v19[v21[16]], *(void *)&v19[v21[16] + 8]);
  double v23 = &v19[v21[24]];
  int v24 = *v23;
  int v43 = v23[1];
  int v44 = v24;
  int v42 = v23[2];
  sub_10001D608(v22, (uint64_t)v13, (uint64_t *)&unk_1016477E0);
  sub_100485A94(a1, (uint64_t)v17, type metadata accessor for OwnedBeaconGroup.PairingState);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t v26 = a1;
  uint64_t v48 = v13;
  uint64_t v45 = v14;
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v27 = a1;
    Class v28 = &v17[v21[12]];
    sub_100037A24(*(void *)&v17[v21[16]], *(void *)&v17[v21[16] + 8]);
    uint64_t v29 = (uint64_t)v47;
    uint64_t v30 = v8;
    uint64_t v31 = v20;
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v20 + 32))(v47, v17, v30);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v20 + 56))(v29, 0, 1, v30);
    uint64_t v32 = (uint64_t)v28;
    uint64_t v26 = v27;
    sub_10001DAB4(v32, (uint64_t *)&unk_1016477E0);
  }
  else
  {
    uint64_t v29 = (uint64_t)v47;
    uint64_t v30 = v8;
    uint64_t v31 = v20;
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v47, 1, 1, v30);
    sub_100485AFC((uint64_t)v17, type metadata accessor for OwnedBeaconGroup.PairingState);
  }
  uint64_t v34 = v52;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30) == 1)
  {
    sub_10001DAB4((uint64_t)v48, (uint64_t *)&unk_1016477E0);
    sub_10001DAB4(v29, &qword_101638CF0);
  }
  else
  {
    uint64_t v35 = v26;
    uint64_t v36 = v46;
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v31 + 32))(v46, v29, v30);
    type metadata accessor for OwnedBeaconRecord();
    char v37 = static UUID.== infix(_:_:)();
    long long v38 = *(void (**)(unsigned char *, uint64_t))(v31 + 8);
    v38(v36, v30);
    if (v37)
    {
      uint64_t v39 = sub_10000588C((uint64_t *)&unk_101647810);
      uint64_t v40 = (unsigned char *)(v52 + *(int *)(v39 + 48));
      sub_10001D608((uint64_t)v48, v52, (uint64_t *)&unk_1016477E0);
      *uint64_t v40 = v44;
      v40[1] = v43;
      v40[2] = v42;
      swift_storeEnumTagMultiPayload();
      return ((uint64_t (*)(unsigned char *, uint64_t))v38)(v19, v30);
    }
    sub_10001DAB4((uint64_t)v48, (uint64_t *)&unk_1016477E0);
    uint64_t v34 = v52;
    uint64_t v26 = v35;
  }
  sub_100485A94(v26, v34, type metadata accessor for OwnedBeaconGroup.PairingState);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v31 + 8))(v19, v30);
}

uint64_t sub_10046421C(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4 = type metadata accessor for OwnedBeaconGroup(0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_10163C650);
  __chkstk_darwin(v7);
  uint64_t v9 = (void *)((char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001D074(a1, (uint64_t)v9, &qword_10163C650);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v10 = *v9;
    static os_log_type_t.error.getter();
    if (qword_1016372A8 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v11 = swift_allocObject();
    *(_OWORD *)(v11 + 16) = xmmword_101342130;
    v20[1] = v10;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v12 = String.init<A>(describing:)();
    uint64_t v14 = v13;
    *(void *)(v11 + 56) = &type metadata for String;
    *(void *)(v11 + 64) = sub_10000B4CC();
    *(void *)(v11 + 32) = v12;
    *(void *)(v11 + 40) = v14;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    swift_errorRetain();
    a2(v10);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    sub_100485510((uint64_t)v9, (uint64_t)v6, type metadata accessor for OwnedBeaconGroup);
    static os_log_type_t.default.getter();
    if (qword_1016372A8 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v16 = swift_allocObject();
    *(_OWORD *)(v16 + 16) = xmmword_101342130;
    type metadata accessor for UUID();
    sub_100482848((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v19 = v18;
    *(void *)(v16 + 56) = &type metadata for String;
    *(void *)(v16 + 64) = sub_10000B4CC();
    *(void *)(v16 + 32) = v17;
    *(void *)(v16 + 40) = v19;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    a2(0);
    return sub_100485AFC((uint64_t)v6, type metadata accessor for OwnedBeaconGroup);
  }
}

uint64_t sub_10046458C(uint64_t a1, uint64_t (*a2)(void))
{
  return a2();
}

uint64_t sub_1004645B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v39 = a1;
  uint64_t v7 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v40 = v13;
  uint64_t v41 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v32 - v14;
  if (qword_101636880 != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  sub_100010324(v16, (uint64_t)qword_10170D770);
  char v37 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  uint64_t v38 = v11 + 16;
  v37(v15, a2, v10);
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = swift_slowAlloc();
    uint64_t v35 = v9;
    uint64_t v20 = v19;
    uint64_t v33 = swift_slowAlloc();
    v44[0] = v33;
    *(_DWORD *)uint64_t v20 = 16777987;
    LOBYTE(v42) = v39;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v20 + 5) = 2160;
    *(void *)&long long v42 = 1752392040;
    uint64_t v36 = a4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v20 + 15) = 2081;
    uint64_t v34 = a2;
    sub_100482848((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)&long long v42 = sub_1008FA0F0(v21, v22, v44);
    a4 = v36;
    a2 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v15, v10);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "        OwnerSessionProtocol: updateBatteryStatus %hhufor beacon %{private,mask.hash}s.", (uint8_t *)v20, 0x19u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v9 = v35;
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v15, v10);
  }

  sub_100ACCD98(a2, (uint64_t)&v42);
  if (v43)
  {
    sub_10001CEB0(&v42, (uint64_t)v44);
    char v23 = sub_1012D4FB0(v44);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v44);
    char v24 = 1;
    switch(v23)
    {
      case 1:
        char v24 = 2;
        break;
      case 2:
        char v24 = 4;
        break;
      case 3:
        char v24 = 5;
        break;
      case 4:
        goto LABEL_10;
      default:
        break;
    }
  }
  else
  {
    sub_10001DAB4((uint64_t)&v42, (uint64_t *)&unk_10163BBE0);
LABEL_10:
    char v25 = sub_1012D6678(v39);
    if (v25 == 7) {
      char v24 = 0;
    }
    else {
      char v24 = v25;
    }
  }
  uint64_t v26 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v9, 1, 1, v26);
  uint64_t v27 = v41;
  v37(v41, a2, v10);
  unint64_t v28 = (*(unsigned __int8 *)(v11 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v29 = v28 + v40;
  uint64_t v30 = (char *)swift_allocObject();
  *((void *)v30 + 2) = 0;
  *((void *)v30 + 3) = 0;
  *((void *)v30 + 4) = a3;
  *((void *)v30 + 5) = a4;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v30[v28], v27, v10);
  v30[v29] = v24;
  swift_retain();
  sub_1008F5E44((uint64_t)v9, (uint64_t)&unk_101645898, (uint64_t)v30);
  return swift_release();
}

uint64_t sub_100464ACC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  *(unsigned char *)(v7 + 192) = a7;
  *(void *)(v7 + 144) = a5;
  *(void *)(v7 + 152) = a6;
  *(void *)(v7 + 136) = a4;
  return _swift_task_switch(sub_100464AF4, 0, 0);
}

uint64_t sub_100464AF4()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_101639358 + dword_101639358);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 160) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100464C30;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100464C30(uint64_t a1)
{
  *(void *)(*(void *)v1 + 168) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100464D30, 0, 0);
}

uint64_t sub_100464D30()
{
  uint64_t v1 = v0 + 16;
  if (*(void *)(v0 + 168))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 176) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100464EBC;
    uint64_t v3 = *(void *)(v0 + 152);
    char v4 = *(unsigned char *)(v0 + 192);
    return sub_10105A6E0(v3, v4);
  }
  else
  {
    uint64_t v6 = *(void (**)(void *))(v0 + 136);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    type metadata accessor for UpdateBatteryLevelError(0);
    *(void *)(v0 + 128) = 3;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100482848(&qword_1016384D0, type metadata accessor for UpdateBatteryLevelError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v7 = *(void **)(v0 + 120);
    v6(v7);

    uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
    return v8();
  }
}

uint64_t sub_100464EBC()
{
  *(void *)(*(void *)v1 + 184) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100465044;
  }
  else {
    uint64_t v2 = sub_100464FD0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100464FD0()
{
  (*(void (**)(void))(v0 + 136))(0);
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100465044()
{
  uint64_t v1 = v0[23];
  uint64_t v2 = (void (*)(uint64_t))v0[17];
  swift_errorRetain();
  v2(v1);
  swift_release();
  swift_errorRelease();
  swift_errorRelease();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t sub_1004650DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v53 = a4;
  uint64_t v51 = a3;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v50 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v49 = (char *)&v40 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v40 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v40 - v15;
  if (qword_101636BC8 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_100010324(v17, (uint64_t)qword_10170E0D0);
  os_log_type_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v18(v16, a1, v6);
  uint64_t v48 = v18;
  v18(v14, a2, v6);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  int v21 = v20;
  os_log_type_t v47 = v19;
  if (os_log_type_enabled(v19, v20))
  {
    unint64_t v22 = v14;
    uint64_t v23 = swift_slowAlloc();
    uint64_t v44 = swift_slowAlloc();
    uint64_t v55 = v44;
    *(_DWORD *)uint64_t v23 = 136446979;
    int v43 = v21;
    uint64_t v54 = sub_1008FA0F0(0xD00000000000003ELL, 0x80000001013FDA10, &v55);
    uint64_t v45 = a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v23 + 12) = 2082;
    uint64_t v46 = v23 + 14;
    uint64_t v42 = sub_100482848((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v54 = sub_1008FA0F0(v24, v25, &v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v46 = a1;
    uint64_t v41 = *(void (**)(char *, uint64_t))(v7 + 8);
    v41(v16, v6);
    *(_WORD *)(v23 + 22) = 2160;
    uint64_t v54 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v23 + 32) = 2081;
    uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v54 = sub_1008FA0F0(v26, v27, &v55);
    a2 = v45;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v41(v22, v6);
    a1 = v46;
    unint64_t v28 = v47;
    _os_log_impl((void *)&_mh_execute_header, v47, (os_log_type_t)v43, "%{public}s commandIdentifier: %{public}s beaconIdentifier: %{private,mask.hash}s", (uint8_t *)v23, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v29 = *(void (**)(char *, uint64_t))(v7 + 8);
    v29(v16, v6);
    v29(v14, v6);
  }
  type metadata accessor for Transaction();
  uint64_t v30 = v48;
  uint64_t v31 = v49;
  v48(v49, a2, v6);
  uint64_t v32 = v50;
  v30(v50, a1, v6);
  uint64_t v33 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v34 = (v33 + 40) & ~v33;
  uint64_t v35 = (v8 + v33 + v34) & ~v33;
  uint64_t v36 = (char *)swift_allocObject();
  uint64_t v37 = v51;
  *((void *)v36 + 2) = v52;
  *((void *)v36 + 3) = v37;
  *((void *)v36 + 4) = v53;
  uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
  v38(&v36[v34], v31, v6);
  v38(&v36[v35], v32, v6);
  swift_retain();
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  return swift_release();
}

uint64_t sub_10046560C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[38] = a4;
  v5[39] = a5;
  v5[36] = a2;
  v5[37] = a3;
  v5[35] = a1;
  sub_10000588C(&qword_101638CF0);
  v5[40] = swift_task_alloc();
  v5[41] = swift_task_alloc();
  v5[42] = type metadata accessor for AccessoryCommand();
  v5[43] = swift_task_alloc();
  v5[44] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for UUID();
  v5[45] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[46] = v7;
  v5[47] = *(void *)(v7 + 64);
  v5[48] = swift_task_alloc();
  v5[49] = swift_task_alloc();
  v5[50] = swift_task_alloc();
  v5[51] = swift_task_alloc();
  v5[52] = swift_task_alloc();
  v5[53] = swift_task_alloc();
  v5[54] = swift_task_alloc();
  v5[55] = sub_10000588C(&qword_10163B9F0);
  v5[56] = swift_task_alloc();
  return _swift_task_switch(sub_1004657DC, 0, 0);
}

uint64_t sub_1004657DC()
{
  uint64_t v1 = qword_1016375E8;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_101639258 + dword_101639258);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 456) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_10046592C;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10046592C(uint64_t a1)
{
  *(void *)(*(void *)v1 + 464) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100465A2C, 0, 0);
}

uint64_t sub_100465A2C()
{
  uint64_t v1 = *(void *)(v0 + 464);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  if (v1)
  {
    uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 136, (uint64_t *)&unk_101638D30);
    if (*(void *)(v0 + 160))
    {
      sub_10001CEB0((long long *)(v0 + 136), v0 + 96);
      sub_10001CD44((void *)(v0 + 96), *(void *)(v0 + 120));
      uint64_t v11 = (uint64_t (__cdecl *)())((char *)&dword_1016390D8 + dword_1016390D8);
      uint64_t v3 = (void *)swift_task_alloc();
      *(void *)(v0 + 472) = v3;
      *uint64_t v3 = v0;
      v3[1] = sub_100465CF4;
      return v11();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    if (qword_101636BC8 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_10170E0D0);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Missing OwnerCommandService to startBTFinding!", v7, 2u);
      swift_slowDealloc();
    }
    uint64_t v8 = *(void (**)(void))(v0 + 288);

    sub_1003A4778();
    swift_allocError();
    unsigned char *v9 = 11;
    v8();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
    return v10();
  }
  return result;
}

uint64_t sub_100465CF4(uint64_t a1)
{
  *(void *)(*(void *)v1 + 480) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100465DF4, 0, 0);
}

uint64_t sub_100465DF4()
{
  uint64_t v1 = v0[60];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 12));
  if (v1)
  {
    uint64_t v2 = v0[60];
    return _swift_task_switch(sub_100466040, v2, 0);
  }
  else
  {
    if (qword_101636BC8 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_10170E0D0);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      os_log_type_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Missing BeaconStoreActor to startBTFinding!", v6, 2u);
      swift_slowDealloc();
    }
    uint64_t v7 = (void (*)(void))v0[36];

    sub_1003A4778();
    swift_allocError();
    *uint64_t v8 = 11;
    v7();
    swift_errorRelease();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
}

uint64_t sub_100466040()
{
  uint64_t v1 = v0[60];
  uint64_t v2 = v0[54];
  uint64_t v3 = v0[46];
  uint64_t v4 = v0[45];
  uint64_t v5 = v0[38];
  v0[61] = *(void *)(v1 + 136);
  os_log_type_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[62] = v6;
  v0[63] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v2, v5, v4);
  unint64_t v7 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v8 = swift_allocObject();
  v0[64] = v8;
  *(void *)(v8 + 16) = v1;
  uint64_t v9 = *(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32);
  v0[65] = v9;
  v0[66] = (v3 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v9(v8 + v7, v2, v4);
  swift_retain();
  return _swift_task_switch(sub_100466154, 0, 0);
}

uint64_t sub_100466154()
{
  uint64_t v1 = v0[64];
  uint64_t v2 = v0[61];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[67] = v3;
  v3[2] = v2;
  v3[3] = sub_100484638;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[68] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10046625C;
  uint64_t v6 = v0[55];
  uint64_t v5 = v0[56];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1002F7340, v3, v6);
}

uint64_t sub_10046625C()
{
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_100466390, 0, 0);
}

uint64_t sub_100466390()
{
  uint64_t v44 = v0;
  uint64_t v1 = v0[56];
  uint64_t v2 = type metadata accessor for OwnedBeaconRecord();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    sub_10001DAB4(v1, &qword_10163B9F0);
    char v3 = 0;
  }
  else
  {
    id v4 = sub_100D1C7BC();
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;
    if (v5 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v7 == v8) {
      char v3 = 1;
    }
    else {
      char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    uint64_t v10 = v0[56];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    sub_100485AFC(v10, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  }
  uint64_t v11 = (void (*)(uint64_t, uint64_t, uint64_t))v0[62];
  uint64_t v12 = v0[53];
  uint64_t v13 = v0[45];
  uint64_t v14 = v0[46];
  uint64_t v16 = v0[40];
  uint64_t v15 = v0[41];
  uint64_t v17 = v0[38];
  v11(v15, v0[39], v13);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(v15, 0, 1, v13);
  v11(v12, v17, v13);
  sub_10001D074(v15, v16, &qword_101638CF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v16, 1, v13) == 1)
  {
    uint64_t v19 = v0[40];
    uint64_t v18 = v0[41];
    UUID.init()();
    sub_10001DAB4(v18, &qword_101638CF0);
    sub_10001DAB4(v19, &qword_101638CF0);
  }
  else
  {
    os_log_type_t v20 = (void (*)(uint64_t, uint64_t, uint64_t))v0[65];
    uint64_t v21 = v0[52];
    uint64_t v22 = v0[45];
    uint64_t v23 = v0[40];
    sub_10001DAB4(v0[41], &qword_101638CF0);
    v20(v21, v23, v22);
  }
  uint64_t v24 = (void (*)(uint64_t, uint64_t, uint64_t))v0[65];
  uint64_t v25 = v0[53];
  uint64_t v27 = v0[44];
  uint64_t v26 = v0[45];
  unint64_t v28 = (int *)v0[42];
  v24(v27, v0[52], v26);
  v24(v27 + v28[5], v25, v26);
  uint64_t v29 = v27 + v28[6];
  *(void *)uint64_t v29 = 120;
  *(unsigned char *)(v29 + 8) = 2;
  *(unsigned char *)(v27 + v28[7]) = v3 & 1;
  *(unsigned char *)(v27 + v28[8]) = 1;
  if (qword_101636BC8 != -1) {
    swift_once();
  }
  uint64_t v30 = v0[43];
  uint64_t v31 = v0[44];
  uint64_t v32 = type metadata accessor for Logger();
  v0[69] = sub_100010324(v32, (uint64_t)qword_10170E0D0);
  sub_100485A94(v31, v30, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
  uint64_t v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.default.getter();
  BOOL v35 = os_log_type_enabled(v33, v34);
  uint64_t v36 = v0[43];
  if (v35)
  {
    uint64_t v37 = (uint8_t *)swift_slowAlloc();
    uint64_t v43 = swift_slowAlloc();
    *(_DWORD *)uint64_t v37 = 136315138;
    uint64_t v38 = sub_1010F567C();
    v0[34] = sub_1008FA0F0(v38, v39, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100485AFC(v36, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "Executing startBTFinding command: %s", v37, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100485AFC(v0[43], (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
  }

  uint64_t v40 = (void *)swift_task_alloc();
  v0[70] = v40;
  *uint64_t v40 = v0;
  v40[1] = sub_10046682C;
  uint64_t v41 = v0[44];
  return sub_10122C044(v41);
}

uint64_t sub_10046682C()
{
  *(void *)(*(void *)v1 + 568) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100466D2C;
  }
  else {
    uint64_t v2 = sub_100466940;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100466940()
{
  uint64_t v23 = v0;
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 496);
  uint64_t v2 = *(void *)(v0 + 400);
  uint64_t v3 = *(void *)(v0 + 360);
  uint64_t v4 = *(void *)(v0 + 304);
  v1(*(void *)(v0 + 408), *(void *)(v0 + 312), v3);
  v1(v2, v4, v3);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = *(void *)(v0 + 408);
    uint64_t v20 = *(void *)(v0 + 400);
    uint64_t v8 = *(void *)(v0 + 360);
    uint64_t v21 = *(void *)(v0 + 368);
    uint64_t v9 = swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136446979;
    *(void *)(v0 + 240) = sub_1008FA0F0(0xD00000000000003ELL, 0x80000001013FDA10, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v9 + 12) = 2082;
    sub_100482848((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v10 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 248) = sub_1008FA0F0(v10, v11, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
    v12(v7, v8);
    *(_WORD *)(v9 + 22) = 2160;
    *(void *)(v0 + 256) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v9 + 32) = 2081;
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 264) = sub_1008FA0F0(v13, v14, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v12(v20, v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s commandIdentifier: %{public}s beaconIdentifier: %{private,mask.hash}s completed successfully!", (uint8_t *)v9, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v15 = *(void *)(v0 + 400);
    uint64_t v16 = *(void *)(v0 + 360);
    uint64_t v17 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 368) + 8);
    v17(*(void *)(v0 + 408), v16);
    v17(v15, v16);
  }
  (*(void (**)(void))(v0 + 288))(0);
  swift_release();
  swift_release();
  sub_100485AFC(*(void *)(v0 + 352), (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
  return v18();
}

uint64_t sub_100466D2C()
{
  uint64_t v27 = v0;
  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[62];
  uint64_t v2 = v0[48];
  uint64_t v3 = v0[45];
  uint64_t v4 = v0[38];
  v1(v0[49], v0[39], v3);
  v1(v2, v4, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v22 = v0[49];
    uint64_t v23 = v0[48];
    uint64_t v7 = v0[45];
    uint64_t v25 = v0[46];
    uint64_t v8 = swift_slowAlloc();
    uint64_t v24 = (void *)swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136447235;
    v0[25] = sub_1008FA0F0(0xD00000000000003ELL, 0x80000001013FDA10, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 12) = 2082;
    sub_100482848((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[26] = sub_1008FA0F0(v9, v10, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    unint64_t v11 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
    v11(v22, v7);
    *(_WORD *)(v8 + 22) = 2160;
    v0[27] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 32) = 2081;
    uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[28] = sub_1008FA0F0(v12, v13, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v11(v23, v7);
    *(_WORD *)(v8 + 42) = 2114;
    swift_errorRetain();
    uint64_t v14 = _swift_stdlib_bridgeErrorToNSError();
    v0[29] = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v24 = v14;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s commandIdentifier: %{public}s beaconIdentifier: %{private,mask.hash}s failed with error: %{public}@!", (uint8_t *)v8, 0x34u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v15 = v0[48];
    uint64_t v16 = v0[45];
    uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v0[46] + 8);
    v17(v0[49], v16);
    v17(v15, v16);
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v18 = v0[71];
  uint64_t v19 = (void (*)(uint64_t))v0[36];
  swift_errorRetain();
  v19(v18);
  swift_release();
  swift_release();
  swift_errorRelease();
  swift_errorRelease();
  sub_100485AFC(v0[44], (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v20 = (uint64_t (*)(void))v0[1];
  return v20();
}

uint64_t sub_10046720C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v53 = a4;
  uint64_t v51 = a3;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v50 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v49 = (char *)&v40 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v40 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v40 - v15;
  if (qword_101636BC8 != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_100010324(v17, (uint64_t)qword_10170E0D0);
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  v18(v16, a1, v6);
  uint64_t v48 = v18;
  v18(v14, a2, v6);
  uint64_t v19 = Logger.logObject.getter();
  os_log_type_t v20 = static os_log_type_t.default.getter();
  int v21 = v20;
  os_log_type_t v47 = v19;
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v22 = v14;
    uint64_t v23 = swift_slowAlloc();
    uint64_t v44 = swift_slowAlloc();
    uint64_t v55 = v44;
    *(_DWORD *)uint64_t v23 = 136446979;
    int v43 = v21;
    uint64_t v54 = sub_1008FA0F0(0xD00000000000003DLL, 0x80000001013FDA80, &v55);
    uint64_t v45 = a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v23 + 12) = 2082;
    uint64_t v46 = v23 + 14;
    uint64_t v42 = sub_100482848((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v54 = sub_1008FA0F0(v24, v25, &v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v46 = a1;
    uint64_t v41 = *(void (**)(char *, uint64_t))(v7 + 8);
    v41(v16, v6);
    *(_WORD *)(v23 + 22) = 2160;
    uint64_t v54 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v23 + 32) = 2081;
    uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v54 = sub_1008FA0F0(v26, v27, &v55);
    a2 = v45;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v41(v22, v6);
    a1 = v46;
    uint64_t v28 = v47;
    _os_log_impl((void *)&_mh_execute_header, v47, (os_log_type_t)v43, "%{public}s commandIdentifier: %{public}s beaconIdentifier: %{private,mask.hash}s", (uint8_t *)v23, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v29 = *(void (**)(char *, uint64_t))(v7 + 8);
    v29(v16, v6);
    v29(v14, v6);
  }
  type metadata accessor for Transaction();
  uint64_t v30 = v48;
  uint64_t v31 = v49;
  v48(v49, a2, v6);
  uint64_t v32 = v50;
  v30(v50, a1, v6);
  uint64_t v33 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v34 = (v33 + 40) & ~v33;
  uint64_t v35 = (v8 + v33 + v34) & ~v33;
  uint64_t v36 = (char *)swift_allocObject();
  uint64_t v37 = v51;
  *((void *)v36 + 2) = v52;
  *((void *)v36 + 3) = v37;
  *((void *)v36 + 4) = v53;
  uint64_t v38 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
  v38(&v36[v34], v31, v6);
  v38(&v36[v35], v32, v6);
  swift_retain();
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  return swift_release();
}

uint64_t sub_10046773C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[38] = a4;
  v5[39] = a5;
  v5[36] = a2;
  v5[37] = a3;
  v5[35] = a1;
  sub_10000588C(&qword_101638CF0);
  v5[40] = swift_task_alloc();
  v5[41] = swift_task_alloc();
  v5[42] = type metadata accessor for AccessoryCommand();
  v5[43] = swift_task_alloc();
  v5[44] = swift_task_alloc();
  uint64_t v6 = type metadata accessor for UUID();
  v5[45] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[46] = v7;
  v5[47] = *(void *)(v7 + 64);
  v5[48] = swift_task_alloc();
  v5[49] = swift_task_alloc();
  v5[50] = swift_task_alloc();
  v5[51] = swift_task_alloc();
  v5[52] = swift_task_alloc();
  v5[53] = swift_task_alloc();
  v5[54] = swift_task_alloc();
  v5[55] = sub_10000588C(&qword_10163B9F0);
  v5[56] = swift_task_alloc();
  return _swift_task_switch(sub_10046790C, 0, 0);
}

uint64_t sub_10046790C()
{
  uint64_t v1 = qword_1016375E8;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_101639258 + dword_101639258);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 456) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_100467A5C;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100467A5C(uint64_t a1)
{
  *(void *)(*(void *)v1 + 464) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100467B5C, 0, 0);
}

uint64_t sub_100467B5C()
{
  uint64_t v1 = *(void *)(v0 + 464);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  if (v1)
  {
    uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 136, (uint64_t *)&unk_101638D30);
    if (*(void *)(v0 + 160))
    {
      sub_10001CEB0((long long *)(v0 + 136), v0 + 96);
      sub_10001CD44((void *)(v0 + 96), *(void *)(v0 + 120));
      uint64_t v11 = (uint64_t (__cdecl *)())((char *)&dword_1016390D8 + dword_1016390D8);
      uint64_t v3 = (void *)swift_task_alloc();
      *(void *)(v0 + 472) = v3;
      *uint64_t v3 = v0;
      v3[1] = sub_100467E24;
      return v11();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    if (qword_101636BC8 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_10170E0D0);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Missing OwnerCommandService to startBTFinding!", v7, 2u);
      swift_slowDealloc();
    }
    uint64_t v8 = *(void (**)(void))(v0 + 288);

    sub_1003A4778();
    swift_allocError();
    unsigned char *v9 = 11;
    v8();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
    return v10();
  }
  return result;
}

uint64_t sub_100467E24(uint64_t a1)
{
  *(void *)(*(void *)v1 + 480) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100467F24, 0, 0);
}

uint64_t sub_100467F24()
{
  uint64_t v1 = v0[60];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 12));
  if (v1)
  {
    uint64_t v2 = v0[60];
    return _swift_task_switch(sub_100468170, v2, 0);
  }
  else
  {
    if (qword_101636BC8 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_10170E0D0);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      os_log_type_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Missing BeaconStoreActor to startBTFinding!", v6, 2u);
      swift_slowDealloc();
    }
    uint64_t v7 = (void (*)(void))v0[36];

    sub_1003A4778();
    swift_allocError();
    *uint64_t v8 = 11;
    v7();
    swift_errorRelease();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
}

uint64_t sub_100468170()
{
  uint64_t v1 = v0[60];
  uint64_t v2 = v0[54];
  uint64_t v3 = v0[46];
  uint64_t v4 = v0[45];
  uint64_t v5 = v0[38];
  v0[61] = *(void *)(v1 + 136);
  os_log_type_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[62] = v6;
  v0[63] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v2, v5, v4);
  unint64_t v7 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v8 = swift_allocObject();
  v0[64] = v8;
  *(void *)(v8 + 16) = v1;
  uint64_t v9 = *(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32);
  v0[65] = v9;
  v0[66] = (v3 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v9(v8 + v7, v2, v4);
  swift_retain();
  return _swift_task_switch(sub_100468284, 0, 0);
}

uint64_t sub_100468284()
{
  uint64_t v1 = v0[64];
  uint64_t v2 = v0[61];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[67] = v3;
  v3[2] = v2;
  v3[3] = sub_100484638;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[68] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10046838C;
  uint64_t v6 = v0[55];
  uint64_t v5 = v0[56];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_1002F7340, v3, v6);
}

uint64_t sub_10046838C()
{
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_1004684C0, 0, 0);
}

uint64_t sub_1004684C0()
{
  uint64_t v44 = v0;
  uint64_t v1 = v0[56];
  uint64_t v2 = type metadata accessor for OwnedBeaconRecord();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    sub_10001DAB4(v1, &qword_10163B9F0);
    char v3 = 0;
  }
  else
  {
    id v4 = sub_100D1C7BC();
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;
    if (v5 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v7 == v8) {
      char v3 = 1;
    }
    else {
      char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    uint64_t v10 = v0[56];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    sub_100485AFC(v10, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  }
  uint64_t v11 = (void (*)(uint64_t, uint64_t, uint64_t))v0[62];
  uint64_t v12 = v0[53];
  uint64_t v13 = v0[45];
  uint64_t v14 = v0[46];
  uint64_t v16 = v0[40];
  uint64_t v15 = v0[41];
  uint64_t v17 = v0[38];
  v11(v15, v0[39], v13);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v14 + 56))(v15, 0, 1, v13);
  v11(v12, v17, v13);
  sub_10001D074(v15, v16, &qword_101638CF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v16, 1, v13) == 1)
  {
    uint64_t v19 = v0[40];
    uint64_t v18 = v0[41];
    UUID.init()();
    sub_10001DAB4(v18, &qword_101638CF0);
    sub_10001DAB4(v19, &qword_101638CF0);
  }
  else
  {
    os_log_type_t v20 = (void (*)(uint64_t, uint64_t, uint64_t))v0[65];
    uint64_t v21 = v0[52];
    uint64_t v22 = v0[45];
    uint64_t v23 = v0[40];
    sub_10001DAB4(v0[41], &qword_101638CF0);
    v20(v21, v23, v22);
  }
  uint64_t v24 = (void (*)(uint64_t, uint64_t, uint64_t))v0[65];
  uint64_t v25 = v0[53];
  uint64_t v27 = v0[44];
  uint64_t v26 = v0[45];
  uint64_t v28 = (int *)v0[42];
  v24(v27, v0[52], v26);
  v24(v27 + v28[5], v25, v26);
  uint64_t v29 = v27 + v28[6];
  *(void *)uint64_t v29 = 2;
  *(unsigned char *)(v29 + 8) = 3;
  *(unsigned char *)(v27 + v28[7]) = v3 & 1;
  *(unsigned char *)(v27 + v28[8]) = 1;
  if (qword_101636BC8 != -1) {
    swift_once();
  }
  uint64_t v30 = v0[43];
  uint64_t v31 = v0[44];
  uint64_t v32 = type metadata accessor for Logger();
  v0[69] = sub_100010324(v32, (uint64_t)qword_10170E0D0);
  sub_100485A94(v31, v30, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
  uint64_t v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.default.getter();
  BOOL v35 = os_log_type_enabled(v33, v34);
  uint64_t v36 = v0[43];
  if (v35)
  {
    uint64_t v37 = (uint8_t *)swift_slowAlloc();
    uint64_t v43 = swift_slowAlloc();
    *(_DWORD *)uint64_t v37 = 136315138;
    uint64_t v38 = sub_1010F567C();
    v0[34] = sub_1008FA0F0(v38, v39, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100485AFC(v36, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "Executing stopBTFinding command: %s", v37, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100485AFC(v0[43], (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
  }

  uint64_t v40 = (void *)swift_task_alloc();
  v0[70] = v40;
  *uint64_t v40 = v0;
  v40[1] = sub_10046895C;
  uint64_t v41 = v0[44];
  return sub_10122C044(v41);
}

uint64_t sub_10046895C()
{
  *(void *)(*(void *)v1 + 568) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_100468E5C;
  }
  else {
    uint64_t v2 = sub_100468A70;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100468A70()
{
  uint64_t v23 = v0;
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 496);
  uint64_t v2 = *(void *)(v0 + 400);
  uint64_t v3 = *(void *)(v0 + 360);
  uint64_t v4 = *(void *)(v0 + 304);
  v1(*(void *)(v0 + 408), *(void *)(v0 + 312), v3);
  v1(v2, v4, v3);
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = *(void *)(v0 + 408);
    uint64_t v20 = *(void *)(v0 + 400);
    uint64_t v8 = *(void *)(v0 + 360);
    uint64_t v21 = *(void *)(v0 + 368);
    uint64_t v9 = swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136446979;
    *(void *)(v0 + 240) = sub_1008FA0F0(0xD00000000000003DLL, 0x80000001013FDA80, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v9 + 12) = 2082;
    sub_100482848((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v10 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 248) = sub_1008FA0F0(v10, v11, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v21 + 8);
    v12(v7, v8);
    *(_WORD *)(v9 + 22) = 2160;
    *(void *)(v0 + 256) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v9 + 32) = 2081;
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 264) = sub_1008FA0F0(v13, v14, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v12(v20, v8);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s commandIdentifier: %{public}s beaconIdentifier: %{private,mask.hash}s completed successfully!", (uint8_t *)v9, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v15 = *(void *)(v0 + 400);
    uint64_t v16 = *(void *)(v0 + 360);
    uint64_t v17 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 368) + 8);
    v17(*(void *)(v0 + 408), v16);
    v17(v15, v16);
  }
  (*(void (**)(void))(v0 + 288))(0);
  swift_release();
  swift_release();
  sub_100485AFC(*(void *)(v0 + 352), (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v18 = *(uint64_t (**)(void))(v0 + 8);
  return v18();
}

uint64_t sub_100468E5C()
{
  uint64_t v27 = v0;
  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[62];
  uint64_t v2 = v0[48];
  uint64_t v3 = v0[45];
  uint64_t v4 = v0[38];
  v1(v0[49], v0[39], v3);
  v1(v2, v4, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v22 = v0[49];
    uint64_t v23 = v0[48];
    uint64_t v7 = v0[45];
    uint64_t v25 = v0[46];
    uint64_t v8 = swift_slowAlloc();
    uint64_t v24 = (void *)swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136447235;
    v0[25] = sub_1008FA0F0(0xD00000000000003DLL, 0x80000001013FDA80, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 12) = 2082;
    sub_100482848((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[26] = sub_1008FA0F0(v9, v10, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    unint64_t v11 = *(void (**)(uint64_t, uint64_t))(v25 + 8);
    v11(v22, v7);
    *(_WORD *)(v8 + 22) = 2160;
    v0[27] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v8 + 32) = 2081;
    uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[28] = sub_1008FA0F0(v12, v13, &v26);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v11(v23, v7);
    *(_WORD *)(v8 + 42) = 2114;
    swift_errorRetain();
    uint64_t v14 = _swift_stdlib_bridgeErrorToNSError();
    v0[29] = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v24 = v14;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%{public}s commandIdentifier: %{public}s beaconIdentifier: %{private,mask.hash}s failed with error: %{public}@!", (uint8_t *)v8, 0x34u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    uint64_t v15 = v0[48];
    uint64_t v16 = v0[45];
    uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v0[46] + 8);
    v17(v0[49], v16);
    v17(v15, v16);
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v18 = v0[71];
  uint64_t v19 = (void (*)(uint64_t))v0[36];
  swift_errorRetain();
  v19(v18);
  swift_release();
  swift_release();
  swift_errorRelease();
  swift_errorRelease();
  sub_100485AFC(v0[44], (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v20 = (uint64_t (*)(void))v0[1];
  return v20();
}

uint64_t sub_10046933C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = sub_10000588C(&qword_1016511E0);
  __chkstk_darwin(v9 - 8);
  unint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for WildModeAssociationRecord(0);
  uint64_t v27 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v26 = (uint64_t)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (void *)swift_allocObject();
  v14[2] = a5;
  sub_100ACCD98(a2, (uint64_t)&v28);
  if (v29)
  {
    sub_10001CEB0(&v28, (uint64_t)v30);
    uint64_t v25 = v11;
    uint64_t v15 = a2;
    uint64_t v16 = a3;
    uint64_t v17 = v31;
    uint64_t v18 = v32;
    sub_10001CD44(v30, v31);
    uint64_t v19 = *(uint64_t (**)(uint64_t, uint64_t))(v18 + 144);
    uint64_t v20 = v18;
    a3 = v16;
    a2 = v15;
    unint64_t v11 = v25;
    LOBYTE(v17) = v19(v17, v20);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v30);
    if ((v17 & 1) == 0) {
      goto LABEL_9;
    }
  }
  else
  {
    sub_10001DAB4((uint64_t)&v28, (uint64_t *)&unk_10163BBE0);
  }
  sub_100AE381C(a2, (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v11, 1, v12) == 1)
  {
    sub_10001DAB4((uint64_t)v11, &qword_1016511E0);
  }
  else
  {
    uint64_t v21 = v26;
    sub_100485510((uint64_t)v11, v26, type metadata accessor for WildModeAssociationRecord);
    int v22 = *(unsigned __int8 *)(v21 + *(int *)(v12 + 52));
    sub_100485AFC(v21, type metadata accessor for WildModeAssociationRecord);
    if (v22 != 3)
    {
LABEL_9:
      sub_10046963C(a1, a2, a3, (uint64_t)sub_1001DF814, (uint64_t)v14);
      return swift_release();
    }
  }
  sub_10081AF4C(a1, a2, a3, (void (*)(char *))sub_1001DF814, v14, 62.0);
  return swift_release();
}

uint64_t sub_10046963C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v62 = a3;
  uint64_t v52 = a4;
  uint64_t v53 = a5;
  uint64_t v64 = a1;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v58 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v56 = (char *)v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v55 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v54 = (char *)v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = type metadata accessor for UUID();
  uint64_t v50 = *(void *)(v51 - 8);
  uint64_t v10 = *(void *)(v50 + 64);
  uint64_t v11 = __chkstk_darwin(v51);
  uint64_t v61 = (char *)v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v60 = (char *)v46 - v12;
  static os_log_type_t.default.getter();
  if (qword_101637278 != -1) {
    swift_once();
  }
  uint64_t v49 = qword_10170EFD0;
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_101347500;
  uint64_t v14 = UUID.uuidString.getter();
  uint64_t v16 = v15;
  *(void *)(v13 + 56) = &type metadata for String;
  unint64_t v17 = sub_10000B4CC();
  *(void *)(v13 + 64) = v17;
  *(void *)(v13 + 32) = v14;
  *(void *)(v13 + 40) = v16;
  uint64_t v18 = UUID.uuidString.getter();
  *(void *)(v13 + 96) = &type metadata for String;
  *(void *)(v13 + 104) = v17;
  *(void *)(v13 + 72) = v18;
  *(void *)(v13 + 80) = v19;
  uint64_t v59 = v6;
  uint64_t v57 = v8;
  unint64_t v20 = 0xE800000000000000;
  unint64_t v21 = 0x746C75616665642ELL;
  switch(v62)
  {
    case 0:
      break;
    case 1:
      unint64_t v21 = 0x676E69676E61722ELL;
      break;
    case 2:
      unint64_t v20 = 0xE900000000000067;
      goto LABEL_10;
    case 3:
      unint64_t v20 = 0x80000001013FD5F0;
      unint64_t v21 = 0xD000000000000010;
      break;
    case 4:
      unint64_t v20 = 0xEF64656D7269666ELL;
      unint64_t v21 = 0x6F4365756575712ELL;
      break;
    case 5:
      unint64_t v20 = 0xEE0074726F685367;
LABEL_10:
      unint64_t v21 = 0x6E696B636172742ELL;
      break;
    default:
      unint64_t v20 = 0xE700000000000000;
      unint64_t v21 = 0x6E776F6E6B6E75;
      break;
  }
  *(void *)(v13 + 136) = &type metadata for String;
  *(void *)(v13 + 144) = v17;
  *(void *)(v13 + 112) = v21;
  *(void *)(v13 + 120) = v20;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v22 = v50;
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v50 + 16);
  uint64_t v48 = a2;
  uint64_t v24 = v51;
  v23(v60, a2, v51);
  v23(v61, v64, v24);
  uint64_t v25 = *(unsigned __int8 *)(v22 + 80);
  uint64_t v26 = (v25 + 24) & ~v25;
  v46[1] = v25 | 7;
  uint64_t v47 = v26;
  uint64_t v27 = (v10 + v25 + v26) & ~v25;
  v46[0] = v27;
  unint64_t v28 = (v10 + v27 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = v63;
  uint64_t v30 = v29 + v26;
  uint64_t v31 = *(void (**)(uint64_t, char *, uint64_t))(v22 + 32);
  uint64_t v32 = v60;
  v31(v30, v60, v24);
  uint64_t v33 = v29 + v27;
  os_log_type_t v34 = v61;
  v31(v33, v61, v24);
  uint64_t v49 = v29;
  *(void *)(v29 + v28) = v62;
  BOOL v35 = (void *)(v29 + ((v28 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v36 = v53;
  *BOOL v35 = v52;
  v35[1] = v36;
  uint64_t v37 = v63;
  uint64_t v62 = *(void *)(v63 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_playbackCoordinatorModQueue);
  v23(v32, v48, v24);
  v23(v34, v64, v24);
  uint64_t v38 = swift_allocObject();
  *(void *)(v38 + 16) = v37;
  v31(v38 + v47, v32, v24);
  v31(v38 + v46[0], v34, v24);
  unint64_t v39 = (uint64_t (**)())(v38 + v28);
  uint64_t v40 = v49;
  *unint64_t v39 = sub_100483ED8;
  v39[1] = (uint64_t (*)())v40;
  aBlock[4] = sub_100483F8C;
  aBlock[5] = v38;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015C42E0;
  uint64_t v41 = _Block_copy(aBlock);
  swift_retain_n();
  swift_retain();
  swift_retain();
  uint64_t v42 = v54;
  static DispatchQoS.unspecified.getter();
  uint64_t v65 = _swiftEmptyArrayStorage;
  sub_100482848((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v43 = v56;
  uint64_t v44 = v59;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v41);
  swift_release();
  (*(void (**)(char *, uint64_t))(v58 + 8))(v43, v44);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v42, v57);
  return swift_release();
}

uint64_t sub_100469D7C(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v35 = a5;
  uint64_t v36 = a6;
  uint64_t v37 = a3;
  uint64_t v38 = a4;
  unint64_t v31 = a2;
  uint64_t v8 = sub_10000588C(&qword_10163A9E8);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for UUID();
  uint64_t v34 = *(void *)(v32 - 8);
  uint64_t v12 = v34;
  __chkstk_darwin(v32);
  uint64_t v14 = (char *)&v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void **)(a1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_tagCommandManager);
  uint64_t v33 = *(void (**)(char *, unint64_t))(v12 + 16);
  v33(v14, a2);
  uint64_t v16 = type metadata accessor for TagCommandManager();
  uint64_t v43 = v16;
  uint64_t v44 = &off_1015D9A60;
  v42[0] = v15;
  type metadata accessor for SoundPlaybackCoordinator();
  unint64_t v17 = (char *)swift_allocObject();
  uint64_t v18 = sub_1000BD078((uint64_t)v42, v16);
  __chkstk_darwin(v18);
  unint64_t v20 = (uint64_t *)((char *)&v31 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *))(v21 + 16))(v20);
  uint64_t v22 = *v20;
  id v23 = v15;
  uint64_t v24 = sub_1004785E8(v22, (uint64_t)v14, v17);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v42);

  uint64_t v43 = type metadata accessor for BeaconManagerService();
  uint64_t v44 = &off_1015C3AE8;
  v42[0] = a1;
  unint64_t v39 = v42;
  uint64_t v40 = v24;
  swift_retain();
  OS_dispatch_queue.sync<A>(execute:)();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v42);
  swift_retain();
  unint64_t v25 = v31;
  sub_1006AFCF0(v31, a1, (uint64_t)v24);
  swift_release();
  uint64_t v26 = v32;
  ((void (*)(char *, unint64_t, uint64_t))v33)(v14, v25, v32);
  uint64_t v27 = (uint64_t *)(a1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_playbackCoordinatorByBeaconIdentifier);
  swift_beginAccess();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v41 = *v27;
  *uint64_t v27 = 0x8000000000000000;
  sub_10016EAD0((uint64_t)v24, (uint64_t)v14, isUniquelyReferenced_nonNull_native);
  *uint64_t v27 = v41;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v34 + 8))(v14, v26);
  swift_endAccess();
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = v35;
  *(void *)(v29 + 24) = v36;
  swift_retain();
  sub_100BE1674(v37, v38, (uint64_t)sub_100483FF8, v29);
  swift_release();
  return swift_release();
}

uint64_t sub_10046A194(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v24 = a2;
  uint64_t v25 = a3;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v29 = *(void *)(v4 - 8);
  uint64_t v30 = v4;
  __chkstk_darwin(v4);
  unint64_t v28 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v26 = *(void *)(v6 - 8);
  uint64_t v27 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_log_type_t.default.getter();
  if (qword_101637278 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_101342130;
  aBlock[0] = a1;
  swift_errorRetain();
  sub_10000588C((uint64_t *)&unk_101638EB0);
  uint64_t v14 = String.init<A>(describing:)();
  uint64_t v16 = v15;
  *(void *)(v13 + 56) = &type metadata for String;
  *(void *)(v13 + 64) = sub_10000B4CC();
  *(void *)(v13 + 32) = v14;
  *(void *)(v13 + 40) = v16;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  (*(void (**)(char *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchQoS.QoSClass.default(_:), v9);
  unint64_t v17 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  uint64_t v18 = (void *)swift_allocObject();
  uint64_t v19 = v25;
  v18[2] = v24;
  v18[3] = v19;
  v18[4] = a1;
  aBlock[4] = sub_10027B0F4;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015C43D0;
  unint64_t v20 = _Block_copy(aBlock);
  swift_errorRetain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  unint64_t v31 = _swiftEmptyArrayStorage;
  sub_100482848((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v21 = v28;
  uint64_t v22 = v30;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v20);

  (*(void (**)(char *, uint64_t))(v29 + 8))(v21, v22);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v8, v27);
  return swift_release();
}

uint64_t sub_10046A628(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v10 = sub_10000588C(&qword_1016511E0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100AE381C(a2, (uint64_t)v12);
  uint64_t v13 = type metadata accessor for WildModeAssociationRecord(0);
  int v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13);
  uint64_t v15 = sub_10001DAB4((uint64_t)v12, &qword_1016511E0);
  if (v14 == 1)
  {
    uint64_t v16 = a1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_playbackCoordinatorByBeaconIdentifier;
    uint64_t v15 = swift_beginAccess();
    if (*(void *)(*(void *)v16 + 16))
    {
      swift_bridgeObjectRetain();
      sub_1007240CC(a2);
      if (v17)
      {
        swift_retain();
        swift_bridgeObjectRelease();
        uint64_t v18 = (void *)swift_allocObject();
        v18[2] = a1;
        v18[3] = a4;
        v18[4] = a5;
        swift_retain();
        swift_retain();
        sub_100BE1D18(a3, (uint64_t)sub_100483FD0, (uint64_t)v18);
        swift_release();
        return swift_release();
      }
      uint64_t v15 = swift_bridgeObjectRelease();
    }
  }
  return a4(v15);
}

uint64_t sub_10046A800(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[0] = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v16[0] - 8);
  __chkstk_darwin(v16[0]);
  uint64_t v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a3;
  *(void *)(v13 + 24) = a4;
  aBlock[4] = sub_1000A14F4;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015C4358;
  int v14 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v16[1] = _swiftEmptyArrayStorage;
  sub_100482848((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, void))(v10 + 8))(v12, v16[0]);
  return swift_release();
}

uint64_t sub_10046AAD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  int v14 = (char *)&v16 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100ACD178((uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_10001DAB4((uint64_t)v10, &qword_10163B9F0);
    return sub_10081FA30(a1, a2, a3, a4, 62.0);
  }
  sub_100485510((uint64_t)v10, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  if (sub_100D1C180())
  {
    sub_100485AFC((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    return sub_10081FA30(a1, a2, a3, a4, 62.0);
  }
  sub_10046ACD8(a1, a2, a3, a4);
  return sub_100485AFC((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
}

uint64_t sub_10046ACD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v45 = a4;
  uint64_t v42 = a2;
  uint64_t v43 = a3;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v50 = *(void *)(v5 - 8);
  uint64_t v51 = v5;
  __chkstk_darwin(v5);
  uint64_t v49 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v47 = *(void *)(v7 - 8);
  uint64_t v48 = v7;
  __chkstk_darwin(v7);
  uint64_t v46 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v39 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  uint64_t v11 = __chkstk_darwin(v39);
  uint64_t v41 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v38 - v12;
  static os_log_type_t.default.getter();
  if (qword_101637278 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_101347BA0;
  uint64_t v38 = a1;
  uint64_t v15 = UUID.uuidString.getter();
  uint64_t v17 = v16;
  *(void *)(v14 + 56) = &type metadata for String;
  unint64_t v18 = sub_10000B4CC();
  *(void *)(v14 + 64) = v18;
  *(void *)(v14 + 32) = v15;
  *(void *)(v14 + 40) = v17;
  uint64_t v19 = v42;
  uint64_t v20 = UUID.uuidString.getter();
  *(void *)(v14 + 96) = &type metadata for String;
  *(void *)(v14 + 104) = v18;
  *(void *)(v14 + 72) = v20;
  *(void *)(v14 + 80) = v21;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v22 = v44;
  uint64_t v40 = *(void *)(v44 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_playbackCoordinatorModQueue);
  id v23 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  uint64_t v24 = v39;
  v23(v13, v19, v39);
  uint64_t v25 = v41;
  v23(v41, v38, v24);
  uint64_t v26 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v27 = (v26 + 24) & ~v26;
  uint64_t v28 = (v10 + v26 + v27) & ~v26;
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = v22;
  uint64_t v30 = *(void (**)(uint64_t, char *, uint64_t))(v9 + 32);
  v30(v29 + v27, v13, v24);
  v30(v29 + v28, v25, v24);
  unint64_t v31 = (void *)(v29 + ((v10 + v28 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v32 = v45;
  *unint64_t v31 = v43;
  v31[1] = v32;
  aBlock[4] = sub_100484150;
  aBlock[5] = v29;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015C4420;
  uint64_t v33 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  uint64_t v34 = v46;
  static DispatchQoS.unspecified.getter();
  uint64_t v52 = _swiftEmptyArrayStorage;
  sub_100482848((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v35 = v49;
  uint64_t v36 = v51;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v33);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v35, v36);
  (*(void (**)(char *, uint64_t))(v47 + 8))(v34, v48);
  return swift_release();
}

uint64_t sub_10046B1EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = sub_10000588C(&qword_10163A9E8);
  uint64_t v43 = *(void *)(v10 - 8);
  uint64_t v44 = v10;
  __chkstk_darwin(v10);
  uint64_t v42 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = (uint64_t *)(a1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_playbackCoordinatorByBeaconIdentifier);
  swift_beginAccess();
  if (!*(void *)(*v16 + 16)) {
    goto LABEL_5;
  }
  swift_bridgeObjectRetain();
  sub_1007240CC(a2);
  if ((v17 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    uint64_t v18 = a2;
    uint64_t v38 = a2;
    uint64_t v19 = *(void **)(a1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_tagCommandManager);
    uint64_t v36 = v12;
    uint64_t v37 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
    v37(v15, v18, v12);
    uint64_t v20 = type metadata accessor for TagCommandManager();
    uint64_t v47 = v20;
    uint64_t v48 = &off_1015D9A60;
    v46[0] = v19;
    type metadata accessor for SoundPlaybackCoordinator();
    uint64_t v21 = swift_allocObject();
    uint64_t v41 = a5;
    uint64_t v22 = (char *)v21;
    uint64_t v23 = sub_1000BD078((uint64_t)v46, v20);
    uint64_t v40 = a4;
    __chkstk_darwin(v23);
    uint64_t v39 = a3;
    uint64_t v25 = (uint64_t *)((char *)&v36 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
    (*(void (**)(uint64_t *))(v26 + 16))(v25);
    uint64_t v27 = *v25;
    id v28 = v19;
    uint64_t v29 = sub_1004785E8(v27, (uint64_t)v15, v22);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v46);

    uint64_t v47 = type metadata accessor for BeaconManagerService();
    uint64_t v48 = &off_1015C3AE8;
    v46[0] = a1;
    __chkstk_darwin(v47);
    *(&v36 - 2) = (uint64_t)v46;
    *(&v36 - 1) = (uint64_t)v29;
    swift_retain();
    uint64_t v30 = v42;
    uint64_t v31 = v44;
    OS_dispatch_queue.sync<A>(execute:)();
    (*(void (**)(char *, uint64_t))(v43 + 8))(v30, v31);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v46);
    uint64_t v32 = v36;
    v37(v15, v38, v36);
    swift_beginAccess();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v45 = *v16;
    *uint64_t v16 = 0x8000000000000000;
    sub_10016EAD0((uint64_t)v29, (uint64_t)v15, isUniquelyReferenced_nonNull_native);
    *uint64_t v16 = v45;
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v32);
    swift_endAccess();
    uint64_t v34 = swift_allocObject();
    *(void *)(v34 + 16) = v40;
    *(void *)(v34 + 24) = v41;
    swift_retain();
    sub_100BE1D18(v39, (uint64_t)sub_100484220, v34);
    swift_release();
    return swift_release();
  }
  swift_retain();
  swift_bridgeObjectRelease();
  sub_100BE1D18(a3, a4, a5);
  return swift_release();
}

uint64_t sub_10046B698(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  static os_log_type_t.default.getter();
  if (qword_101637278 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_101342130;
  swift_errorRetain();
  sub_10000588C((uint64_t *)&unk_101638EB0);
  uint64_t v5 = String.init<A>(describing:)();
  uint64_t v7 = v6;
  *(void *)(v4 + 56) = &type metadata for String;
  *(void *)(v4 + 64) = sub_10000B4CC();
  *(void *)(v4 + 32) = v5;
  *(void *)(v4 + 40) = v7;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  return a2(a1);
}

uint64_t sub_10046B7C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v34 = a2;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v33 = &v26[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10);
  uint64_t v12 = &v26[-v11];
  if (qword_101636BC8 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_100010324(v13, (uint64_t)qword_10170E0D0);
  uint64_t v32 = *(void (**)(unsigned char *, uint64_t, uint64_t))(v8 + 16);
  v32(v12, a1, v7);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  int v16 = v15;
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v17 = swift_slowAlloc();
    uint64_t v29 = a1;
    uint64_t v18 = v17;
    uint64_t v28 = swift_slowAlloc();
    uint64_t v36 = v28;
    *(_DWORD *)uint64_t v18 = 136446723;
    int v27 = v16;
    uint64_t v35 = sub_1008FA0F0(0xD000000000000024, 0x80000001013FD9B0, &v36);
    uint64_t v30 = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v18 + 12) = 2160;
    uint64_t v35 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v18 + 22) = 2081;
    uint64_t v31 = a3;
    sub_100482848((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v35 = sub_1008FA0F0(v19, v20, &v36);
    uint64_t v4 = v30;
    a3 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v12, v7);
    _os_log_impl((void *)&_mh_execute_header, v14, (os_log_type_t)v27, "%{public}s beaconIdentifier: %{private,mask.hash}s", (uint8_t *)v18, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    a1 = v29;
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v12, v7);
  }

  type metadata accessor for Transaction();
  uint64_t v21 = v33;
  v32(v33, a1, v7);
  unint64_t v22 = (*(unsigned __int8 *)(v8 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v23 = (char *)swift_allocObject();
  uint64_t v24 = v34;
  *((void *)v23 + 2) = v4;
  *((void *)v23 + 3) = v24;
  *((void *)v23 + 4) = a3;
  (*(void (**)(char *, unsigned char *, uint64_t))(v8 + 32))(&v23[v22], v21, v7);
  swift_retain();
  swift_retain();
  static Transaction.asyncTask(name:block:)();
  return swift_release();
}

uint64_t sub_10046BBCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[35] = a3;
  v4[36] = a4;
  v4[33] = a1;
  v4[34] = a2;
  sub_10000588C(&qword_101638CF0);
  v4[37] = swift_task_alloc();
  v4[38] = swift_task_alloc();
  v4[39] = type metadata accessor for AccessoryCommand();
  v4[40] = swift_task_alloc();
  v4[41] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for UUID();
  v4[42] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[43] = v6;
  v4[44] = *(void *)(v6 + 64);
  v4[45] = swift_task_alloc();
  v4[46] = swift_task_alloc();
  v4[47] = swift_task_alloc();
  v4[48] = swift_task_alloc();
  v4[49] = swift_task_alloc();
  v4[50] = sub_10000588C(&qword_10163B9F0);
  v4[51] = swift_task_alloc();
  return _swift_task_switch(sub_10046BD80, 0, 0);
}

uint64_t sub_10046BD80()
{
  uint64_t v1 = qword_1016375E8;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_101639258 + dword_101639258);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 416) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_10046BED0;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10046BED0(uint64_t a1)
{
  *(void *)(*(void *)v1 + 424) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10046BFD0, 0, 0);
}

uint64_t sub_10046BFD0()
{
  uint64_t v1 = *(void *)(v0 + 424);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  if (v1)
  {
    uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 136, (uint64_t *)&unk_101638D30);
    if (*(void *)(v0 + 160))
    {
      sub_10001CEB0((long long *)(v0 + 136), v0 + 96);
      sub_10001CD44((void *)(v0 + 96), *(void *)(v0 + 120));
      uint64_t v11 = (uint64_t (__cdecl *)())((char *)&dword_1016390D8 + dword_1016390D8);
      uint64_t v3 = (void *)swift_task_alloc();
      *(void *)(v0 + 432) = v3;
      *uint64_t v3 = v0;
      v3[1] = sub_10046C27C;
      return v11();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    if (qword_101636BC8 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_10170E0D0);
    uint64_t v5 = Logger.logObject.getter();
    os_log_type_t v6 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Missing OwnerCommandService to startBTFinding!", v7, 2u);
      swift_slowDealloc();
    }
    uint64_t v8 = *(void (**)(void))(v0 + 272);

    sub_1003A4778();
    swift_allocError();
    unsigned char *v9 = 11;
    v8();
    swift_errorRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v10 = *(uint64_t (**)(void))(v0 + 8);
    return v10();
  }
  return result;
}

uint64_t sub_10046C27C(uint64_t a1)
{
  *(void *)(*(void *)v1 + 440) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10046C37C, 0, 0);
}

uint64_t sub_10046C37C()
{
  uint64_t v1 = v0[55];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 12));
  if (v1)
  {
    uint64_t v2 = v0[55];
    return _swift_task_switch(sub_10046C5AC, v2, 0);
  }
  else
  {
    if (qword_101636BC8 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_10170E0D0);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v4, v5))
    {
      os_log_type_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Missing BeaconStoreActor to startBTFinding!", v6, 2u);
      swift_slowDealloc();
    }
    uint64_t v7 = (void (*)(void))v0[34];

    sub_1003A4778();
    swift_allocError();
    *uint64_t v8 = 11;
    v7();
    swift_errorRelease();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v9 = (uint64_t (*)(void))v0[1];
    return v9();
  }
}

uint64_t sub_10046C5AC()
{
  uint64_t v1 = v0[55];
  uint64_t v2 = v0[49];
  uint64_t v3 = v0[43];
  uint64_t v4 = v0[42];
  uint64_t v5 = v0[36];
  v0[56] = *(void *)(v1 + 136);
  os_log_type_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[57] = v6;
  v0[58] = (v3 + 16) & 0xFFFFFFFFFFFFLL | 0xE3BA000000000000;
  v6(v2, v5, v4);
  unint64_t v7 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v8 = swift_allocObject();
  v0[59] = v8;
  *(void *)(v8 + 16) = v1;
  uint64_t v9 = *(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32);
  v0[60] = v9;
  v0[61] = (v3 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v9(v8 + v7, v2, v4);
  swift_retain();
  return _swift_task_switch(sub_10046C6BC, 0, 0);
}

uint64_t sub_10046C6BC()
{
  uint64_t v1 = v0[59];
  uint64_t v2 = v0[56];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[62] = v3;
  v3[2] = v2;
  v3[3] = sub_100484638;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[63] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10046C7C4;
  uint64_t v6 = v0[50];
  uint64_t v5 = v0[51];
  return withCheckedContinuation<A>(isolation:function:_:)(v5, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10001D89C, v3, v6);
}

uint64_t sub_10046C7C4()
{
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  return _swift_task_switch(sub_10046C8F8, 0, 0);
}

uint64_t sub_10046C8F8()
{
  uint64_t v44 = v0;
  uint64_t v1 = v0[51];
  uint64_t v2 = type metadata accessor for OwnedBeaconRecord();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    sub_10001DAB4(v1, &qword_10163B9F0);
    char v3 = 0;
  }
  else
  {
    id v4 = sub_100D1C7BC();
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;
    if (v5 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v7 == v8) {
      char v3 = 1;
    }
    else {
      char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    uint64_t v10 = v0[51];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    sub_100485AFC(v10, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  }
  uint64_t v11 = (void (*)(uint64_t, uint64_t, uint64_t))v0[57];
  uint64_t v12 = v0[48];
  uint64_t v13 = v0[42];
  uint64_t v14 = v0[43];
  uint64_t v16 = v0[37];
  uint64_t v15 = v0[38];
  uint64_t v17 = v0[36];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56))(v15, 1, 1, v13);
  v11(v12, v17, v13);
  sub_10001D074(v15, v16, &qword_101638CF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v16, 1, v13) == 1)
  {
    uint64_t v19 = v0[37];
    uint64_t v18 = v0[38];
    UUID.init()();
    sub_10001DAB4(v18, &qword_101638CF0);
    sub_10001DAB4(v19, &qword_101638CF0);
  }
  else
  {
    unint64_t v20 = (void (*)(uint64_t, uint64_t, uint64_t))v0[60];
    uint64_t v21 = v0[47];
    uint64_t v22 = v0[42];
    uint64_t v23 = v0[37];
    sub_10001DAB4(v0[38], &qword_101638CF0);
    v20(v21, v23, v22);
  }
  uint64_t v24 = (void (*)(uint64_t, uint64_t, uint64_t))v0[60];
  uint64_t v25 = v0[48];
  uint64_t v27 = v0[41];
  uint64_t v26 = v0[42];
  uint64_t v28 = (int *)v0[39];
  v24(v27, v0[47], v26);
  v24(v27 + v28[5], v25, v26);
  uint64_t v29 = v27 + v28[6];
  *(void *)uint64_t v29 = 0;
  *(unsigned char *)(v29 + 8) = 0;
  *(unsigned char *)(v27 + v28[7]) = v3 & 1;
  *(unsigned char *)(v27 + v28[8]) = 1;
  if (qword_101636BC8 != -1) {
    swift_once();
  }
  uint64_t v30 = v0[40];
  uint64_t v31 = v0[41];
  uint64_t v32 = type metadata accessor for Logger();
  v0[64] = sub_100010324(v32, (uint64_t)qword_10170E0D0);
  sub_100485A94(v31, v30, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
  uint64_t v33 = Logger.logObject.getter();
  os_log_type_t v34 = static os_log_type_t.default.getter();
  BOOL v35 = os_log_type_enabled(v33, v34);
  uint64_t v36 = v0[40];
  if (v35)
  {
    uint64_t v37 = (uint8_t *)swift_slowAlloc();
    uint64_t v43 = swift_slowAlloc();
    *(_DWORD *)uint64_t v37 = 136315138;
    uint64_t v38 = sub_1010F567C();
    v0[32] = sub_1008FA0F0(v38, v39, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100485AFC(v36, (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
    _os_log_impl((void *)&_mh_execute_header, v33, v34, "Executing startBTFinding command: %s", v37, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100485AFC(v0[40], (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
  }

  uint64_t v40 = (void *)swift_task_alloc();
  v0[65] = v40;
  *uint64_t v40 = v0;
  v40[1] = sub_10046CD78;
  uint64_t v41 = v0[41];
  return sub_10122C044(v41);
}

uint64_t sub_10046CD78()
{
  *(void *)(*(void *)v1 + 528) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10046D1A0;
  }
  else {
    uint64_t v2 = sub_10046CE8C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10046CE8C()
{
  uint64_t v12 = v0;
  (*(void (**)(void, void, void))(v0 + 456))(*(void *)(v0 + 368), *(void *)(v0 + 288), *(void *)(v0 + 336));
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = *(void *)(v0 + 368);
    uint64_t v4 = *(void *)(v0 + 336);
    uint64_t v10 = *(void *)(v0 + 344);
    uint64_t v5 = swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446723;
    *(void *)(v0 + 232) = sub_1008FA0F0(0xD000000000000024, 0x80000001013FD9B0, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v5 + 12) = 2160;
    *(void *)(v0 + 240) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v5 + 22) = 2081;
    sub_100482848((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v6 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 248) = sub_1008FA0F0(v6, v7, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v3, v4);
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "%{public}s beaconIdentifier: %{private,mask.hash}s completed successfully!", (uint8_t *)v5, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(*(void *)(v0 + 344) + 8))(*(void *)(v0 + 368), *(void *)(v0 + 336));
  }

  (*(void (**)(void))(v0 + 272))(0);
  swift_release();
  swift_release();
  sub_100485AFC(*(void *)(v0 + 328), (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v8 = *(uint64_t (**)(void))(v0 + 8);
  return v8();
}

uint64_t sub_10046D1A0()
{
  uint64_t v17 = v0;
  (*(void (**)(void, void, void))(v0 + 456))(*(void *)(v0 + 360), *(void *)(v0 + 288), *(void *)(v0 + 336));
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = *(void *)(v0 + 360);
    log = v1;
    uint64_t v5 = *(void *)(v0 + 336);
    uint64_t v4 = *(void *)(v0 + 344);
    uint64_t v6 = swift_slowAlloc();
    uint64_t v14 = (void *)swift_slowAlloc();
    uint64_t v16 = swift_slowAlloc();
    *(_DWORD *)uint64_t v6 = 136446979;
    *(void *)(v0 + 200) = sub_1008FA0F0(0xD000000000000024, 0x80000001013FD9B0, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 12) = 2160;
    *(void *)(v0 + 208) = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v6 + 22) = 2081;
    sub_100482848((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v7 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v0 + 216) = sub_1008FA0F0(v7, v8, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    *(_WORD *)(v6 + 32) = 2114;
    swift_errorRetain();
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
    *(void *)(v0 + 224) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v14 = v9;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, v2, "%{public}s beaconIdentifier: %{private,mask.hash}s\nfailed with error: %{public}@!", (uint8_t *)v6, 0x2Au);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(*(void *)(v0 + 344) + 8))(*(void *)(v0 + 360), *(void *)(v0 + 336));
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v10 = *(void *)(v0 + 528);
  uint64_t v11 = *(void (**)(uint64_t))(v0 + 272);
  swift_errorRetain();
  v11(v10);
  swift_release();
  swift_release();
  swift_errorRelease();
  swift_errorRelease();
  sub_100485AFC(*(void *)(v0 + 328), (uint64_t (*)(void))type metadata accessor for AccessoryCommand);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v12 = *(uint64_t (**)(void))(v0 + 8);
  return v12();
}

uint64_t sub_10046D59C()
{
  uint64_t v1 = v0;
  static os_log_type_t.default.getter();
  if (qword_101637278 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_101347BA0;
  uint64_t v3 = UUID.uuidString.getter();
  uint64_t v5 = v4;
  *(void *)(v2 + 56) = &type metadata for String;
  unint64_t v6 = sub_10000B4CC();
  *(void *)(v2 + 64) = v6;
  *(void *)(v2 + 32) = v3;
  *(void *)(v2 + 40) = v5;
  uint64_t v7 = UUID.uuidString.getter();
  *(void *)(v2 + 96) = &type metadata for String;
  *(void *)(v2 + 104) = v6;
  *(void *)(v2 + 72) = v7;
  *(void *)(v2 + 80) = v8;
  os_log(_:dso:log:_:_:)();
  uint64_t result = swift_bridgeObjectRelease();
  if (*(void *)(v1 + 176))
  {
    swift_retain();
    static os_log_type_t.default.getter();
    if (qword_1016372F8 != -1) {
      swift_once();
    }
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_101342130;
    uint64_t v11 = UUID.uuidString.getter();
    *(void *)(v10 + 56) = &type metadata for String;
    *(void *)(v10 + 64) = v6;
    *(void *)(v10 + 32) = v11;
    *(void *)(v10 + 40) = v12;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    uint64_t v13 = type metadata accessor for Transaction();
    __chkstk_darwin(v13);
    static Transaction.named<A>(_:with:)();
    return swift_release();
  }
  return result;
}

uint64_t sub_10046D808(void (*a1)(void, void), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v60 = a3;
  uint64_t v61 = a4;
  uint64_t v59 = a1;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v58 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v56 = (char *)&v50 - v12;
  uint64_t v57 = v13;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v50 - v14;
  if (qword_101637318 != -1) {
    swift_once();
  }
  uint64_t v54 = type metadata accessor for Logger();
  sub_100010324(v54, (uint64_t)qword_10170F080);
  uint64_t v55 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v55(v15, a2, v7);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = swift_slowAlloc();
    uint64_t v53 = a2;
    uint64_t v19 = v18;
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)uint64_t v19 = 141558275;
    uint64_t v62 = 1752392040;
    v63[0] = v20;
    uint64_t v51 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v19 + 12) = 2081;
    uint64_t v52 = v4;
    sub_100482848((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v62 = sub_1008FA0F0(v21, v22, v63);
    uint64_t v8 = v51;
    uint64_t v5 = v52;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v23 = v15;
    uint64_t v24 = v7;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v23, v7);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "#Durian: Client asking to connect to beacon with UUID - %{private,mask.hash}s", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    a2 = v53;
    swift_slowDealloc();
  }
  else
  {
    uint64_t v25 = v15;
    uint64_t v24 = v7;
    (*(void (**)(char *, uint64_t))(v8 + 8))(v25, v7);
  }

  uint64_t My = type metadata accessor for Feature.FindMy();
  v63[3] = My;
  v63[4] = sub_100482848((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
  uint64_t v27 = sub_10001D958(v63);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v27, enum case for Feature.FindMy.spPlaySoundAll(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v63);
  if (My)
  {
    uint64_t v54 = *(void *)(v5 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_soundPlaybackManager);
    uint64_t v28 = v55;
    uint64_t v29 = v56;
    uint64_t v30 = v24;
    v55(v56, a2, v24);
    uint64_t v32 = v58;
    uint64_t v31 = v59;
    v28(v58, (uint64_t)v59, v24);
    uint64_t v33 = *(unsigned __int8 *)(v8 + 80);
    uint64_t v34 = (v33 + 16) & ~v33;
    BOOL v35 = (void (*)(void, void))a2;
    uint64_t v36 = (v57 + v33 + v34) & ~v33;
    unint64_t v37 = (v57 + v36 + 7) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v38 = (void (*)(void *))swift_allocObject();
    unint64_t v39 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    v39((char *)v38 + v34, v29, v30);
    v39((char *)v38 + v36, v32, v30);
    uint64_t v40 = (void *)((char *)v38 + v37);
    uint64_t v41 = v61;
    *uint64_t v40 = v60;
    v40[1] = v41;
    swift_retain();
    sub_1008195DC(v35, v31, (void (*)(void *))sub_100484290, v38);
  }
  else
  {
    if (qword_101636BC8 != -1) {
      swift_once();
    }
    sub_100010324(v54, (uint64_t)qword_10170E0D0);
    uint64_t v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v44 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v44 = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Connecting legacy when spPlaySoundAll is off!", v44, 2u);
      swift_slowDealloc();
    }

    sub_1008BFD88(a2);
    uint64_t v45 = swift_allocObject();
    uint64_t v46 = v60;
    uint64_t v47 = v61;
    *(void *)(v45 + 16) = v60;
    *(void *)(v45 + 24) = v47;
    swift_retain();
    Future.addFailure(block:)();
    swift_release();
    swift_release();
    uint64_t v48 = swift_allocObject();
    *(void *)(v48 + 16) = v46;
    *(void *)(v48 + 24) = v47;
    swift_retain();
    Future.addSuccess(block:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t sub_10046DE50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v42 = a3;
  uint64_t v43 = a4;
  uint64_t v44 = a1;
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v41 = (char *)v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v8);
  unint64_t v39 = (char *)v36 - v10;
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v36 - v11;
  if (qword_101637318 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_100010324(v13, (uint64_t)qword_10170F080);
  uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  v38(v12, a2, v5);
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc();
    uint64_t v37 = a2;
    uint64_t v17 = v16;
    uint64_t v18 = swift_slowAlloc();
    v36[1] = v18;
    *(_DWORD *)uint64_t v17 = 141558275;
    uint64_t v45 = 1752392040;
    uint64_t v46 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v17 + 12) = 2081;
    v36[0] = v17 + 14;
    sub_100482848((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v19 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v45 = sub_1008FA0F0(v19, v20, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v21 = v12;
    uint64_t v22 = v5;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v21, v5);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "#Durian: Client asking to disconnect from beacon with UUID - %{private,mask.hash}s", (uint8_t *)v17, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    a2 = v37;
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v6 + 8))(v12, v5);

    uint64_t v22 = v5;
  }
  uint64_t v23 = v39;
  uint64_t v40 = *(void *)(v40 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_soundPlaybackManager);
  uint64_t v24 = v38;
  v38(v39, a2, v22);
  uint64_t v25 = v41;
  uint64_t v26 = v44;
  v24(v41, v44, v22);
  uint64_t v27 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v28 = (v27 + 16) & ~v27;
  uint64_t v29 = (v7 + v27 + v28) & ~v27;
  uint64_t v30 = a2;
  uint64_t v31 = swift_allocObject();
  uint64_t v32 = *(void (**)(uint64_t, char *, uint64_t))(v6 + 32);
  v32(v31 + v28, v23, v22);
  v32(v31 + v29, v25, v22);
  uint64_t v33 = (void *)(v31 + ((v7 + v29 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v34 = v43;
  *uint64_t v33 = v42;
  v33[1] = v34;
  swift_retain();
  sub_10081A8E0(v30, v26, (uint64_t)sub_100484384, v31);
  return swift_release();
}

uint64_t sub_10046E280(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5, const char *a6, const char *a7)
{
  uint64_t v58 = a6;
  uint64_t v59 = a3;
  uint64_t v60 = a5;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  os_log_type_t v15 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v56 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v56 - v20;
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v56 - v22;
  uint64_t v61 = a4;
  if (a1)
  {
    swift_errorRetain();
    if (qword_101636BC8 != -1) {
      swift_once();
    }
    uint64_t v24 = type metadata accessor for Logger();
    sub_100010324(v24, (uint64_t)qword_10170E0D0);
    uint64_t v25 = v12;
    uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    v26(v18, a2, v11);
    v26(v15, v59, v11);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.error.getter();
    int v29 = v28;
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v30 = swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      uint64_t v59 = v31;
      *(_DWORD *)uint64_t v30 = 141558787;
      uint64_t v62 = 1752392040;
      uint64_t v63 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v30 + 12) = 2081;
      uint64_t v56 = sub_100482848((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      int v57 = v29;
      uint64_t v32 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v62 = sub_1008FA0F0(v32, v33, &v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v34 = *(void (**)(char *, uint64_t))(v25 + 8);
      v34(v18, v11);
      *(_WORD *)(v30 + 22) = 2082;
      uint64_t v62 = a1;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v35 = String.init<A>(describing:)();
      uint64_t v62 = sub_1008FA0F0(v35, v36, &v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      *(_WORD *)(v30 + 32) = 2082;
      uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v62 = sub_1008FA0F0(v37, v38, &v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v34(v15, v11);
      _os_log_impl((void *)&_mh_execute_header, v27, (os_log_type_t)v57, v58, (uint8_t *)v30, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v54 = *(void (**)(char *, uint64_t))(v25 + 8);
      v54(v18, v11);
      swift_errorRelease();
      swift_errorRelease();
      v54(v15, v11);
    }

    swift_errorRetain();
    v61(a1);
    swift_errorRelease();
    return swift_errorRelease();
  }
  else
  {
    uint64_t v58 = a7;
    if (qword_101636BC8 != -1) {
      swift_once();
    }
    uint64_t v39 = type metadata accessor for Logger();
    sub_100010324(v39, (uint64_t)qword_10170E0D0);
    uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    v40(v23, a2, v11);
    v40(v21, v59, v11);
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.default.getter();
    int v43 = v42;
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v44 = swift_slowAlloc();
      int v57 = v43;
      uint64_t v45 = v44;
      uint64_t v46 = swift_slowAlloc();
      uint64_t v59 = v46;
      *(_DWORD *)uint64_t v45 = 141558531;
      uint64_t v62 = 1752392040;
      uint64_t v63 = v46;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v45 + 12) = 2081;
      sub_100482848((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v62 = sub_1008FA0F0(v47, v48, &v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v49 = *(void (**)(char *, uint64_t))(v12 + 8);
      v49(v23, v11);
      *(_WORD *)(v45 + 22) = 2082;
      uint64_t v50 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v62 = sub_1008FA0F0(v50, v51, &v63);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v49(v21, v11);
      uint64_t v52 = v61;
      _os_log_impl((void *)&_mh_execute_header, v41, (os_log_type_t)v57, v58, (uint8_t *)v45, 0x20u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      return ((uint64_t (*)(void))v52)(0);
    }
    else
    {
      uint64_t v55 = *(void (**)(char *, uint64_t))(v12 + 8);
      v55(v23, v11);
      v55(v21, v11);

      return ((uint64_t (*)(void))v61)(0);
    }
  }
}

uint64_t sub_10046E9B0(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  static os_log_type_t.error.getter();
  if (qword_101637278 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_101342130;
  swift_getErrorValue();
  uint64_t v5 = Error.localizedDescription.getter();
  uint64_t v7 = v6;
  *(void *)(v4 + 56) = &type metadata for String;
  *(void *)(v4 + 64) = sub_10000B4CC();
  *(void *)(v4 + 32) = v5;
  *(void *)(v4 + 40) = v7;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  return a2(a1);
}

uint64_t sub_10046EADC(uint64_t a1, uint64_t (*a2)(void))
{
  if (qword_101637278 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  return a2(0);
}

uint64_t sub_10046EB7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10046F5EC(a1, a2, a3, a4, (uint64_t)"Command enable notify when found uuid: %@", 41, (uint64_t)&unk_1015C4228, (uint64_t)&unk_101645818);
}

uint64_t sub_10046EBA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[21] = a7;
  v8[22] = a8;
  v8[19] = a5;
  v8[20] = a6;
  v8[18] = a4;
  uint64_t v9 = type metadata accessor for UUID();
  v8[23] = v9;
  v8[24] = *(void *)(v9 - 8);
  v8[25] = swift_task_alloc();
  return _swift_task_switch(sub_10046EC70, 0, 0);
}

uint64_t sub_10046EC70()
{
  uint64_t v1 = qword_1016375E8;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_101639240 + dword_101639240);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 208) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_10046EDC0;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10046EDC0(uint64_t a1)
{
  *(void *)(*(void *)v1 + 216) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10046EEC0, 0, 0);
}

uint64_t sub_10046EEC0()
{
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (v0[27])
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v2 = (void *)swift_task_alloc();
    v0[28] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10046F0B0;
    uint64_t v4 = v0[21];
    uint64_t v3 = v0[22];
    return sub_1002C6E48(v4, v3);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_101636A50 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100010324(v6, (uint64_t)qword_10170DD90);
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Missing NotifyWhenFoundManager.", v9, 2u);
      swift_slowDealloc();
    }
    uint64_t v10 = (void (*)(void))v0[19];

    sub_10001CEC8();
    swift_allocError();
    *uint64_t v11 = 0xD000000000000016;
    v11[1] = 0x80000001013F9660;
    v10();
    swift_errorRelease();
    swift_task_dealloc();
    uint64_t v12 = (uint64_t (*)(void))v0[1];
    return v12();
  }
}

uint64_t sub_10046F0B0()
{
  *(void *)(*(void *)v1 + 232) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10046F240;
  }
  else {
    uint64_t v2 = sub_10046F1C4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10046F1C4()
{
  (*(void (**)(void))(v0 + 152))(0);
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10046F240()
{
  uint64_t v23 = v0;
  if (qword_101637318 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[24];
  uint64_t v1 = v0[25];
  uint64_t v4 = v0[22];
  uint64_t v3 = v0[23];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170F080);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = v0[24];
  uint64_t v10 = v0[25];
  uint64_t v11 = v0[23];
  if (v8)
  {
    log = v6;
    uint64_t v12 = swift_slowAlloc();
    uint64_t v20 = (void *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 141558531;
    v0[15] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2081;
    sub_100482848((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[16] = sub_1008FA0F0(v13, v14, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
    *(_WORD *)(v12 + 22) = 2114;
    swift_errorRetain();
    uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
    v0[17] = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v20 = v15;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, v7, "Failed to enable notify when found for %{private,mask.hash}s, %{public}@.", (uint8_t *)v12, 0x20u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v9 + 8))(v0[25], v0[23]);
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v16 = v0[29];
  uint64_t v17 = (void (*)(uint64_t))v0[19];
  swift_errorRetain();
  v17(v16);
  swift_release();
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v18 = (uint64_t (*)(void))v0[1];
  return v18();
}

uint64_t sub_10046F5C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10046F5EC(a1, a2, a3, a4, (uint64_t)"Command disable notify when found uuid: %@", 42, (uint64_t)&unk_1015C4250, (uint64_t)&unk_101645828);
}

uint64_t sub_10046F5EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v43 = a4;
  uint64_t v44 = a8;
  uint64_t v40 = a7;
  uint64_t v41 = a3;
  uint64_t v35 = a5;
  uint64_t v36 = a6;
  uint64_t v37 = a1;
  uint64_t v38 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v38 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  uint64_t v11 = __chkstk_darwin(v38);
  uint64_t v39 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v33 - v12;
  uint64_t v14 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_log_type_t.default.getter();
  if (qword_101637278 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v17 = swift_allocObject();
  *(_OWORD *)(v17 + 16) = xmmword_101342130;
  uint64_t v18 = UUID.uuidString.getter();
  uint64_t v20 = v19;
  *(void *)(v17 + 56) = &type metadata for String;
  *(void *)(v17 + 64) = sub_10000B4CC();
  *(void *)(v17 + 32) = v18;
  *(void *)(v17 + 40) = v20;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v21 = type metadata accessor for TaskPriority();
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56);
  uint64_t v34 = v16;
  v22(v16, 1, 1, v21);
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  uint64_t v24 = v38;
  v23(v13, v37, v38);
  uint64_t v25 = v39;
  v23(v39, a2, v24);
  uint64_t v26 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v27 = (v26 + 56) & ~v26;
  uint64_t v28 = (v10 + v26 + v27) & ~v26;
  int v29 = (char *)swift_allocObject();
  *((void *)v29 + 2) = 0;
  *((void *)v29 + 3) = 0;
  uint64_t v30 = v41;
  *((void *)v29 + 4) = v42;
  *((void *)v29 + 5) = v30;
  *((void *)v29 + 6) = v43;
  uint64_t v31 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  v31(&v29[v27], v13, v24);
  v31(&v29[v28], v25, v24);
  swift_retain();
  swift_retain();
  sub_1008F5E44((uint64_t)v34, v44, (uint64_t)v29);
  return swift_release();
}

uint64_t sub_10046F904(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[21] = a7;
  v8[22] = a8;
  v8[19] = a5;
  v8[20] = a6;
  v8[18] = a4;
  uint64_t v9 = type metadata accessor for UUID();
  v8[23] = v9;
  v8[24] = *(void *)(v9 - 8);
  v8[25] = swift_task_alloc();
  return _swift_task_switch(sub_10046F9CC, 0, 0);
}

uint64_t sub_10046F9CC()
{
  uint64_t v1 = qword_1016375E8;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_101639240 + dword_101639240);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 208) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_10046FB1C;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10046FB1C(uint64_t a1)
{
  *(void *)(*(void *)v1 + 216) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10046FC1C, 0, 0);
}

uint64_t sub_10046FC1C()
{
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (v0[27])
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v2 = (void *)swift_task_alloc();
    v0[28] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10046FE0C;
    uint64_t v4 = v0[21];
    uint64_t v3 = v0[22];
    return sub_1002CEEE8(v4, v3);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_101636A50 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100010324(v6, (uint64_t)qword_10170DD90);
    os_log_type_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Missing NotifyWhenFoundManager.", v9, 2u);
      swift_slowDealloc();
    }
    uint64_t v10 = (void (*)(void))v0[19];

    sub_10001CEC8();
    swift_allocError();
    *uint64_t v11 = 0xD000000000000016;
    v11[1] = 0x80000001013F9660;
    v10();
    swift_errorRelease();
    swift_task_dealloc();
    uint64_t v12 = (uint64_t (*)(void))v0[1];
    return v12();
  }
}

uint64_t sub_10046FE0C()
{
  *(void *)(*(void *)v1 + 232) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10046FF20;
  }
  else {
    uint64_t v2 = sub_100485DB0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10046FF20()
{
  uint64_t v23 = v0;
  if (qword_101637318 != -1) {
    swift_once();
  }
  uint64_t v2 = v0[24];
  uint64_t v1 = v0[25];
  uint64_t v4 = v0[22];
  uint64_t v3 = v0[23];
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170F080);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.error.getter();
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = v0[24];
  uint64_t v10 = v0[25];
  uint64_t v11 = v0[23];
  if (v8)
  {
    log = v6;
    uint64_t v12 = swift_slowAlloc();
    uint64_t v20 = (void *)swift_slowAlloc();
    uint64_t v22 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 141558531;
    v0[15] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v12 + 12) = 2081;
    sub_100482848((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter();
    v0[16] = sub_1008FA0F0(v13, v14, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v10, v11);
    *(_WORD *)(v12 + 22) = 2114;
    swift_errorRetain();
    uint64_t v15 = _swift_stdlib_bridgeErrorToNSError();
    v0[17] = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v20 = v15;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, log, v7, "Failed to disable notify when found for %{private,mask.hash}s, %{public}@.", (uint8_t *)v12, 0x20u);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(void, void))(v9 + 8))(v0[25], v0[23]);
    swift_errorRelease();
    swift_errorRelease();
  }
  uint64_t v16 = v0[29];
  uint64_t v17 = (void (*)(uint64_t))v0[19];
  swift_errorRetain();
  v17(v16);
  swift_release();
  swift_errorRelease();
  swift_errorRelease();
  swift_task_dealloc();
  uint64_t v18 = (uint64_t (*)(void))v0[1];
  return v18();
}

uint64_t sub_1004702A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[19] = a8;
  v8[20] = v11;
  v8[17] = a6;
  v8[18] = a7;
  v8[15] = a4;
  v8[16] = a5;
  v8[21] = type metadata accessor for KeySyncMetadata();
  v8[22] = swift_task_alloc();
  return _swift_task_switch(sub_100470344, 0, 0);
}

uint64_t sub_100470344()
{
  uint64_t v1 = qword_1016375E8;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_101639138 + dword_101639138);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 184) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_100470494;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100470494(uint64_t a1)
{
  *(void *)(*(void *)v1 + 192) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100470594, 0, 0);
}

uint64_t sub_100470594()
{
  uint64_t v1 = v0 + 16;
  if (*(void *)(v0 + 192))
  {
    uint64_t v3 = *(int **)(v0 + 168);
    uint64_t v2 = *(void *)(v0 + 176);
    uint64_t v5 = *(void *)(v0 + 136);
    uint64_t v4 = *(void *)(v0 + 144);
    uint64_t v6 = *(void *)(v0 + 128);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v2, v6, v7);
    BOOL v8 = (void *)(v2 + v3[6]);
    v8[3] = &type metadata for PrimaryIndex;
    void v8[4] = sub_1001A1640();
    *BOOL v8 = v5;
    uint64_t v9 = v2 + v3[7];
    uint64_t v10 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v9, v4, v10);
    *(unsigned char *)(v2 + v3[5]) = 1;
    uint64_t v11 = (void *)swift_task_alloc();
    *(void *)(v0 + 200) = v11;
    *uint64_t v11 = v0;
    v11[1] = sub_100470758;
    uint64_t v12 = *(void *)(v0 + 176);
    return sub_101104A5C(v12);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    (*(void (**)(void))(v0 + 152))(0);
    swift_task_dealloc();
    unint64_t v14 = *(uint64_t (**)(void))(v0 + 8);
    return v14();
  }
}

uint64_t sub_100470758()
{
  uint64_t v2 = *v1;
  swift_task_dealloc();
  uint64_t v3 = *(void *)(v2 + 176);
  if (v0)
  {
    swift_errorRelease();
    sub_100485AFC(v3, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
    uint64_t v4 = sub_100485DAC;
  }
  else
  {
    sub_100485AFC(v3, (uint64_t (*)(void))type metadata accessor for KeySyncMetadata);
    uint64_t v4 = sub_1004708C8;
  }
  return _swift_task_switch(v4, 0, 0);
}

uint64_t sub_1004708C8()
{
  swift_release();
  (*(void (**)(void))(v0 + 152))(0);
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100470944(void **a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  uint64_t result = sub_1004CF630(*a2, v7);
  if ((result & 0x100) == 0)
  {
    uint64_t result = sub_100272E58(result, a4);
    if (result)
    {
      sub_1004D1DEC(v6, v7);
      uint64_t v9 = v6;
      uint64_t v11 = v10;
      uint64_t v12 = *a1;
      uint64_t result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        uint64_t result = (uint64_t)sub_100A6EA38(0, v12[2] + 1, 1, v12);
        uint64_t v12 = (void *)result;
      }
      unint64_t v13 = v12[2];
      unint64_t v14 = v12[3];
      unint64_t v15 = v13 + 1;
      if (v13 >= v14 >> 1)
      {
        uint64_t v17 = v12;
        unint64_t v18 = v12[2];
        uint64_t result = (uint64_t)sub_100A6EA38((void *)(v14 > 1), v13 + 1, 1, v17);
        unint64_t v13 = v18;
        uint64_t v12 = (void *)result;
      }
      v12[2] = v15;
      uint64_t v16 = &v12[2 * v13];
      v16[4] = v9;
      v16[5] = v11;
      *a1 = v12;
    }
  }
  return result;
}

uint64_t sub_100470A30(uint64_t a1, unint64_t a2)
{
  type metadata accessor for Transaction();
  swift_allocObject();
  swift_weakInit();
  static Transaction.named<A>(_:with:)();
  swift_release();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (qword_101637250 != -1) {
    swift_once();
  }
  uint64_t v5 = qword_10170EFA8;
  uint64_t result = os_log_type_enabled((os_log_t)qword_10170EFA8, v4);
  if (result)
  {
    swift_bridgeObjectRetain_n();
    unint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)unint64_t v7 = 136315138;
    swift_bridgeObjectRetain();
    sub_1008FA0F0(a1, a2, &v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v5, v4, "requestLiveLocation(forFriend:completion:) friend: %s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    return swift_slowDealloc();
  }
  return result;
}

uint64_t sub_100470C38(uint64_t a1, uint64_t a2)
{
  uint64_t v66 = a2;
  uint64_t v3 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v3 - 8);
  uint64_t v64 = (char *)v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v63 = (char *)v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)v56 - v10;
  __chkstk_darwin(v9);
  unint64_t v13 = (char *)v56 - v12;
  uint64_t v14 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v17 = *(void *)(a1 + 16);
  unint64_t v18 = _swiftEmptyArrayStorage;
  uint64_t v69 = v11;
  uint64_t v65 = v16;
  if (!v17)
  {
    uint64_t v24 = v66;
    uint64_t v25 = _swiftEmptyArrayStorage[2];
    if (v25) {
      goto LABEL_9;
    }
LABEL_25:
    uint64_t v53 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
    swift_bridgeObjectRetain();
    v53(v16, 1, 1, v5);
    goto LABEL_27;
  }
  int64_t v76 = _swiftEmptyArrayStorage;
  sub_1000B7034(0, v17, 0);
  uint64_t v19 = a1 + 32;
  unint64_t v18 = v76;
  do
  {
    sub_10001D010(v19, (uint64_t)v73);
    uint64_t v21 = v74;
    uint64_t v20 = v75;
    sub_10001CD44(v73, v74);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v20 + 8) + 8) + 32))(v21);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v73);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_1000B7034(0, v18[2] + 1, 1);
      unint64_t v18 = v76;
    }
    unint64_t v23 = v18[2];
    unint64_t v22 = v18[3];
    if (v23 >= v22 >> 1)
    {
      sub_1000B7034(v22 > 1, v23 + 1, 1);
      unint64_t v18 = v76;
    }
    v18[2] = v23 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))((unint64_t)v18+ ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))+ *(void *)(v6 + 72) * v23, v13, v5);
    int64_t v76 = v18;
    v19 += 40;
    --v17;
  }
  while (v17);
  uint64_t v16 = v65;
  uint64_t v24 = v66;
  uint64_t v11 = v69;
  uint64_t v25 = v18[2];
  if (!v25) {
    goto LABEL_25;
  }
LABEL_9:
  uint64_t v26 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_beaconUUIDsLocating;
  uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v6 + 16);
  uint64_t v27 = v6 + 16;
  uint64_t v72 = v28;
  int v29 = (char *)v18 + ((*(unsigned __int8 *)(v27 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v27 + 64));
  uint64_t v30 = *(void *)(v27 + 56);
  uint64_t v61 = (unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 32);
  uint64_t v59 = (void (**)(char *, char *, uint64_t))(v27 + 16);
  uint64_t v67 = (void (**)(unint64_t, uint64_t))(v27 - 8);
  uint64_t v68 = v30;
  swift_bridgeObjectRetain();
  uint64_t v62 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 40);
  v56[0] = (v27 + 40) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  *(void *)&long long v31 = 141558275;
  long long v57 = v31;
  v56[1] = (char *)&type metadata for Any + 8;
  uint64_t v60 = v26;
  uint64_t v71 = v27;
  while (1)
  {
    v72(v16, v29, v5);
    uint64_t v58 = *v62;
    v58(v16, 0, 1, v5);
    if ((*v61)(v16, 1, v5) == 1) {
      break;
    }
    uint64_t v70 = v25;
    (*v59)(v11, v16, v5);
    uint64_t v33 = *(void *)(v24 + v26);
    swift_bridgeObjectRetain_n();
    unint64_t v34 = sub_1007240CC((uint64_t)v11);
    char v36 = v35;
    swift_bridgeObjectRelease();
    if (v36)
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v73[0] = v33;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_100E81D34();
        uint64_t v33 = v73[0];
      }
      (*v67)(*(void *)(v33 + 48) + v34 * v68, v5);
      uint64_t v33 = v73[0];
      uint64_t v38 = *(void *)(v73[0] + 56);
      uint64_t v39 = type metadata accessor for Date();
      uint64_t v40 = *(void *)(v39 - 8);
      uint64_t v41 = v38 + *(void *)(v40 + 72) * v34;
      uint64_t v42 = (uint64_t)v64;
      (*(void (**)(char *, uint64_t, uint64_t))(v40 + 32))(v64, v41, v39);
      sub_1001683CC(v34, v33);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v40 + 56))(v42, 0, 1, v39);
      uint64_t v24 = v66;
    }
    else
    {
      uint64_t v43 = type metadata accessor for Date();
      uint64_t v42 = (uint64_t)v64;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56))(v64, 1, 1, v43);
    }
    sub_10001DAB4(v42, (uint64_t *)&unk_10163AC90);
    uint64_t v44 = *(void *)(v24 + v26);
    *(void *)(v24 + v26) = v33;
    swift_bridgeObjectRetain();
    char v45 = sub_100DF72BC(v44, v33);
    swift_bridgeObjectRelease();
    if ((v45 & 1) == 0) {
      sub_100A9E7EC(13);
    }
    swift_bridgeObjectRelease();
    if (qword_101636B10 != -1) {
      swift_once();
    }
    uint64_t v46 = type metadata accessor for Logger();
    sub_100010324(v46, (uint64_t)qword_10170DEB8);
    uint64_t v47 = v63;
    uint64_t v11 = v69;
    v72(v63, v69, v5);
    unint64_t v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v48, v49))
    {
      uint64_t v50 = swift_slowAlloc();
      v73[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v50 = v57;
      *(void *)(v50 + 4) = 1752392040;
      *(_WORD *)(v50 + 12) = 2081;
      sub_100482848((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v51 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v50 + 14) = sub_1008FA0F0(v51, v52, v73);
      swift_bridgeObjectRelease();
      uint64_t v32 = *v67;
      (*v67)((unint64_t)v47, v5);
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "Shared fetch - Removed ACSN locating state for beacon: %{private,mask.hash}s.", (uint8_t *)v50, 0x16u);
      swift_arrayDestroy();
      uint64_t v11 = v69;
      swift_slowDealloc();
      uint64_t v24 = v66;
      swift_slowDealloc();
    }
    else
    {

      uint64_t v32 = *v67;
      (*v67)((unint64_t)v47, v5);
    }
    v32((unint64_t)v11, v5);
    v29 += v68;
    uint64_t v25 = v70 - 1;
    uint64_t v16 = v65;
    uint64_t v26 = v60;
    if (v70 == 1)
    {
      v58(v65, 1, 1, v5);
      break;
    }
  }
LABEL_27:
  swift_bridgeObjectRelease();
  uint64_t v54 = sub_101158244((uint64_t)v18);
  swift_bridgeObjectRelease();
  sub_10047BDB0(v54);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100471464(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v74 = (char *)v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v67 = (char *)v65 - v13;
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v65 - v14;
  uint64_t v16 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v16 - 8);
  unint64_t v18 = (char *)v65 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v76 = a3 + 16;
  int64_t v19 = *(void *)(a2 + 16);
  uint64_t v20 = _swiftEmptyArrayStorage;
  uint64_t v79 = v7;
  uint64_t v75 = v18;
  if (!v19)
  {
    uint64_t v26 = (uint64_t)v67;
    uint64_t v27 = _swiftEmptyArrayStorage[2];
    if (v27) {
      goto LABEL_9;
    }
LABEL_29:
    uint64_t v62 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
    swift_bridgeObjectRetain();
    v62(v18, 1, 1, v8);
    goto LABEL_31;
  }
  v82[0] = (uint64_t)_swiftEmptyArrayStorage;
  sub_1000B7034(0, v19, 0);
  uint64_t v21 = a2 + 32;
  uint64_t v20 = (void *)v82[0];
  do
  {
    sub_10001D010(v21, (uint64_t)v83);
    uint64_t v23 = v84;
    uint64_t v22 = v85;
    sub_10001CD44(v83, v84);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v22 + 8) + 8) + 32))(v23);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v83);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_1000B7034(0, v20[2] + 1, 1);
      uint64_t v20 = (void *)v82[0];
    }
    unint64_t v25 = v20[2];
    unint64_t v24 = v20[3];
    if (v25 >= v24 >> 1)
    {
      sub_1000B7034(v24 > 1, v25 + 1, 1);
      uint64_t v20 = (void *)v82[0];
    }
    void v20[2] = v25 + 1;
    (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))((unint64_t)v20+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(void *)(v9 + 72) * v25, v15, v8);
    v82[0] = (uint64_t)v20;
    v21 += 40;
    --v19;
  }
  while (v19);
  uint64_t v7 = v79;
  uint64_t v26 = (uint64_t)v67;
  unint64_t v18 = v75;
  uint64_t v27 = v20[2];
  if (!v27) {
    goto LABEL_29;
  }
LABEL_9:
  uint64_t v28 = (char *)v20 + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  swift_bridgeObjectRetain();
  swift_beginAccess();
  uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  uint64_t v29 = v9 + 16;
  unint64_t v81 = v30;
  uint64_t v31 = *(void *)(v29 + 56);
  uint64_t v71 = (void (**)(uint64_t, char *, uint64_t))(v29 + 16);
  uint64_t v72 = (unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 32);
  uint64_t v77 = (void (**)(unint64_t, uint64_t))(v29 - 8);
  uint64_t v78 = v31;
  uint64_t v73 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v29 + 40);
  v65[0] = (v29 + 40) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
  *(void *)&long long v32 = 141558275;
  long long v66 = v32;
  v65[1] = (char *)&type metadata for Any + 8;
  uint64_t v68 = v29;
  v30(v18, (uint64_t)v28, v8);
  while (1)
  {
    uint64_t v70 = *v73;
    v70(v18, 0, 1, v8);
    if ((*v72)(v18, 1, v8) == 1) {
      break;
    }
    uint64_t v80 = v28;
    (*v71)(v26, v18, v8);
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      uint64_t v35 = Strong;
      uint64_t v36 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_beaconUUIDsLocating;
      uint64_t v37 = *(void *)(Strong + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_beaconUUIDsLocating);
      swift_bridgeObjectRetain_n();
      unint64_t v38 = sub_1007240CC(v26);
      char v40 = v39;
      swift_bridgeObjectRelease();
      if (v40)
      {
        uint64_t v41 = v27;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v82[0] = v37;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_100E81D34();
          uint64_t v37 = v82[0];
        }
        (*v77)(*(void *)(v37 + 48) + v38 * v78, v8);
        uint64_t v37 = v82[0];
        uint64_t v43 = *(void *)(v82[0] + 56);
        uint64_t v44 = type metadata accessor for Date();
        uint64_t v45 = *(void *)(v44 - 8);
        uint64_t v46 = v43 + *(void *)(v45 + 72) * v38;
        uint64_t v47 = (uint64_t)v79;
        (*(void (**)(char *, uint64_t, uint64_t))(v45 + 32))(v79, v46, v44);
        int64_t v48 = v38;
        uint64_t v49 = v47;
        sub_1001683CC(v48, v37);
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v45 + 56))(v47, 0, 1, v44);
        uint64_t v27 = v41;
      }
      else
      {
        uint64_t v51 = type metadata accessor for Date();
        uint64_t v49 = (uint64_t)v79;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56))(v79, 1, 1, v51);
      }
      sub_10001DAB4(v49, (uint64_t *)&unk_10163AC90);
      uint64_t v52 = *(void *)(v35 + v36);
      *(void *)(v35 + v36) = v37;
      swift_bridgeObjectRetain();
      char v53 = sub_100DF72BC(v52, v37);
      swift_bridgeObjectRelease();
      if ((v53 & 1) == 0) {
        sub_100A9E7EC(13);
      }
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v26 = (uint64_t)v67;
    }
    else
    {
      uint64_t v50 = type metadata accessor for Date();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56))(v7, 1, 1, v50);
      sub_10001DAB4((uint64_t)v7, (uint64_t *)&unk_10163AC90);
    }
    uint64_t v54 = v74;
    if (qword_101636B10 != -1) {
      swift_once();
    }
    uint64_t v55 = type metadata accessor for Logger();
    sub_100010324(v55, (uint64_t)qword_10170DEB8);
    v81(v54, v26, v8);
    uint64_t v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v56, v57))
    {
      uint64_t v58 = swift_slowAlloc();
      uint64_t v69 = v27;
      uint64_t v59 = v58;
      v82[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v59 = v66;
      *(void *)(v59 + 4) = 1752392040;
      *(_WORD *)(v59 + 12) = 2081;
      sub_100482848((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v60 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v59 + 14) = sub_1008FA0F0(v60, v61, v82);
      swift_bridgeObjectRelease();
      uint64_t v33 = *v77;
      uint64_t v27 = v69;
      (*v77)((unint64_t)v54, v8);
      _os_log_impl((void *)&_mh_execute_header, v56, v57, "Local findable fetch - Removed ACSN locating state for beacon: %{private,mask.hash}s.", (uint8_t *)v59, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      uint64_t v33 = *v77;
      (*v77)((unint64_t)v54, v8);
    }
    v33(v26, v8);
    uint64_t v7 = v79;
    unint64_t v18 = v75;
    uint64_t v28 = &v80[v78];
    if (!--v27)
    {
      v70(v75, 1, 1, v8);
      break;
    }
    v81(v75, (uint64_t)v28, v8);
  }
LABEL_31:
  swift_bridgeObjectRelease();
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    uint64_t v63 = sub_101158244((uint64_t)v20);
    swift_bridgeObjectRelease();
    sub_10047BDB0(v63);
    swift_release();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_100471D70(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)(a1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_playbackCoordinatorByBeaconIdentifier);
  swift_beginAccess();
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_1007240CC(a2);
  char v6 = v5;
  swift_bridgeObjectRelease();
  if (v6)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v3;
    uint64_t v12 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_100E822D4();
      uint64_t v8 = v12;
    }
    uint64_t v9 = *(void *)(v8 + 48);
    uint64_t v10 = type metadata accessor for UUID();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9 + *(void *)(*(void *)(v10 - 8) + 72) * v4, v10);
    sub_100168738(v4, v12);
    *uint64_t v3 = v12;
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
  return swift_release();
}

uint64_t sub_100471E9C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void, void), uint64_t a5)
{
  uint64_t v58 = a4;
  uint64_t v59 = a5;
  uint64_t v57 = type metadata accessor for BeaconSharingSessionContext();
  __chkstk_darwin(v57);
  uint64_t v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_101645778);
  uint64_t v52 = *(void *)(v9 - 8);
  uint64_t v53 = v9;
  __chkstk_darwin(v9);
  uint64_t v51 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C(&qword_101645780);
  uint64_t v55 = *(void *)(v11 - 8);
  uint64_t v56 = v11;
  __chkstk_darwin(v11);
  uint64_t v54 = (char *)&v47 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v60 = v13;
  unint64_t v61 = (void (**)(char *, char *, uint64_t))v14;
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000588C((uint64_t *)&unk_101653D50);
  __chkstk_darwin(v17 - 8);
  int64_t v19 = (char *)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v23 = (void (**)(char *, char *, uint64_t))((char *)&v47 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v49 = a1;
    uint64_t v25 = result;
    swift_retain();
    uint64_t v48 = a3;
    sub_100ACEADC(a3, (uint64_t)v19);
    swift_release();
    int v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20);
    uint64_t v50 = v25;
    if (v26 == 1)
    {
      sub_10001DAB4((uint64_t)v19, (uint64_t *)&unk_101653D50);
      uint64_t v27 = (uint64_t)v61;
      if (qword_101636B00 != -1) {
        swift_once();
      }
      uint64_t v28 = type metadata accessor for Logger();
      sub_100010324(v28, (uint64_t)qword_10170DE98);
      uint64_t v29 = v60;
      (*(void (**)(char *, uint64_t, uint64_t))(v27 + 16))(v16, v48, v60);
      uint64_t v30 = Logger.logObject.getter();
      os_log_type_t v31 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v30, v31))
      {
        long long v32 = (uint8_t *)swift_slowAlloc();
        uint64_t v63 = swift_slowAlloc();
        *(_DWORD *)long long v32 = 136315138;
        uint64_t v57 = (uint64_t)(v32 + 4);
        sub_100482848((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v62 = sub_1008FA0F0(v33, v34, &v63);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v27 + 8))(v16, v29);
        _os_log_impl((void *)&_mh_execute_header, v30, v31, "requestLiveLocation could not find SharedBeaconRecord for: %s", v32, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v27 + 8))(v16, v29);
      }

      v58(0, 0);
      return swift_release();
    }
    else
    {
      sub_100485510((uint64_t)v19, (uint64_t)v23, type metadata accessor for SharedBeaconRecord);
      uint64_t result = Transaction.subscriptionCleaner.getter();
      uint64_t v35 = *(void *)(v25 + 40);
      if (v35)
      {
        uint64_t v48 = result;
        v61[2](v8, (char *)v23 + *(int *)(v20 + 20), v60);
        uint64_t result = swift_storeEnumTagMultiPayload();
        uint64_t v36 = *(void *)(v35 + 440);
        unint64_t v61 = v23;
        if (v36)
        {
          swift_retain();
          swift_retain();
          uint64_t v37 = dispatch thunk of AsynchronousCache.value(for:)();
          swift_release();
          uint64_t v63 = v37;
          sub_10000588C(&qword_101645788);
          sub_100062734(&qword_101645790, &qword_101645788);
          uint64_t v38 = Publisher.eraseToAnyPublisher()();
          swift_release();
          sub_100485AFC((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
          swift_release();
          uint64_t v63 = v38;
          sub_10000588C(&qword_101645798);
          char v39 = v51;
          Publisher.map<A>(_:)();
          swift_release();
          sub_10000588C(&qword_1016457A0);
          sub_100062734(&qword_1016457A8, &qword_101645778);
          sub_100062734(&qword_1016457B0, &qword_1016457A0);
          uint64_t v40 = v53;
          uint64_t v41 = v54;
          Publisher.catch<A>(_:)();
          (*(void (**)(char *, uint64_t))(v52 + 8))(v39, v40);
          uint64_t v42 = (void *)swift_allocObject();
          uint64_t v43 = v49;
          uint64_t v44 = v58;
          uint64_t v45 = v59;
          v42[2] = v48;
          void v42[3] = v44;
          v42[4] = v45;
          v42[5] = v43;
          sub_100062734(&qword_1016457B8, &qword_101645780);
          swift_unknownObjectRetain();
          swift_retain();
          swift_retain();
          uint64_t v46 = v56;
          Publisher<>.sink(receiveValue:)();
          swift_release();
          (*(void (**)(char *, uint64_t))(v55 + 8))(v41, v46);
          AnyCancellable.store(in:)();
          swift_unknownObjectRelease();
          swift_release();
          swift_release();
          return sub_100485AFC((uint64_t)v61, type metadata accessor for SharedBeaconRecord);
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_100472710@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *a1;
  *(unsigned char *)(a2 + 8) = 0;
  return swift_retain();
}

void sub_100472724(uint64_t a1, uint64_t a2, NSObject *a3, uint64_t a4, uint64_t a5)
{
  unint64_t v34 = a3;
  uint64_t v9 = sub_10000588C(&qword_1016457C0);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000588C(&qword_1016457C8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v17 = *(void *)a1;
  if ((*(unsigned char *)(a1 + 8) & 1) == 0)
  {
    uint64_t v32 = v14;
    uint64_t v33 = a5;
    uint64_t v35 = *(void *)(v17 + qword_10170DE90);
    sub_100483974(v17, 0);
    swift_retain();
    sub_10000588C(&qword_1016457D0);
    uint64_t v31 = a2;
    sub_10000588C(&qword_1016457D8);
    uint64_t v30 = a4;
    sub_100062734(&qword_1016457E0, &qword_1016457D0);
    Publisher.map<A>(_:)();
    swift_release();
    sub_10000588C(&qword_1016457E8);
    sub_100062734(&qword_1016457F0, &qword_1016457C0);
    sub_100062734(&qword_1016457F8, &qword_1016457E8);
    Publisher.catch<A>(_:)();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    int v26 = (void *)swift_allocObject();
    uint64_t v27 = v30;
    uint64_t v28 = v34;
    _OWORD v26[2] = v31;
    v26[3] = v28;
    unsigned char v26[4] = v27;
    sub_100062734(&qword_101645800, &qword_1016457C8);
    swift_unknownObjectRetain();
    swift_retain();
    Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v16, v13);
    AnyCancellable.store(in:)();
    swift_release();
    unint64_t v24 = v17;
    char v25 = 0;
    goto LABEL_7;
  }
  sub_1001EE1D4(*(void *)a1);
  if (qword_101636B00 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  sub_100010324(v18, (uint64_t)qword_10170DE98);
  sub_1001EE1D4(v17);
  sub_1001EE1D4(v17);
  unint64_t v34 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v34, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v20 = 138543362;
    sub_10015CEB8();
    swift_allocError();
    *uint64_t v22 = v17;
    sub_1001EE1D4(v17);
    uint64_t v23 = _swift_stdlib_bridgeErrorToNSError();
    uint64_t v35 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v21 = v23;
    sub_100483968(v17, 1);
    sub_100483968(v17, 1);
    _os_log_impl((void *)&_mh_execute_header, v34, v19, "ERROR retrieving messagingSession: %{public}@", v20, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    unint64_t v24 = v17;
    char v25 = 1;
LABEL_7:
    sub_100483968(v24, v25);
    return;
  }
  sub_100483968(v17, 1);
  sub_100483968(v17, 1);
  sub_1001EE1E4(v17);
  uint64_t v29 = v34;
}

void sub_100472CAC(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t v5 = sub_10000588C(&qword_101645808);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_1016457D8);
  __chkstk_darwin(v8);
  uint64_t v10 = (void *)((char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001D074(a1, (uint64_t)v10, &qword_1016457D8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    unint64_t v11 = *v10;
    if (qword_101636B00 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100010324(v12, (uint64_t)qword_10170DE98);
    sub_1001EE1D4(v11);
    sub_1001EE1D4(v11);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v16 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 138543362;
      sub_10015CEB8();
      swift_allocError();
      *unint64_t v17 = v11;
      sub_1001EE1D4(v11);
      uint64_t v18 = _swift_stdlib_bridgeErrorToNSError();
      v20[3] = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v16 = v18;
      sub_1001EE1E4(v11);
      sub_1001EE1E4(v11);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "TRACE received error: %{public}@", v15, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_1001EE1E4(v11);
    }
    else
    {
      sub_1001EE1E4(v11);
      sub_1001EE1E4(v11);
      sub_1001EE1E4(v11);
    }
  }
  else
  {
    sub_10001D608((uint64_t)v10, (uint64_t)v7, &qword_101645808);
    uint64_t v19 = sub_100B9C4C4();
    a3(v19);
    swift_bridgeObjectRelease();
    sub_10001DAB4((uint64_t)v7, &qword_101645808);
  }
}

uint64_t sub_100473148(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void (*a5)(void, void), uint64_t a6)
{
  uint64_t v48 = a1;
  uint64_t v10 = type metadata accessor for BeaconSharingSessionContext();
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000588C(&qword_101645778);
  uint64_t v44 = *(void *)(v13 - 8);
  uint64_t v45 = v13;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000588C(&qword_101645780);
  uint64_t v47 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v46 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  uint64_t v49 = result;
  if (result)
  {
    uint64_t v41 = v16;
    uint64_t v42 = a5;
    uint64_t v43 = a6;
    swift_bridgeObjectRetain();
    _s12searchpartyd20MessagingDestinationV6stringACSgSS_tcfC_0();
    if (v21)
    {
      char v22 = v19;
      uint64_t v23 = v20;
      uint64_t v24 = v21;
      uint64_t result = Transaction.subscriptionCleaner.getter();
      uint64_t v40 = result;
      uint64_t v25 = *(void *)(v49 + 40);
      if (v25)
      {
        *uint64_t v12 = v22;
        *((void *)v12 + 1) = v23;
        *((void *)v12 + 2) = v24;
        uint64_t result = swift_storeEnumTagMultiPayload();
        if (*(void *)(v25 + 440))
        {
          swift_retain();
          swift_bridgeObjectRetain();
          swift_retain();
          uint64_t v26 = dispatch thunk of AsynchronousCache.value(for:)();
          swift_release();
          uint64_t v51 = v26;
          sub_10000588C(&qword_101645788);
          sub_100062734(&qword_101645790, &qword_101645788);
          uint64_t v27 = Publisher.eraseToAnyPublisher()();
          swift_release();
          sub_100485AFC((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
          swift_release();
          swift_bridgeObjectRelease();
          uint64_t v51 = v27;
          sub_10000588C(&qword_101645798);
          Publisher.map<A>(_:)();
          swift_release();
          sub_10000588C(&qword_1016457A0);
          sub_100062734(&qword_1016457A8, &qword_101645778);
          sub_100062734(&qword_1016457B0, &qword_1016457A0);
          uint64_t v29 = v45;
          uint64_t v28 = v46;
          Publisher.catch<A>(_:)();
          (*(void (**)(char *, uint64_t))(v44 + 8))(v15, v29);
          uint64_t v30 = (void *)swift_allocObject();
          uint64_t v31 = v42;
          uint64_t v32 = v43;
          v30[2] = v40;
          void v30[3] = v31;
          uint64_t v33 = v48;
          v30[4] = v32;
          v30[5] = v33;
          sub_100062734(&qword_1016457B8, &qword_101645780);
          swift_unknownObjectRetain();
          swift_retain();
          swift_retain();
          uint64_t v34 = v41;
          Publisher<>.sink(receiveValue:)();
          swift_release();
          (*(void (**)(char *, uint64_t))(v47 + 8))(v28, v34);
          AnyCancellable.store(in:)();
          swift_release();
          swift_unknownObjectRelease();
          return swift_release();
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      return result;
    }
    if (qword_101636B00 != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    sub_100010324(v35, (uint64_t)qword_10170DE98);
    swift_bridgeObjectRetain_n();
    uint64_t v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      uint64_t v51 = swift_slowAlloc();
      *(_DWORD *)uint64_t v38 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v50 = sub_1008FA0F0(a3, a4, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "requestLiveLocation could not create MessagingDestination for: %s", v38, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    v42(0, 0);
    return swift_release();
  }
  return result;
}

uint64_t sub_100473794(unint64_t *a1)
{
  return Just.init(_:)();
}

unint64_t sub_1004737EC(uint64_t a1, uint64_t a2, void (*a3)(void, void), uint64_t a4, uint64_t a5)
{
  uint64_t v33 = a2;
  uint64_t v34 = a3;
  uint64_t v8 = sub_10000588C(&qword_1016457C0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000588C(&qword_1016457C8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v16 = *(void *)a1;
  int v17 = *(unsigned __int8 *)(a1 + 8);
  if (v17)
  {
    sub_1001EE1D4(*(void *)a1);
    if (qword_101636B00 != -1) {
      swift_once();
    }
    uint64_t v18 = type metadata accessor for Logger();
    sub_100010324(v18, (uint64_t)qword_10170DE98);
    sub_1001EE1D4(v16);
    sub_1001EE1D4(v16);
    char v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      char v22 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 138543362;
      sub_10015CEB8();
      swift_allocError();
      *uint64_t v23 = v16;
      sub_1001EE1D4(v16);
      uint64_t v24 = _swift_stdlib_bridgeErrorToNSError();
      uint64_t v35 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *char v22 = v24;
      sub_100483968(v16, 1);
      sub_100483968(v16, 1);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "ERROR retrieving messagingSession: %{public}@", v21, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100483968(v16, 1);
      sub_100483968(v16, 1);
    }

    v34(0, 0);
  }
  else
  {
    uint64_t v29 = a4;
    uint64_t v35 = *(void *)(v16 + qword_10170DE90);
    uint64_t v31 = v13;
    sub_100483974(v16, 0);
    swift_retain();
    sub_10000588C(&qword_1016457D0);
    uint64_t v30 = a5;
    sub_10000588C(&qword_1016457D8);
    int v32 = v17;
    sub_100062734(&qword_1016457E0, &qword_1016457D0);
    Publisher.map<A>(_:)();
    swift_release();
    sub_10000588C(&qword_1016457E8);
    sub_100062734(&qword_1016457F0, &qword_1016457C0);
    sub_100062734(&qword_1016457F8, &qword_1016457E8);
    LOBYTE(v17) = v32;
    Publisher.catch<A>(_:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    uint64_t v25 = (void *)swift_allocObject();
    uint64_t v26 = v34;
    v25[2] = v33;
    v25[3] = v26;
    v25[4] = v29;
    sub_100062734(&qword_101645800, &qword_1016457C8);
    swift_unknownObjectRetain();
    swift_retain();
    Publisher<>.sink(receiveValue:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v15, v12);
    AnyCancellable.store(in:)();
    swift_release();
  }
  return sub_100483968(v16, v17);
}

uint64_t sub_100473D54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_10001D074(a1, a2, &qword_101645808);
  sub_10000588C(&qword_1016457D8);

  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_100473DAC(unint64_t *a1)
{
  uint64_t v2 = sub_10000588C(&qword_1016457D8);
  __chkstk_darwin(v2);
  unint64_t v4 = *a1;
  *(uint64_t *)((char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0)) = v4;
  swift_storeEnumTagMultiPayload();
  sub_1001EE1D4(v4);
  return Just.init(_:)();
}

unint64_t sub_100473E5C(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v5 = sub_10000588C(&qword_101645808);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_1016457D8);
  __chkstk_darwin(v8);
  uint64_t v10 = (void *)((char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001D074(a1, (uint64_t)v10, &qword_1016457D8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    unint64_t v11 = *v10;
    if (qword_101636B00 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100010324(v12, (uint64_t)qword_10170DE98);
    sub_1001EE1D4(v11);
    sub_1001EE1D4(v11);
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      unint64_t v16 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 138543362;
      sub_10015CEB8();
      swift_allocError();
      *int v17 = v11;
      sub_1001EE1D4(v11);
      uint64_t v18 = _swift_stdlib_bridgeErrorToNSError();
      v21[3] = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *unint64_t v16 = v18;
      sub_1001EE1E4(v11);
      sub_1001EE1E4(v11);
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "readMessagePublisher error: %{public}@", v15, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1001EE1E4(v11);
      sub_1001EE1E4(v11);
    }

    ((void (*)(void, void))a3)(0, 0);
    return sub_1001EE1E4(v11);
  }
  else
  {
    sub_10001D608((uint64_t)v10, (uint64_t)v7, &qword_101645808);
    uint64_t v19 = sub_100B9C4C4();
    a3(v19);
    swift_bridgeObjectRelease();
    return sub_10001DAB4((uint64_t)v7, &qword_101645808);
  }
}

uint64_t sub_100474318(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 120) = a4;
  return _swift_task_switch(sub_100474338, 0, 0);
}

uint64_t sub_100474338()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_1016391E0 + dword_1016391E0);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 128) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100474474;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_100474474(uint64_t a1)
{
  *(void *)(*(void *)v1 + 136) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_100474574, 0, 0);
}

uint64_t sub_100474574()
{
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (v0[17])
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v2 = (void *)swift_task_alloc();
    v0[18] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10047464C;
    uint64_t v3 = v0[15];
    return sub_1009A0330(v3);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
}

uint64_t sub_10047464C()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100474748, 0, 0);
}

uint64_t sub_100474748()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

Swift::Int sub_1004747A8(void **a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for BeaconEstimatedLocation() - 8);
  uint64_t v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v3 = (void *)sub_100B73624(v3);
  }
  uint64_t v4 = v3[2];
  v6[0] = (char *)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  Swift::Int result = sub_1004753AC(v6);
  *a1 = v3;
  return result;
}

uint64_t sub_100474850()
{
  if ((*(unsigned char *)(v0 + 8) & 1) != 0 || (v1 = *(void *)(v0 + 16), uint64_t v4 = v1, *(void *)(v1 + 16) != 1))
  {
    char v2 = 0;
  }
  else
  {
    swift_bridgeObjectRetain();
    sub_10048307C((uint64_t)&v4);
    sub_1000751A0(v0);
    if (*(unsigned char *)(v1 + 32) && *(unsigned char *)(v1 + 32) == 1) {
      char v2 = 1;
    }
    else {
      char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
    }
    swift_bridgeObjectRelease();
    sub_10025C634((uint64_t)&v4);
    sub_10025C634((uint64_t)&v4);
    sub_1004830A8(v0);
  }
  return v2 & 1;
}

uint64_t sub_10047495C()
{
  _StringGuts.grow(_:)(55);
  v1._object = (void *)0x80000001013FD1C0;
  v1._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v1);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._object = (void *)0xEC000000203A6B73;
  v3._countAndFlagsBits = 0x69446D6F7266202CLL;
  String.append(_:)(v3);
  if (*(unsigned char *)(v0 + 8)) {
    uint64_t v4 = 1702195828;
  }
  else {
    uint64_t v4 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + 8)) {
    unint64_t v5 = 0xE400000000000000;
  }
  else {
    unint64_t v5 = 0xE500000000000000;
  }
  unint64_t v6 = v5;
  String.append(_:)(*(Swift::String *)&v4);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 0x6E6575716573202CLL;
  v7._object = (void *)0xED0000203A736563;
  String.append(_:)(v7);
  swift_bridgeObjectRetain();
  v8._countAndFlagsBits = Array.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 8236;
  v9._object = (void *)0xE200000000000000;
  String.append(_:)(v9);
  _StringGuts.grow(_:)(71);
  v10._countAndFlagsBits = 0x6974737561687865;
  v10._object = (void *)0xEC000000203A6576;
  String.append(_:)(v10);
  char v11 = sub_100474850();
  BOOL v12 = (v11 & 1) == 0;
  if (v11) {
    uint64_t v13 = 1702195828;
  }
  else {
    uint64_t v13 = 0x65736C6166;
  }
  if (v12) {
    unint64_t v14 = 0xE500000000000000;
  }
  else {
    unint64_t v14 = 0xE400000000000000;
  }
  unint64_t v15 = v14;
  String.append(_:)(*(Swift::String *)&v13);
  swift_bridgeObjectRelease();
  v16._object = (void *)0x80000001013FD1E0;
  v16._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v16);
  v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 0xD00000000000001FLL;
  v18._object = (void *)0x80000001013FD200;
  String.append(_:)(v18);
  if (*(unsigned char *)(v0 + 56)) {
    uint64_t v19 = 1702195828;
  }
  else {
    uint64_t v19 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + 56)) {
    unint64_t v20 = 0xE400000000000000;
  }
  else {
    unint64_t v20 = 0xE500000000000000;
  }
  unint64_t v21 = v20;
  String.append(_:)(*(Swift::String *)&v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  v22._countAndFlagsBits = 0;
  v22._object = (void *)0xE000000000000000;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

void sub_100474C70(void *a1, uint64_t a2)
{
  uint64_t v3 = sub_100FD0F00(a1);
  if (v3)
  {
    __chkstk_darwin(v3);
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    swift_release();
  }
  else
  {
    if (qword_101636CF0 != -1) {
      swift_once();
    }
    uint64_t v4 = type metadata accessor for Logger();
    sub_100010324(v4, (uint64_t)qword_10170E3B0);
    sub_10048250C(a2);
    sub_10048250C(a2);
    Swift::String v10 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v5))
    {
      uint64_t v6 = swift_slowAlloc();
      uint64_t v7 = swift_slowAlloc();
      *(_DWORD *)uint64_t v6 = 141558275;
      uint64_t v11 = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v6 + 12) = 2081;
      if (*(void *)(a2 + 48))
      {
        uint64_t v8 = *(void *)(a2 + 40);
        unint64_t v9 = *(void *)(a2 + 48);
      }
      else
      {
        unint64_t v9 = 0xE700000000000000;
        uint64_t v8 = 0x6E776F6E6B6E75;
      }
      swift_bridgeObjectRetain();
      sub_1008FA0F0(v8, v9, &v11);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10048257C(a2);
      sub_10048257C(a2);
      _os_log_impl((void *)&_mh_execute_header, v10, v5, "Failed to store wrapped connection for context %{private,mask.hash}s.", (uint8_t *)v6, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10048257C(a2);
      sub_10048257C(a2);
    }
  }
}

void sub_100474F10(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  int v26 = *a3;
  uint64_t v6 = *((void *)a3 + 5);
  uint64_t v30 = *((void *)a3 + 6);
  uint64_t v31 = v6;
  unsigned __int8 v7 = a3[56];
  LOBYTE(v6) = a3[57];
  long long v29 = *((_OWORD *)a3 + 4);
  uint64_t v28 = *((void *)a3 + 10);
  int v27 = a3[88];
  int v25 = v7 & 1;
  char v8 = v6 & 1;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  BOOL v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v24 = *(_OWORD *)(a3 + 8);
  long long v23 = *(_OWORD *)(a3 + 24);
  XPCSession.identifier.getter();
  swift_beginAccess();
  swift_retain();
  sub_10048250C((uint64_t)a3);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v44 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = 0x8000000000000000;
  uint64_t v32 = a2;
  char v33 = v26;
  long long v34 = v24;
  long long v35 = v23;
  uint64_t v36 = v31;
  uint64_t v37 = v30;
  char v38 = v25;
  char v39 = v8;
  long long v40 = v29;
  uint64_t v41 = v28;
  char v42 = v27 & 1;
  sub_10016E1E8((uint64_t)&v32, (uint64_t)v12, isUniquelyReferenced_nonNull_native);
  *(void *)(a1 + 80) = v44;
  swift_bridgeObjectRelease();
  unint64_t v14 = *(void (**)(char *, uint64_t))(v10 + 8);
  uint64_t v31 = v10 + 8;
  v14(v12, v9);
  swift_endAccess();
  if (qword_101636CF0 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_100010324(v15, (uint64_t)qword_10170E3B0);
  swift_retain_n();
  Swift::String v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = swift_slowAlloc();
    *(void *)&long long v29 = v14;
    uint64_t v19 = v18;
    uint64_t v30 = swift_slowAlloc();
    v43[0] = v30;
    *(_DWORD *)uint64_t v19 = 141558275;
    uint64_t v44 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v19 + 12) = 2081;
    uint64_t v28 = v19 + 14;
    XPCSession.identifier.getter();
    sub_100482848((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v22 = v21;
    ((void (*)(char *, uint64_t))v29)(v12, v9);
    uint64_t v44 = sub_1008FA0F0(v20, v22, v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Added new location fetch subscription %{private,mask.hash}s.", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
}

uint64_t sub_100475354@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
  *a2 = result;
  a2[1] = v6;
  return result;
}

Swift::Int sub_1004753AC(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v141 = type metadata accessor for BeaconEstimatedLocation();
  uint64_t v134 = *(void *)(v141 - 8);
  uint64_t v4 = __chkstk_darwin(v141);
  uint64_t v131 = (uint64_t)&v125 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v142 = (uint64_t)&v125 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v138 = (uint64_t)&v125 - v9;
  __chkstk_darwin(v8);
  uint64_t v137 = (uint64_t)&v125 - v10;
  Swift::Int v11 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v11);
  if (result >= v11)
  {
    if (v11 < 0) {
      goto LABEL_142;
    }
    if (v11) {
      return sub_100475E88(0, v11, 1, a1);
    }
    return result;
  }
  if (v11 >= 0) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v11 + 1;
  }
  if (v11 < -1) {
    goto LABEL_150;
  }
  Swift::Int v127 = result;
  if (v11 < 2)
  {
    os_log_type_t v17 = _swiftEmptyArrayStorage;
    unint64_t v133 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v134 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v134 + 80));
    if (v11 != 1)
    {
      unint64_t v20 = _swiftEmptyArrayStorage[2];
      uint64_t v19 = (char *)_swiftEmptyArrayStorage;
LABEL_107:
      os_log_t v126 = v17;
      if (v20 >= 2)
      {
        Swift::Int v117 = *a1;
        do
        {
          unint64_t v118 = v20 - 2;
          if (v20 < 2) {
            goto LABEL_137;
          }
          if (!v117) {
            goto LABEL_149;
          }
          os_log_t v119 = v19;
          uint64_t v120 = v19 + 32;
          uint64_t v121 = *(void *)&v19[16 * v118 + 32];
          uint64_t v122 = *(void *)&v19[16 * v20 + 24];
          sub_10047614C(v117 + *(void *)(v134 + 72) * v121, v117 + *(void *)(v134 + 72) * *(void *)&v120[16 * v20 - 16], v117 + *(void *)(v134 + 72) * v122, v133);
          if (v2) {
            break;
          }
          if (v122 < v121) {
            goto LABEL_138;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            os_log_t v119 = sub_100B73584((uint64_t)v119);
          }
          if (v118 >= *((void *)v119 + 2)) {
            goto LABEL_139;
          }
          uint64_t v123 = &v119[16 * v118 + 32];
          *(void *)uint64_t v123 = v121;
          *((void *)v123 + 1) = v122;
          unint64_t v124 = *((void *)v119 + 2);
          if (v20 > v124) {
            goto LABEL_140;
          }
          uint64_t v19 = v119;
          memmove(&v119[16 * v20 + 16], &v119[16 * v20 + 32], 16 * (v124 - v20));
          *((void *)v119 + 2) = v124 - 1;
          unint64_t v20 = v124 - 1;
        }
        while (v124 > 2);
      }
LABEL_118:
      swift_bridgeObjectRelease();
      v126[2] = 0;
      return swift_bridgeObjectRelease();
    }
    os_log_t v126 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v14 = v13 >> 1;
    uint64_t v15 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v15 + 16) = v14;
    uint64_t v16 = *(unsigned __int8 *)(v134 + 80);
    os_log_t v126 = (void *)v15;
    unint64_t v133 = v15 + ((v16 + 32) & ~v16);
  }
  Swift::Int v18 = 0;
  uint64_t v19 = (char *)_swiftEmptyArrayStorage;
  uint64_t v140 = a1;
  while (1)
  {
    Swift::Int v21 = v18;
    Swift::Int v22 = v18 + 1;
    Swift::Int v132 = v18;
    if (v18 + 1 >= v11)
    {
      Swift::Int v39 = v18 + 1;
      goto LABEL_59;
    }
    uint64_t v129 = v2;
    Swift::Int v23 = *(void *)(v134 + 72);
    uint64_t v24 = *a1 + v23 * v22;
    Swift::Int v136 = *a1;
    Swift::Int v25 = v136;
    uint64_t v26 = v137;
    sub_100485A94(v24, v137, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    uint64_t v27 = v25 + v23 * v21;
    uint64_t v28 = v138;
    sub_100485A94(v27, v138, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    LODWORD(v139) = static Date.< infix(_:_:)();
    sub_100485AFC(v28, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    uint64_t v29 = v26;
    Swift::Int v30 = v136;
    sub_100485AFC(v29, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
    Swift::Int v143 = v23;
    if (v21 + 2 >= v11)
    {
      Swift::Int v33 = v21 + 2;
    }
    else
    {
      Swift::Int v31 = v23;
      unint64_t v128 = v19;
      uint64_t v32 = v23 * v22;
      Swift::Int v33 = v21 + 2;
      uint64_t v34 = v31 * (v21 + 2);
      while (1)
      {
        Swift::Int v35 = v11;
        uint64_t v36 = v137;
        sub_100485A94(v30 + v34, v137, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
        uint64_t v37 = v138;
        sub_100485A94(v30 + v32, v138, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
        int v38 = static Date.< infix(_:_:)();
        sub_100485AFC(v37, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
        sub_100485AFC(v36, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
        if ((v139 ^ v38)) {
          break;
        }
        v30 += v143;
        ++v33;
        Swift::Int v11 = v35;
        if (v35 == v33)
        {
          Swift::Int v33 = v35;
          uint64_t v19 = v128;
          Swift::Int v21 = v132;
          goto LABEL_25;
        }
      }
      uint64_t v19 = v128;
      Swift::Int v21 = v132;
      Swift::Int v11 = v35;
    }
LABEL_25:
    a1 = v140;
    if ((v139 & 1) == 0)
    {
      Swift::Int v39 = v33;
      goto LABEL_39;
    }
    if (v33 < v21) {
      goto LABEL_143;
    }
    Swift::Int v39 = v33;
    if (v21 < v33) {
      break;
    }
LABEL_39:
    uint64_t v2 = v129;
    if (v39 < v11) {
      goto LABEL_42;
    }
LABEL_59:
    if (v39 < v21) {
      goto LABEL_136;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    Swift::Int v139 = v39;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      uint64_t v19 = sub_100B729CC(0, *((void *)v19 + 2) + 1, 1, v19);
    }
    unint64_t v66 = *((void *)v19 + 2);
    unint64_t v65 = *((void *)v19 + 3);
    unint64_t v20 = v66 + 1;
    if (v66 >= v65 >> 1) {
      uint64_t v19 = sub_100B729CC((char *)(v65 > 1), v66 + 1, 1, v19);
    }
    *((void *)v19 + 2) = v20;
    uint64_t v67 = v19 + 32;
    uint64_t v68 = &v19[16 * v66 + 32];
    Swift::Int v69 = v139;
    *(void *)uint64_t v68 = v21;
    *((void *)v68 + 1) = v69;
    if (v66)
    {
      while (1)
      {
        unint64_t v70 = v20 - 1;
        if (v20 >= 4)
        {
          uint64_t v75 = &v67[16 * v20];
          uint64_t v76 = *((void *)v75 - 8);
          uint64_t v77 = *((void *)v75 - 7);
          BOOL v81 = __OFSUB__(v77, v76);
          uint64_t v78 = v77 - v76;
          if (v81) {
            goto LABEL_125;
          }
          uint64_t v80 = *((void *)v75 - 6);
          uint64_t v79 = *((void *)v75 - 5);
          BOOL v81 = __OFSUB__(v79, v80);
          uint64_t v73 = v79 - v80;
          char v74 = v81;
          if (v81) {
            goto LABEL_126;
          }
          unint64_t v82 = v20 - 2;
          long long v83 = &v67[16 * v20 - 32];
          uint64_t v85 = *(void *)v83;
          uint64_t v84 = *((void *)v83 + 1);
          BOOL v81 = __OFSUB__(v84, v85);
          uint64_t v86 = v84 - v85;
          if (v81) {
            goto LABEL_128;
          }
          BOOL v81 = __OFADD__(v73, v86);
          uint64_t v87 = v73 + v86;
          if (v81) {
            goto LABEL_131;
          }
          if (v87 >= v78)
          {
            uint64_t v105 = &v67[16 * v70];
            uint64_t v107 = *(void *)v105;
            uint64_t v106 = *((void *)v105 + 1);
            BOOL v81 = __OFSUB__(v106, v107);
            uint64_t v108 = v106 - v107;
            if (v81) {
              goto LABEL_135;
            }
            BOOL v98 = v73 < v108;
            goto LABEL_96;
          }
        }
        else
        {
          if (v20 != 3)
          {
            uint64_t v99 = *((void *)v19 + 4);
            uint64_t v100 = *((void *)v19 + 5);
            BOOL v81 = __OFSUB__(v100, v99);
            uint64_t v92 = v100 - v99;
            char v93 = v81;
            goto LABEL_90;
          }
          uint64_t v72 = *((void *)v19 + 4);
          uint64_t v71 = *((void *)v19 + 5);
          BOOL v81 = __OFSUB__(v71, v72);
          uint64_t v73 = v71 - v72;
          char v74 = v81;
        }
        if (v74) {
          goto LABEL_127;
        }
        unint64_t v82 = v20 - 2;
        uint64_t v88 = &v67[16 * v20 - 32];
        uint64_t v90 = *(void *)v88;
        uint64_t v89 = *((void *)v88 + 1);
        BOOL v91 = __OFSUB__(v89, v90);
        uint64_t v92 = v89 - v90;
        char v93 = v91;
        if (v91) {
          goto LABEL_130;
        }
        unint64_t v94 = &v67[16 * v70];
        uint64_t v96 = *(void *)v94;
        uint64_t v95 = *((void *)v94 + 1);
        BOOL v81 = __OFSUB__(v95, v96);
        uint64_t v97 = v95 - v96;
        if (v81) {
          goto LABEL_133;
        }
        if (__OFADD__(v92, v97)) {
          goto LABEL_134;
        }
        if (v92 + v97 >= v73)
        {
          BOOL v98 = v73 < v97;
LABEL_96:
          if (v98) {
            unint64_t v70 = v82;
          }
          goto LABEL_98;
        }
LABEL_90:
        if (v93) {
          goto LABEL_129;
        }
        id v101 = &v67[16 * v70];
        uint64_t v103 = *(void *)v101;
        uint64_t v102 = *((void *)v101 + 1);
        BOOL v81 = __OFSUB__(v102, v103);
        uint64_t v104 = v102 - v103;
        if (v81) {
          goto LABEL_132;
        }
        if (v104 < v92) {
          goto LABEL_15;
        }
LABEL_98:
        unint64_t v109 = v70 - 1;
        if (v70 - 1 >= v20)
        {
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
          goto LABEL_145;
        }
        Swift::Int v110 = *a1;
        if (!*a1) {
          goto LABEL_147;
        }
        uint64_t v111 = v19;
        uint64_t v112 = &v67[16 * v109];
        uint64_t v113 = *(void *)v112;
        unint64_t v114 = &v67[16 * v70];
        uint64_t v115 = *((void *)v114 + 1);
        sub_10047614C(v110 + *(void *)(v134 + 72) * *(void *)v112, v110 + *(void *)(v134 + 72) * *(void *)v114, v110 + *(void *)(v134 + 72) * v115, v133);
        if (v2) {
          goto LABEL_118;
        }
        if (v115 < v113) {
          goto LABEL_122;
        }
        if (v70 > *((void *)v111 + 2)) {
          goto LABEL_123;
        }
        *(void *)uint64_t v112 = v113;
        *(void *)&v67[16 * v109 + 8] = v115;
        unint64_t v116 = *((void *)v111 + 2);
        if (v70 >= v116) {
          goto LABEL_124;
        }
        uint64_t v19 = v111;
        unint64_t v20 = v116 - 1;
        memmove(&v67[16 * v70], v114 + 16, 16 * (v116 - 1 - v70));
        *((void *)v111 + 2) = v116 - 1;
        a1 = v140;
        if (v116 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v20 = 1;
LABEL_15:
    Swift::Int v11 = a1[1];
    Swift::Int v18 = v139;
    if (v139 >= v11)
    {
      os_log_type_t v17 = v126;
      goto LABEL_107;
    }
  }
  Swift::Int v139 = v11;
  unint64_t v128 = v19;
  uint64_t v40 = 0;
  Swift::Int v41 = v143;
  uint64_t v42 = v143 * (v33 - 1);
  Swift::Int v43 = v33 * v143;
  Swift::Int v44 = v21;
  uint64_t v45 = v21 * v143;
  do
  {
    if (v44 != v39 + v40 - 1)
    {
      Swift::Int v46 = v136;
      if (!v136) {
        goto LABEL_148;
      }
      unint64_t v47 = v136 + v45;
      uint64_t v48 = v136 + v42;
      sub_100485510(v136 + v45, v131, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      if (v45 < v42 || v47 >= v46 + v43)
      {
        swift_arrayInitWithTakeFrontToBack();
        Swift::Int v41 = v143;
      }
      else
      {
        Swift::Int v41 = v143;
        if (v45 != v42) {
          swift_arrayInitWithTakeBackToFront();
        }
      }
      sub_100485510(v131, v48, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      a1 = v140;
      Swift::Int v39 = v33;
    }
    ++v44;
    --v40;
    v42 -= v41;
    v43 -= v41;
    v45 += v41;
  }
  while (v44 < v39 + v40);
  uint64_t v19 = v128;
  uint64_t v2 = v129;
  Swift::Int v21 = v132;
  Swift::Int v11 = v139;
  if (v39 >= v139) {
    goto LABEL_59;
  }
LABEL_42:
  if (__OFSUB__(v39, v21)) {
    goto LABEL_141;
  }
  if (v39 - v21 >= v127) {
    goto LABEL_59;
  }
  if (__OFADD__(v21, v127)) {
    goto LABEL_144;
  }
  if (v21 + v127 >= v11) {
    Swift::Int v49 = v11;
  }
  else {
    Swift::Int v49 = v21 + v127;
  }
  if (v49 >= v21)
  {
    if (v39 != v49)
    {
      unint64_t v128 = v19;
      uint64_t v129 = v2;
      uint64_t v50 = *(void *)(v134 + 72);
      uint64_t v51 = v50 * (v39 - 1);
      uint64_t v135 = v50;
      Swift::Int v52 = v39 * v50;
      Swift::Int v130 = v49;
      do
      {
        uint64_t v54 = 0;
        Swift::Int v139 = v39;
        Swift::Int v136 = v52;
        while (1)
        {
          Swift::Int v143 = v21;
          Swift::Int v55 = *a1;
          uint64_t v56 = v137;
          sub_100485A94(v52 + v54 + *a1, v137, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
          uint64_t v57 = v51;
          uint64_t v58 = v51 + v54 + v55;
          uint64_t v59 = a1;
          uint64_t v60 = v138;
          sub_100485A94(v58, v138, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
          char v61 = static Date.< infix(_:_:)();
          sub_100485AFC(v60, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
          sub_100485AFC(v56, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
          if ((v61 & 1) == 0) {
            break;
          }
          uint64_t v62 = *v59;
          if (!*v59) {
            goto LABEL_146;
          }
          Swift::Int v52 = v136;
          uint64_t v51 = v57;
          uint64_t v63 = v62 + v57 + v54;
          sub_100485510(v62 + v136 + v54, v142, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
          swift_arrayInitWithTakeFrontToBack();
          sub_100485510(v142, v63, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
          v54 -= v135;
          Swift::Int v21 = v143 + 1;
          Swift::Int v53 = v139;
          a1 = v140;
          if (v139 == v143 + 1) {
            goto LABEL_52;
          }
        }
        Swift::Int v53 = v139;
        a1 = v59;
        uint64_t v51 = v57;
        Swift::Int v52 = v136;
LABEL_52:
        Swift::Int v39 = v53 + 1;
        v51 += v135;
        v52 += v135;
        Swift::Int v21 = v132;
      }
      while (v39 != v130);
      Swift::Int v39 = v130;
      uint64_t v19 = v128;
      uint64_t v2 = v129;
    }
    goto LABEL_59;
  }
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100475E88(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v26 = a1;
  uint64_t v29 = type metadata accessor for BeaconEstimatedLocation();
  uint64_t v7 = __chkstk_darwin(v29);
  uint64_t v30 = (uint64_t)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  Swift::Int v11 = (char *)&v24 - v10;
  uint64_t result = __chkstk_darwin(v9);
  uint64_t v15 = (char *)&v24 - v14;
  uint64_t v28 = a3;
  uint64_t v25 = a2;
  if (a3 != a2)
  {
    uint64_t v16 = *(void *)(v13 + 72);
    uint64_t v32 = v16 * (v28 - 1);
    uint64_t v27 = v16;
    uint64_t v31 = v16 * v28;
LABEL_5:
    uint64_t v17 = 0;
    uint64_t v18 = v26;
    while (1)
    {
      uint64_t v19 = a4;
      uint64_t v20 = *a4;
      sub_100485A94(v31 + v17 + v20, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      sub_100485A94(v32 + v17 + v20, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      char v21 = static Date.< infix(_:_:)();
      sub_100485AFC((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      a4 = v19;
      uint64_t result = sub_100485AFC((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      if ((v21 & 1) == 0)
      {
LABEL_4:
        v32 += v27;
        v31 += v27;
        if (++v28 == v25) {
          return result;
        }
        goto LABEL_5;
      }
      uint64_t v22 = *v19;
      if (!*v19) {
        break;
      }
      uint64_t v23 = v22 + v32 + v17;
      sub_100485510(v22 + v31 + v17, v30, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      swift_arrayInitWithTakeFrontToBack();
      uint64_t result = sub_100485510(v30, v23, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
      v17 -= v27;
      ++v18;
      a4 = v19;
      if (v28 == v18) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_10047614C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v44 = type metadata accessor for BeaconEstimatedLocation();
  uint64_t v8 = __chkstk_darwin(v44);
  uint64_t v43 = (uint64_t)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  Swift::Int v11 = (char *)&v40 - v10;
  uint64_t v13 = *(void *)(v12 + 72);
  if (!v13)
  {
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  if (a2 - a1 == 0x8000000000000000 && v13 == -1) {
    goto LABEL_61;
  }
  int64_t v14 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v13 == -1) {
    goto LABEL_62;
  }
  uint64_t v15 = (uint64_t)(a2 - a1) / v13;
  unint64_t v47 = a1;
  unint64_t v46 = a4;
  uint64_t v16 = v14 / v13;
  if (v15 >= v14 / v13)
  {
    if ((v16 & 0x8000000000000000) == 0)
    {
      uint64_t v18 = v16 * v13;
      if (a4 < a2 || a2 + v18 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v26 = a4 + v18;
      unint64_t v45 = a4 + v18;
      unint64_t v47 = a2;
      if (v18 >= 1 && a1 < a2)
      {
        unint64_t v41 = a4;
        unint64_t v42 = a1;
        do
        {
          unint64_t v28 = a3 - v13;
          sub_100485A94(v26 - v13, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
          unint64_t v29 = a2 - v13;
          unint64_t v30 = a3;
          uint64_t v31 = (uint64_t)v11;
          uint64_t v32 = v43;
          sub_100485A94(a2 - v13, v43, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
          char v33 = static Date.< infix(_:_:)();
          uint64_t v34 = v32;
          Swift::Int v11 = (char *)v31;
          sub_100485AFC(v34, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
          sub_100485AFC(v31, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
          if (v33)
          {
            if (v30 < a2 || v28 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v36 = v41;
              unint64_t v37 = v42;
            }
            else
            {
              BOOL v35 = v30 == a2;
              unint64_t v36 = v41;
              unint64_t v37 = v42;
              if (!v35) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            v47 -= v13;
          }
          else
          {
            unint64_t v38 = v45;
            v45 -= v13;
            if (v30 < v38 || v28 >= v38)
            {
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v29 = a2;
              unint64_t v36 = v41;
              unint64_t v37 = v42;
            }
            else
            {
              unint64_t v37 = v42;
              if (v30 != v38) {
                swift_arrayInitWithTakeBackToFront();
              }
              unint64_t v29 = a2;
              unint64_t v36 = v41;
            }
          }
          unint64_t v26 = v45;
          if (v45 <= v36) {
            break;
          }
          a2 = v29;
          a3 = v28;
        }
        while (v29 > v37);
      }
      goto LABEL_59;
    }
  }
  else if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v17 = v15 * v13;
    if (a4 < a1 || a1 + v17 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v19 = a4 + v17;
    unint64_t v45 = a4 + v17;
    if (v17 >= 1 && a2 < a3)
    {
      do
      {
        sub_100485A94(a2, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
        uint64_t v21 = v43;
        sub_100485A94(a4, v43, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
        char v22 = static Date.< infix(_:_:)();
        sub_100485AFC(v21, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
        sub_100485AFC((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for BeaconEstimatedLocation);
        unint64_t v23 = v47;
        if (v22)
        {
          unint64_t v24 = a2 + v13;
          if (v47 < a2 || v47 >= v24)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v47 == a2)
          {
            unint64_t v23 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        else
        {
          unint64_t v25 = v46 + v13;
          if (v47 < v46 || v47 >= v25)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v47 != v46)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          unint64_t v46 = v25;
          unint64_t v24 = a2;
        }
        unint64_t v47 = v23 + v13;
        a4 = v46;
        if (v46 >= v19) {
          break;
        }
        a2 = v24;
      }
      while (v24 < a3);
    }
LABEL_59:
    sub_100B72CA4(&v47, &v46, (uint64_t *)&v45);
    return 1;
  }
LABEL_63:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100476668(void (*a1)(char *), uint64_t a2, uint64_t a3)
{
  unint64_t v38 = a1;
  uint64_t v39 = a2;
  uint64_t v4 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  uint64_t v37 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v34 - v8;
  sub_10000588C(&qword_101640980);
  uint64_t result = static _DictionaryStorage.copy(original:)();
  uint64_t v11 = result;
  int64_t v12 = 0;
  uint64_t v40 = a3;
  uint64_t v41 = result;
  uint64_t v15 = *(void *)(a3 + 64);
  uint64_t v14 = a3 + 64;
  uint64_t v13 = v15;
  uint64_t v16 = 1 << *(unsigned char *)(v14 - 32);
  uint64_t v17 = -1;
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  unint64_t v18 = v17 & v13;
  uint64_t v34 = v14;
  int64_t v35 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v36 = result + 64;
  if ((v17 & v13) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v19 = __clz(__rbit64(v18));
  v18 &= v18 - 1;
  for (unint64_t i = v19 | (v12 << 6); ; unint64_t i = __clz(__rbit64(v22)) + (v12 << 6))
  {
    unint64_t v24 = (uint64_t *)(*(void *)(v40 + 48) + 16 * i);
    uint64_t v26 = *v24;
    unint64_t v25 = v24[1];
    unint64_t v27 = *(void *)(v37 + 72) * i;
    sub_100485A94(*(void *)(v40 + 56) + v27, (uint64_t)v9, type metadata accessor for OwnedBeaconGroup.PairingState);
    sub_1000361E0(v26, v25);
    uint64_t v28 = v42;
    v38(v9);
    if (v28)
    {
      uint64_t v11 = v41;
      swift_release();
      sub_10001CFB8(v26, v25);
      sub_100485AFC((uint64_t)v9, type metadata accessor for OwnedBeaconGroup.PairingState);
      return v11;
    }
    uint64_t v42 = 0;
    sub_100485AFC((uint64_t)v9, type metadata accessor for OwnedBeaconGroup.PairingState);
    *(void *)(v36 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    uint64_t v29 = v41;
    unint64_t v30 = (uint64_t *)(*(void *)(v41 + 48) + 16 * i);
    *unint64_t v30 = v26;
    v30[1] = v25;
    uint64_t v31 = *(void *)(v29 + 56) + v27;
    uint64_t v11 = v29;
    uint64_t result = sub_100485510((uint64_t)v7, v31, type metadata accessor for OwnedBeaconGroup.PairingState);
    uint64_t v32 = *(void *)(v11 + 16);
    BOOL v21 = __OFADD__(v32, 1);
    uint64_t v33 = v32 + 1;
    if (v21)
    {
      __break(1u);
LABEL_28:
      __break(1u);
      goto LABEL_29;
    }
    *(void *)(v11 + 16) = v33;
    if (v18) {
      goto LABEL_4;
    }
LABEL_5:
    BOOL v21 = __OFADD__(v12++, 1);
    if (v21) {
      goto LABEL_28;
    }
    if (v12 >= v35) {
      return v11;
    }
    unint64_t v22 = *(void *)(v34 + 8 * v12);
    if (!v22) {
      break;
    }
LABEL_15:
    unint64_t v18 = (v22 - 1) & v22;
  }
  int64_t v23 = v12 + 1;
  if (v12 + 1 >= v35) {
    return v11;
  }
  unint64_t v22 = *(void *)(v34 + 8 * v23);
  if (v22) {
    goto LABEL_14;
  }
  int64_t v23 = v12 + 2;
  if (v12 + 2 >= v35) {
    return v11;
  }
  unint64_t v22 = *(void *)(v34 + 8 * v23);
  if (v22) {
    goto LABEL_14;
  }
  int64_t v23 = v12 + 3;
  if (v12 + 3 >= v35) {
    return v11;
  }
  unint64_t v22 = *(void *)(v34 + 8 * v23);
  if (v22)
  {
LABEL_14:
    int64_t v12 = v23;
    goto LABEL_15;
  }
  while (1)
  {
    int64_t v12 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v12 >= v35) {
      return v41;
    }
    unint64_t v22 = *(void *)(v34 + 8 * v12);
    ++v23;
    if (v22) {
      goto LABEL_15;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_1004769C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for LocationFetcher();
  __chkstk_darwin(v10 - 8);
  int64_t v12 = (char *)v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21[3] = a4;
  void v21[4] = a5;
  uint64_t v13 = sub_10001D958(v21);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(v13, a2, a4);
  uint64_t v14 = *(void *)(a3 + 280);
  sub_10001D010((uint64_t)v21, (uint64_t)v20);
  uint64_t v15 = qword_101636CB8;
  swift_retain();
  if (v15 != -1) {
    swift_once();
  }
  uint64_t v16 = qword_10170E330;
  swift_retain();
  unint64_t v17 = sub_10092DC10((uint64_t)_swiftEmptyArrayStorage);
  sub_1005A2BA4(v14, v20, v16, v17, v12);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a1;
  *(void *)(v18 + 24) = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1005A3050(a1, (uint64_t)sub_10007522C, v18);
  swift_release();
  sub_100485AFC((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v21);
}

void sub_100476B84(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, double a6, double a7)
{
  uint64_t v108 = a4;
  LODWORD(v117) = a3;
  uint64_t v95 = type metadata accessor for LocalFindableAccessoryRecord();
  uint64_t v94 = *(void *)(v95 - 8);
  __chkstk_darwin(v95);
  uint64_t v13 = (char *)&v89 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v107 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v114 = *(void *)(v107 - 8);
  __chkstk_darwin(v107);
  uint64_t v106 = (char *)&v89 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v105 = type metadata accessor for DispatchQoS();
  uint64_t v110 = *(void *)(v105 - 8);
  __chkstk_darwin(v105);
  uint64_t v104 = (char *)&v89 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for LocationFetcher();
  uint64_t v103 = *(void *)(v16 - 8);
  uint64_t v17 = *(void *)(v103 + 64);
  uint64_t v18 = __chkstk_darwin(v16 - 8);
  uint64_t v102 = (uint64_t)&v89 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v112 = (char *)&v89 - v19;
  uint64_t v93 = type metadata accessor for DispatchTime();
  uint64_t v20 = *(void *)(v93 - 8);
  uint64_t v21 = __chkstk_darwin(v93);
  uint64_t v92 = (char *)&v89 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  BOOL v91 = (char *)&v89 - v23;
  uint64_t v24 = type metadata accessor for DispatchPredicate();
  uint64_t v25 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  unint64_t v27 = (void *)((char *)&v89 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v125 = &_s13DefaultPolicyVN;
  unint64_t v126 = sub_100075104();
  uint64_t v28 = swift_allocObject();
  uint64_t v124 = v28;
  long long v29 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(v28 + 48) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v28 + 64) = v29;
  *(_OWORD *)(v28 + 80) = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(v28 + 96) = *(unsigned char *)(a2 + 80);
  long long v30 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v28 + 16) = *(_OWORD *)a2;
  *(_OWORD *)(v28 + 32) = v30;
  uint64_t v31 = *(void **)(a5 + 88);
  *unint64_t v27 = v31;
  (*(void (**)(void *, void, uint64_t))(v25 + 104))(v27, enum case for DispatchPredicate.onQueue(_:), v24);
  sub_1000751A0(a2);
  id v32 = v31;
  LOBYTE(a2) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v25 + 8))(v27, v24);
  if (a2)
  {
    uint64_t v33 = sub_10045D1CC(a1, a6);
    int64_t v35 = v33;
    uint64_t v116 = v33[2];
    if (!v116)
    {
LABEL_32:
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v124);
      return;
    }
    uint64_t v36 = a5;
    unint64_t v37 = 0;
    uint64_t v113 = 0;
    uint64_t v115 = v33 + 4;
    uint64_t v101 = v17 + 7;
    uint64_t v100 = &v119;
    uint64_t v99 = (void (**)(char *, uint64_t))(v114 + 8);
    BOOL v98 = (void (**)(char *, uint64_t))(v110 + 8);
    int v97 = v117 & (a7 > 0.0);
    uint64_t v90 = (void (**)(char *, uint64_t))(v20 + 8);
    uint64_t v96 = (char *)&type metadata for () + 8;
    *(void *)&long long v34 = 138543362;
    long long v89 = v34;
    uint64_t v114 = a5;
    uint64_t v111 = v33;
    while (v37 < v35[2])
    {
      uint64_t v42 = &v115[2 * v37];
      uint64_t v43 = *v42;
      int v44 = *((unsigned __int8 *)v42 + 8);
      if (v44)
      {
        if (v44 == 1)
        {
          unint64_t v38 = v125;
          uint64_t v39 = v126;
          uint64_t v40 = sub_10001CD44(&v124, (uint64_t)v125);
          uint64_t v41 = swift_bridgeObjectRetain();
          sub_1004769C8(v41, (uint64_t)v40, v36, (uint64_t)v38, v39);
          swift_bridgeObjectRelease();
        }
        else
        {
          int64_t v45 = *(void *)(v43 + 16);
          uint64_t v117 = v43;
          if (v45)
          {
            uint64_t v123 = (uint64_t)_swiftEmptyArrayStorage;
            swift_bridgeObjectRetain();
            sub_1000B7570(0, v45, 0);
            unint64_t v46 = (void *)v123;
            uint64_t v47 = v43 + ((*(unsigned __int8 *)(v94 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v94 + 80));
            uint64_t v48 = *(void *)(v94 + 72);
            Swift::Int v49 = (void *)v95;
            do
            {
              sub_100485A94(v47, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
              uint64_t v123 = (uint64_t)v46;
              unint64_t v51 = v46[2];
              unint64_t v50 = v46[3];
              if (v51 >= v50 >> 1)
              {
                sub_1000B7570(v50 > 1, v51 + 1, 1);
                Swift::Int v49 = (void *)v95;
                unint64_t v46 = (void *)v123;
              }
              uint64_t v120 = v49;
              uint64_t v121 = sub_100482848(&qword_101642930, (void (*)(uint64_t))type metadata accessor for LocalFindableAccessoryRecord);
              Swift::Int v52 = sub_10001D958((uint64_t *)&aBlock);
              sub_100485A94((uint64_t)v13, (uint64_t)v52, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
              void v46[2] = v51 + 1;
              sub_10001CEB0(&aBlock, (uint64_t)&v46[5 * v51 + 4]);
              sub_100485AFC((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
              v47 += v48;
              --v45;
            }
            while (v45);
            uint64_t v36 = v114;
          }
          else
          {
            swift_bridgeObjectRetain();
            unint64_t v46 = _swiftEmptyArrayStorage;
          }
          uint64_t v72 = *(void *)(v36 + 280);
          sub_10001D010((uint64_t)&v124, (uint64_t)&aBlock);
          uint64_t v73 = qword_101636CB8;
          swift_retain();
          if (v73 != -1) {
            swift_once();
          }
          uint64_t v74 = qword_10170E330;
          swift_retain();
          unint64_t v75 = sub_10092DC10((uint64_t)_swiftEmptyArrayStorage);
          uint64_t v76 = v112;
          sub_1005A2BA4(v72, &aBlock, v74, v75, v112);
          uint64_t v77 = swift_allocObject();
          swift_weakInit();
          uint64_t v78 = swift_allocObject();
          *(void *)(v78 + 16) = v46;
          *(void *)(v78 + 24) = v77;
          uint64_t v109 = v77;
          uint64_t v110 = *((void *)v76 + 2);
          uint64_t v79 = v102;
          sub_100485A94((uint64_t)v76, v102, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
          unint64_t v80 = (*(unsigned __int8 *)(v103 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v103 + 80);
          unint64_t v81 = (v101 + v80) & 0xFFFFFFFFFFFFFFF8;
          uint64_t v82 = swift_allocObject();
          sub_100485510(v79, v82 + v80, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
          *(void *)(v82 + v81) = v46;
          long long v83 = (uint64_t (**)(uint64_t))(v82 + ((v81 + 15) & 0xFFFFFFFFFFFFFFF8));
          *long long v83 = sub_100482BC0;
          v83[1] = (uint64_t (*)(uint64_t))v78;
          uint64_t v121 = (uint64_t)sub_100482D34;
          uint64_t v122 = v82;
          *(void *)&long long aBlock = _NSConcreteStackBlock;
          *((void *)&aBlock + 1) = 1107296256;
          os_log_t v119 = sub_1004B5480;
          uint64_t v120 = &unk_1015C3E80;
          uint64_t v84 = _Block_copy(&aBlock);
          swift_bridgeObjectRetain_n();
          swift_retain();
          swift_retain();
          uint64_t v85 = v104;
          static DispatchQoS.unspecified.getter();
          uint64_t v123 = (uint64_t)_swiftEmptyArrayStorage;
          sub_100482848((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
          sub_10000588C((uint64_t *)&unk_10163F350);
          sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
          uint64_t v86 = v106;
          uint64_t v87 = v107;
          dispatch thunk of SetAlgebra.init<A>(_:)();
          OS_dispatch_queue.async(group:qos:flags:execute:)();
          uint64_t v88 = v84;
          uint64_t v36 = v114;
          _Block_release(v88);
          (*v99)(v86, v87);
          (*v98)(v85, v105);
          swift_release();
          swift_release();
          sub_100485AFC((uint64_t)v112, (uint64_t (*)(void))type metadata accessor for LocationFetcher);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          int64_t v35 = v111;
        }
      }
      else
      {
        swift_bridgeObjectRetain();
        if (v97)
        {
          Swift::Int v53 = dispatch_group_create();
          dispatch_group_enter(v53);
        }
        else
        {
          Swift::Int v53 = 0;
        }
        sub_10001D010((uint64_t)&v124, (uint64_t)&aBlock);
        uint64_t v54 = (void *)swift_allocObject();
        v54[2] = v43;
        void v54[3] = v53;
        v54[4] = v36;
        sub_10001CEB0(&aBlock, (uint64_t)(v54 + 5));
        uint64_t v55 = type metadata accessor for Transaction();
        __chkstk_darwin(v55);
        *((void *)&v89 - 6) = v36;
        *((void *)&v89 - 5) = &v124;
        *((void *)&v89 - 4) = v108;
        *((void *)&v89 - 3) = v43;
        *((void *)&v89 - 2) = sub_100482E20;
        *((void *)&v89 - 1) = v54;
        uint64_t v56 = v53;
        uint64_t v117 = v43;
        swift_bridgeObjectRetain();
        swift_retain();
        uint64_t v57 = v113;
        static Transaction.named<A>(_:with:)();
        uint64_t v113 = v57;
        swift_release();
        if (v53)
        {
          uint64_t v58 = v56;
          uint64_t v59 = v92;
          static DispatchTime.now()();
          uint64_t v60 = v91;
          + infix(_:_:)();
          char v61 = *v90;
          uint64_t v62 = v93;
          (*v90)(v59, v93);
          OS_dispatch_group.wait(timeout:)();

          v61(v60, v62);
        }
        int64_t v35 = v111;
        if (static DispatchTimeoutResult.== infix(_:_:)())
        {
          swift_bridgeObjectRelease();

          uint64_t v36 = v114;
        }
        else
        {
          type metadata accessor for SPOwnerSessionError(0);
          uint64_t v123 = 4;
          sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
          sub_100482848(&qword_101638460, type metadata accessor for SPOwnerSessionError);
          _BridgedStoredNSError.init(_:userInfo:)();
          uint64_t v63 = (void *)aBlock;
          swift_willThrow();

          if (qword_101636B10 != -1) {
            swift_once();
          }
          uint64_t v64 = type metadata accessor for Logger();
          sub_100010324(v64, (uint64_t)qword_10170DEB8);
          id v65 = v63;
          unint64_t v66 = Logger.logObject.getter();
          os_log_type_t v67 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v66, v67))
          {
            uint64_t v68 = swift_slowAlloc();
            Swift::Int v69 = (void *)swift_slowAlloc();
            *(_DWORD *)uint64_t v68 = v89;
            id v70 = v65;
            uint64_t v71 = _swift_stdlib_bridgeErrorToNSError();
            *(void *)(v68 + 4) = v71;
            *Swift::Int v69 = v71;

            _os_log_impl((void *)&_mh_execute_header, v66, v67, "Failed to fetch owned beacons locations %{public}@", (uint8_t *)v68, 0xCu);
            sub_10000588C((uint64_t *)&unk_101638EA0);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            swift_bridgeObjectRelease();
          }
          else
          {
            swift_bridgeObjectRelease();
          }
          uint64_t v113 = 0;
          uint64_t v36 = v114;
        }
      }
      if (++v37 == v116) {
        goto LABEL_32;
      }
    }
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_1004779D8(void (*a1)(char *, uint64_t), uint64_t a2)
{
  uint64_t v93 = a1;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v89 = *(void *)(v3 - 8);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v78 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v88 = (char *)&v78 - v7;
  uint64_t v8 = type metadata accessor for BeaconObservation();
  uint64_t v9 = *(char **)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v86 = (uint64_t)&v78 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v78 - v12;
  uint64_t v14 = sub_10000588C((uint64_t *)&unk_101655530);
  __chkstk_darwin(v14 - 8);
  uint64_t v90 = (uint64_t)&v78 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v16 - 8);
  uint64_t v87 = (char *)&v78 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = type metadata accessor for Date();
  uint64_t v95 = *(void *)(v92 - 8);
  uint64_t v18 = __chkstk_darwin(v92);
  uint64_t v91 = (uint64_t)&v78 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v18);
  uint64_t v94 = (char *)&v78 - v20;
  sub_1000751A0(a2);
  if ((sub_100474850() & 1) == 0) {
    goto LABEL_44;
  }
  uint64_t v84 = v3;
  char v21 = *(unsigned char *)(a2 + 8);
  sub_10000588C(&qword_101655540);
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v22 = v97[0];
  if (!*(void *)(v97[0] + 16) || (unint64_t v23 = sub_1007240CC((uint64_t)v93), (v24 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    uint64_t v25 = _swiftEmptyArrayStorage;
    goto LABEL_27;
  }
  uint64_t v82 = 0;
  uint64_t v83 = a2;
  uint64_t v25 = _swiftEmptyArrayStorage;
  uint64_t v26 = *(void *)(*(void *)(v22 + 56) + 8 * v23);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v27 = sub_1007100C0(v26);
  swift_bridgeObjectRelease();
  size_t v28 = sub_100B752E8((uint64_t)v27);
  swift_release();
  v97[0] = (uint64_t)_swiftEmptyArrayStorage;
  a2 = *(void *)(v28 + 16);
  if (!a2)
  {
LABEL_26:
    swift_release();
    a2 = v83;
LABEL_27:
    uint64_t v13 = (char *)v92;
    uint64_t v40 = v90;
    sub_100E4D5E0((uint64_t)v25, v90);
    swift_bridgeObjectRelease();
    if ((*((unsigned int (**)(uint64_t, uint64_t, uint64_t))v9 + 6))(v40, 1, v8) == 1)
    {
      sub_10001DAB4(v40, (uint64_t *)&unk_101655530);
      uint64_t v8 = v95;
      uint64_t v41 = (uint64_t)v87;
      (*(void (**)(char *, uint64_t, uint64_t, char *))(v95 + 56))(v87, 1, 1, v13);
      uint64_t v9 = v88;
    }
    else
    {
      uint64_t v42 = v40 + *(int *)(v8 + 20);
      uint64_t v8 = v95;
      uint64_t v43 = v40;
      uint64_t v41 = (uint64_t)v87;
      (*(void (**)(char *, uint64_t, char *))(v95 + 16))(v87, v42, v13);
      sub_100485AFC(v43, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      (*(void (**)(uint64_t, void, uint64_t, char *))(v8 + 56))(v41, 0, 1, v13);
      int v44 = (*(uint64_t (**)(uint64_t, uint64_t, char *))(v8 + 48))(v41, 1, v13);
      uint64_t v9 = v88;
      if (v44 != 1)
      {
        (*(void (**)(char *, uint64_t, char *))(v8 + 32))(v94, v41, v13);
LABEL_32:
        if (qword_101636CD8 == -1) {
          goto LABEL_33;
        }
        goto LABEL_48;
      }
    }
    static Date.distantPast.getter();
    sub_10001DAB4(v41, (uint64_t *)&unk_10163AC90);
    goto LABEL_32;
  }
  unint64_t v29 = 0;
  uint64_t v30 = 405;
  if ((v21 & 1) == 0) {
    uint64_t v30 = 403;
  }
  uint64_t v81 = v30;
  while (v29 < *(void *)(v28 + 16))
  {
    uint64_t v31 = v6;
    unint64_t v32 = (v9[80] + 32) & ~(unint64_t)v9[80];
    uint64_t v33 = *((void *)v9 + 9);
    sub_100485A94(v28 + v32 + v33 * v29, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    unsigned int v34 = v13[*(int *)(v8 + 24)];
    BOOL v35 = v34 - 4 >= 0x28 && v34 >= 2;
    if (v35 && (v34 != 2 ? (uint64_t v36 = 405) : (uint64_t v36 = 403), v36 == v81))
    {
      sub_100485510((uint64_t)v13, v86, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        sub_1000B77F0(0, v25[2] + 1, 1);
      }
      uint64_t v25 = (void *)v97[0];
      unint64_t v38 = *(void *)(v97[0] + 16);
      unint64_t v37 = *(void *)(v97[0] + 24);
      unint64_t v39 = v38 + 1;
      if (v38 >= v37 >> 1)
      {
        unint64_t v80 = v38 + 1;
        unint64_t v79 = v38;
        sub_1000B77F0(v37 > 1, v38 + 1, 1);
        unint64_t v39 = v80;
        unint64_t v38 = v79;
        uint64_t v25 = (void *)v97[0];
      }
      v25[2] = v39;
      sub_100485510(v86, (uint64_t)v25 + v32 + v38 * v33, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    }
    else
    {
      sub_100485AFC((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    }
    ++v29;
    uint64_t v6 = v31;
    if (a2 == v29)
    {
      uint64_t v25 = (void *)v97[0];
      goto LABEL_26;
    }
  }
  __break(1u);
LABEL_48:
  swift_once();
LABEL_33:
  OS_dispatch_queue.sync<A>(execute:)();
  sub_1010AB8E8(v97[0]);
  double v46 = v45;
  swift_bridgeObjectRelease();
  double v47 = v46 * 3.0;
  uint64_t v48 = v91;
  static Date.trustedNow.getter(v91);
  Date.timeIntervalSince(_:)();
  double v50 = v49;
  Swift::Int v53 = *(void (**)(char *, uint64_t))(v8 + 8);
  uint64_t v51 = v8 + 8;
  Swift::Int v52 = v53;
  v53((char *)v48, (uint64_t)v13);
  if (v47 >= fabs(v50))
  {
    id v65 = v6;
    uint64_t v66 = v84;
    uint64_t v67 = v89;
    if (qword_101636B10 != -1) {
      swift_once();
    }
    uint64_t v68 = type metadata accessor for Logger();
    sub_100010324(v68, (uint64_t)qword_10170DEB8);
    (*(void (**)(char *, void (*)(char *, uint64_t), uint64_t))(v67 + 16))(v65, v93, v66);
    Swift::Int v69 = Logger.logObject.getter();
    os_log_type_t v70 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v69, v70))
    {
      uint64_t v71 = swift_slowAlloc();
      uint64_t v93 = v52;
      uint64_t v72 = v67;
      uint64_t v73 = v71;
      v97[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v73 = 141558275;
      uint64_t v96 = 1752392040;
      uint64_t v83 = a2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v73 + 12) = 2081;
      uint64_t v95 = v51;
      sub_100482848((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v74 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v96 = sub_1008FA0F0(v74, v75, v97);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v72 + 8))(v65, v66);
      _os_log_impl((void *)&_mh_execute_header, v69, v70, "Not allowed to exhaustively fetch beacon %{private,mask.hash}s based on policy.", (uint8_t *)v73, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      v93(v94, v92);
      uint64_t v76 = v83;
LABEL_45:
      sub_1004830A8(v76);
      return 0;
    }

    (*(void (**)(char *, uint64_t))(v67 + 8))(v65, v66);
    v52(v94, (uint64_t)v13);
LABEL_44:
    uint64_t v76 = a2;
    goto LABEL_45;
  }
  uint64_t v54 = v84;
  uint64_t v55 = v89;
  if (qword_101636B10 != -1) {
    swift_once();
  }
  uint64_t v56 = type metadata accessor for Logger();
  sub_100010324(v56, (uint64_t)qword_10170DEB8);
  (*(void (**)(char *, void (*)(char *, uint64_t), uint64_t))(v55 + 16))(v9, v93, v54);
  uint64_t v57 = Logger.logObject.getter();
  os_log_type_t v58 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v57, v58))
  {
    uint64_t v59 = swift_slowAlloc();
    uint64_t v93 = v52;
    uint64_t v60 = v55;
    uint64_t v61 = v59;
    v97[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v61 = 141558275;
    uint64_t v96 = 1752392040;
    uint64_t v83 = a2;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v61 + 12) = 2081;
    uint64_t v95 = v51;
    sub_100482848((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v62 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v96 = sub_1008FA0F0(v62, v63, v97);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v60 + 8))(v9, v54);
    _os_log_impl((void *)&_mh_execute_header, v57, v58, "Allowed to exhaustively fetch beacon %{private,mask.hash}s based on policy.", (uint8_t *)v61, 0x16u);
    uint64_t v64 = 1;
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    v93(v94, v92);
    sub_1004830A8(v83);
  }
  else
  {

    (*(void (**)(char *, uint64_t))(v55 + 8))(v9, v54);
    v52(v94, (uint64_t)v13);
    sub_1004830A8(a2);
    return 1;
  }
  return v64;
}

char *sub_1004785E8(uint64_t a1, uint64_t a2, char *a3)
{
  uint64_t v23 = a2;
  uint64_t v18 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v18);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v5 - 8);
  uint64_t v22 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v6 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for TagCommandManager();
  unint64_t v27 = &off_1015D9A60;
  *(void *)&long long v25 = a1;
  uint64_t v21 = sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  unsigned int v20 = enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:);
  uint64_t v19 = *(void (**)(char *))(v6 + 104);
  v19(v8);
  static DispatchQoS.unspecified.getter();
  char v24 = _swiftEmptyArrayStorage;
  v17[1] = sub_100482848((unint64_t *)&qword_101638CC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000588C((uint64_t *)&unk_1016376F0);
  sub_100062734((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *((void *)a3 + 7) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  ((void (*)(char *, void, uint64_t))v19)(v8, v20, v22);
  static DispatchQoS.unspecified.getter();
  char v24 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *((void *)a3 + 8) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *((void *)a3 + 9) = _swiftEmptyArrayStorage;
  *(void *)&a3[OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_targetBeacon] = 0;
  uint64_t v9 = OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_playFuture;
  sub_10000588C(&qword_101645830);
  swift_allocObject();
  *(void *)&a3[v9] = Future.init()();
  uint64_t v10 = OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_stopFuture;
  swift_allocObject();
  *(void *)&a3[v10] = Future.init()();
  uint64_t v11 = &a3[OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_playCommandIdentifier];
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56);
  v14(v11, 1, 1, v12);
  v14(&a3[OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_stopCommandIdentifier], 1, 1, v12);
  *(void *)&a3[OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_playCommandError] = 0;
  *(void *)&a3[OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_stopCommandError] = 0;
  uint64_t v15 = &a3[OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_playSoundTimer];
  *((void *)v15 + 4) = 0;
  *(_OWORD *)uint64_t v15 = 0u;
  *((_OWORD *)v15 + 1) = 0u;
  sub_10001CEB0(&v25, (uint64_t)(a3 + 16));
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 32))(&a3[OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_beaconIdentifier], v23, v12);
  return a3;
}

uint64_t sub_100478A68()
{
  _StringGuts.grow(_:)(55);
  v0._object = (void *)0x80000001013FD1C0;
  v0._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v0);
  v1._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._object = (void *)0xEC000000203A6B73;
  v2._countAndFlagsBits = 0x69446D6F7266202CLL;
  String.append(_:)(v2);
  v3._countAndFlagsBits = 1702195828;
  v3._object = (void *)0xE400000000000000;
  String.append(_:)(v3);
  v4._countAndFlagsBits = 0x6E6575716573202CLL;
  v4._object = (void *)0xED0000203A736563;
  String.append(_:)(v4);
  v5._countAndFlagsBits = Array.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 8236;
  v6._object = (void *)0xE200000000000000;
  String.append(_:)(v6);
  _StringGuts.grow(_:)(71);
  v7._countAndFlagsBits = 0x6974737561687865;
  v7._object = (void *)0xEC000000203A6576;
  String.append(_:)(v7);
  v8._countAndFlagsBits = 0x65736C6166;
  v8._object = (void *)0xE500000000000000;
  String.append(_:)(v8);
  v9._object = (void *)0x80000001013FD1E0;
  v9._countAndFlagsBits = 0xD000000000000016;
  String.append(_:)(v9);
  v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 0xD00000000000001FLL;
  v11._object = (void *)0x80000001013FD200;
  String.append(_:)(v11);
  v12._countAndFlagsBits = 1702195828;
  v12._object = (void *)0xE400000000000000;
  String.append(_:)(v12);
  swift_bridgeObjectRetain();
  v13._countAndFlagsBits = 0;
  v13._object = (void *)0xE000000000000000;
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_100478CC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v28 = a3;
  unint64_t v29 = a4;
  uint64_t v7 = sub_10000588C(&qword_101645760);
  uint64_t v8 = __chkstk_darwin(v7);
  Swift::String v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  Swift::String v12 = (char *)&v26 - v11;
  uint64_t v30 = a1;
  uint64_t v13 = *(void *)(a2 + 64);
  uint64_t v26 = a2 + 64;
  uint64_t v14 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & v13;
  int64_t v27 = (unint64_t)(v14 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v18 = 0;
  if (!v16) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v19 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  for (unint64_t i = v19 | (v18 << 6); ; unint64_t i = __clz(__rbit64(v22)) + (v18 << 6))
  {
    uint64_t v24 = *(void *)(a2 + 48);
    uint64_t v25 = type metadata accessor for UUID();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v25 - 8) + 16))(v12, v24 + *(void *)(*(void *)(v25 - 8) + 72) * i, v25);
    *(void *)&v12[*(int *)(v7 + 48)] = *(void *)(*(void *)(a2 + 56) + 8 * i);
    sub_10001D608((uint64_t)v12, (uint64_t)v10, &qword_101645760);
    swift_bridgeObjectRetain();
    sub_100457E38(&v30, (uint64_t)v10, v28, v29);
    if (v4)
    {
      swift_bridgeObjectRelease();
      sub_10001DAB4((uint64_t)v10, &qword_101645760);
      return swift_release();
    }
    uint64_t result = sub_10001DAB4((uint64_t)v10, &qword_101645760);
    if (v16) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v18++, 1))
    {
      __break(1u);
      goto LABEL_28;
    }
    if (v18 >= v27) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v26 + 8 * v18);
    if (!v22) {
      break;
    }
LABEL_17:
    unint64_t v16 = (v22 - 1) & v22;
  }
  int64_t v23 = v18 + 1;
  if (v18 + 1 >= v27) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v26 + 8 * v23);
  if (v22) {
    goto LABEL_16;
  }
  int64_t v23 = v18 + 2;
  if (v18 + 2 >= v27) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v26 + 8 * v23);
  if (v22) {
    goto LABEL_16;
  }
  int64_t v23 = v18 + 3;
  if (v18 + 3 >= v27) {
    goto LABEL_26;
  }
  unint64_t v22 = *(void *)(v26 + 8 * v23);
  if (v22) {
    goto LABEL_16;
  }
  int64_t v23 = v18 + 4;
  if (v18 + 4 >= v27)
  {
LABEL_26:
    swift_release();
    return v30;
  }
  unint64_t v22 = *(void *)(v26 + 8 * v23);
  if (v22)
  {
LABEL_16:
    int64_t v18 = v23;
    goto LABEL_17;
  }
  while (1)
  {
    int64_t v18 = v23 + 1;
    if (__OFADD__(v23, 1)) {
      break;
    }
    if (v18 >= v27) {
      goto LABEL_26;
    }
    unint64_t v22 = *(void *)(v26 + 8 * v18);
    ++v23;
    if (v22) {
      goto LABEL_17;
    }
  }
LABEL_28:
  __break(1u);
  return result;
}

void *sub_100478FA0(uint64_t a1, uint64_t a2)
{
  uint64_t v31 = a2;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v8 - 8);
  Swift::String v10 = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11)
  {
    v21[2] = a1;
    v21[3] = v2;
    uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    uint64_t v12 = v5 + 16;
    int64_t v27 = v13;
    uint64_t v14 = a1 + ((*(unsigned __int8 *)(v12 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 64));
    uint64_t v24 = *(void *)(v12 + 56);
    uint64_t v25 = (unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 32);
    unint64_t v22 = (void (**)(char *, uint64_t))(v12 - 8);
    int64_t v23 = (void (**)(char *, char *, uint64_t))(v12 + 16);
    swift_bridgeObjectRetain();
    uint64_t v15 = _swiftEmptyArrayStorage;
    uint64_t v26 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 40);
    v21[1] = (v12 + 40) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    void v21[4] = v12;
    while (1)
    {
      v27(v10, v14, v4);
      unint64_t v16 = *v26;
      (*v26)(v10, 0, 1, v4);
      if ((*v25)(v10, 1, v4) == 1) {
        break;
      }
      (*v23)(v7, v10, v4);
      sub_100ACCD98((uint64_t)v7, (uint64_t)&v28);
      (*v22)(v7, v4);
      if (v29)
      {
        sub_10001CEB0(&v28, (uint64_t)v30);
        sub_10001CEB0(v30, (uint64_t)&v28);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v15 = sub_100A6F7F0(0, v15[2] + 1, 1, v15);
        }
        unint64_t v18 = v15[2];
        unint64_t v17 = v15[3];
        if (v18 >= v17 >> 1) {
          uint64_t v15 = sub_100A6F7F0((void *)(v17 > 1), v18 + 1, 1, v15);
        }
        void v15[2] = v18 + 1;
        sub_10001CEB0(&v28, (uint64_t)&v15[5 * v18 + 4]);
      }
      else
      {
        sub_10001DAB4((uint64_t)&v28, (uint64_t *)&unk_10163BBE0);
      }
      v14 += v24;
      if (!--v11)
      {
        v16(v10, 1, 1, v4);
        break;
      }
    }
  }
  else
  {
    unint64_t v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    swift_bridgeObjectRetain();
    uint64_t v15 = _swiftEmptyArrayStorage;
    v19(v10, 1, 1, v4);
  }
  swift_bridgeObjectRelease();
  return v15;
}

void *sub_1004792DC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v48 = (uint64_t)v37 - v10;
  uint64_t v11 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(a1 + 16);
  v37[2] = a1;
  if (v14)
  {
    v37[1] = v2;
    unint64_t v16 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
    uint64_t v15 = v6 + 16;
    uint64_t v55 = v16;
    uint64_t v17 = a1 + ((*(unsigned __int8 *)(v15 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 64));
    uint64_t v18 = *(void *)(v15 + 56);
    double v46 = (unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 32);
    uint64_t v42 = (void (**)(uint64_t, char *, uint64_t))(v15 + 16);
    uint64_t v43 = v18;
    uint64_t v41 = (void (**)(char *, uint64_t))(v15 - 8);
    swift_bridgeObjectRetain();
    uint64_t v51 = _swiftEmptyArrayStorage;
    double v47 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 40);
    v37[0] = (v15 + 40) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    *(void *)&long long v19 = 141558275;
    long long v38 = v19;
    v37[3] = (char *)&type metadata for Any + 8;
    uint64_t v20 = v48;
    uint64_t v40 = v15;
    uint64_t v39 = a2;
    int v44 = v13;
    while (1)
    {
      uint64_t v50 = v17;
      v55(v13, v17, v5);
      double v45 = *v47;
      v45(v13, 0, 1, v5);
      if ((*v46)(v13, 1, v5) == 1) {
        break;
      }
      (*v42)(v20, v13, v5);
      if (qword_101636B10 != -1) {
        swift_once();
      }
      uint64_t v49 = v14;
      uint64_t v22 = type metadata accessor for Logger();
      sub_100010324(v22, (uint64_t)qword_10170DEB8);
      v55(v9, v20, v5);
      int64_t v23 = Logger.logObject.getter();
      uint64_t v24 = v9;
      os_log_type_t v25 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v23, v25))
      {
        uint64_t v26 = v41;
        uint64_t v27 = swift_slowAlloc();
        *(void *)&v54[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v27 = v38;
        *(void *)(v27 + 4) = 1752392040;
        *(_WORD *)(v27 + 12) = 2081;
        sub_100482848((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v27 + 14) = sub_1008FA0F0(v28, v29, (uint64_t *)v54);
        swift_bridgeObjectRelease();
        uint64_t v30 = *v26;
        v30(v24, v5);
        _os_log_impl((void *)&_mh_execute_header, v23, v25, "One-shot location includes beaconID: %{private,mask.hash}s.", (uint8_t *)v27, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        uint64_t v30 = *v41;
        (*v41)(v24, v5);
      }

      uint64_t v9 = v24;
      uint64_t v20 = v48;
      sub_100ACCD98(v48, (uint64_t)&v52);
      v30((char *)v20, v5);
      if (v53)
      {
        sub_10001CEB0(&v52, (uint64_t)v54);
        sub_10001CEB0(v54, (uint64_t)&v52);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v13 = v44;
        uint64_t v21 = v49;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          uint64_t v51 = sub_100A6F7F0(0, v51[2] + 1, 1, v51);
        }
        unint64_t v33 = v51[2];
        unint64_t v32 = v51[3];
        if (v33 >= v32 >> 1) {
          uint64_t v51 = sub_100A6F7F0((void *)(v32 > 1), v33 + 1, 1, v51);
        }
        unsigned int v34 = v51;
        v51[2] = v33 + 1;
        sub_10001CEB0(&v52, (uint64_t)&v34[5 * v33 + 4]);
      }
      else
      {
        sub_10001DAB4((uint64_t)&v52, (uint64_t *)&unk_10163BBE0);
        uint64_t v13 = v44;
        uint64_t v21 = v49;
      }
      uint64_t v17 = v50 + v43;
      uint64_t v14 = v21 - 1;
      if (!v14)
      {
        v45(v13, 1, 1, v5);
        break;
      }
    }
  }
  else
  {
    BOOL v35 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56);
    swift_bridgeObjectRetain();
    uint64_t v51 = _swiftEmptyArrayStorage;
    v35(v13, 1, 1, v5);
  }
  swift_bridgeObjectRelease();
  return v51;
}

void *sub_100479894(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v73 = a2;
  uint64_t v5 = type metadata accessor for Endianness();
  __chkstk_darwin(v5 - 8);
  v68[3] = (char *)v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v8 = *((void *)v7 - 1);
  __chkstk_darwin(v7);
  uint64_t v83 = (uint64_t)v68 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for StableIdentifier();
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v15 = __chkstk_darwin(v14);
  __chkstk_darwin(v15);
  uint64_t v80 = (uint64_t)v68 - v18;
  uint64_t result = _swiftEmptyArrayStorage;
  unint64_t v86 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v79 = *(void *)(a1 + 16);
  if (!v79) {
    return result;
  }
  uint64_t v82 = v17;
  uint64_t v77 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  uint64_t v76 = *(void *)(v8 + 72);
  uint64_t v70 = v16 + 8;
  uint64_t v71 = v16;
  uint64_t v74 = v13 + 8;
  v68[1] = a1;
  swift_bridgeObjectRetain();
  uint64_t v20 = 0;
  uint64_t v81 = v7;
  uint64_t v75 = v10;
  uint64_t v78 = v13;
  while (2)
  {
    uint64_t v21 = v77 + v76 * v20;
    uint64_t v22 = v21 + v7[6];
    uint64_t v23 = v80;
    sub_100485A94(v22, v80, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    sub_100485AFC(v23, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    uint64_t v25 = v82;
    sub_100485A94(v22, v82, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    if (EnumCaseMultiPayload == 1) {
      goto LABEL_11;
    }
    uint64_t v26 = v71;
    sub_100485A94(v25, v71, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    int v27 = swift_getEnumCaseMultiPayload();
    if (v27 == 3)
    {
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_10;
    }
    if (v27 == 2)
    {
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_10:
      swift_bridgeObjectRelease();
      uint64_t v28 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v28 - 8) + 8))(v26, v28);
      uint64_t v25 = v82;
LABEL_11:
      sub_100485AFC(v25, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      uint64_t v29 = v83;
      sub_100485A94(v21, v83, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      uint64_t v30 = v7[17];
      uint64_t v31 = *(void *)(v29 + v7[16]);
      uint64_t v32 = *(void *)(v29 + v30);
      if (qword_101636CD8 != -1) {
        swift_once();
      }
      OS_dispatch_queue.sync<A>(execute:)();
      uint64_t v33 = sub_1010AC02C(v85);
      swift_bridgeObjectRelease();
      uint64_t v34 = sub_101158768(v33);
      swift_bridgeObjectRelease();
      uint64_t v85 = v34;
      sub_100DCA424(&v84, 8212);
      sub_100DCA424(&v84, 8213);
      sub_100DCA424(&v84, 8216);
      sub_100DCA424(&v84, 8219);
      sub_100DCA424(&v84, 8220);
      sub_100DCA424(&v84, 8223);
      BOOL v35 = v31 == 76 && sub_100DC71B4(v32, v85);
      uint64_t v7 = v81;
      swift_bridgeObjectRelease();
      BOOL v36 = !v35;
      goto LABEL_17;
    }
    sub_100485AFC(v26, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    sub_100485AFC(v82, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    sub_100485A94(v21, v83, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    BOOL v36 = 0;
LABEL_17:
    sub_100485AFC(v83, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v37 = (uint64_t)v78;
    sub_100485A94(v22, (uint64_t)v78, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
    int v38 = swift_getEnumCaseMultiPayload();
    if (v38 == 3)
    {
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    else
    {
      if (v38 != 2)
      {
        sub_100485AFC(v37, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
        if (v36) {
          goto LABEL_28;
        }
        goto LABEL_4;
      }
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t v39 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v39 - 8) + 8))(v37, v39);
    uint64_t v40 = sub_1002AAF08(*(void *)(v21 + v7[16]), *(void *)(v21 + v7[17]));
    if (v41 >> 60 == 15)
    {
      if (v36) {
        goto LABEL_28;
      }
      goto LABEL_4;
    }
    unint64_t v42 = v41;
    if (v36)
    {
      sub_100037A24(v40, v41);
      goto LABEL_28;
    }
    uint64_t v72 = v40;
    uint64_t v69 = v3;
    uint64_t v43 = Set.init(minimumCapacity:)();
    uint64_t v44 = 0;
    for (uint64_t i = v43 + 56; ; uint64_t i = v43 + 56)
    {
      while (1)
      {
        uint64_t v46 = (uint64_t)*(&off_10159F490 + v44++ + 4);
        uint64_t v47 = static Hasher._hash(seed:_:)();
        uint64_t v48 = -1 << *(unsigned char *)(v43 + 32);
        unint64_t v49 = v47 & ~v48;
        if (((*(void *)(i + ((v49 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v49) & 1) == 0) {
          goto LABEL_40;
        }
        uint64_t v50 = *(void *)(v43 + 48);
        if (*(void *)(v50 + 8 * v49) != v46) {
          break;
        }
LABEL_33:
        if (v44 == 1) {
          goto LABEL_42;
        }
      }
      uint64_t v51 = ~v48;
      while (1)
      {
        unint64_t v49 = (v49 + 1) & v51;
        if (((*(void *)(i + ((v49 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v49) & 1) == 0) {
          break;
        }
        if (*(void *)(v50 + 8 * v49) == v46) {
          goto LABEL_33;
        }
      }
LABEL_40:
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v84 = v43;
      sub_100DDF204(v46, v49, isUniquelyReferenced_nonNull_native);
      uint64_t v43 = v84;
      swift_bridgeObjectRelease();
      if (v44 == 1) {
        break;
      }
    }
LABEL_42:
    uint64_t v85 = v43;
    sub_100DCA424(&v84, 8216);
    sub_100DCA424(&v84, 8220);
    uint64_t v7 = v81;
    switch(v42 >> 62)
    {
      case 1uLL:
        LODWORD(v53) = HIDWORD(v72) - v72;
        if (__OFSUB__(HIDWORD(v72), v72)) {
          goto LABEL_68;
        }
        uint64_t v53 = (int)v53;
LABEL_46:
        if (v53 < -1)
        {
          __break(1u);
LABEL_67:
          __break(1u);
LABEL_68:
          __break(1u);
LABEL_69:
          __break(1u);
LABEL_70:
          __break(1u);
LABEL_71:
          __break(1u);
          JUMPOUT(0x10047A324);
        }
LABEL_47:
        Data.subdata(in:)();
        static Endianness.current.getter();
        unint64_t v57 = sub_100091A80();
        FixedWidthInteger.init(data:ofEndianness:)();
        uint64_t v58 = v85;
        if ((v84 & 0x100000000) != 0 || v84 != 76)
        {
          swift_bridgeObjectRelease();
          sub_100037A24(v72, v42);
          uint64_t v3 = v69;
          goto LABEL_4;
        }
        v68[2] = v57;
        uint64_t v3 = v69;
        switch(v42 >> 62)
        {
          case 1uLL:
            int v61 = HIDWORD(v72) - v72;
            if (__OFSUB__(HIDWORD(v72), v72)) {
              goto LABEL_70;
            }
            uint64_t v59 = v61;
            uint64_t v60 = (uint64_t)(v61 + (v61 < 0)) >> 1;
            break;
          case 2uLL:
            uint64_t v63 = *(void *)(v72 + 16);
            uint64_t v62 = *(void *)(v72 + 24);
            uint64_t v59 = v62 - v63;
            if (__OFSUB__(v62, v63)) {
              goto LABEL_71;
            }
            if (v59 >= 0) {
              uint64_t v64 = v62 - v63;
            }
            else {
              uint64_t v64 = v59 + 1;
            }
            uint64_t v60 = v64 >> 1;
            break;
          case 3uLL:
            goto LABEL_59;
          default:
            uint64_t v59 = BYTE6(v42);
            uint64_t v60 = BYTE6(v42) >> 1;
            break;
        }
        if (v59 < v60) {
          goto LABEL_67;
        }
LABEL_59:
        swift_bridgeObjectRetain();
        uint64_t v65 = v72;
        Data.subdata(in:)();
        static Endianness.current.getter();
        uint64_t v7 = v81;
        FixedWidthInteger.init(data:ofEndianness:)();
        if (BYTE4(v84)) {
          uint64_t v66 = 0;
        }
        else {
          uint64_t v66 = (int)v84;
        }
        BOOL v67 = sub_100DC71B4(v66, v58);
        swift_bridgeObjectRelease_n();
        sub_100037A24(v65, v42);
        if (v67)
        {
LABEL_28:
          sub_100398B08(v21, *(char **)(v73 + 280));
          specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
          if (*(void *)((v86 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v86 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
          }
          specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
          specialized Array._endMutation()();
        }
LABEL_4:
        if (++v20 != v79) {
          continue;
        }
        swift_bridgeObjectRelease();
        uint64_t result = (void *)v86;
        break;
      case 2uLL:
        uint64_t v55 = *(void *)(v72 + 16);
        uint64_t v54 = *(void *)(v72 + 24);
        BOOL v56 = __OFSUB__(v54, v55);
        uint64_t v53 = v54 - v55;
        if (!v56) {
          goto LABEL_46;
        }
        goto LABEL_69;
      default:
        goto LABEL_47;
    }
    return result;
  }
}

void *sub_10047A344(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v40 = (char *)v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v46 = (char *)v33 - v12;
  uint64_t result = _swiftEmptyArrayStorage;
  uint64_t v53 = _swiftEmptyArrayStorage;
  uint64_t v37 = *(void *)(a1 + 16);
  if (v37)
  {
    v33[0] = v2;
    uint64_t v14 = 0;
    uint64_t v35 = a1 + 32;
    unint64_t v41 = (unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
    uint64_t v42 = v11 + 16;
    uint64_t v39 = (void (**)(char *, char *, uint64_t))(v11 + 32);
    uint64_t v34 = v11;
    uint64_t v44 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
    double v45 = (void (**)(char *, uint64_t))(v11 + 8);
    v33[1] = (v11 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    uint64_t v36 = a2;
    uint64_t v15 = v40;
    do
    {
      uint64_t v38 = v14;
      sub_10001D010(v35 + 40 * v14, (uint64_t)&v50);
      uint64_t v17 = v51;
      uint64_t v18 = v52;
      sub_10001CD44(&v50, v51);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v18 + 8) + 8) + 32))(v17);
      uint64_t v19 = *(void *)(a2 + 16);
      if (v19)
      {
        uint64_t v20 = a2 + ((*(unsigned __int8 *)(v34 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80));
        uint64_t v43 = *(void *)(v34 + 72);
        uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v34 + 16);
        swift_bridgeObjectRetain();
        while (1)
        {
          v21(v7, v20, v8);
          uint64_t v16 = *v44;
          (*v44)(v7, 0, 1, v8);
          if ((*v41)(v7, 1, v8) == 1) {
            break;
          }
          (*v39)(v15, v7, v8);
          sub_100482848((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
          char v22 = dispatch thunk of static Equatable.== infix(_:_:)();
          uint64_t v23 = *v45;
          (*v45)(v15, v8);
          if (v22)
          {
            a2 = v36;
            swift_bridgeObjectRelease();
            v23(v46, v8);
            sub_10001CEB0(&v50, (uint64_t)v47);
            uint64_t v24 = v53;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            {
              sub_1000B7570(0, v24[2] + 1, 1);
              uint64_t v24 = v53;
            }
            unint64_t v26 = v24[2];
            unint64_t v25 = v24[3];
            if (v26 >= v25 >> 1) {
              sub_1000B7570(v25 > 1, v26 + 1, 1);
            }
            uint64_t v27 = v48;
            uint64_t v28 = v49;
            uint64_t v29 = sub_1000BD078((uint64_t)v47, v48);
            __chkstk_darwin(v29);
            uint64_t v31 = (char *)v33 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
            (*(void (**)(char *))(v32 + 16))(v31);
            sub_1006985B0(v26, (uint64_t)v31, (uint64_t *)&v53, v27, v28);
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v47);
            goto LABEL_6;
          }
          v20 += v43;
          if (!--v19) {
            goto LABEL_4;
          }
        }
      }
      else
      {
        uint64_t v16 = *v44;
        swift_bridgeObjectRetain();
LABEL_4:
        v16(v7, 1, 1, v8);
      }
      a2 = v36;
      swift_bridgeObjectRelease();
      (*v45)(v46, v8);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v50);
LABEL_6:
      uint64_t v14 = v38 + 1;
    }
    while (v38 + 1 != v37);
    return v53;
  }
  return result;
}

uint64_t sub_10047A83C(uint64_t result, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = result;
  uint64_t v8 = _swiftEmptyArrayStorage;
  uint64_t v36 = _swiftEmptyArrayStorage;
  uint64_t v31 = *(void *)(result + 16);
  if (v31)
  {
    uint64_t v9 = a6;
    uint64_t v11 = a3;
    uint64_t v12 = a2;
    unint64_t v13 = 0;
    uint64_t v14 = result + 32;
    uint64_t v8 = (void *)(a4 & 1);
    uint64_t v29 = result;
    uint64_t v30 = a6;
    uint64_t v27 = a2;
    uint64_t v28 = a3;
    HIDWORD(v26) = a4 & 1;
    while (v13 < *(void *)(v7 + 16))
    {
      sub_10001D010(v14, (uint64_t)v35);
      BOOL v15 = sub_10045F6B0(v35, v12, v11, (int)v8, a5, v9);
      if (v6)
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v35);
        swift_bridgeObjectRelease();
        swift_release();
        return (uint64_t)v8;
      }
      if (v15)
      {
        sub_10001CEB0(v35, (uint64_t)v32);
        uint64_t v16 = v36;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000B7570(0, v16[2] + 1, 1);
          uint64_t v16 = v36;
        }
        uint64_t v17 = a5;
        unint64_t v19 = v16[2];
        unint64_t v18 = v16[3];
        if (v19 >= v18 >> 1) {
          sub_1000B7570(v18 > 1, v19 + 1, 1);
        }
        uint64_t v20 = v33;
        uint64_t v21 = v34;
        uint64_t v22 = sub_1000BD078((uint64_t)v32, v33);
        __chkstk_darwin(v22);
        uint64_t v24 = (char *)&v26 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v25 + 16))(v24);
        sub_1006985B0(v19, (uint64_t)v24, (uint64_t *)&v36, v20, v21);
        uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v32);
        a5 = v17;
        uint64_t v7 = v29;
        uint64_t v9 = v30;
        uint64_t v12 = v27;
        uint64_t v11 = v28;
        uint64_t v8 = (void *)HIDWORD(v26);
      }
      else
      {
        uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v35);
      }
      ++v13;
      v14 += 40;
      if (v31 == v13)
      {
        uint64_t v8 = v36;
        goto LABEL_15;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return (uint64_t)v8;
  }
  return result;
}

void *sub_10047AA98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v58 = a3;
  uint64_t v6 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v6 - 8);
  uint64_t v66 = (char *)v54 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v62 = (char *)v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v68 = (char *)v54 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  BOOL v15 = (char *)v54 - v14;
  __chkstk_darwin(v13);
  uint64_t result = _swiftEmptyArrayStorage;
  uint64_t v78 = _swiftEmptyArrayStorage;
  uint64_t v59 = *(void *)(a1 + 16);
  if (v59)
  {
    v54[0] = v3;
    uint64_t v19 = 0;
    uint64_t v56 = a1 + 32;
    uint64_t v69 = a2 + 56;
    uint64_t v71 = v17 + 16;
    uint64_t v20 = (void (**)(char *, uint64_t))(v17 + 8);
    uint64_t v65 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
    uint64_t v63 = (unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
    uint64_t v55 = v17;
    int v61 = (void (**)(char *, char *, uint64_t))(v17 + 32);
    uint64_t v70 = (char *)v54 - v16;
    uint64_t v57 = a2;
    do
    {
      sub_10001D010(v56 + 40 * v19, (uint64_t)&v75);
      uint64_t v23 = v76;
      uint64_t v22 = v77;
      sub_10001CD44(&v75, v76);
      uint64_t v24 = v23;
      uint64_t v25 = v57;
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v22 + 8) + 8) + 32))(v24);
      uint64_t v26 = *(void *)(v25 + 16);
      uint64_t v60 = v19;
      if (v26
        && (sub_100482848(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID),
            uint64_t v27 = dispatch thunk of Hashable._rawHashValue(seed:)(),
            uint64_t v28 = -1 << *(unsigned char *)(v25 + 32),
            unint64_t v29 = v27 & ~v28,
            ((*(void *)(v69 + ((v29 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v29) & 1) != 0))
      {
        uint64_t v30 = ~v28;
        uint64_t v31 = *(void *)(v55 + 72);
        uint64_t v32 = *(void (**)(char *, unint64_t, uint64_t))(v55 + 16);
        do
        {
          v32(v15, *(void *)(v25 + 48) + v31 * v29, v8);
          sub_100482848((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
          char v33 = dispatch thunk of static Equatable.== infix(_:_:)();
          (*v20)(v15, v8);
          if (v33) {
            break;
          }
          unint64_t v29 = (v29 + 1) & v30;
        }
        while (((*(void *)(v69 + ((v29 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v29) & 1) != 0);
      }
      else
      {
        char v33 = 0;
      }
      uint64_t v34 = *v20;
      (*v20)(v70, v8);
      sub_10001D010((uint64_t)&v75, (uint64_t)v72);
      if (v33)
      {
        BOOL v67 = v34;
        uint64_t v36 = v73;
        uint64_t v35 = v74;
        sub_10001CD44(v72, v73);
        (*(void (**)(uint64_t))(*(void *)(*(void *)(v35 + 8) + 8) + 32))(v36);
        uint64_t v37 = *(void *)(v58 + 16);
        uint64_t v38 = v65;
        if (v37)
        {
          v54[1] = (unint64_t)v65 & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
          uint64_t v39 = v58 + ((*(unsigned __int8 *)(v55 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80));
          uint64_t v64 = *(void *)(v55 + 72);
          uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t))(v55 + 16);
          swift_bridgeObjectRetain();
          unint64_t v41 = v66;
          while (1)
          {
            v40(v41, v39, v8);
            uint64_t v42 = *v38;
            (*v38)(v41, 0, 1, v8);
            if ((*v63)(v41, 1, v8) == 1) {
              break;
            }
            uint64_t v43 = v62;
            (*v61)(v62, v41, v8);
            sub_100482848((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
            char v44 = dispatch thunk of static Equatable.== infix(_:_:)();
            v67(v43, v8);
            if (v44)
            {
              swift_bridgeObjectRelease();
              v67(v68, v8);
              _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v72);
              goto LABEL_4;
            }
            uint64_t v38 = v65;
            v39 += v64;
            --v37;
            unint64_t v41 = v66;
            if (!v37) {
              goto LABEL_21;
            }
          }
        }
        else
        {
          uint64_t v42 = *v65;
          swift_bridgeObjectRetain();
          unint64_t v41 = v66;
LABEL_21:
          v42(v41, 1, 1, v8);
        }
        swift_bridgeObjectRelease();
        v67(v68, v8);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v72);
        sub_10001CEB0(&v75, (uint64_t)v72);
        double v45 = v78;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000B7570(0, v45[2] + 1, 1);
          double v45 = v78;
        }
        unint64_t v47 = v45[2];
        unint64_t v46 = v45[3];
        if (v47 >= v46 >> 1) {
          sub_1000B7570(v46 > 1, v47 + 1, 1);
        }
        uint64_t v48 = v73;
        uint64_t v49 = v74;
        uint64_t v50 = sub_1000BD078((uint64_t)v72, v73);
        __chkstk_darwin(v50);
        uint64_t v52 = (char *)v54 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v53 + 16))(v52);
        sub_1006985B0(v47, (uint64_t)v52, (uint64_t *)&v78, v48, v49);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v72);
        uint64_t v21 = v60;
      }
      else
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v72);
LABEL_4:
        uint64_t v21 = v60;
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v75);
      }
      uint64_t v19 = v21 + 1;
    }
    while (v19 != v59);
    return v78;
  }
  return result;
}

void *sub_10047B1E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v50 = a3;
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v6 - 8);
  uint64_t v49 = (uint64_t)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v55 = (uint64_t)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v47 - v12;
  uint64_t result = _swiftEmptyArrayStorage;
  uint64_t v63 = _swiftEmptyArrayStorage;
  uint64_t v15 = *(void *)(a1 + 16);
  if (v15)
  {
    uint64_t v54 = v3;
    uint64_t v16 = a1 + 32;
    uint64_t v17 = (void (**)(char *, uint64_t))(v11 + 8);
    uint64_t v48 = a2;
    uint64_t v51 = v8;
    while (1)
    {
      sub_10001D010(v16, (uint64_t)&v60);
      uint64_t v18 = v61;
      uint64_t v19 = v62;
      sub_10001CD44(&v60, v61);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v19 + 8) + 8) + 32))(v18);
      if (!*(void *)(a2 + 16)) {
        break;
      }
      unint64_t v20 = sub_1007240CC((uint64_t)v13);
      if ((v21 & 1) == 0) {
        break;
      }
      uint64_t v22 = *(void *)(*(void *)(a2 + 56) + 8 * v20);
      uint64_t v23 = *v17;
      swift_bridgeObjectRetain();
      v23(v13, v8);
      uint64_t v24 = *(void *)(v22 + 16);
      swift_bridgeObjectRelease();
      sub_10001D010((uint64_t)&v60, (uint64_t)v57);
      if (v24) {
        goto LABEL_12;
      }
      uint64_t v52 = *(void *)(v50 + 280);
      uint64_t v25 = v58;
      uint64_t v26 = v59;
      sub_10001CD44(v57, v58);
      (*(void (**)(uint64_t))(*(void *)(v26[1] + 8) + 32))(v25);
      if (qword_101636CB8 != -1) {
        swift_once();
      }
      sub_10000588C(&qword_101655540);
      uint64_t v28 = v54;
      OS_dispatch_queue.sync<A>(execute:)();
      uint64_t v54 = v28;
      uint64_t v29 = v56;
      if (*(void *)(v56 + 16) && (unint64_t v30 = sub_1007240CC(v55), (v31 & 1) != 0))
      {
        uint64_t v53 = v23;
        uint64_t v32 = *(void *)(*(void *)(v29 + 56) + 8 * v30);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        char v33 = sub_1007100C0(v32);
        swift_bridgeObjectRelease();
        uint64_t v34 = (void *)sub_100B752E8((uint64_t)v33);
        swift_release();
      }
      else
      {
        uint64_t v53 = v23;
        swift_bridgeObjectRelease();
        uint64_t v34 = _swiftEmptyArrayStorage;
      }
      uint64_t v35 = v49;
      uint64_t v36 = v55;
      char v37 = sub_100AF7A38(v49, v55, v34, 1);
      swift_bridgeObjectRelease();
      uint64_t v8 = v51;
      v53((char *)v36, v51);
      sub_10001DAB4(v35, (uint64_t *)&unk_10163AC90);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v57);
      if ((v37 & 1) == 0)
      {
        sub_10001CEB0(&v60, (uint64_t)v57);
        uint64_t v38 = v63;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        a2 = v48;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          sub_1000B7570(0, v38[2] + 1, 1);
          uint64_t v38 = v63;
        }
        unint64_t v41 = v38[2];
        unint64_t v40 = v38[3];
        if (v41 >= v40 >> 1) {
          sub_1000B7570(v40 > 1, v41 + 1, 1);
        }
        uint64_t v42 = v58;
        uint64_t v53 = (void (*)(char *, uint64_t))v59;
        uint64_t v43 = sub_1000BD078((uint64_t)v57, v58);
        __chkstk_darwin(v43);
        double v45 = (char *)&v47 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
        (*(void (**)(char *))(v46 + 16))(v45);
        sub_1006985B0(v41, (uint64_t)v45, (uint64_t *)&v63, v42, (uint64_t)v53);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v57);
        uint64_t v8 = v51;
        goto LABEL_14;
      }
      a2 = v48;
LABEL_13:
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v60);
LABEL_14:
      v16 += 40;
      if (!--v15) {
        return v63;
      }
    }
    (*v17)(v13, v8);
    sub_10001D010((uint64_t)&v60, (uint64_t)v57);
LABEL_12:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v57);
    goto LABEL_13;
  }
  return result;
}

char *sub_10047B718(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v43 = sub_10000588C(&qword_101638CF0);
  uint64_t v6 = __chkstk_darwin(v43);
  uint64_t v42 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v33 - v8;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  unint64_t v41 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v44 = (char *)&v33 - v14;
  int64_t v15 = *(void *)(a1 + 16);
  uint64_t v16 = (char *)_swiftEmptyArrayStorage;
  if (v15)
  {
    unint64_t v40 = v9;
    double v45 = (char *)_swiftEmptyArrayStorage;
    sub_1000B7034(0, v15, 0);
    unint64_t v39 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    uint64_t v17 = (void (**)(char *, uint64_t))(a1 + v39);
    uint64_t v18 = *(void (***)(char *, uint64_t))(a2 + 280);
    uint64_t v37 = OBJC_IVAR____TtC12searchpartyd11BeaconStore_cachedBeaconRecordsQueueSynchronizer;
    uint64_t v38 = v18;
    uint64_t v19 = *(void *)(v11 + 72);
    uint64_t v35 = (void (**)(char *, char *, uint64_t))(v11 + 16);
    uint64_t v36 = v19;
    char v33 = (void (**)(char *, uint64_t))(v11 + 8);
    uint64_t v34 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
    unint64_t v20 = (void (**)(char *, char *, uint64_t))(v11 + 32);
    do
    {
      char v21 = v38;
      sub_100AD0D68();
      uint64_t v22 = swift_bridgeObjectRelease();
      __chkstk_darwin(v22);
      *(&v33 - 2) = v21;
      *(&v33 - 1) = v17;
      uint64_t v23 = v42;
      uint64_t v24 = v3;
      QueueSynchronizer.conditionalSync<A>(_:)();
      uint64_t v25 = (uint64_t)v23;
      uint64_t v26 = (uint64_t)v40;
      sub_10001D608(v25, (uint64_t)v40, &qword_101638CF0);
      uint64_t v27 = v41;
      (*v35)(v41, (char *)v17, v10);
      if ((*v34)(v26, 1, v10) == 1)
      {
        uint64_t v28 = *v20;
        (*v20)(v44, v27, v10);
        sub_10001DAB4(v26, &qword_101638CF0);
      }
      else
      {
        (*v33)(v27, v10);
        uint64_t v28 = *v20;
        (*v20)(v44, (char *)v26, v10);
      }
      uint64_t v16 = v45;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B7034(0, *((void *)v16 + 2) + 1, 1);
        uint64_t v16 = v45;
      }
      unint64_t v30 = *((void *)v16 + 2);
      unint64_t v29 = *((void *)v16 + 3);
      if (v30 >= v29 >> 1)
      {
        sub_1000B7034(v29 > 1, v30 + 1, 1);
        uint64_t v16 = v45;
      }
      *((void *)v16 + 2) = v30 + 1;
      uint64_t v31 = v36;
      v28(&v16[v39 + v30 * v36], v44, v10);
      double v45 = v16;
      uint64_t v17 = (void (**)(char *, uint64_t))((char *)v17 + v31);
      --v15;
      uint64_t v3 = v24;
    }
    while (v15);
  }
  return v16;
}

uint64_t sub_10047BAC8(uint64_t a1)
{
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t KeyPath = swift_getKeyPath();
  sub_100FCBD58(KeyPath, v7[0], v7);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v3 = v7[0];
  unint64_t v4 = v7[1];
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class))(a1 + 16))(a1, isa);

  return sub_10001CFB8(v3, v4);
}

void *sub_10047BBC4(uint64_t a1)
{
  uint64_t v2 = _swiftEmptyArrayStorage;
  uint64_t v19 = _swiftEmptyArrayStorage;
  uint64_t v3 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v3)
  {
    uint64_t v4 = a1 + 32;
    do
    {
      sub_10001D010(v4, (uint64_t)v18);
      if (sub_10044BA7C((uint64_t)v18))
      {
        sub_10001CEB0(v18, (uint64_t)v15);
        uint64_t v5 = v19;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000B7570(0, v5[2] + 1, 1);
          uint64_t v5 = v19;
        }
        unint64_t v7 = v5[2];
        unint64_t v6 = v5[3];
        if (v7 >= v6 >> 1) {
          sub_1000B7570(v6 > 1, v7 + 1, 1);
        }
        uint64_t v8 = v16;
        uint64_t v9 = v17;
        uint64_t v10 = sub_1000BD078((uint64_t)v15, v16);
        __chkstk_darwin(v10);
        uint64_t v12 = &v15[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
        (*(void (**)(unsigned char *))(v13 + 16))(v12);
        sub_1006985B0(v7, (uint64_t)v12, (uint64_t *)&v19, v8, v9);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v15);
      }
      else
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v18);
      }
      v4 += 40;
      --v3;
    }
    while (v3);
    uint64_t v2 = v19;
  }
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_10047BDB0(uint64_t a1)
{
  uint64_t v2 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(void *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1, 1, v5);
  unint64_t v7 = (void *)swift_allocObject();
  v7[2] = 0;
  uint64_t v7[3] = 0;
  v7[4] = a1;
  int v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5);
  swift_bridgeObjectRetain();
  if (v8 == 1)
  {
    sub_10001DAB4((uint64_t)v4, &qword_10164DBB0);
    uint64_t v9 = 0;
    uint64_t v10 = 0;
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
    if (v7[2])
    {
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v9 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v10 = v11;
      swift_unknownObjectRelease();
    }
    else
    {
      uint64_t v9 = 0;
      uint64_t v10 = 0;
    }
  }
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = &unk_101645748;
  *(void *)(v12 + 24) = v7;
  if (v10 | v9)
  {
    v14[0] = 0;
    v14[1] = 0;
    v14[2] = v9;
    v14[3] = v10;
  }
  swift_task_create();
  return swift_release();
}

uint64_t sub_10047BFF4(uint64_t a1, uint64_t a2, void (*a3)(id, void), uint64_t a4)
{
  uint64_t v209 = a4;
  int64_t v210 = a3;
  uint64_t v213 = a2;
  uint64_t v234 = type metadata accessor for UUID();
  uint64_t v228 = *(void *)(v234 - 8);
  uint64_t v5 = __chkstk_darwin(v234);
  unint64_t v7 = (unint64_t)&v201 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v201 - v9;
  __chkstk_darwin(v8);
  uint64_t v215 = (char *)&v201 - v11;
  uint64_t v12 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v12 - 8);
  uint64_t v208 = (char *)&v201 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000588C(&qword_1016456F8);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v219 = (char *)&v201 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v18 = (uint64_t)&v201 - v17;
  uint64_t v226 = type metadata accessor for Date();
  uint64_t v227 = *(void *)(v226 - 8);
  uint64_t v19 = __chkstk_darwin(v226);
  uint64_t v223 = (char *)&v201 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  unint64_t v225 = (char *)&v201 - v21;
  uint64_t v22 = sub_10000588C((uint64_t *)&unk_101653D50);
  __chkstk_darwin(v22 - 8);
  id v229 = (char *)&v201 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v231 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v204 = *(void *)(v231 - 8);
  __chkstk_darwin(v231);
  uint64_t v224 = (uint64_t *)((char *)&v201 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t Configuration = type metadata accessor for LocationFetchConfiguration();
  uint64_t v206 = *(void *)(Configuration - 8);
  uint64_t v25 = __chkstk_darwin(Configuration);
  uint64_t v216 = (uint64_t)&v201 - (((unint64_t)v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v214 = v26;
  __chkstk_darwin(v25);
  unint64_t v28 = (unint64_t)&v201 - v27;
  if (qword_101636B10 == -1) {
    goto LABEL_2;
  }
LABEL_144:
  swift_once();
LABEL_2:
  uint64_t v29 = type metadata accessor for Logger();
  uint64_t v30 = sub_100010324(v29, (uint64_t)qword_10170DEB8);
  sub_10048250C(a1);
  sub_10048250C(a1);
  uint64_t v233 = v30;
  uint64_t v31 = Logger.logObject.getter();
  os_log_type_t v32 = static os_log_type_t.default.getter();
  BOOL v33 = os_log_type_enabled(v31, v32);
  uint64_t v212 = (unsigned char *)v28;
  uint64_t v220 = (char *)v18;
  if (v33)
  {
    uint64_t v34 = (uint8_t *)swift_slowAlloc();
    *(void *)&long long aBlock = swift_slowAlloc();
    *(_DWORD *)uint64_t v34 = 136446210;
    v232 = (char *)(v34 + 4);
    sub_10048250C(a1);
    uint64_t v35 = sub_10113AD2C();
    unint64_t v37 = v36;
    sub_10048257C(a1);
    uint64_t v243 = sub_1008FA0F0(v35, v37, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10048257C(a1);
    sub_10048257C(a1);
    _os_log_impl((void *)&_mh_execute_header, v31, v32, "One-shot location request with context %{public}s.", v34, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10048257C(a1);
    sub_10048257C(a1);
  }

  uint64_t v38 = v213;
  swift_retain();
  sub_10000588C(&qword_101639158);
  unsafeFromAsyncTask<A>(_:)();
  swift_release();
  uint64_t v207 = aBlock;
  id v211 = [self currentConnection];
  LODWORD(v218) = *(unsigned __int8 *)a1;
  uint64_t v39 = (uint64_t)v219;
  if (v218 == 2)
  {
    sub_100A6B254();
    sub_1008C065C();
  }
  uint64_t v40 = *(void *)(*(void *)(a1 + 8) + 16);
  uint64_t v221 = a1;
  if (v40)
  {
    swift_retain();
    uint64_t v41 = swift_bridgeObjectRetain();
    uint64_t v42 = 0;
    uint64_t v43 = sub_10047B718(v41, v38);
    swift_bridgeObjectRelease();
    swift_release();
    swift_retain();
    uint64_t v44 = sub_100478FA0((uint64_t)v43, v38);
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v45 = swift_bridgeObjectRetain();
    uint64_t v46 = sub_1011591E8(v45);
    swift_bridgeObjectRelease();
    uint64_t v47 = sub_100659D50((uint64_t)v44, v46, 0, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    int64_t v48 = v47[2];
    if (v48)
    {
      v232 = 0;
      uint64_t v243 = (uint64_t)_swiftEmptyArrayStorage;
      sub_1000B7034(0, v48, 0);
      uint64_t v49 = (uint64_t)(v47 + 4);
      a1 = v243;
      do
      {
        sub_10001D010(v49, (uint64_t)&aBlock);
        uint64_t v50 = v237;
        uint64_t v51 = v238;
        sub_10001CD44(&aBlock, (uint64_t)v237);
        (*(void (**)(void *))(*(void *)(*((void *)v51 + 1) + 8) + 32))(v50);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&aBlock);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000B7034(0, *(void *)(a1 + 16) + 1, 1);
          a1 = v243;
        }
        unint64_t v53 = *(void *)(a1 + 16);
        unint64_t v52 = *(void *)(a1 + 24);
        if (v53 >= v52 >> 1)
        {
          sub_1000B7034(v52 > 1, v53 + 1, 1);
          a1 = v243;
        }
        *(void *)(a1 + 16) = v53 + 1;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v228 + 32))(a1+ ((*(unsigned __int8 *)(v228 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v228 + 80))+ *(void *)(v228 + 72) * v53, v7, v234);
        uint64_t v243 = a1;
        v49 += 40;
        --v48;
      }
      while (v48);
      swift_bridgeObjectRelease();
      uint64_t v42 = v232;
      goto LABEL_27;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v54 = sub_100AD2AD4();
    uint64_t v55 = swift_bridgeObjectRetain();
    uint64_t v56 = sub_1011591E8(v55);
    swift_bridgeObjectRelease();
    uint64_t v57 = sub_100659D50(v54, v56, 0, 0);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    int64_t v58 = v57[2];
    if (v58)
    {
      uint64_t v243 = (uint64_t)_swiftEmptyArrayStorage;
      sub_1000B7034(0, v58, 0);
      uint64_t v59 = (uint64_t)(v57 + 4);
      a1 = v243;
      do
      {
        sub_10001D010(v59, (uint64_t)&aBlock);
        long long v60 = v237;
        uint64_t v61 = v238;
        sub_10001CD44(&aBlock, (uint64_t)v237);
        (*(void (**)(void *))(*(void *)(*((void *)v61 + 1) + 8) + 32))(v60);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&aBlock);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000B7034(0, *(void *)(a1 + 16) + 1, 1);
          a1 = v243;
        }
        unint64_t v63 = *(void *)(a1 + 16);
        unint64_t v62 = *(void *)(a1 + 24);
        if (v63 >= v62 >> 1)
        {
          sub_1000B7034(v62 > 1, v63 + 1, 1);
          a1 = v243;
        }
        *(void *)(a1 + 16) = v63 + 1;
        (*(void (**)(unint64_t, char *, uint64_t))(v228 + 32))(a1+ ((*(unsigned __int8 *)(v228 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v228 + 80))+ *(void *)(v228 + 72) * v63, v10, v234);
        uint64_t v243 = a1;
        v59 += 40;
        --v58;
      }
      while (v58);
      swift_bridgeObjectRelease();
      uint64_t v42 = 0;
      goto LABEL_27;
    }
    swift_bridgeObjectRelease();
    uint64_t v42 = 0;
  }
  a1 = (uint64_t)_swiftEmptyArrayStorage;
LABEL_27:
  uint64_t v217 = *(void *)(v221 + 32);
  uint64_t v64 = v213;
  swift_retain();
  uint64_t v65 = swift_bridgeObjectRetain();
  uint64_t v66 = sub_1004792DC(v65, v64);
  v222 = v42;
  swift_bridgeObjectRelease();
  swift_release();
  BOOL v67 = sub_10047BBC4((uint64_t)v66);
  swift_bridgeObjectRelease();
  uint64_t v68 = v212;
  uint64_t v69 = sub_10113A364(v218, (uint64_t)v212);
  BOOL v70 = v68[1] == 1;
  uint64_t v71 = (uint64_t)v220;
  uint64_t v230 = a1;
  unint64_t v7 = v231;
  if (!v70) {
    goto LABEL_45;
  }
  uint64_t v72 = _swiftEmptyArrayStorage;
  v242[0] = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v18 = v67[2];
  swift_bridgeObjectRetain();
  v232 = (char *)v18;
  if (!v18) {
    goto LABEL_44;
  }
  unint64_t v28 = 0;
  uint64_t v73 = (uint64_t)(v67 + 4);
  uint64_t v74 = (void (**)(char *, void, uint64_t, unint64_t))(v204 + 56);
  uint64_t v10 = v229;
  do
  {
    if (v28 >= v67[2]) {
      goto LABEL_143;
    }
    uint64_t v18 = (uint64_t)v67;
    sub_10001D010(v73, (uint64_t)&aBlock);
    sub_10001D010((uint64_t)&aBlock, (uint64_t)&v243);
    sub_10000588C((uint64_t *)&unk_10164DBF0);
    char v75 = swift_dynamicCast();
    uint64_t v76 = *v74;
    if (v75)
    {
      v76(v10, 0, 1, v7);
      uint64_t v77 = (uint64_t)v224;
      sub_100485510((uint64_t)v10, (uint64_t)v224, type metadata accessor for SharedBeaconRecord);
      int v78 = *(unsigned __int8 *)(v77 + *(int *)(v7 + 64));
      sub_100485AFC(v77, type metadata accessor for SharedBeaconRecord);
      if (v78 != 1)
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&aBlock);
        goto LABEL_32;
      }
    }
    else
    {
      v76(v10, 1, 1, v7);
      sub_10001DAB4((uint64_t)v10, (uint64_t *)&unk_101653D50);
    }
    sub_10001CEB0(&aBlock, (uint64_t)&v243);
    uint64_t v79 = v242[0];
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_1000B7570(0, *(void *)(v79 + 16) + 1, 1);
      uint64_t v79 = v242[0];
    }
    unint64_t v81 = *(void *)(v79 + 16);
    unint64_t v80 = *(void *)(v79 + 24);
    if (v81 >= v80 >> 1) {
      sub_1000B7570(v80 > 1, v81 + 1, 1);
    }
    uint64_t v82 = v244;
    uint64_t v83 = (uint64_t)v245;
    uint64_t v84 = sub_1000BD078((uint64_t)&v243, v244);
    __chkstk_darwin(v84);
    unint64_t v86 = (char *)&v201 - ((v85 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *))(v87 + 16))(v86);
    sub_1006985B0(v81, (uint64_t)v86, v242, v82, v83);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v243);
    a1 = v230;
    uint64_t v10 = v229;
    unint64_t v7 = v231;
LABEL_32:
    ++v28;
    v73 += 40;
    BOOL v67 = (void *)v18;
  }
  while (v232 != (char *)v28);
  uint64_t v72 = (void *)v242[0];
  uint64_t v64 = v213;
  uint64_t v68 = v212;
  uint64_t v71 = (uint64_t)v220;
LABEL_44:
  swift_bridgeObjectRelease();
  sub_10044E19C((uint64_t)v72);
  uint64_t v69 = swift_release();
LABEL_45:
  if (*v68 != 1)
  {
    swift_bridgeObjectRelease();
    uint64_t Configuration = 0;
    uint64_t v206 = 0;
LABEL_59:
    uint64_t v116 = v225;
    uint64_t v117 = static Date.distantPast.getter();
    __chkstk_darwin(v117);
    uint64_t v118 = v217;
    *(&v201 - 4) = v64;
    *(&v201 - 3) = v118;
    *(&v201 - 2) = (uint64_t)v116;
    unint64_t v7 = v230;
    swift_bridgeObjectRetain();
    os_log_t v119 = v222;
    uint64_t v120 = sub_1000D137C((uint64_t)_swiftEmptyDictionarySingleton, (void (*)(uint64_t *, char *))sub_100485D94, (uint64_t)(&v201 - 6), v7);
    swift_bridgeObjectRelease_n();
    uint64_t v121 = *(char **)(v227 + 8);
    v227 += 8;
    v222 = v121;
    ((void (*)(char *, uint64_t))v121)(v116, v226);
    v247 = _swiftEmptyDictionarySingleton;
    swift_retain();
    uint64_t v122 = sub_100478CC8((uint64_t)_swiftEmptyDictionarySingleton, v120, v64, (uint64_t *)&v247);
    v232 = v119;
    swift_release();
    uint64_t v246 = v122;
    swift_bridgeObjectRelease();
    uint64_t v123 = v221;
    if (*(unsigned char *)(v221 + 56) & 1) != 0 || (*(unsigned char *)(v221 + 57))
    {
      sub_10048250C(v221);
      sub_10048250C(v123);
      if (v211)
      {
        id v124 = v211;
        uint64_t v125 = Logger.logObject.getter();
        unint64_t v7 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v125, (os_log_type_t)v7))
        {
          uint64_t v126 = swift_slowAlloc();
          *(void *)&long long aBlock = swift_slowAlloc();
          *(_DWORD *)uint64_t v126 = 141558275;
          uint64_t v243 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v126 + 12) = 2081;
          if (*(void *)(v123 + 48))
          {
            uint64_t v127 = *(void *)(v123 + 40);
            unint64_t v128 = *(void *)(v123 + 48);
          }
          else
          {
            uint64_t v127 = 0x6E776F6E6B6E75;
            unint64_t v128 = 0xE700000000000000;
          }
          swift_bridgeObjectRetain();
          uint64_t v243 = sub_1008FA0F0(v127, v128, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10048257C(v123);
          sub_10048257C(v123);
          _os_log_impl((void *)&_mh_execute_header, v125, (os_log_type_t)v7, "Subscribing context for %{private,mask.hash}s.", (uint8_t *)v126, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          uint64_t v134 = v213;
          uint64_t v39 = (uint64_t)v219;
          uint64_t v71 = (uint64_t)v220;
        }
        else
        {
          sub_10048257C(v123);
          sub_10048257C(v123);

          uint64_t v134 = v213;
        }
        uint64_t v135 = *(void *)(v134 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_locationFetchService);
        sub_100474C70(v124, v123);
        type metadata accessor for Transaction();
        uint64_t v136 = swift_allocObject();
        *(void *)(v136 + 16) = v135;
        long long v137 = *(_OWORD *)(v123 + 48);
        *(_OWORD *)(v136 + 56) = *(_OWORD *)(v123 + 32);
        *(_OWORD *)(v136 + 72) = v137;
        *(_OWORD *)(v136 + 88) = *(_OWORD *)(v123 + 64);
        *(_OWORD *)(v136 + 97) = *(_OWORD *)(v123 + 73);
        long long v138 = *(_OWORD *)(v123 + 16);
        *(_OWORD *)(v136 + 24) = *(_OWORD *)v123;
        *(_OWORD *)(v136 + 40) = v138;
        sub_10048250C(v123);
        swift_retain();
        static Transaction.asyncTask(name:block:)();

        swift_release();
      }
      else
      {
        uint64_t v129 = Logger.logObject.getter();
        os_log_type_t v130 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v129, v130))
        {
          uint64_t v131 = swift_slowAlloc();
          unint64_t v7 = swift_slowAlloc();
          *(void *)&long long aBlock = v7;
          *(_DWORD *)uint64_t v131 = 141558531;
          uint64_t v243 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v131 + 12) = 2081;
          if (*(void *)(v123 + 48))
          {
            uint64_t v132 = *(void *)(v123 + 40);
            unint64_t v133 = *(void *)(v123 + 48);
          }
          else
          {
            uint64_t v132 = 0x6E776F6E6B6E75;
            unint64_t v133 = 0xE700000000000000;
          }
          swift_bridgeObjectRetain();
          uint64_t v243 = sub_1008FA0F0(v132, v133, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10048257C(v123);
          sub_10048257C(v123);
          *(_WORD *)(v131 + 22) = 2080;
          uint64_t v243 = 0;
          sub_10000588C(&qword_101645728);
          uint64_t v139 = String.init<A>(describing:)();
          uint64_t v243 = sub_1008FA0F0(v139, v140, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v129, v130, "Did not subscribe context for %{private,mask.hash}s,\nconnection: %s. No connection.", (uint8_t *)v131, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          uint64_t v39 = (uint64_t)v219;
          uint64_t v71 = (uint64_t)v220;
        }
        else
        {
          sub_10048257C(v123);
          sub_10048257C(v123);
        }
      }
    }
    uint64_t v141 = v247[8];
    v214 = v247 + 8;
    uint64_t v142 = 1 << *((unsigned char *)v247 + 32);
    uint64_t v143 = -1;
    if (v142 < 64) {
      uint64_t v143 = ~(-1 << v142);
    }
    a1 = v143 & v141;
    unint64_t v28 = (unint64_t)(v142 + 63) >> 6;
    uint64_t v217 = v228 + 16;
    uint64_t v221 = v228 + 8;
    long long v202 = (char *)(v28 - 1);
    uint64_t v144 = swift_bridgeObjectRetain();
    uint64_t v18 = 0;
    uint64_t v216 = v28;
    long long v203 = (char *)(v28 - 5);
    uint64_t v10 = (char *)&qword_101645710;
    uint64_t v218 = v144;
    uint64_t v204 = v144 + 104;
    if (!a1)
    {
LABEL_83:
      uint64_t v150 = v18 + 1;
      if (__OFADD__(v18, 1)) {
        goto LABEL_142;
      }
      if (v150 < v216)
      {
        unint64_t v151 = v214[v150];
        if (v151)
        {
LABEL_86:
          a1 = (v151 - 1) & v151;
          unint64_t v146 = __clz(__rbit64(v151)) + (v150 << 6);
          uint64_t v18 = v150;
          goto LABEL_82;
        }
        if (v18 + 2 >= v216)
        {
          ++v18;
        }
        else
        {
          unint64_t v151 = v214[v18 + 2];
          if (v151)
          {
            uint64_t v150 = v18 + 2;
            goto LABEL_86;
          }
          if (v18 + 3 >= v216)
          {
            v18 += 2;
          }
          else
          {
            unint64_t v151 = v214[v18 + 3];
            if (v151)
            {
              uint64_t v150 = v18 + 3;
              goto LABEL_86;
            }
            uint64_t v150 = v18 + 4;
            if (v18 + 4 >= v216)
            {
              v18 += 3;
            }
            else
            {
              unint64_t v151 = v214[v150];
              if (v151) {
                goto LABEL_86;
              }
              while (v203 != (char *)v18)
              {
                unint64_t v151 = *(void *)(v204 + 8 * v18++);
                if (v151)
                {
                  uint64_t v150 = v18 + 4;
                  goto LABEL_86;
                }
              }
              uint64_t v18 = (uint64_t)v202;
            }
          }
        }
      }
      uint64_t v152 = sub_10000588C(&qword_101645710);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v152 - 8) + 56))(v39, 1, 1, v152);
      a1 = 0;
      goto LABEL_92;
    }
    while (1)
    {
      unint64_t v145 = __clz(__rbit64(a1));
      a1 &= a1 - 1;
      unint64_t v146 = v145 | (v18 << 6);
LABEL_82:
      uint64_t v147 = v218;
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v228 + 16))(v39, *(void *)(v218 + 48) + *(void *)(v228 + 72) * v146, v234);
      uint64_t v148 = *(void *)(v147 + 56) + 40 * v146;
      uint64_t v149 = sub_10000588C(&qword_101645710);
      sub_10001D010(v148, v39 + *(int *)(v149 + 48));
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v149 - 8) + 56))(v39, 0, 1, v149);
LABEL_92:
      sub_10001D608(v39, v71, &qword_1016456F8);
      uint64_t v153 = sub_10000588C(&qword_101645710);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v153 - 8) + 48))(v71, 1, v153) == 1)
      {
        swift_release();
        id v195 = objc_allocWithZone((Class)SPLocationFetchResult);
        sub_10001D4B0(0, (unint64_t *)&qword_101638DB0);
        sub_100482848(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
        swift_bridgeObjectRetain();
        Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
        id v197 = [v195 initWithResults:isa];

        v210(v197, 0);
        swift_bridgeObjectRelease();

        uint64_t v198 = type metadata accessor for TaskPriority();
        uint64_t v199 = (uint64_t)v208;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v198 - 8) + 56))(v208, 1, 1, v198);
        long long v200 = (void *)swift_allocObject();
        v200[2] = 0;
        v200[3] = 0;
        v200[4] = v213;
        swift_retain();
        sub_1008F5E44(v199, (uint64_t)&unk_101645880, (uint64_t)v200);

        swift_release();
        swift_release();
        sub_100485AFC((uint64_t)v212, (uint64_t (*)(void))type metadata accessor for LocationFetchConfiguration);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return sub_1000A1534(Configuration);
      }
      uint64_t v230 = a1;
      *(void *)&long long v231 = v18;
      sub_10001CEB0((long long *)(v71 + *(int *)(v153 + 48)), (uint64_t)&aBlock);
      uint64_t v154 = v237;
      uint64_t v155 = v238;
      sub_10001CD44(&aBlock, (uint64_t)v237);
      uint64_t v156 = (*((uint64_t (**)(void *, uint64_t (*)()))v155 + 2))(v154, v155);
      uint64_t v10 = v232;
      unint64_t v7 = sub_10044A6F4(v156, &v246);
      v232 = v10;
      swift_bridgeObjectRelease();
      unint64_t v28 = v7 >> 62;
      if (v7 >> 62)
      {
        swift_bridgeObjectRetain();
        if (!_CocoaArrayWrapper.endIndex.getter()) {
          goto LABEL_79;
        }
LABEL_95:
        id v229 = (char *)(v7 & 0xC000000000000001);
        if ((v7 & 0xC000000000000001) != 0)
        {
          uint64_t v158 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else
        {
          if (!*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_141;
          }
          uint64_t v158 = (char *)*(id *)(v7 + 32);
        }
        uint64_t v18 = (uint64_t)v158;
        swift_bridgeObjectRelease();
        if (v28)
        {
          swift_bridgeObjectRetain();
          uint64_t v159 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v159 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        uint64_t v160 = v237;
        uint64_t v161 = v238;
        sub_10001CD44(&aBlock, (uint64_t)v237);
        if (v159 != (*((unsigned __int8 (**)(void *, uint64_t (*)()))v161 + 3))(v160, v161))
        {

          swift_bridgeObjectRelease();
LABEL_124:
          uint64_t v39 = (uint64_t)v219;
          uint64_t v71 = (uint64_t)v220;
          goto LABEL_80;
        }
        if (v28)
        {
          swift_bridgeObjectRetain();
          uint64_t v164 = (char *)(id)v18;
          uint64_t v162 = _CocoaArrayWrapper.endIndex.getter();
          if (v162)
          {
LABEL_107:
            unint64_t v28 = 4;
            uint64_t v224 = (void *)v162;
            while (1)
            {
              id v165 = v229 ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)() : *(id *)(v7 + 8 * v28);
              char v166 = v165;
              if (__OFADD__(v28 - 4, 1)) {
                break;
              }
              uint64_t v233 = v28 - 3;
              uint64_t v244 = sub_10001D4B0(0, (unint64_t *)&qword_101638DB0);
              v245 = &off_101609190;
              uint64_t v243 = v18;
              a1 = v18;
              uint64_t v167 = (char *)(id)v18;
              id v168 = [v166 timestamp];
              os_log_type_t v169 = v225;
              static Date._unconditionallyBridgeFromObjectiveC(_:)();

              id v170 = [v167 timestamp];
              uint64_t v171 = v223;
              static Date._unconditionallyBridgeFromObjectiveC(_:)();

              LOBYTE(v170) = static Date.== infix(_:_:)();
              uint64_t v172 = v171;
              uint64_t v10 = (char *)v226;
              uint64_t v173 = v222;
              ((void (*)(char *, uint64_t))v222)(v172, v226);
              ((void (*)(char *, char *))v173)(v169, v10);
              sub_10001D010((uint64_t)&v243, (uint64_t)v242);
              if ((v170 & 1) == 0)
              {
                _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v242);
                sub_10001D010((uint64_t)&v243, (uint64_t)v241);
LABEL_120:
                _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v241);
                sub_10001D010((uint64_t)&v243, (uint64_t)v240);
LABEL_121:
                _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v240);
                _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v243);
                swift_bridgeObjectRelease_n();

LABEL_123:
                goto LABEL_124;
              }
              id v174 = v166;
              [v174 longitude];
              double v176 = v175;
              [*sub_10001CD44(v242, v242[3]) longitude];
              double v178 = v177;

              _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v242);
              sub_10001D010((uint64_t)&v243, (uint64_t)v241);
              if (v176 != v178) {
                goto LABEL_120;
              }
              id v179 = v174;
              [v179 latitude];
              double v181 = v180;
              [*sub_10001CD44(v241, v241[3]) latitude];
              double v183 = v182;

              _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v241);
              sub_10001D010((uint64_t)&v243, (uint64_t)v240);
              if (v181 != v183) {
                goto LABEL_121;
              }
              id v184 = v179;
              [v184 horizontalAccuracy];
              double v186 = v185;
              [*sub_10001CD44(v240, v240[3]) horizontalAccuracy];
              double v188 = v187;

              _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v240);
              _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v243);

              if (v186 != v188)
              {

                swift_bridgeObjectRelease_n();
                goto LABEL_123;
              }
              ++v28;
              if ((void *)v233 == v224) {
                goto LABEL_117;
              }
            }
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
            goto LABEL_144;
          }
        }
        else
        {
          uint64_t v162 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
          swift_bridgeObjectRetain();
          uint64_t v163 = (char *)(id)v18;
          if (v162) {
            goto LABEL_107;
          }
        }
LABEL_117:

        swift_bridgeObjectRelease_n();
        double v189 = v237;
        unint64_t v7 = (unint64_t)v238;
        sub_10001CD44(&aBlock, (uint64_t)v237);
        uint64_t v190 = (uint64_t)v215;
        (*(void (**)(void *, unint64_t))(v7 + 8))(v189, v7);
        os_log_t v191 = (char *)(id)v18;
        uint64_t v192 = v246;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v243 = v192;
        sub_10016BA48((uint64_t)v191, v190, isUniquelyReferenced_nonNull_native);
        uint64_t v246 = v243;
        swift_bridgeObjectRelease();
        unint64_t v28 = *(void *)v221;
        uint64_t v194 = v234;
        (*(void (**)(uint64_t, uint64_t))v221)(v190, v234);

        uint64_t v71 = (uint64_t)v220;
        ((void (*)(char *, uint64_t))v28)(v220, v194);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&aBlock);
        uint64_t v39 = (uint64_t)v219;
        uint64_t v10 = (char *)&qword_101645710;
        uint64_t v18 = v231;
        a1 = v230;
        if (!v230) {
          goto LABEL_83;
        }
      }
      else
      {
        uint64_t v157 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
        swift_bridgeObjectRetain();
        if (v157) {
          goto LABEL_95;
        }
LABEL_79:
        swift_bridgeObjectRelease_n();
LABEL_80:
        uint64_t v10 = (char *)&qword_101645710;
        uint64_t v18 = v231;
        a1 = v230;
        (*(void (**)(uint64_t, uint64_t))v221)(v71, v234);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&aBlock);
        if (!a1) {
          goto LABEL_83;
        }
      }
    }
  }
  __chkstk_darwin(v69);
  uint64_t v88 = v217;
  *(&v201 - 4) = v64;
  *(&v201 - 3) = v88;
  *(&v201 - 2) = v89;
  swift_bridgeObjectRetain();
  uint64_t v90 = v222;
  uint64_t v91 = sub_1000D137C((uint64_t)_swiftEmptyDictionarySingleton, (void (*)(uint64_t *, char *))sub_100485D94, (uint64_t)(&v201 - 6), a1);
  swift_bridgeObjectRelease();
  if (v218)
  {
    swift_retain();
    BOOL v67 = sub_10047B1E4((uint64_t)v67, v91, v64);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v64 = v213;
    uint64_t v92 = v67[2];
    if (!v92) {
      goto LABEL_57;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v92 = v67[2];
    if (!v92) {
      goto LABEL_57;
    }
  }
  v222 = v90;
  uint64_t v93 = (uint64_t)(v67 + 4);
  v232 = (char *)(v228 + 8);
  uint64_t v224 = v67;
  swift_bridgeObjectRetain_n();
  *(void *)&long long v94 = 141558275;
  long long v231 = v94;
  id v229 = (char *)&type metadata for Any + 8;
  uint64_t v95 = v234;
  do
  {
    sub_10001D010(v93, (uint64_t)&aBlock);
    sub_10001D010((uint64_t)&aBlock, (uint64_t)&v243);
    uint64_t v96 = Logger.logObject.getter();
    os_log_type_t v97 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v96, v97))
    {
      uint64_t v98 = swift_slowAlloc();
      v242[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v98 = v231;
      *(void *)(v98 + 4) = 1752392040;
      *(_WORD *)(v98 + 12) = 2081;
      uint64_t v100 = v244;
      uint64_t v99 = v245;
      sub_10001CD44(&v243, v244);
      uint64_t v101 = v215;
      (*(void (**)(uint64_t))(*((void *)v99[1] + 1) + 32))(v100);
      sub_100482848((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v102 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v104 = v103;
      uint64_t v105 = v101;
      uint64_t v39 = (uint64_t)v219;
      (*(void (**)(char *, uint64_t))v232)(v105, v95);
      *(void *)(v98 + 14) = sub_1008FA0F0(v102, v104, v242);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v243);
      _os_log_impl((void *)&_mh_execute_header, v96, v97, "One-shot location fetching ACSN for beacon without recent location: %{private,mask.hash}s.", (uint8_t *)v98, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v71 = (uint64_t)v220;
      swift_slowDealloc();
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v243);
    }

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&aBlock);
    v93 += 40;
    --v92;
  }
  while (v92);
  BOOL v67 = v224;
  swift_bridgeObjectRelease_n();
  uint64_t v64 = v213;
  uint64_t v90 = v222;
LABEL_57:
  uint64_t v106 = *(NSObject **)(v64 + 88);
  uint64_t v107 = v216;
  sub_100485A94((uint64_t)v212, v216, (uint64_t (*)(void))type metadata accessor for LocationFetchConfiguration);
  unint64_t v108 = (*(unsigned __int8 *)(v206 + 80) + 128) & ~(unint64_t)*(unsigned __int8 *)(v206 + 80);
  uint64_t v109 = swift_allocObject();
  uint64_t v110 = (_OWORD *)v221;
  long long v111 = *(_OWORD *)(v221 + 48);
  *(_OWORD *)(v109 + 48) = *(_OWORD *)(v221 + 32);
  *(_OWORD *)(v109 + 64) = v111;
  *(_OWORD *)(v109 + 80) = v110[4];
  *(_OWORD *)(v109 + 89) = *(_OWORD *)((char *)v110 + 73);
  long long v112 = v110[1];
  *(_OWORD *)(v109 + 16) = *v110;
  *(_OWORD *)(v109 + 32) = v112;
  *(void *)(v109 + 112) = v64;
  *(void *)(v109 + 120) = v67;
  sub_100485510(v107, v109 + v108, (uint64_t (*)(void))type metadata accessor for LocationFetchConfiguration);
  uint64_t v113 = swift_allocObject();
  uint64_t Configuration = (uint64_t)sub_100482834;
  *(void *)(v113 + 16) = sub_100482834;
  *(void *)(v113 + 24) = v109;
  uint64_t v206 = v109;
  uint64_t v238 = sub_1003B7AE0;
  uint64_t v239 = v113;
  *(void *)&long long aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256;
  v236 = sub_1000A70B0;
  v237 = &unk_1015C4790;
  uint64_t v114 = _Block_copy(&aBlock);
  sub_10048250C((uint64_t)v110);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v106, v114);
  _Block_release(v114);
  LOBYTE(v106) = swift_isEscapingClosureAtFileLocation();
  uint64_t result = swift_release();
  if ((v106 & 1) == 0)
  {
    v222 = v90;
    uint64_t v64 = v213;
    goto LABEL_59;
  }
  __break(1u);
  return result;
}

void sub_10047E3DC(uint64_t a1, char **a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = &v20[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  uint64_t v12 = &v20[-v11];
  static SystemInfo.lockState.getter();
  (*(void (**)(unsigned char *, void, uint64_t))(v7 + 104))(v10, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v6);
  sub_100482848((unint64_t *)&qword_1016429C8, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  char v13 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v14 = *(void (**)(unsigned char *, uint64_t))(v7 + 8);
  v14(v10, v6);
  v14(v12, v6);
  if (v13)
  {
    type metadata accessor for SPOwnerSessionError(0);
    uint64_t v15 = 16;
  }
  else
  {
    sub_100ACCD98(a1, (uint64_t)&v21);
    if (v22)
    {
      sub_10001CEB0(&v21, (uint64_t)v23);
      sub_100667370(a2, v23, &v21);
      uint64_t v19 = (void *)v21;
      (*(void (**)(uint64_t, void, void))(a3 + 16))(a3, v21, 0);

      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v23);
      return;
    }
    sub_10001DAB4((uint64_t)&v21, (uint64_t *)&unk_10163BBE0);
    type metadata accessor for SPOwnerSessionError(0);
    uint64_t v15 = 2;
  }
  *(void *)&long long v21 = v15;
  sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
  sub_100482848(&qword_101638460, type metadata accessor for SPOwnerSessionError);
  _BridgedStoredNSError.init(_:userInfo:)();
  uint64_t v17 = (void *)v23[0];
  uint64_t v18 = (void *)_convertErrorToNSError(_:)();
  (*(void (**)(uint64_t, void, void *))(a3 + 16))(a3, 0, v18);
}

void sub_10047E6F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v18 - v10;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v9, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v5);
  sub_100482848((unint64_t *)&qword_1016429C8, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  char v12 = dispatch thunk of static Equatable.== infix(_:_:)();
  char v13 = *(void (**)(char *, uint64_t))(v6 + 8);
  v13(v9, v5);
  v13(v11, v5);
  if (v12)
  {
    type metadata accessor for SPOwnerSessionError(0);
    *(void *)&long long v18 = 16;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100482848(&qword_101638460, type metadata accessor for SPOwnerSessionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v14 = (void *)v20[0];
    uint64_t v15 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void, void *))(a3 + 16))(a3, 0, v15);
  }
  else
  {
    sub_100AF03FC(a1, (uint64_t)&v18);
    if (v19)
    {
      sub_10001CEB0(&v18, (uint64_t)v20);
      uint64_t v16 = (void *)sub_100AE7384((uint64_t)v20);
      sub_10065A0B4((uint64_t)v20);
      type metadata accessor for SPBeaconTaskName(0);
      sub_10001D4B0(0, &qword_101653D80);
      sub_100482848(&qword_1016387E0, type metadata accessor for SPBeaconTaskName);
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v16 setTaskInformation:isa];

      (*(void (**)(uint64_t, void *, void))(a3 + 16))(a3, v16, 0);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v20);
      return;
    }
    sub_10001DAB4((uint64_t)&v18, (uint64_t *)&unk_10164E7C0);
    type metadata accessor for SPOwnerSessionError(0);
    *(void *)&long long v18 = 17;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100482848(&qword_101638460, type metadata accessor for SPOwnerSessionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v14 = (void *)v20[0];
    uint64_t v15 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void, void *))(a3 + 16))(a3, 0, v15);
  }
}

void sub_10047EAC8(uint64_t a1, uint64_t a2, void (**a3)(void, void))
{
  uint64_t v6 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)v28 - v10;
  uint64_t v12 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)v28 - v16;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a3;
  v28[0] = a1;
  sub_10001D010(a1, (uint64_t)v30);
  _Block_copy(a3);
  _Block_copy(a3);
  sub_10000588C((uint64_t *)&unk_10164DBF0);
  if (swift_dynamicCast())
  {
    sub_100485510((uint64_t)v17, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    _Block_copy(a3);
    swift_retain();
    sub_1003AC670((uint64_t)v15, 1, a2, a3);
    _Block_release(a3);
    swift_release();
    uint64_t v19 = (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord;
    uint64_t v20 = (uint64_t)v15;
LABEL_5:
    sub_100485AFC(v20, v19);
    goto LABEL_9;
  }
  if (swift_dynamicCast())
  {
    sub_100485510((uint64_t)v11, (uint64_t)v9, type metadata accessor for SharedBeaconRecord);
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = sub_1001E06E0;
    *(void *)(v21 + 24) = v18;
    swift_retain();
    sub_10037FFBC((uint64_t)v9, (uint64_t)sub_1003A4804, v21);
    swift_release();
    uint64_t v19 = type metadata accessor for SharedBeaconRecord;
    uint64_t v20 = (uint64_t)v9;
    goto LABEL_5;
  }
  static os_log_type_t.error.getter();
  if (qword_101637278 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_101342130;
  sub_10001D010(v28[0], (uint64_t)&v29);
  uint64_t v23 = String.init<A>(describing:)();
  uint64_t v25 = v24;
  *(void *)(v22 + 56) = &type metadata for String;
  *(void *)(v22 + 64) = sub_10000B4CC();
  *(void *)(v22 + 32) = v23;
  *(void *)(v22 + 40) = v25;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  type metadata accessor for SPOwnerSessionError(0);
  v28[1] = 0;
  sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
  sub_100482848(&qword_101638460, type metadata accessor for SPOwnerSessionError);
  _BridgedStoredNSError.init(_:userInfo:)();
  uint64_t v26 = v29;
  uint64_t v27 = (void *)_convertErrorToNSError(_:)();
  ((void (**)(void, void *))a3)[2](a3, v27);

LABEL_9:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v30);
  swift_release();
  _Block_release(a3);
}

uint64_t sub_10047EF04(uint64_t a1, uint64_t a2, void (**a3)(const void *, void *))
{
  uint64_t v90 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v90 - 8);
  __chkstk_darwin(v90);
  uint64_t v84 = (char *)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = sub_10000588C((uint64_t *)&unk_10166EAF0);
  __chkstk_darwin(v91);
  uint64_t v9 = (char *)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C(&qword_101638CF0);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v13 = (char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v93 = (uint64_t)&v68 - v15;
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v68 - v16;
  uint64_t v82 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v72 = *(void *)(v82 - 8);
  __chkstk_darwin(v82);
  uint64_t v73 = v18;
  uint64_t v80 = (uint64_t)&v68 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_10000588C(&qword_10163BB20);
  __chkstk_darwin(v19 - 8);
  uint64_t v79 = (char *)&v68 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v78 = *(void *)(v77 - 8);
  uint64_t v21 = __chkstk_darwin(v77);
  uint64_t v71 = (uint64_t)&v68 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = v22;
  __chkstk_darwin(v21);
  uint64_t v74 = (uint64_t)&v68 - v23;
  uint64_t v81 = swift_allocObject();
  *(void *)(v81 + 16) = a3;
  uint64_t v75 = a2;
  uint64_t v76 = a3;
  _Block_copy(a3);
  uint64_t v24 = sub_100AE4A24();
  uint64_t v25 = sub_100A9C06C((uint64_t)v24);
  swift_bridgeObjectRelease();
  uint64_t v26 = sub_100AE4C44();
  uint64_t v27 = sub_100A9C23C((uint64_t)v26);
  swift_bridgeObjectRelease();
  *(void *)&v98[0] = v25;
  sub_1004445F4((uint64_t)v27);
  uint64_t v28 = *(void *)(*(void *)&v98[0] + 16);
  if (!v28)
  {
LABEL_12:
    uint64_t v99 = 0;
    memset(v98, 0, sizeof(v98));
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  uint64_t v92 = v17;
  uint64_t v29 = *(void *)&v98[0] + 32;
  uint64_t v30 = *(int *)(v82 + 28);
  uint64_t v69 = a1;
  uint64_t v89 = a1 + v30;
  uint64_t v87 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  uint64_t v88 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56);
  uint64_t v83 = (void (**)(char *, uint64_t, uint64_t))(v6 + 32);
  uint64_t v85 = (void (**)(uint64_t, uint64_t))(v6 + 8);
  uint64_t v68 = *(void *)&v98[0];
  swift_bridgeObjectRetain();
  unint64_t v86 = v13;
  uint64_t v31 = v90;
  os_log_type_t v32 = v87;
  while (1)
  {
    sub_10001D010(v29, (uint64_t)&v95);
    uint64_t v33 = v96;
    uint64_t v34 = v97;
    sub_10001CD44(&v95, v96);
    uint64_t v35 = (uint64_t)v9;
    uint64_t v36 = (uint64_t)v92;
    (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v34);
    (*v88)(v36, 0, 1, v31);
    uint64_t v37 = v93;
    sub_10001D074(v89, v93, &qword_101638CF0);
    uint64_t v38 = v35 + *(int *)(v91 + 48);
    sub_10001D074(v36, v35, &qword_101638CF0);
    sub_10001D074(v37, v38, &qword_101638CF0);
    uint64_t v39 = *v32;
    if ((*v32)(v35, 1, v31) == 1) {
      break;
    }
    uint64_t v40 = (uint64_t)v86;
    sub_10001D074(v35, (uint64_t)v86, &qword_101638CF0);
    uint64_t v9 = (char *)v35;
    if (v39(v38, 1, v31) == 1)
    {
      sub_10001DAB4(v93, &qword_101638CF0);
      sub_10001DAB4((uint64_t)v92, &qword_101638CF0);
      (*v85)(v40, v31);
      goto LABEL_4;
    }
    uint64_t v41 = v84;
    (*v83)(v84, v38, v31);
    sub_100482848((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
    char v42 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v43 = *v85;
    uint64_t v44 = v41;
    uint64_t v45 = (uint64_t)v86;
    (*v85)((uint64_t)v44, v31);
    sub_10001DAB4(v93, &qword_101638CF0);
    sub_10001DAB4((uint64_t)v92, &qword_101638CF0);
    v43(v45, v31);
    sub_10001DAB4(v35, &qword_101638CF0);
    if (v42) {
      goto LABEL_14;
    }
LABEL_5:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v95);
    v29 += 40;
    if (!--v28)
    {
      swift_bridgeObjectRelease();
      a1 = v69;
      goto LABEL_12;
    }
  }
  sub_10001DAB4(v37, &qword_101638CF0);
  sub_10001DAB4(v36, &qword_101638CF0);
  uint64_t v9 = (char *)v35;
  if (v39(v38, 1, v31) != 1)
  {
LABEL_4:
    sub_10001DAB4((uint64_t)v9, (uint64_t *)&unk_10166EAF0);
    goto LABEL_5;
  }
  sub_10001DAB4(v35, &qword_101638CF0);
LABEL_14:
  swift_bridgeObjectRelease();
  sub_10001CEB0(&v95, (uint64_t)v98);
  swift_bridgeObjectRelease();
  a1 = v69;
LABEL_15:
  sub_10001D074((uint64_t)v98, (uint64_t)&v95, (uint64_t *)&unk_10164E7C0);
  uint64_t v46 = v78;
  uint64_t v47 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v78 + 56);
  uint64_t v48 = (uint64_t)v79;
  if (v96)
  {
    sub_10000588C((uint64_t *)&unk_101657950);
    uint64_t v49 = v77;
    int v50 = swift_dynamicCast();
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v46 + 56))(v48, v50 ^ 1u, 1, v49);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v46 + 48))(v48, 1, v49) != 1)
    {
      uint64_t v51 = v74;
      sub_100485510(v48, v74, type metadata accessor for OwnedBeaconGroup);
      uint64_t v52 = v71;
      sub_100485A94(v51, v71, type metadata accessor for OwnedBeaconGroup);
      uint64_t v53 = v80;
      sub_100485A94(a1, v80, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      unint64_t v54 = (*(unsigned __int8 *)(v46 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80);
      uint64_t v55 = a1;
      unint64_t v56 = (v70 + *(unsigned __int8 *)(v72 + 80) + v54) & ~(unint64_t)*(unsigned __int8 *)(v72 + 80);
      unint64_t v57 = (v73 + v56 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v58 = swift_allocObject();
      *(void *)(v58 + 16) = v75;
      sub_100485510(v52, v58 + v54, type metadata accessor for OwnedBeaconGroup);
      sub_100485510(v53, v58 + v56, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      uint64_t v59 = (void *)(v58 + v57);
      uint64_t v60 = v81;
      *uint64_t v59 = sub_1001E06E0;
      v59[1] = v60;
      swift_retain();
      swift_retain();
      sub_100378528(v55, 0, (void (*)(uint64_t))sub_100484E10, (void (*)(uint64_t))v58);
      swift_release();
      sub_100485AFC(v51, type metadata accessor for OwnedBeaconGroup);
      sub_10001DAB4((uint64_t)v98, (uint64_t *)&unk_10164E7C0);
      return swift_release();
    }
  }
  else
  {
    sub_10001DAB4((uint64_t)&v95, (uint64_t *)&unk_10164E7C0);
    (*v47)(v48, 1, 1, v77);
  }
  sub_10001DAB4(v48, &qword_10163BB20);
  static os_log_type_t.error.getter();
  if (qword_1016372A8 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v61 = swift_allocObject();
  *(_OWORD *)(v61 + 16) = xmmword_101342130;
  sub_100485A94(a1, v80, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  uint64_t v62 = String.init<A>(describing:)();
  uint64_t v64 = v63;
  *(void *)(v61 + 56) = &type metadata for String;
  *(void *)(v61 + 64) = sub_10000B4CC();
  *(void *)(v61 + 32) = v62;
  *(void *)(v61 + 40) = v64;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  type metadata accessor for SPOwnerSessionError(0);
  uint64_t v94 = 2;
  sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
  sub_100482848(&qword_101638460, type metadata accessor for SPOwnerSessionError);
  _BridgedStoredNSError.init(_:userInfo:)();
  uint64_t v65 = (void *)v95;
  uint64_t v66 = (void *)_convertErrorToNSError(_:)();
  v76[2](v76, v66);

  sub_10001DAB4((uint64_t)v98, (uint64_t *)&unk_10164E7C0);
  return swift_release();
}

uint64_t sub_10047FA5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v46 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for UUID();
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v46 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = a1;
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  sub_10001D074(v18, (uint64_t)v14, &qword_101638CF0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v14, 1, v20) == 1)
  {
    sub_10001DAB4((uint64_t)v14, &qword_101638CF0);
    type metadata accessor for BeaconKeyManager(0);
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    sub_1012EEAE4(0);
    swift_release();
    return (*(uint64_t (**)(uint64_t, void))(a3 + 16))(a3, 0);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v17, v14, v20);
    sub_100ACD178((uint64_t)v7);
    uint64_t v24 = v17;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    {
      uint64_t v25 = v20;
      sub_10001DAB4((uint64_t)v7, &qword_10163B9F0);
      static os_log_type_t.error.getter();
      uint64_t v26 = a3;
      if (qword_101637278 != -1) {
        swift_once();
      }
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v27 = swift_allocObject();
      long long v46 = xmmword_101342130;
      *(_OWORD *)(v27 + 16) = xmmword_101342130;
      uint64_t v28 = UUID.uuidString.getter();
      uint64_t v29 = v24;
      uint64_t v31 = v30;
      *(void *)(v27 + 56) = &type metadata for String;
      *(void *)(v27 + 64) = sub_10000B4CC();
      *(void *)(v27 + 32) = v28;
      *(void *)(v27 + 40) = v31;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      sub_10000588C(&qword_101642890);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = v46;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(inited + 40) = v33;
      unint64_t v47 = 0;
      unint64_t v48 = 0xE000000000000000;
      _StringGuts.grow(_:)(47);
      swift_bridgeObjectRelease();
      unint64_t v47 = 0xD00000000000002DLL;
      unint64_t v48 = 0x80000001013FDBA0;
      sub_100482848((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      v34._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v34);
      swift_bridgeObjectRelease();
      unint64_t v35 = v48;
      *(void *)(inited + 48) = v47;
      *(void *)(inited + 56) = v35;
      unint64_t v36 = sub_10092D8F8(inited);
      sub_10065435C(v36);
      swift_bridgeObjectRelease();
      id v37 = objc_allocWithZone((Class)NSError);
      NSString v38 = String._bridgeToObjectiveC()();
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v40 = [v37 initWithDomain:v38 code:500 userInfo:isa];

      id v41 = v40;
      char v42 = (void *)_convertErrorToNSError(_:)();
      (*(void (**)(uint64_t, void *))(v26 + 16))(v26, v42);

      return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v29, v25);
    }
    else
    {
      sub_100485510((uint64_t)v7, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      type metadata accessor for BeaconKeyManager(0);
      OSAllocatedUnfairLock.callAsFunction<A>(_:)();
      uint64_t v43 = v20;
      unint64_t v44 = v47;
      uint64_t v45 = type metadata accessor for Transaction();
      __chkstk_darwin(v45);
      *((void *)&v46 - 6) = v44;
      *((void *)&v46 - 5) = v11;
      *((unsigned char *)&v46 - 32) = 2;
      *((void *)&v46 - 3) = 0;
      *((void *)&v46 - 2) = 0;
      static Transaction.named<A>(_:with:)();
      swift_release();
      (*(void (**)(uint64_t, void))(a3 + 16))(a3, 0);
      sub_100485AFC((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      return (*(uint64_t (**)(char *, uint64_t))(v22 + 8))(v24, v43);
    }
  }
}

void sub_100480118(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v36 = a3;
  uint64_t v35 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  uint64_t v6 = (char *)v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)v34 - v15;
  sub_100ACD178((uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_10001DAB4((uint64_t)v9, &qword_10163B9F0);
    if (qword_101636F50 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_100010324(v17, (uint64_t)qword_10170E9E8);
    uint64_t v18 = v35;
    (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v35);
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      *(_DWORD *)uint64_t v21 = 141558275;
      uint64_t v37 = 1752392040;
      NSString v38 = (void *)v22;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v21 + 12) = 2081;
      sub_100482848((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v37 = sub_1008FA0F0(v23, v24, (uint64_t *)&v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v18);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "Unable to get keySync/keyAlignment record for beacon: %{private,mask.hash}s.", (uint8_t *)v21, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v18);
    }

    type metadata accessor for SPOwnerSessionError(0);
    uint64_t v37 = 2;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100482848(&qword_101638460, type metadata accessor for SPOwnerSessionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    os_log_type_t v32 = v38;
    uint64_t v33 = (void *)_convertErrorToNSError(_:)();
    (*(void (**)(uint64_t, void *))(v36 + 16))(v36, v33);
  }
  else
  {
    sub_100485510((uint64_t)v9, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    if (qword_101636F50 != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    sub_100010324(v25, (uint64_t)qword_10170E9E8);
    sub_100485A94((uint64_t)v16, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc();
      uint64_t v29 = swift_slowAlloc();
      *(_DWORD *)uint64_t v28 = 141558275;
      uint64_t v37 = 1752392040;
      NSString v38 = (void *)v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v28 + 12) = 2081;
      v34[1] = v28 + 14;
      sub_100482848((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v37 = sub_1008FA0F0(v30, v31, (uint64_t *)&v38);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100485AFC((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Forcing KeyAlignmentRecord update for beacon: %{private,mask.hash}s.", (uint8_t *)v28, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100485AFC((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    }

    sub_100AE12EC((uint64_t)v16);
    (*(void (**)(uint64_t, void))(v36 + 16))(v36, 0);
    sub_100485AFC((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  }
}

uint64_t sub_1004807F8(uint64_t a1, void *a2, char a3, uint64_t a4, void (*a5)(void *, void *))
{
  sub_100ACCD98(a1, (uint64_t)&v21);
  if (!v22)
  {
    sub_10001DAB4((uint64_t)&v21, (uint64_t *)&unk_10163BBE0);
    sub_1003A4778();
    swift_allocError();
    *uint64_t v11 = 10;
    uint64_t v12 = (void *)_convertErrorToNSError(_:)();
    a5(_swiftEmptyArrayStorage, v12);

    return swift_errorRelease();
  }
  sub_10001CEB0(&v21, (uint64_t)v24);
  unsigned int v8 = [a2 sequence];
  if (v8 == 1)
  {
    id v9 = [a2 index];
    uint64_t v22 = &type metadata for PrimaryIndex;
    unint64_t v10 = sub_1001A1640();
    goto LABEL_9;
  }
  if (v8 == 2)
  {
    id v9 = [a2 index];
    uint64_t v22 = &type metadata for PrimaryWildIndex;
    unint64_t v10 = sub_1001A1694();
    goto LABEL_9;
  }
  if (v8 != 3)
  {
    sub_1003A4778();
    swift_allocError();
    *uint64_t v19 = 4;
    os_log_type_t v20 = (void *)_convertErrorToNSError(_:)();
    a5(_swiftEmptyArrayStorage, v20);

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v24);
    return swift_errorRelease();
  }
  id v9 = [a2 index];
  uint64_t v22 = &type metadata for SecondaryIndex;
  unint64_t v10 = sub_1001A15EC();
LABEL_9:
  unint64_t v23 = v10;
  *(void *)&long long v21 = v9;
  uint64_t v13 = sub_100AE0BA4(v24, &v21, a3);
  if (v13) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = _swiftEmptyArrayStorage;
  }
  uint64_t v15 = v14[2];
  if (v15)
  {
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v16 = 0;
    do
    {
      uint64_t v17 = v16 + 1;
      [objc_allocWithZone((Class)NSNumber) initWithUnsignedLongLong:v14[v16 + 4]];
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      uint64_t v16 = v17;
    }
    while (v15 != v17);
  }
  swift_bridgeObjectRelease();
  a5(_swiftEmptyArrayStorage, 0);
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v21);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v24);
}

void sub_100480AC4(uint64_t a1, uint64_t a2)
{
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v4 = (void *)sub_1010AB900(v22);
  swift_bridgeObjectRelease();
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v7 = v6;
  if (v5 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v7 == v8)
  {

    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v10 & 1) == 0)
    {
      static os_log_type_t.default.getter();
      if (qword_101636B08 == -1)
      {
LABEL_17:
        os_log(_:dso:log:_:_:)();
        if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) == 0)
        {
LABEL_22:
          sub_10001D4B0(0, (unint64_t *)&unk_10164DC30);
          sub_100485A2C();
          goto LABEL_23;
        }
LABEL_24:
        if (_CocoaArrayWrapper.endIndex.getter()) {
          sub_100DF2E60((unint64_t)_swiftEmptyArrayStorage);
        }
        goto LABEL_22;
      }
LABEL_26:
      swift_once();
      goto LABEL_17;
    }
  }
  if (!*(void *)(a1 + 200))
  {
    static os_log_type_t.error.getter();
    if (qword_101636B08 == -1) {
      goto LABEL_17;
    }
    goto LABEL_26;
  }
  swift_retain();
  AnyCurrentValuePublisher.value.getter();
  swift_release();
  if ((v22 & 1) == 0)
  {
    static os_log_type_t.default.getter();
    if (qword_101636B08 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v17 = swift_allocObject();
    *(_OWORD *)(v17 + 16) = xmmword_101342130;
    uint64_t v18 = String.init<A>(describing:)();
    uint64_t v20 = v19;
    *(void *)(v17 + 56) = &type metadata for String;
    *(void *)(v17 + 64) = sub_10000B4CC();
    *(void *)(v17 + 32) = v18;
    *(void *)(v17 + 40) = v20;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) == 0) {
      goto LABEL_22;
    }
    goto LABEL_24;
  }
  uint64_t v11 = sub_100ACF5FC();
  swift_retain();
  uint64_t v12 = sub_100479894((uint64_t)v11, a1);
  swift_bridgeObjectRelease();
  swift_release();
  static os_log_type_t.default.getter();
  if (qword_101636B08 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_101342130;
  sub_10001D4B0(0, (unint64_t *)&unk_10164DC30);
  swift_bridgeObjectRetain();
  uint64_t v14 = Array.description.getter();
  uint64_t v16 = v15;
  swift_bridgeObjectRelease();
  *(void *)(v13 + 56) = &type metadata for String;
  *(void *)(v13 + 64) = sub_10000B4CC();
  *(void *)(v13 + 32) = v14;
  *(void *)(v13 + 40) = v16;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_101159418((unint64_t)v12);
  swift_bridgeObjectRelease();
  sub_100485A2C();
LABEL_23:
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class))(a2 + 16))(a2, isa);
  swift_bridgeObjectRelease();
}

void sub_100480FA8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, const void *a10)
{
  uint64_t v66 = a5;
  uint64_t v67 = a8;
  uint64_t v65 = a7;
  uint64_t v68 = a3;
  uint64_t v69 = a6;
  int v75 = a2;
  uint64_t v76 = a4;
  uint64_t v77 = a9;
  uint64_t v11 = sub_10000588C(&qword_10163BB70);
  __chkstk_darwin(v11 - 8);
  uint64_t v72 = (uint64_t)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v74 = type metadata accessor for LostModeRecord();
  uint64_t v71 = *(void *)(v74 - 8);
  uint64_t v13 = __chkstk_darwin(v74);
  uint64_t v63 = (uint64_t)&v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v73 = (char *)&v62 - v16;
  __chkstk_darwin(v15);
  uint64_t v64 = (uint64_t)&v62 - v17;
  uint64_t v18 = sub_10000588C(&qword_10163BB20);
  __chkstk_darwin(v18 - 8);
  uint64_t v70 = (uint64_t)&v62 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for UUID();
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  unint64_t v23 = (char *)&v62 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  _Block_copy(a10);
  uint64_t v78 = a10;
  _Block_copy(a10);
  static os_log_type_t.default.getter();
  if (qword_1016372E0 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v24 = swift_allocObject();
  long long v62 = xmmword_101342130;
  *(_OWORD *)(v24 + 16) = xmmword_101342130;
  uint64_t v25 = UUID.uuidString.getter();
  uint64_t v79 = a1;
  uint64_t v27 = v26;
  *(void *)(v24 + 56) = &type metadata for String;
  unint64_t v28 = sub_10000B4CC();
  *(void *)(v24 + 64) = v28;
  *(void *)(v24 + 32) = v25;
  *(void *)(v24 + 40) = v27;
  uint64_t v29 = v79;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v30 = v77;
  sub_100ACCD98(v29, (uint64_t)v80);
  uint64_t v31 = v81;
  sub_10001DAB4((uint64_t)v80, (uint64_t *)&unk_10163BBE0);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v23, v29, v20);
  if (v31)
  {
    (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
  }
  else
  {
    uint64_t v32 = v70;
    sub_100AE75E0((uint64_t)v23, v70);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
    uint64_t v33 = type metadata accessor for OwnedBeaconGroup(0);
    int v34 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 48))(v32, 1, v33);
    sub_10001DAB4(v32, &qword_10163BB20);
    if (v34 == 1)
    {
      static os_log_type_t.error.getter();
      if (qword_101637278 != -1) {
        swift_once();
      }
      uint64_t v35 = swift_allocObject();
      *(_OWORD *)(v35 + 16) = v62;
      sub_100482848((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v35 + 56) = &type metadata for String;
      *(void *)(v35 + 64) = v28;
      *(void *)(v35 + 32) = v36;
      *(void *)(v35 + 40) = v37;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
  }
  uint64_t v38 = v76;
  char v39 = v75;
  if ((v75 & 1) != 0 && !v76)
  {
    static os_log_type_t.error.getter();
    os_log(_:dso:log:_:_:)();
LABEL_12:
    sub_100484228();
    swift_allocError();
    *id v40 = 0;
    id v41 = (void *)_convertErrorToNSError(_:)();
    char v42 = (void (**)(void, void))v78;
    (*((void (**)(const void *, void *))v78 + 2))(v78, v41);

    swift_errorRelease();
    goto LABEL_34;
  }
  uint64_t v43 = sub_100B6D358(v29);
  char v42 = (void (**)(void, void))v78;
  if (v43[2])
  {
    uint64_t v45 = v71;
    uint64_t v44 = v72;
    sub_100485A94((uint64_t)v43 + ((*(unsigned __int8 *)(v71 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80)), v72, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
    uint64_t v46 = 0;
    uint64_t v48 = (uint64_t)v73;
    unint64_t v47 = (int *)v74;
  }
  else
  {
    uint64_t v46 = 1;
    uint64_t v48 = (uint64_t)v73;
    unint64_t v47 = (int *)v74;
    uint64_t v45 = v71;
    uint64_t v44 = v72;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, int *))(v45 + 56))(v44, v46, 1, v47);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(v45 + 48))(v44, 1, v47) != 1)
  {
    uint64_t v49 = v64;
    sub_100485510(v44, v64, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
    int v50 = (void *)(v49 + v47[9]);
    uint64_t v51 = v50[1];
    if (v51)
    {
      if (v38)
      {
        if (*v50 != v68 || v51 != v38)
        {
          char v52 = _stringCompareWithSmolCheck(_:_:expecting:)();
          sub_100485A94(v49, v48, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
          if ((v52 & 1) == 0) {
            goto LABEL_26;
          }
          goto LABEL_36;
        }
LABEL_35:
        sub_100485A94(v49, v48, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
LABEL_36:
        unint64_t v54 = (void *)(v48 + v47[8]);
        uint64_t v55 = v54[1];
        if (!v55)
        {
          uint64_t v56 = v69;
          swift_bridgeObjectRetain();
          sub_100485AFC(v48, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
          if (!v56) {
            goto LABEL_43;
          }
          swift_bridgeObjectRelease();
LABEL_27:
          uint64_t v53 = v63;
          sub_100485A94(v49, v63, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
          goto LABEL_28;
        }
        if (v69)
        {
          if (*v54 != v66 || v55 != v69)
          {
            char v57 = _stringCompareWithSmolCheck(_:_:expecting:)();
            sub_100485AFC(v48, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
            uint64_t v53 = v63;
            sub_100485A94(v49, v63, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
            if ((v57 & 1) == 0) {
              goto LABEL_28;
            }
            goto LABEL_45;
          }
          sub_100485AFC(v48, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
LABEL_43:
          uint64_t v53 = v63;
          sub_100485A94(v49, v63, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
LABEL_45:
          uint64_t v58 = (void *)(v53 + v47[7]);
          uint64_t v59 = v58[1];
          if (!v59)
          {
            uint64_t v60 = v67;
            swift_bridgeObjectRetain();
            sub_100485AFC(v53, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
            if (!v60) {
              goto LABEL_53;
            }
            swift_bridgeObjectRelease();
            goto LABEL_29;
          }
          if (v67)
          {
            if (*v58 == v65 && v59 == v67)
            {
              sub_100485AFC(v53, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
LABEL_53:
              static os_log_type_t.default.getter();
              os_log(_:dso:log:_:_:)();
              v42[2](v42, 0);
              sub_100485AFC(v49, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
              goto LABEL_34;
            }
            char v61 = _stringCompareWithSmolCheck(_:_:expecting:)();
            sub_100485AFC(v53, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
            if (v61) {
              goto LABEL_53;
            }
LABEL_29:
            sub_100485AFC(v49, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
            goto LABEL_30;
          }
LABEL_28:
          sub_100485AFC(v53, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
          goto LABEL_29;
        }
LABEL_26:
        sub_100485AFC(v48, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
        goto LABEL_27;
      }
    }
    else if (!v38)
    {
      goto LABEL_35;
    }
    sub_100485A94(v49, v48, (uint64_t (*)(void))type metadata accessor for LostModeRecord);
    goto LABEL_26;
  }
  sub_10001DAB4(v44, &qword_10163BB70);
LABEL_30:
  _Block_copy(v42);
  if (v39) {
    sub_1008F2F70(v29, v65, v67, v66, v69, v68, v38, v30, v42);
  }
  else {
    sub_1008F34F8(v29, v30, (void (**)(const void *, void *))v42);
  }
  _Block_release(v42);
LABEL_34:
  _Block_release(v42);
  _Block_release(v42);
}

uint64_t sub_1004819D4(uint64_t a1)
{
  uint64_t v52 = type metadata accessor for BeaconObservation();
  uint64_t v53 = *(void *)(v52 - 8);
  __chkstk_darwin(v52);
  unint64_t v54 = (char *)v49 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v3 - 8);
  uint64_t v55 = (uint64_t)v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v5 - 8);
  uint64_t v64 = (uint64_t)v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v62 = *(void *)(v7 - 8);
  uint64_t v63 = v7;
  __chkstk_darwin(v7);
  uint64_t v56 = (uint64_t)v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v60 = *(void *)(v9 - 8);
  uint64_t v61 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchQoS();
  uint64_t v58 = *(void *)(v12 - 8);
  uint64_t v59 = v12;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v66 = *(void *)(v15 - 8);
  uint64_t v67 = v15;
  uint64_t v16 = *(void *)(v66 + 64);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v51 = (char *)v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)v49 - v18;
  static os_log_type_t.default.getter();
  if (qword_101637278 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v20 = swift_allocObject();
  long long v50 = xmmword_101342130;
  *(_OWORD *)(v20 + 16) = xmmword_101342130;
  uint64_t v21 = UUID.uuidString.getter();
  uint64_t v23 = v22;
  *(void *)(v20 + 56) = &type metadata for String;
  *(void *)(v20 + 64) = sub_10000B4CC();
  *(void *)(v20 + 32) = v21;
  *(void *)(v20 + 40) = v23;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v24 = v65;
  uint64_t v25 = v66;
  uint64_t v57 = *(void *)(v65 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_playbackCoordinatorModQueue);
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v66 + 16);
  uint64_t v27 = v67;
  v49[1] = v66 + 16;
  v49[0] = v26;
  v26(v19, a1, v67);
  unint64_t v28 = (*(unsigned __int8 *)(v25 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
  uint64_t v29 = swift_allocObject();
  *(void *)(v29 + 16) = v24;
  uint64_t v30 = *(void (**)(unint64_t, char *, uint64_t))(v25 + 32);
  v30(v29 + v28, v19, v27);
  aBlock[4] = sub_1004822D0;
  aBlock[5] = v29;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015C3CA0;
  uint64_t v31 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v68 = _swiftEmptyArrayStorage;
  sub_100482848((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v32 = v61;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v31);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v11, v32);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v14, v59);
  swift_release();
  uint64_t v33 = v64;
  sub_100ACD178(v64);
  uint64_t v34 = v63;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v62 + 48))(v33, 1, v63) == 1) {
    return sub_10001DAB4(v33, &qword_10163B9F0);
  }
  uint64_t v36 = v56;
  sub_100485510(v33, v56, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  uint64_t v37 = v36 + *(int *)(v34 + 28);
  uint64_t v38 = v55;
  sub_10001D074(v37, v55, &qword_101638CF0);
  uint64_t v40 = v66;
  uint64_t v39 = v67;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v38, 1, v67) == 1)
  {
    sub_100485AFC(v36, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
    return sub_10001DAB4(v38, &qword_101638CF0);
  }
  else
  {
    id v41 = v51;
    v30((unint64_t)v51, (char *)v38, v39);
    if (qword_101636CB8 != -1) {
      swift_once();
    }
    uint64_t v42 = qword_10170E330;
    uint64_t v43 = (uint64_t)v54;
    ((void (*)(char *, char *, uint64_t))v49[0])(v54, v41, v39);
    uint64_t v44 = v52;
    static Date.trustedNow.getter(v43 + *(int *)(v52 + 20));
    *(unsigned char *)(v43 + *(int *)(v44 + 24)) = 29;
    sub_10000588C(&qword_10163A778);
    uint64_t v45 = v41;
    unint64_t v46 = (*(unsigned __int8 *)(v53 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v53 + 80);
    uint64_t v47 = swift_allocObject();
    *(_OWORD *)(v47 + 16) = v50;
    sub_100485A94(v43, v47 + v46, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    uint64_t v48 = type metadata accessor for Transaction();
    __chkstk_darwin(v48);
    v49[-4] = v42;
    v49[-3] = v47;
    v49[-2] = 0;
    v49[-1] = 0;
    static Transaction.named<A>(_:with:)();
    swift_bridgeObjectRelease();
    sub_100485AFC(v43, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v45, v39);
    return sub_100485AFC(v36, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  }
}

uint64_t sub_1004822D0()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_100471D70(v2, v3);
}

uint64_t sub_100482334(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100482344()
{
  return swift_release();
}

uint64_t sub_10048234C(uint64_t a1)
{
  uint64_t v2 = sub_10000588C(&qword_1016511E0);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_log_type_t.default.getter();
  if (qword_101637278 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_101342130;
  uint64_t v6 = UUID.uuidString.getter();
  uint64_t v8 = v7;
  *(void *)(v5 + 56) = &type metadata for String;
  *(void *)(v5 + 64) = sub_10000B4CC();
  *(void *)(v5 + 32) = v6;
  *(void *)(v5 + 40) = v8;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_100AE381C(a1, (uint64_t)v4);
  uint64_t v9 = type metadata accessor for WildModeAssociationRecord(0);
  int v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v4, 1, v9);
  sub_10001DAB4((uint64_t)v4, &qword_1016511E0);
  if (v10 == 1) {
    return sub_100A9E7EC(10);
  }
  else {
    return sub_100AA5514();
  }
}

uint64_t sub_10048250C(uint64_t a1)
{
  return a1;
}

uint64_t sub_10048257C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1004825EC(uint64_t a1)
{
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = sub_100033F68;
  v4[15] = a1;
  v4[16] = v1;
  return _swift_task_switch(sub_100457560, 0, 0);
}

uint64_t sub_100482698(uint64_t *a1, uint64_t a2)
{
  return sub_10045781C(a1, a2, v2[2], v2[3], v2[4]);
}

uint64_t sub_1004826B8()
{
  return sub_1004855CC((void (*)(void))&_swift_unknownObjectRelease, (void (*)(void))&_swift_release);
}

uint64_t sub_1004826E4()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100033F68;
  v3[18] = v2;
  return _swift_task_switch(sub_100459D0C, 0, 0);
}

uint64_t sub_100482794()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100033F68;
  return sub_1007E3BA4(v2, v0 + 24);
}

uint64_t sub_100482838()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100482848(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100482890@<X0>(void *a1@<X8>)
{
  return sub_100462618(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_1004828AC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 97, 7);
}

uint64_t sub_1004828F4()
{
  return sub_1004831A0((void (*)(void))&_swift_release, (void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_100482920(uint64_t a1)
{
  return sub_100462D08(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100482928()
{
  uint64_t v1 = (int *)(type metadata accessor for LocationFetcher() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + v3 + 24);
  uint64_t v6 = v0 + v3 + v1[10];
  uint64_t v7 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_100482A74()
{
  uint64_t v2 = *(void *)(type metadata accessor for LocationFetcher() - 8);
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  uint64_t v5 = v0[4];
  uint64_t v6 = (uint64_t)v0 + ((*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = sub_10001D2E4;
  return sub_1005B1868(v3, v4, v5, v6);
}

uint64_t sub_100482B5C()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100482B94()
{
  return sub_1004831A0((void (*)(void))&_swift_bridgeObjectRelease, (void (*)(void))&_swift_release);
}

uint64_t sub_100482BC0(uint64_t a1)
{
  return sub_100471464(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100482BC8()
{
  uint64_t v1 = (int *)(type metadata accessor for LocationFetcher() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v0 + v3;
  swift_release();
  swift_release();

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v6 + 24);
  uint64_t v7 = v6 + v1[10];
  uint64_t v8 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, v5 + 16, v4);
}

uint64_t sub_100482D34()
{
  uint64_t v1 = *(void *)(type metadata accessor for LocationFetcher() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = (void *)(v0 + v2);
  unint64_t v5 = *(void **)(v0 + v3);
  uint64_t v6 = (uint64_t *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];

  return sub_1008BE9C4(v4, v5, v7, v8);
}

uint64_t sub_100482DD0()
{
  swift_bridgeObjectRelease();

  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 40);

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_100482E20(uint64_t a1)
{
  return sub_10046004C(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32), v1 + 40);
}

uint64_t sub_100482E30(uint64_t a1)
{
  return sub_1004631C4(a1, v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

uint64_t sub_100482E54()
{
  return sub_1004855CC((void (*)(void))&_swift_release, (void (*)(void))&_swift_release);
}

uint64_t sub_100482E80(uint64_t a1)
{
  unint64_t v3 = *(uint64_t (**)(uint64_t))(v1 + 24);
  Transaction.capture()();
  return v3(a1);
}

uint64_t sub_100482EC8(uint64_t a1)
{
  return sub_1004608B0(a1, *(dispatch_group_t *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t sub_100482EEC()
{
  return sub_100483108((void (*)(void))&_swift_bridgeObjectRelease);
}

void sub_100482F04()
{
  sub_100461DDC(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_100482F10()
{
  return sub_1004855CC((void (*)(void))&_swift_unknownObjectRelease, (void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_100482F3C()
{
  uint64_t v2 = *(void *)(v0 + 32);
  unint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *unint64_t v3 = v1;
  v3[1] = sub_100033F68;
  v3[15] = v2;
  return _swift_task_switch(sub_100474338, 0, 0);
}

uint64_t sub_100482FE8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100483020()
{
  swift_release();

  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100483070(uint64_t a1)
{
  return sub_100460978(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_10048307C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1004830A8(uint64_t a1)
{
  return a1;
}

uint64_t sub_1004830F0()
{
  return sub_100483108((void (*)(void))&_swift_release);
}

uint64_t sub_100483108(void (*a1)(void))
{
  a1(*(void *)(v1 + 24));
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v1, 48, 7);
}

void sub_100483168()
{
  sub_100460C5C(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_100483174()
{
  return sub_1004831A0((void (*)(void))&_swift_bridgeObjectRelease, (void (*)(void))&_swift_release);
}

uint64_t sub_1004831A0(void (*a1)(void), void (*a2)(void))
{
  a1(*(void *)(v2 + 16));
  a2(*(void *)(v2 + 24));

  return _swift_deallocObject(v2, 32, 7);
}

uint64_t sub_1004831F8@<X0>(uint64_t *a1@<X8>)
{
  return sub_10045DA2C(*(void *)(v1 + 16), *(void *)(v1 + 32), *(void *)(v1 + 40), a1, *(double *)(v1 + 24));
}

uint64_t sub_10048321C(uint64_t a1)
{
  return sub_100AD7024(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t sub_10048323C(uint64_t a1)
{
  return sub_10045DCA8(a1, *(void *)(v1 + 24), *(char **)(v1 + 32)) & 1;
}

void sub_100483260()
{
  sub_100474F10(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned __int8 **)(v0 + 32));
}

uint64_t sub_100483280@<X0>(uint64_t a1@<X8>)
{
  return sub_100AD33C0(*(void *)(v1 + 24), a1);
}

uint64_t sub_10048329C(uint64_t a1)
{
  return sub_1004579A8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24)) & 1;
}

uint64_t sub_1004832BC@<X0>(uint64_t a1@<X8>)
{
  return sub_100AD3418(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_1004832D8()
{
  uint64_t v1 = *(void *)(sub_10000588C((uint64_t *)&unk_10163AC90) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 40) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v3, v5);
  }
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, ((((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_100483440()
{
  uint64_t v1 = *(void *)(sub_10000588C((uint64_t *)&unk_10163AC90) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = v0[2];
  uint64_t v5 = v0[3];
  uint64_t v6 = v0[4];
  uint64_t v7 = (uint64_t)v0 + v2;
  uint64_t v8 = *(void *)((char *)v0 + v3);
  uint64_t v9 = (void *)((char *)v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];

  return sub_10044DD24(v4, v5, v6, v7, v8, v10, v11);
}

uint64_t sub_1004834E8(uint64_t a1)
{
  return sub_100454C68(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

unint64_t sub_100483504()
{
  unint64_t result = qword_10164E9B0;
  if (!qword_10164E9B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164E9B0);
  }
  return result;
}

uint64_t sub_100483558()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1004835A0()
{
  return sub_100454F4C(v0[2], v0[3], v0[4]);
}

uint64_t sub_1004835AC()
{
  uint64_t v1 = *(void *)(sub_10000588C((uint64_t *)&unk_10163AC90) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 48) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v3, v5);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, ((((((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v2 | 7);
}

uint64_t sub_100483724(uint64_t a1)
{
  uint64_t v3 = *(void *)(sub_10000588C((uint64_t *)&unk_10163AC90) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = v1[5];
  uint64_t v10 = *(void *)((char *)v1 + v5);
  uint64_t v11 = *(void *)((char *)v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v12 = (uint64_t)v1 + v4;
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v13;
  *uint64_t v13 = v2;
  v13[1] = sub_10001D2E4;
  return sub_10044E778(a1, v6, v7, v8, v9, v12, v10, v11);
}

unint64_t sub_100483890()
{
  return sub_100454A70(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void **)(v0 + 40), *(void **)(v0 + 48), *(void **)(v0 + 56));
}

id sub_1004838A0()
{
  return sub_100454298(*(double *)(v0 + 24), *(double *)(v0 + 80), *(double *)(v0 + 88), *(void *)(v0 + 16), *(void **)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void **)(v0 + 64), *(void **)(v0 + 72), *(void **)(v0 + 96), *(void **)(v0 + 104));
}

uint64_t sub_1004838E0()
{
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 24);

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100483918()
{
  return sub_10044B9B8(*(void ***)(v0 + 16), v0 + 24);
}

uint64_t sub_100483924()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100483934(uint64_t a1)
{
  return sub_100473148(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void (**)(void, void))(v1 + 40), *(void *)(v1 + 48));
}

unint64_t sub_10048395C(uint64_t a1)
{
  return sub_1004737EC(a1, *(void *)(v1 + 16), *(void (**)(void, void))(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

unint64_t sub_100483968(unint64_t result, char a2)
{
  if (a2) {
    return sub_1001EE1E4(result);
  }
  else {
    return swift_release();
  }
}

unint64_t sub_100483974(unint64_t result, char a2)
{
  if (a2) {
    return sub_1001EE1D4(result);
  }
  else {
    return swift_retain();
  }
}

uint64_t sub_100483980()
{
  return sub_1004855CC((void (*)(void))&_swift_unknownObjectRelease, (void (*)(void))&_swift_release);
}

unint64_t sub_1004839AC(uint64_t a1)
{
  return sub_100473E5C(a1, *(void *)(v1 + 16), *(void (**)(void))(v1 + 24));
}

void sub_1004839BC(uint64_t a1)
{
  sub_100472724(a1, *(void *)(v1 + 16), *(NSObject **)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_1004839C8()
{
  return sub_1004855CC((void (*)(void))&_swift_unknownObjectRelease, (void (*)(void))&_swift_release);
}

void sub_1004839F4(uint64_t a1)
{
  sub_100472CAC(a1, *(void *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24));
}

uint64_t sub_100483A04(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = (v5 + 56) & ~v5;
  uint64_t v7 = v1[2];
  uint64_t v8 = v1[3];
  uint64_t v9 = v1[4];
  uint64_t v10 = v1[5];
  uint64_t v11 = v1[6];
  uint64_t v12 = (uint64_t)v1 + v6;
  uint64_t v13 = (uint64_t)v1 + ((*(void *)(v4 + 64) + v5 + v6) & ~v5);
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v14;
  *uint64_t v14 = v2;
  v14[1] = sub_100033F68;
  return sub_10046EBA8(a1, v7, v8, v9, v10, v11, v12, v13);
}

uint64_t sub_100483B48()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 56) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = (v5 + v3 + v4) & ~v3;
  uint64_t v8 = v7 + v5;
  swift_unknownObjectRelease();
  swift_release();
  swift_release();
  uint64_t v9 = v0 + v4;
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v10(v9, v1);
  v10(v0 + v7, v1);

  return _swift_deallocObject(v0, v8, v6);
}

uint64_t sub_100483C4C(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = (v5 + 56) & ~v5;
  uint64_t v7 = v1[2];
  uint64_t v8 = v1[3];
  uint64_t v9 = v1[4];
  uint64_t v10 = v1[5];
  uint64_t v11 = v1[6];
  uint64_t v12 = (uint64_t)v1 + v6;
  uint64_t v13 = (uint64_t)v1 + ((*(void *)(v4 + 64) + v5 + v6) & ~v5);
  uint64_t v14 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v14;
  *uint64_t v14 = v2;
  v14[1] = sub_100033F68;
  return sub_10046F904(a1, v7, v8, v9, v10, v11, v12, v13);
}

uint64_t sub_100483D8C()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100483DC4()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = (v5 + v3 + v4) & ~v3;
  unint64_t v8 = ((((v5 + v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  uint64_t v9 = v0 + v4;
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v10(v9, v1);
  v10(v0 + v7, v1);
  swift_release();

  return _swift_deallocObject(v0, v8, v6);
}

uint64_t sub_100483ED8()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = (v4 + v2 + v3) & ~v2;
  unint64_t v6 = (v4 + v5 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = *(void *)(v0 + 16);
  uint64_t v8 = v0 + v5;
  uint64_t v9 = *(void *)(v0 + v6);
  uint64_t v10 = (uint64_t *)(v0 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];

  return sub_100469D7C(v7, v0 + v3, v8, v9, v11, v12);
}

uint64_t sub_100483F8C()
{
  return sub_100484168((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))sub_10046A628);
}

uint64_t sub_100483FA4()
{
  return sub_1004855CC((void (*)(void))&_swift_release, (void (*)(void))&_swift_release);
}

uint64_t sub_100483FD0(uint64_t a1)
{
  return sub_10046A800(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100483FDC@<X0>(uint64_t a1@<X8>)
{
  return sub_100BE89B0(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_100483FF8(uint64_t a1)
{
  return sub_10046A194(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100484000()
{
  swift_release();
  swift_errorRelease();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100484044()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = (v5 + v3 + v4) & ~v3;
  unint64_t v8 = ((v5 + v7 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_release();
  uint64_t v9 = v0 + v4;
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v10(v9, v1);
  v10(v0 + v7, v1);
  swift_release();

  return _swift_deallocObject(v0, v8, v6);
}

uint64_t sub_100484150()
{
  return sub_100484168(sub_10046B1EC);
}

uint64_t sub_100484168(uint64_t (*a1)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = (v5 + v3 + v4) & ~v3;
  uint64_t v7 = *(void *)(v1 + 16);
  uint64_t v8 = v1 + v6;
  uint64_t v9 = (uint64_t *)(v1 + ((v5 + v6 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];

  return a1(v7, v1 + v4, v8, v10, v11);
}

uint64_t sub_100484220(uint64_t a1)
{
  return sub_10046B698(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

unint64_t sub_100484228()
{
  unint64_t result = qword_101645838;
  if (!qword_101645838)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_101645838);
  }
  return result;
}

uint64_t sub_10048427C(uint64_t a1)
{
  return sub_10046E9B0(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

uint64_t sub_100484284(uint64_t a1)
{
  return sub_10046EADC(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_100484290(uint64_t a1)
{
  return sub_100484398(a1, "Connect to %{private,mask.hash}s failed with error %{public}s. CommandId: %{public}s", "Connect to %{private,mask.hash}s completed successfully. CommandId: %{public}s.");
}

uint64_t sub_1004842A8()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  uint64_t v4 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v5 = (v4 + 16) & ~v4;
  uint64_t v6 = *(void *)(v2 + 64);
  uint64_t v7 = v4 | 7;
  uint64_t v8 = (v6 + v4 + v5) & ~v4;
  unint64_t v9 = ((v6 + v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  v3(v0 + v5, v1);
  v3(v0 + v8, v1);
  swift_release();

  return _swift_deallocObject(v0, v9, v7);
}

uint64_t sub_100484384(uint64_t a1)
{
  return sub_100484398(a1, "Disconnect from %{private,mask.hash}s failed with error %{public}s. CommandId: %{public}s", "Disconnect from %{private,mask.hash}s completed successfully. CommandId: %{public}s.");
}

uint64_t sub_100484398(uint64_t a1, const char *a2, const char *a3)
{
  uint64_t v7 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v8 + 16) & ~v8;
  uint64_t v10 = *(void *)(v7 + 64);
  return sub_10046E280(a1, v3 + v9, v3 + ((v10 + v8 + v9) & ~v8), *(void (**)(uint64_t))(v3 + ((v10 + ((v10 + v8 + v9) & ~v8) + 7) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v3 + ((v10 + ((v10 + v8 + v9) & ~v8) + 7) & 0xFFFFFFFFFFFFFFF8) + 8), a2, a3);
}

uint64_t sub_100484454(uint64_t a1)
{
  return sub_101077490(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_100484478()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10048454C()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  uint64_t v5 = v0[4];
  uint64_t v6 = (uint64_t)v0 + ((*(unsigned __int8 *)(v2 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = sub_100033F68;
  return sub_10046BBCC(v3, v4, v5, v6);
}

uint64_t sub_100484640()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v0[2];
  uint64_t v6 = v0[3];
  uint64_t v7 = v0[4];
  uint64_t v8 = (uint64_t)v0 + v4;
  uint64_t v9 = (uint64_t)v0 + ((*(void *)(v2 + 64) + v3 + v4) & ~v3);
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v10;
  *uint64_t v10 = v1;
  v10[1] = sub_100033F68;
  return sub_10046560C(v5, v6, v7, v8, v9);
}

uint64_t sub_100484768()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = (v5 + v3 + v4) & ~v3;
  uint64_t v8 = v7 + v5;
  swift_release();
  swift_release();
  uint64_t v9 = v0 + v4;
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v10(v9, v1);
  v10(v0 + v7, v1);

  return _swift_deallocObject(v0, v8, v6);
}

uint64_t sub_100484864()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v0[2];
  uint64_t v6 = v0[3];
  uint64_t v7 = v0[4];
  uint64_t v8 = (uint64_t)v0 + v4;
  uint64_t v9 = (uint64_t)v0 + ((*(void *)(v2 + 64) + v3 + v4) & ~v3);
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v10;
  *uint64_t v10 = v1;
  v10[1] = sub_100033F68;
  return sub_10046773C(v5, v6, v7, v8, v9);
}

uint64_t sub_100484988()
{
  uint64_t v1 = (int *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  uint64_t v26 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v2 = (v26 + 24) & ~v26;
  uint64_t v3 = *(void *)(*(void *)v1 + 64);
  uint64_t v4 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v25 = *(unsigned __int8 *)(*((void *)v4 - 1) + 80);
  uint64_t v5 = (v2 + v3 + v25) & ~v25;
  uint64_t v24 = *(void *)(*((void *)v4 - 1) + 64);
  swift_release();
  uint64_t v6 = v0 + v2;
  sub_10001CFB8(*(void *)(v0 + v2), *(void *)(v0 + v2 + 8));
  uint64_t v7 = v0 + v2 + v1[8];
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = v6 + v1[9];
  uint64_t v12 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v13 = v0 + v5;
  sub_10001CFB8(*(void *)(v0 + v5), *(void *)(v0 + v5 + 8));
  v10(v0 + v5 + v4[5], v8);
  uint64_t v14 = v0 + v5 + v4[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v14, v8);
      uint64_t v23 = v5;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v14, v8);
      uint64_t v23 = v5;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v5 = v23;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v15 = v13 + v4[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v15, 1, v8)) {
    v10(v15, v8);
  }
  uint64_t v16 = v13 + v4[8];
  uint64_t v17 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(v16, v17);
  sub_10001CFB8(*(void *)(v13 + v4[9]), *(void *)(v13 + v4[9] + 8));
  uint64_t v18 = (uint64_t *)(v13 + v4[10]);
  unint64_t v19 = v18[1];
  if (v19 >> 60 != 15) {
    sub_10001CFB8(*v18, v19);
  }
  uint64_t v20 = (uint64_t *)(v13 + v4[11]);
  unint64_t v21 = v20[1];
  if (v21 >> 60 != 15) {
    sub_10001CFB8(*v20, v21);
  }
  sub_10001CFB8(*(void *)(v13 + v4[12]), *(void *)(v13 + v4[12] + 8));
  sub_10001CFB8(*(void *)(v13 + v4[13]), *(void *)(v13 + v4[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, ((v24 + v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 16, v26 | v25 | 7);
}

uint64_t sub_100484E10(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  unint64_t v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = *(void *)(v1 + 16);
  uint64_t v9 = v1 + v7;
  uint64_t v10 = v1 + ((*(void *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = *(void (**)(uint64_t))v10;
  uint64_t v12 = *(void *)(v10 + 8);

  return sub_100463B08(a1, v8, v1 + v4, v9, v11, v12);
}

uint64_t sub_100484F18()
{
  uint64_t v1 = v0;
  uint64_t v2 = (int *)type metadata accessor for OwnedBeaconRecord();
  uint64_t v3 = *(unsigned __int8 *)(*((void *)v2 - 1) + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v20 = *(void *)(*((void *)v2 - 1) + 64);
  uint64_t v5 = v0 + v4;
  sub_10001CFB8(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v6 = v0 + v4 + v2[5];
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  uint64_t v10 = v0 + v4 + v2[6];
  type metadata accessor for StableIdentifier();
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v9(v10, v7);
      uint64_t v19 = v0;
      sub_10000588C(&qword_1016555E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v9(v10, v7);
      uint64_t v19 = v0;
      sub_10000588C((uint64_t *)&unk_1016565E0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v1 = v19;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }
  uint64_t v11 = v5 + v2[7];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v11, 1, v7)) {
    v9(v11, v7);
  }
  uint64_t v12 = v5 + v2[8];
  uint64_t v13 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);
  sub_10001CFB8(*(void *)(v5 + v2[9]), *(void *)(v5 + v2[9] + 8));
  uint64_t v14 = (uint64_t *)(v5 + v2[10]);
  unint64_t v15 = v14[1];
  if (v15 >> 60 != 15) {
    sub_10001CFB8(*v14, v15);
  }
  uint64_t v16 = (uint64_t *)(v5 + v2[11]);
  unint64_t v17 = v16[1];
  if (v17 >> 60 != 15) {
    sub_10001CFB8(*v16, v17);
  }
  sub_10001CFB8(*(void *)(v5 + v2[12]), *(void *)(v5 + v2[12] + 8));
  sub_10001CFB8(*(void *)(v5 + v2[13]), *(void *)(v5 + v2[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v1, v4 + v20, v3 | 7);
}

uint64_t sub_100485298(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return sub_100463C74(a1, v4);
}

uint64_t sub_100485308@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100463CEC(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_100485324(uint64_t a1)
{
  return sub_1012F7600(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(unsigned __int8 *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t sub_100485348()
{
  uint64_t v1 = *(void *)(sub_10000588C(&qword_101638CF0) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  swift_release();
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v3, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v3, v5);
  }

  return _swift_deallocObject(v0, v4 + v3 + 1, v2 | 7);
}

void sub_100485474(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(sub_10000588C(&qword_101638CF0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v1 + 16);
  int v6 = *(unsigned __int8 *)(v1 + v4 + *(void *)(v3 + 64));

  sub_100E5C604(v5, v1 + v4, v6, a1);
}

uint64_t sub_100485510(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void sub_100485578()
{
  sub_10044A174(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void *)(v0 + 48), *(unsigned __int8 *)(v0 + 56));
}

uint64_t sub_1004855A0()
{
  return sub_1004855CC((void (*)(void))&_swift_unknownObjectRelease, (void (*)(void))&_swift_release);
}

uint64_t sub_1004855CC(void (*a1)(void), void (*a2)(void))
{
  a1(*(void *)(v2 + 16));
  a2(*(void *)(v2 + 32));

  return _swift_deallocObject(v2, 40, 7);
}

uint64_t sub_100485628()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 113, 7);
}

uint64_t sub_100485694()
{
  uint64_t v1 = (int *)(type metadata accessor for LocationFetchConfiguration() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 128) & ~v2;
  uint64_t v4 = v3 + *(void *)(*(void *)v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v6 = v0 + v1[9] + v3;
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);

  return _swift_deallocObject(v0, v4, v5);
}

uint64_t sub_1004857C0()
{
  uint64_t v1 = *(void *)(type metadata accessor for LocationFetchConfiguration() - 8);
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 120);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 128) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_100457C24((unsigned __int8 *)(v0 + 16), v2, v3, v4);
}

uint64_t sub_100485828()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100485838()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v3 | 7;
  uint64_t v6 = *(void *)(v2 + 64) + v4 + 1;
  swift_unknownObjectRelease();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100485910()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = v0 + v3;
  char v5 = *(unsigned char *)(v0 + v3 + *(void *)(v2 + 64));
  uint64_t v6 = swift_task_alloc();
  long long v7 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + 16) = v6;
  *(void *)uint64_t v6 = v1;
  *(void *)(v6 + 8) = sub_100033F68;
  *(unsigned char *)(v6 + 192) = v5;
  *(void *)(v6 + 152) = v4;
  *(_OWORD *)(v6 + 136) = v7;
  return _swift_task_switch(sub_100464AF4, 0, 0);
}

unint64_t sub_100485A2C()
{
  unint64_t result = qword_1016556B0;
  if (!qword_1016556B0)
  {
    sub_10001D4B0(255, (unint64_t *)&unk_10164DC30);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016556B0);
  }
  return result;
}

uint64_t sub_100485A94(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100485AFC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100485B5C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_10001CD44(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 8))(v3, v4);
  *a2 = result;
  a2[1] = v6;
  return result;
}

uint64_t sub_100485BB4()
{
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_100485BEC()
{
  return sub_10045A6CC(*(unsigned char *)(v0 + 16), *(void *)(v0 + 24), *(double *)(v0 + 32), *(double *)(v0 + 40));
}

uint64_t sub_100485BFC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t _s10FetchGroupOwCP(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for BeaconKeyService.KeyStreamChange()
{
  return swift_bridgeObjectRelease();
}

uint64_t _s10FetchGroupOwca(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t _s10FetchGroupOwta(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100485CCC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 8);
}

uint64_t sub_100485CD4(uint64_t result, char a2)
{
  *(unsigned char *)(result + 8) = a2;
  return result;
}

ValueMetadata *_s10FetchGroupOMa()
{
  return &_s10FetchGroupON;
}

uint64_t sub_100485D78@<X0>(uint64_t a1@<X8>)
{
  return sub_100483FDC(a1);
}

uint64_t sub_100485D94(uint64_t *a1, uint64_t a2)
{
  return sub_100482698(a1, a2);
}

uint64_t *sub_100485DB4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for ServerStatusCode();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (uint64_t *)((char *)a1 + v8);
    uint64_t v10 = (uint64_t *)((char *)a2 + v8);
    uint64_t v11 = v10[1];
    void *v9 = *v10;
    v9[1] = v11;
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_100485E8C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ServerStatusCode();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);

  return swift_bridgeObjectRelease();
}

uint64_t sub_100485F04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ServerStatusCode();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_100485F8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ServerStatusCode();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100486028(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ServerStatusCode();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1004860A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ServerStatusCode();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100486130(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100486144);
}

uint64_t sub_100486144(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ServerStatusCode();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t sub_100486208(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10048621C);
}

uint64_t sub_10048621C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for ServerStatusCode();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
  }
  return result;
}

uint64_t type metadata accessor for LostModeResponse()
{
  uint64_t result = qword_101645900;
  if (!qword_101645900) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100486328()
{
  uint64_t result = type metadata accessor for ServerStatusCode();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_1004863BC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v25 = a2;
  uint64_t v4 = type metadata accessor for ServerStatusCode();
  uint64_t v26 = *(void *)(v4 - 8);
  uint64_t v27 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_101645938);
  uint64_t v28 = *(void *)(v7 - 8);
  uint64_t v29 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for LostModeResponse();
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1004867C0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  uint64_t v13 = v12;
  uint64_t v14 = v26;
  char v31 = 0;
  sub_1001C11EC();
  uint64_t v15 = v27;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v16 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
  uint64_t v24 = (uint64_t)v13;
  v16(v13, v6, v15);
  char v30 = 1;
  uint64_t v17 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v19 = v18;
  (*(void (**)(char *, uint64_t))(v28 + 8))(v9, v29);
  uint64_t v21 = v24;
  uint64_t v20 = v25;
  uint64_t v22 = (uint64_t *)(v24 + *(int *)(v10 + 20));
  *uint64_t v22 = v17;
  v22[1] = v19;
  sub_100486814(v21, v20);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  return sub_100486878(v21);
}

uint64_t sub_1004866BC()
{
  if (*v0) {
    return 0x4D6572756C696166;
  }
  else {
    return 0x6F43737574617473;
  }
}

uint64_t sub_100486708@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100486AE0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100486730(uint64_t a1)
{
  unint64_t v2 = sub_1004867C0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10048676C(uint64_t a1)
{
  unint64_t v2 = sub_1004867C0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1004867A8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1004863BC(a1, a2);
}

unint64_t sub_1004867C0()
{
  unint64_t result = qword_101645940;
  if (!qword_101645940)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645940);
  }
  return result;
}

uint64_t sub_100486814(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LostModeResponse();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100486878(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LostModeResponse();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for LostModeResponse.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1004869A0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for LostModeResponse.CodingKeys()
{
  return &type metadata for LostModeResponse.CodingKeys;
}

unint64_t sub_1004869DC()
{
  unint64_t result = qword_101645948;
  if (!qword_101645948)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645948);
  }
  return result;
}

unint64_t sub_100486A34()
{
  unint64_t result = qword_101645950;
  if (!qword_101645950)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645950);
  }
  return result;
}

unint64_t sub_100486A8C()
{
  unint64_t result = qword_101645958;
  if (!qword_101645958)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645958);
  }
  return result;
}

uint64_t sub_100486AE0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6F43737574617473 && a2 == 0xEA00000000006564;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4D6572756C696166 && a2 == 0xEE00656761737365)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_100486C04(uint64_t a1)
{
  return sub_100486C4C(a1, qword_10170DEE8);
}

uint64_t sub_100486C28(uint64_t a1)
{
  return sub_100486C4C(a1, qword_10170DF00);
}

uint64_t sub_100486C4C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for Logger();
  sub_10001E384(v3, a2);
  sub_100010324(v3, (uint64_t)a2);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100486CC4()
{
  type metadata accessor for ServerInteractionControllerKeeper();
  uint64_t v0 = swift_allocObject();
  uint64_t result = swift_defaultActor_initialize();
  *(void *)(v0 + 112) = _swiftEmptyArrayStorage;
  qword_10170DF18 = v0;
  return result;
}

uint64_t sub_100486D0C(uint64_t a1)
{
  sub_100486FD0();
  swift_beginAccess();
  swift_retain();
  unint64_t v3 = swift_bridgeObjectRetain();
  char v4 = sub_10048E488(v3, a1);
  swift_bridgeObjectRelease();
  uint64_t result = swift_release();
  if ((v4 & 1) == 0)
  {
    if (qword_101636B28 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100010324(v6, (uint64_t)qword_10170DF00);
    swift_retain_n();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v10 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136446210;
      v13[0] = v10;
      type metadata accessor for UUID();
      sub_10048EDE4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter();
      sub_1008FA0F0(v11, v12, v13);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Add new controller %{public}s", v9, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release_n();
    }
    swift_beginAccess();
    swift_retain();
    specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
    if (*(void *)((*(void *)(v1 + 112) & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*(void *)(v1 + 112) & 0xFFFFFFFFFFFFFF8)
                                                                                        + 0x18) >> 1)
      specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized Array._endMutation()();
    return swift_endAccess();
  }
  return result;
}

void sub_100486FD0()
{
  uint64_t v1 = v0;
  BOOL v2 = (unint64_t *)(v0 + 112);
  swift_beginAccess();
  unint64_t v3 = *(void *)(v0 + 112);
  if (v3 >> 62) {
    goto LABEL_80;
  }
  uint64_t v4 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v4)
  {
LABEL_10:
    swift_bridgeObjectRelease();
    if (*v2 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v5 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v5 = *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    goto LABEL_12;
  }
LABEL_3:
  uint64_t v5 = 0;
  while (1)
  {
    if ((v3 & 0xC000000000000001) != 0)
    {
      uint64_t v6 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else
    {
      uint64_t v6 = *(void *)(v3 + 8 * v5 + 32);
      swift_retain();
    }
    uint64_t v7 = *(void **)(v6 + qword_101645A48);
    [v7 lock];
    int v8 = *(unsigned __int8 *)(v6 + qword_101645A50);
    [v7 unlock];
    if (v8 == 1) {
      break;
    }
    swift_release();
    uint64_t v9 = v5 + 1;
    if (__OFADD__(v5, 1))
    {
      __break(1u);
LABEL_70:
      __break(1u);
LABEL_71:
      __break(1u);
LABEL_72:
      __break(1u);
LABEL_73:
      __break(1u);
LABEL_74:
      __break(1u);
LABEL_75:
      __break(1u);
LABEL_76:
      __break(1u);
LABEL_77:
      __break(1u);
LABEL_78:
      __break(1u);
LABEL_79:
      __break(1u);
LABEL_80:
      swift_bridgeObjectRetain();
      uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
      if (!v4) {
        goto LABEL_10;
      }
      goto LABEL_3;
    }
    ++v5;
    if (v9 == v4) {
      goto LABEL_10;
    }
  }
  uint64_t v42 = v2;
  if (qword_101636B28 != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  sub_100010324(v16, (uint64_t)qword_10170DF00);
  swift_retain_n();
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  uint64_t v41 = v1;
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = swift_slowAlloc();
    v43[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v19 = 136315138;
    type metadata accessor for UUID();
    sub_10048EDE4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
    *(void *)(v19 + 4) = sub_1008FA0F0(v20, v21, v43);
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Removing controller with %s", (uint8_t *)v19, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v1 = v41;
    swift_slowDealloc();
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();

    swift_release_n();
  }
  uint64_t v22 = v5 + 1;
  BOOL v2 = v42;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
LABEL_88:
    swift_bridgeObjectRetain();
    uint64_t v40 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v22 != v40) {
      goto LABEL_28;
    }
    goto LABEL_12;
  }
  if (*v42 >> 62) {
    goto LABEL_88;
  }
  if (v22 != *(void *)((*v42 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_28:
    uint64_t v23 = v5 + 5;
    while (1)
    {
      unint64_t v24 = v23 - 4;
      unint64_t v25 = *v2;
      if ((*v2 & 0xC000000000000001) != 0)
      {
        unint64_t v3 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else
      {
        if ((v24 & 0x8000000000000000) != 0) {
          goto LABEL_70;
        }
        if (v24 >= *(void *)((v25 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_71;
        }
        unint64_t v3 = *(void *)(v25 + 8 * v23);
        swift_retain();
      }
      uint64_t v26 = *(void **)(v3 + qword_101645A48);
      [v26 lock];
      int v27 = *(unsigned __int8 *)(v3 + qword_101645A50);
      [v26 unlock];
      if (v27 != 1) {
        break;
      }
      swift_retain_n();
      uint64_t v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v28, v29))
      {
        uint64_t v30 = swift_slowAlloc();
        v43[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v30 = 136315138;
        type metadata accessor for UUID();
        sub_10048EDE4((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)(v30 + 4) = sub_1008FA0F0(v31, v32, v43);
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "Removing controller with %s", (uint8_t *)v30, 0xCu);
        swift_arrayDestroy();
        uint64_t v1 = v41;
        swift_slowDealloc();
        swift_slowDealloc();
        swift_release();
      }
      else
      {

        swift_release_n();
      }
      BOOL v2 = v42;
LABEL_60:
      unint64_t v3 = v23 - 3;
      if (__OFADD__(v24, 1)) {
        goto LABEL_72;
      }
      if (*v2 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v39 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v39 = *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      ++v23;
      if (v3 == v39) {
        goto LABEL_12;
      }
    }
    swift_release();
    if (v24 == v5)
    {
LABEL_55:
      if (__OFADD__(v5++, 1)) {
        goto LABEL_73;
      }
      goto LABEL_60;
    }
    unint64_t v33 = *v2;
    if ((*v2 & 0xC000000000000001) != 0)
    {
      unint64_t v3 = specialized _ArrayBuffer._getElementSlowPath(_:)();
      unint64_t v33 = *v2;
      if ((*v2 & 0xC000000000000001) == 0)
      {
LABEL_41:
        if ((v24 & 0x8000000000000000) != 0) {
          goto LABEL_76;
        }
        if (v24 >= *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_77;
        }
        uint64_t v34 = *(void *)(v33 + 8 * v23);
        swift_retain();
        goto LABEL_44;
      }
    }
    else
    {
      if (v5 < 0) {
        goto LABEL_74;
      }
      if ((unint64_t)v5 >= *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_75;
      }
      unint64_t v3 = *(void *)(v33 + 8 * v5 + 32);
      swift_retain();
      if ((v33 & 0xC000000000000001) == 0) {
        goto LABEL_41;
      }
    }
    uint64_t v34 = specialized _ArrayBuffer._getElementSlowPath(_:)();
    unint64_t v33 = *v2;
LABEL_44:
    int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
    *BOOL v2 = v33;
    if (!isUniquelyReferenced_nonNull_bridgeObject
      || (v33 & 0x8000000000000000) != 0
      || (v33 & 0x4000000000000000) != 0)
    {
      unint64_t v33 = sub_100BBD2DC(v33);
      *BOOL v2 = v33;
    }
    *(void *)((v33 & 0xFFFFFFFFFFFFFF8) + 8 * v5 + 0x20) = v34;
    swift_release();
    specialized Array._endMutation()();
    unint64_t v36 = *v2;
    int v37 = swift_isUniquelyReferenced_nonNull_bridgeObject();
    *BOOL v2 = v36;
    if (!v37 || (v36 & 0x8000000000000000) != 0 || (v36 & 0x4000000000000000) != 0)
    {
      unint64_t v36 = sub_100BBD2DC(v36);
      *BOOL v2 = v36;
    }
    if ((v24 & 0x8000000000000000) != 0) {
      goto LABEL_78;
    }
    if (v24 >= *(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      goto LABEL_79;
    }
    *(void *)((v36 & 0xFFFFFFFFFFFFFF8) + 8 * v23) = v3;
    swift_release();
    specialized Array._endMutation()();
    goto LABEL_55;
  }
LABEL_12:
  if (*v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v10 >= v5)
    {
LABEL_14:
      sub_100A29F20(v5, v10);
      swift_endAccess();
      if (qword_101636B28 == -1) {
        goto LABEL_15;
      }
      goto LABEL_84;
    }
  }
  else
  {
    uint64_t v10 = *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v10 >= v5) {
      goto LABEL_14;
    }
  }
  __break(1u);
LABEL_84:
  swift_once();
LABEL_15:
  uint64_t v11 = type metadata accessor for Logger();
  sub_100010324(v11, (uint64_t)qword_10170DF00);
  swift_retain();
  unint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v14 = 134217984;
    if (*v2 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v15 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v15 = *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    v43[1] = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Active controllers count after cleanup is %ld", v14, 0xCu);
    swift_slowDealloc();
  }
  else
  {

    swift_release();
  }
}

uint64_t type metadata accessor for ServerInteractionControllerKeeper()
{
  return self;
}

uint64_t type metadata accessor for ServerInteractionController(uint64_t a1)
{
  return sub_1000F4EA4(a1, (uint64_t *)&unk_101645A58);
}

uint64_t sub_100487908()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_initClassMetadata2();
    if (!result) {
      return 0;
    }
  }
  return result;
}

void sub_1004879DC()
{
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + qword_101645A38);
  swift_unownedRelease();
  uint64_t v1 = v0 + qword_10170DF20;
  uint64_t v2 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  unint64_t v3 = *(void **)(v0 + qword_101645A48);
}

uint64_t sub_100487A88()
{
  sub_1003444E0();
  swift_retain_n();
  uint64_t v0 = static OS_os_log.default.getter();
  os_log_type_t v1 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v0, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    uint64_t v9 = swift_slowAlloc();
    *(_DWORD *)uint64_t v2 = 136315138;
    type metadata accessor for ServerInteractionController(0);
    swift_retain();
    uint64_t v3 = String.init<A>(describing:)();
    sub_1008FA0F0(v3, v4, &v9);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl((void *)&_mh_execute_header, v0, v1, "ServerInteractionController deinit (%s", v2, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  uint64_t v5 = FMNServerInteractionController.deinit();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v5 + qword_101645A38);
  swift_unownedRelease();
  uint64_t v6 = v5 + qword_10170DF20;
  uint64_t v7 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);

  return v5;
}

uint64_t sub_100487CA8()
{
  sub_100487A88();

  return swift_deallocClassInstance();
}

uint64_t sub_100487CFC(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  v3[5] = *v2;
  sub_10000588C(&qword_10164DBB0);
  v3[6] = swift_task_alloc();
  return _swift_task_switch(sub_100487DBC, 0, 0);
}

uint64_t sub_100487DBC()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  uint64_t v4 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v5 = *(void **)(v3 + qword_101645A48);
  [v5 lock];
  *(unsigned char *)(v3 + qword_101645A50) = 0;
  [v5 unlock];
  uint64_t v6 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v1, 1, 1, v6);
  uint64_t v7 = swift_allocObject();
  swift_weakInit();
  int v8 = (void *)swift_allocObject();
  long long v8[2] = 0;
  v8[3] = 0;
  void v8[4] = v7;
  sub_1008F5E44(v1, (uint64_t)&unk_101645BB0, (uint64_t)v8);
  swift_release();
  uint64_t v9 = (void *)swift_task_alloc();
  v0[7] = v9;
  v9[2] = v3;
  v9[3] = v4;
  v9[4] = v2;
  uint64_t v10 = (void *)swift_task_alloc();
  v0[8] = v10;
  uint64_t v11 = type metadata accessor for FMNServerInteractionController.FMNResponseFields();
  *uint64_t v10 = v0;
  v10[1] = sub_100487FAC;
  uint64_t v12 = v0[2];
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v12, 0, 0, 0x71657228646E6573, 0xEE00293A74736575, sub_10048EC54, v9, v11);
}

uint64_t sub_100487FAC()
{
  uint64_t v2 = *v1;
  *(void *)(v2 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    return _swift_task_switch(sub_1004880F4, 0, 0);
  }
  else
  {
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v3 = *(uint64_t (**)(void))(v2 + 8);
    return v3();
  }
}

uint64_t sub_1004880F4()
{
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100488160(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v58 = a4;
  uint64_t v53 = a1;
  uint64_t v57 = sub_10000588C(&qword_101645BB8);
  uint64_t v56 = *(void *)(v57 - 8);
  __chkstk_darwin(v57);
  uint64_t v54 = v6;
  uint64_t v55 = (char *)v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for URLComponents();
  uint64_t v52 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10048C190(a3, (uint64_t)v67);
  uint64_t v59 = a2;
  sub_10001D010(a2 + qword_101645A38, (uint64_t)v66);
  if (qword_101636B20 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  uint64_t v14 = sub_100010324(v13, (uint64_t)qword_10170DEE8);
  sub_10001D010((uint64_t)v66, (uint64_t)&v64);
  sub_10001D010((uint64_t)v67, (uint64_t)v62);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.info.getter();
  BOOL v17 = os_log_type_enabled(v15, v16);
  uint64_t v51 = v10;
  if (v17)
  {
    uint64_t v18 = swift_slowAlloc();
    v50[0] = v14;
    uint64_t v19 = v18;
    uint64_t v61 = swift_slowAlloc();
    *(_DWORD *)uint64_t v19 = 136315394;
    v50[1] = v9;
    sub_10001CD44(&v64, v65);
    dispatch thunk of FMNRequestConfigurating.urlComponents.getter();
    sub_10048EDE4(&qword_101645B80, (void (*)(uint64_t))&type metadata accessor for URLComponents);
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v22 = v21;
    (*(void (**)(char *, uint64_t))(v52 + 8))(v12, v10);
    uint64_t v60 = sub_1008FA0F0(v20, v22, &v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v64);
    *(_WORD *)(v19 + 12) = 2080;
    sub_10001CD44(v62, v63);
    dispatch thunk of FMNRequestContentRepresentable.headerDictionary.getter();
    uint64_t v23 = Dictionary.description.getter();
    unint64_t v25 = v24;
    swift_bridgeObjectRelease();
    uint64_t v60 = sub_1008FA0F0(v23, v25, &v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v62);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "SendRequest: %s headerDictionary - %s", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v64);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v62);
  }

  sub_10001D010((uint64_t)v66, (uint64_t)&v64);
  sub_10001D010((uint64_t)v67, (uint64_t)v62);
  uint64_t v26 = Logger.logObject.getter();
  os_log_type_t v27 = static os_log_type_t.info.getter();
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = swift_slowAlloc();
    uint64_t v61 = swift_slowAlloc();
    *(_DWORD *)uint64_t v28 = 136315394;
    sub_10001CD44(&v64, v65);
    dispatch thunk of FMNRequestConfigurating.urlComponents.getter();
    sub_10048EDE4(&qword_101645B80, (void (*)(uint64_t))&type metadata accessor for URLComponents);
    uint64_t v29 = v51;
    uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v32 = v31;
    (*(void (**)(char *, uint64_t))(v52 + 8))(v12, v29);
    uint64_t v60 = sub_1008FA0F0(v30, v32, &v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v64);
    *(_WORD *)(v28 + 12) = 2080;
    sub_10001CD44(v62, v63);
    uint64_t v33 = dispatch thunk of FMNRequestContentRepresentable.body.getter();
    unint64_t v35 = v34;
    static String.Encoding.utf8.getter();
    uint64_t v36 = String.init(data:encoding:)();
    unint64_t v38 = v37;
    sub_10001CFB8(v33, v35);
    if (v38) {
      uint64_t v39 = v36;
    }
    else {
      uint64_t v39 = 0;
    }
    if (v38) {
      unint64_t v40 = v38;
    }
    else {
      unint64_t v40 = 0xE000000000000000;
    }
    uint64_t v60 = sub_1008FA0F0(v39, v40, &v61);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v62);
    _os_log_impl((void *)&_mh_execute_header, v26, v27, "SendRequest: %s body - %s", (uint8_t *)v28, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v64);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v62);
  }

  uint64_t v41 = swift_allocObject();
  swift_weakInit();
  uint64_t v42 = v56;
  uint64_t v43 = v55;
  uint64_t v44 = v57;
  (*(void (**)(char *, uint64_t, uint64_t))(v56 + 16))(v55, v53, v57);
  sub_10001D010((uint64_t)v66, (uint64_t)&v64);
  unint64_t v45 = (*(unsigned __int8 *)(v42 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80);
  unint64_t v46 = (v54 + v45 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v47 = (v46 + 47) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v48 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v42 + 32))(v48 + v45, v43, v44);
  sub_10001CEB0(&v64, v48 + v46);
  *(void *)(v48 + v47) = v41;
  *(void *)(v48 + ((v47 + 15) & 0xFFFFFFFFFFFFFFF8)) = v58;
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v66);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v67);
  return swift_release();
}

uint64_t sub_1004889B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v106 = a2;
  uint64_t v107 = (char *)a3;
  uint64_t v6 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)v92 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v9 - 8);
  uint64_t v94 = (char *)v92 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for URLComponents();
  uint64_t v101 = *(void *)(v11 - 8);
  uint64_t v102 = v11;
  __chkstk_darwin(v11);
  uint64_t v100 = (char *)v92 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for FMNServerInteractionController.FMNResponseFields();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v99 = (char *)v92 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v98 = (char *)v92 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v96 = (char *)v92 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v23 = (char *)v92 - v22;
  __chkstk_darwin(v21);
  unint64_t v25 = (char *)v92 - v24;
  uint64_t v26 = sub_10000588C(&qword_101645B58);
  uint64_t v27 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v29 = (void *)((char *)v92 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v27 + 16))(v29, a1, v26);
  int v30 = (*(uint64_t (**)(uint64_t *, uint64_t))(v27 + 88))(v29, v26);
  if (v30 == enum case for LegacyResult.success<A>(_:))
  {
    v92[2] = a4;
    uint64_t v93 = v8;
    (*(void (**)(uint64_t *, uint64_t))(v27 + 96))(v29, v26);
    (*(void (**)(char *, uint64_t *, uint64_t))(v14 + 32))(v25, v29, v13);
    uint64_t v31 = FMNServerInteractionController.FMNResponseFields.responseHeaders.getter();
    sub_10048E5A4(v31);
    swift_bridgeObjectRelease();
    if (qword_101636B20 != -1) {
      swift_once();
    }
    uint64_t v32 = type metadata accessor for Logger();
    uint64_t v33 = sub_100010324(v32, (uint64_t)qword_10170DEE8);
    sub_10001D010((uint64_t)v107, (uint64_t)v110);
    unint64_t v104 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
    uint64_t v105 = v14 + 16;
    v104(v23, v25, v13);
    uint64_t v95 = v33;
    unint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.info.getter();
    BOOL v36 = os_log_type_enabled(v34, v35);
    v92[1] = v14;
    unint64_t v103 = v25;
    if (v36)
    {
      uint64_t v37 = swift_slowAlloc();
      uint64_t v38 = v14;
      v92[0] = swift_slowAlloc();
      uint64_t v109 = (char *)v92[0];
      *(_DWORD *)uint64_t v37 = 136315394;
      uint64_t v97 = (void (*)(char *, uint64_t))(v37 + 4);
      sub_10001CD44(v110, v111);
      uint64_t v39 = v100;
      dispatch thunk of FMNRequestConfigurating.urlComponents.getter();
      sub_10048EDE4(&qword_101645B80, (void (*)(uint64_t))&type metadata accessor for URLComponents);
      uint64_t v40 = v102;
      uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v43 = v42;
      (*(void (**)(char *, uint64_t))(v101 + 8))(v39, v40);
      uint64_t v108 = sub_1008FA0F0(v41, v43, (uint64_t *)&v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v110);
      *(_WORD *)(v37 + 12) = 2048;
      uint64_t v44 = FMNServerInteractionController.FMNResponseFields.statusCode.getter();
      uint64_t v45 = v38;
      unint64_t v25 = v103;
      uint64_t v97 = *(void (**)(char *, uint64_t))(v45 + 8);
      v97(v23, v13);
      uint64_t v108 = v44;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "SendRequest %s Received Response: status - %ld", (uint8_t *)v37, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v97 = *(void (**)(char *, uint64_t))(v14 + 8);
      v97(v23, v13);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v110);
    }

    uint64_t v52 = v96;
    sub_10001D010((uint64_t)v107, (uint64_t)v110);
    v104(v52, v25, v13);
    uint64_t v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.info.getter();
    int v55 = v54;
    if (os_log_type_enabled(v53, v54))
    {
      uint64_t v56 = swift_slowAlloc();
      uint64_t v96 = (char *)swift_slowAlloc();
      uint64_t v109 = v96;
      *(_DWORD *)uint64_t v56 = 136315394;
      sub_10001CD44(v110, v111);
      uint64_t v57 = v100;
      LODWORD(v92[0]) = v55;
      dispatch thunk of FMNRequestConfigurating.urlComponents.getter();
      sub_10048EDE4(&qword_101645B80, (void (*)(uint64_t))&type metadata accessor for URLComponents);
      uint64_t v58 = v102;
      uint64_t v59 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v61 = v60;
      (*(void (**)(char *, uint64_t))(v101 + 8))(v57, v58);
      uint64_t v108 = sub_1008FA0F0(v59, v61, (uint64_t *)&v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v110);
      *(_WORD *)(v56 + 12) = 2080;
      FMNServerInteractionController.FMNResponseFields.responseHeaders.getter();
      uint64_t v62 = Dictionary.description.getter();
      unint64_t v64 = v63;
      swift_bridgeObjectRelease();
      uint64_t v108 = sub_1008FA0F0(v62, v64, (uint64_t *)&v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v97(v52, v13);
      _os_log_impl((void *)&_mh_execute_header, v53, v92[0], "SendRequest %s Received Response: header - %s", (uint8_t *)v56, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v110);
      v97(v52, v13);
    }

    uint64_t v65 = v98;
    sub_10001D010((uint64_t)v107, (uint64_t)v110);
    v104(v65, v103, v13);
    uint64_t v66 = Logger.logObject.getter();
    os_log_type_t v67 = static os_log_type_t.info.getter();
    int v68 = v67;
    if (os_log_type_enabled(v66, v67))
    {
      uint64_t v69 = swift_slowAlloc();
      uint64_t v107 = (char *)swift_slowAlloc();
      uint64_t v109 = v107;
      *(_DWORD *)uint64_t v69 = 136315394;
      sub_10001CD44(v110, v111);
      uint64_t v70 = v100;
      LODWORD(v98) = v68;
      dispatch thunk of FMNRequestConfigurating.urlComponents.getter();
      sub_10048EDE4(&qword_101645B80, (void (*)(uint64_t))&type metadata accessor for URLComponents);
      uint64_t v71 = v102;
      uint64_t v72 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v74 = v73;
      (*(void (**)(char *, uint64_t))(v101 + 8))(v70, v71);
      uint64_t v108 = sub_1008FA0F0(v72, v74, (uint64_t *)&v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v110);
      *(_WORD *)(v69 + 12) = 2080;
      uint64_t v75 = FMNServerInteractionController.FMNResponseFields.data.getter();
      unint64_t v77 = v76;
      static String.Encoding.utf8.getter();
      uint64_t v78 = String.init(data:encoding:)();
      uint64_t v79 = v65;
      unint64_t v81 = v80;
      sub_10001CFB8(v75, v77);
      if (v81) {
        uint64_t v82 = v78;
      }
      else {
        uint64_t v82 = 0;
      }
      if (v81) {
        unint64_t v83 = v81;
      }
      else {
        unint64_t v83 = 0xE000000000000000;
      }
      uint64_t v108 = sub_1008FA0F0(v82, v83, (uint64_t *)&v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v84 = v97;
      v97(v79, v13);
      _os_log_impl((void *)&_mh_execute_header, v66, (os_log_type_t)v98, "SendRequest %s Received Response: body - %s", (uint8_t *)v69, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v110);
      uint64_t v84 = v97;
      v97(v65, v13);
    }

    uint64_t v8 = v93;
    uint64_t v85 = v103;
    v104(v99, v103, v13);
    sub_10000588C(&qword_101645BB8);
    CheckedContinuation.resume(returning:)();
    v84(v85, v13);
  }
  else
  {
    if (v30 != enum case for LegacyResult.failure<A>(_:))
    {
      uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
      __break(1u);
      return result;
    }
    (*(void (**)(uint64_t *, uint64_t))(v27 + 96))(v29, v26);
    uint64_t v46 = *v29;
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v47 = swift_allocObject();
    *(_OWORD *)(v47 + 16) = xmmword_101342130;
    swift_getErrorValue();
    uint64_t v48 = Error.localizedDescription.getter();
    uint64_t v50 = v49;
    *(void *)(v47 + 56) = &type metadata for String;
    *(void *)(v47 + 64) = sub_10000B4CC();
    *(void *)(v47 + 32) = v48;
    *(void *)(v47 + 40) = v50;
    sub_1003444E0();
    uint64_t v51 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_bridgeObjectRelease();
    v110[0] = v46;
    sub_10000588C(&qword_101645BB8);
    CheckedContinuation.resume(throwing:)();
  }
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v87 = result;
    uint64_t v88 = *(void **)(result + qword_101645A48);
    [v88 lock];
    *(unsigned char *)(v87 + qword_101645A50) = 1;
    [v88 unlock];
    uint64_t v89 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v89 - 8) + 56))(v8, 1, 1, v89);
    uint64_t v90 = swift_allocObject();
    swift_weakInit();
    uint64_t v91 = (void *)swift_allocObject();
    v91[2] = 0;
    v91[3] = 0;
    v91[4] = v90;
    sub_1008F5FF0((uint64_t)v8, (uint64_t)&unk_101645BC0, (uint64_t)v91);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1004897CC(uint64_t a1, void (*a2)(void *), uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v37 = a5;
  uint64_t v38 = a2;
  int v39 = a4;
  uint64_t v6 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v6 - 8);
  BOOL v36 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for FMNServerInteractionController.FMNResponseFields();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000588C(&qword_101645B98);
  __chkstk_darwin(v12);
  uint64_t v14 = (uint64_t *)((char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = sub_10000588C(&qword_101645B58);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (uint64_t *)((char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v16 + 16))(v18, a1, v15);
  int v19 = (*(uint64_t (**)(uint64_t *, uint64_t))(v16 + 88))(v18, v15);
  if (v19 == enum case for LegacyResult.success<A>(_:))
  {
    (*(void (**)(uint64_t *, uint64_t))(v16 + 96))(v18, v15);
    (*(void (**)(char *, uint64_t *, uint64_t))(v9 + 32))(v11, v18, v8);
    uint64_t v20 = FMNServerInteractionController.FMNResponseFields.responseHeaders.getter();
    sub_10048E5A4(v20);
    swift_bridgeObjectRelease();
    (*(void (**)(void *, char *, uint64_t))(v9 + 16))(v14, v11, v8);
    swift_storeEnumTagMultiPayload();
    v38(v14);
    sub_10001DAB4((uint64_t)v14, &qword_101645B98);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    if ((v39 & 1) == 0) {
      return result;
    }
    goto LABEL_6;
  }
  uint64_t v22 = v38;
  if (v19 != enum case for LegacyResult.failure<A>(_:))
  {
    uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
    __break(1u);
    return result;
  }
  (*(void (**)(uint64_t *, uint64_t))(v16 + 96))(v18, v15);
  uint64_t v23 = *v18;
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v24 = swift_allocObject();
  *(_OWORD *)(v24 + 16) = xmmword_101342130;
  swift_getErrorValue();
  uint64_t v25 = Error.localizedDescription.getter();
  uint64_t v27 = v26;
  *(void *)(v24 + 56) = &type metadata for String;
  *(void *)(v24 + 64) = sub_10000B4CC();
  *(void *)(v24 + 32) = v25;
  *(void *)(v24 + 40) = v27;
  sub_1003444E0();
  uint64_t v28 = (void *)static OS_os_log.default.getter();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();
  swift_bridgeObjectRelease();

  *uint64_t v14 = v23;
  swift_storeEnumTagMultiPayload();
  swift_errorRetain();
  v22(v14);
  swift_errorRelease();
  uint64_t result = sub_10001DAB4((uint64_t)v14, &qword_101645B98);
  if (v39)
  {
LABEL_6:
    swift_beginAccess();
    uint64_t result = swift_weakLoadStrong();
    if (result)
    {
      uint64_t v29 = result;
      int v30 = *(void **)(result + qword_101645A48);
      [v30 lock];
      *(unsigned char *)(v29 + qword_101645A50) = 1;
      [v30 unlock];
      uint64_t v31 = type metadata accessor for TaskPriority();
      uint64_t v32 = (uint64_t)v36;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v36, 1, 1, v31);
      uint64_t v33 = swift_allocObject();
      swift_weakInit();
      unint64_t v34 = (void *)swift_allocObject();
      void v34[2] = 0;
      v34[3] = 0;
      v34[4] = v33;
      sub_1008F5FF0(v32, (uint64_t)&unk_101645BA0, (uint64_t)v34);
      swift_release();
      return swift_release();
    }
  }
  return result;
}

uint64_t sub_100489D2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v106 = a2;
  uint64_t v107 = (void (*)(void, void))a3;
  uint64_t v6 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v90 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v9 - 8);
  uint64_t v94 = (char *)&v90 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for URLComponents();
  uint64_t v104 = *(void *)(v11 - 8);
  uint64_t v105 = v11;
  __chkstk_darwin(v11);
  unint64_t v103 = (char *)&v90 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for FMNServerInteractionController.FMNResponseFields();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v100 = (char *)&v90 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v102 = (char *)&v90 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v90 - v20;
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v90 - v22;
  uint64_t v24 = sub_10000588C(&qword_101645B98);
  __chkstk_darwin(v24);
  uint64_t v26 = (char *)&v90 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = a4 + 16;
  sub_10048EB38(a1, (uint64_t)v26);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v28 = swift_allocObject();
    *(_OWORD *)(v28 + 16) = xmmword_101342130;
    swift_getErrorValue();
    uint64_t v29 = Error.localizedDescription.getter();
    uint64_t v31 = v30;
    *(void *)(v28 + 56) = &type metadata for String;
    *(void *)(v28 + 64) = sub_10000B4CC();
    *(void *)(v28 + 32) = v29;
    *(void *)(v28 + 40) = v31;
    sub_1003444E0();
    uint64_t v32 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();
    swift_bridgeObjectRelease();

    Future.finish(error:)();
    swift_errorRelease();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v23, v26, v13);
    if (qword_101636B20 != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    uint64_t v34 = sub_100010324(v33, (uint64_t)qword_10170DEE8);
    sub_10001D010((uint64_t)v107, (uint64_t)v110);
    uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
    uint64_t v97 = v14 + 16;
    uint64_t v96 = v35;
    v35(v21, v23, v13);
    uint64_t v98 = v34;
    BOOL v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.info.getter();
    BOOL v38 = os_log_type_enabled(v36, v37);
    uint64_t v101 = v23;
    uint64_t v93 = v8;
    uint64_t v92 = v27;
    uint64_t v95 = v14;
    if (v38)
    {
      uint64_t v39 = swift_slowAlloc();
      uint64_t v99 = (void (*)(void, void))swift_slowAlloc();
      uint64_t v109 = v99;
      *(_DWORD *)uint64_t v39 = 136315394;
      uint64_t v91 = v39 + 4;
      sub_10001CD44(v110, v111);
      uint64_t v40 = v103;
      dispatch thunk of FMNRequestConfigurating.urlComponents.getter();
      sub_10048EDE4(&qword_101645B80, (void (*)(uint64_t))&type metadata accessor for URLComponents);
      uint64_t v41 = v105;
      uint64_t v42 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v44 = v43;
      (*(void (**)(char *, uint64_t))(v104 + 8))(v40, v41);
      uint64_t v108 = sub_1008FA0F0(v42, v44, (uint64_t *)&v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v110);
      *(_WORD *)(v39 + 12) = 2048;
      uint64_t v45 = FMNServerInteractionController.FMNResponseFields.statusCode.getter();
      uint64_t v46 = *(void (**)(char *, uint64_t))(v14 + 8);
      v46(v21, v13);
      uint64_t v108 = v45;
      uint64_t v23 = v101;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "SendRequest %s Received Response: status - %ld", (uint8_t *)v39, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v46 = *(void (**)(char *, uint64_t))(v14 + 8);
      v46(v21, v13);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v110);
    }

    uint64_t v47 = v13;
    uint64_t v99 = (void (*)(void, void))v46;
    sub_10001D010((uint64_t)v107, (uint64_t)v110);
    uint64_t v48 = v102;
    v96(v102, v23, v13);
    uint64_t v49 = Logger.logObject.getter();
    os_log_type_t v50 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v49, v50))
    {
      uint64_t v51 = swift_slowAlloc();
      uint64_t v91 = swift_slowAlloc();
      uint64_t v109 = (void (*)(void, void))v91;
      *(_DWORD *)uint64_t v51 = 136315394;
      sub_10001CD44(v110, v111);
      uint64_t v52 = v103;
      dispatch thunk of FMNRequestConfigurating.urlComponents.getter();
      sub_10048EDE4(&qword_101645B80, (void (*)(uint64_t))&type metadata accessor for URLComponents);
      uint64_t v53 = v105;
      uint64_t v54 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v56 = v55;
      (*(void (**)(char *, uint64_t))(v104 + 8))(v52, v53);
      uint64_t v108 = sub_1008FA0F0(v54, v56, (uint64_t *)&v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v110);
      *(_WORD *)(v51 + 12) = 2080;
      uint64_t v57 = v102;
      FMNServerInteractionController.FMNResponseFields.responseHeaders.getter();
      uint64_t v58 = Dictionary.description.getter();
      uint64_t v59 = v47;
      unint64_t v61 = v60;
      swift_bridgeObjectRelease();
      uint64_t v108 = sub_1008FA0F0(v58, v61, (uint64_t *)&v109);
      uint64_t v23 = v101;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v47 = v59;
      swift_bridgeObjectRelease();
      v99(v57, v59);
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "SendRequest %s Received Response: header - %s", (uint8_t *)v51, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v110);
      v99(v48, v13);
    }

    uint64_t v62 = v100;
    sub_10001D010((uint64_t)v107, (uint64_t)v110);
    v96(v62, v23, v47);
    unint64_t v63 = Logger.logObject.getter();
    os_log_type_t v64 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v63, v64))
    {
      uint64_t v65 = swift_slowAlloc();
      uint64_t v107 = (void (*)(void, void))swift_slowAlloc();
      uint64_t v109 = v107;
      *(_DWORD *)uint64_t v65 = 136315394;
      uint64_t v66 = v47;
      sub_10001CD44(v110, v111);
      os_log_type_t v67 = v103;
      dispatch thunk of FMNRequestConfigurating.urlComponents.getter();
      sub_10048EDE4(&qword_101645B80, (void (*)(uint64_t))&type metadata accessor for URLComponents);
      uint64_t v68 = v105;
      uint64_t v69 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v71 = v70;
      (*(void (**)(char *, uint64_t))(v104 + 8))(v67, v68);
      uint64_t v108 = sub_1008FA0F0(v69, v71, (uint64_t *)&v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v110);
      *(_WORD *)(v65 + 12) = 2080;
      uint64_t v72 = FMNServerInteractionController.FMNResponseFields.data.getter();
      unint64_t v74 = v73;
      static String.Encoding.utf8.getter();
      uint64_t v75 = String.init(data:encoding:)();
      unint64_t v76 = v62;
      unint64_t v78 = v77;
      sub_10001CFB8(v72, v74);
      if (v78) {
        uint64_t v79 = v75;
      }
      else {
        uint64_t v79 = 0;
      }
      uint64_t v47 = v66;
      if (v78) {
        unint64_t v80 = v78;
      }
      else {
        unint64_t v80 = 0xE000000000000000;
      }
      uint64_t v108 = sub_1008FA0F0(v79, v80, (uint64_t *)&v109);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v81 = v66;
      uint64_t v82 = (void (*)(char *, uint64_t))v99;
      v99(v76, v81);
      _os_log_impl((void *)&_mh_execute_header, v63, v64, "SendRequest %s Received Response: body - %s", (uint8_t *)v65, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v110);
      uint64_t v82 = (void (*)(char *, uint64_t))v99;
      v99(v62, v47);
    }

    uint64_t v8 = v93;
    unint64_t v83 = v101;
    Future.finish(result:)();
    v82(v83, v47);
  }
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v85 = result;
    unint64_t v86 = *(void **)(result + qword_101645A48);
    [v86 lock];
    *(unsigned char *)(v85 + qword_101645A50) = 1;
    [v86 unlock];
    uint64_t v87 = type metadata accessor for TaskPriority();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v87 - 8) + 56))(v8, 1, 1, v87);
    uint64_t v88 = swift_allocObject();
    swift_weakInit();
    uint64_t v89 = (void *)swift_allocObject();
    v89[2] = 0;
    v89[3] = 0;
    v89[4] = v88;
    sub_1008F5FF0((uint64_t)v8, (uint64_t)&unk_101645BA8, (uint64_t)v89);
    swift_release();
    return swift_release();
  }
  return result;
}

void sub_10048AA28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v54 = a6;
  uint64_t v55 = a4;
  uint64_t v56 = a5;
  uint64_t v57 = a2;
  uint64_t v7 = type metadata accessor for FMNServerInteractionController.FMNResponseFields();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000588C(&qword_101645B50);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000588C(&qword_101645B58);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v53 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v20, a1, v17);
  int v21 = (*(uint64_t (**)(char *, uint64_t))(v18 + 88))(v20, v17);
  if (v21 == enum case for LegacyResult.success<A>(_:))
  {
    (*(void (**)(char *, uint64_t))(v18 + 96))(v20, v17);
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v20, v7);
    if ((unint64_t)(FMNServerInteractionController.FMNResponseFields.statusCode.getter() - 600) < 0xFFFFFFFFFFFFFF9CLL)
    {
      uint64_t v22 = FMNServerInteractionController.FMNResponseFields.responseHeaders.getter();
      sub_10048E5A4(v22);
      swift_bridgeObjectRelease();
      Future.finish(result:)();
      swift_beginAccess();
      uint64_t Strong = swift_weakLoadStrong();
      if (Strong)
      {
        uint64_t v24 = Strong;
        uint64_t v25 = *(void **)(Strong + qword_101645A48);
        [v25 lock];
        *(unsigned char *)(v24 + qword_101645A50) = 1;
        [v25 unlock];
        uint64_t v26 = type metadata accessor for TaskPriority();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v13, 1, 1, v26);
        uint64_t v27 = swift_allocObject();
        swift_weakInit();
        uint64_t v28 = (void *)swift_allocObject();
        uint64_t v28[2] = 0;
        void v28[3] = 0;
        v28[4] = v27;
        sub_1008F5FF0((uint64_t)v13, (uint64_t)&unk_101645B68, (uint64_t)v28);
        swift_release();
        swift_release();
      }
      goto LABEL_14;
    }
    static os_log_type_t.error.getter();
    sub_1003444E0();
    os_log_type_t v37 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();

    swift_beginAccess();
    if (!swift_weakLoadStrong())
    {
LABEL_14:
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      return;
    }
    uint64_t v38 = type metadata accessor for FMNRedirectHostStore();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v16, 1, 1, v38);
    uint64_t v39 = swift_allocObject();
    swift_beginAccess();
    swift_weakLoadStrong();
    swift_weakInit();
    swift_release();
    sub_10001D010(v55, (uint64_t)v58);
    uint64_t v40 = (void *)swift_allocObject();
    v40[2] = v57;
    sub_10001CEB0(v58, (uint64_t)(v40 + 3));
    uint64_t v41 = v54;
    v40[8] = v39;
    v40[9] = v41;
    swift_retain();
    swift_retain();
    dispatch thunk of FMNServerInteractionController.retryRequest(consolidatedContent:redirectedHostStore:responseHandler:retryCount:)();
    swift_release();
    swift_release();
    sub_10001DAB4((uint64_t)v16, &qword_101645B50);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    goto LABEL_19;
  }
  if (v21 != enum case for LegacyResult.failure<A>(_:))
  {
    _diagnoseUnexpectedEnumCase<A>(type:)();
    __break(1u);
    return;
  }
  (*(void (**)(char *, uint64_t))(v18 + 96))(v20, v17);
  uint64_t v29 = (void *)_convertErrorToNSError(_:)();
  id v30 = [v29 domain];
  uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v33 = v32;

  if (v31 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v33 == v34)
  {
    swift_bridgeObjectRelease_n();
  }
  else
  {
    char v36 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v36 & 1) == 0)
    {
LABEL_20:

      Future.finish(error:)();
      swift_beginAccess();
      uint64_t v47 = swift_weakLoadStrong();
      if (v47)
      {
        uint64_t v48 = v47;
        uint64_t v49 = *(void **)(v47 + qword_101645A48);
        [v49 lock];
        *(unsigned char *)(v48 + qword_101645A50) = 1;
        [v49 unlock];
        uint64_t v50 = type metadata accessor for TaskPriority();
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v50 - 8) + 56))(v13, 1, 1, v50);
        uint64_t v51 = swift_allocObject();
        swift_weakInit();
        uint64_t v52 = (void *)swift_allocObject();
        v52[2] = 0;
        v52[3] = 0;
        v52[4] = v51;
        sub_1008F5FF0((uint64_t)v13, (uint64_t)&unk_101645B70, (uint64_t)v52);
        swift_release();
        swift_errorRelease();
        swift_release();
      }
      else
      {
        swift_errorRelease();
      }
      return;
    }
  }
  if ([v29 code] != (id)-1001) {
    goto LABEL_20;
  }
  static os_log_type_t.error.getter();
  sub_1003444E0();
  uint64_t v42 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();

  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    uint64_t v43 = type metadata accessor for FMNRedirectHostStore();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56))(v16, 1, 1, v43);
    uint64_t v44 = swift_allocObject();
    swift_beginAccess();
    swift_weakLoadStrong();
    swift_weakInit();
    swift_release();
    sub_10001D010(v55, (uint64_t)v58);
    uint64_t v45 = (void *)swift_allocObject();
    v45[2] = v57;
    sub_10001CEB0(v58, (uint64_t)(v45 + 3));
    uint64_t v46 = v54;
    v45[8] = v44;
    v45[9] = v46;
    swift_retain();
    swift_retain();
    dispatch thunk of FMNServerInteractionController.retryRequest(consolidatedContent:redirectedHostStore:responseHandler:retryCount:)();
    swift_errorRelease();
    swift_release();
    swift_release();

    sub_10001DAB4((uint64_t)v16, &qword_101645B50);
LABEL_19:
    swift_release();
    return;
  }
  swift_errorRelease();
}

uint64_t sub_10048B398(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v115 = a4;
  uint64_t v116 = a8;
  uint64_t v117 = a3;
  uint64_t v114 = a2;
  uint64_t v10 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v10 - 8);
  uint64_t v110 = (char *)&v100 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v12 - 8);
  uint64_t v104 = (char *)&v100 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for URLComponents();
  uint64_t v112 = *(void *)(v14 - 8);
  uint64_t v113 = v14;
  __chkstk_darwin(v14);
  uint64_t v111 = (char *)&v100 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for FMNServerInteractionController.FMNResponseFields();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v109 = (char *)&v100 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v106 = (char *)&v100 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v100 - v23;
  __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v100 - v25;
  uint64_t v27 = sub_10000588C(&qword_101645B58);
  uint64_t v28 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  id v30 = (char *)&v100 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v28 + 16))(v30, a1, v27);
  int v31 = (*(uint64_t (**)(char *, uint64_t))(v28 + 88))(v30, v27);
  if (v31 == enum case for LegacyResult.success<A>(_:))
  {
    (*(void (**)(char *, uint64_t))(v28 + 96))(v30, v27);
    (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v26, v30, v16);
    uint64_t v32 = FMNServerInteractionController.FMNResponseFields.responseHeaders.getter();
    sub_10048E5A4(v32);
    swift_bridgeObjectRelease();
    uint64_t v33 = v26;
    uint64_t v34 = v17;
    if (qword_101636B20 != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    uint64_t v36 = sub_100010324(v35, (uint64_t)qword_10170DEE8);
    sub_10001D010(v117, (uint64_t)v120);
    os_log_type_t v37 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
    uint64_t v107 = v33;
    uint64_t v105 = v37;
    v37(v24, v33, v16);
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.info.getter();
    BOOL v40 = os_log_type_enabled(v38, v39);
    uint64_t v108 = v17;
    uint64_t v103 = v36;
    uint64_t v102 = v17 + 16;
    if (v40)
    {
      uint64_t v41 = swift_slowAlloc();
      uint64_t v101 = swift_slowAlloc();
      uint64_t v119 = v101;
      *(_DWORD *)uint64_t v41 = 136315394;
      uint64_t v100 = v41 + 4;
      sub_10001CD44(v120, v121);
      uint64_t v42 = v111;
      dispatch thunk of FMNRequestConfigurating.urlComponents.getter();
      sub_10048EDE4(&qword_101645B80, (void (*)(uint64_t))&type metadata accessor for URLComponents);
      uint64_t v43 = v113;
      uint64_t v44 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v46 = v45;
      (*(void (**)(char *, uint64_t))(v112 + 8))(v42, v43);
      uint64_t v118 = sub_1008FA0F0(v44, v46, &v119);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v120);
      *(_WORD *)(v41 + 12) = 2048;
      uint64_t v47 = FMNServerInteractionController.FMNResponseFields.statusCode.getter();
      uint64_t v48 = *(void (**)(char *, uint64_t))(v34 + 8);
      v48(v24, v16);
      uint64_t v118 = v47;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "SendRequest %s Received Response: status - %ld", (uint8_t *)v41, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      uint64_t v48 = *(void (**)(char *, uint64_t))(v17 + 8);
      v48(v24, v16);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v120);
    }

    uint64_t v54 = v106;
    sub_10001D010(v117, (uint64_t)v120);
    uint64_t v55 = v107;
    v105(v54, v107, v16);
    uint64_t v56 = Logger.logObject.getter();
    os_log_type_t v57 = static os_log_type_t.info.getter();
    int v58 = v57;
    if (os_log_type_enabled(v56, v57))
    {
      uint64_t v59 = swift_slowAlloc();
      uint64_t v101 = swift_slowAlloc();
      uint64_t v119 = v101;
      *(_DWORD *)uint64_t v59 = 136315394;
      uint64_t v106 = (char *)v48;
      LODWORD(v100) = v58;
      unint64_t v60 = v54;
      sub_10001CD44(v120, v121);
      unint64_t v61 = v111;
      dispatch thunk of FMNRequestConfigurating.urlComponents.getter();
      sub_10048EDE4(&qword_101645B80, (void (*)(uint64_t))&type metadata accessor for URLComponents);
      uint64_t v62 = v113;
      uint64_t v63 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v65 = v64;
      (*(void (**)(char *, uint64_t))(v112 + 8))(v61, v62);
      uint64_t v118 = sub_1008FA0F0(v63, v65, &v119);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v120);
      *(_WORD *)(v59 + 12) = 2080;
      uint64_t v66 = v16;
      os_log_type_t v67 = v60;
      FMNServerInteractionController.FMNResponseFields.responseHeaders.getter();
      uint64_t v68 = Dictionary.description.getter();
      unint64_t v70 = v69;
      swift_bridgeObjectRelease();
      uint64_t v118 = sub_1008FA0F0(v68, v70, &v119);
      uint64_t v55 = v107;
      uint64_t v48 = (void (*)(char *, uint64_t))v106;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      unint64_t v71 = v67;
      uint64_t v16 = v66;
      v48(v71, v66);
      _os_log_impl((void *)&_mh_execute_header, v56, (os_log_type_t)v100, "SendRequest %s Received Response: header - %s", (uint8_t *)v59, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v120);
      v48(v54, v16);
    }

    sub_10001D010(v117, (uint64_t)v120);
    uint64_t v72 = v109;
    v105(v109, v55, v16);
    unint64_t v73 = Logger.logObject.getter();
    os_log_type_t v74 = static os_log_type_t.info.getter();
    int v75 = v74;
    if (os_log_type_enabled(v73, v74))
    {
      uint64_t v76 = swift_slowAlloc();
      uint64_t v117 = swift_slowAlloc();
      uint64_t v119 = v117;
      *(_DWORD *)uint64_t v76 = 136315394;
      uint64_t v105 = (void (*)(char *, char *, uint64_t))(v76 + 4);
      sub_10001CD44(v120, v121);
      unint64_t v77 = v48;
      unint64_t v78 = v111;
      LODWORD(v106) = v75;
      dispatch thunk of FMNRequestConfigurating.urlComponents.getter();
      sub_10048EDE4(&qword_101645B80, (void (*)(uint64_t))&type metadata accessor for URLComponents);
      uint64_t v79 = v113;
      uint64_t v80 = dispatch thunk of CustomStringConvertible.description.getter();
      unint64_t v82 = v81;
      unint64_t v83 = v78;
      uint64_t v48 = v77;
      (*(void (**)(char *, uint64_t))(v112 + 8))(v83, v79);
      uint64_t v118 = sub_1008FA0F0(v80, v82, &v119);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v120);
      *(_WORD *)(v76 + 12) = 2080;
      uint64_t v84 = FMNServerInteractionController.FMNResponseFields.data.getter();
      unint64_t v86 = v85;
      static String.Encoding.utf8.getter();
      uint64_t v87 = String.init(data:encoding:)();
      uint64_t v88 = v72;
      unint64_t v90 = v89;
      sub_10001CFB8(v84, v86);
      if (v90) {
        uint64_t v91 = v87;
      }
      else {
        uint64_t v91 = 0;
      }
      uint64_t v55 = v107;
      if (v90) {
        unint64_t v92 = v90;
      }
      else {
        unint64_t v92 = 0xE000000000000000;
      }
      uint64_t v118 = sub_1008FA0F0(v91, v92, &v119);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v48(v88, v16);
      _os_log_impl((void *)&_mh_execute_header, v73, (os_log_type_t)v106, "SendRequest %s Received Response: body - %s", (uint8_t *)v76, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v120);
      v48(v72, v16);
    }

    Future.finish(result:)();
    v48(v55, v16);
  }
  else
  {
    if (v31 != enum case for LegacyResult.failure<A>(_:))
    {
      uint64_t result = _diagnoseUnexpectedEnumCase<A>(type:)();
      __break(1u);
      return result;
    }
    (*(void (**)(char *, uint64_t))(v28 + 96))(v30, v27);
    static os_log_type_t.error.getter();
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v49 = swift_allocObject();
    *(_OWORD *)(v49 + 16) = xmmword_101342130;
    swift_getErrorValue();
    uint64_t v50 = Error.localizedDescription.getter();
    uint64_t v52 = v51;
    *(void *)(v49 + 56) = &type metadata for String;
    *(void *)(v49 + 64) = sub_10000B4CC();
    *(void *)(v49 + 32) = v50;
    *(void *)(v49 + 40) = v52;
    sub_1003444E0();
    uint64_t v53 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();

    Future.finish(error:)();
    swift_errorRelease();
  }
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v94 = result;
    uint64_t v95 = *(void **)(result + qword_101645A48);
    [v95 lock];
    *(unsigned char *)(v94 + qword_101645A50) = 1;
    [v95 unlock];
    uint64_t v96 = type metadata accessor for TaskPriority();
    uint64_t v97 = (uint64_t)v110;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v96 - 8) + 56))(v110, 1, 1, v96);
    uint64_t v98 = swift_allocObject();
    swift_weakInit();
    uint64_t v99 = (void *)swift_allocObject();
    v99[2] = 0;
    v99[3] = 0;
    v99[4] = v98;
    sub_1008F5FF0(v97, a9, (uint64_t)v99);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_10048C190@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  char v4 = sub_1010AB610(v7[0]);
  swift_bridgeObjectRelease();
  if ((v4 & 1) == 0) {
    return sub_10001D010(a1, a2);
  }
  sub_10001D010(a1, (uint64_t)v7);
  sub_10001CD44(v7, v8);
  dispatch thunk of FMNRequestContentRepresentable.headerDictionary.getter();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_10016C0FC(1702195828, 0xE400000000000000, 0xD000000000000018, 0x80000001013FE170, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  sub_1000BD078((uint64_t)v7, v8);
  dispatch thunk of FMNRequestContentRepresentable.headerDictionary.setter();
  sub_10001D010((uint64_t)v7, a2);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v7);
}

uint64_t sub_10048C304(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 40) = a4;
  return _swift_task_switch(sub_10048C324, 0, 0);
}

uint64_t sub_10048C324()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  v0[6] = Strong;
  if (Strong)
  {
    uint64_t v2 = *(void *)(Strong + qword_101645A40);
    v0[7] = v2;
    swift_unownedRetainStrong();
    return _swift_task_switch(sub_10048C3F8, v2, 0);
  }
  else
  {
    uint64_t v3 = (uint64_t (*)(void))v0[1];
    return v3();
  }
}

uint64_t sub_10048C3F8()
{
  sub_100486D0C(*(void *)(v0 + 48));
  swift_release();
  return _swift_task_switch(sub_10048C468, 0, 0);
}

uint64_t sub_10048C468()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10048C4C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 40) = a1;
  *(void *)(v4 + 48) = a4;
  return _swift_task_switch(sub_10048C4E8, 0, 0);
}

uint64_t sub_10048C4E8()
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  *(void *)(v0 + 56) = Strong;
  if (Strong)
  {
    uint64_t v2 = *(void *)(Strong + qword_101645A40);
    *(void *)(v0 + 64) = v2;
    swift_unownedRetainStrong();
    swift_release();
    return _swift_task_switch(sub_10048C5D4, v2, 0);
  }
  else
  {
    **(unsigned char **)(v0 + 40) = 1;
    uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
    return v3();
  }
}

uint64_t sub_10048C5D4()
{
  sub_100486FD0();
  swift_release();
  return _swift_task_switch(sub_10048C644, 0, 0);
}

uint64_t sub_10048C644()
{
  **(unsigned char **)(v0 + 40) = *(void *)(v0 + 56) == 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10048C66C()
{
}

uint64_t sub_10048C69C()
{
  return type metadata accessor for ServerInteractionController(0);
}

uint64_t type metadata accessor for SearchPartyURLSessionFactory(uint64_t a1)
{
  return sub_1000F4EA4(a1, (uint64_t *)&unk_101645AB0);
}

uint64_t sub_10048C6C4()
{
  return sub_10048C734();
}

void sub_10048C6D0()
{
}

uint64_t sub_10048C700()
{
  return type metadata accessor for SearchPartyURLSessionFactory(0);
}

uint64_t type metadata accessor for FindMyAppURLSessionFactory(uint64_t a1)
{
  return sub_1000F4EA4(a1, (uint64_t *)&unk_101645B00);
}

uint64_t sub_10048C728()
{
  return sub_10048C734();
}

uint64_t sub_10048C734()
{
  return swift_initClassMetadata2();
}

uint64_t sub_10048C770(void *a1, uint64_t a2)
{
  NSString v4 = String._bridgeToObjectiveC()();
  [a1 set_sourceApplicationBundleIdentifier:v4];

  type metadata accessor for SearchPartyURLSessionFactory(0);
  uint64_t v5 = (uint64_t (*)(void *, uint64_t))method lookup function for FMNURLSessionFactory();
  return v5(a1, a2);
}

uint64_t sub_10048C820()
{
  FMNURLSessionFactory.deinit();

  return swift_deallocClassInstance();
}

uint64_t sub_10048C850()
{
  return type metadata accessor for FindMyAppURLSessionFactory(0);
}

uint64_t sub_10048C858()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_10048C894(uint64_t a1)
{
  return sub_10048B398(a1, v1[2], (uint64_t)(v1 + 3), v1[8], v1[9], (uint64_t)"ServerInteractionController: Error calling server on Retry: %@", 62, (uint64_t)&unk_1015C4A78, (uint64_t)&unk_101645B88);
}

void *sub_10048C8E8(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return &_swiftEmptyArrayStorage;
  }
  sub_10000588C(&qword_10163A788);
  NSString v4 = (void *)swift_allocObject();
  size_t v5 = j__malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_10048C950(unsigned __int16 a1, uint64_t a2, uint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    uint64_t v10 = String.UTF16View.index(_:offsetBy:)();
    uint64_t v11 = v10 + (v4 << 16);
    unint64_t v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v13 = v12;
    }
    return v13 | 4;
  }
  else
  {
    uint64_t v5 = String.UTF8View._foreignIndex(_:offsetBy:)();
    uint64_t v6 = v5 + (v4 << 16);
    unint64_t v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    unint64_t v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4) {
      unint64_t v8 = v7;
    }
    return v8 | 8;
  }
}

unsigned __int8 *sub_10048C9CC(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  return sub_10048CDE8(a1, a2, a3);
}

unsigned __int8 *sub_10048C9E4(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  return sub_10048D090(a1, a2, a3);
}

unsigned __int8 *sub_10048C9FC(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  return sub_10048D5B4(a1, a2, a3);
}

unsigned __int8 *sub_10048CA14(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  return sub_10048D830(a1, a2, a3);
}

uint64_t sub_10048CA2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = String.init<A>(_:)();
  unint64_t v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = HIBYTE(v6) & 0xF;
    uint64_t v13 = v5;
    uint64_t v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    unint64_t v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  uint64_t v5 = sub_10048DAB0();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  unint64_t v6 = v10;
  if ((v10 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    unint64_t v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    unint64_t v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  unsigned __int16 v11 = (unsigned __int16)sub_10048CDE8(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11 & 0x1FF;
}

uint64_t sub_10048CB10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = String.init<A>(_:)();
  unint64_t v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = HIBYTE(v6) & 0xF;
    uint64_t v13 = v5;
    uint64_t v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    unint64_t v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  uint64_t v5 = sub_10048DAB0();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  unint64_t v6 = v10;
  if ((v10 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    unint64_t v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    unint64_t v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  unsigned int v11 = sub_10048D090(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11 & 0x1FFFF;
}

uint64_t sub_10048CBF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10048CC08(a1, a2, a3, (uint64_t (*)(void *, uint64_t, uint64_t))sub_10048D5B4);
}

uint64_t sub_10048CC08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void *, uint64_t, uint64_t))
{
  uint64_t v15 = a1;
  uint64_t v16 = a2;
  swift_bridgeObjectRetain();
  uint64_t v7 = String.init<A>(_:)();
  unint64_t v8 = v6;
  if ((v6 & 0x1000000000000000) == 0)
  {
    if ((v6 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v10 = HIBYTE(v8) & 0xF;
    uint64_t v15 = v7;
    uint64_t v16 = v8 & 0xFFFFFFFFFFFFFFLL;
    unint64_t v9 = &v15;
    goto LABEL_7;
  }
  uint64_t v7 = sub_10048DAB0();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();
  unint64_t v8 = v12;
  if ((v12 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v7 & 0x1000000000000000) != 0)
  {
    unint64_t v9 = (void *)((v8 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v10 = v7 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    unint64_t v9 = (void *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  uint64_t v13 = a4(v9, v10, a3);
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t sub_10048CD00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a1;
  uint64_t v14 = a2;
  swift_bridgeObjectRetain();
  uint64_t v5 = String.init<A>(_:)();
  unint64_t v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0) {
      goto LABEL_3;
    }
LABEL_6:
    uint64_t v8 = HIBYTE(v6) & 0xF;
    uint64_t v13 = v5;
    uint64_t v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    uint64_t v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  uint64_t v5 = sub_10048DAB0();
  unint64_t v10 = v9;
  swift_bridgeObjectRelease();
  unint64_t v6 = v10;
  if ((v10 & 0x2000000000000000) != 0) {
    goto LABEL_6;
  }
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    uint64_t v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    uint64_t v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    uint64_t v7 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
  }
LABEL_7:
  unint64_t v11 = sub_10048D830(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11 | ((((unint64_t)v11 >> 32) & 1) << 32);
}

unsigned __int8 *sub_10048CDE8(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v14 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v15 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v16 = a3 + 55;
        }
        else
        {
          unsigned __int8 v15 = 97;
          unsigned __int8 v16 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v17 = a3 + 48;
        }
        else {
          unsigned __int8 v17 = 58;
        }
        if (result)
        {
          LOBYTE(v8) = 0;
          uint64_t v18 = result + 1;
          do
          {
            unsigned int v19 = *v18;
            if (v19 < 0x30 || v19 >= v17)
            {
              if (v19 < 0x41 || v19 >= v16)
              {
                unsigned __int8 v12 = 0;
                int v13 = 1;
                if (v19 < 0x61 || v19 >= v15) {
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                }
                char v20 = -87;
              }
              else
              {
                char v20 = -55;
              }
            }
            else
            {
              char v20 = -48;
            }
            if (((v8 * (unsigned __int16)a3) & 0xFF00) != 0) {
              goto LABEL_72;
            }
            unsigned int v8 = (v8 * a3) + (v19 + v20);
            if ((v8 >> 8)) {
              goto LABEL_72;
            }
            ++v18;
            --v14;
          }
          while (v14);
LABEL_48:
          int v13 = 0;
          unsigned __int8 v12 = v8;
          return (unsigned __int8 *)(v12 | (v13 << 8));
        }
        goto LABEL_71;
      }
LABEL_72:
      unsigned __int8 v12 = 0;
      int v13 = 1;
      return (unsigned __int8 *)(v12 | (v13 << 8));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        unsigned __int8 v21 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v22 = a3 + 55;
        }
        else
        {
          unsigned __int8 v21 = 97;
          unsigned __int8 v22 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v23 = a3 + 48;
        }
        else {
          unsigned __int8 v23 = 58;
        }
        if (result)
        {
          LOBYTE(v24) = 0;
          do
          {
            unsigned int v25 = *result;
            if (v25 < 0x30 || v25 >= v23)
            {
              if (v25 < 0x41 || v25 >= v22)
              {
                unsigned __int8 v12 = 0;
                int v13 = 1;
                if (v25 < 0x61 || v25 >= v21) {
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                }
                char v26 = -87;
              }
              else
              {
                char v26 = -55;
              }
            }
            else
            {
              char v26 = -48;
            }
            if (((v24 * (unsigned __int16)a3) & 0xFF00) != 0) {
              goto LABEL_72;
            }
            unsigned int v24 = (v24 * a3) + (v25 + v26);
            if ((v24 >> 8)) {
              goto LABEL_72;
            }
            ++result;
            --a2;
          }
          while (a2);
          int v13 = 0;
          unsigned __int8 v12 = v24;
          return (unsigned __int8 *)(v12 | (v13 << 8));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      uint64_t v4 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v5 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = a3 + 55;
        }
        else
        {
          unsigned __int8 v5 = 97;
          unsigned __int8 v6 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v7 = a3 + 48;
        }
        else {
          unsigned __int8 v7 = 58;
        }
        if (result)
        {
          LOBYTE(v8) = 0;
          unint64_t v9 = result + 1;
          while (1)
          {
            unsigned int v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                unsigned __int8 v12 = 0;
                int v13 = 1;
                if (v10 < 0x61 || v10 >= v5) {
                  return (unsigned __int8 *)(v12 | (v13 << 8));
                }
                char v11 = -87;
              }
              else
              {
                char v11 = -55;
              }
            }
            else
            {
              char v11 = -48;
            }
            if (((v8 * (unsigned __int16)a3) & 0xFF00) != 0) {
              goto LABEL_72;
            }
            unsigned int v8 = (v8 * a3) - (v10 + v11);
            if ((v8 & 0xFFFFFF00) != 0) {
              goto LABEL_72;
            }
            ++v9;
            if (!--v4) {
              goto LABEL_48;
            }
          }
        }
LABEL_71:
        unsigned __int8 v12 = 0;
        int v13 = 0;
        return (unsigned __int8 *)(v12 | (v13 << 8));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unsigned __int8 *sub_10048D090(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v14 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v15 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v16 = a3 + 55;
        }
        else
        {
          unsigned __int8 v15 = 97;
          unsigned __int8 v16 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v17 = a3 + 48;
        }
        else {
          unsigned __int8 v17 = 58;
        }
        if (result)
        {
          LOWORD(v8) = 0;
          uint64_t v18 = result + 1;
          do
          {
            unsigned int v19 = *v18;
            if (v19 < 0x30 || v19 >= v17)
            {
              if (v19 < 0x41 || v19 >= v16)
              {
                unsigned __int16 v12 = 0;
                int v13 = 1;
                if (v19 < 0x61 || v19 >= v15) {
                  return (unsigned __int8 *)(v12 | (v13 << 16));
                }
                char v20 = -87;
              }
              else
              {
                char v20 = -55;
              }
            }
            else
            {
              char v20 = -48;
            }
            if ((((unsigned __int16)v8 * (unsigned __int16)a3) & 0xFFFF0000) != 0) {
              goto LABEL_72;
            }
            int v8 = (unsigned __int16)(v8 * a3) + (v19 + v20);
            if ((v8 & 0x10000) != 0) {
              goto LABEL_72;
            }
            ++v18;
            --v14;
          }
          while (v14);
LABEL_48:
          int v13 = 0;
          unsigned __int16 v12 = v8;
          return (unsigned __int8 *)(v12 | (v13 << 16));
        }
        goto LABEL_71;
      }
LABEL_72:
      unsigned __int16 v12 = 0;
      int v13 = 1;
      return (unsigned __int8 *)(v12 | (v13 << 16));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        unsigned __int8 v21 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v22 = a3 + 55;
        }
        else
        {
          unsigned __int8 v21 = 97;
          unsigned __int8 v22 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v23 = a3 + 48;
        }
        else {
          unsigned __int8 v23 = 58;
        }
        if (result)
        {
          LOWORD(v24) = 0;
          do
          {
            unsigned int v25 = *result;
            if (v25 < 0x30 || v25 >= v23)
            {
              if (v25 < 0x41 || v25 >= v22)
              {
                unsigned __int16 v12 = 0;
                int v13 = 1;
                if (v25 < 0x61 || v25 >= v21) {
                  return (unsigned __int8 *)(v12 | (v13 << 16));
                }
                char v26 = -87;
              }
              else
              {
                char v26 = -55;
              }
            }
            else
            {
              char v26 = -48;
            }
            if ((((unsigned __int16)v24 * (unsigned __int16)a3) & 0xFFFF0000) != 0) {
              goto LABEL_72;
            }
            int v24 = (unsigned __int16)(v24 * a3) + (v25 + v26);
            if ((v24 & 0x10000) != 0) {
              goto LABEL_72;
            }
            ++result;
            --a2;
          }
          while (a2);
          int v13 = 0;
          unsigned __int16 v12 = v24;
          return (unsigned __int8 *)(v12 | (v13 << 16));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      uint64_t v4 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v5 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = a3 + 55;
        }
        else
        {
          unsigned __int8 v5 = 97;
          unsigned __int8 v6 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v7 = a3 + 48;
        }
        else {
          unsigned __int8 v7 = 58;
        }
        if (result)
        {
          LOWORD(v8) = 0;
          unint64_t v9 = result + 1;
          while (1)
          {
            unsigned int v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                unsigned __int16 v12 = 0;
                int v13 = 1;
                if (v10 < 0x61 || v10 >= v5) {
                  return (unsigned __int8 *)(v12 | (v13 << 16));
                }
                char v11 = -87;
              }
              else
              {
                char v11 = -55;
              }
            }
            else
            {
              char v11 = -48;
            }
            if ((((unsigned __int16)v8 * (unsigned __int16)a3) & 0xFFFF0000) != 0) {
              goto LABEL_72;
            }
            int v8 = (unsigned __int16)(v8 * a3) - (v10 + v11);
            if ((v8 & 0xFFFF0000) != 0) {
              goto LABEL_72;
            }
            ++v9;
            if (!--v4) {
              goto LABEL_48;
            }
          }
        }
LABEL_71:
        unsigned __int16 v12 = 0;
        int v13 = 0;
        return (unsigned __int8 *)(v12 | (v13 << 16));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

unsigned __int8 *sub_10048D338(unsigned __int8 *result, uint64_t a2, int64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }
          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }
          if (result)
          {
            unint64_t v9 = 0;
            for (uint64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8) {
                    return 0;
                  }
                  char v12 = -87;
                }
                else
                {
                  char v12 = -55;
                }
              }
              else
              {
                char v12 = -48;
              }
              if (!is_mul_ok(v9, a3)) {
                return 0;
              }
              unint64_t v13 = v9 * a3;
              unsigned __int8 v14 = v11 + v12;
              BOOL v15 = v13 >= v14;
              unint64_t v9 = v13 - v14;
              if (!v15) {
                return 0;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_66;
    }
    if (a2)
    {
      unsigned __int8 v25 = a3 + 48;
      unsigned __int8 v26 = a3 + 55;
      unsigned __int8 v27 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v25 = 58;
      }
      else
      {
        unsigned __int8 v27 = 97;
        unsigned __int8 v26 = 65;
      }
      if (result)
      {
        unint64_t v28 = 0;
        do
        {
          unsigned int v29 = *result;
          if (v29 < 0x30 || v29 >= v25)
          {
            if (v29 < 0x41 || v29 >= v26)
            {
              if (v29 < 0x61 || v29 >= v27) {
                return 0;
              }
              char v30 = -87;
            }
            else
            {
              char v30 = -55;
            }
          }
          else
          {
            char v30 = -48;
          }
          if (!is_mul_ok(v28, a3)) {
            return 0;
          }
          unint64_t v31 = v28 * a3;
          unsigned __int8 v32 = v29 + v30;
          BOOL v15 = __CFADD__(v31, v32);
          unint64_t v28 = v31 + v32;
          if (v15) {
            return 0;
          }
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)v28;
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_66:
    __break(1u);
    return result;
  }
  uint64_t v16 = a2 - 1;
  if (a2 == 1) {
    return 0;
  }
  unsigned __int8 v17 = a3 + 48;
  unsigned __int8 v18 = a3 + 55;
  unsigned __int8 v19 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v17 = 58;
  }
  else
  {
    unsigned __int8 v19 = 97;
    unsigned __int8 v18 = 65;
  }
  if (!result) {
    return 0;
  }
  unint64_t v9 = 0;
  char v20 = result + 1;
  do
  {
    unsigned int v21 = *v20;
    if (v21 < 0x30 || v21 >= v17)
    {
      if (v21 < 0x41 || v21 >= v18)
      {
        if (v21 < 0x61 || v21 >= v19) {
          return 0;
        }
        char v22 = -87;
      }
      else
      {
        char v22 = -55;
      }
    }
    else
    {
      char v22 = -48;
    }
    if (!is_mul_ok(v9, a3)) {
      return 0;
    }
    unint64_t v23 = v9 * a3;
    unsigned __int8 v24 = v21 + v22;
    BOOL v15 = __CFADD__(v23, v24);
    unint64_t v9 = v23 + v24;
    if (v15) {
      return 0;
    }
    ++v20;
    --v16;
  }
  while (v16);
  return (unsigned __int8 *)v9;
}

unsigned __int8 *sub_10048D5B4(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a2;
  int v4 = *result;
  if (v4 != 43)
  {
    if (v4 == 45)
    {
      if (a2 >= 1)
      {
        uint64_t v5 = a2 - 1;
        if (a2 != 1)
        {
          unsigned __int8 v6 = a3 + 48;
          unsigned __int8 v7 = a3 + 55;
          unsigned __int8 v8 = a3 + 87;
          if (a3 > 10)
          {
            unsigned __int8 v6 = 58;
          }
          else
          {
            unsigned __int8 v8 = 97;
            unsigned __int8 v7 = 65;
          }
          if (result)
          {
            uint64_t v9 = 0;
            for (uint64_t i = result + 1; ; ++i)
            {
              unsigned int v11 = *i;
              if (v11 < 0x30 || v11 >= v6)
              {
                if (v11 < 0x41 || v11 >= v7)
                {
                  if (v11 < 0x61 || v11 >= v8) {
                    return 0;
                  }
                  char v12 = -87;
                }
                else
                {
                  char v12 = -55;
                }
              }
              else
              {
                char v12 = -48;
              }
              uint64_t v13 = v9 * a3;
              if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
                return 0;
              }
              uint64_t v9 = v13 - (v11 + v12);
              if (__OFSUB__(v13, (v11 + v12))) {
                return 0;
              }
              if (!--v5) {
                return (unsigned __int8 *)v9;
              }
            }
          }
          return 0;
        }
        return 0;
      }
      __break(1u);
      goto LABEL_65;
    }
    if (a2)
    {
      unsigned __int8 v22 = a3 + 48;
      unsigned __int8 v23 = a3 + 55;
      unsigned __int8 v24 = a3 + 87;
      if (a3 > 10)
      {
        unsigned __int8 v22 = 58;
      }
      else
      {
        unsigned __int8 v24 = 97;
        unsigned __int8 v23 = 65;
      }
      if (result)
      {
        uint64_t v25 = 0;
        do
        {
          unsigned int v26 = *result;
          if (v26 < 0x30 || v26 >= v22)
          {
            if (v26 < 0x41 || v26 >= v23)
            {
              if (v26 < 0x61 || v26 >= v24) {
                return 0;
              }
              char v27 = -87;
            }
            else
            {
              char v27 = -55;
            }
          }
          else
          {
            char v27 = -48;
          }
          uint64_t v28 = v25 * a3;
          if ((unsigned __int128)(v25 * (__int128)a3) >> 64 != (v25 * a3) >> 63) {
            return 0;
          }
          uint64_t v25 = v28 + (v26 + v27);
          if (__OFADD__(v28, (v26 + v27))) {
            return 0;
          }
          ++result;
          --v3;
        }
        while (v3);
        return (unsigned __int8 *)(v28 + (v26 + v27));
      }
      return 0;
    }
    return 0;
  }
  if (a2 < 1)
  {
LABEL_65:
    __break(1u);
    return result;
  }
  uint64_t v14 = a2 - 1;
  if (a2 == 1) {
    return 0;
  }
  unsigned __int8 v15 = a3 + 48;
  unsigned __int8 v16 = a3 + 55;
  unsigned __int8 v17 = a3 + 87;
  if (a3 > 10)
  {
    unsigned __int8 v15 = 58;
  }
  else
  {
    unsigned __int8 v17 = 97;
    unsigned __int8 v16 = 65;
  }
  if (!result) {
    return 0;
  }
  uint64_t v9 = 0;
  unsigned __int8 v18 = result + 1;
  do
  {
    unsigned int v19 = *v18;
    if (v19 < 0x30 || v19 >= v15)
    {
      if (v19 < 0x41 || v19 >= v16)
      {
        if (v19 < 0x61 || v19 >= v17) {
          return 0;
        }
        char v20 = -87;
      }
      else
      {
        char v20 = -55;
      }
    }
    else
    {
      char v20 = -48;
    }
    uint64_t v21 = v9 * a3;
    if ((unsigned __int128)(v9 * (__int128)a3) >> 64 != (v9 * a3) >> 63) {
      return 0;
    }
    uint64_t v9 = v21 + (v19 + v20);
    if (__OFADD__(v21, (v19 + v20))) {
      return 0;
    }
    ++v18;
    --v14;
  }
  while (v14);
  return (unsigned __int8 *)v9;
}

unsigned __int8 *sub_10048D830(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      uint64_t v16 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v17 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v18 = a3 + 55;
        }
        else
        {
          unsigned __int8 v17 = 97;
          unsigned __int8 v18 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v19 = a3 + 48;
        }
        else {
          unsigned __int8 v19 = 58;
        }
        if (result)
        {
          unsigned int v8 = 0;
          char v20 = result + 1;
          do
          {
            unsigned int v21 = *v20;
            if (v21 < 0x30 || v21 >= v19)
            {
              if (v21 < 0x41 || v21 >= v18)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v21 < 0x61 || v21 >= v17) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v22 = -87;
              }
              else
              {
                char v22 = -55;
              }
            }
            else
            {
              char v22 = -48;
            }
            uint64_t v23 = (int)v8 * (uint64_t)(int)a3;
            if (v23 != (int)v23) {
              goto LABEL_72;
            }
            unsigned __int8 v24 = v21 + v22;
            unsigned int v8 = v23 + v24;
            if (__OFADD__(v23, v24)) {
              goto LABEL_72;
            }
            ++v20;
            --v16;
          }
          while (v16);
LABEL_48:
          unsigned __int8 v13 = 0;
          unsigned int v12 = v8;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
LABEL_72:
      unsigned int v12 = 0;
      unsigned __int8 v13 = 1;
      return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        unsigned __int8 v25 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v26 = a3 + 55;
        }
        else
        {
          unsigned __int8 v25 = 97;
          unsigned __int8 v26 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v27 = a3 + 48;
        }
        else {
          unsigned __int8 v27 = 58;
        }
        if (result)
        {
          unsigned int v28 = 0;
          do
          {
            unsigned int v29 = *result;
            if (v29 < 0x30 || v29 >= v27)
            {
              if (v29 < 0x41 || v29 >= v26)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v29 < 0x61 || v29 >= v25) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v30 = -87;
              }
              else
              {
                char v30 = -55;
              }
            }
            else
            {
              char v30 = -48;
            }
            uint64_t v31 = (int)v28 * (uint64_t)(int)a3;
            if (v31 != (int)v31) {
              goto LABEL_72;
            }
            unsigned __int8 v32 = v29 + v30;
            unsigned int v28 = v31 + v32;
            if (__OFADD__(v31, v32)) {
              goto LABEL_72;
            }
            ++result;
            --a2;
          }
          while (a2);
          unsigned __int8 v13 = 0;
          unsigned int v12 = v28;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      uint64_t v4 = a2 - 1;
      if (a2 != 1)
      {
        unsigned __int8 v5 = a3 + 87;
        if (a3 > 10)
        {
          unsigned __int8 v6 = a3 + 55;
        }
        else
        {
          unsigned __int8 v5 = 97;
          unsigned __int8 v6 = 65;
        }
        if (a3 <= 10) {
          unsigned __int8 v7 = a3 + 48;
        }
        else {
          unsigned __int8 v7 = 58;
        }
        if (result)
        {
          unsigned int v8 = 0;
          uint64_t v9 = result + 1;
          while (1)
          {
            unsigned int v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                unsigned int v12 = 0;
                unsigned __int8 v13 = 1;
                if (v10 < 0x61 || v10 >= v5) {
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                }
                char v11 = -87;
              }
              else
              {
                char v11 = -55;
              }
            }
            else
            {
              char v11 = -48;
            }
            uint64_t v14 = (int)v8 * (uint64_t)(int)a3;
            if (v14 != (int)v14) {
              goto LABEL_72;
            }
            unsigned __int8 v15 = v10 + v11;
            unsigned int v8 = v14 - v15;
            if (__OFSUB__(v14, v15)) {
              goto LABEL_72;
            }
            ++v9;
            if (!--v4) {
              goto LABEL_48;
            }
          }
        }
LABEL_71:
        unsigned int v12 = 0;
        unsigned __int8 v13 = 0;
        return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10048DAB0()
{
  unint64_t v0 = String.subscript.getter();
  uint64_t v4 = sub_10048DB30(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_10048DB30(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  if ((a4 & 0x1000000000000000) != 0)
  {
    uint64_t v9 = sub_10048DC88(a1, a2, a3, a4);
    if (!v9
      || (uint64_t v10 = v9,
          char v11 = sub_10048C8E8(v9, 0),
          unint64_t v12 = sub_10048DD88((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4),
          swift_bridgeObjectRetain(),
          swift_bridgeObjectRelease(),
          v12 == v10))
    {
      uint64_t v13 = static String._uncheckedFromUTF8(_:)();
      swift_release();
      return v13;
    }
    __break(1u);
  }
  else
  {
    if ((a4 & 0x2000000000000000) != 0)
    {
      v14[0] = a3;
      v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
      return static String._uncheckedFromUTF8(_:)();
    }
    if ((a3 & 0x1000000000000000) != 0) {
      goto LABEL_4;
    }
  }
  _StringObject.sharedUTF8.getter();
LABEL_4:

  return static String._uncheckedFromUTF8(_:)();
}

uint64_t sub_10048DC88(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4;
  uint64_t v5 = a3;
  unint64_t v6 = a2;
  unint64_t v7 = a1;
  uint64_t v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0) {
    LOBYTE(v8) = 1;
  }
  uint64_t v9 = 4 << v8;
  if ((a1 & 0xC) == 4 << v8)
  {
    a1 = sub_10048C950(a1, a3, a4);
    unint64_t v7 = a1;
  }
  if ((v6 & 0xC) == v9)
  {
    a1 = sub_10048C950(v6, v5, v4);
    unint64_t v6 = a1;
    if ((v4 & 0x1000000000000000) == 0) {
      return (v6 >> 16) - (v7 >> 16);
    }
  }
  else if ((v4 & 0x1000000000000000) == 0)
  {
    return (v6 >> 16) - (v7 >> 16);
  }
  unint64_t v11 = HIBYTE(v4) & 0xF;
  if ((v4 & 0x2000000000000000) == 0) {
    unint64_t v11 = v5 & 0xFFFFFFFFFFFFLL;
  }
  if (v11 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v11 >= v6 >> 16)
  {
    a1 = v7;
    a2 = v6;
    a3 = v5;
    a4 = v4;
    return String.UTF8View._foreignDistance(from:to:)(a1, a2, a3, a4);
  }
  __break(1u);
  return String.UTF8View._foreignDistance(from:to:)(a1, a2, a3, a4);
}

unint64_t sub_10048DD88(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v9 = (void *)result;
  if (!a2) {
    goto LABEL_5;
  }
  if (!a3)
  {
    unint64_t v12 = a4;
    uint64_t v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0) {
    goto LABEL_36;
  }
  unint64_t v10 = a5 >> 14;
  unint64_t v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    uint64_t v11 = 0;
    unint64_t v12 = a4;
LABEL_33:
    void *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  uint64_t v11 = 0;
  uint64_t v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0) {
    LOBYTE(v14) = 1;
  }
  uint64_t v15 = 4 << v14;
  uint64_t v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  uint64_t v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  uint64_t v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0) {
    uint64_t v16 = a6 & 0xFFFFFFFFFFFFLL;
  }
  unint64_t v23 = v16;
  uint64_t v26 = a3 - 1;
  unint64_t v12 = a4;
  while (1)
  {
    unint64_t v17 = v12 & 0xC;
    uint64_t result = v12;
    if (v17 == v15) {
      uint64_t result = sub_10048C950(v12, a6, a7);
    }
    if (result >> 14 < v27 || result >> 14 >= v10) {
      break;
    }
    if ((a7 & 0x1000000000000000) != 0)
    {
      uint64_t result = String.UTF8View._foreignSubscript(position:)();
      char v19 = result;
      if (v17 != v15) {
        goto LABEL_23;
      }
    }
    else
    {
      unint64_t v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        char v19 = *((unsigned char *)v28 + v18);
        if (v17 != v15) {
          goto LABEL_23;
        }
      }
      else
      {
        uint64_t result = v21;
        if ((a6 & 0x1000000000000000) == 0) {
          uint64_t result = _StringObject.sharedUTF8.getter();
        }
        char v19 = *(unsigned char *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0) {
            goto LABEL_24;
          }
          goto LABEL_27;
        }
      }
    }
    uint64_t result = sub_10048C950(v12, a6, a7);
    unint64_t v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      unint64_t v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16) {
      goto LABEL_35;
    }
    unint64_t v12 = String.UTF8View._foreignIndex(after:)();
LABEL_29:
    *(unsigned char *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      uint64_t v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14) {
      goto LABEL_33;
    }
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

uint64_t sub_10048DF9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v31[0] = a2;
  uint64_t v9 = sub_10000588C((uint64_t *)&unk_101649E20);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)v31 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v14);
  unint64_t v18 = (char *)v31 - v17;
  uint64_t v32[3] = a4;
  v32[4] = a5;
  char v19 = sub_10001D958(v32);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(v19, a1, a4);
  uint64_t v20 = qword_101645A30;
  type metadata accessor for FMNAuthenticationProvider();
  swift_allocObject();
  swift_retain();
  *(void *)(a3 + v20) = FMNAuthenticationProvider.init()();
  uint64_t v21 = qword_101645A40;
  if (qword_101636B30 != -1) {
    swift_once();
  }
  *(void *)(a3 + v21) = qword_10170DF18;
  swift_unownedRetain();
  UUID.init()();
  uint64_t v22 = qword_101645A48;
  id v23 = objc_allocWithZone((Class)NSLock);
  *(void *)(a3 + v22) = [v23 init:v31[0]];
  *(unsigned char *)(a3 + qword_101645A50) = 0;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v13 + 104))(v16, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v12);
  sub_10048EDE4((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v25 = v31[1];
  uint64_t v24 = v31[2];
  uint64_t v26 = *(void (**)(char *, uint64_t))(v13 + 8);
  v26(v16, v12);
  v26(v18, v12);
  if (v24 == v25)
  {
    sub_1003444E0();
    unint64_t v27 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_retain();
    dispatch thunk of FMNAuthenticationProvider.autoRenewalLimit.setter();
    swift_release();
  }
  sub_10001D010((uint64_t)v32, a3 + qword_101645A38);
  swift_release();
  uint64_t v28 = type metadata accessor for FMNMockingPreferences();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v11, 1, 1, v28);
  swift_retain();
  uint64_t v29 = FMNServerInteractionController.init(authenticationProvider:mockingPreferences:urlSessionFactory:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v32);
  return v29;
}

uint64_t sub_10048E388(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(a4 - 8);
  __chkstk_darwin(a1);
  uint64_t v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ServerInteractionController(0);
  uint64_t v12 = swift_allocObject();
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a4);
  return sub_10048DF9C((uint64_t)v11, a2, v12, a4, a5);
}

uint64_t sub_10048E488(unint64_t a1, uint64_t a2)
{
  if (a1 >> 62)
  {
LABEL_13:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4)
    {
LABEL_3:
      a2 += qword_10170DF20;
      uint64_t v5 = 4;
      while (1)
      {
        uint64_t v6 = v5 - 4;
        if ((a1 & 0xC000000000000001) != 0)
        {
          specialized _ArrayBuffer._getElementSlowPath(_:)();
          uint64_t v7 = v5 - 3;
          if (__OFADD__(v6, 1)) {
            goto LABEL_12;
          }
        }
        else
        {
          swift_retain();
          uint64_t v7 = v5 - 3;
          if (__OFADD__(v6, 1))
          {
LABEL_12:
            __break(1u);
            goto LABEL_13;
          }
        }
        char v8 = static UUID.== infix(_:_:)();
        swift_release();
        if ((v8 & 1) == 0)
        {
          ++v5;
          if (v7 != v4) {
            continue;
          }
        }
        goto LABEL_15;
      }
    }
  }
  char v8 = 0;
LABEL_15:
  swift_bridgeObjectRelease();
  return v8 & 1;
}

void sub_10048E5A4(uint64_t a1)
{
  if (!*(void *)(a1 + 16)
    || (uint64_t v2 = sub_100723FF4(0xD00000000000001FLL, 0x80000001013FDF50), (v3 & 1) == 0)
    || ((uint64_t v4 = (uint64_t *)(*(void *)(a1 + 56) + 16 * v2),
         uint64_t v5 = *v4,
         unint64_t v6 = v4[1],
         uint64_t v7 = HIBYTE(v6) & 0xF,
         uint64_t v8 = *v4 & 0xFFFFFFFFFFFFLL,
         (v6 & 0x2000000000000000) != 0)
      ? (uint64_t v9 = HIBYTE(v6) & 0xF)
      : (uint64_t v9 = *v4 & 0xFFFFFFFFFFFFLL),
        !v9))
  {
LABEL_61:
    sub_1003444E0();
    uint64_t v29 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    return;
  }
  if ((v6 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = sub_10048CC08(v5, v6, 10, (uint64_t (*)(void *, uint64_t, uint64_t))sub_10048D338);
    char v28 = v27;
    swift_bridgeObjectRelease();
    if ((v28 & 1) == 0) {
      goto LABEL_40;
    }
    goto LABEL_61;
  }
  if ((v6 & 0x2000000000000000) == 0)
  {
    if ((v5 & 0x1000000000000000) != 0) {
      uint64_t v10 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      uint64_t v10 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    }
    uint64_t v11 = sub_10048D338(v10, v8, 10);
    if ((v12 & 1) == 0)
    {
      uint64_t v13 = (uint64_t)v11;
LABEL_40:
      sub_10099B060(v13);
      return;
    }
    goto LABEL_61;
  }
  v30[0] = *v4;
  v30[1] = v6 & 0xFFFFFFFFFFFFFFLL;
  if (v5 == 43)
  {
    if (v7)
    {
      if (v7 != 1 && (BYTE1(v5) - 48) <= 9u)
      {
        uint64_t v13 = (BYTE1(v5) - 48);
        if (v7 == 2) {
          goto LABEL_38;
        }
        if ((BYTE2(v5) - 48) <= 9u)
        {
          uint64_t v13 = 10 * (BYTE1(v5) - 48) + (BYTE2(v5) - 48);
          uint64_t v15 = v7 - 3;
          if (v15)
          {
            uint64_t v16 = (unsigned __int8 *)v30 + 3;
            while (1)
            {
              unsigned int v17 = *v16 - 48;
              if (v17 > 9) {
                goto LABEL_35;
              }
              if (!is_mul_ok(v13, 0xAuLL)) {
                goto LABEL_35;
              }
              BOOL v18 = __CFADD__(10 * v13, v17);
              uint64_t v13 = 10 * v13 + v17;
              if (v18) {
                goto LABEL_35;
              }
              char v14 = 0;
              ++v16;
              if (!--v15) {
                goto LABEL_39;
              }
            }
          }
          goto LABEL_38;
        }
      }
      goto LABEL_35;
    }
  }
  else
  {
    if (v5 != 45)
    {
      if (v7 && (v5 - 48) <= 9u)
      {
        uint64_t v13 = (v5 - 48);
        if (v7 == 1) {
          goto LABEL_38;
        }
        if ((BYTE1(v5) - 48) <= 9u)
        {
          uint64_t v13 = 10 * (v5 - 48) + (BYTE1(v5) - 48);
          uint64_t v19 = v7 - 2;
          if (v19)
          {
            uint64_t v20 = (unsigned __int8 *)v30 + 2;
            while (1)
            {
              unsigned int v21 = *v20 - 48;
              if (v21 > 9) {
                goto LABEL_35;
              }
              if (!is_mul_ok(v13, 0xAuLL)) {
                goto LABEL_35;
              }
              BOOL v18 = __CFADD__(10 * v13, v21);
              uint64_t v13 = 10 * v13 + v21;
              if (v18) {
                goto LABEL_35;
              }
              char v14 = 0;
              ++v20;
              if (!--v19) {
                goto LABEL_39;
              }
            }
          }
          goto LABEL_38;
        }
      }
LABEL_35:
      uint64_t v13 = 0;
      goto LABEL_36;
    }
    if (v7)
    {
      if (v7 != 1 && (BYTE1(v5) - 48) <= 9u)
      {
        uint64_t v13 = 0;
        if (BYTE1(v5) != 48)
        {
LABEL_36:
          char v14 = 1;
          goto LABEL_39;
        }
        if (v7 == 2)
        {
          char v14 = 0;
          uint64_t v13 = -(uint64_t)(BYTE1(v5) - 48);
          goto LABEL_39;
        }
        unsigned __int8 v22 = BYTE2(v5) - 48;
        if ((BYTE2(v5) - 48) <= 9u && is_mul_ok(-(uint64_t)(BYTE1(v5) - 48), 0xAuLL))
        {
          unint64_t v23 = -10 * (BYTE1(v5) - 48);
          uint64_t v13 = v23 - v22;
          if (v23 >= v22)
          {
            uint64_t v24 = v7 - 3;
            if (v24)
            {
              uint64_t v25 = (unsigned __int8 *)v30 + 3;
              while (1)
              {
                unsigned int v26 = *v25 - 48;
                if (v26 > 9) {
                  goto LABEL_35;
                }
                if (!is_mul_ok(v13, 0xAuLL)) {
                  goto LABEL_35;
                }
                BOOL v18 = 10 * v13 >= (unint64_t)v26;
                uint64_t v13 = 10 * v13 - v26;
                if (!v18) {
                  goto LABEL_35;
                }
                char v14 = 0;
                ++v25;
                if (!--v24) {
                  goto LABEL_39;
                }
              }
            }
LABEL_38:
            char v14 = 0;
LABEL_39:
            if ((v14 & 1) == 0) {
              goto LABEL_40;
            }
            goto LABEL_61;
          }
        }
      }
      goto LABEL_35;
    }
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_10048E928(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100033F68;
  v5[5] = a1;
  v5[6] = v4;
  return _swift_task_switch(sub_10048C4E8, 0, 0);
}

uint64_t sub_10048E9DC(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10001D2E4;
  v5[5] = a1;
  v5[6] = v4;
  return _swift_task_switch(sub_10048C4E8, 0, 0);
}

uint64_t sub_10048EA90()
{
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 24);
  swift_release();

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_10048EAD8(uint64_t a1)
{
  return sub_10048B398(a1, v1[2], (uint64_t)(v1 + 3), v1[8], v1[9], (uint64_t)"ServerInteractionController Error calling server on Retry: %@", 61, (uint64_t)&unk_1015C4A50, (uint64_t)&unk_101645B78);
}

uint64_t sub_10048EB38(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_101645B98);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_10048EBA8()
{
  uint64_t v2 = *(void *)(v0 + 32);
  char v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *char v3 = v1;
  v3[1] = sub_100033F68;
  v3[5] = v2;
  return _swift_task_switch(sub_10048C324, 0, 0);
}

uint64_t sub_10048EC54(uint64_t a1)
{
  return sub_100488160(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10048EC60()
{
  uint64_t v1 = sub_10000588C(&qword_101645BB8);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + v6);
  swift_release();

  return _swift_deallocObject(v0, ((((v6 + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

uint64_t sub_10048ED28(uint64_t a1)
{
  uint64_t v3 = *(void *)(sub_10000588C(&qword_101645BB8) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(v1 + ((v5 + 47) & 0xFFFFFFFFFFFFFFF8));

  return sub_1004889B8(a1, v1 + v4, v1 + v5, v6);
}

uint64_t sub_10048EDE4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_10048EE30(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_10000588C(&qword_101638CF0);
  uint64_t v5 = __chkstk_darwin(v4 - 8);
  uint64_t v7 = (char *)v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)v47 - v8;
  uint64_t v10 = type metadata accessor for UUID();
  uint64_t v11 = *(void **)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v49 = (char *)v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v50 = (char *)v47 - v14;
  if (CKRecord.recordType.getter() == 0xD000000000000015 && v15 == 0x800000010135CDC0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v16 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v16 & 1) == 0)
    {
      sub_1004904F0();
      swift_allocError();
      *uint64_t v38 = 0;
      goto LABEL_13;
    }
  }
  uint64_t v48 = a2;
  id v17 = [a1 recordID];
  id v18 = [v17 recordName];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v51 = v10;

  UUID.init(uuidString:)();
  uint64_t v19 = v51;
  swift_bridgeObjectRelease();
  uint64_t v20 = v11;
  unsigned int v21 = (unsigned int (*)(char *, uint64_t, uint64_t))v11[6];
  if (v21(v9, 1, v19) == 1)
  {
    sub_100270E18((uint64_t)v9);
    sub_1004904F0();
    swift_allocError();
    *unsigned __int8 v22 = 1;
LABEL_13:
    swift_willThrow();

    return;
  }
  v47[0] = v20;
  unint64_t v23 = v9;
  uint64_t v24 = (void (*)(char *, char *, uint64_t))v20[4];
  v24(v50, v23, v19);
  id v25 = [a1 encryptedValues];
  NSString v26 = String._bridgeToObjectiveC()();
  v47[1] = v25;
  id v27 = [v25 objectForKeyedSubscript:v26];

  if (v27 && (id v52 = v27, sub_10000588C((uint64_t *)&unk_10163AE50), (swift_dynamicCast() & 1) != 0))
  {
    UUID.init(uuidString:)();
    swift_bridgeObjectRelease();
    uint64_t v28 = v51;
    if (v21(v7, 1, v51) == 1)
    {
      sub_100270E18((uint64_t)v7);
      static os_log_type_t.error.getter();
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v29 = v28;
      uint64_t v30 = swift_allocObject();
      *(_OWORD *)(v30 + 16) = xmmword_101342130;
      *(void *)(v30 + 56) = sub_10001D4B0(0, (unint64_t *)&qword_10163AE60);
      *(void *)(v30 + 64) = sub_1000A038C();
      *(void *)(v30 + 32) = a1;
      sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
      id v31 = a1;
      unsigned __int8 v32 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();

      sub_1004904F0();
      swift_allocError();
      *uint64_t v33 = 2;
      swift_willThrow();
      swift_unknownObjectRelease();

      (*((void (**)(char *, uint64_t))v47[0] + 1))(v50, v29);
    }
    else
    {
      v24(v49, v7, v28);
      uint64_t v39 = v28;
      id v40 = [objc_allocWithZone((Class)NSKeyedArchiver) initRequiringSecureCoding:1];
      [a1 encodeSystemFieldsWithCoder:v40];
      [v40 finishEncoding];
      id v41 = [v40 encodedData];
      uint64_t v42 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v44 = v43;

      swift_unknownObjectRelease();

      unint64_t v45 = v48;
      *uint64_t v48 = v42;
      v45[1] = v44;
      uint64_t found = type metadata accessor for NotifyWhenFoundRecord();
      v24((char *)v45 + *(int *)(found + 20), v50, v39);
      v24((char *)v45 + *(int *)(found + 24), v49, v39);
    }
  }
  else
  {
    static os_log_type_t.error.getter();
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v34 = swift_allocObject();
    *(_OWORD *)(v34 + 16) = xmmword_101342130;
    *(void *)(v34 + 56) = sub_10001D4B0(0, (unint64_t *)&qword_10163AE60);
    *(void *)(v34 + 64) = sub_1000A038C();
    *(void *)(v34 + 32) = a1;
    sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
    id v35 = a1;
    uint64_t v36 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();

    sub_1004904F0();
    swift_allocError();
    *os_log_type_t v37 = 3;
    swift_willThrow();
    swift_unknownObjectRelease();

    (*((void (**)(char *, uint64_t))v47[0] + 1))(v50, v51);
  }
}

uint64_t sub_10048F528()
{
  uint64_t v0 = type metadata accessor for URL();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001E384(v2, qword_10170DF58);
  sub_100010324(v0, (uint64_t)qword_10170DF58);
  type metadata accessor for BeaconStore(0);
  sub_100A9DB34((uint64_t)v4);
  URL.appendingPathComponent(_:isDirectory:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

unint64_t sub_10048F644()
{
  unint64_t v1 = 0x696669746E656469;
  if (*v0 != 1) {
    unint64_t v1 = 0xD000000000000010;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0xD000000000000010;
  }
}

uint64_t sub_10048F6A4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100490FE0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10048F6CC(uint64_t a1)
{
  unint64_t v2 = sub_1004903DC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10048F708(uint64_t a1)
{
  unint64_t v2 = sub_1004903DC();

  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int sub_10048F744()
{
  return Hasher._finalize()();
}

uint64_t sub_10048F814()
{
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int sub_10048F8C8()
{
  return Hasher._finalize()();
}

uint64_t sub_10048F994(uint64_t a1, uint64_t a2)
{
  if ((_s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8)) & 1) == 0|| (static UUID.== infix(_:_:)() & 1) == 0)
  {
    return 0;
  }

  return static UUID.== infix(_:_:)();
}

uint64_t sub_10048FA1C(id *a1)
{
  [*a1 encryptedValues];
  swift_getObjectType();
  CKRecordKeyValueSetting.subscript.getter();
  type metadata accessor for NotifyWhenFoundRecord();
  uint64_t v1 = UUID.uuidString.getter();
  if (!v7)
  {
    swift_bridgeObjectRelease();
LABEL_9:
    UUID.uuidString.getter();
    CKRecordKeyValueSetting.subscript.setter();
    return swift_unknownObjectRelease();
  }
  if (v6 != v1 || v7 != v2)
  {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v4) {
      return swift_unknownObjectRelease();
    }
    goto LABEL_9;
  }
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_10048FB7C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101645BF8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1004903DC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v10 = *v3;
  char v11 = 0;
  sub_100037BB4();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    type metadata accessor for NotifyWhenFoundRecord();
    LOBYTE(v10) = 1;
    type metadata accessor for UUID();
    sub_10049033C(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v10) = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10048FD90@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v28 = a2;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v29 = *(void *)(v3 - 8);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v25 - v7;
  uint64_t v9 = sub_10000588C(&qword_101645BE8);
  uint64_t v30 = *(void *)(v9 - 8);
  uint64_t v31 = v9;
  __chkstk_darwin(v9);
  char v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t found = type metadata accessor for NotifyWhenFoundRecord();
  __chkstk_darwin(found);
  uint64_t v14 = (char *)&v25 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = a1[3];
  uint64_t v33 = a1;
  sub_10001CD44(a1, v15);
  sub_1004903DC();
  unsigned __int8 v32 = v11;
  char v16 = v34;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v16) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v33);
  }
  uint64_t v17 = v30;
  uint64_t v34 = v6;
  char v36 = 0;
  sub_100037AA0();
  uint64_t v18 = v31;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(_OWORD *)uint64_t v14 = v35;
  LOBYTE(v35) = 1;
  uint64_t v27 = sub_10049033C((unint64_t *)&qword_10163B010, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v19 = &v14[*(int *)(found + 20)];
  NSString v26 = v14;
  uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v29 + 32);
  v20(v19, v8, v3);
  LOBYTE(v35) = 2;
  unsigned int v21 = v32;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v21, v18);
  uint64_t v22 = *(int *)(found + 24);
  uint64_t v23 = (uint64_t)v26;
  v20(&v26[v22], v34, v3);
  sub_100490430(v23, v28);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v33);
  return sub_100490494(v23);
}

uint64_t sub_100490194()
{
  if (qword_101636B38 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for URL();
  sub_100010324(v0, (uint64_t)qword_10170DF58);
  UUID.uuidString.getter();
  URL.appendingPathComponent(_:isDirectory:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10049023C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10048FD90(a1, a2);
}

uint64_t sub_100490254(void *a1)
{
  return sub_10048FB7C(a1);
}

uint64_t sub_10049026C(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_10049033C(&qword_101645BD0, (void (*)(uint64_t))type metadata accessor for NotifyWhenFoundRecord);
  uint64_t result = sub_10049033C(&qword_101645BD8, (void (*)(uint64_t))type metadata accessor for NotifyWhenFoundRecord);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for NotifyWhenFoundRecord()
{
  uint64_t result = qword_101645C70;
  if (!qword_101645C70) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_10049033C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100490384(uint64_t a1)
{
  uint64_t result = sub_10049033C(&qword_101645BE0, (void (*)(uint64_t))type metadata accessor for NotifyWhenFoundRecord);
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1004903DC()
{
  unint64_t result = qword_101645BF0;
  if (!qword_101645BF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645BF0);
  }
  return result;
}

uint64_t sub_100490430(uint64_t a1, uint64_t a2)
{
  uint64_t found = type metadata accessor for NotifyWhenFoundRecord();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(found - 8) + 16))(a2, a1, found);
  return a2;
}

uint64_t sub_100490494(uint64_t a1)
{
  uint64_t found = type metadata accessor for NotifyWhenFoundRecord();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(found - 8) + 8))(a1, found);
  return a1;
}

unint64_t sub_1004904F0()
{
  unint64_t result = qword_101645C08;
  if (!qword_101645C08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645C08);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for NotifyWhenFoundRecord.NotifyWhenFoundRecordConversionError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100490610);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NotifyWhenFoundRecord.NotifyWhenFoundRecordConversionError()
{
  return &type metadata for NotifyWhenFoundRecord.NotifyWhenFoundRecordConversionError;
}

unsigned char *storeEnumTagSinglePayload for NotifyWhenFoundRecord.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100490714);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NotifyWhenFoundRecord.CodingKeys()
{
  return &type metadata for NotifyWhenFoundRecord.CodingKeys;
}

uint64_t *sub_10049074C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_1000361E0(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = (char *)a1 + v9;
    char v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UUID();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    v13((char *)a1 + *(int *)(a3 + 24), (char *)a2 + *(int *)(a3 + 24), v12);
  }
  return a1;
}

uint64_t sub_10049085C(uint64_t a1, uint64_t a2)
{
  sub_10001CFB8(*(void *)a1, *(void *)(a1 + 8));
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UUID();
  unint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);
  ((void (*)(void *__return_ptr, uint64_t, uint64_t))v8)((void *)(v5 - 8), v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 24);

  return v8(v6, v5);
}

uint64_t *sub_100490910(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000361E0(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  v12((char *)a1 + *(int *)(a3 + 24), (char *)a2 + *(int *)(a3 + 24), v11);
  return a1;
}

uint64_t *sub_1004909D0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000361E0(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10001CFB8(v8, v9);
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24);
  v14(v11, v12, v13);
  v14((char *)a1 + *(int *)(a3 + 24), (char *)a2 + *(int *)(a3 + 24), v13);
  return a1;
}

char *sub_100490A98(char *a1, char *a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v6 = *(int *)(a3 + 20);
  unint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v10(&a1[*(int *)(a3 + 24)], &a2[*(int *)(a3 + 24)], v9);
  return a1;
}

uint64_t *sub_100490B4C(uint64_t *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001CFB8(v6, v7);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = &a2[v8];
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40);
  v12(v9, v10, v11);
  v12((char *)a1 + *(int *)(a3 + 24), &a2[*(int *)(a3 + 24)], v11);
  return a1;
}

uint64_t sub_100490C0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100490C20);
}

uint64_t sub_100490C20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for UUID();
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_100490CDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100490CF0);
}

void *sub_100490CF0(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *unint64_t result = 0;
    result[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_100490DA0()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_100490E38()
{
  return sub_10049033C(&qword_101645CB0, (void (*)(uint64_t))type metadata accessor for NotifyWhenFoundRecord);
}

unint64_t sub_100490E84()
{
  unint64_t result = qword_101645CB8;
  if (!qword_101645CB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645CB8);
  }
  return result;
}

unint64_t sub_100490EDC()
{
  unint64_t result = qword_101645CC0;
  if (!qword_101645CC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645CC0);
  }
  return result;
}

unint64_t sub_100490F34()
{
  unint64_t result = qword_101645CC8;
  if (!qword_101645CC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645CC8);
  }
  return result;
}

unint64_t sub_100490F8C()
{
  unint64_t result = qword_101645CD0;
  if (!qword_101645CD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645CD0);
  }
  return result;
}

uint64_t sub_100490FE0(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x80000001013EEA50
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x696669746E656469 && a2 == 0xEA00000000007265 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001013EE1B0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_100491140@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v4) = HIDWORD(result) - result;
      if (__OFSUB__(HIDWORD(result), result))
      {
        __break(1u);
LABEL_10:
        __break(1u);
        JUMPOUT(0x1004911CCLL);
      }
      uint64_t v4 = (int)v4;
LABEL_6:
      if (v4 != 174)
      {
LABEL_7:
        sub_10001CFB8(result, a2);
        unint64_t result = 0;
        a2 = 0xF000000000000000;
      }
      *a3 = result;
      a3[1] = a2;
      return result;
    case 2uLL:
      uint64_t v6 = *(void *)(result + 16);
      uint64_t v5 = *(void *)(result + 24);
      BOOL v7 = __OFSUB__(v5, v6);
      uint64_t v4 = v5 - v6;
      if (!v7) {
        goto LABEL_6;
      }
      goto LABEL_10;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v4 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_1004911E0@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v4) = HIDWORD(result) - result;
      if (__OFSUB__(HIDWORD(result), result))
      {
        __break(1u);
LABEL_10:
        __break(1u);
        JUMPOUT(0x10049126CLL);
      }
      uint64_t v4 = (int)v4;
LABEL_6:
      if (v4 != 65)
      {
LABEL_7:
        sub_10001CFB8(result, a2);
        unint64_t result = 0;
        a2 = 0xF000000000000000;
      }
      *a3 = result;
      a3[1] = a2;
      return result;
    case 2uLL:
      uint64_t v6 = *(void *)(result + 16);
      uint64_t v5 = *(void *)(result + 24);
      BOOL v7 = __OFSUB__(v5, v6);
      uint64_t v4 = v5 - v6;
      if (!v7) {
        goto LABEL_6;
      }
      goto LABEL_10;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v4 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_10049127C@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v4) = HIDWORD(result) - result;
      if (__OFSUB__(HIDWORD(result), result))
      {
        __break(1u);
LABEL_10:
        __break(1u);
        JUMPOUT(0x100491308);
      }
      uint64_t v4 = (int)v4;
LABEL_6:
      if (v4 != 57)
      {
LABEL_7:
        sub_10001CFB8(result, a2);
        unint64_t result = 0;
        a2 = 0xF000000000000000;
      }
      *a3 = result;
      a3[1] = a2;
      return result;
    case 2uLL:
      uint64_t v6 = *(void *)(result + 16);
      uint64_t v5 = *(void *)(result + 24);
      BOOL v7 = __OFSUB__(v5, v6);
      uint64_t v4 = v5 - v6;
      if (!v7) {
        goto LABEL_6;
      }
      goto LABEL_10;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v4 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_10049131C@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v4) = HIDWORD(result) - result;
      if (__OFSUB__(HIDWORD(result), result))
      {
        __break(1u);
LABEL_10:
        __break(1u);
        JUMPOUT(0x1004913A8);
      }
      uint64_t v4 = (int)v4;
LABEL_6:
      if (v4 != 28)
      {
LABEL_7:
        sub_10001CFB8(result, a2);
        unint64_t result = 0;
        a2 = 0xF000000000000000;
      }
      *a3 = result;
      a3[1] = a2;
      return result;
    case 2uLL:
      uint64_t v6 = *(void *)(result + 16);
      uint64_t v5 = *(void *)(result + 24);
      BOOL v7 = __OFSUB__(v5, v6);
      uint64_t v4 = v5 - v6;
      if (!v7) {
        goto LABEL_6;
      }
      goto LABEL_10;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v4 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_1004913B8@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v4) = HIDWORD(result) - result;
      if (__OFSUB__(HIDWORD(result), result))
      {
        __break(1u);
LABEL_10:
        __break(1u);
        JUMPOUT(0x100491444);
      }
      uint64_t v4 = (int)v4;
LABEL_6:
      if (v4 != 72)
      {
LABEL_7:
        sub_10001CFB8(result, a2);
        unint64_t result = 0;
        a2 = 0xF000000000000000;
      }
      *a3 = result;
      a3[1] = a2;
      return result;
    case 2uLL:
      uint64_t v6 = *(void *)(result + 16);
      uint64_t v5 = *(void *)(result + 24);
      BOOL v7 = __OFSUB__(v5, v6);
      uint64_t v4 = v5 - v6;
      if (!v7) {
        goto LABEL_6;
      }
      goto LABEL_10;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v4 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_100491454@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v4) = HIDWORD(result) - result;
      if (__OFSUB__(HIDWORD(result), result))
      {
        __break(1u);
LABEL_10:
        __break(1u);
        JUMPOUT(0x1004914E0);
      }
      uint64_t v4 = (int)v4;
LABEL_6:
      if (v4 != 16)
      {
LABEL_7:
        sub_10001CFB8(result, a2);
        unint64_t result = 0;
        a2 = 0xF000000000000000;
      }
      *a3 = result;
      a3[1] = a2;
      return result;
    case 2uLL:
      uint64_t v6 = *(void *)(result + 16);
      uint64_t v5 = *(void *)(result + 24);
      BOOL v7 = __OFSUB__(v5, v6);
      uint64_t v4 = v5 - v6;
      if (!v7) {
        goto LABEL_6;
      }
      goto LABEL_10;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v4 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_1004914F0@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v4) = HIDWORD(result) - result;
      if (__OFSUB__(HIDWORD(result), result))
      {
        __break(1u);
LABEL_10:
        __break(1u);
        JUMPOUT(0x10049157CLL);
      }
      uint64_t v4 = (int)v4;
LABEL_6:
      if (v4 != 6)
      {
LABEL_7:
        sub_10001CFB8(result, a2);
        unint64_t result = 0;
        a2 = 0xF000000000000000;
      }
      *a3 = result;
      a3[1] = a2;
      return result;
    case 2uLL:
      uint64_t v6 = *(void *)(result + 16);
      uint64_t v5 = *(void *)(result + 24);
      BOOL v7 = __OFSUB__(v5, v6);
      uint64_t v4 = v5 - v6;
      if (!v7) {
        goto LABEL_6;
      }
      goto LABEL_10;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v4 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_10049158C@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v4) = HIDWORD(result) - result;
      if (__OFSUB__(HIDWORD(result), result))
      {
        __break(1u);
LABEL_10:
        __break(1u);
        JUMPOUT(0x100491618);
      }
      uint64_t v4 = (int)v4;
LABEL_6:
      if (v4 != 12)
      {
LABEL_7:
        sub_10001CFB8(result, a2);
        unint64_t result = 0;
        a2 = 0xF000000000000000;
      }
      *a3 = result;
      a3[1] = a2;
      return result;
    case 2uLL:
      uint64_t v6 = *(void *)(result + 16);
      uint64_t v5 = *(void *)(result + 24);
      BOOL v7 = __OFSUB__(v5, v6);
      uint64_t v4 = v5 - v6;
      if (!v7) {
        goto LABEL_6;
      }
      goto LABEL_10;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v4 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_100491628@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v4) = HIDWORD(result) - result;
      if (__OFSUB__(HIDWORD(result), result))
      {
        __break(1u);
LABEL_10:
        __break(1u);
        JUMPOUT(0x1004916B4);
      }
      uint64_t v4 = (int)v4;
LABEL_6:
      if (v4 != 113)
      {
LABEL_7:
        sub_10001CFB8(result, a2);
        unint64_t result = 0;
        a2 = 0xF000000000000000;
      }
      *a3 = result;
      a3[1] = a2;
      return result;
    case 2uLL:
      uint64_t v6 = *(void *)(result + 16);
      uint64_t v5 = *(void *)(result + 24);
      BOOL v7 = __OFSUB__(v5, v6);
      uint64_t v4 = v5 - v6;
      if (!v7) {
        goto LABEL_6;
      }
      goto LABEL_10;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v4 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_1004916C4@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v4) = HIDWORD(result) - result;
      if (__OFSUB__(HIDWORD(result), result))
      {
        __break(1u);
LABEL_9:
        __break(1u);
        JUMPOUT(0x100491748);
      }
      uint64_t v4 = (int)v4;
LABEL_5:
      if (v4 != 1326)
      {
LABEL_6:
        sub_10001CFB8(result, a2);
        unint64_t result = 0;
        a2 = 0xF000000000000000;
      }
      *a3 = result;
      a3[1] = a2;
      return result;
    case 2uLL:
      uint64_t v6 = *(void *)(result + 16);
      uint64_t v5 = *(void *)(result + 24);
      BOOL v7 = __OFSUB__(v5, v6);
      uint64_t v4 = v5 - v6;
      if (!v7) {
        goto LABEL_5;
      }
      goto LABEL_9;
    default:
      goto LABEL_6;
  }
}

uint64_t sub_100491758@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v4) = HIDWORD(result) - result;
      if (__OFSUB__(HIDWORD(result), result))
      {
        __break(1u);
LABEL_9:
        __break(1u);
        JUMPOUT(0x1004917DCLL);
      }
      uint64_t v4 = (int)v4;
LABEL_5:
      if (v4 != 1040)
      {
LABEL_6:
        sub_10001CFB8(result, a2);
        unint64_t result = 0;
        a2 = 0xF000000000000000;
      }
      *a3 = result;
      a3[1] = a2;
      return result;
    case 2uLL:
      uint64_t v6 = *(void *)(result + 16);
      uint64_t v5 = *(void *)(result + 24);
      BOOL v7 = __OFSUB__(v5, v6);
      uint64_t v4 = v5 - v6;
      if (!v7) {
        goto LABEL_5;
      }
      goto LABEL_9;
    default:
      goto LABEL_6;
  }
}

uint64_t sub_1004917EC@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v4) = HIDWORD(result) - result;
      if (__OFSUB__(HIDWORD(result), result))
      {
        __break(1u);
LABEL_9:
        __break(1u);
        JUMPOUT(0x100491870);
      }
      uint64_t v4 = (int)v4;
LABEL_5:
      if (v4 != 1286)
      {
LABEL_6:
        sub_10001CFB8(result, a2);
        unint64_t result = 0;
        a2 = 0xF000000000000000;
      }
      *a3 = result;
      a3[1] = a2;
      return result;
    case 2uLL:
      uint64_t v6 = *(void *)(result + 16);
      uint64_t v5 = *(void *)(result + 24);
      BOOL v7 = __OFSUB__(v5, v6);
      uint64_t v4 = v5 - v6;
      if (!v7) {
        goto LABEL_5;
      }
      goto LABEL_9;
    default:
      goto LABEL_6;
  }
}

uint64_t sub_100491884@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v4) = HIDWORD(result) - result;
      if (__OFSUB__(HIDWORD(result), result))
      {
        __break(1u);
LABEL_10:
        __break(1u);
        JUMPOUT(0x100491910);
      }
      uint64_t v4 = (int)v4;
LABEL_6:
      if (v4 != 100)
      {
LABEL_7:
        sub_10001CFB8(result, a2);
        unint64_t result = 0;
        a2 = 0xF000000000000000;
      }
      *a3 = result;
      a3[1] = a2;
      return result;
    case 2uLL:
      uint64_t v6 = *(void *)(result + 16);
      uint64_t v5 = *(void *)(result + 24);
      BOOL v7 = __OFSUB__(v5, v6);
      uint64_t v4 = v5 - v6;
      if (!v7) {
        goto LABEL_6;
      }
      goto LABEL_10;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v4 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_100491920@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v4) = HIDWORD(result) - result;
      if (__OFSUB__(HIDWORD(result), result))
      {
        __break(1u);
LABEL_10:
        __break(1u);
        JUMPOUT(0x1004919ACLL);
      }
      uint64_t v4 = (int)v4;
LABEL_6:
      if (v4 != 89)
      {
LABEL_7:
        sub_10001CFB8(result, a2);
        unint64_t result = 0;
        a2 = 0xF000000000000000;
      }
      *a3 = result;
      a3[1] = a2;
      return result;
    case 2uLL:
      uint64_t v6 = *(void *)(result + 16);
      uint64_t v5 = *(void *)(result + 24);
      BOOL v7 = __OFSUB__(v5, v6);
      uint64_t v4 = v5 - v6;
      if (!v7) {
        goto LABEL_6;
      }
      goto LABEL_10;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v4 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_1004919BC@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v4) = HIDWORD(result) - result;
      if (__OFSUB__(HIDWORD(result), result))
      {
        __break(1u);
LABEL_10:
        __break(1u);
        JUMPOUT(0x100491A48);
      }
      uint64_t v4 = (int)v4;
LABEL_6:
      if (v4 != 60)
      {
LABEL_7:
        sub_10001CFB8(result, a2);
        unint64_t result = 0;
        a2 = 0xF000000000000000;
      }
      *a3 = result;
      a3[1] = a2;
      return result;
    case 2uLL:
      uint64_t v6 = *(void *)(result + 16);
      uint64_t v5 = *(void *)(result + 24);
      BOOL v7 = __OFSUB__(v5, v6);
      uint64_t v4 = v5 - v6;
      if (!v7) {
        goto LABEL_6;
      }
      goto LABEL_10;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v4 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_100491A58@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v4) = HIDWORD(result) - result;
      if (__OFSUB__(HIDWORD(result), result))
      {
        __break(1u);
LABEL_10:
        __break(1u);
        JUMPOUT(0x100491AE4);
      }
      uint64_t v4 = (int)v4;
LABEL_6:
      if (v4 != 114)
      {
LABEL_7:
        sub_10001CFB8(result, a2);
        unint64_t result = 0;
        a2 = 0xF000000000000000;
      }
      *a3 = result;
      a3[1] = a2;
      return result;
    case 2uLL:
      uint64_t v6 = *(void *)(result + 16);
      uint64_t v5 = *(void *)(result + 24);
      BOOL v7 = __OFSUB__(v5, v6);
      uint64_t v4 = v5 - v6;
      if (!v7) {
        goto LABEL_6;
      }
      goto LABEL_10;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v4 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_100491AF4@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v4) = HIDWORD(result) - result;
      if (__OFSUB__(HIDWORD(result), result))
      {
        __break(1u);
LABEL_10:
        __break(1u);
        JUMPOUT(0x100491B80);
      }
      uint64_t v4 = (int)v4;
LABEL_6:
      if (v4 != 85)
      {
LABEL_7:
        sub_10001CFB8(result, a2);
        unint64_t result = 0;
        a2 = 0xF000000000000000;
      }
      *a3 = result;
      a3[1] = a2;
      return result;
    case 2uLL:
      uint64_t v6 = *(void *)(result + 16);
      uint64_t v5 = *(void *)(result + 24);
      BOOL v7 = __OFSUB__(v5, v6);
      uint64_t v4 = v5 - v6;
      if (!v7) {
        goto LABEL_6;
      }
      goto LABEL_10;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v4 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_100491B90@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v4) = HIDWORD(result) - result;
      if (__OFSUB__(HIDWORD(result), result))
      {
        __break(1u);
LABEL_10:
        __break(1u);
        JUMPOUT(0x100491C1CLL);
      }
      uint64_t v4 = (int)v4;
LABEL_6:
      if (v4 != 32)
      {
LABEL_7:
        sub_10001CFB8(result, a2);
        unint64_t result = 0;
        a2 = 0xF000000000000000;
      }
      *a3 = result;
      a3[1] = a2;
      return result;
    case 2uLL:
      uint64_t v6 = *(void *)(result + 16);
      uint64_t v5 = *(void *)(result + 24);
      BOOL v7 = __OFSUB__(v5, v6);
      uint64_t v4 = v5 - v6;
      if (!v7) {
        goto LABEL_6;
      }
      goto LABEL_10;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v4 = BYTE6(a2);
      goto LABEL_6;
  }
}

void *SharingCircleWildAdvertisementKey.length.unsafeMutableAddressor()
{
  return &static SharingCircleWildAdvertisementKey.length;
}

uint64_t sub_100491C38(uint64_t a1)
{
  unint64_t v2 = sub_100491E00();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100491C74(uint64_t a1)
{
  unint64_t v2 = sub_100491E00();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t SharingCircleWildAdvertisementKey.encode(to:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000588C(&qword_101645CD8);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100491E00();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11[0] = a2;
  v11[1] = a3;
  sub_10043AE48();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

unint64_t sub_100491E00()
{
  unint64_t result = qword_101645CE0;
  if (!qword_101645CE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645CE0);
  }
  return result;
}

void *SharingCircleWildAdvertisementKey.init(from:)(void *a1)
{
  return sub_1004922DC(a1);
}

void *sub_100491E6C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  unint64_t result = sub_1004922DC(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_100491E98(void *a1)
{
  return SharingCircleWildAdvertisementKey.encode(to:)(a1, *v1, v1[1]);
}

uint64_t sub_100491EB4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100491B90(*(void *)a1, *(void *)(a1 + 8), a2);
}

uint64_t sub_100491ED4()
{
  uint64_t result = 0x7865646E69;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x654B63696C627570;
      break;
    case 2:
      uint64_t result = 0x4B65746176697270;
      break;
    case 3:
      uint64_t result = 0x6553646572616873;
      break;
    case 4:
      uint64_t result = 0x64656D7265746E69;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100491F98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1004924A0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100491FC0(uint64_t a1)
{
  unint64_t v2 = sub_10049244C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100491FFC(uint64_t a1)
{
  unint64_t v2 = sub_10049244C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t SharingCircleWildDiversifiedKey.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_101645CE8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_10049244C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v12) = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    long long v12 = *(_OWORD *)(v3 + 8);
    char v11 = 1;
    sub_10043C654();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = *(_OWORD *)(v3 + 24);
    char v11 = 2;
    sub_10043C164();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = *(_OWORD *)(v3 + 40);
    char v11 = 3;
    sub_1002A89B4();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = *(_OWORD *)(v3 + 56);
    char v11 = 4;
    sub_10043D4A8();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

__n128 SharingCircleWildDiversifiedKey.init(from:)@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_10049270C(a1, (uint64_t *)v6);
  if (!v2)
  {
    long long v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(void *)(a2 + 64) = v7;
    __n128 result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + 16) = result;
  }
  return result;
}

uint64_t sub_1004922C4(void *a1)
{
  return SharingCircleWildDiversifiedKey.encode(to:)(a1);
}

void *sub_1004922DC(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_101645D60);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10001CD44(a1, a1[3]);
  sub_100491E00();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  else
  {
    sub_100442580();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v7 = v9;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  return v7;
}

unint64_t sub_10049244C()
{
  unint64_t result = qword_101645CF0;
  if (!qword_101645CF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645CF0);
  }
  return result;
}

uint64_t sub_1004924A0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x7865646E69 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x654B63696C627570 && a2 == 0xE900000000000079 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x4B65746176697270 && a2 == 0xEA00000000007965 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6553646572616873 && a2 == 0xEC00000074657263 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x64656D7265746E69 && a2 == 0xEF79654B65746169)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t sub_10049270C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_10000588C(&qword_101645D58);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_10049244C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  LOBYTE(v37) = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  char v39 = 1;
  sub_10043C600();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v36 = v9;
  uint64_t v10 = v37;
  unint64_t v11 = v38;
  char v39 = 2;
  sub_1000361E0(v37, v38);
  sub_10043C110();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v34 = v10;
  uint64_t v35 = v11;
  char v39 = 3;
  uint64_t v12 = v37;
  unint64_t v13 = v38;
  sub_1000361E0(v37, v38);
  sub_1002A87F4();
  unint64_t v33 = 0;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v32 = v12;
  unint64_t v33 = v13;
  char v39 = 4;
  unint64_t v30 = v38;
  uint64_t v31 = v37;
  sub_1000361E0(v37, v38);
  sub_10043D454();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v15 = v37;
  unint64_t v14 = v38;
  unint64_t v28 = v38;
  uint64_t v29 = v37;
  sub_1000361E0(v34, v35);
  uint64_t v16 = v32;
  unint64_t v17 = v33;
  sub_1000361E0(v32, v33);
  unint64_t v19 = v30;
  uint64_t v18 = v31;
  sub_1000361E0(v31, v30);
  sub_1000361E0(v15, v14);
  uint64_t v20 = v18;
  sub_10001CFB8(v18, v19);
  sub_10001CFB8(v16, v17);
  uint64_t v22 = v34;
  unint64_t v21 = v35;
  sub_10001CFB8(v34, v35);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  sub_10001CFB8(v22, v21);
  sub_10001CFB8(v16, v17);
  uint64_t v23 = v20;
  sub_10001CFB8(v20, v19);
  unint64_t v25 = v28;
  uint64_t v24 = v29;
  uint64_t result = sub_10001CFB8(v29, v28);
  *a2 = v36;
  a2[1] = v22;
  a2[2] = v35;
  a2[3] = v16;
  a2[4] = v17;
  a2[5] = v23;
  a2[6] = v19;
  a2[7] = v24;
  a2[8] = v25;
  return result;
}

unint64_t sub_100492B60(uint64_t a1)
{
  unint64_t result = sub_100492B88();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_100492B88()
{
  unint64_t result = qword_101645CF8;
  if (!qword_101645CF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645CF8);
  }
  return result;
}

unint64_t sub_100492BDC(void *a1)
{
  a1[1] = sub_100492C1C();
  a1[2] = sub_100492C70();
  a1[3] = sub_100492CC4();
  unint64_t result = sub_100492D18();
  a1[4] = result;
  return result;
}

unint64_t sub_100492C1C()
{
  unint64_t result = qword_101645D00;
  if (!qword_101645D00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645D00);
  }
  return result;
}

unint64_t sub_100492C70()
{
  unint64_t result = qword_101645D08;
  if (!qword_101645D08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645D08);
  }
  return result;
}

unint64_t sub_100492CC4()
{
  unint64_t result = qword_101645D10;
  if (!qword_101645D10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645D10);
  }
  return result;
}

unint64_t sub_100492D18()
{
  unint64_t result = qword_101645D18;
  if (!qword_101645D18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645D18);
  }
  return result;
}

unint64_t sub_100492D70()
{
  unint64_t result = qword_101645D20;
  if (!qword_101645D20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645D20);
  }
  return result;
}

ValueMetadata *type metadata accessor for SharingCircleWildAdvertisementKey()
{
  return &type metadata for SharingCircleWildAdvertisementKey;
}

uint64_t destroy for SharingCircleWildDiversifiedKey(void *a1)
{
  sub_10001CFB8(a1[1], a1[2]);
  sub_10001CFB8(a1[3], a1[4]);
  sub_10001CFB8(a1[5], a1[6]);
  uint64_t v2 = a1[7];
  unint64_t v3 = a1[8];

  return sub_10001CFB8(v2, v3);
}

void *initializeWithCopy for SharingCircleWildDiversifiedKey(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  unint64_t v5 = a2[2];
  sub_1000361E0(v4, v5);
  a1[1] = v4;
  a1[2] = v5;
  uint64_t v6 = a2[3];
  unint64_t v7 = a2[4];
  sub_1000361E0(v6, v7);
  a1[3] = v6;
  a1[4] = v7;
  uint64_t v8 = a2[5];
  unint64_t v9 = a2[6];
  sub_1000361E0(v8, v9);
  a1[5] = v8;
  a1[6] = v9;
  uint64_t v11 = a2[7];
  unint64_t v10 = a2[8];
  sub_1000361E0(v11, v10);
  a1[7] = v11;
  a1[8] = v10;
  return a1;
}

void *assignWithCopy for SharingCircleWildDiversifiedKey(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  unint64_t v5 = a2[2];
  sub_1000361E0(v4, v5);
  uint64_t v6 = a1[1];
  unint64_t v7 = a1[2];
  a1[1] = v4;
  a1[2] = v5;
  sub_10001CFB8(v6, v7);
  uint64_t v8 = a2[3];
  unint64_t v9 = a2[4];
  sub_1000361E0(v8, v9);
  uint64_t v10 = a1[3];
  unint64_t v11 = a1[4];
  a1[3] = v8;
  a1[4] = v9;
  sub_10001CFB8(v10, v11);
  uint64_t v12 = a2[5];
  unint64_t v13 = a2[6];
  sub_1000361E0(v12, v13);
  uint64_t v14 = a1[5];
  unint64_t v15 = a1[6];
  a1[5] = v12;
  a1[6] = v13;
  sub_10001CFB8(v14, v15);
  uint64_t v17 = a2[7];
  unint64_t v16 = a2[8];
  sub_1000361E0(v17, v16);
  uint64_t v18 = a1[7];
  unint64_t v19 = a1[8];
  a1[7] = v17;
  a1[8] = v16;
  sub_10001CFB8(v18, v19);
  return a1;
}

uint64_t assignWithTake for SharingCircleWildDiversifiedKey(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001CFB8(v4, v5);
  uint64_t v6 = *(void *)(a1 + 24);
  unint64_t v7 = *(void *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_10001CFB8(v6, v7);
  uint64_t v8 = *(void *)(a1 + 40);
  unint64_t v9 = *(void *)(a1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  sub_10001CFB8(v8, v9);
  uint64_t v10 = *(void *)(a2 + 64);
  uint64_t v11 = *(void *)(a1 + 56);
  unint64_t v12 = *(void *)(a1 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = v10;
  sub_10001CFB8(v11, v12);
  return a1;
}

uint64_t getEnumTagSinglePayload for SharingCircleWildDiversifiedKey(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 72)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 16) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 16) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for SharingCircleWildDiversifiedKey(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)unint64_t result = a2 - 13;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 72) = 0;
    }
    if (a2)
    {
      *(void *)(result + 8) = 0;
      *(void *)(result + 16) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SharingCircleWildDiversifiedKey()
{
  return &type metadata for SharingCircleWildDiversifiedKey;
}

unsigned char *storeEnumTagSinglePayload for SharingCircleWildDiversifiedKey.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100493158);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SharingCircleWildDiversifiedKey.CodingKeys()
{
  return &type metadata for SharingCircleWildDiversifiedKey.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for SharingCircleWildAdvertisementKey.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x10049322CLL);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for SharingCircleWildAdvertisementKey.CodingKeys()
{
  return &type metadata for SharingCircleWildAdvertisementKey.CodingKeys;
}

unint64_t sub_100493268()
{
  unint64_t result = qword_101645D28;
  if (!qword_101645D28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645D28);
  }
  return result;
}

unint64_t sub_1004932C0()
{
  unint64_t result = qword_101645D30;
  if (!qword_101645D30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645D30);
  }
  return result;
}

unint64_t sub_100493318()
{
  unint64_t result = qword_101645D38;
  if (!qword_101645D38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645D38);
  }
  return result;
}

unint64_t sub_100493370()
{
  unint64_t result = qword_101645D40;
  if (!qword_101645D40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645D40);
  }
  return result;
}

unint64_t sub_1004933C8()
{
  unint64_t result = qword_101645D48;
  if (!qword_101645D48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645D48);
  }
  return result;
}

unint64_t sub_100493420()
{
  unint64_t result = qword_101645D50;
  if (!qword_101645D50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645D50);
  }
  return result;
}

uint64_t sub_100493474(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[6] = a5;
  v6[7] = a6;
  _OWORD v6[4] = a3;
  v6[5] = a4;
  void v6[2] = a1;
  v6[3] = a2;
  sub_10000588C(&qword_101645D70);
  v6[8] = swift_task_alloc();
  uint64_t v7 = type metadata accessor for Destination();
  v6[9] = v7;
  v6[10] = *(void *)(v7 - 8);
  v6[11] = swift_task_alloc();
  v6[12] = swift_task_alloc();
  return _swift_task_switch(sub_10049357C, 0, 0);
}

uint64_t sub_10049357C()
{
  uint64_t v1 = *(void *)(v0[5] + 16);
  if (v1)
  {
    uint64_t v2 = v0[10];
    int v3 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
    uint64_t v25 = v2;
    unsigned int v4 = (void (**)(char *, char *, uint64_t))(v2 + 32);
    uint64_t v5 = swift_bridgeObjectRetain() + 48;
    unsigned int v6 = (char *)_swiftEmptyArrayStorage;
    do
    {
      uint64_t v8 = v0[8];
      uint64_t v7 = v0[9];
      swift_bridgeObjectRetain();
      Destination.init(stringRepresentation:)();
      if ((*v3)(v8, 1, v7) == 1)
      {
        sub_100493A14(v0[8]);
      }
      else
      {
        uint64_t v10 = (char *)v0[11];
        uint64_t v9 = (char *)v0[12];
        uint64_t v11 = v0[9];
        unint64_t v12 = *v4;
        (*v4)(v9, (char *)v0[8], v11);
        v12(v10, v9, v11);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unsigned int v6 = (char *)sub_100A6F818(0, *((void *)v6 + 2) + 1, 1, (unint64_t)v6);
        }
        unint64_t v14 = *((void *)v6 + 2);
        unint64_t v13 = *((void *)v6 + 3);
        if (v14 >= v13 >> 1) {
          unsigned int v6 = (char *)sub_100A6F818(v13 > 1, v14 + 1, 1, (unint64_t)v6);
        }
        unint64_t v15 = (char *)v0[11];
        uint64_t v16 = v0[9];
        *((void *)v6 + 2) = v14 + 1;
        v12(&v6[((*(unsigned __int8 *)(v25 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80))+ *(void *)(v25 + 72) * v14], v15, v16);
      }
      v5 += 24;
      --v1;
    }
    while (v1);
    swift_bridgeObjectRelease();
  }
  else
  {
    unsigned int v6 = (char *)_swiftEmptyArrayStorage;
  }
  uint64_t v18 = v0[6];
  uint64_t v17 = v0[7];
  swift_bridgeObjectRelease();
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = v18;
  *(void *)(v19 + 24) = v17;
  swift_retain();
  uint64_t v20 = (void *)swift_task_alloc();
  v0[13] = v20;
  *uint64_t v20 = v0;
  v20[1] = sub_1004937F0;
  uint64_t v21 = v0[3];
  uint64_t v22 = v0[4];
  uint64_t v23 = v0[2];
  return CorrelationIdentifierMap.init(serviceName:destinations:disambiguate:)(v23, v21, v22, v6, sub_100493AAC, v19);
}

uint64_t sub_1004937F0()
{
  *(void *)(*(void *)v1 + 112) = v0;
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10049398C;
  }
  else {
    uint64_t v2 = sub_100493904;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100493904()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10049398C()
{
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100493A14(uint64_t a1)
{
  uint64_t v2 = sub_10000588C(&qword_101645D70);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_100493A74()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100493AAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100493ACC(a1, a2, *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 16), *(void (**)(char *, uint64_t, uint64_t))(v3 + 24), a3);
}

uint64_t sub_100493ACC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t)@<X2>, void (*a4)(char *, uint64_t, uint64_t)@<X3>, uint64_t a5@<X8>)
{
  uint64_t v54 = a4;
  uint64_t v56 = a5;
  uint64_t v8 = sub_10000588C(&qword_101645D70);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = type metadata accessor for Destination();
  uint64_t v11 = *(void *)(v57 - 8);
  uint64_t v12 = __chkstk_darwin(v57);
  unint64_t v14 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v54 - v15;
  uint64_t v55 = a1;
  Destination.destination.getter();
  uint64_t v17 = _s12searchpartyd20MessagingDestinationV20stringRepresentationACSgSS_tcfC_0();
  if (v19)
  {
    uint64_t v20 = v17;
    uint64_t v21 = v18;
    uint64_t v22 = v19;
    Destination.destination.getter();
    uint64_t v23 = _s12searchpartyd20MessagingDestinationV20stringRepresentationACSgSS_tcfC_0();
    if (v25)
    {
      a3(v20, v21, v22, v23, v24, v25);
      uint64_t v27 = v26;
      unint64_t v29 = v28;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      Destination.init(stringRepresentation:)();
      uint64_t v30 = v57;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, v57) == 1)
      {
        sub_100493A14((uint64_t)v10);
        if (qword_101637238 != -1) {
          swift_once();
        }
        uint64_t v31 = type metadata accessor for Logger();
        sub_100010324(v31, (uint64_t)qword_10170EF80);
        swift_bridgeObjectRetain();
        uint64_t v32 = Logger.logObject.getter();
        os_log_type_t v33 = static os_log_type_t.fault.getter();
        if (os_log_type_enabled(v32, v33))
        {
          uint64_t v34 = (uint8_t *)swift_slowAlloc();
          uint64_t v59 = swift_slowAlloc();
          *(_DWORD *)uint64_t v34 = 136315138;
          swift_bridgeObjectRetain();
          uint64_t v58 = sub_1008FA0F0(v27, v29, &v59);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v32, v33, "Unable to convert %s to Destination!", v34, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v56, v55, v30);
      }
      else
      {
        swift_bridgeObjectRelease();
        return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v11 + 32))(v56, v10, v30);
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      if (qword_101637238 != -1) {
        swift_once();
      }
      uint64_t v45 = type metadata accessor for Logger();
      sub_100010324(v45, (uint64_t)qword_10170EF80);
      unint64_t v46 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
      uint64_t v47 = v57;
      v46(v14, a2, v57);
      uint64_t v48 = Logger.logObject.getter();
      os_log_type_t v49 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v48, v49))
      {
        uint64_t v50 = (uint8_t *)swift_slowAlloc();
        uint64_t v59 = swift_slowAlloc();
        *(_DWORD *)uint64_t v50 = 136315138;
        uint64_t v54 = v46;
        sub_100494544(&qword_101645D78, (void (*)(uint64_t))&type metadata accessor for Destination);
        uint64_t v51 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v58 = sub_1008FA0F0(v51, v52, &v59);
        unint64_t v46 = v54;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v57);
        _os_log_impl((void *)&_mh_execute_header, v48, v49, "Unable to convert %s to MessageDestination!", v50, 0xCu);
        swift_arrayDestroy();
        uint64_t v47 = v57;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v47);
      }

      return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v46)(v56, v55, v47);
    }
  }
  else
  {
    if (qword_101637238 != -1) {
      swift_once();
    }
    uint64_t v35 = type metadata accessor for Logger();
    sub_100010324(v35, (uint64_t)qword_10170EF80);
    uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
    uint64_t v37 = v55;
    uint64_t v38 = v57;
    v36(v16, v55, v57);
    char v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.fault.getter();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = swift_slowAlloc();
      uint64_t v54 = v36;
      uint64_t v42 = (uint8_t *)v41;
      uint64_t v59 = swift_slowAlloc();
      *(_DWORD *)uint64_t v42 = 136315138;
      sub_100494544(&qword_101645D78, (void (*)(uint64_t))&type metadata accessor for Destination);
      uint64_t v43 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v58 = sub_1008FA0F0(v43, v44, &v59);
      uint64_t v37 = v55;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v57);
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "Unable to convert %s to MessageDestination!", v42, 0xCu);
      swift_arrayDestroy();
      uint64_t v38 = v57;
      swift_slowDealloc();
      uint64_t v36 = v54;
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v38);
    }

    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v36)(v56, v37, v38);
  }
}

void *sub_100494258(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = sub_10000588C(&qword_101645D70);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Destination();
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRetain();
  Destination.init(stringRepresentation:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_100493A14((uint64_t)v8);
    uint64_t v13 = type metadata accessor for GenericError();
    sub_100494544((unint64_t *)&qword_10163A240, (void (*)(uint64_t))&type metadata accessor for GenericError);
    swift_allocError();
    uint64_t v15 = v14;
    unint64_t v21 = 0;
    unint64_t v22 = 0xE000000000000000;
    _StringGuts.grow(_:)(36);
    swift_bridgeObjectRelease();
    unint64_t v21 = 0xD000000000000012;
    unint64_t v22 = 0x80000001013FE230;
    swift_bridgeObjectRetain();
    v16._countAndFlagsBits = a2;
    v16._object = a3;
    String.append(_:)(v16);
    swift_bridgeObjectRelease();
    v17._object = (void *)0x80000001013FE250;
    v17._countAndFlagsBits = 0xD000000000000010;
    String.append(_:)(v17);
    unint64_t v18 = v22;
    *uint64_t v15 = v21;
    v15[1] = v18;
    (*(void (**)(unint64_t *, void, uint64_t))(*(void *)(v13 - 8) + 104))(v15, enum case for GenericError.error(_:), v13);
    swift_willThrow();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
    uint64_t v19 = CorrelationIdentifierMap.correlationIdentifier(for:)();
    if (!v3) {
      a3 = (void *)v19;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  return a3;
}

uint64_t sub_100494544(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10049458C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1004945A0);
}

uint64_t sub_1004945A0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = type metadata accessor for FMNAccountType();
    uint64_t v9 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_100494650(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100494664);
}

void *sub_100494664(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    uint64_t v7 = type metadata accessor for FMNAccountType();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for AirPodsUnpairEndPoint()
{
  uint64_t result = qword_101645DD8;
  if (!qword_101645DD8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t *sub_100494758(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v7 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v7 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(unsigned char *)a1 = *(unsigned char *)a2;
      uint64_t v6 = a2[2];
      a1[1] = a2[1];
      a1[2] = v6;
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v8 = type metadata accessor for UUID();
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_1004948B4(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result == 2)
  {
LABEL_4:
    uint64_t v3 = type metadata accessor for UUID();
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);
    return v4(a1, v3);
  }
  if (result != 1)
  {
    if (result) {
      return result;
    }
    goto LABEL_4;
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_10049495C(uint64_t a1, uint64_t a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v4 = *(void *)(a2 + 16);
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a1 + 16) = v4;
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v5 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t sub_100494A68(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    sub_100494B8C(a1);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      *(unsigned char *)a1 = *(unsigned char *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v4 = type metadata accessor for UUID();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t sub_100494B8C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for BeaconSharingSessionContext();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t type metadata accessor for BeaconSharingSessionContext()
{
  uint64_t result = qword_101645E80;
  if (!qword_101645E80) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void *sub_100494C34(void *a1, const void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload != 2 && EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *sub_100494D40(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100494B8C((uint64_t)a1);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload != 2 && EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v7 = type metadata accessor for UUID();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t sub_100494E5C()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

uint64_t sub_100494EF0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v24 = a2;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v23 = *(void *)(v3 - 8);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v19 - v7;
  uint64_t v9 = type metadata accessor for BeaconSharingSessionContext();
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  uint64_t v12 = v30;
  dispatch thunk of Decoder.unkeyedContainer()();
  if (!v12)
  {
    unint64_t v21 = v8;
    unint64_t v22 = v6;
    uint64_t v30 = v3;
    uint64_t v20 = v11;
    uint64_t v13 = v24;
    sub_1000BD078((uint64_t)v28, v29);
    uint64_t v14 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    switch(v14)
    {
      case 2:
        sub_1000BD078((uint64_t)v28, v29);
        sub_100495DDC((unint64_t *)&qword_10163B010, (void (*)(uint64_t))&type metadata accessor for UUID);
        dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
        uint64_t v16 = (uint64_t)v20;
        (*(void (**)(unsigned char *, char *, uint64_t))(v23 + 32))(v20, v22, v30);
        goto LABEL_14;
      case 1:
        sub_1000BD078((uint64_t)v28, v29);
        sub_1000C8098();
        dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
        uint64_t v17 = v26;
        uint64_t v18 = v27;
        uint64_t v16 = (uint64_t)v20;
        *uint64_t v20 = v25;
        *(void *)(v16 + 8) = v17;
        *(void *)(v16 + 16) = v18;
        goto LABEL_14;
      case 0:
        sub_1000BD078((uint64_t)v28, v29);
        sub_100495DDC((unint64_t *)&qword_10163B010, (void (*)(uint64_t))&type metadata accessor for UUID);
        dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
        uint64_t v16 = (uint64_t)v20;
        (*(void (**)(unsigned char *, char *, uint64_t))(v23 + 32))(v20, v21, v30);
LABEL_14:
        swift_storeEnumTagMultiPayload();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v28);
        sub_100495D78(v16, v13);
        return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
    }
    sub_100495D24();
    swift_allocError();
    swift_willThrow();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v28);
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
}

uint64_t sub_1004952AC(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v25 = type metadata accessor for UUID();
  uint64_t v4 = *(void *)(v25 - 8);
  uint64_t v5 = __chkstk_darwin(v25);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v24 - v8;
  uint64_t v10 = type metadata accessor for BeaconSharingSessionContext();
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  sub_100495CC0(v2, (uint64_t)v12);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    uint64_t v18 = v12;
    uint64_t v19 = v25;
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v9, v18, v25);
    sub_1000BD078((uint64_t)v29, v30);
    uint64_t v20 = v31;
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    if (v20)
    {
      (*(void (**)(char *, uint64_t))(v4 + 8))(v9, v19);
      return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v29);
    }
    sub_1000BD078((uint64_t)v29, v30);
    sub_100495DDC(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    uint64_t v7 = v9;
LABEL_12:
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v19);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v29);
  }
  if (EnumCaseMultiPayload != 1)
  {
    unint64_t v21 = v12;
    uint64_t v19 = v25;
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v7, v21, v25);
    sub_1000BD078((uint64_t)v29, v30);
    uint64_t v22 = v31;
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    if (!v22)
    {
      sub_1000BD078((uint64_t)v29, v30);
      sub_100495DDC(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
      dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
    }
    goto LABEL_12;
  }
  char v14 = *v12;
  uint64_t v16 = *((void *)v12 + 1);
  uint64_t v15 = *((void *)v12 + 2);
  sub_1000BD078((uint64_t)v29, v30);
  uint64_t v17 = v31;
  dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
  if (!v17)
  {
    char v26 = v14;
    uint64_t v27 = v16;
    uint64_t v28 = v15;
    sub_1000BD078((uint64_t)v29, v30);
    sub_1000C7FF0();
    dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
  }
  swift_bridgeObjectRelease();
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v29);
}

uint64_t sub_100495664()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for BeaconSharingSessionContext();
  __chkstk_darwin(v5);
  uint64_t v7 = (unsigned __int8 *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100495CC0(v0, (uint64_t)v7);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      Swift::UInt v9 = *v7;
      Hasher._combine(_:)(1uLL);
      Hasher._combine(_:)(v9);
      swift_bridgeObjectRetain();
      String.hash(into:)();
      return swift_bridgeObjectRelease_n();
    }
    (*(void (**)(char *, unsigned __int8 *, uint64_t))(v2 + 32))(v4, v7, v1);
    Swift::UInt v11 = 2;
  }
  else
  {
    (*(void (**)(char *, unsigned __int8 *, uint64_t))(v2 + 32))(v4, v7, v1);
    Swift::UInt v11 = 0;
  }
  Hasher._combine(_:)(v11);
  sub_100495DDC(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

uint64_t sub_10049587C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100494EF0(a1, a2);
}

uint64_t sub_100495894(void *a1)
{
  return sub_1004952AC(a1);
}

Swift::Int sub_1004958AC()
{
  return Hasher._finalize()();
}

Swift::Int sub_1004958F0()
{
  return Hasher._finalize()();
}

uint64_t sub_100495930()
{
  return sub_100495DDC(&qword_101645EB8, (void (*)(uint64_t))type metadata accessor for BeaconSharingSessionContext);
}

uint64_t sub_100495978(void *a1)
{
  a1[1] = sub_100495DDC(&qword_101645EC0, (void (*)(uint64_t))type metadata accessor for BeaconSharingSessionContext);
  a1[2] = sub_100495DDC(&qword_101645EC8, (void (*)(uint64_t))type metadata accessor for BeaconSharingSessionContext);
  uint64_t result = sub_100495DDC(&qword_101645ED0, (void (*)(uint64_t))type metadata accessor for BeaconSharingSessionContext);
  a1[3] = result;
  return result;
}

uint64_t sub_100495A24()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for BeaconSharingSessionContext();
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100495CC0(v1, (uint64_t)v8);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
    unint64_t v15 = 0x6E696D6F636E692ELL;
    unint64_t v16 = 0xEA00000000002867;
LABEL_6:
    uint64_t v20 = v15;
    unint64_t v21 = v16;
    sub_100495DDC((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v17);
    swift_bridgeObjectRelease();
    v18._countAndFlagsBits = 41;
    v18._object = (void *)0xE100000000000000;
    String.append(_:)(v18);
    uint64_t v14 = v20;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    return v14;
  }
  if (EnumCaseMultiPayload != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
    uint64_t v20 = 0;
    unint64_t v21 = 0xE000000000000000;
    _StringGuts.grow(_:)(24);
    swift_bridgeObjectRelease();
    unint64_t v15 = 0xD000000000000015;
    unint64_t v16 = 0x80000001013FE270;
    goto LABEL_6;
  }
  uint64_t v10 = *((void *)v8 + 1);
  Swift::UInt v11 = (void *)*((void *)v8 + 2);
  uint64_t v20 = 0x6369766544656D2ELL;
  unint64_t v21 = 0xEA00000000002865;
  swift_bridgeObjectRetain();
  v12._countAndFlagsBits = v10;
  v12._object = v11;
  String.append(_:)(v12);
  swift_bridgeObjectRelease_n();
  v13._countAndFlagsBits = 41;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  return v20;
}

uint64_t sub_100495CC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BeaconSharingSessionContext();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_100495D24()
{
  unint64_t result = qword_101645ED8;
  if (!qword_101645ED8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645ED8);
  }
  return result;
}

uint64_t sub_100495D78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BeaconSharingSessionContext();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_100495DDC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100495E24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v37 = *(void *)(v4 - 8);
  uint64_t v38 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  Swift::UInt v9 = (char *)&v37 - v8;
  uint64_t v10 = type metadata accessor for BeaconSharingSessionContext();
  uint64_t v11 = __chkstk_darwin(v10);
  Swift::String v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11);
  unint64_t v16 = (unsigned __int8 *)&v37 - v15;
  __chkstk_darwin(v14);
  Swift::String v18 = (char *)&v37 - v17;
  uint64_t v19 = sub_10000588C(&qword_101645EE0);
  uint64_t v20 = __chkstk_darwin(v19 - 8);
  uint64_t v22 = (char *)&v37 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = (unsigned __int8 *)&v22[*(int *)(v20 + 56)];
  sub_100495CC0(a1, (uint64_t)v22);
  sub_100495CC0(a2, (uint64_t)v23);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    sub_100495CC0((uint64_t)v22, (uint64_t)v18);
    if (swift_getEnumCaseMultiPayload())
    {
      (*(void (**)(char *, uint64_t))(v37 + 8))(v18, v38);
      goto LABEL_17;
    }
    uint64_t v34 = v37;
    uint64_t v33 = v38;
    (*(void (**)(char *, unsigned __int8 *, uint64_t))(v37 + 32))(v9, v23, v38);
    char v31 = static UUID.== infix(_:_:)();
    uint64_t v35 = *(void (**)(char *, uint64_t))(v34 + 8);
    v35(v9, v33);
    v35(v18, v33);
LABEL_20:
    sub_100494B8C((uint64_t)v22);
    return v31 & 1;
  }
  if (EnumCaseMultiPayload != 1)
  {
    sub_100495CC0((uint64_t)v22, (uint64_t)v13);
    if (swift_getEnumCaseMultiPayload() != 2)
    {
      (*(void (**)(char *, uint64_t))(v37 + 8))(v13, v38);
      goto LABEL_17;
    }
    uint64_t v30 = v37;
    uint64_t v29 = v38;
    (*(void (**)(char *, unsigned __int8 *, uint64_t))(v37 + 32))(v7, v23, v38);
    char v31 = static UUID.== infix(_:_:)();
    uint64_t v32 = *(void (**)(char *, uint64_t))(v30 + 8);
    v32(v7, v29);
    v32(v13, v29);
    goto LABEL_20;
  }
  sub_100495CC0((uint64_t)v22, (uint64_t)v16);
  uint64_t v26 = *((void *)v16 + 1);
  uint64_t v25 = *((void *)v16 + 2);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    if (*v16 == *v23)
    {
      if (v26 == *((void *)v23 + 1) && v25 == *((void *)v23 + 2))
      {
        swift_bridgeObjectRelease_n();
LABEL_25:
        sub_100494B8C((uint64_t)v22);
        char v31 = 1;
        return v31 & 1;
      }
      char v28 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v28) {
        goto LABEL_25;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    sub_100494B8C((uint64_t)v22);
    goto LABEL_18;
  }
  swift_bridgeObjectRelease();
LABEL_17:
  sub_100496214((uint64_t)v22);
LABEL_18:
  char v31 = 0;
  return v31 & 1;
}

uint64_t sub_100496214(uint64_t a1)
{
  uint64_t v2 = sub_10000588C(&qword_101645EE0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for BeaconSharingSessionContext.Error(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100496310);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for BeaconSharingSessionContext.Error()
{
  return &type metadata for BeaconSharingSessionContext.Error;
}

unint64_t sub_10049634C()
{
  unint64_t result = qword_101645EE8;
  if (!qword_101645EE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101645EE8);
  }
  return result;
}

char *sub_1004963A0()
{
  uint64_t v1 = *(void **)(v0 + 32);
  if (v1)
  {
    uint64_t v2 = *(char **)(v0 + 32);
  }
  else
  {
    uint64_t v3 = v0;
    id v4 = objc_allocWithZone((Class)type metadata accessor for CurrentLocationMonitor());
    uint64_t v5 = (char *)CurrentLocationMonitor.init(mode:desiredAccuracy:)(0, 0, 1);
    uint64_t v6 = &v5[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_delegate];
    swift_beginAccess();
    *((void *)v6 + 1) = &off_1015C5048;
    swift_unknownObjectWeakAssign();
    uint64_t v7 = *(void **)(v3 + 32);
    *(void *)(v3 + 32) = v5;
    uint64_t v2 = v5;

    uint64_t v1 = 0;
  }
  id v8 = v1;
  return v2;
}

unint64_t sub_100496460()
{
  if (*(void *)(v0 + 48))
  {
    unint64_t v1 = *(void *)(v0 + 48);
  }
  else
  {
    sub_10000588C((uint64_t *)&unk_10163EAB8);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_101342130;
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v5 = v4;
    uint64_t v6 = swift_allocObject();
    swift_weakInit();
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = sub_100498AF0;
    *(void *)(v7 + 24) = v6;
    *(void *)(inited + 32) = v3;
    *(void *)(inited + 40) = v5;
    *(void *)(inited + 48) = sub_1001DF664;
    *(void *)(inited + 56) = v7;
    unint64_t v1 = sub_10092E16C(inited);
    *(void *)(v0 + 48) = v1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_100496570()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    type metadata accessor for Transaction();
    static Transaction.named<A>(_:with:)();
    return swift_release();
  }
  return result;
}

id sub_100496614()
{
  uint64_t v0 = self;
  id v1 = [v0 standardUserDefaults];
  NSString v2 = String._bridgeToObjectiveC()();
  [v1 BOOLForKey:v2];

  id v3 = [v0 standardUserDefaults];
  NSString v4 = String._bridgeToObjectiveC()();
  id v5 = [v3 objectForKey:v4];

  if (v5)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v9, 0, sizeof(v9));
  }
  sub_10028DF08((uint64_t)v9, (uint64_t)v10);
  if (v11)
  {
    sub_10001D4B0(0, (unint64_t *)&qword_10164DC40);
    if (swift_dynamicCast())
    {
      id v6 = [v8 BOOLValue];

      return v6;
    }
  }
  else
  {
    sub_100498978((uint64_t)v10);
  }
  OS_dispatch_queue.sync<A>(execute:)();
  if (v10[0] == 1)
  {
    type metadata accessor for Transaction();
    static Transaction.named<A>(_:with:)();
  }
  return 0;
}

void *sub_10049682C()
{
  id v1 = v0;
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v2);
  uint64_t v3 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v3 - 8);
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v0[2] = _swiftEmptyArrayStorage;
  sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  (*(void (**)(char *, void, uint64_t))(v5 + 104))(v7, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v4);
  static DispatchQoS.unspecified.getter();
  uint64_t v11 = (uint64_t)_swiftEmptyArrayStorage;
  sub_1001BF0B8((unint64_t *)&qword_101638CC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000588C((uint64_t *)&unk_1016376F0);
  sub_100062734((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  v0[3] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v0[4] = 0;
  v0[5] = 0;
  v0[6] = 0;
  if (qword_1016371D8 != -1) {
    swift_once();
  }
  uint64_t v11 = 0x7365547265646E75;
  unint64_t v12 = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)();
  swift_bridgeObjectRelease();
  if ((v13 & 1) == 0)
  {
    sub_100496460();
    type metadata accessor for DarwinNotificationHelper();
    swift_allocObject();
    v0[5] = DarwinNotificationHelper.init(notificationHandlers:)();
    swift_release();
  }
  sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
  id v8 = (void *)static OS_os_log.default.getter();
  static os_log_type_t.default.getter();
  os_log(_:dso:log:type:_:)();

  return v1;
}

void sub_100496BC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  uint64_t v5 = self;
  swift_retain();
  swift_retain();
  id v6 = [v5 sharedInstance];
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = sub_100498A8C;
  *(void *)(v7 + 24) = v4;
  v9[4] = sub_100498AD0;
  v9[5] = v7;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1107296256;
  _OWORD v9[2] = sub_100498360;
  v9[3] = &unk_1015C5290;
  id v8 = _Block_copy(v9);
  swift_retain();
  swift_release();
  [v6 fmipStateWithCompletion:v8];
  _Block_release(v8);
  swift_release();
}

void sub_100496D20(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0)
  {
    uint64_t v3 = self;
    id v4 = [v3 standardUserDefaults];
    NSString v5 = String._bridgeToObjectiveC()();
    id v6 = [v4 objectForKey:v5];

    if (v6)
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      memset(v18, 0, sizeof(v18));
    }
    sub_10028DF08((uint64_t)v18, (uint64_t)v19);
    if (v19[3])
    {
      sub_10001D4B0(0, (unint64_t *)&qword_10164DC40);
      if (swift_dynamicCast())
      {
        unint64_t v12 = v17;
        if ([v17 BOOLValue] == (a1 & 1))
        {

          goto LABEL_13;
        }
LABEL_12:
        sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
        char v13 = (void *)static OS_os_log.default.getter();
        static os_log_type_t.default.getter();
        os_log(_:dso:log:type:_:)();

        id v14 = [v3 standardUserDefaults];
        NSString v15 = String._bridgeToObjectiveC()();
        [v14 setBool:a1 & 1 forKey:v15];

        LOBYTE(v14) = sub_100496614();
        uint64_t v16 = swift_allocObject();
        *(unsigned char *)(v16 + 16) = v14 & 1;
        sub_100497900((uint64_t)sub_100498AE8, v16);

        swift_release();
        goto LABEL_13;
      }
    }
    else
    {
      sub_100498978((uint64_t)v19);
    }
    unint64_t v12 = 0;
    goto LABEL_12;
  }
  swift_errorRetain();
  static os_log_type_t.error.getter();
  sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
  uint64_t v7 = (void *)static OS_os_log.default.getter();
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_101342130;
  v19[0] = a1;
  swift_errorRetain();
  sub_10000588C(&qword_101638D40);
  uint64_t v9 = String.init<A>(describing:)();
  uint64_t v11 = v10;
  *(void *)(v8 + 56) = &type metadata for String;
  *(void *)(v8 + 64) = sub_10000B4CC();
  *(void *)(v8 + 32) = v9;
  *(void *)(v8 + 40) = v11;
  os_log(_:dso:log:_:_:)();

  swift_bridgeObjectRelease();
  sub_100173E88(a1, 1);
LABEL_13:
  Transaction.capture()();
}

uint64_t sub_100497078@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10000588C(&qword_101657CA0);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5);
  sub_10001D010(a1, (uint64_t)aBlock);
  swift_allocObject();
  swift_weakInit();
  sub_10000588C(&qword_101646058);
  Subscription.init(subscriber:unsubscribeBlock:)();
  uint64_t v8 = *(NSObject **)(v2 + 24);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v5);
  unint64_t v9 = (*(unsigned __int8 *)(v6 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v2;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v10 + v9, (char *)aBlock - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = sub_1004988D4;
  *(void *)(v11 + 24) = v10;
  aBlock[4] = sub_1003B7AE0;
  aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000A70B0;
  aBlock[3] = &unk_1015C5218;
  unint64_t v12 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v8, v12);
  _Block_release(v12);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

uint64_t sub_100497308(uint64_t a1)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_10049752C(a1);
    return swift_release();
  }
  return result;
}

uint64_t sub_10049738C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_101657CA0);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a2, v4);
  uint64_t v8 = (unint64_t *)(a1 + 16);
  swift_beginAccess();
  unint64_t v9 = *(void *)(a1 + 16);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(a1 + 16) = v9;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v9 = sub_100A70BB4(0, *(void *)(v9 + 16) + 1, 1, v9);
    *uint64_t v8 = v9;
  }
  unint64_t v12 = *(void *)(v9 + 16);
  unint64_t v11 = *(void *)(v9 + 24);
  if (v12 >= v11 >> 1)
  {
    unint64_t v9 = sub_100A70BB4(v11 > 1, v12 + 1, 1, v9);
    *uint64_t v8 = v9;
  }
  *(void *)(v9 + 16) = v12 + 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9+ ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))+ *(void *)(v5 + 72) * v12, v7, v4);
  return swift_endAccess();
}

uint64_t sub_10049752C(uint64_t a1)
{
  uint64_t v3 = sub_10000588C(&qword_101657CA0);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  __chkstk_darwin(v3);
  uint64_t v6 = *(NSObject **)(v1 + 24);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))((char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v3);
  unint64_t v7 = (*(unsigned __int8 *)(v4 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v1;
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v8 + v7, (char *)aBlock - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = sub_10049879C;
  *(void *)(v9 + 24) = v8;
  aBlock[4] = sub_100132424;
  aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000A70B0;
  aBlock[3] = &unk_1015C51A0;
  uint64_t v10 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v6, v10);
  _Block_release(v10);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
  return result;
}

uint64_t sub_10049775C(uint64_t a1, uint64_t a2)
{
  swift_beginAccess();
  uint64_t v4 = *(void *)(a1 + 16);
  void v6[2] = a2;
  swift_bridgeObjectRetain();
  *(void *)(a1 + 16) = sub_1000A49A4((uint64_t (*)(char *))sub_1004987C4, (uint64_t)v6, v4);
  return swift_bridgeObjectRelease();
}

BOOL sub_1004977E8()
{
  return (dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0;
}

uint64_t sub_10049787C(uint64_t a1, uint64_t a2)
{
  sub_10000588C(&qword_101657CA0);
  Subscription.subscriber.getter();
  uint64_t v3 = v7;
  uint64_t v4 = v8;
  sub_10001CD44(v6, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 8))(a2, v3, v4);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v6);
}

uint64_t sub_100497900(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  unint64_t v12 = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[1] = *(void *)(v3 + 24);
  uint64_t v13 = swift_allocObject();
  swift_weakInit();
  uint64_t v14 = (void *)swift_allocObject();
  v14[2] = v13;
  void v14[3] = a1;
  void v14[4] = a2;
  aBlock[4] = sub_100498638;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015C50D8;
  NSString v15 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v19 = _swiftEmptyArrayStorage;
  sub_1001BF0B8((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v18);
  swift_release();
  return swift_release();
}

uint64_t sub_100497C04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v60 = a2;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v64 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  unint64_t v46 = *(void (***)(char *, uint64_t))(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v42 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v62 = (char *)v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v66 = sub_10000588C(&qword_101657CA0);
  uint64_t v13 = *(void *)(v66 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  uint64_t v15 = __chkstk_darwin(v66);
  unint64_t v61 = (char *)v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v63 = (char *)v42 - v16;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v18 = result;
    uint64_t v59 = v10;
    uint64_t v19 = v4;
    swift_beginAccess();
    uint64_t v20 = *(void *)(v18 + 16);
    swift_bridgeObjectRetain();
    uint64_t v21 = v20;
    swift_release();
    uint64_t v22 = *(void *)(v20 + 16);
    if (v22)
    {
      uint64_t v58 = sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
      uint64_t v24 = *(void (**)(char *, char *, uint64_t))(v13 + 16);
      uint64_t v23 = v13 + 16;
      uint64_t v57 = v24;
      uint64_t v25 = *(unsigned __int8 *)(v23 + 64);
      uint64_t v26 = (v25 + 32) & ~v25;
      v42[1] = v21;
      uint64_t v27 = (char *)(v21 + v26);
      uint64_t v55 = (void (**)(char *, void, uint64_t))(v11 + 104);
      uint64_t v54 = (void (**)(char *, uint64_t))(v11 + 8);
      uint64_t v53 = *(void *)(v23 + 56);
      unsigned int v52 = enum case for DispatchQoS.QoSClass.default(_:);
      uint64_t v56 = v26;
      uint64_t v51 = v26 + v14;
      uint64_t v50 = v25 | 7;
      os_log_type_t v49 = (void (**)(uint64_t, char *, uint64_t))(v23 + 16);
      uint64_t v48 = v69;
      uint64_t v47 = (void (**)(char *, uint64_t))(v64 + 8);
      ++v46;
      uint64_t v45 = (void (**)(char *, uint64_t))(v23 - 8);
      uint64_t v44 = v19;
      uint64_t v43 = v6;
      uint64_t v28 = v66;
      uint64_t v29 = v63;
      uint64_t v65 = v23;
      do
      {
        uint64_t v30 = v28;
        char v31 = v57;
        v57(v29, v27, v30);
        uint64_t v32 = v62;
        uint64_t v33 = v59;
        (*v55)(v62, v52, v59);
        uint64_t v64 = static OS_dispatch_queue.global(qos:)();
        (*v54)(v32, v33);
        uint64_t v34 = v61;
        v31(v61, v29, v66);
        uint64_t v35 = swift_allocObject();
        *(void *)(v35 + 16) = v60;
        *(void *)(v35 + 24) = a3;
        (*v49)(v35 + v56, v34, v66);
        v69[2] = sub_10049872C;
        v69[3] = v35;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        v69[0] = sub_1004B5480;
        v69[1] = &unk_1015C5128;
        uint64_t v36 = v7;
        uint64_t v37 = _Block_copy(aBlock);
        swift_retain();
        static DispatchQoS.unspecified.getter();
        os_log_type_t v67 = _swiftEmptyArrayStorage;
        sub_1001BF0B8((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_10000588C((uint64_t *)&unk_10163F350);
        sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
        uint64_t v38 = v43;
        uint64_t v39 = v44;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        os_log_type_t v40 = (void *)v64;
        OS_dispatch_queue.async(group:qos:flags:execute:)();
        uint64_t v28 = v66;
        uint64_t v41 = v37;
        uint64_t v7 = v36;
        uint64_t v29 = v63;
        _Block_release(v41);

        (*v47)(v38, v39);
        (*v46)(v9, v7);
        (*v45)(v29, v28);
        swift_release();
        v27 += v53;
        --v22;
      }
      while (v22);
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1004982E0(uint64_t a1, uint64_t a2, uint64_t (*a3)(BOOL))
{
  if (!a2) {
    return a3(a1 == 1);
  }
  swift_errorRetain();
  ((void (*)(uint64_t, uint64_t))a3)(a2, 1);

  return swift_errorRelease();
}

void sub_100498360(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

uint64_t sub_1004983D8()
{
  swift_bridgeObjectRelease();

  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for FMIPStateManager()
{
  return self;
}

uint64_t sub_100498454(uint64_t a1, uint64_t a2)
{
  sub_10000588C(&qword_101657CA0);
  Subscription.subscriber.getter();
  uint64_t v3 = v7;
  uint64_t v4 = v8;
  sub_10001CD44(v6, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(a2, v3, v4);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v6);
}

uint64_t sub_1004984D8()
{
  uint64_t v2 = sub_1004963A0();
  type metadata accessor for CLAuthorizationStatus(0);
  OS_dispatch_queue.sync<A>(execute:)();

  uint64_t v0 = swift_allocObject();
  *(unsigned char *)(v0 + 16) = (v3 - 3) < 2;
  sub_100497900((uint64_t)sub_1004985B8, v0);
  return swift_release();
}

uint64_t sub_1004985A8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_1004985B8(uint64_t a1)
{
  return sub_100498454(a1, *(unsigned __int8 *)(v1 + 16));
}

uint64_t sub_1004985C0()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1004985F8()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_100498638()
{
  return sub_100497C04(v0[2], v0[3], v0[4]);
}

uint64_t sub_100498644(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100498654()
{
  return swift_release();
}

uint64_t sub_10049865C()
{
  uint64_t v1 = sub_10000588C(&qword_101657CA0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10049872C()
{
  uint64_t v1 = *(void *)(sub_10000588C(&qword_101657CA0) - 8);
  return (*(uint64_t (**)(unint64_t))(v0 + 16))(v0 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80)));
}

uint64_t sub_10049879C()
{
  return sub_1004988EC(sub_10049775C);
}

uint64_t sub_1004987B4()
{
  return _swift_deallocObject(v0, 32, 7);
}

BOOL sub_1004987C4()
{
  return sub_1004977E8();
}

uint64_t sub_1004987E4(uint64_t a1)
{
  return sub_100497308(a1);
}

uint64_t sub_100498804()
{
  uint64_t v1 = sub_10000588C(&qword_101657CA0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1004988D4()
{
  return sub_1004988EC(sub_10049738C);
}

uint64_t sub_1004988EC(uint64_t (*a1)(uint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(sub_10000588C(&qword_101657CA0) - 8);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return a1(v3, v4);
}

uint64_t sub_100498968()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100498978(uint64_t a1)
{
  uint64_t v2 = sub_10000588C((uint64_t *)&unk_101644360);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1004989D8@<X0>(BOOL *a1@<X8>)
{
  uint64_t result = swift_beginAccess();
  *a1 = *(void *)(*(void *)(v1 + 16) + 16) != 0;
  return result;
}

void sub_100498A30(uint64_t a1)
{
  sub_100496BC4(a1, v1);
}

uint64_t sub_100498A4C()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_100498A8C(uint64_t a1, char a2)
{
}

uint64_t sub_100498A98()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100498AD0(uint64_t a1, uint64_t a2)
{
  return sub_1004982E0(a1, a2, *(uint64_t (**)(BOOL))(v2 + 16));
}

uint64_t sub_100498AD8()
{
  return _swift_deallocObject(v0, 17, 7);
}

uint64_t sub_100498AE8(uint64_t a1)
{
  return sub_10049787C(a1, *(unsigned __int8 *)(v1 + 16));
}

uint64_t sub_100498AF0()
{
  return sub_100496570();
}

uint64_t sub_100498B1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return _swift_task_switch(sub_100498B3C, 0, 0);
}

uint64_t sub_100498B3C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 32) = v2;
  if (v2)
  {
    *(void *)(v0 + 40) = 0;
    uint64_t v3 = *(void *)(v1 + 40);
    swift_bridgeObjectRetain();
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v3 + 32) + **(int **)(v3 + 32));
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v0 + 48) = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_100498C8C;
    return v8(ObjectType, v3);
  }
  else
  {
    dispatch_group_leave(*(dispatch_group_t *)(v0 + 24));
    uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
    return v7();
  }
}

uint64_t sub_100498C8C()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_100498D88, 0, 0);
}

uint64_t sub_100498D88()
{
  uint64_t v1 = *(void *)(v0 + 40) + 1;
  if (v1 == *(void *)(v0 + 32))
  {
    swift_bridgeObjectRelease();
    dispatch_group_leave(*(dispatch_group_t *)(v0 + 24));
    uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
    return v2();
  }
  else
  {
    *(void *)(v0 + 40) = v1;
    uint64_t v4 = *(void *)(*(void *)(v0 + 16) + 16 * v1 + 40);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v4 + 32) + **(int **)(v4 + 32));
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v0 + 48) = v6;
    *uint64_t v6 = v0;
    v6[1] = sub_100498C8C;
    return v7(ObjectType, v4);
  }
}

uint64_t sub_100498EE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  uint64_t v7[3] = a5;
  return _swift_task_switch(sub_100498F08, 0, 0);
}

uint64_t sub_100498F08()
{
  uint64_t v1 = *(void **)(v0 + 16);
  uint64_t v2 = v1[2];
  *(void *)(v0 + 48) = v2;
  if (v2)
  {
    *(void *)(v0 + 56) = 0;
    *(void *)(v0 + 64) = v1[4];
    uint64_t v3 = v1[5];
    swift_bridgeObjectRetain();
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 + 40) + **(int **)(v3 + 40));
    swift_unknownObjectRetain();
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v0 + 72) = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_100499080;
    uint64_t v7 = *(void *)(v0 + 24);
    uint64_t v6 = *(void *)(v0 + 32);
    return v10(v7, v6, ObjectType, v3);
  }
  else
  {
    dispatch_group_leave(*(dispatch_group_t *)(v0 + 40));
    uint64_t v9 = *(uint64_t (**)(void))(v0 + 8);
    return v9();
  }
}

uint64_t sub_100499080()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10049917C, 0, 0);
}

uint64_t sub_10049917C()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 48);
  swift_unknownObjectRelease();
  if (v1 + 1 == v2)
  {
    swift_bridgeObjectRelease();
    dispatch_group_leave(*(dispatch_group_t *)(v0 + 40));
    uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
    return v3();
  }
  else
  {
    uint64_t v5 = *(void *)(v0 + 56) + 1;
    *(void *)(v0 + 56) = v5;
    uint64_t v6 = *(void *)(v0 + 16) + 16 * v5;
    *(void *)(v0 + 64) = *(void *)(v6 + 32);
    uint64_t v7 = *(void *)(v6 + 40);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 + 40) + **(int **)(v7 + 40));
    swift_unknownObjectRetain();
    uint64_t v9 = (void *)swift_task_alloc();
    *(void *)(v0 + 72) = v9;
    void *v9 = v0;
    v9[1] = sub_100499080;
    uint64_t v11 = *(void *)(v0 + 24);
    uint64_t v10 = *(void *)(v0 + 32);
    return v12(v11, v10, ObjectType, v7);
  }
}

uint64_t sub_100499310(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 16) = a4;
  *(void *)(v5 + 24) = a5;
  return _swift_task_switch(sub_100499330, 0, 0);
}

uint64_t sub_100499330()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 32) = v2;
  if (v2)
  {
    *(void *)(v0 + 40) = 0;
    uint64_t v3 = *(void *)(v1 + 40);
    swift_bridgeObjectRetain();
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v3 + 48) + **(int **)(v3 + 48));
    uint64_t v5 = (void *)swift_task_alloc();
    *(void *)(v0 + 48) = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_100499480;
    return v8(ObjectType, v3);
  }
  else
  {
    dispatch_group_leave(*(dispatch_group_t *)(v0 + 24));
    uint64_t v7 = *(uint64_t (**)(void))(v0 + 8);
    return v7();
  }
}

uint64_t sub_100499480()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10049957C, 0, 0);
}

uint64_t sub_10049957C()
{
  uint64_t v1 = *(void *)(v0 + 40) + 1;
  if (v1 == *(void *)(v0 + 32))
  {
    swift_bridgeObjectRelease();
    dispatch_group_leave(*(dispatch_group_t *)(v0 + 24));
    uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
    return v2();
  }
  else
  {
    *(void *)(v0 + 40) = v1;
    uint64_t v4 = *(void *)(*(void *)(v0 + 16) + 16 * v1 + 40);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))(*(void *)(v4 + 48) + **(int **)(v4 + 48));
    uint64_t v6 = (void *)swift_task_alloc();
    *(void *)(v0 + 48) = v6;
    *uint64_t v6 = v0;
    v6[1] = sub_100499480;
    return v7(ObjectType, v4);
  }
}

ValueMetadata *type metadata accessor for AirPodsSendBeaconGroupDataCommandPayload()
{
  return &type metadata for AirPodsSendBeaconGroupDataCommandPayload;
}

uint64_t sub_1004996E8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10049979C(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

unint64_t sub_100499718(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100499748();
  unint64_t result = sub_10033C228();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_100499748()
{
  unint64_t result = qword_101646078;
  if (!qword_101646078)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_101646078);
  }
  return result;
}

uint64_t sub_10049979C(void *a1)
{
  uint64_t v2 = v1;
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryDecoding.container()();
  sub_1000BD078((uint64_t)v22, v23);
  uint64_t v4 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  if (v1) {
    goto LABEL_22;
  }
  uint64_t v2 = v4;
  unint64_t v6 = v5;
  uint64_t v7 = static MACAddress.length.getter();
  if ((unint64_t)(v7 - 0x2000000000000000) >> 62 != 3)
  {
    __break(1u);
    goto LABEL_25;
  }
  if (__OFADD__(4 * v7, 80))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (__OFADD__(4 * v7 + 80, 4))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (__OFADD__(4 * v7 + 84, 4))
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  sub_1000BD078((uint64_t)v22, v23);
  uint64_t v8 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  unint64_t v10 = v9;
  sub_1000362FC();
  uint64_t v11 = DataProtocol.intValue.getter();
  uint64_t v12 = static MACAddress.length.getter();
  if (__OFADD__(v12, 20)) {
    goto LABEL_28;
  }
  if (__OFADD__(v12 + 20, 1))
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v13 = v12 + 22;
  if (__OFADD__(v12 + 21, 1))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v14 = v11 * v13;
  if ((unsigned __int128)(v11 * (__int128)v13) >> 64 != (v11 * v13) >> 63)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  switch(v10 >> 62)
  {
    case 1uLL:
      LODWORD(v15) = HIDWORD(v8) - v8;
      if (__OFSUB__(HIDWORD(v8), v8)) {
        goto LABEL_33;
      }
      uint64_t v15 = (int)v15;
LABEL_16:
      if (v15 < v14)
      {
LABEL_20:
        uint64_t v19 = type metadata accessor for BinaryDecodingError();
        sub_100499A70();
        swift_allocError();
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v19 - 8) + 104))(v20, enum case for BinaryDecodingError.decodingError(_:), v19);
        swift_willThrow();
        sub_10001CFB8(v8, v10);
        sub_10001CFB8(v2, v6);
LABEL_22:
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v22);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
        return v2;
      }
LABEL_17:
      if (v14 < 0)
      {
LABEL_32:
        __break(1u);
LABEL_33:
        __break(1u);
LABEL_34:
        __break(1u);
        JUMPOUT(0x100499A60);
      }
      Data.subdata(in:)();
      sub_10001CFB8(v8, v10);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v22);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
      return v2;
    case 2uLL:
      uint64_t v17 = *(void *)(v8 + 16);
      uint64_t v16 = *(void *)(v8 + 24);
      BOOL v18 = __OFSUB__(v16, v17);
      uint64_t v15 = v16 - v17;
      if (!v18) {
        goto LABEL_16;
      }
      goto LABEL_34;
    case 3uLL:
      if (v14 > 0) {
        goto LABEL_20;
      }
      goto LABEL_17;
    default:
      uint64_t v15 = BYTE6(v10);
      goto LABEL_16;
  }
}

unint64_t sub_100499A70()
{
  unint64_t result = qword_101639630;
  if (!qword_101639630)
  {
    type metadata accessor for BinaryDecodingError();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101639630);
  }
  return result;
}

uint64_t sub_100499AC8(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_101646450);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_1004B2750();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v11 = *v3;
  v10[15] = 0;
  sub_100037BB4();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    type metadata accessor for PencilUnpairData.DeviceUnpairData();
    LOBYTE(v11) = 1;
    type metadata accessor for UUID();
    sub_1004B27A4(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v11) = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100499CFC()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_100499D4C()
{
  uint64_t result = 0x754E6C6169726573;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6449616E6D66;
      break;
    case 2:
      uint64_t result = 0x49746375646F7270;
      break;
    case 3:
      uint64_t result = 0x6449726F646E6576;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100499DE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1004ADF58(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100499E0C(uint64_t a1)
{
  unint64_t v2 = sub_1004B2750();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100499E48(uint64_t a1)
{
  unint64_t v2 = sub_1004B2750();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100499E84(void *a1)
{
  return sub_100499AC8(a1);
}

uint64_t sub_100499E9C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_101646420);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_1004B2604();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v17 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v2)
  {
    char v16 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v15 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    char v14 = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    char v13 = *(unsigned char *)(v3 + 64);
    char v12 = 4;
    sub_1004B2658();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v11 = *(void *)(v3 + 72);
    v10[15] = 5;
    sub_10000588C(&qword_101646438);
    sub_1004B26AC();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t sub_10049A0D8()
{
  unint64_t result = 0x69634572656E776FLL;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x69684372656E776FLL;
      break;
    case 2:
      unint64_t result = 0xD000000000000011;
      break;
    case 3:
      unint64_t result = 1684628597;
      break;
    case 4:
      unint64_t result = 0x6F4365766F6D6572;
      break;
    case 5:
      unint64_t result = 0x73656369766564;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10049A1B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1004AE608(a1, a2);
  *a3 = result;
  return result;
}

void sub_10049A1DC(unsigned char *a1@<X8>)
{
  *a1 = 6;
}

uint64_t sub_10049A1E8(uint64_t a1)
{
  unint64_t v2 = sub_1004B2604();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10049A224(uint64_t a1)
{
  unint64_t v2 = sub_1004B2604();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10049A260(void *a1)
{
  return sub_100499E9C(a1);
}

uint64_t sub_10049A278()
{
  uint64_t result = Data.init(base64Encoded:options:)();
  qword_10170DF70 = result;
  qword_10170DF78 = v1;
  return result;
}

uint64_t sub_10049A2B8(uint64_t a1, uint64_t a2)
{
  v3[12] = a2;
  v3[13] = v2;
  v3[11] = a1;
  v3[14] = *v2;
  sub_10000588C((uint64_t *)&unk_101649E20);
  v3[15] = swift_task_alloc();
  v3[16] = type metadata accessor for AccessoryIdentityPairingLockCheckEndPoint();
  v3[17] = swift_task_alloc();
  v3[18] = swift_task_alloc();
  return _swift_task_switch(sub_10049A3B8, 0, 0);
}

uint64_t sub_10049A3B8()
{
  static os_log_type_t.default.getter();
  if (qword_101637308 != -1) {
    swift_once();
  }
  uint64_t v1 = v0[17];
  uint64_t v2 = v0[18];
  uint64_t v3 = v0[15];
  uint64_t v4 = v0[16];
  uint64_t v5 = (uint64_t *)v0[12];
  uint64_t v6 = v0[13];
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_101342130;
  *(void *)(v7 + 56) = &type metadata for String;
  *(void *)(v7 + 64) = sub_10000B4CC();
  *(void *)(v7 + 32) = 0xD000000000000028;
  *(void *)(v7 + 40) = 0x80000001013FE4B0;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v8 = enum case for FMNAccountType.w2Accessory(_:);
  uint64_t v9 = type metadata accessor for FMNAccountType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 104))(v2, v8, v9);
  *(unsigned char *)(v2 + *(int *)(v4 + 20)) = 0;
  type metadata accessor for SearchPartyURLSessionFactory(0);
  swift_allocObject();
  uint64_t v10 = type metadata accessor for FMNMockingPreferences();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v3, 1, 1, v10);
  uint64_t v11 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)();
  type metadata accessor for ServerInteractionController(0);
  uint64_t v12 = swift_allocObject();
  sub_1004AFB18(v2, v1, (uint64_t (*)(void))type metadata accessor for AccessoryIdentityPairingLockCheckEndPoint);
  v0[19] = sub_1004A0EC0(v1, v11, v12);
  uint64_t v13 = *(void *)(v6 + 16);
  swift_retain();
  sub_10025E980(v5);
  char v17 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10163F7C0 + dword_10163F7C0);
  char v14 = (void *)swift_task_alloc();
  v0[20] = v14;
  *char v14 = v0;
  v14[1] = sub_10049A678;
  uint64_t v15 = v0[12];
  return v17(v15, v13);
}

uint64_t sub_10049A678(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (void *)*v3;
  v4[21] = a1;
  v4[22] = a2;
  v4[23] = a3;
  swift_task_dealloc();
  return _swift_task_switch(sub_10049A77C, 0, 0);
}

uint64_t sub_10049A77C()
{
  uint64_t v78 = v0;
  if (*(void *)(v0 + 168))
  {
    uint64_t v75 = *(void *)(v0 + 168);
    if (qword_1016370D0 != -1) {
      swift_once();
    }
    uint64_t v1 = *(uint64_t **)(v0 + 96);
    uint64_t v2 = type metadata accessor for Logger();
    sub_100010324(v2, (uint64_t)qword_10170ECF8);
    sub_10025E980(v1);
    sub_10025E980(v1);
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.debug.getter();
    BOOL v5 = os_log_type_enabled(v3, v4);
    uint64_t v6 = *(uint64_t **)(v0 + 96);
    if (v5)
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc();
      v77[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v7 = 136315138;
      uint64_t v8 = Data.hexString.getter();
      *(void *)(v0 + 80) = sub_1008FA0F0(v8, v9, v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10025EE90(v6);
      sub_10025EE90(v6);
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Auth nonce: %s", v7, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10025EE90(v6);
      sub_10025EE90(v6);
    }

    char v17 = *(uint64_t **)(v0 + 96);
    sub_10025E980(v17);
    sub_10025E980(v17);
    uint64_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    BOOL v20 = os_log_type_enabled(v18, v19);
    uint64_t v21 = *(uint64_t **)(v0 + 96);
    if (v20)
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      v77[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v22 = 136315138;
      uint64_t v23 = Data.hexString.getter();
      *(void *)(v0 + 72) = sub_1008FA0F0(v23, v24, v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10025EE90(v21);
      sub_10025EE90(v21);
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "Session nonce: %s", v22, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10025EE90(v21);
      sub_10025EE90(v21);
    }

    uint64_t v25 = *(uint64_t **)(v0 + 96);
    sub_10025E980(v25);
    sub_10025E980(v25);
    uint64_t v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.debug.getter();
    BOOL v28 = os_log_type_enabled(v26, v27);
    uint64_t v29 = *(uint64_t **)(v0 + 96);
    if (v28)
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      v77[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v30 = 136315138;
      uint64_t v31 = Data.hexString.getter();
      *(void *)(v0 + 64) = sub_1008FA0F0(v31, v32, v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10025EE90(v29);
      sub_10025EE90(v29);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "serialNumber: %s", v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10025EE90(v29);
      sub_10025EE90(v29);
    }

    uint64_t v33 = *(uint64_t **)(v0 + 96);
    sub_10025E980(v33);
    sub_10025E980(v33);
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.debug.getter();
    BOOL v36 = os_log_type_enabled(v34, v35);
    uint64_t v37 = *(uint64_t **)(v0 + 96);
    if (v36)
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc();
      v77[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v38 = 136315138;
      uint64_t v39 = Data.hexString.getter();
      *(void *)(v0 + 56) = sub_1008FA0F0(v39, v40, v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10025EE90(v37);
      sub_10025EE90(v37);
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "altserialNumber: %s", v38, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10025EE90(v37);
      sub_10025EE90(v37);
    }

    uint64_t v41 = *(uint64_t **)(v0 + 96);
    sub_10025E980(v41);
    sub_10025E980(v41);
    uint64_t v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.debug.getter();
    BOOL v44 = os_log_type_enabled(v42, v43);
    uint64_t v45 = *(uint64_t **)(v0 + 96);
    if (v44)
    {
      unint64_t v46 = (uint8_t *)swift_slowAlloc();
      v77[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v46 = 136315138;
      uint64_t v47 = Data.hexString.getter();
      *(void *)(v0 + 48) = sub_1008FA0F0(v47, v48, v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10025EE90(v45);
      sub_10025EE90(v45);
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "SeedK1: %s", v46, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10025EE90(v45);
      sub_10025EE90(v45);
    }

    os_log_type_t v49 = *(uint64_t **)(v0 + 96);
    sub_10025E980(v49);
    sub_10025E980(v49);
    uint64_t v50 = Logger.logObject.getter();
    os_log_type_t v51 = static os_log_type_t.debug.getter();
    BOOL v52 = os_log_type_enabled(v50, v51);
    uint64_t v53 = *(uint64_t **)(v0 + 96);
    if (v52)
    {
      uint64_t v54 = (uint8_t *)swift_slowAlloc();
      v77[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v54 = 136315138;
      uint64_t v55 = Data.hexString.getter();
      *(void *)(v0 + 40) = sub_1008FA0F0(v55, v56, v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10025EE90(v53);
      sub_10025EE90(v53);
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "accessoryAttestation: %s", v54, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10025EE90(v53);
      sub_10025EE90(v53);
    }

    uint64_t v57 = *(uint64_t **)(v0 + 96);
    sub_10025E980(v57);
    sub_10025E980(v57);
    uint64_t v58 = Logger.logObject.getter();
    os_log_type_t v59 = static os_log_type_t.debug.getter();
    BOOL v60 = os_log_type_enabled(v58, v59);
    unint64_t v61 = *(uint64_t **)(v0 + 96);
    if (v60)
    {
      uint64_t v62 = (uint8_t *)swift_slowAlloc();
      v77[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v62 = 136315138;
      uint64_t v63 = Data.hexString.getter();
      *(void *)(v0 + 32) = sub_1008FA0F0(v63, v64, v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10025EE90(v61);
      sub_10025EE90(v61);
      _os_log_impl((void *)&_mh_execute_header, v58, v59, "accessorySignature: %s", v62, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10025EE90(*(uint64_t **)(v0 + 96));
      sub_10025EE90(v61);
    }

    uint64_t v65 = *(void *)(v0 + 176);
    unint64_t v66 = *(void *)(v0 + 184);
    uint64_t v67 = *(void *)(v0 + 168);
    uint64_t v68 = *(void **)(v0 + 152);
    uint64_t v69 = *(void *)(v0 + 112);
    swift_bridgeObjectRetain();
    int8x16_t v76 = *(int8x16_t *)(v0 + 96);
    sub_1000361E0(v65, v66);
    uint64_t v70 = sub_1004AA6A4(v75, v65, v66, 0, v68);
    *(void *)(v0 + 192) = v70;
    sub_1001D7860(v67, v65, v66);
    unint64_t v71 = (int8x16_t *)swift_task_alloc();
    *(void *)(v0 + 200) = v71;
    v71[1].i64[0] = v70;
    v71[1].i64[1] = (uint64_t)v68;
    v71[2] = vextq_s8(v76, v76, 8uLL);
    v71[3].i64[0] = v69;
    uint64_t v72 = (void *)swift_task_alloc();
    *(void *)(v0 + 208) = v72;
    uint64_t v73 = type metadata accessor for PencilPairingLockCheckResponse();
    *uint64_t v72 = v0;
    v72[1] = sub_10049B398;
    uint64_t v74 = *(void *)(v0 + 88);
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v74, 0, 0, 0xD000000000000028, 0x80000001013FE4B0, sub_1004AF6EC, v71, v73);
  }
  else
  {
    if (qword_1016370D0 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_100010324(v10, (uint64_t)qword_10170ECF8);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, " Could not create pairing lock request.", v13, 2u);
      swift_slowDealloc();
    }
    uint64_t v14 = *(void *)(v0 + 144);

    type metadata accessor for SPPairingSessionError(0);
    *(void *)(v0 + 24) = 6;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_1004B27A4(&qword_101638770, type metadata accessor for SPPairingSessionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    swift_release();
    sub_1004AFAB8(v14, (uint64_t (*)(void))type metadata accessor for AccessoryIdentityPairingLockCheckEndPoint);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v15 = *(uint64_t (**)(void))(v0 + 8);
    return v15();
  }
}

uint64_t sub_10049B398()
{
  *(void *)(*(void *)v1 + 216) = v0;
  swift_task_dealloc();
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10049B5A4;
  }
  else {
    uint64_t v2 = sub_10049B4CC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10049B4CC()
{
  unint64_t v1 = v0[23];
  uint64_t v3 = v0[21];
  uint64_t v2 = v0[22];
  uint64_t v4 = v0[18];
  swift_release();
  swift_release();
  sub_1001D7860(v3, v2, v1);
  sub_1004AFAB8(v4, (uint64_t (*)(void))type metadata accessor for AccessoryIdentityPairingLockCheckEndPoint);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  BOOL v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_10049B5A4()
{
  unint64_t v1 = v0[23];
  uint64_t v3 = v0[21];
  uint64_t v2 = v0[22];
  uint64_t v4 = v0[18];
  swift_release();
  swift_release();
  sub_1001D7860(v3, v2, v1);
  sub_1004AFAB8(v4, (uint64_t (*)(void))type metadata accessor for AccessoryIdentityPairingLockCheckEndPoint);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  BOOL v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_10049B670(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v26 = a5;
  uint64_t v27 = a6;
  uint64_t v25 = a4;
  uint64_t v23 = a1;
  uint64_t v8 = sub_10000588C(&qword_1016460F8);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v22(v11, a1, v8);
  uint64_t v12 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v13 = (v12 + 24) & ~v12;
  uint64_t v24 = v12 | 7;
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a3;
  uint64_t v21 = *(void (**)(uint64_t, char *, uint64_t))(v9 + 32);
  v21(v14 + v13, v11, v8);
  swift_retain();
  Future.addFailure(block:)();
  swift_release();
  swift_release();
  v22(v11, v23, v8);
  unint64_t v15 = (v13 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = (v15 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a3;
  v21(v17 + v13, v11, v8);
  *(void *)(v17 + v15) = v25;
  uint64_t v18 = v26;
  memcpy((void *)(v17 + v16), v26, 0x130uLL);
  *(void *)(v17 + ((v16 + 311) & 0xFFFFFFFFFFFFFFF8)) = v27;
  swift_retain();
  swift_retain();
  sub_10025E980(v18);
  Future.addSuccess(block:)();
  swift_release();
  return swift_release();
}

uint64_t sub_10049B8C0()
{
  if (qword_1016370D0 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100010324(v0, (uint64_t)qword_10170ECF8);
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446210;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v4 = String.init<A>(describing:)();
    sub_1008FA0F0(v4, v5, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, " Error in verify pairing request. Error - %{public}s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  type metadata accessor for SPPairingSessionError(0);
  sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
  sub_1004B27A4(&qword_101638770, type metadata accessor for SPPairingSessionError);
  _BridgedStoredNSError.init(_:userInfo:)();
  sub_10000588C(&qword_1016460F8);
  return CheckedContinuation.resume(throwing:)();
}

uint64_t sub_10049BB28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v228 = a5;
  uint64_t v7 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v7 - 8);
  uint64_t v224 = (char *)&v219 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v229 = (uint8_t *)type metadata accessor for Date();
  uint64_t v227 = *((void *)v229 - 1);
  uint64_t v9 = __chkstk_darwin(v229);
  uint64_t v220 = (char *)&v219 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v226 = (char *)&v219 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  unint64_t v225 = (char *)&v219 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v223 = (char *)&v219 - v16;
  __chkstk_darwin(v15);
  v222 = (char *)&v219 - v17;
  uint64_t v18 = sub_10000588C(&qword_101646100);
  uint64_t v19 = __chkstk_darwin(v18 - 8);
  v232 = (char *)&v219 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v19);
  long long v231 = (char *)&v219 - v21;
  uint64_t v235 = (uint8_t *)type metadata accessor for PencilPairingLockCheckResponse();
  uint64_t v22 = __chkstk_darwin(v235);
  uint64_t v221 = (uint64_t)&v219 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v219 - v24;
  uint64_t v26 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v26 - 8);
  uint64_t v234 = (char *)&v219 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v28 = type metadata accessor for FMNServerInteractionController.FMNResponseFields();
  uint64_t isa = (uint64_t)v28[-1].isa;
  uint64_t v238 = v28;
  uint64_t v29 = __chkstk_darwin(v28);
  uint64_t v31 = (char *)&v219 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = __chkstk_darwin(v29);
  uint64_t v34 = (char *)&v219 - v33;
  uint64_t v35 = __chkstk_darwin(v32);
  uint64_t v37 = (char *)&v219 - v36;
  __chkstk_darwin(v35);
  uint64_t v39 = (char *)&v219 - v38;
  uint64_t v40 = sub_10000588C(&qword_101646108);
  uint64_t v41 = __chkstk_darwin(v40 - 8);
  uint64_t v230 = (uint64_t)&v219 - ((v42 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = __chkstk_darwin(v41);
  uint64_t v233 = (char *)&v219 - v44;
  uint64_t v45 = __chkstk_darwin(v43);
  uint64_t v47 = (char *)&v219 - v46;
  __chkstk_darwin(v45);
  os_log_type_t v49 = (char *)&v219 - v48;
  uint64_t v240 = a1;
  FMNServerInteractionController.FMNResponseFields.statusCode.getter();
  uint64_t v50 = (uint64_t)v49;
  ServerStatusCode.init(rawValue:)();
  uint64_t v51 = type metadata accessor for ServerStatusCode();
  uint64_t v52 = *(void *)(v51 - 8);
  int v53 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51);
  uint64_t v239 = a3;
  uint64_t v236 = v50;
  if (v53 == 1) {
    goto LABEL_2;
  }
  uint64_t v219 = v25;
  sub_10001D074(v50, (uint64_t)v47, &qword_101646108);
  uint64_t v62 = *(uint8_t **)(v52 + 88);
  int v63 = ((uint64_t (*)(char *, uint64_t))v62)(v47, v51);
  if (v63 != enum case for ServerStatusCode.success(_:))
  {
    if (v63 != enum case for ServerStatusCode.forbidden(_:))
    {
      if (v63 == enum case for ServerStatusCode.serverConflict(_:))
      {
        uint64_t v93 = isa;
        if (qword_1016370D0 != -1) {
          swift_once();
        }
        uint64_t v94 = type metadata accessor for Logger();
        sub_100010324(v94, (uint64_t)qword_10170ECF8);
        uint64_t v95 = v238;
        (*(void (**)(char *, uint64_t, NSObject *))(v93 + 16))(v37, v240, v238);
        uint64_t v96 = Logger.logObject.getter();
        os_log_type_t v97 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v96, v97))
        {
          uint64_t v98 = (uint8_t *)swift_slowAlloc();
          v242[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v98 = 136446210;
          sub_1004B27A4((unint64_t *)&qword_101649E30, (void (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields);
          uint64_t v99 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v241 = sub_1008FA0F0(v99, v100, v242);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          (*(void (**)(char *, NSObject *))(v93 + 8))(v37, v95);
          _os_log_impl((void *)&_mh_execute_header, v96, v97, "Linked to another Apple ID. %{public}s", v98, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          (*(void (**)(char *, NSObject *))(v93 + 8))(v37, v95);
        }

        type metadata accessor for SPPairingSessionError(0);
        uint64_t v241 = 18;
        sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
        sub_1004B27A4(&qword_101638770, type metadata accessor for SPPairingSessionError);
        _BridgedStoredNSError.init(_:userInfo:)();
        uint64_t v241 = v242[0];
        sub_10000588C(&qword_1016460F8);
        goto LABEL_13;
      }
      (*(void (**)(char *, uint64_t))(v52 + 8))(v47, v51);
LABEL_2:
      if (qword_1016370D0 != -1) {
        swift_once();
      }
      uint64_t v54 = type metadata accessor for Logger();
      sub_100010324(v54, (uint64_t)qword_10170ECF8);
      uint64_t v56 = isa;
      uint64_t v55 = v238;
      (*(void (**)(char *, uint64_t, NSObject *))(isa + 16))(v31, v240, v238);
      uint64_t v57 = Logger.logObject.getter();
      os_log_type_t v58 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v57, v58))
      {
        os_log_type_t v59 = (uint8_t *)swift_slowAlloc();
        v242[0] = swift_slowAlloc();
        *(_DWORD *)os_log_type_t v59 = 136446210;
        sub_1004B27A4((unint64_t *)&qword_101649E30, (void (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields);
        uint64_t v60 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v241 = sub_1008FA0F0(v60, v61, v242);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, NSObject *))(v56 + 8))(v31, v55);
        _os_log_impl((void *)&_mh_execute_header, v57, v58, " Pairing lock failed: %{public}s", v59, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(char *, NSObject *))(v56 + 8))(v31, v55);
      }

      type metadata accessor for SPPairingSessionError(0);
      uint64_t v241 = 1;
      sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
      sub_1004B27A4(&qword_101638770, type metadata accessor for SPPairingSessionError);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v241 = v242[0];
      sub_10000588C(&qword_1016460F8);
LABEL_13:
      CheckedContinuation.resume(throwing:)();
      return sub_10001DAB4(v236, &qword_101646108);
    }
    uint64_t v235 = v62;
    if (qword_1016370D0 != -1) {
      swift_once();
    }
    uint64_t v74 = type metadata accessor for Logger();
    uint64_t v75 = sub_100010324(v74, (uint64_t)qword_10170ECF8);
    uint64_t v77 = isa;
    int8x16_t v76 = v238;
    (*(void (**)(char *, uint64_t, NSObject *))(isa + 16))(v34, v240, v238);
    uint64_t v234 = (char *)v75;
    uint64_t v78 = Logger.logObject.getter();
    os_log_type_t v79 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v78, v79))
    {
      uint64_t v80 = swift_slowAlloc();
      long long v231 = (char *)swift_slowAlloc();
      v242[0] = (uint64_t)v231;
      id v229 = (uint8_t *)v80;
      *(_DWORD *)uint64_t v80 = 136446210;
      uint64_t v228 = (uint64_t *)(v80 + 4);
      sub_1004B27A4((unint64_t *)&qword_101649E30, (void (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields);
      uint64_t v81 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v241 = sub_1008FA0F0(v81, v82, v242);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, NSObject *))(v77 + 8))(v34, v76);
      _os_log_impl((void *)&_mh_execute_header, v78, v79, "Pairing not allowed! %{public}s", v229, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, NSObject *))(v77 + 8))(v34, v76);
    }

    uint64_t v115 = (uint64_t)v232;
    FMNServerInteractionController.FMNResponseFields.metadata.getter();
    uint64_t v116 = type metadata accessor for FMNServerInteractionController.InternalServerMetadata();
    uint64_t v117 = *(void *)(v116 - 8);
    int v118 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v117 + 48))(v115, 1, v116);
    uint64_t v119 = (uint64_t)v233;
    if (v118 == 1)
    {
      sub_10001DAB4(v115, &qword_101646100);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v52 + 56))(v119, 1, 1, v51);
    }
    else
    {
      FMNServerInteractionController.InternalServerMetadata.errorCode.getter();
      (*(void (**)(uint64_t, uint64_t))(v117 + 8))(v115, v116);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v52 + 56))(v119, 0, 1, v51);
      uint64_t v121 = v230;
      sub_10001D074(v119, v230, &qword_101646108);
      int v122 = ((uint64_t (*)(uint64_t, uint64_t))v235)(v121, v51);
      if (v122 == enum case for ServerStatusCode.preconditionFailed(_:))
      {
        uint64_t v123 = Logger.logObject.getter();
        os_log_type_t v124 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v123, v124))
        {
          uint64_t v125 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v125 = 0;
          _os_log_impl((void *)&_mh_execute_header, v123, v124, "Pairing has been completed by another device!", v125, 2u);
          swift_slowDealloc();
        }

        type metadata accessor for SPPairingSessionError(0);
        uint64_t v120 = 22;
        goto LABEL_62;
      }
      if (v122 == enum case for ServerStatusCode.locked(_:))
      {
        uint64_t v148 = Logger.logObject.getter();
        os_log_type_t v149 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v148, v149))
        {
          uint64_t v150 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v150 = 0;
          _os_log_impl((void *)&_mh_execute_header, v148, v149, " ⍻ Pairing is pending from another device!", v150, 2u);
          swift_slowDealloc();
        }

        type metadata accessor for SPPairingSessionError(0);
        uint64_t v120 = 21;
        goto LABEL_62;
      }
      (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v121, v51);
    }
    type metadata accessor for SPPairingSessionError(0);
    uint64_t v120 = 1;
LABEL_62:
    uint64_t v241 = v120;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_1004B27A4(&qword_101638770, type metadata accessor for SPPairingSessionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v241 = v242[0];
    sub_10000588C(&qword_1016460F8);
    CheckedContinuation.resume(throwing:)();
    sub_10001DAB4(v119, &qword_101646108);
    return sub_10001DAB4(v236, &qword_101646108);
  }
  if (qword_1016370D0 != -1) {
    swift_once();
  }
  uint64_t v64 = type metadata accessor for Logger();
  uint64_t v65 = sub_100010324(v64, (uint64_t)qword_10170ECF8);
  uint64_t v66 = isa;
  uint64_t v67 = v238;
  (*(void (**)(char *, uint64_t, NSObject *))(isa + 16))(v39, v240, v238);
  uint64_t v68 = Logger.logObject.getter();
  os_log_type_t v69 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v68, v69))
  {
    uint64_t v70 = (uint8_t *)swift_slowAlloc();
    uint64_t v71 = swift_slowAlloc();
    uint64_t v233 = (char *)v65;
    v242[0] = v71;
    *(_DWORD *)uint64_t v70 = 136446210;
    sub_1004B27A4((unint64_t *)&qword_101649E30, (void (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields);
    uint64_t v72 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v241 = sub_1008FA0F0(v72, v73, v242);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, NSObject *))(v66 + 8))(v39, v67);
    _os_log_impl((void *)&_mh_execute_header, v68, v69, "Pairing success: %{public}s", v70, 0xCu);
    swift_arrayDestroy();
    uint64_t v65 = (uint64_t)v233;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, NSObject *))(v66 + 8))(v39, v67);
  }

  unint64_t v83 = v235;
  uint64_t v84 = FMNServerInteractionController.FMNResponseFields.data.getter();
  unint64_t v86 = v85;
  static String.Encoding.utf8.getter();
  uint64_t v87 = String.init(data:encoding:)();
  unint64_t v89 = v88;
  sub_10001CFB8(v84, v86);
  if (v89)
  {
    swift_bridgeObjectRetain();
    unint64_t v90 = Logger.logObject.getter();
    os_log_type_t v91 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v90, v91))
    {
      unint64_t v92 = (uint8_t *)swift_slowAlloc();
      v242[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v92 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v241 = sub_1008FA0F0(v87, v89, v242);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v90, v91, "Response data: %s", v92, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  uint64_t v101 = FMNServerInteractionController.FMNResponseFields.data.getter();
  unint64_t v103 = v102;
  sub_1004B27A4(&qword_101646110, (void (*)(uint64_t))type metadata accessor for PencilPairingLockCheckResponse);
  uint64_t v104 = 0;
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  sub_10001CFB8(v101, v103);
  uint64_t v111 = (uint64_t)v231;
  FMNServerInteractionController.FMNResponseFields.metadata.getter();
  uint64_t v112 = type metadata accessor for FMNServerInteractionController.InternalServerMetadata();
  uint64_t v113 = *(void *)(v112 - 8);
  int v114 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v113 + 48))(v111, 1, v112);
  if (v114 == 1)
  {
    sub_10001DAB4(v111, &qword_101646100);
LABEL_49:
    uint64_t v134 = FMNServerInteractionController.FMNResponseFields.responseHeaders.getter();
    if (*(void *)(v134 + 16) && (uint64_t v135 = sub_100723FF4(1702125892, 0xE400000000000000), (v136 & 1) != 0))
    {
      long long v137 = (uint64_t *)(*(void *)(v134 + 56) + 16 * v135);
      uint64_t v139 = *v137;
      unint64_t v138 = v137[1];
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRelease();
      unint64_t v140 = Logger.logObject.getter();
      os_log_type_t v141 = static os_log_type_t.default.getter();
      BOOL v142 = os_log_type_enabled(v140, v141);
      uint64_t v240 = 0;
      if (v142)
      {
        uint64_t v143 = (uint8_t *)swift_slowAlloc();
        v242[0] = swift_slowAlloc();
        *(_DWORD *)uint64_t v143 = 136446210;
        swift_bridgeObjectRetain();
        uint64_t v241 = sub_1008FA0F0(v139, v138, v242);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v140, v141, "Server date: %{public}s", v143, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      unint64_t v151 = v229;
      uint64_t v152 = v227;
      uint64_t v153 = v226;
      uint64_t v154 = v225;
      if (qword_101636E80 != -1) {
        swift_once();
      }
      uint64_t v155 = (void *)qword_10170E740;
      NSString v156 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v157 = [v155 dateFromString:v156];

      if (v157)
      {
        uint64_t v158 = v223;
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v159 = *(void (**)(char *, char *, uint8_t *))(v152 + 32);
        uint64_t v160 = (uint64_t)v224;
        v159(v224, v158, v151);
        (*(void (**)(uint64_t, void, uint64_t, uint8_t *))(v152 + 56))(v160, 0, 1, v151);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint8_t *))(v152 + 48))(v160, 1, v151) != 1)
        {
          uint64_t v161 = v222;
          v159(v222, (char *)v160, v151);
          uint64_t v162 = *(void (**)(char *, char *, uint8_t *))(v152 + 16);
          v162(v154, v161, v151);
          v162(v153, v161, v151);
          uint64_t v163 = v220;
          v162(v220, v161, v151);
          uint64_t v164 = Logger.logObject.getter();
          os_log_type_t v165 = static os_log_type_t.default.getter();
          int v166 = v165;
          uint64_t v238 = v164;
          if (os_log_type_enabled(v164, v165))
          {
            uint64_t v167 = v163;
            uint64_t v168 = swift_slowAlloc();
            uint64_t isa = swift_slowAlloc();
            v242[0] = isa;
            *(_DWORD *)uint64_t v168 = 136446722;
            uint64_t v233 = (char *)v65;
            sub_1004B27A4((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
            LODWORD(v234) = v166;
            uint64_t v169 = dispatch thunk of CustomStringConvertible.description.getter();
            uint64_t v241 = sub_1008FA0F0(v169, v170, v242);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            uint64_t v171 = v154;
            uint64_t v172 = *(void (**)(char *, uint8_t *))(v152 + 8);
            uint64_t v227 = v152 + 8;
            v172(v171, v229);
            *(_WORD *)(v168 + 12) = 2048;
            uint64_t v173 = Date.epoch.getter();
            v172(v153, v229);
            uint64_t v241 = v173;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v168 + 22) = 2082;
            uint64_t v241 = Date.epoch.getter();
            sub_100061D24();
            uint64_t v174 = FixedWidthInteger.data.getter();
            unint64_t v176 = v175;
            uint64_t v177 = Data.hexString.getter();
            unint64_t v179 = v178;
            unint64_t v180 = v176;
            unint64_t v151 = v229;
            sub_10001CFB8(v174, v180);
            uint64_t v241 = sub_1008FA0F0(v177, v179, v242);
            uint64_t v65 = (uint64_t)v233;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            v172(v167, v151);
            double v181 = v238;
            _os_log_impl((void *)&_mh_execute_header, v238, (os_log_type_t)v234, "pairingEpoch: %{public}s [%lld/%{public}s]", (uint8_t *)v168, 0x20u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            double v187 = v154;
            uint64_t v172 = *(void (**)(char *, uint8_t *))(v152 + 8);
            v172(v153, v151);
            v172(v187, v151);
            v172(v163, v151);
          }
          unint64_t v83 = v235;
          uint64_t v104 = v240;
          double v188 = v222;
          uint64_t v128 = Date.epoch.getter();
          v172(v188, v151);
          goto LABEL_80;
        }
      }
      else
      {
        uint64_t v160 = (uint64_t)v224;
        (*(void (**)(char *, uint64_t, uint64_t, uint8_t *))(v152 + 56))(v224, 1, 1, v151);
      }
      sub_10001DAB4(v160, (uint64_t *)&unk_10163AC90);
      double v182 = Logger.logObject.getter();
      os_log_type_t v183 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v182, v183))
      {
        id v184 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v184 = 0;
        _os_log_impl((void *)&_mh_execute_header, v182, v183, "Unable to parse server Date!", v184, 2u);
        swift_slowDealloc();
      }

      type metadata accessor for SPPairingSessionError(0);
      uint64_t v147 = 25;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v144 = Logger.logObject.getter();
      os_log_type_t v145 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v144, v145))
      {
        unint64_t v146 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v146 = 0;
        _os_log_impl((void *)&_mh_execute_header, v144, v145, "Server response is missing Date header!", v146, 2u);
        swift_slowDealloc();
      }

      type metadata accessor for SPPairingSessionError(0);
      uint64_t v147 = 23;
    }
    uint64_t v241 = v147;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_1004B27A4(&qword_101638770, type metadata accessor for SPPairingSessionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v241 = v242[0];
    sub_10000588C(&qword_1016460F8);
    CheckedContinuation.resume(throwing:)();
    swift_release();
    uint64_t v185 = (uint64_t)v219;
LABEL_76:
    sub_1004AFAB8(v185, (uint64_t (*)(void))type metadata accessor for PencilPairingLockCheckResponse);
    return sub_10001DAB4(v236, &qword_101646108);
  }
  uint64_t v126 = FMNServerInteractionController.InternalServerMetadata.dateEpoch.getter();
  uint64_t v127 = v111;
  uint64_t v128 = v126;
  char v130 = v129;
  (*(void (**)(uint64_t, uint64_t))(v113 + 8))(v127, v112);
  if (v130) {
    goto LABEL_49;
  }
  uint64_t v131 = Logger.logObject.getter();
  os_log_type_t v132 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v131, v132))
  {
    unint64_t v133 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)unint64_t v133 = 134217984;
    v242[0] = v128;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v131, v132, "Server epoch: %lld", v133, 0xCu);
    swift_slowDealloc();
  }

LABEL_80:
  uint64_t v189 = (uint64_t)v219;
  *(void *)&v219[*((int *)v83 + 11)] = v128;
  uint64_t v190 = v228;
  sub_10025E980(v228);
  os_log_t v191 = sub_1004AE8BC(v190, v189);
  unint64_t v193 = v192;
  sub_10025EE90(v190);
  uint64_t v194 = Logger.logObject.getter();
  os_log_type_t v195 = static os_log_type_t.default.getter();
  BOOL v196 = os_log_type_enabled(v194, v195);
  uint64_t v240 = v104;
  if (v196)
  {
    id v197 = (uint8_t *)swift_slowAlloc();
    uint64_t isa = swift_slowAlloc();
    v242[0] = isa;
    uint64_t v238 = v191;
    *(_DWORD *)id v197 = 136315138;
    uint64_t v234 = (char *)(v197 + 4);
    uint64_t v235 = v197;
    swift_beginAccess();
    unint64_t v198 = v193;
    uint64_t v200 = *(void *)(v189 + 48);
    unint64_t v199 = *(void *)(v189 + 56);
    sub_1000361E0(v200, v199);
    uint64_t v201 = Data.hexString.getter();
    unint64_t v203 = v202;
    uint64_t v204 = v200;
    unint64_t v193 = v198;
    sub_10001CFB8(v204, v199);
    v244[0] = sub_1008FA0F0(v201, v203, v242);
    os_log_t v191 = v238;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v194, v195, "S3: %s", v235, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  sub_1000361E0((uint64_t)v191, v193);
  sub_1000361E0((uint64_t)v191, v193);
  uint64_t v205 = Logger.logObject.getter();
  os_log_type_t v206 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v205, v206))
  {
    uint64_t v207 = (uint8_t *)swift_slowAlloc();
    uint64_t v208 = swift_slowAlloc();
    uint64_t v233 = (char *)v65;
    v242[0] = v208;
    *(_DWORD *)uint64_t v207 = 136315138;
    uint64_t v209 = Data.hexString.getter();
    v244[0] = sub_1008FA0F0(v209, v210, v242);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10001CFB8((uint64_t)v191, v193);
    sub_10001CFB8((uint64_t)v191, v193);
    _os_log_impl((void *)&_mh_execute_header, v205, v206, "dataForSignatureVerification: %s", v207, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10001CFB8((uint64_t)v191, v193);
    sub_10001CFB8((uint64_t)v191, v193);
  }

  uint64_t v211 = v240;
  uint64_t v212 = (uint64_t)v219;
  swift_beginAccess();
  uint64_t v213 = *(void *)(v212 + 48);
  unint64_t v214 = *(void *)(v212 + 56);
  sub_1000361E0(v213, v214);
  char v215 = sub_1004AEED4((uint64_t)v191, v193, v213, v214);
  if (!v211)
  {
    char v216 = v215;
    sub_10001CFB8(v213, v214);
    static os_log_type_t.default.getter();
    if (qword_101637308 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v217 = swift_allocObject();
    *(_OWORD *)(v217 + 16) = xmmword_101342130;
    *(void *)(v217 + 56) = &type metadata for Bool;
    *(void *)(v217 + 64) = &protocol witness table for Bool;
    *(unsigned char *)(v217 + 32) = v216 & 1;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    uint64_t v218 = (uint64_t)v219;
    sub_1004AFB18((uint64_t)v219, v221, (uint64_t (*)(void))type metadata accessor for PencilPairingLockCheckResponse);
    sub_10000588C(&qword_1016460F8);
    CheckedContinuation.resume(returning:)();
    swift_release();
    sub_10001CFB8((uint64_t)v191, v193);
    uint64_t v185 = v218;
    goto LABEL_76;
  }
  sub_10001CFB8(v213, v214);
  sub_10001CFB8((uint64_t)v191, v193);
  sub_1004AFAB8(v212, (uint64_t (*)(void))type metadata accessor for PencilPairingLockCheckResponse);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v105 = Logger.logObject.getter();
  os_log_type_t v106 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v105, v106))
  {
    uint64_t v107 = (uint8_t *)swift_slowAlloc();
    uint64_t v108 = swift_slowAlloc();
    uint64_t v243 = v211;
    v244[0] = v108;
    *(_DWORD *)uint64_t v107 = 136446210;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v109 = String.init<A>(describing:)();
    uint64_t v243 = sub_1008FA0F0(v109, v110, v244);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v105, v106, "Decode error: %{public}s", v107, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  type metadata accessor for SPPairingSessionError(0);
  uint64_t v243 = 24;
  sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
  sub_1004B27A4(&qword_101638770, type metadata accessor for SPPairingSessionError);
  _BridgedStoredNSError.init(_:userInfo:)();
  uint64_t v243 = v244[0];
  sub_10000588C(&qword_1016460F8);
  CheckedContinuation.resume(throwing:)();
  swift_release();
  swift_errorRelease();
  return sub_10001DAB4(v236, &qword_101646108);
}

uint64_t sub_10049DE78(uint64_t a1, uint64_t a2)
{
  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  sub_10000588C((uint64_t *)&unk_101649E20);
  v3[7] = swift_task_alloc();
  uint64_t v4 = type metadata accessor for FMNAccountType();
  v3[8] = v4;
  v3[9] = *(void *)(v4 - 8);
  v3[10] = swift_task_alloc();
  v3[11] = type metadata accessor for AccessoryIdentityPairingLockAckEndPoint();
  v3[12] = swift_task_alloc();
  v3[13] = swift_task_alloc();
  return _swift_task_switch(sub_10049DFAC, 0, 0);
}

uint64_t sub_10049DFAC()
{
  uint64_t v1 = v0[12];
  uint64_t v2 = (void *)v0[13];
  uint64_t v3 = v0[10];
  uint64_t v4 = v0[11];
  uint64_t v5 = v0[8];
  uint64_t v6 = v0[7];
  uint64_t v16 = v0[6];
  uint64_t v17 = (void *)v0[5];
  uint64_t v7 = enum case for FMNAccountType.w2Accessory(_:);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[9] + 104);
  v8(v3, enum case for FMNAccountType.w2Accessory(_:), v5);
  type metadata accessor for AccountURLComponents();
  swift_allocObject();
  *uint64_t v2 = sub_1010E7A64(v3);
  v8((uint64_t)v2 + *(int *)(v4 + 20), v7, v5);
  type metadata accessor for SearchPartyURLSessionFactory(0);
  swift_allocObject();
  uint64_t v9 = type metadata accessor for FMNMockingPreferences();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v6, 1, 1, v9);
  uint64_t v10 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)();
  type metadata accessor for ServerInteractionController(0);
  uint64_t v11 = swift_allocObject();
  sub_1004AFB18((uint64_t)v2, v1, (uint64_t (*)(void))type metadata accessor for AccessoryIdentityPairingLockAckEndPoint);
  v0[14] = sub_1004A12D8(v1, v10, v11);
  uint64_t v12 = *(void *)(v16 + 16);
  swift_retain();
  sub_1004AF2A0(v17);
  uint64_t v18 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_101665650 + dword_101665650);
  uint64_t v13 = (void *)swift_task_alloc();
  v0[15] = v13;
  *uint64_t v13 = v0;
  v13[1] = sub_10049E1CC;
  uint64_t v14 = v0[5];
  return v18(v14, v12);
}

uint64_t sub_10049E1CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (void *)*v3;
  v4[16] = a1;
  v4[17] = a2;
  v4[18] = a3;
  swift_task_dealloc();
  return _swift_task_switch(sub_10049E2D0, 0, 0);
}

uint64_t sub_10049E2D0()
{
  uint64_t v1 = v0[16];
  if (v1)
  {
    uint64_t v3 = v0[17];
    unint64_t v2 = v0[18];
    uint64_t v4 = (void *)v0[14];
    swift_bridgeObjectRetain();
    sub_1000361E0(v3, v2);
    uint64_t v5 = sub_1004AA9A0(v1, v3, v2, 0, v4);
    v0[19] = v5;
    sub_1001D7860(v1, v3, v2);
    uint64_t v6 = (void *)swift_task_alloc();
    v0[20] = v6;
    uint64_t v7 = type metadata accessor for PencilPairingLockAckResponse();
    *uint64_t v6 = v0;
    v6[1] = sub_10049E5DC;
    uint64_t v8 = v0[4];
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v8, 0, 0, 0xD00000000000001ALL, 0x80000001013FE490, sub_1004AF3E8, v5, v7);
  }
  else
  {
    if (qword_1016370D0 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_100010324(v9, (uint64_t)qword_10170ECF8);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, " Could not create pairing ack request", v12, 2u);
      swift_slowDealloc();
    }
    uint64_t v13 = v0[13];

    type metadata accessor for SPPairingSessionError(0);
    v0[3] = 6;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_1004B27A4(&qword_101638770, type metadata accessor for SPPairingSessionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    swift_release();
    sub_1004AFAB8(v13, (uint64_t (*)(void))type metadata accessor for AccessoryIdentityPairingLockAckEndPoint);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v14 = (uint64_t (*)(void))v0[1];
    return v14();
  }
}

uint64_t sub_10049E5DC()
{
  *(void *)(*(void *)v1 + 168) = v0;
  swift_task_dealloc();
  if (v0) {
    unint64_t v2 = sub_10049E7D4;
  }
  else {
    unint64_t v2 = sub_10049E6F0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10049E6F0()
{
  unint64_t v1 = v0[18];
  uint64_t v3 = v0[16];
  uint64_t v2 = v0[17];
  uint64_t v4 = v0[13];
  swift_release();
  swift_release();
  sub_1001D7860(v3, v2, v1);
  sub_1004AFAB8(v4, (uint64_t (*)(void))type metadata accessor for AccessoryIdentityPairingLockAckEndPoint);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_10049E7D4()
{
  unint64_t v1 = v0[18];
  uint64_t v3 = v0[16];
  uint64_t v2 = v0[17];
  uint64_t v4 = v0[13];
  swift_release();
  swift_release();
  sub_1001D7860(v3, v2, v1);
  sub_1004AFAB8(v4, (uint64_t (*)(void))type metadata accessor for AccessoryIdentityPairingLockAckEndPoint);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_10049E8AC(uint64_t a1)
{
  uint64_t v13 = a1;
  uint64_t v2 = sub_10000588C(&qword_1016460C8);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v12(v5, a1, v2);
  unint64_t v6 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v11[1] = v6 + v4;
  uint64_t v7 = swift_allocObject();
  uint64_t v8 = *(void (**)(unint64_t, char *, uint64_t))(v3 + 32);
  v8(v7 + v6, v5, v2);
  Future.addFailure(block:)();
  swift_release();
  swift_release();
  v12(v5, v13, v2);
  uint64_t v9 = swift_allocObject();
  v8(v9 + v6, v5, v2);
  Future.addSuccess(block:)();
  swift_release();
  return swift_release();
}

uint64_t sub_10049EA84()
{
  if (qword_1016370D0 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100010324(v0, (uint64_t)qword_10170ECF8);
  swift_errorRetain();
  swift_errorRetain();
  unint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446210;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v4 = String.init<A>(describing:)();
    sub_1008FA0F0(v4, v5, &v7);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, " Ack pairing failed. %{public}s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  type metadata accessor for SPPairingSessionError(0);
  sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
  sub_1004B27A4(&qword_101638770, type metadata accessor for SPPairingSessionError);
  _BridgedStoredNSError.init(_:userInfo:)();
  sub_10000588C(&qword_1016460C8);
  return CheckedContinuation.resume(throwing:)();
}

uint64_t sub_10049ECEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PencilPairingLockAckResponse();
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)v37 - v8;
  uint64_t v10 = type metadata accessor for FMNServerInteractionController.FMNResponseFields();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)v37 - v15;
  if (FMNServerInteractionController.FMNResponseFields.statusCode.getter() == 200)
  {
    uint64_t v41 = v4;
    if (qword_1016370D0 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    uint64_t v18 = sub_100010324(v17, (uint64_t)qword_10170ECF8);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v16, a1, v10);
    uint64_t v40 = v18;
    uint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.default.getter();
    BOOL v21 = os_log_type_enabled(v19, v20);
    uint64_t v39 = v7;
    if (v21)
    {
      uint64_t v22 = swift_slowAlloc();
      uint64_t v38 = v9;
      uint64_t v23 = (uint8_t *)v22;
      uint64_t v24 = swift_slowAlloc();
      uint64_t v42 = a2;
      uint64_t v44 = v24;
      *(_DWORD *)uint64_t v23 = 136446210;
      v37[1] = v23 + 4;
      sub_1004B27A4((unint64_t *)&qword_101649E30, (void (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields);
      uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v43 = sub_1008FA0F0(v25, v26, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
      _os_log_impl((void *)&_mh_execute_header, v19, v20, " Ack pairing success: %{public}s", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v9 = v38;
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
    }

    type metadata accessor for JSONDecoder();
    swift_allocObject();
    JSONDecoder.init()();
    uint64_t v33 = FMNServerInteractionController.FMNResponseFields.data.getter();
    unint64_t v35 = v34;
    sub_1004B27A4(&qword_1016460D0, (void (*)(uint64_t))type metadata accessor for PencilPairingLockAckResponse);
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    sub_10001CFB8(v33, v35);
    sub_1004AFB18((uint64_t)v9, (uint64_t)v39, (uint64_t (*)(void))type metadata accessor for PencilPairingLockAckResponse);
    sub_10000588C(&qword_1016460C8);
    CheckedContinuation.resume(returning:)();
    swift_release();
    return sub_1004AFAB8((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for PencilPairingLockAckResponse);
  }
  else
  {
    if (qword_1016370D0 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_100010324(v27, (uint64_t)qword_10170ECF8);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, a1, v10);
    BOOL v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      uint64_t v44 = swift_slowAlloc();
      uint64_t v42 = a2;
      *(_DWORD *)uint64_t v30 = 136446210;
      sub_1004B27A4((unint64_t *)&qword_101649E30, (void (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields);
      uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v43 = sub_1008FA0F0(v31, v32, &v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, " Ack pairing failed. Response %{public}s", v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    }

    type metadata accessor for SPPairingSessionError(0);
    uint64_t v43 = 1;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_1004B27A4(&qword_101638770, type metadata accessor for SPPairingSessionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v43 = v44;
    sub_10000588C(&qword_1016460C8);
    return CheckedContinuation.resume(throwing:)();
  }
}

uint64_t sub_10049F590(uint64_t a1)
{
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = v1;
  return _swift_task_switch(sub_10049F5B0, 0, 0);
}

uint64_t sub_10049F5B0()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = *(void *)(v0[5] + 16);
  swift_retain();
  sub_1004AF088(v1);
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_10165AAC0 + dword_10165AAC0);
  uint64_t v3 = (void *)swift_task_alloc();
  v0[6] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10049F678;
  uint64_t v4 = v0[4];
  return v6(v4, v2);
}

uint64_t sub_10049F678(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (void *)*v3;
  v4[7] = a1;
  v4[8] = a2;
  v4[9] = a3;
  swift_task_dealloc();
  return _swift_task_switch(sub_10049F77C, 0, 0);
}

uint64_t sub_10049F77C()
{
  uint64_t v1 = v0[7];
  if (v1)
  {
    uint64_t v3 = v0[8];
    uint64_t v2 = v0[9];
    uint64_t v4 = v0[4];
    uint64_t v5 = (void *)swift_task_alloc();
    v0[10] = v5;
    v5[2] = v4;
    v5[3] = v1;
    v5[4] = v3;
    v5[5] = v2;
    uint64_t v6 = (void *)swift_task_alloc();
    v0[11] = v6;
    *uint64_t v6 = v0;
    v6[1] = sub_10049F9FC;
    return withCheckedThrowingContinuation<A>(isolation:function:_:)(v6, 0, 0, 0xD000000000000024, 0x80000001013FE460, sub_1004AF0F4, v5, (char *)&type metadata for () + 8);
  }
  else
  {
    if (qword_1016370D0 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100010324(v7, (uint64_t)qword_10170ECF8);
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Could not create unpair command", v10, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for SPPairingSessionError(0);
    v0[3] = 6;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_1004B27A4(&qword_101638770, type metadata accessor for SPPairingSessionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    swift_willThrow();
    uint64_t v11 = (uint64_t (*)(void))v0[1];
    return v11();
  }
}

uint64_t sub_10049F9FC()
{
  *(void *)(*(void *)v1 + 96) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10049FB80;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_10049FB18;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10049FB18()
{
  sub_1001D7860(v0[7], v0[8], v0[9]);
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_10049FB80()
{
  sub_1001D7860(v0[7], v0[8], v0[9]);
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_10049FBF0(uint64_t a1, uint64_t a2, void (*a3)(char *, uint64_t, uint64_t), uint64_t a4, unint64_t a5)
{
  uint64_t v75 = a3;
  uint64_t v76 = a1;
  uint64_t v8 = sub_10000588C((uint64_t *)&unk_1016565A0);
  uint64_t v70 = *(void *)(v8 - 8);
  uint64_t v9 = *(void *)(v70 + 64);
  __chkstk_darwin(v8);
  uint64_t v10 = sub_10000588C((uint64_t *)&unk_101649E20);
  __chkstk_darwin(v10 - 8);
  uint64_t v74 = (char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for FMNAccountType();
  uint64_t v71 = *(void *)(v12 - 8);
  uint64_t v72 = v12;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for PencilUnpairEndPoint();
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v73 = (uint64_t)&v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v19 = (uint64_t *)((char *)&v61 - v18);
  uint64_t v20 = type metadata accessor for PencilUnpairData.DeviceUnpairData() - 8;
  __chkstk_darwin(v20);
  uint64_t v23 = (uint64_t *)((char *)&v61 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v24 = *(void *)(a2 + 72);
  if (*(void *)(v24 + 16))
  {
    uint64_t v67 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v25 = v24 + ((*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
    if (qword_1016370D0 != -1) {
      swift_once();
    }
    uint64_t v65 = v15;
    uint64_t v66 = v14;
    uint64_t v68 = v8;
    uint64_t v26 = type metadata accessor for Logger();
    sub_100010324(v26, (uint64_t)qword_10170ECF8);
    sub_1004AFB18(v25, (uint64_t)v23, (uint64_t (*)(void))type metadata accessor for PencilUnpairData.DeviceUnpairData);
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.default.getter();
    int v29 = v28;
    BOOL v30 = os_log_type_enabled(v27, v28);
    os_log_type_t v69 = v19;
    if (v30)
    {
      uint64_t v31 = swift_slowAlloc();
      int v62 = v29;
      uint64_t v32 = v31;
      uint64_t v33 = swift_slowAlloc();
      uint64_t v63 = v33;
      *(_DWORD *)uint64_t v32 = 141558275;
      uint64_t v77 = 1752392040;
      uint64_t v78 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v32 + 12) = 2081;
      uint64_t v61 = v32 + 14;
      uint64_t v34 = a4;
      unint64_t v35 = a5;
      uint64_t v36 = *v23;
      unint64_t v37 = v23[1];
      sub_1000361E0(*v23, v37);
      uint64_t v38 = Data.description.getter();
      uint64_t v64 = v9;
      unint64_t v40 = v39;
      unint64_t v41 = v37;
      a5 = v35;
      a4 = v34;
      sub_10001CFB8(v36, v41);
      uint64_t v77 = sub_1008FA0F0(v38, v40, &v78);
      uint64_t v19 = v69;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1004AFAB8((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for PencilUnpairData.DeviceUnpairData);
      _os_log_impl((void *)&_mh_execute_header, v27, (os_log_type_t)v62, "Removing pairing lock for Serial Number - %{private,mask.hash}s", (uint8_t *)v32, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1004AFAB8((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for PencilUnpairData.DeviceUnpairData);
    }

    uint64_t v43 = enum case for FMNAccountType.w2Accessory(_:);
    uint64_t v44 = v72;
    uint64_t v45 = *(void (**)(char *, uint64_t, uint64_t))(v71 + 104);
    uint64_t v46 = (uint64_t)v66;
    v45(v66, enum case for FMNAccountType.w2Accessory(_:), v72);
    type metadata accessor for AccountURLComponents();
    swift_allocObject();
    *uint64_t v19 = sub_1010E7A64(v46);
    v45((char *)v19 + *(int *)(v65 + 20), v43, v44);
    type metadata accessor for SearchPartyURLSessionFactory(0);
    swift_allocObject();
    uint64_t v47 = type metadata accessor for FMNMockingPreferences();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v47 - 8) + 56))(v74, 1, 1, v47);
    uint64_t v48 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)();
    type metadata accessor for ServerInteractionController(0);
    uint64_t v49 = swift_allocObject();
    uint64_t v50 = v73;
    sub_1004AFB18((uint64_t)v19, v73, (uint64_t (*)(void))type metadata accessor for PencilUnpairEndPoint);
    uint64_t v51 = (char *)sub_1004A5040(v50, v48, v49);
    uint64_t v74 = v51;
    uint64_t v52 = (uint64_t)v75;
    swift_bridgeObjectRetain();
    sub_1000361E0(a4, a5);
    sub_1004AAC9C(v52, a4, a5, 0, v51);
    swift_bridgeObjectRelease();
    sub_10001CFB8(a4, a5);
    uint64_t v53 = v70;
    uint64_t v75 = *(void (**)(char *, uint64_t, uint64_t))(v70 + 16);
    uint64_t v55 = v67;
    uint64_t v54 = v68;
    v75(v67, v76, v68);
    uint64_t v56 = *(unsigned __int8 *)(v53 + 80);
    uint64_t v57 = (v56 + 16) & ~v56;
    uint64_t v73 = v56 | 7;
    uint64_t v58 = swift_allocObject();
    os_log_type_t v59 = *(void (**)(uint64_t, char *, uint64_t))(v53 + 32);
    v59(v58 + v57, v55, v54);
    Future.addFailure(block:)();
    swift_release();
    swift_release();
    v75(v55, v76, v54);
    uint64_t v60 = swift_allocObject();
    v59(v60 + v57, v55, v54);
    Future.addSuccess(block:)();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return sub_1004AFAB8((uint64_t)v69, (uint64_t (*)(void))type metadata accessor for PencilUnpairEndPoint);
  }
  else
  {
    type metadata accessor for SPPairingSessionError(0);
    uint64_t v77 = 6;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_1004B27A4(&qword_101638770, type metadata accessor for SPPairingSessionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v77 = v78;
    return CheckedContinuation.resume(throwing:)();
  }
}

uint64_t sub_1004A03EC()
{
  if (qword_1016370D0 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100010324(v0, (uint64_t)qword_10170ECF8);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v4 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 138543362;
    swift_errorRetain();
    uint64_t v6 = _swift_stdlib_bridgeErrorToNSError();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v4 = v6;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Remove pairing lock command failed. Error - %{public}@", v3, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  type metadata accessor for SPPairingSessionError(0);
  sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
  sub_1004B27A4(&qword_101638770, type metadata accessor for SPPairingSessionError);
  _BridgedStoredNSError.init(_:userInfo:)();
  sub_10000588C((uint64_t *)&unk_1016565A0);
  return CheckedContinuation.resume(throwing:)();
}

uint64_t sub_1004A0638(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FMNServerInteractionController.FMNResponseFields();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v32 - v9;
  if (qword_101637310 != -1) {
    swift_once();
  }
  uint64_t v36 = type metadata accessor for Logger();
  sub_100010324(v36, (uint64_t)qword_10170F068);
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  uint64_t v37 = a1;
  uint64_t v34 = v11;
  v11(v10, a1, v4);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = swift_slowAlloc();
    uint64_t v35 = a2;
    uint64_t v15 = (uint8_t *)v14;
    uint64_t v16 = swift_slowAlloc();
    uint64_t v32 = v8;
    uint64_t v39 = v16;
    *(_DWORD *)uint64_t v15 = 136446210;
    uint64_t v33 = v5;
    sub_1004B27A4((unint64_t *)&qword_101649E30, (void (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields);
    uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v38 = sub_1008FA0F0(v17, v18, &v39);
    uint64_t v19 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v20 = *(void (**)(char *, uint64_t))(v19 + 8);
    v20(v10, v4);
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Remove pairing lock response %{public}s", v15, 0xCu);
    swift_arrayDestroy();
    uint64_t v8 = v32;
    swift_slowDealloc();
    a2 = v35;
    swift_slowDealloc();
  }
  else
  {
    uint64_t v20 = *(void (**)(char *, uint64_t))(v5 + 8);
    v20(v10, v4);
  }

  uint64_t v21 = v37;
  if (FMNServerInteractionController.FMNResponseFields.statusCode.getter() == 200)
  {
    if (qword_1016370D0 != -1) {
      swift_once();
    }
    sub_100010324(v36, (uint64_t)qword_10170ECF8);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Remove pairing lock was successful.", v24, 2u);
      swift_slowDealloc();
    }

    sub_10000588C((uint64_t *)&unk_1016565A0);
    return CheckedContinuation.resume(returning:)();
  }
  else
  {
    if (qword_1016370D0 != -1) {
      swift_once();
    }
    sub_100010324(v36, (uint64_t)qword_10170ECF8);
    v34(v8, v21, v4);
    uint64_t v26 = Logger.logObject.getter();
    uint64_t v27 = v8;
    os_log_type_t v28 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v26, v28))
    {
      int v29 = (uint8_t *)swift_slowAlloc();
      uint64_t v35 = a2;
      BOOL v30 = v29;
      *(_DWORD *)int v29 = 134217984;
      uint64_t v31 = FMNServerInteractionController.FMNResponseFields.statusCode.getter();
      v20(v27, v4);
      uint64_t v39 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v26, v28, "Remove pairing lock failed. Status code - %ld", v30, 0xCu);
      swift_slowDealloc();
    }
    else
    {
      v20(v27, v4);
    }

    type metadata accessor for SPPairingSessionError(0);
    uint64_t v38 = 1;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_1004B27A4(&qword_101638770, type metadata accessor for SPPairingSessionError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v38 = v39;
    sub_10000588C((uint64_t *)&unk_1016565A0);
    return CheckedContinuation.resume(throwing:)();
  }
}

unint64_t sub_1004A0BC8(uint64_t a1)
{
  if (!*(void *)(a1 + 16))
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }
  sub_10000588C(&qword_1016460A0);
  uint64_t v2 = static _DictionaryStorage.allocate(capacity:)();
  uint64_t v3 = (void *)v2;
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  uint64_t v5 = v2 + 64;
  uint64_t v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_10001D074(v6, (uint64_t)&v15, &qword_1016460A8);
    uint64_t v7 = v15;
    uint64_t v8 = v16;
    unint64_t result = sub_1004A0D00(v15, v16);
    if (v10) {
      break;
    }
    *(void *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    uint64_t v11 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v11 = v7;
    v11[1] = v8;
    unint64_t result = (unint64_t)sub_100173E4C(&v17, (_OWORD *)(v3[7] + 32 * result));
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1004A0D00(uint64_t a1, uint64_t a2)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v4 = Hasher._finalize()();

  return sub_1004A0D78(a1, a2, v4);
}

unint64_t sub_1004A0D78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t i = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    char v10 = (void *)(v9 + 16 * i);
    if ((*v10 != a1 || v10[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      unint64_t i = (i + 1) & v12;
      if ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
      {
        BOOL v13 = (void *)(v9 + 16 * i);
        if ((*v13 != a1 || v13[1] != a2) && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
        {
          for (unint64_t i = (i + 1) & v12; ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v12)
          {
            uint64_t v15 = (void *)(v9 + 16 * i);
            if (*v15 == a1 && v15[1] == a2) {
              break;
            }
            if (_stringCompareWithSmolCheck(_:_:expecting:)()) {
              break;
            }
          }
        }
      }
    }
  }
  return i;
}

uint64_t sub_1004A0EC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v27[0] = a2;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101649E20);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v27 - v13;
  void v28[3] = type metadata accessor for AccessoryIdentityPairingLockCheckEndPoint();
  v28[4] = sub_1004B27A4(&qword_101646128, (void (*)(uint64_t))type metadata accessor for AccessoryIdentityPairingLockCheckEndPoint);
  uint64_t v15 = sub_10001D958(v28);
  sub_1004B050C(a1, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for AccessoryIdentityPairingLockCheckEndPoint);
  uint64_t v16 = qword_101645A30;
  type metadata accessor for FMNAuthenticationProvider();
  swift_allocObject();
  swift_retain();
  *(void *)(a3 + v16) = FMNAuthenticationProvider.init()();
  uint64_t v17 = qword_101645A40;
  if (qword_101636B30 != -1) {
    swift_once();
  }
  *(void *)(a3 + v17) = qword_10170DF18;
  swift_unownedRetain();
  UUID.init()();
  uint64_t v18 = qword_101645A48;
  id v19 = objc_allocWithZone((Class)NSLock);
  *(void *)(a3 + v18) = [v19 init:v27[0]];
  *(unsigned char *)(a3 + qword_101645A50) = 0;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v12, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v8);
  sub_1004B27A4((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v21 = v27[1];
  uint64_t v20 = v27[2];
  uint64_t v22 = *(void (**)(char *, uint64_t))(v9 + 8);
  v22(v12, v8);
  v22(v14, v8);
  if (v20 == v21)
  {
    sub_1003444E0();
    os_log_type_t v23 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_retain();
    dispatch thunk of FMNAuthenticationProvider.autoRenewalLimit.setter();
    swift_release();
  }
  sub_10001D010((uint64_t)v28, a3 + qword_101645A38);
  swift_release();
  uint64_t v24 = type metadata accessor for FMNMockingPreferences();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v7, 1, 1, v24);
  swift_retain();
  uint64_t v25 = FMNServerInteractionController.init(authenticationProvider:mockingPreferences:urlSessionFactory:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v28);
  return v25;
}

uint64_t sub_1004A12D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v27[0] = a2;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101649E20);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v27 - v13;
  void v28[3] = type metadata accessor for AccessoryIdentityPairingLockAckEndPoint();
  v28[4] = sub_1004B27A4(&qword_1016460E8, (void (*)(uint64_t))type metadata accessor for AccessoryIdentityPairingLockAckEndPoint);
  uint64_t v15 = sub_10001D958(v28);
  sub_1004B050C(a1, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for AccessoryIdentityPairingLockAckEndPoint);
  uint64_t v16 = qword_101645A30;
  type metadata accessor for FMNAuthenticationProvider();
  swift_allocObject();
  swift_retain();
  *(void *)(a3 + v16) = FMNAuthenticationProvider.init()();
  uint64_t v17 = qword_101645A40;
  if (qword_101636B30 != -1) {
    swift_once();
  }
  *(void *)(a3 + v17) = qword_10170DF18;
  swift_unownedRetain();
  UUID.init()();
  uint64_t v18 = qword_101645A48;
  id v19 = objc_allocWithZone((Class)NSLock);
  *(void *)(a3 + v18) = [v19 init:v27[0]];
  *(unsigned char *)(a3 + qword_101645A50) = 0;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v12, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v8);
  sub_1004B27A4((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v21 = v27[1];
  uint64_t v20 = v27[2];
  uint64_t v22 = *(void (**)(char *, uint64_t))(v9 + 8);
  v22(v12, v8);
  v22(v14, v8);
  if (v20 == v21)
  {
    sub_1003444E0();
    os_log_type_t v23 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_retain();
    dispatch thunk of FMNAuthenticationProvider.autoRenewalLimit.setter();
    swift_release();
  }
  sub_10001D010((uint64_t)v28, a3 + qword_101645A38);
  swift_release();
  uint64_t v24 = type metadata accessor for FMNMockingPreferences();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v7, 1, 1, v24);
  swift_retain();
  uint64_t v25 = FMNServerInteractionController.init(authenticationProvider:mockingPreferences:urlSessionFactory:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v28);
  return v25;
}

uint64_t sub_1004A16F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v27[0] = a2;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101649E20);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v27 - v13;
  void v28[3] = type metadata accessor for OwnedDeviceFetchEndpoint(0);
  v28[4] = sub_1004B27A4(&qword_101646190, (void (*)(uint64_t))type metadata accessor for OwnedDeviceFetchEndpoint);
  uint64_t v15 = sub_10001D958(v28);
  sub_1004B050C(a1, (uint64_t)v15, type metadata accessor for OwnedDeviceFetchEndpoint);
  uint64_t v16 = qword_101645A30;
  type metadata accessor for FMNAuthenticationProvider();
  swift_allocObject();
  swift_retain();
  *(void *)(a3 + v16) = FMNAuthenticationProvider.init()();
  uint64_t v17 = qword_101645A40;
  if (qword_101636B30 != -1) {
    swift_once();
  }
  *(void *)(a3 + v17) = qword_10170DF18;
  swift_unownedRetain();
  UUID.init()();
  uint64_t v18 = qword_101645A48;
  id v19 = objc_allocWithZone((Class)NSLock);
  *(void *)(a3 + v18) = [v19 init:v27[0]];
  *(unsigned char *)(a3 + qword_101645A50) = 0;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v12, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v8);
  sub_1004B27A4((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v21 = v27[1];
  uint64_t v20 = v27[2];
  uint64_t v22 = *(void (**)(char *, uint64_t))(v9 + 8);
  v22(v12, v8);
  v22(v14, v8);
  if (v20 == v21)
  {
    sub_1003444E0();
    os_log_type_t v23 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_retain();
    dispatch thunk of FMNAuthenticationProvider.autoRenewalLimit.setter();
    swift_release();
  }
  sub_10001D010((uint64_t)v28, a3 + qword_101645A38);
  swift_release();
  uint64_t v24 = type metadata accessor for FMNMockingPreferences();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v7, 1, 1, v24);
  swift_retain();
  uint64_t v25 = FMNServerInteractionController.init(authenticationProvider:mockingPreferences:urlSessionFactory:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v28);
  return v25;
}

uint64_t sub_1004A1B08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v27[0] = a2;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101649E20);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v27 - v13;
  void v28[3] = type metadata accessor for OwnedDeviceSubmitEndpoint(0);
  v28[4] = sub_1004B27A4(&qword_1016462C8, (void (*)(uint64_t))type metadata accessor for OwnedDeviceSubmitEndpoint);
  uint64_t v15 = sub_10001D958(v28);
  sub_1004B050C(a1, (uint64_t)v15, type metadata accessor for OwnedDeviceSubmitEndpoint);
  uint64_t v16 = qword_101645A30;
  type metadata accessor for FMNAuthenticationProvider();
  swift_allocObject();
  swift_retain();
  *(void *)(a3 + v16) = FMNAuthenticationProvider.init()();
  uint64_t v17 = qword_101645A40;
  if (qword_101636B30 != -1) {
    swift_once();
  }
  *(void *)(a3 + v17) = qword_10170DF18;
  swift_unownedRetain();
  UUID.init()();
  uint64_t v18 = qword_101645A48;
  id v19 = objc_allocWithZone((Class)NSLock);
  *(void *)(a3 + v18) = [v19 init:v27[0]];
  *(unsigned char *)(a3 + qword_101645A50) = 0;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v12, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v8);
  sub_1004B27A4((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v21 = v27[1];
  uint64_t v20 = v27[2];
  uint64_t v22 = *(void (**)(char *, uint64_t))(v9 + 8);
  v22(v12, v8);
  v22(v14, v8);
  if (v20 == v21)
  {
    sub_1003444E0();
    os_log_type_t v23 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_retain();
    dispatch thunk of FMNAuthenticationProvider.autoRenewalLimit.setter();
    swift_release();
  }
  sub_10001D010((uint64_t)v28, a3 + qword_101645A38);
  swift_release();
  uint64_t v24 = type metadata accessor for FMNMockingPreferences();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v7, 1, 1, v24);
  swift_retain();
  uint64_t v25 = FMNServerInteractionController.init(authenticationProvider:mockingPreferences:urlSessionFactory:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v28);
  return v25;
}

uint64_t sub_1004A1F20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v27[0] = a2;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101649E20);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v27 - v13;
  void v28[3] = type metadata accessor for AirPodsLEPairingLockCheckEndPoint();
  v28[4] = sub_1004B27A4(&qword_101646360, (void (*)(uint64_t))type metadata accessor for AirPodsLEPairingLockCheckEndPoint);
  uint64_t v15 = sub_10001D958(v28);
  sub_1004B050C(a1, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for AirPodsLEPairingLockCheckEndPoint);
  uint64_t v16 = qword_101645A30;
  type metadata accessor for FMNAuthenticationProvider();
  swift_allocObject();
  swift_retain();
  *(void *)(a3 + v16) = FMNAuthenticationProvider.init()();
  uint64_t v17 = qword_101645A40;
  if (qword_101636B30 != -1) {
    swift_once();
  }
  *(void *)(a3 + v17) = qword_10170DF18;
  swift_unownedRetain();
  UUID.init()();
  uint64_t v18 = qword_101645A48;
  id v19 = objc_allocWithZone((Class)NSLock);
  *(void *)(a3 + v18) = [v19 init:v27[0]];
  *(unsigned char *)(a3 + qword_101645A50) = 0;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v12, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v8);
  sub_1004B27A4((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v21 = v27[1];
  uint64_t v20 = v27[2];
  uint64_t v22 = *(void (**)(char *, uint64_t))(v9 + 8);
  v22(v12, v8);
  v22(v14, v8);
  if (v20 == v21)
  {
    sub_1003444E0();
    os_log_type_t v23 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_retain();
    dispatch thunk of FMNAuthenticationProvider.autoRenewalLimit.setter();
    swift_release();
  }
  sub_10001D010((uint64_t)v28, a3 + qword_101645A38);
  swift_release();
  uint64_t v24 = type metadata accessor for FMNMockingPreferences();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v7, 1, 1, v24);
  swift_retain();
  uint64_t v25 = FMNServerInteractionController.init(authenticationProvider:mockingPreferences:urlSessionFactory:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v28);
  return v25;
}

uint64_t sub_1004A2338(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v27[0] = a2;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101649E20);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v27 - v13;
  void v28[3] = type metadata accessor for AirPodsLEPairingLockAckEndPoint();
  v28[4] = sub_1004B27A4(&qword_101646348, (void (*)(uint64_t))type metadata accessor for AirPodsLEPairingLockAckEndPoint);
  uint64_t v15 = sub_10001D958(v28);
  sub_1004B050C(a1, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for AirPodsLEPairingLockAckEndPoint);
  uint64_t v16 = qword_101645A30;
  type metadata accessor for FMNAuthenticationProvider();
  swift_allocObject();
  swift_retain();
  *(void *)(a3 + v16) = FMNAuthenticationProvider.init()();
  uint64_t v17 = qword_101645A40;
  if (qword_101636B30 != -1) {
    swift_once();
  }
  *(void *)(a3 + v17) = qword_10170DF18;
  swift_unownedRetain();
  UUID.init()();
  uint64_t v18 = qword_101645A48;
  id v19 = objc_allocWithZone((Class)NSLock);
  *(void *)(a3 + v18) = [v19 init:v27[0]];
  *(unsigned char *)(a3 + qword_101645A50) = 0;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v12, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v8);
  sub_1004B27A4((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v21 = v27[1];
  uint64_t v20 = v27[2];
  uint64_t v22 = *(void (**)(char *, uint64_t))(v9 + 8);
  v22(v12, v8);
  v22(v14, v8);
  if (v20 == v21)
  {
    sub_1003444E0();
    os_log_type_t v23 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_retain();
    dispatch thunk of FMNAuthenticationProvider.autoRenewalLimit.setter();
    swift_release();
  }
  sub_10001D010((uint64_t)v28, a3 + qword_101645A38);
  swift_release();
  uint64_t v24 = type metadata accessor for FMNMockingPreferences();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v7, 1, 1, v24);
  swift_retain();
  uint64_t v25 = FMNServerInteractionController.init(authenticationProvider:mockingPreferences:urlSessionFactory:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v28);
  return v25;
}

uint64_t sub_1004A2750(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v27[0] = a2;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101649E20);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v27 - v13;
  void v28[3] = type metadata accessor for NFCTapEndPoint();
  v28[4] = sub_1004B27A4(&qword_1016461D8, (void (*)(uint64_t))type metadata accessor for NFCTapEndPoint);
  uint64_t v15 = sub_10001D958(v28);
  sub_1004B050C(a1, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for NFCTapEndPoint);
  uint64_t v16 = qword_101645A30;
  type metadata accessor for FMNAuthenticationProvider();
  swift_allocObject();
  swift_retain();
  *(void *)(a3 + v16) = FMNAuthenticationProvider.init()();
  uint64_t v17 = qword_101645A40;
  if (qword_101636B30 != -1) {
    swift_once();
  }
  *(void *)(a3 + v17) = qword_10170DF18;
  swift_unownedRetain();
  UUID.init()();
  uint64_t v18 = qword_101645A48;
  id v19 = objc_allocWithZone((Class)NSLock);
  *(void *)(a3 + v18) = [v19 init:v27[0]];
  *(unsigned char *)(a3 + qword_101645A50) = 0;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v12, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v8);
  sub_1004B27A4((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v21 = v27[1];
  uint64_t v20 = v27[2];
  uint64_t v22 = *(void (**)(char *, uint64_t))(v9 + 8);
  v22(v12, v8);
  v22(v14, v8);
  if (v20 == v21)
  {
    sub_1003444E0();
    os_log_type_t v23 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_retain();
    dispatch thunk of FMNAuthenticationProvider.autoRenewalLimit.setter();
    swift_release();
  }
  sub_10001D010((uint64_t)v28, a3 + qword_101645A38);
  swift_release();
  uint64_t v24 = type metadata accessor for FMNMockingPreferences();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v7, 1, 1, v24);
  swift_retain();
  uint64_t v25 = FMNServerInteractionController.init(authenticationProvider:mockingPreferences:urlSessionFactory:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v28);
  return v25;
}

uint64_t sub_1004A2B68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v27[0] = a2;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101649E20);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v27 - v13;
  void v28[3] = type metadata accessor for NotifyMeEndpoint();
  v28[4] = sub_1004B27A4(&qword_101646330, (void (*)(uint64_t))type metadata accessor for NotifyMeEndpoint);
  uint64_t v15 = sub_10001D958(v28);
  sub_1004B050C(a1, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for NotifyMeEndpoint);
  uint64_t v16 = qword_101645A30;
  type metadata accessor for FMNAuthenticationProvider();
  swift_allocObject();
  swift_retain();
  *(void *)(a3 + v16) = FMNAuthenticationProvider.init()();
  uint64_t v17 = qword_101645A40;
  if (qword_101636B30 != -1) {
    swift_once();
  }
  *(void *)(a3 + v17) = qword_10170DF18;
  swift_unownedRetain();
  UUID.init()();
  uint64_t v18 = qword_101645A48;
  id v19 = objc_allocWithZone((Class)NSLock);
  *(void *)(a3 + v18) = [v19 init:v27[0]];
  *(unsigned char *)(a3 + qword_101645A50) = 0;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v12, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v8);
  sub_1004B27A4((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v21 = v27[1];
  uint64_t v20 = v27[2];
  uint64_t v22 = *(void (**)(char *, uint64_t))(v9 + 8);
  v22(v12, v8);
  v22(v14, v8);
  if (v20 == v21)
  {
    sub_1003444E0();
    os_log_type_t v23 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_retain();
    dispatch thunk of FMNAuthenticationProvider.autoRenewalLimit.setter();
    swift_release();
  }
  sub_10001D010((uint64_t)v28, a3 + qword_101645A38);
  swift_release();
  uint64_t v24 = type metadata accessor for FMNMockingPreferences();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v7, 1, 1, v24);
  swift_retain();
  uint64_t v25 = FMNServerInteractionController.init(authenticationProvider:mockingPreferences:urlSessionFactory:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v28);
  return v25;
}

uint64_t sub_1004A2F80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v27[0] = a2;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101649E20);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v27 - v13;
  void v28[3] = type metadata accessor for AccessoryInfoEndPoint();
  v28[4] = sub_1004B27A4(&qword_101646140, (void (*)(uint64_t))type metadata accessor for AccessoryInfoEndPoint);
  uint64_t v15 = sub_10001D958(v28);
  sub_1004B050C(a1, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for AccessoryInfoEndPoint);
  uint64_t v16 = qword_101645A30;
  type metadata accessor for FMNAuthenticationProvider();
  swift_allocObject();
  swift_retain();
  *(void *)(a3 + v16) = FMNAuthenticationProvider.init()();
  uint64_t v17 = qword_101645A40;
  if (qword_101636B30 != -1) {
    swift_once();
  }
  *(void *)(a3 + v17) = qword_10170DF18;
  swift_unownedRetain();
  UUID.init()();
  uint64_t v18 = qword_101645A48;
  id v19 = objc_allocWithZone((Class)NSLock);
  *(void *)(a3 + v18) = [v19 init:v27[0]];
  *(unsigned char *)(a3 + qword_101645A50) = 0;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v12, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v8);
  sub_1004B27A4((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v21 = v27[1];
  uint64_t v20 = v27[2];
  uint64_t v22 = *(void (**)(char *, uint64_t))(v9 + 8);
  v22(v12, v8);
  v22(v14, v8);
  if (v20 == v21)
  {
    sub_1003444E0();
    os_log_type_t v23 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_retain();
    dispatch thunk of FMNAuthenticationProvider.autoRenewalLimit.setter();
    swift_release();
  }
  sub_10001D010((uint64_t)v28, a3 + qword_101645A38);
  swift_release();
  uint64_t v24 = type metadata accessor for FMNMockingPreferences();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v7, 1, 1, v24);
  swift_retain();
  uint64_t v25 = FMNServerInteractionController.init(authenticationProvider:mockingPreferences:urlSessionFactory:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v28);
  return v25;
}

uint64_t sub_1004A3398(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v27[0] = a2;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101649E20);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v27 - v13;
  void v28[3] = type metadata accessor for UnpairEndPoint();
  v28[4] = sub_1004B27A4(&qword_101646170, (void (*)(uint64_t))type metadata accessor for UnpairEndPoint);
  uint64_t v15 = sub_10001D958(v28);
  sub_1004B050C(a1, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for UnpairEndPoint);
  uint64_t v16 = qword_101645A30;
  type metadata accessor for FMNAuthenticationProvider();
  swift_allocObject();
  swift_retain();
  *(void *)(a3 + v16) = FMNAuthenticationProvider.init()();
  uint64_t v17 = qword_101645A40;
  if (qword_101636B30 != -1) {
    swift_once();
  }
  *(void *)(a3 + v17) = qword_10170DF18;
  swift_unownedRetain();
  UUID.init()();
  uint64_t v18 = qword_101645A48;
  id v19 = objc_allocWithZone((Class)NSLock);
  *(void *)(a3 + v18) = [v19 init:v27[0]];
  *(unsigned char *)(a3 + qword_101645A50) = 0;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v12, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v8);
  sub_1004B27A4((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v21 = v27[1];
  uint64_t v20 = v27[2];
  uint64_t v22 = *(void (**)(char *, uint64_t))(v9 + 8);
  v22(v12, v8);
  v22(v14, v8);
  if (v20 == v21)
  {
    sub_1003444E0();
    os_log_type_t v23 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_retain();
    dispatch thunk of FMNAuthenticationProvider.autoRenewalLimit.setter();
    swift_release();
  }
  sub_10001D010((uint64_t)v28, a3 + qword_101645A38);
  swift_release();
  uint64_t v24 = type metadata accessor for FMNMockingPreferences();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v7, 1, 1, v24);
  swift_retain();
  uint64_t v25 = FMNServerInteractionController.init(authenticationProvider:mockingPreferences:urlSessionFactory:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v28);
  return v25;
}

uint64_t sub_1004A37B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v27[0] = a2;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101649E20);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v27 - v13;
  void v28[3] = type metadata accessor for PairingLockCheckEndPoint();
  v28[4] = sub_1004B27A4(&qword_1016462C0, (void (*)(uint64_t))type metadata accessor for PairingLockCheckEndPoint);
  uint64_t v15 = sub_10001D958(v28);
  sub_1004B050C(a1, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for PairingLockCheckEndPoint);
  uint64_t v16 = qword_101645A30;
  type metadata accessor for FMNAuthenticationProvider();
  swift_allocObject();
  swift_retain();
  *(void *)(a3 + v16) = FMNAuthenticationProvider.init()();
  uint64_t v17 = qword_101645A40;
  if (qword_101636B30 != -1) {
    swift_once();
  }
  *(void *)(a3 + v17) = qword_10170DF18;
  swift_unownedRetain();
  UUID.init()();
  uint64_t v18 = qword_101645A48;
  id v19 = objc_allocWithZone((Class)NSLock);
  *(void *)(a3 + v18) = [v19 init:v27[0]];
  *(unsigned char *)(a3 + qword_101645A50) = 0;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v12, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v8);
  sub_1004B27A4((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v21 = v27[1];
  uint64_t v20 = v27[2];
  uint64_t v22 = *(void (**)(char *, uint64_t))(v9 + 8);
  v22(v12, v8);
  v22(v14, v8);
  if (v20 == v21)
  {
    sub_1003444E0();
    os_log_type_t v23 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_retain();
    dispatch thunk of FMNAuthenticationProvider.autoRenewalLimit.setter();
    swift_release();
  }
  sub_10001D010((uint64_t)v28, a3 + qword_101645A38);
  swift_release();
  uint64_t v24 = type metadata accessor for FMNMockingPreferences();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v7, 1, 1, v24);
  swift_retain();
  uint64_t v25 = FMNServerInteractionController.init(authenticationProvider:mockingPreferences:urlSessionFactory:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v28);
  return v25;
}

uint64_t sub_1004A3BC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v27[0] = a2;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101649E20);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v27 - v13;
  void v28[3] = type metadata accessor for AccessoryUnpairEndpoint();
  v28[4] = sub_1004B27A4(&qword_101646310, (void (*)(uint64_t))type metadata accessor for AccessoryUnpairEndpoint);
  uint64_t v15 = sub_10001D958(v28);
  sub_1004B050C(a1, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for AccessoryUnpairEndpoint);
  uint64_t v16 = qword_101645A30;
  type metadata accessor for FMNAuthenticationProvider();
  swift_allocObject();
  swift_retain();
  *(void *)(a3 + v16) = FMNAuthenticationProvider.init()();
  uint64_t v17 = qword_101645A40;
  if (qword_101636B30 != -1) {
    swift_once();
  }
  *(void *)(a3 + v17) = qword_10170DF18;
  swift_unownedRetain();
  UUID.init()();
  uint64_t v18 = qword_101645A48;
  id v19 = objc_allocWithZone((Class)NSLock);
  *(void *)(a3 + v18) = [v19 init:v27[0]];
  *(unsigned char *)(a3 + qword_101645A50) = 0;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v12, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v8);
  sub_1004B27A4((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v21 = v27[1];
  uint64_t v20 = v27[2];
  uint64_t v22 = *(void (**)(char *, uint64_t))(v9 + 8);
  v22(v12, v8);
  v22(v14, v8);
  if (v20 == v21)
  {
    sub_1003444E0();
    os_log_type_t v23 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_retain();
    dispatch thunk of FMNAuthenticationProvider.autoRenewalLimit.setter();
    swift_release();
  }
  sub_10001D010((uint64_t)v28, a3 + qword_101645A38);
  swift_release();
  uint64_t v24 = type metadata accessor for FMNMockingPreferences();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v7, 1, 1, v24);
  swift_retain();
  uint64_t v25 = FMNServerInteractionController.init(authenticationProvider:mockingPreferences:urlSessionFactory:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v28);
  return v25;
}

uint64_t sub_1004A3FE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v27[0] = a2;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101649E20);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v27 - v13;
  void v28[3] = type metadata accessor for AirPodsUnpairEndPoint();
  v28[4] = sub_1004B27A4(&qword_101646188, (void (*)(uint64_t))type metadata accessor for AirPodsUnpairEndPoint);
  uint64_t v15 = sub_10001D958(v28);
  sub_1004B050C(a1, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for AirPodsUnpairEndPoint);
  uint64_t v16 = qword_101645A30;
  type metadata accessor for FMNAuthenticationProvider();
  swift_allocObject();
  swift_retain();
  *(void *)(a3 + v16) = FMNAuthenticationProvider.init()();
  uint64_t v17 = qword_101645A40;
  if (qword_101636B30 != -1) {
    swift_once();
  }
  *(void *)(a3 + v17) = qword_10170DF18;
  swift_unownedRetain();
  UUID.init()();
  uint64_t v18 = qword_101645A48;
  id v19 = objc_allocWithZone((Class)NSLock);
  *(void *)(a3 + v18) = [v19 init:v27[0]];
  *(unsigned char *)(a3 + qword_101645A50) = 0;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v12, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v8);
  sub_1004B27A4((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v21 = v27[1];
  uint64_t v20 = v27[2];
  uint64_t v22 = *(void (**)(char *, uint64_t))(v9 + 8);
  v22(v12, v8);
  v22(v14, v8);
  if (v20 == v21)
  {
    sub_1003444E0();
    os_log_type_t v23 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_retain();
    dispatch thunk of FMNAuthenticationProvider.autoRenewalLimit.setter();
    swift_release();
  }
  sub_10001D010((uint64_t)v28, a3 + qword_101645A38);
  swift_release();
  uint64_t v24 = type metadata accessor for FMNMockingPreferences();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v7, 1, 1, v24);
  swift_retain();
  uint64_t v25 = FMNServerInteractionController.init(authenticationProvider:mockingPreferences:urlSessionFactory:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v28);
  return v25;
}

uint64_t sub_1004A43F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v27[0] = a2;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101649E20);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v27 - v13;
  void v28[3] = type metadata accessor for AccessoryPairingLockCheckEndPoint();
  v28[4] = sub_1004B27A4(&qword_101646328, (void (*)(uint64_t))type metadata accessor for AccessoryPairingLockCheckEndPoint);
  uint64_t v15 = sub_10001D958(v28);
  sub_1004B050C(a1, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for AccessoryPairingLockCheckEndPoint);
  uint64_t v16 = qword_101645A30;
  type metadata accessor for FMNAuthenticationProvider();
  swift_allocObject();
  swift_retain();
  *(void *)(a3 + v16) = FMNAuthenticationProvider.init()();
  uint64_t v17 = qword_101645A40;
  if (qword_101636B30 != -1) {
    swift_once();
  }
  *(void *)(a3 + v17) = qword_10170DF18;
  swift_unownedRetain();
  UUID.init()();
  uint64_t v18 = qword_101645A48;
  id v19 = objc_allocWithZone((Class)NSLock);
  *(void *)(a3 + v18) = [v19 init:v27[0]];
  *(unsigned char *)(a3 + qword_101645A50) = 0;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v12, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v8);
  sub_1004B27A4((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v21 = v27[1];
  uint64_t v20 = v27[2];
  uint64_t v22 = *(void (**)(char *, uint64_t))(v9 + 8);
  v22(v12, v8);
  v22(v14, v8);
  if (v20 == v21)
  {
    sub_1003444E0();
    os_log_type_t v23 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_retain();
    dispatch thunk of FMNAuthenticationProvider.autoRenewalLimit.setter();
    swift_release();
  }
  sub_10001D010((uint64_t)v28, a3 + qword_101645A38);
  swift_release();
  uint64_t v24 = type metadata accessor for FMNMockingPreferences();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v7, 1, 1, v24);
  swift_retain();
  uint64_t v25 = FMNServerInteractionController.init(authenticationProvider:mockingPreferences:urlSessionFactory:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v28);
  return v25;
}

uint64_t sub_1004A4810(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v27[0] = a2;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101649E20);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v27 - v13;
  void v28[3] = type metadata accessor for AccessoryPairingLockAckEndpoint();
  v28[4] = sub_1004B27A4(&qword_1016462F8, (void (*)(uint64_t))type metadata accessor for AccessoryPairingLockAckEndpoint);
  uint64_t v15 = sub_10001D958(v28);
  sub_1004B050C(a1, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for AccessoryPairingLockAckEndpoint);
  uint64_t v16 = qword_101645A30;
  type metadata accessor for FMNAuthenticationProvider();
  swift_allocObject();
  swift_retain();
  *(void *)(a3 + v16) = FMNAuthenticationProvider.init()();
  uint64_t v17 = qword_101645A40;
  if (qword_101636B30 != -1) {
    swift_once();
  }
  *(void *)(a3 + v17) = qword_10170DF18;
  swift_unownedRetain();
  UUID.init()();
  uint64_t v18 = qword_101645A48;
  id v19 = objc_allocWithZone((Class)NSLock);
  *(void *)(a3 + v18) = [v19 init:v27[0]];
  *(unsigned char *)(a3 + qword_101645A50) = 0;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v12, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v8);
  sub_1004B27A4((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v21 = v27[1];
  uint64_t v20 = v27[2];
  uint64_t v22 = *(void (**)(char *, uint64_t))(v9 + 8);
  v22(v12, v8);
  v22(v14, v8);
  if (v20 == v21)
  {
    sub_1003444E0();
    os_log_type_t v23 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_retain();
    dispatch thunk of FMNAuthenticationProvider.autoRenewalLimit.setter();
    swift_release();
  }
  sub_10001D010((uint64_t)v28, a3 + qword_101645A38);
  swift_release();
  uint64_t v24 = type metadata accessor for FMNMockingPreferences();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v7, 1, 1, v24);
  swift_retain();
  uint64_t v25 = FMNServerInteractionController.init(authenticationProvider:mockingPreferences:urlSessionFactory:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v28);
  return v25;
}

uint64_t sub_1004A4C28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v27[0] = a2;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101649E20);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v27 - v13;
  void v28[3] = type metadata accessor for FetchEndpoint();
  v28[4] = sub_1004B27A4(&qword_101646218, (void (*)(uint64_t))type metadata accessor for FetchEndpoint);
  uint64_t v15 = sub_10001D958(v28);
  sub_1004B050C(a1, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for FetchEndpoint);
  uint64_t v16 = qword_101645A30;
  type metadata accessor for FMNAuthenticationProvider();
  swift_allocObject();
  swift_retain();
  *(void *)(a3 + v16) = FMNAuthenticationProvider.init()();
  uint64_t v17 = qword_101645A40;
  if (qword_101636B30 != -1) {
    swift_once();
  }
  *(void *)(a3 + v17) = qword_10170DF18;
  swift_unownedRetain();
  UUID.init()();
  uint64_t v18 = qword_101645A48;
  id v19 = objc_allocWithZone((Class)NSLock);
  *(void *)(a3 + v18) = [v19 init:v27[0]];
  *(unsigned char *)(a3 + qword_101645A50) = 0;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v12, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v8);
  sub_1004B27A4((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v21 = v27[1];
  uint64_t v20 = v27[2];
  uint64_t v22 = *(void (**)(char *, uint64_t))(v9 + 8);
  v22(v12, v8);
  v22(v14, v8);
  if (v20 == v21)
  {
    sub_1003444E0();
    os_log_type_t v23 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_retain();
    dispatch thunk of FMNAuthenticationProvider.autoRenewalLimit.setter();
    swift_release();
  }
  sub_10001D010((uint64_t)v28, a3 + qword_101645A38);
  swift_release();
  uint64_t v24 = type metadata accessor for FMNMockingPreferences();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v7, 1, 1, v24);
  swift_retain();
  uint64_t v25 = FMNServerInteractionController.init(authenticationProvider:mockingPreferences:urlSessionFactory:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v28);
  return v25;
}

uint64_t sub_1004A5040(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v27[0] = a2;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101649E20);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v27 - v13;
  void v28[3] = type metadata accessor for PencilUnpairEndPoint();
  v28[4] = sub_1004B27A4(&qword_101646098, (void (*)(uint64_t))type metadata accessor for PencilUnpairEndPoint);
  uint64_t v15 = sub_10001D958(v28);
  sub_1004B050C(a1, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for PencilUnpairEndPoint);
  uint64_t v16 = qword_101645A30;
  type metadata accessor for FMNAuthenticationProvider();
  swift_allocObject();
  swift_retain();
  *(void *)(a3 + v16) = FMNAuthenticationProvider.init()();
  uint64_t v17 = qword_101645A40;
  if (qword_101636B30 != -1) {
    swift_once();
  }
  *(void *)(a3 + v17) = qword_10170DF18;
  swift_unownedRetain();
  UUID.init()();
  uint64_t v18 = qword_101645A48;
  id v19 = objc_allocWithZone((Class)NSLock);
  *(void *)(a3 + v18) = [v19 init:v27[0]];
  *(unsigned char *)(a3 + qword_101645A50) = 0;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v12, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v8);
  sub_1004B27A4((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v21 = v27[1];
  uint64_t v20 = v27[2];
  uint64_t v22 = *(void (**)(char *, uint64_t))(v9 + 8);
  v22(v12, v8);
  v22(v14, v8);
  if (v20 == v21)
  {
    sub_1003444E0();
    os_log_type_t v23 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_retain();
    dispatch thunk of FMNAuthenticationProvider.autoRenewalLimit.setter();
    swift_release();
  }
  sub_10001D010((uint64_t)v28, a3 + qword_101645A38);
  swift_release();
  uint64_t v24 = type metadata accessor for FMNMockingPreferences();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v7, 1, 1, v24);
  swift_retain();
  uint64_t v25 = FMNServerInteractionController.init(authenticationProvider:mockingPreferences:urlSessionFactory:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v28);
  return v25;
}

uint64_t sub_1004A5458(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v27[0] = a2;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101649E20);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v27 - v13;
  void v28[3] = type metadata accessor for SecureLocationsConfigEndpoint();
  v28[4] = sub_1004B27A4(&qword_101646230, (void (*)(uint64_t))type metadata accessor for SecureLocationsConfigEndpoint);
  uint64_t v15 = sub_10001D958(v28);
  sub_1004B050C(a1, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for SecureLocationsConfigEndpoint);
  uint64_t v16 = qword_101645A30;
  type metadata accessor for FMNAuthenticationProvider();
  swift_allocObject();
  swift_retain();
  *(void *)(a3 + v16) = FMNAuthenticationProvider.init()();
  uint64_t v17 = qword_101645A40;
  if (qword_101636B30 != -1) {
    swift_once();
  }
  *(void *)(a3 + v17) = qword_10170DF18;
  swift_unownedRetain();
  UUID.init()();
  uint64_t v18 = qword_101645A48;
  id v19 = objc_allocWithZone((Class)NSLock);
  *(void *)(a3 + v18) = [v19 init:v27[0]];
  *(unsigned char *)(a3 + qword_101645A50) = 0;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v12, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v8);
  sub_1004B27A4((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v21 = v27[1];
  uint64_t v20 = v27[2];
  uint64_t v22 = *(void (**)(char *, uint64_t))(v9 + 8);
  v22(v12, v8);
  v22(v14, v8);
  if (v20 == v21)
  {
    sub_1003444E0();
    os_log_type_t v23 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_retain();
    dispatch thunk of FMNAuthenticationProvider.autoRenewalLimit.setter();
    swift_release();
  }
  sub_10001D010((uint64_t)v28, a3 + qword_101645A38);
  swift_release();
  uint64_t v24 = type metadata accessor for FMNMockingPreferences();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v7, 1, 1, v24);
  swift_retain();
  uint64_t v25 = FMNServerInteractionController.init(authenticationProvider:mockingPreferences:urlSessionFactory:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v28);
  return v25;
}

uint64_t sub_1004A5870(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v27[0] = a2;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101649E20);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v27 - v13;
  void v28[3] = type metadata accessor for SecureLocationsFetchEndpoint(0);
  v28[4] = sub_1004B27A4(&qword_101646248, (void (*)(uint64_t))type metadata accessor for SecureLocationsFetchEndpoint);
  uint64_t v15 = sub_10001D958(v28);
  sub_1004B050C(a1, (uint64_t)v15, type metadata accessor for SecureLocationsFetchEndpoint);
  uint64_t v16 = qword_101645A30;
  type metadata accessor for FMNAuthenticationProvider();
  swift_allocObject();
  swift_retain();
  *(void *)(a3 + v16) = FMNAuthenticationProvider.init()();
  uint64_t v17 = qword_101645A40;
  if (qword_101636B30 != -1) {
    swift_once();
  }
  *(void *)(a3 + v17) = qword_10170DF18;
  swift_unownedRetain();
  UUID.init()();
  uint64_t v18 = qword_101645A48;
  id v19 = objc_allocWithZone((Class)NSLock);
  *(void *)(a3 + v18) = [v19 init:v27[0]];
  *(unsigned char *)(a3 + qword_101645A50) = 0;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v12, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v8);
  sub_1004B27A4((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v21 = v27[1];
  uint64_t v20 = v27[2];
  uint64_t v22 = *(void (**)(char *, uint64_t))(v9 + 8);
  v22(v12, v8);
  v22(v14, v8);
  if (v20 == v21)
  {
    sub_1003444E0();
    os_log_type_t v23 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_retain();
    dispatch thunk of FMNAuthenticationProvider.autoRenewalLimit.setter();
    swift_release();
  }
  sub_10001D010((uint64_t)v28, a3 + qword_101645A38);
  swift_release();
  uint64_t v24 = type metadata accessor for FMNMockingPreferences();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v7, 1, 1, v24);
  swift_retain();
  uint64_t v25 = FMNServerInteractionController.init(authenticationProvider:mockingPreferences:urlSessionFactory:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v28);
  return v25;
}

uint64_t sub_1004A5C88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v27[0] = a2;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101649E20);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v27 - v13;
  void v28[3] = type metadata accessor for SecureLocationsLabelledLocationsEndpoint();
  v28[4] = sub_1004B27A4(&qword_101646278, (void (*)(uint64_t))type metadata accessor for SecureLocationsLabelledLocationsEndpoint);
  uint64_t v15 = sub_10001D958(v28);
  sub_1004B050C(a1, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for SecureLocationsLabelledLocationsEndpoint);
  uint64_t v16 = qword_101645A30;
  type metadata accessor for FMNAuthenticationProvider();
  swift_allocObject();
  swift_retain();
  *(void *)(a3 + v16) = FMNAuthenticationProvider.init()();
  uint64_t v17 = qword_101645A40;
  if (qword_101636B30 != -1) {
    swift_once();
  }
  *(void *)(a3 + v17) = qword_10170DF18;
  swift_unownedRetain();
  UUID.init()();
  uint64_t v18 = qword_101645A48;
  id v19 = objc_allocWithZone((Class)NSLock);
  *(void *)(a3 + v18) = [v19 init:v27[0]];
  *(unsigned char *)(a3 + qword_101645A50) = 0;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v12, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v8);
  sub_1004B27A4((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v21 = v27[1];
  uint64_t v20 = v27[2];
  uint64_t v22 = *(void (**)(char *, uint64_t))(v9 + 8);
  v22(v12, v8);
  v22(v14, v8);
  if (v20 == v21)
  {
    sub_1003444E0();
    os_log_type_t v23 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_retain();
    dispatch thunk of FMNAuthenticationProvider.autoRenewalLimit.setter();
    swift_release();
  }
  sub_10001D010((uint64_t)v28, a3 + qword_101645A38);
  swift_release();
  uint64_t v24 = type metadata accessor for FMNMockingPreferences();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v7, 1, 1, v24);
  swift_retain();
  uint64_t v25 = FMNServerInteractionController.init(authenticationProvider:mockingPreferences:urlSessionFactory:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v28);
  return v25;
}

uint64_t sub_1004A60A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v27[0] = a2;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101649E20);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v27 - v13;
  void v28[3] = type metadata accessor for SecureLocationsSubmitEndpoint(0);
  v28[4] = sub_1004B27A4(&qword_101646290, (void (*)(uint64_t))type metadata accessor for SecureLocationsSubmitEndpoint);
  uint64_t v15 = sub_10001D958(v28);
  sub_1004B050C(a1, (uint64_t)v15, type metadata accessor for SecureLocationsSubmitEndpoint);
  uint64_t v16 = qword_101645A30;
  type metadata accessor for FMNAuthenticationProvider();
  swift_allocObject();
  swift_retain();
  *(void *)(a3 + v16) = FMNAuthenticationProvider.init()();
  uint64_t v17 = qword_101645A40;
  if (qword_101636B30 != -1) {
    swift_once();
  }
  *(void *)(a3 + v17) = qword_10170DF18;
  swift_unownedRetain();
  UUID.init()();
  uint64_t v18 = qword_101645A48;
  id v19 = objc_allocWithZone((Class)NSLock);
  *(void *)(a3 + v18) = [v19 init:v27[0]];
  *(unsigned char *)(a3 + qword_101645A50) = 0;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v12, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v8);
  sub_1004B27A4((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v21 = v27[1];
  uint64_t v20 = v27[2];
  uint64_t v22 = *(void (**)(char *, uint64_t))(v9 + 8);
  v22(v12, v8);
  v22(v14, v8);
  if (v20 == v21)
  {
    sub_1003444E0();
    os_log_type_t v23 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_retain();
    dispatch thunk of FMNAuthenticationProvider.autoRenewalLimit.setter();
    swift_release();
  }
  sub_10001D010((uint64_t)v28, a3 + qword_101645A38);
  swift_release();
  uint64_t v24 = type metadata accessor for FMNMockingPreferences();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v7, 1, 1, v24);
  swift_retain();
  uint64_t v25 = FMNServerInteractionController.init(authenticationProvider:mockingPreferences:urlSessionFactory:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v28);
  return v25;
}

uint64_t sub_1004A64B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v27[0] = a2;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101649E20);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v27 - v13;
  void v28[3] = type metadata accessor for SecureLocationsUnsubscribeEndpoint();
  v28[4] = sub_1004B27A4(&qword_1016462E0, (void (*)(uint64_t))type metadata accessor for SecureLocationsUnsubscribeEndpoint);
  uint64_t v15 = sub_10001D958(v28);
  sub_1004B050C(a1, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for SecureLocationsUnsubscribeEndpoint);
  uint64_t v16 = qword_101645A30;
  type metadata accessor for FMNAuthenticationProvider();
  swift_allocObject();
  swift_retain();
  *(void *)(a3 + v16) = FMNAuthenticationProvider.init()();
  uint64_t v17 = qword_101645A40;
  if (qword_101636B30 != -1) {
    swift_once();
  }
  *(void *)(a3 + v17) = qword_10170DF18;
  swift_unownedRetain();
  UUID.init()();
  uint64_t v18 = qword_101645A48;
  id v19 = objc_allocWithZone((Class)NSLock);
  *(void *)(a3 + v18) = [v19 init:v27[0]];
  *(unsigned char *)(a3 + qword_101645A50) = 0;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v12, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v8);
  sub_1004B27A4((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v21 = v27[1];
  uint64_t v20 = v27[2];
  uint64_t v22 = *(void (**)(char *, uint64_t))(v9 + 8);
  v22(v12, v8);
  v22(v14, v8);
  if (v20 == v21)
  {
    sub_1003444E0();
    os_log_type_t v23 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_retain();
    dispatch thunk of FMNAuthenticationProvider.autoRenewalLimit.setter();
    swift_release();
  }
  sub_10001D010((uint64_t)v28, a3 + qword_101645A38);
  swift_release();
  uint64_t v24 = type metadata accessor for FMNMockingPreferences();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v7, 1, 1, v24);
  swift_retain();
  uint64_t v25 = FMNServerInteractionController.init(authenticationProvider:mockingPreferences:urlSessionFactory:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v28);
  return v25;
}

uint64_t sub_1004A68D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v27[0] = a2;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101649E20);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v27 - v13;
  void v28[3] = type metadata accessor for SecureLocationsPushAckEndpoint();
  v28[4] = sub_1004B27A4(&qword_101646260, (void (*)(uint64_t))type metadata accessor for SecureLocationsPushAckEndpoint);
  uint64_t v15 = sub_10001D958(v28);
  sub_1004B050C(a1, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for SecureLocationsPushAckEndpoint);
  uint64_t v16 = qword_101645A30;
  type metadata accessor for FMNAuthenticationProvider();
  swift_allocObject();
  swift_retain();
  *(void *)(a3 + v16) = FMNAuthenticationProvider.init()();
  uint64_t v17 = qword_101645A40;
  if (qword_101636B30 != -1) {
    swift_once();
  }
  *(void *)(a3 + v17) = qword_10170DF18;
  swift_unownedRetain();
  UUID.init()();
  uint64_t v18 = qword_101645A48;
  id v19 = objc_allocWithZone((Class)NSLock);
  *(void *)(a3 + v18) = [v19 init:v27[0]];
  *(unsigned char *)(a3 + qword_101645A50) = 0;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v12, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v8);
  sub_1004B27A4((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v21 = v27[1];
  uint64_t v20 = v27[2];
  uint64_t v22 = *(void (**)(char *, uint64_t))(v9 + 8);
  v22(v12, v8);
  v22(v14, v8);
  if (v20 == v21)
  {
    sub_1003444E0();
    os_log_type_t v23 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_retain();
    dispatch thunk of FMNAuthenticationProvider.autoRenewalLimit.setter();
    swift_release();
  }
  sub_10001D010((uint64_t)v28, a3 + qword_101645A38);
  swift_release();
  uint64_t v24 = type metadata accessor for FMNMockingPreferences();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v7, 1, 1, v24);
  swift_retain();
  uint64_t v25 = FMNServerInteractionController.init(authenticationProvider:mockingPreferences:urlSessionFactory:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v28);
  return v25;
}

uint64_t sub_1004A6CE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v27[0] = a2;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101649E20);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v27 - v13;
  void v28[3] = type metadata accessor for SubmitEndpoint();
  v28[4] = sub_1004B27A4(&qword_1016462A8, (void (*)(uint64_t))type metadata accessor for SubmitEndpoint);
  uint64_t v15 = sub_10001D958(v28);
  sub_1004B050C(a1, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for SubmitEndpoint);
  uint64_t v16 = qword_101645A30;
  type metadata accessor for FMNAuthenticationProvider();
  swift_allocObject();
  swift_retain();
  *(void *)(a3 + v16) = FMNAuthenticationProvider.init()();
  uint64_t v17 = qword_101645A40;
  if (qword_101636B30 != -1) {
    swift_once();
  }
  *(void *)(a3 + v17) = qword_10170DF18;
  swift_unownedRetain();
  UUID.init()();
  uint64_t v18 = qword_101645A48;
  id v19 = objc_allocWithZone((Class)NSLock);
  *(void *)(a3 + v18) = [v19 init:v27[0]];
  *(unsigned char *)(a3 + qword_101645A50) = 0;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v12, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v8);
  sub_1004B27A4((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v21 = v27[1];
  uint64_t v20 = v27[2];
  uint64_t v22 = *(void (**)(char *, uint64_t))(v9 + 8);
  v22(v12, v8);
  v22(v14, v8);
  if (v20 == v21)
  {
    sub_1003444E0();
    os_log_type_t v23 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_retain();
    dispatch thunk of FMNAuthenticationProvider.autoRenewalLimit.setter();
    swift_release();
  }
  sub_10001D010((uint64_t)v28, a3 + qword_101645A38);
  swift_release();
  uint64_t v24 = type metadata accessor for FMNMockingPreferences();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v7, 1, 1, v24);
  swift_retain();
  uint64_t v25 = FMNServerInteractionController.init(authenticationProvider:mockingPreferences:urlSessionFactory:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v28);
  return v25;
}

uint64_t sub_1004A7100(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v27[0] = a2;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101649E20);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v27 - v13;
  void v28[3] = type metadata accessor for PairingLockAckEndPoint();
  v28[4] = sub_1004B27A4(&qword_1016461C0, (void (*)(uint64_t))type metadata accessor for PairingLockAckEndPoint);
  uint64_t v15 = sub_10001D958(v28);
  sub_1004B050C(a1, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for PairingLockAckEndPoint);
  uint64_t v16 = qword_101645A30;
  type metadata accessor for FMNAuthenticationProvider();
  swift_allocObject();
  swift_retain();
  *(void *)(a3 + v16) = FMNAuthenticationProvider.init()();
  uint64_t v17 = qword_101645A40;
  if (qword_101636B30 != -1) {
    swift_once();
  }
  *(void *)(a3 + v17) = qword_10170DF18;
  swift_unownedRetain();
  UUID.init()();
  uint64_t v18 = qword_101645A48;
  id v19 = objc_allocWithZone((Class)NSLock);
  *(void *)(a3 + v18) = [v19 init:v27[0]];
  *(unsigned char *)(a3 + qword_101645A50) = 0;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v12, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v8);
  sub_1004B27A4((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v21 = v27[1];
  uint64_t v20 = v27[2];
  uint64_t v22 = *(void (**)(char *, uint64_t))(v9 + 8);
  v22(v12, v8);
  v22(v14, v8);
  if (v20 == v21)
  {
    sub_1003444E0();
    os_log_type_t v23 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_retain();
    dispatch thunk of FMNAuthenticationProvider.autoRenewalLimit.setter();
    swift_release();
  }
  sub_10001D010((uint64_t)v28, a3 + qword_101645A38);
  swift_release();
  uint64_t v24 = type metadata accessor for FMNMockingPreferences();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v7, 1, 1, v24);
  swift_retain();
  uint64_t v25 = FMNServerInteractionController.init(authenticationProvider:mockingPreferences:urlSessionFactory:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v28);
  return v25;
}

uint64_t sub_1004A7518(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v27[0] = a2;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101649E20);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v27 - v13;
  void v28[3] = type metadata accessor for AirPodsPairingLockCheckEndPoint();
  v28[4] = sub_1004B27A4(&qword_101646208, (void (*)(uint64_t))type metadata accessor for AirPodsPairingLockCheckEndPoint);
  uint64_t v15 = sub_10001D958(v28);
  sub_1004B050C(a1, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for AirPodsPairingLockCheckEndPoint);
  uint64_t v16 = qword_101645A30;
  type metadata accessor for FMNAuthenticationProvider();
  swift_allocObject();
  swift_retain();
  *(void *)(a3 + v16) = FMNAuthenticationProvider.init()();
  uint64_t v17 = qword_101645A40;
  if (qword_101636B30 != -1) {
    swift_once();
  }
  *(void *)(a3 + v17) = qword_10170DF18;
  swift_unownedRetain();
  UUID.init()();
  uint64_t v18 = qword_101645A48;
  id v19 = objc_allocWithZone((Class)NSLock);
  *(void *)(a3 + v18) = [v19 init:v27[0]];
  *(unsigned char *)(a3 + qword_101645A50) = 0;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v12, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v8);
  sub_1004B27A4((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v21 = v27[1];
  uint64_t v20 = v27[2];
  uint64_t v22 = *(void (**)(char *, uint64_t))(v9 + 8);
  v22(v12, v8);
  v22(v14, v8);
  if (v20 == v21)
  {
    sub_1003444E0();
    os_log_type_t v23 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_retain();
    dispatch thunk of FMNAuthenticationProvider.autoRenewalLimit.setter();
    swift_release();
  }
  sub_10001D010((uint64_t)v28, a3 + qword_101645A38);
  swift_release();
  uint64_t v24 = type metadata accessor for FMNMockingPreferences();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v7, 1, 1, v24);
  swift_retain();
  uint64_t v25 = FMNServerInteractionController.init(authenticationProvider:mockingPreferences:urlSessionFactory:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v28);
  return v25;
}

uint64_t sub_1004A7930(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v27[0] = a2;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101649E20);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v27 - v13;
  void v28[3] = type metadata accessor for AirPodsPairingLockAckEndPoint();
  v28[4] = sub_1004B27A4(&qword_1016461F0, (void (*)(uint64_t))type metadata accessor for AirPodsPairingLockAckEndPoint);
  uint64_t v15 = sub_10001D958(v28);
  sub_1004B050C(a1, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for AirPodsPairingLockAckEndPoint);
  uint64_t v16 = qword_101645A30;
  type metadata accessor for FMNAuthenticationProvider();
  swift_allocObject();
  swift_retain();
  *(void *)(a3 + v16) = FMNAuthenticationProvider.init()();
  uint64_t v17 = qword_101645A40;
  if (qword_101636B30 != -1) {
    swift_once();
  }
  *(void *)(a3 + v17) = qword_10170DF18;
  swift_unownedRetain();
  UUID.init()();
  uint64_t v18 = qword_101645A48;
  id v19 = objc_allocWithZone((Class)NSLock);
  *(void *)(a3 + v18) = [v19 init:v27[0]];
  *(unsigned char *)(a3 + qword_101645A50) = 0;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v12, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v8);
  sub_1004B27A4((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v21 = v27[1];
  uint64_t v20 = v27[2];
  uint64_t v22 = *(void (**)(char *, uint64_t))(v9 + 8);
  v22(v12, v8);
  v22(v14, v8);
  if (v20 == v21)
  {
    sub_1003444E0();
    os_log_type_t v23 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_retain();
    dispatch thunk of FMNAuthenticationProvider.autoRenewalLimit.setter();
    swift_release();
  }
  sub_10001D010((uint64_t)v28, a3 + qword_101645A38);
  swift_release();
  uint64_t v24 = type metadata accessor for FMNMockingPreferences();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v7, 1, 1, v24);
  swift_retain();
  uint64_t v25 = FMNServerInteractionController.init(authenticationProvider:mockingPreferences:urlSessionFactory:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v28);
  return v25;
}

uint64_t sub_1004A7D48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v27[0] = a2;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101649E20);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v27 - v13;
  void v28[3] = type metadata accessor for RoleCategoriesEndpoint();
  v28[4] = sub_1004B27A4(&qword_101646298, (void (*)(uint64_t))type metadata accessor for RoleCategoriesEndpoint);
  uint64_t v15 = sub_10001D958(v28);
  sub_1004B050C(a1, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for RoleCategoriesEndpoint);
  uint64_t v16 = qword_101645A30;
  type metadata accessor for FMNAuthenticationProvider();
  swift_allocObject();
  swift_retain();
  *(void *)(a3 + v16) = FMNAuthenticationProvider.init()();
  uint64_t v17 = qword_101645A40;
  if (qword_101636B30 != -1) {
    swift_once();
  }
  *(void *)(a3 + v17) = qword_10170DF18;
  swift_unownedRetain();
  UUID.init()();
  uint64_t v18 = qword_101645A48;
  id v19 = objc_allocWithZone((Class)NSLock);
  *(void *)(a3 + v18) = [v19 init:v27[0]];
  *(unsigned char *)(a3 + qword_101645A50) = 0;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v12, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v8);
  sub_1004B27A4((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v21 = v27[1];
  uint64_t v20 = v27[2];
  uint64_t v22 = *(void (**)(char *, uint64_t))(v9 + 8);
  v22(v12, v8);
  v22(v14, v8);
  if (v20 == v21)
  {
    sub_1003444E0();
    os_log_type_t v23 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_retain();
    dispatch thunk of FMNAuthenticationProvider.autoRenewalLimit.setter();
    swift_release();
  }
  sub_10001D010((uint64_t)v28, a3 + qword_101645A38);
  swift_release();
  uint64_t v24 = type metadata accessor for FMNMockingPreferences();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v7, 1, 1, v24);
  swift_retain();
  uint64_t v25 = FMNServerInteractionController.init(authenticationProvider:mockingPreferences:urlSessionFactory:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v28);
  return v25;
}

uint64_t sub_1004A8160(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v27[0] = a2;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101649E20);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v27 - v13;
  void v28[3] = type metadata accessor for ConfigurationEndpoint();
  v28[4] = sub_1004B27A4(&qword_1016462A0, (void (*)(uint64_t))type metadata accessor for ConfigurationEndpoint);
  uint64_t v15 = sub_10001D958(v28);
  sub_1004B050C(a1, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for ConfigurationEndpoint);
  uint64_t v16 = qword_101645A30;
  type metadata accessor for FMNAuthenticationProvider();
  swift_allocObject();
  swift_retain();
  *(void *)(a3 + v16) = FMNAuthenticationProvider.init()();
  uint64_t v17 = qword_101645A40;
  if (qword_101636B30 != -1) {
    swift_once();
  }
  *(void *)(a3 + v17) = qword_10170DF18;
  swift_unownedRetain();
  UUID.init()();
  uint64_t v18 = qword_101645A48;
  id v19 = objc_allocWithZone((Class)NSLock);
  *(void *)(a3 + v18) = [v19 init:v27[0]];
  *(unsigned char *)(a3 + qword_101645A50) = 0;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v12, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v8);
  sub_1004B27A4((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v21 = v27[1];
  uint64_t v20 = v27[2];
  uint64_t v22 = *(void (**)(char *, uint64_t))(v9 + 8);
  v22(v12, v8);
  v22(v14, v8);
  if (v20 == v21)
  {
    sub_1003444E0();
    os_log_type_t v23 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_retain();
    dispatch thunk of FMNAuthenticationProvider.autoRenewalLimit.setter();
    swift_release();
  }
  sub_10001D010((uint64_t)v28, a3 + qword_101645A38);
  swift_release();
  uint64_t v24 = type metadata accessor for FMNMockingPreferences();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v7, 1, 1, v24);
  swift_retain();
  uint64_t v25 = FMNServerInteractionController.init(authenticationProvider:mockingPreferences:urlSessionFactory:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v28);
  return v25;
}

uint64_t sub_1004A8578(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v27[0] = a2;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101649E20);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v27 - v13;
  void v28[3] = type metadata accessor for AccountCheckEndpoint();
  v28[4] = sub_1004B27A4(&qword_101646158, (void (*)(uint64_t))type metadata accessor for AccountCheckEndpoint);
  uint64_t v15 = sub_10001D958(v28);
  sub_1004B050C(a1, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for AccountCheckEndpoint);
  uint64_t v16 = qword_101645A30;
  type metadata accessor for FMNAuthenticationProvider();
  swift_allocObject();
  swift_retain();
  *(void *)(a3 + v16) = FMNAuthenticationProvider.init()();
  uint64_t v17 = qword_101645A40;
  if (qword_101636B30 != -1) {
    swift_once();
  }
  *(void *)(a3 + v17) = qword_10170DF18;
  swift_unownedRetain();
  UUID.init()();
  uint64_t v18 = qword_101645A48;
  id v19 = objc_allocWithZone((Class)NSLock);
  *(void *)(a3 + v18) = [v19 init:v27[0]];
  *(unsigned char *)(a3 + qword_101645A50) = 0;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v12, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v8);
  sub_1004B27A4((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v21 = v27[1];
  uint64_t v20 = v27[2];
  uint64_t v22 = *(void (**)(char *, uint64_t))(v9 + 8);
  v22(v12, v8);
  v22(v14, v8);
  if (v20 == v21)
  {
    sub_1003444E0();
    os_log_type_t v23 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_retain();
    dispatch thunk of FMNAuthenticationProvider.autoRenewalLimit.setter();
    swift_release();
  }
  sub_10001D010((uint64_t)v28, a3 + qword_101645A38);
  swift_release();
  uint64_t v24 = type metadata accessor for FMNMockingPreferences();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v7, 1, 1, v24);
  swift_retain();
  uint64_t v25 = FMNServerInteractionController.init(authenticationProvider:mockingPreferences:urlSessionFactory:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v28);
  return v25;
}

uint64_t sub_1004A8990(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v27[0] = a2;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101649E20);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v27 - v13;
  void v28[3] = type metadata accessor for SubmitUTInfoEndpoint(0);
  v28[4] = sub_1004B27A4(&qword_101646210, (void (*)(uint64_t))type metadata accessor for SubmitUTInfoEndpoint);
  uint64_t v15 = sub_10001D958(v28);
  sub_1004B050C(a1, (uint64_t)v15, type metadata accessor for SubmitUTInfoEndpoint);
  uint64_t v16 = qword_101645A30;
  type metadata accessor for FMNAuthenticationProvider();
  swift_allocObject();
  swift_retain();
  *(void *)(a3 + v16) = FMNAuthenticationProvider.init()();
  uint64_t v17 = qword_101645A40;
  if (qword_101636B30 != -1) {
    swift_once();
  }
  *(void *)(a3 + v17) = qword_10170DF18;
  swift_unownedRetain();
  UUID.init()();
  uint64_t v18 = qword_101645A48;
  id v19 = objc_allocWithZone((Class)NSLock);
  *(void *)(a3 + v18) = [v19 init:v27[0]];
  *(unsigned char *)(a3 + qword_101645A50) = 0;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v12, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v8);
  sub_1004B27A4((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v21 = v27[1];
  uint64_t v20 = v27[2];
  uint64_t v22 = *(void (**)(char *, uint64_t))(v9 + 8);
  v22(v12, v8);
  v22(v14, v8);
  if (v20 == v21)
  {
    sub_1003444E0();
    os_log_type_t v23 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_retain();
    dispatch thunk of FMNAuthenticationProvider.autoRenewalLimit.setter();
    swift_release();
  }
  sub_10001D010((uint64_t)v28, a3 + qword_101645A38);
  swift_release();
  uint64_t v24 = type metadata accessor for FMNMockingPreferences();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v7, 1, 1, v24);
  swift_retain();
  uint64_t v25 = FMNServerInteractionController.init(authenticationProvider:mockingPreferences:urlSessionFactory:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v28);
  return v25;
}

uint64_t sub_1004A8DA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v27[0] = a2;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101649E20);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SystemInfo.DeviceLockState();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)v27 - v13;
  void v28[3] = type metadata accessor for PairingLockUpdateEndPoint();
  v28[4] = sub_1004B27A4(&qword_1016461A8, (void (*)(uint64_t))type metadata accessor for PairingLockUpdateEndPoint);
  uint64_t v15 = sub_10001D958(v28);
  sub_1004B050C(a1, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for PairingLockUpdateEndPoint);
  uint64_t v16 = qword_101645A30;
  type metadata accessor for FMNAuthenticationProvider();
  swift_allocObject();
  swift_retain();
  *(void *)(a3 + v16) = FMNAuthenticationProvider.init()();
  uint64_t v17 = qword_101645A40;
  if (qword_101636B30 != -1) {
    swift_once();
  }
  *(void *)(a3 + v17) = qword_10170DF18;
  swift_unownedRetain();
  UUID.init()();
  uint64_t v18 = qword_101645A48;
  id v19 = objc_allocWithZone((Class)NSLock);
  *(void *)(a3 + v18) = [v19 init:v27[0]];
  *(unsigned char *)(a3 + qword_101645A50) = 0;
  static SystemInfo.lockState.getter();
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v12, enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:), v8);
  sub_1004B27A4((unint64_t *)&unk_101655610, (void (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter();
  dispatch thunk of RawRepresentable.rawValue.getter();
  uint64_t v21 = v27[1];
  uint64_t v20 = v27[2];
  uint64_t v22 = *(void (**)(char *, uint64_t))(v9 + 8);
  v22(v12, v8);
  v22(v14, v8);
  if (v20 == v21)
  {
    sub_1003444E0();
    os_log_type_t v23 = (void *)static OS_os_log.default.getter();
    static os_log_type_t.default.getter();
    os_log(_:dso:log:type:_:)();

    swift_retain();
    dispatch thunk of FMNAuthenticationProvider.autoRenewalLimit.setter();
    swift_release();
  }
  sub_10001D010((uint64_t)v28, a3 + qword_101645A38);
  swift_release();
  uint64_t v24 = type metadata accessor for FMNMockingPreferences();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v7, 1, 1, v24);
  swift_retain();
  uint64_t v25 = FMNServerInteractionController.init(authenticationProvider:mockingPreferences:urlSessionFactory:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v28);
  return v25;
}

uint64_t sub_1004A91C0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9 = *a5;
  uint64_t v10 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26[3] = &type metadata for NFCTapRequest;
  unint64_t v13 = sub_1004AFFA8();
  v26[0] = a1;
  v26[1] = a2;
  unsigned char v26[4] = v13;
  _OWORD v26[2] = a3;
  uint64_t v14 = *(void **)((char *)a5 + qword_101645A48);
  swift_bridgeObjectRetain();
  sub_1000361E0(a2, a3);
  [v14 lock];
  *((unsigned char *)a5 + qword_101645A50) = 0;
  [v14 unlock];
  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v12, 1, 1, v15);
  uint64_t v16 = swift_allocObject();
  swift_weakInit();
  uint64_t v17 = (void *)swift_allocObject();
  void v17[2] = 0;
  v17[3] = 0;
  void v17[4] = v16;
  sub_1008F5E44((uint64_t)v12, (uint64_t)&unk_1016461D0, (uint64_t)v17);
  swift_release();
  sub_10000588C(&qword_101646090);
  swift_allocObject();
  uint64_t v18 = Future.init()();
  sub_10048C190((uint64_t)v26, (uint64_t)v25);
  uint64_t v19 = (uint64_t)a5 + qword_101645A38;
  uint64_t v20 = swift_allocObject();
  swift_weakInit();
  sub_10001D010(v19, (uint64_t)v24);
  sub_10001D010((uint64_t)v25, (uint64_t)v23);
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = v18;
  v21[3] = v20;
  sub_10001CEB0(v24, (uint64_t)(v21 + 4));
  sub_10001CEB0(v23, (uint64_t)(v21 + 9));
  v21[14] = v9;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v25);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v26);
  return v18;
}

uint64_t sub_1004A94BC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9 = *a5;
  uint64_t v10 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26[3] = &type metadata for AccessoryInfoRequest;
  unint64_t v13 = sub_1004AFCCC();
  v26[0] = a1;
  v26[1] = a2;
  unsigned char v26[4] = v13;
  _OWORD v26[2] = a3;
  uint64_t v14 = *(void **)((char *)a5 + qword_101645A48);
  swift_bridgeObjectRetain();
  sub_1000361E0(a2, a3);
  [v14 lock];
  *((unsigned char *)a5 + qword_101645A50) = 0;
  [v14 unlock];
  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v12, 1, 1, v15);
  uint64_t v16 = swift_allocObject();
  swift_weakInit();
  uint64_t v17 = (void *)swift_allocObject();
  void v17[2] = 0;
  v17[3] = 0;
  void v17[4] = v16;
  sub_1008F5E44((uint64_t)v12, (uint64_t)&unk_101646138, (uint64_t)v17);
  swift_release();
  sub_10000588C(&qword_101646090);
  swift_allocObject();
  uint64_t v18 = Future.init()();
  sub_10048C190((uint64_t)v26, (uint64_t)v25);
  uint64_t v19 = (uint64_t)a5 + qword_101645A38;
  uint64_t v20 = swift_allocObject();
  swift_weakInit();
  sub_10001D010(v19, (uint64_t)v24);
  sub_10001D010((uint64_t)v25, (uint64_t)v23);
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = v18;
  v21[3] = v20;
  sub_10001CEB0(v24, (uint64_t)(v21 + 4));
  sub_10001CEB0(v23, (uint64_t)(v21 + 9));
  v21[14] = v9;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v25);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v26);
  return v18;
}

uint64_t sub_1004A97B8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9 = *a5;
  uint64_t v10 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26[3] = &type metadata for UnpairRequest;
  unint64_t v13 = sub_1004AFD84();
  v26[0] = a1;
  v26[1] = a2;
  unsigned char v26[4] = v13;
  _OWORD v26[2] = a3;
  uint64_t v14 = *(void **)((char *)a5 + qword_101645A48);
  swift_bridgeObjectRetain();
  sub_1000361E0(a2, a3);
  [v14 lock];
  *((unsigned char *)a5 + qword_101645A50) = 0;
  [v14 unlock];
  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v12, 1, 1, v15);
  uint64_t v16 = swift_allocObject();
  swift_weakInit();
  uint64_t v17 = (void *)swift_allocObject();
  void v17[2] = 0;
  v17[3] = 0;
  void v17[4] = v16;
  sub_1008F5E44((uint64_t)v12, (uint64_t)&unk_101646168, (uint64_t)v17);
  swift_release();
  sub_10000588C(&qword_101646090);
  swift_allocObject();
  uint64_t v18 = Future.init()();
  sub_10048C190((uint64_t)v26, (uint64_t)v25);
  uint64_t v19 = (uint64_t)a5 + qword_101645A38;
  uint64_t v20 = swift_allocObject();
  swift_weakInit();
  sub_10001D010(v19, (uint64_t)v24);
  sub_10001D010((uint64_t)v25, (uint64_t)v23);
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = v18;
  v21[3] = v20;
  sub_10001CEB0(v24, (uint64_t)(v21 + 4));
  sub_10001CEB0(v23, (uint64_t)(v21 + 9));
  v21[14] = v9;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v25);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v26);
  return v18;
}

uint64_t sub_1004A9AB4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9 = *a5;
  uint64_t v10 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26[3] = &type metadata for PairingLockCheckRequest;
  unint64_t v13 = sub_1004B0288();
  v26[0] = a1;
  v26[1] = a2;
  unsigned char v26[4] = v13;
  _OWORD v26[2] = a3;
  uint64_t v14 = *(void **)((char *)a5 + qword_101645A48);
  swift_bridgeObjectRetain();
  sub_1000361E0(a2, a3);
  [v14 lock];
  *((unsigned char *)a5 + qword_101645A50) = 0;
  [v14 unlock];
  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v12, 1, 1, v15);
  uint64_t v16 = swift_allocObject();
  swift_weakInit();
  uint64_t v17 = (void *)swift_allocObject();
  void v17[2] = 0;
  v17[3] = 0;
  void v17[4] = v16;
  sub_1008F5E44((uint64_t)v12, (uint64_t)&unk_1016462B8, (uint64_t)v17);
  swift_release();
  sub_10000588C(&qword_101646090);
  swift_allocObject();
  uint64_t v18 = Future.init()();
  sub_10048C190((uint64_t)v26, (uint64_t)v25);
  uint64_t v19 = (uint64_t)a5 + qword_101645A38;
  uint64_t v20 = swift_allocObject();
  swift_weakInit();
  sub_10001D010(v19, (uint64_t)v24);
  sub_10001D010((uint64_t)v25, (uint64_t)v23);
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = v18;
  v21[3] = v20;
  sub_10001CEB0(v24, (uint64_t)(v21 + 4));
  sub_10001CEB0(v23, (uint64_t)(v21 + 9));
  v21[14] = v9;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v25);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v26);
  return v18;
}

uint64_t sub_1004A9DB0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9 = *a5;
  uint64_t v10 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26[3] = &type metadata for AccessoryPairingLockCheckRequest;
  unint64_t v13 = sub_1004B03F8();
  v26[0] = a1;
  v26[1] = a2;
  unsigned char v26[4] = v13;
  _OWORD v26[2] = a3;
  uint64_t v14 = *(void **)((char *)a5 + qword_101645A48);
  swift_bridgeObjectRetain();
  sub_1000361E0(a2, a3);
  [v14 lock];
  *((unsigned char *)a5 + qword_101645A50) = 0;
  [v14 unlock];
  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v12, 1, 1, v15);
  uint64_t v16 = swift_allocObject();
  swift_weakInit();
  uint64_t v17 = (void *)swift_allocObject();
  void v17[2] = 0;
  v17[3] = 0;
  void v17[4] = v16;
  sub_1008F5E44((uint64_t)v12, (uint64_t)&unk_101646320, (uint64_t)v17);
  swift_release();
  sub_10000588C(&qword_101646090);
  swift_allocObject();
  uint64_t v18 = Future.init()();
  sub_10048C190((uint64_t)v26, (uint64_t)v25);
  uint64_t v19 = (uint64_t)a5 + qword_101645A38;
  uint64_t v20 = swift_allocObject();
  swift_weakInit();
  sub_10001D010(v19, (uint64_t)v24);
  sub_10001D010((uint64_t)v25, (uint64_t)v23);
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = v18;
  v21[3] = v20;
  sub_10001CEB0(v24, (uint64_t)(v21 + 4));
  sub_10001CEB0(v23, (uint64_t)(v21 + 9));
  v21[14] = v9;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v25);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v26);
  return v18;
}

uint64_t sub_1004AA0AC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9 = *a5;
  uint64_t v10 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26[3] = &type metadata for AccessoryUnpairRequest;
  unint64_t v13 = sub_1004B039C();
  v26[0] = a1;
  v26[1] = a2;
  unsigned char v26[4] = v13;
  _OWORD v26[2] = a3;
  uint64_t v14 = *(void **)((char *)a5 + qword_101645A48);
  swift_bridgeObjectRetain();
  sub_1000361E0(a2, a3);
  [v14 lock];
  *((unsigned char *)a5 + qword_101645A50) = 0;
  [v14 unlock];
  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v12, 1, 1, v15);
  uint64_t v16 = swift_allocObject();
  swift_weakInit();
  uint64_t v17 = (void *)swift_allocObject();
  void v17[2] = 0;
  v17[3] = 0;
  void v17[4] = v16;
  sub_1008F5E44((uint64_t)v12, (uint64_t)&unk_101646308, (uint64_t)v17);
  swift_release();
  sub_10000588C(&qword_101646090);
  swift_allocObject();
  uint64_t v18 = Future.init()();
  sub_10048C190((uint64_t)v26, (uint64_t)v25);
  uint64_t v19 = (uint64_t)a5 + qword_101645A38;
  uint64_t v20 = swift_allocObject();
  swift_weakInit();
  sub_10001D010(v19, (uint64_t)v24);
  sub_10001D010((uint64_t)v25, (uint64_t)v23);
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = v18;
  v21[3] = v20;
  sub_10001CEB0(v24, (uint64_t)(v21 + 4));
  sub_10001CEB0(v23, (uint64_t)(v21 + 9));
  v21[14] = v9;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v25);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v26);
  return v18;
}

uint64_t sub_1004AA3A8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9 = *a5;
  uint64_t v10 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26[3] = &type metadata for AccessoryPairingLockAckRequest;
  unint64_t v13 = sub_1004B0340();
  v26[0] = a1;
  v26[1] = a2;
  unsigned char v26[4] = v13;
  _OWORD v26[2] = a3;
  uint64_t v14 = *(void **)((char *)a5 + qword_101645A48);
  swift_bridgeObjectRetain();
  sub_1000361E0(a2, a3);
  [v14 lock];
  *((unsigned char *)a5 + qword_101645A50) = 0;
  [v14 unlock];
  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v12, 1, 1, v15);
  uint64_t v16 = swift_allocObject();
  swift_weakInit();
  uint64_t v17 = (void *)swift_allocObject();
  void v17[2] = 0;
  v17[3] = 0;
  void v17[4] = v16;
  sub_1008F5E44((uint64_t)v12, (uint64_t)&unk_1016462F0, (uint64_t)v17);
  swift_release();
  sub_10000588C(&qword_101646090);
  swift_allocObject();
  uint64_t v18 = Future.init()();
  sub_10048C190((uint64_t)v26, (uint64_t)v25);
  uint64_t v19 = (uint64_t)a5 + qword_101645A38;
  uint64_t v20 = swift_allocObject();
  swift_weakInit();
  sub_10001D010(v19, (uint64_t)v24);
  sub_10001D010((uint64_t)v25, (uint64_t)v23);
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = v18;
  v21[3] = v20;
  sub_10001CEB0(v24, (uint64_t)(v21 + 4));
  sub_10001CEB0(v23, (uint64_t)(v21 + 9));
  v21[14] = v9;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v25);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v26);
  return v18;
}

uint64_t sub_1004AA6A4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9 = *a5;
  uint64_t v10 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26[3] = &type metadata for PencilPairingLockCheckRequest;
  unint64_t v13 = sub_1004AFC70();
  v26[0] = a1;
  v26[1] = a2;
  unsigned char v26[4] = v13;
  _OWORD v26[2] = a3;
  uint64_t v14 = *(void **)((char *)a5 + qword_101645A48);
  swift_bridgeObjectRetain();
  sub_1000361E0(a2, a3);
  [v14 lock];
  *((unsigned char *)a5 + qword_101645A50) = 0;
  [v14 unlock];
  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v12, 1, 1, v15);
  uint64_t v16 = swift_allocObject();
  swift_weakInit();
  uint64_t v17 = (void *)swift_allocObject();
  void v17[2] = 0;
  v17[3] = 0;
  void v17[4] = v16;
  sub_1008F5E44((uint64_t)v12, (uint64_t)&unk_101646120, (uint64_t)v17);
  swift_release();
  sub_10000588C(&qword_101646090);
  swift_allocObject();
  uint64_t v18 = Future.init()();
  sub_10048C190((uint64_t)v26, (uint64_t)v25);
  uint64_t v19 = (uint64_t)a5 + qword_101645A38;
  uint64_t v20 = swift_allocObject();
  swift_weakInit();
  sub_10001D010(v19, (uint64_t)v24);
  sub_10001D010((uint64_t)v25, (uint64_t)v23);
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = v18;
  v21[3] = v20;
  sub_10001CEB0(v24, (uint64_t)(v21 + 4));
  sub_10001CEB0(v23, (uint64_t)(v21 + 9));
  v21[14] = v9;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v25);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v26);
  return v18;
}

uint64_t sub_1004AA9A0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9 = *a5;
  uint64_t v10 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26[3] = &type metadata for PencilPairingLockAckRequest;
  unint64_t v13 = sub_1004AF5DC();
  v26[0] = a1;
  v26[1] = a2;
  unsigned char v26[4] = v13;
  _OWORD v26[2] = a3;
  uint64_t v14 = *(void **)((char *)a5 + qword_101645A48);
  swift_bridgeObjectRetain();
  sub_1000361E0(a2, a3);
  [v14 lock];
  *((unsigned char *)a5 + qword_101645A50) = 0;
  [v14 unlock];
  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v12, 1, 1, v15);
  uint64_t v16 = swift_allocObject();
  swift_weakInit();
  uint64_t v17 = (void *)swift_allocObject();
  void v17[2] = 0;
  v17[3] = 0;
  void v17[4] = v16;
  sub_1008F5E44((uint64_t)v12, (uint64_t)&unk_1016460E0, (uint64_t)v17);
  swift_release();
  sub_10000588C(&qword_101646090);
  swift_allocObject();
  uint64_t v18 = Future.init()();
  sub_10048C190((uint64_t)v26, (uint64_t)v25);
  uint64_t v19 = (uint64_t)a5 + qword_101645A38;
  uint64_t v20 = swift_allocObject();
  swift_weakInit();
  sub_10001D010(v19, (uint64_t)v24);
  sub_10001D010((uint64_t)v25, (uint64_t)v23);
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = v18;
  v21[3] = v20;
  sub_10001CEB0(v24, (uint64_t)(v21 + 4));
  sub_10001CEB0(v23, (uint64_t)(v21 + 9));
  v21[14] = v9;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v25);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v26);
  return v18;
}

uint64_t sub_1004AAC9C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9 = *a5;
  uint64_t v10 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26[3] = &type metadata for PencilUnpairRequest;
  unint64_t v13 = sub_1004AF1A4();
  v26[0] = a1;
  v26[1] = a2;
  unsigned char v26[4] = v13;
  _OWORD v26[2] = a3;
  uint64_t v14 = *(void **)((char *)a5 + qword_101645A48);
  swift_bridgeObjectRetain();
  sub_1000361E0(a2, a3);
  [v14 lock];
  *((unsigned char *)a5 + qword_101645A50) = 0;
  [v14 unlock];
  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v12, 1, 1, v15);
  uint64_t v16 = swift_allocObject();
  swift_weakInit();
  uint64_t v17 = (void *)swift_allocObject();
  void v17[2] = 0;
  v17[3] = 0;
  void v17[4] = v16;
  sub_1008F5E44((uint64_t)v12, (uint64_t)&unk_101645BB0, (uint64_t)v17);
  swift_release();
  sub_10000588C(&qword_101646090);
  swift_allocObject();
  uint64_t v18 = Future.init()();
  sub_10048C190((uint64_t)v26, (uint64_t)v25);
  uint64_t v19 = (uint64_t)a5 + qword_101645A38;
  uint64_t v20 = swift_allocObject();
  swift_weakInit();
  sub_10001D010(v19, (uint64_t)v24);
  sub_10001D010((uint64_t)v25, (uint64_t)v23);
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = v18;
  v21[3] = v20;
  sub_10001CEB0(v24, (uint64_t)(v21 + 4));
  sub_10001CEB0(v23, (uint64_t)(v21 + 9));
  v21[14] = v9;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v25);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v26);
  return v18;
}

uint64_t sub_1004AAF98(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9 = *a5;
  uint64_t v10 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26[3] = &type metadata for SecureLocationsConfigRequest;
  unint64_t v13 = sub_1004B00BC();
  v26[0] = a1;
  v26[1] = a2;
  unsigned char v26[4] = v13;
  _OWORD v26[2] = a3;
  uint64_t v14 = *(void **)((char *)a5 + qword_101645A48);
  swift_bridgeObjectRetain();
  sub_1000361E0(a2, a3);
  [v14 lock];
  *((unsigned char *)a5 + qword_101645A50) = 0;
  [v14 unlock];
  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v12, 1, 1, v15);
  uint64_t v16 = swift_allocObject();
  swift_weakInit();
  uint64_t v17 = (void *)swift_allocObject();
  void v17[2] = 0;
  v17[3] = 0;
  void v17[4] = v16;
  sub_1008F5E44((uint64_t)v12, (uint64_t)&unk_101646228, (uint64_t)v17);
  swift_release();
  sub_10000588C(&qword_101646090);
  swift_allocObject();
  uint64_t v18 = Future.init()();
  sub_10048C190((uint64_t)v26, (uint64_t)v25);
  uint64_t v19 = (uint64_t)a5 + qword_101645A38;
  uint64_t v20 = swift_allocObject();
  swift_weakInit();
  sub_10001D010(v19, (uint64_t)v24);
  sub_10001D010((uint64_t)v25, (uint64_t)v23);
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = v18;
  v21[3] = v20;
  sub_10001CEB0(v24, (uint64_t)(v21 + 4));
  sub_10001CEB0(v23, (uint64_t)(v21 + 9));
  v21[14] = v9;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v25);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v26);
  return v18;
}

uint64_t sub_1004AB294(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9 = *a5;
  uint64_t v10 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26[3] = &type metadata for SecureLocationsFetchRequest;
  unint64_t v13 = sub_1004B0118();
  v26[0] = a1;
  v26[1] = a2;
  unsigned char v26[4] = v13;
  _OWORD v26[2] = a3;
  uint64_t v14 = *(void **)((char *)a5 + qword_101645A48);
  swift_bridgeObjectRetain();
  sub_1000361E0(a2, a3);
  [v14 lock];
  *((unsigned char *)a5 + qword_101645A50) = 0;
  [v14 unlock];
  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v12, 1, 1, v15);
  uint64_t v16 = swift_allocObject();
  swift_weakInit();
  uint64_t v17 = (void *)swift_allocObject();
  void v17[2] = 0;
  v17[3] = 0;
  void v17[4] = v16;
  sub_1008F5E44((uint64_t)v12, (uint64_t)&unk_101646240, (uint64_t)v17);
  swift_release();
  sub_10000588C(&qword_101646090);
  swift_allocObject();
  uint64_t v18 = Future.init()();
  sub_10048C190((uint64_t)v26, (uint64_t)v25);
  uint64_t v19 = (uint64_t)a5 + qword_101645A38;
  uint64_t v20 = swift_allocObject();
  swift_weakInit();
  sub_10001D010(v19, (uint64_t)v24);
  sub_10001D010((uint64_t)v25, (uint64_t)v23);
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = v18;
  v21[3] = v20;
  sub_10001CEB0(v24, (uint64_t)(v21 + 4));
  sub_10001CEB0(v23, (uint64_t)(v21 + 9));
  v21[14] = v9;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v25);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v26);
  return v18;
}

uint64_t sub_1004AB590(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9 = *a5;
  uint64_t v10 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26[3] = &type metadata for SecureLocationsLabelledLocationsRequest;
  unint64_t v13 = sub_1004B01D0();
  v26[0] = a1;
  v26[1] = a2;
  unsigned char v26[4] = v13;
  _OWORD v26[2] = a3;
  uint64_t v14 = *(void **)((char *)a5 + qword_101645A48);
  swift_bridgeObjectRetain();
  sub_1000361E0(a2, a3);
  [v14 lock];
  *((unsigned char *)a5 + qword_101645A50) = 0;
  [v14 unlock];
  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v12, 1, 1, v15);
  uint64_t v16 = swift_allocObject();
  swift_weakInit();
  uint64_t v17 = (void *)swift_allocObject();
  void v17[2] = 0;
  v17[3] = 0;
  void v17[4] = v16;
  sub_1008F5E44((uint64_t)v12, (uint64_t)&unk_101646270, (uint64_t)v17);
  swift_release();
  sub_10000588C(&qword_101646090);
  swift_allocObject();
  uint64_t v18 = Future.init()();
  sub_10048C190((uint64_t)v26, (uint64_t)v25);
  uint64_t v19 = (uint64_t)a5 + qword_101645A38;
  uint64_t v20 = swift_allocObject();
  swift_weakInit();
  sub_10001D010(v19, (uint64_t)v24);
  sub_10001D010((uint64_t)v25, (uint64_t)v23);
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = v18;
  v21[3] = v20;
  sub_10001CEB0(v24, (uint64_t)(v21 + 4));
  sub_10001CEB0(v23, (uint64_t)(v21 + 9));
  v21[14] = v9;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v25);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v26);
  return v18;
}

uint64_t sub_1004AB88C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9 = *a5;
  uint64_t v10 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26[3] = &type metadata for SecureLocationsSubmitRequest;
  unint64_t v13 = sub_1004B022C();
  v26[0] = a1;
  v26[1] = a2;
  unsigned char v26[4] = v13;
  _OWORD v26[2] = a3;
  uint64_t v14 = *(void **)((char *)a5 + qword_101645A48);
  swift_bridgeObjectRetain();
  sub_1000361E0(a2, a3);
  [v14 lock];
  *((unsigned char *)a5 + qword_101645A50) = 0;
  [v14 unlock];
  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v12, 1, 1, v15);
  uint64_t v16 = swift_allocObject();
  swift_weakInit();
  uint64_t v17 = (void *)swift_allocObject();
  void v17[2] = 0;
  v17[3] = 0;
  void v17[4] = v16;
  sub_1008F5E44((uint64_t)v12, (uint64_t)&unk_101646288, (uint64_t)v17);
  swift_release();
  sub_10000588C(&qword_101646090);
  swift_allocObject();
  uint64_t v18 = Future.init()();
  sub_10048C190((uint64_t)v26, (uint64_t)v25);
  uint64_t v19 = (uint64_t)a5 + qword_101645A38;
  uint64_t v20 = swift_allocObject();
  swift_weakInit();
  sub_10001D010(v19, (uint64_t)v24);
  sub_10001D010((uint64_t)v25, (uint64_t)v23);
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = v18;
  v21[3] = v20;
  sub_10001CEB0(v24, (uint64_t)(v21 + 4));
  sub_10001CEB0(v23, (uint64_t)(v21 + 9));
  v21[14] = v9;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v25);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v26);
  return v18;
}

uint64_t sub_1004ABB88(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9 = *a5;
  uint64_t v10 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26[3] = &type metadata for SecureLocationsUnsubscribeRequest;
  unint64_t v13 = sub_1004B02E4();
  v26[0] = a1;
  v26[1] = a2;
  unsigned char v26[4] = v13;
  _OWORD v26[2] = a3;
  uint64_t v14 = *(void **)((char *)a5 + qword_101645A48);
  swift_bridgeObjectRetain();
  sub_1000361E0(a2, a3);
  [v14 lock];
  *((unsigned char *)a5 + qword_101645A50) = 0;
  [v14 unlock];
  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v12, 1, 1, v15);
  uint64_t v16 = swift_allocObject();
  swift_weakInit();
  uint64_t v17 = (void *)swift_allocObject();
  void v17[2] = 0;
  v17[3] = 0;
  void v17[4] = v16;
  sub_1008F5E44((uint64_t)v12, (uint64_t)&unk_1016462D8, (uint64_t)v17);
  swift_release();
  sub_10000588C(&qword_101646090);
  swift_allocObject();
  uint64_t v18 = Future.init()();
  sub_10048C190((uint64_t)v26, (uint64_t)v25);
  uint64_t v19 = (uint64_t)a5 + qword_101645A38;
  uint64_t v20 = swift_allocObject();
  swift_weakInit();
  sub_10001D010(v19, (uint64_t)v24);
  sub_10001D010((uint64_t)v25, (uint64_t)v23);
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = v18;
  v21[3] = v20;
  sub_10001CEB0(v24, (uint64_t)(v21 + 4));
  sub_10001CEB0(v23, (uint64_t)(v21 + 9));
  v21[14] = v9;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v25);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v26);
  return v18;
}

uint64_t sub_1004ABE84(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9 = *a5;
  uint64_t v10 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26[3] = &type metadata for SecureLocationsPushAckRequest;
  unint64_t v13 = sub_1004B0174();
  v26[0] = a1;
  v26[1] = a2;
  unsigned char v26[4] = v13;
  _OWORD v26[2] = a3;
  uint64_t v14 = *(void **)((char *)a5 + qword_101645A48);
  swift_bridgeObjectRetain();
  sub_1000361E0(a2, a3);
  [v14 lock];
  *((unsigned char *)a5 + qword_101645A50) = 0;
  [v14 unlock];
  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v12, 1, 1, v15);
  uint64_t v16 = swift_allocObject();
  swift_weakInit();
  uint64_t v17 = (void *)swift_allocObject();
  void v17[2] = 0;
  v17[3] = 0;
  void v17[4] = v16;
  sub_1008F5E44((uint64_t)v12, (uint64_t)&unk_101646258, (uint64_t)v17);
  swift_release();
  sub_10000588C(&qword_101646090);
  swift_allocObject();
  uint64_t v18 = Future.init()();
  sub_10048C190((uint64_t)v26, (uint64_t)v25);
  uint64_t v19 = (uint64_t)a5 + qword_101645A38;
  uint64_t v20 = swift_allocObject();
  swift_weakInit();
  sub_10001D010(v19, (uint64_t)v24);
  sub_10001D010((uint64_t)v25, (uint64_t)v23);
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = v18;
  v21[3] = v20;
  sub_10001CEB0(v24, (uint64_t)(v21 + 4));
  sub_10001CEB0(v23, (uint64_t)(v21 + 9));
  v21[14] = v9;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v25);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v26);
  return v18;
}

uint64_t sub_1004AC180(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9 = *a5;
  uint64_t v10 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26[3] = &type metadata for PairingLockAckRequest;
  unint64_t v13 = sub_1004AFF4C();
  v26[0] = a1;
  v26[1] = a2;
  unsigned char v26[4] = v13;
  _OWORD v26[2] = a3;
  uint64_t v14 = *(void **)((char *)a5 + qword_101645A48);
  swift_bridgeObjectRetain();
  sub_1000361E0(a2, a3);
  [v14 lock];
  *((unsigned char *)a5 + qword_101645A50) = 0;
  [v14 unlock];
  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v12, 1, 1, v15);
  uint64_t v16 = swift_allocObject();
  swift_weakInit();
  uint64_t v17 = (void *)swift_allocObject();
  void v17[2] = 0;
  v17[3] = 0;
  void v17[4] = v16;
  sub_1008F5E44((uint64_t)v12, (uint64_t)&unk_1016461B8, (uint64_t)v17);
  swift_release();
  sub_10000588C(&qword_101646090);
  swift_allocObject();
  uint64_t v18 = Future.init()();
  sub_10048C190((uint64_t)v26, (uint64_t)v25);
  uint64_t v19 = (uint64_t)a5 + qword_101645A38;
  uint64_t v20 = swift_allocObject();
  swift_weakInit();
  sub_10001D010(v19, (uint64_t)v24);
  sub_10001D010((uint64_t)v25, (uint64_t)v23);
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = v18;
  v21[3] = v20;
  sub_10001CEB0(v24, (uint64_t)(v21 + 4));
  sub_10001CEB0(v23, (uint64_t)(v21 + 9));
  v21[14] = v9;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v25);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v26);
  return v18;
}

uint64_t sub_1004AC47C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9 = *a5;
  uint64_t v10 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26[3] = &type metadata for AirPodsLEPairingLockCheckRequest;
  unint64_t v13 = sub_1004B04B0();
  v26[0] = a1;
  v26[1] = a2;
  unsigned char v26[4] = v13;
  _OWORD v26[2] = a3;
  uint64_t v14 = *(void **)((char *)a5 + qword_101645A48);
  swift_bridgeObjectRetain();
  sub_1000361E0(a2, a3);
  [v14 lock];
  *((unsigned char *)a5 + qword_101645A50) = 0;
  [v14 unlock];
  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v12, 1, 1, v15);
  uint64_t v16 = swift_allocObject();
  swift_weakInit();
  uint64_t v17 = (void *)swift_allocObject();
  void v17[2] = 0;
  v17[3] = 0;
  void v17[4] = v16;
  sub_1008F5E44((uint64_t)v12, (uint64_t)&unk_101646358, (uint64_t)v17);
  swift_release();
  sub_10000588C(&qword_101646090);
  swift_allocObject();
  uint64_t v18 = Future.init()();
  sub_10048C190((uint64_t)v26, (uint64_t)v25);
  uint64_t v19 = (uint64_t)a5 + qword_101645A38;
  uint64_t v20 = swift_allocObject();
  swift_weakInit();
  sub_10001D010(v19, (uint64_t)v24);
  sub_10001D010((uint64_t)v25, (uint64_t)v23);
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = v18;
  v21[3] = v20;
  sub_10001CEB0(v24, (uint64_t)(v21 + 4));
  sub_10001CEB0(v23, (uint64_t)(v21 + 9));
  v21[14] = v9;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v25);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v26);
  return v18;
}

uint64_t sub_1004AC778(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9 = *a5;
  uint64_t v10 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26[3] = &type metadata for AirPodsSWPairingLockCheckRequest;
  unint64_t v13 = sub_1004B05D0();
  v26[0] = a1;
  v26[1] = a2;
  unsigned char v26[4] = v13;
  _OWORD v26[2] = a3;
  uint64_t v14 = *(void **)((char *)a5 + qword_101645A48);
  swift_bridgeObjectRetain();
  sub_1000361E0(a2, a3);
  [v14 lock];
  *((unsigned char *)a5 + qword_101645A50) = 0;
  [v14 unlock];
  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v12, 1, 1, v15);
  uint64_t v16 = swift_allocObject();
  swift_weakInit();
  uint64_t v17 = (void *)swift_allocObject();
  void v17[2] = 0;
  v17[3] = 0;
  void v17[4] = v16;
  sub_1008F5E44((uint64_t)v12, (uint64_t)&unk_101646380, (uint64_t)v17);
  swift_release();
  sub_10000588C(&qword_101646090);
  swift_allocObject();
  uint64_t v18 = Future.init()();
  sub_10048C190((uint64_t)v26, (uint64_t)v25);
  uint64_t v19 = (uint64_t)a5 + qword_101645A38;
  uint64_t v20 = swift_allocObject();
  swift_weakInit();
  sub_10001D010(v19, (uint64_t)v24);
  sub_10001D010((uint64_t)v25, (uint64_t)v23);
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = v18;
  v21[3] = v20;
  sub_10001CEB0(v24, (uint64_t)(v21 + 4));
  sub_10001CEB0(v23, (uint64_t)(v21 + 9));
  v21[14] = v9;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v25);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v26);
  return v18;
}

uint64_t sub_1004ACA74(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9 = *a5;
  uint64_t v10 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26[3] = &type metadata for AirPodsPairingLockCheckRequest;
  unint64_t v13 = sub_1004B0060();
  v26[0] = a1;
  v26[1] = a2;
  unsigned char v26[4] = v13;
  _OWORD v26[2] = a3;
  uint64_t v14 = *(void **)((char *)a5 + qword_101645A48);
  swift_bridgeObjectRetain();
  sub_1000361E0(a2, a3);
  [v14 lock];
  *((unsigned char *)a5 + qword_101645A50) = 0;
  [v14 unlock];
  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v12, 1, 1, v15);
  uint64_t v16 = swift_allocObject();
  swift_weakInit();
  uint64_t v17 = (void *)swift_allocObject();
  void v17[2] = 0;
  v17[3] = 0;
  void v17[4] = v16;
  sub_1008F5E44((uint64_t)v12, (uint64_t)&unk_101646200, (uint64_t)v17);
  swift_release();
  sub_10000588C(&qword_101646090);
  swift_allocObject();
  uint64_t v18 = Future.init()();
  sub_10048C190((uint64_t)v26, (uint64_t)v25);
  uint64_t v19 = (uint64_t)a5 + qword_101645A38;
  uint64_t v20 = swift_allocObject();
  swift_weakInit();
  sub_10001D010(v19, (uint64_t)v24);
  sub_10001D010((uint64_t)v25, (uint64_t)v23);
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = v18;
  v21[3] = v20;
  sub_10001CEB0(v24, (uint64_t)(v21 + 4));
  sub_10001CEB0(v23, (uint64_t)(v21 + 9));
  v21[14] = v9;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v25);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v26);
  return v18;
}

uint64_t sub_1004ACD70(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9 = *a5;
  uint64_t v10 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26[3] = &type metadata for AirPodsUnpairRequest;
  unint64_t v13 = sub_1004AFDE0();
  v26[0] = a1;
  v26[1] = a2;
  unsigned char v26[4] = v13;
  _OWORD v26[2] = a3;
  uint64_t v14 = *(void **)((char *)a5 + qword_101645A48);
  swift_bridgeObjectRetain();
  sub_1000361E0(a2, a3);
  [v14 lock];
  *((unsigned char *)a5 + qword_101645A50) = 0;
  [v14 unlock];
  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v12, 1, 1, v15);
  uint64_t v16 = swift_allocObject();
  swift_weakInit();
  uint64_t v17 = (void *)swift_allocObject();
  void v17[2] = 0;
  v17[3] = 0;
  void v17[4] = v16;
  sub_1008F5E44((uint64_t)v12, (uint64_t)&unk_101646180, (uint64_t)v17);
  swift_release();
  sub_10000588C(&qword_101646090);
  swift_allocObject();
  uint64_t v18 = Future.init()();
  sub_10048C190((uint64_t)v26, (uint64_t)v25);
  uint64_t v19 = (uint64_t)a5 + qword_101645A38;
  uint64_t v20 = swift_allocObject();
  swift_weakInit();
  sub_10001D010(v19, (uint64_t)v24);
  sub_10001D010((uint64_t)v25, (uint64_t)v23);
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = v18;
  v21[3] = v20;
  sub_10001CEB0(v24, (uint64_t)(v21 + 4));
  sub_10001CEB0(v23, (uint64_t)(v21 + 9));
  v21[14] = v9;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v25);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v26);
  return v18;
}

uint64_t sub_1004AD06C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9 = *a5;
  uint64_t v10 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26[3] = &type metadata for AirPodsPairingLockAckRequest;
  unint64_t v13 = sub_1004B0004();
  v26[0] = a1;
  v26[1] = a2;
  unsigned char v26[4] = v13;
  _OWORD v26[2] = a3;
  uint64_t v14 = *(void **)((char *)a5 + qword_101645A48);
  swift_bridgeObjectRetain();
  sub_1000361E0(a2, a3);
  [v14 lock];
  *((unsigned char *)a5 + qword_101645A50) = 0;
  [v14 unlock];
  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v12, 1, 1, v15);
  uint64_t v16 = swift_allocObject();
  swift_weakInit();
  uint64_t v17 = (void *)swift_allocObject();
  void v17[2] = 0;
  v17[3] = 0;
  void v17[4] = v16;
  sub_1008F5E44((uint64_t)v12, (uint64_t)&unk_1016461E8, (uint64_t)v17);
  swift_release();
  sub_10000588C(&qword_101646090);
  swift_allocObject();
  uint64_t v18 = Future.init()();
  sub_10048C190((uint64_t)v26, (uint64_t)v25);
  uint64_t v19 = (uint64_t)a5 + qword_101645A38;
  uint64_t v20 = swift_allocObject();
  swift_weakInit();
  sub_10001D010(v19, (uint64_t)v24);
  sub_10001D010((uint64_t)v25, (uint64_t)v23);
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = v18;
  v21[3] = v20;
  sub_10001CEB0(v24, (uint64_t)(v21 + 4));
  sub_10001CEB0(v23, (uint64_t)(v21 + 9));
  v21[14] = v9;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v25);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v26);
  return v18;
}

uint64_t sub_1004AD368(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9 = *a5;
  uint64_t v10 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26[3] = &type metadata for AirPodsLEPairingLockAckRequest;
  unint64_t v13 = sub_1004B0454();
  v26[0] = a1;
  v26[1] = a2;
  unsigned char v26[4] = v13;
  _OWORD v26[2] = a3;
  uint64_t v14 = *(void **)((char *)a5 + qword_101645A48);
  swift_bridgeObjectRetain();
  sub_1000361E0(a2, a3);
  [v14 lock];
  *((unsigned char *)a5 + qword_101645A50) = 0;
  [v14 unlock];
  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v12, 1, 1, v15);
  uint64_t v16 = swift_allocObject();
  swift_weakInit();
  uint64_t v17 = (void *)swift_allocObject();
  void v17[2] = 0;
  v17[3] = 0;
  void v17[4] = v16;
  sub_1008F5E44((uint64_t)v12, (uint64_t)&unk_101646340, (uint64_t)v17);
  swift_release();
  sub_10000588C(&qword_101646090);
  swift_allocObject();
  uint64_t v18 = Future.init()();
  sub_10048C190((uint64_t)v26, (uint64_t)v25);
  uint64_t v19 = (uint64_t)a5 + qword_101645A38;
  uint64_t v20 = swift_allocObject();
  swift_weakInit();
  sub_10001D010(v19, (uint64_t)v24);
  sub_10001D010((uint64_t)v25, (uint64_t)v23);
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = v18;
  v21[3] = v20;
  sub_10001CEB0(v24, (uint64_t)(v21 + 4));
  sub_10001CEB0(v23, (uint64_t)(v21 + 9));
  v21[14] = v9;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v25);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v26);
  return v18;
}

uint64_t sub_1004AD664(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9 = *a5;
  uint64_t v10 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26[3] = &type metadata for AirPodsSWPairingLockAckRequest;
  unint64_t v13 = sub_1004B0574();
  v26[0] = a1;
  v26[1] = a2;
  unsigned char v26[4] = v13;
  _OWORD v26[2] = a3;
  uint64_t v14 = *(void **)((char *)a5 + qword_101645A48);
  swift_bridgeObjectRetain();
  sub_1000361E0(a2, a3);
  [v14 lock];
  *((unsigned char *)a5 + qword_101645A50) = 0;
  [v14 unlock];
  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v12, 1, 1, v15);
  uint64_t v16 = swift_allocObject();
  swift_weakInit();
  uint64_t v17 = (void *)swift_allocObject();
  void v17[2] = 0;
  v17[3] = 0;
  void v17[4] = v16;
  sub_1008F5E44((uint64_t)v12, (uint64_t)&unk_101646370, (uint64_t)v17);
  swift_release();
  sub_10000588C(&qword_101646090);
  swift_allocObject();
  uint64_t v18 = Future.init()();
  sub_10048C190((uint64_t)v26, (uint64_t)v25);
  uint64_t v19 = (uint64_t)a5 + qword_101645A38;
  uint64_t v20 = swift_allocObject();
  swift_weakInit();
  sub_10001D010(v19, (uint64_t)v24);
  sub_10001D010((uint64_t)v25, (uint64_t)v23);
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = v18;
  v21[3] = v20;
  sub_10001CEB0(v24, (uint64_t)(v21 + 4));
  sub_10001CEB0(v23, (uint64_t)(v21 + 9));
  v21[14] = v9;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v25);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v26);
  return v18;
}

uint64_t sub_1004AD960(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9 = *a5;
  uint64_t v10 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26[3] = &type metadata for AccountCheckRequest;
  unint64_t v13 = sub_1004AFD28();
  v26[0] = a1;
  v26[1] = a2;
  unsigned char v26[4] = v13;
  _OWORD v26[2] = a3;
  uint64_t v14 = *(void **)((char *)a5 + qword_101645A48);
  swift_bridgeObjectRetain();
  sub_1000361E0(a2, a3);
  [v14 lock];
  *((unsigned char *)a5 + qword_101645A50) = 0;
  [v14 unlock];
  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v12, 1, 1, v15);
  uint64_t v16 = swift_allocObject();
  swift_weakInit();
  uint64_t v17 = (void *)swift_allocObject();
  void v17[2] = 0;
  v17[3] = 0;
  void v17[4] = v16;
  sub_1008F5E44((uint64_t)v12, (uint64_t)&unk_101646150, (uint64_t)v17);
  swift_release();
  sub_10000588C(&qword_101646090);
  swift_allocObject();
  uint64_t v18 = Future.init()();
  sub_10048C190((uint64_t)v26, (uint64_t)v25);
  uint64_t v19 = (uint64_t)a5 + qword_101645A38;
  uint64_t v20 = swift_allocObject();
  swift_weakInit();
  sub_10001D010(v19, (uint64_t)v24);
  sub_10001D010((uint64_t)v25, (uint64_t)v23);
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = v18;
  v21[3] = v20;
  sub_10001CEB0(v24, (uint64_t)(v21 + 4));
  sub_10001CEB0(v23, (uint64_t)(v21 + 9));
  v21[14] = v9;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v25);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v26);
  return v18;
}

uint64_t sub_1004ADC5C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v9 = *a5;
  uint64_t v10 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26[3] = &type metadata for PairingLockUpdateRequest;
  unint64_t v13 = sub_1004AFE3C();
  v26[0] = a1;
  v26[1] = a2;
  unsigned char v26[4] = v13;
  _OWORD v26[2] = a3;
  uint64_t v14 = *(void **)((char *)a5 + qword_101645A48);
  swift_bridgeObjectRetain();
  sub_1000361E0(a2, a3);
  [v14 lock];
  *((unsigned char *)a5 + qword_101645A50) = 0;
  [v14 unlock];
  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v12, 1, 1, v15);
  uint64_t v16 = swift_allocObject();
  swift_weakInit();
  uint64_t v17 = (void *)swift_allocObject();
  void v17[2] = 0;
  v17[3] = 0;
  void v17[4] = v16;
  sub_1008F5E44((uint64_t)v12, (uint64_t)&unk_1016461A0, (uint64_t)v17);
  swift_release();
  sub_10000588C(&qword_101646090);
  swift_allocObject();
  uint64_t v18 = Future.init()();
  sub_10048C190((uint64_t)v26, (uint64_t)v25);
  uint64_t v19 = (uint64_t)a5 + qword_101645A38;
  uint64_t v20 = swift_allocObject();
  swift_weakInit();
  sub_10001D010(v19, (uint64_t)v24);
  sub_10001D010((uint64_t)v25, (uint64_t)v23);
  uint64_t v21 = (void *)swift_allocObject();
  v21[2] = v18;
  v21[3] = v20;
  sub_10001CEB0(v24, (uint64_t)(v21 + 4));
  sub_10001CEB0(v23, (uint64_t)(v21 + 9));
  v21[14] = v9;
  swift_retain();
  swift_retain();
  dispatch thunk of FMNServerInteractionController.sendRequest(endpoint:content:source:credential:responseHandler:)();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v25);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v26);
  return v18;
}

uint64_t sub_1004ADF58(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x754E6C6169726573 && a2 == 0xEC0000007265626DLL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6449616E6D66 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x49746375646F7270 && a2 == 0xE900000000000064 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6449726F646E6576 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_1004AE130@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v66 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = (int *)type metadata accessor for PencilUnpairData.DeviceUnpairData();
  uint64_t v9 = *((void *)v8 - 1);
  __chkstk_darwin(v8);
  uint64_t v11 = (uint64_t *)((char *)&v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = (int *)type metadata accessor for LocalFindableAccessoryRecord();
  uint64_t v13 = sub_1002AAF08(*(void *)(a1 + v12[10]), *(void *)(a1 + v12[11]));
  if (v14 >> 60 == 15)
  {
    sub_1004AF24C();
    swift_allocError();
    *(_OWORD *)uint64_t v15 = xmmword_10135D7D0;
    *(unsigned char *)(v15 + 16) = 3;
    swift_willThrow();
    return sub_1004AFAB8(a1, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
  }
  uint64_t v17 = v13;
  os_log_type_t v69 = a2;
  uint64_t v71 = v9;
  uint64_t v72 = v2;
  uint64_t v18 = (uint64_t *)(a1 + v12[7]);
  uint64_t v19 = a1;
  uint64_t v20 = *v18;
  unint64_t v21 = v18[1];
  uint64_t v22 = v12[9];
  uint64_t v70 = v19;
  uint64_t v23 = v19 + v22;
  unint64_t v75 = v14;
  uint64_t v24 = type metadata accessor for UUID();
  uint64_t v25 = *(void *)(v24 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v7, v23, v24);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v7, 0, 1, v24);
  uint64_t v73 = v21;
  uint64_t v74 = v20;
  sub_1000361E0(v20, v21);
  uint64_t v26 = sub_1002AA5D4(v17, v75);
  unint64_t v28 = v27;
  uint64_t v29 = Data.hexString.getter();
  uint64_t v31 = v30;
  sub_10001CFB8(v26, v28);
  switch(v75 >> 62)
  {
    case 1uLL:
      LODWORD(v32) = HIDWORD(v17) - v17;
      if (__OFSUB__(HIDWORD(v17), v17)) {
        goto LABEL_12;
      }
      uint64_t v32 = (int)v32;
LABEL_7:
      if (v32 < -1)
      {
        __break(1u);
LABEL_12:
        __break(1u);
LABEL_13:
        __break(1u);
        goto LABEL_14;
      }
LABEL_8:
      uint64_t v68 = v17;
      uint64_t v36 = Data.subdata(in:)();
      unint64_t v38 = v37;
      uint64_t v39 = Data.hexString.getter();
      uint64_t v41 = v40;
      sub_10001CFB8(v36, v38);
      uint64_t v42 = v73;
      *uint64_t v11 = v74;
      v11[1] = v42;
      sub_1002729C8((uint64_t)v7, (uint64_t)v11 + v8[5]);
      uint64_t v43 = (uint64_t *)((char *)v11 + v8[6]);
      *uint64_t v43 = v29;
      v43[1] = v31;
      uint64_t v44 = (uint64_t *)((char *)v11 + v8[7]);
      *uint64_t v44 = v39;
      v44[1] = v41;
      id v45 = (id)MobileGestalt_get_current_device();
      if (!v45)
      {
LABEL_14:
        __break(1u);
        goto LABEL_15;
      }
      uint64_t v46 = v45;
      uint64_t uniqueChipID = MobileGestalt_get_uniqueChipID();

      id v48 = (id)MobileGestalt_get_current_device();
      if (!v48)
      {
LABEL_15:
        __break(1u);
        JUMPOUT(0x1004AE5F8);
      }
      uint64_t v49 = v48;
      uint64_t chipID = MobileGestalt_get_chipID();

      uint64_t v76 = uniqueChipID;
      uint64_t v51 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v74 = v52;
      uint64_t v76 = chipID;
      uint64_t v73 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v67 = v53;
      id v54 = sub_100F2C724();
      uint64_t v56 = v55;
      uint64_t v57 = v70;
      uint64_t v58 = UUID.uuidString.getter();
      uint64_t v60 = v59;
      sub_10000588C(&qword_1016460B8);
      unint64_t v61 = (*(unsigned __int8 *)(v71 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80);
      uint64_t v62 = swift_allocObject();
      *(_OWORD *)(v62 + 16) = xmmword_101342130;
      sub_1004AFB18((uint64_t)v11, v62 + v61, (uint64_t (*)(void))type metadata accessor for PencilUnpairData.DeviceUnpairData);
      sub_100037A24(v68, v75);
      sub_1004AFAB8(v57, (uint64_t (*)(void))type metadata accessor for LocalFindableAccessoryRecord);
      uint64_t result = sub_1004AFAB8((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for PencilUnpairData.DeviceUnpairData);
      uint64_t v63 = v69;
      uint64_t v64 = v74;
      *os_log_type_t v69 = v51;
      v63[1] = v64;
      uint64_t v65 = v67;
      v63[2] = v73;
      v63[3] = v65;
      v63[4] = (uint64_t)v54;
      uint64_t v63[5] = v56;
      v63[6] = v58;
      v63[7] = v60;
      *((unsigned char *)v63 + 64) = 0;
      v63[9] = v62;
      return result;
    case 2uLL:
      uint64_t v34 = *(void *)(v17 + 16);
      uint64_t v33 = *(void *)(v17 + 24);
      BOOL v35 = __OFSUB__(v33, v34);
      uint64_t v32 = v33 - v34;
      if (!v35) {
        goto LABEL_7;
      }
      goto LABEL_13;
    default:
      goto LABEL_8;
  }
}

uint64_t sub_1004AE608(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x69634572656E776FLL && a2 == 0xE900000000000064;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x69684372656E776FLL && a2 == 0xEB00000000644970 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001013F6580 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 1684628597 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6F4365766F6D6572 && a2 == 0xED0000747865746ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x73656369766564 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

uint64_t sub_1004AE8BC(void *a1, uint64_t a2)
{
  uint64_t v66 = &type metadata for PencilPairingCheckData;
  uint64_t v67 = &off_1015C5F30;
  v65[0] = swift_allocObject();
  memcpy((void *)(v65[0] + 16), a1, 0x130uLL);
  uint64_t v63 = type metadata accessor for PencilPairingLockCheckResponse();
  uint64_t v64 = &off_1015D0470;
  uint64_t v4 = sub_10001D958(v62);
  sub_1004AFB18(a2, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for PencilPairingLockCheckResponse);
  sub_10025E980((uint64_t *)a1);
  static os_log_type_t.debug.getter();
  if (qword_101637308 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_101342130;
  char v6 = sub_10001CD44(v65, (uint64_t)&type metadata for PencilPairingCheckData);
  uint64_t v7 = v6[30];
  unint64_t v8 = v6[31];
  sub_1000361E0(v7, v8);
  uint64_t v9 = Data.hexString.getter();
  uint64_t v11 = v10;
  sub_10001CFB8(v7, v8);
  *(void *)(v5 + 56) = &type metadata for String;
  unint64_t v12 = sub_10000B4CC();
  *(void *)(v5 + 64) = v12;
  *(void *)(v5 + 32) = v9;
  *(void *)(v5 + 40) = v11;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  static os_log_type_t.debug.getter();
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_101342130;
  unint64_t v14 = sub_10001CD44(v62, v63);
  uint64_t v15 = *v14;
  unint64_t v16 = v14[1];
  sub_1000361E0(*v14, v16);
  uint64_t v17 = Data.hexString.getter();
  uint64_t v19 = v18;
  sub_10001CFB8(v15, v16);
  *(void *)(v13 + 56) = &type metadata for String;
  *(void *)(v13 + 64) = v12;
  *(void *)(v13 + 32) = v17;
  *(void *)(v13 + 40) = v19;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  static os_log_type_t.debug.getter();
  uint64_t v20 = swift_allocObject();
  *(_OWORD *)(v20 + 16) = xmmword_101342130;
  unint64_t v21 = sub_10001CD44(v62, v63);
  uint64_t v22 = v21[2];
  unint64_t v23 = v21[3];
  sub_1000361E0(v22, v23);
  uint64_t v24 = Data.hexString.getter();
  uint64_t v26 = v25;
  sub_10001CFB8(v22, v23);
  *(void *)(v20 + 56) = &type metadata for String;
  *(void *)(v20 + 64) = v12;
  *(void *)(v20 + 32) = v24;
  *(void *)(v20 + 40) = v26;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  static os_log_type_t.debug.getter();
  uint64_t v27 = swift_allocObject();
  *(_OWORD *)(v27 + 16) = xmmword_101342130;
  unint64_t v28 = sub_10001CD44(v65, (uint64_t)v66);
  uint64_t v29 = v28[18];
  unint64_t v30 = v28[19];
  sub_1000361E0(v29, v30);
  uint64_t v31 = Data.hexString.getter();
  uint64_t v33 = v32;
  sub_10001CFB8(v29, v30);
  *(void *)(v27 + 56) = &type metadata for String;
  *(void *)(v27 + 64) = v12;
  *(void *)(v27 + 32) = v31;
  *(void *)(v27 + 40) = v33;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  static os_log_type_t.debug.getter();
  uint64_t v34 = swift_allocObject();
  *(_OWORD *)(v34 + 16) = xmmword_101342130;
  BOOL v35 = sub_10001CD44(v62, v63);
  uint64_t v36 = v35[4];
  unint64_t v37 = v35[5];
  sub_1000361E0(v36, v37);
  uint64_t v38 = Data.hexString.getter();
  uint64_t v40 = v39;
  sub_10001CFB8(v36, v37);
  *(void *)(v34 + 56) = &type metadata for String;
  *(void *)(v34 + 64) = v12;
  *(void *)(v34 + 32) = v38;
  *(void *)(v34 + 40) = v40;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v41 = sub_10001CD44(v65, (uint64_t)v66);
  uint64_t v42 = v41[30];
  unint64_t v43 = v41[31];
  unint64_t v61 = v43;
  uint64_t v44 = sub_10001CD44(v62, v63);
  uint64_t v45 = *v44;
  unint64_t v46 = v44[1];
  sub_1000361E0(v42, v43);
  sub_1000361E0(v45, v46);
  Data.append(_:)();
  sub_10001CFB8(v45, v46);
  uint64_t v47 = sub_10001CD44(v62, v63);
  uint64_t v48 = v47[2];
  unint64_t v49 = v47[3];
  sub_1000361E0(v48, v49);
  Data.append(_:)();
  sub_10001CFB8(v48, v49);
  uint64_t v50 = sub_10001CD44(v65, (uint64_t)v66);
  uint64_t v51 = v50[18];
  unint64_t v52 = v50[19];
  sub_1000361E0(v51, v52);
  Data.append(_:)();
  sub_10001CFB8(v51, v52);
  uint64_t v53 = sub_10001CD44(v62, v63);
  uint64_t v54 = v53[4];
  unint64_t v55 = v53[5];
  sub_1000361E0(v54, v55);
  Data.append(_:)();
  sub_10001CFB8(v54, v55);
  static os_log_type_t.default.getter();
  uint64_t v56 = swift_allocObject();
  *(_OWORD *)(v56 + 16) = xmmword_101342130;
  sub_1000361E0(v42, v61);
  uint64_t v57 = Data.hexString.getter();
  uint64_t v59 = v58;
  sub_10001CFB8(v42, v61);
  *(void *)(v56 + 56) = &type metadata for String;
  *(void *)(v56 + 64) = v12;
  *(void *)(v56 + 32) = v57;
  *(void *)(v56 + 40) = v59;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v65);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v62);
  return v42;
}

uint64_t sub_1004AEED4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_101636B40 != -1) {
    swift_once();
  }
  uint64_t v8 = qword_10170DF78;
  if ((unint64_t)qword_10170DF78 >> 60 == 15)
  {
    if (qword_101637320 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_100010324(v9, (uint64_t)qword_10170F098);
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      unint64_t v12 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "verifyPencilSignature: Missing SignatureVerificationKey!", v12, 2u);
      swift_slowDealloc();
    }

    char v13 = 0;
  }
  else
  {
    uint64_t v14 = qword_10170DF70;
    sub_100037A38(qword_10170DF70, qword_10170DF78);
    uint64_t v15 = (id)kSecKeyAlgorithmECDSASignatureMessageX962SHA256;
    char v13 = sub_100A8C768(v14, v8, a1, a2, a3, a4, v15);

    sub_100037A24(v14, v8);
  }
  return v13 & 1;
}

uint64_t sub_1004AF088(uint64_t a1)
{
  return a1;
}

uint64_t sub_1004AF0F4(uint64_t a1)
{
  return sub_10049FBF0(a1, *(void *)(v1 + 16), *(void (**)(char *, uint64_t, uint64_t))(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t type metadata accessor for PencilUnpairData.DeviceUnpairData()
{
  uint64_t result = qword_1016463E0;
  if (!qword_1016463E0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1004AF14C()
{
  return sub_1004AF4AC((uint64_t *)&unk_1016565A0);
}

uint64_t sub_1004AF158(uint64_t a1)
{
  return sub_1004AF41C(a1, (uint64_t *)&unk_1016565A0, (uint64_t (*)(uint64_t, uint64_t))sub_1004A03EC);
}

uint64_t sub_1004AF178()
{
  return sub_1004AF4AC((uint64_t *)&unk_1016565A0);
}

uint64_t sub_1004AF184(uint64_t a1)
{
  return sub_1004AF558(a1, (uint64_t *)&unk_1016565A0, sub_1004A0638);
}

unint64_t sub_1004AF1A4()
{
  unint64_t result = qword_101646088;
  if (!qword_101646088)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646088);
  }
  return result;
}

uint64_t sub_1004AF1F8()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1004AF238(uint64_t a1)
{
  sub_10048AA28(a1, v1[2], v1[3], (uint64_t)(v1 + 4), (uint64_t)(v1 + 9), v1[14]);
}

unint64_t sub_1004AF24C()
{
  unint64_t result = qword_1016460B0;
  if (!qword_1016460B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016460B0);
  }
  return result;
}

void *sub_1004AF2A0(void *a1)
{
  uint64_t v2 = a1[6];
  unint64_t v3 = a1[7];
  uint64_t v4 = a1[8];
  unint64_t v5 = a1[9];
  uint64_t v6 = a1[10];
  unint64_t v7 = a1[11];
  uint64_t v8 = a1[12];
  unint64_t v10 = a1[13];
  unint64_t v11 = a1[15];
  uint64_t v12 = a1[14];
  unint64_t v13 = a1[17];
  uint64_t v14 = a1[16];
  unint64_t v15 = a1[19];
  uint64_t v16 = a1[18];
  unint64_t v17 = a1[21];
  uint64_t v18 = a1[20];
  unint64_t v19 = a1[23];
  uint64_t v20 = a1[22];
  unint64_t v21 = a1[25];
  uint64_t v22 = a1[24];
  unint64_t v23 = a1[29];
  uint64_t v24 = a1[28];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000361E0(v2, v3);
  sub_1000361E0(v4, v5);
  sub_1000361E0(v6, v7);
  sub_1000361E0(v8, v10);
  sub_1000361E0(v12, v11);
  sub_1000361E0(v14, v13);
  sub_1000361E0(v16, v15);
  sub_100037A38(v18, v17);
  sub_1000361E0(v20, v19);
  sub_1000361E0(v22, v21);
  swift_bridgeObjectRetain();
  sub_100037A38(v24, v23);
  return a1;
}

uint64_t sub_1004AF3E8(uint64_t a1)
{
  return sub_10049E8AC(a1);
}

uint64_t sub_1004AF3F0()
{
  return sub_1004AF4AC(&qword_1016460C8);
}

uint64_t sub_1004AF3FC(uint64_t a1)
{
  return sub_1004AF41C(a1, &qword_1016460C8, (uint64_t (*)(uint64_t, uint64_t))sub_10049EA84);
}

uint64_t sub_1004AF41C(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v5 = *(void *)(sub_10000588C(a2) - 8);
  uint64_t v6 = v3 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return a3(a1, v6);
}

uint64_t sub_1004AF4A0()
{
  return sub_1004AF4AC(&qword_1016460C8);
}

uint64_t sub_1004AF4AC(uint64_t *a1)
{
  uint64_t v2 = sub_10000588C(a1);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 16) & ~v4;
  uint64_t v6 = v5 + *(void *)(v3 + 64);
  uint64_t v7 = v4 | 7;
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1 + v5, v2);

  return _swift_deallocObject(v1, v6, v7);
}

uint64_t sub_1004AF538(uint64_t a1)
{
  return sub_1004AF558(a1, &qword_1016460C8, sub_10049ECEC);
}

uint64_t sub_1004AF558(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v5 = *(void *)(sub_10000588C(a2) - 8);
  uint64_t v6 = v3 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return a3(a1, v6);
}

unint64_t sub_1004AF5DC()
{
  unint64_t result = qword_1016460D8;
  if (!qword_1016460D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016460D8);
  }
  return result;
}

uint64_t sub_1004AF634(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100033F68;
  return sub_10048C304(a1, v4, v5, v6);
}

uint64_t sub_1004AF6EC(uint64_t a1)
{
  return sub_10049B670(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(uint64_t **)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t sub_1004AF6FC()
{
  uint64_t v1 = sub_10000588C(&qword_1016460F8);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1004AF7CC()
{
  sub_10000588C(&qword_1016460F8);

  return sub_10049B8C0();
}

uint64_t sub_1004AF844()
{
  uint64_t v1 = sub_10000588C(&qword_1016460F8);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  unint64_t v5 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  uint64_t v6 = (uint64_t *)(v0 + v5);
  unint64_t v7 = *(void *)(v0 + v5 + 8);
  if (v7 >> 60 != 15) {
    sub_10001CFB8(*v6, v7);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001CFB8(v6[8], v6[9]);
  sub_10001CFB8(v6[10], v6[11]);
  sub_10001CFB8(v6[12], v6[13]);
  swift_bridgeObjectRelease();
  sub_10001CFB8(v6[18], v6[19]);
  sub_10001CFB8(v6[20], v6[21]);
  sub_10001CFB8(v6[22], v6[23]);
  sub_10001CFB8(v6[24], v6[25]);
  sub_10001CFB8(v6[26], v6[27]);
  unint64_t v8 = v6[29];
  if (v8 >> 60 != 15) {
    sub_10001CFB8(v6[28], v8);
  }
  sub_10001CFB8(v6[30], v6[31]);
  sub_10001CFB8(v6[32], v6[33]);
  swift_bridgeObjectRelease();
  unint64_t v9 = v6[37];
  if (v9 >> 60 != 15) {
    sub_10001CFB8(v6[36], v9);
  }

  return _swift_deallocObject(v0, ((v5 + 311) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

uint64_t sub_1004AF9FC(uint64_t a1)
{
  uint64_t v3 = *(void *)(sub_10000588C(&qword_1016460F8) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + v5);

  return sub_10049BB28(a1, v6, v1 + v4, v7, (uint64_t *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_1004AFAB8(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1004AFB18(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1004AFB80()
{
  unint64_t v1 = v0[3];
  if (v1 >> 60 != 15) {
    sub_10001CFB8(v0[2], v1);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001CFB8(v0[10], v0[11]);
  sub_10001CFB8(v0[12], v0[13]);
  sub_10001CFB8(v0[14], v0[15]);
  swift_bridgeObjectRelease();
  sub_10001CFB8(v0[20], v0[21]);
  sub_10001CFB8(v0[22], v0[23]);
  sub_10001CFB8(v0[24], v0[25]);
  sub_10001CFB8(v0[26], v0[27]);
  sub_10001CFB8(v0[28], v0[29]);
  unint64_t v2 = v0[31];
  if (v2 >> 60 != 15) {
    sub_10001CFB8(v0[30], v2);
  }
  sub_10001CFB8(v0[32], v0[33]);
  sub_10001CFB8(v0[34], v0[35]);
  swift_bridgeObjectRelease();
  unint64_t v3 = v0[39];
  if (v3 >> 60 != 15) {
    sub_10001CFB8(v0[38], v3);
  }

  return _swift_deallocObject(v0, 320, 7);
}

unint64_t sub_1004AFC70()
{
  unint64_t result = qword_101646118;
  if (!qword_101646118)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646118);
  }
  return result;
}

unint64_t sub_1004AFCCC()
{
  unint64_t result = qword_101646130;
  if (!qword_101646130)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646130);
  }
  return result;
}

unint64_t sub_1004AFD28()
{
  unint64_t result = qword_101646148;
  if (!qword_101646148)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646148);
  }
  return result;
}

unint64_t sub_1004AFD84()
{
  unint64_t result = qword_101646160;
  if (!qword_101646160)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646160);
  }
  return result;
}

unint64_t sub_1004AFDE0()
{
  unint64_t result = qword_101646178;
  if (!qword_101646178)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646178);
  }
  return result;
}

unint64_t sub_1004AFE3C()
{
  unint64_t result = qword_101646198;
  if (!qword_101646198)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646198);
  }
  return result;
}

uint64_t sub_1004AFE94(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_10001D2E4;
  return sub_10048C304(a1, v4, v5, v6);
}

unint64_t sub_1004AFF4C()
{
  unint64_t result = qword_1016461B0;
  if (!qword_1016461B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016461B0);
  }
  return result;
}

unint64_t sub_1004AFFA8()
{
  unint64_t result = qword_1016461C8;
  if (!qword_1016461C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016461C8);
  }
  return result;
}

unint64_t sub_1004B0004()
{
  unint64_t result = qword_1016461E0;
  if (!qword_1016461E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016461E0);
  }
  return result;
}

unint64_t sub_1004B0060()
{
  unint64_t result = qword_1016461F8;
  if (!qword_1016461F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016461F8);
  }
  return result;
}

unint64_t sub_1004B00BC()
{
  unint64_t result = qword_101646220;
  if (!qword_101646220)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646220);
  }
  return result;
}

unint64_t sub_1004B0118()
{
  unint64_t result = qword_101646238;
  if (!qword_101646238)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646238);
  }
  return result;
}

unint64_t sub_1004B0174()
{
  unint64_t result = qword_101646250;
  if (!qword_101646250)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646250);
  }
  return result;
}

unint64_t sub_1004B01D0()
{
  unint64_t result = qword_101646268;
  if (!qword_101646268)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646268);
  }
  return result;
}

unint64_t sub_1004B022C()
{
  unint64_t result = qword_101646280;
  if (!qword_101646280)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646280);
  }
  return result;
}

unint64_t sub_1004B0288()
{
  unint64_t result = qword_1016462B0;
  if (!qword_1016462B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016462B0);
  }
  return result;
}

unint64_t sub_1004B02E4()
{
  unint64_t result = qword_1016462D0;
  if (!qword_1016462D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016462D0);
  }
  return result;
}

unint64_t sub_1004B0340()
{
  unint64_t result = qword_1016462E8;
  if (!qword_1016462E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016462E8);
  }
  return result;
}

unint64_t sub_1004B039C()
{
  unint64_t result = qword_101646300;
  if (!qword_101646300)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646300);
  }
  return result;
}

unint64_t sub_1004B03F8()
{
  unint64_t result = qword_101646318;
  if (!qword_101646318)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646318);
  }
  return result;
}

unint64_t sub_1004B0454()
{
  unint64_t result = qword_101646338;
  if (!qword_101646338)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646338);
  }
  return result;
}

unint64_t sub_1004B04B0()
{
  unint64_t result = qword_101646350;
  if (!qword_101646350)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646350);
  }
  return result;
}

uint64_t sub_1004B050C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_1004B0574()
{
  unint64_t result = qword_101646368;
  if (!qword_101646368)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646368);
  }
  return result;
}

unint64_t sub_1004B05D0()
{
  unint64_t result = qword_101646378;
  if (!qword_101646378)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646378);
  }
  return result;
}

uint64_t sub_1004B062C()
{
  swift_release();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 32);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 72);

  return _swift_deallocObject(v0, 120, 7);
}

uint64_t destroy for PencilPairingCheckData(uint64_t *a1)
{
  unint64_t v2 = a1[1];
  if (v2 >> 60 != 15) {
    sub_10001CFB8(*a1, v2);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001CFB8(a1[8], a1[9]);
  sub_10001CFB8(a1[10], a1[11]);
  sub_10001CFB8(a1[12], a1[13]);
  swift_bridgeObjectRelease();
  sub_10001CFB8(a1[18], a1[19]);
  sub_10001CFB8(a1[20], a1[21]);
  sub_10001CFB8(a1[22], a1[23]);
  sub_10001CFB8(a1[24], a1[25]);
  sub_10001CFB8(a1[26], a1[27]);
  unint64_t v3 = a1[29];
  if (v3 >> 60 != 15) {
    sub_10001CFB8(a1[28], v3);
  }
  sub_10001CFB8(a1[30], a1[31]);
  sub_10001CFB8(a1[32], a1[33]);
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v5 = a1[37];
  if (v5 >> 60 != 15)
  {
    uint64_t v6 = a1[36];
    return sub_10001CFB8(v6, v5);
  }
  return result;
}

uint64_t initializeWithCopy for PencilPairingCheckData(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = a2[1];
  if (v4 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  else
  {
    uint64_t v5 = *a2;
    sub_1000361E0(*a2, a2[1]);
    *(void *)a1 = v5;
    *(void *)(a1 + 8) = v4;
  }
  uint64_t v6 = a2[3];
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = v6;
  uint64_t v7 = a2[5];
  *(void *)(a1 + 32) = a2[4];
  *(void *)(a1 + 40) = v7;
  uint64_t v8 = a2[7];
  *(void *)(a1 + 48) = a2[6];
  *(void *)(a1 + 56) = v8;
  uint64_t v9 = a2[8];
  unint64_t v10 = a2[9];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000361E0(v9, v10);
  *(void *)(a1 + 64) = v9;
  *(void *)(a1 + 72) = v10;
  uint64_t v11 = a2[10];
  unint64_t v12 = a2[11];
  sub_1000361E0(v11, v12);
  *(void *)(a1 + 80) = v11;
  *(void *)(a1 + 88) = v12;
  uint64_t v13 = a2[12];
  unint64_t v14 = a2[13];
  sub_1000361E0(v13, v14);
  *(void *)(a1 + 96) = v13;
  *(void *)(a1 + 104) = v14;
  *(void *)(a1 + 112) = a2[14];
  *(unsigned char *)(a1 + 120) = *((unsigned char *)a2 + 120);
  uint64_t v15 = a2[17];
  *(void *)(a1 + 128) = a2[16];
  *(void *)(a1 + 136) = v15;
  uint64_t v16 = a2[18];
  unint64_t v17 = a2[19];
  swift_bridgeObjectRetain();
  sub_1000361E0(v16, v17);
  *(void *)(a1 + 144) = v16;
  *(void *)(a1 + 152) = v17;
  uint64_t v18 = a2[20];
  unint64_t v19 = a2[21];
  sub_1000361E0(v18, v19);
  *(void *)(a1 + 160) = v18;
  *(void *)(a1 + 168) = v19;
  uint64_t v20 = a2[22];
  unint64_t v21 = a2[23];
  sub_1000361E0(v20, v21);
  *(void *)(a1 + 176) = v20;
  *(void *)(a1 + 184) = v21;
  uint64_t v22 = a2[24];
  unint64_t v23 = a2[25];
  sub_1000361E0(v22, v23);
  *(void *)(a1 + 192) = v22;
  *(void *)(a1 + 200) = v23;
  uint64_t v24 = a2[26];
  unint64_t v25 = a2[27];
  sub_1000361E0(v24, v25);
  *(void *)(a1 + 208) = v24;
  *(void *)(a1 + 216) = v25;
  uint64_t v26 = a2 + 28;
  unint64_t v27 = a2[29];
  if (v27 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 224) = *(_OWORD *)v26;
  }
  else
  {
    uint64_t v28 = *v26;
    sub_1000361E0(*v26, a2[29]);
    *(void *)(a1 + 224) = v28;
    *(void *)(a1 + 232) = v27;
  }
  uint64_t v29 = a2[30];
  unint64_t v30 = a2[31];
  sub_1000361E0(v29, v30);
  *(void *)(a1 + 240) = v29;
  *(void *)(a1 + 248) = v30;
  uint64_t v31 = a2[32];
  unint64_t v32 = a2[33];
  sub_1000361E0(v31, v32);
  *(void *)(a1 + 256) = v31;
  *(void *)(a1 + 264) = v32;
  uint64_t v33 = a2[35];
  *(void *)(a1 + 272) = a2[34];
  *(void *)(a1 + 280) = v33;
  uint64_t v34 = a2 + 36;
  unint64_t v35 = a2[37];
  swift_bridgeObjectRetain();
  if (v35 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 288) = *v34;
  }
  else
  {
    uint64_t v36 = *(void *)v34;
    sub_1000361E0(v36, v35);
    *(void *)(a1 + 288) = v36;
    *(void *)(a1 + 296) = v35;
  }
  return a1;
}

uint64_t assignWithCopy for PencilPairingCheckData(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a2 + 8);
  if (*(void *)(a1 + 8) >> 60 == 15)
  {
    if (v4 >> 60 != 15)
    {
      uint64_t v5 = *(void *)a2;
      sub_1000361E0(*(void *)a2, *(void *)(a2 + 8));
      *(void *)a1 = v5;
      *(void *)(a1 + 8) = v4;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v4 >> 60 == 15)
  {
    sub_1001356D0(a1);
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  uint64_t v6 = *(void *)a2;
  sub_1000361E0(*(void *)a2, *(void *)(a2 + 8));
  uint64_t v7 = *(void *)a1;
  unint64_t v8 = *(void *)(a1 + 8);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v4;
  sub_10001CFB8(v7, v8);
LABEL_8:
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 64);
  unint64_t v10 = *(void *)(a2 + 72);
  sub_1000361E0(v9, v10);
  uint64_t v11 = *(void *)(a1 + 64);
  unint64_t v12 = *(void *)(a1 + 72);
  *(void *)(a1 + 64) = v9;
  *(void *)(a1 + 72) = v10;
  sub_10001CFB8(v11, v12);
  uint64_t v13 = *(void *)(a2 + 80);
  unint64_t v14 = *(void *)(a2 + 88);
  sub_1000361E0(v13, v14);
  uint64_t v15 = *(void *)(a1 + 80);
  unint64_t v16 = *(void *)(a1 + 88);
  *(void *)(a1 + 80) = v13;
  *(void *)(a1 + 88) = v14;
  sub_10001CFB8(v15, v16);
  uint64_t v17 = *(void *)(a2 + 96);
  unint64_t v18 = *(void *)(a2 + 104);
  sub_1000361E0(v17, v18);
  uint64_t v19 = *(void *)(a1 + 96);
  unint64_t v20 = *(void *)(a1 + 104);
  *(void *)(a1 + 96) = v17;
  *(void *)(a1 + 104) = v18;
  sub_10001CFB8(v19, v20);
  uint64_t v21 = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 112) = v21;
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  uint64_t v22 = *(void *)(a2 + 144);
  unint64_t v23 = *(void *)(a2 + 152);
  sub_1000361E0(v22, v23);
  uint64_t v24 = *(void *)(a1 + 144);
  unint64_t v25 = *(void *)(a1 + 152);
  *(void *)(a1 + 144) = v22;
  *(void *)(a1 + 152) = v23;
  sub_10001CFB8(v24, v25);
  uint64_t v26 = *(void *)(a2 + 160);
  unint64_t v27 = *(void *)(a2 + 168);
  sub_1000361E0(v26, v27);
  uint64_t v28 = *(void *)(a1 + 160);
  unint64_t v29 = *(void *)(a1 + 168);
  *(void *)(a1 + 160) = v26;
  *(void *)(a1 + 168) = v27;
  sub_10001CFB8(v28, v29);
  uint64_t v30 = *(void *)(a2 + 176);
  unint64_t v31 = *(void *)(a2 + 184);
  sub_1000361E0(v30, v31);
  uint64_t v32 = *(void *)(a1 + 176);
  unint64_t v33 = *(void *)(a1 + 184);
  *(void *)(a1 + 176) = v30;
  *(void *)(a1 + 184) = v31;
  sub_10001CFB8(v32, v33);
  uint64_t v34 = *(void *)(a2 + 192);
  unint64_t v35 = *(void *)(a2 + 200);
  sub_1000361E0(v34, v35);
  uint64_t v36 = *(void *)(a1 + 192);
  unint64_t v37 = *(void *)(a1 + 200);
  *(void *)(a1 + 192) = v34;
  *(void *)(a1 + 200) = v35;
  sub_10001CFB8(v36, v37);
  uint64_t v38 = *(void *)(a2 + 208);
  unint64_t v39 = *(void *)(a2 + 216);
  sub_1000361E0(v38, v39);
  uint64_t v40 = *(void *)(a1 + 208);
  unint64_t v41 = *(void *)(a1 + 216);
  *(void *)(a1 + 208) = v38;
  *(void *)(a1 + 216) = v39;
  sub_10001CFB8(v40, v41);
  uint64_t v42 = (uint64_t *)(a2 + 224);
  unint64_t v43 = *(void *)(a2 + 232);
  if (*(void *)(a1 + 232) >> 60 == 15)
  {
    if (v43 >> 60 != 15)
    {
      uint64_t v44 = *v42;
      sub_1000361E0(*v42, *(void *)(a2 + 232));
      *(void *)(a1 + 224) = v44;
      *(void *)(a1 + 232) = v43;
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v43 >> 60 == 15)
  {
    sub_1001356D0(a1 + 224);
LABEL_13:
    *(_OWORD *)(a1 + 224) = *(_OWORD *)v42;
    goto LABEL_15;
  }
  uint64_t v45 = *v42;
  sub_1000361E0(*v42, *(void *)(a2 + 232));
  uint64_t v46 = *(void *)(a1 + 224);
  unint64_t v47 = *(void *)(a1 + 232);
  *(void *)(a1 + 224) = v45;
  *(void *)(a1 + 232) = v43;
  sub_10001CFB8(v46, v47);
LABEL_15:
  uint64_t v48 = *(void *)(a2 + 240);
  unint64_t v49 = *(void *)(a2 + 248);
  sub_1000361E0(v48, v49);
  uint64_t v50 = *(void *)(a1 + 240);
  unint64_t v51 = *(void *)(a1 + 248);
  *(void *)(a1 + 240) = v48;
  *(void *)(a1 + 248) = v49;
  sub_10001CFB8(v50, v51);
  uint64_t v52 = *(void *)(a2 + 256);
  unint64_t v53 = *(void *)(a2 + 264);
  sub_1000361E0(v52, v53);
  uint64_t v54 = *(void *)(a1 + 256);
  unint64_t v55 = *(void *)(a1 + 264);
  *(void *)(a1 + 256) = v52;
  *(void *)(a1 + 264) = v53;
  sub_10001CFB8(v54, v55);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v56 = (uint64_t *)(a2 + 288);
  unint64_t v57 = *(void *)(a2 + 296);
  if (*(void *)(a1 + 296) >> 60 != 15)
  {
    if (v57 >> 60 != 15)
    {
      uint64_t v59 = *v56;
      sub_1000361E0(*v56, v57);
      uint64_t v60 = *(void *)(a1 + 288);
      unint64_t v61 = *(void *)(a1 + 296);
      *(void *)(a1 + 288) = v59;
      *(void *)(a1 + 296) = v57;
      sub_10001CFB8(v60, v61);
      return a1;
    }
    sub_1001E132C(a1 + 288);
    goto LABEL_20;
  }
  if (v57 >> 60 == 15)
  {
LABEL_20:
    *(_OWORD *)(a1 + 288) = *(_OWORD *)v56;
    return a1;
  }
  uint64_t v58 = *v56;
  sub_1000361E0(*v56, v57);
  *(void *)(a1 + 288) = v58;
  *(void *)(a1 + 296) = v57;
  return a1;
}

void *initializeWithTake for PencilPairingCheckData(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x130uLL);
}

uint64_t assignWithTake for PencilPairingCheckData(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v5 = *(void *)(a2 + 8);
  if (v5 >> 60 == 15)
  {
    sub_1001356D0(a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_6;
  }
  uint64_t v6 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  sub_10001CFB8(v6, v4);
LABEL_6:
  uint64_t v7 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v7;
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v9;
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a1 + 64);
  unint64_t v11 = *(void *)(a1 + 72);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  sub_10001CFB8(v10, v11);
  uint64_t v12 = *(void *)(a1 + 80);
  unint64_t v13 = *(void *)(a1 + 88);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  sub_10001CFB8(v12, v13);
  uint64_t v14 = *(void *)(a1 + 96);
  unint64_t v15 = *(void *)(a1 + 104);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  sub_10001CFB8(v14, v15);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRelease();
  uint64_t v16 = *(void *)(a2 + 152);
  uint64_t v17 = *(void *)(a1 + 144);
  unint64_t v18 = *(void *)(a1 + 152);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = v16;
  sub_10001CFB8(v17, v18);
  uint64_t v19 = *(void *)(a1 + 160);
  unint64_t v20 = *(void *)(a1 + 168);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  sub_10001CFB8(v19, v20);
  uint64_t v21 = *(void *)(a1 + 176);
  unint64_t v22 = *(void *)(a1 + 184);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  sub_10001CFB8(v21, v22);
  uint64_t v23 = *(void *)(a1 + 192);
  unint64_t v24 = *(void *)(a1 + 200);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  sub_10001CFB8(v23, v24);
  uint64_t v25 = *(void *)(a1 + 208);
  unint64_t v26 = *(void *)(a1 + 216);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  sub_10001CFB8(v25, v26);
  unint64_t v27 = (_OWORD *)(a2 + 224);
  unint64_t v28 = *(void *)(a1 + 232);
  if (v28 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)(a1 + 224) = *v27;
    goto LABEL_11;
  }
  unint64_t v29 = *(void *)(a2 + 232);
  if (v29 >> 60 == 15)
  {
    sub_1001356D0(a1 + 224);
    goto LABEL_9;
  }
  uint64_t v30 = *(void *)(a1 + 224);
  *(void *)(a1 + 224) = *(void *)v27;
  *(void *)(a1 + 232) = v29;
  sub_10001CFB8(v30, v28);
LABEL_11:
  uint64_t v31 = *(void *)(a1 + 240);
  unint64_t v32 = *(void *)(a1 + 248);
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  sub_10001CFB8(v31, v32);
  uint64_t v33 = *(void *)(a1 + 256);
  unint64_t v34 = *(void *)(a1 + 264);
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  sub_10001CFB8(v33, v34);
  uint64_t v35 = *(void *)(a2 + 280);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a1 + 280) = v35;
  swift_bridgeObjectRelease();
  uint64_t v36 = (void *)(a2 + 288);
  unint64_t v37 = *(void *)(a1 + 296);
  if (v37 >> 60 != 15)
  {
    unint64_t v38 = *(void *)(a2 + 296);
    if (v38 >> 60 != 15)
    {
      uint64_t v39 = *(void *)(a1 + 288);
      *(void *)(a1 + 288) = *v36;
      *(void *)(a1 + 296) = v38;
      sub_10001CFB8(v39, v37);
      return a1;
    }
    sub_1001E132C(a1 + 288);
  }
  *(_OWORD *)(a1 + 288) = *(_OWORD *)v36;
  return a1;
}

uint64_t getEnumTagSinglePayload for PencilPairingCheckData(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 304)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 128);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PencilPairingCheckData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 296) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 304) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 128) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 304) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PencilPairingCheckData()
{
  return &type metadata for PencilPairingCheckData;
}

uint64_t destroy for PencilPairingAckData(void *a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001CFB8(a1[6], a1[7]);
  sub_10001CFB8(a1[8], a1[9]);
  sub_10001CFB8(a1[10], a1[11]);
  sub_10001CFB8(a1[12], a1[13]);
  sub_10001CFB8(a1[14], a1[15]);
  sub_10001CFB8(a1[16], a1[17]);
  sub_10001CFB8(a1[18], a1[19]);
  unint64_t v2 = a1[21];
  if (v2 >> 60 != 15) {
    sub_10001CFB8(a1[20], v2);
  }
  sub_10001CFB8(a1[22], a1[23]);
  sub_10001CFB8(a1[24], a1[25]);
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v4 = a1[29];
  if (v4 >> 60 != 15)
  {
    uint64_t v5 = a1[28];
    return sub_10001CFB8(v5, v4);
  }
  return result;
}

uint64_t initializeWithCopy for PencilPairingAckData(uint64_t a1, void *a2)
{
  uint64_t v4 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = a2[3];
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = v5;
  uint64_t v6 = a2[5];
  *(void *)(a1 + 32) = a2[4];
  *(void *)(a1 + 40) = v6;
  uint64_t v7 = a2[6];
  unint64_t v8 = a2[7];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000361E0(v7, v8);
  *(void *)(a1 + 48) = v7;
  *(void *)(a1 + 56) = v8;
  uint64_t v9 = a2[8];
  unint64_t v10 = a2[9];
  sub_1000361E0(v9, v10);
  *(void *)(a1 + 64) = v9;
  *(void *)(a1 + 72) = v10;
  uint64_t v11 = a2[10];
  unint64_t v12 = a2[11];
  sub_1000361E0(v11, v12);
  *(void *)(a1 + 80) = v11;
  *(void *)(a1 + 88) = v12;
  uint64_t v13 = a2[12];
  unint64_t v14 = a2[13];
  sub_1000361E0(v13, v14);
  *(void *)(a1 + 96) = v13;
  *(void *)(a1 + 104) = v14;
  uint64_t v15 = a2[14];
  unint64_t v16 = a2[15];
  sub_1000361E0(v15, v16);
  *(void *)(a1 + 112) = v15;
  *(void *)(a1 + 120) = v16;
  uint64_t v17 = a2[16];
  unint64_t v18 = a2[17];
  sub_1000361E0(v17, v18);
  *(void *)(a1 + 128) = v17;
  *(void *)(a1 + 136) = v18;
  uint64_t v19 = a2[18];
  unint64_t v20 = a2[19];
  sub_1000361E0(v19, v20);
  *(void *)(a1 + 144) = v19;
  *(void *)(a1 + 152) = v20;
  uint64_t v21 = a2 + 20;
  unint64_t v22 = a2[21];
  if (v22 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 160) = *(_OWORD *)v21;
  }
  else
  {
    uint64_t v23 = *v21;
    sub_1000361E0(*v21, a2[21]);
    *(void *)(a1 + 160) = v23;
    *(void *)(a1 + 168) = v22;
  }
  uint64_t v24 = a2[22];
  unint64_t v25 = a2[23];
  sub_1000361E0(v24, v25);
  *(void *)(a1 + 176) = v24;
  *(void *)(a1 + 184) = v25;
  uint64_t v26 = a2[24];
  unint64_t v27 = a2[25];
  sub_1000361E0(v26, v27);
  *(void *)(a1 + 192) = v26;
  *(void *)(a1 + 200) = v27;
  uint64_t v28 = a2[27];
  *(void *)(a1 + 208) = a2[26];
  *(void *)(a1 + 216) = v28;
  unint64_t v29 = a2 + 28;
  unint64_t v30 = a2[29];
  swift_bridgeObjectRetain();
  if (v30 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 224) = *v29;
  }
  else
  {
    uint64_t v31 = *(void *)v29;
    sub_1000361E0(v31, v30);
    *(void *)(a1 + 224) = v31;
    *(void *)(a1 + 232) = v30;
  }
  return a1;
}

void *assignWithCopy for PencilPairingAckData(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[6];
  unint64_t v5 = a2[7];
  sub_1000361E0(v4, v5);
  uint64_t v6 = a1[6];
  unint64_t v7 = a1[7];
  a1[6] = v4;
  a1[7] = v5;
  sub_10001CFB8(v6, v7);
  uint64_t v8 = a2[8];
  unint64_t v9 = a2[9];
  sub_1000361E0(v8, v9);
  uint64_t v10 = a1[8];
  unint64_t v11 = a1[9];
  a1[8] = v8;
  a1[9] = v9;
  sub_10001CFB8(v10, v11);
  uint64_t v12 = a2[10];
  unint64_t v13 = a2[11];
  sub_1000361E0(v12, v13);
  uint64_t v14 = a1[10];
  unint64_t v15 = a1[11];
  a1[10] = v12;
  a1[11] = v13;
  sub_10001CFB8(v14, v15);
  uint64_t v16 = a2[12];
  unint64_t v17 = a2[13];
  sub_1000361E0(v16, v17);
  uint64_t v18 = a1[12];
  unint64_t v19 = a1[13];
  a1[12] = v16;
  a1[13] = v17;
  sub_10001CFB8(v18, v19);
  uint64_t v20 = a2[14];
  unint64_t v21 = a2[15];
  sub_1000361E0(v20, v21);
  uint64_t v22 = a1[14];
  unint64_t v23 = a1[15];
  a1[14] = v20;
  a1[15] = v21;
  sub_10001CFB8(v22, v23);
  uint64_t v24 = a2[16];
  unint64_t v25 = a2[17];
  sub_1000361E0(v24, v25);
  uint64_t v26 = a1[16];
  unint64_t v27 = a1[17];
  a1[16] = v24;
  a1[17] = v25;
  sub_10001CFB8(v26, v27);
  uint64_t v28 = a2[18];
  unint64_t v29 = a2[19];
  sub_1000361E0(v28, v29);
  uint64_t v30 = a1[18];
  unint64_t v31 = a1[19];
  a1[18] = v28;
  a1[19] = v29;
  sub_10001CFB8(v30, v31);
  unint64_t v32 = a2 + 20;
  unint64_t v33 = a2[21];
  if (a1[21] >> 60 == 15)
  {
    if (v33 >> 60 != 15)
    {
      uint64_t v34 = *v32;
      sub_1000361E0(*v32, a2[21]);
      a1[20] = v34;
      a1[21] = v33;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v33 >> 60 == 15)
  {
    sub_1001356D0((uint64_t)(a1 + 20));
LABEL_6:
    *((_OWORD *)a1 + 10) = *(_OWORD *)v32;
    goto LABEL_8;
  }
  uint64_t v35 = *v32;
  sub_1000361E0(*v32, a2[21]);
  uint64_t v36 = a1[20];
  unint64_t v37 = a1[21];
  a1[20] = v35;
  a1[21] = v33;
  sub_10001CFB8(v36, v37);
LABEL_8:
  uint64_t v38 = a2[22];
  unint64_t v39 = a2[23];
  sub_1000361E0(v38, v39);
  uint64_t v40 = a1[22];
  unint64_t v41 = a1[23];
  a1[22] = v38;
  a1[23] = v39;
  sub_10001CFB8(v40, v41);
  uint64_t v42 = a2[24];
  unint64_t v43 = a2[25];
  sub_1000361E0(v42, v43);
  uint64_t v44 = a1[24];
  unint64_t v45 = a1[25];
  a1[24] = v42;
  a1[25] = v43;
  sub_10001CFB8(v44, v45);
  a1[26] = a2[26];
  a1[27] = a2[27];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v46 = a2 + 28;
  unint64_t v47 = a2[29];
  if (a1[29] >> 60 != 15)
  {
    if (v47 >> 60 != 15)
    {
      uint64_t v49 = *v46;
      sub_1000361E0(*v46, v47);
      uint64_t v50 = a1[28];
      unint64_t v51 = a1[29];
      a1[28] = v49;
      a1[29] = v47;
      sub_10001CFB8(v50, v51);
      return a1;
    }
    sub_1001E132C((uint64_t)(a1 + 28));
    goto LABEL_13;
  }
  if (v47 >> 60 == 15)
  {
LABEL_13:
    *((_OWORD *)a1 + 14) = *(_OWORD *)v46;
    return a1;
  }
  uint64_t v48 = *v46;
  sub_1000361E0(*v46, v47);
  a1[28] = v48;
  a1[29] = v47;
  return a1;
}

__n128 initializeWithTake for PencilPairingAckData(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  long long v4 = a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  long long v7 = a2[7];
  long long v8 = a2[8];
  long long v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  __n128 result = (__n128)a2[11];
  long long v11 = a2[12];
  long long v12 = a2[14];
  *(_OWORD *)(a1 + 208) = a2[13];
  *(_OWORD *)(a1 + 224) = v12;
  *(__n128 *)(a1 + 176) = result;
  *(_OWORD *)(a1 + 192) = v11;
  return result;
}

void *assignWithTake for PencilPairingAckData(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  a1[4] = *(void *)(a2 + 32);
  a1[5] = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = a1[6];
  unint64_t v8 = a1[7];
  *((_OWORD *)a1 + 3) = *(_OWORD *)(a2 + 48);
  sub_10001CFB8(v7, v8);
  uint64_t v9 = a1[8];
  unint64_t v10 = a1[9];
  *((_OWORD *)a1 + 4) = *(_OWORD *)(a2 + 64);
  sub_10001CFB8(v9, v10);
  uint64_t v11 = a1[10];
  unint64_t v12 = a1[11];
  *((_OWORD *)a1 + 5) = *(_OWORD *)(a2 + 80);
  sub_10001CFB8(v11, v12);
  uint64_t v13 = a1[12];
  unint64_t v14 = a1[13];
  *((_OWORD *)a1 + 6) = *(_OWORD *)(a2 + 96);
  sub_10001CFB8(v13, v14);
  uint64_t v15 = a1[14];
  unint64_t v16 = a1[15];
  *((_OWORD *)a1 + 7) = *(_OWORD *)(a2 + 112);
  sub_10001CFB8(v15, v16);
  uint64_t v17 = a1[16];
  unint64_t v18 = a1[17];
  *((_OWORD *)a1 + 8) = *(_OWORD *)(a2 + 128);
  sub_10001CFB8(v17, v18);
  uint64_t v19 = a1[18];
  unint64_t v20 = a1[19];
  *((_OWORD *)a1 + 9) = *(_OWORD *)(a2 + 144);
  sub_10001CFB8(v19, v20);
  unint64_t v21 = (_OWORD *)(a2 + 160);
  unint64_t v22 = a1[21];
  if (v22 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v23 = *(void *)(a2 + 168);
  if (v23 >> 60 == 15)
  {
    sub_1001356D0((uint64_t)(a1 + 20));
LABEL_4:
    *((_OWORD *)a1 + 10) = *v21;
    goto LABEL_6;
  }
  uint64_t v24 = a1[20];
  a1[20] = *(void *)v21;
  a1[21] = v23;
  sub_10001CFB8(v24, v22);
LABEL_6:
  uint64_t v25 = a1[22];
  unint64_t v26 = a1[23];
  *((_OWORD *)a1 + 11) = *(_OWORD *)(a2 + 176);
  sub_10001CFB8(v25, v26);
  uint64_t v27 = a1[24];
  unint64_t v28 = a1[25];
  *((_OWORD *)a1 + 12) = *(_OWORD *)(a2 + 192);
  sub_10001CFB8(v27, v28);
  uint64_t v29 = *(void *)(a2 + 216);
  a1[26] = *(void *)(a2 + 208);
  a1[27] = v29;
  swift_bridgeObjectRelease();
  uint64_t v30 = (void *)(a2 + 224);
  unint64_t v31 = a1[29];
  if (v31 >> 60 != 15)
  {
    unint64_t v32 = *(void *)(a2 + 232);
    if (v32 >> 60 != 15)
    {
      uint64_t v33 = a1[28];
      a1[28] = *v30;
      a1[29] = v32;
      sub_10001CFB8(v33, v31);
      return a1;
    }
    sub_1001E132C((uint64_t)(a1 + 28));
  }
  *((_OWORD *)a1 + 14) = *(_OWORD *)v30;
  return a1;
}

uint64_t getEnumTagSinglePayload for PencilPairingAckData(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 240)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for PencilPairingAckData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 232) = 0;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 240) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 240) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PencilPairingAckData()
{
  return &type metadata for PencilPairingAckData;
}

uint64_t destroy for PencilUnpairData()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PencilUnpairData(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PencilUnpairData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for InitialPairingInfo(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t assignWithTake for PencilUnpairData(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PencilUnpairData(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 56);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PencilUnpairData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 56) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PencilUnpairData()
{
  return &type metadata for PencilUnpairData;
}

uint64_t *sub_1004B1AB4(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_1000361E0(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a3[5];
    unint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UUID();
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      uint64_t v14 = sub_10000588C(&qword_101638CF0);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    uint64_t v16 = a3[6];
    uint64_t v17 = a3[7];
    unint64_t v18 = (uint64_t *)((char *)a1 + v16);
    uint64_t v19 = (uint64_t *)((char *)a2 + v16);
    uint64_t v20 = v19[1];
    *unint64_t v18 = *v19;
    v18[1] = v20;
    unint64_t v21 = (uint64_t *)((char *)a1 + v17);
    unint64_t v22 = (uint64_t *)((char *)a2 + v17);
    uint64_t v23 = v22[1];
    *unint64_t v21 = *v22;
    v21[1] = v23;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1004B1C64(uint64_t a1, uint64_t a2)
{
  sub_10001CFB8(*(void *)a1, *(void *)(a1 + 8));
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t *sub_1004B1D4C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000361E0(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  unint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    uint64_t v13 = sub_10000588C(&qword_101638CF0);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v14 = a3[6];
  uint64_t v15 = a3[7];
  uint64_t v16 = (uint64_t *)((char *)a1 + v14);
  uint64_t v17 = (uint64_t *)((char *)a2 + v14);
  uint64_t v18 = v17[1];
  *uint64_t v16 = *v17;
  v16[1] = v18;
  uint64_t v19 = (uint64_t *)((char *)a1 + v15);
  uint64_t v20 = (uint64_t *)((char *)a2 + v15);
  uint64_t v21 = v20[1];
  *uint64_t v19 = *v20;
  v19[1] = v21;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *sub_1004B1EAC(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000361E0(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10001CFB8(v8, v9);
  uint64_t v10 = a3[5];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 24))(v11, v12, v13);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v11, v13);
    goto LABEL_6;
  }
  if (v17)
  {
LABEL_6:
    uint64_t v18 = sub_10000588C(&qword_101638CF0);
    memcpy(v11, v12, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
LABEL_7:
  uint64_t v19 = a3[6];
  uint64_t v20 = (uint64_t *)((char *)a1 + v19);
  uint64_t v21 = (uint64_t *)((char *)a2 + v19);
  *uint64_t v20 = *v21;
  v20[1] = v21[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v22 = a3[7];
  uint64_t v23 = (uint64_t *)((char *)a1 + v22);
  uint64_t v24 = (uint64_t *)((char *)a2 + v22);
  *uint64_t v23 = *v24;
  v23[1] = v24[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_1004B20A0(_OWORD *a1, _OWORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  unint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    uint64_t v11 = sub_10000588C(&qword_101638CF0);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v12 = a3[7];
  *(_OWORD *)((char *)a1 + a3[6]) = *(_OWORD *)((char *)a2 + a3[6]);
  *(_OWORD *)((char *)a1 + v12) = *(_OWORD *)((char *)a2 + v12);
  return a1;
}

uint64_t *sub_1004B21D8(uint64_t *a1, _OWORD *a2, int *a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_10001CFB8(v6, v7);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v9, v10, v11);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    uint64_t v16 = sub_10000588C(&qword_101638CF0);
    memcpy(v9, v10, *(void *)(*(void *)(v16 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
LABEL_7:
  uint64_t v17 = a3[6];
  uint64_t v18 = (uint64_t *)((char *)a1 + v17);
  uint64_t v19 = (uint64_t *)((char *)a2 + v17);
  uint64_t v21 = *v19;
  uint64_t v20 = v19[1];
  *uint64_t v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease();
  uint64_t v22 = a3[7];
  uint64_t v23 = (uint64_t *)((char *)a1 + v22);
  uint64_t v24 = (uint64_t *)((char *)a2 + v22);
  uint64_t v26 = *v24;
  uint64_t v25 = v24[1];
  *uint64_t v23 = v26;
  v23[1] = v25;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1004B23A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1004B23B8);
}

uint64_t sub_1004B23B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000588C(&qword_101638CF0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 24) + 8);
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    return (v12 + 1);
  }
}

uint64_t sub_1004B2484(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1004B2498);
}

uint64_t sub_1004B2498(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = sub_10000588C(&qword_101638CF0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24) + 8) = (a2 - 1);
  }
  return result;
}

void sub_1004B2560()
{
  sub_1003426B0();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

unint64_t sub_1004B2604()
{
  unint64_t result = qword_101646428;
  if (!qword_101646428)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646428);
  }
  return result;
}

unint64_t sub_1004B2658()
{
  unint64_t result = qword_101646430;
  if (!qword_101646430)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646430);
  }
  return result;
}

unint64_t sub_1004B26AC()
{
  unint64_t result = qword_101646440;
  if (!qword_101646440)
  {
    sub_10000592C(&qword_101646438);
    sub_1004B27A4(&qword_101646448, (void (*)(uint64_t))type metadata accessor for PencilUnpairData.DeviceUnpairData);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646440);
  }
  return result;
}

unint64_t sub_1004B2750()
{
  unint64_t result = qword_101646458;
  if (!qword_101646458)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646458);
  }
  return result;
}

uint64_t sub_1004B27A4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for PencilUnpairData.DeviceUnpairData.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1004B28B8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PencilUnpairData.DeviceUnpairData.CodingKeys()
{
  return &type metadata for PencilUnpairData.DeviceUnpairData.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for PencilUnpairData.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1004B29BCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PencilUnpairData.CodingKeys()
{
  return &type metadata for PencilUnpairData.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for PencilUnpairContext(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1004B2AC0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PencilUnpairContext()
{
  return &type metadata for PencilUnpairContext;
}

unint64_t sub_1004B2AFC()
{
  unint64_t result = qword_101646460;
  if (!qword_101646460)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646460);
  }
  return result;
}

unint64_t sub_1004B2B54()
{
  unint64_t result = qword_101646468;
  if (!qword_101646468)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646468);
  }
  return result;
}

unint64_t sub_1004B2BAC()
{
  unint64_t result = qword_101646470;
  if (!qword_101646470)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646470);
  }
  return result;
}

unint64_t sub_1004B2C04()
{
  unint64_t result = qword_101646478;
  if (!qword_101646478)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646478);
  }
  return result;
}

unint64_t sub_1004B2C5C()
{
  unint64_t result = qword_101646480;
  if (!qword_101646480)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646480);
  }
  return result;
}

unint64_t sub_1004B2CB4()
{
  unint64_t result = qword_101646488;
  if (!qword_101646488)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646488);
  }
  return result;
}

unint64_t sub_1004B2D0C()
{
  unint64_t result = qword_101646490;
  if (!qword_101646490)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646490);
  }
  return result;
}

unint64_t sub_1004B2D60()
{
  unint64_t result = qword_101646498;
  if (!qword_101646498)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646498);
  }
  return result;
}

uint64_t sub_1004B2DB8@<X0>(uint64_t a1@<X8>)
{
  return sub_1004B2DE0(a1);
}

uint64_t sub_1004B2DCC@<X0>(uint64_t a1@<X8>)
{
  return sub_1004B2DE0(a1);
}

uint64_t sub_1004B2DE0@<X0>(uint64_t a1@<X8>)
{
  id v2 = [self standardUserDefaults];
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v2 valueForKey:v3];

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v9, 0, sizeof(v9));
  }
  sub_10001D608((uint64_t)v9, (uint64_t)v10, (uint64_t *)&unk_101644360);
  if (v11)
  {
    uint64_t v5 = type metadata accessor for Date();
    int v6 = swift_dynamicCast();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56))(a1, v6 ^ 1u, 1, v5);
  }
  else
  {
    sub_10001DAB4((uint64_t)v10, (uint64_t *)&unk_101644360);
    uint64_t v8 = type metadata accessor for Date();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56))(a1, 1, 1, v8);
  }
}

uint64_t sub_1004B2F60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  *(void *)(v3 + 16) = 0;
  sub_10000588C(&qword_101646650);
  swift_allocObject();
  uint64_t v8 = PassthroughSubject.init()();
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 40) = 0;
  *(void *)(v3 + 24) = v8;
  if (qword_101637680 != -1) {
    swift_once();
  }
  swift_retain();
  AnyCurrentValuePublisher.value.getter();
  swift_release();
  *(unsigned char *)(v3 + 48) = v15;
  sub_10001D608(a1, v3 + 72, &qword_1016549D0);
  *(void *)(v3 + 56) = a2;
  *(void *)(v3 + 64) = a3;
  swift_allocObject();
  swift_weakInit();
  sub_100062734(&qword_101646658, &qword_101646650);
  swift_retain();
  swift_retain();
  uint64_t v9 = Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  *(void *)(v4 + 32) = v9;
  swift_release();
  swift_retain();
  AnyCurrentValuePublisher.publisher.getter();
  swift_release();
  swift_allocObject();
  swift_weakInit();
  sub_10000588C(&qword_10163FE78);
  sub_100062734(&qword_10163FE80, &qword_10163FE78);
  uint64_t v10 = Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  *(void *)(v4 + 40) = v10;
  swift_release();
  uint64_t v11 = sub_1004B4124();
  char v13 = v12;
  swift_release();
  sub_100173E88(v11, v13 & 1);
  return v4;
}

uint64_t sub_1004B31F0()
{
  uint64_t v0 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v0 - 8);
  id v2 = (char *)&v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    static Date.trustedNow.getter((uint64_t)v2);
    uint64_t v4 = type metadata accessor for Date();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(v2, 0, 1, v4);
    sub_1004B4408((uint64_t)v2);
    return swift_release();
  }
  return result;
}

uint64_t sub_1004B32F0(unsigned __int8 *a1)
{
  uint64_t v2 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v2 - 8);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v5 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    if (v5 != *(unsigned __int8 *)(result + 48))
    {
      *(unsigned char *)(result + 48) = v5;
      uint64_t v7 = type metadata accessor for Date();
      uint64_t v8 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
      v8(v4, 1, 1, v7);
      sub_1004B4408((uint64_t)v4);
      v8(v4, 1, 1, v7);
      sub_1004B4408((uint64_t)v4);
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_1004B3448()
{
  uint64_t v0 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v1 = __chkstk_darwin(v0 - 8);
  uint64_t v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v1);
  int v5 = (char *)&v18 - v4;
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void **)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  char v12 = (char *)&v18 - v11;
  sub_1004B2DB8((uint64_t)v5);
  char v13 = (unsigned int (*)(char *, uint64_t, uint64_t))v7[6];
  if (v13(v5, 1, v6) == 1)
  {
    sub_10001DAB4((uint64_t)v5, (uint64_t *)&unk_10163AC90);
    char v14 = 0;
  }
  else
  {
    char v15 = (void (*)(char *, char *, uint64_t))v7[4];
    v15(v12, v5, v6);
    sub_1004B2DCC((uint64_t)v3);
    if (v13(v3, 1, v6) == 1)
    {
      static Date.distantPast.getter();
      sub_10001DAB4((uint64_t)v3, (uint64_t *)&unk_10163AC90);
    }
    else
    {
      v15(v10, v3, v6);
    }
    sub_1004B46A0((unint64_t *)&qword_1016605E0, (void (*)(uint64_t))&type metadata accessor for Date);
    char v14 = dispatch thunk of static Comparable.< infix(_:_:)() ^ 1;
    uint64_t v16 = (void (*)(char *, uint64_t))v7[1];
    v16(v10, v6);
    v16(v12, v6);
  }
  return v14 & 1;
}

uint64_t sub_1004B36C8()
{
  uint64_t v0 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v40 = *(void *)(v0 - 8);
  uint64_t v41 = v0;
  __chkstk_darwin(v0);
  unint64_t v39 = (char *)&v35 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v2 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  int v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchTimeInterval();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (uint64_t *)((char *)&v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  *(void *)&long long v43 = type metadata accessor for DispatchTime();
  uint64_t v10 = *(void *)(v43 - 8);
  uint64_t v11 = __chkstk_darwin(v43);
  char v13 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  char v15 = (char *)&v35 - v14;
  uint64_t v16 = type metadata accessor for DispatchQoS();
  uint64_t v37 = *(void *)(v16 - 8);
  uint64_t v38 = v16;
  __chkstk_darwin(v16);
  uint64_t v42 = (char *)&v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1016371D8 != -1) {
    swift_once();
  }
  uint64_t aBlock = 0x7365547265646E75;
  unint64_t v47 = 0xE900000000000074;
  SynchronousCache.cachedValue<A>(key:computeBlock:)();
  swift_bridgeObjectRelease();
  if (v45)
  {
    static DispatchTime.now()();
    void *v9 = 1;
    (*(void (**)(void *, void, uint64_t))(v7 + 104))(v9, enum case for DispatchTimeInterval.seconds(_:), v6);
    + infix(_:_:)();
    (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v36 = *(void (**)(char *, void))(v10 + 8);
    v36(v13, v43);
    sub_10000584C();
    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchQoS.QoSClass.default(_:), v2);
    uint64_t v18 = (void *)static OS_dispatch_queue.global(qos:)();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    uint64_t v50 = sub_1004B4658;
    uint64_t v51 = v44;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    unint64_t v47 = 1107296256;
    uint64_t v48 = sub_1004B5480;
    uint64_t v49 = &unk_1015C6170;
    uint64_t v19 = _Block_copy(&aBlock);
    swift_retain();
    uint64_t v20 = v42;
    static DispatchQoS.unspecified.getter();
    unint64_t v45 = _swiftEmptyArrayStorage;
    sub_1004B46A0((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v21 = v39;
    uint64_t v22 = v41;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)();
    _Block_release(v19);

    (*(void (**)(char *, uint64_t))(v40 + 8))(v21, v22);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v20, v38);
    v36(v15, v43);
    return swift_release();
  }
  uint64_t v24 = v44;
  uint64_t v25 = *(void *)(v44 + 72);
  if (v25 == 2)
  {
    static os_log_type_t.default.getter();
    if (qword_101637268 == -1) {
      return os_log(_:dso:log:_:_:)();
    }
    goto LABEL_10;
  }
  uint64_t v27 = *(void *)(v44 + 96);
  uint64_t v26 = *(void *)(v44 + 104);
  char v28 = v25 & 1;
  unsigned int v29 = (v25 >> 8) & 1;
  long long v43 = *(_OWORD *)(v44 + 80);
  uint64_t v30 = (uint64_t)v42;
  static DispatchQoS.background.getter();
  uint64_t v31 = swift_allocObject();
  swift_weakInit();
  uint64_t v32 = swift_allocObject();
  *(void *)(v32 + 16) = v31;
  *(unsigned char *)(v32 + 24) = v28;
  *(unsigned char *)(v32 + 25) = v29;
  *(_OWORD *)(v32 + 32) = v43;
  *(void *)(v32 + 48) = v27;
  *(void *)(v32 + 56) = v26;
  uint64_t v33 = swift_allocObject();
  swift_weakInit();
  type metadata accessor for XPCActivity();
  swift_allocObject();
  uint64_t v34 = sub_1009D9B34(0xD00000000000002FLL, (void *)0x80000001013FE7C0, v30, (uint64_t)sub_1004B4644, v32, (uint64_t)sub_1004B4650, v33);
  swift_release();
  swift_release();
  *(void *)(v24 + 16) = v34;
  swift_release();
  static os_log_type_t.default.getter();
  if (qword_101637268 != -1) {
LABEL_10:
  }
    swift_once();
  return os_log(_:dso:log:_:_:)();
}

uint64_t sub_1004B3E88()
{
  return static Transaction.named<A>(_:with:)();
}

uint64_t sub_1004B3F00@<X0>(uint64_t a1@<X0>, char *a2@<X2>, uint64_t *a3@<X8>)
{
  char v4 = *a2;
  char v5 = a2[1];
  uint64_t v6 = *((void *)a2 + 1);
  uint64_t v18 = *((void *)a2 + 3);
  uint64_t v19 = *((void *)a2 + 2);
  uint64_t v17 = *((void *)a2 + 4);
  sub_10001D608(a1, (uint64_t)v20, &qword_1016549D0);
  uint64_t v7 = v20[0];
  uint64_t v8 = v20[1];
  uint64_t v9 = v20[2];
  uint64_t v10 = v20[3];
  uint64_t v11 = v20[4];
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v16 = v6;
    uint64_t v13 = v4 & 1;
    uint64_t v14 = v5 & 1;
    char v15 = sub_1004B3448();
    uint64_t result = swift_release();
    if (v15)
    {
      uint64_t v7 = v13 | (v14 << 8);
      uint64_t v8 = v16;
      uint64_t v9 = v19;
      uint64_t v10 = v18;
      uint64_t v11 = v17;
    }
  }
  *a3 = v7;
  a3[1] = v8;
  a3[2] = v9;
  a3[3] = v10;
  a3[4] = v11;
  return result;
}

uint64_t sub_1004B4000(uint64_t a1, uint64_t a2, char a3)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    Transaction.capture()();
    if (a3 == 3)
    {
      sub_1009D7368();
    }
    else if (a3 == 2)
    {
      static os_log_type_t.default.getter();
      if (qword_101637268 != -1) {
        swift_once();
      }
      os_log(_:dso:log:_:_:)();
      swift_retain();
      PassthroughSubject.send(_:)();
      swift_release();
      sub_1009D7390();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_1004B4124()
{
  if (sub_1004B3448())
  {
    if ((*(uint64_t (**)(void))(v0 + 56))())
    {
      type metadata accessor for Transaction();
      static Transaction.named<A>(_:with:)();
      return 0;
    }
    else
    {
      sub_1004B36C8();
      return 1;
    }
  }
  else
  {
    static os_log_type_t.default.getter();
    if (qword_101637268 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    sub_1004B4590();
    return swift_allocError();
  }
}

uint64_t sub_1004B425C()
{
  if (qword_101637268 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  swift_retain();
  PassthroughSubject.send(_:)();
  return swift_release();
}

uint64_t sub_1004B4330()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CloudKitCoalescer()
{
  return self;
}

uint64_t sub_1004B43AC(uint64_t a1)
{
  return sub_1004B4408(a1);
}

uint64_t sub_1004B43C0()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1004B43F8()
{
  return sub_1004B31F0();
}

uint64_t sub_1004B4400(unsigned __int8 *a1)
{
  return sub_1004B32F0(a1);
}

uint64_t sub_1004B4408(uint64_t a1)
{
  uint64_t v2 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v2 - 8);
  char v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v5 = [self standardUserDefaults];
  sub_10001E2BC(a1, (uint64_t)v4);
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v4, 1, v6) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v4, v6);
  }
  NSString v9 = String._bridgeToObjectiveC()();
  [v5 setObject:isa forKey:v9];

  swift_unknownObjectRelease();
  return sub_10001DAB4(a1, (uint64_t *)&unk_10163AC90);
}

unint64_t sub_1004B4590()
{
  unint64_t result = qword_101646660;
  if (!qword_101646660)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646660);
  }
  return result;
}

uint64_t sub_1004B45E4()
{
  return sub_1004B425C();
}

uint64_t sub_1004B460C()
{
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1004B4644@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1004B3F00(a1, (char *)(v2 + 24), a2);
}

uint64_t sub_1004B4650(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1004B4000(a1, a2, a3);
}

uint64_t sub_1004B4658()
{
  return sub_1004B3E88();
}

uint64_t sub_1004B4660(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1004B4670()
{
  return swift_release();
}

uint64_t sub_1004B4678()
{
  return sub_1004B425C();
}

uint64_t sub_1004B46A0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for CloudKitCoalescer.CloudKitCoalescerError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1004B4784);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for CloudKitCoalescer.CloudKitCoalescerError()
{
  return &type metadata for CloudKitCoalescer.CloudKitCoalescerError;
}

unint64_t sub_1004B47C0()
{
  unint64_t result = qword_101646668;
  if (!qword_101646668)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646668);
  }
  return result;
}

uint64_t sub_1004B4814(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  switch(a4 >> 62)
  {
    case 1uLL:
      uint64_t v5 = (int)a3;
      uint64_t v4 = a3 >> 32;
      break;
    case 2uLL:
      uint64_t v5 = *(void *)(a3 + 16);
      uint64_t v4 = *(void *)(a3 + 24);
      break;
    case 3uLL:
      break;
    default:
      uint64_t v5 = 0;
      uint64_t v4 = BYTE6(a4);
      break;
  }
  if (v5 > a2)
  {
    __break(1u);
    goto LABEL_10;
  }
  if (v4 <= a2)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }
  if (a2 + 1 < a1)
  {
LABEL_11:
    __break(1u);
    JUMPOUT(0x1004B4888);
  }
  return Data._Representation.subscript.getter();
}

uint64_t sub_1004B4898(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Endianness();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v37 = 0;
  unint64_t v38 = 0xE000000000000000;
  _StringGuts.grow(_:)(71);
  v8._countAndFlagsBits = 0x3A656372756F733CLL;
  v8._object = (void *)0xE900000000000020;
  String.append(_:)(v8);
  uint64_t v33 = a1;
  unint64_t v34 = a2;
  sub_1004B4814(0, 0, a1, a2);
  static Endianness.current.getter();
  sub_10006145C();
  FixedWidthInteger.init(data:ofEndianness:)();
  char v9 = v35;
  if (HIBYTE(v35)) {
    char v9 = 0;
  }
  LOBYTE(v35) = v9;
  v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 0x49726F646E657620;
  v11._object = (void *)0xEB00000000203A64;
  String.append(_:)(v11);
  sub_1004B4814(1, 2, a1, a2);
  uint64_t v12 = enum case for Endianness.little(_:);
  uint64_t v13 = *(void (**)(char *, void, uint64_t))(v5 + 104);
  uint64_t v31 = v4;
  uint64_t v32 = v13;
  HIDWORD(v30) = enum case for Endianness.little(_:);
  v13(v7, enum case for Endianness.little(_:), v4);
  sub_100179818();
  FixedWidthInteger.init(data:ofEndianness:)();
  __int16 v14 = v35;
  if (v36) {
    __int16 v14 = 0;
  }
  __int16 v35 = v14;
  v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 0x746375646F727020;
  v16._object = (void *)0xEC000000203A6449;
  String.append(_:)(v16);
  uint64_t v17 = v33;
  unint64_t v18 = v34;
  sub_1004B4814(3, 4, v33, v34);
  uint64_t v19 = v12;
  uint64_t v20 = v32;
  v32(v7, v19, v4);
  FixedWidthInteger.init(data:ofEndianness:)();
  __int16 v21 = v35;
  if (v36) {
    __int16 v21 = 0;
  }
  __int16 v35 = v21;
  v22._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._object = (void *)0x80000001013FE8D0;
  v23._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v23);
  sub_1004B4814(5, 6, v17, v18);
  v20(v7, HIDWORD(v30), v31);
  FixedWidthInteger.init(data:ofEndianness:)();
  __int16 v24 = v35;
  if (v36) {
    __int16 v24 = 0;
  }
  __int16 v35 = v24;
  v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  v26._object = (void *)0xEB00000000203A65;
  v26._countAndFlagsBits = 0x756C615677617220;
  String.append(_:)(v26);
  v27._countAndFlagsBits = Data.hexString.getter();
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  v28._countAndFlagsBits = 62;
  v28._object = (void *)0xE100000000000000;
  String.append(_:)(v28);
  return v37;
}

uint64_t sub_1004B4CB8(uint64_t result, unint64_t a2)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v2) = HIDWORD(result) - result;
      if (__OFSUB__(HIDWORD(result), result))
      {
        __break(1u);
LABEL_10:
        __break(1u);
        JUMPOUT(0x1004B4D34);
      }
      uint64_t v2 = (int)v2;
LABEL_6:
      if (v2 != 7)
      {
LABEL_7:
        sub_10001CFB8(result, a2);
        return 0;
      }
      return result;
    case 2uLL:
      uint64_t v4 = *(void *)(result + 16);
      uint64_t v3 = *(void *)(result + 24);
      BOOL v5 = __OFSUB__(v3, v4);
      uint64_t v2 = v3 - v4;
      if (!v5) {
        goto LABEL_6;
      }
      goto LABEL_10;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v2 = BYTE6(a2);
      goto LABEL_6;
  }
}

uint64_t sub_1004B4D44(uint64_t a1, unint64_t a2)
{
  unint64_t v17 = a2;
  uint64_t v4 = type metadata accessor for Endianness();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1004B4814(1, 2, a1, a2);
  uint64_t v8 = enum case for Endianness.little(_:);
  char v9 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 104);
  v9(v7, enum case for Endianness.little(_:), v4);
  sub_100179818();
  FixedWidthInteger.init(data:ofEndianness:)();
  uint64_t v16 = v20;
  int v10 = v21;
  sub_1004B4814(3, 4, a1, v17);
  v9(v7, v8, v4);
  FixedWidthInteger.init(data:ofEndianness:)();
  if (v10) {
    uint64_t v11 = 0;
  }
  else {
    uint64_t v11 = v16;
  }
  if (v19) {
    uint64_t v12 = 0;
  }
  else {
    uint64_t v12 = v18;
  }
  uint64_t result = sub_1002AAF08(v11, v12);
  if (v14 >> 60 == 15) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1004B4F10()
{
  swift_unownedRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for Descriptor()
{
  return self;
}

Swift::Int sub_1004B4F74()
{
  return Hasher._finalize()();
}

void sub_1004B4FBC()
{
  id v1 = *(id *)(*(void *)v0 + 24);
  NSObject.hash(into:)();
}

Swift::Int sub_1004B5018()
{
  Hasher.init(_seed:)();
  id v1 = *(id *)(*(void *)v0 + 24);
  NSObject.hash(into:)();

  return Hasher._finalize()();
}

BOOL sub_1004B5068(uint64_t a1, uint64_t a2)
{
  return *(void *)(*(void *)a1 + 24) == *(void *)(*(void *)a2 + 24);
}

uint64_t sub_1004B5084()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void **)(v0 + 24);
  *(void *)&v23[0] = 0;
  *((void *)&v23[0] + 1) = 0xE000000000000000;
  _StringGuts.grow(_:)(20);
  swift_bridgeObjectRelease();
  uint64_t v24 = 60;
  unint64_t v25 = 0xE100000000000000;
  *(void *)&v23[0] = v0;
  type metadata accessor for Descriptor();
  sub_1004B53EC(&qword_101646738, v6, (void (*)(uint64_t))type metadata accessor for Descriptor);
  v7._countAndFlagsBits = CustomDebugStringConvertible.typeDescription.getter();
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 32;
  v8._object = (void *)0xE100000000000000;
  String.append(_:)(v8);
  v9._countAndFlagsBits = CustomDebugStringConvertible<>.addressDescription.getter();
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 8250;
  v10._object = (void *)0xE200000000000000;
  String.append(_:)(v10);
  id v11 = [v5 UUID];
  sub_100BBC528((unint64_t)v4);

  sub_1004B53EC((unint64_t *)&qword_101638B10, 255, (void (*)(uint64_t))&type metadata accessor for UUID);
  v12._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  v13._countAndFlagsBits = 23328;
  v13._object = (void *)0xE200000000000000;
  String.append(_:)(v13);
  id v14 = [v5 description];
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v17 = v16;

  v18._countAndFlagsBits = v15;
  v18._object = v17;
  String.append(_:)(v18);
  swift_bridgeObjectRelease();
  v19._countAndFlagsBits = 2112093;
  v19._object = (void *)0xE300000000000000;
  String.append(_:)(v19);
  if ([v5 value])
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    memset(v23, 0, sizeof(v23));
  }
  sub_10000588C((uint64_t *)&unk_101644360);
  v20._countAndFlagsBits = String.init<A>(describing:)();
  String.append(_:)(v20);
  swift_bridgeObjectRelease();
  v21._countAndFlagsBits = 62;
  v21._object = (void *)0xE100000000000000;
  String.append(_:)(v21);
  return v24;
}

uint64_t sub_1004B5380()
{
  return sub_1004B5084();
}

uint64_t sub_1004B53A4(uint64_t a1, uint64_t a2)
{
  return sub_1004B53EC(&qword_101646730, a2, (void (*)(uint64_t))type metadata accessor for Descriptor);
}

uint64_t sub_1004B53EC(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

id CurrentLocationMonitor.__allocating_init(mode:desiredAccuracy:)(char a1, uint64_t a2, char a3)
{
  char v5 = a1 & 1;
  int v6 = a3 & 1;
  id v7 = objc_allocWithZone(v3);
  return CurrentLocationMonitor.init(mode:desiredAccuracy:)(v5, a2, v6);
}

uint64_t sub_1004B5480(uint64_t a1)
{
  uint64_t v1 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  v1(v2);

  return swift_release();
}

uint64_t CurrentLocationMonitor.delegate.getter()
{
  return swift_unknownObjectWeakLoadStrong();
}

uint64_t CurrentLocationMonitor.delegate.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_delegate;
  swift_beginAccess();
  *(void *)(v4 + 8) = a2;
  swift_unknownObjectWeakAssign();
  return swift_unknownObjectRelease();
}

uint64_t (*CurrentLocationMonitor.delegate.modify(void *a1))()
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  uint64_t v4 = OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_delegate;
  v3[5] = v1;
  v3[6] = v4;
  uint64_t v5 = v1 + v4;
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  uint64_t v7 = *(void *)(v5 + 8);
  v3[3] = Strong;
  v3[4] = v7;
  return sub_1004B5608;
}

void sub_1004B560C(void **a1, void *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = (void **)(*a2 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_currentLocation);
  swift_beginAccess();
  uint64_t v4 = *v3;
  *uint64_t v3 = v2;
  id v5 = v2;
}

void *CurrentLocationMonitor.currentLocation.getter()
{
  uint64_t v1 = (void **)(v0 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_currentLocation);
  swift_beginAccess();
  uint64_t v2 = *v1;
  id v3 = v2;
  return v2;
}

uint64_t sub_1004B56C0@<X0>(_DWORD *a1@<X8>)
{
  type metadata accessor for CLAuthorizationStatus(0);
  uint64_t result = OS_dispatch_queue.sync<A>(execute:)();
  *a1 = v3;
  return result;
}

uint64_t CurrentLocationMonitor.currentAuthorizationStatus.getter()
{
  type metadata accessor for CLAuthorizationStatus(0);
  OS_dispatch_queue.sync<A>(execute:)();
  return v1;
}

uint64_t sub_1004B57B0@<X0>(uint64_t result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *(_DWORD *)(result + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor__currentAuthorizationStatus);
  return result;
}

uint64_t sub_1004B57C4(int a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v32 = *(void *)(v4 - 8);
  uint64_t v33 = v4;
  __chkstk_darwin(v4);
  uint64_t v30 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for DispatchQoS();
  uint64_t v29 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  id v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for DispatchPredicate();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (uint64_t *)((char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v16 = *(void **)&v2[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_queue];
  *uint64_t v15 = v16;
  (*(void (**)(void *, void, uint64_t))(v13 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v12);
  id v17 = v16;
  LOBYTE(v16) = _dispatchPreconditionTest(_:)();
  Swift::String v19 = *(uint64_t (**)(void *, uint64_t))(v13 + 8);
  uint64_t v18 = v13 + 8;
  uint64_t result = v19(v15, v12);
  if ((v16 & 1) == 0)
  {
    __break(1u);
LABEL_7:
    swift_once();
    goto LABEL_4;
  }
  uint64_t v18 = OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor__currentAuthorizationStatus;
  if (*(_DWORD *)&v2[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor__currentAuthorizationStatus] == a1) {
    return result;
  }
  static os_log_type_t.default.getter();
  if (qword_101636B48 != -1) {
    goto LABEL_7;
  }
LABEL_4:
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_101347BA0;
  int v22 = *(_DWORD *)&v2[v18];
  *(void *)(v21 + 56) = &type metadata for Int32;
  *(void *)(v21 + 64) = &protocol witness table for Int32;
  *(_DWORD *)(v21 + 32) = v22;
  *(void *)(v21 + 96) = &type metadata for Int32;
  *(void *)(v21 + 104) = &protocol witness table for Int32;
  *(_DWORD *)(v21 + 72) = a1;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  *(_DWORD *)&v2[v18] = a1;
  sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for DispatchQoS.QoSClass.default(_:), v8);
  Swift::String v23 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = v2;
  *(_DWORD *)(v24 + 24) = a1;
  aBlock[4] = sub_1004B8070;
  aBlock[5] = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015C6520;
  unint64_t v25 = _Block_copy(aBlock);
  Swift::String v26 = v2;
  static DispatchQoS.unspecified.getter();
  unint64_t v34 = _swiftEmptyArrayStorage;
  sub_1001BF0B8((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  Swift::String v27 = v30;
  uint64_t v28 = v33;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v25);

  (*(void (**)(char *, uint64_t))(v32 + 8))(v27, v28);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v7, v31);
  return swift_release();
}

uint64_t sub_1004B5D28(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_delegate;
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v6 = *(void *)(v4 + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(v6 + 16))(a1, &protocol witness table for CurrentLocationMonitor, a2, ObjectType, v6);
    return swift_unknownObjectRelease();
  }
  return result;
}

id CurrentLocationMonitor.init(mode:desiredAccuracy:)(char a1, uint64_t a2, int a3)
{
  int v35 = a3;
  uint64_t v34 = a2;
  int v43 = a1 & 1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v40 = *(void *)(v4 - 8);
  uint64_t v41 = v4;
  __chkstk_darwin(v4);
  unint64_t v39 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v6);
  uint64_t v7 = type metadata accessor for DispatchQoS();
  uint64_t v37 = *(void *)(v7 - 8);
  uint64_t v38 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&v3[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_delegate + 8] = 0;
  swift_unknownObjectWeakInit();
  *(void *)&v3[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_currentLocation] = 0;
  *(_DWORD *)&v3[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor__currentAuthorizationStatus] = 0;
  *(void *)&v3[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_locationManager] = 0;
  uint64_t v42 = OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_queue;
  sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  (*(void (**)(char *, void, uint64_t))(v11 + 104))(v13, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v10);
  uint64_t v14 = v3;
  static DispatchQoS.unspecified.getter();
  aBlock[0] = _swiftEmptyArrayStorage;
  sub_1001BF0B8((unint64_t *)&qword_101638CC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000588C((uint64_t *)&unk_1016376F0);
  sub_100062734((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  char v36 = v9;
  *(void *)&v3[v42] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)&v14[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_startCounts] = 0;
  v14[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_locationMonitorStarted] = 0;
  id v15 = objc_allocWithZone((Class)NSBundle);
  NSString v16 = String._bridgeToObjectiveC()();
  id v17 = [v15 initWithPath:v16];

  if (v17)
  {
    unsigned int v18 = [self authorizationStatusForBundle:v17];
  }
  else
  {
    unsigned int v18 = 0;
  }
  v14[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_mode] = v43;
  LODWORD(aBlock[0]) = v18;
  sub_10000588C(&qword_101646780);
  swift_allocObject();
  uint64_t v19 = CurrentValueSubject.init(_:)();
  *(void *)&v14[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_authorizationStatusSubject] = v19;
  aBlock[0] = v19;
  sub_100062734(&qword_101646790, &qword_101646780);
  *(void *)&v14[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_authorizationStatusPublisher] = Publisher.eraseToAnyPublisher()();

  Swift::String v20 = (objc_class *)type metadata accessor for CurrentLocationMonitor();
  v46.receiver = v14;
  v46.super_class = v20;
  id v21 = [super init];
  id v22 = objc_allocWithZone((Class)NSBundle);
  id v23 = v21;
  NSString v24 = String._bridgeToObjectiveC()();
  id v25 = [v22 initWithPath:v24];

  if (v25)
  {
    uint64_t v26 = swift_allocObject();
    *(void *)(v26 + 16) = v23;
    *(void *)(v26 + 24) = v25;
    *(void *)(v26 + 32) = v34;
    *(unsigned char *)(v26 + 40) = v35 & 1;
    aBlock[4] = sub_1004B6668;
    aBlock[5] = v26;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    void aBlock[2] = sub_1004B5480;
    aBlock[3] = &unk_1015C6250;
    Swift::String v27 = _Block_copy(aBlock);
    id v28 = v23;
    id v29 = v25;
    uint64_t v30 = v36;
    static DispatchQoS.unspecified.getter();
    uint64_t v44 = _swiftEmptyArrayStorage;
    sub_1001BF0B8((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v31 = v39;
    uint64_t v32 = v41;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();

    _Block_release(v27);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v31, v32);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v30, v38);
    swift_release();
  }
  else
  {
  }
  return v23;
}

void sub_1004B649C(_DWORD *a1@<X8>)
{
  *a1 = *(_DWORD *)(*(void *)(v1 + 16)
                  + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor__currentAuthorizationStatus);
}

uint64_t type metadata accessor for CurrentLocationMonitor()
{
  return self;
}

uint64_t sub_1004B64D8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  id v8 = [objc_allocWithZone((Class)CLLocationManager) initWithEffectiveBundle:a2 delegate:a1 onQueue:*(void *)(a1 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_queue)];
  uint64_t v9 = OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_locationManager;
  uint64_t v10 = *(void **)(a1 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_locationManager);
  *(void *)(a1 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_locationManager) = v8;

  if ((a4 & 1) == 0) {
    [*(id *)(a1 + v9) setDesiredAccuracy:*(double *)&a3];
  }
  if (qword_1016371D8 != -1) {
    swift_once();
  }
  SynchronousCache.cachedValue<A>(key:computeBlock:)();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v13 & 1) == 0)
  {
    int v12 = [self authorizationStatusForBundle:a2];
    return sub_1004B57C4(v12);
  }
  return result;
}

uint64_t sub_1004B6628()
{
  return _swift_deallocObject(v0, 41, 7);
}

uint64_t sub_1004B6668()
{
  return sub_1004B64D8(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40));
}

uint64_t sub_1004B6678(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1004B6688()
{
  return swift_release();
}

Swift::Void __swiftcall CurrentLocationMonitor.requestLocation()()
{
}

id sub_1004B66B8(uint64_t a1)
{
  static os_log_type_t.default.getter();
  if (qword_101636B48 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  uint64_t v2 = *(void **)(a1 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_locationManager);

  return [v2 requestLocation];
}

id sub_1004B6764()
{
  return sub_1004B66B8(*(void *)(v0 + 16));
}

Swift::Void __swiftcall CurrentLocationMonitor.startMonitor()()
{
}

uint64_t sub_1004B6794(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  char v13 = (char *)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18[0] = *(void *)&v3[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_queue];
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = v3;
  aBlock[4] = a2;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1004B5480;
  aBlock[3] = a3;
  id v15 = _Block_copy(aBlock);
  NSString v16 = v3;
  static DispatchQoS.unspecified.getter();
  v18[1] = _swiftEmptyArrayStorage;
  sub_1001BF0B8((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return swift_release();
}

id sub_1004B6A44(uint64_t a1)
{
  uint64_t v2 = OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_startCounts;
  uint64_t v3 = *(void *)(a1 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_startCounts);
  BOOL v4 = __OFADD__(v3, 1);
  uint64_t v5 = v3 + 1;
  if (v4)
  {
    __break(1u);
  }
  else
  {
    uint64_t v1 = a1;
    *(void *)(a1 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_startCounts) = v5;
    static os_log_type_t.default.getter();
    if (qword_101636B48 == -1) {
      goto LABEL_3;
    }
  }
  swift_once();
LABEL_3:
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = *(void *)(v1 + v2);
  *(_OWORD *)(v6 + 16) = xmmword_101342130;
  *(void *)(v6 + 56) = &type metadata for Int;
  *(void *)(v6 + 64) = &protocol witness table for Int;
  *(void *)(v6 + 32) = v7;
  os_log(_:dso:log:_:_:)();
  id result = (id)swift_bridgeObjectRelease();
  if (*(void *)(v1 + v2) == 1)
  {
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    if (*(unsigned char *)(v1 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_mode)) {
      uint64_t v9 = &selRef_startMonitoringSignificantLocationChanges;
    }
    else {
      uint64_t v9 = &selRef_startUpdatingLocation;
    }
    id result = [*(id *)(v1 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_locationManager) *v9];
    *(unsigned char *)(v1 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_locationMonitorStarted) = 1;
  }
  return result;
}

id sub_1004B6BC4()
{
  return sub_1004B6A44(*(void *)(v0 + 16));
}

Swift::Void __swiftcall CurrentLocationMonitor.stopMonitor()()
{
}

id sub_1004B6BF4(uint64_t a1)
{
  uint64_t v2 = OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_startCounts;
  uint64_t v3 = *(void *)(a1 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_startCounts);
  BOOL v4 = __OFSUB__(v3, 1);
  uint64_t v5 = v3 - 1;
  if (v4)
  {
    __break(1u);
  }
  else
  {
    uint64_t v1 = a1;
    *(void *)(a1 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_startCounts) = v5;
    static os_log_type_t.default.getter();
    if (qword_101636B48 == -1) {
      goto LABEL_3;
    }
  }
  swift_once();
LABEL_3:
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = *(void *)(v1 + v2);
  *(_OWORD *)(v6 + 16) = xmmword_101342130;
  *(void *)(v6 + 56) = &type metadata for Int;
  *(void *)(v6 + 64) = &protocol witness table for Int;
  *(void *)(v6 + 32) = v7;
  os_log(_:dso:log:_:_:)();
  id result = (id)swift_bridgeObjectRelease();
  if (!*(void *)(v1 + v2))
  {
    static os_log_type_t.default.getter();
    os_log(_:dso:log:_:_:)();
    if (*(unsigned char *)(v1 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_mode)) {
      uint64_t v9 = &selRef_stopMonitoringSignificantLocationChanges;
    }
    else {
      uint64_t v9 = &selRef_stopUpdatingLocation;
    }
    id result = [*(id *)(v1 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_locationManager) *v9];
    *(unsigned char *)(v1 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_locationMonitorStarted) = 0;
  }
  return result;
}

uint64_t sub_1004B6D6C()
{
  return _swift_deallocObject(v0, 24, 7);
}

id sub_1004B6DA4()
{
  return sub_1004B6BF4(*(void *)(v0 + 16));
}

Swift::Void __swiftcall CurrentLocationMonitor.startMonitorIfNeeded()()
{
}

unsigned char *sub_1004B6DD4(unsigned char *result)
{
  uint64_t v1 = OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_locationMonitorStarted;
  if ((result[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_locationMonitorStarted] & 1) == 0)
  {
    uint64_t v2 = result;
    static os_log_type_t.default.getter();
    if (qword_101636B48 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    id result = [*(id *)&v2[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_locationManager] startUpdatingLocation];
    v2[v1] = 1;
  }
  return result;
}

unsigned char *sub_1004B6E94()
{
  return sub_1004B6DD4(*(unsigned char **)(v0 + 16));
}

Swift::Void __swiftcall CurrentLocationMonitor.forceStopMonitor()()
{
}

unsigned char *sub_1004B6EC4(unsigned char *result)
{
  uint64_t v1 = OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_locationMonitorStarted;
  if (result[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_locationMonitorStarted] == 1)
  {
    uint64_t v2 = result;
    static os_log_type_t.default.getter();
    if (qword_101636B48 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    id result = [*(id *)&v2[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_locationManager] stopUpdatingLocation];
    v2[v1] = 0;
  }
  return result;
}

unsigned char *sub_1004B6F84()
{
  return sub_1004B6EC4(*(unsigned char **)(v0 + 16));
}

id CurrentLocationMonitor.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return [v1 init];
}

void CurrentLocationMonitor.init()()
{
}

id CurrentLocationMonitor.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for CurrentLocationMonitor();
  return [super dealloc];
}

uint64_t sub_1004B70E0()
{
  type metadata accessor for CLAuthorizationStatus(0);
  OS_dispatch_queue.sync<A>(execute:)();
  return v1;
}

void sub_1004B7154(uint64_t a1, char a2)
{
  uint64_t v3 = *(void **)a1;
  *(void *)(*(void *)(*(void *)a1 + 40) + *(void *)(*(void *)a1 + 48) + 8) = *(void *)(*(void *)a1 + 32);
  swift_unknownObjectWeakAssign();
  if (a2)
  {
    swift_unknownObjectRelease();
    swift_endAccess();
  }
  else
  {
    swift_endAccess();
    swift_unknownObjectRelease();
  }

  free(v3);
}

Swift::Void __swiftcall CurrentLocationMonitor.locationManager(_:didUpdateLocations:)(CLLocationManager _, Swift::OpaquePointer didUpdateLocations)
{
}

uint64_t sub_1004B71EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_delegate;
  swift_beginAccess();
  uint64_t result = swift_unknownObjectWeakLoadStrong();
  if (result)
  {
    uint64_t v6 = *(void *)(v4 + 8);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(uint64_t, _UNKNOWN **, uint64_t, uint64_t, uint64_t))(v6 + 8))(a1, &protocol witness table for CurrentLocationMonitor, a2, ObjectType, v6);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t CurrentLocationMonitor.locationManager(_:didFailWithError:)()
{
  static os_log_type_t.error.getter();
  if (qword_101636B48 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_101342130;
  swift_errorRetain();
  sub_10000588C(&qword_101638D40);
  uint64_t v1 = String.init<A>(describing:)();
  uint64_t v3 = v2;
  *(void *)(v0 + 56) = &type metadata for String;
  *(void *)(v0 + 64) = sub_10000B4CC();
  *(void *)(v0 + 32) = v1;
  *(void *)(v0 + 40) = v3;
  os_log(_:dso:log:_:_:)();
  return swift_bridgeObjectRelease();
}

uint64_t CurrentLocationMonitor.locationManager(_:didChangeAuthorization:)(uint64_t a1, int a2)
{
  return sub_1004B7D18(a2);
}

uint64_t sub_1004B75E8()
{
  sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
  uint64_t result = OS_os_log.init(subsystem:category:)();
  qword_10170DF80 = result;
  return result;
}

uint64_t sub_1004B7660(uint64_t a1, uint64_t a2)
{
  return sub_1004B76A0(a1, a2, type metadata accessor for AccessoryMetadata);
}

uint64_t sub_1004B7678(uint64_t result, uint64_t a2)
{
  *(void *)(result + 16) = a2;
  *(void *)(result + 24) = 2 * a2;
  return result;
}

uint64_t sub_1004B7688(uint64_t a1, uint64_t a2)
{
  return sub_1004B76A0(a1, a2, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
}

uint64_t sub_1004B76A0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = 2 * a2;
  a3(0);
  return a1;
}

uint64_t sub_1004B770C(unint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v46 = *(void *)(v3 - 8);
  uint64_t v47 = v3;
  __chkstk_darwin(v3);
  uint64_t v44 = (char *)&v40 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v45 = type metadata accessor for DispatchQoS();
  uint64_t v43 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  uint64_t v42 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v6 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  uint64_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_log_type_t.default.getter();
  if (qword_101636B48 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_101347BA0;
  uint64_t v41 = v1;
  uint64_t v10 = &v1[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_delegate];
  swift_beginAccess();
  uint64_t Strong = swift_unknownObjectWeakLoadStrong();
  uint64_t v12 = *((void *)v10 + 1);
  uint64_t aBlock = (void **)Strong;
  uint64_t v50 = v12;
  sub_10000588C((uint64_t *)&unk_101646840);
  uint64_t v13 = String.init<A>(describing:)();
  uint64_t v15 = v14;
  *(void *)(v9 + 56) = &type metadata for String;
  unint64_t v16 = sub_10000B4CC();
  *(void *)(v9 + 64) = v16;
  *(void *)(v9 + 32) = v13;
  *(void *)(v9 + 40) = v15;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v17 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t aBlock = (void **)v17;
  uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter();
  *(void *)(v9 + 96) = &type metadata for String;
  *(void *)(v9 + 104) = v16;
  *(void *)(v9 + 72) = v18;
  *(void *)(v9 + 80) = v19;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  if (!(a1 >> 62))
  {
    uint64_t v20 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v20) {
      goto LABEL_7;
    }
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  if (!result) {
    return swift_bridgeObjectRelease();
  }
LABEL_7:
  if ((a1 & 0xC000000000000001) != 0)
  {
    id v22 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else
  {
    if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return result;
    }
    id v22 = *(id *)(a1 + 32);
  }
  id v23 = v22;
  swift_bridgeObjectRelease();
  id v24 = v23;
  LOBYTE(v23) = sub_100FC022C();

  if (v23)
  {
    id v25 = 0;
  }
  else
  {
    id v26 = v24;
    id v25 = v24;
  }
  Swift::String v27 = v41;
  id v28 = (void **)&v41[OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_currentLocation];
  swift_beginAccess();
  id v29 = *v28;
  *id v28 = v25;
  id v30 = v25;

  sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  uint64_t v31 = v40;
  (*(void (**)(char *, void, uint64_t))(v6 + 104))(v8, enum case for DispatchQoS.QoSClass.default(_:), v40);
  uint64_t v32 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v31);
  uint64_t v33 = swift_allocObject();
  *(void *)(v33 + 16) = v27;
  *(void *)(v33 + 24) = v25;
  unint64_t v53 = sub_1004B80BC;
  uint64_t v54 = v33;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v50 = 1107296256;
  uint64_t v51 = sub_1004B5480;
  uint64_t v52 = &unk_1015C6570;
  uint64_t v34 = _Block_copy(&aBlock);
  id v35 = v30;
  id v36 = v27;
  uint64_t v37 = v42;
  static DispatchQoS.unspecified.getter();
  uint64_t v48 = _swiftEmptyArrayStorage;
  sub_1001BF0B8((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v38 = v44;
  uint64_t v39 = v47;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v34);

  (*(void (**)(char *, uint64_t))(v46 + 8))(v38, v39);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v37, v45);
  return swift_release();
}

uint64_t sub_1004B7D18(int a1)
{
  static os_log_type_t.default.getter();
  if (qword_101636B48 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_101342130;
  type metadata accessor for CLAuthorizationStatus(0);
  uint64_t v3 = String.init<A>(describing:)();
  uint64_t v5 = v4;
  *(void *)(v2 + 56) = &type metadata for String;
  *(void *)(v2 + 64) = sub_10000B4CC();
  *(void *)(v2 + 32) = v3;
  *(void *)(v2 + 40) = v5;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_1004B57C4(a1);
  return CurrentValueSubject.send(_:)();
}

unint64_t sub_1004B7E4C()
{
  unint64_t result = qword_1016467A0;
  if (!qword_1016467A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016467A0);
  }
  return result;
}

id sub_1004B7EA0@<X0>(void *a1@<X0>, void **a2@<X8>)
{
  uint64_t v3 = (void **)(*a1 + OBJC_IVAR____TtC12searchpartyd22CurrentLocationMonitor_currentLocation);
  swift_beginAccess();
  uint64_t v4 = *v3;
  *a2 = *v3;

  return v4;
}

uint64_t sub_1004B7F0C(int *a1)
{
  return sub_1004B57C4(*a1);
}

unsigned char *storeEnumTagSinglePayload for CurrentLocationMonitor.Mode(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1004B8000);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CurrentLocationMonitor.Mode()
{
  return &type metadata for CurrentLocationMonitor.Mode;
}

uint64_t sub_1004B8038()
{
  return _swift_deallocObject(v0, 28, 7);
}

uint64_t sub_1004B8070()
{
  return sub_1004B5D28(*(void *)(v0 + 16), *(unsigned int *)(v0 + 24));
}

uint64_t sub_1004B807C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1004B80BC()
{
  return sub_1004B71EC(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_1004B8110(_DWORD *a1@<X8>)
{
}

uint64_t sub_1004B8128(void *a1, char a2, uint64_t *a3, void (*a4)(void))
{
  uint64_t v7 = sub_10000588C(a3);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = &v12[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  a4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v12[31] = a2;
  sub_1002C512C();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v8 + 8))(v10, v7);
}

unint64_t sub_1004B827C@<X0>(unint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = _s12searchpartyd20MessagingDestinationV0C4TypeO8rawValueAESgSi_tcfC_0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1004B82A8()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1004B8308()
{
  return RawRepresentable<>.encode(to:)();
}

void sub_1004B8358(void *a1@<X8>)
{
  *a1 = &off_1015A17D8;
}

unint64_t sub_1004B8368()
{
  unint64_t result = 0x70656363616E752ELL;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x657470656363612ELL;
      break;
    case 2:
      unint64_t result = 0x747365757165722ELL;
      break;
    case 3:
      unint64_t result = 0x746E65732ELL;
      break;
    case 4:
      unint64_t result = 0xD000000000000013;
      break;
    case 5:
      unint64_t result = 0x64656C6961662ELL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1004B8440()
{
  return 0x6E61747065636361;
}

uint64_t sub_1004B8468(uint64_t a1)
{
  unint64_t v2 = sub_1004B8C00();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004B84A4(uint64_t a1)
{
  unint64_t v2 = sub_1004B8C00();

  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_1004B84E0@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1004B8A2C(a1, &qword_101646898, (void (*)(void))sub_1004B8C00);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1004B8530(void *a1)
{
  return sub_1004B8128(a1, *v1, &qword_1016468A8, (void (*)(void))sub_1004B8C00);
}

uint64_t sub_1004B8570@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x6E61747065636361 && a2 == 0xEF65746174536563)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1004B862C(uint64_t a1)
{
  unint64_t v2 = sub_1004B89D8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004B8668(uint64_t a1)
{
  unint64_t v2 = sub_1004B89D8();

  return CodingKey.debugDescription.getter(a1, v2);
}

unint64_t sub_1004B86A4@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1004B8A2C(a1, &qword_101646888, (void (*)(void))sub_1004B89D8);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1004B86F4(void *a1)
{
  return sub_1004B8128(a1, *v1, &qword_101646878, (void (*)(void))sub_1004B89D8);
}

unint64_t _s12searchpartyd20MessagingDestinationV0C4TypeO8rawValueAESgSi_tcfC_0(unint64_t result)
{
  if (result >= 6) {
    return 6;
  }
  return result;
}

ValueMetadata *type metadata accessor for OwnerCircleMemberState()
{
  return &type metadata for OwnerCircleMemberState;
}

ValueMetadata *type metadata accessor for AcceptanceState()
{
  return &type metadata for AcceptanceState;
}

unsigned char *_s12searchpartyd15AcceptanceStateOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1004B8838);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MemberCircleMemberState()
{
  return &type metadata for MemberCircleMemberState;
}

unint64_t sub_1004B8874()
{
  unint64_t result = qword_101646850;
  if (!qword_101646850)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646850);
  }
  return result;
}

unint64_t sub_1004B88CC()
{
  unint64_t result = qword_101646858;
  if (!qword_101646858)
  {
    sub_10000592C(&qword_101646860);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646858);
  }
  return result;
}

unint64_t sub_1004B892C()
{
  unint64_t result = qword_101646868;
  if (!qword_101646868)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646868);
  }
  return result;
}

unint64_t sub_1004B8984()
{
  unint64_t result = qword_101646870;
  if (!qword_101646870)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646870);
  }
  return result;
}

unint64_t sub_1004B89D8()
{
  unint64_t result = qword_101646880;
  if (!qword_101646880)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646880);
  }
  return result;
}

unint64_t sub_1004B8A2C(void *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t v6 = sub_10000588C(a2);
  uint64_t v13 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10001CD44(a1, a1[3]);
  a3();
  unint64_t v10 = (unint64_t)v9;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v3)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  else
  {
    sub_1002C5018();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v6);
    unint64_t v10 = v14;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  return v10;
}

unint64_t sub_1004B8BAC()
{
  unint64_t result = qword_101646890;
  if (!qword_101646890)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646890);
  }
  return result;
}

unint64_t sub_1004B8C00()
{
  unint64_t result = qword_1016468A0;
  if (!qword_1016468A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016468A0);
  }
  return result;
}

ValueMetadata *type metadata accessor for OwnerCircleMemberState.CodingKeys()
{
  return &type metadata for OwnerCircleMemberState.CodingKeys;
}

unsigned char *_s12searchpartyd22OwnerCircleMemberStateV10CodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1004B8D04);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for MemberCircleMemberState.CodingKeys()
{
  return &type metadata for MemberCircleMemberState.CodingKeys;
}

unint64_t sub_1004B8D40()
{
  unint64_t result = qword_1016468B0;
  if (!qword_1016468B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016468B0);
  }
  return result;
}

unint64_t sub_1004B8D98()
{
  unint64_t result = qword_1016468B8;
  if (!qword_1016468B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016468B8);
  }
  return result;
}

unint64_t sub_1004B8DF0()
{
  unint64_t result = qword_1016468C0;
  if (!qword_1016468C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016468C0);
  }
  return result;
}

unint64_t sub_1004B8E48()
{
  unint64_t result = qword_1016468C8;
  if (!qword_1016468C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016468C8);
  }
  return result;
}

unint64_t sub_1004B8EA0()
{
  unint64_t result = qword_1016468D0;
  if (!qword_1016468D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016468D0);
  }
  return result;
}

unint64_t sub_1004B8EF8()
{
  unint64_t result = qword_1016468D8;
  if (!qword_1016468D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016468D8);
  }
  return result;
}

ValueMetadata *type metadata accessor for PairingCompleteCommandPayload()
{
  return &type metadata for PairingCompleteCommandPayload;
}

unint64_t sub_1004B8F5C(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1004B8F8C();
  unint64_t result = sub_1004B8FE0();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1004B8F8C()
{
  unint64_t result = qword_1016468E0;
  if (!qword_1016468E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016468E0);
  }
  return result;
}

unint64_t sub_1004B8FE0()
{
  unint64_t result = qword_1016468E8;
  if (!qword_1016468E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016468E8);
  }
  return result;
}

uint64_t sub_1004B9034@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = enum case for FMNAccountType.pairingLock(_:);
  uint64_t v3 = type metadata accessor for FMNAccountType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 104))(a1, v2, v3);
  type metadata accessor for PairingLockAckEndPoint();
  URLComponents.init()();
  URLComponents.scheme.setter();
  URLComponents.path.setter();
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  sub_1010ABD54(v5);
  swift_bridgeObjectRelease();
  return URLComponents.host.setter();
}

uint64_t type metadata accessor for PairingLockAckEndPoint()
{
  uint64_t result = qword_101646948;
  if (!qword_101646948) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1004B91D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1004B91E8);
}

uint64_t sub_1004B91E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for FMNAccountType();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = type metadata accessor for URLComponents();
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48);
    uint64_t v12 = v10;
    uint64_t v13 = a1 + *(int *)(a3 + 20);
    return v11(v13, a2, v12);
  }
}

uint64_t sub_1004B92E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1004B92F4);
}

uint64_t sub_1004B92F4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for FMNAccountType();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, v8);
  }
  else
  {
    uint64_t v12 = type metadata accessor for URLComponents();
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a4 + 20);
    return v13(v15, a2, a2, v14);
  }
}

uint64_t sub_1004B93F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1004B940C);
}

uint64_t sub_1004B9410(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1004B9424);
}

uint64_t type metadata accessor for DelegatedCircleTrustStopEnvelopeV1(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_1016469D8);
}

ValueMetadata *type metadata accessor for CirclesStoppedEnvelopeV1()
{
  return &type metadata for CirclesStoppedEnvelopeV1;
}

ValueMetadata *type metadata accessor for CirclesUpdatedEnvelopeV1()
{
  return &type metadata for CirclesUpdatedEnvelopeV1;
}

char *sub_1004B9468(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for UUID();
    uint64_t v8 = *(void *)(v7 - 8);
    uint64_t v9 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    v9(a1, a2, v7);
    uint64_t v10 = a3[5];
    uint64_t v11 = &a1[v10];
    uint64_t v12 = &a2[v10];
    uint64_t v43 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48);
    if (v43(&a2[v10], 1, v7))
    {
      uint64_t v13 = sub_10000588C(&qword_101638CF0);
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      v9(v11, v12, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v11, 0, 1, v7);
    }
    v9(&a1[a3[6]], &a2[a3[6]], v7);
    uint64_t v15 = a3[7];
    unint64_t v16 = &a1[v15];
    uint64_t v17 = &a2[v15];
    if (v43(&a2[v15], 1, v7))
    {
      uint64_t v18 = sub_10000588C(&qword_101638CF0);
      memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      v9(v16, v17, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v16, 0, 1, v7);
    }
    uint64_t v19 = a3[8];
    uint64_t v20 = a3[9];
    id v21 = &a1[v19];
    id v22 = &a2[v19];
    uint64_t v23 = *((void *)v22 + 1);
    *id v21 = *(void *)v22;
    v21[1] = v23;
    id v24 = &a1[v20];
    id v25 = &a2[v20];
    uint64_t v26 = *((void *)v25 + 1);
    *id v24 = *(void *)v25;
    v24[1] = v26;
    uint64_t v27 = a3[11];
    *(_DWORD *)&a1[a3[10]] = *(_DWORD *)&a2[a3[10]];
    *(_DWORD *)&a1[v27] = *(_DWORD *)&a2[v27];
    uint64_t v28 = a3[12];
    uint64_t v29 = a3[13];
    id v30 = &a1[v28];
    uint64_t v31 = &a2[v28];
    uint64_t v32 = *((void *)v31 + 1);
    *id v30 = *(void *)v31;
    v30[1] = v32;
    *(void *)&a1[v29] = *(void *)&a2[v29];
    uint64_t v33 = a3[14];
    uint64_t v34 = a3[15];
    id v35 = &a1[v33];
    id v36 = &a2[v33];
    uint64_t v37 = *((void *)v36 + 1);
    *id v35 = *(void *)v36;
    v35[1] = v37;
    uint64_t v38 = (uint64_t *)&a1[v34];
    uint64_t v39 = *(void *)&a2[v34];
    unint64_t v40 = *(void *)&a2[v34 + 8];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1000361E0(v39, v40);
    *uint64_t v38 = v39;
    v38[1] = v40;
    uint64_t v41 = a3[17];
    *(void *)&a1[a3[16]] = *(void *)&a2[a3[16]];
    a1[v41] = a2[v41];
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1004B9784(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v6(a1, v4);
  uint64_t v7 = a1 + a2[5];
  uint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v8(v7, 1, v4)) {
    v6(v7, v4);
  }
  v6(a1 + a2[6], v4);
  uint64_t v9 = a1 + a2[7];
  if (!v8(v9, 1, v4)) {
    v6(v9, v4);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10001CFB8(*(void *)(a1 + a2[15]), *(void *)(a1 + a2[15] + 8));

  return swift_bridgeObjectRelease();
}

uint64_t sub_1004B991C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  v8(a1, a2, v6);
  uint64_t v9 = a3[5];
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (const void *)(a2 + v9);
  uint64_t v41 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (v41(a2 + v9, 1, v6))
  {
    uint64_t v12 = sub_10000588C(&qword_101638CF0);
    memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    v8((uint64_t)v10, (uint64_t)v11, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
  }
  v8(a1 + a3[6], a2 + a3[6], v6);
  uint64_t v13 = a3[7];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  if (v41(a2 + v13, 1, v6))
  {
    uint64_t v16 = sub_10000588C(&qword_101638CF0);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    v8((uint64_t)v14, (uint64_t)v15, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v14, 0, 1, v6);
  }
  uint64_t v17 = a3[8];
  uint64_t v18 = a3[9];
  uint64_t v19 = (void *)(a1 + v17);
  uint64_t v20 = (void *)(a2 + v17);
  uint64_t v21 = v20[1];
  *uint64_t v19 = *v20;
  v19[1] = v21;
  id v22 = (void *)(a1 + v18);
  uint64_t v23 = (void *)(a2 + v18);
  uint64_t v24 = v23[1];
  *id v22 = *v23;
  v22[1] = v24;
  uint64_t v25 = a3[11];
  *(_DWORD *)(a1 + a3[10]) = *(_DWORD *)(a2 + a3[10]);
  *(_DWORD *)(a1 + v25) = *(_DWORD *)(a2 + v25);
  uint64_t v26 = a3[12];
  uint64_t v27 = a3[13];
  uint64_t v28 = (void *)(a1 + v26);
  uint64_t v29 = (void *)(a2 + v26);
  uint64_t v30 = v29[1];
  *uint64_t v28 = *v29;
  v28[1] = v30;
  *(void *)(a1 + v27) = *(void *)(a2 + v27);
  uint64_t v31 = a3[14];
  uint64_t v32 = a3[15];
  uint64_t v33 = (void *)(a1 + v31);
  uint64_t v34 = (void *)(a2 + v31);
  uint64_t v35 = v34[1];
  *uint64_t v33 = *v34;
  v33[1] = v35;
  id v36 = (uint64_t *)(a1 + v32);
  uint64_t v37 = *(void *)(a2 + v32);
  unint64_t v38 = *(void *)(a2 + v32 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1000361E0(v37, v38);
  *id v36 = v37;
  v36[1] = v38;
  uint64_t v39 = a3[17];
  *(void *)(a1 + a3[16]) = *(void *)(a2 + a3[16]);
  *(unsigned char *)(a1 + v39) = *(unsigned char *)(a2 + v39);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1004B9BE8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v43(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (const void *)(a2 + v8);
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  int v12 = v11(a1 + v8, 1, v6);
  int v13 = v11((uint64_t)v10, 1, v6);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(v9, v10, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
LABEL_7:
      uint64_t v15 = v43;
      goto LABEL_8;
    }
LABEL_6:
    uint64_t v14 = sub_10000588C(&qword_101638CF0);
    memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
    goto LABEL_6;
  }
  uint64_t v42 = (uint64_t)v9;
  uint64_t v15 = v43;
  v43(v42, (uint64_t)v10, v6);
LABEL_8:
  v15(a1 + a3[6], a2 + a3[6], v6);
  uint64_t v16 = a3[7];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (const void *)(a2 + v16);
  int v19 = v11(a1 + v16, 1, v6);
  int v20 = v11((uint64_t)v18, 1, v6);
  if (!v19)
  {
    if (!v20)
    {
      v43((uint64_t)v17, (uint64_t)v18, v6);
      goto LABEL_14;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v17, v6);
    goto LABEL_13;
  }
  if (v20)
  {
LABEL_13:
    uint64_t v21 = sub_10000588C(&qword_101638CF0);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_14;
  }
  (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(v17, v18, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v17, 0, 1, v6);
LABEL_14:
  uint64_t v22 = a3[8];
  uint64_t v23 = (void *)(a1 + v22);
  uint64_t v24 = (void *)(a2 + v22);
  *uint64_t v23 = *v24;
  v23[1] = v24[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v25 = a3[9];
  uint64_t v26 = (void *)(a1 + v25);
  uint64_t v27 = (void *)(a2 + v25);
  *uint64_t v26 = *v27;
  v26[1] = v27[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + a3[10]) = *(_DWORD *)(a2 + a3[10]);
  *(_DWORD *)(a1 + a3[11]) = *(_DWORD *)(a2 + a3[11]);
  uint64_t v28 = a3[12];
  uint64_t v29 = (void *)(a1 + v28);
  uint64_t v30 = (void *)(a2 + v28);
  *uint64_t v29 = *v30;
  v29[1] = v30[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[13]) = *(void *)(a2 + a3[13]);
  uint64_t v31 = a3[14];
  uint64_t v32 = (void *)(a1 + v31);
  uint64_t v33 = (void *)(a2 + v31);
  *uint64_t v32 = *v33;
  v32[1] = v33[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v34 = a3[15];
  uint64_t v35 = (uint64_t *)(a1 + v34);
  id v36 = (uint64_t *)(a2 + v34);
  uint64_t v37 = *v36;
  unint64_t v38 = v36[1];
  sub_1000361E0(*v36, v38);
  uint64_t v39 = *v35;
  unint64_t v40 = v35[1];
  *uint64_t v35 = v37;
  v35[1] = v38;
  sub_10001CFB8(v39, v40);
  *(void *)(a1 + a3[16]) = *(void *)(a2 + a3[16]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[17]) = *(unsigned char *)(a2 + a3[17]);
  return a1;
}

char *sub_1004B9FE8(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(void *, const void *, uint64_t))(v7 + 32);
  v8(a1, a2, v6);
  uint64_t v9 = a3[5];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v23 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v23(&a2[v9], 1, v6))
  {
    uint64_t v12 = sub_10000588C(&qword_101638CF0);
    memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    v8(v10, v11, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v10, 0, 1, v6);
  }
  v8(&a1[a3[6]], &a2[a3[6]], v6);
  uint64_t v13 = a3[7];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  if (v23(&a2[v13], 1, v6))
  {
    uint64_t v16 = sub_10000588C(&qword_101638CF0);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64));
  }
  else
  {
    v8(v14, v15, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v14, 0, 1, v6);
  }
  uint64_t v17 = a3[9];
  *(_OWORD *)&a1[a3[8]] = *(_OWORD *)&a2[a3[8]];
  *(_OWORD *)&a1[v17] = *(_OWORD *)&a2[v17];
  uint64_t v18 = a3[11];
  *(_DWORD *)&a1[a3[10]] = *(_DWORD *)&a2[a3[10]];
  *(_DWORD *)&a1[v18] = *(_DWORD *)&a2[v18];
  uint64_t v19 = a3[13];
  *(_OWORD *)&a1[a3[12]] = *(_OWORD *)&a2[a3[12]];
  *(void *)&a1[v19] = *(void *)&a2[v19];
  uint64_t v20 = a3[15];
  *(_OWORD *)&a1[a3[14]] = *(_OWORD *)&a2[a3[14]];
  *(_OWORD *)&a1[v20] = *(_OWORD *)&a2[v20];
  uint64_t v21 = a3[17];
  *(void *)&a1[a3[16]] = *(void *)&a2[a3[16]];
  a1[v21] = a2[v21];
  return a1;
}

uint64_t sub_1004BA260(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v48 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v48(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (const void *)(a2 + v8);
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  int v12 = v11(a1 + v8, 1, v6);
  int v13 = v11((uint64_t)v10, 1, v6);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(v9, v10, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v9, 0, 1, v6);
LABEL_7:
      uint64_t v15 = v48;
      goto LABEL_8;
    }
LABEL_6:
    uint64_t v14 = sub_10000588C(&qword_101638CF0);
    memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
    goto LABEL_6;
  }
  uint64_t v47 = (uint64_t)v9;
  uint64_t v15 = v48;
  v48(v47, (uint64_t)v10, v6);
LABEL_8:
  v15(a1 + a3[6], a2 + a3[6], v6);
  uint64_t v16 = a3[7];
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (const void *)(a2 + v16);
  int v19 = v11(a1 + v16, 1, v6);
  int v20 = v11((uint64_t)v18, 1, v6);
  if (!v19)
  {
    if (!v20)
    {
      v48((uint64_t)v17, (uint64_t)v18, v6);
      goto LABEL_14;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(v17, v6);
    goto LABEL_13;
  }
  if (v20)
  {
LABEL_13:
    uint64_t v21 = sub_10000588C(&qword_101638CF0);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_14;
  }
  (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(v17, v18, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v17, 0, 1, v6);
LABEL_14:
  uint64_t v22 = a3[8];
  uint64_t v23 = (void *)(a1 + v22);
  uint64_t v24 = (uint64_t *)(a2 + v22);
  uint64_t v26 = *v24;
  uint64_t v25 = v24[1];
  *uint64_t v23 = v26;
  v23[1] = v25;
  swift_bridgeObjectRelease();
  uint64_t v27 = a3[9];
  uint64_t v28 = (void *)(a1 + v27);
  uint64_t v29 = (uint64_t *)(a2 + v27);
  uint64_t v31 = *v29;
  uint64_t v30 = v29[1];
  *uint64_t v28 = v31;
  v28[1] = v30;
  swift_bridgeObjectRelease();
  uint64_t v32 = a3[11];
  *(_DWORD *)(a1 + a3[10]) = *(_DWORD *)(a2 + a3[10]);
  *(_DWORD *)(a1 + v32) = *(_DWORD *)(a2 + v32);
  uint64_t v33 = a3[12];
  uint64_t v34 = (void *)(a1 + v33);
  uint64_t v35 = (uint64_t *)(a2 + v33);
  uint64_t v37 = *v35;
  uint64_t v36 = v35[1];
  *uint64_t v34 = v37;
  v34[1] = v36;
  swift_bridgeObjectRelease();
  uint64_t v38 = a3[14];
  *(void *)(a1 + a3[13]) = *(void *)(a2 + a3[13]);
  uint64_t v39 = (void *)(a1 + v38);
  unint64_t v40 = (uint64_t *)(a2 + v38);
  uint64_t v42 = *v40;
  uint64_t v41 = v40[1];
  *uint64_t v39 = v42;
  v39[1] = v41;
  swift_bridgeObjectRelease();
  uint64_t v43 = a3[15];
  uint64_t v44 = *(void *)(a1 + v43);
  unint64_t v45 = *(void *)(a1 + v43 + 8);
  *(_OWORD *)(a1 + v43) = *(_OWORD *)(a2 + v43);
  sub_10001CFB8(v44, v45);
  *(void *)(a1 + a3[16]) = *(void *)(a2 + a3[16]);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + a3[17]) = *(unsigned char *)(a2 + a3[17]);
  return a1;
}

uint64_t sub_1004BA600(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1004BA614);
}

uint64_t sub_1004BA614(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = sub_10000588C(&qword_101638CF0);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 32) + 8);
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  return (v14 + 1);
}

uint64_t sub_1004BA730(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1004BA744);
}

uint64_t sub_1004BA744(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }
  else
  {
    uint64_t result = sub_10000588C(&qword_101638CF0);
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) != a3)
    {
      *(void *)(a1 + *(int *)(a4 + 32) + 8) = (a2 - 1);
      return result;
    }
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for CircleTrustEnvelopeV1(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_101646A68);
}

void sub_1004BA87C()
{
  type metadata accessor for UUID();
  if (v0 <= 0x3F)
  {
    sub_1003426B0();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t sub_1004BA9A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1004BA9B4);
}

uint64_t sub_1004BA9B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1004BA9CC);
}

uint64_t type metadata accessor for CircleTrustAckEnvelopeV1(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_101646B28);
}

uint64_t sub_1004BA9F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1004BAA04);
}

uint64_t sub_1004BAA08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1004BAA1C);
}

uint64_t type metadata accessor for CircleTrustAcceptEnvelopeV1(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_101646BB8);
}

uint64_t sub_1004BAA40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1004BAA54);
}

uint64_t sub_1004BAA58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1004BAA6C);
}

uint64_t type metadata accessor for CircleTrustDeclineEnvelopeV1(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_101646C48);
}

uint64_t sub_1004BAA90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1004BAAA4);
}

uint64_t sub_1004BAAA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1004BAABC);
}

uint64_t type metadata accessor for CircleTrustRequestEnvelopeV1(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_101646CD8);
}

unint64_t sub_1004BAAE0(char a1)
{
  unint64_t result = 0x6564496572616873;
  switch(a1)
  {
    case 1:
    case 3:
      unint64_t result = 0xD000000000000015;
      break;
    case 2:
      unint64_t result = 0xD000000000000010;
      break;
    case 4:
      unint64_t result = 0x6C65646F6DLL;
      break;
    case 5:
      unint64_t result = 0x65566D6574737973;
      break;
    case 6:
      unint64_t result = 0x6449726F646E6576;
      break;
    case 7:
      unint64_t result = 0x49746375646F7270;
      break;
    case 8:
      unint64_t result = 0x614E6E6F63616562;
      break;
    case 9:
      unint64_t result = 1701605234;
      break;
    case 10:
      unint64_t result = 0x696A6F6D65;
      break;
    case 11:
      unint64_t result = 0x616B63615079656BLL;
      break;
    case 12:
      unint64_t result = 0x5064657473757274;
      break;
    case 13:
      unint64_t result = 0x7079546572616873;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1004BACB4(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_101646DB0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1004BD358();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v11) = 0;
  type metadata accessor for UUID();
  sub_1004BDFA0(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = (int *)type metadata accessor for CircleTrustEnvelopeV1(0);
    LOBYTE(v11) = 1;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v11) = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v11) = 3;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v11) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 5;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 6;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 7;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 8;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 9;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v11) = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    long long v11 = *(_OWORD *)(v3 + v9[15]);
    char v12 = 11;
    sub_100037BB4();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(void *)&long long v11 = *(void *)(v3 + v9[16]);
    char v12 = 12;
    sub_10000588C(&qword_101646D30);
    sub_1004BDF0C(&qword_101646DB8, &qword_101646DC0);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v11) = *(unsigned char *)(v3 + v9[17]);
    char v12 = 13;
    sub_1000C8044();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1004BB13C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v63 = a2;
  uint64_t v3 = sub_10000588C(&qword_101638CF0);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v6 = (char *)&v61 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v61 - v7;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v70 = *(void *)(v9 - 8);
  uint64_t v10 = __chkstk_darwin(v9);
  char v12 = (char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v61 - v13;
  uint64_t v15 = sub_10000588C(&qword_101646D20);
  uint64_t v64 = *(void *)(v15 - 8);
  uint64_t v65 = v15;
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = (int *)type metadata accessor for CircleTrustEnvelopeV1(0);
  __chkstk_darwin(v71);
  uint64_t v72 = (char *)&v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = a1[3];
  uint64_t v67 = a1;
  sub_10001CD44(a1, v19);
  sub_1004BD358();
  uint64_t v66 = v17;
  int v20 = v69;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  uint64_t v68 = v9;
  if (v20)
  {
    os_log_type_t v69 = v20;
    int v22 = 0;
    unsigned int v23 = 0;
  }
  else
  {
    uint64_t v21 = v8;
    os_log_type_t v69 = v12;
    uint64_t v62 = v6;
    LOBYTE(v73) = 0;
    sub_1004BDFA0((unint64_t *)&qword_10163B010, (void (*)(uint64_t))&type metadata accessor for UUID);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v35 = *(void (**)(char *, char *, uint64_t))(v70 + 32);
    v35(v72, v14, v9);
    LOBYTE(v73) = 1;
    uint64_t v36 = (uint64_t)v21;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v37 = v72;
    sub_1002729C8(v36, (uint64_t)&v72[v71[5]]);
    LOBYTE(v73) = 2;
    uint64_t v38 = v69;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    v35(&v37[v71[6]], v38, v9);
    LOBYTE(v73) = 3;
    uint64_t v39 = (uint64_t)v62;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    sub_1002729C8(v39, (uint64_t)&v72[v71[7]]);
    LOBYTE(v73) = 4;
    uint64_t v40 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v41 = v71;
    uint64_t v42 = v72;
    uint64_t v43 = (uint64_t *)&v72[v71[8]];
    *uint64_t v43 = v40;
    v43[1] = v44;
    LOBYTE(v73) = 5;
    uint64_t v45 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v46 = (uint64_t *)&v42[v41[9]];
    *uint64_t v46 = v45;
    v46[1] = v47;
    LOBYTE(v73) = 6;
    *(_DWORD *)&v42[v41[10]] = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v73) = 7;
    *(_DWORD *)&v72[v41[11]] = KeyedDecodingContainer.decode(_:forKey:)();
    LOBYTE(v73) = 8;
    uint64_t v48 = KeyedDecodingContainer.decode(_:forKey:)();
    os_log_type_t v69 = 0;
    uint64_t v50 = (uint64_t *)&v72[v71[12]];
    *uint64_t v50 = v48;
    v50[1] = v49;
    LOBYTE(v73) = 9;
    uint64_t v51 = v69;
    uint64_t v52 = KeyedDecodingContainer.decode(_:forKey:)();
    os_log_type_t v69 = v51;
    if (!v51)
    {
      *(void *)&v72[v71[13]] = v52;
      LOBYTE(v73) = 10;
      unint64_t v53 = v69;
      uint64_t v54 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
      BOOL v31 = v53 == 0;
      os_log_type_t v69 = v53;
      if (v53) {
        goto LABEL_31;
      }
      uint64_t v56 = (uint64_t *)&v72[v71[14]];
      *uint64_t v56 = v54;
      v56[1] = v55;
      char v74 = 11;
      sub_100037AA0();
      unint64_t v57 = v69;
      KeyedDecodingContainer.decode<A>(_:forKey:)();
      os_log_type_t v69 = v57;
      if (v57)
      {
LABEL_31:
        (*(void (**)(char *, uint64_t))(v64 + 8))(v66, v65);
        int v30 = 0;
        int v29 = 0;
      }
      else
      {
        *(_OWORD *)&v72[v71[15]] = v73;
        sub_10000588C(&qword_101646D30);
        char v74 = 12;
        sub_1004BDF0C(&qword_101646D38, &qword_101646D40);
        uint64_t v58 = v69;
        KeyedDecodingContainer.decode<A>(_:forKey:)();
        os_log_type_t v69 = v58;
        if (v58)
        {
          (*(void (**)(char *, uint64_t))(v64 + 8))(v66, v65);
          int v29 = 0;
          int v30 = 1;
        }
        else
        {
          *(void *)&v72[v71[16]] = v73;
          char v74 = 13;
          sub_1000C80EC();
          uint64_t v59 = v69;
          KeyedDecodingContainer.decode<A>(_:forKey:)();
          os_log_type_t v69 = v59;
          if (!v59)
          {
            (*(void (**)(char *, uint64_t))(v64 + 8))(v66, v65);
            uint64_t v60 = (uint64_t)v72;
            v72[v71[17]] = v73;
            sub_1004BD3AC(v60, v63);
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v67);
            return sub_1004BD410(v60);
          }
          (*(void (**)(char *, uint64_t))(v64 + 8))(v66, v65);
          int v30 = 1;
          int v29 = 1;
        }
      }
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v67);
      LOBYTE(v34) = 1;
      int v25 = 1;
      int v26 = 1;
      int v27 = 1;
      int v28 = 1;
      int v22 = 1;
      goto LABEL_16;
    }
    (*(void (**)(char *, uint64_t))(v64 + 8))(v66, v65);
    unsigned int v23 = 319;
    int v22 = 1;
  }
  uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v67);
  int v25 = (v23 >> 2) & 1;
  int v26 = (v23 >> 3) & 1;
  int v27 = (v23 >> 4) & 1;
  int v28 = (v23 >> 5) & 1;
  if ((v23 & 1) == 0)
  {
    int v29 = 0;
    int v30 = 0;
    BOOL v31 = 0;
    if ((v23 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_17;
  }
  BOOL v31 = 0;
  int v30 = 0;
  int v29 = 0;
  int v34 = (v23 >> 1) & 1;
LABEL_16:
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v70 + 8))(v72, v68);
  if ((v34 & 1) == 0)
  {
LABEL_6:
    uint64_t v32 = v72;
    if (v25) {
      goto LABEL_7;
    }
    goto LABEL_18;
  }
LABEL_17:
  uint64_t v32 = v72;
  uint64_t result = sub_100270E18((uint64_t)&v72[v71[5]]);
  if (v25)
  {
LABEL_7:
    uint64_t v33 = v71;
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v70 + 8))(&v32[v71[6]], v68);
    if ((v26 & 1) == 0) {
      goto LABEL_8;
    }
    goto LABEL_19;
  }
LABEL_18:
  uint64_t v33 = v71;
  if (!v26)
  {
LABEL_8:
    if (v27) {
      goto LABEL_9;
    }
    goto LABEL_20;
  }
LABEL_19:
  uint64_t result = sub_100270E18((uint64_t)&v32[v33[7]]);
  if (v27)
  {
LABEL_9:
    uint64_t result = swift_bridgeObjectRelease();
    if ((v28 & 1) == 0) {
      goto LABEL_10;
    }
    goto LABEL_21;
  }
LABEL_20:
  if (!v28)
  {
LABEL_10:
    if (v22) {
      goto LABEL_11;
    }
    goto LABEL_22;
  }
LABEL_21:
  uint64_t result = swift_bridgeObjectRelease();
  if (v22)
  {
LABEL_11:
    uint64_t result = swift_bridgeObjectRelease();
    if (!v31) {
      goto LABEL_12;
    }
    goto LABEL_23;
  }
LABEL_22:
  if (!v31)
  {
LABEL_12:
    if (v30) {
      goto LABEL_13;
    }
LABEL_24:
    if (!v29) {
      return result;
    }
    return swift_bridgeObjectRelease();
  }
LABEL_23:
  uint64_t result = swift_bridgeObjectRelease();
  if ((v30 & 1) == 0) {
    goto LABEL_24;
  }
LABEL_13:
  uint64_t result = sub_10001CFB8(*(void *)&v32[v33[15]], *(void *)&v32[v33[15] + 8]);
  if ((v29 & 1) == 0) {
    return result;
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1004BBAEC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v15 = a2;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v17 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_101646D48);
  uint64_t v16 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for CircleTrustAckEnvelopeV1(0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1004BD46C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    sub_1004BDFA0((unint64_t *)&qword_10163B010, (void (*)(uint64_t))&type metadata accessor for UUID);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v8, v6);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v17, v4);
    sub_1004BD514((uint64_t)v11, v15, type metadata accessor for CircleTrustAckEnvelopeV1);
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
}

uint64_t sub_1004BBD80@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v15 = a2;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v17 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_101646D58);
  uint64_t v16 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for CircleTrustAcceptEnvelopeV1(0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1004BD4C0();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    sub_1004BDFA0((unint64_t *)&qword_10163B010, (void (*)(uint64_t))&type metadata accessor for UUID);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v8, v6);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v17, v4);
    sub_1004BD514((uint64_t)v11, v15, type metadata accessor for CircleTrustAcceptEnvelopeV1);
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
}

uint64_t sub_1004BC014@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v15 = a2;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v17 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_101646D68);
  uint64_t v16 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for CircleTrustDeclineEnvelopeV1(0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1004BD304();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    sub_1004BDFA0((unint64_t *)&qword_10163B010, (void (*)(uint64_t))&type metadata accessor for UUID);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v8, v6);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v17, v4);
    sub_1004BD514((uint64_t)v11, v15, type metadata accessor for CircleTrustDeclineEnvelopeV1);
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
}

uint64_t sub_1004BC2A8(void *a1, uint64_t a2, uint64_t *a3, void (*a4)(void))
{
  uint64_t v7 = sub_10000588C(a3);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  a4();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v12[3] = a2;
  sub_10000588C((uint64_t *)&unk_1016636E0);
  sub_1004BDFE8((unint64_t *)&qword_101663710, &qword_10163B040);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_1004BC440@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v15 = a2;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v17 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_101646D90);
  uint64_t v16 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for CircleTrustRequestEnvelopeV1(0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1004BDE64();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    sub_1004BDFA0((unint64_t *)&qword_10163B010, (void (*)(uint64_t))&type metadata accessor for UUID);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v8, v6);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v17, v4);
    sub_1004BD514((uint64_t)v11, v15, type metadata accessor for CircleTrustRequestEnvelopeV1);
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
}

uint64_t sub_1004BC6D4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v15 = a2;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v17 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_101646DA0);
  uint64_t v16 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DelegatedCircleTrustStopEnvelopeV1(0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1004BDEB8();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    sub_1004BDFA0((unint64_t *)&qword_10163B010, (void (*)(uint64_t))&type metadata accessor for UUID);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v8, v6);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v17, v4);
    sub_1004BD514((uint64_t)v11, v15, type metadata accessor for DelegatedCircleTrustStopEnvelopeV1);
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
}

unint64_t sub_1004BC968()
{
  return sub_1004BAAE0(*v0);
}

uint64_t sub_1004BC970@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1004BD57C(a1, a2);
  *a3 = result;
  return result;
}

void sub_1004BC998(unsigned char *a1@<X8>)
{
  *a1 = 14;
}

uint64_t sub_1004BC9A4(uint64_t a1)
{
  unint64_t v2 = sub_1004BD358();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004BC9E0(uint64_t a1)
{
  unint64_t v2 = sub_1004BD358();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1004BCA1C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1004BB13C(a1, a2);
}

uint64_t sub_1004BCA34(void *a1)
{
  return sub_1004BACB4(a1);
}

uint64_t sub_1004BCA4C()
{
  return 0x6564496572616873;
}

uint64_t sub_1004BCA74(uint64_t a1)
{
  unint64_t v2 = sub_1004BD46C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004BCAB0(uint64_t a1)
{
  unint64_t v2 = sub_1004BD46C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1004BCAEC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1004BBAEC(a1, a2);
}

uint64_t sub_1004BCB04(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1004BCC0C(a1, a2, a3, &qword_101646DD8, (void (*)(void))sub_1004BD46C);
}

uint64_t sub_1004BCB40(uint64_t a1)
{
  unint64_t v2 = sub_1004BD4C0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004BCB7C(uint64_t a1)
{
  unint64_t v2 = sub_1004BD4C0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1004BCBB8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1004BBD80(a1, a2);
}

uint64_t sub_1004BCBD0(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1004BCC0C(a1, a2, a3, &qword_101646DD0, (void (*)(void))sub_1004BD4C0);
}

uint64_t sub_1004BCC0C(void *a1, uint64_t a2, uint64_t a3, uint64_t *a4, void (*a5)(void))
{
  uint64_t v7 = sub_10000588C(a4);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v12 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  a5();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for UUID();
  sub_1004BDFA0(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_1004BCD8C(uint64_t a1)
{
  unint64_t v2 = sub_1004BD304();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004BCDC8(uint64_t a1)
{
  unint64_t v2 = sub_1004BD304();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1004BCE04@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1004BC014(a1, a2);
}

uint64_t sub_1004BCE1C(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1004BCC0C(a1, a2, a3, &qword_101646D10, (void (*)(void))sub_1004BD304);
}

unint64_t sub_1004BCE58()
{
  return 0xD000000000000011;
}

uint64_t sub_1004BCE74(uint64_t a1)
{
  unint64_t v2 = sub_1004BDB70();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004BCEB0(uint64_t a1)
{
  unint64_t v2 = sub_1004BDB70();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_1004BCEEC@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1004BDC4C(a1, &qword_101646D70, (void (*)(void))sub_1004BDB70);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1004BCF3C(void *a1)
{
  return sub_1004BC2A8(a1, *v1, &qword_101646DE0, (void (*)(void))sub_1004BDB70);
}

uint64_t sub_1004BCF7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1004BDBC4(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1004BCFA8(uint64_t a1)
{
  unint64_t v2 = sub_1004BDE10();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004BCFE4(uint64_t a1)
{
  unint64_t v2 = sub_1004BDE10();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_1004BD020@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1004BDC4C(a1, &qword_101646D80, (void (*)(void))sub_1004BDE10);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1004BD070(void *a1)
{
  return sub_1004BC2A8(a1, *v1, &qword_101646DC8, (void (*)(void))sub_1004BDE10);
}

uint64_t sub_1004BD0B0(uint64_t a1)
{
  unint64_t v2 = sub_1004BDE64();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004BD0EC(uint64_t a1)
{
  unint64_t v2 = sub_1004BDE64();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1004BD128@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1004BC440(a1, a2);
}

uint64_t sub_1004BD140(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1004BCC0C(a1, a2, a3, &qword_101646DE8, (void (*)(void))sub_1004BDE64);
}

uint64_t sub_1004BD17C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x6564496572616873 && a2 == 0xEF7265696669746ELL)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1004BD238(uint64_t a1)
{
  unint64_t v2 = sub_1004BDEB8();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004BD274(uint64_t a1)
{
  unint64_t v2 = sub_1004BDEB8();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1004BD2B0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1004BC6D4(a1, a2);
}

uint64_t sub_1004BD2C8(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1004BCC0C(a1, a2, a3, &qword_101646DF0, (void (*)(void))sub_1004BDEB8);
}

unint64_t sub_1004BD304()
{
  unint64_t result = qword_101646D18;
  if (!qword_101646D18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646D18);
  }
  return result;
}

unint64_t sub_1004BD358()
{
  unint64_t result = qword_101646D28;
  if (!qword_101646D28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646D28);
  }
  return result;
}

uint64_t sub_1004BD3AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CircleTrustEnvelopeV1(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1004BD410(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CircleTrustEnvelopeV1(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1004BD46C()
{
  unint64_t result = qword_101646D50;
  if (!qword_101646D50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646D50);
  }
  return result;
}

unint64_t sub_1004BD4C0()
{
  unint64_t result = qword_101646D60;
  if (!qword_101646D60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646D60);
  }
  return result;
}

uint64_t sub_1004BD514(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1004BD57C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6564496572616873 && a2 == 0xEF7265696669746ELL;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001013FEC90 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001013EE1B0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x80000001013FECB0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6C65646F6DLL && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x65566D6574737973 && a2 == 0xED00006E6F697372 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x6449726F646E6576 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x49746375646F7270 && a2 == 0xE900000000000064 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x614E6E6F63616562 && a2 == 0xEA0000000000656DLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 1701605234 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x696A6F6D65 && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0x616B63615079656BLL && a2 == 0xEB00000000736567 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0x5064657473757274 && a2 == 0xEC00000073726565 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0x7079546572616873 && a2 == 0xE900000000000065)
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 13;
    }
    else {
      return 14;
    }
  }
}

unint64_t sub_1004BDB70()
{
  unint64_t result = qword_101646D78;
  if (!qword_101646D78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646D78);
  }
  return result;
}

uint64_t sub_1004BDBC4(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000011 && a2 == 0x80000001013FECD0)
  {
    swift_bridgeObjectRelease();
    char v2 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v2 = v3 ^ 1;
  }
  return v2 & 1;
}

void *sub_1004BDC4C(void *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t v6 = sub_10000588C(a2);
  uint64_t v13 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10001CD44(a1, a1[3]);
  a3();
  uint64_t v10 = v9;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v3)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  else
  {
    sub_10000588C((uint64_t *)&unk_1016636E0);
    sub_1004BDFE8((unint64_t *)&qword_10166F9B0, (unint64_t *)&qword_10163B010);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v6);
    uint64_t v10 = v14;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  return v10;
}

unint64_t sub_1004BDE10()
{
  unint64_t result = qword_101646D88;
  if (!qword_101646D88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646D88);
  }
  return result;
}

unint64_t sub_1004BDE64()
{
  unint64_t result = qword_101646D98;
  if (!qword_101646D98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646D98);
  }
  return result;
}

unint64_t sub_1004BDEB8()
{
  unint64_t result = qword_101646DA8;
  if (!qword_101646DA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646DA8);
  }
  return result;
}

uint64_t sub_1004BDF0C(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000592C(&qword_101646D30);
    sub_1004BDFA0(a2, (void (*)(uint64_t))type metadata accessor for PeerTrustEnvelopeV1);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1004BDFA0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1004BDFE8(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000592C((uint64_t *)&unk_1016636E0);
    sub_1004BDFA0(a2, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for DelegatedCircleTrustStopEnvelopeV1.CodingKeys()
{
  return &type metadata for DelegatedCircleTrustStopEnvelopeV1.CodingKeys;
}

ValueMetadata *type metadata accessor for CircleTrustRequestEnvelopeV1.CodingKeys()
{
  return &type metadata for CircleTrustRequestEnvelopeV1.CodingKeys;
}

ValueMetadata *type metadata accessor for CirclesStoppedEnvelopeV1.CodingKeys()
{
  return &type metadata for CirclesStoppedEnvelopeV1.CodingKeys;
}

ValueMetadata *type metadata accessor for CirclesUpdatedEnvelopeV1.CodingKeys()
{
  return &type metadata for CirclesUpdatedEnvelopeV1.CodingKeys;
}

ValueMetadata *type metadata accessor for CircleTrustAcceptEnvelopeV1.CodingKeys()
{
  return &type metadata for CircleTrustAcceptEnvelopeV1.CodingKeys;
}

ValueMetadata *type metadata accessor for CircleTrustAckEnvelopeV1.CodingKeys()
{
  return &type metadata for CircleTrustAckEnvelopeV1.CodingKeys;
}

uint64_t getEnumTagSinglePayload for CircleTrustEnvelopeV1.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF3) {
    goto LABEL_17;
  }
  if (a2 + 13 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 13) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 13;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 13;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 13;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xE;
  int v8 = v6 - 14;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for CircleTrustEnvelopeV1.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 13 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 13) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF2)
  {
    unsigned int v6 = ((a2 - 243) >> 8) + 1;
    *uint64_t result = a2 + 13;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1004BE23CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 13;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CircleTrustEnvelopeV1.CodingKeys()
{
  return &type metadata for CircleTrustEnvelopeV1.CodingKeys;
}

unsigned char *_s12searchpartyd34DelegatedCircleTrustStopEnvelopeV1V10CodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1004BE310);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for CircleTrustDeclineEnvelopeV1.CodingKeys()
{
  return &type metadata for CircleTrustDeclineEnvelopeV1.CodingKeys;
}

unint64_t sub_1004BE34C()
{
  unint64_t result = qword_101646DF8;
  if (!qword_101646DF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646DF8);
  }
  return result;
}

unint64_t sub_1004BE3A4()
{
  unint64_t result = qword_101646E00;
  if (!qword_101646E00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646E00);
  }
  return result;
}

unint64_t sub_1004BE3FC()
{
  unint64_t result = qword_101646E08;
  if (!qword_101646E08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646E08);
  }
  return result;
}

unint64_t sub_1004BE454()
{
  unint64_t result = qword_101646E10;
  if (!qword_101646E10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646E10);
  }
  return result;
}

unint64_t sub_1004BE4AC()
{
  unint64_t result = qword_101646E18;
  if (!qword_101646E18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646E18);
  }
  return result;
}

unint64_t sub_1004BE504()
{
  unint64_t result = qword_101646E20;
  if (!qword_101646E20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646E20);
  }
  return result;
}

unint64_t sub_1004BE55C()
{
  unint64_t result = qword_101646E28;
  if (!qword_101646E28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646E28);
  }
  return result;
}

unint64_t sub_1004BE5B4()
{
  unint64_t result = qword_101646E30;
  if (!qword_101646E30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646E30);
  }
  return result;
}

unint64_t sub_1004BE60C()
{
  unint64_t result = qword_101646E38;
  if (!qword_101646E38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646E38);
  }
  return result;
}

unint64_t sub_1004BE664()
{
  unint64_t result = qword_101646E40;
  if (!qword_101646E40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646E40);
  }
  return result;
}

unint64_t sub_1004BE6BC()
{
  unint64_t result = qword_101646E48;
  if (!qword_101646E48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646E48);
  }
  return result;
}

unint64_t sub_1004BE714()
{
  unint64_t result = qword_101646E50;
  if (!qword_101646E50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646E50);
  }
  return result;
}

unint64_t sub_1004BE76C()
{
  unint64_t result = qword_101646E58;
  if (!qword_101646E58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646E58);
  }
  return result;
}

unint64_t sub_1004BE7C4()
{
  unint64_t result = qword_101646E60;
  if (!qword_101646E60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646E60);
  }
  return result;
}

unint64_t sub_1004BE81C()
{
  unint64_t result = qword_101646E68;
  if (!qword_101646E68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646E68);
  }
  return result;
}

unint64_t sub_1004BE874()
{
  unint64_t result = qword_101646E70;
  if (!qword_101646E70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646E70);
  }
  return result;
}

unint64_t sub_1004BE8CC()
{
  unint64_t result = qword_101646E78;
  if (!qword_101646E78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646E78);
  }
  return result;
}

unint64_t sub_1004BE924()
{
  unint64_t result = qword_101646E80;
  if (!qword_101646E80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646E80);
  }
  return result;
}

unint64_t sub_1004BE97C()
{
  unint64_t result = qword_101646E88;
  if (!qword_101646E88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646E88);
  }
  return result;
}

unint64_t sub_1004BE9D4()
{
  unint64_t result = qword_101646E90;
  if (!qword_101646E90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646E90);
  }
  return result;
}

unint64_t sub_1004BEA2C()
{
  unint64_t result = qword_101646E98;
  if (!qword_101646E98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646E98);
  }
  return result;
}

unint64_t sub_1004BEA84()
{
  unint64_t result = qword_101646EA0;
  if (!qword_101646EA0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646EA0);
  }
  return result;
}

unint64_t sub_1004BEADC()
{
  unint64_t result = qword_101646EA8;
  if (!qword_101646EA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646EA8);
  }
  return result;
}

unint64_t sub_1004BEB34()
{
  unint64_t result = qword_101646EB0;
  if (!qword_101646EB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646EB0);
  }
  return result;
}

void *sub_1004BEB8C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *int v3 = *a2;
    int v3 = (void *)(v14 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    uint64_t v5 = a2[2];
    *(void *)(a1 + 8) = a2[1];
    *(void *)(a1 + 16) = v5;
    uint64_t v6 = a2[4];
    *(void *)(a1 + 24) = a2[3];
    *(void *)(a1 + 32) = v6;
    *(_WORD *)(a1 + 40) = *((_WORD *)a2 + 20);
    uint64_t v7 = *(int *)(a3 + 36);
    int v8 = (char *)a2 + v7;
    uint64_t v9 = (char *)(a1 + v7);
    *(void *)(a1 + 48) = a2[6];
    uint64_t v10 = (int *)type metadata accessor for BeaconLocationUpdate();
    uint64_t v11 = *((void *)v10 - 1);
    uint64_t v12 = *(unsigned int (**)(char *, uint64_t, int *))(v11 + 48);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v12(v8, 1, v10))
    {
      uint64_t v13 = sub_10000588C(&qword_101646EB8);
      memcpy(v9, v8, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      uint64_t v15 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v9, v8, v15);
      *(void *)&v9[v10[5]] = *(void *)&v8[v10[5]];
      *(void *)&v9[v10[6]] = *(void *)&v8[v10[6]];
      *(void *)&v9[v10[7]] = *(void *)&v8[v10[7]];
      *(void *)&v9[v10[8]] = *(void *)&v8[v10[8]];
      v9[v10[9]] = v8[v10[9]];
      uint64_t v16 = *(void (**)(char *, void, uint64_t, int *))(v11 + 56);
      swift_bridgeObjectRetain();
      v16(v9, 0, 1, v10);
    }
  }
  return v3;
}

uint64_t sub_1004BED8C(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 36);
  uint64_t v5 = type metadata accessor for BeaconLocationUpdate();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48))(v4, 1, v5);
  if (!result)
  {
    uint64_t v7 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v4, v7);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1004BEE68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  uint64_t v6 = *(int *)(a3 + 36);
  uint64_t v7 = (char *)(a2 + v6);
  int v8 = (char *)(a1 + v6);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v9 = (int *)type metadata accessor for BeaconLocationUpdate();
  uint64_t v10 = *((void *)v9 - 1);
  uint64_t v11 = *(unsigned int (**)(char *, uint64_t, int *))(v10 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v11(v7, 1, v9))
  {
    uint64_t v12 = sub_10000588C(&qword_101646EB8);
    memcpy(v8, v7, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    uint64_t v13 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16))(v8, v7, v13);
    *(void *)&v8[v9[5]] = *(void *)&v7[v9[5]];
    *(void *)&v8[v9[6]] = *(void *)&v7[v9[6]];
    *(void *)&v8[v9[7]] = *(void *)&v7[v9[7]];
    *(void *)&v8[v9[8]] = *(void *)&v7[v9[8]];
    v8[v9[9]] = v7[v9[9]];
    uint64_t v14 = *(void (**)(char *, void, uint64_t, int *))(v10 + 56);
    swift_bridgeObjectRetain();
    v14(v8, 0, 1, v9);
  }
  return a1;
}

uint64_t sub_1004BF018(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v6 = *(int *)(a3 + 36);
  uint64_t v7 = (unsigned char *)(a1 + v6);
  int v8 = (unsigned char *)(a2 + v6);
  uint64_t v9 = (int *)type metadata accessor for BeaconLocationUpdate();
  uint64_t v10 = *((void *)v9 - 1);
  uint64_t v11 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      uint64_t v18 = type metadata accessor for Date();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v18 - 8) + 24))(v7, v8, v18);
      *(void *)&v7[v9[5]] = *(void *)&v8[v9[5]];
      *(void *)&v7[v9[6]] = *(void *)&v8[v9[6]];
      *(void *)&v7[v9[7]] = *(void *)&v8[v9[7]];
      *(void *)&v7[v9[8]] = *(void *)&v8[v9[8]];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v7[v9[9]] = v8[v9[9]];
      return a1;
    }
    sub_1004BF2A8((uint64_t)v7);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v16 = sub_10000588C(&qword_101646EB8);
    memcpy(v7, v8, *(void *)(*(void *)(v16 - 8) + 64));
    return a1;
  }
  uint64_t v14 = type metadata accessor for Date();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v14 - 8) + 16))(v7, v8, v14);
  *(void *)&v7[v9[5]] = *(void *)&v8[v9[5]];
  *(void *)&v7[v9[6]] = *(void *)&v8[v9[6]];
  *(void *)&v7[v9[7]] = *(void *)&v8[v9[7]];
  *(void *)&v7[v9[8]] = *(void *)&v8[v9[8]];
  v7[v9[9]] = v8[v9[9]];
  uint64_t v15 = *(void (**)(unsigned char *, void, uint64_t, int *))(v10 + 56);
  swift_bridgeObjectRetain();
  v15(v7, 0, 1, v9);
  return a1;
}

uint64_t sub_1004BF2A8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for BeaconLocationUpdate();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1004BF304(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v4 = *(int *)(a3 + 36);
  uint64_t v5 = (char *)(a1 + v4);
  uint64_t v6 = (char *)(a2 + v4);
  uint64_t v7 = (int *)type metadata accessor for BeaconLocationUpdate();
  uint64_t v8 = *((void *)v7 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v8 + 48))(v6, 1, v7))
  {
    uint64_t v9 = sub_10000588C(&qword_101646EB8);
    memcpy(v5, v6, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    uint64_t v10 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32))(v5, v6, v10);
    *(void *)&v5[v7[5]] = *(void *)&v6[v7[5]];
    *(void *)&v5[v7[6]] = *(void *)&v6[v7[6]];
    *(void *)&v5[v7[7]] = *(void *)&v6[v7[7]];
    *(void *)&v5[v7[8]] = *(void *)&v6[v7[8]];
    v5[v7[9]] = v6[v7[9]];
    (*(void (**)(char *, void, uint64_t, int *))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

uint64_t sub_1004BF490(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v7;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  uint64_t v8 = *(int *)(a3 + 36);
  uint64_t v9 = (unsigned char *)(a1 + v8);
  uint64_t v10 = (unsigned char *)(a2 + v8);
  uint64_t v11 = (int *)type metadata accessor for BeaconLocationUpdate();
  uint64_t v12 = *((void *)v11 - 1);
  int v13 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      uint64_t v19 = type metadata accessor for Date();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v19 - 8) + 40))(v9, v10, v19);
      *(void *)&v9[v11[5]] = *(void *)&v10[v11[5]];
      *(void *)&v9[v11[6]] = *(void *)&v10[v11[6]];
      *(void *)&v9[v11[7]] = *(void *)&v10[v11[7]];
      *(void *)&v9[v11[8]] = *(void *)&v10[v11[8]];
      swift_bridgeObjectRelease();
      v9[v11[9]] = v10[v11[9]];
      return a1;
    }
    sub_1004BF2A8((uint64_t)v9);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    uint64_t v17 = sub_10000588C(&qword_101646EB8);
    memcpy(v9, v10, *(void *)(*(void *)(v17 - 8) + 64));
    return a1;
  }
  uint64_t v16 = type metadata accessor for Date();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v16 - 8) + 32))(v9, v10, v16);
  *(void *)&v9[v11[5]] = *(void *)&v10[v11[5]];
  *(void *)&v9[v11[6]] = *(void *)&v10[v11[6]];
  *(void *)&v9[v11[7]] = *(void *)&v10[v11[7]];
  *(void *)&v9[v11[8]] = *(void *)&v10[v11[8]];
  v9[v11[9]] = v10[v11[9]];
  (*(void (**)(unsigned char *, void, uint64_t, int *))(v12 + 56))(v9, 0, 1, v11);
  return a1;
}

uint64_t sub_1004BF6F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1004BF708);
}

uint64_t sub_1004BF708(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    uint64_t v8 = sub_10000588C(&qword_101646EB8);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 36);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1004BF7BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1004BF7D0);
}

uint64_t sub_1004BF7D0(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }
  else
  {
    uint64_t v7 = sub_10000588C(&qword_101646EB8);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 36);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for Intent()
{
  uint64_t result = qword_101646F18;
  if (!qword_101646F18) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1004BF8C8()
{
  sub_1004BF98C();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_1004BF98C()
{
  if (!qword_101646F28)
  {
    type metadata accessor for BeaconLocationUpdate();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_101646F28);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for IntentType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1004BFAB0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for IntentType()
{
  return &type metadata for IntentType;
}

uint64_t sub_1004BFAE8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_10071F108(*a1, *a2);
}

Swift::Int sub_1004BFAF4()
{
  return Hasher._finalize()();
}

uint64_t sub_1004BFBA8()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1004BFC48()
{
  return Hasher._finalize()();
}

unint64_t sub_1004BFCF8@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1004BFDF0(*a1);
  *a2 = result;
  return result;
}

void sub_1004BFD28(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE800000000000000;
  unint64_t v4 = 0xEA00000000007265;
  uint64_t v5 = 0x7473696765726E75;
  if (v2 != 1)
  {
    uint64_t v5 = 0x6E6F697461636F6CLL;
    unint64_t v4 = 0xEE00657461647055;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x7265747369676572;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

unint64_t sub_1004BFD9C()
{
  unint64_t result = qword_101646F68;
  if (!qword_101646F68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101646F68);
  }
  return result;
}

unint64_t sub_1004BFDF0(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1015A1800, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 3) {
    return 3;
  }
  else {
    return v3;
  }
}

uint64_t destroy for AirPodsLESendPairingStatusCommandPayload(uint64_t *a1)
{
  sub_10001CFB8(*a1, a1[1]);
  sub_10001CFB8(a1[2], a1[3]);
  sub_10001CFB8(a1[4], a1[5]);
  uint64_t v2 = a1[6];
  unint64_t v3 = a1[7];

  return sub_10001CFB8(v2, v3);
}

uint64_t *initializeWithCopy for AirPodsLESendPairingStatusCommandPayload(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_1000361E0(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  uint64_t v6 = a2[2];
  unint64_t v7 = a2[3];
  sub_1000361E0(v6, v7);
  a1[2] = v6;
  a1[3] = v7;
  uint64_t v8 = a2[4];
  unint64_t v9 = a2[5];
  sub_1000361E0(v8, v9);
  a1[4] = v8;
  a1[5] = v9;
  uint64_t v11 = a2[6];
  unint64_t v10 = a2[7];
  sub_1000361E0(v11, v10);
  a1[6] = v11;
  a1[7] = v10;
  return a1;
}

uint64_t *assignWithCopy for AirPodsLESendPairingStatusCommandPayload(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_1000361E0(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_10001CFB8(v6, v7);
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  sub_1000361E0(v8, v9);
  uint64_t v10 = a1[2];
  unint64_t v11 = a1[3];
  a1[2] = v8;
  a1[3] = v9;
  sub_10001CFB8(v10, v11);
  uint64_t v12 = a2[4];
  unint64_t v13 = a2[5];
  sub_1000361E0(v12, v13);
  uint64_t v14 = a1[4];
  unint64_t v15 = a1[5];
  a1[4] = v12;
  a1[5] = v13;
  sub_10001CFB8(v14, v15);
  uint64_t v17 = a2[6];
  unint64_t v16 = a2[7];
  sub_1000361E0(v17, v16);
  uint64_t v18 = a1[6];
  unint64_t v19 = a1[7];
  a1[6] = v17;
  a1[7] = v16;
  sub_10001CFB8(v18, v19);
  return a1;
}

__n128 initializeWithTake for AirPodsLESendPairingStatusCommandPayload(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t *assignWithTake for AirPodsLESendPairingStatusCommandPayload(uint64_t *a1, _OWORD *a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_10001CFB8(v4, v5);
  uint64_t v6 = a1[2];
  unint64_t v7 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_10001CFB8(v6, v7);
  uint64_t v8 = a1[4];
  unint64_t v9 = a1[5];
  *((_OWORD *)a1 + 2) = a2[2];
  sub_10001CFB8(v8, v9);
  uint64_t v10 = a1[6];
  unint64_t v11 = a1[7];
  *((_OWORD *)a1 + 3) = a2[3];
  sub_10001CFB8(v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for AirPodsLESendPairingStatusCommandPayload(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xD && *(unsigned char *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AirPodsLESendPairingStatusCommandPayload(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 13;
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if (a3 >= 0xD) {
      *(unsigned char *)(result + 64) = 0;
    }
    if (a2)
    {
      *(void *)__n128 result = 0;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DeviceEventEncryptAndSignEnvelope()
{
  return &type metadata for DeviceEventEncryptAndSignEnvelope;
}

uint64_t sub_1004C00F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1004C0104);
}

uint64_t sub_1004C0104(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 28);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);

  return v6(v4, a2, v5);
}

uint64_t sub_1004C0174(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1004C0188);
}

uint64_t sub_1004C0188(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 28);
  uint64_t v6 = type metadata accessor for Date();
  unint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(v5, a2, a2, v6);
}

uint64_t type metadata accessor for DeviceEventFormat.LocationFormat(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_101646FC8);
}

uint64_t sub_1004C021C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1004C0230);
}

uint64_t sub_1004C0230(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_1004C029C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1004C02B0);
}

uint64_t sub_1004C02B0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for DeviceEventFormat.AttachmentInfoFormat(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_101647060);
}

uint64_t *sub_1004C0340(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for DeviceEventFormat.LocationFormat(0);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      uint64_t v9 = sub_10000588C(&qword_101647098);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = a2[2];
      uint64_t v11 = *(int *)(v7 + 28);
      uint64_t v12 = (char *)a1 + v11;
      unint64_t v13 = (char *)a2 + v11;
      uint64_t v14 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v15 = a3[5];
    unint64_t v16 = (char *)a1 + v15;
    uint64_t v17 = (char *)a2 + v15;
    uint64_t v18 = type metadata accessor for DeviceEventFormat.AttachmentInfoFormat(0);
    uint64_t v19 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
    {
      uint64_t v20 = sub_10000588C(&qword_1016470A0);
      memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
    }
    else
    {
      uint64_t v21 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v21 - 8) + 16))(v16, v17, v21);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
    }
    uint64_t v22 = a3[7];
    *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
    unsigned int v23 = (char *)a1 + v22;
    uint64_t v24 = (char *)a2 + v22;
    uint64_t v25 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v25 - 8) + 16))(v23, v24, v25);
  }
  return a1;
}

uint64_t sub_1004C0644(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DeviceEventFormat.LocationFormat(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, 1, v4))
  {
    uint64_t v5 = a1 + *(int *)(v4 + 28);
    uint64_t v6 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  }
  uint64_t v7 = a1 + *(int *)(a2 + 20);
  uint64_t v8 = type metadata accessor for DeviceEventFormat.AttachmentInfoFormat(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8))
  {
    uint64_t v9 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v7, v9);
  }
  uint64_t v10 = a1 + *(int *)(a2 + 28);
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8);

  return v12(v10, v11);
}

void *sub_1004C07C0(void *a1, void *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DeviceEventFormat.LocationFormat(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = sub_10000588C(&qword_101647098);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    uint64_t v9 = *(int *)(v6 + 28);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v13 = a3[5];
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = type metadata accessor for DeviceEventFormat.AttachmentInfoFormat(0);
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    uint64_t v18 = sub_10000588C(&qword_1016470A0);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    uint64_t v19 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 16))(v14, v15, v19);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  uint64_t v20 = a3[7];
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  uint64_t v21 = (char *)a1 + v20;
  uint64_t v22 = (char *)a2 + v20;
  uint64_t v23 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 16))(v21, v22, v23);
  return a1;
}

void *sub_1004C0A74(void *a1, void *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DeviceEventFormat.LocationFormat(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      a1[2] = a2[2];
      uint64_t v11 = *(int *)(v6 + 28);
      uint64_t v12 = (char *)a1 + v11;
      uint64_t v13 = (char *)a2 + v11;
      uint64_t v14 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v12, v13, v14);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    sub_1004C0E60((uint64_t)a1, type metadata accessor for DeviceEventFormat.LocationFormat);
LABEL_6:
    uint64_t v15 = sub_10000588C(&qword_101647098);
    memcpy(a1, a2, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  uint64_t v31 = *(int *)(v6 + 28);
  uint64_t v32 = (char *)a1 + v31;
  uint64_t v33 = (char *)a2 + v31;
  uint64_t v34 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 24))(v32, v33, v34);
LABEL_7:
  uint64_t v16 = a3[5];
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = type metadata accessor for DeviceEventFormat.AttachmentInfoFormat(0);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  int v22 = v21(v17, 1, v19);
  int v23 = v21(v18, 1, v19);
  if (!v22)
  {
    if (!v23)
    {
      uint64_t v35 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 24))(v17, v18, v35);
      goto LABEL_13;
    }
    sub_1004C0E60((uint64_t)v17, type metadata accessor for DeviceEventFormat.AttachmentInfoFormat);
    goto LABEL_12;
  }
  if (v23)
  {
LABEL_12:
    uint64_t v25 = sub_10000588C(&qword_1016470A0);
    memcpy(v17, v18, *(void *)(*(void *)(v25 - 8) + 64));
    goto LABEL_13;
  }
  uint64_t v24 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 16))(v17, v18, v24);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
LABEL_13:
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  uint64_t v26 = a3[7];
  int v27 = (char *)a1 + v26;
  int v28 = (char *)a2 + v26;
  uint64_t v29 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 24))(v27, v28, v29);
  return a1;
}

uint64_t sub_1004C0E60(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void *sub_1004C0EC0(void *a1, void *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DeviceEventFormat.LocationFormat(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    uint64_t v8 = sub_10000588C(&qword_101647098);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    a1[2] = a2[2];
    uint64_t v9 = *(int *)(v6 + 28);
    int v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v10, v11, v12);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v13 = a3[5];
  uint64_t v14 = (char *)a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = type metadata accessor for DeviceEventFormat.AttachmentInfoFormat(0);
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    uint64_t v18 = sub_10000588C(&qword_1016470A0);
    memcpy(v14, v15, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    uint64_t v19 = type metadata accessor for UUID();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v14, v15, v19);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  uint64_t v20 = a3[7];
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  uint64_t v21 = (char *)a1 + v20;
  int v22 = (char *)a2 + v20;
  uint64_t v23 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32))(v21, v22, v23);
  return a1;
}

void *sub_1004C1174(void *a1, void *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DeviceEventFormat.LocationFormat(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = a2[2];
      uint64_t v11 = *(int *)(v6 + 28);
      uint64_t v12 = (char *)a1 + v11;
      uint64_t v13 = (char *)a2 + v11;
      uint64_t v14 = type metadata accessor for Date();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v12, v13, v14);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    sub_1004C0E60((uint64_t)a1, type metadata accessor for DeviceEventFormat.LocationFormat);
LABEL_6:
    uint64_t v15 = sub_10000588C(&qword_101647098);
    memcpy(a1, a2, *(void *)(*(void *)(v15 - 8) + 64));
    goto LABEL_7;
  }
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = a2[2];
  uint64_t v31 = *(int *)(v6 + 28);
  uint64_t v32 = (char *)a1 + v31;
  uint64_t v33 = (char *)a2 + v31;
  uint64_t v34 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v34 - 8) + 40))(v32, v33, v34);
LABEL_7:
  uint64_t v16 = a3[5];
  uint64_t v17 = (char *)a1 + v16;
  uint64_t v18 = (char *)a2 + v16;
  uint64_t v19 = type metadata accessor for DeviceEventFormat.AttachmentInfoFormat(0);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 48);
  int v22 = v21(v17, 1, v19);
  int v23 = v21(v18, 1, v19);
  if (!v22)
  {
    if (!v23)
    {
      uint64_t v35 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 40))(v17, v18, v35);
      goto LABEL_13;
    }
    sub_1004C0E60((uint64_t)v17, type metadata accessor for DeviceEventFormat.AttachmentInfoFormat);
    goto LABEL_12;
  }
  if (v23)
  {
LABEL_12:
    uint64_t v25 = sub_10000588C(&qword_1016470A0);
    memcpy(v17, v18, *(void *)(*(void *)(v25 - 8) + 64));
    goto LABEL_13;
  }
  uint64_t v24 = type metadata accessor for UUID();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 32))(v17, v18, v24);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
LABEL_13:
  uint64_t v26 = a3[7];
  *((unsigned char *)a1 + a3[6]) = *((unsigned char *)a2 + a3[6]);
  int v27 = (char *)a1 + v26;
  int v28 = (char *)a2 + v26;
  uint64_t v29 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 40))(v27, v28, v29);
  return a1;
}

uint64_t sub_1004C154C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1004C1560);
}

uint64_t sub_1004C1560(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = sub_10000588C(&qword_101647098);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_5:
    return v9(v10, a2, v8);
  }
  uint64_t v11 = sub_10000588C(&qword_1016470A0);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + a3[5];
    int v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    goto LABEL_5;
  }
  if (a2 == 247)
  {
    if (*(unsigned __int8 *)(a1 + a3[6]) <= 8u) {
      int v14 = 8;
    }
    else {
      int v14 = *(unsigned __int8 *)(a1 + a3[6]);
    }
    unsigned int v15 = v14 - 8;
    if (*(unsigned __int8 *)(a1 + a3[6]) >= 8u) {
      return v15;
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v16 = type metadata accessor for Date();
    uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48);
    uint64_t v18 = v16;
    uint64_t v19 = a1 + a3[7];
    return v17(v19, a2, v18);
  }
}

uint64_t sub_1004C16EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1004C1700);
}

uint64_t sub_1004C1700(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = sub_10000588C(&qword_101647098);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_5:
    return v11(v12, a2, a2, v10);
  }
  uint64_t result = sub_10000588C(&qword_1016470A0);
  uint64_t v14 = *(void *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v12 = a1 + a4[5];
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_5;
  }
  if (a3 == 247)
  {
    *(unsigned char *)(a1 + a4[6]) = a2 + 8;
  }
  else
  {
    uint64_t v15 = type metadata accessor for Date();
    uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
    uint64_t v17 = v15;
    uint64_t v18 = a1 + a4[7];
    return v16(v18, a2, a2, v17);
  }
  return result;
}

uint64_t type metadata accessor for DeviceEventFormat(uint64_t a1)
{
  return sub_1000F4EA4(a1, (uint64_t *)&unk_101647100);
}

void sub_1004C18A4()
{
  sub_1004C19E8(319, &qword_101647110, (void (*)(uint64_t))type metadata accessor for DeviceEventFormat.LocationFormat);
  if (v0 <= 0x3F)
  {
    sub_1004C19E8(319, (unint64_t *)&unk_101647118, (void (*)(uint64_t))type metadata accessor for DeviceEventFormat.AttachmentInfoFormat);
    if (v1 <= 0x3F)
    {
      type metadata accessor for Date();
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void sub_1004C19E8(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t *sub_1004C1A3C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_1000361E0(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for Date();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
  }
  return a1;
}

uint64_t destroy for BeaconPayloadv1(uint64_t a1, uint64_t a2)
{
  sub_10001CFB8(*(void *)a1, *(void *)(a1 + 8));
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t *sub_1004C1BA0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000361E0(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

uint64_t *sub_1004C1C38(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_1000361E0(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_10001CFB8(v8, v9);
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

_OWORD *sub_1004C1CD8(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t *sub_1004C1D54(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_10001CFB8(v6, v7);
  uint64_t v8 = *(int *)(a3 + 20);
  unint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_1004C1DE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1004C1DF8);
}

uint64_t sub_1004C1DF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * v4) & 0xC) != 0) {
      return 16 - ((4 * v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = type metadata accessor for Date();
    unint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 20);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_1004C1EB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1004C1EC8);
}

void *sub_1004C1EC8(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *uint64_t result = 0;
    result[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  else
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t type metadata accessor for DeviceEventEncodedInfo(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_1016471A8);
}

uint64_t sub_1004C1F98()
{
  uint64_t result = type metadata accessor for Date();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for DeviceEventEncodedPayload(uint64_t a1)
{
  sub_10001CFB8(*(void *)a1, *(void *)(a1 + 8));

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DeviceEventEncodedPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_1000361E0(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for DeviceEventEncodedPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_1000361E0(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  sub_10001CFB8(v6, v7);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(unsigned char *)(a1 + 17) = *(unsigned char *)(a2 + 17);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for DeviceEventEncodedPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001CFB8(v4, v5);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DeviceEventEncodedPayload(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DeviceEventEncodedPayload(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DeviceEventEncodedPayload()
{
  return &type metadata for DeviceEventEncodedPayload;
}

uint64_t sub_1004C2228(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_101647288);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1004C4B78();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v12 = *v3;
  char v11 = 0;
  sub_100037BB4();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    long long v12 = v3[1];
    char v11 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = v3[2];
    char v11 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    long long v12 = v3[3];
    char v11 = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v12) = 4;
    sub_1004C4BCC();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1004C2464(void *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v17 = a5;
  int v20 = a4;
  uint64_t v9 = sub_10000588C(&qword_101647348);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  long long v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1004C5A8C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v18 = a2;
  uint64_t v19 = a3;
  char v21 = 0;
  sub_100037BB4();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v5)
  {
    uint64_t v13 = v17;
    char v14 = BYTE1(v20);
    LOBYTE(v18) = v20;
    char v21 = 1;
    sub_1004C5B88();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v18) = v14;
    char v21 = 2;
    sub_1004C5BDC();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    uint64_t v18 = v13;
    char v21 = 3;
    sub_10000588C(&qword_101647338);
    sub_1004C5C30(&qword_101647360, &qword_1016471E8);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_1004C26C8(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_101647310);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_1004C54FC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v11 = *v3;
  v10[15] = 0;
  sub_100037BB4();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    type metadata accessor for DeviceEventEncodedInfo(0);
    LOBYTE(v11) = 1;
    type metadata accessor for Date();
    sub_1004C32F8((unint64_t *)&unk_10163ACE0, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1004C2898@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = a2;
  uint64_t v23 = type metadata accessor for Date();
  uint64_t v20 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v5 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = sub_10000588C(&qword_101647300);
  uint64_t v22 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DeviceEventEncodedInfo(0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1004C54FC();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  uint64_t v19 = v8;
  uint64_t v12 = v22;
  uint64_t v11 = v23;
  uint64_t v13 = v10;
  char v26 = 0;
  sub_100037AA0();
  uint64_t v14 = v24;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v18 = v13;
  *(_OWORD *)uint64_t v13 = v25;
  LOBYTE(v25) = 1;
  sub_1004C32F8(&qword_10163ACC0, (void (*)(uint64_t))&type metadata accessor for Date);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v7, v14);
  uint64_t v15 = (uint64_t)v18;
  (*(void (**)(char *, char *, uint64_t))(v20 + 32))(&v18[*(int *)(v19 + 20)], v5, v11);
  sub_1004C5550(v15, v21, type metadata accessor for DeviceEventEncodedInfo);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  return sub_1004C0E60(v15, type metadata accessor for DeviceEventEncodedInfo);
}

Swift::Int sub_1004C2BEC()
{
  return Hasher._finalize()();
}

uint64_t sub_1004C2C40()
{
  return String.hash(into:)();
}

Swift::Int sub_1004C2C58()
{
  return Hasher._finalize()();
}

uint64_t sub_1004C2CA8@<X0>(Swift::String *a1@<X0>, BOOL *a2@<X8>)
{
  Swift::Int v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1015A1868, *a1);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v3 != 0;
  return result;
}

void sub_1004C2CFC(void *a1@<X8>)
{
  *a1 = 0x4D43475F534541;
  a1[1] = 0xE700000000000000;
}

uint64_t sub_1004C2D18()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1004C2D78()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1004C2DC8()
{
  uint64_t result = 0x727574616E676973;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6574707972636E65;
      break;
    case 2:
      uint64_t result = 6775156;
      break;
    case 3:
      uint64_t result = 0x65636E6F6ELL;
      break;
    case 4:
      uint64_t result = 0x687469726F676C61;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1004C2E78@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1004C4C74(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1004C2EA0(uint64_t a1)
{
  unint64_t v2 = sub_1004C4B78();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004C2EDC(uint64_t a1)
{
  unint64_t v2 = sub_1004C4B78();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1004C2F18@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_1004C4EB0(a1, (uint64_t *)v7);
  if (!v2)
  {
    long long v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
    double result = *(double *)&v8;
    long long v6 = v9;
    a2[2] = v8;
    a2[3] = v6;
  }
  return result;
}

uint64_t sub_1004C2F5C(void *a1)
{
  return sub_1004C2228(a1);
}

uint64_t sub_1004C2F74()
{
  uint64_t result = 25705;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6570795479656BLL;
      break;
    case 2:
      uint64_t result = 1701080941;
      break;
    case 3:
      uint64_t result = 0x6E6F697461636F6CLL;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1004C2FF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1004C55B8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1004C3020(uint64_t a1)
{
  unint64_t v2 = sub_1004C5A8C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004C305C(uint64_t a1)
{
  unint64_t v2 = sub_1004C5A8C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1004C3098()
{
  return *(unsigned __int8 *)(v0 + 17);
}

uint64_t sub_1004C30A0()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1004C30A8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1004C5764(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v5;
    *(_WORD *)(a2 + 16) = v6;
    *(void *)(a2 + 24) = v7;
  }
  return result;
}

uint64_t sub_1004C30E4(void *a1)
{
  return sub_1004C2464(a1, *(void *)v1, *(void *)(v1 + 8), *(unsigned __int16 *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1004C3108()
{
  return 0x6E6F697461636F6CLL;
}

uint64_t sub_1004C3134@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1004C68C0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1004C315C(uint64_t a1)
{
  unint64_t v2 = sub_1004C54FC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004C3198(uint64_t a1)
{
  unint64_t v2 = sub_1004C54FC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1004C31D4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 20);
  uint64_t v5 = type metadata accessor for Date();
  __int16 v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);

  return v6(a2, v4, v5);
}

uint64_t sub_1004C3244@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1004C2898(a1, a2);
}

uint64_t sub_1004C325C(void *a1)
{
  return sub_1004C26C8(a1);
}

uint64_t sub_1004C3274(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1004C32F8(&qword_1016471E0, (void (*)(uint64_t))type metadata accessor for DeviceEventEncodedInfo);
  uint64_t result = sub_1004C32F8(&qword_1016471E8, (void (*)(uint64_t))type metadata accessor for DeviceEventEncodedInfo);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1004C32F8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

Swift::Int sub_1004C3340()
{
  Swift::UInt32 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1004C3388()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int sub_1004C33B4()
{
  Swift::UInt32 v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_1004C33F8@<X0>(unsigned int *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1004C69B8(*a1);
  *a2 = result;
  return result;
}

void sub_1004C3424(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_1004C3430()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1004C3490()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1004C34E0(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_101647260);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  long long v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_1004C4AD0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11[15] = 0;
  type metadata accessor for DeviceEventFormat.LocationFormat(0);
  sub_1004C32F8(&qword_101647270, (void (*)(uint64_t))type metadata accessor for DeviceEventFormat.LocationFormat);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v2)
  {
    uint64_t v9 = type metadata accessor for DeviceEventFormat(0);
    v11[14] = 1;
    type metadata accessor for DeviceEventFormat.AttachmentInfoFormat(0);
    sub_1004C32F8(&qword_101647278, (void (*)(uint64_t))type metadata accessor for DeviceEventFormat.AttachmentInfoFormat);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v11[13] = *(unsigned char *)(v3 + *(int *)(v9 + 24));
    v11[12] = 2;
    sub_1004C4B24();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v11[11] = 3;
    type metadata accessor for Date();
    sub_1004C32F8((unint64_t *)&unk_10163ACE0, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1004C37A0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = a2;
  uint64_t v23 = type metadata accessor for Date();
  uint64_t v21 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000588C(&qword_1016470A0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_101647098);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_10000588C(&qword_1016472C8);
  uint64_t v24 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (int *)type metadata accessor for DeviceEventFormat(0);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = a1[3];
  int v27 = a1;
  sub_10001CD44(a1, v16);
  sub_1004C4AD0();
  long long v25 = v12;
  uint64_t v17 = v28;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v17) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v27);
  }
  uint64_t v18 = v24;
  type metadata accessor for DeviceEventFormat.LocationFormat(0);
  char v33 = 0;
  sub_1004C32F8(&qword_1016472D0, (void (*)(uint64_t))type metadata accessor for DeviceEventFormat.LocationFormat);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  sub_10001D608((uint64_t)v10, (uint64_t)v15, &qword_101647098);
  type metadata accessor for DeviceEventFormat.AttachmentInfoFormat(0);
  char v32 = 1;
  sub_1004C32F8(&qword_1016472D8, (void (*)(uint64_t))type metadata accessor for DeviceEventFormat.AttachmentInfoFormat);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  sub_10001D608((uint64_t)v7, (uint64_t)&v15[v13[5]], &qword_1016470A0);
  char v30 = 2;
  sub_1004C53EC();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  v15[v13[6]] = v31;
  char v29 = 3;
  sub_1004C32F8(&qword_10163ACC0, (void (*)(uint64_t))&type metadata accessor for Date);
  uint64_t v19 = v23;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v25, v26);
  (*(void (**)(void, char *, uint64_t))(v21 + 32))(v13[7], v4, v19);
  sub_1004C5550(0, v22, type metadata accessor for DeviceEventFormat);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v27);
  return sub_1004C0E60(0, type metadata accessor for DeviceEventFormat);
}

uint64_t sub_1004C3CD4(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_1016472B0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = &v8[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_1004C4C20();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v8[15] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v1)
  {
    v8[14] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v8[13] = 2;
    KeyedEncodingContainer.encode(_:forKey:)();
    type metadata accessor for DeviceEventFormat.LocationFormat(0);
    v8[12] = 3;
    type metadata accessor for Date();
    sub_1004C32F8((unint64_t *)&unk_10163ACE0, (void (*)(uint64_t))&type metadata accessor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_1004C3EDC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v22 = a2;
  uint64_t v3 = type metadata accessor for Date();
  uint64_t v23 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_1016472A0);
  uint64_t v24 = *(void *)(v6 - 8);
  uint64_t v25 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DeviceEventFormat.LocationFormat(0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1004C4C20();
  uint64_t v26 = v8;
  uint64_t v12 = v27;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v12)
  {
    uint64_t v13 = v5;
    char v31 = 0;
    uint64_t v14 = v24;
    uint64_t v15 = v25;
    KeyedDecodingContainer.decode(_:forKey:)();
    *(void *)uint64_t v11 = v16;
    char v30 = 1;
    KeyedDecodingContainer.decode(_:forKey:)();
    *((void *)v11 + 1) = v17;
    char v29 = 2;
    KeyedDecodingContainer.decode(_:forKey:)();
    *((void *)v11 + 2) = v19;
    char v28 = 3;
    sub_1004C32F8(&qword_10163ACC0, (void (*)(uint64_t))&type metadata accessor for Date);
    int v27 = v13;
    uint64_t v20 = v26;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v20, v15);
    uint64_t v21 = v22;
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(&v11[*(int *)(v9 + 28)], v27, v3);
    sub_1004C5494((uint64_t)v11, v21, type metadata accessor for DeviceEventFormat.LocationFormat);
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
}

uint64_t sub_1004C421C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v15 = a2;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v17 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_1016472E8);
  uint64_t v16 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DeviceEventFormat.AttachmentInfoFormat(0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1004C5440();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    sub_1004C32F8((unint64_t *)&qword_10163B010, (void (*)(uint64_t))&type metadata accessor for UUID);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v8, v6);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v17, v4);
    sub_1004C5494((uint64_t)v11, v15, type metadata accessor for DeviceEventFormat.AttachmentInfoFormat);
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
}

uint64_t sub_1004C44B0()
{
  uint64_t result = 0x6E6F697461636F6CLL;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x656D686361747461;
      break;
    case 2:
      uint64_t result = 0x656372756F73;
      break;
    case 3:
      uint64_t result = 0x6D617473656D6974;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1004C454C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1004C69C8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1004C4574(uint64_t a1)
{
  unint64_t v2 = sub_1004C4AD0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004C45B0(uint64_t a1)
{
  unint64_t v2 = sub_1004C4AD0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1004C45EC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1004C37A0(a1, a2);
}

uint64_t sub_1004C4604(void *a1)
{
  return sub_1004C34E0(a1);
}

unint64_t sub_1004C461C()
{
  unint64_t result = 0x656475746974616CLL;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x64757469676E6F6CLL;
      break;
    case 2:
      unint64_t result = 0xD000000000000012;
      break;
    case 3:
      unint64_t result = 0x6D617473656D6974;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1004C46BC(uint64_t a1)
{
  unint64_t v2 = sub_1004C4C20();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004C46F8(uint64_t a1)
{
  unint64_t v2 = sub_1004C4C20();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1004C4734@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1004C3EDC(a1, a2);
}

uint64_t sub_1004C474C(void *a1)
{
  return sub_1004C3CD4(a1);
}

unint64_t sub_1004C4764()
{
  return 0xD000000000000010;
}

uint64_t sub_1004C4780@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1004C6C54(a1, a2);
  *a3 = result & 1;
  return result;
}

uint64_t sub_1004C47AC(uint64_t a1)
{
  unint64_t v2 = sub_1004C5440();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004C47E8(uint64_t a1)
{
  unint64_t v2 = sub_1004C5440();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1004C4824@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1004C421C(a1, a2);
}

uint64_t sub_1004C483C(void *a1)
{
  uint64_t v2 = sub_10000588C(&qword_1016472F8);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1004C5440();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for UUID();
  sub_1004C32F8(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_1004C49B0()
{
  return sub_1004C32F8(&qword_1016471F0, (void (*)(uint64_t))type metadata accessor for DeviceEventEncodedInfo);
}

unint64_t sub_1004C49F8(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1004C4A28();
  unint64_t result = sub_1004C4A7C();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1004C4A28()
{
  unint64_t result = qword_101647250;
  if (!qword_101647250)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647250);
  }
  return result;
}

unint64_t sub_1004C4A7C()
{
  unint64_t result = qword_101647258;
  if (!qword_101647258)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647258);
  }
  return result;
}

unint64_t sub_1004C4AD0()
{
  unint64_t result = qword_101647268;
  if (!qword_101647268)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647268);
  }
  return result;
}

unint64_t sub_1004C4B24()
{
  unint64_t result = qword_101647280;
  if (!qword_101647280)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647280);
  }
  return result;
}

unint64_t sub_1004C4B78()
{
  unint64_t result = qword_101647290;
  if (!qword_101647290)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647290);
  }
  return result;
}

unint64_t sub_1004C4BCC()
{
  unint64_t result = qword_101647298;
  if (!qword_101647298)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647298);
  }
  return result;
}

unint64_t sub_1004C4C20()
{
  unint64_t result = qword_1016472A8;
  if (!qword_1016472A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016472A8);
  }
  return result;
}

uint64_t sub_1004C4C74(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x727574616E676973 && a2 == 0xE900000000000065;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6574707972636E65 && a2 == 0xED00006174614464 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 6775156 && a2 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x65636E6F6ELL && a2 == 0xE500000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x687469726F676C61 && a2 == 0xE90000000000006DLL)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t sub_1004C4EB0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_10000588C(&qword_1016472B8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1004C4B78();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  char v39 = 0;
  sub_100037AA0();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v34 = a2;
  uint64_t v10 = v37;
  unint64_t v9 = v38;
  char v39 = 1;
  sub_1000361E0(v37, v38);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  unint64_t v30 = v9;
  uint64_t v31 = v10;
  uint64_t v12 = v37;
  unint64_t v11 = v38;
  char v39 = 2;
  sub_1000361E0(v37, v38);
  uint64_t v29 = 0;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  unint64_t v32 = v11;
  uint64_t v33 = v12;
  uint64_t v14 = v37;
  unint64_t v13 = v38;
  char v39 = 3;
  sub_1000361E0(v37, v38);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v35 = v14;
  unint64_t v36 = v13;
  uint64_t v15 = v37;
  unint64_t v16 = v38;
  LOBYTE(v37) = 4;
  sub_1000361E0(v15, v38);
  sub_1004C5398();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v28 = v15;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v17 = v15;
  unint64_t v18 = v30;
  sub_1000361E0(v31, v30);
  unint64_t v20 = v32;
  uint64_t v19 = v33;
  sub_1000361E0(v33, v32);
  uint64_t v22 = v35;
  unint64_t v21 = v36;
  sub_1000361E0(v35, v36);
  sub_1000361E0(v17, v16);
  sub_10001CFB8(v17, v16);
  sub_10001CFB8(v22, v21);
  sub_10001CFB8(v19, v20);
  uint64_t v23 = v31;
  sub_10001CFB8(v31, v18);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  sub_10001CFB8(v23, v18);
  sub_10001CFB8(v19, v20);
  sub_10001CFB8(v22, v21);
  uint64_t v24 = v28;
  uint64_t result = sub_10001CFB8(v28, v16);
  uint64_t v26 = v34;
  *uint64_t v34 = v23;
  v26[1] = v18;
  _OWORD v26[2] = v19;
  v26[3] = v20;
  unsigned char v26[4] = v22;
  void v26[5] = v21;
  v26[6] = v24;
  v26[7] = v16;
  return result;
}

unint64_t sub_1004C5398()
{
  unint64_t result = qword_1016472C0;
  if (!qword_1016472C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016472C0);
  }
  return result;
}

unint64_t sub_1004C53EC()
{
  unint64_t result = qword_1016472E0;
  if (!qword_1016472E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016472E0);
  }
  return result;
}

unint64_t sub_1004C5440()
{
  unint64_t result = qword_1016472F0;
  if (!qword_1016472F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016472F0);
  }
  return result;
}

uint64_t sub_1004C5494(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

unint64_t sub_1004C54FC()
{
  unint64_t result = qword_101647308;
  if (!qword_101647308)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647308);
  }
  return result;
}

uint64_t sub_1004C5550(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1004C55B8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 25705 && a2 == 0xE200000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6570795479656BLL && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1701080941 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6E6F697461636F6CLL && a2 == 0xEC0000006F666E49)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_1004C5764(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_101647318);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = a1[3];
  sub_10001CD44(a1, v7);
  sub_1004C5A8C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  else
  {
    char v13 = 0;
    sub_100037AA0();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v7 = v10;
    unint64_t v9 = v11;
    char v13 = 1;
    sub_1000361E0(v10, v11);
    sub_1004C5AE0();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    char v13 = 2;
    sub_1004C5B34();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    int v12 = v10;
    sub_10000588C(&qword_101647338);
    char v13 = 3;
    sub_1004C5C30(&qword_101647340, &qword_1016471E0);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    sub_1000361E0(v7, v9);
    swift_bridgeObjectRetain();
    sub_10001CFB8(v7, v9);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
    sub_10001CFB8(v7, v9);
    swift_bridgeObjectRelease();
  }
  return v7;
}

unint64_t sub_1004C5A8C()
{
  unint64_t result = qword_101647320;
  if (!qword_101647320)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647320);
  }
  return result;
}

unint64_t sub_1004C5AE0()
{
  unint64_t result = qword_101647328;
  if (!qword_101647328)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647328);
  }
  return result;
}

unint64_t sub_1004C5B34()
{
  unint64_t result = qword_101647330;
  if (!qword_101647330)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647330);
  }
  return result;
}

unint64_t sub_1004C5B88()
{
  unint64_t result = qword_101647350;
  if (!qword_101647350)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647350);
  }
  return result;
}

unint64_t sub_1004C5BDC()
{
  unint64_t result = qword_101647358;
  if (!qword_101647358)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647358);
  }
  return result;
}

uint64_t sub_1004C5C30(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000592C(&qword_101647338);
    sub_1004C32F8(a2, (void (*)(uint64_t))type metadata accessor for DeviceEventEncodedInfo);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for DeviceEventEncodedPayload.CodingKeys()
{
  return &type metadata for DeviceEventEncodedPayload.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for DeviceEventEncodedInfo.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1004C5DA4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DeviceEventEncodedInfo.CodingKeys()
{
  return &type metadata for DeviceEventEncodedInfo.CodingKeys;
}

ValueMetadata *type metadata accessor for DeviceEventFormat.AttachmentInfoFormat.CodingKeys()
{
  return &type metadata for DeviceEventFormat.AttachmentInfoFormat.CodingKeys;
}

ValueMetadata *type metadata accessor for DeviceEventFormat.LocationFormat.CodingKeys()
{
  return &type metadata for DeviceEventFormat.LocationFormat.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for DeviceEventEncryptAndSignEnvelope.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1004C5ECCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DeviceEventEncryptAndSignEnvelope.CodingKeys()
{
  return &type metadata for DeviceEventEncryptAndSignEnvelope.CodingKeys;
}

unsigned char *_s12searchpartyd25DeviceEventEncodedPayloadV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1004C5FD0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DeviceEventFormat.CodingKeys()
{
  return &type metadata for DeviceEventFormat.CodingKeys;
}

unsigned char *_s12searchpartyd33DeviceEventEncryptAndSignEnvelopeV9AlgorithmOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1004C60A4);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for DeviceEventEncryptAndSignEnvelope.Algorithm()
{
  return &type metadata for DeviceEventEncryptAndSignEnvelope.Algorithm;
}

unsigned char *storeEnumTagSinglePayload for DeviceEventFormat.Source(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *uint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1004C61A8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DeviceEventFormat.Source()
{
  return &type metadata for DeviceEventFormat.Source;
}

unint64_t sub_1004C61E4()
{
  unint64_t result = qword_101647368;
  if (!qword_101647368)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647368);
  }
  return result;
}

unint64_t sub_1004C623C()
{
  unint64_t result = qword_101647370;
  if (!qword_101647370)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647370);
  }
  return result;
}

unint64_t sub_1004C6294()
{
  unint64_t result = qword_101647378;
  if (!qword_101647378)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647378);
  }
  return result;
}

unint64_t sub_1004C62EC()
{
  unint64_t result = qword_101647380;
  if (!qword_101647380)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647380);
  }
  return result;
}

unint64_t sub_1004C6344()
{
  unint64_t result = qword_101647388;
  if (!qword_101647388)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647388);
  }
  return result;
}

unint64_t sub_1004C639C()
{
  unint64_t result = qword_101647390;
  if (!qword_101647390)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647390);
  }
  return result;
}

unint64_t sub_1004C63F4()
{
  unint64_t result = qword_101647398;
  if (!qword_101647398)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647398);
  }
  return result;
}

unint64_t sub_1004C644C()
{
  unint64_t result = qword_1016473A0;
  if (!qword_1016473A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016473A0);
  }
  return result;
}

unint64_t sub_1004C64A4()
{
  unint64_t result = qword_1016473A8;
  if (!qword_1016473A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016473A8);
  }
  return result;
}

unint64_t sub_1004C64FC()
{
  unint64_t result = qword_1016473B0;
  if (!qword_1016473B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016473B0);
  }
  return result;
}

unint64_t sub_1004C6554()
{
  unint64_t result = qword_1016473B8;
  if (!qword_1016473B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016473B8);
  }
  return result;
}

unint64_t sub_1004C65AC()
{
  unint64_t result = qword_1016473C0;
  if (!qword_1016473C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016473C0);
  }
  return result;
}

unint64_t sub_1004C6604()
{
  unint64_t result = qword_1016473C8;
  if (!qword_1016473C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016473C8);
  }
  return result;
}

unint64_t sub_1004C665C()
{
  unint64_t result = qword_1016473D0;
  if (!qword_1016473D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016473D0);
  }
  return result;
}

unint64_t sub_1004C66B4()
{
  unint64_t result = qword_1016473D8;
  if (!qword_1016473D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016473D8);
  }
  return result;
}

unint64_t sub_1004C670C()
{
  unint64_t result = qword_1016473E0;
  if (!qword_1016473E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016473E0);
  }
  return result;
}

unint64_t sub_1004C6764()
{
  unint64_t result = qword_1016473E8;
  if (!qword_1016473E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016473E8);
  }
  return result;
}

unint64_t sub_1004C67BC()
{
  unint64_t result = qword_1016473F0;
  if (!qword_1016473F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016473F0);
  }
  return result;
}

unint64_t sub_1004C6814()
{
  unint64_t result = qword_1016473F8;
  if (!qword_1016473F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016473F8);
  }
  return result;
}

unint64_t sub_1004C686C()
{
  unint64_t result = qword_101647400;
  if (!qword_101647400)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647400);
  }
  return result;
}

uint64_t sub_1004C68C0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E6F697461636F6CLL && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F697461636F6CLL && a2 == 0xEA00000000007354)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1004C69B8(uint64_t result)
{
  if (result >= 8) {
    return 8;
  }
  else {
    return result;
  }
}

uint64_t sub_1004C69C8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E6F697461636F6CLL && a2 == 0xE800000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656D686361747461 && a2 == 0xEE006F666E49746ELL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656372756F73 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6D617473656D6974 && a2 == 0xE900000000000070)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

unint64_t sub_1004C6BAC()
{
  unint64_t result = qword_101647408;
  if (!qword_101647408)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647408);
  }
  return result;
}

unint64_t sub_1004C6C00()
{
  unint64_t result = qword_101647410;
  if (!qword_101647410)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647410);
  }
  return result;
}

uint64_t sub_1004C6C54(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000010 && a2 == 0x80000001013FECF0)
  {
    swift_bridgeObjectRelease();
    char v2 = 0;
  }
  else
  {
    char v3 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    char v2 = v3 ^ 1;
  }
  return v2 & 1;
}

id sub_1004C6CDC()
{
  uint64_t v1 = self;
  id v2 = [v1 sharedInstance];
  id v3 = [v2 altDSIDForAccount:v0];

  if (!v3) {
    return 0;
  }
  id v4 = [v1 sharedInstance];
  id v5 = [v4 authKitAccountWithAltDSID:v3];

  if (!v5) {
    return 0;
  }
  id v6 = [v1 sharedInstance];
  id v7 = [v6 securityLevelForAccount:v5];

  return v7;
}

void *sub_1004C6DD4()
{
  id v1 = [v0 accountTypeWithAccountTypeIdentifier:ACAccountTypeIdentifierIDMS];
  id v2 = [v0 accountsWithAccountType:v1];
  if (v2
    && (id v3 = v2,
        uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(),
        v3,
        id v5 = sub_1004C74C8(v4, &qword_101647420),
        swift_bridgeObjectRelease(),
        v5))
  {
    id v6 = [v0 aa_primaryAppleAccount];
    id v7 = v6;
    uint64_t v8 = sub_1004C76EC((unint64_t)v5, v6);
    swift_bridgeObjectRelease();

    id v1 = v7;
  }
  else
  {
    uint64_t v8 = 0;
  }

  return v8;
}

uint64_t sub_1004C6EF0()
{
  id v1 = [self sharedInstance];
  id v2 = [v1 additionalInfoForAccount:v0];

  if (!v2)
  {
    static os_log_type_t.error.getter();
    sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
    unint64_t v20 = (void *)OS_os_log.init(subsystem:category:)();
    os_log(_:dso:log:_:_:)();

    return 0;
  }
  uint64_t v3 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

  static os_log_type_t.debug.getter();
  sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
  uint64_t v4 = (void *)OS_os_log.init(subsystem:category:)();
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_101342130;
  swift_bridgeObjectRetain();
  uint64_t v6 = Dictionary.description.getter();
  uint64_t v8 = v7;
  swift_bridgeObjectRelease();
  *(void *)(v5 + 56) = &type metadata for String;
  *(void *)(v5 + 64) = sub_10000B4CC();
  *(void *)(v5 + 32) = v6;
  *(void *)(v5 + 40) = v8;
  os_log(_:dso:log:_:_:)();

  swift_bridgeObjectRelease();
  if (!*(void *)(v3 + 16) || (uint64_t v9 = sub_100723FF4(0xD000000000000016, 0x80000001013FED60), (v10 & 1) == 0))
  {
    long long v23 = 0u;
    long long v24 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  sub_10012F428(*(void *)(v3 + 56) + 32 * v9, (uint64_t)&v23);
  swift_bridgeObjectRelease();
  if (!*((void *)&v24 + 1))
  {
LABEL_15:
    sub_100498978((uint64_t)&v23);
    goto LABEL_16;
  }
  sub_10000588C(&qword_101647418);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_16:
    static os_log_type_t.error.getter();
    uint64_t v19 = (void *)OS_os_log.init(subsystem:category:)();
    os_log(_:dso:log:_:_:)();

    return 0;
  }
  uint64_t v11 = *(void *)(v22 + 16);
  if (!v11)
  {
LABEL_20:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v12 = 0;
  while (1)
  {
    uint64_t v13 = *(void *)(v22 + 8 * v12 + 32);
    uint64_t v14 = *(void *)(v13 + 16);
    swift_bridgeObjectRetain();
    if (v14)
    {
      uint64_t v15 = sub_100723FF4(0x796C746E65636572, 0xEC00000064657355);
      if (v16) {
        break;
      }
    }
    ++v12;
    long long v23 = 0u;
    long long v24 = 0u;
    swift_bridgeObjectRelease();
    sub_100498978((uint64_t)&v23);
    if (v11 == v12) {
      goto LABEL_20;
    }
  }
  sub_10012F428(*(void *)(v13 + 56) + 32 * v15, (uint64_t)&v23);
  sub_100498978((uint64_t)&v23);
  swift_bridgeObjectRelease();
  if (*(void *)(v13 + 16) && (uint64_t v17 = sub_100723FF4(0xD000000000000011, 0x80000001013FEDB0), (v18 & 1) != 0))
  {
    sub_10012F428(*(void *)(v13 + 56) + 32 * v17, (uint64_t)&v23);
  }
  else
  {
    long long v23 = 0u;
    long long v24 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((void *)&v24 + 1))
  {
    sub_100498978((uint64_t)&v23);
    return 0;
  }
  if (swift_dynamicCast()) {
    return v22;
  }
  else {
    return 0;
  }
}

void *sub_1004C736C(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v12 = _swiftEmptyArrayStorage;
  sub_1000B6ED0(0, v2, 0);
  uint64_t v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    for (uint64_t i = a1 + 32; ; i += 32)
    {
      sub_10012F428(i, (uint64_t)v11);
      if (!swift_dynamicCast()) {
        break;
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1000B6ED0(0, v3[2] + 1, 1);
        uint64_t v3 = v12;
      }
      unint64_t v6 = v3[2];
      unint64_t v5 = v3[3];
      if (v6 >= v5 >> 1)
      {
        sub_1000B6ED0(v5 > 1, v6 + 1, 1);
        uint64_t v3 = v12;
      }
      v3[2] = v6 + 1;
      uint64_t v7 = &v3[2 * v6];
      v7[4] = v9;
      v7[5] = v10;
      if (!--v2) {
        return v3;
      }
    }
    swift_release();
    swift_bridgeObjectRelease();
    return 0;
  }
  return v3;
}

void *sub_1004C74B4(uint64_t a1)
{
  return sub_1004C74C8(a1, &qword_101643FA8);
}

void *sub_1004C74C8(uint64_t a1, unint64_t *a2)
{
  uint64_t v8 = _swiftEmptyArrayStorage;
  uint64_t v4 = *(void *)(a1 + 16);
  specialized ContiguousArray.reserveCapacity(_:)();
  if (!v4) {
    return v8;
  }
  for (uint64_t i = a1 + 32; ; i += 32)
  {
    sub_10012F428(i, (uint64_t)v7);
    sub_10001D4B0(0, a2);
    if (!swift_dynamicCast()) {
      break;
    }
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    if (!--v4) {
      return v8;
    }
  }
  swift_release();

  return 0;
}

void *sub_1004C75DC(uint64_t a1)
{
  return sub_1004C74C8(a1, &qword_101647428);
}

void *sub_1004C75F0(uint64_t a1)
{
  unint64_t v6 = _swiftEmptyArrayStorage;
  uint64_t v2 = *(void *)(a1 + 16);
  specialized ContiguousArray.reserveCapacity(_:)();
  if (!v2) {
    return v6;
  }
  for (uint64_t i = a1 + 32; ; i += 32)
  {
    sub_10012F428(i, (uint64_t)v5);
    type metadata accessor for SecCertificate(0);
    if (!swift_dynamicCast()) {
      break;
    }
    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
    specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    specialized ContiguousArray._endMutation()();
    if (!--v2) {
      return v6;
    }
  }
  swift_release();

  return 0;
}

void *sub_1004C76EC(unint64_t a1, void *a2)
{
  if (a1 >> 62)
  {
LABEL_31:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    if (v4) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v4)
    {
LABEL_3:
      uint64_t v20 = v4;
      uint64_t v5 = 4;
      unint64_t v21 = a2;
      do
      {
        if ((a1 & 0xC000000000000001) != 0) {
          id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v6 = *(id *)(a1 + 8 * v5);
        }
        uint64_t v7 = v6;
        uint64_t v8 = v5 - 3;
        if (__OFADD__(v5 - 4, 1))
        {
          __break(1u);
          goto LABEL_31;
        }
        id v9 = [v6 aa_altDSID];
        if (v9)
        {
          uint64_t v10 = v9;
          uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v13 = v12;

          if (!a2) {
            goto LABEL_17;
          }
        }
        else
        {
          uint64_t v11 = 0;
          uint64_t v13 = 0;
          if (!a2)
          {
LABEL_17:
            uint64_t v17 = 0;
            if (!v13) {
              goto LABEL_24;
            }
            goto LABEL_18;
          }
        }
        id v14 = [a2 aa_altDSID];
        if (v14)
        {
          uint64_t v15 = v14;
          a2 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v17 = v16;

          if (!v13) {
            goto LABEL_24;
          }
        }
        else
        {
          a2 = 0;
          uint64_t v17 = 0;
          if (!v13)
          {
LABEL_24:
            a2 = v21;
            if (!v17) {
              goto LABEL_29;
            }

            swift_bridgeObjectRelease();
            goto LABEL_6;
          }
        }
LABEL_18:
        if (v17)
        {
          if ((void *)v11 == a2 && v13 == v17)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
LABEL_29:
            swift_bridgeObjectRelease();
            return v7;
          }
          char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v18) {
            goto LABEL_29;
          }
        }
        else
        {

          swift_bridgeObjectRelease();
        }
        a2 = v21;
LABEL_6:
        ++v5;
      }
      while (v8 != v20);
    }
  }
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1004C7928@<X0>(uint64_t a1@<X8>)
{
  uint64_t v32 = a1;
  uint64_t v1 = sub_10000588C(&qword_101641B60);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v29 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for URLComponents();
  uint64_t v31 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v30 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for FMNAccountType();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C(&qword_101649E40);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for FMNAuthenticationProvider();
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for FMNAccountType.secureLocations(_:), v6);
  static FMNAuthenticationProvider.configurationURL(accountType:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    uint64_t v17 = &qword_101649E40;
    uint64_t v18 = (uint64_t)v12;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
    URLComponents.init(url:resolvingAgainstBaseURL:)();
    uint64_t v19 = v31;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v3, 1, v4) != 1)
    {
      uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v19 + 32);
      uint64_t v26 = v30;
      v25(v30, v3, v4);
      uint64_t v27 = (void (*)(unsigned char *, void))URLComponents.path.modify();
      v28._countAndFlagsBits = 0x6863746566;
      v28._object = (void *)0xE500000000000000;
      String.append(_:)(v28);
      v27(v33, 0);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v25)(v32, v26, v4);
    }
    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    uint64_t v17 = &qword_101641B60;
    uint64_t v18 = (uint64_t)v3;
  }
  sub_10001DAB4(v18, v17);
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  sub_100010324(v20, (uint64_t)qword_10170EC30);
  unint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v21, v22))
  {
    long long v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)long long v23 = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "No url found in account bag.", v23, 2u);
    swift_slowDealloc();
  }

  URLComponents.init()();
  URLComponents.scheme.setter();
  URLComponents.path.setter();
  return URLComponents.host.setter();
}

uint64_t sub_1004C7E24@<X0>(uint64_t a1@<X8>)
{
  uint64_t v48 = a1;
  uint64_t v1 = sub_10000588C(&qword_101641B60);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v45 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for URLComponents();
  uint64_t v49 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v47 = (char *)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  uint64_t v46 = (char *)&v45 - v7;
  uint64_t v8 = type metadata accessor for FMNAccountType();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000588C(&qword_101649E40);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for URL();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for FMNAuthenticationProvider();
  (*(void (**)(char *, void, uint64_t))(v9 + 104))(v11, enum case for FMNAccountType.ownedDeviceLocations(_:), v8);
  static FMNAuthenticationProvider.configurationURL(accountType:)();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
  {
    sub_10001DAB4((uint64_t)v14, &qword_101649E40);
    uint64_t v19 = v4;
    uint64_t v20 = v49;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v14, v15);
    URLComponents.init(url:resolvingAgainstBaseURL:)();
    uint64_t v20 = v49;
    uint64_t v19 = v4;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v3, 1, v4) != 1)
    {
      unint64_t v38 = *(void (**)(char *, char *, uint64_t))(v20 + 32);
      char v39 = v46;
      v38(v46, v3, v19);
      uint64_t v40 = (void (*)(uint64_t *, void))URLComponents.path.modify();
      v41._countAndFlagsBits = 0x68637465662F3276;
      v41._object = (void *)0xE800000000000000;
      String.append(_:)(v41);
      v40(v50, 0);
      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v38)(v48, v39, v19);
    }
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    sub_10001DAB4((uint64_t)v3, &qword_101641B60);
  }
  unint64_t v21 = v47;
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v22 = type metadata accessor for Logger();
  sub_100010324(v22, (uint64_t)qword_10170EC30);
  long long v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "No url found in account bag.", v25, 2u);
    swift_slowDealloc();
  }

  URLComponents.init()();
  URLComponents.scheme.setter();
  id v26 = [self standardUserDefaults];
  id v27 = [self sharedInstance];
  unsigned int v28 = [v27 isInternalBuild];

  if (v28
    && (NSString v29 = String._bridgeToObjectiveC()(),
        id v30 = [v26 stringForKey:v29],
        v29,
        v30))
  {
    uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v33 = v32;

    swift_bridgeObjectRetain_n();
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v34, v35))
    {
      unint64_t v36 = (uint8_t *)swift_slowAlloc();
      v50[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v36 = 136315138;
      swift_bridgeObjectRetain();
      v50[4] = sub_1008FA0F0(v31, (unint64_t)v33, v50);
      unint64_t v21 = v47;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Override url found in user defaults %s. ", v36, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v37 = v48;
    v50[0] = 47;
    v50[1] = 0xE100000000000000;
    v43._countAndFlagsBits = v31;
    v43._object = v33;
    String.append(_:)(v43);
    swift_bridgeObjectRelease();
    v44._countAndFlagsBits = 0x637465662F32762FLL;
    v44._object = (void *)0xE900000000000068;
    String.append(_:)(v44);
    URLComponents.path.setter();
  }
  else
  {

    URLComponents.path.setter();
    uint64_t v37 = v48;
  }
  URLComponents.host.setter();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v20 + 32))(v37, v21, v19);
}

uint64_t sub_1004C85D8(unsigned __int8 *a1, char *a2)
{
  return sub_10071A184(*a1, *a2);
}

Swift::Int sub_1004C85E4()
{
  return sub_10072C2EC();
}

uint64_t sub_1004C85EC()
{
  return sub_10071F244();
}

Swift::Int sub_1004C85F4()
{
  return sub_1007208FC();
}

unint64_t sub_1004C85FC@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1004C92B4(*a1);
  *a2 = result;
  return result;
}

void sub_1004C862C(uint64_t *a1@<X8>)
{
  unint64_t v2 = 0xEE007379654B6574;
  uint64_t v3 = 0x7562697274736964;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE400000000000000;
      uint64_t v3 = 1818322280;
      goto LABEL_3;
    case 2:
      *a1 = 0xD000000000000014;
      a1[1] = 0x80000001013EEA10;
      break;
    case 3:
      *a1 = 0xD000000000000015;
      a1[1] = 0x80000001013EEA30;
      break;
    default:
LABEL_3:
      *a1 = v3;
      a1[1] = v2;
      break;
  }
}

uint64_t sub_1004C86D8()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_1004C8738()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1004C8788(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_1016475C8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1004CB430();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  LOBYTE(v12) = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v2)
  {
    uint64_t v12 = *(void *)(v3 + 16);
    char v11 = 1;
    sub_10000588C((uint64_t *)&unk_10164DBD0);
    sub_1004CB484((unint64_t *)&qword_10163F7E0, (uint64_t *)&unk_10164DBD0, (void (*)(void))sub_100037BB4);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v12 = *(void *)(v3 + 24);
    char v11 = 2;
    type metadata accessor for SPSecureLocationSubscriptionMode(0);
    sub_1004CB4F0();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    sub_10001D608(v3 + 32, (uint64_t)&v13, &qword_1016475E0);
    sub_10001D608((uint64_t)&v13, (uint64_t)&v12, &qword_1016475E0);
    char v11 = 3;
    sub_1004CB548();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1004C89EC()
{
  uint64_t result = 1682533734;
  switch(*v0)
  {
    case 1:
      uint64_t result = 7562345;
      break;
    case 2:
      uint64_t result = 1701080941;
      break;
    case 3:
      uint64_t result = 0x746E65746E69;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1004C8A5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1004C9300(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1004C8A84(uint64_t a1)
{
  unint64_t v2 = sub_1004CB430();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004C8AC0(uint64_t a1)
{
  unint64_t v2 = sub_1004CB430();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1004C8AFC(void *a1)
{
  return sub_1004C8788(a1);
}

uint64_t sub_1004C8B38(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_101647560);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1004CAB4C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  *(void *)&v13[0] = *(void *)v3;
  char v15 = 0;
  sub_10000588C(&qword_101647570);
  sub_1004CB484(&qword_101647578, &qword_101647570, (void (*)(void))sub_1004CABA0);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    long long v9 = *(_OWORD *)(v3 + 88);
    uint64_t v13[4] = *(_OWORD *)(v3 + 72);
    v13[5] = v9;
    v13[6] = *(_OWORD *)(v3 + 104);
    uint64_t v14 = *(void *)(v3 + 120);
    long long v10 = *(_OWORD *)(v3 + 24);
    v13[0] = *(_OWORD *)(v3 + 8);
    v13[1] = v10;
    long long v11 = *(_OWORD *)(v3 + 56);
    v13[2] = *(_OWORD *)(v3 + 40);
    v13[3] = v11;
    char v15 = 1;
    sub_1004CABF4();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1004C8D38()
{
  if (*v0) {
    return 0x6F43746E65696C63;
  }
  else {
    return 0x6863746566;
  }
}

uint64_t sub_1004C8D7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1004CAC48(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1004C8DA4(uint64_t a1)
{
  unint64_t v2 = sub_1004CAB4C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004C8DE0(uint64_t a1)
{
  unint64_t v2 = sub_1004CAB4C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1004C8E1C(void *a1)
{
  return sub_1004C8B38(a1);
}

uint64_t sub_1004C8E68(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_1016475B8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v10 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1004CB324();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  uint64_t v12 = *v3;
  char v11 = 0;
  sub_10000588C(&qword_101641CA0);
  sub_1004CB484((unint64_t *)&qword_101641CA8, &qword_101641CA0, (void (*)(void))sub_100341314);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    LOBYTE(v12) = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    sub_10001D608((uint64_t)(v3 + 3), (uint64_t)v13, &qword_1016475C0);
    sub_10001D608((uint64_t)v13, (uint64_t)&v12, &qword_1016475C0);
    char v11 = 2;
    sub_10000588C(&qword_101654A30);
    sub_1004CB3CC((unint64_t *)&qword_10163CCD8);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    LOBYTE(v12) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1004C90E0()
{
  uint64_t result = 0x6E6F697461636F6CLL;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x6F43737574617473;
      break;
    case 2:
      uint64_t result = 0x6D4664656C696166;
      break;
    case 3:
      uint64_t result = 0x65566769666E6F63;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1004C9194@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1004CAD58(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1004C91BC(uint64_t a1)
{
  unint64_t v2 = sub_1004CB324();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004C91F8(uint64_t a1)
{
  unint64_t v2 = sub_1004CB324();

  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1004C9234@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_1004CAF80(a1, (uint64_t)&v6);
  if (!v2)
  {
    long long v5 = v7[0];
    *a2 = v6;
    a2[1] = v5;
    double result = *(double *)((char *)v7 + 9);
    *(_OWORD *)((char *)a2 + 25) = *(_OWORD *)((char *)v7 + 9);
  }
  return result;
}

uint64_t sub_1004C9278(void *a1)
{
  return sub_1004C8E68(a1);
}

unint64_t sub_1004C92B4(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1015A18A0, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 4) {
    return 4;
  }
  else {
    return v3;
  }
}

uint64_t sub_1004C9300(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1682533734 && a2 == 0xE400000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 7562345 && a2 == 0xE300000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1701080941 && a2 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x746E65746E69 && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_1004C9484(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 328) = a2;
  *(void *)(v3 + 336) = a3;
  *(void *)(v3 + 320) = a1;
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v3 + 344) = *(_OWORD *)a2;
  *(_OWORD *)(v3 + 360) = v4;
  *(void *)(v3 + 376) = *(void *)(a2 + 32);
  long long v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(v3 + 384) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v3 + 400) = v5;
  long long v6 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(v3 + 416) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(v3 + 432) = v6;
  *(unsigned char *)(v3 + 584) = *(unsigned char *)(a2 + 104);
  *(void *)(v3 + 448) = *(void *)(a2 + 112);
  uint64_t v7 = type metadata accessor for HashAlgorithm();
  *(void *)(v3 + 456) = v7;
  *(void *)(v3 + 464) = *(void *)(v7 - 8);
  *(void *)(v3 + 472) = swift_task_alloc();
  return _swift_task_switch(sub_1004C958C, 0, 0);
}

id sub_1004C958C()
{
  if (*(void *)(*(void *)(v0 + 320) + 16))
  {
    uint64_t v1 = (unint64_t *)(v0 + 272);
    unint64_t v2 = sub_10092D8F8((uint64_t)_swiftEmptyArrayStorage);
    *(void *)(v0 + 272) = v2;
    id result = [self currentDevice];
    if (result)
    {
      long long v4 = result;
      id v5 = [result serverFriendlyDescription];

      if (v5)
      {
        uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v8 = v7;

        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        unint64_t *v1 = 0x8000000000000000;
        sub_10016C0FC(v6, v8, 0xD000000000000011, 0x80000001013F64E0, isUniquelyReferenced_nonNull_native);
        swift_bridgeObjectRelease();
      }
      else
      {
        sub_100163690(0xD000000000000011, 0x80000001013F64E0);
        swift_bridgeObjectRelease();
        unint64_t v2 = *v1;
      }
      uint64_t v32 = *(void *)(v0 + 448);
      char v31 = *(unsigned char *)(v0 + 584);
      uint64_t v29 = *(void *)(v0 + 432);
      uint64_t v30 = *(void *)(v0 + 440);
      uint64_t v12 = *(void *)(v0 + 368);
      uint64_t v13 = *(void *)(v0 + 376);
      uint64_t v15 = *(void *)(v0 + 352);
      uint64_t v14 = *(void *)(v0 + 360);
      uint64_t v16 = *(void *)(v0 + 344);
      uint64_t v17 = *(void *)(v0 + 320);
      long long v27 = *(_OWORD *)(v0 + 400);
      long long v28 = *(_OWORD *)(v0 + 416);
      long long v26 = *(_OWORD *)(v0 + 384);
      char v18 = swift_isUniquelyReferenced_nonNull_native();
      sub_10016C0FC(49, 0xE100000000000000, 0x562D747065636341, 0xEE006E6F69737265, v18);
      swift_bridgeObjectRelease();
      char v19 = swift_isUniquelyReferenced_nonNull_native();
      sub_10016C0FC(0xD000000000000010, 0x80000001013F87B0, 0x2D746E65746E6F43, 0xEC00000065707954, v19);
      *(void *)(v0 + 272) = v2;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 16) = v17;
      *(void *)(v0 + 24) = v16;
      *(void *)(v0 + 32) = v15;
      *(void *)(v0 + 40) = v14;
      *(void *)(v0 + 48) = v12;
      *(void *)(v0 + 56) = v13;
      *(_OWORD *)(v0 + 64) = v26;
      *(_OWORD *)(v0 + 80) = v27;
      *(_OWORD *)(v0 + 96) = v28;
      *(void *)(v0 + 112) = v29;
      *(void *)(v0 + 120) = v30;
      *(unsigned char *)(v0 + 128) = v31;
      *(void *)(v0 + 136) = v32;
      type metadata accessor for JSONEncoder();
      swift_allocObject();
      *(void *)(v0 + 480) = JSONEncoder.init()();
      long long v20 = *(_OWORD *)(v0 + 96);
      *(_OWORD *)(v0 + 208) = *(_OWORD *)(v0 + 80);
      *(_OWORD *)(v0 + 224) = v20;
      long long v21 = *(_OWORD *)(v0 + 128);
      *(_OWORD *)(v0 + 240) = *(_OWORD *)(v0 + 112);
      *(_OWORD *)(v0 + 256) = v21;
      long long v22 = *(_OWORD *)(v0 + 32);
      *(_OWORD *)(v0 + 144) = *(_OWORD *)(v0 + 16);
      *(_OWORD *)(v0 + 160) = v22;
      long long v23 = *(_OWORD *)(v0 + 64);
      *(_OWORD *)(v0 + 176) = *(_OWORD *)(v0 + 48);
      *(_OWORD *)(v0 + 192) = v23;
      sub_1004CA140();
      *(void *)(v0 + 488) = dispatch thunk of JSONEncoder.encode<A>(_:)();
      *(void *)(v0 + 496) = v24;
      sub_1004CA194(v0 + 16);
      uint64_t v33 = (uint64_t (__cdecl *)())((char *)&dword_10165ABC0 + dword_10165ABC0);
      uint64_t v25 = (void *)swift_task_alloc();
      *(void *)(v0 + 504) = v25;
      *uint64_t v25 = v0;
      v25[1] = sub_1004C99D0;
      return (id)v33();
    }
    else
    {
      __break(1u);
    }
  }
  else
  {
    uint64_t v10 = *(void *)(v0 + 328);
    swift_release();
    sub_1004CA21C(v10);
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    char v11 = *(uint64_t (**)(void, void, void))(v0 + 8);
    return (id)v11(0, 0, 0);
  }
  return result;
}

uint64_t sub_1004C99D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 512) = a1;
  *(void *)(v3 + 520) = a2;
  swift_task_dealloc();
  return _swift_task_switch(sub_1004C9AD4, 0, 0);
}

uint64_t sub_1004C9AD4()
{
  unint64_t v1 = v0[65];
  uint64_t v2 = v0[64];
  uint64_t v4 = v0[61];
  unint64_t v3 = v0[62];
  uint64_t v6 = v0[58];
  uint64_t v5 = v0[59];
  uint64_t v7 = v0[57];
  v0[37] = v2;
  v0[38] = v1;
  sub_1000361E0(v2, v1);
  sub_1000361E0(v4, v3);
  sub_100A42CBC(v4, v3);
  sub_10001CFB8(v4, v3);
  sub_10001CFB8(v2, v1);
  uint64_t v8 = v0[38];
  v0[66] = v0[37];
  v0[67] = v8;
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v5, enum case for HashAlgorithm.sha256(_:), v7);
  uint64_t v9 = Data.hash(algorithm:)();
  uint64_t v11 = v10;
  v0[68] = v9;
  v0[69] = v10;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_10165ABB8 + dword_10165ABB8);
  uint64_t v12 = (void *)swift_task_alloc();
  v0[70] = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_1004C9C60;
  uint64_t v13 = v0[42];
  return v15(v9, v11, v13);
}

uint64_t sub_1004C9C60(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  *(void *)(*(void *)v2 + 568) = v1;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = sub_1004C9ED0;
  }
  else
  {
    unint64_t v6 = v4[69];
    uint64_t v7 = v4[68];
    v4[72] = a1;
    sub_10001CFB8(v7, v6);
    uint64_t v5 = sub_1004C9D90;
  }
  return _swift_task_switch(v5, 0, 0);
}

uint64_t sub_1004C9D90()
{
  uint64_t v13 = v0;
  uint64_t v1 = v0[72];
  uint64_t v2 = v0[71];
  uint64_t v3 = v0[34];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v12 = v3;
  v0[34] = 0x8000000000000000;
  sub_1001EE9C8(v1, (uint64_t)sub_100BD6E00, 0, isUniquelyReferenced_nonNull_native, &v12);
  if (v2)
  {
    return swift_bridgeObjectRelease();
  }
  else
  {
    unint64_t v6 = v0[67];
    uint64_t v7 = v0[66];
    v0[34] = v12;
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    sub_10001CFB8(v7, v6);
    uint64_t v8 = v0[34];
    uint64_t v10 = v0[61];
    uint64_t v9 = v0[62];
    swift_task_dealloc();
    uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[1];
    return v11(v8, v10, v9);
  }
}

uint64_t sub_1004C9ED0()
{
  unint64_t v1 = v0[67];
  uint64_t v2 = v0[66];
  sub_10001CFB8(v0[68], v0[69]);
  sub_10001CFB8(v2, v1);
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_100010324(v3, (uint64_t)qword_10170EC30);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    unint64_t v6 = (uint8_t *)swift_slowAlloc();
    uint64_t v7 = (void *)swift_slowAlloc();
    *(_DWORD *)unint64_t v6 = 138543362;
    swift_errorRetain();
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError();
    v0[39] = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v7 = v8;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to generate fetch attestation header: %{public}@.", v6, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
    swift_release();
    swift_release();

    swift_errorRelease();
  }
  else
  {
    swift_release();
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
    swift_release();
  }
  uint64_t v9 = v0[34];
  uint64_t v11 = v0[61];
  uint64_t v10 = v0[62];
  swift_task_dealloc();
  uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[1];
  return v12(v9, v11, v10);
}

unint64_t sub_1004CA140()
{
  unint64_t result = qword_101647438;
  if (!qword_101647438)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647438);
  }
  return result;
}

uint64_t sub_1004CA194(uint64_t a1)
{
  return a1;
}

uint64_t sub_1004CA21C(uint64_t a1)
{
  return a1;
}

uint64_t destroy for SecureLocationsFetchResponseBody()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SecureLocationsFetchResponseBody(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SecureLocationsFetchResponseBody(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = v4;
  return a1;
}

__n128 initializeWithTake for AnalyticsEvent.DiscreteType(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for SecureLocationsFetchResponseBody(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for SecureLocationsFetchResponseBody(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 41)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SecureLocationsFetchResponseBody(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 41) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsFetchResponseBody()
{
  return &type metadata for SecureLocationsFetchResponseBody;
}

uint64_t destroy for SecureLocationsFetchBody()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SecureLocationsFetchBody(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v6;
  uint64_t v7 = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = v7;
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  uint64_t v8 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v8;
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SecureLocationsFetchBody(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = v4;
  LOBYTE(v4) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = v4;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 104) = v5;
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for SecureLocationsFetchBody(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

uint64_t assignWithTake for SecureLocationsFetchBody(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(unsigned char *)(a1 + 112) = *(unsigned char *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SecureLocationsFetchBody(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 128)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SecureLocationsFetchBody(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 128) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 128) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsFetchBody()
{
  return &type metadata for SecureLocationsFetchBody;
}

ValueMetadata *type metadata accessor for SecureLocationsFetchRequest()
{
  return &type metadata for SecureLocationsFetchRequest;
}

uint64_t initializeWithCopy for SecureLocationsFetchData(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SecureLocationsFetchData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

__n128 initializeWithTake for AccessoryNonOwnerCommand(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for SecureLocationsFetchData(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for SecureLocationsFetchData(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 33)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SecureLocationsFetchData(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 33) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsFetchData()
{
  return &type metadata for SecureLocationsFetchData;
}

uint64_t sub_1004CAAAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1004CAAC0);
}

uint64_t sub_1004CAAC4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1004CAAD8);
}

uint64_t type metadata accessor for SecureLocationsFetchEndpoint(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_101647498);
}

uint64_t sub_1004CAAFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1004CAB10);
}

uint64_t sub_1004CAB14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1004CAB28);
}

uint64_t type metadata accessor for OwnedDeviceFetchEndpoint(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_101647528);
}

unint64_t sub_1004CAB4C()
{
  unint64_t result = qword_101647568;
  if (!qword_101647568)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647568);
  }
  return result;
}

unint64_t sub_1004CABA0()
{
  unint64_t result = qword_101647580;
  if (!qword_101647580)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647580);
  }
  return result;
}

unint64_t sub_1004CABF4()
{
  unint64_t result = qword_101647588;
  if (!qword_101647588)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647588);
  }
  return result;
}

uint64_t sub_1004CAC48(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6863746566 && a2 == 0xE500000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F43746E65696C63 && a2 == 0xED0000747865746ELL)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1004CAD58(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E6F697461636F6CLL && a2 == 0xEF64616F6C796150;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6F43737574617473 && a2 == 0xEA00000000006564 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6D4664656C696166 && a2 == 0xEB00000000736449 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x65566769666E6F63 && a2 == 0xED00006E6F697372)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_1004CAF80@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10000588C(&qword_101647590);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1004CB324();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  sub_10000588C(&qword_101641CA0);
  char v24 = 0;
  sub_1004CB484((unint64_t *)&qword_1016475A0, &qword_101641CA0, (void (*)(void))sub_1004CB378);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v9 = v25;
  LOBYTE(v25) = 1;
  swift_bridgeObjectRetain();
  uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v12 = v11;
  uint64_t v23 = v10;
  sub_10000588C(&qword_101654A30);
  char v24 = 2;
  sub_1004CB3CC((unint64_t *)&qword_1016475B0);
  swift_bridgeObjectRetain();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v13 = v25;
  LOBYTE(v25) = 3;
  uint64_t v22 = v13;
  swift_bridgeObjectRetain();
  uint64_t v14 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  uint64_t v15 = v8;
  char v17 = v16;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v15, v5);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  uint64_t v18 = v22;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v20 = v23;
  *(void *)a2 = v9;
  *(void *)(a2 + 8) = v20;
  *(void *)(a2 + 16) = v12;
  *(void *)(a2 + 24) = v18;
  *(void *)(a2 + 32) = v14;
  *(unsigned char *)(a2 + 40) = v17 & 1;
  return result;
}

unint64_t sub_1004CB324()
{
  unint64_t result = qword_101647598;
  if (!qword_101647598)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647598);
  }
  return result;
}

unint64_t sub_1004CB378()
{
  unint64_t result = qword_1016475A8;
  if (!qword_1016475A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016475A8);
  }
  return result;
}

uint64_t sub_1004CB3CC(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000592C(&qword_101654A30);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1004CB430()
{
  unint64_t result = qword_1016475D0;
  if (!qword_1016475D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016475D0);
  }
  return result;
}

uint64_t sub_1004CB484(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000592C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1004CB4F0()
{
  unint64_t result = qword_1016475D8;
  if (!qword_1016475D8)
  {
    type metadata accessor for SPSecureLocationSubscriptionMode(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016475D8);
  }
  return result;
}

unint64_t sub_1004CB548()
{
  unint64_t result = qword_1016475E8;
  if (!qword_1016475E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016475E8);
  }
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsFetchData.CodingKeys()
{
  return &type metadata for SecureLocationsFetchData.CodingKeys;
}

ValueMetadata *type metadata accessor for SecureLocationsFetchResponseBody.CodingKeys()
{
  return &type metadata for SecureLocationsFetchResponseBody.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for SecureLocationsFetchBody.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1004CB68CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsFetchBody.CodingKeys()
{
  return &type metadata for SecureLocationsFetchBody.CodingKeys;
}

unsigned char *_s12searchpartyd33SecureLocationsSubscriptionIntentOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1004CB790);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsSubscriptionIntent()
{
  return &type metadata for SecureLocationsSubscriptionIntent;
}

unint64_t sub_1004CB7CC()
{
  unint64_t result = qword_1016475F0;
  if (!qword_1016475F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016475F0);
  }
  return result;
}

unint64_t sub_1004CB824()
{
  unint64_t result = qword_1016475F8;
  if (!qword_1016475F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016475F8);
  }
  return result;
}

unint64_t sub_1004CB87C()
{
  unint64_t result = qword_101647600;
  if (!qword_101647600)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647600);
  }
  return result;
}

unint64_t sub_1004CB8D4()
{
  unint64_t result = qword_101647608;
  if (!qword_101647608)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647608);
  }
  return result;
}

unint64_t sub_1004CB92C()
{
  unint64_t result = qword_101647610;
  if (!qword_101647610)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647610);
  }
  return result;
}

unint64_t sub_1004CB984()
{
  unint64_t result = qword_101647618;
  if (!qword_101647618)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647618);
  }
  return result;
}

unint64_t sub_1004CB9DC()
{
  unint64_t result = qword_101647620;
  if (!qword_101647620)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647620);
  }
  return result;
}

unint64_t sub_1004CBA34()
{
  unint64_t result = qword_101647628;
  if (!qword_101647628)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647628);
  }
  return result;
}

unint64_t sub_1004CBA8C()
{
  unint64_t result = qword_101647630;
  if (!qword_101647630)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647630);
  }
  return result;
}

unint64_t sub_1004CBAE4()
{
  unint64_t result = qword_101647638;
  if (!qword_101647638)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647638);
  }
  return result;
}

unint64_t sub_1004CBB38()
{
  unint64_t result = qword_101647640;
  if (!qword_101647640)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647640);
  }
  return result;
}

unint64_t sub_1004CBB8C(unint64_t a1, uint64_t a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v21 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v7 = *(void *)a2;
    unint64_t v8 = *(void *)(a2 + 8);
    sub_1000361E0(*(void *)a2, v8);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    uint64_t v9 = a3[6];
    uint64_t v10 = a1 + v9;
    uint64_t v11 = a2 + v9;
    uint64_t v12 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    uint64_t v13 = a3[7];
    uint64_t v14 = a1 + v13;
    uint64_t v15 = a2 + v13;
    uint64_t v16 = type metadata accessor for MACAddress();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(v14, v15, v16);
    uint64_t v17 = a3[9];
    *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
    uint64_t v18 = (void *)(a1 + v17);
    char v19 = (void *)(a2 + v17);
    uint64_t v20 = v19[1];
    *uint64_t v18 = *v19;
    v18[1] = v20;
    *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t sub_1004CBD00(uint64_t a1, uint64_t a2)
{
  sub_10001CFB8(*(void *)a1, *(void *)(a1 + 8));
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v4, v5);
  uint64_t v6 = a1 + *(int *)(a2 + 28);
  uint64_t v7 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1004CBDE0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  sub_1000361E0(*(void *)a2, v7);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 16))(v9, v10, v11);
  uint64_t v12 = a3[7];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v13, v14, v15);
  uint64_t v16 = a3[9];
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (void *)(a2 + v16);
  uint64_t v19 = v18[1];
  *uint64_t v17 = *v18;
  v17[1] = v19;
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1004CBF04(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  sub_1000361E0(*(void *)a2, v7);
  uint64_t v8 = *(void *)a1;
  unint64_t v9 = *(void *)(a1 + 8);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  sub_10001CFB8(v8, v9);
  uint64_t v10 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v10;
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 24))(v12, v13, v14);
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 24))(v16, v17, v18);
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  uint64_t v19 = a3[9];
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (void *)(a2 + v19);
  *uint64_t v20 = *v21;
  v20[1] = v21[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1004CC050(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v6 = a3[6];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v7, v8, v9);
  uint64_t v10 = a3[7];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  uint64_t v14 = a3[9];
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  *(_OWORD *)(a1 + v14) = *(_OWORD *)(a2 + v14);
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  return a1;
}

uint64_t sub_1004CC154(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001CFB8(v6, v7);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40))(v9, v10, v11);
  uint64_t v12 = a3[7];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 40))(v13, v14, v15);
  uint64_t v16 = a3[9];
  *(unsigned char *)(a1 + a3[8]) = *(unsigned char *)(a2 + a3[8]);
  uint64_t v17 = (void *)(a1 + v16);
  uint64_t v18 = (uint64_t *)(a2 + v16);
  uint64_t v20 = *v18;
  uint64_t v19 = v18[1];
  *uint64_t v17 = v20;
  v17[1] = v19;
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1004CC27C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1004CC290);
}

uint64_t sub_1004CC290(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID();
  if (*(_DWORD *)(*(void *)(v6 - 8) + 84) == a2)
  {
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 - 8);
    uint64_t v9 = a3[6];
LABEL_5:
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
    return v11(a1 + v9, a2, v7);
  }
  uint64_t v10 = type metadata accessor for MACAddress();
  if (*(_DWORD *)(*(void *)(v10 - 8) + 84) == a2)
  {
    uint64_t v7 = v10;
    uint64_t v8 = *(void *)(v10 - 8);
    uint64_t v9 = a3[7];
    goto LABEL_5;
  }
  unint64_t v13 = *(void *)(a1 + a3[9] + 8);
  if (v13 >= 0xFFFFFFFF) {
    LODWORD(v13) = -1;
  }
  return (v13 + 1);
}

uint64_t sub_1004CC3A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1004CC3B8);
}

uint64_t sub_1004CC3B8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for UUID();
  if (*(_DWORD *)(*(void *)(v8 - 8) + 84) == a3)
  {
    uint64_t v9 = v8;
    uint64_t v10 = *(void *)(v8 - 8);
    uint64_t v11 = a4[6];
  }
  else
  {
    uint64_t result = type metadata accessor for MACAddress();
    if (*(_DWORD *)(*(void *)(result - 8) + 84) != a3)
    {
      *(void *)(a1 + a4[9] + 8) = (a2 - 1);
      return result;
    }
    uint64_t v9 = result;
    uint64_t v10 = *(void *)(result - 8);
    uint64_t v11 = a4[7];
  }
  unint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);

  return v13(a1 + v11, a2, a2, v9);
}

uint64_t type metadata accessor for OwnedBeaconGroup(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_1016476A8);
}

uint64_t sub_1004CC4E8()
{
  uint64_t result = type metadata accessor for UUID();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for MACAddress();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OwnedBeaconGroup.SerialNumber()
{
  return &type metadata for OwnedBeaconGroup.SerialNumber;
}

uint64_t sub_1004CC5F4(uint64_t a1)
{
  uint64_t v78 = a1;
  uint64_t v2 = type metadata accessor for MACAddress();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v66 = (char *)&v62 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = sub_10000588C(&qword_1016477F8);
  __chkstk_darwin(v77);
  uint64_t v6 = (char *)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v79 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  uint64_t v70 = *(void *)(v79 - 8);
  __chkstk_darwin(v79);
  uint64_t v8 = (char *)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C((uint64_t *)&unk_1016477E0);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v69 = (uint64_t)&v62 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v83 = (uint64_t)&v62 - v13;
  __chkstk_darwin(v12);
  uint64_t v82 = (uint64_t)&v62 - v14;
  uint64_t v15 = sub_10000588C((uint64_t *)&unk_10165F410);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  uint64_t v18 = (int64_t *)((char *)&v62 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v62 - v19;
  uint64_t v21 = *(void *)(v1 + *(int *)(type metadata accessor for OwnedBeaconGroup(0) + 40));
  uint64_t v22 = *(void *)(v21 + 64);
  uint64_t v63 = v21 + 64;
  uint64_t v23 = 1 << *(unsigned char *)(v21 + 32);
  uint64_t v24 = -1;
  if (v23 < 64) {
    uint64_t v24 = ~(-1 << v23);
  }
  unint64_t v25 = v24 & v22;
  char v74 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56);
  unint64_t v75 = (void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  long long v73 = (unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48);
  uint64_t v64 = (void (**)(char *, uint64_t, uint64_t))(v3 + 32);
  int64_t v67 = (unint64_t)(v23 + 63) >> 6;
  uint64_t v68 = (void (**)(uint64_t, uint64_t))(v3 + 8);
  int64_t v62 = v67 - 1;
  uint64_t v71 = v21;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v81 = 0;
  uint64_t v76 = v18;
  uint64_t v72 = v8;
  uint64_t v65 = v6;
  while (v25)
  {
    unint64_t v28 = __clz(__rbit64(v25));
    v25 &= v25 - 1;
    unint64_t v29 = v28 | (v81 << 6);
LABEL_8:
    uint64_t v30 = *(void *)(v71 + 56);
    char v31 = (uint64_t *)(*(void *)(v71 + 48) + 16 * v29);
    uint64_t v32 = *v31;
    unint64_t v33 = v31[1];
    *uint64_t v18 = *v31;
    v18[1] = v33;
    uint64_t v34 = v30 + *(void *)(v70 + 72) * v29;
    uint64_t v35 = sub_10000588C((uint64_t *)&unk_1016477D0);
    sub_1004DB958(v34, (uint64_t)v18 + *(int *)(v35 + 48), type metadata accessor for OwnedBeaconGroup.PairingState);
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v18, 0, 1, v35);
    sub_1000361E0(v32, v33);
    uint64_t v37 = v82;
    uint64_t v36 = v83;
LABEL_27:
    sub_10001D608((uint64_t)v18, (uint64_t)v20, (uint64_t *)&unk_10165F410);
    uint64_t v42 = sub_10000588C((uint64_t *)&unk_1016477D0);
    int v43 = 1;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v42 - 8) + 48))(v20, 1, v42) == 1) {
      goto LABEL_37;
    }
    sub_10001CFB8(*(void *)v20, *((void *)v20 + 1));
    sub_1004DBB74((uint64_t)&v20[*(int *)(v42 + 48)], (uint64_t)v8, type metadata accessor for OwnedBeaconGroup.PairingState);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload != 1)
      {
LABEL_37:
        int v80 = 0;
LABEL_39:
        swift_release();
        return v80 | (v43 << 8);
      }
      uint64_t v45 = (int *)sub_10000588C(&qword_101643D80);
      uint64_t v46 = (uint64_t)&v8[v45[12]];
      sub_100037A24(*(void *)&v8[v45[16]], *(void *)&v8[v45[16] + 8]);
      uint64_t v47 = v45[24];
      uint64_t v36 = v83;
      uint64_t v48 = &v8[v47];
      int v80 = *v48;
      int v43 = v48[1];
      sub_10001D608(v46, v37, (uint64_t *)&unk_1016477E0);
      uint64_t v49 = type metadata accessor for UUID();
      (*(void (**)(char *, uint64_t))(*(void *)(v49 - 8) + 8))(v8, v49);
    }
    else
    {
      uint64_t v50 = &v8[*(int *)(sub_10000588C((uint64_t *)&unk_101647810) + 48)];
      int v80 = *v50;
      int v43 = v50[1];
      sub_10001D608((uint64_t)v8, v37, (uint64_t *)&unk_1016477E0);
    }
    (*v75)(v36, v78, v2);
    (*v74)(v36, 0, 1, v2);
    uint64_t v51 = (uint64_t)&v6[*(int *)(v77 + 48)];
    sub_100036178(v37, (uint64_t)v6);
    sub_100036178(v36, v51);
    uint64_t v52 = v37;
    uint64_t v53 = v36;
    uint64_t v54 = *v73;
    if ((*v73)(v6, 1, v2) == 1)
    {
      sub_10001DAB4(v53, (uint64_t *)&unk_1016477E0);
      sub_10001DAB4(v52, (uint64_t *)&unk_1016477E0);
      unsigned int v27 = v54((char *)v51, 1, v2);
      uint64_t v18 = v76;
      if (v27 == 1)
      {
        sub_10001DAB4((uint64_t)v6, (uint64_t *)&unk_1016477E0);
        goto LABEL_39;
      }
LABEL_5:
      uint64_t result = sub_10001DAB4((uint64_t)v6, &qword_1016477F8);
      uint64_t v8 = v72;
    }
    else
    {
      uint64_t v55 = v69;
      sub_100036178((uint64_t)v6, v69);
      unsigned int v56 = v54((char *)v51, 1, v2);
      uint64_t v18 = v76;
      if (v56 == 1)
      {
        sub_10001DAB4(v83, (uint64_t *)&unk_1016477E0);
        sub_10001DAB4(v82, (uint64_t *)&unk_1016477E0);
        (*v68)(v55, v2);
        goto LABEL_5;
      }
      uint64_t v57 = v55;
      uint64_t v58 = v66;
      (*v64)(v66, v51, v2);
      sub_1004DB140((unint64_t *)&unk_10166C270, (void (*)(uint64_t))&type metadata accessor for MACAddress);
      char v59 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v60 = *v68;
      (*v68)((uint64_t)v58, v2);
      sub_10001DAB4(v83, (uint64_t *)&unk_1016477E0);
      sub_10001DAB4(v82, (uint64_t *)&unk_1016477E0);
      uint64_t v61 = v57;
      uint64_t v6 = v65;
      v60(v61, v2);
      uint64_t result = sub_10001DAB4((uint64_t)v6, (uint64_t *)&unk_1016477E0);
      uint64_t v8 = v72;
      if (v59) {
        goto LABEL_39;
      }
    }
  }
  int64_t v38 = v81 + 1;
  if (__OFADD__(v81, 1))
  {
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v37 = v82;
  uint64_t v36 = v83;
  if (v38 >= v67)
  {
LABEL_26:
    uint64_t v41 = sub_10000588C((uint64_t *)&unk_1016477D0);
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v18, 1, 1, v41);
    unint64_t v25 = 0;
    goto LABEL_27;
  }
  unint64_t v39 = *(void *)(v63 + 8 * v38);
  if (v39)
  {
LABEL_12:
    unint64_t v25 = (v39 - 1) & v39;
    unint64_t v29 = __clz(__rbit64(v39)) + (v38 << 6);
    int64_t v81 = v38;
    goto LABEL_8;
  }
  int64_t v40 = v81 + 2;
  ++v81;
  if (v38 + 1 >= v67) {
    goto LABEL_26;
  }
  unint64_t v39 = *(void *)(v63 + 8 * v40);
  if (v39) {
    goto LABEL_15;
  }
  int64_t v81 = v38 + 1;
  if (v38 + 2 >= v67) {
    goto LABEL_26;
  }
  unint64_t v39 = *(void *)(v63 + 8 * (v38 + 2));
  if (v39)
  {
    v38 += 2;
    goto LABEL_12;
  }
  int64_t v40 = v38 + 3;
  int64_t v81 = v38 + 2;
  if (v38 + 3 >= v67) {
    goto LABEL_26;
  }
  unint64_t v39 = *(void *)(v63 + 8 * v40);
  if (v39)
  {
LABEL_15:
    int64_t v38 = v40;
    goto LABEL_12;
  }
  while (1)
  {
    int64_t v38 = v40 + 1;
    if (__OFADD__(v40, 1)) {
      break;
    }
    if (v38 >= v67)
    {
      int64_t v81 = v62;
      goto LABEL_26;
    }
    unint64_t v39 = *(void *)(v63 + 8 * v38);
    ++v40;
    if (v39) {
      goto LABEL_12;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1004CCF10()
{
  type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v0 = swift_bridgeObjectRetain();
  uint64_t v1 = sub_10036D3E8(v0);
  swift_bridgeObjectRelease();
  return v1;
}

void sub_1004CCF70(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v256 = a1;
  uint64_t v241 = type metadata accessor for UUID();
  uint64_t v258 = *(void *)(v241 - 8);
  uint64_t v3 = __chkstk_darwin(v241);
  uint64_t v230 = (char *)&v209 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v3);
  id v229 = (char *)&v209 - v6;
  __chkstk_darwin(v5);
  v250 = (char *)&v209 - v7;
  uint64_t v8 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v8 - 8);
  uint64_t v244 = (char *)&v209 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for MACAddress();
  uint64_t v253 = *(void *)(v10 - 8);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v228 = (char *)&v209 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v227 = (char *)&v209 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v209 - v16;
  __chkstk_darwin(v15);
  v248 = (char *)&v209 - v18;
  uint64_t v19 = sub_10000588C((uint64_t *)&unk_1016477E0);
  uint64_t v20 = __chkstk_darwin(v19 - 8);
  uint64_t v239 = (uint64_t)&v209 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v246 = (uint64_t)&v209 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v238 = (uint64_t)&v209 - v25;
  __chkstk_darwin(v24);
  uint64_t v245 = (uint64_t)&v209 - v26;
  uint64_t v27 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  uint64_t v252 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v257 = (uint64_t)&v209 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = sub_10000588C((uint64_t *)&unk_10165F410);
  uint64_t v30 = __chkstk_darwin(v29 - 8);
  v255 = (uint64_t *)((char *)&v209 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v30);
  v260 = (uint64_t *)((char *)&v209 - v32);
  uint64_t v240 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v33 = __chkstk_darwin(v240);
  uint64_t v224 = (uint64_t)&v209 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = __chkstk_darwin(v33);
  uint64_t v233 = (uint64_t)&v209 - v36;
  uint64_t v37 = __chkstk_darwin(v35);
  uint64_t v223 = (uint64_t)&v209 - v38;
  uint64_t v39 = __chkstk_darwin(v37);
  uint64_t v222 = (uint64_t)&v209 - v40;
  uint64_t v41 = __chkstk_darwin(v39);
  uint64_t v259 = (uint64_t)&v209 - v42;
  uint64_t v43 = __chkstk_darwin(v41);
  v247 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))((char *)&v209 - v44);
  uint64_t v45 = __chkstk_darwin(v43);
  uint64_t v47 = (uint64_t *)((char *)&v209 - v46);
  uint64_t v48 = __chkstk_darwin(v45);
  uint64_t v50 = (void (**)(char *, uint64_t, uint64_t))((char *)&v209 - v49);
  uint64_t v51 = __chkstk_darwin(v48);
  uint64_t v53 = (void (**)(char *, uint64_t, uint64_t))((char *)&v209 - v52);
  uint64_t v54 = __chkstk_darwin(v51);
  unsigned int v56 = (char *)&v209 - v55;
  __chkstk_darwin(v54);
  uint64_t v58 = (char *)&v209 - v57;
  sub_1004DB958(v2, (uint64_t)&v209 - v57, type metadata accessor for OwnedBeaconGroup);
  sub_1004DB958(v2, (uint64_t)v56, type metadata accessor for OwnedBeaconGroup);
  v237 = v53;
  sub_1004DB958(v2, (uint64_t)v53, type metadata accessor for OwnedBeaconGroup);
  uint64_t v236 = v50;
  sub_1004DB958(v2, (uint64_t)v50, type metadata accessor for OwnedBeaconGroup);
  uint64_t v243 = v47;
  sub_1004DB958(v2, (uint64_t)v47, type metadata accessor for OwnedBeaconGroup);
  char v59 = Logger.logObject.getter();
  os_log_type_t v60 = static os_log_type_t.default.getter();
  v242 = v59;
  LODWORD(v235) = v60;
  BOOL v61 = os_log_type_enabled(v59, v60);
  uint64_t v251 = v2;
  uint64_t v249 = v10;
  uint64_t v226 = v17;
  uint64_t v254 = v27;
  if (v61)
  {
    uint64_t v62 = swift_slowAlloc();
    uint64_t v63 = swift_slowAlloc();
    uint64_t v234 = (void (**)(char *, char *, uint64_t))v63;
    *(_DWORD *)uint64_t v62 = 141559811;
    uint64_t v261 = 1752392040;
    uint64_t v262 = v63;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v62 + 12) = 2081;
    uint64_t v64 = v240;
    sub_1004DB140((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v65 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v261 = sub_1008FA0F0(v65, v66, &v262);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1004DB9C0((uint64_t)v58, type metadata accessor for OwnedBeaconGroup);
    *(_WORD *)(v62 + 22) = 2160;
    uint64_t v261 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v62 + 32) = 2081;
    sub_1004DB140((unint64_t *)&qword_101649EE0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
    uint64_t v67 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v261 = sub_1008FA0F0(v67, v68, &v262);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1004DB9C0((uint64_t)v56, type metadata accessor for OwnedBeaconGroup);
    *(_WORD *)(v62 + 42) = 2080;
    uint64_t v69 = v237;
    sub_100061B8C();
    swift_bridgeObjectRetain();
    uint64_t v70 = Dictionary.description.getter();
    unint64_t v72 = v71;
    swift_bridgeObjectRelease();
    uint64_t v261 = sub_1008FA0F0(v70, v72, &v262);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1004DB9C0((uint64_t)v69, type metadata accessor for OwnedBeaconGroup);
    *(_WORD *)(v62 + 52) = 1024;
    int v73 = *((unsigned __int8 *)v236 + *(int *)(v64 + 32));
    sub_1004DB9C0((uint64_t)v236, type metadata accessor for OwnedBeaconGroup);
    LODWORD(v261) = v73;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v62 + 58) = 2160;
    uint64_t v74 = v251;
    uint64_t v261 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v62 + 68) = 2081;
    uint64_t v75 = (uint64_t)v243;
    uint64_t v76 = MACAddress.udid.getter();
    uint64_t v261 = sub_1008FA0F0(v76, v77, &v262);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1004DB9C0(v75, type metadata accessor for OwnedBeaconGroup);
    uint64_t v78 = v242;
    _os_log_impl((void *)&_mh_execute_header, v242, (os_log_type_t)v235, "<id:%{private,mask.hash}s mac:%{private,mask.hash}s beaconMap:%s fmns:%{BOOL}d udid: %{private,mask.hash}s>", (uint8_t *)v62, 0x4Eu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v79 = v64;
  }
  else
  {
    sub_1004DB9C0((uint64_t)v236, type metadata accessor for OwnedBeaconGroup);

    sub_1004DB9C0((uint64_t)v58, type metadata accessor for OwnedBeaconGroup);
    sub_1004DB9C0((uint64_t)v56, type metadata accessor for OwnedBeaconGroup);
    sub_1004DB9C0((uint64_t)v237, type metadata accessor for OwnedBeaconGroup);
    sub_1004DB9C0((uint64_t)v243, type metadata accessor for OwnedBeaconGroup);
    uint64_t v79 = v240;
    uint64_t v74 = v2;
  }
  int v80 = v247;
  uint64_t v81 = v259;
  sub_1004DB958(v74, (uint64_t)v247, type metadata accessor for OwnedBeaconGroup);
  sub_1004DB958(v74, v81, type metadata accessor for OwnedBeaconGroup);
  uint64_t v82 = Logger.logObject.getter();
  os_log_type_t v83 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v82, v83))
  {
    uint64_t v84 = swift_slowAlloc();
    uint64_t v85 = swift_slowAlloc();
    *(_DWORD *)uint64_t v84 = 141558531;
    uint64_t v261 = 1752392040;
    uint64_t v262 = v85;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v84 + 12) = 2081;
    sub_1004DB140((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v86 = v241;
    uint64_t v87 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v261 = sub_1008FA0F0(v87, v88, &v262);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1004DB9C0((uint64_t)v80, type metadata accessor for OwnedBeaconGroup);
    *(_WORD *)(v84 + 22) = 2048;
    uint64_t v89 = *(void *)(*(void *)(v259 + *(int *)(v79 + 40)) + 16);
    sub_1004DB9C0(v259, type metadata accessor for OwnedBeaconGroup);
    uint64_t v261 = v89;
    uint64_t v79 = v240;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v82, v83, "BeaconMap for group: %{private,mask.hash}s (%ld)", (uint8_t *)v84, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v90 = v86;
    swift_slowDealloc();
  }
  else
  {
    sub_1004DB9C0(v81, type metadata accessor for OwnedBeaconGroup);

    sub_1004DB9C0((uint64_t)v80, type metadata accessor for OwnedBeaconGroup);
    uint64_t v90 = v241;
  }
  uint64_t v91 = v249;
  unint64_t v92 = v250;
  uint64_t v93 = v248;
  uint64_t v94 = v255;
  uint64_t v95 = *(void *)(v251 + *(int *)(v79 + 40));
  uint64_t v96 = *(void *)(v95 + 64);
  uint64_t v225 = v95 + 64;
  uint64_t v97 = 1 << *(unsigned char *)(v95 + 32);
  uint64_t v98 = -1;
  if (v97 < 64) {
    uint64_t v98 = ~(-1 << v97);
  }
  unint64_t v99 = v98 & v96;
  unint64_t v100 = ((unint64_t)(v97 + 63) >> 6);
  v237 = (void (**)(char *, uint64_t, uint64_t))(v258 + 32);
  v247 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v253 + 48);
  uint64_t v236 = (void (**)(char *, uint64_t, uint64_t))(v253 + 32);
  uint64_t v235 = (void (**)(char *, char *, uint64_t))(v258 + 16);
  uint64_t v234 = (void (**)(char *, char *, uint64_t))(v253 + 16);
  v232 = (void (**)(char *, uint64_t))(v253 + 8);
  long long v231 = (void (**)(char *, uint64_t))(v258 + 8);
  uint64_t v243 = &v262;
  unint64_t v210 = (char *)&v100[-1].isa + 7;
  uint64_t v101 = swift_bridgeObjectRetain();
  unint64_t v102 = v99;
  uint64_t v103 = 0;
  v242 = v100;
  uint64_t v211 = (char *)&v100[-1].isa + 3;
  uint64_t v253 = v101;
  uint64_t v212 = v101 + 104;
  *(void *)&long long v104 = 141558787;
  long long v215 = v104;
  unint64_t v214 = (char *)&type metadata for Any + 8;
  *(void *)&long long v104 = 141559299;
  long long v220 = v104;
  *(void *)&long long v104 = 141559811;
  long long v213 = v104;
  *(void *)&long long v104 = 141558275;
  long long v221 = v104;
  while (1)
  {
    if (v102)
    {
      uint64_t v105 = v90;
      uint64_t v258 = (v102 - 1) & v102;
      uint64_t v259 = v103;
      unint64_t v106 = __clz(__rbit64(v102)) | (v103 << 6);
      goto LABEL_14;
    }
    uint64_t v113 = v103 + 1;
    if (__OFADD__(v103, 1)) {
      break;
    }
    if (v113 >= (uint64_t)v242)
    {
      uint64_t v115 = v103;
LABEL_20:
      uint64_t v105 = v90;
      uint64_t v116 = sub_10000588C((uint64_t *)&unk_1016477D0);
      (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v116 - 8) + 56))(v94, 1, 1, v116);
      uint64_t v258 = 0;
      uint64_t v259 = v115;
      goto LABEL_21;
    }
    unint64_t v114 = *(void *)(v225 + 8 * v113);
    if (!v114)
    {
      uint64_t v115 = v103 + 1;
      if (v103 + 2 >= (uint64_t)v242) {
        goto LABEL_20;
      }
      unint64_t v114 = *(void *)(v225 + 8 * (v103 + 2));
      if (v114)
      {
        uint64_t v113 = v103 + 2;
      }
      else
      {
        uint64_t v115 = v103 + 2;
        if (v103 + 3 >= (uint64_t)v242) {
          goto LABEL_20;
        }
        unint64_t v114 = *(void *)(v225 + 8 * (v103 + 3));
        if (v114)
        {
          uint64_t v113 = v103 + 3;
        }
        else
        {
          uint64_t v113 = v103 + 4;
          uint64_t v115 = v103 + 3;
          if (v103 + 4 >= (uint64_t)v242) {
            goto LABEL_20;
          }
          unint64_t v114 = *(void *)(v225 + 8 * v113);
          if (!v114)
          {
            while (v211 != (char *)v103)
            {
              unint64_t v114 = *(void *)(v212 + 8 * v103++);
              if (v114)
              {
                uint64_t v113 = v103 + 4;
                goto LABEL_18;
              }
            }
            uint64_t v115 = (uint64_t)v210;
            goto LABEL_20;
          }
        }
      }
    }
LABEL_18:
    uint64_t v105 = v90;
    uint64_t v258 = (v114 - 1) & v114;
    uint64_t v259 = v113;
    unint64_t v106 = __clz(__rbit64(v114)) + (v113 << 6);
LABEL_14:
    uint64_t v107 = *(void *)(v253 + 56);
    uint64_t v108 = (uint64_t *)(*(void *)(v253 + 48) + 16 * v106);
    uint64_t v109 = *v108;
    unint64_t v110 = v108[1];
    *uint64_t v94 = *v108;
    v94[1] = v110;
    uint64_t v111 = v107 + *(void *)(v252 + 72) * v106;
    uint64_t v112 = sub_10000588C((uint64_t *)&unk_1016477D0);
    sub_1004DB958(v111, (uint64_t)v94 + *(int *)(v112 + 48), type metadata accessor for OwnedBeaconGroup.PairingState);
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v112 - 8) + 56))(v94, 0, 1, v112);
    sub_1000361E0(v109, v110);
LABEL_21:
    uint64_t v117 = v260;
    sub_10001D608((uint64_t)v94, (uint64_t)v260, (uint64_t *)&unk_10165F410);
    uint64_t v118 = sub_10000588C((uint64_t *)&unk_1016477D0);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(*(void *)(v118 - 8) + 48))(v117, 1, v118) == 1)
    {
      swift_release();
      return;
    }
    uint64_t v119 = *v260;
    unint64_t v120 = v260[1];
    sub_1004DBB74((uint64_t)v260 + *(int *)(v118 + 48), v257, type metadata accessor for OwnedBeaconGroup.PairingState);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v122 = sub_10000588C(&qword_101643D80);
        uint64_t v123 = v257;
        uint64_t v124 = v257 + *(int *)(v122 + 48);
        sub_100037A24(*(void *)(v257 + *(int *)(v122 + 64)), *(void *)(v257 + *(int *)(v122 + 64) + 8));
        uint64_t v125 = v123;
        uint64_t v90 = v105;
        (*v237)(v92, v125, v105);
        uint64_t v126 = v124;
        uint64_t v127 = v246;
        sub_10001D608(v126, v246, (uint64_t *)&unk_1016477E0);
        uint64_t v128 = v127;
        uint64_t v129 = v239;
        sub_100036178(v128, v239);
        if ((*v247)(v129, 1, v91) == 1)
        {
          char v130 = v93;
          sub_10001DAB4(v129, (uint64_t *)&unk_1016477E0);
          uint64_t v131 = v224;
          sub_1004DB958(v251, v224, type metadata accessor for OwnedBeaconGroup);
          os_log_type_t v132 = v230;
          (*v235)(v230, v92, v105);
          sub_1000361E0(v119, v120);
          sub_1000361E0(v119, v120);
          unint64_t v133 = Logger.logObject.getter();
          int v134 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v133, (os_log_type_t)v134))
          {
            LODWORD(v219) = v134;
            uint64_t v135 = swift_slowAlloc();
            uint64_t v136 = swift_slowAlloc();
            uint64_t v218 = v136;
            *(_DWORD *)uint64_t v135 = v220;
            uint64_t v261 = 1752392040;
            uint64_t v262 = v136;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v135 + 12) = 2081;
            sub_1004DB140((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
            uint64_t v137 = dispatch thunk of CustomStringConvertible.description.getter();
            uint64_t v261 = sub_1008FA0F0(v137, v138, &v262);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_1004DB9C0(v131, type metadata accessor for OwnedBeaconGroup);
            *(_WORD *)(v135 + 22) = 2160;
            uint64_t v261 = 1752392040;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v135 + 32) = 2081;
            static String.Encoding.utf8.getter();
            uint64_t v139 = String.init(data:encoding:)();
            if (!v140) {
              uint64_t v139 = Data.hexString.getter();
            }
            uint64_t v261 = sub_1008FA0F0(v139, v140, &v262);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_10001CFB8(v119, v120);
            sub_10001CFB8(v119, v120);
            *(_WORD *)(v135 + 42) = 2160;
            uint64_t v261 = 1752392040;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v135 + 52) = 2081;
            os_log_type_t v141 = v230;
            uint64_t v142 = UUID.uuidString.getter();
            uint64_t v261 = sub_1008FA0F0(v142, v143, &v262);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            uint64_t v144 = *v231;
            uint64_t v145 = v241;
            (*v231)(v141, v241);
            _os_log_impl((void *)&_mh_execute_header, v133, (os_log_type_t)v219, "  group: %{private,mask.hash}s serial: %{private,mask.hash}s: paired(%{private,mask.hash}s, N/A)", (uint8_t *)v135, 0x3Eu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            uint64_t v90 = v145;
            sub_10001CFB8(v119, v120);
            sub_10001DAB4(v246, (uint64_t *)&unk_1016477E0);
            unint64_t v92 = v250;
            v144(v250, v145);
            uint64_t v91 = v249;
LABEL_42:
            uint64_t v93 = v248;
            uint64_t v94 = v255;
            goto LABEL_43;
          }

          unint64_t v202 = *v231;
          (*v231)(v132, v105);
          sub_10001CFB8(v119, v120);
          sub_10001CFB8(v119, v120);
          sub_1004DB9C0(v131, type metadata accessor for OwnedBeaconGroup);
          sub_10001CFB8(v119, v120);
          sub_10001DAB4(v246, (uint64_t *)&unk_1016477E0);
          v202(v92, v105);
          uint64_t v94 = v255;
          unint64_t v102 = v258;
          uint64_t v103 = v259;
          uint64_t v90 = v105;
          uint64_t v93 = v130;
          uint64_t v91 = v249;
        }
        else
        {
          uint64_t v162 = v227;
          (*v236)(v227, v129, v91);
          sub_1004DB958(v251, v233, type metadata accessor for OwnedBeaconGroup);
          uint64_t v163 = v229;
          (*v235)(v229, v92, v90);
          uint64_t v164 = v228;
          (*v234)(v228, v162, v91);
          sub_1000361E0(v119, v120);
          sub_1000361E0(v119, v120);
          os_log_type_t v165 = Logger.logObject.getter();
          int v166 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v165, (os_log_type_t)v166))
          {
            LODWORD(v218) = v166;
            os_log_t v219 = v165;
            uint64_t v167 = swift_slowAlloc();
            uint64_t v168 = swift_slowAlloc();
            uint64_t v216 = v168;
            *(_DWORD *)uint64_t v167 = v213;
            uint64_t v261 = 1752392040;
            uint64_t v262 = v168;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v167 + 12) = 2081;
            uint64_t v169 = v233;
            sub_1004DB140((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
            uint64_t v170 = dispatch thunk of CustomStringConvertible.description.getter();
            uint64_t v261 = sub_1008FA0F0(v170, v171, &v262);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_1004DB9C0(v169, type metadata accessor for OwnedBeaconGroup);
            *(_WORD *)(v167 + 22) = 2160;
            uint64_t v261 = 1752392040;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v167 + 32) = 2081;
            static String.Encoding.utf8.getter();
            uint64_t v172 = String.init(data:encoding:)();
            if (!v173) {
              uint64_t v172 = Data.hexString.getter();
            }
            uint64_t v261 = sub_1008FA0F0(v172, v173, &v262);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_10001CFB8(v119, v120);
            sub_10001CFB8(v119, v120);
            *(_WORD *)(v167 + 42) = 2160;
            uint64_t v261 = 1752392040;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v167 + 52) = 2081;
            uint64_t v174 = v229;
            uint64_t v175 = UUID.uuidString.getter();
            uint64_t v261 = sub_1008FA0F0(v175, v176, &v262);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            uint64_t v217 = *v231;
            uint64_t v177 = v241;
            v217(v174, v241);
            *(_WORD *)(v167 + 62) = 2160;
            uint64_t v261 = 1752392040;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v167 + 72) = 2081;
            unint64_t v178 = v228;
            uint64_t v179 = MACAddress.description.getter();
            uint64_t v261 = sub_1008FA0F0(v179, v180, &v262);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            double v181 = *v232;
            double v182 = v178;
            uint64_t v90 = v177;
            uint64_t v183 = v249;
            (*v232)(v182, v249);
            os_log_t v184 = v219;
            _os_log_impl((void *)&_mh_execute_header, v219, (os_log_type_t)v218, "  group: %{private,mask.hash}s serial: %{private,mask.hash}s: \"\npaired(%{private,mask.hash}s, %{private,mask.hash}s", (uint8_t *)v167, 0x52u);
            swift_arrayDestroy();
            swift_slowDealloc();
            uint64_t v91 = v183;
            swift_slowDealloc();

            sub_10001CFB8(v119, v120);
            v181(v227, v183);
            sub_10001DAB4(v246, (uint64_t *)&unk_1016477E0);
            unint64_t v92 = v250;
            v217(v250, v177);
            goto LABEL_42;
          }

          uint64_t v203 = v91;
          uint64_t v204 = v231;
          uint64_t v205 = *v232;
          (*v232)(v164, v203);
          os_log_type_t v206 = *v204;
          (*v204)(v163, v90);
          sub_10001CFB8(v119, v120);
          sub_10001CFB8(v119, v120);
          sub_1004DB9C0(v233, type metadata accessor for OwnedBeaconGroup);
          sub_10001CFB8(v119, v120);
          v205(v162, v203);
          uint64_t v91 = v203;
          sub_10001DAB4(v246, (uint64_t *)&unk_1016477E0);
          uint64_t v207 = v250;
          v206(v250, v90);
          uint64_t v93 = v248;
          uint64_t v94 = v255;
          unint64_t v102 = v258;
          uint64_t v103 = v259;
          unint64_t v92 = v207;
        }
      }
      else
      {
        sub_1000361E0(v119, v120);
        sub_1000361E0(v119, v120);
        id v157 = Logger.logObject.getter();
        os_log_type_t v158 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v157, v158))
        {
          uint64_t v159 = swift_slowAlloc();
          uint64_t v262 = swift_slowAlloc();
          *(_DWORD *)uint64_t v159 = v221;
          *(void *)(v159 + 4) = 1752392040;
          *(_WORD *)(v159 + 12) = 2081;
          static String.Encoding.utf8.getter();
          uint64_t v160 = String.init(data:encoding:)();
          if (!v161) {
            uint64_t v160 = Data.hexString.getter();
          }
          *(void *)(v159 + 14) = sub_1008FA0F0(v160, v161, &v262);
          swift_bridgeObjectRelease();
          sub_10001CFB8(v119, v120);
          sub_10001CFB8(v119, v120);
          _os_log_impl((void *)&_mh_execute_header, v157, v158, "  %{private,mask.hash}s: locked", (uint8_t *)v159, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
          sub_10001CFB8(v119, v120);

          uint64_t v91 = v249;
          unint64_t v92 = v250;
          uint64_t v93 = v248;
        }
        else
        {
          sub_10001CFB8(v119, v120);

          sub_10001CFB8(v119, v120);
          sub_10001CFB8(v119, v120);
        }
        uint64_t v94 = v255;
        unint64_t v102 = v258;
        uint64_t v103 = v259;
        uint64_t v90 = v105;
      }
    }
    else
    {
      uint64_t v146 = v245;
      sub_10001D608(v257, v245, (uint64_t *)&unk_1016477E0);
      uint64_t v147 = v146;
      uint64_t v148 = v238;
      sub_100036178(v147, v238);
      if ((*v247)(v148, 1, v91) == 1)
      {
        sub_10001DAB4(v148, (uint64_t *)&unk_1016477E0);
        uint64_t v149 = v223;
        sub_1004DB958(v251, v223, type metadata accessor for OwnedBeaconGroup);
        sub_1000361E0(v119, v120);
        sub_1000361E0(v119, v120);
        uint64_t v150 = Logger.logObject.getter();
        os_log_type_t v151 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v150, v151))
        {
          uint64_t v152 = swift_slowAlloc();
          uint64_t v262 = swift_slowAlloc();
          *(_DWORD *)uint64_t v152 = v215;
          *(void *)(v152 + 4) = 1752392040;
          *(_WORD *)(v152 + 12) = 2081;
          sub_1004DB140((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v153 = dispatch thunk of CustomStringConvertible.description.getter();
          *(void *)(v152 + 14) = sub_1008FA0F0(v153, v154, &v262);
          swift_bridgeObjectRelease();
          sub_1004DB9C0(v149, type metadata accessor for OwnedBeaconGroup);
          *(_WORD *)(v152 + 22) = 2160;
          *(void *)(v152 + 24) = 1752392040;
          *(_WORD *)(v152 + 32) = 2081;
          static String.Encoding.utf8.getter();
          uint64_t v155 = String.init(data:encoding:)();
          if (!v156) {
            uint64_t v155 = Data.hexString.getter();
          }
          *(void *)(v152 + 34) = sub_1008FA0F0(v155, v156, &v262);
          swift_bridgeObjectRelease();
          sub_10001CFB8(v119, v120);
          sub_10001CFB8(v119, v120);
          _os_log_impl((void *)&_mh_execute_header, v150, v151, "  group: %{private,mask.hash}s serial: %{private,mask.hash}s: unpaired(N/A)", (uint8_t *)v152, 0x2Au);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          sub_10001CFB8(v119, v120);
          sub_10001DAB4(v245, (uint64_t *)&unk_1016477E0);
          uint64_t v90 = v241;
          uint64_t v91 = v249;
          unint64_t v92 = v250;
          uint64_t v93 = v248;
          uint64_t v94 = v255;
LABEL_43:
          unint64_t v102 = v258;
          uint64_t v103 = v259;
        }
        else
        {
          sub_10001CFB8(v119, v120);
          sub_1004DB9C0(v149, type metadata accessor for OwnedBeaconGroup);
          sub_10001CFB8(v119, v120);
          sub_10001CFB8(v119, v120);

          sub_10001DAB4(v245, (uint64_t *)&unk_1016477E0);
          uint64_t v93 = v248;
          uint64_t v91 = v249;
          uint64_t v94 = v255;
          unint64_t v102 = v258;
          uint64_t v103 = v259;
          uint64_t v90 = v105;
        }
      }
      else
      {
        (*v236)(v93, v148, v91);
        uint64_t v185 = v222;
        sub_1004DB958(v251, v222, type metadata accessor for OwnedBeaconGroup);
        double v186 = v226;
        (*v234)(v226, v93, v91);
        sub_1000361E0(v119, v120);
        sub_1000361E0(v119, v120);
        double v187 = Logger.logObject.getter();
        uint64_t v188 = v91;
        uint64_t v189 = v93;
        os_log_type_t v190 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v187, v190))
        {
          os_log_t v219 = v187;
          uint64_t v191 = swift_slowAlloc();
          uint64_t v192 = swift_slowAlloc();
          uint64_t v218 = v192;
          *(_DWORD *)uint64_t v191 = v220;
          uint64_t v261 = 1752392040;
          uint64_t v262 = v192;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v191 + 12) = 2081;
          sub_1004DB140((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v193 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v261 = sub_1008FA0F0(v193, v194, &v262);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_1004DB9C0(v185, type metadata accessor for OwnedBeaconGroup);
          *(_WORD *)(v191 + 22) = 2160;
          uint64_t v261 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v191 + 32) = 2081;
          static String.Encoding.utf8.getter();
          uint64_t v195 = String.init(data:encoding:)();
          if (!v196) {
            uint64_t v195 = Data.hexString.getter();
          }
          uint64_t v261 = sub_1008FA0F0(v195, v196, &v262);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10001CFB8(v119, v120);
          sub_10001CFB8(v119, v120);
          *(_WORD *)(v191 + 42) = 2160;
          uint64_t v261 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v191 + 52) = 2081;
          id v197 = v226;
          uint64_t v198 = MACAddress.description.getter();
          uint64_t v261 = sub_1008FA0F0(v198, v199, &v262);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          uint64_t v200 = *v232;
          uint64_t v91 = v249;
          (*v232)(v197, v249);
          os_log_t v201 = v219;
          _os_log_impl((void *)&_mh_execute_header, v219, v190, "  group: %{private,mask.hash}s serial: %{private,mask.hash}s: unpaired(%{private,mask.hash}s", (uint8_t *)v191, 0x3Eu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          sub_10001CFB8(v119, v120);
          uint64_t v93 = v248;
          v200(v248, v91);
          sub_10001DAB4(v245, (uint64_t *)&unk_1016477E0);
          uint64_t v90 = v241;
          uint64_t v94 = v255;
          unint64_t v102 = v258;
          uint64_t v103 = v259;
          unint64_t v92 = v250;
        }
        else
        {

          uint64_t v208 = *v232;
          (*v232)(v186, v188);
          sub_10001CFB8(v119, v120);
          sub_10001CFB8(v119, v120);
          sub_1004DB9C0(v185, type metadata accessor for OwnedBeaconGroup);
          sub_10001CFB8(v119, v120);
          v208(v189, v188);
          sub_10001DAB4(v245, (uint64_t *)&unk_1016477E0);
          uint64_t v94 = v255;
          unint64_t v102 = v258;
          uint64_t v103 = v259;
          uint64_t v90 = v105;
          unint64_t v92 = v250;
          uint64_t v93 = v189;
          uint64_t v91 = v188;
        }
      }
    }
  }
  __break(1u);
}

uint64_t sub_1004CF378()
{
  uint64_t v1 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v3);
  uint64_t v8 = (char *)v24 - v7;
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)v24 - v10;
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)v24 - v12;
  if (*(unsigned char *)(v0 + *(int *)(type metadata accessor for OwnedBeaconGroup(0) + 32)) == 1)
  {
    uint64_t v14 = swift_bridgeObjectRetain();
    uint64_t v15 = sub_10070FB20(v14);
    swift_bridgeObjectRelease();
    uint64_t v16 = v15[2];
    if (v16)
    {
      uint64_t v17 = (uint64_t)v15 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
      uint64_t v18 = v15;
      uint64_t v19 = *(void *)(v2 + 72);
      v24[1] = v18;
      swift_retain();
      while (1)
      {
        sub_1004DB958(v17, (uint64_t)v13, type metadata accessor for OwnedBeaconGroup.PairingState);
        sub_1004DB958((uint64_t)v13, (uint64_t)v11, type metadata accessor for OwnedBeaconGroup.PairingState);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        sub_1004DB9C0((uint64_t)v11, type metadata accessor for OwnedBeaconGroup.PairingState);
        sub_1004DB958((uint64_t)v13, (uint64_t)v8, type metadata accessor for OwnedBeaconGroup.PairingState);
        if (!EnumCaseMultiPayload) {
          break;
        }
        swift_storeEnumTagMultiPayload();
        char v21 = sub_1004DBD54((uint64_t)v8, (unint64_t)v5);
        sub_1004DB9C0((uint64_t)v5, type metadata accessor for OwnedBeaconGroup.PairingState);
        sub_1004DB9C0((uint64_t)v8, type metadata accessor for OwnedBeaconGroup.PairingState);
        sub_1004DB9C0((uint64_t)v13, type metadata accessor for OwnedBeaconGroup.PairingState);
        if (v21) {
          goto LABEL_11;
        }
        v17 += v19;
        if (!--v16)
        {
          swift_release_n();
          char v22 = 1;
          return v22 & 1;
        }
      }
      sub_1004DB9C0((uint64_t)v8, type metadata accessor for OwnedBeaconGroup.PairingState);
      sub_1004DB9C0((uint64_t)v13, type metadata accessor for OwnedBeaconGroup.PairingState);
LABEL_11:
      swift_release_n();
      char v22 = 0;
    }
    else
    {
      swift_release();
      char v22 = 1;
    }
  }
  else
  {
    char v22 = sub_1004D6B84() ^ 1;
  }
  return v22 & 1;
}

uint64_t sub_1004CF630(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = sub_10000588C(&qword_10163CB78);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = &v27[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v8 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = &v27[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v10);
  uint64_t v14 = &v27[-v13];
  uint64_t v15 = *(void *)(v2 + *(int *)(type metadata accessor for OwnedBeaconGroup(0) + 40));
  if (!*(void *)(v15 + 16))
  {
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
LABEL_7:
    sub_10001DAB4((uint64_t)v7, &qword_10163CB78);
    goto LABEL_8;
  }
  sub_1000361E0(a1, a2);
  uint64_t v16 = sub_1007241A0(a1, a2);
  if (v17)
  {
    sub_1004DB958(*(void *)(v15 + 56) + *(void *)(v9 + 72) * v16, (uint64_t)v7, type metadata accessor for OwnedBeaconGroup.PairingState);
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
  }
  else
  {
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
  }
  sub_10001CFB8(a1, a2);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    goto LABEL_7;
  }
  sub_1004DBB74((uint64_t)v7, (uint64_t)v14, type metadata accessor for OwnedBeaconGroup.PairingState);
  sub_1004DBB74((uint64_t)v14, (uint64_t)v12, type metadata accessor for OwnedBeaconGroup.PairingState);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    uint64_t v26 = &v12[*(int *)(sub_10000588C((uint64_t *)&unk_101647810) + 48)];
    int v18 = *v26;
    int v19 = v26[1];
    sub_10001DAB4((uint64_t)v12, (uint64_t *)&unk_1016477E0);
    return v18 | (v19 << 8);
  }
  if (EnumCaseMultiPayload == 1)
  {
    char v22 = (int *)sub_10000588C(&qword_101643D80);
    uint64_t v23 = (uint64_t)&v12[v22[12]];
    sub_100037A24(*(void *)&v12[v22[16]], *(void *)&v12[v22[16] + 8]);
    uint64_t v24 = &v12[v22[24]];
    int v18 = *v24;
    int v19 = v24[1];
    sub_10001DAB4(v23, (uint64_t *)&unk_1016477E0);
    uint64_t v25 = type metadata accessor for UUID();
    (*(void (**)(unsigned char *, uint64_t))(*(void *)(v25 - 8) + 8))(v12, v25);
    return v18 | (v19 << 8);
  }
LABEL_8:
  int v18 = 0;
  int v19 = 1;
  return v18 | (v19 << 8);
}

uint64_t sub_1004CF958(uint64_t a1)
{
  uint64_t v58 = sub_10000588C((uint64_t *)&unk_1016477D0);
  uint64_t v3 = __chkstk_darwin(v58);
  uint64_t v57 = (uint64_t *)((char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = __chkstk_darwin(v3);
  unsigned int v56 = (char *)&v47 - v6;
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v55 = (uint64_t *)((char *)&v47 - v8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v54 = (uint64_t *)((char *)&v47 - v10);
  __chkstk_darwin(v9);
  uint64_t v53 = (uint64_t *)((char *)&v47 - v11);
  int64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = _swiftEmptyArrayStorage;
  if (!v12) {
    return (uint64_t)v13;
  }
  uint64_t v47 = v1;
  BOOL v61 = _swiftEmptyArrayStorage;
  sub_1000B6FB0(0, v12, 0);
  uint64_t result = sub_100803228(a1);
  uint64_t v16 = result;
  uint64_t v17 = 0;
  uint64_t v18 = a1 + 64;
  uint64_t v48 = a1 + 80;
  int64_t v49 = v12;
  uint64_t v51 = a1 + 64;
  uint64_t v52 = a1;
  uint64_t v50 = v15;
  uint64_t v19 = v58;
  while ((v16 & 0x8000000000000000) == 0 && v16 < 1 << *(unsigned char *)(a1 + 32))
  {
    unint64_t v22 = (unint64_t)v16 >> 6;
    if ((*(void *)(v18 + 8 * ((unint64_t)v16 >> 6)) & (1 << v16)) == 0) {
      goto LABEL_25;
    }
    if (*(_DWORD *)(a1 + 36) != v15) {
      goto LABEL_26;
    }
    uint64_t v59 = v17;
    uint64_t v60 = 1 << v16;
    uint64_t v23 = (uint64_t)v53;
    uint64_t v24 = (uint64_t)v53 + *(int *)(v19 + 48);
    uint64_t v25 = *(void *)(a1 + 56);
    uint64_t v26 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v16);
    uint64_t v27 = *v26;
    unint64_t v28 = v26[1];
    *uint64_t v53 = *v26;
    *(void *)(v23 + 8) = v28;
    uint64_t v29 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
    sub_1004DB958(v25 + *(void *)(*(void *)(v29 - 8) + 72) * v16, v24, type metadata accessor for OwnedBeaconGroup.PairingState);
    uint64_t v30 = v54;
    *uint64_t v54 = v27;
    v30[1] = v28;
    sub_1004DB958(v24, (uint64_t)v30 + *(int *)(v19 + 48), type metadata accessor for OwnedBeaconGroup.PairingState);
    uint64_t v31 = (uint64_t)v30;
    uint64_t v32 = v55;
    sub_10001D608(v31, (uint64_t)v55, (uint64_t *)&unk_1016477D0);
    sub_1000361E0(v27, v28);
    sub_1000361E0(v27, v28);
    sub_10001DAB4(v23, (uint64_t *)&unk_1016477D0);
    uint64_t v33 = *(int *)(v19 + 48);
    uint64_t v34 = (uint64_t)&v56[v33];
    uint64_t v36 = *v32;
    unint64_t v35 = v32[1];
    sub_1004DB958((uint64_t)v32 + v33, (uint64_t)&v56[v33], type metadata accessor for OwnedBeaconGroup.PairingState);
    uint64_t v37 = (uint64_t)v57;
    uint64_t v38 = (uint64_t)v57 + *(int *)(v19 + 48);
    *uint64_t v57 = v36;
    *(void *)(v37 + 8) = v35;
    sub_1004DBB74(v34, v38, type metadata accessor for OwnedBeaconGroup.PairingState);
    sub_1000361E0(v36, v35);
    sub_1000361E0(v36, v35);
    sub_10001DAB4(v37, (uint64_t *)&unk_1016477D0);
    sub_10001DAB4((uint64_t)v32, (uint64_t *)&unk_1016477D0);
    uint64_t v13 = v61;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = sub_1000B6FB0(0, v13[2] + 1, 1);
      uint64_t v13 = v61;
    }
    unint64_t v40 = v13[2];
    unint64_t v39 = v13[3];
    if (v40 >= v39 >> 1)
    {
      uint64_t result = sub_1000B6FB0(v39 > 1, v40 + 1, 1);
      uint64_t v13 = v61;
    }
    v13[2] = v40 + 1;
    uint64_t v41 = &v13[2 * v40];
    v41[4] = v36;
    v41[5] = v35;
    a1 = v52;
    int64_t v20 = 1 << *(unsigned char *)(v52 + 32);
    if (v16 >= v20) {
      goto LABEL_27;
    }
    uint64_t v18 = v51;
    uint64_t v42 = *(void *)(v51 + 8 * v22);
    if ((v42 & v60) == 0) {
      goto LABEL_28;
    }
    LODWORD(v15) = v50;
    if (*(_DWORD *)(v52 + 36) != v50) {
      goto LABEL_29;
    }
    unint64_t v43 = v42 & (-2 << (v16 & 0x3F));
    if (v43)
    {
      int64_t v20 = __clz(__rbit64(v43)) | v16 & 0xFFFFFFFFFFFFFFC0;
      int64_t v21 = v49;
    }
    else
    {
      unint64_t v44 = v22 + 1;
      unint64_t v45 = (unint64_t)(v20 + 63) >> 6;
      int64_t v21 = v49;
      if (v22 + 1 < v45)
      {
        unint64_t v46 = *(void *)(v51 + 8 * v44);
        if (v46)
        {
LABEL_22:
          int64_t v20 = __clz(__rbit64(v46)) + (v44 << 6);
        }
        else
        {
          while (v45 - 2 != v22)
          {
            unint64_t v46 = *(void *)(v48 + 8 * v22++);
            if (v46)
            {
              unint64_t v44 = v22 + 1;
              goto LABEL_22;
            }
          }
        }
      }
    }
    uint64_t v17 = v59 + 1;
    uint64_t v16 = v20;
    if (v59 + 1 == v21) {
      return (uint64_t)v13;
    }
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

void sub_1004CFDAC(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v89 = a2;
  uint64_t v3 = (void *)type metadata accessor for MACAddress();
  unint64_t v4 = *(v3 - 1);
  uint64_t v86 = v3;
  unint64_t v87 = v4;
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v79 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for OwnedBeaconGroup.VersionedGroupMACAddress(0);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  int64_t v12 = (char *)&v79 - v11;
  uint64_t v13 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)&v79 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v91 = *(void *)(v16 - 8);
  uint64_t v92 = v16;
  __chkstk_darwin(v16);
  uint64_t v90 = (char *)&v79 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (CKRecord.recordType.getter() == 0x72476E6F63616542 && v18 == 0xEB0000000070756FLL)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v19 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if ((v19 & 1) == 0)
    {
      sub_1004DBB20();
      swift_allocError();
      *uint64_t v37 = 0;
      goto LABEL_13;
    }
  }
  id v20 = [a1 recordID];
  id v21 = [v20 recordName];

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  UUID.init(uuidString:)();
  swift_bridgeObjectRelease();
  uint64_t v23 = v91;
  uint64_t v22 = v92;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v91 + 48))(v15, 1, v92) == 1)
  {
    sub_10001DAB4((uint64_t)v15, &qword_101638CF0);
    sub_1004DBB20();
    swift_allocError();
    *uint64_t v24 = 3;
LABEL_13:
    swift_willThrow();

    return;
  }
  uint64_t v25 = v23 + 32;
  uint64_t v84 = *(void (**)(char *, char *, uint64_t))(v23 + 32);
  v84(v90, v15, v22);
  id v26 = [a1 encryptedValues];
  NSString v27 = String._bridgeToObjectiveC()();
  id v85 = v26;
  id v28 = [v26 objectForKeyedSubscript:v27];

  if (!v28 || (v95 = v28, uint64_t v29 = sub_10000588C((uint64_t *)&unk_10163AE50), (swift_dynamicCast() & 1) == 0))
  {
    static os_log_type_t.error.getter();
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v33 = swift_allocObject();
    *(_OWORD *)(v33 + 16) = xmmword_101342130;
    *(void *)(v33 + 56) = sub_10001D4B0(0, (unint64_t *)&qword_10163AE60);
    *(void *)(v33 + 64) = sub_1000A038C();
    *(void *)(v33 + 32) = a1;
    sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
    id v34 = a1;
    unint64_t v35 = (void *)static OS_os_log.default.getter();
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();

    sub_1004DBB20();
    swift_allocError();
    *uint64_t v36 = 2;
    swift_willThrow();
    swift_unknownObjectRelease();

    (*(void (**)(char *, uint64_t))(v91 + 8))(v90, v92);
    return;
  }
  uint64_t v82 = v25;
  uint64_t v83 = v29;
  uint64_t v31 = v93;
  unint64_t v30 = v94;
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  sub_1000361E0(v31, v30);
  JSONDecoder.init()();
  sub_1004DB140((unint64_t *)&unk_1016477C0, (void (*)(uint64_t))type metadata accessor for OwnedBeaconGroup.VersionedGroupMACAddress);
  uint64_t v32 = v88;
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  if (v32)
  {
    sub_10001CFB8(v31, v30);
    swift_release();
  }
  else
  {
    uint64_t v88 = v31;
    sub_10001CFB8(v31, v30);
    swift_release();
    sub_1004DBB74((uint64_t)v10, (uint64_t)v12, type metadata accessor for OwnedBeaconGroup.VersionedGroupMACAddress);
    uint64_t v38 = *(void *)v12;
    char v39 = v12[8];
    if ((v39 & 1) != 0 || v38 < 2)
    {
      unint64_t v81 = v30;
      uint64_t v50 = v89;
      *(void *)(v89 + 16) = v38;
      uint64_t v46 = v50;
      *(unsigned char *)(v50 + 24) = v39;
      uint64_t v51 = &v12[*(int *)(v7 + 20)];
      uint64_t v52 = type metadata accessor for OwnedBeaconGroup(0);
      int64_t v49 = v86;
      (*(void (**)(uint64_t, char *, void *))(v87 + 32))(v46 + *(int *)(v52 + 28), v51, v86);
      id v47 = v85;
      goto LABEL_23;
    }
    if (qword_101636A90 != -1) {
      swift_once();
    }
    uint64_t v40 = type metadata accessor for Logger();
    sub_100010324(v40, (uint64_t)qword_10170DDC8);
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v41, v42))
    {
      unint64_t v43 = v30;
      unint64_t v44 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)unint64_t v44 = 134217984;
      uint64_t v93 = v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Ignoring unsupported OwnedBeaconGroup version: %ld > 1", v44, 0xCu);
      unint64_t v30 = v43;
      swift_slowDealloc();
    }

    sub_1004DBB20();
    swift_allocError();
    *unint64_t v45 = 5;
    swift_willThrow();
    sub_1004DB9C0((uint64_t)v12, type metadata accessor for OwnedBeaconGroup.VersionedGroupMACAddress);
    uint64_t v31 = v88;
  }
  uint64_t v46 = v89;
  *(void *)(v89 + 16) = 0;
  *(unsigned char *)(v46 + 24) = 1;
  sub_1000361E0(v31, v30);
  MACAddress.init(dataRepresentation:)();
  id v47 = v85;
  uint64_t v88 = v31;
  unint64_t v81 = v30;
  swift_errorRelease();
  uint64_t v48 = type metadata accessor for OwnedBeaconGroup(0);
  int64_t v49 = v86;
  (*(void (**)(uint64_t, char *, void *))(v87 + 32))(v46 + *(int *)(v48 + 28), v6, v86);
LABEL_23:
  NSString v53 = String._bridgeToObjectiveC()();
  id v54 = [v47 objectForKeyedSubscript:v53];

  if (v54)
  {
    id v95 = v54;
    if (swift_dynamicCast())
    {
      uint64_t v55 = v93;
      unint64_t v56 = v94;
      sub_1000361E0(v93, v94);
      uint64_t v80 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
      sub_1004DB220();
      sub_1004DB274();
      sub_100061B8C();
      sub_1004DB140(&qword_101647740, (void (*)(uint64_t))type metadata accessor for OwnedBeaconGroup.PairingState);
      unint64_t v57 = v56;
      uint64_t v58 = v55;
      sub_1004DB140(&qword_101647748, (void (*)(uint64_t))type metadata accessor for OwnedBeaconGroup.PairingState);
      uint64_t v59 = Dictionary<>.init(dataRepresentation:)();
      unint64_t v60 = v57;
      NSString v61 = String._bridgeToObjectiveC()();
      id v62 = v85;
      id v63 = [v85 objectForKeyedSubscript:v61];

      uint64_t v46 = v89;
      if (v63)
      {
        uint64_t v93 = (uint64_t)v63;
        if (swift_dynamicCast())
        {
          LODWORD(v80) = v95;
          NSString v64 = String._bridgeToObjectiveC()();
          id v65 = [v62 objectForKeyedSubscript:v64];

          if (v65)
          {
            id v95 = v65;
            if (swift_dynamicCast())
            {
              uint64_t v91 = v93;
              unint64_t v87 = v94;
              id v66 = [objc_allocWithZone((Class)NSKeyedArchiver) initRequiringSecureCoding:1];
              [a1 encodeSystemFieldsWithCoder:v66];
              [v66 finishEncoding];
              uint64_t v67 = v58;
              id v68 = [v66 encodedData];
              uint64_t v83 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v79 = v69;

              sub_10001CFB8(v88, v81);
              sub_10001CFB8(v67, v60);
              swift_unknownObjectRelease();
              uint64_t v70 = v79;
              *(void *)uint64_t v46 = v83;
              *(void *)(v46 + 8) = v70;
              unint64_t v71 = (int *)type metadata accessor for OwnedBeaconGroup(0);
              v84((char *)(v46 + v71[6]), v90, v92);
              *(unsigned char *)(v46 + v71[8]) = v80;
              unint64_t v72 = (uint64_t *)(v46 + v71[9]);
              unint64_t v73 = v87;
              *unint64_t v72 = v91;
              v72[1] = v73;
              *(void *)(v46 + v71[10]) = v59;
              return;
            }
          }
        }
      }
      swift_bridgeObjectRelease();
      sub_10001CFB8(v58, v60);
      int64_t v49 = v86;
    }
  }
  static os_log_type_t.error.getter();
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v74 = swift_allocObject();
  *(_OWORD *)(v74 + 16) = xmmword_101342130;
  *(void *)(v74 + 56) = sub_10001D4B0(0, (unint64_t *)&qword_10163AE60);
  *(void *)(v74 + 64) = sub_1000A038C();
  *(void *)(v74 + 32) = a1;
  sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
  id v75 = a1;
  uint64_t v76 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();

  sub_1004DBB20();
  swift_allocError();
  *unint64_t v77 = 6;
  swift_willThrow();
  swift_unknownObjectRelease();

  sub_10001CFB8(v88, v81);
  (*(void (**)(char *, uint64_t))(v91 + 8))(v90, v92);
  uint64_t v78 = type metadata accessor for OwnedBeaconGroup(0);
  (*(void (**)(uint64_t, void *))(v87 + 8))(v46 + *(int *)(v78 + 28), v49);
}

uint64_t sub_1004D0AD8(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v6 - 8);
  uint64_t v7 = sub_10000588C(&qword_10163CB78);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  uint64_t v10 = (char *)v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  int64_t v12 = (char *)v39 - v11;
  uint64_t v13 = (uint64_t *)(v2 + *(int *)(type metadata accessor for OwnedBeaconGroup(0) + 40));
  uint64_t v14 = *v13;
  if (*(void *)(*v13 + 16))
  {
    sub_1000361E0(a1, a2);
    uint64_t v15 = sub_1007241A0(a1, a2);
    if (v16)
    {
      uint64_t v17 = v15;
      v39[1] = v3;
      uint64_t v18 = *(void *)(v14 + 56);
      uint64_t v19 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
      uint64_t v20 = *(void *)(v19 - 8);
      v39[0] = v13;
      uint64_t v21 = v20;
      sub_1004DB958(v18 + *(void *)(v20 + 72) * v17, (uint64_t)v12, type metadata accessor for OwnedBeaconGroup.PairingState);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v12, 0, 1, v19);
    }
    else
    {
      uint64_t v19 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v12, 1, 1, v19);
    }
    sub_10001CFB8(a1, a2);
    type metadata accessor for OwnedBeaconGroup.PairingState(0);
    uint64_t v23 = *(void *)(v19 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v12, 1, v19) != 1)
    {
      sub_10001DAB4((uint64_t)v12, &qword_10163CB78);
      sub_1004D1A54(a1, a2, (uint64_t)v10);
      __int16 v34 = sub_1004CF630(a1, a2);
      char v35 = sub_1004D950C(a1, a2);
      if (v35 == 3) {
        char v36 = 0;
      }
      else {
        char v36 = v35;
      }
      uint64_t v37 = &v10[*(int *)(sub_10000588C((uint64_t *)&unk_101647810) + 48)];
      *uint64_t v37 = v34;
      v37[1] = HIBYTE(v34) & 1;
      void v37[2] = v36;
      swift_storeEnumTagMultiPayload();
      uint64_t v33 = 1;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v10, 0, 1, v19);
      sub_1000361E0(a1, a2);
      sub_10015D5C4((uint64_t)v10, a1, a2);
      return v33;
    }
  }
  else
  {
    uint64_t v22 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v12, 1, 1, v22);
  }
  sub_10001DAB4((uint64_t)v12, &qword_10163CB78);
  if (qword_101637310 != -1) {
    swift_once();
  }
  uint64_t v24 = type metadata accessor for Logger();
  sub_100010324(v24, (uint64_t)qword_10170F068);
  sub_1000361E0(a1, a2);
  sub_1000361E0(a1, a2);
  uint64_t v25 = Logger.logObject.getter();
  os_log_type_t v26 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = swift_slowAlloc();
    uint64_t v28 = swift_slowAlloc();
    *(_DWORD *)uint64_t v27 = 141558275;
    uint64_t v40 = 1752392040;
    uint64_t v41 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v27 + 12) = 2081;
    sub_1000361E0(a1, a2);
    static String.Encoding.utf8.getter();
    uint64_t v29 = String.init(data:encoding:)();
    if (!v30) {
      uint64_t v29 = Data.hexString.getter();
    }
    uint64_t v31 = v29;
    unint64_t v32 = v30;
    sub_10001CFB8(a1, a2);
    uint64_t v40 = sub_1008FA0F0(v31, v32, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10001CFB8(a1, a2);
    sub_10001CFB8(a1, a2);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "Invalid serial number: %{private,mask.hash}s. Unpair failed!", (uint8_t *)v27, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10001CFB8(a1, a2);
    sub_10001CFB8(a1, a2);
  }

  return 0;
}

uint64_t sub_1004D1078@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = sub_10000588C(&qword_10163CB78);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v12);
  char v16 = (char *)&v27 - v15;
  uint64_t v17 = *(void *)(v3 + *(int *)(type metadata accessor for OwnedBeaconGroup(0) + 40));
  if (!*(void *)(v17 + 16))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
LABEL_7:
    sub_10001DAB4((uint64_t)v9, &qword_10163CB78);
    uint64_t v20 = type metadata accessor for UUID();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(a3, 1, 1, v20);
  }
  sub_1000361E0(a1, a2);
  uint64_t v18 = sub_1007241A0(a1, a2);
  if (v19)
  {
    sub_1004DB958(*(void *)(v17 + 56) + *(void *)(v11 + 72) * v18, (uint64_t)v9, type metadata accessor for OwnedBeaconGroup.PairingState);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56))(v9, 1, 1, v10);
  }
  sub_10001CFB8(a1, a2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1) {
    goto LABEL_7;
  }
  sub_1004DBB74((uint64_t)v9, (uint64_t)v16, type metadata accessor for OwnedBeaconGroup.PairingState);
  sub_1004DBB74((uint64_t)v16, (uint64_t)v14, type metadata accessor for OwnedBeaconGroup.PairingState);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v22 = sub_10000588C(&qword_101643D80);
    uint64_t v23 = (uint64_t)&v14[*(int *)(v22 + 48)];
    sub_100037A24(*(void *)&v14[*(int *)(v22 + 64)], *(void *)&v14[*(int *)(v22 + 64) + 8]);
    uint64_t v24 = type metadata accessor for UUID();
    uint64_t v25 = *(void *)(v24 - 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v25 + 32))(a3, v14, v24);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v25 + 56))(a3, 0, 1, v24);
    return sub_10001DAB4(v23, (uint64_t *)&unk_1016477E0);
  }
  else
  {
    uint64_t v26 = type metadata accessor for UUID();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(a3, 1, 1, v26);
    return sub_1004DB9C0((uint64_t)v14, type metadata accessor for OwnedBeaconGroup.PairingState);
  }
}

uint64_t sub_1004D1434()
{
  uint64_t v66 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  uint64_t v63 = *(void *)(v66 - 8);
  __chkstk_darwin(v66);
  uint64_t v2 = (char *)&v51 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v62 - 8);
  uint64_t v4 = __chkstk_darwin(v62);
  NSString v61 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v60 = (uint64_t)&v51 - v7;
  __chkstk_darwin(v6);
  uint64_t v59 = (char *)&v51 - v8;
  uint64_t v9 = (uint64_t *)&unk_10165F410;
  uint64_t v10 = sub_10000588C((uint64_t *)&unk_10165F410);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v13 = (uint64_t *)((char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v51 - v14;
  id v68 = &_swiftEmptySetSingleton;
  uint64_t v16 = *(void *)(v0 + *(int *)(type metadata accessor for OwnedBeaconGroup(0) + 40));
  uint64_t v17 = *(void *)(v16 + 64);
  uint64_t v54 = v16 + 64;
  uint64_t v18 = 1 << *(unsigned char *)(v16 + 32);
  uint64_t v19 = -1;
  if (v18 < 64) {
    uint64_t v19 = ~(-1 << v18);
  }
  unint64_t v20 = v19 & v17;
  unint64_t v21 = (unint64_t)(v18 + 63) >> 6;
  unint64_t v57 = (void (**)(char *, char *, uint64_t))(v3 + 16);
  uint64_t v58 = (void (**)(char *, char *, uint64_t))(v3 + 32);
  unint64_t v56 = (uint64_t (**)(uint64_t, uint64_t))(v3 + 8);
  unint64_t v51 = v21 - 1;
  uint64_t result = swift_bridgeObjectRetain();
  unint64_t v23 = v20;
  unint64_t v24 = 0;
  int64_t v55 = v21;
  uint64_t v64 = result;
  uint64_t v52 = result + 104;
  unint64_t v53 = v21 - 5;
  uint64_t v25 = (uint64_t *)&unk_1016477D0;
  if (!v23) {
    goto LABEL_8;
  }
LABEL_6:
  uint64_t v67 = (v23 - 1) & v23;
  unint64_t v26 = __clz(__rbit64(v23)) | (v24 << 6);
LABEL_7:
  uint64_t v27 = *(void *)(v64 + 56);
  uint64_t v28 = (uint64_t *)(*(void *)(v64 + 48) + 16 * v26);
  uint64_t v29 = *v28;
  unint64_t v30 = v28[1];
  *uint64_t v13 = *v28;
  v13[1] = v30;
  uint64_t v31 = v27 + *(void *)(v63 + 72) * v26;
  uint64_t v32 = sub_10000588C(v25);
  sub_1004DB958(v31, (uint64_t)v13 + *(int *)(v32 + 48), type metadata accessor for OwnedBeaconGroup.PairingState);
  (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v13, 0, 1, v32);
  sub_1000361E0(v29, v30);
  while (1)
  {
    sub_10001D608((uint64_t)v13, (uint64_t)v15, v9);
    uint64_t v37 = sub_10000588C(v25);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v37 - 8) + 48))(v15, 1, v37) == 1)
    {
      swift_release();
      return (uint64_t)v68;
    }
    sub_10001CFB8(*(void *)v15, *((void *)v15 + 1));
    sub_1004DBB74((uint64_t)&v15[*(int *)(v37 + 48)], (uint64_t)v2, type metadata accessor for OwnedBeaconGroup.PairingState);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v38 = sub_10000588C(&qword_101643D80);
      uint64_t v39 = (uint64_t)&v2[*(int *)(v38 + 48)];
      sub_100037A24(*(void *)&v2[*(int *)(v38 + 64)], *(void *)&v2[*(int *)(v38 + 64) + 8]);
      uint64_t v40 = *v58;
      unint64_t v65 = v24;
      uint64_t v41 = v15;
      os_log_type_t v42 = v13;
      unint64_t v43 = v25;
      unint64_t v44 = v9;
      unint64_t v45 = v59;
      uint64_t v46 = v62;
      v40(v59, v2, v62);
      sub_10001DAB4(v39, (uint64_t *)&unk_1016477E0);
      id v47 = v61;
      (*v57)(v61, v45, v46);
      uint64_t v48 = v60;
      sub_100DC8CB8(v60, v47);
      int64_t v49 = *v56;
      (*v56)(v48, v46);
      uint64_t v50 = v45;
      uint64_t v9 = v44;
      uint64_t v25 = v43;
      uint64_t v13 = v42;
      uint64_t v15 = v41;
      unint64_t v24 = v65;
      uint64_t result = v49((uint64_t)v50, v46);
      unint64_t v23 = v67;
      if (v67) {
        goto LABEL_6;
      }
    }
    else
    {
      uint64_t result = sub_1004DB9C0((uint64_t)v2, type metadata accessor for OwnedBeaconGroup.PairingState);
      unint64_t v23 = v67;
      if (v67) {
        goto LABEL_6;
      }
    }
LABEL_8:
    int64_t v33 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v33 >= v55)
    {
      unint64_t v35 = v24;
    }
    else
    {
      unint64_t v34 = *(void *)(v54 + 8 * v33);
      if (v34) {
        goto LABEL_11;
      }
      unint64_t v35 = v24 + 1;
      if ((uint64_t)(v24 + 2) < v55)
      {
        unint64_t v34 = *(void *)(v54 + 8 * (v24 + 2));
        if (v34)
        {
          int64_t v33 = v24 + 2;
LABEL_11:
          uint64_t v67 = (v34 - 1) & v34;
          unint64_t v26 = __clz(__rbit64(v34)) + (v33 << 6);
          unint64_t v24 = v33;
          goto LABEL_7;
        }
        unint64_t v35 = v24 + 2;
        if ((uint64_t)(v24 + 3) < v55)
        {
          unint64_t v34 = *(void *)(v54 + 8 * (v24 + 3));
          if (v34)
          {
            int64_t v33 = v24 + 3;
            goto LABEL_11;
          }
          int64_t v33 = v24 + 4;
          unint64_t v35 = v24 + 3;
          if ((uint64_t)(v24 + 4) < v55)
          {
            unint64_t v34 = *(void *)(v54 + 8 * v33);
            if (v34) {
              goto LABEL_11;
            }
            while (v53 != v24)
            {
              unint64_t v34 = *(void *)(v52 + 8 * v24++);
              if (v34)
              {
                int64_t v33 = v24 + 4;
                goto LABEL_11;
              }
            }
            unint64_t v35 = v51;
          }
        }
      }
    }
    uint64_t v36 = sub_10000588C(v25);
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v13, 1, 1, v36);
    uint64_t v67 = 0;
    unint64_t v24 = v35;
  }
  __break(1u);
  return result;
}

uint64_t sub_1004D1A54@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = sub_10000588C((uint64_t *)&unk_1016477E0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C(&qword_10163CB78);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v29 - v18;
  uint64_t v20 = *(void *)(v3 + *(int *)(type metadata accessor for OwnedBeaconGroup(0) + 40));
  if (!*(void *)(v20 + 16))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, 1, 1, v13);
LABEL_7:
    sub_10001DAB4((uint64_t)v12, &qword_10163CB78);
LABEL_8:
    uint64_t v23 = type metadata accessor for MACAddress();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(a3, 1, 1, v23);
  }
  sub_1000361E0(a1, a2);
  uint64_t v21 = sub_1007241A0(a1, a2);
  if (v22)
  {
    sub_1004DB958(*(void *)(v20 + 56) + *(void *)(v14 + 72) * v21, (uint64_t)v12, type metadata accessor for OwnedBeaconGroup.PairingState);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v12, 0, 1, v13);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, 1, 1, v13);
  }
  sub_10001CFB8(a1, a2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1) {
    goto LABEL_7;
  }
  sub_1004DBB74((uint64_t)v12, (uint64_t)v19, type metadata accessor for OwnedBeaconGroup.PairingState);
  sub_1004DBB74((uint64_t)v19, (uint64_t)v17, type metadata accessor for OwnedBeaconGroup.PairingState);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload != 1) {
      goto LABEL_8;
    }
    uint64_t v26 = sub_10000588C(&qword_101643D80);
    uint64_t v27 = (uint64_t)&v17[*(int *)(v26 + 48)];
    sub_100037A24(*(void *)&v17[*(int *)(v26 + 64)], *(void *)&v17[*(int *)(v26 + 64) + 8]);
    sub_10001D608(v27, (uint64_t)v9, (uint64_t *)&unk_1016477E0);
    uint64_t v28 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t))(*(void *)(v28 - 8) + 8))(v17, v28);
  }
  else
  {
    sub_10001D608((uint64_t)v17, (uint64_t)v9, (uint64_t *)&unk_1016477E0);
  }
  return sub_10001D608((uint64_t)v9, a3, (uint64_t *)&unk_1016477E0);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_1004D1DEC(uint64_t a1, unint64_t a2)
{
  unint64_t v10 = a2;
  uint64_t v2 = 0;
  switch(a2 >> 62)
  {
    case 1uLL:
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_10;
      }
      uint64_t v2 = HIDWORD(a1) - (int)a1;
LABEL_6:
      sub_1000361E0(a1, a2);
LABEL_7:
      if (__OFSUB__(20, v2))
      {
        __break(1u);
LABEL_10:
        __break(1u);
LABEL_11:
        __break(1u);
        JUMPOUT(0x1004D1EC4);
      }
      uint64_t v8 = sub_10085E9A4(20 - v2);
      unint64_t v9 = v5;
      sub_10072AD40(&v8, 0);
      uint64_t v6 = v8;
      unint64_t v7 = v9;
      Data.append(_:)();
      sub_10001CFB8(v6, v7);
      return;
    case 2uLL:
      uint64_t v4 = *(void *)(a1 + 16);
      uint64_t v3 = *(void *)(a1 + 24);
      uint64_t v2 = v3 - v4;
      if (!__OFSUB__(v3, v4)) {
        goto LABEL_6;
      }
      goto LABEL_11;
    case 3uLL:
      goto LABEL_7;
    default:
      uint64_t v2 = BYTE6(a2);
      goto LABEL_7;
  }
}

unint64_t sub_1004D1EDC(uint64_t a1)
{
  unint64_t result = *(void *)(*(void *)(v1 + *(int *)(a1 + 40)) + 16);
  if (result >= 0x100)
  {
    unint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

unint64_t sub_1004D1F54(char a1)
{
  unint64_t result = 0xD000000000000010;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6E6F6973726576;
      break;
    case 2:
      unint64_t result = 0x696669746E656469;
      break;
    case 3:
      unint64_t result = 0xD000000000000016;
      break;
    case 4:
      unint64_t result = 1701667182;
      break;
    case 5:
      unint64_t result = 0x657264644163616DLL;
      break;
    case 6:
      unint64_t result = 0x614D6E6F63616562;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1004D2048(char a1)
{
  unint64_t result = 0xD000000000000010;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x6E6F6973726576;
      break;
    case 2:
      unint64_t result = 0x696669746E656469;
      break;
    case 3:
      unint64_t result = 0xD000000000000016;
      break;
    case 4:
      unint64_t result = 1701667182;
      break;
    case 5:
      unint64_t result = 0x657264644163616DLL;
      break;
    case 6:
      unint64_t result = 0x614D6E6F63616562;
      break;
    default:
      return result;
  }
  return result;
}

Swift::Int sub_1004D213C()
{
  return Hasher._finalize()();
}

uint64_t sub_1004D21D0()
{
  return dispatch thunk of Hashable.hash(into:)();
}

Swift::Int sub_1004D2250()
{
  return Hasher._finalize()();
}

uint64_t sub_1004D22E4(unsigned __int8 *a1, char *a2)
{
  return sub_10071DD1C(*a1, *a2);
}

Swift::Int sub_1004D22F0()
{
  return sub_100721604();
}

uint64_t sub_1004D22FC()
{
  return sub_10072031C();
}

Swift::Int sub_1004D2304()
{
  return sub_100721604();
}

unint64_t sub_1004D230C@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1004DCAA0(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_1004D233C@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1004D1F54(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1004D2368()
{
  return sub_1004D2048(*v0);
}

unint64_t sub_1004D2370@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_1004DCAA0(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1004D2398(uint64_t a1)
{
  unint64_t v2 = sub_1004DB804();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004D23D4(uint64_t a1)
{
  unint64_t v2 = sub_1004DB804();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1004D2410(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_101647830);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)v11 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1004DCC5C();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v11[0] = a2;
  v11[1] = a3;
  sub_100037BB4();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_1004D2560(void *a1, int a2)
{
  char v3 = BYTE2(a2);
  uint64_t v5 = sub_10000588C(&qword_101647A60);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_1004DF6CC();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10[15] = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
  if (!v2)
  {
    v10[13] = v3;
    v10[12] = 1;
    sub_1004DEBC0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1004D26D8(uint64_t a1)
{
  unint64_t v2 = sub_1004DCC5C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004D2714(uint64_t a1)
{
  unint64_t v2 = sub_1004DCC5C();

  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_1004D2750@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  unint64_t result = sub_1004DCAEC(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1004D277C(void *a1)
{
  return sub_1004D2410(a1, *v1, v1[1]);
}

uint64_t sub_1004D2798()
{
  uint64_t v0 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v0 - 8);
  static String.Encoding.utf8.getter();
  uint64_t result = String.init(data:encoding:)();
  if (!v2) {
    return Data.hexString.getter();
  }
  return result;
}

unint64_t sub_1004D2834()
{
  unint64_t result = qword_1016476F8;
  if (!qword_1016476F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016476F8);
  }
  return result;
}

uint64_t sub_1004D2888()
{
  return sub_1004DB140(&qword_101647700, (void (*)(uint64_t))type metadata accessor for OwnedBeaconGroup);
}

uint64_t sub_1004D28D0()
{
  if (*v0) {
    return 0x54676E6972696170;
  }
  else {
    return 0x644974726170;
  }
}

uint64_t sub_1004D2910@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1004DEC68(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1004D2938(uint64_t a1)
{
  unint64_t v2 = sub_1004DF6CC();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004D2974(uint64_t a1)
{
  unint64_t v2 = sub_1004DF6CC();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1004D29B0@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = sub_1004DED6C(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = BYTE1(result) & 1;
    a2[2] = BYTE2(result);
  }
  return result;
}

uint64_t sub_1004D29EC(void *a1)
{
  return sub_1004D2560(a1, *v1 | (v1[2] << 16) | (v1[1] << 8));
}

BOOL sub_1004D2A20(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1004DBBDC(*a1 | (a1[2] << 16) | (a1[1] << 8), *a2 | (a2[2] << 16) | (a2[1] << 8));
}

uint64_t sub_1004D2A54@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v59 = a2;
  uint64_t v60 = type metadata accessor for UUID();
  uint64_t v58 = *(void *)(v60 - 8);
  __chkstk_darwin(v60);
  unint64_t v4 = (char *)&v48 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_1016477E0);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  unint64_t v10 = (char *)&v48 - v9;
  uint64_t v11 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  uint64_t v14 = v61;
  dispatch thunk of Decoder.unkeyedContainer()();
  if (!v14)
  {
    unint64_t v56 = v13;
    uint64_t v57 = (uint64_t)v10;
    unint64_t v53 = v8;
    uint64_t v54 = v4;
    NSString v61 = a1;
    uint64_t v55 = v11;
    sub_1000BD078((uint64_t)v63, v64);
    uint64_t v15 = dispatch thunk of UnkeyedDecodingContainer.decode(_:)();
    uint64_t v19 = v15;
    unint64_t v20 = v16;
    if (v15 == 117 && v16 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
      uint64_t v21 = v57;
LABEL_10:
      type metadata accessor for MACAddress();
      sub_1000BD078((uint64_t)v63, v64);
      sub_1004DB140(&qword_10163E568, (void (*)(uint64_t))&type metadata accessor for MACAddress);
      dispatch thunk of UnkeyedDecodingContainer.decodeIfPresent<A>(_:)();
      uint64_t v23 = (uint64_t)v61;
      sub_1000BD078((uint64_t)v63, v64);
      unsigned int v24 = dispatch thunk of UnkeyedDecodingContainer.decodeIfPresent(_:)();
      char v25 = v24;
      int v26 = (v24 >> 8) & 1;
      sub_1000BD078((uint64_t)v63, v64);
      sub_1004DEB6C();
      dispatch thunk of UnkeyedDecodingContainer.decodeIfPresent<A>(_:)();
      char v27 = v62[0];
      uint64_t v28 = (uint64_t)v56;
      uint64_t v29 = (unsigned char *)(v28 + *(int *)(sub_10000588C((uint64_t *)&unk_101647810) + 48));
      sub_10001D608(v21, v28, (uint64_t *)&unk_1016477E0);
      *uint64_t v29 = v25;
      v29[1] = v26;
      v29[2] = v27;
LABEL_11:
      uint64_t v30 = v59;
LABEL_12:
      swift_storeEnumTagMultiPayload();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v63);
      sub_1004DBB74(v28, v30, type metadata accessor for OwnedBeaconGroup.PairingState);
      uint64_t v17 = v23;
      return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v17);
    }
    char v22 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t v21 = v57;
    if (v22)
    {
      swift_bridgeObjectRelease();
      goto LABEL_10;
    }
    if (v19 == 112 && v20 == 0xE100000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      sub_1000BD078((uint64_t)v63, v64);
      sub_1004DB140((unint64_t *)&qword_10163B010, (void (*)(uint64_t))&type metadata accessor for UUID);
      dispatch thunk of UnkeyedDecodingContainer.decode<A>(_:)();
      type metadata accessor for MACAddress();
      sub_1000BD078((uint64_t)v63, v64);
      sub_1004DB140(&qword_10163E568, (void (*)(uint64_t))&type metadata accessor for MACAddress);
      dispatch thunk of UnkeyedDecodingContainer.decodeIfPresent<A>(_:)();
      uint64_t v31 = v58;
      sub_1000BD078((uint64_t)v63, v64);
      sub_100037AA0();
      dispatch thunk of UnkeyedDecodingContainer.decodeIfPresent<A>(_:)();
      uint64_t v58 = v62[0];
      uint64_t v57 = v62[1];
      sub_1000BD078((uint64_t)v63, v64);
      uint64_t v33 = dispatch thunk of UnkeyedDecodingContainer.decodeIfPresent(_:)();
      uint64_t v23 = (uint64_t)v61;
      uint64_t v51 = v33;
      int v52 = v34 & 1;
      sub_1000BD078((uint64_t)v63, v64);
      unsigned int v35 = dispatch thunk of UnkeyedDecodingContainer.decodeIfPresent(_:)();
      char v36 = v35;
      int v50 = (v35 >> 8) & 1;
      sub_1000BD078((uint64_t)v63, v64);
      sub_1004DEB6C();
      dispatch thunk of UnkeyedDecodingContainer.decodeIfPresent<A>(_:)();
      int v49 = LOBYTE(v62[0]);
      uint64_t v37 = (int *)sub_10000588C(&qword_101643D80);
      uint64_t v28 = (uint64_t)v56;
      uint64_t v38 = (uint64_t)&v56[v37[12]];
      uint64_t v39 = (uint64_t *)&v56[v37[16]];
      uint64_t v40 = &v56[v37[20]];
      uint64_t v41 = &v56[v37[24]];
      (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v56, v54, v60);
      sub_10001D608((uint64_t)v53, v38, (uint64_t *)&unk_1016477E0);
      uint64_t v42 = v57;
      *uint64_t v39 = v58;
      v39[1] = v42;
      *(void *)uint64_t v40 = v51;
      v40[8] = v52;
      *uint64_t v41 = v36;
      v41[1] = v50;
      v41[2] = v49;
      goto LABEL_11;
    }
    if (v19 == 108 && v20 == 0xE100000000000000)
    {
      swift_bridgeObjectRelease();
      uint64_t v30 = v59;
      uint64_t v28 = (uint64_t)v56;
      uint64_t v23 = (uint64_t)v61;
      goto LABEL_12;
    }
    char v32 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t v30 = v59;
    uint64_t v28 = (uint64_t)v56;
    uint64_t v23 = (uint64_t)v61;
    if (v32)
    {
      swift_bridgeObjectRelease();
      goto LABEL_12;
    }
    if (qword_101636A90 != -1) {
      swift_once();
    }
    uint64_t v43 = type metadata accessor for Logger();
    sub_100010324(v43, (uint64_t)qword_10170DDC8);
    swift_bridgeObjectRetain();
    unint64_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v44, v45))
    {
      uint64_t v46 = (uint8_t *)swift_slowAlloc();
      v62[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v46 = 136446210;
      swift_bridgeObjectRetain();
      uint64_t v65 = sub_1008FA0F0(v19, v20, v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "Unhandled type code: %{public}s", v46, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    sub_1004DBB20();
    swift_allocError();
    *id v47 = 6;
    swift_willThrow();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v63);
    a1 = v61;
  }
  uint64_t v17 = (uint64_t)a1;
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v17);
}

uint64_t sub_1004D3424(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v68 = type metadata accessor for UUID();
  uint64_t v70 = *(void *)(v68 - 8);
  __chkstk_darwin(v68);
  uint64_t v69 = (char *)&v59 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for MACAddress();
  uint64_t v66 = *(void *)(v5 - 8);
  uint64_t v67 = v5;
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v64 = (char *)&v59 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v59 - v8;
  uint64_t v10 = sub_10000588C((uint64_t *)&unk_1016477E0);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v65 = (uint64_t)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v71 = (uint64_t)&v59 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v59 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v59 - v18;
  uint64_t v20 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  __chkstk_darwin(v20);
  char v22 = (char *)&v59 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of Encoder.unkeyedContainer()();
  sub_1004DB958(v2, (uint64_t)v22, type metadata accessor for OwnedBeaconGroup.PairingState);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      unsigned int v24 = (int *)sub_10000588C(&qword_101643D80);
      uint64_t v25 = (uint64_t)&v22[v24[12]];
      int v26 = (uint64_t *)&v22[v24[16]];
      uint64_t v27 = *v26;
      unint64_t v28 = v26[1];
      uint64_t v29 = &v22[v24[20]];
      uint64_t v61 = *(void *)v29;
      int v30 = v29[8];
      uint64_t v31 = &v22[v24[24]];
      int v32 = *v31;
      int v33 = v31[1];
      int v62 = v30;
      int v63 = v33;
      LODWORD(v31) = v31[2];
      int v59 = v32;
      int v60 = (int)v31;
      unsigned int v35 = v69;
      uint64_t v34 = v70;
      char v36 = v22;
      uint64_t v37 = v68;
      (*(void (**)(char *, char *, uint64_t))(v70 + 32))(v69, v36, v68);
      uint64_t v38 = v71;
      sub_10001D608(v25, v71, (uint64_t *)&unk_1016477E0);
      sub_1000BD078((uint64_t)v74, v75);
      uint64_t v39 = v76;
      dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
      if (v39)
      {
        sub_100037A24(v27, v28);
        sub_10001DAB4(v38, (uint64_t *)&unk_1016477E0);
        (*(void (**)(char *, uint64_t))(v34 + 8))(v35, v37);
      }
      else
      {
        unint64_t v44 = v28;
        uint64_t v76 = v27;
        sub_1000BD078((uint64_t)v74, v75);
        sub_1004DB140(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
        dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
        uint64_t v47 = v71;
        uint64_t v48 = v65;
        sub_100036178(v71, v65);
        uint64_t v49 = v66;
        uint64_t v50 = v67;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v48, 1, v67) == 1)
        {
          sub_10001DAB4(v48, (uint64_t *)&unk_1016477E0);
          uint64_t v51 = v76;
          unint64_t v52 = v44;
        }
        else
        {
          unint64_t v53 = v64;
          (*(void (**)(char *, uint64_t, uint64_t))(v49 + 32))(v64, v48, v50);
          sub_1000BD078((uint64_t)v74, v75);
          sub_1004DB140(&qword_1016477B0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
          dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
          unint64_t v52 = v44;
          (*(void (**)(char *, uint64_t))(v49 + 8))(v53, v50);
          uint64_t v47 = v71;
          uint64_t v51 = v76;
        }
        char v55 = v62;
        char v54 = v63;
        if (v52 >> 60 == 15)
        {
          int v56 = v60;
        }
        else
        {
          uint64_t v72 = v51;
          unint64_t v73 = v52;
          sub_1000BD078((uint64_t)v74, v75);
          sub_100037BB4();
          dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
          int v56 = v60;
          char v55 = v62;
          char v54 = v63;
        }
        if (v55)
        {
          uint64_t v57 = v69;
        }
        else
        {
          sub_1000BD078((uint64_t)v74, v75);
          dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
          uint64_t v57 = v69;
          int v56 = v60;
          char v54 = v63;
        }
        if ((v54 & 1) == 0)
        {
          sub_1000BD078((uint64_t)v74, v75);
          dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
          int v56 = v60;
        }
        if (v56 != 3)
        {
          LOBYTE(v72) = v56;
          sub_1000BD078((uint64_t)v74, v75);
          sub_1004DEBC0();
          dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
        }
        sub_100037A24(v51, v52);
        sub_10001DAB4(v47, (uint64_t *)&unk_1016477E0);
        (*(void (**)(char *, uint64_t))(v70 + 8))(v57, v37);
      }
    }
    else
    {
      sub_1000BD078((uint64_t)v74, v75);
      dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    }
  }
  else
  {
    uint64_t v40 = &v22[*(int *)(sub_10000588C((uint64_t *)&unk_101647810) + 48)];
    int v41 = *v40;
    int v42 = v40[1];
    LODWORD(v71) = v40[2];
    sub_10001D608((uint64_t)v22, (uint64_t)v19, (uint64_t *)&unk_1016477E0);
    sub_1000BD078((uint64_t)v74, v75);
    uint64_t v43 = v76;
    dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
    if (!v43)
    {
      LODWORD(v70) = v42;
      LODWORD(v76) = v41;
      sub_100036178((uint64_t)v19, (uint64_t)v17);
      uint64_t v45 = v66;
      uint64_t v46 = v67;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v17, 1, v67) == 1)
      {
        sub_10001DAB4((uint64_t)v17, (uint64_t *)&unk_1016477E0);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v9, v17, v46);
        sub_1000BD078((uint64_t)v74, v75);
        sub_1004DB140(&qword_1016477B0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
        dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
        (*(void (**)(char *, uint64_t))(v45 + 8))(v9, v46);
      }
      if ((v70 & 1) == 0)
      {
        sub_1000BD078((uint64_t)v74, v75);
        dispatch thunk of UnkeyedEncodingContainer.encode(_:)();
      }
      if (v71 != 3)
      {
        LOBYTE(v72) = v71;
        sub_1000BD078((uint64_t)v74, v75);
        sub_1004DEBC0();
        dispatch thunk of UnkeyedEncodingContainer.encode<A>(_:)();
      }
    }
    sub_10001DAB4((uint64_t)v19, (uint64_t *)&unk_1016477E0);
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v74);
}

uint64_t sub_1004D3DF0()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = &v65[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_1016477E0);
  uint64_t v6 = __chkstk_darwin(v5 - 8);
  uint64_t v8 = &v65[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = &v65[-v10];
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = &v65[-v13];
  __chkstk_darwin(v12);
  uint64_t v16 = &v65[-v15];
  uint64_t v17 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  __chkstk_darwin(v17);
  uint64_t v19 = &v65[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1004DB958(v0, (uint64_t)v19, type metadata accessor for OwnedBeaconGroup.PairingState);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v21 = (int *)sub_10000588C(&qword_101643D80);
      uint64_t v22 = (uint64_t)&v19[v21[12]];
      sub_100037A24(*(void *)&v19[v21[16]], *(void *)&v19[v21[16] + 8]);
      uint64_t v23 = &v19[v21[20]];
      uint64_t v67 = *(void *)v23;
      int v66 = v23[8];
      unsigned int v24 = &v19[v21[24]];
      int v25 = *v24;
      int v68 = v24[1];
      int v69 = v25;
      uint64_t v70 = v24[2];
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v2 + 32))(v4, v19, v1);
      sub_10001D608(v22, (uint64_t)v11, (uint64_t *)&unk_1016477E0);
      uint64_t v72 = 0;
      unint64_t v73 = 0xE000000000000000;
      _StringGuts.grow(_:)(58);
      v26._countAndFlagsBits = 0x28646572696170;
      v26._object = (void *)0xE700000000000000;
      String.append(_:)(v26);
      v27._countAndFlagsBits = UUID.uuidString.getter();
      String.append(_:)(v27);
      swift_bridgeObjectRelease();
      v28._countAndFlagsBits = 8236;
      v28._object = (void *)0xE200000000000000;
      String.append(_:)(v28);
      sub_100036178((uint64_t)v11, (uint64_t)v8);
      uint64_t v29 = type metadata accessor for MACAddress();
      uint64_t v30 = *(void *)(v29 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v30 + 48))(v8, 1, v29) == 1)
      {
        sub_10001DAB4((uint64_t)v8, (uint64_t *)&unk_1016477E0);
        uint64_t v31 = 0;
        int v32 = (void *)0xE000000000000000;
      }
      else
      {
        uint64_t v31 = MACAddress.description.getter();
        int v32 = v42;
        (*(void (**)(unsigned char *, uint64_t))(v30 + 8))(v8, v29);
      }
      uint64_t v43 = 0x6E776F6E6B6E752ELL;
      v44._countAndFlagsBits = v31;
      v44._object = v32;
      String.append(_:)(v44);
      swift_bridgeObjectRelease();
      v45._object = (void *)0x80000001013FEF10;
      v45._countAndFlagsBits = 0xD000000000000010;
      String.append(_:)(v45);
      uint64_t v46 = v67;
      if (v66) {
        uint64_t v46 = 0;
      }
      uint64_t v71 = v46;
      v47._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v47);
      swift_bridgeObjectRelease();
      v48._countAndFlagsBits = 0x3A64497472617020;
      v48._object = (void *)0xE900000000000020;
      String.append(_:)(v48);
      char v49 = v69;
      if (v68) {
        char v49 = -1;
      }
      LOBYTE(v71) = v49;
      v50._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v50);
      swift_bridgeObjectRelease();
      v51._countAndFlagsBits = 0x676E697269617020;
      v51._object = (void *)0xEE00203A65707954;
      String.append(_:)(v51);
      unint64_t v52 = (void *)0xE800000000000000;
      switch(v70)
      {
        case 1:
          uint64_t v43 = 0x63697373616C632ELL;
          break;
        case 2:
          uint64_t v43 = 0x72656E45776F6C2ELL;
          unint64_t v52 = (void *)0xEA00000000007967;
          break;
        default:
          break;
      }
      v61._countAndFlagsBits = v43;
      v61._object = v52;
      String.append(_:)(v61);
      swift_bridgeObjectRelease();
      uint64_t v41 = v72;
      sub_10001DAB4((uint64_t)v11, (uint64_t *)&unk_1016477E0);
      (*(void (**)(unsigned char *, uint64_t))(v2 + 8))(v4, v1);
    }
    else
    {
      return 0x64656B636F6CLL;
    }
  }
  else
  {
    int v33 = &v19[*(int *)(sub_10000588C((uint64_t *)&unk_101647810) + 48)];
    char v34 = *v33;
    int v35 = v33[1];
    uint64_t v36 = v33[2];
    sub_10001D608((uint64_t)v19, (uint64_t)v16, (uint64_t *)&unk_1016477E0);
    uint64_t v72 = 0;
    unint64_t v73 = 0xE000000000000000;
    _StringGuts.grow(_:)(39);
    swift_bridgeObjectRelease();
    uint64_t v72 = 0x6465726961706E75;
    unint64_t v73 = 0xE900000000000028;
    sub_100036178((uint64_t)v16, (uint64_t)v14);
    uint64_t v37 = type metadata accessor for MACAddress();
    uint64_t v38 = *(void *)(v37 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v38 + 48))(v14, 1, v37) == 1)
    {
      sub_10001DAB4((uint64_t)v14, (uint64_t *)&unk_1016477E0);
      uint64_t v39 = 0;
      uint64_t v40 = (void *)0xE000000000000000;
    }
    else
    {
      uint64_t v39 = MACAddress.description.getter();
      uint64_t v40 = v53;
      (*(void (**)(unsigned char *, uint64_t))(v38 + 8))(v14, v37);
    }
    uint64_t v54 = 0x6E776F6E6B6E752ELL;
    v55._countAndFlagsBits = v39;
    v55._object = v40;
    String.append(_:)(v55);
    swift_bridgeObjectRelease();
    v56._countAndFlagsBits = 0x3A64497472617020;
    v56._object = (void *)0xE900000000000020;
    String.append(_:)(v56);
    if (v35) {
      char v57 = -1;
    }
    else {
      char v57 = v34;
    }
    LOBYTE(v71) = v57;
    v58._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v58);
    swift_bridgeObjectRelease();
    v59._countAndFlagsBits = 0x676E697269617020;
    v59._object = (void *)0xEE00203A65707954;
    String.append(_:)(v59);
    int v60 = (void *)0xE800000000000000;
    switch(v36)
    {
      case 1:
        uint64_t v54 = 0x63697373616C632ELL;
        break;
      case 2:
        uint64_t v54 = 0x72656E45776F6C2ELL;
        int v60 = (void *)0xEA00000000007967;
        break;
      default:
        break;
    }
    v62._countAndFlagsBits = v54;
    v62._object = v60;
    String.append(_:)(v62);
    swift_bridgeObjectRelease();
    v63._countAndFlagsBits = 41;
    v63._object = (void *)0xE100000000000000;
    String.append(_:)(v63);
    uint64_t v41 = v72;
    sub_10001DAB4((uint64_t)v16, (uint64_t *)&unk_1016477E0);
  }
  return v41;
}

uint64_t sub_1004D4598(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_1016479E8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v11[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_1004DEC14();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v9 = *((unsigned char *)v3 + 8);
  uint64_t v12 = *v3;
  char v13 = v9;
  v11[15] = 0;
  sub_1004DBA20();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    type metadata accessor for OwnedBeaconGroup.VersionedGroupMACAddress(0);
    v11[14] = 1;
    type metadata accessor for MACAddress();
    sub_1004DB140(&qword_1016477B0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1004D4770@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v26 = type metadata accessor for MACAddress();
  uint64_t v24 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v27 = sub_10000588C(&qword_101647A48);
  uint64_t v25 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for OwnedBeaconGroup.VersionedGroupMACAddress(0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1004DEC14();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    uint64_t v21 = v8;
    uint64_t v22 = v5;
    uint64_t v11 = v10;
    uint64_t v13 = v25;
    uint64_t v12 = v26;
    char v31 = 0;
    sub_1004DB858();
    uint64_t v14 = v27;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    char v15 = v29;
    uint64_t v16 = (uint64_t)v11;
    *(void *)uint64_t v11 = v28;
    v11[8] = v15;
    char v30 = 1;
    sub_1004DB140(&qword_10163E568, (void (*)(uint64_t))&type metadata accessor for MACAddress);
    uint64_t v17 = v22;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v7, v14);
    uint64_t v18 = v23;
    (*(void (**)(uint64_t, char *, uint64_t))(v24 + 32))(v16 + *(int *)(v21 + 20), v17, v12);
    sub_1004DBB74(v16, v18, type metadata accessor for OwnedBeaconGroup.VersionedGroupMACAddress);
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
}

uint64_t sub_1004D4A94@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1004D2A54(a1, a2);
}

uint64_t sub_1004D4AAC(void *a1)
{
  return sub_1004D3424(a1);
}

uint64_t sub_1004D4AC8()
{
  if (*v0) {
    return 0x657264644163616DLL;
  }
  else {
    return 0x6E6F6973726576;
  }
}

uint64_t sub_1004D4B08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1004DEF30(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1004D4B30(uint64_t a1)
{
  unint64_t v2 = sub_1004DEC14();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004D4B6C(uint64_t a1)
{
  unint64_t v2 = sub_1004DEC14();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1004D4BA8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1004D4770(a1, a2);
}

uint64_t sub_1004D4BC0(void *a1)
{
  return sub_1004D4598(a1);
}

uint64_t sub_1004D4BD8(uint64_t a1, uint64_t a2)
{
  char v2 = *(unsigned char *)(a2 + 8);
  if (*(unsigned char *)(a1 + 8) == 1)
  {
    if ((*(unsigned char *)(a2 + 8) & 1) == 0) {
      return 0;
    }
  }
  else
  {
    if (*(void *)a1 != *(void *)a2) {
      char v2 = 1;
    }
    if (v2) {
      return 0;
    }
  }
  return static MACAddress.== infix(_:_:)();
}

uint64_t sub_1004D4C18(void *a1, uint64_t a2, int a3)
{
  int v21 = a3;
  uint64_t v18 = a2;
  uint64_t v4 = sub_10000588C(&qword_101647A30);
  uint64_t v19 = *(void *)(v4 - 8);
  uint64_t v20 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000588C(&qword_101647A38);
  uint64_t v7 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C(&qword_101647A40);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v16 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1004DF5D0();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  if (v21)
  {
    char v22 = 0;
    sub_1004DF678();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v17);
  }
  else
  {
    char v23 = 1;
    sub_1004DF624();
    KeyedEncodingContainer.nestedContainer<A>(keyedBy:forKey:)();
    uint64_t v14 = v20;
    KeyedEncodingContainer.encode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v14);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t sub_1004D4F00()
{
  if (*v0) {
    return 0x656E6F6973726576;
  }
  else {
    return 0x79636167656CLL;
  }
}

uint64_t sub_1004D4F3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1004DF030(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1004D4F64(uint64_t a1)
{
  unint64_t v2 = sub_1004DF5D0();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004D4FA0(uint64_t a1)
{
  unint64_t v2 = sub_1004DF5D0();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1004D4FDC(uint64_t a1)
{
  unint64_t v2 = sub_1004DF678();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004D5018(uint64_t a1)
{
  unint64_t v2 = sub_1004DF678();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1004D5054()
{
  return 0x6E6F6973726576;
}

uint64_t sub_1004D506C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1004D5104(uint64_t a1)
{
  unint64_t v2 = sub_1004DF624();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1004D5140(uint64_t a1)
{
  unint64_t v2 = sub_1004DF624();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1004D517C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1004DF128(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(unsigned char *)(a2 + 8) = v5 & 1;
  }
  return result;
}

uint64_t sub_1004D51B0(void *a1)
{
  return sub_1004D4C18(a1, *(void *)v1, *(unsigned __int8 *)(v1 + 8));
}

Swift::Int sub_1004D51D0()
{
  Swift::UInt v1 = *(void *)v0;
  char v2 = *(unsigned char *)(v0 + 8);
  Hasher.init(_seed:)();
  Swift::UInt v3 = 0;
  if ((v2 & 1) == 0)
  {
    Hasher._combine(_:)(1uLL);
    Swift::UInt v3 = v1;
  }
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void sub_1004D5230()
{
  if (*(unsigned char *)(v0 + 8))
  {
    Swift::UInt v1 = 0;
  }
  else
  {
    Swift::UInt v1 = *(void *)v0;
    Hasher._combine(_:)(1uLL);
  }
  Hasher._combine(_:)(v1);
}

Swift::Int sub_1004D5278()
{
  Swift::UInt v1 = *(void *)v0;
  char v2 = *(unsigned char *)(v0 + 8);
  Hasher.init(_seed:)();
  if (v2) {
    Swift::UInt v1 = 0;
  }
  else {
    Hasher._combine(_:)(1uLL);
  }
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t sub_1004D52D8()
{
  if (*(unsigned char *)(v0 + 8)) {
    return 0x79636167656C2ELL;
  }
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 41;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  return 0x6E6F69737265762ELL;
}

BOOL sub_1004D5384(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 8) == 1) {
    return (*(unsigned char *)(a2 + 8) & 1) != 0;
  }
  if (*(unsigned char *)(a2 + 8)) {
    return 0;
  }
  return *(void *)a1 == *(void *)a2;
}

void sub_1004D53C0()
{
  uint64_t v0 = type metadata accessor for URL();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001E384(v2, qword_10170DF88);
  sub_100010324(v0, (uint64_t)qword_10170DF88);
  type metadata accessor for BeaconStore(0);
  sub_100A9DB34((uint64_t)v4);
  URL.appendingPathComponent(_:isDirectory:)();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t sub_1004D54EC(id *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for OwnedBeaconGroup.VersionedGroupMACAddress(0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_log_type_t.debug.getter();
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_101342130;
  id v8 = *a1;
  id v9 = [v8 description];
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v12 = v11;

  *(void *)(v7 + 56) = &type metadata for String;
  *(void *)(v7 + 64) = sub_10000B4CC();
  *(void *)(v7 + 32) = v10;
  *(void *)(v7 + 40) = v12;
  sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
  uint64_t v13 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();

  id v14 = [v8 encryptedValues];
  uint64_t ObjectType = swift_getObjectType();
  int v16 = *(unsigned __int8 *)(v2 + 24);
  v58[4] = ObjectType;
  if (v16 != 1)
  {
    uint64_t v22 = *(void *)(v2 + 16);
    if (v22 != 1)
    {
      if (qword_101636A90 != -1) {
        swift_once();
      }
      uint64_t v34 = type metadata accessor for Logger();
      sub_100010324(v34, (uint64_t)qword_10170DDC8);
      int v35 = Logger.logObject.getter();
      os_log_type_t v36 = static os_log_type_t.fault.getter();
      if (os_log_type_enabled(v35, v36))
      {
        uint64_t v37 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v37 = 134217984;
        uint64_t v59 = v22;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v35, v36, "Unexpected OwnedBeaconGroup version: %ld!", v37, 0xCu);
        swift_slowDealloc();
      }

      goto LABEL_17;
    }
    uint64_t v23 = v2 + *(int *)(type metadata accessor for OwnedBeaconGroup(0) + 28);
    uint64_t v24 = &v6[*(int *)(v4 + 20)];
    uint64_t v25 = type metadata accessor for MACAddress();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v25 - 8) + 16))(v24, v23, v25);
    *(void *)uint64_t v6 = 1;
    v6[8] = 0;
    uint64_t v26 = sub_1004D5D74();
    unint64_t v28 = v27;
    sub_1004DB9C0((uint64_t)v6, type metadata accessor for OwnedBeaconGroup.VersionedGroupMACAddress);
    CKRecordKeyValueSetting.subscript.getter();
    uint64_t v29 = v59;
    unint64_t v30 = v60;
    sub_1000361E0(v26, v28);
    if (v30 >> 60 == 15)
    {
      sub_100037A24(v29, v30);
      sub_100037A24(v26, v28);
    }
    else
    {
      sub_100037A38(v29, v30);
      char v38 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v29, v30, v26, v28);
      sub_10001CFB8(v26, v28);
      sub_100037A24(v29, v30);
      sub_100037A24(v29, v30);
      if (v38)
      {
LABEL_16:
        sub_10001CFB8(v26, v28);
        goto LABEL_17;
      }
    }
    Swift::String v61 = &type metadata for Data;
    Swift::String v62 = &protocol witness table for Data;
    uint64_t v59 = v26;
    unint64_t v60 = v28;
    sub_1000361E0(v26, v28);
    CKRecordKeyValueSetting.subscript.setter();
    goto LABEL_16;
  }
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v17 = v59;
  unint64_t v18 = v60;
  type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v19 = MACAddress.dataRepresentation.getter();
  unint64_t v21 = v20;
  if (v18 >> 60 == 15)
  {
    sub_100037A24(v17, v18);
    sub_100037A24(v19, v21);
  }
  else
  {
    sub_100037A38(v17, v18);
    char v31 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v17, v18, v19, v21);
    sub_10001CFB8(v19, v21);
    sub_100037A24(v17, v18);
    sub_100037A24(v17, v18);
    if (v31) {
      goto LABEL_17;
    }
  }
  uint64_t v32 = MACAddress.dataRepresentation.getter();
  Swift::String v61 = &type metadata for Data;
  Swift::String v62 = &protocol witness table for Data;
  uint64_t v59 = v32;
  unint64_t v60 = v33;
  CKRecordKeyValueSetting.subscript.setter();
LABEL_17:
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v39 = v59;
  unint64_t v40 = v60;
  uint64_t v41 = (int *)type metadata accessor for OwnedBeaconGroup(0);
  int v42 = (uint64_t *)(v2 + v41[9]);
  uint64_t v44 = *v42;
  unint64_t v43 = v42[1];
  if (!v40) {
    goto LABEL_22;
  }
  if (v39 != v44 || v40 != v43)
  {
    char v45 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v45) {
      goto LABEL_23;
    }
LABEL_22:
    Swift::String v61 = &type metadata for String;
    Swift::String v62 = &protocol witness table for String;
    uint64_t v59 = v44;
    unint64_t v60 = v43;
    swift_bridgeObjectRetain();
    CKRecordKeyValueSetting.subscript.setter();
    goto LABEL_23;
  }
  swift_bridgeObjectRelease();
LABEL_23:
  CKRecordKeyValueSetting.subscript.getter();
  int v46 = *(unsigned __int8 *)(v2 + v41[8]);
  if v59 == 2 || ((v46 ^ v59))
  {
    Swift::String v61 = &type metadata for Bool;
    Swift::String v62 = &protocol witness table for Bool;
    LOBYTE(v59) = v46;
    CKRecordKeyValueSetting.subscript.setter();
  }
  v58[3] = v14;
  CKRecordKeyValueSetting.subscript.getter();
  uint64_t v48 = v59;
  unint64_t v47 = v60;
  uint64_t v49 = *(void *)(v2 + v41[10]);
  uint64_t v50 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  sub_1004DB220();
  sub_1004DB274();
  sub_100061B8C();
  sub_1004DB140(&qword_101647740, (void (*)(uint64_t))type metadata accessor for OwnedBeaconGroup.PairingState);
  sub_1004DB140(&qword_101647748, (void (*)(uint64_t))type metadata accessor for OwnedBeaconGroup.PairingState);
  v58[1] = v50;
  long long v58[2] = v49;
  uint64_t v51 = Dictionary<>.dataRepresentation.getter();
  unint64_t v53 = v52;
  if (v47 >> 60 == 15)
  {
    sub_100037A24(v48, v47);
    sub_100037A24(v51, v53);
LABEL_29:
    uint64_t v55 = Dictionary<>.dataRepresentation.getter();
    Swift::String v61 = &type metadata for Data;
    Swift::String v62 = &protocol witness table for Data;
    uint64_t v59 = v55;
    unint64_t v60 = v56;
    CKRecordKeyValueSetting.subscript.setter();
    return swift_unknownObjectRelease();
  }
  sub_100037A38(v48, v47);
  char v54 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v48, v47, v51, v53);
  sub_10001CFB8(v51, v53);
  sub_100037A24(v48, v47);
  sub_100037A24(v48, v47);
  if ((v54 & 1) == 0) {
    goto LABEL_29;
  }
  return swift_unknownObjectRelease();
}

uint64_t sub_1004D5D74()
{
  uint64_t v0 = type metadata accessor for OwnedBeaconGroup.VersionedGroupMACAddress(0);
  __chkstk_darwin(v0);
  type metadata accessor for JSONEncoder();
  swift_allocObject();
  JSONEncoder.init()();
  sub_1004DB140((unint64_t *)&unk_101647750, (void (*)(uint64_t))type metadata accessor for OwnedBeaconGroup.VersionedGroupMACAddress);
  uint64_t v1 = dispatch thunk of JSONEncoder.encode<A>(_:)();
  swift_release();
  return v1;
}

uint64_t sub_1004D5F90(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101647790);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1004DB804();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  long long v14 = *v3;
  char v13 = 0;
  sub_100037BB4();
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (!v2)
  {
    char v9 = *((unsigned char *)v3 + 24);
    *(void *)&long long v14 = *((void *)v3 + 2);
    BYTE8(v14) = v9;
    char v13 = 1;
    sub_1004DBA20();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v10 = type metadata accessor for OwnedBeaconGroup(0);
    LOBYTE(v14) = 2;
    type metadata accessor for UUID();
    sub_1004DB140(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    LOBYTE(v14) = 3;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v14) = 4;
    KeyedEncodingContainer.encode(_:forKey:)();
    LOBYTE(v14) = 5;
    type metadata accessor for MACAddress();
    sub_1004DB140(&qword_1016477B0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    *(void *)&long long v14 = *(void *)((char *)v3 + *(int *)(v10 + 40));
    char v13 = 6;
    sub_10000588C(&qword_101647780);
    sub_1004DBA74();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1004D62D0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v26 = a2;
  uint64_t v27 = type metadata accessor for MACAddress();
  uint64_t v30 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v4 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for UUID();
  uint64_t v28 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = sub_10000588C(&qword_101647760);
  uint64_t v29 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  char v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (int *)type metadata accessor for OwnedBeaconGroup(0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v25 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = a1[3];
  unint64_t v33 = a1;
  sub_10001CD44(a1, v13);
  sub_1004DB804();
  char v31 = v9;
  long long v14 = v34;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v14) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v33);
  }
  char v15 = v7;
  uint64_t v34 = v4;
  uint64_t v16 = (uint64_t)v12;
  uint64_t v18 = v29;
  uint64_t v17 = v30;
  char v36 = 0;
  sub_100037AA0();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  *(_OWORD *)uint64_t v16 = v35;
  char v36 = 1;
  sub_1004DB858();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  char v19 = BYTE8(v35);
  *(void *)(v16 + 16) = v35;
  *(unsigned char *)(v16 + 24) = v19;
  LOBYTE(v35) = 2;
  sub_1004DB140((unint64_t *)&qword_10163B010, (void (*)(uint64_t))&type metadata accessor for UUID);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v28 + 32))(v16 + v10[6], v15, v5);
  LOBYTE(v35) = 3;
  *(unsigned char *)(v16 + v10[8]) = KeyedDecodingContainer.decode(_:forKey:)() & 1;
  LOBYTE(v35) = 4;
  uint64_t v20 = KeyedDecodingContainer.decode(_:forKey:)();
  unint64_t v21 = (uint64_t *)(v16 + v10[9]);
  *unint64_t v21 = v20;
  v21[1] = v22;
  LOBYTE(v35) = 5;
  sub_1004DB140(&qword_10163E568, (void (*)(uint64_t))&type metadata accessor for MACAddress);
  uint64_t v23 = v27;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 32))(v16 + v10[7], v34, v23);
  sub_10000588C(&qword_101647780);
  char v36 = 6;
  sub_1004DB8AC();
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v31, v32);
  *(void *)(v16 + v10[10]) = v35;
  sub_1004DB958(v16, v26, type metadata accessor for OwnedBeaconGroup);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v33);
  return sub_1004DB9C0(v16, type metadata accessor for OwnedBeaconGroup);
}

uint64_t sub_1004D68D4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1004D62D0(a1, a2);
}

uint64_t sub_1004D68EC(void *a1)
{
  return sub_1004D5F90(a1);
}

uint64_t sub_1004D6904()
{
  _StringGuts.grow(_:)(44);
  swift_bridgeObjectRelease();
  uint64_t v1 = type metadata accessor for OwnedBeaconGroup(0);
  type metadata accessor for UUID();
  sub_1004DB140((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 0x3A63616D20;
  v3._object = (void *)0xE500000000000000;
  String.append(_:)(v3);
  type metadata accessor for MACAddress();
  sub_1004DB140((unint64_t *)&qword_101649EE0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0x4D6E6F6361656220;
  v5._object = (void *)0xEB000000003A7061;
  String.append(_:)(v5);
  type metadata accessor for OwnedBeaconGroup.PairingState(0);
  sub_100061B8C();
  swift_bridgeObjectRetain();
  v6._countAndFlagsBits = Dictionary.description.getter();
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 0x3A736E6D6620;
  v7._object = (void *)0xE600000000000000;
  String.append(_:)(v7);
  if (*(unsigned char *)(v0 + *(int *)(v1 + 32))) {
    uint64_t v8 = 1702195828;
  }
  else {
    uint64_t v8 = 0x65736C6166;
  }
  if (*(unsigned char *)(v0 + *(int *)(v1 + 32))) {
    unint64_t v9 = 0xE400000000000000;
  }
  else {
    unint64_t v9 = 0xE500000000000000;
  }
  unint64_t v10 = v9;
  String.append(_:)(*(Swift::String *)&v8);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 0x203A6469647520;
  v11._object = (void *)0xE700000000000000;
  String.append(_:)(v11);
  v12._countAndFlagsBits = MACAddress.udid.getter();
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 62;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  return 979659068;
}

uint64_t sub_1004D6B84()
{
  uint64_t v0 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  Swift::String v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v2);
  Swift::String v6 = (char *)&v14 - v5;
  type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v7 = swift_bridgeObjectRetain();
  uint64_t v8 = sub_10070FB20(v7);
  swift_bridgeObjectRelease();
  uint64_t v9 = v8[2];
  if (v9)
  {
    uint64_t v10 = (uint64_t)v8 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
    uint64_t v11 = *(void *)(v1 + 72);
    swift_retain();
    do
    {
      sub_1004DB958(v10, (uint64_t)v6, type metadata accessor for OwnedBeaconGroup.PairingState);
      sub_1004DB958((uint64_t)v6, (uint64_t)v4, type metadata accessor for OwnedBeaconGroup.PairingState);
      if (swift_getEnumCaseMultiPayload())
      {
        sub_1004DB9C0((uint64_t)v4, type metadata accessor for OwnedBeaconGroup.PairingState);
        sub_1004DB9C0((uint64_t)v6, type metadata accessor for OwnedBeaconGroup.PairingState);
      }
      else
      {
        int v12 = v4[*(int *)(sub_10000588C((uint64_t *)&unk_101647810) + 48) + 2];
        sub_10001DAB4((uint64_t)v4, (uint64_t *)&unk_1016477E0);
        sub_1004DB9C0((uint64_t)v6, type metadata accessor for OwnedBeaconGroup.PairingState);
        if (v12 == 2)
        {
          swift_release_n();
          return 1;
        }
      }
      v10 += v11;
      --v9;
    }
    while (v9);
    swift_release_n();
  }
  else
  {
    swift_release();
  }
  return 0;
}

uint64_t sub_1004D6DA8()
{
  uint64_t v0 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  Swift::String v4 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v2);
  uint64_t v7 = (char *)&v23 - v6;
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v23 - v9;
  __chkstk_darwin(v8);
  int v12 = (char *)&v23 - v11;
  type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v13 = swift_bridgeObjectRetain();
  uint64_t v14 = sub_10070FB20(v13);
  swift_bridgeObjectRelease();
  uint64_t v15 = v14[2];
  if (!v15)
  {
    swift_release();
    return 1;
  }
  uint64_t v16 = (uint64_t)v14 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
  uint64_t v17 = v14;
  uint64_t v18 = *(void *)(v1 + 72);
  uint64_t v23 = v17;
  uint64_t v24 = v10 + 2;
  swift_retain();
  while (1)
  {
    sub_1004DB958(v16, (uint64_t)v12, type metadata accessor for OwnedBeaconGroup.PairingState);
    sub_1004DB958((uint64_t)v12, (uint64_t)v10, type metadata accessor for OwnedBeaconGroup.PairingState);
    if (swift_getEnumCaseMultiPayload())
    {
      sub_1004DB9C0((uint64_t)v10, type metadata accessor for OwnedBeaconGroup.PairingState);
      sub_1004DB958((uint64_t)v12, (uint64_t)v7, type metadata accessor for OwnedBeaconGroup.PairingState);
      goto LABEL_6;
    }
    uint64_t v19 = sub_10000588C((uint64_t *)&unk_101647810);
    int v20 = v24[*(int *)(v19 + 48)];
    sub_10001DAB4((uint64_t)v10, (uint64_t *)&unk_1016477E0);
    sub_1004DB958((uint64_t)v12, (uint64_t)v7, type metadata accessor for OwnedBeaconGroup.PairingState);
    if (v20 == 1) {
      break;
    }
LABEL_6:
    swift_storeEnumTagMultiPayload();
    char v21 = sub_1004DBD54((uint64_t)v7, (unint64_t)v4);
    sub_1004DB9C0((uint64_t)v4, type metadata accessor for OwnedBeaconGroup.PairingState);
    sub_1004DB9C0((uint64_t)v7, type metadata accessor for OwnedBeaconGroup.PairingState);
    sub_1004DB9C0((uint64_t)v12, type metadata accessor for OwnedBeaconGroup.PairingState);
    if (v21) {
      goto LABEL_12;
    }
    v16 += v18;
    if (!--v15)
    {
      swift_release_n();
      return 1;
    }
  }
  sub_1004DB9C0((uint64_t)v7, type metadata accessor for OwnedBeaconGroup.PairingState);
  sub_1004DB9C0((uint64_t)v12, type metadata accessor for OwnedBeaconGroup.PairingState);
LABEL_12:
  swift_release_n();
  return 0;
}

uint64_t sub_1004D70A4()
{
  type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v0 = swift_bridgeObjectRetain();
  uint64_t v1 = sub_1004DB2C8(v0);
  swift_bridgeObjectRelease();
  uint64_t v2 = sub_1004CF958(v1);
  swift_release();
  return v2;
}

uint64_t sub_1004D7118()
{
  uint64_t v86 = type metadata accessor for MACAddress();
  uint64_t v1 = *(void *)(v86 - 8);
  uint64_t v2 = __chkstk_darwin(v86);
  uint64_t v82 = &v71[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v2);
  unint64_t v81 = &v71[-v4];
  uint64_t v94 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  uint64_t v92 = *(void *)(v94 - 8);
  __chkstk_darwin(v94);
  uint64_t v6 = &v71[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = sub_10000588C((uint64_t *)&unk_1016477E0);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  id v85 = &v71[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v8);
  uint64_t v90 = &v71[-v10];
  uint64_t v11 = sub_10000588C((uint64_t *)&unk_10165F410);
  uint64_t v12 = __chkstk_darwin(v11 - 8);
  uint64_t v14 = (uint64_t *)&v71[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v12);
  uint64_t v16 = (uint64_t *)&v71[-v15];
  uint64_t v17 = *(void *)(v0 + *(int *)(type metadata accessor for OwnedBeaconGroup(0) + 40));
  uint64_t v18 = *(void *)(v17 + 64);
  uint64_t v87 = v17 + 64;
  uint64_t v19 = 1 << *(unsigned char *)(v17 + 32);
  uint64_t v20 = -1;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  unint64_t v21 = v20 & v18;
  uint64_t v93 = v6;
  uint64_t v89 = v6 + 2;
  unint64_t v22 = (unint64_t)(v19 + 63) >> 6;
  uint64_t v84 = (unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v1 + 48);
  uint64_t v79 = (void (**)(unsigned char *, unsigned char *, uint64_t))(v1 + 16);
  uint64_t v80 = (void (**)(unint64_t, unsigned char *, uint64_t))(v1 + 32);
  uint64_t v78 = v1;
  uint64_t v76 = v1 + 40;
  unint64_t v77 = (void (**)(unsigned char *, uint64_t))(v1 + 8);
  uint64_t v23 = v17;
  unint64_t v73 = v22 - 1;
  swift_bridgeObjectRetain();
  unint64_t v24 = 0;
  int64_t v91 = v22;
  unint64_t v75 = v22 - 5;
  uint64_t v74 = v23 + 104;
  uint64_t v83 = _swiftEmptyDictionarySingleton;
  uint64_t v25 = (uint64_t *)&unk_1016477D0;
  uint64_t v88 = v23;
  while (1)
  {
    if (v21)
    {
      unint64_t v26 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      unint64_t v95 = v24;
      unint64_t v27 = v26 | (v24 << 6);
      goto LABEL_8;
    }
    int64_t v34 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v34 >= v91)
    {
      unint64_t v36 = v24;
    }
    else
    {
      unint64_t v35 = *(void *)(v87 + 8 * v34);
      if (v35) {
        goto LABEL_12;
      }
      unint64_t v36 = v24 + 1;
      if ((uint64_t)(v24 + 2) < v91)
      {
        unint64_t v35 = *(void *)(v87 + 8 * (v24 + 2));
        if (v35)
        {
          int64_t v34 = v24 + 2;
          goto LABEL_12;
        }
        unint64_t v36 = v24 + 2;
        if ((uint64_t)(v24 + 3) < v91)
        {
          unint64_t v35 = *(void *)(v87 + 8 * (v24 + 3));
          if (v35)
          {
            int64_t v34 = v24 + 3;
LABEL_12:
            unint64_t v21 = (v35 - 1) & v35;
            unint64_t v27 = __clz(__rbit64(v35)) + (v34 << 6);
            unint64_t v95 = v34;
LABEL_8:
            uint64_t v28 = *(void *)(v23 + 56);
            uint64_t v29 = (uint64_t *)(*(void *)(v23 + 48) + 16 * v27);
            uint64_t v30 = *v29;
            unint64_t v31 = v29[1];
            *uint64_t v14 = *v29;
            v14[1] = v31;
            uint64_t v32 = v28 + *(void *)(v92 + 72) * v27;
            uint64_t v33 = sub_10000588C(v25);
            sub_1004DB958(v32, (uint64_t)v14 + *(int *)(v33 + 48), type metadata accessor for OwnedBeaconGroup.PairingState);
            (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v14, 0, 1, v33);
            sub_1000361E0(v30, v31);
            goto LABEL_15;
          }
          int64_t v34 = v24 + 4;
          unint64_t v36 = v24 + 3;
          if ((uint64_t)(v24 + 4) < v91)
          {
            unint64_t v35 = *(void *)(v87 + 8 * v34);
            if (v35) {
              goto LABEL_12;
            }
            while (v75 != v24)
            {
              unint64_t v35 = *(void *)(v74 + 8 * v24++);
              if (v35)
              {
                int64_t v34 = v24 + 4;
                goto LABEL_12;
              }
            }
            unint64_t v36 = v73;
          }
        }
      }
    }
    uint64_t v37 = sub_10000588C(v25);
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56))(v14, 1, 1, v37);
    unint64_t v21 = 0;
    unint64_t v95 = v36;
LABEL_15:
    sub_10001D608((uint64_t)v14, (uint64_t)v16, (uint64_t *)&unk_10165F410);
    char v38 = v25;
    uint64_t v39 = sub_10000588C(v25);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v39 - 8) + 48))(v16, 1, v39) == 1)
    {
      swift_release();
      return (uint64_t)v83;
    }
    uint64_t v40 = *v16;
    unint64_t v41 = v16[1];
    uint64_t v42 = (uint64_t)v93;
    sub_1004DBB74((uint64_t)v16 + *(int *)(v39 + 48), (uint64_t)v93, type metadata accessor for OwnedBeaconGroup.PairingState);
    if (swift_getEnumCaseMultiPayload())
    {
      sub_10001CFB8(v40, v41);
      sub_1004DB9C0(v42, type metadata accessor for OwnedBeaconGroup.PairingState);
      goto LABEL_5;
    }
    uint64_t v43 = sub_10000588C((uint64_t *)&unk_101647810);
    int v44 = v89[*(int *)(v43 + 48)];
    uint64_t v45 = v42;
    int v46 = v90;
    sub_10001D608(v45, (uint64_t)v90, (uint64_t *)&unk_1016477E0);
    if (v44 != 2)
    {
      sub_10001DAB4((uint64_t)v46, (uint64_t *)&unk_1016477E0);
      sub_10001CFB8(v40, v41);
      goto LABEL_21;
    }
    unint64_t v47 = v85;
    sub_100036178((uint64_t)v46, (uint64_t)v85);
    if ((*v84)(v47, 1, v86) == 1)
    {
      sub_10001DAB4((uint64_t)v46, (uint64_t *)&unk_1016477E0);
      sub_10001CFB8(v40, v41);
      sub_10001DAB4((uint64_t)v47, (uint64_t *)&unk_1016477E0);
LABEL_21:
      uint64_t v23 = v88;
      goto LABEL_5;
    }
    uint64_t v48 = v81;
    uint64_t v49 = *v80;
    uint64_t v50 = v47;
    uint64_t v51 = v86;
    (*v80)((unint64_t)v81, v50, v86);
    (*v79)(v82, v48, v51);
    sub_1000361E0(v40, v41);
    unint64_t v52 = v83;
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v96 = v52;
    unint64_t v55 = sub_1007241A0(v40, v41);
    uint64_t v56 = v52[2];
    BOOL v57 = (v54 & 1) == 0;
    uint64_t v58 = v56 + v57;
    if (__OFADD__(v56, v57)) {
      goto LABEL_48;
    }
    if (v52[3] >= v58)
    {
      uint64_t v63 = v86;
      uint64_t v23 = v88;
      if (isUniquelyReferenced_nonNull_native) {
        goto LABEL_34;
      }
      uint64_t v83 = (void *)v55;
      int v72 = v54;
      sub_100E822F4();
      LOBYTE(v54) = v72;
      unint64_t v55 = (unint64_t)v83;
    }
    else
    {
      char v59 = v54;
      sub_100E6DDEC(v58, isUniquelyReferenced_nonNull_native);
      uint64_t v60 = sub_1007241A0(v40, v41);
      int v61 = v54 & 1;
      LOBYTE(v54) = v59;
      int v62 = v59 & 1;
      uint64_t v23 = v88;
      if (v62 != v61) {
        goto LABEL_50;
      }
      unint64_t v55 = v60;
    }
    uint64_t v63 = v86;
LABEL_34:
    uint64_t v64 = v96;
    if (v54)
    {
      uint64_t v65 = v63;
      (*(void (**)(unint64_t, unsigned char *))(v78 + 40))(v96[7] + *(void *)(v78 + 72) * v55, v82);
    }
    else
    {
      v96[(v55 >> 6) + 8] |= 1 << v55;
      int v66 = (uint64_t *)(v64[6] + 16 * v55);
      *int v66 = v40;
      v66[1] = v41;
      v49(v64[7] + *(void *)(v78 + 72) * v55, v82, v63);
      uint64_t v67 = v64[2];
      BOOL v68 = __OFADD__(v67, 1);
      uint64_t v69 = v67 + 1;
      if (v68) {
        goto LABEL_49;
      }
      v64[2] = v69;
      sub_1000361E0(v40, v41);
      uint64_t v65 = v86;
    }
    uint64_t v83 = v96;
    swift_bridgeObjectRelease();
    sub_10001CFB8(v40, v41);
    sub_10001CFB8(v40, v41);
    (*v77)(v81, v65);
    sub_10001DAB4((uint64_t)v90, (uint64_t *)&unk_1016477E0);
LABEL_5:
    uint64_t v25 = v38;
    unint64_t v24 = v95;
  }
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
LABEL_50:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1004D79BC()
{
  long long v53 = xmmword_101348180;
  type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v0 = swift_bridgeObjectRetain();
  uint64_t v1 = sub_1004DB2C8(v0);
  swift_bridgeObjectRelease();
  uint64_t v2 = sub_1004CF958(v1);
  swift_release();
  uint64_t v3 = *(void *)(v2 + 16);
  if (!v3)
  {
LABEL_44:
    swift_bridgeObjectRelease();
    if (qword_101637310 != -1) {
      goto LABEL_56;
    }
    goto LABEL_45;
  }
  swift_bridgeObjectRetain();
  uint64_t v4 = (unint64_t *)(v2 + 40);
  while (2)
  {
    uint64_t v9 = *(v4 - 1);
    unint64_t v10 = *v4;
    uint64_t v51 = v9;
    unint64_t v52 = v10;
    v4 += 2;
    uint64_t v11 = 0;
    switch(v10 >> 62)
    {
      case 1uLL:
        if (__OFSUB__(HIDWORD(v9), v9)) {
          goto LABEL_50;
        }
        uint64_t v11 = HIDWORD(v9) - (int)v9;
LABEL_10:
        sub_1000361E0(v9, v10);
        sub_1000361E0(v9, v10);
LABEL_11:
        uint64_t v14 = 20 - v11;
        if (!__OFSUB__(20, v11))
        {
          if (v14)
          {
            if (v14 < 15)
            {
              if (v14 < 0) {
                goto LABEL_49;
              }
              memset(v49, 0, sizeof(v49));
              unsigned __int8 v50 = 20 - v11;
              bzero(v49, 20 - v11);
              uint64_t v5 = *(void *)v49;
              unint64_t v6 = *(unsigned int *)&v49[8] | ((unint64_t)v49[12] << 32) | ((unint64_t)v49[13] << 40) | ((unint64_t)v50 << 48);
            }
            else
            {
              type metadata accessor for __DataStorage();
              swift_allocObject();
              uint64_t v15 = __DataStorage.init(length:)();
              if ((unint64_t)v14 > 0x7FFFFFFE)
              {
                type metadata accessor for Data.RangeReference();
                uint64_t v5 = swift_allocObject();
                *(void *)(v5 + 16) = 0;
                *(void *)(v5 + 24) = v14;
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                {
                  uint64_t v16 = *(void *)(v5 + 16);
                  uint64_t v47 = *(void *)(v5 + 24);
                  if (__DataStorage._bytes.getter() && __OFSUB__(v16, __DataStorage._offset.getter())) {
                    goto LABEL_58;
                  }
                  if (__OFSUB__(v47, v16)) {
                    goto LABEL_55;
                  }
                  swift_allocObject();
                  uint64_t v24 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
                  swift_release();
                  uint64_t v15 = v24;
                }
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                {
                  uint64_t v25 = *(void *)(v5 + 16);
                  uint64_t v26 = *(void *)(v5 + 24);
                  uint64_t v27 = swift_allocObject();
                  *(void *)(v27 + 16) = v25;
                  *(void *)(v27 + 24) = v26;
                  swift_release();
                  uint64_t v5 = v27;
                }
                uint64_t v48 = v4;
                uint64_t v28 = *(void *)(v5 + 16);
                uint64_t v29 = *(void *)(v5 + 24);
                uint64_t v30 = __DataStorage._bytes.getter();
                if (!v30) {
                  goto LABEL_60;
                }
                uint64_t v31 = v30;
                uint64_t v32 = __DataStorage._offset.getter();
                uint64_t v33 = v28 - v32;
                if (__OFSUB__(v28, v32)) {
                  goto LABEL_53;
                }
                BOOL v34 = __OFSUB__(v29, v28);
                int64_t v35 = v29 - v28;
                if (v34) {
                  goto LABEL_54;
                }
                uint64_t v36 = __DataStorage._length.getter();
                if (v36 >= v35) {
                  size_t v37 = v35;
                }
                else {
                  size_t v37 = v36;
                }
                bzero((void *)(v31 + v33), v37);
                unint64_t v6 = v15 | 0x8000000000000000;
                uint64_t v4 = v48;
              }
              else
              {
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
                {
                  if (__DataStorage._bytes.getter() && __OFSUB__(0, __DataStorage._offset.getter()))
                  {
                    __break(1u);
LABEL_58:
                    __break(1u);
LABEL_59:
                    __break(1u);
LABEL_60:
                    __break(1u);
                  }
                  swift_allocObject();
                  uint64_t v17 = __DataStorage.init(bytes:length:copy:deallocator:offset:)();
                  swift_release();
                  uint64_t v15 = v17;
                }
                uint64_t v18 = __DataStorage._bytes.getter();
                if (!v18) {
                  goto LABEL_59;
                }
                uint64_t v19 = v18;
                uint64_t v20 = __DataStorage._offset.getter();
                uint64_t v21 = -v20;
                if (__OFSUB__(0, v20)) {
                  goto LABEL_52;
                }
                uint64_t v22 = __DataStorage._length.getter();
                if (v22 >= v14) {
                  size_t v23 = v14;
                }
                else {
                  size_t v23 = v22;
                }
                bzero((void *)(v19 + v21), v23);
                uint64_t v5 = v14 << 32;
                unint64_t v6 = v15 | 0x4000000000000000;
              }
            }
          }
          else
          {
            uint64_t v5 = 0;
            unint64_t v6 = 0xC000000000000000;
          }
          Data.append(_:)();
          sub_10001CFB8(v5, v6);
          uint64_t v7 = v51;
          unint64_t v8 = v52;
          Data.append(_:)();
          sub_10001CFB8(v7, v8);
          sub_10001CFB8(v9, v10);
          if (!--v3)
          {
            swift_bridgeObjectRelease();
            goto LABEL_44;
          }
          continue;
        }
        __break(1u);
LABEL_49:
        __break(1u);
LABEL_50:
        __break(1u);
LABEL_51:
        __break(1u);
LABEL_52:
        __break(1u);
LABEL_53:
        __break(1u);
LABEL_54:
        __break(1u);
LABEL_55:
        __break(1u);
LABEL_56:
        swift_once();
LABEL_45:
        uint64_t v38 = type metadata accessor for Logger();
        sub_100010324(v38, (uint64_t)qword_10170F068);
        uint64_t v39 = Logger.logObject.getter();
        os_log_type_t v40 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v39, v40))
        {
          uint64_t v41 = swift_slowAlloc();
          uint64_t v51 = swift_slowAlloc();
          *(_DWORD *)uint64_t v41 = 141558275;
          *(void *)uint64_t v49 = 1752392040;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v41 + 12) = 2081;
          swift_beginAccess();
          long long v42 = v53;
          sub_1000361E0(v53, *((unint64_t *)&v53 + 1));
          uint64_t v43 = Data.hexString.getter();
          unint64_t v45 = v44;
          sub_10001CFB8(v42, *((unint64_t *)&v42 + 1));
          sub_1008FA0F0(v43, v45, &v51);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v39, v40, "unpairedSerialNumbersData: %{private,mask.hash}s", (uint8_t *)v41, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }

        swift_beginAccess();
        return v53;
      case 2uLL:
        uint64_t v13 = *(void *)(v9 + 16);
        uint64_t v12 = *(void *)(v9 + 24);
        uint64_t v11 = v12 - v13;
        if (!__OFSUB__(v12, v13)) {
          goto LABEL_10;
        }
        goto LABEL_51;
      case 3uLL:
        goto LABEL_11;
      default:
        uint64_t v11 = BYTE6(v10);
        goto LABEL_11;
    }
  }
}

uint64_t sub_1004D7FFC()
{
  uint64_t v1 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v1 - 8);
  uint64_t v63 = (char *)&v56 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  uint64_t v59 = *(void *)(v3 - 8);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v56 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_10165F410);
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v9 = (int64_t *)((char *)&v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v7);
  uint64_t v11 = (int64_t *)((char *)&v56 - v10);
  uint64_t v12 = *(void *)(v0 + *(int *)(type metadata accessor for OwnedBeaconGroup(0) + 40));
  uint64_t v13 = *(void *)(v12 + 64);
  uint64_t v57 = v12 + 64;
  uint64_t v14 = 1 << *(unsigned char *)(v12 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & v13;
  int64_t v58 = (unint64_t)(v14 + 63) >> 6;
  int64_t v56 = v58 - 1;
  uint64_t v60 = v12;
  swift_bridgeObjectRetain();
  int64_t v64 = 0;
  uint64_t v17 = _swiftEmptyDictionarySingleton;
  int v61 = v11;
  int v62 = v9;
  while (1)
  {
    if (v16)
    {
      unint64_t v20 = __clz(__rbit64(v16));
      uint64_t v21 = (v16 - 1) & v16;
      unint64_t v22 = v20 | (v64 << 6);
LABEL_8:
      uint64_t v23 = *(void *)(v60 + 56);
      uint64_t v24 = (uint64_t *)(*(void *)(v60 + 48) + 16 * v22);
      uint64_t v25 = *v24;
      unint64_t v26 = v24[1];
      uint64_t *v9 = *v24;
      v9[1] = v26;
      uint64_t v27 = v23 + *(void *)(v59 + 72) * v22;
      uint64_t v28 = sub_10000588C((uint64_t *)&unk_1016477D0);
      sub_1004DB958(v27, (uint64_t)v9 + *(int *)(v28 + 48), type metadata accessor for OwnedBeaconGroup.PairingState);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56))(v9, 0, 1, v28);
      sub_1000361E0(v25, v26);
      goto LABEL_27;
    }
    int64_t v29 = v64 + 1;
    if (__OFADD__(v64, 1)) {
      goto LABEL_44;
    }
    if (v29 < v58)
    {
      unint64_t v30 = *(void *)(v57 + 8 * v29);
      if (v30) {
        goto LABEL_12;
      }
      int64_t v31 = v64 + 2;
      ++v64;
      if (v29 + 1 < v58)
      {
        unint64_t v30 = *(void *)(v57 + 8 * v31);
        if (v30) {
          goto LABEL_15;
        }
        int64_t v64 = v29 + 1;
        if (v29 + 2 < v58)
        {
          unint64_t v30 = *(void *)(v57 + 8 * (v29 + 2));
          if (v30)
          {
            v29 += 2;
            goto LABEL_12;
          }
          int64_t v31 = v29 + 3;
          int64_t v64 = v29 + 2;
          if (v29 + 3 < v58) {
            break;
          }
        }
      }
    }
LABEL_26:
    uint64_t v32 = sub_10000588C((uint64_t *)&unk_1016477D0);
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v9, 1, 1, v32);
    uint64_t v21 = 0;
LABEL_27:
    sub_10001D608((uint64_t)v9, (uint64_t)v11, (uint64_t *)&unk_10165F410);
    uint64_t v33 = sub_10000588C((uint64_t *)&unk_1016477D0);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v33 - 8) + 48))(v11, 1, v33) == 1)
    {
      swift_release();
      return (uint64_t)v17;
    }
    unint64_t v66 = v21;
    uint64_t v34 = *v11;
    unint64_t v35 = v11[1];
    sub_1004DBB74((uint64_t)v11 + *(int *)(v33 + 48), (uint64_t)v5, type metadata accessor for OwnedBeaconGroup.PairingState);
    static String.Encoding.utf8.getter();
    uint64_t v36 = String.init(data:encoding:)();
    uint64_t v65 = v34;
    if (!v37) {
      uint64_t v36 = Data.hexString.getter();
    }
    uint64_t v38 = v36;
    uint64_t v39 = v37;
    uint64_t v40 = (uint64_t)v5;
    id v41 = sub_1004D85F8();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v67 = v17;
    unint64_t v44 = sub_100723FF4(v38, v39);
    uint64_t v45 = v17[2];
    BOOL v46 = (v43 & 1) == 0;
    uint64_t v47 = v45 + v46;
    if (__OFADD__(v45, v46))
    {
      __break(1u);
LABEL_43:
      __break(1u);
LABEL_44:
      __break(1u);
      goto LABEL_45;
    }
    char v48 = v43;
    if (v17[3] >= v47)
    {
      if (isUniquelyReferenced_nonNull_native)
      {
        uint64_t v17 = v67;
        if (v43) {
          goto LABEL_4;
        }
      }
      else
      {
        sub_100E82100();
        uint64_t v17 = v67;
        if (v48) {
          goto LABEL_4;
        }
      }
    }
    else
    {
      sub_100E6DA98(v47, isUniquelyReferenced_nonNull_native);
      uint64_t v49 = sub_100723FF4(v38, v39);
      if ((v48 & 1) != (v50 & 1)) {
        goto LABEL_46;
      }
      unint64_t v44 = v49;
      uint64_t v17 = v67;
      if (v48)
      {
LABEL_4:
        uint64_t v18 = v17[7];
        uint64_t v19 = 8 * v44;

        *(void *)(v18 + v19) = v41;
        goto LABEL_5;
      }
    }
    v17[(v44 >> 6) + 8] |= 1 << v44;
    uint64_t v51 = (uint64_t *)(v17[6] + 16 * v44);
    uint64_t *v51 = v38;
    v51[1] = v39;
    *(void *)(v17[7] + 8 * v44) = v41;
    uint64_t v52 = v17[2];
    BOOL v53 = __OFADD__(v52, 1);
    uint64_t v54 = v52 + 1;
    if (v53) {
      goto LABEL_43;
    }
    void v17[2] = v54;
    swift_bridgeObjectRetain();
LABEL_5:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10001CFB8(v65, v35);
    uint64_t v5 = (char *)v40;
    sub_1004DB9C0(v40, type metadata accessor for OwnedBeaconGroup.PairingState);
    uint64_t v11 = v61;
    uint64_t v9 = v62;
    unint64_t v16 = v66;
  }
  unint64_t v30 = *(void *)(v57 + 8 * v31);
  if (v30)
  {
LABEL_15:
    int64_t v29 = v31;
LABEL_12:
    uint64_t v21 = (v30 - 1) & v30;
    unint64_t v22 = __clz(__rbit64(v30)) + (v29 << 6);
    int64_t v64 = v29;
    goto LABEL_8;
  }
  while (1)
  {
    int64_t v29 = v31 + 1;
    if (__OFADD__(v31, 1)) {
      break;
    }
    if (v29 >= v58)
    {
      int64_t v64 = v56;
      goto LABEL_26;
    }
    unint64_t v30 = *(void *)(v57 + 8 * v29);
    ++v31;
    if (v30) {
      goto LABEL_12;
    }
  }
LABEL_45:
  __break(1u);
LABEL_46:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

id sub_1004D85F8()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v66 = *(void *)(v1 - 8);
  uint64_t v67 = v1;
  __chkstk_darwin(v1);
  uint64_t v65 = (char *)&v62 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_10000588C(&qword_101638CF0);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  uint64_t v64 = (uint64_t)&v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v62 - v6;
  uint64_t v8 = sub_10000588C((uint64_t *)&unk_1016477E0);
  uint64_t v9 = __chkstk_darwin(v8 - 8);
  uint64_t v11 = (char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v63 = (uint64_t)&v62 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  unint64_t v16 = (char *)&v62 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v62 - v17;
  uint64_t v19 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v62 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101637188 != -1) {
    swift_once();
  }
  unint64_t v22 = (void *)qword_10170EE68;
  id v23 = [self sharedInstance];
  unsigned int v24 = [v23 isInternalBuild];

  if (!v24
    || (NSString v25 = String._bridgeToObjectiveC()(),
        unsigned __int8 v26 = [v22 BOOLForKey:v25],
        v25,
        (v26 & 1) == 0))
  {
    sub_1004DB958(v0, (uint64_t)v21, type metadata accessor for OwnedBeaconGroup.PairingState);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload == 1)
      {
        unint64_t v30 = (int *)sub_10000588C(&qword_101643D80);
        uint64_t v31 = (uint64_t)&v21[v30[12]];
        sub_100037A24(*(void *)&v21[v30[16]], *(void *)&v21[v30[16] + 8]);
        uint64_t v32 = &v21[v30[20]];
        uint64_t v62 = *(void *)v32;
        char v33 = v32[8];
        uint64_t v34 = &v21[v30[24]];
        unsigned __int8 v35 = *v34;
        int v36 = v34[1];
        uint64_t v37 = v34[2];
        uint64_t v39 = v65;
        uint64_t v38 = v66;
        uint64_t v40 = v67;
        (*(void (**)(char *, char *, uint64_t))(v66 + 32))(v65, v21, v67);
        uint64_t v41 = v63;
        sub_10001D608(v31, v63, (uint64_t *)&unk_1016477E0);
        uint64_t v42 = v64;
        (*(void (**)(uint64_t, char *, uint64_t))(v38 + 16))(v64, v39, v40);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v38 + 56))(v42, 0, 1, v40);
        sub_100036178(v41, (uint64_t)v11);
        uint64_t v43 = type metadata accessor for MACAddress();
        uint64_t v44 = *(void *)(v43 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v11, 1, v43) == 1)
        {
          sub_10001DAB4((uint64_t)v11, (uint64_t *)&unk_1016477E0);
          uint64_t v45 = 0;
          unint64_t v46 = 0xF000000000000000;
          if ((v33 & 1) == 0)
          {
LABEL_12:
            v47.super.super.Class isa = Int64._bridgeToObjectiveC()().super.super.isa;
LABEL_18:
            if (v36) {
              unsigned __int8 v35 = -1;
            }
            uint64_t v58 = qword_101361218[v37];
            sub_10001D4B0(0, (unint64_t *)&unk_101647840);
            id v56 = sub_1004DAE68(1, v64, v45, v46, v47.super.super.isa, v35, v58);
            sub_10001DAB4(v63, (uint64_t *)&unk_1016477E0);
            (*(void (**)(char *, uint64_t))(v66 + 8))(v65, v67);
            return v56;
          }
        }
        else
        {
          uint64_t v45 = MACAddress.data.getter();
          unint64_t v46 = v57;
          (*(void (**)(char *, uint64_t))(v44 + 8))(v11, v43);
          if ((v33 & 1) == 0) {
            goto LABEL_12;
          }
        }
        v47.super.super.Class isa = 0;
        goto LABEL_18;
      }
      return [objc_allocWithZone((Class)SPPairingState) initWithStatus:2 beaconIdentifier:0 macAddress:0 pairingEpoch:0 partId:255 pairingType:-1];
    }
    else
    {
      char v48 = (unsigned __int8 *)&v21[*(int *)(sub_10000588C((uint64_t *)&unk_101647810) + 48)];
      unsigned __int8 v49 = *v48;
      int v50 = v48[1];
      uint64_t v51 = (char)v48[2];
      sub_10001D608((uint64_t)v21, (uint64_t)v18, (uint64_t *)&unk_1016477E0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v66 + 56))(v7, 1, 1, v67);
      sub_100036178((uint64_t)v18, (uint64_t)v16);
      uint64_t v52 = type metadata accessor for MACAddress();
      uint64_t v53 = *(void *)(v52 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v16, 1, v52) == 1)
      {
        sub_10001DAB4((uint64_t)v16, (uint64_t *)&unk_1016477E0);
        uint64_t v54 = 0;
        unint64_t v55 = 0xF000000000000000;
      }
      else
      {
        uint64_t v54 = MACAddress.data.getter();
        unint64_t v55 = v59;
        (*(void (**)(char *, uint64_t))(v53 + 8))(v16, v52);
      }
      if (v50) {
        unsigned __int8 v60 = -1;
      }
      else {
        unsigned __int8 v60 = v49;
      }
      uint64_t v61 = qword_101361218[v51];
      sub_10001D4B0(0, (unint64_t *)&unk_101647840);
      id v56 = sub_1004DAE68(0, (uint64_t)v7, v54, v55, 0, v60, v61);
      sub_10001DAB4((uint64_t)v18, (uint64_t *)&unk_1016477E0);
    }
    return v56;
  }
  id v27 = objc_allocWithZone((Class)SPPairingState);

  return [v27 initWithStatus:2 beaconIdentifier:0 macAddress:0 pairingEpoch:0 partId:255 pairingType:-1];
}

uint64_t sub_1004D8D2C(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = sub_10000588C(&qword_10163CB78);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v22 - v13;
  uint64_t v15 = *(void *)(v2 + *(int *)(type metadata accessor for OwnedBeaconGroup(0) + 40));
  if (!*(void *)(v15 + 16))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
LABEL_7:
    sub_10001DAB4((uint64_t)v7, &qword_10163CB78);
    return 0;
  }
  sub_1000361E0(a1, a2);
  uint64_t v16 = sub_1007241A0(a1, a2);
  if (v17)
  {
    sub_1004DB958(*(void *)(v15 + 56) + *(void *)(v9 + 72) * v16, (uint64_t)v7, type metadata accessor for OwnedBeaconGroup.PairingState);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
  }
  sub_10001CFB8(a1, a2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    goto LABEL_7;
  }
  sub_1004DBB74((uint64_t)v7, (uint64_t)v14, type metadata accessor for OwnedBeaconGroup.PairingState);
  sub_1004DBB74((uint64_t)v14, (uint64_t)v12, type metadata accessor for OwnedBeaconGroup.PairingState);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v20 = sub_10000588C(&qword_101643D80);
    uint64_t v18 = *(void *)&v12[*(int *)(v20 + 64)];
    sub_10001DAB4((uint64_t)&v12[*(int *)(v20 + 48)], (uint64_t *)&unk_1016477E0);
    uint64_t v21 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t))(*(void *)(v21 - 8) + 8))(v12, v21);
    return v18;
  }
  sub_1004DB9C0((uint64_t)v12, type metadata accessor for OwnedBeaconGroup.PairingState);
  return 0;
}

uint64_t sub_1004D9028(uint64_t a1, uint64_t a2, unint64_t a3, unsigned __int8 *a4, uint64_t a5, unint64_t a6, uint64_t a7, char a8)
{
  uint64_t v51 = a7;
  uint64_t v52 = a4;
  uint64_t v14 = sub_10000588C(&qword_10163CB78);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v17 - 8);
  uint64_t v18 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v18 - 8);
  unint64_t v20 = (v19 + 15) & 0xFFFFFFFFFFFFFFF0;
  uint64_t v21 = (char *)&v49 - v20;
  if ((a8 & 1) != 0
    || (sub_1004D1078(a2, a3, (uint64_t)&v49 - v20),
        uint64_t v22 = type metadata accessor for UUID(),
        int v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 48))(v21, 1, v22),
        sub_10001DAB4((uint64_t)v21, &qword_101638CF0),
        v23 == 1))
  {
    unsigned int v24 = (int *)sub_10000588C(&qword_101643D80);
    uint64_t v25 = (uint64_t)&v16[v24[12]];
    unsigned __int8 v26 = (uint64_t *)&v16[v24[16]];
    uint64_t v27 = v24[20];
    uint64_t v49 = a2;
    unint64_t v50 = a3;
    uint64_t v28 = &v16[v27];
    int64_t v29 = &v16[v24[24]];
    uint64_t v30 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v30 - 8) + 16))(v16, a1, v30);
    uint64_t v31 = type metadata accessor for MultipartAccessoryPairingInfo(0);
    uint64_t v32 = v52;
    sub_100036178((uint64_t)&v52[*(int *)(v31 + 24)], v25);
    *unsigned __int8 v26 = a5;
    v26[1] = a6;
    *(void *)uint64_t v28 = v51;
    v28[8] = 0;
    unsigned __int8 v33 = v32[*(int *)(v31 + 28)];
    *(_WORD *)int64_t v29 = *v32;
    v29[2] = v33;
    uint64_t v34 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
    uint64_t v35 = 1;
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56))(v16, 0, 1, v34);
    type metadata accessor for OwnedBeaconGroup(0);
    uint64_t v37 = v49;
    unint64_t v36 = v50;
    sub_1000361E0(v49, v50);
    sub_1000361E0(a5, a6);
    sub_10015D5C4((uint64_t)v16, v37, v36);
  }
  else
  {
    if (qword_101637310 != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    sub_100010324(v38, (uint64_t)qword_10170F068);
    sub_1000361E0(a2, a3);
    sub_1000361E0(a2, a3);
    uint64_t v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = a2;
      uint64_t v42 = swift_slowAlloc();
      uint64_t v43 = swift_slowAlloc();
      *(_DWORD *)uint64_t v42 = 141558275;
      uint64_t v53 = 1752392040;
      uint64_t v54 = v43;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v42 + 12) = 2081;
      sub_1000361E0(v41, a3);
      static String.Encoding.utf8.getter();
      uint64_t v44 = String.init(data:encoding:)();
      if (!v45) {
        uint64_t v44 = Data.hexString.getter();
      }
      uint64_t v46 = v44;
      unint64_t v47 = v45;
      sub_10001CFB8(v41, a3);
      uint64_t v53 = sub_1008FA0F0(v46, v47, &v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10001CFB8(v41, a3);
      sub_10001CFB8(v41, a3);
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "%{private,mask.hash}s is already paired!", (uint8_t *)v42, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10001CFB8(a2, a3);
      sub_10001CFB8(a2, a3);
    }

    return 0;
  }
  return v35;
}

uint64_t sub_1004D950C(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = sub_10000588C(&qword_10163CB78);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v24 - v13;
  uint64_t v15 = *(void *)(v2 + *(int *)(type metadata accessor for OwnedBeaconGroup(0) + 40));
  if (!*(void *)(v15 + 16))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
LABEL_7:
    sub_10001DAB4((uint64_t)v7, &qword_10163CB78);
    return 3;
  }
  sub_1000361E0(a1, a2);
  uint64_t v16 = sub_1007241A0(a1, a2);
  if (v17)
  {
    sub_1004DB958(*(void *)(v15 + 56) + *(void *)(v9 + 72) * v16, (uint64_t)v7, type metadata accessor for OwnedBeaconGroup.PairingState);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v7, 0, 1, v8);
  }
  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, 1, 1, v8);
  }
  sub_10001CFB8(a1, a2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1) {
    goto LABEL_7;
  }
  sub_1004DBB74((uint64_t)v7, (uint64_t)v14, type metadata accessor for OwnedBeaconGroup.PairingState);
  sub_1004DBB74((uint64_t)v14, (uint64_t)v12, type metadata accessor for OwnedBeaconGroup.PairingState);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    uint64_t v18 = v12[*(int *)(sub_10000588C((uint64_t *)&unk_101647810) + 48) + 2];
    sub_10001DAB4((uint64_t)v12, (uint64_t *)&unk_1016477E0);
    return v18;
  }
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v21 = (int *)sub_10000588C(&qword_101643D80);
    uint64_t v22 = (uint64_t)&v12[v21[12]];
    sub_100037A24(*(void *)&v12[v21[16]], *(void *)&v12[v21[16] + 8]);
    uint64_t v18 = v12[v21[24] + 2];
    sub_10001DAB4(v22, (uint64_t *)&unk_1016477E0);
    uint64_t v23 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t))(*(void *)(v23 - 8) + 8))(v12, v23);
    return v18;
  }
  return 3;
}

BOOL sub_1004D9824(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v4 - 8);
  uint64_t v5 = sub_10000588C(&qword_10163CB78);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1004D1078(a1, a2, (uint64_t)v10);
  uint64_t v11 = type metadata accessor for UUID();
  int v12 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48))(v10, 1, v11);
  sub_10001DAB4((uint64_t)v10, &qword_101638CF0);
  if (v12 == 1)
  {
    uint64_t v13 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56))(v7, 0, 1, v13);
    type metadata accessor for OwnedBeaconGroup(0);
    sub_1000361E0(a1, a2);
    sub_10015D5C4((uint64_t)v7, a1, a2);
  }
  else
  {
    if (qword_101637310 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_100010324(v14, (uint64_t)qword_10170F068);
    sub_1000361E0(a1, a2);
    sub_1000361E0(a1, a2);
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 141558275;
      uint64_t v24 = 1752392040;
      uint64_t v25 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v17 + 12) = 2081;
      sub_1000361E0(a1, a2);
      static String.Encoding.utf8.getter();
      uint64_t v19 = String.init(data:encoding:)();
      if (!v20) {
        uint64_t v19 = Data.hexString.getter();
      }
      uint64_t v21 = v19;
      unint64_t v22 = v20;
      sub_10001CFB8(a1, a2);
      uint64_t v24 = sub_1008FA0F0(v21, v22, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10001CFB8(a1, a2);
      sub_10001CFB8(a1, a2);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "%{private,mask.hash}s is already paired!", (uint8_t *)v17, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10001CFB8(a1, a2);
      sub_10001CFB8(a1, a2);
    }
  }
  return v12 == 1;
}

uint64_t sub_1004D9C24()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000588C((uint64_t *)&unk_1016477E0);
  uint64_t v3 = __chkstk_darwin(v2 - 8);
  uint64_t v137 = (uint64_t)&v126 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v3);
  uint64_t v136 = (uint64_t)&v126 - v5;
  uint64_t v147 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  uint64_t v6 = *(void *)(v147 - 8);
  uint64_t v7 = __chkstk_darwin(v147);
  uint64_t v140 = (uint64_t)&v126 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  int v134 = (char *)&v126 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v139 = (uint64_t)&v126 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v133 = (uint64_t)&v126 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v138 = (uint64_t)&v126 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v132 = (uint64_t)&v126 - v18;
  __chkstk_darwin(v17);
  unint64_t v20 = (char *)&v126 - v19;
  uint64_t v21 = sub_10000588C((uint64_t *)&unk_10165F410);
  uint64_t v22 = __chkstk_darwin(v21 - 8);
  uint64_t v24 = (uint64_t *)((char *)&v126 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v22);
  unsigned __int8 v26 = (uint64_t *)((char *)&v126 - v25);
  uint64_t v131 = type metadata accessor for OwnedBeaconGroup(0);
  uint64_t v146 = *(int *)(v131 + 40);
  uint64_t v27 = *(void *)(v0 + v146);
  uint64_t v28 = *(void *)(v27 + 64);
  uint64_t v129 = v27 + 64;
  uint64_t v29 = 1 << *(unsigned char *)(v27 + 32);
  uint64_t v30 = -1;
  if (v29 < 64) {
    uint64_t v30 = ~(-1 << v29);
  }
  unint64_t v148 = v30 & v28;
  unint64_t v31 = (unint64_t)(v29 + 63) >> 6;
  unint64_t v126 = v31 - 1;
  uint64_t v32 = swift_bridgeObjectRetain();
  unint64_t v33 = 0;
  int64_t v135 = v31;
  unint64_t v127 = v31 - 5;
  uint64_t v141 = v32;
  uint64_t v128 = v32 + 104;
  unint64_t v143 = v20;
  uint64_t v144 = v26;
  uint64_t v130 = v6;
  uint64_t v142 = v24;
  while (1)
  {
    if (v148)
    {
      unint64_t v35 = __clz(__rbit64(v148));
      v148 &= v148 - 1;
      unint64_t v145 = v33;
      unint64_t v36 = v35 | (v33 << 6);
      goto LABEL_9;
    }
    int64_t v43 = v33 + 1;
    if (__OFADD__(v33, 1)) {
      break;
    }
    if (v43 >= v135)
    {
      unint64_t v45 = v33;
    }
    else
    {
      unint64_t v44 = *(void *)(v129 + 8 * v43);
      if (v44) {
        goto LABEL_13;
      }
      unint64_t v45 = v33 + 1;
      if ((uint64_t)(v33 + 2) < v135)
      {
        unint64_t v44 = *(void *)(v129 + 8 * (v33 + 2));
        if (v44)
        {
          int64_t v43 = v33 + 2;
          goto LABEL_13;
        }
        unint64_t v45 = v33 + 2;
        if ((uint64_t)(v33 + 3) < v135)
        {
          unint64_t v44 = *(void *)(v129 + 8 * (v33 + 3));
          if (v44)
          {
            int64_t v43 = v33 + 3;
LABEL_13:
            unint64_t v148 = (v44 - 1) & v44;
            unint64_t v36 = __clz(__rbit64(v44)) + (v43 << 6);
            unint64_t v145 = v43;
LABEL_9:
            uint64_t v37 = *(void *)(v141 + 56);
            uint64_t v38 = (uint64_t *)(*(void *)(v141 + 48) + 16 * v36);
            uint64_t v39 = *v38;
            unint64_t v40 = v38[1];
            *uint64_t v24 = *v38;
            v24[1] = v40;
            uint64_t v41 = v37 + *(void *)(v6 + 72) * v36;
            uint64_t v42 = sub_10000588C((uint64_t *)&unk_1016477D0);
            sub_1004DB958(v41, (uint64_t)v24 + *(int *)(v42 + 48), type metadata accessor for OwnedBeaconGroup.PairingState);
            (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v42 - 8) + 56))(v24, 0, 1, v42);
            sub_1000361E0(v39, v40);
            unsigned __int8 v26 = v144;
            goto LABEL_16;
          }
          int64_t v43 = v33 + 4;
          unint64_t v45 = v33 + 3;
          if ((uint64_t)(v33 + 4) < v135)
          {
            unint64_t v44 = *(void *)(v129 + 8 * v43);
            if (v44) {
              goto LABEL_13;
            }
            while (v127 != v33)
            {
              unint64_t v44 = *(void *)(v128 + 8 * v33++);
              if (v44)
              {
                int64_t v43 = v33 + 4;
                goto LABEL_13;
              }
            }
            unint64_t v45 = v126;
          }
        }
      }
    }
    uint64_t v46 = sub_10000588C((uint64_t *)&unk_1016477D0);
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56))(v24, 1, 1, v46);
    unint64_t v148 = 0;
    unint64_t v145 = v45;
LABEL_16:
    sub_10001D608((uint64_t)v24, (uint64_t)v26, (uint64_t *)&unk_10165F410);
    uint64_t v47 = sub_10000588C((uint64_t *)&unk_1016477D0);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v47 - 8) + 48))(v26, 1, v47) == 1) {
      return swift_release();
    }
    uint64_t v49 = *v26;
    unint64_t v48 = v26[1];
    sub_1004DBB74((uint64_t)v26 + *(int *)(v47 + 48), (uint64_t)v20, type metadata accessor for OwnedBeaconGroup.PairingState);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    unint64_t v149 = v48;
    if (!EnumCaseMultiPayload)
    {
      uint64_t v74 = sub_10000588C((uint64_t *)&unk_101647810);
      unint64_t v75 = &v20[*(int *)(v74 + 48)];
      char v76 = *v75;
      char v77 = v75[1];
      char v78 = v75[2];
      uint64_t v79 = v136;
      sub_10001D608((uint64_t)v20, v136, (uint64_t *)&unk_1016477E0);
      uint64_t v80 = v132;
      unint64_t v81 = (char *)(v132 + *(int *)(v74 + 48));
      sub_100036178(v79, v132);
      *unint64_t v81 = v76;
      v81[1] = v77;
      uint64_t v81[2] = v78;
      swift_storeEnumTagMultiPayload();
      sub_1004DBB74(v80, v138, type metadata accessor for OwnedBeaconGroup.PairingState);
      sub_1000361E0(v49, v48);
      uint64_t v82 = v146;
      int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v150 = *(void **)(v1 + v82);
      uint64_t v84 = v150;
      *(void *)(v1 + v82) = 0x8000000000000000;
      unint64_t v86 = sub_1007241A0(v49, v48);
      uint64_t v87 = v84[2];
      BOOL v88 = (v85 & 1) == 0;
      uint64_t v89 = v87 + v88;
      if (__OFADD__(v87, v88)) {
        goto LABEL_66;
      }
      char v90 = v85;
      if (v84[3] >= v89)
      {
        unint64_t v20 = v143;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          sub_100E7EDD8();
        }
        unint64_t v91 = v149;
        uint64_t v94 = v150;
        if ((v90 & 1) == 0) {
          goto LABEL_28;
        }
      }
      else
      {
        sub_100E663C4(v89, isUniquelyReferenced_nonNull_native);
        unint64_t v91 = v149;
        uint64_t v92 = sub_1007241A0(v49, v149);
        unint64_t v20 = v143;
        if ((v90 & 1) != (v93 & 1)) {
          goto LABEL_71;
        }
        unint64_t v86 = v92;
        uint64_t v94 = v150;
        if ((v90 & 1) == 0)
        {
LABEL_28:
          v94[(v86 >> 6) + 8] |= 1 << v86;
          unint64_t v95 = (uint64_t *)(v94[6] + 16 * v86);
          *unint64_t v95 = v49;
          v95[1] = v91;
          sub_1004DBB74(v138, v94[7] + *(void *)(v6 + 72) * v86, type metadata accessor for OwnedBeaconGroup.PairingState);
          uint64_t v96 = v94[2];
          BOOL v97 = __OFADD__(v96, 1);
          uint64_t v98 = v96 + 1;
          if (v97) {
            goto LABEL_68;
          }
          v94[2] = v98;
          sub_1000361E0(v49, v91);
          goto LABEL_45;
        }
      }
      sub_100061690(v138, v94[7] + *(void *)(v6 + 72) * v86);
LABEL_45:
      *(void *)(v1 + v146) = v94;
      swift_bridgeObjectRelease();
      sub_10001CFB8(v49, v91);
      sub_10001CFB8(v49, v91);
      sub_10001DAB4(v136, (uint64_t *)&unk_1016477E0);
      goto LABEL_6;
    }
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v51 = (int *)sub_10000588C(&qword_101643D80);
      uint64_t v52 = (uint64_t)&v20[v51[12]];
      sub_100037A24(*(void *)&v20[v51[16]], *(void *)&v20[v51[16] + 8]);
      uint64_t v53 = &v20[v51[24]];
      LOBYTE(v51) = *v53;
      char v54 = v53[1];
      char v55 = v53[2];
      uint64_t v56 = v137;
      sub_10001D608(v52, v137, (uint64_t *)&unk_1016477E0);
      uint64_t v57 = sub_10000588C((uint64_t *)&unk_101647810);
      uint64_t v58 = v133;
      unint64_t v59 = (unsigned char *)(v133 + *(int *)(v57 + 48));
      sub_100036178(v56, v133);
      *unint64_t v59 = (_BYTE)v51;
      v59[1] = v54;
      v59[2] = v55;
      swift_storeEnumTagMultiPayload();
      sub_1004DBB74(v58, v139, type metadata accessor for OwnedBeaconGroup.PairingState);
      unint64_t v60 = v149;
      sub_1000361E0(v49, v149);
      uint64_t v61 = v146;
      int v62 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v150 = *(void **)(v1 + v61);
      uint64_t v63 = v150;
      *(void *)(v1 + v61) = 0x8000000000000000;
      unint64_t v65 = sub_1007241A0(v49, v60);
      uint64_t v66 = v63[2];
      BOOL v67 = (v64 & 1) == 0;
      uint64_t v68 = v66 + v67;
      if (__OFADD__(v66, v67)) {
        goto LABEL_65;
      }
      char v69 = v64;
      if (v63[3] >= v68)
      {
        unint64_t v20 = v143;
        if ((v62 & 1) == 0) {
          sub_100E7EDD8();
        }
        unint64_t v70 = v149;
        unint64_t v73 = v150;
        if ((v69 & 1) == 0) {
          goto LABEL_39;
        }
      }
      else
      {
        sub_100E663C4(v68, v62);
        unint64_t v70 = v149;
        uint64_t v71 = sub_1007241A0(v49, v149);
        unint64_t v20 = v143;
        if ((v69 & 1) != (v72 & 1)) {
          goto LABEL_71;
        }
        unint64_t v65 = v71;
        unint64_t v73 = v150;
        if ((v69 & 1) == 0)
        {
LABEL_39:
          v73[(v65 >> 6) + 8] |= 1 << v65;
          uint64_t v122 = (uint64_t *)(v73[6] + 16 * v65);
          *uint64_t v122 = v49;
          v122[1] = v70;
          uint64_t v6 = v130;
          sub_1004DBB74(v139, v73[7] + *(void *)(v130 + 72) * v65, type metadata accessor for OwnedBeaconGroup.PairingState);
          uint64_t v123 = v73[2];
          BOOL v97 = __OFADD__(v123, 1);
          uint64_t v124 = v123 + 1;
          if (v97) {
            goto LABEL_70;
          }
          v73[2] = v124;
          sub_1000361E0(v49, v70);
          goto LABEL_5;
        }
      }
      uint64_t v6 = v130;
      sub_100061690(v139, v73[7] + *(void *)(v130 + 72) * v65);
LABEL_5:
      *(void *)(v1 + v146) = v73;
      swift_bridgeObjectRelease();
      sub_10001CFB8(v49, v70);
      sub_10001CFB8(v49, v70);
      sub_10001DAB4(v137, (uint64_t *)&unk_1016477E0);
      uint64_t v34 = type metadata accessor for UUID();
      (*(void (**)(char *, uint64_t))(*(void *)(v34 - 8) + 8))(v20, v34);
      goto LABEL_6;
    }
    uint64_t v99 = sub_10000588C((uint64_t *)&unk_101647810);
    uint64_t v100 = (uint64_t)v134;
    uint64_t v101 = &v134[*(int *)(v99 + 48)];
    uint64_t v102 = v1 + *(int *)(v131 + 28);
    uint64_t v103 = type metadata accessor for MACAddress();
    uint64_t v104 = *(void *)(v103 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v104 + 16))(v100, v102, v103);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v104 + 56))(v100, 0, 1, v103);
    *(_WORD *)uint64_t v101 = 256;
    v101[2] = 3;
    swift_storeEnumTagMultiPayload();
    sub_1004DBB74(v100, v140, type metadata accessor for OwnedBeaconGroup.PairingState);
    unint64_t v105 = v149;
    sub_1000361E0(v49, v149);
    uint64_t v106 = v146;
    int v107 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v150 = *(void **)(v1 + v106);
    uint64_t v108 = v150;
    *(void *)(v1 + v106) = 0x8000000000000000;
    unint64_t v110 = sub_1007241A0(v49, v105);
    uint64_t v111 = v108[2];
    BOOL v112 = (v109 & 1) == 0;
    uint64_t v113 = v111 + v112;
    if (__OFADD__(v111, v112)) {
      goto LABEL_67;
    }
    char v114 = v109;
    if (v108[3] >= v113)
    {
      unint64_t v20 = v143;
      if ((v107 & 1) == 0) {
        sub_100E7EDD8();
      }
      unint64_t v115 = v149;
      uint64_t v118 = v150;
      if ((v114 & 1) == 0) {
        goto LABEL_34;
      }
    }
    else
    {
      sub_100E663C4(v113, v107);
      unint64_t v115 = v149;
      uint64_t v116 = sub_1007241A0(v49, v149);
      unint64_t v20 = v143;
      if ((v114 & 1) != (v117 & 1)) {
        goto LABEL_71;
      }
      unint64_t v110 = v116;
      uint64_t v118 = v150;
      if ((v114 & 1) == 0)
      {
LABEL_34:
        v118[(v110 >> 6) + 8] |= 1 << v110;
        uint64_t v119 = (uint64_t *)(v118[6] + 16 * v110);
        *uint64_t v119 = v49;
        v119[1] = v115;
        sub_1004DBB74(v140, v118[7] + *(void *)(v6 + 72) * v110, type metadata accessor for OwnedBeaconGroup.PairingState);
        uint64_t v120 = v118[2];
        BOOL v97 = __OFADD__(v120, 1);
        uint64_t v121 = v120 + 1;
        if (v97) {
          goto LABEL_69;
        }
        v118[2] = v121;
        sub_1000361E0(v49, v115);
        goto LABEL_50;
      }
    }
    sub_100061690(v140, v118[7] + *(void *)(v6 + 72) * v110);
LABEL_50:
    *(void *)(v1 + v146) = v118;
    swift_bridgeObjectRelease();
    sub_10001CFB8(v49, v115);
    sub_10001CFB8(v49, v115);
LABEL_6:
    uint64_t v24 = v142;
    unsigned __int8 v26 = v144;
    unint64_t v33 = v145;
  }
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
LABEL_69:
  __break(1u);
LABEL_70:
  __break(1u);
LABEL_71:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t sub_1004DA910(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v36 = (uint64_t)v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C((uint64_t *)&unk_101655530);
  __chkstk_darwin(v7 - 8);
  uint64_t v41 = (char *)v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for BeaconObservation();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v43 = (uint64_t)v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v40 = (uint64_t)v35 - v14;
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)v35 - v15;
  uint64_t v17 = _swiftEmptyArrayStorage;
  uint64_t v46 = _swiftEmptyArrayStorage;
  uint64_t v18 = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  if (v18)
  {
    uint64_t v37 = v5;
    uint64_t v38 = v4;
    uint64_t v39 = a1;
    uint64_t v19 = *(unsigned __int8 *)(v10 + 80);
    uint64_t v20 = *(void *)(v10 + 72);
    v35[1] = a2;
    uint64_t v42 = (v19 + 32) & ~v19;
    uint64_t v21 = a2 + v42;
    uint64_t v22 = _swiftEmptyArrayStorage;
    do
    {
      sub_1004DB958(v21, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      sub_1004DCCB0();
      uint64_t v45 = Set.init(minimumCapacity:)();
      sub_100DCDA84(&v44, 37);
      sub_100DCDA84(&v44, 38);
      BOOL v23 = sub_100DC7BFC(v16[*(int *)(v9 + 24)], v45);
      swift_bridgeObjectRelease();
      if (v23)
      {
        uint64_t v24 = v9;
        uint64_t v25 = v10;
        sub_1004DBB74((uint64_t)v16, v43, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1000B77F0(0, v22[2] + 1, 1);
        }
        uint64_t v22 = v46;
        unint64_t v27 = v46[2];
        unint64_t v26 = v46[3];
        if (v27 >= v26 >> 1)
        {
          sub_1000B77F0(v26 > 1, v27 + 1, 1);
          uint64_t v22 = v46;
        }
        uint64_t v22[2] = v27 + 1;
        sub_1004DBB74(v43, (uint64_t)v22 + v42 + v27 * v20, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        uint64_t v10 = v25;
        uint64_t v9 = v24;
      }
      else
      {
        sub_1004DB9C0((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      }
      v21 += v20;
      --v18;
    }
    while (v18);
    uint64_t v17 = v46;
    uint64_t v4 = v38;
    a1 = v39;
    uint64_t v5 = v37;
  }
  uint64_t v28 = (uint64_t)v41;
  swift_bridgeObjectRelease();
  sub_100E4D5E0((uint64_t)v17, v28);
  swift_release();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v28, 1, v9) == 1)
  {
    sub_10001DAB4(v28, (uint64_t *)&unk_101655530);
LABEL_19:
    char v32 = 0;
    uint64_t v33 = 1;
    goto LABEL_20;
  }
  uint64_t v29 = v40;
  sub_1004DBB74(v28, v40, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
  if (*(unsigned char *)(v29 + *(int *)(v9 + 24)) != 37)
  {
    sub_1004DB9C0(v29, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    goto LABEL_19;
  }
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  sub_1010AB72C((uint64_t)v46);
  swift_bridgeObjectRelease();
  uint64_t v30 = v40;
  Date.addingTimeInterval(_:)();
  uint64_t v31 = v36;
  static Date.trustedNow.getter(v36);
  char v32 = static Date.> infix(_:_:)();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v31, v4);
  sub_1004DB9C0(v30, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
  uint64_t v33 = 0;
LABEL_20:
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(a1, v33, 1, v4);
  return v32 & 1;
}

id sub_1004DAE68(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5, unsigned __int8 a6, uint64_t a7)
{
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(a2, 1, v13) != 1)
  {
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(a2, v13);
  }
  if (a4 >> 60 == 15)
  {
    Class v16 = 0;
  }
  else
  {
    Class v16 = Data._bridgeToObjectiveC()().super.isa;
    sub_100037A24(a3, a4);
  }
  id v17 = [objc_allocWithZone((Class)swift_getObjCClassFromMetadata()) initWithStatus:a1 beaconIdentifier:isa macAddress:v16 pairingEpoch:a5 partId:a6 pairingType:a7];

  return v17;
}

uint64_t sub_1004DAFE0(uint64_t a1, unint64_t a2)
{
  return swift_release();
}

uint64_t sub_1004DB0BC(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1004DB140(&qword_101647708, (void (*)(uint64_t))type metadata accessor for OwnedBeaconGroup);
  uint64_t result = sub_1004DB140(&qword_101647710, (void (*)(uint64_t))type metadata accessor for OwnedBeaconGroup);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1004DB140(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1004DB188(uint64_t a1)
{
  uint64_t result = sub_1004DB140((unint64_t *)&unk_101647718, (void (*)(uint64_t))type metadata accessor for OwnedBeaconGroup);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t type metadata accessor for OwnedBeaconGroup.VersionedGroupMACAddress(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_1016478B0);
}

uint64_t type metadata accessor for OwnedBeaconGroup.PairingState(uint64_t a1)
{
  return sub_1000F4EA4(a1, qword_101647958);
}

unint64_t sub_1004DB220()
{
  unint64_t result = qword_101647728;
  if (!qword_101647728)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647728);
  }
  return result;
}

unint64_t sub_1004DB274()
{
  unint64_t result = qword_101647730;
  if (!qword_101647730)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647730);
  }
  return result;
}

uint64_t sub_1004DB2C8(uint64_t isStackAllocationSafe)
{
  uint64_t v2 = isStackAllocationSafe;
  char v3 = *(unsigned char *)(isStackAllocationSafe + 32);
  unint64_t v4 = (unint64_t)((1 << v3) + 63) >> 6;
  size_t v5 = 8 * v4;
  if ((v3 & 0x3Fu) <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0), v5);
    uint64_t v6 = sub_1004DB420((unint64_t *)((char *)&v9 - ((v5 + 15) & 0x3FFFFFFFFFFFFFF0)), v4, v2);
    if (v1) {
      swift_willThrow();
    }
    else {
      return v6;
    }
  }
  else
  {
    uint64_t v7 = (void *)swift_slowAlloc();
    bzero(v7, v5);
    uint64_t v2 = sub_1004DB420((unint64_t *)v7, v4, v2);
    swift_slowDealloc();
  }
  return v2;
}

uint64_t sub_1004DB420(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v36 = a2;
  uint64_t v37 = a1;
  uint64_t v47 = sub_10000588C((uint64_t *)&unk_1016477D0);
  uint64_t v4 = __chkstk_darwin(v47);
  uint64_t v46 = (uint64_t *)((char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v4);
  uint64_t v42 = (uint64_t *)((char *)&v35 - v6);
  uint64_t v7 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  uint64_t v44 = *(void *)(v7 - 8);
  uint64_t v45 = v7;
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v43 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v8);
  uint64_t v41 = (char *)&v35 - v11;
  int64_t v12 = 0;
  unint64_t v48 = (void *)a3;
  uint64_t v13 = *(void *)(a3 + 64);
  uint64_t v38 = 0;
  uint64_t v39 = a3 + 64;
  uint64_t v14 = 1 << *(unsigned char *)(a3 + 32);
  uint64_t v15 = -1;
  if (v14 < 64) {
    uint64_t v15 = ~(-1 << v14);
  }
  unint64_t v16 = v15 & v13;
  int64_t v40 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v17 = (uint64_t)v41;
  uint64_t v18 = v42;
  uint64_t v19 = (uint64_t)v43;
  while (1)
  {
    if (v16)
    {
      uint64_t v49 = (v16 - 1) & v16;
      int64_t v50 = v12;
      unint64_t v20 = __clz(__rbit64(v16)) | (v12 << 6);
      goto LABEL_5;
    }
    int64_t v30 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v30 >= v40) {
      return sub_1002ACF38(v37, v36, v38, v48);
    }
    unint64_t v31 = *(void *)(v39 + 8 * v30);
    int64_t v32 = v12 + 1;
    if (!v31)
    {
      int64_t v32 = v12 + 2;
      if (v12 + 2 >= v40) {
        return sub_1002ACF38(v37, v36, v38, v48);
      }
      unint64_t v31 = *(void *)(v39 + 8 * v32);
      if (!v31)
      {
        int64_t v32 = v12 + 3;
        if (v12 + 3 >= v40) {
          return sub_1002ACF38(v37, v36, v38, v48);
        }
        unint64_t v31 = *(void *)(v39 + 8 * v32);
        if (!v31) {
          break;
        }
      }
    }
LABEL_20:
    uint64_t v49 = (v31 - 1) & v31;
    int64_t v50 = v32;
    unint64_t v20 = __clz(__rbit64(v31)) + (v32 << 6);
LABEL_5:
    uint64_t v21 = (uint64_t *)(v48[6] + 16 * v20);
    uint64_t v23 = *v21;
    unint64_t v22 = v21[1];
    unint64_t v24 = v20;
    sub_1004DB958(v48[7] + *(void *)(v44 + 72) * v20, v17, type metadata accessor for OwnedBeaconGroup.PairingState);
    uint64_t v25 = v47;
    uint64_t v26 = (uint64_t)v18 + *(int *)(v47 + 48);
    *uint64_t v18 = v23;
    v18[1] = v22;
    sub_1004DB958(v17, v26, type metadata accessor for OwnedBeaconGroup.PairingState);
    uint64_t v27 = *(int *)(v25 + 48);
    uint64_t v28 = v46;
    uint64_t v29 = (uint64_t)v46 + v27;
    *uint64_t v46 = v23;
    v28[1] = v22;
    sub_1004DB958(v26, (uint64_t)v28 + v27, type metadata accessor for OwnedBeaconGroup.PairingState);
    sub_1004DB958(v29, v19, type metadata accessor for OwnedBeaconGroup.PairingState);
    LODWORD(v26) = swift_getEnumCaseMultiPayload();
    sub_1000361E0(v23, v22);
    sub_1000361E0(v23, v22);
    sub_1004DB9C0(v19, type metadata accessor for OwnedBeaconGroup.PairingState);
    sub_10001DAB4((uint64_t)v18, (uint64_t *)&unk_1016477D0);
    sub_1004DB9C0(v29, type metadata accessor for OwnedBeaconGroup.PairingState);
    sub_1004DB9C0(v17, type metadata accessor for OwnedBeaconGroup.PairingState);
    uint64_t result = sub_10001CFB8(v23, v22);
    int64_t v12 = v50;
    unint64_t v16 = v49;
    if (!v26)
    {
      *(unint64_t *)((char *)v37 + ((v24 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v24;
      if (__OFADD__(v38++, 1))
      {
        __break(1u);
        return sub_1002ACF38(v37, v36, v38, v48);
      }
    }
  }
  uint64_t v33 = v12 + 4;
  if (v12 + 4 >= v40) {
    return sub_1002ACF38(v37, v36, v38, v48);
  }
  unint64_t v31 = *(void *)(v39 + 8 * v33);
  if (v31)
  {
    int64_t v32 = v12 + 4;
    goto LABEL_20;
  }
  while (1)
  {
    int64_t v32 = v33 + 1;
    if (__OFADD__(v33, 1)) {
      break;
    }
    if (v32 >= v40) {
      return sub_1002ACF38(v37, v36, v38, v48);
    }
    unint64_t v31 = *(void *)(v39 + 8 * v32);
    ++v33;
    if (v31) {
      goto LABEL_20;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

unint64_t sub_1004DB804()
{
  unint64_t result = qword_101647768;
  if (!qword_101647768)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647768);
  }
  return result;
}

unint64_t sub_1004DB858()
{
  unint64_t result = qword_101647778;
  if (!qword_101647778)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647778);
  }
  return result;
}

unint64_t sub_1004DB8AC()
{
  unint64_t result = qword_101647788;
  if (!qword_101647788)
  {
    sub_10000592C(&qword_101647780);
    sub_1004DB220();
    sub_1004DB140(&qword_101647740, (void (*)(uint64_t))type metadata accessor for OwnedBeaconGroup.PairingState);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647788);
  }
  return result;
}

uint64_t sub_1004DB958(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1004DB9C0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_1004DBA20()
{
  unint64_t result = qword_1016477A0;
  if (!qword_1016477A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016477A0);
  }
  return result;
}

unint64_t sub_1004DBA74()
{
  unint64_t result = qword_1016477B8;
  if (!qword_1016477B8)
  {
    sub_10000592C(&qword_101647780);
    sub_1004DB274();
    sub_1004DB140(&qword_101647748, (void (*)(uint64_t))type metadata accessor for OwnedBeaconGroup.PairingState);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016477B8);
  }
  return result;
}

unint64_t sub_1004DBB20()
{
  unint64_t result = qword_1016477F0;
  if (!qword_1016477F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016477F0);
  }
  return result;
}

uint64_t sub_1004DBB74(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

BOOL sub_1004DBBDC(int a1, int a2)
{
  if ((a1 & 0x100) != 0)
  {
    if ((a2 & 0x100) == 0) {
      return 0;
    }
  }
  else if ((a2 & 0x100) != 0 || a1 != a2)
  {
    return 0;
  }
  int v3 = a2 & 0xFF0000;
  if ((a1 & 0xFF0000) != 0x30000) {
    return v3 != 196608 && ((a2 ^ a1) & 0xFF0000) == 0;
  }
  return v3 == 196608;
}

uint64_t sub_1004DBC44(uint64_t a1, uint64_t a2)
{
  if ((_s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(*(void *)a1, *(void *)(a1 + 8), *(void *)a2, *(void *)(a2 + 8)) & 1) == 0)return 0; {
  char v4 = *(unsigned char *)(a2 + 24);
  }
  if (*(unsigned char *)(a1 + 24) == 1)
  {
    if ((*(unsigned char *)(a2 + 24) & 1) == 0) {
      return 0;
    }
  }
  else
  {
    if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
      char v4 = 1;
    }
    if (v4) {
      return 0;
    }
  }
  uint64_t v5 = (int *)type metadata accessor for OwnedBeaconGroup(0);
  if ((static UUID.== infix(_:_:)() & 1) == 0
    || (static MACAddress.== infix(_:_:)() & 1) == 0
    || *(unsigned __int8 *)(a1 + v5[8]) != *(unsigned __int8 *)(a2 + v5[8]))
  {
    return 0;
  }
  uint64_t v6 = v5[9];
  uint64_t v7 = *(void *)(a1 + v6);
  uint64_t v8 = *(void *)(a1 + v6 + 8);
  uint64_t v9 = (void *)(a2 + v6);
  BOOL v10 = v7 == *v9 && v8 == v9[1];
  if (!v10 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0) {
    return 0;
  }
  uint64_t v11 = v5[10];
  uint64_t v12 = *(void *)(a1 + v11);
  uint64_t v13 = *(void *)(a2 + v11);

  return sub_100DF6750(v12, v13);
}

uint64_t sub_1004DBD54(uint64_t a1, unint64_t a2)
{
  unint64_t v125 = a2;
  uint64_t v3 = type metadata accessor for UUID();
  uint64_t v123 = *(void (***)(char *, uint64_t))(v3 - 8);
  uint64_t v124 = v3;
  __chkstk_darwin(v3);
  uint64_t v120 = (char *)&v100 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v118 = type metadata accessor for MACAddress();
  uint64_t v122 = *(void *)(v118 - 8);
  __chkstk_darwin(v118);
  unint64_t v115 = (char *)&v100 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v117 = sub_10000588C(&qword_1016477F8);
  uint64_t v6 = __chkstk_darwin(v117);
  uint64_t v116 = (uint64_t)&v100 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v100 - v8;
  uint64_t v10 = sub_10000588C((uint64_t *)&unk_1016477E0);
  uint64_t v11 = __chkstk_darwin(v10 - 8);
  uint64_t v114 = (uint64_t)&v100 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v121 = (uint64_t)&v100 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v119 = (uint64_t)&v100 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v100 - v18;
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v100 - v20;
  uint64_t v22 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  uint64_t v23 = __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v100 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v100 - v26;
  uint64_t v28 = sub_10000588C((uint64_t *)&unk_101647800);
  uint64_t v29 = __chkstk_darwin(v28 - 8);
  unint64_t v31 = (char *)&v100 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = (uint64_t)&v31[*(int *)(v29 + 56)];
  sub_1004DB958(a1, (uint64_t)v31, type metadata accessor for OwnedBeaconGroup.PairingState);
  sub_1004DB958(v125, v32, type metadata accessor for OwnedBeaconGroup.PairingState);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    unint64_t v125 = (unint64_t)v19;
    sub_1004DB958((uint64_t)v31, (uint64_t)v27, type metadata accessor for OwnedBeaconGroup.PairingState);
    uint64_t v66 = *(int *)(sub_10000588C((uint64_t *)&unk_101647810) + 48);
    int v67 = v27[v66];
    int v68 = v27[v66 + 1];
    int v69 = v27[v66 + 2];
    if (swift_getEnumCaseMultiPayload())
    {
      sub_10001DAB4((uint64_t)v27, (uint64_t *)&unk_1016477E0);
      goto LABEL_14;
    }
    LODWORD(v123) = v68;
    LODWORD(v124) = v67;
    LODWORD(v120) = v69;
    int v72 = *(unsigned __int8 *)(v32 + v66);
    int v73 = *(unsigned __int8 *)(v32 + v66 + 1);
    LODWORD(v121) = *(unsigned __int8 *)(v32 + v66 + 2);
    sub_10001D608(v32, (uint64_t)v21, (uint64_t *)&unk_1016477E0);
    uint64_t v74 = (uint64_t)v9;
    uint64_t v75 = (uint64_t)&v9[*(int *)(v117 + 48)];
    sub_10001D608((uint64_t)v27, (uint64_t)v9, (uint64_t *)&unk_1016477E0);
    sub_100036178((uint64_t)v21, v75);
    char v76 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v122 + 48);
    uint64_t v77 = v118;
    if (v76((uint64_t)v9, 1, v118) == 1)
    {
      sub_10001DAB4((uint64_t)v21, (uint64_t *)&unk_1016477E0);
      int v78 = v76(v75, 1, v77);
      int v79 = v124;
      char v80 = (char)v123;
      if (v78 == 1)
      {
        sub_10001DAB4(v74, (uint64_t *)&unk_1016477E0);
LABEL_29:
        if (v80)
        {
          if (!v73) {
            goto LABEL_23;
          }
        }
        else
        {
          if (v79 == v72) {
            char v88 = v73;
          }
          else {
            char v88 = 1;
          }
          if (v88) {
            goto LABEL_23;
          }
        }
        if (v120 == 3)
        {
          if (v121 == 3) {
            goto LABEL_11;
          }
        }
        else if (v121 != 3 && v120 == v121)
        {
          goto LABEL_11;
        }
LABEL_23:
        sub_1004DB9C0((uint64_t)v31, type metadata accessor for OwnedBeaconGroup.PairingState);
        return 0;
      }
    }
    else
    {
      uint64_t v81 = (uint64_t)v9;
      unint64_t v82 = v125;
      sub_100036178(v81, v125);
      if (v76(v75, 1, v77) != 1)
      {
        uint64_t v119 = v74;
        uint64_t v84 = v122;
        char v85 = v115;
        (*(void (**)(char *, uint64_t, uint64_t))(v122 + 32))(v115, v75, v77);
        sub_1004DB140((unint64_t *)&unk_10166C270, (void (*)(uint64_t))&type metadata accessor for MACAddress);
        char v86 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v87 = *(void (**)(char *, uint64_t))(v84 + 8);
        v87(v85, v77);
        sub_10001DAB4((uint64_t)v21, (uint64_t *)&unk_1016477E0);
        v87((char *)v82, v77);
        sub_10001DAB4(v119, (uint64_t *)&unk_1016477E0);
        int v79 = v124;
        char v80 = (char)v123;
        if ((v86 & 1) == 0) {
          goto LABEL_23;
        }
        goto LABEL_29;
      }
      sub_10001DAB4((uint64_t)v21, (uint64_t *)&unk_1016477E0);
      (*(void (**)(unint64_t, uint64_t))(v122 + 8))(v82, v77);
    }
    sub_10001DAB4(v74, &qword_1016477F8);
    goto LABEL_23;
  }
  if (EnumCaseMultiPayload != 1)
  {
    if (swift_getEnumCaseMultiPayload() == 2)
    {
LABEL_11:
      uint64_t v70 = (uint64_t)v31;
      goto LABEL_12;
    }
LABEL_14:
    sub_10001DAB4((uint64_t)v31, (uint64_t *)&unk_101647800);
    return 0;
  }
  uint64_t v113 = v31;
  sub_1004DB958((uint64_t)v31, (uint64_t)v25, type metadata accessor for OwnedBeaconGroup.PairingState);
  uint64_t v34 = (int *)sub_10000588C(&qword_101643D80);
  uint64_t v35 = v34[12];
  unint64_t v125 = (unint64_t)&v25[v35];
  uint64_t v36 = v34[16];
  unint64_t v37 = *(void *)&v25[v36 + 8];
  uint64_t v112 = *(void *)&v25[v36];
  uint64_t v38 = v34[20];
  uint64_t v110 = *(void *)&v25[v38];
  int v111 = v25[v38 + 8];
  uint64_t v39 = v34[24];
  int v109 = v25[v39];
  int v40 = v25[v39 + 1];
  int v41 = v25[v39 + 2];
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    sub_100037A24(v112, v37);
    sub_10001DAB4(v125, (uint64_t *)&unk_1016477E0);
    v123[1](v25, v124);
    unint64_t v31 = v113;
    goto LABEL_14;
  }
  int v104 = v40;
  int v102 = v41;
  unint64_t v108 = v37;
  uint64_t v42 = v32 + v35;
  uint64_t v43 = *(void *)(v32 + v36);
  unint64_t v44 = *(void *)(v32 + v36 + 8);
  uint64_t v103 = *(void *)(v32 + v38);
  int v107 = *(unsigned __int8 *)(v32 + v38 + 8);
  int v101 = *(unsigned __int8 *)(v32 + v39);
  int v45 = *(unsigned __int8 *)(v32 + v39 + 2);
  int v105 = *(unsigned __int8 *)(v32 + v39 + 1);
  int v106 = v45;
  uint64_t v46 = v123;
  uint64_t v47 = v120;
  uint64_t v48 = v32;
  uint64_t v49 = v124;
  ((void (*)(char *, uint64_t, uint64_t))v123[4])(v120, v48, v124);
  uint64_t v50 = v119;
  sub_10001D608(v125, v119, (uint64_t *)&unk_1016477E0);
  uint64_t v51 = v42;
  uint64_t v52 = v121;
  sub_10001D608(v51, v121, (uint64_t *)&unk_1016477E0);
  char v53 = static UUID.== infix(_:_:)();
  char v54 = (void (**)(char *, uint64_t))v46[1];
  ((void (*)(char *, uint64_t))v54)(v25, v49);
  if (v53)
  {
    uint64_t v123 = v54;
    unint64_t v125 = v44;
    uint64_t v55 = v116;
    uint64_t v56 = v50;
    uint64_t v57 = v116 + *(int *)(v117 + 48);
    sub_100036178(v56, v116);
    sub_100036178(v52, v57);
    uint64_t v58 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v122 + 48);
    uint64_t v59 = v118;
    if (v58(v55, 1, v118) == 1)
    {
      int v60 = v58(v57, 1, v59);
      uint64_t v61 = v121;
      if (v60 == 1)
      {
        sub_10001DAB4(v116, (uint64_t *)&unk_1016477E0);
        unint64_t v62 = v108;
        uint64_t v63 = (uint64_t)v113;
        uint64_t v64 = v43;
        unint64_t v65 = v123;
LABEL_40:
        if (v62 >> 60 == 15)
        {
          sub_10001DAB4(v61, (uint64_t *)&unk_1016477E0);
          sub_10001DAB4(v119, (uint64_t *)&unk_1016477E0);
          ((void (*)(char *, uint64_t))v65)(v120, v124);
          unint64_t v93 = v125;
          uint64_t v94 = v112;
          if (v125 >> 60 == 15)
          {
            sub_100037A24(v112, v62);
LABEL_50:
            if (v111)
            {
              if (!v107) {
                goto LABEL_68;
              }
            }
            else
            {
              char v97 = v107;
              if (v110 != v103) {
                char v97 = 1;
              }
              if (v97) {
                goto LABEL_68;
              }
            }
            if (v104)
            {
              int v98 = v106;
              if (!v105) {
                goto LABEL_68;
              }
            }
            else
            {
              char v99 = v105;
              int v98 = v106;
              if (v109 != v101) {
                char v99 = 1;
              }
              if (v99) {
                goto LABEL_68;
              }
            }
            if (v102 == 3)
            {
              if (v98 != 3) {
                goto LABEL_68;
              }
            }
            else if (v98 == 3 || v102 != v98)
            {
              goto LABEL_68;
            }
            uint64_t v70 = v63;
LABEL_12:
            sub_1004DB9C0(v70, type metadata accessor for OwnedBeaconGroup.PairingState);
            return 1;
          }
          goto LABEL_45;
        }
        unint64_t v93 = v125;
        if (v125 >> 60 == 15)
        {
          uint64_t v94 = v112;
          sub_1000361E0(v112, v62);
          sub_10001DAB4(v61, (uint64_t *)&unk_1016477E0);
          sub_10001DAB4(v119, (uint64_t *)&unk_1016477E0);
          ((void (*)(char *, uint64_t))v65)(v120, v124);
          sub_100037A24(v94, v62);
LABEL_45:
          sub_100037A24(v94, v62);
          sub_100037A24(v64, v93);
          goto LABEL_68;
        }
        sub_100037A38(v64, v125);
        uint64_t v95 = v112;
        sub_100037A38(v112, v62);
        char v96 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v95, v62, v64, v93);
        sub_100037A24(v64, v93);
        sub_100037A24(v64, v93);
        sub_100037A24(v95, v62);
        sub_10001DAB4(v61, (uint64_t *)&unk_1016477E0);
        sub_10001DAB4(v119, (uint64_t *)&unk_1016477E0);
        ((void (*)(char *, uint64_t))v65)(v120, v124);
        sub_100037A24(v95, v62);
        if (v96) {
          goto LABEL_50;
        }
LABEL_68:
        sub_1004DB9C0(v63, type metadata accessor for OwnedBeaconGroup.PairingState);
        return 0;
      }
    }
    else
    {
      uint64_t v83 = v114;
      sub_100036178(v55, v114);
      if (v58(v57, 1, v59) != 1)
      {
        uint64_t v89 = v122;
        char v90 = v115;
        (*(void (**)(char *, uint64_t, uint64_t))(v122 + 32))(v115, v57, v59);
        sub_1004DB140((unint64_t *)&unk_10166C270, (void (*)(uint64_t))&type metadata accessor for MACAddress);
        char v91 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v92 = *(void (**)(char *, uint64_t))(v89 + 8);
        v92(v90, v59);
        v92((char *)v83, v59);
        sub_10001DAB4(v55, (uint64_t *)&unk_1016477E0);
        uint64_t v61 = v121;
        unint64_t v62 = v108;
        uint64_t v63 = (uint64_t)v113;
        uint64_t v64 = v43;
        unint64_t v65 = v123;
        if (v91) {
          goto LABEL_40;
        }
LABEL_27:
        sub_100037A24(v64, v125);
        sub_100037A24(v112, v62);
        sub_10001DAB4(v61, (uint64_t *)&unk_1016477E0);
        sub_10001DAB4(v119, (uint64_t *)&unk_1016477E0);
        ((void (*)(char *, uint64_t))v65)(v120, v124);
        goto LABEL_68;
      }
      (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v83, v59);
      uint64_t v61 = v121;
    }
    sub_10001DAB4(v116, &qword_1016477F8);
    unint64_t v62 = v108;
    uint64_t v63 = (uint64_t)v113;
    uint64_t v64 = v43;
    unint64_t v65 = v123;
    goto LABEL_27;
  }
  sub_100037A24(v43, v44);
  sub_100037A24(v112, v108);
  sub_10001DAB4(v52, (uint64_t *)&unk_1016477E0);
  sub_10001DAB4(v50, (uint64_t *)&unk_1016477E0);
  ((void (*)(char *, uint64_t))v54)(v47, v49);
  sub_1004DB9C0((uint64_t)v113, type metadata accessor for OwnedBeaconGroup.PairingState);
  return 0;
}

unint64_t sub_1004DCAA0(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1015A1920, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 7) {
    return 7;
  }
  else {
    return v3;
  }
}

void *sub_1004DCAEC(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_101647820);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10001CD44(a1, a1[3]);
  sub_1004DCC5C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  else
  {
    sub_100037AA0();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v7 = v9;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  return v7;
}

unint64_t sub_1004DCC5C()
{
  unint64_t result = qword_101647828;
  if (!qword_101647828)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647828);
  }
  return result;
}

unint64_t sub_1004DCCB0()
{
  unint64_t result = qword_101647850;
  if (!qword_101647850)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_101647850);
  }
  return result;
}

ValueMetadata *type metadata accessor for OwnedBeaconGroup.SerialNumber.CodingKeys()
{
  return &type metadata for OwnedBeaconGroup.SerialNumber.CodingKeys;
}

ValueMetadata *type metadata accessor for OwnedBeaconGroup.BeaconGroupConversionError()
{
  return &type metadata for OwnedBeaconGroup.BeaconGroupConversionError;
}

uint64_t initializeBufferWithCopyOfBuffer for OwnedBeaconGroup.PairingMetadata(uint64_t result, __int16 *a2)
{
  __int16 v2 = *a2;
  *(unsigned char *)(result + 2) = *((unsigned char *)a2 + 2);
  *(_WORD *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for OwnedBeaconGroup.PairingMetadata(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD)
  {
    if ((a2 + 33554179) >> 24)
    {
      int v2 = *((unsigned __int8 *)a1 + 3);
      if (*((unsigned char *)a1 + 3)) {
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776963;
      }
    }
    else
    {
      int v2 = *(unsigned __int16 *)((char *)a1 + 3);
      if (*(unsigned __int16 *)((char *)a1 + 3)) {
        return (*a1 | (*((unsigned __int8 *)a1 + 2) << 16) | (v2 << 24)) - 16776963;
      }
    }
  }
  if (*((unsigned __int8 *)a1 + 2) <= 3u) {
    int v4 = 3;
  }
  else {
    int v4 = *((unsigned __int8 *)a1 + 2);
  }
  int v5 = v4 - 4;
  if (*((unsigned __int8 *)a1 + 2) < 3u) {
    int v6 = -1;
  }
  else {
    int v6 = v5;
  }
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for OwnedBeaconGroup.PairingMetadata(uint64_t result, unsigned int a2, unsigned int a3)
{
  if ((a3 + 33554179) >> 24) {
    int v3 = 1;
  }
  else {
    int v3 = 2;
  }
  if (a3 <= 0xFC) {
    int v3 = 0;
  }
  if (a2 > 0xFC)
  {
    *(_WORD *)unint64_t result = a2 - 253;
    *(unsigned char *)(result + 2) = (a2 - 253) >> 16;
    if (v3)
    {
      unsigned int v4 = ((a2 - 253) >> 24) + 1;
      if (v3 == 2) {
        *(_WORD *)(result + 3) = v4;
      }
      else {
        *(unsigned char *)(result + 3) = v4;
      }
    }
  }
  else
  {
    if (!v3) {
      goto LABEL_10;
    }
    if (v3 == 2)
    {
      *(_WORD *)(result + 3) = 0;
LABEL_10:
      if (!a2) {
        return result;
      }
LABEL_16:
      *(unsigned char *)(result + 2) = a2 + 3;
      return result;
    }
    *(unsigned char *)(result + 3) = 0;
    if (a2) {
      goto LABEL_16;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OwnedBeaconGroup.PairingMetadata()
{
  return &type metadata for OwnedBeaconGroup.PairingMetadata;
}

unsigned char *_s12searchpartyd16OwnedBeaconGroupV26BeaconGroupConversionErrorOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1004DCF28);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for OwnedBeaconGroup.CodingKeys()
{
  return &type metadata for OwnedBeaconGroup.CodingKeys;
}

void *sub_1004DCF60(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *int v3 = *a2;
    int v3 = (void *)(v9 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    uint64_t v5 = *(int *)(a3 + 20);
    uint64_t v6 = a1 + v5;
    uint64_t v7 = (uint64_t)a2 + v5;
    uint64_t v8 = type metadata accessor for MACAddress();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(v6, v7, v8);
  }
  return v3;
}

uint64_t sub_1004DD034(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a1 + *(int *)(a2 + 20);
  uint64_t v3 = type metadata accessor for MACAddress();
  int v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8);

  return v4(v2, v3);
}

uint64_t sub_1004DD09C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(v5, v6, v7);
  return a1;
}

uint64_t sub_1004DD120(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = (uint64_t)a2 + v5;
  uint64_t v8 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 24))(v6, v7, v8);
  return a1;
}