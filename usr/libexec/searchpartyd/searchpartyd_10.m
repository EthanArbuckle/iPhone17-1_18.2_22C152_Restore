unint64_t sub_100706490(void *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  char v8;
  char v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _DWORD v16[4];
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  int v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;

  v3 = sub_10000588C(&qword_10164C6F0);
  v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  v6 = (char *)v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_1007093A4();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v1) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  v33 = 0;
  v7 = KeyedDecodingContainer.decode(_:forKey:)();
  v32 = 1;
  v8 = KeyedDecodingContainer.decode(_:forKey:)();
  v31 = 2;
  v9 = KeyedDecodingContainer.decode(_:forKey:)();
  v30 = 3;
  v21 = KeyedDecodingContainer.decode(_:forKey:)();
  v29 = 4;
  v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v28 = 5;
  v19 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v27 = 6;
  v18 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v26 = 7;
  v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v25 = 8;
  v16[3] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v24 = 9;
  v16[2] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v23 = 10;
  v16[1] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  v22 = 11;
  KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  v11 = 256;
  if ((v8 & 1) == 0) {
    v11 = 0;
  }
  v12 = v11 & 0xFFFFFFFFFFFFFFFELL | v7 & 1;
  v13 = 0x10000;
  if ((v9 & 1) == 0) {
    v13 = 0;
  }
  v14 = v12 | v13;
  v15 = 0x1000000;
  if ((v21 & 1) == 0) {
    v15 = 0;
  }
  return v14 | v15 | ((unint64_t)v20 << 32) | ((unint64_t)v19 << 40) | ((unint64_t)v18 << 48) | (v17 << 56);
}

uint64_t sub_100706834(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E65644974726170 && a2 == 0xEE00726569666974;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6570795474726170 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x656D614E74726170 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x626D795374726170 && a2 == 0xEA00000000006C6FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x72616D6972507369 && a2 == 0xE900000000000079)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 4;
    }
    else {
      return 5;
    }
  }
}

uint64_t sub_100706A90@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_10000588C(&qword_10164C6B0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100708EE8();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  char v30 = 0;
  char v9 = KeyedDecodingContainer.decode(_:forKey:)();
  char v29 = 1;
  uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v12 = v11;
  uint64_t v25 = v10;
  char v28 = 2;
  swift_bridgeObjectRetain();
  uint64_t v13 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v15 = v14;
  uint64_t v22 = v13;
  char v27 = 3;
  swift_bridgeObjectRetain();
  uint64_t v23 = 0;
  uint64_t v24 = v15;
  uint64_t v21 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  char v26 = 4;
  uint64_t v23 = v16;
  swift_bridgeObjectRetain();
  LOBYTE(v15) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  uint64_t v17 = v23;
  swift_bridgeObjectRelease();
  uint64_t v18 = v24;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(unsigned char *)a2 = v9;
  *(void *)(a2 + 8) = v25;
  *(void *)(a2 + 16) = v12;
  *(void *)(a2 + 24) = v22;
  *(void *)(a2 + 32) = v18;
  *(void *)(a2 + 40) = v21;
  *(void *)(a2 + 48) = v17;
  *(unsigned char *)(a2 + 56) = v15;
  return result;
}

uint64_t sub_100706DE4(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000013 && a2 == 0x8000000101405480
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001013F45D0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6D614E6C65646F6DLL && a2 == 0xE900000000000065 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x5479726574746162 && a2 == 0xEB00000000657079 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x79726F6765746163 && a2 == 0xE800000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x52746C7561666564 && a2 == 0xEB00000000656C6FLL {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001014054A0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x80000001014054C0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0xD000000000000014 && a2 == 0x80000001014054E0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000101405050 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x726F4D6E7261656CLL && a2 == 0xEE00736D65744965 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x8000000101405070 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else if (a1 == 0xD00000000000001ALL && a2 == 0x80000001013EE890 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 12;
  }
  else if (a1 == 0xD000000000000018 && a2 == 0x8000000101405500 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 13;
  }
  else if (a1 == 0xD000000000000024 && a2 == 0x8000000101405520)
  {
    swift_bridgeObjectRelease();
    return 14;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 14;
    }
    else {
      return 15;
    }
  }
}

uint64_t sub_1007073EC(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x48746C7561666564 && a2 == 0xEF6E6F63496F7265;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4C746C7561666564 && a2 == 0xEF6E6F6349747369 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001014053A0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001014053C0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x80000001014053E0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000101405400 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x726F4D6E7261656CLL && a2 == 0xED00006E6F634965 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0xD000000000000019 && a2 == 0x8000000101405420 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else if (a1 == 0x726F4D6E7261656CLL && a2 == 0xEF78326E6F634965 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 8;
  }
  else if (a1 == 0xD00000000000001BLL && a2 == 0x8000000101405440 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 9;
  }
  else if (a1 == 0x726F4D6E7261656CLL && a2 == 0xEF78336E6F634965 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 10;
  }
  else if (a1 == 0xD00000000000001BLL && a2 == 0x8000000101405460)
  {
    swift_bridgeObjectRelease();
    return 11;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 11;
    }
    else {
      return 12;
    }
  }
}

uint64_t sub_100707930(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x707972636E453165 && a2 == 0xEC0000006E6F6974;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x707972636E453265 && a2 == 0xEC0000006E6F6974 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6966697265563273 && a2 == 0xEE006E6F69746163)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_100707ABC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_10000588C(&qword_10164C5B0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100707D54();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  char v27 = 0;
  uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v11 = v10;
  uint64_t v24 = v9;
  char v26 = 1;
  swift_bridgeObjectRetain();
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v14 = v13;
  uint64_t v22 = v12;
  char v25 = 2;
  swift_bridgeObjectRetain();
  uint64_t v23 = v14;
  uint64_t v15 = KeyedDecodingContainer.decode(_:forKey:)();
  uint64_t v17 = v16;
  uint64_t v18 = v15;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_bridgeObjectRetain();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  swift_bridgeObjectRelease();
  uint64_t v19 = v23;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v24;
  a2[1] = v11;
  a2[2] = v22;
  a2[3] = v19;
  a2[4] = v18;
  a2[5] = v17;
  return result;
}

unint64_t sub_100707D54()
{
  unint64_t result = qword_10164C5B8;
  if (!qword_10164C5B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164C5B8);
  }
  return result;
}

unint64_t sub_100707DA8()
{
  unint64_t result = qword_10164C5D0;
  if (!qword_10164C5D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164C5D0);
  }
  return result;
}

uint64_t sub_100707DFC(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

unint64_t sub_100707E64()
{
  unint64_t result = qword_10164C5E8;
  if (!qword_10164C5E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164C5E8);
  }
  return result;
}

unint64_t sub_100707EB8()
{
  unint64_t result = qword_10164C5F0;
  if (!qword_10164C5F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164C5F0);
  }
  return result;
}

unint64_t sub_100707F0C()
{
  unint64_t result = qword_10164C600;
  if (!qword_10164C600)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164C600);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for AccessoryInfoResponseContent.Configuration.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF2) {
    goto LABEL_17;
  }
  if (a2 + 14 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 14) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 14;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 14;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 14;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0xF;
  int v8 = v6 - 15;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for AccessoryInfoResponseContent.Configuration.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 14 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 14) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF2) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF1)
  {
    unsigned int v6 = ((a2 - 242) >> 8) + 1;
    *unint64_t result = a2 + 14;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1007080BCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 14;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryInfoResponseContent.Configuration.CodingKeys()
{
  return &type metadata for AccessoryInfoResponseContent.Configuration.CodingKeys;
}

ValueMetadata *type metadata accessor for AccessoryInfoResponseContent.Assets.CodingKeys()
{
  return &type metadata for AccessoryInfoResponseContent.Assets.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for AccessoryInfoResponseContent.PublicKeys.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1007081D8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryInfoResponseContent.PublicKeys.CodingKeys()
{
  return &type metadata for AccessoryInfoResponseContent.PublicKeys.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for AccessoryInfoResponseContent.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *unint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1007082DCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryInfoResponseContent.CodingKeys()
{
  return &type metadata for AccessoryInfoResponseContent.CodingKeys;
}

ValueMetadata *type metadata accessor for AccessoryInfoResponse()
{
  return &type metadata for AccessoryInfoResponse;
}

uint64_t destroy for AccessoryLayoutTemplate()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AccessoryLayoutTemplate(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v3;
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AccessoryLayoutTemplate(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

__n128 initializeWithTake for AccessoryLayoutTemplate(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for AccessoryLayoutTemplate(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessoryLayoutTemplate(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 57)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessoryLayoutTemplate(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 56) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 57) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 57) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryLayoutTemplate()
{
  return &type metadata for AccessoryLayoutTemplate;
}

uint64_t initializeBufferWithCopyOfBuffer for AccessoryInfoCapabilities(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(void *)__n128 result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for AccessoryInfoCapabilities(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[12]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessoryInfoCapabilities(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_DWORD *)(result + 8) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 12) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 12) = 0;
    }
    if (a2) {
      *(unsigned char *)__n128 result = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryInfoCapabilities()
{
  return &type metadata for AccessoryInfoCapabilities;
}

uint64_t destroy for AccessorySoftwareInfo()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for AccessorySoftwareInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for AccessorySoftwareInfo(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
  *(unsigned char *)(a1 + 33) = *((unsigned char *)a2 + 33);
  *(unsigned char *)(a1 + 34) = *((unsigned char *)a2 + 34);
  *(unsigned char *)(a1 + 35) = *((unsigned char *)a2 + 35);
  *(unsigned char *)(a1 + 36) = *((unsigned char *)a2 + 36);
  *(unsigned char *)(a1 + 37) = *((unsigned char *)a2 + 37);
  *(unsigned char *)(a1 + 38) = *((unsigned char *)a2 + 38);
  *(unsigned char *)(a1 + 39) = *((unsigned char *)a2 + 39);
  *(void *)(a1 + 40) = a2[5];
  *(void *)(a1 + 48) = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = a2[7];
  *(void *)(a1 + 64) = a2[8];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for AccessorySoftwareInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessorySoftwareInfo(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 72)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AccessorySoftwareInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 72) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 72) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessorySoftwareInfo()
{
  return &type metadata for AccessorySoftwareInfo;
}

ValueMetadata *type metadata accessor for Coordinates()
{
  return &type metadata for Coordinates;
}

unint64_t sub_100708918()
{
  unint64_t result = qword_10164C608;
  if (!qword_10164C608)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164C608);
  }
  return result;
}

unint64_t sub_100708970()
{
  unint64_t result = qword_10164C610;
  if (!qword_10164C610)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164C610);
  }
  return result;
}

unint64_t sub_1007089C8()
{
  unint64_t result = qword_10164C618;
  if (!qword_10164C618)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164C618);
  }
  return result;
}

unint64_t sub_100708A20()
{
  unint64_t result = qword_10164C620;
  if (!qword_10164C620)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164C620);
  }
  return result;
}

unint64_t sub_100708A78()
{
  unint64_t result = qword_10164C628;
  if (!qword_10164C628)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164C628);
  }
  return result;
}

unint64_t sub_100708AD0()
{
  unint64_t result = qword_10164C630;
  if (!qword_10164C630)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164C630);
  }
  return result;
}

unint64_t sub_100708B28()
{
  unint64_t result = qword_10164C638;
  if (!qword_10164C638)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164C638);
  }
  return result;
}

unint64_t sub_100708B80()
{
  unint64_t result = qword_10164C640;
  if (!qword_10164C640)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164C640);
  }
  return result;
}

unint64_t sub_100708BD8()
{
  unint64_t result = qword_10164C648;
  if (!qword_10164C648)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164C648);
  }
  return result;
}

unint64_t sub_100708C30()
{
  unint64_t result = qword_10164C650;
  if (!qword_10164C650)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164C650);
  }
  return result;
}

unint64_t sub_100708C88()
{
  unint64_t result = qword_10164C658;
  if (!qword_10164C658)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164C658);
  }
  return result;
}

unint64_t sub_100708CE0()
{
  unint64_t result = qword_10164C660;
  if (!qword_10164C660)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164C660);
  }
  return result;
}

unint64_t sub_100708D38()
{
  unint64_t result = qword_10164C668;
  if (!qword_10164C668)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164C668);
  }
  return result;
}

unint64_t sub_100708D90()
{
  unint64_t result = qword_10164C670;
  if (!qword_10164C670)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164C670);
  }
  return result;
}

unint64_t sub_100708DE8()
{
  unint64_t result = qword_10164C678;
  if (!qword_10164C678)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164C678);
  }
  return result;
}

unint64_t sub_100708E40()
{
  unint64_t result = qword_10164C680;
  if (!qword_10164C680)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164C680);
  }
  return result;
}

unint64_t sub_100708E94()
{
  unint64_t result = qword_10164C690;
  if (!qword_10164C690)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164C690);
  }
  return result;
}

unint64_t sub_100708EE8()
{
  unint64_t result = qword_10164C6B8;
  if (!qword_10164C6B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164C6B8);
  }
  return result;
}

unint64_t sub_100708F3C()
{
  unint64_t result = qword_10164C6C8;
  if (!qword_10164C6C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164C6C8);
  }
  return result;
}

uint64_t sub_100708F90(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6572617774666F73 && a2 == 0xEC0000006F666E49;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x696C696261706163 && a2 == 0xEC00000073656974 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x72756769666E6F63 && a2 == 0xED00006E6F697461 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x737465737361 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6E6F6973726576 && a2 == 0xE700000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0x654B63696C627570 && a2 == 0xEA00000000007379 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x737574617473 && a2 == 0xE600000000000000 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x655474756F79616CLL && a2 == 0xEE006574616C706DLL)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 7;
    }
    else {
      return 8;
    }
  }
}

unint64_t sub_100709350()
{
  unint64_t result = qword_10164C6E8;
  if (!qword_10164C6E8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164C6E8);
  }
  return result;
}

unint64_t sub_1007093A4()
{
  unint64_t result = qword_10164C6F8;
  if (!qword_10164C6F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164C6F8);
  }
  return result;
}

uint64_t sub_1007093F8(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000592C(&qword_10164C698);
    sub_100700E1C(a2, (void (*)(uint64_t))type metadata accessor for AccessoryInfoResponseContent);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryInfoCapabilities.CodingKeys()
{
  return &type metadata for AccessoryInfoCapabilities.CodingKeys;
}

unsigned char *_s12searchpartyd28AccessoryInfoResponseContentV6AssetsV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF4)
  {
    unsigned int v6 = ((a2 - 245) >> 8) + 1;
    *uint64_t result = a2 + 11;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100709568);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 11;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessorySoftwareInfo.CodingKeys()
{
  return &type metadata for AccessorySoftwareInfo.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for Coordinates.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10070966CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Coordinates.CodingKeys()
{
  return &type metadata for Coordinates.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for AccessoryLayoutTemplate.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100709770);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryLayoutTemplate.CodingKeys()
{
  return &type metadata for AccessoryLayoutTemplate.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for AccessoryInfoResponse.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100709844);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessoryInfoResponse.CodingKeys()
{
  return &type metadata for AccessoryInfoResponse.CodingKeys;
}

unint64_t sub_100709880()
{
  unint64_t result = qword_10164C728;
  if (!qword_10164C728)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164C728);
  }
  return result;
}

unint64_t sub_1007098D8()
{
  unint64_t result = qword_10164C730;
  if (!qword_10164C730)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164C730);
  }
  return result;
}

unint64_t sub_100709930()
{
  unint64_t result = qword_10164C738;
  if (!qword_10164C738)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164C738);
  }
  return result;
}

unint64_t sub_100709988()
{
  unint64_t result = qword_10164C740;
  if (!qword_10164C740)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164C740);
  }
  return result;
}

unint64_t sub_1007099E0()
{
  unint64_t result = qword_10164C748;
  if (!qword_10164C748)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164C748);
  }
  return result;
}

unint64_t sub_100709A38()
{
  unint64_t result = qword_10164C750;
  if (!qword_10164C750)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164C750);
  }
  return result;
}

unint64_t sub_100709A90()
{
  unint64_t result = qword_10164C758;
  if (!qword_10164C758)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164C758);
  }
  return result;
}

unint64_t sub_100709AE8()
{
  unint64_t result = qword_10164C760;
  if (!qword_10164C760)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164C760);
  }
  return result;
}

unint64_t sub_100709B40()
{
  unint64_t result = qword_10164C768;
  if (!qword_10164C768)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164C768);
  }
  return result;
}

unint64_t sub_100709B98()
{
  unint64_t result = qword_10164C770;
  if (!qword_10164C770)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164C770);
  }
  return result;
}

unint64_t sub_100709BF0()
{
  unint64_t result = qword_10164C778;
  if (!qword_10164C778)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164C778);
  }
  return result;
}

unint64_t sub_100709C48()
{
  unint64_t result = qword_10164C780;
  if (!qword_10164C780)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164C780);
  }
  return result;
}

unint64_t sub_100709CA0()
{
  unint64_t result = qword_10164C788;
  if (!qword_10164C788)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164C788);
  }
  return result;
}

unint64_t sub_100709CF8()
{
  unint64_t result = qword_10164C790;
  if (!qword_10164C790)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164C790);
  }
  return result;
}

unint64_t sub_100709D50()
{
  unint64_t result = qword_10164C798;
  if (!qword_10164C798)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164C798);
  }
  return result;
}

void *sub_100709DA4(uint64_t a1, void *a2)
{
  int v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v6 - 8);
  char v30 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C(&qword_10163A798);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101636CB8 != -1) {
    swift_once();
  }
  uint64_t v15 = (void *)qword_10170E330;
  type metadata accessor for SPObserverAnalyticsAttempts();
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v15;
  v3[6] = 0;
  v3[7] = 0;
  v3[5] = v16;
  sub_10000588C((uint64_t *)&unk_101638CE0);
  uint64_t v17 = swift_allocObject();
  *(_DWORD *)(v17 + 16) = 0;
  v3[9] = 0;
  v3[10] = 0;
  v3[8] = v17;
  v3[2] = a1;
  v3[3] = a2;
  swift_retain();
  swift_retain();
  id v29 = a2;
  v3[4] = sub_10092F290((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v32 = type metadata accessor for SPObserverAnalytics();
  v33 = &off_1015D2230;
  v31[0] = v3;
  __chkstk_darwin(v32);
  *(&v29 - 2) = v31;
  *(&v29 - 1) = v15;
  swift_retain();
  OS_dispatch_queue.sync<A>(execute:)();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v31);
  uint64_t v18 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v10, 1, 1, v18);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = 0;
  *(void *)(v19 + 24) = 0;
  sub_1000212B0((uint64_t)v10, (uint64_t)&unk_10164C978, v19);
  swift_release();
  sub_10001DAB4((uint64_t)v10, &qword_10164DBB0);
  uint64_t v20 = (uint64_t)v30;
  static DispatchQoS.default.getter();
  uint64_t v21 = swift_allocObject();
  swift_weakInit();
  uint64_t v22 = swift_allocObject();
  *(void *)(v22 + 16) = v21;
  *(void *)(v22 + 24) = a1;
  uint64_t v23 = swift_allocObject();
  swift_weakInit();
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = v23;
  *(void *)(v24 + 24) = a1;
  type metadata accessor for XPCActivity();
  swift_allocObject();
  swift_retain_n();
  uint64_t v25 = sub_1009D9B34(0xD000000000000034, (void *)0x8000000101405780, v20, (uint64_t)sub_1007150FC, v22, (uint64_t)sub_100715108, v24);
  swift_release();
  swift_release();
  OSAllocatedUnfairLock.callAsFunction<A>(_:)();
  v3[10] = v25;
  swift_retain();
  swift_release();
  if (qword_101637680 != -1) {
    swift_once();
  }
  swift_retain();
  uint64_t v26 = AnyCurrentValuePublisher.publisher.getter();
  swift_release();
  v31[0] = v26;
  swift_retain();
  sub_10000588C((uint64_t *)&unk_1016569C0);
  sub_100715168();
  uint64_t v27 = Publisher<>.sink(receiveValue:)();
  swift_release();

  swift_release_n();
  swift_release();
  v3[6] = v27;
  swift_release();
  return v3;
}

uint64_t sub_10070A308()
{
  sub_10000588C(&qword_101639058);
  v0[15] = swift_task_alloc();
  uint64_t v1 = type metadata accessor for FinderStateInfo(0);
  v0[16] = v1;
  v0[17] = *(void *)(v1 - 8);
  v0[18] = swift_task_alloc();
  v0[19] = swift_task_alloc();
  sub_10000588C(&qword_101639060);
  v0[20] = swift_task_alloc();
  uint64_t v2 = sub_10000588C(&qword_101639068);
  v0[21] = v2;
  v0[22] = *(void *)(v2 - 8);
  v0[23] = swift_task_alloc();
  uint64_t v3 = sub_10000588C(&qword_101639070);
  v0[24] = v3;
  v0[25] = *(void *)(v3 - 8);
  v0[26] = swift_task_alloc();
  return _swift_task_switch(sub_10070A4F4, 0, 0);
}

uint64_t sub_10070A4F4()
{
  if (qword_1016375E8 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_10001D074((uint64_t)&xmmword_10166E8F0, v0 + 56, (uint64_t *)&unk_101638D30);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_101639078 + dword_101639078);
    uint64_t v2 = (void *)swift_task_alloc();
    *(void *)(v0 + 216) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10070A630;
    return v3();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10070A630(uint64_t a1)
{
  *(void *)(*(void *)v1 + 224) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_10070A730, 0, 0);
}

uint64_t sub_10070A730()
{
  uint64_t v1 = (uint64_t)(v0 + 2);
  if (v0[28])
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v2 = (void *)swift_task_alloc();
    v0[29] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10070A8C8;
    uint64_t v3 = v0[23];
    return sub_100867118(v3);
  }
  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    static os_log_type_t.error.getter();
    if (qword_101637248 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v5 = (uint64_t (*)(void))v0[1];
    return v5();
  }
}

uint64_t sub_10070A8C8()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10070A9C4, 0, 0);
}

uint64_t sub_10070A9C4()
{
  uint64_t v2 = v0[22];
  uint64_t v1 = v0[23];
  uint64_t v3 = v0[21];
  AsyncStream.makeAsyncIterator()();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v0[30] = 0;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[31] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10070AAA4;
  uint64_t v5 = v0[24];
  uint64_t v6 = v0[20];
  return AsyncStream.Iterator.next(isolation:)(v6, 0, 0, v5);
}

uint64_t sub_10070AAA4()
{
  swift_task_dealloc();
  return _swift_task_switch(sub_10070ABA0, 0, 0);
}

uint64_t sub_10070ABA0()
{
  uint64_t v1 = v0[20];
  uint64_t v2 = sub_10000588C(&qword_101639080);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48))(v1, 1, v2) == 1)
  {
    (*(void (**)(void, void))(v0[25] + 8))(v0[26], v0[24]);
    swift_release();
LABEL_10:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v24 = (uint64_t (*)(void))v0[1];
    return v24();
  }
  uint64_t v3 = v0[19];
  uint64_t v4 = v0[16];
  uint64_t v5 = v0[17];
  uint64_t v6 = v0[15];
  swift_release();
  uint64_t v7 = v1 + *(int *)(v2 + 48);
  uint64_t v8 = sub_10000588C(&qword_101639088);
  sub_100715894(v7 + *(int *)(v8 + 48), v3, type metadata accessor for FinderStateInfo);
  sub_10001D608(v7, v6, &qword_101639058);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1, v4) == 1)
  {
    uint64_t v9 = v0[19];
    uint64_t v10 = v0[15];
    (*(void (**)(void, void))(v0[25] + 8))(v0[26], v0[24]);
    swift_release();
    sub_1007158FC(v9, type metadata accessor for FinderStateInfo);
    sub_10001DAB4(v10, &qword_101639058);
    goto LABEL_10;
  }
  uint64_t v12 = (unsigned __int8 *)v0[18];
  uint64_t v11 = (unsigned __int8 *)v0[19];
  sub_100715894(v0[15], (uint64_t)v12, type metadata accessor for FinderStateInfo);
  if (*v12 == *v11)
  {
    uint64_t v20 = v0[25];
    uint64_t v19 = v0[26];
    uint64_t v21 = v0[24];
    uint64_t v23 = v0[18];
    uint64_t v22 = v0[19];
    swift_release();
    sub_1007158FC(v23, type metadata accessor for FinderStateInfo);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
    sub_1007158FC(v22, type metadata accessor for FinderStateInfo);
    goto LABEL_10;
  }
  uint64_t v13 = v0[19];
  type metadata accessor for AnalyticsEvent(0);
  uint64_t v14 = (char *)swift_allocObject();
  v0[32] = v14;
  swift_defaultActor_initialize();
  *((void *)v14 + 14) = sub_10092D664((uint64_t)_swiftEmptyArrayStorage);
  UUID.init()();
  uint64_t v15 = &v14[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
  uint64_t v16 = type metadata accessor for DispatchTime();
  uint64_t v17 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
  v17(v15, 1, 1, v16);
  v17(&v14[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v16);
  *((void *)v14 + 15) = 0xD00000000000002BLL;
  *((void *)v14 + 16) = 0x8000000101405950;
  uint64_t v18 = swift_task_alloc();
  v0[33] = v18;
  *(void *)(v18 + 16) = v13;
  return _swift_task_switch(sub_10070AF5C, v14, 0);
}

uint64_t sub_10070AF5C()
{
  uint64_t v1 = *(void *)(v0 + 240);
  sub_10118B228((uint64_t)sub_10071595C);
  *(void *)(v0 + 272) = v1;
  if (v1)
  {
    swift_errorRelease();
    swift_task_dealloc();
    uint64_t v2 = sub_10070B2DC;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_10070B018;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10070B018()
{
  v0[35] = v0[34];
  type metadata accessor for AnalyticsPublisher();
  v0[36] = swift_allocObject();
  swift_defaultActor_initialize();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[37] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10070B0D4;
  uint64_t v2 = v0[32];
  return sub_101196838(v2);
}

uint64_t sub_10070B0D4()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_10070B1EC, 0, 0);
}

uint64_t sub_10070B1EC()
{
  uint64_t v1 = v0[18];
  uint64_t v2 = v0[19];
  swift_release();
  sub_1007158FC(v1, type metadata accessor for FinderStateInfo);
  sub_1007158FC(v2, type metadata accessor for FinderStateInfo);
  v0[30] = v0[35];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[31] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10070AAA4;
  uint64_t v4 = v0[24];
  uint64_t v5 = v0[20];
  return AsyncStream.Iterator.next(isolation:)(v5, 0, 0, v4);
}

uint64_t sub_10070B2DC()
{
  v0[35] = 0;
  type metadata accessor for AnalyticsPublisher();
  v0[36] = swift_allocObject();
  swift_defaultActor_initialize();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[37] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10070B0D4;
  uint64_t v2 = v0[32];
  return sub_101196838(v2);
}

unint64_t sub_10070B394(unsigned __int8 *a1)
{
  uint64_t v1 = *a1;
  sub_10000588C(&qword_10163C5D0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101347BA0;
  *(void *)(inited + 32) = 0x7669746341646964;
  *(void *)(inited + 40) = 0xEB00000000657461;
  *(void *)(inited + 48) = v1;
  *(unsigned char *)(inited + 56) = 1;
  *(void *)(inited + 64) = 0x6E6F73616572;
  *(void *)(inited + 72) = 0xE600000000000000;
  sub_10001D4B0(0, &qword_1016552A0);
  *(void *)(inited + 80) = NSString.init(stringLiteral:)();
  *(unsigned char *)(inited + 88) = 0;
  return sub_10092E03C(inited);
}

uint64_t sub_10070B46C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_10001D608(a1, (uint64_t)v15, &qword_1016549D0);
  long long v13 = v15[1];
  long long v14 = v15[0];
  uint64_t v4 = v16;
  if (qword_101637680 != -1) {
    swift_once();
  }
  swift_retain();
  AnyCurrentValuePublisher.value.getter();
  swift_release();
  if (LOBYTE(v17[0]) != 1)
  {
    swift_beginAccess();
    uint64_t result = swift_weakLoadStrong();
    long long v6 = xmmword_101354090;
    long long v7 = 0uLL;
    if (!result)
    {
      uint64_t v4 = 0;
      goto LABEL_16;
    }
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    uint64_t result = swift_release();
    if (v17[0] != 1)
    {
      uint64_t v4 = 0;
      long long v6 = xmmword_101354090;
      long long v7 = 0uLL;
      goto LABEL_16;
    }
  }
  uint64_t v8 = sub_100AD2AD4();
  uint64_t v9 = *(void *)(v8 + 16);
  if (v9)
  {
    uint64_t v10 = (void *)(v8 + 32);
    while (1)
    {
      uint64_t v11 = v10[3];
      uint64_t v12 = v10[4];
      sub_10001CD44(v10, v11);
      if ((*(uint64_t (**)(uint64_t, uint64_t))(v12 + 96))(v11, v12)) {
        break;
      }
      v10 += 5;
      if (!--v9) {
        goto LABEL_10;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t result = sub_10001D608(a1, (uint64_t)v17, &qword_1016549D0);
    if (LOBYTE(v17[0]) == 2)
    {
      long long v7 = xmmword_101367E40;
      long long v6 = xmmword_101367E50;
      uint64_t v4 = 580;
    }
    else
    {
      long long v7 = v13;
      long long v6 = v14;
    }
  }
  else
  {
LABEL_10:
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v4 = 0;
    long long v6 = xmmword_101354090;
    long long v7 = 0uLL;
  }
LABEL_16:
  *(_OWORD *)a2 = v6;
  *(_OWORD *)(a2 + 16) = v7;
  *(void *)(a2 + 32) = v4;
  return result;
}

uint64_t sub_10070B6A0(uint64_t a1, uint64_t a2, char a3)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v6 = result;
    Transaction.capture()();
    if (a3 == 3)
    {
      sub_1009D7368();
    }
    else if (a3 == 2)
    {
      long long v7 = sub_100ACF5FC();
      uint64_t v8 = sub_100714AA8((uint64_t)v7);
      swift_bridgeObjectRelease();
      uint64_t v9 = v8[2];
      if (v9)
      {
        uint64_t v10 = *(void *)(type metadata accessor for OwnedBeaconRecord() - 8);
        uint64_t v11 = (void (*)(char *, char *, uint64_t))((char *)v8
                                                           + ((*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80)));
        uint64_t v12 = *(void *)(v10 + 72);
        swift_bridgeObjectRetain();
        do
        {
          sub_1007145A8(v11, a2, v6);
          uint64_t v11 = (void (*)(char *, char *, uint64_t))((char *)v11 + v12);
          --v9;
        }
        while (v9);
        swift_bridgeObjectRelease_n();
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      sub_1009D7390();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_10070B808()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    __chkstk_darwin(result);
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    if (*(void *)(v1 + 80))
    {
      swift_retain();
      OSAllocatedUnfairLock.callAsFunction<A>(_:)();
      swift_release();
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_10070BA50()
{
  swift_release();

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_10070BAA8()
{
  sub_10070BA50();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SPObserverAnalytics()
{
  return self;
}

uint64_t sub_10070BB00(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 16);
  sub_100ACCD98(a1, (uint64_t)v14);
  sub_10001D074((uint64_t)v14, (uint64_t)&v9, (uint64_t *)&unk_10163BBE0);
  if (v10)
  {
    sub_10001CEB0(&v9, (uint64_t)v11);
    uint64_t v3 = v12;
    uint64_t v4 = v13;
    uint64_t v5 = sub_10001CD44(v11, v12);
    id v6 = sub_100B2B68C((uint64_t)v5, v2, v3, v4);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v11);
  }
  else
  {
    sub_10001DAB4((uint64_t)&v9, (uint64_t *)&unk_10163BBE0);
    id v6 = 0;
  }
  type metadata accessor for Transaction();
  *(void *)(swift_allocObject() + 16) = v6;
  id v7 = v6;
  static Transaction.asyncTask(name:block:)();

  swift_release();
  return sub_10001DAB4((uint64_t)v14, (uint64_t *)&unk_10163BBE0);
}

uint64_t sub_10070BC1C(unint64_t a1)
{
  uint64_t v2 = type metadata accessor for BeaconObservation();
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v121 = (uint64_t)&v115 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v136 = (uint64_t)&v115 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  v134 = (char *)&v115 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v115 - v11;
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v137 = (uint64_t)&v115 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  v135 = (char *)&v115 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  unint64_t v119 = (unint64_t)&v115 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v138 = (uint64_t)&v115 - v20;
  __chkstk_darwin(v19);
  uint64_t v22 = (uint64_t)&v115 - v21;
  uint64_t v23 = sub_10000588C((uint64_t *)&unk_101655530);
  uint64_t v24 = __chkstk_darwin(v23 - 8);
  uint64_t v122 = (uint64_t)&v115 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v117 = (uint64_t)&v115 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v120 = (uint64_t)&v115 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v128 = (uint64_t)&v115 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v118 = (uint64_t)&v115 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v124 = (uint64_t)&v115 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  unint64_t v38 = (unint64_t)&v115 - v37;
  uint64_t v39 = __chkstk_darwin(v36);
  v125 = (char *)&v115 - v40;
  uint64_t v41 = __chkstk_darwin(v39);
  uint64_t v43 = (uint64_t)&v115 - v42;
  __chkstk_darwin(v41);
  uint64_t v140 = v3;
  v44 = *(void (**)(void))(v3 + 56);
  uint64_t v133 = (uint64_t)&v115 - v45;
  uint64_t v131 = v3 + 56;
  v130 = v44;
  v44();
  if (qword_101636CB8 != -1) {
    goto LABEL_82;
  }
  while (1)
  {
    uint64_t v132 = sub_10000588C(&qword_101655540);
    OS_dispatch_queue.sync<A>(execute:)();
    v47 = v143;
    uint64_t v48 = v143[2];
    uint64_t v139 = v2;
    unint64_t v129 = v38;
    uint64_t v127 = v43;
    if (!v48) {
      goto LABEL_15;
    }
    unint64_t v49 = sub_1007240CC(a1);
    if (v50)
    {
      v126 = v46;
      v116 = v12;
      uint64_t v43 = *(void *)(v47[7] + 8 * v49);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v51 = sub_100711558(v43, &qword_101648238, (uint64_t (*)(uint64_t *, void *, uint64_t, uint64_t))sub_1007129FC);
      swift_bridgeObjectRelease();
      size_t v52 = sub_100B752E8((uint64_t)v51);
      swift_release();
      v53 = _swiftEmptyArrayStorage;
      v143 = _swiftEmptyArrayStorage;
      uint64_t v12 = *(char **)(v52 + 16);
      if (v12)
      {
        unint64_t v115 = a1;
        a1 = 0;
        while (a1 < *(void *)(v52 + 16))
        {
          unint64_t v54 = (*(unsigned __int8 *)(v140 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v140 + 80);
          unint64_t v38 = *(void *)(v140 + 72);
          sub_100715820(v52 + v54 + v38 * a1, v22, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
          if (*(unsigned char *)(v22 + *(int *)(v2 + 24)) == 33)
          {
            sub_100715894(v22, v138, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              sub_1000B77F0(0, v53[2] + 1, 1);
            }
            v53 = v143;
            unint64_t v56 = v143[2];
            unint64_t v55 = v143[3];
            uint64_t v43 = v56 + 1;
            if (v56 >= v55 >> 1)
            {
              sub_1000B77F0(v55 > 1, v56 + 1, 1);
              v53 = v143;
            }
            v53[2] = v43;
            sub_100715894(v138, (uint64_t)v53 + v54 + v56 * v38, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
            uint64_t v2 = v139;
          }
          else
          {
            sub_1007158FC(v22, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
          }
          if (v12 == (char *)++a1)
          {
            v53 = v143;
            a1 = v115;
            goto LABEL_17;
          }
        }
        __break(1u);
        goto LABEL_80;
      }
LABEL_17:
      swift_release();
      uint64_t v43 = v127;
      uint64_t v12 = v116;
      uint64_t v22 = (uint64_t)v135;
      v46 = v126;
    }
    else
    {
LABEL_15:
      swift_bridgeObjectRelease();
      v53 = _swiftEmptyArrayStorage;
      uint64_t v22 = (uint64_t)v135;
    }
    uint64_t v138 = *(int *)(v2 + 24);
    if (*(unsigned char *)(a1 + v138) == 33) {
      sub_1002A1BF8((uint64_t)v53, v43);
    }
    else {
      sub_100E4D5E0((uint64_t)v53, v43);
    }
    swift_bridgeObjectRelease();
    unint64_t v38 = (unint64_t)v125;
    sub_10001D074(v43, (uint64_t)v125, (uint64_t *)&unk_101655530);
    v57 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v140 + 48);
    int v58 = v57(v38, 1, v2);
    v126 = v57;
    if (v58 == 1)
    {
      sub_10001DAB4(v38, (uint64_t *)&unk_101655530);
      double v59 = 0.0;
    }
    else
    {
      uint64_t v43 = (uint64_t)type metadata accessor for BeaconObservation;
      uint64_t v60 = v38;
      unint64_t v38 = v119;
      sub_100715894(v60, v119, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      Date.timeIntervalSinceNow.getter();
      double v59 = fabs(v61);
      uint64_t v62 = v133;
      sub_10001DAB4(v133, (uint64_t *)&unk_101655530);
      sub_100715894(v38, v62, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v130)(v62, 0, 1, v2);
    }
    OS_dispatch_queue.sync<A>(execute:)();
    v63 = v143;
    if (!v143[2] || (unint64_t v64 = sub_1007240CC(a1), (v65 & 1) == 0))
    {
      swift_bridgeObjectRelease();
      v69 = _swiftEmptyArrayStorage;
      goto LABEL_40;
    }
    v116 = v12;
    uint64_t v66 = *(void *)(v63[7] + 8 * v64);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v67 = sub_100711558(v66, &qword_101648238, (uint64_t (*)(uint64_t *, void *, uint64_t, uint64_t))sub_1007129FC);
    swift_bridgeObjectRelease();
    size_t v68 = sub_100B752E8((uint64_t)v67);
    swift_release();
    v69 = _swiftEmptyArrayStorage;
    v143 = _swiftEmptyArrayStorage;
    uint64_t v12 = *(char **)(v68 + 16);
    if (!v12) {
      break;
    }
    unint64_t v115 = a1;
    a1 = 0;
    while (a1 < *(void *)(v68 + 16))
    {
      unint64_t v38 = (*(unsigned __int8 *)(v140 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v140 + 80);
      uint64_t v43 = *(void *)(v140 + 72);
      sub_100715820(v68 + v38 + v43 * a1, v22, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      if (*(unsigned char *)(v22 + *(int *)(v2 + 24)) == 35)
      {
        sub_100715894(v22, v137, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1000B77F0(0, v69[2] + 1, 1);
        }
        v69 = v143;
        unint64_t v71 = v143[2];
        unint64_t v70 = v143[3];
        if (v71 >= v70 >> 1)
        {
          sub_1000B77F0(v70 > 1, v71 + 1, 1);
          v69 = v143;
        }
        v69[2] = v71 + 1;
        sub_100715894(v137, (uint64_t)v69 + v38 + v71 * v43, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        uint64_t v2 = v139;
        uint64_t v22 = (uint64_t)v135;
      }
      else
      {
        sub_1007158FC(v22, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      }
      if (v12 == (char *)++a1)
      {
        v69 = v143;
        a1 = v115;
        goto LABEL_39;
      }
    }
LABEL_80:
    __break(1u);
LABEL_81:
    __break(1u);
LABEL_82:
    swift_once();
  }
LABEL_39:
  swift_release();
  uint64_t v12 = v116;
LABEL_40:
  v72 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v126;
  uint64_t v73 = v129;
  if (*(unsigned char *)(a1 + v138) == 35) {
    sub_1002A1BF8((uint64_t)v69, v129);
  }
  else {
    sub_100E4D5E0((uint64_t)v69, v129);
  }
  swift_bridgeObjectRelease();
  uint64_t v74 = v124;
  sub_10001D074(v73, v124, (uint64_t *)&unk_101655530);
  if (v72(v74, 1, v2) == 1)
  {
    sub_10001DAB4(v74, (uint64_t *)&unk_101655530);
    double v75 = 0.0;
    goto LABEL_48;
  }
  sub_100715894(v74, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
  Date.timeIntervalSinceNow.getter();
  double v75 = fabs(v76);
  uint64_t v77 = v118;
  sub_10001D074(v133, v118, (uint64_t *)&unk_101655530);
  unsigned int v78 = v72(v77, 1, v2);
  sub_10001DAB4(v77, (uint64_t *)&unk_101655530);
  if (v78 == 1 || v75 < v59)
  {
    uint64_t v80 = v133;
    sub_10001DAB4(v133, (uint64_t *)&unk_101655530);
    sub_100715894((uint64_t)v12, v80, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    ((void (*)(uint64_t, void, uint64_t, uint64_t))v130)(v80, 0, 1, v2);
    double v79 = v75;
  }
  else
  {
    sub_1007158FC((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
LABEL_48:
    double v79 = v59;
  }
  OS_dispatch_queue.sync<A>(execute:)();
  v81 = v143;
  if (!v143[2] || (unint64_t v82 = sub_1007240CC(a1), (v83 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    uint64_t v87 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v91 = v128;
    goto LABEL_66;
  }
  uint64_t v84 = *(void *)(v81[7] + 8 * v82);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v85 = sub_100711558(v84, &qword_101648238, (uint64_t (*)(uint64_t *, void *, uint64_t, uint64_t))sub_1007129FC);
  swift_bridgeObjectRelease();
  size_t v86 = sub_100B752E8((uint64_t)v85);
  swift_release();
  uint64_t v87 = (uint64_t)_swiftEmptyArrayStorage;
  v143 = _swiftEmptyArrayStorage;
  uint64_t v88 = *(void *)(v86 + 16);
  if (v88)
  {
    unint64_t v115 = a1;
    a1 = 0;
    uint64_t v43 = (uint64_t)v134;
    while (a1 < *(void *)(v86 + 16))
    {
      uint64_t v12 = (char *)((*(unsigned __int8 *)(v140 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v140 + 80));
      uint64_t v22 = *(void *)(v140 + 72);
      sub_100715820((uint64_t)&v12[v86 + v22 * a1], v43, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      if (*(unsigned char *)(v43 + *(int *)(v2 + 24)) == 34)
      {
        sub_100715894(v43, v136, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1000B77F0(0, *(void *)(v87 + 16) + 1, 1);
        }
        uint64_t v87 = (uint64_t)v143;
        unint64_t v90 = v143[2];
        unint64_t v89 = v143[3];
        if (v90 >= v89 >> 1)
        {
          sub_1000B77F0(v89 > 1, v90 + 1, 1);
          uint64_t v87 = (uint64_t)v143;
        }
        *(void *)(v87 + 16) = v90 + 1;
        sub_100715894(v136, (uint64_t)&v12[v87 + v90 * v22], (uint64_t (*)(void))type metadata accessor for BeaconObservation);
        uint64_t v2 = v139;
        uint64_t v43 = (uint64_t)v134;
      }
      else
      {
        sub_1007158FC(v43, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      }
      if (v88 == ++a1)
      {
        uint64_t v87 = (uint64_t)v143;
        a1 = v115;
        goto LABEL_65;
      }
    }
    goto LABEL_81;
  }
LABEL_65:
  swift_release();
  uint64_t v91 = v128;
  v72 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v126;
LABEL_66:
  if (*(unsigned char *)(a1 + v138) == 34) {
    sub_1002A1BF8(v87, v91);
  }
  else {
    sub_100E4D5E0(v87, v91);
  }
  swift_bridgeObjectRelease();
  uint64_t v92 = v120;
  sub_10001D074(v91, v120, (uint64_t *)&unk_101655530);
  if (v72(v92, 1, v2) == 1)
  {
    sub_10001DAB4(v92, (uint64_t *)&unk_101655530);
    double v93 = 0.0;
  }
  else
  {
    sub_100715894(v92, v121, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    Date.timeIntervalSinceNow.getter();
    double v93 = fabs(v94);
    uint64_t v95 = v117;
    sub_10001D074(v133, v117, (uint64_t *)&unk_101655530);
    unsigned int v96 = v72(v95, 1, v2);
    sub_10001DAB4(v95, (uint64_t *)&unk_101655530);
    if (v96 == 1 || v93 < v79)
    {
      uint64_t v97 = v133;
      sub_10001DAB4(v133, (uint64_t *)&unk_101655530);
      sub_100715894(v121, v97, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v130)(v97, 0, 1, v2);
    }
    else
    {
      sub_1007158FC(v121, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
    }
  }
  uint64_t v98 = v129;
  uint64_t v99 = *(void *)(v123 + 16);
  sub_100ACCD98(a1, (uint64_t)&v141);
  if (v142)
  {
    sub_10001CEB0(&v141, (uint64_t)&v143);
    uint64_t v100 = v144;
    uint64_t v101 = v145;
    v102 = sub_10001CD44(&v143, v144);
    id v103 = sub_100B2B68C((uint64_t)v102, v99, v100, v101);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v143);
  }
  else
  {
    sub_10001DAB4((uint64_t)&v141, (uint64_t *)&unk_10163BBE0);
    id v103 = 0;
  }
  uint64_t v104 = v122;
  sub_100715820(a1, v122, (uint64_t (*)(void))type metadata accessor for BeaconObservation);
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v130)(v104, 0, 1, v2);
  uint64_t v105 = sub_1011AE700(v104);
  uint64_t v107 = v106;
  sub_10001DAB4(v104, (uint64_t *)&unk_101655530);
  uint64_t v108 = v133;
  uint64_t v109 = sub_1011AE700(v133);
  uint64_t v111 = v110;
  type metadata accessor for Transaction();
  uint64_t v112 = swift_allocObject();
  *(void *)(v112 + 16) = v105;
  *(void *)(v112 + 24) = v107;
  *(void *)(v112 + 32) = v109;
  *(void *)(v112 + 40) = v111;
  *(double *)(v112 + 48) = v59;
  *(double *)(v112 + 56) = v93;
  *(double *)(v112 + 64) = v75;
  *(void *)(v112 + 72) = v103;
  id v113 = v103;
  static Transaction.asyncTask(name:block:)();

  swift_release();
  sub_10001DAB4(v128, (uint64_t *)&unk_101655530);
  sub_10001DAB4(v98, (uint64_t *)&unk_101655530);
  sub_10001DAB4(v127, (uint64_t *)&unk_101655530);
  return sub_10001DAB4(v108, (uint64_t *)&unk_101655530);
}

uint64_t sub_10070CDA4(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return _swift_task_switch(sub_10070CDC4, 0, 0);
}

uint64_t sub_10070CDC4()
{
  uint64_t v1 = *(void **)(v0 + 16);
  type metadata accessor for AnalyticsEvent(0);
  uint64_t v2 = (char *)swift_allocObject();
  *(void *)(v0 + 24) = v2;
  swift_defaultActor_initialize();
  *((void *)v2 + 14) = sub_10092D664((uint64_t)_swiftEmptyArrayStorage);
  UUID.init()();
  uint64_t v3 = &v2[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
  uint64_t v4 = type metadata accessor for DispatchTime();
  uint64_t v5 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  v5(v3, 1, 1, v4);
  v5(&v2[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v4);
  *((void *)v2 + 15) = 0xD00000000000003DLL;
  *((void *)v2 + 16) = 0x80000001014036C0;
  id v6 = v1;
  return _swift_task_switch(sub_10070CF1C, v2, 0);
}

uint64_t sub_10070CF1C()
{
  sub_1011AE90C(*(void *)(v0 + 24), *(void **)(v0 + 16));

  return _swift_task_switch(sub_10066CE78, 0, 0);
}

id sub_10070CFB4(void *a1)
{
  uint64_t v2 = type metadata accessor for UUID();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000588C(&qword_10163C5D0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101347BA0;
  *(void *)(inited + 32) = 0xD000000000000016;
  *(void *)(inited + 40) = 0x8000000101403700;
  sub_10001D4B0(0, (unint64_t *)&qword_10164DC40);
  *(NSNumber *)(inited + 48) = NSNumber.init(BOOLeanLiteral:)(1);
  *(unsigned char *)(inited + 56) = 0;
  *(void *)(inited + 64) = 0x6E6F697461727564;
  *(void *)(inited + 72) = 0xE800000000000000;
  *(NSNumber *)(inited + 80) = NSNumber.init(integerLiteral:)(0);
  *(unsigned char *)(inited + 88) = 0;
  unint64_t v7 = sub_10092E03C(inited);
  if (!a1) {
    return (id)v7;
  }
  id v8 = a1;
  id result = [v8 systemVersion];
  if (result)
  {
    uint64_t v10 = (uint64_t)result;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v44 = v7;
    sub_10016D430(v10, 0, 0xD000000000000013, 0x80000001013FD3D0, isUniquelyReferenced_nonNull_native);
    unint64_t v12 = v44;
    swift_bridgeObjectRelease();
    id result = [v8 systemVersion];
    if (result)
    {
      uint64_t v13 = (uint64_t)result;
      char v14 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v44 = v12;
      sub_10016D430(v13, 0, 0xD00000000000001BLL, 0x80000001013FD3F0, v14);
      unint64_t v15 = v44;
      swift_bridgeObjectRelease();
      id v16 = [objc_allocWithZone((Class)NSNumber) initWithInteger:[v8 batteryLevel]];
      char v17 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v44 = v15;
      sub_10016D430((uint64_t)v16, 0, 0x4C79726574746162, 0xEC0000006C657665, v17);
      unint64_t v18 = v44;
      swift_bridgeObjectRelease();
      id v19 = SPBeaconTaskNameBeginLeashing;
      id v20 = [v8 taskInformation];
      type metadata accessor for SPBeaconTaskName(0);
      sub_10001D4B0(0, &qword_101653D80);
      sub_100714F88(&qword_1016387E0, type metadata accessor for SPBeaconTaskName);
      uint64_t v21 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      if (*(void *)(v21 + 16) && (uint64_t v22 = sub_1007248DC(v19), (v23 & 1) != 0))
      {
        id v24 = *(id *)(*(void *)(v21 + 56) + 8 * v22);

        swift_bridgeObjectRelease();
        [v24 state];
      }
      else
      {

        swift_bridgeObjectRelease();
      }
      Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
      char v26 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v44 = v18;
      sub_10016D430((uint64_t)isa, 0, 0x6563697665447369, 0xEF6465687361654CLL, v26);
      unint64_t v27 = v44;
      swift_bridgeObjectRelease();
      uint64_t v28 = [v8 connected];
      char v29 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v44 = v27;
      sub_10016D430(v28, 1, 0xD000000000000011, 0x80000001013F72A0, v29);
      unint64_t v7 = v44;
      swift_bridgeObjectRelease();
      id v30 = [v8 role];
      if (v30)
      {
        uint64_t v31 = v30;
        id v32 = [v30 role];

        static String._unconditionallyBridgeFromObjectiveC(_:)();
        NSString v33 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        char v34 = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v44 = v7;
        sub_10016D430((uint64_t)v33, 0, 1701605234, 0xE400000000000000, v34);
        unint64_t v7 = v44;
        swift_bridgeObjectRelease();
      }
      id v35 = [self sharedInstance];
      unsigned int v36 = [v35 isInternalBuild];

      if (!v36) {
        goto LABEL_13;
      }
      id v37 = [v8 identifier];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      UUID.uuidString.getter();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      NSString v38 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      char v39 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v44 = v7;
      sub_10016D430((uint64_t)v38, 0, 0x6544646572696170, 0xEE00444965636976, v39);
      unint64_t v7 = v44;
      swift_bridgeObjectRelease();
      id v40 = [v8 serialNumber];
      if (v40)
      {
        uint64_t v41 = (uint64_t)v40;
        char v42 = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v44 = v7;
        sub_10016D430(v41, 0, 0xD000000000000018, 0x80000001013F72C0, v42);
        unint64_t v7 = v44;

        swift_bridgeObjectRelease();
      }
      else
      {
LABEL_13:
      }
      return (id)v7;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10070D610(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6, double a7, double a8)
{
  *(void *)(v8 + 72) = a5;
  *(double *)(v8 + 56) = a7;
  *(double *)(v8 + 64) = a8;
  *(double *)(v8 + 48) = a6;
  *(void *)(v8 + 32) = a3;
  *(void *)(v8 + 40) = a4;
  *(void *)(v8 + 16) = a1;
  *(void *)(v8 + 24) = a2;
  return _swift_task_switch(sub_10070D640, 0, 0);
}

uint64_t sub_10070D640()
{
  uint64_t v1 = *(void **)(v0 + 72);
  type metadata accessor for AnalyticsEvent(0);
  uint64_t v2 = (char *)swift_allocObject();
  *(void *)(v0 + 80) = v2;
  swift_defaultActor_initialize();
  *((void *)v2 + 14) = sub_10092D664((uint64_t)_swiftEmptyArrayStorage);
  UUID.init()();
  uint64_t v3 = &v2[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
  uint64_t v4 = type metadata accessor for DispatchTime();
  uint64_t v5 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);
  v5(v3, 1, 1, v4);
  v5(&v2[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v4);
  *((void *)v2 + 15) = 0xD00000000000002DLL;
  *((void *)v2 + 16) = 0x8000000101405710;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v6 = v1;
  return _swift_task_switch(sub_10070D7B8, v2, 0);
}

uint64_t sub_10070D7B8()
{
  sub_1011B0A20(*(void *)(v0 + 80), *(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40), *(void **)(v0 + 72), *(double *)(v0 + 48), *(double *)(v0 + 56), *(double *)(v0 + 64));
  uint64_t v1 = *(void **)(v0 + 72);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_task_switch(sub_10070D874, 0, 0);
}

uint64_t sub_10070D874()
{
  type metadata accessor for AnalyticsPublisher();
  v0[11] = swift_allocObject();
  swift_defaultActor_initialize();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[12] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10070D928;
  uint64_t v2 = v0[10];
  return sub_101196838(v2);
}

uint64_t sub_10070D928()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_10070DA40, 0, 0);
}

uint64_t sub_10070DA40()
{
  swift_release();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

id sub_10070DAA0(double a1, double a2, double a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v12 = type metadata accessor for UUID();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  unint64_t v15 = (char *)&v41 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000588C(&qword_10163C5D0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_10134CDE0;
  *(void *)(inited + 32) = 0x746341746E657665;
  *(void *)(inited + 40) = 0xEB000000006E6F69;
  *(void *)(inited + 48) = String._bridgeToObjectiveC()();
  *(unsigned char *)(inited + 56) = 0;
  strcpy((char *)(inited + 64), "previousEvent");
  *(_WORD *)(inited + 78) = -4864;
  *(void *)(inited + 80) = String._bridgeToObjectiveC()();
  *(unsigned char *)(inited + 88) = 0;
  *(void *)(inited + 96) = 0xD000000000000014;
  *(void *)(inited + 104) = 0x8000000101405740;
  *(void *)(inited + 112) = [objc_allocWithZone((Class)NSNumber) initWithDouble:a1];
  *(unsigned char *)(inited + 120) = 0;
  *(void *)(inited + 128) = 0x6E6F697461727564;
  *(void *)(inited + 136) = 0xEF4D4365636E6953;
  *(void *)(inited + 144) = [objc_allocWithZone((Class)NSNumber) initWithDouble:a2];
  *(unsigned char *)(inited + 152) = 0;
  *(void *)(inited + 160) = 0xD000000000000017;
  *(void *)(inited + 168) = 0x8000000101405760;
  *(void *)(inited + 176) = [objc_allocWithZone((Class)NSNumber) initWithDouble:a3];
  *(unsigned char *)(inited + 184) = 0;
  unint64_t v17 = sub_10092E03C(inited);
  if (!a8) {
    return (id)v17;
  }
  id v18 = a8;
  id result = [v18 systemVersion];
  if (result)
  {
    uint64_t v20 = (uint64_t)result;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v41 = v17;
    sub_10016D430(v20, 0, 0xD000000000000013, 0x80000001013FD3D0, isUniquelyReferenced_nonNull_native);
    unint64_t v22 = v41;
    swift_bridgeObjectRelease();
    id result = [v18 systemVersion];
    if (result)
    {
      uint64_t v23 = (uint64_t)result;
      char v24 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v41 = v22;
      sub_10016D430(v23, 0, 0xD00000000000001BLL, 0x80000001013FD3F0, v24);
      unint64_t v25 = v41;
      swift_bridgeObjectRelease();
      id v26 = SPBeaconTaskNameBeginLeashing;
      id v27 = [v18 taskInformation];
      type metadata accessor for SPBeaconTaskName(0);
      sub_10001D4B0(0, &qword_101653D80);
      sub_100714F88(&qword_1016387E0, type metadata accessor for SPBeaconTaskName);
      uint64_t v28 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

      if (*(void *)(v28 + 16) && (uint64_t v29 = sub_1007248DC(v26), (v30 & 1) != 0))
      {
        id v31 = *(id *)(*(void *)(v28 + 56) + 8 * v29);

        swift_bridgeObjectRelease();
        [v31 state];
      }
      else
      {

        swift_bridgeObjectRelease();
      }
      Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
      char v33 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v41 = v25;
      sub_10016D430((uint64_t)isa, 0, 0x6563697665447369, 0xEF6465687361654CLL, v33);
      unint64_t v17 = v41;
      swift_bridgeObjectRelease();
      id v34 = [self sharedInstance];
      LODWORD(isa) = [v34 isInternalBuild];

      if (!isa) {
        goto LABEL_11;
      }
      id v35 = [v18 identifier];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      UUID.uuidString.getter();
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
      NSString v36 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      char v37 = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v41 = v17;
      sub_10016D430((uint64_t)v36, 0, 0x6544646572696170, 0xEE00444965636976, v37);
      unint64_t v17 = v41;
      swift_bridgeObjectRelease();
      id v38 = [v18 serialNumber];
      if (v38)
      {
        uint64_t v39 = (uint64_t)v38;
        char v40 = swift_isUniquelyReferenced_nonNull_native();
        unint64_t v41 = v17;
        sub_10016D430(v39, 0, 0xD000000000000018, 0x80000001013F72C0, v40);
        unint64_t v17 = v41;

        swift_bridgeObjectRelease();
      }
      else
      {
LABEL_11:
      }
      return (id)v17;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_10070E094(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v28 = a4;
  uint64_t v29 = a5;
  uint64_t v26 = a3;
  uint64_t v27 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v27 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v27);
  uint64_t v9 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v12 = a1[3];
  long long v33 = a1[2];
  long long v34 = v12;
  char v35 = *((unsigned char *)a1 + 64);
  long long v13 = a1[1];
  long long v31 = *a1;
  long long v32 = v13;
  static os_log_type_t.default.getter();
  if (qword_101637248 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_101342130;
  uint64_t v15 = UUID.uuidString.getter();
  uint64_t v17 = v16;
  *(void *)(v14 + 56) = &type metadata for String;
  *(void *)(v14 + 64) = sub_10000B4CC();
  *(void *)(v14 + 32) = v15;
  *(void *)(v14 + 40) = v17;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v18 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v11, 1, 1, v18);
  sub_10001D010(v26, (uint64_t)v30);
  uint64_t v19 = v27;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a2, v27);
  unint64_t v20 = (*(unsigned __int8 *)(v7 + 80) + 152) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v21 = swift_allocObject();
  *(void *)(v21 + 16) = 0;
  *(void *)(v21 + 24) = 0;
  long long v22 = v34;
  *(_OWORD *)(v21 + 64) = v33;
  *(_OWORD *)(v21 + 80) = v22;
  *(unsigned char *)(v21 + 96) = v35;
  long long v23 = v32;
  *(_OWORD *)(v21 + 32) = v31;
  *(_OWORD *)(v21 + 48) = v23;
  sub_10001CEB0(v30, v21 + 104);
  *(void *)(v21 + 144) = v28;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v21 + v20, (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v19);
  *(void *)(v21 + ((v8 + v20 + 7) & 0xFFFFFFFFFFFFFFF8)) = v29;
  sub_100091B38((uint64_t)&v31);
  swift_retain();
  swift_retain();
  sub_100885EBC((uint64_t)v11, (uint64_t)&unk_10164C988, v21);
  return swift_release();
}

uint64_t sub_10070E3AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[5] = a7;
  v8[6] = a8;
  v8[3] = a5;
  v8[4] = a6;
  v8[2] = a4;
  uint64_t v9 = type metadata accessor for Date();
  v8[7] = v9;
  v8[8] = *(void *)(v9 - 8);
  v8[9] = swift_task_alloc();
  return _swift_task_switch(sub_10070E474, 0, 0);
}

uint64_t sub_10070E474()
{
  type metadata accessor for AnalyticsEvent(0);
  uint64_t v1 = (char *)swift_allocObject();
  *(void *)(v0 + 80) = v1;
  long long v8 = *(_OWORD *)(v0 + 16);
  swift_defaultActor_initialize();
  *((void *)v1 + 14) = sub_10092D664((uint64_t)_swiftEmptyArrayStorage);
  UUID.init()();
  uint64_t v2 = &v1[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
  uint64_t v3 = type metadata accessor for DispatchTime();
  uint64_t v4 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);
  v4(v2, 1, 1, v3);
  v4(&v1[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v3);
  *((void *)v1 + 15) = 0xD000000000000031;
  *((void *)v1 + 16) = 0x80000001014058A0;
  uint64_t v5 = swift_task_alloc();
  *(void *)(v0 + 88) = v5;
  *(_OWORD *)(v5 + 16) = v8;
  id v6 = (void *)swift_task_alloc();
  *(void *)(v0 + 96) = v6;
  *id v6 = v0;
  v6[1] = sub_10070E624;
  return sub_101194870((uint64_t)&unk_10164C998, v5);
}

uint64_t sub_10070E624()
{
  *(void *)(*(void *)v1 + 104) = v0;
  swift_task_dealloc();
  swift_task_dealloc();
  if (v0) {
    uint64_t v2 = sub_10070E9EC;
  }
  else {
    uint64_t v2 = sub_10070E754;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10070E754()
{
  type metadata accessor for AnalyticsPublisher();
  v0[14] = swift_allocObject();
  swift_defaultActor_initialize();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[15] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10070E808;
  uint64_t v2 = v0[10];
  return sub_101196838(v2);
}

uint64_t sub_10070E808()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_10070E920, 0, 0);
}

uint64_t sub_10070E920()
{
  uint64_t v1 = v0[9];
  uint64_t v2 = v0[7];
  uint64_t v3 = v0[8];
  uint64_t v4 = v0[5];
  static Date.trustedNow.getter(v1);
  sub_1006E1450(v4, v1);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  Transaction.capture()();
  swift_release();
  swift_task_dealloc();
  uint64_t v5 = (uint64_t (*)(void))v0[1];
  return v5();
}

uint64_t sub_10070E9EC()
{
  swift_release();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_10070EA58(uint64_t a1, uint64_t a2)
{
  v2[85] = a2;
  v2[84] = a1;
  sub_10000588C(&qword_10163B9F0);
  v2[86] = swift_task_alloc();
  v2[87] = type metadata accessor for StableIdentifier();
  v2[88] = swift_task_alloc();
  v2[89] = swift_task_alloc();
  v2[90] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for UUID();
  v2[91] = v3;
  v2[92] = *(void *)(v3 - 8);
  v2[93] = swift_task_alloc();
  return _swift_task_switch(sub_10070EB98, 0, 0);
}

uint64_t sub_10070EB98()
{
  size_t v86 = v0;
  int v1 = *(unsigned __int8 *)(v0[42]._countAndFlagsBits + 64);
  if (v1 == 1)
  {
    uint64_t v2 = &off_1015A1300;
  }
  else
  {
    if (v1 != 2)
    {
      sub_100715770();
      uint64_t v10 = (void *)swift_allocError();
      swift_willThrow();
      uint64_t p_object = (uint64_t)&v0[41]._object;
      static os_log_type_t.error.getter();
      if (qword_101637248 != -1) {
LABEL_61:
      }
        swift_once();
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v23 = swift_allocObject();
      *(_OWORD *)(v23 + 16) = xmmword_101342130;
      *(void *)uint64_t p_object = v10;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v24 = String.init<A>(describing:)();
      uint64_t v26 = v25;
      *(void *)(v23 + 56) = &type metadata for String;
      *(void *)(v23 + 64) = sub_10000B4CC();
      *(void *)(v23 + 32) = v24;
      *(void *)(v23 + 40) = v26;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      unint64_t v27 = sub_10092D7A8((uint64_t)_swiftEmptyArrayStorage);
      swift_errorRelease();
      swift_bridgeObjectRelease();
      goto LABEL_56;
    }
    uint64_t v2 = &off_1015A1330;
  }
  uint64_t v80 = (unsigned __int8 *)v2[2];
  unint64_t v82 = v0;
  if (!v80)
  {
    uint64_t v5 = _swiftEmptyDictionarySingleton;
LABEL_44:
    uint64_t v28 = (uint64_t)&v0[1];
    uint64_t v29 = (uint64_t)&v0[16];
    uint64_t v30 = (uint64_t)&v0[19];
    uint64_t v78 = (uint64_t)&v0[22];
    uint64_t v81 = (uint64_t)&v0[39]._object;
    uint64_t v84 = (uint64_t)&v0[40]._object;
    swift_bridgeObjectRelease();
    object = v0[42]._object;
    uint64_t countAndFlagsBits = v0[42]._countAndFlagsBits;
    uint64_t v33 = object[3];
    uint64_t v32 = object[4];
    sub_10001CD44(object, v33);
    uint64_t v0 = v82;
    uint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t))(v32 + 24))(v33, v32);
    NSString v36 = v35;
    v82[17]._object = &type metadata for String;
    unint64_t v37 = sub_1000336D4();
    v82[18]._uint64_t countAndFlagsBits = v37;
    v82[16]._uint64_t countAndFlagsBits = v34;
    v82[16]._object = v36;
    LOWORD(v82[18]._object) = 1;
    sub_1007157C4(v29, v30);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v85 = v5;
    sub_1001702CC(v30, 0xD000000000000013, 0x80000001013FD3D0, isUniquelyReferenced_nonNull_native);
    uint64_t v39 = v85;
    swift_bridgeObjectRelease();
    uint64_t v40 = object[3];
    uint64_t v41 = object[4];
    sub_10001CD44(object, v40);
    uint64_t v42 = (*(uint64_t (**)(uint64_t, uint64_t))(v41 + 24))(v40, v41);
    v82[23]._object = &type metadata for String;
    v82[24]._uint64_t countAndFlagsBits = v37;
    v82[22]._uint64_t countAndFlagsBits = v42;
    v82[22]._object = v43;
    LOWORD(v82[24]._object) = 1;
    sub_1007157C4(v78, v28);
    char v44 = swift_isUniquelyReferenced_nonNull_native();
    v85 = v39;
    sub_1001702CC(v28, 0xD00000000000001BLL, 0x80000001013FD3F0, v44);
    unint64_t v27 = (unint64_t)v85;
    swift_bridgeObjectRelease();
    sub_10001D608(countAndFlagsBits, v81, &qword_101669360);
    sub_10001D608(v81, v84, &qword_101669360);
    unint64_t v77 = v37;
    if ((unint64_t)v82[41]._countAndFlagsBits >> 60 != 15)
    {
      uint64_t v45 = v82[42]._countAndFlagsBits;
      sub_100091B38(v45);
      Swift::String v46 = Data.base64EncodedString(options:)(0);
      v82[5]._object = &type metadata for String;
      v82[6]._uint64_t countAndFlagsBits = v37;
      v82[4] = v46;
      LOWORD(v82[6]._object) = 1;
      sub_1007157C4((uint64_t)&v82[4], (uint64_t)&v82[25]);
      char v47 = swift_isUniquelyReferenced_nonNull_native();
      v85 = (void *)v27;
      sub_1001702CC((uint64_t)&v82[25], 0xD000000000000017, 0x80000001013FB140, v47);
      unint64_t v27 = (unint64_t)v85;
      swift_bridgeObjectRelease();
      sub_1003DD160(v45);
    }
    id v48 = [self sharedInstance];
    unsigned int v49 = [v48 isInternalBuild];

    if (v49)
    {
      char v50 = v82[46]._object;
      uint64_t v51 = v82[46]._countAndFlagsBits;
      size_t v52 = v82[45]._object;
      v53 = v82[42]._object;
      uint64_t v54 = object[3];
      uint64_t v55 = object[4];
      sub_10001CD44(v53, v54);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v55 + 8) + 8) + 32))(v54);
      uint64_t v56 = UUID.uuidString.getter();
      int v58 = v57;
      uint64_t v0 = v82;
      (*(void (**)(void *, void *))(v51 + 8))(v50, v52);
      v82[29]._object = &type metadata for String;
      v82[30]._uint64_t countAndFlagsBits = v77;
      v82[28]._uint64_t countAndFlagsBits = v56;
      v82[28]._object = v58;
      LOWORD(v82[30]._object) = 1;
      sub_1007157C4((uint64_t)&v82[28], (uint64_t)&v82[31]);
      char v59 = swift_isUniquelyReferenced_nonNull_native();
      v85 = (void *)v27;
      sub_1001702CC((uint64_t)&v82[31], 0x6544646572696170, 0xEE00444965636976, v59);
      unint64_t v27 = (unint64_t)v85;
      swift_bridgeObjectRelease();
      sub_10001D010((uint64_t)v53, (uint64_t)&v82[37]);
      sub_10000588C((uint64_t *)&unk_10164DBF0);
      uint64_t v60 = type metadata accessor for OwnedBeaconRecord();
      char v61 = swift_dynamicCast();
      uint64_t v62 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 56);
      if (v61)
      {
        uint64_t v63 = v82[45]._countAndFlagsBits;
        uint64_t v64 = (uint64_t)v82[44]._object;
        uint64_t v65 = v82[44]._countAndFlagsBits;
        uint64_t v66 = v82[43]._countAndFlagsBits;
        v62(v66, 0, 1, v60);
        sub_100715820(v66 + *(int *)(v60 + 24), v64, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
        sub_1007158FC(v66, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        sub_100715894(v64, v63, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
        sub_100715820(v63, v65, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
        uint64_t v68 = v82[45]._countAndFlagsBits;
        uint64_t v69 = v82[44]._countAndFlagsBits;
        if (EnumCaseMultiPayload == 1)
        {
          uint64_t v70 = *(void *)(v69 + 32);
          unint64_t v71 = *(void **)(v69 + 40);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v82[35]._object = &type metadata for String;
          v82[36]._uint64_t countAndFlagsBits = v77;
          v82[34]._uint64_t countAndFlagsBits = v70;
          v82[34]._object = v71;
          LOWORD(v82[36]._object) = 1;
          sub_1007157C4((uint64_t)&v82[34], (uint64_t)&v82[7]);
          char v72 = swift_isUniquelyReferenced_nonNull_native();
          v85 = (void *)v27;
          sub_1001702CC((uint64_t)&v82[7], 0xD000000000000018, 0x80000001013F72C0, v72);
          unint64_t v27 = (unint64_t)v85;
          swift_bridgeObjectRelease();
          uint64_t v73 = v68;
        }
        else
        {
          sub_1007158FC(v82[45]._countAndFlagsBits, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
          uint64_t v73 = v69;
        }
        sub_1007158FC(v73, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      }
      else
      {
        uint64_t v74 = v82[43]._countAndFlagsBits;
        v62(v74, 1, 1, v60);
        sub_10001DAB4(v74, &qword_10163B9F0);
      }
    }
LABEL_56:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    double v76 = (uint64_t (*)(unint64_t))v0->_object;
    return v76(v27);
  }
  uint64_t p_object = (uint64_t)&v0[10];
  uint64_t v83 = (uint64_t)&v0[13];
  swift_bridgeObjectRetain();
  uint64_t v4 = 0;
  uint64_t v5 = _swiftEmptyDictionarySingleton;
  while (1)
  {
    uint64_t v6 = (v4++)[(void)v2 + 32];
    unint64_t v7 = 0xED00007367616C46;
    uint64_t v8 = 0x776F6C667265766FLL;
    switch(v6)
    {
      case 1:
        uint64_t v8 = 0xD000000000000011;
        unint64_t v7 = 0x80000001013FB240;
        break;
      case 2:
        uint64_t v9 = "nearOwnerTimeOverflow";
        goto LABEL_26;
      case 3:
        uint64_t v9 = "rangingCountOverflow";
        goto LABEL_26;
      case 4:
        uint64_t v8 = 0xD000000000000014;
        unint64_t v7 = 0x80000001013FB1E0;
        break;
      case 5:
        uint64_t v8 = 0xD00000000000001BLL;
        unint64_t v7 = 0x80000001013FB1C0;
        break;
      case 6:
        uint64_t v8 = 0xD000000000000012;
        unint64_t v7 = 0x80000001013FB1A0;
        break;
      case 7:
        unint64_t v7 = 0xEA0000000000746ELL;
        uint64_t v8 = 0x756F436873617263;
        break;
      case 8:
        unint64_t v7 = 0xE900000000000065;
        uint64_t v8 = 0x6D695469746C756DLL;
        break;
      case 9:
        unint64_t v7 = 0xED0000656D695472;
        uint64_t v8 = 0x656E774F7261656ELL;
        break;
      case 10:
        unint64_t v7 = 0xE800000000000000;
        uint64_t v8 = 0x656D6954646C6977;
        break;
      case 11:
        uint64_t v8 = 0xD000000000000013;
        unint64_t v7 = 0x80000001013FB180;
        break;
      case 12:
        uint64_t v8 = 0xD000000000000012;
        unint64_t v7 = 0x80000001013FB160;
        break;
      case 13:
        unint64_t v7 = 0xEC000000746E756FLL;
        uint64_t v8 = 0x43676E69676E6172;
        break;
      case 14:
        unint64_t v7 = 0xEB00000000656D69;
        uint64_t v8 = 0x54676E69676E6172;
        break;
      case 15:
        uint64_t v8 = 0xD000000000000017;
        unint64_t v7 = 0x80000001013FB140;
        break;
      case 16:
        uint64_t v9 = "lastGoodLocationDate";
LABEL_26:
        unint64_t v7 = (unint64_t)v9 | 0x8000000000000000;
        uint64_t v8 = 0xD000000000000015;
        break;
      case 17:
        unint64_t v7 = 0xEF79654B79726164;
        uint64_t v8 = 0x6E6F636553697072;
        break;
      default:
        break;
    }
    sub_1010F4230(v6, p_object);
    uint64_t v0 = (Swift::String *)p_object;
    sub_1007157C4(p_object, v83);
    uint64_t p_object = swift_isUniquelyReferenced_nonNull_native();
    v85 = v5;
    uint64_t v10 = v5;
    unint64_t v12 = sub_100723FF4(v8, v7);
    uint64_t v13 = v5[2];
    BOOL v14 = (v11 & 1) == 0;
    uint64_t v15 = v13 + v14;
    if (__OFADD__(v13, v14))
    {
      __break(1u);
LABEL_60:
      __break(1u);
      goto LABEL_61;
    }
    char v16 = v11;
    if (v5[3] < v15) {
      break;
    }
    if (p_object)
    {
      uint64_t p_object = (uint64_t)v0;
      if (v11) {
        goto LABEL_7;
      }
    }
    else
    {
      uint64_t v10 = &v85;
      sub_100E84A60();
      uint64_t v5 = v85;
      uint64_t p_object = (uint64_t)v0;
      if (v16)
      {
LABEL_7:
        sub_100173E94(v83, v5[7] + 48 * v12);
        goto LABEL_8;
      }
    }
LABEL_35:
    v5[(v12 >> 6) + 8] |= 1 << v12;
    uint64_t v19 = (uint64_t *)(v5[6] + 16 * v12);
    *uint64_t v19 = v8;
    v19[1] = v7;
    sub_1007157C4(v83, v5[7] + 48 * v12);
    uint64_t v20 = v5[2];
    BOOL v21 = __OFADD__(v20, 1);
    uint64_t v22 = v20 + 1;
    if (v21) {
      goto LABEL_60;
    }
    v5[2] = v22;
    swift_bridgeObjectRetain();
LABEL_8:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v0 = v82;
    if (v80 == v4)
    {
      swift_bridgeObjectRelease();
      goto LABEL_44;
    }
  }
  sub_100E7306C(v15, p_object);
  uint64_t v5 = v85;
  uint64_t v10 = v85;
  uint64_t v17 = sub_100723FF4(v8, v7);
  if ((v16 & 1) == (v18 & 1))
  {
    unint64_t v12 = v17;
    uint64_t p_object = (uint64_t)v0;
    if (v16) {
      goto LABEL_7;
    }
    goto LABEL_35;
  }
  return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
}

void sub_10070F82C()
{
  static os_log_type_t.error.getter();
  if (qword_101637248 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_101347BA0;
  uint64_t v1 = UUID.uuidString.getter();
  uint64_t v3 = v2;
  *(void *)(v0 + 56) = &type metadata for String;
  unint64_t v4 = sub_10000B4CC();
  *(void *)(v0 + 64) = v4;
  *(void *)(v0 + 32) = v1;
  *(void *)(v0 + 40) = v3;
  swift_errorRetain();
  sub_10000588C(&qword_101638D40);
  uint64_t v5 = String.init<A>(describing:)();
  *(void *)(v0 + 96) = &type metadata for String;
  *(void *)(v0 + 104) = v4;
  *(void *)(v0 + 72) = v5;
  *(void *)(v0 + 80) = v6;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  Transaction.capture()();
}

uint64_t sub_10070F970(unint64_t a1)
{
  uint64_t result = type metadata accessor for BeaconObservation();
  int v3 = *(unsigned __int8 *)(a1 + *(int *)(result + 24));
  if ((v3 - 33) < 3) {
    return sub_10070BC1C(a1);
  }
  if (v3 == 30) {
    return sub_10070BB00(a1);
  }
  return result;
}

uint64_t sub_10070F9CC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!a2)
  {
    BOOL v7 = 0;
    a3 = 0;
    goto LABEL_14;
  }
  if (!a3)
  {
    BOOL v7 = 0;
LABEL_14:
    uint64_t v8 = a4;
LABEL_15:
    *(void *)uint64_t result = a4;
    *(void *)(result + 8) = a5;
    *(void *)(result + 16) = v8;
    *(unsigned char *)(result + 24) = v7;
    return a3;
  }
  if (a3 < 0) {
    goto LABEL_17;
  }
  uint64_t v5 = 0;
  uint64_t v6 = a4;
  while (1)
  {
    BOOL v7 = v6 == a5;
    if (v6 != a5) {
      break;
    }
    uint64_t v8 = 0;
LABEL_8:
    *(void *)(a2 + 8 * v5) = v6;
    if (a3 - 1 == v5) {
      goto LABEL_15;
    }
    ++v5;
    BOOL v9 = v6 == a5;
    uint64_t v6 = v8;
    if (v9)
    {
      BOOL v7 = 1;
      a3 = v5;
      goto LABEL_15;
    }
  }
  uint64_t v8 = v6 + 1;
  if (v6 != -1) {
    goto LABEL_8;
  }
  __break(1u);
LABEL_17:
  __break(1u);
  return result;
}

uint64_t sub_10070FA58(uint64_t result, uint64_t a2, uint64_t a3, __int16 a4)
{
  if (!a2)
  {
    BOOL v6 = 0;
    a3 = 0;
    goto LABEL_14;
  }
  if (!a3)
  {
    BOOL v6 = 0;
LABEL_14:
    unsigned __int8 v7 = a4;
LABEL_15:
    *(_WORD *)uint64_t result = a4;
    *(unsigned char *)(result + 2) = v7;
    *(unsigned char *)(result + 3) = v6;
    return a3;
  }
  if (a3 < 0) {
    goto LABEL_17;
  }
  uint64_t v4 = 0;
  unsigned __int8 v5 = a4;
  while (1)
  {
    BOOL v6 = v5 == (unsigned __int16)(a4 & 0xFF00) >> 8;
    if (v5 != (unsigned __int16)(a4 & 0xFF00) >> 8) {
      break;
    }
    unsigned __int8 v7 = 0;
LABEL_8:
    *(unsigned char *)(a2 + v4) = v5;
    if (a3 - 1 == v4) {
      goto LABEL_15;
    }
    ++v4;
    BOOL v8 = v5 == (unsigned __int16)(a4 & 0xFF00) >> 8;
    unsigned __int8 v5 = v7;
    if (v8)
    {
      BOOL v6 = 1;
      a3 = v4;
      goto LABEL_15;
    }
  }
  unsigned __int8 v7 = v5 + 1;
  if (((v5 + 1) & 0x100) == 0) {
    goto LABEL_8;
  }
  __break(1u);
LABEL_17:
  __break(1u);
  return result;
}

void *sub_10070FAFC(uint64_t a1)
{
  return sub_100711048(a1, &qword_10163A840, (uint64_t (*)(uint64_t *, void *, uint64_t, uint64_t))sub_100711960);
}

void *sub_10070FB20(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_10000588C(&qword_101643CD8);
  uint64_t v3 = *(void *)(type metadata accessor for OwnedBeaconGroup.PairingState(0) - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  BOOL v6 = (void *)swift_allocObject();
  uint64_t result = (void *)j__malloc_size(v6);
  if (v4)
  {
    if ((void *)((char *)result - v5) != (void *)0x8000000000000000 || v4 != -1)
    {
      v6[2] = v1;
      v6[3] = 2 * ((uint64_t)((uint64_t)result - v5) / v4);
      uint64_t v9 = sub_100711EFC(&v10, (uint64_t)v6 + v5, v1, a1);
      swift_bridgeObjectRetain();
      sub_100132C20();
      if (v9 == v1) {
        return v6;
      }
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t *sub_10070FC74(unint64_t a1)
{
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v2 = __CocoaDictionary.count.getter();
    if (v2) {
      goto LABEL_3;
    }
    return _swiftEmptyArrayStorage;
  }
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
LABEL_3:
  if (v2 <= 0)
  {
    uint64_t v3 = _swiftEmptyArrayStorage;
  }
  else
  {
    sub_10000588C(&qword_10166BD20);
    uint64_t v3 = (uint64_t *)swift_allocObject();
    int64_t v4 = j__malloc_size(v3);
    uint64_t v5 = v4 - 32;
    if (v4 < 32) {
      uint64_t v5 = v4 - 25;
    }
    v3[2] = v2;
    v3[3] = (2 * (v5 >> 3)) | 1;
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = sub_100712220((uint64_t)&v8, v3 + 4, v2, a1);
  uint64_t result = (uint64_t *)sub_100132C20();
  if (v6 == v2) {
    return v3;
  }
  __break(1u);
  return result;
}

void *sub_10070FD70(uint64_t a1)
{
  return sub_100711140(a1, &qword_10163A988);
}

void *sub_10070FD7C(uint64_t a1)
{
  return sub_100711678(a1, (uint64_t (*)(uint64_t *, void *, uint64_t, uint64_t))sub_1007124F8);
}

void *sub_10070FD94(uint64_t a1)
{
  return sub_1007107C8(a1, &qword_10164C958);
}

void *sub_10070FDA0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_10000588C((uint64_t *)&unk_101657810);
  uint64_t v3 = *(void *)(type metadata accessor for BeaconNamingRecord() - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (void *)swift_allocObject();
  uint64_t result = (void *)j__malloc_size(v6);
  if (v4)
  {
    if ((void *)((char *)result - v5) != (void *)0x8000000000000000 || v4 != -1)
    {
      v6[2] = v1;
      v6[3] = 2 * ((uint64_t)((uint64_t)result - v5) / v4);
      uint64_t v9 = sub_1007126F4(&v10, (uint64_t)v6 + v5, v1, a1, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord, (uint64_t (*)(void))type metadata accessor for BeaconNamingRecord);
      swift_bridgeObjectRetain();
      sub_100132C20();
      if (v9 == v1) {
        return v6;
      }
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void *sub_10070FF30(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_10000588C(&qword_10163A7E0);
  uint64_t v3 = *(void *)(type metadata accessor for SharedBeaconRecord(0) - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (void *)swift_allocObject();
  uint64_t result = (void *)j__malloc_size(v6);
  if (v4)
  {
    if ((void *)((char *)result - v5) != (void *)0x8000000000000000 || v4 != -1)
    {
      v6[2] = v1;
      v6[3] = 2 * ((uint64_t)((uint64_t)result - v5) / v4);
      uint64_t v9 = sub_1007126F4(&v10, (uint64_t)v6 + v5, v1, a1, type metadata accessor for SharedBeaconRecord, type metadata accessor for SharedBeaconRecord, type metadata accessor for SharedBeaconRecord);
      swift_bridgeObjectRetain();
      sub_100132C20();
      if (v9 == v1) {
        return v6;
      }
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void *sub_1007100C0(uint64_t a1)
{
  return sub_100711558(a1, &qword_101648238, (uint64_t (*)(uint64_t *, void *, uint64_t, uint64_t))sub_1007129FC);
}

void *sub_1007100E0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_10000588C(&qword_10163BC50);
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (void *)swift_allocObject();
  uint64_t result = (void *)j__malloc_size(v6);
  if (v4)
  {
    if ((void *)((char *)result - v5) != (void *)0x8000000000000000 || v4 != -1)
    {
      v6[2] = v1;
      v6[3] = 2 * ((uint64_t)((uint64_t)result - v5) / v4);
      swift_bridgeObjectRetain();
      uint64_t v9 = sub_100712BF8(&v10, (char *)v6 + v5, v1, a1);
      sub_100132C20();
      if (v9 == v1) {
        return v6;
      }
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void *sub_100710214(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_10000588C(&qword_101657700);
  uint64_t v3 = *(void *)(type metadata accessor for OwnerSharingCircle() - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (void *)swift_allocObject();
  uint64_t result = (void *)j__malloc_size(v6);
  if (v4)
  {
    if ((void *)((char *)result - v5) != (void *)0x8000000000000000 || v4 != -1)
    {
      v6[2] = v1;
      v6[3] = 2 * ((uint64_t)((uint64_t)result - v5) / v4);
      uint64_t v9 = sub_1007126F4(&v10, (uint64_t)v6 + v5, v1, a1, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle, (uint64_t (*)(void))type metadata accessor for OwnerSharingCircle);
      swift_bridgeObjectRetain();
      sub_100132C20();
      if (v9 == v1) {
        return v6;
      }
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void *sub_1007103A4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_10000588C(&qword_10163AA00);
  uint64_t v3 = *(void *)(type metadata accessor for OwnedBeaconGroup(0) - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (void *)swift_allocObject();
  uint64_t result = (void *)j__malloc_size(v6);
  if (v4)
  {
    if ((void *)((char *)result - v5) != (void *)0x8000000000000000 || v4 != -1)
    {
      v6[2] = v1;
      v6[3] = 2 * ((uint64_t)((uint64_t)result - v5) / v4);
      uint64_t v9 = sub_1007126F4(&v10, (uint64_t)v6 + v5, v1, a1, type metadata accessor for OwnedBeaconGroup, type metadata accessor for OwnedBeaconGroup, type metadata accessor for OwnedBeaconGroup);
      swift_bridgeObjectRetain();
      sub_100132C20();
      if (v9 == v1) {
        return v6;
      }
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void *sub_100710534(unint64_t a1)
{
  unint64_t v1 = a1;
  if (a1 >> 62) {
    goto LABEL_10;
  }
  uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  while (1)
  {
    if (v2 <= 0)
    {
      uint64_t v3 = _swiftEmptyArrayStorage;
    }
    else
    {
      sub_10000588C(&qword_10166BD20);
      uint64_t v3 = (void *)swift_allocObject();
      int64_t v4 = j__malloc_size(v3);
      uint64_t v5 = v4 - 32;
      if (v4 < 32) {
        uint64_t v5 = v4 - 25;
      }
      v3[2] = v2;
      v3[3] = (2 * (v5 >> 3)) | 1;
    }
    swift_bridgeObjectRetain();
    sub_100448B6C((unint64_t)(v3 + 4), v2, v1);
    unint64_t v1 = v6;
    swift_bridgeObjectRelease();
    if (v1 == v2) {
      break;
    }
    __break(1u);
LABEL_10:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v2) {
      return _swiftEmptyArrayStorage;
    }
  }
  return v3;
}

void *sub_10071062C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_10000588C(&qword_10163A920);
  uint64_t v3 = *(void *)(type metadata accessor for BeaconStatus(0) - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v6 = (void *)swift_allocObject();
  uint64_t result = (void *)j__malloc_size(v6);
  if (v4)
  {
    if ((void *)((char *)result - v5) != (void *)0x8000000000000000 || v4 != -1)
    {
      v6[2] = v1;
      v6[3] = 2 * ((uint64_t)((uint64_t)result - v5) / v4);
      uint64_t v9 = sub_1007126F4(&v10, (uint64_t)v6 + v5, v1, a1, type metadata accessor for BeaconStatus, type metadata accessor for BeaconStatus, type metadata accessor for BeaconStatus);
      swift_bridgeObjectRetain();
      sub_100132C20();
      if (v9 == v1) {
        return v6;
      }
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void *sub_1007107BC(uint64_t a1)
{
  return sub_1007107C8(a1, (uint64_t *)&unk_101657940);
}

void *sub_1007107C8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  sub_10000588C(a2);
  uint64_t v4 = (void *)swift_allocObject();
  int64_t v5 = j__malloc_size(v4);
  uint64_t v6 = v5 - 32;
  if (v5 < 32) {
    uint64_t v6 = v5 - 25;
  }
  v4[2] = v2;
  v4[3] = 2 * (v6 >> 3);
  unsigned __int8 v7 = sub_100713924(&v9, v4 + 4, v2, a1);
  swift_bridgeObjectRetain();
  sub_100132C20();
  if (v7 != (void *)v2)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v4;
}

void *sub_1007108AC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_10000588C(&qword_10163A8A0);
  uint64_t v3 = *(void *)(type metadata accessor for WildModeTrackingLocation(0) - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (void *)swift_allocObject();
  uint64_t result = (void *)j__malloc_size(v6);
  if (v4)
  {
    if ((void *)((char *)result - v5) != (void *)0x8000000000000000 || v4 != -1)
    {
      v6[2] = v1;
      v6[3] = 2 * ((uint64_t)((uint64_t)result - v5) / v4);
      uint64_t v9 = sub_1007126F4(&v10, (uint64_t)v6 + v5, v1, a1, type metadata accessor for WildModeTrackingLocation, type metadata accessor for WildModeTrackingLocation, type metadata accessor for WildModeTrackingLocation);
      swift_bridgeObjectRetain();
      sub_100132C20();
      if (v9 == v1) {
        return v6;
      }
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void *sub_100710A3C(uint64_t a1)
{
  return sub_100711314(a1, (unint64_t *)&unk_10164DC20, (uint64_t)SPUnauthorizedTrackingObservation_ptr, &qword_10164DCB0);
}

void *sub_100710A58(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_10000588C(&qword_10163BAB0);
  uint64_t v3 = (void *)swift_allocObject();
  size_t v4 = j__malloc_size(v3);
  v3[2] = v1;
  v3[3] = 2 * ((uint64_t)(v4 - 32) / 24);
  uint64_t v5 = sub_1007131EC((uint64_t)&v7, (uint64_t)(v3 + 4), v1, a1);
  swift_bridgeObjectRetain();
  sub_100132C20();
  if (v5 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v3;
}

void *sub_100710B50(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_10000588C(&qword_10163AA18);
  uint64_t v3 = *(void *)(type metadata accessor for RawSearchResult() - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = (void *)swift_allocObject();
  uint64_t result = (void *)j__malloc_size(v6);
  if (v4)
  {
    if ((void *)((char *)result - v5) != (void *)0x8000000000000000 || v4 != -1)
    {
      v6[2] = v1;
      v6[3] = 2 * ((uint64_t)((uint64_t)result - v5) / v4);
      uint64_t v9 = sub_1007126F4(&v10, (uint64_t)v6 + v5, v1, a1, (uint64_t (*)(void))type metadata accessor for RawSearchResult, (uint64_t (*)(void))type metadata accessor for RawSearchResult, (uint64_t (*)(void))type metadata accessor for RawSearchResult);
      swift_bridgeObjectRetain();
      sub_100132C20();
      if (v9 == v1) {
        return v6;
      }
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void *sub_100710CE0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_10000588C(&qword_101657670);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = j__malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 25;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 3);
  uint64_t v6 = sub_1007133FC(&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_100132C20();
  if (v6 != (void *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v3;
}

void *sub_100710DC8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4 >> 1;
  uint64_t v5 = (a4 >> 1) - a3;
  if (!__OFSUB__(a4 >> 1, a3))
  {
    if (!v5) {
      return _swiftEmptyArrayStorage;
    }
    uint64_t v8 = 2 * v5;
    if (v5 <= 0)
    {
      uint64_t v9 = _swiftEmptyArrayStorage;
      if (v4 != a3)
      {
LABEL_7:
        if (v5 < 0) {
          goto LABEL_19;
        }
        unint64_t v12 = a2 + 16 * a3;
        if (v12 < (unint64_t)&v9[v8 + 4] && (unint64_t)(v9 + 4) < v12 + v8 * 8) {
          goto LABEL_19;
        }
        swift_arrayInitWithCopy();
        return v9;
      }
    }
    else
    {
      sub_10000588C(&qword_101657710);
      uint64_t v9 = (void *)swift_allocObject();
      int64_t v10 = j__malloc_size(v9);
      uint64_t v11 = v10 - 32;
      if (v10 < 32) {
        uint64_t v11 = v10 - 17;
      }
      v9[2] = v5;
      v9[3] = 2 * (v11 >> 4);
      if (v4 != a3) {
        goto LABEL_7;
      }
    }
    __break(1u);
  }
  __break(1u);
LABEL_19:
  uint64_t result = (void *)_fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void *sub_100710F3C(void *result, unint64_t a2)
{
  uint64_t v3 = (uint64_t)result;
  unint64_t v4 = a2 - (void)result;
  if (a2 < (unint64_t)result)
  {
    if ((uint64_t)((uint64_t)result - a2) < 0)
    {
LABEL_17:
      __break(1u);
      goto LABEL_18;
    }
    unint64_t v4 = a2 - (void)result;
LABEL_5:
    uint64_t v5 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
    }
    else
    {
      if (v4 == -1) {
        return _swiftEmptyArrayStorage;
      }
      if (v5 <= 0)
      {
        uint64_t v6 = _swiftEmptyArrayStorage;
      }
      else
      {
        sub_10000588C(&qword_101657670);
        uint64_t v6 = (void *)swift_allocObject();
        int64_t v7 = j__malloc_size(v6);
        uint64_t v8 = v7 - 32;
        if (v7 < 32) {
          uint64_t v8 = v7 - 25;
        }
        v6[2] = v5;
        v6[3] = 2 * (v8 >> 3);
      }
      uint64_t result = (void *)sub_10070F9CC((uint64_t)&v9, (uint64_t)(v6 + 4), v5, v3, a2);
      if (result == (void *)v5) {
        return v6;
      }
    }
    __break(1u);
    goto LABEL_17;
  }
  if ((uint64_t)(a2 - (void)result) >= 0) {
    goto LABEL_5;
  }
LABEL_18:
  __break(1u);
  return result;
}

void *sub_100711028(uint64_t a1)
{
  return sub_100711048(a1, &qword_1016552B0, (uint64_t (*)(uint64_t *, void *, uint64_t, uint64_t))sub_100713590);
}

void *sub_100711048(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t *, void *, uint64_t, uint64_t))
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return _swiftEmptyArrayStorage;
  }
  sub_10000588C(a2);
  uint64_t v6 = (void *)swift_allocObject();
  int64_t v7 = j__malloc_size(v6);
  uint64_t v8 = v7 - 32;
  if (v7 < 32) {
    uint64_t v8 = v7 - 17;
  }
  v6[2] = v3;
  v6[3] = 2 * (v8 >> 4);
  uint64_t v9 = a3(&v11, v6 + 4, v3, a1);
  swift_bridgeObjectRetain();
  sub_100132C20();
  if (v9 != v3)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v6;
}

void *sub_100711134(uint64_t a1)
{
  return sub_100711140(a1, &qword_101657BC0);
}

void *sub_100711140(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  sub_10000588C(a2);
  uint64_t v4 = swift_allocObject();
  size_t v5 = j__malloc_size((const void *)v4);
  *(void *)(v4 + 16) = v2;
  *(void *)(v4 + 24) = 2 * v5 - 64;
  uint64_t v6 = sub_100713790(&v8, (unsigned char *)(v4 + 32), v2, a1);
  swift_bridgeObjectRetain();
  sub_100132C20();
  if (v6 != (void *)v2)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return (void *)v4;
}

void *sub_100711214(uint64_t a1)
{
  return sub_1007107C8(a1, &qword_10164B280);
}

void *sub_100711220(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_10000588C(&qword_10163AAF8);
  uint64_t v3 = swift_allocObject();
  size_t v4 = j__malloc_size((const void *)v3);
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = 2 * v4 - 64;
  size_t v5 = sub_100713B20(&v7, (unsigned char *)(v3 + 32), v1, a1);
  swift_bridgeObjectRetain();
  sub_100132C20();
  if (v5 != (void *)v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return (void *)v3;
}

void *sub_1007112F8(uint64_t a1)
{
  return sub_100711314(a1, (unint64_t *)&unk_10166BF80, (uint64_t)SPCBPeripheralManagerSessionKey_ptr, &qword_10164C940);
}

void *sub_100711314(uint64_t a1, unint64_t *a2, uint64_t a3, unint64_t *a4)
{
  if ((a1 & 0xC000000000000001) != 0)
  {
    uint64_t v8 = __CocoaSet.count.getter();
    if (v8) {
      goto LABEL_3;
    }
    return _swiftEmptyArrayStorage;
  }
  uint64_t v8 = *(void *)(a1 + 16);
  if (!v8) {
    return _swiftEmptyArrayStorage;
  }
LABEL_3:
  if (v8 <= 0)
  {
    uint64_t v9 = _swiftEmptyArrayStorage;
  }
  else
  {
    sub_10000588C(&qword_10166BD20);
    uint64_t v9 = (void *)swift_allocObject();
    int64_t v10 = j__malloc_size(v9);
    uint64_t v11 = v10 - 32;
    if (v10 < 32) {
      uint64_t v11 = v10 - 25;
    }
    v9[2] = v8;
    v9[3] = (2 * (v11 >> 3)) | 1;
  }
  swift_bridgeObjectRetain();
  unint64_t v12 = sub_1007140B0(&v14, v9 + 4, v8, a1, a2, a3, a4);
  uint64_t result = (void *)sub_100132C20();
  if (v12 == (void *)v8) {
    return v9;
  }
  __break(1u);
  return result;
}

void *sub_100711438(uint64_t a1)
{
  return sub_100711678(a1, (uint64_t (*)(uint64_t *, void *, uint64_t, uint64_t))sub_100713CB4);
}

void *sub_100711450(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_10000588C(&qword_1016552B0);
  uint64_t v3 = (void *)swift_allocObject();
  int64_t v4 = j__malloc_size(v3);
  uint64_t v5 = v4 - 32;
  if (v4 < 32) {
    uint64_t v5 = v4 - 17;
  }
  v3[2] = v1;
  v3[3] = 2 * (v5 >> 4);
  uint64_t v6 = sub_100713EB0((uint64_t)&v8, v3 + 4, v1, a1);
  swift_bridgeObjectRetain();
  sub_100132C20();
  if (v6 != v1)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v3;
}

void *sub_100711538(uint64_t a1)
{
  return sub_100711558(a1, &qword_10164C948, (uint64_t (*)(uint64_t *, void *, uint64_t, uint64_t))sub_100713CB4);
}

void *sub_100711558(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t *, void *, uint64_t, uint64_t))
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return _swiftEmptyArrayStorage;
  }
  sub_10000588C(a2);
  uint64_t v6 = (void *)swift_allocObject();
  int64_t v7 = j__malloc_size(v6);
  uint64_t v8 = v7 - 32;
  if (v7 < 32) {
    uint64_t v8 = v7 - 25;
  }
  v6[2] = v3;
  v6[3] = 2 * (v8 >> 3);
  uint64_t v9 = a3(&v11, v6 + 4, v3, a1);
  swift_bridgeObjectRetain();
  sub_100132C20();
  if (v9 != v3)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v6;
}

void *sub_100711644(uint64_t a1)
{
  return sub_100711314(a1, (unint64_t *)&unk_10165F040, (uint64_t)CKRecordZoneID_ptr, &qword_10164C950);
}

void *sub_100711660(uint64_t a1)
{
  return sub_100711678(a1, (uint64_t (*)(uint64_t *, void *, uint64_t, uint64_t))sub_1007143AC);
}

void *sub_100711678(uint64_t a1, uint64_t (*a2)(uint64_t *, void *, uint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return _swiftEmptyArrayStorage;
  }
  sub_10000588C(&qword_10166BD20);
  uint64_t v5 = (void *)swift_allocObject();
  int64_t v6 = j__malloc_size(v5);
  uint64_t v7 = v6 - 32;
  if (v6 < 32) {
    uint64_t v7 = v6 - 25;
  }
  v5[2] = v2;
  v5[3] = (2 * (v7 >> 3)) | 1;
  uint64_t v8 = a2(&v10, v5 + 4, v2, a1);
  swift_bridgeObjectRetain();
  sub_100132C20();
  if (v8 != v2)
  {
    __break(1u);
    return _swiftEmptyArrayStorage;
  }
  return v5;
}

void *sub_10071176C(__int16 a1)
{
  if (HIBYTE(a1) < a1) {
    unint64_t v1 = -(uint64_t)(a1 - HIBYTE(a1));
  }
  else {
    unint64_t v1 = HIBYTE(a1) - a1;
  }
  uint64_t v2 = v1 + 1;
  if (v1 == -1) {
    return _swiftEmptyArrayStorage;
  }
  if (v1 >= 0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v3 = _swiftEmptyArrayStorage;
  }
  else
  {
    sub_10000588C(&qword_10163A788);
    uint64_t v3 = (void *)swift_allocObject();
    size_t v5 = j__malloc_size(v3);
    v3[2] = v2;
    v3[3] = 2 * v5 - 64;
  }
  uint64_t result = (void *)sub_10070FA58((uint64_t)v7, (uint64_t)(v3 + 4), v2, a1);
  if (result == (void *)v2) {
    return v3;
  }
  __break(1u);
  return result;
}

void *sub_10071182C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_10000588C(&qword_10163BC50);
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  uint64_t v4 = *(void *)(v3 + 72);
  unint64_t v5 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  int64_t v6 = (void *)swift_allocObject();
  uint64_t result = (void *)j__malloc_size(v6);
  if (v4)
  {
    if ((void *)((char *)result - v5) != (void *)0x8000000000000000 || v4 != -1)
    {
      v6[2] = v1;
      v6[3] = 2 * ((uint64_t)((uint64_t)result - v5) / v4);
      swift_bridgeObjectRetain();
      uint64_t v9 = sub_100711B08(&v10, (char *)v6 + v5, v1, a1);
      sub_100132C20();
      if (v9 == v1) {
        return v6;
      }
      __break(1u);
      return _swiftEmptyArrayStorage;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void *sub_100711960(void *result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 64;
  uint64_t v5 = -1;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1 << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v8 = 0;
    a3 = 0;
LABEL_35:
    *uint64_t result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (void *)a3;
  }
  if (!a3)
  {
    int64_t v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  int64_t v8 = 0;
  uint64_t v9 = 0;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    uint64_t v13 = *(void *)(a4 + 48) + 16 * v12;
    int v14 = *(_DWORD *)v13;
    uint64_t v15 = *(void *)(v13 + 8);
    *(_DWORD *)a2 = v14;
    *(void *)(a2 + 8) = v15;
    a2 += 16;
    if (v9 == a3) {
      goto LABEL_35;
    }
  }
  int64_t v16 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v16 >= v10) {
    goto LABEL_30;
  }
  unint64_t v17 = *(void *)(v4 + 8 * v16);
  if (v17) {
    goto LABEL_19;
  }
  v8 += 2;
  if (v16 + 1 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v16;
    goto LABEL_34;
  }
  unint64_t v17 = *(void *)(v4 + 8 * v8);
  if (v17)
  {
LABEL_15:
    int64_t v16 = v8;
LABEL_19:
    unint64_t v19 = __clz(__rbit64(v17));
    unint64_t v7 = (v17 - 1) & v17;
    unint64_t v12 = v19 + (v16 << 6);
    int64_t v8 = v16;
    goto LABEL_8;
  }
  int64_t v18 = v16 + 2;
  if (v16 + 2 >= v10) {
    goto LABEL_30;
  }
  unint64_t v17 = *(void *)(v4 + 8 * v18);
  if (v17)
  {
LABEL_18:
    int64_t v16 = v18;
    goto LABEL_19;
  }
  int64_t v8 = v16 + 3;
  if (v16 + 3 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v16 + 2;
    goto LABEL_34;
  }
  unint64_t v17 = *(void *)(v4 + 8 * v8);
  if (v17) {
    goto LABEL_15;
  }
  int64_t v18 = v16 + 4;
  if (v16 + 4 >= v10)
  {
LABEL_30:
    unint64_t v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  unint64_t v17 = *(void *)(v4 + 8 * v18);
  if (v17) {
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v16 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v16 >= v10)
    {
      unint64_t v7 = 0;
      int64_t v8 = v10 - 1;
      goto LABEL_34;
    }
    unint64_t v17 = *(void *)(v4 + 8 * v16);
    ++v18;
    if (v17) {
      goto LABEL_19;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_100711B08(void *a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v8 - 8);
  int64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v41 = *(void *)(v11 - 8);
  uint64_t result = __chkstk_darwin(v11);
  uint64_t v40 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = a4;
  uint64_t v15 = a4 + 64;
  uint64_t v14 = *(void *)(a4 + 64);
  uint64_t v32 = -1 << *(unsigned char *)(a4 + 32);
  if (-v32 < 64) {
    uint64_t v16 = ~(-1 << -(char)v32);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v14;
  if (!a2)
  {
    int64_t v18 = 0;
    a3 = 0;
LABEL_39:
    uint64_t v28 = ~v32;
    *a1 = v42;
    a1[1] = v15;
    a1[2] = v28;
    a1[3] = v18;
    a1[4] = v17;
    return a3;
  }
  if (!a3)
  {
    int64_t v18 = 0;
    goto LABEL_39;
  }
  if (a3 < 0) {
    goto LABEL_41;
  }
  uint64_t v36 = a3;
  int64_t v18 = 0;
  a3 = 0;
  unint64_t v19 = v40;
  uint64_t v38 = v41 + 16;
  uint64_t v39 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v41 + 56);
  uint64_t v37 = v41 + 48;
  char v35 = (uint64_t (**)(char *, char *, uint64_t))(v41 + 32);
  uint64_t v33 = v15;
  int64_t v34 = (unint64_t)(63 - v32) >> 6;
  int64_t v30 = v34 - 1;
  long long v31 = a1;
  if (!v17) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v20 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  unint64_t v21 = v20 | (v18 << 6);
  while (1)
  {
    uint64_t v25 = v41;
    uint64_t v26 = *(void *)(v41 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v41 + 16))(v10, *(void *)(v42 + 48) + v26 * v21, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v10, 0, 1, v11);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v10, 1, v11) == 1)
    {
      uint64_t v15 = v33;
      goto LABEL_38;
    }
    ++a3;
    unint64_t v27 = *v35;
    (*v35)(v19, v10, v11);
    uint64_t result = v27(a2, v19, v11);
    if (a3 == v36)
    {
      a3 = v36;
      a1 = v31;
      uint64_t v15 = v33;
      goto LABEL_39;
    }
    a2 += v26;
    if (v17) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v22 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    uint64_t v15 = v33;
    if (v22 >= v34) {
      goto LABEL_37;
    }
    unint64_t v23 = *(void *)(v33 + 8 * v22);
    if (!v23)
    {
      int64_t v24 = v18 + 2;
      ++v18;
      if (v22 + 1 >= v34) {
        goto LABEL_37;
      }
      unint64_t v23 = *(void *)(v33 + 8 * v24);
      if (v23) {
        goto LABEL_14;
      }
      int64_t v18 = v22 + 1;
      if (v22 + 2 >= v34) {
        goto LABEL_37;
      }
      unint64_t v23 = *(void *)(v33 + 8 * (v22 + 2));
      if (v23)
      {
        v22 += 2;
      }
      else
      {
        int64_t v18 = v22 + 2;
        if (v22 + 3 >= v34) {
          goto LABEL_37;
        }
        unint64_t v23 = *(void *)(v33 + 8 * (v22 + 3));
        if (!v23)
        {
          int64_t v24 = v22 + 4;
          int64_t v18 = v22 + 3;
          if (v22 + 4 < v34)
          {
            unint64_t v23 = *(void *)(v33 + 8 * v24);
            if (!v23)
            {
              while (1)
              {
                int64_t v22 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_42;
                }
                if (v22 >= v34)
                {
                  int64_t v18 = v30;
                  goto LABEL_37;
                }
                unint64_t v23 = *(void *)(v33 + 8 * v22);
                ++v24;
                if (v23) {
                  goto LABEL_21;
                }
              }
            }
LABEL_14:
            int64_t v22 = v24;
            goto LABEL_21;
          }
LABEL_37:
          (*v39)(v10, 1, 1, v11);
          unint64_t v17 = 0;
LABEL_38:
          sub_10001DAB4((uint64_t)v10, &qword_101638CF0);
          a1 = v31;
          goto LABEL_39;
        }
        v22 += 3;
      }
    }
LABEL_21:
    unint64_t v17 = (v23 - 1) & v23;
    unint64_t v21 = __clz(__rbit64(v23)) + (v22 << 6);
    int64_t v18 = v22;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_100711EFC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for OwnedBeaconGroup.PairingState(0);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8 - 8);
  unint64_t v12 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v29 - v14;
  uint64_t v34 = a4;
  uint64_t v17 = a4 + 64;
  uint64_t v16 = *(void *)(a4 + 64);
  uint64_t v31 = -1 << *(unsigned char *)(a4 + 32);
  if (-v31 < 64) {
    uint64_t v18 = ~(-1 << -(char)v31);
  }
  else {
    uint64_t v18 = -1;
  }
  unint64_t v19 = v18 & v16;
  if (!a2)
  {
    int64_t v20 = 0;
    a3 = 0;
LABEL_34:
    uint64_t v28 = ~v31;
    *a1 = v34;
    a1[1] = v17;
    a1[2] = v28;
    a1[3] = v20;
    a1[4] = v19;
    return a3;
  }
  if (!a3)
  {
    int64_t v20 = 0;
    goto LABEL_34;
  }
  if (a3 < 0)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  int64_t v30 = a1;
  int64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v32 = v17;
  int64_t v33 = (unint64_t)(63 - v31) >> 6;
  int64_t v29 = v33 - 1;
  if (!v19) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v22 = __clz(__rbit64(v19));
  v19 &= v19 - 1;
  unint64_t v23 = v22 | (v20 << 6);
  while (1)
  {
    ++v21;
    uint64_t v27 = *(void *)(v9 + 72);
    sub_100715820(*(void *)(v34 + 56) + v27 * v23, (uint64_t)v12, type metadata accessor for OwnedBeaconGroup.PairingState);
    sub_100715894((uint64_t)v12, (uint64_t)v15, type metadata accessor for OwnedBeaconGroup.PairingState);
    uint64_t result = sub_100715894((uint64_t)v15, a2, type metadata accessor for OwnedBeaconGroup.PairingState);
    if (v21 == a3) {
      goto LABEL_33;
    }
    a2 += v27;
    if (v19) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v24 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
      __break(1u);
      goto LABEL_41;
    }
    if (v24 >= v33)
    {
      unint64_t v19 = 0;
      a3 = v21;
LABEL_33:
      a1 = v30;
      uint64_t v17 = v32;
      goto LABEL_34;
    }
    uint64_t v17 = v32;
    unint64_t v25 = *(void *)(v32 + 8 * v24);
    if (!v25) {
      break;
    }
LABEL_18:
    unint64_t v19 = (v25 - 1) & v25;
    unint64_t v23 = __clz(__rbit64(v25)) + (v24 << 6);
    int64_t v20 = v24;
  }
  v20 += 2;
  if (v24 + 1 >= v33)
  {
    unint64_t v19 = 0;
    int64_t v20 = v24;
LABEL_39:
    a3 = v21;
    a1 = v30;
    goto LABEL_34;
  }
  unint64_t v25 = *(void *)(v32 + 8 * v20);
  if (v25) {
    goto LABEL_14;
  }
  int64_t v26 = v24 + 2;
  if (v24 + 2 >= v33) {
    goto LABEL_36;
  }
  unint64_t v25 = *(void *)(v32 + 8 * v26);
  if (v25) {
    goto LABEL_17;
  }
  int64_t v20 = v24 + 3;
  if (v24 + 3 >= v33)
  {
    unint64_t v19 = 0;
    int64_t v20 = v24 + 2;
    goto LABEL_39;
  }
  unint64_t v25 = *(void *)(v32 + 8 * v20);
  if (v25)
  {
LABEL_14:
    int64_t v24 = v20;
    goto LABEL_18;
  }
  int64_t v26 = v24 + 4;
  if (v24 + 4 >= v33)
  {
LABEL_36:
    unint64_t v19 = 0;
    goto LABEL_39;
  }
  unint64_t v25 = *(void *)(v32 + 8 * v26);
  if (v25)
  {
LABEL_17:
    int64_t v24 = v26;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v24 = v26 + 1;
    if (__OFADD__(v26, 1)) {
      break;
    }
    if (v24 >= v33)
    {
      unint64_t v19 = 0;
      int64_t v20 = v29;
      goto LABEL_39;
    }
    unint64_t v25 = *(void *)(v32 + 8 * v24);
    ++v26;
    if (v25) {
      goto LABEL_18;
    }
  }
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_100712220(uint64_t result, uint64_t *a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = a4;
  uint64_t v6 = a2;
  unint64_t v7 = (void *)result;
  if ((a4 & 0xC000000000000001) != 0)
  {
    uint64_t result = __CocoaDictionary.makeIterator()();
    unint64_t v8 = 0;
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    unint64_t v4 = result | 0x8000000000000000;
    if (v6) {
      goto LABEL_3;
    }
LABEL_37:
    int64_t v11 = 0;
    a3 = 0;
LABEL_46:
    *unint64_t v7 = v4;
    v7[1] = v8;
    v7[2] = v9;
    v7[3] = v11;
    unsigned char v7[4] = v10;
    return a3;
  }
  uint64_t v19 = -1 << *(unsigned char *)(a4 + 32);
  unint64_t v8 = a4 + 64;
  uint64_t v20 = ~v19;
  uint64_t v21 = -v19;
  if (v21 < 64) {
    uint64_t v22 = ~(-1 << v21);
  }
  else {
    uint64_t v22 = -1;
  }
  unint64_t v10 = v22 & *(void *)(a4 + 64);
  uint64_t v9 = v20;
  if (!a2) {
    goto LABEL_37;
  }
LABEL_3:
  if (!a3)
  {
    int64_t v11 = 0;
    goto LABEL_46;
  }
  if (a3 < 0)
  {
LABEL_48:
    __break(1u);
    goto LABEL_49;
  }
  uint64_t v23 = v9;
  int64_t v11 = 0;
  uint64_t v12 = 0;
  int64_t v24 = (unint64_t)(v9 + 64) >> 6;
  while ((v4 & 0x8000000000000000) != 0)
  {
    if (!__CocoaDictionary.Iterator.next()()
      || (swift_unknownObjectRelease(),
          sub_10001D4B0(0, (unint64_t *)&qword_10163AE60),
          swift_unknownObjectRetain(),
          swift_dynamicCast(),
          uint64_t v15 = v25,
          uint64_t result = swift_unknownObjectRelease(),
          !v25))
    {
      a3 = v12;
LABEL_45:
      uint64_t v9 = v23;
      goto LABEL_46;
    }
LABEL_6:
    ++v12;
    *v6++ = v15;
    if (v12 == a3) {
      goto LABEL_45;
    }
  }
  if (v10)
  {
    unint64_t v13 = __clz(__rbit64(v10));
    v10 &= v10 - 1;
    unint64_t v14 = v13 | (v11 << 6);
LABEL_23:
    uint64_t result = (uint64_t)*(id *)(*(void *)(v4 + 56) + 8 * v14);
    if (!result) {
      goto LABEL_44;
    }
    uint64_t v15 = result;
    goto LABEL_6;
  }
  int64_t v16 = v11 + 1;
  if (__OFADD__(v11, 1))
  {
    __break(1u);
    goto LABEL_48;
  }
  if (v16 >= v24) {
    goto LABEL_40;
  }
  unint64_t v17 = *(void *)(v8 + 8 * v16);
  if (v17) {
    goto LABEL_22;
  }
  v11 += 2;
  if (v16 + 1 >= v24)
  {
    unint64_t v10 = 0;
    int64_t v11 = v16;
    goto LABEL_44;
  }
  unint64_t v17 = *(void *)(v8 + 8 * v11);
  if (v17)
  {
LABEL_18:
    int64_t v16 = v11;
LABEL_22:
    unint64_t v10 = (v17 - 1) & v17;
    unint64_t v14 = __clz(__rbit64(v17)) + (v16 << 6);
    int64_t v11 = v16;
    goto LABEL_23;
  }
  int64_t v18 = v16 + 2;
  if (v16 + 2 >= v24) {
    goto LABEL_40;
  }
  unint64_t v17 = *(void *)(v8 + 8 * v18);
  if (v17)
  {
LABEL_21:
    int64_t v16 = v18;
    goto LABEL_22;
  }
  int64_t v11 = v16 + 3;
  if (v16 + 3 >= v24)
  {
    unint64_t v10 = 0;
    int64_t v11 = v16 + 2;
    goto LABEL_44;
  }
  unint64_t v17 = *(void *)(v8 + 8 * v11);
  if (v17) {
    goto LABEL_18;
  }
  int64_t v18 = v16 + 4;
  if (v16 + 4 >= v24)
  {
LABEL_40:
    unint64_t v10 = 0;
LABEL_44:
    a3 = v12;
    goto LABEL_45;
  }
  unint64_t v17 = *(void *)(v8 + 8 * v18);
  if (v17) {
    goto LABEL_21;
  }
  while (1)
  {
    int64_t v16 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    if (v16 >= v24)
    {
      unint64_t v10 = 0;
      int64_t v11 = v24 - 1;
      goto LABEL_44;
    }
    unint64_t v17 = *(void *)(v8 + 8 * v16);
    ++v18;
    if (v17) {
      goto LABEL_22;
    }
  }
LABEL_49:
  __break(1u);
  return result;
}

uint64_t sub_1007124F8(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  int64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    *int64_t v11 = *(void *)(*(void *)(a4 + 56) + 8 * v16);
    if (v13 == v10)
    {
      swift_retain();
      goto LABEL_38;
    }
    ++v11;
    uint64_t result = swift_retain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1007126F4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void), uint64_t (*a6)(void), uint64_t (*a7)(void))
{
  uint64_t v39 = a6;
  uint64_t v12 = a5(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12 - 8);
  unint64_t v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = __chkstk_darwin(v14);
  int64_t v19 = (char *)&v33 - v18;
  uint64_t v40 = a4;
  uint64_t v21 = a4 + 56;
  uint64_t v20 = *(void *)(a4 + 56);
  uint64_t v36 = -1 << *(unsigned char *)(a4 + 32);
  if (-v36 < 64) {
    uint64_t v22 = ~(-1 << -(char)v36);
  }
  else {
    uint64_t v22 = -1;
  }
  unint64_t v23 = v22 & v20;
  if (!a2)
  {
    int64_t v24 = 0;
    a3 = 0;
LABEL_34:
    uint64_t v32 = ~v36;
    *a1 = v40;
    a1[1] = v21;
    a1[2] = v32;
    a1[3] = v24;
    a1[4] = v23;
    return a3;
  }
  if (!a3)
  {
    int64_t v24 = 0;
    goto LABEL_34;
  }
  if (a3 < 0)
  {
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
  char v35 = a1;
  int64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v37 = v21;
  int64_t v38 = (unint64_t)(63 - v36) >> 6;
  int64_t v34 = v38 - 1;
  if (!v23) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v26 = __clz(__rbit64(v23));
  v23 &= v23 - 1;
  unint64_t v27 = v26 | (v24 << 6);
  while (1)
  {
    ++v25;
    uint64_t v31 = *(void *)(v13 + 72);
    sub_100715820(*(void *)(v40 + 48) + v31 * v27, (uint64_t)v16, v39);
    sub_100715894((uint64_t)v16, (uint64_t)v19, a7);
    uint64_t result = sub_100715894((uint64_t)v19, a2, a7);
    if (v25 == a3) {
      goto LABEL_33;
    }
    a2 += v31;
    if (v23) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v28 = v24 + 1;
    if (__OFADD__(v24, 1))
    {
      __break(1u);
      goto LABEL_41;
    }
    if (v28 >= v38)
    {
      unint64_t v23 = 0;
      a3 = v25;
LABEL_33:
      a1 = v35;
      uint64_t v21 = v37;
      goto LABEL_34;
    }
    uint64_t v21 = v37;
    unint64_t v29 = *(void *)(v37 + 8 * v28);
    if (!v29) {
      break;
    }
LABEL_18:
    unint64_t v23 = (v29 - 1) & v29;
    unint64_t v27 = __clz(__rbit64(v29)) + (v28 << 6);
    int64_t v24 = v28;
  }
  v24 += 2;
  if (v28 + 1 >= v38)
  {
    unint64_t v23 = 0;
    int64_t v24 = v28;
LABEL_39:
    a3 = v25;
    a1 = v35;
    goto LABEL_34;
  }
  unint64_t v29 = *(void *)(v37 + 8 * v24);
  if (v29) {
    goto LABEL_14;
  }
  int64_t v30 = v28 + 2;
  if (v28 + 2 >= v38) {
    goto LABEL_36;
  }
  unint64_t v29 = *(void *)(v37 + 8 * v30);
  if (v29) {
    goto LABEL_17;
  }
  int64_t v24 = v28 + 3;
  if (v28 + 3 >= v38)
  {
    unint64_t v23 = 0;
    int64_t v24 = v28 + 2;
    goto LABEL_39;
  }
  unint64_t v29 = *(void *)(v37 + 8 * v24);
  if (v29)
  {
LABEL_14:
    int64_t v28 = v24;
    goto LABEL_18;
  }
  int64_t v30 = v28 + 4;
  if (v28 + 4 >= v38)
  {
LABEL_36:
    unint64_t v23 = 0;
    goto LABEL_39;
  }
  unint64_t v29 = *(void *)(v37 + 8 * v30);
  if (v29)
  {
LABEL_17:
    int64_t v28 = v30;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v28 = v30 + 1;
    if (__OFADD__(v30, 1)) {
      break;
    }
    if (v28 >= v38)
    {
      unint64_t v23 = 0;
      int64_t v24 = v34;
      goto LABEL_39;
    }
    unint64_t v29 = *(void *)(v37 + 8 * v28);
    ++v30;
    if (v29) {
      goto LABEL_18;
    }
  }
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_1007129FC(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  int64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    *int64_t v11 = *(void *)(*(void *)(a4 + 56) + 8 * v16);
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    ++v11;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_100712BF8(void *a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v41 = *(void *)(v11 - 8);
  uint64_t result = __chkstk_darwin(v11);
  uint64_t v40 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = a4;
  uint64_t v15 = a4 + 56;
  uint64_t v14 = *(void *)(a4 + 56);
  uint64_t v32 = -1 << *(unsigned char *)(a4 + 32);
  if (-v32 < 64) {
    uint64_t v16 = ~(-1 << -(char)v32);
  }
  else {
    uint64_t v16 = -1;
  }
  unint64_t v17 = v16 & v14;
  if (!a2)
  {
    int64_t v18 = 0;
    a3 = 0;
LABEL_39:
    uint64_t v28 = ~v32;
    *a1 = v42;
    a1[1] = v15;
    a1[2] = v28;
    a1[3] = v18;
    a1[4] = v17;
    return a3;
  }
  if (!a3)
  {
    int64_t v18 = 0;
    goto LABEL_39;
  }
  if (a3 < 0) {
    goto LABEL_41;
  }
  uint64_t v36 = a3;
  int64_t v18 = 0;
  a3 = 0;
  int64_t v19 = v40;
  uint64_t v38 = v41 + 16;
  uint64_t v39 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v41 + 56);
  uint64_t v37 = v41 + 48;
  char v35 = (uint64_t (**)(char *, char *, uint64_t))(v41 + 32);
  uint64_t v33 = v15;
  int64_t v34 = (unint64_t)(63 - v32) >> 6;
  int64_t v30 = v34 - 1;
  uint64_t v31 = a1;
  if (!v17) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v20 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  unint64_t v21 = v20 | (v18 << 6);
  while (1)
  {
    uint64_t v25 = v41;
    uint64_t v26 = *(void *)(v41 + 72);
    (*(void (**)(char *, unint64_t, uint64_t))(v41 + 16))(v10, *(void *)(v42 + 48) + v26 * v21, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v10, 0, 1, v11);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v10, 1, v11) == 1)
    {
      uint64_t v15 = v33;
      goto LABEL_38;
    }
    ++a3;
    unint64_t v27 = *v35;
    (*v35)(v19, v10, v11);
    uint64_t result = v27(a2, v19, v11);
    if (a3 == v36)
    {
      a3 = v36;
      a1 = v31;
      uint64_t v15 = v33;
      goto LABEL_39;
    }
    a2 += v26;
    if (v17) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v22 = v18 + 1;
    if (__OFADD__(v18, 1)) {
      break;
    }
    uint64_t v15 = v33;
    if (v22 >= v34) {
      goto LABEL_37;
    }
    unint64_t v23 = *(void *)(v33 + 8 * v22);
    if (!v23)
    {
      int64_t v24 = v18 + 2;
      ++v18;
      if (v22 + 1 >= v34) {
        goto LABEL_37;
      }
      unint64_t v23 = *(void *)(v33 + 8 * v24);
      if (v23) {
        goto LABEL_14;
      }
      int64_t v18 = v22 + 1;
      if (v22 + 2 >= v34) {
        goto LABEL_37;
      }
      unint64_t v23 = *(void *)(v33 + 8 * (v22 + 2));
      if (v23)
      {
        v22 += 2;
      }
      else
      {
        int64_t v18 = v22 + 2;
        if (v22 + 3 >= v34) {
          goto LABEL_37;
        }
        unint64_t v23 = *(void *)(v33 + 8 * (v22 + 3));
        if (!v23)
        {
          int64_t v24 = v22 + 4;
          int64_t v18 = v22 + 3;
          if (v22 + 4 < v34)
          {
            unint64_t v23 = *(void *)(v33 + 8 * v24);
            if (!v23)
            {
              while (1)
              {
                int64_t v22 = v24 + 1;
                if (__OFADD__(v24, 1)) {
                  goto LABEL_42;
                }
                if (v22 >= v34)
                {
                  int64_t v18 = v30;
                  goto LABEL_37;
                }
                unint64_t v23 = *(void *)(v33 + 8 * v22);
                ++v24;
                if (v23) {
                  goto LABEL_21;
                }
              }
            }
LABEL_14:
            int64_t v22 = v24;
            goto LABEL_21;
          }
LABEL_37:
          (*v39)(v10, 1, 1, v11);
          unint64_t v17 = 0;
LABEL_38:
          sub_10001DAB4((uint64_t)v10, &qword_101638CF0);
          a1 = v31;
          goto LABEL_39;
        }
        v22 += 3;
      }
    }
LABEL_21:
    unint64_t v17 = (v23 - 1) & v23;
    unint64_t v21 = __clz(__rbit64(v23)) + (v22 << 6);
    int64_t v18 = v22;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

uint64_t sub_100712FEC(uint64_t result, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    unint64_t v20 = (uint64_t *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = *v20;
    unint64_t v22 = v20[1];
    *uint64_t v11 = *v20;
    v11[1] = v22;
    if (v13 == v10)
    {
      sub_1000361E0(v21, v22);
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = sub_1000361E0(v21, v22);
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1007131EC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_39:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_39;
  }
  if (a3 < 0) {
    goto LABEL_41;
  }
  uint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  uint64_t v23 = -1 << *(unsigned char *)(a4 + 32);
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = *(void *)(a4 + 48) + 24 * v16;
    uint64_t v22 = *(void *)(v20 + 8);
    uint64_t v21 = *(void *)(v20 + 16);
    *(unsigned char *)uint64_t v11 = *(unsigned char *)v20;
    *(void *)(v11 + 8) = v22;
    *(void *)(v11 + 16) = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 24;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1)) {
      break;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18)
    {
      v12 += 2;
      if (v17 + 1 >= v14)
      {
        unint64_t v9 = 0;
        int64_t v12 = v17;
      }
      else
      {
        unint64_t v18 = *(void *)(v6 + 8 * v12);
        if (v18) {
          goto LABEL_14;
        }
        int64_t v19 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_33;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v19);
        if (v18)
        {
LABEL_17:
          int64_t v17 = v19;
          goto LABEL_18;
        }
        int64_t v12 = v17 + 3;
        if (v17 + 3 < v14)
        {
          unint64_t v18 = *(void *)(v6 + 8 * v12);
          if (v18)
          {
LABEL_14:
            int64_t v17 = v12;
            goto LABEL_18;
          }
          int64_t v19 = v17 + 4;
          if (v17 + 4 >= v14)
          {
LABEL_33:
            unint64_t v9 = 0;
            goto LABEL_37;
          }
          unint64_t v18 = *(void *)(v6 + 8 * v19);
          if (!v18)
          {
            while (1)
            {
              int64_t v17 = v19 + 1;
              if (__OFADD__(v19, 1)) {
                goto LABEL_42;
              }
              if (v17 >= v14)
              {
                unint64_t v9 = 0;
                int64_t v12 = v14 - 1;
                goto LABEL_37;
              }
              unint64_t v18 = *(void *)(v6 + 8 * v17);
              ++v19;
              if (v18) {
                goto LABEL_18;
              }
            }
          }
          goto LABEL_17;
        }
        unint64_t v9 = 0;
        int64_t v12 = v17 + 2;
      }
LABEL_37:
      uint64_t v10 = v13;
LABEL_38:
      uint64_t v7 = v23;
      goto LABEL_39;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  __break(1u);
LABEL_41:
  __break(1u);
LABEL_42:
  __break(1u);
  return result;
}

void *sub_1007133FC(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 56;
  uint64_t v5 = -1;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1 << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v8 = 0;
    a3 = 0;
LABEL_35:
    *uint64_t result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (void *)a3;
  }
  if (!a3)
  {
    int64_t v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  int64_t v8 = 0;
  uint64_t v9 = 0;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(void *)(*(void *)(a4 + 48) + 8 * v12);
    if (v9 == a3) {
      goto LABEL_35;
    }
  }
  int64_t v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v13);
  if (v14) {
    goto LABEL_19;
  }
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13;
    goto LABEL_34;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    int64_t v13 = v8;
LABEL_19:
    unint64_t v16 = __clz(__rbit64(v14));
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = v16 + (v13 << 6);
    int64_t v8 = v13;
    goto LABEL_8;
  }
  int64_t v15 = v13 + 2;
  if (v13 + 2 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    int64_t v13 = v15;
    goto LABEL_19;
  }
  int64_t v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13 + 2;
    goto LABEL_34;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14) {
    goto LABEL_15;
  }
  int64_t v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    unint64_t v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14) {
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v13 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v13 >= v10)
    {
      unint64_t v7 = 0;
      int64_t v8 = v10 - 1;
      goto LABEL_34;
    }
    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v15;
    if (v14) {
      goto LABEL_19;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

uint64_t sub_100713590(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  unint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *unint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

void *sub_100713790(void *result, unsigned char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 56;
  uint64_t v5 = -1;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1 << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v8 = 0;
    a3 = 0;
LABEL_35:
    *uint64_t result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (void *)a3;
  }
  if (!a3)
  {
    int64_t v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  int64_t v8 = 0;
  uint64_t v9 = 0;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(unsigned char *)(*(void *)(a4 + 48) + v12);
    if (v9 == a3) {
      goto LABEL_35;
    }
  }
  int64_t v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v13);
  if (v14) {
    goto LABEL_19;
  }
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13;
    goto LABEL_34;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    int64_t v13 = v8;
LABEL_19:
    unint64_t v16 = __clz(__rbit64(v14));
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = v16 + (v13 << 6);
    int64_t v8 = v13;
    goto LABEL_8;
  }
  int64_t v15 = v13 + 2;
  if (v13 + 2 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    int64_t v13 = v15;
    goto LABEL_19;
  }
  int64_t v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13 + 2;
    goto LABEL_34;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14) {
    goto LABEL_15;
  }
  int64_t v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    unint64_t v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14) {
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v13 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v13 >= v10)
    {
      unint64_t v7 = 0;
      int64_t v8 = v10 - 1;
      goto LABEL_34;
    }
    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v15;
    if (v14) {
      goto LABEL_19;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

void *sub_100713924(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return (void *)v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  unint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = *(void **)(*(void *)(a4 + 48) + 8 * v16);
    *unint64_t v11 = v20;
    if (v13 == v10)
    {
      id v21 = v20;
      goto LABEL_38;
    }
    ++v11;
    uint64_t result = v20;
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

void *sub_100713B20(void *result, unsigned char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 64;
  uint64_t v5 = -1;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1 << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v8 = 0;
    a3 = 0;
LABEL_35:
    *uint64_t result = a4;
    result[1] = v4;
    result[2] = ~v6;
    result[3] = v8;
    result[4] = v7;
    return (void *)a3;
  }
  if (!a3)
  {
    int64_t v8 = 0;
    goto LABEL_35;
  }
  if (a3 < 0)
  {
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }
  int64_t v8 = 0;
  uint64_t v9 = 0;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v8 << 6);
LABEL_8:
    ++v9;
    *a2++ = *(unsigned char *)(*(void *)(a4 + 48) + v12);
    if (v9 == a3) {
      goto LABEL_35;
    }
  }
  int64_t v13 = v8 + 1;
  if (__OFADD__(v8, 1))
  {
    __break(1u);
    goto LABEL_37;
  }
  if (v13 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v13);
  if (v14) {
    goto LABEL_19;
  }
  v8 += 2;
  if (v13 + 1 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13;
    goto LABEL_34;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14)
  {
LABEL_15:
    int64_t v13 = v8;
LABEL_19:
    unint64_t v16 = __clz(__rbit64(v14));
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = v16 + (v13 << 6);
    int64_t v8 = v13;
    goto LABEL_8;
  }
  int64_t v15 = v13 + 2;
  if (v13 + 2 >= v10) {
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_18:
    int64_t v13 = v15;
    goto LABEL_19;
  }
  int64_t v8 = v13 + 3;
  if (v13 + 3 >= v10)
  {
    unint64_t v7 = 0;
    int64_t v8 = v13 + 2;
    goto LABEL_34;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v8);
  if (v14) {
    goto LABEL_15;
  }
  int64_t v15 = v13 + 4;
  if (v13 + 4 >= v10)
  {
LABEL_30:
    unint64_t v7 = 0;
LABEL_34:
    a3 = v9;
    goto LABEL_35;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14) {
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v13 = v15 + 1;
    if (__OFADD__(v15, 1)) {
      break;
    }
    if (v13 >= v10)
    {
      unint64_t v7 = 0;
      int64_t v8 = v10 - 1;
      goto LABEL_34;
    }
    unint64_t v14 = *(void *)(v4 + 8 * v13);
    ++v15;
    if (v14) {
      goto LABEL_19;
    }
  }
LABEL_38:
  __break(1u);
  return result;
}

void *sub_100713CB4(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return (void *)v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  unint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = *(void **)(*(void *)(a4 + 56) + 8 * v16);
    *unint64_t v11 = v20;
    if (v13 == v10)
    {
      id v21 = v20;
      goto LABEL_38;
    }
    ++v11;
    uint64_t result = v20;
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_100713EB0(uint64_t result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (void *)result;
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  unint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    *unint64_t v11 = *v20;
    v11[1] = v21;
    if (v13 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_38;
    }
    v11 += 2;
    uint64_t result = swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

void *sub_1007140B0(void *result, void *a2, uint64_t a3, uint64_t a4, unint64_t *a5, uint64_t a6, unint64_t *a7)
{
  uint64_t v7 = a4;
  unint64_t v9 = a2;
  uint64_t v29 = result;
  if ((a4 & 0xC000000000000001) != 0)
  {
    __CocoaSet.makeIterator()();
    sub_10001D4B0(0, a5);
    sub_10012E2E4(a7, a5);
    uint64_t result = (void *)Set.Iterator.init(_cocoa:)();
    uint64_t v7 = v33;
    uint64_t v12 = v34;
    uint64_t v13 = v35;
    int64_t v14 = v36;
    unint64_t v15 = v37;
    if (v9) {
      goto LABEL_3;
    }
LABEL_36:
    uint64_t v16 = 0;
    goto LABEL_38;
  }
  int64_t v14 = 0;
  uint64_t v24 = -1 << *(unsigned char *)(a4 + 32);
  uint64_t v12 = a4 + 56;
  uint64_t v13 = ~v24;
  uint64_t v25 = -v24;
  if (v25 < 64) {
    uint64_t v26 = ~(-1 << v25);
  }
  else {
    uint64_t v26 = -1;
  }
  unint64_t v15 = v26 & *(void *)(a4 + 56);
  if (!a2) {
    goto LABEL_36;
  }
LABEL_3:
  if (!a3)
  {
    uint64_t v16 = 0;
LABEL_38:
    unint64_t v27 = v29;
LABEL_41:
    *unint64_t v27 = v7;
    v27[1] = v12;
    v27[2] = v13;
    v27[3] = v14;
    v27[4] = v15;
    return (void *)v16;
  }
  if (a3 < 0) {
    goto LABEL_48;
  }
  uint64_t v16 = 0;
  int64_t v30 = (unint64_t)(v13 + 64) >> 6;
  uint64_t v28 = v13;
  while (1)
  {
    if (v7 < 0)
    {
      if (!__CocoaSet.Iterator.next()()) {
        goto LABEL_40;
      }
      sub_10001D4B0(0, a5);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      id v19 = v32;
      uint64_t result = (void *)swift_unknownObjectRelease();
      if (!v32) {
        goto LABEL_40;
      }
      goto LABEL_8;
    }
    if (v15)
    {
      unint64_t v17 = __clz(__rbit64(v15));
      v15 &= v15 - 1;
      unint64_t v18 = v17 | (v14 << 6);
      goto LABEL_7;
    }
    int64_t v20 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v20 >= v30)
    {
      unint64_t v15 = 0;
      goto LABEL_40;
    }
    unint64_t v21 = *(void *)(v12 + 8 * v20);
    if (v21) {
      goto LABEL_23;
    }
    int64_t v22 = v14 + 2;
    if (v14 + 2 >= v30)
    {
      unint64_t v15 = 0;
      ++v14;
      goto LABEL_40;
    }
    unint64_t v21 = *(void *)(v12 + 8 * v22);
    if (!v21)
    {
      if (v14 + 3 >= v30) {
        goto LABEL_44;
      }
      unint64_t v21 = *(void *)(v12 + 8 * (v14 + 3));
      if (v21)
      {
        int64_t v20 = v14 + 3;
        goto LABEL_23;
      }
      int64_t v22 = v14 + 4;
      if (v14 + 4 >= v30)
      {
        unint64_t v15 = 0;
        v14 += 3;
        goto LABEL_40;
      }
      unint64_t v21 = *(void *)(v12 + 8 * v22);
      if (!v21)
      {
        int64_t v20 = v14 + 5;
        if (v14 + 5 >= v30)
        {
LABEL_44:
          unint64_t v15 = 0;
          int64_t v14 = v22;
          goto LABEL_40;
        }
        unint64_t v21 = *(void *)(v12 + 8 * v20);
        if (!v21)
        {
          int64_t v23 = v14 + 6;
          while (v30 != v23)
          {
            unint64_t v21 = *(void *)(v12 + 8 * v23++);
            if (v21)
            {
              int64_t v20 = v23 - 1;
              goto LABEL_23;
            }
          }
          unint64_t v15 = 0;
          int64_t v14 = v30 - 1;
          goto LABEL_40;
        }
        goto LABEL_23;
      }
    }
    int64_t v20 = v22;
LABEL_23:
    unint64_t v15 = (v21 - 1) & v21;
    unint64_t v18 = __clz(__rbit64(v21)) + (v20 << 6);
    int64_t v14 = v20;
LABEL_7:
    uint64_t result = *(id *)(*(void *)(v7 + 48) + 8 * v18);
    id v19 = result;
    if (!result) {
      goto LABEL_40;
    }
LABEL_8:
    ++v16;
    *v9++ = v19;
    if (v16 == a3)
    {
      uint64_t v16 = a3;
LABEL_40:
      uint64_t v13 = v28;
      unint64_t v27 = v29;
      goto LABEL_41;
    }
  }
  __break(1u);
LABEL_48:
  __break(1u);
  return result;
}

void *sub_1007143AC(void *result, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = result;
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v10 = 0;
LABEL_38:
    *uint64_t v5 = a4;
    v5[1] = v6;
    v5[2] = ~v7;
    v5[3] = v12;
    v5[4] = v9;
    return (void *)v10;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_38;
  }
  if (a3 < 0)
  {
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  unint64_t v11 = a2;
  int64_t v12 = 0;
  uint64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  if (!v9) {
    goto LABEL_9;
  }
LABEL_8:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v12 << 6);
  while (1)
  {
    ++v13;
    int64_t v20 = *(void **)(*(void *)(a4 + 48) + 8 * v16);
    *unint64_t v11 = v20;
    if (v13 == v10)
    {
      id v21 = v20;
      goto LABEL_38;
    }
    ++v11;
    uint64_t result = v20;
    if (v9) {
      goto LABEL_8;
    }
LABEL_9:
    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1))
    {
      __break(1u);
      goto LABEL_40;
    }
    if (v17 >= v14) {
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18) {
      break;
    }
LABEL_18:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v12 = v17;
  }
  v12 += 2;
  if (v17 + 1 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18) {
    goto LABEL_14;
  }
  int64_t v19 = v17 + 2;
  if (v17 + 2 >= v14) {
    goto LABEL_33;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18) {
    goto LABEL_17;
  }
  int64_t v12 = v17 + 3;
  if (v17 + 3 >= v14)
  {
    unint64_t v9 = 0;
    int64_t v12 = v17 + 2;
    goto LABEL_37;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v12);
  if (v18)
  {
LABEL_14:
    int64_t v17 = v12;
    goto LABEL_18;
  }
  int64_t v19 = v17 + 4;
  if (v17 + 4 >= v14)
  {
LABEL_33:
    unint64_t v9 = 0;
LABEL_37:
    uint64_t v10 = v13;
    goto LABEL_38;
  }
  unint64_t v18 = *(void *)(v6 + 8 * v19);
  if (v18)
  {
LABEL_17:
    int64_t v17 = v19;
    goto LABEL_18;
  }
  while (1)
  {
    int64_t v17 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v17 >= v14)
    {
      unint64_t v9 = 0;
      int64_t v12 = v14 - 1;
      goto LABEL_37;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    ++v19;
    if (v18) {
      goto LABEL_18;
    }
  }
LABEL_41:
  __break(1u);
  return result;
}

uint64_t sub_1007145A8(void (*a1)(char *, char *, uint64_t), uint64_t a2, uint64_t a3)
{
  uint64_t v48 = a2;
  unsigned int v49 = a1;
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for UUID();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  uint64_t v11 = __chkstk_darwin(v8);
  Swift::String v46 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v42 - v12;
  uint64_t v14 = type metadata accessor for OwnedBeaconRecord();
  v52[3] = v14;
  v52[4] = sub_100714F88(&qword_101638DD0, (void (*)(uint64_t))type metadata accessor for OwnedBeaconRecord);
  uint64_t v15 = (uint64_t)sub_10001D958(v52);
  sub_100715820((uint64_t)v49, v15, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
  uint64_t v16 = v15 + *(int *)(v14 + 20);
  uint64_t v50 = v9;
  int64_t v17 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  uint64_t v18 = v8;
  unsigned int v49 = v17;
  v17(v13, (char *)v16, v8);
  uint64_t v47 = a3;
  static Date.trustedNow.getter((uint64_t)v7);
  LOBYTE(v15) = sub_1006E1680((uint64_t)v13, (uint64_t)v7);
  int64_t v19 = *(void (**)(char *, uint64_t))(v5 + 8);
  v19(v7, v4);
  if (v15)
  {
    static Date.trustedNow.getter((uint64_t)v7);
    sub_1006E146C((uint64_t)v13, (uint64_t)v7);
    v19(v7, v4);
    uint64_t v20 = v47;
    uint64_t v44 = sub_1008C0E1C((uint64_t)v13);
    id v21 = v46;
    v49(v46, v13, v18);
    sub_10001D010((uint64_t)v52, (uint64_t)v51);
    uint64_t v22 = *(unsigned __int8 *)(v50 + 80);
    uint64_t v45 = v13;
    uint64_t v23 = v50;
    uint64_t v42 = v22 | 7;
    uint64_t v43 = (v22 + 16) & ~v22;
    uint64_t v24 = v10 + v43;
    uint64_t v25 = v43;
    unint64_t v26 = (v24 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v27 = (v26 + 47) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v28 = (v27 + 15) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v29 = swift_allocObject();
    int64_t v30 = *(void (**)(uint64_t, char *, uint64_t))(v23 + 32);
    v30(v29 + v25, v21, v18);
    sub_10001CEB0(v51, v29 + v26);
    *(void *)(v29 + v27) = v20;
    uint64_t v31 = v48;
    *(void *)(v29 + v28) = v48;
    swift_retain();
    swift_retain();
    Future.addSuccess(block:)();
    swift_release();
    swift_release();
    v49(v21, v45, v18);
    uint64_t v32 = swift_allocObject();
    v30(v32 + v43, v21, v18);
    *(void *)(v32 + v26) = v31;
    swift_retain();
    Future.addFailure(block:)();
    swift_release();
    swift_release();
    swift_release();
    uint64_t v33 = v18;
    uint64_t v34 = v50;
    uint64_t v35 = v45;
  }
  else
  {
    uint64_t v35 = v13;
    uint64_t v34 = v50;
    uint64_t v36 = v18;
    static os_log_type_t.default.getter();
    if (qword_101637248 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v37 = swift_allocObject();
    *(_OWORD *)(v37 + 16) = xmmword_101342130;
    uint64_t v38 = UUID.uuidString.getter();
    uint64_t v40 = v39;
    *(void *)(v37 + 56) = &type metadata for String;
    *(void *)(v37 + 64) = sub_10000B4CC();
    *(void *)(v37 + 32) = v38;
    *(void *)(v37 + 40) = v40;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    uint64_t v33 = v36;
  }
  (*(void (**)(char *, uint64_t))(v34 + 8))(v35, v33);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v52);
}

void *sub_100714AA8(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for StableIdentifier();
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for OwnedBeaconRecord();
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v24 = (uint64_t)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v21 - v10;
  uint64_t result = _swiftEmptyArrayStorage;
  uint64_t v25 = _swiftEmptyArrayStorage;
  uint64_t v13 = *(void *)(a1 + 16);
  if (v13)
  {
    uint64_t v21 = v1;
    uint64_t v14 = *(void *)(v9 + 72);
    unint64_t v23 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    uint64_t v15 = a1 + v23;
    uint64_t v16 = _swiftEmptyArrayStorage;
    uint64_t v22 = v6;
    do
    {
      sub_100715820(v15, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      sub_100715820((uint64_t)&v11[*(int *)(v6 + 24)], (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      sub_1007158FC((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v18 = v3;
        sub_100715894((uint64_t)v11, v24, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1000B74D8(0, v16[2] + 1, 1);
        }
        uint64_t v16 = v25;
        unint64_t v20 = v25[2];
        unint64_t v19 = v25[3];
        if (v20 >= v19 >> 1)
        {
          sub_1000B74D8(v19 > 1, v20 + 1, 1);
          uint64_t v16 = v25;
        }
        v16[2] = v20 + 1;
        sub_100715894(v24, (uint64_t)v16 + v23 + v20 * v14, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
        uint64_t v3 = v18;
        uint64_t v6 = v22;
      }
      else
      {
        sub_1007158FC((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
      }
      v15 += v14;
      --v13;
    }
    while (v13);
    return v25;
  }
  return result;
}

uint64_t sub_100714D78()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 80, 7);
}

uint64_t sub_100714DC0()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 40);
  long long v8 = *(_OWORD *)(v0 + 48);
  long long v9 = *(_OWORD *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 64);
  uint64_t v5 = *(void *)(v0 + 72);
  uint64_t v6 = swift_task_alloc();
  *(void *)(v1 + 16) = v6;
  *(void *)uint64_t v6 = v1;
  *(void *)(v6 + 8) = sub_100033F68;
  *(void *)(v6 + 72) = v5;
  *(void *)(v6 + 64) = v4;
  *(_OWORD *)(v6 + 48) = v8;
  *(void *)(v6 + 32) = v2;
  *(void *)(v6 + 40) = v3;
  *(_OWORD *)(v6 + 16) = v9;
  return _swift_task_switch(sub_10070D640, 0, 0);
}

uint64_t sub_100714EA8()
{
  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_100714EE0()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100033F68;
  v3[2] = v2;
  return _swift_task_switch(sub_10070CDC4, 0, 0);
}

uint64_t sub_100714F88(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_100714FD0()
{
  *(void *)(*(void *)(v0 + 16) + 72) = *(void *)(v0 + 24);
}

uint64_t sub_100714FDC()
{
  swift_unknownObjectRelease();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100715014()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10001D2E4;
  return sub_10070A308();
}

uint64_t sub_1007150C0()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1007150FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10070B46C(a1, a2);
}

uint64_t sub_100715108(uint64_t a1, uint64_t a2, char a3)
{
  return sub_10070B6A0(a1, a2, a3);
}

uint64_t sub_100715110()
{
  return OSAllocatedUnfairLock.callAsFunction<A>(_:)();
}

unint64_t sub_100715168()
{
  unint64_t result = qword_10163A518;
  if (!qword_10163A518)
  {
    sub_10000592C((uint64_t *)&unk_1016569C0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10163A518);
  }
  return result;
}

uint64_t sub_1007151C4()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + v6);
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, ((((v6 + 47) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 8, v5);
}

uint64_t sub_100715290(long long *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (v5 + 47) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)(v1 + v6);
  uint64_t v8 = *(void *)(v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8));

  return sub_10070E094(a1, v1 + v4, v1 + v5, v7, v8);
}

uint64_t sub_100715344()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

void sub_1007153E8()
{
  type metadata accessor for UUID();

  sub_10070F82C();
}

uint64_t sub_100715484()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  swift_unknownObjectRelease();
  unint64_t v5 = *(void *)(v0 + 40);
  if (v5 >> 60 != 15) {
    sub_10001CFB8(*(void *)(v0 + 32), v5);
  }
  uint64_t v6 = (v3 + 152) & ~v3;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 104);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v6, v1);
  swift_release();

  return _swift_deallocObject(v0, ((v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8, v3 | 7);
}

uint64_t sub_100715594(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 152) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = (uint64_t)(v1 + 4);
  uint64_t v9 = (uint64_t)(v1 + 13);
  uint64_t v10 = v1[18];
  uint64_t v11 = (uint64_t)v1 + v5;
  uint64_t v12 = *(void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v13 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v13;
  *uint64_t v13 = v2;
  v13[1] = sub_10001D2E4;
  return sub_10070E3AC(a1, v6, v7, v8, v9, v10, v11, v12);
}

uint64_t sub_1007156D8()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_10013067C;
  return sub_10070EA58(v2, v3);
}

unint64_t sub_100715770()
{
  unint64_t result = qword_10164C9A0;
  if (!qword_10164C9A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164C9A0);
  }
  return result;
}

uint64_t sub_1007157C4(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100715820(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_100715888(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 72);
}

uint64_t sub_100715894(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1007158FC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t sub_10071595C()
{
  return sub_10070B394(*(unsigned __int8 **)(v0 + 16));
}

unsigned char *storeEnumTagSinglePayload for SPObserverAnalytics.SPObserverAnalyticsError(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x100715A00);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for SPObserverAnalytics.SPObserverAnalyticsError()
{
  return &type metadata for SPObserverAnalytics.SPObserverAnalyticsError;
}

unint64_t sub_100715A3C()
{
  unint64_t result = qword_10164C9A8;
  if (!qword_10164C9A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164C9A8);
  }
  return result;
}

uint64_t sub_100715A94()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10164C9B0);
  uint64_t v1 = sub_100010324(v0, (uint64_t)qword_10164C9B0);
  if (qword_101636C98 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100010324(v0, (uint64_t)qword_10170E2D8);
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_100715B5C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for DatabaseState();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
}

uint64_t sub_100715BCC(uint64_t a1)
{
  return sub_100715C04(a1, qword_10170E158);
}

uint64_t sub_100715BE8(uint64_t a1)
{
  return sub_100715C04(a1, qword_10170E170);
}

uint64_t sub_100715C04(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for Table();
  sub_10001E384(v3, a2);
  sub_100010324(v3, (uint64_t)a2);
  return Table.init(_:database:)();
}

uint64_t sub_100715C6C(uint64_t a1, char a2)
{
  uint64_t v4 = v2;
  v3[2] = a1;
  v3[3] = v2;
  uint64_t v7 = type metadata accessor for DatabaseState();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = swift_task_alloc();
  v3[4] = v9;
  swift_defaultActor_initialize();
  (*(void (**)(uint64_t, void, uint64_t))(v8 + 104))(v9, enum case for DatabaseState.unavailable(_:), v7);
  sub_10000588C(&qword_10164CB20);
  uint64_t v10 = swift_allocObject();
  *(_DWORD *)(v10 + ((*(unsigned int *)(*(void *)v10 + 48) + 3) & 0x1FFFFFFFCLL)) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v10 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v10 + 16), v9, v7);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v7);
  *(void *)(v4 + 112) = v10;
  sub_10000588C(&qword_10164CB28);
  swift_allocObject();
  *(void *)(v4 + 120) = AsyncStreamProvider.init()();
  uint64_t v11 = OBJC_IVAR____TtC12searchpartyd20CloudStorageDatabase_logger;
  if (qword_101636C98 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = sub_100010324(v12, (uint64_t)qword_10170E2D8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v4 + v11, v13, v12);
  *(void *)(v4 + OBJC_IVAR____TtC12searchpartyd20CloudStorageDatabase_connectionPair) = 0;
  *(_DWORD *)(v4 + OBJC_IVAR____TtC12searchpartyd20CloudStorageDatabase_currentVersion) = 2;
  uint64_t v14 = v4 + OBJC_IVAR____TtC12searchpartyd20CloudStorageDatabase_baseContainerURL;
  uint64_t v15 = type metadata accessor for URL();
  v3[5] = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  v3[6] = v16;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v14, a1, v15);
  *(unsigned char *)(v4 + OBJC_IVAR____TtC12searchpartyd20CloudStorageDatabase_temporary) = a2 & 1;
  return _swift_task_switch(sub_100715F98, v4, 0);
}

uint64_t sub_100715F98()
{
  (*(void (**)(void, void))(v0[6] + 8))(v0[2], v0[5]);
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(uint64_t))v0[1];
  uint64_t v2 = v0[3];
  return v1(v2);
}

uint64_t sub_10071601C()
{
  swift_release();
  swift_release();
  uint64_t v1 = v0 + OBJC_IVAR____TtC12searchpartyd20CloudStorageDatabase_logger;
  uint64_t v2 = type metadata accessor for Logger();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  uint64_t v3 = v0 + OBJC_IVAR____TtC12searchpartyd20CloudStorageDatabase_baseContainerURL;
  uint64_t v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  swift_defaultActor_destroy();

  return _swift_defaultActor_deallocate(v0);
}

uint64_t sub_1007160FC()
{
  return type metadata accessor for CloudStorageDatabase();
}

uint64_t type metadata accessor for CloudStorageDatabase()
{
  uint64_t result = qword_10164C9F0;
  if (!qword_10164C9F0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_100716150()
{
  uint64_t result = type metadata accessor for Logger();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for URL();
    if (v2 <= 0x3F) {
      return swift_updateClassMetadata2();
    }
  }
  return result;
}

uint64_t sub_100716254()
{
  return sub_1007191D8((unint64_t *)&unk_10164CAD8);
}

uint64_t sub_100716288@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1 + OBJC_IVAR____TtC12searchpartyd20CloudStorageDatabase_baseContainerURL;
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);

  return v5(a1, v3, v4);
}

uint64_t sub_1007162FC()
{
  return swift_retain();
}

uint64_t sub_100716348(uint64_t a1)
{
  uint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC12searchpartyd20CloudStorageDatabase_connectionPair);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_release();
}

uint64_t (*sub_10071639C())()
{
  return j__swift_endAccess_0;
}

void sub_1007163F8(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 112);
  uint64_t v4 = v3 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v3 + 16);
  uint64_t v5 = (os_unfair_lock_s *)(v3 + ((*(unsigned int *)(*(void *)v3 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v5);
  sub_100715B5C(v4, a1);

  os_unfair_lock_unlock(v5);
}

uint64_t sub_1007164A8()
{
  sub_10000588C(&qword_10164CB08);
  uint64_t v1 = *(void *)(type metadata accessor for DatabaseState() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_101342130;
  uint64_t v4 = v3 + v2;
  uint64_t v5 = *(void *)(v0 + 112);
  uint64_t v6 = v5 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v5 + 16);
  uint64_t v7 = (os_unfair_lock_s *)(v5 + ((*(unsigned int *)(*(void *)v5 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v7);
  sub_100715B5C(v6, v4);
  os_unfair_lock_unlock(v7);
  AsyncStreamProvider.stream(initialEvents:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100716604()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC12searchpartyd20CloudStorageDatabase_temporary);
}

uint64_t sub_100716614()
{
  return sub_100718FB8();
}

uint64_t sub_10071662C()
{
  return URL.appendingPathComponent(_:isDirectory:)();
}

void sub_1007166D8()
{
}

uint64_t sub_100716710()
{
  uint64_t v1 = type metadata accessor for DatabaseState();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void *)(v0 + 112);
  uint64_t v6 = v5 + *(void *)(class metadata base offset for ManagedBuffer + *(void *)v5 + 16);
  uint64_t v7 = (os_unfair_lock_s *)(v5 + ((*(unsigned int *)(*(void *)v5 + 48) + 3) & 0x1FFFFFFFCLL));
  os_unfair_lock_lock(v7);
  sub_100717048(v6);
  os_unfair_lock_unlock(v7);
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, enum case for DatabaseState.available(_:), v1);
  AsyncStreamProvider.yield(value:transaction:)();
  return (*(uint64_t (**)(char *, uint64_t))(v2 + 8))(v4, v1);
}

void sub_100716888(int a1, int a2)
{
}

void sub_1007168A0(int a1, int a2)
{
  int v30 = a2;
  uint64_t v4 = *v2;
  uint64_t v5 = type metadata accessor for Connection.TransactionMode();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v25 - v10;
  if (qword_101636C10 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100010324(v12, (uint64_t)qword_10164C9B0);
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (_DWORD *)swift_slowAlloc();
    unint64_t v26 = v11;
    uint64_t v27 = v4;
    uint64_t v16 = v15;
    *uint64_t v15 = 67109376;
    LODWORD(v28) = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *((_WORD *)v16 + 4) = 1024;
    int v17 = v30;
    LODWORD(v28) = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "Migrate schema %d -> %d", (uint8_t *)v16, 0xEu);
    uint64_t v11 = v26;
    swift_slowDealloc();

    if (v17 != 2) {
      goto LABEL_5;
    }
LABEL_10:
    __chkstk_darwin(v18);
    (*(void (**)(char *, void, uint64_t))(v6 + 104))(v9, enum case for Connection.TransactionMode.deferred(_:), v5);
    Connection.transaction(_:block:)();
    uint64_t v11 = v9;
    goto LABEL_11;
  }

  int v17 = v30;
  if (v30 == 2) {
    goto LABEL_10;
  }
LABEL_5:
  if (v17 != 1)
  {
    unint64_t v28 = 0;
    unint64_t v29 = 0xE000000000000000;
    _StringGuts.grow(_:)(21);
    swift_bridgeObjectRelease();
    unint64_t v28 = 0xD000000000000013;
    unint64_t v29 = 0x8000000101405A40;
    int v31 = v17;
    v24._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return;
  }
  v19._uint64_t countAndFlagsBits = 0xD00000000000001FLL;
  v19._object = (void *)0x80000001013F7F50;
  Connection.execute(_:)(v19);
  if (!v20)
  {
    v21._uint64_t countAndFlagsBits = 0xD000000000000018;
    v21._object = (void *)0x80000001013F7F70;
    Connection.execute(_:)(v21);
    if (!v23)
    {
      __chkstk_darwin(v22);
      (*(void (**)(char *, void, uint64_t))(v6 + 104))(v11, enum case for Connection.TransactionMode.deferred(_:), v5);
      Connection.transaction(_:block:)();
LABEL_11:
      (*(void (**)(char *, uint64_t))(v6 + 8))(v11, v5);
    }
  }
}

void sub_100716D0C()
{
}

void sub_100716D44()
{
}

void sub_100716D7C()
{
}

uint64_t sub_100716DB4()
{
  return Database.description.getter();
}

uint64_t sub_100716E0C()
{
  uint64_t v1 = (void *)swift_task_alloc();
  *(void *)(v0 + 16) = v1;
  uint64_t v2 = type metadata accessor for CloudStorageDatabase();
  uint64_t v3 = sub_1007191D8(&qword_10164CB10);
  *uint64_t v1 = v0;
  v1[1] = sub_100716EDC;
  return Database.isolatedDescription.getter(v2, v3);
}

uint64_t sub_100716EDC(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *v2;
  swift_task_dealloc();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v7 + 8);
  return v5(a1, a2);
}

uint64_t sub_100716FE0()
{
  return sub_1007191D8(&qword_10164CAE8);
}

uint64_t sub_100717014()
{
  return sub_1007191D8(&qword_10164CAF0);
}

uint64_t sub_100717048(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DatabaseState();
  uint64_t v3 = *(void *)(v2 - 8);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
  return (*(uint64_t (**)(uint64_t, void, uint64_t))(v3 + 104))(a1, enum case for DatabaseState.available(_:), v2);
}

uint64_t sub_100717104(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Table();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101636C18 != -1) {
    swift_once();
  }
  uint64_t v7 = sub_100010324(v3, (uint64_t)qword_10170E158);
  Table.create(temporary:ifNotExists:withoutRowid:block:)();
  Connection.run(_:_:)();
  if (v1) {
    return swift_bridgeObjectRelease();
  }
  v13[1] = a1;
  swift_bridgeObjectRelease();
  swift_release();
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v7, v3);
  sub_10000588C(&qword_10163CE90);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_101342130;
  if (qword_101636C40 != -1) {
    swift_once();
  }
  uint64_t v9 = sub_10000588C(&qword_10163CF58);
  uint64_t v10 = sub_100010324(v9, (uint64_t)qword_10170E1D0);
  *(void *)(v8 + 56) = v9;
  *(void *)(v8 + 64) = sub_100062734(&qword_10163CFE0, &qword_10163CF58);
  uint64_t v11 = sub_10001D958((uint64_t *)(v8 + 32));
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(v11, v10, v9);
  Table.createIndex(_:unique:ifNotExists:)();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  Connection.run(_:_:)();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1007173F4()
{
  uint64_t v0 = sub_10000588C(&qword_10163CE68);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v51 = (char *)v43 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_10000588C(&qword_10164CAF8);
  __chkstk_darwin(v3 - 8);
  uint64_t v50 = (char *)v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = sub_10000588C(&qword_101640C80);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_101640C78);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C(&qword_101640C68);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000588C(&qword_101640C70);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101636C28 != -1) {
    swift_once();
  }
  *(void *)&long long v53 = v7;
  uint64_t v17 = sub_10000588C(&qword_10163CE70);
  sub_100010324(v17, (uint64_t)qword_10170E188);
  uint64_t v52 = v1;
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56);
  v18(v16, 1, 1, v0);
  uint64_t v19 = *(void *)(v17 - 8);
  uint64_t v44 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56);
  uint64_t v45 = v17;
  v43[2] = v19 + 56;
  v44(v13, 1, 1, v17);
  v43[1] = type metadata accessor for UUID();
  TableBuilder.column<A>(_:primaryKey:check:defaultValue:)();
  Swift::String v46 = v13;
  sub_10001DAB4((uint64_t)v13, &qword_101640C68);
  sub_10001DAB4((uint64_t)v16, &qword_101640C70);
  if (qword_101636C30 != -1) {
    swift_once();
  }
  uint64_t v20 = sub_10000588C(&qword_101640BE8);
  sub_100010324(v20, (uint64_t)qword_10170E1A0);
  v18(v16, 1, 1, v0);
  Swift::String v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56);
  v21(v10, 1, 1, v20);
  TableBuilder.column<A>(_:unique:check:defaultValue:)();
  sub_10001DAB4((uint64_t)v10, &qword_101640C78);
  sub_10001DAB4((uint64_t)v16, &qword_101640C70);
  if (qword_101636C38 != -1) {
    swift_once();
  }
  sub_100010324(v20, (uint64_t)qword_10170E1B8);
  v18(v16, 1, 1, v0);
  v21(v10, 1, 1, v20);
  TableBuilder.column<A>(_:unique:check:defaultValue:)();
  sub_10001DAB4((uint64_t)v10, &qword_101640C78);
  sub_10001DAB4((uint64_t)v16, &qword_101640C70);
  if (qword_101636C40 != -1) {
    swift_once();
  }
  uint64_t v22 = sub_10000588C(&qword_10163CF58);
  sub_100010324(v22, (uint64_t)qword_10170E1D0);
  v18(v16, 1, 1, v0);
  uint64_t v23 = *(void *)(v22 - 8);
  Swift::String v24 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56);
  uint64_t v25 = v23 + 56;
  uint64_t v26 = v53;
  v24(v53, 1, 1, v22);
  TableBuilder.column<A>(_:unique:check:defaultValue:)();
  sub_10001DAB4(v26, &qword_101640C80);
  sub_10001DAB4((uint64_t)v16, &qword_101640C70);
  if (qword_101636C48 != -1) {
    swift_once();
  }
  uint64_t v27 = sub_10000588C(&qword_101640C10);
  sub_100010324(v27, (uint64_t)qword_10170E1E8);
  v18(v16, 1, 1, v0);
  v24(v26, 1, 1, v22);
  TableBuilder.column<A>(_:unique:check:defaultValue:)();
  sub_10001DAB4(v26, &qword_101640C80);
  sub_10001DAB4((uint64_t)v16, &qword_101640C70);
  if (qword_101636C50 != -1) {
    swift_once();
  }
  uint64_t v47 = v25;
  uint64_t v48 = v24;
  uint64_t v49 = v22;
  uint64_t v28 = v45;
  sub_100010324(v45, (uint64_t)qword_10170E200);
  v18(v16, 1, 1, v0);
  uint64_t v29 = (uint64_t)v46;
  v44(v46, 1, 1, v28);
  TableBuilder.column<A>(_:unique:check:defaultValue:)();
  sub_10001DAB4(v29, &qword_101640C68);
  sub_10001DAB4((uint64_t)v16, &qword_101640C70);
  if (qword_101636C60 != -1) {
    swift_once();
  }
  uint64_t v30 = sub_10000588C(&qword_10163CF00);
  uint64_t v31 = sub_100010324(v30, (uint64_t)qword_10170E230);
  v18(v16, 1, 1, v0);
  uint64_t v32 = v0;
  uint64_t v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56);
  uint64_t v34 = v18;
  uint64_t v35 = (uint64_t)v50;
  v33(v50, 1, 1, v30);
  Swift::String v46 = (char *)v31;
  TableBuilder.column<A>(_:unique:check:defaultValue:)();
  sub_10001DAB4(v35, &qword_10164CAF8);
  sub_10001DAB4((uint64_t)v16, &qword_101640C70);
  if (qword_101636C58 != -1) {
    swift_once();
  }
  uint64_t v36 = sub_100010324(v30, (uint64_t)qword_10170E218);
  v34(v16, 1, 1, v32);
  v33((char *)v35, 1, 1, v30);
  uint64_t v45 = v36;
  TableBuilder.column<A>(_:unique:check:defaultValue:)();
  sub_10001DAB4(v35, &qword_10164CAF8);
  sub_10001DAB4((uint64_t)v16, &qword_101640C70);
  if (qword_101636C68 != -1) {
    swift_once();
  }
  sub_100010324(v30, (uint64_t)qword_10170E248);
  v34(v16, 1, 1, v32);
  v33((char *)v35, 1, 1, v30);
  TableBuilder.column<A>(_:unique:check:defaultValue:)();
  sub_10001DAB4(v35, &qword_10164CAF8);
  sub_10001DAB4((uint64_t)v16, &qword_101640C70);
  if (qword_101636C70 != -1) {
    swift_once();
  }
  uint64_t v37 = v49;
  sub_100010324(v49, (uint64_t)qword_10170E260);
  v34(v16, 1, 1, v32);
  uint64_t v38 = v53;
  uint64_t v39 = v48;
  v48(v53, 1, 1, v37);
  TableBuilder.column<A>(_:unique:check:defaultValue:)();
  sub_10001DAB4(v38, &qword_101640C80);
  sub_10001DAB4((uint64_t)v16, &qword_101640C70);
  if (qword_101636C78 != -1) {
    swift_once();
  }
  sub_100010324(v37, (uint64_t)qword_10170E278);
  v34(v16, 1, 1, v32);
  v39(v38, 1, 1, v37);
  TableBuilder.column<A>(_:unique:check:defaultValue:)();
  sub_10001DAB4(v38, &qword_101640C80);
  sub_10001DAB4((uint64_t)v16, &qword_101640C70);
  if (qword_101636C80 != -1) {
    swift_once();
  }
  sub_100010324(v37, (uint64_t)qword_10170E290);
  v34(v16, 1, 1, v32);
  v39(v38, 1, 1, v37);
  TableBuilder.column<A>(_:unique:check:defaultValue:)();
  sub_10001DAB4(v38, &qword_101640C80);
  sub_10001DAB4((uint64_t)v16, &qword_101640C70);
  long long v53 = xmmword_101367FB0;
  long long v54 = xmmword_101367FB0;
  uint64_t v40 = v51;
  ~= infix<A>(_:_:)();
  TableBuilder.check(_:)();
  uint64_t v41 = *(void (**)(char *, uint64_t))(v52 + 8);
  v41(v40, v32);
  long long v54 = v53;
  ~= infix<A>(_:_:)();
  TableBuilder.check(_:)();
  return ((uint64_t (*)(char *, uint64_t))v41)(v40, v32);
}

uint64_t sub_1007180E0()
{
  if (qword_101636C20 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Table();
  sub_100010324(v1, (uint64_t)qword_10170E170);
  Table.create(temporary:ifNotExists:withoutRowid:block:)();
  Connection.run(_:_:)();
  if (v0) {
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1007181C0()
{
  return sub_1007180E0();
}

uint64_t sub_1007181DC()
{
  return sub_100717104(*(void *)(v0 + 16));
}

uint64_t sub_1007181F8()
{
  uint64_t v0 = sub_10000588C(&qword_101640C88);
  __chkstk_darwin(v0 - 8);
  uint64_t v2 = (char *)&v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v3 = sub_10000588C(&qword_101640C80);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_101640C68);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_101640C70);
  __chkstk_darwin(v9 - 8);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101636C28 != -1) {
    swift_once();
  }
  uint64_t v12 = sub_10000588C(&qword_10163CE70);
  sub_100010324(v12, (uint64_t)qword_10170E188);
  uint64_t v13 = sub_10000588C(&qword_10163CE68);
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
  v14(v11, 1, 1, v13);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v8, 1, 1, v12);
  type metadata accessor for UUID();
  TableBuilder.column<A>(_:primaryKey:check:defaultValue:)();
  sub_10001DAB4((uint64_t)v8, &qword_101640C68);
  sub_10001DAB4((uint64_t)v11, &qword_101640C70);
  if (qword_101636C90 != -1) {
    swift_once();
  }
  uint64_t v15 = sub_10000588C(&qword_101640C10);
  sub_100010324(v15, (uint64_t)qword_10170E2C0);
  v14(v11, 1, 1, v13);
  uint64_t v16 = sub_10000588C(&qword_10163CF58);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56))(v5, 1, 1, v16);
  TableBuilder.column<A>(_:unique:check:defaultValue:)();
  sub_10001DAB4((uint64_t)v5, &qword_101640C80);
  sub_10001DAB4((uint64_t)v11, &qword_101640C70);
  if (qword_101636C88 != -1) {
    swift_once();
  }
  uint64_t v17 = sub_10000588C(&qword_10163CF78);
  sub_100010324(v17, (uint64_t)qword_10170E2A8);
  v14(v11, 1, 1, v13);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56))(v2, 1, 1, v17);
  TableBuilder.column<A>(_:unique:check:defaultValue:)();
  sub_10001DAB4((uint64_t)v2, &qword_101640C88);
  return sub_10001DAB4((uint64_t)v11, &qword_101640C70);
}

uint64_t sub_10071864C()
{
  uint64_t v0 = sub_10000588C(&qword_10163CE70);
  sub_10001E384(v0, qword_10170E188);
  sub_100010324(v0, (uint64_t)qword_10170E188);
  sub_100062734(&qword_101640BC0, &qword_10163CE70);
  return ExpressionType.init(_:)();
}

uint64_t sub_1007186E0()
{
  uint64_t v0 = sub_10000588C(&qword_101640BE8);
  sub_10001E384(v0, qword_10170E1A0);
  sub_100010324(v0, (uint64_t)qword_10170E1A0);
  sub_100062734(&qword_101640BF0, &qword_101640BE8);
  return ExpressionType.init(_:)();
}

uint64_t sub_10071877C()
{
  uint64_t v0 = sub_10000588C(&qword_101640BE8);
  sub_10001E384(v0, qword_10170E1B8);
  sub_100010324(v0, (uint64_t)qword_10170E1B8);
  sub_100062734(&qword_101640BF0, &qword_101640BE8);
  return ExpressionType.init(_:)();
}

uint64_t sub_100718828()
{
  uint64_t v0 = sub_10000588C(&qword_10163CF58);
  sub_10001E384(v0, qword_10170E1D0);
  sub_100010324(v0, (uint64_t)qword_10170E1D0);
  sub_100062734(&qword_10163CF80, &qword_10163CF58);
  return ExpressionType.init(_:)();
}

uint64_t sub_1007188CC()
{
  uint64_t v0 = sub_10000588C(&qword_101640C10);
  sub_10001E384(v0, qword_10170E1E8);
  sub_100010324(v0, (uint64_t)qword_10170E1E8);
  sub_100062734(&qword_101640C18, &qword_101640C10);
  return ExpressionType.init(_:)();
}

uint64_t sub_100718970()
{
  uint64_t v0 = sub_10000588C(&qword_10163CE70);
  sub_10001E384(v0, qword_10170E200);
  sub_100010324(v0, (uint64_t)qword_10170E200);
  sub_100062734(&qword_101640BC0, &qword_10163CE70);
  return ExpressionType.init(_:)();
}

uint64_t sub_100718A0C()
{
  uint64_t v0 = sub_10000588C(&qword_10163CF00);
  sub_10001E384(v0, qword_10170E218);
  sub_100010324(v0, (uint64_t)qword_10170E218);
  sub_100062734(&qword_10164CB00, &qword_10163CF00);
  return ExpressionType.init(_:)();
}

uint64_t sub_100718AB0()
{
  uint64_t v0 = sub_10000588C(&qword_10163CF00);
  sub_10001E384(v0, qword_10170E230);
  sub_100010324(v0, (uint64_t)qword_10170E230);
  sub_100062734(&qword_10164CB00, &qword_10163CF00);
  return ExpressionType.init(_:)();
}

uint64_t sub_100718B50()
{
  uint64_t v0 = sub_10000588C(&qword_10163CF00);
  sub_10001E384(v0, qword_10170E248);
  sub_100010324(v0, (uint64_t)qword_10170E248);
  sub_100062734(&qword_10164CB00, &qword_10163CF00);
  return ExpressionType.init(_:)();
}

uint64_t sub_100718BF8()
{
  uint64_t v0 = sub_10000588C(&qword_10163CF58);
  sub_10001E384(v0, qword_10170E260);
  sub_100010324(v0, (uint64_t)qword_10170E260);
  sub_100062734(&qword_10163CF80, &qword_10163CF58);
  return ExpressionType.init(_:)();
}

uint64_t sub_100718C9C()
{
  uint64_t v0 = sub_10000588C(&qword_10163CF58);
  sub_10001E384(v0, qword_10170E278);
  sub_100010324(v0, (uint64_t)qword_10170E278);
  sub_100062734(&qword_10163CF80, &qword_10163CF58);
  return ExpressionType.init(_:)();
}

uint64_t sub_100718D40()
{
  uint64_t v0 = sub_10000588C(&qword_10163CF58);
  sub_10001E384(v0, qword_10170E290);
  sub_100010324(v0, (uint64_t)qword_10170E290);
  sub_100062734(&qword_10163CF80, &qword_10163CF58);
  return ExpressionType.init(_:)();
}

uint64_t sub_100718DE8()
{
  uint64_t v0 = sub_10000588C(&qword_10163CF78);
  sub_10001E384(v0, qword_10170E2A8);
  sub_100010324(v0, (uint64_t)qword_10170E2A8);
  sub_100062734(&qword_101640C38, &qword_10163CF78);
  return ExpressionType.init(_:)();
}

uint64_t sub_100718E8C()
{
  uint64_t v0 = sub_10000588C(&qword_101640C10);
  sub_10001E384(v0, qword_10170E2C0);
  sub_100010324(v0, (uint64_t)qword_10170E2C0);
  sub_100062734(&qword_101640C18, &qword_101640C10);
  return ExpressionType.init(_:)();
}

uint64_t sub_100718F34()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170E2D8);
  sub_100010324(v0, (uint64_t)qword_10170E2D8);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_100718FB8()
{
  uint64_t v2 = type metadata accessor for Keychain.DataProtectionClass();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = static Keychain.data(account:service:)();
  if (!v1)
  {
    if (v7 >> 60 == 15)
    {
      uint64_t v0 = static Data.random(bytes:)();
      unint64_t v9 = v8;
      v11[0] = v0;
      v11[1] = v8;
      (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for Keychain.DataProtectionClass.c(_:), v2);
      sub_1000361E0(v0, v9);
      sub_1000362FC();
      static Keychain.set<A>(data:account:service:dataProtectionClass:)();
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      sub_10001CFB8(v0, v9);
    }
    else
    {
      return v6;
    }
  }
  return v0;
}

uint64_t sub_1007191D8(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CloudStorageDatabase();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10071921C(void *a1)
{
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryEncoding.container()();
  sub_1000BD078((uint64_t)v4, v5);
  sub_100135A44();
  dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
  if (!v2)
  {
    sub_1000BD078((uint64_t)v4, v5);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1000BD078((uint64_t)v4, v5);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1000BD078((uint64_t)v4, v5);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    sub_1001F1980(v1 + 64, (uint64_t)v6);
    sub_1001F1980((uint64_t)v6, (uint64_t)&v7);
    if (*((void *)&v7 + 1) >> 60 != 15)
    {
      sub_1000BD078((uint64_t)v4, v5);
      dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)();
    }
  }
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v4);
}

__n128 sub_100719404@<Q0>(void *a1@<X0>, __n128 *a2@<X8>)
{
  sub_1007198E4(a1, v6);
  if (!v2)
  {
    __n128 v5 = v6[3];
    a2[2] = v6[2];
    a2[3] = v5;
    a2[4] = v6[4];
    __n128 result = v6[1];
    *a2 = v6[0];
    a2[1] = result;
  }
  return result;
}

uint64_t sub_100719450(void *a1)
{
  return sub_10071921C(a1);
}

__n128 sub_100719494@<Q0>(unint64_t a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, unint64_t a4@<X3>, unint64_t a5@<X4>, unint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, __n128 *a9@<X8>, uint64_t a10, unint64_t a11)
{
  switch(a2 >> 62)
  {
    case 1uLL:
      LODWORD(v18) = HIDWORD(a1) - a1;
      if (__OFSUB__(HIDWORD(a1), a1)) {
        goto LABEL_35;
      }
      uint64_t v18 = (int)v18;
LABEL_6:
      if (v18 != 32) {
        goto LABEL_45;
      }
      switch(a4 >> 62)
      {
        case 1uLL:
          LODWORD(v22) = HIDWORD(a3) - a3;
          if (__OFSUB__(HIDWORD(a3), a3)) {
            goto LABEL_37;
          }
          uint64_t v22 = (int)v22;
LABEL_12:
          if (v22 != 113) {
            goto LABEL_46;
          }
          switch(a6 >> 62)
          {
            case 1uLL:
              LODWORD(v25) = HIDWORD(a5) - a5;
              if (__OFSUB__(HIDWORD(a5), a5)) {
                goto LABEL_39;
              }
              uint64_t v25 = (int)v25;
LABEL_18:
              if (v25 != 32) {
                goto LABEL_47;
              }
              if (a11 >> 60 != 15)
              {
                switch(a11 >> 62)
                {
                  case 1uLL:
                    LODWORD(v29) = HIDWORD(a10) - a10;
                    if (__OFSUB__(HIDWORD(a10), a10)) {
                      goto LABEL_43;
                    }
                    uint64_t v29 = (int)v29;
LABEL_25:
                    if (v29 == 96) {
                      goto LABEL_26;
                    }
                    goto LABEL_49;
                  case 2uLL:
                    uint64_t v31 = *(void *)(a10 + 16);
                    uint64_t v30 = *(void *)(a10 + 24);
                    BOOL v21 = __OFSUB__(v30, v31);
                    uint64_t v29 = v30 - v31;
                    if (!v21) {
                      goto LABEL_25;
                    }
                    goto LABEL_44;
                  case 3uLL:
                    goto LABEL_48;
                  default:
                    unint64_t v28 = a8;
                    sub_100037A24(a10, a11);
                    a8 = v28;
                    uint64_t v29 = BYTE6(a11);
                    goto LABEL_25;
                }
              }
              break;
            case 2uLL:
              uint64_t v27 = *(void *)(a5 + 16);
              uint64_t v26 = *(void *)(a5 + 24);
              BOOL v21 = __OFSUB__(v26, v27);
              uint64_t v25 = v26 - v27;
              if (!v21) {
                goto LABEL_18;
              }
              goto LABEL_40;
            case 3uLL:
              goto LABEL_47;
            default:
              uint64_t v25 = BYTE6(a6);
              goto LABEL_18;
          }
          break;
        case 2uLL:
          uint64_t v24 = *(void *)(a3 + 16);
          uint64_t v23 = *(void *)(a3 + 24);
          BOOL v21 = __OFSUB__(v23, v24);
          uint64_t v22 = v23 - v24;
          if (!v21) {
            goto LABEL_12;
          }
          goto LABEL_38;
        case 3uLL:
          goto LABEL_46;
        default:
          uint64_t v22 = BYTE6(a4);
          goto LABEL_12;
      }
LABEL_26:
      v48.n128_u64[0] = a7;
      v48.n128_u64[1] = a8;
      uint64_t v32 = 0;
      switch(a8 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(a7), a7)) {
            goto LABEL_41;
          }
          uint64_t v32 = HIDWORD(a7) - (int)a7;
LABEL_31:
          uint64_t v35 = a7;
          uint64_t v36 = a7;
          unint64_t v37 = a8;
          sub_1000361E0(v35, a8);
          a8 = v37;
          a7 = v36;
LABEL_32:
          if (__OFSUB__(60, v32))
          {
            __break(1u);
LABEL_35:
            __break(1u);
LABEL_36:
            __break(1u);
LABEL_37:
            __break(1u);
LABEL_38:
            __break(1u);
LABEL_39:
            __break(1u);
LABEL_40:
            __break(1u);
LABEL_41:
            __break(1u);
LABEL_42:
            __break(1u);
LABEL_43:
            __break(1u);
LABEL_44:
            __break(1u);
LABEL_45:
            __break(1u);
LABEL_46:
            __break(1u);
LABEL_47:
            __break(1u);
LABEL_48:
            sub_100037A24(a10, a11);
LABEL_49:
            __break(1u);
            JUMPOUT(0x1007197BCLL);
          }
          unint64_t v38 = a8;
          uint64_t v46 = sub_10085E9A4(60 - v32);
          unint64_t v47 = v39;
          unint64_t v44 = a6;
          sub_10072AD40(&v46, 0);
          unint64_t v40 = a5;
          uint64_t v41 = v46;
          unint64_t v42 = v47;
          Data.append(_:)();
          sub_10001CFB8(a7, v38);
          sub_10001CFB8(v41, v42);
          __n128 result = v48;
          a9->n128_u64[0] = a1;
          a9->n128_u64[1] = a2;
          a9[1].n128_u64[0] = a3;
          a9[1].n128_u64[1] = a4;
          a9[2].n128_u64[0] = v40;
          a9[2].n128_u64[1] = v44;
          a9[3] = result;
          a9[4].n128_u64[0] = a10;
          a9[4].n128_u64[1] = a11;
          return result;
        case 2uLL:
          uint64_t v34 = *(void *)(a7 + 16);
          uint64_t v33 = *(void *)(a7 + 24);
          uint64_t v32 = v33 - v34;
          if (!__OFSUB__(v33, v34)) {
            goto LABEL_31;
          }
          goto LABEL_42;
        case 3uLL:
          goto LABEL_32;
        default:
          uint64_t v32 = BYTE6(a8);
          goto LABEL_32;
      }
    case 2uLL:
      uint64_t v20 = *(void *)(a1 + 16);
      uint64_t v19 = *(void *)(a1 + 24);
      BOOL v21 = __OFSUB__(v19, v20);
      uint64_t v18 = v19 - v20;
      if (!v21) {
        goto LABEL_6;
      }
      goto LABEL_36;
    case 3uLL:
      goto LABEL_45;
    default:
      uint64_t v18 = BYTE6(a2);
      goto LABEL_6;
  }
}

unint64_t sub_10071980C(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_10071983C();
  unint64_t result = sub_100719890();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_10071983C()
{
  unint64_t result = qword_10164CB30;
  if (!qword_10164CB30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164CB30);
  }
  return result;
}

unint64_t sub_100719890()
{
  unint64_t result = qword_10164CB38;
  if (!qword_10164CB38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164CB38);
  }
  return result;
}

uint64_t sub_1007198E4@<X0>(void *a1@<X0>, __n128 *a2@<X8>)
{
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of BinaryDecoding.container()();
  sub_1000BD078((uint64_t)v22, v23);
  uint64_t v5 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
  if (v2)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v22);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  }
  else
  {
    unint64_t v7 = v5;
    unint64_t v8 = v6;
    sub_1000BD078((uint64_t)v22, v23);
    unint64_t v9 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
    unint64_t v25 = v10;
    sub_1000BD078((uint64_t)v22, v23);
    unint64_t v20 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
    unint64_t v21 = v11;
    sub_1000BD078((uint64_t)v22, v23);
    uint64_t v18 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
    unint64_t v19 = v12;
    sub_1000BD078((uint64_t)v22, v23);
    uint64_t v13 = dispatch thunk of BinaryDecodingContaining.decode(length:)();
    sub_100719494(v7, v8, v9, v25, v20, v21, v18, v19, v24, v13, v14);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v22);
    uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
    __n128 v16 = v24[3];
    a2[2] = v24[2];
    a2[3] = v16;
    a2[4] = v24[4];
    __n128 v17 = v24[1];
    *a2 = v24[0];
    a2[1] = v17;
  }
  return result;
}

uint64_t destroy for AirPodsInitiatePairingCommandPayload(uint64_t *a1)
{
  sub_10001CFB8(*a1, a1[1]);
  sub_10001CFB8(a1[2], a1[3]);
  sub_10001CFB8(a1[4], a1[5]);
  uint64_t result = sub_10001CFB8(a1[6], a1[7]);
  unint64_t v3 = a1[9];
  if (v3 >> 60 != 15)
  {
    uint64_t v4 = a1[8];
    return sub_10001CFB8(v4, v3);
  }
  return result;
}

uint64_t initializeWithCopy for AirPodsInitiatePairingCommandPayload(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_1000361E0(*a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = a2[2];
  unint64_t v7 = a2[3];
  sub_1000361E0(v6, v7);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = a2[4];
  unint64_t v9 = a2[5];
  sub_1000361E0(v8, v9);
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  uint64_t v10 = a2[6];
  unint64_t v11 = a2[7];
  sub_1000361E0(v10, v11);
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  unint64_t v12 = a2 + 8;
  unint64_t v13 = a2[9];
  if (v13 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 64) = *(_OWORD *)v12;
  }
  else
  {
    uint64_t v14 = *v12;
    sub_1000361E0(*v12, v13);
    *(void *)(a1 + 64) = v14;
    *(void *)(a1 + 72) = v13;
  }
  return a1;
}

uint64_t *assignWithCopy for AirPodsInitiatePairingCommandPayload(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_1000361E0(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_10001CFB8(v6, v7);
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  sub_1000361E0(v8, v9);
  uint64_t v10 = a1[2];
  unint64_t v11 = a1[3];
  a1[2] = v8;
  a1[3] = v9;
  sub_10001CFB8(v10, v11);
  uint64_t v12 = a2[4];
  unint64_t v13 = a2[5];
  sub_1000361E0(v12, v13);
  uint64_t v14 = a1[4];
  unint64_t v15 = a1[5];
  a1[4] = v12;
  a1[5] = v13;
  sub_10001CFB8(v14, v15);
  uint64_t v16 = a2[6];
  unint64_t v17 = a2[7];
  sub_1000361E0(v16, v17);
  uint64_t v18 = a1[6];
  unint64_t v19 = a1[7];
  a1[6] = v16;
  a1[7] = v17;
  sub_10001CFB8(v18, v19);
  unint64_t v20 = a2 + 8;
  unint64_t v21 = a2[9];
  if ((unint64_t)a1[9] >> 60 != 15)
  {
    if (v21 >> 60 != 15)
    {
      uint64_t v23 = *v20;
      sub_1000361E0(*v20, v21);
      uint64_t v24 = a1[8];
      unint64_t v25 = a1[9];
      a1[8] = v23;
      a1[9] = v21;
      sub_10001CFB8(v24, v25);
      return a1;
    }
    sub_1001356D0((uint64_t)(a1 + 8));
    goto LABEL_6;
  }
  if (v21 >> 60 == 15)
  {
LABEL_6:
    *((_OWORD *)a1 + 4) = *(_OWORD *)v20;
    return a1;
  }
  uint64_t v22 = *v20;
  sub_1000361E0(*v20, v21);
  a1[8] = v22;
  a1[9] = v21;
  return a1;
}

uint64_t *assignWithTake for AirPodsInitiatePairingCommandPayload(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10001CFB8(v4, v5);
  uint64_t v6 = a1[2];
  unint64_t v7 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  sub_10001CFB8(v6, v7);
  uint64_t v8 = a1[4];
  unint64_t v9 = a1[5];
  *((_OWORD *)a1 + 2) = *(_OWORD *)(a2 + 32);
  sub_10001CFB8(v8, v9);
  uint64_t v10 = a1[6];
  unint64_t v11 = a1[7];
  *((_OWORD *)a1 + 3) = *(_OWORD *)(a2 + 48);
  sub_10001CFB8(v10, v11);
  uint64_t v12 = (uint64_t *)(a2 + 64);
  unint64_t v13 = a1[9];
  if (v13 >> 60 != 15)
  {
    unint64_t v14 = *(void *)(a2 + 72);
    if (v14 >> 60 != 15)
    {
      uint64_t v15 = a1[8];
      a1[8] = *v12;
      a1[9] = v14;
      sub_10001CFB8(v15, v13);
      return a1;
    }
    sub_1001356D0((uint64_t)(a1 + 8));
  }
  *((_OWORD *)a1 + 4) = *(_OWORD *)v12;
  return a1;
}

ValueMetadata *type metadata accessor for AirPodsInitiatePairingCommandPayload()
{
  return &type metadata for AirPodsInitiatePairingCommandPayload;
}

ValueMetadata *type metadata accessor for AccessoryGenericPayload()
{
  return &type metadata for AccessoryGenericPayload;
}

unint64_t sub_100719E18(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1003319E0();
  unint64_t result = sub_1002A576C();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_100719E48(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 0x7261646E6F636553;
    }
    else {
      uint64_t v3 = 0x6F4C657275636553;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE900000000000079;
    }
    else {
      unint64_t v4 = 0xEF736E6F69746163;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 0x7261646E6F636553;
      }
      else {
        uint64_t v6 = 0x6F4C657275636553;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE900000000000079;
      }
      else {
        unint64_t v7 = 0xEF736E6F69746163;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE700000000000000;
    uint64_t v3 = 0x7972616D697250;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE700000000000000;
  if (v3 != 0x7972616D697250)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_100719F84(char a1, char a2)
{
  if (a1) {
    uint64_t v2 = 80;
  }
  else {
    uint64_t v2 = 84;
  }
  if (a2) {
    uint64_t v3 = 80;
  }
  else {
    uint64_t v3 = 84;
  }
  if (v2 == v3) {
    char v4 = 1;
  }
  else {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

uint64_t sub_100719FEC(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xEA00000000006E6FLL;
  uint64_t v3 = 0x697461636F4C6F6ELL;
  uint64_t v4 = a1;
  uint64_t v5 = 0x697461636F4C6F6ELL;
  unint64_t v6 = 0xEA00000000006E6FLL;
  switch(v4)
  {
    case 1:
      unint64_t v6 = 0xE500000000000000;
      uint64_t v5 = 0x64696C6176;
      break;
    case 2:
      unint64_t v6 = 0xE700000000000000;
      uint64_t v5 = 0x64657269707865;
      break;
    case 3:
      uint64_t v5 = 0x755364656C696166;
      unint64_t v6 = 0xE900000000000062;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v2 = 0xE500000000000000;
      if (v5 == 0x64696C6176) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      unint64_t v2 = 0xE700000000000000;
      uint64_t v3 = 0x64657269707865;
      goto LABEL_9;
    case 3:
      unint64_t v2 = 0xE900000000000062;
      if (v5 == 0x755364656C696166) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v5 != v3) {
        goto LABEL_14;
      }
LABEL_12:
      if (v6 == v2) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_10071A184(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xEE007379654B6574;
  unint64_t v3 = 0x7562697274736964;
  uint64_t v4 = a1;
  unint64_t v5 = 0x7562697274736964;
  unint64_t v6 = 0xEE007379654B6574;
  switch(v4)
  {
    case 1:
      unint64_t v6 = 0xE400000000000000;
      unint64_t v5 = 1818322280;
      break;
    case 2:
      unint64_t v6 = 0x80000001013EEA10;
      unint64_t v5 = 0xD000000000000014;
      break;
    case 3:
      unint64_t v5 = 0xD000000000000015;
      unint64_t v6 = 0x80000001013EEA30;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v2 = 0xE400000000000000;
      if (v5 == 1818322280) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      unint64_t v2 = 0x80000001013EEA10;
      unint64_t v3 = 0xD000000000000014;
      goto LABEL_9;
    case 3:
      unint64_t v2 = 0x80000001013EEA30;
      if (v5 == 0xD000000000000015) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v5 != v3) {
        goto LABEL_14;
      }
LABEL_12:
      if (v6 == v2) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_10071A334(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xE900000000000053;
  uint64_t v3 = 0x54646E6553706174;
  uint64_t v4 = a1;
  uint64_t v5 = 0x54646E6553706174;
  unint64_t v6 = 0xE900000000000053;
  switch(v4)
  {
    case 1:
      unint64_t v6 = 0xE200000000000000;
      uint64_t v5 = 29556;
      break;
    case 2:
      unint64_t v6 = 0xE500000000000000;
      uint64_t v5 = 0x6449646D63;
      break;
    case 3:
      unint64_t v6 = 0xE600000000000000;
      uint64_t v5 = 0x737574617473;
      break;
    case 4:
      uint64_t v5 = 0x6F43746E65696C63;
      unint64_t v6 = 0xED0000747865746ELL;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v2 = 0xE200000000000000;
      if (v5 == 29556) {
        goto LABEL_13;
      }
      goto LABEL_16;
    case 2:
      unint64_t v2 = 0xE500000000000000;
      if (v5 != 0x6449646D63) {
        goto LABEL_16;
      }
      goto LABEL_13;
    case 3:
      unint64_t v2 = 0xE600000000000000;
      uint64_t v3 = 0x737574617473;
      goto LABEL_12;
    case 4:
      unint64_t v2 = 0xED0000747865746ELL;
      if (v5 != 0x6F43746E65696C63) {
        goto LABEL_16;
      }
      goto LABEL_13;
    default:
LABEL_12:
      if (v5 != v3) {
        goto LABEL_16;
      }
LABEL_13:
      if (v6 == v2) {
        char v7 = 1;
      }
      else {
LABEL_16:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_10071A4FC(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x5364656573;
  unint64_t v3 = 0xE500000000000000;
  uint64_t v4 = a1;
  unint64_t v5 = 0x5364656573;
  switch(v4)
  {
    case 1:
      unint64_t v5 = 0x6953726576726573;
      unint64_t v3 = 0xEA00000000006E67;
      break;
    case 2:
      unint64_t v5 = 0x6E656B6F74;
      break;
    case 3:
      unint64_t v3 = 0x80000001013F10B0;
      unint64_t v5 = 0xD000000000000010;
      break;
    case 4:
      unint64_t v3 = 0xE600000000000000;
      unint64_t v5 = 0x6449616E6D66;
      break;
    case 5:
      unint64_t v5 = 0x704164656B73616DLL;
      unint64_t v3 = 0xED00006449656C70;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE500000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xEA00000000006E67;
      if (v5 == 0x6953726576726573) {
        goto LABEL_16;
      }
      goto LABEL_19;
    case 2:
      if (v5 != 0x6E656B6F74) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 3:
      unint64_t v6 = 0x80000001013F10B0;
      if (v5 != 0xD000000000000010) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 4:
      unint64_t v6 = 0xE600000000000000;
      uint64_t v2 = 0x6449616E6D66;
      goto LABEL_15;
    case 5:
      unint64_t v6 = 0xED00006449656C70;
      if (v5 != 0x704164656B73616DLL) {
        goto LABEL_19;
      }
      goto LABEL_16;
    default:
LABEL_15:
      if (v5 != v2) {
        goto LABEL_19;
      }
LABEL_16:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_19:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_10071A710(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xD000000000000011;
  unint64_t v3 = 0x80000001013EE2E0;
  uint64_t v4 = a1;
  unint64_t v5 = 0xD000000000000011;
  switch(v4)
  {
    case 1:
      unint64_t v6 = "unsupportedDevice";
      goto LABEL_5;
    case 2:
      unint64_t v5 = 0x726F707075736E75;
      uint64_t v7 = 0x554B53646574;
      goto LABEL_8;
    case 3:
      unint64_t v5 = 0xD00000000000001CLL;
      unint64_t v6 = "unauthorizedLocationServices";
LABEL_5:
      unint64_t v3 = (unint64_t)(v6 - 32) | 0x8000000000000000;
      break;
    case 4:
      unint64_t v5 = 0x6544654D41746F6ELL;
      unint64_t v3 = 0xEC00000065636976;
      break;
    case 5:
      unint64_t v5 = 0x6F4E656369766564;
      uint64_t v7 = 0x6573556E4974;
LABEL_8:
      unint64_t v3 = v7 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
      break;
    default:
      break;
  }
  unint64_t v8 = 0x80000001013EE2E0;
  switch(a2)
  {
    case 1:
      unint64_t v9 = "unsupportedDevice";
      goto LABEL_13;
    case 2:
      uint64_t v10 = 0x726F707075736E75;
      uint64_t v11 = 0x554B53646574;
      goto LABEL_19;
    case 3:
      unint64_t v2 = 0xD00000000000001CLL;
      unint64_t v9 = "unauthorizedLocationServices";
LABEL_13:
      unint64_t v8 = (unint64_t)(v9 - 32) | 0x8000000000000000;
      if (v5 != v2) {
        goto LABEL_22;
      }
      goto LABEL_20;
    case 4:
      unint64_t v2 = 0x6544654D41746F6ELL;
      unint64_t v8 = 0xEC00000065636976;
      goto LABEL_16;
    case 5:
      uint64_t v10 = 0x6F4E656369766564;
      uint64_t v11 = 0x6573556E4974;
LABEL_19:
      unint64_t v8 = v11 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
      if (v5 == v10) {
        goto LABEL_20;
      }
      goto LABEL_22;
    default:
LABEL_16:
      if (v5 != v2) {
        goto LABEL_22;
      }
LABEL_20:
      if (v3 == v8) {
        char v12 = 1;
      }
      else {
LABEL_22:
      }
        char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v12 & 1;
  }
}

uint64_t sub_10071A92C(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 1684628325;
  unint64_t v3 = 0xE400000000000000;
  uint64_t v4 = a1;
  unint64_t v5 = 1684628325;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE600000000000000;
      unint64_t v5 = 0x644970696863;
      break;
    case 2:
      unint64_t v5 = 0x754E6C6169726573;
      unint64_t v3 = 0xEC0000007265626DLL;
      break;
    case 3:
      unint64_t v3 = 0xE500000000000000;
      unint64_t v5 = 0x5364656573;
      break;
    case 4:
      unint64_t v5 = 0x6953726576726573;
      unint64_t v3 = 0xEA00000000006E67;
      break;
    case 5:
      unint64_t v3 = 0xE600000000000000;
      unint64_t v5 = 0x6449616E6D66;
      break;
    case 6:
      unint64_t v5 = 0x704164656B73616DLL;
      unint64_t v3 = 0xED00006449656C70;
      break;
    case 7:
      unint64_t v3 = 0x80000001013EEBB0;
      unint64_t v5 = 0xD000000000000013;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE400000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE600000000000000;
      uint64_t v7 = 1885956195;
      goto LABEL_18;
    case 2:
      unint64_t v6 = 0xEC0000007265626DLL;
      if (v5 != 0x754E6C6169726573) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 3:
      unint64_t v6 = 0xE500000000000000;
      if (v5 != 0x5364656573) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 4:
      unint64_t v6 = 0xEA00000000006E67;
      if (v5 != 0x6953726576726573) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 5:
      unint64_t v6 = 0xE600000000000000;
      uint64_t v7 = 1634626918;
LABEL_18:
      if (v5 != (v7 & 0xFFFF0000FFFFFFFFLL | 0x644900000000)) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 6:
      uint64_t v2 = 0x704164656B73616DLL;
      unint64_t v6 = 0xED00006449656C70;
      goto LABEL_21;
    case 7:
      unint64_t v6 = 0x80000001013EEBB0;
      if (v5 != 0xD000000000000013) {
        goto LABEL_25;
      }
      goto LABEL_22;
    default:
LABEL_21:
      if (v5 != v2) {
        goto LABEL_25;
      }
LABEL_22:
      if (v3 == v6) {
        char v8 = 1;
      }
      else {
LABEL_25:
      }
        char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v8 & 1;
  }
}

uint64_t sub_10071ABBC(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xEC0000007265626DLL;
  uint64_t v3 = 0x754E6C6169726573;
  uint64_t v4 = a1;
  unint64_t v5 = 0x754E6C6169726573;
  unint64_t v6 = 0xEC0000007265626DLL;
  switch(v4)
  {
    case 1:
      unint64_t v5 = 0x6169726553746C61;
      unint64_t v6 = 0xEF7265626D754E6CLL;
      break;
    case 2:
      unint64_t v6 = 0xE500000000000000;
      unint64_t v5 = 0x5364656573;
      break;
    case 3:
      unint64_t v5 = 0x6953726576726573;
      unint64_t v6 = 0xEA00000000006E67;
      break;
    case 4:
      unint64_t v6 = 0xE600000000000000;
      unint64_t v5 = 0x6449616E6D66;
      break;
    case 5:
      unint64_t v5 = 0x704164656B73616DLL;
      unint64_t v6 = 0xED00006449656C70;
      break;
    case 6:
      unint64_t v6 = 0x80000001013EEBB0;
      unint64_t v5 = 0xD000000000000013;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v2 = 0xEF7265626D754E6CLL;
      if (v5 == 0x6169726553746C61) {
        goto LABEL_19;
      }
      goto LABEL_22;
    case 2:
      unint64_t v2 = 0xE500000000000000;
      if (v5 != 0x5364656573) {
        goto LABEL_22;
      }
      goto LABEL_19;
    case 3:
      unint64_t v2 = 0xEA00000000006E67;
      if (v5 != 0x6953726576726573) {
        goto LABEL_22;
      }
      goto LABEL_19;
    case 4:
      unint64_t v2 = 0xE600000000000000;
      if (v5 != 0x6449616E6D66) {
        goto LABEL_22;
      }
      goto LABEL_19;
    case 5:
      uint64_t v3 = 0x704164656B73616DLL;
      unint64_t v2 = 0xED00006449656C70;
      goto LABEL_18;
    case 6:
      unint64_t v2 = 0x80000001013EEBB0;
      if (v5 != 0xD000000000000013) {
        goto LABEL_22;
      }
      goto LABEL_19;
    default:
LABEL_18:
      if (v5 != v3) {
        goto LABEL_22;
      }
LABEL_19:
      if (v6 == v2) {
        char v7 = 1;
      }
      else {
LABEL_22:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_10071AE48(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xD000000000000010;
  unint64_t v3 = 0x80000001013F1040;
  uint64_t v4 = a1;
  uint64_t v5 = 0xD000000000000010;
  switch(v4)
  {
    case 1:
      uint64_t v5 = 0xD000000000000012;
      unint64_t v3 = 0x80000001013F1060;
      break;
    case 2:
      uint64_t v5 = 0x7461447472617473;
      unint64_t v3 = 0xE900000000000065;
      break;
    case 3:
      unint64_t v3 = 0xE700000000000000;
      uint64_t v6 = 0x746144646E65;
      goto LABEL_10;
    case 4:
      uint64_t v5 = 0x7261646E6F636573;
      unint64_t v3 = 0xEC00000073644979;
      break;
    case 5:
      uint64_t v5 = 0x6F43686372616573;
      unint64_t v3 = 0xED0000747865746ELL;
      break;
    case 6:
      uint64_t v5 = 5294388599723750000;
      unint64_t v3 = 0xEA00000000007364;
      break;
    case 7:
      uint64_t v5 = 0x76654464656E776FLL;
      unint64_t v3 = 0xEE00736449656369;
      break;
    case 8:
      unint64_t v3 = 0xE700000000000000;
      uint64_t v6 = 0x70795479656BLL;
LABEL_10:
      uint64_t v5 = v6 & 0xFFFFFFFFFFFFLL | 0x65000000000000;
      break;
    default:
      break;
  }
  unint64_t v7 = 0x80000001013F1040;
  switch(a2)
  {
    case 1:
      unint64_t v7 = 0x80000001013F1060;
      if (v5 == 0xD000000000000012) {
        goto LABEL_25;
      }
      goto LABEL_29;
    case 2:
      unint64_t v7 = 0xE900000000000065;
      if (v5 != 0x7461447472617473) {
        goto LABEL_29;
      }
      goto LABEL_25;
    case 3:
      unint64_t v7 = 0xE700000000000000;
      uint64_t v8 = 0x746144646E65;
      goto LABEL_28;
    case 4:
      unint64_t v7 = 0xEC00000073644979;
      if (v5 != 0x7261646E6F636573) {
        goto LABEL_29;
      }
      goto LABEL_25;
    case 5:
      unint64_t v7 = 0xED0000747865746ELL;
      if (v5 != 0x6F43686372616573) {
        goto LABEL_29;
      }
      goto LABEL_25;
    case 6:
      unint64_t v7 = 0xEA00000000007364;
      if (v5 != 5294388599723750000) {
        goto LABEL_29;
      }
      goto LABEL_25;
    case 7:
      unint64_t v2 = 0x76654464656E776FLL;
      unint64_t v7 = 0xEE00736449656369;
      goto LABEL_24;
    case 8:
      unint64_t v7 = 0xE700000000000000;
      uint64_t v8 = 0x70795479656BLL;
LABEL_28:
      if (v5 != (v8 & 0xFFFFFFFFFFFFLL | 0x65000000000000)) {
        goto LABEL_29;
      }
      goto LABEL_25;
    default:
LABEL_24:
      if (v5 != v2) {
        goto LABEL_29;
      }
LABEL_25:
      if (v3 == v7) {
        char v9 = 1;
      }
      else {
LABEL_29:
      }
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v9 & 1;
  }
}

uint64_t sub_10071B150(char a1, char a2)
{
  if (a1) {
    uint64_t v2 = 29548;
  }
  else {
    uint64_t v2 = 27496;
  }
  if (a2) {
    uint64_t v3 = 29548;
  }
  else {
    uint64_t v3 = 27496;
  }
  if (v2 == v3) {
    char v4 = 1;
  }
  else {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

uint64_t sub_10071B1B8(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2 = 0x80000001013EE4C0;
  int v3 = a1;
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v4 = 0xD000000000000036;
    }
    else {
      unint64_t v4 = 0xD000000000000035;
    }
    if (v3 == 1) {
      unint64_t v5 = 0x80000001013EE500;
    }
    else {
      unint64_t v5 = 0x80000001013EE540;
    }
    int v6 = a2;
    if (a2)
    {
LABEL_9:
      if (v6 == 1) {
        unint64_t v7 = 0xD000000000000036;
      }
      else {
        unint64_t v7 = 0xD000000000000035;
      }
      if (v6 == 1) {
        unint64_t v2 = 0x80000001013EE500;
      }
      else {
        unint64_t v2 = 0x80000001013EE540;
      }
      if (v4 != v7) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xD000000000000037;
    unint64_t v5 = 0x80000001013EE4C0;
    int v6 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  if (v4 != 0xD000000000000037)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v5 != v2) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_10071B2B0(char a1, char a2)
{
  unint64_t v3 = 0xD000000000000014;
  unint64_t v4 = 0x80000001013EEDF0;
  switch(a1)
  {
    case 1:
      unint64_t v3 = 0xD000000000000017;
      unint64_t v5 = "DISTRIBUTE_KEYS_COMMAND";
      goto LABEL_5;
    case 2:
      unint64_t v3 = 0xD000000000000013;
      unint64_t v5 = "STOP_LOCATE_COMMAND";
      goto LABEL_5;
    case 3:
      unint64_t v3 = 0xD000000000000018;
      unint64_t v5 = "FETCH_LABELLED_LOCATIONS";
LABEL_5:
      unint64_t v4 = (unint64_t)(v5 - 32) | 0x8000000000000000;
      break;
    case 4:
      unint64_t v3 = 0x5F454D5F4F545541;
      unint64_t v4 = 0xEE00455649544341;
      break;
    case 5:
      unint64_t v4 = 0x80000001013EEE80;
      unint64_t v3 = 0xD000000000000010;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xD000000000000014;
  unint64_t v7 = 0x80000001013EEDF0;
  switch(a2)
  {
    case 1:
      unint64_t v8 = 0xD000000000000017;
      char v9 = "DISTRIBUTE_KEYS_COMMAND";
      goto LABEL_12;
    case 2:
      unint64_t v8 = 0xD000000000000013;
      char v9 = "STOP_LOCATE_COMMAND";
      goto LABEL_12;
    case 3:
      unint64_t v8 = 0xD000000000000018;
      char v9 = "FETCH_LABELLED_LOCATIONS";
LABEL_12:
      unint64_t v7 = (unint64_t)(v9 - 32) | 0x8000000000000000;
      if (v3 != v8) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 4:
      unint64_t v6 = 0x5F454D5F4F545541;
      unint64_t v7 = 0xEE00455649544341;
      goto LABEL_15;
    case 5:
      unint64_t v7 = 0x80000001013EEE80;
      if (v3 != 0xD000000000000010) {
        goto LABEL_19;
      }
      goto LABEL_16;
    default:
LABEL_15:
      if (v3 != v6) {
        goto LABEL_19;
      }
LABEL_16:
      if (v4 == v7) {
        char v10 = 1;
      }
      else {
LABEL_19:
      }
        char v10 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v10 & 1;
  }
}

BOOL static DatabaseCheckpointMode.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

uint64_t sub_10071B4BC(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xE900000000000053;
  uint64_t v3 = 0x54646E6553706174;
  unint64_t v4 = 0xE900000000000053;
  uint64_t v5 = a1;
  uint64_t v6 = 0x54646E6553706174;
  switch(v5)
  {
    case 1:
      unint64_t v4 = 0xE500000000000000;
      uint64_t v6 = 0x6449646D63;
      break;
    case 2:
      unint64_t v4 = 0xE300000000000000;
      uint64_t v6 = 6581603;
      break;
    case 3:
      uint64_t v6 = 0x6143654D6F747561;
      unint64_t v4 = 0xED0000656C626170;
      break;
    case 4:
      uint64_t v6 = 0x6449794D646E6966;
      unint64_t v4 = 0xE900000000000073;
      break;
    case 5:
      unint64_t v4 = 0xE300000000000000;
      uint64_t v6 = 7562345;
      break;
    case 6:
      unint64_t v4 = 0xE400000000000000;
      uint64_t v6 = 1701080941;
      break;
    case 7:
      uint64_t v6 = 0x6E65644968737570;
      unint64_t v4 = 0xEF73726569666974;
      break;
    case 8:
      uint64_t v6 = 0x6544656D6F747561;
      unint64_t v4 = 0xEC00000065636976;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v2 = 0xE500000000000000;
      if (v6 == 0x6449646D63) {
        goto LABEL_25;
      }
      goto LABEL_28;
    case 2:
      unint64_t v2 = 0xE300000000000000;
      if (v6 != 6581603) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 3:
      unint64_t v2 = 0xED0000656C626170;
      if (v6 != 0x6143654D6F747561) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 4:
      unint64_t v2 = 0xE900000000000073;
      if (v6 != 0x6449794D646E6966) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 5:
      unint64_t v2 = 0xE300000000000000;
      if (v6 != 7562345) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 6:
      unint64_t v2 = 0xE400000000000000;
      if (v6 != 1701080941) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 7:
      uint64_t v3 = 0x6E65644968737570;
      unint64_t v2 = 0xEF73726569666974;
      goto LABEL_24;
    case 8:
      unint64_t v2 = 0xEC00000065636976;
      if (v6 != 0x6544656D6F747561) {
        goto LABEL_28;
      }
      goto LABEL_25;
    default:
LABEL_24:
      if (v6 != v3) {
        goto LABEL_28;
      }
LABEL_25:
      if (v4 == v2) {
        char v7 = 1;
      }
      else {
LABEL_28:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_10071B798(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x6E776F6E6B6E75;
  unint64_t v3 = 0xE700000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 0x6E776F6E6B6E75;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE600000000000000;
      uint64_t v5 = 0x646567617473;
      break;
    case 2:
      unint64_t v3 = 0xE600000000000000;
      uint64_t v5 = 0x796669746F6ELL;
      break;
    case 3:
      unint64_t v3 = 0xE600000000000000;
      uint64_t v5 = 0x657461647075;
      break;
    case 4:
      unint64_t v3 = 0xE800000000000000;
      uint64_t v5 = 0x6465676174736E75;
      break;
    case 5:
      unint64_t v3 = 0xE800000000000000;
      uint64_t v5 = 0x7761726468746977;
      break;
    case 6:
      uint64_t v5 = 0x6465726F6E6769;
      break;
    case 7:
      uint64_t v5 = 0x7265766F63736964;
      unint64_t v3 = 0xEA00000000006465;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE700000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE600000000000000;
      if (v5 == 0x646567617473) {
        goto LABEL_22;
      }
      goto LABEL_25;
    case 2:
      unint64_t v6 = 0xE600000000000000;
      if (v5 != 0x796669746F6ELL) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 3:
      unint64_t v6 = 0xE600000000000000;
      if (v5 != 0x657461647075) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 4:
      unint64_t v6 = 0xE800000000000000;
      if (v5 != 0x6465676174736E75) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 5:
      unint64_t v6 = 0xE800000000000000;
      if (v5 != 0x7761726468746977) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 6:
      uint64_t v2 = 0x6465726F6E6769;
      goto LABEL_21;
    case 7:
      unint64_t v6 = 0xEA00000000006465;
      if (v5 != 0x7265766F63736964) {
        goto LABEL_25;
      }
      goto LABEL_22;
    default:
LABEL_21:
      if (v5 != v2) {
        goto LABEL_25;
      }
LABEL_22:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_25:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_10071BA0C(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    unint64_t v3 = 0xD000000000000014;
  }
  else {
    unint64_t v3 = 0x6E776F6E6B6E75;
  }
  if (v2) {
    unint64_t v4 = 0xE700000000000000;
  }
  else {
    unint64_t v4 = 0x80000001013F0FA0;
  }
  if (a2) {
    unint64_t v5 = 0xD000000000000014;
  }
  else {
    unint64_t v5 = 0x6E776F6E6B6E75;
  }
  if (a2) {
    unint64_t v6 = 0x80000001013F0FA0;
  }
  else {
    unint64_t v6 = 0xE700000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_10071BAB8()
{
  uint64_t v0 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v2 = v1;
  if (v0 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v2 == v3) {
    char v4 = 1;
  }
  else {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4 & 1;
}

uint64_t sub_10071BB44(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x746C7561666564;
  unint64_t v3 = 0xE700000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 0x746C7561666564;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE600000000000000;
      uint64_t v5 = 0x726576726573;
      break;
    case 2:
      unint64_t v3 = 0xE500000000000000;
      uint64_t v5 = 0x73656C6F72;
      break;
    case 3:
      uint64_t v5 = 0x6166654472657375;
      unint64_t v3 = 0xEC00000073746C75;
      break;
    case 4:
      uint64_t v5 = 0x5365636976726573;
      unint64_t v3 = 0xEF73676E69747465;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE700000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE600000000000000;
      if (v5 == 0x726576726573) {
        goto LABEL_13;
      }
      goto LABEL_16;
    case 2:
      unint64_t v6 = 0xE500000000000000;
      if (v5 != 0x73656C6F72) {
        goto LABEL_16;
      }
      goto LABEL_13;
    case 3:
      uint64_t v2 = 0x6166654472657375;
      unint64_t v6 = 0xEC00000073746C75;
      goto LABEL_12;
    case 4:
      unint64_t v6 = 0xEF73676E69747465;
      if (v5 != 0x5365636976726573) {
        goto LABEL_16;
      }
      goto LABEL_13;
    default:
LABEL_12:
      if (v5 != v2) {
        goto LABEL_16;
      }
LABEL_13:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_16:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_10071BD28(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x7354746E657665;
  }
  else {
    uint64_t v3 = 0x746E657665;
  }
  if (v2) {
    unint64_t v4 = 0xE500000000000000;
  }
  else {
    unint64_t v4 = 0xE700000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x7354746E657665;
  }
  else {
    uint64_t v5 = 0x746E657665;
  }
  if (a2) {
    unint64_t v6 = 0xE700000000000000;
  }
  else {
    unint64_t v6 = 0xE500000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_10071BDCC(char a1, char a2)
{
  if (a1) {
    uint64_t v2 = 1802661751;
  }
  else {
    uint64_t v2 = 1701670760;
  }
  if (a2) {
    uint64_t v3 = 1802661751;
  }
  else {
    uint64_t v3 = 1701670760;
  }
  if (v2 == v3) {
    char v4 = 1;
  }
  else {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease_n();
  return v4 & 1;
}

uint64_t sub_10071BE3C(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x676E696B6C6177;
  unint64_t v3 = 0xE700000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 0x676E696B6C6177;
  switch(v4)
  {
    case 1:
      unsigned int v6 = 1818458467;
      goto LABEL_4;
    case 2:
      unsigned int v6 = 1986622052;
LABEL_4:
      uint64_t v5 = v6 | 0x676E6900000000;
      break;
    case 3:
      uint64_t v5 = 0x616E6F6974617473;
      unint64_t v3 = 0xEA00000000007972;
      break;
    default:
      break;
  }
  unint64_t v7 = 0xE700000000000000;
  switch(a2)
  {
    case 1:
      if (v5 == 0x676E696C637963) {
        goto LABEL_13;
      }
      goto LABEL_15;
    case 2:
      uint64_t v2 = 0x676E6976697264;
      goto LABEL_10;
    case 3:
      unint64_t v7 = 0xEA00000000007972;
      if (v5 == 0x616E6F6974617473) {
        goto LABEL_13;
      }
      goto LABEL_15;
    default:
LABEL_10:
      if (v5 != v2) {
        goto LABEL_15;
      }
LABEL_13:
      if (v3 == v7) {
        char v8 = 1;
      }
      else {
LABEL_15:
      }
        char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v8 & 1;
  }
}

uint64_t sub_10071BFBC(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x5364656573;
  unint64_t v3 = 0xE500000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 0x5364656573;
  switch(v4)
  {
    case 1:
      uint64_t v5 = 0x6953726576726573;
      unint64_t v3 = 0xEA00000000006E67;
      break;
    case 2:
      uint64_t v5 = 0x6F43737574617473;
      unint64_t v3 = 0xEA00000000006564;
      break;
    case 3:
      uint64_t v5 = 0x7374726563;
      break;
    case 4:
      uint64_t v5 = 0x704164656B73616DLL;
      unint64_t v3 = 0xED00006449656C70;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE500000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xEA00000000006E67;
      if (v5 == 0x6953726576726573) {
        goto LABEL_13;
      }
      goto LABEL_16;
    case 2:
      unint64_t v6 = 0xEA00000000006564;
      if (v5 != 0x6F43737574617473) {
        goto LABEL_16;
      }
      goto LABEL_13;
    case 3:
      uint64_t v2 = 0x7374726563;
      goto LABEL_12;
    case 4:
      unint64_t v6 = 0xED00006449656C70;
      if (v5 != 0x704164656B73616DLL) {
        goto LABEL_16;
      }
      goto LABEL_13;
    default:
LABEL_12:
      if (v5 != v2) {
        goto LABEL_16;
      }
LABEL_13:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_16:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_10071C1A0(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    unint64_t v3 = 0x61636F4C6E736361;
  }
  else {
    unint64_t v3 = 0xD000000000000014;
  }
  if (v2) {
    unint64_t v4 = 0x80000001013F0F70;
  }
  else {
    unint64_t v4 = 0xED0000736E6F6974;
  }
  if (a2) {
    unint64_t v5 = 0x61636F4C6E736361;
  }
  else {
    unint64_t v5 = 0xD000000000000014;
  }
  if (a2) {
    unint64_t v6 = 0xED0000736E6F6974;
  }
  else {
    unint64_t v6 = 0x80000001013F0F70;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_10071C258(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xD00000000000002BLL;
  unint64_t v3 = 0x80000001013F0DD0;
  uint64_t v4 = a1;
  unint64_t v5 = 0xD00000000000002BLL;
  switch(v4)
  {
    case 1:
      unint64_t v6 = "com.apple.icloud.searchpartyd.pairingmanager";
      goto LABEL_6;
    case 2:
      unint64_t v5 = 0xD000000000000041;
      char v7 = "com.apple.icloud.searchpartyd.pairingmanager.pairingkeydataaccess";
      goto LABEL_9;
    case 3:
      unint64_t v5 = 0xD000000000000033;
      char v7 = "com.apple.icloud.searchpartyd.firmwareupdate.access";
      goto LABEL_9;
    case 4:
      unint64_t v6 = "com.apple.icloud.searchpartyd.settings.write";
LABEL_6:
      unint64_t v3 = (unint64_t)(v6 - 32) | 0x8000000000000000;
      unint64_t v5 = 0xD00000000000002CLL;
      break;
    case 5:
      unint64_t v5 = 0xD000000000000038;
      char v7 = "com.apple.icloud.searchparty.ownersession.fmipitemaccess";
      goto LABEL_9;
    case 6:
      unint64_t v5 = 0xD00000000000003ELL;
      char v7 = "com.apple.icloud.searchparty.beaconManager.deviceManageraccess";
LABEL_9:
      unint64_t v3 = (unint64_t)(v7 - 32) | 0x8000000000000000;
      break;
    default:
      break;
  }
  unint64_t v8 = 0x80000001013F0DD0;
  switch(a2)
  {
    case 1:
      char v9 = "com.apple.icloud.searchpartyd.pairingmanager";
      goto LABEL_15;
    case 2:
      unint64_t v10 = 0xD000000000000041;
      uint64_t v11 = "com.apple.icloud.searchpartyd.pairingmanager.pairingkeydataaccess";
      goto LABEL_20;
    case 3:
      unint64_t v10 = 0xD000000000000033;
      uint64_t v11 = "com.apple.icloud.searchpartyd.firmwareupdate.access";
      goto LABEL_20;
    case 4:
      char v9 = "com.apple.icloud.searchpartyd.settings.write";
LABEL_15:
      unint64_t v8 = (unint64_t)(v9 - 32) | 0x8000000000000000;
      unint64_t v2 = 0xD00000000000002CLL;
      goto LABEL_16;
    case 5:
      unint64_t v10 = 0xD000000000000038;
      uint64_t v11 = "com.apple.icloud.searchparty.ownersession.fmipitemaccess";
      goto LABEL_20;
    case 6:
      unint64_t v10 = 0xD00000000000003ELL;
      uint64_t v11 = "com.apple.icloud.searchparty.beaconManager.deviceManageraccess";
LABEL_20:
      unint64_t v8 = (unint64_t)(v11 - 32) | 0x8000000000000000;
      if (v5 == v10) {
        goto LABEL_21;
      }
      goto LABEL_23;
    default:
LABEL_16:
      if (v5 != v2) {
        goto LABEL_23;
      }
LABEL_21:
      if (v3 == v8) {
        char v12 = 1;
      }
      else {
LABEL_23:
      }
        char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v12 & 1;
  }
}

uint64_t sub_10071C448(char a1, char a2)
{
  unint64_t v3 = 0xE100000000000000;
  uint64_t v4 = 68;
  switch(a1)
  {
    case 1:
      unint64_t v3 = 0xE200000000000000;
      uint64_t v4 = 21840;
      break;
    case 2:
      unint64_t v3 = 0xE200000000000000;
      uint64_t v4 = 21072;
      break;
    case 3:
      uint64_t v4 = 65;
      break;
    default:
      break;
  }
  unint64_t v5 = 0xE100000000000000;
  uint64_t v6 = 68;
  switch(a2)
  {
    case 1:
      unint64_t v5 = 0xE200000000000000;
      if (v4 == 21840) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      unint64_t v5 = 0xE200000000000000;
      uint64_t v6 = 21072;
      goto LABEL_9;
    case 3:
      if (v4 == 65) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v4 != v6) {
        goto LABEL_14;
      }
LABEL_12:
      if (v3 == v5) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_10071C574(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xD000000000000010;
  unint64_t v3 = 0x80000001013EEA50;
  uint64_t v4 = a1;
  unint64_t v5 = 0xD000000000000010;
  switch(v4)
  {
    case 1:
      unint64_t v5 = 0x696669746E656469;
      unint64_t v3 = 0xEA00000000007265;
      break;
    case 2:
      uint64_t v6 = "associatedBeacon";
      goto LABEL_7;
    case 3:
      unint64_t v3 = 0xE800000000000000;
      unint64_t v5 = 0x656475746974616CLL;
      break;
    case 4:
      unint64_t v5 = 0x64757469676E6F6CLL;
      unint64_t v3 = 0xE900000000000065;
      break;
    case 5:
      unint64_t v5 = 0xD000000000000012;
      uint64_t v6 = "horizontalAccuracy";
LABEL_7:
      unint64_t v3 = (unint64_t)(v6 - 32) | 0x8000000000000000;
      break;
    case 6:
      unint64_t v5 = 0x6D617473656D6974;
      unint64_t v3 = 0xE900000000000070;
      break;
    case 7:
      unint64_t v5 = 0x6E6F697461636F6CLL;
      unint64_t v3 = 0xEE00656372756F53;
      break;
    case 8:
      unint64_t v3 = 0xE800000000000000;
      unint64_t v5 = 0x657461446E616373;
      break;
    default:
      break;
  }
  unint64_t v7 = 0x80000001013EEA50;
  switch(a2)
  {
    case 1:
      unint64_t v7 = 0xEA00000000007265;
      if (v5 == 0x696669746E656469) {
        goto LABEL_26;
      }
      goto LABEL_29;
    case 2:
      unint64_t v8 = "associatedBeacon";
      goto LABEL_20;
    case 3:
      unint64_t v7 = 0xE800000000000000;
      if (v5 != 0x656475746974616CLL) {
        goto LABEL_29;
      }
      goto LABEL_26;
    case 4:
      unint64_t v7 = 0xE900000000000065;
      if (v5 != 0x64757469676E6F6CLL) {
        goto LABEL_29;
      }
      goto LABEL_26;
    case 5:
      unint64_t v2 = 0xD000000000000012;
      unint64_t v8 = "horizontalAccuracy";
LABEL_20:
      unint64_t v7 = (unint64_t)(v8 - 32) | 0x8000000000000000;
      if (v5 != v2) {
        goto LABEL_29;
      }
      goto LABEL_26;
    case 6:
      unint64_t v7 = 0xE900000000000070;
      if (v5 != 0x6D617473656D6974) {
        goto LABEL_29;
      }
      goto LABEL_26;
    case 7:
      unint64_t v2 = 0x6E6F697461636F6CLL;
      unint64_t v7 = 0xEE00656372756F53;
      goto LABEL_25;
    case 8:
      unint64_t v7 = 0xE800000000000000;
      if (v5 != 0x657461446E616373) {
        goto LABEL_29;
      }
      goto LABEL_26;
    default:
LABEL_25:
      if (v5 != v2) {
        goto LABEL_29;
      }
LABEL_26:
      if (v3 == v7) {
        char v9 = 1;
      }
      else {
LABEL_29:
      }
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v9 & 1;
  }
}

uint64_t sub_10071C854(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x6F43737574617473;
  }
  else {
    uint64_t v3 = 0x7069726373627573;
  }
  if (v2) {
    unint64_t v4 = 0xEE0064496E6F6974;
  }
  else {
    unint64_t v4 = 0xEA00000000006564;
  }
  if (a2) {
    uint64_t v5 = 0x6F43737574617473;
  }
  else {
    uint64_t v5 = 0x7069726373627573;
  }
  if (a2) {
    unint64_t v6 = 0xEA00000000006564;
  }
  else {
    unint64_t v6 = 0xEE0064496E6F6974;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_10071C90C(char a1, char a2)
{
  unint64_t v3 = 0xD000000000000017;
  unint64_t v4 = 0x80000001013F0CF0;
  switch(a1)
  {
    case 1:
      unint64_t v3 = 0xD00000000000001BLL;
      uint64_t v5 = "fmipLocationServicesEnabled";
      goto LABEL_10;
    case 2:
      unint64_t v3 = 0x45676E69646E6966;
      goto LABEL_5;
    case 3:
      unint64_t v3 = 0x4565636976726573;
LABEL_5:
      unint64_t v4 = 0xEE0064656C62616ELL;
      break;
    case 4:
      unint64_t v3 = 0x7461745370696D66;
      unint64_t v4 = 0xE900000000000065;
      break;
    case 5:
      unint64_t v4 = 0x80000001013F0D60;
      unint64_t v3 = 0xD000000000000012;
      break;
    case 6:
      unint64_t v3 = 0x53746E756F636361;
      unint64_t v4 = 0xEF79746972756365;
      break;
    case 7:
      unint64_t v3 = 0xD000000000000015;
      uint64_t v5 = "canPublishAnonymously";
LABEL_10:
      unint64_t v4 = (unint64_t)(v5 - 32) | 0x8000000000000000;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xD000000000000017;
  unint64_t v7 = 0x80000001013F0CF0;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xD00000000000001BLL;
      unint64_t v8 = "fmipLocationServicesEnabled";
      goto LABEL_20;
    case 2:
      unint64_t v6 = 0x45676E69646E6966;
      goto LABEL_15;
    case 3:
      unint64_t v6 = 0x4565636976726573;
LABEL_15:
      unint64_t v7 = 0xEE0064656C62616ELL;
      break;
    case 4:
      unint64_t v6 = 0x7461745370696D66;
      unint64_t v7 = 0xE900000000000065;
      break;
    case 5:
      unint64_t v7 = 0x80000001013F0D60;
      unint64_t v6 = 0xD000000000000012;
      break;
    case 6:
      unint64_t v6 = 0x53746E756F636361;
      unint64_t v7 = 0xEF79746972756365;
      break;
    case 7:
      unint64_t v6 = 0xD000000000000015;
      unint64_t v8 = "canPublishAnonymously";
LABEL_20:
      unint64_t v7 = (unint64_t)(v8 - 32) | 0x8000000000000000;
      break;
    default:
      break;
  }
  if (v3 == v6 && v4 == v7) {
    char v9 = 1;
  }
  else {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

uint64_t sub_10071CB98(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x657669746361;
  }
  else {
    uint64_t v3 = 0x7472656E69;
  }
  if (v2) {
    unint64_t v4 = 0xE500000000000000;
  }
  else {
    unint64_t v4 = 0xE600000000000000;
  }
  if (a2) {
    uint64_t v5 = 0x657669746361;
  }
  else {
    uint64_t v5 = 0x7472656E69;
  }
  if (a2) {
    unint64_t v6 = 0xE600000000000000;
  }
  else {
    unint64_t v6 = 0xE500000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_10071CC38(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 1835365481;
  unint64_t v3 = 0xE400000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 1835365481;
  switch(v4)
  {
    case 1:
      uint64_t v5 = 1936094325;
      break;
    case 2:
      uint64_t v5 = 0x63616542666C6573;
      unint64_t v3 = 0xEA00000000006E6FLL;
      break;
    case 3:
      uint64_t v5 = 0x6F4C657275636573;
      unint64_t v3 = 0xEF736E6F69746163;
      break;
    case 4:
      unint64_t v3 = 0xE300000000000000;
      uint64_t v5 = 6448503;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE400000000000000;
  switch(a2)
  {
    case 1:
      if (v5 == 1936094325) {
        goto LABEL_13;
      }
      goto LABEL_16;
    case 2:
      unint64_t v6 = 0xEA00000000006E6FLL;
      if (v5 != 0x63616542666C6573) {
        goto LABEL_16;
      }
      goto LABEL_13;
    case 3:
      uint64_t v2 = 0x6F4C657275636573;
      unint64_t v6 = 0xEF736E6F69746163;
      goto LABEL_12;
    case 4:
      unint64_t v6 = 0xE300000000000000;
      if (v5 != 6448503) {
        goto LABEL_16;
      }
      goto LABEL_13;
    default:
LABEL_12:
      if (v5 != v2) {
        goto LABEL_16;
      }
LABEL_13:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_16:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_10071CDEC(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 0x646572616873;
    }
    else {
      uint64_t v3 = 6448503;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xE600000000000000;
    }
    else {
      unint64_t v4 = 0xE300000000000000;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 0x646572616873;
      }
      else {
        uint64_t v6 = 6448503;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xE600000000000000;
      }
      else {
        unint64_t v7 = 0xE300000000000000;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE500000000000000;
    uint64_t v3 = 0x72656E776FLL;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE500000000000000;
  if (v3 != 0x72656E776FLL)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_10071CEEC(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x6E6F697461636F6CLL;
  }
  else {
    uint64_t v3 = 25705;
  }
  if (v2) {
    unint64_t v4 = 0xE200000000000000;
  }
  else {
    unint64_t v4 = 0xEC0000006F666E49;
  }
  if (a2) {
    uint64_t v5 = 0x6E6F697461636F6CLL;
  }
  else {
    uint64_t v5 = 25705;
  }
  if (a2) {
    unint64_t v6 = 0xEC0000006F666E49;
  }
  else {
    unint64_t v6 = 0xE200000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_10071CF90(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x656E6F687069;
  unint64_t v3 = 0xE600000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 0x656E6F687069;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE400000000000000;
      uint64_t v5 = 1684107369;
      break;
    case 2:
      uint64_t v5 = 1685024873;
      unint64_t v3 = 0xE400000000000000;
      break;
    case 3:
      unint64_t v3 = 0xE500000000000000;
      uint64_t v5 = 0x6863746177;
      break;
    case 4:
      unint64_t v3 = 0xE300000000000000;
      uint64_t v5 = 6513005;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE600000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE400000000000000;
      if (v5 == 1684107369) {
        goto LABEL_13;
      }
      goto LABEL_16;
    case 2:
      unint64_t v6 = 0xE400000000000000;
      if (v5 != 1685024873) {
        goto LABEL_16;
      }
      goto LABEL_13;
    case 3:
      unint64_t v6 = 0xE500000000000000;
      uint64_t v2 = 0x6863746177;
      goto LABEL_12;
    case 4:
      unint64_t v6 = 0xE300000000000000;
      if (v5 != 6513005) {
        goto LABEL_16;
      }
      goto LABEL_13;
    default:
LABEL_12:
      if (v5 != v2) {
        goto LABEL_16;
      }
LABEL_13:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_16:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_10071D124(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x656E6F687069;
  unint64_t v3 = 0xE600000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 0x656E6F687069;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE400000000000000;
      uint64_t v5 = 1684107369;
      break;
    case 2:
      uint64_t v5 = 1685024873;
      unint64_t v3 = 0xE400000000000000;
      break;
    case 3:
      unint64_t v3 = 0xE300000000000000;
      uint64_t v5 = 6513005;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE600000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE400000000000000;
      if (v5 == 1684107369) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      uint64_t v2 = 1685024873;
      unint64_t v6 = 0xE400000000000000;
      goto LABEL_9;
    case 3:
      unint64_t v6 = 0xE300000000000000;
      if (v5 == 6513005) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v5 != v2) {
        goto LABEL_14;
      }
LABEL_12:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_10071D284(char a1, char a2)
{
  unint64_t v3 = 0xE200000000000000;
  uint64_t v4 = 25705;
  switch(a1)
  {
    case 1:
      unint64_t v3 = 0xE500000000000000;
      uint64_t v4 = 0x6C6562616CLL;
      break;
    case 2:
      uint64_t v4 = 0x7079546C6562616CLL;
      goto LABEL_6;
    case 3:
      unint64_t v3 = 0xE800000000000000;
      uint64_t v4 = 0x656475746974616CLL;
      break;
    case 4:
      uint64_t v4 = 0x64757469676E6F6CLL;
LABEL_6:
      unint64_t v3 = 0xE900000000000065;
      break;
    case 5:
      unint64_t v3 = 0xE800000000000000;
      uint64_t v4 = 0x7354657461647075;
      break;
    case 6:
      unint64_t v3 = 0xE600000000000000;
      uint64_t v4 = 0x644972657375;
      break;
    default:
      break;
  }
  unint64_t v5 = 0xE200000000000000;
  uint64_t v6 = 25705;
  switch(a2)
  {
    case 1:
      unint64_t v5 = 0xE500000000000000;
      if (v4 == 0x6C6562616CLL) {
        goto LABEL_20;
      }
      goto LABEL_23;
    case 2:
      uint64_t v7 = 0x7079546C6562616CLL;
      goto LABEL_16;
    case 3:
      unint64_t v5 = 0xE800000000000000;
      if (v4 != 0x656475746974616CLL) {
        goto LABEL_23;
      }
      goto LABEL_20;
    case 4:
      uint64_t v7 = 0x64757469676E6F6CLL;
LABEL_16:
      unint64_t v5 = 0xE900000000000065;
      if (v4 != v7) {
        goto LABEL_23;
      }
      goto LABEL_20;
    case 5:
      unint64_t v5 = 0xE800000000000000;
      uint64_t v6 = 0x7354657461647075;
      goto LABEL_19;
    case 6:
      unint64_t v5 = 0xE600000000000000;
      if (v4 != 0x644972657375) {
        goto LABEL_23;
      }
      goto LABEL_20;
    default:
LABEL_19:
      if (v4 != v6) {
        goto LABEL_23;
      }
LABEL_20:
      if (v3 == v5) {
        char v8 = 1;
      }
      else {
LABEL_23:
      }
        char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v8 & 1;
  }
}

uint64_t sub_10071D4A4(char a1, unsigned __int8 a2)
{
  unint64_t v2 = 0x80000001013EF4D0;
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v3 = 0x80000001013EF4F0;
    }
    else {
      unint64_t v3 = 0x80000001013EF510;
    }
    int v4 = a2;
    if (a2) {
      goto LABEL_6;
    }
  }
  else
  {
    unint64_t v3 = 0x80000001013EF4D0;
    int v4 = a2;
    if (a2)
    {
LABEL_6:
      if (v4 == 1) {
        unint64_t v2 = 0x80000001013EF4F0;
      }
      else {
        unint64_t v2 = 0x80000001013EF510;
      }
    }
  }
  if (v3 == v2) {
    char v5 = 1;
  }
  else {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_10071D584(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x6974737561687865;
  }
  else {
    uint64_t v3 = 0x6F4C74736574616CLL;
  }
  if (v2) {
    unint64_t v4 = 0xEE006E6F69746163;
  }
  else {
    unint64_t v4 = 0xEA00000000006576;
  }
  if (a2) {
    uint64_t v5 = 0x6974737561687865;
  }
  else {
    uint64_t v5 = 0x6F4C74736574616CLL;
  }
  if (a2) {
    unint64_t v6 = 0xEA00000000006576;
  }
  else {
    unint64_t v6 = 0xEE006E6F69746163;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_10071D63C(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xE900000000000065;
  uint64_t v3 = 0x7461447472617473;
  uint64_t v4 = a1;
  uint64_t v5 = 0x7461447472617473;
  unint64_t v6 = 0xE900000000000065;
  switch(v4)
  {
    case 1:
      unint64_t v6 = 0xE700000000000000;
      uint64_t v5 = 0x65746144646E65;
      break;
    case 2:
      unint64_t v6 = 0xE300000000000000;
      uint64_t v5 = 7562345;
      break;
    case 3:
      uint64_t v5 = 0x7261646E6F636573;
      unint64_t v6 = 0xEC00000073644979;
      break;
    case 4:
      uint64_t v5 = 0x6F43686372616573;
      unint64_t v6 = 0xED0000747865746ELL;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v2 = 0xE700000000000000;
      if (v5 == 0x65746144646E65) {
        goto LABEL_13;
      }
      goto LABEL_16;
    case 2:
      unint64_t v2 = 0xE300000000000000;
      if (v5 != 7562345) {
        goto LABEL_16;
      }
      goto LABEL_13;
    case 3:
      uint64_t v3 = 0x7261646E6F636573;
      unint64_t v2 = 0xEC00000073644979;
      goto LABEL_12;
    case 4:
      unint64_t v2 = 0xED0000747865746ELL;
      if (v5 != 0x6F43686372616573) {
        goto LABEL_16;
      }
      goto LABEL_13;
    default:
LABEL_12:
      if (v5 != v3) {
        goto LABEL_16;
      }
LABEL_13:
      if (v6 == v2) {
        char v7 = 1;
      }
      else {
LABEL_16:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_10071D828(char a1, char a2)
{
  if (qword_1013684E0[a1] == qword_1013684E0[a2]) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease_n();
  return v2 & 1;
}

uint64_t sub_10071D890(char a1, char a2)
{
  if (qword_1013684F8[a1] == qword_1013684F8[a2]) {
    char v2 = 1;
  }
  else {
    char v2 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease_n();
  return v2 & 1;
}

uint64_t sub_10071D8F8(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x7265706F72504B52;
  }
  else {
    uint64_t v3 = 0x6669747265434B52;
  }
  if (v2) {
    unint64_t v4 = 0xEF6E6F6974616369;
  }
  else {
    unint64_t v4 = 0xEC00000073656974;
  }
  if (a2) {
    uint64_t v5 = 0x7265706F72504B52;
  }
  else {
    uint64_t v5 = 0x6669747265434B52;
  }
  if (a2) {
    unint64_t v6 = 0xEC00000073656974;
  }
  else {
    unint64_t v6 = 0xEF6E6F6974616369;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_10071D9B4(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x7265776F50776F6CLL;
  unint64_t v3 = 0xE800000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 0x7265776F50776F6CLL;
  switch(v4)
  {
    case 1:
      uint64_t v5 = 0x6F506D756964656DLL;
      unint64_t v3 = 0xEB00000000726577;
      break;
    case 2:
      uint64_t v5 = 0x65776F5068676968;
      unint64_t v3 = 0xE900000000000072;
      break;
    case 3:
      uint64_t v5 = 0x4F7265776F506E6FLL;
      unint64_t v3 = 0xED0000694669576ELL;
      break;
    case 4:
      uint64_t v5 = 0x4F7265776F506E6FLL;
      unint64_t v3 = 0xED00006C6C65436ELL;
      break;
    case 5:
      uint64_t v5 = 0x7265747461426E6FLL;
      unint64_t v3 = 0xEF694669576E4F79;
      break;
    case 6:
      uint64_t v5 = 0x7265747461426E6FLL;
      unint64_t v3 = 0xEF6C6C65436E4F79;
      break;
    case 7:
      uint64_t v5 = 0x6F696E61706D6F63;
      unint64_t v3 = 0xEF79627261654E6ELL;
      break;
    case 8:
      uint64_t v5 = 0x6857796669746F6ELL;
      unint64_t v3 = 0xEF646E756F466E65;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE800000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xEB00000000726577;
      if (v5 == 0x6F506D756964656DLL) {
        goto LABEL_25;
      }
      goto LABEL_28;
    case 2:
      unint64_t v6 = 0xE900000000000072;
      if (v5 != 0x65776F5068676968) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 3:
      uint64_t v7 = 0x694669576ELL;
      goto LABEL_17;
    case 4:
      uint64_t v7 = 0x6C6C65436ELL;
LABEL_17:
      unint64_t v6 = v7 & 0xFFFFFFFFFFFFLL | 0xED00000000000000;
      if (v5 != 0x4F7265776F506E6FLL) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 5:
      unint64_t v6 = 0xEF694669576E4F79;
      if (v5 != 0x7265747461426E6FLL) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 6:
      unint64_t v6 = 0xEF6C6C65436E4F79;
      if (v5 != 0x7265747461426E6FLL) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 7:
      uint64_t v2 = 0x6F696E61706D6F63;
      unint64_t v6 = 0xEF79627261654E6ELL;
      goto LABEL_24;
    case 8:
      unint64_t v6 = 0xEF646E756F466E65;
      if (v5 != 0x6857796669746F6ELL) {
        goto LABEL_28;
      }
      goto LABEL_25;
    default:
LABEL_24:
      if (v5 != v2) {
        goto LABEL_28;
      }
LABEL_25:
      if (v3 == v6) {
        char v8 = 1;
      }
      else {
LABEL_28:
      }
        char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v8 & 1;
  }
}

uint64_t sub_10071DD1C(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xD000000000000010;
  unint64_t v3 = 0x80000001013EEA50;
  uint64_t v4 = a1;
  unint64_t v5 = 0xD000000000000010;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE700000000000000;
      unint64_t v5 = 0x6E6F6973726576;
      break;
    case 2:
      unint64_t v5 = 0x696669746E656469;
      unint64_t v3 = 0xEA00000000007265;
      break;
    case 3:
      unint64_t v5 = 0xD000000000000016;
      unint64_t v3 = 0x80000001013EEA70;
      break;
    case 4:
      unint64_t v3 = 0xE400000000000000;
      unint64_t v5 = 1701667182;
      break;
    case 5:
      unint64_t v5 = 0x657264644163616DLL;
      unint64_t v3 = 0xEA00000000007373;
      break;
    case 6:
      unint64_t v5 = 0x614D6E6F63616562;
      unint64_t v3 = 0xE900000000000070;
      break;
    default:
      break;
  }
  unint64_t v6 = 0x80000001013EEA50;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE700000000000000;
      if (v5 == 0x6E6F6973726576) {
        goto LABEL_19;
      }
      goto LABEL_22;
    case 2:
      unint64_t v6 = 0xEA00000000007265;
      if (v5 != 0x696669746E656469) {
        goto LABEL_22;
      }
      goto LABEL_19;
    case 3:
      unint64_t v6 = 0x80000001013EEA70;
      if (v5 != 0xD000000000000016) {
        goto LABEL_22;
      }
      goto LABEL_19;
    case 4:
      unint64_t v6 = 0xE400000000000000;
      if (v5 != 1701667182) {
        goto LABEL_22;
      }
      goto LABEL_19;
    case 5:
      unint64_t v2 = 0x657264644163616DLL;
      unint64_t v6 = 0xEA00000000007373;
      goto LABEL_18;
    case 6:
      unint64_t v6 = 0xE900000000000070;
      if (v5 != 0x614D6E6F63616562) {
        goto LABEL_22;
      }
      goto LABEL_19;
    default:
LABEL_18:
      if (v5 != v2) {
        goto LABEL_22;
      }
LABEL_19:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_22:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_10071DF74(unsigned __int8 a1, unsigned __int8 a2)
{
  unint64_t v2 = 0xD000000000000010;
  unint64_t v3 = 0x80000001013EE1B0;
  int v4 = a1;
  if (a1)
  {
    if (a1 == 1) {
      unint64_t v5 = 0x65636E6575716573;
    }
    else {
      unint64_t v5 = 0x7865646E69;
    }
    if (v4 == 1) {
      unint64_t v6 = 0xE800000000000000;
    }
    else {
      unint64_t v6 = 0xE500000000000000;
    }
    int v7 = a2;
    if (!a2) {
      goto LABEL_15;
    }
    goto LABEL_9;
  }
  unint64_t v5 = 0xD000000000000010;
  unint64_t v6 = 0x80000001013EE1B0;
  int v7 = a2;
  if (a2)
  {
LABEL_9:
    if (v7 == 1) {
      unint64_t v2 = 0x65636E6575716573;
    }
    else {
      unint64_t v2 = 0x7865646E69;
    }
    if (v7 == 1) {
      unint64_t v3 = 0xE800000000000000;
    }
    else {
      unint64_t v3 = 0xE500000000000000;
    }
  }
LABEL_15:
  if (v5 == v2 && v6 == v3) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_10071E07C(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x737961776C41;
  unint64_t v3 = 0xE600000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 0x737961776C41;
  switch(v4)
  {
    case 1:
      uint64_t v5 = 0x656D6974656D6F53;
      unint64_t v3 = 0xE900000000000073;
      break;
    case 2:
      uint64_t v5 = 0x796C65726152;
      break;
    case 3:
      uint64_t v5 = 0x656C62616E55;
      break;
    case 4:
      uint64_t v5 = 0x74276E6469442049;
      unint64_t v3 = 0xEC00000079725420;
      break;
    case 5:
      uint64_t v5 = 0x6C70704120746F4ELL;
      unint64_t v3 = 0xEE00656C62616369;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE600000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE900000000000073;
      if (v5 == 0x656D6974656D6F53) {
        goto LABEL_16;
      }
      goto LABEL_19;
    case 2:
      if (v5 != 0x796C65726152) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 3:
      if (v5 != 0x656C62616E55) {
        goto LABEL_19;
      }
      goto LABEL_16;
    case 4:
      uint64_t v2 = 0x74276E6469442049;
      unint64_t v6 = 0xEC00000079725420;
      goto LABEL_15;
    case 5:
      unint64_t v6 = 0xEE00656C62616369;
      if (v5 != 0x6C70704120746F4ELL) {
        goto LABEL_19;
      }
      goto LABEL_16;
    default:
LABEL_15:
      if (v5 != v2) {
        goto LABEL_19;
      }
LABEL_16:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_19:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_10071E290(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 7105633;
  unint64_t v3 = 0xE300000000000000;
  uint64_t v4 = a1;
  unint64_t v5 = 7105633;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE100000000000000;
      unint64_t v5 = 48;
      break;
    case 2:
      unint64_t v3 = 0xE200000000000000;
      unint64_t v5 = 12589;
      break;
    case 3:
      unint64_t v6 = "sysdiagnose-only";
      goto LABEL_7;
    case 4:
      unint64_t v6 = "log-archive-only";
      goto LABEL_7;
    case 5:
      unint64_t v6 = "full-log-archive";
LABEL_7:
      unint64_t v3 = (unint64_t)(v6 - 32) | 0x8000000000000000;
      unint64_t v5 = 0xD000000000000010;
      break;
    case 6:
      unint64_t v5 = 0xD00000000000001CLL;
      unint64_t v3 = 0x80000001013EE6B0;
      break;
    default:
      break;
  }
  unint64_t v7 = 0xE300000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v7 = 0xE100000000000000;
      if (v5 == 48) {
        goto LABEL_19;
      }
      goto LABEL_22;
    case 2:
      unint64_t v7 = 0xE200000000000000;
      if (v5 != 12589) {
        goto LABEL_22;
      }
      goto LABEL_19;
    case 3:
      char v8 = "sysdiagnose-only";
      goto LABEL_17;
    case 4:
      char v8 = "log-archive-only";
      goto LABEL_17;
    case 5:
      char v8 = "full-log-archive";
LABEL_17:
      unint64_t v7 = (unint64_t)(v8 - 32) | 0x8000000000000000;
      unint64_t v2 = 0xD000000000000010;
      goto LABEL_18;
    case 6:
      unint64_t v7 = 0x80000001013EE6B0;
      if (v5 != 0xD00000000000001CLL) {
        goto LABEL_22;
      }
      goto LABEL_19;
    default:
LABEL_18:
      if (v5 != v2) {
        goto LABEL_22;
      }
LABEL_19:
      if (v3 == v7) {
        char v9 = 1;
      }
      else {
LABEL_22:
      }
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v9 & 1;
  }
}

uint64_t sub_10071E46C(unsigned __int8 a1, char a2)
{
  uint64_t v2 = 0x656E6F685069;
  unint64_t v3 = 0xE600000000000000;
  uint64_t v4 = a1;
  uint64_t v5 = 0x656E6F685069;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE400000000000000;
      uint64_t v5 = 1684099177;
      break;
    case 2:
      unint64_t v3 = 0xE500000000000000;
      uint64_t v5 = 0x6863746157;
      break;
    case 3:
      unint64_t v3 = 0xE700000000000000;
      uint64_t v5 = 0x5654656C707041;
      break;
    case 4:
      unint64_t v3 = 0xE700000000000000;
      uint64_t v5 = 0x646F50656D6F48;
      break;
    case 5:
      unint64_t v3 = 0xE300000000000000;
      uint64_t v5 = 6512973;
      break;
    case 6:
      uint64_t v5 = 0x6E6F69736956;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE600000000000000;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE400000000000000;
      if (v5 == 1684099177) {
        goto LABEL_19;
      }
      goto LABEL_22;
    case 2:
      unint64_t v6 = 0xE500000000000000;
      if (v5 != 0x6863746157) {
        goto LABEL_22;
      }
      goto LABEL_19;
    case 3:
      unint64_t v6 = 0xE700000000000000;
      if (v5 != 0x5654656C707041) {
        goto LABEL_22;
      }
      goto LABEL_19;
    case 4:
      unint64_t v6 = 0xE700000000000000;
      if (v5 != 0x646F50656D6F48) {
        goto LABEL_22;
      }
      goto LABEL_19;
    case 5:
      unint64_t v6 = 0xE300000000000000;
      uint64_t v2 = 6512973;
      goto LABEL_18;
    case 6:
      if (v5 != 0x6E6F69736956) {
        goto LABEL_22;
      }
      goto LABEL_19;
    default:
LABEL_18:
      if (v5 != v2) {
        goto LABEL_22;
      }
LABEL_19:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_22:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_10071E678(char a1, char a2)
{
  unint64_t v3 = 0xD00000000000001BLL;
  unint64_t v4 = 0x80000001013EE8B0;
  switch(a1)
  {
    case 1:
      uint64_t v5 = "fastRollDurationInSecs";
      goto LABEL_5;
    case 2:
      unint64_t v3 = 0xD000000000000023;
      unint64_t v6 = "fastRollAdvertisementIntervalInSecs";
      goto LABEL_9;
    case 3:
      uint64_t v5 = "slowRollDurationInSecs";
LABEL_5:
      unint64_t v4 = (unint64_t)(v5 - 32) | 0x8000000000000000;
      unint64_t v3 = 0xD000000000000016;
      break;
    case 4:
      unint64_t v3 = 0xD000000000000025;
      unint64_t v6 = "slowRollNoAdvertisementDurationInSecs";
      goto LABEL_9;
    case 5:
      unint64_t v3 = 0xD00000000000002ALL;
      unint64_t v6 = "slowRollNoAdvertisementDurationDecayFactor";
      goto LABEL_9;
    case 6:
      unint64_t v3 = 0xD000000000000020;
      unint64_t v6 = "postInitialDayAdvertisementTimes";
LABEL_9:
      unint64_t v4 = (unint64_t)(v6 - 32) | 0x8000000000000000;
      break;
    default:
      break;
  }
  unint64_t v7 = 0xD00000000000001BLL;
  unint64_t v8 = 0x80000001013EE8B0;
  switch(a2)
  {
    case 1:
      char v9 = "fastRollDurationInSecs";
      goto LABEL_14;
    case 2:
      unint64_t v10 = 0xD000000000000023;
      uint64_t v11 = "fastRollAdvertisementIntervalInSecs";
      goto LABEL_20;
    case 3:
      char v9 = "slowRollDurationInSecs";
LABEL_14:
      unint64_t v8 = (unint64_t)(v9 - 32) | 0x8000000000000000;
      unint64_t v7 = 0xD000000000000016;
      goto LABEL_15;
    case 4:
      unint64_t v10 = 0xD000000000000025;
      uint64_t v11 = "slowRollNoAdvertisementDurationInSecs";
      goto LABEL_20;
    case 5:
      unint64_t v10 = 0xD00000000000002ALL;
      uint64_t v11 = "slowRollNoAdvertisementDurationDecayFactor";
      goto LABEL_20;
    case 6:
      unint64_t v10 = 0xD000000000000020;
      uint64_t v11 = "postInitialDayAdvertisementTimes";
LABEL_20:
      unint64_t v8 = (unint64_t)(v11 - 32) | 0x8000000000000000;
      if (v3 == v10) {
        goto LABEL_21;
      }
      goto LABEL_23;
    default:
LABEL_15:
      if (v3 != v7) {
        goto LABEL_23;
      }
LABEL_21:
      if (v4 == v8) {
        char v12 = 1;
      }
      else {
LABEL_23:
      }
        char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v12 & 1;
  }
}

uint64_t sub_10071E868(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xD000000000000010;
  unint64_t v3 = 0x80000001013EE1B0;
  uint64_t v4 = a1;
  unint64_t v5 = 0xD000000000000010;
  switch(v4)
  {
    case 1:
      unint64_t v3 = 0xE400000000000000;
      unint64_t v5 = 1701869940;
      break;
    case 2:
      unint64_t v5 = 0x666E497865646E69;
      unint64_t v3 = 0xE90000000000006FLL;
      break;
    case 3:
      unint64_t v5 = 0x6D617473656D6974;
      unint64_t v3 = 0xE900000000000070;
      break;
    default:
      break;
  }
  unint64_t v6 = 0x80000001013EE1B0;
  switch(a2)
  {
    case 1:
      unint64_t v6 = 0xE400000000000000;
      if (v5 == 1701869940) {
        goto LABEL_12;
      }
      goto LABEL_14;
    case 2:
      unint64_t v2 = 0x666E497865646E69;
      unint64_t v6 = 0xE90000000000006FLL;
      goto LABEL_9;
    case 3:
      unint64_t v6 = 0xE900000000000070;
      if (v5 == 0x6D617473656D6974) {
        goto LABEL_12;
      }
      goto LABEL_14;
    default:
LABEL_9:
      if (v5 != v2) {
        goto LABEL_14;
      }
LABEL_12:
      if (v3 == v6) {
        char v7 = 1;
      }
      else {
LABEL_14:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_10071E9FC(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0xED0000746E656D65;
  unint64_t v3 = 0x7369747265766461;
  uint64_t v4 = a1;
  unint64_t v5 = 0x7369747265766461;
  unint64_t v6 = 0xED0000746E656D65;
  switch(v4)
  {
    case 1:
      unint64_t v5 = 0x6D617473656D6974;
      unint64_t v6 = 0xE900000000000070;
      break;
    case 2:
      unint64_t v6 = 0xE800000000000000;
      unint64_t v5 = 0x617461446174656DLL;
      break;
    case 3:
      unint64_t v6 = 0x80000001013EF110;
      unint64_t v5 = 0xD000000000000010;
      break;
    case 4:
      unint64_t v6 = 0xE800000000000000;
      unint64_t v5 = 0x656475746974616CLL;
      break;
    case 5:
      unint64_t v5 = 0x64757469676E6F6CLL;
      unint64_t v6 = 0xE900000000000065;
      break;
    case 6:
      unint64_t v5 = 0xD000000000000012;
      unint64_t v6 = 0x80000001013EF030;
      break;
    case 7:
      unint64_t v6 = 0xE600000000000000;
      unint64_t v5 = 0x737574617473;
      break;
    default:
      break;
  }
  switch(a2)
  {
    case 1:
      unint64_t v2 = 0xE900000000000070;
      if (v5 == 0x6D617473656D6974) {
        goto LABEL_22;
      }
      goto LABEL_25;
    case 2:
      unint64_t v2 = 0xE800000000000000;
      if (v5 != 0x617461446174656DLL) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 3:
      unint64_t v2 = 0x80000001013EF110;
      if (v5 != 0xD000000000000010) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 4:
      unint64_t v2 = 0xE800000000000000;
      if (v5 != 0x656475746974616CLL) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 5:
      unint64_t v2 = 0xE900000000000065;
      if (v5 != 0x64757469676E6F6CLL) {
        goto LABEL_25;
      }
      goto LABEL_22;
    case 6:
      unint64_t v3 = 0xD000000000000012;
      unint64_t v2 = 0x80000001013EF030;
      goto LABEL_21;
    case 7:
      unint64_t v2 = 0xE600000000000000;
      if (v5 != 0x737574617473) {
        goto LABEL_25;
      }
      goto LABEL_22;
    default:
LABEL_21:
      if (v5 != v3) {
        goto LABEL_25;
      }
LABEL_22:
      if (v6 == v2) {
        char v7 = 1;
      }
      else {
LABEL_25:
      }
        char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v7 & 1;
  }
}

uint64_t sub_10071ECC8(unsigned __int8 a1, char a2)
{
  unint64_t v2 = 0x747265434143;
  unint64_t v3 = 0xE600000000000000;
  uint64_t v4 = a1;
  unint64_t v5 = 0x747265434143;
  switch(v4)
  {
    case 1:
      unint64_t v5 = 0x444970696843;
      break;
    case 2:
      unint64_t v5 = 0x6843657571696E55;
      unint64_t v3 = 0xEC00000044497069;
      break;
    case 3:
      unint64_t v5 = 0x6E496F545344494FLL;
      unint64_t v3 = 0xED00006564756C63;
      break;
    case 4:
      unint64_t v5 = 0x754E6C6169726553;
      unint64_t v3 = 0xEC0000007265626DLL;
      break;
    case 5:
      unint64_t v3 = 0xE800000000000000;
      unint64_t v5 = 0x79746964696C6156;
      break;
    case 6:
      unint64_t v5 = 0x6275504B4953;
      break;
    case 7:
      unint64_t v3 = 0x80000001013EF0F0;
      unint64_t v5 = 0xD000000000000012;
      break;
    case 8:
      unint64_t v5 = 0x6574744174726373;
      unint64_t v3 = 0xEF6E6F6974617473;
      break;
    default:
      break;
  }
  unint64_t v6 = 0xE600000000000000;
  switch(a2)
  {
    case 1:
      if (v5 == 0x444970696843) {
        goto LABEL_25;
      }
      goto LABEL_28;
    case 2:
      uint64_t v7 = 0x6843657571696E55;
      uint64_t v8 = 1145663593;
      goto LABEL_17;
    case 3:
      unint64_t v6 = 0xED00006564756C63;
      if (v5 != 0x6E496F545344494FLL) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 4:
      uint64_t v7 = 0x754E6C6169726553;
      uint64_t v8 = 1919246957;
LABEL_17:
      unint64_t v6 = v8 & 0xFFFFFFFFFFFFLL | 0xEC00000000000000;
      if (v5 != v7) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 5:
      unint64_t v6 = 0xE800000000000000;
      if (v5 != 0x79746964696C6156) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 6:
      if (v5 != 0x6275504B4953) {
        goto LABEL_28;
      }
      goto LABEL_25;
    case 7:
      unint64_t v6 = 0x80000001013EF0F0;
      unint64_t v2 = 0xD000000000000012;
      goto LABEL_24;
    case 8:
      unint64_t v6 = 0xEF6E6F6974617473;
      if (v5 != 0x6574744174726373) {
        goto LABEL_28;
      }
      goto LABEL_25;
    default:
LABEL_24:
      if (v5 != v2) {
        goto LABEL_28;
      }
LABEL_25:
      if (v3 == v6) {
        char v9 = 1;
      }
      else {
LABEL_28:
      }
        char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v9 & 1;
  }
}

uint64_t sub_10071EFB8(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 3158066;
  }
  else {
    uint64_t v3 = 0x726F7272456F6ELL;
  }
  if (v2) {
    unint64_t v4 = 0xE700000000000000;
  }
  else {
    unint64_t v4 = 0xE300000000000000;
  }
  if (a2) {
    uint64_t v5 = 3158066;
  }
  else {
    uint64_t v5 = 0x726F7272456F6ELL;
  }
  if (a2) {
    unint64_t v6 = 0xE300000000000000;
  }
  else {
    unint64_t v6 = 0xE700000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_10071F058(char a1, char a2)
{
  BOOL v2 = (a1 & 1) == 0;
  if (a1) {
    uint64_t v3 = 0x616E65746E69616DLL;
  }
  else {
    uint64_t v3 = 0x7974696C697475;
  }
  if (v2) {
    unint64_t v4 = 0xE700000000000000;
  }
  else {
    unint64_t v4 = 0xEB0000000065636ELL;
  }
  if (a2) {
    uint64_t v5 = 0x616E65746E69616DLL;
  }
  else {
    uint64_t v5 = 0x7974696C697475;
  }
  if (a2) {
    unint64_t v6 = 0xEB0000000065636ELL;
  }
  else {
    unint64_t v6 = 0xE700000000000000;
  }
  if (v3 == v5 && v4 == v6) {
    char v7 = 1;
  }
  else {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_10071F108(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2 = a1;
  if (a1)
  {
    if (a1 == 1) {
      uint64_t v3 = 0x7473696765726E75;
    }
    else {
      uint64_t v3 = 0x6E6F697461636F6CLL;
    }
    if (v2 == 1) {
      unint64_t v4 = 0xEA00000000007265;
    }
    else {
      unint64_t v4 = 0xEE00657461647055;
    }
    int v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1) {
        uint64_t v6 = 0x7473696765726E75;
      }
      else {
        uint64_t v6 = 0x6E6F697461636F6CLL;
      }
      if (v5 == 1) {
        unint64_t v7 = 0xEA00000000007265;
      }
      else {
        unint64_t v7 = 0xEE00657461647055;
      }
      if (v3 != v6) {
        goto LABEL_21;
      }
      goto LABEL_19;
    }
  }
  else
  {
    unint64_t v4 = 0xE800000000000000;
    uint64_t v3 = 0x7265747369676572;
    int v5 = a2;
    if (a2) {
      goto LABEL_9;
    }
  }
  unint64_t v7 = 0xE800000000000000;
  if (v3 != 0x7265747369676572)
  {
LABEL_21:
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7) {
    goto LABEL_21;
  }
  char v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_10071F244()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10071F320()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10071F424()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10071F53C()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10071F67C()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10071F7B8()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10071F934()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10071F9C0()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10071FAC8()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10071FC24()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10071FD50()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10071FE54()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10071FFBC()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100720114()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100720198()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_10072031C()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100720444()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100720534()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100720638()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

uint64_t sub_100720790()
{
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_1007208FC()
{
  return Hasher._finalize()();
}

Swift::Int sub_1007209E8()
{
  return Hasher._finalize()();
}

Swift::Int sub_100720AFC()
{
  return Hasher._finalize()();
}

Swift::Int sub_100720C30()
{
  return Hasher._finalize()();
}

Swift::Int sub_100720D80()
{
  return Hasher._finalize()();
}

Swift::Int sub_100720ECC()
{
  return Hasher._finalize()();
}

Swift::Int sub_100720F6C()
{
  return Hasher._finalize()();
}

Swift::Int sub_10072108C()
{
  return Hasher._finalize()();
}

Swift::Int sub_1007211C8()
{
  return Hasher._finalize()();
}

Swift::Int sub_1007212E4()
{
  return Hasher._finalize()();
}

Swift::Int sub_100721454()
{
  return Hasher._finalize()();
}

Swift::Int sub_10072156C()
{
  return Hasher._finalize()();
}

Swift::Int sub_100721604()
{
  return Hasher._finalize()();
}

Swift::Int sub_100721748()
{
  return Hasher._finalize()();
}

Swift::Int sub_10072185C()
{
  return Hasher._finalize()();
}

Swift::Int sub_10072195C()
{
  return Hasher._finalize()();
}

Swift::Int sub_100721A68()
{
  return Hasher._finalize()();
}

Swift::Int sub_100721B84()
{
  return Hasher._finalize()();
}

Swift::Int sub_100721C64()
{
  return Hasher._finalize()();
}

uint64_t sub_100721DCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for __DataStorage();
  swift_allocObject();
  uint64_t v34 = 0x2000000000;
  uint64_t v35 = __DataStorage.init(length:)();
  sub_10072AF34((int *)&v34, 0);
  uint64_t v4 = v34;
  uint64_t v5 = HIDWORD(v34);
  if (__OFSUB__(HIDWORD(v34), v34))
  {
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v6 = v35;
  if (HIDWORD(v34) - v34 != 32) {
    goto LABEL_8;
  }
  swift_allocObject();
  uint64_t v7 = __DataStorage.init(length:)();
  uint64_t v34 = 0x2000000000;
  uint64_t v35 = v7;
  sub_10072AF34((int *)&v34, 0);
  uint64_t v8 = v34;
  uint64_t v9 = HIDWORD(v34);
  if (__OFSUB__(HIDWORD(v34), v34))
  {
LABEL_7:
    __break(1u);
    goto LABEL_8;
  }
  uint64_t v31 = v6;
  uint64_t v32 = v5;
  uint64_t v33 = v4;
  uint64_t v30 = v35;
  if (HIDWORD(v34) - v34 == 32)
  {
    uint64_t v10 = type metadata accessor for TimeBasedKey();
    uint64_t v11 = a1 + *(int *)(v10 + 20);
    uint64_t v12 = type metadata accessor for DateInterval();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(a2, v11, v12);
    unint64_t v13 = (void *)(a1 + *(int *)(v10 + 24));
    uint64_t v14 = v13[4];
    unint64_t v15 = v13[5];
    uint64_t v16 = (int *)type metadata accessor for CryptoKeys();
    unint64_t v17 = (uint64_t *)(a2 + v16[5]);
    *unint64_t v17 = v14;
    v17[1] = v15;
    uint64_t v18 = v13[2];
    unint64_t v19 = v13[3];
    unint64_t v20 = (uint64_t *)(a2 + v16[6]);
    *unint64_t v20 = v18;
    v20[1] = v19;
    sub_1000361E0(v18, v19);
    sub_1000361E0(v18, v19);
    sub_100037A38(v14, v15);
    uint64_t v21 = sub_100A94760(v18, v19);
    unint64_t v23 = v22;
    sub_10001CFB8(v18, v19);
    sub_100434E0C(v21, v23, &v34);
    uint64_t v24 = v34;
    uint64_t v25 = v35;
    uint64_t result = sub_10072BF98(a1, (uint64_t (*)(void))type metadata accessor for TimeBasedKey);
    uint64_t v27 = (uint64_t *)(a2 + v16[7]);
    *uint64_t v27 = v24;
    v27[1] = v25;
    unint64_t v28 = (uint64_t *)(a2 + v16[8]);
    *unint64_t v28 = v33 | (v32 << 32);
    v28[1] = v31 | 0x4000000000000000;
    uint64_t v29 = (uint64_t *)(a2 + v16[9]);
    *uint64_t v29 = v8 | (v9 << 32);
    v29[1] = v30 | 0x4000000000000000;
    return result;
  }
LABEL_8:
  swift_release();
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t CryptoKeys.privateKey.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CryptoKeys() + 20);
  uint64_t v2 = *(void *)v1;
  sub_100037A38(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t type metadata accessor for CryptoKeys()
{
  uint64_t result = qword_10164CBC0;
  if (!qword_10164CBC0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t CryptoKeys.publicKey.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CryptoKeys() + 24);
  uint64_t v2 = *(void *)v1;
  sub_1000361E0(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t CryptoKeys.advertisement.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CryptoKeys() + 28);
  uint64_t v2 = *(void *)v1;
  sub_1000361E0(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t CryptoKeys.sharedSecretKey.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CryptoKeys() + 32);
  uint64_t v2 = *(void *)v1;
  sub_1000361E0(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t CryptoKeys.intermediateKey.getter()
{
  uint64_t v1 = v0 + *(int *)(type metadata accessor for CryptoKeys() + 36);
  uint64_t v2 = *(void *)v1;
  sub_1000361E0(*(void *)v1, *(void *)(v1 + 8));
  return v2;
}

uint64_t CryptoKeys.hash(into:)()
{
  uint64_t v1 = v0;
  type metadata accessor for DateInterval();
  sub_10072BEE8(&qword_10164CB40, (void (*)(uint64_t))&type metadata accessor for DateInterval);
  dispatch thunk of Hashable.hash(into:)();
  uint64_t v2 = (int *)type metadata accessor for CryptoKeys();
  uint64_t v3 = (uint64_t *)(v0 + v2[5]);
  unint64_t v4 = v3[1];
  if (v4 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    uint64_t v5 = *v3;
    Hasher._combine(_:)(1u);
    sub_1000361E0(v5, v4);
    Data.hash(into:)();
    sub_100037A24(v5, v4);
  }
  uint64_t v6 = (uint64_t *)(v0 + v2[6]);
  uint64_t v7 = *v6;
  unint64_t v8 = v6[1];
  sub_1000361E0(*v6, v8);
  Data.hash(into:)();
  sub_10001CFB8(v7, v8);
  uint64_t v9 = (uint64_t *)(v1 + v2[7]);
  uint64_t v10 = *v9;
  unint64_t v11 = v9[1];
  sub_1000361E0(*v9, v11);
  Data.hash(into:)();
  sub_10001CFB8(v10, v11);
  uint64_t v12 = (uint64_t *)(v1 + v2[8]);
  uint64_t v13 = *v12;
  unint64_t v14 = v12[1];
  sub_1000361E0(*v12, v14);
  Data.hash(into:)();
  sub_10001CFB8(v13, v14);
  unint64_t v15 = (uint64_t *)(v1 + v2[9]);
  uint64_t v16 = *v15;
  unint64_t v17 = v15[1];
  sub_1000361E0(*v15, v17);
  Data.hash(into:)();

  return sub_10001CFB8(v16, v17);
}

Swift::Int CryptoKeys.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t sub_1007224E8(char a1)
{
  uint64_t result = 68;
  switch(a1)
  {
    case 1:
      uint64_t result = 21072;
      break;
    case 2:
      uint64_t result = 21840;
      break;
    case 3:
      uint64_t result = 65;
      break;
    case 4:
      uint64_t result = 19283;
      break;
    case 5:
      uint64_t result = 79;
      break;
    case 6:
      uint64_t result = 17747;
      break;
    case 7:
      uint64_t result = 18771;
      break;
    case 8:
      uint64_t result = 73;
      break;
    case 9:
      uint64_t result = 19779;
      break;
    case 10:
      uint64_t result = 20035;
      break;
    case 11:
      uint64_t result = 78;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1007225BC(char a1)
{
  uint64_t result = 68;
  switch(a1)
  {
    case 1:
      uint64_t result = 21072;
      break;
    case 2:
      uint64_t result = 21840;
      break;
    case 3:
      uint64_t result = 65;
      break;
    case 4:
      uint64_t result = 19283;
      break;
    case 5:
      uint64_t result = 79;
      break;
    case 6:
      uint64_t result = 17747;
      break;
    case 7:
      uint64_t result = 18771;
      break;
    case 8:
      uint64_t result = 73;
      break;
    case 9:
      uint64_t result = 19779;
      break;
    case 10:
      uint64_t result = 20035;
      break;
    case 11:
      uint64_t result = 78;
      break;
    default:
      return result;
  }
  return result;
}

Swift::Int sub_100722694()
{
  return Hasher._finalize()();
}

uint64_t sub_1007226D0(char *a1, char *a2)
{
  char v2 = *a2;
  uint64_t v3 = sub_1007224E8(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_1007224E8(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

Swift::Int sub_10072275C()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_1007224E8(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1007227C0()
{
  sub_1007224E8(*v0);
  String.hash(into:)();

  return swift_bridgeObjectRelease();
}

Swift::Int sub_100722814()
{
  char v1 = *v0;
  Hasher.init(_seed:)();
  sub_1007224E8(v1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t sub_100722874@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10072BE54(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1007228A4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1007224E8(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1007228D0()
{
  return sub_1007225BC(*v0);
}

unint64_t sub_1007228D8@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10072BE54(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100722900(uint64_t a1)
{
  unint64_t v2 = sub_10072B25C();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10072293C(uint64_t a1)
{
  unint64_t v2 = sub_10072B25C();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t CryptoKeys.encode(to:)(void *a1)
{
  uint64_t v2 = type metadata accessor for Date();
  uint64_t v78 = *(void *)(v2 - 8);
  uint64_t v79 = v2;
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v78 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for CodingUserInfoKey();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)&v78 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_10164CB48);
  uint64_t v81 = *(void *)(v9 - 8);
  uint64_t v82 = v9;
  __chkstk_darwin(v9);
  unint64_t v11 = (char *)&v78 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_10072B25C();
  uint64_t v84 = v11;
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  sub_10001CD44(a1, a1[3]);
  uint64_t v12 = dispatch thunk of Encoder.userInfo.getter();
  if (qword_101637650 != -1) {
    swift_once();
  }
  uint64_t v13 = sub_100010324(v5, (uint64_t)static CodingUserInfoKey.messagingCoder);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v13, v5);
  unint64_t v14 = v83;
  if (*(void *)(v12 + 16) && (unint64_t v15 = sub_1007242F0((uint64_t)v8), (v16 & 1) != 0))
  {
    sub_10012F428(*(void *)(v12 + 56) + 32 * v15, (uint64_t)&v86);
  }
  else
  {
    long long v86 = 0u;
    long long v87 = 0u;
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if (*((void *)&v87 + 1))
  {
    int v17 = swift_dynamicCast();
    uint64_t v18 = v84;
    uint64_t v20 = v79;
    uint64_t v19 = v80;
    uint64_t v21 = v78;
    if (v17) {
      int v22 = v85;
    }
    else {
      int v22 = 0;
    }
  }
  else
  {
    sub_10001DAB4((uint64_t)&v86, (uint64_t *)&unk_101644360);
    int v22 = 0;
    uint64_t v18 = v84;
    uint64_t v20 = v79;
    uint64_t v19 = v80;
    uint64_t v21 = v78;
  }
  sub_10000588C(&qword_1016445E8);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_101347BA0;
  DateInterval.start.getter();
  Date.timeIntervalSinceReferenceDate.getter();
  uint64_t v25 = v24;
  (*(void (**)(char *, uint64_t))(v21 + 8))(v4, v20);
  *(void *)(v23 + 32) = v25;
  DateInterval.duration.getter();
  *(void *)(v23 + 40) = v26;
  *(void *)&long long v86 = v23;
  LOBYTE(v85) = 0;
  sub_10000588C(&qword_1016445F0);
  sub_10042B1C4(&qword_1016445F8);
  uint64_t v27 = v82;
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  if (v19)
  {
    swift_bridgeObjectRelease();
    uint64_t v32 = *(uint64_t (**)(char *, uint64_t))(v81 + 8);
    uint64_t v33 = v18;
    uint64_t v34 = v27;
  }
  else
  {
    swift_bridgeObjectRelease();
    unint64_t v28 = (int *)type metadata accessor for CryptoKeys();
    uint64_t v29 = (uint64_t *)(v14 + v28[5]);
    uint64_t v31 = *v29;
    unint64_t v30 = v29[1];
    if (v30 >> 60 == 15)
    {
      uint64_t v31 = 0;
      unint64_t v30 = 0xF000000000000000;
    }
    *(void *)&long long v86 = v31;
    *((void *)&v86 + 1) = v30;
    LOBYTE(v85) = 1;
    sub_100037BB4();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    long long v86 = *(_OWORD *)(v14 + v28[6]);
    LOBYTE(v85) = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v36 = (void *)(v14 + v28[7]);
    unint64_t v38 = v36[1];
    *(void *)&long long v86 = *v36;
    uint64_t v37 = v86;
    *((void *)&v86 + 1) = v38;
    LOBYTE(v85) = 3;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v80 = v37;
    unint64_t v39 = (uint64_t *)(v14 + v28[9]);
    uint64_t v41 = *v39;
    unint64_t v40 = v39[1];
    *(void *)&long long v86 = *v39;
    *((void *)&v86 + 1) = v40;
    LOBYTE(v85) = 8;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    uint64_t v79 = v41;
    if (v22)
    {
      unint64_t v83 = v40;
      type metadata accessor for __DataStorage();
      swift_allocObject();
      uint64_t v42 = __DataStorage.init(length:)();
      *(void *)&long long v86 = 0x2000000000;
      *((void *)&v86 + 1) = v42;
      sub_10072AF34((int *)&v86, 0);
      *((void *)&v86 + 1) |= 0x4000000000000000uLL;
      LOBYTE(v85) = 4;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      swift_release();
      swift_allocObject();
      uint64_t v61 = __DataStorage.init(length:)();
      *(void *)&long long v86 = 0x2000000000;
      *((void *)&v86 + 1) = v61;
      sub_10072AF34((int *)&v86, 0);
      *((void *)&v86 + 1) |= 0x4000000000000000uLL;
      LOBYTE(v85) = 5;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      swift_release();
      swift_allocObject();
      uint64_t v62 = __DataStorage.init(length:)();
      *(void *)&long long v86 = 0x2000000000;
      *((void *)&v86 + 1) = v62;
      sub_10072AF34((int *)&v86, 0);
      *((void *)&v86 + 1) |= 0x4000000000000000uLL;
      LOBYTE(v85) = 6;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      swift_release();
      swift_allocObject();
      uint64_t v63 = __DataStorage.init(length:)();
      *(void *)&long long v86 = 0x1000000000;
      *((void *)&v86 + 1) = v63;
      sub_10072AF34((int *)&v86, 0);
      *((void *)&v86 + 1) |= 0x4000000000000000uLL;
      LOBYTE(v85) = 7;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      swift_release();
    }
    else
    {
      long long v86 = *(_OWORD *)(v83 + v28[8]);
      LOBYTE(v85) = 4;
      KeyedEncodingContainer.encode<A>(_:forKey:)();
      unint64_t v83 = v40;
    }
    uint64_t v43 = String.utf8Data.getter();
    unint64_t v45 = v44;
    uint64_t v46 = v79;
    unint64_t v47 = v83;
    sub_1000361E0(v79, v83);
    uint64_t v48 = sub_100A941DC(v46, v47, v43, v45, 32);
    unint64_t v50 = v49;
    sub_10001CFB8(v46, v47);
    sub_100434DF4(v48, v50, (uint64_t *)&v86);
    sub_10001CFB8(v43, v45);
    long long v51 = v86;
    LOBYTE(v85) = 9;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    sub_10001CFB8(v51, *((unint64_t *)&v51 + 1));
    uint64_t v52 = String.utf8Data.getter();
    unint64_t v54 = v53;
    uint64_t v55 = v79;
    unint64_t v56 = v83;
    sub_1000361E0(v79, v83);
    uint64_t v57 = sub_100A941DC(v55, v56, v52, v54, 32);
    unint64_t v59 = v58;
    sub_10001CFB8(v55, v56);
    sub_100434DF4(v57, v59, (uint64_t *)&v86);
    sub_10001CFB8(v52, v54);
    long long v60 = v86;
    LOBYTE(v85) = 10;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    sub_10001CFB8(v60, *((unint64_t *)&v60 + 1));
    uint64_t v64 = String.utf8Data.getter();
    unint64_t v66 = v65;
    uint64_t v67 = v79;
    unint64_t v68 = v83;
    sub_1000361E0(v79, v83);
    uint64_t v69 = sub_100A941DC(v67, v68, v64, v66, 32);
    unint64_t v71 = v70;
    sub_10001CFB8(v67, v68);
    sub_100434DF4(v69, v71, (uint64_t *)&v86);
    sub_10001CFB8(v64, v66);
    long long v72 = v86;
    uint64_t v73 = sub_1004378B8(v86, *((unint64_t *)&v86 + 1), v80, v38);
    unint64_t v75 = v74;
    sub_10001CFB8(v72, *((unint64_t *)&v72 + 1));
    *(void *)&long long v86 = v73;
    *((void *)&v86 + 1) = v75;
    LOBYTE(v85) = 11;
    uint64_t v76 = v82;
    unint64_t v77 = v84;
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    sub_10001CFB8(v73, v75);
    uint64_t v32 = *(uint64_t (**)(char *, uint64_t))(v81 + 8);
    uint64_t v33 = v77;
    uint64_t v34 = v76;
  }
  return v32(v33, v34);
}

uint64_t CryptoKeys.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v53 = a2;
  uint64_t v4 = type metadata accessor for Date();
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_10164CB58);
  uint64_t v54 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for CryptoKeys();
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = a1[3];
  uint64_t v55 = a1;
  sub_10001CD44(a1, v13);
  sub_10072B25C();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v55);
  }
  unint64_t v50 = v6;
  long long v51 = v12;
  uint64_t v14 = v54;
  uint64_t v52 = (int *)v10;
  sub_10000588C(&qword_1016445F0);
  char v57 = 0;
  sub_10042B1C4(&qword_101644608);
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v15 = v56;
  char v57 = 1;
  sub_100037AA0();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v49 = v15;
  long long v16 = v56;
  char v57 = 2;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  long long v48 = v16;
  long long v17 = v56;
  char v57 = 3;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  long long v47 = v17;
  long long v18 = v56;
  char v57 = 4;
  KeyedDecodingContainer.decode<A>(_:forKey:)();
  unint64_t v45 = *((void *)&v18 + 1);
  uint64_t v46 = v18;
  long long v19 = v56;
  char v57 = 8;
  uint64_t result = KeyedDecodingContainer.decode<A>(_:forKey:)();
  uint64_t v44 = v19;
  uint64_t v21 = v49;
  if (!*(void *)(v49 + 16))
  {
    __break(1u);
    goto LABEL_11;
  }
  long long v42 = v56;
  uint64_t result = Date.init(timeIntervalSinceReferenceDate:)();
  int v22 = v51;
  if (*(void *)(v21 + 16) < 2uLL)
  {
LABEL_11:
    __break(1u);
    return result;
  }
  unint64_t v43 = *((void *)&v19 + 1);
  swift_bridgeObjectRelease();
  DateInterval.init(start:duration:)();
  unint64_t v23 = *((void *)&v48 + 1);
  uint64_t v24 = v22;
  if (*((void *)&v48 + 1) >> 60 == 15)
  {
    uint64_t v25 = 0;
    unint64_t v26 = 0xF000000000000000;
    uint64_t v27 = v52;
    unsigned long long v30 = v47;
    unint64_t v28 = v30 >> 64;
    uint64_t v29 = v30;
  }
  else
  {
    uint64_t v31 = v48;
    sub_100037A38(v48, *((unint64_t *)&v48 + 1));
    uint64_t v25 = sub_10043A040(v31, v23);
    unsigned long long v32 = v47;
    unint64_t v28 = v32 >> 64;
    uint64_t v29 = v32;
    uint64_t v27 = v52;
  }
  uint64_t v33 = (uint64_t *)&v24[v27[5]];
  *uint64_t v33 = v25;
  v33[1] = v26;
  sub_1000361E0(v29, v28);
  uint64_t v34 = sub_10043A38C(v29, v28);
  uint64_t v35 = (uint64_t *)&v24[v52[6]];
  *uint64_t v35 = v34;
  v35[1] = v36;
  unint64_t v38 = v45;
  uint64_t v37 = v46;
  sub_1000361E0(v46, v45);
  sub_100434E0C(v37, v38, (uint64_t *)&v56);
  *(_OWORD *)&v24[v52[7]] = v56;
  unint64_t v39 = v43;
  sub_1000361E0(v44, v43);
  sub_100434DF4(v44, v39, (uint64_t *)&v56);
  *(_OWORD *)&v24[v52[8]] = v56;
  sub_100434DF4(v42, *((unint64_t *)&v42 + 1), (uint64_t *)&v56);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v9, v7);
  sub_100037A24(v48, *((unint64_t *)&v48 + 1));
  sub_10001CFB8(v47, *((unint64_t *)&v47 + 1));
  sub_10001CFB8(v46, v45);
  sub_10001CFB8(v44, v43);
  uint64_t v40 = (uint64_t)v51;
  *(_OWORD *)&v51[v52[9]] = v56;
  sub_10072BF30(v40, v53, (uint64_t (*)(void))type metadata accessor for CryptoKeys);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v55);
  return sub_10072BF98(v40, (uint64_t (*)(void))type metadata accessor for CryptoKeys);
}

uint64_t sub_100723EC4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return CryptoKeys.init(from:)(a1, a2);
}

uint64_t sub_100723EDC(void *a1)
{
  return CryptoKeys.encode(to:)(a1);
}

unint64_t sub_100723EF4(uint64_t a1)
{
  uint64_t v2 = static Hasher._hash(seed:_:)();
  return sub_100727454(a1, v2);
}

unint64_t sub_100723F30(Swift::UInt32 a1, Swift::UInt a2)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Hasher._combine(_:)(a2);
  Swift::Int v4 = Hasher._finalize()();

  return sub_100725558(a1, a2, v4);
}

unint64_t sub_100723FB0(unsigned __int8 a1)
{
  Swift::Int v2 = sub_10072108C();

  return sub_1007255D8(a1, v2);
}

uint64_t sub_100723FF4(uint64_t a1, uint64_t a2)
{
  return sub_100724D08(a1, a2, (void (*)(unsigned char *, uint64_t, uint64_t))&String.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1007258C8);
}

unint64_t sub_100724020(char a1)
{
  Hasher.init(_seed:)();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v2 = Hasher._finalize()();

  return sub_1007259AC(a1 & 1, v2);
}

unint64_t sub_1007240CC(uint64_t a1)
{
  type metadata accessor for UUID();
  sub_10072BEE8(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return sub_100727890(a1, v2, (uint64_t (*)(void))&type metadata accessor for UUID, (unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID, (uint64_t)&protocol conformance descriptor for UUID);
}

uint64_t sub_1007241A0(uint64_t a1, unint64_t a2)
{
  return sub_100724DB4(a1, a2, (uint64_t (*)(uint64_t, unint64_t, Swift::Int))sub_100725AF0);
}

unint64_t sub_1007241B8(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = AnyHashable._rawHashValue(seed:)(*(void *)(v2 + 40));

  return sub_100726530(a1, v4);
}

unint64_t sub_1007241FC(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  sub_100720198();
  Swift::Int v2 = Hasher._finalize()();

  return sub_1007265F8(a1, v2);
}

unint64_t sub_100724268(char a1)
{
  Hasher.init(_seed:)();
  sub_1012638E4(a1);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v2 = Hasher._finalize()();

  return sub_1007269DC(a1, v2);
}

unint64_t sub_1007242F0(uint64_t a1)
{
  type metadata accessor for CodingUserInfoKey();
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();

  return sub_100726F7C(a1, v2);
}

unint64_t sub_100724354(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_100727340(a1, v4, &qword_10163CB60);
}

unint64_t sub_1007243A4(char a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(qword_101368510[a1]);
  Swift::Int v2 = Hasher._finalize()();

  return sub_100727114(a1, v2);
}

unint64_t sub_10072441C(uint64_t a1)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();

  return sub_1007271C8(a1, v2);
}

unint64_t sub_1007244B0(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_100727340(a1, v4, (unint64_t *)&qword_10163B900);
}

unint64_t sub_100724500(unsigned __int8 a1, uint64_t a2, uint64_t a3)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  swift_bridgeObjectRetain();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v6 = Hasher._finalize()();

  return sub_1007274F0(a1, a2, a3, v6);
}

unint64_t sub_1007245A4(unsigned __int8 a1)
{
  uint64_t v2 = static Hasher._hash(seed:bytes:count:)();
  return sub_1007275C8(a1, v2);
}

unint64_t sub_1007245E4(uint64_t a1)
{
  return sub_100724F00(a1, (void (*)(void))type metadata accessor for BeaconIdentifier, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier, (uint64_t (*)(void))type metadata accessor for BeaconIdentifier);
}

unint64_t sub_100724628(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_100727340(a1, v4, (unint64_t *)&qword_10165F5D0);
}

unint64_t sub_100724678(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1 + 1);
  Swift::Int v2 = Hasher._finalize()();
  return sub_1007275C8(a1, v2);
}

unint64_t sub_1007246E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  v8._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  v9._uint64_t countAndFlagsBits = 44;
  v9._object = (void *)0xE100000000000000;
  String.append(_:)(v9);
  v10._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v11 = Hasher._finalize()();
  return sub_100727668(a1, a2, a3, a4, v11);
}

unint64_t sub_100724804(uint64_t a1)
{
  type metadata accessor for MACAddress();
  sub_10072BEE8((unint64_t *)&unk_10165F130, (void (*)(uint64_t))&type metadata accessor for MACAddress);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();
  return sub_100727890(a1, v2, (uint64_t (*)(void))&type metadata accessor for MACAddress, (unint64_t *)&unk_10166C270, (void (*)(uint64_t))&type metadata accessor for MACAddress, (uint64_t)&protocol conformance descriptor for MACAddress);
}

unint64_t sub_1007248E0(uint64_t a1)
{
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  Hasher.init(_seed:)();
  String.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  return sub_1007271C8(a1, v2);
}

unint64_t sub_100724970(uint64_t a1)
{
  Hasher.init(_seed:)();
  sub_100D1CDD8();
  Swift::Int v2 = Hasher._finalize()();
  return sub_10072A260(a1, v2, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord, (uint64_t (*)(char *, uint64_t))sub_100D20CEC, (uint64_t (*)(void))type metadata accessor for OwnedBeaconRecord);
}

unint64_t sub_100724A28(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_100727340(a1, v4, &qword_10163CBE0);
}

unint64_t sub_100724A78(uint64_t a1)
{
  Hasher.init(_seed:)();
  sub_100E8B2D0((uint64_t)v4, a1);
  Swift::Int v2 = Hasher._finalize()();

  return sub_100727A30(a1, v2);
}

uint64_t sub_100724AE4(uint64_t a1)
{
  return sub_100725038(a1, (void (*)(unsigned char *))sub_100495664, (uint64_t (*)(uint64_t, Swift::Int))sub_100727B04);
}

unint64_t sub_100724B10(Swift::UInt a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v2 = Hasher._finalize()();
  return sub_100727454(a1, v2);
}

unint64_t sub_100724B78(uint64_t a1)
{
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  sub_10072BEE8(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  type metadata accessor for BeaconIdentifier();
  dispatch thunk of Hashable.hash(into:)();
  type metadata accessor for BeaconKeyServiceBuilder.FileKey(0);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v2 = Hasher._finalize()();

  return sub_100728120(a1, v2);
}

uint64_t sub_100724CDC(uint64_t a1, uint64_t a2)
{
  return sub_100724D08(a1, a2, (void (*)(unsigned char *, uint64_t, uint64_t))&Data.hash(into:), (uint64_t (*)(uint64_t, uint64_t, Swift::Int))sub_1007283FC);
}

uint64_t sub_100724D08(uint64_t a1, uint64_t a2, void (*a3)(unsigned char *, uint64_t, uint64_t), uint64_t (*a4)(uint64_t, uint64_t, Swift::Int))
{
  Hasher.init(_seed:)();
  a3(v10, a1, a2);
  Swift::Int v7 = Hasher._finalize()();

  return a4(a1, a2, v7);
}

uint64_t sub_100724D9C(uint64_t a1, unint64_t a2)
{
  return sub_100724DB4(a1, a2, (uint64_t (*)(uint64_t, unint64_t, Swift::Int))sub_100728D98);
}

uint64_t sub_100724DB4(uint64_t a1, unint64_t a2, uint64_t (*a3)(uint64_t, unint64_t, Swift::Int))
{
  Hasher.init(_seed:)();
  sub_1000361E0(a1, a2);
  Data.hash(into:)();
  sub_10001CFB8(a1, a2);
  Swift::Int v5 = Hasher._finalize()();

  return a3(a1, a2, v5);
}

unint64_t sub_100724E50(Swift::UInt64 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v2 = Hasher._finalize()();

  return sub_1007297D8(a1, v2);
}

unint64_t sub_100724EBC(uint64_t a1)
{
  return sub_100724F00(a1, (void (*)(void))type metadata accessor for ManagedCBPeripheralManager.KeyType, (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralManager.KeyType, (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralManager.KeyType, (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralManager.KeyType);
}

unint64_t sub_100724F00(uint64_t a1, void (*a2)(void), uint64_t (*a3)(void), uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  sub_10072BEE8(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  a2(0);
  dispatch thunk of Hashable.hash(into:)();
  Swift::Int v10 = Hasher._finalize()();
  return sub_100729868(a1, v10, a3, a4, a5);
}

uint64_t sub_10072500C(uint64_t a1)
{
  return sub_100725038(a1, (void (*)(unsigned char *))sub_10113C500, (uint64_t (*)(uint64_t, Swift::Int))sub_1007299E0);
}

uint64_t sub_100725038(uint64_t a1, void (*a2)(unsigned char *), uint64_t (*a3)(uint64_t, Swift::Int))
{
  Hasher.init(_seed:)();
  a2(v8);
  Swift::Int v5 = Hasher._finalize()();

  return a3(a1, v5);
}

unint64_t sub_1007250B8(unsigned __int8 a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a1);
  Swift::Int v2 = Hasher._finalize()();

  return sub_1007275C8(a1, v2);
}

unint64_t sub_100725124(uint64_t a1)
{
  Hasher.init(_seed:)();
  type metadata accessor for UUID();
  sub_10072BEE8(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  type metadata accessor for BeaconKeyManager.FileKey(0);
  String.hash(into:)();
  swift_bridgeObjectRelease();
  Swift::Int v2 = Hasher._finalize()();

  return sub_100729FA0(a1, v2);
}

unint64_t sub_10072525C(uint64_t a1)
{
  Hasher.init(_seed:)();
  sub_101112A38();
  Swift::Int v2 = Hasher._finalize()();
  return sub_10072A260(a1, v2, (uint64_t (*)(void))type metadata accessor for StableIdentifier, (uint64_t (*)(void))type metadata accessor for StableIdentifier, (uint64_t (*)(char *, uint64_t))sub_101113BD4, (uint64_t (*)(void))type metadata accessor for StableIdentifier);
}

unint64_t sub_100725314(uint64_t a1)
{
  sub_10000588C(&qword_10163D210);
  sub_10072BEA0((unint64_t *)&qword_10163CB90);
  uint64_t v2 = dispatch thunk of Hashable._rawHashValue(seed:)();

  return sub_10072A3BC(a1, v2);
}

unint64_t sub_10072539C(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_100727340(a1, v4, (unint64_t *)&qword_101655B70);
}

unint64_t sub_1007253EC(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_100727340(a1, v4, (unint64_t *)&unk_10165F040);
}

unint64_t sub_10072543C(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(v2 + 40));
  return sub_100727340(a1, v4, (unint64_t *)&qword_1016608B0);
}

unint64_t sub_10072548C(unsigned __int8 *a1)
{
  Hasher.init(_seed:)();
  Hasher._combine(_:)(*a1);
  type metadata accessor for ShareAttemptTracker.AttemptKey(0);
  type metadata accessor for UUID();
  sub_10072BEE8(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
  dispatch thunk of Hashable.hash(into:)();
  Swift::Int v2 = Hasher._finalize()();

  return sub_10072A56C(a1, v2);
}

unint64_t sub_100725558(int a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t result = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = ~v5;
    do
    {
      uint64_t v8 = *(void *)(v3 + 48) + 16 * result;
      int v9 = *(_DWORD *)v8;
      uint64_t v10 = *(void *)(v8 + 8);
      if (v9 == a1 && v10 == a2) {
        break;
      }
      unint64_t result = (result + 1) & v7;
    }
    while (((*(void *)(v3 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0);
  }
  return result;
}

unint64_t sub_1007255D8(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    uint64_t v6 = a1;
    while (1)
    {
      unint64_t v7 = 0xE700000000000000;
      uint64_t v8 = 0x6E776F6E6B6E75;
      switch(*(unsigned char *)(*(void *)(v2 + 48) + v4))
      {
        case 1:
          unint64_t v7 = 0xE600000000000000;
          uint64_t v8 = 0x646567617473;
          break;
        case 2:
          unint64_t v7 = 0xE600000000000000;
          uint64_t v8 = 0x796669746F6ELL;
          break;
        case 3:
          unint64_t v7 = 0xE600000000000000;
          uint64_t v8 = 0x657461647075;
          break;
        case 4:
          unint64_t v7 = 0xE800000000000000;
          uint64_t v8 = 0x6465676174736E75;
          break;
        case 5:
          unint64_t v7 = 0xE800000000000000;
          uint64_t v8 = 0x7761726468746977;
          break;
        case 6:
          uint64_t v8 = 0x6465726F6E6769;
          break;
        case 7:
          uint64_t v8 = 0x7265766F63736964;
          unint64_t v7 = 0xEA00000000006465;
          break;
        default:
          break;
      }
      unint64_t v9 = 0xE700000000000000;
      uint64_t v10 = 0x6E776F6E6B6E75;
      switch(v6)
      {
        case 1:
          unint64_t v9 = 0xE600000000000000;
          if (v8 == 0x646567617473) {
            goto LABEL_24;
          }
          goto LABEL_25;
        case 2:
          unint64_t v9 = 0xE600000000000000;
          if (v8 != 0x796669746F6ELL) {
            goto LABEL_25;
          }
          goto LABEL_24;
        case 3:
          unint64_t v9 = 0xE600000000000000;
          if (v8 != 0x657461647075) {
            goto LABEL_25;
          }
          goto LABEL_24;
        case 4:
          unint64_t v9 = 0xE800000000000000;
          if (v8 != 0x6465676174736E75) {
            goto LABEL_25;
          }
          goto LABEL_24;
        case 5:
          unint64_t v9 = 0xE800000000000000;
          if (v8 != 0x7761726468746977) {
            goto LABEL_25;
          }
          goto LABEL_24;
        case 6:
          if (v8 != 0x6465726F6E6769) {
            goto LABEL_25;
          }
          goto LABEL_24;
        case 7:
          uint64_t v10 = 0x7265766F63736964;
          unint64_t v9 = 0xEA00000000006465;
          goto LABEL_23;
        default:
LABEL_23:
          if (v8 != v10) {
            goto LABEL_25;
          }
LABEL_24:
          if (v7 == v9)
          {
            swift_bridgeObjectRelease_n();
            return v4;
          }
LABEL_25:
          char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v11) {
            return v4;
          }
          unint64_t v4 = (v4 + 1) & v5;
          if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) == 0) {
            return v4;
          }
          break;
      }
    }
  }
  return v4;
}

unint64_t sub_1007258C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v9 = *(void *)(v3 + 48);
    uint64_t v10 = (void *)(v9 + 16 * v6);
    BOOL v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0)
    {
      uint64_t v12 = ~v5;
      do
      {
        unint64_t v6 = (v6 + 1) & v12;
        if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
          break;
        }
        uint64_t v13 = (void *)(v9 + 16 * v6);
        BOOL v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0);
    }
  }
  return v6;
}

unint64_t sub_1007259AC(char a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    if (a1) {
      unint64_t v6 = 0xD000000000000014;
    }
    else {
      unint64_t v6 = 0x6E776F6E6B6E75;
    }
    if (a1) {
      unint64_t v7 = 0x80000001013F0FA0;
    }
    else {
      unint64_t v7 = 0xE700000000000000;
    }
    while (1)
    {
      unint64_t v8 = *(unsigned char *)(*(void *)(v2 + 48) + v4) ? 0xD000000000000014 : 0x6E776F6E6B6E75;
      unint64_t v9 = *(unsigned char *)(*(void *)(v2 + 48) + v4) ? 0x80000001013F0FA0 : 0xE700000000000000;
      if (v8 == v6 && v9 == v7) {
        break;
      }
      char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v11 & 1) == 0)
      {
        unint64_t v4 = (v4 + 1) & v5;
        if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4)) {
          continue;
        }
      }
      return v4;
    }
    swift_bridgeObjectRelease_n();
  }
  return v4;
}

unint64_t sub_100725AF0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v7 = v3;
    unint64_t v10 = a2 >> 62;
    uint64_t v86 = ~v5;
    unint64_t v78 = HIDWORD(a1);
    size_t v83 = HIDWORD(a1) - (int)a1;
    uint64_t v84 = v3 + 64;
    BOOL v11 = __OFSUB__(HIDWORD(a1), a1);
    BOOL v82 = v11;
    unint64_t v85 = a2 >> 62;
    uint64_t v81 = (int)a1;
    uint64_t v79 = a1 >> 32;
    uint64_t v77 = (a1 >> 32) - (int)a1;
    uint64_t v87 = v10;
    size_t __n = BYTE6(a2);
    while (1)
    {
      uint64_t v12 = (uint64_t *)(*(void *)(v7 + 48) + 16 * v6);
      uint64_t v14 = *v12;
      unint64_t v13 = v12[1];
      uint64_t v15 = 0;
      switch(v13 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v14), v14))
          {
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
          }
          uint64_t v15 = HIDWORD(v14) - (int)v14;
LABEL_14:
          sub_1000361E0(v14, v13);
          break;
        case 2uLL:
          uint64_t v17 = *(void *)(v14 + 16);
          uint64_t v16 = *(void *)(v14 + 24);
          uint64_t v15 = v16 - v17;
          if (!__OFSUB__(v16, v17)) {
            goto LABEL_14;
          }
          goto LABEL_122;
        case 3uLL:
          break;
        default:
          uint64_t v15 = BYTE6(v13);
          break;
      }
      size_t v18 = __n;
      switch(v87)
      {
        case 1:
          size_t v18 = v83;
          if (v82) {
            goto LABEL_123;
          }
          goto LABEL_19;
        case 2:
          uint64_t v20 = *(void *)(a1 + 16);
          uint64_t v19 = *(void *)(a1 + 24);
          BOOL v21 = __OFSUB__(v19, v20);
          size_t v18 = v19 - v20;
          if (!v21) {
            goto LABEL_19;
          }
          goto LABEL_124;
        case 3:
          if (v15) {
            goto LABEL_7;
          }
          goto LABEL_119;
        default:
LABEL_19:
          if (v15 == v18)
          {
            if (v15 < 1)
            {
LABEL_119:
              sub_10001CFB8(v14, v13);
              return v6;
            }
            switch(v13 >> 62)
            {
              case 1uLL:
                if ((int)v14 > v14 >> 32) {
                  goto LABEL_125;
                }
                sub_1000361E0(a1, a2);
                uint64_t v25 = (char *)__DataStorage._bytes.getter();
                if (!v25) {
                  goto LABEL_33;
                }
                uint64_t v26 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v14, v26)) {
                  goto LABEL_127;
                }
                v25 += (int)v14 - v26;
LABEL_33:
                __DataStorage._length.getter();
                LODWORD(v10) = v85;
                if (v85)
                {
                  if (v85 == 1)
                  {
                    if (v79 < v81) {
                      goto LABEL_136;
                    }
                    swift_retain();
                    uint64_t v27 = (char *)__DataStorage._bytes.getter();
                    if (v27)
                    {
                      uint64_t v28 = __DataStorage._offset.getter();
                      if (__OFSUB__(v81, v28)) {
                        goto LABEL_143;
                      }
                      v27 += v81 - v28;
                    }
                    uint64_t v29 = __DataStorage._length.getter();
                    size_t v30 = v77;
                    if (v29 < v77) {
                      size_t v30 = v29;
                    }
                    if (!v25) {
                      goto LABEL_145;
                    }
                    if (!v27) {
                      goto LABEL_146;
                    }
                    int v31 = memcmp(v25, v27, v30);
                    sub_10001CFB8(a1, a2);
                    sub_10001CFB8(a1, a2);
                    sub_10001CFB8(v14, v13);
                    uint64_t v4 = v84;
                    if (!v31) {
                      return v6;
                    }
                  }
                  else
                  {
                    uint64_t v66 = *(void *)(a1 + 16);
                    uint64_t v76 = *(void *)(a1 + 24);
                    swift_retain();
                    swift_retain();
                    uint64_t v67 = __DataStorage._bytes.getter();
                    if (v67)
                    {
                      uint64_t v68 = v67;
                      uint64_t v69 = __DataStorage._offset.getter();
                      if (__OFSUB__(v66, v69)) {
                        goto LABEL_142;
                      }
                      unint64_t v70 = (const void *)(v68 + v66 - v69);
                    }
                    else
                    {
                      unint64_t v70 = 0;
                    }
                    BOOL v21 = __OFSUB__(v76, v66);
                    int64_t v71 = v76 - v66;
                    uint64_t v4 = v84;
                    if (v21) {
                      goto LABEL_137;
                    }
                    uint64_t v72 = __DataStorage._length.getter();
                    if (v72 >= v71) {
                      size_t v73 = v71;
                    }
                    else {
                      size_t v73 = v72;
                    }
                    if (!v25) {
                      goto LABEL_156;
                    }
                    LODWORD(v10) = v85;
                    if (!v70) {
                      goto LABEL_157;
                    }
                    int v59 = memcmp(v25, v70, v73);
                    swift_release();
LABEL_116:
                    swift_release();
                    sub_10001CFB8(a1, a2);
                    sub_10001CFB8(v14, v13);
                    uint64_t v7 = v80;
                    if (!v59) {
                      return v6;
                    }
                  }
                }
                else
                {
                  LOWORD(__s1[0]) = a1;
                  BYTE2(__s1[0]) = BYTE2(a1);
                  BYTE3(__s1[0]) = BYTE3(a1);
                  BYTE4(__s1[0]) = v78;
                  BYTE5(__s1[0]) = BYTE5(a1);
                  BYTE6(__s1[0]) = BYTE6(a1);
                  HIBYTE(__s1[0]) = HIBYTE(a1);
                  LOWORD(__s1[1]) = a2;
                  BYTE2(__s1[1]) = BYTE2(a2);
                  BYTE3(__s1[1]) = BYTE3(a2);
                  BYTE4(__s1[1]) = BYTE4(a2);
                  BYTE5(__s1[1]) = BYTE5(a2);
                  if (!v25) {
                    goto LABEL_155;
                  }
                  int v42 = memcmp(v25, __s1, __n);
                  sub_10001CFB8(a1, a2);
LABEL_103:
                  sub_10001CFB8(v14, v13);
                  if (!v42) {
                    return v6;
                  }
                }
                break;
              case 2uLL:
                uint64_t v32 = *(void *)(v14 + 16);
                sub_1000361E0(a1, a2);
                swift_retain();
                swift_retain();
                uint64_t v33 = __DataStorage._bytes.getter();
                if (v33)
                {
                  uint64_t v34 = v33;
                  uint64_t v35 = __DataStorage._offset.getter();
                  if (__OFSUB__(v32, v35)) {
                    goto LABEL_126;
                  }
                  uint64_t v36 = (const void *)(v34 + v32 - v35);
                }
                else
                {
                  uint64_t v36 = 0;
                }
                __DataStorage._length.getter();
                uint64_t v4 = v84;
                LODWORD(v10) = v85;
                if (!v85)
                {
                  LOWORD(__s1[0]) = a1;
                  BYTE2(__s1[0]) = BYTE2(a1);
                  BYTE3(__s1[0]) = BYTE3(a1);
                  BYTE4(__s1[0]) = v78;
                  BYTE5(__s1[0]) = BYTE5(a1);
                  BYTE6(__s1[0]) = BYTE6(a1);
                  HIBYTE(__s1[0]) = HIBYTE(a1);
                  LOWORD(__s1[1]) = a2;
                  BYTE2(__s1[1]) = BYTE2(a2);
                  BYTE3(__s1[1]) = BYTE3(a2);
                  BYTE4(__s1[1]) = BYTE4(a2);
                  BYTE5(__s1[1]) = BYTE5(a2);
                  if (!v36) {
                    goto LABEL_152;
                  }
                  int v59 = memcmp(v36, __s1, __n);
                  swift_release();
                  goto LABEL_116;
                }
                if (v85 == 1)
                {
                  if (v79 < v81) {
                    goto LABEL_130;
                  }
                  swift_retain();
                  unint64_t v43 = (char *)__DataStorage._bytes.getter();
                  if (v43)
                  {
                    uint64_t v44 = __DataStorage._offset.getter();
                    if (__OFSUB__(v81, v44)) {
                      goto LABEL_141;
                    }
                    v43 += v81 - v44;
                  }
                  uint64_t v45 = __DataStorage._length.getter();
                  size_t v46 = v77;
                  if (v45 < v77) {
                    size_t v46 = v45;
                  }
                  if (!v36) {
                    goto LABEL_148;
                  }
                  if (!v43) {
                    goto LABEL_149;
                  }
                  int v47 = memcmp(v36, v43, v46);
                  sub_10001CFB8(a1, a2);
                  swift_release();
                }
                else
                {
                  uint64_t v60 = *(void *)(a1 + 16);
                  uint64_t v75 = *(void *)(a1 + 24);
                  swift_retain();
                  swift_retain();
                  uint64_t v61 = (char *)__DataStorage._bytes.getter();
                  if (v61)
                  {
                    uint64_t v62 = __DataStorage._offset.getter();
                    if (__OFSUB__(v60, v62)) {
                      goto LABEL_140;
                    }
                    v61 += v60 - v62;
                  }
                  BOOL v21 = __OFSUB__(v75, v60);
                  int64_t v63 = v75 - v60;
                  if (v21) {
                    goto LABEL_135;
                  }
                  uint64_t v64 = __DataStorage._length.getter();
                  if (v64 >= v63) {
                    size_t v65 = v63;
                  }
                  else {
                    size_t v65 = v64;
                  }
                  if (!v36) {
                    goto LABEL_153;
                  }
                  LODWORD(v10) = v85;
                  if (!v61) {
                    goto LABEL_154;
                  }
                  int v47 = memcmp(v36, v61, v65);
                  swift_release();
                  swift_release();
                  swift_release();
                }
                swift_release();
                sub_10001CFB8(a1, a2);
                sub_10001CFB8(v14, v13);
                uint64_t v7 = v80;
                uint64_t v4 = v84;
                if (!v47) {
                  return v6;
                }
                break;
              case 3uLL:
                memset(__s1, 0, 14);
                if (!v10) {
                  goto LABEL_58;
                }
                if (v10 == 1)
                {
                  if (v79 < v81) {
                    goto LABEL_129;
                  }
                  sub_1000361E0(a1, a2);
                  uint64_t v37 = __DataStorage._bytes.getter();
                  if (!v37) {
                    goto LABEL_147;
                  }
                  uint64_t v23 = v37;
                  uint64_t v38 = __DataStorage._offset.getter();
                  unint64_t v10 = v81 - v38;
                  if (__OFSUB__(v81, v38)) {
                    goto LABEL_134;
                  }
LABEL_53:
                  uint64_t v39 = __DataStorage._length.getter();
                  if (v39 >= v77) {
                    size_t v40 = v77;
                  }
                  else {
                    size_t v40 = v39;
                  }
                  int v41 = memcmp(__s1, (const void *)(v23 + v10), v40);
                  sub_10001CFB8(a1, a2);
                  sub_10001CFB8(v14, v13);
                  LODWORD(v10) = v85;
                  if (!v41) {
                    return v6;
                  }
                }
                else
                {
                  uint64_t v54 = *(void *)(a1 + 16);
                  uint64_t v55 = *(void *)(a1 + 24);
                  sub_1000361E0(a1, a2);
                  swift_retain();
                  swift_retain();
                  unint64_t v50 = (char *)__DataStorage._bytes.getter();
                  if (v50)
                  {
                    uint64_t v56 = __DataStorage._offset.getter();
                    if (__OFSUB__(v54, v56)) {
                      goto LABEL_139;
                    }
                    v50 += v54 - v56;
                  }
                  int64_t v52 = v55 - v54;
                  if (__OFSUB__(v55, v54)) {
                    goto LABEL_132;
                  }
                  uint64_t v53 = __DataStorage._length.getter();
                  if (!v50) {
                    goto LABEL_151;
                  }
LABEL_82:
                  if (v53 >= v52) {
                    size_t v57 = v52;
                  }
                  else {
                    size_t v57 = v53;
                  }
                  int v58 = memcmp(__s1, v50, v57);
                  swift_release();
                  swift_release();
                  sub_10001CFB8(a1, a2);
                  sub_10001CFB8(v14, v13);
                  uint64_t v7 = v80;
                  uint64_t v4 = v84;
                  LODWORD(v10) = v85;
                  if (!v58) {
                    return v6;
                  }
                }
                break;
              default:
                __s1[0] = v14;
                LOWORD(__s1[1]) = v13;
                BYTE2(__s1[1]) = BYTE2(v13);
                BYTE3(__s1[1]) = BYTE3(v13);
                BYTE4(__s1[1]) = BYTE4(v13);
                BYTE5(__s1[1]) = BYTE5(v13);
                if (!v10)
                {
LABEL_58:
                  __int16 __s2 = a1;
                  char v90 = BYTE2(a1);
                  char v91 = BYTE3(a1);
                  char v92 = v78;
                  char v93 = BYTE5(a1);
                  char v94 = BYTE6(a1);
                  char v95 = HIBYTE(a1);
                  __int16 v96 = a2;
                  char v97 = BYTE2(a2);
                  char v98 = BYTE3(a2);
                  char v99 = BYTE4(a2);
                  char v100 = BYTE5(a2);
                  int v42 = memcmp(__s1, &__s2, __n);
                  goto LABEL_103;
                }
                if (v10 == 1)
                {
                  if (v79 < v81) {
                    goto LABEL_128;
                  }
                  sub_1000361E0(a1, a2);
                  uint64_t v22 = __DataStorage._bytes.getter();
                  if (!v22)
                  {
                    __DataStorage._length.getter();
                    __break(1u);
LABEL_145:
                    __break(1u);
LABEL_146:
                    __break(1u);
LABEL_147:
                    __DataStorage._length.getter();
                    __break(1u);
LABEL_148:
                    __break(1u);
LABEL_149:
                    __break(1u);
LABEL_150:
                    __break(1u);
LABEL_151:
                    __break(1u);
LABEL_152:
                    __break(1u);
LABEL_153:
                    __break(1u);
LABEL_154:
                    __break(1u);
LABEL_155:
                    __break(1u);
LABEL_156:
                    __break(1u);
LABEL_157:
                    __break(1u);
                    JUMPOUT(0x100726500);
                  }
                  uint64_t v23 = v22;
                  uint64_t v24 = __DataStorage._offset.getter();
                  unint64_t v10 = v81 - v24;
                  if (__OFSUB__(v81, v24)) {
                    goto LABEL_133;
                  }
                  goto LABEL_53;
                }
                uint64_t v48 = *(void *)(a1 + 16);
                uint64_t v49 = *(void *)(a1 + 24);
                sub_1000361E0(a1, a2);
                swift_retain();
                swift_retain();
                unint64_t v50 = (char *)__DataStorage._bytes.getter();
                if (v50)
                {
                  uint64_t v51 = __DataStorage._offset.getter();
                  if (__OFSUB__(v48, v51)) {
                    goto LABEL_138;
                  }
                  v50 += v48 - v51;
                }
                int64_t v52 = v49 - v48;
                if (__OFSUB__(v49, v48)) {
                  goto LABEL_131;
                }
                uint64_t v53 = __DataStorage._length.getter();
                if (!v50) {
                  goto LABEL_150;
                }
                goto LABEL_82;
            }
          }
          else
          {
LABEL_7:
            sub_10001CFB8(v14, v13);
          }
          unint64_t v6 = (v6 + 1) & v86;
          if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
            return v6;
          }
          break;
      }
    }
  }
  return v6;
}

unint64_t sub_100726530(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    do
    {
      sub_100173F4C(*(void *)(v2 + 48) + 40 * v4, (uint64_t)v8);
      char v6 = static AnyHashable.== infix(_:_:)();
      sub_1004268DC((uint64_t)v8);
      if (v6) {
        break;
      }
      unint64_t v4 = (v4 + 1) & v5;
    }
    while (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_1007265F8(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    uint64_t v6 = a1;
    while (1)
    {
      unint64_t v7 = 0xE800000000000000;
      uint64_t v8 = 0x7265776F50776F6CLL;
      switch(*(unsigned char *)(*(void *)(v2 + 48) + v4))
      {
        case 1:
          uint64_t v8 = 0x6F506D756964656DLL;
          unint64_t v7 = 0xEB00000000726577;
          break;
        case 2:
          uint64_t v8 = 0x65776F5068676968;
          unint64_t v7 = 0xE900000000000072;
          break;
        case 3:
          uint64_t v8 = 0x4F7265776F506E6FLL;
          unint64_t v7 = 0xED0000694669576ELL;
          break;
        case 4:
          uint64_t v8 = 0x4F7265776F506E6FLL;
          unint64_t v7 = 0xED00006C6C65436ELL;
          break;
        case 5:
          uint64_t v8 = 0x7265747461426E6FLL;
          unint64_t v7 = 0xEF694669576E4F79;
          break;
        case 6:
          uint64_t v8 = 0x7265747461426E6FLL;
          unint64_t v7 = 0xEF6C6C65436E4F79;
          break;
        case 7:
          uint64_t v8 = 0x6F696E61706D6F63;
          unint64_t v7 = 0xEF79627261654E6ELL;
          break;
        case 8:
          uint64_t v8 = 0x6857796669746F6ELL;
          unint64_t v7 = 0xEF646E756F466E65;
          break;
        default:
          break;
      }
      unint64_t v9 = 0xE800000000000000;
      uint64_t v10 = 0x7265776F50776F6CLL;
      switch(v6)
      {
        case 1:
          unint64_t v9 = 0xEB00000000726577;
          if (v8 == 0x6F506D756964656DLL) {
            goto LABEL_27;
          }
          goto LABEL_28;
        case 2:
          unint64_t v9 = 0xE900000000000072;
          if (v8 != 0x65776F5068676968) {
            goto LABEL_28;
          }
          goto LABEL_27;
        case 3:
          uint64_t v11 = 0x694669576ELL;
          goto LABEL_19;
        case 4:
          uint64_t v11 = 0x6C6C65436ELL;
LABEL_19:
          unint64_t v9 = v11 & 0xFFFFFFFFFFFFLL | 0xED00000000000000;
          if (v8 != 0x4F7265776F506E6FLL) {
            goto LABEL_28;
          }
          goto LABEL_27;
        case 5:
          unint64_t v9 = 0xEF694669576E4F79;
          if (v8 != 0x7265747461426E6FLL) {
            goto LABEL_28;
          }
          goto LABEL_27;
        case 6:
          unint64_t v9 = 0xEF6C6C65436E4F79;
          if (v8 != 0x7265747461426E6FLL) {
            goto LABEL_28;
          }
          goto LABEL_27;
        case 7:
          uint64_t v10 = 0x6F696E61706D6F63;
          unint64_t v9 = 0xEF79627261654E6ELL;
          goto LABEL_26;
        case 8:
          unint64_t v9 = 0xEF646E756F466E65;
          if (v8 != 0x6857796669746F6ELL) {
            goto LABEL_28;
          }
          goto LABEL_27;
        default:
LABEL_26:
          if (v8 != v10) {
            goto LABEL_28;
          }
LABEL_27:
          if (v7 == v9)
          {
            swift_bridgeObjectRelease_n();
            return v4;
          }
LABEL_28:
          char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v12) {
            return v4;
          }
          unint64_t v4 = (v4 + 1) & v5;
          if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) == 0) {
            return v4;
          }
          break;
      }
    }
  }
  return v4;
}

unint64_t sub_1007269DC(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v3 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v4 = a2 & ~v3;
  if ((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4))
  {
    uint64_t v5 = ~v3;
    uint64_t v6 = a1;
    while (1)
    {
      unint64_t v7 = 0xE700000000000000;
      unint64_t v8 = 0x7972616D697270;
      switch(*(unsigned char *)(*(void *)(v2 + 48) + v4))
      {
        case 1:
          unint64_t v7 = 0xE900000000000079;
          unint64_t v8 = 0x7261646E6F636573;
          break;
        case 2:
          unint64_t v8 = 0xD000000000000019;
          unint64_t v7 = 0x80000001013EF280;
          break;
        case 3:
          unint64_t v8 = 0xD00000000000001BLL;
          unint64_t v7 = 0x80000001013EF2A0;
          break;
        case 4:
          unint64_t v8 = 0x646E7542646C6977;
          unint64_t v7 = 0xEA0000000000656CLL;
          break;
        case 5:
          unint64_t v8 = 0x417972616D697270;
          unint64_t v7 = 0xEE00737365726464;
          break;
        case 6:
          unint64_t v7 = 0x80000001013EF2E0;
          goto LABEL_17;
        case 7:
          unint64_t v8 = 0xD000000000000012;
          unint64_t v7 = 0x80000001013EE1F0;
          break;
        case 8:
          unint64_t v8 = 0xD000000000000011;
          unint64_t v7 = 0x80000001013EE210;
          break;
        case 9:
          unint64_t v8 = 0x697463656E6E6F63;
          uint64_t v9 = 0x79654B6E6FLL;
          goto LABEL_21;
        case 0xA:
          unint64_t v8 = 0x656E774F7261656ELL;
          unint64_t v7 = 0xEC00000079654B72;
          break;
        case 0xB:
          unint64_t v8 = 0x656B6F546E696F6ALL;
          unint64_t v7 = 0xE90000000000006ELL;
          break;
        case 0xC:
          unint64_t v8 = 0xD000000000000015;
          unint64_t v7 = 0x80000001013EF310;
          break;
        case 0xD:
          unint64_t v7 = 0x80000001013EF330;
LABEL_17:
          unint64_t v8 = 0xD000000000000010;
          break;
        case 0xE:
          unint64_t v8 = 0x7461636F4C626577;
          unint64_t v7 = 0xEE0079654B6E6F69;
          break;
        case 0xF:
          unint64_t v8 = 0x646174654D626577;
          unint64_t v7 = 0xEB00000000617461;
          break;
        case 0x10:
          unint64_t v8 = 0x6D65744974736F6CLL;
          uint64_t v9 = 0x7365746144;
LABEL_21:
          unint64_t v7 = v9 & 0xFFFFFFFFFFFFLL | 0xED00000000000000;
          break;
        default:
          break;
      }
      unint64_t v10 = 0xE700000000000000;
      switch(v6)
      {
        case 1:
          unint64_t v10 = 0xE900000000000079;
          if (v8 == 0x7261646E6F636573) {
            goto LABEL_53;
          }
          goto LABEL_54;
        case 2:
          unint64_t v11 = 0xD000000000000019;
          char v12 = "elegatedShare";
          goto LABEL_41;
        case 3:
          unint64_t v11 = 0xD00000000000001BLL;
          char v12 = "primaryLocationDecryption";
          goto LABEL_41;
        case 4:
          unint64_t v10 = 0xEA0000000000656CLL;
          if (v8 != 0x646E7542646C6977) {
            goto LABEL_54;
          }
          goto LABEL_53;
        case 5:
          uint64_t v13 = 0x417972616D697270;
          uint64_t v14 = 0x737365726464;
          goto LABEL_47;
        case 6:
          unint64_t v10 = 0x80000001013EF2E0;
          goto LABEL_44;
        case 7:
          unint64_t v11 = 0xD000000000000012;
          char v12 = "ude";
          goto LABEL_41;
        case 8:
          unint64_t v11 = 0xD000000000000011;
          char v12 = "circleSharedSecret";
          goto LABEL_41;
        case 9:
          uint64_t v15 = 0x697463656E6E6F63;
          uint64_t v16 = 0x79654B6E6FLL;
          goto LABEL_52;
        case 10:
          unint64_t v10 = 0xEC00000079654B72;
          if (v8 != 0x656E774F7261656ELL) {
            goto LABEL_54;
          }
          goto LABEL_53;
        case 11:
          unint64_t v10 = 0xE90000000000006ELL;
          if (v8 != 0x656B6F546E696F6ALL) {
            goto LABEL_54;
          }
          goto LABEL_53;
        case 12:
          unint64_t v11 = 0xD000000000000015;
          char v12 = "";
LABEL_41:
          unint64_t v10 = (unint64_t)v12 | 0x8000000000000000;
          if (v8 != v11) {
            goto LABEL_54;
          }
          goto LABEL_53;
        case 13:
          unint64_t v10 = 0x80000001013EF330;
LABEL_44:
          if (v8 != 0xD000000000000010) {
            goto LABEL_54;
          }
          goto LABEL_53;
        case 14:
          uint64_t v13 = 0x7461636F4C626577;
          uint64_t v14 = 0x79654B6E6F69;
LABEL_47:
          unint64_t v10 = v14 & 0xFFFFFFFFFFFFLL | 0xEE00000000000000;
          if (v8 != v13) {
            goto LABEL_54;
          }
          goto LABEL_53;
        case 15:
          unint64_t v10 = 0xEB00000000617461;
          if (v8 != 0x646174654D626577) {
            goto LABEL_54;
          }
          goto LABEL_53;
        case 16:
          uint64_t v15 = 0x6D65744974736F6CLL;
          uint64_t v16 = 0x7365746144;
LABEL_52:
          unint64_t v10 = v16 & 0xFFFFFFFFFFFFLL | 0xED00000000000000;
          if (v8 == v15) {
            goto LABEL_53;
          }
          goto LABEL_54;
        default:
          if (v8 != 0x7972616D697270) {
            goto LABEL_54;
          }
LABEL_53:
          if (v7 == v10)
          {
            swift_bridgeObjectRelease_n();
            return v4;
          }
LABEL_54:
          char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (v17) {
            return v4;
          }
          unint64_t v4 = (v4 + 1) & v5;
          if (((*(void *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v4) & 1) == 0) {
            return v4;
          }
          break;
      }
    }
  }
  return v4;
}

unint64_t sub_100726F7C(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = a1;
  uint64_t v4 = type metadata accessor for CodingUserInfoKey();
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = v2;
  uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v9 = a2 & ~v8;
  uint64_t v20 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v11 = v5 + 16;
    char v12 = v13;
    uint64_t v14 = *(void *)(v11 + 56);
    uint64_t v15 = (void (**)(char *, uint64_t))(v11 - 8);
    do
    {
      uint64_t v16 = v11;
      v12(v7, *(void *)(v22 + 48) + v14 * v9, v4);
      char v17 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*v15)(v7, v4);
      if (v17) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v10;
      uint64_t v11 = v16;
    }
    while (((*(void *)(v20 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  return v9;
}

unint64_t sub_100727114(char a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = qword_101368510[a1];
    uint64_t v8 = *(void *)(v2 + 48);
    if (qword_101368510[*(char *)(v8 + result)] != v7)
    {
      uint64_t v9 = ~v5;
      for (unint64_t result = (result + 1) & v9;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v9)
      {
        if (qword_101368510[*(char *)(v8 + result)] == v7) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_1007271C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v5 = a2 & ~v4;
  if ((*(void *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
  {
    uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v8 = v7;
    if (v6 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v8 == v9)
    {
LABEL_16:
      swift_bridgeObjectRelease_n();
      return v5;
    }
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v11 & 1) == 0)
    {
      uint64_t v12 = ~v4;
      unint64_t v5 = (v5 + 1) & v12;
      if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5))
      {
        while (1)
        {
          uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
          uint64_t v15 = v14;
          if (v13 == static String._unconditionallyBridgeFromObjectiveC(_:)() && v15 == v16) {
            break;
          }
          char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v18 & 1) == 0)
          {
            unint64_t v5 = (v5 + 1) & v12;
            if ((*(void *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v5)) {
              continue;
            }
          }
          return v5;
        }
        goto LABEL_16;
      }
    }
  }
  return v5;
}

unint64_t sub_100727340(uint64_t a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t i = a2 & ~v5;
  if ((*(void *)(v3 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i))
  {
    sub_10001D4B0(0, a3);
    id v7 = *(id *)(*(void *)(v3 + 48) + 8 * i);
    char v8 = static NSObject.== infix(_:_:)();

    if ((v8 & 1) == 0)
    {
      uint64_t v9 = ~v5;
      for (unint64_t i = (i + 1) & v9; ((*(void *)(v4 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v9)
      {
        id v10 = *(id *)(*(void *)(v3 + 48) + 8 * i);
        char v11 = static NSObject.== infix(_:_:)();

        if (v11) {
          break;
        }
      }
    }
  }
  return i;
}

unint64_t sub_100727454(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(void *)(v7 + 8 * result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(void *)(v7 + 8 * result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_1007274F0(unsigned __int8 a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4 + 64;
  uint64_t v6 = -1 << *(unsigned char *)(v4 + 32);
  unint64_t v7 = a4 & ~v6;
  if ((*(void *)(v4 + 64 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7))
  {
    int v10 = a1;
    uint64_t v11 = ~v6;
    uint64_t v12 = *(void *)(v4 + 48);
    do
    {
      uint64_t v13 = (unsigned __int8 *)(v12 + 24 * v7);
      if (*v13 == v10)
      {
        BOOL v14 = *((void *)v13 + 1) == a2 && *((void *)v13 + 2) == a3;
        if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
          break;
        }
      }
      unint64_t v7 = (v7 + 1) & v11;
    }
    while (((*(void *)(v5 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7) & 1) != 0);
  }
  return v7;
}

unint64_t sub_1007275C8(unsigned __int8 a1, uint64_t a2)
{
  uint64_t v4 = v2 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v5;
  if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result))
  {
    uint64_t v7 = *(void *)(v2 + 48);
    if (*(unsigned __int8 *)(v7 + result) != a1)
    {
      uint64_t v8 = ~v5;
      for (unint64_t result = (result + 1) & v8;
            ((*(void *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            unint64_t result = (result + 1) & v8)
      {
        if (*(unsigned __int8 *)(v7 + result) == a1) {
          break;
        }
      }
    }
  }
  return result;
}

unint64_t sub_100727668(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v7 = a5 & ~v6;
  uint64_t v20 = v5 + 64;
  if ((*(void *)(v5 + 64 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7))
  {
    uint64_t v8 = v5;
    uint64_t v19 = ~v6;
    while (1)
    {
      int v10 = (uint64_t *)(*(void *)(v8 + 48) + 32 * v7);
      uint64_t v22 = *v10;
      uint64_t v23 = v10[1];
      swift_bridgeObjectRetain_n();
      v11._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v11);
      swift_bridgeObjectRelease();
      v12._uint64_t countAndFlagsBits = 44;
      v12._object = (void *)0xE100000000000000;
      String.append(_:)(v12);
      v13._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v13);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v14._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v14);
      swift_bridgeObjectRelease();
      v15._uint64_t countAndFlagsBits = 44;
      v15._object = (void *)0xE100000000000000;
      String.append(_:)(v15);
      v16._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v16);
      swift_bridgeObjectRelease();
      if (v22 == a1 && v23 == a2) {
        break;
      }
      char v17 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v17 & 1) == 0)
      {
        unint64_t v7 = (v7 + 1) & v19;
        if ((*(void *)(v20 + ((v7 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v7)) {
          continue;
        }
      }
      return v7;
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
  }
  return v7;
}

unint64_t sub_100727890(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), unint64_t *a4, void (*a5)(uint64_t), uint64_t a6)
{
  uint64_t v24 = a5;
  uint64_t v25 = a6;
  uint64_t v23 = a4;
  v21[1] = a1;
  uint64_t v8 = a3(0);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  Swift::String v11 = (char *)v21 - v10;
  uint64_t v22 = v6;
  uint64_t v12 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v13 = a2 & ~v12;
  v21[0] = v6 + 64;
  if ((*(void *)(v6 + 64 + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13))
  {
    uint64_t v14 = ~v12;
    char v17 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
    uint64_t v16 = v9 + 16;
    Swift::String v15 = v17;
    uint64_t v18 = *(void *)(v16 + 56);
    do
    {
      v15(v11, *(void *)(v22 + 48) + v18 * v13, v8);
      sub_10072BEE8(v23, v24);
      char v19 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v16 - 8))(v11, v8);
      if (v19) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v14;
    }
    while (((*(void *)(v21[0] + ((v13 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v13) & 1) != 0);
  }
  return v13;
}

unint64_t sub_100727A30(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + 64;
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t i = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0
    && (sub_10072AB48(*(void *)(*(void *)(v2 + 48) + 8 * i), a1) & 1) == 0)
  {
    uint64_t v7 = ~v4;
    for (unint64_t i = (i + 1) & v7; ((*(void *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFFF8)) >> i) & 1) != 0; unint64_t i = (i + 1) & v7)
    {
      if (sub_10072AB48(*(void *)(*(void *)(v2 + 48) + 8 * i), a1)) {
        break;
      }
    }
  }
  return i;
}

unint64_t sub_100727B04(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  size_t v46 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  uint64_t v45 = (char *)&v45 - v10;
  uint64_t v60 = sub_10000588C(&qword_101645EE0);
  __chkstk_darwin(v60);
  uint64_t v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for BeaconSharingSessionContext();
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v15 = __chkstk_darwin(v14);
  char v17 = (unsigned __int8 *)&v45 - v16;
  uint64_t v18 = __chkstk_darwin(v15);
  __chkstk_darwin(v18);
  uint64_t v23 = (char *)&v45 - v20;
  uint64_t v24 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v25 = a2 & ~v24;
  uint64_t v59 = v3 + 64;
  if (((*(void *)(v3 + 64 + ((v25 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v25) & 1) == 0) {
    return v25;
  }
  uint64_t v52 = v22;
  uint64_t v53 = v21;
  uint64_t v26 = *(void *)(v19 + 72);
  uint64_t v57 = ~v24;
  uint64_t v58 = v26;
  uint64_t v55 = v13;
  uint64_t v56 = (void (**)(char *, uint64_t))(v7 + 8);
  uint64_t v48 = (void (**)(char *, char *, uint64_t))(v7 + 32);
  uint64_t v49 = v6;
  uint64_t v54 = v17;
  uint64_t v50 = v3;
  uint64_t v51 = (char *)&v45 - v20;
  while (1)
  {
    sub_10072BF30(*(void *)(v3 + 48) + v58 * v25, (uint64_t)v23, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
    uint64_t v27 = &v12[*(int *)(v60 + 48)];
    sub_10072BF30((uint64_t)v23, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
    sub_10072BF30(a1, (uint64_t)v27, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload) {
      break;
    }
    uint64_t v34 = v6;
    uint64_t v35 = v52;
    sub_10072BF30((uint64_t)v12, v52, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
    if (!swift_getEnumCaseMultiPayload())
    {
      int v41 = v45;
      (*v48)(v45, v27, v34);
      int v47 = static UUID.== infix(_:_:)();
      int v42 = *v56;
      (*v56)(v41, v34);
      uint64_t v43 = v35;
      uint64_t v6 = v34;
      v42((char *)v43, v34);
      uint64_t v23 = v51;
      if (v47) {
        goto LABEL_28;
      }
      goto LABEL_25;
    }
    uint64_t v36 = v35;
    uint64_t v6 = v34;
    (*v56)((char *)v36, v34);
    uint64_t v23 = v51;
LABEL_4:
    sub_10001DAB4((uint64_t)v12, &qword_101645EE0);
LABEL_5:
    sub_10072BF98((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
    unint64_t v25 = (v25 + 1) & v57;
    if (((*(void *)(v59 + ((v25 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v25) & 1) == 0) {
      return v25;
    }
  }
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v37 = a1;
    uint64_t v38 = v53;
    sub_10072BF30((uint64_t)v12, v53, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      uint64_t v39 = v46;
      (*v48)(v46, v27, v6);
      char v33 = static UUID.== infix(_:_:)();
      size_t v40 = *v56;
      (*v56)(v39, v6);
      v40((char *)v38, v6);
      a1 = v37;
      uint64_t v3 = v50;
      goto LABEL_19;
    }
    (*v56)((char *)v38, v6);
    a1 = v37;
    uint64_t v3 = v50;
    char v17 = v54;
    goto LABEL_4;
  }
  uint64_t v29 = a1;
  sub_10072BF30((uint64_t)v12, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
  uint64_t v30 = *((void *)v17 + 1);
  uint64_t v31 = *((void *)v17 + 2);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    swift_bridgeObjectRelease();
    a1 = v29;
    uint64_t v6 = v49;
    goto LABEL_4;
  }
  if (*v17 != *v27)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a1 = v29;
    uint64_t v6 = v49;
    char v17 = v54;
    goto LABEL_25;
  }
  if (v30 != *((void *)v27 + 1) || v31 != *((void *)v27 + 2))
  {
    char v33 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a1 = v29;
    uint64_t v6 = v49;
LABEL_19:
    char v17 = v54;
    if (v33) {
      goto LABEL_28;
    }
LABEL_25:
    sub_10072BF98((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
    goto LABEL_5;
  }
  swift_bridgeObjectRelease_n();
LABEL_28:
  sub_10072BF98((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
  sub_10072BF98((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
  return v25;
}

unint64_t sub_100728120(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = type metadata accessor for BeaconKeyServiceBuilder.FileKey(0);
  __chkstk_darwin(v20);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v9 = a2 & ~v8;
  if (((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
    return v9;
  }
  uint64_t v10 = ~v8;
  uint64_t v11 = *(void *)(v5 + 72);
  while (1)
  {
    sub_10072BF30(*(void *)(v2 + 48) + v11 * v9, (uint64_t)v7, type metadata accessor for BeaconKeyServiceBuilder.FileKey);
    if ((static UUID.== infix(_:_:)() & 1) == 0) {
      goto LABEL_4;
    }
    type metadata accessor for BeaconIdentifier();
    if ((static UUID.== infix(_:_:)() & 1) == 0) {
      goto LABEL_4;
    }
    uint64_t v13 = *(int *)(v20 + 20);
    if (v7[v13]) {
      break;
    }
    unint64_t v15 = 0xE700000000000000;
    uint64_t v14 = 0x7972616D697250;
    int v16 = *(unsigned __int8 *)(a1 + v13);
    if (v16) {
      goto LABEL_12;
    }
LABEL_16:
    unint64_t v17 = 0xE700000000000000;
    if (v14 == 0x7972616D697250) {
      goto LABEL_19;
    }
LABEL_3:
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v12) {
      goto LABEL_21;
    }
LABEL_4:
    sub_10072BF98((uint64_t)v7, type metadata accessor for BeaconKeyServiceBuilder.FileKey);
    unint64_t v9 = (v9 + 1) & v10;
    if (((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
      return v9;
    }
  }
  if (v7[v13] == 1)
  {
    uint64_t v14 = 0x7261646E6F636553;
    unint64_t v15 = 0xE900000000000079;
    int v16 = *(unsigned __int8 *)(a1 + v13);
    if (v16) {
      goto LABEL_12;
    }
    goto LABEL_16;
  }
  uint64_t v14 = 0x6F4C657275636553;
  unint64_t v15 = 0xEF736E6F69746163;
  int v16 = *(unsigned __int8 *)(a1 + v13);
  if (!v16) {
    goto LABEL_16;
  }
LABEL_12:
  if (v16 == 1)
  {
    unint64_t v17 = 0xE900000000000079;
    if (v14 == 0x7261646E6F636553) {
      goto LABEL_19;
    }
    goto LABEL_3;
  }
  unint64_t v17 = 0xEF736E6F69746163;
  if (v14 != 0x6F4C657275636553) {
    goto LABEL_3;
  }
LABEL_19:
  if (v15 != v17) {
    goto LABEL_3;
  }
  swift_bridgeObjectRelease_n();
LABEL_21:
  sub_10072BF98((uint64_t)v7, type metadata accessor for BeaconKeyServiceBuilder.FileKey);
  return v9;
}

unint64_t sub_1007283FC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v7 = v3;
    unint64_t v8 = a2;
    uint64_t v10 = ~v5;
    unint64_t v80 = HIDWORD(a1);
    size_t v86 = HIDWORD(a1) - (int)a1;
    uint64_t v87 = ~v5;
    BOOL v11 = __OFSUB__(HIDWORD(a1), a1);
    BOOL v85 = v11;
    unint64_t v88 = a2 >> 62;
    uint64_t v83 = v3 + 64;
    uint64_t v84 = (int)a1;
    uint64_t v81 = a1 >> 32;
    uint64_t v79 = (a1 >> 32) - (int)a1;
    unint64_t v89 = a2 >> 62;
    size_t __n = BYTE6(a2);
    while (1)
    {
      char v12 = (uint64_t *)(*(void *)(v7 + 48) + 16 * v6);
      uint64_t v14 = *v12;
      unint64_t v13 = v12[1];
      uint64_t v15 = 0;
      switch(v13 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v14), v14))
          {
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
          }
          uint64_t v15 = HIDWORD(v14) - (int)v14;
LABEL_14:
          sub_1000361E0(v14, v13);
          break;
        case 2uLL:
          uint64_t v17 = *(void *)(v14 + 16);
          uint64_t v16 = *(void *)(v14 + 24);
          uint64_t v15 = v16 - v17;
          if (!__OFSUB__(v16, v17)) {
            goto LABEL_14;
          }
          goto LABEL_122;
        case 3uLL:
          break;
        default:
          uint64_t v15 = BYTE6(v13);
          break;
      }
      size_t v18 = __n;
      switch(v89)
      {
        case 1uLL:
          size_t v18 = v86;
          if (v85) {
            goto LABEL_123;
          }
          goto LABEL_19;
        case 2uLL:
          uint64_t v20 = *(void *)(a1 + 16);
          uint64_t v19 = *(void *)(a1 + 24);
          BOOL v21 = __OFSUB__(v19, v20);
          size_t v18 = v19 - v20;
          if (!v21) {
            goto LABEL_19;
          }
          goto LABEL_124;
        case 3uLL:
          if (v15) {
            goto LABEL_7;
          }
          goto LABEL_119;
        default:
LABEL_19:
          if (v15 == v18)
          {
            if (v15 < 1)
            {
LABEL_119:
              sub_10001CFB8(v14, v13);
              return v6;
            }
            switch(v13 >> 62)
            {
              case 1uLL:
                if ((int)v14 > v14 >> 32) {
                  goto LABEL_125;
                }
                uint64_t v26 = __DataStorage._bytes.getter();
                if (v26)
                {
                  uint64_t v27 = v26;
                  uint64_t v28 = __DataStorage._offset.getter();
                  if (__OFSUB__((int)v14, v28)) {
                    goto LABEL_127;
                  }
                  uint64_t v29 = (const void *)(v27 + (int)v14 - v28);
                }
                else
                {
                  uint64_t v29 = 0;
                }
                __DataStorage._length.getter();
                if (!v88)
                {
                  LOWORD(__s1[0]) = a1;
                  BYTE2(__s1[0]) = BYTE2(a1);
                  BYTE3(__s1[0]) = BYTE3(a1);
                  BYTE4(__s1[0]) = v80;
                  BYTE5(__s1[0]) = BYTE5(a1);
                  BYTE6(__s1[0]) = BYTE6(a1);
                  HIBYTE(__s1[0]) = HIBYTE(a1);
                  LOWORD(__s1[1]) = v8;
                  BYTE2(__s1[1]) = BYTE2(v8);
                  BYTE3(__s1[1]) = BYTE3(v8);
                  BYTE4(__s1[1]) = BYTE4(v8);
                  BYTE5(__s1[1]) = BYTE5(v8);
                  if (!v29) {
                    goto LABEL_155;
                  }
                  int v46 = memcmp(v29, __s1, __n);
LABEL_102:
                  sub_10001CFB8(v14, v13);
                  uint64_t v10 = v87;
                  if (!v46) {
                    return v6;
                  }
                  break;
                }
                if (v88 == 1)
                {
                  if (v81 < v84) {
                    goto LABEL_136;
                  }
                  swift_retain();
                  uint64_t v47 = __DataStorage._bytes.getter();
                  if (v47)
                  {
                    uint64_t v48 = __DataStorage._offset.getter();
                    if (__OFSUB__(v84, v48)) {
                      goto LABEL_143;
                    }
                    v47 += v84 - v48;
                  }
                  uint64_t v49 = __DataStorage._length.getter();
                  size_t v50 = v79;
                  if (v49 < v79) {
                    size_t v50 = v49;
                  }
                  if (!v29) {
                    goto LABEL_148;
                  }
                  if (!v47) {
                    goto LABEL_149;
                  }
                  size_t v39 = v50;
                  size_t v40 = v29;
                  uint64_t v38 = (const void *)v47;
LABEL_71:
                  int v46 = memcmp(v40, v38, v39);
                  sub_10001CFB8(a1, v8);
                  goto LABEL_102;
                }
                uint64_t v69 = *(void *)(a1 + 16);
                uint64_t v78 = *(void *)(a1 + 24);
                swift_retain();
                swift_retain();
                uint64_t v70 = __DataStorage._bytes.getter();
                if (v70)
                {
                  uint64_t v71 = v70;
                  uint64_t v72 = __DataStorage._offset.getter();
                  if (__OFSUB__(v69, v72)) {
                    goto LABEL_142;
                  }
                  size_t v73 = (const void *)(v71 + v69 - v72);
                }
                else
                {
                  size_t v73 = 0;
                }
                if (__OFSUB__(v78, v69)) {
                  goto LABEL_137;
                }
                uint64_t v74 = __DataStorage._length.getter();
                if (v74 >= v78 - v69) {
                  size_t v75 = v78 - v69;
                }
                else {
                  size_t v75 = v74;
                }
                if (!v29) {
                  goto LABEL_156;
                }
                uint64_t v4 = v83;
                if (!v73) {
                  goto LABEL_157;
                }
                int v62 = memcmp(v29, v73, v75);
LABEL_115:
                swift_release();
LABEL_116:
                swift_release();
                sub_10001CFB8(v14, v13);
                unint64_t v8 = a2;
                uint64_t v10 = v87;
                if (!v62) {
                  return v6;
                }
                break;
              case 2uLL:
                uint64_t v30 = *(void *)(v14 + 16);
                swift_retain();
                swift_retain();
                uint64_t v31 = __DataStorage._bytes.getter();
                if (v31)
                {
                  uint64_t v32 = v31;
                  uint64_t v33 = __DataStorage._offset.getter();
                  if (__OFSUB__(v30, v33)) {
                    goto LABEL_126;
                  }
                  uint64_t v34 = (const void *)(v32 + v30 - v33);
                }
                else
                {
                  uint64_t v34 = 0;
                }
                __DataStorage._length.getter();
                uint64_t v4 = v83;
                if (!v88)
                {
                  LOWORD(__s1[0]) = a1;
                  BYTE2(__s1[0]) = BYTE2(a1);
                  BYTE3(__s1[0]) = BYTE3(a1);
                  BYTE4(__s1[0]) = v80;
                  BYTE5(__s1[0]) = BYTE5(a1);
                  BYTE6(__s1[0]) = BYTE6(a1);
                  HIBYTE(__s1[0]) = HIBYTE(a1);
                  LODWORD(__s1[1]) = a2;
                  WORD2(__s1[1]) = WORD2(a2);
                  if (!v34) {
                    goto LABEL_152;
                  }
                  int v62 = memcmp(v34, __s1, __n);
                  swift_release();
                  goto LABEL_116;
                }
                if (v88 == 1)
                {
                  if (v81 < v84) {
                    goto LABEL_130;
                  }
                  swift_retain();
                  int v42 = (char *)__DataStorage._bytes.getter();
                  if (v42)
                  {
                    uint64_t v43 = __DataStorage._offset.getter();
                    if (__OFSUB__(v84, v43)) {
                      goto LABEL_141;
                    }
                    v42 += v84 - v43;
                  }
                  uint64_t v44 = __DataStorage._length.getter();
                  size_t v45 = v79;
                  if (v44 < v79) {
                    size_t v45 = v44;
                  }
                  if (!v34) {
                    goto LABEL_146;
                  }
                  if (!v42) {
                    goto LABEL_147;
                  }
                  int v46 = memcmp(v34, v42, v45);
                  unint64_t v8 = a2;
                  sub_10001CFB8(a1, a2);
                  swift_release();
                  swift_release();
                  goto LABEL_102;
                }
                uint64_t v63 = *(void *)(a1 + 16);
                uint64_t v77 = *(void *)(a1 + 24);
                swift_retain();
                swift_retain();
                uint64_t v64 = (char *)__DataStorage._bytes.getter();
                if (v64)
                {
                  uint64_t v65 = __DataStorage._offset.getter();
                  if (__OFSUB__(v63, v65)) {
                    goto LABEL_140;
                  }
                  v64 += v63 - v65;
                }
                BOOL v21 = __OFSUB__(v77, v63);
                int64_t v66 = v77 - v63;
                if (v21) {
                  goto LABEL_135;
                }
                uint64_t v67 = __DataStorage._length.getter();
                if (v67 >= v66) {
                  size_t v68 = v66;
                }
                else {
                  size_t v68 = v67;
                }
                if (!v34) {
                  goto LABEL_153;
                }
                uint64_t v4 = v83;
                if (!v64) {
                  goto LABEL_154;
                }
                int v62 = memcmp(v34, v64, v68);
                swift_release();
                swift_release();
                goto LABEL_115;
              case 3uLL:
                memset(__s1, 0, 14);
                if (!v88) {
                  goto LABEL_45;
                }
                if (v88 == 1)
                {
                  if (v81 < v84) {
                    goto LABEL_129;
                  }
                  sub_1000361E0(a1, v8);
                  uint64_t v35 = __DataStorage._bytes.getter();
                  if (!v35) {
                    goto LABEL_145;
                  }
                  uint64_t v23 = v35;
                  uint64_t v36 = __DataStorage._offset.getter();
                  uint64_t v25 = v84 - v36;
                  if (__OFSUB__(v84, v36)) {
                    goto LABEL_134;
                  }
LABEL_41:
                  uint64_t v37 = __DataStorage._length.getter();
                  uint64_t v38 = (const void *)(v23 + v25);
                  if (v37 >= v79) {
                    size_t v39 = v79;
                  }
                  else {
                    size_t v39 = v37;
                  }
                  size_t v40 = __s1;
                  goto LABEL_71;
                }
                uint64_t v57 = *(void *)(a1 + 16);
                uint64_t v58 = *(void *)(a1 + 24);
                swift_retain();
                swift_retain();
                uint64_t v53 = (char *)__DataStorage._bytes.getter();
                if (v53)
                {
                  uint64_t v59 = __DataStorage._offset.getter();
                  if (__OFSUB__(v57, v59)) {
                    goto LABEL_139;
                  }
                  v53 += v57 - v59;
                }
                BOOL v21 = __OFSUB__(v58, v57);
                int64_t v55 = v58 - v57;
                if (v21) {
                  goto LABEL_132;
                }
                uint64_t v56 = __DataStorage._length.getter();
                if (!v53) {
                  goto LABEL_151;
                }
LABEL_83:
                if (v56 >= v55) {
                  size_t v60 = v55;
                }
                else {
                  size_t v60 = v56;
                }
                int v61 = memcmp(__s1, v53, v60);
                swift_release();
                swift_release();
                sub_10001CFB8(v14, v13);
                uint64_t v4 = v83;
                uint64_t v10 = v87;
                if (!v61) {
                  return v6;
                }
                break;
              default:
                __s1[0] = v14;
                LOWORD(__s1[1]) = v13;
                BYTE2(__s1[1]) = BYTE2(v13);
                BYTE3(__s1[1]) = BYTE3(v13);
                BYTE4(__s1[1]) = BYTE4(v13);
                BYTE5(__s1[1]) = BYTE5(v13);
                if (!v88)
                {
LABEL_45:
                  __int16 __s2 = a1;
                  char v92 = BYTE2(a1);
                  char v93 = BYTE3(a1);
                  char v94 = v80;
                  char v95 = BYTE5(a1);
                  char v96 = BYTE6(a1);
                  char v97 = HIBYTE(a1);
                  __int16 v98 = v8;
                  char v99 = BYTE2(v8);
                  char v100 = BYTE3(v8);
                  char v101 = BYTE4(v8);
                  char v102 = BYTE5(v8);
                  int v41 = memcmp(__s1, &__s2, __n);
                  sub_10001CFB8(v14, v13);
                  if (!v41) {
                    return v6;
                  }
                  break;
                }
                if (v88 == 1)
                {
                  if (v81 < v84) {
                    goto LABEL_128;
                  }
                  sub_1000361E0(a1, v8);
                  uint64_t v22 = __DataStorage._bytes.getter();
                  if (!v22)
                  {
                    __DataStorage._length.getter();
                    __break(1u);
LABEL_145:
                    __DataStorage._length.getter();
                    __break(1u);
LABEL_146:
                    __break(1u);
LABEL_147:
                    __break(1u);
LABEL_148:
                    __break(1u);
LABEL_149:
                    __break(1u);
LABEL_150:
                    __break(1u);
LABEL_151:
                    __break(1u);
LABEL_152:
                    __break(1u);
LABEL_153:
                    __break(1u);
LABEL_154:
                    __break(1u);
LABEL_155:
                    __break(1u);
LABEL_156:
                    __break(1u);
LABEL_157:
                    __break(1u);
                    JUMPOUT(0x100728D68);
                  }
                  uint64_t v23 = v22;
                  uint64_t v24 = __DataStorage._offset.getter();
                  uint64_t v25 = v84 - v24;
                  if (__OFSUB__(v84, v24)) {
                    goto LABEL_133;
                  }
                  goto LABEL_41;
                }
                uint64_t v51 = *(void *)(a1 + 16);
                uint64_t v52 = *(void *)(a1 + 24);
                swift_retain();
                swift_retain();
                uint64_t v53 = (char *)__DataStorage._bytes.getter();
                if (v53)
                {
                  uint64_t v54 = __DataStorage._offset.getter();
                  if (__OFSUB__(v51, v54)) {
                    goto LABEL_138;
                  }
                  v53 += v51 - v54;
                }
                BOOL v21 = __OFSUB__(v52, v51);
                int64_t v55 = v52 - v51;
                if (v21) {
                  goto LABEL_131;
                }
                uint64_t v56 = __DataStorage._length.getter();
                if (!v53) {
                  goto LABEL_150;
                }
                goto LABEL_83;
            }
          }
          else
          {
LABEL_7:
            sub_10001CFB8(v14, v13);
          }
          unint64_t v6 = (v6 + 1) & v10;
          if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
            return v6;
          }
          break;
      }
    }
  }
  return v6;
}

unint64_t sub_100728D98(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(v3 + 32);
  unint64_t v6 = a3 & ~v5;
  if ((*(void *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6))
  {
    uint64_t v7 = v3;
    unint64_t v10 = a2 >> 62;
    uint64_t v86 = ~v5;
    unint64_t v78 = HIDWORD(a1);
    size_t v83 = HIDWORD(a1) - (int)a1;
    uint64_t v84 = v3 + 64;
    BOOL v11 = __OFSUB__(HIDWORD(a1), a1);
    BOOL v82 = v11;
    unint64_t v85 = a2 >> 62;
    uint64_t v81 = (int)a1;
    uint64_t v79 = a1 >> 32;
    uint64_t v77 = (a1 >> 32) - (int)a1;
    uint64_t v87 = v10;
    size_t __n = BYTE6(a2);
    while (1)
    {
      char v12 = (uint64_t *)(*(void *)(v7 + 48) + 16 * v6);
      uint64_t v14 = *v12;
      unint64_t v13 = v12[1];
      uint64_t v15 = 0;
      switch(v13 >> 62)
      {
        case 1uLL:
          if (__OFSUB__(HIDWORD(v14), v14))
          {
            __break(1u);
LABEL_122:
            __break(1u);
LABEL_123:
            __break(1u);
LABEL_124:
            __break(1u);
LABEL_125:
            __break(1u);
LABEL_126:
            __break(1u);
LABEL_127:
            __break(1u);
LABEL_128:
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            __break(1u);
LABEL_136:
            __break(1u);
LABEL_137:
            __break(1u);
LABEL_138:
            __break(1u);
LABEL_139:
            __break(1u);
LABEL_140:
            __break(1u);
LABEL_141:
            __break(1u);
LABEL_142:
            __break(1u);
LABEL_143:
            __break(1u);
          }
          uint64_t v15 = HIDWORD(v14) - (int)v14;
LABEL_14:
          sub_1000361E0(v14, v13);
          break;
        case 2uLL:
          uint64_t v17 = *(void *)(v14 + 16);
          uint64_t v16 = *(void *)(v14 + 24);
          uint64_t v15 = v16 - v17;
          if (!__OFSUB__(v16, v17)) {
            goto LABEL_14;
          }
          goto LABEL_122;
        case 3uLL:
          break;
        default:
          uint64_t v15 = BYTE6(v13);
          break;
      }
      size_t v18 = __n;
      switch(v87)
      {
        case 1:
          size_t v18 = v83;
          if (v82) {
            goto LABEL_123;
          }
          goto LABEL_19;
        case 2:
          uint64_t v20 = *(void *)(a1 + 16);
          uint64_t v19 = *(void *)(a1 + 24);
          BOOL v21 = __OFSUB__(v19, v20);
          size_t v18 = v19 - v20;
          if (!v21) {
            goto LABEL_19;
          }
          goto LABEL_124;
        case 3:
          if (v15) {
            goto LABEL_7;
          }
          goto LABEL_119;
        default:
LABEL_19:
          if (v15 == v18)
          {
            if (v15 < 1)
            {
LABEL_119:
              sub_10001CFB8(v14, v13);
              return v6;
            }
            switch(v13 >> 62)
            {
              case 1uLL:
                if ((int)v14 > v14 >> 32) {
                  goto LABEL_125;
                }
                sub_1000361E0(a1, a2);
                uint64_t v25 = (char *)__DataStorage._bytes.getter();
                if (!v25) {
                  goto LABEL_33;
                }
                uint64_t v26 = __DataStorage._offset.getter();
                if (__OFSUB__((int)v14, v26)) {
                  goto LABEL_127;
                }
                v25 += (int)v14 - v26;
LABEL_33:
                __DataStorage._length.getter();
                LODWORD(v10) = v85;
                if (v85)
                {
                  if (v85 == 1)
                  {
                    if (v79 < v81) {
                      goto LABEL_136;
                    }
                    swift_retain();
                    uint64_t v27 = (char *)__DataStorage._bytes.getter();
                    if (v27)
                    {
                      uint64_t v28 = __DataStorage._offset.getter();
                      if (__OFSUB__(v81, v28)) {
                        goto LABEL_143;
                      }
                      v27 += v81 - v28;
                    }
                    uint64_t v29 = __DataStorage._length.getter();
                    size_t v30 = v77;
                    if (v29 < v77) {
                      size_t v30 = v29;
                    }
                    if (!v25) {
                      goto LABEL_145;
                    }
                    if (!v27) {
                      goto LABEL_146;
                    }
                    int v31 = memcmp(v25, v27, v30);
                    sub_10001CFB8(a1, a2);
                    sub_10001CFB8(a1, a2);
                    sub_10001CFB8(v14, v13);
                    uint64_t v4 = v84;
                    if (!v31) {
                      return v6;
                    }
                  }
                  else
                  {
                    uint64_t v66 = *(void *)(a1 + 16);
                    uint64_t v76 = *(void *)(a1 + 24);
                    swift_retain();
                    swift_retain();
                    uint64_t v67 = __DataStorage._bytes.getter();
                    if (v67)
                    {
                      uint64_t v68 = v67;
                      uint64_t v69 = __DataStorage._offset.getter();
                      if (__OFSUB__(v66, v69)) {
                        goto LABEL_142;
                      }
                      uint64_t v70 = (const void *)(v68 + v66 - v69);
                    }
                    else
                    {
                      uint64_t v70 = 0;
                    }
                    BOOL v21 = __OFSUB__(v76, v66);
                    int64_t v71 = v76 - v66;
                    uint64_t v4 = v84;
                    if (v21) {
                      goto LABEL_137;
                    }
                    uint64_t v72 = __DataStorage._length.getter();
                    if (v72 >= v71) {
                      size_t v73 = v71;
                    }
                    else {
                      size_t v73 = v72;
                    }
                    if (!v25) {
                      goto LABEL_156;
                    }
                    LODWORD(v10) = v85;
                    if (!v70) {
                      goto LABEL_157;
                    }
                    int v59 = memcmp(v25, v70, v73);
                    swift_release();
LABEL_116:
                    swift_release();
                    sub_10001CFB8(a1, a2);
                    sub_10001CFB8(v14, v13);
                    uint64_t v7 = v80;
                    if (!v59) {
                      return v6;
                    }
                  }
                }
                else
                {
                  LOWORD(__s1[0]) = a1;
                  BYTE2(__s1[0]) = BYTE2(a1);
                  BYTE3(__s1[0]) = BYTE3(a1);
                  BYTE4(__s1[0]) = v78;
                  BYTE5(__s1[0]) = BYTE5(a1);
                  BYTE6(__s1[0]) = BYTE6(a1);
                  HIBYTE(__s1[0]) = HIBYTE(a1);
                  LOWORD(__s1[1]) = a2;
                  BYTE2(__s1[1]) = BYTE2(a2);
                  BYTE3(__s1[1]) = BYTE3(a2);
                  BYTE4(__s1[1]) = BYTE4(a2);
                  BYTE5(__s1[1]) = BYTE5(a2);
                  if (!v25) {
                    goto LABEL_155;
                  }
                  int v42 = memcmp(v25, __s1, __n);
                  sub_10001CFB8(a1, a2);
LABEL_103:
                  sub_10001CFB8(v14, v13);
                  if (!v42) {
                    return v6;
                  }
                }
                break;
              case 2uLL:
                uint64_t v32 = *(void *)(v14 + 16);
                sub_1000361E0(a1, a2);
                swift_retain();
                swift_retain();
                uint64_t v33 = __DataStorage._bytes.getter();
                if (v33)
                {
                  uint64_t v34 = v33;
                  uint64_t v35 = __DataStorage._offset.getter();
                  if (__OFSUB__(v32, v35)) {
                    goto LABEL_126;
                  }
                  uint64_t v36 = (const void *)(v34 + v32 - v35);
                }
                else
                {
                  uint64_t v36 = 0;
                }
                __DataStorage._length.getter();
                uint64_t v4 = v84;
                LODWORD(v10) = v85;
                if (!v85)
                {
                  LOWORD(__s1[0]) = a1;
                  BYTE2(__s1[0]) = BYTE2(a1);
                  BYTE3(__s1[0]) = BYTE3(a1);
                  BYTE4(__s1[0]) = v78;
                  BYTE5(__s1[0]) = BYTE5(a1);
                  BYTE6(__s1[0]) = BYTE6(a1);
                  HIBYTE(__s1[0]) = HIBYTE(a1);
                  LOWORD(__s1[1]) = a2;
                  BYTE2(__s1[1]) = BYTE2(a2);
                  BYTE3(__s1[1]) = BYTE3(a2);
                  BYTE4(__s1[1]) = BYTE4(a2);
                  BYTE5(__s1[1]) = BYTE5(a2);
                  if (!v36) {
                    goto LABEL_152;
                  }
                  int v59 = memcmp(v36, __s1, __n);
                  swift_release();
                  goto LABEL_116;
                }
                if (v85 == 1)
                {
                  if (v79 < v81) {
                    goto LABEL_130;
                  }
                  swift_retain();
                  uint64_t v43 = (char *)__DataStorage._bytes.getter();
                  if (v43)
                  {
                    uint64_t v44 = __DataStorage._offset.getter();
                    if (__OFSUB__(v81, v44)) {
                      goto LABEL_141;
                    }
                    v43 += v81 - v44;
                  }
                  uint64_t v45 = __DataStorage._length.getter();
                  size_t v46 = v77;
                  if (v45 < v77) {
                    size_t v46 = v45;
                  }
                  if (!v36) {
                    goto LABEL_148;
                  }
                  if (!v43) {
                    goto LABEL_149;
                  }
                  int v47 = memcmp(v36, v43, v46);
                  sub_10001CFB8(a1, a2);
                  swift_release();
                }
                else
                {
                  uint64_t v60 = *(void *)(a1 + 16);
                  uint64_t v75 = *(void *)(a1 + 24);
                  swift_retain();
                  swift_retain();
                  int v61 = (char *)__DataStorage._bytes.getter();
                  if (v61)
                  {
                    uint64_t v62 = __DataStorage._offset.getter();
                    if (__OFSUB__(v60, v62)) {
                      goto LABEL_140;
                    }
                    v61 += v60 - v62;
                  }
                  BOOL v21 = __OFSUB__(v75, v60);
                  int64_t v63 = v75 - v60;
                  if (v21) {
                    goto LABEL_135;
                  }
                  uint64_t v64 = __DataStorage._length.getter();
                  if (v64 >= v63) {
                    size_t v65 = v63;
                  }
                  else {
                    size_t v65 = v64;
                  }
                  if (!v36) {
                    goto LABEL_153;
                  }
                  LODWORD(v10) = v85;
                  if (!v61) {
                    goto LABEL_154;
                  }
                  int v47 = memcmp(v36, v61, v65);
                  swift_release();
                  swift_release();
                  swift_release();
                }
                swift_release();
                sub_10001CFB8(a1, a2);
                sub_10001CFB8(v14, v13);
                uint64_t v7 = v80;
                uint64_t v4 = v84;
                if (!v47) {
                  return v6;
                }
                break;
              case 3uLL:
                memset(__s1, 0, 14);
                if (!v10) {
                  goto LABEL_58;
                }
                if (v10 == 1)
                {
                  if (v79 < v81) {
                    goto LABEL_129;
                  }
                  sub_1000361E0(a1, a2);
                  uint64_t v37 = __DataStorage._bytes.getter();
                  if (!v37) {
                    goto LABEL_147;
                  }
                  uint64_t v23 = v37;
                  uint64_t v38 = __DataStorage._offset.getter();
                  unint64_t v10 = v81 - v38;
                  if (__OFSUB__(v81, v38)) {
                    goto LABEL_134;
                  }
LABEL_53:
                  uint64_t v39 = __DataStorage._length.getter();
                  if (v39 >= v77) {
                    size_t v40 = v77;
                  }
                  else {
                    size_t v40 = v39;
                  }
                  int v41 = memcmp(__s1, (const void *)(v23 + v10), v40);
                  sub_10001CFB8(a1, a2);
                  sub_10001CFB8(v14, v13);
                  LODWORD(v10) = v85;
                  if (!v41) {
                    return v6;
                  }
                }
                else
                {
                  uint64_t v54 = *(void *)(a1 + 16);
                  uint64_t v55 = *(void *)(a1 + 24);
                  sub_1000361E0(a1, a2);
                  swift_retain();
                  swift_retain();
                  size_t v50 = (char *)__DataStorage._bytes.getter();
                  if (v50)
                  {
                    uint64_t v56 = __DataStorage._offset.getter();
                    if (__OFSUB__(v54, v56)) {
                      goto LABEL_139;
                    }
                    v50 += v54 - v56;
                  }
                  int64_t v52 = v55 - v54;
                  if (__OFSUB__(v55, v54)) {
                    goto LABEL_132;
                  }
                  uint64_t v53 = __DataStorage._length.getter();
                  if (!v50) {
                    goto LABEL_151;
                  }
LABEL_82:
                  if (v53 >= v52) {
                    size_t v57 = v52;
                  }
                  else {
                    size_t v57 = v53;
                  }
                  int v58 = memcmp(__s1, v50, v57);
                  swift_release();
                  swift_release();
                  sub_10001CFB8(a1, a2);
                  sub_10001CFB8(v14, v13);
                  uint64_t v7 = v80;
                  uint64_t v4 = v84;
                  LODWORD(v10) = v85;
                  if (!v58) {
                    return v6;
                  }
                }
                break;
              default:
                __s1[0] = v14;
                LOWORD(__s1[1]) = v13;
                BYTE2(__s1[1]) = BYTE2(v13);
                BYTE3(__s1[1]) = BYTE3(v13);
                BYTE4(__s1[1]) = BYTE4(v13);
                BYTE5(__s1[1]) = BYTE5(v13);
                if (!v10)
                {
LABEL_58:
                  __int16 __s2 = a1;
                  char v90 = BYTE2(a1);
                  char v91 = BYTE3(a1);
                  char v92 = v78;
                  char v93 = BYTE5(a1);
                  char v94 = BYTE6(a1);
                  char v95 = HIBYTE(a1);
                  __int16 v96 = a2;
                  char v97 = BYTE2(a2);
                  char v98 = BYTE3(a2);
                  char v99 = BYTE4(a2);
                  char v100 = BYTE5(a2);
                  int v42 = memcmp(__s1, &__s2, __n);
                  goto LABEL_103;
                }
                if (v10 == 1)
                {
                  if (v79 < v81) {
                    goto LABEL_128;
                  }
                  sub_1000361E0(a1, a2);
                  uint64_t v22 = __DataStorage._bytes.getter();
                  if (!v22)
                  {
                    __DataStorage._length.getter();
                    __break(1u);
LABEL_145:
                    __break(1u);
LABEL_146:
                    __break(1u);
LABEL_147:
                    __DataStorage._length.getter();
                    __break(1u);
LABEL_148:
                    __break(1u);
LABEL_149:
                    __break(1u);
LABEL_150:
                    __break(1u);
LABEL_151:
                    __break(1u);
LABEL_152:
                    __break(1u);
LABEL_153:
                    __break(1u);
LABEL_154:
                    __break(1u);
LABEL_155:
                    __break(1u);
LABEL_156:
                    __break(1u);
LABEL_157:
                    __break(1u);
                    JUMPOUT(0x1007297A8);
                  }
                  uint64_t v23 = v22;
                  uint64_t v24 = __DataStorage._offset.getter();
                  unint64_t v10 = v81 - v24;
                  if (__OFSUB__(v81, v24)) {
                    goto LABEL_133;
                  }
                  goto LABEL_53;
                }
                uint64_t v48 = *(void *)(a1 + 16);
                uint64_t v49 = *(void *)(a1 + 24);
                sub_1000361E0(a1, a2);
                swift_retain();
                swift_retain();
                size_t v50 = (char *)__DataStorage._bytes.getter();
                if (v50)
                {
                  uint64_t v51 = __DataStorage._offset.getter();
                  if (__OFSUB__(v48, v51)) {
                    goto LABEL_138;
                  }
                  v50 += v48 - v51;
                }
                int64_t v52 = v49 - v48;
                if (__OFSUB__(v49, v48)) {
                  goto LABEL_131;
                }
                uint64_t v53 = __DataStorage._length.getter();
                if (!v50) {
                  goto LABEL_150;
                }
                goto LABEL_82;
            }
          }
          else
          {
LABEL_7:
            sub_10001CFB8(v14, v13);
          }
          unint64_t v6 = (v6 + 1) & v86;
          if (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v6) & 1) == 0) {
            return v6;
          }
          break;
      }
    }
  }
  return v6;
}

unint64_t sub_1007297D8(unint64_t a1, uint64_t a2)
{
  uint64_t v4 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t result = a2 & ~v4;
  if (((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result) & 1) == 0) {
    return result;
  }
  uint64_t v6 = ~v4;
  while (1)
  {
    unint64_t v7 = *(void *)(*(void *)(v2 + 48) + 8 * result);
    if (v7 > a1) {
      break;
    }
    unint64_t v8 = a1 - v7;
    if ((uint64_t)(a1 - v7) < 0) {
      goto LABEL_12;
    }
LABEL_7:
    if (v8)
    {
      unint64_t result = (result + 1) & v6;
      if ((*(void *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFFF8)) >> result)) {
        continue;
      }
    }
    return result;
  }
  if ((uint64_t)(v7 - a1) >= 0)
  {
    unint64_t v8 = a1 - v7;
    goto LABEL_7;
  }
  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_100729868(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(void), uint64_t (*a5)(void))
{
  uint64_t v9 = a3(0);
  __chkstk_darwin(v9);
  char v12 = (char *)&v18 - v11;
  uint64_t v13 = -1 << *(unsigned char *)(v5 + 32);
  unint64_t v14 = a2 & ~v13;
  if ((*(void *)(v5 + 64 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14))
  {
    uint64_t v15 = ~v13;
    uint64_t v16 = *(void *)(v10 + 72);
    while (1)
    {
      sub_10072BF30(*(void *)(v5 + 48) + v16 * v14, (uint64_t)v12, a4);
      if (static UUID.== infix(_:_:)() & 1) != 0 && (static UUID.== infix(_:_:)()) {
        break;
      }
      sub_10072BF98((uint64_t)v12, a5);
      unint64_t v14 = (v14 + 1) & v15;
      if (((*(void *)(v5 + 64 + ((v14 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v14) & 1) == 0) {
        return v14;
      }
    }
    sub_10072BF98((uint64_t)v12, a5);
  }
  return v14;
}

unint64_t sub_1007299E0(uint64_t a1, uint64_t a2)
{
  uint64_t v53 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  uint64_t v43 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = sub_10000588C((uint64_t *)&unk_10166EAF0);
  __chkstk_darwin(v52);
  unint64_t v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_101638CF0);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  char v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  unint64_t v14 = (char *)&v42 - v13;
  uint64_t v15 = (int *)type metadata accessor for ManagedCBPeripheralBeaconInfo();
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v20 = a2 & ~v19;
  uint64_t v54 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20))
  {
    int v47 = v12;
    uint64_t v48 = v8;
    uint64_t v55 = ~v19;
    uint64_t v50 = v2;
    uint64_t v51 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
    uint64_t v21 = *(void *)(v16 + 72);
    int v42 = (void (**)(char *, uint64_t, uint64_t))(v5 + 32);
    uint64_t v45 = (void (**)(uint64_t, uint64_t))(v5 + 8);
    size_t v46 = v15;
    uint64_t v22 = v54;
    uint64_t v49 = v21;
    do
    {
      sub_10072BF30(*(void *)(v2 + 48) + v21 * v20, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralBeaconInfo);
      if ((static UUID.== infix(_:_:)() & 1) == 0 || (static UUID.== infix(_:_:)() & 1) == 0) {
        goto LABEL_5;
      }
      uint64_t v23 = v15[6];
      uint64_t v24 = (uint64_t)v8;
      uint64_t v25 = (uint64_t)&v18[v23];
      sub_1003C5E38(a1 + v23, (uint64_t)v14);
      uint64_t v26 = v24 + *(int *)(v52 + 48);
      sub_1003C5E38(v25, v24);
      sub_1003C5E38((uint64_t)v14, v26);
      uint64_t v27 = *v51;
      uint64_t v28 = v53;
      if ((*v51)(v24, 1, v53) == 1)
      {
        sub_10001DAB4((uint64_t)v14, &qword_101638CF0);
        unsigned int v29 = v27(v26, 1, v28);
        uint64_t v21 = v49;
        uint64_t v2 = v50;
        if (v29 != 1) {
          goto LABEL_4;
        }
        unint64_t v8 = v48;
        sub_10001DAB4((uint64_t)v48, &qword_101638CF0);
        uint64_t v22 = v54;
      }
      else
      {
        uint64_t v30 = (uint64_t)v47;
        sub_1003C5E38(v24, (uint64_t)v47);
        if (v27(v26, 1, v28) == 1)
        {
          sub_10001DAB4((uint64_t)v14, &qword_101638CF0);
          (*v45)(v30, v28);
          uint64_t v21 = v49;
          uint64_t v2 = v50;
          uint64_t v15 = v46;
LABEL_4:
          unint64_t v8 = v48;
          sub_10001DAB4((uint64_t)v48, (uint64_t *)&unk_10166EAF0);
          uint64_t v22 = v54;
          goto LABEL_5;
        }
        int v31 = v43;
        (*v42)(v43, v26, v28);
        sub_10072BEE8((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
        int v44 = dispatch thunk of static Equatable.== infix(_:_:)();
        uint64_t v32 = *v45;
        (*v45)((uint64_t)v31, v28);
        sub_10001DAB4((uint64_t)v14, &qword_101638CF0);
        v32(v30, v28);
        sub_10001DAB4(v24, &qword_101638CF0);
        uint64_t v21 = v49;
        uint64_t v2 = v50;
        unint64_t v8 = (char *)v24;
        uint64_t v15 = v46;
        uint64_t v22 = v54;
        if ((v44 & 1) == 0) {
          goto LABEL_5;
        }
      }
      if (static Date.== infix(_:_:)())
      {
        if ((uint64_t v33 = v15[8],
              uint64_t v34 = *(void *)&v18[v33],
              uint64_t v35 = *(void *)&v18[v33 + 8],
              uint64_t v36 = (void *)(a1 + v33),
              v34 == *v36)
          && v35 == v36[1]
          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
        {
          if (*(_DWORD *)&v18[v15[9]] == *(_DWORD *)(a1 + v15[9]))
          {
            if ((uint64_t v37 = v15[10],
                  uint64_t v38 = *(void *)&v18[v37],
                  uint64_t v39 = *(void *)&v18[v37 + 8],
                  size_t v40 = (void *)(a1 + v37),
                  v38 == *v40)
              && v39 == v40[1]
              || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
            {
              if (v18[v15[11]] == *(unsigned char *)(a1 + v15[11]) && v18[v15[12]] == *(unsigned char *)(a1 + v15[12]))
              {
                sub_10072BF98((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralBeaconInfo);
                return v20;
              }
            }
          }
        }
      }
LABEL_5:
      sub_10072BF98((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for ManagedCBPeripheralBeaconInfo);
      unint64_t v20 = (v20 + 1) & v55;
    }
    while (((*(void *)(v22 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20) & 1) != 0);
  }
  return v20;
}

unint64_t sub_100729FA0(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = type metadata accessor for BeaconKeyManager.FileKey(0);
  __chkstk_darwin(v20);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v9 = a2 & ~v8;
  if (((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
    return v9;
  }
  uint64_t v10 = ~v8;
  uint64_t v11 = *(void *)(v5 + 72);
  while (1)
  {
    sub_10072BF30(*(void *)(v2 + 48) + v11 * v9, (uint64_t)v7, type metadata accessor for BeaconKeyManager.FileKey);
    if ((static UUID.== infix(_:_:)() & 1) == 0) {
      goto LABEL_4;
    }
    uint64_t v13 = *(int *)(v20 + 20);
    if (v7[v13]) {
      break;
    }
    unint64_t v15 = 0xE700000000000000;
    uint64_t v14 = 0x7972616D697250;
    int v16 = *(unsigned __int8 *)(a1 + v13);
    if (v16) {
      goto LABEL_11;
    }
LABEL_15:
    unint64_t v17 = 0xE700000000000000;
    if (v14 == 0x7972616D697250) {
      goto LABEL_18;
    }
LABEL_3:
    char v12 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v12) {
      goto LABEL_20;
    }
LABEL_4:
    sub_10072BF98((uint64_t)v7, type metadata accessor for BeaconKeyManager.FileKey);
    unint64_t v9 = (v9 + 1) & v10;
    if (((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) == 0) {
      return v9;
    }
  }
  if (v7[v13] == 1)
  {
    uint64_t v14 = 0x7261646E6F636553;
    unint64_t v15 = 0xE900000000000079;
    int v16 = *(unsigned __int8 *)(a1 + v13);
    if (v16) {
      goto LABEL_11;
    }
    goto LABEL_15;
  }
  uint64_t v14 = 0x6F4C657275636553;
  unint64_t v15 = 0xEF736E6F69746163;
  int v16 = *(unsigned __int8 *)(a1 + v13);
  if (!v16) {
    goto LABEL_15;
  }
LABEL_11:
  if (v16 == 1)
  {
    unint64_t v17 = 0xE900000000000079;
    if (v14 == 0x7261646E6F636553) {
      goto LABEL_18;
    }
    goto LABEL_3;
  }
  unint64_t v17 = 0xEF736E6F69746163;
  if (v14 != 0x6F4C657275636553) {
    goto LABEL_3;
  }
LABEL_18:
  if (v15 != v17) {
    goto LABEL_3;
  }
  swift_bridgeObjectRelease_n();
LABEL_20:
  sub_10072BF98((uint64_t)v7, type metadata accessor for BeaconKeyManager.FileKey);
  return v9;
}

unint64_t sub_10072A260(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(void), uint64_t (*a5)(char *, uint64_t), uint64_t (*a6)(void))
{
  uint64_t v22 = a6;
  uint64_t v11 = a3(0) - 8;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v21 - v13;
  uint64_t v15 = -1 << *(unsigned char *)(v6 + 32);
  unint64_t v16 = a2 & ~v15;
  if ((*(void *)(v6 + 64 + ((v16 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v16))
  {
    uint64_t v17 = ~v15;
    uint64_t v18 = *(void *)(v12 + 72);
    do
    {
      sub_10072BF30(*(void *)(v6 + 48) + v18 * v16, (uint64_t)v14, a4);
      char v19 = a5(v14, a1);
      sub_10072BF98((uint64_t)v14, v22);
      if (v19) {
        break;
      }
      unint64_t v16 = (v16 + 1) & v17;
    }
    while (((*(void *)(v6 + 64 + ((v16 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v16) & 1) != 0);
  }
  return v16;
}

unint64_t sub_10072A3BC(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = a1;
  uint64_t v4 = sub_10000588C(&qword_10163D210);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = v2;
  uint64_t v8 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v9 = a2 & ~v8;
  uint64_t v18 = v2 + 64;
  if ((*(void *)(v2 + 64 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9))
  {
    uint64_t v10 = ~v8;
    uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    uint64_t v12 = v5 + 16;
    uint64_t v11 = v13;
    uint64_t v14 = *(void *)(v12 + 56);
    do
    {
      v11(v7, *(void *)(v20 + 48) + v14 * v9, v4);
      sub_10072BEA0(&qword_10164CC20);
      char v15 = dispatch thunk of static Equatable.== infix(_:_:)();
      (*(void (**)(char *, uint64_t))(v12 - 8))(v7, v4);
      if (v15) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v10;
    }
    while (((*(void *)(v18 + ((v9 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v9) & 1) != 0);
  }
  return v9;
}

unint64_t sub_10072A56C(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for ShareAttemptTracker.AttemptKey(0);
  __chkstk_darwin(v5);
  uint64_t v8 = (unsigned __int8 *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = -1 << *(unsigned char *)(v2 + 32);
  unint64_t v10 = a2 & ~v9;
  if ((*(void *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = ~v9;
    uint64_t v12 = *(void *)(v6 + 72);
    while (1)
    {
      sub_10072BF30(*(void *)(v2 + 48) + v12 * v10, (uint64_t)v8, type metadata accessor for ShareAttemptTracker.AttemptKey);
      if (*v8 == *a1 && (static UUID.== infix(_:_:)() & 1) != 0) {
        break;
      }
      sub_10072BF98((uint64_t)v8, type metadata accessor for ShareAttemptTracker.AttemptKey);
      unint64_t v10 = (v10 + 1) & v11;
      if (((*(void *)(v2 + 64 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        return v10;
      }
    }
    sub_10072BF98((uint64_t)v8, type metadata accessor for ShareAttemptTracker.AttemptKey);
  }
  return v10;
}

uint64_t sub_10072A704(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v45 = (char *)&v34 - v10;
  uint64_t result = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v34 - v12;
  if (a1 == a2) {
    return 1;
  }
  if (*(void *)(a1 + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v14 = 0;
  uint64_t v15 = *(void *)(a1 + 56);
  uint64_t v36 = a1;
  uint64_t v37 = a1 + 56;
  uint64_t v16 = 1 << *(unsigned char *)(a1 + 32);
  if (v16 < 64) {
    uint64_t v17 = ~(-1 << v16);
  }
  else {
    uint64_t v17 = -1;
  }
  unint64_t v18 = v17 & v15;
  int64_t v38 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v42 = v5 + 32;
  uint64_t v43 = a2 + 56;
  uint64_t v44 = v5 + 16;
  uint64_t v19 = (void (**)(char *, uint64_t))(v5 + 8);
  uint64_t v34 = v13;
  uint64_t v35 = v5;
  if (!v18) {
    goto LABEL_9;
  }
LABEL_7:
  uint64_t v40 = (v18 - 1) & v18;
  int64_t v41 = v14;
  for (unint64_t i = __clz(__rbit64(v18)) | (v14 << 6); ; unint64_t i = __clz(__rbit64(v22)) + (v23 << 6))
  {
    uint64_t v25 = *(void *)(v5 + 72);
    uint64_t v26 = *(void (**)(char *, unint64_t, uint64_t))(v5 + 16);
    v26(v13, *(void *)(a1 + 48) + v25 * i, v4);
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v45, v13, v4);
    sub_10072BEE8(&qword_10163BC60, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v27 = dispatch thunk of Hashable._rawHashValue(seed:)();
    uint64_t v28 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v29 = v27 & ~v28;
    if (((*(void *)(v43 + ((v29 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v29) & 1) == 0)
    {
      (*v19)(v45, v4);
      return 0;
    }
    uint64_t v39 = (unint64_t)v19 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000;
    uint64_t v30 = a2;
    uint64_t v31 = ~v28;
    while (1)
    {
      v26(v8, *(void *)(v30 + 48) + v29 * v25, v4);
      sub_10072BEE8((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
      char v32 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v33 = *v19;
      (*v19)(v8, v4);
      if (v32) {
        break;
      }
      unint64_t v29 = (v29 + 1) & v31;
      if (((*(void *)(v43 + ((v29 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v29) & 1) == 0)
      {
        v33(v45, v4);
        return 0;
      }
    }
    uint64_t result = ((uint64_t (*)(char *, uint64_t))v33)(v45, v4);
    a2 = v30;
    uint64_t v5 = v35;
    a1 = v36;
    uint64_t v13 = v34;
    unint64_t v18 = v40;
    int64_t v14 = v41;
    if (v40) {
      goto LABEL_7;
    }
LABEL_9:
    int64_t v21 = v14 + 1;
    if (__OFADD__(v14, 1))
    {
      __break(1u);
      goto LABEL_35;
    }
    if (v21 >= v38) {
      return 1;
    }
    unint64_t v22 = *(void *)(v37 + 8 * v21);
    int64_t v23 = v14 + 1;
    if (!v22)
    {
      int64_t v23 = v14 + 2;
      if (v14 + 2 >= v38) {
        return 1;
      }
      unint64_t v22 = *(void *)(v37 + 8 * v23);
      if (!v22)
      {
        int64_t v23 = v14 + 3;
        if (v14 + 3 >= v38) {
          return 1;
        }
        unint64_t v22 = *(void *)(v37 + 8 * v23);
        if (!v22)
        {
          int64_t v23 = v14 + 4;
          if (v14 + 4 >= v38) {
            return 1;
          }
          unint64_t v22 = *(void *)(v37 + 8 * v23);
          if (!v22) {
            break;
          }
        }
      }
    }
LABEL_24:
    uint64_t v40 = (v22 - 1) & v22;
    int64_t v41 = v23;
  }
  uint64_t v24 = v14 + 5;
  if (v14 + 5 >= v38) {
    return 1;
  }
  unint64_t v22 = *(void *)(v37 + 8 * v24);
  if (v22)
  {
    int64_t v23 = v14 + 5;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v23 = v24 + 1;
    if (__OFADD__(v24, 1)) {
      break;
    }
    if (v23 >= v38) {
      return 1;
    }
    unint64_t v22 = *(void *)(v37 + 8 * v23);
    ++v24;
    if (v22) {
      goto LABEL_24;
    }
  }
LABEL_35:
  __break(1u);
  return result;
}

Swift::Int sub_10072AB48(Swift::Int result, uint64_t a2)
{
  if (result == a2) {
    return 1;
  }
  Swift::Int v3 = result;
  if (*(void *)(result + 16) != *(void *)(a2 + 16)) {
    return 0;
  }
  int64_t v4 = 0;
  Swift::Int v5 = result + 56;
  uint64_t v6 = 1 << *(unsigned char *)(result + 32);
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(result + 56);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  uint64_t v10 = a2 + 56;
  do
  {
LABEL_7:
    if (v8)
    {
      unint64_t v11 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v12 = v11 | (v4 << 6);
      goto LABEL_25;
    }
    int64_t v13 = v4 + 1;
    if (__OFADD__(v4, 1))
    {
      __break(1u);
LABEL_35:
      __break(1u);
      return result;
    }
    if (v13 >= v9) {
      return 1;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v13);
    ++v4;
    if (v14) {
      goto LABEL_24;
    }
    int64_t v4 = v13 + 1;
    if (v13 + 1 >= v9) {
      return 1;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v4);
    if (v14) {
      goto LABEL_24;
    }
    int64_t v4 = v13 + 2;
    if (v13 + 2 >= v9) {
      return 1;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v4);
    if (v14) {
      goto LABEL_24;
    }
    int64_t v4 = v13 + 3;
    if (v13 + 3 >= v9) {
      return 1;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v4);
    if (v14) {
      goto LABEL_24;
    }
    int64_t v15 = v13 + 4;
    if (v15 >= v9) {
      return 1;
    }
    unint64_t v14 = *(void *)(v5 + 8 * v15);
    if (!v14)
    {
      while (1)
      {
        int64_t v4 = v15 + 1;
        if (__OFADD__(v15, 1)) {
          goto LABEL_35;
        }
        if (v4 >= v9) {
          return 1;
        }
        unint64_t v14 = *(void *)(v5 + 8 * v4);
        ++v15;
        if (v14) {
          goto LABEL_24;
        }
      }
    }
    int64_t v4 = v15;
LABEL_24:
    unint64_t v8 = (v14 - 1) & v14;
    unint64_t v12 = __clz(__rbit64(v14)) + (v4 << 6);
LABEL_25:
    Swift::UInt v16 = *(unsigned __int8 *)(*(void *)(v3 + 48) + v12);
    Hasher.init(_seed:)();
    Hasher._combine(_:)(v16);
    uint64_t result = Hasher._finalize()();
    uint64_t v17 = -1 << *(unsigned char *)(a2 + 32);
    unint64_t v18 = result & ~v17;
    if (((*(void *)(v10 + ((v18 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v18) & 1) == 0) {
      return 0;
    }
    uint64_t v19 = *(void *)(a2 + 48);
  }
  while (*(unsigned __int8 *)(v19 + v18) == v16);
  uint64_t v20 = ~v17;
  while (1)
  {
    unint64_t v18 = (v18 + 1) & v20;
    if (((*(void *)(v10 + ((v18 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v18) & 1) == 0) {
      return 0;
    }
    if (*(unsigned __int8 *)(v19 + v18) == v16) {
      goto LABEL_7;
    }
  }
}

void sub_10072AD40(uint64_t *a1, int __c)
{
  unint64_t v2 = a1[1];
  switch(v2 >> 62)
  {
    case 1uLL:
      uint64_t __b = *a1;
      uint64_t v19 = v2 & 0x3FFFFFFFFFFFFFFFLL;
      sub_10072AF34((int *)&__b, __c);
      uint64_t v5 = __b;
      unint64_t v6 = v19 | 0x4000000000000000;
      goto LABEL_4;
    case 2uLL:
      uint64_t __b = *a1;
      uint64_t v19 = v2 & 0x3FFFFFFFFFFFFFFFLL;
      Data.LargeSlice.ensureUniqueReference()();
      uint64_t v7 = v19;
      uint64_t v8 = *(void *)(__b + 16);
      uint64_t v9 = *(void *)(__b + 24);
      uint64_t v10 = __DataStorage._bytes.getter();
      if (!v10)
      {
        __break(1u);
        JUMPOUT(0x10072AF24);
      }
      uint64_t v11 = v10;
      uint64_t v12 = __DataStorage._offset.getter();
      uint64_t v13 = v8 - v12;
      if (__OFSUB__(v8, v12))
      {
        __break(1u);
LABEL_14:
        __break(1u);
      }
      BOOL v14 = __OFSUB__(v9, v8);
      int64_t v15 = v9 - v8;
      if (v14) {
        goto LABEL_14;
      }
      uint64_t v16 = __DataStorage._length.getter();
      if (v16 >= v15) {
        size_t v17 = v15;
      }
      else {
        size_t v17 = v16;
      }
      memset((void *)(v11 + v13), __c, v17);
      *a1 = __b;
      a1[1] = v7 | 0x8000000000000000;
      return;
    case 3uLL:
      return;
    default:
      uint64_t __b = *a1;
      LOWORD(v19) = v2;
      BYTE2(v19) = BYTE2(v2);
      BYTE3(v19) = BYTE3(v2);
      BYTE4(v19) = BYTE4(v2);
      BYTE5(v19) = BYTE5(v2);
      BYTE6(v19) = BYTE6(v2);
      memset(&__b, __c, BYTE6(v2));
      uint64_t v5 = __b;
      unint64_t v6 = v19 | ((unint64_t)BYTE4(v19) << 32) | ((unint64_t)BYTE5(v19) << 40) | ((unint64_t)BYTE6(v19) << 48);
LABEL_4:
      *a1 = v5;
      a1[1] = v6;
      return;
  }
}

void sub_10072AF34(int *a1, int a2)
{
  Data.InlineSlice.ensureUniqueReference()();
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  if ((int)v5 < (int)v4)
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v6 = __DataStorage._bytes.getter();
  if (!v6)
  {
LABEL_12:
    __break(1u);
    return;
  }
  uint64_t v7 = v6;
  uint64_t v8 = __DataStorage._offset.getter();
  uint64_t v9 = v4 - v8;
  if (__OFSUB__(v4, v8))
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  int64_t v10 = v5 - v4;
  uint64_t v11 = __DataStorage._length.getter();
  if (v11 >= v10) {
    size_t v12 = v10;
  }
  else {
    size_t v12 = v11;
  }

  memset((void *)(v7 + v9), a2, v12);
}

uint64_t _s12searchpartyd10CryptoKeysV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  if ((static DateInterval.== infix(_:_:)() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = (int *)type metadata accessor for CryptoKeys();
  uint64_t v5 = v4[5];
  uint64_t v6 = *(void *)(a1 + v5);
  unint64_t v7 = *(void *)(a1 + v5 + 8);
  uint64_t v8 = (uint64_t *)(a2 + v5);
  uint64_t v9 = *v8;
  unint64_t v10 = v8[1];
  if (v7 >> 60 != 15)
  {
    if (v10 >> 60 != 15)
    {
      sub_100037A38(v6, v7);
      sub_100037A38(v9, v10);
      char v11 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v6, v7, v9, v10);
      sub_100037A24(v9, v10);
      sub_100037A24(v6, v7);
      if ((v11 & 1) == 0) {
        return 0;
      }
      goto LABEL_8;
    }
LABEL_6:
    sub_100037A38(v6, v7);
    sub_100037A38(v9, v10);
    sub_100037A24(v6, v7);
    sub_100037A24(v9, v10);
    return 0;
  }
  if (v10 >> 60 != 15) {
    goto LABEL_6;
  }
LABEL_8:
  uint64_t v12 = v4[6];
  uint64_t v13 = *(void *)(a1 + v12);
  unint64_t v14 = *(void *)(a1 + v12 + 8);
  int64_t v15 = (uint64_t *)(a2 + v12);
  uint64_t v16 = *v15;
  unint64_t v17 = v15[1];
  sub_1000361E0(v13, v14);
  sub_1000361E0(v16, v17);
  char v18 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v13, v14, v16, v17);
  sub_10001CFB8(v16, v17);
  sub_10001CFB8(v13, v14);
  if (v18)
  {
    uint64_t v19 = v4[7];
    uint64_t v20 = *(void *)(a1 + v19);
    unint64_t v21 = *(void *)(a1 + v19 + 8);
    unint64_t v22 = (uint64_t *)(a2 + v19);
    uint64_t v23 = *v22;
    unint64_t v24 = v22[1];
    sub_1000361E0(v20, v21);
    sub_1000361E0(v23, v24);
    char v25 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v20, v21, v23, v24);
    sub_10001CFB8(v23, v24);
    sub_10001CFB8(v20, v21);
    if (v25)
    {
      uint64_t v26 = v4[8];
      uint64_t v27 = *(void *)(a1 + v26);
      unint64_t v28 = *(void *)(a1 + v26 + 8);
      unint64_t v29 = (uint64_t *)(a2 + v26);
      uint64_t v30 = *v29;
      unint64_t v31 = v29[1];
      sub_1000361E0(v27, v28);
      sub_1000361E0(v30, v31);
      char v32 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v27, v28, v30, v31);
      sub_10001CFB8(v30, v31);
      sub_10001CFB8(v27, v28);
      if (v32)
      {
        uint64_t v33 = v4[9];
        uint64_t v34 = a1 + v33;
        uint64_t v35 = *(void *)(a1 + v33);
        unint64_t v36 = *(void *)(v34 + 8);
        uint64_t v37 = (uint64_t *)(a2 + v33);
        uint64_t v38 = *v37;
        unint64_t v39 = v37[1];
        sub_1000361E0(v35, v36);
        sub_1000361E0(v38, v39);
        char v40 = _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v35, v36, v38, v39);
        sub_10001CFB8(v38, v39);
        sub_10001CFB8(v35, v36);
        return v40 & 1;
      }
    }
  }
  return 0;
}

unint64_t sub_10072B25C()
{
  unint64_t result = qword_10164CB50;
  if (!qword_10164CB50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164CB50);
  }
  return result;
}

uint64_t sub_10072B2B0()
{
  return sub_10072BEE8(&qword_10164CB60, (void (*)(uint64_t))type metadata accessor for CryptoKeys);
}

uint64_t *initializeBufferWithCopyOfBuffer for CryptoKeys(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for DateInterval();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    unint64_t v10 = (char *)a2 + v8;
    unint64_t v11 = *((void *)v10 + 1);
    if (v11 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
    }
    else
    {
      uint64_t v13 = *(void *)v10;
      sub_1000361E0(*(void *)v10, *((void *)v10 + 1));
      *(void *)uint64_t v9 = v13;
      *((void *)v9 + 1) = v11;
    }
    uint64_t v14 = a3[6];
    int64_t v15 = (uint64_t *)((char *)a1 + v14);
    uint64_t v16 = (uint64_t *)((char *)a2 + v14);
    uint64_t v17 = *v16;
    unint64_t v18 = v16[1];
    sub_1000361E0(*v16, v18);
    *int64_t v15 = v17;
    v15[1] = v18;
    uint64_t v19 = a3[7];
    uint64_t v20 = (uint64_t *)((char *)a1 + v19);
    unint64_t v21 = (uint64_t *)((char *)a2 + v19);
    uint64_t v22 = *v21;
    unint64_t v23 = v21[1];
    sub_1000361E0(*v21, v23);
    *uint64_t v20 = v22;
    v20[1] = v23;
    uint64_t v24 = a3[8];
    char v25 = (uint64_t *)((char *)a1 + v24);
    uint64_t v26 = (uint64_t *)((char *)a2 + v24);
    uint64_t v27 = *v26;
    unint64_t v28 = v26[1];
    sub_1000361E0(*v26, v28);
    *char v25 = v27;
    v25[1] = v28;
    uint64_t v29 = a3[9];
    uint64_t v30 = (uint64_t *)((char *)a1 + v29);
    unint64_t v31 = (uint64_t *)((char *)a2 + v29);
    uint64_t v32 = *v31;
    unint64_t v33 = v31[1];
    sub_1000361E0(*v31, v33);
    *uint64_t v30 = v32;
    v30[1] = v33;
  }
  return a1;
}

uint64_t destroy for CryptoKeys(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  int v5 = (uint64_t *)(a1 + a2[5]);
  unint64_t v6 = v5[1];
  if (v6 >> 60 != 15) {
    sub_10001CFB8(*v5, v6);
  }
  sub_10001CFB8(*(void *)(a1 + a2[6]), *(void *)(a1 + a2[6] + 8));
  sub_10001CFB8(*(void *)(a1 + a2[7]), *(void *)(a1 + a2[7] + 8));
  sub_10001CFB8(*(void *)(a1 + a2[8]), *(void *)(a1 + a2[8] + 8));
  uint64_t v7 = (uint64_t *)(a1 + a2[9]);
  uint64_t v8 = *v7;
  unint64_t v9 = v7[1];

  return sub_10001CFB8(v8, v9);
}

uint64_t initializeWithCopy for CryptoKeys(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  unint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = v9[1];
  if (v10 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  }
  else
  {
    uint64_t v11 = *v9;
    sub_1000361E0(*v9, v9[1]);
    *(void *)uint64_t v8 = v11;
    *(void *)(v8 + 8) = v10;
  }
  uint64_t v12 = a3[6];
  uint64_t v13 = (uint64_t *)(a1 + v12);
  uint64_t v14 = (uint64_t *)(a2 + v12);
  uint64_t v15 = *v14;
  unint64_t v16 = v14[1];
  sub_1000361E0(*v14, v16);
  *uint64_t v13 = v15;
  v13[1] = v16;
  uint64_t v17 = a3[7];
  unint64_t v18 = (uint64_t *)(a1 + v17);
  uint64_t v19 = (uint64_t *)(a2 + v17);
  uint64_t v20 = *v19;
  unint64_t v21 = v19[1];
  sub_1000361E0(*v19, v21);
  *unint64_t v18 = v20;
  v18[1] = v21;
  uint64_t v22 = a3[8];
  unint64_t v23 = (uint64_t *)(a1 + v22);
  uint64_t v24 = (uint64_t *)(a2 + v22);
  uint64_t v25 = *v24;
  unint64_t v26 = v24[1];
  sub_1000361E0(*v24, v26);
  *unint64_t v23 = v25;
  v23[1] = v26;
  uint64_t v27 = a3[9];
  unint64_t v28 = (uint64_t *)(a1 + v27);
  uint64_t v29 = (uint64_t *)(a2 + v27);
  uint64_t v30 = *v29;
  unint64_t v31 = v29[1];
  sub_1000361E0(*v29, v31);
  *unint64_t v28 = v30;
  v28[1] = v31;
  return a1;
}

uint64_t assignWithCopy for CryptoKeys(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (uint64_t *)(a1 + v7);
  unint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = *(void *)(a2 + v7 + 8);
  if (*(void *)(a1 + v7 + 8) >> 60 != 15)
  {
    if (v10 >> 60 != 15)
    {
      uint64_t v12 = *v9;
      sub_1000361E0(v12, v10);
      uint64_t v13 = *v8;
      unint64_t v14 = v8[1];
      uint64_t *v8 = v12;
      v8[1] = v10;
      sub_10001CFB8(v13, v14);
      goto LABEL_8;
    }
    sub_10042BA84((uint64_t)v8);
    goto LABEL_6;
  }
  if (v10 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    goto LABEL_8;
  }
  uint64_t v11 = *v9;
  sub_1000361E0(v11, v10);
  uint64_t *v8 = v11;
  v8[1] = v10;
LABEL_8:
  uint64_t v15 = a3[6];
  unint64_t v16 = (uint64_t *)(a1 + v15);
  uint64_t v17 = (uint64_t *)(a2 + v15);
  uint64_t v18 = *v17;
  unint64_t v19 = v17[1];
  sub_1000361E0(*v17, v19);
  uint64_t v20 = *v16;
  unint64_t v21 = v16[1];
  *unint64_t v16 = v18;
  v16[1] = v19;
  sub_10001CFB8(v20, v21);
  uint64_t v22 = a3[7];
  unint64_t v23 = (uint64_t *)(a1 + v22);
  uint64_t v24 = (uint64_t *)(a2 + v22);
  uint64_t v25 = *v24;
  unint64_t v26 = v24[1];
  sub_1000361E0(*v24, v26);
  uint64_t v27 = *v23;
  unint64_t v28 = v23[1];
  *unint64_t v23 = v25;
  v23[1] = v26;
  sub_10001CFB8(v27, v28);
  uint64_t v29 = a3[8];
  uint64_t v30 = (uint64_t *)(a1 + v29);
  unint64_t v31 = (uint64_t *)(a2 + v29);
  uint64_t v32 = *v31;
  unint64_t v33 = v31[1];
  sub_1000361E0(*v31, v33);
  uint64_t v34 = *v30;
  unint64_t v35 = v30[1];
  *uint64_t v30 = v32;
  v30[1] = v33;
  sub_10001CFB8(v34, v35);
  uint64_t v36 = a3[9];
  uint64_t v37 = (uint64_t *)(a1 + v36);
  uint64_t v38 = (uint64_t *)(a2 + v36);
  uint64_t v39 = *v38;
  unint64_t v40 = v38[1];
  sub_1000361E0(*v38, v40);
  uint64_t v41 = *v37;
  unint64_t v42 = v37[1];
  *uint64_t v37 = v39;
  v37[1] = v40;
  sub_10001CFB8(v41, v42);
  return a1;
}

uint64_t initializeWithTake for CryptoKeys(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  return a1;
}

uint64_t assignWithTake for CryptoKeys(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for DateInterval();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (uint64_t *)(a1 + v7);
  unint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = *(void *)(a1 + v7 + 8);
  if (v10 >> 60 != 15)
  {
    unint64_t v11 = v9[1];
    if (v11 >> 60 != 15)
    {
      uint64_t v12 = *v8;
      uint64_t *v8 = *v9;
      v8[1] = v11;
      sub_10001CFB8(v12, v10);
      goto LABEL_6;
    }
    sub_10042BA84((uint64_t)v8);
  }
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
LABEL_6:
  uint64_t v13 = a3[6];
  uint64_t v14 = *(void *)(a1 + v13);
  unint64_t v15 = *(void *)(a1 + v13 + 8);
  *(_OWORD *)(a1 + v13) = *(_OWORD *)(a2 + v13);
  sub_10001CFB8(v14, v15);
  uint64_t v16 = a3[7];
  uint64_t v17 = *(void *)(a1 + v16);
  unint64_t v18 = *(void *)(a1 + v16 + 8);
  *(_OWORD *)(a1 + v16) = *(_OWORD *)(a2 + v16);
  sub_10001CFB8(v17, v18);
  uint64_t v19 = a3[8];
  uint64_t v20 = *(void *)(a1 + v19);
  unint64_t v21 = *(void *)(a1 + v19 + 8);
  *(_OWORD *)(a1 + v19) = *(_OWORD *)(a2 + v19);
  sub_10001CFB8(v20, v21);
  uint64_t v22 = a3[9];
  uint64_t v23 = *(void *)(a1 + v22);
  unint64_t v24 = *(void *)(a1 + v22 + 8);
  *(_OWORD *)(a1 + v22) = *(_OWORD *)(a2 + v22);
  sub_10001CFB8(v23, v24);
  return a1;
}

uint64_t getEnumTagSinglePayload for CryptoKeys(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10072B9F0);
}

uint64_t sub_10072B9F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DateInterval();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    uint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24) + 8) >> 60;
    if (((4 * v10) & 0xC) != 0) {
      return 16 - ((4 * v10) & 0xC | (v10 >> 2));
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for CryptoKeys(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10072BAD8);
}

uint64_t sub_10072BAD8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for DateInterval();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    unint64_t v11 = (void *)(a1 + *(int *)(a4 + 24));
    *unint64_t v11 = 0;
    v11[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * a2) << 60;
  }
  return result;
}

uint64_t sub_10072BBA4()
{
  uint64_t result = type metadata accessor for DateInterval();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for CryptoKeys.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 11 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 11) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF5) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF4)
  {
    unsigned int v6 = ((a2 - 245) >> 8) + 1;
    *uint64_t result = a2 + 11;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x10072BD14);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 11;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CryptoKeys.CodingKeys()
{
  return &type metadata for CryptoKeys.CodingKeys;
}

unint64_t sub_10072BD50()
{
  unint64_t result = qword_10164CC08;
  if (!qword_10164CC08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164CC08);
  }
  return result;
}

unint64_t sub_10072BDA8()
{
  unint64_t result = qword_10164CC10;
  if (!qword_10164CC10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164CC10);
  }
  return result;
}

unint64_t sub_10072BE00()
{
  unint64_t result = qword_10164CC18;
  if (!qword_10164CC18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164CC18);
  }
  return result;
}

unint64_t sub_10072BE54(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1015A2488, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 0xC) {
    return 12;
  }
  else {
    return v3;
  }
}

uint64_t sub_10072BEA0(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000592C(&qword_10163D210);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10072BEE8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_10072BF30(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_10072BF98(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

Swift::Int sub_10072BFF8()
{
  return Hasher._finalize()();
}

Swift::Int sub_10072C130()
{
  return Hasher._finalize()();
}

Swift::Int sub_10072C1D4()
{
  return Hasher._finalize()();
}

Swift::Int sub_10072C2EC()
{
  return Hasher._finalize()();
}

Swift::Int sub_10072C3D8()
{
  return Hasher._finalize()();
}

Swift::Int sub_10072C4FC()
{
  return Hasher._finalize()();
}

Swift::Int sub_10072C5E0()
{
  return Hasher._finalize()();
}

Swift::Int sub_10072C67C()
{
  return Hasher._finalize()();
}

Swift::Int sub_10072C794(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = sub_100B737C8(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  Swift::Int result = sub_10075657C(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_10072C800@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1007588F4(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t SPSecureLocationSubscriptionMode.init(from:)(void *a1)
{
  return sub_1007588F4(a1);
}

uint64_t sub_10072C844(void *a1)
{
  return SPSecureLocationSubscriptionMode.encode(to:)(a1);
}

uint64_t SPSecureLocationSubscriptionMode.encode(to:)(void *a1)
{
  sub_10001CD44(a1, a1[3]);
  dispatch thunk of Encoder.singleValueContainer()();
  sub_1000BD078((uint64_t)v2, v3);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)();
  swift_bridgeObjectRelease();
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v2);
}

uint64_t sub_10072C9F0()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10164CC28);
  uint64_t v1 = sub_100010324(v0, (uint64_t)qword_10164CC28);
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100010324(v0, (uint64_t)qword_10170EC30);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void *sub_10072CAB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v6 = (void *)v5;
  uint64_t v46 = a5;
  uint64_t v47 = a4;
  uint64_t v44 = a1;
  uint64_t v45 = a3;
  uint64_t v43 = a2;
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v7);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v8 - 8);
  uint64_t v51 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v9 = *(void *)(v51 - 8);
  __chkstk_darwin(v51);
  unint64_t v11 = (char *)v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)(v5 + 88) = 0u;
  *(_OWORD *)(v5 + 72) = 0u;
  *(_OWORD *)(v5 + 56) = 0u;
  *(void *)(v5 + 104) = _swiftEmptyArrayStorage;
  uint64_t v53 = sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  *(void *)(v5 + 112) = 0;
  *(void *)(v5 + 120) = 0;
  unsigned int v55 = enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:);
  uint64_t v50 = *(void (**)(char *))(v9 + 104);
  uint64_t v52 = v9 + 104;
  v50(v11);
  static DispatchQoS.unspecified.getter();
  int v58 = _swiftEmptyArrayStorage;
  uint64_t v49 = sub_100766750((unint64_t *)&qword_101638CC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  uint64_t v57 = sub_10000588C((uint64_t *)&unk_1016376F0);
  uint64_t v56 = sub_100062734((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
  uint64_t v54 = v7;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v48 = v11;
  *(void *)(v5 + 128) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v12 = (void *)SPSecureLocationsOnDemandPublishRequest;
  v42[1] = type metadata accessor for DarwinNotificationHelper();
  swift_allocObject();
  id v13 = v12;
  *(void *)(v5 + 136) = DarwinNotificationHelper.init(notificationName:rateLimit:)();
  uint64_t v14 = v55;
  uint64_t v16 = (void (*)(char *, uint64_t, uint64_t))v50;
  uint64_t v15 = v51;
  ((void (*)(char *, void, uint64_t))v50)(v11, v55, v51);
  static DispatchQoS.unspecified.getter();
  int v58 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v17 = v48;
  *(void *)(v5 + 144) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)(v5 + 152) = 0;
  *(void *)(v5 + 160) = 0;
  *(void *)(v5 + 168) = 0;
  v16(v17, v14, v15);
  static DispatchQoS.unspecified.getter();
  int v58 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)(v5 + 176) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(_OWORD *)(v5 + 200) = 0u;
  *(_OWORD *)(v5 + 216) = 0u;
  *(_OWORD *)(v5 + 232) = 0u;
  *(_OWORD *)(v5 + 248) = 0u;
  *(void *)(v5 + 280) = 0;
  *(_OWORD *)(v5 + 184) = 0u;
  *(_OWORD *)(v5 + 264) = 0u;
  unint64_t v18 = v17;
  uint64_t v19 = v51;
  v16(v18, v55, v51);
  static DispatchQoS.unspecified.getter();
  int v58 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v20 = v48;
  *(void *)(v5 + 288) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  ((void (*)(char *, void, uint64_t))v50)(v20, v55, v19);
  static DispatchQoS.unspecified.getter();
  int v58 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)(v5 + 296) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)(v5 + 304) = _swiftEmptyDictionarySingleton;
  type metadata accessor for DeviceIdentityUtility();
  uint64_t v21 = swift_allocObject();
  swift_defaultActor_initialize();
  uint64_t v22 = v21 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certExpiryDate;
  uint64_t v23 = type metadata accessor for Date();
  unint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56);
  v24(v22, 1, 1, v23);
  *(void *)(v21 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_refKey) = 0;
  *(void *)(v21 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certs) = _swiftEmptyArrayStorage;
  *(unsigned char *)(v21 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_signingType) = 5;
  *(void *)(v5 + 312) = v21;
  uint64_t v25 = swift_allocObject();
  swift_defaultActor_initialize();
  uint64_t v26 = v43;
  uint64_t v27 = v23;
  uint64_t v28 = v45;
  v24(v25 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certExpiryDate, 1, 1, v27);
  uint64_t v29 = v44;
  *(void *)(v25 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_refKey) = 0;
  uint64_t v30 = v46;
  uint64_t v31 = v47;
  *(void *)(v25 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certs) = _swiftEmptyArrayStorage;
  *(unsigned char *)(v25 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_signingType) = 3;
  v6[40] = v25;
  uint64_t v32 = (void *)SPSecureLocationsStewiePublishRequest;
  swift_allocObject();
  id v33 = v32;
  v6[42] = DarwinNotificationHelper.init(notificationName:rateLimit:)();
  v6[43] = 0;
  v6[2] = v29;
  v6[3] = v26;
  v6[4] = v28;
  __n128 v6[5] = v31;
  v6[6] = v30;
  id v34 = objc_allocWithZone((Class)type metadata accessor for SecureLocationsStewieManager());
  swift_retain_n();
  swift_retain_n();
  swift_retain_n();
  swift_retain();
  swift_retain();
  v6[41] = sub_10107F6D0(v29, v31, v26);
  uint64_t v35 = swift_allocObject();
  swift_weakInit();
  uint64_t v36 = *(void *)(v26 + 16);
  *(void *)(v26 + 16) = sub_100768FCC;
  *(void *)(v26 + 24) = v35;
  sub_1000A1534(v36);
  sub_10072D51C();
  sub_10072DEFC();
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v37 = type metadata accessor for Logger();
  sub_100010324(v37, (uint64_t)qword_10170EC30);
  uint64_t v38 = Logger.logObject.getter();
  os_log_type_t v39 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v38, v39))
  {
    unint64_t v40 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)unint64_t v40 = 0;
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "TDW: INIT SECURELOCATIONS v1", v40, 2u);
    swift_slowDealloc();
  }
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  return v6;
}

uint64_t sub_10072D2F4(uint64_t a1, unint64_t a2)
{
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100010324(v4, (uint64_t)qword_10170EC30);
  swift_bridgeObjectRetain_n();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc();
    uint64_t v8 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 141558275;
    v10[0] = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v7 + 12) = 2081;
    swift_bridgeObjectRetain();
    sub_1008FA0F0(a1, a2, v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "keyDidDistributedCallback: startLocationMonitoring for id: %{private,mask.hash}s with backgroundProactive and forcePublish", (uint8_t *)v7, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_100759090(a1, a2, 0xD000000000000013, 0x8000000101405BA0, 1);
    return swift_release();
  }
  return result;
}

uint64_t sub_10072D51C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_10000588C(&qword_10164D160);
  __chkstk_darwin(v2 - 8);
  uint64_t v37 = (char *)&v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000588C(&qword_10164D168);
  __chkstk_darwin(v4 - 8);
  os_log_type_t v6 = (char *)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for NSRunLoop.SchedulerTimeType.Stride();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C(&qword_10164D170);
  uint64_t v39 = *(void *)(v11 - 8);
  uint64_t v40 = v11;
  __chkstk_darwin(v11);
  uint64_t v36 = (char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = v0[3];
  uint64_t v14 = *(void *)(v13 + 40);
  uint64_t v15 = *(void *)(v14 + 336);
  *(void *)(v14 + 336) = sub_100768A10;
  *(void *)(v14 + 344) = v1;
  swift_retain();
  sub_1000A1534(v15);
  if (qword_101637080 != -1) {
    swift_once();
  }
  swift_retain();
  uint64_t v16 = AnyCurrentValuePublisher.publisher.getter();
  swift_release();
  uint64_t v43 = v16;
  swift_retain();
  uint64_t v17 = sub_10000588C(&qword_10163FE78);
  uint64_t v38 = &protocol conformance descriptor for AnyPublisher<A, B>;
  sub_100062734(&qword_10163FE80, &qword_10163FE78);
  uint64_t v18 = Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  v1[7] = v18;
  swift_release();
  uint64_t v43 = *(void *)(qword_10170EC60 + 88);
  swift_retain();
  swift_retain();
  uint64_t v41 = v17;
  uint64_t v19 = Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  v1[10] = v19;
  swift_release();
  uint64_t v43 = *(void *)(qword_10170EC60 + 104);
  swift_retain();
  swift_retain();
  uint64_t v20 = Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  v1[12] = v20;
  swift_release();
  swift_retain();
  uint64_t v21 = AnyCurrentValuePublisher.publisher.getter();
  uint64_t v35 = v13;
  uint64_t v22 = v21;
  swift_release();
  uint64_t v43 = v22;
  NSRunLoop.SchedulerTimeType.Stride.init(floatLiteral:)();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1, 1, v7);
  id v42 = [self mainRunLoop];
  uint64_t v23 = type metadata accessor for NSRunLoop.SchedulerOptions();
  uint64_t v24 = (uint64_t)v37;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v37, 1, 1, v23);
  sub_10001D4B0(0, &qword_10164D178);
  sub_100768A20();
  uint64_t v25 = v36;
  Publisher.delay<A>(for:tolerance:scheduler:options:)();
  sub_10001DAB4(v24, &qword_10164D160);

  sub_10001DAB4((uint64_t)v6, &qword_10164D168);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  swift_release();
  sub_100062734(&qword_10164D188, &qword_10164D170);
  swift_retain();
  uint64_t v26 = v40;
  uint64_t v27 = Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v39 + 8))(v25, v26);
  v1[8] = v27;
  swift_release();
  uint64_t v43 = *(void *)(qword_10170EC60 + 72);
  swift_retain();
  swift_retain();
  uint64_t v28 = Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  v1[9] = v28;
  swift_release();
  uint64_t v43 = *(void *)(v1[2] + 48);
  swift_retain();
  swift_retain();
  sub_10000588C(&qword_10164D190);
  sub_100062734(&qword_10164D198, &qword_10164D190);
  uint64_t v29 = Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  v1[11] = v29;
  swift_release();
  uint64_t v43 = *(void *)(v35 + 128);
  swift_retain();
  swift_retain();
  sub_10000588C(&qword_10164D1A0);
  sub_100062734(&qword_10164D1A8, &qword_10164D1A0);
  uint64_t v30 = Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  v1[20] = v30;
  swift_release();
  uint64_t v43 = *(void *)(v1[4] + 312);
  uint64_t v31 = swift_allocObject();
  *(void *)(v31 + 16) = sub_100768AA8;
  *(void *)(v31 + 24) = v1;
  swift_retain();
  swift_retain();
  sub_10000588C(&qword_10164D1B0);
  sub_100062734(&qword_10164D1B8, &qword_10164D1B0);
  uint64_t v32 = Publisher<>.sink(receiveValue:)();
  swift_release();
  swift_release();
  v1[21] = v32;
  return swift_release();
}

uint64_t sub_10072DD00()
{
  return static Transaction.named<A>(_:with:)();
}

uint64_t sub_10072DD84()
{
  if (qword_101637080 != -1) {
    swift_once();
  }
  swift_retain();
  sub_100D0C0B0();
  swift_release();
  return sub_100746068();
}

void sub_10072DE08(unsigned char *a1)
{
  if (*a1 == 1)
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_100010324(v1, (uint64_t)qword_10170EC30);
    uint64_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "performKeyroll: requesting republish post keyroll complete delay", v4, 2u);
      swift_slowDealloc();
    }

    sub_10073DD2C();
  }
}

uint64_t sub_10072DEFC()
{
  uint64_t v1 = v0;
  BOOL v2 = sub_10060C524();
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_100010324(v3, (uint64_t)qword_10170EC30);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    os_log_type_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "CheckAndFetchConfig: Checking for config", v6, 2u);
    swift_slowDealloc();
  }

  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  BOOL v9 = os_log_type_enabled(v7, v8);
  if (v2)
  {
    if (v9)
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "CheckAndFetchConfig: Existing config found. Not fetching from server", v10, 2u);
      swift_slowDealloc();
    }

    if (qword_101637080 != -1) {
      swift_once();
    }
    uint64_t v11 = qword_10170EC60;
    swift_retain();
    sub_10060BD20((uint64_t)v44);
    uint64_t v12 = *(NSObject **)(v11 + 144);
    uint64_t v13 = swift_allocObject();
    long long v14 = v44[8];
    *(_OWORD *)(v13 + 168) = v44[9];
    long long v15 = v44[11];
    *(_OWORD *)(v13 + 184) = v44[10];
    *(_OWORD *)(v13 + 200) = v15;
    *(_OWORD *)(v13 + 216) = v44[12];
    long long v16 = v44[4];
    *(_OWORD *)(v13 + 104) = v44[5];
    long long v17 = v44[7];
    *(_OWORD *)(v13 + 120) = v44[6];
    *(_OWORD *)(v13 + 136) = v17;
    *(_OWORD *)(v13 + 152) = v14;
    long long v18 = v44[0];
    *(_OWORD *)(v13 + 40) = v44[1];
    long long v19 = v44[3];
    *(_OWORD *)(v13 + 56) = v44[2];
    *(_OWORD *)(v13 + 72) = v19;
    *(_OWORD *)(v13 + 88) = v16;
    *(void *)(v13 + 16) = v11;
    *(_OWORD *)(v13 + 24) = v18;
    uint64_t v20 = swift_allocObject();
    *(void *)(v20 + 16) = sub_100769458;
    *(void *)(v20 + 24) = v13;
    *(void *)&long long v47 = sub_1003B7AE0;
    *((void *)&v47 + 1) = v20;
    *(void *)&long long aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1) = 1107296256;
    *(void *)&long long v46 = sub_1000A70B0;
    *((void *)&v46 + 1) = &unk_1015D3A28;
    uint64_t v21 = _Block_copy(&aBlock);
    swift_retain();
    sub_1006F40C4((uint64_t)v44);
    swift_retain();
    swift_release();
    dispatch_sync(v12, v21);
    _Block_release(v21);
    LOBYTE(v12) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    sub_100551984((uint64_t)v44);
    uint64_t result = swift_release();
    if (v12)
    {
      __break(1u);
    }
    else
    {
      uint64_t v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v23, v24))
      {
        uint64_t v25 = (uint8_t *)swift_slowAlloc();
        uint64_t v43 = swift_slowAlloc();
        *(_DWORD *)uint64_t v25 = 136315138;
        swift_retain();
        OS_dispatch_queue.sync<A>(execute:)();
        swift_release();
        long long v55 = v40;
        long long v56 = v41;
        long long v57 = v42;
        long long v51 = v36;
        long long v52 = v37;
        long long v53 = v38;
        long long v54 = v39;
        long long v47 = v32;
        long long v48 = v33;
        long long v49 = v34;
        long long v50 = v35;
        long long aBlock = v30;
        long long v46 = v31;
        uint64_t v26 = sub_1006F1FC8();
        unint64_t v28 = v27;
        sub_100551984((uint64_t)&aBlock);
        sub_1008FA0F0(v26, v28, &v43);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "CheckAndFetchConfig: Existing config %s", v25, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      return sub_10072F130();
    }
  }
  else
  {
    if (v9)
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "CheckAndFetchConfig - we don't have a local copy of config. doing a fetch", v29, 2u);
      swift_slowDealloc();
    }

    swift_retain();
    sub_10072E958((uint64_t)sub_100768930, v1);
    return swift_release();
  }
  return result;
}

void sub_10072E4A4(uint64_t a1)
{
  if (!a1)
  {
    if (qword_101637070 == -1)
    {
LABEL_7:
      uint64_t v7 = type metadata accessor for Logger();
      sub_100010324(v7, (uint64_t)qword_10170EC30);
      oslog = Logger.logObject.getter();
      os_log_type_t v8 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(oslog, v8))
      {
        BOOL v9 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)BOOL v9 = 0;
        _os_log_impl((void *)&_mh_execute_header, oslog, v8, "CheckAndFetchConfig - successfully fetched config since we don't have a copy", v9, 2u);
        swift_slowDealloc();
      }

      return;
    }
LABEL_17:
    swift_once();
    goto LABEL_7;
  }
  swift_errorRetain();
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v1 = type metadata accessor for Logger();
  sub_100010324(v1, (uint64_t)qword_10170EC30);
  swift_errorRetain();
  swift_errorRetain();
  BOOL v2 = Logger.logObject.getter();
  os_log_type_t v3 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc();
    *(void *)&v23[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v4 = 136315138;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v5 = String.init<A>(describing:)();
    aBlock[0] = sub_1008FA0F0(v5, v6, (uint64_t *)v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "CheckAndFetchConfig - error fetching config %s", v4, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  if (qword_101637080 != -1) {
    swift_once();
  }
  uint64_t v10 = qword_10170EC60;
  swift_retain();
  sub_10060BD20((uint64_t)v23);
  uint64_t v11 = *(NSObject **)(v10 + 144);
  uint64_t v12 = swift_allocObject();
  long long v13 = v23[8];
  *(_OWORD *)(v12 + 168) = v23[9];
  long long v14 = v23[11];
  *(_OWORD *)(v12 + 184) = v23[10];
  *(_OWORD *)(v12 + 200) = v14;
  *(_OWORD *)(v12 + 216) = v23[12];
  long long v15 = v23[4];
  *(_OWORD *)(v12 + 104) = v23[5];
  long long v16 = v23[7];
  *(_OWORD *)(v12 + 120) = v23[6];
  *(_OWORD *)(v12 + 136) = v16;
  *(_OWORD *)(v12 + 152) = v13;
  long long v17 = v23[0];
  *(_OWORD *)(v12 + 40) = v23[1];
  long long v18 = v23[3];
  *(_OWORD *)(v12 + 56) = v23[2];
  *(_OWORD *)(v12 + 72) = v18;
  *(_OWORD *)(v12 + 88) = v15;
  *(void *)(v12 + 16) = v10;
  *(_OWORD *)(v12 + 24) = v17;
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = sub_100769458;
  *(void *)(v19 + 24) = v12;
  aBlock[4] = sub_1003B7AE0;
  aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1000A70B0;
  aBlock[3] = &unk_1015D3AA0;
  uint64_t v20 = _Block_copy(aBlock);
  swift_retain();
  sub_1006F40C4((uint64_t)v23);
  swift_retain();
  swift_release();
  dispatch_sync(v11, v20);
  _Block_release(v20);
  LOBYTE(v11) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  sub_100551984((uint64_t)v23);
  swift_release();
  swift_errorRelease();
  if (v11)
  {
    __break(1u);
    goto LABEL_17;
  }
}

uint64_t sub_10072E958(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v4 - 8);
  int v58 = (char *)v53 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_101649E20);
  __chkstk_darwin(v6 - 8);
  os_log_type_t v8 = (char *)v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for SecureLocationsConfigEndpoint();
  uint64_t v10 = v9 - 8;
  uint64_t v11 = __chkstk_darwin(v9);
  long long v13 = (char *)v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v11);
  long long v15 = (char *)v53 - v14;
  uint64_t v16 = enum case for FMNAccountType.searchParty(_:);
  uint64_t v17 = type metadata accessor for FMNAccountType();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 104))(v15, v16, v17);
  sub_1006F1274((uint64_t)&v15[*(int *)(v10 + 28)]);
  type metadata accessor for SearchPartyURLSessionFactory(0);
  swift_allocObject();
  uint64_t v18 = type metadata accessor for FMNMockingPreferences();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v8, 1, 1, v18);
  uint64_t v19 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)();
  type metadata accessor for ServerInteractionController(0);
  uint64_t v20 = swift_allocObject();
  sub_100768C34((uint64_t)v15, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for SecureLocationsConfigEndpoint);
  uint64_t v21 = (void *)sub_1004A5458((uint64_t)v13, v19, v20);
  id v22 = sub_1006F340C();
  if (v22)
  {
    uint64_t v25 = (uint64_t)v22;
    uint64_t v26 = v23;
    unint64_t v27 = v24;
    long long v54 = v21;
    long long v57 = v15;
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    uint64_t v29 = sub_100010324(v28, (uint64_t)qword_10170EC30);
    sub_10076813C(v25, v26, v27);
    swift_bridgeObjectRetain();
    sub_1000361E0(v26, v27);
    long long v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.debug.getter();
    BOOL v32 = os_log_type_enabled(v30, v31);
    uint64_t v55 = a1;
    uint64_t v56 = a2;
    if (v32)
    {
      long long v33 = (uint8_t *)swift_slowAlloc();
      uint64_t v34 = swift_slowAlloc();
      v53[1] = v29;
      uint64_t v61 = v34;
      *(_DWORD *)long long v33 = 136315138;
      v53[0] = v33 + 4;
      swift_bridgeObjectRetain();
      uint64_t v35 = Dictionary.description.getter();
      unint64_t v37 = v36;
      swift_bridgeObjectRelease();
      uint64_t v60 = sub_1008FA0F0(v35, v37, &v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1001D7860(v25, v26, v27);
      sub_1001D7860(v25, v26, v27);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "FetchConfig request headers %s", v33, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1001D7860(v25, v26, v27);
      sub_1001D7860(v25, v26, v27);
    }

    swift_bridgeObjectRetain();
    sub_1000361E0(v26, v27);
    swift_bridgeObjectRetain();
    sub_1000361E0(v26, v27);
    long long v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v44 = (uint8_t *)swift_slowAlloc();
      uint64_t v61 = swift_slowAlloc();
      *(_DWORD *)uint64_t v44 = 136315138;
      static String.Encoding.utf8.getter();
      uint64_t v45 = String.init(data:encoding:)();
      if (v46)
      {
        unint64_t v47 = v46;
      }
      else
      {
        uint64_t v45 = 7104878;
        unint64_t v47 = 0xE300000000000000;
      }
      uint64_t v60 = sub_1008FA0F0(v45, v47, &v61);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1001D7860(v25, v26, v27);
      sub_1001D7860(v25, v26, v27);
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "FetchConfig request body %s", v44, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1001D7860(v25, v26, v27);
      sub_1001D7860(v25, v26, v27);
    }

    long long v15 = v57;
    uint64_t v48 = v55;
    swift_bridgeObjectRetain();
    sub_1000361E0(v26, v27);
    sub_1004AAF98(v25, v26, v27, 0, v54);
    sub_1001D7860(v25, v26, v27);
    long long v49 = (void *)swift_allocObject();
    v49[2] = v59;
    v49[3] = v48;
    uint64_t v50 = v56;
    v49[4] = v56;
    swift_retain();
    swift_retain();
    Future.addSuccess(block:)();
    swift_release();
    swift_release();
    uint64_t v51 = swift_allocObject();
    *(void *)(v51 + 16) = v48;
    *(void *)(v51 + 24) = v50;
    swift_retain();
    Future.addFailure(block:)();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_1001D7860(v25, v26, v27);
  }
  else
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    sub_100010324(v38, (uint64_t)qword_10170EC30);
    long long v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v39, v40))
    {
      long long v41 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v41 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "FetchConfig - failed to create request", v41, 2u);
      swift_slowDealloc();
    }

    swift_release();
  }
  return sub_100768C9C((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for SecureLocationsConfigEndpoint);
}

uint64_t sub_10072F130()
{
  uint64_t v0 = type metadata accessor for Date();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v56 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v2);
  uint64_t v66 = (char *)&v56 - v6;
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v56 - v8;
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (char *)&v56 - v11;
  uint64_t v13 = __chkstk_darwin(v10);
  long long v15 = (char *)&v56 - v14;
  __chkstk_darwin(v13);
  uint64_t v67 = (char *)&v56 - v16;
  if (sub_100757F90())
  {
    uint64_t v61 = 0;
LABEL_7:
    id v18 = [self standardUserDefaults];
    NSString v19 = String._bridgeToObjectiveC()();
    [v18 doubleForKey:v19];
    double v21 = v20;

    if (v21 == 0.0)
    {
      sub_100758158();
      if (qword_101637070 != -1) {
        swift_once();
      }
      uint64_t v22 = type metadata accessor for Logger();
      sub_100010324(v22, (uint64_t)qword_10170EC30);
      uint64_t v23 = Logger.logObject.getter();
      os_log_type_t v24 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v23, v24))
      {
        uint64_t v25 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v25 = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "CheckAndFetchConfig: nextCheckTime is zero. Fetching now but setting an explicit next check time", v25, 2u);
        swift_slowDealloc();
      }
    }
    size_t v65 = v4;
    Date.init(timeIntervalSince1970:)();
    static Date.trustedNow.getter((uint64_t)v15);
    uint64_t v26 = v12;
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    uint64_t v28 = sub_100010324(v27, (uint64_t)qword_10170EC30);
    uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v1 + 16);
    v29(v12, v15, v0);
    uint64_t v62 = v29;
    v29(v9, v67, v0);
    uint64_t v63 = v28;
    long long v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.default.getter();
    int v32 = v31;
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v33 = swift_slowAlloc();
      uint64_t v64 = v1;
      uint64_t v34 = v33;
      os_log_t v59 = (os_log_t)swift_slowAlloc();
      *(void *)&v81[0] = v59;
      *(_DWORD *)uint64_t v34 = 136315394;
      uint64_t v56 = sub_100766750((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
      int v58 = v32;
      uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)&long long v68 = sub_1008FA0F0(v35, v36, (uint64_t *)v81);
      uint64_t v60 = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      os_log_t v57 = v30;
      unint64_t v37 = *(void (**)(char *, uint64_t))(v64 + 8);
      v37(v12, v0);
      *(_WORD *)(v34 + 12) = 2080;
      uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)&long long v68 = sub_1008FA0F0(v38, v39, (uint64_t *)v81);
      long long v15 = v60;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      v37(v9, v0);
      os_log_type_t v40 = v37;
      os_log_t v41 = v57;
      _os_log_impl((void *)&_mh_execute_header, v57, (os_log_type_t)v58, "CheckAndFetchConfig: currentTime %s nextCheckDateTime %s", (uint8_t *)v34, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v1 = v64;
      swift_slowDealloc();
    }
    else
    {
      os_log_type_t v40 = *(void (**)(char *, uint64_t))(v1 + 8);
      v40(v26, v0);
      v40(v9, v0);
    }
    long long v42 = v66;
    char v43 = static Date.> infix(_:_:)();
    uint64_t v44 = v65;
    if (v43)
    {
      uint64_t v45 = v62;
      v62(v42, v15, v0);
      v45(v44, v67, v0);
      unint64_t v46 = Logger.logObject.getter();
      os_log_type_t v47 = static os_log_type_t.default.getter();
      int v48 = v47;
      if (os_log_type_enabled(v46, v47))
      {
        uint64_t v49 = swift_slowAlloc();
        uint64_t v64 = v1;
        uint64_t v66 = (char *)v0;
        uint64_t v50 = v49;
        uint64_t v63 = swift_slowAlloc();
        *(void *)&v81[0] = v63;
        *(_DWORD *)uint64_t v50 = 136315394;
        sub_100766750((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
        LODWORD(v62) = v48;
        uint64_t v51 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)&long long v68 = sub_1008FA0F0(v51, v52, (uint64_t *)v81);
        uint64_t v60 = v15;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        os_log_t v59 = v46;
        v40(v42, (uint64_t)v66);
        *(_WORD *)(v50 + 12) = 2080;
        uint64_t v53 = dispatch thunk of CustomStringConvertible.description.getter();
        *(void *)&long long v68 = sub_1008FA0F0(v53, v54, (uint64_t *)v81);
        long long v15 = v60;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        v40(v44, (uint64_t)v66);
        os_log_t v55 = v59;
        _os_log_impl((void *)&_mh_execute_header, v59, (os_log_type_t)v62, "CheckAndFetchConfig: Feature disabled. Fetching config because Current time %s greater than checkTime %s", (uint8_t *)v50, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v0 = (uint64_t)v66;
        swift_slowDealloc();
      }
      else
      {
        v40(v42, v0);
        v40(v44, v0);
      }
      type metadata accessor for Transaction();
      static Transaction.named<A>(_:with:)();
    }
    v40(v15, v0);
    return ((uint64_t (*)(char *, uint64_t))v40)(v67, v0);
  }
  size_t v65 = v9;
  if (qword_101637080 != -1) {
    swift_once();
  }
  swift_retain();
  OS_dispatch_queue.sync<A>(execute:)();
  swift_release();
  v81[10] = v78;
  v81[11] = v79;
  v81[12] = v80;
  v81[6] = v74;
  v81[7] = v75;
  v81[8] = v76;
  v81[9] = v77;
  v81[2] = v70;
  v81[3] = v71;
  v81[4] = v72;
  v81[5] = v73;
  v81[0] = v68;
  v81[1] = v69;
  uint64_t result = sub_100551984((uint64_t)v81);
  if ((BYTE8(v81[0]) & 1) == 0)
  {
    uint64_t v61 = 0;
    uint64_t v9 = v65;
    goto LABEL_7;
  }
  return result;
}

void sub_10072FA40(uint64_t a1, void *a2, int a3, uint64_t a4)
{
  int v61 = a3;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v60 = (char *)v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v59 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  int v58 = (char *)v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  uint64_t v13 = sub_100010324(v12, (uint64_t)qword_10170EC30);
  swift_bridgeObjectRetain_n();
  id v14 = a2;
  uint64_t v62 = v13;
  long long v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  int v17 = v16;
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v18 = swift_slowAlloc();
    int v55 = v17;
    uint64_t v19 = v18;
    uint64_t v54 = swift_slowAlloc();
    *(void *)&v77[0] = v54;
    *(_DWORD *)uint64_t v19 = 134218754;
    *(void *)&long long v64 = *(void *)(a1 + 16);
    uint64_t v57 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v19 + 12) = 2082;
    uint64_t v56 = v8;
    v52[1] = v19 + 14;
    id v20 = [v14 clientApp];
    os_log_t v53 = v15;
    uint64_t v21 = a4;
    uint64_t v22 = v10;
    id v23 = v14;
    id v24 = v20;
    uint64_t v25 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v27 = v26;

    id v14 = v23;
    uint64_t v10 = v22;
    a4 = v21;
    *(void *)&long long v64 = sub_1008FA0F0(v25, v27, (uint64_t *)v77);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 22) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v28 = Array.description.getter();
    unint64_t v30 = v29;
    swift_bridgeObjectRelease();
    *(void *)&long long v64 = sub_1008FA0F0(v28, v30, (uint64_t *)v77);
    uint64_t v7 = v57;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    uint64_t v8 = v56;
    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 32) = 1024;
    LODWORD(v64) = v61 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    os_log_t v31 = v53;
    _os_log_impl((void *)&_mh_execute_header, v53, (os_log_type_t)v55, "SubscribeAndFetch location for %ld IDs for clientApp %{public}s ids %s forceKeyRefresh %{BOOL}d", (uint8_t *)v19, 0x26u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    if (sub_100757F90()) {
      goto LABEL_12;
    }
  }
  else
  {

    swift_bridgeObjectRelease_n();
    if (sub_100757F90())
    {
LABEL_12:
      unint64_t v37 = Logger.logObject.getter();
      os_log_type_t v38 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v37, v38))
      {
        unint64_t v39 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v39 = 0;
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "SubscribeAndFetch: secureLocations feature disabled. Not proceeding with subscribe", v39, 2u);
        swift_slowDealloc();
      }

      [v14 subscriptionMode];
      id v40 = objc_allocWithZone((Class)SPSecureLocationsSubscriptionResult);
      sub_10001D4B0(0, (unint64_t *)&qword_10163F378);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      id v42 = [v40 initWithExpiryTime:isa locations:15.0];

      type metadata accessor for SecureLocationsError(0);
      *(void *)&long long v64 = 6;
      sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
      sub_100766750(&qword_10163F370, type metadata accessor for SecureLocationsError);
      _BridgedStoredNSError.init(_:userInfo:)();

      return;
    }
  }
  if (qword_101637080 != -1) {
    swift_once();
  }
  swift_retain();
  OS_dispatch_queue.sync<A>(execute:)();
  swift_release();
  v77[10] = v74;
  v77[11] = v75;
  v77[12] = v76;
  v77[6] = v70;
  v77[7] = v71;
  v77[8] = v72;
  v77[9] = v73;
  v77[2] = v66;
  v77[3] = v67;
  v77[4] = v68;
  v77[5] = v69;
  v77[0] = v64;
  v77[1] = v65;
  sub_100551984((uint64_t)v77);
  if ((BYTE8(v77[0]) & 1) == 0) {
    goto LABEL_12;
  }
  if (*(void *)(a1 + 16))
  {
    uint64_t v62 = *(void *)(a4 + 296);
    uint64_t v32 = swift_allocObject();
    *(void *)(v32 + 16) = a1;
    *(void *)(v32 + 24) = a4;
    *(void *)(v32 + 32) = v14;
    *(unsigned char *)(v32 + 40) = v61 & 1;
    *(void *)(v32 + 48) = SharingCircleWildAdvertisementKey.init(key:);
    *(void *)(v32 + 56) = 0;
    *(void *)&long long v66 = sub_1007668B4;
    *((void *)&v66 + 1) = v32;
    *(void *)&long long v64 = _NSConcreteStackBlock;
    *((void *)&v64 + 1) = 1107296256;
    *(void *)&long long v65 = sub_1004B5480;
    *((void *)&v65 + 1) = &unk_1015D33E8;
    uint64_t v33 = _Block_copy(&v64);
    swift_bridgeObjectRetain();
    id v34 = v14;
    swift_retain();
    uint64_t v35 = v58;
    static DispatchQoS.unspecified.getter();
    uint64_t v63 = _swiftEmptyArrayStorage;
    sub_100766750((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    unint64_t v36 = v60;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v33);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v36, v7);
    (*(void (**)(char *, uint64_t))(v59 + 8))(v35, v10);
    swift_release();
  }
  else
  {
    char v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v45 = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "No findMyIds specified for SubscribeAndFetch - not proceeding", v45, 2u);
      swift_slowDealloc();
    }

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v46 = objc_allocWithZone((Class)NSError);
    NSString v47 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v48 = [v46 initWithDomain:v47 code:0 userInfo:0];

    [v14 subscriptionMode];
    id v49 = objc_allocWithZone((Class)SPSecureLocationsSubscriptionResult);
    sub_10001D4B0(0, (unint64_t *)&qword_10163F378);
    Class v50 = Array._bridgeToObjectiveC()().super.isa;
    id v51 = [v49 initWithExpiryTime:v50 locations:15.0];
  }
}

void sub_100730374(uint64_t a1, void *a2, int a3, void (*a4)(void, void), uint64_t a5)
{
  uint64_t v6 = v5;
  int v66 = a3;
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v65 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v63 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = type metadata accessor for DispatchQoS();
  uint64_t v62 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  int v61 = (char *)&v54 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v15 = sub_100010324(v14, (uint64_t)qword_10170EC30);
  swift_bridgeObjectRetain_n();
  id v16 = a2;
  uint64_t v67 = v15;
  int v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  int v19 = v18;
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v20 = swift_slowAlloc();
    int v57 = v19;
    uint64_t v21 = v20;
    uint64_t v56 = swift_slowAlloc();
    *(void *)&v82[0] = v56;
    *(_DWORD *)uint64_t v21 = 134218754;
    *(void *)&long long v69 = *(void *)(a1 + 16);
    uint64_t v58 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v21 + 12) = 2082;
    os_log_t v55 = v17;
    id v22 = [v16 clientApp];
    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v59 = a5;
    uint64_t v60 = a4;
    uint64_t v24 = v23;
    unint64_t v26 = v25;

    *(void *)&long long v69 = sub_1008FA0F0(v24, v26, (uint64_t *)v82);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v21 + 22) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v27 = Array.description.getter();
    unint64_t v29 = v28;
    swift_bridgeObjectRelease();
    uint64_t v30 = v27;
    a5 = v59;
    *(void *)&long long v69 = sub_1008FA0F0(v30, v29, (uint64_t *)v82);
    uint64_t v11 = v58;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    a4 = v60;
    swift_bridgeObjectRelease();
    *(_WORD *)(v21 + 32) = 1024;
    LODWORD(v69) = v66 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    os_log_t v31 = v55;
    _os_log_impl((void *)&_mh_execute_header, v55, (os_log_type_t)v57, "SubscribeAndFetch location for %ld IDs for clientApp %{public}s ids %s forceKeyRefresh %{BOOL}d", (uint8_t *)v21, 0x26u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    if (sub_100757F90()) {
      goto LABEL_12;
    }
  }
  else
  {

    swift_bridgeObjectRelease_n();
    if (sub_100757F90())
    {
LABEL_12:
      unint64_t v37 = Logger.logObject.getter();
      os_log_type_t v38 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v37, v38))
      {
        unint64_t v39 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v39 = 0;
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "SubscribeAndFetch: secureLocations feature disabled. Not proceeding with subscribe", v39, 2u);
        swift_slowDealloc();
      }

      [v16 subscriptionMode];
      id v40 = objc_allocWithZone((Class)SPSecureLocationsSubscriptionResult);
      sub_10001D4B0(0, (unint64_t *)&qword_10163F378);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      id v42 = [v40 initWithExpiryTime:isa locations:15.0];

      type metadata accessor for SecureLocationsError(0);
      *(void *)&long long v69 = 6;
      sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
      sub_100766750(&qword_10163F370, type metadata accessor for SecureLocationsError);
      _BridgedStoredNSError.init(_:userInfo:)();
      char v43 = *(void **)&v82[0];
      a4(v42, *(void *)&v82[0]);

      return;
    }
  }
  if (qword_101637080 != -1) {
    swift_once();
  }
  swift_retain();
  OS_dispatch_queue.sync<A>(execute:)();
  swift_release();
  v82[10] = v79;
  v82[11] = v80;
  v82[12] = v81;
  v82[6] = v75;
  v82[7] = v76;
  v82[8] = v77;
  v82[9] = v78;
  v82[2] = v71;
  v82[3] = v72;
  v82[4] = v73;
  v82[5] = v74;
  v82[0] = v69;
  v82[1] = v70;
  sub_100551984((uint64_t)v82);
  if ((BYTE8(v82[0]) & 1) == 0) {
    goto LABEL_12;
  }
  if (*(void *)(a1 + 16))
  {
    uint64_t v32 = swift_allocObject();
    *(void *)(v32 + 16) = a1;
    *(void *)(v32 + 24) = v6;
    *(void *)(v32 + 32) = v16;
    *(unsigned char *)(v32 + 40) = v66 & 1;
    *(void *)(v32 + 48) = a4;
    *(void *)(v32 + 56) = a5;
    *(void *)&long long v71 = sub_1007668B4;
    *((void *)&v71 + 1) = v32;
    *(void *)&long long v69 = _NSConcreteStackBlock;
    *((void *)&v69 + 1) = 1107296256;
    *(void *)&long long v70 = sub_1004B5480;
    *((void *)&v70 + 1) = &unk_1015D39B0;
    uint64_t v33 = _Block_copy(&v69);
    swift_bridgeObjectRetain();
    id v34 = v16;
    swift_retain();
    swift_retain();
    uint64_t v35 = v61;
    static DispatchQoS.unspecified.getter();
    long long v68 = _swiftEmptyArrayStorage;
    sub_100766750((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    unint64_t v36 = v63;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v33);
    (*(void (**)(char *, uint64_t))(v65 + 8))(v36, v11);
    (*(void (**)(char *, uint64_t))(v62 + 8))(v35, v64);
    swift_release();
  }
  else
  {
    os_log_type_t v44 = Logger.logObject.getter();
    os_log_type_t v45 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v44, v45))
    {
      id v46 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v46 = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, v45, "No findMyIds specified for SubscribeAndFetch - not proceeding", v46, 2u);
      swift_slowDealloc();
    }

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v47 = objc_allocWithZone((Class)NSError);
    NSString v48 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v49 = [v47 initWithDomain:v48 code:0 userInfo:0];

    [v16 subscriptionMode];
    id v50 = objc_allocWithZone((Class)SPSecureLocationsSubscriptionResult);
    sub_10001D4B0(0, (unint64_t *)&qword_10163F378);
    Class v51 = Array._bridgeToObjectiveC()().super.isa;
    id v52 = [v50 initWithExpiryTime:v51 locations:15.0];

    id v53 = v49;
    a4(v52, v49);
  }
}

void sub_100730CD0(uint64_t a1, uint64_t a2, char *a3, char a4, void (*a5)(id, uint64_t), uint64_t a6)
{
  uint64_t v224 = a6;
  v223 = a5;
  unint64_t v262 = 0;
  uint64_t v10 = sub_10000588C((uint64_t *)&unk_101649E20);
  __chkstk_darwin(v10 - 8);
  v218 = (char *)&v216 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Endpoint = type metadata accessor for SecureLocationsFetchEndpoint(0);
  uint64_t v12 = __chkstk_darwin(Endpoint);
  uint64_t v14 = (char *)&v216 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12);
  v222 = (void **)((char *)&v216 - v16);
  __chkstk_darwin(v15);
  uint64_t v228 = (uint64_t)&v216 - v17;
  uint64_t v18 = sub_10000588C(&qword_10164A370);
  __chkstk_darwin(v18 - 8);
  uint64_t v233 = (uint64_t)&v216 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for SecureLocation();
  uint64_t v226 = *(void *)(v20 - 8);
  uint64_t v21 = __chkstk_darwin(v20 - 8);
  uint64_t v225 = (uint64_t)&v216 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v229 = (uint64_t)&v216 - v24;
  __chkstk_darwin(v23);
  uint64_t v230 = (uint64_t)&v216 - v25;
  uint64_t v250 = type metadata accessor for String.Encoding();
  uint64_t v26 = *(void *)(v250 - 8);
  __chkstk_darwin(v250);
  v251 = (char *)&v216 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v28 - 8);
  v249 = (char *)&v216 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v253 = type metadata accessor for UUID();
  uint64_t v30 = *(void *)(v253 - 8);
  __chkstk_darwin(v253);
  v235 = (char *)&v216 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v242 = swift_allocObject();
  *(void *)(v242 + 16) = _swiftEmptyDictionarySingleton;
  unsigned __int8 v270 = 0;
  uint64_t v32 = *(void *)(a1 + 16);
  v256 = a3;
  uint64_t v234 = a2;
  uint64_t v227 = a1;
  uint64_t v217 = v32;
  if (v32)
  {
    uint64_t v252 = *(void *)(a2 + 48);
    uint64_t v248 = *(void *)(a2 + 16);
    swift_bridgeObjectRetain();
    swift_beginAccess();
    v247 = (void (**)(char *, uint64_t))(v26 + 8);
    v246 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v30 + 56);
    v240 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48);
    v232 = (void (**)(char *, uint64_t, uint64_t))(v30 + 32);
    v231 = (uint64_t (**)(char *, uint64_t))(v30 + 8);
    v254 = &v269;
    v239 = (char *)&v268 + 4;
    v238 = &v266;
    uint64_t v33 = (unint64_t *)(a1 + 40);
    v261 = _swiftEmptyArrayStorage;
    *(void *)&long long v34 = 136315138;
    long long v243 = v34;
    v236 = (char *)&type metadata for Any + 8;
    *(void *)&long long v34 = 67109634;
    long long v237 = v34;
    *(void *)&long long v34 = 136315394;
    long long v241 = v34;
    int v245 = a4 & 1;
    long long v220 = xmmword_101342130;
    v219 = (char *)&type metadata for () + 8;
    v244 = v14;
    while (1)
    {
      uint64_t v258 = v32;
      uint64_t v36 = *(v33 - 1);
      unint64_t v35 = *v33;
      uint64_t v257 = (uint64_t)v33;
      uint64_t v37 = qword_101637080;
      uint64_t v38 = swift_bridgeObjectRetain();
      if (v37 != -1) {
        uint64_t v38 = swift_once();
      }
      uint64_t v39 = qword_10170EC60;
      __chkstk_darwin(v38);
      *(&v216 - 4) = v39;
      *(&v216 - 3) = v36;
      *(&v216 - 2) = v35;
      swift_retain();
      uint64_t v255 = sub_10000588C(&qword_101644320);
      unint64_t v40 = v262;
      OS_dispatch_queue.sync<A>(execute:)();
      swift_release();
      unint64_t v259 = aBlock;
      unint64_t v41 = v266;
      id v42 = v251;
      static String.Encoding.utf8.getter();
      unint64_t v43 = String.data(using:allowLossyConversion:)();
      unint64_t v45 = v44;
      (*v247)(v42, v250);
      id v46 = &qword_101637000;
      v263 = (void *)v36;
      if (v45 >> 60 == 15)
      {
        uint64_t v47 = (uint64_t)v249;
        (*v246)(v249, 1, 1, v253);
LABEL_10:
        sub_10001DAB4(v47, &qword_101638CF0);
LABEL_11:
        if (qword_101637070 != -1) {
          swift_once();
        }
        uint64_t v49 = type metadata accessor for Logger();
        sub_100010324(v49, (uint64_t)qword_10170EC30);
        swift_bridgeObjectRetain_n();
        id v50 = Logger.logObject.getter();
        os_log_type_t v51 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v50, v51))
        {
          id v52 = (uint8_t *)swift_slowAlloc();
          unint64_t aBlock = swift_slowAlloc();
          *(_DWORD *)id v52 = v243;
          swift_bridgeObjectRetain();
          uint64_t v268 = sub_1008FA0F0((uint64_t)v263, v35, (uint64_t *)&aBlock);
          a3 = v256;
          uint64_t v36 = (uint64_t)v263;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v50, v51, "SubscribeAndFetch: cached location for id: %s- no cached location, moving on", v52, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          uint64_t v53 = swift_bridgeObjectRelease_n();
        }
        goto LABEL_16;
      }
      unint64_t aBlock = v43;
      uint64_t v266 = v45;
      sub_1000362FC();
      uint64_t v47 = (uint64_t)v249;
      DataProtocol.stableUUID.getter();
      sub_100037A24(v43, v45);
      uint64_t v48 = v253;
      (*v246)((char *)v47, 0, 1, v253);
      if ((*v240)(v47, 1, v48) == 1) {
        goto LABEL_10;
      }
      uint64_t v59 = (uint64_t)v235;
      (*v232)(v235, v47, v48);
      swift_retain();
      uint64_t v60 = v233;
      sub_100AE475C(v59, v233);
      swift_release();
      uint64_t v61 = type metadata accessor for SecureLocationsCachedPayload();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 48))(v60, 1, v61) == 1)
      {
        sub_10001DAB4(v60, &qword_10164A370);
        (*v231)((char *)v59, v48);
        uint64_t v36 = (uint64_t)v263;
        goto LABEL_11;
      }
      uint64_t v91 = v60 + *(int *)(v61 + 20);
      uint64_t v92 = v229;
      sub_100768C34(v91, v229, (uint64_t (*)(void))type metadata accessor for SecureLocation);
      sub_100768C9C(v60, (uint64_t (*)(void))type metadata accessor for SecureLocationsCachedPayload);
      uint64_t v93 = v230;
      sub_100767F00(v92, v230, (uint64_t (*)(void))type metadata accessor for SecureLocation);
      swift_retain();
      char v94 = sub_100D0C2A4(v93);
      swift_release();
      if (v94)
      {
        uint64_t v95 = *(void *)(v234 + 40);
        sub_10000588C(&qword_10163AA80);
        unint64_t v96 = (*(unsigned __int8 *)(v226 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v226 + 80);
        uint64_t v97 = swift_allocObject();
        *(_OWORD *)(v97 + 16) = v220;
        sub_100768C34(v93, v97 + v96, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        uint64_t v98 = type metadata accessor for Transaction();
        __chkstk_darwin(v98);
        *(&v216 - 4) = v95;
        *(&v216 - 3) = (uint64_t)SharingCircleWildAdvertisementKey.init(key:);
        *(&v216 - 2) = 0;
        *(&v216 - 1) = v97;
        static Transaction.named<A>(_:with:)();
        swift_bridgeObjectRelease();
        if (qword_101637070 != -1) {
          swift_once();
        }
        uint64_t v99 = type metadata accessor for Logger();
        sub_100010324(v99, (uint64_t)qword_10170EC30);
        uint64_t v100 = v225;
        sub_100768C34(v93, v225, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        swift_bridgeObjectRetain_n();
        char v101 = Logger.logObject.getter();
        os_log_type_t v102 = static os_log_type_t.default.getter();
        int v103 = v102;
        if (!os_log_type_enabled(v101, v102))
        {

          sub_100768C9C(v100, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          swift_bridgeObjectRelease_n();
          uint64_t v114 = v93;
LABEL_58:
          sub_100768C9C(v114, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          uint64_t v53 = (*v231)(v235, v253);
          uint64_t v36 = (uint64_t)v263;
          goto LABEL_16;
        }
        uint64_t v104 = swift_slowAlloc();
        unint64_t v262 = swift_slowAlloc();
        unint64_t aBlock = v262;
        *(_DWORD *)uint64_t v104 = v241;
        LODWORD(v260) = v103;
        swift_bridgeObjectRetain();
        uint64_t v105 = (uint64_t)v263;
        uint64_t v268 = sub_1008FA0F0((uint64_t)v263, v35, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v104 + 12) = 2080;
        uint64_t v106 = sub_100E8F520();
        uint64_t v268 = sub_1008FA0F0(v106, v107, (uint64_t *)&aBlock);
        uint64_t v36 = v105;
        a3 = v256;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100768C9C(v100, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        _os_log_impl((void *)&_mh_execute_header, v101, (os_log_type_t)v260, "SubscribeAndFetch: cached location for id: %s, sending before subscribe %s", (uint8_t *)v104, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        sub_100768C9C(v230, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        uint64_t v53 = (*v231)(v235, v253);
        id v46 = &qword_101637000;
      }
      else
      {
        if (qword_101637070 != -1) {
          swift_once();
        }
        uint64_t v108 = type metadata accessor for Logger();
        sub_100010324(v108, (uint64_t)qword_10170EC30);
        swift_bridgeObjectRetain_n();
        uint64_t v109 = Logger.logObject.getter();
        os_log_type_t v110 = static os_log_type_t.default.getter();
        if (!os_log_type_enabled(v109, v110))
        {
          swift_bridgeObjectRelease_n();

          uint64_t v114 = v230;
          goto LABEL_58;
        }
        uint64_t v111 = (uint8_t *)swift_slowAlloc();
        unint64_t v262 = swift_slowAlloc();
        unint64_t aBlock = v262;
        *(_DWORD *)uint64_t v111 = v243;
        v260 = v111 + 4;
        swift_bridgeObjectRetain();
        uint64_t v112 = a3;
        uint64_t v113 = (uint64_t)v263;
        uint64_t v268 = sub_1008FA0F0((uint64_t)v263, v35, (uint64_t *)&aBlock);
        uint64_t v36 = v113;
        a3 = v112;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v109, v110, "SubscribeAndFetch: cached location for id: %s- got cached location but not within the cache validity timeframe, moving on", v111, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        sub_100768C9C(v230, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        uint64_t v53 = (*v231)(v235, v253);
      }
LABEL_16:
      __chkstk_darwin(v53);
      *(&v216 - 4) = v54;
      *(&v216 - 3) = v36;
      *(&v216 - 2) = v35;
      *(&v216 - 1) = (uint64_t)a3;
      OS_dispatch_queue.sync<A>(execute:)();
      unint64_t v262 = v40;
      unsigned __int8 v270 = aBlock;
      if ((aBlock & 1) == 0)
      {
        if (v46[14] != -1) {
          swift_once();
        }
        uint64_t v55 = type metadata accessor for Logger();
        sub_100010324(v55, (uint64_t)qword_10170EC30);
        swift_bridgeObjectRetain_n();
        uint64_t v56 = Logger.logObject.getter();
        os_log_type_t v57 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v56, v57))
        {
          uint64_t v58 = (uint8_t *)swift_slowAlloc();
          unint64_t aBlock = swift_slowAlloc();
          *(_DWORD *)uint64_t v58 = v243;
          swift_bridgeObjectRetain();
          uint64_t v268 = sub_1008FA0F0((uint64_t)v263, v35, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v56, v57, "SubscribeAndFetch - shouldProceed false for %s", v58, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
      }
      if (v46[14] != -1) {
        swift_once();
      }
      uint64_t v62 = type metadata accessor for Logger();
      uint64_t v63 = sub_100010324(v62, (uint64_t)qword_10170EC30);
      uint64_t v64 = v41;
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain_n();
      v260 = (uint8_t *)v63;
      uint64_t v65 = Logger.logObject.getter();
      os_log_type_t v66 = static os_log_type_t.debug.getter();
      if (os_log_type_enabled(v65, v66))
      {
        uint64_t v67 = swift_slowAlloc();
        unint64_t aBlock = swift_slowAlloc();
        *(_DWORD *)uint64_t v67 = v237;
        LODWORD(v268) = v270;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v67 + 8) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v268 = sub_1008FA0F0((uint64_t)v263, v35, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v67 + 18) = 2080;
        if (v41) {
          uint64_t v68 = v259;
        }
        else {
          uint64_t v68 = 7104878;
        }
        if (v41) {
          unint64_t v69 = v41;
        }
        else {
          unint64_t v69 = 0xE300000000000000;
        }
        swift_bridgeObjectRetain();
        uint64_t v268 = sub_1008FA0F0(v68, v69, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        uint64_t v64 = v41;
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v65, v66, "SubscribeAndFetch - shouldProceed %{BOOL}d for %s %s", (uint8_t *)v67, 0x1Cu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
      }
      swift_bridgeObjectRetain_n();
      swift_bridgeObjectRetain();
      long long v70 = Logger.logObject.getter();
      os_log_type_t v71 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v70, v71))
      {
        uint64_t v72 = swift_slowAlloc();
        uint64_t v268 = swift_slowAlloc();
        *(_DWORD *)uint64_t v72 = v241;
        swift_bridgeObjectRetain();
        uint64_t v73 = (uint64_t)v263;
        unint64_t aBlock = sub_1008FA0F0((uint64_t)v263, v35, &v268);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        *(_WORD *)(v72 + 12) = 2080;
        unint64_t aBlock = v259;
        uint64_t v266 = v64;
        swift_bridgeObjectRetain();
        uint64_t v74 = String.init<A>(describing:)();
        unint64_t aBlock = sub_1008FA0F0(v74, v75, &v268);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v70, v71, "SubscribeAndFetch request data for %s %s", (uint8_t *)v72, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease_n();
        uint64_t v73 = (uint64_t)v263;
      }
      uint64_t v76 = v73;
      a3 = v256;
      sub_100600510(v76, v35, v256, v245, (uint64_t)v271);
      sub_10001D608((uint64_t)v271, (uint64_t)v272, &qword_10164D0E8);
      uint64_t v77 = v273;
      if (!v273) {
        goto LABEL_3;
      }
      uint64_t v78 = v272[0];
      uint64_t v79 = v272[1];
      char v80 = v274;
      swift_bridgeObjectRetain();
      id v81 = [a3 subscriptionMode];
      if (swift_isUniquelyReferenced_nonNull_native()) {
        BOOL v82 = v261;
      }
      else {
        BOOL v82 = sub_100A71568(0, v261[2] + 1, 1, v261);
      }
      unint64_t v84 = v82[2];
      unint64_t v83 = v82[3];
      if (v84 >= v83 >> 1) {
        BOOL v82 = sub_100A71568((void *)(v83 > 1), v84 + 1, 1, v82);
      }
      v82[2] = v84 + 1;
      v261 = v82;
      unint64_t v85 = &v82[5 * v84];
      v85[4] = v78;
      v85[5] = v79;
      v85[6] = v77;
      v85[7] = v81;
      *((unsigned char *)v85 + 64) = v80;
      uint64_t v86 = *(void *)(v77 + 16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      uint64_t v87 = v242;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t aBlock = *(void *)(v87 + 16);
      *(void *)(v87 + 16) = 0x8000000000000000;
      uint64_t v89 = (uint64_t)v263;
      sub_100170418(v86 == 0, (uint64_t)v263, v35, isUniquelyReferenced_nonNull_native);
      *(void *)(v87 + 16) = aBlock;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v86)
      {
LABEL_3:
        uint64_t v14 = v244;
      }
      else
      {
        id v90 = [a3 subscriptionMode];
        uint64_t v14 = v244;
        if (v90 == (id)4)
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v173 = Logger.logObject.getter();
          os_log_type_t v174 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v173, v174))
          {
            v175 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v175 = 0;
            _os_log_impl((void *)&_mh_execute_header, v173, v174, "SubscribeAndFetch - failed to get own keys for ownerProactive mode - not proceeding", v175, 2u);
            swift_slowDealloc();
          }

          [a3 subscriptionMode];
          id v176 = objc_allocWithZone((Class)SPSecureLocationsSubscriptionResult);
          sub_10001D4B0(0, (unint64_t *)&qword_10163F378);
          Class isa = Array._bridgeToObjectiveC()().super.isa;
          id v178 = [v176 initWithExpiryTime:isa locations:15.0];

          type metadata accessor for SecureLocationsError(0);
          uint64_t v268 = 0;
          sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
          sub_100766750(&qword_10163F370, type metadata accessor for SecureLocationsError);
          _BridgedStoredNSError.init(_:userInfo:)();
          v179 = (void *)aBlock;
          v223(v178, aBlock);
          swift_release();

          return;
        }
        if (v270 == 1) {
          sub_100811554(v89, v35, a3);
        }
      }
      uint64_t v33 = (unint64_t *)(v257 + 16);
      swift_bridgeObjectRelease();
      uint64_t v32 = v258 - 1;
      if (v258 == 1)
      {
        swift_bridgeObjectRelease();
        goto LABEL_62;
      }
    }
  }
  v261 = _swiftEmptyArrayStorage;
LABEL_62:
  swift_beginAccess();
  unint64_t v115 = v222;
  if ((v270 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v125 = type metadata accessor for Logger();
    sub_100010324(v125, (uint64_t)qword_10170EC30);
    v126 = Logger.logObject.getter();
    os_log_type_t v127 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v126, v127))
    {
      uint64_t v128 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v128 = 0;
      _os_log_impl((void *)&_mh_execute_header, v126, v127, "SubscribeAndFetch - not proceeding with subscribe", v128, 2u);
      swift_slowDealloc();
    }

    sub_100737020(v227, 0, 0xF000000000000000, 0, a3, v223, v224);
    goto LABEL_88;
  }
  uint64_t v116 = type metadata accessor for FMNAccountType();
  uint64_t isEscapingClosureAtFileLocation = v228;
  (*(void (**)(void))(*(void *)(v116 - 8) + 104))();
  sub_1004C7928(isEscapingClosureAtFileLocation + *(int *)(Endpoint + 20));
  if (qword_101637070 != -1) {
    goto LABEL_113;
  }
  while (1)
  {
    uint64_t v118 = type metadata accessor for Logger();
    uint64_t v119 = sub_100010324(v118, (uint64_t)qword_10170EC30);
    sub_100768C34(isEscapingClosureAtFileLocation, (uint64_t)v115, type metadata accessor for SecureLocationsFetchEndpoint);
    uint64_t v120 = Logger.logObject.getter();
    os_log_type_t v121 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v120, v121))
    {
      uint64_t v122 = (uint8_t *)swift_slowAlloc();
      unint64_t aBlock = swift_slowAlloc();
      v263 = (void *)v119;
      *(_DWORD *)uint64_t v122 = 136315138;
      sub_100768C34((uint64_t)v115, (uint64_t)v14, type metadata accessor for SecureLocationsFetchEndpoint);
      uint64_t v123 = String.init<A>(describing:)();
      uint64_t v264 = sub_1008FA0F0(v123, v124, (uint64_t *)&aBlock);
      uint64_t v119 = (uint64_t)v263;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100768C9C((uint64_t)v115, type metadata accessor for SecureLocationsFetchEndpoint);
      _os_log_impl((void *)&_mh_execute_header, v120, v121, "SubscribeAndFetch endpoint %s", v122, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100768C9C((uint64_t)v115, type metadata accessor for SecureLocationsFetchEndpoint);
    }

    type metadata accessor for FindMyAppURLSessionFactory(0);
    swift_allocObject();
    uint64_t v129 = type metadata accessor for FMNMockingPreferences();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v129 - 8) + 56))(v218, 1, 1, v129);
    uint64_t v130 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)();
    type metadata accessor for ServerInteractionController(0);
    uint64_t v131 = swift_allocObject();
    sub_100768C34(v228, (uint64_t)v14, type metadata accessor for SecureLocationsFetchEndpoint);
    swift_retain();
    uint64_t v132 = sub_1004A5870((uint64_t)v14, v130, v131);
    if (!v261[2])
    {
      swift_bridgeObjectRelease();
      v162 = Logger.logObject.getter();
      os_log_type_t v163 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v162, v163))
      {
        v164 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v164 = 0;
        v165 = "No SubscribeAndFetch request data generated. Not sending request";
        goto LABEL_85;
      }
LABEL_86:

      static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v166 = objc_allocWithZone((Class)NSError);
      NSString v167 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v168 = [v166 initWithDomain:v167 code:0 userInfo:0];

      [a3 subscriptionMode];
      id v169 = objc_allocWithZone((Class)SPSecureLocationsSubscriptionResult);
      sub_10001D4B0(0, (unint64_t *)&qword_10163F378);
      Class v170 = Array._bridgeToObjectiveC()().super.isa;
      id v171 = [v169 initWithExpiryTime:v170 locations:15.0];

      id v172 = v168;
      v223(v171, (uint64_t)v168);
      swift_release();

      swift_release();
LABEL_87:
      sub_100768C9C(v228, type metadata accessor for SecureLocationsFetchEndpoint);
      goto LABEL_88;
    }
    id v133 = [self currentDevice];
    if (!v133
      || (v134 = v133,
          id v135 = [v133 uniqueDeviceIdentifier],
          v134,
          !v135))
    {
      swift_bridgeObjectRelease();
      v162 = Logger.logObject.getter();
      os_log_type_t v163 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v162, v163))
      {
        v164 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v164 = 0;
        v165 = "Unable to get device identifier for server SubscribeAndFetch";
LABEL_85:
        _os_log_impl((void *)&_mh_execute_header, v162, v163, v165, v164, 2u);
        swift_slowDealloc();
        goto LABEL_86;
      }
      goto LABEL_86;
    }
    v263 = (void *)v119;
    uint64_t v136 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v138 = v137;

    uint64_t v139 = v234;
    sub_10000588C(&qword_101644320);
    OS_dispatch_queue.sync<A>(execute:)();
    uint64_t v140 = v266;
    if (!v266)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v180 = Logger.logObject.getter();
      os_log_type_t v181 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v180, v181))
      {
        v182 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v182 = 0;
        _os_log_impl((void *)&_mh_execute_header, v180, v181, "No APS token. Not proceeding with SubscribeAndFetch request", v182, 2u);
        swift_slowDealloc();
      }
      swift_release();
      swift_release();

      goto LABEL_87;
    }
    v260 = (uint8_t *)v132;
    unint64_t v259 = v130;
    uint64_t v141 = v136;
    unint64_t v142 = aBlock;
    id v143 = [a3 clientApp];
    uint64_t v144 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v146 = v145;

    uint64_t v147 = swift_allocObject();
    *(void *)(v147 + 16) = v261;
    *(void *)(v147 + 24) = v142;
    *(void *)(v147 + 32) = v140;
    *(void *)(v147 + 40) = v141;
    *(void *)(v147 + 48) = v138;
    *(void *)(v147 + 56) = v144;
    *(void *)(v147 + 64) = v146;
    *(void *)(v147 + 72) = _swiftEmptyDictionarySingleton;
    *(_OWORD *)(v147 + 80) = 0u;
    *(_OWORD *)(v147 + 96) = 0u;
    *(_OWORD *)(v147 + 112) = 0u;
    *(unsigned char *)(v147 + 128) = 0;
    *(_DWORD *)(v147 + 129) = *(_DWORD *)v275;
    *(_DWORD *)(v147 + 132) = *(_DWORD *)&v275[3];
    *(void *)(v147 + 136) = _swiftEmptyArrayStorage;
    *(void *)(v147 + 144) = v139;
    swift_bridgeObjectRetain();
    swift_retain();
    sub_10000588C(&qword_10164D100);
    unsafeFromAsyncTask<A>(_:)();
    swift_release();
    uint64_t v148 = aBlock;
    if (!aBlock)
    {
      swift_bridgeObjectRelease();
      v162 = Logger.logObject.getter();
      uint64_t v183 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v162, (os_log_type_t)v183))
      {
        v184 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v184 = 0;
        _os_log_impl((void *)&_mh_execute_header, v162, (os_log_type_t)v183, "Failed to create request for server SubscribeAndFetch", v184, 2u);
        swift_slowDealloc();
      }
      goto LABEL_86;
    }
    uint64_t v149 = v266;
    unint64_t v150 = v267[0];
    swift_bridgeObjectRetain();
    sub_1000361E0(v149, v150);
    v151 = Logger.logObject.getter();
    os_log_type_t v152 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v151, v152))
    {
      v153 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v153 = 0;
      _os_log_impl((void *)&_mh_execute_header, v151, v152, "Sending SubscribeAndFetch server request", v153, 2u);
      swift_slowDealloc();
    }

    sub_10076813C(v148, v149, v150);
    swift_bridgeObjectRetain();
    sub_1000361E0(v149, v150);
    v154 = Logger.logObject.getter();
    os_log_type_t v155 = static os_log_type_t.debug.getter();
    BOOL v156 = os_log_type_enabled(v154, v155);
    uint64_t v258 = v149;
    unint64_t v262 = v150;
    if (v156)
    {
      v157 = (uint8_t *)swift_slowAlloc();
      unint64_t aBlock = swift_slowAlloc();
      *(_DWORD *)v157 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v158 = Dictionary.description.getter();
      unint64_t v160 = v159;
      swift_bridgeObjectRelease();
      uint64_t v161 = v158;
      uint64_t v149 = v258;
      uint64_t v264 = sub_1008FA0F0(v161, v160, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1001D7860(v148, v149, v262);
      sub_1001D7860(v148, v149, v262);
      _os_log_impl((void *)&_mh_execute_header, v154, v155, "SubscribeAndFetch request headers %s", v157, 0xCu);
      swift_arrayDestroy();
      unint64_t v150 = v262;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1001D7860(v148, v149, v150);
      sub_1001D7860(v148, v149, v150);
    }

    uint64_t v185 = v234;
    swift_bridgeObjectRetain();
    sub_1000361E0(v149, v150);
    swift_bridgeObjectRetain();
    sub_1000361E0(v149, v150);
    v186 = Logger.logObject.getter();
    os_log_type_t v187 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v186, v187))
    {
      v188 = (uint8_t *)swift_slowAlloc();
      unint64_t aBlock = swift_slowAlloc();
      *(_DWORD *)v188 = 136315138;
      static String.Encoding.utf8.getter();
      uint64_t v189 = String.init(data:encoding:)();
      if (v190)
      {
        unint64_t v191 = v190;
      }
      else
      {
        uint64_t v189 = 7104878;
        unint64_t v191 = 0xE300000000000000;
      }
      uint64_t v264 = sub_1008FA0F0(v189, v191, (uint64_t *)&aBlock);
      uint64_t v192 = v258;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1001D7860(v148, v192, v150);
      uint64_t v193 = v192;
      uint64_t v185 = v234;
      sub_1001D7860(v148, v193, v150);
      _os_log_impl((void *)&_mh_execute_header, v186, v187, "SubscribeAndFetch request body %s", v188, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1001D7860(v148, v149, v150);
      sub_1001D7860(v148, v149, v150);
    }

    v194 = v260;
    uint64_t v195 = v217;
    uint64_t v257 = v148;
    if (!v217) {
      break;
    }
    uint64_t v196 = *(void *)(v185 + 48);
    v263 = v267;
    unint64_t v115 = (void **)(swift_bridgeObjectRetain() + 40);
    uint64_t v14 = v256;
    while (1)
    {
      uint64_t v197 = (uint64_t)*(v115 - 1);
      a3 = (char *)*v115;
      v198 = *(NSObject **)(v196 + 16);
      uint64_t v199 = swift_allocObject();
      *(void *)(v199 + 16) = v196;
      *(void *)(v199 + 24) = v197;
      *(void *)(v199 + 32) = a3;
      *(void *)(v199 + 40) = v14;
      *(unsigned char *)(v199 + 48) = 0;
      uint64_t v200 = swift_allocObject();
      *(void *)(v200 + 16) = sub_100766A88;
      *(void *)(v200 + 24) = v199;
      v267[2] = sub_1003B7AE0;
      v267[3] = v200;
      unint64_t aBlock = (unint64_t)_NSConcreteStackBlock;
      uint64_t v266 = 1107296256;
      v267[0] = sub_1000A70B0;
      v267[1] = &unk_1015D2948;
      v201 = _Block_copy(&aBlock);
      swift_bridgeObjectRetain_n();
      v202 = v14;
      swift_retain();
      swift_retain();
      swift_release();
      dispatch_sync(v198, v201);
      _Block_release(v201);
      uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      if (isEscapingClosureAtFileLocation) {
        break;
      }
      v115 += 2;
      if (!--v195)
      {
        swift_bridgeObjectRelease();
        uint64_t v203 = v227;
        uint64_t v185 = v234;
        v194 = v260;
        uint64_t v148 = v257;
        goto LABEL_111;
      }
    }
    __break(1u);
LABEL_113:
    swift_once();
  }
  uint64_t v203 = v227;
LABEL_111:
  swift_bridgeObjectRelease();
  uint64_t v204 = v258;
  unint64_t v205 = v262;
  sub_10076813C(v148, v258, v262);
  sub_1004AB294(v148, v204, v205, 0, v194);
  sub_1001D7860(v148, v204, v205);
  v206 = (void *)swift_allocObject();
  v206[2] = v185;
  v206[3] = v203;
  v207 = v256;
  uint64_t v208 = v185;
  uint64_t v209 = v242;
  v206[4] = v256;
  v206[5] = v209;
  v210 = v223;
  uint64_t v211 = v224;
  v206[6] = v223;
  v206[7] = v211;
  swift_bridgeObjectRetain();
  swift_retain();
  id v212 = v207;
  swift_retain();
  swift_retain();
  Future.addSuccess(block:)();
  swift_release();
  swift_release();
  v213 = (void *)swift_allocObject();
  v213[2] = v208;
  v213[3] = v203;
  v213[4] = v212;
  v213[5] = v210;
  v213[6] = v211;
  swift_bridgeObjectRetain();
  swift_retain();
  id v214 = v212;
  swift_retain();
  Future.addFailure(block:)();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  uint64_t v215 = v257;
  sub_1001D7860(v257, v204, v205);
  sub_1001D7860(v215, v204, v205);
  swift_release();
  sub_100768C9C(v228, type metadata accessor for SecureLocationsFetchEndpoint);
LABEL_88:
  swift_release();
}

uint64_t sub_100733874(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  return _swift_task_switch(sub_100733898, 0, 0);
}

uint64_t sub_100733898()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = *(void *)(v0[5] + 320);
  swift_bridgeObjectRetain();
  sub_100766DF0(v1);
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_101647430 + dword_101647430);
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  v0[6] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10073396C;
  uint64_t v5 = v0[3];
  uint64_t v4 = v0[4];
  return v7(v5, v4, v2);
}

uint64_t sub_10073396C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = (void *)*v4;
  swift_task_dealloc();
  if (v3)
  {
    swift_errorRelease();
    uint64_t v9 = sub_100733AD8;
  }
  else
  {
    v8[7] = a3;
    v8[8] = a2;
    v8[9] = a1;
    uint64_t v9 = sub_100733AAC;
  }
  return _swift_task_switch(v9, 0, 0);
}

uint64_t sub_100733AAC()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(int8x16_t **)(v0 + 16);
  *uint64_t v2 = vextq_s8(*(int8x16_t *)(v0 + 64), *(int8x16_t *)(v0 + 64), 8uLL);
  v2[1].i64[0] = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100733AD8()
{
  uint64_t v1 = *(void **)(v0 + 16);
  *uint64_t v1 = 0;
  v1[1] = 0;
  v1[2] = 0;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100733AF8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v37 = a6;
  uint64_t v38 = a7;
  long long v34 = a4;
  uint64_t v35 = a5;
  uint64_t v32 = a2;
  uint64_t v33 = a3;
  uint64_t v41 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v44 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  unint64_t v40 = (char *)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for DispatchQoS();
  uint64_t v42 = *(void *)(v10 - 8);
  uint64_t v43 = v10;
  __chkstk_darwin(v10);
  uint64_t v36 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for FMNServerInteractionController.FMNResponseFields();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = *(void *)(a2 + 296);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1, v12);
  unint64_t v16 = (*(unsigned __int8 *)(v13 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v17 = (v14 + v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = (v17 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = (v18 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = (v19 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v21 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v13 + 32))(v21 + v16, v15, v12);
  uint64_t v22 = v34;
  *(void *)(v21 + v17) = v33;
  *(void *)(v21 + v18) = v22;
  *(void *)(v21 + v19) = v32;
  *(void *)(v21 + v20) = v35;
  uint64_t v23 = (void *)(v21 + ((v20 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v24 = v38;
  *uint64_t v23 = v37;
  v23[1] = v24;
  aBlock[4] = sub_100766D00;
  aBlock[5] = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015D2AB0;
  uint64_t v25 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  id v26 = v22;
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v27 = v36;
  static DispatchQoS.unspecified.getter();
  unint64_t v45 = _swiftEmptyArrayStorage;
  sub_100766750((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v29 = v40;
  uint64_t v28 = v41;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v25);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v29, v28);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v27, v43);
  return swift_release();
}

void sub_100733F08(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, void (*a6)(id, uint64_t), uint64_t a7)
{
  uint64_t v91 = a6;
  uint64_t v92 = a7;
  uint64_t v89 = a5;
  uint64_t v93 = a4;
  uint64_t v94 = a2;
  uint64_t v97 = a3;
  uint64_t v8 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v8 - 8);
  unint64_t v96 = (uint64_t (**)(uint64_t))&v86[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = type metadata accessor for FMNServerInteractionController.FMNResponseFields();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = &v86[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v15 = __chkstk_darwin(v12);
  unint64_t v17 = &v86[-v16];
  __chkstk_darwin(v15);
  unint64_t v19 = &v86[-v18];
  uint64_t v20 = FMNServerInteractionController.FMNResponseFields.statusCode.getter();
  uint64_t v21 = *(char **)(v11 + 16);
  uint64_t v95 = a1;
  ((void (*)(unsigned char *, uint64_t, uint64_t))v21)(v19, a1, v10);
  if (v20 == 200)
  {
    uint64_t v22 = *(void (**)(unsigned char *, uint64_t))(v11 + 8);
    v22(v19, v10);
    goto LABEL_4;
  }
  uint64_t v23 = FMNServerInteractionController.FMNResponseFields.statusCode.getter();
  uint64_t v22 = *(void (**)(unsigned char *, uint64_t))(v11 + 8);
  v22(v19, v10);
  if (v23 == 206)
  {
LABEL_4:
    id v90 = v22;
    uint64_t v24 = v94;
    if (qword_101637070 != -1) {
      goto LABEL_37;
    }
    while (1)
    {
      uint64_t v25 = type metadata accessor for Logger();
      id v26 = (void *)sub_100010324(v25, (uint64_t)qword_10170EC30);
      ((void (*)(unsigned char *, uint64_t, uint64_t))v21)(v17, v95, v10);
      swift_bridgeObjectRetain_n();
      uint64_t v27 = v97;
      uint64_t v97 = v26;
      uint64_t v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.default.getter();
      int v30 = v29;
      if (os_log_type_enabled(v28, v29))
      {
        uint64_t v31 = swift_slowAlloc();
        uint64_t v88 = swift_slowAlloc();
        uint64_t aBlock = v88;
        *(_DWORD *)uint64_t v31 = 134218754;
        int v87 = v30;
        uint64_t v32 = FMNServerInteractionController.FMNResponseFields.statusCode.getter();
        v90(v17, v10);
        uint64_t v98 = v32;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v31 + 12) = 2048;
        uint64_t v98 = *(void *)(v24 + 16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v31 + 22) = 2080;
        id v33 = [v27 clientApp];
        uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v36 = v35;

        uint64_t v98 = sub_1008FA0F0(v34, v36, &aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        uint64_t v24 = v94;
        swift_bridgeObjectRelease();
        *(_WORD *)(v31 + 32) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v37 = Array.description.getter();
        unint64_t v39 = v38;
        swift_bridgeObjectRelease();
        uint64_t v98 = sub_1008FA0F0(v37, v39, &aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v28, (os_log_type_t)v87, "SubscribeAndFetch received status %ld for %ld IDs for clientApp %s ids %s. Now decoding...", (uint8_t *)v31, 0x2Au);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        v90(v17, v10);

        swift_bridgeObjectRelease_n();
      }
      uint64_t v40 = FMNServerInteractionController.FMNResponseFields.data.getter();
      unint64_t v42 = v41;
      static String.Encoding.utf8.getter();
      uint64_t v43 = String.init(data:encoding:)();
      unint64_t v45 = v44;
      sub_10001CFB8(v40, v42);
      if (v45)
      {
        swift_bridgeObjectRetain();
        id v46 = Logger.logObject.getter();
        os_log_type_t v47 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v46, v47))
        {
          uint64_t v48 = (uint8_t *)swift_slowAlloc();
          uint64_t aBlock = swift_slowAlloc();
          *(_DWORD *)uint64_t v48 = 136315138;
          swift_bridgeObjectRetain();
          uint64_t v98 = sub_1008FA0F0(v43, v45, &aBlock);
          uint64_t v24 = v94;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v46, v47, "Received responseString %s", v48, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
      }
      if (![v27 subscriptionMode])
      {
        id v59 = [v27 clientApp];
        uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v62 = v61;

        if (v60 != 0xD000000000000015 || v62 != 0x8000000101402C00)
        {
          char v63 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          if (v63) {
            goto LABEL_23;
          }
          uint64_t v64 = (uint64_t *)(v89 + 16);
          swift_beginAccess();
          uint64_t v65 = *v64;
          swift_bridgeObjectRetain();
          sub_10073A96C(v24, v65);
        }
        swift_bridgeObjectRelease();
      }
LABEL_23:
      uint64_t v21 = *(char **)(v24 + 16);
      if (!v21)
      {
LABEL_28:
        uint64_t v73 = FMNServerInteractionController.FMNResponseFields.data.getter();
        unint64_t v75 = v74;
        sub_100737020(v24, v73, v74, 0, v27, v91, v92);
        sub_10001CFB8(v73, v75);
        return;
      }
      uint64_t v10 = *(void *)(v93 + 48);
      unint64_t v96 = &v101;
      uint64_t v97 = v27;
      swift_bridgeObjectRetain();
      os_log_type_t v66 = (uint64_t *)(v24 + 40);
      uint64_t v67 = v97;
      while (1)
      {
        uint64_t v68 = *(v66 - 1);
        uint64_t v69 = *v66;
        long long v70 = *(NSObject **)(v10 + 16);
        unint64_t v17 = (unsigned char *)swift_allocObject();
        *((void *)v17 + 2) = v10;
        *((void *)v17 + 3) = v68;
        *((void *)v17 + 4) = v69;
        *((void *)v17 + 5) = v67;
        v17[48] = 1;
        uint64_t v24 = swift_allocObject();
        *(void *)(v24 + 16) = sub_100766A88;
        *(void *)(v24 + 24) = v17;
        int v103 = sub_1003B7AE0;
        uint64_t v104 = v24;
        uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
        uint64_t v100 = 1107296256;
        char v101 = sub_1000A70B0;
        os_log_type_t v102 = &unk_1015D2BA0;
        os_log_type_t v71 = _Block_copy(&aBlock);
        swift_bridgeObjectRetain_n();
        id v72 = v67;
        swift_retain();
        swift_retain();
        swift_release();
        dispatch_sync(v70, v71);
        _Block_release(v71);
        LOBYTE(v68) = swift_isEscapingClosureAtFileLocation();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        if (v68) {
          break;
        }
        v66 += 2;
        if (!--v21)
        {
          uint64_t v24 = v94;
          swift_bridgeObjectRelease();
          uint64_t v27 = v97;
          goto LABEL_28;
        }
      }
      __break(1u);
LABEL_36:
      __break(1u);
LABEL_37:
      swift_once();
    }
  }
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v49 = type metadata accessor for Logger();
  sub_100010324(v49, (uint64_t)qword_10170EC30);
  ((void (*)(unsigned char *, uint64_t, uint64_t))v21)(v14, v95, v10);
  uint64_t v50 = v94;
  swift_bridgeObjectRetain_n();
  os_log_type_t v51 = Logger.logObject.getter();
  os_log_type_t v52 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v51, v52))
  {
    uint64_t v53 = swift_slowAlloc();
    unint64_t v96 = (uint64_t (**)(uint64_t))swift_slowAlloc();
    uint64_t aBlock = (uint64_t)v96;
    *(_DWORD *)uint64_t v53 = 134218498;
    uint64_t v54 = FMNServerInteractionController.FMNResponseFields.statusCode.getter();
    v22(v14, v10);
    uint64_t v98 = v54;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v53 + 12) = 2048;
    uint64_t v98 = *(void *)(v50 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v53 + 22) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v55 = Array.description.getter();
    unint64_t v57 = v56;
    swift_bridgeObjectRelease();
    uint64_t v98 = sub_1008FA0F0(v55, v57, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v51, v52, "Error during SubscribeAndFetch %ld. %ld IDs. ForIds %s", (uint8_t *)v53, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v58 = *(void *)(v50 + 16);
    if (!v58) {
      goto LABEL_34;
    }
LABEL_30:
    uint64_t v10 = *(void *)(v93 + 48);
    unint64_t v96 = &v101;
    swift_bridgeObjectRetain();
    uint64_t v21 = (char *)(v50 + 40);
    uint64_t v76 = v97;
    do
    {
      uint64_t v77 = *((void *)v21 - 1);
      uint64_t v78 = *(void *)v21;
      uint64_t v79 = *(NSObject **)(v10 + 16);
      unint64_t v17 = (unsigned char *)swift_allocObject();
      *((void *)v17 + 2) = v10;
      *((void *)v17 + 3) = v77;
      *((void *)v17 + 4) = v78;
      *((void *)v17 + 5) = v76;
      v17[48] = 2;
      uint64_t v24 = swift_allocObject();
      *(void *)(v24 + 16) = sub_100766A88;
      *(void *)(v24 + 24) = v17;
      int v103 = sub_1003B7AE0;
      uint64_t v104 = v24;
      uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
      uint64_t v100 = 1107296256;
      char v101 = sub_1000A70B0;
      os_log_type_t v102 = &unk_1015D2B28;
      char v80 = _Block_copy(&aBlock);
      swift_bridgeObjectRetain_n();
      id v81 = v76;
      swift_retain();
      swift_retain();
      swift_release();
      dispatch_sync(v79, v80);
      _Block_release(v80);
      LOBYTE(v77) = swift_isEscapingClosureAtFileLocation();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      if (v77) {
        goto LABEL_36;
      }
      v21 += 16;
      --v58;
    }
    while (v58);
    uint64_t v50 = v94;
    swift_bridgeObjectRelease();
    goto LABEL_34;
  }
  v22(v14, v10);

  swift_bridgeObjectRelease_n();
  uint64_t v58 = *(void *)(v50 + 16);
  if (v58) {
    goto LABEL_30;
  }
LABEL_34:
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v82 = objc_allocWithZone((Class)NSError);
  NSString v83 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v84 = [v82 initWithDomain:v83 code:0 userInfo:0];

  id v85 = v84;
  sub_100737020(v50, 0, 0xF000000000000000, (uint64_t)v84, v97, v91, v92);
}

uint64_t sub_100734C0C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v24 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for DispatchQoS();
  uint64_t v15 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  unint64_t v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = *(void *)(a2 + 296);
  uint64_t v18 = (void *)swift_allocObject();
  v18[2] = a1;
  v18[3] = a3;
  v18[4] = a2;
  v18[5] = a4;
  v18[6] = a5;
  v18[7] = a6;
  aBlock[4] = sub_100766BE0;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015D29E8;
  unint64_t v19 = _Block_copy(aBlock);
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  id v20 = a4;
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v25 = _swiftEmptyArrayStorage;
  sub_100766750((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v14, v12);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v23);
  return swift_release();
}

void sub_100734F08(uint64_t isEscapingClosureAtFileLocation, uint64_t a2, void *a3, void *a4, void (*a5)(id, uint64_t), uint64_t a6)
{
  if (qword_101637070 != -1) {
    goto LABEL_12;
  }
  while (1)
  {
    uint64_t v10 = type metadata accessor for Logger();
    sub_100010324(v10, (uint64_t)qword_10170EC30);
    swift_errorRetain();
    swift_bridgeObjectRetain();
    swift_errorRetain();
    swift_bridgeObjectRetain();
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.error.getter();
    uint64_t v31 = a6;
    if (!os_log_type_enabled(v11, v12)) {
      break;
    }
    uint64_t v13 = swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 136315394;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v14 = String.init<A>(describing:)();
    sub_1008FA0F0(v14, v15, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    *(_WORD *)(v13 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v16 = Array.description.getter();
    uint64_t v17 = isEscapingClosureAtFileLocation;
    unint64_t v19 = v18;
    swift_bridgeObjectRelease();
    uint64_t v20 = v16;
    a6 = v31;
    sub_1008FA0F0(v20, v19, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    uint64_t isEscapingClosureAtFileLocation = v17;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "subscribeAndFetch failed %s forIds %s", (uint8_t *)v13, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v21 = *(void *)(a2 + 16);
    if (!v21) {
      goto LABEL_10;
    }
LABEL_6:
    uint64_t v29 = isEscapingClosureAtFileLocation;
    uint64_t v22 = a3[6];
    swift_bridgeObjectRetain();
    uint64_t v28 = a2;
    uint64_t v23 = (uint64_t *)(a2 + 40);
    while (1)
    {
      uint64_t v24 = *(v23 - 1);
      a2 = *v23;
      uint64_t v25 = *(NSObject **)(v22 + 16);
      uint64_t v26 = swift_allocObject();
      *(void *)(v26 + 16) = v22;
      *(void *)(v26 + 24) = v24;
      *(void *)(v26 + 32) = a2;
      *(void *)(v26 + 40) = a4;
      *(unsigned char *)(v26 + 48) = 2;
      a6 = swift_allocObject();
      *(void *)(a6 + 16) = sub_100766A88;
      *(void *)(a6 + 24) = v26;
      aBlock[4] = (uint64_t)sub_1003B7AE0;
      aBlock[5] = a6;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      aBlock[2] = (uint64_t)sub_1000A70B0;
      aBlock[3] = (uint64_t)&unk_1015D2A60;
      a3 = _Block_copy(aBlock);
      swift_bridgeObjectRetain_n();
      swift_retain();
      id v27 = a4;
      swift_retain();
      swift_release();
      dispatch_sync(v25, a3);
      _Block_release(a3);
      uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      if (isEscapingClosureAtFileLocation) {
        break;
      }
      v23 += 2;
      if (!--v21)
      {
        a2 = v28;
        swift_bridgeObjectRelease();
        a6 = v31;
        uint64_t isEscapingClosureAtFileLocation = v29;
        goto LABEL_10;
      }
    }
    __break(1u);
LABEL_12:
    swift_once();
  }
  swift_errorRelease();
  swift_errorRelease();

  swift_bridgeObjectRelease_n();
  uint64_t v21 = *(void *)(a2 + 16);
  if (v21) {
    goto LABEL_6;
  }
LABEL_10:
  sub_100737020(a2, 0, 0xF000000000000000, isEscapingClosureAtFileLocation, a4, a5, a6);
}

uint64_t sub_100735350(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  *(void *)&long long v149 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v6 = *(void *)(v149 - 8);
  __chkstk_darwin(v149);
  uint64_t v148 = (char *)&v137 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v147 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v147);
  uint64_t v146 = (char *)&v137 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v160 = _swiftEmptyArrayStorage;
  uint64_t v161 = _swiftEmptyArrayStorage;
  uint64_t v139 = _swiftEmptyArrayStorage;
  unint64_t v159 = _swiftEmptyArrayStorage;
  uint64_t v10 = *(void **)(a1 + 16);
  uint64_t v138 = a2;
  if (v10)
  {
    uint64_t v11 = *(void *)(a2 + 48);
    uint64_t v144 = v158;
    id v143 = (void (**)(char *, uint64_t))(v6 + 8);
    unint64_t v142 = (void (**)(char *, uint64_t))(v8 + 8);
    uint64_t v12 = swift_bridgeObjectRetain();
    uint64_t v137 = a1;
    uint64_t v13 = (unint64_t *)(a1 + 40);
    *(void *)&long long v14 = 141558275;
    long long v141 = v14;
    uint64_t v140 = (char *)&type metadata for Any + 8;
    uint64_t v145 = v11;
    do
    {
      v151 = v10;
      uint64_t v15 = *(v13 - 1);
      unint64_t v16 = *v13;
      uint64_t v17 = v13;
      __chkstk_darwin(v12);
      *(&v137 - 4) = 0;
      *(&v137 - 3) = v11;
      *(&v137 - 2) = v15;
      *(&v137 - 1) = v16;
      swift_bridgeObjectRetain();
      uint64_t isUniquelyReferenced_nonNull_native = OS_dispatch_queue.sync<A>(execute:)();
      char v19 = aBlock[0];
      if (LOBYTE(aBlock[0]) == 1)
      {
        uint64_t v20 = v161;
        swift_bridgeObjectRetain();
        uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_100A6E25C(0, v20[2] + 1, 1, v20);
          uint64_t v20 = (void *)isUniquelyReferenced_nonNull_native;
        }
        unint64_t v22 = v20[2];
        unint64_t v21 = v20[3];
        if (v22 >= v21 >> 1)
        {
          uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_100A6E25C((void *)(v21 > 1), v22 + 1, 1, v20);
          uint64_t v20 = (void *)isUniquelyReferenced_nonNull_native;
        }
        v20[2] = v22 + 1;
        uint64_t v23 = &v20[2 * v22];
        v23[4] = v15;
        v23[5] = v16;
        uint64_t v161 = v20;
      }
      __chkstk_darwin(isUniquelyReferenced_nonNull_native);
      *(&v137 - 4) = 1;
      *(&v137 - 3) = v11;
      *(&v137 - 2) = v15;
      *(&v137 - 1) = v16;
      OS_dispatch_queue.sync<A>(execute:)();
      os_log_type_t v152 = (uint8_t *)v3;
      if (LOBYTE(aBlock[0]) == 1)
      {
        uint64_t v24 = v160;
        swift_bridgeObjectRetain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v24 = sub_100A6E25C(0, v24[2] + 1, 1, v24);
        }
        uint64_t v25 = v17;
        unint64_t v27 = v24[2];
        unint64_t v26 = v24[3];
        if (v27 >= v26 >> 1) {
          uint64_t v24 = sub_100A6E25C((void *)(v26 > 1), v27 + 1, 1, v24);
        }
        v24[2] = v27 + 1;
        uint64_t v28 = &v24[2 * v27];
        v28[4] = v15;
        v28[5] = v16;
        unint64_t v160 = v24;
      }
      else
      {
        uint64_t v25 = v17;
        if ((v19 & 1) == 0)
        {
          if (qword_101637070 != -1) {
            swift_once();
          }
          uint64_t v29 = type metadata accessor for Logger();
          sub_100010324(v29, (uint64_t)qword_10170EC30);
          swift_bridgeObjectRetain_n();
          int v30 = Logger.logObject.getter();
          os_log_type_t v31 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v30, v31))
          {
            uint64_t v32 = swift_slowAlloc();
            aBlock[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v32 = v141;
            *(void *)(v32 + 4) = 1752392040;
            *(_WORD *)(v32 + 12) = 2081;
            swift_bridgeObjectRetain();
            *(void *)(v32 + 14) = sub_1008FA0F0(v15, v16, aBlock);
            swift_bridgeObjectRelease_n();
            _os_log_impl((void *)&_mh_execute_header, v30, v31, "Received Key: No pending subscription for %{private,mask.hash}s", (uint8_t *)v32, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {

            swift_bridgeObjectRelease_n();
          }
          id v33 = v159;
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            id v33 = sub_100A6E25C(0, v33[2] + 1, 1, v33);
          }
          unint64_t v35 = v33[2];
          unint64_t v34 = v33[3];
          if (v35 >= v34 >> 1) {
            id v33 = sub_100A6E25C((void *)(v34 > 1), v35 + 1, 1, v33);
          }
          v33[2] = v35 + 1;
          unint64_t v36 = &v33[2 * v35];
          v36[4] = v15;
          v36[5] = v16;
          unint64_t v159 = v33;
        }
      }
      if (qword_101637440 != -1) {
        swift_once();
      }
      uint64_t v37 = v25 + 2;
      uint64_t v38 = qword_10170F218;
      uint64_t v150 = *(void *)(qword_10170F218 + 16);
      uint64_t v39 = swift_allocObject();
      *(void *)(v39 + 16) = v38;
      *(void *)(v39 + 24) = v15;
      *(void *)(v39 + 32) = v16;
      *(unsigned char *)(v39 + 40) = 1;
      v158[2] = sub_100768E30;
      v158[3] = v39;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      v158[0] = sub_1004B5480;
      v158[1] = &unk_1015D3C80;
      uint64_t v40 = _Block_copy(aBlock);
      swift_retain_n();
      swift_bridgeObjectRetain();
      unint64_t v41 = v146;
      static DispatchQoS.unspecified.getter();
      BOOL v156 = _swiftEmptyArrayStorage;
      sub_100766750((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000588C((uint64_t *)&unk_10163F350);
      sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
      unint64_t v42 = v148;
      uint64_t v43 = v149;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v40);
      uint64_t v13 = v37;
      (*v143)(v42, v43);
      (*v142)(v41, v147);
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v12 = swift_release();
      uint64_t v10 = (void *)((char *)v151 - 1);
      uint64_t v3 = (uint64_t)v152;
      uint64_t v11 = v145;
    }
    while (v151 != (void *)1);
    swift_bridgeObjectRelease();
    uint64_t v139 = v161;
  }
  if (!v139[2]) {
    goto LABEL_36;
  }
  if (qword_101637070 != -1) {
    goto LABEL_100;
  }
  while (1)
  {
    uint64_t v44 = type metadata accessor for Logger();
    sub_100010324(v44, (uint64_t)qword_10170EC30);
    unint64_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v45, v46))
    {
      os_log_type_t v47 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v47 = 136315138;
      os_log_type_t v152 = v47 + 4;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      uint64_t v48 = Array.description.getter();
      unint64_t v50 = v49;
      swift_bridgeObjectRelease();
      BOOL v156 = (void *)sub_1008FA0F0(v48, v50, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Received Key: Subscribing in proactive to %s", v47, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    swift_beginAccess();
    os_log_type_t v51 = v161;
    if (v161[2])
    {
      id v52 = objc_allocWithZone((Class)SPSecureLocationsSubscriptionContext);
      swift_bridgeObjectRetain();
      id v53 = [v52 init];
      [v53 setSubscriptionMode:0];
      NSString v54 = String._bridgeToObjectiveC()();
      [v53 setClientApp:v54];

      [v53 setFetchMode:0];
      uint64_t v55 = type metadata accessor for Transaction();
      __chkstk_darwin(v55);
      uint64_t v56 = v138;
      *(&v137 - 4) = (uint64_t)v51;
      *(&v137 - 3) = v56;
      *(&v137 - 2) = (uint64_t)v53;
      *(&v137 - 1) = 0;
      static Transaction.named<A>(_:with:)();
      swift_bridgeObjectRelease();
    }
LABEL_36:
    if (v160[2])
    {
      if (qword_101637070 != -1) {
        swift_once();
      }
      uint64_t v57 = type metadata accessor for Logger();
      sub_100010324(v57, (uint64_t)qword_10170EC30);
      uint64_t v58 = Logger.logObject.getter();
      os_log_type_t v59 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v58, v59))
      {
        uint64_t v60 = (uint8_t *)swift_slowAlloc();
        BOOL v156 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v60 = 136315138;
        os_log_type_t v152 = v60 + 4;
        swift_beginAccess();
        swift_bridgeObjectRetain();
        uint64_t v61 = Array.description.getter();
        unint64_t v63 = v62;
        swift_bridgeObjectRelease();
        v155[0] = sub_1008FA0F0(v61, v63, (uint64_t *)&v156);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v58, v59, "Received Key: Subscribing in shallow to %s", v60, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      swift_beginAccess();
      uint64_t v64 = v160;
      if (v160[2])
      {
        id v65 = objc_allocWithZone((Class)SPSecureLocationsSubscriptionContext);
        swift_bridgeObjectRetain();
        id v66 = [v65 init];
        [v66 setSubscriptionMode:1];
        NSString v67 = String._bridgeToObjectiveC()();
        [v66 setClientApp:v67];

        [v66 setFetchMode:0];
        uint64_t v68 = type metadata accessor for Transaction();
        __chkstk_darwin(v68);
        uint64_t v69 = v138;
        *(&v137 - 4) = (uint64_t)v64;
        *(&v137 - 3) = v69;
        *(&v137 - 2) = (uint64_t)v66;
        *(&v137 - 1) = 1;
        static Transaction.named<A>(_:with:)();
        swift_bridgeObjectRelease();
      }
    }
    if (!v159[2]) {
      goto LABEL_94;
    }
    sub_10000588C(&qword_101648048);
    unsafeFromAsyncTask<A>(_:)();
    if (v3) {
      break;
    }
    uint64_t v79 = v155[0];
    uint64_t v80 = qword_101636FE0;
    uint64_t v81 = swift_bridgeObjectRetain();
    if (v80 != -1) {
      uint64_t v81 = swift_once();
    }
    __chkstk_darwin(v81);
    *(&v137 - 2) = v79;
    OSAllocatedUnfairLock.callAsFunction<A>(_:)();
    os_log_type_t v152 = 0;
    sub_10015B4A8(v79, 0);
    int64_t v82 = *(void *)(v79 + 16);
    NSString v83 = _swiftEmptyArrayStorage;
    if (!v82)
    {
LABEL_65:
      uint64_t v147 = v79;
      uint64_t v103 = sub_101158614((uint64_t)v83);
      swift_bridgeObjectRelease();
      uint64_t v104 = v159[2];
      if (v104)
      {
        uint64_t v146 = (char *)swift_bridgeObjectRetain();
        uint64_t v105 = (unint64_t *)(v146 + 40);
        uint64_t v106 = _swiftEmptyArrayStorage;
        *(void *)&long long v107 = 136315138;
        long long v149 = v107;
        uint64_t v148 = (char *)&type metadata for Any + 8;
        uint64_t v108 = _swiftEmptyArrayStorage;
        uint64_t v150 = v103;
        while (1)
        {
          uint64_t v110 = *(v105 - 1);
          unint64_t v109 = *v105;
          swift_bridgeObjectRetain();
          char v111 = sub_100DC6054(v110, v109, v103);
          swift_bridgeObjectRetain();
          if (v111)
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v108 = sub_100A6E25C(0, v108[2] + 1, 1, v108);
            }
            unint64_t v113 = v108[2];
            unint64_t v112 = v108[3];
            if (v113 >= v112 >> 1) {
              uint64_t v108 = sub_100A6E25C((void *)(v112 > 1), v113 + 1, 1, v108);
            }
            v108[2] = v113 + 1;
            uint64_t v114 = &v108[2 * v113];
            v114[4] = v110;
            v114[5] = v109;
            if (qword_101637070 != -1) {
              swift_once();
            }
            uint64_t v115 = type metadata accessor for Logger();
            sub_100010324(v115, (uint64_t)qword_10170EC30);
            swift_bridgeObjectRetain();
            uint64_t v116 = Logger.logObject.getter();
            os_log_type_t v117 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v116, v117))
            {
              uint64_t v118 = swift_slowAlloc();
              uint64_t v119 = swift_slowAlloc();
              v151 = v108;
              v155[0] = v119;
              *(_DWORD *)uint64_t v118 = v149;
              swift_bridgeObjectRetain();
              *(void *)(v118 + 4) = sub_1008FA0F0(v110, v109, v155);
              swift_bridgeObjectRelease_n();
              _os_log_impl((void *)&_mh_execute_header, v116, v117, "Received Key: Subscribing in proactive from following: %s", (uint8_t *)v118, 0xCu);
              swift_arrayDestroy();
              uint64_t v108 = v151;
              swift_slowDealloc();
              uint64_t v103 = v150;
LABEL_86:
              swift_slowDealloc();

              goto LABEL_68;
            }
          }
          else
          {
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              uint64_t v106 = sub_100A6E25C(0, v106[2] + 1, 1, v106);
            }
            unint64_t v121 = v106[2];
            unint64_t v120 = v106[3];
            if (v121 >= v120 >> 1) {
              uint64_t v106 = sub_100A6E25C((void *)(v120 > 1), v121 + 1, 1, v106);
            }
            v106[2] = v121 + 1;
            uint64_t v122 = &v106[2 * v121];
            v122[4] = v110;
            v122[5] = v109;
            if (qword_101637070 != -1) {
              swift_once();
            }
            uint64_t v123 = type metadata accessor for Logger();
            sub_100010324(v123, (uint64_t)qword_10170EC30);
            swift_bridgeObjectRetain();
            uint64_t v116 = Logger.logObject.getter();
            os_log_type_t v124 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v116, v124))
            {
              uint64_t v125 = swift_slowAlloc();
              v151 = v108;
              v126 = v106;
              uint64_t v127 = v125;
              v155[0] = swift_slowAlloc();
              *(_DWORD *)uint64_t v127 = v149;
              swift_bridgeObjectRetain();
              *(void *)(v127 + 4) = sub_1008FA0F0(v110, v109, v155);
              swift_bridgeObjectRelease_n();
              _os_log_impl((void *)&_mh_execute_header, v116, v124, "Received Key: Subscribing with intent to notify server of keys received: %s", (uint8_t *)v127, 0xCu);
              swift_arrayDestroy();
              uint64_t v103 = v150;
              swift_slowDealloc();
              uint64_t v106 = v126;
              uint64_t v108 = v151;
              goto LABEL_86;
            }
          }

          swift_bridgeObjectRelease_n();
LABEL_68:
          v105 += 2;
          if (!--v104)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_89;
          }
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v106 = _swiftEmptyArrayStorage;
      uint64_t v108 = _swiftEmptyArrayStorage;
LABEL_89:
      if (v108[2])
      {
        id v128 = [objc_allocWithZone((Class)SPSecureLocationsSubscriptionContext) init];
        [v128 setSubscriptionMode:5];
        NSString v129 = String._bridgeToObjectiveC()();
        [v128 setClientApp:v129];

        [v128 setFetchMode:0];
        uint64_t v130 = type metadata accessor for Transaction();
        __chkstk_darwin(v130);
        uint64_t v131 = v138;
        *(&v137 - 4) = (uint64_t)v108;
        *(&v137 - 3) = v131;
        *(&v137 - 2) = (uint64_t)v128;
        *(&v137 - 1) = 5;
        static Transaction.named<A>(_:with:)();
        swift_bridgeObjectRelease();

        if (v106[2])
        {
LABEL_91:
          id v132 = [objc_allocWithZone((Class)SPSecureLocationsSubscriptionContext) init];
          [v132 setSubscriptionMode:5];
          NSString v133 = String._bridgeToObjectiveC()();
          [v132 setClientApp:v133];

          [v132 setFetchMode:0];
          uint64_t v134 = type metadata accessor for Transaction();
          __chkstk_darwin(v134);
          uint64_t v135 = v138;
          *(&v137 - 4) = (uint64_t)v106;
          *(&v137 - 3) = v135;
          *(&v137 - 2) = (uint64_t)v132;
          *(&v137 - 1) = 5;
          static Transaction.named<A>(_:with:)();

          sub_10015B4A8(v147, 0);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        if (v106[2]) {
          goto LABEL_91;
        }
      }
      sub_10015B4A8(v147, 0);
      swift_bridgeObjectRelease();
LABEL_94:
      swift_bridgeObjectRelease();
      goto LABEL_95;
    }
    v155[0] = (uint64_t)_swiftEmptyArrayStorage;
    sub_1000B6ED0(0, v82, 0);
    NSString v83 = (void *)v155[0];
    uint64_t v84 = sub_10115FE18(v79);
    uint64_t v86 = v85;
    int v88 = v87 & 1;
    uint64_t v150 = v79 + 56;
    while ((v84 & 0x8000000000000000) == 0 && v84 < 1 << *(unsigned char *)(v79 + 32))
    {
      if (((*(void *)(v150 + (((unint64_t)v84 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v84) & 1) == 0) {
        goto LABEL_98;
      }
      if (*(_DWORD *)(v79 + 36) != v86) {
        goto LABEL_99;
      }
      LODWORD(v151) = v88;
      uint64_t v89 = *(void *)(v79 + 48) + 40 * v84;
      uint64_t v3 = *(void *)(v89 + 24);
      uint64_t v90 = *(void *)(v89 + 32);
      v155[0] = (uint64_t)v83;
      unint64_t v91 = v83[2];
      unint64_t v92 = v83[3];
      swift_bridgeObjectRetain();
      if (v91 >= v92 >> 1)
      {
        sub_1000B6ED0(v92 > 1, v91 + 1, 1);
        NSString v83 = (void *)v155[0];
      }
      v83[2] = v91 + 1;
      uint64_t v93 = &v83[2 * v91];
      v93[4] = v3;
      v93[5] = v90;
      uint64_t v94 = sub_10052CB9C(v84, v86, v151 & 1, v79);
      uint64_t v84 = v94;
      uint64_t v86 = v95;
      int v88 = v96 & 1;
      if (!--v82)
      {
        sub_1001A1CB8(v94, v95, v88);
        goto LABEL_65;
      }
    }
    __break(1u);
LABEL_98:
    __break(1u);
LABEL_99:
    __break(1u);
LABEL_100:
    swift_once();
  }
  sub_10015B6F0(v3, 1);
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v70 = type metadata accessor for Logger();
  sub_100010324(v70, (uint64_t)qword_10170EC30);
  sub_10015B6F0(v3, 1);
  sub_10015B6F0(v3, 1);
  os_log_type_t v71 = Logger.logObject.getter();
  os_log_type_t v72 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v71, v72))
  {
    uint64_t v73 = swift_slowAlloc();
    v155[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v73 = 136446466;
    uint64_t v154 = v3;
    sub_10015B6F0(v3, 1);
    sub_10000588C(&qword_101638D40);
    uint64_t v74 = String.init<A>(describing:)();
    uint64_t v154 = sub_1008FA0F0(v74, v75, v155);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    sub_10015B4A8(v3, 1);
    *(_WORD *)(v73 + 12) = 2080;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    uint64_t v76 = Array.description.getter();
    unint64_t v78 = v77;
    swift_bridgeObjectRelease();
    uint64_t v153 = sub_1008FA0F0(v76, v78, v155);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v71, v72, "Received Key: Unable to get following handles %{public}s,\nso subscribing with intent to notify server of keys received %s", (uint8_t *)v73, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    sub_10015B4A8(v3, 1);
  }

  swift_beginAccess();
  uint64_t v97 = v159;
  if (v159[2])
  {
    id v98 = objc_allocWithZone((Class)SPSecureLocationsSubscriptionContext);
    swift_bridgeObjectRetain();
    id v99 = [v98 init];
    [v99 setSubscriptionMode:0];
    NSString v100 = String._bridgeToObjectiveC()();
    [v99 setClientApp:v100];

    [v99 setFetchMode:0];
    uint64_t v101 = type metadata accessor for Transaction();
    __chkstk_darwin(v101);
    uint64_t v102 = v138;
    *(&v137 - 4) = (uint64_t)v97;
    *(&v137 - 3) = v102;
    *(&v137 - 2) = (uint64_t)v99;
    *(&v137 - 1) = 0;
    static Transaction.named<A>(_:with:)();

    sub_10015B4A8(v3, 1);
    swift_bridgeObjectRelease();
    sub_10015B4A8(v3, 1);
    swift_bridgeObjectRelease();
LABEL_95:
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  sub_10015B4A8(v3, 1);
  sub_10015B4A8(v3, 1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void sub_100736DB8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v5 = a5;
  uint64_t v6 = a3;
  uint64_t v7 = a2;
  uint64_t v8 = a1;
  uint64_t v9 = *(void *)(a2 + 16);
  if (v9)
  {
    uint64_t v23 = *(void *)(a3 + 48);
    swift_bridgeObjectRetain();
    uint64_t v21 = v7;
    uint64_t v10 = (uint64_t *)(v7 + 40);
    while (1)
    {
      uint64_t v11 = *(v10 - 1);
      uint64_t v12 = *v10;
      queue = *(NSObject **)(v23 + 16);
      uint64_t v13 = (void *)swift_allocObject();
      void v13[2] = v23;
      v13[3] = v11;
      v13[4] = v12;
      v13[5] = a4;
      uint64_t v14 = swift_allocObject();
      *(void *)(v14 + 16) = sub_100769230;
      *(void *)(v14 + 24) = v13;
      aBlock[4] = sub_1003B7AE0;
      aBlock[5] = v14;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      uint64_t aBlock[2] = sub_1000A70B0;
      aBlock[3] = &unk_1015D3CF8;
      uint64_t v15 = _Block_copy(aBlock);
      swift_bridgeObjectRetain_n();
      id v16 = a4;
      swift_retain();
      swift_retain();
      swift_release();
      dispatch_sync(queue, v15);
      _Block_release(v15);
      char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      if (isEscapingClosureAtFileLocation) {
        break;
      }
      v10 += 2;
      if (!--v9)
      {
        uint64_t v7 = v21;
        swift_bridgeObjectRelease();
        uint64_t v6 = a3;
        uint64_t v5 = a5;
        uint64_t v8 = a1;
        goto LABEL_6;
      }
    }
    __break(1u);
  }
  else
  {
LABEL_6:
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    id v18 = a4;
    sub_100759E14(v7, v18, 0, v6, v8, v5, v7, v6, v18);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
  }
}

void sub_100737020(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5, void (*a6)(id, uint64_t), uint64_t a7)
{
  uint64_t v143 = a7;
  unint64_t v142 = a6;
  id v139 = a5;
  BOOL v156 = (void *)type metadata accessor for DispatchWorkItemFlags();
  long long v141 = (void *)*(v156 - 1);
  __chkstk_darwin(v156);
  os_log_type_t v155 = (char *)v136 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v154 = type metadata accessor for DispatchQoS();
  uint64_t v140 = *(void *)(v154 - 8);
  __chkstk_darwin(v154);
  uint64_t v153 = (char *)v136 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for DispatchPredicate();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (void *)((char *)v136 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  int64_t v149 = v7;
  id v18 = *(void **)(v7 + 296);
  *uint64_t v17 = v18;
  (*(void (**)(void *, void, uint64_t))(v15 + 104))(v17, enum case for DispatchPredicate.onQueue(_:), v14);
  id v19 = v18;
  LOBYTE(v18) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v15 + 8))(v17, v14);
  if (v18)
  {
    type metadata accessor for JSONDecoder();
    swift_allocObject();
    uint64_t v145 = JSONDecoder.init()();
    int64_t v20 = *(void *)(a1 + 16);
    uint64_t v21 = _swiftEmptyArrayStorage;
    uint64_t v144 = a4;
    if (v20)
    {
      uint64_t v148 = (uint64_t (**)(uint64_t))a2;
      unint64_t v22 = a3;
      uint64_t aBlock = _swiftEmptyArrayStorage;
      sub_1000B6ED0(0, v20, 0);
      uint64_t v23 = aBlock;
      uint64_t v24 = (uint64_t *)(a1 + 40);
      do
      {
        uint64_t v26 = *(v24 - 1);
        uint64_t v25 = *v24;
        uint64_t aBlock = v23;
        unint64_t v27 = v23[2];
        unint64_t v28 = v23[3];
        swift_bridgeObjectRetain();
        if (v27 >= v28 >> 1)
        {
          sub_1000B6ED0(v28 > 1, v27 + 1, 1);
          uint64_t v23 = aBlock;
        }
        v24 += 2;
        v23[2] = v27 + 1;
        uint64_t v29 = &v23[2 * v27];
        v29[4] = v26;
        v29[5] = v25;
        --v20;
      }
      while (v20);
      a3 = v22;
      a2 = (uint64_t)v148;
    }
    else
    {
      uint64_t v23 = _swiftEmptyArrayStorage;
    }
    uint64_t v30 = sub_101158614((uint64_t)v23);
    swift_bridgeObjectRelease();
    uint64_t v167 = v30;
    if (a3 >> 60 == 15)
    {
      uint64_t v31 = swift_bridgeObjectRetain();
      uint64_t v32 = sub_100607250(v31);
      swift_bridgeObjectRelease();
      unint64_t v166 = (unint64_t)_swiftEmptyArrayStorage;
      id v33 = *(char **)(v32 + 16);
      if (v33)
      {
        uint64_t v30 = *(void *)(type metadata accessor for SecureLocation() - 8);
        uint64_t v34 = v32 + ((*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80));
        uint64_t v35 = v32;
        uint64_t v36 = qword_101637080;
        uint64_t v138 = (uint64_t *)v35;
        swift_bridgeObjectRetain();
        if (v36 == -1) {
          goto LABEL_12;
        }
        goto LABEL_111;
      }
      swift_bridgeObjectRelease();
LABEL_26:
      uint64_t v54 = *(void *)(v30 + 56);
      uint64_t v148 = (uint64_t (**)(uint64_t))(v30 + 56);
      uint64_t v55 = 1 << *(unsigned char *)(v30 + 32);
      uint64_t v56 = -1;
      if (v55 < 64) {
        uint64_t v56 = ~(-1 << v55);
      }
      uint64_t v34 = v56 & v54;
      int64_t v149 = (unint64_t)(v55 + 63) >> 6;
      os_log_type_t v152 = &v162;
      v151 = (void (**)(char *, void *))(v141 + 1);
      uint64_t v150 = (void (**)(void, uint64_t))(v140 + 8);
      swift_bridgeObjectRetain_n();
      int64_t v57 = 0;
      uint64_t v58 = v153;
      os_log_type_t v59 = v156;
      if (v34)
      {
LABEL_29:
        unint64_t v60 = __clz(__rbit64(v34));
        v34 &= v34 - 1;
        unint64_t v61 = v60 | (v57 << 6);
        goto LABEL_48;
      }
      while (1)
      {
        int64_t v62 = v57 + 1;
        if (__OFADD__(v57, 1))
        {
          __break(1u);
          goto LABEL_107;
        }
        if (v62 >= v149) {
          goto LABEL_52;
        }
        unint64_t v63 = (unint64_t)v148[v62];
        ++v57;
        if (!v63)
        {
          int64_t v57 = v62 + 1;
          if (v62 + 1 >= v149) {
            goto LABEL_52;
          }
          unint64_t v63 = (unint64_t)v148[v57];
          if (!v63)
          {
            int64_t v57 = v62 + 2;
            if (v62 + 2 >= v149) {
              goto LABEL_52;
            }
            unint64_t v63 = (unint64_t)v148[v57];
            if (!v63)
            {
              int64_t v57 = v62 + 3;
              if (v62 + 3 >= v149) {
                goto LABEL_52;
              }
              unint64_t v63 = (unint64_t)v148[v57];
              if (!v63)
              {
                int64_t v57 = v62 + 4;
                if (v62 + 4 >= v149) {
                  goto LABEL_52;
                }
                unint64_t v63 = (unint64_t)v148[v57];
                if (!v63)
                {
                  int64_t v64 = v62 + 5;
                  if (v64 >= v149)
                  {
LABEL_52:
                    swift_release();
                    swift_bridgeObjectRelease();
                    if (qword_101637070 != -1) {
                      goto LABEL_109;
                    }
                    goto LABEL_53;
                  }
                  unint64_t v63 = (unint64_t)v148[v64];
                  if (!v63)
                  {
                    while (1)
                    {
                      int64_t v57 = v64 + 1;
                      if (__OFADD__(v64, 1)) {
                        break;
                      }
                      if (v57 >= v149) {
                        goto LABEL_52;
                      }
                      unint64_t v63 = (unint64_t)v148[v57];
                      ++v64;
                      if (v63) {
                        goto LABEL_47;
                      }
                    }
                    __break(1u);
LABEL_111:
                    swift_once();
LABEL_12:
                    int64_t v37 = *(void *)(v30 + 72);
                    uint64_t v148 = &v162;
                    uint64_t v147 = (void (**)(char *, void *))(v141 + 1);
                    uint64_t v146 = (void (**)(char *, uint64_t))(v140 + 8);
                    uint64_t v38 = &qword_101637000;
                    uint64_t v39 = &qword_10170F000;
                    int64_t v149 = v37;
                    do
                    {
                      swift_retain();
                      char v53 = sub_100D0C2A4(v34);
                      swift_release();
                      if (v53)
                      {
                        sub_100E8F348();
                        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()();
                        if (*(void *)((v166 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v166 & 0xFFFFFFFFFFFFFF8)
                                                                                           + 0x18) >> 1)
                          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
                        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
                        specialized Array._endMutation()();
                        if (v38[136] != -1) {
                          swift_once();
                        }
                        uint64_t v52 = *(void *)v34;
                        uint64_t v42 = *(void *)(v34 + 8);
                        swift_retain();
                        sub_1010DED18(v52, v42, 1);
                        swift_release();
                      }
                      else
                      {
                        v157 = v33;
                        if (v38[136] != -1) {
                          swift_once();
                        }
                        uint64_t v40 = v39[67];
                        uint64_t v42 = *(void *)(v34 + 8);
                        os_log_type_t v152 = *(uint64_t (***)(uint64_t))v34;
                        unint64_t v41 = v152;
                        v151 = *(void (***)(char *, void *))(v40 + 16);
                        uint64_t v43 = swift_allocObject();
                        *(void *)(v43 + 16) = v40;
                        *(void *)(v43 + 24) = v41;
                        *(void *)(v43 + 32) = v42;
                        *(unsigned char *)(v43 + 40) = 2;
                        v164 = sub_1001FEFAC;
                        uint64_t v165 = v43;
                        uint64_t aBlock = _NSConcreteStackBlock;
                        uint64_t v161 = 1107296256;
                        v162 = sub_1004B5480;
                        os_log_type_t v163 = (uint64_t *)&unk_1015D37D0;
                        uint64_t v150 = (void (**)(void, uint64_t))_Block_copy(&aBlock);
                        swift_retain_n();
                        swift_bridgeObjectRetain();
                        uint64_t v44 = v153;
                        static DispatchQoS.unspecified.getter();
                        unint64_t v159 = v21;
                        sub_100766750((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
                        sub_10000588C((uint64_t *)&unk_10163F350);
                        sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
                        unint64_t v45 = v21;
                        os_log_type_t v46 = v155;
                        os_log_type_t v47 = v39;
                        uint64_t v48 = v156;
                        dispatch thunk of SetAlgebra.init<A>(_:)();
                        unint64_t v49 = v150;
                        OS_dispatch_queue.async(group:qos:flags:execute:)();
                        _Block_release(v49);
                        unint64_t v50 = v46;
                        uint64_t v21 = v45;
                        os_log_type_t v51 = v48;
                        uint64_t v39 = v47;
                        (*v147)(v50, v51);
                        (*v146)(v44, v154);
                        uint64_t v52 = (uint64_t)v152;
                        swift_release();
                        swift_release();
                        id v33 = v157;
                        int64_t v37 = v149;
                        uint64_t v38 = &qword_101637000;
                      }
                      swift_bridgeObjectRetain();
                      sub_101128AD4(v52, v42);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      v34 += v37;
                      --v33;
                    }
                    while (v33);
                    swift_bridgeObjectRelease_n();
                    uint64_t v30 = v167;
                    goto LABEL_26;
                  }
                  int64_t v57 = v64;
                }
              }
            }
          }
        }
LABEL_47:
        uint64_t v34 = (v63 - 1) & v63;
        unint64_t v61 = __clz(__rbit64(v63)) + (v57 << 6);
LABEL_48:
        v157 = (char *)v57;
        id v65 = (uint64_t *)(*(void *)(v30 + 48) + 16 * v61);
        uint64_t v67 = *v65;
        uint64_t v66 = v65[1];
        if (qword_101637440 != -1) {
          swift_once();
        }
        uint64_t v21 = (void *)qword_10170F218;
        uint64_t v68 = swift_allocObject();
        *(void *)(v68 + 16) = v21;
        *(void *)(v68 + 24) = v67;
        *(void *)(v68 + 32) = v66;
        *(unsigned char *)(v68 + 40) = 0;
        v164 = sub_10076922C;
        uint64_t v165 = v68;
        uint64_t aBlock = _NSConcreteStackBlock;
        uint64_t v161 = 1107296256;
        v162 = sub_1004B5480;
        os_log_type_t v163 = (uint64_t *)&unk_1015D3820;
        id v33 = (char *)_Block_copy(&aBlock);
        swift_retain_n();
        swift_bridgeObjectRetain();
        static DispatchQoS.unspecified.getter();
        unint64_t v159 = _swiftEmptyArrayStorage;
        sub_100766750((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_10000588C((uint64_t *)&unk_10163F350);
        sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
        uint64_t v69 = v155;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        OS_dispatch_queue.async(group:qos:flags:execute:)();
        _Block_release(v33);
        (*v151)(v69, v59);
        (*v150)(v58, v154);
        swift_release();
        swift_release();
        int64_t v57 = (int64_t)v157;
        if (v34) {
          goto LABEL_29;
        }
      }
    }
    sub_1000361E0(a2, a3);
    sub_100768704();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)();
    uint64_t v87 = (uint64_t)aBlock;
    uint64_t v86 = v161;
    unint64_t v88 = (unint64_t)v162;
    uint64_t v89 = v163;
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v90 = type metadata accessor for Logger();
    uint64_t v91 = sub_100010324(v90, (uint64_t)qword_10170EC30);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    unint64_t v92 = Logger.logObject.getter();
    os_log_type_t v93 = static os_log_type_t.default.getter();
    BOOL v94 = os_log_type_enabled(v92, v93);
    uint64_t v146 = (void (**)(char *, uint64_t))v91;
    if (v94)
    {
      uint64_t v138 = v89;
      uint64_t v95 = (uint8_t *)swift_slowAlloc();
      v157 = (char *)swift_slowAlloc();
      uint64_t aBlock = v157;
      uint64_t v144 = v87;
      *(_DWORD *)uint64_t v95 = 136315138;
      swift_bridgeObjectRetain();
      unint64_t v159 = (void *)sub_1008FA0F0(v86, v88, (uint64_t *)&aBlock);
      uint64_t v89 = v138;
      uint64_t v87 = v144;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v92, v93, "Decoded SubscribeAndFetch response successfully %s. Now attempting to decrypt", v95, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    uint64_t v137 = *(void **)(v167 + 16);
    uint64_t v147 = (void (**)(char *, void *))a3;
    uint64_t v148 = (uint64_t (**)(uint64_t))a2;
    if (v89)
    {
      uint64_t v96 = swift_bridgeObjectRetain();
      sub_100739248(v96);
      uint64_t v97 = (void *)v89[2];
      if (v97)
      {
        v136[1] = v88;
        uint64_t v144 = v87;
        v136[2] = 0;
        os_log_type_t v152 = &v162;
        v151 = (void (**)(char *, void *))(v141 + 1);
        uint64_t v150 = (void (**)(void, uint64_t))(v140 + 8);
        swift_bridgeObjectRetain();
        uint64_t v138 = v89;
        id v98 = v89 + 5;
        long long v141 = v97;
        id v99 = v153;
        NSString v100 = v155;
        do
        {
          uint64_t v102 = *(v98 - 1);
          uint64_t v101 = *v98;
          swift_bridgeObjectRetain();
          sub_101128AD4(v102, v101);
          swift_bridgeObjectRelease();
          if (qword_101637440 != -1) {
            swift_once();
          }
          v98 += 2;
          uint64_t v103 = qword_10170F218;
          v157 = *(char **)(qword_10170F218 + 16);
          uint64_t v104 = swift_allocObject();
          *(void *)(v104 + 16) = v103;
          *(void *)(v104 + 24) = v102;
          *(void *)(v104 + 32) = v101;
          *(unsigned char *)(v104 + 40) = 3;
          v164 = sub_10076922C;
          uint64_t v165 = v104;
          uint64_t aBlock = _NSConcreteStackBlock;
          uint64_t v161 = 1107296256;
          v162 = sub_1004B5480;
          os_log_type_t v163 = (uint64_t *)&unk_1015D3898;
          uint64_t v105 = _Block_copy(&aBlock);
          swift_retain_n();
          swift_bridgeObjectRetain();
          static DispatchQoS.unspecified.getter();
          unint64_t v159 = _swiftEmptyArrayStorage;
          sub_100766750((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
          sub_10000588C((uint64_t *)&unk_10163F350);
          sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
          uint64_t v106 = v156;
          dispatch thunk of SetAlgebra.init<A>(_:)();
          OS_dispatch_queue.async(group:qos:flags:execute:)();
          _Block_release(v105);
          (*v151)(v100, v106);
          (*v150)(v99, v154);
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          uint64_t v97 = (void *)((char *)v97 - 1);
        }
        while (v97);
        swift_bridgeObjectRelease();
        uint64_t v87 = v144;
      }
      else
      {
        long long v141 = 0;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      long long v141 = 0;
    }
    long long v107 = sub_100609134(v87);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v108 = sub_1007571EC((uint64_t)v107, (uint64_t)&v167);
    swift_bridgeObjectRelease();
    unint64_t v109 = *(char **)(v167 + 16);
    BOOL v156 = (void *)v108[2];
    v157 = v109;
    uint64_t v110 = swift_allocObject();
    uint64_t v111 = swift_bridgeObjectRetain();
    uint64_t v112 = sub_100607250(v111);
    swift_bridgeObjectRelease();
    unint64_t v113 = sub_1007574D0(v112, (uint64_t)&v167);
    swift_bridgeObjectRelease();
    *(void *)(v110 + 16) = v113;
    uint64_t v114 = (void *)v113[2];
    uint64_t v115 = v167;
    uint64_t v116 = *(void **)(v167 + 16);
    uint64_t v117 = v167 + 56;
    uint64_t v118 = 1 << *(unsigned char *)(v167 + 32);
    uint64_t v119 = -1;
    if (v118 < 64) {
      uint64_t v119 = ~(-1 << v118);
    }
    unint64_t v120 = v119 & *(void *)(v167 + 56);
    int64_t v121 = (unint64_t)(v118 + 63) >> 6;
    swift_bridgeObjectRetain_n();
    int64_t v122 = 0;
    while (1)
    {
      if (v120)
      {
        unint64_t v123 = __clz(__rbit64(v120));
        v120 &= v120 - 1;
        unint64_t v124 = v123 | (v122 << 6);
      }
      else
      {
        if (__OFADD__(v122++, 1))
        {
LABEL_107:
          __break(1u);
          break;
        }
        if (v122 >= v121)
        {
LABEL_102:
          swift_release();
          swift_bridgeObjectRelease();
          uint64_t v131 = Logger.logObject.getter();
          os_log_type_t v132 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v131, v132))
          {
            uint64_t v133 = swift_slowAlloc();
            *(_DWORD *)uint64_t v133 = 134219264;
            uint64_t aBlock = v137;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v133 + 12) = 2048;
            uint64_t aBlock = v141;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v133 + 22) = 2048;
            uint64_t aBlock = v156;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v133 + 32) = 2048;
            uint64_t aBlock = v157;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v133 + 42) = 2048;
            uint64_t aBlock = v114;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            *(_WORD *)(v133 + 52) = 2048;
            uint64_t aBlock = v116;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            _os_log_impl((void *)&_mh_execute_header, v131, v132, "subscribeAndFetch location counts. requested %ld failed %ld fromServer %ld notOnServer %ld notOnServerButInCache %ld noLocationFound %ld", (uint8_t *)v133, 0x3Eu);
            swift_slowDealloc();
          }

          uint64_t v134 = type metadata accessor for Transaction();
          __chkstk_darwin(v134);
          v136[-6] = v149;
          v136[-5] = v108;
          v136[-4] = v139;
          v136[-3] = v110;
          uint64_t v135 = v143;
          v136[-2] = v142;
          v136[-1] = v135;
          static Transaction.named<A>(_:with:)();
          sub_100037A24((uint64_t)v148, (unint64_t)v147);
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          goto LABEL_105;
        }
        unint64_t v129 = *(void *)(v117 + 8 * v122);
        if (!v129)
        {
          int64_t v130 = v122 + 1;
          if (v122 + 1 >= v121) {
            goto LABEL_102;
          }
          unint64_t v129 = *(void *)(v117 + 8 * v130);
          if (!v129)
          {
            int64_t v130 = v122 + 2;
            if (v122 + 2 >= v121) {
              goto LABEL_102;
            }
            unint64_t v129 = *(void *)(v117 + 8 * v130);
            if (!v129)
            {
              int64_t v130 = v122 + 3;
              if (v122 + 3 >= v121) {
                goto LABEL_102;
              }
              unint64_t v129 = *(void *)(v117 + 8 * v130);
              if (!v129)
              {
                int64_t v130 = v122 + 4;
                if (v122 + 4 >= v121) {
                  goto LABEL_102;
                }
                unint64_t v129 = *(void *)(v117 + 8 * v130);
                if (!v129)
                {
                  int64_t v130 = v122 + 5;
                  if (v122 + 5 >= v121) {
                    goto LABEL_102;
                  }
                  unint64_t v129 = *(void *)(v117 + 8 * v130);
                  if (!v129)
                  {
                    while (1)
                    {
                      int64_t v122 = v130 + 1;
                      if (__OFADD__(v130, 1)) {
                        break;
                      }
                      if (v122 >= v121) {
                        goto LABEL_102;
                      }
                      unint64_t v129 = *(void *)(v117 + 8 * v122);
                      ++v130;
                      if (v129) {
                        goto LABEL_97;
                      }
                    }
                    __break(1u);
                    return;
                  }
                }
              }
            }
          }
          int64_t v122 = v130;
        }
LABEL_97:
        unint64_t v120 = (v129 - 1) & v129;
        unint64_t v124 = __clz(__rbit64(v129)) + (v122 << 6);
      }
      uint64_t v125 = (void *)(*(void *)(v115 + 48) + 16 * v124);
      uint64_t v127 = (void *)*v125;
      uint64_t v126 = v125[1];
      uint64_t aBlock = v127;
      uint64_t v161 = v126;
      sub_100738A9C((uint64_t *)&aBlock);
    }
  }
  __break(1u);
LABEL_109:
  swift_once();
LABEL_53:
  uint64_t v70 = type metadata accessor for Logger();
  sub_100010324(v70, (uint64_t)qword_10170EC30);
  swift_errorRetain();
  swift_errorRetain();
  os_log_type_t v71 = Logger.logObject.getter();
  os_log_type_t v72 = static os_log_type_t.default.getter();
  BOOL v73 = os_log_type_enabled(v71, v72);
  uint64_t v74 = v142;
  if (v73)
  {
    uint64_t v75 = swift_slowAlloc();
    uint64_t aBlock = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v75 = 134218242;
    swift_beginAccess();
    if (v166 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v76 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v76 = *(void *)((v166 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    uint64_t v158 = v76;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v75 + 12) = 2080;
    uint64_t v158 = v144;
    swift_errorRetain();
    sub_10000588C((uint64_t *)&unk_101638EB0);
    uint64_t v77 = String.init<A>(describing:)();
    uint64_t v158 = sub_1008FA0F0(v77, v78, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v71, v72, "SubscribeAndFetch - no response data. Returning locations from cache. count %ld error %s", (uint8_t *)v75, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  id v79 = v139;
  id v80 = [v139 subscriptionMode];
  unint64_t v81 = (unint64_t)[v79 subscriptionMode];
  double v82 = 15.0;
  if (v80 == (id)5)
  {
    double v82 = 0.0;
    if (v81 <= 5) {
      double v82 = dbl_101368AD0[v81];
    }
  }
  swift_beginAccess();
  id v83 = objc_allocWithZone((Class)SPSecureLocationsSubscriptionResult);
  sub_10001D4B0(0, (unint64_t *)&qword_10163F378);
  swift_bridgeObjectRetain();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v85 = [v83 initWithExpiryTime:isa locations:v82];

  v74(v85, v144);
  swift_release();
  swift_bridgeObjectRelease();
LABEL_105:
  swift_bridgeObjectRelease();
}

void sub_100738A9C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  unint64_t v1 = a1[1];
  if (qword_101637440 != -1) {
    swift_once();
  }
  swift_retain();
  sub_1010DED18(v2, v1, 0);
  uint64_t v3 = swift_release();
  if (qword_101637080 != -1) {
    uint64_t v3 = swift_once();
  }
  __chkstk_darwin(v3);
  swift_retain();
  sub_10000588C(&qword_101644320);
  OS_dispatch_queue.sync<A>(execute:)();
  swift_release();
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100010324(v4, (uint64_t)qword_10170EC30);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain_n();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = swift_slowAlloc();
    uint64_t v10 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 141558787;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v7 + 12) = 2081;
    swift_bridgeObjectRetain();
    sub_1008FA0F0(v2, v1, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v7 + 22) = 2160;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v7 + 32) = 2081;
    swift_bridgeObjectRetain();
    uint64_t v8 = String.init<A>(describing:)();
    sub_1008FA0F0(v8, v9, &v10);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "subscribeAndFetch: No Location Found for %{private,mask.hash}s %{private,mask.hash}s", (uint8_t *)v7, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
}

uint64_t sub_100738E30(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  id v13 = a4;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_10075CCAC(a3, 0, a2, v13, a2, a5, a6, a7, a1);

  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

void sub_100738F00(uint64_t a1, char a2, uint64_t a3, uint64_t a4, void *a5, void (*a6)(void, void), uint64_t a7)
{
  id v31 = a5;
  uint64_t v12 = type metadata accessor for SecureLocation();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12 - 8);
  uint64_t v16 = (char *)v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = (uint64_t *)(a4 + 16);
  if (a2)
  {
    __chkstk_darwin(v14);
    v30[-4] = v18;
    v30[-3] = SharingCircleWildAdvertisementKey.init(key:);
    v30[-2] = 0;
    v30[-1] = a1;
    static Transaction.named<A>(_:with:)();
  }
  swift_beginAccess();
  uint64_t v19 = swift_bridgeObjectRetain();
  sub_10044579C(v19);
  swift_endAccess();
  swift_beginAccess();
  uint64_t v20 = *v17;
  uint64_t v21 = *(void *)(*v17 + 16);
  if (v21)
  {
    v30[1] = a7;
    unint64_t v22 = a6;
    uint64_t v32 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v23 = v20 + ((*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
    uint64_t v24 = *(void *)(v13 + 72);
    do
    {
      sub_100768C34(v23, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for SecureLocation);
      sub_100E8F348();
      sub_100768C9C((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for SecureLocation);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      v23 += v24;
      --v21;
    }
    while (v21);
    swift_bridgeObjectRelease();
    a6 = v22;
  }
  unint64_t v25 = (unint64_t)[v31 subscriptionMode];
  double v26 = 0.0;
  if (v25 < 6) {
    double v26 = dbl_101368AD0[v25];
  }
  id v27 = objc_allocWithZone((Class)SPSecureLocationsSubscriptionResult);
  sub_10001D4B0(0, (unint64_t *)&qword_10163F378);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v29 = [v27 initWithExpiryTime:isa locations:v26];

  a6(v29, 0);
  Transaction.capture()();
}

uint64_t sub_100739248(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v12 = type metadata accessor for Logger();
  sub_100010324(v12, (uint64_t)qword_10170EC30);
  swift_bridgeObjectRetain_n();
  uint64_t v13 = Logger.logObject.getter();
  os_log_type_t v14 = static os_log_type_t.default.getter();
  BOOL v15 = os_log_type_enabled(v13, v14);
  uint64_t v42 = v11;
  uint64_t v43 = v7;
  uint64_t v49 = v8;
  if (v15)
  {
    uint64_t v16 = swift_slowAlloc();
    uint64_t v17 = swift_slowAlloc();
    os_log_type_t v47 = (void *)v17;
    *(_DWORD *)uint64_t v16 = 134218242;
    unint64_t v50 = *(void **)(a1 + 16);
    aBlock[0] = v17;
    uint64_t v48 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v16 + 12) = 2080;
    os_log_type_t v46 = (void (**)(char *, uint64_t))(v16 + 14);
    swift_bridgeObjectRetain();
    uint64_t v18 = v2;
    uint64_t v19 = v4;
    uint64_t v20 = v5;
    uint64_t v21 = Array.description.getter();
    unint64_t v23 = v22;
    swift_bridgeObjectRelease();
    uint64_t v24 = v21;
    uint64_t v5 = v20;
    uint64_t v4 = v19;
    uint64_t v2 = v18;
    unint64_t v50 = (void *)sub_1008FA0F0(v24, v23, aBlock);
    uint64_t v9 = v48;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "subscribeAndFetch - clearing cached locations for %ld ids %s", (uint8_t *)v16, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v25 = *(void *)(a1 + 16);
    if (!v25) {
      goto LABEL_10;
    }
  }
  else
  {

    swift_bridgeObjectRelease_n();
    uint64_t v25 = *(void *)(a1 + 16);
    if (!v25) {
      goto LABEL_10;
    }
  }
  uint64_t v40 = v2;
  uint64_t v26 = *(void *)(v2 + 16);
  os_log_type_t v47 = v52;
  uint64_t v48 = v26;
  uint64_t v44 = v4;
  unint64_t v45 = (void (**)(char *, uint64_t))(v9 + 8);
  os_log_type_t v46 = (void (**)(char *, uint64_t))(v5 + 8);
  swift_bridgeObjectRetain();
  uint64_t v41 = a1;
  id v27 = (uint64_t *)(a1 + 40);
  id v29 = v42;
  unint64_t v28 = v43;
  do
  {
    uint64_t v30 = *(v27 - 1);
    uint64_t v31 = *v27;
    uint64_t v32 = v48;
    id v33 = (void *)swift_allocObject();
    v33[2] = v30;
    v33[3] = v31;
    v33[4] = v32;
    v33[5] = SharingCircleWildAdvertisementKey.init(key:);
    v33[6] = 0;
    void v52[2] = sub_100768670;
    v52[3] = v33;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    v52[0] = sub_1004B5480;
    v52[1] = &unk_1015D3780;
    uint64_t v34 = _Block_copy(aBlock);
    swift_bridgeObjectRetain_n();
    swift_retain();
    static DispatchQoS.unspecified.getter();
    unint64_t v50 = _swiftEmptyArrayStorage;
    sub_100766750((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v35 = v44;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v34);
    (*v46)(v28, v35);
    (*v45)(v29, v49);
    swift_bridgeObjectRelease();
    swift_release();
    v27 += 2;
    --v25;
  }
  while (v25);
  a1 = v41;
  swift_bridgeObjectRelease();
  uint64_t v2 = v40;
LABEL_10:
  uint64_t v36 = *(void *)(v2 + 40);
  uint64_t v37 = type metadata accessor for Transaction();
  __chkstk_darwin(v37);
  *(&v39 - 2) = v36;
  *(&v39 - 1) = a1;
  return static Transaction.named<A>(_:with:)();
}

uint64_t sub_100739800(uint64_t a1)
{
  if (qword_101637080 != -1) {
    swift_once();
  }
  swift_retain();
  OS_dispatch_queue.sync<A>(execute:)();
  swift_release();
  v9[10] = v8[10];
  v9[11] = v8[11];
  v9[12] = v8[12];
  v9[6] = v8[6];
  v9[7] = v8[7];
  v9[8] = v8[8];
  v9[9] = v8[9];
  v9[2] = v8[2];
  v9[3] = v8[3];
  v9[4] = v8[4];
  v9[5] = v8[5];
  v9[0] = v8[0];
  v9[1] = v8[1];
  if (qword_101636CA0 != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for Logger();
  sub_100010324(v2, (uint64_t)qword_10164CC28);
  sub_1006F40C4((uint64_t)v9);
  uint64_t v3 = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = swift_slowAlloc();
    *(void *)&v8[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 136446722;
    sub_1008FA0F0(0xD000000000000034, 0x8000000101406580, (uint64_t *)v8);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v5 + 12) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    sub_100551984((uint64_t)v9);
    *(_WORD *)(v5 + 22) = 2048;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "%{public}s local version: %ld - server: %ld", (uint8_t *)v5, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100551984((uint64_t)v9);
  }

  uint64_t result = sub_100551984((uint64_t)v9);
  if (*(uint64_t *)&v9[0] < a1)
  {
    uint64_t v7 = swift_allocObject();
    *(void *)(v7 + 16) = a1;
    sub_10072E958((uint64_t)sub_100768544, v7);
    return swift_release();
  }
  return result;
}

uint64_t sub_100739AEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = a3;
  v12[3] = a4;
  v12[4] = a5;
  v12[5] = a6;
  v12[6] = a2;
  v12[7] = a1;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1006066B8(a3, a4, (uint64_t)sub_1007667E8, (uint64_t)v12);
  return swift_release();
}

void sub_100739BBC(uint64_t a1, uint64_t a2, unint64_t a3, void (*a4)(id, void), uint64_t a5, uint64_t a6, uint64_t *a7)
{
  uint64_t v46 = a6;
  uint64_t v47 = a2;
  uint64_t v11 = *a7;
  uint64_t v12 = sub_10000588C(&qword_101669310);
  __chkstk_darwin(v12 - 8);
  os_log_type_t v14 = (char *)v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for SecureLocation();
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100766800(a1, (uint64_t)v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) != 1)
  {
    sub_100767F00((uint64_t)v14, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for SecureLocation);
    if (qword_101637080 != -1) {
      swift_once();
    }
    swift_retain();
    char v23 = sub_100D0C2A4((uint64_t)v18);
    swift_release();
    if ((v23 & 1) == 0)
    {
      if (qword_101637070 != -1) {
        swift_once();
      }
      uint64_t v32 = type metadata accessor for Logger();
      sub_100010324(v32, (uint64_t)qword_10170EC30);
      swift_bridgeObjectRetain_n();
      id v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v33, v34))
      {
        uint64_t v35 = swift_slowAlloc();
        uint64_t v45 = a5;
        uint64_t v36 = (uint8_t *)v35;
        uint64_t v49 = swift_slowAlloc();
        *(_DWORD *)uint64_t v36 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v48 = sub_1008FA0F0(v47, a3, &v49);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "latestLocationFromCache - location is older than acceptable threshold. Returning nil for %s", v36, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      if (qword_101637440 != -1) {
        swift_once();
      }
      sub_1010E191C();
      a4(0, 0);
      goto LABEL_39;
    }
    swift_retain();
    char v24 = sub_100D0C790((uint64_t)v18);
    swift_release();
    if (v24)
    {
      if (qword_101637070 != -1) {
        swift_once();
      }
      v44[1] = v11;
      uint64_t v25 = type metadata accessor for Logger();
      sub_100010324(v25, (uint64_t)qword_10170EC30);
      swift_bridgeObjectRetain_n();
      uint64_t v26 = Logger.logObject.getter();
      os_log_type_t v27 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v26, v27))
      {
        v44[0] = a4;
        uint64_t v28 = swift_slowAlloc();
        uint64_t v45 = a5;
        id v29 = (uint8_t *)v28;
        uint64_t v49 = swift_slowAlloc();
        *(_DWORD *)id v29 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v30 = v47;
        uint64_t v48 = sub_1008FA0F0(v47, a3, &v49);
        a4 = (void (*)(id, void))v44[0];
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v26, v27, "latestLocationFromCache - location is valid but aging. Returning it for now and requesting a refetch for %s", v29, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        uint64_t v31 = swift_bridgeObjectRelease_n();
        uint64_t v30 = v47;
      }
      __chkstk_darwin(v31);
      v44[-4] = v46;
      v44[-3] = v30;
      v44[-2] = a3;
      static Transaction.named<A>(_:with:)();
      if (qword_101637440 == -1) {
        goto LABEL_38;
      }
    }
    else
    {
      uint64_t v37 = v47;
      if (sub_10073A580(v47, a3))
      {
        if (qword_101637070 != -1) {
          swift_once();
        }
        uint64_t v38 = type metadata accessor for Logger();
        sub_100010324(v38, (uint64_t)qword_10170EC30);
        uint64_t v39 = Logger.logObject.getter();
        os_log_type_t v40 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v39, v40))
        {
          uint64_t v41 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v41 = 0;
          _os_log_impl((void *)&_mh_execute_header, v39, v40, "latestLocationFromCache - proactive subscription needs renewal", v41, 2u);
          uint64_t v37 = v47;
          swift_slowDealloc();
        }

        if (qword_101637440 != -1) {
          swift_once();
        }
        sub_1010E191C();
        __chkstk_darwin(v42);
        v44[-6] = v46;
        v44[-5] = v37;
        v44[-4] = a3;
        v44[-3] = a4;
        v44[-2] = a5;
        static Transaction.named<A>(_:with:)();
        goto LABEL_39;
      }
      if (qword_101637440 == -1)
      {
LABEL_38:
        sub_1010E191C();
        id v43 = sub_100E8F348();
        a4(v43, 0);

LABEL_39:
        sub_100768C9C((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        goto LABEL_40;
      }
    }
    swift_once();
    goto LABEL_38;
  }
  sub_10001DAB4((uint64_t)v14, &qword_101669310);
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v19 = type metadata accessor for Logger();
  sub_100010324(v19, (uint64_t)qword_10170EC30);
  swift_bridgeObjectRetain_n();
  uint64_t v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v20, v21))
  {
    unint64_t v22 = (uint8_t *)swift_slowAlloc();
    uint64_t v49 = swift_slowAlloc();
    *(_DWORD *)unint64_t v22 = 136315138;
    swift_bridgeObjectRetain();
    uint64_t v48 = sub_1008FA0F0(v47, a3, &v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "latestLocationFromCache - no cached location for %s", v22, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  if (qword_101637440 != -1) {
    swift_once();
  }
  sub_1010E191C();
  a4(0, 0);
LABEL_40:
  Transaction.capture()();
}

uint64_t sub_10073A580(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v28 - v12;
  sub_1006022E0(a1, a2, (uint64_t)v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
  {
    sub_10001DAB4((uint64_t)v6, (uint64_t *)&unk_10163AC90);
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_100010324(v14, (uint64_t)qword_10170EC30);
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "proactiveSubscriptionNeedsRenewal is true since there is no last proactive subscribtion time.", v17, 2u);
      swift_slowDealloc();
    }

    return 1;
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v6, v7);
    static Date.trustedNow.getter((uint64_t)v11);
    Date.timeIntervalSince(_:)();
    double v20 = v19;
    os_log_type_t v21 = *(void (**)(char *, uint64_t))(v8 + 8);
    v21(v11, v7);
    BOOL v18 = v20 >= 64800.0;
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v22 = type metadata accessor for Logger();
    sub_100010324(v22, (uint64_t)qword_10170EC30);
    char v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (_DWORD *)swift_slowAlloc();
      uint64_t v28 = v21;
      uint64_t v26 = v25;
      *uint64_t v25 = 67109632;
      LODWORD(v29) = v20 >= 64800.0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *((_WORD *)v26 + 4) = 2048;
      uint64_t v29 = 0x40EFA40000000000;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *((_WORD *)v26 + 9) = 2048;
      uint64_t v29 = *(void *)&v20;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "proactiveSubscriptionNeedsRenewal %{BOOL}d threshold %f timeSinceLastSubscribe %f", (uint8_t *)v26, 0x1Cu);
      os_log_type_t v21 = v28;
      swift_slowDealloc();
    }

    v21(v13, v7);
  }
  return v18;
}

uint64_t sub_10073A96C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Date.trustedNow.getter((uint64_t)v7);
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    uint64_t v16 = v4;
    swift_bridgeObjectRetain();
    uint64_t v9 = (unint64_t *)(a1 + 40);
    do
    {
      if (*(void *)(a2 + 16))
      {
        uint64_t v11 = *(v9 - 1);
        unint64_t v10 = *v9;
        swift_bridgeObjectRetain();
        uint64_t v12 = sub_100723FF4(v11, v10);
        if ((v13 & 1) != 0 && (*(unsigned char *)(*(void *)(a2 + 56) + v12) & 1) == 0) {
          sub_1006028B0(v11, v10, (uint64_t)v7);
        }
        swift_bridgeObjectRelease();
      }
      v9 += 2;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
    uint64_t v4 = v16;
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
}

uint64_t sub_10073AADC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void *, uint64_t), uint64_t a6)
{
  id v12 = [objc_allocWithZone((Class)SPSecureLocationsSubscriptionContext) init];
  [v12 setSubscriptionMode:0];
  NSString v13 = String._bridgeToObjectiveC()();
  [v12 setClientApp:v13];

  [v12 setFetchMode:0];
  sub_10000588C(&qword_1016552B0);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_101342130;
  *(void *)(v14 + 32) = a3;
  *(void *)(v14 + 40) = a4;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_10075A804(v14, v12, 0, a2, a5, a6, a1);

  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

void sub_10073AC30(void *a1, uint64_t a2, void (*a3)(void *, uint64_t))
{
  id v5 = [a1 locations];
  sub_10001D4B0(0, (unint64_t *)&qword_10163F378);
  unint64_t v6 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = (void *)_CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (!v7) {
      goto LABEL_7;
    }
  }
  else
  {
    uint64_t v7 = *(void **)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v7)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      a3(v7, a2);

      Transaction.capture()();
      return;
    }
  }
  if ((v6 & 0xC000000000000001) != 0)
  {
    id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_6;
  }
  if (*(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    id v8 = *(id *)(v6 + 32);
LABEL_6:
    uint64_t v7 = v8;
    goto LABEL_7;
  }
  __break(1u);
}

uint64_t sub_10073AD4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  id v8 = [objc_allocWithZone((Class)SPSecureLocationsSubscriptionContext) init];
  [v8 setSubscriptionMode:0];
  NSString v9 = String._bridgeToObjectiveC()();
  [v8 setClientApp:v9];

  [v8 setFetchMode:0];
  sub_10000588C(&qword_1016552B0);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_101342130;
  *(void *)(v10 + 32) = a3;
  *(void *)(v10 + 40) = a4;
  swift_retain();
  swift_bridgeObjectRetain();
  sub_10075B1C8(v10, v8, 1, a2, a1);

  swift_bridgeObjectRelease();
  return swift_release();
}

void sub_10073AE78(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(void), uint64_t a5)
{
  uint64_t v7 = &qword_101637000;
  if (a2)
  {
    swift_errorRetain();
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_100010324(v8, (uint64_t)qword_10170EC30);
    swift_errorRetain();
    swift_errorRetain();
    NSString v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v9, v10))
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();

      if (*(void *)(a1 + 16)) {
        goto LABEL_7;
      }
      goto LABEL_9;
    }
    uint64_t v11 = (uint8_t *)swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136315138;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v12 = String.init<A>(describing:)();
    sub_1008FA0F0(v12, v13, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v7 = &qword_101637000;
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Error resolving label before publish. Proceeding without label. Error %s", v11, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    swift_errorRelease();
  }
  if (*(void *)(a1 + 16))
  {
LABEL_7:
    uint64_t v14 = *(void *)(type metadata accessor for SecureLocation() - 8);
    sub_10073B1A8(a1 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80)), 0, a4, a5);
    return;
  }
LABEL_9:
  if (v7[14] != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_100010324(v15, (uint64_t)qword_10170EC30);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v16, v17))
  {
    BOOL v18 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)BOOL v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Got empty locations after resolving labels. This shouldn't happen", v18, 2u);
    swift_slowDealloc();
  }
}

void sub_10073B1A8(uint64_t a1, int a2, void (*a3)(void), uint64_t a4)
{
  int v97 = a2;
  uint64_t v8 = sub_10000588C((uint64_t *)&unk_101649E20);
  __chkstk_darwin(v8 - 8);
  unint64_t v92 = (char *)&v90 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v99 = type metadata accessor for SecureLocationsSubmitEndpoint(0);
  uint64_t v10 = __chkstk_darwin(v99);
  uint64_t v101 = (char *)&v90 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v91 = (uint64_t)&v90 - v13;
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v90 - v14;
  uint64_t v100 = type metadata accessor for SecureLocation();
  uint64_t v16 = __chkstk_darwin(v100);
  BOOL v18 = (char *)&v90 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v90 - v19;
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  uint64_t v22 = sub_100010324(v21, (uint64_t)qword_10170EC30);
  sub_100768C34(a1, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for SecureLocation);
  sub_100768C34(a1, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for SecureLocation);
  uint64_t v98 = v22;
  char v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.default.getter();
  BOOL v25 = os_log_type_enabled(v23, v24);
  uint64_t v95 = v4;
  if (v25)
  {
    uint64_t v26 = swift_slowAlloc();
    uint64_t v27 = swift_slowAlloc();
    uint64_t v96 = a4;
    uint64_t v103 = v27;
    *(_DWORD *)uint64_t v26 = 136446466;
    unint64_t v28 = sub_100E90398(*(void *)&v20[*(int *)(v100 + 60)]);
    os_log_type_t v93 = a3;
    uint64_t v102 = sub_1008FA0F0(v28, v29, &v103);
    uint64_t v94 = a1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100768C9C((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for SecureLocation);
    *(_WORD *)(v26 + 12) = 2080;
    uint64_t v30 = sub_100E8F520();
    uint64_t v102 = sub_1008FA0F0(v30, v31, &v103);
    a1 = v94;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    a3 = v93;
    sub_100768C9C((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for SecureLocation);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "publishLocation with reason %{public}s location: %s", (uint8_t *)v26, 0x16u);
    swift_arrayDestroy();
    a4 = v96;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100768C9C((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for SecureLocation);
    sub_100768C9C((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for SecureLocation);
  }

  uint64_t v32 = (uint64_t)v101;
  uint64_t v33 = v99;
  if (qword_101637080 != -1) {
    swift_once();
  }
  swift_retain();
  char v34 = sub_100D0C0B0();
  swift_release();
  if (v34 & 1) != 0 || (v97)
  {
    if (*(void *)(a1 + *(int *)(v100 + 60)) == 8)
    {
      uint64_t v42 = v95;
      if (*(void *)(v95 + 344))
      {
        swift_retain();
        DispatchTimer.cancel()();
        swift_release();
        *(void *)(v42 + 344) = 0;
        swift_release();
      }
      sub_101082988(a1);
      a3(0);
    }
    else
    {
      uint64_t v43 = enum case for FMNAccountType.searchParty(_:);
      uint64_t v44 = type metadata accessor for FMNAccountType();
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v44 - 8) + 104))(v15, v43, v44);
      sub_10033E420((uint64_t)&v15[*(int *)(v33 + 20)]);
      uint64_t v45 = v91;
      sub_100768C34((uint64_t)v15, v91, type metadata accessor for SecureLocationsSubmitEndpoint);
      uint64_t v46 = Logger.logObject.getter();
      os_log_type_t v47 = static os_log_type_t.default.getter();
      BOOL v48 = os_log_type_enabled(v46, v47);
      uint64_t v94 = a1;
      if (v48)
      {
        os_log_type_t v93 = a3;
        uint64_t v49 = v45;
        unint64_t v50 = (uint8_t *)swift_slowAlloc();
        uint64_t v51 = swift_slowAlloc();
        uint64_t v96 = a4;
        uint64_t v103 = v51;
        *(_DWORD *)unint64_t v50 = 136315138;
        sub_100768C34(v49, v32, type metadata accessor for SecureLocationsSubmitEndpoint);
        uint64_t v52 = String.init<A>(describing:)();
        uint64_t v102 = sub_1008FA0F0(v52, v53, &v103);
        a3 = v93;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v32 = (uint64_t)v101;
        swift_bridgeObjectRelease();
        sub_100768C9C(v49, type metadata accessor for SecureLocationsSubmitEndpoint);
        _os_log_impl((void *)&_mh_execute_header, v46, v47, "SubmitLocation endpoint %s", v50, 0xCu);
        swift_arrayDestroy();
        a4 = v96;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_100768C9C(v45, type metadata accessor for SecureLocationsSubmitEndpoint);
      }

      type metadata accessor for SearchPartyURLSessionFactory(0);
      swift_allocObject();
      uint64_t v54 = type metadata accessor for FMNMockingPreferences();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56))(v92, 1, 1, v54);
      uint64_t v55 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)();
      type metadata accessor for ServerInteractionController(0);
      uint64_t v56 = swift_allocObject();
      sub_100768C34((uint64_t)v15, v32, type metadata accessor for SecureLocationsSubmitEndpoint);
      uint64_t v57 = sub_1004A60A0(v32, v55, v56);
      id v58 = [self currentDevice];
      if (v58
        && (os_log_type_t v59 = v58,
            id v60 = [v58 uniqueDeviceIdentifier],
            v59,
            v60))
      {
        uint64_t v101 = v15;
        uint64_t v96 = a4;
        uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v63 = v62;

        uint64_t v64 = v95;
        sub_10000588C(&qword_101644320);
        OS_dispatch_queue.sync<A>(execute:)();
        uint64_t v65 = v104;
        if (v104)
        {
          uint64_t v99 = v103;
          uint64_t v66 = swift_allocBox();
          uint64_t v100 = 0;
          uint64_t v67 = v66;
          uint64_t v69 = (void *)v68;
          uint64_t v70 = v94;
          sub_100768C34(v94, v68, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          void *v69 = v61;
          v69[1] = v63;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          uint64_t v71 = type metadata accessor for Transaction();
          __chkstk_darwin(v71);
          *(&v90 - 10) = v64;
          *(&v90 - 9) = v67;
          uint64_t v72 = v96;
          *(&v90 - 8) = (uint64_t)a3;
          *(&v90 - 7) = v72;
          uint64_t v73 = v99;
          *(&v90 - 6) = v70;
          *(&v90 - 5) = v73;
          *(&v90 - 4) = v65;
          *(&v90 - 3) = v61;
          *(&v90 - 2) = v63;
          *(&v90 - 1) = v57;
          static Transaction.named<A>(_:with:)();
          swift_bridgeObjectRelease();
          sub_100768C9C((uint64_t)v101, type metadata accessor for SecureLocationsSubmitEndpoint);
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          return;
        }
        swift_bridgeObjectRelease();
        id v83 = Logger.logObject.getter();
        os_log_type_t v84 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v83, v84))
        {
          id v85 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)id v85 = 0;
          _os_log_impl((void *)&_mh_execute_header, v83, v84, "No APS token. Not proceeding", v85, 2u);
          swift_slowDealloc();
        }

        static String._unconditionallyBridgeFromObjectiveC(_:)();
        id v86 = objc_allocWithZone((Class)NSError);
        NSString v87 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v88 = [v86 initWithDomain:v87 code:13 userInfo:0];

        id v89 = v88;
        a3(v88);

        swift_release();
        uint64_t v82 = (uint64_t)v101;
      }
      else
      {
        uint64_t v74 = v15;
        uint64_t v75 = Logger.logObject.getter();
        os_log_type_t v76 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v75, v76))
        {
          uint64_t v77 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v77 = 0;
          _os_log_impl((void *)&_mh_execute_header, v75, v76, "Unable to get device identifier for server SubscribeAndFetch", v77, 2u);
          swift_slowDealloc();
        }

        static String._unconditionallyBridgeFromObjectiveC(_:)();
        id v78 = objc_allocWithZone((Class)NSError);
        NSString v79 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v80 = [v78 initWithDomain:v79 code:0 userInfo:0];

        id v81 = v80;
        a3(v80);

        swift_release();
        uint64_t v82 = (uint64_t)v74;
      }
      sub_100768C9C(v82, type metadata accessor for SecureLocationsSubmitEndpoint);
    }
  }
  else
  {
    uint64_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Not a location publishing device. Not publishing location", v37, 2u);
      swift_slowDealloc();
    }

    sub_10075D054();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v38 = objc_allocWithZone((Class)NSError);
    NSString v39 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v40 = [v38 initWithDomain:v39 code:12 userInfo:0];

    id v41 = v40;
    a3(v40);
  }
}

uint64_t sub_10073BE00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v42 = a8;
  uint64_t v33 = a6;
  uint64_t v35 = a4;
  uint64_t v36 = a5;
  uint64_t v43 = a3;
  uint64_t v40 = a11;
  uint64_t v41 = a7;
  uint64_t v37 = a9;
  uint64_t v38 = a10;
  uint64_t v13 = type metadata accessor for SecureLocation();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  uint64_t v16 = __chkstk_darwin(v13 - 8);
  uint64_t v17 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v33 - v18;
  uint64_t v34 = (uint64_t)&v33 - v18;
  uint64_t v20 = swift_projectBox();
  uint64_t v39 = *(void *)(a2 + 16);
  swift_beginAccess();
  sub_100768C34(v20, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for SecureLocation);
  sub_100768C34(v33, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for SecureLocation);
  unint64_t v21 = (*(unsigned __int8 *)(v14 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80);
  unint64_t v22 = (v15 + v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v23 = (v22 + 23) & 0xFFFFFFFFFFFFFFF8;
  os_log_type_t v24 = (void *)swift_allocObject();
  uint64_t v25 = v35;
  uint64_t v26 = v36;
  v24[2] = a1;
  v24[3] = v25;
  v24[4] = v26;
  __n128 v24[5] = a2;
  v24[6] = v43;
  sub_100767F00((uint64_t)v17, (uint64_t)v24 + v21, (uint64_t (*)(void))type metadata accessor for SecureLocation);
  uint64_t v27 = (void *)((char *)v24 + v22);
  uint64_t v28 = v42;
  *uint64_t v27 = v41;
  v27[1] = v28;
  unint64_t v29 = (void *)((char *)v24 + v23);
  uint64_t v30 = v38;
  *unint64_t v29 = v37;
  v29[1] = v30;
  *(void *)((char *)v24 + ((v23 + 23) & 0xFFFFFFFFFFFFFFF8)) = v40;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v31 = v34;
  sub_1006081A8(v34, (uint64_t)sub_1007679B4, (uint64_t)v24);
  swift_release();
  return sub_100768C9C(v31, (uint64_t (*)(void))type metadata accessor for SecureLocation);
}

void sub_10073C07C(uint64_t a1, void *a2, void (*a3)(void), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  uint64_t v93 = a8;
  id v94 = a2;
  uint64_t v95 = a3;
  id v89 = a12;
  uint64_t v92 = a10;
  uint64_t v16 = type metadata accessor for SecureLocation();
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v90 = v18;
  uint64_t v19 = (char *)v85 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v20 - 8);
  if (*(void *)(a1 + 16))
  {
    v85[2] = (char *)v85 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
    id v86 = v19;
    uint64_t v91 = a4;
    uint64_t v22 = swift_projectBox();
    sub_10000588C(&qword_10163AA80);
    uint64_t v23 = *(unsigned __int8 *)(v17 + 80);
    uint64_t v24 = a5;
    uint64_t v25 = (v23 + 32) & ~v23;
    uint64_t v88 = v23;
    v85[3] = v23 | 7;
    uint64_t v26 = swift_allocObject();
    *(_OWORD *)(v26 + 16) = xmmword_101342130;
    swift_beginAccess();
    sub_100768C34(v22, v26 + v25, (uint64_t (*)(void))type metadata accessor for SecureLocation);
    sub_100604694(v26, 1, (uint64_t)SharingCircleWildAdvertisementKey.init(key:), 0);
    swift_bridgeObjectRelease();
    uint64_t v27 = *(void *)(a7 + *(int *)(v16 + 60));
    if (v27 == 7)
    {
      long long v28 = *(_OWORD *)(a1 + 48);
      long long v97 = *(_OWORD *)(a1 + 32);
      long long v98 = v28;
      long long v99 = *(_OWORD *)(a1 + 64);
      uint64_t v100 = *(void *)(a1 + 80);
      sub_100552904((uint64_t)&v97);
      sub_10073CC8C((uint64_t)&v97);
      sub_1005529C0((uint64_t)&v97);
      v95(0);
      Transaction.capture()();
    }
    else
    {
      uint64_t v87 = v24;
      if (qword_101637080 != -1) {
        swift_once();
      }
      sub_10000588C(&qword_101654A30);
      unsafeFromAsyncTask<A>(_:)();
      uint64_t v37 = v97;
      unint64_t v38 = sub_100E90398(v27);
      uint64_t v40 = v39;
      uint64_t v41 = swift_allocObject();
      uint64_t v42 = v93;
      *(void *)(v41 + 16) = a1;
      *(void *)(v41 + 24) = v42;
      uint64_t v43 = v92;
      *(void *)(v41 + 32) = a9;
      *(void *)(v41 + 40) = v43;
      *(void *)(v41 + 48) = a11;
      strcpy((char *)(v41 + 56), "searchpartyd");
      *(unsigned char *)(v41 + 69) = 0;
      *(_WORD *)(v41 + 70) = -5120;
      *(unsigned char *)(v41 + 72) = 0;
      *(void *)(v41 + 80) = v38;
      *(void *)(v41 + 88) = v40;
      uint64_t v44 = v87;
      *(void *)(v41 + 96) = v37;
      *(void *)(v41 + 104) = v44;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      sub_10000588C(&qword_10164D148);
      unsafeFromAsyncTask<A>(_:)();
      swift_release();
      uint64_t v45 = v97;
      if ((void)v97)
      {
        uint64_t v46 = *((void *)&v97 + 1);
        unint64_t v47 = v98;
        if (qword_101637070 != -1) {
          swift_once();
        }
        uint64_t v93 = a7;
        uint64_t v48 = type metadata accessor for Logger();
        sub_100010324(v48, (uint64_t)qword_10170EC30);
        uint64_t v49 = Logger.logObject.getter();
        os_log_type_t v50 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v49, v50))
        {
          uint64_t v51 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v51 = 0;
          _os_log_impl((void *)&_mh_execute_header, v49, v50, "Sending SubmitLocation server request", v51, 2u);
          swift_slowDealloc();
        }

        sub_10076813C(v45, v46, v47);
        swift_bridgeObjectRetain();
        sub_1000361E0(v46, v47);
        uint64_t v52 = Logger.logObject.getter();
        os_log_type_t v53 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v52, v53))
        {
          uint64_t v54 = (uint8_t *)swift_slowAlloc();
          uint64_t v92 = swift_slowAlloc();
          *(void *)&long long v97 = v92;
          *(_DWORD *)uint64_t v54 = 136315138;
          v85[1] = v54 + 4;
          swift_bridgeObjectRetain();
          uint64_t v55 = Dictionary.description.getter();
          unint64_t v57 = v56;
          swift_bridgeObjectRelease();
          uint64_t v96 = sub_1008FA0F0(v55, v57, (uint64_t *)&v97);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_1001D7860(v45, v46, v47);
          sub_1001D7860(v45, v46, v47);
          _os_log_impl((void *)&_mh_execute_header, v52, v53, "SubmitLocation request headers %s", v54, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_1001D7860(v45, v46, v47);
          sub_1001D7860(v45, v46, v47);
        }

        uint64_t v66 = ~v88;
        swift_bridgeObjectRetain();
        sub_1000361E0(v46, v47);
        swift_bridgeObjectRetain();
        sub_1000361E0(v46, v47);
        uint64_t v67 = Logger.logObject.getter();
        os_log_type_t v68 = static os_log_type_t.debug.getter();
        if (os_log_type_enabled(v67, v68))
        {
          uint64_t v92 = v66;
          uint64_t v69 = (uint8_t *)swift_slowAlloc();
          *(void *)&long long v97 = swift_slowAlloc();
          *(_DWORD *)uint64_t v69 = 136315138;
          static String.Encoding.utf8.getter();
          uint64_t v70 = String.init(data:encoding:)();
          if (v71)
          {
            unint64_t v72 = v71;
          }
          else
          {
            uint64_t v70 = 7104878;
            unint64_t v72 = 0xE300000000000000;
          }
          uint64_t v96 = sub_1008FA0F0(v70, v72, (uint64_t *)&v97);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          uint64_t v66 = v92;
          swift_bridgeObjectRelease();
          sub_1001D7860(v45, v46, v47);
          sub_1001D7860(v45, v46, v47);
          _os_log_impl((void *)&_mh_execute_header, v67, v68, "SubmitLocation request body %s", v69, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_1001D7860(v45, v46, v47);
          sub_1001D7860(v45, v46, v47);
        }

        uint64_t v73 = v93;
        uint64_t v74 = (uint64_t)v86;
        swift_bridgeObjectRetain();
        sub_1000361E0(v46, v47);
        sub_1004AB88C(v45, v46, v47, 0, v89);
        sub_1001D7860(v45, v46, v47);
        [self sentSecureLocation];
        sub_100768C34(v73, v74, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        uint64_t v75 = (v88 + 16) & v66;
        unint64_t v76 = (v90 + v75 + 7) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v77 = (v76 + 15) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v78 = (v77 + 23) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v79 = swift_allocObject();
        sub_100767F00(v74, v79 + v75, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        *(void *)(v79 + v76) = v87;
        id v80 = (void *)(v79 + v77);
        id v82 = v94;
        id v81 = v95;
        uint64_t v83 = v91;
        *id v80 = v95;
        v80[1] = v83;
        *(void *)(v79 + v78) = v82;
        swift_retain();
        swift_retain();
        swift_retain();
        Future.addSuccess(block:)();
        swift_release();
        swift_release();
        os_log_type_t v84 = (void *)swift_allocObject();
        v84[2] = v81;
        v84[3] = v83;
        v84[4] = v82;
        swift_retain();
        swift_retain();
        Future.addFailure(block:)();
        swift_release();
        swift_release();
        swift_release();
        sub_1001D7860(v45, v46, v47);
      }
      else
      {
        if (qword_101637070 != -1) {
          swift_once();
        }
        uint64_t v58 = type metadata accessor for Logger();
        sub_100010324(v58, (uint64_t)qword_10170EC30);
        os_log_type_t v59 = Logger.logObject.getter();
        os_log_type_t v60 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v59, v60))
        {
          uint64_t v61 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v61 = 0;
          _os_log_impl((void *)&_mh_execute_header, v59, v60, "Failed to create request for server SubscribeAndFetch", v61, 2u);
          swift_slowDealloc();
        }

        static String._unconditionallyBridgeFromObjectiveC(_:)();
        id v62 = objc_allocWithZone((Class)NSError);
        NSString v63 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v64 = [v62 initWithDomain:v63 code:0 userInfo:0];

        id v65 = v64;
        v95(v64);

        Transaction.capture()();
      }
    }
  }
  else
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v29 = type metadata accessor for Logger();
    sub_100010324(v29, (uint64_t)qword_10170EC30);
    uint64_t v30 = Logger.logObject.getter();
    os_log_type_t v31 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Encoded payload to submit locations is empty.", v32, 2u);
      swift_slowDealloc();
    }

    Transaction.capture()();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v33 = objc_allocWithZone((Class)NSError);
    NSString v34 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v35 = [v33 initWithDomain:v34 code:14 userInfo:0];

    id v94 = v35;
    v95(v35);

    id v36 = v94;
  }
}

void sub_10073CC8C(uint64_t a1)
{
  if (qword_101637080 != -1) {
    swift_once();
  }
  uint64_t v2 = self;
  swift_retain();
  id v3 = [v2 standardUserDefaults];
  NSString v4 = String._bridgeToObjectiveC()();
  unsigned __int8 v5 = [v3 BOOLForKey:v4];
  swift_release();

  if (v5)
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100010324(v6, (uint64_t)qword_10170EC30);
    oslog = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v7, "autoMe is active - not publishing live location", v8, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    swift_retain();
    sub_10050DA9C(a1);
    swift_release();
    uint64_t v9 = self;
    [v9 sentSecureLocation];
  }
}

uint64_t sub_10073CEA0(uint64_t a1)
{
  *(void *)(v1 + 56) = a1;
  return _swift_task_switch(sub_10073CEC0, 0, 0);
}

uint64_t sub_10073CEC0()
{
  type metadata accessor for PairedAutoMeCapableWatches();
  uint64_t v1 = swift_allocObject();
  v0[8] = v1;
  swift_defaultActor_initialize();
  uint64_t v2 = (objc_class *)type metadata accessor for BluetoothConnectionObserver();
  id v3 = [objc_allocWithZone(v2) init];
  v0[5] = v2;
  v0[6] = &off_1016035A0;
  v0[2] = v3;
  type metadata accessor for PairedBluetoothState();
  uint64_t v4 = swift_allocObject();
  uint64_t v5 = sub_1000BD078((uint64_t)(v0 + 2), (uint64_t)v2);
  uint64_t v6 = *((void *)v2 - 1);
  os_log_type_t v7 = (uint64_t *)swift_task_alloc();
  (*(void (**)(uint64_t *, uint64_t, objc_class *))(v6 + 16))(v7, v5, v2);
  uint64_t v8 = *v7;
  id v9 = v3;
  uint64_t v10 = sub_10075709C(v8, v4);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 2));

  swift_task_dealloc();
  *(void *)(v1 + 112) = v10;
  uint64_t v11 = (void *)swift_task_alloc();
  v0[9] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_10073D080;
  return sub_10103B758();
}

uint64_t sub_10073D080(uint64_t a1)
{
  *(void *)(*(void *)v1 + 80) = a1;
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_1007691E0, 0, 0);
}

uint64_t sub_10073D1A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[4] = a3;
  v4[5] = a4;
  v4[2] = a1;
  v4[3] = a2;
  return _swift_task_switch(sub_10073D1C4, 0, 0);
}

uint64_t sub_10073D1C4()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = *(void *)(v0[5] + 312);
  swift_bridgeObjectRetain();
  sub_100767E24(v1);
  os_log_type_t v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_101641B50 + dword_101641B50);
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc();
  v0[6] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10073D298;
  uint64_t v5 = v0[3];
  uint64_t v4 = v0[4];
  return v7(v5, v4, v2);
}

uint64_t sub_10073D298(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (void *)*v3;
  v4[7] = a1;
  v4[8] = a2;
  v4[9] = a3;
  swift_task_dealloc();
  return _swift_task_switch(sub_10073D39C, 0, 0);
}

uint64_t sub_10073D39C()
{
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 16);
  *(_OWORD *)uint64_t v2 = *(_OWORD *)(v0 + 56);
  *(void *)(v2 + 16) = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10073D3C4(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(id), uint64_t a5, uint64_t a6)
{
  id v64 = a4;
  uint64_t v65 = a6;
  uint64_t v63 = a5;
  uint64_t v60 = a3;
  uint64_t v8 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v8 - 8);
  os_log_type_t v59 = (char *)&v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = type metadata accessor for SecureLocation();
  uint64_t v10 = __chkstk_darwin(v61);
  uint64_t v66 = (uint64_t)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v54 - v12;
  uint64_t v14 = type metadata accessor for FMNServerInteractionController.FMNResponseFields();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v67 = (char *)&v54 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v54 - v18;
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  uint64_t v21 = sub_100010324(v20, (uint64_t)qword_10170EC30);
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  v22(v19, a1, v14);
  sub_100768C34(a2, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for SecureLocation);
  sub_100768C34(a2, v66, (uint64_t (*)(void))type metadata accessor for SecureLocation);
  uint64_t v62 = a1;
  v22(v67, a1, v14);
  uint64_t v58 = v21;
  uint64_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.default.getter();
  int v25 = v24;
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v26 = swift_slowAlloc();
    uint64_t v55 = swift_slowAlloc();
    uint64_t v69 = v55;
    *(_DWORD *)uint64_t v26 = 134218754;
    int v57 = v25;
    uint64_t v27 = FMNServerInteractionController.FMNResponseFields.statusCode.getter();
    unint64_t v56 = *(void (**)(char *, uint64_t))(v15 + 8);
    v56(v19, v14);
    uint64_t v68 = v27;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v26 + 12) = 2082;
    unint64_t v28 = sub_100E90398(*(void *)&v13[*(int *)(v61 + 60)]);
    uint64_t v68 = sub_1008FA0F0(v28, v29, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100768C9C((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for SecureLocation);
    *(_WORD *)(v26 + 22) = 2080;
    uint64_t v30 = v66;
    uint64_t v31 = sub_100E8F520();
    uint64_t v68 = sub_1008FA0F0(v31, v32, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100768C9C(v30, (uint64_t (*)(void))type metadata accessor for SecureLocation);
    *(_WORD *)(v26 + 32) = 2080;
    sub_100766750((unint64_t *)&qword_101649E30, (void (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields);
    id v33 = v67;
    uint64_t v34 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v68 = sub_1008FA0F0(v34, v35, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v56(v33, v14);
    _os_log_impl((void *)&_mh_execute_header, v23, (os_log_type_t)v57, "SubmitLocation received status %ld for reason %{public}s location: %s. response: %s", (uint8_t *)v26, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    id v36 = *(void (**)(char *, uint64_t))(v15 + 8);
    v36(v19, v14);
    sub_100768C9C((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for SecureLocation);
    sub_100768C9C(v66, (uint64_t (*)(void))type metadata accessor for SecureLocation);
    v36(v67, v14);
  }

  uint64_t v37 = FMNServerInteractionController.FMNResponseFields.statusCode.getter();
  if (v37 == 428)
  {
    sub_100761AA0(0, 0, 0, 0);
LABEL_15:
    v64(0);
    goto LABEL_16;
  }
  if (v37 == 200)
  {
    uint64_t v38 = FMNServerInteractionController.FMNResponseFields.data.getter();
    unint64_t v40 = v39;
    static String.Encoding.utf8.getter();
    uint64_t v41 = String.init(data:encoding:)();
    unint64_t v43 = v42;
    sub_10001CFB8(v38, v40);
    if (v43)
    {
      swift_bridgeObjectRetain();
      uint64_t v44 = Logger.logObject.getter();
      os_log_type_t v45 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v44, v45))
      {
        uint64_t v46 = (uint8_t *)swift_slowAlloc();
        uint64_t v69 = swift_slowAlloc();
        *(_DWORD *)uint64_t v46 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v68 = sub_1008FA0F0(v41, v43, &v69);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v44, v45, "SubmitLocation Received responseString %s", v46, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
    }
    uint64_t v51 = FMNServerInteractionController.FMNResponseFields.data.getter();
    unint64_t v53 = v52;
    sub_10073EB50();
    sub_10001CFB8(v51, v53);
    goto LABEL_15;
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v47 = objc_allocWithZone((Class)NSError);
  NSString v48 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v49 = [v47 initWithDomain:v48 code:0 userInfo:0];

  id v50 = v49;
  v64(v49);

LABEL_16:
  Transaction.capture()();
}

void sub_10073DB3C(uint64_t a1, void (*a2)(uint64_t))
{
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100010324(v4, (uint64_t)qword_10170EC30);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    os_log_type_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v8 = (void *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v7 = 138543362;
    swift_errorRetain();
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError();
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    void *v8 = v9;
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "SubmitLocation failed %{public}@", v7, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  a2(a1);
  Transaction.capture()();
}

void sub_10073DD2C()
{
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100010324(v0, (uint64_t)qword_10170EC30);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "republishLastLocation requested", v3, 2u);
    swift_slowDealloc();
  }

  id v4 = [self currentDevice];
  if (v4
    && (uint64_t v5 = v4,
        id v6 = [v4 uniqueDeviceIdentifier],
        v5,
        v6))
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v7 = type metadata accessor for Transaction();
    __chkstk_darwin(v7);
    static Transaction.named<A>(_:with:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v10 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v8, "Unable to get device identifier for server Republish", v9, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_10073DF94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a2;
  *(unsigned char *)(v10 + 24) = a5;
  *(void *)(v10 + 32) = a1;
  swift_retain();
  swift_retain();
  sub_1006066B8(a3, a4, (uint64_t)sub_10076861C, v10);
  return swift_release();
}

void sub_10073E048(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  int v30 = a3;
  uint64_t v31 = a2;
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = sub_10000588C(&qword_101669310);
  uint64_t v10 = __chkstk_darwin(v29);
  uint64_t v28 = (uint64_t)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v28 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v28 - v15;
  uint64_t v17 = type metadata accessor for SecureLocation();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100766800(a1, (uint64_t)v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {
    sub_10001DAB4((uint64_t)v16, &qword_101669310);
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_100010324(v21, (uint64_t)qword_10170EC30);
    sub_100766800(a1, (uint64_t)v14);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      os_log_type_t v24 = (uint8_t *)swift_slowAlloc();
      uint64_t v33 = swift_slowAlloc();
      *(_DWORD *)os_log_type_t v24 = 136315138;
      sub_100766800((uint64_t)v14, v28);
      uint64_t v25 = String.init<A>(describing:)();
      uint64_t v32 = sub_1008FA0F0(v25, v26, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10001DAB4((uint64_t)v14, &qword_101669310);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Unable to get location for republish %s", v24, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10001DAB4((uint64_t)v14, &qword_101669310);
    }

    Transaction.capture()();
  }
  else
  {
    sub_100767F00((uint64_t)v16, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for SecureLocation);
    uint64_t v27 = &v20[*(int *)(v17 + 52)];
    Date.addingTimeInterval(_:)();
    (*(void (**)(char *, char *, uint64_t))(v7 + 40))(v27, v9, v6);
    swift_retain();
    sub_100760E38((uint64_t)v20, v30 & 1, v31, a4);
    swift_release();
    sub_100768C9C((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for SecureLocation);
  }
}

void sub_10073E484(void (*a1)(void, void *), uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 328);
  QueueSynchronizer.conditionalSync<A>(_:)();
  if (v14 == 1)
  {
    sub_1010895BC((uint64_t)a1, a2);
    sub_101080B5C();
    if (*(void *)(v2 + 344))
    {
      swift_retain();
      DispatchTimer.cancel()();
      swift_release();
      *(void *)(v2 + 344) = 0;
      swift_release();
    }
    swift_allocObject();
    swift_weakInit();
    type metadata accessor for DispatchTimer();
    swift_allocObject();
    *(void *)(v2 + 344) = DispatchTimer.init(deadline:repeating:leeway:queue:block:)();
    swift_release();
    if (*(void *)(v2 + 344))
    {
      swift_retain();
      DispatchTimer.resume()();
      swift_release();
    }
    sub_100748034();
  }
  else
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100010324(v6, (uint64_t)qword_10170EC30);
    swift_retain();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136315138;
      uint64_t v10 = v5 + OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix;
      uint64_t v12 = *(void *)(v5 + OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix);
      unint64_t v11 = *(void *)(v10 + 8);
      swift_bridgeObjectRetain();
      sub_1008FA0F0(v12, v11, (uint64_t *)&v14);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "%s - not available for publish.", v9, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_release();
    }
    type metadata accessor for SecureLocationsStewieError(0);
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100766750(&qword_101638540, type metadata accessor for SecureLocationsStewieError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v13 = v14;
    a1(0, v14);
  }
}

void sub_10073E814()
{
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100010324(v0, (uint64_t)qword_10170EC30);
  swift_retain_n();
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    v12[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136315138;
    swift_beginAccess();
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      uint64_t v5 = (char *)*(id *)(Strong + 328);
      swift_release();
      uint64_t v7 = *(void *)&v5[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix];
      unint64_t v6 = *(void *)&v5[OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix + 8];
      swift_bridgeObjectRetain();
    }
    else
    {
      unint64_t v6 = 0xE800000000000000;
      uint64_t v7 = 0x3A636F6C6574696CLL;
    }
    unint64_t v11 = (void *)sub_1008FA0F0(v7, v6, v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "%s timed out waiting to get a location fix from GPS", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  swift_beginAccess();
  uint64_t v8 = swift_weakLoadStrong();
  if (v8)
  {
    id v9 = *(id *)(v8 + 328);
    swift_release();
    type metadata accessor for SecureLocationsStewieError(0);
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100766750(&qword_101638540, type metadata accessor for SecureLocationsStewieError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v10 = type metadata accessor for Transaction();
    __chkstk_darwin(v10);
    static Transaction.named<A>(_:with:)();
  }
}

uint64_t sub_10073EB50()
{
  if (qword_101636CA0 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100010324(v0, (uint64_t)qword_10164CC28);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    uint64_t v5 = swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 136446210;
    sub_1008FA0F0(0xD00000000000002FLL, 0x8000000101406550, &v5);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "%{public}s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  sub_1007684E0();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  if (v6 != 1) {
    sub_100739800(v5);
  }
  return swift_release();
}

void sub_10073EE18(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v46 = (char *)v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = type metadata accessor for DispatchQoS();
  uint64_t v45 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  uint64_t v44 = (char *)v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  sub_100010324(v14, (uint64_t)qword_10170EC30);
  id v15 = a2;
  swift_bridgeObjectRetain();
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  int v42 = v17;
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = swift_slowAlloc();
    uint64_t v40 = a3;
    uint64_t v19 = v18;
    uint64_t v20 = swift_slowAlloc();
    v38[3] = v20;
    *(_DWORD *)uint64_t v19 = 134218242;
    id v47 = *(void **)(a1 + 16);
    aBlock[0] = (uint64_t)v20;
    uint64_t v41 = a4;
    v38[2] = (os_log_t)aBlock;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 12) = 2080;
    v38[1] = (os_log_t)(v19 + 14);
    uint64_t v21 = v11;
    uint64_t v22 = v10;
    id v23 = [v15 clientApp];
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v39 = a1;
    uint64_t v25 = v24;
    v38[0] = v16;
    unint64_t v27 = v26;

    uint64_t v10 = v22;
    uint64_t v11 = v21;
    uint64_t v28 = v25;
    uint64_t v5 = v4;
    a1 = v39;
    id v47 = (void *)sub_1008FA0F0(v28, v27, aBlock);
    a4 = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    os_log_t v29 = v38[0];
    _os_log_impl((void *)&_mh_execute_header, v38[0], (os_log_type_t)v42, "Unsubscribe for %ld IDs for clientApp %s", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    a3 = v40;
    swift_slowDealloc();

    if (*(void *)(a1 + 16))
    {
LABEL_5:
      int v30 = (void *)swift_allocObject();
      void v30[2] = a1;
      v30[3] = v5;
      v30[4] = v15;
      v30[5] = a3;
      v30[6] = a4;
      aBlock[4] = (uint64_t)sub_100768124;
      aBlock[5] = (uint64_t)v30;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      uint64_t aBlock[2] = (uint64_t)sub_1004B5480;
      aBlock[3] = (uint64_t)&unk_1015D34D8;
      uint64_t v31 = _Block_copy(aBlock);
      id v32 = v15;
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      uint64_t v33 = v44;
      static DispatchQoS.unspecified.getter();
      id v47 = _swiftEmptyArrayStorage;
      sub_100766750((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000588C((uint64_t *)&unk_10163F350);
      sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
      uint64_t v34 = v46;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v31);
      (*(void (**)(char *, uint64_t))(v11 + 8))(v34, v10);
      (*(void (**)(char *, uint64_t))(v45 + 8))(v33, v43);
      swift_release();
      return;
    }
  }
  else
  {

    swift_bridgeObjectRelease();
    if (*(void *)(a1 + 16)) {
      goto LABEL_5;
    }
  }
  unint64_t v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v35, v36))
  {
    uint64_t v37 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v37 = 0;
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "No findMyIds specified for Unsubscribe - not proceeding", v37, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_10073F38C(void *a1, uint64_t a2, char *a3, void (*a4)(id), uint64_t a5)
{
  uint64_t v140 = a5;
  id v139 = a4;
  int64_t v149 = a3;
  uint64_t v145 = a2;
  uint64_t v6 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v6 - 8);
  uint64_t v143 = (char *)&v130 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C((uint64_t *)&unk_101649E20);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v130 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for SecureLocationsUnsubscribeEndpoint();
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v130 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v12);
  os_log_type_t v17 = (char *)&v130 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v130 - v18;
  uint64_t v20 = enum case for FMNAccountType.searchParty(_:);
  uint64_t v21 = type metadata accessor for FMNAccountType();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 104))(v19, v20, v21);
  sub_100B64F94((uint64_t)&v19[*(int *)(v11 + 20)]);
  if (qword_101637070 != -1) {
    goto LABEL_65;
  }
  while (1)
  {
    uint64_t v22 = type metadata accessor for Logger();
    id v23 = sub_100010324(v22, (uint64_t)qword_10170EC30);
    sub_100768C34((uint64_t)v19, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for SecureLocationsUnsubscribeEndpoint);
    dispatch_queue_t v148 = v23;
    uint64_t v24 = Logger.logObject.getter();
    os_log_type_t v25 = static os_log_type_t.default.getter();
    BOOL v26 = os_log_type_enabled(v24, v25);
    uint64_t v147 = v19;
    uint64_t v146 = a1;
    if (v26)
    {
      unint64_t v27 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v154 = swift_slowAlloc();
      *(_DWORD *)unint64_t v27 = 136315138;
      sub_100768C34((uint64_t)v17, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for SecureLocationsUnsubscribeEndpoint);
      uint64_t v28 = String.init<A>(describing:)();
      aBlock[0] = sub_1008FA0F0(v28, v29, (uint64_t *)&v154);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100768C9C((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for SecureLocationsUnsubscribeEndpoint);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Unsubscribe endpoint %s", v27, 0xCu);
      swift_arrayDestroy();
      uint64_t v19 = v147;
      swift_slowDealloc();
      a1 = v146;
      swift_slowDealloc();
    }
    else
    {
      sub_100768C9C((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for SecureLocationsUnsubscribeEndpoint);
    }

    type metadata accessor for FindMyAppURLSessionFactory(0);
    swift_allocObject();
    uint64_t v30 = type metadata accessor for FMNMockingPreferences();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v10, 1, 1, v30);
    uint64_t v31 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)();
    type metadata accessor for ServerInteractionController(0);
    uint64_t v32 = swift_allocObject();
    sub_100768C34((uint64_t)v19, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for SecureLocationsUnsubscribeEndpoint);
    swift_retain();
    uint64_t v33 = (void *)sub_1004A64B8((uint64_t)v14, v31, v32);
    uint64_t v34 = v33;
    uint64_t v35 = a1[2];
    if (v35)
    {
      long long v141 = v33;
      uint64_t v142 = v31;
      swift_bridgeObjectRetain();
      os_log_type_t v36 = a1 + 5;
      a1 = _swiftEmptyArrayStorage;
      uint64_t v144 = v35;
      uint64_t v37 = v35;
      do
      {
        uint64_t v39 = *(v36 - 1);
        unint64_t v40 = *v36;
        swift_bridgeObjectRetain();
        uint64_t v41 = sub_100603A38(v39, v40);
        uint64_t v43 = v42;
        uint64_t v45 = v44;
        swift_bridgeObjectRelease();
        if (v45)
        {
          id v46 = [v149 subscriptionMode];
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            a1 = sub_100A71590(0, a1[2] + 1, 1, a1);
          }
          unint64_t v48 = a1[2];
          unint64_t v47 = a1[3];
          if (v48 >= v47 >> 1) {
            a1 = sub_100A71590((void *)(v47 > 1), v48 + 1, 1, a1);
          }
          a1[2] = v48 + 1;
          uint64_t v38 = &a1[4 * v48];
          os_log_t v38[4] = v41;
          v38[5] = v43;
          v38[6] = v45;
          v38[7] = v46;
        }
        v36 += 2;
        --v37;
      }
      while (v37);
      swift_bridgeObjectRelease();
      uint64_t v19 = v147;
      uint64_t v31 = v142;
      uint64_t v34 = v141;
      uint64_t v35 = v144;
      if (!a1[2])
      {
LABEL_26:
        swift_bridgeObjectRelease();
        uint64_t v69 = Logger.logObject.getter();
        os_log_type_t v70 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v69, v70))
        {
          unint64_t v71 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v71 = 0;
          unint64_t v72 = "No Unsubscribe request data generated. Not sending request";
          goto LABEL_28;
        }
LABEL_29:

        swift_release();
LABEL_30:
        swift_release();
        return sub_100768C9C((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for SecureLocationsUnsubscribeEndpoint);
      }
    }
    else
    {
      a1 = _swiftEmptyArrayStorage;
      if (!_swiftEmptyArrayStorage[2]) {
        goto LABEL_26;
      }
    }
    id v49 = [self currentDevice];
    if (!v49
      || (id v50 = v49,
          id v51 = [v49 uniqueDeviceIdentifier],
          v50,
          !v51))
    {
      swift_bridgeObjectRelease();
      uint64_t v62 = Logger.logObject.getter();
      os_log_type_t v63 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v62, v63))
      {
        id v64 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)id v64 = 0;
        _os_log_impl((void *)&_mh_execute_header, v62, v63, "Unable to get device identifier for server Unsubscribe", v64, 2u);
        swift_slowDealloc();
      }

      static String._unconditionallyBridgeFromObjectiveC(_:)();
      id v65 = objc_allocWithZone((Class)NSError);
      NSString v66 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      id v67 = [v65 initWithDomain:v66 code:4 userInfo:0];

      id v68 = v67;
      v139(v67);
      swift_release();

      goto LABEL_30;
    }
    uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v54 = v53;

    sub_10000588C(&qword_101644320);
    OS_dispatch_queue.sync<A>(execute:)();
    if (!*((void *)&v154 + 1))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v69 = Logger.logObject.getter();
      os_log_type_t v70 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v69, v70))
      {
        unint64_t v71 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v71 = 0;
        unint64_t v72 = "No APS token. Not proceeding with SubscribeAndFetch request";
LABEL_28:
        _os_log_impl((void *)&_mh_execute_header, v69, v70, v72, v71, 2u);
        swift_slowDealloc();
      }
      goto LABEL_29;
    }
    uint64_t v144 = v35;
    uint64_t v55 = *((void *)&v154 + 1);
    unint64_t v138 = v154;
    id v56 = v149;
    id v57 = [v149 clientApp];
    uint64_t v133 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v59 = v58;

    uint64_t v134 = v55;
    swift_bridgeObjectRetain();
    uint64_t v137 = v54;
    swift_bridgeObjectRetain();
    uint64_t v136 = v59;
    swift_bridgeObjectRetain();
    id v60 = [v56 subscriptionMode];
    uint64_t v142 = v31;
    long long v141 = v34;
    if (v60 == (id)1)
    {
      if (qword_101637440 != -1) {
        id v60 = (id)swift_once();
      }
      uint64_t v61 = qword_10170F218;
      __chkstk_darwin(v60);
      *((void *)&v130 - 4) = v146;
      *((void *)&v130 - 3) = v61;
      *((unsigned char *)&v130 - 16) = 1;
      swift_retain();
      sub_10000588C(&qword_101647BB0);
      OS_dispatch_queue.sync<A>(execute:)();
      swift_release();
      uint64_t v135 = (void *)v154;
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v135 = _swiftEmptyDictionarySingleton;
    }
    id v74 = [v149 subscriptionMode];
    long long v75 = 0uLL;
    if (v74 == (id)2)
    {
      uint64_t v76 = (uint64_t)v147;
      if (qword_101637440 != -1) {
        swift_once();
      }
      swift_retain();
      sub_10000588C(&qword_101647BC8);
      OS_dispatch_queue.sync<A>(execute:)();
      swift_release();
      if ((void)v156)
      {
        long long v131 = v154;
        long long v130 = v155;
        char v77 = (char)v157;
        long long v132 = v156;
        swift_bridgeObjectRelease();
        long long v78 = v130;
        long long v79 = v132;
        long long v75 = v131;
      }
      else
      {
        char v77 = 0;
        long long v78 = 0uLL;
        long long v79 = 0uLL;
        long long v75 = 0uLL;
      }
    }
    else
    {
      char v77 = 0;
      long long v78 = 0uLL;
      long long v79 = 0uLL;
      uint64_t v76 = (uint64_t)v147;
    }
    *(void *)&long long v154 = v138;
    *((void *)&v154 + 1) = v134;
    *(void *)&long long v155 = v52;
    *((void *)&v155 + 1) = v137;
    *(void *)&long long v156 = v133;
    *((void *)&v156 + 1) = v136;
    v157 = v135;
    long long v158 = v75;
    long long v159 = v78;
    long long v160 = v79;
    char v161 = v77;
    uint64_t v80 = v79;
    v162 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    id v81 = sub_100B65AC8((uint64_t)a1, (uint64_t)&v154);
    if (!v81) {
      break;
    }
    uint64_t v84 = (uint64_t)v81;
    unint64_t v85 = v83;
    uint64_t v133 = v82;
    id v86 = Logger.logObject.getter();
    os_log_type_t v87 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v86, v87))
    {
      uint64_t v88 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v88 = 0;
      _os_log_impl((void *)&_mh_execute_header, v86, v87, "Sending Unsubscribe server request", v88, 2u);
      swift_slowDealloc();
    }

    uint64_t v89 = v133;
    sub_10076813C(v84, v133, v85);
    swift_bridgeObjectRetain();
    sub_1000361E0(v89, v85);
    uint64_t v90 = Logger.logObject.getter();
    uint64_t v91 = v84;
    os_log_type_t v92 = static os_log_type_t.debug.getter();
    BOOL v93 = os_log_type_enabled(v90, v92);
    unint64_t v138 = v85;
    *(void *)&long long v132 = v80;
    if (v93)
    {
      id v94 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)id v94 = 136315138;
      *(void *)&long long v130 = v94 + 4;
      swift_bridgeObjectRetain();
      uint64_t v95 = Dictionary.description.getter();
      unint64_t v97 = v96;
      swift_bridgeObjectRelease();
      uint64_t v150 = sub_1008FA0F0(v95, v97, aBlock);
      uint64_t v89 = v133;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1001D7860(v91, v89, v138);
      sub_1001D7860(v91, v89, v138);
      _os_log_impl((void *)&_mh_execute_header, v90, v92, "Unsubscribe request headers %s", v94, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      unint64_t v85 = v138;
      swift_slowDealloc();
    }
    else
    {
      sub_1001D7860(v91, v89, v85);
      sub_1001D7860(v91, v89, v85);
    }

    swift_bridgeObjectRetain();
    sub_1000361E0(v89, v85);
    swift_bridgeObjectRetain();
    sub_1000361E0(v89, v85);
    uint64_t v105 = Logger.logObject.getter();
    os_log_type_t v106 = static os_log_type_t.debug.getter();
    BOOL v107 = os_log_type_enabled(v105, v106);
    *(void *)&long long v131 = v91;
    if (v107)
    {
      uint64_t v108 = v91;
      unint64_t v109 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)unint64_t v109 = 136315138;
      static String.Encoding.utf8.getter();
      uint64_t v110 = String.init(data:encoding:)();
      if (v111)
      {
        unint64_t v112 = v111;
      }
      else
      {
        uint64_t v110 = 7104878;
        unint64_t v112 = 0xE300000000000000;
      }
      uint64_t v150 = sub_1008FA0F0(v110, v112, aBlock);
      uint64_t v89 = v133;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1001D7860(v108, v89, v138);
      uint64_t v113 = v108;
      unint64_t v85 = v138;
      sub_1001D7860(v113, v89, v138);
      _os_log_impl((void *)&_mh_execute_header, v105, v106, "Unsubscribe request body %s", v109, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1001D7860(v91, v89, v85);
      sub_1001D7860(v91, v89, v85);
    }

    uint64_t v114 = v144;
    if (!v144)
    {
      int64_t v121 = v146;
LABEL_62:
      swift_bridgeObjectRelease();
      uint64_t v122 = v131;
      sub_10076813C(v131, v89, v85);
      sub_1004ABB88(v122, v89, v85, 0, v141);
      sub_1001D7860(v122, v89, v85);
      unint64_t v123 = (void *)swift_allocObject();
      uint64_t v124 = v145;
      v123[2] = v145;
      v123[3] = v121;
      id v125 = v149;
      uint64_t v126 = v139;
      v123[4] = v149;
      v123[5] = v126;
      uint64_t v127 = v140;
      v123[6] = v140;
      swift_bridgeObjectRetain();
      swift_retain();
      id v128 = v125;
      swift_retain();
      Future.addSuccess(block:)();
      swift_release();
      swift_release();
      unint64_t v129 = (void *)swift_allocObject();
      v129[2] = v124;
      v129[3] = v126;
      v129[4] = v127;
      swift_retain();
      swift_retain();
      Future.addFailure(block:)();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      sub_1001D7860(v122, v89, v138);
      swift_release();
      sub_100768C9C((uint64_t)v147, (uint64_t (*)(void))type metadata accessor for SecureLocationsUnsubscribeEndpoint);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    uint64_t v144 = *(void *)(v145 + 48);
    uint64_t v143 = (char *)v152;
    uint64_t v115 = (char **)(swift_bridgeObjectRetain() + 40);
    while (1)
    {
      uint64_t v116 = (uint64_t)*(v115 - 1);
      uint64_t v14 = *v115;
      uint64_t v117 = v144;
      dispatch_queue_t v148 = *(dispatch_queue_t *)(v144 + 16);
      uint64_t v118 = swift_allocObject();
      *(void *)(v118 + 16) = v117;
      *(void *)(v118 + 24) = v116;
      uint64_t v10 = v149;
      *(void *)(v118 + 32) = v14;
      *(void *)(v118 + 40) = v10;
      *(unsigned char *)(v118 + 48) = 3;
      os_log_type_t v17 = (char *)swift_allocObject();
      *((void *)v17 + 2) = sub_100766A88;
      *((void *)v17 + 3) = v118;
      v152[2] = sub_1003B7AE0;
      uint64_t v153 = v17;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      v152[0] = sub_1000A70B0;
      v152[1] = &unk_1015D3550;
      uint64_t v119 = _Block_copy(aBlock);
      uint64_t v19 = v153;
      swift_bridgeObjectRetain_n();
      unint64_t v120 = v10;
      swift_retain();
      swift_retain();
      swift_release();
      dispatch_sync(v148, v119);
      _Block_release(v119);
      LOBYTE(v117) = swift_isEscapingClosureAtFileLocation();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      if (v117) {
        break;
      }
      v115 += 2;
      if (!--v114)
      {
        swift_bridgeObjectRelease();
        int64_t v121 = v146;
        uint64_t v89 = v133;
        unint64_t v85 = v138;
        goto LABEL_62;
      }
    }
    __break(1u);
LABEL_65:
    swift_once();
  }
  swift_bridgeObjectRelease();
  long long v98 = Logger.logObject.getter();
  os_log_type_t v99 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v98, v99))
  {
    uint64_t v100 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v100 = 0;
    _os_log_impl((void *)&_mh_execute_header, v98, v99, "Failed to create request for server SubscribeAndFetch", v100, 2u);
    swift_slowDealloc();
  }

  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v101 = objc_allocWithZone((Class)NSError);
  NSString v102 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v103 = [v101 initWithDomain:v102 code:4 userInfo:0];

  id v104 = v103;
  v139(v103);
  swift_release();

  swift_release();
  sub_100768C9C(v76, (uint64_t (*)(void))type metadata accessor for SecureLocationsUnsubscribeEndpoint);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1007408F4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v33 = a5;
  uint64_t v34 = a6;
  uint64_t v32 = a4;
  uint64_t v30 = a3;
  uint64_t v37 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v40 = *(void *)(v37 - 8);
  __chkstk_darwin(v37);
  os_log_type_t v36 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DispatchQoS();
  uint64_t v38 = *(void *)(v9 - 8);
  uint64_t v39 = v9;
  __chkstk_darwin(v9);
  uint64_t v31 = (char *)&v30 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for FMNServerInteractionController.FMNResponseFields();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = *(void *)(a2 + 296);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, v11);
  unint64_t v15 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  unint64_t v16 = (v13 + v15 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = (v16 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = (v17 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v19 + v15, v14, v11);
  *(void *)(v19 + v16) = v30;
  uint64_t v21 = v32;
  uint64_t v20 = v33;
  *(void *)(v19 + v17) = v32;
  *(void *)(v19 + v18) = a2;
  uint64_t v22 = (void *)(v19 + ((v18 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v23 = v34;
  *uint64_t v22 = v20;
  v22[1] = v23;
  aBlock[4] = sub_100768408;
  aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  uint64_t aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015D3640;
  uint64_t v24 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  id v25 = v21;
  swift_retain();
  swift_retain();
  BOOL v26 = v31;
  static DispatchQoS.unspecified.getter();
  uint64_t v41 = _swiftEmptyArrayStorage;
  sub_100766750((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v28 = v36;
  uint64_t v27 = v37;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v24);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v28, v27);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v26, v39);
  return swift_release();
}

void sub_100740CEC(uint64_t a1, void *a2, char *a3, void *a4, void (*a5)(void), void *a6)
{
  uint64_t v12 = type metadata accessor for FMNServerInteractionController.FMNResponseFields();
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  unint64_t v15 = (char *)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (FMNServerInteractionController.FMNResponseFields.statusCode.getter() == 200)
  {
    if (qword_101637070 != -1) {
      goto LABEL_22;
    }
    while (1)
    {
      NSString v66 = a6;
      id v67 = a5;
      uint64_t v16 = type metadata accessor for Logger();
      uint64_t v17 = sub_100010324(v16, (uint64_t)qword_10170EC30);
      swift_bridgeObjectRetain_n();
      unint64_t v18 = a3;
      uint64_t v65 = v17;
      uint64_t v19 = (uint64_t)a2;
      uint64_t v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.default.getter();
      BOOL v22 = os_log_type_enabled(v20, v21);
      uint64_t v69 = v18;
      if (v22)
      {
        uint64_t v23 = swift_slowAlloc();
        uint64_t v64 = swift_slowAlloc();
        aBlock[0] = v64;
        *(_DWORD *)uint64_t v23 = 134218498;
        uint64_t v73 = *(void *)(v19 + 16);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v23 + 12) = 2080;
        id v68 = a4;
        uint64_t v24 = v18;
        id v25 = [v18 clientApp];
        uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v28 = v27;

        uint64_t v73 = sub_1008FA0F0(v26, v28, aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        swift_bridgeObjectRelease();
        *(_WORD *)(v23 + 22) = 2080;
        swift_bridgeObjectRetain();
        uint64_t v29 = Array.description.getter();
        unint64_t v31 = v30;
        swift_bridgeObjectRelease();
        uint64_t v73 = sub_1008FA0F0(v29, v31, aBlock);
        a4 = v68;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "Unsubscribe received status 200 - Success for %ld IDs for clientApp %s ids %s", (uint8_t *)v23, 0x20u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        uint64_t v32 = *(void *)(v19 + 16);
        if (!v32) {
          goto LABEL_15;
        }
      }
      else
      {

        swift_bridgeObjectRelease_n();
        uint64_t v32 = *(void *)(v19 + 16);
        if (!v32)
        {
LABEL_15:
          swift_bridgeObjectRetain();
          id v56 = Logger.logObject.getter();
          os_log_type_t v57 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v56, v57))
          {
            uint64_t v58 = (uint8_t *)swift_slowAlloc();
            *(_DWORD *)uint64_t v58 = 134217984;
            aBlock[0] = v32;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v56, v57, "Unsubscribe removed subscription for %ld subs", v58, 0xCu);
            swift_slowDealloc();
          }
          else
          {

            swift_bridgeObjectRelease();
          }
          v67(0);
          return;
        }
      }
      a5 = (void (*)(void))a4[6];
      id v68 = v71;
      swift_bridgeObjectRetain();
      uint64_t v64 = v19;
      a6 = (void *)(v19 + 40);
      uint64_t v63 = v32;
      a3 = (char *)v32;
      id v49 = v69;
      while (1)
      {
        uint64_t v50 = *(a6 - 1);
        uint64_t v51 = *a6;
        uint64_t v52 = *((void *)a5 + 2);
        uint64_t v53 = (void *)swift_allocObject();
        void v53[2] = a5;
        v53[3] = v50;
        v53[4] = v51;
        v53[5] = v49;
        a4 = (void *)swift_allocObject();
        a4[2] = sub_1007684C4;
        a4[3] = v53;
        v71[2] = sub_1003B7AE0;
        unint64_t v72 = a4;
        aBlock[0] = (uint64_t)_NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        v71[0] = sub_1000A70B0;
        v71[1] = &unk_1015D36B8;
        uint64_t v54 = _Block_copy(aBlock);
        a2 = v72;
        swift_bridgeObjectRetain_n();
        uint64_t v55 = v49;
        swift_retain();
        swift_retain();
        swift_release();
        dispatch_sync(v52, v54);
        _Block_release(v54);
        LOBYTE(v54) = swift_isEscapingClosureAtFileLocation();
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        if (v54) {
          break;
        }
        a6 += 2;
        if (!--a3)
        {
          swift_bridgeObjectRelease();
          uint64_t v32 = v63;
          goto LABEL_15;
        }
      }
      __break(1u);
LABEL_22:
      swift_once();
    }
  }
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v33 = type metadata accessor for Logger();
  sub_100010324(v33, (uint64_t)qword_10170EC30);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1, v12);
  swift_bridgeObjectRetain_n();
  uint64_t v34 = a3;
  uint64_t v35 = Logger.logObject.getter();
  os_log_type_t v36 = static os_log_type_t.error.getter();
  int v37 = v36;
  if (os_log_type_enabled(v35, v36))
  {
    uint64_t v38 = swift_slowAlloc();
    id v67 = a5;
    uint64_t v39 = v38;
    uint64_t v40 = swift_slowAlloc();
    NSString v66 = a6;
    aBlock[0] = v40;
    *(_DWORD *)uint64_t v39 = 134218754;
    LODWORD(v69) = v37;
    uint64_t v41 = FMNServerInteractionController.FMNResponseFields.statusCode.getter();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    uint64_t v73 = v41;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v39 + 12) = 2048;
    uint64_t v73 = a2[2];
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v39 + 22) = 2080;
    id v42 = [v34 clientApp];
    uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v45 = v44;

    uint64_t v73 = sub_1008FA0F0(v43, v45, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v39 + 32) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v46 = Array.description.getter();
    unint64_t v48 = v47;
    swift_bridgeObjectRelease();
    uint64_t v73 = sub_1008FA0F0(v46, v48, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v35, (os_log_type_t)v69, "Error during Unsubscribe %ld for %ld IDs for clientApp %s ids %s", (uint8_t *)v39, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    a5 = v67;
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);

    swift_bridgeObjectRelease_n();
  }
  static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v59 = objc_allocWithZone((Class)NSError);
  NSString v60 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v61 = [v59 initWithDomain:v60 code:4 userInfo:0];

  id v62 = v61;
  a5(v61);
}

uint64_t sub_1007415C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[0] = type metadata accessor for DispatchQoS();
  uint64_t v11 = *(void *)(v17[0] - 8);
  __chkstk_darwin(v17[0]);
  uint64_t v13 = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = (void *)swift_allocObject();
  v14[2] = a1;
  v14[3] = a3;
  v14[4] = a4;
  aBlock[4] = sub_1007682F8;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  uint64_t aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015D35F0;
  unint64_t v15 = _Block_copy(aBlock);
  swift_errorRetain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  v17[1] = _swiftEmptyArrayStorage;
  sub_100766750((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  (*(void (**)(char *, void))(v11 + 8))(v13, v17[0]);
  return swift_release();
}

uint64_t sub_100741894(unsigned char *a1, uint64_t *a2)
{
  uint64_t v108 = type metadata accessor for DispatchWorkItemFlags();
  unint64_t v4 = *(void *)(v108 - 8);
  __chkstk_darwin(v108);
  BOOL v107 = (char *)&v95 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v106 = type metadata accessor for DispatchQoS();
  uint64_t v99 = *(void *)(v106 - 8);
  __chkstk_darwin(v106);
  uint64_t v105 = (char *)&v95 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v95 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for SecureLocationsCachedSharedKey(0);
  uint64_t v113 = *(void *)(v10 - 8);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v95 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (uint64_t)&v95 - v15;
  uint64_t v17 = __chkstk_darwin(v14);
  unint64_t v19 = (unint64_t)&v95 - v18;
  __chkstk_darwin(v17);
  uint64_t v128 = (uint64_t)&v95 - v20;
  uint64_t v21 = type metadata accessor for UUID();
  uint64_t v117 = *(void *)(v21 - 8);
  uint64_t v22 = __chkstk_darwin(v21);
  id v125 = (char *)&v95 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v127 = (char *)&v95 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v124 = (char *)&v95 - v27;
  uint64_t result = __chkstk_darwin(v26);
  if (*a1 == 1)
  {
    uint64_t v126 = (unsigned int (**)(char *, uint64_t, uint64_t))((char *)&v95 - v29);
    unint64_t v98 = v4;
    uint64_t v116 = v13;
    uint64_t v104 = a2[3];
    swift_retain();
    unint64_t v30 = sub_100B6DC70();
    swift_release();
    uint64_t v111 = v30[2];
    if (v111)
    {
      if (qword_101637070 != -1) {
LABEL_44:
      }
        swift_once();
      uint64_t v31 = type metadata accessor for Logger();
      uint64_t v32 = sub_100010324(v31, (uint64_t)qword_10170EC30);
      swift_bridgeObjectRetain();
      uint64_t v121 = v32;
      uint64_t v33 = Logger.logObject.getter();
      os_log_type_t v34 = static os_log_type_t.default.getter();
      BOOL v35 = os_log_type_enabled(v33, v34);
      uint64_t v115 = v10;
      unint64_t v112 = v30;
      id v103 = a2;
      if (v35)
      {
        os_log_type_t v36 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)os_log_type_t v36 = 134217984;
        uint64_t aBlock = v30[2];
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v33, v34, "Shared keys found %ld. Determining if we need to delete", v36, 0xCu);
        swift_slowDealloc();
      }
      else
      {

        swift_bridgeObjectRelease();
      }
      if (qword_101637080 != -1) {
        swift_once();
      }
      unint64_t v120 = v19;
      uint64_t v114 = v16;
      swift_retain();
      sub_10000588C(&qword_10164D1C0);
      OS_dispatch_queue.sync<A>(execute:)();
      swift_release();
      unint64_t v38 = *(void *)(aBlock + 16);
      unint64_t v30 = _swiftEmptyArrayStorage;
      *(void *)&long long v97 = aBlock;
      if (v38)
      {
        unint64_t v123 = (void (**)(char *, uint64_t))(v117 + 16);
        p_uint64_t aBlock = (uint64_t *)(v117 + 32);
        NSString v102 = (void (**)(char *, uint64_t))(v117 + 8);
        uint64_t v39 = (unint64_t *)(aBlock + 64);
        *(void *)&long long v37 = 136315394;
        long long v101 = v37;
        uint64_t v100 = (void (**)(char *, uint64_t))((char *)&type metadata for Any + 8);
        do
        {
          unint64_t v119 = v38;
          uint64_t v41 = *(v39 - 2);
          uint64_t v42 = *(v39 - 1);
          unint64_t v43 = *v39;
          swift_bridgeObjectRetain();
          uint64_t v118 = v41;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v110 = v42;
          uint64_t v44 = String.utf8Data.getter();
          unint64_t v46 = v45;
          uint64_t aBlock = v44;
          uint64_t v131 = v45;
          sub_1000362FC();
          unint64_t v47 = v126;
          DataProtocol.stableUUID.getter();
          sub_10001CFB8(v44, v46);
          unint64_t v48 = *v123;
          ((void (*)(char *, unsigned int (**)(char *, uint64_t, uint64_t), uint64_t))*v123)(v124, v47, v21);
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v30 = (void *)sub_100A6F668(0, v30[2] + 1, 1, (unint64_t)v30);
          }
          unint64_t v50 = v30[2];
          unint64_t v49 = v30[3];
          if (v50 >= v49 >> 1) {
            unint64_t v30 = (void *)sub_100A6F668(v49 > 1, v50 + 1, 1, (unint64_t)v30);
          }
          void v30[2] = v50 + 1;
          unint64_t v51 = (*(unsigned __int8 *)(v117 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v117 + 80);
          uint64_t v122 = v30;
          (*(void (**)(char *, char *, uint64_t))(v117 + 32))((char *)v30 + v51 + *(void *)(v117 + 72) * v50, v124, v21);
          uint64_t v52 = (char *)v126;
          ((void (*)(char *, unsigned int (**)(char *, uint64_t, uint64_t), uint64_t))v48)(v127, v126, v21);
          swift_bridgeObjectRetain();
          uint64_t v16 = v118;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          uint64_t v53 = Logger.logObject.getter();
          os_log_type_t v54 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v53, v54))
          {
            uint64_t v55 = swift_slowAlloc();
            uint64_t aBlock = swift_slowAlloc();
            *(_DWORD *)uint64_t v55 = v101;
            swift_bridgeObjectRetain();
            *(void *)(v55 + 4) = sub_1008FA0F0(v110, v43, &aBlock);
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            *(_WORD *)(v55 + 12) = 2080;
            sub_100766750((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
            uint64_t v56 = dispatch thunk of CustomStringConvertible.description.getter();
            *(void *)(v55 + 14) = sub_1008FA0F0(v56, v57, &aBlock);
            swift_bridgeObjectRelease();
            uint64_t v58 = *v102;
            (*v102)(v127, v21);
            _os_log_impl((void *)&_mh_execute_header, v53, v54, "Handle serverId %s UUID %s", (uint8_t *)v55, 0x16u);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            v58((char *)v126, v21);
          }
          else
          {

            uint64_t v40 = *v102;
            (*v102)(v127, v21);
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            v40(v52, v21);
          }
          v39 += 5;
          unint64_t v38 = v119 - 1;
          unint64_t v30 = v122;
        }
        while (v119 != 1);
      }
      swift_bridgeObjectRelease();
      unint64_t v19 = 0;
      id v59 = v112;
      uint64_t v110 = (uint64_t)v112
           + ((*(unsigned __int8 *)(v113 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v113 + 80));
      p_uint64_t aBlock = &aBlock;
      a2 = (uint64_t *)(v117 + 56);
      uint64_t v126 = (unsigned int (**)(char *, uint64_t, uint64_t))(v117 + 48);
      uint64_t v127 = (char *)(v117 + 16);
      unint64_t v123 = (void (**)(char *, uint64_t))(v117 + 8);
      uint64_t v124 = (char *)(v117 + 32);
      NSString v102 = (void (**)(char *, uint64_t))v132;
      *(void *)&long long v101 = v98 + 8;
      uint64_t v100 = (void (**)(char *, uint64_t))(v99 + 8);
      *(void *)&long long v60 = 136315138;
      long long v97 = v60;
      unint64_t v96 = (char *)&type metadata for Any + 8;
      unint64_t v98 = (v117 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
      *(void *)&long long v60 = 136315394;
      long long v95 = v60;
      uint64_t v10 = v120;
      uint64_t v122 = v30;
      do
      {
        if (v19 >= v59[2])
        {
          __break(1u);
          goto LABEL_44;
        }
        uint64_t v61 = v128;
        sub_100768C34(v110 + *(void *)(v113 + 72) * v19, v128, type metadata accessor for SecureLocationsCachedSharedKey);
        sub_100768C34(v61, v10, type metadata accessor for SecureLocationsCachedSharedKey);
        id v62 = Logger.logObject.getter();
        os_log_type_t v63 = static os_log_type_t.default.getter();
        BOOL v64 = os_log_type_enabled(v62, v63);
        unint64_t v119 = v19;
        if (v64)
        {
          uint64_t v65 = (uint8_t *)swift_slowAlloc();
          uint64_t aBlock = swift_slowAlloc();
          *(_DWORD *)uint64_t v65 = v97;
          sub_100766750((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v66 = dispatch thunk of CustomStringConvertible.description.getter();
          unint64_t v129 = (void *)sub_1008FA0F0(v66, v67, &aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_100768C9C(v120, type metadata accessor for SecureLocationsCachedSharedKey);
          _os_log_impl((void *)&_mh_execute_header, v62, v63, "Cached key identifier %s", v65, 0xCu);
          swift_arrayDestroy();
          unint64_t v30 = v122;
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_100768C9C(v10, type metadata accessor for SecureLocationsCachedSharedKey);
        }

        uint64_t v68 = v30[2];
        if (v68)
        {
          uint64_t v69 = (char *)v30
              + ((*(unsigned __int8 *)(v117 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v117 + 80));
          uint64_t v70 = *(void *)(v117 + 72);
          unint64_t v71 = *(void (**)(char *, char *, uint64_t))(v117 + 16);
          swift_bridgeObjectRetain();
          while (1)
          {
            v71(v9, v69, v21);
            uint64_t v16 = *a2;
            ((void (*)(char *, void, uint64_t, uint64_t))*a2)(v9, 0, 1, v21);
            if ((*v126)(v9, 1, v21) == 1) {
              break;
            }
            unint64_t v72 = v125;
            (*(void (**)(char *, char *, uint64_t))v124)(v125, v9, v21);
            sub_100766750((unint64_t *)&qword_10163B8F0, (void (*)(uint64_t))&type metadata accessor for UUID);
            char v73 = dispatch thunk of static Equatable.== infix(_:_:)();
            (*v123)(v72, v21);
            if (v73)
            {
              unint64_t v30 = v122;
              swift_bridgeObjectRelease();
              sub_100768C9C(v128, type metadata accessor for SecureLocationsCachedSharedKey);
              goto LABEL_25;
            }
            v69 += v70;
            if (!--v68) {
              goto LABEL_37;
            }
          }
        }
        else
        {
          uint64_t v16 = *a2;
          swift_bridgeObjectRetain();
LABEL_37:
          ((void (*)(char *, uint64_t, uint64_t, uint64_t))v16)(v9, 1, 1, v21);
        }
        swift_bridgeObjectRelease();
        id v74 = (uint64_t *)(v128 + *(int *)(v115 + 20));
        uint64_t v76 = *v74;
        unint64_t v75 = v74[1];
        swift_bridgeObjectRetain();
        sub_100B9C7A8(v76, v75);
        uint64_t v77 = v103[2];
        uint64_t v118 = *(void *)(v77 + 16);
        long long v78 = (void *)swift_allocObject();
        v78[2] = v76;
        v78[3] = v75;
        v78[4] = v77;
        v78[5] = SharingCircleWildAdvertisementKey.init(key:);
        v78[6] = 0;
        v132[2] = sub_100768670;
        v132[3] = v78;
        uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
        uint64_t v131 = 1107296256;
        v132[0] = sub_1004B5480;
        v132[1] = &unk_1015D3C30;
        long long v79 = _Block_copy(&aBlock);
        swift_bridgeObjectRetain();
        swift_retain();
        uint64_t v80 = v105;
        static DispatchQoS.unspecified.getter();
        unint64_t v129 = _swiftEmptyArrayStorage;
        sub_100766750((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_10000588C((uint64_t *)&unk_10163F350);
        sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
        id v81 = v107;
        uint64_t v82 = v108;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        OS_dispatch_queue.async(group:qos:flags:execute:)();
        _Block_release(v79);
        uint64_t v83 = v128;
        (*(void (**)(char *, uint64_t))v101)(v81, v82);
        (*v100)(v80, v106);
        swift_bridgeObjectRelease();
        swift_release();
        uint64_t v84 = v114;
        sub_100768C34(v83, v114, type metadata accessor for SecureLocationsCachedSharedKey);
        uint64_t v85 = (uint64_t)v116;
        sub_100768C34(v83, (uint64_t)v116, type metadata accessor for SecureLocationsCachedSharedKey);
        id v86 = Logger.logObject.getter();
        os_log_type_t v87 = static os_log_type_t.default.getter();
        uint64_t v16 = v87;
        if (os_log_type_enabled(v86, v87))
        {
          uint64_t v88 = swift_slowAlloc();
          uint64_t v118 = swift_slowAlloc();
          uint64_t aBlock = v118;
          *(_DWORD *)uint64_t v88 = v95;
          uint64_t v89 = (uint64_t *)(v84 + *(int *)(v115 + 20));
          uint64_t v90 = *v89;
          unint64_t v91 = v89[1];
          swift_bridgeObjectRetain();
          unint64_t v129 = (void *)sub_1008FA0F0(v90, v91, &aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_100768C9C(v114, type metadata accessor for SecureLocationsCachedSharedKey);
          *(_WORD *)(v88 + 12) = 2080;
          uint64_t v99 = v88 + 14;
          sub_100766750((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
          uint64_t v92 = (uint64_t)v116;
          uint64_t v93 = dispatch thunk of CustomStringConvertible.description.getter();
          unint64_t v129 = (void *)sub_1008FA0F0(v93, v94, &aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_100768C9C(v92, type metadata accessor for SecureLocationsCachedSharedKey);
          _os_log_impl((void *)&_mh_execute_header, v86, (os_log_type_t)v16, "Removing keys for %s %s", (uint8_t *)v88, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          sub_100768C9C(v85, type metadata accessor for SecureLocationsCachedSharedKey);
          sub_100768C9C(v84, type metadata accessor for SecureLocationsCachedSharedKey);
        }
        sub_100768C9C(v128, type metadata accessor for SecureLocationsCachedSharedKey);
        unint64_t v30 = v122;
LABEL_25:
        uint64_t v10 = v120;
        unint64_t v19 = v119 + 1;
        id v59 = v112;
      }
      while (v119 + 1 != v111);
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    else
    {
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t sub_100742B30(uint64_t *a1, char *a2)
{
  uint64_t v4 = *a1;
  uint64_t v3 = (void *)a1[1];
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v5 = type metadata accessor for Logger();
  sub_100010324(v5, (uint64_t)qword_10170EC30);
  swift_bridgeObjectRetain_n();
  uint64_t v6 = Logger.logObject.getter();
  os_log_type_t v7 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc();
    uint64_t v12 = swift_slowAlloc();
    *(_DWORD *)uint64_t v8 = 136315138;
    swift_bridgeObjectRetain();
    sub_1008FA0F0(v4, (unint64_t)v3, &v12);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Received sink of friend stopped sharing %s", v8, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  id v9 = [objc_allocWithZone((Class)SPSecureLocationsSubscriptionContext) init];
  NSString v10 = String._bridgeToObjectiveC()();
  [v9 setClientApp:v10];

  [v9 setSubscriptionMode:2];
  swift_bridgeObjectRetain();
  swift_retain();
  sub_100761DDC(v4, v3, v9, a2, (uint64_t)a2, v4, (uint64_t)v3);

  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_100742D8C(uint64_t a1, unint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v81 = type metadata accessor for BeaconSharingSessionContext();
  __chkstk_darwin(v81);
  uint64_t v82 = (char *)&v78 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v9 - 8);
  long long v78 = (char *)&v78 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C(&qword_10163CBB8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v78 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for SecureLocationsSubscription();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v78 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v93 = 0uLL;
  uint64_t v86 = *(void *)(a4 + 48);
  uint64_t v87 = a1;
  uint64_t v84 = a1;
  uint64_t v85 = (char *)a2;
  unint64_t v88 = a2;
  uint64_t v89 = a3;
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v18 = 0;
  int v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14);
  uint64_t v83 = a3;
  if (v19 == 1)
  {
    sub_10001DAB4((uint64_t)v13, &qword_10163CBB8);
    uint64_t v20 = v84;
    uint64_t v21 = v85;
    uint64_t v22 = a4;
  }
  else
  {
    uint64_t v79 = 0;
    sub_100767F00((uint64_t)v13, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for SecureLocationsSubscription);
    uint64_t v23 = (uint64_t)v17;
    if (*(void *)&v17[*(int *)(v14 + 32) + 8])
    {
      uint64_t v80 = a4;
      uint64_t v24 = qword_101637080;
      swift_bridgeObjectRetain();
      if (v24 != -1) {
        swift_once();
      }
      swift_retain();
      uint64_t v25 = Data.init(base64Encoded:options:)();
      if (v26 >> 60 == 15)
      {
        if (qword_101637070 != -1) {
          swift_once();
        }
        uint64_t v27 = type metadata accessor for Logger();
        sub_100010324(v27, (uint64_t)qword_10170EC30);
        unint64_t v28 = Logger.logObject.getter();
        os_log_type_t v29 = static os_log_type_t.default.getter();
        BOOL v30 = os_log_type_enabled(v28, v29);
        unint64_t v31 = (unint64_t)v85;
        if (v30)
        {
          uint64_t v32 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v32 = 0;
          _os_log_impl((void *)&_mh_execute_header, v28, v29, "failed to decode server provided push identifier", v32, 2u);
          swift_slowDealloc();
        }
        swift_release();
        swift_bridgeObjectRelease();

        uint64_t v33 = 0;
        uint64_t v34 = 0;
      }
      else
      {
        uint64_t v35 = v25;
        unint64_t v36 = v26;
        static String.Encoding.utf8.getter();
        uint64_t v33 = String.init(data:encoding:)();
        uint64_t v34 = v37;
        sub_100037A24(v35, v36);
        swift_release();
        swift_bridgeObjectRelease();
        unint64_t v31 = (unint64_t)v85;
      }
      swift_bridgeObjectRelease();
      *(void *)&long long v93 = v33;
      *((void *)&v93 + 1) = v34;
      if (qword_101636B00 != -1) {
        swift_once();
      }
      uint64_t v38 = type metadata accessor for Logger();
      sub_100010324(v38, (uint64_t)qword_10170DE98);
      swift_bridgeObjectRetain_n();
      uint64_t v39 = Logger.logObject.getter();
      os_log_type_t v40 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v39, v40))
      {
        uint64_t v41 = swift_slowAlloc();
        *(void *)&long long v91 = swift_slowAlloc();
        *(_DWORD *)uint64_t v41 = 141558787;
        *(void *)&long long v92 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v41 + 12) = 2081;
        swift_beginAccess();
        long long v92 = v93;
        swift_bridgeObjectRetain();
        sub_10000588C(&qword_101644320);
        uint64_t v42 = String.init<A>(describing:)();
        *(void *)&long long v92 = sub_1008FA0F0(v42, v43, (uint64_t *)&v91);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        *(_WORD *)(v41 + 22) = 2160;
        *(void *)&long long v92 = 1752392040;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v41 + 32) = 2081;
        swift_bridgeObjectRetain();
        uint64_t v44 = v84;
        *(void *)&long long v92 = sub_1008FA0F0(v84, v31, (uint64_t *)&v91);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        os_log_type_t v45 = v40;
        uint64_t v20 = v44;
        _os_log_impl((void *)&_mh_execute_header, v39, v45, "stopLiveLocations: Got handle from server %{private,mask.hash}s for findMyId %{private,mask.hash}s", (uint8_t *)v41, 0x2Au);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();

        sub_100768C9C(v23, (uint64_t (*)(void))type metadata accessor for SecureLocationsSubscription);
        uint64_t v22 = v80;
        uint64_t v21 = (char *)v31;
      }
      else
      {
        swift_bridgeObjectRelease_n();

        sub_100768C9C(v23, (uint64_t (*)(void))type metadata accessor for SecureLocationsSubscription);
        uint64_t v22 = v80;
        uint64_t v21 = (char *)v31;
        uint64_t v20 = v84;
      }
      uint64_t v18 = v79;
    }
    else
    {
      sub_100768C9C((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for SecureLocationsSubscription);
      uint64_t v20 = v84;
      uint64_t v21 = v85;
      uint64_t v18 = v79;
      uint64_t v22 = a4;
    }
  }
  uint64_t v46 = swift_beginAccess();
  if (!*((void *)&v93 + 1))
  {
    uint64_t v80 = v22;
    if (qword_101637080 != -1) {
      uint64_t v46 = swift_once();
    }
    uint64_t v47 = qword_10170EC60;
    __chkstk_darwin(v46);
    *(&v78 - 4) = (char *)v47;
    *(&v78 - 3) = (char *)v20;
    *(&v78 - 2) = v21;
    swift_retain();
    sub_10000588C(&qword_101644320);
    OS_dispatch_queue.sync<A>(execute:)();
    swift_release();
    long long v93 = v91;
    swift_bridgeObjectRelease();
    if (qword_101636B00 != -1) {
      swift_once();
    }
    uint64_t v48 = type metadata accessor for Logger();
    sub_100010324(v48, (uint64_t)qword_10170DE98);
    long long v49 = v93;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    unint64_t v50 = Logger.logObject.getter();
    os_log_type_t v51 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v50, v51))
    {
      uint64_t v52 = swift_slowAlloc();
      uint64_t v53 = swift_slowAlloc();
      uint64_t v79 = v18;
      *(_DWORD *)uint64_t v52 = 141558787;
      uint64_t v90 = v53;
      *(void *)&long long v91 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v52 + 12) = 2081;
      long long v91 = v49;
      swift_bridgeObjectRetain();
      uint64_t v54 = String.init<A>(describing:)();
      *(void *)&long long v91 = sub_1008FA0F0(v54, v55, &v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v52 + 22) = 2160;
      *(void *)&long long v91 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v52 + 32) = 2081;
      swift_bridgeObjectRetain();
      uint64_t v20 = v84;
      *(void *)&long long v91 = sub_1008FA0F0(v84, (unint64_t)v85, &v90);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "stopLiveLocations: Got handle from fmf following %{private,mask.hash}s for findMyId %{private,mask.hash}s", (uint8_t *)v52, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v21 = v85;
      swift_slowDealloc();

      uint64_t v22 = v80;
      if (!*((void *)&v93 + 1)) {
        goto LABEL_32;
      }
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      uint64_t v22 = v80;
      uint64_t v20 = v84;
      if (!*((void *)&v93 + 1))
      {
LABEL_32:
        *(void *)&long long v91 = 0;
        *((void *)&v91 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(67);
        v67._uint64_t countAndFlagsBits = 0xD000000000000031;
        v67._object = (void *)0x8000000101406470;
        String.append(_:)(v67);
        v68._uint64_t countAndFlagsBits = v20;
        v68._object = v21;
        String.append(_:)(v68);
        v69._object = (void *)0x80000001014064B0;
        v69._uint64_t countAndFlagsBits = 0xD000000000000010;
        String.append(_:)(v69);
        long long v70 = v91;
        if (qword_101636B00 != -1) {
          swift_once();
        }
        uint64_t v71 = type metadata accessor for Logger();
        sub_100010324(v71, (uint64_t)qword_10170DE98);
        swift_bridgeObjectRetain_n();
        unint64_t v72 = Logger.logObject.getter();
        os_log_type_t v73 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v72, v73))
        {
          id v74 = (uint8_t *)swift_slowAlloc();
          *(void *)&long long v91 = swift_slowAlloc();
          *(_DWORD *)id v74 = 136315138;
          swift_bridgeObjectRetain();
          uint64_t v90 = sub_1008FA0F0(v70, *((unint64_t *)&v70 + 1), (uint64_t *)&v91);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl((void *)&_mh_execute_header, v72, v73, "LiveLocations: %s", v74, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
        }
        if (qword_101637440 != -1) {
          swift_once();
        }
        swift_retain();
        sub_1010DDDB8(v70, *((uint64_t *)&v70 + 1));
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v75 = type metadata accessor for Transaction();
        __chkstk_darwin(v75);
        uint64_t v76 = v84;
        *(&v78 - 4) = (char *)v22;
        *(&v78 - 3) = (char *)v76;
        uint64_t v77 = v83;
        *(&v78 - 2) = v85;
        *(&v78 - 1) = v77;
        static Transaction.named<A>(_:with:)();
        return swift_bridgeObjectRelease();
      }
    }
  }
  swift_bridgeObjectRetain();
  _s12searchpartyd20MessagingDestinationV6stringACSgSS_tcfC_0();
  if (!v58) {
    goto LABEL_32;
  }
  uint64_t v59 = *(void *)(v22 + 32);
  uint64_t v60 = (uint64_t)v82;
  *uint64_t v82 = v56;
  *(void *)(v60 + 8) = v57;
  *(void *)(v60 + 16) = v58;
  uint64_t result = swift_storeEnumTagMultiPayload();
  if (*(void *)(v59 + 440))
  {
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v62 = dispatch thunk of AsynchronousCache.value(for:)();
    swift_release();
    *(void *)&long long v91 = v62;
    sub_10000588C(&qword_101645788);
    sub_100062734(&qword_101645790, &qword_101645788);
    uint64_t v63 = Publisher.eraseToAnyPublisher()();
    swift_release();
    sub_100768C9C(v60, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
    swift_bridgeObjectRelease();
    *(void *)&long long v91 = v63;
    BOOL v64 = (void *)swift_allocObject();
    v64[2] = v22;
    v64[3] = v20;
    uint64_t v65 = v83;
    v64[4] = v21;
    v64[5] = v65;
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v66 = v65;
    Publisher.oneshot(_:)();
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_100743BE4(uint64_t a1, unint64_t a2, void *a3, void (*a4)(void), uint64_t a5)
{
  uint64_t v79 = a5;
  uint64_t v80 = a4;
  uint64_t v75 = type metadata accessor for BeaconSharingSessionContext();
  __chkstk_darwin(v75);
  uint64_t v76 = (char *)v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v10 - 8);
  uint64_t v11 = sub_10000588C(&qword_10163CBB8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for SecureLocationsSubscription();
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)v74 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v90 = 0uLL;
  uint64_t v78 = v5;
  uint64_t v83 = *(void *)(v5 + 48);
  uint64_t v84 = a1;
  uint64_t v81 = (void *)a2;
  uint64_t v82 = a1;
  unint64_t v85 = a2;
  uint64_t v86 = a3;
  uint64_t v77 = a3;
  OS_dispatch_queue.sync<A>(execute:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_10001DAB4((uint64_t)v13, &qword_10163CBB8);
LABEL_13:
    uint64_t v29 = v78;
    uint64_t v25 = v81;
    uint64_t v30 = v82;
    unint64_t v31 = v80;
    goto LABEL_20;
  }
  sub_100767F00((uint64_t)v13, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for SecureLocationsSubscription);
  if (!*(void *)&v17[*(int *)(v14 + 32) + 8])
  {
    sub_100768C9C((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for SecureLocationsSubscription);
    goto LABEL_13;
  }
  v74[1] = 0;
  uint64_t v18 = qword_101637080;
  swift_bridgeObjectRetain();
  if (v18 != -1) {
    swift_once();
  }
  swift_retain();
  uint64_t v19 = Data.init(base64Encoded:options:)();
  if (v20 >> 60 == 15)
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v21 = type metadata accessor for Logger();
    sub_100010324(v21, (uint64_t)qword_10170EC30);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.default.getter();
    BOOL v24 = os_log_type_enabled(v22, v23);
    uint64_t v25 = v81;
    if (v24)
    {
      unint64_t v26 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "failed to decode server provided push identifier", v26, 2u);
      swift_slowDealloc();
    }
    swift_release();
    swift_bridgeObjectRelease();

    uint64_t v27 = 0;
    uint64_t v28 = 0;
  }
  else
  {
    uint64_t v32 = v19;
    unint64_t v33 = v20;
    static String.Encoding.utf8.getter();
    uint64_t v27 = String.init(data:encoding:)();
    uint64_t v28 = v34;
    sub_100037A24(v32, v33);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v25 = v81;
  }
  swift_bridgeObjectRelease();
  *(void *)&long long v90 = v27;
  *((void *)&v90 + 1) = v28;
  if (qword_101636B00 != -1) {
    swift_once();
  }
  uint64_t v35 = type metadata accessor for Logger();
  sub_100010324(v35, (uint64_t)qword_10170DE98);
  swift_bridgeObjectRetain_n();
  unint64_t v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v38 = swift_slowAlloc();
    *(void *)&long long v88 = swift_slowAlloc();
    *(_DWORD *)uint64_t v38 = 141558787;
    *(void *)&long long v89 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    v74[0] = (uint64_t)v17;
    *(_WORD *)(v38 + 12) = 2081;
    swift_beginAccess();
    long long v89 = v90;
    swift_bridgeObjectRetain();
    sub_10000588C(&qword_101644320);
    uint64_t v39 = String.init<A>(describing:)();
    *(void *)&long long v89 = sub_1008FA0F0(v39, v40, (uint64_t *)&v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v38 + 22) = 2160;
    *(void *)&long long v89 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v38 + 32) = 2081;
    swift_bridgeObjectRetain();
    uint64_t v41 = v82;
    *(void *)&long long v89 = sub_1008FA0F0(v82, (unint64_t)v25, (uint64_t *)&v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "stopLiveLocations: Got handle from server %{private,mask.hash}s for findMyId %{private,mask.hash}s", (uint8_t *)v38, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v30 = v41;
    swift_slowDealloc();

    sub_100768C9C(v74[0], (uint64_t (*)(void))type metadata accessor for SecureLocationsSubscription);
    unint64_t v31 = v80;
    uint64_t v29 = v78;
  }
  else
  {
    swift_bridgeObjectRelease_n();

    sub_100768C9C((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for SecureLocationsSubscription);
    unint64_t v31 = v80;
    uint64_t v29 = v78;
    uint64_t v30 = v82;
  }
LABEL_20:
  uint64_t v42 = swift_beginAccess();
  if (!*((void *)&v90 + 1))
  {
    if (qword_101637080 != -1) {
      uint64_t v42 = swift_once();
    }
    uint64_t v43 = qword_10170EC60;
    __chkstk_darwin(v42);
    v74[-4] = v43;
    v74[-3] = v30;
    v74[-2] = (uint64_t)v25;
    swift_retain();
    sub_10000588C(&qword_101644320);
    OS_dispatch_queue.sync<A>(execute:)();
    swift_release();
    long long v90 = v88;
    swift_bridgeObjectRelease();
    if (qword_101636B00 != -1) {
      swift_once();
    }
    uint64_t v44 = type metadata accessor for Logger();
    sub_100010324(v44, (uint64_t)qword_10170DE98);
    long long v45 = v90;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = swift_slowAlloc();
      uint64_t v49 = swift_slowAlloc();
      *(_DWORD *)uint64_t v48 = 141558787;
      uint64_t v87 = v49;
      *(void *)&long long v88 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v48 + 12) = 2081;
      long long v88 = v45;
      swift_bridgeObjectRetain();
      uint64_t v50 = String.init<A>(describing:)();
      *(void *)&long long v88 = sub_1008FA0F0(v50, v51, &v87);
      uint64_t v29 = v78;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v48 + 22) = 2160;
      *(void *)&long long v88 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v48 + 32) = 2081;
      swift_bridgeObjectRetain();
      *(void *)&long long v88 = sub_1008FA0F0(v82, (unint64_t)v81, &v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "stopLiveLocations: Got handle from fmf following %{private,mask.hash}s for findMyId %{private,mask.hash}s", (uint8_t *)v48, 0x2Au);
      swift_arrayDestroy();
      uint64_t v25 = v81;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    unint64_t v31 = v80;
    uint64_t v30 = v82;
    if (!*((void *)&v90 + 1)) {
      goto LABEL_32;
    }
  }
  swift_bridgeObjectRetain();
  _s12searchpartyd20MessagingDestinationV6stringACSgSS_tcfC_0();
  if (!v54)
  {
LABEL_32:
    *(void *)&long long v88 = 0;
    *((void *)&v88 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(67);
    v63._uint64_t countAndFlagsBits = 0xD000000000000031;
    v63._object = (void *)0x8000000101406470;
    String.append(_:)(v63);
    v64._uint64_t countAndFlagsBits = v30;
    v64._object = v25;
    String.append(_:)(v64);
    v65._object = (void *)0x80000001014064B0;
    v65._uint64_t countAndFlagsBits = 0xD000000000000010;
    String.append(_:)(v65);
    unint64_t v66 = *((void *)&v88 + 1);
    uint64_t v76 = (unsigned char *)v88;
    if (qword_101636B00 != -1) {
      swift_once();
    }
    uint64_t v67 = type metadata accessor for Logger();
    sub_100010324(v67, (uint64_t)qword_10170DE98);
    swift_bridgeObjectRetain_n();
    Swift::String v68 = Logger.logObject.getter();
    os_log_type_t v69 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v68, v69))
    {
      long long v70 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v88 = swift_slowAlloc();
      *(_DWORD *)long long v70 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v87 = sub_1008FA0F0((uint64_t)v76, v66, (uint64_t *)&v88);
      uint64_t v29 = v78;
      uint64_t v25 = v81;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v68, v69, "LiveLocations: %s", v70, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    if (qword_101637440 != -1) {
      swift_once();
    }
    swift_retain();
    sub_1010DDDB8((uint64_t)v76, v66);
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v71 = type metadata accessor for Transaction();
    __chkstk_darwin(v71);
    uint64_t v72 = v82;
    v74[-4] = v29;
    v74[-3] = v72;
    uint64_t v73 = (uint64_t)v77;
    v74[-2] = (uint64_t)v25;
    v74[-1] = v73;
    static Transaction.named<A>(_:with:)();
    v31(0);
    return swift_bridgeObjectRelease();
  }
  uint64_t v55 = *(void *)(v29 + 32);
  char v56 = v76;
  *uint64_t v76 = v52;
  *((void *)v56 + 1) = v53;
  *((void *)v56 + 2) = v54;
  uint64_t result = swift_storeEnumTagMultiPayload();
  if (*(void *)(v55 + 440))
  {
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v58 = dispatch thunk of AsynchronousCache.value(for:)();
    swift_release();
    *(void *)&long long v88 = v58;
    sub_10000588C(&qword_101645788);
    sub_100062734(&qword_101645790, &qword_101645788);
    uint64_t v59 = Publisher.eraseToAnyPublisher()();
    swift_release();
    sub_100768C9C((uint64_t)v56, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
    swift_bridgeObjectRelease();
    *(void *)&long long v88 = v59;
    uint64_t v60 = (void *)swift_allocObject();
    v60[2] = v29;
    v60[3] = v30;
    uint64_t v61 = v77;
    v60[4] = v25;
    v60[5] = v61;
    swift_bridgeObjectRetain();
    swift_retain();
    id v62 = v61;
    Publisher.oneshot(_:)();
    swift_release();
    swift_release();
    v80(0);
    return swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t sub_100744A78@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = type metadata accessor for DispatchTime();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v28 - v10;
  uint64_t v12 = *(void *)(a1 + 120);
  if (v12)
  {
    *a2 = *(void *)(a1 + 112);
    a2[1] = v12;
  }
  else
  {
    uint64_t v29 = a2;
    uint64_t aBlock[7] = v2;
    uint64_t v13 = dispatch_group_create();
    dispatch_group_enter(v13);
    id v28 = [self sharedInstance];
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = v13;
    *(void *)(v14 + 24) = a1;
    aBlock[4] = sub_100766E6C;
    aBlock[5] = v14;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    uint64_t aBlock[2] = sub_100744FD4;
    aBlock[3] = &unk_1015D2BF0;
    uint64_t v15 = _Block_copy(aBlock);
    uint64_t v16 = v13;
    swift_retain();
    swift_release();
    id v17 = v28;
    [v28 fetchAPNSTokenWithCompletion:v15];
    _Block_release(v15);

    static DispatchTime.now()();
    + infix(_:_:)();
    uint64_t v18 = *(void (**)(char *, uint64_t))(v6 + 8);
    v18(v9, v5);
    OS_dispatch_group.wait(timeout:)();
    v18(v11, v5);
    if (static DispatchTimeoutResult.== infix(_:_:)())
    {
      if (qword_101637070 != -1) {
        swift_once();
      }
      uint64_t v19 = type metadata accessor for Logger();
      sub_100010324(v19, (uint64_t)qword_10170EC30);
      unint64_t v20 = Logger.logObject.getter();
      os_log_type_t v21 = static os_log_type_t.default.getter();
      BOOL v22 = os_log_type_enabled(v20, v21);
      os_log_type_t v23 = v29;
      if (v22)
      {
        BOOL v24 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)BOOL v24 = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, v21, "Timed out waiting for APS token call to return", v24, 2u);
        swift_slowDealloc();
        uint64_t v25 = v16;
        uint64_t v16 = v20;
      }
      else
      {
        uint64_t v25 = v20;
      }
    }
    else
    {
      os_log_type_t v23 = v29;
    }

    uint64_t v26 = *(void *)(a1 + 120);
    *os_log_type_t v23 = *(void *)(a1 + 112);
    v23[1] = v26;
    swift_bridgeObjectRetain();
  }
  return swift_bridgeObjectRetain();
}

void sub_100744DC0(uint64_t a1, uint64_t a2, uint64_t a3, NSObject *a4, uint64_t a5)
{
  if (a3)
  {
    swift_errorRetain();
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100010324(v6, (uint64_t)qword_10170EC30);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136315138;
      swift_getErrorValue();
      uint64_t v10 = Error.localizedDescription.getter();
      sub_1008FA0F0(v10, v11, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Error fetching APS token %s", v9, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    *(void *)(a5 + 112) = a1;
    *(void *)(a5 + 120) = a2;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  dispatch_group_leave(a4);
}

uint64_t sub_100744FD4(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, void *))(a1 + 32);
  if (a2)
  {
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v7 = v6;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v7 = 0;
  }
  swift_retain();
  id v8 = a3;
  v4(v5, v7, a3);
  swift_release();

  return swift_bridgeObjectRelease();
}

void sub_10074506C(uint64_t a1, int16x8_t a2)
{
  a2.i64[0] = 0x8002000010002;
  sub_100745D8C(a1, (uint64_t (*)(void))&static os_log_type_t.info.getter, "Error starting location monitoring %s", "Started location monitoring", a2);
}

void sub_10074509C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v12 = (void *)swift_allocObject();
  v12[2] = a2;
  uint64_t v12[3] = a3;
  v12[4] = a4;
  v12[5] = a5;
  v12[6] = a1;
  BOOL v24 = sub_100767384;
  uint64_t v25 = v12;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v21 = 1107296256;
  BOOL v22 = sub_100769474;
  os_log_type_t v23 = &unk_1015D2EE8;
  uint64_t v13 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  id v14 = [objc_allocWithZone((Class)FMDSecureLocationContext) init];
  NSString v15 = String._bridgeToObjectiveC()();
  [v14 setMode:v15];

  NSString v16 = String._bridgeToObjectiveC()();
  [v14 setFindMyId:v16];

  id v17 = [self sharedInstance];
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v13;
  BOOL v24 = sub_1001DF814;
  uint64_t v25 = (void *)v18;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v21 = 1107296256;
  BOOL v22 = sub_100769474;
  os_log_type_t v23 = &unk_1015D2F38;
  uint64_t v19 = _Block_copy(&aBlock);
  _Block_copy(v13);
  swift_release();
  [v17 startLocationMonitoringWithContext:v14 forcePublish:a6 & 1 completion:v19];
  _Block_release(v19);

  _Block_release(v13);
}

void sub_1007452F4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  if (a1)
  {
    swift_errorRetain();
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100010324(v5, (uint64_t)qword_10170EC30);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      id v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      *(_DWORD *)id v8 = 136315138;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v9 = String.init<A>(describing:)();
      sub_1008FA0F0(v9, v10, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Error starting location monitoring %s", v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v15 = type metadata accessor for Logger();
    sub_100010324(v15, (uint64_t)qword_10170EC30);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    NSString v16 = Logger.logObject.getter();
    os_log_type_t v17 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      *(_DWORD *)uint64_t v18 = 136315394;
      swift_bridgeObjectRetain();
      sub_1008FA0F0(a2, a3, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v18 + 12) = 2080;
      swift_bridgeObjectRetain();
      sub_1008FA0F0(a4, a5, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Requested starting location monitoring for %s with %s", (uint8_t *)v18, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
  }
  Transaction.capture()();
}

void sub_1007456C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a2;
  *(void *)(v12 + 24) = a3;
  *(void *)(v12 + 32) = a4;
  *(void *)(v12 + 40) = a5;
  *(unsigned char *)(v12 + 48) = a6;
  *(void *)(v12 + 56) = a1;
  BOOL v24 = sub_100767530;
  uint64_t v25 = v12;
  unint64_t v20 = _NSConcreteStackBlock;
  uint64_t v21 = 1107296256;
  BOOL v22 = sub_100769474;
  os_log_type_t v23 = &unk_1015D3000;
  uint64_t v13 = _Block_copy(&v20);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_release();
  id v14 = [self sharedInstance];
  id v15 = [objc_allocWithZone((Class)FMDSecureLocationContext) init];
  if (a3)
  {
    NSString v16 = String._bridgeToObjectiveC()();
    [v15 setFindMyId:v16];
  }
  if (a5)
  {
    NSString v17 = String._bridgeToObjectiveC()();
    [v15 setMode:v17];
  }
  [v15 setStopMonitoringActivePolicy:a6 & 1];
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = v13;
  BOOL v24 = (void (*)(uint64_t))sub_1001E06E0;
  uint64_t v25 = v18;
  unint64_t v20 = _NSConcreteStackBlock;
  uint64_t v21 = 1107296256;
  BOOL v22 = sub_100769474;
  os_log_type_t v23 = &unk_1015D3050;
  uint64_t v19 = _Block_copy(&v20);
  _Block_copy(v13);
  swift_release();
  [v14 stopLocationMonitoringWithContext:v15 completion:v19];
  _Block_release(v19);

  _Block_release(v13);
}

void sub_10074593C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  if (a1)
  {
    swift_errorRetain();
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100010324(v5, (uint64_t)qword_10170EC30);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v6, v7))
    {
      id v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = (void *)swift_slowAlloc();
      *(_DWORD *)id v8 = 138543362;
      swift_errorRetain();
      uint64_t v21 = _swift_stdlib_bridgeErrorToNSError();
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v9 = v21;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Error stopping location monitoring %{public}@", v8, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v14 = type metadata accessor for Logger();
    sub_100010324(v14, (uint64_t)qword_10170EC30);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    id v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = swift_slowAlloc();
      uint64_t v21 = swift_slowAlloc();
      *(_DWORD *)uint64_t v17 = 136446722;
      if (a3)
      {
        unint64_t v18 = a3;
      }
      else
      {
        a2 = 0;
        unint64_t v18 = 0xE000000000000000;
      }
      swift_bridgeObjectRetain();
      sub_1008FA0F0(a2, v18, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v17 + 12) = 2082;
      if (a5) {
        uint64_t v19 = a4;
      }
      else {
        uint64_t v19 = 0;
      }
      if (a5) {
        unint64_t v20 = a5;
      }
      else {
        unint64_t v20 = 0xE000000000000000;
      }
      swift_bridgeObjectRetain();
      sub_1008FA0F0(v19, v20, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v17 + 22) = 1024;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Requested stopping location monitoring for %{public}s with %{public}s stopMonitoringActivePolicy: %{BOOL}d.", (uint8_t *)v17, 0x1Cu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
  }
  Transaction.capture()();
}

void sub_100745D5C(uint64_t a1, int16x8_t a2)
{
  a2.i64[0] = 0x8002200010002;
  sub_100745D8C(a1, (uint64_t (*)(void))&static os_log_type_t.default.getter, "Error stopping location monitoring %{public}s", "Stopped location monitoring", a2);
}

void sub_100745D8C(uint64_t a1, uint64_t (*a2)(void), const char *a3, const char *a4, int16x8_t a5)
{
  if (a1)
  {
    swift_errorRetain();
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100010324(v6, (uint64_t)qword_10170EC30);
    swift_errorRetain();
    swift_errorRetain();
    oslog = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(oslog, v7))
    {
      id v8 = (uint8_t *)swift_slowAlloc();
      uint64_t v18 = swift_slowAlloc();
      *(_DWORD *)id v8 = vmovn_s16(a5).u32[0];
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v9 = String.init<A>(describing:)();
      sub_1008FA0F0(v9, v10, &v18);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, oslog, v7, a3, v8, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
      return;
    }
    swift_errorRelease();
    swift_errorRelease();
    swift_errorRelease();
  }
  else
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v13 = type metadata accessor for Logger();
    sub_100010324(v13, (uint64_t)qword_10170EC30);
    oslog = Logger.logObject.getter();
    os_log_type_t v14 = a2();
    if (os_log_type_enabled(oslog, v14))
    {
      id v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, oslog, v14, a4, v15, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_100746068()
{
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100010324(v0, (uint64_t)qword_10170EC30);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v3 = 67109120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "LocationSharing: publishingDeviceStatus changed %{BOOL}d", v3, 8u);
    swift_slowDealloc();
  }

  swift_retain();
  sub_10108A2B8();
  return swift_release();
}

void sub_1007461B4(uint64_t a1, uint64_t a2)
{
  if (a1)
  {
    swift_errorRetain();
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_10170EC30);
    swift_errorRetain();
    swift_errorRetain();
    swift_retain();
    oslog = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v4))
    {
      uint64_t v5 = swift_slowAlloc();
      uint64_t v12 = swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 136315394;
      uint64_t v6 = (uint64_t *)(*(void *)(a2 + 328)
                     + OBJC_IVAR____TtC12searchpartyd28SecureLocationsStewieManager_stewieLogPrefix);
      uint64_t v7 = *v6;
      unint64_t v8 = v6[1];
      swift_bridgeObjectRetain();
      sub_1008FA0F0(v7, v8, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_release();
      swift_bridgeObjectRelease();
      *(_WORD *)(v5 + 12) = 2080;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v9 = String.init<A>(describing:)();
      sub_1008FA0F0(v9, v10, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, oslog, v4, "%s - error starting monitor after device became a location publishing device %s", (uint8_t *)v5, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_release();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
}

uint64_t sub_10074643C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v12 = (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16[1] = *(void *)(a2 + 176);
  uint64_t v13 = (void *)swift_allocObject();
  void v13[2] = a3;
  v13[3] = a2;
  v13[4] = a1;
  aBlock[4] = sub_100767748;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  uint64_t aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015D3168;
  os_log_type_t v14 = _Block_copy(aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t aBlock[7] = _swiftEmptyArrayStorage;
  sub_100766750((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v17);
  return swift_release();
}

void sub_100746720(uint64_t a1, uint64_t a2)
{
  BOOL v29 = 0;
  id v4 = [self findMyLocationChangeStream];
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    uint64_t v6 = *(void *)(type metadata accessor for SecureLocation() - 8);
    uint64_t v7 = a1 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    uint64_t v8 = *(void *)(v6 + 72);
    swift_bridgeObjectRetain();
    do
    {
      sub_100746B20(v7, a2, &v29, v4);
      v7 += v8;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
    if (v29)
    {
      id v9 = objc_allocWithZone((Class)CHSTimelineController);
      NSString v10 = String._bridgeToObjectiveC()();
      NSString v11 = String._bridgeToObjectiveC()();
      id v12 = [v9 initForAvocadoIdentifier:v10 inBundleIdentifier:v11];

      id v13 = [v12 reloadTimeline];
      uint64_t v14 = qword_101637070;
      if (v13)
      {
        id v15 = v13;
        if (v14 != -1) {
          swift_once();
        }
        uint64_t v16 = type metadata accessor for Logger();
        sub_100010324(v16, (uint64_t)qword_10170EC30);
        id v17 = v15;
        uint64_t v18 = Logger.logObject.getter();
        os_log_type_t v19 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v18, v19))
        {
          unint64_t v20 = (uint8_t *)swift_slowAlloc();
          uint64_t v28 = swift_slowAlloc();
          *(_DWORD *)unint64_t v20 = 136315138;
          id v21 = v17;
          sub_10000588C(&qword_101638D40);
          uint64_t v22 = String.init<A>(describing:)();
          sub_1008FA0F0(v22, v23, &v28);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v18, v19, "Error reloading FindMyPeopleWidget timelines %s", v20, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
        }
      }
      else
      {
        if (qword_101637070 != -1) {
          swift_once();
        }
        uint64_t v24 = type metadata accessor for Logger();
        sub_100010324(v24, (uint64_t)qword_10170EC30);
        uint64_t v25 = Logger.logObject.getter();
        os_log_type_t v26 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v25, v26))
        {
          uint64_t v27 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v27 = 0;
          _os_log_impl((void *)&_mh_execute_header, v25, v26, "Completed reloading FindMyPeopleWidget timelines", v27, 2u);
          swift_slowDealloc();
        }
      }
    }
  }
  Transaction.capture()();
}

void sub_100746B20(uint64_t a1, uint64_t a2, BOOL *a3, void *a4)
{
  v162 = a4;
  uint64_t v165 = a2;
  uint64_t v158 = type metadata accessor for Date();
  uint64_t v157 = *(void *)(v158 - 8);
  __chkstk_darwin(v158);
  long long v159 = (char *)&v151 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_101669310);
  uint64_t v8 = __chkstk_darwin(v7 - 8);
  os_log_type_t v163 = (char *)&v151 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  NSString v11 = (char *)&v151 - v10;
  uint64_t v12 = type metadata accessor for SecureLocation();
  uint64_t v164 = *(void *)(v12 - 8);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v166 = (uint64_t)&v151 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  id v169 = (char *)&v151 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  id v168 = (char *)&v151 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v153 = (uint64_t)&v151 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  long long v155 = (double *)((char *)&v151 - v22);
  uint64_t v23 = __chkstk_darwin(v21);
  long long v156 = (double *)((char *)&v151 - v24);
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v154 = (uint64_t)&v151 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  long long v160 = (uint8_t *)&v151 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  unint64_t v31 = (char *)&v151 - v30;
  uint64_t v32 = __chkstk_darwin(v29);
  uint64_t v34 = (char *)&v151 - v33;
  uint64_t v35 = __chkstk_darwin(v32);
  os_log_type_t v37 = (char *)&v151 - v36;
  uint64_t v38 = __chkstk_darwin(v35);
  unint64_t v40 = (char *)&v151 - v39;
  uint64_t v167 = *(int *)(v38 + 60);
  uint64_t v41 = *(void *)(a1 + v167);
  sub_100768C34(a1, (uint64_t)&v151 - v39, (uint64_t (*)(void))type metadata accessor for SecureLocation);
  if (v41 == 3)
  {
    uint64_t v42 = v12;
    sub_100768C9C((uint64_t)v40, (uint64_t (*)(void))type metadata accessor for SecureLocation);
    sub_100768C34(a1, (uint64_t)v37, (uint64_t (*)(void))type metadata accessor for SecureLocation);
    uint64_t v43 = (uint64_t *)a1;
LABEL_4:
    sub_100768C9C((uint64_t)v37, (uint64_t (*)(void))type metadata accessor for SecureLocation);
    sub_100768C34((uint64_t)v43, (uint64_t)v34, (uint64_t (*)(void))type metadata accessor for SecureLocation);
    uint64_t v45 = v42;
    uint64_t v46 = a3;
LABEL_5:
    sub_100768C9C((uint64_t)v34, (uint64_t (*)(void))type metadata accessor for SecureLocation);
LABEL_6:
    char v47 = 0;
    uint64_t v48 = 0;
LABEL_7:
    uint64_t v49 = (uint64_t)v169;
LABEL_8:
    uint64_t v50 = (uint64_t)v168;
    goto LABEL_9;
  }
  os_log_type_t v152 = v31;
  uint64_t v42 = v12;
  uint64_t v44 = *(void *)&v40[*(int *)(v12 + 60)];
  sub_100768C9C((uint64_t)v40, (uint64_t (*)(void))type metadata accessor for SecureLocation);
  sub_100768C34(a1, (uint64_t)v37, (uint64_t (*)(void))type metadata accessor for SecureLocation);
  uint64_t v43 = (uint64_t *)a1;
  if (v44 == 5) {
    goto LABEL_4;
  }
  uint64_t v45 = v12;
  uint64_t v77 = *(int *)(v12 + 60);
  char v161 = (uint64_t *)a1;
  uint64_t v78 = *(void *)&v37[v77];
  sub_100768C9C((uint64_t)v37, (uint64_t (*)(void))type metadata accessor for SecureLocation);
  sub_100768C34((uint64_t)v161, (uint64_t)v34, (uint64_t (*)(void))type metadata accessor for SecureLocation);
  BOOL v79 = v78 == 4;
  uint64_t v43 = v161;
  uint64_t v46 = a3;
  if (v79) {
    goto LABEL_5;
  }
  uint64_t v80 = *(void *)&v34[*(int *)(v12 + 60)];
  sub_100768C9C((uint64_t)v34, (uint64_t (*)(void))type metadata accessor for SecureLocation);
  if (v80 == 1) {
    goto LABEL_6;
  }
  uint64_t v82 = *v43;
  uint64_t v81 = v43[1];
  uint64_t v83 = v165;
  swift_beginAccess();
  uint64_t v84 = *(void *)(v83 + 304);
  if (!*(void *)(v84 + 16))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v164 + 56))(v11, 1, 1, v42);
LABEL_36:
    sub_10001DAB4((uint64_t)v11, &qword_101669310);
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v96 = type metadata accessor for Logger();
    sub_100010324(v96, (uint64_t)qword_10170EC30);
    uint64_t v97 = (uint64_t)v160;
    sub_100768C34((uint64_t)v43, (uint64_t)v160, (uint64_t (*)(void))type metadata accessor for SecureLocation);
    unint64_t v98 = Logger.logObject.getter();
    os_log_type_t v99 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v98, v99))
    {
      uint64_t v100 = (uint8_t *)swift_slowAlloc();
      uint64_t v101 = swift_slowAlloc();
      *(_DWORD *)uint64_t v100 = 136446210;
      v170[0] = v101;
      long long v159 = (char *)(v100 + 4);
      unint64_t v102 = sub_100E90398(*(void *)(v97 + *(int *)(v42 + 60)));
      uint64_t v171 = sub_1008FA0F0(v102, v103, v170);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v45 = v42;
      swift_bridgeObjectRelease();
      sub_100768C9C(v97, (uint64_t (*)(void))type metadata accessor for SecureLocation);
      _os_log_impl((void *)&_mh_execute_header, v98, v99, "biomeDonation: No previous biome event cached, will donate: %{public}s", v100, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100768C9C(v97, (uint64_t (*)(void))type metadata accessor for SecureLocation);
    }

    char v47 = 0;
    uint64_t v48 = 1;
    uint64_t v49 = (uint64_t)v169;
    uint64_t v43 = v161;
    goto LABEL_8;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v85 = sub_100723FF4(v82, v81);
  uint64_t v86 = v164;
  if (v87)
  {
    sub_100768C34(*(void *)(v84 + 56) + *(void *)(v164 + 72) * v85, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for SecureLocation);
    uint64_t v88 = 0;
  }
  else
  {
    uint64_t v88 = 1;
  }
  long long v95 = v159;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v86 + 56))(v11, v88, 1, v42);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v86 + 48))(v11, 1, v42) == 1) {
    goto LABEL_36;
  }
  uint64_t v104 = (uint64_t)v152;
  sub_100767F00((uint64_t)v11, (uint64_t)v152, (uint64_t (*)(void))type metadata accessor for SecureLocation);
  Date.init()();
  Date.timeIntervalSince(_:)();
  double v106 = v105;
  BOOL v107 = *(void (**)(char *, uint64_t))(v157 + 8);
  uint64_t v108 = v158;
  v107(v95, v158);
  if (v106 >= 1080.0)
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v113 = type metadata accessor for Logger();
    sub_100010324(v113, (uint64_t)qword_10170EC30);
    uint64_t v114 = v154;
    sub_100768C34((uint64_t)v43, v154, (uint64_t (*)(void))type metadata accessor for SecureLocation);
    uint64_t v115 = Logger.logObject.getter();
    os_log_type_t v116 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v115, v116))
    {
      uint64_t v117 = (uint8_t *)swift_slowAlloc();
      uint64_t v118 = swift_slowAlloc();
      long long v160 = (uint8_t *)v118;
      *(_DWORD *)uint64_t v117 = 136446210;
      v170[0] = v118;
      unint64_t v119 = sub_100E90398(*(void *)(v114 + *(int *)(v45 + 60)));
      uint64_t v171 = sub_1008FA0F0(v119, v120, v170);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      uint64_t v43 = v161;
      swift_bridgeObjectRelease();
      sub_100768C9C(v114, (uint64_t (*)(void))type metadata accessor for SecureLocation);
      _os_log_impl((void *)&_mh_execute_header, v115, v116, "biomeDonation: Heartbeat threshold passed, location publish reason: %{public}s)", v117, 0xCu);
      uint64_t v48 = 1;
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      sub_100768C9C((uint64_t)v152, (uint64_t (*)(void))type metadata accessor for SecureLocation);
      char v47 = 0;
    }
    else
    {

      sub_100768C9C(v114, (uint64_t (*)(void))type metadata accessor for SecureLocation);
      sub_100768C9C((uint64_t)v152, (uint64_t (*)(void))type metadata accessor for SecureLocation);
      char v47 = 0;
      uint64_t v48 = 1;
    }
    goto LABEL_7;
  }
  Date.init()();
  Date.timeIntervalSince(_:)();
  double v110 = v109;
  v107(v95, v108);
  uint64_t v111 = v156;
  sub_100768C34(v104, (uint64_t)v156, (uint64_t (*)(void))type metadata accessor for SecureLocation);
  unint64_t v112 = v155;
  sub_100768C34((uint64_t)v43, (uint64_t)v155, (uint64_t (*)(void))type metadata accessor for SecureLocation);
  if (v110 < 500.0)
  {
    sub_100768C9C((uint64_t)v112, (uint64_t (*)(void))type metadata accessor for SecureLocation);
    sub_100768C9C((uint64_t)v111, (uint64_t (*)(void))type metadata accessor for SecureLocation);
    uint64_t v50 = (uint64_t)v168;
    uint64_t v49 = (uint64_t)v169;
LABEL_55:
    sub_100768C9C((uint64_t)v152, (uint64_t (*)(void))type metadata accessor for SecureLocation);
    uint64_t v48 = 0;
    char v47 = 1;
    goto LABEL_9;
  }
  double v122 = v111[2];
  double v121 = v111[3];
  double v124 = v111[7];
  double v123 = v111[8];
  double v126 = v111[4];
  double v125 = v111[5];
  double v127 = v111[6];
  id v128 = objc_allocWithZone((Class)CLLocation);
  Class isa = Date._bridgeToObjectiveC()().super.isa;
  id v130 = [v128 initWithCoordinate:isa, v121, v122, v123, v125, v126, v124, v127];

  double v132 = v112[2];
  double v131 = v112[3];
  double v134 = v112[7];
  double v133 = v112[8];
  double v136 = v112[4];
  double v135 = v112[5];
  double v137 = v112[6];
  id v138 = objc_allocWithZone((Class)CLLocation);
  Class v139 = Date._bridgeToObjectiveC()().super.isa;
  id v140 = [v138 initWithCoordinate:v139 altitude:v131 horizontalAccuracy:v132 verticalAccuracy:v133 course:v135 speed:v136 timestamp:v134];

  [v130 distanceFromLocation:v140];
  double v142 = v141;

  sub_100768C9C((uint64_t)v112, (uint64_t (*)(void))type metadata accessor for SecureLocation);
  sub_100768C9C((uint64_t)v111, (uint64_t (*)(void))type metadata accessor for SecureLocation);
  uint64_t v50 = (uint64_t)v168;
  uint64_t v49 = (uint64_t)v169;
  if (v142 <= 540.0) {
    goto LABEL_55;
  }
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v143 = type metadata accessor for Logger();
  sub_100010324(v143, (uint64_t)qword_10170EC30);
  uint64_t v144 = v153;
  sub_100768C34((uint64_t)v43, v153, (uint64_t (*)(void))type metadata accessor for SecureLocation);
  uint64_t v145 = Logger.logObject.getter();
  os_log_type_t v146 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v145, v146))
  {
    uint64_t v147 = (uint8_t *)swift_slowAlloc();
    uint64_t v148 = swift_slowAlloc();
    *(_DWORD *)uint64_t v147 = 136446210;
    v170[0] = v148;
    long long v160 = v147 + 4;
    unint64_t v149 = sub_100E90398(*(void *)(v144 + *(int *)(v45 + 60)));
    uint64_t v171 = sub_1008FA0F0(v149, v150, v170);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v43 = v161;
    swift_bridgeObjectRelease();
    sub_100768C9C(v144, (uint64_t (*)(void))type metadata accessor for SecureLocation);
    _os_log_impl((void *)&_mh_execute_header, v145, v146, "biomeDonation: Min distance and time threshold passed, location publish reason: %{public}s", v147, 0xCu);
    swift_arrayDestroy();
    uint64_t v50 = (uint64_t)v168;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    sub_100768C9C(v144, (uint64_t (*)(void))type metadata accessor for SecureLocation);
  }
  sub_100768C9C((uint64_t)v152, (uint64_t (*)(void))type metadata accessor for SecureLocation);
  char v47 = 0;
  uint64_t v48 = 1;
  uint64_t v49 = (uint64_t)v169;
LABEL_9:
  uint64_t v51 = *(uint64_t *)((char *)v43 + v167);
  sub_100768C34((uint64_t)v43, v50, (uint64_t (*)(void))type metadata accessor for SecureLocation);
  if (v51 == 6)
  {
    sub_100768C9C(v50, (uint64_t (*)(void))type metadata accessor for SecureLocation);
    BOOL v52 = 0;
  }
  else
  {
    uint64_t v53 = *(void *)(v50 + *(int *)(v45 + 60));
    sub_100768C9C(v50, (uint64_t (*)(void))type metadata accessor for SecureLocation);
    BOOL v52 = v53 != 7;
  }
  *uint64_t v46 = v52;
  uint64_t v54 = sub_100BC7464();
  unint64_t v56 = v55;
  if (v55) {
    char v57 = v47;
  }
  else {
    char v57 = 1;
  }
  if (v57)
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v58 = type metadata accessor for Logger();
    sub_100010324(v58, (uint64_t)qword_10170EC30);
    uint64_t v59 = v166;
    sub_100768C34((uint64_t)v43, v166, (uint64_t (*)(void))type metadata accessor for SecureLocation);
    swift_bridgeObjectRetain();
    uint64_t v60 = Logger.logObject.getter();
    os_log_type_t v61 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v60, v61))
    {
      uint64_t v62 = v54;
      uint64_t v63 = swift_slowAlloc();
      uint64_t v171 = swift_slowAlloc();
      *(_DWORD *)uint64_t v63 = 136315650;
      v170[0] = v62;
      v170[1] = v56;
      swift_bridgeObjectRetain();
      sub_10000588C(&qword_101644320);
      uint64_t v64 = String.init<A>(describing:)();
      id v169 = (char *)v48;
      v170[0] = sub_1008FA0F0(v64, v65, &v171);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v63 + 12) = 2082;
      uint64_t v66 = v166;
      unint64_t v67 = sub_100E90398(*(void *)(v166 + *(int *)(v45 + 60)));
      v170[0] = sub_1008FA0F0(v67, v68, &v171);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100768C9C(v66, (uint64_t (*)(void))type metadata accessor for SecureLocation);
      *(_WORD *)(v63 + 22) = 1024;
      LODWORD(v170[0]) = v169;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v60, v61, "biomeDonation: NOT donating to Biome %s, publishReason: %{public}s, donationThresholdPassed: %{BOOL}d", (uint8_t *)v63, 0x1Cu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      sub_100768C9C(v59, (uint64_t (*)(void))type metadata accessor for SecureLocation);
    }
  }
  else
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v69 = type metadata accessor for Logger();
    sub_100010324(v69, (uint64_t)qword_10170EC30);
    sub_100768C34((uint64_t)v43, v49, (uint64_t (*)(void))type metadata accessor for SecureLocation);
    swift_bridgeObjectRetain_n();
    long long v70 = Logger.logObject.getter();
    os_log_type_t v71 = static os_log_type_t.default.getter();
    int v72 = v71;
    if (os_log_type_enabled(v70, v71))
    {
      uint64_t v73 = swift_slowAlloc();
      LODWORD(v167) = v72;
      uint64_t v74 = v73;
      id v168 = (char *)swift_slowAlloc();
      v170[0] = (uint64_t)v168;
      *(_DWORD *)uint64_t v74 = 136315650;
      char v161 = v43;
      swift_bridgeObjectRetain();
      uint64_t v171 = sub_1008FA0F0(v54, v56, v170);
      id v169 = (char *)v48;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      *(_WORD *)(v74 + 12) = 2082;
      unint64_t v75 = sub_100E90398(*(void *)(v49 + *(int *)(v45 + 60)));
      uint64_t v171 = sub_1008FA0F0(v75, v76, v170);
      uint64_t v43 = v161;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100768C9C(v49, (uint64_t (*)(void))type metadata accessor for SecureLocation);
      *(_WORD *)(v74 + 22) = 1024;
      LODWORD(v171) = v169;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v70, (os_log_type_t)v167, "biomeDonation: Writing Biome event for handle: %s, publishReason: %{public}s, donationThresholdPassed: %{BOOL}d", (uint8_t *)v74, 0x1Cu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_bridgeObjectRelease_n();
      sub_100768C9C(v49, (uint64_t (*)(void))type metadata accessor for SecureLocation);
    }

    uint64_t v89 = (uint64_t)v163;
    long long v90 = v162;
    id v91 = sub_100762F00((uint64_t)v43, v54);
    swift_bridgeObjectRelease();
    id v92 = [v90 source];
    [v92 sendEvent:v91];

    uint64_t v93 = *v43;
    uint64_t v94 = v43[1];
    sub_100768C34((uint64_t)v43, v89, (uint64_t (*)(void))type metadata accessor for SecureLocation);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v164 + 56))(v89, 0, 1, v45);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    sub_10015EF54(v89, v93, v94);
    swift_endAccess();
  }
}

void sub_100748034()
{
  swift_retain();
  dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)();
  swift_release();
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100010324(v0, (uint64_t)qword_10170EC30);
  oslog = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    os_log_type_t v2 = (uint8_t *)swift_slowAlloc();
    uint64_t v3 = (void *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v2 = 138412290;
    uint64_t v4 = SPSecureLocationsStewiePublishRequest;
    id v5 = SPSecureLocationsStewiePublishRequest;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *uint64_t v3 = v4;
    _os_log_impl((void *)&_mh_execute_header, oslog, v1, "Posted %@ notification", v2, 0xCu);
    sub_10000588C((uint64_t *)&unk_101638EA0);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
  }
}

uint64_t sub_100748428()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();
  swift_release();
  swift_release();

  sub_1007670D4(*(void *)(v0 + 184), *(void *)(v0 + 192));
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_100748558()
{
  sub_100748428();

  return swift_deallocClassInstance();
}

unint64_t sub_10074858C(char a1)
{
  unint64_t result = 0xD000000000000014;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000017;
      break;
    case 2:
      unint64_t result = 0xD000000000000013;
      break;
    case 3:
      unint64_t result = 0xD000000000000018;
      break;
    case 4:
      unint64_t result = 0x5F454D5F4F545541;
      break;
    case 5:
      unint64_t result = 0xD000000000000010;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100748660(char a1)
{
  uint64_t result = 0x54646E6553706174;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x6449646D63;
      break;
    case 2:
      uint64_t result = 6581603;
      break;
    case 3:
      uint64_t result = 0x6143654D6F747561;
      break;
    case 4:
      uint64_t result = 0x6449794D646E6966;
      break;
    case 5:
      uint64_t result = 7562345;
      break;
    case 6:
      uint64_t result = 1701080941;
      break;
    case 7:
      uint64_t result = 0x6E65644968737570;
      break;
    case 8:
      uint64_t result = 0x6544656D6F747561;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_100748788(char a1)
{
  uint64_t result = 0x54646E6553706174;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x6449646D63;
      break;
    case 2:
      uint64_t result = 6581603;
      break;
    case 3:
      uint64_t result = 0x6143654D6F747561;
      break;
    case 4:
      uint64_t result = 0x6449794D646E6966;
      break;
    case 5:
      uint64_t result = 7562345;
      break;
    case 6:
      uint64_t result = 1701080941;
      break;
    case 7:
      uint64_t result = 0x6E65644968737570;
      break;
    case 8:
      uint64_t result = 0x6544656D6F747561;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1007488B0(char *a1, char *a2)
{
  return sub_10071B2B0(*a1, *a2);
}

Swift::Int sub_1007488BC()
{
  return sub_10072C3D8();
}

uint64_t sub_1007488C4()
{
  return sub_10071F9C0();
}

Swift::Int sub_1007488CC()
{
  return sub_100720F6C();
}

unint64_t sub_1007488D4@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_100763200(*a1);
  *a2 = result;
  return result;
}

unint64_t sub_100748904@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_10074858C(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100748930()
{
  return RawRepresentable<>.init(from:)();
}

uint64_t sub_100748990()
{
  return RawRepresentable<>.encode(to:)();
}

uint64_t sub_1007489E0(unsigned __int8 *a1, char *a2)
{
  return sub_10071B4BC(*a1, *a2);
}

Swift::Int sub_1007489EC()
{
  return Hasher._finalize()();
}

uint64_t sub_100748A34()
{
  return sub_10071FAC8();
}

Swift::Int sub_100748A3C()
{
  return Hasher._finalize()();
}

unint64_t sub_100748A80@<X0>(Swift::String *a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10076324C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100748AB0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100748660(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100748ADC()
{
  return sub_100748788(*v0);
}

unint64_t sub_100748AE4@<X0>(Swift::String a1@<X1:X0>, unsigned char *a2@<X8>)
{
  unint64_t result = sub_10076324C(a1);
  *a2 = result;
  return result;
}

uint64_t sub_100748B0C(uint64_t a1)
{
  unint64_t v2 = sub_100763980();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100748B48(uint64_t a1)
{
  unint64_t v2 = sub_100763980();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100748B84(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_10000588C(&qword_10164D0C0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v10[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_10001CD44(a1, a1[3]);
  sub_100763980();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10[0] = 0;
  KeyedEncodingContainer.encode(_:forKey:)();
  if (!v2)
  {
    v10[0] = 1;
    KeyedEncodingContainer.encode(_:forKey:)();
    v10[0] = *(unsigned char *)(v3 + 32);
    char v11 = 2;
    sub_100763AC4();
    KeyedEncodingContainer.encode<A>(_:forKey:)();
    v10[0] = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    sub_10001D608(v3 + 56, (uint64_t)v15, &qword_1016475C0);
    sub_10001D608((uint64_t)v15, (uint64_t)v10, &qword_1016475C0);
    char v11 = 4;
    sub_10000588C(&qword_101654A30);
    sub_1004CB3CC((unint64_t *)&qword_10163CCD8);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_10001D608(v3 + 64, (uint64_t)v14, &qword_1016475C0);
    sub_10001D608((uint64_t)v14, (uint64_t)v10, &qword_1016475C0);
    char v11 = 5;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    v10[0] = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)();
    sub_10001D608(v3 + 88, (uint64_t)v13, &qword_10164D0D0);
    sub_10001D608((uint64_t)v13, (uint64_t)v10, &qword_10164D0D0);
    char v11 = 7;
    sub_10000588C(&qword_10164D0B0);
    sub_100763B18();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    sub_10001D608(v3 + 96, (uint64_t)v12, &qword_1016475C0);
    sub_10001D608((uint64_t)v12, (uint64_t)v10, &qword_1016475C0);
    char v11 = 8;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v6 + 8))(v8, v5);
}

__n128 sub_100748F24@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_100763298(a1, (uint64_t *)v7);
  if (!v2)
  {
    long long v5 = v7[5];
    *(_OWORD *)(a2 + 64) = v7[4];
    *(_OWORD *)(a2 + 80) = v5;
    *(void *)(a2 + 96) = v8;
    long long v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + 16) = v6;
    __n128 result = (__n128)v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(__n128 *)(a2 + 48) = result;
  }
  return result;
}

uint64_t sub_100748F84(void *a1)
{
  return sub_100748B84(a1);
}

uint64_t sub_100748FD0(uint64_t a1, uint64_t a2, NSObject *a3)
{
  return swift_release();
}

void sub_100749040(uint64_t a1, char a2)
{
  uint64_t v5 = type metadata accessor for DispatchTime();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  char v11 = (char *)&v21 - v10;
  uint64_t v12 = dispatch_group_create();
  dispatch_group_enter(v12);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v12;
  *(void *)(v13 + 24) = v2;
  *(unsigned char *)(v13 + 32) = a2;
  uint64_t v14 = v12;
  swift_retain();
  sub_100604694(a1, 1, (uint64_t)sub_1007676D8, v13);
  swift_release();
  static DispatchTime.now()();
  + infix(_:_:)();
  uint64_t v15 = *(void (**)(char *, uint64_t))(v6 + 8);
  v15(v9, v5);
  OS_dispatch_group.wait(timeout:)();
  v15(v11, v5);
  if (static DispatchTimeoutResult.== infix(_:_:)())
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_100010324(v16, (uint64_t)qword_10170EC30);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "saveLocation - timed out waiting to save locations", v19, 2u);
      swift_slowDealloc();
      uint64_t v20 = v14;
      uint64_t v14 = v17;
    }
    else
    {
      uint64_t v20 = v17;
    }
  }
}

void sub_1007492BC(uint64_t a1, NSObject *a2, uint64_t a3, char a4)
{
  if (*(void *)(a1 + 16))
  {
    uint64_t v6 = type metadata accessor for Transaction();
    __chkstk_darwin(v6);
    uint64_t v7 = static Transaction.named<A>(_:with:)();
    if (a4)
    {
      __chkstk_darwin(v7);
      static Transaction.named<A>(_:with:)();
    }
  }
  else
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_100010324(v8, (uint64_t)qword_10170EC30);
    uint64_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v9, v10))
    {
      char v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "saveLocation - No locations were updated. Not posting notification", v11, 2u);
      swift_slowDealloc();
    }
  }
  dispatch_group_leave(a2);
}

uint64_t sub_1007494E4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for DispatchQoS();
  uint64_t v14 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v16 = (char *)v20 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20[1] = *(void *)(v5 + 288);
  uint64_t v17 = (void *)swift_allocObject();
  void v17[2] = a1;
  v17[3] = a2;
  v17[4] = v5;
  void v17[5] = a3;
  v17[6] = a4;
  aBlock[4] = sub_100766EE4;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  uint64_t aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015D2CB8;
  os_log_type_t v18 = _Block_copy(aBlock);
  sub_1000361E0(a1, a2);
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v22 = _swiftEmptyArrayStorage;
  sub_100766750((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v21);
  return swift_release();
}

uint64_t sub_1007497D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v63 = a5;
  uint64_t v57 = a4;
  uint64_t v64 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v60 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v59 = (char *)v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v62 = type metadata accessor for DispatchQoS();
  uint64_t v8 = *(void *)(v62 - 8);
  __chkstk_darwin(v62);
  uint64_t v58 = (char *)v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = type metadata accessor for DispatchQoS.QoSClass();
  uint64_t v61 = *(void *)(v56 - 8);
  __chkstk_darwin(v56);
  uint64_t v11 = (char *)v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v12 - 8);
  static String.Encoding.utf8.getter();
  uint64_t v13 = String.init(data:encoding:)();
  uint64_t v55 = v8;
  uint64_t v54 = v11;
  if (v14)
  {
    uint64_t v15 = v13;
    unint64_t v16 = v14;
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v17 = type metadata accessor for Logger();
    sub_100010324(v17, (uint64_t)qword_10170EC30);
    swift_bridgeObjectRetain();
    os_log_type_t v18 = Logger.logObject.getter();
    os_log_type_t v19 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc();
      *(void *)&aBlock[0] = swift_slowAlloc();
      v53[1] = a1;
      v53[0] = a2;
      *(_DWORD *)uint64_t v20 = 136315138;
      swift_bridgeObjectRetain();
      *(void *)&long long v66 = sub_1008FA0F0(v15, v16, (uint64_t *)aBlock);
      uint64_t v11 = v54;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "jsonString %s", v20, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v8 = v55;
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  sub_100766EFC();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  v75[0] = v69;
  v75[1] = v70;
  v75[2] = v71;
  aBlock[0] = v66;
  uint64_t v76 = v72;
  aBlock[1] = v67;
  long long v74 = v68;
  uint64_t v21 = v59;
  switch((char)v68)
  {
    case 1:
      sub_10001D608((uint64_t)v75 + 8, (uint64_t)v77, &qword_1016475C0);
      sub_10001D608((uint64_t)v77, (uint64_t)&v78, &qword_1016475C0);
      if (v78 && *(void *)(v78 + 16))
      {
        uint64_t v25 = *(void *)&v75[0];
        if (*(void *)&v75[0])
        {
          uint64_t v26 = *((void *)&v74 + 1);
          uint64_t v27 = qword_101637080;
          swift_bridgeObjectRetain();
          if (v27 != -1) {
            swift_once();
          }
          if (v26 != 1702195828 || v25 != 0xE400000000000000) {
            _stringCompareWithSmolCheck(_:_:expecting:)();
          }
          swift_retain();
          swift_bridgeObjectRelease();
          id v41 = [self standardUserDefaults];
          Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
          NSString v43 = String._bridgeToObjectiveC()();
          [v41 setValue:isa forKey:v43];

          sub_100D0A5C0();
          swift_release();
        }
        sub_10074B470((uint64_t)aBlock);
      }
      else
      {
        if (qword_101637070 != -1) {
          swift_once();
        }
        uint64_t v31 = type metadata accessor for Logger();
        sub_100010324(v31, (uint64_t)qword_10170EC30);
        uint64_t v32 = Logger.logObject.getter();
        os_log_type_t v33 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v32, v33))
        {
          uint64_t v34 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v34 = 0;
          _os_log_impl((void *)&_mh_execute_header, v32, v33, "No findMyIds specified for distributeKeysCommand", v34, 2u);
          swift_slowDealloc();
        }
      }
      break;
    case 2:
      uint64_t v28 = *(void *)&v75[0];
      if (*(void *)&v75[0])
      {
        uint64_t v29 = *((void *)&v74 + 1);
        uint64_t v30 = qword_101637080;
        swift_bridgeObjectRetain();
        if (v30 != -1) {
          swift_once();
        }
        if (v29 != 1702195828 || v28 != 0xE400000000000000) {
          _stringCompareWithSmolCheck(_:_:expecting:)();
        }
        swift_retain();
        swift_bridgeObjectRelease();
        id v38 = [self standardUserDefaults];
        Class v39 = Bool._bridgeToObjectiveC()().super.super.isa;
        NSString v40 = String._bridgeToObjectiveC()();
        [v38 setValue:v39 forKey:v40];

        sub_100D0A5C0();
        swift_release();
      }
      sub_10074B0A4((uint64_t)aBlock);
      break;
    case 3:
      sub_10074B8BC();
      break;
    case 4:
      sub_10074BAD8();
      break;
    case 5:
      sub_10074BD54();
      break;
    default:
      uint64_t v22 = *(void *)&v75[0];
      if (*(void *)&v75[0])
      {
        uint64_t v23 = *((void *)&v74 + 1);
        uint64_t v24 = qword_101637080;
        swift_bridgeObjectRetain();
        if (v24 != -1) {
          swift_once();
        }
        if (v23 != 1702195828 || v22 != 0xE400000000000000) {
          _stringCompareWithSmolCheck(_:_:expecting:)();
        }
        swift_retain();
        swift_bridgeObjectRelease();
        id v35 = [self standardUserDefaults];
        Class v36 = Bool._bridgeToObjectiveC()().super.super.isa;
        NSString v37 = String._bridgeToObjectiveC()();
        [v35 setValue:v36 forKey:v37];

        sub_100D0A5C0();
        swift_release();
      }
      sub_10074A800((uint64_t)aBlock);
      break;
  }
  sub_100766F68((uint64_t)aBlock);
  sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  uint64_t v44 = v61;
  uint64_t v45 = v56;
  (*(void (**)(char *, void, uint64_t))(v61 + 104))(v11, enum case for DispatchQoS.QoSClass.default(_:), v56);
  uint64_t v46 = (void *)static OS_dispatch_queue.global(qos:)();
  (*(void (**)(char *, uint64_t))(v44 + 8))(v11, v45);
  uint64_t v47 = swift_allocObject();
  uint64_t v48 = v63;
  *(void *)(v47 + 16) = v57;
  *(void *)(v47 + 24) = v48;
  *(void *)&long long v68 = sub_1003C6214;
  *((void *)&v68 + 1) = v47;
  *(void *)&long long v66 = _NSConcreteStackBlock;
  *((void *)&v66 + 1) = 1107296256;
  *(void *)&long long v67 = sub_1004B5480;
  *((void *)&v67 + 1) = &unk_1015D2D58;
  uint64_t v49 = _Block_copy(&v66);
  swift_retain();
  uint64_t v50 = v58;
  static DispatchQoS.unspecified.getter();
  unint64_t v65 = _swiftEmptyArrayStorage;
  sub_100766750((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  uint64_t v51 = v64;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v49);
  swift_release();

  (*(void (**)(char *, uint64_t))(v60 + 8))(v21, v51);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v50, v62);
  return swift_release();
}

void sub_10074A800(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 32);
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v80 = a1 + 56;
  uint64_t v77 = v9;
  uint64_t v78 = v6;
  uint64_t v70 = *(void *)(a1 + 40);
  uint64_t v71 = *(void *)(a1 + 48);
  uint64_t v76 = *(void *)(a1 + 64);
  uint64_t v75 = *(void *)(a1 + 72);
  uint64_t v74 = *(void *)(a1 + 80);
  uint64_t v73 = *(void *)(a1 + 88);
  uint64_t v72 = *(void *)(a1 + 96);
  uint64_t v10 = type metadata accessor for DispatchPredicate();
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (void *)((char *)&v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  unint64_t v14 = *(void **)(v2 + 288);
  *uint64_t v13 = v14;
  (*(void (**)(void *, void, uint64_t))(v11 + 104))(v13, enum case for DispatchPredicate.onQueue(_:), v10);
  id v15 = v14;
  LOBYTE(v14) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v11 + 8))(v13, v10);
  if (v14)
  {
    uint64_t v66 = v7;
    uint64_t v67 = v5;
    if (qword_101636CA0 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v16 = type metadata accessor for Logger();
  sub_100010324(v16, (uint64_t)qword_10164CC28);
  sub_100766FF8(a1);
  sub_100766FF8(a1);
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  BOOL v19 = os_log_type_enabled(v17, v18);
  uint64_t v69 = v8;
  uint64_t v68 = v4;
  if (v19)
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    uint64_t v21 = (void *)swift_slowAlloc();
    uint64_t v79 = v2;
    uint64_t v89 = v21;
    *(_DWORD *)uint64_t v20 = 136315138;
    long long v22 = *(_OWORD *)(a1 + 80);
    long long v85 = *(_OWORD *)(a1 + 64);
    long long v86 = v22;
    uint64_t v87 = *(void *)(a1 + 96);
    long long v23 = *(_OWORD *)(a1 + 16);
    long long aBlock = *(_OWORD *)a1;
    long long v82 = v23;
    long long v24 = *(_OWORD *)(a1 + 48);
    long long v83 = *(_OWORD *)(a1 + 32);
    long long v84 = v24;
    sub_100766FF8(a1);
    uint64_t v25 = String.init<A>(describing:)();
    *(void *)&long long aBlock = sub_1008FA0F0(v25, v26, (uint64_t *)&v89);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100766F68(a1);
    sub_100766F68(a1);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Received startLocate command %s", v20, 0xCu);
    swift_arrayDestroy();
    uint64_t v2 = v79;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100766F68(a1);
    sub_100766F68(a1);
  }

  uint64_t v27 = *(void **)(a1 + 64);
  if (v27 && v27[2])
  {
    uint64_t v29 = v27[4];
    uint64_t v28 = v27[5];
    sub_10001D608(v80, (uint64_t)v88, &qword_1016475C0);
    sub_10001D608((uint64_t)v88, (uint64_t)&v89, &qword_1016475C0);
    if (v89 && v89[2])
    {
      uint64_t v65 = v29;
      uint64_t v79 = v2;
      uint64_t v63 = *(void *)(v2 + 184);
      uint64_t v30 = v89[5];
      uint64_t v64 = v89[4];
      uint64_t v31 = v28;
      uint64_t v32 = *(void *)(v2 + 192);
      uint64_t v62 = *(void *)(v2 + 240);
      long long v61 = *(_OWORD *)(v2 + 248);
      long long v60 = *(_OWORD *)(v2 + 264);
      uint64_t v33 = *(void *)(v2 + 280);
      uint64_t v34 = v67;
      *(void *)(v2 + 184) = v68;
      *(void *)(v2 + 192) = v34;
      uint64_t v35 = v78;
      *(void *)(v2 + 200) = v66;
      *(void *)(v2 + 208) = v35;
      uint64_t v36 = v70;
      *(void *)(v2 + 216) = v69;
      *(void *)(v2 + 224) = v36;
      uint64_t v37 = v77;
      *(void *)(v2 + 232) = v71;
      *(void *)(v2 + 240) = v37;
      uint64_t v38 = v75;
      *(void *)(v2 + 248) = v76;
      *(void *)(v2 + 256) = v38;
      uint64_t v39 = v73;
      *(void *)(v2 + 264) = v74;
      *(void *)(v2 + 272) = v39;
      *(void *)(v2 + 280) = v72;
      sub_100766FF8(a1);
      uint64_t v80 = v31;
      swift_bridgeObjectRetain();
      uint64_t v78 = v30;
      swift_bridgeObjectRetain();
      uint64_t v58 = v33;
      long long v57 = v60;
      long long v56 = v61;
      sub_1007670D4(v63, v32);
      if (*(void *)(a1 + 80))
      {
        uint64_t v40 = *(void *)(a1 + 72);
        unint64_t v41 = *(void *)(a1 + 80);
      }
      else
      {
        unint64_t v41 = 0xE900000000000065;
        uint64_t v40 = 0x76697463616F7270;
      }
      uint64_t v53 = type metadata accessor for Transaction();
      __chkstk_darwin(v53);
      uint64_t v54 = v80;
      uint64_t v55 = v65;
      *((void *)&v60 - 8) = v79;
      *((void *)&v60 - 7) = v55;
      *(void *)&long long v56 = v54;
      *((void *)&v56 + 1) = v64;
      *(void *)&long long v57 = v78;
      *((void *)&v57 + 1) = a1;
      uint64_t v58 = v40;
      unint64_t v59 = v41;
      swift_bridgeObjectRetain();
      static Transaction.named<A>(_:with:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
    if (qword_101637440 != -1) {
      swift_once();
    }
    uint64_t v45 = qword_10170F218;
    uint64_t v46 = *(NSObject **)(qword_10170F218 + 16);
    uint64_t v47 = (void *)swift_allocObject();
    v47[2] = v45;
    v47[3] = 0xD00000000000001BLL;
    v47[4] = 0x8000000101406110;
    uint64_t v48 = swift_allocObject();
    *(void *)(v48 + 16) = sub_1007670B8;
    *(void *)(v48 + 24) = v47;
    *(void *)&long long v83 = sub_1003B7AE0;
    *((void *)&v83 + 1) = v48;
    *(void *)&long long aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1) = 1107296256;
    *(void *)&long long v82 = sub_1000A70B0;
    *((void *)&v82 + 1) = &unk_1015D2DD0;
    uint64_t v49 = _Block_copy(&aBlock);
    swift_retain_n();
    swift_retain();
    swift_release();
    dispatch_sync(v46, v49);
    _Block_release(v49);
    LOBYTE(v49) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    swift_release();
    if (v49)
    {
      __break(1u);
    }
    else
    {
      sub_10074BFD0(a1);
      if (qword_101637070 == -1)
      {
LABEL_19:
        sub_100010324(v16, (uint64_t)qword_10170EC30);
        uint64_t v50 = Logger.logObject.getter();
        os_log_type_t v51 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v50, v51))
        {
          BOOL v52 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)BOOL v52 = 0;
          _os_log_impl((void *)&_mh_execute_header, v50, v51, "startLocate - no locationId or findMyId specified in push. Cannot start locate", v52, 2u);
          swift_slowDealloc();
        }

        return;
      }
    }
    swift_once();
    goto LABEL_19;
  }
  sub_100762C84();
  uint64_t v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v42, v43))
  {
    uint64_t v44 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v44 = 0;
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "startLocate - no locationIds received. Possibly me device change or SML was turned ON. Starting location monitor", v44, 2u);
    swift_slowDealloc();
  }

  sub_10074BFD0(a1);
}

void sub_10074B0A4(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (void *)((char *)v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v7 = *(void **)(v1 + 288);
  *uint64_t v6 = v7;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if (v7)
  {
    if (qword_101637070 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v9 = type metadata accessor for Logger();
  sub_100010324(v9, (uint64_t)qword_10170EC30);
  sub_100766FF8(a1);
  sub_100766FF8(a1);
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc();
    uint64_t v13 = swift_slowAlloc();
    *(_DWORD *)uint64_t v12 = 136315138;
    long long v14 = *(_OWORD *)(a1 + 80);
    v26[4] = *(_OWORD *)(a1 + 64);
    v26[5] = v14;
    uint64_t v27 = *(void *)(a1 + 96);
    uint64_t v28 = v13;
    long long v15 = *(_OWORD *)(a1 + 16);
    v26[0] = *(_OWORD *)a1;
    v26[1] = v15;
    long long v16 = *(_OWORD *)(a1 + 48);
    v26[2] = *(_OWORD *)(a1 + 32);
    v26[3] = v16;
    sub_100766FF8(a1);
    uint64_t v17 = String.init<A>(describing:)();
    *(void *)&v26[0] = sub_1008FA0F0(v17, v18, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100766F68(a1);
    sub_100766F68(a1);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Received stopLocate %s", v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100766F68(a1);
    sub_100766F68(a1);
  }

  sub_10001D608(a1 + 56, (uint64_t)&v28, &qword_1016475C0);
  sub_10001D608((uint64_t)&v28, (uint64_t)v26, &qword_1016475C0);
  if (*(void *)&v26[0] && *(void *)(*(void *)&v26[0] + 16))
  {
    uint64_t v20 = *(void *)(*(void *)&v26[0] + 32);
    unint64_t v19 = *(void *)(*(void *)&v26[0] + 40);
    if (*(void *)(a1 + 80))
    {
      uint64_t v21 = *(void *)(a1 + 72);
      unint64_t v22 = *(void *)(a1 + 80);
    }
    else
    {
      unint64_t v22 = 0xE900000000000065;
      uint64_t v21 = 0x76697463616F7270;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_100761AA0(v20, v19, v21, v22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    long long v23 = Logger.logObject.getter();
    os_log_type_t v24 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "No findMyId specified for StopLocate", v25, 2u);
      swift_slowDealloc();
    }
  }
}

uint64_t sub_10074B470(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (uint8_t **)((char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  id v8 = *(void **)(v2 + 288);
  *uint64_t v7 = v8;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if (v8)
  {
    if (qword_101637070 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v10 = type metadata accessor for Logger();
  sub_100010324(v10, (uint64_t)qword_10170EC30);
  os_log_type_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Received distributeKeys command", v13, 2u);
    swift_slowDealloc();
  }

  sub_10001D608(a1 + 56, (uint64_t)v36, &qword_1016475C0);
  uint64_t result = sub_10001D608((uint64_t)v36, (uint64_t)&v37, &qword_1016475C0);
  uint64_t v15 = (uint64_t)v37;
  if (v37 && v37[2])
  {
    uint64_t v16 = v37[4];
    uint64_t v17 = v37[5];
    if (*(void *)(a1 + 88)) {
      unint64_t v18 = *(void **)(a1 + 88);
    }
    else {
      unint64_t v18 = _swiftEmptyDictionarySingleton;
    }
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v19 = Logger.logObject.getter();
    os_log_type_t v20 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc();
      uint64_t v31 = swift_slowAlloc();
      uint64_t v35 = v31;
      uint64_t v32 = v17;
      *(_DWORD *)uint64_t v21 = 136315138;
      uint64_t v30 = v21 + 4;
      swift_bridgeObjectRetain();
      sub_10000588C(&qword_101654A30);
      uint64_t v22 = Dictionary.description.getter();
      uint64_t v33 = v16;
      unint64_t v24 = v23;
      swift_bridgeObjectRelease();
      uint64_t v34 = sub_1008FA0F0(v22, v24, &v35);
      uint64_t v17 = v32;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      uint64_t v16 = v33;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v19, v20, "shareKey pushIdentifiers %s", v21, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v25 = swift_allocObject();
    long long v26 = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(v25 + 88) = *(_OWORD *)(a1 + 48);
    long long v27 = *(_OWORD *)(a1 + 80);
    *(_OWORD *)(v25 + 104) = *(_OWORD *)(a1 + 64);
    *(_OWORD *)(v25 + 120) = v27;
    long long v28 = *(_OWORD *)(a1 + 16);
    *(_OWORD *)(v25 + 40) = *(_OWORD *)a1;
    *(_OWORD *)(v25 + 56) = v28;
    *(void *)(v25 + 16) = v2;
    *(void *)(v25 + 24) = v16;
    *(void *)(v25 + 32) = v17;
    uint64_t v29 = *(void *)(a1 + 96);
    *(_OWORD *)(v25 + 72) = v26;
    *(void *)(v25 + 136) = v29;
    *(void *)(v25 + 144) = v15;
    sub_10048307C((uint64_t)v36);
    swift_retain();
    sub_100766FF8(a1);
    sub_100BAA9DC(v15, (uint64_t)v18, 0, (uint64_t)sub_1007675CC, v25);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t sub_10074B8BC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v6 = *(void **)(v1 + 288);
  *uint64_t v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if (v6)
  {
    if (qword_101637070 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  uint64_t v8 = type metadata accessor for Logger();
  sub_100010324(v8, (uint64_t)qword_10170EC30);
  id v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    os_log_type_t v11 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Handling FetchLabelledLocations command", v11, 2u);
    swift_slowDealloc();
  }

  sub_10060B6F4();
  sub_100758610();
  type metadata accessor for Transaction();
  return static Transaction.named<A>(_:with:)();
}

void sub_10074BAD8()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (uint64_t *)((char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = *(void **)(v0 + 288);
  *uint64_t v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if (v5)
  {
    if (qword_101637080 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  id v7 = self;
  swift_retain();
  id v8 = [v7 standardUserDefaults];
  Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
  NSString v10 = String._bridgeToObjectiveC()();
  [v8 setValue:isa forKey:v10];
  swift_release();

  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_100010324(v11, (uint64_t)qword_10170EC30);
  os_log_type_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    long long v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)long long v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Received autoMeIsActive command. Set autoMeActive to true", v14, 2u);
    swift_slowDealloc();
  }
}

void sub_10074BD54()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate();
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (uint64_t *)((char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = *(void **)(v0 + 288);
  *uint64_t v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if (v5)
  {
    if (qword_101637080 == -1) {
      goto LABEL_3;
    }
  }
  else
  {
    __break(1u);
  }
  swift_once();
LABEL_3:
  id v7 = self;
  swift_retain();
  id v8 = [v7 standardUserDefaults];
  Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
  NSString v10 = String._bridgeToObjectiveC()();
  [v8 setValue:isa forKey:v10];
  swift_release();

  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_100010324(v11, (uint64_t)qword_10170EC30);
  os_log_type_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    long long v14 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)long long v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "Received autoMeIsInactive command. Set autoMeActive to false", v14, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_10074BFD0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  id v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for DispatchQoS();
  uint64_t v32 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v31 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_100010324(v10, (uint64_t)qword_10170EC30);
  sub_100766FF8(a1);
  sub_100766FF8(a1);
  uint64_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v28 = v2;
    os_log_type_t v13 = (uint8_t *)swift_slowAlloc();
    long long v14 = (void *)swift_slowAlloc();
    uint64_t v29 = v7;
    uint64_t v40 = v14;
    *(_DWORD *)os_log_type_t v13 = 136315138;
    uint64_t v30 = v8;
    long long v15 = *(_OWORD *)(a1 + 80);
    long long v37 = *(_OWORD *)(a1 + 64);
    long long v38 = v15;
    uint64_t v39 = *(void *)(a1 + 96);
    long long v16 = *(_OWORD *)(a1 + 16);
    long long aBlock = *(_OWORD *)a1;
    long long v34 = v16;
    long long v17 = *(_OWORD *)(a1 + 48);
    long long v35 = *(_OWORD *)(a1 + 32);
    long long v36 = v17;
    sub_100766FF8(a1);
    uint64_t v18 = String.init<A>(describing:)();
    *(void *)&long long aBlock = sub_1008FA0F0(v18, v19, (uint64_t *)&v40);
    uint64_t v8 = v30;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v2 = v28;
    swift_bridgeObjectRelease();
    sub_100766F68(a1);
    sub_100766F68(a1);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "PushAck: Sending ACK for %s", v13, 0xCu);
    swift_arrayDestroy();
    id v7 = v29;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100766F68(a1);
    sub_100766F68(a1);
  }

  uint64_t v20 = swift_allocObject();
  long long v21 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v20 + 72) = *(_OWORD *)(a1 + 48);
  long long v22 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v20 + 88) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v20 + 104) = v22;
  long long v23 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v20 + 24) = *(_OWORD *)a1;
  *(_OWORD *)(v20 + 40) = v23;
  *(void *)(v20 + 16) = v2;
  *(void *)(v20 + 120) = *(void *)(a1 + 96);
  *(_OWORD *)(v20 + 56) = v21;
  *(void *)&long long v35 = sub_100767464;
  *((void *)&v35 + 1) = v20;
  *(void *)&long long aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256;
  *(void *)&long long v34 = sub_1004B5480;
  *((void *)&v34 + 1) = &unk_1015D2F88;
  unint64_t v24 = _Block_copy(&aBlock);
  sub_100766FF8(a1);
  swift_retain();
  uint64_t v25 = v31;
  static DispatchQoS.unspecified.getter();
  uint64_t v40 = _swiftEmptyArrayStorage;
  sub_100766750((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v24);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v25, v8);
  return swift_release();
}

uint64_t sub_10074C498(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v15 = *(void *)(a2 + 24);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = a1;
  *(void *)(v16 + 24) = a2;
  long long v17 = *(_OWORD *)(a7 + 80);
  *(_OWORD *)(v16 + 96) = *(_OWORD *)(a7 + 64);
  *(_OWORD *)(v16 + 112) = v17;
  uint64_t v18 = *(void *)(a7 + 96);
  long long v19 = *(_OWORD *)(a7 + 16);
  *(_OWORD *)(v16 + 32) = *(_OWORD *)a7;
  *(_OWORD *)(v16 + 48) = v19;
  long long v20 = *(_OWORD *)(a7 + 48);
  *(_OWORD *)(v16 + 64) = *(_OWORD *)(a7 + 32);
  *(_OWORD *)(v16 + 80) = v20;
  *(void *)(v16 + 128) = v18;
  *(void *)(v16 + 136) = a5;
  *(void *)(v16 + 144) = a6;
  *(void *)(v16 + 152) = a8;
  *(void *)(v16 + 160) = a9;
  long long v21 = (void *)swift_allocObject();
  void v21[2] = a3;
  v21[3] = a4;
  v21[4] = a5;
  v21[5] = a6;
  v21[6] = v15;
  v21[7] = sub_100767238;
  v21[8] = v16;
  swift_bridgeObjectRetain_n();
  swift_retain();
  swift_retain();
  sub_100766FF8(a7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  sub_100BA4560();
  swift_release();
  return swift_release();
}

void sub_10074C5F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8)
{
  if (!a1)
  {
    sub_100759090(a5, a6, a7, a8, 0);
LABEL_11:
    sub_10074BFD0(a4);
    Transaction.capture()();
    return;
  }
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v9 = type metadata accessor for Logger();
  sub_100010324(v9, (uint64_t)qword_10170EC30);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v10, v11))
  {
    os_log_type_t v12 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)os_log_type_t v12 = 136315138;
    swift_errorRetain();
    sub_10000588C((uint64_t *)&unk_101638EB0);
    uint64_t v13 = String.init<A>(describing:)();
    sub_1008FA0F0(v13, v14, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "startLocate - unable to verify locationId. Cannot start monitor %s", v12, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  if (qword_101637440 != -1) {
    swift_once();
  }
  uint64_t v15 = qword_10170F218;
  uint64_t v16 = *(NSObject **)(qword_10170F218 + 16);
  long long v17 = (void *)swift_allocObject();
  void v17[2] = v15;
  v17[3] = 0xD00000000000001ELL;
  v17[4] = 0x8000000101406180;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = sub_100769408;
  *(void *)(v18 + 24) = v17;
  aBlock[4] = (uint64_t)sub_1003B7AE0;
  aBlock[5] = v18;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  _OWORD aBlock[2] = (uint64_t)sub_1000A70B0;
  aBlock[3] = (uint64_t)&unk_1015D2E98;
  long long v19 = _Block_copy(aBlock);
  swift_retain_n();
  swift_retain();
  swift_release();
  dispatch_sync(v16, v19);
  _Block_release(v19);
  LOBYTE(v19) = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  swift_release();
  if ((v19 & 1) == 0) {
    goto LABEL_11;
  }
  __break(1u);
}

uint64_t sub_10074C988(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v5 = a5;
  if (!a1)
  {
    if (*(void *)(a5 + 80))
    {
      uint64_t v8 = *(void *)(a5 + 72);
      unint64_t v9 = *(void *)(a5 + 80);
    }
    else
    {
      unint64_t v9 = 0xE900000000000065;
      uint64_t v8 = 0x76697463616F7270;
    }
    swift_bridgeObjectRetain();
    sub_100759090(a3, a4, v8, v9, 0);
    swift_bridgeObjectRelease();
    if (qword_101637440 != -1) {
      swift_once();
    }
    sub_1010E1D10();
  }
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  sub_100010324(v10, (uint64_t)qword_10170EC30);
  swift_bridgeObjectRetain();
  swift_errorRetain();
  swift_bridgeObjectRetain();
  swift_errorRetain();
  os_log_type_t v11 = Logger.logObject.getter();
  os_log_type_t v12 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)uint64_t v13 = 141558531;
    uint64_t v22 = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v13 + 12) = 2081;
    swift_bridgeObjectRetain();
    uint64_t v21 = v5;
    uint64_t v15 = Array.description.getter();
    unint64_t v17 = v16;
    swift_bridgeObjectRelease();
    sub_1008FA0F0(v15, v17, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v13 + 22) = 2080;
    swift_errorRetain();
    sub_10000588C((uint64_t *)&unk_101638EB0);
    uint64_t v18 = String.init<A>(describing:)();
    sub_1008FA0F0(v18, v19, &v22);
    uint64_t v5 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "completed shareKey to %{private,mask.hash}s Error %s", (uint8_t *)v13, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
    swift_errorRelease();
    swift_errorRelease();
  }

  return sub_10074BFD0(v5);
}

uint64_t sub_10074CCC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  swift_retain();
  swift_retain();
  sub_10074CFAC((uint64_t)sub_100767614, v4);
  return swift_release();
}

void sub_10074CD44(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v2 = type metadata accessor for Logger();
    sub_100010324(v2, (uint64_t)qword_10170EC30);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v3 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      uint64_t v9 = swift_slowAlloc();
      *(_DWORD *)uint64_t v5 = 136315138;
      swift_errorRetain();
      sub_10000588C((uint64_t *)&unk_101638EB0);
      uint64_t v6 = String.init<A>(describing:)();
      sub_1008FA0F0(v6, v7, &v9);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "LabelledLocations: Error fetching labels after receiving a fetch labels push %s", v5, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  else
  {
    sub_100607F14();
    uint64_t v8 = type metadata accessor for Transaction();
    __chkstk_darwin(v8);
    static Transaction.named<A>(_:with:)();
    swift_bridgeObjectRelease();
  }
  Transaction.capture()();
}

uint64_t sub_10074CFAC(uint64_t a1, uint64_t a2)
{
  uint64_t v63 = a1;
  uint64_t v64 = a2;
  uint64_t v2 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v2 - 8);
  long long v61 = (char *)v58 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_101649E20);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v58 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for SecureLocationsLabelledLocationsEndpoint();
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)v58 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)v58 - v14;
  uint64_t v16 = enum case for FMNAccountType.fmfApp(_:);
  uint64_t v17 = type metadata accessor for FMNAccountType();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 104))(v15, v16, v17);
  sub_10105F070((uint64_t)&v15[*(int *)(v7 + 20)]);
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  uint64_t v19 = sub_100010324(v18, (uint64_t)qword_10170EC30);
  sub_100768C34((uint64_t)v15, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for SecureLocationsLabelledLocationsEndpoint);
  long long v20 = Logger.logObject.getter();
  os_log_type_t v21 = static os_log_type_t.default.getter();
  BOOL v22 = os_log_type_enabled(v20, v21);
  uint64_t v65 = v15;
  if (v22)
  {
    long long v60 = v6;
    long long v23 = (uint8_t *)swift_slowAlloc();
    uint64_t v67 = swift_slowAlloc();
    *(_DWORD *)long long v23 = 136315138;
    sub_100768C34((uint64_t)v13, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for SecureLocationsLabelledLocationsEndpoint);
    uint64_t v24 = String.init<A>(describing:)();
    uint64_t v66 = sub_1008FA0F0(v24, v25, &v67);
    uint64_t v6 = v60;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100768C9C((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for SecureLocationsLabelledLocationsEndpoint);
    _os_log_impl((void *)&_mh_execute_header, v20, v21, "FetchLabelledLocations: Endpoint %s", v23, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v15 = v65;
    swift_slowDealloc();
  }
  else
  {
    sub_100768C9C((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for SecureLocationsLabelledLocationsEndpoint);
  }

  type metadata accessor for FindMyAppURLSessionFactory(0);
  swift_allocObject();
  uint64_t v26 = type metadata accessor for FMNMockingPreferences();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v6, 1, 1, v26);
  uint64_t v27 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)();
  type metadata accessor for ServerInteractionController(0);
  uint64_t v28 = swift_allocObject();
  sub_100768C34((uint64_t)v15, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for SecureLocationsLabelledLocationsEndpoint);
  swift_retain();
  uint64_t v29 = (void *)sub_1004A5C88((uint64_t)v10, v27, v28);
  id v30 = sub_101060074();
  if (v30)
  {
    uint64_t v33 = (uint64_t)v30;
    uint64_t v34 = v31;
    unint64_t v35 = v32;
    sub_10076813C((uint64_t)v30, v31, v32);
    swift_bridgeObjectRetain();
    sub_1000361E0(v34, v35);
    v58[2] = v19;
    long long v36 = Logger.logObject.getter();
    os_log_type_t v37 = static os_log_type_t.debug.getter();
    BOOL v38 = os_log_type_enabled(v36, v37);
    unint64_t v59 = v29;
    long long v60 = (char *)v27;
    if (v38)
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      uint64_t v67 = swift_slowAlloc();
      *(_DWORD *)uint64_t v39 = 136315138;
      v58[1] = v39 + 4;
      swift_bridgeObjectRetain();
      uint64_t v40 = Dictionary.description.getter();
      unint64_t v42 = v41;
      swift_bridgeObjectRelease();
      uint64_t v66 = sub_1008FA0F0(v40, v42, &v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1001D7860(v33, v34, v35);
      sub_1001D7860(v33, v34, v35);
      _os_log_impl((void *)&_mh_execute_header, v36, v37, "FetchLabelledLocations request headers %s", v39, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1001D7860(v33, v34, v35);
      sub_1001D7860(v33, v34, v35);
    }

    swift_bridgeObjectRetain();
    sub_1000361E0(v34, v35);
    swift_bridgeObjectRetain();
    sub_1000361E0(v34, v35);
    uint64_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = (uint8_t *)swift_slowAlloc();
      uint64_t v67 = swift_slowAlloc();
      *(_DWORD *)uint64_t v48 = 136315138;
      static String.Encoding.utf8.getter();
      uint64_t v49 = String.init(data:encoding:)();
      if (v50)
      {
        unint64_t v51 = v50;
      }
      else
      {
        uint64_t v49 = 7104878;
        unint64_t v51 = 0xE300000000000000;
      }
      uint64_t v66 = sub_1008FA0F0(v49, v51, &v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1001D7860(v33, v34, v35);
      sub_1001D7860(v33, v34, v35);
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "FetchLabelledLocations request body %s", v48, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1001D7860(v33, v34, v35);
      sub_1001D7860(v33, v34, v35);
    }

    uint64_t v52 = v64;
    uint64_t v15 = v65;
    uint64_t v54 = v62;
    uint64_t v53 = v63;
    swift_bridgeObjectRetain();
    sub_1000361E0(v34, v35);
    sub_1004AB590(v33, v34, v35, 0, v59);
    sub_1001D7860(v33, v34, v35);
    uint64_t v55 = (void *)swift_allocObject();
    v55[2] = v54;
    v55[3] = v53;
    v55[4] = v52;
    swift_retain();
    swift_retain();
    Future.addSuccess(block:)();
    swift_release();
    swift_release();
    uint64_t v56 = swift_allocObject();
    *(void *)(v56 + 16) = v53;
    *(void *)(v56 + 24) = v52;
    swift_retain();
    Future.addFailure(block:)();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    sub_1001D7860(v33, v34, v35);
  }
  else
  {
    os_log_type_t v43 = Logger.logObject.getter();
    os_log_type_t v44 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v45 = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, v44, "#FetchLabelledLocations - failed to create request", v45, 2u);
      swift_slowDealloc();
    }

    swift_release();
  }
  swift_release();
  return sub_100768C9C((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for SecureLocationsLabelledLocationsEndpoint);
}

uint64_t sub_10074D8EC(uint8_t *a1, uint64_t a2)
{
  uint64_t v131 = a2;
  id v130 = a1;
  uint64_t v2 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v2 - 8);
  double v124 = (char *)&v116 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v127 = type metadata accessor for Date();
  uint64_t v129 = *(void *)(v127 - 8);
  uint64_t v4 = __chkstk_darwin(v127);
  uint64_t v126 = (uint64_t)&v116 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v4);
  uint64_t v125 = (uint64_t)&v116 - v6;
  uint64_t v7 = sub_10000588C((uint64_t *)&unk_101649E20);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v116 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for SecureLocationsPushAckEndpoint();
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v116 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v116 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v116 - v17;
  uint64_t v19 = enum case for FMNAccountType.searchParty(_:);
  uint64_t v20 = type metadata accessor for FMNAccountType();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 104))(v18, v19, v20);
  sub_100C00D4C((uint64_t)&v18[*(int *)(v10 + 20)]);
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  uint64_t v22 = sub_100010324(v21, (uint64_t)qword_10170EC30);
  sub_100768C34((uint64_t)v18, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for SecureLocationsPushAckEndpoint);
  long long v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = swift_slowAlloc();
    double v123 = v9;
    uint64_t v26 = (uint8_t *)v25;
    uint64_t v27 = swift_slowAlloc();
    id v128 = v18;
    uint64_t v134 = v27;
    *(_DWORD *)uint64_t v26 = 136315138;
    sub_100768C34((uint64_t)v16, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for SecureLocationsPushAckEndpoint);
    uint64_t v28 = String.init<A>(describing:)();
    v133[0] = sub_1008FA0F0(v28, v29, &v134);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100768C9C((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for SecureLocationsPushAckEndpoint);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "PushAck endpoint %s", v26, 0xCu);
    swift_arrayDestroy();
    uint64_t v18 = v128;
    swift_slowDealloc();
    uint64_t v9 = v123;
    swift_slowDealloc();
  }
  else
  {
    sub_100768C9C((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for SecureLocationsPushAckEndpoint);
  }

  type metadata accessor for FindMyAppURLSessionFactory(0);
  swift_allocObject();
  uint64_t v30 = type metadata accessor for FMNMockingPreferences();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56))(v9, 1, 1, v30);
  uint64_t v31 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)();
  type metadata accessor for ServerInteractionController(0);
  uint64_t v32 = swift_allocObject();
  sub_100768C34((uint64_t)v18, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for SecureLocationsPushAckEndpoint);
  swift_retain();
  uint64_t v33 = (void *)sub_1004A68D0((uint64_t)v13, v31, v32);
  id v34 = [self currentDevice];
  if (!v34
    || (unint64_t v35 = v34,
        id v36 = [v34 uniqueDeviceIdentifier],
        v35,
        !v36))
  {
    uint64_t v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v53, v54))
    {
LABEL_14:

      swift_release();
      goto LABEL_15;
    }
    uint64_t v55 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v55 = 0;
    uint64_t v56 = "Unable to get device identifier for server PushAck";
LABEL_13:
    _os_log_impl((void *)&_mh_execute_header, v53, v54, v56, v55, 2u);
    swift_slowDealloc();
    goto LABEL_14;
  }
  uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v39 = v38;

  sub_10000588C(&qword_101644320);
  OS_dispatch_queue.sync<A>(execute:)();
  if (!v135)
  {
    swift_bridgeObjectRelease();
    uint64_t v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v53, v54)) {
      goto LABEL_14;
    }
    uint64_t v55 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v55 = 0;
    uint64_t v56 = "No APS token. Not proceeding with PushAck";
    goto LABEL_13;
  }
  uint64_t v119 = v135;
  uint64_t v120 = v37;
  uint64_t v121 = v39;
  uint64_t v117 = v33;
  uint64_t v118 = v134;
  sub_10000588C(&qword_101654A30);
  unsafeFromAsyncTask<A>(_:)();
  uint64_t v40 = v134;
  swift_bridgeObjectRetain();
  unint64_t v41 = (uint64_t *)v131;
  sub_100766FF8(v131);
  sub_100766FF8((uint64_t)v41);
  swift_bridgeObjectRetain();
  unint64_t v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.default.getter();
  BOOL v44 = os_log_type_enabled(v42, v43);
  id v130 = (uint8_t *)v40;
  double v123 = (char *)v31;
  uint64_t v122 = 0;
  if (v44)
  {
    uint64_t v45 = swift_slowAlloc();
    uint64_t v134 = swift_slowAlloc();
    *(_DWORD *)uint64_t v45 = 141558787;
    v133[0] = 1752392040;
    uint64_t v116 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v45 + 12) = 2081;
    swift_bridgeObjectRetain();
    uint64_t v46 = Array.description.getter();
    unint64_t v48 = v47;
    swift_bridgeObjectRelease();
    v133[0] = sub_1008FA0F0(v46, v48, &v134);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100766F68(v131);
    sub_100766F68(v131);
    *(_WORD *)(v45 + 22) = 2160;
    v133[0] = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v45 + 32) = 2081;
    swift_bridgeObjectRetain();
    uint64_t v49 = Array.description.getter();
    unint64_t v51 = v50;
    swift_bridgeObjectRelease();
    v133[0] = sub_1008FA0F0(v49, v51, &v134);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "Watch Monitoring: Watches to check connection got through Server are %{private,mask.hash}s. Watches connected now sending to pushAck are %{private,mask.hash}s", (uint8_t *)v45, 0x2Au);
    swift_arrayDestroy();
    unint64_t v41 = (uint64_t *)v131;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_100766F68((uint64_t)v41);
    sub_100766F68((uint64_t)v41);

    uint64_t v52 = swift_bridgeObjectRelease_n();
  }
  uint64_t v58 = v127;
  if (qword_101637440 != -1) {
    uint64_t v52 = swift_once();
  }
  uint64_t v59 = qword_10170F218;
  __chkstk_darwin(v52);
  *(&v116 - 2) = v59;
  *((unsigned char *)&v116 - 8) = 1;
  swift_retain();
  sub_10000588C(&qword_10164D118);
  OS_dispatch_queue.sync<A>(execute:)();
  swift_release();
  uint64_t v60 = v134;
  uint64_t v61 = *v41;
  unint64_t v62 = v41[1];
  uint64_t v63 = HIBYTE(v62) & 0xF;
  uint64_t v64 = v61 & 0xFFFFFFFFFFFFLL;
  if ((v62 & 0x2000000000000000) != 0) {
    uint64_t v65 = HIBYTE(v62) & 0xF;
  }
  else {
    uint64_t v65 = v61 & 0xFFFFFFFFFFFFLL;
  }
  if (!v65) {
    goto LABEL_55;
  }
  if ((v62 & 0x1000000000000000) != 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v69 = sub_10048CBF0(v61, v62, 10);
    char v115 = v114;
    swift_bridgeObjectRelease();
    if ((v115 & 1) == 0) {
      goto LABEL_56;
    }
    goto LABEL_55;
  }
  if ((v62 & 0x2000000000000000) == 0)
  {
    if ((v61 & 0x1000000000000000) != 0) {
      uint64_t v66 = (unsigned __int8 *)((v62 & 0xFFFFFFFFFFFFFFFLL) + 32);
    }
    else {
      uint64_t v66 = (unsigned __int8 *)_StringObject.sharedUTF8.getter();
    }
    uint64_t v67 = sub_10048C9FC(v66, v64, 10);
    if ((v68 & 1) == 0)
    {
      uint64_t v69 = (uint64_t)v67;
      goto LABEL_56;
    }
    goto LABEL_55;
  }
  uint64_t v134 = v61;
  uint64_t v135 = v62 & 0xFFFFFFFFFFFFFFLL;
  if (v61 == 43)
  {
    if (!v63)
    {
LABEL_92:
      __break(1u);
      JUMPOUT(0x10074EC9CLL);
    }
    if (v63 != 1 && (BYTE1(v61) - 48) <= 9u)
    {
      uint64_t v69 = (BYTE1(v61) - 48);
      uint64_t v74 = v63 - 2;
      if (v63 != 2)
      {
        uint64_t v75 = (unsigned __int8 *)&v134 + 2;
        while (1)
        {
          unsigned int v76 = *v75 - 48;
          if (v76 > 9) {
            goto LABEL_55;
          }
          uint64_t v77 = 10 * v69;
          if ((unsigned __int128)(v69 * (__int128)10) >> 64 != (10 * v69) >> 63) {
            goto LABEL_55;
          }
          uint64_t v69 = v77 + v76;
          if (__OFADD__(v77, v76)) {
            goto LABEL_55;
          }
          ++v75;
          if (!--v74) {
            goto LABEL_56;
          }
        }
      }
      goto LABEL_56;
    }
LABEL_55:
    uint64_t v78 = v125;
    static Date.trustedNow.getter(v125);
    uint64_t v69 = Date.epoch.getter();
    (*(void (**)(uint64_t, uint64_t))(v129 + 8))(v78, v58);
    goto LABEL_56;
  }
  if (v61 != 45)
  {
    if (v63 && (v61 - 48) <= 9u)
    {
      uint64_t v69 = (v61 - 48);
      uint64_t v110 = v63 - 1;
      if (v63 != 1)
      {
        uint64_t v111 = (unsigned __int8 *)&v134 + 1;
        while (1)
        {
          unsigned int v112 = *v111 - 48;
          if (v112 > 9) {
            goto LABEL_55;
          }
          uint64_t v113 = 10 * v69;
          if ((unsigned __int128)(v69 * (__int128)10) >> 64 != (10 * v69) >> 63) {
            goto LABEL_55;
          }
          uint64_t v69 = v113 + v112;
          if (__OFADD__(v113, v112)) {
            goto LABEL_55;
          }
          ++v111;
          if (!--v110) {
            goto LABEL_56;
          }
        }
      }
      goto LABEL_56;
    }
    goto LABEL_55;
  }
  if (!v63)
  {
    __break(1u);
    goto LABEL_92;
  }
  if (v63 == 1 || (BYTE1(v61) - 48) > 9u) {
    goto LABEL_55;
  }
  uint64_t v69 = -(uint64_t)(BYTE1(v61) - 48);
  uint64_t v70 = v63 - 2;
  if (v63 != 2)
  {
    uint64_t v71 = (unsigned __int8 *)&v134 + 2;
    do
    {
      unsigned int v72 = *v71 - 48;
      if (v72 > 9) {
        goto LABEL_55;
      }
      uint64_t v73 = 10 * v69;
      if ((unsigned __int128)(v69 * (__int128)10) >> 64 != (10 * v69) >> 63) {
        goto LABEL_55;
      }
      uint64_t v69 = v73 - v72;
      if (__OFSUB__(v73, v72)) {
        goto LABEL_55;
      }
      ++v71;
    }
    while (--v70);
  }
LABEL_56:
  uint64_t v79 = v126;
  static Date.trustedNow.getter(v126);
  uint64_t v80 = Date.epoch.getter();
  (*(void (**)(uint64_t, uint64_t))(v129 + 8))(v79, v58);
  unint64_t v81 = 0xD000000000000014;
  unint64_t v82 = 0x80000001013EEDF0;
  switch(*(unsigned char *)(v131 + 32))
  {
    case 1:
      unint64_t v81 = 0xD000000000000017;
      long long v83 = "DISTRIBUTE_KEYS_COMMAND";
      goto LABEL_60;
    case 2:
      unint64_t v81 = 0xD000000000000013;
      long long v83 = "STOP_LOCATE_COMMAND";
      goto LABEL_60;
    case 3:
      unint64_t v81 = 0xD000000000000018;
      long long v83 = "FETCH_LABELLED_LOCATIONS";
LABEL_60:
      unint64_t v82 = (unint64_t)(v83 - 32) | 0x8000000000000000;
      break;
    case 4:
      unint64_t v82 = 0xEE00455649544341;
      unint64_t v81 = 0x5F454D5F4F545541;
      break;
    case 5:
      unint64_t v82 = 0x80000001013EEE80;
      unint64_t v81 = 0xD000000000000010;
      break;
    default:
      break;
  }
  uint64_t v85 = *(void *)(v131 + 16);
  uint64_t v84 = *(void *)(v131 + 24);
  uint64_t v134 = v69;
  uint64_t v135 = v80;
  uint64_t v136 = v85;
  uint64_t v137 = v84;
  uint64_t v138 = v60;
  uint64_t v139 = v118;
  uint64_t v140 = v119;
  uint64_t v141 = v120;
  uint64_t v142 = v121;
  strcpy((char *)v143, "searchpartyd");
  HIBYTE(v143[6]) = 0;
  v143[7] = -5120;
  uint64_t v144 = _swiftEmptyDictionarySingleton;
  long long v145 = 0u;
  long long v146 = 0u;
  long long v147 = 0u;
  char v148 = 0;
  unint64_t v149 = v130;
  unint64_t v150 = v81;
  unint64_t v151 = v82;
  swift_bridgeObjectRetain();
  id v86 = sub_100C01CDC((uint64_t)&v134);
  if (!v86)
  {
    uint64_t v53 = Logger.logObject.getter();
    os_log_type_t v102 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v53, v102))
    {
      unint64_t v103 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v103 = 0;
      _os_log_impl((void *)&_mh_execute_header, v53, v102, "PushAck - unable to create request", v103, 2u);
      swift_slowDealloc();
    }
    goto LABEL_14;
  }
  uint64_t v89 = (uint64_t)v86;
  uint64_t v90 = v87;
  unint64_t v91 = v88;
  id v92 = Logger.logObject.getter();
  os_log_type_t v93 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v92, v93))
  {
    uint64_t v94 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v94 = 0;
    _os_log_impl((void *)&_mh_execute_header, v92, v93, "Sending PushAck server request", v94, 2u);
    swift_slowDealloc();
  }

  sub_10076813C(v89, v90, v91);
  swift_bridgeObjectRetain();
  sub_1000361E0(v90, v91);
  long long v95 = Logger.logObject.getter();
  os_log_type_t v96 = static os_log_type_t.debug.getter();
  BOOL v97 = os_log_type_enabled(v95, v96);
  id v128 = v18;
  if (v97)
  {
    unint64_t v98 = (uint8_t *)swift_slowAlloc();
    uint64_t v131 = swift_slowAlloc();
    v133[0] = v131;
    *(_DWORD *)unint64_t v98 = 136315138;
    id v130 = v98 + 4;
    swift_bridgeObjectRetain();
    uint64_t v99 = Dictionary.description.getter();
    unint64_t v101 = v100;
    swift_bridgeObjectRelease();
    uint64_t v132 = sub_1008FA0F0(v99, v101, v133);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1001D7860(v89, v90, v91);
    sub_1001D7860(v89, v90, v91);
    _os_log_impl((void *)&_mh_execute_header, v95, v96, "PushAck request headers %s", v98, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1001D7860(v89, v90, v91);
    sub_1001D7860(v89, v90, v91);
  }

  swift_bridgeObjectRetain();
  sub_1000361E0(v90, v91);
  swift_bridgeObjectRetain();
  sub_1000361E0(v90, v91);
  uint64_t v104 = Logger.logObject.getter();
  os_log_type_t v105 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v104, v105))
  {
    double v106 = (uint8_t *)swift_slowAlloc();
    v133[0] = swift_slowAlloc();
    *(_DWORD *)double v106 = 136315138;
    static String.Encoding.utf8.getter();
    uint64_t v107 = String.init(data:encoding:)();
    if (v108)
    {
      unint64_t v109 = v108;
    }
    else
    {
      uint64_t v107 = 7104878;
      unint64_t v109 = 0xE300000000000000;
    }
    uint64_t v132 = sub_1008FA0F0(v107, v109, v133);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1001D7860(v89, v90, v91);
    sub_1001D7860(v89, v90, v91);
    _os_log_impl((void *)&_mh_execute_header, v104, v105, "PushAck request body %s", v106, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1001D7860(v89, v90, v91);
    sub_1001D7860(v89, v90, v91);
  }

  uint64_t v18 = v128;
  swift_bridgeObjectRetain();
  sub_1000361E0(v90, v91);
  sub_1004ABE84(v89, v90, v91, 0, v117);
  sub_1001D7860(v89, v90, v91);
  Future.addSuccess(block:)();
  swift_release();
  Future.addFailure(block:)();
  swift_release();
  swift_release();
  swift_release();
  sub_1001D7860(v89, v90, v91);
LABEL_15:
  swift_release();
  return sub_100768C9C((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for SecureLocationsPushAckEndpoint);
}

uint64_t sub_10074ECB4(uint64_t a1)
{
  *(void *)(v1 + 56) = a1;
  return _swift_task_switch(sub_10074ECD4, 0, 0);
}

uint64_t sub_10074ECD4()
{
  type metadata accessor for PairedAutoMeCapableWatches();
  uint64_t v1 = swift_allocObject();
  v0[8] = v1;
  swift_defaultActor_initialize();
  uint64_t v2 = (objc_class *)type metadata accessor for BluetoothConnectionObserver();
  id v3 = [objc_allocWithZone(v2) init];
  v0[5] = v2;
  v0[6] = &off_1016035A0;
  v0[2] = v3;
  type metadata accessor for PairedBluetoothState();
  uint64_t v4 = swift_allocObject();
  uint64_t v5 = sub_1000BD078((uint64_t)(v0 + 2), (uint64_t)v2);
  uint64_t v6 = *((void *)v2 - 1);
  uint64_t v7 = (uint64_t *)swift_task_alloc();
  (*(void (**)(uint64_t *, uint64_t, objc_class *))(v6 + 16))(v7, v5, v2);
  uint64_t v8 = *v7;
  id v9 = v3;
  uint64_t v10 = sub_10075709C(v8, v4);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)(v0 + 2));

  swift_task_dealloc();
  *(void *)(v1 + 112) = v10;
  uint64_t v11 = (void *)swift_task_alloc();
  v0[9] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_10074EE94;
  return sub_10103B758();
}

uint64_t sub_10074EE94(uint64_t a1)
{
  *(void *)(*(void *)v1 + 80) = a1;
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_10074EFB4, 0, 0);
}

uint64_t sub_10074EFB4()
{
  **(void **)(v0 + 56) = *(void *)(v0 + 80);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10074EFD4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for FMNServerInteractionController.FMNResponseFields();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100010324(v6, (uint64_t)qword_10170EC30);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, a1, v2);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    id v9 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)id v9 = 134217984;
    uint64_t v10 = FMNServerInteractionController.FMNResponseFields.statusCode.getter();
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    v11[1] = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "PushAck received status %ld", v9, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
}

void sub_10074F1DC()
{
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100010324(v0, (uint64_t)qword_10170EC30);
  swift_errorRetain();
  swift_errorRetain();
  oslog = Logger.logObject.getter();
  os_log_type_t v1 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(oslog, v1))
  {
    uint64_t v2 = (uint8_t *)swift_slowAlloc();
    uint64_t v6 = swift_slowAlloc();
    *(_DWORD *)uint64_t v2 = 136315138;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v3 = String.init<A>(describing:)();
    sub_1008FA0F0(v3, v4, &v6);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, oslog, v1, "PushAck request failed %s", v2, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }
}

uint64_t sub_10074F3D4(uint64_t a1, uint64_t a2, void (*a3)(void, void), uint64_t a4)
{
  uint64_t v35 = a2;
  uint64_t v36 = a4;
  id v34 = a3;
  uint64_t v5 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v5 - 8);
  uint64_t v6 = type metadata accessor for FMNServerInteractionController.FMNResponseFields();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  id v9 = (char *)v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = sub_100010324(v10, (uint64_t)qword_10170EC30);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, v6);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    v33[0] = v11;
    uint64_t v15 = v14;
    v33[1] = a1;
    *(_DWORD *)uint64_t v14 = 134217984;
    uint64_t v16 = FMNServerInteractionController.FMNResponseFields.statusCode.getter();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v37 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "FetchLabelledLocations - response code %ld", v15, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }

  uint64_t v17 = FMNServerInteractionController.FMNResponseFields.data.getter();
  unint64_t v19 = v18;
  static String.Encoding.utf8.getter();
  uint64_t v20 = String.init(data:encoding:)();
  uint64_t v22 = v21;
  sub_10001CFB8(v17, v19);
  swift_bridgeObjectRetain();
  long long v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = (uint8_t *)swift_slowAlloc();
    uint64_t v26 = swift_slowAlloc();
    uint64_t v38 = v22;
    uint64_t v39 = v26;
    *(_DWORD *)uint64_t v25 = 136315138;
    uint64_t v37 = v20;
    swift_bridgeObjectRetain();
    sub_10000588C(&qword_101644320);
    uint64_t v27 = String.init<A>(describing:)();
    uint64_t v37 = sub_1008FA0F0(v27, v28, &v39);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "FetchLabelledLocations %s", v25, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  uint64_t v29 = FMNServerInteractionController.FMNResponseFields.data.getter();
  unint64_t v31 = v30;
  sub_10074F7D8(v29, v30, v34);
  return sub_10001CFB8(v29, v31);
}

uint64_t sub_10074F7D8(uint64_t a1, uint64_t a2, void (*a3)(void, void))
{
  uint64_t v4 = v3;
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  sub_100767660();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  uint64_t v6 = v22;
  if (v22)
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v7 = type metadata accessor for Logger();
    sub_100010324(v7, (uint64_t)qword_10170EC30);
    swift_bridgeObjectRetain_n();
    uint64_t v8 = Logger.logObject.getter();
    os_log_type_t v9 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = swift_slowAlloc();
      uint64_t v22 = swift_slowAlloc();
      *(_DWORD *)uint64_t v10 = 134218242;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v10 + 12) = 2080;
      swift_bridgeObjectRetain();
      uint64_t v11 = a3;
      uint64_t v12 = Array.description.getter();
      unint64_t v14 = v13;
      swift_bridgeObjectRelease();
      uint64_t v15 = v12;
      a3 = v11;
      sub_1008FA0F0(v15, v14, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "FetchLabelledLocations - fetched labels %ld %s", (uint8_t *)v10, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v20 = *(void *)(v4 + 16);
    swift_bridgeObjectRetain();
    swift_retain();
    sub_10060E3CC(v6, v20, v4, v6);
    swift_release();
    swift_bridgeObjectRelease();
    a3(v6, 0);
    swift_bridgeObjectRelease();
  }
  else
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_100010324(v16, (uint64_t)qword_10170EC30);
    uint64_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v17, v18))
    {
      unint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "FetchLabelledLocations Error decoding labels", v19, 2u);
      swift_slowDealloc();
    }

    a3(_swiftEmptyArrayStorage, 0);
  }
  return swift_release();
}

uint64_t sub_10074FD64(uint64_t a1, uint64_t (*a2)(void *, uint64_t))
{
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v4 = type metadata accessor for Logger();
  sub_100010324(v4, (uint64_t)qword_10170EC30);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v5 = Logger.logObject.getter();
  os_log_type_t v6 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc();
    uint64_t v11 = swift_slowAlloc();
    *(_DWORD *)uint64_t v7 = 136315138;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v8 = String.init<A>(describing:)();
    sub_1008FA0F0(v8, v9, &v11);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "FetchLabelledLocations - error fetching labels %s", v7, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  return a2(_swiftEmptyArrayStorage, a1);
}

void sub_10074FF54(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_10074FF60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_release();
}

uint64_t sub_10074FFCC(uint64_t a1, int a2, uint64_t (*a3)(uint64_t, void), uint64_t a4)
{
  uint64_t v87 = a4;
  unint64_t v88 = a3;
  int v109 = a2;
  uint64_t v89 = a1;
  uint64_t v5 = type metadata accessor for SecureLocation();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  unint64_t v9 = (char *)&v85 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v110 = (void *)((char *)&v85 - v12);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v85 - v16;
  uint64_t v18 = __chkstk_darwin(v15);
  long long v23 = (double *)((char *)&v85 - v22);
  uint64_t v98 = v4;
  if (*(void *)(*(void *)(v4 + 104) + 16))
  {
    uint64_t v116 = v21;
    uint64_t v117 = v20;
    uint64_t v90 = (uint64_t *)v19;
    uint64_t v91 = v18;
    if (qword_101637080 != -1) {
      swift_once();
    }
    swift_retain();
    OS_dispatch_queue.sync<A>(execute:)();
    swift_release();
    long long v144 = v131;
    long long v145 = v132;
    long long v146 = v133;
    long long v140 = v127;
    long long v141 = v128;
    long long v142 = v129;
    long long v143 = v130;
    long long v136 = v123;
    long long v137 = v124;
    long long v138 = v125;
    long long v139 = v126;
    long long v134 = v121;
    long long v135 = v122;
    sub_100551984((uint64_t)&v134);
    uint64_t v97 = *(void *)(v89 + 16);
    if (v97)
    {
      double v24 = *(double *)&v135;
      unint64_t v96 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
      uint64_t v95 = v89 + v96;
      uint64_t v25 = *(void *)(v6 + 72);
      id v86 = &v119;
      swift_bridgeObjectRetain();
      uint64_t v26 = 0;
      uint64_t v27 = _swiftEmptyArrayStorage;
      *(void *)&long long v28 = 136315906;
      long long v104 = v28;
      unint64_t v103 = (char *)&type metadata for Any + 8;
      *(void *)&long long v28 = 136315650;
      long long v102 = v28;
      *(void *)&long long v28 = 136315394;
      long long v85 = v28;
      double v106 = v23;
      id v92 = v9;
      os_log_type_t v93 = v17;
      uint64_t v94 = v25;
      while (1)
      {
        uint64_t v101 = v26;
        sub_100768C34(v95 + v25 * v26, (uint64_t)v23, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        sub_100768C34((uint64_t)v23, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        uint64_t v29 = *(void *)(v98 + 104);
        uint64_t v30 = (uint64_t)v116;
        if (!*(void *)(v29 + 16)) {
          goto LABEL_50;
        }
        uint64_t v114 = *(void *)(v29 + 16);
        uint64_t v99 = v27;
        uint64_t v100 = swift_bridgeObjectRetain();
        unint64_t v31 = (unint64_t *)(v100 + 56);
        while (1)
        {
          uint64_t v32 = *(v31 - 2);
          uint64_t v112 = *(v31 - 1);
          unint64_t v33 = *v31;
          double v34 = *((double *)v31 + 3);
          double v35 = *((double *)v31 + 4);
          unint64_t v36 = v31[5];
          unint64_t v37 = v31[7];
          uint64_t v115 = v31[6];
          unint64_t v38 = v31[2];
          uint64_t v39 = qword_101637070;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v39 != -1) {
            swift_once();
          }
          uint64_t v40 = type metadata accessor for Logger();
          uint64_t v41 = sub_100010324(v40, (uint64_t)qword_10170EC30);
          sub_100768C34((uint64_t)v23, v30, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
          uint64_t v111 = v41;
          unint64_t v42 = Logger.logObject.getter();
          os_log_type_t v43 = static os_log_type_t.info.getter();
          uint64_t v113 = v42;
          if (os_log_type_enabled(v42, v43))
          {
            uint64_t v44 = swift_slowAlloc();
            id v108 = (id)swift_slowAlloc();
            uint64_t v118 = (uint64_t)v108;
            *(_DWORD *)uint64_t v44 = v104;
            swift_bridgeObjectRetain();
            *(void *)(v44 + 4) = sub_1008FA0F0(v112, v33, &v118);
            swift_bridgeObjectRelease();
            *(_WORD *)(v44 + 12) = 2080;
            if (v37) {
              uint64_t v45 = v115;
            }
            else {
              uint64_t v45 = 1818848800;
            }
            if (v37) {
              unint64_t v46 = v37;
            }
            else {
              unint64_t v46 = 0xE400000000000000;
            }
            swift_bridgeObjectRetain();
            *(void *)(v44 + 14) = sub_1008FA0F0(v45, v46, &v118);
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            *(_WORD *)(v44 + 22) = 2080;
            uint64_t v47 = *v116;
            unint64_t v48 = v116[1];
            swift_bridgeObjectRetain();
            uint64_t v49 = v47;
            uint64_t v30 = (uint64_t)v116;
            *(void *)(v44 + 24) = sub_1008FA0F0(v49, v48, &v118);
            swift_bridgeObjectRelease();
            sub_100768C9C(v30, (uint64_t (*)(void))type metadata accessor for SecureLocation);
            *(_WORD *)(v44 + 32) = 2048;
            *(void *)(v44 + 34) = v36;
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            unint64_t v50 = v113;
            _os_log_impl((void *)&_mh_execute_header, v113, v43, "LabelledLocations Checking label %s %s %s %f", (uint8_t *)v44, 0x2Au);
            swift_arrayDestroy();
            swift_slowDealloc();
            long long v23 = v106;
            swift_slowDealloc();
          }
          else
          {
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            sub_100768C9C(v30, (uint64_t (*)(void))type metadata accessor for SecureLocation);

            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
          }
          sub_100768C34((uint64_t)v23, v117, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          if (!v37 && (v109 & 1) != 0)
          {
            sub_100768C9C(v117, (uint64_t (*)(void))type metadata accessor for SecureLocation);
            goto LABEL_25;
          }
          sub_100768C34(v117, (uint64_t)v110, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          if ((v109 & 1) == 0) {
            break;
          }
          sub_100768C9C((uint64_t)v110, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          sub_100768C9C(v117, (uint64_t (*)(void))type metadata accessor for SecureLocation);
LABEL_9:
          swift_bridgeObjectRelease();
LABEL_10:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v31 += 11;
          if (!--v114)
          {
            swift_bridgeObjectRelease();
            unint64_t v9 = v92;
            uint64_t v17 = v93;
            goto LABEL_49;
          }
        }
        uint64_t v113 = v32;
        if (!v37)
        {
          swift_bridgeObjectRetain();
          sub_100768C9C((uint64_t)v110, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          sub_100768C9C(v117, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_10;
        }
        if (v115 == *v110 && v37 == v110[1])
        {
          swift_bridgeObjectRetain();
          sub_100768C9C((uint64_t)v110, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          sub_100768C9C(v117, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          swift_bridgeObjectRelease();
          uint64_t v32 = v113;
        }
        else
        {
          char v62 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRetain();
          sub_100768C9C((uint64_t)v110, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          sub_100768C9C(v117, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          swift_bridgeObjectRelease();
          uint64_t v32 = v113;
          if ((v62 & 1) == 0)
          {
            swift_bridgeObjectRelease();
            uint64_t v30 = (uint64_t)v116;
            goto LABEL_10;
          }
        }
LABEL_25:
        id v51 = [objc_allocWithZone((Class)CLLocation) initWithLatitude:v34 longitude:v35];
        id v107 = [objc_allocWithZone((Class)CLLocation) initWithLatitude:v23[3] longitude:v23[2]];
        id v108 = v51;
        [v51 distanceFromLocation:];
        double v53 = v52;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        unint64_t v54 = v33;
        uint64_t v55 = Logger.logObject.getter();
        os_log_type_t v56 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v55, v56))
        {
          uint64_t v57 = swift_slowAlloc();
          unint64_t v105 = v38;
          uint64_t v58 = v57;
          uint64_t v59 = swift_slowAlloc();
          uint64_t v113 = v32;
          uint64_t v118 = v59;
          *(_DWORD *)uint64_t v58 = v102;
          swift_bridgeObjectRetain();
          *(void *)(v58 + 4) = sub_1008FA0F0(v112, v54, &v118);
          swift_bridgeObjectRelease();
          *(_WORD *)(v58 + 12) = 2080;
          if (v37) {
            uint64_t v60 = v115;
          }
          else {
            uint64_t v60 = 0x206C696E20;
          }
          if (v37) {
            unint64_t v61 = v37;
          }
          else {
            unint64_t v61 = 0xE500000000000000;
          }
          swift_bridgeObjectRetain();
          *(void *)(v58 + 14) = sub_1008FA0F0(v60, v61, &v118);
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          *(_WORD *)(v58 + 22) = 2048;
          *(double *)(v58 + 24) = v53;
          _os_log_impl((void *)&_mh_execute_header, v55, v56, "LabelledLocations %s %s Label Distance %f", (uint8_t *)v58, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }
        uint64_t v30 = (uint64_t)v116;
        long long v23 = v106;
        if (v53 > v24)
        {

          goto LABEL_9;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v17 = v93;
        swift_beginAccess();
        uint64_t v63 = v91;
        uint64_t v64 = &v17[*(int *)(v91 + 64)];
        *(void *)uint64_t v64 = v112;
        *((void *)v64 + 1) = v54;
        swift_bridgeObjectRelease();
        uint64_t v65 = (uint64_t)v23;
        uint64_t v66 = v90;
        sub_100768C34(v65, (uint64_t)v90, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        uint64_t v67 = Logger.logObject.getter();
        os_log_type_t v68 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v67, v68))
        {
          uint64_t v69 = swift_slowAlloc();
          v120[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v69 = v85;
          uint64_t v70 = (uint64_t *)&v17[*(int *)(v63 + 64)];
          uint64_t v71 = v70[1];
          uint64_t v118 = *v70;
          uint64_t v119 = v71;
          swift_bridgeObjectRetain();
          sub_10000588C(&qword_101644320);
          uint64_t v72 = String.init<A>(describing:)();
          uint64_t v118 = sub_1008FA0F0(v72, v73, v120);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v69 + 12) = 2080;
          uint64_t v74 = *v66;
          unint64_t v75 = v66[1];
          swift_bridgeObjectRetain();
          uint64_t v118 = sub_1008FA0F0(v74, v75, v120);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          uint64_t v17 = v93;
          swift_bridgeObjectRelease();
          sub_100768C9C((uint64_t)v66, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          _os_log_impl((void *)&_mh_execute_header, v67, v68, "LabelledLocations Adding label %s to location %s", (uint8_t *)v69, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_100768C9C((uint64_t)v66, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        }

        unint64_t v9 = v92;
        long long v23 = v106;
LABEL_49:
        uint64_t v27 = v99;
LABEL_50:
        swift_beginAccess();
        sub_100768C34((uint64_t)v17, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v27 = (void *)sub_100A712C4(0, v27[2] + 1, 1, (unint64_t)v27);
        }
        unint64_t v77 = v27[2];
        unint64_t v76 = v27[3];
        if (v77 >= v76 >> 1) {
          uint64_t v27 = (void *)sub_100A712C4(v76 > 1, v77 + 1, 1, (unint64_t)v27);
        }
        uint64_t v78 = v101 + 1;
        v27[2] = v77 + 1;
        uint64_t v79 = (uint64_t)v27 + v96 + v77 * v94;
        uint64_t v25 = v94;
        sub_100767F00((uint64_t)v9, v79, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        sub_100768C9C((uint64_t)v23, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        uint64_t v26 = v78;
        sub_100768C9C((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        if (v78 == v97)
        {
          swift_bridgeObjectRelease();
          goto LABEL_62;
        }
      }
    }
    uint64_t v27 = _swiftEmptyArrayStorage;
LABEL_62:
    v88((uint64_t)v27, 0);
    return swift_bridgeObjectRelease();
  }
  else
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v80 = type metadata accessor for Logger();
    sub_100010324(v80, (uint64_t)qword_10170EC30);
    unint64_t v81 = Logger.logObject.getter();
    os_log_type_t v82 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v81, v82))
    {
      long long v83 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v83 = 0;
      _os_log_impl((void *)&_mh_execute_header, v81, v82, "LabelledLocations - No labels - nothing to resolve", v83, 2u);
      swift_slowDealloc();
    }

    return v88(v89, 0);
  }
}

uint64_t sub_100750F1C(uint64_t a1, uint64_t a2, void (*a3)(id), uint64_t a4)
{
  uint64_t v22 = a3;
  uint64_t v7 = type metadata accessor for FMNServerInteractionController.FMNResponseFields();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v11 = type metadata accessor for Logger();
  sub_100010324(v11, (uint64_t)qword_10170EC30);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  uint64_t v12 = Logger.logObject.getter();
  os_log_type_t v13 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v12, v13))
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc();
    v21[0] = a1;
    uint64_t v15 = v14;
    v21[1] = a2;
    *(_DWORD *)uint64_t v14 = 134217984;
    uint64_t v16 = FMNServerInteractionController.FMNResponseFields.statusCode.getter();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    uint64_t v23 = v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "FetchConfig - response code %ld", v15, 0xCu);
    swift_slowDealloc();
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  }

  uint64_t v17 = FMNServerInteractionController.FMNResponseFields.data.getter();
  unint64_t v19 = v18;
  sub_100751170(v17, v18, v22, a4);
  return sub_10001CFB8(v17, v19);
}

void sub_100751170(uint64_t a1, uint64_t a2, void (*a3)(id), uint64_t a4)
{
  uint64_t v8 = self;
  uint64_t v210 = a1;
  uint64_t v211 = a2;
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  *(void *)&long long v254 = 0;
  id v10 = [v8 JSONObjectWithData:isa options:0 error:&v254];

  if (v10)
  {
    id v11 = (id)v254;
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    uint64_t v12 = sub_10000588C((uint64_t *)&unk_101664240);
    if (swift_dynamicCast())
    {
      uint64_t v13 = v220;
      uint64_t v183 = *(void *)(v4 + 16);
      uint64_t v184 = v12;
      sub_10060BD20((uint64_t)&v220);
      uint64_t v202 = v220;
      char v203 = v221;
      v219[0] = *(_DWORD *)v222;
      *(_DWORD *)((char *)v219 + 3) = *(_DWORD *)&v222[3];
      uint64_t v15 = v223;
      uint64_t v14 = v224;
      uint64_t v204 = v225;
      uint64_t v17 = v226;
      uint64_t v16 = v227;
      v218[0] = *(_DWORD *)v229;
      *(_DWORD *)((char *)v218 + 3) = *(_DWORD *)&v229[3];
      uint64_t v18 = v231;
      char v205 = v228;
      char v206 = v232;
      *(_DWORD *)&v217[3] = *(_DWORD *)&v233[3];
      *(_DWORD *)uint64_t v217 = *(_DWORD *)v233;
      uint64_t v19 = v234;
      uint64_t v207 = v235;
      uint64_t v208 = v230;
      uint64_t v21 = v236;
      uint64_t v20 = v237;
      char v190 = v239;
      char v191 = v238;
      char v188 = v241;
      char v189 = v240;
      int v186 = v242;
      uint64_t v193 = v245;
      uint64_t v194 = v244;
      char v192 = v246;
      *(_DWORD *)&v216[3] = *(_DWORD *)&v247[3];
      *(_DWORD *)uint64_t v216 = *(_DWORD *)v247;
      uint64_t v197 = v250;
      uint64_t v198 = v248;
      uint64_t v200 = v251;
      uint64_t v201 = v249;
      uint64_t v195 = v243;
      uint64_t v196 = v252;
      uint64_t v199 = v253;
      uint64_t v187 = (uint64_t)a3;
      if (*(void *)(v13 + 16)
        && (uint64_t v22 = sub_100723FF4(0x6556747065636361, 0xED00006E6F697372), (v23 & 1) != 0)
        && (sub_10012F428(*(void *)(v13 + 56) + 32 * v22, (uint64_t)&v254), (swift_dynamicCast() & 1) != 0))
      {
        char v24 = 0;
        uint64_t v202 = v214;
        if (!*(void *)(v13 + 16)) {
          goto LABEL_26;
        }
      }
      else
      {
        if (qword_101637070 != -1) {
          swift_once();
        }
        uint64_t v41 = type metadata accessor for Logger();
        sub_100010324(v41, (uint64_t)qword_10170EC30);
        unint64_t v42 = Logger.logObject.getter();
        os_log_type_t v43 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v42, v43))
        {
          uint64_t v44 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v44 = 0;
          _os_log_impl((void *)&_mh_execute_header, v42, v43, "FetchConfig Unable to parse acceptVersion from config response", v44, 2u);
          swift_slowDealloc();
        }

        char v24 = 1;
        if (!*(void *)(v13 + 16)) {
          goto LABEL_26;
        }
      }
      uint64_t v45 = sub_100723FF4(0x4565727574616566, 0xEE0064656C62616ELL);
      if (v46)
      {
        sub_10012F428(*(void *)(v13 + 56) + 32 * v45, (uint64_t)&v254);
        if (swift_dynamicCast())
        {
          char v203 = v214;
          if (!*(void *)(v13 + 16)) {
            goto LABEL_46;
          }
LABEL_31:
          uint64_t v51 = sub_100723FF4(0xD00000000000001ELL, 0x80000001013EEBF0);
          if ((v52 & 1) == 0) {
            goto LABEL_46;
          }
          sub_10012F428(*(void *)(v13 + 56) + 32 * v51, (uint64_t)&v254);
          uint64_t v53 = swift_dynamicCast();
          if ((v53 & 1) == 0) {
            goto LABEL_46;
          }
          uint64_t v214 = 0;
          uint64_t v54 = __chkstk_darwin(v53);
          if ((v215 & 0x1000000000000000) != 0 || !(v215 & 0x2000000000000000 | v55 & 0x1000000000000000))
          {
            _StringGuts._slowWithCString<A>(_:)();
          }
          else
          {
            __chkstk_darwin(v54);
            if ((v215 & 0x2000000000000000) != 0)
            {
              *(void *)&long long v254 = v56;
              *((void *)&v254 + 1) = v215 & 0xFFFFFFFFFFFFFFLL;
              sub_101267870(&v254, &v213);
              swift_bridgeObjectRelease();
LABEL_44:
              if (v213)
              {
                uint64_t v15 = v214;
                goto LABEL_51;
              }
LABEL_46:
              if (qword_101637070 != -1) {
                swift_once();
              }
              uint64_t v59 = type metadata accessor for Logger();
              sub_100010324(v59, (uint64_t)qword_10170EC30);
              uint64_t v60 = Logger.logObject.getter();
              os_log_type_t v61 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v60, v61))
              {
                char v62 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)char v62 = 0;
                _os_log_impl((void *)&_mh_execute_header, v60, v61, "FetchConfig Unable to parse labelDistanceThreshold from server config response", v62, 2u);
                swift_slowDealloc();
              }

              char v24 = 1;
LABEL_51:
              if (*(void *)(v13 + 16)
                && (uint64_t v63 = sub_100723FF4(0xD00000000000001CLL, 0x80000001013EEC30), (v64 & 1) != 0)
                && (sub_10012F428(*(void *)(v13 + 56) + 32 * v63, (uint64_t)&v254), (swift_dynamicCast() & 1) != 0))
              {
                uint64_t v204 = v214;
                if (!*(void *)(v13 + 16)) {
                  goto LABEL_74;
                }
              }
              else
              {
                if (qword_101637070 != -1) {
                  swift_once();
                }
                uint64_t v65 = type metadata accessor for Logger();
                sub_100010324(v65, (uint64_t)qword_10170EC30);
                uint64_t v66 = Logger.logObject.getter();
                os_log_type_t v67 = static os_log_type_t.error.getter();
                if (os_log_type_enabled(v66, v67))
                {
                  os_log_type_t v68 = (uint8_t *)swift_slowAlloc();
                  *(_WORD *)os_log_type_t v68 = 0;
                  _os_log_impl((void *)&_mh_execute_header, v66, v67, "FetchConfig unable to parse maxAllowedSenderSessions from server config response", v68, 2u);
                  swift_slowDealloc();
                }

                char v24 = 1;
                if (!*(void *)(v13 + 16)) {
                  goto LABEL_74;
                }
              }
              uint64_t v69 = sub_100723FF4(0xD00000000000001ELL, 0x80000001013EEC10);
              if ((v70 & 1) == 0) {
                goto LABEL_74;
              }
              sub_10012F428(*(void *)(v13 + 56) + 32 * v69, (uint64_t)&v254);
              uint64_t v71 = swift_dynamicCast();
              if ((v71 & 1) == 0) {
                goto LABEL_74;
              }
              uint64_t v72 = v215;
              uint64_t v214 = 0;
              uint64_t v73 = __chkstk_darwin(v71);
              if ((v72 & 0x1000000000000000) != 0 || !(v72 & 0x2000000000000000 | v74 & 0x1000000000000000))
              {
                _StringGuts._slowWithCString<A>(_:)();
              }
              else
              {
                __chkstk_darwin(v73);
                if ((v72 & 0x2000000000000000) != 0)
                {
                  *(void *)&long long v254 = v75;
                  *((void *)&v254 + 1) = v72 & 0xFFFFFFFFFFFFFFLL;
                  sub_101267870(&v254, &v213);
                  swift_bridgeObjectRelease();
LABEL_72:
                  if (v213)
                  {
                    uint64_t v14 = v214;
                    goto LABEL_79;
                  }
LABEL_74:
                  if (qword_101637070 != -1) {
                    swift_once();
                  }
                  uint64_t v78 = type metadata accessor for Logger();
                  sub_100010324(v78, (uint64_t)qword_10170EC30);
                  uint64_t v79 = Logger.logObject.getter();
                  os_log_type_t v80 = static os_log_type_t.error.getter();
                  if (os_log_type_enabled(v79, v80))
                  {
                    unint64_t v81 = (uint8_t *)swift_slowAlloc();
                    *(_WORD *)unint64_t v81 = 0;
                    _os_log_impl((void *)&_mh_execute_header, v79, v80, "FetchConfig unable to parse locationCacheValidityThreshold from server config response", v81, 2u);
                    swift_slowDealloc();
                  }

                  char v24 = 1;
LABEL_79:
                  if (!*(void *)(v13 + 16)) {
                    goto LABEL_93;
                  }
                  uint64_t v82 = sub_100723FF4(0xD000000000000016, 0x80000001013EEC50);
                  if ((v83 & 1) == 0) {
                    goto LABEL_93;
                  }
                  sub_10012F428(*(void *)(v13 + 56) + 32 * v82, (uint64_t)&v254);
                  uint64_t v84 = swift_dynamicCast();
                  if ((v84 & 1) == 0) {
                    goto LABEL_93;
                  }
                  uint64_t v85 = v215;
                  uint64_t v214 = 0;
                  uint64_t v86 = __chkstk_darwin(v84);
                  if ((v85 & 0x1000000000000000) != 0 || !(v85 & 0x2000000000000000 | v87 & 0x1000000000000000))
                  {
                    _StringGuts._slowWithCString<A>(_:)();
                  }
                  else
                  {
                    __chkstk_darwin(v86);
                    if ((v85 & 0x2000000000000000) != 0)
                    {
                      *(void *)&long long v254 = v88;
                      *((void *)&v254 + 1) = v85 & 0xFFFFFFFFFFFFFFLL;
                      sub_101267870(&v254, &v213);
                      swift_bridgeObjectRelease();
LABEL_91:
                      if (v213)
                      {
                        uint64_t v17 = v214;
                        goto LABEL_98;
                      }
LABEL_93:
                      if (qword_101637070 != -1) {
                        swift_once();
                      }
                      uint64_t v91 = type metadata accessor for Logger();
                      sub_100010324(v91, (uint64_t)qword_10170EC30);
                      id v92 = Logger.logObject.getter();
                      os_log_type_t v93 = static os_log_type_t.error.getter();
                      if (os_log_type_enabled(v92, v93))
                      {
                        uint64_t v94 = (uint8_t *)swift_slowAlloc();
                        *(_WORD *)uint64_t v94 = 0;
                        _os_log_impl((void *)&_mh_execute_header, v92, v93, "FetchConfig unable to parse locationAgingThreshold from server config response", v94, 2u);
                        swift_slowDealloc();
                      }

                      char v24 = 1;
LABEL_98:
                      if (!*(void *)(v13 + 16)) {
                        goto LABEL_112;
                      }
                      uint64_t v95 = sub_100723FF4(0xD000000000000019, 0x80000001013EEC70);
                      if ((v96 & 1) == 0) {
                        goto LABEL_112;
                      }
                      sub_10012F428(*(void *)(v13 + 56) + 32 * v95, (uint64_t)&v254);
                      uint64_t v97 = swift_dynamicCast();
                      if ((v97 & 1) == 0) {
                        goto LABEL_112;
                      }
                      uint64_t v98 = v215;
                      uint64_t v214 = 0;
                      uint64_t v99 = __chkstk_darwin(v97);
                      if ((v98 & 0x1000000000000000) != 0
                        || !(v98 & 0x2000000000000000 | v100 & 0x1000000000000000))
                      {
                        _StringGuts._slowWithCString<A>(_:)();
                      }
                      else
                      {
                        __chkstk_darwin(v99);
                        if ((v98 & 0x2000000000000000) != 0)
                        {
                          *(void *)&long long v254 = v101;
                          *((void *)&v254 + 1) = v98 & 0xFFFFFFFFFFFFFFLL;
                          sub_101267870(&v254, &v213);
                          swift_bridgeObjectRelease();
LABEL_110:
                          if (v213)
                          {
                            uint64_t v16 = v214;
                            goto LABEL_117;
                          }
LABEL_112:
                          if (qword_101637070 != -1) {
                            swift_once();
                          }
                          uint64_t v104 = type metadata accessor for Logger();
                          sub_100010324(v104, (uint64_t)qword_10170EC30);
                          unint64_t v105 = Logger.logObject.getter();
                          os_log_type_t v106 = static os_log_type_t.error.getter();
                          if (os_log_type_enabled(v105, v106))
                          {
                            id v107 = (uint8_t *)swift_slowAlloc();
                            *(_WORD *)id v107 = 0;
                            _os_log_impl((void *)&_mh_execute_header, v105, v106, "FetchConfig unable to parse subscriptionThrottleInSec from server config response ", v107, 2u);
                            swift_slowDealloc();
                          }

LABEL_117:
                          if (*(void *)(v13 + 16)
                            && (uint64_t v108 = sub_100723FF4(0xD00000000000001ELL, 0x80000001013EEC90), (v109 & 1) != 0)
                            && (sub_10012F428(*(void *)(v13 + 56) + 32 * v108, (uint64_t)&v254),
                                (swift_dynamicCast() & 1) != 0))
                          {
                            char v205 = v214;
                          }
                          else
                          {
                            if (qword_101637070 != -1) {
                              swift_once();
                            }
                            uint64_t v110 = type metadata accessor for Logger();
                            sub_100010324(v110, (uint64_t)qword_10170EC30);
                            uint64_t v111 = Logger.logObject.getter();
                            os_log_type_t v112 = static os_log_type_t.error.getter();
                            if (os_log_type_enabled(v111, v112))
                            {
                              uint64_t v113 = (uint8_t *)swift_slowAlloc();
                              *(_WORD *)uint64_t v113 = 0;
                              _os_log_impl((void *)&_mh_execute_header, v111, v112, "FetchConfig unable to parse overridePendingKeyRequestCheck from server config response", v113, 2u);
                              swift_slowDealloc();
                            }

                            char v24 = 1;
                          }
                          sub_1000F76EC(0xD00000000000001DLL, 0x80000001013EECB0, v13, &v254);
                          if (v256)
                          {
                            sub_10000588C(&qword_101654A30);
                            if (swift_dynamicCast())
                            {
                              uint64_t v114 = sub_101158614(v214);
                              swift_bridgeObjectRelease();
                              swift_bridgeObjectRelease();
                              uint64_t v208 = v114;
                              goto LABEL_135;
                            }
                          }
                          else
                          {
                            sub_10001DAB4((uint64_t)&v254, (uint64_t *)&unk_101644360);
                          }
                          if (qword_101637070 != -1) {
                            swift_once();
                          }
                          uint64_t v115 = type metadata accessor for Logger();
                          sub_100010324(v115, (uint64_t)qword_10170EC30);
                          uint64_t v116 = Logger.logObject.getter();
                          os_log_type_t v117 = static os_log_type_t.error.getter();
                          if (os_log_type_enabled(v116, v117))
                          {
                            uint64_t v118 = (uint8_t *)swift_slowAlloc();
                            *(_WORD *)uint64_t v118 = 0;
                            _os_log_impl((void *)&_mh_execute_header, v116, v117, "FetchConfig unable to parse ownerProactiveSupportedModels from server config response", v118, 2u);
                            swift_slowDealloc();
                          }

                          char v24 = 1;
LABEL_135:
                          sub_1000F76EC(0xD000000000000017, 0x80000001013EECD0, v13, &v254);
                          if (v256)
                          {
                            uint64_t v119 = swift_dynamicCast();
                            if (v119)
                            {
                              uint64_t v120 = v215;
                              uint64_t v214 = 0;
                              uint64_t v121 = __chkstk_darwin(v119);
                              if ((v120 & 0x1000000000000000) != 0
                                || !(v120 & 0x2000000000000000 | v122 & 0x1000000000000000))
                              {
                                _StringGuts._slowWithCString<A>(_:)();
                                swift_bridgeObjectRelease();
                              }
                              else
                              {
                                __chkstk_darwin(v121);
                                if ((v120 & 0x2000000000000000) != 0)
                                {
                                  *(void *)&long long v254 = v123;
                                  *((void *)&v254 + 1) = v120 & 0xFFFFFFFFFFFFFFLL;
                                  sub_101267870(&v254, &v213);
                                  swift_bridgeObjectRelease();
                                }
                                else
                                {
                                  if ((v123 & 0x1000000000000000) != 0)
                                  {
                                    uint64_t v124 = (v120 & 0xFFFFFFFFFFFFFFFLL) + 32;
                                    uint64_t v125 = v123 & 0xFFFFFFFFFFFFLL;
                                  }
                                  else
                                  {
                                    uint64_t v124 = _StringObject.sharedUTF8.getter();
                                  }
                                  BOOL v213 = sub_101267810(v124, v125, (void (*)(uint64_t *__return_ptr))sub_1007666BC) & 1;
                                  swift_bridgeObjectRelease();
                                }
                              }
                              if (v213)
                              {
                                uint64_t v18 = v214;
                                goto LABEL_152;
                              }
                            }
                          }
                          else
                          {
                            sub_10001DAB4((uint64_t)&v254, (uint64_t *)&unk_101644360);
                          }
                          if (qword_101637070 != -1) {
                            swift_once();
                          }
                          uint64_t v126 = type metadata accessor for Logger();
                          sub_100010324(v126, (uint64_t)qword_10170EC30);
                          long long v127 = Logger.logObject.getter();
                          os_log_type_t v128 = static os_log_type_t.error.getter();
                          if (os_log_type_enabled(v127, v128))
                          {
                            long long v129 = (uint8_t *)swift_slowAlloc();
                            *(_WORD *)long long v129 = 0;
                            _os_log_impl((void *)&_mh_execute_header, v127, v128, "FetchConfig unable to parse keyDistributionThrottle from server config response", v129, 2u);
                            swift_slowDealloc();
                          }

                          char v24 = 1;
LABEL_152:
                          sub_1000F76EC(0xD00000000000001DLL, 0x80000001013EECF0, v13, &v254);
                          if (v256)
                          {
                            if (swift_dynamicCast())
                            {
                              char v206 = v214;
                              goto LABEL_161;
                            }
                          }
                          else
                          {
                            sub_10001DAB4((uint64_t)&v254, (uint64_t *)&unk_101644360);
                          }
                          if (qword_101637070 != -1) {
                            swift_once();
                          }
                          uint64_t v130 = type metadata accessor for Logger();
                          sub_100010324(v130, (uint64_t)qword_10170EC30);
                          long long v131 = Logger.logObject.getter();
                          os_log_type_t v132 = static os_log_type_t.error.getter();
                          if (os_log_type_enabled(v131, v132))
                          {
                            long long v133 = (uint8_t *)swift_slowAlloc();
                            *(_WORD *)long long v133 = 0;
                            _os_log_impl((void *)&_mh_execute_header, v131, v132, "FetchConfig unable to parse offlineLocationsUploadEnabled from server config response", v133, 2u);
                            swift_slowDealloc();
                          }

                          char v24 = 1;
LABEL_161:
                          sub_1000F76EC(0xD000000000000020, 0x80000001013EED10, v13, &v254);
                          if (v256)
                          {
                            if (swift_dynamicCast())
                            {
                              uint64_t v19 = v214;
                              goto LABEL_170;
                            }
                          }
                          else
                          {
                            sub_10001DAB4((uint64_t)&v254, (uint64_t *)&unk_101644360);
                          }
                          if (qword_101637070 != -1) {
                            swift_once();
                          }
                          uint64_t v134 = type metadata accessor for Logger();
                          sub_100010324(v134, (uint64_t)qword_10170EC30);
                          long long v135 = Logger.logObject.getter();
                          os_log_type_t v136 = static os_log_type_t.error.getter();
                          if (os_log_type_enabled(v135, v136))
                          {
                            long long v137 = (uint8_t *)swift_slowAlloc();
                            *(_WORD *)long long v137 = 0;
                            _os_log_impl((void *)&_mh_execute_header, v135, v136, "FetchConfig unable to parse offlineProactiveAlertIntervalSec from server config response", v137, 2u);
                            swift_slowDealloc();
                          }

                          char v24 = 1;
LABEL_170:
                          sub_1000F76EC(0xD000000000000025, 0x80000001013EED40, v13, &v254);
                          if (v256)
                          {
                            if (swift_dynamicCast())
                            {
                              uint64_t v207 = v214;
                              goto LABEL_179;
                            }
                          }
                          else
                          {
                            sub_10001DAB4((uint64_t)&v254, (uint64_t *)&unk_101644360);
                          }
                          if (qword_101637070 != -1) {
                            swift_once();
                          }
                          uint64_t v138 = type metadata accessor for Logger();
                          sub_100010324(v138, (uint64_t)qword_10170EC30);
                          long long v139 = Logger.logObject.getter();
                          os_log_type_t v140 = static os_log_type_t.error.getter();
                          if (os_log_type_enabled(v139, v140))
                          {
                            long long v141 = (uint8_t *)swift_slowAlloc();
                            *(_WORD *)long long v141 = 0;
                            _os_log_impl((void *)&_mh_execute_header, v139, v140, "FetchConfig unable to parse offlineProactiveAlertNoOfTimesDisplay from server config response", v141, 2u);
                            swift_slowDealloc();
                          }

                          char v24 = 1;
LABEL_179:
                          sub_1000F76EC(0xD00000000000001FLL, 0x80000001013EED70, v13, &v254);
                          if (v256)
                          {
                            if (swift_dynamicCast())
                            {
                              uint64_t v21 = v214;
                              goto LABEL_188;
                            }
                          }
                          else
                          {
                            sub_10001DAB4((uint64_t)&v254, (uint64_t *)&unk_101644360);
                          }
                          if (qword_101637070 != -1) {
                            swift_once();
                          }
                          uint64_t v142 = type metadata accessor for Logger();
                          sub_100010324(v142, (uint64_t)qword_10170EC30);
                          long long v143 = Logger.logObject.getter();
                          os_log_type_t v144 = static os_log_type_t.error.getter();
                          if (os_log_type_enabled(v143, v144))
                          {
                            long long v145 = (uint8_t *)swift_slowAlloc();
                            *(_WORD *)long long v145 = 0;
                            _os_log_impl((void *)&_mh_execute_header, v143, v144, "FetchConfig unable to parse offlineLocationsPublishThrottle from server config response", v145, 2u);
                            swift_slowDealloc();
                          }

                          char v24 = 1;
LABEL_188:
                          sub_1000F76EC(0xD00000000000002ELL, 0x80000001013EED90, v13, &v254);
                          if (v256)
                          {
                            if (swift_dynamicCast())
                            {
                              uint64_t v20 = v214;
                              goto LABEL_197;
                            }
                          }
                          else
                          {
                            sub_10001DAB4((uint64_t)&v254, (uint64_t *)&unk_101644360);
                          }
                          if (qword_101637070 != -1) {
                            swift_once();
                          }
                          uint64_t v146 = type metadata accessor for Logger();
                          sub_100010324(v146, (uint64_t)qword_10170EC30);
                          long long v147 = Logger.logObject.getter();
                          os_log_type_t v148 = static os_log_type_t.error.getter();
                          if (os_log_type_enabled(v147, v148))
                          {
                            unint64_t v149 = (uint8_t *)swift_slowAlloc();
                            *(_WORD *)unint64_t v149 = 0;
                            _os_log_impl((void *)&_mh_execute_header, v147, v148, "FetchConfig unable to parse offlineProactiveAlertDistanceThresholdInMeters from server config response", v149, 2u);
                            swift_slowDealloc();
                          }

                          char v24 = 1;
LABEL_197:
                          uint64_t My = type metadata accessor for Feature.FindMy();
                          uint64_t v256 = My;
                          uint64_t v257 = sub_100766750((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
                          unint64_t v151 = sub_10001D958((uint64_t *)&v254);
                          (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v151, enum case for Feature.FindMy.networkScalingImprovements(_:), My);
                          LOBYTE(My) = isFeatureEnabled(_:)();
                          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v254);
                          if ((My & 1) == 0)
                          {
                            swift_bridgeObjectRelease();
                            if ((v24 & 1) == 0)
                            {
LABEL_225:
                              if (qword_101637070 != -1) {
                                swift_once();
                              }
                              uint64_t v179 = type metadata accessor for Logger();
                              sub_100010324(v179, (uint64_t)qword_10170EC30);
                              v180 = Logger.logObject.getter();
                              os_log_type_t v181 = static os_log_type_t.default.getter();
                              if (os_log_type_enabled(v180, v181))
                              {
                                v182 = (uint8_t *)swift_slowAlloc();
                                *(_WORD *)v182 = 0;
                                _os_log_impl((void *)&_mh_execute_header, v180, v181, "FetchConfig successfully updated config values from server. Now saving config", v182, 2u);
                                swift_slowDealloc();
                              }

                              *(void *)&long long v254 = v202;
                              BYTE8(v254) = v203;
                              *(_DWORD *)((char *)&v254 + 9) = v219[0];
                              HIDWORD(v254) = *(_DWORD *)((char *)v219 + 3);
                              uint64_t v255 = v15;
                              uint64_t v256 = v14;
                              uint64_t v257 = v204;
                              uint64_t v258 = v17;
                              uint64_t v259 = v16;
                              LOBYTE(v260) = v205;
                              *(_DWORD *)((char *)&v260 + 1) = v218[0];
                              HIDWORD(v260) = *(_DWORD *)((char *)v218 + 3);
                              uint64_t v261 = v208;
                              uint64_t v262 = v18;
                              LOBYTE(v263) = v206;
                              HIDWORD(v263) = *(_DWORD *)&v217[3];
                              *(_DWORD *)((char *)&v263 + 1) = *(_DWORD *)v217;
                              uint64_t v264 = v19;
                              uint64_t v265 = v207;
                              uint64_t v266 = v21;
                              uint64_t v267 = v20;
                              char v268 = v191;
                              char v269 = v190;
                              char v270 = v189;
                              char v271 = v188;
                              int v272 = v186;
                              uint64_t v273 = v195;
                              uint64_t v274 = v194;
                              uint64_t v275 = v193;
                              char v276 = v192;
                              *(_DWORD *)&v277[3] = *(_DWORD *)&v216[3];
                              *(_DWORD *)v277 = *(_DWORD *)v216;
                              uint64_t v278 = v198;
                              uint64_t v279 = v201;
                              uint64_t v280 = v197;
                              uint64_t v281 = v200;
                              uint64_t v282 = v196;
                              uint64_t v283 = v199;
                              sub_1006F40C4((uint64_t)&v254);
                              sub_100D34B1C(&v254, (uint64_t)sub_10060C1E8, 0);
                              sub_100766300(&v254, v210, v211, v187, a4);
                              sub_100551984((uint64_t)&v254);
LABEL_230:
                              sub_100551984((uint64_t)&v254);
                              return;
                            }
                            goto LABEL_203;
                          }
                          sub_1000F76EC(0xD000000000000012, 0x80000001013EEDC0, v13, &v254);
                          swift_bridgeObjectRelease();
                          if (v256)
                          {
                            if (swift_dynamicCast())
                            {
                              Class v152 = Dictionary._bridgeToObjectiveC()().super.isa;
                              swift_bridgeObjectRelease();
                              *(void *)&long long v254 = 0;
                              id v153 = [v8 dataWithJSONObject:v152 options:0 error:&v254];

                              id v154 = (id)v254;
                              if (v153)
                              {
                                uint64_t v155 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
                                unint64_t v157 = v156;

                                type metadata accessor for JSONDecoder();
                                swift_allocObject();
                                JSONDecoder.init()();
                                sub_1006F4070();
                                dispatch thunk of JSONDecoder.decode<A>(_:from:)();
                                char v190 = BYTE1(v254);
                                char v191 = v254;
                                char v188 = BYTE3(v254);
                                char v189 = BYTE2(v254);
                                uint64_t v193 = v256;
                                uint64_t v194 = v255;
                                char v192 = v257;
                                uint64_t v174 = v259;
                                uint64_t v197 = v260;
                                uint64_t v198 = v258;
                                uint64_t v209 = v261;
                                uint64_t v195 = *((void *)&v254 + 1);
                                uint64_t v196 = v262;
                                uint64_t v185 = v263;
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                swift_bridgeObjectRelease();
                                if (qword_101637660 != -1) {
                                  swift_once();
                                }
                                uint64_t v175 = type metadata accessor for Logger();
                                sub_100010324(v175, (uint64_t)qword_10170F838);
                                id v176 = Logger.logObject.getter();
                                os_log_type_t v177 = static os_log_type_t.default.getter();
                                if (os_log_type_enabled(v176, v177))
                                {
                                  id v178 = (uint8_t *)swift_slowAlloc();
                                  *(_WORD *)id v178 = 0;
                                  _os_log_impl((void *)&_mh_execute_header, v176, v177, "FetchConfig successfully parse the ownedDeviceConfig", v178, 2u);
                                  swift_slowDealloc();
                                }
                                swift_release();
                                sub_10001CFB8(v155, v157);

                                uint64_t v200 = v209;
                                uint64_t v201 = v174;
                                uint64_t v199 = v185;
                                if ((v24 & 1) == 0) {
                                  goto LABEL_225;
                                }
LABEL_203:
                                uint64_t v158 = (void (*)(id))v187;
LABEL_215:
                                if (qword_101637070 != -1) {
                                  swift_once();
                                }
                                uint64_t v167 = type metadata accessor for Logger();
                                sub_100010324(v167, (uint64_t)qword_10170EC30);
                                id v168 = Logger.logObject.getter();
                                os_log_type_t v169 = static os_log_type_t.default.getter();
                                if (os_log_type_enabled(v168, v169))
                                {
                                  Class v170 = (uint8_t *)swift_slowAlloc();
                                  *(_WORD *)Class v170 = 0;
                                  _os_log_impl((void *)&_mh_execute_header, v168, v169, "FetchConfig update failed - not saving configs", v170, 2u);
                                  swift_slowDealloc();
                                }

                                static String._unconditionallyBridgeFromObjectiveC(_:)();
                                id v171 = objc_allocWithZone((Class)NSError);
                                NSString v172 = String._bridgeToObjectiveC()();
                                swift_bridgeObjectRelease();
                                id v173 = [v171 initWithDomain:v172 code:5 userInfo:0];

                                v158(v173);
                                *(void *)&long long v254 = v202;
                                BYTE8(v254) = v203;
                                *(_DWORD *)((char *)&v254 + 9) = v219[0];
                                HIDWORD(v254) = *(_DWORD *)((char *)v219 + 3);
                                uint64_t v255 = v15;
                                uint64_t v256 = v14;
                                uint64_t v257 = v204;
                                uint64_t v258 = v17;
                                uint64_t v259 = v16;
                                LOBYTE(v260) = v205;
                                *(_DWORD *)((char *)&v260 + 1) = v218[0];
                                HIDWORD(v260) = *(_DWORD *)((char *)v218 + 3);
                                uint64_t v261 = v208;
                                uint64_t v262 = v18;
                                LOBYTE(v263) = v206;
                                HIDWORD(v263) = *(_DWORD *)&v217[3];
                                *(_DWORD *)((char *)&v263 + 1) = *(_DWORD *)v217;
                                uint64_t v264 = v19;
                                uint64_t v265 = v207;
                                uint64_t v266 = v21;
                                uint64_t v267 = v20;
                                char v268 = v191;
                                char v269 = v190;
                                char v270 = v189;
                                char v271 = v188;
                                int v272 = v186;
                                uint64_t v273 = v195;
                                uint64_t v274 = v194;
                                uint64_t v275 = v193;
                                char v276 = v192;
                                *(_DWORD *)&v277[3] = *(_DWORD *)&v216[3];
                                *(_DWORD *)v277 = *(_DWORD *)v216;
                                uint64_t v278 = v198;
                                uint64_t v279 = v201;
                                uint64_t v280 = v197;
                                uint64_t v281 = v200;
                                uint64_t v282 = v196;
                                uint64_t v283 = v199;
                                goto LABEL_230;
                              }
                              os_log_type_t v163 = v154;
                              _convertNSErrorToError(_:)();

                              swift_willThrow();
                              uint64_t v158 = (void (*)(id))v187;
                              if (qword_101637660 != -1) {
                                swift_once();
                              }
                              uint64_t v164 = type metadata accessor for Logger();
                              sub_100010324(v164, (uint64_t)qword_10170F838);
                              long long v160 = Logger.logObject.getter();
                              os_log_type_t v165 = static os_log_type_t.error.getter();
                              if (os_log_type_enabled(v160, v165))
                              {
                                uint64_t v166 = (uint8_t *)swift_slowAlloc();
                                *(_WORD *)uint64_t v166 = 0;
                                _os_log_impl((void *)&_mh_execute_header, v160, v165, "FetchConfig unable to parse ownedDeviceConfig from server config response.", v166, 2u);
                                swift_slowDealloc();
                              }
                              swift_errorRelease();
LABEL_214:

                              goto LABEL_215;
                            }
                          }
                          else
                          {
                            sub_10001DAB4((uint64_t)&v254, (uint64_t *)&unk_101644360);
                          }
                          uint64_t v158 = (void (*)(id))v187;
                          if (qword_101637660 != -1) {
                            swift_once();
                          }
                          uint64_t v159 = type metadata accessor for Logger();
                          sub_100010324(v159, (uint64_t)qword_10170F838);
                          long long v160 = Logger.logObject.getter();
                          os_log_type_t v161 = static os_log_type_t.error.getter();
                          if (os_log_type_enabled(v160, v161))
                          {
                            v162 = (uint8_t *)swift_slowAlloc();
                            *(_WORD *)v162 = 0;
                            _os_log_impl((void *)&_mh_execute_header, v160, v161, "FetchConfig unable to parse ownedDeviceConfig from server config response.", v162, 2u);
                            swift_slowDealloc();
                          }
                          goto LABEL_214;
                        }
                        if ((v101 & 0x1000000000000000) != 0)
                        {
                          uint64_t v102 = (v98 & 0xFFFFFFFFFFFFFFFLL) + 32;
                          uint64_t v103 = v101 & 0xFFFFFFFFFFFFLL;
                        }
                        else
                        {
                          uint64_t v102 = _StringObject.sharedUTF8.getter();
                        }
                        BOOL v213 = sub_101267810(v102, v103, (void (*)(uint64_t *__return_ptr))sub_100769234) & 1;
                      }
                      swift_bridgeObjectRelease();
                      goto LABEL_110;
                    }
                    if ((v88 & 0x1000000000000000) != 0)
                    {
                      uint64_t v89 = (v85 & 0xFFFFFFFFFFFFFFFLL) + 32;
                      uint64_t v90 = v88 & 0xFFFFFFFFFFFFLL;
                    }
                    else
                    {
                      uint64_t v89 = _StringObject.sharedUTF8.getter();
                    }
                    BOOL v213 = sub_101267810(v89, v90, (void (*)(uint64_t *__return_ptr))sub_100769234) & 1;
                  }
                  swift_bridgeObjectRelease();
                  goto LABEL_91;
                }
                if ((v75 & 0x1000000000000000) != 0)
                {
                  uint64_t v76 = (v72 & 0xFFFFFFFFFFFFFFFLL) + 32;
                  uint64_t v77 = v75 & 0xFFFFFFFFFFFFLL;
                }
                else
                {
                  uint64_t v76 = _StringObject.sharedUTF8.getter();
                }
                BOOL v213 = sub_101267810(v76, v77, (void (*)(uint64_t *__return_ptr))sub_100769234) & 1;
              }
              swift_bridgeObjectRelease();
              goto LABEL_72;
            }
            if ((v56 & 0x1000000000000000) != 0)
            {
              uint64_t v57 = (v215 & 0xFFFFFFFFFFFFFFFLL) + 32;
              uint64_t v58 = v56 & 0xFFFFFFFFFFFFLL;
            }
            else
            {
              uint64_t v57 = _StringObject.sharedUTF8.getter();
            }
            BOOL v213 = sub_101267810(v57, v58, (void (*)(uint64_t *__return_ptr))sub_100769234) & 1;
          }
          swift_bridgeObjectRelease();
          goto LABEL_44;
        }
      }
LABEL_26:
      if (qword_101637070 != -1) {
        swift_once();
      }
      uint64_t v47 = type metadata accessor for Logger();
      sub_100010324(v47, (uint64_t)qword_10170EC30);
      unint64_t v48 = Logger.logObject.getter();
      os_log_type_t v49 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v48, v49))
      {
        unint64_t v50 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v50 = 0;
        _os_log_impl((void *)&_mh_execute_header, v48, v49, "FetchConfig Unable to parse featureEnabled flag from server config response", v50, 2u);
        swift_slowDealloc();
      }

      char v24 = 1;
      if (!*(void *)(v13 + 16)) {
        goto LABEL_46;
      }
      goto LABEL_31;
    }
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    sub_100010324(v33, (uint64_t)qword_10170EC30);
    double v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v34, v35))
    {
      unint64_t v36 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "FetchConfig - unable to parse config data", v36, 2u);
      swift_slowDealloc();
    }

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v37 = objc_allocWithZone((Class)NSError);
    NSString v38 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v39 = [v37 initWithDomain:v38 code:5 userInfo:0];

    id v40 = v39;
    a3(v39);
  }
  else
  {
    id v25 = (id)v254;
    uint64_t v26 = _convertNSErrorToError(_:)();

    swift_willThrow();
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v27 = type metadata accessor for Logger();
    sub_100010324(v27, (uint64_t)qword_10170EC30);
    swift_errorRetain();
    swift_errorRetain();
    long long v28 = Logger.logObject.getter();
    os_log_type_t v29 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc();
      *(void *)&long long v254 = swift_slowAlloc();
      *(_DWORD *)uint64_t v30 = 136315138;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v31 = String.init<A>(describing:)();
      uint64_t v220 = sub_1008FA0F0(v31, v32, (uint64_t *)&v254);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "FetchConfig - error decoding config information %s", v30, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_errorRetain();
    a3((id)v26);
    swift_errorRelease();
    swift_errorRelease();
  }
}

uint64_t sub_100753810(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, const char *a4)
{
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_100010324(v7, (uint64_t)qword_10170EC30);
  swift_errorRetain();
  swift_errorRetain();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v8, v9))
  {
    id v10 = (uint8_t *)swift_slowAlloc();
    uint64_t v14 = swift_slowAlloc();
    *(_DWORD *)id v10 = 136315138;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v11 = String.init<A>(describing:)();
    sub_1008FA0F0(v11, v12, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    swift_errorRelease();
    swift_errorRelease();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, a4, v10, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_errorRelease();
    swift_errorRelease();
  }

  return a2(a1);
}

void sub_1007539FC(uint64_t a1)
{
  if (a1)
  {
    swift_errorRetain();
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_100010324(v1, (uint64_t)qword_10170EC30);
    swift_errorRetain();
    swift_errorRetain();
    oslog = Logger.logObject.getter();
    os_log_type_t v2 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(oslog, v2))
    {
      uint64_t v3 = swift_slowAlloc();
      uint64_t v7 = swift_slowAlloc();
      *(_DWORD *)uint64_t v3 = 134218242;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v3 + 12) = 2080;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v4 = String.init<A>(describing:)();
      sub_1008FA0F0(v4, v5, &v7);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, oslog, v2, "FetchConfig - error fetching configs after checking response version %ld  %s", (uint8_t *)v3, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
}

uint64_t sub_100753C2C(uint64_t a1, uint64_t (*a2)(void))
{
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_100010324(v3, (uint64_t)qword_10170EC30);
  uint64_t v4 = Logger.logObject.getter();
  os_log_type_t v5 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "FetchConfig updated fmd with new config", v6, 2u);
    swift_slowDealloc();
  }

  return a2(0);
}

uint64_t sub_100753D24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v22 = a6;
  uint64_t v13 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v26 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for DispatchQoS();
  uint64_t v23 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = *(void *)(a2 + 144);
  uint64_t v18 = (void *)swift_allocObject();
  v18[2] = a2;
  v18[3] = a3;
  v18[4] = a4;
  v18[5] = a5;
  v18[6] = v22;
  v18[7] = a7;
  v18[8] = a1;
  aBlock[4] = sub_100767FD8;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  _OWORD aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015D3438;
  uint64_t v19 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain();
  id v20 = a5;
  swift_retain();
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t aBlock[7] = _swiftEmptyArrayStorage;
  sub_100766750((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v19);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v15, v13);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v17, v25);
  return swift_release();
}

uint64_t sub_100754038(uint64_t a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (qword_101637440 != -1) {
    swift_once();
  }
  swift_retain();
  sub_1010DDA08();
  swift_release();
  uint64_t v14 = (void *)swift_allocObject();
  v14[2] = a1;
  v14[3] = a2;
  v14[4] = a3;
  v14[5] = a4;
  v14[6] = a5;
  v14[7] = a6;
  unsigned char v14[8] = a7;
  swift_retain();
  swift_bridgeObjectRetain();
  id v15 = a4;
  swift_retain();
  swift_retain();
  sub_100B9CBAC(a2, a3, v15, (uint64_t)sub_100768048, (uint64_t)v14);

  return swift_release();
}

uint64_t sub_10075416C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = (void *)swift_allocObject();
  void v16[2] = a3;
  v16[3] = a4;
  v16[4] = a1;
  v16[5] = a2;
  v16[6] = a5;
  v16[7] = a6;
  v16[8] = a7;
  v16[9] = a8;
  swift_bridgeObjectRetain();
  swift_errorRetain();
  swift_retain();
  id v17 = a5;
  swift_retain();
  swift_retain();
  sub_1006066B8(a3, a4, (uint64_t)sub_1007680BC, (uint64_t)v16);

  return swift_release();
}

void sub_100754258(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, unint64_t a6, void (*a7)(id, uint64_t), uint64_t a8, void *a9)
{
  uint64_t v53 = a7;
  uint64_t v54 = a8;
  unint64_t v50 = a5;
  unint64_t v51 = a6;
  uint64_t v13 = a9;
  unint64_t v14 = *a9;
  uint64_t v15 = sub_10000588C(&qword_101669310);
  __chkstk_darwin(v15 - 8);
  id v17 = (char *)&v48 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for SecureLocation();
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v48 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_100766800(a1, (uint64_t)v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
  {
    sub_10001DAB4((uint64_t)v17, &qword_101669310);
  }
  else
  {
    sub_100767F00((uint64_t)v17, (uint64_t)v21, (uint64_t (*)(void))type metadata accessor for SecureLocation);
    if (qword_101637080 != -1) {
      swift_once();
    }
    swift_retain();
    char v22 = sub_100D0C2A4((uint64_t)v21);
    swift_release();
    if (v22)
    {
      uint64_t v52 = a2;
      sub_10000588C(&qword_10166BD20);
      uint64_t v23 = swift_allocObject();
      *(_OWORD *)(v23 + 16) = xmmword_101347EF0;
      *(void *)(v23 + 32) = sub_100E8F348();
      uint64_t v56 = v23;
      specialized Array._endMutation()();
      if (qword_101636B00 != -1) {
        swift_once();
      }
      uint64_t v24 = type metadata accessor for Logger();
      sub_100010324(v24, (uint64_t)qword_10170DE98);
      swift_bridgeObjectRetain_n();
      uint64_t v25 = Logger.logObject.getter();
      unint64_t v26 = a3;
      os_log_type_t v27 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v25, v27))
      {
        uint64_t v28 = swift_slowAlloc();
        os_log_type_t v49 = a9;
        os_log_type_t v29 = (uint8_t *)v28;
        uint64_t v30 = swift_slowAlloc();
        unint64_t v48 = v14;
        uint64_t v56 = v30;
        *(_DWORD *)os_log_type_t v29 = 136315138;
        swift_bridgeObjectRetain();
        uint64_t v55 = sub_1008FA0F0(v52, v26, &v56);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl((void *)&_mh_execute_header, v25, v27, "SubscribeAndFetch - livelocations returning cached location for %s in completion", v29, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v13 = v49;
        swift_slowDealloc();
      }
      else
      {
        swift_bridgeObjectRelease_n();
      }

      sub_100768C9C((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for SecureLocation);
      a3 = v26;
      a2 = v52;
    }
    else
    {
      sub_100768C9C((uint64_t)v21, (uint64_t (*)(void))type metadata accessor for SecureLocation);
    }
  }
  id v31 = objc_allocWithZone((Class)SPSecureLocationsSubscriptionResult);
  sub_10001D4B0(0, (unint64_t *)&qword_10163F378);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v33 = [v31 initWithExpiryTime:isa locations:120.0];

  if (a4)
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v34 = type metadata accessor for Logger();
    sub_100010324(v34, (uint64_t)qword_10170EC30);
    swift_errorRetain();
    swift_errorRetain();
    os_log_type_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v35, v36))
    {
      os_log_type_t v49 = v13;
      id v37 = (uint8_t *)swift_slowAlloc();
      uint64_t v38 = swift_slowAlloc();
      uint64_t v52 = a2;
      unint64_t v48 = a3;
      uint64_t v55 = a4;
      uint64_t v56 = v38;
      *(_DWORD *)id v37 = 136315138;
      swift_errorRetain();
      sub_10000588C((uint64_t *)&unk_101638EB0);
      uint64_t v39 = String.init<A>(describing:)();
      uint64_t v55 = sub_1008FA0F0(v39, v40, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "analytics: Error occurred during startLive %s", v37, 0xCu);
      swift_arrayDestroy();
      a3 = v48;
      a2 = v52;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    __chkstk_darwin(v46);
    *(&v48 - 4) = v50;
    *(&v48 - 3) = a2;
    unint64_t v47 = v51;
    *(&v48 - 2) = a3;
    *(&v48 - 1) = v47;
    static Transaction.named<A>(_:with:)();
  }
  else
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v41 = type metadata accessor for Logger();
    sub_100010324(v41, (uint64_t)qword_10170EC30);
    swift_bridgeObjectRetain_n();
    unint64_t v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v44 = swift_slowAlloc();
      uint64_t v45 = swift_slowAlloc();
      uint64_t v52 = a2;
      *(_DWORD *)uint64_t v44 = 141558275;
      uint64_t v55 = 1752392040;
      uint64_t v56 = v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v44 + 12) = 2081;
      swift_bridgeObjectRetain();
      uint64_t v55 = sub_1008FA0F0(v52, a3, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "analytics: startlive success for %{private,mask.hash}s", (uint8_t *)v44, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  v53(v33, a4);
  Transaction.capture()();
}

uint64_t sub_100754AA4()
{
  return static Transaction.named<A>(_:with:)();
}

uint64_t sub_100754B3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  os_log_type_t v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for DispatchQoS();
  uint64_t v10 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  unint64_t v12 = (char *)v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[1] = *(void *)(a2 + 144);
  uint64_t v13 = swift_allocObject();
  long long v14 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(v13 + 24) = *(_OWORD *)a3;
  *(void *)(v13 + 16) = a2;
  *(_OWORD *)(v13 + 40) = v14;
  *(_OWORD *)(v13 + 56) = *(_OWORD *)(a3 + 32);
  *(void *)(v13 + 72) = *(void *)(a3 + 48);
  *(void *)(v13 + 80) = a1;
  aBlock[4] = sub_100768B58;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  _OWORD aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015D3B18;
  uint64_t v15 = _Block_copy(aBlock);
  swift_retain();
  sub_100552904(a3);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t aBlock[7] = _swiftEmptyArrayStorage;
  sub_100766750((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v18);
  return swift_release();
}

void sub_100754E38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_101636B00 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100010324(v6, (uint64_t)qword_10170DE98);
  uint64_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v7, v8))
  {
    os_log_type_t v9 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)os_log_type_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Received live location in sink", v9, 2u);
    swift_slowDealloc();
  }

  sub_10000588C(&qword_1016483A0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101342130;
  long long v12 = *(_OWORD *)(a2 + 16);
  long long v11 = *(_OWORD *)(a2 + 32);
  long long v13 = *(_OWORD *)a2;
  *(void *)(inited + 80) = *(void *)(a2 + 48);
  *(_OWORD *)(inited + 48) = v12;
  *(_OWORD *)(inited + 64) = v11;
  *(_OWORD *)(inited + 32) = v13;
  sub_100552904(a2);
  long long v14 = sub_100609134(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  if (v14[2])
  {
    swift_retain();
    swift_retain();
    sub_1007652DC((uint64_t)v14, 0, a1, a1, a3);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v15 = Logger.logObject.getter();
    os_log_type_t v16 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v15, v16))
    {
      id v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "LiveLocations: Not able to decode locations", v17, 2u);
      swift_slowDealloc();
    }

    Transaction.capture()();
  }
}

void sub_100755078(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 16))
  {
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = a1;
    *(void *)(v4 + 24) = a2;
    __chkstk_darwin(v4);
    swift_bridgeObjectRetain();
    swift_retain();
    static Transaction.named<A>(_:with:)();
    swift_release();
    if (qword_101636B00 != -1) {
      swift_once();
    }
    uint64_t v5 = type metadata accessor for Logger();
    sub_100010324(v5, (uint64_t)qword_10170DE98);
    uint64_t v6 = Logger.logObject.getter();
    os_log_type_t v7 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v6, v7))
    {
      os_log_type_t v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Called client session with location updates", v8, 2u);
      swift_slowDealloc();
    }

    if (qword_101637440 != -1) {
      swift_once();
    }
    swift_retain();
    sub_1010DD998();
    swift_release();
    Transaction.capture()();
  }
  else
  {
    if (qword_101636B00 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_100010324(v9, (uint64_t)qword_10170DE98);
    long long v12 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v10))
    {
      long long v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)long long v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v10, "saved locations is empty", v11, 2u);
      swift_slowDealloc();
    }
  }
}

void sub_10075538C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    type metadata accessor for SecureLocationsError(0);
    if (swift_dynamicCast())
    {
      sub_100766750(&qword_10163F370, type metadata accessor for SecureLocationsError);
      _BridgedStoredNSError.code.getter();
      if (a1 != 8) {
        goto LABEL_10;
      }
      if (qword_101636B00 != -1) {
        swift_once();
      }
      uint64_t v5 = type metadata accessor for Logger();
      sub_100010324(v5, (uint64_t)qword_10170DE98);
      uint64_t v6 = Logger.logObject.getter();
      os_log_type_t v7 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v6, v7))
      {
        os_log_type_t v8 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v8 = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, v7, "No client sessions. Unsubscribing from live locations", v8, 2u);
        swift_slowDealloc();
      }

      if (*(void *)(a2 + 16))
      {
        uint64_t v9 = *(void *)(type metadata accessor for SecureLocation() - 8);
        os_log_type_t v10 = (uint64_t *)(a2
                        + ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)));
        id v11 = [objc_allocWithZone((Class)SPSecureLocationsSubscriptionContext) init];
        [v11 setSubscriptionMode:2];
        NSString v12 = String._bridgeToObjectiveC()();
        [v11 setClientApp:v12];

        uint64_t v13 = *v10;
        unint64_t v14 = v10[1];
        swift_bridgeObjectRetain();
        sub_100742D8C(v13, v14, (char *)v11, a3);

        swift_bridgeObjectRelease();
      }
      else
      {
LABEL_10:
      }
    }
  }
}

uint64_t sub_100755600(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v23 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  NSString v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for DispatchQoS();
  uint64_t v13 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v16 = *(void *)a1;
  LOBYTE(a1) = *(unsigned char *)(a1 + 8);
  uint64_t v21 = *(void *)(a2 + 144);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = v16;
  *(unsigned char *)(v17 + 24) = a1;
  *(void *)(v17 + 32) = a2;
  *(void *)(v17 + 40) = a3;
  *(void *)(v17 + 48) = a4;
  *(void *)(v17 + 56) = a5;
  aBlock[4] = sub_100767FBC;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  _OWORD aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015D3398;
  uint64_t v18 = _Block_copy(aBlock);
  sub_100483974(v16, a1);
  swift_retain();
  swift_bridgeObjectRetain();
  id v19 = a5;
  static DispatchQoS.unspecified.getter();
  uint64_t v24 = _swiftEmptyArrayStorage;
  sub_100766750((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v12, v10);
  (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v22);
  return swift_release();
}

uint64_t sub_100755900(unint64_t a1, char a2)
{
  if (a2)
  {
    v20[0] = 0;
    v20[1] = 0xE000000000000000;
    sub_1001EE1D4(a1);
    _StringGuts.grow(_:)(57);
    v4._object = (void *)0x8000000101406510;
    v4._uint64_t countAndFlagsBits = 0xD000000000000037;
    String.append(_:)(v4);
    v5._uint64_t countAndFlagsBits = sub_1001EE00C(a1);
    String.append(_:)(v5);
    swift_bridgeObjectRelease();
    if (qword_101636B00 != -1) {
      swift_once();
    }
    uint64_t v6 = type metadata accessor for Logger();
    sub_100010324(v6, (uint64_t)qword_10170DE98);
    swift_bridgeObjectRetain_n();
    os_log_type_t v7 = Logger.logObject.getter();
    os_log_type_t v8 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc();
      v20[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v9 = 136446210;
      swift_bridgeObjectRetain();
      sub_1008FA0F0(0, 0xE000000000000000, v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "LiveLocations: %{public}s", v9, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    if (qword_101637440 != -1) {
      swift_once();
    }
    swift_retain();
    sub_1010DD508(0, 0, 0xE000000000000000);
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
    uint64_t v10 = qword_101636B00;
    swift_retain();
    if (v10 != -1) {
      swift_once();
    }
    uint64_t v11 = type metadata accessor for Logger();
    sub_100010324(v11, (uint64_t)qword_10170DE98);
    sub_100483974(a1, 0);
    swift_retain();
    NSString v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc();
      v20[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v14 = 136446210;
      swift_retain();
      uint64_t v15 = sub_1004EB530();
      unint64_t v17 = v16;
      sub_100483968(a1, 0);
      sub_1008FA0F0(v15, v17, v20);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_100483968(a1, 0);
      sub_100483968(a1, 0);
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "LiveLocations: Ending session: %{public}s", v14, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_100483968(a1, 0);
      sub_100483968(a1, 0);
    }

    sub_1004EE668();
    [*(id *)(a1 + 56) endSession];
    sub_1004ED5D8(a1);
  }
  sub_100483968(a1, a2 & 1);
  uint64_t v18 = type metadata accessor for Transaction();
  __chkstk_darwin(v18);
  return static Transaction.named<A>(_:with:)();
}

uint64_t sub_100755E18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  sub_10000588C(&qword_1016552B0);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_101342130;
  *(void *)(v9 + 32) = a3;
  *(void *)(v9 + 40) = a4;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_10073EE18(v9, a5, (uint64_t)j___s10FindMyBase11TransactionC7captureyyF, a1);
  swift_bridgeObjectRelease();
  return swift_release();
}

void sub_100755EDC(uint64_t a1, unint64_t a2, char a3)
{
  if (qword_101636B00 != -1) {
    swift_once();
  }
  uint64_t v6 = type metadata accessor for Logger();
  sub_100010324(v6, (uint64_t)qword_10170DE98);
  swift_bridgeObjectRetain_n();
  os_log_type_t v7 = Logger.logObject.getter();
  os_log_type_t v8 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc();
    uint64_t v19 = swift_slowAlloc();
    *(_DWORD *)uint64_t v9 = 136315394;
    swift_bridgeObjectRetain();
    sub_1008FA0F0(a1, a2, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v9 + 12) = 2080;
    uint64_t v10 = 0xD000000000000014;
    unint64_t v11 = 0x80000001013EEDF0;
    switch(a3)
    {
      case 1:
        uint64_t v10 = 0xD000000000000017;
        NSString v12 = "DISTRIBUTE_KEYS_COMMAND";
        goto LABEL_10;
      case 2:
        uint64_t v10 = 0xD000000000000013;
        NSString v12 = "STOP_LOCATE_COMMAND";
        goto LABEL_10;
      case 3:
        uint64_t v10 = 0xD000000000000018;
        NSString v12 = "FETCH_LABELLED_LOCATIONS";
LABEL_10:
        unint64_t v11 = (unint64_t)(v12 - 32) | 0x8000000000000000;
        break;
      case 4:
        uint64_t v10 = 0x5F454D5F4F545541;
        unint64_t v11 = 0xEE00455649544341;
        break;
      case 5:
        unint64_t v11 = 0x80000001013EEE80;
        uint64_t v10 = 0xD000000000000010;
        break;
      default:
        break;
    }
    sub_1008FA0F0(v10, v11, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "LiveLocations: Received incoming request for live from %s with command %s", (uint8_t *)v9, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
  }
  if (a3 == 2)
  {
    sub_100761AA0(a1, a2, 1702259052, 0xE400000000000000);
  }
  else if (a3)
  {
    os_log_type_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v19 = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136315138;
      uint64_t v16 = 0xD000000000000014;
      unint64_t v17 = 0x80000001013EEDF0;
      switch("gs")
      {
        case 1u:
          uint64_t v16 = 0xD000000000000017;
          uint64_t v18 = "DISTRIBUTE_KEYS_COMMAND";
          goto LABEL_22;
        case 2u:
          __break(1u);
          JUMPOUT(0x100756354);
        case 3u:
          uint64_t v16 = 0xD000000000000018;
          uint64_t v18 = "FETCH_LABELLED_LOCATIONS";
LABEL_22:
          unint64_t v17 = (unint64_t)(v18 - 32) | 0x8000000000000000;
          break;
        case 4u:
          uint64_t v16 = 0x5F454D5F4F545541;
          unint64_t v17 = 0xEE00455649544341;
          break;
        case 5u:
          unint64_t v17 = 0x80000001013EEE80;
          uint64_t v16 = 0xD000000000000010;
          break;
        default:
          break;
      }
      sub_1008FA0F0(v16, v17, &v19);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "LiveLocations: Invalid command specified %s", v15, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
  }
  else
  {
    sub_100759090(a1, a2, 1702259052, 0xE400000000000000, 0);
  }
}

void sub_100756384(uint64_t a1)
{
  if (a1)
  {
    swift_errorRetain();
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v1 = type metadata accessor for Logger();
    sub_100010324(v1, (uint64_t)qword_10170EC30);
    swift_errorRetain();
    swift_errorRetain();
    os_log_type_t v2 = Logger.logObject.getter();
    os_log_type_t v3 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v2, v3))
    {
      Swift::String v4 = (uint8_t *)swift_slowAlloc();
      uint64_t v7 = swift_slowAlloc();
      *(_DWORD *)Swift::String v4 = 136315138;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v5 = String.init<A>(describing:)();
      sub_1008FA0F0(v5, v6, &v7);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "CheckAndFetchConfig: Error fetching config when feature disabled to check if that has changed %s", v4, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
      swift_errorRelease();
    }
  }
  Transaction.capture()();
}

Swift::Int sub_10075657C(void *a1)
{
  os_log_type_t v2 = a1;
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_139;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v91 = *v2;
      uint64_t v92 = *v2 + 160;
      uint64_t v93 = -1;
      for (uint64_t i = 1; i != v3; ++i)
      {
        double v95 = *(double *)(v91 + 88 * i + 64);
        uint64_t v96 = v93;
        uint64_t v97 = v92;
        do
        {
          if (*(double *)(v97 - 96) >= v95) {
            break;
          }
          if (!v91) {
            goto LABEL_143;
          }
          uint64_t v98 = (_OWORD *)(v97 - 72);
          uint64_t v99 = *(void *)(v97 - 72);
          uint64_t v100 = *(void *)(v97 - 64);
          Swift::Int result = *(void *)(v97 - 56);
          uint64_t v101 = *(void *)(v97 - 48);
          long long v102 = *(_OWORD *)(v97 - 24);
          long long v103 = *(_OWORD *)(v97 - 40);
          long long v104 = *(_OWORD *)v97;
          long long v105 = *(_OWORD *)(v97 - 112);
          v98[2] = *(_OWORD *)(v97 - 128);
          v98[3] = v105;
          v98[4] = *(_OWORD *)(v97 - 96);
          *(void *)(v97 + 8) = *(void *)(v97 - 80);
          long long v106 = *(_OWORD *)(v97 - 144);
          *uint64_t v98 = *(_OWORD *)(v97 - 160);
          v98[1] = v106;
          *(_OWORD *)(v97 - 88) = v104;
          v97 -= 88;
          *(void *)(v97 - 72) = v99;
          *(void *)(v97 - 64) = v100;
          *(void *)(v97 - 56) = result;
          *(void *)(v97 - 48) = v101;
          *(_OWORD *)(v97 - 40) = v103;
          *(_OWORD *)(v97 - 24) = v102;
          *(double *)(v97 - 8) = v95;
        }
        while (!__CFADD__(v96++, 1));
        v92 += 88;
        --v93;
      }
    }
    return result;
  }
  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_148;
  }
  Swift::Int v119 = result;
  if (v3 < 2)
  {
    os_log_type_t v8 = _swiftEmptyArrayStorage;
    uint64_t v125 = (double *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v11 = _swiftEmptyArrayStorage[2];
      uint64_t v108 = (char *)_swiftEmptyArrayStorage;
LABEL_105:
      uint64_t v118 = v8;
      if (v11 >= 2)
      {
        uint64_t v109 = *v2;
        do
        {
          unint64_t v110 = v11 - 2;
          if (v11 < 2) {
            goto LABEL_134;
          }
          if (!v109) {
            goto LABEL_147;
          }
          uint64_t v111 = v108;
          uint64_t v112 = *(void *)&v108[16 * v110 + 32];
          uint64_t v113 = *(void *)&v108[16 * v11 + 24];
          sub_100756D50((double *)(v109 + 88 * v112), (double *)(v109 + 88 * *(void *)&v108[16 * v11 + 16]), v109 + 88 * v113, v125);
          if (v1) {
            break;
          }
          if (v113 < v112) {
            goto LABEL_135;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v111 = sub_100B73584((uint64_t)v111);
          }
          if (v110 >= *((void *)v111 + 2)) {
            goto LABEL_136;
          }
          uint64_t v114 = &v111[16 * v110 + 32];
          *(void *)uint64_t v114 = v112;
          *((void *)v114 + 1) = v113;
          unint64_t v115 = *((void *)v111 + 2);
          if (v11 > v115) {
            goto LABEL_137;
          }
          memmove(&v111[16 * v11 + 16], &v111[16 * v11 + 32], 16 * (v115 - v11));
          uint64_t v108 = v111;
          *((void *)v111 + 2) = v115 - 1;
          unint64_t v11 = v115 - 1;
        }
        while (v115 > 2);
      }
LABEL_95:
      swift_bridgeObjectRelease();
      v118[2] = 0;
      return swift_bridgeObjectRelease();
    }
    uint64_t v118 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v7 + 16) = v6;
    uint64_t v118 = (void *)v7;
    uint64_t v125 = (double *)(v7 + 32);
  }
  Swift::Int v9 = 0;
  os_log_type_t v117 = v2;
  uint64_t v10 = *v2;
  uint64_t v126 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v120 = v3;
  while (1)
  {
    Swift::Int v12 = v9++;
    if (v9 < v3)
    {
      double v13 = *(double *)(v10 + 88 * v9 + 64);
      double v14 = *(double *)(v10 + 88 * v12 + 64);
      Swift::Int v9 = v12 + 2;
      if (v12 + 2 < v3)
      {
        uint64_t v15 = (double *)(v10 + 240 + 88 * v12);
        double v16 = v13;
        while (1)
        {
          double v17 = v16;
          double v16 = *v15;
          if (v14 < v13 == v17 >= *v15) {
            break;
          }
          ++v9;
          v15 += 11;
          if (v3 == v9)
          {
            Swift::Int v9 = v3;
            break;
          }
        }
      }
      if (v14 < v13)
      {
        if (v9 < v12) {
          goto LABEL_140;
        }
        if (v12 < v9)
        {
          uint64_t v18 = 88 * v9;
          Swift::Int v19 = v9;
          Swift::Int v20 = v12;
          Swift::Int v116 = v12;
          uint64_t v21 = 88 * v12;
          do
          {
            if (v20 != --v19)
            {
              if (!v10) {
                goto LABEL_146;
              }
              uint64_t v22 = v10 + v18;
              uint64_t v23 = *(void *)(v10 + v21 + 16);
              uint64_t v24 = *(void *)(v10 + v21 + 24);
              uint64_t v25 = *(void *)(v10 + v21 + 64);
              long long v123 = *(_OWORD *)(v10 + v21 + 48);
              long long v124 = *(_OWORD *)(v10 + v21);
              long long v121 = *(_OWORD *)(v10 + v21 + 32);
              long long v122 = *(_OWORD *)(v10 + v21 + 72);
              memmove((void *)(v10 + v21), (const void *)(v10 + v18 - 88), 0x58uLL);
              *(_OWORD *)(v22 - 88) = v124;
              *(void *)(v22 - 72) = v23;
              *(void *)(v22 - 64) = v24;
              *(_OWORD *)(v22 - 56) = v121;
              *(_OWORD *)(v22 - 40) = v123;
              *(void *)(v22 - 24) = v25;
              *(_OWORD *)(v22 - 16) = v122;
            }
            ++v20;
            v18 -= 88;
            v21 += 88;
          }
          while (v20 < v19);
          Swift::Int v3 = v120;
          Swift::Int v12 = v116;
        }
      }
    }
    if (v9 >= v3) {
      goto LABEL_39;
    }
    if (__OFSUB__(v9, v12)) {
      goto LABEL_138;
    }
    if (v9 - v12 >= v119) {
      goto LABEL_39;
    }
    Swift::Int v26 = v12 + v119;
    if (__OFADD__(v12, v119)) {
      goto LABEL_141;
    }
    if (v26 >= v3) {
      Swift::Int v26 = v3;
    }
    if (v26 < v12) {
      break;
    }
    if (v9 != v26)
    {
      uint64_t v77 = v10 + 72 + 88 * v9;
      os_log_type_t v27 = v126;
      do
      {
        double v78 = *(double *)(v10 + 88 * v9 + 64);
        Swift::Int v79 = v12;
        uint64_t v80 = v77;
        do
        {
          if (*(double *)(v80 - 96) >= v78) {
            break;
          }
          if (!v10) {
            goto LABEL_144;
          }
          unint64_t v81 = (_OWORD *)(v80 - 72);
          uint64_t v82 = *(void *)(v80 - 72);
          uint64_t v83 = *(void *)(v80 - 64);
          uint64_t v84 = *(void *)(v80 - 56);
          uint64_t v85 = *(void *)(v80 - 48);
          long long v86 = *(_OWORD *)(v80 - 24);
          long long v87 = *(_OWORD *)(v80 - 40);
          long long v88 = *(_OWORD *)v80;
          long long v89 = *(_OWORD *)(v80 - 112);
          v81[2] = *(_OWORD *)(v80 - 128);
          v81[3] = v89;
          v81[4] = *(_OWORD *)(v80 - 96);
          *(void *)(v80 + 8) = *(void *)(v80 - 80);
          long long v90 = *(_OWORD *)(v80 - 144);
          _OWORD *v81 = *(_OWORD *)(v80 - 160);
          v81[1] = v90;
          *(_OWORD *)(v80 - 88) = v88;
          v80 -= 88;
          *(void *)(v80 - 72) = v82;
          *(void *)(v80 - 64) = v83;
          *(void *)(v80 - 56) = v84;
          *(void *)(v80 - 48) = v85;
          *(_OWORD *)(v80 - 40) = v87;
          *(_OWORD *)(v80 - 24) = v86;
          ++v79;
          *(double *)(v80 - 8) = v78;
        }
        while (v9 != v79);
        ++v9;
        v77 += 88;
      }
      while (v9 != v26);
      Swift::Int v9 = v26;
      if (v26 < v12) {
        goto LABEL_133;
      }
      goto LABEL_40;
    }
LABEL_39:
    os_log_type_t v27 = v126;
    if (v9 < v12) {
      goto LABEL_133;
    }
LABEL_40:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      os_log_type_t v27 = sub_100B729CC(0, *((void *)v27 + 2) + 1, 1, v27);
    }
    unint64_t v29 = *((void *)v27 + 2);
    unint64_t v28 = *((void *)v27 + 3);
    unint64_t v11 = v29 + 1;
    if (v29 >= v28 >> 1) {
      os_log_type_t v27 = sub_100B729CC((char *)(v28 > 1), v29 + 1, 1, v27);
    }
    *((void *)v27 + 2) = v11;
    uint64_t v30 = v27 + 32;
    id v31 = &v27[16 * v29 + 32];
    *(void *)id v31 = v12;
    *((void *)v31 + 1) = v9;
    uint64_t v126 = v27;
    if (v29)
    {
      while (1)
      {
        unint64_t v32 = v11 - 1;
        if (v11 >= 4)
        {
          id v37 = &v30[16 * v11];
          uint64_t v38 = *((void *)v37 - 8);
          uint64_t v39 = *((void *)v37 - 7);
          BOOL v43 = __OFSUB__(v39, v38);
          uint64_t v40 = v39 - v38;
          if (v43) {
            goto LABEL_122;
          }
          uint64_t v42 = *((void *)v37 - 6);
          uint64_t v41 = *((void *)v37 - 5);
          BOOL v43 = __OFSUB__(v41, v42);
          uint64_t v35 = v41 - v42;
          char v36 = v43;
          if (v43) {
            goto LABEL_123;
          }
          unint64_t v44 = v11 - 2;
          uint64_t v45 = &v30[16 * v11 - 32];
          uint64_t v47 = *(void *)v45;
          uint64_t v46 = *((void *)v45 + 1);
          BOOL v43 = __OFSUB__(v46, v47);
          uint64_t v48 = v46 - v47;
          if (v43) {
            goto LABEL_125;
          }
          BOOL v43 = __OFADD__(v35, v48);
          uint64_t v49 = v35 + v48;
          if (v43) {
            goto LABEL_128;
          }
          if (v49 >= v40)
          {
            os_log_type_t v67 = &v30[16 * v32];
            uint64_t v69 = *(void *)v67;
            uint64_t v68 = *((void *)v67 + 1);
            BOOL v43 = __OFSUB__(v68, v69);
            uint64_t v70 = v68 - v69;
            if (v43) {
              goto LABEL_132;
            }
            BOOL v60 = v35 < v70;
            goto LABEL_76;
          }
        }
        else
        {
          if (v11 != 3)
          {
            uint64_t v61 = *((void *)v27 + 4);
            uint64_t v62 = *((void *)v27 + 5);
            BOOL v43 = __OFSUB__(v62, v61);
            uint64_t v54 = v62 - v61;
            char v55 = v43;
            goto LABEL_70;
          }
          uint64_t v34 = *((void *)v27 + 4);
          uint64_t v33 = *((void *)v27 + 5);
          BOOL v43 = __OFSUB__(v33, v34);
          uint64_t v35 = v33 - v34;
          char v36 = v43;
        }
        if (v36) {
          goto LABEL_124;
        }
        unint64_t v44 = v11 - 2;
        unint64_t v50 = &v30[16 * v11 - 32];
        uint64_t v52 = *(void *)v50;
        uint64_t v51 = *((void *)v50 + 1);
        BOOL v53 = __OFSUB__(v51, v52);
        uint64_t v54 = v51 - v52;
        char v55 = v53;
        if (v53) {
          goto LABEL_127;
        }
        uint64_t v56 = &v30[16 * v32];
        uint64_t v58 = *(void *)v56;
        uint64_t v57 = *((void *)v56 + 1);
        BOOL v43 = __OFSUB__(v57, v58);
        uint64_t v59 = v57 - v58;
        if (v43) {
          goto LABEL_130;
        }
        if (__OFADD__(v54, v59)) {
          goto LABEL_131;
        }
        if (v54 + v59 >= v35)
        {
          BOOL v60 = v35 < v59;
LABEL_76:
          if (v60) {
            unint64_t v32 = v44;
          }
          goto LABEL_78;
        }
LABEL_70:
        if (v55) {
          goto LABEL_126;
        }
        uint64_t v63 = &v30[16 * v32];
        uint64_t v65 = *(void *)v63;
        uint64_t v64 = *((void *)v63 + 1);
        BOOL v43 = __OFSUB__(v64, v65);
        uint64_t v66 = v64 - v65;
        if (v43) {
          goto LABEL_129;
        }
        if (v66 < v54) {
          goto LABEL_15;
        }
LABEL_78:
        unint64_t v71 = v32 - 1;
        if (v32 - 1 >= v11)
        {
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
          goto LABEL_142;
        }
        if (!v10) {
          goto LABEL_145;
        }
        uint64_t v72 = &v30[16 * v71];
        uint64_t v73 = *(void *)v72;
        uint64_t v74 = &v30[16 * v32];
        uint64_t v75 = *((void *)v74 + 1);
        sub_100756D50((double *)(v10 + 88 * *(void *)v72), (double *)(v10 + 88 * *(void *)v74), v10 + 88 * v75, v125);
        if (v1) {
          goto LABEL_95;
        }
        if (v75 < v73) {
          goto LABEL_119;
        }
        if (v32 > *((void *)v126 + 2)) {
          goto LABEL_120;
        }
        *(void *)uint64_t v72 = v73;
        *(void *)&v30[16 * v71 + 8] = v75;
        unint64_t v76 = *((void *)v126 + 2);
        if (v32 >= v76) {
          goto LABEL_121;
        }
        os_log_type_t v27 = v126;
        unint64_t v11 = v76 - 1;
        memmove(&v30[16 * v32], v74 + 16, 16 * (v76 - 1 - v32));
        *((void *)v126 + 2) = v76 - 1;
        if (v76 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v11 = 1;
LABEL_15:
    Swift::Int v3 = v120;
    if (v9 >= v120)
    {
      os_log_type_t v8 = v118;
      uint64_t v108 = v126;
      os_log_type_t v2 = v117;
      goto LABEL_105;
    }
  }
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_100756D50(double *__dst, double *__src, unint64_t a3, double *a4)
{
  Swift::String v4 = a4;
  uint64_t v6 = __src;
  uint64_t v7 = __dst;
  int64_t v8 = (char *)__src - (char *)__dst;
  int64_t v9 = ((char *)__src - (char *)__dst) / 88;
  uint64_t v10 = a3 - (void)__src;
  uint64_t v11 = (uint64_t)(a3 - (void)__src) / 88;
  uint64_t v23 = __dst;
  uint64_t v22 = a4;
  if (v9 >= v11)
  {
    if (v10 >= -87)
    {
      if (a4 != __src || &__src[11 * v11] <= a4) {
        memmove(a4, __src, 88 * v11);
      }
      double v16 = &v4[11 * v11];
      uint64_t v21 = (char *)v16;
      uint64_t v23 = v6;
      if (v7 < v6 && v10 >= 88)
      {
        double v17 = (double *)(a3 - 88);
        do
        {
          uint64_t v18 = v17 + 11;
          if (*(v6 - 3) >= *(v16 - 3))
          {
            uint64_t v21 = (char *)(v16 - 11);
            if (v18 < v16 || v17 >= v16 || v18 != v16) {
              memmove(v17, v16 - 11, 0x58uLL);
            }
            Swift::Int v19 = v6;
            v16 -= 11;
            if (v6 <= v7) {
              break;
            }
          }
          else
          {
            Swift::Int v19 = v6 - 11;
            if (v18 != v6 || v17 >= v6) {
              memmove(v17, v6 - 11, 0x58uLL);
            }
            uint64_t v23 = v6 - 11;
            if (v19 <= v7) {
              break;
            }
          }
          v17 -= 11;
          uint64_t v6 = v19;
        }
        while (v16 > v4);
      }
LABEL_40:
      sub_100B7303C((void **)&v23, (const void **)&v22, &v21);
      return 1;
    }
  }
  else if (v8 >= -87)
  {
    if (a4 != __dst || &__dst[11 * v9] <= a4) {
      memmove(a4, __dst, 88 * v9);
    }
    Swift::Int v12 = &v4[11 * v9];
    uint64_t v21 = (char *)v12;
    if ((unint64_t)v6 < a3 && v8 >= 88)
    {
      double v13 = v4;
      while (1)
      {
        if (v13[8] >= v6[8])
        {
          Swift::String v4 = v13 + 11;
          uint64_t v15 = v13;
          double v14 = v6;
          if (v7 == v13)
          {
            v13 += 11;
            if (v7 < v4) {
              goto LABEL_18;
            }
          }
          else
          {
            v13 += 11;
          }
        }
        else
        {
          double v14 = v6 + 11;
          uint64_t v15 = v6;
          if (v7 == v6 && v7 < v14) {
            goto LABEL_18;
          }
        }
        memmove(v7, v15, 0x58uLL);
LABEL_18:
        v7 += 11;
        if (v13 < v12)
        {
          uint64_t v6 = v14;
          if ((unint64_t)v14 < a3) {
            continue;
          }
        }
        uint64_t v22 = v4;
        uint64_t v23 = v7;
        goto LABEL_40;
      }
    }
    goto LABEL_40;
  }
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t sub_100757010(unint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    swift_stdlib_random();
    uint64_t result = (0 * (unsigned __int128)v1) >> 64;
    if (-(uint64_t)v1 % v1)
    {
      while (1)
        swift_stdlib_random();
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_10075709C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  __chkstk_darwin(v4 - 8);
  uint64_t v10 = type metadata accessor for BluetoothConnectionObserver();
  uint64_t v11 = &off_1016035A0;
  *(void *)&long long v9 = a1;
  swift_defaultActor_initialize();
  type metadata accessor for WorkItemQueue();
  UUID.init()();
  *(void *)(a2 + 152) = WorkItemQueue.__allocating_init(name:identifier:)();
  uint64_t v5 = a2 + OBJC_IVAR____TtC12searchpartyd20PairedBluetoothState_monitorStartDate;
  uint64_t v6 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56))(v5, 1, 1, v6);
  *(void *)(a2 + OBJC_IVAR____TtC12searchpartyd20PairedBluetoothState_continuations) = _swiftEmptyArrayStorage;
  uint64_t v7 = OBJC_IVAR____TtC12searchpartyd20PairedBluetoothState_dictionaryOfConnected;
  *(void *)(a2 + v7) = sub_10092F528((uint64_t)_swiftEmptyArrayStorage);
  sub_10001CEB0(&v9, a2 + 112);
  return a2;
}

void *sub_1007571EC(uint64_t a1, uint64_t a2)
{
  uint64_t v30 = a2;
  uint64_t v4 = type metadata accessor for SecureLocation() - 8;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (double *)((char *)v27 - v9);
  __chkstk_darwin(v8);
  double v13 = (char *)v27 - v12;
  uint64_t result = _swiftEmptyArrayStorage;
  id v31 = _swiftEmptyArrayStorage;
  uint64_t v15 = *(void *)(a1 + 16);
  if (v15)
  {
    v27[1] = v2;
    uint64_t v16 = *(void *)(v11 + 72);
    unint64_t v29 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
    uint64_t v17 = a1 + v29;
    uint64_t v18 = _swiftEmptyArrayStorage;
    uint64_t v28 = v16;
    while (1)
    {
      sub_100768C34(v17, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for SecureLocation);
      double v19 = *((double *)v13 + 2);
      sub_100768C34((uint64_t)v13, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for SecureLocation);
      if (v19 != 0.0) {
        break;
      }
      double v20 = v10[3];
      sub_100768C9C((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for SecureLocation);
      if (v20 != 0.0) {
        goto LABEL_9;
      }
      sub_100768C9C((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for SecureLocation);
LABEL_4:
      v17 += v16;
      if (!--v15) {
        return v31;
      }
    }
    sub_100768C9C((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for SecureLocation);
LABEL_9:
    uint64_t v21 = *(void *)v13;
    uint64_t v22 = *((void *)v13 + 1);
    swift_bridgeObjectRetain();
    sub_101128AD4(v21, v22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v23 = (uint64_t)v7;
    sub_100767F00((uint64_t)v13, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for SecureLocation);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      sub_1000B7FFC(0, v18[2] + 1, 1);
    }
    uint64_t v18 = v31;
    unint64_t v25 = v31[2];
    unint64_t v24 = v31[3];
    if (v25 >= v24 >> 1)
    {
      sub_1000B7FFC(v24 > 1, v25 + 1, 1);
      uint64_t v18 = v31;
    }
    v18[2] = v25 + 1;
    uint64_t v16 = v28;
    uint64_t v26 = (uint64_t)v18 + v29 + v25 * v28;
    uint64_t v7 = (char *)v23;
    sub_100767F00(v23, v26, (uint64_t (*)(void))type metadata accessor for SecureLocation);
    goto LABEL_4;
  }
  return result;
}

void *sub_1007574D0(uint64_t a1, uint64_t a2)
{
  uint64_t v47 = a2;
  uint64_t v46 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v4 = *(void *)(v46 - 8);
  __chkstk_darwin(v46);
  uint64_t v45 = (char *)v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = type metadata accessor for DispatchQoS();
  uint64_t v6 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  BOOL v43 = (char *)v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for SecureLocation() - 8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v9);
  double v14 = (void *)((char *)v35 - v13);
  uint64_t v15 = _swiftEmptyArrayStorage;
  uint64_t v54 = _swiftEmptyArrayStorage;
  uint64_t v16 = *(void *)(a1 + 16);
  if (v16)
  {
    v35[1] = v2;
    unint64_t v40 = (*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
    uint64_t v17 = a1 + v40;
    uint64_t v18 = *(void *)(v12 + 72);
    uint64_t v38 = v53;
    id v37 = (void (**)(char *, uint64_t))(v4 + 8);
    char v36 = (void (**)(char *, uint64_t))(v6 + 8);
    double v19 = &qword_101637000;
    uint64_t v41 = (void *)((char *)v35 - v13);
    uint64_t v42 = v11;
    uint64_t v39 = v18;
    do
    {
      sub_100768C34(v17, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for SecureLocation);
      if (v19[16] != -1) {
        swift_once();
      }
      swift_retain();
      char v20 = sub_100D0C2A4((uint64_t)v14);
      swift_release();
      if (v20)
      {
        uint64_t v50 = v16;
        if (qword_101637440 != -1) {
          swift_once();
        }
        uint64_t v21 = qword_10170F218;
        uint64_t v22 = *v14;
        uint64_t v23 = v14[1];
        uint64_t v48 = *(void *)(qword_10170F218 + 16);
        uint64_t v49 = v22;
        uint64_t v24 = swift_allocObject();
        *(void *)(v24 + 16) = v21;
        *(void *)(v24 + 24) = v22;
        *(void *)(v24 + 32) = v23;
        *(unsigned char *)(v24 + 40) = 1;
        void v53[2] = sub_10076922C;
        v53[3] = v24;
        aBlock[0] = _NSConcreteStackBlock;
        aBlock[1] = 1107296256;
        v53[0] = sub_1004B5480;
        v53[1] = &unk_1015D3960;
        unint64_t v25 = _Block_copy(aBlock);
        swift_retain_n();
        swift_bridgeObjectRetain();
        uint64_t v26 = v43;
        static DispatchQoS.unspecified.getter();
        uint64_t v51 = _swiftEmptyArrayStorage;
        sub_100766750((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
        sub_10000588C((uint64_t *)&unk_10163F350);
        sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
        os_log_type_t v27 = v45;
        uint64_t v28 = v46;
        dispatch thunk of SetAlgebra.init<A>(_:)();
        OS_dispatch_queue.async(group:qos:flags:execute:)();
        _Block_release(v25);
        (*v37)(v27, v28);
        unint64_t v29 = v26;
        double v14 = v41;
        (*v36)(v29, v44);
        swift_release();
        swift_release();
        swift_bridgeObjectRetain();
        sub_101128AD4(v49, v23);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v30 = (uint64_t)v42;
        sub_100767F00((uint64_t)v14, (uint64_t)v42, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        id v31 = v54;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000B7FFC(0, v31[2] + 1, 1);
          id v31 = v54;
        }
        uint64_t v18 = v39;
        unint64_t v33 = v31[2];
        unint64_t v32 = v31[3];
        double v19 = &qword_101637000;
        if (v33 >= v32 >> 1)
        {
          sub_1000B7FFC(v32 > 1, v33 + 1, 1);
          id v31 = v54;
        }
        v31[2] = v33 + 1;
        sub_100767F00(v30, (uint64_t)v31 + v40 + v33 * v18, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        uint64_t v16 = v50;
      }
      else
      {
        sub_100768C9C((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for SecureLocation);
      }
      v17 += v18;
      --v16;
    }
    while (v16);
    return v54;
  }
  return v15;
}

void *sub_100757AB8(uint64_t a1, uint64_t a2)
{
  uint64_t v37 = a2;
  uint64_t v4 = type metadata accessor for SecureLocation();
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v43 = (uint64_t)v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v42 = (uint64_t)v36 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)v36 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  double v14 = (double *)((char *)v36 - v13);
  __chkstk_darwin(v12);
  uint64_t v17 = (double *)((char *)v36 - v16);
  uint64_t result = _swiftEmptyArrayStorage;
  uint64_t v44 = _swiftEmptyArrayStorage;
  uint64_t v19 = *(void *)(a1 + 16);
  if (v19)
  {
    uint64_t v20 = *(unsigned __int8 *)(v15 + 80);
    uint64_t v21 = *(void *)(v15 + 72);
    uint64_t v38 = v2;
    uint64_t v39 = (v20 + 32) & ~v20;
    uint64_t v22 = a1 + v39;
    uint64_t v23 = _swiftEmptyArrayStorage;
    v36[1] = (char *)&type metadata for () + 8;
    unint64_t v40 = v11;
    uint64_t v41 = v4;
    while (1)
    {
      sub_100768C34(v22, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for SecureLocation);
      double v24 = v17[2];
      sub_100768C34((uint64_t)v17, (uint64_t)v14, (uint64_t (*)(void))type metadata accessor for SecureLocation);
      if (v24 != 0.0) {
        break;
      }
      double v25 = v14[3];
      sub_100768C9C((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for SecureLocation);
      if (v25 != 0.0) {
        goto LABEL_9;
      }
      sub_100768C9C((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for SecureLocation);
LABEL_4:
      v22 += v21;
      if (!--v19) {
        return v44;
      }
    }
    sub_100768C9C((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for SecureLocation);
LABEL_9:
    uint64_t v26 = *(void *)((char *)v17 + *(int *)(v4 + 60));
    sub_100768C34((uint64_t)v17, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for SecureLocation);
    if (v26 == 1)
    {
      sub_100768C9C((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for SecureLocation);
      sub_100768C34((uint64_t)v17, v42, (uint64_t (*)(void))type metadata accessor for SecureLocation);
    }
    else
    {
      uint64_t v27 = *(void *)&v11[*(int *)(v4 + 60)];
      sub_100768C9C((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for SecureLocation);
      sub_100768C34((uint64_t)v17, v42, (uint64_t (*)(void))type metadata accessor for SecureLocation);
      if (v27 != 3)
      {
        sub_100768C9C(v42, (uint64_t (*)(void))type metadata accessor for SecureLocation);
LABEL_17:
        sub_100767F00((uint64_t)v17, v43, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1000B7FFC(0, v23[2] + 1, 1);
        }
        uint64_t v23 = v44;
        unint64_t v35 = v44[2];
        unint64_t v34 = v44[3];
        if (v35 >= v34 >> 1)
        {
          sub_1000B7FFC(v34 > 1, v35 + 1, 1);
          uint64_t v23 = v44;
        }
        v23[2] = v35 + 1;
        sub_100767F00(v43, (uint64_t)v23 + v39 + v35 * v21, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        uint64_t v11 = v40;
        uint64_t v4 = v41;
        goto LABEL_4;
      }
    }
    if (qword_101637080 != -1) {
      swift_once();
    }
    swift_retain();
    uint64_t v28 = v42;
    char v29 = sub_100D0C790(v42);
    swift_release();
    sub_100768C9C(v28, (uint64_t (*)(void))type metadata accessor for SecureLocation);
    if (v29)
    {
      uint64_t v30 = *(void *)v17;
      uint64_t v31 = *((void *)v17 + 1);
      uint64_t v32 = type metadata accessor for Transaction();
      __chkstk_darwin(v32);
      v36[-4] = v37;
      v36[-3] = v30;
      v36[-2] = v31;
      uint64_t v33 = v38;
      static Transaction.named<A>(_:with:)();
      uint64_t v38 = v33;
      uint64_t v23 = v44;
    }
    goto LABEL_17;
  }
  return result;
}

id sub_100757F90()
{
  id v0 = [self standardUserDefaults];
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 BOOLForKey:v1];

  if (v2)
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_10170EC30);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      uint64_t v7 = "FetchConfig: simulateFeatureDisabled is ON. secureLocations will be disabled";
LABEL_10:
      _os_log_impl((void *)&_mh_execute_header, v4, v5, v7, v6, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v8 = type metadata accessor for Logger();
    sub_100010324(v8, (uint64_t)qword_10170EC30);
    uint64_t v4 = Logger.logObject.getter();
    os_log_type_t v5 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v6 = 0;
      uint64_t v7 = "FetchConfig: simulateFeatureDisabled is false";
      goto LABEL_10;
    }
  }

  return v2;
}

uint64_t sub_100758158()
{
  uint64_t v0 = type metadata accessor for Date();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = __chkstk_darwin(v2);
  uint64_t v7 = (char *)&v30 - v6;
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v30 - v9;
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v30 - v11;
  sub_100757010(0x20000000000001uLL);
  sub_100757F90();
  static Date.trustedNow.getter((uint64_t)v12);
  Date.addingTimeInterval(_:)();
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v13 = type metadata accessor for Logger();
  sub_100010324(v13, (uint64_t)qword_10170EC30);
  double v14 = *(void (**)(char *, char *, uint64_t))(v1 + 16);
  v14(v7, v10, v0);
  unint64_t v35 = v12;
  v14(v4, v12, v0);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  int v17 = v16;
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v18 = swift_slowAlloc();
    unint64_t v34 = v10;
    uint64_t v19 = v18;
    uint64_t v33 = swift_slowAlloc();
    uint64_t v37 = v33;
    *(_DWORD *)uint64_t v19 = 136315394;
    sub_100766750((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
    int v32 = v17;
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v36 = sub_1008FA0F0(v20, v21, &v37);
    os_log_t v31 = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v22 = *(void (**)(char *, uint64_t))(v1 + 8);
    v22(v7, v0);
    *(_WORD *)(v19 + 12) = 2080;
    uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v36 = sub_1008FA0F0(v23, v24, &v37);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    v22(v4, v0);
    os_log_t v25 = v31;
    _os_log_impl((void *)&_mh_execute_header, v31, (os_log_type_t)v32, "CheckAndFetchConfig: Setting up next check data %s  CurrentTime %s", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v10 = v34;
    swift_slowDealloc();
  }
  else
  {
    uint64_t v22 = *(void (**)(char *, uint64_t))(v1 + 8);
    v22(v7, v0);
    v22(v4, v0);
  }
  id v26 = [self standardUserDefaults];
  Date.timeIntervalSince1970.getter();
  Class isa = Double._bridgeToObjectiveC()().super.super.isa;
  NSString v28 = String._bridgeToObjectiveC()();
  [v26 setValue:isa forKey:v28];

  v22(v10, v0);
  return ((uint64_t (*)(char *, uint64_t))v22)(v35, v0);
}

void sub_100758610()
{
  id v0 = [self standardUserDefaults];
  Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
  NSString v2 = String._bridgeToObjectiveC()();
  [v0 setValue:isa forKey:v2];

  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_100010324(v3, (uint64_t)qword_10170EC30);
  oslog = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v5 = 67109120;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, oslog, v4, "LabelledLocations - Updating fetch done to %{BOOL}d", v5, 8u);
    swift_slowDealloc();
  }
  else
  {
  }
}

void sub_1007587C0(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = a2;
  swift_bridgeObjectRetain();
  sub_10072C794(&v7);
  *(void *)(a1 + 104) = v7;
  swift_bridgeObjectRelease();
  sub_100758610();
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v3 = type metadata accessor for Logger();
  sub_100010324(v3, (uint64_t)qword_10170EC30);
  oslog = Logger.logObject.getter();
  os_log_type_t v4 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(oslog, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v4, "FetchLabelledLocations - Completed fetching location labels using decoder and saving them", v5, 2u);
    swift_slowDealloc();
  }
}

uint64_t sub_1007588F4(void *a1)
{
  uint64_t v3 = (uint64_t)sub_10001CD44(a1, a1[3]);
  dispatch thunk of Decoder.singleValueContainer()();
  if (!v1)
  {
    sub_10001CD44(v10, v10[3]);
    uint64_t v5 = dispatch thunk of SingleValueDecodingContainer.decode(_:)();
    uint64_t v6 = v4;
    BOOL v7 = v5 == 0x76697463616F7270 && v4 == 0xE900000000000065;
    if (v7 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      if (v5 == 0x776F6C6C616873 && v6 == 0xE700000000000000
        || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = 1;
        goto LABEL_10;
      }
      if (v5 == 1702259052 && v6 == 0xE400000000000000 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = 2;
        goto LABEL_10;
      }
      if (v5 == 0xD000000000000013 && v6 == 0x8000000101405BA0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = 5;
        goto LABEL_10;
      }
      char v9 = _stringCompareWithSmolCheck(_:_:expecting:)();
      swift_bridgeObjectRelease();
      if (v9)
      {
        uint64_t v3 = 5;
        goto LABEL_10;
      }
    }
    uint64_t v3 = 0;
LABEL_10:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v10);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
    return v3;
  }
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
  return v3;
}

uint64_t type metadata accessor for SecureLocationsCoordinator()
{
  return self;
}

uint64_t destroy for SecureLocationsCoordinator.SecureLocationsCommandPayload()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SecureLocationsCoordinator.SecureLocationsCommandPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  uint64_t v7 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v7;
  uint64_t v8 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v8;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for SecureLocationsCoordinator.SecureLocationsCommandPayload(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for SecureLocationsCoordinator.SecureLocationsCommandPayload(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for SecureLocationsCoordinator.SecureLocationsCommandPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for SecureLocationsCoordinator.SecureLocationsCommandPayload(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 104)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SecureLocationsCoordinator.SecureLocationsCommandPayload(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 104) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 104) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsCoordinator.SecureLocationsCommandPayload()
{
  return &type metadata for SecureLocationsCoordinator.SecureLocationsCommandPayload;
}

unsigned char *storeEnumTagSinglePayload for SecureLocationsPushCommands(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *__n128 result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x100759000);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsPushCommands()
{
  return &type metadata for SecureLocationsPushCommands;
}

unint64_t sub_10075903C()
{
  unint64_t result = qword_10164D090;
  if (!qword_10164D090)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164D090);
  }
  return result;
}

void sub_100759090(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, char a5)
{
  if (qword_101636CA0 != -1) {
    swift_once();
  }
  uint64_t v7 = type metadata accessor for Logger();
  sub_100010324(v7, (uint64_t)qword_10164CC28);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v8 = Logger.logObject.getter();
  os_log_type_t v9 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = swift_slowAlloc();
    *(void *)&v35[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v10 = 141558787;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v10 + 12) = 2081;
    swift_bridgeObjectRetain();
    sub_1008FA0F0(a1, a2, (uint64_t *)v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v10 + 22) = 2082;
    swift_bridgeObjectRetain();
    DWORD1(v22) = (unint64_t)sub_1008FA0F0(a3, a4, (uint64_t *)v35) >> 32;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    *(_WORD *)(v10 + 32) = 1026;
    LODWORD(v22) = a5 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "startLocationMonitoring findmyId: %{private,mask.hash}s. Policy: %{public}s. forcePublish: %{BOOL,public}d", (uint8_t *)v10, 0x26u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    if (sub_100757F90()) {
      goto LABEL_16;
    }
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    if (sub_100757F90())
    {
LABEL_16:
      if (qword_101637070 != -1) {
        swift_once();
      }
      sub_100010324(v7, (uint64_t)qword_10170EC30);
      uint64_t v15 = Logger.logObject.getter();
      os_log_type_t v16 = static os_log_type_t.default.getter();
      if (!os_log_type_enabled(v15, v16)) {
        goto LABEL_21;
      }
      int v17 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)int v17 = 0;
      uint64_t v18 = "LocationMonitor: secureLocations feature is disabled. Not proceeding with starting monitor";
      goto LABEL_20;
    }
  }
  if (qword_101637080 != -1) {
    swift_once();
  }
  swift_retain();
  OS_dispatch_queue.sync<A>(execute:)();
  swift_release();
  v35[10] = v32;
  v35[11] = v33;
  v35[12] = v34;
  v35[6] = v28;
  v35[7] = v29;
  v35[8] = v30;
  v35[9] = v31;
  void v35[2] = v24;
  v35[3] = v25;
  v35[4] = v26;
  v35[5] = v27;
  v35[0] = v22;
  v35[1] = v23;
  sub_100551984((uint64_t)v35);
  if ((BYTE8(v35[0]) & 1) == 0) {
    goto LABEL_16;
  }
  swift_retain();
  char v11 = sub_100D0C0B0();
  swift_release();
  if ((v11 & 1) == 0) {
    return;
  }
  if ((a3 != 0x6F725072656E776FLL || a4 != 0xEE00657669746361)
    && (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) == 0
    || (uint64_t My = type metadata accessor for Feature.FindMy(),
        *((void *)&v23 + 1) = My,
        *(void *)&v24 = sub_100766750((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy), uint64_t v13 = sub_10001D958((uint64_t *)&v22), (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v13, enum case for Feature.FindMy.fmOwnerProactive(_:), My), LOBYTE(My) = isFeatureEnabled(_:)(), _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)&v22), (My & 1) != 0))
  {
    uint64_t v14 = type metadata accessor for Transaction();
    __chkstk_darwin(v14);
    static Transaction.named<A>(_:with:)();
    return;
  }
  if (qword_101637070 != -1) {
    swift_once();
  }
  sub_100010324(v7, (uint64_t)qword_10170EC30);
  uint64_t v15 = Logger.logObject.getter();
  os_log_type_t v16 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v15, v16))
  {
    int v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)int v17 = 0;
    uint64_t v18 = "ownerProactive feature is disabled";
LABEL_20:
    _os_log_impl((void *)&_mh_execute_header, v15, v16, v18, v17, 2u);
    swift_slowDealloc();
  }
LABEL_21:
}

void sub_1007596C4(uint64_t a1, uint64_t a2, uint64_t isEscapingClosureAtFileLocation, uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v6 = a4;
  if (!a1) {
    goto LABEL_20;
  }
  uint64_t v37 = a5;
  swift_errorRetain();
  if (qword_101637070 != -1) {
    goto LABEL_27;
  }
  while (1)
  {
    uint64_t v8 = type metadata accessor for Logger();
    sub_100010324(v8, (uint64_t)qword_10170EC30);
    swift_errorRetain();
    swift_errorRetain();
    os_log_type_t v9 = Logger.logObject.getter();
    os_log_type_t v10 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v9, v10))
    {
      char v11 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)char v11 = 136315138;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v12 = String.init<A>(describing:)();
      sub_1008FA0F0(v12, v13, aBlock);
      uint64_t v6 = a4;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Error while resubscribing after receiving key update %s", v11, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    swift_errorRetain();
    swift_errorRetain();
    uint64_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 136446466;
      unint64_t v17 = 0xE900000000000065;
      uint64_t v18 = 0x76697463616F7270;
      switch(isEscapingClosureAtFileLocation)
      {
        case 0:
          break;
        case 1:
          unint64_t v17 = 0xE700000000000000;
          uint64_t v18 = 0x776F6C6C616873;
          break;
        case 2:
          unint64_t v17 = 0xE400000000000000;
          uint64_t v18 = 1702259052;
          break;
        case 3:
          unint64_t v17 = 0xE500000000000000;
          uint64_t v18 = 0x72656E776FLL;
          break;
        case 4:
          unint64_t v17 = 0xEE00657669746361;
          uint64_t v18 = 0x6F725072656E776FLL;
          break;
        case 5:
          unint64_t v17 = 0x8000000101405BA0;
          uint64_t v18 = 0xD000000000000013;
          break;
        default:
          unint64_t v17 = 0xE700000000000000;
          uint64_t v18 = 0x6E776F6E6B6E75;
          break;
      }
      sub_1008FA0F0(v18, v17, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      *(_WORD *)(v16 + 12) = 2080;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v19 = String.init<A>(describing:)();
      sub_1008FA0F0(v19, v20, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Error while resubscribing in %{public}s after receiving key update %s", (uint8_t *)v16, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      uint64_t v6 = a4;
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }
    swift_bridgeObjectRetain_n();
    unint64_t v21 = Logger.logObject.getter();
    os_log_type_t v22 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v21, v22))
    {
      long long v23 = (uint8_t *)swift_slowAlloc();
      aBlock[0] = swift_slowAlloc();
      *(_DWORD *)long long v23 = 136315138;
      uint64_t v6 = a4;
      swift_bridgeObjectRetain();
      uint64_t v24 = Array.description.getter();
      unint64_t v26 = v25;
      swift_bridgeObjectRelease();
      sub_1008FA0F0(v24, v26, aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "submit subscription error for %s", v23, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();

      swift_errorRelease();
    }
    else
    {
      swift_errorRelease();

      swift_bridgeObjectRelease_n();
    }
    a5 = v37;
LABEL_20:
    uint64_t v27 = *(void *)(v6 + 16);
    if (!v27) {
      break;
    }
    uint64_t v28 = *(void *)(a5 + 48);
    swift_bridgeObjectRetain();
    long long v29 = (uint64_t *)(v6 + 40);
    while (1)
    {
      uint64_t v30 = *(v29 - 1);
      uint64_t v31 = *v29;
      long long v32 = *(NSObject **)(v28 + 16);
      long long v33 = (void *)swift_allocObject();
      void v33[2] = v28;
      v33[3] = v30;
      v33[4] = v31;
      v33[5] = a6;
      uint64_t v34 = swift_allocObject();
      *(void *)(v34 + 16) = sub_100769230;
      *(void *)(v34 + 24) = v33;
      aBlock[4] = (uint64_t)sub_1003B7AE0;
      uint64_t v41 = v34;
      aBlock[0] = (uint64_t)_NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      void aBlock[2] = (uint64_t)sub_1000A70B0;
      aBlock[3] = (uint64_t)&unk_1015D3DE8;
      unint64_t v35 = _Block_copy(aBlock);
      uint64_t v6 = v41;
      swift_bridgeObjectRetain_n();
      swift_retain();
      id v36 = a6;
      swift_retain();
      swift_release();
      dispatch_sync(v32, v35);
      _Block_release(v35);
      char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      if (isEscapingClosureAtFileLocation) {
        break;
      }
      v29 += 2;
      if (!--v27)
      {
        swift_bridgeObjectRelease();
        goto LABEL_25;
      }
    }
    __break(1u);
LABEL_27:
    swift_once();
  }
LABEL_25:
  Transaction.capture()();
}

void sub_100759E14(uint64_t a1, void *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v69 = a4;
  LODWORD(v76) = a3;
  uint64_t v15 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v74 = *(void *)(v15 - 8);
  uint64_t v75 = v15;
  __chkstk_darwin(v15);
  uint64_t v72 = (char *)&v63 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = type metadata accessor for DispatchQoS();
  uint64_t v71 = *(void *)(v73 - 8);
  __chkstk_darwin(v73);
  uint64_t v70 = (char *)&v63 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = (void *)swift_allocObject();
  v18[2] = a5;
  v18[3] = a6;
  v18[4] = a7;
  v18[5] = a8;
  v18[6] = a9;
  uint64_t v19 = qword_101637070;
  uint64_t v78 = a5;
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v80 = a8;
  swift_retain();
  id v79 = a9;
  if (v19 != -1) {
    swift_once();
  }
  uint64_t v20 = type metadata accessor for Logger();
  uint64_t v21 = sub_100010324(v20, (uint64_t)qword_10170EC30);
  swift_bridgeObjectRetain_n();
  id v22 = a2;
  uint64_t v77 = v21;
  long long v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.default.getter();
  int v25 = v24;
  uint64_t v26 = a1;
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v27 = swift_slowAlloc();
    int v65 = v25;
    uint64_t v28 = v27;
    uint64_t v64 = swift_slowAlloc();
    *(void *)&v95[0] = v64;
    *(_DWORD *)uint64_t v28 = 134218754;
    *(void *)&long long v82 = *(void *)(a1 + 16);
    uint64_t v68 = a7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v28 + 12) = 2082;
    uint64_t v67 = a6;
    long long v29 = v23;
    uint64_t v30 = v22;
    id v31 = [v22 clientApp];
    uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v66 = v18;
    unint64_t v34 = v33;

    id v22 = v30;
    *(void *)&long long v82 = sub_1008FA0F0(v32, v34, (uint64_t *)v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v28 + 22) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v35 = Array.description.getter();
    unint64_t v37 = v36;
    swift_bridgeObjectRelease();
    uint64_t v38 = v35;
    uint64_t v18 = v66;
    *(void *)&long long v82 = sub_1008FA0F0(v38, v37, (uint64_t *)v95);
    a7 = v68;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    a6 = v67;
    swift_bridgeObjectRelease();
    *(_WORD *)(v28 + 32) = 1024;
    LODWORD(v82) = v76 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v29, (os_log_type_t)v65, "SubscribeAndFetch location for %ld IDs for clientApp %{public}s ids %s forceKeyRefresh %{BOOL}d", (uint8_t *)v28, 0x26u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    if (sub_100757F90()) {
      goto LABEL_12;
    }
  }
  else
  {

    swift_bridgeObjectRelease_n();
    if (sub_100757F90())
    {
LABEL_12:
      uint64_t v46 = Logger.logObject.getter();
      os_log_type_t v47 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v46, v47))
      {
        uint64_t v48 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v48 = 0;
        _os_log_impl((void *)&_mh_execute_header, v46, v47, "SubscribeAndFetch: secureLocations feature disabled. Not proceeding with subscribe", v48, 2u);
        swift_slowDealloc();
      }

      [v22 subscriptionMode];
      id v49 = objc_allocWithZone((Class)SPSecureLocationsSubscriptionResult);
      sub_10001D4B0(0, (unint64_t *)&qword_10163F378);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      id v51 = [v49 initWithExpiryTime:isa locations:15.0];

      type metadata accessor for SecureLocationsError(0);
      *(void *)&long long v82 = 6;
      sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
      sub_100766750(&qword_10163F370, type metadata accessor for SecureLocationsError);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v52 = *(void **)&v95[0];
      sub_1007596C4(*(uint64_t *)&v95[0], v78, a6, a7, v80, v79);
      swift_release();

      return;
    }
  }
  if (qword_101637080 != -1) {
    swift_once();
  }
  swift_retain();
  OS_dispatch_queue.sync<A>(execute:)();
  swift_release();
  v95[10] = v92;
  v95[11] = v93;
  v95[12] = v94;
  v95[6] = v88;
  v95[7] = v89;
  v95[8] = v90;
  v95[9] = v91;
  v95[2] = v84;
  v95[3] = v85;
  v95[4] = v86;
  v95[5] = v87;
  v95[0] = v82;
  v95[1] = v83;
  sub_100551984((uint64_t)v95);
  if ((BYTE8(v95[0]) & 1) == 0) {
    goto LABEL_12;
  }
  if (*(void *)(v26 + 16))
  {
    uint64_t v39 = v69;
    uint64_t v40 = swift_allocObject();
    *(void *)(v40 + 16) = v26;
    *(void *)(v40 + 24) = v39;
    *(void *)(v40 + 32) = v22;
    *(unsigned char *)(v40 + 40) = v76 & 1;
    *(void *)(v40 + 48) = sub_100768EE4;
    *(void *)(v40 + 56) = v18;
    *(void *)&long long v84 = sub_1007668B4;
    *((void *)&v84 + 1) = v40;
    *(void *)&long long v82 = _NSConcreteStackBlock;
    *((void *)&v82 + 1) = 1107296256;
    *(void *)&long long v83 = sub_1004B5480;
    *((void *)&v83 + 1) = &unk_1015D3D70;
    uint64_t v41 = _Block_copy(&v82);
    swift_bridgeObjectRetain();
    id v42 = v22;
    swift_retain();
    swift_retain();
    uint64_t v43 = v70;
    static DispatchQoS.unspecified.getter();
    unint64_t v81 = _swiftEmptyArrayStorage;
    sub_100766750((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v44 = v72;
    uint64_t v45 = v75;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v41);
    (*(void (**)(char *, uint64_t))(v74 + 8))(v44, v45);
    (*(void (**)(char *, uint64_t))(v71 + 8))(v43, v73);
    swift_release();
    swift_release();
  }
  else
  {
    id v76 = v22;
    BOOL v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v53, v54))
    {
      char v55 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v55 = 0;
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "No findMyIds specified for SubscribeAndFetch - not proceeding", v55, 2u);
      swift_slowDealloc();
    }

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v56 = objc_allocWithZone((Class)NSError);
    NSString v57 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v58 = [v56 initWithDomain:v57 code:0 userInfo:0];

    [v76 subscriptionMode];
    id v59 = objc_allocWithZone((Class)SPSecureLocationsSubscriptionResult);
    sub_10001D4B0(0, (unint64_t *)&qword_10163F378);
    Class v60 = Array._bridgeToObjectiveC()().super.isa;
    id v61 = [v59 initWithExpiryTime:v60 locations:15.0];

    id v62 = v58;
    sub_1007596C4((uint64_t)v58, v78, a6, a7, v80, v79);
    swift_release();
  }
}

void sub_10075A804(uint64_t a1, void *a2, int a3, uint64_t a4, void (*a5)(void *, uint64_t), uint64_t a6, uint64_t a7)
{
  uint64_t v70 = a4;
  int v76 = a3;
  uint64_t v12 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v74 = *(void *)(v12 - 8);
  uint64_t v75 = v12;
  __chkstk_darwin(v12);
  uint64_t v72 = (char *)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = type metadata accessor for DispatchQoS();
  uint64_t v71 = *(void *)(v73 - 8);
  __chkstk_darwin(v73);
  uint64_t v15 = (char *)&v63 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = (void *)swift_allocObject();
  uint64_t v78 = a5;
  void v16[2] = a5;
  v16[3] = a6;
  v16[4] = a7;
  uint64_t v17 = qword_101637070;
  swift_retain();
  swift_retain();
  if (v17 != -1) {
    swift_once();
  }
  uint64_t v18 = type metadata accessor for Logger();
  uint64_t v19 = sub_100010324(v18, (uint64_t)qword_10170EC30);
  swift_bridgeObjectRetain_n();
  id v20 = a2;
  uint64_t v77 = v19;
  uint64_t v21 = Logger.logObject.getter();
  os_log_type_t v22 = static os_log_type_t.default.getter();
  int v23 = v22;
  if (os_log_type_enabled(v21, v22))
  {
    uint64_t v24 = swift_slowAlloc();
    int v66 = v23;
    uint64_t v25 = v24;
    uint64_t v65 = swift_slowAlloc();
    *(void *)&v93[0] = v65;
    *(_DWORD *)uint64_t v25 = 134218754;
    *(void *)&long long v80 = *(void *)(a1 + 16);
    uint64_t v69 = a7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v25 + 12) = 2082;
    id v26 = [v20 clientApp:v25 + 14];
    os_log_t v64 = v21;
    id v27 = v26;
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v67 = v16;
    uint64_t v68 = a6;
    uint64_t v29 = v28;
    unint64_t v31 = v30;

    *(void *)&long long v80 = sub_1008FA0F0(v29, v31, (uint64_t *)v93);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    swift_bridgeObjectRelease();
    *(_WORD *)(v25 + 22) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v32 = Array.description.getter();
    unint64_t v34 = v33;
    swift_bridgeObjectRelease();
    uint64_t v35 = v32;
    uint64_t v16 = v67;
    *(void *)&long long v80 = sub_1008FA0F0(v35, v34, (uint64_t *)v93);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v25 + 32) = 1024;
    LODWORD(v80) = v76 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    os_log_t v36 = v64;
    _os_log_impl((void *)&_mh_execute_header, v64, (os_log_type_t)v66, "SubscribeAndFetch location for %ld IDs for clientApp %{public}s ids %s forceKeyRefresh %{BOOL}d", (uint8_t *)v25, 0x26u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    if (sub_100757F90()) {
      goto LABEL_12;
    }
  }
  else
  {

    swift_bridgeObjectRelease_n();
    if (sub_100757F90())
    {
LABEL_12:
      uint64_t v45 = Logger.logObject.getter();
      os_log_type_t v46 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v45, v46))
      {
        os_log_type_t v47 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)os_log_type_t v47 = 0;
        _os_log_impl((void *)&_mh_execute_header, v45, v46, "SubscribeAndFetch: secureLocations feature disabled. Not proceeding with subscribe", v47, 2u);
        swift_slowDealloc();
      }

      [v20 subscriptionMode];
      id v48 = objc_allocWithZone((Class)SPSecureLocationsSubscriptionResult);
      sub_10001D4B0(0, (unint64_t *)&qword_10163F378);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      id v50 = [v48 initWithExpiryTime:isa locations:15.0];

      type metadata accessor for SecureLocationsError(0);
      *(void *)&long long v80 = 6;
      sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
      sub_100766750(&qword_10163F370, type metadata accessor for SecureLocationsError);
      _BridgedStoredNSError.init(_:userInfo:)();
      id v51 = *(void **)&v93[0];
      sub_10073AC30(v50, *(uint64_t *)&v93[0], v78);
      swift_release();

      return;
    }
  }
  uint64_t v37 = a1;
  if (qword_101637080 != -1) {
    swift_once();
  }
  swift_retain();
  OS_dispatch_queue.sync<A>(execute:)();
  swift_release();
  v93[10] = v90;
  v93[11] = v91;
  v93[12] = v92;
  v93[6] = v86;
  v93[7] = v87;
  v93[8] = v88;
  v93[9] = v89;
  v93[2] = v82;
  v93[3] = v83;
  v93[4] = v84;
  v93[5] = v85;
  v93[0] = v80;
  v93[1] = v81;
  sub_100551984((uint64_t)v93);
  if ((BYTE8(v93[0]) & 1) == 0) {
    goto LABEL_12;
  }
  if (*(void *)(a1 + 16))
  {
    uint64_t v38 = v70;
    uint64_t v39 = swift_allocObject();
    *(void *)(v39 + 16) = v37;
    *(void *)(v39 + 24) = v38;
    *(void *)(v39 + 32) = v20;
    *(unsigned char *)(v39 + 40) = v76 & 1;
    *(void *)(v39 + 48) = sub_100766E8C;
    *(void *)(v39 + 56) = v16;
    *(void *)&long long v82 = sub_1007668B4;
    *((void *)&v82 + 1) = v39;
    *(void *)&long long v80 = _NSConcreteStackBlock;
    *((void *)&v80 + 1) = 1107296256;
    *(void *)&long long v81 = sub_1004B5480;
    *((void *)&v81 + 1) = &unk_1015D2C68;
    uint64_t v40 = v20;
    uint64_t v41 = _Block_copy(&v80);
    swift_bridgeObjectRetain();
    id v42 = v40;
    swift_retain();
    swift_retain();
    static DispatchQoS.unspecified.getter();
    id v79 = _swiftEmptyArrayStorage;
    sub_100766750((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v43 = v72;
    uint64_t v44 = v75;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v41);
    (*(void (**)(char *, uint64_t))(v74 + 8))(v43, v44);
    (*(void (**)(char *, uint64_t))(v71 + 8))(v15, v73);
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v52 = v20;
    BOOL v53 = Logger.logObject.getter();
    os_log_type_t v54 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v53, v54))
    {
      char v55 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)char v55 = 0;
      _os_log_impl((void *)&_mh_execute_header, v53, v54, "No findMyIds specified for SubscribeAndFetch - not proceeding", v55, 2u);
      swift_slowDealloc();
    }

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v56 = objc_allocWithZone((Class)NSError);
    NSString v57 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v58 = [v56 initWithDomain:v57 code:0 userInfo:0];

    [v52 subscriptionMode];
    id v59 = objc_allocWithZone((Class)SPSecureLocationsSubscriptionResult);
    sub_10001D4B0(0, (unint64_t *)&qword_10163F378);
    Class v60 = Array._bridgeToObjectiveC()().super.isa;
    id v61 = [v59 initWithExpiryTime:v60 locations:15.0];

    id v62 = v58;
    sub_10073AC30(v61, (uint64_t)v58, v78);
    swift_release();
  }
}

void sub_10075B1C8(uint64_t a1, void *a2, int a3, uint64_t a4, uint64_t a5)
{
  int v68 = a3;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v67 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  int v66 = (char *)&v58 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v65 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  os_log_t v64 = (char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = qword_101637070;
  swift_retain();
  if (v13 != -1) {
    swift_once();
  }
  uint64_t v14 = type metadata accessor for Logger();
  uint64_t v15 = sub_100010324(v14, (uint64_t)qword_10170EC30);
  swift_bridgeObjectRetain_n();
  id v16 = a2;
  uint64_t v69 = v15;
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  int v19 = v18;
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v20 = swift_slowAlloc();
    int v61 = v19;
    uint64_t v21 = v20;
    uint64_t v60 = swift_slowAlloc();
    *(void *)&v84[0] = v60;
    *(_DWORD *)uint64_t v21 = 134218754;
    *(void *)&long long v71 = *(void *)(a1 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v21 + 12) = 2082;
    id v22 = [v16 clientApp:v21 + 14];
    uint64_t v63 = a5;
    id v23 = v22;
    uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    uint64_t v62 = a4;
    uint64_t v25 = v16;
    uint64_t v26 = v24;
    os_log_t v59 = v17;
    uint64_t v27 = v11;
    uint64_t v28 = v9;
    unint64_t v30 = v29;

    *(void *)&long long v71 = sub_1008FA0F0(v26, v30, (uint64_t *)v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    uint64_t v9 = v28;
    uint64_t v11 = v27;
    swift_bridgeObjectRelease();
    *(_WORD *)(v21 + 22) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v31 = Array.description.getter();
    unint64_t v33 = v32;
    swift_bridgeObjectRelease();
    uint64_t v34 = v31;
    id v16 = v25;
    a4 = v62;
    *(void *)&long long v71 = sub_1008FA0F0(v34, v33, (uint64_t *)v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    a5 = v63;
    swift_bridgeObjectRelease();
    *(_WORD *)(v21 + 32) = 1024;
    LODWORD(v71) = v68 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    os_log_t v35 = v59;
    _os_log_impl((void *)&_mh_execute_header, v59, (os_log_type_t)v61, "SubscribeAndFetch location for %ld IDs for clientApp %{public}s ids %s forceKeyRefresh %{BOOL}d", (uint8_t *)v21, 0x26u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    if (sub_100757F90()) {
      goto LABEL_12;
    }
  }
  else
  {

    swift_bridgeObjectRelease_n();
    if (sub_100757F90())
    {
LABEL_12:
      uint64_t v41 = Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v41, v42))
      {
        uint64_t v43 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v43 = 0;
        _os_log_impl((void *)&_mh_execute_header, v41, v42, "SubscribeAndFetch: secureLocations feature disabled. Not proceeding with subscribe", v43, 2u);
        swift_slowDealloc();
      }

      [v16 subscriptionMode];
      id v44 = objc_allocWithZone((Class)SPSecureLocationsSubscriptionResult);
      sub_10001D4B0(0, (unint64_t *)&qword_10163F378);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      id v46 = [v44 initWithExpiryTime:isa locations:15.0];

      type metadata accessor for SecureLocationsError(0);
      *(void *)&long long v71 = 6;
      sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
      sub_100766750(&qword_10163F370, type metadata accessor for SecureLocationsError);
      _BridgedStoredNSError.init(_:userInfo:)();
      os_log_type_t v47 = *(void **)&v84[0];
      Transaction.capture()();
      swift_release();

      return;
    }
  }
  if (qword_101637080 != -1) {
    swift_once();
  }
  swift_retain();
  OS_dispatch_queue.sync<A>(execute:)();
  swift_release();
  v84[10] = v81;
  v84[11] = v82;
  v84[12] = v83;
  v84[6] = v77;
  v84[7] = v78;
  v84[8] = v79;
  v84[9] = v80;
  v84[2] = v73;
  v84[3] = v74;
  v84[4] = v75;
  v84[5] = v76;
  v84[0] = v71;
  v84[1] = v72;
  sub_100551984((uint64_t)v84);
  if ((BYTE8(v84[0]) & 1) == 0) {
    goto LABEL_12;
  }
  if (*(void *)(a1 + 16))
  {
    uint64_t v69 = *(void *)(a4 + 296);
    uint64_t v36 = swift_allocObject();
    *(void *)(v36 + 16) = a1;
    *(void *)(v36 + 24) = a4;
    *(void *)(v36 + 32) = v16;
    *(unsigned char *)(v36 + 40) = v68 & 1;
    *(void *)(v36 + 48) = j___s10FindMyBase11TransactionC7captureyyF;
    *(void *)(v36 + 56) = a5;
    *(void *)&long long v73 = sub_1007668B4;
    *((void *)&v73 + 1) = v36;
    *(void *)&long long v71 = _NSConcreteStackBlock;
    *((void *)&v71 + 1) = 1107296256;
    *(void *)&long long v72 = sub_1004B5480;
    *((void *)&v72 + 1) = &unk_1015D2880;
    uint64_t v37 = _Block_copy(&v71);
    swift_bridgeObjectRetain();
    id v38 = v16;
    swift_retain();
    swift_retain();
    uint64_t v39 = v64;
    static DispatchQoS.unspecified.getter();
    uint64_t v70 = _swiftEmptyArrayStorage;
    sub_100766750((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
    sub_10000588C((uint64_t *)&unk_10163F350);
    sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
    uint64_t v40 = v66;
    dispatch thunk of SetAlgebra.init<A>(_:)();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v37);
    (*(void (**)(char *, uint64_t))(v67 + 8))(v40, v9);
    (*(void (**)(char *, uint64_t))(v65 + 8))(v39, v11);
    swift_release();
    swift_release();
  }
  else
  {
    id v48 = Logger.logObject.getter();
    os_log_type_t v49 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v48, v49))
    {
      id v50 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)id v50 = 0;
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "No findMyIds specified for SubscribeAndFetch - not proceeding", v50, 2u);
      swift_slowDealloc();
    }

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v51 = objc_allocWithZone((Class)NSError);
    NSString v52 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v53 = [v51 initWithDomain:v52 code:0 userInfo:0];

    [v16 subscriptionMode];
    id v54 = objc_allocWithZone((Class)SPSecureLocationsSubscriptionResult);
    sub_10001D4B0(0, (unint64_t *)&qword_10163F378);
    Class v55 = Array._bridgeToObjectiveC()().super.isa;
    id v56 = [v54 initWithExpiryTime:v55 locations:15.0];

    id v57 = v53;
    Transaction.capture()();
    swift_release();
  }
}

uint64_t sub_10075BB50(uint64_t a1, id a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  id v14 = [a2 clientApp];
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v17 = v16;

  if (v15 == 0xD000000000000017 && v17 == 0x8000000101402C20)
  {
    swift_bridgeObjectRelease();
    char v18 = 1;
  }
  else
  {
    char v18 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
  }
  uint64_t v19 = swift_allocObject();
  char v20 = v18 & 1;
  *(unsigned char *)(v19 + 16) = v20;
  *(void *)(v19 + 24) = a3;
  *(void *)(v19 + 32) = a4;
  *(void *)(v19 + 40) = a2;
  *(void *)(v19 + 48) = a5;
  *(void *)(v19 + 56) = a6;
  *(void *)(v19 + 64) = a7;
  swift_retain();
  swift_retain();
  id v21 = a2;
  swift_retain();
  swift_retain();
  sub_100604694(a1, v20, (uint64_t)sub_1007688E8, v19);

  return swift_release();
}

uint64_t sub_10075BCC4(uint64_t a1, int a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v110 = a7;
  uint64_t v111 = a8;
  uint64_t v109 = a6;
  id v106 = a4;
  uint64_t v107 = a5;
  int v133 = a2;
  uint64_t v112 = a1;
  uint64_t v108 = a9;
  uint64_t v10 = type metadata accessor for SecureLocation();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v114 = (uint64_t *)((char *)&v104 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v140 = (uint64_t)&v104 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v18 = __chkstk_darwin(v17);
  char v20 = (char *)&v104 - v19;
  uint64_t v21 = __chkstk_darwin(v18);
  Swift::Int v116 = (char *)&v104 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v27 = (double *)((char *)&v104 - v26);
  uint64_t v121 = a3;
  if (*(void *)(*(void *)(a3 + 104) + 16))
  {
    long long v139 = v25;
    os_log_type_t v128 = (void *)v24;
    uint64_t v113 = v23;
    if (qword_101637080 != -1) {
      swift_once();
    }
    swift_retain();
    OS_dispatch_queue.sync<A>(execute:)();
    swift_release();
    long long v167 = v154;
    long long v168 = v155;
    long long v169 = v156;
    long long v163 = v150;
    long long v164 = v151;
    long long v165 = v152;
    long long v166 = v153;
    long long v159 = v146;
    long long v160 = v147;
    long long v161 = v148;
    long long v162 = v149;
    long long v157 = v144;
    long long v158 = v145;
    sub_100551984((uint64_t)&v157);
    uint64_t v120 = *(void *)(v112 + 16);
    if (v120)
    {
      double v28 = *(double *)&v158;
      unint64_t v119 = (*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
      unint64_t v118 = v112 + v119;
      uint64_t v29 = *(void *)(v11 + 72);
      long long v105 = &v142;
      swift_bridgeObjectRetain();
      uint64_t v30 = 0;
      long long v124 = _swiftEmptyArrayStorage;
      *(void *)&long long v31 = 136315906;
      long long v127 = v31;
      uint64_t v126 = (char *)&type metadata for Any + 8;
      *(void *)&long long v31 = 136315650;
      long long v125 = v31;
      *(void *)&long long v31 = 136315394;
      long long v104 = v31;
      uint64_t v32 = (uint64_t)v116;
      long long v131 = v27;
      unint64_t v115 = v20;
      uint64_t v117 = v29;
      while (1)
      {
        uint64_t v123 = v30;
        sub_100768C34(v118 + v29 * v30, (uint64_t)v27, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        sub_100768C34((uint64_t)v27, v32, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        uint64_t v33 = *(void *)(*(void *)(v121 + 104) + 16);
        uint64_t v34 = (uint64_t)v139;
        if (!v33) {
          goto LABEL_49;
        }
        uint64_t v122 = swift_bridgeObjectRetain();
        os_log_t v35 = (unint64_t *)(v122 + 56);
        while (1)
        {
          uint64_t v37 = *(v35 - 2);
          uint64_t v135 = *(v35 - 1);
          unint64_t v38 = *v35;
          double v39 = *((double *)v35 + 3);
          double v40 = *((double *)v35 + 4);
          unint64_t v41 = v35[5];
          uint64_t v42 = v35[6];
          unint64_t v43 = v35[7];
          uint64_t v137 = v33;
          uint64_t v138 = v42;
          unint64_t v44 = v35[2];
          uint64_t v45 = qword_101637070;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v45 != -1) {
            swift_once();
          }
          uint64_t v46 = type metadata accessor for Logger();
          uint64_t v47 = sub_100010324(v46, (uint64_t)qword_10170EC30);
          id v48 = v27;
          sub_100768C34((uint64_t)v27, v34, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
          uint64_t v134 = v47;
          os_log_type_t v49 = Logger.logObject.getter();
          id v50 = v44;
          os_log_type_t v51 = static os_log_type_t.info.getter();
          os_log_type_t v136 = v49;
          if (os_log_type_enabled(v49, v51))
          {
            uint64_t v52 = swift_slowAlloc();
            id v132 = (id)swift_slowAlloc();
            uint64_t v141 = (uint64_t)v132;
            *(_DWORD *)uint64_t v52 = v127;
            swift_bridgeObjectRetain();
            *(void *)(v52 + 4) = sub_1008FA0F0(v135, v38, &v141);
            swift_bridgeObjectRelease();
            *(_WORD *)(v52 + 12) = 2080;
            if (v43) {
              uint64_t v53 = v138;
            }
            else {
              uint64_t v53 = 1818848800;
            }
            if (v43) {
              unint64_t v54 = v43;
            }
            else {
              unint64_t v54 = 0xE400000000000000;
            }
            swift_bridgeObjectRetain();
            *(void *)(v52 + 14) = sub_1008FA0F0(v53, v54, &v141);
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            *(_WORD *)(v52 + 22) = 2080;
            uint64_t v55 = *v139;
            unint64_t v56 = v139[1];
            swift_bridgeObjectRetain();
            uint64_t v57 = v55;
            uint64_t v34 = (uint64_t)v139;
            *(void *)(v52 + 24) = sub_1008FA0F0(v57, v56, &v141);
            swift_bridgeObjectRelease();
            sub_100768C9C(v34, (uint64_t (*)(void))type metadata accessor for SecureLocation);
            *(_WORD *)(v52 + 32) = 2048;
            *(void *)(v52 + 34) = v41;
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            uint64_t v58 = v136;
            _os_log_impl((void *)&_mh_execute_header, v136, v51, "LabelledLocations Checking label %s %s %s %f", (uint8_t *)v52, 0x2Au);
            swift_arrayDestroy();
            swift_slowDealloc();
            uint64_t v27 = v131;
            swift_slowDealloc();

            os_log_t v59 = v50;
          }
          else
          {
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            sub_100768C9C(v34, (uint64_t (*)(void))type metadata accessor for SecureLocation);

            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            os_log_t v59 = v50;
            uint64_t v27 = v48;
          }
          sub_100768C34((uint64_t)v27, v140, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          if (!v43 && (v133 & 1) != 0)
          {
            sub_100768C9C(v140, (uint64_t (*)(void))type metadata accessor for SecureLocation);
            goto LABEL_25;
          }
          uint64_t v70 = v128;
          sub_100768C34(v140, (uint64_t)v128, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          if (v133)
          {
            sub_100768C9C((uint64_t)v70, (uint64_t (*)(void))type metadata accessor for SecureLocation);
            sub_100768C9C(v140, (uint64_t (*)(void))type metadata accessor for SecureLocation);
            swift_bridgeObjectRelease();
            goto LABEL_9;
          }
          uint64_t v71 = v140;
          os_log_type_t v136 = v59;
          if (!v43)
          {
            swift_bridgeObjectRetain();
            sub_100768C9C((uint64_t)v70, (uint64_t (*)(void))type metadata accessor for SecureLocation);
            sub_100768C9C(v71, (uint64_t (*)(void))type metadata accessor for SecureLocation);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_9;
          }
          if (v138 == *v70 && v43 == v70[1]) {
            break;
          }
          char v72 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRetain();
          sub_100768C9C((uint64_t)v70, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          sub_100768C9C(v71, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          swift_bridgeObjectRelease();
          if (v72) {
            goto LABEL_25;
          }
          swift_bridgeObjectRelease();
          uint64_t v34 = (uint64_t)v139;
LABEL_9:
          uint64_t v36 = v137;
LABEL_10:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v35 += 11;
          uint64_t v33 = v36 - 1;
          if (!v33)
          {
            swift_bridgeObjectRelease();
            char v20 = v115;
            uint64_t v32 = (uint64_t)v116;
            goto LABEL_49;
          }
        }
        swift_bridgeObjectRetain();
        sub_100768C9C((uint64_t)v70, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        sub_100768C9C(v71, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        swift_bridgeObjectRelease();
LABEL_25:
        uint64_t v60 = [objc_allocWithZone((Class)CLLocation) initWithLatitude:v39 longitude:v40];
        id v61 = [objc_allocWithZone((Class)CLLocation) initWithLatitude:v27[3] longitude:v27[2]];
        os_log_type_t v136 = v60;
        id v132 = v61;
        -[NSObject distanceFromLocation:](v60, "distanceFromLocation:");
        double v63 = v62;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        os_log_t v64 = Logger.logObject.getter();
        os_log_type_t v65 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v64, v65))
        {
          uint64_t v66 = swift_slowAlloc();
          uint64_t v129 = v37;
          uint64_t v67 = v66;
          uint64_t v130 = swift_slowAlloc();
          uint64_t v141 = v130;
          *(_DWORD *)uint64_t v67 = v125;
          swift_bridgeObjectRetain();
          *(void *)(v67 + 4) = sub_1008FA0F0(v135, v38, &v141);
          swift_bridgeObjectRelease();
          *(_WORD *)(v67 + 12) = 2080;
          if (v43) {
            uint64_t v68 = v138;
          }
          else {
            uint64_t v68 = 0x206C696E20;
          }
          if (v43) {
            unint64_t v69 = v43;
          }
          else {
            unint64_t v69 = 0xE500000000000000;
          }
          swift_bridgeObjectRetain();
          *(void *)(v67 + 14) = sub_1008FA0F0(v68, v69, &v141);
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          *(_WORD *)(v67 + 22) = 2048;
          *(double *)(v67 + 24) = v63;
          _os_log_impl((void *)&_mh_execute_header, v64, v65, "LabelledLocations %s %s Label Distance %f", (uint8_t *)v67, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }
        uint64_t v34 = (uint64_t)v139;
        uint64_t v27 = v131;
        uint64_t v36 = v137;
        if (v63 > v28)
        {

          swift_bridgeObjectRelease();
          goto LABEL_10;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v32 = (uint64_t)v116;
        swift_beginAccess();
        uint64_t v73 = v113;
        long long v74 = (void *)(v32 + *(int *)(v113 + 64));
        *long long v74 = v135;
        v74[1] = v38;
        swift_bridgeObjectRelease();
        long long v75 = v114;
        sub_100768C34((uint64_t)v27, (uint64_t)v114, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        long long v76 = Logger.logObject.getter();
        os_log_type_t v77 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v76, v77))
        {
          uint64_t v78 = swift_slowAlloc();
          uint64_t v138 = swift_slowAlloc();
          v143[0] = v138;
          *(_DWORD *)uint64_t v78 = v104;
          long long v79 = (uint64_t *)&v116[*(int *)(v73 + 64)];
          uint64_t v80 = v79[1];
          uint64_t v141 = *v79;
          uint64_t v142 = v80;
          swift_bridgeObjectRetain();
          sub_10000588C(&qword_101644320);
          uint64_t v81 = String.init<A>(describing:)();
          uint64_t v141 = sub_1008FA0F0(v81, v82, v143);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v78 + 12) = 2080;
          uint64_t v83 = *v75;
          unint64_t v84 = v75[1];
          swift_bridgeObjectRetain();
          uint64_t v141 = sub_1008FA0F0(v83, v84, v143);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_100768C9C((uint64_t)v75, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          _os_log_impl((void *)&_mh_execute_header, v76, v77, "LabelledLocations Adding label %s to location %s", (uint8_t *)v78, 0x16u);
          swift_arrayDestroy();
          uint64_t v32 = (uint64_t)v116;
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_100768C9C((uint64_t)v75, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        }

        char v20 = v115;
LABEL_49:
        swift_beginAccess();
        sub_100768C34(v32, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        unint64_t v85 = (unint64_t)v124;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v85 = sub_100A712C4(0, *(void *)(v85 + 16) + 1, 1, v85);
        }
        unint64_t v87 = *(void *)(v85 + 16);
        unint64_t v86 = *(void *)(v85 + 24);
        long long v124 = (void *)v85;
        if (v87 >= v86 >> 1) {
          long long v124 = (void *)sub_100A712C4(v86 > 1, v87 + 1, 1, (unint64_t)v124);
        }
        long long v88 = v124;
        uint64_t v89 = v123 + 1;
        v124[2] = v87 + 1;
        uint64_t v90 = (uint64_t)v88 + v119 + v87 * v117;
        uint64_t v29 = v117;
        sub_100767F00((uint64_t)v20, v90, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        sub_100768C9C((uint64_t)v27, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        uint64_t v30 = v89;
        sub_100768C9C(v32, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        if (v89 == v120)
        {
          swift_bridgeObjectRelease();
          long long v91 = v124;
          goto LABEL_63;
        }
      }
    }
    long long v91 = _swiftEmptyArrayStorage;
LABEL_63:
    sub_10075BB50((uint64_t)v91, v106, v107, v109, v110, v111, v108);
    return swift_bridgeObjectRelease();
  }
  else
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v92 = type metadata accessor for Logger();
    sub_100010324(v92, (uint64_t)qword_10170EC30);
    long long v93 = Logger.logObject.getter();
    os_log_type_t v94 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v93, v94))
    {
      double v95 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)double v95 = 0;
      _os_log_impl((void *)&_mh_execute_header, v93, v94, "LabelledLocations - No labels - nothing to resolve", v95, 2u);
      swift_slowDealloc();
    }

    uint64_t v97 = v111;
    uint64_t v96 = v112;
    id v98 = v106;
    uint64_t v99 = v107;
    uint64_t v100 = v109;
    uint64_t v101 = v110;
    uint64_t v102 = v108;
    return sub_10075BB50(v96, v98, v99, v100, v101, v97, v102);
  }
}

uint64_t sub_10075CCAC(uint64_t a1, char a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v16 = (void *)swift_allocObject();
  void v16[2] = a4;
  v16[3] = a5;
  v16[4] = a6;
  v16[5] = a7;
  uint64_t v33 = a7;
  v16[6] = a8;
  v16[7] = a9;
  uint64_t v17 = self;
  id v32 = a4;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  id v18 = [v17 standardUserDefaults];
  NSString v19 = String._bridgeToObjectiveC()();
  unsigned int v20 = [v18 BOOLForKey:v19];

  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  sub_100010324(v21, (uint64_t)qword_10170EC30);
  uint64_t v22 = Logger.logObject.getter();
  os_log_type_t v23 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v31 = a5;
    uint64_t v24 = a6;
    uint64_t v25 = a8;
    uint64_t v26 = a1;
    uint64_t v27 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v27 = 67109120;
    LODWORD(v35) = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "LabelledLocations Resolve Label isfetchdone %{BOOL}d", v27, 8u);
    a1 = v26;
    a8 = v25;
    a6 = v24;
    a5 = v31;
    swift_slowDealloc();
  }

  if (v20)
  {
    if (!*(void *)(*(void *)(a3 + 104) + 16))
    {
      os_log_t v35 = sub_100B6DCA8();
      swift_bridgeObjectRetain();
      sub_10072C794((uint64_t *)&v35);
      swift_bridgeObjectRelease();
      *(void *)(a3 + 104) = v35;
      swift_bridgeObjectRelease();
    }
    id v28 = v32;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    sub_10075BCC4(a1, a2 & 1, a3, v28, a5, a6, v33, a8, a9);
    swift_release();

    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v29 = swift_allocObject();
    *(void *)(v29 + 16) = a3;
    *(void *)(v29 + 24) = a1;
    *(unsigned char *)(v29 + 32) = a2 & 1;
    *(void *)(v29 + 40) = sub_100768804;
    *(void *)(v29 + 48) = v16;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    sub_10074CFAC((uint64_t)sub_1007677E8, v29);
  }
  swift_release();
  return swift_release();
}

void sub_10075D054()
{
  if (qword_101636CA0 != -1) {
    swift_once();
  }
  uint64_t v0 = type metadata accessor for Logger();
  sub_100010324(v0, (uint64_t)qword_10164CC28);
  uint64_t v1 = Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    int v3 = (uint8_t *)swift_slowAlloc();
    aBlock[0] = swift_slowAlloc();
    *(_DWORD *)int v3 = 136446210;
    sub_1008FA0F0(0xD000000000000018, 0x8000000101406450, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "%{public}s", v3, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  id v4 = [self sharedInstance];
  aBlock[4] = (uint64_t)sub_100745D5C;
  uint64_t aBlock[5] = 0;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = (uint64_t)sub_100769474;
  aBlock[3] = (uint64_t)&unk_1015D3320;
  uint64_t v5 = _Block_copy(aBlock);
  [v4 stopLocationMonitoring:v5];
  _Block_release(v5);
}

void sub_10075D270(uint64_t a1, int a2, uint64_t a3, void (**a4)(void, void))
{
  int v99 = a2;
  uint64_t v7 = sub_10000588C((uint64_t *)&unk_101649E20);
  __chkstk_darwin(v7 - 8);
  os_log_type_t v94 = (char *)&v92 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v101 = type metadata accessor for SecureLocationsSubmitEndpoint(0);
  uint64_t v9 = __chkstk_darwin(v101);
  long long v103 = (char *)&v92 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v93 = (uint64_t)&v92 - v12;
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v92 - v13;
  uint64_t v102 = type metadata accessor for SecureLocation();
  uint64_t v15 = __chkstk_darwin(v102);
  uint64_t v17 = (char *)&v92 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  NSString v19 = (char *)&v92 - v18;
  uint64_t v20 = swift_allocObject();
  *(void *)(v20 + 16) = a4;
  _Block_copy(a4);
  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v97 = a3;
  uint64_t v21 = type metadata accessor for Logger();
  uint64_t v22 = sub_100010324(v21, (uint64_t)qword_10170EC30);
  sub_100768C34(a1, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for SecureLocation);
  sub_100768C34(a1, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for SecureLocation);
  uint64_t v100 = v22;
  os_log_type_t v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = swift_slowAlloc();
    id v98 = v14;
    uint64_t v26 = v25;
    uint64_t v27 = swift_slowAlloc();
    double v95 = a4;
    uint64_t v105 = v27;
    *(_DWORD *)uint64_t v26 = 136446466;
    unint64_t v28 = sub_100E90398(*(void *)&v19[*(int *)(v102 + 60)]);
    uint64_t v96 = a1;
    uint64_t v104 = sub_1008FA0F0(v28, v29, &v105);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100768C9C((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for SecureLocation);
    *(_WORD *)(v26 + 12) = 2080;
    uint64_t v30 = sub_100E8F520();
    uint64_t v104 = sub_1008FA0F0(v30, v31, &v105);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    a1 = v96;
    sub_100768C9C((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for SecureLocation);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "publishLocation with reason %{public}s location: %s", (uint8_t *)v26, 0x16u);
    swift_arrayDestroy();
    a4 = v95;
    swift_slowDealloc();
    uint64_t v14 = v98;
    swift_slowDealloc();
  }
  else
  {
    sub_100768C9C((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for SecureLocation);
    sub_100768C9C((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for SecureLocation);
  }

  uint64_t v32 = (uint64_t)v103;
  uint64_t v33 = v101;
  if (qword_101637080 != -1) {
    swift_once();
  }
  swift_retain();
  char v34 = sub_100D0C0B0();
  swift_release();
  if (v34 & 1) != 0 || (v99)
  {
    if (*(void *)(a1 + *(int *)(v102 + 60)) == 8)
    {
      uint64_t v43 = v97;
      if (*(void *)(v97 + 344))
      {
        swift_retain();
        DispatchTimer.cancel()();
        swift_release();
        *(void *)(v43 + 344) = 0;
        swift_release();
      }
      sub_101082988(a1);
      a4[2](a4, 0);
    }
    else
    {
      uint64_t v44 = enum case for FMNAccountType.searchParty(_:);
      uint64_t v45 = type metadata accessor for FMNAccountType();
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v45 - 8) + 104))(v14, v44, v45);
      sub_10033E420((uint64_t)&v14[*(int *)(v33 + 20)]);
      uint64_t v46 = v93;
      sub_100768C34((uint64_t)v14, v93, type metadata accessor for SecureLocationsSubmitEndpoint);
      uint64_t v47 = Logger.logObject.getter();
      os_log_type_t v48 = static os_log_type_t.default.getter();
      BOOL v49 = os_log_type_enabled(v47, v48);
      uint64_t v96 = a1;
      if (v49)
      {
        double v95 = a4;
        uint64_t v50 = swift_slowAlloc();
        id v98 = v14;
        os_log_type_t v51 = (uint8_t *)v50;
        uint64_t v105 = swift_slowAlloc();
        *(_DWORD *)os_log_type_t v51 = 136315138;
        sub_100768C34(v46, v32, type metadata accessor for SecureLocationsSubmitEndpoint);
        uint64_t v52 = String.init<A>(describing:)();
        uint64_t v104 = sub_1008FA0F0(v52, v53, &v105);
        a4 = v95;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v32 = (uint64_t)v103;
        swift_bridgeObjectRelease();
        sub_100768C9C(v46, type metadata accessor for SecureLocationsSubmitEndpoint);
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "SubmitLocation endpoint %s", v51, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        uint64_t v14 = v98;
        swift_slowDealloc();
      }
      else
      {
        sub_100768C9C(v46, type metadata accessor for SecureLocationsSubmitEndpoint);
      }

      type metadata accessor for SearchPartyURLSessionFactory(0);
      swift_allocObject();
      uint64_t v54 = type metadata accessor for FMNMockingPreferences();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56))(v94, 1, 1, v54);
      uint64_t v55 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)();
      type metadata accessor for ServerInteractionController(0);
      uint64_t v56 = swift_allocObject();
      sub_100768C34((uint64_t)v14, v32, type metadata accessor for SecureLocationsSubmitEndpoint);
      uint64_t v57 = sub_1004A60A0(v32, v55, v56);
      id v58 = [self currentDevice];
      if (v58
        && (os_log_t v59 = v58,
            id v60 = [v58 uniqueDeviceIdentifier],
            v59,
            v60))
      {
        id v98 = v14;
        uint64_t v61 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v63 = v62;

        uint64_t v64 = v97;
        sub_10000588C(&qword_101644320);
        OS_dispatch_queue.sync<A>(execute:)();
        uint64_t v65 = v106;
        if (v106)
        {
          long long v103 = 0;
          uint64_t v66 = v20;
          uint64_t v101 = v105;
          uint64_t v67 = swift_allocBox();
          unint64_t v69 = (void *)v68;
          uint64_t v70 = v57;
          uint64_t v71 = v96;
          sub_100768C34(v96, v68, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          void *v69 = v61;
          v69[1] = v63;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          uint64_t v72 = type metadata accessor for Transaction();
          __chkstk_darwin(v72);
          *(&v92 - 10) = v64;
          *(&v92 - 9) = v67;
          *(&v92 - 8) = (uint64_t)sub_1001E06E0;
          *(&v92 - 7) = v66;
          uint64_t v73 = v101;
          *(&v92 - 6) = v71;
          *(&v92 - 5) = v73;
          *(&v92 - 4) = v65;
          *(&v92 - 3) = v61;
          *(&v92 - 2) = v63;
          *(&v92 - 1) = v70;
          static Transaction.named<A>(_:with:)();
          swift_bridgeObjectRelease();
          sub_100768C9C((uint64_t)v98, type metadata accessor for SecureLocationsSubmitEndpoint);
          swift_release();
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          return;
        }
        swift_bridgeObjectRelease();
        unint64_t v84 = Logger.logObject.getter();
        os_log_type_t v85 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v84, v85))
        {
          unint64_t v86 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v86 = 0;
          _os_log_impl((void *)&_mh_execute_header, v84, v85, "No APS token. Not proceeding", v86, 2u);
          swift_slowDealloc();
        }

        static String._unconditionallyBridgeFromObjectiveC(_:)();
        id v87 = objc_allocWithZone((Class)NSError);
        NSString v88 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v89 = [v87 initWithDomain:v88 code:13 userInfo:0];

        id v90 = v89;
        long long v91 = (void *)_convertErrorToNSError(_:)();
        ((void (**)(void, void *))a4)[2](a4, v91);

        swift_release();
        uint64_t v83 = (uint64_t)v98;
      }
      else
      {
        long long v74 = v14;
        long long v75 = Logger.logObject.getter();
        os_log_type_t v76 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v75, v76))
        {
          os_log_type_t v77 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)os_log_type_t v77 = 0;
          _os_log_impl((void *)&_mh_execute_header, v75, v76, "Unable to get device identifier for server SubscribeAndFetch", v77, 2u);
          swift_slowDealloc();
        }

        static String._unconditionallyBridgeFromObjectiveC(_:)();
        id v78 = objc_allocWithZone((Class)NSError);
        NSString v79 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v80 = [v78 initWithDomain:v79 code:0 userInfo:0];

        id v81 = v80;
        unint64_t v82 = (void *)_convertErrorToNSError(_:)();
        ((void (**)(void, void *))a4)[2](a4, v82);

        swift_release();
        uint64_t v83 = (uint64_t)v74;
      }
      sub_100768C9C(v83, type metadata accessor for SecureLocationsSubmitEndpoint);
    }
    swift_release();
  }
  else
  {
    os_log_t v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Not a location publishing device. Not publishing location", v37, 2u);
      swift_slowDealloc();
    }

    sub_10075D054();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v38 = objc_allocWithZone((Class)NSError);
    NSString v39 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v40 = [v38 initWithDomain:v39 code:12 userInfo:0];

    id v41 = v40;
    uint64_t v42 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void *))a4)[2](a4, v42);
    swift_release();
  }
}

void sub_10075DF38(uint64_t a1, int a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t v106 = a4;
  int v129 = a2;
  uint64_t v108 = a1;
  uint64_t v7 = type metadata accessor for SecureLocation();
  uint64_t v107 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (uint64_t *)((char *)&v102 - v10);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v102 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  os_log_type_t v136 = (uint64_t *)((char *)&v102 - v16);
  uint64_t v17 = __chkstk_darwin(v15);
  NSString v19 = (char *)&v102 - v18;
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v25 = (char *)&v102 - v24;
  uint64_t v117 = a3;
  if (*(void *)(*(void *)(a3 + 104) + 16))
  {
    uint64_t v113 = v23;
    uint64_t v109 = (uint64_t *)v22;
    uint64_t v110 = v21;
    _Block_copy(a5);
    long long v103 = a5;
    _Block_copy(a5);
    if (qword_101637080 != -1) {
      swift_once();
    }
    swift_retain();
    OS_dispatch_queue.sync<A>(execute:)();
    swift_release();
    long long v164 = v151;
    long long v165 = v152;
    long long v166 = v153;
    long long v160 = v147;
    long long v161 = v148;
    long long v162 = v149;
    long long v163 = v150;
    long long v156 = v143;
    long long v157 = v144;
    long long v158 = v145;
    long long v159 = v146;
    long long v154 = v141;
    long long v155 = v142;
    sub_100551984((uint64_t)&v154);
    uint64_t v116 = *(void *)(v108 + 16);
    if (v116)
    {
      double v26 = *(double *)&v155;
      unint64_t v115 = (*(unsigned __int8 *)(v107 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v107 + 80);
      uint64_t v114 = v108 + v115;
      uint64_t v27 = *(void *)(v107 + 72);
      uint64_t v105 = &v139;
      swift_bridgeObjectRetain();
      uint64_t v28 = 0;
      uint64_t v29 = (uint64_t)v25;
      uint64_t v30 = _swiftEmptyArrayStorage;
      *(void *)&long long v31 = 136315906;
      long long v123 = v31;
      uint64_t v122 = (char *)&type metadata for Any + 8;
      *(void *)&long long v31 = 136315650;
      long long v121 = v31;
      *(void *)&long long v31 = 136315394;
      long long v104 = v31;
      long long v125 = v11;
      uint64_t v126 = v14;
      uint64_t v32 = v113;
      uint64_t v33 = (uint64_t)v19;
      uint64_t v111 = v27;
      uint64_t v112 = v19;
      uint64_t v131 = v29;
      while (1)
      {
        uint64_t v120 = v28;
        sub_100768C34(v114 + v27 * v28, v29, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        sub_100768C34(v29, v32, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        uint64_t v34 = *(void *)(v117 + 104);
        uint64_t v35 = (uint64_t)v136;
        if (!*(void *)(v34 + 16)) {
          goto LABEL_48;
        }
        uint64_t v133 = *(void *)(v34 + 16);
        unint64_t v119 = v30;
        uint64_t v118 = swift_bridgeObjectRetain();
        os_log_type_t v36 = (unint64_t *)(v118 + 56);
        uint64_t v37 = v131;
        while (1)
        {
          id v38 = v11;
          uint64_t v39 = *(v36 - 2);
          uint64_t v132 = *(v36 - 1);
          unint64_t v40 = *v36;
          double v41 = *((double *)v36 + 3);
          double v42 = *((double *)v36 + 4);
          unint64_t v43 = v36[5];
          unint64_t v44 = v36[7];
          uint64_t v134 = v36[6];
          unint64_t v45 = v36[2];
          uint64_t v46 = qword_101637070;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v46 != -1) {
            swift_once();
          }
          uint64_t v47 = type metadata accessor for Logger();
          uint64_t v48 = sub_100010324(v47, (uint64_t)qword_10170EC30);
          sub_100768C34(v37, v35, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
          uint64_t v130 = v48;
          BOOL v49 = Logger.logObject.getter();
          os_log_type_t v50 = static os_log_type_t.info.getter();
          BOOL v51 = os_log_type_enabled(v49, v50);
          uint64_t v137 = v39;
          if (v51)
          {
            uint64_t v52 = swift_slowAlloc();
            id v128 = (id)swift_slowAlloc();
            uint64_t v138 = (uint64_t)v128;
            *(_DWORD *)uint64_t v52 = v123;
            swift_bridgeObjectRetain();
            *(void *)(v52 + 4) = sub_1008FA0F0(v132, v40, &v138);
            swift_bridgeObjectRelease();
            *(_WORD *)(v52 + 12) = 2080;
            long long v127 = v49;
            if (v44) {
              uint64_t v53 = v134;
            }
            else {
              uint64_t v53 = 1818848800;
            }
            if (v44) {
              unint64_t v54 = v44;
            }
            else {
              unint64_t v54 = 0xE400000000000000;
            }
            swift_bridgeObjectRetain();
            *(void *)(v52 + 14) = sub_1008FA0F0(v53, v54, &v138);
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            *(_WORD *)(v52 + 22) = 2080;
            uint64_t v55 = *v136;
            unint64_t v56 = v136[1];
            swift_bridgeObjectRetain();
            uint64_t v57 = v55;
            uint64_t v35 = (uint64_t)v136;
            *(void *)(v52 + 24) = sub_1008FA0F0(v57, v56, &v138);
            swift_bridgeObjectRelease();
            sub_100768C9C(v35, (uint64_t (*)(void))type metadata accessor for SecureLocation);
            *(_WORD *)(v52 + 32) = 2048;
            *(void *)(v52 + 34) = v43;
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            id v58 = v127;
            _os_log_impl((void *)&_mh_execute_header, v127, v50, "LabelledLocations Checking label %s %s %s %f", (uint8_t *)v52, 0x2Au);
            swift_arrayDestroy();
            uint64_t v11 = v125;
            swift_slowDealloc();
            uint64_t v59 = (uint64_t)v126;
            swift_slowDealloc();
          }
          else
          {
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            sub_100768C9C(v35, (uint64_t (*)(void))type metadata accessor for SecureLocation);

            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            uint64_t v11 = v38;
            uint64_t v59 = (uint64_t)v126;
          }
          uint64_t v37 = v131;
          sub_100768C34(v131, v59, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          if (!v44 && (v129 & 1) != 0)
          {
            unint64_t v135 = v45;
            sub_100768C9C(v59, (uint64_t (*)(void))type metadata accessor for SecureLocation);
            goto LABEL_24;
          }
          sub_100768C34(v59, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          if ((v129 & 1) == 0) {
            break;
          }
          sub_100768C9C((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          sub_100768C9C(v59, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          swift_bridgeObjectRelease();
LABEL_9:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v36 += 11;
          if (!--v133)
          {
            swift_bridgeObjectRelease();
            uint64_t v30 = v119;
            uint64_t v33 = (uint64_t)v112;
            uint64_t v32 = v113;
            uint64_t v27 = v111;
            goto LABEL_48;
          }
        }
        unint64_t v135 = v45;
        uint64_t v69 = v11[1];
        if (!v44)
        {
          swift_bridgeObjectRetain();
          sub_100768C9C((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          sub_100768C9C(v59, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v137 = v69;
          uint64_t v37 = v131;
          goto LABEL_9;
        }
        if (v134 == *v11 && v44 == v69)
        {
          swift_bridgeObjectRetain();
          sub_100768C9C((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          sub_100768C9C(v59, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          swift_bridgeObjectRelease();
          uint64_t v37 = v131;
        }
        else
        {
          char v70 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRetain();
          sub_100768C9C((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          sub_100768C9C(v59, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          swift_bridgeObjectRelease();
          uint64_t v37 = v131;
          if ((v70 & 1) == 0)
          {
            swift_bridgeObjectRelease();
            uint64_t v35 = (uint64_t)v136;
            goto LABEL_9;
          }
        }
LABEL_24:
        id v60 = [objc_allocWithZone((Class)CLLocation) initWithLatitude:v41 longitude:v42];
        long long v127 = [objc_allocWithZone((Class)CLLocation) initWithLatitude:*(double *)(v37 + 24) longitude:*(double *)(v37 + 16)];
        id v128 = v60;
        [v60 distanceFromLocation:];
        double v62 = v61;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        unint64_t v63 = v40;
        uint64_t v64 = Logger.logObject.getter();
        os_log_type_t v65 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v64, v65))
        {
          uint64_t v66 = swift_slowAlloc();
          uint64_t v124 = swift_slowAlloc();
          uint64_t v138 = v124;
          *(_DWORD *)uint64_t v66 = v121;
          swift_bridgeObjectRetain();
          *(void *)(v66 + 4) = sub_1008FA0F0(v132, v63, &v138);
          swift_bridgeObjectRelease();
          *(_WORD *)(v66 + 12) = 2080;
          if (v44) {
            uint64_t v67 = v134;
          }
          else {
            uint64_t v67 = 0x206C696E20;
          }
          if (v44) {
            unint64_t v68 = v44;
          }
          else {
            unint64_t v68 = 0xE500000000000000;
          }
          swift_bridgeObjectRetain();
          *(void *)(v66 + 14) = sub_1008FA0F0(v67, v68, &v138);
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          *(_WORD *)(v66 + 22) = 2048;
          *(double *)(v66 + 24) = v62;
          _os_log_impl((void *)&_mh_execute_header, v64, v65, "LabelledLocations %s %s Label Distance %f", (uint8_t *)v66, 0x20u);
          swift_arrayDestroy();
          uint64_t v37 = v131;
          swift_slowDealloc();
          uint64_t v11 = v125;
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }
        uint64_t v35 = (uint64_t)v136;
        if (v62 > v26)
        {

          swift_bridgeObjectRelease();
          goto LABEL_9;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v32 = v113;
        swift_beginAccess();
        uint64_t v71 = v110;
        uint64_t v72 = (void *)(v32 + *(int *)(v110 + 64));
        *uint64_t v72 = v132;
        v72[1] = v63;
        swift_bridgeObjectRelease();
        uint64_t v73 = v109;
        sub_100768C34(v37, (uint64_t)v109, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        long long v74 = Logger.logObject.getter();
        os_log_type_t v75 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v74, v75))
        {
          uint64_t v76 = swift_slowAlloc();
          uint64_t v137 = swift_slowAlloc();
          v140[0] = v137;
          *(_DWORD *)uint64_t v76 = v104;
          os_log_type_t v77 = (uint64_t *)(v113 + *(int *)(v71 + 64));
          uint64_t v78 = v77[1];
          uint64_t v138 = *v77;
          uint64_t v139 = v78;
          swift_bridgeObjectRetain();
          sub_10000588C(&qword_101644320);
          uint64_t v79 = String.init<A>(describing:)();
          uint64_t v138 = sub_1008FA0F0(v79, v80, v140);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v76 + 12) = 2080;
          uint64_t v81 = *v73;
          unint64_t v82 = v73[1];
          swift_bridgeObjectRetain();
          uint64_t v138 = sub_1008FA0F0(v81, v82, v140);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_100768C9C((uint64_t)v73, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          _os_log_impl((void *)&_mh_execute_header, v74, v75, "LabelledLocations Adding label %s to location %s", (uint8_t *)v76, 0x16u);
          swift_arrayDestroy();
          uint64_t v32 = v113;
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_100768C9C((uint64_t)v73, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        }

        uint64_t v11 = v125;
        uint64_t v30 = v119;
        uint64_t v27 = v111;
        uint64_t v33 = (uint64_t)v112;
LABEL_48:
        swift_beginAccess();
        sub_100768C34(v32, v33, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v30 = (void *)sub_100A712C4(0, v30[2] + 1, 1, (unint64_t)v30);
        }
        unint64_t v84 = v30[2];
        unint64_t v83 = v30[3];
        if (v84 >= v83 >> 1) {
          uint64_t v30 = (void *)sub_100A712C4(v83 > 1, v84 + 1, 1, (unint64_t)v30);
        }
        uint64_t v85 = v120 + 1;
        void v30[2] = v84 + 1;
        sub_100767F00(v33, (uint64_t)v30 + v115 + v84 * v27, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        uint64_t v29 = v131;
        sub_100768C9C(v131, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        uint64_t v28 = v85;
        sub_100768C9C(v32, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        if (v85 == v116)
        {
          swift_bridgeObjectRelease();
          if (v30[2]) {
            goto LABEL_54;
          }
LABEL_62:
          os_log_type_t v94 = v103;
          _Block_copy(v103);
          _Block_copy(v94);
          if (qword_101637070 != -1) {
            swift_once();
          }
          uint64_t v95 = type metadata accessor for Logger();
          sub_100010324(v95, (uint64_t)qword_10170EC30);
          uint64_t v96 = Logger.logObject.getter();
          os_log_type_t v97 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v96, v97))
          {
            id v98 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)id v98 = 0;
            _os_log_impl((void *)&_mh_execute_header, v96, v97, "Got empty locations after resolving labels. This shouldn't happen", v98, 2u);
            swift_slowDealloc();
          }

          id v87 = (void (**)(void, void))v103;
          _Block_release(v103);
          goto LABEL_67;
        }
      }
    }
    uint64_t v30 = _swiftEmptyArrayStorage;
    if (!_swiftEmptyArrayStorage[2]) {
      goto LABEL_62;
    }
LABEL_54:
    uint64_t v86 = (uint64_t)v30 + ((*(unsigned __int8 *)(v107 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v107 + 80));
    id v87 = (void (**)(void, void))v103;
    _Block_copy(v103);
    sub_10075D270(v86, 0, v106, v87);
LABEL_67:
    _Block_release(v87);
    swift_bridgeObjectRelease();
  }
  else
  {
    _Block_copy(a5);
    NSString v88 = (void (**)(void, void))a5;
    _Block_copy(a5);
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v89 = type metadata accessor for Logger();
    sub_100010324(v89, (uint64_t)qword_10170EC30);
    id v90 = Logger.logObject.getter();
    os_log_type_t v91 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v90, v91))
    {
      uint64_t v92 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v92 = 0;
      _os_log_impl((void *)&_mh_execute_header, v90, v91, "LabelledLocations - No labels - nothing to resolve", v92, 2u);
      swift_slowDealloc();
    }

    if (*(void *)(v108 + 16))
    {
      uint64_t v93 = v108 + ((*(unsigned __int8 *)(v107 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v107 + 80));
      id v87 = v88;
      _Block_copy(v88);
      sub_10075D270(v93, 0, v106, v88);
    }
    else
    {
      id v87 = (void (**)(void, void))a5;
      _Block_copy(a5);
      _Block_copy(a5);
      int v99 = Logger.logObject.getter();
      os_log_type_t v100 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v99, v100))
      {
        uint64_t v101 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v101 = 0;
        _os_log_impl((void *)&_mh_execute_header, v99, v100, "Got empty locations after resolving labels. This shouldn't happen", v101, 2u);
        swift_slowDealloc();
      }

      _Block_release(v88);
    }
    _Block_release(v87);
  }
  swift_release();
  _Block_release(v87);
  _Block_release(v87);
}

uint64_t sub_10075F0F0(uint64_t a1, char a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a5;
  uint64_t v11 = (void *)swift_allocObject();
  void v11[2] = a4;
  void v11[3] = sub_1001E06E0;
  v11[4] = v10;
  uint64_t v12 = self;
  _Block_copy(a5);
  swift_retain();
  swift_retain();
  id v13 = [v12 standardUserDefaults];
  NSString v14 = String._bridgeToObjectiveC()();
  unsigned int v15 = [v13 BOOLForKey:v14];

  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v16 = type metadata accessor for Logger();
  sub_100010324(v16, (uint64_t)qword_10170EC30);
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v17, v18))
  {
    NSString v19 = a5;
    uint64_t v20 = a4;
    char v21 = a2;
    uint64_t v22 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)uint64_t v22 = 67109120;
    LODWORD(v25) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "LabelledLocations Resolve Label isfetchdone %{BOOL}d", v22, 8u);
    a2 = v21;
    a4 = v20;
    a5 = v19;
    swift_slowDealloc();
  }

  if (v15)
  {
    if (!*(void *)(*(void *)(a3 + 104) + 16))
    {
      uint64_t v25 = sub_100B6DCA8();
      swift_bridgeObjectRetain();
      sub_10072C794((uint64_t *)&v25);
      swift_bridgeObjectRelease();
      *(void *)(a3 + 104) = v25;
      swift_bridgeObjectRelease();
    }
    _Block_copy(a5);
    swift_retain();
    swift_retain();
    sub_10075DF38(a1, a2 & 1, a3, a4, a5);
    _Block_release(a5);
    swift_release();
    swift_release();
  }
  else
  {
    uint64_t v23 = swift_allocObject();
    *(void *)(v23 + 16) = a3;
    *(void *)(v23 + 24) = a1;
    *(unsigned char *)(v23 + 32) = a2 & 1;
    *(void *)(v23 + 40) = sub_10076781C;
    *(void *)(v23 + 48) = v11;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    sub_10074CFAC((uint64_t)sub_1007677E8, v23);
    swift_release();
    swift_release();
  }
  swift_release();
  return swift_release();
}

void sub_10075F46C(NSObject *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for SecureLocation();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6 - 8);
  uint64_t v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  Class isa = a1[2].isa;
  if (isa)
  {
    v22[1] = a2;
    v22[2] = a3;
    unint64_t v11 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    uint64_t v12 = qword_101637070;
    swift_bridgeObjectRetain();
    if (v12 != -1) {
LABEL_12:
    }
      swift_once();
    uint64_t v14 = 0;
    v22[0] = a1;
    unsigned int v15 = (char *)a1 + v11;
    uint64_t v24 = &v29;
    *(void *)&long long v13 = 136315138;
    long long v23 = v13;
    v22[3] = (char *)&type metadata for Any + 8;
    double v26 = isa;
    uint64_t v27 = v7;
    uint64_t v25 = (char *)a1 + v11;
    do
    {
      unint64_t v11 = v14 + 1;
      if (__OFADD__(v14, 1))
      {
        __break(1u);
        goto LABEL_12;
      }
      uint64_t v16 = (uint64_t)&v15[*(void *)(v7 + 72) * v14];
      uint64_t v17 = type metadata accessor for Logger();
      sub_100010324(v17, (uint64_t)qword_10170EC30);
      sub_100768C34(v16, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for SecureLocation);
      a1 = Logger.logObject.getter();
      os_log_type_t v18 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(a1, v18))
      {
        NSString v19 = (uint8_t *)swift_slowAlloc();
        uint64_t v29 = swift_slowAlloc();
        *(_DWORD *)NSString v19 = v23;
        uint64_t v20 = sub_100E8F520();
        uint64_t v28 = sub_1008FA0F0(v20, v21, &v29);
        Class isa = v26;
        uint64_t v7 = v27;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_100768C9C((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        _os_log_impl((void *)&_mh_execute_header, a1, v18, "Received location via push %s", v19, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        unsigned int v15 = v25;
        swift_slowDealloc();
      }
      else
      {
        sub_100768C9C((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for SecureLocation);
      }

      ++v14;
    }
    while ((Class)v11 != isa);
    a1 = v22[0];
    swift_bridgeObjectRelease();
  }
  sub_100749040((uint64_t)a1, 1);
  Transaction.capture()();
}

void sub_10075F770(NSObject *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v91 = a4;
  uint64_t v92 = a5;
  int v114 = a2;
  uint64_t v93 = a1;
  uint64_t v6 = type metadata accessor for SecureLocation();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v109 = (void *)((char *)&v89 - v10);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v13 = __chkstk_darwin(v12);
  unsigned int v15 = (char *)&v89 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  os_log_type_t v18 = (char *)&v89 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v102 = a3;
  if (*(void *)(*(void *)(a3 + 104) + 16))
  {
    uint64_t v111 = (char *)&v89 - v20;
    uint64_t v120 = v23;
    uint64_t v121 = v22;
    os_log_type_t v94 = (uint64_t *)v21;
    uint64_t v95 = v19;
    if (qword_101637080 != -1) {
      swift_once();
    }
    swift_retain();
    OS_dispatch_queue.sync<A>(execute:)();
    swift_release();
    long long v148 = v135;
    long long v149 = v136;
    long long v150 = v137;
    long long v144 = v131;
    long long v145 = v132;
    long long v146 = v133;
    long long v147 = v134;
    long long v140 = v127;
    long long v141 = v128;
    long long v142 = v129;
    long long v143 = v130;
    long long v138 = v125;
    long long v139 = v126;
    sub_100551984((uint64_t)&v138);
    Class isa = v93[2].isa;
    if (isa)
    {
      double v24 = *(double *)&v139;
      unint64_t v100 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
      int v99 = (char *)v93 + v100;
      uint64_t v25 = *(void *)(v7 + 72);
      id v90 = &v123;
      swift_bridgeObjectRetain();
      double v26 = 0;
      uint64_t v27 = _swiftEmptyArrayStorage;
      *(void *)&long long v28 = 136315906;
      long long v108 = v28;
      uint64_t v107 = (char *)&type metadata for Any + 8;
      *(void *)&long long v28 = 136315650;
      long long v106 = v28;
      *(void *)&long long v28 = 136315394;
      long long v89 = v28;
      uint64_t v29 = (uint64_t)v111;
      uint64_t v30 = (uint64_t)v15;
      os_log_type_t v97 = v18;
      id v98 = v15;
      uint64_t v96 = v25;
      while (1)
      {
        uint64_t v105 = v26;
        sub_100768C34((uint64_t)&v99[v25 * (void)v26], v29, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        sub_100768C34(v29, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        uint64_t v31 = *(void *)(v102 + 104);
        uint64_t v32 = (uint64_t)v120;
        if (!*(void *)(v31 + 16)) {
          goto LABEL_50;
        }
        uint64_t v118 = *(void *)(v31 + 16);
        long long v103 = v27;
        uint64_t v104 = swift_bridgeObjectRetain();
        uint64_t v33 = (unint64_t *)(v104 + 56);
        while (1)
        {
          uint64_t v34 = *(v33 - 2);
          uint64_t v116 = *(v33 - 1);
          unint64_t v35 = *v33;
          double v36 = *((double *)v33 + 3);
          double v37 = *((double *)v33 + 4);
          unint64_t v38 = v33[5];
          unint64_t v39 = v33[7];
          uint64_t v119 = v33[6];
          unint64_t v40 = v33[2];
          uint64_t v41 = qword_101637070;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v41 != -1) {
            swift_once();
          }
          uint64_t v42 = type metadata accessor for Logger();
          uint64_t v43 = sub_100010324(v42, (uint64_t)qword_10170EC30);
          sub_100768C34(v29, v32, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
          uint64_t v115 = v43;
          unint64_t v44 = Logger.logObject.getter();
          os_log_type_t v45 = static os_log_type_t.info.getter();
          uint64_t v117 = v44;
          if (os_log_type_enabled(v44, v45))
          {
            uint64_t v46 = swift_slowAlloc();
            id v113 = (id)swift_slowAlloc();
            uint64_t v122 = (uint64_t)v113;
            *(_DWORD *)uint64_t v46 = v108;
            swift_bridgeObjectRetain();
            *(void *)(v46 + 4) = sub_1008FA0F0(v116, v35, &v122);
            swift_bridgeObjectRelease();
            *(_WORD *)(v46 + 12) = 2080;
            if (v39) {
              uint64_t v47 = v119;
            }
            else {
              uint64_t v47 = 1818848800;
            }
            if (v39) {
              unint64_t v48 = v39;
            }
            else {
              unint64_t v48 = 0xE400000000000000;
            }
            swift_bridgeObjectRetain();
            *(void *)(v46 + 14) = sub_1008FA0F0(v47, v48, &v122);
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            *(_WORD *)(v46 + 22) = 2080;
            uint64_t v49 = *v120;
            unint64_t v50 = v120[1];
            swift_bridgeObjectRetain();
            uint64_t v51 = v49;
            uint64_t v32 = (uint64_t)v120;
            *(void *)(v46 + 24) = sub_1008FA0F0(v51, v50, &v122);
            swift_bridgeObjectRelease();
            sub_100768C9C(v32, (uint64_t (*)(void))type metadata accessor for SecureLocation);
            *(_WORD *)(v46 + 32) = 2048;
            *(void *)(v46 + 34) = v38;
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            uint64_t v52 = v117;
            _os_log_impl((void *)&_mh_execute_header, v117, v45, "LabelledLocations Checking label %s %s %s %f", (uint8_t *)v46, 0x2Au);
            swift_arrayDestroy();
            swift_slowDealloc();
            uint64_t v29 = (uint64_t)v111;
            swift_slowDealloc();
          }
          else
          {
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            sub_100768C9C(v32, (uint64_t (*)(void))type metadata accessor for SecureLocation);

            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
          }
          sub_100768C34(v29, v121, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          if (!v39 && (v114 & 1) != 0)
          {
            sub_100768C9C(v121, (uint64_t (*)(void))type metadata accessor for SecureLocation);
            goto LABEL_25;
          }
          uint64_t v64 = v109;
          sub_100768C34(v121, (uint64_t)v109, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          if ((v114 & 1) == 0) {
            break;
          }
          sub_100768C9C((uint64_t)v64, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          sub_100768C9C(v121, (uint64_t (*)(void))type metadata accessor for SecureLocation);
LABEL_9:
          swift_bridgeObjectRelease();
LABEL_10:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v33 += 11;
          if (!--v118)
          {
            swift_bridgeObjectRelease();
            os_log_type_t v18 = v97;
            uint64_t v30 = (uint64_t)v98;
            goto LABEL_49;
          }
        }
        uint64_t v117 = v34;
        if (!v39)
        {
          swift_bridgeObjectRetain();
          sub_100768C9C((uint64_t)v64, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          sub_100768C9C(v121, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_10;
        }
        if (v119 == *v64 && v39 == v64[1])
        {
          swift_bridgeObjectRetain();
          sub_100768C9C((uint64_t)v64, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          sub_100768C9C(v121, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          swift_bridgeObjectRelease();
          uint64_t v34 = v117;
        }
        else
        {
          char v65 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRetain();
          sub_100768C9C((uint64_t)v64, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          sub_100768C9C(v121, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          swift_bridgeObjectRelease();
          uint64_t v34 = v117;
          if ((v65 & 1) == 0)
          {
            swift_bridgeObjectRelease();
            uint64_t v32 = (uint64_t)v120;
            goto LABEL_10;
          }
        }
LABEL_25:
        id v53 = [objc_allocWithZone((Class)CLLocation) initWithLatitude:v36 longitude:v37];
        id v112 = [objc_allocWithZone((Class)CLLocation) initWithLatitude:*(double *)(v29 + 24) longitude:*(double *)(v29 + 16)];
        id v113 = v53;
        [v53 distanceFromLocation:];
        double v55 = v54;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        unint64_t v56 = v35;
        uint64_t v57 = Logger.logObject.getter();
        os_log_type_t v58 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v57, v58))
        {
          uint64_t v59 = swift_slowAlloc();
          unint64_t v110 = v40;
          uint64_t v60 = v59;
          uint64_t v61 = swift_slowAlloc();
          uint64_t v117 = v34;
          uint64_t v122 = v61;
          *(_DWORD *)uint64_t v60 = v106;
          swift_bridgeObjectRetain();
          *(void *)(v60 + 4) = sub_1008FA0F0(v116, v56, &v122);
          swift_bridgeObjectRelease();
          *(_WORD *)(v60 + 12) = 2080;
          if (v39) {
            uint64_t v62 = v119;
          }
          else {
            uint64_t v62 = 0x206C696E20;
          }
          if (v39) {
            unint64_t v63 = v39;
          }
          else {
            unint64_t v63 = 0xE500000000000000;
          }
          swift_bridgeObjectRetain();
          *(void *)(v60 + 14) = sub_1008FA0F0(v62, v63, &v122);
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          *(_WORD *)(v60 + 22) = 2048;
          *(double *)(v60 + 24) = v55;
          _os_log_impl((void *)&_mh_execute_header, v57, v58, "LabelledLocations %s %s Label Distance %f", (uint8_t *)v60, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }
        uint64_t v32 = (uint64_t)v120;
        uint64_t v29 = (uint64_t)v111;
        if (v55 > v24)
        {

          goto LABEL_9;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        os_log_type_t v18 = v97;
        swift_beginAccess();
        uint64_t v66 = v29;
        uint64_t v67 = v95;
        unint64_t v68 = &v18[*(int *)(v95 + 64)];
        *(void *)unint64_t v68 = v116;
        *((void *)v68 + 1) = v56;
        swift_bridgeObjectRelease();
        uint64_t v69 = v94;
        sub_100768C34(v66, (uint64_t)v94, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        char v70 = Logger.logObject.getter();
        os_log_type_t v71 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v70, v71))
        {
          uint64_t v72 = swift_slowAlloc();
          uint64_t v119 = swift_slowAlloc();
          v124[0] = v119;
          *(_DWORD *)uint64_t v72 = v89;
          uint64_t v73 = (uint64_t *)&v18[*(int *)(v67 + 64)];
          uint64_t v74 = v73[1];
          uint64_t v122 = *v73;
          uint64_t v123 = v74;
          swift_bridgeObjectRetain();
          sub_10000588C(&qword_101644320);
          uint64_t v75 = String.init<A>(describing:)();
          uint64_t v122 = sub_1008FA0F0(v75, v76, v124);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v72 + 12) = 2080;
          uint64_t v77 = *v69;
          unint64_t v78 = v69[1];
          swift_bridgeObjectRetain();
          uint64_t v122 = sub_1008FA0F0(v77, v78, v124);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_100768C9C((uint64_t)v69, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          _os_log_impl((void *)&_mh_execute_header, v70, v71, "LabelledLocations Adding label %s to location %s", (uint8_t *)v72, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_100768C9C((uint64_t)v69, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        }

        uint64_t v30 = (uint64_t)v98;
        uint64_t v29 = (uint64_t)v111;
LABEL_49:
        uint64_t v27 = v103;
        uint64_t v25 = v96;
LABEL_50:
        swift_beginAccess();
        sub_100768C34((uint64_t)v18, v30, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v27 = sub_100A712C4(0, (int64_t)v27[2].isa + 1, 1, (unint64_t)v27);
        }
        unint64_t v80 = (unint64_t)v27[2].isa;
        unint64_t v79 = (unint64_t)v27[3].isa;
        if (v80 >= v79 >> 1) {
          uint64_t v27 = sub_100A712C4(v79 > 1, v80 + 1, 1, (unint64_t)v27);
        }
        uint64_t v81 = (objc_class *)((char *)v105 + 1);
        v27[2].Class isa = (Class)(v80 + 1);
        sub_100767F00(v30, (uint64_t)v27 + v100 + v80 * v25, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        sub_100768C9C(v29, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        double v26 = v81;
        sub_100768C9C((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        if (v81 == isa)
        {
          swift_bridgeObjectRelease();
          goto LABEL_64;
        }
      }
    }
    uint64_t v27 = _swiftEmptyArrayStorage;
LABEL_64:
    sub_10075F46C(v27, v91, v92);
    swift_bridgeObjectRelease();
  }
  else
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v82 = type metadata accessor for Logger();
    sub_100010324(v82, (uint64_t)qword_10170EC30);
    unint64_t v83 = Logger.logObject.getter();
    os_log_type_t v84 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v83, v84))
    {
      uint64_t v85 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v85 = 0;
      _os_log_impl((void *)&_mh_execute_header, v83, v84, "LabelledLocations - No labels - nothing to resolve", v85, 2u);
      swift_slowDealloc();
    }

    uint64_t v87 = v92;
    uint64_t v86 = v93;
    uint64_t v88 = v91;
    sub_10075F46C(v86, v88, v87);
  }
}

uint64_t sub_1007606E4(NSObject *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = a4;
  *(void *)(v10 + 24) = a5;
  uint64_t v11 = self;
  swift_retain();
  swift_retain();
  id v12 = [v11 standardUserDefaults];
  NSString v13 = String._bridgeToObjectiveC()();
  unsigned int v14 = [v12 BOOLForKey:v13];

  if (qword_101637070 != -1) {
    swift_once();
  }
  uint64_t v15 = type metadata accessor for Logger();
  sub_100010324(v15, (uint64_t)qword_10170EC30);
  uint64_t v16 = Logger.logObject.getter();
  os_log_type_t v17 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v16, v17))
  {
    os_log_type_t v18 = (uint8_t *)swift_slowAlloc();
    *(_DWORD *)os_log_type_t v18 = 67109120;
    LODWORD(v21) = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "LabelledLocations Resolve Label isfetchdone %{BOOL}d", v18, 8u);
    swift_slowDealloc();
  }

  if (v14)
  {
    if (!*(void *)(*(void *)(a3 + 104) + 16))
    {
      uint64_t v21 = sub_100B6DCA8();
      swift_bridgeObjectRetain();
      sub_10072C794((uint64_t *)&v21);
      swift_bridgeObjectRelease();
      *(void *)(a3 + 104) = v21;
      swift_bridgeObjectRelease();
    }
    swift_retain();
    swift_retain();
    sub_10075F770(a1, a2 & 1, a3, a4, a5);
    swift_release();
  }
  else
  {
    uint64_t v19 = swift_allocObject();
    *(void *)(v19 + 16) = a3;
    *(void *)(v19 + 24) = a1;
    *(unsigned char *)(v19 + 32) = a2 & 1;
    *(void *)(v19 + 40) = sub_1007677DC;
    *(void *)(v19 + 48) = v10;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    sub_10074CFAC((uint64_t)sub_1007677E8, v19);
  }
  swift_release();
  return swift_release();
}

void sub_1007609D8(void *a1, uint64_t a2, void (**a3)(void, void))
{
  uint64_t v6 = type metadata accessor for SecureLocation();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6 - 8);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  _Block_copy(a3);
  if (sub_100757F90()) {
    goto LABEL_10;
  }
  if (qword_101637080 != -1) {
    swift_once();
  }
  swift_retain();
  OS_dispatch_queue.sync<A>(execute:)();
  swift_release();
  v36[10] = v33;
  v36[11] = v34;
  v36[12] = v35;
  v36[6] = v29;
  v36[7] = v30;
  unsigned char v36[8] = v31;
  v36[9] = v32;
  void v36[2] = v25;
  v36[3] = v26;
  v36[4] = v27;
  v36[5] = v28;
  v36[0] = v23;
  v36[1] = v24;
  sub_100551984((uint64_t)v36);
  if ((BYTE8(v36[0]) & 1) == 0)
  {
LABEL_10:
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v16 = type metadata accessor for Logger();
    sub_100010324(v16, (uint64_t)qword_10170EC30);
    os_log_type_t v17 = Logger.logObject.getter();
    os_log_type_t v18 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "publishLocation: secureLocations feature is disabled. Not publishing location", v19, 2u);
      swift_slowDealloc();
    }

    type metadata accessor for SecureLocationsError(0);
    *(void *)&long long v23 = 6;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100766750(&qword_10163F370, type metadata accessor for SecureLocationsError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v20 = *(void **)&v36[0];
    uint64_t v21 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, void *))a3)[2](a3, v21);
  }
  else
  {
    sub_100E8FF94(a1, (uint64_t)v9);
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v10 = type metadata accessor for Logger();
    sub_100010324(v10, (uint64_t)qword_10170EC30);
    uint64_t v11 = Logger.logObject.getter();
    os_log_type_t v12 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v11, v12))
    {
      NSString v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)NSString v13 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, v12, "Resolving labels for publish", v13, 2u);
      swift_slowDealloc();
    }

    sub_10000588C(&qword_10163AA80);
    unint64_t v14 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
    uint64_t v15 = swift_allocObject();
    *(_OWORD *)(v15 + 16) = xmmword_101342130;
    sub_100768C34((uint64_t)v9, v15 + v14, (uint64_t (*)(void))type metadata accessor for SecureLocation);
    _Block_copy(a3);
    swift_retain();
    sub_10075F0F0(v15, 1, a2, a2, a3);
    _Block_release(a3);
    swift_bridgeObjectRelease();
    sub_100768C9C((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for SecureLocation);
  }
  _Block_release(a3);
}

void sub_100760E38(uint64_t a1, int a2, uint64_t a3, void *a4)
{
  id v4 = a4;
  LODWORD(v90) = a2;
  v84[1] = *a4;
  uint64_t v7 = sub_10000588C((uint64_t *)&unk_101649E20);
  __chkstk_darwin(v7 - 8);
  uint64_t v87 = (char *)v84 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v92 = type metadata accessor for SecureLocationsSubmitEndpoint(0);
  uint64_t v9 = __chkstk_darwin(v92);
  os_log_type_t v94 = (char *)v84 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v86 = (uint64_t)v84 - v12;
  __chkstk_darwin(v11);
  unint64_t v14 = (char *)v84 - v13;
  uint64_t v93 = type metadata accessor for SecureLocation();
  uint64_t v15 = __chkstk_darwin(v93);
  os_log_type_t v17 = (char *)v84 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)v84 - v18;
  uint64_t v20 = qword_101637070;
  swift_retain();
  if (v20 != -1) {
    swift_once();
  }
  uint64_t v21 = type metadata accessor for Logger();
  uint64_t v22 = sub_100010324(v21, (uint64_t)qword_10170EC30);
  sub_100768C34(a1, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for SecureLocation);
  sub_100768C34(a1, (uint64_t)v17, (uint64_t (*)(void))type metadata accessor for SecureLocation);
  uint64_t v91 = v22;
  long long v23 = Logger.logObject.getter();
  os_log_type_t v24 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = swift_slowAlloc();
    uint64_t v88 = a1;
    uint64_t v26 = v25;
    uint64_t v27 = swift_slowAlloc();
    long long v89 = v14;
    uint64_t v85 = v4;
    uint64_t v96 = v27;
    *(_DWORD *)uint64_t v26 = 136446466;
    unint64_t v28 = sub_100E90398(*(void *)&v19[*(int *)(v93 + 60)]);
    uint64_t v95 = sub_1008FA0F0(v28, v29, &v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100768C9C((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for SecureLocation);
    *(_WORD *)(v26 + 12) = 2080;
    uint64_t v30 = sub_100E8F520();
    uint64_t v95 = sub_1008FA0F0(v30, v31, &v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_100768C9C((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for SecureLocation);
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "publishLocation with reason %{public}s location: %s", (uint8_t *)v26, 0x16u);
    swift_arrayDestroy();
    id v4 = v85;
    unint64_t v14 = v89;
    swift_slowDealloc();
    a1 = v88;
    swift_slowDealloc();
  }
  else
  {
    sub_100768C9C((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for SecureLocation);
    sub_100768C9C((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for SecureLocation);
  }

  uint64_t v32 = (uint64_t)v94;
  uint64_t v33 = v92;
  if (qword_101637080 != -1) {
    swift_once();
  }
  swift_retain();
  char v34 = sub_100D0C0B0();
  swift_release();
  if (v34 & 1) != 0 || (v90)
  {
    if (*(void *)(a1 + *(int *)(v93 + 60)) == 8)
    {
      if (*(void *)(a3 + 344))
      {
        swift_retain();
        DispatchTimer.cancel()();
        swift_release();
        *(void *)(a3 + 344) = 0;
        swift_release();
      }
      sub_101082988(a1);
      Transaction.capture()();
    }
    else
    {
      uint64_t v88 = a1;
      uint64_t v42 = enum case for FMNAccountType.searchParty(_:);
      uint64_t v43 = type metadata accessor for FMNAccountType();
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v43 - 8) + 104))(v14, v42, v43);
      sub_10033E420((uint64_t)&v14[*(int *)(v33 + 20)]);
      uint64_t v44 = v86;
      sub_100768C34((uint64_t)v14, v86, type metadata accessor for SecureLocationsSubmitEndpoint);
      os_log_type_t v45 = Logger.logObject.getter();
      os_log_type_t v46 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v45, v46))
      {
        uint64_t v90 = a3;
        uint64_t v47 = (uint8_t *)swift_slowAlloc();
        uint64_t v48 = swift_slowAlloc();
        long long v89 = v14;
        uint64_t v96 = v48;
        *(_DWORD *)uint64_t v47 = 136315138;
        sub_100768C34(v44, v32, type metadata accessor for SecureLocationsSubmitEndpoint);
        uint64_t v49 = String.init<A>(describing:)();
        uint64_t v95 = sub_1008FA0F0(v49, v50, &v96);
        a3 = v90;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        uint64_t v32 = (uint64_t)v94;
        swift_bridgeObjectRelease();
        sub_100768C9C(v44, type metadata accessor for SecureLocationsSubmitEndpoint);
        _os_log_impl((void *)&_mh_execute_header, v45, v46, "SubmitLocation endpoint %s", v47, 0xCu);
        swift_arrayDestroy();
        unint64_t v14 = v89;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        sub_100768C9C(v44, type metadata accessor for SecureLocationsSubmitEndpoint);
      }

      type metadata accessor for SearchPartyURLSessionFactory(0);
      swift_allocObject();
      uint64_t v51 = type metadata accessor for FMNMockingPreferences();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56))(v87, 1, 1, v51);
      uint64_t v52 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)();
      type metadata accessor for ServerInteractionController(0);
      uint64_t v53 = swift_allocObject();
      sub_100768C34((uint64_t)v14, v32, type metadata accessor for SecureLocationsSubmitEndpoint);
      uint64_t v54 = sub_1004A60A0(v32, v52, v53);
      id v55 = [self currentDevice];
      if (v55
        && (unint64_t v56 = v55,
            id v57 = [v55 uniqueDeviceIdentifier],
            v56,
            v57))
      {
        long long v89 = v14;
        uint64_t v85 = v4;
        uint64_t v58 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v60 = v59;

        sub_10000588C(&qword_101644320);
        OS_dispatch_queue.sync<A>(execute:)();
        uint64_t v61 = v97;
        if (v97)
        {
          os_log_type_t v94 = 0;
          uint64_t v62 = v96;
          uint64_t v63 = swift_allocBox();
          char v65 = (void *)v64;
          uint64_t v66 = a3;
          uint64_t v67 = v88;
          sub_100768C34(v88, v64, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          *char v65 = v58;
          v65[1] = v60;
          swift_bridgeObjectRetain();
          uint64_t v68 = swift_bridgeObjectRelease();
          __chkstk_darwin(v68);
          v84[-10] = v66;
          v84[-9] = v63;
          uint64_t v69 = v85;
          v84[-8] = j___s10FindMyBase11TransactionC7captureyyF;
          v84[-7] = v69;
          v84[-6] = v67;
          v84[-5] = v62;
          v84[-4] = v61;
          v84[-3] = v58;
          v84[-2] = v60;
          v84[-1] = v54;
          static Transaction.named<A>(_:with:)();
          swift_bridgeObjectRelease();
          sub_100768C9C((uint64_t)v89, type metadata accessor for SecureLocationsSubmitEndpoint);
          swift_release();
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          return;
        }
        swift_bridgeObjectRelease();
        uint64_t v77 = Logger.logObject.getter();
        os_log_type_t v78 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v77, v78))
        {
          unint64_t v79 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v79 = 0;
          _os_log_impl((void *)&_mh_execute_header, v77, v78, "No APS token. Not proceeding", v79, 2u);
          swift_slowDealloc();
        }

        static String._unconditionallyBridgeFromObjectiveC(_:)();
        id v80 = objc_allocWithZone((Class)NSError);
        NSString v81 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v82 = [v80 initWithDomain:v81 code:13 userInfo:0];

        id v83 = v82;
        Transaction.capture()();

        swift_release();
        sub_100768C9C((uint64_t)v89, type metadata accessor for SecureLocationsSubmitEndpoint);
      }
      else
      {
        char v70 = Logger.logObject.getter();
        os_log_type_t v71 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v70, v71))
        {
          uint64_t v72 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)uint64_t v72 = 0;
          _os_log_impl((void *)&_mh_execute_header, v70, v71, "Unable to get device identifier for server SubscribeAndFetch", v72, 2u);
          swift_slowDealloc();
        }

        static String._unconditionallyBridgeFromObjectiveC(_:)();
        id v73 = objc_allocWithZone((Class)NSError);
        NSString v74 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        id v75 = [v73 initWithDomain:v74 code:0 userInfo:0];

        id v76 = v75;
        Transaction.capture()();

        swift_release();
        sub_100768C9C((uint64_t)v14, type metadata accessor for SecureLocationsSubmitEndpoint);
      }
    }
    swift_release();
  }
  else
  {
    long long v35 = Logger.logObject.getter();
    os_log_type_t v36 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v35, v36))
    {
      double v37 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)double v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "Not a location publishing device. Not publishing location", v37, 2u);
      swift_slowDealloc();
    }

    sub_10075D054();
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v38 = objc_allocWithZone((Class)NSError);
    NSString v39 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v40 = [v38 initWithDomain:v39 code:12 userInfo:0];

    id v41 = v40;
    Transaction.capture()();
    swift_release();
  }
}

uint64_t sub_100761AA0(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if (qword_101636CA0 != -1) {
    swift_once();
  }
  uint64_t v8 = type metadata accessor for Logger();
  sub_100010324(v8, (uint64_t)qword_10164CC28);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v9 = Logger.logObject.getter();
  os_log_type_t v10 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc();
    v18[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v11 = 136446978;
    sub_1008FA0F0(0xD000000000000043, 0x8000000101406270, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v11 + 12) = 2082;
    if (a2) {
      uint64_t v12 = a1;
    }
    else {
      uint64_t v12 = 0;
    }
    if (a2) {
      unint64_t v13 = a2;
    }
    else {
      unint64_t v13 = 0xE000000000000000;
    }
    swift_bridgeObjectRetain();
    sub_1008FA0F0(v12, v13, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 22) = 2082;
    if (a4) {
      uint64_t v14 = a3;
    }
    else {
      uint64_t v14 = 0;
    }
    if (a4) {
      unint64_t v15 = a4;
    }
    else {
      unint64_t v15 = 0xE000000000000000;
    }
    swift_bridgeObjectRetain();
    sub_1008FA0F0(v14, v15, v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v11 + 32) = 1024;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "%{public}s findmyId: %{public}s policy: %{public}s stopMonitoringActivePolicy: %{BOOL}d.", (uint8_t *)v11, 0x26u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
  }
  uint64_t v16 = type metadata accessor for Transaction();
  __chkstk_darwin(v16);
  return static Transaction.named<A>(_:with:)();
}

uint64_t sub_100761DDC(uint64_t a1, void *a2, void *a3, char *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v87 = a7;
  uint64_t v86 = a6;
  uint64_t v89 = a5;
  uint64_t v83 = type metadata accessor for BeaconSharingSessionContext();
  __chkstk_darwin(v83);
  os_log_type_t v84 = (char *)&v79 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v12 - 8);
  id v82 = (char *)&v79 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000588C(&qword_10163CBB8);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v79 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for SecureLocationsSubscription();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v79 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v98 = 0uLL;
  uint64_t v91 = *((void *)a4 + 6);
  uint64_t v92 = a1;
  uint64_t v90 = a1;
  uint64_t v88 = a2;
  uint64_t v93 = a2;
  os_log_type_t v94 = a3;
  uint64_t v85 = a3;
  OS_dispatch_queue.sync<A>(execute:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {
    sub_10001DAB4((uint64_t)v16, &qword_10163CBB8);
LABEL_13:
    uint64_t v22 = a4;
    uint64_t v25 = v88;
    goto LABEL_21;
  }
  sub_100767F00((uint64_t)v16, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for SecureLocationsSubscription);
  if (!*(void *)&v20[*(int *)(v17 + 32) + 8])
  {
    sub_100768C9C((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for SecureLocationsSubscription);
    goto LABEL_13;
  }
  id v80 = v20;
  uint64_t v81 = 0;
  uint64_t v21 = qword_101637080;
  swift_bridgeObjectRetain();
  uint64_t v22 = a4;
  if (v21 != -1) {
    swift_once();
  }
  swift_retain();
  uint64_t v23 = Data.init(base64Encoded:options:)();
  uint64_t v25 = v88;
  if (v24 >> 60 == 15)
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v26 = type metadata accessor for Logger();
    sub_100010324(v26, (uint64_t)qword_10170EC30);
    uint64_t v27 = Logger.logObject.getter();
    os_log_type_t v28 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v27, v28))
    {
      unint64_t v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)unint64_t v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v27, v28, "failed to decode server provided push identifier", v29, 2u);
      swift_slowDealloc();
    }
    swift_release();
    swift_bridgeObjectRelease();

    uint64_t v30 = 0;
    uint64_t v31 = 0;
  }
  else
  {
    uint64_t v32 = v23;
    unint64_t v33 = v24;
    static String.Encoding.utf8.getter();
    uint64_t v30 = String.init(data:encoding:)();
    uint64_t v31 = v34;
    sub_100037A24(v32, v33);
    swift_release();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  *(void *)&long long v98 = v30;
  *((void *)&v98 + 1) = v31;
  if (qword_101636B00 != -1) {
    swift_once();
  }
  uint64_t v35 = type metadata accessor for Logger();
  sub_100010324(v35, (uint64_t)qword_10170DE98);
  swift_bridgeObjectRetain_n();
  os_log_type_t v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v38 = swift_slowAlloc();
    *(void *)&long long v96 = swift_slowAlloc();
    *(_DWORD *)uint64_t v38 = 141558787;
    *(void *)&long long v97 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v38 + 12) = 2081;
    swift_beginAccess();
    long long v97 = v98;
    swift_bridgeObjectRetain();
    sub_10000588C(&qword_101644320);
    uint64_t v39 = String.init<A>(describing:)();
    *(void *)&long long v97 = sub_1008FA0F0(v39, v40, (uint64_t *)&v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v38 + 22) = 2160;
    *(void *)&long long v97 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v38 + 32) = 2081;
    swift_bridgeObjectRetain();
    *(void *)&long long v97 = sub_1008FA0F0(v90, (unint64_t)v25, (uint64_t *)&v96);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "stopLiveLocations: Got handle from server %{private,mask.hash}s for findMyId %{private,mask.hash}s", (uint8_t *)v38, 0x2Au);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  sub_100768C9C((uint64_t)v80, (uint64_t (*)(void))type metadata accessor for SecureLocationsSubscription);
LABEL_21:
  uint64_t v41 = swift_beginAccess();
  if (!*((void *)&v98 + 1))
  {
    id v82 = v22;
    if (qword_101637080 != -1) {
      uint64_t v41 = swift_once();
    }
    uint64_t v42 = qword_10170EC60;
    __chkstk_darwin(v41);
    uint64_t v43 = v90;
    *(&v79 - 4) = v42;
    *(&v79 - 3) = v43;
    *(&v79 - 2) = (uint64_t)v25;
    swift_retain();
    sub_10000588C(&qword_101644320);
    OS_dispatch_queue.sync<A>(execute:)();
    swift_release();
    long long v98 = v96;
    swift_bridgeObjectRelease();
    if (qword_101636B00 != -1) {
      swift_once();
    }
    uint64_t v44 = type metadata accessor for Logger();
    sub_100010324(v44, (uint64_t)qword_10170DE98);
    long long v45 = v98;
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    os_log_type_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = swift_slowAlloc();
      uint64_t v49 = swift_slowAlloc();
      *(_DWORD *)uint64_t v48 = 141558787;
      uint64_t v95 = v49;
      *(void *)&long long v96 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v48 + 12) = 2081;
      long long v96 = v45;
      swift_bridgeObjectRetain();
      uint64_t v50 = String.init<A>(describing:)();
      *(void *)&long long v96 = sub_1008FA0F0(v50, v51, &v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      *(_WORD *)(v48 + 22) = 2160;
      *(void *)&long long v96 = 1752392040;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v48 + 32) = 2081;
      swift_bridgeObjectRetain();
      *(void *)&long long v96 = sub_1008FA0F0(v90, (unint64_t)v25, &v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "stopLiveLocations: Got handle from fmf following %{private,mask.hash}s for findMyId %{private,mask.hash}s", (uint8_t *)v48, 0x2Au);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    uint64_t v22 = v82;
    if (!*((void *)&v98 + 1)) {
      goto LABEL_33;
    }
  }
  swift_bridgeObjectRetain();
  _s12searchpartyd20MessagingDestinationV6stringACSgSS_tcfC_0();
  if (!v54)
  {
LABEL_33:
    *(void *)&long long v96 = 0;
    *((void *)&v96 + 1) = 0xE000000000000000;
    _StringGuts.grow(_:)(67);
    v65._uint64_t countAndFlagsBits = 0xD000000000000031;
    v65._object = (void *)0x8000000101406470;
    String.append(_:)(v65);
    v66._uint64_t countAndFlagsBits = v90;
    v66._object = v25;
    String.append(_:)(v66);
    v67._object = (void *)0x80000001014064B0;
    v67._uint64_t countAndFlagsBits = 0xD000000000000010;
    String.append(_:)(v67);
    long long v68 = v96;
    if (qword_101636B00 != -1) {
      swift_once();
    }
    uint64_t v69 = type metadata accessor for Logger();
    sub_100010324(v69, (uint64_t)qword_10170DE98);
    swift_bridgeObjectRetain_n();
    char v70 = Logger.logObject.getter();
    os_log_type_t v71 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v70, v71))
    {
      uint64_t v72 = (uint8_t *)swift_slowAlloc();
      uint64_t v73 = swift_slowAlloc();
      id v82 = v22;
      *(void *)&long long v96 = v73;
      *(_DWORD *)uint64_t v72 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v95 = sub_1008FA0F0(v68, *((unint64_t *)&v68 + 1), (uint64_t *)&v96);
      uint64_t v25 = v88;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v70, v71, "LiveLocations: %s", v72, 0xCu);
      swift_arrayDestroy();
      uint64_t v22 = v82;
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
    uint64_t v63 = v87;
    uint64_t v64 = v86;
    if (qword_101637440 != -1) {
      swift_once();
    }
    swift_retain();
    sub_1010DDDB8(v68, *((uint64_t *)&v68 + 1));
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v74 = type metadata accessor for Transaction();
    __chkstk_darwin(v74);
    uint64_t v75 = v90;
    *(&v79 - 4) = (uint64_t)v22;
    *(&v79 - 3) = v75;
    uint64_t v76 = (uint64_t)v85;
    *(&v79 - 2) = (uint64_t)v25;
    *(&v79 - 1) = v76;
    static Transaction.named<A>(_:with:)();
    goto LABEL_41;
  }
  uint64_t v55 = *((void *)v22 + 4);
  uint64_t v56 = (uint64_t)v84;
  *os_log_type_t v84 = v52;
  *(void *)(v56 + 8) = v53;
  *(void *)(v56 + 16) = v54;
  swift_storeEnumTagMultiPayload();
  if (*(void *)(v55 + 440))
  {
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v57 = dispatch thunk of AsynchronousCache.value(for:)();
    swift_release();
    *(void *)&long long v96 = v57;
    sub_10000588C(&qword_101645788);
    sub_100062734(&qword_101645790, &qword_101645788);
    uint64_t v58 = Publisher.eraseToAnyPublisher()();
    swift_release();
    sub_100768C9C(v56, (uint64_t (*)(void))type metadata accessor for BeaconSharingSessionContext);
    swift_bridgeObjectRelease();
    *(void *)&long long v96 = v58;
    uint64_t v59 = (void *)swift_allocObject();
    uint64_t v60 = v90;
    v59[2] = v22;
    v59[3] = v60;
    uint64_t v61 = v85;
    v59[4] = v25;
    v59[5] = v61;
    swift_bridgeObjectRetain();
    swift_retain();
    id v62 = v61;
    Publisher.oneshot(_:)();
    swift_release();
    swift_release();
    uint64_t v63 = v87;
    uint64_t v64 = v86;
LABEL_41:
    sub_10000588C(&qword_1016552B0);
    uint64_t v77 = swift_allocObject();
    *(_OWORD *)(v77 + 16) = xmmword_101342130;
    *(void *)(v77 + 32) = v64;
    *(void *)(v77 + 40) = v63;
    swift_bridgeObjectRetain();
    sub_100739248(v77);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

void sub_100762C84()
{
  if (sub_100757F90()) {
    goto LABEL_7;
  }
  if (qword_101637080 != -1) {
    swift_once();
  }
  swift_retain();
  OS_dispatch_queue.sync<A>(execute:)();
  swift_release();
  v19[10] = v16;
  v19[11] = v17;
  v19[12] = v18;
  v19[6] = v12;
  v19[7] = v13;
  v19[8] = v14;
  v19[9] = v15;
  v19[2] = v8;
  v19[3] = v9;
  v19[4] = v10;
  v19[5] = v11;
  v19[0] = aBlock;
  v19[1] = v7;
  sub_100551984((uint64_t)v19);
  if ((BYTE8(v19[0]) & 1) == 0)
  {
LABEL_7:
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v3 = type metadata accessor for Logger();
    sub_100010324(v3, (uint64_t)qword_10170EC30);
    uint64_t v1 = Logger.logObject.getter();
    os_log_type_t v4 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v1, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, v4, "LocationMonitor: secureLocations feature is disabled. Not proceeding with starting monitor", v5, 2u);
      swift_slowDealloc();
    }
  }
  else
  {
    swift_retain();
    char v0 = sub_100D0C0B0();
    swift_release();
    if ((v0 & 1) == 0) {
      return;
    }
    uint64_t v1 = [self sharedInstance];
    *(void *)&long long v8 = sub_10074506C;
    *((void *)&v8 + 1) = 0;
    *(void *)&long long aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1) = 1107296256;
    *(void *)&long long v7 = sub_100769474;
    *((void *)&v7 + 1) = &unk_1015D2FB0;
    os_log_type_t v2 = _Block_copy(&aBlock);
    [v1 startLocationMonitoring:v2];
    _Block_release(v2);
  }
}

id sub_100762F00(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SecureLocation();
  uint64_t v5 = __chkstk_darwin(v4);
  long long v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(a1 + *(int *)(v5 + 56));
  if ((unint64_t)(v8 - 1) >= 5)
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v9 = type metadata accessor for Logger();
    sub_100010324(v9, (uint64_t)qword_10170EC30);
    sub_100768C34(a1, (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for SecureLocation);
    long long v10 = Logger.logObject.getter();
    os_log_type_t v11 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v10, v11))
    {
      v21[0] = a2;
      long long v12 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)long long v12 = 134217984;
      uint64_t v13 = *(void *)&v7[*(int *)(v4 + 56)];
      sub_100768C9C((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for SecureLocation);
      v21[1] = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Unhandled Activity state:%ld", v12, 0xCu);
      swift_slowDealloc();
    }
    else
    {
      sub_100768C9C((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for SecureLocation);
    }

    uint64_t v8 = 0;
  }
  id v14 = [objc_allocWithZone((Class)NSNumber) initWithDouble:*(double *)(a1 + 24)];
  id v15 = [objc_allocWithZone((Class)NSNumber) initWithDouble:*(double *)(a1 + 16)];
  id v16 = objc_allocWithZone((Class)BMFindMyLocationChangeEvent);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  NSString v17 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  NSString v18 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v19 = [v16 initWithIDSHandle:v17 locationChangeType:0 motionActivityState:v8 latitude:v14 longitude:v15 name:v18];

  return v19;
}

unint64_t sub_100763200(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1015A25C8, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 6) {
    return 6;
  }
  else {
    return v3;
  }
}

unint64_t sub_10076324C(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1015A2678, v2);
  swift_bridgeObjectRelease();
  if (v3 >= 9) {
    return 9;
  }
  else {
    return v3;
  }
}

uint64_t sub_100763298@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_10000588C(&qword_10164D098);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100763980();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    LOBYTE(v42) = 0;
    uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v11 = v10;
    LOBYTE(v42) = 1;
    swift_bridgeObjectRetain();
    uint64_t v39 = KeyedDecodingContainer.decode(_:forKey:)();
    uint64_t v40 = v9;
    char v44 = 2;
    uint64_t v13 = v12;
    sub_1007639D4();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v41 = v13;
    LODWORD(v13) = v42;
    LOBYTE(v42) = 3;
    uint64_t v14 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v16 = v15;
    uint64_t v36 = v14;
    int v43 = v13;
    uint64_t v17 = sub_10000588C(&qword_101654A30);
    char v44 = 4;
    uint64_t v18 = sub_1004CB3CC((unint64_t *)&qword_1016475B0);
    uint64_t v38 = v16;
    swift_bridgeObjectRetain();
    uint64_t v37 = v18;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    char v44 = 5;
    uint64_t v35 = v42;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    unint64_t v33 = a2;
    uint64_t v34 = v17;
    uint64_t v19 = v42;
    LOBYTE(v42) = 6;
    swift_bridgeObjectRetain();
    uint64_t v20 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)();
    uint64_t v22 = v21;
    uint64_t v32 = v20;
    sub_10000588C(&qword_10164D0B0);
    char v44 = 7;
    sub_100763A28();
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    uint64_t v31 = v11;
    uint64_t v23 = v42;
    char v44 = 8;
    swift_bridgeObjectRetain();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v24 = v42;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v25 = v35;
    swift_bridgeObjectRelease();
    uint64_t v26 = v38;
    swift_bridgeObjectRelease();
    uint64_t v27 = v41;
    swift_bridgeObjectRelease();
    uint64_t v28 = v31;
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v30 = v33;
    *unint64_t v33 = v40;
    v30[1] = v28;
    void v30[2] = v39;
    v30[3] = v27;
    *((unsigned char *)v30 + 32) = v43;
    v30[5] = v36;
    v30[6] = v26;
    v30[7] = v25;
    v30[8] = v19;
    v30[9] = v32;
    v30[10] = v22;
    v30[11] = v23;
    v30[12] = v24;
  }
  return result;
}

unint64_t sub_100763980()
{
  unint64_t result = qword_10164D0A0;
  if (!qword_10164D0A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164D0A0);
  }
  return result;
}

unint64_t sub_1007639D4()
{
  unint64_t result = qword_10164D0A8;
  if (!qword_10164D0A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164D0A8);
  }
  return result;
}

unint64_t sub_100763A28()
{
  unint64_t result = qword_10164D0B8;
  if (!qword_10164D0B8)
  {
    sub_10000592C(&qword_10164D0B0);
    sub_1004CB3CC((unint64_t *)&qword_1016475B0);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164D0B8);
  }
  return result;
}

unint64_t sub_100763AC4()
{
  unint64_t result = qword_10164D0C8;
  if (!qword_10164D0C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164D0C8);
  }
  return result;
}

unint64_t sub_100763B18()
{
  unint64_t result = qword_10164D0D8;
  if (!qword_10164D0D8)
  {
    sub_10000592C(&qword_10164D0B0);
    sub_1004CB3CC((unint64_t *)&qword_10163CCD8);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164D0D8);
  }
  return result;
}

unint64_t sub_100763BB4()
{
  unint64_t result = qword_10164D0E0;
  if (!qword_10164D0E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164D0E0);
  }
  return result;
}

uint64_t sub_100763C08()
{
  return sub_100768DCC((void (*)(void))&_swift_release, (void (*)(void))&_swift_release, 40);
}

uint64_t sub_100763C38(uint64_t a1)
{
  return sub_100750F1C(a1, *(void *)(v1 + 16), *(void (**)(id))(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_100763C44(uint64_t a1)
{
  return sub_100753810(a1, *(uint64_t (**)(uint64_t))(v1 + 16), *(void *)(v1 + 24), "FetchConfig - error %s");
}

uint64_t sub_100763C68(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for String.Encoding();
  __chkstk_darwin(v6 - 8);
  static String.Encoding.utf8.getter();
  uint64_t v7 = String.init(data:encoding:)();
  uint64_t v9 = &qword_101637000;
  if (v8)
  {
    uint64_t v10 = v7;
    unint64_t v11 = v8;
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v12 = type metadata accessor for Logger();
    sub_100010324(v12, (uint64_t)qword_10170EC30);
    swift_bridgeObjectRetain();
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.debug.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v27 = a3;
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      uint64_t v28 = a4;
      v30[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v15 = 136315138;
      swift_bridgeObjectRetain();
      uint64_t v29 = sub_1008FA0F0(v10, v11, v30);
      a3 = v27;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease_n();
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "jsonString %s", v15, 0xCu);
      swift_arrayDestroy();
      a4 = v28;
      swift_slowDealloc();
      uint64_t v9 = &qword_101637000;
      swift_slowDealloc();
    }
    else
    {

      swift_bridgeObjectRelease_n();
    }
  }
  type metadata accessor for JSONDecoder();
  swift_allocObject();
  JSONDecoder.init()();
  sub_100767754();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)();
  uint64_t v16 = v30[2];
  if (v9[14] != -1) {
    swift_once();
  }
  uint64_t v17 = type metadata accessor for Logger();
  sub_100010324(v17, (uint64_t)qword_10170EC30);
  uint64_t v18 = Logger.logObject.getter();
  os_log_type_t v19 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Decoded push location payload successfully", v20, 2u);
    swift_slowDealloc();
  }

  uint64_t v21 = sub_100609134(v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_retain();
  uint64_t v22 = a3;
  uint64_t v23 = sub_100757AB8((uint64_t)v21, a3);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v24 = type metadata accessor for Transaction();
  __chkstk_darwin(v24);
  *(&v26 - 2) = v22;
  *(&v26 - 1) = (uint64_t)v23;
  static Transaction.named<A>(_:with:)();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, void))(a4 + 16))(a4, 0);
  return swift_release();
}

void sub_100764248(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v95 = a5;
  uint64_t v96 = a4;
  int v118 = a2;
  uint64_t v97 = a1;
  uint64_t v6 = type metadata accessor for SecureLocation();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v9 = __chkstk_darwin(v8);
  id v113 = (void *)((char *)&v93 - v10);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v93 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v93 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v106 = a3;
  if (*(void *)(*(void *)(a3 + 104) + 16))
  {
    uint64_t v115 = (char *)&v93 - v20;
    uint64_t v124 = v23;
    uint64_t v125 = v22;
    long long v98 = (uint64_t *)v21;
    uint64_t v99 = v19;
    if (qword_101637080 != -1) {
      swift_once();
    }
    swift_retain();
    OS_dispatch_queue.sync<A>(execute:)();
    swift_release();
    long long v152 = v139;
    long long v153 = v140;
    long long v154 = v141;
    long long v148 = v135;
    long long v149 = v136;
    long long v150 = v137;
    long long v151 = v138;
    long long v144 = v131;
    long long v145 = v132;
    long long v146 = v133;
    long long v147 = v134;
    long long v142 = v129;
    long long v143 = v130;
    sub_100551984((uint64_t)&v142);
    uint64_t v105 = *(void *)(v97 + 16);
    if (v105)
    {
      double v24 = *(double *)&v143;
      unint64_t v104 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
      uint64_t v103 = v97 + v104;
      uint64_t v25 = *(void *)(v7 + 72);
      os_log_type_t v94 = &v127;
      swift_bridgeObjectRetain();
      uint64_t v26 = 0;
      uint64_t v27 = _swiftEmptyArrayStorage;
      *(void *)&long long v28 = 136315906;
      long long v112 = v28;
      uint64_t v111 = (char *)&type metadata for Any + 8;
      *(void *)&long long v28 = 136315650;
      long long v110 = v28;
      *(void *)&long long v28 = 136315394;
      long long v93 = v28;
      uint64_t v29 = (uint64_t)v115;
      unint64_t v100 = v18;
      uint64_t v101 = v15;
      uint64_t v102 = v25;
      while (1)
      {
        uint64_t v109 = v26;
        sub_100768C34(v103 + v25 * v26, v29, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        sub_100768C34(v29, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        uint64_t v30 = *(void *)(v106 + 104);
        uint64_t v31 = (uint64_t)v124;
        if (!*(void *)(v30 + 16)) {
          goto LABEL_50;
        }
        uint64_t v122 = *(void *)(v30 + 16);
        uint64_t v107 = v27;
        uint64_t v108 = swift_bridgeObjectRetain();
        uint64_t v32 = (unint64_t *)(v108 + 56);
        while (1)
        {
          unint64_t v33 = *(v32 - 2);
          uint64_t v120 = *(v32 - 1);
          unint64_t v34 = *v32;
          double v35 = *((double *)v32 + 3);
          double v36 = *((double *)v32 + 4);
          unint64_t v37 = v32[5];
          unint64_t v38 = v32[7];
          uint64_t v123 = v32[6];
          unint64_t v39 = v32[2];
          uint64_t v40 = qword_101637070;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v40 != -1) {
            swift_once();
          }
          uint64_t v41 = type metadata accessor for Logger();
          uint64_t v42 = sub_100010324(v41, (uint64_t)qword_10170EC30);
          sub_100768C34(v29, v31, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
          uint64_t v119 = v42;
          int v43 = Logger.logObject.getter();
          os_log_type_t v44 = static os_log_type_t.info.getter();
          uint64_t v121 = v43;
          if (os_log_type_enabled(v43, v44))
          {
            uint64_t v45 = swift_slowAlloc();
            id v117 = (id)swift_slowAlloc();
            uint64_t v126 = (uint64_t)v117;
            *(_DWORD *)uint64_t v45 = v112;
            swift_bridgeObjectRetain();
            *(void *)(v45 + 4) = sub_1008FA0F0(v120, v34, &v126);
            swift_bridgeObjectRelease();
            *(_WORD *)(v45 + 12) = 2080;
            if (v38) {
              uint64_t v46 = v123;
            }
            else {
              uint64_t v46 = 1818848800;
            }
            if (v38) {
              unint64_t v47 = v38;
            }
            else {
              unint64_t v47 = 0xE400000000000000;
            }
            swift_bridgeObjectRetain();
            *(void *)(v45 + 14) = sub_1008FA0F0(v46, v47, &v126);
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            *(_WORD *)(v45 + 22) = 2080;
            uint64_t v48 = *v124;
            unint64_t v49 = v124[1];
            swift_bridgeObjectRetain();
            uint64_t v50 = v48;
            uint64_t v31 = (uint64_t)v124;
            *(void *)(v45 + 24) = sub_1008FA0F0(v50, v49, &v126);
            swift_bridgeObjectRelease();
            sub_100768C9C(v31, (uint64_t (*)(void))type metadata accessor for SecureLocation);
            *(_WORD *)(v45 + 32) = 2048;
            *(void *)(v45 + 34) = v37;
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            unint64_t v51 = v121;
            _os_log_impl((void *)&_mh_execute_header, v121, v44, "LabelledLocations Checking label %s %s %s %f", (uint8_t *)v45, 0x2Au);
            swift_arrayDestroy();
            swift_slowDealloc();
            uint64_t v29 = (uint64_t)v115;
            swift_slowDealloc();
          }
          else
          {
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            sub_100768C9C(v31, (uint64_t (*)(void))type metadata accessor for SecureLocation);

            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
          }
          sub_100768C34(v29, v125, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          if (!v38 && (v118 & 1) != 0)
          {
            sub_100768C9C(v125, (uint64_t (*)(void))type metadata accessor for SecureLocation);
            goto LABEL_25;
          }
          uint64_t v63 = v113;
          sub_100768C34(v125, (uint64_t)v113, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          if ((v118 & 1) == 0) {
            break;
          }
          sub_100768C9C((uint64_t)v63, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          sub_100768C9C(v125, (uint64_t (*)(void))type metadata accessor for SecureLocation);
LABEL_9:
          swift_bridgeObjectRelease();
LABEL_10:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v32 += 11;
          if (!--v122)
          {
            swift_bridgeObjectRelease();
            uint64_t v18 = v100;
            uint64_t v15 = v101;
            goto LABEL_49;
          }
        }
        uint64_t v121 = v33;
        if (!v38)
        {
          swift_bridgeObjectRetain();
          sub_100768C9C((uint64_t)v63, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          sub_100768C9C(v125, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_10;
        }
        if (v123 == *v63 && v38 == v63[1])
        {
          swift_bridgeObjectRetain();
          sub_100768C9C((uint64_t)v63, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          sub_100768C9C(v125, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          swift_bridgeObjectRelease();
          unint64_t v33 = v121;
        }
        else
        {
          char v64 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRetain();
          sub_100768C9C((uint64_t)v63, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          sub_100768C9C(v125, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          swift_bridgeObjectRelease();
          unint64_t v33 = v121;
          if ((v64 & 1) == 0)
          {
            swift_bridgeObjectRelease();
            uint64_t v31 = (uint64_t)v124;
            goto LABEL_10;
          }
        }
LABEL_25:
        id v52 = [objc_allocWithZone((Class)CLLocation) initWithLatitude:v35 longitude:v36];
        id v116 = [objc_allocWithZone((Class)CLLocation) initWithLatitude:*(double *)(v29 + 24) longitude:*(double *)(v29 + 16)];
        id v117 = v52;
        [v52 distanceFromLocation:];
        double v54 = v53;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        unint64_t v55 = v34;
        uint64_t v56 = Logger.logObject.getter();
        os_log_type_t v57 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v56, v57))
        {
          uint64_t v58 = swift_slowAlloc();
          unint64_t v114 = v39;
          uint64_t v59 = v58;
          uint64_t v60 = swift_slowAlloc();
          uint64_t v121 = v33;
          uint64_t v126 = v60;
          *(_DWORD *)uint64_t v59 = v110;
          swift_bridgeObjectRetain();
          *(void *)(v59 + 4) = sub_1008FA0F0(v120, v55, &v126);
          swift_bridgeObjectRelease();
          *(_WORD *)(v59 + 12) = 2080;
          if (v38) {
            uint64_t v61 = v123;
          }
          else {
            uint64_t v61 = 0x206C696E20;
          }
          if (v38) {
            unint64_t v62 = v38;
          }
          else {
            unint64_t v62 = 0xE500000000000000;
          }
          swift_bridgeObjectRetain();
          *(void *)(v59 + 14) = sub_1008FA0F0(v61, v62, &v126);
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          *(_WORD *)(v59 + 22) = 2048;
          *(double *)(v59 + 24) = v54;
          _os_log_impl((void *)&_mh_execute_header, v56, v57, "LabelledLocations %s %s Label Distance %f", (uint8_t *)v59, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }
        uint64_t v31 = (uint64_t)v124;
        uint64_t v29 = (uint64_t)v115;
        if (v54 > v24)
        {

          goto LABEL_9;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v18 = v100;
        swift_beginAccess();
        uint64_t v65 = v29;
        uint64_t v66 = v99;
        Swift::String v67 = &v18[*(int *)(v99 + 64)];
        *(void *)Swift::String v67 = v120;
        *((void *)v67 + 1) = v55;
        swift_bridgeObjectRelease();
        long long v68 = v98;
        sub_100768C34(v65, (uint64_t)v98, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        uint64_t v69 = Logger.logObject.getter();
        os_log_type_t v70 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v69, v70))
        {
          uint64_t v71 = swift_slowAlloc();
          uint64_t v123 = swift_slowAlloc();
          v128[0] = v123;
          *(_DWORD *)uint64_t v71 = v93;
          uint64_t v72 = (uint64_t *)&v18[*(int *)(v66 + 64)];
          uint64_t v73 = v72[1];
          uint64_t v126 = *v72;
          uint64_t v127 = v73;
          swift_bridgeObjectRetain();
          sub_10000588C(&qword_101644320);
          uint64_t v74 = String.init<A>(describing:)();
          uint64_t v126 = sub_1008FA0F0(v74, v75, v128);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v71 + 12) = 2080;
          uint64_t v76 = *v68;
          unint64_t v77 = v68[1];
          swift_bridgeObjectRetain();
          uint64_t v126 = sub_1008FA0F0(v76, v77, v128);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_100768C9C((uint64_t)v68, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          _os_log_impl((void *)&_mh_execute_header, v69, v70, "LabelledLocations Adding label %s to location %s", (uint8_t *)v71, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_100768C9C((uint64_t)v68, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        }

        uint64_t v15 = v101;
        uint64_t v29 = (uint64_t)v115;
LABEL_49:
        uint64_t v27 = v107;
LABEL_50:
        swift_beginAccess();
        sub_100768C34((uint64_t)v18, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v27 = (void *)sub_100A712C4(0, v27[2] + 1, 1, (unint64_t)v27);
        }
        unint64_t v79 = v27[2];
        unint64_t v78 = v27[3];
        if (v79 >= v78 >> 1) {
          uint64_t v27 = (void *)sub_100A712C4(v78 > 1, v79 + 1, 1, (unint64_t)v27);
        }
        uint64_t v80 = v109 + 1;
        void v27[2] = v79 + 1;
        uint64_t v81 = (uint64_t)v27 + v104 + v79 * v102;
        uint64_t v25 = v102;
        sub_100767F00((uint64_t)v15, v81, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        sub_100768C9C(v29, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        uint64_t v26 = v80;
        sub_100768C9C((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        if (v80 == v105)
        {
          swift_bridgeObjectRelease();
          goto LABEL_64;
        }
      }
    }
    uint64_t v27 = _swiftEmptyArrayStorage;
LABEL_64:
    sub_100749040((uint64_t)v27, 1);
    sub_10073DD2C();
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v89 = type metadata accessor for Logger();
    sub_100010324(v89, (uint64_t)qword_10170EC30);
    uint64_t v90 = Logger.logObject.getter();
    os_log_type_t v91 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v90, v91))
    {
      uint64_t v92 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v92 = 0;
      _os_log_impl((void *)&_mh_execute_header, v90, v91, "LabelledLocations: Completed updating locations with updated labels", v92, 2u);
      swift_slowDealloc();
    }

    Transaction.capture()();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v82 = type metadata accessor for Logger();
    sub_100010324(v82, (uint64_t)qword_10170EC30);
    uint64_t v83 = Logger.logObject.getter();
    os_log_type_t v84 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v83, v84))
    {
      uint64_t v85 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v85 = 0;
      _os_log_impl((void *)&_mh_execute_header, v83, v84, "LabelledLocations - No labels - nothing to resolve", v85, 2u);
      swift_slowDealloc();
    }

    sub_100749040(v97, 1);
    sub_10073DD2C();
    uint64_t v86 = Logger.logObject.getter();
    os_log_type_t v87 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v86, v87))
    {
      uint64_t v88 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v88 = 0;
      _os_log_impl((void *)&_mh_execute_header, v86, v87, "LabelledLocations: Completed updating locations with updated labels", v88, 2u);
      swift_slowDealloc();
    }

    Transaction.capture()();
  }
}

uint64_t sub_1007652DC(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v95 = a4;
  uint64_t v96 = a5;
  int v118 = a2;
  uint64_t v97 = a1;
  uint64_t v6 = type metadata accessor for SecureLocation();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v9 = __chkstk_darwin(v8);
  id v113 = (void *)((char *)&v93 - v10);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v93 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v93 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v106 = a3;
  if (*(void *)(*(void *)(a3 + 104) + 16))
  {
    uint64_t v115 = (char *)&v93 - v20;
    uint64_t v124 = v23;
    uint64_t v125 = v22;
    long long v98 = (uint64_t *)v21;
    uint64_t v99 = v19;
    if (qword_101637080 != -1) {
      swift_once();
    }
    swift_retain();
    OS_dispatch_queue.sync<A>(execute:)();
    swift_release();
    long long v152 = v139;
    long long v153 = v140;
    long long v154 = v141;
    long long v148 = v135;
    long long v149 = v136;
    long long v150 = v137;
    long long v151 = v138;
    long long v144 = v131;
    long long v145 = v132;
    long long v146 = v133;
    long long v147 = v134;
    long long v142 = v129;
    long long v143 = v130;
    sub_100551984((uint64_t)&v142);
    uint64_t v105 = *(void *)(v97 + 16);
    if (v105)
    {
      double v24 = *(double *)&v143;
      unint64_t v104 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
      uint64_t v103 = v97 + v104;
      uint64_t v25 = *(void *)(v7 + 72);
      os_log_type_t v94 = &v127;
      swift_bridgeObjectRetain();
      uint64_t v26 = 0;
      uint64_t v27 = _swiftEmptyArrayStorage;
      *(void *)&long long v28 = 136315906;
      long long v112 = v28;
      uint64_t v111 = (char *)&type metadata for Any + 8;
      *(void *)&long long v28 = 136315650;
      long long v110 = v28;
      *(void *)&long long v28 = 136315394;
      long long v93 = v28;
      uint64_t v29 = (uint64_t)v115;
      unint64_t v100 = v18;
      uint64_t v101 = v15;
      uint64_t v102 = v25;
      while (1)
      {
        uint64_t v109 = v26;
        sub_100768C34(v103 + v25 * v26, v29, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        sub_100768C34(v29, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        uint64_t v30 = *(void *)(v106 + 104);
        uint64_t v31 = (uint64_t)v124;
        if (!*(void *)(v30 + 16)) {
          goto LABEL_50;
        }
        uint64_t v122 = *(void *)(v30 + 16);
        uint64_t v107 = v27;
        uint64_t v108 = swift_bridgeObjectRetain();
        uint64_t v32 = (unint64_t *)(v108 + 56);
        while (1)
        {
          unint64_t v33 = *(v32 - 2);
          uint64_t v120 = *(v32 - 1);
          unint64_t v34 = *v32;
          double v35 = *((double *)v32 + 3);
          double v36 = *((double *)v32 + 4);
          unint64_t v37 = v32[5];
          unint64_t v38 = v32[7];
          uint64_t v123 = v32[6];
          unint64_t v39 = v32[2];
          uint64_t v40 = qword_101637070;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v40 != -1) {
            swift_once();
          }
          uint64_t v41 = type metadata accessor for Logger();
          uint64_t v42 = sub_100010324(v41, (uint64_t)qword_10170EC30);
          sub_100768C34(v29, v31, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
          swift_bridgeObjectRetain_n();
          uint64_t v119 = v42;
          int v43 = Logger.logObject.getter();
          os_log_type_t v44 = static os_log_type_t.info.getter();
          uint64_t v121 = v43;
          if (os_log_type_enabled(v43, v44))
          {
            uint64_t v45 = swift_slowAlloc();
            id v117 = (id)swift_slowAlloc();
            uint64_t v126 = (uint64_t)v117;
            *(_DWORD *)uint64_t v45 = v112;
            swift_bridgeObjectRetain();
            *(void *)(v45 + 4) = sub_1008FA0F0(v120, v34, &v126);
            swift_bridgeObjectRelease();
            *(_WORD *)(v45 + 12) = 2080;
            if (v38) {
              uint64_t v46 = v123;
            }
            else {
              uint64_t v46 = 1818848800;
            }
            if (v38) {
              unint64_t v47 = v38;
            }
            else {
              unint64_t v47 = 0xE400000000000000;
            }
            swift_bridgeObjectRetain();
            *(void *)(v45 + 14) = sub_1008FA0F0(v46, v47, &v126);
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease();
            *(_WORD *)(v45 + 22) = 2080;
            uint64_t v48 = *v124;
            unint64_t v49 = v124[1];
            swift_bridgeObjectRetain();
            uint64_t v50 = v48;
            uint64_t v31 = (uint64_t)v124;
            *(void *)(v45 + 24) = sub_1008FA0F0(v50, v49, &v126);
            swift_bridgeObjectRelease();
            sub_100768C9C(v31, (uint64_t (*)(void))type metadata accessor for SecureLocation);
            *(_WORD *)(v45 + 32) = 2048;
            *(void *)(v45 + 34) = v37;
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            unint64_t v51 = v121;
            _os_log_impl((void *)&_mh_execute_header, v121, v44, "LabelledLocations Checking label %s %s %s %f", (uint8_t *)v45, 0x2Au);
            swift_arrayDestroy();
            swift_slowDealloc();
            uint64_t v29 = (uint64_t)v115;
            swift_slowDealloc();
          }
          else
          {
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            sub_100768C9C(v31, (uint64_t (*)(void))type metadata accessor for SecureLocation);

            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
          }
          sub_100768C34(v29, v125, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          if (!v38 && (v118 & 1) != 0)
          {
            sub_100768C9C(v125, (uint64_t (*)(void))type metadata accessor for SecureLocation);
            goto LABEL_25;
          }
          uint64_t v63 = v113;
          sub_100768C34(v125, (uint64_t)v113, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          if ((v118 & 1) == 0) {
            break;
          }
          sub_100768C9C((uint64_t)v63, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          sub_100768C9C(v125, (uint64_t (*)(void))type metadata accessor for SecureLocation);
LABEL_9:
          swift_bridgeObjectRelease();
LABEL_10:
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          v32 += 11;
          if (!--v122)
          {
            swift_bridgeObjectRelease();
            uint64_t v18 = v100;
            uint64_t v15 = v101;
            goto LABEL_49;
          }
        }
        uint64_t v121 = v33;
        if (!v38)
        {
          swift_bridgeObjectRetain();
          sub_100768C9C((uint64_t)v63, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          sub_100768C9C(v125, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          goto LABEL_10;
        }
        if (v123 == *v63 && v38 == v63[1])
        {
          swift_bridgeObjectRetain();
          sub_100768C9C((uint64_t)v63, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          sub_100768C9C(v125, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          swift_bridgeObjectRelease();
          unint64_t v33 = v121;
        }
        else
        {
          char v64 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRetain();
          sub_100768C9C((uint64_t)v63, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          sub_100768C9C(v125, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          swift_bridgeObjectRelease();
          unint64_t v33 = v121;
          if ((v64 & 1) == 0)
          {
            swift_bridgeObjectRelease();
            uint64_t v31 = (uint64_t)v124;
            goto LABEL_10;
          }
        }
LABEL_25:
        id v52 = [objc_allocWithZone((Class)CLLocation) initWithLatitude:v35 longitude:v36];
        id v116 = [objc_allocWithZone((Class)CLLocation) initWithLatitude:*(double *)(v29 + 24) longitude:*(double *)(v29 + 16)];
        id v117 = v52;
        [v52 distanceFromLocation:];
        double v54 = v53;
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        swift_bridgeObjectRetain_n();
        unint64_t v55 = v34;
        uint64_t v56 = Logger.logObject.getter();
        os_log_type_t v57 = static os_log_type_t.info.getter();
        if (os_log_type_enabled(v56, v57))
        {
          uint64_t v58 = swift_slowAlloc();
          unint64_t v114 = v39;
          uint64_t v59 = v58;
          uint64_t v60 = swift_slowAlloc();
          uint64_t v121 = v33;
          uint64_t v126 = v60;
          *(_DWORD *)uint64_t v59 = v110;
          swift_bridgeObjectRetain();
          *(void *)(v59 + 4) = sub_1008FA0F0(v120, v55, &v126);
          swift_bridgeObjectRelease();
          *(_WORD *)(v59 + 12) = 2080;
          if (v38) {
            uint64_t v61 = v123;
          }
          else {
            uint64_t v61 = 0x206C696E20;
          }
          if (v38) {
            unint64_t v62 = v38;
          }
          else {
            unint64_t v62 = 0xE500000000000000;
          }
          swift_bridgeObjectRetain();
          *(void *)(v59 + 14) = sub_1008FA0F0(v61, v62, &v126);
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease();
          *(_WORD *)(v59 + 22) = 2048;
          *(double *)(v59 + 24) = v54;
          _os_log_impl((void *)&_mh_execute_header, v56, v57, "LabelledLocations %s %s Label Distance %f", (uint8_t *)v59, 0x20u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {

          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
          swift_bridgeObjectRelease_n();
        }
        uint64_t v31 = (uint64_t)v124;
        uint64_t v29 = (uint64_t)v115;
        if (v54 > v24)
        {

          goto LABEL_9;
        }
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v18 = v100;
        swift_beginAccess();
        uint64_t v65 = v29;
        uint64_t v66 = v99;
        Swift::String v67 = &v18[*(int *)(v99 + 64)];
        *(void *)Swift::String v67 = v120;
        *((void *)v67 + 1) = v55;
        swift_bridgeObjectRelease();
        long long v68 = v98;
        sub_100768C34(v65, (uint64_t)v98, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        uint64_t v69 = Logger.logObject.getter();
        os_log_type_t v70 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v69, v70))
        {
          uint64_t v71 = swift_slowAlloc();
          uint64_t v123 = swift_slowAlloc();
          v128[0] = v123;
          *(_DWORD *)uint64_t v71 = v93;
          uint64_t v72 = (uint64_t *)&v18[*(int *)(v66 + 64)];
          uint64_t v73 = v72[1];
          uint64_t v126 = *v72;
          uint64_t v127 = v73;
          swift_bridgeObjectRetain();
          sub_10000588C(&qword_101644320);
          uint64_t v74 = String.init<A>(describing:)();
          uint64_t v126 = sub_1008FA0F0(v74, v75, v128);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(_WORD *)(v71 + 12) = 2080;
          uint64_t v76 = *v68;
          unint64_t v77 = v68[1];
          swift_bridgeObjectRetain();
          uint64_t v126 = sub_1008FA0F0(v76, v77, v128);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_100768C9C((uint64_t)v68, (uint64_t (*)(void))type metadata accessor for SecureLocation);
          _os_log_impl((void *)&_mh_execute_header, v69, v70, "LabelledLocations Adding label %s to location %s", (uint8_t *)v71, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_100768C9C((uint64_t)v68, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        }

        uint64_t v15 = v101;
        uint64_t v29 = (uint64_t)v115;
LABEL_49:
        uint64_t v27 = v107;
LABEL_50:
        swift_beginAccess();
        sub_100768C34((uint64_t)v18, (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v27 = (void *)sub_100A712C4(0, v27[2] + 1, 1, (unint64_t)v27);
        }
        unint64_t v79 = v27[2];
        unint64_t v78 = v27[3];
        if (v79 >= v78 >> 1) {
          uint64_t v27 = (void *)sub_100A712C4(v78 > 1, v79 + 1, 1, (unint64_t)v27);
        }
        uint64_t v80 = v109 + 1;
        void v27[2] = v79 + 1;
        uint64_t v81 = (uint64_t)v27 + v104 + v79 * v102;
        uint64_t v25 = v102;
        sub_100767F00((uint64_t)v15, v81, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        sub_100768C9C(v29, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        uint64_t v26 = v80;
        sub_100768C9C((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for SecureLocation);
        if (v80 == v105)
        {
          swift_bridgeObjectRelease();
          goto LABEL_64;
        }
      }
    }
    uint64_t v27 = _swiftEmptyArrayStorage;
LABEL_64:
    uint64_t v90 = v95;
    uint64_t v91 = swift_allocObject();
    uint64_t v92 = v96;
    *(void *)(v91 + 16) = v90;
    *(void *)(v91 + 24) = v92;
    swift_retain();
    swift_retain();
    sub_100604694((uint64_t)v27, 1, (uint64_t)sub_100768B80, v91);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    if (qword_101637070 != -1) {
      swift_once();
    }
    uint64_t v82 = type metadata accessor for Logger();
    sub_100010324(v82, (uint64_t)qword_10170EC30);
    uint64_t v83 = Logger.logObject.getter();
    os_log_type_t v84 = static os_log_type_t.info.getter();
    if (os_log_type_enabled(v83, v84))
    {
      uint64_t v85 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v85 = 0;
      _os_log_impl((void *)&_mh_execute_header, v83, v84, "LabelledLocations - No labels - nothing to resolve", v85, 2u);
      swift_slowDealloc();
    }

    uint64_t v86 = v95;
    uint64_t v87 = swift_allocObject();
    uint64_t v88 = v96;
    *(void *)(v87 + 16) = v86;
    *(void *)(v87 + 24) = v88;
    swift_retain();
    swift_retain();
    sub_100604694(v97, 1, (uint64_t)sub_100769454, v87);
    return swift_release();
  }
}

void sub_100766300(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (qword_101637080 != -1) {
    swift_once();
  }
  uint64_t v7 = qword_10170EC60;
  uint64_t v8 = *(NSObject **)(qword_10170EC60 + 144);
  uint64_t v9 = swift_allocObject();
  long long v10 = a1[8];
  *(_OWORD *)(v9 + 168) = a1[9];
  long long v11 = a1[11];
  *(_OWORD *)(v9 + 184) = a1[10];
  *(_OWORD *)(v9 + 200) = v11;
  *(_OWORD *)(v9 + 216) = a1[12];
  long long v12 = a1[4];
  *(_OWORD *)(v9 + 104) = a1[5];
  long long v13 = a1[7];
  *(_OWORD *)(v9 + 120) = a1[6];
  *(_OWORD *)(v9 + 136) = v13;
  *(_OWORD *)(v9 + 152) = v10;
  long long v14 = *a1;
  *(_OWORD *)(v9 + 40) = a1[1];
  long long v15 = a1[3];
  *(_OWORD *)(v9 + 56) = a1[2];
  *(_OWORD *)(v9 + 72) = v15;
  *(_OWORD *)(v9 + 88) = v12;
  *(void *)(v9 + 16) = v7;
  *(_OWORD *)(v9 + 24) = v14;
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = sub_1007666DC;
  *(void *)(v16 + 24) = v9;
  *(void *)&long long v39 = sub_100132424;
  *((void *)&v39 + 1) = v16;
  *(void *)&long long aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256;
  *(void *)&long long v38 = sub_1000A70B0;
  *((void *)&v38 + 1) = &unk_1015D27B8;
  uint64_t v17 = _Block_copy(&aBlock);
  swift_retain_n();
  sub_1006F40C4((uint64_t)a1);
  swift_retain();
  swift_release();
  dispatch_sync(v8, v17);
  _Block_release(v17);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  swift_release();
  if (isEscapingClosureAtFileLocation)
  {
    __break(1u);
  }
  else
  {
    if (sub_100757F90()) {
      goto LABEL_6;
    }
    swift_retain();
    OS_dispatch_queue.sync<A>(execute:)();
    swift_release();
    long long v47 = v34;
    long long v48 = v35;
    long long v49 = v36;
    long long v43 = v30;
    long long v44 = v31;
    long long v45 = v32;
    long long v46 = v33;
    long long v39 = v26;
    long long v40 = v27;
    long long v41 = v28;
    long long v42 = v29;
    long long aBlock = v24;
    long long v38 = v25;
    sub_100551984((uint64_t)&aBlock);
    if ((BYTE8(aBlock) & 1) == 0) {
LABEL_6:
    }
      sub_100758158();
    id v19 = [self sharedInstance];
    Class isa = Data._bridgeToObjectiveC()().super.isa;
    uint64_t v21 = swift_allocObject();
    *(void *)(v21 + 16) = a4;
    *(void *)(v21 + 24) = a5;
    *(void *)&long long v39 = sub_100766748;
    *((void *)&v39 + 1) = v21;
    *(void *)&long long aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1) = 1107296256;
    *(void *)&long long v38 = sub_100769474;
    *((void *)&v38 + 1) = &unk_1015D2808;
    uint64_t v22 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    [v19 updatedConfigReceived:isa completion:v22];
    _Block_release(v22);
  }
}

unsigned char *sub_1007666A0@<X0>(unsigned char *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_101267870(a1, a2);
}

void *sub_1007666BC@<X0>(unsigned char *a1@<X8>)
{
  return sub_1012678DC(*(void *(**)(uint64_t *__return_ptr))(v1 + 16), a1);
}

void *sub_1007666DC()
{
  return sub_100D0D11C(*(void *)(v0 + 16), (_OWORD *)(v0 + 24));
}

uint64_t sub_1007666E8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1007666F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100766708()
{
  return swift_release();
}

uint64_t sub_100766710()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100766748(uint64_t a1)
{
  return sub_100753C2C(a1, *(uint64_t (**)(void))(v1 + 16));
}

uint64_t sub_100766750(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_100766798()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_1007667E8(uint64_t a1)
{
  return sub_100766B0C(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void))sub_100739BBC);
}

uint64_t sub_100766800(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_101669310);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_100766868(uint64_t a1)
{
  return sub_10073AADC(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void (**)(void *, uint64_t))(v1 + 40), *(void *)(v1 + 48));
}

uint64_t sub_10076688C(uint64_t a1)
{
  return sub_10073AD4C(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1007668B8()
{
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1007668F0@<X0>(uint64_t *a1@<X8>)
{
  return sub_100D0BFB0(v1[2], v1[3], v1[4], a1);
}

void sub_100766910(unsigned char *a1@<X8>)
{
  sub_10080FA10(*(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32), *(void **)(v1 + 40), a1);
}

uint64_t sub_100766930@<X0>(void *a1@<X8>)
{
  return sub_100744A78(v1, a1);
}

uint64_t sub_10076694C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 152, 7);
}

uint64_t sub_1007669BC(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = v1 + 24;
  uint64_t v6 = *(void *)(v1 + 144);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  unsigned char v7[4] = v5;
  v7[5] = v6;
  v7[2] = a1;
  v7[3] = v4;
  v7[1] = sub_100033F68;
  return _swift_task_switch(sub_100733898, 0, 0);
}

uint64_t sub_100766A80()
{
  return sub_100768F68(49);
}

uint64_t sub_100766A8C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100766A9C()
{
  swift_release();
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100766AF4(uint64_t a1)
{
  return sub_100766B0C(a1, (uint64_t (*)(uint64_t, void, void, void, void, void, void))sub_100733AF8);
}

uint64_t sub_100766B0C(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void, void))
{
  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6], v2[7]);
}

uint64_t sub_100766B24()
{
  return sub_1007681D8((void (*)(void))&_swift_release, (void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_100766B50(uint64_t a1)
{
  return sub_10076739C(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_100734C0C);
}

uint64_t sub_100766B68(uint64_t a1)
{
  return sub_1001FD5E4(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_100766B88()
{
  swift_errorRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

void sub_100766BE0()
{
  sub_100734F08(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32), *(void **)(v0 + 40), *(void (**)(id, uint64_t))(v0 + 48), *(void *)(v0 + 56));
}

uint64_t sub_100766BF0()
{
  return sub_100768F68(49);
}

uint64_t sub_100766BF8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100766C08()
{
  uint64_t v1 = type metadata accessor for FMNServerInteractionController.FMNResponseFields();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, ((((((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v5);
}

void sub_100766D00()
{
  uint64_t v1 = *(void *)(type metadata accessor for FMNServerInteractionController.FMNResponseFields() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v4 = (v3 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = v0 + v2;
  uint64_t v8 = *(void *)(v0 + v3);
  uint64_t v9 = *(void **)(v0 + v4);
  uint64_t v10 = *(void *)(v0 + v5);
  uint64_t v11 = *(void *)(v0 + v6);
  uint64_t v12 = v0 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8);
  long long v13 = *(void (**)(id, uint64_t))v12;
  uint64_t v14 = *(void *)(v12 + 8);

  sub_100733F08(v7, v8, v9, v10, v11, v13, v14);
}

uint64_t sub_100766DC0()
{
  return sub_100768F68(49);
}

uint64_t sub_100766DC8()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100766DD8()
{
  return sub_100768F68(49);
}

uint64_t sub_100766DE0()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100766DF0(uint64_t a1)
{
  return a1;
}

uint64_t sub_100766E64()
{
  return sub_1005F50EC(32);
}

void sub_100766E6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100744DC0(a1, a2, a3, *(NSObject **)(v3 + 16), *(void *)(v3 + 24));
}

uint64_t sub_100766E74()
{
  return sub_100767DC8((void (*)(void))&_swift_release);
}

void sub_100766E8C(void *a1, uint64_t a2)
{
  sub_10073AC30(a1, a2, *(void (**)(void *, uint64_t))(v2 + 16));
}

uint64_t sub_100766E9C()
{
  sub_10001CFB8(*(void *)(v0 + 16), *(void *)(v0 + 24));
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100766EE4()
{
  return sub_100768D48(sub_1007497D0);
}

unint64_t sub_100766EFC()
{
  unint64_t result = qword_10164D108;
  if (!qword_10164D108)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164D108);
  }
  return result;
}

uint64_t sub_100766F50()
{
  return sub_100767DC8((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_100766F68(uint64_t a1)
{
  return a1;
}

uint64_t sub_100766FF8(uint64_t a1)
{
  return a1;
}

uint64_t sub_100767088()
{
  return sub_100768DCC((void (*)(void))&_swift_release, (void (*)(void))&_swift_bridgeObjectRelease, 40);
}

void sub_1007670B8()
{
  sub_1010DF678(*(void **)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1007670C4()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1007670D4(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_100767174(uint64_t a1)
{
  return sub_10074C498(a1, v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8], v1[9]);
}

uint64_t sub_1007671A8()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 168, 7);
}

void sub_100767238(uint64_t a1)
{
  sub_10074C5F4(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), v1 + 32, *(void *)(v1 + 136), *(void *)(v1 + 144), *(void *)(v1 + 152), *(void *)(v1 + 160));
}

uint64_t sub_10076724C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_10076729C(uint64_t a1, uint64_t a2)
{
  return sub_100BAA064(a1, a2, *(void *)(v2 + 16), *(void **)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void *)(v2 + 48), *(uint64_t (**)(uint64_t))(v2 + 56), *(void *)(v2 + 64));
}

uint64_t sub_1007672D0()
{
  return sub_100768DCC((void (*)(void))&_swift_release, (void (*)(void))&_swift_bridgeObjectRelease, 40);
}

uint64_t sub_100767300()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100767310(uint64_t a1)
{
  return sub_1007674BC(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_10074509C);
}

uint64_t sub_10076733C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100767384(uint64_t a1)
{
  return sub_10076739C(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_1007452F4);
}

uint64_t sub_10076739C(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void))
{
  return a2(a1, v2[2], v2[3], v2[4], v2[5], v2[6]);
}

uint64_t sub_1007673B4()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1007673EC()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 128, 7);
}

uint64_t sub_100767464()
{
  return sub_10074D8EC(*(uint8_t **)(v0 + 16), v0 + 24);
}

uint64_t sub_100767470@<X0>(void *a1@<X8>)
{
  return sub_1010DFFE8(*(void *)(v1 + 16), *(unsigned char *)(v1 + 24), a1);
}

uint64_t sub_100767490(uint64_t a1)
{
  return sub_1007674BC(a1, (uint64_t (*)(uint64_t, void, void, void, void, void))sub_1007456C0);
}

uint64_t sub_1007674BC(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, void))
{
  return a2(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(unsigned __int8 *)(v2 + 48));
}

uint64_t sub_1007674E8()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

void sub_100767530(uint64_t a1)
{
  sub_10074593C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_100767544()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 152, 7);
}

uint64_t sub_1007675CC(uint64_t a1)
{
  return sub_10074C988(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), v1 + 40);
}

uint64_t sub_1007675E0(uint64_t a1)
{
  return sub_10074CCC0(a1, v1);
}

uint64_t sub_1007675FC()
{
  return sub_100768BB8((void (*)(void))&_swift_release);
}

void sub_100767614(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10076761C()
{
  return sub_100768DCC((void (*)(void))&_swift_release, (void (*)(void))&_swift_release, 40);
}

uint64_t sub_10076764C(uint64_t a1)
{
  return sub_10074F3D4(a1, *(void *)(v1 + 16), *(void (**)(void, void))(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_100767658(uint64_t a1)
{
  return sub_10074FD64(a1, *(uint64_t (**)(void *, uint64_t))(v1 + 16));
}

unint64_t sub_100767660()
{
  unint64_t result = qword_10164D120;
  if (!qword_10164D120)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164D120);
  }
  return result;
}

uint64_t sub_1007676B4(uint64_t a1)
{
  return sub_10074FF60(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1007676D0()
{
  return sub_1005F50EC(33);
}

void sub_1007676D8(uint64_t a1)
{
  sub_1007492BC(a1, *(NSObject **)(v1 + 16), *(void *)(v1 + 24), *(unsigned char *)(v1 + 32));
}

uint64_t sub_1007676E4(uint64_t a1)
{
  return sub_10074643C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100767700()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

void sub_100767748()
{
  sub_100746720(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

unint64_t sub_100767754()
{
  unint64_t result = qword_10164D128;
  if (!qword_10164D128)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164D128);
  }
  return result;
}

uint64_t sub_1007677A8(uint64_t a1)
{
  return sub_100748FD0(a1, *(void *)(v1 + 16), *(NSObject **)(v1 + 24));
}

uint64_t sub_1007677C4()
{
  return sub_100768BB8((void (*)(void))&_swift_release);
}

void sub_1007677DC(NSObject *a1)
{
  sub_10075F46C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1007677EC()
{
  return sub_100768DCC((void (*)(void))&_swift_release, (void (*)(void))&_swift_release, 40);
}

void sub_10076781C(uint64_t a1, uint64_t a2)
{
  sub_10073AE78(a1, a2, *(void *)(v2 + 16), *(void (**)(void))(v2 + 24), *(void *)(v2 + 32));
}

uint64_t sub_10076782C(uint64_t a1)
{
  return sub_10076862C(a1);
}

uint64_t sub_100767844()
{
  uint64_t v1 = (int *)(type metadata accessor for SecureLocation() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 56) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (((((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v6 = v0 + v3 + v1[15];
  uint64_t v7 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, v5 + 8, v4);
}

void sub_1007679B4(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for SecureLocation() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  sub_10073C07C(a1, *(void **)(v1 + 16), *(void (**)(void))(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), v1 + v4, *(void *)(v1 + v5), *(void *)(v1 + v5 + 8), *(void *)(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8) + 8), *(void **)(v1 + ((((v5 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t sub_100767A80()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 112, 7);
}

uint64_t sub_100767AE8(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = v1 + 24;
  uint64_t v6 = *(void *)(v1 + 104);
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  unsigned char v7[4] = v5;
  v7[5] = v6;
  v7[2] = a1;
  v7[3] = v4;
  v7[1] = sub_10001D2E4;
  return _swift_task_switch(sub_10073D1C4, 0, 0);
}

uint64_t sub_100767BAC()
{
  uint64_t v1 = (int *)(type metadata accessor for SecureLocation() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (((((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = v0 + v3;
  swift_bridgeObjectRelease();
  uint64_t v7 = v6 + v1[15];
  uint64_t v8 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, v5 + 8, v4);
}

void sub_100767CF8(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for SecureLocation() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)(v1 + v5);
  uint64_t v8 = *(void (**)(id))(v1 + v6);
  uint64_t v9 = *(void *)(v1 + v6 + 8);
  uint64_t v10 = *(void *)(v1 + ((v6 + 23) & 0xFFFFFFFFFFFFFFF8));

  sub_10073D3C4(a1, v1 + v4, v7, v8, v9, v10);
}

uint64_t sub_100767DB0()
{
  return sub_100767DC8((void (*)(void))&_swift_release);
}

uint64_t sub_100767DC8(void (*a1)(void))
{
  swift_release();
  a1(*(void *)(v1 + 32));

  return _swift_deallocObject(v1, 40, 7);
}

void sub_100767E18(uint64_t a1)
{
  sub_10073DB3C(a1, *(void (**)(uint64_t))(v1 + 16));
}

uint64_t sub_100767E24(uint64_t a1)
{
  return a1;
}

uint64_t sub_100767E8C@<X0>(uint64_t a1@<X8>)
{
  return sub_100810BC0(*(id *)(v1 + 40), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32), a1);
}

uint64_t sub_100767EAC(uint64_t a1)
{
  return sub_100755E18(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40));
}

uint64_t sub_100767ECC()
{
  return sub_100768F68(48);
}

uint64_t sub_100767ED4(uint64_t a1)
{
  return sub_100755600(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40));
}

uint64_t sub_100767EE0@<X0>(void *a1@<X8>)
{
  return sub_100D0BECC(v1[2], v1[3], v1[4], a1);
}

uint64_t sub_100767F00(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_100767F68()
{
  sub_100483968(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100767FBC()
{
  return sub_100755900(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t sub_100767FD8()
{
  return sub_100754038(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32), *(void **)(v0 + 40), *(void *)(v0 + 48), *(void *)(v0 + 56), *(void *)(v0 + 64));
}

uint64_t sub_100767FF0()
{
  swift_release();
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_100768048(uint64_t a1)
{
  return sub_10075416C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64));
}

uint64_t sub_10076805C()
{
  swift_bridgeObjectRelease();
  swift_errorRelease();
  swift_release();

  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 80, 7);
}

void sub_1007680BC(uint64_t a1)
{
  sub_100754258(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void (**)(id, uint64_t))(v1 + 56), *(void *)(v1 + 64), *(void **)(v1 + 72));
}

void sub_1007680F0(uint64_t a1)
{
  sub_1007461B4(a1, v1);
}

uint64_t sub_1007680F8()
{
  return sub_1007681D8((void (*)(void))&_swift_bridgeObjectRelease, (void (*)(void))&_swift_release);
}

uint64_t sub_100768124()
{
  return sub_100768D48((uint64_t (*)(void, void, void, void, void))sub_10073F38C);
}

uint64_t sub_10076813C(uint64_t result, uint64_t a2, unint64_t a3)
{
  if (result)
  {
    swift_bridgeObjectRetain();
    return sub_1000361E0(a2, a3);
  }
  return result;
}

uint64_t sub_100768184()
{
  return sub_100768F68(49);
}

uint64_t sub_10076818C()
{
  return sub_1008104A4(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32), *(void **)(v0 + 40), *(unsigned __int8 *)(v0 + 48));
}

uint64_t sub_10076819C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1007681AC()
{
  return sub_1007681D8((void (*)(void))&_swift_release, (void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_1007681D8(void (*a1)(void), void (*a2)(void))
{
  a1(*(void *)(v2 + 16));
  a2(*(void *)(v2 + 24));

  swift_release();

  return _swift_deallocObject(v2, 56, 7);
}

uint64_t sub_100768240(uint64_t a1)
{
  return sub_1007408F4(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t sub_100768250()
{
  return sub_100768DCC((void (*)(void))&_swift_release, (void (*)(void))&_swift_release, 40);
}

uint64_t sub_100768280(uint64_t a1)
{
  return sub_1007415C0(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10076828C@<X0>(uint64_t a1@<X8>)
{
  return sub_1010DE17C(v1, a1);
}

uint64_t sub_1007682A8@<X0>(void *a1@<X8>)
{
  return sub_1010DF2BC(*(void *)(v1 + 16), *(void *)(v1 + 24), *(unsigned char *)(v1 + 32), a1);
}

uint64_t sub_1007682C8()
{
  return sub_100768DCC((void (*)(void))&_swift_errorRelease, (void (*)(void))&_swift_release, 40);
}

uint64_t sub_1007682F8()
{
  return sub_100753810(*(void *)(v0 + 16), *(uint64_t (**)(uint64_t))(v0 + 24), *(void *)(v0 + 32), "Unsubscribe failed %s");
}

uint64_t sub_100768320()
{
  uint64_t v1 = type metadata accessor for FMNServerInteractionController.FMNResponseFields();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease();

  swift_release();
  swift_release();

  return _swift_deallocObject(v0, ((((v6 + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 16, v5);
}

void sub_100768408()
{
  uint64_t v1 = *(void *)(type metadata accessor for FMNServerInteractionController.FMNResponseFields() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v4 = (v3 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = *(void **)(v0 + v3);
  uint64_t v7 = *(char **)(v0 + v4);
  uint64_t v8 = v0 + v2;
  uint64_t v9 = *(void **)(v0 + v5);
  uint64_t v10 = v0 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = *(void (**)(void))v10;
  uint64_t v12 = *(void **)(v10 + 8);

  sub_100740CEC(v8, v6, v7, v9, v11, v12);
}

uint64_t sub_1007684BC()
{
  return sub_100768F68(48);
}

void sub_1007684C4()
{
  sub_10081097C(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void **)(v0 + 32), *(void **)(v0 + 40));
}

uint64_t sub_1007684D0()
{
  return _swift_deallocObject(v0, 32, 7);
}

unint64_t sub_1007684E0()
{
  unint64_t result = qword_10164D150;
  if (!qword_10164D150)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164D150);
  }
  return result;
}

uint64_t sub_100768534()
{
  return _swift_deallocObject(v0, 24, 7);
}

void sub_100768544(uint64_t a1)
{
}

void sub_10076854C(uint8_t *a1@<X8>)
{
  sub_1010889F4(*(char **)(v1 + 16), *(unsigned char *)(v1 + 24), a1);
}

uint64_t sub_10076856C()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

void sub_1007685A4()
{
}

uint64_t sub_1007685AC(uint64_t a1)
{
  return sub_101081BF4(a1, *(char **)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t sub_1007685C8(uint64_t a1)
{
  return sub_10073DF94(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(unsigned char *)(v1 + 40));
}

uint64_t sub_1007685EC()
{
  return sub_100768DCC((void (*)(void))&_swift_release, (void (*)(void))&_swift_release, 40);
}

void sub_10076861C(uint64_t a1)
{
  sub_10073E048(a1, *(void *)(v1 + 16), *(unsigned __int8 *)(v1 + 24), *(void **)(v1 + 32));
}

uint64_t sub_10076862C(uint64_t a1)
{
  return sub_10073BE00(a1, v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8], v1[9], v1[10], v1[11]);
}

uint64_t sub_100768670()
{
  return sub_100768D48((uint64_t (*)(void, void, void, void, void))sub_100606D2C);
}

uint64_t sub_100768688(uint64_t a1)
{
  return sub_1001FE19C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1007686A4()
{
  return sub_100768DCC((void (*)(void))&_swift_release, (void (*)(void))&_swift_bridgeObjectRelease, 41);
}

uint64_t sub_1007686D4()
{
  return sub_100768DCC((void (*)(void))&_swift_release, (void (*)(void))&_swift_bridgeObjectRelease, 41);
}

unint64_t sub_100768704()
{
  unint64_t result = qword_10164D158;
  if (!qword_10164D158)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164D158);
  }
  return result;
}

uint64_t sub_100768758(uint64_t a1)
{
  return sub_100738E30(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56));
}

uint64_t sub_10076877C()
{
  return sub_100768DCC((void (*)(void))&_swift_release, (void (*)(void))&_swift_bridgeObjectRelease, 41);
}

uint64_t sub_1007687AC()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

uint64_t sub_100768804(uint64_t a1)
{
  return sub_10075BB50(a1, *(id *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56));
}

uint64_t sub_100768818()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100768860()
{
  return sub_10074FFCC(*(void *)(v0 + 24), *(unsigned __int8 *)(v0 + 32), *(uint64_t (**)(uint64_t, void))(v0 + 40), *(void *)(v0 + 48));
}

uint64_t sub_100768890()
{
  swift_release();
  swift_release();

  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 72, 7);
}

void sub_1007688E8(uint64_t a1)
{
  sub_100738F00(a1, *(unsigned char *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void **)(v1 + 40), *(void (**)(void, void))(v1 + 48), *(void *)(v1 + 56));
}

uint64_t sub_1007688FC()
{
  return sub_100768DCC((void (*)(void))&_swift_release, (void (*)(void))&_swift_bridgeObjectRelease, 41);
}

void sub_100768930(uint64_t a1)
{
}

uint64_t sub_10076893C()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_10076894C(uint64_t a1)
{
  return swift_release();
}

void sub_10076899C(uint64_t a1)
{
}

uint64_t sub_1007689A8()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v0, 232, 7);
}

uint64_t sub_100768A00()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100768A10()
{
  return sub_10072DD00();
}

uint64_t sub_100768A18()
{
  return sub_10072DD84();
}

unint64_t sub_100768A20()
{
  unint64_t result = qword_10164D180;
  if (!qword_10164D180)
  {
    sub_10001D4B0(255, &qword_10164D178);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164D180);
  }
  return result;
}

void sub_100768A88(unsigned char *a1)
{
}

uint64_t sub_100768A90(unsigned char *a1)
{
  return sub_100741894(a1, v1);
}

uint64_t sub_100768A98(uint64_t *a1)
{
  return sub_100742B30(a1, v1);
}

uint64_t sub_100768AA0()
{
  return sub_100754AA4();
}

void sub_100768AA8(uint64_t a1, unint64_t a2, char a3)
{
}

uint64_t sub_100768AB0(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(v1 + 16))(*(void *)a1, *(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16));
}

uint64_t sub_100768AE4(uint64_t a1)
{
  return sub_100754B3C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100768B00()
{
  swift_release();
  sub_10001CFB8(*(void *)(v0 + 24), *(void *)(v0 + 32));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 88, 7);
}

void sub_100768B58()
{
  sub_100754E38(*(void *)(v0 + 16), v0 + 24, *(void *)(v0 + 80));
}

uint64_t sub_100768B68()
{
  return sub_100768BB8((void (*)(void))&_swift_release);
}

void sub_100768B80(uint64_t a1)
{
  sub_100755078(a1, *(void *)(v1 + 16));
}

uint64_t sub_100768B88()
{
  return sub_100768BB8((void (*)(void))&_swift_release);
}

uint64_t sub_100768BA0()
{
  return sub_100768BB8((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_100768BB8(void (*a1)(void))
{
  a1(*(void *)(v1 + 16));
  swift_release();

  return _swift_deallocObject(v1, 32, 7);
}

void sub_100768C00(uint64_t a1)
{
  sub_10075538C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100768C08()
{
  return sub_100768F68(48);
}

uint64_t sub_100768C10()
{
  return sub_100768F68(48);
}

void *sub_100768C18@<X0>(void *a1@<X8>)
{
  return sub_100D0BE90(a1);
}

uint64_t sub_100768C34(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_100768C9C(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_100768D00()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_100768D48(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_100768D60()
{
  return sub_100735350(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100768D7C@<X0>(char *a1@<X8>)
{
  return sub_100811CD8(*(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), a1);
}

uint64_t sub_100768D9C()
{
  return sub_100768DCC((void (*)(void))&_swift_release, (void (*)(void))&_swift_bridgeObjectRelease, 41);
}

uint64_t sub_100768DCC(void (*a1)(void), void (*a2)(void), uint64_t a3)
{
  a1(*(void *)(v3 + 16));
  a2(*(void *)(v3 + 32));

  return _swift_deallocObject(v3, a3, 7);
}

uint64_t sub_100768E30()
{
  return sub_1010DEC4C(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40));
}

void sub_100768E40(uint64_t a1)
{
  sub_100736DB8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_100768E60()
{
  return sub_100BC7E38(*(void *)(v0 + 16));
}

uint64_t sub_100768E7C()
{
  return sub_100768F68(48);
}

uint64_t sub_100768E84()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100768E94()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return _swift_deallocObject(v0, 56, 7);
}

void sub_100768EE4(uint64_t a1, uint64_t a2)
{
  sub_1007596C4(a2, *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), *(void **)(v2 + 48));
}

uint64_t sub_100768EFC()
{
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();

  return _swift_deallocObject(v0, 64, 7);
}

void sub_100768F4C()
{
  sub_100730CD0(*(void *)(v0 + 16), *(void *)(v0 + 24), *(char **)(v0 + 32), *(unsigned char *)(v0 + 40), *(void (**)(id, uint64_t))(v0 + 48), *(void *)(v0 + 56));
}

uint64_t sub_100768F60()
{
  return sub_100768F68(48);
}

uint64_t sub_100768F68(uint64_t a1)
{
  swift_release();
  swift_bridgeObjectRelease();

  return _swift_deallocObject(v1, a1, 7);
}

uint64_t sub_100768FBC()
{
  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_100768FCC(uint64_t a1, unint64_t a2)
{
  return sub_10072D2F4(a1, a2);
}

unsigned char *storeEnumTagSinglePayload for SecureLocationsCoordinator.SecureLocationsCommandPayload.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *unint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1007690A0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsCoordinator.SecureLocationsCommandPayload.CodingKeys()
{
  return &type metadata for SecureLocationsCoordinator.SecureLocationsCommandPayload.CodingKeys;
}

unint64_t sub_1007690DC()
{
  unint64_t result = qword_10164D1C8;
  if (!qword_10164D1C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164D1C8);
  }
  return result;
}

unint64_t sub_100769134()
{
  unint64_t result = qword_10164D1D0;
  if (!qword_10164D1D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164D1D0);
  }
  return result;
}

unint64_t sub_10076918C()
{
  unint64_t result = qword_10164D1D8;
  if (!qword_10164D1D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164D1D8);
  }
  return result;
}

uint64_t sub_1007691E4(uint64_t a1)
{
  return sub_100766B68(a1);
}

uint64_t sub_1007691FC(uint64_t a1)
{
  return sub_100767EAC(a1);
}

void sub_100769214(uint64_t a1)
{
}

void *sub_100769234@<X0>(unsigned char *a1@<X8>)
{
  return sub_1007666BC(a1);
}

uint64_t sub_100769324@<X0>(uint64_t a1@<X8>)
{
  return sub_100767E8C(a1);
}

uint64_t sub_10076933C@<X0>(char *a1@<X8>)
{
  return sub_100768D7C(a1);
}

uint64_t sub_10076940C(uint64_t a1)
{
  return sub_10076688C(a1);
}

uint64_t sub_100769424@<X0>(uint64_t *a1@<X8>)
{
  return sub_1007668F0(a1);
}

uint64_t sub_10076943C@<X0>(void *a1@<X8>)
{
  return sub_100767EE0(a1);
}

unsigned char *sub_10076945C@<X0>(unsigned char *a1@<X0>, BOOL *a2@<X8>)
{
  return sub_1007666A0(a1, a2);
}

void sub_100769474(uint64_t a1, void *a2)
{
  int v3 = *(void (**)(void *))(a1 + 32);
  swift_retain();
  id v4 = a2;
  v3(a2);
  swift_release();
}

uint64_t sub_1007694E0(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return _swift_task_switch(sub_100769500, 0, 0);
}

uint64_t sub_100769500()
{
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  type metadata accessor for ObservedAdvertisement(0);
  sub_10077204C(&qword_10164D3E0, (void (*)(uint64_t))type metadata accessor for ObservedAdvertisement);
  uint64_t v1 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  uint64_t v3 = v2;
  v0[4] = v1;
  v0[5] = v2;
  swift_release();
  uint64_t v4 = v0[3];
  uint64_t v5 = (void *)swift_task_alloc();
  v0[6] = v5;
  void v5[2] = v4;
  v5[3] = v1;
  v5[4] = v3;
  unsigned int v6 = (void *)swift_task_alloc();
  v0[7] = v6;
  *unsigned int v6 = v0;
  v6[1] = sub_1007696D0;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v6, 0, 0, 0x5F28747265736E69, 0xEA0000000000293ALL, sub_1007720C4, v5, (char *)&type metadata for () + 8);
}

uint64_t sub_1007696D0()
{
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10078077C;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_100780774;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1007697EC(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = a2;
  return _swift_task_switch(sub_10076980C, 0, 0);
}

uint64_t sub_10076980C()
{
  uint64_t v1 = v0[3];
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  v0[2] = v1;
  sub_10000588C(&qword_10164D318);
  sub_100771ACC(&qword_10164D3D8, &qword_10164D3E0);
  uint64_t v2 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  v0[5] = v2;
  v0[6] = v3;
  uint64_t v4 = v2;
  uint64_t v5 = v3;
  uint64_t v6 = v0[4];
  swift_release();
  uint64_t v7 = (void *)swift_task_alloc();
  v0[7] = v7;
  v7[2] = v6;
  v7[3] = v4;
  unsigned char v7[4] = v5;
  uint64_t v8 = (void *)swift_task_alloc();
  v0[8] = v8;
  void *v8 = v0;
  v8[1] = sub_1007699F4;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v8, 0, 0, 0x5F286574656C6564, 0xEA0000000000293ALL, sub_1007720AC, v7, (char *)&type metadata for () + 8);
}

uint64_t sub_1007699F4()
{
  *(void *)(*(void *)v1 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100780778;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_100780770;
  }
  return _swift_task_switch(v2, 0, 0);
}

void sub_100769B10(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_1016565A0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_100771FC8;
  uint64_t aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_100769CD8;
  aBlock[3] = &unk_1015D4518;
  uint64_t v10 = _Block_copy(aBlock);
  swift_release();
  [a2 deleteObservedAdvertisementsWithAdvertisementsData:isa completion:v10];
  _Block_release(v10);
}

uint64_t sub_100769CD8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = *(void (**)(void *, unint64_t, void *))(a1 + 32);
  if (a2)
  {
    swift_retain();
    id v6 = v4;
    uint64_t v4 = (void *)static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v8 = v7;
  }
  else
  {
    swift_retain();
    unint64_t v8 = 0xF000000000000000;
  }
  id v9 = a3;
  v5(v4, v8, a3);

  sub_100037A24((uint64_t)v4, v8);

  return swift_release();
}

uint64_t sub_100769D84(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = a2;
  return _swift_task_switch(sub_100769DA4, 0, 0);
}

uint64_t sub_100769DA4()
{
  uint64_t v1 = v0[3];
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  v0[2] = v1;
  sub_10000588C(&qword_10164D318);
  sub_100771ACC(&qword_10164D3D8, &qword_10164D3E0);
  uint64_t v2 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  v0[5] = v2;
  v0[6] = v3;
  uint64_t v4 = v2;
  uint64_t v5 = v3;
  uint64_t v6 = v0[4];
  swift_release();
  unint64_t v7 = (void *)swift_task_alloc();
  v0[7] = v7;
  v7[2] = v6;
  v7[3] = v4;
  unsigned char v7[4] = v5;
  unint64_t v8 = (void *)swift_task_alloc();
  v0[8] = v8;
  void *v8 = v0;
  v8[1] = sub_100769F8C;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v8, 0, 0, 0xD000000000000011, 0x8000000101406C00, sub_100772094, v7, (char *)&type metadata for () + 8);
}

uint64_t sub_100769F8C()
{
  *(void *)(*(void *)v1 + 72) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10076A10C;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_10076A0A8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10076A0A8()
{
  sub_10001CFB8(v0[5], v0[6]);
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

uint64_t sub_10076A10C()
{
  sub_10001CFB8(v0[5], v0[6]);
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

void sub_10076A17C(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_1016565A0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_100771FC8;
  uint64_t aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_100769CD8;
  aBlock[3] = &unk_1015D44C8;
  uint64_t v10 = _Block_copy(aBlock);
  swift_release();
  [a2 markObservedAdvertisementsPublishedWithAdvertisementsData:isa completion:v10];
  _Block_release(v10);
}

uint64_t sub_10076A344(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    swift_errorRetain();
    sub_10000588C((uint64_t *)&unk_1016565A0);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    sub_10000588C((uint64_t *)&unk_1016565A0);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t sub_10076A3AC(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  *(void *)(v4 + 40) = a2;
  *(void *)(v4 + 48) = a4;
  *(unsigned char *)(v4 + 96) = a3;
  *(void *)(v4 + 32) = a1;
  return _swift_task_switch(sub_10076A3D4, 0, 0);
}

uint64_t sub_10076A3D4()
{
  uint64_t v1 = *(void *)(v0 + 32);
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  *(void *)(v0 + 16) = v1;
  sub_10000588C(&qword_10164D3C0);
  sub_100771EB4();
  uint64_t v2 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  *(void *)(v0 + 56) = v2;
  *(void *)(v0 + 64) = v3;
  uint64_t v4 = v2;
  uint64_t v5 = v3;
  char v6 = *(unsigned char *)(v0 + 96);
  uint64_t v8 = *(void *)(v0 + 40);
  uint64_t v7 = *(void *)(v0 + 48);
  swift_release();
  uint64_t v9 = swift_task_alloc();
  *(void *)(v0 + 72) = v9;
  *(void *)(v9 + 16) = v7;
  *(void *)(v9 + 24) = v4;
  *(void *)(v9 + 32) = v5;
  *(void *)(v9 + 40) = v8;
  *(unsigned char *)(v9 + 48) = v6;
  uint64_t v10 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v10;
  uint64_t v11 = sub_10000588C(&qword_10164D318);
  *uint64_t v10 = v0;
  v10[1] = sub_10076A5A8;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 24, 0, 0, 0xD000000000000040, 0x8000000101406B80, sub_100771F58, v9, v11);
}

uint64_t sub_10076A5A8()
{
  *(void *)(*(void *)v1 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10076A72C;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_10076A6C4;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10076A6C4()
{
  sub_10001CFB8(v0[7], v0[8]);
  uint64_t v1 = v0[3];
  uint64_t v2 = (uint64_t (*)(uint64_t))v0[1];
  return v2(v1);
}

uint64_t sub_10076A72C()
{
  sub_10001CFB8(v0[7], v0[8]);
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

void sub_10076A79C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v10 = sub_10000588C(&qword_10164D320);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))((char *)aBlock - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v10);
  unint64_t v14 = (*(unsigned __int8 *)(v11 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v15 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v11 + 32))(v15 + v14, (char *)aBlock - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v10);
  aBlock[4] = sub_100771A48;
  uint64_t aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_100769CD8;
  aBlock[3] = &unk_1015D4428;
  uint64_t v16 = _Block_copy(aBlock);
  swift_release();
  [a2 reverseChronologicalObservationsWithIdentifierData:isa limit:a5 isPublished:a6 & 1 completion:v16];
  _Block_release(v16);
}

uint64_t sub_10076A97C(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return _swift_task_switch(sub_10076A99C, 0, 0);
}

uint64_t sub_10076A99C()
{
  uint64_t v1 = v0[4];
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  v0[2] = v1;
  sub_10000588C(&qword_10164D380);
  sub_100771BD0(&qword_10164D388, &qword_10164D380, (void (*)(void))sub_1002053D8);
  uint64_t v2 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  v0[6] = v2;
  v0[7] = v3;
  uint64_t v4 = v2;
  uint64_t v5 = v3;
  uint64_t v6 = v0[5];
  swift_release();
  uint64_t v7 = (void *)swift_task_alloc();
  v0[8] = v7;
  v7[2] = v6;
  v7[3] = v4;
  unsigned char v7[4] = v5;
  uint64_t v8 = (void *)swift_task_alloc();
  v0[9] = v8;
  uint64_t v9 = sub_10000588C(&qword_10164D318);
  void *v8 = v0;
  v8[1] = sub_10076AB94;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 3, 0, 0, 0xD00000000000001DLL, 0x8000000101406B60, sub_100771E9C, v7, v9);
}

uint64_t sub_10076AB94()
{
  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10076AD18;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_10076ACB0;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10076ACB0()
{
  sub_10001CFB8(v0[6], v0[7]);
  uint64_t v1 = v0[3];
  uint64_t v2 = (uint64_t (*)(uint64_t))v0[1];
  return v2(v1);
}

uint64_t sub_10076AD18()
{
  sub_10001CFB8(v0[6], v0[7]);
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

void sub_10076AD88(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_10000588C(&qword_10164D320);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_100771A48;
  uint64_t aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_100769CD8;
  aBlock[3] = &unk_1015D43D8;
  uint64_t v10 = _Block_copy(aBlock);
  swift_release();
  [a2 observationsWithAdvertisementsData:isa completion:v10];
  _Block_release(v10);
}

void sub_10076AF50(uint64_t a1, void *a2, double a3)
{
  uint64_t v6 = sub_10000588C(&qword_10164D3A8);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  unint64_t v9 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v10 + v9, (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  aBlock[4] = sub_100771D38;
  uint64_t aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_100769CD8;
  aBlock[3] = &unk_1015D4388;
  uint64_t v11 = _Block_copy(aBlock);
  swift_release();
  [a2 nearbyBeaconsWithSeconds:v11 completion:a3];
  _Block_release(v11);
}

uint64_t sub_10076B108(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v13);
  if (a3)
  {
    swift_errorRetain();
LABEL_5:
    swift_willThrow();
    uint64_t v38 = a3;
    sub_10000588C(&qword_10164D3A8);
    return CheckedContinuation.resume(throwing:)();
  }
  if (a2 >> 60 == 15)
  {
    sub_1001A14F0();
    a3 = swift_allocError();
    *uint64_t v17 = 2;
    goto LABEL_5;
  }
  unint64_t v37 = (char *)v31 - v16;
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  sub_1000361E0(a1, a2);
  PropertyListDecoder.init()();
  sub_10000588C(&qword_101654A30);
  sub_100771D58();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  uint64_t v36 = v12;
  swift_release();
  uint64_t v19 = v38;
  uint64_t v20 = *(void *)(v38 + 16);
  if (v20)
  {
    uint64_t v32 = a1;
    unint64_t v33 = a2;
    uint64_t v34 = a4;
    uint64_t v21 = (unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48);
    uint64_t v22 = (void (**)(char *, char *, uint64_t))(v36 + 32);
    swift_bridgeObjectRetain();
    v31[1] = v19;
    uint64_t v23 = v19 + 40;
    long long v24 = _swiftEmptyArrayStorage;
    long long v35 = v15;
    do
    {
      swift_bridgeObjectRetain();
      UUID.init(uuidString:)();
      swift_bridgeObjectRelease();
      if ((*v21)(v10, 1, v11) == 1)
      {
        sub_10001DAB4((uint64_t)v10, &qword_101638CF0);
      }
      else
      {
        long long v25 = *v22;
        long long v26 = v37;
        (*v22)(v37, v10, v11);
        v25(v15, v26, v11);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          long long v24 = (void *)sub_100A6F668(0, v24[2] + 1, 1, (unint64_t)v24);
        }
        unint64_t v28 = v24[2];
        unint64_t v27 = v24[3];
        if (v28 >= v27 >> 1) {
          long long v24 = (void *)sub_100A6F668(v27 > 1, v28 + 1, 1, (unint64_t)v24);
        }
        v24[2] = v28 + 1;
        unint64_t v29 = (unint64_t)v24
            + ((*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80))
            + *(void *)(v36 + 72) * v28;
        uint64_t v15 = v35;
        v25((char *)v29, v35, v11);
      }
      v23 += 16;
      --v20;
    }
    while (v20);
    swift_bridgeObjectRelease();
    a2 = v33;
    a1 = v32;
  }
  else
  {
    long long v24 = _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRelease();
  uint64_t v30 = sub_101158244((uint64_t)v24);
  swift_bridgeObjectRelease();
  uint64_t v38 = v30;
  swift_bridgeObjectRetain();
  sub_10000588C(&qword_10164D3A8);
  CheckedContinuation.resume(returning:)();
  sub_100037A24(a1, a2);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10076B530(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 32) = a1;
  *(void *)(v2 + 40) = a2;
  return _swift_task_switch(sub_10076B550, 0, 0);
}

uint64_t sub_10076B550()
{
  uint64_t v1 = v0[4];
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  v0[2] = v1;
  sub_10000588C(&qword_10164D380);
  sub_100771BD0(&qword_10164D388, &qword_10164D380, (void (*)(void))sub_1002053D8);
  uint64_t v2 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  v0[6] = v2;
  v0[7] = v3;
  uint64_t v4 = v2;
  uint64_t v5 = v3;
  uint64_t v6 = v0[5];
  swift_release();
  uint64_t v7 = (void *)swift_task_alloc();
  v0[8] = v7;
  v7[2] = v6;
  v7[3] = v4;
  unsigned char v7[4] = v5;
  uint64_t v8 = (void *)swift_task_alloc();
  v0[9] = v8;
  uint64_t v9 = sub_10000588C(&qword_10164D390);
  void *v8 = v0;
  v8[1] = sub_10076B748;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 3, 0, 0, 0xD00000000000001ALL, 0x8000000101406B20, sub_100771C3C, v7, v9);
}

uint64_t sub_10076B748()
{
  *(void *)(*(void *)v1 + 80) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100780830;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_100780820;
  }
  return _swift_task_switch(v2, 0, 0);
}

void sub_10076B864(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_10000588C(&qword_10164D398);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_100771C54;
  uint64_t aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_100769CD8;
  aBlock[3] = &unk_1015D4338;
  uint64_t v10 = _Block_copy(aBlock);
  swift_release();
  [a2 locationsWithAdvertisementsData:isa completion:v10];
  _Block_release(v10);
}

uint64_t sub_10076BA2C(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return _swift_task_switch(sub_10076BA4C, 0, 0);
}

uint64_t sub_10076BA4C()
{
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  type metadata accessor for BeaconIdentifier();
  sub_10077204C(&qword_10164D2A0, (void (*)(uint64_t))type metadata accessor for BeaconIdentifier);
  uint64_t v1 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  v0[4] = v1;
  v0[5] = v2;
  uint64_t v3 = v1;
  uint64_t v4 = v2;
  uint64_t v5 = v0[3];
  swift_release();
  uint64_t v6 = (void *)swift_task_alloc();
  v0[6] = v6;
  v6[2] = v5;
  v6[3] = v3;
  v6[4] = v4;
  uint64_t v7 = (void *)swift_task_alloc();
  v0[7] = v7;
  uint64_t v8 = sub_10000588C(&qword_10164D358);
  *uint64_t v7 = v0;
  v7[1] = sub_10076BC30;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 9, 0, 0, 0xD000000000000013, 0x8000000101406B00, sub_100771B98, v6, v8);
}

uint64_t sub_10076BC30()
{
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10076BDBC;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_10076BD4C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10076BD4C()
{
  sub_10001CFB8(*(void *)(v0 + 32), *(void *)(v0 + 40));
  uint64_t v1 = *(unsigned __int8 *)(v0 + 72) | (*(unsigned __int8 *)(v0 + 73) << 8);
  uint64_t v2 = *(uint64_t (**)(uint64_t))(v0 + 8);
  return v2(v1);
}

uint64_t sub_10076BDBC()
{
  sub_10001CFB8(v0[4], v0[5]);
  swift_task_dealloc();
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

void sub_10076BE2C(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_10000588C(&qword_10164D360);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_100771BB0;
  uint64_t aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_100769CD8;
  aBlock[3] = &unk_1015D42E8;
  uint64_t v10 = _Block_copy(aBlock);
  swift_release();
  [a2 latestStatusWithIdentifierData:isa completion:v10];
  _Block_release(v10);
}

uint64_t sub_10076BFF4(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a3)
  {
    swift_errorRetain();
LABEL_5:
    swift_willThrow();
    sub_10000588C(&qword_10164D360);
    return CheckedContinuation.resume(throwing:)();
  }
  if (a2 >> 60 == 15)
  {
    sub_1001A14F0();
    swift_allocError();
    *uint64_t v4 = 2;
    goto LABEL_5;
  }
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  sub_1000361E0(a1, a2);
  PropertyListDecoder.init()();
  sub_10000588C(&qword_10164D368);
  sub_100771BD0(&qword_10164D370, &qword_10164D368, (void (*)(void))sub_1002052DC);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  swift_release();
  swift_bridgeObjectRelease();
  sub_10000588C(&qword_10164D360);
  CheckedContinuation.resume(returning:)();
  return sub_100037A24(a1, a2);
}

uint64_t sub_10076C1C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return _swift_task_switch(sub_10076C1E4, 0, 0);
}

uint64_t sub_10076C1E4()
{
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  type metadata accessor for BeaconIdentifier();
  sub_10077204C(&qword_10164D2A0, (void (*)(uint64_t))type metadata accessor for BeaconIdentifier);
  uint64_t v1 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  uint64_t v3 = v2;
  v0[5] = v1;
  v0[6] = v2;
  swift_release();
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc();
  v0[7] = v5;
  void v5[2] = v4;
  v5[3] = v1;
  v5[4] = v3;
  uint64_t v6 = (void *)swift_task_alloc();
  v0[8] = v6;
  uint64_t v7 = sub_10000588C(&qword_10163EB60);
  *uint64_t v6 = v0;
  v6[1] = sub_1007699F4;
  uint64_t v8 = v0[2];
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v8, 0, 0, 0xD000000000000013, 0x8000000101406B00, sub_100771B60, v5, v7);
}

void sub_10076C3C0(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_10000588C(&qword_10164D340);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_100771B78;
  uint64_t aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_100769CD8;
  aBlock[3] = &unk_1015D4298;
  uint64_t v10 = _Block_copy(aBlock);
  swift_release();
  [a2 latestObservedAdvertisementWithIdentifierData:isa completion:v10];
  _Block_release(v10);
}

uint64_t sub_10076C588(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_10000588C(&qword_10164D348);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (void *)((char *)v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)v29 - v12;
  uint64_t v14 = sub_10000588C(&qword_10163EB60);
  uint64_t v15 = __chkstk_darwin(v14 - 8);
  uint64_t v17 = (char *)v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)v29 - v18;
  if (a3)
  {
    swift_errorRetain();
LABEL_5:
    swift_willThrow();
    uint64_t v30 = a3;
    sub_10000588C(&qword_10164D340);
    return CheckedContinuation.resume(throwing:)();
  }
  if (a2 >> 60 == 15)
  {
    sub_1001A14F0();
    a3 = swift_allocError();
    *uint64_t v20 = 2;
    goto LABEL_5;
  }
  v29[1] = a4;
  type metadata accessor for PropertyListDecoder();
  swift_allocObject();
  sub_1000361E0(a1, a2);
  PropertyListDecoder.init()();
  sub_10000588C(&qword_10164D318);
  sub_100771ACC(&qword_10164D328, &qword_10164D330);
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
  uint64_t v22 = a1;
  swift_release();
  uint64_t v23 = v30;
  uint64_t v24 = *(void *)(v30 + 16);
  uint64_t v25 = type metadata accessor for ObservedAdvertisement(0);
  uint64_t v26 = *(void *)(v25 - 8);
  if (v24)
  {
    uint64_t v27 = v25;
    sub_100780254(v23+ ((*(unsigned __int8 *)(*(void *)(v25 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v25 - 8) + 80)), (uint64_t)v19, type metadata accessor for ObservedAdvertisement);
    uint64_t v25 = v27;
    uint64_t v28 = 0;
  }
  else
  {
    uint64_t v28 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v26 + 56))(v19, v28, 1, v25);
  swift_bridgeObjectRelease();
  sub_10001D074((uint64_t)v19, (uint64_t)v13, &qword_10163EB60);
  swift_storeEnumTagMultiPayload();
  sub_10001D074((uint64_t)v13, (uint64_t)v11, &qword_10164D348);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v30 = *v11;
    sub_10000588C(&qword_10164D340);
    CheckedContinuation.resume(throwing:)();
  }
  else
  {
    sub_10001D608((uint64_t)v11, (uint64_t)v17, &qword_10163EB60);
    sub_10000588C(&qword_10164D340);
    CheckedContinuation.resume(returning:)();
  }
  sub_100037A24(v22, a2);
  sub_10001DAB4((uint64_t)v13, &qword_10164D348);
  return sub_10001DAB4((uint64_t)v19, &qword_10163EB60);
}

uint64_t sub_10076C970(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 32) = a4;
  *(void *)(v5 + 40) = a5;
  *(unsigned char *)(v5 + 96) = a3;
  *(void *)(v5 + 16) = a1;
  *(void *)(v5 + 24) = a2;
  return _swift_task_switch(sub_10076C998, 0, 0);
}

uint64_t sub_10076C998()
{
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  type metadata accessor for BeaconIdentifier();
  sub_10077204C(&qword_10164D2A0, (void (*)(uint64_t))type metadata accessor for BeaconIdentifier);
  uint64_t v1 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  uint64_t v3 = v2;
  *(void *)(v0 + 48) = v1;
  *(void *)(v0 + 56) = v2;
  swift_release();
  uint64_t v4 = *(unsigned __int8 *)(v0 + 96);
  if (v4 == 8) {
    id v5 = 0;
  }
  else {
    id v5 = [objc_allocWithZone((Class)NSNumber) initWithUnsignedInt:v4];
  }
  *(void *)(v0 + 64) = v5;
  uint64_t v7 = *(void *)(v0 + 32);
  uint64_t v6 = *(void *)(v0 + 40);
  uint64_t v8 = (void *)swift_task_alloc();
  *(void *)(v0 + 72) = v8;
  v8[2] = v6;
  v8[3] = v1;
  v8[4] = v3;
  v8[5] = v5;
  v8[6] = v7;
  uint64_t v9 = (void *)swift_task_alloc();
  *(void *)(v0 + 80) = v9;
  uint64_t v10 = sub_10000588C(&qword_10163D030);
  *uint64_t v9 = v0;
  v9[1] = sub_10076CBBC;
  uint64_t v11 = *(void *)(v0 + 16);
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v11, 0, 0, 0xD000000000000029, 0x8000000101406960, sub_100771550, v8, v10);
}

uint64_t sub_10076CBBC()
{
  *(void *)(*(void *)v1 + 88) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10076CD4C;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_10076CCD8;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10076CCD8()
{
  unint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 48);

  sub_10001CFB8(v2, v1);
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

uint64_t sub_10076CD4C()
{
  uint64_t v2 = *(void *)(v0 + 48);
  unint64_t v1 = *(void *)(v0 + 56);

  sub_10001CFB8(v2, v1);
  swift_task_dealloc();
  uint64_t v3 = *(uint64_t (**)(void))(v0 + 8);
  return v3();
}

void sub_10076CDD0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v21 = a2;
  uint64_t v22 = a5;
  uint64_t v8 = sub_10000588C(&qword_10164D2A8);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  uint64_t v11 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14.super.Class isa = Data._bridgeToObjectiveC()().super.isa;
  sub_10001D074(a6, (uint64_t)v13, &qword_101638CF0);
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v16 = *(void *)(v15 - 8);
  Class isa = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v13, 1, v15) != 1)
  {
    Class isa = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v16 + 8))(v13, v15);
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))((char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v8);
  unint64_t v18 = (*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  uint64_t v19 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v9 + 32))(v19 + v18, (char *)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v8);
  aBlock[4] = sub_10077156C;
  uint64_t aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_100769CD8;
  aBlock[3] = &unk_1015D3FC8;
  uint64_t v20 = _Block_copy(aBlock);
  swift_release();
  [v21 latestDeviceEventWithIdentifierData:v14.super.isa source:v22 attachedDevice:isa completion:v20];
  _Block_release(v20);
}

uint64_t sub_10076D090(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v31 = a4;
  uint64_t v7 = type metadata accessor for DeviceEvent(0);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C(&qword_10163D030);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000588C(&qword_10164D2B0);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (uint64_t *)((char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v19 = __chkstk_darwin(v18);
  id v21 = (uint64_t *)((char *)&v28 - v20);
  __chkstk_darwin(v19);
  uint64_t v24 = (char *)&v28 - v22;
  if (a3)
  {
    swift_errorRetain();
    swift_willThrow();
    uint64_t v32 = a3;
    sub_10000588C(&qword_10164D2A8);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    unint64_t v29 = v13;
    uint64_t v30 = v8;
    if (a2 >> 60 == 15)
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v30 + 56))((char *)&v28 - v22, 1, 1, v7);
      swift_storeEnumTagMultiPayload();
      sub_10001D074((uint64_t)v24, (uint64_t)v21, &qword_10164D2B0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v32 = *v21;
        sub_10000588C(&qword_10164D2A8);
        CheckedContinuation.resume(throwing:)();
      }
      else
      {
        sub_10001D608((uint64_t)v21, (uint64_t)v29, &qword_10163D030);
        sub_10000588C(&qword_10164D2A8);
        CheckedContinuation.resume(returning:)();
      }
      return sub_10001DAB4((uint64_t)v24, &qword_10164D2B0);
    }
    else
    {
      uint64_t v26 = v23;
      type metadata accessor for PropertyListDecoder();
      swift_allocObject();
      sub_1000361E0(a1, a2);
      PropertyListDecoder.init()();
      sub_10077204C(&qword_10164D2B8, (void (*)(uint64_t))type metadata accessor for DeviceEvent);
      dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
      swift_release();
      sub_100780254((uint64_t)v10, v26, type metadata accessor for DeviceEvent);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v30 + 56))(v26, 0, 1, v7);
      swift_storeEnumTagMultiPayload();
      sub_10001D074(v26, (uint64_t)v17, &qword_10164D2B0);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v32 = *v17;
        sub_10000588C(&qword_10164D2A8);
        CheckedContinuation.resume(throwing:)();
      }
      else
      {
        sub_10001D608((uint64_t)v17, (uint64_t)v29, &qword_10163D030);
        sub_10000588C(&qword_10164D2A8);
        CheckedContinuation.resume(returning:)();
      }
      sub_100037A24(a1, a2);
      sub_10001DAB4(v26, &qword_10164D2B0);
      return sub_1007802BC((uint64_t)v10, type metadata accessor for DeviceEvent);
    }
  }
}

uint64_t sub_10076D540(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return _swift_task_switch(sub_10076D560, 0, 0);
}

uint64_t sub_10076D560()
{
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  type metadata accessor for DeviceEvent(0);
  sub_10077204C(&qword_10164D290, (void (*)(uint64_t))type metadata accessor for DeviceEvent);
  uint64_t v1 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  uint64_t v3 = v2;
  v0[4] = v1;
  v0[5] = v2;
  swift_release();
  uint64_t v4 = v0[3];
  uint64_t v5 = (void *)swift_task_alloc();
  v0[6] = v5;
  void v5[2] = v4;
  v5[3] = v1;
  v5[4] = v3;
  uint64_t v6 = (void *)swift_task_alloc();
  v0[7] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_10076D730;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v6, 0, 0, 0xD000000000000013, 0x8000000101406940, sub_1007714C8, v5, (char *)&type metadata for () + 8);
}

uint64_t sub_10076D730()
{
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10076BDBC;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_10076D84C;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10076D84C()
{
  sub_10001CFB8(v0[4], v0[5]);
  uint64_t v1 = (uint64_t (*)(void))v0[1];
  return v1();
}

void sub_10076D8B0(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = sub_10000588C(&qword_10164D320);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))((char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v6);
  unint64_t v9 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v10 + v9, (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0), v6);
  aBlock[4] = sub_100771A48;
  uint64_t aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_100769CD8;
  aBlock[3] = &unk_1015D4248;
  uint64_t v11 = _Block_copy(aBlock);
  swift_release();
  [a2 latestAnonymousObservationsWithLimit:a3 completion:v11];
  _Block_release(v11);
}

uint64_t sub_10076DA60(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a3)
  {
    swift_errorRetain();
  }
  else
  {
    if (a2 >> 60 != 15)
    {
      type metadata accessor for PropertyListDecoder();
      swift_allocObject();
      sub_1000361E0(a1, a2);
      PropertyListDecoder.init()();
      sub_10000588C(&qword_10164D318);
      sub_100771ACC(&qword_10164D328, &qword_10164D330);
      dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
      swift_release();
      swift_bridgeObjectRetain();
      sub_10000588C(&qword_10164D320);
      CheckedContinuation.resume(returning:)();
      sub_100037A24(a1, a2);
      return swift_bridgeObjectRelease();
    }
    sub_1001A14F0();
    swift_allocError();
    *uint64_t v4 = 2;
  }
  swift_willThrow();
  sub_10000588C(&qword_10164D320);
  return CheckedContinuation.resume(throwing:)();
}

void sub_10076DC18(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_10000588C(&qword_10164D310);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v7 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v8 + v7, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_1007718A0;
  uint64_t aBlock[5] = v8;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_10076DE44;
  aBlock[3] = &unk_1015D41A8;
  unint64_t v9 = _Block_copy(aBlock);
  swift_release();
  [a2 anonymousObservationCountWithCompletion:v9];
  _Block_release(v9);
}

uint64_t sub_10076DDC0(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_errorRetain();
    swift_willThrow();
    sub_10000588C(&qword_10164D310);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    sub_10000588C(&qword_10164D310);
    return CheckedContinuation.resume(returning:)();
  }
}

void sub_10076DE44(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v5 = *(void (**)(uint64_t, void *))(a1 + 32);
  swift_retain();
  id v6 = a3;
  v5(a2, a3);
  swift_release();
}

void sub_10076DEBC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, SEL *a6)
{
  uint64_t v11 = sub_10000588C((uint64_t *)&unk_1016565A0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)aBlock - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v11);
  unint64_t v14 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v15 + v14, (char *)aBlock - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v11);
  aBlock[4] = a4;
  uint64_t aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_100769CD8;
  aBlock[3] = a5;
  uint64_t v16 = _Block_copy(aBlock);
  swift_release();
  [a2 *a6:v16];
  _Block_release(v16);
}

uint64_t sub_10076E05C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    swift_errorRetain();
    swift_willThrow();
    sub_10000588C((uint64_t *)&unk_1016565A0);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    sub_10000588C((uint64_t *)&unk_1016565A0);
    return CheckedContinuation.resume(returning:)();
  }
}

uint64_t sub_10076E0D8(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return _swift_task_switch(sub_10076E0F8, 0, 0);
}

uint64_t sub_10076E0F8()
{
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  type metadata accessor for KeySyncMetadata();
  sub_10077204C(&qword_10164D308, (void (*)(uint64_t))type metadata accessor for KeySyncMetadata);
  uint64_t v1 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  uint64_t v3 = v2;
  v0[4] = v1;
  v0[5] = v2;
  swift_release();
  uint64_t v4 = v0[3];
  uint64_t v5 = (void *)swift_task_alloc();
  v0[6] = v5;
  void v5[2] = v4;
  v5[3] = v1;
  v5[4] = v3;
  id v6 = (void *)swift_task_alloc();
  v0[7] = v6;
  *id v6 = v0;
  v6[1] = sub_1007696D0;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v6, 0, 0, 0xD000000000000017, 0x8000000101406A50, sub_100771834, v5, (char *)&type metadata for () + 8);
}

void sub_10076E2C8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, SEL *a8)
{
  id v18 = a2;
  uint64_t v19 = a8;
  uint64_t v11 = sub_10000588C((uint64_t *)&unk_1016565A0);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))((char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v11);
  unint64_t v15 = (*(unsigned __int8 *)(v12 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
  uint64_t v16 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v12 + 32))(v16 + v15, (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), v11);
  aBlock[4] = a6;
  uint64_t aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_100769474;
  aBlock[3] = a7;
  uint64_t v17 = _Block_copy(aBlock);
  swift_release();
  [v18 *v19 isa:v17];
  _Block_release(v17);
}

uint64_t sub_10076E484(uint64_t a1)
{
  if (a1)
  {
    swift_errorRetain();
    sub_10000588C((uint64_t *)&unk_1016565A0);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    sub_10000588C((uint64_t *)&unk_1016565A0);
    return CheckedContinuation.resume(returning:)();
  }
}

void sub_10076E4E8(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_10000588C(&qword_10164D2E8);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_1007716B0;
  uint64_t aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_100769CD8;
  aBlock[3] = &unk_1015D4108;
  uint64_t v10 = _Block_copy(aBlock);
  swift_release();
  [a2 metadataWithBeaconIdentifier:isa completion:v10];
  _Block_release(v10);
}

uint64_t sub_10076E6A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[5] = a2;
  v3[6] = a3;
  v3[4] = a1;
  return _swift_task_switch(sub_10076E6C8, 0, 0);
}

uint64_t sub_10076E6C8()
{
  uint64_t v1 = v0[5];
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  v0[2] = v1;
  sub_10000588C(&qword_10164D2C8);
  sub_100771BD0(&qword_10164D2D0, &qword_10164D2C8, (void (*)(void))sub_100771644);
  uint64_t v2 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  v0[7] = v2;
  v0[8] = v3;
  uint64_t v4 = v2;
  uint64_t v5 = v3;
  uint64_t v6 = v0[6];
  uint64_t v7 = v0[4];
  swift_release();
  unint64_t v8 = (void *)swift_task_alloc();
  v0[9] = v8;
  v8[2] = v6;
  v8[3] = v7;
  v8[4] = v4;
  v8[5] = v5;
  uint64_t v9 = (void *)swift_task_alloc();
  v0[10] = v9;
  uint64_t v10 = sub_10000588C(&qword_10164D2E0);
  *uint64_t v9 = v0;
  v9[1] = sub_10076A5A8;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 3, 0, 0, 0xD000000000000021, 0x8000000101406A00, sub_100771698, v8, v10);
}

void sub_10076E8D0(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_10000588C(&qword_10164D2E8);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  Class v8 = Data._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v9 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v10 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v10 + v9, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_1007716B0;
  uint64_t aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_100769CD8;
  aBlock[3] = &unk_1015D40B8;
  uint64_t v11 = _Block_copy(aBlock);
  swift_release();
  [a2 metadataWithBeaconIdentifier:isa typesData:v8 completion:v11];
  _Block_release(v11);
}

uint64_t sub_10076EAB4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, void (*a6)(void), uint64_t *a7)
{
  if (a3)
  {
    swift_errorRetain();
  }
  else
  {
    if (a2 >> 60 != 15)
    {
      type metadata accessor for PropertyListDecoder();
      swift_allocObject();
      sub_1000361E0(a1, a2);
      PropertyListDecoder.init()();
      sub_10000588C(a5);
      a6();
      dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
      swift_release();
      swift_bridgeObjectRetain();
      sub_10000588C(a7);
      CheckedContinuation.resume(returning:)();
      sub_100037A24(a1, a2);
      return swift_bridgeObjectRelease();
    }
    sub_1001A14F0();
    swift_allocError();
    *unint64_t v9 = 2;
  }
  swift_willThrow();
  sub_10000588C(a7);
  return CheckedContinuation.resume(throwing:)();
}

void sub_10076EC44(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_1016565A0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v8 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v9 + v8, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_1007715A0;
  uint64_t aBlock[5] = v9;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_100769474;
  aBlock[3] = &unk_1015D4068;
  uint64_t v10 = _Block_copy(aBlock);
  swift_release();
  [a2 deleteMetadataWithBeaconIdentifier:isa completion:v10];
  _Block_release(v10);
}

void sub_10076EE00(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_1016565A0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))((char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v4);
  unint64_t v7 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = swift_allocObject();
  (*(void (**)(unint64_t, char *, uint64_t))(v5 + 32))(v8 + v7, (char *)aBlock - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v4);
  aBlock[4] = sub_1007715A0;
  uint64_t aBlock[5] = v8;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_100769474;
  aBlock[3] = &unk_1015D4018;
  uint64_t v9 = _Block_copy(aBlock);
  swift_release();
  [a2 removeOrphanedKeySyncMetaDataWithCompletion:v9];
  _Block_release(v9);
}

uint64_t sub_10076EFA8(uint64_t a1)
{
  if (a1)
  {
    swift_errorRetain();
    swift_willThrow();
    sub_10000588C((uint64_t *)&unk_1016565A0);
    return CheckedContinuation.resume(throwing:)();
  }
  else
  {
    sub_10000588C((uint64_t *)&unk_1016565A0);
    return CheckedContinuation.resume(returning:)();
  }
}

unint64_t sub_10076F020(char a1)
{
  unint64_t result = 0xD000000000000011;
  switch(a1)
  {
    case 2:
      unint64_t result = 0xD000000000000012;
      break;
    case 3:
      unint64_t result = 0xD000000000000015;
      break;
    case 4:
      unint64_t result = 0xD000000000000017;
      break;
    case 5:
      unint64_t result = 0xD000000000000016;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_10076F0CC(void *a1)
{
  uint64_t v3 = sub_10000588C(&qword_10164D4A0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001CD44(a1, a1[3]);
  sub_100780200();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  char v14 = 0;
  type metadata accessor for DeviceEvent(0);
  sub_10077204C(&qword_10164D290, (void (*)(uint64_t))type metadata accessor for DeviceEvent);
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  if (!v1)
  {
    type metadata accessor for AttachedAccessoryEventsTransport();
    char v13 = 1;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    char v12 = 2;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    char v11 = 3;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    char v10 = 4;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
    char v9 = 5;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t sub_10076F364@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v40 = a2;
  uint64_t v3 = sub_10000588C(&qword_10163D030);
  uint64_t v4 = __chkstk_darwin(v3 - 8);
  long long v41 = (char *)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  long long v42 = (char *)&v39 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  char v10 = (char *)&v39 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  char v13 = (char *)&v39 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v39 - v15;
  __chkstk_darwin(v14);
  long long v44 = (char *)&v39 - v17;
  uint64_t v45 = sub_10000588C(&qword_10164D4B0);
  uint64_t v43 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  uint64_t v19 = (char *)&v39 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for AttachedAccessoryEventsTransport();
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v39 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = a1[3];
  long long v47 = a1;
  sub_10001CD44(a1, v23);
  sub_100780200();
  long long v46 = v19;
  uint64_t v24 = v48;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v24) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v47);
  }
  long long v48 = v13;
  long long v39 = v10;
  uint64_t v25 = (uint64_t)v22;
  type metadata accessor for DeviceEvent(0);
  char v54 = 0;
  uint64_t v26 = sub_10077204C(&qword_10164D2B8, (void (*)(uint64_t))type metadata accessor for DeviceEvent);
  uint64_t v27 = v44;
  uint64_t v28 = v45;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v29 = (uint64_t)v27;
  uint64_t v30 = v25;
  sub_10001D608(v29, v25, &qword_10163D030);
  char v53 = 1;
  uint64_t v31 = (uint64_t)v16;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v32 = (int *)v20;
  sub_10001D608(v31, v30 + *(int *)(v20 + 20), &qword_10163D030);
  char v52 = 2;
  uint64_t v33 = (uint64_t)v48;
  long long v44 = (char *)v26;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  uint64_t v34 = v43;
  sub_10001D608(v33, v30 + v32[6], &qword_10163D030);
  char v51 = 3;
  uint64_t v35 = (uint64_t)v39;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  sub_10001D608(v35, v30 + v32[7], &qword_10163D030);
  char v50 = 4;
  uint64_t v36 = (uint64_t)v42;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  sub_10001D608(v36, v30 + v32[8], &qword_10163D030);
  char v49 = 5;
  uint64_t v37 = (uint64_t)v41;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)();
  (*(void (**)(char *, uint64_t))(v34 + 8))(v46, v28);
  sub_10001D608(v37, v30 + v32[9], &qword_10163D030);
  sub_100780254(v30, v40, (uint64_t (*)(void))type metadata accessor for AttachedAccessoryEventsTransport);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v47);
  return sub_1007802BC(v30, (uint64_t (*)(void))type metadata accessor for AttachedAccessoryEventsTransport);
}

uint64_t sub_10076F9BC(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  void v5[2] = a1;
  v5[3] = v4;
  v5[1] = sub_100033F68;
  return _swift_task_switch(sub_100769500, 0, 0);
}

uint64_t sub_10076FA6C(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100033F68;
  v5[3] = a1;
  v5[4] = v4;
  return _swift_task_switch(sub_10076980C, 0, 0);
}

uint64_t sub_10076FB1C(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10001D2E4;
  v5[3] = a1;
  v5[4] = v4;
  return _swift_task_switch(sub_100769DA4, 0, 0);
}

uint64_t sub_10076FBCC()
{
  *(void *)(v1 + 16) = *v0;
  return _swift_task_switch(sub_10076FBF0, 0, 0);
}

uint64_t sub_10076FBF0()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = swift_task_alloc();
  v0[3] = v2;
  *(void *)(v2 + 16) = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  v0[4] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10076FCDC;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v3, 0, 0, 0xD000000000000020, 0x8000000101406BD0, sub_100771F74, v2, (char *)&type metadata for () + 8);
}

uint64_t sub_10076FCDC()
{
  *(void *)(*(void *)v1 + 40) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10078081C;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_100780824;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10076FDF8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v8 = *v3;
  uint64_t v9 = swift_task_alloc();
  *(void *)(v4 + 16) = v9;
  *(void *)uint64_t v9 = v4;
  *(void *)(v9 + 8) = sub_100780780;
  *(void *)(v9 + 40) = a2;
  *(void *)(v9 + 48) = v8;
  *(unsigned char *)(v9 + 96) = a3;
  *(void *)(v9 + 32) = a1;
  return _swift_task_switch(sub_10076A3D4, 0, 0);
}

uint64_t sub_10076FEC0(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_10001C878;
  v5[4] = a1;
  v5[5] = v4;
  return _swift_task_switch(sub_10076A99C, 0, 0);
}

uint64_t sub_10076FF70(double a1)
{
  *(double *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = *v1;
  return _swift_task_switch(sub_10076FF98, 0, 0);
}

uint64_t sub_10076FF98()
{
  uint64_t v1 = v0[4];
  uint64_t v2 = v0[3];
  uint64_t v3 = swift_task_alloc();
  v0[5] = v3;
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_101653DC0);
  *uint64_t v4 = v0;
  v4[1] = sub_1007700A4;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD000000000000017, 0x8000000101406B40, sub_100771D20, v3, v5);
}

uint64_t sub_1007700A4()
{
  *(void *)(*(void *)v1 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100313080;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_100780828;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_1007701C0(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100780780;
  v5[4] = a1;
  v5[5] = v4;
  return _swift_task_switch(sub_10076B550, 0, 0);
}

uint64_t sub_100770270(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  void v5[2] = a1;
  v5[3] = v4;
  v5[1] = sub_100770320;
  return _swift_task_switch(sub_10076BA4C, 0, 0);
}

uint64_t sub_100770320(__int16 a1)
{
  uint64_t v4 = *v2;
  swift_task_dealloc();
  if (v1)
  {
    uint64_t v5 = *(uint64_t (**)(void))(v4 + 8);
    return v5();
  }
  else
  {
    uint64_t v7 = *(uint64_t (**)(void))(v4 + 8);
    return v7(a1 & 0x1FF);
  }
}

uint64_t sub_10077045C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v2;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[3] = a2;
  unsigned char v7[4] = v6;
  v7[1] = sub_100033F68;
  v7[2] = a1;
  return _swift_task_switch(sub_10076C1E4, 0, 0);
}

uint64_t sub_100770518(uint64_t a1)
{
  uint64_t v3 = *v1;
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = v3;
  return _swift_task_switch(sub_10077053C, 0, 0);
}

uint64_t sub_10077053C()
{
  uint64_t v2 = v0[3];
  uint64_t v1 = v0[4];
  uint64_t v3 = swift_task_alloc();
  v0[5] = v3;
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[6] = v4;
  uint64_t v5 = sub_10000588C(&qword_10164D318);
  *uint64_t v4 = v0;
  v4[1] = sub_100770640;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD000000000000023, 0x8000000101406AD0, sub_100771A34, v3, v5);
}

uint64_t sub_100770640()
{
  *(void *)(*(void *)v1 + 56) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_10078082C;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_100780828;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10077075C()
{
  *(void *)(v1 + 16) = *v0;
  return _swift_task_switch(sub_100770780, 0, 0);
}

uint64_t sub_100770780()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = swift_task_alloc();
  v0[3] = v2;
  *(void *)(v2 + 16) = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  v0[4] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10077086C;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v3, 0, 0, 0xD00000000000001ELL, 0x8000000101406AB0, sub_100771924, v2, (char *)&type metadata for () + 8);
}

uint64_t sub_10077086C()
{
  *(void *)(*(void *)v1 + 40) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100770988;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_100780824;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100770988()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1007709EC()
{
  *(void *)(v1 + 24) = *v0;
  return _swift_task_switch(sub_100770A10, 0, 0);
}

uint64_t sub_100770A10()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = swift_task_alloc();
  v0[4] = v2;
  *(void *)(v2 + 16) = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  v0[5] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_100770B0C;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 2, 0, 0, 0xD00000000000001BLL, 0x8000000101406A70, sub_10077188C, v2, &type metadata for Int64);
}

uint64_t sub_100770B0C()
{
  *(void *)(*(void *)v1 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100770C44;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_100770C28;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100770C28()
{
  return (*(uint64_t (**)(void))(v0 + 8))(*(void *)(v0 + 16));
}

uint64_t sub_100770C44()
{
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_100770CA8(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  void v5[2] = a1;
  v5[3] = v4;
  v5[1] = sub_100033F68;
  return _swift_task_switch(sub_10076E0F8, 0, 0);
}

uint64_t sub_100770D58(uint64_t a1)
{
  uint64_t v3 = *v1;
  *(void *)(v2 + 24) = a1;
  *(void *)(v2 + 32) = v3;
  return _swift_task_switch(sub_100770D7C, 0, 0);
}

uint64_t sub_100770D7C()
{
  uint64_t v1 = (int8x16_t *)swift_task_alloc();
  *(void *)(v0 + 40) = v1;
  v1[1] = vextq_s8(*(int8x16_t *)(v0 + 24), *(int8x16_t *)(v0 + 24), 8uLL);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v0 + 48) = v2;
  uint64_t v3 = sub_10000588C(&qword_10164D2E0);
  *uint64_t v2 = v0;
  v2[1] = sub_100770640;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v0 + 16, 0, 0, 0xD00000000000001BLL, 0x8000000101406A30, sub_100771820, v1, v3);
}

uint64_t sub_100770E84(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v2;
  uint64_t v7 = (void *)swift_task_alloc();
  *(void *)(v3 + 16) = v7;
  *uint64_t v7 = v3;
  v7[1] = sub_100780780;
  v7[5] = a2;
  _OWORD v7[6] = v6;
  unsigned char v7[4] = a1;
  return _swift_task_switch(sub_10076E6C8, 0, 0);
}

uint64_t sub_100770F44(uint64_t a1)
{
  uint64_t v3 = *v1;
  *(void *)(v2 + 16) = a1;
  *(void *)(v2 + 24) = v3;
  return _swift_task_switch(sub_100770F68, 0, 0);
}

uint64_t sub_100770F68()
{
  uint64_t v1 = (int8x16_t *)swift_task_alloc();
  v0[2].i64[0] = (uint64_t)v1;
  v1[1] = vextq_s8(v0[1], v0[1], 8uLL);
  uint64_t v2 = (void *)swift_task_alloc();
  v0[2].i64[1] = (uint64_t)v2;
  *uint64_t v2 = v0;
  v2[1] = sub_100771058;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v2, 0, 0, 0xD000000000000021, 0x80000001014069D0, sub_100771630, v1, (char *)&type metadata for () + 8);
}

uint64_t sub_100771058()
{
  *(void *)(*(void *)v1 + 48) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v2 = sub_100770C44;
  }
  else
  {
    swift_task_dealloc();
    uint64_t v2 = sub_100771174;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_100771174()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10077118C()
{
  *(void *)(v1 + 16) = *v0;
  return _swift_task_switch(sub_1007711B0, 0, 0);
}

uint64_t sub_1007711B0()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = swift_task_alloc();
  v0[3] = v2;
  *(void *)(v2 + 16) = v1;
  uint64_t v3 = (void *)swift_task_alloc();
  v0[4] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10076FCDC;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)(v3, 0, 0, 0xD00000000000001FLL, 0x80000001014069B0, sub_10077158C, v2, (char *)&type metadata for () + 8);
}

uint64_t sub_10077129C(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v10 = *v4;
  uint64_t v11 = swift_task_alloc();
  *(void *)(v5 + 16) = v11;
  *(void *)uint64_t v11 = v5;
  *(void *)(v11 + 32) = a4;
  *(void *)(v11 + 40) = v10;
  *(unsigned char *)(v11 + 96) = a3;
  *(void *)(v11 + 16) = a1;
  *(void *)(v11 + 24) = a2;
  *(void *)(v11 + 8) = sub_100033F68;
  return _swift_task_switch(sub_10076C998, 0, 0);
}

uint64_t sub_100771370()
{
  return _swift_task_switch(sub_10077138C, 0, 0);
}

uint64_t sub_10077138C()
{
  sub_1001A14F0();
  swift_allocError();
  *uint64_t v1 = 0;
  swift_willThrow();
  uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
  return v2();
}

uint64_t sub_100771418(uint64_t a1)
{
  uint64_t v4 = *v1;
  uint64_t v5 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  void v5[2] = a1;
  v5[3] = v4;
  v5[1] = sub_100033F68;
  return _swift_task_switch(sub_10076D560, 0, 0);
}

void sub_1007714C8(uint64_t a1)
{
  sub_10076E2C8(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), (uint64_t)&unk_1015D3F60, (uint64_t)sub_100771520, (uint64_t)&unk_1015D3F78, (SEL *)&selRef_storeDeviceEventWithDeviceEvent_completion_);
}

uint64_t sub_100771514()
{
  return sub_1004AF4AC((uint64_t *)&unk_1016565A0);
}

uint64_t sub_100771520(uint64_t a1)
{
  return sub_1007715B8(a1, (uint64_t (*)(uint64_t, unint64_t))sub_10076E484);
}

uint64_t sub_100771538(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_100771548()
{
  return swift_release();
}

void sub_100771550(uint64_t a1)
{
  sub_10076CDD0(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t sub_100771560()
{
  return sub_1004AF4AC(&qword_10164D2A8);
}

uint64_t sub_10077156C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100771998(a1, a2, a3, &qword_10164D2A8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10076D090);
}

void sub_10077158C(uint64_t a1)
{
  sub_10076EE00(a1, *(void **)(v1 + 16));
}

uint64_t sub_100771594()
{
  return sub_1004AF4AC((uint64_t *)&unk_1016565A0);
}

uint64_t sub_1007715A0(uint64_t a1)
{
  return sub_1007715B8(a1, (uint64_t (*)(uint64_t, unint64_t))sub_10076EFA8);
}

uint64_t sub_1007715B8(uint64_t a1, uint64_t (*a2)(uint64_t, unint64_t))
{
  uint64_t v5 = *(void *)(sub_10000588C((uint64_t *)&unk_1016565A0) - 8);
  return a2(a1, v2 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80)));
}

void sub_100771630(uint64_t a1)
{
  sub_10076EC44(a1, *(void **)(v1 + 16));
}

uint64_t sub_100771638()
{
  return sub_1004AF4AC((uint64_t *)&unk_1016565A0);
}

unint64_t sub_100771644()
{
  unint64_t result = qword_10164D2D8;
  if (!qword_10164D2D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164D2D8);
  }
  return result;
}

void sub_100771698(uint64_t a1)
{
  sub_10076E8D0(a1, *(void **)(v1 + 16));
}

uint64_t sub_1007716A4()
{
  return sub_1004AF4AC(&qword_10164D2E8);
}

uint64_t sub_1007716B0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return sub_1007716D8(a1, a2, a3, &qword_10164D2E8, &qword_10164D2E0, (void (*)(void))sub_10077177C);
}

uint64_t sub_1007716D8(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t *a4, uint64_t *a5, void (*a6)(void))
{
  uint64_t v13 = *(void *)(sub_10000588C(a4) - 8);
  return sub_10076EAB4(a1, a2, a3, v6 + ((*(unsigned __int8 *)(v13 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80)), a5, a6, a4);
}

unint64_t sub_10077177C()
{
  unint64_t result = qword_10164D2F0;
  if (!qword_10164D2F0)
  {
    sub_10000592C(&qword_10164D2E0);
    sub_10077204C(&qword_10164D2F8, (void (*)(uint64_t))type metadata accessor for KeySyncMetadata);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164D2F0);
  }
  return result;
}

void sub_100771820(uint64_t a1)
{
  sub_10076E4E8(a1, *(void **)(v1 + 16));
}

uint64_t sub_100771828()
{
  return sub_1004AF4AC(&qword_10164D2E8);
}

void sub_100771834(uint64_t a1)
{
  sub_10076E2C8(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), (uint64_t)&unk_1015D4140, (uint64_t)sub_100771520, (uint64_t)&unk_1015D4158, (SEL *)&selRef_storeWithKeySyncMetadataData_completion_);
}

uint64_t sub_100771880()
{
  return sub_1004AF4AC((uint64_t *)&unk_1016565A0);
}

void sub_10077188C(uint64_t a1)
{
  sub_10076DC18(a1, *(void **)(v1 + 16));
}

uint64_t sub_100771894()
{
  return sub_1004AF4AC(&qword_10164D310);
}

uint64_t sub_1007718A0(uint64_t a1, uint64_t a2)
{
  sub_10000588C(&qword_10164D310);

  return sub_10076DDC0(a1, a2);
}

void sub_100771924(uint64_t a1)
{
  sub_10076DEBC(a1, *(void **)(v1 + 16), (uint64_t)&unk_1015D41E0, (uint64_t)sub_100771978, (uint64_t)&unk_1015D41F8, (SEL *)&selRef_decimateLowValueObservationsWithCompletion_);
}

uint64_t sub_10077196C()
{
  return sub_1004AF4AC((uint64_t *)&unk_1016565A0);
}

uint64_t sub_100771978(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100771998(a1, a2, a3, (uint64_t *)&unk_1016565A0, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10076E05C);
}

uint64_t sub_100771998(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v9 = *(void *)(sub_10000588C(a4) - 8);
  uint64_t v10 = v5 + ((*(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));

  return a5(a1, a2, a3, v10);
}

void sub_100771A34(uint64_t a1)
{
  sub_10076D8B0(a1, *(void **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100771A3C()
{
  return sub_1004AF4AC(&qword_10164D320);
}

uint64_t sub_100771A4C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return sub_10076DA60(a1, a2, a3);
}

uint64_t sub_100771ACC(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000592C(&qword_10164D318);
    sub_10077204C(a2, (void (*)(uint64_t))type metadata accessor for ObservedAdvertisement);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_100771B60(uint64_t a1)
{
  sub_10076C3C0(a1, *(void **)(v1 + 16));
}

uint64_t sub_100771B6C()
{
  return sub_1004AF4AC(&qword_10164D340);
}

uint64_t sub_100771B78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100771998(a1, a2, a3, &qword_10164D340, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10076C588);
}

void sub_100771B98(uint64_t a1)
{
  sub_10076BE2C(a1, *(void **)(v1 + 16));
}

uint64_t sub_100771BA4()
{
  return sub_1004AF4AC(&qword_10164D360);
}

uint64_t sub_100771BB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100771998(a1, a2, a3, &qword_10164D360, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10076BFF4);
}

uint64_t sub_100771BD0(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000592C(a2);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_100771C3C(uint64_t a1)
{
  sub_10076B864(a1, *(void **)(v1 + 16));
}

uint64_t sub_100771C48()
{
  return sub_1004AF4AC(&qword_10164D398);
}

uint64_t sub_100771C54(uint64_t a1, unint64_t a2, uint64_t a3)
{
  return sub_1007716D8(a1, a2, a3, &qword_10164D398, &qword_10164D390, (void (*)(void))sub_100771C7C);
}

unint64_t sub_100771C7C()
{
  unint64_t result = qword_10164D3A0;
  if (!qword_10164D3A0)
  {
    sub_10000592C(&qword_10164D390);
    sub_10077204C(&qword_10163F5D0, (void (*)(uint64_t))type metadata accessor for ObservedAdvertisement.Location);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164D3A0);
  }
  return result;
}

void sub_100771D20(uint64_t a1)
{
  sub_10076AF50(a1, *(void **)(v1 + 16), *(double *)(v1 + 24));
}

uint64_t sub_100771D2C()
{
  return sub_1004AF4AC(&qword_10164D3A8);
}

uint64_t sub_100771D38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100771998(a1, a2, a3, &qword_10164D3A8, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_10076B108);
}

unint64_t sub_100771D58()
{
  unint64_t result = qword_1016475B0;
  if (!qword_1016475B0)
  {
    sub_10000592C(&qword_101654A30);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1016475B0);
  }
  return result;
}

unint64_t sub_100771DC4()
{
  return sub_10076F020(*v0);
}

uint64_t sub_100771DCC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_100780528(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100771DF4(uint64_t a1)
{
  unint64_t v2 = sub_100780200();

  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100771E30(uint64_t a1)
{
  unint64_t v2 = sub_100780200();

  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100771E6C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10076F364(a1, a2);
}

uint64_t sub_100771E84(void *a1)
{
  return sub_10076F0CC(a1);
}

void sub_100771E9C(uint64_t a1)
{
  sub_10076AD88(a1, *(void **)(v1 + 16));
}

uint64_t sub_100771EA8()
{
  return sub_1004AF4AC(&qword_10164D320);
}

unint64_t sub_100771EB4()
{
  unint64_t result = qword_10164D3C8;
  if (!qword_10164D3C8)
  {
    sub_10000592C(&qword_10164D3C0);
    sub_10077204C(&qword_10164D2A0, (void (*)(uint64_t))type metadata accessor for BeaconIdentifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &qword_10164D3C8);
  }
  return result;
}

void sub_100771F58(uint64_t a1)
{
  sub_10076A79C(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(unsigned char *)(v1 + 48));
}

uint64_t sub_100771F68()
{
  return sub_1004AF4AC(&qword_10164D320);
}

void sub_100771F74(uint64_t a1)
{
  sub_10076DEBC(a1, *(void **)(v1 + 16), (uint64_t)&unk_1015D4460, (uint64_t)sub_100771FC8, (uint64_t)&unk_1015D4478, (SEL *)&selRef_deleteAllAnonymousObservedAdvertisementsWithCompletion_);
}

uint64_t sub_100771FBC()
{
  return sub_1004AF4AC((uint64_t *)&unk_1016565A0);
}

uint64_t sub_100771FCC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10076A344(a1, a2, a3);
}

uint64_t sub_10077204C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_100772094(uint64_t a1)
{
  sub_10076A17C(a1, *(void **)(v1 + 16));
}

uint64_t sub_1007720A0()
{
  return sub_1004AF4AC((uint64_t *)&unk_1016565A0);
}

void sub_1007720AC(uint64_t a1)
{
  sub_100769B10(a1, *(void **)(v1 + 16));
}

uint64_t sub_1007720B8()
{
  return sub_1004AF4AC((uint64_t *)&unk_1016565A0);
}

void sub_1007720C4(uint64_t a1)
{
  sub_10076E2C8(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), (uint64_t)&unk_1015D4550, (uint64_t)sub_100771520, (uint64_t)&unk_1015D4568, (SEL *)&selRef_insertWithAdvertisementData_completion_);
}

uint64_t sub_100772110()
{
  return sub_1004AF4AC((uint64_t *)&unk_1016565A0);
}

_WORD *sub_10077211C(_WORD *a1, void *a2, int *a3)
{
  uint64_t v3 = a2;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *(void *)a1 = *a2;
    a1 = (_WORD *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = a3;
    uint64_t v7 = (int *)type metadata accessor for DeviceEvent(0);
    uint64_t v231 = *((void *)v7 - 1);
    uint64_t v8 = *(unsigned int (**)(void, void, void))(v231 + 48);
    uint64_t v229 = v6;
    uint64_t v227 = v8;
    if (v8(v3, 1, v7))
    {
      uint64_t v9 = sub_10000588C(&qword_10163D030);
      memcpy(a1, v3, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      *(void *)a1 = *(void *)v3;
      a1[4] = v3[4];
      uint64_t v11 = v7[6];
      uint64_t v12 = (char *)a1 + v11;
      uint64_t v13 = (char *)v3 + v11;
      uint64_t v14 = type metadata accessor for Date();
      uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
      v15(v12, v13, v14);
      uint64_t v16 = v7[7];
      uint64_t v17 = (void *)((char *)a1 + v16);
      uint64_t v18 = (void *)((char *)v3 + v16);
      uint64_t v19 = type metadata accessor for DeviceEvent.Location(0);
      uint64_t v20 = *(void *)(v19 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
      {
        uint64_t v21 = sub_10000588C(&qword_10164E880);
        memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
      }
      else
      {
        *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
        void v17[2] = v18[2];
        v15((char *)v17 + *(int *)(v19 + 28), (char *)v18 + *(int *)(v19 + 28), v14);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
      }
      uint64_t v220 = v15;
      uint64_t v22 = v7[8];
      uint64_t v23 = (char *)a1 + v22;
      uint64_t v24 = (char *)v3 + v22;
      uint64_t v25 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
      uint64_t v26 = *(void *)(v25 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
      {
        uint64_t v27 = sub_10000588C(&qword_10163CF20);
        memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
      }
      else
      {
        uint64_t v28 = type metadata accessor for UUID();
        uint64_t v29 = *(void *)(v28 - 8);
        uint64_t v209 = *(void (**)(char *, char *, uint64_t))(v29 + 16);
        v209(v23, v24, v28);
        uint64_t v30 = *(int *)(v25 + 20);
        __dst = &v23[v30];
        uint64_t v31 = &v24[v30];
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v31, 1, v28))
        {
          uint64_t v32 = sub_10000588C(&qword_101638CF0);
          memcpy(__dst, v31, *(void *)(*(void *)(v32 - 8) + 64));
        }
        else
        {
          v209(__dst, v31, v28);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(__dst, 0, 1, v28);
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
      }
      uint64_t v33 = v7[9];
      uint64_t v34 = (char *)a1 + v33;
      uint64_t v35 = (char *)v3 + v33;
      uint64_t v36 = type metadata accessor for UUID();
      uint64_t v37 = *(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 16);
      v37(v34, v35, v36);
      uint64_t v38 = type metadata accessor for BeaconIdentifier();
      v37(&v34[*(int *)(v38 + 20)], &v35[*(int *)(v38 + 20)], v36);
      v220((char *)a1 + v7[10], (char *)v3 + v7[10], v14);
      (*(void (**)(_WORD *, void, uint64_t, int *))(v231 + 56))(a1, 0, 1, v7);
      uint64_t v6 = v229;
      uint64_t v8 = v227;
    }
    uint64_t v39 = v6[5];
    uint64_t v40 = (_WORD *)((char *)a1 + v39);
    long long v41 = (_WORD *)((char *)v3 + v39);
    uint64_t v224 = v3;
    uint64_t v226 = a1;
    if (v8((char *)v3 + v39, 1, v7))
    {
      uint64_t v42 = sub_10000588C(&qword_10163D030);
      memcpy(v40, v41, *(void *)(*(void *)(v42 - 8) + 64));
    }
    else
    {
      *(void *)uint64_t v40 = *(void *)v41;
      v40[4] = v41[4];
      uint64_t v43 = v7[6];
      long long v44 = (char *)v40 + v43;
      uint64_t v45 = (char *)v41 + v43;
      uint64_t v46 = type metadata accessor for Date();
      long long v47 = *(void (**)(char *, char *, uint64_t))(*(void *)(v46 - 8) + 16);
      v47(v44, v45, v46);
      uint64_t v48 = v7[7];
      char v49 = (void *)((char *)v40 + v48);
      char v50 = (void *)((char *)v41 + v48);
      uint64_t v51 = type metadata accessor for DeviceEvent.Location(0);
      uint64_t v52 = *(void *)(v51 - 8);
      uint64_t v215 = v47;
      uint64_t v221 = v46;
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v52 + 48))(v50, 1, v51))
      {
        uint64_t v53 = sub_10000588C(&qword_10164E880);
        memcpy(v49, v50, *(void *)(*(void *)(v53 - 8) + 64));
      }
      else
      {
        *(_OWORD *)char v49 = *(_OWORD *)v50;
        v49[2] = v50[2];
        v47((char *)v49 + *(int *)(v51 + 28), (char *)v50 + *(int *)(v51 + 28), v46);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v52 + 56))(v49, 0, 1, v51);
      }
      uint64_t v54 = v7[8];
      unint64_t v55 = (char *)v40 + v54;
      uint64_t v56 = (char *)v41 + v54;
      uint64_t v57 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
      uint64_t v58 = *(void *)(v57 - 8);
      a1 = v226;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(v56, 1, v57))
      {
        uint64_t v59 = sub_10000588C(&qword_10163CF20);
        memcpy(v55, v56, *(void *)(*(void *)(v59 - 8) + 64));
      }
      else
      {
        uint64_t v210 = v58;
        uint64_t v60 = type metadata accessor for UUID();
        uint64_t v61 = *(void *)(v60 - 8);
        uint64_t v201 = *(void (**)(char *, char *, uint64_t))(v61 + 16);
        v201(v55, v56, v60);
        uint64_t v62 = *(int *)(v57 + 20);
        char v205 = &v55[v62];
        uint64_t v63 = &v56[v62];
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v61 + 48))(v63, 1, v60))
        {
          uint64_t v64 = sub_10000588C(&qword_101638CF0);
          memcpy(v205, v63, *(void *)(*(void *)(v64 - 8) + 64));
        }
        else
        {
          v201(v205, v63, v60);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v61 + 56))(v205, 0, 1, v60);
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v210 + 56))(v55, 0, 1, v57);
      }
      uint64_t v65 = v7[9];
      uint64_t v66 = (char *)v40 + v65;
      Swift::String v67 = (char *)v41 + v65;
      uint64_t v68 = type metadata accessor for UUID();
      uint64_t v69 = *(void (**)(char *, char *, uint64_t))(*(void *)(v68 - 8) + 16);
      v69(v66, v67, v68);
      uint64_t v70 = type metadata accessor for BeaconIdentifier();
      v69(&v66[*(int *)(v70 + 20)], &v67[*(int *)(v70 + 20)], v68);
      v215((char *)v40 + v7[10], (char *)v41 + v7[10], v221);
      (*(void (**)(_WORD *, void, uint64_t, int *))(v231 + 56))(v40, 0, 1, v7);
      uint64_t v6 = v229;
      uint64_t v8 = v227;
    }
    uint64_t v71 = v6[6];
    uint64_t v72 = (_WORD *)((char *)a1 + v71);
    uint64_t v73 = (_WORD *)((char *)v3 + v71);
    if (v8((char *)v3 + v71, 1, v7))
    {
      uint64_t v74 = sub_10000588C(&qword_10163D030);
      memcpy(v72, v73, *(void *)(*(void *)(v74 - 8) + 64));
    }
    else
    {
      *(void *)uint64_t v72 = *(void *)v73;
      v72[4] = v73[4];
      uint64_t v75 = v7[6];
      uint64_t v76 = (char *)v72 + v75;
      unint64_t v77 = (char *)v73 + v75;
      uint64_t v78 = type metadata accessor for Date();
      unint64_t v79 = *(void (**)(char *, char *, uint64_t))(*(void *)(v78 - 8) + 16);
      v79(v76, v77, v78);
      uint64_t v80 = v7[7];
      uint64_t v81 = (void *)((char *)v72 + v80);
      uint64_t v82 = (void *)((char *)v73 + v80);
      uint64_t v83 = type metadata accessor for DeviceEvent.Location(0);
      uint64_t v84 = *(void *)(v83 - 8);
      uint64_t v216 = v79;
      uint64_t v222 = v78;
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v84 + 48))(v82, 1, v83))
      {
        uint64_t v85 = sub_10000588C(&qword_10164E880);
        memcpy(v81, v82, *(void *)(*(void *)(v85 - 8) + 64));
      }
      else
      {
        *(_OWORD *)uint64_t v81 = *(_OWORD *)v82;
        v81[2] = v82[2];
        v79((char *)v81 + *(int *)(v83 + 28), (char *)v82 + *(int *)(v83 + 28), v78);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v84 + 56))(v81, 0, 1, v83);
      }
      uint64_t v86 = v7[8];
      uint64_t v87 = (char *)v72 + v86;
      uint64_t v88 = (char *)v73 + v86;
      uint64_t v89 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
      uint64_t v90 = *(void *)(v89 - 8);
      uint64_t v3 = v224;
      a1 = v226;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v90 + 48))(v88, 1, v89))
      {
        uint64_t v91 = sub_10000588C(&qword_10163CF20);
        memcpy(v87, v88, *(void *)(*(void *)(v91 - 8) + 64));
      }
      else
      {
        uint64_t v211 = v90;
        uint64_t v92 = type metadata accessor for UUID();
        uint64_t v93 = *(void *)(v92 - 8);
        uint64_t v202 = *(void (**)(char *, char *, uint64_t))(v93 + 16);
        v202(v87, v88, v92);
        uint64_t v94 = *(int *)(v89 + 20);
        char v206 = &v87[v94];
        uint64_t v95 = &v88[v94];
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v93 + 48))(v95, 1, v92))
        {
          uint64_t v96 = sub_10000588C(&qword_101638CF0);
          memcpy(v206, v95, *(void *)(*(void *)(v96 - 8) + 64));
        }
        else
        {
          v202(v206, v95, v92);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v93 + 56))(v206, 0, 1, v92);
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v211 + 56))(v87, 0, 1, v89);
      }
      uint64_t v97 = v7[9];
      long long v98 = (char *)v72 + v97;
      uint64_t v99 = (char *)v73 + v97;
      uint64_t v100 = type metadata accessor for UUID();
      uint64_t v101 = *(void (**)(char *, char *, uint64_t))(*(void *)(v100 - 8) + 16);
      v101(v98, v99, v100);
      uint64_t v102 = type metadata accessor for BeaconIdentifier();
      v101(&v98[*(int *)(v102 + 20)], &v99[*(int *)(v102 + 20)], v100);
      v216((char *)v72 + v7[10], (char *)v73 + v7[10], v222);
      (*(void (**)(_WORD *, void, uint64_t, int *))(v231 + 56))(v72, 0, 1, v7);
      uint64_t v6 = v229;
      uint64_t v8 = v227;
    }
    uint64_t v103 = v6[7];
    unint64_t v104 = (_WORD *)((char *)a1 + v103);
    uint64_t v105 = (_WORD *)((char *)v3 + v103);
    if (v8((char *)v3 + v103, 1, v7))
    {
      uint64_t v106 = sub_10000588C(&qword_10163D030);
      memcpy(v104, v105, *(void *)(*(void *)(v106 - 8) + 64));
    }
    else
    {
      *(void *)unint64_t v104 = *(void *)v105;
      v104[4] = v105[4];
      uint64_t v107 = v7[6];
      uint64_t v108 = (char *)v104 + v107;
      uint64_t v109 = (char *)v105 + v107;
      uint64_t v110 = type metadata accessor for Date();
      uint64_t v111 = *(void (**)(char *, char *, uint64_t))(*(void *)(v110 - 8) + 16);
      v111(v108, v109, v110);
      uint64_t v112 = v7[7];
      id v113 = (void *)((char *)v104 + v112);
      unint64_t v114 = (void *)((char *)v105 + v112);
      uint64_t v115 = type metadata accessor for DeviceEvent.Location(0);
      uint64_t v116 = *(void *)(v115 - 8);
      __dsta = v111;
      uint64_t v217 = v110;
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v116 + 48))(v114, 1, v115))
      {
        uint64_t v117 = sub_10000588C(&qword_10164E880);
        memcpy(v113, v114, *(void *)(*(void *)(v117 - 8) + 64));
      }
      else
      {
        *(_OWORD *)id v113 = *(_OWORD *)v114;
        v113[2] = v114[2];
        v111((char *)v113 + *(int *)(v115 + 28), (char *)v114 + *(int *)(v115 + 28), v110);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v116 + 56))(v113, 0, 1, v115);
      }
      uint64_t v118 = v7[8];
      uint64_t v119 = (char *)v104 + v118;
      uint64_t v120 = (char *)v105 + v118;
      uint64_t v121 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
      uint64_t v122 = *(unsigned int (***)(const void *, uint64_t, uint64_t))(v121 - 8);
      a1 = v226;
      if (v122[6](v120, 1, v121))
      {
        uint64_t v123 = sub_10000588C(&qword_10163CF20);
        memcpy(v119, v120, *(void *)(*(void *)(v123 - 8) + 64));
      }
      else
      {
        uint64_t v207 = v122;
        uint64_t v124 = type metadata accessor for UUID();
        uint64_t v125 = *(void *)(v124 - 8);
        uint64_t v200 = *(void (**)(char *, char *, uint64_t))(v125 + 16);
        v200(v119, v120, v124);
        uint64_t v126 = *(int *)(v121 + 20);
        uint64_t v204 = &v119[v126];
        uint64_t v127 = &v120[v126];
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v125 + 48))(v127, 1, v124))
        {
          uint64_t v128 = sub_10000588C(&qword_101638CF0);
          memcpy(v204, v127, *(void *)(*(void *)(v128 - 8) + 64));
        }
        else
        {
          v200(v204, v127, v124);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v125 + 56))(v204, 0, 1, v124);
        }
        ((void (*)(char *, void, uint64_t, uint64_t))v207[7])(v119, 0, 1, v121);
      }
      uint64_t v129 = v7[9];
      long long v130 = (char *)v104 + v129;
      long long v131 = (char *)v105 + v129;
      uint64_t v132 = type metadata accessor for UUID();
      long long v133 = *(void (**)(char *, char *, uint64_t))(*(void *)(v132 - 8) + 16);
      v133(v130, v131, v132);
      uint64_t v134 = type metadata accessor for BeaconIdentifier();
      v133(&v130[*(int *)(v134 + 20)], &v131[*(int *)(v134 + 20)], v132);
      __dsta((char *)v104 + v7[10], (char *)v105 + v7[10], v217);
      (*(void (**)(_WORD *, void, uint64_t, int *))(v231 + 56))(v104, 0, 1, v7);
      uint64_t v6 = v229;
      uint64_t v8 = v227;
    }
    uint64_t v135 = v6[8];
    long long v136 = (_WORD *)((char *)a1 + v135);
    long long v137 = (_WORD *)((char *)v3 + v135);
    if (v8((char *)v3 + v135, 1, v7))
    {
      uint64_t v138 = sub_10000588C(&qword_10163D030);
      memcpy(v136, v137, *(void *)(*(void *)(v138 - 8) + 64));
    }
    else
    {
      *(void *)long long v136 = *(void *)v137;
      v136[4] = v137[4];
      uint64_t v139 = v7[6];
      long long v140 = (char *)v136 + v139;
      long long v141 = (char *)v137 + v139;
      uint64_t v142 = type metadata accessor for Date();
      long long v143 = *(void (**)(char *, char *, uint64_t))(*(void *)(v142 - 8) + 16);
      v143(v140, v141, v142);
      uint64_t v144 = v7[7];
      long long v145 = (void *)((char *)v136 + v144);
      long long v146 = (void *)((char *)v137 + v144);
      uint64_t v147 = type metadata accessor for DeviceEvent.Location(0);
      uint64_t v148 = *(void *)(v147 - 8);
      v218 = v143;
      uint64_t v223 = v142;
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v148 + 48))(v146, 1, v147))
      {
        uint64_t v149 = sub_10000588C(&qword_10164E880);
        memcpy(v145, v146, *(void *)(*(void *)(v149 - 8) + 64));
      }
      else
      {
        *(_OWORD *)long long v145 = *(_OWORD *)v146;
        v145[2] = v146[2];
        v143((char *)v145 + *(int *)(v147 + 28), (char *)v146 + *(int *)(v147 + 28), v142);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v148 + 56))(v145, 0, 1, v147);
      }
      uint64_t v150 = v7[8];
      long long v151 = (char *)v136 + v150;
      long long v152 = (char *)v137 + v150;
      uint64_t v153 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
      uint64_t v154 = *(void *)(v153 - 8);
      uint64_t v3 = v224;
      a1 = v226;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v154 + 48))(v152, 1, v153))
      {
        uint64_t v155 = sub_10000588C(&qword_10163CF20);
        memcpy(v151, v152, *(void *)(*(void *)(v155 - 8) + 64));
      }
      else
      {
        uint64_t v212 = v154;
        uint64_t v156 = type metadata accessor for UUID();
        uint64_t v157 = *(void *)(v156 - 8);
        char v203 = *(void (**)(char *, char *, uint64_t))(v157 + 16);
        v203(v151, v152, v156);
        uint64_t v158 = *(int *)(v153 + 20);
        uint64_t v208 = &v151[v158];
        long long v159 = &v152[v158];
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v157 + 48))(v159, 1, v156))
        {
          uint64_t v160 = sub_10000588C(&qword_101638CF0);
          memcpy(v208, v159, *(void *)(*(void *)(v160 - 8) + 64));
        }
        else
        {
          v203(v208, v159, v156);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v157 + 56))(v208, 0, 1, v156);
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v212 + 56))(v151, 0, 1, v153);
      }
      uint64_t v161 = v7[9];
      long long v162 = (char *)v136 + v161;
      long long v163 = (char *)v137 + v161;
      uint64_t v164 = type metadata accessor for UUID();
      long long v165 = *(void (**)(char *, char *, uint64_t))(*(void *)(v164 - 8) + 16);
      v165(v162, v163, v164);
      uint64_t v166 = type metadata accessor for BeaconIdentifier();
      v165(&v162[*(int *)(v166 + 20)], &v163[*(int *)(v166 + 20)], v164);
      v218((char *)v136 + v7[10], (char *)v137 + v7[10], v223);
      (*(void (**)(_WORD *, void, uint64_t, int *))(v231 + 56))(v136, 0, 1, v7);
      uint64_t v6 = v229;
      uint64_t v8 = v227;
    }
    uint64_t v167 = v6[9];
    long long v168 = (_WORD *)((char *)a1 + v167);
    long long v169 = (_WORD *)((char *)v3 + v167);
    if (v8(v169, 1, v7))
    {
      uint64_t v170 = sub_10000588C(&qword_10163D030);
      memcpy(v168, v169, *(void *)(*(void *)(v170 - 8) + 64));
    }
    else
    {
      *(void *)long long v168 = *(void *)v169;
      v168[4] = v169[4];
      uint64_t v171 = v7[6];
      NSString v172 = (char *)v168 + v171;
      id v173 = (char *)v169 + v171;
      uint64_t v174 = type metadata accessor for Date();
      uint64_t v175 = *(void (**)(char *, char *, uint64_t))(*(void *)(v174 - 8) + 16);
      v175(v172, v173, v174);
      uint64_t v176 = v7[7];
      os_log_type_t v177 = (void *)((char *)v168 + v176);
      id v178 = (void *)((char *)v169 + v176);
      uint64_t v179 = type metadata accessor for DeviceEvent.Location(0);
      uint64_t v180 = *(void *)(v179 - 8);
      char v228 = v175;
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v180 + 48))(v178, 1, v179))
      {
        uint64_t v181 = sub_10000588C(&qword_10164E880);
        memcpy(v177, v178, *(void *)(*(void *)(v181 - 8) + 64));
      }
      else
      {
        *(_OWORD *)os_log_type_t v177 = *(_OWORD *)v178;
        v177[2] = v178[2];
        v175((char *)v177 + *(int *)(v179 + 28), (char *)v178 + *(int *)(v179 + 28), v174);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v180 + 56))(v177, 0, 1, v179);
      }
      uint64_t v230 = v174;
      uint64_t v182 = v7[8];
      uint64_t v183 = (char *)v168 + v182;
      uint64_t v184 = (char *)v169 + v182;
      uint64_t v185 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
      uint64_t v186 = *(void *)(v185 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v186 + 48))(v184, 1, v185))
      {
        uint64_t v187 = sub_10000588C(&qword_10163CF20);
        memcpy(v183, v184, *(void *)(*(void *)(v187 - 8) + 64));
      }
      else
      {
        uint64_t v188 = type metadata accessor for UUID();
        uint64_t v189 = *(void *)(v188 - 8);
        v219 = *(void (**)(char *, char *, uint64_t))(v189 + 16);
        v219(v183, v184, v188);
        uint64_t v190 = *(int *)(v185 + 20);
        uint64_t v225 = &v183[v190];
        char v191 = &v184[v190];
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v189 + 48))(v191, 1, v188))
        {
          uint64_t v192 = sub_10000588C(&qword_101638CF0);
          memcpy(v225, v191, *(void *)(*(void *)(v192 - 8) + 64));
        }
        else
        {
          v219(v225, v191, v188);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v189 + 56))(v225, 0, 1, v188);
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v186 + 56))(v183, 0, 1, v185);
      }
      uint64_t v193 = v7[9];
      uint64_t v194 = (char *)v168 + v193;
      uint64_t v195 = (char *)v169 + v193;
      uint64_t v196 = type metadata accessor for UUID();
      uint64_t v197 = *(void (**)(char *, char *, uint64_t))(*(void *)(v196 - 8) + 16);
      v197(v194, v195, v196);
      uint64_t v198 = type metadata accessor for BeaconIdentifier();
      v197(&v194[*(int *)(v198 + 20)], &v195[*(int *)(v198 + 20)], v196);
      v228((char *)v168 + v7[10], (char *)v169 + v7[10], v230);
      (*(void (**)(_WORD *, void, uint64_t, int *))(v231 + 56))(v168, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t sub_100773BB4(uint64_t a1, int *a2)
{
  uint64_t v4 = (int *)type metadata accessor for DeviceEvent(0);
  int v5 = *(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v4 - 1) + 48);
  uint64_t v107 = a2;
  if (!v5(a1, 1, v4))
  {
    uint64_t v6 = a1 + v4[6];
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8);
    v8(v6, v7);
    uint64_t v9 = a1 + v4[7];
    uint64_t v10 = type metadata accessor for DeviceEvent.Location(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10)) {
      v8(v9 + *(int *)(v10 + 28), v7);
    }
    uint64_t v102 = v8;
    uint64_t v11 = a1 + v4[8];
    uint64_t v12 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v11, 1, v12))
    {
      uint64_t v13 = type metadata accessor for UUID();
      uint64_t v14 = *(void *)(v13 - 8);
      uint64_t v101 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
      v101(v11, v13);
      uint64_t v15 = v11 + *(int *)(v12 + 20);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v15, 1, v13)) {
        v101(v15, v13);
      }
    }
    uint64_t v16 = a1 + v4[9];
    uint64_t v17 = type metadata accessor for UUID();
    uint64_t v18 = *(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8);
    v18(v16, v17);
    uint64_t v19 = type metadata accessor for BeaconIdentifier();
    v18(v16 + *(int *)(v19 + 20), v17);
    v102(a1 + v4[10], v7);
  }
  uint64_t v20 = a1 + a2[5];
  if (!v5(v20, 1, v4))
  {
    uint64_t v21 = v20 + v4[6];
    uint64_t v22 = type metadata accessor for Date();
    uint64_t v23 = *(void (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8);
    v23(v21, v22);
    uint64_t v24 = v20 + v4[7];
    uint64_t v25 = type metadata accessor for DeviceEvent.Location(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 48))(v24, 1, v25)) {
      v23(v24 + *(int *)(v25 + 28), v22);
    }
    uint64_t v103 = v23;
    uint64_t v26 = v20 + v4[8];
    uint64_t v27 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 48))(v26, 1, v27))
    {
      uint64_t v28 = type metadata accessor for UUID();
      uint64_t v29 = *(void *)(v28 - 8);
      uint64_t v97 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
      v97(v26, v28);
      uint64_t v30 = v26 + *(int *)(v27 + 20);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v30, 1, v28)) {
        v97(v30, v28);
      }
    }
    uint64_t v31 = v20 + v4[9];
    uint64_t v32 = type metadata accessor for UUID();
    uint64_t v33 = *(void (**)(uint64_t, uint64_t))(*(void *)(v32 - 8) + 8);
    v33(v31, v32);
    uint64_t v34 = type metadata accessor for BeaconIdentifier();
    v33(v31 + *(int *)(v34 + 20), v32);
    v103(v20 + v4[10], v22);
    a2 = v107;
  }
  uint64_t v35 = a1 + a2[6];
  if (!v5(v35, 1, v4))
  {
    uint64_t v36 = v35 + v4[6];
    uint64_t v37 = type metadata accessor for Date();
    uint64_t v38 = *(void (**)(uint64_t, uint64_t))(*(void *)(v37 - 8) + 8);
    v38(v36, v37);
    uint64_t v39 = v35 + v4[7];
    uint64_t v40 = type metadata accessor for DeviceEvent.Location(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 48))(v39, 1, v40)) {
      v38(v39 + *(int *)(v40 + 28), v37);
    }
    unint64_t v104 = v38;
    uint64_t v41 = v35 + v4[8];
    uint64_t v42 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v42 - 8) + 48))(v41, 1, v42))
    {
      uint64_t v43 = type metadata accessor for UUID();
      uint64_t v44 = *(void *)(v43 - 8);
      long long v98 = *(void (**)(uint64_t, uint64_t))(v44 + 8);
      v98(v41, v43);
      uint64_t v45 = v41 + *(int *)(v42 + 20);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v45, 1, v43)) {
        v98(v45, v43);
      }
    }
    uint64_t v46 = v35 + v4[9];
    uint64_t v47 = type metadata accessor for UUID();
    uint64_t v48 = *(void (**)(uint64_t, uint64_t))(*(void *)(v47 - 8) + 8);
    v48(v46, v47);
    uint64_t v49 = type metadata accessor for BeaconIdentifier();
    v48(v46 + *(int *)(v49 + 20), v47);
    v104(v35 + v4[10], v37);
    a2 = v107;
  }
  uint64_t v50 = a1 + a2[7];
  if (!v5(v50, 1, v4))
  {
    uint64_t v51 = v50 + v4[6];
    uint64_t v52 = type metadata accessor for Date();
    uint64_t v53 = *(void (**)(uint64_t, uint64_t))(*(void *)(v52 - 8) + 8);
    v53(v51, v52);
    uint64_t v54 = v50 + v4[7];
    uint64_t v55 = type metadata accessor for DeviceEvent.Location(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v55 - 8) + 48))(v54, 1, v55)) {
      v53(v54 + *(int *)(v55 + 28), v52);
    }
    uint64_t v105 = v53;
    uint64_t v56 = v50 + v4[8];
    uint64_t v57 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 48))(v56, 1, v57))
    {
      uint64_t v58 = type metadata accessor for UUID();
      uint64_t v59 = *(void *)(v58 - 8);
      uint64_t v99 = *(void (**)(uint64_t, uint64_t))(v59 + 8);
      v99(v56, v58);
      uint64_t v60 = v56 + *(int *)(v57 + 20);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v60, 1, v58)) {
        v99(v60, v58);
      }
    }
    uint64_t v61 = v50 + v4[9];
    uint64_t v62 = type metadata accessor for UUID();
    uint64_t v63 = *(void (**)(uint64_t, uint64_t))(*(void *)(v62 - 8) + 8);
    v63(v61, v62);
    uint64_t v64 = type metadata accessor for BeaconIdentifier();
    v63(v61 + *(int *)(v64 + 20), v62);
    v105(v50 + v4[10], v52);
    a2 = v107;
  }
  uint64_t v65 = a1 + a2[8];
  if (!v5(v65, 1, v4))
  {
    uint64_t v66 = v65 + v4[6];
    uint64_t v67 = type metadata accessor for Date();
    uint64_t v68 = *(void (**)(uint64_t, uint64_t))(*(void *)(v67 - 8) + 8);
    v68(v66, v67);
    uint64_t v69 = v65 + v4[7];
    uint64_t v70 = type metadata accessor for DeviceEvent.Location(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v70 - 8) + 48))(v69, 1, v70)) {
      v68(v69 + *(int *)(v70 + 28), v67);
    }
    uint64_t v106 = v68;
    uint64_t v71 = v65 + v4[8];
    uint64_t v72 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v72 - 8) + 48))(v71, 1, v72))
    {
      uint64_t v73 = type metadata accessor for UUID();
      uint64_t v74 = *(void *)(v73 - 8);
      uint64_t v100 = *(void (**)(uint64_t, uint64_t))(v74 + 8);
      v100(v71, v73);
      uint64_t v75 = v71 + *(int *)(v72 + 20);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v74 + 48))(v75, 1, v73)) {
        v100(v75, v73);
      }
    }
    uint64_t v76 = v65 + v4[9];
    uint64_t v77 = type metadata accessor for UUID();
    uint64_t v78 = *(void (**)(uint64_t, uint64_t))(*(void *)(v77 - 8) + 8);
    v78(v76, v77);
    uint64_t v79 = type metadata accessor for BeaconIdentifier();
    v78(v76 + *(int *)(v79 + 20), v77);
    v106(v65 + v4[10], v67);
    a2 = v107;
  }
  uint64_t v80 = a1 + a2[9];
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, int *))v5)(v80, 1, v4);
  if (!result)
  {
    uint64_t v82 = v80 + v4[6];
    uint64_t v83 = type metadata accessor for Date();
    uint64_t v108 = *(void (**)(uint64_t, uint64_t))(*(void *)(v83 - 8) + 8);
    v108(v82, v83);
    uint64_t v84 = v80 + v4[7];
    uint64_t v85 = type metadata accessor for DeviceEvent.Location(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v85 - 8) + 48))(v84, 1, v85)) {
      v108(v84 + *(int *)(v85 + 28), v83);
    }
    uint64_t v86 = v80 + v4[8];
    uint64_t v87 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v87 - 8) + 48))(v86, 1, v87))
    {
      uint64_t v88 = type metadata accessor for UUID();
      uint64_t v89 = *(void *)(v88 - 8);
      uint64_t v90 = *(void (**)(uint64_t, uint64_t))(v89 + 8);
      v90(v86, v88);
      uint64_t v91 = v86 + *(int *)(v87 + 20);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v89 + 48))(v91, 1, v88)) {
        v90(v91, v88);
      }
    }
    uint64_t v92 = v80 + v4[9];
    uint64_t v93 = type metadata accessor for UUID();
    uint64_t v94 = *(void (**)(uint64_t, uint64_t))(*(void *)(v93 - 8) + 8);
    v94(v92, v93);
    uint64_t v95 = type metadata accessor for BeaconIdentifier();
    v94(v92 + *(int *)(v95 + 20), v93);
    uint64_t v96 = v80 + v4[10];
    return ((uint64_t (*)(uint64_t, uint64_t))v108)(v96, v83);
  }
  return result;
}

_WORD *sub_100774A10(_WORD *a1, _WORD *a2, int *a3)
{
  uint64_t v6 = (int *)type metadata accessor for DeviceEvent(0);
  uint64_t v223 = *((void *)v6 - 1);
  uint64_t v7 = *(unsigned int (**)(void, void, void))(v223 + 48);
  v219 = a1;
  uint64_t v220 = v7;
  uint64_t v221 = a3;
  if (v7(a2, 1, v6))
  {
    uint64_t v8 = sub_10000588C(&qword_10163D030);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    a1[4] = a2[4];
    uint64_t v9 = v6[6];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for Date();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    uint64_t v14 = v6[7];
    uint64_t v15 = (void *)((char *)a1 + v14);
    uint64_t v16 = (void *)((char *)a2 + v14);
    uint64_t v17 = type metadata accessor for DeviceEvent.Location(0);
    uint64_t v18 = *(void *)(v17 - 8);
    uint64_t v208 = v13;
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      uint64_t v19 = sub_10000588C(&qword_10164E880);
      memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
      _OWORD v15[2] = v16[2];
      v13((char *)v15 + *(int *)(v17 + 28), (char *)v16 + *(int *)(v17 + 28), v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    uint64_t v20 = v6[8];
    uint64_t v21 = (char *)a1 + v20;
    uint64_t v22 = (char *)a2 + v20;
    uint64_t v23 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
    uint64_t v24 = *(void *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      uint64_t v25 = sub_10000588C(&qword_10163CF20);
      memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      uint64_t v26 = type metadata accessor for UUID();
      uint64_t v27 = *(void *)(v26 - 8);
      uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v27 + 16);
      v28(v21, v22, v26);
      uint64_t v29 = *(int *)(v23 + 20);
      __dst = &v21[v29];
      uint64_t v30 = &v22[v29];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v30, 1, v26))
      {
        uint64_t v31 = sub_10000588C(&qword_101638CF0);
        memcpy(__dst, v30, *(void *)(*(void *)(v31 - 8) + 64));
      }
      else
      {
        v28(__dst, v30, v26);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(__dst, 0, 1, v26);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
      a1 = v219;
    }
    uint64_t v32 = v6[9];
    uint64_t v33 = (char *)a1 + v32;
    uint64_t v34 = (char *)a2 + v32;
    uint64_t v35 = type metadata accessor for UUID();
    uint64_t v36 = *(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 16);
    v36(v33, v34, v35);
    uint64_t v37 = type metadata accessor for BeaconIdentifier();
    v36(&v33[*(int *)(v37 + 20)], &v34[*(int *)(v37 + 20)], v35);
    v208((char *)a1 + v6[10], (char *)a2 + v6[10], v12);
    (*(void (**)(_WORD *, void, uint64_t, int *))(v223 + 56))(a1, 0, 1, v6);
    uint64_t v7 = v220;
    a3 = v221;
  }
  uint64_t v38 = a3[5];
  uint64_t v39 = (_WORD *)((char *)a1 + v38);
  uint64_t v40 = (_WORD *)((char *)a2 + v38);
  if (v7((char *)a2 + v38, 1, v6))
  {
    uint64_t v41 = sub_10000588C(&qword_10163D030);
    memcpy(v39, v40, *(void *)(*(void *)(v41 - 8) + 64));
  }
  else
  {
    *(void *)uint64_t v39 = *(void *)v40;
    v39[4] = v40[4];
    uint64_t v42 = v6[6];
    uint64_t v43 = (char *)v39 + v42;
    uint64_t v44 = (char *)v40 + v42;
    uint64_t v45 = type metadata accessor for Date();
    uint64_t v46 = *(void (**)(char *, char *, uint64_t))(*(void *)(v45 - 8) + 16);
    v46(v43, v44, v45);
    uint64_t v47 = v6[7];
    uint64_t v48 = (void *)((char *)v39 + v47);
    uint64_t v49 = (void *)((char *)v40 + v47);
    uint64_t v50 = type metadata accessor for DeviceEvent.Location(0);
    uint64_t v51 = *(void *)(v50 - 8);
    uint64_t v209 = v46;
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
    {
      uint64_t v52 = sub_10000588C(&qword_10164E880);
      memcpy(v48, v49, *(void *)(*(void *)(v52 - 8) + 64));
    }
    else
    {
      *(_OWORD *)uint64_t v48 = *(_OWORD *)v49;
      v48[2] = v49[2];
      v46((char *)v48 + *(int *)(v50 + 28), (char *)v49 + *(int *)(v50 + 28), v45);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
    }
    uint64_t v213 = v45;
    uint64_t v53 = v6[8];
    uint64_t v54 = (char *)v39 + v53;
    uint64_t v55 = (char *)v40 + v53;
    uint64_t v56 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
    uint64_t v57 = *(void *)(v56 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v55, 1, v56))
    {
      uint64_t v58 = sub_10000588C(&qword_10163CF20);
      memcpy(v54, v55, *(void *)(*(void *)(v58 - 8) + 64));
    }
    else
    {
      uint64_t v59 = type metadata accessor for UUID();
      uint64_t v60 = *(void *)(v59 - 8);
      uint64_t v199 = *(void (**)(char *, char *, uint64_t))(v60 + 16);
      v199(v54, v55, v59);
      uint64_t v61 = *(int *)(v56 + 20);
      __dsta = &v54[v61];
      uint64_t v62 = &v55[v61];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v62, 1, v59))
      {
        uint64_t v63 = sub_10000588C(&qword_101638CF0);
        memcpy(__dsta, v62, *(void *)(*(void *)(v63 - 8) + 64));
      }
      else
      {
        v199(__dsta, v62, v59);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v60 + 56))(__dsta, 0, 1, v59);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
    }
    uint64_t v64 = v6[9];
    uint64_t v65 = (char *)v39 + v64;
    uint64_t v66 = (char *)v40 + v64;
    uint64_t v67 = type metadata accessor for UUID();
    uint64_t v68 = *(void (**)(char *, char *, uint64_t))(*(void *)(v67 - 8) + 16);
    v68(v65, v66, v67);
    uint64_t v69 = type metadata accessor for BeaconIdentifier();
    v68(&v65[*(int *)(v69 + 20)], &v66[*(int *)(v69 + 20)], v67);
    v209((char *)v39 + v6[10], (char *)v40 + v6[10], v213);
    (*(void (**)(_WORD *, void, uint64_t, int *))(v223 + 56))(v39, 0, 1, v6);
    a1 = v219;
    uint64_t v7 = v220;
    a3 = v221;
  }
  uint64_t v70 = a3[6];
  uint64_t v71 = (_WORD *)((char *)a1 + v70);
  uint64_t v72 = (_WORD *)((char *)a2 + v70);
  if (v7((char *)a2 + v70, 1, v6))
  {
    uint64_t v73 = sub_10000588C(&qword_10163D030);
    memcpy(v71, v72, *(void *)(*(void *)(v73 - 8) + 64));
  }
  else
  {
    *(void *)uint64_t v71 = *(void *)v72;
    v71[4] = v72[4];
    uint64_t v74 = v6[6];
    uint64_t v75 = (char *)v71 + v74;
    uint64_t v76 = (char *)v72 + v74;
    uint64_t v77 = type metadata accessor for Date();
    uint64_t v78 = *(void (**)(char *, char *, uint64_t))(*(void *)(v77 - 8) + 16);
    v78(v75, v76, v77);
    uint64_t v79 = v6[7];
    uint64_t v80 = (void *)((char *)v71 + v79);
    uint64_t v81 = (void *)((char *)v72 + v79);
    uint64_t v82 = type metadata accessor for DeviceEvent.Location(0);
    uint64_t v83 = *(void *)(v82 - 8);
    uint64_t v210 = v78;
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v83 + 48))(v81, 1, v82))
    {
      uint64_t v84 = sub_10000588C(&qword_10164E880);
      memcpy(v80, v81, *(void *)(*(void *)(v84 - 8) + 64));
    }
    else
    {
      *(_OWORD *)uint64_t v80 = *(_OWORD *)v81;
      v80[2] = v81[2];
      v78((char *)v80 + *(int *)(v82 + 28), (char *)v81 + *(int *)(v82 + 28), v77);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v83 + 56))(v80, 0, 1, v82);
    }
    uint64_t v214 = v77;
    uint64_t v85 = v6[8];
    uint64_t v86 = (char *)v71 + v85;
    uint64_t v87 = (char *)v72 + v85;
    uint64_t v88 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
    uint64_t v89 = *(void *)(v88 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v89 + 48))(v87, 1, v88))
    {
      uint64_t v90 = sub_10000588C(&qword_10163CF20);
      memcpy(v86, v87, *(void *)(*(void *)(v90 - 8) + 64));
    }
    else
    {
      uint64_t v91 = type metadata accessor for UUID();
      uint64_t v92 = *(void *)(v91 - 8);
      uint64_t v200 = *(void (**)(char *, char *, uint64_t))(v92 + 16);
      v200(v86, v87, v91);
      uint64_t v93 = *(int *)(v88 + 20);
      __dstb = &v86[v93];
      uint64_t v94 = &v87[v93];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v92 + 48))(v94, 1, v91))
      {
        uint64_t v95 = sub_10000588C(&qword_101638CF0);
        memcpy(__dstb, v94, *(void *)(*(void *)(v95 - 8) + 64));
      }
      else
      {
        v200(__dstb, v94, v91);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v92 + 56))(__dstb, 0, 1, v91);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v89 + 56))(v86, 0, 1, v88);
    }
    uint64_t v96 = v6[9];
    uint64_t v97 = (char *)v71 + v96;
    long long v98 = (char *)v72 + v96;
    uint64_t v99 = type metadata accessor for UUID();
    uint64_t v100 = *(void (**)(char *, char *, uint64_t))(*(void *)(v99 - 8) + 16);
    v100(v97, v98, v99);
    uint64_t v101 = type metadata accessor for BeaconIdentifier();
    v100(&v97[*(int *)(v101 + 20)], &v98[*(int *)(v101 + 20)], v99);
    v210((char *)v71 + v6[10], (char *)v72 + v6[10], v214);
    (*(void (**)(_WORD *, void, uint64_t, int *))(v223 + 56))(v71, 0, 1, v6);
    a1 = v219;
    uint64_t v7 = v220;
    a3 = v221;
  }
  uint64_t v102 = a3[7];
  uint64_t v103 = (_WORD *)((char *)a1 + v102);
  unint64_t v104 = (_WORD *)((char *)a2 + v102);
  if (v7((char *)a2 + v102, 1, v6))
  {
    uint64_t v105 = sub_10000588C(&qword_10163D030);
    memcpy(v103, v104, *(void *)(*(void *)(v105 - 8) + 64));
  }
  else
  {
    *(void *)uint64_t v103 = *(void *)v104;
    v103[4] = v104[4];
    uint64_t v106 = v6[6];
    uint64_t v107 = (char *)v103 + v106;
    uint64_t v108 = (char *)v104 + v106;
    uint64_t v109 = type metadata accessor for Date();
    uint64_t v110 = *(void (**)(char *, char *, uint64_t))(*(void *)(v109 - 8) + 16);
    v110(v107, v108, v109);
    uint64_t v111 = v6[7];
    uint64_t v112 = (void *)((char *)v103 + v111);
    id v113 = (void *)((char *)v104 + v111);
    uint64_t v114 = type metadata accessor for DeviceEvent.Location(0);
    uint64_t v115 = *(void *)(v114 - 8);
    uint64_t v211 = v110;
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v115 + 48))(v113, 1, v114))
    {
      uint64_t v116 = sub_10000588C(&qword_10164E880);
      memcpy(v112, v113, *(void *)(*(void *)(v116 - 8) + 64));
    }
    else
    {
      *(_OWORD *)uint64_t v112 = *(_OWORD *)v113;
      v112[2] = v113[2];
      v110((char *)v112 + *(int *)(v114 + 28), (char *)v113 + *(int *)(v114 + 28), v109);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v115 + 56))(v112, 0, 1, v114);
    }
    uint64_t v215 = v109;
    uint64_t v117 = v6[8];
    uint64_t v118 = (char *)v103 + v117;
    uint64_t v119 = (char *)v104 + v117;
    uint64_t v120 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
    uint64_t v121 = *(void *)(v120 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v121 + 48))(v119, 1, v120))
    {
      uint64_t v122 = sub_10000588C(&qword_10163CF20);
      memcpy(v118, v119, *(void *)(*(void *)(v122 - 8) + 64));
    }
    else
    {
      uint64_t v123 = type metadata accessor for UUID();
      uint64_t v124 = *(void *)(v123 - 8);
      uint64_t v201 = *(void (**)(char *, char *, uint64_t))(v124 + 16);
      v201(v118, v119, v123);
      uint64_t v125 = *(int *)(v120 + 20);
      __dstc = &v118[v125];
      uint64_t v126 = &v119[v125];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v124 + 48))(v126, 1, v123))
      {
        uint64_t v127 = sub_10000588C(&qword_101638CF0);
        memcpy(__dstc, v126, *(void *)(*(void *)(v127 - 8) + 64));
      }
      else
      {
        v201(__dstc, v126, v123);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v124 + 56))(__dstc, 0, 1, v123);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v121 + 56))(v118, 0, 1, v120);
    }
    uint64_t v128 = v6[9];
    uint64_t v129 = (char *)v103 + v128;
    long long v130 = (char *)v104 + v128;
    uint64_t v131 = type metadata accessor for UUID();
    uint64_t v132 = *(void (**)(char *, char *, uint64_t))(*(void *)(v131 - 8) + 16);
    v132(v129, v130, v131);
    uint64_t v133 = type metadata accessor for BeaconIdentifier();
    v132(&v129[*(int *)(v133 + 20)], &v130[*(int *)(v133 + 20)], v131);
    v211((char *)v103 + v6[10], (char *)v104 + v6[10], v215);
    (*(void (**)(_WORD *, void, uint64_t, int *))(v223 + 56))(v103, 0, 1, v6);
    a1 = v219;
    uint64_t v7 = v220;
    a3 = v221;
  }
  uint64_t v134 = a3[8];
  uint64_t v135 = (_WORD *)((char *)a1 + v134);
  long long v136 = (_WORD *)((char *)a2 + v134);
  if (v7((char *)a2 + v134, 1, v6))
  {
    uint64_t v137 = sub_10000588C(&qword_10163D030);
    memcpy(v135, v136, *(void *)(*(void *)(v137 - 8) + 64));
  }
  else
  {
    *(void *)uint64_t v135 = *(void *)v136;
    v135[4] = v136[4];
    uint64_t v138 = v6[6];
    uint64_t v139 = (char *)v135 + v138;
    long long v140 = (char *)v136 + v138;
    uint64_t v141 = type metadata accessor for Date();
    uint64_t v142 = *(void (**)(char *, char *, uint64_t))(*(void *)(v141 - 8) + 16);
    v142(v139, v140, v141);
    uint64_t v143 = v6[7];
    uint64_t v144 = (void *)((char *)v135 + v143);
    long long v145 = (void *)((char *)v136 + v143);
    uint64_t v146 = type metadata accessor for DeviceEvent.Location(0);
    uint64_t v147 = *(void *)(v146 - 8);
    uint64_t v212 = v142;
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v147 + 48))(v145, 1, v146))
    {
      uint64_t v148 = sub_10000588C(&qword_10164E880);
      memcpy(v144, v145, *(void *)(*(void *)(v148 - 8) + 64));
    }
    else
    {
      *(_OWORD *)uint64_t v144 = *(_OWORD *)v145;
      v144[2] = v145[2];
      v142((char *)v144 + *(int *)(v146 + 28), (char *)v145 + *(int *)(v146 + 28), v141);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v147 + 56))(v144, 0, 1, v146);
    }
    uint64_t v216 = v141;
    uint64_t v149 = v6[8];
    uint64_t v150 = (char *)v135 + v149;
    long long v151 = (char *)v136 + v149;
    uint64_t v152 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
    uint64_t v153 = *(void *)(v152 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v153 + 48))(v151, 1, v152))
    {
      uint64_t v154 = sub_10000588C(&qword_10163CF20);
      memcpy(v150, v151, *(void *)(*(void *)(v154 - 8) + 64));
    }
    else
    {
      uint64_t v155 = type metadata accessor for UUID();
      uint64_t v156 = *(void *)(v155 - 8);
      uint64_t v202 = *(void (**)(char *, char *, uint64_t))(v156 + 16);
      v202(v150, v151, v155);
      uint64_t v157 = *(int *)(v152 + 20);
      __dstd = &v150[v157];
      uint64_t v158 = &v151[v157];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v156 + 48))(v158, 1, v155))
      {
        uint64_t v159 = sub_10000588C(&qword_101638CF0);
        memcpy(__dstd, v158, *(void *)(*(void *)(v159 - 8) + 64));
      }
      else
      {
        v202(__dstd, v158, v155);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v156 + 56))(__dstd, 0, 1, v155);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v153 + 56))(v150, 0, 1, v152);
    }
    uint64_t v160 = v6[9];
    uint64_t v161 = (char *)v135 + v160;
    long long v162 = (char *)v136 + v160;
    uint64_t v163 = type metadata accessor for UUID();
    uint64_t v164 = *(void (**)(char *, char *, uint64_t))(*(void *)(v163 - 8) + 16);
    v164(v161, v162, v163);
    uint64_t v165 = type metadata accessor for BeaconIdentifier();
    v164(&v161[*(int *)(v165 + 20)], &v162[*(int *)(v165 + 20)], v163);
    v212((char *)v135 + v6[10], (char *)v136 + v6[10], v216);
    (*(void (**)(_WORD *, void, uint64_t, int *))(v223 + 56))(v135, 0, 1, v6);
    a1 = v219;
    uint64_t v7 = v220;
    a3 = v221;
  }
  uint64_t v166 = a3[9];
  uint64_t v167 = (_WORD *)((char *)a1 + v166);
  long long v168 = (_WORD *)((char *)a2 + v166);
  if (v7(v168, 1, v6))
  {
    uint64_t v169 = sub_10000588C(&qword_10163D030);
    memcpy(v167, v168, *(void *)(*(void *)(v169 - 8) + 64));
  }
  else
  {
    *(void *)uint64_t v167 = *(void *)v168;
    v167[4] = v168[4];
    uint64_t v170 = v6[6];
    uint64_t v171 = (char *)v167 + v170;
    NSString v172 = (char *)v168 + v170;
    uint64_t v173 = type metadata accessor for Date();
    uint64_t v174 = *(void (**)(char *, char *))(*(void *)(v173 - 8) + 16);
    uint64_t v222 = v173;
    v174(v171, v172);
    uint64_t v175 = v6[7];
    uint64_t v176 = (void *)((char *)v167 + v175);
    os_log_type_t v177 = (void *)((char *)v168 + v175);
    uint64_t v178 = type metadata accessor for DeviceEvent.Location(0);
    uint64_t v179 = *(void *)(v178 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v179 + 48))(v177, 1, v178))
    {
      uint64_t v180 = sub_10000588C(&qword_10164E880);
      memcpy(v176, v177, *(void *)(*(void *)(v180 - 8) + 64));
    }
    else
    {
      *(_OWORD *)uint64_t v176 = *(_OWORD *)v177;
      v176[2] = v177[2];
      ((void (*)(char *, char *, uint64_t))v174)((char *)v176 + *(int *)(v178 + 28), (char *)v177 + *(int *)(v178 + 28), v222);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v179 + 56))(v176, 0, 1, v178);
    }
    uint64_t v181 = v6[8];
    uint64_t v182 = (char *)v167 + v181;
    uint64_t v183 = (char *)v168 + v181;
    uint64_t v184 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
    uint64_t v185 = *(void *)(v184 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v185 + 48))(v183, 1, v184))
    {
      uint64_t v186 = sub_10000588C(&qword_10163CF20);
      memcpy(v182, v183, *(void *)(*(void *)(v186 - 8) + 64));
    }
    else
    {
      uint64_t v187 = type metadata accessor for UUID();
      uint64_t v188 = *(void *)(v187 - 8);
      uint64_t v217 = *(void (**)(char *, char *, uint64_t))(v188 + 16);
      v217(v182, v183, v187);
      uint64_t v189 = *(int *)(v184 + 20);
      v218 = &v182[v189];
      uint64_t v190 = &v183[v189];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v188 + 48))(v190, 1, v187))
      {
        uint64_t v191 = sub_10000588C(&qword_101638CF0);
        memcpy(v218, v190, *(void *)(*(void *)(v191 - 8) + 64));
      }
      else
      {
        v217(v218, v190, v187);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v188 + 56))(v218, 0, 1, v187);
      }
      a1 = v219;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v185 + 56))(v182, 0, 1, v184);
    }
    uint64_t v192 = v6[9];
    uint64_t v193 = (char *)v167 + v192;
    uint64_t v194 = (char *)v168 + v192;
    uint64_t v195 = type metadata accessor for UUID();
    uint64_t v196 = *(void (**)(char *, char *, uint64_t))(*(void *)(v195 - 8) + 16);
    v196(v193, v194, v195);
    uint64_t v197 = type metadata accessor for BeaconIdentifier();
    v196(&v193[*(int *)(v197 + 20)], &v194[*(int *)(v197 + 20)], v195);
    ((void (*)(char *, char *, uint64_t))v174)((char *)v167 + v6[10], (char *)v168 + v6[10], v222);
    (*(void (**)(_WORD *, void, uint64_t, int *))(v223 + 56))(v167, 0, 1, v6);
  }
  return a1;
}

unsigned char *sub_10077641C(unsigned char *a1, unsigned char *a2, int *a3)
{
  uint64_t v6 = (int *)type metadata accessor for DeviceEvent(0);
  uint64_t v513 = *((void *)v6 - 1);
  uint64_t v7 = *(uint64_t (**)(unsigned char *, uint64_t, int *))(v513 + 48);
  int v8 = v7(a1, 1, v6);
  int v9 = v7(a2, 1, v6);
  v521 = a1;
  v522 = a2;
  v515 = v7;
  v519 = a3;
  if (!v8)
  {
    if (v9)
    {
      sub_1007802BC((uint64_t)a1, type metadata accessor for DeviceEvent);
      goto LABEL_7;
    }
    uint64_t v23 = *(void *)a2;
    a1[8] = a2[8];
    *(void *)a1 = v23;
    a1[9] = a2[9];
    uint64_t v24 = v6[6];
    uint64_t v25 = &a1[v24];
    uint64_t v26 = &a2[v24];
    uint64_t v27 = type metadata accessor for Date();
    uint64_t v28 = *(void *)(v27 - 8);
    v502 = *(void (**)(char *, char *, uint64_t))(v28 + 24);
    uint64_t v507 = v27;
    ((void (*)(unsigned char *, unsigned char *))v502)(v25, v26);
    uint64_t v29 = v6[7];
    uint64_t v30 = &a1[v29];
    uint64_t v31 = &a2[v29];
    uint64_t v32 = type metadata accessor for DeviceEvent.Location(0);
    uint64_t v33 = *(void *)(v32 - 8);
    uint64_t v34 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v33 + 48);
    LODWORD(v25) = v34(v30, 1, v32);
    int v35 = v34(v31, 1, v32);
    if (v25)
    {
      if (!v35)
      {
        *(void *)uint64_t v30 = *(void *)v31;
        *((void *)v30 + 1) = *((void *)v31 + 1);
        *((void *)v30 + 2) = *((void *)v31 + 2);
        (*(void (**)(char *, char *, uint64_t))(v28 + 16))(&v30[*(int *)(v32 + 28)], &v31[*(int *)(v32 + 28)], v507);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
        goto LABEL_19;
      }
    }
    else
    {
      if (!v35)
      {
        *(void *)uint64_t v30 = *(void *)v31;
        *((void *)v30 + 1) = *((void *)v31 + 1);
        *((void *)v30 + 2) = *((void *)v31 + 2);
        v502(&v30[*(int *)(v32 + 28)], &v31[*(int *)(v32 + 28)], v507);
LABEL_19:
        a1 = v521;
        uint64_t v49 = v6[8];
        uint64_t v50 = &v521[v49];
        uint64_t v51 = &v522[v49];
        uint64_t v52 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
        uint64_t v53 = *(void *)(v52 - 8);
        uint64_t v54 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v53 + 48);
        int v55 = v54(v50, 1, v52);
        int v56 = v54(v51, 1, v52);
        if (v55)
        {
          if (!v56)
          {
            uint64_t v57 = type metadata accessor for UUID();
            uint64_t v58 = *(void *)(v57 - 8);
            __dsta = *(void (**)(char *, char *, uint64_t))(v58 + 16);
            __dsta(v50, v51, v57);
            uint64_t v59 = *(int *)(v52 + 20);
            v496 = &v50[v59];
            uint64_t v60 = &v51[v59];
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v58 + 48))(&v51[v59], 1, v57))
            {
              uint64_t v61 = sub_10000588C(&qword_101638CF0);
              memcpy(v496, v60, *(void *)(*(void *)(v61 - 8) + 64));
            }
            else
            {
              __dsta(v496, v60, v57);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v58 + 56))(v496, 0, 1, v57);
            }
            a3 = v519;
            a1 = v521;
            (*(void (**)(char *, void, uint64_t, uint64_t))(v53 + 56))(v50, 0, 1, v52);
            a2 = v522;
            goto LABEL_39;
          }
          goto LABEL_25;
        }
        if (v56)
        {
          sub_1007802BC((uint64_t)v50, type metadata accessor for DeviceEvent.AttachmentInfo);
LABEL_25:
          uint64_t v62 = sub_10000588C(&qword_10163CF20);
          memcpy(v50, v51, *(void *)(*(void *)(v62 - 8) + 64));
          a2 = v522;
          a3 = v519;
LABEL_39:
          uint64_t v79 = v6[9];
          uint64_t v80 = &a1[v79];
          uint64_t v81 = &a2[v79];
          uint64_t v82 = type metadata accessor for UUID();
          uint64_t v83 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v82 - 8) + 24);
          v83(v80, v81, v82);
          uint64_t v84 = type metadata accessor for BeaconIdentifier();
          v83(&v80[*(int *)(v84 + 20)], &v81[*(int *)(v84 + 20)], v82);
          v502(&a1[v6[10]], &a2[v6[10]], v507);
          goto LABEL_40;
        }
        uint64_t v69 = type metadata accessor for UUID();
        uint64_t v70 = *(void *)(v69 - 8);
        uint64_t v71 = *(void (**)(char *, char *, uint64_t))(v70 + 24);
        v71(v50, v51, v69);
        uint64_t v72 = *(int *)(v52 + 20);
        uint64_t v73 = &v50[v72];
        uint64_t v74 = &v51[v72];
        uint64_t v75 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v70 + 48);
        int v76 = v75(v73, 1, v69);
        int v77 = v75(v74, 1, v69);
        if (v76)
        {
          a3 = v519;
          if (!v77)
          {
            (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v73, v74, v69);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v70 + 56))(v73, 0, 1, v69);
LABEL_38:
            a1 = v521;
            a2 = v522;
            goto LABEL_39;
          }
        }
        else
        {
          a3 = v519;
          if (!v77)
          {
            v71(v73, v74, v69);
            goto LABEL_38;
          }
          (*(void (**)(char *, uint64_t))(v70 + 8))(v73, v69);
        }
        uint64_t v78 = sub_10000588C(&qword_101638CF0);
        memcpy(v73, v74, *(void *)(*(void *)(v78 - 8) + 64));
        goto LABEL_38;
      }
      sub_1007802BC((uint64_t)v30, type metadata accessor for DeviceEvent.Location);
    }
    uint64_t v48 = sub_10000588C(&qword_10164E880);
    memcpy(v30, v31, *(void *)(*(void *)(v48 - 8) + 64));
    goto LABEL_19;
  }
  if (v9)
  {
LABEL_7:
    uint64_t v22 = sub_10000588C(&qword_10163D030);
    memcpy(a1, a2, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_40;
  }
  uint64_t v10 = *(void *)a2;
  a1[8] = a2[8];
  *(void *)a1 = v10;
  a1[9] = a2[9];
  uint64_t v11 = v6[6];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  uint64_t v14 = type metadata accessor for Date();
  uint64_t v15 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v14 - 8) + 16);
  v15(v12, v13, v14);
  uint64_t v16 = v6[7];
  uint64_t v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  uint64_t v19 = type metadata accessor for DeviceEvent.Location(0);
  uint64_t v20 = *(void *)(v19 - 8);
  v501 = v15;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
  {
    uint64_t v21 = sub_10000588C(&qword_10164E880);
    memcpy(v17, v18, *(void *)(*(void *)(v21 - 8) + 64));
  }
  else
  {
    *uint64_t v17 = *v18;
    v17[1] = v18[1];
    void v17[2] = v18[2];
    v15((unsigned char *)v17 + *(int *)(v19 + 28), (unsigned char *)v18 + *(int *)(v19 + 28), v14);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  uint64_t v36 = v6[8];
  uint64_t v37 = &a1[v36];
  uint64_t v38 = &a2[v36];
  uint64_t v39 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
  uint64_t v40 = *(void *)(v39 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
  {
    uint64_t v41 = sub_10000588C(&qword_10163CF20);
    memcpy(v37, v38, *(void *)(*(void *)(v41 - 8) + 64));
    a2 = v522;
    uint64_t v7 = v515;
    a3 = v519;
  }
  else
  {
    uint64_t v42 = type metadata accessor for UUID();
    uint64_t v43 = *(void *)(v42 - 8);
    uint64_t v44 = *(void (**)(char *, char *, uint64_t))(v43 + 16);
    v44(v37, v38, v42);
    uint64_t v45 = *(int *)(v39 + 20);
    __dst = &v37[v45];
    uint64_t v46 = &v38[v45];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v43 + 48))(&v38[v45], 1, v42))
    {
      uint64_t v47 = sub_10000588C(&qword_101638CF0);
      memcpy(__dst, v46, *(void *)(*(void *)(v47 - 8) + 64));
    }
    else
    {
      v44(__dst, v46, v42);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v43 + 56))(__dst, 0, 1, v42);
    }
    a3 = v519;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
    a1 = v521;
    a2 = v522;
    uint64_t v7 = v515;
  }
  uint64_t v63 = v6[9];
  uint64_t v64 = &a1[v63];
  uint64_t v65 = &a2[v63];
  uint64_t v66 = type metadata accessor for UUID();
  uint64_t v67 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v66 - 8) + 16);
  v67(v64, v65, v66);
  uint64_t v68 = type metadata accessor for BeaconIdentifier();
  v67(&v64[*(int *)(v68 + 20)], &v65[*(int *)(v68 + 20)], v66);
  v501(&a1[v6[10]], &a2[v6[10]], v14);
  (*(void (**)(unsigned char *, void, uint64_t, int *))(v513 + 56))(a1, 0, 1, v6);
LABEL_40:
  uint64_t v85 = a3[5];
  uint64_t v86 = &a1[v85];
  uint64_t v87 = &a2[v85];
  int v88 = v7(&a1[v85], 1, v6);
  int v89 = v7(v87, 1, v6);
  if (v88)
  {
    if (!v89)
    {
      uint64_t v90 = *(void *)v87;
      v86[8] = v87[8];
      *(void *)uint64_t v86 = v90;
      v86[9] = v87[9];
      uint64_t v91 = v6[6];
      uint64_t v92 = &v86[v91];
      uint64_t v93 = &v87[v91];
      uint64_t v94 = type metadata accessor for Date();
      uint64_t v95 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v94 - 8) + 16);
      v95(v92, v93, v94);
      uint64_t v96 = v6[7];
      uint64_t v97 = &v86[v96];
      long long v98 = &v87[v96];
      uint64_t v99 = type metadata accessor for DeviceEvent.Location(0);
      uint64_t v100 = *(void *)(v99 - 8);
      v503 = v95;
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v100 + 48))(v98, 1, v99))
      {
        uint64_t v101 = sub_10000588C(&qword_10164E880);
        memcpy(v97, v98, *(void *)(*(void *)(v101 - 8) + 64));
      }
      else
      {
        *uint64_t v97 = *v98;
        v97[1] = v98[1];
        v97[2] = v98[2];
        v95((unsigned char *)v97 + *(int *)(v99 + 28), (unsigned char *)v98 + *(int *)(v99 + 28), v94);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v100 + 56))(v97, 0, 1, v99);
      }
      uint64_t v114 = v6[8];
      uint64_t v115 = &v86[v114];
      uint64_t v116 = &v87[v114];
      uint64_t v117 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
      uint64_t v118 = *(void *)(v117 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v118 + 48))(v116, 1, v117))
      {
        uint64_t v119 = sub_10000588C(&qword_10163CF20);
        memcpy(v115, v116, *(void *)(*(void *)(v119 - 8) + 64));
      }
      else
      {
        uint64_t v120 = type metadata accessor for UUID();
        uint64_t v121 = *(void *)(v120 - 8);
        v477 = *(void (**)(char *, char *, uint64_t))(v121 + 16);
        v477(v115, v116, v120);
        uint64_t v122 = *(int *)(v117 + 20);
        __dstc = &v115[v122];
        uint64_t v123 = &v116[v122];
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v121 + 48))(v123, 1, v120))
        {
          uint64_t v124 = sub_10000588C(&qword_101638CF0);
          memcpy(__dstc, v123, *(void *)(*(void *)(v124 - 8) + 64));
        }
        else
        {
          v477(__dstc, v123, v120);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v121 + 56))(__dstc, 0, 1, v120);
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v118 + 56))(v115, 0, 1, v117);
      }
      a1 = v521;
      uint64_t v7 = v515;
      uint64_t v140 = v6[9];
      uint64_t v141 = &v86[v140];
      uint64_t v142 = &v87[v140];
      uint64_t v143 = type metadata accessor for UUID();
      uint64_t v144 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v143 - 8) + 16);
      v144(v141, v142, v143);
      uint64_t v145 = type metadata accessor for BeaconIdentifier();
      v144(&v141[*(int *)(v145 + 20)], &v142[*(int *)(v145 + 20)], v143);
      v503(&v86[v6[10]], &v87[v6[10]], v94);
      (*(void (**)(unsigned char *, void, uint64_t, int *))(v513 + 56))(v86, 0, 1, v6);
      goto LABEL_78;
    }
LABEL_46:
    uint64_t v102 = sub_10000588C(&qword_10163D030);
    memcpy(v86, v87, *(void *)(*(void *)(v102 - 8) + 64));
    goto LABEL_79;
  }
  if (v89)
  {
    sub_1007802BC((uint64_t)v86, type metadata accessor for DeviceEvent);
    goto LABEL_46;
  }
  uint64_t v103 = *(void *)v87;
  v86[8] = v87[8];
  *(void *)uint64_t v86 = v103;
  v86[9] = v87[9];
  uint64_t v104 = v6[6];
  uint64_t v105 = &v86[v104];
  uint64_t v106 = &v87[v104];
  uint64_t v508 = type metadata accessor for Date();
  __dstb = *(void **)(v508 - 8);
  v497 = (void *)__dstb[3];
  ((void (*)(unsigned char *, unsigned char *))v497)(v105, v106);
  uint64_t v107 = v6[7];
  uint64_t v108 = &v86[v107];
  uint64_t v109 = &v87[v107];
  uint64_t v110 = type metadata accessor for DeviceEvent.Location(0);
  uint64_t v111 = *(void *)(v110 - 8);
  uint64_t v112 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v111 + 48);
  LODWORD(v105) = v112(v108, 1, v110);
  int v113 = v112(v109, 1, v110);
  if (v105)
  {
    if (!v113)
    {
      *(void *)uint64_t v108 = *(void *)v109;
      *((void *)v108 + 1) = *((void *)v109 + 1);
      *((void *)v108 + 2) = *((void *)v109 + 2);
      ((void (*)(char *, char *, uint64_t))__dstb[2])(&v108[*(int *)(v110 + 28)], &v109[*(int *)(v110 + 28)], v508);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v111 + 56))(v108, 0, 1, v110);
      goto LABEL_58;
    }
    goto LABEL_57;
  }
  if (v113)
  {
    sub_1007802BC((uint64_t)v108, type metadata accessor for DeviceEvent.Location);
LABEL_57:
    uint64_t v125 = sub_10000588C(&qword_10164E880);
    memcpy(v108, v109, *(void *)(*(void *)(v125 - 8) + 64));
    goto LABEL_58;
  }
  *(void *)uint64_t v108 = *(void *)v109;
  *((void *)v108 + 1) = *((void *)v109 + 1);
  *((void *)v108 + 2) = *((void *)v109 + 2);
  ((void (*)(char *, char *, uint64_t))v497)(&v108[*(int *)(v110 + 28)], &v109[*(int *)(v110 + 28)], v508);
LABEL_58:
  uint64_t v126 = v6[8];
  uint64_t v127 = &v86[v126];
  uint64_t v128 = &v87[v126];
  uint64_t v129 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
  uint64_t v130 = *(void *)(v129 - 8);
  uint64_t v131 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v130 + 48);
  int v132 = v131(v127, 1, v129);
  int v133 = v131(v128, 1, v129);
  if (v132)
  {
    if (!v133)
    {
      uint64_t v134 = type metadata accessor for UUID();
      uint64_t v135 = *(void *)(v134 - 8);
      v478 = *(void (**)(char *, char *, uint64_t))(v135 + 16);
      v478(v127, v128, v134);
      uint64_t v136 = *(int *)(v129 + 20);
      __dstd = &v127[v136];
      uint64_t v137 = &v128[v136];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v135 + 48))(&v128[v136], 1, v134))
      {
        uint64_t v138 = sub_10000588C(&qword_101638CF0);
        memcpy(__dstd, v137, *(void *)(*(void *)(v138 - 8) + 64));
      }
      else
      {
        v478(__dstd, v137, v134);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v135 + 56))(__dstd, 0, 1, v134);
      }
      uint64_t v7 = v515;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v130 + 56))(v127, 0, 1, v129);
      a1 = v521;
      goto LABEL_77;
    }
  }
  else
  {
    if (!v133)
    {
      uint64_t v146 = type metadata accessor for UUID();
      uint64_t v147 = *(void *)(v146 - 8);
      v472 = *(void (**)(char *, char *, uint64_t))(v147 + 24);
      v472(v127, v128, v146);
      uint64_t v148 = *(int *)(v129 + 20);
      uint64_t v149 = &v127[v148];
      uint64_t v150 = &v128[v148];
      uint64_t v473 = v147;
      long long v151 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v147 + 48);
      LODWORD(v147) = v151(v149, 1, v146);
      int v152 = v151(v150, 1, v146);
      if (v147)
      {
        a1 = v521;
        uint64_t v7 = v515;
        if (!v152)
        {
          (*(void (**)(char *, char *, uint64_t))(v473 + 16))(v149, v150, v146);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v473 + 56))(v149, 0, 1, v146);
          goto LABEL_77;
        }
      }
      else
      {
        a1 = v521;
        uint64_t v7 = v515;
        if (!v152)
        {
          v472(v149, v150, v146);
          goto LABEL_77;
        }
        (*(void (**)(char *, uint64_t))(v473 + 8))(v149, v146);
      }
      uint64_t v153 = sub_10000588C(&qword_101638CF0);
      memcpy(v149, v150, *(void *)(*(void *)(v153 - 8) + 64));
      goto LABEL_77;
    }
    sub_1007802BC((uint64_t)v127, type metadata accessor for DeviceEvent.AttachmentInfo);
  }
  uint64_t v139 = sub_10000588C(&qword_10163CF20);
  memcpy(v127, v128, *(void *)(*(void *)(v139 - 8) + 64));
  a1 = v521;
  uint64_t v7 = v515;
LABEL_77:
  uint64_t v154 = v6[9];
  uint64_t v155 = &v86[v154];
  uint64_t v156 = &v87[v154];
  uint64_t v157 = type metadata accessor for UUID();
  uint64_t v158 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v157 - 8) + 24);
  v158(v155, v156, v157);
  uint64_t v159 = type metadata accessor for BeaconIdentifier();
  v158(&v155[*(int *)(v159 + 20)], &v156[*(int *)(v159 + 20)], v157);
  ((void (*)(unsigned char *, unsigned char *, uint64_t))v497)(&v86[v6[10]], &v87[v6[10]], v508);
LABEL_78:
  a2 = v522;
  a3 = v519;
LABEL_79:
  uint64_t v160 = a3[6];
  uint64_t v161 = &a1[v160];
  long long v162 = &a2[v160];
  int v163 = v7(&a1[v160], 1, v6);
  int v164 = v7(v162, 1, v6);
  if (v163)
  {
    if (!v164)
    {
      uint64_t v165 = *(void *)v162;
      v161[8] = v162[8];
      *(void *)uint64_t v161 = v165;
      v161[9] = v162[9];
      uint64_t v166 = v6[6];
      uint64_t v167 = &v161[v166];
      long long v168 = &v162[v166];
      uint64_t v169 = type metadata accessor for Date();
      uint64_t v170 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v169 - 8) + 16);
      v170(v167, v168, v169);
      uint64_t v171 = v6[7];
      NSString v172 = &v161[v171];
      uint64_t v173 = &v162[v171];
      uint64_t v174 = type metadata accessor for DeviceEvent.Location(0);
      uint64_t v175 = *(void *)(v174 - 8);
      v504 = v170;
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v175 + 48))(v173, 1, v174))
      {
        uint64_t v176 = sub_10000588C(&qword_10164E880);
        memcpy(v172, v173, *(void *)(*(void *)(v176 - 8) + 64));
      }
      else
      {
        *NSString v172 = *v173;
        v172[1] = v173[1];
        v172[2] = v173[2];
        v170((unsigned char *)v172 + *(int *)(v174 + 28), (unsigned char *)v173 + *(int *)(v174 + 28), v169);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v175 + 56))(v172, 0, 1, v174);
      }
      uint64_t v189 = v6[8];
      uint64_t v190 = &v161[v189];
      uint64_t v191 = &v162[v189];
      uint64_t v192 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
      uint64_t v193 = *(void *)(v192 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v193 + 48))(v191, 1, v192))
      {
        uint64_t v194 = sub_10000588C(&qword_10163CF20);
        memcpy(v190, v191, *(void *)(*(void *)(v194 - 8) + 64));
      }
      else
      {
        uint64_t v195 = type metadata accessor for UUID();
        uint64_t v196 = *(void *)(v195 - 8);
        v479 = *(void (**)(char *, char *, uint64_t))(v196 + 16);
        v479(v190, v191, v195);
        uint64_t v197 = *(int *)(v192 + 20);
        __dstf = &v190[v197];
        uint64_t v198 = &v191[v197];
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v196 + 48))(v198, 1, v195))
        {
          uint64_t v199 = sub_10000588C(&qword_101638CF0);
          memcpy(__dstf, v198, *(void *)(*(void *)(v199 - 8) + 64));
        }
        else
        {
          v479(__dstf, v198, v195);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v196 + 56))(__dstf, 0, 1, v195);
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v193 + 56))(v190, 0, 1, v192);
      }
      a1 = v521;
      uint64_t v7 = v515;
      uint64_t v216 = v6[9];
      uint64_t v217 = &v161[v216];
      v218 = &v162[v216];
      uint64_t v219 = type metadata accessor for UUID();
      uint64_t v220 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v219 - 8) + 16);
      v220(v217, v218, v219);
      uint64_t v221 = type metadata accessor for BeaconIdentifier();
      v220(&v217[*(int *)(v221 + 20)], &v218[*(int *)(v221 + 20)], v219);
      v504(&v161[v6[10]], &v162[v6[10]], v169);
      (*(void (**)(unsigned char *, void, uint64_t, int *))(v513 + 56))(v161, 0, 1, v6);
      goto LABEL_115;
    }
LABEL_85:
    uint64_t v177 = sub_10000588C(&qword_10163D030);
    memcpy(v161, v162, *(void *)(*(void *)(v177 - 8) + 64));
    goto LABEL_116;
  }
  if (v164)
  {
    sub_1007802BC((uint64_t)v161, type metadata accessor for DeviceEvent);
    goto LABEL_85;
  }
  uint64_t v178 = *(void *)v162;
  v161[8] = v162[8];
  *(void *)uint64_t v161 = v178;
  v161[9] = v162[9];
  uint64_t v179 = v6[6];
  uint64_t v180 = &v161[v179];
  uint64_t v181 = &v162[v179];
  uint64_t v509 = type metadata accessor for Date();
  __dste = *(void **)(v509 - 8);
  v498 = (void *)__dste[3];
  ((void (*)(unsigned char *, unsigned char *))v498)(v180, v181);
  uint64_t v182 = v6[7];
  uint64_t v183 = &v161[v182];
  uint64_t v184 = &v162[v182];
  uint64_t v185 = type metadata accessor for DeviceEvent.Location(0);
  uint64_t v186 = *(void *)(v185 - 8);
  uint64_t v187 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v186 + 48);
  LODWORD(v180) = v187(v183, 1, v185);
  int v188 = v187(v184, 1, v185);
  if (v180)
  {
    if (!v188)
    {
      *(void *)uint64_t v183 = *(void *)v184;
      *((void *)v183 + 1) = *((void *)v184 + 1);
      *((void *)v183 + 2) = *((void *)v184 + 2);
      ((void (*)(char *, char *, uint64_t))__dste[2])(&v183[*(int *)(v185 + 28)], &v184[*(int *)(v185 + 28)], v509);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v186 + 56))(v183, 0, 1, v185);
      goto LABEL_97;
    }
    goto LABEL_96;
  }
  if (v188)
  {
    sub_1007802BC((uint64_t)v183, type metadata accessor for DeviceEvent.Location);
LABEL_96:
    uint64_t v200 = sub_10000588C(&qword_10164E880);
    memcpy(v183, v184, *(void *)(*(void *)(v200 - 8) + 64));
    goto LABEL_97;
  }
  *(void *)uint64_t v183 = *(void *)v184;
  *((void *)v183 + 1) = *((void *)v184 + 1);
  *((void *)v183 + 2) = *((void *)v184 + 2);
  ((void (*)(char *, char *, uint64_t))v498)(&v183[*(int *)(v185 + 28)], &v184[*(int *)(v185 + 28)], v509);
LABEL_97:
  uint64_t v201 = v6[8];
  uint64_t v202 = &v161[v201];
  char v203 = &v162[v201];
  uint64_t v204 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
  uint64_t v205 = *(void *)(v204 - 8);
  char v206 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v205 + 48);
  int v207 = v206(v202, 1, v204);
  int v208 = v206(v203, 1, v204);
  if (v207)
  {
    if (!v208)
    {
      uint64_t v209 = type metadata accessor for UUID();
      uint64_t v210 = *(void *)(v209 - 8);
      __dstg = *(void (**)(char *, char *, uint64_t))(v210 + 16);
      __dstg(v202, v203, v209);
      uint64_t v211 = *(int *)(v204 + 20);
      uint64_t v212 = &v202[v211];
      uint64_t v213 = &v203[v211];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v210 + 48))(v213, 1, v209))
      {
        uint64_t v214 = sub_10000588C(&qword_101638CF0);
        memcpy(v212, v213, *(void *)(*(void *)(v214 - 8) + 64));
      }
      else
      {
        __dstg(v212, v213, v209);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v210 + 56))(v212, 0, 1, v209);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v205 + 56))(v202, 0, 1, v204);
      goto LABEL_113;
    }
LABEL_103:
    uint64_t v215 = sub_10000588C(&qword_10163CF20);
    memcpy(v202, v203, *(void *)(*(void *)(v215 - 8) + 64));
LABEL_113:
    a1 = v521;
    uint64_t v7 = v515;
    goto LABEL_114;
  }
  if (v208)
  {
    sub_1007802BC((uint64_t)v202, type metadata accessor for DeviceEvent.AttachmentInfo);
    goto LABEL_103;
  }
  uint64_t v222 = type metadata accessor for UUID();
  uint64_t v223 = *(void *)(v222 - 8);
  v474 = *(void (**)(char *, char *, uint64_t))(v223 + 24);
  v474(v202, v203, v222);
  uint64_t v224 = *(int *)(v204 + 20);
  uint64_t v225 = &v202[v224];
  uint64_t v226 = &v203[v224];
  uint64_t v227 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v223 + 48);
  int v228 = v227(v225, 1, v222);
  int v229 = v227(v226, 1, v222);
  if (!v228)
  {
    uint64_t v7 = v515;
    if (!v229)
    {
      v474(v225, v226, v222);
      a1 = v521;
      goto LABEL_114;
    }
    (*(void (**)(char *, uint64_t))(v223 + 8))(v225, v222);
    goto LABEL_230;
  }
  uint64_t v7 = v515;
  if (v229)
  {
LABEL_230:
    uint64_t v469 = sub_10000588C(&qword_101638CF0);
    memcpy(v225, v226, *(void *)(*(void *)(v469 - 8) + 64));
    a1 = v521;
    goto LABEL_114;
  }
  (*(void (**)(char *, char *, uint64_t))(v223 + 16))(v225, v226, v222);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v223 + 56))(v225, 0, 1, v222);
  a1 = v521;
LABEL_114:
  uint64_t v230 = v6[9];
  uint64_t v231 = &v161[v230];
  char v232 = &v162[v230];
  uint64_t v233 = type metadata accessor for UUID();
  uint64_t v234 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v233 - 8) + 24);
  v234(v231, v232, v233);
  uint64_t v235 = type metadata accessor for BeaconIdentifier();
  v234(&v231[*(int *)(v235 + 20)], &v232[*(int *)(v235 + 20)], v233);
  ((void (*)(unsigned char *, unsigned char *, uint64_t))v498)(&v161[v6[10]], &v162[v6[10]], v509);
LABEL_115:
  a2 = v522;
  a3 = v519;
LABEL_116:
  uint64_t v236 = a3[7];
  uint64_t v237 = &a1[v236];
  char v238 = &a2[v236];
  int v239 = v7(&a1[v236], 1, v6);
  int v240 = v7(v238, 1, v6);
  if (v239)
  {
    if (!v240)
    {
      uint64_t v241 = *(void *)v238;
      v237[8] = v238[8];
      *(void *)uint64_t v237 = v241;
      v237[9] = v238[9];
      uint64_t v242 = v6[6];
      uint64_t v243 = &v237[v242];
      uint64_t v244 = &v238[v242];
      uint64_t v245 = type metadata accessor for Date();
      char v246 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v245 - 8) + 16);
      v246(v243, v244, v245);
      uint64_t v247 = v6[7];
      uint64_t v248 = &v237[v247];
      uint64_t v249 = &v238[v247];
      uint64_t v250 = type metadata accessor for DeviceEvent.Location(0);
      uint64_t v251 = *(void *)(v250 - 8);
      v505 = v246;
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v251 + 48))(v249, 1, v250))
      {
        uint64_t v252 = sub_10000588C(&qword_10164E880);
        memcpy(v248, v249, *(void *)(*(void *)(v252 - 8) + 64));
      }
      else
      {
        *uint64_t v248 = *v249;
        v248[1] = v249[1];
        v248[2] = v249[2];
        v246((unsigned char *)v248 + *(int *)(v250 + 28), (unsigned char *)v249 + *(int *)(v250 + 28), v245);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v251 + 56))(v248, 0, 1, v250);
      }
      uint64_t v265 = v6[8];
      uint64_t v266 = &v237[v265];
      uint64_t v267 = &v238[v265];
      uint64_t v268 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
      uint64_t v269 = *(void *)(v268 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v269 + 48))(v267, 1, v268))
      {
        uint64_t v270 = sub_10000588C(&qword_10163CF20);
        memcpy(v266, v267, *(void *)(*(void *)(v270 - 8) + 64));
      }
      else
      {
        uint64_t v271 = type metadata accessor for UUID();
        uint64_t v272 = *(void *)(v271 - 8);
        v480 = *(void (**)(char *, char *, uint64_t))(v272 + 16);
        v480(v266, v267, v271);
        uint64_t v273 = *(int *)(v268 + 20);
        __dstuint64_t i = &v266[v273];
        uint64_t v274 = &v267[v273];
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v272 + 48))(v274, 1, v271))
        {
          uint64_t v275 = sub_10000588C(&qword_101638CF0);
          memcpy(__dsti, v274, *(void *)(*(void *)(v275 - 8) + 64));
        }
        else
        {
          v480(__dsti, v274, v271);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v272 + 56))(__dsti, 0, 1, v271);
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v269 + 56))(v266, 0, 1, v268);
      }
      a1 = v521;
      uint64_t v7 = v515;
      uint64_t v292 = v6[9];
      v293 = &v237[v292];
      v294 = &v238[v292];
      uint64_t v295 = type metadata accessor for UUID();
      v296 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v295 - 8) + 16);
      v296(v293, v294, v295);
      uint64_t v297 = type metadata accessor for BeaconIdentifier();
      v296(&v293[*(int *)(v297 + 20)], &v294[*(int *)(v297 + 20)], v295);
      v505(&v237[v6[10]], &v238[v6[10]], v245);
      (*(void (**)(unsigned char *, void, uint64_t, int *))(v513 + 56))(v237, 0, 1, v6);
      goto LABEL_152;
    }
LABEL_122:
    uint64_t v253 = sub_10000588C(&qword_10163D030);
    memcpy(v237, v238, *(void *)(*(void *)(v253 - 8) + 64));
    goto LABEL_153;
  }
  if (v240)
  {
    sub_1007802BC((uint64_t)v237, type metadata accessor for DeviceEvent);
    goto LABEL_122;
  }
  uint64_t v254 = *(void *)v238;
  v237[8] = v238[8];
  *(void *)uint64_t v237 = v254;
  v237[9] = v238[9];
  uint64_t v255 = v6[6];
  uint64_t v256 = &v237[v255];
  uint64_t v257 = &v238[v255];
  uint64_t v510 = type metadata accessor for Date();
  __dsth = *(void **)(v510 - 8);
  v499 = (void *)__dsth[3];
  ((void (*)(unsigned char *, unsigned char *))v499)(v256, v257);
  uint64_t v258 = v6[7];
  uint64_t v259 = &v237[v258];
  uint64_t v260 = &v238[v258];
  uint64_t v261 = type metadata accessor for DeviceEvent.Location(0);
  uint64_t v262 = *(void *)(v261 - 8);
  uint64_t v263 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v262 + 48);
  LODWORD(v256) = v263(v259, 1, v261);
  int v264 = v263(v260, 1, v261);
  if (v256)
  {
    if (!v264)
    {
      *(void *)uint64_t v259 = *(void *)v260;
      *((void *)v259 + 1) = *((void *)v260 + 1);
      *((void *)v259 + 2) = *((void *)v260 + 2);
      ((void (*)(char *, char *, uint64_t))__dsth[2])(&v259[*(int *)(v261 + 28)], &v260[*(int *)(v261 + 28)], v510);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v262 + 56))(v259, 0, 1, v261);
      goto LABEL_134;
    }
    goto LABEL_133;
  }
  if (v264)
  {
    sub_1007802BC((uint64_t)v259, type metadata accessor for DeviceEvent.Location);
LABEL_133:
    uint64_t v276 = sub_10000588C(&qword_10164E880);
    memcpy(v259, v260, *(void *)(*(void *)(v276 - 8) + 64));
    goto LABEL_134;
  }
  *(void *)uint64_t v259 = *(void *)v260;
  *((void *)v259 + 1) = *((void *)v260 + 1);
  *((void *)v259 + 2) = *((void *)v260 + 2);
  ((void (*)(char *, char *, uint64_t))v499)(&v259[*(int *)(v261 + 28)], &v260[*(int *)(v261 + 28)], v510);
LABEL_134:
  uint64_t v277 = v6[8];
  uint64_t v278 = &v237[v277];
  uint64_t v279 = &v238[v277];
  uint64_t v280 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
  uint64_t v281 = *(void *)(v280 - 8);
  uint64_t v282 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v281 + 48);
  int v283 = v282(v278, 1, v280);
  int v284 = v282(v279, 1, v280);
  if (v283)
  {
    if (!v284)
    {
      uint64_t v285 = type metadata accessor for UUID();
      uint64_t v286 = *(void *)(v285 - 8);
      __dstj = *(void (**)(char *, char *, uint64_t))(v286 + 16);
      __dstj(v278, v279, v285);
      uint64_t v287 = *(int *)(v280 + 20);
      v288 = &v278[v287];
      v289 = &v279[v287];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v286 + 48))(v289, 1, v285))
      {
        uint64_t v290 = sub_10000588C(&qword_101638CF0);
        memcpy(v288, v289, *(void *)(*(void *)(v290 - 8) + 64));
      }
      else
      {
        __dstj(v288, v289, v285);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v286 + 56))(v288, 0, 1, v285);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v281 + 56))(v278, 0, 1, v280);
      goto LABEL_150;
    }
LABEL_140:
    uint64_t v291 = sub_10000588C(&qword_10163CF20);
    memcpy(v278, v279, *(void *)(*(void *)(v291 - 8) + 64));
LABEL_150:
    a1 = v521;
    uint64_t v7 = v515;
    goto LABEL_151;
  }
  if (v284)
  {
    sub_1007802BC((uint64_t)v278, type metadata accessor for DeviceEvent.AttachmentInfo);
    goto LABEL_140;
  }
  uint64_t v298 = type metadata accessor for UUID();
  uint64_t v299 = *(void *)(v298 - 8);
  v475 = *(void (**)(char *, char *, uint64_t))(v299 + 24);
  v475(v278, v279, v298);
  uint64_t v300 = *(int *)(v280 + 20);
  v301 = &v278[v300];
  v302 = &v279[v300];
  v303 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v299 + 48);
  int v304 = v303(v301, 1, v298);
  int v305 = v303(v302, 1, v298);
  if (!v304)
  {
    uint64_t v7 = v515;
    if (!v305)
    {
      v475(v301, v302, v298);
      a1 = v521;
      goto LABEL_151;
    }
    (*(void (**)(char *, uint64_t))(v299 + 8))(v301, v298);
    goto LABEL_233;
  }
  uint64_t v7 = v515;
  if (v305)
  {
LABEL_233:
    uint64_t v470 = sub_10000588C(&qword_101638CF0);
    memcpy(v301, v302, *(void *)(*(void *)(v470 - 8) + 64));
    a1 = v521;
    goto LABEL_151;
  }
  (*(void (**)(char *, char *, uint64_t))(v299 + 16))(v301, v302, v298);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v299 + 56))(v301, 0, 1, v298);
  a1 = v521;
LABEL_151:
  uint64_t v306 = v6[9];
  v307 = &v237[v306];
  v308 = &v238[v306];
  uint64_t v309 = type metadata accessor for UUID();
  v310 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v309 - 8) + 24);
  v310(v307, v308, v309);
  uint64_t v311 = type metadata accessor for BeaconIdentifier();
  v310(&v307[*(int *)(v311 + 20)], &v308[*(int *)(v311 + 20)], v309);
  ((void (*)(unsigned char *, unsigned char *, uint64_t))v499)(&v237[v6[10]], &v238[v6[10]], v510);
LABEL_152:
  a2 = v522;
  a3 = v519;
LABEL_153:
  uint64_t v312 = a3[8];
  v313 = &a1[v312];
  v314 = &a2[v312];
  int v315 = v7(&a1[v312], 1, v6);
  int v316 = v7(v314, 1, v6);
  if (v315)
  {
    if (!v316)
    {
      uint64_t v317 = *(void *)v314;
      v313[8] = v314[8];
      *(void *)v313 = v317;
      v313[9] = v314[9];
      uint64_t v318 = v6[6];
      v319 = &v313[v318];
      v320 = &v314[v318];
      uint64_t v321 = type metadata accessor for Date();
      v322 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v321 - 8) + 16);
      v322(v319, v320, v321);
      uint64_t v323 = v6[7];
      v324 = &v313[v323];
      v325 = &v314[v323];
      uint64_t v326 = type metadata accessor for DeviceEvent.Location(0);
      uint64_t v327 = *(void *)(v326 - 8);
      v506 = v322;
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v327 + 48))(v325, 1, v326))
      {
        uint64_t v328 = sub_10000588C(&qword_10164E880);
        memcpy(v324, v325, *(void *)(*(void *)(v328 - 8) + 64));
      }
      else
      {
        void *v324 = *v325;
        v324[1] = v325[1];
        v324[2] = v325[2];
        v322((unsigned char *)v324 + *(int *)(v326 + 28), (unsigned char *)v325 + *(int *)(v326 + 28), v321);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v327 + 56))(v324, 0, 1, v326);
      }
      uint64_t v341 = v6[8];
      v342 = &v313[v341];
      v343 = &v314[v341];
      uint64_t v344 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
      uint64_t v345 = *(void *)(v344 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v345 + 48))(v343, 1, v344))
      {
        uint64_t v346 = sub_10000588C(&qword_10163CF20);
        memcpy(v342, v343, *(void *)(*(void *)(v346 - 8) + 64));
      }
      else
      {
        uint64_t v347 = type metadata accessor for UUID();
        uint64_t v348 = *(void *)(v347 - 8);
        v481 = *(void (**)(char *, char *, uint64_t))(v348 + 16);
        v481(v342, v343, v347);
        uint64_t v349 = *(int *)(v344 + 20);
        __dstl = &v342[v349];
        v350 = &v343[v349];
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v348 + 48))(v350, 1, v347))
        {
          uint64_t v351 = sub_10000588C(&qword_101638CF0);
          memcpy(__dstl, v350, *(void *)(*(void *)(v351 - 8) + 64));
        }
        else
        {
          v481(__dstl, v350, v347);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v348 + 56))(__dstl, 0, 1, v347);
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v345 + 56))(v342, 0, 1, v344);
      }
      a1 = v521;
      uint64_t v7 = v515;
      uint64_t v368 = v6[9];
      v369 = &v313[v368];
      v370 = &v314[v368];
      uint64_t v371 = type metadata accessor for UUID();
      v372 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v371 - 8) + 16);
      v372(v369, v370, v371);
      uint64_t v373 = type metadata accessor for BeaconIdentifier();
      v372(&v369[*(int *)(v373 + 20)], &v370[*(int *)(v373 + 20)], v371);
      v506(&v313[v6[10]], &v314[v6[10]], v321);
      (*(void (**)(unsigned char *, void, uint64_t, int *))(v513 + 56))(v313, 0, 1, v6);
      goto LABEL_189;
    }
LABEL_159:
    uint64_t v329 = sub_10000588C(&qword_10163D030);
    memcpy(v313, v314, *(void *)(*(void *)(v329 - 8) + 64));
    goto LABEL_190;
  }
  if (v316)
  {
    sub_1007802BC((uint64_t)v313, type metadata accessor for DeviceEvent);
    goto LABEL_159;
  }
  uint64_t v330 = *(void *)v314;
  v313[8] = v314[8];
  *(void *)v313 = v330;
  v313[9] = v314[9];
  uint64_t v331 = v6[6];
  v332 = &v313[v331];
  v333 = &v314[v331];
  uint64_t v511 = type metadata accessor for Date();
  __dstk = *(void **)(v511 - 8);
  v500 = (void *)__dstk[3];
  ((void (*)(unsigned char *, unsigned char *))v500)(v332, v333);
  uint64_t v334 = v6[7];
  v335 = &v313[v334];
  v336 = &v314[v334];
  uint64_t v337 = type metadata accessor for DeviceEvent.Location(0);
  uint64_t v338 = *(void *)(v337 - 8);
  v339 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v338 + 48);
  LODWORD(v332) = v339(v335, 1, v337);
  int v340 = v339(v336, 1, v337);
  if (v332)
  {
    if (!v340)
    {
      *(void *)v335 = *(void *)v336;
      *((void *)v335 + 1) = *((void *)v336 + 1);
      *((void *)v335 + 2) = *((void *)v336 + 2);
      ((void (*)(char *, char *, uint64_t))__dstk[2])(&v335[*(int *)(v337 + 28)], &v336[*(int *)(v337 + 28)], v511);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v338 + 56))(v335, 0, 1, v337);
      goto LABEL_171;
    }
    goto LABEL_170;
  }
  if (v340)
  {
    sub_1007802BC((uint64_t)v335, type metadata accessor for DeviceEvent.Location);
LABEL_170:
    uint64_t v352 = sub_10000588C(&qword_10164E880);
    memcpy(v335, v336, *(void *)(*(void *)(v352 - 8) + 64));
    goto LABEL_171;
  }
  *(void *)v335 = *(void *)v336;
  *((void *)v335 + 1) = *((void *)v336 + 1);
  *((void *)v335 + 2) = *((void *)v336 + 2);
  ((void (*)(char *, char *, uint64_t))v500)(&v335[*(int *)(v337 + 28)], &v336[*(int *)(v337 + 28)], v511);
LABEL_171:
  uint64_t v353 = v6[8];
  v354 = &v313[v353];
  v355 = &v314[v353];
  uint64_t v356 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
  uint64_t v357 = *(void *)(v356 - 8);
  v358 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v357 + 48);
  int v359 = v358(v354, 1, v356);
  int v360 = v358(v355, 1, v356);
  if (v359)
  {
    if (!v360)
    {
      uint64_t v361 = type metadata accessor for UUID();
      uint64_t v362 = *(void *)(v361 - 8);
      __dstm = *(void (**)(char *, char *, uint64_t))(v362 + 16);
      __dstm(v354, v355, v361);
      uint64_t v363 = *(int *)(v356 + 20);
      v364 = &v354[v363];
      v365 = &v355[v363];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v362 + 48))(v365, 1, v361))
      {
        uint64_t v366 = sub_10000588C(&qword_101638CF0);
        memcpy(v364, v365, *(void *)(*(void *)(v366 - 8) + 64));
      }
      else
      {
        __dstm(v364, v365, v361);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v362 + 56))(v364, 0, 1, v361);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v357 + 56))(v354, 0, 1, v356);
      goto LABEL_187;
    }
LABEL_177:
    uint64_t v367 = sub_10000588C(&qword_10163CF20);
    memcpy(v354, v355, *(void *)(*(void *)(v367 - 8) + 64));
LABEL_187:
    a1 = v521;
    uint64_t v7 = v515;
    goto LABEL_188;
  }
  if (v360)
  {
    sub_1007802BC((uint64_t)v354, type metadata accessor for DeviceEvent.AttachmentInfo);
    goto LABEL_177;
  }
  uint64_t v374 = type metadata accessor for UUID();
  uint64_t v375 = *(void *)(v374 - 8);
  v476 = *(void (**)(char *, char *, uint64_t))(v375 + 24);
  v476(v354, v355, v374);
  uint64_t v376 = *(int *)(v356 + 20);
  v377 = &v354[v376];
  v378 = &v355[v376];
  v379 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v375 + 48);
  int v380 = v379(v377, 1, v374);
  int v381 = v379(v378, 1, v374);
  if (!v380)
  {
    uint64_t v7 = v515;
    if (!v381)
    {
      v476(v377, v378, v374);
      a1 = v521;
      goto LABEL_188;
    }
    (*(void (**)(char *, uint64_t))(v375 + 8))(v377, v374);
    goto LABEL_236;
  }
  uint64_t v7 = v515;
  if (v381)
  {
LABEL_236:
    uint64_t v471 = sub_10000588C(&qword_101638CF0);
    memcpy(v377, v378, *(void *)(*(void *)(v471 - 8) + 64));
    a1 = v521;
    goto LABEL_188;
  }
  (*(void (**)(char *, char *, uint64_t))(v375 + 16))(v377, v378, v374);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v375 + 56))(v377, 0, 1, v374);
  a1 = v521;
LABEL_188:
  uint64_t v382 = v6[9];
  v383 = &v313[v382];
  v384 = &v314[v382];
  uint64_t v385 = type metadata accessor for UUID();
  v386 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v385 - 8) + 24);
  v386(v383, v384, v385);
  uint64_t v387 = type metadata accessor for BeaconIdentifier();
  v386(&v383[*(int *)(v387 + 20)], &v384[*(int *)(v387 + 20)], v385);
  ((void (*)(unsigned char *, unsigned char *, uint64_t))v500)(&v313[v6[10]], &v314[v6[10]], v511);
LABEL_189:
  a2 = v522;
  a3 = v519;
LABEL_190:
  uint64_t v388 = a3[9];
  v389 = &a1[v388];
  v390 = &a2[v388];
  int v391 = v7(&a1[v388], 1, v6);
  int v392 = v7(v390, 1, v6);
  if (!v391)
  {
    if (v392)
    {
      sub_1007802BC((uint64_t)v389, type metadata accessor for DeviceEvent);
      goto LABEL_196;
    }
    uint64_t v406 = *(void *)v390;
    v389[8] = v390[8];
    *(void *)v389 = v406;
    v389[9] = v390[9];
    uint64_t v407 = v6[6];
    v408 = &v389[v407];
    v409 = &v390[v407];
    uint64_t v410 = type metadata accessor for Date();
    uint64_t v516 = *(void *)(v410 - 8);
    uint64_t v525 = v410;
    v520 = *(void (**)(char *, char *, uint64_t))(v516 + 24);
    ((void (*)(unsigned char *, unsigned char *))v520)(v408, v409);
    uint64_t v411 = v6[7];
    v412 = &v389[v411];
    v413 = &v390[v411];
    uint64_t v414 = type metadata accessor for DeviceEvent.Location(0);
    uint64_t v415 = *(void *)(v414 - 8);
    v416 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v415 + 48);
    LODWORD(v408) = v416(v412, 1, v414);
    int v417 = v416(v413, 1, v414);
    if (v408)
    {
      if (!v417)
      {
        *(void *)v412 = *(void *)v413;
        *((void *)v412 + 1) = *((void *)v413 + 1);
        *((void *)v412 + 2) = *((void *)v413 + 2);
        (*(void (**)(char *, char *, uint64_t))(v516 + 16))(&v412[*(int *)(v414 + 28)], &v413[*(int *)(v414 + 28)], v525);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v415 + 56))(v412, 0, 1, v414);
        goto LABEL_208;
      }
    }
    else
    {
      if (!v417)
      {
        *(void *)v412 = *(void *)v413;
        *((void *)v412 + 1) = *((void *)v413 + 1);
        *((void *)v412 + 2) = *((void *)v413 + 2);
        v520(&v412[*(int *)(v414 + 28)], &v413[*(int *)(v414 + 28)], v525);
LABEL_208:
        uint64_t v432 = v6[8];
        uint64_t v433 = (uint64_t)&v389[v432];
        v434 = &v390[v432];
        uint64_t v435 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
        uint64_t v436 = *(void *)(v435 - 8);
        v437 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v436 + 48);
        int v438 = v437(v433, 1, v435);
        int v439 = v437((uint64_t)v434, 1, v435);
        if (v438)
        {
          if (!v439)
          {
            uint64_t v440 = type metadata accessor for UUID();
            uint64_t v441 = *(void *)(v440 - 8);
            v517 = *(void (**)(uint64_t, unsigned char *, uint64_t))(v441 + 16);
            v517(v433, v434, v440);
            uint64_t v442 = *(int *)(v435 + 20);
            v443 = (void *)(v433 + v442);
            v444 = &v434[v442];
            if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v441 + 48))(v444, 1, v440))
            {
              uint64_t v445 = sub_10000588C(&qword_101638CF0);
              memcpy(v443, v444, *(void *)(*(void *)(v445 - 8) + 64));
            }
            else
            {
              v517((uint64_t)v443, v444, v440);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v441 + 56))(v443, 0, 1, v440);
            }
            a1 = v521;
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v436 + 56))(v433, 0, 1, v435);
            goto LABEL_226;
          }
        }
        else
        {
          if (!v439)
          {
            uint64_t v455 = type metadata accessor for UUID();
            uint64_t v456 = *(void *)(v455 - 8);
            v514 = *(void (**)(uint64_t, unsigned char *, uint64_t))(v456 + 24);
            v514(v433, v434, v455);
            uint64_t v457 = *(int *)(v435 + 20);
            v458 = (void *)(v433 + v457);
            v459 = &v434[v457];
            uint64_t v518 = v456;
            v460 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v456 + 48);
            LODWORD(v456) = v460(v458, 1, v455);
            int v461 = v460(v459, 1, v455);
            if (v456)
            {
              if (!v461)
              {
                (*(void (**)(void *, unsigned char *, uint64_t))(v518 + 16))(v458, v459, v455);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v518 + 56))(v458, 0, 1, v455);
                goto LABEL_216;
              }
            }
            else
            {
              if (!v461)
              {
                v514((uint64_t)v458, v459, v455);
                goto LABEL_216;
              }
              (*(void (**)(void *, uint64_t))(v518 + 8))(v458, v455);
            }
            size_t v446 = *(void *)(*(void *)(sub_10000588C(&qword_101638CF0) - 8) + 64);
            v447 = v458;
            v448 = v459;
LABEL_215:
            memcpy(v447, v448, v446);
LABEL_216:
            a1 = v521;
LABEL_226:
            uint64_t v462 = v6[9];
            v463 = &v389[v462];
            v464 = &v390[v462];
            uint64_t v465 = type metadata accessor for UUID();
            v466 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v465 - 8) + 24);
            v466(v463, v464, v465);
            uint64_t v467 = type metadata accessor for BeaconIdentifier();
            v466(&v463[*(int *)(v467 + 20)], &v464[*(int *)(v467 + 20)], v465);
            v520(&v389[v6[10]], &v390[v6[10]], v525);
            return a1;
          }
          sub_1007802BC(v433, type metadata accessor for DeviceEvent.AttachmentInfo);
        }
        size_t v446 = *(void *)(*(void *)(sub_10000588C(&qword_10163CF20) - 8) + 64);
        v447 = (void *)v433;
        v448 = v434;
        goto LABEL_215;
      }
      sub_1007802BC((uint64_t)v412, type metadata accessor for DeviceEvent.Location);
    }
    uint64_t v431 = sub_10000588C(&qword_10164E880);
    memcpy(v412, v413, *(void *)(*(void *)(v431 - 8) + 64));
    goto LABEL_208;
  }
  if (v392)
  {
LABEL_196:
    uint64_t v405 = sub_10000588C(&qword_10163D030);
    memcpy(v389, v390, *(void *)(*(void *)(v405 - 8) + 64));
    return a1;
  }
  uint64_t v393 = *(void *)v390;
  v389[8] = v390[8];
  *(void *)v389 = v393;
  v389[9] = v390[9];
  uint64_t v394 = v6[6];
  v395 = &v389[v394];
  v396 = &v390[v394];
  uint64_t v397 = type metadata accessor for Date();
  v398 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v397 - 8) + 16);
  v398(v395, v396, v397);
  v524 = v6;
  uint64_t v399 = v6[7];
  v400 = &v389[v399];
  v401 = &v390[v399];
  uint64_t v402 = type metadata accessor for DeviceEvent.Location(0);
  uint64_t v403 = *(void *)(v402 - 8);
  v523 = v398;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v403 + 48))(v401, 1, v402))
  {
    uint64_t v404 = sub_10000588C(&qword_10164E880);
    memcpy(v400, v401, *(void *)(*(void *)(v404 - 8) + 64));
  }
  else
  {
    void *v400 = *v401;
    v400[1] = v401[1];
    v400[2] = v401[2];
    v398((unsigned char *)v400 + *(int *)(v402 + 28), (unsigned char *)v401 + *(int *)(v402 + 28), v397);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v403 + 56))(v400, 0, 1, v402);
  }
  uint64_t v418 = v6[8];
  v419 = &v389[v418];
  v420 = &v390[v418];
  uint64_t v421 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
  uint64_t v422 = *(void *)(v421 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v422 + 48))(v420, 1, v421))
  {
    uint64_t v423 = sub_10000588C(&qword_10163CF20);
    memcpy(v419, v420, *(void *)(*(void *)(v423 - 8) + 64));
    uint64_t v424 = v397;
  }
  else
  {
    uint64_t v425 = type metadata accessor for UUID();
    uint64_t v426 = *(void *)(v425 - 8);
    v512 = *(void (**)(char *, char *, uint64_t))(v426 + 16);
    v512(v419, v420, v425);
    uint64_t v427 = *(int *)(v421 + 20);
    v428 = &v419[v427];
    v429 = &v420[v427];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v426 + 48))(v429, 1, v425))
    {
      uint64_t v430 = sub_10000588C(&qword_101638CF0);
      memcpy(v428, v429, *(void *)(*(void *)(v430 - 8) + 64));
    }
    else
    {
      v512(v428, v429, v425);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v426 + 56))(v428, 0, 1, v425);
    }
    a1 = v521;
    uint64_t v6 = v524;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v422 + 56))(v419, 0, 1, v421);
    uint64_t v424 = v397;
  }
  uint64_t v449 = v6[9];
  v450 = &v389[v449];
  v451 = &v390[v449];
  uint64_t v452 = type metadata accessor for UUID();
  v453 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v452 - 8) + 16);
  v453(v450, v451, v452);
  uint64_t v454 = type metadata accessor for BeaconIdentifier();
  v453(&v450[*(int *)(v454 + 20)], &v451[*(int *)(v454 + 20)], v452);
  v523(&v389[v6[10]], &v390[v6[10]], v424);
  (*(void (**)(unsigned char *, void, uint64_t, int *))(v513 + 56))(v389, 0, 1, v6);
  return a1;
}

_WORD *sub_10077A558(_WORD *a1, _WORD *a2, int *a3)
{
  uint64_t v6 = (int *)type metadata accessor for DeviceEvent(0);
  uint64_t v223 = *((void *)v6 - 1);
  uint64_t v7 = *(unsigned int (**)(void, void, void))(v223 + 48);
  uint64_t v219 = a1;
  uint64_t v220 = v7;
  uint64_t v221 = a3;
  if (v7(a2, 1, v6))
  {
    uint64_t v8 = sub_10000588C(&qword_10163D030);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    *(void *)a1 = *(void *)a2;
    a1[4] = a2[4];
    uint64_t v9 = v6[6];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for Date();
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32);
    v13(v10, v11, v12);
    uint64_t v14 = v6[7];
    uint64_t v15 = (void *)((char *)a1 + v14);
    uint64_t v16 = (void *)((char *)a2 + v14);
    uint64_t v17 = type metadata accessor for DeviceEvent.Location(0);
    uint64_t v18 = *(void *)(v17 - 8);
    int v208 = v13;
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      uint64_t v19 = sub_10000588C(&qword_10164E880);
      memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
    }
    else
    {
      *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
      _OWORD v15[2] = v16[2];
      v13((char *)v15 + *(int *)(v17 + 28), (char *)v16 + *(int *)(v17 + 28), v12);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    uint64_t v20 = v6[8];
    uint64_t v21 = (char *)a1 + v20;
    uint64_t v22 = (char *)a2 + v20;
    uint64_t v23 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
    uint64_t v24 = *(void *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      uint64_t v25 = sub_10000588C(&qword_10163CF20);
      memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      uint64_t v26 = type metadata accessor for UUID();
      uint64_t v27 = *(void *)(v26 - 8);
      uint64_t v28 = *(void (**)(char *, char *, uint64_t))(v27 + 32);
      v28(v21, v22, v26);
      uint64_t v29 = *(int *)(v23 + 20);
      __dst = &v21[v29];
      uint64_t v30 = &v22[v29];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v30, 1, v26))
      {
        uint64_t v31 = sub_10000588C(&qword_101638CF0);
        memcpy(__dst, v30, *(void *)(*(void *)(v31 - 8) + 64));
      }
      else
      {
        v28(__dst, v30, v26);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(__dst, 0, 1, v26);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
      a1 = v219;
    }
    uint64_t v32 = v6[9];
    uint64_t v33 = (char *)a1 + v32;
    uint64_t v34 = (char *)a2 + v32;
    uint64_t v35 = type metadata accessor for UUID();
    uint64_t v36 = *(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 32);
    v36(v33, v34, v35);
    uint64_t v37 = type metadata accessor for BeaconIdentifier();
    v36(&v33[*(int *)(v37 + 20)], &v34[*(int *)(v37 + 20)], v35);
    v208((char *)a1 + v6[10], (char *)a2 + v6[10], v12);
    (*(void (**)(_WORD *, void, uint64_t, int *))(v223 + 56))(a1, 0, 1, v6);
    uint64_t v7 = v220;
    a3 = v221;
  }
  uint64_t v38 = a3[5];
  uint64_t v39 = (_WORD *)((char *)a1 + v38);
  uint64_t v40 = (_WORD *)((char *)a2 + v38);
  if (v7((char *)a2 + v38, 1, v6))
  {
    uint64_t v41 = sub_10000588C(&qword_10163D030);
    memcpy(v39, v40, *(void *)(*(void *)(v41 - 8) + 64));
  }
  else
  {
    *(void *)uint64_t v39 = *(void *)v40;
    v39[4] = v40[4];
    uint64_t v42 = v6[6];
    uint64_t v43 = (char *)v39 + v42;
    uint64_t v44 = (char *)v40 + v42;
    uint64_t v45 = type metadata accessor for Date();
    uint64_t v46 = *(void (**)(char *, char *, uint64_t))(*(void *)(v45 - 8) + 32);
    v46(v43, v44, v45);
    uint64_t v47 = v6[7];
    uint64_t v48 = (void *)((char *)v39 + v47);
    uint64_t v49 = (void *)((char *)v40 + v47);
    uint64_t v50 = type metadata accessor for DeviceEvent.Location(0);
    uint64_t v51 = *(void *)(v50 - 8);
    uint64_t v209 = v46;
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v51 + 48))(v49, 1, v50))
    {
      uint64_t v52 = sub_10000588C(&qword_10164E880);
      memcpy(v48, v49, *(void *)(*(void *)(v52 - 8) + 64));
    }
    else
    {
      *(_OWORD *)uint64_t v48 = *(_OWORD *)v49;
      v48[2] = v49[2];
      v46((char *)v48 + *(int *)(v50 + 28), (char *)v49 + *(int *)(v50 + 28), v45);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v51 + 56))(v48, 0, 1, v50);
    }
    uint64_t v213 = v45;
    uint64_t v53 = v6[8];
    uint64_t v54 = (char *)v39 + v53;
    int v55 = (char *)v40 + v53;
    uint64_t v56 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
    uint64_t v57 = *(void *)(v56 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v55, 1, v56))
    {
      uint64_t v58 = sub_10000588C(&qword_10163CF20);
      memcpy(v54, v55, *(void *)(*(void *)(v58 - 8) + 64));
    }
    else
    {
      uint64_t v59 = type metadata accessor for UUID();
      uint64_t v60 = *(void *)(v59 - 8);
      uint64_t v199 = *(void (**)(char *, char *, uint64_t))(v60 + 32);
      v199(v54, v55, v59);
      uint64_t v61 = *(int *)(v56 + 20);
      __dsta = &v54[v61];
      uint64_t v62 = &v55[v61];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v62, 1, v59))
      {
        uint64_t v63 = sub_10000588C(&qword_101638CF0);
        memcpy(__dsta, v62, *(void *)(*(void *)(v63 - 8) + 64));
      }
      else
      {
        v199(__dsta, v62, v59);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v60 + 56))(__dsta, 0, 1, v59);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
    }
    uint64_t v64 = v6[9];
    uint64_t v65 = (char *)v39 + v64;
    uint64_t v66 = (char *)v40 + v64;
    uint64_t v67 = type metadata accessor for UUID();
    uint64_t v68 = *(void (**)(char *, char *, uint64_t))(*(void *)(v67 - 8) + 32);
    v68(v65, v66, v67);
    uint64_t v69 = type metadata accessor for BeaconIdentifier();
    v68(&v65[*(int *)(v69 + 20)], &v66[*(int *)(v69 + 20)], v67);
    v209((char *)v39 + v6[10], (char *)v40 + v6[10], v213);
    (*(void (**)(_WORD *, void, uint64_t, int *))(v223 + 56))(v39, 0, 1, v6);
    a1 = v219;
    uint64_t v7 = v220;
    a3 = v221;
  }
  uint64_t v70 = a3[6];
  uint64_t v71 = (_WORD *)((char *)a1 + v70);
  uint64_t v72 = (_WORD *)((char *)a2 + v70);
  if (v7((char *)a2 + v70, 1, v6))
  {
    uint64_t v73 = sub_10000588C(&qword_10163D030);
    memcpy(v71, v72, *(void *)(*(void *)(v73 - 8) + 64));
  }
  else
  {
    *(void *)uint64_t v71 = *(void *)v72;
    v71[4] = v72[4];
    uint64_t v74 = v6[6];
    uint64_t v75 = (char *)v71 + v74;
    int v76 = (char *)v72 + v74;
    uint64_t v77 = type metadata accessor for Date();
    uint64_t v78 = *(void (**)(char *, char *, uint64_t))(*(void *)(v77 - 8) + 32);
    v78(v75, v76, v77);
    uint64_t v79 = v6[7];
    uint64_t v80 = (void *)((char *)v71 + v79);
    uint64_t v81 = (void *)((char *)v72 + v79);
    uint64_t v82 = type metadata accessor for DeviceEvent.Location(0);
    uint64_t v83 = *(void *)(v82 - 8);
    uint64_t v210 = v78;
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v83 + 48))(v81, 1, v82))
    {
      uint64_t v84 = sub_10000588C(&qword_10164E880);
      memcpy(v80, v81, *(void *)(*(void *)(v84 - 8) + 64));
    }
    else
    {
      *(_OWORD *)uint64_t v80 = *(_OWORD *)v81;
      v80[2] = v81[2];
      v78((char *)v80 + *(int *)(v82 + 28), (char *)v81 + *(int *)(v82 + 28), v77);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v83 + 56))(v80, 0, 1, v82);
    }
    uint64_t v214 = v77;
    uint64_t v85 = v6[8];
    uint64_t v86 = (char *)v71 + v85;
    uint64_t v87 = (char *)v72 + v85;
    uint64_t v88 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
    uint64_t v89 = *(void *)(v88 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v89 + 48))(v87, 1, v88))
    {
      uint64_t v90 = sub_10000588C(&qword_10163CF20);
      memcpy(v86, v87, *(void *)(*(void *)(v90 - 8) + 64));
    }
    else
    {
      uint64_t v91 = type metadata accessor for UUID();
      uint64_t v92 = *(void *)(v91 - 8);
      uint64_t v200 = *(void (**)(char *, char *, uint64_t))(v92 + 32);
      v200(v86, v87, v91);
      uint64_t v93 = *(int *)(v88 + 20);
      __dstb = &v86[v93];
      uint64_t v94 = &v87[v93];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v92 + 48))(v94, 1, v91))
      {
        uint64_t v95 = sub_10000588C(&qword_101638CF0);
        memcpy(__dstb, v94, *(void *)(*(void *)(v95 - 8) + 64));
      }
      else
      {
        v200(__dstb, v94, v91);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v92 + 56))(__dstb, 0, 1, v91);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v89 + 56))(v86, 0, 1, v88);
    }
    uint64_t v96 = v6[9];
    uint64_t v97 = (char *)v71 + v96;
    long long v98 = (char *)v72 + v96;
    uint64_t v99 = type metadata accessor for UUID();
    uint64_t v100 = *(void (**)(char *, char *, uint64_t))(*(void *)(v99 - 8) + 32);
    v100(v97, v98, v99);
    uint64_t v101 = type metadata accessor for BeaconIdentifier();
    v100(&v97[*(int *)(v101 + 20)], &v98[*(int *)(v101 + 20)], v99);
    v210((char *)v71 + v6[10], (char *)v72 + v6[10], v214);
    (*(void (**)(_WORD *, void, uint64_t, int *))(v223 + 56))(v71, 0, 1, v6);
    a1 = v219;
    uint64_t v7 = v220;
    a3 = v221;
  }
  uint64_t v102 = a3[7];
  uint64_t v103 = (_WORD *)((char *)a1 + v102);
  uint64_t v104 = (_WORD *)((char *)a2 + v102);
  if (v7((char *)a2 + v102, 1, v6))
  {
    uint64_t v105 = sub_10000588C(&qword_10163D030);
    memcpy(v103, v104, *(void *)(*(void *)(v105 - 8) + 64));
  }
  else
  {
    *(void *)uint64_t v103 = *(void *)v104;
    v103[4] = v104[4];
    uint64_t v106 = v6[6];
    uint64_t v107 = (char *)v103 + v106;
    uint64_t v108 = (char *)v104 + v106;
    uint64_t v109 = type metadata accessor for Date();
    uint64_t v110 = *(void (**)(char *, char *, uint64_t))(*(void *)(v109 - 8) + 32);
    v110(v107, v108, v109);
    uint64_t v111 = v6[7];
    uint64_t v112 = (void *)((char *)v103 + v111);
    int v113 = (void *)((char *)v104 + v111);
    uint64_t v114 = type metadata accessor for DeviceEvent.Location(0);
    uint64_t v115 = *(void *)(v114 - 8);
    uint64_t v211 = v110;
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v115 + 48))(v113, 1, v114))
    {
      uint64_t v116 = sub_10000588C(&qword_10164E880);
      memcpy(v112, v113, *(void *)(*(void *)(v116 - 8) + 64));
    }
    else
    {
      *(_OWORD *)uint64_t v112 = *(_OWORD *)v113;
      v112[2] = v113[2];
      v110((char *)v112 + *(int *)(v114 + 28), (char *)v113 + *(int *)(v114 + 28), v109);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v115 + 56))(v112, 0, 1, v114);
    }
    uint64_t v215 = v109;
    uint64_t v117 = v6[8];
    uint64_t v118 = (char *)v103 + v117;
    uint64_t v119 = (char *)v104 + v117;
    uint64_t v120 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
    uint64_t v121 = *(void *)(v120 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v121 + 48))(v119, 1, v120))
    {
      uint64_t v122 = sub_10000588C(&qword_10163CF20);
      memcpy(v118, v119, *(void *)(*(void *)(v122 - 8) + 64));
    }
    else
    {
      uint64_t v123 = type metadata accessor for UUID();
      uint64_t v124 = *(void *)(v123 - 8);
      uint64_t v201 = *(void (**)(char *, char *, uint64_t))(v124 + 32);
      v201(v118, v119, v123);
      uint64_t v125 = *(int *)(v120 + 20);
      __dstc = &v118[v125];
      uint64_t v126 = &v119[v125];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v124 + 48))(v126, 1, v123))
      {
        uint64_t v127 = sub_10000588C(&qword_101638CF0);
        memcpy(__dstc, v126, *(void *)(*(void *)(v127 - 8) + 64));
      }
      else
      {
        v201(__dstc, v126, v123);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v124 + 56))(__dstc, 0, 1, v123);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v121 + 56))(v118, 0, 1, v120);
    }
    uint64_t v128 = v6[9];
    uint64_t v129 = (char *)v103 + v128;
    uint64_t v130 = (char *)v104 + v128;
    uint64_t v131 = type metadata accessor for UUID();
    int v132 = *(void (**)(char *, char *, uint64_t))(*(void *)(v131 - 8) + 32);
    v132(v129, v130, v131);
    uint64_t v133 = type metadata accessor for BeaconIdentifier();
    v132(&v129[*(int *)(v133 + 20)], &v130[*(int *)(v133 + 20)], v131);
    v211((char *)v103 + v6[10], (char *)v104 + v6[10], v215);
    (*(void (**)(_WORD *, void, uint64_t, int *))(v223 + 56))(v103, 0, 1, v6);
    a1 = v219;
    uint64_t v7 = v220;
    a3 = v221;
  }
  uint64_t v134 = a3[8];
  uint64_t v135 = (_WORD *)((char *)a1 + v134);
  uint64_t v136 = (_WORD *)((char *)a2 + v134);
  if (v7((char *)a2 + v134, 1, v6))
  {
    uint64_t v137 = sub_10000588C(&qword_10163D030);
    memcpy(v135, v136, *(void *)(*(void *)(v137 - 8) + 64));
  }
  else
  {
    *(void *)uint64_t v135 = *(void *)v136;
    v135[4] = v136[4];
    uint64_t v138 = v6[6];
    uint64_t v139 = (char *)v135 + v138;
    uint64_t v140 = (char *)v136 + v138;
    uint64_t v141 = type metadata accessor for Date();
    uint64_t v142 = *(void (**)(char *, char *, uint64_t))(*(void *)(v141 - 8) + 32);
    v142(v139, v140, v141);
    uint64_t v143 = v6[7];
    uint64_t v144 = (void *)((char *)v135 + v143);
    uint64_t v145 = (void *)((char *)v136 + v143);
    uint64_t v146 = type metadata accessor for DeviceEvent.Location(0);
    uint64_t v147 = *(void *)(v146 - 8);
    uint64_t v212 = v142;
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v147 + 48))(v145, 1, v146))
    {
      uint64_t v148 = sub_10000588C(&qword_10164E880);
      memcpy(v144, v145, *(void *)(*(void *)(v148 - 8) + 64));
    }
    else
    {
      *(_OWORD *)uint64_t v144 = *(_OWORD *)v145;
      v144[2] = v145[2];
      v142((char *)v144 + *(int *)(v146 + 28), (char *)v145 + *(int *)(v146 + 28), v141);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v147 + 56))(v144, 0, 1, v146);
    }
    uint64_t v216 = v141;
    uint64_t v149 = v6[8];
    uint64_t v150 = (char *)v135 + v149;
    long long v151 = (char *)v136 + v149;
    uint64_t v152 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
    uint64_t v153 = *(void *)(v152 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v153 + 48))(v151, 1, v152))
    {
      uint64_t v154 = sub_10000588C(&qword_10163CF20);
      memcpy(v150, v151, *(void *)(*(void *)(v154 - 8) + 64));
    }
    else
    {
      uint64_t v155 = type metadata accessor for UUID();
      uint64_t v156 = *(void *)(v155 - 8);
      uint64_t v202 = *(void (**)(char *, char *, uint64_t))(v156 + 32);
      v202(v150, v151, v155);
      uint64_t v157 = *(int *)(v152 + 20);
      __dstd = &v150[v157];
      uint64_t v158 = &v151[v157];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v156 + 48))(v158, 1, v155))
      {
        uint64_t v159 = sub_10000588C(&qword_101638CF0);
        memcpy(__dstd, v158, *(void *)(*(void *)(v159 - 8) + 64));
      }
      else
      {
        v202(__dstd, v158, v155);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v156 + 56))(__dstd, 0, 1, v155);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v153 + 56))(v150, 0, 1, v152);
    }
    uint64_t v160 = v6[9];
    uint64_t v161 = (char *)v135 + v160;
    long long v162 = (char *)v136 + v160;
    uint64_t v163 = type metadata accessor for UUID();
    int v164 = *(void (**)(char *, char *, uint64_t))(*(void *)(v163 - 8) + 32);
    v164(v161, v162, v163);
    uint64_t v165 = type metadata accessor for BeaconIdentifier();
    v164(&v161[*(int *)(v165 + 20)], &v162[*(int *)(v165 + 20)], v163);
    v212((char *)v135 + v6[10], (char *)v136 + v6[10], v216);
    (*(void (**)(_WORD *, void, uint64_t, int *))(v223 + 56))(v135, 0, 1, v6);
    a1 = v219;
    uint64_t v7 = v220;
    a3 = v221;
  }
  uint64_t v166 = a3[9];
  uint64_t v167 = (_WORD *)((char *)a1 + v166);
  long long v168 = (_WORD *)((char *)a2 + v166);
  if (v7(v168, 1, v6))
  {
    uint64_t v169 = sub_10000588C(&qword_10163D030);
    memcpy(v167, v168, *(void *)(*(void *)(v169 - 8) + 64));
  }
  else
  {
    *(void *)uint64_t v167 = *(void *)v168;
    v167[4] = v168[4];
    uint64_t v170 = v6[6];
    uint64_t v171 = (char *)v167 + v170;
    NSString v172 = (char *)v168 + v170;
    uint64_t v173 = type metadata accessor for Date();
    uint64_t v174 = *(void (**)(char *, char *))(*(void *)(v173 - 8) + 32);
    uint64_t v222 = v173;
    v174(v171, v172);
    uint64_t v175 = v6[7];
    uint64_t v176 = (void *)((char *)v167 + v175);
    uint64_t v177 = (void *)((char *)v168 + v175);
    uint64_t v178 = type metadata accessor for DeviceEvent.Location(0);
    uint64_t v179 = *(void *)(v178 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v179 + 48))(v177, 1, v178))
    {
      uint64_t v180 = sub_10000588C(&qword_10164E880);
      memcpy(v176, v177, *(void *)(*(void *)(v180 - 8) + 64));
    }
    else
    {
      *(_OWORD *)uint64_t v176 = *(_OWORD *)v177;
      v176[2] = v177[2];
      ((void (*)(char *, char *, uint64_t))v174)((char *)v176 + *(int *)(v178 + 28), (char *)v177 + *(int *)(v178 + 28), v222);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v179 + 56))(v176, 0, 1, v178);
    }
    uint64_t v181 = v6[8];
    uint64_t v182 = (char *)v167 + v181;
    uint64_t v183 = (char *)v168 + v181;
    uint64_t v184 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
    uint64_t v185 = *(void *)(v184 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v185 + 48))(v183, 1, v184))
    {
      uint64_t v186 = sub_10000588C(&qword_10163CF20);
      memcpy(v182, v183, *(void *)(*(void *)(v186 - 8) + 64));
    }
    else
    {
      uint64_t v187 = type metadata accessor for UUID();
      uint64_t v188 = *(void *)(v187 - 8);
      uint64_t v217 = *(void (**)(char *, char *, uint64_t))(v188 + 32);
      v217(v182, v183, v187);
      uint64_t v189 = *(int *)(v184 + 20);
      v218 = &v182[v189];
      uint64_t v190 = &v183[v189];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v188 + 48))(v190, 1, v187))
      {
        uint64_t v191 = sub_10000588C(&qword_101638CF0);
        memcpy(v218, v190, *(void *)(*(void *)(v191 - 8) + 64));
      }
      else
      {
        v217(v218, v190, v187);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v188 + 56))(v218, 0, 1, v187);
      }
      a1 = v219;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v185 + 56))(v182, 0, 1, v184);
    }
    uint64_t v192 = v6[9];
    uint64_t v193 = (char *)v167 + v192;
    uint64_t v194 = (char *)v168 + v192;
    uint64_t v195 = type metadata accessor for UUID();
    uint64_t v196 = *(void (**)(char *, char *, uint64_t))(*(void *)(v195 - 8) + 32);
    v196(v193, v194, v195);
    uint64_t v197 = type metadata accessor for BeaconIdentifier();
    v196(&v193[*(int *)(v197 + 20)], &v194[*(int *)(v197 + 20)], v195);
    ((void (*)(char *, char *, uint64_t))v174)((char *)v167 + v6[10], (char *)v168 + v6[10], v222);
    (*(void (**)(_WORD *, void, uint64_t, int *))(v223 + 56))(v167, 0, 1, v6);
  }
  return a1;
}

_WORD *sub_10077BF64(_WORD *a1, _WORD *a2, int *a3)
{
  uint64_t v6 = (int *)type metadata accessor for DeviceEvent(0);
  uint64_t v501 = *((void *)v6 - 1);
  uint64_t v7 = *(uint64_t (**)(_WORD *, uint64_t, int *))(v501 + 48);
  int v8 = v7(a1, 1, v6);
  int v9 = v7(a2, 1, v6);
  uint64_t v509 = a1;
  uint64_t v510 = a2;
  v503 = v7;
  uint64_t v507 = a3;
  if (!v8)
  {
    if (v9)
    {
      sub_1007802BC((uint64_t)a1, type metadata accessor for DeviceEvent);
      goto LABEL_7;
    }
    *(void *)a1 = *(void *)a2;
    a1[4] = a2[4];
    uint64_t v22 = v6[6];
    uint64_t v23 = (char *)a1 + v22;
    uint64_t v24 = (char *)a2 + v22;
    uint64_t v25 = type metadata accessor for Date();
    uint64_t v26 = *(void *)(v25 - 8);
    v489 = *(void (**)(char *, char *))(v26 + 40);
    uint64_t v495 = v25;
    v489(v23, v24);
    uint64_t v27 = v6[7];
    uint64_t v28 = (char *)a1 + v27;
    uint64_t v29 = (char *)a2 + v27;
    uint64_t v30 = type metadata accessor for DeviceEvent.Location(0);
    uint64_t v31 = *(void *)(v30 - 8);
    uint64_t v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48);
    LODWORD(v23) = v32(v28, 1, v30);
    int v33 = v32(v29, 1, v30);
    if (v23)
    {
      if (!v33)
      {
        *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
        *((void *)v28 + 2) = *((void *)v29 + 2);
        (*(void (**)(char *, char *, uint64_t))(v26 + 32))(&v28[*(int *)(v30 + 28)], &v29[*(int *)(v30 + 28)], v495);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
        goto LABEL_19;
      }
    }
    else
    {
      if (!v33)
      {
        *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
        *((void *)v28 + 2) = *((void *)v29 + 2);
        ((void (*)(char *, char *, uint64_t))v489)(&v28[*(int *)(v30 + 28)], &v29[*(int *)(v30 + 28)], v495);
LABEL_19:
        a1 = v509;
        uint64_t v46 = v6[8];
        uint64_t v47 = (char *)v509 + v46;
        uint64_t v48 = (char *)v510 + v46;
        uint64_t v49 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
        uint64_t v50 = *(void *)(v49 - 8);
        uint64_t v51 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v50 + 48);
        int v52 = v51(v47, 1, v49);
        int v53 = v51(v48, 1, v49);
        if (v52)
        {
          if (!v53)
          {
            uint64_t v54 = type metadata accessor for UUID();
            uint64_t v55 = *(void *)(v54 - 8);
            __srca = *(void (**)(char *, char *, uint64_t))(v55 + 32);
            __srca(v47, v48, v54);
            uint64_t v56 = *(int *)(v49 + 20);
            __dsta = &v47[v56];
            uint64_t v57 = &v48[v56];
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(&v48[v56], 1, v54))
            {
              uint64_t v58 = sub_10000588C(&qword_101638CF0);
              memcpy(__dsta, v57, *(void *)(*(void *)(v58 - 8) + 64));
            }
            else
            {
              __srca(__dsta, v57, v54);
              (*(void (**)(char *, void, uint64_t, uint64_t))(v55 + 56))(__dsta, 0, 1, v54);
            }
            a1 = v509;
            a2 = v510;
            (*(void (**)(char *, void, uint64_t, uint64_t))(v50 + 56))(v47, 0, 1, v49);
            goto LABEL_39;
          }
          goto LABEL_25;
        }
        if (v53)
        {
          sub_1007802BC((uint64_t)v47, type metadata accessor for DeviceEvent.AttachmentInfo);
LABEL_25:
          uint64_t v59 = sub_10000588C(&qword_10163CF20);
          memcpy(v47, v48, *(void *)(*(void *)(v59 - 8) + 64));
          a2 = v510;
LABEL_39:
          a3 = v507;
          uint64_t v76 = v6[9];
          uint64_t v77 = (char *)a1 + v76;
          uint64_t v78 = (char *)a2 + v76;
          uint64_t v79 = type metadata accessor for UUID();
          uint64_t v80 = *(void (**)(char *, char *, uint64_t))(*(void *)(v79 - 8) + 40);
          v80(v77, v78, v79);
          uint64_t v81 = type metadata accessor for BeaconIdentifier();
          v80(&v77[*(int *)(v81 + 20)], &v78[*(int *)(v81 + 20)], v79);
          ((void (*)(char *, char *, uint64_t))v489)((char *)a1 + v6[10], (char *)a2 + v6[10], v495);
          goto LABEL_40;
        }
        uint64_t v66 = type metadata accessor for UUID();
        uint64_t v67 = *(void *)(v66 - 8);
        uint64_t v68 = *(void (**)(char *, char *, uint64_t))(v67 + 40);
        v68(v47, v48, v66);
        uint64_t v69 = *(int *)(v49 + 20);
        uint64_t v70 = &v47[v69];
        uint64_t v71 = &v48[v69];
        uint64_t v72 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v67 + 48);
        int v73 = v72(v70, 1, v66);
        int v74 = v72(v71, 1, v66);
        if (v73)
        {
          a2 = v510;
          if (!v74)
          {
            (*(void (**)(char *, char *, uint64_t))(v67 + 32))(v70, v71, v66);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v67 + 56))(v70, 0, 1, v66);
LABEL_38:
            a1 = v509;
            goto LABEL_39;
          }
        }
        else
        {
          a2 = v510;
          if (!v74)
          {
            v68(v70, v71, v66);
            goto LABEL_38;
          }
          (*(void (**)(char *, uint64_t))(v67 + 8))(v70, v66);
        }
        uint64_t v75 = sub_10000588C(&qword_101638CF0);
        memcpy(v70, v71, *(void *)(*(void *)(v75 - 8) + 64));
        goto LABEL_38;
      }
      sub_1007802BC((uint64_t)v28, type metadata accessor for DeviceEvent.Location);
    }
    uint64_t v45 = sub_10000588C(&qword_10164E880);
    memcpy(v28, v29, *(void *)(*(void *)(v45 - 8) + 64));
    goto LABEL_19;
  }
  if (v9)
  {
LABEL_7:
    uint64_t v21 = sub_10000588C(&qword_10163D030);
    memcpy(a1, a2, *(void *)(*(void *)(v21 - 8) + 64));
    goto LABEL_40;
  }
  *(void *)a1 = *(void *)a2;
  a1[4] = a2[4];
  uint64_t v10 = v6[6];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for Date();
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 32);
  v14(v11, v12, v13);
  uint64_t v15 = v6[7];
  uint64_t v16 = (void *)((char *)a1 + v15);
  uint64_t v17 = (void *)((char *)a2 + v15);
  uint64_t v18 = type metadata accessor for DeviceEvent.Location(0);
  uint64_t v19 = *(void *)(v18 - 8);
  v494 = v14;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    uint64_t v20 = sub_10000588C(&qword_10164E880);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64));
  }
  else
  {
    *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
    void v16[2] = v17[2];
    v14((char *)v16 + *(int *)(v18 + 28), (char *)v17 + *(int *)(v18 + 28), v13);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  uint64_t v34 = v6[8];
  uint64_t v35 = (char *)a1 + v34;
  uint64_t v36 = (char *)a2 + v34;
  uint64_t v37 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
  uint64_t v38 = *(void *)(v37 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48))(v36, 1, v37))
  {
    uint64_t v39 = sub_10000588C(&qword_10163CF20);
    memcpy(v35, v36, *(void *)(*(void *)(v39 - 8) + 64));
    a2 = v510;
  }
  else
  {
    uint64_t v40 = type metadata accessor for UUID();
    uint64_t v41 = *(void *)(v40 - 8);
    __src = *(void (**)(char *, char *, uint64_t))(v41 + 32);
    __src(v35, v36, v40);
    uint64_t v42 = *(int *)(v37 + 20);
    __dst = &v35[v42];
    uint64_t v43 = &v36[v42];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v41 + 48))(&v36[v42], 1, v40))
    {
      uint64_t v44 = sub_10000588C(&qword_101638CF0);
      memcpy(__dst, v43, *(void *)(*(void *)(v44 - 8) + 64));
    }
    else
    {
      __src(__dst, v43, v40);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(__dst, 0, 1, v40);
    }
    a2 = v510;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
    a1 = v509;
  }
  uint64_t v7 = v503;
  uint64_t v60 = v6[9];
  uint64_t v61 = (char *)a1 + v60;
  uint64_t v62 = (char *)a2 + v60;
  uint64_t v63 = type metadata accessor for UUID();
  uint64_t v64 = *(void (**)(char *, char *, uint64_t))(*(void *)(v63 - 8) + 32);
  v64(v61, v62, v63);
  uint64_t v65 = type metadata accessor for BeaconIdentifier();
  v64(&v61[*(int *)(v65 + 20)], &v62[*(int *)(v65 + 20)], v63);
  v494((char *)a1 + v6[10], (char *)a2 + v6[10], v13);
  (*(void (**)(_WORD *, void, uint64_t, int *))(v501 + 56))(a1, 0, 1, v6);
  a3 = v507;
LABEL_40:
  uint64_t v82 = a3[5];
  uint64_t v83 = (char *)a1 + v82;
  uint64_t v84 = (char *)a2 + v82;
  int v85 = v7((_WORD *)((char *)a1 + v82), 1, v6);
  int v86 = v7(v84, 1, v6);
  if (v85)
  {
    if (!v86)
    {
      *(void *)uint64_t v83 = *(void *)v84;
      *((_WORD *)v83 + 4) = *((_WORD *)v84 + 4);
      uint64_t v87 = v6[6];
      uint64_t v88 = &v83[v87];
      uint64_t v89 = &v84[v87];
      uint64_t v90 = type metadata accessor for Date();
      uint64_t v91 = *(void (**)(char *, char *, uint64_t))(*(void *)(v90 - 8) + 32);
      v91(v88, v89, v90);
      uint64_t v92 = v6[7];
      uint64_t v93 = &v83[v92];
      uint64_t v94 = &v84[v92];
      uint64_t v95 = type metadata accessor for DeviceEvent.Location(0);
      uint64_t v96 = *(void *)(v95 - 8);
      v490 = v91;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v96 + 48))(v94, 1, v95))
      {
        uint64_t v97 = sub_10000588C(&qword_10164E880);
        memcpy(v93, v94, *(void *)(*(void *)(v97 - 8) + 64));
      }
      else
      {
        *(_OWORD *)uint64_t v93 = *(_OWORD *)v94;
        *((void *)v93 + 2) = *((void *)v94 + 2);
        v91(&v93[*(int *)(v95 + 28)], &v94[*(int *)(v95 + 28)], v90);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v96 + 56))(v93, 0, 1, v95);
      }
      uint64_t v109 = v6[8];
      uint64_t v110 = &v83[v109];
      uint64_t v111 = &v84[v109];
      uint64_t v112 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
      uint64_t v113 = *(void *)(v112 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v113 + 48))(v111, 1, v112))
      {
        uint64_t v114 = sub_10000588C(&qword_10163CF20);
        memcpy(v110, v111, *(void *)(*(void *)(v114 - 8) + 64));
      }
      else
      {
        uint64_t v115 = type metadata accessor for UUID();
        uint64_t v116 = *(void *)(v115 - 8);
        v464 = *(void (**)(char *, char *, uint64_t))(v116 + 32);
        v464(v110, v111, v115);
        uint64_t v117 = *(int *)(v112 + 20);
        __srcc = &v110[v117];
        uint64_t v118 = &v111[v117];
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v116 + 48))(v118, 1, v115))
        {
          uint64_t v119 = sub_10000588C(&qword_101638CF0);
          memcpy(__srcc, v118, *(void *)(*(void *)(v119 - 8) + 64));
        }
        else
        {
          v464(__srcc, v118, v115);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v116 + 56))(__srcc, 0, 1, v115);
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v113 + 56))(v110, 0, 1, v112);
      }
      a1 = v509;
      uint64_t v7 = v503;
      uint64_t v135 = v6[9];
      uint64_t v136 = &v83[v135];
      uint64_t v137 = &v84[v135];
      uint64_t v138 = type metadata accessor for UUID();
      uint64_t v139 = *(void (**)(char *, char *, uint64_t))(*(void *)(v138 - 8) + 32);
      v139(v136, v137, v138);
      uint64_t v140 = type metadata accessor for BeaconIdentifier();
      v139(&v136[*(int *)(v140 + 20)], &v137[*(int *)(v140 + 20)], v138);
      v490(&v83[v6[10]], &v84[v6[10]], v90);
      (*(void (**)(char *, void, uint64_t, int *))(v501 + 56))(v83, 0, 1, v6);
      goto LABEL_78;
    }
LABEL_46:
    uint64_t v98 = sub_10000588C(&qword_10163D030);
    memcpy(v83, v84, *(void *)(*(void *)(v98 - 8) + 64));
    goto LABEL_79;
  }
  if (v86)
  {
    sub_1007802BC((uint64_t)v83, type metadata accessor for DeviceEvent);
    goto LABEL_46;
  }
  *(void *)uint64_t v83 = *(void *)v84;
  *((_WORD *)v83 + 4) = *((_WORD *)v84 + 4);
  uint64_t v99 = v6[6];
  uint64_t v100 = &v83[v99];
  uint64_t v101 = &v84[v99];
  uint64_t v496 = type metadata accessor for Date();
  __srcb = *(void **)(v496 - 8);
  __dstb = (void (*)(char *, char *))__srcb[5];
  __dstb(v100, v101);
  uint64_t v102 = v6[7];
  uint64_t v103 = &v83[v102];
  uint64_t v104 = &v84[v102];
  uint64_t v105 = type metadata accessor for DeviceEvent.Location(0);
  uint64_t v106 = *(void *)(v105 - 8);
  uint64_t v107 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v106 + 48);
  LODWORD(v100) = v107(v103, 1, v105);
  int v108 = v107(v104, 1, v105);
  if (v100)
  {
    if (!v108)
    {
      *(_OWORD *)uint64_t v103 = *(_OWORD *)v104;
      *((void *)v103 + 2) = *((void *)v104 + 2);
      ((void (*)(char *, char *, uint64_t))__srcb[4])(&v103[*(int *)(v105 + 28)], &v104[*(int *)(v105 + 28)], v496);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v106 + 56))(v103, 0, 1, v105);
      goto LABEL_58;
    }
    goto LABEL_57;
  }
  if (v108)
  {
    sub_1007802BC((uint64_t)v103, type metadata accessor for DeviceEvent.Location);
LABEL_57:
    uint64_t v120 = sub_10000588C(&qword_10164E880);
    memcpy(v103, v104, *(void *)(*(void *)(v120 - 8) + 64));
    goto LABEL_58;
  }
  *(_OWORD *)uint64_t v103 = *(_OWORD *)v104;
  *((void *)v103 + 2) = *((void *)v104 + 2);
  ((void (*)(char *, char *, uint64_t))__dstb)(&v103[*(int *)(v105 + 28)], &v104[*(int *)(v105 + 28)], v496);
LABEL_58:
  uint64_t v121 = v6[8];
  uint64_t v122 = &v83[v121];
  uint64_t v123 = &v84[v121];
  uint64_t v124 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
  uint64_t v125 = *(void *)(v124 - 8);
  uint64_t v126 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v125 + 48);
  int v127 = v126(v122, 1, v124);
  int v128 = v126(v123, 1, v124);
  if (v127)
  {
    if (!v128)
    {
      uint64_t v129 = type metadata accessor for UUID();
      uint64_t v130 = *(void *)(v129 - 8);
      uint64_t v465 = *(void (**)(char *, char *, uint64_t))(v130 + 32);
      v465(v122, v123, v129);
      uint64_t v131 = *(int *)(v124 + 20);
      __srcd = &v122[v131];
      int v132 = &v123[v131];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v130 + 48))(&v123[v131], 1, v129))
      {
        uint64_t v133 = sub_10000588C(&qword_101638CF0);
        memcpy(__srcd, v132, *(void *)(*(void *)(v133 - 8) + 64));
      }
      else
      {
        v465(__srcd, v132, v129);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v130 + 56))(__srcd, 0, 1, v129);
      }
      uint64_t v7 = v503;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v125 + 56))(v122, 0, 1, v124);
      a1 = v509;
      goto LABEL_77;
    }
  }
  else
  {
    if (!v128)
    {
      uint64_t v141 = type metadata accessor for UUID();
      uint64_t v142 = *(void *)(v141 - 8);
      v459 = *(void (**)(char *, char *, uint64_t))(v142 + 40);
      v459(v122, v123, v141);
      uint64_t v143 = *(int *)(v124 + 20);
      uint64_t v144 = &v122[v143];
      uint64_t v145 = &v123[v143];
      uint64_t v460 = v142;
      uint64_t v146 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v142 + 48);
      LODWORD(v142) = v146(v144, 1, v141);
      int v147 = v146(v145, 1, v141);
      if (v142)
      {
        a1 = v509;
        uint64_t v7 = v503;
        if (!v147)
        {
          (*(void (**)(char *, char *, uint64_t))(v460 + 32))(v144, v145, v141);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v460 + 56))(v144, 0, 1, v141);
          goto LABEL_77;
        }
      }
      else
      {
        a1 = v509;
        uint64_t v7 = v503;
        if (!v147)
        {
          v459(v144, v145, v141);
          goto LABEL_77;
        }
        (*(void (**)(char *, uint64_t))(v460 + 8))(v144, v141);
      }
      uint64_t v148 = sub_10000588C(&qword_101638CF0);
      memcpy(v144, v145, *(void *)(*(void *)(v148 - 8) + 64));
      goto LABEL_77;
    }
    sub_1007802BC((uint64_t)v122, type metadata accessor for DeviceEvent.AttachmentInfo);
  }
  uint64_t v134 = sub_10000588C(&qword_10163CF20);
  memcpy(v122, v123, *(void *)(*(void *)(v134 - 8) + 64));
  a1 = v509;
  uint64_t v7 = v503;
LABEL_77:
  uint64_t v149 = v6[9];
  uint64_t v150 = &v83[v149];
  long long v151 = &v84[v149];
  uint64_t v152 = type metadata accessor for UUID();
  uint64_t v153 = *(void (**)(char *, char *, uint64_t))(*(void *)(v152 - 8) + 40);
  v153(v150, v151, v152);
  uint64_t v154 = type metadata accessor for BeaconIdentifier();
  v153(&v150[*(int *)(v154 + 20)], &v151[*(int *)(v154 + 20)], v152);
  ((void (*)(char *, char *, uint64_t))__dstb)(&v83[v6[10]], &v84[v6[10]], v496);
LABEL_78:
  a2 = v510;
  a3 = v507;
LABEL_79:
  uint64_t v155 = a3[6];
  uint64_t v156 = (char *)a1 + v155;
  uint64_t v157 = (char *)a2 + v155;
  int v158 = v7((_WORD *)((char *)a1 + v155), 1, v6);
  int v159 = v7(v157, 1, v6);
  if (v158)
  {
    if (!v159)
    {
      *(void *)uint64_t v156 = *(void *)v157;
      *((_WORD *)v156 + 4) = *((_WORD *)v157 + 4);
      uint64_t v160 = v6[6];
      uint64_t v161 = &v156[v160];
      long long v162 = &v157[v160];
      uint64_t v163 = type metadata accessor for Date();
      int v164 = *(void (**)(char *, char *, uint64_t))(*(void *)(v163 - 8) + 32);
      v164(v161, v162, v163);
      uint64_t v165 = v6[7];
      uint64_t v166 = &v156[v165];
      uint64_t v167 = &v157[v165];
      uint64_t v168 = type metadata accessor for DeviceEvent.Location(0);
      uint64_t v169 = *(void *)(v168 - 8);
      v491 = v164;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v169 + 48))(v167, 1, v168))
      {
        uint64_t v170 = sub_10000588C(&qword_10164E880);
        memcpy(v166, v167, *(void *)(*(void *)(v170 - 8) + 64));
      }
      else
      {
        *(_OWORD *)uint64_t v166 = *(_OWORD *)v167;
        *((void *)v166 + 2) = *((void *)v167 + 2);
        v164(&v166[*(int *)(v168 + 28)], &v167[*(int *)(v168 + 28)], v163);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v169 + 56))(v166, 0, 1, v168);
      }
      uint64_t v182 = v6[8];
      uint64_t v183 = &v156[v182];
      uint64_t v184 = &v157[v182];
      uint64_t v185 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
      uint64_t v186 = *(void *)(v185 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v186 + 48))(v184, 1, v185))
      {
        uint64_t v187 = sub_10000588C(&qword_10163CF20);
        memcpy(v183, v184, *(void *)(*(void *)(v187 - 8) + 64));
      }
      else
      {
        uint64_t v188 = type metadata accessor for UUID();
        uint64_t v189 = *(void *)(v188 - 8);
        v466 = *(void (**)(char *, char *, uint64_t))(v189 + 32);
        v466(v183, v184, v188);
        uint64_t v190 = *(int *)(v185 + 20);
        __srcf = &v183[v190];
        uint64_t v191 = &v184[v190];
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v189 + 48))(v191, 1, v188))
        {
          uint64_t v192 = sub_10000588C(&qword_101638CF0);
          memcpy(__srcf, v191, *(void *)(*(void *)(v192 - 8) + 64));
        }
        else
        {
          v466(__srcf, v191, v188);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v189 + 56))(__srcf, 0, 1, v188);
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v186 + 56))(v183, 0, 1, v185);
      }
      a1 = v509;
      uint64_t v7 = v503;
      uint64_t v209 = v6[9];
      uint64_t v210 = &v156[v209];
      uint64_t v211 = &v157[v209];
      uint64_t v212 = type metadata accessor for UUID();
      uint64_t v213 = *(void (**)(char *, char *, uint64_t))(*(void *)(v212 - 8) + 32);
      v213(v210, v211, v212);
      uint64_t v214 = type metadata accessor for BeaconIdentifier();
      v213(&v210[*(int *)(v214 + 20)], &v211[*(int *)(v214 + 20)], v212);
      v491(&v156[v6[10]], &v157[v6[10]], v163);
      (*(void (**)(char *, void, uint64_t, int *))(v501 + 56))(v156, 0, 1, v6);
      goto LABEL_115;
    }
LABEL_85:
    uint64_t v171 = sub_10000588C(&qword_10163D030);
    memcpy(v156, v157, *(void *)(*(void *)(v171 - 8) + 64));
    goto LABEL_116;
  }
  if (v159)
  {
    sub_1007802BC((uint64_t)v156, type metadata accessor for DeviceEvent);
    goto LABEL_85;
  }
  *(void *)uint64_t v156 = *(void *)v157;
  *((_WORD *)v156 + 4) = *((_WORD *)v157 + 4);
  uint64_t v172 = v6[6];
  uint64_t v173 = &v156[v172];
  uint64_t v174 = &v157[v172];
  uint64_t v497 = type metadata accessor for Date();
  __srce = *(void **)(v497 - 8);
  __dstc = (void (*)(char *, char *))__srce[5];
  __dstc(v173, v174);
  uint64_t v175 = v6[7];
  uint64_t v176 = &v156[v175];
  uint64_t v177 = &v157[v175];
  uint64_t v178 = type metadata accessor for DeviceEvent.Location(0);
  uint64_t v179 = *(void *)(v178 - 8);
  uint64_t v180 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v179 + 48);
  LODWORD(v173) = v180(v176, 1, v178);
  int v181 = v180(v177, 1, v178);
  if (v173)
  {
    if (!v181)
    {
      *(_OWORD *)uint64_t v176 = *(_OWORD *)v177;
      *((void *)v176 + 2) = *((void *)v177 + 2);
      ((void (*)(char *, char *, uint64_t))__srce[4])(&v176[*(int *)(v178 + 28)], &v177[*(int *)(v178 + 28)], v497);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v179 + 56))(v176, 0, 1, v178);
      goto LABEL_97;
    }
    goto LABEL_96;
  }
  if (v181)
  {
    sub_1007802BC((uint64_t)v176, type metadata accessor for DeviceEvent.Location);
LABEL_96:
    uint64_t v193 = sub_10000588C(&qword_10164E880);
    memcpy(v176, v177, *(void *)(*(void *)(v193 - 8) + 64));
    goto LABEL_97;
  }
  *(_OWORD *)uint64_t v176 = *(_OWORD *)v177;
  *((void *)v176 + 2) = *((void *)v177 + 2);
  ((void (*)(char *, char *, uint64_t))__dstc)(&v176[*(int *)(v178 + 28)], &v177[*(int *)(v178 + 28)], v497);
LABEL_97:
  uint64_t v194 = v6[8];
  uint64_t v195 = &v156[v194];
  uint64_t v196 = &v157[v194];
  uint64_t v197 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
  uint64_t v198 = *(void *)(v197 - 8);
  uint64_t v199 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v198 + 48);
  int v200 = v199(v195, 1, v197);
  int v201 = v199(v196, 1, v197);
  if (v200)
  {
    if (!v201)
    {
      uint64_t v202 = type metadata accessor for UUID();
      uint64_t v203 = *(void *)(v202 - 8);
      __srcg = *(void (**)(char *, char *, uint64_t))(v203 + 32);
      __srcg(v195, v196, v202);
      uint64_t v204 = *(int *)(v197 + 20);
      uint64_t v205 = &v195[v204];
      char v206 = &v196[v204];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v203 + 48))(v206, 1, v202))
      {
        uint64_t v207 = sub_10000588C(&qword_101638CF0);
        memcpy(v205, v206, *(void *)(*(void *)(v207 - 8) + 64));
      }
      else
      {
        __srcg(v205, v206, v202);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v203 + 56))(v205, 0, 1, v202);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v198 + 56))(v195, 0, 1, v197);
      goto LABEL_113;
    }
LABEL_103:
    uint64_t v208 = sub_10000588C(&qword_10163CF20);
    memcpy(v195, v196, *(void *)(*(void *)(v208 - 8) + 64));
LABEL_113:
    a1 = v509;
    uint64_t v7 = v503;
    goto LABEL_114;
  }
  if (v201)
  {
    sub_1007802BC((uint64_t)v195, type metadata accessor for DeviceEvent.AttachmentInfo);
    goto LABEL_103;
  }
  uint64_t v215 = type metadata accessor for UUID();
  uint64_t v216 = *(void *)(v215 - 8);
  int v461 = *(void (**)(char *, char *, uint64_t))(v216 + 40);
  v461(v195, v196, v215);
  uint64_t v217 = *(int *)(v197 + 20);
  v218 = &v195[v217];
  uint64_t v219 = &v196[v217];
  uint64_t v220 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v216 + 48);
  int v221 = v220(v218, 1, v215);
  int v222 = v220(v219, 1, v215);
  if (!v221)
  {
    uint64_t v7 = v503;
    if (!v222)
    {
      v461(v218, v219, v215);
      a1 = v509;
      goto LABEL_114;
    }
    (*(void (**)(char *, uint64_t))(v216 + 8))(v218, v215);
    goto LABEL_230;
  }
  uint64_t v7 = v503;
  if (v222)
  {
LABEL_230:
    uint64_t v456 = sub_10000588C(&qword_101638CF0);
    memcpy(v218, v219, *(void *)(*(void *)(v456 - 8) + 64));
    a1 = v509;
    goto LABEL_114;
  }
  (*(void (**)(char *, char *, uint64_t))(v216 + 32))(v218, v219, v215);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v216 + 56))(v218, 0, 1, v215);
  a1 = v509;
LABEL_114:
  uint64_t v223 = v6[9];
  uint64_t v224 = &v156[v223];
  uint64_t v225 = &v157[v223];
  uint64_t v226 = type metadata accessor for UUID();
  uint64_t v227 = *(void (**)(char *, char *, uint64_t))(*(void *)(v226 - 8) + 40);
  v227(v224, v225, v226);
  uint64_t v228 = type metadata accessor for BeaconIdentifier();
  v227(&v224[*(int *)(v228 + 20)], &v225[*(int *)(v228 + 20)], v226);
  ((void (*)(char *, char *, uint64_t))__dstc)(&v156[v6[10]], &v157[v6[10]], v497);
LABEL_115:
  a2 = v510;
  a3 = v507;
LABEL_116:
  uint64_t v229 = a3[7];
  uint64_t v230 = (char *)a1 + v229;
  uint64_t v231 = (char *)a2 + v229;
  int v232 = v7((_WORD *)((char *)a1 + v229), 1, v6);
  int v233 = v7(v231, 1, v6);
  if (v232)
  {
    if (!v233)
    {
      *(void *)uint64_t v230 = *(void *)v231;
      *((_WORD *)v230 + 4) = *((_WORD *)v231 + 4);
      uint64_t v234 = v6[6];
      uint64_t v235 = &v230[v234];
      uint64_t v236 = &v231[v234];
      uint64_t v237 = type metadata accessor for Date();
      char v238 = *(void (**)(char *, char *, uint64_t))(*(void *)(v237 - 8) + 32);
      v238(v235, v236, v237);
      uint64_t v239 = v6[7];
      int v240 = &v230[v239];
      uint64_t v241 = &v231[v239];
      uint64_t v242 = type metadata accessor for DeviceEvent.Location(0);
      uint64_t v243 = *(void *)(v242 - 8);
      v492 = v238;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v243 + 48))(v241, 1, v242))
      {
        uint64_t v244 = sub_10000588C(&qword_10164E880);
        memcpy(v240, v241, *(void *)(*(void *)(v244 - 8) + 64));
      }
      else
      {
        *(_OWORD *)int v240 = *(_OWORD *)v241;
        *((void *)v240 + 2) = *((void *)v241 + 2);
        v238(&v240[*(int *)(v242 + 28)], &v241[*(int *)(v242 + 28)], v237);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v243 + 56))(v240, 0, 1, v242);
      }
      uint64_t v256 = v6[8];
      uint64_t v257 = &v230[v256];
      uint64_t v258 = &v231[v256];
      uint64_t v259 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
      uint64_t v260 = *(void *)(v259 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v260 + 48))(v258, 1, v259))
      {
        uint64_t v261 = sub_10000588C(&qword_10163CF20);
        memcpy(v257, v258, *(void *)(*(void *)(v261 - 8) + 64));
      }
      else
      {
        uint64_t v262 = type metadata accessor for UUID();
        uint64_t v263 = *(void *)(v262 - 8);
        uint64_t v467 = *(void (**)(char *, char *, uint64_t))(v263 + 32);
        v467(v257, v258, v262);
        uint64_t v264 = *(int *)(v259 + 20);
        __srcuint64_t i = &v257[v264];
        uint64_t v265 = &v258[v264];
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v263 + 48))(v265, 1, v262))
        {
          uint64_t v266 = sub_10000588C(&qword_101638CF0);
          memcpy(__srci, v265, *(void *)(*(void *)(v266 - 8) + 64));
        }
        else
        {
          v467(__srci, v265, v262);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v263 + 56))(__srci, 0, 1, v262);
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v260 + 56))(v257, 0, 1, v259);
      }
      a1 = v509;
      uint64_t v7 = v503;
      uint64_t v283 = v6[9];
      int v284 = &v230[v283];
      uint64_t v285 = &v231[v283];
      uint64_t v286 = type metadata accessor for UUID();
      uint64_t v287 = *(void (**)(char *, char *, uint64_t))(*(void *)(v286 - 8) + 32);
      v287(v284, v285, v286);
      uint64_t v288 = type metadata accessor for BeaconIdentifier();
      v287(&v284[*(int *)(v288 + 20)], &v285[*(int *)(v288 + 20)], v286);
      v492(&v230[v6[10]], &v231[v6[10]], v237);
      (*(void (**)(char *, void, uint64_t, int *))(v501 + 56))(v230, 0, 1, v6);
      goto LABEL_152;
    }
LABEL_122:
    uint64_t v245 = sub_10000588C(&qword_10163D030);
    memcpy(v230, v231, *(void *)(*(void *)(v245 - 8) + 64));
    goto LABEL_153;
  }
  if (v233)
  {
    sub_1007802BC((uint64_t)v230, type metadata accessor for DeviceEvent);
    goto LABEL_122;
  }
  *(void *)uint64_t v230 = *(void *)v231;
  *((_WORD *)v230 + 4) = *((_WORD *)v231 + 4);
  uint64_t v246 = v6[6];
  uint64_t v247 = &v230[v246];
  uint64_t v248 = &v231[v246];
  uint64_t v498 = type metadata accessor for Date();
  __srch = *(void **)(v498 - 8);
  __dstd = (void (*)(char *, char *))__srch[5];
  __dstd(v247, v248);
  uint64_t v249 = v6[7];
  uint64_t v250 = &v230[v249];
  uint64_t v251 = &v231[v249];
  uint64_t v252 = type metadata accessor for DeviceEvent.Location(0);
  uint64_t v253 = *(void *)(v252 - 8);
  uint64_t v254 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v253 + 48);
  LODWORD(v247) = v254(v250, 1, v252);
  int v255 = v254(v251, 1, v252);
  if (v247)
  {
    if (!v255)
    {
      *(_OWORD *)uint64_t v250 = *(_OWORD *)v251;
      *((void *)v250 + 2) = *((void *)v251 + 2);
      ((void (*)(char *, char *, uint64_t))__srch[4])(&v250[*(int *)(v252 + 28)], &v251[*(int *)(v252 + 28)], v498);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v253 + 56))(v250, 0, 1, v252);
      goto LABEL_134;
    }
    goto LABEL_133;
  }
  if (v255)
  {
    sub_1007802BC((uint64_t)v250, type metadata accessor for DeviceEvent.Location);
LABEL_133:
    uint64_t v267 = sub_10000588C(&qword_10164E880);
    memcpy(v250, v251, *(void *)(*(void *)(v267 - 8) + 64));
    goto LABEL_134;
  }
  *(_OWORD *)uint64_t v250 = *(_OWORD *)v251;
  *((void *)v250 + 2) = *((void *)v251 + 2);
  ((void (*)(char *, char *, uint64_t))__dstd)(&v250[*(int *)(v252 + 28)], &v251[*(int *)(v252 + 28)], v498);
LABEL_134:
  uint64_t v268 = v6[8];
  uint64_t v269 = &v230[v268];
  uint64_t v270 = &v231[v268];
  uint64_t v271 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
  uint64_t v272 = *(void *)(v271 - 8);
  uint64_t v273 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v272 + 48);
  int v274 = v273(v269, 1, v271);
  int v275 = v273(v270, 1, v271);
  if (v274)
  {
    if (!v275)
    {
      uint64_t v276 = type metadata accessor for UUID();
      uint64_t v277 = *(void *)(v276 - 8);
      __srcj = *(void (**)(char *, char *, uint64_t))(v277 + 32);
      __srcj(v269, v270, v276);
      uint64_t v278 = *(int *)(v271 + 20);
      uint64_t v279 = &v269[v278];
      uint64_t v280 = &v270[v278];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v277 + 48))(v280, 1, v276))
      {
        uint64_t v281 = sub_10000588C(&qword_101638CF0);
        memcpy(v279, v280, *(void *)(*(void *)(v281 - 8) + 64));
      }
      else
      {
        __srcj(v279, v280, v276);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v277 + 56))(v279, 0, 1, v276);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v272 + 56))(v269, 0, 1, v271);
      goto LABEL_150;
    }
LABEL_140:
    uint64_t v282 = sub_10000588C(&qword_10163CF20);
    memcpy(v269, v270, *(void *)(*(void *)(v282 - 8) + 64));
LABEL_150:
    a1 = v509;
    uint64_t v7 = v503;
    goto LABEL_151;
  }
  if (v275)
  {
    sub_1007802BC((uint64_t)v269, type metadata accessor for DeviceEvent.AttachmentInfo);
    goto LABEL_140;
  }
  uint64_t v289 = type metadata accessor for UUID();
  uint64_t v290 = *(void *)(v289 - 8);
  uint64_t v462 = *(void (**)(char *, char *, uint64_t))(v290 + 40);
  v462(v269, v270, v289);
  uint64_t v291 = *(int *)(v271 + 20);
  uint64_t v292 = &v269[v291];
  v293 = &v270[v291];
  v294 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v290 + 48);
  int v295 = v294(v292, 1, v289);
  int v296 = v294(v293, 1, v289);
  if (!v295)
  {
    uint64_t v7 = v503;
    if (!v296)
    {
      v462(v292, v293, v289);
      a1 = v509;
      goto LABEL_151;
    }
    (*(void (**)(char *, uint64_t))(v290 + 8))(v292, v289);
    goto LABEL_233;
  }
  uint64_t v7 = v503;
  if (v296)
  {
LABEL_233:
    uint64_t v457 = sub_10000588C(&qword_101638CF0);
    memcpy(v292, v293, *(void *)(*(void *)(v457 - 8) + 64));
    a1 = v509;
    goto LABEL_151;
  }
  (*(void (**)(char *, char *, uint64_t))(v290 + 32))(v292, v293, v289);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v290 + 56))(v292, 0, 1, v289);
  a1 = v509;
LABEL_151:
  uint64_t v297 = v6[9];
  uint64_t v298 = &v230[v297];
  uint64_t v299 = &v231[v297];
  uint64_t v300 = type metadata accessor for UUID();
  v301 = *(void (**)(char *, char *, uint64_t))(*(void *)(v300 - 8) + 40);
  v301(v298, v299, v300);
  uint64_t v302 = type metadata accessor for BeaconIdentifier();
  v301(&v298[*(int *)(v302 + 20)], &v299[*(int *)(v302 + 20)], v300);
  ((void (*)(char *, char *, uint64_t))__dstd)(&v230[v6[10]], &v231[v6[10]], v498);
LABEL_152:
  a2 = v510;
  a3 = v507;
LABEL_153:
  uint64_t v303 = a3[8];
  int v304 = (char *)a1 + v303;
  int v305 = (char *)a2 + v303;
  int v306 = v7((_WORD *)((char *)a1 + v303), 1, v6);
  int v307 = v7(v305, 1, v6);
  if (v306)
  {
    if (!v307)
    {
      *(void *)int v304 = *(void *)v305;
      *((_WORD *)v304 + 4) = *((_WORD *)v305 + 4);
      uint64_t v308 = v6[6];
      uint64_t v309 = &v304[v308];
      v310 = &v305[v308];
      uint64_t v311 = type metadata accessor for Date();
      uint64_t v312 = *(void (**)(char *, char *, uint64_t))(*(void *)(v311 - 8) + 32);
      v312(v309, v310, v311);
      uint64_t v313 = v6[7];
      v314 = &v304[v313];
      int v315 = &v305[v313];
      uint64_t v316 = type metadata accessor for DeviceEvent.Location(0);
      uint64_t v317 = *(void *)(v316 - 8);
      v493 = v312;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v317 + 48))(v315, 1, v316))
      {
        uint64_t v318 = sub_10000588C(&qword_10164E880);
        memcpy(v314, v315, *(void *)(*(void *)(v318 - 8) + 64));
      }
      else
      {
        *(_OWORD *)v314 = *(_OWORD *)v315;
        *((void *)v314 + 2) = *((void *)v315 + 2);
        v312(&v314[*(int *)(v316 + 28)], &v315[*(int *)(v316 + 28)], v311);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v317 + 56))(v314, 0, 1, v316);
      }
      uint64_t v330 = v6[8];
      uint64_t v331 = &v304[v330];
      v332 = &v305[v330];
      uint64_t v333 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
      uint64_t v334 = *(void *)(v333 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v334 + 48))(v332, 1, v333))
      {
        uint64_t v335 = sub_10000588C(&qword_10163CF20);
        memcpy(v331, v332, *(void *)(*(void *)(v335 - 8) + 64));
      }
      else
      {
        uint64_t v336 = type metadata accessor for UUID();
        uint64_t v337 = *(void *)(v336 - 8);
        v468 = *(void (**)(char *, char *, uint64_t))(v337 + 32);
        v468(v331, v332, v336);
        uint64_t v338 = *(int *)(v333 + 20);
        __srcl = &v331[v338];
        v339 = &v332[v338];
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v337 + 48))(v339, 1, v336))
        {
          uint64_t v340 = sub_10000588C(&qword_101638CF0);
          memcpy(__srcl, v339, *(void *)(*(void *)(v340 - 8) + 64));
        }
        else
        {
          v468(__srcl, v339, v336);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v337 + 56))(__srcl, 0, 1, v336);
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v334 + 56))(v331, 0, 1, v333);
      }
      a1 = v509;
      uint64_t v7 = v503;
      uint64_t v357 = v6[9];
      v358 = &v304[v357];
      int v359 = &v305[v357];
      uint64_t v360 = type metadata accessor for UUID();
      uint64_t v361 = *(void (**)(char *, char *, uint64_t))(*(void *)(v360 - 8) + 32);
      v361(v358, v359, v360);
      uint64_t v362 = type metadata accessor for BeaconIdentifier();
      v361(&v358[*(int *)(v362 + 20)], &v359[*(int *)(v362 + 20)], v360);
      v493(&v304[v6[10]], &v305[v6[10]], v311);
      (*(void (**)(char *, void, uint64_t, int *))(v501 + 56))(v304, 0, 1, v6);
      goto LABEL_189;
    }
LABEL_159:
    uint64_t v319 = sub_10000588C(&qword_10163D030);
    memcpy(v304, v305, *(void *)(*(void *)(v319 - 8) + 64));
    goto LABEL_190;
  }
  if (v307)
  {
    sub_1007802BC((uint64_t)v304, type metadata accessor for DeviceEvent);
    goto LABEL_159;
  }
  *(void *)int v304 = *(void *)v305;
  *((_WORD *)v304 + 4) = *((_WORD *)v305 + 4);
  uint64_t v320 = v6[6];
  uint64_t v321 = &v304[v320];
  v322 = &v305[v320];
  uint64_t v499 = type metadata accessor for Date();
  __srck = *(void **)(v499 - 8);
  __dste = (void (*)(char *, char *))__srck[5];
  __dste(v321, v322);
  uint64_t v323 = v6[7];
  v324 = &v304[v323];
  v325 = &v305[v323];
  uint64_t v326 = type metadata accessor for DeviceEvent.Location(0);
  uint64_t v327 = *(void *)(v326 - 8);
  uint64_t v328 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v327 + 48);
  LODWORD(v321) = v328(v324, 1, v326);
  int v329 = v328(v325, 1, v326);
  if (v321)
  {
    if (!v329)
    {
      *(_OWORD *)v324 = *(_OWORD *)v325;
      *((void *)v324 + 2) = *((void *)v325 + 2);
      ((void (*)(char *, char *, uint64_t))__srck[4])(&v324[*(int *)(v326 + 28)], &v325[*(int *)(v326 + 28)], v499);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v327 + 56))(v324, 0, 1, v326);
      goto LABEL_171;
    }
    goto LABEL_170;
  }
  if (v329)
  {
    sub_1007802BC((uint64_t)v324, type metadata accessor for DeviceEvent.Location);
LABEL_170:
    uint64_t v341 = sub_10000588C(&qword_10164E880);
    memcpy(v324, v325, *(void *)(*(void *)(v341 - 8) + 64));
    goto LABEL_171;
  }
  *(_OWORD *)v324 = *(_OWORD *)v325;
  *((void *)v324 + 2) = *((void *)v325 + 2);
  ((void (*)(char *, char *, uint64_t))__dste)(&v324[*(int *)(v326 + 28)], &v325[*(int *)(v326 + 28)], v499);
LABEL_171:
  uint64_t v342 = v6[8];
  v343 = &v304[v342];
  uint64_t v344 = &v305[v342];
  uint64_t v345 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
  uint64_t v346 = *(void *)(v345 - 8);
  uint64_t v347 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v346 + 48);
  int v348 = v347(v343, 1, v345);
  int v349 = v347(v344, 1, v345);
  if (v348)
  {
    if (!v349)
    {
      uint64_t v350 = type metadata accessor for UUID();
      uint64_t v351 = *(void *)(v350 - 8);
      __srcm = *(void (**)(char *, char *, uint64_t))(v351 + 32);
      __srcm(v343, v344, v350);
      uint64_t v352 = *(int *)(v345 + 20);
      uint64_t v353 = &v343[v352];
      v354 = &v344[v352];
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v351 + 48))(v354, 1, v350))
      {
        uint64_t v355 = sub_10000588C(&qword_101638CF0);
        memcpy(v353, v354, *(void *)(*(void *)(v355 - 8) + 64));
      }
      else
      {
        __srcm(v353, v354, v350);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v351 + 56))(v353, 0, 1, v350);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v346 + 56))(v343, 0, 1, v345);
      goto LABEL_187;
    }
LABEL_177:
    uint64_t v356 = sub_10000588C(&qword_10163CF20);
    memcpy(v343, v344, *(void *)(*(void *)(v356 - 8) + 64));
LABEL_187:
    a1 = v509;
    uint64_t v7 = v503;
    goto LABEL_188;
  }
  if (v349)
  {
    sub_1007802BC((uint64_t)v343, type metadata accessor for DeviceEvent.AttachmentInfo);
    goto LABEL_177;
  }
  uint64_t v363 = type metadata accessor for UUID();
  uint64_t v364 = *(void *)(v363 - 8);
  v463 = *(void (**)(char *, char *, uint64_t))(v364 + 40);
  v463(v343, v344, v363);
  uint64_t v365 = *(int *)(v345 + 20);
  uint64_t v366 = &v343[v365];
  uint64_t v367 = &v344[v365];
  uint64_t v368 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v364 + 48);
  int v369 = v368(v366, 1, v363);
  int v370 = v368(v367, 1, v363);
  if (!v369)
  {
    uint64_t v7 = v503;
    if (!v370)
    {
      v463(v366, v367, v363);
      a1 = v509;
      goto LABEL_188;
    }
    (*(void (**)(char *, uint64_t))(v364 + 8))(v366, v363);
    goto LABEL_236;
  }
  uint64_t v7 = v503;
  if (v370)
  {
LABEL_236:
    uint64_t v458 = sub_10000588C(&qword_101638CF0);
    memcpy(v366, v367, *(void *)(*(void *)(v458 - 8) + 64));
    a1 = v509;
    goto LABEL_188;
  }
  (*(void (**)(char *, char *, uint64_t))(v364 + 32))(v366, v367, v363);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v364 + 56))(v366, 0, 1, v363);
  a1 = v509;
LABEL_188:
  uint64_t v371 = v6[9];
  v372 = &v304[v371];
  uint64_t v373 = &v305[v371];
  uint64_t v374 = type metadata accessor for UUID();
  uint64_t v375 = *(void (**)(char *, char *, uint64_t))(*(void *)(v374 - 8) + 40);
  v375(v372, v373, v374);
  uint64_t v376 = type metadata accessor for BeaconIdentifier();
  v375(&v372[*(int *)(v376 + 20)], &v373[*(int *)(v376 + 20)], v374);
  ((void (*)(char *, char *, uint64_t))__dste)(&v304[v6[10]], &v305[v6[10]], v499);
LABEL_189:
  a2 = v510;
  a3 = v507;
LABEL_190:
  uint64_t v377 = a3[9];
  v378 = (_WORD *)((char *)a1 + v377);
  v379 = (_WORD *)((char *)a2 + v377);
  int v380 = v7((_WORD *)((char *)a1 + v377), 1, v6);
  int v381 = v7(v379, 1, v6);
  if (!v380)
  {
    if (v381)
    {
      sub_1007802BC((uint64_t)v378, type metadata accessor for DeviceEvent);
      goto LABEL_196;
    }
    *(void *)v378 = *(void *)v379;
    v378[4] = v379[4];
    uint64_t v394 = v6[6];
    v395 = (char *)v378 + v394;
    v396 = (char *)v379 + v394;
    uint64_t v397 = type metadata accessor for Date();
    uint64_t v504 = *(void *)(v397 - 8);
    uint64_t v513 = v397;
    uint64_t v508 = *(void (**)(char *, char *))(v504 + 40);
    v508(v395, v396);
    uint64_t v398 = v6[7];
    uint64_t v399 = (char *)v378 + v398;
    v400 = (char *)v379 + v398;
    uint64_t v401 = type metadata accessor for DeviceEvent.Location(0);
    uint64_t v402 = *(void *)(v401 - 8);
    uint64_t v403 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v402 + 48);
    LODWORD(v395) = v403(v399, 1, v401);
    int v404 = v403(v400, 1, v401);
    if (v395)
    {
      if (!v404)
      {
        *(_OWORD *)uint64_t v399 = *(_OWORD *)v400;
        *((void *)v399 + 2) = *((void *)v400 + 2);
        (*(void (**)(char *, char *, uint64_t))(v504 + 32))(&v399[*(int *)(v401 + 28)], &v400[*(int *)(v401 + 28)], v513);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v402 + 56))(v399, 0, 1, v401);
        goto LABEL_208;
      }
    }
    else
    {
      if (!v404)
      {
        *(_OWORD *)uint64_t v399 = *(_OWORD *)v400;
        *((void *)v399 + 2) = *((void *)v400 + 2);
        ((void (*)(char *, char *, uint64_t))v508)(&v399[*(int *)(v401 + 28)], &v400[*(int *)(v401 + 28)], v513);
LABEL_208:
        uint64_t v419 = v6[8];
        uint64_t v420 = (uint64_t)v378 + v419;
        uint64_t v421 = (char *)v379 + v419;
        uint64_t v422 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
        uint64_t v423 = *(void *)(v422 - 8);
        uint64_t v424 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v423 + 48);
        int v425 = v424(v420, 1, v422);
        int v426 = v424((uint64_t)v421, 1, v422);
        if (v425)
        {
          if (!v426)
          {
            uint64_t v427 = type metadata accessor for UUID();
            uint64_t v428 = *(void *)(v427 - 8);
            v505 = *(void (**)(uint64_t, char *, uint64_t))(v428 + 32);
            v505(v420, v421, v427);
            uint64_t v429 = *(int *)(v422 + 20);
            uint64_t v430 = (void *)(v420 + v429);
            uint64_t v431 = &v421[v429];
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v428 + 48))(v431, 1, v427))
            {
              uint64_t v432 = sub_10000588C(&qword_101638CF0);
              memcpy(v430, v431, *(void *)(*(void *)(v432 - 8) + 64));
            }
            else
            {
              v505((uint64_t)v430, v431, v427);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v428 + 56))(v430, 0, 1, v427);
            }
            a1 = v509;
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v423 + 56))(v420, 0, 1, v422);
            goto LABEL_226;
          }
        }
        else
        {
          if (!v426)
          {
            uint64_t v442 = type metadata accessor for UUID();
            uint64_t v443 = *(void *)(v442 - 8);
            v502 = *(void (**)(uint64_t, char *, uint64_t))(v443 + 40);
            v502(v420, v421, v442);
            uint64_t v444 = *(int *)(v422 + 20);
            uint64_t v445 = (void *)(v420 + v444);
            size_t v446 = &v421[v444];
            uint64_t v506 = v443;
            v447 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v443 + 48);
            LODWORD(v443) = v447(v445, 1, v442);
            int v448 = v447(v446, 1, v442);
            if (v443)
            {
              if (!v448)
              {
                (*(void (**)(void *, char *, uint64_t))(v506 + 32))(v445, v446, v442);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v506 + 56))(v445, 0, 1, v442);
                goto LABEL_216;
              }
            }
            else
            {
              if (!v448)
              {
                v502((uint64_t)v445, v446, v442);
                goto LABEL_216;
              }
              (*(void (**)(void *, uint64_t))(v506 + 8))(v445, v442);
            }
            size_t v433 = *(void *)(*(void *)(sub_10000588C(&qword_101638CF0) - 8) + 64);
            v434 = v445;
            uint64_t v435 = v446;
LABEL_215:
            memcpy(v434, v435, v433);
LABEL_216:
            a1 = v509;
LABEL_226:
            uint64_t v449 = v6[9];
            v450 = (char *)v378 + v449;
            v451 = (char *)v379 + v449;
            uint64_t v452 = type metadata accessor for UUID();
            v453 = *(void (**)(char *, char *, uint64_t))(*(void *)(v452 - 8) + 40);
            v453(v450, v451, v452);
            uint64_t v454 = type metadata accessor for BeaconIdentifier();
            v453(&v450[*(int *)(v454 + 20)], &v451[*(int *)(v454 + 20)], v452);
            ((void (*)(char *, char *, uint64_t))v508)((char *)v378 + v6[10], (char *)v379 + v6[10], v513);
            return a1;
          }
          sub_1007802BC(v420, type metadata accessor for DeviceEvent.AttachmentInfo);
        }
        size_t v433 = *(void *)(*(void *)(sub_10000588C(&qword_10163CF20) - 8) + 64);
        v434 = (void *)v420;
        uint64_t v435 = v421;
        goto LABEL_215;
      }
      sub_1007802BC((uint64_t)v399, type metadata accessor for DeviceEvent.Location);
    }
    uint64_t v418 = sub_10000588C(&qword_10164E880);
    memcpy(v399, v400, *(void *)(*(void *)(v418 - 8) + 64));
    goto LABEL_208;
  }
  if (v381)
  {
LABEL_196:
    uint64_t v393 = sub_10000588C(&qword_10163D030);
    memcpy(v378, v379, *(void *)(*(void *)(v393 - 8) + 64));
    return a1;
  }
  *(void *)v378 = *(void *)v379;
  v378[4] = v379[4];
  uint64_t v382 = v6[6];
  v383 = (char *)v378 + v382;
  v384 = (char *)v379 + v382;
  uint64_t v385 = type metadata accessor for Date();
  v386 = *(void (**)(char *, char *, uint64_t))(*(void *)(v385 - 8) + 32);
  v386(v383, v384, v385);
  v512 = v6;
  uint64_t v387 = v6[7];
  uint64_t v388 = (void *)((char *)v378 + v387);
  v389 = (void *)((char *)v379 + v387);
  uint64_t v390 = type metadata accessor for DeviceEvent.Location(0);
  uint64_t v391 = *(void *)(v390 - 8);
  uint64_t v511 = v386;
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v391 + 48))(v389, 1, v390))
  {
    uint64_t v392 = sub_10000588C(&qword_10164E880);
    memcpy(v388, v389, *(void *)(*(void *)(v392 - 8) + 64));
  }
  else
  {
    *(_OWORD *)uint64_t v388 = *(_OWORD *)v389;
    v388[2] = v389[2];
    v386((char *)v388 + *(int *)(v390 + 28), (char *)v389 + *(int *)(v390 + 28), v385);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v391 + 56))(v388, 0, 1, v390);
  }
  uint64_t v405 = v6[8];
  uint64_t v406 = (char *)v378 + v405;
  uint64_t v407 = (char *)v379 + v405;
  uint64_t v408 = type metadata accessor for DeviceEvent.AttachmentInfo(0);
  uint64_t v409 = *(void *)(v408 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v409 + 48))(v407, 1, v408))
  {
    uint64_t v410 = sub_10000588C(&qword_10163CF20);
    memcpy(v406, v407, *(void *)(*(void *)(v410 - 8) + 64));
    uint64_t v411 = v385;
  }
  else
  {
    uint64_t v412 = type metadata accessor for UUID();
    uint64_t v413 = *(void *)(v412 - 8);
    v500 = *(void (**)(char *, char *, uint64_t))(v413 + 32);
    v500(v406, v407, v412);
    uint64_t v414 = *(int *)(v408 + 20);
    uint64_t v415 = &v406[v414];
    v416 = &v407[v414];
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v413 + 48))(v416, 1, v412))
    {
      uint64_t v417 = sub_10000588C(&qword_101638CF0);
      memcpy(v415, v416, *(void *)(*(void *)(v417 - 8) + 64));
    }
    else
    {
      v500(v415, v416, v412);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v413 + 56))(v415, 0, 1, v412);
    }
    a1 = v509;
    uint64_t v6 = v512;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v409 + 56))(v406, 0, 1, v408);
    uint64_t v411 = v385;
  }
  uint64_t v436 = v6[9];
  v437 = (char *)v378 + v436;
  int v438 = (char *)v379 + v436;
  uint64_t v439 = type metadata accessor for UUID();
  uint64_t v440 = *(void (**)(char *, char *, uint64_t))(*(void *)(v439 - 8) + 32);
  v440(v437, v438, v439);
  uint64_t v441 = type metadata accessor for BeaconIdentifier();
  v440(&v437[*(int *)(v441 + 20)], &v438[*(int *)(v441 + 20)], v439);
  v511((char *)v378 + v6[10], (char *)v379 + v6[10], v411);
  (*(void (**)(_WORD *, void, uint64_t, int *))(v501 + 56))(v378, 0, 1, v6);
  return a1;
}

uint64_t sub_10077FFAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10077FFC0);
}

uint64_t sub_10077FFC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_10163D030);
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_100780030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100780044);
}

uint64_t sub_100780044(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_10163D030);
  int v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for AttachedAccessoryEventsTransport()
{
  uint64_t result = qword_10164D450;
  if (!qword_10164D450) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_100780104()
{
  sub_100780198();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void sub_100780198()
{
  if (!qword_10164D460)
  {
    type metadata accessor for DeviceEvent(255);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_10164D460);
    }
  }
}

ValueMetadata *type metadata accessor for ObservationServiceClientTrampoline()
{
  return &type metadata for ObservationServiceClientTrampoline;
}

unint64_t sub_100780200()
{
  unint64_t result = qword_10164D4A8;
  if (!qword_10164D4A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164D4A8);
  }
  return result;
}

uint64_t sub_100780254(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1007802BC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unsigned char *storeEnumTagSinglePayload for AttachedAccessoryEventsTransport.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *unint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1007803E8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AttachedAccessoryEventsTransport.CodingKeys()
{
  return &type metadata for AttachedAccessoryEventsTransport.CodingKeys;
}

unint64_t sub_100780424()
{
  unint64_t result = qword_10164D4B8;
  if (!qword_10164D4B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164D4B8);
  }
  return result;
}

unint64_t sub_10078047C()
{
  unint64_t result = qword_10164D4C0;
  if (!qword_10164D4C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164D4C0);
  }
  return result;
}

unint64_t sub_1007804D4()
{
  unint64_t result = qword_10164D4C8;
  if (!qword_10164D4C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164D4C8);
  }
  return result;
}

uint64_t sub_100780528(uint64_t a1, uint64_t a2)
{
  if (a1 == 0xD000000000000011 && a2 == 0x8000000101406C20
    || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0xD000000000000011 && a2 == 0x8000000101406C40 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000012 && a2 == 0x8000000101406C60 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0xD000000000000015 && a2 == 0x8000000101406C80 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x8000000101406CA0 {
         || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  }
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000016 && a2 == 0x8000000101406CC0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v5) {
      return 5;
    }
    else {
      return 6;
    }
  }
}

uint64_t sub_100780834@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v48 = a2;
  uint64_t v3 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v3 - 8);
  char v5 = (char *)&v42 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_1016511E0);
  __chkstk_darwin(v6 - 8);
  uint64_t v45 = (uint64_t)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for WildModeAssociationRecord(0);
  uint64_t v47 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v42 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v42 - v13;
  __chkstk_darwin(v12);
  uint64_t v44 = (uint64_t)&v42 - v15;
  uint64_t v16 = sub_10000588C((uint64_t *)&unk_1016477E0);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v42 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for MACAddress();
  uint64_t v49 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v22 = [a1 address];
  static Data._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v23 = v19;
  uint64_t v24 = v49;
  MACAddress.init(data:type:)();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v18, 1, v23) == 1)
  {
    sub_10001DAB4((uint64_t)v18, (uint64_t *)&unk_1016477E0);
    uint64_t v25 = type metadata accessor for Date();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v48, 1, 1, v25);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v21, v18, v23);
    uint64_t v27 = sub_100AE35FC();
    uint64_t v28 = v27[2];
    uint64_t v43 = v23;
    if (v28)
    {
      uint64_t v29 = *(unsigned __int8 *)(v47 + 80);
      uint64_t v46 = v27;
      uint64_t v30 = (uint64_t)v27 + ((v29 + 32) & ~v29);
      uint64_t v31 = *(void *)(v47 + 72);
      do
      {
        sub_1007AFB78(v30, (uint64_t)v14, type metadata accessor for WildModeAssociationRecord);
        char v32 = static MACAddress.== infix(_:_:)();
        sub_1007AFB78((uint64_t)v14, (uint64_t)v11, type metadata accessor for WildModeAssociationRecord);
        if (v32)
        {
          sub_10001D074((uint64_t)&v11[*(int *)(v8 + 44)], (uint64_t)v5, (uint64_t *)&unk_10163AC90);
          sub_1007AFBFC((uint64_t)v11, type metadata accessor for WildModeAssociationRecord);
          uint64_t v33 = type metadata accessor for Date();
          int v34 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v33 - 8) + 48))(v5, 1, v33);
          sub_10001DAB4((uint64_t)v5, (uint64_t *)&unk_10163AC90);
          if (v34 != 1)
          {
            uint64_t v35 = v45;
            sub_1007B136C((uint64_t)v14, v45, type metadata accessor for WildModeAssociationRecord);
            uint64_t v36 = 0;
            uint64_t v37 = v48;
            goto LABEL_12;
          }
        }
        else
        {
          sub_1007AFBFC((uint64_t)v11, type metadata accessor for WildModeAssociationRecord);
        }
        sub_1007AFBFC((uint64_t)v14, type metadata accessor for WildModeAssociationRecord);
        v30 += v31;
        --v28;
      }
      while (v28);
      uint64_t v36 = 1;
      uint64_t v37 = v48;
      uint64_t v35 = v45;
    }
    else
    {
      uint64_t v36 = 1;
      uint64_t v37 = v48;
      uint64_t v35 = v45;
    }
LABEL_12:
    uint64_t v38 = v47;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v47 + 56))(v35, v36, 1, v8);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v49 + 8))(v21, v43);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v35, 1, v8) == 1)
    {
      sub_10001DAB4(v35, &qword_1016511E0);
      uint64_t v39 = type metadata accessor for Date();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v39 - 8) + 56))(v37, 1, 1, v39);
    }
    else
    {
      uint64_t v40 = v35;
      uint64_t v41 = v44;
      sub_1007B136C(v40, v44, type metadata accessor for WildModeAssociationRecord);
      sub_10001D074(v41 + *(int *)(v8 + 44), v37, (uint64_t *)&unk_10163AC90);
      return sub_1007AFBFC(v41, type metadata accessor for WildModeAssociationRecord);
    }
  }
}

Swift::Int sub_100780E24(uint64_t *a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4 = *(void *)(type metadata accessor for WildModeTrackingLocation(0) - 8);
  uint64_t v5 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v5 = a2(v5);
  }
  uint64_t v6 = *(void *)(v5 + 16);
  v8[0] = v5 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  v8[1] = v6;
  Swift::Int result = sub_1007955D8(v8);
  *a1 = v5;
  return result;
}

uint64_t sub_100780EDC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v46 = a1;
  uint64_t v1 = type metadata accessor for Calendar.SearchDirection();
  uint64_t v44 = *(void *)(v1 - 8);
  uint64_t v45 = v1;
  __chkstk_darwin(v1);
  uint64_t v43 = (char *)&v32 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = type metadata accessor for Calendar.RepeatedTimePolicy();
  uint64_t v36 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v41 = (char *)&v32 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = type metadata accessor for Calendar.MatchingPolicy();
  uint64_t v32 = *(void *)(v47 - 8);
  uint64_t v4 = v32;
  __chkstk_darwin(v47);
  uint64_t v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C(&qword_10164D848);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C(&qword_10164D850);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for DateComponents();
  uint64_t v39 = *(void *)(v13 - 8);
  uint64_t v40 = v13;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Date();
  uint64_t v37 = *(void *)(v16 - 8);
  uint64_t v38 = v16;
  __chkstk_darwin(v16);
  uint64_t v33 = (char *)&v32 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for Calendar();
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v34 = v18;
  uint64_t v35 = v19;
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Calendar.current.getter();
  Date.init()();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v12, 1, 1, v18);
  uint64_t v22 = type metadata accessor for TimeZone();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56))(v9, 1, 1, v22);
  DateComponents.init(calendar:timeZone:era:year:month:day:hour:minute:second:nanosecond:weekday:weekdayOrdinal:quarter:weekOfMonth:weekOfYear:yearForWeekOfYear:)();
  uint64_t v23 = v6;
  (*(void (**)(char *, void, uint64_t))(v4 + 104))(v6, enum case for Calendar.MatchingPolicy.nextTime(_:), v47);
  uint64_t v24 = v36;
  uint64_t v26 = v41;
  uint64_t v25 = v42;
  (*(void (**)(char *, void, uint64_t))(v36 + 104))(v41, enum case for Calendar.RepeatedTimePolicy.first(_:), v42);
  uint64_t v28 = v43;
  uint64_t v27 = v44;
  uint64_t v29 = v45;
  (*(void (**)(char *, void, uint64_t))(v44 + 104))(v43, enum case for Calendar.SearchDirection.forward(_:), v45);
  uint64_t v30 = v33;
  Calendar.nextDate(after:matching:matchingPolicy:repeatedTimePolicy:direction:)();
  (*(void (**)(char *, uint64_t))(v27 + 8))(v28, v29);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v25);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v23, v47);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v15, v40);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v30, v38);
  return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v21, v34);
}

uint64_t sub_1007814D4()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170E318);
  sub_100010324(v0, (uint64_t)qword_10170E318);
  return Logger.init(subsystem:category:)();
}

uint64_t sub_10078155C(char a1)
{
  switch(a1)
  {
    case 6:
      _StringGuts.grow(_:)(16);
      sub_1007AF7EC();
      uint64_t v3 = CustomStringConvertible.typeDescription.getter();
      swift_bridgeObjectRelease();
      uint64_t v11 = v3;
      uint64_t v1 = 0x7070416E6F6E2E20;
      unint64_t v2 = 0xEE0068736F50656CLL;
      break;
    case 5:
      sub_1007AF7EC();
      uint64_t v11 = CustomStringConvertible.typeDescription.getter();
      uint64_t v1 = 0x50656C7070612E20;
      unint64_t v2 = 0xEB0000000068736FLL;
      break;
    case 4:
      sub_1007AF7EC();
      uint64_t v11 = CustomStringConvertible.typeDescription.getter();
      uint64_t v1 = 0x776F6E6B6E752E20;
      unint64_t v2 = 0xE90000000000006ELL;
      break;
    default:
      _StringGuts.grow(_:)(27);
      sub_1007AF7EC();
      uint64_t v4 = CustomStringConvertible.typeDescription.getter();
      swift_bridgeObjectRelease();
      uint64_t v11 = v4;
      v5._object = (void *)0x8000000101407110;
      v5._uint64_t countAndFlagsBits = 0xD000000000000016;
      String.append(_:)(v5);
      unint64_t v6 = 0xE500000000000000;
      uint64_t v7 = 0x656C707061;
      switch(v8)
      {
        case 1:
          unint64_t v6 = 0xE600000000000000;
          uint64_t v7 = 0x6E6169727564;
          break;
        case 2:
          unint64_t v6 = 0xE700000000000000;
          uint64_t v7 = 0x6579656B776168;
          break;
        case 3:
          unint64_t v6 = 0xE400000000000000;
          uint64_t v7 = 1701602664;
          break;
        default:
          break;
      }
      unint64_t v9 = v6;
      String.append(_:)(*(Swift::String *)&v7);
      swift_bridgeObjectRelease();
      uint64_t v1 = 41;
      unint64_t v2 = 0xE100000000000000;
      break;
  }
  String.append(_:)(*(Swift::String *)&v1);
  return v11;
}

uint64_t sub_1007817AC()
{
  return sub_10078155C(*v0);
}

uint64_t sub_1007817B4(void *a1)
{
  type metadata accessor for TrackingAvoidanceError(0);
  sub_100796E74(&qword_101638410, type metadata accessor for TrackingAvoidanceError);
  _BridgedStoredNSError.code.getter();
  uint64_t result = 2;
  switch(v8)
  {
    case 1:
    case 2:
    case 3:
    case 4:
    case 6:
    case 9:
    case 10:
    case 12:
    case 13:
      goto LABEL_2;
    case 5:
      uint64_t result = 1;
      break;
    case 7:
      return result;
    case 8:
      uint64_t result = 4;
      break;
    case 11:
      uint64_t result = 3;
      break;
    default:
      if (qword_101636CA8 != -1) {
        swift_once();
      }
      uint64_t v3 = type metadata accessor for Logger();
      sub_100010324(v3, (uint64_t)qword_10170E318);
      id v4 = a1;
      Swift::String v5 = Logger.logObject.getter();
      os_log_type_t v6 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v5, v6))
      {
        uint64_t v7 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v7 = 134217984;
        _BridgedStoredNSError.code.getter();
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        _os_log_impl((void *)&_mh_execute_header, v5, v6, "Unexpected TrackingAvoidanceError %ld!", v7, 0xCu);
        swift_slowDealloc();
      }
      else
      {
      }
LABEL_2:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t SPUnauthorizedTrackingObservationType.description.getter(uint64_t a1)
{
  if (!a1) {
    return 0x746C75616665642ELL;
  }
  if (a1 == 1) {
    return 0x4D6E4F706565622ELL;
  }
  type metadata accessor for TrackingObservationType(0);
  uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
  __break(1u);
  return result;
}

uint64_t sub_100781A84()
{
  if (!*v0) {
    return 0x746C75616665642ELL;
  }
  if (*v0 == 1) {
    return 0x4D6E4F706565622ELL;
  }
  uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
  __break(1u);
  return result;
}

uint64_t SPUnauthorizedTrackingObservationAction.description.getter()
{
  return 0x6E776F6E6B6E752ELL;
}

uint64_t sub_100781BD4()
{
  uint64_t result = 0x6465676174732ELL;
  switch(*v0)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = 0x796669746F6E2ELL;
      break;
    case 2:
      uint64_t result = 0x6574616470752ELL;
      break;
    case 3:
      uint64_t result = 0x65676174736E752ELL;
      break;
    case 4:
      uint64_t result = 0x617264687469772ELL;
      break;
    default:
      uint64_t result = 0x6E776F6E6B6E752ELL;
      break;
  }
  return result;
}

uint64_t sub_100781CA8()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10164D4D0);
  uint64_t v1 = sub_100010324(v0, (uint64_t)qword_10164D4D0);
  if (qword_101636CA8 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100010324(v0, (uint64_t)qword_10170E318);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

void *sub_100781D70(uint64_t a1, uint64_t a2)
{
  v13[0] = a2;
  uint64_t v4 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v4);
  uint64_t v5 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v5 - 8);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)v13 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:), v6);
  static DispatchQoS.unspecified.getter();
  v13[1] = _swiftEmptyArrayStorage;
  sub_100796E74((unint64_t *)&qword_101638CC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  sub_10000588C((uint64_t *)&unk_1016376F0);
  sub_100062734((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v10 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  v2[2] = a1;
  v2[3] = v10;
  uint64_t v11 = v13[0];
  v2[4] = &_swiftEmptySetSingleton;
  v2[5] = v11;
  return v2;
}

void sub_100781FF0(void *a1, unint64_t a2, void (*a3)(uint64_t, void *))
{
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2
    && (unint64_t v43 = a2,
        swift_errorRetain(),
        sub_10000588C(&qword_101638D40),
        type metadata accessor for TrackingAvoidanceError(0),
        (swift_dynamicCast() & 1) != 0))
  {
    uint64_t v10 = v42;
    uint64_t v11 = sub_1007817B4(v42);
    if (v12)
    {
      id v31 = [a1 identifier];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)();

      id v32 = objc_allocWithZone((Class)SPTrackingAvoidanceResult);
      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      sub_10001D4B0(0, &qword_10164D840);
      Class v34 = Array._bridgeToObjectiveC()().super.isa;
      id v35 = [v32 initWithIdentifier:isa type:5 policies:v34];

      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      sub_10000588C(&qword_10166BD20);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = xmmword_101347EF0;
      *(void *)(inited + 32) = v35;
      unint64_t v43 = inited;
      specialized Array._endMutation()();
      unint64_t v37 = v43;
      id v38 = v35;
      uint64_t v39 = sub_101159C48(v37);
      swift_bridgeObjectRelease();
      id v40 = v10;
      a3(v39, v10);

      swift_bridgeObjectRelease();
      return;
    }
    uint64_t v13 = v11;
    id v14 = [a1 identifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    id v15 = objc_allocWithZone((Class)SPTrackingAvoidanceResult);
    Class v16 = UUID._bridgeToObjectiveC()().super.isa;
    sub_10001D4B0(0, &qword_10164D840);
    Class v17 = Array._bridgeToObjectiveC()().super.isa;
    id v18 = [v15 initWithIdentifier:v16 type:v13 policies:v17];

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    sub_10000588C(&qword_10166BD20);
    uint64_t v19 = swift_initStackObject();
    *(_OWORD *)(v19 + 16) = xmmword_101347EF0;
    *(void *)(v19 + 32) = v18;
    unint64_t v43 = v19;
    specialized Array._endMutation()();
    unint64_t v20 = v43;
    id v21 = v18;
    uint64_t v22 = sub_101159C48(v20);
    swift_bridgeObjectRelease();
    a3(v22, 0);
  }
  else
  {
    id v23 = [a1 identifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)();

    id v24 = objc_allocWithZone((Class)SPTrackingAvoidanceResult);
    Class v25 = UUID._bridgeToObjectiveC()().super.isa;
    sub_10001D4B0(0, &qword_10164D840);
    Class v26 = Array._bridgeToObjectiveC()().super.isa;
    id v27 = [v24 initWithIdentifier:v25 type:0 policies:v26];

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    sub_10000588C(&qword_10166BD20);
    uint64_t v28 = swift_initStackObject();
    *(_OWORD *)(v28 + 16) = xmmword_101347EF0;
    *(void *)(v28 + 32) = v27;
    unint64_t v43 = v28;
    specialized Array._endMutation()();
    unint64_t v29 = v43;
    id v21 = v27;
    uint64_t v30 = sub_101159C48(v29);
    swift_bridgeObjectRelease();
    a3(v30, (void *)a2);
  }

  swift_bridgeObjectRelease();
}

uint64_t sub_100782478@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v280 = a2;
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_101653D50);
  __chkstk_darwin(v4 - 8);
  uint64_t v263 = (uint64_t)&v255 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v270 = *(void *)(v6 - 8);
  uint64_t v271 = v6;
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v260 = (uint64_t)&v255 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v261 = (uint64_t)&v255 - v10;
  __chkstk_darwin(v9);
  uint64_t v262 = (uint64_t)&v255 - v11;
  uint64_t v12 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v12 - 8);
  uint64_t v264 = (uint64_t)&v255 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000588C(&qword_101657910);
  __chkstk_darwin(v14 - 8);
  uint64_t v267 = (uint64_t)&v255 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v268 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  uint64_t v266 = *(void *)(v268 - 8);
  __chkstk_darwin(v268);
  uint64_t v265 = (uint64_t)&v255 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000588C((uint64_t *)&unk_1016477E0);
  uint64_t v18 = __chkstk_darwin(v17 - 8);
  int v275 = (char *)&v255 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v259 = (char *)&v255 - v21;
  __chkstk_darwin(v20);
  uint64_t v273 = (char *)&v255 - v22;
  uint64_t v274 = type metadata accessor for MACAddress();
  os_log_t v276 = *(os_log_t *)(v274 - 8);
  uint64_t v23 = __chkstk_darwin(v274);
  *(void *)&long long v277 = (char *)&v255 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v23);
  uint64_t v272 = (char *)&v255 - v25;
  uint64_t v26 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v26 - 8);
  uint64_t v28 = (char *)&v255 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = type metadata accessor for Date();
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v33 = (char *)&v255 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v31);
  id v35 = (char *)&v255 - v34;
  id v36 = [a1 trackingIdentifier];
  uint64_t v269 = v2;
  sub_100780834(v36, (uint64_t)v28);

  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29) == 1)
  {
    sub_10001DAB4((uint64_t)v28, (uint64_t *)&unk_10163AC90);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v35, v28, v29);
    static Date.trustedNow.getter((uint64_t)v33);
    char v37 = static Date.> infix(_:_:)();
    id v38 = *(void (**)(char *, uint64_t))(v30 + 8);
    v38(v33, v29);
    if (v37)
    {
      *(void *)&long long v277 = v38;
      uint64_t v278 = v35;
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v39 = swift_allocObject();
      long long v279 = xmmword_101342130;
      *(_OWORD *)(v39 + 16) = xmmword_101342130;
      id v40 = [a1 trackingIdentifier];
      id v41 = [v40 advertisementData];

      uint64_t v42 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v44 = v43;

      uint64_t v45 = Data.hexString.getter();
      uint64_t v47 = v46;
      sub_10001CFB8(v42, v44);
      *(void *)(v39 + 56) = &type metadata for String;
      unint64_t v48 = sub_10000B4CC();
      *(void *)(v39 + 64) = v48;
      *(void *)(v39 + 32) = v45;
      *(void *)(v39 + 40) = v47;
      uint64_t v49 = String.init(format:_:)();
      uint64_t v51 = v50;
      static os_log_type_t.default.getter();
      if (qword_1016372F0 != -1) {
        swift_once();
      }
      uint64_t v52 = swift_allocObject();
      *(_OWORD *)(v52 + 16) = v279;
      *(void *)(v52 + 56) = &type metadata for String;
      *(void *)(v52 + 64) = v48;
      *(void *)(v52 + 32) = v49;
      *(void *)(v52 + 40) = v51;
      swift_bridgeObjectRetain();
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      type metadata accessor for TrackingAvoidanceError(0);
      uint64_t v281 = 7;
      sub_10000588C((uint64_t *)&unk_101637F00);
      uint64_t v53 = swift_allocObject();
      *(_OWORD *)(v53 + 16) = v279;
      *(void *)(v53 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(v53 + 40) = v54;
      *(void *)(v53 + 72) = &type metadata for String;
      *(void *)(v53 + 48) = v49;
      *(void *)(v53 + 56) = v51;
      sub_10092CEEC(v53);
      sub_100796E74(&qword_101638410, type metadata accessor for TrackingAvoidanceError);
      _BridgedStoredNSError.init(_:userInfo:)();
      ((void (*)(char *, uint64_t))v277)(v278, v29);
      goto LABEL_139;
    }
    v38(v35, v29);
  }
  uint64_t v55 = (SEL *)&selRef_fetchEncryptedPayloadForUnknownBeacon_completion_;
  id v56 = [a1 observedLocations];
  sub_10001D4B0(0, &qword_101656690);
  unint64_t v57 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v57 >> 62) {
    goto LABEL_135;
  }
  uint64_t v58 = *(void *)((v57 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v58)
  {
LABEL_136:
    swift_bridgeObjectRelease();
    static os_log_type_t.error.getter();
    if (qword_1016372F0 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    type metadata accessor for TrackingAvoidanceError(0);
    uint64_t v281 = 4;
    sub_10000588C((uint64_t *)&unk_101637F00);
    uint64_t v252 = swift_allocObject();
    *(_OWORD *)(v252 + 16) = xmmword_101342130;
    *(void *)(v252 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(v252 + 40) = v253;
    *(void *)(v252 + 72) = &type metadata for String;
    *(void *)(v252 + 48) = 0xD000000000000027;
    *(void *)(v252 + 56) = 0x80000001014070A0;
    sub_10092CEEC(v252);
    sub_100796E74(&qword_101638410, type metadata accessor for TrackingAvoidanceError);
    _BridgedStoredNSError.init(_:userInfo:)();
    goto LABEL_139;
  }
LABEL_10:
  unint64_t v59 = v58 - 1;
  if (__OFSUB__(v58, 1))
  {
    __break(1u);
    goto LABEL_142;
  }
  if ((v57 & 0xC000000000000001) != 0)
  {
LABEL_142:
    id v60 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_15;
  }
  if ((v59 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_144;
  }
  if (v59 >= *(void *)((v57 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
    goto LABEL_147;
  }
  id v60 = *(id *)(v57 + 8 * v59 + 32);
LABEL_15:
  id v258 = v60;
  swift_bridgeObjectRelease();
  id v61 = [a1 v55[482]];
  unint64_t v57 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v57 >> 62))
  {
    uint64_t v58 = *(void *)((v57 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    *(void *)&long long v279 = a1;
    if (!v58) {
      goto LABEL_25;
    }
    goto LABEL_17;
  }
LABEL_144:
  swift_bridgeObjectRetain();
  uint64_t v58 = _CocoaArrayWrapper.endIndex.getter();
  *(void *)&long long v279 = a1;
  if (!v58) {
    goto LABEL_25;
  }
LABEL_17:
  uint64_t v278 = (char *)(v57 & 0xC000000000000001);
  if ((v57 & 0xC000000000000001) != 0)
  {
LABEL_147:
    id v62 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_19;
  }
  id v62 = *(id *)(v57 + 32);
LABEL_19:
  uint64_t v63 = v62;
  char v64 = sub_100FC042C();

  if (v64)
  {
LABEL_20:
    swift_bridgeObjectRelease_n();
    goto LABEL_21;
  }
  if (v58 == 1)
  {
LABEL_25:
    swift_bridgeObjectRelease_n();
    if (qword_101636CD8 != -1) {
      swift_once();
    }
    uint64_t v69 = 0;
    OS_dispatch_queue.sync<A>(execute:)();
    char v70 = sub_1010ABC88(v282[0]);
    swift_bridgeObjectRelease();
    if ((v70 & 1) == 0)
    {
      if (qword_1016371D8 != -1) {
        swift_once();
      }
      v282[0] = 0x7365547265646E75;
      v282[1] = 0xE900000000000074;
      SynchronousCache.cachedValue<A>(key:computeBlock:)();
      swift_bridgeObjectRelease();
      if (v281 != 1)
      {
        static os_log_type_t.error.getter();
        if (qword_1016372F0 != -1) {
          swift_once();
        }
        os_log(_:dso:log:_:_:)();
        type metadata accessor for TrackingAvoidanceError(0);
        uint64_t v281 = 5;
        sub_10000588C((uint64_t *)&unk_101637F00);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_101342130;
        *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
        *(void *)(inited + 40) = v105;
        *(void *)(inited + 72) = &type metadata for String;
        unint64_t v67 = 0xD000000000000029;
        uint64_t v68 = "UT notifications are disabled by settings";
        goto LABEL_57;
      }
    }
    id v71 = [a1 trackingIdentifier];
    id v72 = [v71 data];

    uint64_t v73 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v75 = v74;

    if (qword_101636CB0 != -1) {
      swift_once();
    }
    uint64_t v76 = type metadata accessor for Logger();
    uint64_t v77 = sub_100010324(v76, (uint64_t)qword_10164D4D0);
    unint64_t v78 = v75 >> 62;
    sub_1000361E0(v73, v75);
    sub_1000361E0(v73, v75);
    uint64_t v278 = (char *)v77;
    uint64_t v79 = Logger.logObject.getter();
    os_log_type_t v80 = static os_log_type_t.default.getter();
    BOOL v81 = os_log_type_enabled(v79, v80);
    unint64_t v256 = v75 >> 62;
    uint64_t v257 = v73;
    uint64_t v255 = 0;
    if (!v81)
    {
      sub_10001CFB8(v73, v75);
      sub_10001CFB8(v73, v75);

      unint64_t v85 = v75;
      goto LABEL_62;
    }
    unint64_t v82 = v75;
    uint64_t v83 = swift_slowAlloc();
    v282[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v83 = 134218242;
    uint64_t v84 = 0;
    switch((int)v78)
    {
      case 1:
        LODWORD(v84) = HIDWORD(v73) - v73;
        if (!__OFSUB__(HIDWORD(v73), v73))
        {
          uint64_t v84 = (int)v84;
LABEL_61:
          uint64_t v281 = v84;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v83 + 12) = 2082;
          uint64_t v109 = Data.hexString.getter();
          uint64_t v281 = sub_1008FA0F0(v109, v110, v282);
          unint64_t v85 = v82;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          uint64_t v73 = v257;
          swift_bridgeObjectRelease();
          sub_10001CFB8(v73, v82);
          sub_10001CFB8(v73, v82);
          _os_log_impl((void *)&_mh_execute_header, v79, v80, "Decoding advertisement from advertisementData[%ld]: %{public}s", (uint8_t *)v83, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          a1 = (void *)v279;
LABEL_62:
          id v111 = [a1 trackingIdentifier:v255];
          unsigned int v112 = [v111 isPosh];

          id v113 = [a1 trackingIdentifier];
          unsigned int v114 = [v113 networkID];

          id v115 = [a1 trackingIdentifier];
          unsigned int v116 = [v115 status];

          if (v114 == 1) {
            char v117 = 5;
          }
          else {
            char v117 = 6;
          }
          if (v112) {
            char v118 = v117;
          }
          else {
            char v118 = (v116 >> 4) & 3;
          }
          uint64_t v119 = Logger.logObject.getter();
          os_log_type_t v120 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v119, v120))
          {
            uint64_t v121 = (uint8_t *)swift_slowAlloc();
            v282[0] = swift_slowAlloc();
            *(_DWORD *)uint64_t v121 = 136446210;
            uint64_t v122 = sub_10078155C(v118);
            uint64_t v281 = sub_1008FA0F0(v122, v123, v282);
            uint64_t v73 = v257;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            _os_log_impl((void *)&_mh_execute_header, v119, v120, "UnauthorizedTrackingAdvertisementType: %{public}s", v121, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }

          uint64_t v124 = v275;
          os_log_t v125 = v276;
          uint64_t v126 = v277;
          int v127 = (void *)v279;
          if (v118 == 4)
          {
            uint64_t v129 = (id)v279;
            uint64_t v130 = Logger.logObject.getter();
            os_log_type_t v131 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v130, v131))
            {
              uint64_t v132 = swift_slowAlloc();
              *(_DWORD *)uint64_t v132 = 67109632;
              id v133 = [v129 trackingIdentifier];
              unsigned int v134 = [v133 isPosh];

              LODWORD(v282[0]) = v134;
              uint64_t v278 = (char *)v85;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();

              *(_WORD *)(v132 + 8) = 256;
              id v135 = [v129 trackingIdentifier];
              unsigned __int8 v136 = [v135 networkID];

              LOBYTE(v282[0]) = v136;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();

              *(_WORD *)(v132 + 11) = 256;
              uint64_t v73 = v257;
              id v137 = [v129 trackingIdentifier];
              unsigned __int8 v138 = [v137 status];

              LOBYTE(v282[0]) = v138;
              unint64_t v85 = (unint64_t)v278;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();

              _os_log_impl((void *)&_mh_execute_header, v130, v131, "Unknown advertisement type. isPosh: %{BOOL}d networkID: %hhu status: %hhu", (uint8_t *)v132, 0xEu);
              swift_slowDealloc();
            }
            else
            {

              uint64_t v130 = v129;
            }

            type metadata accessor for TrackingAvoidanceError(0);
            uint64_t v281 = 6;
            sub_10000588C((uint64_t *)&unk_101637F00);
            uint64_t v152 = swift_initStackObject();
            *(_OWORD *)(v152 + 16) = xmmword_101342130;
            *(void *)(v152 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
            *(void *)(v152 + 40) = v153;
            *(void *)(v152 + 72) = &type metadata for String;
            uint64_t v154 = "Unknown advertisement type";
            goto LABEL_112;
          }
          if (v118 != 6)
          {
            if (v118 == 5)
            {
              switch((int)v256)
              {
                case 1:
                  if (!__OFSUB__(HIDWORD(v73), v73))
                  {
                    uint64_t v128 = HIDWORD(v73) - (int)v73;
LABEL_90:
                    sub_1000361E0(v73, v85);
LABEL_91:
                    if (v128 == 28)
                    {
                      LODWORD(v277) = 4;
                      goto LABEL_105;
                    }
LABEL_93:
                    sub_10001CFB8(v73, v85);
                    uint64_t v167 = Logger.logObject.getter();
                    os_log_type_t v168 = static os_log_type_t.error.getter();
                    if (os_log_type_enabled(v167, v168))
                    {
                      uint64_t v169 = (uint8_t *)swift_slowAlloc();
                      *(_WORD *)uint64_t v169 = 0;
                      _os_log_impl((void *)&_mh_execute_header, v167, v168, "received an advertisement of unexpected length or format", v169, 2u);
                      swift_slowDealloc();
                    }
LABEL_111:

                    type metadata accessor for TrackingAvoidanceError(0);
                    uint64_t v281 = 3;
                    sub_10000588C((uint64_t *)&unk_101637F00);
                    uint64_t v152 = swift_initStackObject();
                    *(_OWORD *)(v152 + 16) = xmmword_101342130;
                    *(void *)(v152 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
                    *(void *)(v152 + 40) = v191;
                    *(void *)(v152 + 72) = &type metadata for String;
                    uint64_t v154 = "Advertisement is malformed";
LABEL_112:
                    *(void *)(v152 + 48) = 0xD00000000000001ALL;
                    *(void *)(v152 + 56) = (unint64_t)(v154 - 32) | 0x8000000000000000;
                    sub_10092CEEC(v152);
                    sub_100796E74(&qword_101638410, type metadata accessor for TrackingAvoidanceError);
                    _BridgedStoredNSError.init(_:userInfo:)();
                    sub_10001CFB8(v73, v85);
                    goto LABEL_113;
                  }
                  __break(1u);
LABEL_152:
                  __break(1u);
LABEL_153:
                  __break(1u);
LABEL_154:
                  __break(1u);
                  break;
                case 2:
                  uint64_t v166 = *(void *)(v73 + 16);
                  uint64_t v165 = *(void *)(v73 + 24);
                  uint64_t v128 = v165 - v166;
                  if (!__OFSUB__(v165, v166)) {
                    goto LABEL_90;
                  }
                  goto LABEL_152;
                case 3:
                  goto LABEL_93;
                default:
                  uint64_t v128 = BYTE6(v85);
                  goto LABEL_91;
              }
LABEL_155:
              swift_once();
LABEL_123:
              os_log(_:dso:log:_:_:)();
              type metadata accessor for TrackingAvoidanceError(0);
              uint64_t v281 = 6;
              sub_10000588C((uint64_t *)&unk_101637F00);
              uint64_t v210 = swift_initStackObject();
              *(_OWORD *)(v210 + 16) = xmmword_101342130;
              *(void *)(v210 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
              *(void *)(v210 + 40) = v211;
              *(void *)(v210 + 72) = &type metadata for String;
              *(void *)(v210 + 48) = 0xD00000000000001DLL;
              *(void *)(v210 + 56) = 0x80000001014078D0;
              sub_10092CEEC(v210);
              sub_100796E74(&qword_101638410, type metadata accessor for TrackingAvoidanceError);
              _BridgedStoredNSError.init(_:userInfo:)();
              uint64_t v212 = v257;
              sub_10001CFB8(v257, v85);
              sub_10001CFB8(v212, v85);

              sub_10001CFB8(v212, v85);
              goto LABEL_139;
            }
            switch((int)v256)
            {
              case 1:
                if (__OFSUB__(HIDWORD(v73), v73)) {
                  goto LABEL_153;
                }
                uint64_t v151 = HIDWORD(v73) - (int)v73;
LABEL_101:
                sub_1000361E0(v73, v85);
LABEL_102:
                if (v151 != 28)
                {
LABEL_109:
                  sub_10001CFB8(v73, v85);
                  uint64_t v167 = Logger.logObject.getter();
                  os_log_type_t v189 = static os_log_type_t.error.getter();
                  if (os_log_type_enabled(v167, v189))
                  {
                    uint64_t v190 = (uint8_t *)swift_slowAlloc();
                    *(_WORD *)uint64_t v190 = 0;
                    _os_log_impl((void *)&_mh_execute_header, v167, v189, "received an advertisement of unexpected length or format", v190, 2u);
                    swift_slowDealloc();
                  }
                  goto LABEL_111;
                }
                sub_1000361E0(v73, v85);
                id v174 = [v127 trackingIdentifier];
                unsigned int v175 = [v174 status];

                if (((v175 >> 4) & 3) - 1 >= 3)
                {
                  static os_log_type_t.error.getter();
                  if (qword_1016372F0 != -1) {
                    goto LABEL_155;
                  }
                  goto LABEL_123;
                }
                LODWORD(v277) = (v175 >> 4) & 3;
                sub_10001CFB8(v73, v85);
LABEL_105:
                uint64_t v176 = v257;
                sub_1000361E0(v257, v85);
                type metadata accessor for BeaconKeyManager(0);
                OSAllocatedUnfairLock.callAsFunction<A>(_:)();
                uint64_t v177 = v267;
                sub_1012E41F8(v267);
                uint64_t v178 = v177;
                swift_release();
                uint64_t v179 = v177;
                uint64_t v69 = v268;
                if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v266 + 48))(v179, 1, v268) == 1)
                {
                  sub_10001DAB4(v178, &qword_101657910);
                  sub_1000361E0(v176, v85);
                  uint64_t v180 = static MACAddress.length.getter();
                  sub_100435A9C(v180, v176, v85, v282);
                  MACAddress.init(data:type:)();
                  uint64_t v181 = v274;
                  if (((unsigned int (*)(char *, uint64_t, uint64_t))v125[6].isa)(v124, 1, v274) != 1)
                  {
                    os_log_t v182 = v125;
                    uint64_t v183 = (int *)sub_10000588C(&qword_10164D7C8);
                    uint64_t v184 = v280;
                    uint64_t v185 = (void *)((char *)v280 + v183[12]);
                    uint64_t v186 = (char *)v280 + v183[16];
                    *(void *)&long long v279 = v183[20];
                    uint64_t v187 = v183[24];
                    ((void (*)(void *, char *, uint64_t))v182[4].isa)(v280, v124, v181);
                    sub_10001CFB8(v176, v85);
                    sub_10001CFB8(v176, v85);
                    *uint64_t v185 = v176;
                    v185[1] = v85;
                    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v270 + 56))(v186, 1, 1, v271);
                    goto LABEL_108;
                  }
                  __break(1u);
LABEL_157:
                  __break(1u);
                  JUMPOUT(0x100785024);
                }
                uint64_t v278 = (char *)v85;
                uint64_t v73 = v265;
                sub_1007B136C(v178, v265, type metadata accessor for BeaconKeyManager.IndexInformation);
                static os_log_type_t.default.getter();
                if (qword_1016372F0 == -1) {
                  goto LABEL_115;
                }
                goto LABEL_150;
              case 2:
                uint64_t v173 = *(void *)(v73 + 16);
                uint64_t v172 = *(void *)(v73 + 24);
                uint64_t v151 = v172 - v173;
                if (!__OFSUB__(v172, v173)) {
                  goto LABEL_101;
                }
                goto LABEL_154;
              case 3:
                goto LABEL_109;
              default:
                uint64_t v151 = BYTE6(v85);
                goto LABEL_102;
            }
          }
          id v139 = [(id)v279 trackingIdentifier];
          id v140 = [v139 address];

          uint64_t v141 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v143 = v142;

          sub_1000361E0(v141, v143);
          uint64_t v144 = (uint64_t)v273;
          MACAddress.init(data:type:)();
          uint64_t v145 = v274;
          if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v125[6].isa)(v144, 1, v274) == 1)
          {
            sub_10001DAB4(v144, (uint64_t *)&unk_1016477E0);
            sub_1000361E0(v141, v143);
            sub_1000361E0(v141, v143);
            uint64_t v146 = Logger.logObject.getter();
            os_log_type_t v147 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v146, v147))
            {
              uint64_t v278 = (char *)v85;
              uint64_t v148 = (uint8_t *)swift_slowAlloc();
              v282[0] = swift_slowAlloc();
              *(_DWORD *)uint64_t v148 = 136446210;
              uint64_t v149 = Data.hexString.getter();
              uint64_t v281 = sub_1008FA0F0(v149, v150, v282);
              unint64_t v85 = (unint64_t)v278;
              UnsafeMutableRawBufferPointer.copyMemory(from:)();
              uint64_t v73 = v257;
              swift_bridgeObjectRelease();
              sub_10001CFB8(v141, v143);
              sub_10001CFB8(v141, v143);
              _os_log_impl((void *)&_mh_execute_header, v146, v147, "Invalid MAC address %{public}s", v148, 0xCu);
              swift_arrayDestroy();
              swift_slowDealloc();
              swift_slowDealloc();
            }
            else
            {
              sub_10001CFB8(v141, v143);
              sub_10001CFB8(v141, v143);
            }

            type metadata accessor for TrackingAvoidanceError(0);
            uint64_t v281 = 3;
            sub_10000588C((uint64_t *)&unk_101637F00);
            uint64_t v170 = swift_initStackObject();
            *(_OWORD *)(v170 + 16) = xmmword_101342130;
            *(void *)(v170 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
            *(void *)(v170 + 40) = v171;
            *(void *)(v170 + 72) = &type metadata for String;
            *(void *)(v170 + 48) = 0xD00000000000001FLL;
            *(void *)(v170 + 56) = 0x8000000101406F20;
            sub_10092CEEC(v170);
            sub_100796E74(&qword_101638410, type metadata accessor for TrackingAvoidanceError);
            _BridgedStoredNSError.init(_:userInfo:)();
            sub_10001CFB8(v73, v85);

            sub_10001CFB8(v141, v143);
            goto LABEL_139;
          }
          uint64_t v155 = v144;
          uint64_t v156 = v272;
          *&long long v279 = v125[4];
          ((void (*)(char *, uint64_t, uint64_t))v279)(v272, v155, v145);
          ((void (*)(uint64_t, char *, uint64_t))v125[2].isa)(v126, v156, v145);
          uint64_t v157 = Logger.logObject.getter();
          os_log_type_t v158 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v157, v158))
          {
            os_log_t v276 = v157;
            int v159 = (uint8_t *)swift_slowAlloc();
            int v275 = (char *)swift_slowAlloc();
            v282[0] = (uint64_t)v275;
            uint64_t v278 = (char *)v85;
            *(_DWORD *)int v159 = 136446210;
            uint64_t v273 = (char *)(v159 + 4);
            sub_100796E74((unint64_t *)&qword_101649EE0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
            uint64_t v160 = dispatch thunk of CustomStringConvertible.description.getter();
            uint64_t v281 = sub_1008FA0F0(v160, v161, v282);
            uint64_t v162 = v145;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            ((void (*)(void, uint64_t))v125[1].isa)(v277, v145);
            os_log_t v163 = v276;
            _os_log_impl((void *)&_mh_execute_header, v276, v158, "Posh address: %{public}s", v159, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();

            sub_10001CFB8(v141, v143);
            sub_10001CFB8(v257, (unint64_t)v278);
          }
          else
          {
            sub_10001CFB8(v257, v85);
            sub_10001CFB8(v141, v143);
            uint64_t v162 = v145;
            ((void (*)(uint64_t, uint64_t))v125[1].isa)(v126, v145);
          }
          char v206 = (int *)sub_10000588C(&qword_10164D7C8);
          uint64_t v207 = v206[12];
          uint64_t v184 = v280;
          uint64_t v208 = (char *)v280 + v206[16];
          uint64_t v209 = v206[20];
          uint64_t v187 = v206[24];
          ((void (*)(void *, char *, uint64_t))v279)(v280, v272, v162);
          *(_OWORD *)((char *)v184 + v207) = xmmword_101364E30;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v270 + 56))(v208, 1, 1, v271);
          *(void *)((char *)v184 + v209) = v258;
          char v188 = 4;
LABEL_121:
          *((unsigned char *)v184 + v187) = v188;
          sub_10000588C(&qword_10164D7D0);
          return swift_storeEnumTagMultiPayload();
        }
        __break(1u);
LABEL_149:
        __break(1u);
LABEL_150:
        swift_once();
LABEL_115:
        uint64_t v192 = sub_10000588C((uint64_t *)&unk_10163AD00);
        uint64_t v193 = swift_allocObject();
        *(_OWORD *)(v193 + 16) = xmmword_101347BA0;
        uint64_t v194 = UUID.uuidString.getter();
        uint64_t v196 = v195;
        *(void *)(v193 + 56) = &type metadata for String;
        int v275 = (char *)sub_10000B4CC();
        *(void *)(v193 + 64) = v275;
        *(void *)(v193 + 32) = v194;
        *(void *)(v193 + 40) = v196;
        sub_10001CD44((void *)(v73 + *(int *)(v69 + 20)), *(void *)(v73 + *(int *)(v69 + 20) + 24));
        *(void *)(v193 + 96) = &type metadata for UInt64;
        *(void *)(v193 + 104) = &protocol witness table for UInt64;
        dispatch thunk of RawRepresentable.rawValue.getter();
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        uint64_t v197 = v264;
        sub_100ACD178(v264);
        uint64_t v198 = type metadata accessor for OwnedBeaconRecord();
        LODWORD(v194) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v198 - 8) + 48))(v197, 1, v198);
        sub_10001DAB4(v197, &qword_10163B9F0);
        if (v194 != 1)
        {
          static os_log_type_t.default.getter();
          os_log(_:dso:log:_:_:)();
          uint64_t v213 = swift_allocObject();
          long long v277 = xmmword_101342130;
          *(_OWORD *)(v213 + 16) = xmmword_101342130;
          id v214 = [(id)v279 trackingIdentifier];
          id v215 = [v214 advertisementData];

          uint64_t v216 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
          unint64_t v218 = v217;

          uint64_t v219 = Data.hexString.getter();
          uint64_t v221 = v220;
          sub_10001CFB8(v216, v218);
          int v222 = v275;
          *(void *)(v213 + 56) = &type metadata for String;
          *(void *)(v213 + 64) = v222;
          *(void *)(v213 + 32) = v219;
          *(void *)(v213 + 40) = v221;
          uint64_t v223 = String.init(format:_:)();
          uint64_t v225 = v224;
          type metadata accessor for TrackingAvoidanceError(0);
          uint64_t v281 = 8;
          sub_10000588C((uint64_t *)&unk_101637F00);
          uint64_t v226 = swift_initStackObject();
          *(_OWORD *)(v226 + 16) = v277;
          *(void *)(v226 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
          *(void *)(v226 + 40) = v227;
          *(void *)(v226 + 72) = &type metadata for String;
          *(void *)(v226 + 48) = v223;
          *(void *)(v226 + 56) = v225;
          sub_10092CEEC(v226);
          sub_100796E74(&qword_101638410, type metadata accessor for TrackingAvoidanceError);
          _BridgedStoredNSError.init(_:userInfo:)();
          uint64_t v228 = v257;
          unint64_t v229 = (unint64_t)v278;
          sub_10001CFB8(v257, (unint64_t)v278);
          sub_10001CFB8(v228, v229);

          sub_10001CFB8(v228, v229);
          sub_1007AFBFC(v73, type metadata accessor for BeaconKeyManager.IndexInformation);
          goto LABEL_139;
        }
        uint64_t v199 = (char *)v192;
        int v200 = v275;
        uint64_t v201 = v263;
        sub_100ACEADC(v73, v263);
        uint64_t v202 = v271;
        int v203 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v270 + 48))(v201, 1, v271);
        unint64_t v204 = (unint64_t)v278;
        if (v203 == 1)
        {
          sub_10001DAB4(v201, (uint64_t *)&unk_101653D50);
          goto LABEL_118;
        }
        uint64_t v230 = v262;
        sub_1007B136C(v201, v262, type metadata accessor for SharedBeaconRecord);
        int v231 = *(unsigned __int8 *)(v230 + *(int *)(v202 + 64));
        uint64_t v232 = v261;
        sub_1007AFB78(v230, v261, type metadata accessor for SharedBeaconRecord);
        if (v231 == 1)
        {
          sub_1007AFBFC(v232, type metadata accessor for SharedBeaconRecord);
          goto LABEL_128;
        }
        int v233 = *(unsigned __int8 *)(v232 + *(int *)(v202 + 64));
        sub_1007AFBFC(v232, type metadata accessor for SharedBeaconRecord);
        if (v233 == 4)
        {
LABEL_128:
          uint64_t v273 = v199;
          static os_log_type_t.default.getter();
          uint64_t v234 = swift_allocObject();
          long long v279 = xmmword_101342130;
          *(_OWORD *)(v234 + 16) = xmmword_101342130;
          sub_1007AFB78(v230, v260, type metadata accessor for SharedBeaconRecord);
          uint64_t v235 = String.init<A>(describing:)();
          *(void *)(v234 + 56) = &type metadata for String;
          *(void *)(v234 + 64) = v200;
          *(void *)(v234 + 32) = v235;
          *(void *)(v234 + 40) = v236;
          os_log(_:dso:log:_:_:)();
          swift_bridgeObjectRelease();
          if ((sub_100785054(v230 + *(int *)(v202 + 20)) & 1) == 0)
          {
            uint64_t v244 = v257;
            sub_1000361E0(v257, v204);
            uint64_t v245 = static MACAddress.length.getter();
            sub_100435A9C(v245, v244, v204, v282);
            uint64_t v246 = v259;
            MACAddress.init(data:type:)();
            os_log_t v247 = v276;
            uint64_t v248 = v274;
            if (((unsigned int (*)(char *, uint64_t, uint64_t))v276[6].isa)(v246, 1, v274) == 1) {
              goto LABEL_157;
            }
            uint64_t v249 = (int *)sub_10000588C(&qword_10164D7C8);
            uint64_t v184 = v280;
            uint64_t v250 = (void *)((char *)v280 + v249[12]);
            uint64_t v251 = (uint64_t)v280 + v249[16];
            *(void *)&long long v279 = v249[20];
            uint64_t v187 = v249[24];
            ((void (*)(void *, char *, uint64_t))v247[4].isa)(v280, v246, v248);
            sub_10001CFB8(v244, v204);
            sub_10001CFB8(v244, v204);
            sub_1007AFBFC(v265, type metadata accessor for BeaconKeyManager.IndexInformation);
            *uint64_t v250 = v244;
            v250[1] = v204;
            sub_1007B136C(v262, v251, type metadata accessor for SharedBeaconRecord);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v270 + 56))(v251, 0, 1, v271);
LABEL_108:
            *(void *)((char *)v184 + v279) = v258;
            char v188 = v277;
            goto LABEL_121;
          }
          uint64_t v237 = String.init(format:_:)();
          uint64_t v239 = v238;
          static os_log_type_t.default.getter();
          uint64_t v240 = swift_allocObject();
          *(_OWORD *)(v240 + 16) = v279;
          *(void *)(v240 + 56) = &type metadata for String;
          *(void *)(v240 + 64) = v200;
          *(void *)(v240 + 32) = v237;
          *(void *)(v240 + 40) = v239;
          swift_bridgeObjectRetain();
          os_log(_:dso:log:_:_:)();
          swift_bridgeObjectRelease();
          type metadata accessor for TrackingAvoidanceError(0);
          uint64_t v281 = 7;
          sub_10000588C((uint64_t *)&unk_101637F00);
          uint64_t v241 = swift_initStackObject();
          *(_OWORD *)(v241 + 16) = v279;
          *(void *)(v241 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
          *(void *)(v241 + 40) = v242;
          *(void *)(v241 + 72) = &type metadata for String;
          *(void *)(v241 + 48) = v237;
          *(void *)(v241 + 56) = v239;
          sub_10092CEEC(v241);
          sub_100796E74(&qword_101638410, type metadata accessor for TrackingAvoidanceError);
          _BridgedStoredNSError.init(_:userInfo:)();

          uint64_t v243 = v257;
          sub_10001CFB8(v257, v204);
          sub_10001CFB8(v243, v204);
          sub_10001CFB8(v243, v204);
          sub_1007AFBFC(v230, type metadata accessor for SharedBeaconRecord);
        }
        else
        {
          sub_1007AFBFC(v230, type metadata accessor for SharedBeaconRecord);
LABEL_118:
          type metadata accessor for TrackingAvoidanceError(0);
          uint64_t v281 = 6;
          sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
          sub_100796E74(&qword_101638410, type metadata accessor for TrackingAvoidanceError);
          _BridgedStoredNSError.init(_:userInfo:)();
          uint64_t v205 = v257;
          sub_10001CFB8(v257, v204);
          sub_10001CFB8(v205, v204);

          sub_10001CFB8(v205, v204);
        }
        sub_1007AFBFC(v265, type metadata accessor for BeaconKeyManager.IndexInformation);
        goto LABEL_139;
      case 2:
        uint64_t v107 = *(void *)(v73 + 16);
        uint64_t v106 = *(void *)(v73 + 24);
        BOOL v108 = __OFSUB__(v106, v107);
        uint64_t v84 = v106 - v107;
        if (!v108) {
          goto LABEL_61;
        }
        goto LABEL_149;
      case 3:
        goto LABEL_61;
      default:
        uint64_t v84 = BYTE6(v82);
        goto LABEL_61;
    }
  }
  int v86 = self;
  uint64_t v87 = 5;
  unint64_t v256 = 0x8000000101407030;
  uint64_t v257 = 0xD000000000000013;
  while (1)
  {
    if (v278) {
      uint64_t v88 = (SEL *)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      uint64_t v88 = (SEL *)*(id *)(v57 + 8 * v87);
    }
    uint64_t v55 = v88;
    uint64_t v89 = v87 - 3;
    if (__OFADD__(v87 - 4, 1))
    {
      __break(1u);
LABEL_135:
      swift_bridgeObjectRetain();
      uint64_t v58 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v58) {
        goto LABEL_136;
      }
      goto LABEL_10;
    }
    id v90 = [v86 sharedInstance];
    unsigned int v91 = [v90 isInternalBuild];

    if (v91)
    {
      id v92 = [self standardUserDefaults];
      NSString v93 = String._bridgeToObjectiveC()();
      unsigned int v94 = [v92 BOOLForKey:v93];

      if (v94) {
        break;
      }
    }
    [(SEL *)v55 latitude];
    double v96 = v95;
    [(SEL *)v55 longitude];
    double v98 = v97;
    if (qword_101636A88 != -1) {
      swift_once();
    }
    if (objc_msgSend((id)qword_101642640, "containsCoordinate:", v96, v98))
    {
      uint64_t v99 = (void *)qword_101642648;
      if (qword_101642648)
      {
        id v100 = (id)qword_101642648;
      }
      else
      {
        uint64_t v101 = (void *)sub_10036D0D4();
        uint64_t v102 = (void *)qword_101642648;
        qword_101642648 = (uint64_t)v101;
        id v100 = v101;

        uint64_t v99 = 0;
      }
      id v103 = v99;
      unsigned __int8 v104 = [v100 containsCoordinate:v96, v98];

      if (v104) {
        goto LABEL_20;
      }
    }
    else
    {
    }
    ++v87;
    a1 = (void *)v279;
    if (v89 == v58) {
      goto LABEL_25;
    }
  }
  static os_log_type_t.default.getter();
  sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
  int v164 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease_n();

LABEL_21:
  static os_log_type_t.error.getter();
  if (qword_1016372F0 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  type metadata accessor for TrackingAvoidanceError(0);
  uint64_t v281 = 11;
  sub_10000588C((uint64_t *)&unk_101637F00);
  uint64_t inited = swift_allocObject();
  *(_OWORD *)(inited + 16) = xmmword_101342130;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v66;
  *(void *)(inited + 72) = &type metadata for String;
  unint64_t v67 = 0xD00000000000001CLL;
  uint64_t v68 = "Locations in blocked regions";
LABEL_57:
  *(void *)(inited + 48) = v67;
  *(void *)(inited + 56) = (unint64_t)(v68 - 32) | 0x8000000000000000;
  sub_10092CEEC(inited);
  sub_100796E74(&qword_101638410, type metadata accessor for TrackingAvoidanceError);
  _BridgedStoredNSError.init(_:userInfo:)();
LABEL_113:

LABEL_139:
  *uint64_t v280 = v282[0];
  sub_10000588C(&qword_10164D7D0);
  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_100785054(uint64_t a1)
{
  uint64_t v79 = a1;
  uint64_t v1 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v1 - 8);
  uint64_t v3 = (char *)&v65 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v70 = *(void *)(v4 - 8);
  uint64_t v71 = v4;
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v68 = (uint64_t)&v65 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v5);
  unint64_t v67 = (char *)&v65 - v7;
  uint64_t v8 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for UUID();
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  id v72 = (char *)&v65 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000588C(&qword_1016511E0);
  __chkstk_darwin(v14 - 8);
  uint64_t v74 = (uint64_t)&v65 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v80 = type metadata accessor for WildModeAssociationRecord(0);
  uint64_t v16 = *(void *)(v80 - 8);
  uint64_t v17 = __chkstk_darwin(v80);
  uint64_t v69 = (uint64_t)&v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v65 - v20;
  uint64_t v22 = __chkstk_darwin(v19);
  uint64_t v24 = (char *)&v65 - v23;
  __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v65 - v25;
  uint64_t v27 = sub_100AE35FC();
  uint64_t v28 = v27[2];
  unint64_t v75 = v27;
  if (v28)
  {
    uint64_t v73 = v26;
    uint64_t v65 = v16;
    uint64_t v66 = v3;
    uint64_t v29 = (uint64_t)v27 + ((*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
    uint64_t v30 = (unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    uint64_t v77 = (void (**)(char *, uint64_t))(v12 + 8);
    unint64_t v78 = (void (**)(char *, char *, uint64_t))(v12 + 32);
    uint64_t v31 = *(void *)(v16 + 72);
    uint64_t v32 = &qword_101638CF0;
    uint64_t v33 = v72;
    uint64_t v76 = v31;
    do
    {
      sub_1007AFB78(v29, (uint64_t)v24, type metadata accessor for WildModeAssociationRecord);
      sub_10001D074((uint64_t)&v24[*(int *)(v80 + 20)], (uint64_t)v10, v32);
      if ((*v30)(v10, 1, v11) == 1)
      {
        sub_10001DAB4((uint64_t)v10, v32);
      }
      else
      {
        uint64_t v34 = v32;
        (*v78)(v33, v10, v11);
        id v35 = v33;
        char v36 = static UUID.== infix(_:_:)();
        sub_1007AFB78((uint64_t)v24, (uint64_t)v21, type metadata accessor for WildModeAssociationRecord);
        if (v36)
        {
          int v37 = v21[*(int *)(v80 + 36)];
          sub_1007AFBFC((uint64_t)v21, type metadata accessor for WildModeAssociationRecord);
          (*v77)(v35, v11);
          BOOL v38 = v37 == 2;
          uint64_t v33 = v35;
          uint64_t v32 = v34;
          uint64_t v31 = v76;
          if (v38)
          {
            uint64_t v39 = v74;
            sub_1007B136C((uint64_t)v24, v74, type metadata accessor for WildModeAssociationRecord);
            uint64_t v40 = 0;
            uint64_t v16 = v65;
            uint64_t v3 = v66;
            uint64_t v26 = v73;
            goto LABEL_13;
          }
        }
        else
        {
          sub_1007AFBFC((uint64_t)v21, type metadata accessor for WildModeAssociationRecord);
          (*v77)(v35, v11);
          uint64_t v33 = v35;
          uint64_t v32 = v34;
          uint64_t v31 = v76;
        }
      }
      sub_1007AFBFC((uint64_t)v24, type metadata accessor for WildModeAssociationRecord);
      v29 += v31;
      --v28;
    }
    while (v28);
    uint64_t v40 = 1;
    uint64_t v16 = v65;
    uint64_t v3 = v66;
    uint64_t v26 = v73;
    uint64_t v39 = v74;
  }
  else
  {
    uint64_t v40 = 1;
    uint64_t v39 = v74;
  }
LABEL_13:
  id v41 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);
  uint64_t v42 = v16;
  uint64_t v43 = v80;
  v41(v39, v40, 1, v80);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48))(v39, 1, v43) == 1)
  {
    unint64_t v44 = &qword_1016511E0;
    uint64_t v45 = v39;
  }
  else
  {
    sub_1007B136C(v39, (uint64_t)v26, type metadata accessor for WildModeAssociationRecord);
    static os_log_type_t.default.getter();
    if (qword_1016372F0 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v46 = swift_allocObject();
    *(_OWORD *)(v46 + 16) = xmmword_101342130;
    sub_1007AFB78((uint64_t)v26, v69, type metadata accessor for WildModeAssociationRecord);
    uint64_t v47 = v80;
    uint64_t v48 = String.init<A>(describing:)();
    uint64_t v50 = v49;
    *(void *)(v46 + 56) = &type metadata for String;
    unint64_t v51 = sub_10000B4CC();
    *(void *)(v46 + 64) = v51;
    *(void *)(v46 + 32) = v48;
    *(void *)(v46 + 40) = v50;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    sub_10001D074((uint64_t)&v26[*(int *)(v47 + 44)], (uint64_t)v3, (uint64_t *)&unk_10163AC90);
    uint64_t v52 = v70;
    uint64_t v53 = v71;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48))(v3, 1, v71) != 1)
    {
      uint64_t v55 = *(void (**)(char *, char *, uint64_t))(v52 + 32);
      uint64_t v73 = v26;
      id v56 = v67;
      v55(v67, v3, v53);
      uint64_t v57 = v68;
      static Date.trustedNow.getter(v68);
      static os_log_type_t.default.getter();
      uint64_t v80 = qword_10170F048;
      uint64_t v58 = swift_allocObject();
      *(_OWORD *)(v58 + 16) = xmmword_101347BA0;
      sub_100796E74((unint64_t *)&qword_101638DA0, (void (*)(uint64_t))&type metadata accessor for Date);
      uint64_t v59 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v58 + 56) = &type metadata for String;
      *(void *)(v58 + 64) = v51;
      *(void *)(v58 + 32) = v59;
      *(void *)(v58 + 40) = v60;
      uint64_t v61 = dispatch thunk of CustomStringConvertible.description.getter();
      *(void *)(v58 + 96) = &type metadata for String;
      *(void *)(v58 + 104) = v51;
      *(void *)(v58 + 72) = v61;
      *(void *)(v58 + 80) = v62;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      char v54 = static Date.> infix(_:_:)();
      uint64_t v63 = *(void (**)(uint64_t, uint64_t))(v52 + 8);
      v63(v57, v53);
      v63((uint64_t)v56, v53);
      sub_1007AFBFC((uint64_t)v73, type metadata accessor for WildModeAssociationRecord);
      return v54 & 1;
    }
    sub_1007AFBFC((uint64_t)v26, type metadata accessor for WildModeAssociationRecord);
    unint64_t v44 = (uint64_t *)&unk_10163AC90;
    uint64_t v45 = (uint64_t)v3;
  }
  sub_10001DAB4(v45, v44);
  char v54 = 0;
  return v54 & 1;
}

uint64_t sub_1007858F8(uint64_t a1, uint64_t a2, void *a3, unint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9, uint64_t a10, unsigned __int8 a11, uint64_t a12, unint64_t a13, uint64_t a14, uint64_t a15)
{
  unint64_t v266 = a8;
  uint64_t v237 = a7;
  uint64_t v239 = a6;
  id v268 = a3;
  unint64_t v269 = a4;
  uint64_t v17 = sub_10000588C((uint64_t *)&unk_10166BFA0);
  __chkstk_darwin(v17 - 8);
  uint64_t v249 = (char *)&v210 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v20 = __chkstk_darwin(v19 - 8);
  os_log_t v247 = (char *)&v210 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v246 = (char *)&v210 - v23;
  __chkstk_darwin(v22);
  uint64_t v264 = (void (*)(char *, unint64_t, uint64_t))((char *)&v210 - v24);
  uint64_t v242 = type metadata accessor for Date();
  uint64_t v241 = *(void *)(v242 - 8);
  __chkstk_darwin(v242);
  uint64_t v263 = (uint64_t)&v210 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v26 - 8);
  unint64_t v262 = (unint64_t)&v210 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for WildModeAssociationRecord(0);
  uint64_t v243 = *(void *)(v28 - 8);
  uint64_t v29 = __chkstk_darwin(v28 - 8);
  uint64_t v245 = (uint64_t)&v210 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v244 = v30;
  __chkstk_darwin(v29);
  uint64_t v248 = (uint64_t)&v210 - v31;
  uint64_t v32 = sub_10000588C((uint64_t *)&unk_101653D50);
  uint64_t v234 = *(void *)(v32 - 8);
  uint64_t v33 = __chkstk_darwin(v32 - 8);
  uint64_t v238 = (uint64_t)&v210 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = __chkstk_darwin(v33);
  int v233 = (char *)&v210 - v36;
  uint64_t v235 = v37;
  __chkstk_darwin(v35);
  uint64_t v259 = (uint64_t)&v210 - v38;
  uint64_t v39 = type metadata accessor for MACAddress();
  uint64_t v265 = *(void *)(v39 - 8);
  uint64_t v40 = __chkstk_darwin(v39);
  uint64_t v261 = (uint64_t)&v210 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = __chkstk_darwin(v40);
  id v258 = (char *)&v210 - v43;
  uint64_t v229 = v44;
  __chkstk_darwin(v42);
  uint64_t v257 = (char *)&v210 - v45;
  uint64_t v46 = sub_10000588C(&qword_10163C6C8);
  __chkstk_darwin(v46 - 8);
  uint64_t v220 = (char *)&v210 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v224 = sub_10000588C(&qword_10166BFE0);
  uint64_t v223 = *(void *)(v224 - 8);
  __chkstk_darwin(v224);
  uint64_t v221 = (char *)&v210 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v226 = sub_10000588C(&qword_10164D7E0);
  uint64_t v225 = *(void *)(v226 - 8);
  __chkstk_darwin(v226);
  int v222 = (char *)&v210 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v230 = sub_10000588C(&qword_10164D7E8);
  uint64_t v228 = *(void *)(v230 - 8);
  __chkstk_darwin(v230);
  uint64_t v227 = (char *)&v210 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v232 = sub_10000588C(&qword_10164D7F0);
  uint64_t v231 = *(void *)(v232 - 8);
  __chkstk_darwin(v232);
  unint64_t v256 = (char *)&v210 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = sub_10000588C(&qword_1016653B0);
  uint64_t v53 = __chkstk_darwin(v52 - 8);
  uint64_t v236 = (uint64_t)&v210 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v53);
  uint64_t v252 = (uint64_t)&v210 - v55;
  uint64_t v270 = type metadata accessor for UUID();
  uint64_t v56 = *(void *)(v270 - 8);
  uint64_t v57 = *(void *)(v56 + 64);
  uint64_t v58 = __chkstk_darwin(v270);
  uint64_t v260 = (uint64_t)&v210 - ((v57 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = __chkstk_darwin(v58);
  uint64_t v61 = (char *)&v210 - v60;
  uint64_t v62 = __chkstk_darwin(v59);
  uint64_t v255 = (char *)&v210 - v63;
  __chkstk_darwin(v62);
  uint64_t v65 = (char *)&v210 - v64;
  uint64_t v250 = type metadata accessor for AccessoryMetadata(0);
  uint64_t v251 = *(void *)(v250 - 8);
  __chkstk_darwin(v250);
  uint64_t v267 = (uint64_t)&v210 - ((v66 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v67 = sub_10000588C(&qword_10164B3F8);
  __chkstk_darwin(v67);
  uint64_t v69 = (uint64_t *)((char *)&v210 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v240 = a5;
  uint64_t v70 = swift_projectBox();
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v72 = result;
    uint64_t v217 = v39;
    uint64_t v218 = a15;
    uint64_t v216 = a14;
    unint64_t v214 = a13;
    uint64_t v213 = a12;
    int v253 = a11;
    uint64_t v215 = a10;
    uint64_t v212 = a9;
    sub_10001D074(a1, (uint64_t)v69, &qword_10164B3F8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v254 = v72;
    uint64_t v219 = v70;
    if (EnumCaseMultiPayload != 1)
    {
      sub_1007B136C((uint64_t)v69, v267, type metadata accessor for AccessoryMetadata);
      id v80 = v268;
      id v81 = [v268 trackingIdentifier];
      unsigned int v82 = [v81 isPosh];

      if (v82)
      {
        id v83 = [v80 trackingIdentifier];
        unsigned int v84 = [v83 networkID];

        int v85 = 2 * (v84 == 2);
        if (v84 == 1) {
          int v85 = 1;
        }
      }
      else
      {
        int v85 = 3;
      }
      LODWORD(v263) = v85;
      uint64_t v97 = v56;
      if (qword_101636CA8 != -1) {
        swift_once();
      }
      uint64_t v98 = type metadata accessor for Logger();
      sub_100010324(v98, (uint64_t)qword_10170E318);
      uint64_t v264 = *(void (**)(char *, unint64_t, uint64_t))(v56 + 16);
      v264(v65, v269, v270);
      uint64_t v99 = Logger.logObject.getter();
      os_log_type_t v100 = static os_log_type_t.default.getter();
      BOOL v101 = os_log_type_enabled(v99, v100);
      uint64_t v211 = v56;
      if (v101)
      {
        uint64_t v102 = swift_slowAlloc();
        uint64_t v273 = swift_slowAlloc();
        *(_DWORD *)uint64_t v102 = 136446466;
        unint64_t v262 = v102 + 4;
        sub_100796E74((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v103 = v270;
        uint64_t v104 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v272 = sub_1008FA0F0(v104, v105, &v273);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v97 + 8))(v65, v103);
        *(_WORD *)(v102 + 12) = 256;
        char v106 = v263;
        if (v263 == 3) {
          char v107 = 0;
        }
        else {
          char v107 = v263;
        }
        LOBYTE(v272) = v107;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v99, v100, "Successfully fetched metadata for %{public}s. NetworkID: %hhu", (uint8_t *)v102, 0xFu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v56 + 8))(v65, v270);

        char v106 = v263;
      }
      uint64_t v108 = v267;
      uint64_t v109 = v252;
      sub_1007AFB78(v267, v252, type metadata accessor for AccessoryMetadata);
      uint64_t v110 = v251 + 56;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v251 + 56))(v109, 0, 1, v250);
      uint64_t v111 = v219;
      swift_beginAccess();
      sub_100062604(v109, v111, &qword_1016653B0);
      uint64_t v112 = v254;
      sub_10000588C(&qword_101649E60);
      unint64_t v113 = (*(unsigned __int8 *)(v110 + 24) + 32) & ~(unint64_t)*(unsigned __int8 *)(v110 + 24);
      uint64_t v114 = swift_allocObject();
      *(_OWORD *)(v114 + 16) = xmmword_101342130;
      sub_1007AFB78(v108, v114 + v113, type metadata accessor for AccessoryMetadata);
      swift_retain();
      uint64_t v115 = sub_1003048A0(v114, v106);
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v272 = v115;
      id v271 = *(id *)(v112 + 24);
      id v116 = v271;
      uint64_t v117 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
      uint64_t v118 = (uint64_t)v220;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v117 - 8) + 56))(v220, 1, 1, v117);
      id v119 = v116;
      sub_10000588C((uint64_t *)&unk_10166C030);
      sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
      sub_100062734(&qword_10164D6E8, (uint64_t *)&unk_10166C030);
      sub_10033149C((unint64_t *)&qword_10166C020, (unint64_t *)&qword_1016376E0);
      os_log_type_t v120 = v221;
      Publisher.receive<A>(on:options:)();
      sub_10001DAB4(v118, &qword_10163C6C8);

      swift_release();
      sub_100062734(&qword_10166C040, &qword_10166BFE0);
      uint64_t v121 = v222;
      uint64_t v122 = v224;
      Publisher.timeout(_:queue:customError:)();
      (*(void (**)(char *, uint64_t))(v223 + 8))(v120, v122);
      sub_10000588C(&qword_101641650);
      sub_100062734(&qword_10164D808, &qword_10164D7E0);
      unint64_t v123 = v227;
      uint64_t v124 = v226;
      Publisher.map<A>(_:)();
      (*(void (**)(char *, uint64_t))(v225 + 8))(v121, v124);
      sub_10000588C(&qword_10164D700);
      sub_100062734(&qword_10164D810, &qword_10164D7E8);
      sub_100062734(&qword_10164D710, &qword_10164D700);
      uint64_t v125 = v230;
      Publisher.catch<A>(_:)();
      (*(void (**)(char *, uint64_t))(v228 + 8))(v123, v125);
      uint64_t v263 = swift_allocObject();
      swift_weakInit();
      v264(v255, v269, v270);
      uint64_t v126 = v265;
      int v127 = *(void (**)(char *, uint64_t, uint64_t))(v265 + 16);
      uint64_t v128 = v217;
      v127(v257, v237, v217);
      sub_10001D074(v266, v259, (uint64_t *)&unk_101653D50);
      v127(v258, v212, v128);
      uint64_t v129 = v211;
      unint64_t v130 = (*(unsigned __int8 *)(v211 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v211 + 80);
      unint64_t v131 = (v57 + v130 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v132 = *(unsigned __int8 *)(v126 + 80);
      uint64_t v133 = (v132 + 8 + v131) & ~v132;
      unint64_t v134 = (v229 + *(unsigned __int8 *)(v234 + 80) + v133) & ~(unint64_t)*(unsigned __int8 *)(v234 + 80);
      unint64_t v135 = (v235 + v134 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v136 = (v132 + 8 + v135) & ~v132;
      unint64_t v269 = (v136 + v229 + 7) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v266 = (v136 + v229 + 23) & 0xFFFFFFFFFFFFFFF8;
      unint64_t v262 = (v266 + 15) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v264 = (void (*)(char *, unint64_t, uint64_t))((v262 + 23) & 0xFFFFFFFFFFFFFFF8);
      uint64_t v137 = swift_allocObject();
      *(void *)(v137 + 16) = v263;
      (*(void (**)(unint64_t, char *, uint64_t))(v129 + 32))(v137 + v130, v255, v270);
      *(void *)(v137 + v131) = v239;
      unsigned __int8 v138 = *(void (**)(uint64_t, char *, uint64_t))(v126 + 32);
      v138(v137 + v133, v257, v128);
      sub_1007AF8D8(v259, v137 + v134);
      id v139 = v268;
      *(void *)(v137 + v135) = v268;
      v138(v137 + v136, v258, v128);
      unint64_t v140 = v137 + v269;
      *(void *)unint64_t v140 = v215;
      *(unsigned char *)(v140 + 8) = v253;
      *(void *)(v137 + v266) = v240;
      uint64_t v141 = (void *)(v137 + v262);
      uint64_t v142 = v213;
      unint64_t v143 = v214;
      *uint64_t v141 = v213;
      v141[1] = v143;
      uint64_t v144 = (char *)v264 + v137;
      uint64_t v145 = v218;
      *(void *)uint64_t v144 = v216;
      *((void *)v144 + 1) = v145;
      swift_retain();
      id v146 = v139;
      swift_bridgeObjectRetain();
      swift_retain();
      sub_100295FB0(v142, v143);
      sub_100062734(&qword_10164D818, &qword_10164D7F0);
      swift_retain();
      uint64_t v147 = v232;
      uint64_t v148 = v256;
      Publisher<>.sink(receiveValue:)();
      swift_release();
      (*(void (**)(char *, uint64_t))(v231 + 8))(v148, v147);
      swift_beginAccess();
      AnyCancellable.store(in:)();
      swift_endAccess();
      swift_release();
      swift_release();
      uint64_t v149 = type metadata accessor for AccessoryMetadata;
      uint64_t v150 = v267;
      return sub_1007AFBFC(v150, v149);
    }
    uint64_t v273 = *v69;
    uint64_t v74 = v273;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    int v75 = swift_dynamicCast();
    uint64_t v76 = v266;
    uint64_t v267 = v74;
    if (v75)
    {
      uint64_t v77 = v270;
      uint64_t v78 = v56;
      if (v272 == 4)
      {
        LODWORD(v259) = 0;
        unint64_t v79 = v262;
LABEL_25:
        uint64_t v151 = (uint64_t)v233;
        if (v253 == 3)
        {
          if (qword_101636CD8 != -1) {
            swift_once();
          }
          OS_dispatch_queue.sync<A>(execute:)();
          char v152 = sub_1010ABD78(v273);
          swift_bridgeObjectRelease();
          if (v152)
          {
            if (qword_101636CA8 != -1) {
              swift_once();
            }
            uint64_t v153 = type metadata accessor for Logger();
            sub_100010324(v153, (uint64_t)qword_10170E318);
            uint64_t v154 = Logger.logObject.getter();
            os_log_type_t v155 = static os_log_type_t.default.getter();
            if (os_log_type_enabled(v154, v155))
            {
              uint64_t v156 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v156 = 0;
              _os_log_impl((void *)&_mh_execute_header, v154, v155, "HELE is AirPods. Stubbing metadata with default values", v156, 2u);
              swift_slowDealloc();
            }

            uint64_t v157 = sub_1002AAF08(76, 8211);
            if (v158 >> 60 == 15)
            {
              int v159 = Logger.logObject.getter();
              os_log_type_t v160 = static os_log_type_t.error.getter();
              if (os_log_type_enabled(v159, v160))
              {
                unint64_t v161 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)unint64_t v161 = 0;
                _os_log_impl((void *)&_mh_execute_header, v159, v160, "Unable to init fallbackAirPodsProductData", v161, 2u);
                swift_slowDealloc();
              }
            }
            else
            {
              uint64_t v162 = v157;
              uint64_t v163 = v158;
              uint64_t v164 = v252;
              (*(void (**)(uint64_t, unint64_t, uint64_t))(v78 + 16))(v252, v269, v77);
              uint64_t v165 = (int *)v250;
              uint64_t v166 = v164 + *(int *)(v250 + 40);
              *(void *)uint64_t v166 = 0;
              *(void *)(v166 + 8) = 0;
              *(unsigned char *)(v166 + 16) = 1;
              uint64_t v167 = (void *)(v164 + v165[15]);
              *uint64_t v167 = 0;
              v167[1] = 0xE000000000000000;
              os_log_type_t v168 = (uint64_t *)(v164 + v165[5]);
              *os_log_type_t v168 = v162;
              v168[1] = v163;
              *(_DWORD *)(v164 + v165[8]) = 16842753;
              uint64_t v169 = (void *)(v164 + v165[7]);
              *uint64_t v169 = 0;
              v169[1] = 0;
              uint64_t v170 = (void *)(v164 + v165[6]);
              *uint64_t v170 = 0;
              v170[1] = 0;
              uint64_t v171 = v164 + v165[9];
              *(_DWORD *)uint64_t v171 = 0;
              *(unsigned char *)(v171 + 4) = 1;
              uint64_t v172 = v164 + v165[11];
              *(void *)uint64_t v172 = 0;
              *(unsigned char *)(v172 + 8) = 1;
              uint64_t v173 = v164 + v165[12];
              *(_DWORD *)uint64_t v173 = 1025;
              *(unsigned char *)(v173 + 4) = 0;
              *(unsigned char *)(v164 + v165[13]) = 4;
              *(unsigned char *)(v164 + v165[14]) = 5;
              (*(void (**)(uint64_t, void, uint64_t))(v251 + 56))(v164, 0, 1);
              uint64_t v174 = v219;
              swift_beginAccess();
              sub_100062604(v164, v174, &qword_1016653B0);
            }
          }
        }
        unsigned int v175 = *(void (**)(uint64_t, unint64_t, uint64_t))(v78 + 16);
        v175(v260, v269, v77);
        sub_10001D074(v76, v151, (uint64_t *)&unk_101653D50);
        uint64_t v176 = type metadata accessor for SharedBeaconRecord(0);
        uint64_t v177 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v176 - 8) + 48);
        if (v177(v151, 1, v176) == 1)
        {
          sub_10001DAB4(v151, (uint64_t *)&unk_101653D50);
          uint64_t v178 = 1;
        }
        else
        {
          v175(v79, v151 + *(int *)(v176 + 20), v77);
          sub_1007AFBFC(v151, type metadata accessor for SharedBeaconRecord);
          uint64_t v178 = 0;
        }
        (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v78 + 56))(v79, v178, 1, v77);
        id v179 = v268;
        id v180 = [v268 type];
        if (v180)
        {
          uint64_t v182 = (uint64_t)v180;
          uint64_t v181 = v241;
          if (v180 != (id)1)
          {
            type metadata accessor for TrackingObservationType(0);
            uint64_t v273 = v182;
            uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
            __break(1u);
            return result;
          }
          LODWORD(v270) = 1;
        }
        else
        {
          LODWORD(v270) = 0;
          uint64_t v181 = v241;
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v265 + 16))(v261, v212, v217);
        static Date.trustedNow.getter(v263);
        uint64_t v183 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v181 + 56);
        uint64_t v184 = v242;
        v183((char *)v264, 1, 1, v242);
        uint64_t v185 = v76;
        uint64_t v186 = v238;
        sub_10001D074(v185, v238, (uint64_t *)&unk_101653D50);
        if (v177(v186, 1, v176) == 1)
        {
          sub_10001DAB4(v186, (uint64_t *)&unk_101653D50);
          unint64_t v269 = 0;
          uint64_t v265 = 0;
          unint64_t v266 = 0;
        }
        else
        {
          uint64_t v187 = (unsigned __int8 *)(v186 + *(int *)(v176 + 28));
          unint64_t v269 = *v187;
          unint64_t v188 = *((void *)v187 + 1);
          uint64_t v265 = *((void *)v187 + 2);
          unint64_t v266 = v188;
          swift_bridgeObjectRetain();
          sub_1007AFBFC(v186, type metadata accessor for SharedBeaconRecord);
        }
        uint64_t v189 = v219;
        swift_beginAccess();
        uint64_t v190 = v236;
        sub_10001D074(v189, v236, &qword_1016653B0);
        uint64_t v191 = type metadata accessor for AccessoryProductInfo();
        uint64_t v192 = (uint64_t)v249;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v191 - 8) + 56))(v249, 1, 1, v191);
        id v193 = [v179 action];
        if ((unint64_t)v193 < 5) {
          int v194 = v193 + 1;
        }
        else {
          int v194 = 0;
        }
        LODWORD(v258) = v194;
        uint64_t v195 = (uint64_t)v246;
        v183(v246, 1, 1, v184);
        uint64_t v196 = (uint64_t)v247;
        v183(v247, 1, 1, v184);
        uint64_t v197 = v213;
        uint64_t v198 = v214;
        sub_100295FB0(v213, v214);
        id v199 = [v179 trackingIdentifier];
        unsigned __int8 v200 = [v199 isPosh];

        id v201 = [v179 trackingIdentifier];
        unsigned __int16 v202 = (unsigned __int16)[v201 networkID];

        uint64_t v203 = v215;
        swift_bridgeObjectRetain();
        unsigned __int16 v209 = v202;
        *((void *)&v208 + 1) = v266;
        *(void *)&long long v208 = v269;
        uint64_t v204 = v248;
        sub_10028F8FC(v260, v262, v270, v261, v203, 0, v263, (uint64_t)v264, v248, v208, v265, v253, v190, v192, v258, v195, v196, v197, v198,
          v200,
          v209);
        sub_1007912D8(v204, v216, v218);
        type metadata accessor for Transaction();
        uint64_t v205 = v245;
        sub_1007AFB78(v204, v245, type metadata accessor for WildModeAssociationRecord);
        unint64_t v206 = (*(unsigned __int8 *)(v243 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v243 + 80);
        uint64_t v207 = swift_allocObject();
        *(unsigned char *)(v207 + 16) = v259;
        sub_1007B136C(v205, v207 + v206, type metadata accessor for WildModeAssociationRecord);
        static Transaction.asyncTask(name:block:)();
        swift_release();
        swift_release();
        swift_errorRelease();
        uint64_t v149 = type metadata accessor for WildModeAssociationRecord;
        uint64_t v150 = v204;
        return sub_1007AFBFC(v150, v149);
      }
    }
    else
    {
      uint64_t v77 = v270;
      uint64_t v78 = v56;
    }
    unint64_t v86 = v266;
    if (qword_101636CA8 != -1) {
      swift_once();
    }
    uint64_t v87 = type metadata accessor for Logger();
    sub_100010324(v87, (uint64_t)qword_10170E318);
    (*(void (**)(char *, unint64_t, uint64_t))(v78 + 16))(v61, v269, v77);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v88 = Logger.logObject.getter();
    uint64_t v89 = v78;
    os_log_type_t v90 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v88, v90))
    {
      uint64_t v91 = swift_slowAlloc();
      uint64_t v270 = swift_slowAlloc();
      uint64_t v273 = v270;
      *(_DWORD *)uint64_t v91 = 136446466;
      sub_100796E74((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      uint64_t v92 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v272 = sub_1008FA0F0(v92, v93, &v273);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v89 + 8))(v61, v77);
      *(_WORD *)(v91 + 12) = 2082;
      uint64_t v272 = v74;
      swift_errorRetain();
      uint64_t v94 = String.init<A>(describing:)();
      uint64_t v272 = sub_1008FA0F0(v94, v95, &v273);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v88, v90, "Failed to fetch metadata for %{public}s. Error %{public}s", (uint8_t *)v91, 0x16u);
      swift_arrayDestroy();
      unint64_t v96 = v266;
      swift_slowDealloc();
      swift_slowDealloc();

      LODWORD(v259) = 1;
      uint64_t v78 = v89;
      uint64_t v76 = v96;
      unint64_t v79 = v262;
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v89 + 8))(v61, v77);
      swift_errorRelease();
      swift_errorRelease();

      LODWORD(v259) = 1;
      uint64_t v78 = v89;
      unint64_t v79 = v262;
      uint64_t v76 = v86;
    }
    goto LABEL_25;
  }
  return result;
}

uint64_t sub_1007878B4()
{
  type metadata accessor for BluetoothCommunicationCoordinator.Error();

  return swift_storeEnumTagMultiPayload();
}

uint64_t sub_100787900(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint8_t *a5, uint64_t a6, void *a7, uint64_t a8, uint64_t a9, unsigned __int8 a10, uint64_t a11, uint64_t a12, unint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v141 = a8;
  id v163 = a7;
  uint64_t v142 = a6;
  uint64_t v136 = a5;
  uint64_t v157 = a3;
  uint64_t v137 = a1;
  uint64_t v15 = sub_10000588C(&qword_1016653B0);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)&v131 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v19 = __chkstk_darwin(v18 - 8);
  uint64_t v150 = (char *)&v131 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v149 = (char *)&v131 - v22;
  __chkstk_darwin(v21);
  uint64_t v162 = (uint64_t)&v131 - v23;
  uint64_t v144 = type metadata accessor for Date();
  uint64_t v143 = *(void *)(v144 - 8);
  __chkstk_darwin(v144);
  uint64_t v161 = (uint64_t)&v131 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v153 = type metadata accessor for MACAddress();
  uint64_t v152 = *(void *)(v153 - 8);
  __chkstk_darwin(v153);
  uint64_t v160 = (uint64_t)&v131 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = sub_10000588C((uint64_t *)&unk_101653D50);
  uint64_t v27 = __chkstk_darwin(v26 - 8);
  uint64_t v139 = (uint64_t)&v131 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v27);
  uint64_t v151 = (char *)&v131 - v29;
  uint64_t v30 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v30 - 8);
  uint64_t v159 = (uint64_t)&v131 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for WildModeAssociationRecord(0);
  uint64_t v145 = *(void *)(v32 - 8);
  uint64_t v33 = __chkstk_darwin(v32 - 8);
  uint64_t v147 = (uint64_t)&v131 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v146 = v34;
  __chkstk_darwin(v33);
  uint64_t v148 = (uint64_t)&v131 - v35;
  uint64_t v36 = type metadata accessor for BluetoothCommunicationCoordinator.Error();
  uint64_t v37 = __chkstk_darwin(v36 - 8);
  uint64_t v39 = (char *)&v131 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37);
  uint64_t v138 = (uint64_t)&v131 - v40;
  uint64_t v41 = sub_10000588C((uint64_t *)&unk_10166BFA0);
  uint64_t v42 = __chkstk_darwin(v41 - 8);
  uint64_t v140 = (uint64_t)&v131 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v42);
  uint64_t v45 = (char *)&v131 - v44;
  uint64_t v156 = type metadata accessor for UUID();
  uint64_t v155 = *(void *)(v156 - 8);
  uint64_t v46 = __chkstk_darwin(v156);
  unint64_t v158 = (char *)&v131 - ((v47 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = __chkstk_darwin(v46);
  uint64_t v50 = (char *)&v131 - v49;
  __chkstk_darwin(v48);
  uint64_t v52 = (char *)&v131 - v51;
  uint64_t v53 = sub_10000588C(&qword_101641650);
  __chkstk_darwin(v53);
  uint64_t v55 = (uint64_t *)((char *)&v131 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v154 = swift_projectBox();
  uint64_t v56 = swift_projectBox();
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v58 = result;
    sub_10001D074(v137, (uint64_t)v55, &qword_101641650);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    uint64_t v137 = v58;
    unint64_t v135 = v17;
    uint64_t v134 = v56;
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v60 = v138;
      sub_1007B136C((uint64_t)v55, v138, (uint64_t (*)(void))type metadata accessor for BluetoothCommunicationCoordinator.Error);
      if (qword_101636CA8 != -1) {
        swift_once();
      }
      uint64_t v61 = type metadata accessor for Logger();
      sub_100010324(v61, (uint64_t)qword_10170E318);
      uint64_t v62 = v155;
      uint64_t v63 = *(void (**)(char *, uint64_t, uint64_t))(v155 + 16);
      uint64_t v64 = v156;
      uint64_t v133 = v155 + 16;
      uint64_t v132 = v63;
      v63(v50, v157, v156);
      sub_1007AFB78(v60, (uint64_t)v39, (uint64_t (*)(void))type metadata accessor for BluetoothCommunicationCoordinator.Error);
      uint64_t v65 = Logger.logObject.getter();
      os_log_type_t v66 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v65, v66))
      {
        uint64_t v67 = swift_slowAlloc();
        unint64_t v131 = (void *)swift_slowAlloc();
        uint64_t v165 = v131;
        *(_DWORD *)uint64_t v67 = 136446466;
        sub_100796E74((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v68 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v164 = sub_1008FA0F0(v68, v69, (uint64_t *)&v165);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v62 + 8))(v50, v64);
        *(_WORD *)(v67 + 12) = 2082;
        unint64_t v70 = sub_1011CE8B8();
        uint64_t v164 = sub_1008FA0F0(v70, v71, (uint64_t *)&v165);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1007AFBFC((uint64_t)v39, (uint64_t (*)(void))type metadata accessor for BluetoothCommunicationCoordinator.Error);
        _os_log_impl((void *)&_mh_execute_header, v65, v66, "Failed to fetch product info for %{public}s. Error %{public}s", (uint8_t *)v67, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v62 + 8))(v50, v64);
        sub_1007AFBFC((uint64_t)v39, (uint64_t (*)(void))type metadata accessor for BluetoothCommunicationCoordinator.Error);
      }

      uint64_t v83 = (uint64_t)v151;
      __chkstk_darwin(v84);
      int v85 = v136;
      sub_10000588C(&qword_10165F6B0);
      Lock.callAsFunction<A>(_:)();
      unint64_t v86 = v165;
      if (v165)
      {
        uint64_t v165 = (void *)sub_101329270(v165);
        sub_10000588C((uint64_t *)&unk_101649C90);
        sub_100062734((unint64_t *)&unk_101649CA0, (uint64_t *)&unk_101649C90);
        Publisher.oneshot(_:)();
        swift_release();

        int v75 = v132;
      }
      else
      {
        type metadata accessor for AccessoryMetadataManager.Error(0);
        sub_100796E74(&qword_101641638, (void (*)(uint64_t))type metadata accessor for AccessoryMetadataManager.Error);
        uint64_t v92 = (void *)swift_allocError();
        (*(void (**)(uint64_t, uint8_t *, uint64_t))(v152 + 16))(v93, v85, v153);
        swift_storeEnumTagMultiPayload();
        uint64_t v165 = v92;
        swift_errorRetain();
        sub_10000588C(&qword_101638D40);
        swift_willThrowTypedImpl();
        static os_log_type_t.error.getter();
        int v75 = v132;
        if (qword_1016372F0 != -1) {
          swift_once();
        }
        sub_10000588C((uint64_t *)&unk_10163AD00);
        uint64_t v94 = swift_allocObject();
        *(_OWORD *)(v94 + 16) = xmmword_101342130;
        uint64_t v95 = _convertErrorToNSError(_:)();
        *(void *)(v94 + 56) = sub_10001D4B0(0, (unint64_t *)&qword_101640E40);
        *(void *)(v94 + 64) = sub_10033149C((unint64_t *)&qword_10163C9B0, (unint64_t *)&qword_101640E40);
        *(void *)(v94 + 32) = v95;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        swift_errorRelease();
        swift_errorRelease();
        uint64_t v83 = (uint64_t)v151;
      }
      sub_1007AFBFC(v138, (uint64_t (*)(void))type metadata accessor for BluetoothCommunicationCoordinator.Error);
      uint64_t v96 = v159;
      uint64_t v87 = v143;
    }
    else
    {
      uint64_t v72 = *v55;
      if (qword_101636CA8 != -1) {
        swift_once();
      }
      uint64_t v73 = type metadata accessor for Logger();
      sub_100010324(v73, (uint64_t)qword_10170E318);
      uint64_t v74 = v155;
      int v75 = *(void (**)(char *, uint64_t, uint64_t))(v155 + 16);
      uint64_t v76 = v156;
      uint64_t v133 = v155 + 16;
      v75(v52, v157, v156);
      uint64_t v77 = Logger.logObject.getter();
      os_log_type_t v78 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v77, v78))
      {
        unint64_t v79 = (uint8_t *)swift_slowAlloc();
        id v80 = (void *)swift_slowAlloc();
        uint64_t v132 = v75;
        uint64_t v165 = v80;
        uint64_t v138 = v72;
        *(_DWORD *)unint64_t v79 = 136446210;
        uint64_t v136 = v79 + 4;
        sub_100796E74((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v81 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v164 = sub_1008FA0F0(v81, v82, (uint64_t *)&v165);
        uint64_t v72 = v138;
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v74 + 8))(v52, v76);
        _os_log_impl((void *)&_mh_execute_header, v77, v78, "Successfully fetched product info for %{public}s", v79, 0xCu);
        swift_arrayDestroy();
        int v75 = v132;
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v74 + 8))(v52, v76);
      }

      uint64_t v87 = v143;
      uint64_t v83 = (uint64_t)v151;
      uint64_t v88 = *(void *)(v72 + 16);
      uint64_t v89 = type metadata accessor for AccessoryProductInfo();
      uint64_t v90 = *(void *)(v89 - 8);
      if (v88)
      {
        sub_1007AFB78(v72+ ((*(unsigned __int8 *)(*(void *)(v89 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v89 - 8) + 80)), (uint64_t)v45, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
        uint64_t v91 = 0;
      }
      else
      {
        uint64_t v91 = 1;
      }
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v90 + 56))(v45, v91, 1, v89);
      swift_bridgeObjectRelease();
      uint64_t v97 = v154;
      swift_beginAccess();
      sub_100062604((uint64_t)v45, v97, (uint64_t *)&unk_10166BFA0);
      uint64_t v96 = v159;
    }
    uint64_t v98 = v142;
    uint64_t v99 = v156;
    v75(v158, v157, v156);
    sub_10001D074(v98, v83, (uint64_t *)&unk_101653D50);
    uint64_t v100 = type metadata accessor for SharedBeaconRecord(0);
    BOOL v101 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v100 - 8) + 48);
    if (v101(v83, 1, v100) == 1)
    {
      sub_10001DAB4(v83, (uint64_t *)&unk_101653D50);
      uint64_t v102 = 1;
    }
    else
    {
      v75((char *)v96, v83 + *(int *)(v100 + 20), v99);
      sub_1007AFBFC(v83, type metadata accessor for SharedBeaconRecord);
      uint64_t v102 = 0;
    }
    uint64_t v103 = v144;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v155 + 56))(v96, v102, 1, v99);
    id v104 = [v163 type];
    if (v104)
    {
      unint64_t v105 = v104;
      if (v104 != (id)1)
      {
        type metadata accessor for TrackingObservationType(0);
        uint64_t v165 = v105;
        uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
        __break(1u);
        return result;
      }
      LODWORD(v151) = 1;
    }
    else
    {
      LODWORD(v151) = 0;
    }
    uint64_t v156 = a15;
    uint64_t v155 = a14;
    uint64_t v144 = a9;
    uint64_t v143 = a12;
    LODWORD(v157) = a10;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v152 + 16))(v160, v141, v153);
    static Date.trustedNow.getter(v161);
    char v106 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v87 + 56);
    v106(v162, 1, 1, v103);
    uint64_t v107 = v139;
    sub_10001D074(v98, v139, (uint64_t *)&unk_101653D50);
    if (v101(v107, 1, v100) == 1)
    {
      sub_10001DAB4(v107, (uint64_t *)&unk_101653D50);
      uint64_t v153 = 0;
      uint64_t v152 = 0;
      uint64_t v142 = 0;
    }
    else
    {
      uint64_t v108 = (unsigned __int8 *)(v107 + *(int *)(v100 + 28));
      uint64_t v153 = *v108;
      uint64_t v109 = *((void *)v108 + 2);
      uint64_t v152 = *((void *)v108 + 1);
      uint64_t v142 = v109;
      swift_bridgeObjectRetain();
      sub_1007AFBFC(v107, type metadata accessor for SharedBeaconRecord);
    }
    uint64_t v110 = v134;
    swift_beginAccess();
    uint64_t v111 = (uint64_t)v135;
    sub_10001D074(v110, (uint64_t)v135, &qword_1016653B0);
    uint64_t v112 = v154;
    swift_beginAccess();
    uint64_t v113 = v140;
    sub_10001D074(v112, v140, (uint64_t *)&unk_10166BFA0);
    id v114 = v163;
    id v115 = [v163 action];
    if ((unint64_t)v115 < 5) {
      int v116 = v115 + 1;
    }
    else {
      int v116 = 0;
    }
    LODWORD(v154) = v116;
    uint64_t v117 = v149;
    v106((uint64_t)v149, 1, 1, v103);
    uint64_t v118 = (uint64_t)v150;
    v106((uint64_t)v150, 1, 1, v103);
    uint64_t v119 = v143;
    sub_100295FB0(v143, a13);
    id v120 = [v114 trackingIdentifier];
    unsigned __int8 v121 = [v120 isPosh];

    id v122 = [v114 trackingIdentifier];
    unsigned __int16 v123 = (unsigned __int16)[v122 networkID];

    uint64_t v124 = v144;
    swift_bridgeObjectRetain();
    uint64_t v130 = (uint64_t)v117;
    LOBYTE(v122) = v157;
    *((void *)&v129 + 1) = v152;
    *(void *)&long long v129 = v153;
    uint64_t v125 = v148;
    sub_10028F8FC((uint64_t)v158, v159, (char)v151, v160, v124, 0, v161, v162, v148, v129, v142, v157, v111, v113, v154, v130, v118, v119, a13,
      v121,
      v123);
    sub_1007912D8(v125, v155, v156);
    type metadata accessor for Transaction();
    uint64_t v126 = v147;
    sub_1007AFB78(v125, v147, type metadata accessor for WildModeAssociationRecord);
    unint64_t v127 = (*(unsigned __int8 *)(v145 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v145 + 80);
    uint64_t v128 = swift_allocObject();
    *(unsigned char *)(v128 + 16) = (_BYTE)v122;
    sub_1007B136C(v126, v128 + v127, type metadata accessor for WildModeAssociationRecord);
    static Transaction.asyncTask(name:block:)();
    swift_release();
    swift_release();
    return sub_1007AFBFC(v125, type metadata accessor for WildModeAssociationRecord);
  }
  return result;
}

uint64_t sub_100788DB0(char a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a2;
  *(unsigned char *)(v2 + 56) = a1;
  return _swift_task_switch(sub_100788DD4, 0, 0);
}

uint64_t sub_100788DD4()
{
  uint64_t v1 = *(void *)(v0 + 16);
  char v2 = *(unsigned char *)(v0 + 56);
  type metadata accessor for AnalyticsEvent(0);
  uint64_t v3 = (char *)swift_allocObject();
  *(void *)(v0 + 24) = v3;
  swift_defaultActor_initialize();
  *((void *)v3 + 14) = sub_10092D664((uint64_t)_swiftEmptyArrayStorage);
  UUID.init()();
  uint64_t v4 = &v3[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
  uint64_t v5 = type metadata accessor for DispatchTime();
  uint64_t v6 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  v6(v4, 1, 1, v5);
  v6(&v3[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v5);
  *((void *)v3 + 15) = 0xD00000000000002FLL;
  *((void *)v3 + 16) = 0x80000001014074D0;
  uint64_t v7 = swift_task_alloc();
  *(void *)(v0 + 32) = v7;
  *(unsigned char *)(v7 + 16) = v2;
  *(void *)(v7 + 24) = v1;
  return _swift_task_switch(sub_100788F44, v3, 0);
}

uint64_t sub_100788F44()
{
  sub_10118B228((uint64_t)sub_1007B1360);
  swift_task_dealloc();
  return _swift_task_switch(sub_100788FFC, 0, 0);
}

uint64_t sub_100788FFC()
{
  type metadata accessor for AnalyticsPublisher();
  v0[5] = swift_allocObject();
  swift_defaultActor_initialize();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[6] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1007890B0;
  uint64_t v2 = v0[3];
  return sub_101196838(v2);
}

uint64_t sub_1007890B0()
{
  swift_task_dealloc();
  swift_release();
  return _swift_task_switch(sub_10066D044, 0, 0);
}

void *sub_1007891C8(char a1, uint64_t a2)
{
  uint64_t v45 = a2;
  uint64_t v3 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C((uint64_t *)&unk_10166BFA0);
  __chkstk_darwin(v6 - 8);
  uint64_t v8 = (char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v44 = type metadata accessor for AccessoryProductInfo();
  uint64_t v9 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v43 = (uint64_t)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C(&qword_1016653B0);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for AccessoryMetadata(0);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v46 = _swiftEmptyDictionarySingleton;
  sub_10016D430(0, 1, 0xD000000000000010, 0x8000000101407500, isUniquelyReferenced_nonNull_native);
  uint64_t v19 = v46;
  swift_bridgeObjectRelease();
  switch(a1)
  {
    case 4:
      break;
    default:
      NSString v20 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      char v21 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v46 = v19;
      sub_10016D430((uint64_t)v20, 0, 0x7954656369766564, 0xEA00000000006570, v21);
      uint64_t v19 = v46;
      swift_bridgeObjectRelease();
      break;
  }
  uint64_t v22 = (int *)type metadata accessor for WildModeAssociationRecord(0);
  sub_10001D074(v45 + v22[14], (uint64_t)v13, &qword_1016653B0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
  {
    sub_10001DAB4((uint64_t)v13, &qword_1016653B0);
    uint64_t v23 = v44;
  }
  else
  {
    sub_1007B136C((uint64_t)v13, (uint64_t)v17, type metadata accessor for AccessoryMetadata);
    char v24 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v46 = v19;
    sub_10016D430(1, 1, 0x6863746546736961, 0xEF73736563637553, v24);
    uint64_t v25 = v46;
    swift_bridgeObjectRelease();
    sub_1009CD110();
    NSString v26 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    char v27 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v46 = v25;
    sub_10016D430((uint64_t)v26, 0, 0x6F69737265566D66, 0xEA0000000000736ELL, v27);
    uint64_t v19 = v46;
    swift_bridgeObjectRelease();
    if ((v17[*(int *)(v14 + 36) + 4] & 1) == 0)
    {
      sub_1009CD110();
      NSString v28 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      char v29 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v46 = v19;
      sub_10016D430((uint64_t)v28, 0, 0x69737265566E6D66, 0xEA00000000006E6FLL, v29);
      uint64_t v19 = v46;
      swift_bridgeObjectRelease();
    }
    uint64_t v23 = v44;
    sub_1007AFBFC((uint64_t)v17, type metadata accessor for AccessoryMetadata);
  }
  sub_10001D074(v45 + v22[15], (uint64_t)v8, (uint64_t *)&unk_10166BFA0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v8, 1, v23) == 1)
  {
    sub_10001DAB4((uint64_t)v8, (uint64_t *)&unk_10166BFA0);
  }
  else
  {
    uint64_t v30 = v43;
    sub_1007B136C((uint64_t)v8, v43, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
    char v31 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v46 = v19;
    sub_10016D430(1, 1, 0xD000000000000014, 0x8000000101407540, v31);
    uint64_t v32 = v46;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    NSString v33 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    char v34 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v46 = v32;
    sub_10016D430((uint64_t)v33, 0, 0x49746375646F7270, 0xE900000000000064, v34);
    uint64_t v19 = v46;
    swift_bridgeObjectRelease();
    sub_1007AFBFC(v30, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
  }
  sub_10001D074(v45 + v22[5], (uint64_t)v5, &qword_101638CF0);
  uint64_t v35 = type metadata accessor for UUID();
  BOOL v36 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v35 - 8) + 48))(v5, 1, v35) != 1;
  sub_10001DAB4((uint64_t)v5, &qword_101638CF0);
  char v37 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v46 = v19;
  sub_10016D430(v36, 1, 0x796C696D61467369, 0xEE006E6F63616542, v37);
  uint64_t v38 = v46;
  swift_bridgeObjectRelease();
  Class isa = Int._bridgeToObjectiveC()().super.super.isa;
  char v40 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v46 = v38;
  sub_10016D430((uint64_t)isa, 0, 0xD000000000000015, 0x8000000101407520, v40);
  uint64_t v41 = v46;
  swift_bridgeObjectRelease();
  return v41;
}

uint64_t sub_10078992C(char a1, uint64_t a2)
{
  *(void *)(v2 + 16) = a2;
  *(unsigned char *)(v2 + 56) = a1;
  return _swift_task_switch(sub_100789950, 0, 0);
}

uint64_t sub_100789950()
{
  uint64_t v1 = *(void *)(v0 + 16);
  char v2 = *(unsigned char *)(v0 + 56);
  type metadata accessor for AnalyticsEvent(0);
  uint64_t v3 = (char *)swift_allocObject();
  *(void *)(v0 + 24) = v3;
  swift_defaultActor_initialize();
  *((void *)v3 + 14) = sub_10092D664((uint64_t)_swiftEmptyArrayStorage);
  UUID.init()();
  uint64_t v4 = &v3[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
  uint64_t v5 = type metadata accessor for DispatchTime();
  uint64_t v6 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56);
  v6(v4, 1, 1, v5);
  v6(&v3[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1, 1, v5);
  *((void *)v3 + 15) = 0xD00000000000002FLL;
  *((void *)v3 + 16) = 0x80000001014074D0;
  uint64_t v7 = swift_task_alloc();
  *(void *)(v0 + 32) = v7;
  *(unsigned char *)(v7 + 16) = v2;
  *(void *)(v7 + 24) = v1;
  return _swift_task_switch(sub_100789AC0, v3, 0);
}

uint64_t sub_100789AC0()
{
  sub_10118B228((uint64_t)sub_1007B13D4);
  swift_task_dealloc();
  return _swift_task_switch(sub_100788FFC, 0, 0);
}

void *sub_100789B78(char a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)&v50 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C((uint64_t *)&unk_10166BFA0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for AccessoryProductInfo();
  uint64_t v52 = *(void *)(v10 - 8);
  uint64_t v53 = v10;
  __chkstk_darwin(v10);
  uint64_t v51 = (uint64_t)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000588C(&qword_1016653B0);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for AccessoryMetadata(0);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (a1)
  {
    uint64_t v55 = _swiftEmptyDictionarySingleton;
    sub_10016D430(1, 1, 0xD000000000000010, 0x8000000101407500, isUniquelyReferenced_nonNull_native);
    NSString v20 = v55;
    swift_bridgeObjectRelease();
    char v21 = (int *)type metadata accessor for WildModeAssociationRecord(0);
    switch(*(unsigned char *)(a2 + v21[13]))
    {
      case 4:
        break;
      default:
        uint64_t v24 = a2;
        NSString v25 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        char v26 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v55 = v20;
        uint64_t v27 = (uint64_t)v25;
        a2 = v24;
        sub_10016D430(v27, 0, 0x7954656369766564, 0xEA00000000006570, v26);
        NSString v20 = v55;
        swift_bridgeObjectRelease();
        break;
    }
  }
  else
  {
    uint64_t v55 = _swiftEmptyDictionarySingleton;
    sub_10016D430(0, 1, 0xD000000000000010, 0x8000000101407500, isUniquelyReferenced_nonNull_native);
    NSString v20 = v55;
    swift_bridgeObjectRelease();
    uint64_t v22 = type metadata accessor for WildModeAssociationRecord(0);
    uint64_t v23 = *(int *)(v22 + 52);
    uint64_t v54 = a2;
    char v21 = (int *)v22;
    switch(*(unsigned char *)(a2 + v23))
    {
      case 4:
        break;
      default:
        NSString v28 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        char v29 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v55 = v20;
        sub_10016D430((uint64_t)v28, 0, 0x7954656369766564, 0xEA00000000006570, v29);
        NSString v20 = v55;
        swift_bridgeObjectRelease();
        break;
    }
    a2 = v54;
    sub_10001D074(v54 + v21[14], (uint64_t)v14, &qword_1016653B0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
    {
      sub_10001DAB4((uint64_t)v14, &qword_1016653B0);
      uint64_t v30 = v53;
    }
    else
    {
      sub_1007B136C((uint64_t)v14, (uint64_t)v18, type metadata accessor for AccessoryMetadata);
      char v31 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v55 = v20;
      sub_10016D430(1, 1, 0x6863746546736961, 0xEF73736563637553, v31);
      uint64_t v32 = v55;
      swift_bridgeObjectRelease();
      sub_1009CD110();
      NSString v33 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      char v34 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v55 = v32;
      sub_10016D430((uint64_t)v33, 0, 0x6F69737265566D66, 0xEA0000000000736ELL, v34);
      NSString v20 = v55;
      swift_bridgeObjectRelease();
      if ((v18[*(int *)(v15 + 36) + 4] & 1) == 0)
      {
        sub_1009CD110();
        NSString v35 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        char v36 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v55 = v20;
        sub_10016D430((uint64_t)v35, 0, 0x69737265566E6D66, 0xEA00000000006E6FLL, v36);
        NSString v20 = v55;
        swift_bridgeObjectRelease();
      }
      uint64_t v30 = v53;
      sub_1007AFBFC((uint64_t)v18, type metadata accessor for AccessoryMetadata);
      a2 = v54;
    }
    sub_10001D074(a2 + v21[15], (uint64_t)v9, (uint64_t *)&unk_10166BFA0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v9, 1, v30) == 1)
    {
      sub_10001DAB4((uint64_t)v9, (uint64_t *)&unk_10166BFA0);
    }
    else
    {
      uint64_t v37 = v51;
      sub_1007B136C((uint64_t)v9, v51, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
      char v38 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v55 = v20;
      sub_10016D430(1, 1, 0xD000000000000014, 0x8000000101407540, v38);
      uint64_t v39 = v55;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      NSString v40 = String._bridgeToObjectiveC()();
      a2 = v54;
      swift_bridgeObjectRelease();
      char v41 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v55 = v39;
      sub_10016D430((uint64_t)v40, 0, 0x49746375646F7270, 0xE900000000000064, v41);
      NSString v20 = v55;
      swift_bridgeObjectRelease();
      sub_1007AFBFC(v37, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
    }
  }
  type metadata accessor for WildModeAssociationRecord(0);
  sub_10001D074(a2 + v21[5], (uint64_t)v6, &qword_101638CF0);
  uint64_t v42 = type metadata accessor for UUID();
  BOOL v43 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v42 - 8) + 48))(v6, 1, v42) != 1;
  sub_10001DAB4((uint64_t)v6, &qword_101638CF0);
  char v44 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v55 = v20;
  sub_10016D430(v43, 1, 0x796C696D61467369, 0xEE006E6F63616542, v44);
  uint64_t v45 = v55;
  swift_bridgeObjectRelease();
  Class isa = Int._bridgeToObjectiveC()().super.super.isa;
  char v47 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v55 = v45;
  sub_10016D430((uint64_t)isa, 0, 0xD000000000000015, 0x8000000101407520, v47);
  uint64_t v48 = v55;
  swift_bridgeObjectRelease();
  return v48;
}

uint64_t sub_10078A424(uint64_t a1, Swift::UInt8 a2, uint64_t a3, char a4, void (*a5)(uint64_t *), uint64_t a6)
{
  uint64_t v63 = a3;
  os_log_type_t v66 = a5;
  uint64_t v67 = a6;
  uint64_t v68 = a1;
  uint64_t v8 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v8 - 8);
  uint64_t v62 = (char *)&v59 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v61 = sub_10000588C(&qword_10164B3F8);
  __chkstk_darwin(v61);
  uint64_t v60 = (uint64_t *)((char *)&v59 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = type metadata accessor for MACAddress();
  uint64_t v65 = *(void *)(v11 - 8);
  uint64_t v12 = *(void *)(v65 + 64);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v59 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v59 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v59 - v18;
  if (qword_101637188 != -1) {
    swift_once();
  }
  NSString v20 = (void *)qword_10170EE68;
  id v21 = [self sharedInstance];
  unsigned int v22 = [v21 isInternalBuild];

  if (v22
    && (NSString v23 = String._bridgeToObjectiveC()(),
        unsigned int v24 = [v20 BOOLForKey:v23],
        v23,
        v24))
  {
    if (qword_101636CB0 != -1) {
      swift_once();
    }
    uint64_t v25 = type metadata accessor for Logger();
    sub_100010324(v25, (uint64_t)qword_10164D4D0);
    char v26 = Logger.logObject.getter();
    os_log_type_t v27 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v26, v27))
    {
      NSString v28 = (uint8_t *)swift_slowAlloc();
      uint64_t v70 = swift_slowAlloc();
      *(_DWORD *)NSString v28 = 136446210;
      uint64_t v69 = sub_1008FA0F0(0xD000000000000043, 0x80000001014072A0, &v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "%{public}s ForceReadingHawkeyeAIS is enabled!", v28, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    return sub_10078B0C8(v68, 2u, v63, v66, v67);
  }
  else if (a4)
  {
    uint64_t v30 = v65;
    if (qword_101636CA8 != -1) {
      swift_once();
    }
    uint64_t v31 = type metadata accessor for Logger();
    sub_100010324(v31, (uint64_t)qword_10170E318);
    uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(v30 + 16);
    v32(v17, v68, v11);
    NSString v33 = Logger.logObject.getter();
    os_log_type_t v34 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = swift_slowAlloc();
      uint64_t v64 = v32;
      uint64_t v36 = v35;
      uint64_t v63 = swift_slowAlloc();
      uint64_t v70 = v63;
      *(_DWORD *)uint64_t v36 = 136446466;
      uint64_t v69 = sub_1008FA0F0(0xD000000000000043, 0x80000001014072A0, &v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v36 + 12) = 2082;
      uint64_t v61 = v36 + 14;
      sub_100796E74((unint64_t *)&qword_101649EE0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
      uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v69 = sub_1008FA0F0(v37, v38, &v70);
      uint64_t v30 = v65;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v17, v11);
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "%{public}s for Posh accessory with %{public}s", (uint8_t *)v36, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      uint64_t v32 = v64;
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v30 + 8))(v17, v11);
    }

    uint64_t v46 = type metadata accessor for TaskPriority();
    uint64_t v47 = (uint64_t)v62;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56))(v62, 1, 1, v46);
    v32(v14, v68, v11);
    unint64_t v48 = (*(unsigned __int8 *)(v30 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80);
    uint64_t v49 = swift_allocObject();
    *(void *)(v49 + 16) = 0;
    *(void *)(v49 + 24) = 0;
    (*(void (**)(unint64_t, char *, uint64_t))(v30 + 32))(v49 + v48, v14, v11);
    uint64_t v50 = (void *)(v49 + ((v12 + v48 + 7) & 0xFFFFFFFFFFFFFFF8));
    uint64_t v51 = v67;
    *uint64_t v50 = v66;
    v50[1] = v51;
    swift_retain();
    sub_1008F5E44(v47, (uint64_t)&unk_10164D858, v49);
    return swift_release();
  }
  else
  {
    uint64_t v39 = v65;
    if (a2 == 4)
    {
      if (qword_101636CB0 != -1) {
        swift_once();
      }
      uint64_t v40 = type metadata accessor for Logger();
      sub_100010324(v40, (uint64_t)qword_10164D4D0);
      (*(void (**)(char *, uint64_t, uint64_t))(v39 + 16))(v19, v68, v11);
      char v41 = Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v41, v42))
      {
        uint64_t v43 = swift_slowAlloc();
        uint64_t v70 = swift_slowAlloc();
        *(_DWORD *)uint64_t v43 = 136446466;
        uint64_t v69 = sub_1008FA0F0(0xD000000000000043, 0x80000001014072A0, &v70);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        *(_WORD *)(v43 + 12) = 2082;
        sub_100796E74((unint64_t *)&qword_101649EE0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
        uint64_t v44 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v69 = sub_1008FA0F0(v44, v45, &v70);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v39 + 8))(v19, v11);
        _os_log_impl((void *)&_mh_execute_header, v41, v42, "%{public}s for %{public}s with no device type!", (uint8_t *)v43, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        (*(void (**)(char *, uint64_t))(v39 + 8))(v19, v11);
      }

      sub_1007AF880();
      uint64_t v56 = swift_allocError();
      unsigned char *v57 = 3;
      uint64_t v58 = v60;
      *uint64_t v60 = v56;
      swift_storeEnumTagMultiPayload();
      v66(v58);
      return sub_10001DAB4((uint64_t)v58, &qword_10164B3F8);
    }
    else
    {
      uint64_t v53 = v67;
      uint64_t v52 = v68;
      uint64_t v54 = v63;
      uint64_t v55 = v66;
      return sub_10078B0C8(v52, a2, v54, v55, v53);
    }
  }
}

uint64_t sub_10078ADAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[2] = a5;
  v6[3] = a6;
  v6[4] = sub_10000588C(&qword_10164B3F8);
  __n128 v6[5] = swift_task_alloc();
  type metadata accessor for AccessoryMetadata(0);
  uint64_t v8 = swift_task_alloc();
  v6[6] = v8;
  type metadata accessor for AccessoryMetadataManager();
  uint64_t v9 = (void *)swift_task_alloc();
  v6[7] = v9;
  *uint64_t v9 = v6;
  v9[1] = sub_10078AEC8;
  return sub_100312E20(v8, a4);
}

uint64_t sub_10078AEC8()
{
  *(void *)(*(void *)v1 + 64) = v0;
  swift_task_dealloc();
  if (v0) {
    char v2 = sub_1006910B4;
  }
  else {
    char v2 = sub_10078AFDC;
  }
  return _swift_task_switch(v2, 0, 0);
}

uint64_t sub_10078AFDC()
{
  uint64_t v2 = v0[5];
  uint64_t v1 = v0[6];
  uint64_t v3 = (void (*)(uint64_t))v0[2];
  sub_1007AFB78(v1, v2, type metadata accessor for AccessoryMetadata);
  swift_storeEnumTagMultiPayload();
  v3(v2);
  sub_10001DAB4(v2, &qword_10164B3F8);
  sub_1007AFBFC(v1, type metadata accessor for AccessoryMetadata);
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(void))v0[1];
  return v4();
}

uint64_t sub_10078B0C8(uint64_t a1, Swift::UInt8 a2, uint64_t a3, void (*a4)(uint64_t *), uint64_t a5)
{
  uint64_t v128 = a4;
  uint64_t v129 = a5;
  uint64_t v125 = a3;
  uint64_t v126 = a1;
  uint64_t v110 = sub_10000588C(&qword_10164D760);
  uint64_t v109 = *(void *)(v110 - 8);
  __chkstk_darwin(v110);
  uint64_t v107 = (char *)&v96 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v115 = sub_10000588C(&qword_10164D768);
  uint64_t v114 = *(void *)(v115 - 8);
  __chkstk_darwin(v115);
  uint64_t v111 = (char *)&v96 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_10164D770);
  uint64_t v120 = *(void *)(v8 - 8);
  uint64_t v121 = v8;
  __chkstk_darwin(v8);
  uint64_t v118 = (char *)&v96 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v106 = type metadata accessor for MACAddress();
  uint64_t v105 = *(void *)(v106 - 8);
  __chkstk_darwin(v106);
  uint64_t v103 = v10;
  id v104 = (char *)&v96 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v113 = sub_10000588C(&qword_10164D778);
  uint64_t v112 = *(void *)(v113 - 8);
  __chkstk_darwin(v113);
  uint64_t v108 = (char *)&v96 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v119 = sub_10000588C(&qword_10164D780);
  uint64_t v117 = *(void *)(v119 - 8);
  __chkstk_darwin(v119);
  int v116 = (char *)&v96 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v99 = sub_10000588C(&qword_10164D758);
  uint64_t v98 = *(void *)(v99 - 8);
  __chkstk_darwin(v99);
  uint64_t v97 = (char *)&v96 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v123 = sub_10000588C(&qword_10164B3F8);
  __chkstk_darwin(v123);
  uint64_t v124 = (uint64_t *)((char *)&v96 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = sub_10000588C(&qword_1016653B0);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)&v96 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for AccessoryMetadata(0);
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v102 = (uint64_t)&v96 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_10000588C((uint64_t *)&unk_101653D50);
  __chkstk_darwin(v21 - 8);
  NSString v23 = (char *)&v96 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v100 = (uint64_t)&v96 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v30 = (char *)&v96 - v29;
  uint64_t v31 = __chkstk_darwin(v28);
  uint64_t v101 = (uint64_t)&v96 - v32;
  __chkstk_darwin(v31);
  uint64_t v122 = (uint64_t)&v96 - v33;
  Swift::Int v34 = sub_100DF342C((uint64_t)&off_1015A2770);
  BOOL v35 = sub_100DC7E30(a2, v34);
  swift_bridgeObjectRelease();
  if (v35)
  {
LABEL_16:
    switch(a2)
    {
      case 1u:
        if (qword_101636CD8 != -1) {
          swift_once();
        }
        OS_dispatch_queue.sync<A>(execute:)();
        char v62 = sub_1010ABD84(v130[0]);
        swift_bridgeObjectRelease();
        if ((v62 & 1) == 0)
        {
          if (qword_101636CA8 != -1) {
            swift_once();
          }
          uint64_t v90 = type metadata accessor for Logger();
          sub_100010324(v90, (uint64_t)qword_10170E318);
          uint64_t v91 = Logger.logObject.getter();
          os_log_type_t v92 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v91, v92))
          {
            uint64_t v93 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v93 = 0;
            _os_log_impl((void *)&_mh_execute_header, v91, v92, "Non-owner ranging is disabled. Skipping AIS fetch for AirTag.", v93, 2u);
            swift_slowDealloc();
          }

          sub_1007AF880();
          uint64_t v59 = swift_allocError();
          char v61 = 4;
          goto LABEL_34;
        }
        v130[0] = sub_1002FA3F0(v126);
        sub_10000588C(&qword_10164D6D0);
        sub_10000588C(&qword_101638D40);
        sub_100062734((unint64_t *)&unk_10166C140, &qword_10164D6D0);
        uint64_t v63 = v97;
        Publisher.mapError<A>(_:)();
        swift_release();
        uint64_t v64 = swift_allocObject();
        uint64_t v65 = v129;
        *(void *)(v64 + 16) = v128;
        *(void *)(v64 + 24) = v65;
        sub_100062734(&qword_10164D7B8, &qword_10164D758);
        swift_retain();
        uint64_t v66 = v99;
        Publisher.oneshot(_:)();
        swift_release();
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v98 + 8))(v63, v66);
        break;
      case 2u:
        uint64_t v68 = swift_allocObject();
        swift_weakInit();
        uint64_t v69 = v105;
        uint64_t v70 = v104;
        uint64_t v71 = v106;
        (*(void (**)(char *, uint64_t, uint64_t))(v105 + 16))(v104, v126, v106);
        unint64_t v72 = (*(unsigned __int8 *)(v69 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80);
        unint64_t v73 = (v103 + v72 + 7) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v74 = swift_allocObject();
        (*(void (**)(unint64_t, char *, uint64_t))(v69 + 32))(v74 + v72, v70, v71);
        unint64_t v75 = v74 + v73;
        *(void *)unint64_t v75 = v68;
        *(unsigned char *)(v75 + 8) = 0;
        sub_10000588C(&qword_1016417D8);
        swift_allocObject();
        v130[0] = Future.init(_:)();
        sub_100062734((unint64_t *)&unk_10166C130, &qword_1016417D8);
        uint64_t v76 = Publisher.eraseToAnyPublisher()();
        swift_release();
        v130[0] = v76;
        sub_10000588C(&qword_10164D6D0);
        sub_100062734((unint64_t *)&unk_10166C140, &qword_10164D6D0);
        uint64_t v77 = v108;
        Publisher.timeout(_:queue:customError:)();
        swift_release();
        sub_10000588C(&qword_101638D40);
        sub_100062734(&qword_10164D7A8, &qword_10164D778);
        os_log_type_t v78 = v116;
        uint64_t v79 = v113;
        Publisher.mapError<A>(_:)();
        (*(void (**)(char *, uint64_t))(v112 + 8))(v77, v79);
        uint64_t v80 = swift_allocObject();
        uint64_t v81 = v129;
        *(void *)(v80 + 16) = v128;
        *(void *)(v80 + 24) = v81;
        sub_100062734(&qword_10164D7B0, &qword_10164D780);
        swift_retain();
        uint64_t v82 = v119;
        Publisher.oneshot(_:)();
        swift_release();
        uint64_t v83 = v117;
        goto LABEL_28;
      case 3u:
        v130[0] = sub_1002F8440();
        type metadata accessor for BluetoothCommunicationCoordinator.Error();
        sub_10000588C((uint64_t *)&unk_10166C0A0);
        sub_100062734(&qword_10164D788, (uint64_t *)&unk_10166C0A0);
        sub_100796E74((unint64_t *)&unk_1016565D0, (void (*)(uint64_t))type metadata accessor for BluetoothCommunicationCoordinator.Error);
        uint64_t v84 = v107;
        Publisher<>.setFailureType<A>(to:)();
        swift_release();
        sub_100062734(&qword_10164D790, &qword_10164D760);
        int v85 = v111;
        uint64_t v86 = v110;
        Publisher.timeout(_:queue:customError:)();
        (*(void (**)(char *, uint64_t))(v109 + 8))(v84, v86);
        sub_10000588C(&qword_101638D40);
        sub_100062734(&qword_10164D798, &qword_10164D768);
        os_log_type_t v78 = v118;
        uint64_t v87 = v115;
        Publisher.mapError<A>(_:)();
        (*(void (**)(char *, uint64_t))(v114 + 8))(v85, v87);
        uint64_t v88 = swift_allocObject();
        uint64_t v89 = v129;
        *(void *)(v88 + 16) = v128;
        *(void *)(v88 + 24) = v89;
        sub_100062734(&qword_10164D7A0, &qword_10164D770);
        swift_retain();
        uint64_t v82 = v121;
        Publisher.oneshot(_:)();
        swift_release();
        uint64_t v83 = v120;
LABEL_28:
        uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v83 + 8))(v78, v82);
        break;
      default:
        if (qword_101636CA8 != -1) {
          swift_once();
        }
        uint64_t v55 = type metadata accessor for Logger();
        sub_100010324(v55, (uint64_t)qword_10170E318);
        uint64_t v56 = Logger.logObject.getter();
        os_log_type_t v57 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v56, v57))
        {
          uint64_t v58 = (uint8_t *)swift_slowAlloc();
          v130[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v58 = 136446210;
          uint64_t v131 = sub_1008FA0F0(0x656C707061, 0xE500000000000000, v130);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v56, v57, "readMetadata: %{public}s is not supported!", v58, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }

        sub_1007AF880();
        uint64_t v59 = swift_allocError();
        char v61 = 3;
LABEL_34:
        *uint64_t v60 = v61;
        uint64_t v94 = v124;
        *uint64_t v124 = v59;
        swift_storeEnumTagMultiPayload();
        v128(v94);
        uint64_t result = sub_10001DAB4((uint64_t)v94, &qword_10164B3F8);
        break;
    }
    return result;
  }
  Swift::UInt8 v36 = a2;
  sub_10001D074(v125, (uint64_t)v23, (uint64_t *)&unk_101653D50);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24) == 1)
  {
    sub_10001DAB4((uint64_t)v23, (uint64_t *)&unk_101653D50);
LABEL_15:
    a2 = v36;
    goto LABEL_16;
  }
  uint64_t v37 = v24;
  uint64_t v38 = v122;
  sub_1007B136C((uint64_t)v23, v122, type metadata accessor for SharedBeaconRecord);
  v130[3] = v24;
  v130[4] = sub_100796E74(&qword_101639EA0, (void (*)(uint64_t))type metadata accessor for SharedBeaconRecord);
  uint64_t v39 = sub_10001D958(v130);
  sub_1007AFB78(v38, (uint64_t)v39, type metadata accessor for SharedBeaconRecord);
  sub_100D17160(v130, (uint64_t)v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
  {
    sub_10001DAB4((uint64_t)v17, &qword_1016653B0);
    if (qword_101636CA8 != -1) {
      swift_once();
    }
    uint64_t v40 = type metadata accessor for Logger();
    sub_100010324(v40, (uint64_t)qword_10170E318);
    sub_1007AFB78(v38, (uint64_t)v30, type metadata accessor for SharedBeaconRecord);
    uint64_t v41 = v100;
    sub_1007AFB78(v38, v100, type metadata accessor for SharedBeaconRecord);
    os_log_type_t v42 = Logger.logObject.getter();
    os_log_type_t v43 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v42, v43))
    {
      uint64_t v44 = swift_slowAlloc();
      *(_DWORD *)uint64_t v44 = 134218240;
      uint64_t v45 = *(void *)&v30[*(int *)(v37 + 48)];
      sub_1007AFBFC((uint64_t)v30, type metadata accessor for SharedBeaconRecord);
      v130[0] = v45;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v44 + 12) = 2048;
      uint64_t v46 = *(void *)(v41 + *(int *)(v37 + 44));
      sub_1007AFBFC(v41, type metadata accessor for SharedBeaconRecord);
      v130[0] = v46;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v42, v43, "Invalid product data from shared beacon %ld-%ld", (uint8_t *)v44, 0x16u);
      uint64_t v38 = v122;
      swift_slowDealloc();
    }
    else
    {
      sub_1007AFBFC(v41, type metadata accessor for SharedBeaconRecord);
      sub_1007AFBFC((uint64_t)v30, type metadata accessor for SharedBeaconRecord);
    }

    sub_1007AFBFC(v38, type metadata accessor for SharedBeaconRecord);
    goto LABEL_15;
  }
  uint64_t v47 = v102;
  sub_1007B136C((uint64_t)v17, v102, type metadata accessor for AccessoryMetadata);
  if (qword_101636CA8 != -1) {
    swift_once();
  }
  uint64_t v48 = type metadata accessor for Logger();
  sub_100010324(v48, (uint64_t)qword_10170E318);
  uint64_t v49 = v101;
  sub_1007AFB78(v38, v101, type metadata accessor for SharedBeaconRecord);
  uint64_t v50 = Logger.logObject.getter();
  os_log_type_t v51 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v50, v51))
  {
    uint64_t v52 = swift_slowAlloc();
    v130[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v52 = 141558275;
    uint64_t v131 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v52 + 12) = 2081;
    uint64_t v127 = v52 + 14;
    type metadata accessor for UUID();
    sub_100796E74((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v53 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v131 = sub_1008FA0F0(v53, v54, v130);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1007AFBFC(v49, type metadata accessor for SharedBeaconRecord);
    _os_log_impl((void *)&_mh_execute_header, v50, v51, "Skipping AIS fetch for family beacon %{private,mask.hash}s", (uint8_t *)v52, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1007AFBFC(v49, type metadata accessor for SharedBeaconRecord);
  }

  uint64_t v95 = v124;
  sub_1007AFB78(v47, (uint64_t)v124, type metadata accessor for AccessoryMetadata);
  swift_storeEnumTagMultiPayload();
  v128(v95);
  sub_10001DAB4((uint64_t)v95, &qword_10164B3F8);
  sub_1007AFBFC(v47, type metadata accessor for AccessoryMetadata);
  return sub_1007AFBFC(v38, type metadata accessor for SharedBeaconRecord);
}

uint64_t sub_10078C710@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  type metadata accessor for BluetoothCommunicationCoordinator.Error();
  sub_100796E74((unint64_t *)&unk_1016565D0, (void (*)(uint64_t))type metadata accessor for BluetoothCommunicationCoordinator.Error);
  *a2 = swift_allocError();
  return sub_1007AFB78(a1, v4, (uint64_t (*)(void))type metadata accessor for BluetoothCommunicationCoordinator.Error);
}

uint64_t sub_10078C7B0(uint64_t a1, void (*a2)(char *))
{
  uint64_t v31 = a2;
  uint64_t v3 = sub_10000588C(&qword_10164D7C0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)v30 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = sub_10000588C(&qword_101641828);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)v30 - v10;
  uint64_t v12 = type metadata accessor for AccessoryMetadata(0);
  __chkstk_darwin(v12 - 8);
  uint64_t v14 = (char *)v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000588C(&qword_10164B3F8);
  __chkstk_darwin(v15);
  uint64_t v17 = (void *)((char *)v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001D074(a1, (uint64_t)v17, &qword_10164B3F8);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v18 = *v17;
    if (qword_101636CA8 != -1) {
      swift_once();
    }
    uint64_t v19 = type metadata accessor for Logger();
    sub_100010324(v19, (uint64_t)qword_10170E318);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v20 = Logger.logObject.getter();
    os_log_type_t v21 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v20, v21))
    {
      void v30[2] = v6;
      uint64_t v22 = (uint8_t *)swift_slowAlloc();
      uint64_t v23 = swift_slowAlloc();
      uint64_t v32 = v18;
      uint64_t v33 = v23;
      *(_DWORD *)uint64_t v22 = 136446210;
      v30[1] = v22 + 4;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v24 = String.init<A>(describing:)();
      uint64_t v32 = sub_1008FA0F0(v24, v25, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "readMetadataCombine failed due to %{public}s", v22, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    uint64_t v33 = v18;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v27 = type metadata accessor for BluetoothCommunicationCoordinator.Error();
    int v28 = swift_dynamicCast();
    uint64_t v29 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56);
    if (v28)
    {
      v29(v5, 0, 1, v27);
      sub_1007B136C((uint64_t)v5, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for BluetoothCommunicationCoordinator.Error);
    }
    else
    {
      v29(v5, 1, 1, v27);
      swift_storeEnumTagMultiPayload();
      sub_10001DAB4((uint64_t)v5, &qword_10164D7C0);
    }
    swift_storeEnumTagMultiPayload();
    v31(v9);
    swift_errorRelease();
    return sub_10001DAB4((uint64_t)v9, &qword_101641828);
  }
  else
  {
    sub_1007B136C((uint64_t)v17, (uint64_t)v14, type metadata accessor for AccessoryMetadata);
    sub_1007AFB78((uint64_t)v14, (uint64_t)v11, type metadata accessor for AccessoryMetadata);
    swift_storeEnumTagMultiPayload();
    v31(v11);
    sub_10001DAB4((uint64_t)v11, &qword_101641828);
    return sub_1007AFBFC((uint64_t)v14, type metadata accessor for AccessoryMetadata);
  }
}

void sub_10078CCC0(void *a1, void (*a2)(void), void (*a3)(unint64_t, unsigned char *, uint64_t))
{
  uint64_t v282 = a3;
  uint64_t v283 = a2;
  uint64_t v285 = a1;
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_101653D50);
  __chkstk_darwin(v4 - 8);
  uint64_t v260 = (uint64_t)v255 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v262 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v259 = *(void *)(v262 - 8);
  uint64_t v6 = __chkstk_darwin(v262);
  uint64_t v257 = (uint64_t)v255 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  long long v279 = (char *)v255 - v9;
  __chkstk_darwin(v8);
  uint64_t v261 = (uint64_t)v255 - v10;
  uint64_t v11 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v11 - 8);
  uint64_t v265 = (uint64_t)v255 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000588C(&qword_101657910);
  __chkstk_darwin(v13 - 8);
  uint64_t v269 = (uint64_t)v255 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  uint64_t v267 = *(void *)(v15 - 8);
  uint64_t v268 = v15;
  __chkstk_darwin(v15);
  uint64_t v266 = (uint64_t)v255 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v17 - 8);
  uint64_t v270 = (char *)v255 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_10000588C((uint64_t *)&unk_1016477E0);
  uint64_t v20 = __chkstk_darwin(v19 - 8);
  uint64_t v263 = (char *)v255 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = __chkstk_darwin(v20);
  unint64_t v256 = (char *)v255 - v23;
  __chkstk_darwin(v22);
  id v271 = (char *)v255 - v24;
  uint64_t v25 = type metadata accessor for MACAddress();
  uint64_t v274 = *(void *)(v25 - 8);
  uint64_t v275 = v25;
  uint64_t v26 = __chkstk_darwin(v25);
  uint64_t v264 = (char *)v255 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v258 = (uint64_t)v255 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v278 = (char *)v255 - v31;
  __chkstk_darwin(v30);
  uint64_t v272 = (uint64_t)v255 - v32;
  uint64_t v33 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v33 - 8);
  uint64_t v35 = (uint64_t)v255 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = type metadata accessor for Date();
  *(void *)&long long v284 = *(void *)(v36 - 8);
  uint64_t v37 = __chkstk_darwin(v36);
  *(void *)&long long v280 = (char *)v255 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37);
  uint64_t v281 = (char *)v255 - v39;
  static os_log_type_t.default.getter();
  if (qword_101637278 != -1) {
    goto LABEL_123;
  }
LABEL_2:
  uint64_t v277 = sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v40 = swift_allocObject();
  *(_OWORD *)(v40 + 16) = xmmword_101347BA0;
  v286[0] = *v3;
  sub_10000588C(&qword_10164D678);
  uint64_t v41 = String.init<A>(describing:)();
  uint64_t v43 = v42;
  *(void *)(v40 + 56) = &type metadata for String;
  unint64_t v44 = sub_10000B4CC();
  *(void *)(v40 + 32) = v41;
  *(void *)(v40 + 40) = v43;
  *(void *)(v40 + 96) = &type metadata for String;
  *(void *)(v40 + 104) = v44;
  unint64_t v276 = v44;
  *(void *)(v40 + 64) = v44;
  *(void *)(v40 + 72) = 0xD000000000000039;
  *(void *)(v40 + 80) = 0x8000000101406EC0;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  uint64_t v45 = v285;
  id v46 = [v285 trackingIdentifier];
  uint64_t v273 = v3;
  sub_100780834(v46, v35);

  uint64_t v47 = v284;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v284 + 48))(v35, 1, v36) == 1)
  {
    sub_10001DAB4(v35, (uint64_t *)&unk_10163AC90);
  }
  else
  {
    uint64_t v48 = v281;
    (*(void (**)(char *, uint64_t, uint64_t))(v47 + 32))(v281, v35, v36);
    uint64_t v49 = (char *)v280;
    static Date.trustedNow.getter(v280);
    char v50 = static Date.> infix(_:_:)();
    uint64_t v53 = *(void (**)(char *, char *))(v47 + 8);
    uint64_t v51 = v47 + 8;
    uint64_t v52 = v53;
    v53(v49, (char *)v36);
    if (v50)
    {
      *(void *)&long long v284 = v51;
      long long v279 = (char *)v36;
      uint64_t v54 = swift_allocObject();
      long long v280 = xmmword_101342130;
      *(_OWORD *)(v54 + 16) = xmmword_101342130;
      id v55 = [v45 trackingIdentifier];
      id v56 = [v55 advertisementData];

      uint64_t v57 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v59 = v58;

      uint64_t v60 = Data.hexString.getter();
      uint64_t v62 = v61;
      sub_10001CFB8(v57, v59);
      unint64_t v63 = v276;
      *(void *)(v54 + 56) = &type metadata for String;
      *(void *)(v54 + 64) = v63;
      *(void *)(v54 + 32) = v60;
      *(void *)(v54 + 40) = v62;
      uint64_t v64 = String.init(format:_:)();
      uint64_t v66 = v65;
      static os_log_type_t.default.getter();
      if (qword_1016372F0 != -1) {
        swift_once();
      }
      uint64_t v67 = swift_allocObject();
      *(_OWORD *)(v67 + 16) = v280;
      *(void *)(v67 + 56) = &type metadata for String;
      *(void *)(v67 + 64) = v63;
      *(void *)(v67 + 32) = v64;
      *(void *)(v67 + 40) = v66;
      swift_bridgeObjectRetain();
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      type metadata accessor for TrackingAvoidanceError(0);
      uint64_t v287 = 7;
      sub_10000588C((uint64_t *)&unk_101637F00);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = v280;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(inited + 40) = v69;
      *(void *)(inited + 72) = &type metadata for String;
      *(void *)(inited + 48) = v64;
      *(void *)(inited + 56) = v66;
      sub_10092CEEC(inited);
      sub_100796E74(&qword_101638410, type metadata accessor for TrackingAvoidanceError);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v70 = (void *)v286[0];
      ((void (*)(uint64_t))v283)(v286[0]);

      v52(v281, v279);
      return;
    }
    v52(v48, (char *)v36);
  }
  id v71 = [v45 observedLocations];
  sub_10001D4B0(0, &qword_101656690);
  unint64_t v72 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v72 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v73 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v73 = *(void *)((v72 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (!v73)
  {
    static os_log_type_t.error.getter();
    if (qword_1016372F0 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    type metadata accessor for TrackingAvoidanceError(0);
    uint64_t v287 = 4;
    sub_10000588C((uint64_t *)&unk_101637F00);
    uint64_t v80 = swift_initStackObject();
    *(_OWORD *)(v80 + 16) = xmmword_101342130;
    *(void *)(v80 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(v80 + 40) = v84;
    *(void *)(v80 + 72) = &type metadata for String;
    unint64_t v82 = 0xD000000000000027;
    uint64_t v83 = "location was not present in the request";
    goto LABEL_24;
  }
  id v74 = [v45 observedLocations];
  unint64_t v75 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v75 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v76 = _CocoaArrayWrapper.endIndex.getter();
    if (!v76) {
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v76 = *(void *)((v75 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v76) {
      goto LABEL_26;
    }
  }
  *(void *)&long long v284 = v75 & 0xC000000000000001;
  if ((v75 & 0xC000000000000001) != 0) {
    id v77 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v77 = *(id *)(v75 + 32);
  }
  os_log_type_t v78 = v77;
  char v79 = sub_100FC042C();

  if (v79)
  {
LABEL_17:
    swift_bridgeObjectRelease_n();
    goto LABEL_18;
  }
  if (v76 == 1)
  {
LABEL_26:
    swift_bridgeObjectRelease_n();
    uint64_t v86 = v285;
    id v87 = [v285 trackingIdentifier];
    id v88 = [v87 data];

    uint64_t v89 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v91 = v90;

    if (qword_101636CB0 != -1) {
      swift_once();
    }
    uint64_t v92 = type metadata accessor for Logger();
    uint64_t v93 = sub_100010324(v92, (uint64_t)qword_10164D4D0);
    sub_1000361E0(v89, v91);
    sub_1000361E0(v89, v91);
    uint64_t v94 = Logger.logObject.getter();
    os_log_type_t v95 = static os_log_type_t.default.getter();
    BOOL v96 = os_log_type_enabled(v94, v95);
    *(void *)&long long v284 = v93;
    uint64_t v281 = (char *)(v91 >> 62);
    if (v96)
    {
      uint64_t v97 = swift_slowAlloc();
      uint64_t v98 = swift_slowAlloc();
      v286[0] = v98;
      *(_DWORD *)uint64_t v97 = 134218242;
      uint64_t v99 = (void *)v98;
      uint64_t v100 = 0;
      switch(v91 >> 62)
      {
        case 1uLL:
          LODWORD(v100) = HIDWORD(v89) - v89;
          if (__OFSUB__(HIDWORD(v89), v89))
          {
            __break(1u);
LABEL_129:
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            swift_once();
LABEL_109:
            os_log(_:dso:log:_:_:)();
            uint64_t v209 = swift_allocObject();
            long long v284 = xmmword_101342130;
            *(_OWORD *)(v209 + 16) = xmmword_101342130;
            id v210 = [v99 trackingIdentifier];
            id v211 = [v210 advertisementData];

            uint64_t v212 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v214 = v213;

            uint64_t v215 = Data.hexString.getter();
            uint64_t v217 = v216;
            sub_10001CFB8(v212, v214);
            unint64_t v218 = v276;
            *(void *)(v209 + 56) = &type metadata for String;
            *(void *)(v209 + 64) = v218;
            *(void *)(v209 + 32) = v215;
            *(void *)(v209 + 40) = v217;
            uint64_t v219 = String.init(format:_:)();
            uint64_t v221 = v220;
            type metadata accessor for TrackingAvoidanceError(0);
            uint64_t v287 = 8;
            sub_10000588C((uint64_t *)&unk_101637F00);
            uint64_t v222 = swift_initStackObject();
            *(_OWORD *)(v222 + 16) = v284;
            *(void *)(v222 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
            *(void *)(v222 + 40) = v223;
            *(void *)(v222 + 72) = &type metadata for String;
            *(void *)(v222 + 48) = v219;
            *(void *)(v222 + 56) = v221;
            sub_10092CEEC(v222);
            sub_100796E74(&qword_101638410, type metadata accessor for TrackingAvoidanceError);
            _BridgedStoredNSError.init(_:userInfo:)();
            uint64_t v224 = (void *)v286[0];
            ((void (*)(uint64_t))v283)(v286[0]);

            sub_10001CFB8(v89, v91);
            sub_10001CFB8(v89, v91);
            sub_10001CFB8(v89, v91);
            goto LABEL_120;
          }
          uint64_t v100 = (int)v100;
LABEL_52:
          uint64_t v287 = v100;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v97 + 12) = 2082;
          uint64_t v121 = Data.hexString.getter();
          uint64_t v287 = sub_1008FA0F0(v121, v122, v286);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10001CFB8(v89, v91);
          sub_10001CFB8(v89, v91);
          _os_log_impl((void *)&_mh_execute_header, v94, v95, "Decoding advertisement from advertisementData[%ld]: %{public}s", (uint8_t *)v97, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          uint64_t v86 = v285;
          break;
        case 2uLL:
          uint64_t v119 = *(void *)(v89 + 16);
          uint64_t v118 = *(void *)(v89 + 24);
          BOOL v120 = __OFSUB__(v118, v119);
          uint64_t v100 = v118 - v119;
          if (!v120) {
            goto LABEL_52;
          }
          goto LABEL_129;
        case 3uLL:
          goto LABEL_52;
        default:
          uint64_t v100 = BYTE6(v91);
          goto LABEL_52;
      }
    }
    else
    {
      sub_10001CFB8(v89, v91);
      sub_10001CFB8(v89, v91);
    }
    id v123 = [v86 trackingIdentifier];
    unsigned int v124 = [v123 isPosh];

    id v125 = [v86 trackingIdentifier];
    unsigned int v126 = [v125 networkID];

    id v127 = [v86 trackingIdentifier];
    unsigned int v128 = [v127 status];

    if (v126 == 1) {
      char v129 = 5;
    }
    else {
      char v129 = 6;
    }
    if (v124) {
      LOBYTE(v130) = v129;
    }
    else {
      int v130 = (v128 >> 4) & 3;
    }
    uint64_t v131 = Logger.logObject.getter();
    os_log_type_t v132 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v131, v132))
    {
      *(void *)&long long v280 = v89;
      uint64_t v133 = (uint8_t *)swift_slowAlloc();
      v286[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v133 = 136446210;
      uint64_t v134 = sub_10078155C(v130);
      uint64_t v287 = sub_1008FA0F0(v134, v135, v286);
      uint64_t v89 = v280;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v131, v132, "UnauthorizedTrackingAdvertisementType: %{public}s", v133, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t v137 = v278;
    uint64_t v136 = (uint64_t)v279;
    uint64_t v99 = v285;
    switch(v130)
    {
      case 4u:
        uint64_t v139 = v285;
        uint64_t v140 = Logger.logObject.getter();
        os_log_type_t v141 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v140, v141))
        {
          uint64_t v142 = swift_slowAlloc();
          *(_DWORD *)uint64_t v142 = 67109632;
          id v143 = [v139 trackingIdentifier];
          unsigned int v144 = [v143 isPosh];

          LODWORD(v286[0]) = v144;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          *(void *)&long long v280 = v89;
          *(_WORD *)(v142 + 8) = 256;
          id v145 = [v139 trackingIdentifier];
          unsigned __int8 v146 = [v145 networkID];

          LOBYTE(v286[0]) = v146;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          *(_WORD *)(v142 + 11) = 256;
          id v147 = [v139 trackingIdentifier];
          unsigned __int8 v148 = [v147 status];

          LOBYTE(v286[0]) = v148;
          uint64_t v89 = v280;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          _os_log_impl((void *)&_mh_execute_header, v140, v141, "Unknown advertisement type. isPosh: %{BOOL}d networkID: %hhu status: %hhu", (uint8_t *)v142, 0xEu);
          swift_slowDealloc();
        }
        else
        {

          uint64_t v140 = v139;
        }

        type metadata accessor for TrackingAvoidanceError(0);
        uint64_t v287 = 6;
        sub_10000588C((uint64_t *)&unk_101637F00);
        uint64_t v163 = swift_initStackObject();
        *(_OWORD *)(v163 + 16) = xmmword_101342130;
        *(void *)(v163 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
        *(void *)(v163 + 40) = v164;
        *(void *)(v163 + 72) = &type metadata for String;
        uint64_t v165 = "Unknown advertisement type";
        goto LABEL_99;
      case 6u:
        id v149 = [v285 trackingIdentifier];
        id v150 = [v149 address];

        uint64_t v151 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v153 = v152;

        sub_1000361E0(v151, v153);
        uint64_t v154 = (uint64_t)v271;
        MACAddress.init(data:type:)();
        uint64_t v155 = v274;
        uint64_t v156 = v275;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v274 + 48))(v154, 1, v275) != 1)
        {
          uint64_t v281 = (char *)v91;
          uint64_t v166 = v272;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v155 + 32))(v272, v154, v156);
          (*(void (**)(char *, uint64_t, uint64_t))(v155 + 16))(v137, v166, v156);
          uint64_t v167 = Logger.logObject.getter();
          os_log_type_t v168 = static os_log_type_t.default.getter();
          if (os_log_type_enabled(v167, v168))
          {
            *(void *)&long long v284 = v167;
            uint64_t v169 = (uint8_t *)swift_slowAlloc();
            uint64_t v170 = swift_slowAlloc();
            *(void *)&long long v280 = v89;
            v286[0] = v170;
            *(_DWORD *)uint64_t v169 = 136446210;
            long long v279 = (char *)(v169 + 4);
            sub_100796E74((unint64_t *)&qword_101649EE0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
            uint64_t v171 = dispatch thunk of CustomStringConvertible.description.getter();
            uint64_t v287 = sub_1008FA0F0(v171, v172, v286);
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            uint64_t v173 = *(void (**)(char *, uint64_t))(v155 + 8);
            v173(v137, v275);
            uint64_t v174 = (void (*)(uint64_t, uint64_t))v173;
            uint64_t v167 = v284;
            _os_log_impl((void *)&_mh_execute_header, (os_log_t)v284, v168, "Posh address: %{public}s", v169, 0xCu);
            swift_arrayDestroy();
            uint64_t v89 = v280;
            swift_slowDealloc();
            uint64_t v156 = v275;
            swift_slowDealloc();
          }
          else
          {
            uint64_t v205 = *(void (**)(char *, uint64_t))(v155 + 8);
            v205(v137, v156);
            uint64_t v174 = (void (*)(uint64_t, uint64_t))v205;
          }

          uint64_t v206 = type metadata accessor for UUID();
          uint64_t v207 = (uint64_t)v270;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v206 - 8) + 56))(v270, 1, 1, v206);
          uint64_t v208 = v272;
          sub_10078F618(v272, v207, v285, 0, 0, 0, v283, v282);
          sub_10001CFB8(v151, v153);
          sub_10001CFB8(v89, (unint64_t)v281);
          sub_10001DAB4(v207, &qword_101638CF0);
          v174(v208, v156);
          return;
        }
        sub_10001DAB4(v154, (uint64_t *)&unk_1016477E0);
        sub_1000361E0(v151, v153);
        sub_1000361E0(v151, v153);
        uint64_t v157 = Logger.logObject.getter();
        os_log_type_t v158 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v157, v158))
        {
          *(void *)&long long v280 = v89;
          uint64_t v159 = (uint8_t *)swift_slowAlloc();
          uint64_t v285 = (void *)swift_slowAlloc();
          v286[0] = (uint64_t)v285;
          *(_DWORD *)uint64_t v159 = 136446210;
          uint64_t v160 = Data.hexString.getter();
          uint64_t v287 = sub_1008FA0F0(v160, v161, v286);
          uint64_t v89 = v280;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10001CFB8(v151, v153);
          sub_10001CFB8(v151, v153);
          _os_log_impl((void *)&_mh_execute_header, v157, v158, "Invalid MAC address %{public}s", v159, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_10001CFB8(v151, v153);
          sub_10001CFB8(v151, v153);
        }

        type metadata accessor for TrackingAvoidanceError(0);
        uint64_t v287 = 3;
        sub_10000588C((uint64_t *)&unk_101637F00);
        uint64_t v181 = swift_initStackObject();
        *(_OWORD *)(v181 + 16) = xmmword_101342130;
        *(void *)(v181 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
        *(void *)(v181 + 40) = v182;
        *(void *)(v181 + 72) = &type metadata for String;
        *(void *)(v181 + 48) = 0xD00000000000001FLL;
        *(void *)(v181 + 56) = 0x8000000101406F20;
        sub_10092CEEC(v181);
        sub_100796E74(&qword_101638410, type metadata accessor for TrackingAvoidanceError);
        _BridgedStoredNSError.init(_:userInfo:)();
        int v85 = (void *)v286[0];
        ((void (*)(uint64_t))v283)(v286[0]);
        sub_10001CFB8(v89, v91);
        uint64_t v183 = v151;
        unint64_t v184 = v153;
LABEL_100:
        sub_10001CFB8(v183, v184);
        goto LABEL_101;
      case 5u:
        switch((int)v281)
        {
          case 1:
            if (__OFSUB__(HIDWORD(v89), v89)) {
              goto LABEL_130;
            }
            uint64_t v138 = HIDWORD(v89) - (int)v89;
LABEL_81:
            sub_1000361E0(v89, v91);
LABEL_82:
            if (v138 == 28) {
              goto LABEL_93;
            }
LABEL_83:
            sub_10001CFB8(v89, v91);
            uint64_t v178 = Logger.logObject.getter();
            os_log_type_t v179 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v178, v179))
            {
              id v180 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)id v180 = 0;
              _os_log_impl((void *)&_mh_execute_header, v178, v179, "received an advertisement of unexpected length or format", v180, 2u);
              swift_slowDealloc();
            }
            break;
          case 2:
            uint64_t v177 = *(void *)(v89 + 16);
            uint64_t v176 = *(void *)(v89 + 24);
            uint64_t v138 = v176 - v177;
            if (!__OFSUB__(v176, v177)) {
              goto LABEL_81;
            }
            goto LABEL_131;
          case 3:
            goto LABEL_83;
          default:
            uint64_t v138 = BYTE6(v91);
            goto LABEL_82;
        }
LABEL_98:

        type metadata accessor for TrackingAvoidanceError(0);
        uint64_t v287 = 3;
        sub_10000588C((uint64_t *)&unk_101637F00);
        uint64_t v163 = swift_initStackObject();
        *(_OWORD *)(v163 + 16) = xmmword_101342130;
        *(void *)(v163 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
        *(void *)(v163 + 40) = v197;
        *(void *)(v163 + 72) = &type metadata for String;
        uint64_t v165 = "Advertisement is malformed";
LABEL_99:
        *(void *)(v163 + 48) = 0xD00000000000001ALL;
        *(void *)(v163 + 56) = (unint64_t)(v165 - 32) | 0x8000000000000000;
        sub_10092CEEC(v163);
        sub_100796E74(&qword_101638410, type metadata accessor for TrackingAvoidanceError);
        _BridgedStoredNSError.init(_:userInfo:)();
        int v85 = (void *)v286[0];
        ((void (*)(uint64_t))v283)(v286[0]);
        uint64_t v183 = v89;
        unint64_t v184 = v91;
        goto LABEL_100;
    }
    switch((int)v281)
    {
      case 1:
        if (__OFSUB__(HIDWORD(v89), v89)) {
          goto LABEL_132;
        }
        uint64_t v162 = HIDWORD(v89) - (int)v89;
LABEL_91:
        sub_1000361E0(v89, v91);
LABEL_92:
        if (v162 != 28)
        {
LABEL_96:
          sub_10001CFB8(v89, v91);
          uint64_t v178 = Logger.logObject.getter();
          os_log_type_t v195 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v178, v195))
          {
            uint64_t v196 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v196 = 0;
            _os_log_impl((void *)&_mh_execute_header, v178, v195, "received an advertisement of unexpected length or format", v196, 2u);
            swift_slowDealloc();
          }
          goto LABEL_98;
        }
LABEL_93:
        sub_1000361E0(v89, v91);
        type metadata accessor for BeaconKeyManager(0);
        OSAllocatedUnfairLock.callAsFunction<A>(_:)();
        uint64_t v187 = v269;
        sub_1012E41F8(v269);
        swift_release();
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v267 + 48))(v187, 1, v268) == 1)
        {
          sub_10001DAB4(v187, &qword_101657910);
          sub_1000361E0(v89, v91);
          uint64_t v188 = static MACAddress.length.getter();
          sub_100435A9C(v188, v89, v91, v286);
          uint64_t v189 = v263;
          MACAddress.init(data:type:)();
          uint64_t v190 = v274;
          uint64_t v191 = v275;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v274 + 48))(v189, 1, v275) != 1)
          {
            uint64_t v192 = (uint64_t)v264;
            (*(void (**)(char *, char *, uint64_t))(v190 + 32))(v264, v189, v191);
            uint64_t v193 = type metadata accessor for UUID();
            uint64_t v194 = (uint64_t)v270;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v193 - 8) + 56))(v270, 1, 1, v193);
            sub_10078F618(v192, v194, v99, 0, 0, 0, v283, v282);
            sub_10001CFB8(v89, v91);
            sub_10001CFB8(v89, v91);
            sub_10001CFB8(v89, v91);
            sub_10001DAB4(v194, &qword_101638CF0);
            (*(void (**)(uint64_t, uint64_t))(v190 + 8))(v192, v191);
            return;
          }
          __break(1u);
LABEL_136:
          __break(1u);
          JUMPOUT(0x10078F5E8);
        }
        uint64_t v198 = v266;
        sub_1007B136C(v187, v266, type metadata accessor for BeaconKeyManager.IndexInformation);
        uint64_t v199 = v265;
        sub_100ACD178(v265);
        uint64_t v200 = type metadata accessor for OwnedBeaconRecord();
        int v201 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v200 - 8) + 48))(v199, 1, v200);
        sub_10001DAB4(v199, &qword_10163B9F0);
        if (v201 == 1)
        {
          uint64_t v202 = v260;
          sub_100ACEADC(v198, v260);
          uint64_t v203 = v262;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v259 + 48))(v202, 1, v262) == 1)
          {
            sub_10001DAB4(v202, (uint64_t *)&unk_101653D50);
LABEL_105:
            type metadata accessor for TrackingAvoidanceError(0);
            uint64_t v287 = 6;
            sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
            sub_100796E74(&qword_101638410, type metadata accessor for TrackingAvoidanceError);
            _BridgedStoredNSError.init(_:userInfo:)();
            uint64_t v204 = (void *)v286[0];
            ((void (*)(uint64_t))v283)(v286[0]);
            sub_10001CFB8(v89, v91);

            sub_10001CFB8(v89, v91);
            sub_10001CFB8(v89, v91);
            sub_1007AFBFC(v198, type metadata accessor for BeaconKeyManager.IndexInformation);
            return;
          }
          uint64_t v225 = v202;
          uint64_t v226 = v261;
          sub_1007B136C(v225, v261, type metadata accessor for SharedBeaconRecord);
          int v227 = *(unsigned __int8 *)(v226 + *(int *)(v203 + 64));
          sub_1007AFB78(v226, v136, type metadata accessor for SharedBeaconRecord);
          if (v227 == 1)
          {
            sub_1007AFBFC(v136, type metadata accessor for SharedBeaconRecord);
          }
          else
          {
            int v228 = *(unsigned __int8 *)(v136 + *(int *)(v203 + 64));
            sub_1007AFBFC(v136, type metadata accessor for SharedBeaconRecord);
            if (v228 != 4)
            {
              sub_1007AFBFC(v226, type metadata accessor for SharedBeaconRecord);
              goto LABEL_105;
            }
          }
          static os_log_type_t.default.getter();
          if (qword_1016372F0 != -1) {
            swift_once();
          }
          uint64_t v229 = swift_allocObject();
          long long v284 = xmmword_101342130;
          *(_OWORD *)(v229 + 16) = xmmword_101342130;
          uint64_t v230 = v261;
          sub_1007AFB78(v261, v257, type metadata accessor for SharedBeaconRecord);
          uint64_t v231 = v262;
          uint64_t v232 = String.init<A>(describing:)();
          unint64_t v233 = v276;
          *(void *)(v229 + 56) = &type metadata for String;
          *(void *)(v229 + 64) = v233;
          *(void *)(v229 + 32) = v232;
          *(void *)(v229 + 40) = v234;
          os_log(_:dso:log:_:_:)();
          swift_bridgeObjectRelease();
          uint64_t v235 = v230 + *(int *)(v231 + 20);
          if (sub_100785054(v235))
          {
            uint64_t v236 = String.init(format:_:)();
            uint64_t v238 = v237;
            static os_log_type_t.default.getter();
            uint64_t v239 = swift_allocObject();
            *(_OWORD *)(v239 + 16) = v284;
            *(void *)(v239 + 56) = &type metadata for String;
            *(void *)(v239 + 64) = v233;
            *(void *)(v239 + 32) = v236;
            *(void *)(v239 + 40) = v238;
            swift_bridgeObjectRetain();
            os_log(_:dso:log:_:_:)();
            swift_bridgeObjectRelease();
            type metadata accessor for TrackingAvoidanceError(0);
            uint64_t v287 = 7;
            sub_10000588C((uint64_t *)&unk_101637F00);
            uint64_t v240 = swift_initStackObject();
            *(_OWORD *)(v240 + 16) = v284;
            *(void *)(v240 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
            *(void *)(v240 + 40) = v241;
            *(void *)(v240 + 72) = &type metadata for String;
            *(void *)(v240 + 48) = v236;
            *(void *)(v240 + 56) = v238;
            sub_10092CEEC(v240);
            sub_100796E74(&qword_101638410, type metadata accessor for TrackingAvoidanceError);
            _BridgedStoredNSError.init(_:userInfo:)();
            uint64_t v242 = (void *)v286[0];
            ((void (*)(uint64_t))v283)(v286[0]);
            sub_10001CFB8(v89, v91);

            sub_10001CFB8(v89, v91);
            sub_10001CFB8(v89, v91);
          }
          else
          {
            sub_1000361E0(v89, v91);
            uint64_t v243 = static MACAddress.length.getter();
            sub_100435A9C(v243, v89, v91, v286);
            uint64_t v244 = v256;
            MACAddress.init(data:type:)();
            uint64_t v246 = v274;
            uint64_t v245 = v275;
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v274 + 48))(v244, 1, v275) == 1) {
              goto LABEL_136;
            }
            (*(void (**)(uint64_t, char *, uint64_t))(v246 + 32))(v258, v244, v245);
            uint64_t v247 = type metadata accessor for UUID();
            uint64_t v248 = *(void *)(v247 - 8);
            uint64_t v249 = (uint64_t)v270;
            (*(void (**)(char *, uint64_t, uint64_t))(v248 + 16))(v270, v235, v247);
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v248 + 56))(v249, 0, 1, v247);
            uint64_t v250 = (unsigned __int8 *)(v261 + *(int *)(v262 + 28));
            uint64_t v251 = *v250;
            uint64_t v252 = *((void *)v250 + 1);
            uint64_t v253 = *((void *)v250 + 2);
            swift_bridgeObjectRetain();
            uint64_t v254 = v258;
            sub_10078F618(v258, v249, v99, v251, v252, v253, v283, v282);
            sub_10001CFB8(v89, v91);
            swift_bridgeObjectRelease();
            sub_10001CFB8(v89, v91);
            sub_10001CFB8(v89, v91);
            sub_10001DAB4(v249, &qword_101638CF0);
            (*(void (**)(uint64_t, uint64_t))(v246 + 8))(v254, v275);
          }
          sub_1007AFBFC(v261, type metadata accessor for SharedBeaconRecord);
LABEL_120:
          sub_1007AFBFC(v266, type metadata accessor for BeaconKeyManager.IndexInformation);
          return;
        }
        static os_log_type_t.default.getter();
        if (qword_1016372F0 == -1) {
          goto LABEL_109;
        }
        goto LABEL_134;
      case 2:
        uint64_t v186 = *(void *)(v89 + 16);
        uint64_t v185 = *(void *)(v89 + 24);
        uint64_t v162 = v185 - v186;
        if (!__OFSUB__(v185, v186)) {
          goto LABEL_91;
        }
        goto LABEL_133;
      case 3:
        goto LABEL_96;
      default:
        uint64_t v162 = BYTE6(v91);
        goto LABEL_92;
    }
  }
  uint64_t v281 = (char *)self;
  uint64_t v35 = 5;
  *(void *)&long long v280 = 0xD000000000000013;
  v255[1] = 0x8000000101407030;
  uint64_t v3 = (uint64_t *)&dword_101642000;
  while (1)
  {
    if ((void)v284) {
      id v101 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v101 = *(id *)(v75 + 8 * v35);
    }
    uint64_t v102 = v101;
    uint64_t v36 = v35 - 3;
    if (__OFADD__(v35 - 4, 1))
    {
      __break(1u);
LABEL_123:
      swift_once();
      goto LABEL_2;
    }
    id v103 = [v281 sharedInstance];
    unsigned int v104 = [v103 isInternalBuild];

    if (v104)
    {
      id v105 = [self standardUserDefaults];
      NSString v106 = String._bridgeToObjectiveC()();
      unsigned int v107 = [v105 BOOLForKey:v106];

      if (v107) {
        break;
      }
    }
    [v102 latitude];
    double v109 = v108;
    [v102 longitude];
    double v111 = v110;
    if (qword_101636A88 != -1) {
      swift_once();
    }
    if (objc_msgSend((id)qword_101642640, "containsCoordinate:", v109, v111))
    {
      uint64_t v112 = (void *)qword_101642648;
      if (qword_101642648)
      {
        id v113 = (id)qword_101642648;
      }
      else
      {
        uint64_t v114 = (void *)sub_10036D0D4();
        uint64_t v115 = (void *)qword_101642648;
        qword_101642648 = (uint64_t)v114;
        id v113 = v114;

        uint64_t v112 = 0;
      }
      id v116 = v112;
      unsigned __int8 v117 = [v113 containsCoordinate:v109, v111];

      if (v117) {
        goto LABEL_17;
      }
    }
    else
    {
    }
    ++v35;
    if (v36 == v76) {
      goto LABEL_26;
    }
  }
  static os_log_type_t.default.getter();
  sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
  unsigned int v175 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease_n();

LABEL_18:
  static os_log_type_t.error.getter();
  if (qword_1016372F0 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  type metadata accessor for TrackingAvoidanceError(0);
  uint64_t v287 = 11;
  sub_10000588C((uint64_t *)&unk_101637F00);
  uint64_t v80 = swift_initStackObject();
  *(_OWORD *)(v80 + 16) = xmmword_101342130;
  *(void *)(v80 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v80 + 40) = v81;
  *(void *)(v80 + 72) = &type metadata for String;
  unint64_t v82 = 0xD00000000000001CLL;
  uint64_t v83 = "Locations in blocked regions";
LABEL_24:
  *(void *)(v80 + 48) = v82;
  *(void *)(v80 + 56) = (unint64_t)(v83 - 32) | 0x8000000000000000;
  sub_10092CEEC(v80);
  sub_100796E74(&qword_101638410, type metadata accessor for TrackingAvoidanceError);
  _BridgedStoredNSError.init(_:userInfo:)();
  int v85 = (void *)v286[0];
  ((void (*)(uint64_t))v283)(v286[0]);
LABEL_101:
}

void sub_10078F618(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void), void (*a8)(unint64_t, unsigned char *, uint64_t))
{
  uint64_t v73 = a7;
  id v74 = a8;
  uint64_t v66 = a6;
  uint64_t v65 = a5;
  uint64_t v64 = a4;
  unint64_t v72 = a3;
  uint64_t v75 = type metadata accessor for WildModeTrackingLocation(0);
  uint64_t v11 = *(void *)(v75 - 8);
  __chkstk_darwin(v75);
  uint64_t v13 = (os_log_t *)((char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v69 = type metadata accessor for MACAddress();
  uint64_t v68 = *(void *)(v69 - 8);
  __chkstk_darwin(v69);
  uint64_t v70 = (char *)&v61 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_10000588C(&qword_1016511E0);
  __chkstk_darwin(v15 - 8);
  uint64_t v17 = (char *)&v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for WildModeAssociationRecord(0);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v61 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v61 - v23;
  uint64_t v71 = a1;
  uint64_t v67 = v8;
  sub_100790EA0(a1, a2, (uint64_t)v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) != 1)
  {
    sub_1007B136C((uint64_t)v17, (uint64_t)v24, type metadata accessor for WildModeAssociationRecord);
    if (qword_101636CB0 != -1) {
      swift_once();
    }
    uint64_t v28 = type metadata accessor for Logger();
    sub_100010324(v28, (uint64_t)qword_10164D4D0);
    sub_1007AFB78((uint64_t)v24, (uint64_t)v22, type metadata accessor for WildModeAssociationRecord);
    uint64_t v29 = v68;
    uint64_t v30 = v70;
    uint64_t v31 = v69;
    (*(void (**)(char *, uint64_t, uint64_t))(v68 + 16))(v70, v71, v69);
    uint64_t v32 = Logger.logObject.getter();
    os_log_type_t v33 = static os_log_type_t.default.getter();
    int v34 = v33;
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v35 = swift_slowAlloc();
      uint64_t v63 = swift_slowAlloc();
      v77[0] = v63;
      *(_DWORD *)uint64_t v35 = 136315394;
      os_log_t v61 = (os_log_t)(v35 + 4);
      type metadata accessor for UUID();
      sub_100796E74((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      int v62 = v34;
      uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v76 = sub_1008FA0F0(v36, v37, v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1007AFBFC((uint64_t)v22, type metadata accessor for WildModeAssociationRecord);
      *(_WORD *)(v35 + 12) = 2080;
      sub_100796E74((unint64_t *)&qword_101649EE0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
      os_log_t v61 = v32;
      uint64_t v38 = v24;
      uint64_t v39 = v70;
      uint64_t v40 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v76 = sub_1008FA0F0(v40, v41, v77);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      uint64_t v42 = v39;
      uint64_t v24 = v38;
      (*(void (**)(char *, uint64_t))(v29 + 8))(v42, v31);
      os_log_t v43 = v61;
      _os_log_impl((void *)&_mh_execute_header, v61, (os_log_type_t)v62, "update: found UT record UUID %s address %s.", (uint8_t *)v35, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1007AFBFC((uint64_t)v22, type metadata accessor for WildModeAssociationRecord);
      (*(void (**)(char *, uint64_t))(v29 + 8))(v30, v31);
    }
    id v44 = [v72 observedLocations];
    sub_10001D4B0(0, &qword_101656690);
    unint64_t v45 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v45 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v46 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v46) {
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v46 = *(void *)((v45 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v46)
      {
LABEL_12:
        v77[0] = (uint64_t)_swiftEmptyArrayStorage;
        sub_1000B7CEC(0, v46 & ~(v46 >> 63), 0);
        if (v46 < 0)
        {
          __break(1u);
          return;
        }
        uint64_t v70 = v24;
        uint64_t v47 = 0;
        uint64_t v48 = (void *)v77[0];
        do
        {
          if ((v45 & 0xC000000000000001) != 0) {
            id v49 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v49 = *(id *)(v45 + 8 * v47 + 32);
          }
          char v50 = v49;
          [v49 latitude];
          uint64_t v52 = v51;
          [v50 longitude];
          uint64_t v54 = v53;
          [v50 horizontalAccuracy];
          uint64_t v56 = v55;
          id v57 = [v50 timestamp];
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          *uint64_t v13 = v52;
          v13[1] = v54;
          void v13[2] = v56;
          v77[0] = (uint64_t)v48;
          unint64_t v59 = v48[2];
          unint64_t v58 = v48[3];
          if (v59 >= v58 >> 1)
          {
            sub_1000B7CEC(v58 > 1, v59 + 1, 1);
            uint64_t v48 = (void *)v77[0];
          }
          ++v47;
          v48[2] = v59 + 1;
          sub_1007B136C((uint64_t)v13, (uint64_t)v48+ ((*(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80))+ *(void *)(v11 + 72) * v59, type metadata accessor for WildModeTrackingLocation);
        }
        while (v46 != v47);
        swift_bridgeObjectRelease();
        uint64_t v60 = v74;
        uint64_t v24 = v70;
LABEL_23:
        swift_retain();
        sub_1007A0040((uint64_t)v24, v72, v71, v64, v65, v66, (uint64_t)v48, v67, v73, v60);
        swift_bridgeObjectRelease();
        swift_release();
        sub_1007AFBFC((uint64_t)v24, type metadata accessor for WildModeAssociationRecord);
        return;
      }
    }
    swift_bridgeObjectRelease();
    uint64_t v48 = _swiftEmptyArrayStorage;
    uint64_t v60 = v74;
    goto LABEL_23;
  }
  sub_10001DAB4((uint64_t)v17, &qword_1016511E0);
  static os_log_type_t.error.getter();
  if (qword_1016372F0 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  type metadata accessor for TrackingAvoidanceError(0);
  uint64_t v76 = 3;
  sub_10000588C((uint64_t *)&unk_101637F00);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101342130;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v26;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 48) = 0xD000000000000027;
  *(void *)(inited + 56) = 0x80000001014071B0;
  sub_10092CEEC(inited);
  sub_100796E74(&qword_101638410, type metadata accessor for TrackingAvoidanceError);
  _BridgedStoredNSError.init(_:userInfo:)();
  uint64_t v27 = (void *)v77[0];
  ((void (*)(uint64_t))v73)(v77[0]);
}

uint64_t sub_10078FFB8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  if (!a2)
  {
    static os_log_type_t.default.getter();
    if (qword_1016372F0 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
  }
  return a3(a2);
}

uint64_t sub_100790060(void *a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v64 = a4;
  uint64_t v71 = (void (*)(void))a3;
  uint64_t v59 = a2;
  uint64_t v6 = sub_10000588C(&qword_1016511E0);
  __chkstk_darwin(v6 - 8);
  uint64_t v63 = (uint64_t)&v57 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for WildModeAssociationRecord(0);
  uint64_t v61 = *(void *)(v8 - 8);
  uint64_t v62 = v8;
  __chkstk_darwin(v8);
  uint64_t v58 = (uint64_t)&v57 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C((uint64_t *)&unk_1016477E0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)&v57 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for MACAddress();
  uint64_t v70 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v67 = (char *)&v57 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v69 = static os_log_type_t.default.getter();
  if (qword_101637278 != -1) {
    swift_once();
  }
  uint64_t v68 = qword_10170EFD0;
  uint64_t v65 = sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_101347500;
  uint64_t v72 = *v4;
  sub_10000588C(&qword_10164D678);
  uint64_t v16 = String.init<A>(describing:)();
  uint64_t v60 = v4;
  uint64_t v18 = v17;
  *(void *)(v15 + 56) = &type metadata for String;
  unint64_t v19 = sub_10000B4CC();
  *(void *)(v15 + 32) = v16;
  *(void *)(v15 + 40) = v18;
  *(void *)(v15 + 96) = &type metadata for String;
  *(void *)(v15 + 104) = v19;
  *(void *)(v15 + 64) = v19;
  *(void *)(v15 + 72) = 0xD00000000000002FLL;
  *(void *)(v15 + 80) = 0x80000001014077B0;
  id v20 = [a1 data];
  uint64_t v21 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v23 = v22;

  uint64_t v24 = Data.hexString.getter();
  uint64_t v26 = v25;
  sub_10001CFB8(v21, v23);
  *(void *)(v15 + 136) = &type metadata for String;
  *(void *)(v15 + 144) = v19;
  unint64_t v66 = v19;
  *(void *)(v15 + 112) = v24;
  *(void *)(v15 + 120) = v26;
  uint64_t v27 = a1;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  id v28 = [a1 address];
  static Data._unconditionallyBridgeFromObjectiveC(_:)();

  MACAddress.init(data:type:)();
  uint64_t v29 = v70;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v70 + 48))(v12, 1, v13) == 1)
  {
    sub_10001DAB4((uint64_t)v12, (uint64_t *)&unk_1016477E0);
    static os_log_type_t.default.getter();
    if (qword_1016372F0 != -1) {
      swift_once();
    }
    uint64_t v30 = swift_allocObject();
    *(_OWORD *)(v30 + 16) = xmmword_101342130;
    id v31 = [v27 data];
    uint64_t v32 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v34 = v33;

    uint64_t v35 = Data.hexString.getter();
    uint64_t v37 = v36;
    sub_10001CFB8(v32, v34);
    unint64_t v38 = v66;
    *(void *)(v30 + 56) = &type metadata for String;
    *(void *)(v30 + 64) = v38;
    *(void *)(v30 + 32) = v35;
    *(void *)(v30 + 40) = v37;
    os_log(_:dso:log:_:_:)();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v40 = v71;
    if (v71)
    {
      sub_1007AF880();
      swift_allocError();
      *unint64_t v41 = 1;
      v40();
      return swift_errorRelease();
    }
  }
  else
  {
    uint64_t v42 = (uint64_t)v67;
    (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v67, v12, v13);
    uint64_t v43 = v63;
    sub_10126F314(v42, v63);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v61 + 48))(v43, 1, v62) == 1)
    {
      sub_10001DAB4(v43, &qword_1016511E0);
      static os_log_type_t.default.getter();
      if (qword_1016372F0 != -1) {
        swift_once();
      }
      uint64_t v44 = swift_allocObject();
      *(_OWORD *)(v44 + 16) = xmmword_101342130;
      id v45 = [v27 data];
      uint64_t v46 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v48 = v47;

      uint64_t v49 = Data.hexString.getter();
      uint64_t v51 = v50;
      sub_10001CFB8(v46, v48);
      unint64_t v52 = v66;
      *(void *)(v44 + 56) = &type metadata for String;
      *(void *)(v44 + 64) = v52;
      *(void *)(v44 + 32) = v49;
      *(void *)(v44 + 40) = v51;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      uint64_t v53 = v71;
      if (v71)
      {
        sub_1007AF880();
        swift_allocError();
        *uint64_t v54 = 0;
        v53();
        swift_errorRelease();
      }
      return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v67, v13);
    }
    else
    {
      uint64_t v55 = v43;
      uint64_t v56 = v58;
      sub_1007B136C(v55, v58, type metadata accessor for WildModeAssociationRecord);
      sub_1007948FC(v56, v59, (void (*)(uint64_t))v71, v64);
      sub_1007AFBFC(v56, type metadata accessor for WildModeAssociationRecord);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v29 + 8))(v42, v13);
    }
  }
  return result;
}

uint64_t sub_100790790(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v25 = a2;
  uint64_t v26 = a4;
  uint64_t v29 = (void (*)(void))a3;
  uint64_t v7 = sub_10000588C(&qword_1016511E0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for WildModeAssociationRecord(0);
  uint64_t v10 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v24 = (uint64_t)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v27 = static os_log_type_t.default.getter();
  if (qword_101637278 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_101347500;
  uint64_t v30 = *v5;
  sub_10000588C(&qword_10164D678);
  uint64_t v13 = String.init<A>(describing:)();
  uint64_t v15 = v14;
  *(void *)(v12 + 56) = &type metadata for String;
  unint64_t v16 = sub_10000B4CC();
  *(void *)(v12 + 32) = v13;
  *(void *)(v12 + 40) = v15;
  *(void *)(v12 + 96) = &type metadata for String;
  *(void *)(v12 + 104) = v16;
  *(void *)(v12 + 64) = v16;
  *(void *)(v12 + 72) = 0xD00000000000002ALL;
  *(void *)(v12 + 80) = 0x8000000101407730;
  uint64_t v17 = UUID.uuidString.getter();
  *(void *)(v12 + 136) = &type metadata for String;
  *(void *)(v12 + 144) = v16;
  *(void *)(v12 + 112) = v17;
  *(void *)(v12 + 120) = v18;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_100AE3CB4(a1, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v28) == 1)
  {
    sub_10001DAB4((uint64_t)v9, &qword_1016511E0);
    static os_log_type_t.default.getter();
    unint64_t v19 = v29;
    if (qword_1016372F0 != -1) {
      swift_once();
    }
    uint64_t result = os_log(_:dso:log:_:_:)();
    if (v19)
    {
      sub_1007AF880();
      swift_allocError();
      *uint64_t v21 = 0;
      v19();
      return swift_errorRelease();
    }
  }
  else
  {
    uint64_t v22 = v24;
    sub_1007B136C((uint64_t)v9, v24, type metadata accessor for WildModeAssociationRecord);
    sub_100794200(v22, v25, (void (*)(uint64_t))v29, v26);
    return sub_1007AFBFC(v22, type metadata accessor for WildModeAssociationRecord);
  }
  return result;
}

uint64_t sub_100790B18(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v25 = a2;
  uint64_t v26 = a4;
  uint64_t v29 = (void (*)(void))a3;
  uint64_t v7 = sub_10000588C(&qword_1016511E0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for WildModeAssociationRecord(0);
  uint64_t v10 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v24 = (uint64_t)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v27 = static os_log_type_t.default.getter();
  if (qword_101637278 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_101347500;
  uint64_t v30 = *v5;
  sub_10000588C(&qword_10164D678);
  uint64_t v13 = String.init<A>(describing:)();
  uint64_t v15 = v14;
  *(void *)(v12 + 56) = &type metadata for String;
  unint64_t v16 = sub_10000B4CC();
  *(void *)(v12 + 32) = v13;
  *(void *)(v12 + 40) = v15;
  *(void *)(v12 + 96) = &type metadata for String;
  *(void *)(v12 + 104) = v16;
  *(void *)(v12 + 64) = v16;
  *(void *)(v12 + 72) = 0xD00000000000002ALL;
  *(void *)(v12 + 80) = 0x8000000101407730;
  uint64_t v17 = UUID.uuidString.getter();
  *(void *)(v12 + 136) = &type metadata for String;
  *(void *)(v12 + 144) = v16;
  *(void *)(v12 + 112) = v17;
  *(void *)(v12 + 120) = v18;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  sub_100AE381C(a1, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v28) == 1)
  {
    sub_10001DAB4((uint64_t)v9, &qword_1016511E0);
    static os_log_type_t.default.getter();
    unint64_t v19 = v29;
    if (qword_1016372F0 != -1) {
      swift_once();
    }
    uint64_t result = os_log(_:dso:log:_:_:)();
    if (v19)
    {
      sub_1007AF880();
      swift_allocError();
      *uint64_t v21 = 0;
      v19();
      return swift_errorRelease();
    }
  }
  else
  {
    uint64_t v22 = v24;
    sub_1007B136C((uint64_t)v9, v24, type metadata accessor for WildModeAssociationRecord);
    sub_1007948FC(v22, v25, (void (*)(uint64_t))v29, v26);
    return sub_1007AFBFC(v22, type metadata accessor for WildModeAssociationRecord);
  }
  return result;
}

uint64_t sub_100790EA0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v33 = a1;
  uint64_t v34 = a3;
  uint64_t v4 = sub_10000588C(&qword_1016511E0);
  __chkstk_darwin(v4 - 8);
  uint64_t v6 = (char *)v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for WildModeAssociationRecord(0);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v32 = (uint64_t)v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v10 - 8);
  uint64_t v12 = (char *)v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for UUID();
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  unint64_t v16 = (char *)v30 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D074(a2, (uint64_t)v12, &qword_101638CF0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    sub_10001DAB4((uint64_t)v12, &qword_101638CF0);
    return sub_10126F314(v33, v34);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
    sub_100AE3CB4((uint64_t)v16, (uint64_t)v6);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    {
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      sub_10001DAB4((uint64_t)v6, &qword_1016511E0);
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(v34, 1, 1, v7);
    }
    else
    {
      uint64_t v33 = v7;
      uint64_t v18 = v32;
      sub_1007B136C((uint64_t)v6, v32, type metadata accessor for WildModeAssociationRecord);
      int v31 = static os_log_type_t.default.getter();
      if (qword_1016372F0 != -1) {
        swift_once();
      }
      v30[1] = qword_10170F048;
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v19 = swift_allocObject();
      *(_OWORD *)(v19 + 16) = xmmword_101347500;
      uint64_t v20 = UUID.uuidString.getter();
      uint64_t v22 = v21;
      *(void *)(v19 + 56) = &type metadata for String;
      unint64_t v23 = sub_10000B4CC();
      *(void *)(v19 + 64) = v23;
      *(void *)(v19 + 32) = v20;
      *(void *)(v19 + 40) = v22;
      uint64_t v24 = UUID.uuidString.getter();
      *(void *)(v19 + 96) = &type metadata for String;
      *(void *)(v19 + 104) = v23;
      *(void *)(v19 + 72) = v24;
      *(void *)(v19 + 80) = v25;
      uint64_t v26 = v33;
      uint64_t v27 = MACAddress.description.getter();
      *(void *)(v19 + 136) = &type metadata for String;
      *(void *)(v19 + 144) = v23;
      *(void *)(v19 + 112) = v27;
      *(void *)(v19 + 120) = v28;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      uint64_t v29 = v34;
      sub_1007B136C(v18, v34, type metadata accessor for WildModeAssociationRecord);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(v29, 0, 1, v26);
    }
  }
}

uint64_t sub_1007912D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v16 = *v3;
  uint64_t v17 = a2;
  uint64_t v6 = type metadata accessor for WildModeAssociationRecord(0);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6 - 8);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1007AFB78(a1, (uint64_t)v9, type metadata accessor for WildModeAssociationRecord);
  unint64_t v10 = (*(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v11 = (v8 + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v13 = swift_allocObject();
  sub_1007B136C((uint64_t)v9, v13 + v10, type metadata accessor for WildModeAssociationRecord);
  *(void *)(v13 + v11) = v3;
  uint64_t v14 = (void *)(v13 + v12);
  *uint64_t v14 = v17;
  v14[1] = a3;
  *(void *)(v13 + ((v12 + 23) & 0xFFFFFFFFFFFFFFF8)) = v16;
  swift_retain();
  swift_retain();
  sub_100D34000(a1, (uint64_t)sub_1007B1D4C, v13);
  return swift_release();
}

void sub_100791494(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v103 = a5;
  unsigned int v104 = a4;
  uint64_t v98 = a3;
  uint64_t v96 = type metadata accessor for UnwantedTrackingUserNotification();
  __chkstk_darwin(v96);
  uint64_t v97 = (char *)&v95 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C((uint64_t *)&unk_10166BFA0);
  __chkstk_darwin(v8 - 8);
  unint64_t v10 = (char *)&v95 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C(&qword_1016653B0);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v95 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v105 = type metadata accessor for WildModeAssociationRecord(0);
  uint64_t v14 = __chkstk_darwin(v105);
  uint64_t v101 = (uint64_t)&v95 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v100 = (uint64_t)&v95 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v99 = (char *)&v95 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v102 = (char *)&v95 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v95 - v23;
  uint64_t v25 = __chkstk_darwin(v22);
  uint64_t v27 = (char *)&v95 - v26;
  __chkstk_darwin(v25);
  uint64_t v29 = (char *)&v95 - v28;
  uint64_t v30 = sub_10000588C(&qword_101660A90);
  __chkstk_darwin(v30);
  uint64_t v32 = (char *)&v95 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001D074(a1, (uint64_t)v32, &qword_101660A90);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    if (qword_101636CB0 != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    sub_100010324(v33, (uint64_t)qword_10164D4D0);
    swift_errorRetain();
    swift_errorRetain();
    uint64_t v34 = Logger.logObject.getter();
    os_log_type_t v35 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc();
      uint64_t v37 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v36 = 138543362;
      swift_errorRetain();
      uint64_t v38 = _swift_stdlib_bridgeErrorToNSError();
      aBlock[0] = v38;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *uint64_t v37 = v38;
      swift_errorRelease();
      swift_errorRelease();
      _os_log_impl((void *)&_mh_execute_header, v34, v35, "Error saving UT alert record %{public}@", v36, 0xCu);
      sub_10000588C((uint64_t *)&unk_101638EA0);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      swift_errorRelease();
      swift_errorRelease();
    }

    type metadata accessor for TrackingAvoidanceError(0);
    v108[0] = 1;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100796E74(&qword_101638410, type metadata accessor for TrackingAvoidanceError);
    _BridgedStoredNSError.init(_:userInfo:)();
    unint64_t v47 = (void *)aBlock[0];
    v104(aBlock[0]);
    swift_errorRelease();

    return;
  }
  os_log_type_t v95 = v29;
  sub_1007B136C((uint64_t)v32, (uint64_t)v29, type metadata accessor for WildModeAssociationRecord);
  if (qword_101636CB0 != -1) {
    swift_once();
  }
  uint64_t v39 = type metadata accessor for Logger();
  uint64_t v40 = sub_100010324(v39, (uint64_t)qword_10164D4D0);
  unint64_t v41 = Logger.logObject.getter();
  os_log_type_t v42 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v41, v42))
  {
    uint64_t v43 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v43 = 0;
    _os_log_impl((void *)&_mh_execute_header, v41, v42, "UT alert saved successfully.", v43, 2u);
    swift_slowDealloc();
  }

  uint64_t v44 = (int *)v105;
  unsigned int v45 = *(unsigned __int8 *)(a2 + *(int *)(v105 + 64));
  if (v45 != 8)
  {
    if ((v45 & 0xFA) != 0) {
      sub_100AA5514();
    }
    if (v45 > 6 || v45 == 2) {
      sub_100AA86FC();
    }
  }
  int v46 = *(unsigned __int8 *)(a2 + v44[13]);
  if (v46 == 4)
  {
    sub_1007AFB78(a2, (uint64_t)v27, type metadata accessor for WildModeAssociationRecord);
  }
  else
  {
    sub_1007AFB78(a2, (uint64_t)v27, type metadata accessor for WildModeAssociationRecord);
    if (v46 == 1)
    {
      sub_1007AFBFC((uint64_t)v27, type metadata accessor for WildModeAssociationRecord);
LABEL_26:
      int v56 = 0;
      uint64_t v50 = (uint64_t)v102;
      goto LABEL_29;
    }
  }
  sub_10001D074((uint64_t)&v27[v44[14]], (uint64_t)v13, &qword_1016653B0);
  sub_1007AFBFC((uint64_t)v27, type metadata accessor for WildModeAssociationRecord);
  uint64_t v48 = type metadata accessor for AccessoryMetadata(0);
  int v49 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v48 - 8) + 48))(v13, 1, v48);
  sub_10001DAB4((uint64_t)v13, &qword_1016653B0);
  if (v49 != 1) {
    goto LABEL_26;
  }
  uint64_t v50 = (uint64_t)v102;
  if (qword_101637188 != -1) {
    swift_once();
  }
  uint64_t v51 = (void *)qword_10170EE68;
  id v52 = [self sharedInstance];
  unsigned int v53 = [v52 isInternalBuild];

  if (v53)
  {
    NSString v54 = String._bridgeToObjectiveC()();
    unsigned int v55 = [v51 BOOLForKey:v54];

    int v56 = v55 ^ 1;
  }
  else
  {
    int v56 = 1;
  }
  uint64_t v44 = (int *)v105;
LABEL_29:
  sub_10001D074(a2 + v44[15], (uint64_t)v10, (uint64_t *)&unk_10166BFA0);
  uint64_t v57 = type metadata accessor for AccessoryProductInfo();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v57 - 8) + 48))(v10, 1, v57) == 1)
  {
    sub_10001DAB4((uint64_t)v10, (uint64_t *)&unk_10166BFA0);
    sub_1007AFB78(a2, (uint64_t)v24, type metadata accessor for WildModeAssociationRecord);
LABEL_34:
    int v59 = 1;
    uint64_t v60 = (uint64_t)v99;
    switch(v24[v44[16]])
    {
      case 2:
        swift_bridgeObjectRelease();
        sub_1007AFBFC((uint64_t)v24, type metadata accessor for WildModeAssociationRecord);
        if (v56) {
          goto LABEL_41;
        }
        break;
      case 8:
        goto LABEL_35;
      default:
        char v74 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        sub_1007AFBFC((uint64_t)v24, type metadata accessor for WildModeAssociationRecord);
        if (v56 & 1 | ((v74 & 1) == 0)) {
          goto LABEL_41;
        }
        break;
    }
    uint64_t v61 = v96;
    uint64_t v62 = v97;
    uint64_t v63 = (uint64_t)v95;
    sub_1007AFB78((uint64_t)v95, (uint64_t)&v97[*(int *)(v96 + 20)], type metadata accessor for WildModeAssociationRecord);
    *uint64_t v62 = 2;
    v62[*(int *)(v61 + 24)] = 66;
    if (qword_101637118 != -1) {
      swift_once();
    }
    v108[3] = v61;
    v108[4] = (uint64_t)&off_1015B3E48;
    uint64_t v64 = sub_10001D958(v108);
    sub_1007AFB78((uint64_t)v62, (uint64_t)v64, (uint64_t (*)(void))type metadata accessor for UnwantedTrackingUserNotification);
    id v65 = objc_allocWithZone((Class)UNUserNotificationCenter);
    NSString v66 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v67 = [v65 initWithBundleIdentifier:v66];

    id v68 = sub_101097C90((uint64_t)v64);
    UUID.uuidString.getter();
    id v69 = v68;
    NSString v70 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v71 = [self requestWithIdentifier:v70 content:v69 trigger:0 destinations:7];

    sub_10001D010((uint64_t)v108, (uint64_t)v107);
    uint64_t v72 = swift_allocObject();
    sub_10001CEB0(v107, v72 + 16);
    *(void *)(v72 + 56) = 0;
    *(void *)(v72 + 64) = 0;
    aBlock[4] = (uint64_t)sub_1007B31E8;
    uint64_t aBlock[5] = v72;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    void aBlock[2] = (uint64_t)sub_100769474;
    aBlock[3] = (uint64_t)&unk_1015D4D38;
    uint64_t v73 = _Block_copy(aBlock);
    swift_release();
    [v67 addNotificationRequest:v71 withCompletionHandler:v73];

    _Block_release(v73);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v108);
    sub_1007AFBFC((uint64_t)v62, (uint64_t (*)(void))type metadata accessor for UnwantedTrackingUserNotification);
    goto LABEL_50;
  }
  int v58 = v10[*(int *)(v57 + 180)];
  sub_1007AFBFC((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
  sub_1007AFB78(a2, (uint64_t)v24, type metadata accessor for WildModeAssociationRecord);
  if (v58 == 2 || (v58 & 1) != 0) {
    goto LABEL_34;
  }
  int v59 = 0;
  uint64_t v60 = (uint64_t)v99;
LABEL_35:
  sub_1007AFBFC((uint64_t)v24, type metadata accessor for WildModeAssociationRecord);
LABEL_41:
  sub_1007AFB78(a2, v50, type metadata accessor for WildModeAssociationRecord);
  sub_1007AFB78(a2, v60, type metadata accessor for WildModeAssociationRecord);
  uint64_t v75 = v100;
  sub_1007AFB78(a2, v100, type metadata accessor for WildModeAssociationRecord);
  uint64_t v76 = v101;
  sub_1007AFB78(a2, v101, type metadata accessor for WildModeAssociationRecord);
  id v77 = Logger.logObject.getter();
  int v78 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v77, (os_log_type_t)v78))
  {
    LODWORD(v99) = v78;
    uint64_t v79 = swift_slowAlloc();
    uint64_t v98 = swift_slowAlloc();
    aBlock[0] = v98;
    *(_DWORD *)uint64_t v79 = 136447490;
    type metadata accessor for UUID();
    sub_100796E74((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v80 = dispatch thunk of CustomStringConvertible.description.getter();
    v108[0] = sub_1008FA0F0(v80, v81, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1007AFBFC(v50, type metadata accessor for WildModeAssociationRecord);
    *(_WORD *)(v79 + 12) = 1024;
    LODWORD(v108[0]) = v59;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v79 + 18) = 1024;
    LODWORD(v108[0]) = v56;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v79 + 24) = 2082;
    uint64_t v82 = *(unsigned __int8 *)(v60 + *(int *)(v105 + 52));
    unint64_t v83 = 0xE500000000000000;
    uint64_t v84 = 0x656C707061;
    uint64_t v102 = (char *)v40;
    switch(v82)
    {
      case 1:
        unint64_t v83 = 0xE600000000000000;
        uint64_t v84 = 0x6E6169727564;
        break;
      case 2:
        unint64_t v83 = 0xE700000000000000;
        uint64_t v84 = 0x6579656B776168;
        break;
      case 3:
        unint64_t v83 = 0xE400000000000000;
        uint64_t v84 = 1701602664;
        break;
      case 4:
        unint64_t v83 = 0xE300000000000000;
        uint64_t v84 = 7104878;
        break;
      default:
        break;
    }
    v108[0] = sub_1008FA0F0(v84, v83, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1007AFBFC(v60, type metadata accessor for WildModeAssociationRecord);
    *(_WORD *)(v79 + 34) = 2082;
    uint64_t v85 = v105;
    uint64_t v86 = v100;
    type metadata accessor for MACAddress();
    sub_100796E74((unint64_t *)&qword_101649EE0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
    uint64_t v87 = dispatch thunk of CustomStringConvertible.description.getter();
    v108[0] = sub_1008FA0F0(v87, v88, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1007AFBFC(v86, type metadata accessor for WildModeAssociationRecord);
    *(_WORD *)(v79 + 44) = 2082;
    uint64_t v89 = v101;
    LOBYTE(v108[0]) = *(unsigned char *)(v101 + *(int *)(v85 + 64));
    sub_10000588C(&qword_10164D7D8);
    uint64_t v90 = String.init<A>(describing:)();
    v108[0] = sub_1008FA0F0(v90, v91, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1007AFBFC(v89, type metadata accessor for WildModeAssociationRecord);
    _os_log_impl((void *)&_mh_execute_header, v77, (os_log_type_t)v99, "Not showing UT alert for %{public}s,\nsurfaceUt = %{BOOL}d isUnknown = %{BOOL}d,\ndeviceType = %{public}s\naddress = %{public}s,\nobservationState = %{public}s", (uint8_t *)v79, 0x36u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    uint64_t v63 = (uint64_t)v95;
  }
  else
  {
    sub_1007AFBFC(v50, type metadata accessor for WildModeAssociationRecord);
    sub_1007AFBFC(v60, type metadata accessor for WildModeAssociationRecord);
    sub_1007AFBFC(v75, type metadata accessor for WildModeAssociationRecord);
    sub_1007AFBFC(v76, type metadata accessor for WildModeAssociationRecord);

    uint64_t v63 = (uint64_t)v95;
  }
LABEL_50:
  uint64_t v92 = Logger.logObject.getter();
  os_log_type_t v93 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v92, v93))
  {
    uint64_t v94 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)uint64_t v94 = 0;
    _os_log_impl((void *)&_mh_execute_header, v92, v93, "Done waiting for user input", v94, 2u);
    swift_slowDealloc();
  }

  v104(0);
  sub_1007AFBFC(v63, type metadata accessor for WildModeAssociationRecord);
}

uint64_t sub_1007926B8@<X0>(uint64_t a1@<X0>, char a2@<W3>, uint64_t *a3@<X8>)
{
  uint64_t v16 = a3;
  uint64_t v5 = sub_10000588C(&qword_1016653B0);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for WildModeAssociationRecord(0);
  uint64_t v9 = swift_projectBox();
  sub_1007AFB78(a1, (uint64_t)v7, type metadata accessor for AccessoryMetadata);
  uint64_t v10 = type metadata accessor for AccessoryMetadata(0);
  uint64_t v11 = *(void *)(v10 - 8) + 56;
  (*(void (**)(char *, void, uint64_t, uint64_t))v11)(v7, 0, 1, v10);
  swift_beginAccess();
  sub_100062604((uint64_t)v7, v9 + *(int *)(v8 + 56), &qword_1016653B0);
  sub_10000588C(&qword_101649E60);
  unint64_t v12 = (*(unsigned __int8 *)(v11 + 24) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 24);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_101342130;
  sub_1007AFB78(a1, v13 + v12, type metadata accessor for AccessoryMetadata);
  uint64_t v14 = sub_1003048A0(v13, a2);
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v16 = v14;
  return result;
}

uint64_t sub_10079286C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = *a1;
  sub_10000588C(&qword_101641650);
  swift_storeEnumTagMultiPayload();

  return swift_bridgeObjectRetain();
}

uint64_t sub_1007928C4(uint64_t a1)
{
  uint64_t v2 = sub_10000588C(&qword_101641650);
  __chkstk_darwin(v2);
  sub_1007AFB78(a1, (uint64_t)&v5 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for BluetoothCommunicationCoordinator.Error);
  swift_storeEnumTagMultiPayload();
  return Just.init(_:)();
}

uint64_t sub_100792984@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v80 = a2;
  uint64_t v3 = sub_10000588C(&qword_1016653B0);
  __chkstk_darwin(v3 - 8);
  uint64_t v5 = (char *)v71 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for BluetoothCommunicationCoordinator.Error();
  uint64_t v7 = __chkstk_darwin(v6 - 8);
  uint64_t v76 = (uint64_t)v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v75 = (uint64_t)v71 - v10;
  __chkstk_darwin(v9);
  unint64_t v12 = (char *)v71 - v11;
  uint64_t v13 = sub_10000588C((uint64_t *)&unk_10166BFA0);
  __chkstk_darwin(v13 - 8);
  uint64_t v15 = (char *)v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for UUID();
  uint64_t v78 = *(void *)(v16 - 8);
  uint64_t v79 = v16;
  __chkstk_darwin(v16);
  id v77 = (char *)v71 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = sub_10000588C(&qword_101641650);
  __chkstk_darwin(v18);
  uint64_t v20 = (void *)((char *)v71 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v21 = type metadata accessor for WildModeAssociationRecord(0);
  uint64_t v22 = swift_projectBox();
  sub_10001D074(a1, (uint64_t)v20, &qword_101641650);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    sub_1007B136C((uint64_t)v20, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for BluetoothCommunicationCoordinator.Error);
    swift_beginAccess();
    sub_10001D074(v22 + *(int *)(v21 + 56), (uint64_t)v5, &qword_1016653B0);
    uint64_t v23 = type metadata accessor for AccessoryMetadata(0);
    int v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v23 - 8) + 48))(v5, 1, v23);
    sub_10001DAB4((uint64_t)v5, &qword_1016653B0);
    uint64_t v25 = v12;
    if (v24 == 1)
    {
      if (qword_101636CA8 != -1) {
        swift_once();
      }
      uint64_t v26 = type metadata accessor for Logger();
      sub_100010324(v26, (uint64_t)qword_10170E318);
      uint64_t v27 = v75;
      sub_1007AFB78((uint64_t)v12, v75, (uint64_t (*)(void))type metadata accessor for BluetoothCommunicationCoordinator.Error);
      swift_retain_n();
      uint64_t v28 = Logger.logObject.getter();
      os_log_type_t v29 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v28, v29))
      {
        uint64_t v30 = swift_slowAlloc();
        uint64_t v76 = swift_slowAlloc();
        v82[0] = v76;
        *(_DWORD *)uint64_t v30 = 136446466;
        uint64_t v73 = v30 + 4;
        swift_beginAccess();
        uint64_t v31 = v77;
        uint64_t v32 = v78;
        uint64_t v33 = v79;
        (*(void (**)(char *, uint64_t, uint64_t))(v78 + 16))(v77, v22, v79);
        sub_100796E74((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v34 = dispatch thunk of CustomStringConvertible.description.getter();
        char v74 = v25;
        unint64_t v36 = v35;
        (*(void (**)(char *, uint64_t))(v32 + 8))(v31, v33);
        uint64_t v81 = sub_1008FA0F0(v34, v36, v82);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v30 + 12) = 2082;
        uint64_t v37 = v75;
        unint64_t v38 = sub_1011CE8B8();
        uint64_t v81 = sub_1008FA0F0(v38, v39, v82);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1007AFBFC(v37, (uint64_t (*)(void))type metadata accessor for BluetoothCommunicationCoordinator.Error);
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "Failed to fetch metadata for %{public}s.\nError %{public}s", (uint8_t *)v30, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
LABEL_15:
        swift_slowDealloc();

        uint64_t v64 = (uint64_t)v74;
LABEL_20:
        sub_1007AFBFC(v64, (uint64_t (*)(void))type metadata accessor for BluetoothCommunicationCoordinator.Error);
        goto LABEL_23;
      }
    }
    else
    {
      if (qword_101636CA8 != -1) {
        swift_once();
      }
      uint64_t v52 = type metadata accessor for Logger();
      sub_100010324(v52, (uint64_t)qword_10170E318);
      uint64_t v27 = v76;
      sub_1007AFB78((uint64_t)v12, v76, (uint64_t (*)(void))type metadata accessor for BluetoothCommunicationCoordinator.Error);
      swift_retain_n();
      uint64_t v28 = Logger.logObject.getter();
      os_log_type_t v53 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v28, v53))
      {
        uint64_t v54 = swift_slowAlloc();
        uint64_t v75 = swift_slowAlloc();
        v82[0] = v75;
        *(_DWORD *)uint64_t v54 = 136446466;
        uint64_t v73 = v54 + 4;
        swift_beginAccess();
        unsigned int v55 = v77;
        uint64_t v56 = v78;
        uint64_t v57 = v79;
        (*(void (**)(char *, uint64_t, uint64_t))(v78 + 16))(v77, v22, v79);
        sub_100796E74((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
        uint64_t v58 = dispatch thunk of CustomStringConvertible.description.getter();
        char v74 = v25;
        unint64_t v60 = v59;
        (*(void (**)(char *, uint64_t))(v56 + 8))(v55, v57);
        uint64_t v81 = sub_1008FA0F0(v58, v60, v82);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v54 + 12) = 2082;
        uint64_t v61 = v76;
        unint64_t v62 = sub_1011CE8B8();
        uint64_t v81 = sub_1008FA0F0(v62, v63, v82);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        sub_1007AFBFC(v61, (uint64_t (*)(void))type metadata accessor for BluetoothCommunicationCoordinator.Error);
        _os_log_impl((void *)&_mh_execute_header, v28, v53, "Failed to fetch product info for %{public}s.\nError %{public}s", (uint8_t *)v54, 0x16u);
        swift_arrayDestroy();
        swift_slowDealloc();
        goto LABEL_15;
      }
    }

    sub_1007AFBFC(v27, (uint64_t (*)(void))type metadata accessor for BluetoothCommunicationCoordinator.Error);
    swift_release_n();
    uint64_t v64 = (uint64_t)v12;
    goto LABEL_20;
  }
  uint64_t v75 = v21;
  uint64_t v76 = v22;
  uint64_t v40 = *v20;
  if (qword_101636CA8 != -1) {
    swift_once();
  }
  uint64_t v41 = type metadata accessor for Logger();
  sub_100010324(v41, (uint64_t)qword_10170E318);
  swift_retain_n();
  os_log_type_t v42 = Logger.logObject.getter();
  os_log_type_t v43 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v42, v43))
  {
    uint64_t v44 = (uint8_t *)swift_slowAlloc();
    uint64_t v73 = swift_slowAlloc();
    v83[0] = v73;
    *(_DWORD *)uint64_t v44 = 136446210;
    v71[1] = v44 + 4;
    uint64_t v72 = v44;
    uint64_t v45 = v76;
    swift_beginAccess();
    unint64_t v47 = v77;
    uint64_t v46 = v78;
    uint64_t v48 = v79;
    (*(void (**)(char *, uint64_t, uint64_t))(v78 + 16))(v77, v45, v79);
    sub_100796E74((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v49 = dispatch thunk of CustomStringConvertible.description.getter();
    char v74 = v15;
    unint64_t v51 = v50;
    (*(void (**)(char *, uint64_t))(v46 + 8))(v47, v48);
    v82[0] = sub_1008FA0F0(v49, v51, v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    uint64_t v15 = v74;
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v42, v43, "Successfully fetched product info for %{public}s", v72, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  uint64_t v65 = v75;
  uint64_t v66 = *(void *)(v40 + 16);
  uint64_t v67 = type metadata accessor for AccessoryProductInfo();
  uint64_t v68 = *(void *)(v67 - 8);
  if (v66)
  {
    sub_1007AFB78(v40+ ((*(unsigned __int8 *)(*(void *)(v67 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v67 - 8) + 80)), (uint64_t)v15, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
    uint64_t v69 = 0;
  }
  else
  {
    uint64_t v69 = 1;
  }
  uint64_t v22 = v76;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v68 + 56))(v15, v69, 1, v67);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  sub_100062604((uint64_t)v15, v22 + *(int *)(v65 + 60), (uint64_t *)&unk_10166BFA0);
LABEL_23:
  swift_beginAccess();
  return sub_1007AFB78(v22, v80, type metadata accessor for WildModeAssociationRecord);
}

void sub_10079352C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(uint64_t, void *), uint64_t a9, uint64_t a10)
{
  uint64_t v31 = a8;
  uint64_t v28 = a4;
  uint64_t v29 = a5;
  id v27 = a3;
  uint64_t v30 = sub_10000588C(&qword_101660A90);
  __chkstk_darwin(v30);
  uint64_t v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for WildModeAssociationRecord(0);
  uint64_t v17 = __chkstk_darwin(v16 - 8);
  uint64_t v19 = (char *)&v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v26 - v20;
  uint64_t v22 = *(void *)(a2 + 16);
  sub_1007AFB78(a10, (uint64_t)&v26 - v20, type metadata accessor for WildModeAssociationRecord);
  sub_1007AFB78(a1, (uint64_t)v19, type metadata accessor for WildModeAssociationRecord);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  id v23 = v27;
  uint64_t v24 = v28;
  uint64_t v25 = v29;
  uint64_t v28 = a7;
  uint64_t v29 = a6;
  sub_1007938C8((uint64_t)v19, v23, v24, v25, a6, a7, a1);
  uint64_t v32 = *(void *)(v22 + 160);
  uint64_t v33 = v19;
  OS_dispatch_queue.sync<A>(execute:)();
  sub_100AA5514();
  sub_1007AFB78((uint64_t)v19, (uint64_t)v15, type metadata accessor for WildModeAssociationRecord);
  swift_storeEnumTagMultiPayload();
  sub_100793F28((uint64_t)v15, v31, a9, (uint64_t)v21);
  sub_10001DAB4((uint64_t)v15, &qword_101660A90);
  sub_1007AFBFC((uint64_t)v19, type metadata accessor for WildModeAssociationRecord);
  swift_release();
  sub_1007AFBFC((uint64_t)v21, type metadata accessor for WildModeAssociationRecord);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
}

uint64_t sub_1007938C8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v61 = a7;
  uint64_t v64 = a1;
  uint64_t v12 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v12 - 8);
  uint64_t v63 = (uint64_t)&v58 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for WildModeTrackingLocation(0);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14 - 8);
  uint64_t v67 = (uint64_t)&v58 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v19 = (double *)((char *)&v58 - v18);
  id v62 = a2;
  uint64_t v20 = [a2 type];
  if (v20)
  {
    unint64_t v22 = (unint64_t)v20;
    if (v20 != (void *)1) {
      goto LABEL_31;
    }
    char v21 = 1;
  }
  else
  {
    char v21 = 0;
  }
  id v23 = (int *)type metadata accessor for WildModeAssociationRecord(0);
  uint64_t v24 = v64;
  *(unsigned char *)(v64 + v23[6]) = v21;
  uint64_t v25 = (void *)(v24 + v23[12]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *uint64_t v25 = a3;
  v25[1] = a4;
  v25[2] = a5;
  unint64_t v60 = v23;
  uint64_t v26 = (uint64_t *)(v24 + v23[8]);
  uint64_t v68 = (void *)*v26;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1004457C8(a6);
  uint64_t v27 = sub_101159448((uint64_t)v68);
  swift_bridgeObjectRelease();
  uint64_t v28 = sub_1007108AC(v27);
  swift_bridgeObjectRelease();
  uint64_t v29 = _swiftEmptyArrayStorage;
  uint64_t v68 = _swiftEmptyArrayStorage;
  uint64_t v66 = (void *)v28[2];
  if (!v66)
  {
LABEL_26:
    swift_release();
    swift_bridgeObjectRelease();
    *uint64_t v26 = (uint64_t)v29;
    sub_100780E24(v26, (uint64_t (*)(uint64_t))sub_100BBD36C);
    unint64_t v50 = v60;
    uint64_t v49 = v61;
    uint64_t v51 = v64;
    sub_100156D3C(v61 + v60[14], v64 + v60[14], &qword_1016653B0);
    sub_100156D3C(v49 + v50[15], v51 + v50[15], (uint64_t *)&unk_10166BFA0);
    *(unsigned char *)(v51 + v50[9]) = 0;
    id v52 = [v62 action];
    if ((unint64_t)v52 < 5) {
      char v53 = (_BYTE)v52 + 1;
    }
    else {
      char v53 = 0;
    }
    uint64_t v54 = v63;
    static Date.trustedNow.getter(v63);
    uint64_t v55 = type metadata accessor for Date();
    uint64_t v56 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v55 - 8) + 56);
    v56(v54, 0, 1, v55);
    sub_100062604(v54, v51 + v50[18], (uint64_t *)&unk_10163AC90);
    static Date.trustedNow.getter(v54);
    v56(v54, 0, 1, v55);
    uint64_t result = sub_10015E184(v54, v53);
    *(unsigned char *)(v51 + v50[16]) = v53;
    return result;
  }
  unint64_t v59 = v26;
  unint64_t v22 = 0;
  unint64_t v65 = 0x8000000101407030;
  while (v22 < v28[2])
  {
    unint64_t v31 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
    uint64_t v32 = *(void *)(v15 + 72);
    sub_1007AFB78((uint64_t)v28 + v31 + v32 * v22, (uint64_t)v19, type metadata accessor for WildModeTrackingLocation);
    id v33 = [self sharedInstance];
    unsigned int v34 = [v33 isInternalBuild];

    if (v34
      && (id v35 = [self standardUserDefaults],
          NSString v36 = String._bridgeToObjectiveC()(),
          unsigned int v37 = [v35 BOOLForKey:v36],
          v35,
          v36,
          v37))
    {
      static os_log_type_t.default.getter();
      sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
      uint64_t v30 = (void *)static OS_os_log.default.getter();
      os_log(_:dso:log:_:_:)();
    }
    else
    {
      double v38 = *v19;
      double v39 = v19[1];
      if (qword_101636A88 != -1) {
        swift_once();
      }
      if (!objc_msgSend((id)qword_101642640, "containsCoordinate:", v38, v39)) {
        goto LABEL_20;
      }
      uint64_t v40 = (void *)qword_101642648;
      if (qword_101642648)
      {
        id v41 = (id)qword_101642648;
      }
      else
      {
        os_log_type_t v42 = (void *)sub_10036D0D4();
        os_log_type_t v43 = (void *)qword_101642648;
        qword_101642648 = (uint64_t)v42;
        id v41 = v42;

        uint64_t v40 = 0;
      }
      id v44 = v40;
      unsigned __int8 v45 = [v41 containsCoordinate:v38, v39];

      if ((v45 & 1) == 0)
      {
LABEL_20:
        sub_1007B136C((uint64_t)v19, v67, type metadata accessor for WildModeTrackingLocation);
        uint64_t v46 = v68;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1000B7CEC(0, v46[2] + 1, 1);
          uint64_t v46 = v68;
        }
        unint64_t v48 = v46[2];
        unint64_t v47 = v46[3];
        if (v48 >= v47 >> 1)
        {
          sub_1000B7CEC(v47 > 1, v48 + 1, 1);
          uint64_t v46 = v68;
        }
        v46[2] = v48 + 1;
        sub_1007B136C(v67, (uint64_t)v46 + v31 + v48 * v32, type metadata accessor for WildModeTrackingLocation);
        goto LABEL_9;
      }
    }
    sub_1007AFBFC((uint64_t)v19, type metadata accessor for WildModeTrackingLocation);
LABEL_9:
    if (v66 == (void *)++v22)
    {
      uint64_t v29 = v68;
      uint64_t v26 = v59;
      goto LABEL_26;
    }
  }
  __break(1u);
LABEL_31:
  type metadata accessor for TrackingObservationType(0);
  uint64_t v68 = (void *)v22;
  uint64_t result = _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
  __break(1u);
  return result;
}

void sub_100793F28(uint64_t a1, void (*a2)(uint64_t, void *), uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for WildModeAssociationRecord(0);
  __chkstk_darwin(v7 - 8);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_10000588C(&qword_101660A90);
  __chkstk_darwin(v10);
  uint64_t v12 = (void **)((char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001D074(a1, (uint64_t)v12, &qword_101660A90);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v13 = *v12;
    static os_log_type_t.error.getter();
    if (qword_1016372F0 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_101342130;
    uint64_t v20 = v13;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v15 = String.init<A>(describing:)();
    uint64_t v17 = v16;
    *(void *)(v14 + 56) = &type metadata for String;
    *(void *)(v14 + 64) = sub_10000B4CC();
    *(void *)(v14 + 32) = v15;
    *(void *)(v14 + 40) = v17;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    type metadata accessor for TrackingAvoidanceError(0);
    uint64_t v19 = 1;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100796E74(&qword_101638410, type metadata accessor for TrackingAvoidanceError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v18 = v20;
    a2(a4, v20);
    swift_errorRelease();
  }
  else
  {
    sub_1007B136C((uint64_t)v12, (uint64_t)v9, type metadata accessor for WildModeAssociationRecord);
    a2((uint64_t)v9, 0);
    sub_1007AFBFC((uint64_t)v9, type metadata accessor for WildModeAssociationRecord);
  }
}

uint64_t sub_100794200(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v59 = a4;
  uint64_t v60 = a1;
  uint64_t v55 = sub_10000588C(&qword_101660A90);
  __chkstk_darwin(v55);
  uint64_t v56 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v10 = __chkstk_darwin(v9 - 8);
  uint64_t v51 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = __chkstk_darwin(v10);
  id v52 = (char *)&v49 - v13;
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v49 - v14;
  uint64_t v16 = (int *)type metadata accessor for WildModeAssociationRecord(0);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for Date();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = __chkstk_darwin(v19);
  unint64_t v50 = (char *)&v49 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v49 - v23;
  uint64_t v53 = *(void *)(v5 + 16);
  uint64_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
  v25((char *)&v49 - v23, a2, v19);
  sub_1007AFB78(v60, (uint64_t)v18, type metadata accessor for WildModeAssociationRecord);
  v18[v16[9]] = 2;
  uint64_t v26 = (uint64_t)&v18[v16[11]];
  uint64_t v57 = a3;
  uint64_t v27 = (uint64_t)a3;
  uint64_t v28 = v20;
  sub_1000BD0E8(v27);
  sub_10001DAB4(v26, (uint64_t *)&unk_10163AC90);
  uint64_t v54 = v24;
  v25((char *)v26, (uint64_t)v24, v19);
  uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v20 + 56);
  v29(v26, 0, 1, v19);
  static Date.trustedNow.getter((uint64_t)v15);
  v29((uint64_t)v15, 0, 1, v19);
  uint64_t v30 = (uint64_t)v15;
  uint64_t v31 = (uint64_t)v52;
  sub_100062604(v30, (uint64_t)&v18[v16[18]], (uint64_t *)&unk_10163AC90);
  static Date.trustedNow.getter(v31);
  v29(v31, 0, 1, v19);
  uint64_t v32 = v16[17];
  uint64_t v58 = v28;
  id v33 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48);
  uint64_t v60 = v19;
  if (v33(v31, 1, v19) == 1)
  {
    sub_10001DAB4(v31, (uint64_t *)&unk_10163AC90);
    swift_bridgeObjectRetain();
    unint64_t v34 = sub_100723FB0(6u);
    char v36 = v35;
    swift_bridgeObjectRelease();
    if (v36)
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v38 = *(void *)&v18[v32];
      uint64_t v61 = v38;
      *(void *)&v18[v32] = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_100E80940();
        uint64_t v38 = v61;
      }
      double v39 = v51;
      (*(void (**)(char *, unint64_t, uint64_t))(v58 + 32))(v51, *(void *)(v38 + 56) + *(void *)(v58 + 72) * v34, v60);
      sub_100167A88(v34, v38);
      *(void *)&v18[v32] = v38;
      swift_bridgeObjectRelease();
      uint64_t v40 = (uint64_t)v39;
      uint64_t v41 = 0;
    }
    else
    {
      uint64_t v41 = 1;
      uint64_t v40 = (uint64_t)v51;
    }
    v29(v40, v41, 1, v60);
    uint64_t v44 = sub_10001DAB4(v40, (uint64_t *)&unk_10163AC90);
    uint64_t v45 = (uint64_t)v56;
  }
  else
  {
    uint64_t v42 = (uint64_t)v50;
    (*(void (**)(char *, uint64_t, uint64_t))(v58 + 32))(v50, v31, v60);
    char v43 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v61 = *(void *)&v18[v32];
    *(void *)&v18[v32] = 0x8000000000000000;
    sub_10016D58C(v42, 6, v43);
    *(void *)&v18[v32] = v61;
    uint64_t v44 = swift_bridgeObjectRelease();
    uint64_t v45 = (uint64_t)v56;
  }
  v18[v16[16]] = 6;
  __chkstk_darwin(v44);
  *(&v49 - 2) = v46;
  *(&v49 - 1) = (uint64_t)v18;
  OS_dispatch_queue.sync<A>(execute:)();
  sub_100AA5514();
  sub_1007AFB78((uint64_t)v18, v45, type metadata accessor for WildModeAssociationRecord);
  swift_storeEnumTagMultiPayload();
  unint64_t v47 = v57;
  sub_100795228(v45, v57);
  sub_10001DAB4(v45, &qword_101660A90);
  sub_1007AFBFC((uint64_t)v18, type metadata accessor for WildModeAssociationRecord);
  sub_1000A1534((uint64_t)v47);
  return (*(uint64_t (**)(char *, uint64_t))(v58 + 8))(v54, v60);
}

uint64_t sub_1007948FC(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v53 = a3;
  uint64_t v49 = a1;
  uint64_t v50 = sub_10000588C(&qword_101660A90);
  __chkstk_darwin(v50);
  uint64_t v51 = (uint64_t)&v45 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for Date();
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v45 = (char *)&v45 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (int *)type metadata accessor for WildModeAssociationRecord(0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000588C((uint64_t *)&unk_10163AC90);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v16 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = (char *)&v45 - v18;
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v22 = (char *)&v45 - v21;
  __chkstk_darwin(v20);
  uint64_t v48 = v8;
  uint64_t v23 = *(void (**)(void))(v8 + 56);
  uint64_t v52 = (uint64_t)&v45 - v24;
  v23();
  uint64_t v46 = v16;
  if (a2)
  {
    if (a2 == 2)
    {
      static os_log_type_t.default.getter();
      if (qword_1016372F0 != -1) {
        swift_once();
      }
      char v25 = 2;
      os_log(_:dso:log:_:_:)();
      static Date.distantFuture.getter();
      ((void (*)(char *, void, uint64_t, uint64_t))v23)(v22, 0, 1, v7);
      goto LABEL_13;
    }
    if (a2 == 1)
    {
      static os_log_type_t.default.getter();
      if (qword_1016372F0 != -1) {
        swift_once();
      }
      char v25 = 2;
      os_log(_:dso:log:_:_:)();
      sub_100780EDC((uint64_t)v22);
LABEL_13:
      uint64_t v26 = v52;
      sub_100062604((uint64_t)v22, v52, (uint64_t *)&unk_10163AC90);
      goto LABEL_17;
    }
    static os_log_type_t.default.getter();
    if (qword_1016372F0 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    uint64_t v26 = v52;
    sub_10001DAB4(v52, (uint64_t *)&unk_10163AC90);
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v23)(v26, 1, 1, v7);
    char v25 = 4;
  }
  else
  {
    static os_log_type_t.default.getter();
    if (qword_1016372F0 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    uint64_t v26 = v52;
    sub_10001DAB4(v52, (uint64_t *)&unk_10163AC90);
    char v25 = 1;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v23)(v26, 1, 1, v7);
  }
LABEL_17:
  uint64_t v47 = *(void *)(v47 + 16);
  sub_1007AFB78(v49, (uint64_t)v12, type metadata accessor for WildModeAssociationRecord);
  v12[v10[9]] = v25;
  swift_beginAccess();
  uint64_t v27 = (uint64_t)&v12[v10[11]];
  uint64_t v49 = a4;
  sub_1000BD0E8((uint64_t)v53);
  sub_10001DAB4(v27, (uint64_t *)&unk_10163AC90);
  sub_10001D074(v26, v27, (uint64_t *)&unk_10163AC90);
  static Date.trustedNow.getter((uint64_t)v22);
  ((void (*)(char *, void, uint64_t, uint64_t))v23)(v22, 0, 1, v7);
  sub_100062604((uint64_t)v22, (uint64_t)&v12[v10[18]], (uint64_t *)&unk_10163AC90);
  static Date.trustedNow.getter((uint64_t)v19);
  ((void (*)(char *, void, uint64_t, uint64_t))v23)(v19, 0, 1, v7);
  uint64_t v28 = v10[17];
  uint64_t v29 = v48;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v19, 1, v7) == 1)
  {
    sub_10001DAB4((uint64_t)v19, (uint64_t *)&unk_10163AC90);
    swift_bridgeObjectRetain();
    unint64_t v30 = sub_100723FB0(6u);
    char v32 = v31;
    swift_bridgeObjectRelease();
    if (v32)
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v34 = *(void *)&v12[v28];
      uint64_t v54 = v34;
      *(void *)&v12[v28] = 0x8000000000000000;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_100E80940();
        uint64_t v34 = v54;
      }
      uint64_t v35 = (uint64_t)v46;
      (*(void (**)(char *, unint64_t, uint64_t))(v29 + 32))(v46, *(void *)(v34 + 56) + *(void *)(v29 + 72) * v30, v7);
      sub_100167A88(v30, v34);
      *(void *)&v12[v28] = v34;
      swift_bridgeObjectRelease();
      uint64_t v36 = 0;
    }
    else
    {
      uint64_t v36 = 1;
      uint64_t v35 = (uint64_t)v46;
    }
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v23)(v35, v36, 1, v7);
    uint64_t v39 = sub_10001DAB4(v35, (uint64_t *)&unk_10163AC90);
  }
  else
  {
    uint64_t v37 = (uint64_t)v45;
    (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v45, v19, v7);
    char v38 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v54 = *(void *)&v12[v28];
    *(void *)&v12[v28] = 0x8000000000000000;
    sub_10016D58C(v37, 6, v38);
    *(void *)&v12[v28] = v54;
    uint64_t v39 = swift_bridgeObjectRelease();
  }
  v12[v10[16]] = 6;
  __chkstk_darwin(v39);
  *(&v45 - 2) = v40;
  *(&v45 - 1) = v12;
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v41 = v52;
  sub_100AA5514();
  uint64_t v42 = v51;
  sub_1007AFB78((uint64_t)v12, v51, type metadata accessor for WildModeAssociationRecord);
  swift_storeEnumTagMultiPayload();
  char v43 = v53;
  sub_100795228(v42, v53);
  sub_10001DAB4(v42, &qword_101660A90);
  sub_1007AFBFC((uint64_t)v12, type metadata accessor for WildModeAssociationRecord);
  sub_1000A1534((uint64_t)v43);
  return sub_10001DAB4(v41, (uint64_t *)&unk_10163AC90);
}

uint64_t sub_100795228(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4 = sub_10000588C(&qword_101660A90);
  __chkstk_darwin(v4);
  uint64_t v6 = (void *)((char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  sub_10001D074(a1, (uint64_t)v6, &qword_101660A90);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = *v6;
    static os_log_type_t.error.getter();
    if (qword_1016372F0 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v8 = swift_allocObject();
    *(_OWORD *)(v8 + 16) = xmmword_101342130;
    v13[1] = v7;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v9 = String.init<A>(describing:)();
    uint64_t v11 = v10;
    *(void *)(v8 + 56) = &type metadata for String;
    *(void *)(v8 + 64) = sub_10000B4CC();
    *(void *)(v8 + 32) = v9;
    *(void *)(v8 + 40) = v11;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    if (a2)
    {
      swift_errorRetain();
      a2(v7);
      swift_errorRelease();
    }
    return swift_errorRelease();
  }
  else
  {
    static os_log_type_t.default.getter();
    if (qword_1016372F0 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    if (a2) {
      a2(0);
    }
    return sub_10001DAB4((uint64_t)v6, &qword_101660A90);
  }
}

uint64_t sub_10079547C()
{
  swift_release();

  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for UnauthorizedTracking()
{
  return self;
}

void sub_1007954F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10001D4B0(0, &qword_10164D830);
  sub_10033149C(&qword_10164D838, &qword_10164D830);
  v5.super.Class isa = Set._bridgeToObjectiveC()().super.isa;
  if (a2) {
    uint64_t v6 = _convertErrorToNSError(_:)();
  }
  else {
    uint64_t v6 = 0;
  }
  id v7 = (id)v6;
  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, v5.super.isa);
}

Swift::Int sub_1007955D8(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v141 = type metadata accessor for WildModeTrackingLocation(0);
  uint64_t v134 = *(void *)(v141 - 8);
  uint64_t v4 = __chkstk_darwin(v141);
  uint64_t v131 = (uint64_t)&v125 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v142 = (uint64_t)&v125 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v138 = (uint64_t)&v125 - v9;
  __chkstk_darwin(v8);
  uint64_t v137 = (uint64_t)&v125 - v10;
  Swift::Int v11 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v11);
  if (result >= v11)
  {
    if (v11 < 0) {
      goto LABEL_142;
    }
    if (v11) {
      return sub_1007960B4(0, v11, 1, a1);
    }
    return result;
  }
  if (v11 >= 0) {
    uint64_t v13 = v11;
  }
  else {
    uint64_t v13 = v11 + 1;
  }
  if (v11 < -1) {
    goto LABEL_150;
  }
  Swift::Int v127 = result;
  if (v11 < 2)
  {
    uint64_t v17 = _swiftEmptyArrayStorage;
    unint64_t v133 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v134 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v134 + 80));
    if (v11 != 1)
    {
      unint64_t v20 = _swiftEmptyArrayStorage[2];
      uint64_t v19 = (char *)_swiftEmptyArrayStorage;
LABEL_107:
      unsigned int v126 = v17;
      if (v20 >= 2)
      {
        Swift::Int v117 = *a1;
        do
        {
          unint64_t v118 = v20 - 2;
          if (v20 < 2) {
            goto LABEL_137;
          }
          if (!v117) {
            goto LABEL_149;
          }
          uint64_t v119 = v19;
          BOOL v120 = v19 + 32;
          uint64_t v121 = *(void *)&v19[16 * v118 + 32];
          uint64_t v122 = *(void *)&v19[16 * v20 + 24];
          sub_100796378(v117 + *(void *)(v134 + 72) * v121, v117 + *(void *)(v134 + 72) * *(void *)&v120[16 * v20 - 16], v117 + *(void *)(v134 + 72) * v122, v133);
          if (v2) {
            break;
          }
          if (v122 < v121) {
            goto LABEL_138;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v119 = sub_100B73584((uint64_t)v119);
          }
          if (v118 >= *((void *)v119 + 2)) {
            goto LABEL_139;
          }
          id v123 = &v119[16 * v118 + 32];
          *(void *)id v123 = v121;
          *((void *)v123 + 1) = v122;
          unint64_t v124 = *((void *)v119 + 2);
          if (v20 > v124) {
            goto LABEL_140;
          }
          uint64_t v19 = v119;
          memmove(&v119[16 * v20 + 16], &v119[16 * v20 + 32], 16 * (v124 - v20));
          *((void *)v119 + 2) = v124 - 1;
          unint64_t v20 = v124 - 1;
        }
        while (v124 > 2);
      }
LABEL_118:
      swift_bridgeObjectRelease();
      v126[2] = 0;
      return swift_bridgeObjectRelease();
    }
    unsigned int v126 = _swiftEmptyArrayStorage;
  }
  else
  {
    uint64_t v14 = v13 >> 1;
    uint64_t v15 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v15 + 16) = v14;
    uint64_t v16 = *(unsigned __int8 *)(v134 + 80);
    unsigned int v126 = (void *)v15;
    unint64_t v133 = v15 + ((v16 + 32) & ~v16);
  }
  Swift::Int v18 = 0;
  uint64_t v19 = (char *)_swiftEmptyArrayStorage;
  uint64_t v140 = a1;
  while (1)
  {
    Swift::Int v21 = v18;
    Swift::Int v22 = v18 + 1;
    Swift::Int v132 = v18;
    if (v18 + 1 >= v11)
    {
      Swift::Int v39 = v18 + 1;
      goto LABEL_59;
    }
    uint64_t v129 = v2;
    Swift::Int v23 = *(void *)(v134 + 72);
    uint64_t v24 = *a1 + v23 * v22;
    Swift::Int v136 = *a1;
    Swift::Int v25 = v136;
    uint64_t v26 = v137;
    sub_1007AFB78(v24, v137, type metadata accessor for WildModeTrackingLocation);
    uint64_t v27 = v25 + v23 * v21;
    uint64_t v28 = v138;
    sub_1007AFB78(v27, v138, type metadata accessor for WildModeTrackingLocation);
    LODWORD(v139) = static Date.< infix(_:_:)();
    sub_1007AFBFC(v28, type metadata accessor for WildModeTrackingLocation);
    uint64_t v29 = v26;
    Swift::Int v30 = v136;
    sub_1007AFBFC(v29, type metadata accessor for WildModeTrackingLocation);
    Swift::Int v143 = v23;
    if (v21 + 2 >= v11)
    {
      Swift::Int v33 = v21 + 2;
    }
    else
    {
      Swift::Int v31 = v23;
      unsigned int v128 = v19;
      uint64_t v32 = v23 * v22;
      Swift::Int v33 = v21 + 2;
      uint64_t v34 = v31 * (v21 + 2);
      while (1)
      {
        Swift::Int v35 = v11;
        uint64_t v36 = v137;
        sub_1007AFB78(v30 + v34, v137, type metadata accessor for WildModeTrackingLocation);
        uint64_t v37 = v138;
        sub_1007AFB78(v30 + v32, v138, type metadata accessor for WildModeTrackingLocation);
        int v38 = static Date.< infix(_:_:)();
        sub_1007AFBFC(v37, type metadata accessor for WildModeTrackingLocation);
        sub_1007AFBFC(v36, type metadata accessor for WildModeTrackingLocation);
        if ((v139 ^ v38)) {
          break;
        }
        v30 += v143;
        ++v33;
        Swift::Int v11 = v35;
        if (v35 == v33)
        {
          Swift::Int v33 = v35;
          uint64_t v19 = v128;
          Swift::Int v21 = v132;
          goto LABEL_25;
        }
      }
      uint64_t v19 = v128;
      Swift::Int v21 = v132;
      Swift::Int v11 = v35;
    }
LABEL_25:
    a1 = v140;
    if ((v139 & 1) == 0)
    {
      Swift::Int v39 = v33;
      goto LABEL_39;
    }
    if (v33 < v21) {
      goto LABEL_143;
    }
    Swift::Int v39 = v33;
    if (v21 < v33) {
      break;
    }
LABEL_39:
    uint64_t v2 = v129;
    if (v39 < v11) {
      goto LABEL_42;
    }
LABEL_59:
    if (v39 < v21) {
      goto LABEL_136;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    Swift::Int v139 = v39;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      uint64_t v19 = sub_100B729CC(0, *((void *)v19 + 2) + 1, 1, v19);
    }
    unint64_t v66 = *((void *)v19 + 2);
    unint64_t v65 = *((void *)v19 + 3);
    unint64_t v20 = v66 + 1;
    if (v66 >= v65 >> 1) {
      uint64_t v19 = sub_100B729CC((char *)(v65 > 1), v66 + 1, 1, v19);
    }
    *((void *)v19 + 2) = v20;
    uint64_t v67 = v19 + 32;
    uint64_t v68 = &v19[16 * v66 + 32];
    Swift::Int v69 = v139;
    *(void *)uint64_t v68 = v21;
    *((void *)v68 + 1) = v69;
    if (v66)
    {
      while (1)
      {
        unint64_t v70 = v20 - 1;
        if (v20 >= 4)
        {
          uint64_t v75 = &v67[16 * v20];
          uint64_t v76 = *((void *)v75 - 8);
          uint64_t v77 = *((void *)v75 - 7);
          BOOL v81 = __OFSUB__(v77, v76);
          uint64_t v78 = v77 - v76;
          if (v81) {
            goto LABEL_125;
          }
          uint64_t v80 = *((void *)v75 - 6);
          uint64_t v79 = *((void *)v75 - 5);
          BOOL v81 = __OFSUB__(v79, v80);
          uint64_t v73 = v79 - v80;
          char v74 = v81;
          if (v81) {
            goto LABEL_126;
          }
          unint64_t v82 = v20 - 2;
          unint64_t v83 = &v67[16 * v20 - 32];
          uint64_t v85 = *(void *)v83;
          uint64_t v84 = *((void *)v83 + 1);
          BOOL v81 = __OFSUB__(v84, v85);
          uint64_t v86 = v84 - v85;
          if (v81) {
            goto LABEL_128;
          }
          BOOL v81 = __OFADD__(v73, v86);
          uint64_t v87 = v73 + v86;
          if (v81) {
            goto LABEL_131;
          }
          if (v87 >= v78)
          {
            uint64_t v105 = &v67[16 * v70];
            uint64_t v107 = *(void *)v105;
            uint64_t v106 = *((void *)v105 + 1);
            BOOL v81 = __OFSUB__(v106, v107);
            uint64_t v108 = v106 - v107;
            if (v81) {
              goto LABEL_135;
            }
            BOOL v98 = v73 < v108;
            goto LABEL_96;
          }
        }
        else
        {
          if (v20 != 3)
          {
            uint64_t v99 = *((void *)v19 + 4);
            uint64_t v100 = *((void *)v19 + 5);
            BOOL v81 = __OFSUB__(v100, v99);
            uint64_t v92 = v100 - v99;
            char v93 = v81;
            goto LABEL_90;
          }
          uint64_t v72 = *((void *)v19 + 4);
          uint64_t v71 = *((void *)v19 + 5);
          BOOL v81 = __OFSUB__(v71, v72);
          uint64_t v73 = v71 - v72;
          char v74 = v81;
        }
        if (v74) {
          goto LABEL_127;
        }
        unint64_t v82 = v20 - 2;
        unint64_t v88 = &v67[16 * v20 - 32];
        uint64_t v90 = *(void *)v88;
        uint64_t v89 = *((void *)v88 + 1);
        BOOL v91 = __OFSUB__(v89, v90);
        uint64_t v92 = v89 - v90;
        char v93 = v91;
        if (v91) {
          goto LABEL_130;
        }
        uint64_t v94 = &v67[16 * v70];
        uint64_t v96 = *(void *)v94;
        uint64_t v95 = *((void *)v94 + 1);
        BOOL v81 = __OFSUB__(v95, v96);
        uint64_t v97 = v95 - v96;
        if (v81) {
          goto LABEL_133;
        }
        if (__OFADD__(v92, v97)) {
          goto LABEL_134;
        }
        if (v92 + v97 >= v73)
        {
          BOOL v98 = v73 < v97;
LABEL_96:
          if (v98) {
            unint64_t v70 = v82;
          }
          goto LABEL_98;
        }
LABEL_90:
        if (v93) {
          goto LABEL_129;
        }
        uint64_t v101 = &v67[16 * v70];
        uint64_t v103 = *(void *)v101;
        uint64_t v102 = *((void *)v101 + 1);
        BOOL v81 = __OFSUB__(v102, v103);
        uint64_t v104 = v102 - v103;
        if (v81) {
          goto LABEL_132;
        }
        if (v104 < v92) {
          goto LABEL_15;
        }
LABEL_98:
        unint64_t v109 = v70 - 1;
        if (v70 - 1 >= v20)
        {
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
          goto LABEL_145;
        }
        Swift::Int v110 = *a1;
        if (!*a1) {
          goto LABEL_147;
        }
        double v111 = v19;
        uint64_t v112 = &v67[16 * v109];
        uint64_t v113 = *(void *)v112;
        uint64_t v114 = &v67[16 * v70];
        uint64_t v115 = *((void *)v114 + 1);
        sub_100796378(v110 + *(void *)(v134 + 72) * *(void *)v112, v110 + *(void *)(v134 + 72) * *(void *)v114, v110 + *(void *)(v134 + 72) * v115, v133);
        if (v2) {
          goto LABEL_118;
        }
        if (v115 < v113) {
          goto LABEL_122;
        }
        if (v70 > *((void *)v111 + 2)) {
          goto LABEL_123;
        }
        *(void *)uint64_t v112 = v113;
        *(void *)&v67[16 * v109 + 8] = v115;
        unint64_t v116 = *((void *)v111 + 2);
        if (v70 >= v116) {
          goto LABEL_124;
        }
        uint64_t v19 = v111;
        unint64_t v20 = v116 - 1;
        memmove(&v67[16 * v70], v114 + 16, 16 * (v116 - 1 - v70));
        *((void *)v111 + 2) = v116 - 1;
        a1 = v140;
        if (v116 <= 2) {
          goto LABEL_15;
        }
      }
    }
    unint64_t v20 = 1;
LABEL_15:
    Swift::Int v11 = a1[1];
    Swift::Int v18 = v139;
    if (v139 >= v11)
    {
      uint64_t v17 = v126;
      goto LABEL_107;
    }
  }
  Swift::Int v139 = v11;
  unsigned int v128 = v19;
  uint64_t v40 = 0;
  Swift::Int v41 = v143;
  uint64_t v42 = v143 * (v33 - 1);
  Swift::Int v43 = v33 * v143;
  Swift::Int v44 = v21;
  uint64_t v45 = v21 * v143;
  do
  {
    if (v44 != v39 + v40 - 1)
    {
      Swift::Int v46 = v136;
      if (!v136) {
        goto LABEL_148;
      }
      unint64_t v47 = v136 + v45;
      uint64_t v48 = v136 + v42;
      sub_1007B136C(v136 + v45, v131, type metadata accessor for WildModeTrackingLocation);
      if (v45 < v42 || v47 >= v46 + v43)
      {
        swift_arrayInitWithTakeFrontToBack();
        Swift::Int v41 = v143;
      }
      else
      {
        Swift::Int v41 = v143;
        if (v45 != v42) {
          swift_arrayInitWithTakeBackToFront();
        }
      }
      sub_1007B136C(v131, v48, type metadata accessor for WildModeTrackingLocation);
      a1 = v140;
      Swift::Int v39 = v33;
    }
    ++v44;
    --v40;
    v42 -= v41;
    v43 -= v41;
    v45 += v41;
  }
  while (v44 < v39 + v40);
  uint64_t v19 = v128;
  uint64_t v2 = v129;
  Swift::Int v21 = v132;
  Swift::Int v11 = v139;
  if (v39 >= v139) {
    goto LABEL_59;
  }
LABEL_42:
  if (__OFSUB__(v39, v21)) {
    goto LABEL_141;
  }
  if (v39 - v21 >= v127) {
    goto LABEL_59;
  }
  if (__OFADD__(v21, v127)) {
    goto LABEL_144;
  }
  if (v21 + v127 >= v11) {
    Swift::Int v49 = v11;
  }
  else {
    Swift::Int v49 = v21 + v127;
  }
  if (v49 >= v21)
  {
    if (v39 != v49)
    {
      unsigned int v128 = v19;
      uint64_t v129 = v2;
      uint64_t v50 = *(void *)(v134 + 72);
      uint64_t v51 = v50 * (v39 - 1);
      uint64_t v135 = v50;
      Swift::Int v52 = v39 * v50;
      Swift::Int v130 = v49;
      do
      {
        uint64_t v54 = 0;
        Swift::Int v139 = v39;
        Swift::Int v136 = v52;
        while (1)
        {
          Swift::Int v143 = v21;
          Swift::Int v55 = *a1;
          uint64_t v56 = v137;
          sub_1007AFB78(v52 + v54 + *a1, v137, type metadata accessor for WildModeTrackingLocation);
          uint64_t v57 = v51;
          uint64_t v58 = v51 + v54 + v55;
          uint64_t v59 = a1;
          uint64_t v60 = v138;
          sub_1007AFB78(v58, v138, type metadata accessor for WildModeTrackingLocation);
          char v61 = static Date.< infix(_:_:)();
          sub_1007AFBFC(v60, type metadata accessor for WildModeTrackingLocation);
          sub_1007AFBFC(v56, type metadata accessor for WildModeTrackingLocation);
          if ((v61 & 1) == 0) {
            break;
          }
          uint64_t v62 = *v59;
          if (!*v59) {
            goto LABEL_146;
          }
          Swift::Int v52 = v136;
          uint64_t v51 = v57;
          uint64_t v63 = v62 + v57 + v54;
          sub_1007B136C(v62 + v136 + v54, v142, type metadata accessor for WildModeTrackingLocation);
          swift_arrayInitWithTakeFrontToBack();
          sub_1007B136C(v142, v63, type metadata accessor for WildModeTrackingLocation);
          v54 -= v135;
          Swift::Int v21 = v143 + 1;
          Swift::Int v53 = v139;
          a1 = v140;
          if (v139 == v143 + 1) {
            goto LABEL_52;
          }
        }
        Swift::Int v53 = v139;
        a1 = v59;
        uint64_t v51 = v57;
        Swift::Int v52 = v136;
LABEL_52:
        Swift::Int v39 = v53 + 1;
        v51 += v135;
        v52 += v135;
        Swift::Int v21 = v132;
      }
      while (v39 != v130);
      Swift::Int v39 = v130;
      uint64_t v19 = v128;
      uint64_t v2 = v129;
    }
    goto LABEL_59;
  }
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  __break(1u);
LABEL_150:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t sub_1007960B4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v26 = a1;
  uint64_t v29 = type metadata accessor for WildModeTrackingLocation(0);
  uint64_t v7 = __chkstk_darwin(v29);
  uint64_t v30 = (uint64_t)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = __chkstk_darwin(v7);
  Swift::Int v11 = (char *)&v24 - v10;
  uint64_t result = __chkstk_darwin(v9);
  uint64_t v15 = (char *)&v24 - v14;
  uint64_t v28 = a3;
  uint64_t v25 = a2;
  if (a3 != a2)
  {
    uint64_t v16 = *(void *)(v13 + 72);
    uint64_t v32 = v16 * (v28 - 1);
    uint64_t v27 = v16;
    uint64_t v31 = v16 * v28;
LABEL_5:
    uint64_t v17 = 0;
    uint64_t v18 = v26;
    while (1)
    {
      uint64_t v19 = a4;
      uint64_t v20 = *a4;
      sub_1007AFB78(v31 + v17 + v20, (uint64_t)v15, type metadata accessor for WildModeTrackingLocation);
      sub_1007AFB78(v32 + v17 + v20, (uint64_t)v11, type metadata accessor for WildModeTrackingLocation);
      char v21 = static Date.< infix(_:_:)();
      sub_1007AFBFC((uint64_t)v11, type metadata accessor for WildModeTrackingLocation);
      a4 = v19;
      uint64_t result = sub_1007AFBFC((uint64_t)v15, type metadata accessor for WildModeTrackingLocation);
      if ((v21 & 1) == 0)
      {
LABEL_4:
        v32 += v27;
        v31 += v27;
        if (++v28 == v25) {
          return result;
        }
        goto LABEL_5;
      }
      uint64_t v22 = *v19;
      if (!*v19) {
        break;
      }
      uint64_t v23 = v22 + v32 + v17;
      sub_1007B136C(v22 + v31 + v17, v30, type metadata accessor for WildModeTrackingLocation);
      swift_arrayInitWithTakeFrontToBack();
      uint64_t result = sub_1007B136C(v30, v23, type metadata accessor for WildModeTrackingLocation);
      v17 -= v27;
      ++v18;
      a4 = v19;
      if (v28 == v18) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_100796378(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v44 = type metadata accessor for WildModeTrackingLocation(0);
  uint64_t v8 = __chkstk_darwin(v44);
  uint64_t v43 = (uint64_t)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v8);
  Swift::Int v11 = (char *)&v40 - v10;
  uint64_t v13 = *(void *)(v12 + 72);
  if (!v13)
  {
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
    goto LABEL_63;
  }
  if (a2 - a1 == 0x8000000000000000 && v13 == -1) {
    goto LABEL_61;
  }
  int64_t v14 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v13 == -1) {
    goto LABEL_62;
  }
  uint64_t v15 = (uint64_t)(a2 - a1) / v13;
  unint64_t v47 = a1;
  unint64_t v46 = a4;
  uint64_t v16 = v14 / v13;
  if (v15 >= v14 / v13)
  {
    if ((v16 & 0x8000000000000000) == 0)
    {
      uint64_t v18 = v16 * v13;
      if (a4 < a2 || a2 + v18 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v26 = a4 + v18;
      unint64_t v45 = a4 + v18;
      unint64_t v47 = a2;
      if (v18 >= 1 && a1 < a2)
      {
        unint64_t v41 = a4;
        unint64_t v42 = a1;
        do
        {
          unint64_t v28 = a3 - v13;
          sub_1007AFB78(v26 - v13, (uint64_t)v11, type metadata accessor for WildModeTrackingLocation);
          unint64_t v29 = a2 - v13;
          unint64_t v30 = a3;
          uint64_t v31 = (uint64_t)v11;
          uint64_t v32 = v43;
          sub_1007AFB78(a2 - v13, v43, type metadata accessor for WildModeTrackingLocation);
          char v33 = static Date.< infix(_:_:)();
          uint64_t v34 = v32;
          Swift::Int v11 = (char *)v31;
          sub_1007AFBFC(v34, type metadata accessor for WildModeTrackingLocation);
          sub_1007AFBFC(v31, type metadata accessor for WildModeTrackingLocation);
          if (v33)
          {
            if (v30 < a2 || v28 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v36 = v41;
              unint64_t v37 = v42;
            }
            else
            {
              BOOL v35 = v30 == a2;
              unint64_t v36 = v41;
              unint64_t v37 = v42;
              if (!v35) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            v47 -= v13;
          }
          else
          {
            unint64_t v38 = v45;
            v45 -= v13;
            if (v30 < v38 || v28 >= v38)
            {
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v29 = a2;
              unint64_t v36 = v41;
              unint64_t v37 = v42;
            }
            else
            {
              unint64_t v37 = v42;
              if (v30 != v38) {
                swift_arrayInitWithTakeBackToFront();
              }
              unint64_t v29 = a2;
              unint64_t v36 = v41;
            }
          }
          unint64_t v26 = v45;
          if (v45 <= v36) {
            break;
          }
          a2 = v29;
          a3 = v28;
        }
        while (v29 > v37);
      }
      goto LABEL_59;
    }
  }
  else if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v17 = v15 * v13;
    if (a4 < a1 || a1 + v17 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v19 = a4 + v17;
    unint64_t v45 = a4 + v17;
    if (v17 >= 1 && a2 < a3)
    {
      do
      {
        sub_1007AFB78(a2, (uint64_t)v11, type metadata accessor for WildModeTrackingLocation);
        uint64_t v21 = v43;
        sub_1007AFB78(a4, v43, type metadata accessor for WildModeTrackingLocation);
        char v22 = static Date.< infix(_:_:)();
        sub_1007AFBFC(v21, type metadata accessor for WildModeTrackingLocation);
        sub_1007AFBFC((uint64_t)v11, type metadata accessor for WildModeTrackingLocation);
        unint64_t v23 = v47;
        if (v22)
        {
          unint64_t v24 = a2 + v13;
          if (v47 < a2 || v47 >= v24)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v47 == a2)
          {
            unint64_t v23 = a2;
          }
          else
          {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        else
        {
          unint64_t v25 = v46 + v13;
          if (v47 < v46 || v47 >= v25)
          {
            swift_arrayInitWithTakeFrontToBack();
          }
          else if (v47 != v46)
          {
            swift_arrayInitWithTakeBackToFront();
          }
          unint64_t v46 = v25;
          unint64_t v24 = a2;
        }
        unint64_t v47 = v23 + v13;
        a4 = v46;
        if (v46 >= v19) {
          break;
        }
        a2 = v24;
      }
      while (v24 < a3);
    }
LABEL_59:
    sub_100B72E58(&v47, &v46, (uint64_t *)&v45);
    return 1;
  }
LABEL_63:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void sub_100796894(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v41 = a2;
  uint64_t v5 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v5 - 8);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v8 - 8);
  uint64_t v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C(&qword_101657910);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)&v37 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v37 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = a1;
  id v18 = [a1 data];
  uint64_t v19 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v21 = v20;

  switch(v21 >> 62)
  {
    case 1uLL:
      LODWORD(v22) = HIDWORD(v19) - v19;
      if (__OFSUB__(HIDWORD(v19), v19))
      {
        __break(1u);
LABEL_20:
        __break(1u);
        JUMPOUT(0x100796E64);
      }
      uint64_t v22 = (int)v22;
LABEL_6:
      if (v22 == 28)
      {
        unint64_t v38 = v7;
        uint64_t v39 = a3;
        type metadata accessor for BeaconKeyManager(0);
        OSAllocatedUnfairLock.callAsFunction<A>(_:)();
        sub_1012E41F8((uint64_t)v13);
        swift_release();
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14) == 1)
        {
          sub_10001DAB4((uint64_t)v13, &qword_101657910);
          uint64_t v26 = v39;
        }
        else
        {
          sub_1007B136C((uint64_t)v13, (uint64_t)v17, type metadata accessor for BeaconKeyManager.IndexInformation);
          sub_100ACD178((uint64_t)v10);
          uint64_t v31 = type metadata accessor for OwnedBeaconRecord();
          int v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v31 - 8) + 48))(v10, 1, v31);
          sub_10001DAB4((uint64_t)v10, &qword_10163B9F0);
          uint64_t v26 = v39;
          if (v32 != 1)
          {
            (*(void (**)(uint64_t, void, void))(v39 + 16))(v39, 0, 0);
            sub_10001CFB8(v19, v21);
            sub_1007AFBFC((uint64_t)v17, type metadata accessor for BeaconKeyManager.IndexInformation);
            return;
          }
          sub_1007AFBFC((uint64_t)v17, type metadata accessor for BeaconKeyManager.IndexInformation);
        }
        uint64_t v33 = (uint64_t)v38;
        sub_100780834(v40, (uint64_t)v38);
        uint64_t v34 = type metadata accessor for Date();
        int v35 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 48))(v33, 1, v34);
        sub_10001DAB4(v33, (uint64_t *)&unk_10163AC90);
        if (v35 == 1) {
          uint64_t v36 = 3;
        }
        else {
          uint64_t v36 = 2;
        }
        (*(void (**)(uint64_t, uint64_t, void))(v26 + 16))(v26, v36, 0);
        sub_10001CFB8(v19, v21);
      }
      else
      {
LABEL_9:
        sub_10001CFB8(v19, v21);
        static os_log_type_t.error.getter();
        if (qword_1016372F0 != -1) {
          swift_once();
        }
        os_log(_:dso:log:_:_:)();
        type metadata accessor for TrackingAvoidanceError(0);
        uint64_t v42 = 3;
        sub_10000588C((uint64_t *)&unk_101637F00);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_101342130;
        *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
        *(void *)(inited + 40) = v28;
        *(void *)(inited + 72) = &type metadata for String;
        *(void *)(inited + 48) = 0xD00000000000001ALL;
        *(void *)(inited + 56) = 0x8000000101406DC0;
        sub_10092CEEC(inited);
        sub_100796E74(&qword_101638410, type metadata accessor for TrackingAvoidanceError);
        _BridgedStoredNSError.init(_:userInfo:)();
        unint64_t v29 = v43;
        unint64_t v30 = (void *)_convertErrorToNSError(_:)();
        (*(void (**)(uint64_t, uint64_t, void *))(a3 + 16))(a3, 3, v30);
      }
      return;
    case 2uLL:
      uint64_t v24 = *(void *)(v19 + 16);
      uint64_t v23 = *(void *)(v19 + 24);
      BOOL v25 = __OFSUB__(v23, v24);
      uint64_t v22 = v23 - v24;
      if (!v25) {
        goto LABEL_6;
      }
      goto LABEL_20;
    case 3uLL:
      goto LABEL_9;
    default:
      uint64_t v22 = BYTE6(v21);
      goto LABEL_6;
  }
}

uint64_t sub_100796E74(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_100796EBC(uint64_t a1, void *a2, char *a3)
{
  uint64_t v83 = type metadata accessor for UnwantedTrackingUserNotification();
  __chkstk_darwin(v83);
  uint64_t v80 = (char *)v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = type metadata accessor for URL();
  uint64_t v95 = *(char **)(v82 - 8);
  __chkstk_darwin(v82);
  BOOL v81 = (char *)v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_1016511E0);
  __chkstk_darwin(v8 - 8);
  uint64_t v89 = (uint64_t)v71 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = type metadata accessor for WildModeAssociationRecord(0);
  uint64_t v93 = *(void *)(v88 - 8);
  __chkstk_darwin(v88);
  uint64_t v96 = (uint64_t)v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C((uint64_t *)&unk_1016477E0);
  __chkstk_darwin(v11 - 8);
  uint64_t v13 = (char *)v71 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = type metadata accessor for MACAddress();
  uint64_t v86 = *(void *)(v91 - 8);
  __chkstk_darwin(v91);
  uint64_t v97 = (char *)v71 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  _Block_copy(a3);
  _Block_copy(a3);
  uint64_t v92 = a3;
  _Block_copy(a3);
  static os_log_type_t.default.getter();
  if (qword_101637278 != -1) {
LABEL_43:
  }
    swift_once();
  uint64_t v15 = sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_101347BA0;
  uint64_t v17 = (void *)*a2;
  uint64_t v90 = a2;
  uint64_t v99 = v17;
  sub_10000588C(&qword_10164D678);
  uint64_t v18 = String.init<A>(describing:)();
  a2 = v19;
  *(void *)(v16 + 56) = &type metadata for String;
  unint64_t v20 = sub_10000B4CC();
  *(void *)(v16 + 32) = v18;
  *(void *)(v16 + 40) = a2;
  *(void *)(v16 + 96) = &type metadata for String;
  *(void *)(v16 + 104) = v20;
  v71[0] = v20;
  *(void *)(v16 + 64) = v20;
  *(void *)(v16 + 72) = 0xD00000000000003BLL;
  *(void *)(v16 + 80) = 0x8000000101406DE0;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  static os_log_type_t.default.getter();
  if (qword_1016372F0 != -1) {
    swift_once();
  }
  uint64_t v21 = swift_allocObject();
  long long v72 = xmmword_101342130;
  *(_OWORD *)(v21 + 16) = xmmword_101342130;
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      a2 = (void *)a1;
    }
    else {
      a2 = (void *)(a1 & 0xFFFFFFFFFFFFFF8);
    }
    swift_bridgeObjectRetain();
    uint64_t v22 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v22 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  v71[1] = v15;
  *(void *)(v21 + 56) = &type metadata for Int;
  *(void *)(v21 + 64) = &protocol witness table for Int;
  *(void *)(v21 + 32) = v22;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  if ((unint64_t)a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v23 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  uint64_t v24 = (void (**)(void, void, void))v92;
  uint64_t v25 = v91;
  if (v23)
  {
    uint64_t v94 = 0;
    unint64_t v87 = a1 & 0xC000000000000001;
    uint64_t v84 = (unsigned int (**)(char *, uint64_t, uint64_t))(v86 + 48);
    uint64_t v78 = (void (**)(char *, char *, uint64_t))(v86 + 32);
    uint64_t v77 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v93 + 48);
    uint64_t v75 = (uint64_t (**)(char *, uint64_t, uint64_t))(v95 + 16);
    char v74 = (void (**)(char *, uint64_t))(v95 + 8);
    uint64_t v85 = v92 + 16;
    uint64_t v79 = (void (**)(char *, uint64_t))(v86 + 8);
    uint64_t v26 = 4;
    uint64_t v86 = a1;
    uint64_t v76 = v13;
    uint64_t v73 = v23;
    while (1)
    {
      uint64_t v27 = v26 - 4;
      if (v87)
      {
        uint64_t v28 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        uint64_t v29 = v26 - 3;
        if (__OFADD__(v27, 1)) {
          goto LABEL_42;
        }
      }
      else
      {
        uint64_t v28 = (char *)*(id *)(a1 + 8 * v26);
        uint64_t v29 = v26 - 3;
        if (__OFADD__(v27, 1))
        {
LABEL_42:
          __break(1u);
          goto LABEL_43;
        }
      }
      uint64_t v95 = v28;
      id v30 = [v28 trackingIdentifier];
      id v31 = [v30 address];

      static Data._unconditionallyBridgeFromObjectiveC(_:)();
      MACAddress.init(data:type:)();
      if ((*v84)(v13, 1, v25) == 1) {
        break;
      }
      uint64_t v32 = (uint64_t)v97;
      (*v78)(v97, v13, v25);
      uint64_t v33 = v90[2];
      uint64_t v34 = v89;
      sub_10126F314(v32, v89);
      if ((*v77)(v34, 1, v88) == 1)
      {
        swift_bridgeObjectRelease();
        sub_10001DAB4(v34, &qword_1016511E0);
        static os_log_type_t.error.getter();
        uint64_t v61 = swift_allocObject();
        *(_OWORD *)(v61 + 16) = v72;
        uint64_t v62 = MACAddress.description.getter();
        uint64_t v63 = v71[0];
        *(void *)(v61 + 56) = &type metadata for String;
        *(void *)(v61 + 64) = v63;
        *(void *)(v61 + 32) = v62;
        *(void *)(v61 + 40) = v64;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        type metadata accessor for TrackingAvoidanceError(0);
        uint64_t v98 = 10;
        sub_10000588C((uint64_t *)&unk_101637F00);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = v72;
        *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
        *(void *)(inited + 40) = v66;
        *(void *)(inited + 72) = &type metadata for String;
        *(void *)(inited + 48) = 0xD000000000000021;
        *(void *)(inited + 56) = 0x8000000101406E90;
        sub_10092CEEC(inited);
        sub_100796E74(&qword_101638410, type metadata accessor for TrackingAvoidanceError);
        _BridgedStoredNSError.init(_:userInfo:)();
        uint64_t v67 = v99;
        _Block_copy(v24);
        if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
          && _CocoaArrayWrapper.endIndex.getter())
        {
          sub_100DF30AC((unint64_t)_swiftEmptyArrayStorage);
        }
        uint64_t v68 = v95;
        sub_10001D4B0(0, &qword_10164D830);
        sub_10033149C(&qword_10164D838, &qword_10164D830);
        Class isa = Set._bridgeToObjectiveC()().super.isa;
        unint64_t v70 = (void *)_convertErrorToNSError(_:)();
        ((void (**)(void, Class, void *))v24)[2](v24, isa, v70);
        swift_bridgeObjectRelease();

        _Block_release(v24);
        (*v79)(v97, v25);
        goto LABEL_41;
      }
      uint64_t v93 = v29;
      uint64_t v35 = v96;
      sub_1007B136C(v34, v96, type metadata accessor for WildModeAssociationRecord);
      uint64_t v36 = *(void *)(v33 + 160);
      if (qword_101636940 != -1) {
        swift_once();
      }
      uint64_t v37 = v82;
      uint64_t v38 = sub_100010324(v82, (uint64_t)qword_10170DA70);
      uint64_t v39 = v81;
      uint64_t v40 = (*v75)(v81, v38, v37);
      __chkstk_darwin(v40);
      v71[-4] = v36;
      v71[-3] = v35;
      v71[-2] = v39;
      uint64_t v41 = v94;
      OS_dispatch_queue.sync<A>(execute:)();
      (*v74)(v39, v37);
      if (qword_101636F50 != -1) {
        swift_once();
      }
      uint64_t v42 = type metadata accessor for Logger();
      sub_100010324(v42, (uint64_t)qword_10170E9E8);
      uint64_t v43 = Logger.logObject.getter();
      os_log_type_t v44 = static os_log_type_t.default.getter();
      BOOL v45 = os_log_type_enabled(v43, v44);
      unint64_t v46 = v80;
      if (v45)
      {
        unint64_t v47 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v47 = 0;
        _os_log_impl((void *)&_mh_execute_header, v43, v44, "Requesting SPUnknownBeaconsChangedNotification to be posted before rate limit.", v47, 2u);
        swift_slowDealloc();
      }

      dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)();
      if (v41) {
        swift_errorRelease();
      }
      uint64_t v48 = Logger.logObject.getter();
      os_log_type_t v49 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v48, v49))
      {
        uint64_t v50 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v50 = 0;
        _os_log_impl((void *)&_mh_execute_header, v48, v49, "Requesting SPUnknownBeaconsSetChangedNotification to be posted before rate limit.", v50, 2u);
        swift_slowDealloc();
      }

      dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)();
      uint64_t v24 = (void (**)(void, void, void))v92;
      uint64_t v51 = v91;
      uint64_t v94 = 0;
      Swift::Int v52 = v95;
      uint64_t v53 = v96;
      uint64_t v54 = v83;
      sub_1007AFB78(v96, (uint64_t)&v46[*(int *)(v83 + 20)], type metadata accessor for WildModeAssociationRecord);
      *unint64_t v46 = 2;
      v46[*(int *)(v54 + 24)] = 66;
      if (qword_101637118 != -1) {
        swift_once();
      }
      sub_101097ACC((uint64_t)v46);
      _Block_copy(v24);
      if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
        && _CocoaArrayWrapper.endIndex.getter())
      {
        sub_100DF30AC((unint64_t)_swiftEmptyArrayStorage);
      }
      sub_10001D4B0(0, &qword_10164D830);
      sub_10033149C(&qword_10164D838, &qword_10164D830);
      a2 = Set._bridgeToObjectiveC()().super.isa;
      ((void (**)(void, void *, void))v24)[2](v24, a2, 0);
      swift_bridgeObjectRelease();

      _Block_release(v24);
      sub_1007AFBFC((uint64_t)v46, (uint64_t (*)(void))type metadata accessor for UnwantedTrackingUserNotification);
      sub_1007AFBFC(v53, type metadata accessor for WildModeAssociationRecord);
      uint64_t v25 = v51;
      (*v79)(v97, v51);
      ++v26;
      a1 = v86;
      uint64_t v13 = v76;
      if (v93 == v73) {
        goto LABEL_36;
      }
    }
    swift_bridgeObjectRelease();
    sub_10001DAB4((uint64_t)v13, (uint64_t *)&unk_1016477E0);
    static os_log_type_t.error.getter();
    os_log(_:dso:log:_:_:)();
    type metadata accessor for TrackingAvoidanceError(0);
    uint64_t v98 = 3;
    sub_10000588C((uint64_t *)&unk_101637F00);
    uint64_t v55 = swift_initStackObject();
    *(_OWORD *)(v55 + 16) = v72;
    *(void *)(v55 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(v55 + 40) = v56;
    *(void *)(v55 + 72) = &type metadata for String;
    *(void *)(v55 + 48) = 0xD00000000000001ALL;
    *(void *)(v55 + 56) = 0x8000000101406DC0;
    sub_10092CEEC(v55);
    sub_100796E74(&qword_101638410, type metadata accessor for TrackingAvoidanceError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v57 = v99;
    _Block_copy(v24);
    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
      sub_100DF30AC((unint64_t)_swiftEmptyArrayStorage);
    }
    uint64_t v58 = v95;
    sub_10001D4B0(0, &qword_10164D830);
    sub_10033149C(&qword_10164D838, &qword_10164D830);
    Class v59 = Set._bridgeToObjectiveC()().super.isa;
    uint64_t v60 = (void *)_convertErrorToNSError(_:)();
    ((void (**)(void, Class, void *))v24)[2](v24, v59, v60);
    swift_bridgeObjectRelease();

    _Block_release(v24);
  }
  else
  {
LABEL_36:
    swift_bridgeObjectRelease();
  }
LABEL_41:
  _Block_release(v24);
  _Block_release(v24);
  _Block_release(v24);
}

void sub_100797F70(unint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v83 = a3;
  uint64_t v72 = type metadata accessor for UnwantedTrackingUserNotification();
  __chkstk_darwin(v72);
  uint64_t v6 = (char *)v62 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = type metadata accessor for URL();
  uint64_t v85 = *(char **)(v71 - 8);
  __chkstk_darwin(v71);
  unint64_t v70 = (char *)v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = sub_10000588C(&qword_1016511E0);
  __chkstk_darwin(v8 - 8);
  uint64_t v76 = (uint64_t)v62 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = type metadata accessor for WildModeAssociationRecord(0);
  unint64_t v84 = *(void *)(v77 - 8);
  __chkstk_darwin(v77);
  BOOL v81 = (char *)v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C((uint64_t *)&unk_1016477E0);
  __chkstk_darwin(v11 - 8);
  uint64_t v79 = (char *)v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v82 = type metadata accessor for MACAddress();
  unint64_t v13 = *(void *)(v82 - 8);
  __chkstk_darwin(v82);
  uint64_t v86 = (char *)v62 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  static os_log_type_t.default.getter();
  if (qword_101637278 != -1) {
LABEL_35:
  }
    swift_once();
  uint64_t v15 = sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_101347BA0;
  uint64_t v17 = (void *)*a2;
  uint64_t v78 = a2;
  uint64_t v88 = v17;
  sub_10000588C(&qword_10164D678);
  uint64_t v18 = String.init<A>(describing:)();
  uint64_t v20 = v19;
  *(void *)(v16 + 56) = &type metadata for String;
  unint64_t v21 = sub_10000B4CC();
  *(void *)(v16 + 32) = v18;
  *(void *)(v16 + 40) = v20;
  *(void *)(v16 + 96) = &type metadata for String;
  *(void *)(v16 + 104) = v21;
  v62[0] = v21;
  *(void *)(v16 + 64) = v21;
  *(void *)(v16 + 72) = 0xD00000000000003BLL;
  *(void *)(v16 + 80) = 0x8000000101406DE0;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  static os_log_type_t.default.getter();
  if (qword_1016372F0 != -1) {
    swift_once();
  }
  uint64_t v22 = swift_allocObject();
  long long v63 = xmmword_101342130;
  *(_OWORD *)(v22 + 16) = xmmword_101342130;
  v62[1] = v15;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v23 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v24 = (uint64_t)v81;
  *(void *)(v22 + 56) = &type metadata for Int;
  *(void *)(v22 + 64) = &protocol witness table for Int;
  *(void *)(v22 + 32) = v23;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v25 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v25 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  uint64_t v26 = v82;
  if (v25)
  {
    unint64_t v80 = a1;
    unint64_t v75 = a1 & 0xC000000000000001;
    char v74 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
    Swift::Int v69 = (void (**)(char *, uint64_t, uint64_t))(v13 + 32);
    uint64_t v68 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v84 + 48);
    unint64_t v65 = (uint64_t (**)(char *, uint64_t, uint64_t))(v85 + 16);
    uint64_t v64 = (void (**)(char *, uint64_t))(v85 + 8);
    uint64_t v73 = v83 + 16;
    uint64_t v67 = (void (**)(char *, uint64_t))(v13 + 8);
    a1 = 4;
    uint64_t v66 = v6;
    do
    {
      a2 = (void *)(a1 - 4);
      if (v75)
      {
        uint64_t v27 = (char *)specialized _ArrayBuffer._getElementSlowPath(_:)();
        unint64_t v13 = a1 - 3;
        if (__OFADD__(a2, 1)) {
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v27 = (char *)*(id *)(v80 + 8 * a1);
        unint64_t v13 = a1 - 3;
        if (__OFADD__(a2, 1))
        {
LABEL_34:
          __break(1u);
          goto LABEL_35;
        }
      }
      uint64_t v85 = v27;
      id v28 = [v27 trackingIdentifier];
      id v29 = [v28 address];

      static Data._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v30 = (uint64_t)v79;
      MACAddress.init(data:type:)();
      if ((*v74)(v30, 1, v26) == 1)
      {
        swift_bridgeObjectRelease();
        sub_10001DAB4(v30, (uint64_t *)&unk_1016477E0);
        static os_log_type_t.error.getter();
        os_log(_:dso:log:_:_:)();
        type metadata accessor for TrackingAvoidanceError(0);
        uint64_t v87 = 3;
        sub_10000588C((uint64_t *)&unk_101637F00);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = v63;
        *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
        *(void *)(inited + 40) = v50;
        *(void *)(inited + 72) = &type metadata for String;
        *(void *)(inited + 48) = 0xD00000000000001ALL;
        *(void *)(inited + 56) = 0x8000000101406DC0;
        sub_10092CEEC(inited);
        sub_100796E74(&qword_101638410, type metadata accessor for TrackingAvoidanceError);
        _BridgedStoredNSError.init(_:userInfo:)();
        uint64_t v51 = v88;
        Swift::Int v52 = (void *)_convertErrorToNSError(_:)();
        (*(void (**)(uint64_t, void *))(v83 + 16))(v83, v52);

        return;
      }
      unint64_t v84 = v13;
      uint64_t v31 = v25;
      uint64_t v32 = (uint64_t)v86;
      (*v69)(v86, v30, v26);
      uint64_t v33 = v78[2];
      uint64_t v34 = v76;
      sub_10126F314(v32, v76);
      if ((*v68)(v34, 1, v77) == 1)
      {
        swift_bridgeObjectRelease();
        sub_10001DAB4(v34, &qword_1016511E0);
        static os_log_type_t.error.getter();
        uint64_t v53 = swift_allocObject();
        *(_OWORD *)(v53 + 16) = v63;
        uint64_t v54 = v86;
        uint64_t v55 = MACAddress.description.getter();
        uint64_t v56 = v62[0];
        *(void *)(v53 + 56) = &type metadata for String;
        *(void *)(v53 + 64) = v56;
        *(void *)(v53 + 32) = v55;
        *(void *)(v53 + 40) = v57;
        os_log(_:dso:log:_:_:)();
        swift_bridgeObjectRelease();
        type metadata accessor for TrackingAvoidanceError(0);
        uint64_t v87 = 10;
        sub_10000588C((uint64_t *)&unk_101637F00);
        uint64_t v58 = swift_initStackObject();
        *(_OWORD *)(v58 + 16) = v63;
        *(void *)(v58 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
        *(void *)(v58 + 40) = v59;
        *(void *)(v58 + 72) = &type metadata for String;
        *(void *)(v58 + 48) = 0xD000000000000021;
        *(void *)(v58 + 56) = 0x8000000101406E90;
        sub_10092CEEC(v58);
        sub_100796E74(&qword_101638410, type metadata accessor for TrackingAvoidanceError);
        _BridgedStoredNSError.init(_:userInfo:)();
        uint64_t v60 = v88;
        uint64_t v61 = (void *)_convertErrorToNSError(_:)();
        (*(void (**)(uint64_t, void *))(v83 + 16))(v83, v61);

        (*v67)(v54, v26);
        return;
      }
      sub_1007B136C(v34, v24, type metadata accessor for WildModeAssociationRecord);
      uint64_t v35 = *(void *)(v33 + 160);
      if (qword_101636940 != -1) {
        swift_once();
      }
      uint64_t v36 = v71;
      uint64_t v37 = sub_100010324(v71, (uint64_t)qword_10170DA70);
      uint64_t v38 = v70;
      uint64_t v39 = (*v65)(v70, v37, v36);
      __chkstk_darwin(v39);
      v62[-4] = v35;
      v62[-3] = v24;
      v62[-2] = v38;
      OS_dispatch_queue.sync<A>(execute:)();
      (*v64)(v38, v36);
      if (qword_101636F50 != -1) {
        swift_once();
      }
      uint64_t v40 = type metadata accessor for Logger();
      sub_100010324(v40, (uint64_t)qword_10170E9E8);
      uint64_t v41 = Logger.logObject.getter();
      os_log_type_t v42 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v41, v42))
      {
        uint64_t v43 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)uint64_t v43 = 0;
        _os_log_impl((void *)&_mh_execute_header, v41, v42, "Requesting SPUnknownBeaconsChangedNotification to be posted before rate limit.", v43, 2u);
        swift_slowDealloc();
      }

      dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)();
      uint64_t v6 = v66;
      os_log_type_t v44 = Logger.logObject.getter();
      os_log_type_t v45 = static os_log_type_t.default.getter();
      BOOL v46 = os_log_type_enabled(v44, v45);
      uint64_t v24 = (uint64_t)v81;
      if (v46)
      {
        unint64_t v47 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)unint64_t v47 = 0;
        _os_log_impl((void *)&_mh_execute_header, v44, v45, "Requesting SPUnknownBeaconsSetChangedNotification to be posted before rate limit.", v47, 2u);
        swift_slowDealloc();
      }

      dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)();
      uint64_t v26 = v82;
      uint64_t v48 = v72;
      sub_1007AFB78(v24, (uint64_t)&v6[*(int *)(v72 + 20)], type metadata accessor for WildModeAssociationRecord);
      *uint64_t v6 = 2;
      v6[*(int *)(v48 + 24)] = 66;
      if (qword_101637118 != -1) {
        swift_once();
      }
      sub_101097ACC((uint64_t)v6);
      (*(void (**)(uint64_t, void))(v83 + 16))(v83, 0);

      sub_1007AFBFC((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for UnwantedTrackingUserNotification);
      sub_1007AFBFC(v24, type metadata accessor for WildModeAssociationRecord);
      (*v67)(v86, v26);
      ++a1;
      uint64_t v25 = v31;
    }
    while (v84 != v31);
  }
  swift_bridgeObjectRelease();
}

uint64_t sub_100798D94(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UnwantedTrackingUserNotification();
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v81 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = sub_10000588C((uint64_t *)&unk_10166BFA0);
  __chkstk_darwin(v11 - 8);
  unint64_t v13 = (char *)&v81 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000588C(&qword_1016653B0);
  __chkstk_darwin(v14 - 8);
  uint64_t v16 = (char *)&v81 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for WildModeAssociationRecord(0);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v23 = __chkstk_darwin(v22);
  uint64_t v30 = (char *)&v81 - v29;
  if (a2) {
    return a3(a2);
  }
  uint64_t v85 = v25;
  uint64_t v84 = v24;
  uint64_t v86 = v28;
  uint64_t v83 = v10;
  uint64_t v87 = v27;
  uint64_t v88 = v26;
  uint64_t v89 = a4;
  uint64_t v90 = a3;
  unsigned int v32 = *(unsigned __int8 *)(a1 + *(int *)(v23 + 64));
  uint64_t v33 = (int *)v23;
  uint64_t v34 = a1;
  if (v32 > 8 || ((1 << v32) & 0x17B) == 0)
  {
    swift_beginAccess();
    if (swift_weakLoadStrong())
    {
      swift_retain();
      swift_release();
      sub_100AA86FC();
      swift_release();
    }
  }
  static os_log_type_t.default.getter();
  if (qword_1016372F0 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  int v35 = *(unsigned __int8 *)(a1 + v33[13]);
  if (v35 == 4)
  {
    sub_1007AFB78(a1, (uint64_t)v30, type metadata accessor for WildModeAssociationRecord);
  }
  else
  {
    sub_1007AFB78(a1, (uint64_t)v30, type metadata accessor for WildModeAssociationRecord);
    if (v35 == 1)
    {
      sub_1007AFBFC((uint64_t)v30, type metadata accessor for WildModeAssociationRecord);
      int v36 = 0;
      goto LABEL_18;
    }
  }
  sub_10001D074((uint64_t)&v30[v33[14]], (uint64_t)v16, &qword_1016653B0);
  sub_1007AFBFC((uint64_t)v30, type metadata accessor for WildModeAssociationRecord);
  uint64_t v37 = type metadata accessor for AccessoryMetadata(0);
  int v38 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v37 - 8) + 48))(v16, 1, v37);
  sub_10001DAB4((uint64_t)v16, &qword_1016653B0);
  if (v38 == 1)
  {
    if (qword_101637188 != -1) {
      swift_once();
    }
    uint64_t v39 = (void *)qword_10170EE68;
    id v40 = [self sharedInstance];
    unsigned int v41 = [v40 isInternalBuild];

    if (v41)
    {
      NSString v42 = String._bridgeToObjectiveC()();
      unsigned int v43 = [v39 BOOLForKey:v42];

      int v36 = v43 ^ 1;
    }
    else
    {
      int v36 = 1;
    }
  }
  else
  {
    int v36 = 0;
  }
LABEL_18:
  uint64_t v44 = v85;
  sub_10001D074(v34 + v33[15], (uint64_t)v13, (uint64_t *)&unk_10166BFA0);
  uint64_t v45 = type metadata accessor for AccessoryProductInfo();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v45 - 8) + 48))(v13, 1, v45) == 1)
  {
    sub_10001DAB4((uint64_t)v13, (uint64_t *)&unk_10166BFA0);
    sub_1007AFB78(v34, v44, type metadata accessor for WildModeAssociationRecord);
LABEL_23:
    int v47 = 1;
    switch(*(unsigned char *)(v44 + v33[16]))
    {
      case 2:
        swift_bridgeObjectRelease();
        sub_1007AFBFC(v44, type metadata accessor for WildModeAssociationRecord);
        if (v36) {
          goto LABEL_32;
        }
        break;
      case 8:
        goto LABEL_24;
      default:
        char v59 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        sub_1007AFBFC(v44, type metadata accessor for WildModeAssociationRecord);
        if (v36 & 1 | ((v59 & 1) == 0)) {
          goto LABEL_32;
        }
        break;
    }
    uint64_t v48 = v83;
    sub_1007AFB78(v34, (uint64_t)&v83[*(int *)(v8 + 20)], type metadata accessor for WildModeAssociationRecord);
    *uint64_t v48 = 2;
    v48[*(int *)(v8 + 24)] = 66;
    if (qword_101637118 != -1) {
      swift_once();
    }
    v93[3] = v8;
    v93[4] = (uint64_t)&off_1015B3E48;
    os_log_type_t v49 = sub_10001D958(v93);
    sub_1007AFB78((uint64_t)v48, (uint64_t)v49, (uint64_t (*)(void))type metadata accessor for UnwantedTrackingUserNotification);
    id v50 = objc_allocWithZone((Class)UNUserNotificationCenter);
    NSString v51 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v52 = [v50 initWithBundleIdentifier:v51];

    id v53 = sub_101097C90((uint64_t)v49);
    UUID.uuidString.getter();
    id v54 = v53;
    NSString v55 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    id v56 = [self requestWithIdentifier:v55 content:v54 trigger:0 destinations:7];

    sub_10001D010((uint64_t)v93, (uint64_t)v92);
    uint64_t v57 = swift_allocObject();
    sub_10001CEB0(v92, v57 + 16);
    *(void *)(v57 + 56) = 0;
    *(void *)(v57 + 64) = 0;
    aBlock[4] = (uint64_t)sub_1002F6720;
    uint64_t aBlock[5] = v57;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    void aBlock[2] = (uint64_t)sub_100769474;
    aBlock[3] = (uint64_t)&unk_1015D4978;
    uint64_t v58 = _Block_copy(aBlock);
    swift_release();
    [v52 addNotificationRequest:v56 withCompletionHandler:v58];

    _Block_release(v58);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v93);
    sub_1007AFBFC((uint64_t)v48, (uint64_t (*)(void))type metadata accessor for UnwantedTrackingUserNotification);
    goto LABEL_38;
  }
  int v46 = v13[*(int *)(v45 + 180)];
  sub_1007AFBFC((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for AccessoryProductInfo);
  sub_1007AFB78(v34, v44, type metadata accessor for WildModeAssociationRecord);
  if (v46 == 2 || (v46 & 1) != 0) {
    goto LABEL_23;
  }
  int v47 = 0;
LABEL_24:
  sub_1007AFBFC(v44, type metadata accessor for WildModeAssociationRecord);
LABEL_32:
  LODWORD(v85) = v36;
  if (qword_101636CB0 != -1) {
    swift_once();
  }
  uint64_t v60 = type metadata accessor for Logger();
  sub_100010324(v60, (uint64_t)qword_10164D4D0);
  uint64_t v61 = v34;
  uint64_t v62 = v34;
  uint64_t v63 = v84;
  sub_1007AFB78(v61, v84, type metadata accessor for WildModeAssociationRecord);
  uint64_t v64 = v86;
  sub_1007AFB78(v62, v86, type metadata accessor for WildModeAssociationRecord);
  uint64_t v65 = v87;
  sub_1007AFB78(v62, v87, type metadata accessor for WildModeAssociationRecord);
  uint64_t v66 = v88;
  sub_1007AFB78(v62, v88, type metadata accessor for WildModeAssociationRecord);
  uint64_t v67 = Logger.logObject.getter();
  int v68 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v67, (os_log_type_t)v68))
  {
    LODWORD(v83) = v68;
    uint64_t v69 = swift_slowAlloc();
    uint64_t v82 = swift_slowAlloc();
    aBlock[0] = v82;
    *(_DWORD *)uint64_t v69 = 136447490;
    type metadata accessor for UUID();
    sub_100796E74((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v70 = dispatch thunk of CustomStringConvertible.description.getter();
    v93[0] = sub_1008FA0F0(v70, v71, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1007AFBFC(v63, type metadata accessor for WildModeAssociationRecord);
    *(_WORD *)(v69 + 12) = 1024;
    LODWORD(v93[0]) = v47;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v69 + 18) = 1024;
    LODWORD(v93[0]) = v85;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v69 + 24) = 2082;
    unint64_t v72 = 0xE500000000000000;
    uint64_t v73 = 0x656C707061;
    switch(*(unsigned char *)(v64 + v33[13]))
    {
      case 1:
        unint64_t v72 = 0xE600000000000000;
        uint64_t v73 = 0x6E6169727564;
        break;
      case 2:
        unint64_t v72 = 0xE700000000000000;
        uint64_t v73 = 0x6579656B776168;
        break;
      case 3:
        unint64_t v72 = 0xE400000000000000;
        uint64_t v73 = 1701602664;
        break;
      case 4:
        unint64_t v72 = 0xE300000000000000;
        uint64_t v73 = 7104878;
        break;
      default:
        break;
    }
    v93[0] = sub_1008FA0F0(v73, v72, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1007AFBFC(v86, type metadata accessor for WildModeAssociationRecord);
    *(_WORD *)(v69 + 34) = 2082;
    uint64_t v75 = v87;
    type metadata accessor for MACAddress();
    sub_100796E74((unint64_t *)&qword_101649EE0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
    uint64_t v76 = dispatch thunk of CustomStringConvertible.description.getter();
    v93[0] = sub_1008FA0F0(v76, v77, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1007AFBFC(v75, type metadata accessor for WildModeAssociationRecord);
    *(_WORD *)(v69 + 44) = 2082;
    uint64_t v78 = v88;
    LOBYTE(v93[0]) = *(unsigned char *)(v88 + v33[16]);
    sub_10000588C(&qword_10164D7D8);
    uint64_t v79 = String.init<A>(describing:)();
    v93[0] = sub_1008FA0F0(v79, v80, aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1007AFBFC(v78, type metadata accessor for WildModeAssociationRecord);
    _os_log_impl((void *)&_mh_execute_header, v67, (os_log_type_t)v83, "Not showing UT alert for %{public}s,\nsurfaceUt = %{BOOL}d isUnknown = %{BOOL}d,\ndeviceType = %{public}s\naddress = %{public}s,\nobservationState = %{public}s", (uint8_t *)v69, 0x36u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    char v74 = v90;
    goto LABEL_43;
  }
  sub_1007AFBFC(v63, type metadata accessor for WildModeAssociationRecord);
  sub_1007AFBFC(v64, type metadata accessor for WildModeAssociationRecord);
  sub_1007AFBFC(v65, type metadata accessor for WildModeAssociationRecord);
  sub_1007AFBFC(v66, type metadata accessor for WildModeAssociationRecord);

LABEL_38:
  char v74 = v90;
LABEL_43:
  static os_log_type_t.default.getter();
  os_log(_:dso:log:_:_:)();
  return v74(0);
}

uint64_t sub_100799CCC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(void), void (*a10)(unint64_t, unsigned char *, uint64_t), uint64_t a11, int *a12)
{
  uint64_t v172 = a8;
  uint64_t v173 = a2;
  uint64_t v167 = a6;
  uint64_t v168 = a7;
  uint64_t v165 = a4;
  uint64_t v166 = a5;
  uint64_t v169 = a12;
  uint64_t v13 = sub_10000588C(&qword_10163C6C8);
  __chkstk_darwin(v13 - 8);
  uint64_t v135 = &v124[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v139 = sub_10000588C(&qword_10164D688);
  uint64_t v138 = *(void *)(v139 - 8);
  __chkstk_darwin(v139);
  Swift::Int v136 = &v124[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v142 = sub_10000588C(&qword_10164D690);
  uint64_t v140 = *(void *)(v142 - 8);
  __chkstk_darwin(v142);
  uint64_t v137 = &v124[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v144 = sub_10000588C(&qword_10164D698);
  uint64_t v143 = *(void *)(v144 - 8);
  __chkstk_darwin(v144);
  uint64_t v141 = &v124[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v147 = sub_10000588C(&qword_10164D6A0);
  uint64_t v146 = *(void *)(v147 - 8);
  __chkstk_darwin(v147);
  id v145 = &v124[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v153 = sub_10000588C(&qword_10164D6A8);
  uint64_t v151 = *(void *)(v153 - 8);
  __chkstk_darwin(v153);
  unsigned __int8 v148 = &v124[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v154 = sub_10000588C(&qword_10164D6B0);
  uint64_t v152 = *(void *)(v154 - 8);
  __chkstk_darwin(v154);
  id v149 = &v124[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v156 = sub_10000588C(&qword_10164D6B8);
  uint64_t v155 = *(void *)(v156 - 8);
  __chkstk_darwin(v156);
  id v150 = &v124[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v22 = sub_10000588C((uint64_t *)&unk_101653D50);
  uint64_t v129 = *(void *)(v22 - 8);
  uint64_t v23 = __chkstk_darwin(v22 - 8);
  uint64_t v131 = &v124[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v130 = v24;
  __chkstk_darwin(v23);
  Swift::Int v132 = &v124[-v25];
  uint64_t v26 = sub_10000588C((uint64_t *)&unk_1016477E0);
  __chkstk_darwin(v26 - 8);
  uint64_t v160 = &v124[-((v27 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v162 = type metadata accessor for MACAddress();
  uint64_t v170 = *(void *)(v162 - 8);
  uint64_t v28 = __chkstk_darwin(v162);
  unsigned int v128 = &v124[-((v29 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v127 = v29;
  __chkstk_darwin(v28);
  unint64_t v161 = &v124[-v30];
  uint64_t v31 = type metadata accessor for WildModeAssociationRecord(0);
  uint64_t v163 = *(void *)(v31 - 8);
  uint64_t v32 = __chkstk_darwin(v31);
  uint64_t v159 = &v124[-((v33 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v34 = __chkstk_darwin(v32);
  os_log_type_t v158 = &v124[-v35];
  uint64_t v164 = v36;
  __chkstk_darwin(v34);
  int v38 = &v124[-v37];
  uint64_t v39 = sub_10000588C(&qword_10164D6C0);
  uint64_t v157 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  unsigned int v41 = &v124[-((v40 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v42 = sub_10000588C(&qword_1016653B0);
  __chkstk_darwin(v42 - 8);
  uint64_t v44 = &v124[-((v43 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v45 = (void *)swift_allocObject();
  unint64_t v133 = a9;
  v45[2] = a9;
  v45[3] = a10;
  uint64_t v171 = v45;
  int v46 = v169;
  v45[4] = a11;
  v45[5] = v46;
  sub_10001D074(a1 + *(int *)(v31 + 56), (uint64_t)v44, &qword_1016653B0);
  uint64_t v47 = type metadata accessor for AccessoryMetadata(0);
  int v48 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v47 - 8) + 48))(v44, 1, v47);
  uint64_t v134 = a10;
  swift_retain();
  swift_retain();
  sub_10001DAB4((uint64_t)v44, &qword_1016653B0);
  if (v48 != 1)
  {
    sub_1007AFB78(a1, (uint64_t)v38, type metadata accessor for WildModeAssociationRecord);
    Just.init(_:)();
    sub_100062734(&qword_10164D740, &qword_10164D6C0);
    uint64_t v59 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(unsigned char *, uint64_t))(v157 + 8))(v41, v39);
    uint64_t v60 = (uint64_t)v38;
    uint64_t v61 = a1;
LABEL_30:
    uint64_t v174 = v59;
    sub_1007AFB78(v61, v60, type metadata accessor for WildModeAssociationRecord);
    unint64_t v115 = (*(unsigned __int8 *)(v163 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v163 + 80);
    unint64_t v116 = (void *)swift_allocObject();
    Swift::Int v117 = v173;
    v116[2] = v172;
    v116[3] = v117;
    uint64_t v118 = v166;
    uint64_t v119 = v167;
    v116[4] = v165;
    v116[5] = v118;
    uint64_t v120 = v168;
    v116[6] = v119;
    v116[7] = v120;
    uint64_t v121 = v171;
    v116[8] = sub_1007AFB60;
    v116[9] = v121;
    sub_1007B136C(v60, (uint64_t)v116 + v115, type metadata accessor for WildModeAssociationRecord);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    id v122 = v117;
    sub_10000588C(&qword_10164D730);
    sub_100062734(&qword_10164D738, &qword_10164D730);
    Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
    swift_release();
    return swift_release();
  }
  uint64_t v169 = (int *)v31;
  unsigned int v126 = v38;
  if (qword_101636CA8 != -1) {
    swift_once();
  }
  uint64_t v49 = type metadata accessor for Logger();
  sub_100010324(v49, (uint64_t)qword_10170E318);
  uint64_t v50 = a1;
  uint64_t v51 = a1;
  id v52 = v158;
  sub_1007AFB78(v51, (uint64_t)v158, type metadata accessor for WildModeAssociationRecord);
  id v53 = Logger.logObject.getter();
  os_log_type_t v54 = static os_log_type_t.default.getter();
  BOOL v55 = os_log_type_enabled(v53, v54);
  uint64_t v157 = v50;
  if (v55)
  {
    id v56 = (uint8_t *)swift_slowAlloc();
    uint64_t v174 = swift_slowAlloc();
    *(_DWORD *)id v56 = 136446210;
    type metadata accessor for UUID();
    sub_100796E74((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v57 = dispatch thunk of CustomStringConvertible.description.getter();
    id v175 = (id)sub_1008FA0F0(v57, v58, &v174);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1007AFBFC((uint64_t)v52, type metadata accessor for WildModeAssociationRecord);
    _os_log_impl((void *)&_mh_execute_header, v53, v54, "Record %{public}s is missing metadata. Attempting to fetch again...", v56, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v50 = v157;
    swift_slowDealloc();
  }
  else
  {
    sub_1007AFBFC((uint64_t)v52, type metadata accessor for WildModeAssociationRecord);
  }

  uint64_t v62 = v173;
  uint64_t v63 = v170;
  uint64_t v65 = (uint64_t)v159;
  uint64_t v64 = (uint64_t)v160;
  if (qword_101636CB0 != -1) {
    swift_once();
  }
  sub_100010324(v49, (uint64_t)qword_10164D4D0);
  sub_1007AFB78(v50, v65, type metadata accessor for WildModeAssociationRecord);
  uint64_t v66 = Logger.logObject.getter();
  os_log_type_t v67 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v66, v67))
  {
    sub_1007AFBFC(v65, type metadata accessor for WildModeAssociationRecord);

    goto LABEL_21;
  }
  uint64_t v68 = swift_slowAlloc();
  uint64_t v174 = swift_slowAlloc();
  *(_DWORD *)uint64_t v68 = 136315394;
  id v175 = (id)sub_1008FA0F0(0xD000000000000068, 0x80000001014071E0, &v174);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *(_WORD *)(v68 + 12) = 2082;
  uint64_t v69 = (unsigned char *)(v65 + v169[22]);
  if (v69[1])
  {
    if (*(unsigned char *)(v65 + v169[21])) {
      goto LABEL_19;
    }
    goto LABEL_16;
  }
  if ((*(unsigned char *)(v65 + v169[21]) & 1) == 0)
  {
LABEL_16:
    char v70 = *(unsigned char *)(v65 + v169[13]);
    goto LABEL_20;
  }
  if (*v69 != 1)
  {
LABEL_19:
    char v70 = 6;
    goto LABEL_20;
  }
  char v70 = 5;
LABEL_20:
  uint64_t v71 = sub_10078155C(v70);
  id v175 = (id)sub_1008FA0F0(v71, v72, &v174);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  sub_1007AFBFC(v65, type metadata accessor for WildModeAssociationRecord);
  _os_log_impl((void *)&_mh_execute_header, v66, v67, "%s Advertisement type: %{public}s", (uint8_t *)v68, 0x16u);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  uint64_t v50 = v157;
  uint64_t v64 = (uint64_t)v160;
LABEL_21:
  sub_10029416C(v64);
  uint64_t v73 = v162;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v63 + 48))(v64, 1, v162) != 1)
  {
    uint64_t v78 = *(void (**)(unint64_t, unsigned char *, uint64_t))(v63 + 32);
    uint64_t v159 = (unsigned char *)(v63 + 32);
    uint64_t v134 = v78;
    v78((unint64_t)v161, (unsigned char *)v64, v73);
    LODWORD(v133) = *(unsigned __int8 *)(v50 + v169[13]);
    uint64_t v160 = (unsigned char *)swift_allocBox();
    sub_1007AFB78(v50, v79, type metadata accessor for WildModeAssociationRecord);
    id v80 = [v62 trackingIdentifier];
    unsigned __int8 v81 = [v80 isPosh];

    if (v81)
    {
      id v82 = [v62 trackingIdentifier];
      unsigned int v83 = [v82 networkID];

      int v84 = 2 * (v83 == 2);
      if (v83 == 1) {
        int v84 = 1;
      }
    }
    else
    {
      int v84 = 3;
    }
    LODWORD(v158) = v84;
    uint64_t v85 = type metadata accessor for SharedBeaconRecord(0);
    uint64_t v86 = (uint64_t)v132;
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v85 - 8) + 56))(v132, 1, 1, v85);
    int v125 = *(unsigned char *)(v50 + v169[21]) & 1;
    uint64_t v87 = v170;
    uint64_t v88 = v128;
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v170 + 16))(v128, v161, v73);
    uint64_t v89 = v131;
    sub_10001D074(v86, (uint64_t)v131, (uint64_t *)&unk_101653D50);
    unint64_t v90 = (*(unsigned __int8 *)(v87 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v87 + 80);
    uint64_t v91 = v90 + v127;
    unint64_t v92 = (*(unsigned __int8 *)(v129 + 80) + v90 + v127 + 1) & ~(unint64_t)*(unsigned __int8 *)(v129 + 80);
    uint64_t v93 = v92 + v130;
    uint64_t v94 = swift_allocObject();
    uint64_t v95 = v172;
    *(void *)(v94 + 16) = v172;
    v134(v94 + v90, v88, v73);
    *(unsigned char *)(v94 + v91) = (_BYTE)v133;
    sub_1007AF8D8((uint64_t)v89, v94 + v92);
    *(unsigned char *)(v94 + v93) = v125;
    sub_10000588C(&qword_1016417D8);
    swift_allocObject();
    swift_retain();
    uint64_t v174 = Future.init(_:)();
    sub_100062734((unint64_t *)&unk_10166C130, &qword_1016417D8);
    uint64_t v96 = Publisher.eraseToAnyPublisher()();
    uint64_t v159 = (unsigned char *)v96;
    swift_release();
    sub_10001DAB4(v86, (uint64_t *)&unk_101653D50);
    uint64_t v174 = v96;
    id v175 = *(id *)(v95 + 24);
    id v97 = v175;
    uint64_t v98 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
    uint64_t v99 = (uint64_t)v135;
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v98 - 8) + 56))(v135, 1, 1, v98);
    uint64_t v134 = (void (*)(unint64_t, unsigned char *, uint64_t))v97;
    sub_10000588C(&qword_10164D6D0);
    sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
    sub_100062734((unint64_t *)&unk_10166C140, &qword_10164D6D0);
    sub_10033149C((unint64_t *)&qword_10166C020, (unint64_t *)&qword_1016376E0);
    uint64_t v100 = v136;
    Publisher.receive<A>(on:options:)();
    sub_10001DAB4(v99, &qword_10163C6C8);

    uint64_t v101 = swift_allocObject();
    *(void *)(v101 + 16) = v160;
    *(void *)(v101 + 24) = v95;
    *(unsigned char *)(v101 + 32) = (_BYTE)v158;
    swift_retain();
    swift_retain();
    static Subscribers.Demand.unlimited.getter();
    sub_10000588C(&qword_10164D6D8);
    sub_10000588C((uint64_t *)&unk_10166C030);
    sub_100062734(&qword_10164D6E0, &qword_10164D688);
    sub_100062734(&qword_10164D6E8, (uint64_t *)&unk_10166C030);
    uint64_t v102 = v137;
    uint64_t v103 = v139;
    Publisher.flatMap<A, B>(maxPublishers:_:)();
    swift_release();
    (*(void (**)(unsigned char *, uint64_t))(v138 + 8))(v100, v103);
    sub_100062734(&qword_10164D6F0, &qword_10164D690);
    uint64_t v104 = v141;
    uint64_t v61 = v157;
    uint64_t v105 = v142;
    Publisher.timeout(_:queue:customError:)();
    (*(void (**)(unsigned char *, uint64_t))(v140 + 8))(v102, v105);
    sub_10000588C(&qword_101641650);
    sub_100062734(&qword_10164D6F8, &qword_10164D698);
    uint64_t v106 = v145;
    uint64_t v107 = v144;
    Publisher.map<A>(_:)();
    (*(void (**)(unsigned char *, uint64_t))(v143 + 8))(v104, v107);
    sub_10000588C(&qword_10164D700);
    sub_100062734(&qword_10164D708, &qword_10164D6A0);
    sub_100062734(&qword_10164D710, &qword_10164D700);
    uint64_t v108 = v148;
    uint64_t v109 = v147;
    Publisher.catch<A>(_:)();
    (*(void (**)(unsigned char *, uint64_t))(v146 + 8))(v106, v109);
    sub_100062734(&qword_10164D718, &qword_10164D6A8);
    swift_retain();
    Swift::Int v110 = v149;
    uint64_t v111 = v153;
    Publisher.map<A>(_:)();
    swift_release();
    (*(void (**)(unsigned char *, uint64_t))(v151 + 8))(v108, v111);
    sub_100062734(&qword_10164D720, &qword_10164D6B0);
    uint64_t v112 = v150;
    uint64_t v113 = v154;
    Publisher.replaceError(with:)();
    (*(void (**)(unsigned char *, uint64_t))(v152 + 8))(v110, v113);
    sub_100062734(&qword_10164D728, &qword_10164D6B8);
    uint64_t v114 = v156;
    uint64_t v59 = Publisher.eraseToAnyPublisher()();
    swift_release();
    (*(void (**)(unsigned char *, uint64_t))(v155 + 8))(v112, v114);
    (*(void (**)(unsigned char *, uint64_t))(v170 + 8))(v161, v162);
    swift_release();
    uint64_t v60 = (uint64_t)v126;
    goto LABEL_30;
  }
  sub_10001DAB4(v64, (uint64_t *)&unk_1016477E0);
  char v74 = Logger.logObject.getter();
  os_log_type_t v75 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v74, v75))
  {
    uint64_t v76 = (uint8_t *)swift_slowAlloc();
    uint64_t v174 = swift_slowAlloc();
    *(_DWORD *)uint64_t v76 = 136315138;
    id v175 = (id)sub_1008FA0F0(0xD000000000000068, 0x80000001014071E0, &v174);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v74, v75, "%s unexpected advertisement type!", v76, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  sub_1007AF880();
  swift_allocError();
  *unint64_t v77 = 1;
  v133();
  swift_errorRelease();
  return swift_release();
}

uint64_t sub_10079B60C(unint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, void *a5, uint64_t a6, void (*a7)(void *), unint64_t a8)
{
  unint64_t v233 = a7;
  uint64_t v229 = a6;
  uint64_t v227 = a4;
  unint64_t v220 = a3;
  uint64_t v219 = a2;
  unint64_t v235 = a1;
  uint64_t v218 = *v8;
  uint64_t v11 = sub_10000588C((uint64_t *)&unk_101653D50);
  uint64_t v216 = *(void *)(v11 - 8);
  __chkstk_darwin(v11 - 8);
  unint64_t v217 = v12;
  uint64_t v226 = (uint64_t)&v206 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = sub_10000588C((uint64_t *)&unk_1016477E0);
  uint64_t v14 = __chkstk_darwin(v13 - 8);
  uint64_t v208 = (char *)&v206 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v207 = (char *)&v206 - v17;
  __chkstk_darwin(v16);
  id v211 = (char *)&v206 - v18;
  uint64_t v236 = type metadata accessor for MACAddress();
  uint64_t v239 = *(void *)(v236 - 8);
  uint64_t v19 = __chkstk_darwin(v236);
  uint64_t v225 = (char *)&v206 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v224 = (char *)&v206 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v212 = (char *)&v206 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  unint64_t v213 = (char *)&v206 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v228 = (uint64_t)&v206 - v28;
  uint64_t v215 = v29;
  __chkstk_darwin(v27);
  uint64_t v232 = (char *)&v206 - v30;
  uint64_t v31 = (void *)type metadata accessor for UUID();
  uint64_t v238 = *(v31 - 1);
  uint64_t v32 = __chkstk_darwin(v31);
  uint64_t v223 = (char *)&v206 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v230 = (uint64_t)&v206 - v35;
  uint64_t v214 = v36;
  __chkstk_darwin(v34);
  uint64_t v237 = (char *)&v206 - v37;
  uint64_t v243 = type metadata accessor for WildModeTrackingLocation(0);
  uint64_t v38 = *(void *)(v243 - 8);
  uint64_t v39 = __chkstk_darwin(v243);
  uint64_t v244 = (uint64_t)&v206 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = __chkstk_darwin(v39);
  uint64_t v43 = (double *)((char *)&v206 - v42);
  __chkstk_darwin(v41);
  uint64_t v45 = (void **)((char *)&v206 - v44);
  id v231 = a5;
  id v46 = [a5 observedLocations];
  sub_10001D4B0(0, &qword_101656690);
  unint64_t v47 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v47 >> 62)
  {
LABEL_87:
    swift_bridgeObjectRetain();
    uint64_t v48 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v48 = *(void *)((v47 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v49 = _swiftEmptyArrayStorage;
  uint64_t v240 = v31;
  unint64_t v234 = a8;
  if (v48)
  {
    uint64_t v246 = _swiftEmptyArrayStorage;
    sub_1000B7CEC(0, v48 & ~(v48 >> 63), 0);
    if (v48 < 0)
    {
      __break(1u);
LABEL_89:
      swift_once();
      goto LABEL_58;
    }
    uint64_t v50 = 0;
    uint64_t v51 = v246;
    do
    {
      if ((v47 & 0xC000000000000001) != 0) {
        id v52 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v52 = *(id *)(v47 + 8 * v50 + 32);
      }
      id v53 = v52;
      [v52 latitude];
      uint64_t v55 = v54;
      [v53 longitude];
      uint64_t v57 = v56;
      [v53 horizontalAccuracy];
      uint64_t v59 = v58;
      id v60 = [v53 timestamp];
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      *uint64_t v45 = v55;
      v45[1] = v57;
      v45[2] = v59;
      uint64_t v246 = v51;
      unint64_t v62 = v51[2];
      unint64_t v61 = v51[3];
      if (v62 >= v61 >> 1)
      {
        sub_1000B7CEC(v61 > 1, v62 + 1, 1);
        uint64_t v51 = v246;
      }
      ++v50;
      long long v51[2] = v62 + 1;
      sub_1007B136C((uint64_t)v45, (uint64_t)v51+ ((*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80))+ *(void *)(v38 + 72) * v62, type metadata accessor for WildModeTrackingLocation);
    }
    while (v48 != v50);
    swift_bridgeObjectRelease();
    uint64_t v49 = _swiftEmptyArrayStorage;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v51 = _swiftEmptyArrayStorage;
  }
  uint64_t v63 = sub_101159448((uint64_t)v51);
  swift_bridgeObjectRelease();
  uint64_t v64 = sub_1007108AC(v63);
  swift_bridgeObjectRelease();
  uint64_t v246 = v64;
  swift_retain();
  sub_100780E24((uint64_t *)&v246, (uint64_t (*)(uint64_t))sub_100B73728);
  a8 = 0xD00000000000006DLL;
  swift_release();
  uint64_t v31 = v246;
  uint64_t v246 = _swiftEmptyArrayStorage;
  uint64_t v243 = v31[2];
  if (v243)
  {
    unint64_t v65 = 0;
    uint64_t v241 = (uint64_t (*)(char *, void *))0x8000000101407030;
    id v242 = (id)0xD000000000000013;
    while (1)
    {
      if (v65 >= v31[2])
      {
        __break(1u);
        goto LABEL_87;
      }
      uint64_t v45 = (void *)((*(unsigned __int8 *)(v38 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v38 + 80));
      uint64_t v67 = *(void *)(v38 + 72);
      sub_1007AFB78((uint64_t)v45 + (void)v31 + v67 * v65, (uint64_t)v43, type metadata accessor for WildModeTrackingLocation);
      id v68 = [self sharedInstance];
      unsigned int v69 = [v68 isInternalBuild];

      if (v69
        && (id v70 = [self standardUserDefaults],
            NSString v71 = String._bridgeToObjectiveC()(),
            unint64_t v47 = (unint64_t)[v70 BOOLForKey:v71],
            v70,
            v71,
            v47))
      {
        a8 = static os_log_type_t.default.getter();
        sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
        uint64_t v66 = (void *)static OS_os_log.default.getter();
        os_log(_:dso:log:_:_:)();
      }
      else
      {
        double v72 = *v43;
        double v73 = v43[1];
        if (qword_101636A88 != -1) {
          swift_once();
        }
        if (!objc_msgSend((id)qword_101642640, "containsCoordinate:", v72, v73)) {
          goto LABEL_29;
        }
        char v74 = (void *)qword_101642648;
        if (qword_101642648)
        {
          id v75 = (id)qword_101642648;
        }
        else
        {
          uint64_t v76 = (void *)sub_10036D0D4();
          unint64_t v77 = (void *)qword_101642648;
          qword_101642648 = (uint64_t)v76;
          id v75 = v76;

          char v74 = 0;
        }
        id v78 = v74;
        a8 = (unint64_t)[v75 containsCoordinate:v72, v73];

        if ((a8 & 1) == 0)
        {
LABEL_29:
          sub_1007B136C((uint64_t)v43, v244, type metadata accessor for WildModeTrackingLocation);
          uint64_t v79 = v246;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1000B7CEC(0, v79[2] + 1, 1);
            uint64_t v79 = v246;
          }
          a8 = v79[2];
          unint64_t v80 = v79[3];
          unint64_t v47 = a8 + 1;
          if (a8 >= v80 >> 1)
          {
            sub_1000B7CEC(v80 > 1, a8 + 1, 1);
            uint64_t v79 = v246;
          }
          v79[2] = v47;
          sub_1007B136C(v244, (uint64_t)v45 + (void)v79 + a8 * v67, type metadata accessor for WildModeTrackingLocation);
          goto LABEL_18;
        }
      }
      sub_1007AFBFC((uint64_t)v43, type metadata accessor for WildModeTrackingLocation);
LABEL_18:
      if (v243 == ++v65)
      {
        uint64_t v49 = v246;
        break;
      }
    }
  }
  swift_release();
  unsigned __int8 v81 = v237;
  UUID.init()();
  uint64_t v82 = v238;
  uint64_t v83 = v239;
  int v84 = v232;
  uint64_t v85 = v230;
  if (qword_101636CA8 != -1) {
    swift_once();
  }
  uint64_t v243 = (uint64_t)v49;
  uint64_t v244 = type metadata accessor for Logger();
  sub_100010324(v244, (uint64_t)qword_10170E318);
  uint64_t v86 = *(void (**)(char *, char *, void *))(v82 + 16);
  uint64_t v210 = v82 + 16;
  uint64_t v209 = v86;
  v86((char *)v85, v81, v240);
  uint64_t v87 = *(char **)(v83 + 16);
  uint64_t v88 = v236;
  unint64_t v222 = v83 + 16;
  uint64_t v221 = (void (*)(char *, char *, uint64_t))v87;
  ((void (*)(char *, unint64_t, uint64_t))v87)(v84, v235, v236);
  id v89 = v231;
  unint64_t v90 = Logger.logObject.getter();
  int v91 = static os_log_type_t.default.getter();
  BOOL v92 = os_log_type_enabled(v90, (os_log_type_t)v91);
  uint64_t v93 = &selRef_fetchEncryptedPayloadForUnknownBeacon_completion_;
  uint64_t v94 = &selRef_fetchEncryptedPayloadForUnknownBeacon_completion_;
  id v242 = v89;
  if (v92)
  {
    LODWORD(v231) = v91;
    uint64_t v95 = v84;
    uint64_t v96 = swift_slowAlloc();
    uint64_t v206 = (void *)swift_slowAlloc();
    uint64_t v246 = v206;
    *(_DWORD *)uint64_t v96 = 136447234;
    sub_100796E74((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    id v97 = v240;
    uint64_t v98 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v245 = sub_1008FA0F0(v98, v99, (uint64_t *)&v246);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v241 = *(uint64_t (**)(char *, void *))(v82 + 8);
    v241((char *)v85, v97);
    *(_WORD *)(v96 + 12) = 2082;
    sub_100796E74((unint64_t *)&qword_101649EE0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
    uint64_t v100 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v245 = sub_1008FA0F0(v100, v101, (uint64_t *)&v246);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v232 = *(char **)(v239 + 8);
    ((void (*)(char *, uint64_t))v232)(v95, v88);
    *(_WORD *)(v96 + 22) = 2082;
    unint64_t v102 = 0xE500000000000000;
    uint64_t v103 = 0x656C707061;
    uint64_t v104 = &selRef_fetchEncryptedPayloadForUnknownBeacon_completion_;
    uint64_t v93 = &selRef_fetchEncryptedPayloadForUnknownBeacon_completion_;
    switch((char)v229)
    {
      case 1:
        unint64_t v102 = 0xE600000000000000;
        uint64_t v103 = 0x6E6169727564;
        break;
      case 2:
        unint64_t v102 = 0xE700000000000000;
        uint64_t v103 = 0x6579656B776168;
        break;
      case 3:
        unint64_t v102 = 0xE400000000000000;
        uint64_t v103 = 1701602664;
        break;
      case 4:
        uint64_t v103 = 0;
        unint64_t v102 = 0xE000000000000000;
        break;
      default:
        break;
    }
    uint64_t v245 = sub_1008FA0F0(v103, v102, (uint64_t *)&v246);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v96 + 32) = 256;
    id v105 = v242;
    id v106 = [v242 trackingIdentifier];
    unsigned __int8 v107 = [v106 networkID];

    LOBYTE(v245) = v107;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    *(_WORD *)(v96 + 35) = 1024;
    id v108 = [v105 trackingIdentifier];
    uint64_t v94 = &selRef_fetchEncryptedPayloadForUnknownBeacon_completion_;
    LODWORD(v106) = [v108 isPosh];

    LODWORD(v245) = v106;
    id v89 = v105;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();

    _os_log_impl((void *)&_mh_execute_header, v90, (os_log_type_t)v231, "Generated synthetic UUID %{public}s for %{public}s\ntype %{public}s networkID: %hhu isPosh: %{BOOL}d", (uint8_t *)v96, 0x29u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    uint64_t v241 = *(uint64_t (**)(char *, void *))(v82 + 8);
    v241((char *)v85, v240);
    uint64_t v232 = *(char **)(v83 + 8);
    ((void (*)(char *, uint64_t))v232)(v84, v88);

    uint64_t v104 = &selRef_fetchEncryptedPayloadForUnknownBeacon_completion_;
  }
  id v109 = [v89 v104[481]];
  unsigned int v110 = [v109 v94[484]];

  id v111 = [v89 v104[481]];
  unsigned int v112 = [v111 v93[485]];

  id v113 = [v89 v104[481]];
  unsigned int v114 = [v113 status];

  if (v112 == 1) {
    char v115 = 5;
  }
  else {
    char v115 = 6;
  }
  if (v110) {
    char v116 = v115;
  }
  else {
    char v116 = (v114 >> 4) & 3;
  }
  id v117 = [v89 v104[481]];
  id v118 = [v117 address];

  uint64_t v48 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v49 = v119;

  if (qword_101636CB0 != -1) {
    swift_once();
  }
  uint64_t v244 = sub_100010324(v244, (uint64_t)qword_10164D4D0);
  uint64_t v120 = Logger.logObject.getter();
  os_log_type_t v121 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v120, v121))
  {
    uint64_t v122 = swift_slowAlloc();
    uint64_t v246 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v122 = 136315394;
    uint64_t v245 = sub_1008FA0F0(0xD00000000000006DLL, 0x8000000101407440, (uint64_t *)&v246);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v122 + 12) = 2082;
    uint64_t v123 = sub_10078155C(v116);
    uint64_t v245 = sub_1008FA0F0(v123, v124, (uint64_t *)&v246);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v120, v121, "%s Advertisement type: %{public}s", (uint8_t *)v122, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  if (v116 == 4)
  {
    swift_release();
    uint64_t v135 = Logger.logObject.getter();
    os_log_type_t v136 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v135, v136))
    {
LABEL_75:

      uint64_t v157 = v233;
      os_log_type_t v158 = v241;
      type metadata accessor for TrackingAvoidanceError(0);
      uint64_t v245 = 1;
      sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
      sub_100796E74(&qword_101638410, type metadata accessor for TrackingAvoidanceError);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v159 = v246;
      v157(v246);

      sub_10001CFB8(v48, (unint64_t)v49);
      return v158(v237, v240);
    }
    uint64_t v137 = (uint8_t *)swift_slowAlloc();
    uint64_t v246 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v137 = 136315138;
    uint64_t v245 = sub_1008FA0F0(0xD00000000000006DLL, 0x8000000101407440, (uint64_t *)&v246);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v135, v136, "%s unexpected advertisement type!", v137, 0xCu);
    swift_arrayDestroy();
LABEL_73:
    swift_slowDealloc();
    swift_slowDealloc();
    goto LABEL_75;
  }
  if (v116 != 6)
  {
    sub_1000361E0(v48, (unint64_t)v49);
    sub_1000361E0(v48, (unint64_t)v49);
    uint64_t v138 = Logger.logObject.getter();
    os_log_type_t v139 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v138, v139))
    {
      uint64_t v140 = (uint8_t *)swift_slowAlloc();
      uint64_t v246 = (void *)swift_slowAlloc();
      *(_DWORD *)uint64_t v140 = 136446210;
      uint64_t v141 = Data.hexString.getter();
      uint64_t v245 = sub_1008FA0F0(v141, v142, (uint64_t *)&v246);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_10001CFB8(v48, (unint64_t)v49);
      sub_10001CFB8(v48, (unint64_t)v49);
      _os_log_impl((void *)&_mh_execute_header, v138, v139, "Sanitizing MAC address: %{public}s", v140, 0xCu);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_10001CFB8(v48, (unint64_t)v49);
      sub_10001CFB8(v48, (unint64_t)v49);
    }

    uint64_t v150 = v239;
    uint64_t v151 = v212;
    uint64_t v143 = v211;
    uint64_t v145 = v236;
    sub_1000361E0(v48, (unint64_t)v49);
    MACAddress.init(addressToSanitize:type:)();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v150 + 48))(v143, 1, v145) != 1)
    {
      unint64_t v161 = *(char **)(v150 + 32);
      uint64_t v241 = (uint64_t (*)(char *, void *))((v150 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000);
      uint64_t v162 = v213;
      uint64_t v212 = v161;
      ((void (*)(char *, char *, uint64_t))v161)(v213, v143, v145);
      v221(v151, v162, v145);
      uint64_t v163 = Logger.logObject.getter();
      os_log_type_t v164 = static os_log_type_t.default.getter();
      BOOL v165 = os_log_type_enabled(v163, v164);
      id v231 = v49;
      uint64_t v230 = v48;
      if (v165)
      {
        uint64_t v166 = (uint8_t *)swift_slowAlloc();
        uint64_t v246 = (void *)swift_slowAlloc();
        *(_DWORD *)uint64_t v166 = 136446210;
        sub_100796E74((unint64_t *)&qword_101649EE0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
        uint64_t v167 = dispatch thunk of CustomStringConvertible.description.getter();
        uint64_t v245 = sub_1008FA0F0(v167, v168, (uint64_t *)&v246);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease();
        ((void (*)(char *, uint64_t))v232)(v151, v145);
        _os_log_impl((void *)&_mh_execute_header, v163, v164, "Sanitized MAC address: %{public}s", v166, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }
      else
      {
        ((void (*)(char *, uint64_t))v232)(v151, v145);
      }

      uint64_t v149 = v238;
      uint64_t v147 = v228;
      ((void (*)(uint64_t, char *, uint64_t))v212)(v228, v213, v145);
      uint64_t v148 = v239;
      goto LABEL_80;
    }
LABEL_70:
    swift_release();
    uint64_t v152 = (uint64_t)v143;
LABEL_71:
    sub_10001DAB4(v152, (uint64_t *)&unk_1016477E0);
    sub_1000361E0(v48, (unint64_t)v49);
    sub_1000361E0(v48, (unint64_t)v49);
    uint64_t v135 = Logger.logObject.getter();
    os_log_type_t v153 = static os_log_type_t.error.getter();
    if (!os_log_type_enabled(v135, v153))
    {
      sub_10001CFB8(v48, (unint64_t)v49);
      sub_10001CFB8(v48, (unint64_t)v49);
      goto LABEL_75;
    }
    uint64_t v154 = (uint8_t *)swift_slowAlloc();
    uint64_t v246 = (void *)swift_slowAlloc();
    *(_DWORD *)uint64_t v154 = 136315138;
    uint64_t v155 = Data.hexString.getter();
    uint64_t v245 = sub_1008FA0F0(v155, v156, (uint64_t *)&v246);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10001CFB8(v48, (unint64_t)v49);
    sub_10001CFB8(v48, (unint64_t)v49);
    _os_log_impl((void *)&_mh_execute_header, v135, v153, "Invalid address %s!", v154, 0xCu);
    swift_arrayDestroy();
    goto LABEL_73;
  }
  if (qword_101637188 != -1) {
    goto LABEL_89;
  }
LABEL_58:
  int v125 = (void *)qword_10170EE68;
  id v126 = [self sharedInstance];
  unsigned int v127 = [v126 isInternalBuild];

  if (!v127
    || (NSString v128 = String._bridgeToObjectiveC()(),
        unsigned int v129 = [v125 BOOLForKey:v128],
        v128,
        !v129))
  {
    sub_1000361E0(v48, (unint64_t)v49);
    uint64_t v143 = v208;
    MACAddress.init(data:type:)();
    uint64_t v144 = v239;
    uint64_t v145 = v236;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v239 + 48))(v143, 1, v236) != 1)
    {
      uint64_t v230 = v48;
      id v231 = v49;
      uint64_t v146 = *(void (**)(uint64_t, char *, uint64_t))(v144 + 32);
      uint64_t v241 = (uint64_t (*)(char *, void *))((v144 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000);
      uint64_t v147 = v228;
      v146(v228, v143, v145);
      uint64_t v148 = v144;
      uint64_t v149 = v238;
LABEL_80:
      uint64_t v169 = v209;
      goto LABEL_81;
    }
    goto LABEL_70;
  }
  sub_1000361E0(v48, (unint64_t)v49);
  sub_1000361E0(v48, (unint64_t)v49);
  uint64_t v130 = Logger.logObject.getter();
  os_log_type_t v131 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v130, v131))
  {
    Swift::Int v132 = (uint8_t *)swift_slowAlloc();
    uint64_t v246 = (void *)swift_slowAlloc();
    *(_DWORD *)Swift::Int v132 = 136446210;
    uint64_t v133 = Data.hexString.getter();
    uint64_t v245 = sub_1008FA0F0(v133, v134, (uint64_t *)&v246);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_10001CFB8(v48, (unint64_t)v49);
    sub_10001CFB8(v48, (unint64_t)v49);
    _os_log_impl((void *)&_mh_execute_header, v130, v131, "ForceReadingHawkeyeAIS is enabled. Sanitizing MAC address: %{public}s", v132, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_10001CFB8(v48, (unint64_t)v49);
    sub_10001CFB8(v48, (unint64_t)v49);
  }

  uint64_t v202 = v238;
  sub_1000361E0(v48, (unint64_t)v49);
  uint64_t v203 = v207;
  MACAddress.init(addressToSanitize:type:)();
  uint64_t v148 = v239;
  uint64_t v145 = v236;
  int v204 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v239 + 48))(v203, 1, v236);
  uint64_t v147 = v228;
  if (v204 == 1)
  {
    swift_release();
    uint64_t v152 = (uint64_t)v203;
    goto LABEL_71;
  }
  uint64_t v230 = v48;
  id v231 = v49;
  uint64_t v205 = *(void (**)(uint64_t, char *, uint64_t))(v148 + 32);
  uint64_t v241 = (uint64_t (*)(char *, void *))((v148 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000);
  v205(v228, v203, v145);
  uint64_t v169 = v209;
  uint64_t v149 = v202;
LABEL_81:
  sub_10000588C(&qword_1016653B0);
  uint64_t v244 = swift_allocBox();
  uint64_t v171 = v170;
  uint64_t v172 = type metadata accessor for AccessoryMetadata(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v172 - 8) + 56))(v171, 1, 1, v172);
  sub_10000588C((uint64_t *)&unk_10166BFA0);
  uint64_t v232 = (char *)swift_allocBox();
  uint64_t v174 = v173;
  uint64_t v175 = type metadata accessor for AccessoryProductInfo();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v175 - 8) + 56))(v174, 1, 1, v175);
  unint64_t v213 = (char *)swift_allocObject();
  swift_weakInit();
  uint64_t v176 = v240;
  v169(v223, v237, v240);
  uint64_t v177 = (void (*)(char *, unint64_t, uint64_t))v221;
  v221(v224, (char *)v147, v145);
  sub_10001D074(v227, v226, (uint64_t *)&unk_101653D50);
  v177(v225, v235, v145);
  unint64_t v178 = (*(unsigned __int8 *)(v149 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v149 + 80);
  unint64_t v179 = (v214 + v178 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v180 = (v179 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v181 = *(unsigned __int8 *)(v148 + 80);
  uint64_t v182 = (v181 + v180 + 8) & ~v181;
  uint64_t v183 = v149;
  unint64_t v184 = (v215 + *(unsigned __int8 *)(v216 + 80) + v182) & ~(unint64_t)*(unsigned __int8 *)(v216 + 80);
  unint64_t v185 = (v217 + v181 + v184) & ~v181;
  uint64_t v221 = (void (*)(char *, char *, uint64_t))((v185 + v215 + 7) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v217 = (v185 + v215 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v186 = v183;
  unint64_t v222 = (v217 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v235 = (v222 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v187 = swift_allocObject();
  id v188 = v242;
  *(void *)(v187 + 16) = v213;
  *(void *)(v187 + 24) = v188;
  (*(void (**)(unint64_t, char *, void *))(v186 + 32))(v187 + v178, v223, v176);
  *(void *)(v187 + v179) = v244;
  *(void *)(v187 + v180) = v232;
  uint64_t v189 = v187 + v182;
  uint64_t v190 = v239;
  uint64_t v191 = *(void (**)(uint64_t, char *, uint64_t))(v239 + 32);
  uint64_t v192 = v236;
  v191(v189, v224, v236);
  sub_1007AF8D8(v226, v187 + v184);
  v191(v187 + v185, v225, v192);
  uint64_t v193 = (char *)v221 + v187;
  *(void *)uint64_t v193 = v243;
  LOBYTE(v180) = v229;
  v193[8] = v229;
  uint64_t v194 = (uint64_t *)(v187 + v217);
  uint64_t v195 = v219;
  unint64_t v196 = v220;
  uint64_t *v194 = v219;
  v194[1] = v196;
  uint64_t v197 = (void *)(v187 + v222);
  unint64_t v198 = v234;
  *uint64_t v197 = v233;
  v197[1] = v198;
  *(void *)(v187 + v235) = v218;
  id v199 = v188;
  swift_retain();
  swift_retain();
  sub_100295FB0(v195, v196);
  swift_retain();
  id v200 = [v199 trackingIdentifier];
  LOBYTE(v196) = [v200 isPosh];

  uint64_t v201 = v228;
  sub_10078A424(v228, v180, v227, v196, (void (*)(uint64_t *))sub_1007B00E4, v187);
  swift_release();
  sub_10001CFB8(v230, (unint64_t)v231);
  (*(void (**)(uint64_t, uint64_t))(v190 + 8))(v201, v192);
  (*(void (**)(char *, void *))(v238 + 8))(v237, v240);
  swift_release();
  return swift_release();
}

uint64_t sub_10079D5EC(unint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4, void *a5, uint64_t a6, void (*a7)(void), void (*a8)(unint64_t, unsigned char *, uint64_t))
{
  uint64_t v86 = a8;
  uint64_t v83 = a6;
  uint64_t v88 = a5;
  uint64_t v76 = a2;
  unint64_t v77 = a3;
  id v75 = *v8;
  uint64_t v12 = type metadata accessor for WildModeTrackingLocation(0);
  uint64_t v89 = *(void *)(v12 - 8);
  uint64_t v90 = v12;
  __chkstk_darwin(v12);
  uint64_t v14 = (int **)((char *)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v15 = sub_10000588C((uint64_t *)&unk_101653D50);
  uint64_t v16 = __chkstk_darwin(v15 - 8);
  uint64_t v80 = (uint64_t)&v75 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v75 - v18;
  uint64_t v20 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v20 - 8);
  uint64_t v22 = (char *)&v75 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = sub_10000588C(&qword_1016511E0);
  __chkstk_darwin(v23 - 8);
  uint64_t v25 = (char *)&v75 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v85 = type metadata accessor for WildModeAssociationRecord(0);
  uint64_t v26 = *(void *)(v85 - 8);
  __chkstk_darwin(v85);
  uint64_t v81 = (uint64_t)&v75 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = a4;
  sub_10001D074(a4, (uint64_t)v19, (uint64_t *)&unk_101653D50);
  uint64_t v28 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48);
  uint64_t v78 = v29 + 48;
  uint64_t v79 = v30;
  unsigned int v31 = v30((uint64_t)v19, 1, v28);
  uint64_t v82 = v8;
  unint64_t v87 = a1;
  if (v31 == 1)
  {
    sub_10001DAB4((uint64_t)v19, (uint64_t *)&unk_101653D50);
    uint64_t v32 = type metadata accessor for UUID();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v22, 1, 1, v32);
  }
  else
  {
    uint64_t v33 = *(int *)(v28 + 20);
    uint64_t v34 = v28;
    uint64_t v35 = a7;
    uint64_t v36 = &v19[v33];
    uint64_t v37 = type metadata accessor for UUID();
    uint64_t v38 = *(void *)(v37 - 8);
    uint64_t v39 = v36;
    a7 = v35;
    uint64_t v28 = v34;
    (*(void (**)(char *, char *, uint64_t))(v38 + 16))(v22, v39, v37);
    sub_1007AFBFC((uint64_t)v19, type metadata accessor for SharedBeaconRecord);
    uint64_t v40 = v37;
    a1 = v87;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v22, 0, 1, v40);
  }
  uint64_t v41 = v86;
  sub_100790EA0(a1, (uint64_t)v22, (uint64_t)v25);
  sub_10001DAB4((uint64_t)v22, &qword_101638CF0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v25, 1, v85) == 1)
  {
    sub_10001DAB4((uint64_t)v25, &qword_1016511E0);
    return sub_10079B60C(a1, v76, (unint64_t)v77, v84, v88, v83, (void (*)(void *))a7, (unint64_t)v41);
  }
  unint64_t v77 = a7;
  uint64_t v43 = v81;
  sub_1007B136C((uint64_t)v25, v81, type metadata accessor for WildModeAssociationRecord);
  LODWORD(v85) = static os_log_type_t.default.getter();
  if (qword_1016372F0 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v44 = swift_allocObject();
  *(_OWORD *)(v44 + 16) = xmmword_101347500;
  uint64_t v45 = UUID.uuidString.getter();
  uint64_t v47 = v46;
  *(void *)(v44 + 56) = &type metadata for String;
  unint64_t v48 = sub_10000B4CC();
  *(void *)(v44 + 64) = v48;
  *(void *)(v44 + 32) = v45;
  *(void *)(v44 + 40) = v47;
  uint64_t v49 = MACAddress.description.getter();
  *(void *)(v44 + 96) = &type metadata for String;
  *(void *)(v44 + 104) = v48;
  *(void *)(v44 + 72) = v49;
  *(void *)(v44 + 80) = v50;
  unint64_t v51 = 0xE500000000000000;
  uint64_t v52 = 0x656C707061;
  switch((char)v83)
  {
    case 1:
      unint64_t v51 = 0xE600000000000000;
      uint64_t v52 = 0x6E6169727564;
      goto LABEL_12;
    case 2:
      unint64_t v51 = 0xE700000000000000;
      uint64_t v52 = 0x6579656B776168;
      goto LABEL_12;
    case 3:
      unint64_t v51 = 0xE400000000000000;
      uint64_t v52 = 1701602664;
      goto LABEL_12;
    case 4:
      *(void *)(v44 + 136) = &type metadata for String;
      *(void *)(v44 + 144) = v48;
      unint64_t v51 = 0xE000000000000000;
      *(void *)(v44 + 112) = 0;
      goto LABEL_13;
    default:
LABEL_12:
      *(void *)(v44 + 136) = &type metadata for String;
      *(void *)(v44 + 144) = v48;
      *(void *)(v44 + 112) = v52;
LABEL_13:
      *(void *)(v44 + 120) = v51;
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      uint64_t v53 = v80;
      sub_10001D074(v84, v80, (uint64_t *)&unk_101653D50);
      if (v79(v53, 1, v28) == 1)
      {
        sub_10001DAB4(v53, (uint64_t *)&unk_101653D50);
        uint64_t v54 = 0;
        uint64_t v85 = 0;
        uint64_t v55 = 0;
      }
      else
      {
        uint64_t v56 = (unsigned __int8 *)(v53 + *(int *)(v28 + 28));
        uint64_t v54 = *v56;
        uint64_t v55 = *((void *)v56 + 2);
        uint64_t v85 = *((void *)v56 + 1);
        swift_bridgeObjectRetain();
        sub_1007AFBFC(v53, type metadata accessor for SharedBeaconRecord);
      }
      id v57 = [v88 observedLocations:v75, v76];
      sub_10001D4B0(0, &qword_101656690);
      unint64_t v58 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (!(v58 >> 62))
      {
        uint64_t v59 = *(void *)((v58 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v59) {
          goto LABEL_18;
        }
LABEL_29:
        swift_bridgeObjectRelease();
        unint64_t v61 = _swiftEmptyArrayStorage;
        goto LABEL_30;
      }
      swift_bridgeObjectRetain();
      uint64_t v59 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v59) {
        goto LABEL_29;
      }
LABEL_18:
      int v91 = _swiftEmptyArrayStorage;
      sub_1000B7CEC(0, v59 & ~(v59 >> 63), 0);
      if (v59 < 0)
      {
        __break(1u);
        JUMPOUT(0x10079DF44);
      }
      uint64_t v83 = v54;
      uint64_t v84 = v55;
      uint64_t v60 = 0;
      unint64_t v61 = v91;
      do
      {
        if ((v58 & 0xC000000000000001) != 0) {
          id v62 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
        }
        else {
          id v62 = *(id *)(v58 + 8 * v60 + 32);
        }
        uint64_t v63 = v62;
        [v62 latitude];
        uint64_t v65 = v64;
        [v63 longitude];
        uint64_t v67 = v66;
        [v63 horizontalAccuracy];
        uint64_t v69 = v68;
        id v70 = [v63 timestamp];
        static Date._unconditionallyBridgeFromObjectiveC(_:)();

        *uint64_t v14 = v65;
        v14[1] = v67;
        v14[2] = v69;
        int v91 = v61;
        unint64_t v72 = v61[2];
        unint64_t v71 = v61[3];
        if (v72 >= v71 >> 1)
        {
          sub_1000B7CEC(v71 > 1, v72 + 1, 1);
          unint64_t v61 = v91;
        }
        ++v60;
        v61[2] = v72 + 1;
        sub_1007B136C((uint64_t)v14, (uint64_t)v61+ ((*(unsigned __int8 *)(v89 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v89 + 80))+ *(void *)(v89 + 72) * v72, type metadata accessor for WildModeTrackingLocation);
      }
      while (v59 != v60);
      swift_bridgeObjectRelease();
      uint64_t v41 = v86;
      uint64_t v43 = v81;
      uint64_t v54 = v83;
      uint64_t v55 = v84;
LABEL_30:
      uint64_t v73 = swift_allocObject();
      uint64_t v74 = (uint64_t)v82;
      swift_weakInit();
      swift_retain();
      swift_retain();
      sub_100799CCC(v43, v88, v87, v54, v85, v55, (uint64_t)v61, v74, v77, v41, v73, v75);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      sub_1007AFBFC(v43, type metadata accessor for WildModeAssociationRecord);
      return swift_release();
  }
}

uint64_t sub_10079DF58(unint64_t a1, void *a2, void *a3, void (*a4)(uint64_t, void *), void *a5)
{
  uint64_t v52 = (int *)sub_10000588C(&qword_10164D7C8);
  __chkstk_darwin(v52);
  uint64_t v54 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v57 = (void *)sub_10000588C(&qword_10164D7D0);
  uint64_t v11 = __chkstk_darwin(v57);
  unint64_t v58 = (unint64_t *)((char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v11);
  uint64_t v59 = (uint64_t *)((char *)&v51 - v13);
  uint64_t v14 = swift_allocObject();
  uint64_t v53 = a4;
  *(void *)(v14 + 16) = a4;
  *(void *)(v14 + 24) = a5;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = sub_1007B1420;
  *(void *)(v15 + 24) = v14;
  uint64_t v60 = (void (*)(unint64_t, unsigned char *, uint64_t))v15;
  *(void *)(v15 + 32) = a3;
  uint64_t v56 = a5;
  swift_retain();
  uint64_t v61 = v14;
  swift_retain();
  uint64_t v55 = a3;
  static os_log_type_t.default.getter();
  if (qword_101637278 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_101347BA0;
  uint64_t v17 = a2;
  uint64_t v62 = *a2;
  sub_10000588C(&qword_10164D678);
  uint64_t v18 = String.init<A>(describing:)();
  uint64_t v20 = v19;
  *(void *)(v16 + 56) = &type metadata for String;
  unint64_t v21 = sub_10000B4CC();
  *(void *)(v16 + 32) = v18;
  *(void *)(v16 + 40) = v20;
  *(void *)(v16 + 96) = &type metadata for String;
  *(void *)(v16 + 104) = v21;
  *(void *)(v16 + 64) = v21;
  *(void *)(v16 + 72) = 0xD000000000000039;
  *(void *)(v16 + 80) = 0x8000000101407340;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  static os_log_type_t.default.getter();
  if (qword_1016372F0 != -1) {
    swift_once();
  }
  uint64_t v22 = swift_allocObject();
  *(_OWORD *)(v22 + 16) = xmmword_101342130;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v23 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v23 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  *(void *)(v22 + 56) = &type metadata for Int;
  *(void *)(v22 + 64) = &protocol witness table for Int;
  *(void *)(v22 + 32) = v23;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  id v24 = [self defaultWorkspace];
  if (!v24) {
    goto LABEL_24;
  }
  uint64_t v25 = v24;
  NSString v26 = String._bridgeToObjectiveC()();
  unsigned __int8 v27 = [v25 applicationIsInstalled:v26];

  if ((v27 & 1) == 0)
  {
    sub_10126D714();
    swift_bridgeObjectRelease();
    sub_100AA86FC();
  }
  if (!(a1 >> 62))
  {
    uint64_t v28 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v28) {
      goto LABEL_12;
    }
LABEL_18:
    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_18;
  }
LABEL_12:
  if ((a1 & 0xC000000000000001) != 0)
  {
    id v30 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    uint64_t v29 = v17;
    goto LABEL_15;
  }
  if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
LABEL_24:

    swift_release();
    uint64_t result = swift_release();
    __break(1u);
    return result;
  }
  uint64_t v29 = v17;
  id v30 = *(id *)(a1 + 32);
LABEL_15:
  swift_bridgeObjectRelease();
  unsigned int v31 = v59;
  sub_100782478(v30, v59);
  uint64_t v32 = v58;
  sub_10001D074((uint64_t)v31, (uint64_t)v58, &qword_10164D7D0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    unint64_t v33 = *v32;
    swift_retain();
    swift_errorRetain();
    sub_100781FF0(v55, v33, v53);

    swift_release();
    swift_errorRelease();
    swift_errorRelease();
  }
  else
  {
    uint64_t v35 = v52[12];
    unint64_t v36 = (unint64_t)v54;
    id v57 = v30;
    uint64_t v37 = (uint64_t *)&v54[v35];
    uint64_t v38 = v52[16];
    uint64_t v39 = (uint64_t)&v54[v38];
    uint64_t v40 = v52[20];
    uint64_t v41 = v52[24];
    uint64_t v42 = (uint64_t *)((char *)v32 + v35);
    uint64_t v55 = (char *)v32 + v38;
    uint64_t v43 = type metadata accessor for MACAddress();
    (*(void (**)(unint64_t, unint64_t *, uint64_t))(*(void *)(v43 - 8) + 32))(v36, v32, v43);
    uint64_t v56 = v29;
    uint64_t v44 = *v42;
    uint64_t v45 = (void (*)(void))v42[1];
    *uint64_t v37 = v44;
    v37[1] = (uint64_t)v45;
    uint64_t v46 = v39;
    sub_1007AF8D8((uint64_t)v55, v39);
    uint64_t v47 = *(void **)((char *)v32 + v40);
    *(void *)(v36 + v40) = v47;
    uint64_t v48 = *((unsigned __int8 *)v32 + v41);
    *(unsigned char *)(v36 + v41) = v48;
    sub_100295FB0(v44, (unint64_t)v45);
    id v49 = v47;
    uint64_t v50 = v57;
    sub_10079D5EC(v36, v44, v45, v46, v57, v48, (void (*)(void))sub_1007B142C, v60);

    sub_100293254(v44, (unint64_t)v45);
    sub_10001DAB4(v36, &qword_10164D7C8);
  }
  sub_10001DAB4((uint64_t)v31, &qword_10164D7D0);
  swift_release();
  return swift_release();
}

uint64_t sub_10079E5F8(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void (*a10)(uint64_t, void *), void (*a11)(unint64_t, char *, uint64_t))
{
  uint64_t v178 = a8;
  unint64_t v179 = a2;
  uint64_t v172 = a6;
  uint64_t v173 = a7;
  uint64_t v170 = a4;
  uint64_t v171 = a5;
  uint64_t v12 = sub_10000588C(&qword_10163C6C8);
  __chkstk_darwin(v12 - 8);
  os_log_type_t v139 = (char *)&v129 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v143 = sub_10000588C(&qword_10164D688);
  uint64_t v142 = *(void *)(v143 - 8);
  __chkstk_darwin(v143);
  uint64_t v140 = (char *)&v129 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v146 = sub_10000588C(&qword_10164D690);
  uint64_t v144 = *(void *)(v146 - 8);
  __chkstk_darwin(v146);
  uint64_t v141 = (char *)&v129 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v148 = sub_10000588C(&qword_10164D698);
  uint64_t v147 = *(void *)(v148 - 8);
  __chkstk_darwin(v148);
  uint64_t v145 = (char *)&v129 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v151 = sub_10000588C(&qword_10164D6A0);
  uint64_t v150 = *(void *)(v151 - 8);
  __chkstk_darwin(v151);
  uint64_t v149 = (char *)&v129 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v157 = sub_10000588C(&qword_10164D6A8);
  uint64_t v155 = *(void *)(v157 - 8);
  __chkstk_darwin(v157);
  uint64_t v152 = (char *)&v129 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v158 = sub_10000588C(&qword_10164D6B0);
  uint64_t v156 = *(void *)(v158 - 8);
  __chkstk_darwin(v158);
  os_log_type_t v153 = (char *)&v129 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v160 = sub_10000588C(&qword_10164D6B8);
  uint64_t v159 = *(void *)(v160 - 8);
  __chkstk_darwin(v160);
  uint64_t v154 = (char *)&v129 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_10000588C((uint64_t *)&unk_101653D50);
  uint64_t v133 = *(void *)(v21 - 8);
  uint64_t v22 = __chkstk_darwin(v21 - 8);
  uint64_t v135 = (uint64_t)&v129 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v134 = v23;
  __chkstk_darwin(v22);
  os_log_type_t v136 = (char *)&v129 - v24;
  uint64_t v25 = sub_10000588C((uint64_t *)&unk_1016477E0);
  __chkstk_darwin(v25 - 8);
  uint64_t v163 = (char *)&v129 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v166 = type metadata accessor for MACAddress();
  uint64_t v174 = *(void *)(v166 - 8);
  uint64_t v27 = __chkstk_darwin(v166);
  Swift::Int v132 = (char *)&v129 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v131 = v28;
  __chkstk_darwin(v27);
  BOOL v165 = (char *)&v129 - v29;
  uint64_t v30 = type metadata accessor for WildModeAssociationRecord(0);
  uint64_t v167 = *(void *)(v30 - 8);
  uint64_t v31 = __chkstk_darwin(v30);
  uint64_t v162 = (char *)&v129 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v161 = (uint64_t)&v129 - v34;
  uint64_t v168 = v35;
  __chkstk_darwin(v33);
  uint64_t v37 = (char *)&v129 - v36;
  uint64_t v169 = sub_10000588C(&qword_10164D6C0);
  uint64_t v164 = *(void *)(v169 - 8);
  __chkstk_darwin(v169);
  uint64_t v39 = (char *)&v129 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = sub_10000588C(&qword_1016653B0);
  __chkstk_darwin(v40 - 8);
  uint64_t v42 = (char *)&v129 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = swift_allocObject();
  uint64_t v137 = a10;
  *(void *)(v43 + 16) = a10;
  *(void *)(v43 + 24) = a11;
  uint64_t v44 = (void *)swift_allocObject();
  void v44[2] = sub_1007B3244;
  v44[3] = v43;
  v44[4] = a9;
  uint64_t v45 = swift_allocObject();
  *(void *)(v45 + 16) = sub_1007B142C;
  *(void *)(v45 + 24) = v44;
  uint64_t v175 = v45;
  sub_10001D074(a1 + *(int *)(v30 + 56), (uint64_t)v42, &qword_1016653B0);
  uint64_t v46 = type metadata accessor for AccessoryMetadata(0);
  int v47 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v46 - 8) + 48))(v42, 1, v46);
  uint64_t v138 = a11;
  swift_retain();
  uint64_t v177 = v43;
  swift_retain();
  id v48 = a9;
  uint64_t v176 = v44;
  swift_retain();
  sub_10001DAB4((uint64_t)v42, &qword_1016653B0);
  if (v47 != 1)
  {
    uint64_t v57 = a1;
    sub_1007AFB78(a1, (uint64_t)v37, type metadata accessor for WildModeAssociationRecord);
    Just.init(_:)();
    sub_100062734(&qword_10164D740, &qword_10164D6C0);
    uint64_t v58 = v169;
    uint64_t v59 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(char *, uint64_t))(v164 + 8))(v39, v58);
    uint64_t v60 = (uint64_t)v37;
    uint64_t v62 = v178;
    uint64_t v61 = v179;
LABEL_30:
    uint64_t v180 = v59;
    sub_1007AFB78(v57, v60, type metadata accessor for WildModeAssociationRecord);
    unint64_t v121 = (*(unsigned __int8 *)(v167 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v167 + 80);
    uint64_t v122 = (void *)swift_allocObject();
    v122[2] = v62;
    v122[3] = v61;
    uint64_t v123 = v171;
    uint64_t v124 = v172;
    v122[4] = v170;
    v122[5] = v123;
    uint64_t v125 = v173;
    v122[6] = v124;
    v122[7] = v125;
    uint64_t v126 = v175;
    v122[8] = sub_1007B3248;
    v122[9] = v126;
    sub_1007B136C(v60, (uint64_t)v122 + v121, type metadata accessor for WildModeAssociationRecord);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    id v127 = v61;
    sub_10000588C(&qword_10164D730);
    sub_100062734(&qword_10164D738, &qword_10164D730);
    Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  id v129 = v48;
  uint64_t v164 = v30;
  uint64_t v130 = v37;
  uint64_t v169 = a1;
  if (qword_101636CA8 != -1) {
    swift_once();
  }
  uint64_t v49 = type metadata accessor for Logger();
  sub_100010324(v49, (uint64_t)qword_10170E318);
  uint64_t v50 = v169;
  uint64_t v51 = v161;
  sub_1007AFB78(v169, v161, type metadata accessor for WildModeAssociationRecord);
  uint64_t v52 = Logger.logObject.getter();
  os_log_type_t v53 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v52, v53))
  {
    uint64_t v54 = (uint8_t *)swift_slowAlloc();
    uint64_t v180 = swift_slowAlloc();
    *(_DWORD *)uint64_t v54 = 136446210;
    type metadata accessor for UUID();
    sub_100796E74((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v55 = dispatch thunk of CustomStringConvertible.description.getter();
    id v181 = (id)sub_1008FA0F0(v55, v56, &v180);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1007AFBFC(v51, type metadata accessor for WildModeAssociationRecord);
    _os_log_impl((void *)&_mh_execute_header, v52, v53, "Record %{public}s is missing metadata. Attempting to fetch again...", v54, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v50 = v169;
    swift_slowDealloc();
  }
  else
  {
    sub_1007AFBFC(v51, type metadata accessor for WildModeAssociationRecord);
  }

  uint64_t v63 = v174;
  uint64_t v64 = (uint64_t)v163;
  uint64_t v65 = (uint64_t)v162;
  uint64_t v66 = v179;
  if (qword_101636CB0 != -1) {
    swift_once();
  }
  sub_100010324(v49, (uint64_t)qword_10164D4D0);
  sub_1007AFB78(v50, v65, type metadata accessor for WildModeAssociationRecord);
  uint64_t v67 = Logger.logObject.getter();
  os_log_type_t v68 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v67, v68))
  {
    sub_1007AFBFC(v65, type metadata accessor for WildModeAssociationRecord);

    goto LABEL_21;
  }
  uint64_t v69 = swift_slowAlloc();
  uint64_t v180 = swift_slowAlloc();
  *(_DWORD *)uint64_t v69 = 136315394;
  id v181 = (id)sub_1008FA0F0(0xD000000000000068, 0x80000001014071E0, &v180);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *(_WORD *)(v69 + 12) = 2082;
  id v70 = (unsigned char *)(v65 + *(int *)(v164 + 88));
  if (v70[1])
  {
    if (*(unsigned char *)(v65 + *(int *)(v164 + 84))) {
      goto LABEL_19;
    }
    goto LABEL_16;
  }
  if ((*(unsigned char *)(v65 + *(int *)(v164 + 84)) & 1) == 0)
  {
LABEL_16:
    char v71 = *(unsigned char *)(v65 + *(int *)(v164 + 52));
    goto LABEL_20;
  }
  if (*v70 != 1)
  {
LABEL_19:
    char v71 = 6;
    goto LABEL_20;
  }
  char v71 = 5;
LABEL_20:
  uint64_t v72 = sub_10078155C(v71);
  id v181 = (id)sub_1008FA0F0(v72, v73, &v180);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  sub_1007AFBFC(v65, type metadata accessor for WildModeAssociationRecord);
  _os_log_impl((void *)&_mh_execute_header, v67, v68, "%s Advertisement type: %{public}s", (uint8_t *)v69, 0x16u);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  uint64_t v50 = v169;
  uint64_t v66 = v179;
LABEL_21:
  sub_10029416C(v64);
  uint64_t v74 = v166;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v63 + 48))(v64, 1, v166) != 1)
  {
    uint64_t v82 = *(void (**)(unint64_t, char *, uint64_t))(v63 + 32);
    uint64_t v162 = (char *)(v63 + 32);
    uint64_t v138 = v82;
    v82((unint64_t)v165, (char *)v64, v74);
    LODWORD(v137) = *(unsigned __int8 *)(v50 + *(int *)(v164 + 52));
    uint64_t v163 = (char *)swift_allocBox();
    sub_1007AFB78(v50, v83, type metadata accessor for WildModeAssociationRecord);
    id v84 = [v66 trackingIdentifier];
    unsigned __int8 v85 = [v84 isPosh];

    if (v85)
    {
      id v86 = [v66 trackingIdentifier];
      unsigned int v87 = [v86 networkID];

      int v88 = 2 * (v87 == 2);
      if (v87 == 1) {
        int v88 = 1;
      }
    }
    else
    {
      int v88 = 3;
    }
    LODWORD(v161) = v88;
    uint64_t v89 = type metadata accessor for SharedBeaconRecord(0);
    uint64_t v90 = (uint64_t)v136;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v89 - 8) + 56))(v136, 1, 1, v89);
    LODWORD(v129) = *(unsigned char *)(v50 + *(int *)(v164 + 84)) & 1;
    uint64_t v91 = v174;
    BOOL v92 = v132;
    (*(void (**)(char *, char *, uint64_t))(v174 + 16))(v132, v165, v74);
    uint64_t v93 = v135;
    sub_10001D074(v90, v135, (uint64_t *)&unk_101653D50);
    unint64_t v94 = (*(unsigned __int8 *)(v91 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v91 + 80);
    uint64_t v95 = v94 + v131;
    unint64_t v96 = (*(unsigned __int8 *)(v133 + 80) + v94 + v131 + 1) & ~(unint64_t)*(unsigned __int8 *)(v133 + 80);
    uint64_t v97 = v96 + v134;
    uint64_t v98 = swift_allocObject();
    uint64_t v99 = v178;
    *(void *)(v98 + 16) = v178;
    v138(v98 + v94, v92, v74);
    *(unsigned char *)(v98 + v95) = (_BYTE)v137;
    sub_1007AF8D8(v93, v98 + v96);
    *(unsigned char *)(v98 + v97) = (_BYTE)v129;
    sub_10000588C(&qword_1016417D8);
    swift_allocObject();
    swift_retain();
    uint64_t v180 = Future.init(_:)();
    uint64_t v137 = (void (*)(uint64_t, void *))&protocol conformance descriptor for Future<A, B>;
    sub_100062734((unint64_t *)&unk_10166C130, &qword_1016417D8);
    uint64_t v100 = Publisher.eraseToAnyPublisher()();
    uint64_t v162 = (char *)v100;
    swift_release();
    sub_10001DAB4(v90, (uint64_t *)&unk_101653D50);
    uint64_t v180 = v100;
    uint64_t v102 = v99;
    id v181 = *(id *)(v99 + 24);
    id v101 = v181;
    uint64_t v103 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
    uint64_t v104 = (uint64_t)v139;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v103 - 8) + 56))(v139, 1, 1, v103);
    uint64_t v138 = (void (*)(unint64_t, char *, uint64_t))v101;
    sub_10000588C(&qword_10164D6D0);
    sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
    sub_100062734((unint64_t *)&unk_10166C140, &qword_10164D6D0);
    sub_10033149C((unint64_t *)&qword_10166C020, (unint64_t *)&qword_1016376E0);
    id v105 = v140;
    Publisher.receive<A>(on:options:)();
    sub_10001DAB4(v104, &qword_10163C6C8);

    uint64_t v106 = swift_allocObject();
    *(void *)(v106 + 16) = v163;
    *(void *)(v106 + 24) = v102;
    *(unsigned char *)(v106 + 32) = v161;
    swift_retain();
    swift_retain();
    static Subscribers.Demand.unlimited.getter();
    sub_10000588C(&qword_10164D6D8);
    sub_10000588C((uint64_t *)&unk_10166C030);
    sub_100062734(&qword_10164D6E0, &qword_10164D688);
    sub_100062734(&qword_10164D6E8, (uint64_t *)&unk_10166C030);
    unsigned __int8 v107 = v141;
    uint64_t v108 = v143;
    Publisher.flatMap<A, B>(maxPublishers:_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v142 + 8))(v105, v108);
    sub_100062734(&qword_10164D6F0, &qword_10164D690);
    id v109 = v145;
    uint64_t v62 = v178;
    uint64_t v110 = v146;
    Publisher.timeout(_:queue:customError:)();
    id v111 = v107;
    uint64_t v57 = v169;
    (*(void (**)(char *, uint64_t))(v144 + 8))(v111, v110);
    sub_10000588C(&qword_101641650);
    sub_100062734(&qword_10164D6F8, &qword_10164D698);
    unsigned int v112 = v149;
    uint64_t v113 = v148;
    Publisher.map<A>(_:)();
    (*(void (**)(char *, uint64_t))(v147 + 8))(v109, v113);
    sub_10000588C(&qword_10164D700);
    sub_100062734(&qword_10164D708, &qword_10164D6A0);
    sub_100062734(&qword_10164D710, &qword_10164D700);
    unsigned int v114 = v152;
    uint64_t v115 = v151;
    Publisher.catch<A>(_:)();
    (*(void (**)(char *, uint64_t))(v150 + 8))(v112, v115);
    sub_100062734(&qword_10164D718, &qword_10164D6A8);
    swift_retain();
    char v116 = v153;
    uint64_t v117 = v157;
    Publisher.map<A>(_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v155 + 8))(v114, v117);
    sub_100062734(&qword_10164D720, &qword_10164D6B0);
    id v118 = v154;
    uint64_t v119 = v158;
    Publisher.replaceError(with:)();
    (*(void (**)(char *, uint64_t))(v156 + 8))(v116, v119);
    sub_100062734(&qword_10164D728, &qword_10164D6B8);
    uint64_t v120 = v160;
    uint64_t v59 = Publisher.eraseToAnyPublisher()();
    swift_release();
    (*(void (**)(char *, uint64_t))(v159 + 8))(v118, v120);
    (*(void (**)(char *, uint64_t))(v174 + 8))(v165, v166);
    swift_release();
    uint64_t v61 = v179;
    uint64_t v60 = (uint64_t)v130;
    goto LABEL_30;
  }
  sub_10001DAB4(v64, (uint64_t *)&unk_1016477E0);
  id v75 = Logger.logObject.getter();
  os_log_type_t v76 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v75, v76))
  {
    unint64_t v77 = (uint8_t *)swift_slowAlloc();
    uint64_t v180 = swift_slowAlloc();
    *(_DWORD *)unint64_t v77 = 136315138;
    id v181 = (id)sub_1008FA0F0(0xD000000000000068, 0x80000001014071E0, &v180);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v75, v76, "%s unexpected advertisement type!", v77, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  uint64_t v78 = v129;
  sub_1007AF880();
  unint64_t v79 = swift_allocError();
  *uint64_t v80 = 1;
  swift_retain();
  swift_retain();
  id v81 = v78;
  sub_100781FF0(v81, v79, v137);
  swift_release();

  swift_release();
  swift_errorRelease();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_1007A0040(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(void), void (*a10)(unint64_t, unsigned char *, uint64_t))
{
  uint64_t v165 = a7;
  uint64_t v166 = a8;
  uint64_t v163 = a5;
  uint64_t v164 = a6;
  uint64_t v162 = a4;
  uint64_t v170 = a2;
  uint64_t v11 = sub_10000588C(&qword_10163C6C8);
  __chkstk_darwin(v11 - 8);
  Swift::Int v132 = &v121[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v136 = sub_10000588C(&qword_10164D688);
  uint64_t v135 = *(void *)(v136 - 8);
  __chkstk_darwin(v136);
  uint64_t v133 = &v121[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v139 = sub_10000588C(&qword_10164D690);
  uint64_t v137 = *(void *)(v139 - 8);
  __chkstk_darwin(v139);
  uint64_t v134 = &v121[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v141 = sub_10000588C(&qword_10164D698);
  uint64_t v140 = *(void *)(v141 - 8);
  __chkstk_darwin(v141);
  uint64_t v138 = &v121[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v144 = sub_10000588C(&qword_10164D6A0);
  uint64_t v143 = *(void *)(v144 - 8);
  __chkstk_darwin(v144);
  uint64_t v142 = &v121[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v150 = sub_10000588C(&qword_10164D6A8);
  uint64_t v148 = *(void *)(v150 - 8);
  __chkstk_darwin(v150);
  uint64_t v145 = &v121[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v151 = sub_10000588C(&qword_10164D6B0);
  uint64_t v149 = *(void *)(v151 - 8);
  __chkstk_darwin(v151);
  uint64_t v146 = &v121[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v153 = sub_10000588C(&qword_10164D6B8);
  uint64_t v152 = *(void *)(v153 - 8);
  __chkstk_darwin(v153);
  uint64_t v147 = &v121[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v20 = sub_10000588C((uint64_t *)&unk_101653D50);
  uint64_t v126 = *(void *)(v20 - 8);
  uint64_t v21 = __chkstk_darwin(v20 - 8);
  NSString v128 = &v121[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v127 = v22;
  __chkstk_darwin(v21);
  id v129 = &v121[-v23];
  uint64_t v24 = sub_10000588C((uint64_t *)&unk_1016477E0);
  __chkstk_darwin(v24 - 8);
  uint64_t v157 = &v121[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v159 = type metadata accessor for MACAddress();
  uint64_t v169 = *(void *)(v159 - 8);
  uint64_t v26 = __chkstk_darwin(v159);
  uint64_t v125 = &v121[-((v27 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v124 = v27;
  __chkstk_darwin(v26);
  uint64_t v158 = &v121[-v28];
  uint64_t v29 = type metadata accessor for WildModeAssociationRecord(0);
  uint64_t v160 = *(void *)(v29 - 8);
  uint64_t v30 = __chkstk_darwin(v29);
  uint64_t v155 = &v121[-((v31 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v154 = &v121[-v33];
  uint64_t v161 = v34;
  __chkstk_darwin(v32);
  uint64_t v36 = &v121[-v35];
  uint64_t v37 = sub_10000588C(&qword_10164D6C0);
  uint64_t v38 = *(void *)(v37 - 8);
  __chkstk_darwin(v37);
  uint64_t v40 = &v121[-((v39 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v41 = sub_10000588C(&qword_1016653B0);
  __chkstk_darwin(v41 - 8);
  uint64_t v43 = &v121[-((v42 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v44 = swift_allocObject();
  uint64_t v130 = a9;
  *(void *)(v44 + 16) = a9;
  *(void *)(v44 + 24) = a10;
  uint64_t v167 = v44;
  sub_10001D074(a1 + *(int *)(v29 + 56), (uint64_t)v43, &qword_1016653B0);
  uint64_t v45 = type metadata accessor for AccessoryMetadata(0);
  int v46 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v45 - 8) + 48))(v43, 1, v45);
  uint64_t v131 = a10;
  swift_retain();
  sub_10001DAB4((uint64_t)v43, &qword_1016653B0);
  if (v46 != 1)
  {
    sub_1007AFB78(a1, (uint64_t)v36, type metadata accessor for WildModeAssociationRecord);
    Just.init(_:)();
    sub_100062734(&qword_10164D740, &qword_10164D6C0);
    uint64_t v57 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(unsigned char *, uint64_t))(v38 + 8))(v40, v37);
    uint64_t v58 = v170;
    uint64_t v59 = v166;
LABEL_30:
    uint64_t v171 = v57;
    sub_1007AFB78(a1, (uint64_t)v36, type metadata accessor for WildModeAssociationRecord);
    unint64_t v113 = (*(unsigned __int8 *)(v160 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v160 + 80);
    unsigned int v114 = (void *)swift_allocObject();
    v114[2] = v59;
    v114[3] = v58;
    uint64_t v115 = v163;
    uint64_t v116 = v164;
    v114[4] = v162;
    v114[5] = v115;
    uint64_t v117 = v165;
    v114[6] = v116;
    v114[7] = v117;
    uint64_t v118 = v167;
    v114[8] = sub_1007B3248;
    v114[9] = v118;
    sub_1007B136C((uint64_t)v36, (uint64_t)v114 + v113, type metadata accessor for WildModeAssociationRecord);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    id v119 = v58;
    sub_10000588C(&qword_10164D730);
    sub_100062734(&qword_10164D738, &qword_10164D730);
    Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
    swift_release();
    return swift_release();
  }
  uint64_t v156 = (int *)v29;
  uint64_t v123 = v36;
  uint64_t v168 = a1;
  if (qword_101636CA8 != -1) {
    swift_once();
  }
  uint64_t v47 = type metadata accessor for Logger();
  sub_100010324(v47, (uint64_t)qword_10170E318);
  id v48 = v154;
  sub_1007AFB78(v168, (uint64_t)v154, type metadata accessor for WildModeAssociationRecord);
  uint64_t v49 = Logger.logObject.getter();
  os_log_type_t v50 = static os_log_type_t.default.getter();
  BOOL v51 = os_log_type_enabled(v49, v50);
  uint64_t v52 = v170;
  uint64_t v53 = (uint64_t)v157;
  if (v51)
  {
    uint64_t v54 = (uint8_t *)swift_slowAlloc();
    uint64_t v171 = swift_slowAlloc();
    *(_DWORD *)uint64_t v54 = 136446210;
    type metadata accessor for UUID();
    sub_100796E74((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v55 = dispatch thunk of CustomStringConvertible.description.getter();
    id v172 = (id)sub_1008FA0F0(v55, v56, &v171);
    uint64_t v53 = (uint64_t)v157;
    uint64_t v52 = v170;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1007AFBFC((uint64_t)v48, type metadata accessor for WildModeAssociationRecord);
    _os_log_impl((void *)&_mh_execute_header, v49, v50, "Record %{public}s is missing metadata. Attempting to fetch again...", v54, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1007AFBFC((uint64_t)v48, type metadata accessor for WildModeAssociationRecord);
  }

  uint64_t v61 = v168;
  uint64_t v60 = v169;
  uint64_t v62 = (uint64_t)v155;
  if (qword_101636CB0 != -1) {
    swift_once();
  }
  sub_100010324(v47, (uint64_t)qword_10164D4D0);
  sub_1007AFB78(v61, v62, type metadata accessor for WildModeAssociationRecord);
  uint64_t v63 = Logger.logObject.getter();
  os_log_type_t v64 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v63, v64))
  {
    sub_1007AFBFC(v62, type metadata accessor for WildModeAssociationRecord);

    goto LABEL_21;
  }
  uint64_t v65 = swift_slowAlloc();
  uint64_t v171 = swift_slowAlloc();
  *(_DWORD *)uint64_t v65 = 136315394;
  id v172 = (id)sub_1008FA0F0(0xD000000000000068, 0x80000001014071E0, &v171);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *(_WORD *)(v65 + 12) = 2082;
  uint64_t v66 = (unsigned char *)(v62 + v156[22]);
  if (v66[1])
  {
    if (*(unsigned char *)(v62 + v156[21])) {
      goto LABEL_19;
    }
    goto LABEL_16;
  }
  if ((*(unsigned char *)(v62 + v156[21]) & 1) == 0)
  {
LABEL_16:
    char v67 = *(unsigned char *)(v62 + v156[13]);
    goto LABEL_20;
  }
  if (*v66 != 1)
  {
LABEL_19:
    char v67 = 6;
    goto LABEL_20;
  }
  char v67 = 5;
LABEL_20:
  uint64_t v68 = sub_10078155C(v67);
  id v172 = (id)sub_1008FA0F0(v68, v69, &v171);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  sub_1007AFBFC(v62, type metadata accessor for WildModeAssociationRecord);
  _os_log_impl((void *)&_mh_execute_header, v63, v64, "%s Advertisement type: %{public}s", (uint8_t *)v65, 0x16u);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  uint64_t v60 = v169;
  uint64_t v52 = v170;
LABEL_21:
  sub_10029416C(v53);
  uint64_t v70 = v159;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v60 + 48))(v53, 1, v159) != 1)
  {
    id v75 = *(void (**)(unint64_t, unsigned char *, uint64_t))(v60 + 32);
    uint64_t v155 = (unsigned char *)(v60 + 32);
    uint64_t v131 = v75;
    v75((unint64_t)v158, (unsigned char *)v53, v70);
    LODWORD(v130) = *(unsigned __int8 *)(v61 + v156[13]);
    uint64_t v157 = (unsigned char *)swift_allocBox();
    sub_1007AFB78(v61, v76, type metadata accessor for WildModeAssociationRecord);
    id v77 = [v52 trackingIdentifier];
    unsigned __int8 v78 = [v77 isPosh];

    if (v78)
    {
      id v79 = [v52 trackingIdentifier];
      unsigned int v80 = [v79 networkID];

      int v81 = 2 * (v80 == 2);
      if (v80 == 1) {
        int v81 = 1;
      }
    }
    else
    {
      int v81 = 3;
    }
    LODWORD(v154) = v81;
    uint64_t v82 = type metadata accessor for SharedBeaconRecord(0);
    uint64_t v83 = (uint64_t)v129;
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v82 - 8) + 56))(v129, 1, 1, v82);
    int v122 = *(unsigned char *)(v168 + v156[21]) & 1;
    uint64_t v84 = v169;
    unsigned __int8 v85 = v125;
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v169 + 16))(v125, v158, v70);
    id v86 = v128;
    sub_10001D074(v83, (uint64_t)v128, (uint64_t *)&unk_101653D50);
    unint64_t v87 = (*(unsigned __int8 *)(v84 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v84 + 80);
    uint64_t v88 = v87 + v124;
    unint64_t v89 = (*(unsigned __int8 *)(v126 + 80) + v87 + v124 + 1) & ~(unint64_t)*(unsigned __int8 *)(v126 + 80);
    uint64_t v90 = v89 + v127;
    uint64_t v91 = swift_allocObject();
    uint64_t v92 = v166;
    *(void *)(v91 + 16) = v166;
    v131(v91 + v87, v85, v70);
    *(unsigned char *)(v91 + v88) = (_BYTE)v130;
    sub_1007AF8D8((uint64_t)v86, v91 + v89);
    *(unsigned char *)(v91 + v90) = v122;
    sub_10000588C(&qword_1016417D8);
    swift_allocObject();
    swift_retain();
    uint64_t v171 = Future.init(_:)();
    sub_100062734((unint64_t *)&unk_10166C130, &qword_1016417D8);
    uint64_t v93 = Publisher.eraseToAnyPublisher()();
    uint64_t v155 = (unsigned char *)v93;
    swift_release();
    sub_10001DAB4(v83, (uint64_t *)&unk_101653D50);
    uint64_t v171 = v93;
    uint64_t v95 = v92;
    id v172 = *(id *)(v92 + 24);
    id v94 = v172;
    uint64_t v96 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
    uint64_t v97 = (uint64_t)v132;
    (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v96 - 8) + 56))(v132, 1, 1, v96);
    uint64_t v131 = (void (*)(unint64_t, unsigned char *, uint64_t))v94;
    sub_10000588C(&qword_10164D6D0);
    sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
    sub_100062734((unint64_t *)&unk_10166C140, &qword_10164D6D0);
    sub_10033149C((unint64_t *)&qword_10166C020, (unint64_t *)&qword_1016376E0);
    uint64_t v98 = v133;
    Publisher.receive<A>(on:options:)();
    sub_10001DAB4(v97, &qword_10163C6C8);

    uint64_t v99 = swift_allocObject();
    *(void *)(v99 + 16) = v157;
    *(void *)(v99 + 24) = v95;
    *(unsigned char *)(v99 + 32) = (_BYTE)v154;
    swift_retain();
    swift_retain();
    static Subscribers.Demand.unlimited.getter();
    sub_10000588C(&qword_10164D6D8);
    sub_10000588C((uint64_t *)&unk_10166C030);
    sub_100062734(&qword_10164D6E0, &qword_10164D688);
    sub_100062734(&qword_10164D6E8, (uint64_t *)&unk_10166C030);
    uint64_t v100 = v134;
    uint64_t v101 = v136;
    Publisher.flatMap<A, B>(maxPublishers:_:)();
    a1 = v168;
    swift_release();
    (*(void (**)(unsigned char *, uint64_t))(v135 + 8))(v98, v101);
    sub_100062734(&qword_10164D6F0, &qword_10164D690);
    uint64_t v102 = v138;
    uint64_t v103 = v139;
    Publisher.timeout(_:queue:customError:)();
    (*(void (**)(unsigned char *, uint64_t))(v137 + 8))(v100, v103);
    sub_10000588C(&qword_101641650);
    uint64_t v59 = v95;
    sub_100062734(&qword_10164D6F8, &qword_10164D698);
    uint64_t v104 = v142;
    uint64_t v105 = v141;
    Publisher.map<A>(_:)();
    (*(void (**)(unsigned char *, uint64_t))(v140 + 8))(v102, v105);
    sub_10000588C(&qword_10164D700);
    sub_100062734(&qword_10164D708, &qword_10164D6A0);
    sub_100062734(&qword_10164D710, &qword_10164D700);
    uint64_t v106 = v145;
    uint64_t v107 = v144;
    Publisher.catch<A>(_:)();
    (*(void (**)(unsigned char *, uint64_t))(v143 + 8))(v104, v107);
    sub_100062734(&qword_10164D718, &qword_10164D6A8);
    swift_retain();
    uint64_t v108 = v146;
    uint64_t v109 = v150;
    Publisher.map<A>(_:)();
    swift_release();
    (*(void (**)(unsigned char *, uint64_t))(v148 + 8))(v106, v109);
    sub_100062734(&qword_10164D720, &qword_10164D6B0);
    uint64_t v110 = v147;
    uint64_t v111 = v151;
    Publisher.replaceError(with:)();
    (*(void (**)(unsigned char *, uint64_t))(v149 + 8))(v108, v111);
    sub_100062734(&qword_10164D728, &qword_10164D6B8);
    uint64_t v112 = v153;
    uint64_t v57 = Publisher.eraseToAnyPublisher()();
    swift_release();
    (*(void (**)(unsigned char *, uint64_t))(v152 + 8))(v110, v112);
    (*(void (**)(unsigned char *, uint64_t))(v169 + 8))(v158, v159);
    swift_release();
    uint64_t v58 = v170;
    uint64_t v36 = v123;
    goto LABEL_30;
  }
  sub_10001DAB4(v53, (uint64_t *)&unk_1016477E0);
  char v71 = Logger.logObject.getter();
  os_log_type_t v72 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v71, v72))
  {
    unint64_t v73 = (uint8_t *)swift_slowAlloc();
    uint64_t v171 = swift_slowAlloc();
    *(_DWORD *)unint64_t v73 = 136315138;
    id v172 = (id)sub_1008FA0F0(0xD000000000000068, 0x80000001014071E0, &v171);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v71, v72, "%s unexpected advertisement type!", v73, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  sub_1007AF880();
  swift_allocError();
  *uint64_t v74 = 1;
  v130();
  swift_errorRelease();
  return swift_release();
}

uint64_t sub_1007A1974(void *a1, uint64_t a2, void *a3, void (*a4)(uint64_t, void *), uint64_t a5)
{
  uint64_t v10 = sub_10000588C((uint64_t *)&unk_101653D50);
  __chkstk_darwin(v10 - 8);
  uint64_t v77 = (uint64_t)&v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v12 - 8);
  unsigned __int8 v78 = (char *)&v69 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = sub_10000588C(&qword_1016511E0);
  __chkstk_darwin(v14 - 8);
  uint64_t v79 = (uint64_t)&v69 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = (int *)sub_10000588C(&qword_10164D7C8);
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v76 = (char *)&v69 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v17);
  uint64_t v83 = (uint64_t)&v69 - v19;
  uint64_t v80 = sub_10000588C(&qword_10164D7D0);
  uint64_t v20 = __chkstk_darwin(v80);
  uint64_t v22 = (unint64_t *)((char *)&v69 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v20);
  uint64_t v24 = (uint64_t *)((char *)&v69 - v23);
  uint64_t v25 = swift_allocObject();
  id v75 = a4;
  *(void *)(v25 + 16) = a4;
  *(void *)(v25 + 24) = a5;
  uint64_t v26 = swift_allocObject();
  *(void *)(v26 + 16) = sub_1007B3244;
  *(void *)(v26 + 24) = v25;
  uint64_t v82 = (void (*)(unint64_t, unsigned char *, uint64_t))v26;
  *(void *)(v26 + 32) = a3;
  uint64_t v27 = qword_101637318;
  swift_retain();
  uint64_t v84 = v25;
  swift_retain();
  id v28 = a3;
  if (v27 != -1) {
    swift_once();
  }
  uint64_t v29 = type metadata accessor for Logger();
  sub_100010324(v29, (uint64_t)qword_10170F080);
  swift_retain_n();
  uint64_t v30 = Logger.logObject.getter();
  os_log_type_t v31 = static os_log_type_t.default.getter();
  BOOL v32 = os_log_type_enabled(v30, v31);
  unsigned __int8 v85 = a1;
  int v81 = v24;
  if (v32)
  {
    uint64_t v33 = swift_slowAlloc();
    uint64_t v73 = swift_slowAlloc();
    uint64_t v86 = a2;
    v87[0] = v73;
    *(_DWORD *)uint64_t v33 = 136446466;
    type metadata accessor for UnauthorizedTracking();
    swift_retain();
    uint64_t v74 = a5;
    uint64_t v34 = String.init<A>(describing:)();
    uint64_t v86 = sub_1008FA0F0(v34, v35, v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_release_n();
    swift_bridgeObjectRelease();
    *(_WORD *)(v33 + 12) = 2082;
    uint64_t v86 = sub_1008FA0F0(0xD000000000000038, 0x8000000101407560, v87);
    a1 = v85;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "%{public}s: %{public}s", (uint8_t *)v33, 0x16u);
    swift_arrayDestroy();
    uint64_t v24 = v81;
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {

    swift_release_n();
  }
  sub_100782478(a1, v24);
  sub_10001D074((uint64_t)v24, (uint64_t)v22, &qword_10164D7D0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    unint64_t v36 = *v22;
    swift_retain();
    swift_errorRetain();
    sub_100781FF0(v28, v36, v75);
    swift_release();
    swift_errorRelease();
    swift_errorRelease();
    sub_10001DAB4((uint64_t)v24, &qword_10164D7D0);
  }
  else
  {
    uint64_t v80 = a2;
    uint64_t v37 = v16[12];
    uint64_t v38 = v83;
    uint64_t v39 = (uint64_t *)(v83 + v37);
    uint64_t v40 = v16[16];
    uint64_t v41 = v83 + v40;
    uint64_t v71 = v83 + v40;
    uint64_t v42 = v16[20];
    uint64_t v43 = v16[24];
    uint64_t v44 = (uint64_t *)((char *)v22 + v37);
    id v75 = (void (*)(uint64_t, void *))((char *)v22 + v40);
    uint64_t v45 = (void (*)(uint64_t, void *))type metadata accessor for MACAddress();
    uint64_t v46 = *((void *)v45 - 1);
    (*(void (**)(uint64_t, unint64_t *, void (*)(uint64_t, void *)))(v46 + 32))(v38, v22, v45);
    uint64_t v47 = *v44;
    uint64_t v48 = v44[1];
    uint64_t v72 = v47;
    *uint64_t v39 = v47;
    v39[1] = v48;
    uint64_t v70 = v39;
    sub_1007AF8D8((uint64_t)v75, v41);
    uint64_t v73 = *(unint64_t *)((char *)v22 + v42);
    uint64_t v74 = v46;
    *(void *)(v38 + v42) = v73;
    LOBYTE(v39) = *((unsigned char *)v22 + v43);
    uint64_t v69 = v43;
    *(unsigned char *)(v38 + v43) = (_BYTE)v39;
    uint64_t v49 = v76;
    os_log_type_t v50 = &v76[v16[12]];
    uint64_t v51 = (uint64_t)&v76[v16[16]];
    uint64_t v52 = v16[20];
    uint64_t v53 = v16[24];
    uint64_t v54 = *(void (**)(char *, uint64_t, void (*)(uint64_t, void *)))(v46 + 16);
    id v75 = v45;
    v54(v76, v38, v45);
    *(void *)os_log_type_t v50 = v72;
    *((void *)v50 + 1) = v48;
    uint64_t v55 = v71;
    sub_10001D074(v71, v51, (uint64_t *)&unk_101653D50);
    *(void *)&v49[v52] = v73;
    v49[v53] = (char)v39;
    uint64_t v56 = v77;
    sub_1007AF8D8(v51, v77);
    uint64_t v57 = type metadata accessor for SharedBeaconRecord(0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 48))(v56, 1, v57) == 1)
    {
      (*(void (**)(char *, void))(v74 + 8))(v49, v75);
      sub_10001DAB4(v56, (uint64_t *)&unk_101653D50);
      uint64_t v58 = type metadata accessor for UUID();
      uint64_t v59 = (uint64_t)v78;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v58 - 8) + 56))(v78, 1, 1, v58);
    }
    else
    {
      uint64_t v60 = v56 + *(int *)(v57 + 20);
      uint64_t v61 = type metadata accessor for UUID();
      uint64_t v62 = *(void *)(v61 - 8);
      uint64_t v59 = (uint64_t)v78;
      (*(void (**)(char *, uint64_t, uint64_t))(v62 + 16))(v78, v60, v61);
      sub_1007AFBFC(v56, type metadata accessor for SharedBeaconRecord);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v62 + 56))(v59, 0, 1, v61);
      (*(void (**)(char *, void))(v74 + 8))(v49, v75);
    }
    uint64_t v63 = v79;
    uint64_t v64 = v83;
    sub_100790EA0(v83, v59, v79);
    sub_10001DAB4(v59, &qword_101638CF0);
    uint64_t v65 = type metadata accessor for WildModeAssociationRecord(0);
    int v66 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v65 - 8) + 48))(v63, 1, v65);
    sub_10001DAB4(v63, &qword_1016511E0);
    uint64_t v67 = (uint64_t)v81;
    if (v66 == 1) {
      sub_10079B60C(v64, *v70, v70[1], v55, v85, *(unsigned __int8 *)(v64 + v69), (void (*)(void *))sub_1007B142C, (unint64_t)v82);
    }
    else {
      sub_10078CCC0(v85, (void (*)(void))sub_1007B142C, v82);
    }
    sub_10001DAB4(v67, &qword_10164D7D0);
    sub_10001DAB4(v64, &qword_10164D7C8);
  }
  swift_release();
  return swift_release();
}

uint64_t sub_1007A224C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void (*a10)(uint64_t, void *), void (*a11)(unint64_t, char *, uint64_t))
{
  uint64_t v178 = a8;
  unint64_t v179 = a2;
  uint64_t v172 = a6;
  uint64_t v173 = a7;
  uint64_t v170 = a4;
  uint64_t v171 = a5;
  uint64_t v12 = sub_10000588C(&qword_10163C6C8);
  __chkstk_darwin(v12 - 8);
  uint64_t v139 = (char *)&v129 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v143 = sub_10000588C(&qword_10164D688);
  uint64_t v142 = *(void *)(v143 - 8);
  __chkstk_darwin(v143);
  uint64_t v140 = (char *)&v129 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v146 = sub_10000588C(&qword_10164D690);
  uint64_t v144 = *(void *)(v146 - 8);
  __chkstk_darwin(v146);
  uint64_t v141 = (char *)&v129 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v148 = sub_10000588C(&qword_10164D698);
  uint64_t v147 = *(void *)(v148 - 8);
  __chkstk_darwin(v148);
  uint64_t v145 = (char *)&v129 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v151 = sub_10000588C(&qword_10164D6A0);
  uint64_t v150 = *(void *)(v151 - 8);
  __chkstk_darwin(v151);
  uint64_t v149 = (char *)&v129 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v157 = sub_10000588C(&qword_10164D6A8);
  uint64_t v155 = *(void *)(v157 - 8);
  __chkstk_darwin(v157);
  uint64_t v152 = (char *)&v129 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v158 = sub_10000588C(&qword_10164D6B0);
  uint64_t v156 = *(void *)(v158 - 8);
  __chkstk_darwin(v158);
  uint64_t v153 = (char *)&v129 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v160 = sub_10000588C(&qword_10164D6B8);
  uint64_t v159 = *(void *)(v160 - 8);
  __chkstk_darwin(v160);
  uint64_t v154 = (char *)&v129 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_10000588C((uint64_t *)&unk_101653D50);
  uint64_t v133 = *(void *)(v21 - 8);
  uint64_t v22 = __chkstk_darwin(v21 - 8);
  uint64_t v135 = (uint64_t)&v129 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v134 = v23;
  __chkstk_darwin(v22);
  uint64_t v136 = (char *)&v129 - v24;
  uint64_t v25 = sub_10000588C((uint64_t *)&unk_1016477E0);
  __chkstk_darwin(v25 - 8);
  uint64_t v163 = (char *)&v129 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v166 = type metadata accessor for MACAddress();
  uint64_t v174 = *(void *)(v166 - 8);
  uint64_t v27 = __chkstk_darwin(v166);
  Swift::Int v132 = (char *)&v129 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v131 = v28;
  __chkstk_darwin(v27);
  uint64_t v165 = (char *)&v129 - v29;
  uint64_t v30 = type metadata accessor for WildModeAssociationRecord(0);
  uint64_t v167 = *(void *)(v30 - 8);
  uint64_t v31 = __chkstk_darwin(v30);
  uint64_t v162 = (char *)&v129 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v161 = (uint64_t)&v129 - v34;
  uint64_t v168 = v35;
  __chkstk_darwin(v33);
  uint64_t v37 = (char *)&v129 - v36;
  uint64_t v169 = sub_10000588C(&qword_10164D6C0);
  uint64_t v164 = *(void *)(v169 - 8);
  __chkstk_darwin(v169);
  uint64_t v39 = (char *)&v129 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = sub_10000588C(&qword_1016653B0);
  __chkstk_darwin(v40 - 8);
  uint64_t v42 = (char *)&v129 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = swift_allocObject();
  uint64_t v137 = a10;
  *(void *)(v43 + 16) = a10;
  *(void *)(v43 + 24) = a11;
  uint64_t v44 = (void *)swift_allocObject();
  void v44[2] = sub_1007B3244;
  v44[3] = v43;
  v44[4] = a9;
  uint64_t v45 = swift_allocObject();
  *(void *)(v45 + 16) = sub_1007B142C;
  *(void *)(v45 + 24) = v44;
  uint64_t v175 = v45;
  sub_10001D074(a1 + *(int *)(v30 + 56), (uint64_t)v42, &qword_1016653B0);
  uint64_t v46 = type metadata accessor for AccessoryMetadata(0);
  int v47 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v46 - 8) + 48))(v42, 1, v46);
  uint64_t v138 = a11;
  swift_retain();
  uint64_t v177 = v43;
  swift_retain();
  id v48 = a9;
  uint64_t v176 = v44;
  swift_retain();
  sub_10001DAB4((uint64_t)v42, &qword_1016653B0);
  if (v47 != 1)
  {
    uint64_t v57 = a1;
    sub_1007AFB78(a1, (uint64_t)v37, type metadata accessor for WildModeAssociationRecord);
    Just.init(_:)();
    sub_100062734(&qword_10164D740, &qword_10164D6C0);
    uint64_t v58 = v169;
    uint64_t v59 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(char *, uint64_t))(v164 + 8))(v39, v58);
    uint64_t v60 = (uint64_t)v37;
    uint64_t v62 = v178;
    uint64_t v61 = v179;
LABEL_30:
    uint64_t v180 = v59;
    sub_1007AFB78(v57, v60, type metadata accessor for WildModeAssociationRecord);
    unint64_t v121 = (*(unsigned __int8 *)(v167 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v167 + 80);
    int v122 = (void *)swift_allocObject();
    v122[2] = v62;
    v122[3] = v61;
    uint64_t v123 = v171;
    uint64_t v124 = v172;
    v122[4] = v170;
    v122[5] = v123;
    uint64_t v125 = v173;
    v122[6] = v124;
    v122[7] = v125;
    uint64_t v126 = v175;
    v122[8] = sub_1007B3248;
    v122[9] = v126;
    sub_1007B136C(v60, (uint64_t)v122 + v121, type metadata accessor for WildModeAssociationRecord);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    id v127 = v61;
    sub_10000588C(&qword_10164D730);
    sub_100062734(&qword_10164D738, &qword_10164D730);
    Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  id v129 = v48;
  uint64_t v164 = v30;
  uint64_t v130 = v37;
  uint64_t v169 = a1;
  if (qword_101636CA8 != -1) {
    swift_once();
  }
  uint64_t v49 = type metadata accessor for Logger();
  sub_100010324(v49, (uint64_t)qword_10170E318);
  uint64_t v50 = v169;
  uint64_t v51 = v161;
  sub_1007AFB78(v169, v161, type metadata accessor for WildModeAssociationRecord);
  uint64_t v52 = Logger.logObject.getter();
  os_log_type_t v53 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v52, v53))
  {
    uint64_t v54 = (uint8_t *)swift_slowAlloc();
    uint64_t v180 = swift_slowAlloc();
    *(_DWORD *)uint64_t v54 = 136446210;
    type metadata accessor for UUID();
    sub_100796E74((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v55 = dispatch thunk of CustomStringConvertible.description.getter();
    id v181 = (id)sub_1008FA0F0(v55, v56, &v180);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1007AFBFC(v51, type metadata accessor for WildModeAssociationRecord);
    _os_log_impl((void *)&_mh_execute_header, v52, v53, "Record %{public}s is missing metadata. Attempting to fetch again...", v54, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    uint64_t v50 = v169;
    swift_slowDealloc();
  }
  else
  {
    sub_1007AFBFC(v51, type metadata accessor for WildModeAssociationRecord);
  }

  uint64_t v63 = v174;
  uint64_t v64 = (uint64_t)v163;
  uint64_t v65 = (uint64_t)v162;
  int v66 = v179;
  if (qword_101636CB0 != -1) {
    swift_once();
  }
  sub_100010324(v49, (uint64_t)qword_10164D4D0);
  sub_1007AFB78(v50, v65, type metadata accessor for WildModeAssociationRecord);
  uint64_t v67 = Logger.logObject.getter();
  os_log_type_t v68 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v67, v68))
  {
    sub_1007AFBFC(v65, type metadata accessor for WildModeAssociationRecord);

    goto LABEL_21;
  }
  uint64_t v69 = swift_slowAlloc();
  uint64_t v180 = swift_slowAlloc();
  *(_DWORD *)uint64_t v69 = 136315394;
  id v181 = (id)sub_1008FA0F0(0xD000000000000068, 0x80000001014071E0, &v180);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *(_WORD *)(v69 + 12) = 2082;
  uint64_t v70 = (unsigned char *)(v65 + *(int *)(v164 + 88));
  if (v70[1])
  {
    if (*(unsigned char *)(v65 + *(int *)(v164 + 84))) {
      goto LABEL_19;
    }
    goto LABEL_16;
  }
  if ((*(unsigned char *)(v65 + *(int *)(v164 + 84)) & 1) == 0)
  {
LABEL_16:
    char v71 = *(unsigned char *)(v65 + *(int *)(v164 + 52));
    goto LABEL_20;
  }
  if (*v70 != 1)
  {
LABEL_19:
    char v71 = 6;
    goto LABEL_20;
  }
  char v71 = 5;
LABEL_20:
  uint64_t v72 = sub_10078155C(v71);
  id v181 = (id)sub_1008FA0F0(v72, v73, &v180);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  sub_1007AFBFC(v65, type metadata accessor for WildModeAssociationRecord);
  _os_log_impl((void *)&_mh_execute_header, v67, v68, "%s Advertisement type: %{public}s", (uint8_t *)v69, 0x16u);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  uint64_t v50 = v169;
  int v66 = v179;
LABEL_21:
  sub_10029416C(v64);
  uint64_t v74 = v166;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v63 + 48))(v64, 1, v166) != 1)
  {
    uint64_t v82 = *(void (**)(unint64_t, char *, uint64_t))(v63 + 32);
    uint64_t v162 = (char *)(v63 + 32);
    uint64_t v138 = v82;
    v82((unint64_t)v165, (char *)v64, v74);
    LODWORD(v137) = *(unsigned __int8 *)(v50 + *(int *)(v164 + 52));
    uint64_t v163 = (char *)swift_allocBox();
    sub_1007AFB78(v50, v83, type metadata accessor for WildModeAssociationRecord);
    id v84 = [v66 trackingIdentifier];
    unsigned __int8 v85 = [v84 isPosh];

    if (v85)
    {
      id v86 = [v66 trackingIdentifier];
      unsigned int v87 = [v86 networkID];

      int v88 = 2 * (v87 == 2);
      if (v87 == 1) {
        int v88 = 1;
      }
    }
    else
    {
      int v88 = 3;
    }
    LODWORD(v161) = v88;
    uint64_t v89 = type metadata accessor for SharedBeaconRecord(0);
    uint64_t v90 = (uint64_t)v136;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v89 - 8) + 56))(v136, 1, 1, v89);
    LODWORD(v129) = *(unsigned char *)(v50 + *(int *)(v164 + 84)) & 1;
    uint64_t v91 = v174;
    uint64_t v92 = v132;
    (*(void (**)(char *, char *, uint64_t))(v174 + 16))(v132, v165, v74);
    uint64_t v93 = v135;
    sub_10001D074(v90, v135, (uint64_t *)&unk_101653D50);
    unint64_t v94 = (*(unsigned __int8 *)(v91 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v91 + 80);
    uint64_t v95 = v94 + v131;
    unint64_t v96 = (*(unsigned __int8 *)(v133 + 80) + v94 + v131 + 1) & ~(unint64_t)*(unsigned __int8 *)(v133 + 80);
    uint64_t v97 = v96 + v134;
    uint64_t v98 = swift_allocObject();
    uint64_t v99 = v178;
    *(void *)(v98 + 16) = v178;
    v138(v98 + v94, v92, v74);
    *(unsigned char *)(v98 + v95) = (_BYTE)v137;
    sub_1007AF8D8(v93, v98 + v96);
    *(unsigned char *)(v98 + v97) = (_BYTE)v129;
    sub_10000588C(&qword_1016417D8);
    swift_allocObject();
    swift_retain();
    uint64_t v180 = Future.init(_:)();
    uint64_t v137 = (void (*)(uint64_t, void *))&protocol conformance descriptor for Future<A, B>;
    sub_100062734((unint64_t *)&unk_10166C130, &qword_1016417D8);
    uint64_t v100 = Publisher.eraseToAnyPublisher()();
    uint64_t v162 = (char *)v100;
    swift_release();
    sub_10001DAB4(v90, (uint64_t *)&unk_101653D50);
    uint64_t v180 = v100;
    uint64_t v102 = v99;
    id v181 = *(id *)(v99 + 24);
    id v101 = v181;
    uint64_t v103 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
    uint64_t v104 = (uint64_t)v139;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v103 - 8) + 56))(v139, 1, 1, v103);
    uint64_t v138 = (void (*)(unint64_t, char *, uint64_t))v101;
    sub_10000588C(&qword_10164D6D0);
    sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
    sub_100062734((unint64_t *)&unk_10166C140, &qword_10164D6D0);
    sub_10033149C((unint64_t *)&qword_10166C020, (unint64_t *)&qword_1016376E0);
    uint64_t v105 = v140;
    Publisher.receive<A>(on:options:)();
    sub_10001DAB4(v104, &qword_10163C6C8);

    uint64_t v106 = swift_allocObject();
    *(void *)(v106 + 16) = v163;
    *(void *)(v106 + 24) = v102;
    *(unsigned char *)(v106 + 32) = v161;
    swift_retain();
    swift_retain();
    static Subscribers.Demand.unlimited.getter();
    sub_10000588C(&qword_10164D6D8);
    sub_10000588C((uint64_t *)&unk_10166C030);
    sub_100062734(&qword_10164D6E0, &qword_10164D688);
    sub_100062734(&qword_10164D6E8, (uint64_t *)&unk_10166C030);
    uint64_t v107 = v141;
    uint64_t v108 = v143;
    Publisher.flatMap<A, B>(maxPublishers:_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v142 + 8))(v105, v108);
    sub_100062734(&qword_10164D6F0, &qword_10164D690);
    uint64_t v109 = v145;
    uint64_t v62 = v178;
    uint64_t v110 = v146;
    Publisher.timeout(_:queue:customError:)();
    uint64_t v111 = v107;
    uint64_t v57 = v169;
    (*(void (**)(char *, uint64_t))(v144 + 8))(v111, v110);
    sub_10000588C(&qword_101641650);
    sub_100062734(&qword_10164D6F8, &qword_10164D698);
    uint64_t v112 = v149;
    uint64_t v113 = v148;
    Publisher.map<A>(_:)();
    (*(void (**)(char *, uint64_t))(v147 + 8))(v109, v113);
    sub_10000588C(&qword_10164D700);
    sub_100062734(&qword_10164D708, &qword_10164D6A0);
    sub_100062734(&qword_10164D710, &qword_10164D700);
    unsigned int v114 = v152;
    uint64_t v115 = v151;
    Publisher.catch<A>(_:)();
    (*(void (**)(char *, uint64_t))(v150 + 8))(v112, v115);
    sub_100062734(&qword_10164D718, &qword_10164D6A8);
    swift_retain();
    uint64_t v116 = v153;
    uint64_t v117 = v157;
    Publisher.map<A>(_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v155 + 8))(v114, v117);
    sub_100062734(&qword_10164D720, &qword_10164D6B0);
    uint64_t v118 = v154;
    uint64_t v119 = v158;
    Publisher.replaceError(with:)();
    (*(void (**)(char *, uint64_t))(v156 + 8))(v116, v119);
    sub_100062734(&qword_10164D728, &qword_10164D6B8);
    uint64_t v120 = v160;
    uint64_t v59 = Publisher.eraseToAnyPublisher()();
    swift_release();
    (*(void (**)(char *, uint64_t))(v159 + 8))(v118, v120);
    (*(void (**)(char *, uint64_t))(v174 + 8))(v165, v166);
    swift_release();
    uint64_t v61 = v179;
    uint64_t v60 = (uint64_t)v130;
    goto LABEL_30;
  }
  sub_10001DAB4(v64, (uint64_t *)&unk_1016477E0);
  id v75 = Logger.logObject.getter();
  os_log_type_t v76 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v75, v76))
  {
    uint64_t v77 = (uint8_t *)swift_slowAlloc();
    uint64_t v180 = swift_slowAlloc();
    *(_DWORD *)uint64_t v77 = 136315138;
    id v181 = (id)sub_1008FA0F0(0xD000000000000068, 0x80000001014071E0, &v180);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v75, v76, "%s unexpected advertisement type!", v77, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  unsigned __int8 v78 = v129;
  sub_1007AF880();
  unint64_t v79 = swift_allocError();
  *uint64_t v80 = 1;
  swift_retain();
  swift_retain();
  id v81 = v78;
  sub_100781FF0(v81, v79, v137);
  swift_release();

  swift_release();
  swift_errorRelease();
  swift_release();
  swift_release();
  return swift_release();
}

void sub_1007A3C94(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8, void (*a9)(uint64_t, void *), uint64_t a10, void (*a11)(uint64_t, id, uint64_t, uint64_t, uint64_t, uint64_t, void *, uint64_t, id, void (*)(uint64_t, void *), uint64_t))
{
  uint64_t v73 = a6;
  uint64_t v72 = a5;
  uint64_t v71 = a4;
  id v79 = a3;
  uint64_t v83 = a2;
  id v81 = a9;
  uint64_t v84 = type metadata accessor for WildModeTrackingLocation(0);
  uint64_t v14 = *(void *)(v84 - 8);
  __chkstk_darwin(v84);
  uint64_t v16 = &v67[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v76 = type metadata accessor for MACAddress();
  uint64_t v75 = *(void *)(v76 - 8);
  __chkstk_darwin(v76);
  uint64_t v77 = &v67[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v18 = sub_10000588C(&qword_1016511E0);
  __chkstk_darwin(v18 - 8);
  uint64_t v20 = &v67[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v21 = type metadata accessor for WildModeAssociationRecord(0);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v74 = &v67[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  __chkstk_darwin(v23);
  uint64_t v26 = &v67[-v25];
  uint64_t v82 = a10;
  swift_retain_n();
  id v80 = a8;
  uint64_t v78 = a1;
  uint64_t v27 = v83;
  uint64_t v83 = a7;
  sub_100790EA0(a1, v27, (uint64_t)v20);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v22 + 48))(v20, 1, v21) != 1)
  {
    sub_1007B136C((uint64_t)v20, (uint64_t)v26, type metadata accessor for WildModeAssociationRecord);
    uint64_t v32 = (uint64_t)v26;
    if (qword_101636CB0 != -1) {
      swift_once();
    }
    uint64_t v33 = type metadata accessor for Logger();
    sub_100010324(v33, (uint64_t)qword_10164D4D0);
    uint64_t v34 = v74;
    sub_1007AFB78((uint64_t)v26, (uint64_t)v74, type metadata accessor for WildModeAssociationRecord);
    uint64_t v35 = v75;
    uint64_t v36 = v77;
    uint64_t v37 = v76;
    (*(void (**)(unsigned char *, uint64_t, uint64_t))(v75 + 16))(v77, v78, v76);
    uint64_t v38 = Logger.logObject.getter();
    os_log_type_t v39 = static os_log_type_t.default.getter();
    int v40 = v39;
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v41 = swift_slowAlloc();
      uint64_t v70 = swift_slowAlloc();
      v86[0] = v70;
      *(_DWORD *)uint64_t v41 = 136315394;
      type metadata accessor for UUID();
      os_log_t v69 = v38;
      sub_100796E74((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
      int v68 = v40;
      uint64_t v42 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v85 = sub_1008FA0F0(v42, v43, v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      sub_1007AFBFC((uint64_t)v34, type metadata accessor for WildModeAssociationRecord);
      *(_WORD *)(v41 + 12) = 2080;
      sub_100796E74((unint64_t *)&qword_101649EE0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
      uint64_t v44 = v32;
      uint64_t v45 = v77;
      uint64_t v46 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v85 = sub_1008FA0F0(v46, v47, v86);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      id v48 = v45;
      uint64_t v32 = v44;
      (*(void (**)(unsigned char *, uint64_t))(v35 + 8))(v48, v37);
      uint64_t v38 = v69;
      _os_log_impl((void *)&_mh_execute_header, v69, (os_log_type_t)v68, "update: found UT record UUID %s address %s.", (uint8_t *)v41, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      sub_1007AFBFC((uint64_t)v34, type metadata accessor for WildModeAssociationRecord);
      (*(void (**)(unsigned char *, uint64_t))(v35 + 8))(v36, v37);
    }

    id v49 = [v79 observedLocations];
    sub_10001D4B0(0, &qword_101656690);
    unint64_t v50 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v50 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v51 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v51) {
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v51 = *(void *)((v50 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (v51)
      {
LABEL_12:
        v86[0] = (uint64_t)_swiftEmptyArrayStorage;
        sub_1000B7CEC(0, v51 & ~(v51 >> 63), 0);
        if (v51 < 0)
        {
          __break(1u);
          return;
        }
        uint64_t v77 = (unsigned char *)v32;
        uint64_t v52 = 0;
        os_log_type_t v53 = (void *)v86[0];
        do
        {
          if ((v50 & 0xC000000000000001) != 0) {
            id v54 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
          }
          else {
            id v54 = *(id *)(v50 + 8 * v52 + 32);
          }
          uint64_t v55 = v54;
          [v54 latitude];
          uint64_t v57 = v56;
          [v55 longitude];
          uint64_t v59 = v58;
          [v55 horizontalAccuracy];
          uint64_t v61 = v60;
          id v62 = [v55 timestamp];
          static Date._unconditionallyBridgeFromObjectiveC(_:)();

          *uint64_t v16 = v57;
          v16[1] = v59;
          void v16[2] = v61;
          v86[0] = (uint64_t)v53;
          unint64_t v64 = v53[2];
          unint64_t v63 = v53[3];
          if (v64 >= v63 >> 1)
          {
            sub_1000B7CEC(v63 > 1, v64 + 1, 1);
            os_log_type_t v53 = (void *)v86[0];
          }
          ++v52;
          void v53[2] = v64 + 1;
          sub_1007B136C((uint64_t)v16, (uint64_t)v53+ ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80))+ *(void *)(v14 + 72) * v64, type metadata accessor for WildModeTrackingLocation);
        }
        while (v51 != v52);
        swift_bridgeObjectRelease();
        uint64_t v32 = (uint64_t)v77;
LABEL_23:
        uint64_t v65 = v82;
        swift_retain();
        id v66 = v80;
        a11(v32, v79, v78, v71, v72, v73, v53, v83, v66, v81, v65);
        swift_bridgeObjectRelease();

        swift_release();
        sub_1007AFBFC(v32, type metadata accessor for WildModeAssociationRecord);
        swift_release_n();

        return;
      }
    }
    swift_bridgeObjectRelease();
    os_log_type_t v53 = _swiftEmptyArrayStorage;
    goto LABEL_23;
  }
  sub_10001DAB4((uint64_t)v20, &qword_1016511E0);
  static os_log_type_t.error.getter();
  if (qword_1016372F0 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  type metadata accessor for TrackingAvoidanceError(0);
  uint64_t v85 = 3;
  sub_10000588C((uint64_t *)&unk_101637F00);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_101342130;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v29;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 48) = 0xD000000000000027;
  *(void *)(inited + 56) = 0x80000001014071B0;
  sub_10092CEEC(inited);
  sub_100796E74(&qword_101638410, type metadata accessor for TrackingAvoidanceError);
  _BridgedStoredNSError.init(_:userInfo:)();
  uint64_t v30 = (void *)v86[0];
  swift_retain();
  uint64_t v31 = v80;
  sub_100781FF0(v80, (unint64_t)v30, v81);

  swift_release_n();
}

uint64_t sub_1007A46B4(uint64_t a1, unint64_t a2, void *a3, void (*a4)(uint64_t, void *), uint64_t a5, uint64_t a6, void (*a7)(uint64_t, id, uint64_t, uint64_t, uint64_t, uint64_t, void *, uint64_t, id, void (*)(uint64_t, void *), uint64_t))
{
  uint64_t v291 = a6;
  uint64_t v292 = a7;
  uint64_t v303 = a4;
  *(void *)&long long v307 = a1;
  uint64_t v10 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v10 - 8);
  v293 = (char *)&v273 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_10000588C((uint64_t *)&unk_101653D50);
  __chkstk_darwin(v12 - 8);
  uint64_t v282 = (uint64_t)&v273 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v283 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v281 = *(void *)(v283 - 8);
  uint64_t v14 = __chkstk_darwin(v283);
  uint64_t v277 = (uint64_t)&v273 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v279 = (uint64_t)&v273 - v17;
  __chkstk_darwin(v16);
  uint64_t v280 = (uint64_t)&v273 - v18;
  uint64_t v19 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v19 - 8);
  uint64_t v286 = (uint64_t)&v273 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = sub_10000588C(&qword_101657910);
  __chkstk_darwin(v21 - 8);
  uint64_t v290 = (uint64_t)&v273 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  uint64_t v288 = *(void *)(v23 - 8);
  uint64_t v289 = v23;
  __chkstk_darwin(v23);
  uint64_t v287 = (uint64_t)&v273 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = sub_10000588C((uint64_t *)&unk_1016477E0);
  uint64_t v26 = __chkstk_darwin(v25 - 8);
  unint64_t v276 = (char *)&v273 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __chkstk_darwin(v26);
  long long v284 = (char *)&v273 - v29;
  __chkstk_darwin(v28);
  uint64_t v299 = (uint8_t *)&v273 - v30;
  uint64_t v31 = type metadata accessor for MACAddress();
  uint64_t v295 = *(void *)(v31 - 8);
  uint64_t v296 = v31;
  uint64_t v32 = __chkstk_darwin(v31);
  os_log_t v300 = (os_log_t)((char *)&v273 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v278 = (uint64_t)&v273 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v285 = (char *)&v273 - v37;
  __chkstk_darwin(v36);
  uint64_t v294 = (uint64_t)&v273 - v38;
  uint64_t v39 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v39 - 8);
  uint64_t v41 = (uint64_t)&v273 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v42 = type metadata accessor for Date();
  *&long long v306 = v42[-1];
  uint64_t v43 = __chkstk_darwin(v42);
  *(void *)&long long v301 = (char *)&v273 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v43);
  uint64_t v302 = (char *)&v273 - v45;
  uint64_t v305 = a5;
  swift_retain_n();
  id v304 = a3;
  static os_log_type_t.default.getter();
  if (qword_101637278 != -1) {
    goto LABEL_124;
  }
LABEL_2:
  uint64_t v298 = sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v46 = swift_allocObject();
  *(_OWORD *)(v46 + 16) = xmmword_101347BA0;
  v308[0] = *(void *)a2;
  sub_10000588C(&qword_10164D678);
  uint64_t v47 = String.init<A>(describing:)();
  uint64_t v49 = v48;
  uint64_t v50 = a2;
  *(void *)(v46 + 56) = &type metadata for String;
  unint64_t v51 = sub_10000B4CC();
  *(void *)(v46 + 32) = v47;
  *(void *)(v46 + 40) = v49;
  *(void *)(v46 + 96) = &type metadata for String;
  *(void *)(v46 + 104) = v51;
  unint64_t v52 = v51;
  *(void *)(v46 + 64) = v51;
  *(void *)(v46 + 72) = 0xD000000000000039;
  *(void *)(v46 + 80) = 0x8000000101406EC0;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  os_log_type_t v53 = (void *)v307;
  id v54 = [(id)v307 trackingIdentifier];
  uint64_t v297 = v50;
  sub_100780834(v54, v41);

  uint64_t v55 = v306;
  uint64_t v56 = v53;
  if ((*(unsigned int (**)(uint64_t, uint64_t, NSObject *))(v306 + 48))(v41, 1, v42) == 1)
  {
    sub_10001DAB4(v41, (uint64_t *)&unk_10163AC90);
  }
  else
  {
    uint64_t v57 = v55;
    uint64_t v58 = v302;
    (*(void (**)(char *, uint64_t, NSObject *))(v55 + 32))(v302, v41, v42);
    uint64_t v59 = (char *)v301;
    static Date.trustedNow.getter(v301);
    char v60 = static Date.> infix(_:_:)();
    unint64_t v63 = *(void (**)(char *, os_log_t))(v57 + 8);
    uint64_t v61 = v57 + 8;
    id v62 = v63;
    v63(v59, v42);
    if (v60)
    {
      *(void *)&long long v306 = v61;
      os_log_t v300 = v42;
      uint64_t v64 = swift_allocObject();
      long long v301 = xmmword_101342130;
      *(_OWORD *)(v64 + 16) = xmmword_101342130;
      id v65 = [v56 trackingIdentifier];
      id v66 = [v65 advertisementData];

      uint64_t v67 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v69 = v68;

      uint64_t v70 = Data.hexString.getter();
      uint64_t v72 = v71;
      sub_10001CFB8(v67, v69);
      *(void *)(v64 + 56) = &type metadata for String;
      *(void *)(v64 + 64) = v52;
      *(void *)(v64 + 32) = v70;
      *(void *)(v64 + 40) = v72;
      uint64_t v73 = String.init(format:_:)();
      uint64_t v75 = v74;
      static os_log_type_t.default.getter();
      if (qword_1016372F0 != -1) {
        swift_once();
      }
      uint64_t v76 = swift_allocObject();
      *(_OWORD *)(v76 + 16) = v301;
      *(void *)(v76 + 56) = &type metadata for String;
      *(void *)(v76 + 64) = v52;
      *(void *)(v76 + 32) = v73;
      *(void *)(v76 + 40) = v75;
      swift_bridgeObjectRetain();
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      type metadata accessor for TrackingAvoidanceError(0);
      uint64_t v309 = 7;
      sub_10000588C((uint64_t *)&unk_101637F00);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = v301;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(inited + 40) = v78;
      *(void *)(inited + 72) = &type metadata for String;
      *(void *)(inited + 48) = v73;
      *(void *)(inited + 56) = v75;
      sub_10092CEEC(inited);
      sub_100796E74(&qword_101638410, type metadata accessor for TrackingAvoidanceError);
      _BridgedStoredNSError.init(_:userInfo:)();
      id v79 = (void *)v308[0];
      swift_retain();
      id v80 = v304;
      sub_100781FF0(v304, (unint64_t)v79, v303);

      swift_release();
      v62(v302, v300);
      swift_release_n();

      return swift_release_n();
    }
    v62(v58, v42);
  }
  id v81 = [v56 observedLocations];
  sub_10001D4B0(0, &qword_101656690);
  unint64_t v82 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v82 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v83 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v83 = *(void *)((v82 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (!v83)
  {
    static os_log_type_t.error.getter();
    if (qword_1016372F0 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    type metadata accessor for TrackingAvoidanceError(0);
    uint64_t v309 = 4;
    sub_10000588C((uint64_t *)&unk_101637F00);
    uint64_t v88 = swift_initStackObject();
    *(_OWORD *)(v88 + 16) = xmmword_101342130;
    *(void *)(v88 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(v88 + 40) = v92;
    *(void *)(v88 + 72) = &type metadata for String;
    unint64_t v90 = 0xD000000000000027;
    uint64_t v91 = "location was not present in the request";
    goto LABEL_24;
  }
  unint64_t v274 = v52;
  id v84 = [v56 observedLocations];
  a2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (a2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v42 = _CocoaArrayWrapper.endIndex.getter();
    if (!v42) {
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v42 = *(NSObject **)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v42) {
      goto LABEL_26;
    }
  }
  *(void *)&long long v306 = a2 & 0xC000000000000001;
  if ((a2 & 0xC000000000000001) != 0) {
    id v85 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v85 = *(id *)(a2 + 32);
  }
  id v86 = v85;
  char v87 = sub_100FC042C();

  if (v87)
  {
LABEL_17:
    swift_bridgeObjectRelease_n();
    goto LABEL_18;
  }
  if (v42 == 1)
  {
LABEL_26:
    swift_bridgeObjectRelease_n();
    uint64_t v95 = (void *)v307;
    id v96 = [(id)v307 trackingIdentifier];
    id v97 = [v96 data];

    uint64_t v98 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v100 = v99;

    if (qword_101636CB0 != -1) {
      swift_once();
    }
    uint64_t v101 = type metadata accessor for Logger();
    uint64_t v102 = sub_100010324(v101, (uint64_t)qword_10164D4D0);
    sub_1000361E0(v98, v100);
    sub_1000361E0(v98, v100);
    *(void *)&long long v306 = v102;
    uint64_t v103 = Logger.logObject.getter();
    os_log_type_t v104 = static os_log_type_t.default.getter();
    BOOL v105 = os_log_type_enabled(v103, v104);
    uint64_t v302 = (char *)(v100 >> 62);
    if (v105)
    {
      uint64_t v106 = swift_slowAlloc();
      v308[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v106 = 134218242;
      uint64_t v107 = 0;
      switch(v100 >> 62)
      {
        case 1uLL:
          LODWORD(v107) = HIDWORD(v98) - v98;
          if (__OFSUB__(HIDWORD(v98), v98))
          {
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            swift_once();
LABEL_109:
            os_log(_:dso:log:_:_:)();
            uint64_t v225 = swift_allocObject();
            long long v307 = xmmword_101342130;
            *(_OWORD *)(v225 + 16) = xmmword_101342130;
            id v226 = [v95 trackingIdentifier];
            id v227 = [v226 advertisementData];

            uint64_t v228 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v230 = v229;

            uint64_t v231 = Data.hexString.getter();
            uint64_t v233 = v232;
            sub_10001CFB8(v228, v230);
            unint64_t v234 = v274;
            *(void *)(v225 + 56) = &type metadata for String;
            *(void *)(v225 + 64) = v234;
            *(void *)(v225 + 32) = v231;
            *(void *)(v225 + 40) = v233;
            uint64_t v235 = String.init(format:_:)();
            uint64_t v237 = v236;
            type metadata accessor for TrackingAvoidanceError(0);
            uint64_t v309 = 8;
            sub_10000588C((uint64_t *)&unk_101637F00);
            uint64_t v238 = swift_initStackObject();
            *(_OWORD *)(v238 + 16) = v307;
            *(void *)(v238 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
            *(void *)(v238 + 40) = v239;
            *(void *)(v238 + 72) = &type metadata for String;
            *(void *)(v238 + 48) = v235;
            *(void *)(v238 + 56) = v237;
            sub_10092CEEC(v238);
            sub_100796E74(&qword_101638410, type metadata accessor for TrackingAvoidanceError);
            _BridgedStoredNSError.init(_:userInfo:)();
            uint64_t v240 = (void *)v308[0];
            swift_retain();
            uint64_t v219 = v304;
            sub_100781FF0(v304, (unint64_t)v240, v303);

            swift_release();
            sub_10001CFB8(v98, v100);
            sub_10001CFB8(v98, v100);
            sub_10001CFB8(v98, v100);
            goto LABEL_110;
          }
          uint64_t v107 = (int)v107;
LABEL_52:
          uint64_t v309 = v107;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v106 + 12) = 2082;
          uint64_t v129 = Data.hexString.getter();
          uint64_t v309 = sub_1008FA0F0(v129, v130, v308);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10001CFB8(v98, v100);
          sub_10001CFB8(v98, v100);
          _os_log_impl((void *)&_mh_execute_header, v103, v104, "Decoding advertisement from advertisementData[%ld]: %{public}s", (uint8_t *)v106, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          uint64_t v95 = (void *)v307;
          break;
        case 2uLL:
          uint64_t v127 = *(void *)(v98 + 16);
          uint64_t v126 = *(void *)(v98 + 24);
          BOOL v128 = __OFSUB__(v126, v127);
          uint64_t v107 = v126 - v127;
          if (!v128) {
            goto LABEL_52;
          }
          goto LABEL_130;
        case 3uLL:
          goto LABEL_52;
        default:
          uint64_t v107 = BYTE6(v100);
          goto LABEL_52;
      }
    }
    else
    {
      sub_10001CFB8(v98, v100);
      sub_10001CFB8(v98, v100);
    }
    id v131 = [v95 trackingIdentifier];
    unsigned int v132 = [v131 isPosh];

    id v133 = [v95 trackingIdentifier];
    unsigned int v134 = [v133 networkID];

    id v135 = [v95 trackingIdentifier];
    unsigned int v136 = [v135 status];

    if (v134 == 1) {
      char v137 = 5;
    }
    else {
      char v137 = 6;
    }
    if (v132) {
      LOBYTE(v138) = v137;
    }
    else {
      int v138 = (v136 >> 4) & 3;
    }
    uint64_t v139 = Logger.logObject.getter();
    os_log_type_t v140 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v139, v140))
    {
      *(void *)&long long v301 = v98;
      uint64_t v141 = (uint8_t *)swift_slowAlloc();
      v308[0] = swift_slowAlloc();
      *(_DWORD *)uint64_t v141 = 136446210;
      uint64_t v142 = sub_10078155C(v138);
      uint64_t v309 = sub_1008FA0F0(v142, v143, v308);
      uint64_t v98 = v301;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v139, v140, "UnauthorizedTrackingAdvertisementType: %{public}s", v141, 0xCu);
      swift_arrayDestroy();
      uint64_t v95 = (void *)v307;
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t v145 = v299;
    os_log_t v144 = v300;
    switch(v138)
    {
      case 4u:
        uint64_t v147 = v95;
        uint64_t v148 = Logger.logObject.getter();
        os_log_type_t v149 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v148, v149))
        {
          uint64_t v150 = swift_slowAlloc();
          *(_DWORD *)uint64_t v150 = 67109632;
          id v151 = [v147 trackingIdentifier];
          unsigned int v152 = [v151 isPosh];

          LODWORD(v308[0]) = v152;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          *(void *)&long long v301 = v98;
          *(_WORD *)(v150 + 8) = 256;
          id v153 = [v147 trackingIdentifier];
          unsigned __int8 v154 = [v153 networkID];

          LOBYTE(v308[0]) = v154;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          *(_WORD *)(v150 + 11) = 256;
          id v155 = [v147 trackingIdentifier];
          unsigned __int8 v156 = [v155 status];

          LOBYTE(v308[0]) = v156;
          uint64_t v98 = v301;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          _os_log_impl((void *)&_mh_execute_header, v148, v149, "Unknown advertisement type. isPosh: %{BOOL}d networkID: %hhu status: %hhu", (uint8_t *)v150, 0xEu);
          swift_slowDealloc();
        }
        else
        {

          uint64_t v148 = v147;
        }

        type metadata accessor for TrackingAvoidanceError(0);
        uint64_t v309 = 6;
        sub_10000588C((uint64_t *)&unk_101637F00);
        uint64_t v170 = swift_initStackObject();
        *(_OWORD *)(v170 + 16) = xmmword_101342130;
        *(void *)(v170 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
        *(void *)(v170 + 40) = v171;
        *(void *)(v170 + 72) = &type metadata for String;
        uint64_t v172 = "Unknown advertisement type";
        goto LABEL_99;
      case 6u:
        id v157 = [v95 trackingIdentifier];
        id v158 = [v157 address];

        uint64_t v159 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v161 = v160;

        sub_1000361E0(v159, v161);
        MACAddress.init(data:type:)();
        uint64_t v162 = v295;
        uint64_t v163 = v296;
        if ((*(unsigned int (**)(uint8_t *, uint64_t, uint64_t))(v295 + 48))(v145, 1, v296) == 1)
        {
          sub_10001DAB4((uint64_t)v145, (uint64_t *)&unk_1016477E0);
          sub_1000361E0(v159, v161);
          sub_1000361E0(v159, v161);
          uint64_t v164 = Logger.logObject.getter();
          os_log_type_t v165 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v164, v165))
          {
            *(void *)&long long v301 = v98;
            uint64_t v166 = (uint8_t *)swift_slowAlloc();
            *(void *)&long long v307 = swift_slowAlloc();
            v308[0] = v307;
            *(_DWORD *)uint64_t v166 = 136446210;
            uint64_t v167 = Data.hexString.getter();
            uint64_t v309 = sub_1008FA0F0(v167, v168, v308);
            uint64_t v98 = v301;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            sub_10001CFB8(v159, v161);
            sub_10001CFB8(v159, v161);
            _os_log_impl((void *)&_mh_execute_header, v164, v165, "Invalid MAC address %{public}s", v166, 0xCu);
            swift_arrayDestroy();
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            sub_10001CFB8(v159, v161);
            sub_10001CFB8(v159, v161);
          }

          type metadata accessor for TrackingAvoidanceError(0);
          uint64_t v309 = 3;
          sub_10000588C((uint64_t *)&unk_101637F00);
          uint64_t v190 = swift_initStackObject();
          *(_OWORD *)(v190 + 16) = xmmword_101342130;
          *(void *)(v190 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
          *(void *)(v190 + 40) = v191;
          *(void *)(v190 + 72) = &type metadata for String;
          *(void *)(v190 + 48) = 0xD00000000000001FLL;
          *(void *)(v190 + 56) = 0x8000000101406F20;
          sub_10092CEEC(v190);
          sub_100796E74(&qword_101638410, type metadata accessor for TrackingAvoidanceError);
          _BridgedStoredNSError.init(_:userInfo:)();
          uint64_t v192 = (void *)v308[0];
          swift_retain();
          uint64_t v193 = v304;
          sub_100781FF0(v304, (unint64_t)v192, v303);
          swift_release();
          sub_10001CFB8(v98, v100);
          uint64_t v194 = v159;
          unint64_t v195 = v161;
          goto LABEL_100;
        }
        uint64_t v302 = (char *)v100;
        uint64_t v173 = v294;
        (*(void (**)(uint64_t, uint8_t *, uint64_t))(v162 + 32))(v294, v145, v163);
        (*(void (**)(os_log_t, uint64_t, uint64_t))(v162 + 16))(v144, v173, v163);
        uint64_t v174 = v162;
        uint64_t v175 = Logger.logObject.getter();
        os_log_type_t v176 = static os_log_type_t.default.getter();
        os_log_t v177 = v144;
        if (os_log_type_enabled(v175, v176))
        {
          os_log_t v300 = v175;
          uint64_t v178 = (uint8_t *)swift_slowAlloc();
          uint64_t v179 = swift_slowAlloc();
          *(void *)&long long v301 = v98;
          v308[0] = v179;
          uint64_t v299 = v178;
          *(_DWORD *)uint64_t v178 = 136446210;
          *(void *)&long long v306 = v178 + 4;
          sub_100796E74((unint64_t *)&qword_101649EE0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
          uint64_t v180 = dispatch thunk of CustomStringConvertible.description.getter();
          uint64_t v309 = sub_1008FA0F0(v180, v181, v308);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          *(void *)&long long v306 = *(void *)(v174 + 8);
          ((void (*)(os_log_t, uint64_t))v306)(v177, v163);
          uint64_t v182 = v163;
          os_log_t v183 = v300;
          _os_log_impl((void *)&_mh_execute_header, v300, v176, "Posh address: %{public}s", v299, 0xCu);
          swift_arrayDestroy();
          uint64_t v98 = v301;
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          *(void *)&long long v306 = *(void *)(v174 + 8);
          ((void (*)(os_log_t, uint64_t))v306)(v144, v163);

          uint64_t v182 = v163;
        }
        uint64_t v221 = type metadata accessor for UUID();
        uint64_t v222 = (uint64_t)v293;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v221 - 8) + 56))(v293, 1, 1, v221);
        uint64_t v223 = v305;
        swift_retain();
        id v208 = v304;
        uint64_t v224 = v294;
        sub_1007A3C94(v294, v222, (void *)v307, 0, 0, 0, v297, v208, v303, v223, v292);

        swift_release();
        sub_10001CFB8(v159, v161);
        sub_10001CFB8(v98, (unint64_t)v302);
        sub_10001DAB4(v222, &qword_101638CF0);
        ((void (*)(uint64_t, uint64_t))v306)(v224, v182);
LABEL_107:
        swift_release_n();

        return swift_release_n();
      case 5u:
        switch((int)v302)
        {
          case 1:
            if (__OFSUB__(HIDWORD(v98), v98)) {
              goto LABEL_131;
            }
            uint64_t v146 = HIDWORD(v98) - (int)v98;
LABEL_81:
            sub_1000361E0(v98, v100);
LABEL_82:
            if (v146 == 28) {
              goto LABEL_93;
            }
LABEL_83:
            sub_10001CFB8(v98, v100);
            uint64_t v187 = Logger.logObject.getter();
            os_log_type_t v188 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v187, v188))
            {
              uint64_t v189 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)uint64_t v189 = 0;
              _os_log_impl((void *)&_mh_execute_header, v187, v188, "received an advertisement of unexpected length or format", v189, 2u);
              swift_slowDealloc();
            }
            break;
          case 2:
            uint64_t v186 = *(void *)(v98 + 16);
            uint64_t v185 = *(void *)(v98 + 24);
            uint64_t v146 = v185 - v186;
            if (!__OFSUB__(v185, v186)) {
              goto LABEL_81;
            }
            goto LABEL_132;
          case 3:
            goto LABEL_83;
          default:
            uint64_t v146 = BYTE6(v100);
            goto LABEL_82;
        }
LABEL_98:

        type metadata accessor for TrackingAvoidanceError(0);
        uint64_t v309 = 3;
        sub_10000588C((uint64_t *)&unk_101637F00);
        uint64_t v170 = swift_initStackObject();
        *(_OWORD *)(v170 + 16) = xmmword_101342130;
        *(void *)(v170 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
        *(void *)(v170 + 40) = v211;
        *(void *)(v170 + 72) = &type metadata for String;
        uint64_t v172 = "Advertisement is malformed";
LABEL_99:
        *(void *)(v170 + 48) = 0xD00000000000001ALL;
        *(void *)(v170 + 56) = (unint64_t)(v172 - 32) | 0x8000000000000000;
        sub_10092CEEC(v170);
        sub_100796E74(&qword_101638410, type metadata accessor for TrackingAvoidanceError);
        _BridgedStoredNSError.init(_:userInfo:)();
        uint64_t v192 = (void *)v308[0];
        swift_retain();
        uint64_t v193 = v304;
        sub_100781FF0(v304, (unint64_t)v192, v303);
        swift_release();
        uint64_t v194 = v98;
        unint64_t v195 = v100;
LABEL_100:
        sub_10001CFB8(v194, v195);
        swift_release_n();

        return swift_release_n();
    }
    switch((int)v302)
    {
      case 1:
        if (__OFSUB__(HIDWORD(v98), v98)) {
          goto LABEL_133;
        }
        uint64_t v169 = HIDWORD(v98) - (int)v98;
LABEL_91:
        sub_1000361E0(v98, v100);
LABEL_92:
        if (v169 != 28)
        {
LABEL_96:
          sub_10001CFB8(v98, v100);
          uint64_t v187 = Logger.logObject.getter();
          os_log_type_t v209 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v187, v209))
          {
            uint64_t v210 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v210 = 0;
            _os_log_impl((void *)&_mh_execute_header, v187, v209, "received an advertisement of unexpected length or format", v210, 2u);
            swift_slowDealloc();
          }
          goto LABEL_98;
        }
LABEL_93:
        sub_1000361E0(v98, v100);
        type metadata accessor for BeaconKeyManager(0);
        OSAllocatedUnfairLock.callAsFunction<A>(_:)();
        uint64_t v198 = v290;
        sub_1012E41F8(v290);
        swift_release();
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v288 + 48))(v198, 1, v289) == 1)
        {
          sub_10001DAB4(v198, &qword_101657910);
          sub_1000361E0(v98, v100);
          uint64_t v199 = static MACAddress.length.getter();
          sub_100435A9C(v199, v98, v100, v308);
          id v200 = v284;
          MACAddress.init(data:type:)();
          uint64_t v202 = v295;
          uint64_t v201 = v296;
          int v203 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v295 + 48))(v200, 1, v296);
          uint64_t v204 = v305;
          if (v203 != 1)
          {
            uint64_t v205 = (uint64_t)v285;
            (*(void (**)(char *, char *, uint64_t))(v202 + 32))(v285, v200, v201);
            uint64_t v206 = type metadata accessor for UUID();
            uint64_t v207 = (uint64_t)v293;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v206 - 8) + 56))(v293, 1, 1, v206);
            swift_retain();
            id v208 = v304;
            sub_1007A3C94(v205, v207, v95, 0, 0, 0, v297, v208, v303, v204, v292);

            swift_release();
            sub_10001CFB8(v98, v100);
            sub_10001CFB8(v98, v100);
            sub_10001CFB8(v98, v100);
            sub_10001DAB4(v207, &qword_101638CF0);
            (*(void (**)(uint64_t, uint64_t))(v202 + 8))(v205, v201);
            goto LABEL_107;
          }
          swift_release_n();
          id v271 = v304;

          __break(1u);
LABEL_137:
          swift_release_n();
          uint64_t v272 = v304;

          __break(1u);
          JUMPOUT(0x1007A7274);
        }
        uint64_t v212 = v287;
        sub_1007B136C(v198, v287, type metadata accessor for BeaconKeyManager.IndexInformation);
        uint64_t v213 = v286;
        sub_100ACD178(v286);
        uint64_t v214 = type metadata accessor for OwnedBeaconRecord();
        int v215 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v214 - 8) + 48))(v213, 1, v214);
        sub_10001DAB4(v213, &qword_10163B9F0);
        if (v215 == 1)
        {
          uint64_t v216 = v282;
          sub_100ACEADC(v212, v282);
          uint64_t v217 = v283;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v281 + 48))(v216, 1, v283) == 1)
          {
            sub_10001DAB4(v216, (uint64_t *)&unk_101653D50);
LABEL_104:
            type metadata accessor for TrackingAvoidanceError(0);
            uint64_t v309 = 6;
            sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
            sub_100796E74(&qword_101638410, type metadata accessor for TrackingAvoidanceError);
            _BridgedStoredNSError.init(_:userInfo:)();
            uint64_t v218 = (void *)v308[0];
            swift_retain();
            uint64_t v219 = v304;
            sub_100781FF0(v304, (unint64_t)v218, v303);
            swift_release();
            sub_10001CFB8(v98, v100);

            sub_10001CFB8(v98, v100);
            sub_10001CFB8(v98, v100);
            uint64_t v220 = v212;
LABEL_111:
            sub_1007AFBFC(v220, type metadata accessor for BeaconKeyManager.IndexInformation);
            swift_release_n();

            return swift_release_n();
          }
          uint64_t v242 = v280;
          sub_1007B136C(v216, v280, type metadata accessor for SharedBeaconRecord);
          int v243 = *(unsigned __int8 *)(v242 + *(int *)(v217 + 64));
          uint64_t v244 = v279;
          sub_1007AFB78(v242, v279, type metadata accessor for SharedBeaconRecord);
          if (v243 == 1)
          {
            sub_1007AFBFC(v244, type metadata accessor for SharedBeaconRecord);
          }
          else
          {
            int v245 = *(unsigned __int8 *)(v244 + *(int *)(v217 + 64));
            sub_1007AFBFC(v244, type metadata accessor for SharedBeaconRecord);
            if (v245 != 4)
            {
              sub_1007AFBFC(v242, type metadata accessor for SharedBeaconRecord);
              goto LABEL_104;
            }
          }
          static os_log_type_t.default.getter();
          if (qword_1016372F0 != -1) {
            swift_once();
          }
          uint64_t v246 = swift_allocObject();
          long long v306 = xmmword_101342130;
          *(_OWORD *)(v246 + 16) = xmmword_101342130;
          sub_1007AFB78(v242, v277, type metadata accessor for SharedBeaconRecord);
          uint64_t v247 = String.init<A>(describing:)();
          unint64_t v248 = v274;
          *(void *)(v246 + 56) = &type metadata for String;
          *(void *)(v246 + 64) = v248;
          *(void *)(v246 + 32) = v247;
          *(void *)(v246 + 40) = v249;
          os_log(_:dso:log:_:_:)();
          swift_bridgeObjectRelease();
          uint64_t v250 = v242 + *(int *)(v217 + 20);
          if ((sub_100785054(v250) & 1) == 0)
          {
            sub_1000361E0(v98, v100);
            uint64_t v258 = static MACAddress.length.getter();
            sub_100435A9C(v258, v98, v100, v308);
            uint64_t v259 = v276;
            MACAddress.init(data:type:)();
            uint64_t v260 = v295;
            uint64_t v261 = v296;
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v295 + 48))(v259, 1, v296) != 1)
            {
              (*(void (**)(uint64_t, char *, uint64_t))(v260 + 32))(v278, v259, v261);
              uint64_t v262 = type metadata accessor for UUID();
              uint64_t v263 = *(void *)(v262 - 8);
              uint64_t v264 = (uint64_t)v293;
              (*(void (**)(char *, uint64_t, uint64_t))(v263 + 16))(v293, v250, v262);
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v263 + 56))(v264, 0, 1, v262);
              uint64_t v265 = (unsigned __int8 *)(v280 + *(int *)(v283 + 28));
              uint64_t v266 = *v265;
              uint64_t v267 = *((void *)v265 + 1);
              uint64_t v268 = *((void *)v265 + 2);
              uint64_t v269 = v305;
              swift_retain();
              id v208 = v304;
              swift_bridgeObjectRetain();
              uint64_t v270 = v278;
              sub_1007A3C94(v278, v264, (void *)v307, v266, v267, v268, v297, v208, v303, v269, v292);

              swift_release();
              sub_10001CFB8(v98, v100);
              swift_bridgeObjectRelease();
              sub_10001CFB8(v98, v100);
              sub_10001CFB8(v98, v100);
              sub_10001DAB4(v264, &qword_101638CF0);
              (*(void (**)(uint64_t, uint64_t))(v295 + 8))(v270, v296);
              sub_1007AFBFC(v280, type metadata accessor for SharedBeaconRecord);
              sub_1007AFBFC(v287, type metadata accessor for BeaconKeyManager.IndexInformation);
              goto LABEL_107;
            }
            goto LABEL_137;
          }
          uint64_t v251 = String.init(format:_:)();
          uint64_t v253 = v252;
          static os_log_type_t.default.getter();
          uint64_t v254 = swift_allocObject();
          *(_OWORD *)(v254 + 16) = v306;
          *(void *)(v254 + 56) = &type metadata for String;
          *(void *)(v254 + 64) = v248;
          *(void *)(v254 + 32) = v251;
          *(void *)(v254 + 40) = v253;
          swift_bridgeObjectRetain();
          os_log(_:dso:log:_:_:)();
          swift_bridgeObjectRelease();
          type metadata accessor for TrackingAvoidanceError(0);
          uint64_t v309 = 7;
          sub_10000588C((uint64_t *)&unk_101637F00);
          uint64_t v255 = swift_initStackObject();
          *(_OWORD *)(v255 + 16) = v306;
          *(void *)(v255 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
          *(void *)(v255 + 40) = v256;
          *(void *)(v255 + 72) = &type metadata for String;
          *(void *)(v255 + 48) = v251;
          *(void *)(v255 + 56) = v253;
          sub_10092CEEC(v255);
          sub_100796E74(&qword_101638410, type metadata accessor for TrackingAvoidanceError);
          _BridgedStoredNSError.init(_:userInfo:)();
          uint64_t v257 = (void *)v308[0];
          swift_retain();
          uint64_t v219 = v304;
          sub_100781FF0(v304, (unint64_t)v257, v303);
          swift_release();
          sub_10001CFB8(v98, v100);

          sub_10001CFB8(v98, v100);
          sub_10001CFB8(v98, v100);
          sub_1007AFBFC(v242, type metadata accessor for SharedBeaconRecord);
LABEL_110:
          uint64_t v220 = v287;
          goto LABEL_111;
        }
        static os_log_type_t.default.getter();
        if (qword_1016372F0 == -1) {
          goto LABEL_109;
        }
        goto LABEL_135;
      case 2:
        uint64_t v197 = *(void *)(v98 + 16);
        uint64_t v196 = *(void *)(v98 + 24);
        uint64_t v169 = v196 - v197;
        if (!__OFSUB__(v196, v197)) {
          goto LABEL_91;
        }
        goto LABEL_134;
      case 3:
        goto LABEL_96;
      default:
        uint64_t v169 = BYTE6(v100);
        goto LABEL_92;
    }
  }
  uint64_t v302 = (char *)self;
  uint64_t v41 = 5;
  *(void *)&long long v301 = 0xD000000000000013;
  unint64_t v275 = 0x8000000101407030;
  while (1)
  {
    if ((void)v306) {
      id v108 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v108 = *(id *)(a2 + 8 * v41);
    }
    uint64_t v109 = v108;
    uint64_t v110 = (v41 - 3);
    if (__OFADD__(v41 - 4, 1))
    {
      __break(1u);
LABEL_124:
      swift_once();
      goto LABEL_2;
    }
    id v111 = [v302 sharedInstance];
    unsigned int v112 = [v111 isInternalBuild];

    if (v112)
    {
      id v113 = [self standardUserDefaults];
      NSString v114 = String._bridgeToObjectiveC()();
      unsigned int v115 = [v113 BOOLForKey:v114];

      if (v115) {
        break;
      }
    }
    [v109 latitude];
    double v117 = v116;
    [v109 longitude];
    double v119 = v118;
    if (qword_101636A88 != -1) {
      swift_once();
    }
    if (objc_msgSend((id)qword_101642640, "containsCoordinate:", v117, v119))
    {
      uint64_t v120 = (void *)qword_101642648;
      if (qword_101642648)
      {
        id v121 = (id)qword_101642648;
      }
      else
      {
        int v122 = (void *)sub_10036D0D4();
        uint64_t v123 = (void *)qword_101642648;
        qword_101642648 = (uint64_t)v122;
        id v121 = v122;

        uint64_t v120 = 0;
      }
      id v124 = v120;
      unsigned int v125 = [v121 containsCoordinate:v117, v119];

      if (v125) {
        goto LABEL_17;
      }
    }
    else
    {
    }
    ++v41;
    if (v110 == v42) {
      goto LABEL_26;
    }
  }
  static os_log_type_t.default.getter();
  sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
  unint64_t v184 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease_n();

LABEL_18:
  static os_log_type_t.error.getter();
  if (qword_1016372F0 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  type metadata accessor for TrackingAvoidanceError(0);
  uint64_t v309 = 11;
  sub_10000588C((uint64_t *)&unk_101637F00);
  uint64_t v88 = swift_initStackObject();
  *(_OWORD *)(v88 + 16) = xmmword_101342130;
  *(void *)(v88 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v88 + 40) = v89;
  *(void *)(v88 + 72) = &type metadata for String;
  unint64_t v90 = 0xD00000000000001CLL;
  uint64_t v91 = "Locations in blocked regions";
LABEL_24:
  *(void *)(v88 + 48) = v90;
  *(void *)(v88 + 56) = (unint64_t)(v91 - 32) | 0x8000000000000000;
  sub_10092CEEC(v88);
  sub_100796E74(&qword_101638410, type metadata accessor for TrackingAvoidanceError);
  _BridgedStoredNSError.init(_:userInfo:)();
  uint64_t v93 = (void *)v308[0];
  swift_retain();
  unint64_t v94 = v304;
  sub_100781FF0(v304, (unint64_t)v93, v303);

  swift_release_n();
  return swift_release_n();
}

void sub_1007A72A4(uint64_t a1, void *a2, void *a3)
{
  uint64_t v6 = type metadata accessor for Logger();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v59 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (void *)swift_allocObject();
  v10[2] = a3;
  swift_retain_n();
  _Block_copy(a3);
  swift_retain();
  _Block_copy(a3);
  uint64_t v11 = swift_bridgeObjectRetain();
  uint64_t v12 = (void *)sub_10115B630(v11);
  swift_bridgeObjectRelease();
  if (!v12)
  {
    if (qword_101636CA8 != -1) {
      swift_once();
    }
    sub_100010324(v6, (uint64_t)qword_10170E318);
    uint64_t v22 = Logger.logObject.getter();
    os_log_type_t v23 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v24 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Empty observations!", v24, 2u);
      swift_slowDealloc();
    }

    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
      sub_100DF30AC((unint64_t)_swiftEmptyArrayStorage);
    }
    type metadata accessor for TrackingAvoidanceError(0);
    uint64_t v67 = 1;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100796E74(&qword_101638410, type metadata accessor for TrackingAvoidanceError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v25 = (void *)v66[0];
    sub_10001D4B0(0, &qword_10164D830);
    sub_10033149C(&qword_10164D838, &qword_10164D830);
    v26.super.Class isa = Set._bridgeToObjectiveC()().super.isa;
    uint64_t v27 = (void *)_convertErrorToNSError(_:)();
    (*((void (**)(void *, Class, void *))a3 + 2))(a3, v26.super.isa, v27);

    goto LABEL_31;
  }
  if (qword_101636CA8 != -1) {
    swift_once();
  }
  uint64_t v13 = sub_100010324(v6, (uint64_t)qword_10170E318);
  uint64_t v14 = *(void (**)(char *))(v7 + 16);
  uint64_t v64 = v13;
  v14(v9);
  id v15 = v12;
  swift_bridgeObjectRetain();
  id v16 = v15;
  uint64_t v17 = Logger.logObject.getter();
  os_log_type_t v18 = static os_log_type_t.default.getter();
  BOOL v19 = os_log_type_enabled(v17, v18);
  id v65 = v16;
  if (v19)
  {
    id v62 = v10;
    uint64_t v20 = swift_slowAlloc();
    uint64_t v60 = swift_slowAlloc();
    v66[0] = v60;
    *(_DWORD *)uint64_t v20 = 134218498;
    if ((a1 & 0xC000000000000001) != 0) {
      uint64_t v21 = __CocoaSet.count.getter();
    }
    else {
      uint64_t v21 = *(void *)(a1 + 16);
    }
    uint64_t v61 = a2;
    uint64_t v67 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 12) = 2082;
    [v16 action];
    unint64_t v63 = a3;
    uint64_t v67 = sub_1008FA0F0(0x6E776F6E6B6E752ELL, 0xE800000000000000, v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    id v28 = v65;

    swift_bridgeObjectRelease();
    *(_WORD *)(v20 + 22) = 2082;
    id v29 = [v28 type];
    if (v29)
    {
      uint64_t v32 = (uint64_t)v29;
      if (v29 != (id)1)
      {

        swift_release_n();
        type metadata accessor for TrackingObservationType(0);
        uint64_t v58 = v63;
        _Block_release(v63);
        _Block_release(v58);
        uint64_t v67 = v32;
        _diagnoseUnexpectedEnumCaseValue<A, B>(type:rawValue:)();
        __break(1u);
        JUMPOUT(0x1007A8264);
      }
      unint64_t v30 = 0xEB0000000065766FLL;
      uint64_t v31 = 0x4D6E4F706565622ELL;
    }
    else
    {
      unint64_t v30 = 0xE800000000000000;
      uint64_t v31 = 0x746C75616665642ELL;
    }
    uint64_t v67 = sub_1008FA0F0(v31, v30, v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    id v16 = v65;

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Observed [%ld] observations. Action: %{public}s. Type: %{public}s.", (uint8_t *)v20, 0x20u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();

    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    uint64_t v10 = v62;
    a3 = (void *)v63;
    a2 = v61;
  }
  else
  {

    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  if ([v16 type] != (id)1) {
    goto LABEL_25;
  }
  uint64_t My = type metadata accessor for Feature.FindMy();
  v66[3] = My;
  v66[4] = sub_100796E74((unint64_t *)&qword_101653E00, (void (*)(uint64_t))&type metadata accessor for Feature.FindMy);
  uint64_t v34 = sub_10001D958(v66);
  (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(My - 8) + 104))(v34, enum case for Feature.FindMy.beepOnMove(_:), My);
  LOBYTE(My) = isFeatureEnabled(_:)();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v66);
  if ((My & 1) == 0)
  {
    uint64_t v37 = Logger.logObject.getter();
    os_log_type_t v38 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v39 = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, v38, "Internal Settings -> Feature Flags -> FindMy -> beepOnMove is disabled.", v39, 2u);
      swift_slowDealloc();
    }

    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
      sub_100DF30AC((unint64_t)_swiftEmptyArrayStorage);
    }
    type metadata accessor for TrackingAvoidanceError(0);
    uint64_t v67 = 6;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100796E74(&qword_101638410, type metadata accessor for TrackingAvoidanceError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v40 = (void *)v66[0];
    sub_10001D4B0(0, &qword_10164D830);
    sub_10033149C(&qword_10164D838, &qword_10164D830);
    v26.super.Class isa = Set._bridgeToObjectiveC()().super.isa;
    uint64_t v27 = (void *)_convertErrorToNSError(_:)();
    (*((void (**)(void *, Class, void *))a3 + 2))(a3, v26.super.isa, v27);

LABEL_31:
    swift_bridgeObjectRelease();
    swift_release_n();
LABEL_32:

    goto LABEL_45;
  }
  if (qword_101636CD8 != -1) {
    swift_once();
  }
  OS_dispatch_queue.sync<A>(execute:)();
  char v35 = sub_1010ABD90(v66[0]);
  swift_bridgeObjectRelease();
  id v16 = v65;
  if ((v35 & 1) == 0)
  {
    uint64_t v41 = Logger.logObject.getter();
    os_log_type_t v42 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v41, v42))
    {
      uint64_t v43 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v43 = 0;
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "isBeepOnMoveEnabled is false. Skipping observations.", v43, 2u);
      swift_slowDealloc();
    }

    if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0 && _CocoaArrayWrapper.endIndex.getter()) {
      sub_100DF30AC((unint64_t)_swiftEmptyArrayStorage);
    }
    type metadata accessor for TrackingAvoidanceError(0);
    uint64_t v67 = 6;
    sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
    sub_100796E74(&qword_101638410, type metadata accessor for TrackingAvoidanceError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v44 = (void *)v66[0];
    sub_10001D4B0(0, &qword_10164D830);
    sub_10033149C(&qword_10164D838, &qword_10164D830);
    v26.super.Class isa = Set._bridgeToObjectiveC()().super.isa;
    uint64_t v27 = (void *)_convertErrorToNSError(_:)();
    (*((void (**)(void *, Class, void *))a3 + 2))(a3, v26.super.isa, v27);

    swift_release_n();
    swift_bridgeObjectRelease();
    goto LABEL_32;
  }
LABEL_25:
  switch((unint64_t)[v16 action])
  {
    case 0uLL:
      swift_retain();
      id v36 = v16;
      sub_1007A1974(v36, (uint64_t)a2, v36, (void (*)(uint64_t, void *))sub_1007B13E0, (uint64_t)v10);
      goto LABEL_41;
    case 1uLL:
      uint64_t v50 = swift_bridgeObjectRetain();
      unint64_t v51 = v16;
      unint64_t v52 = sub_100710A3C(v50);
      swift_bridgeObjectRelease();
      swift_retain();
      id v46 = v51;
      sub_10079DF58((unint64_t)v52, a2, v46, (void (*)(uint64_t, void *))sub_1007B13E0, v10);
      swift_release();

      goto LABEL_43;
    case 2uLL:
      swift_retain();
      id v48 = v16;
      id v36 = v48;
      uint64_t v49 = sub_10079E5F8;
      goto LABEL_40;
    case 3uLL:
      swift_retain();
      id v48 = v16;
      id v36 = v48;
      uint64_t v49 = sub_1007A224C;
LABEL_40:
      sub_1007A46B4((uint64_t)v48, (unint64_t)a2, v48, (void (*)(uint64_t, void *))sub_1007B13E0, (uint64_t)v10, (uint64_t)sub_1003A854C, (void (*)(uint64_t, id, uint64_t, uint64_t, uint64_t, uint64_t, void *, uint64_t, id, void (*)(uint64_t, void *), uint64_t))v49);
LABEL_41:

      break;
    case 4uLL:
      uint64_t v45 = swift_bridgeObjectRetain();
      id v46 = v16;
      uint64_t v47 = sub_100710A3C(v45);
      swift_bridgeObjectRelease();
      swift_retain();
      _Block_copy(a3);
      sub_100796EBC((uint64_t)v47, a2, (char *)a3);
      _Block_release(a3);
      swift_release();
LABEL_43:

      break;
    default:
      os_log_type_t v53 = v16;
      id v54 = Logger.logObject.getter();
      os_log_type_t v55 = static os_log_type_t.error.getter();
      if (os_log_type_enabled(v54, v55))
      {
        uint64_t v56 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)uint64_t v56 = 134217984;
        v66[0] = (uint64_t)[v53 action];
        UnsafeMutableRawBufferPointer.copyMemory(from:)();

        _os_log_impl((void *)&_mh_execute_header, v54, v55, "Unknown action %ld", v56, 0xCu);
        swift_slowDealloc();
      }
      else
      {

        id v54 = v53;
      }

      if (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000000) != 0
        && _CocoaArrayWrapper.endIndex.getter())
      {
        sub_100DF30AC((unint64_t)_swiftEmptyArrayStorage);
      }
      type metadata accessor for TrackingAvoidanceError(0);
      uint64_t v67 = 1;
      sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
      sub_100796E74(&qword_101638410, type metadata accessor for TrackingAvoidanceError);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v57 = (void *)v66[0];
      sub_10001D4B0(0, &qword_10164D830);
      sub_10033149C(&qword_10164D838, &qword_10164D830);
      v26.super.Class isa = Set._bridgeToObjectiveC()().super.isa;
      uint64_t v27 = (void *)_convertErrorToNSError(_:)();
      (*((void (**)(void *, Class, void *))a3 + 2))(a3, v26.super.isa, v27);

      goto LABEL_31;
  }
  swift_release_n();
LABEL_45:
  _Block_release(a3);
}

void sub_1007A828C(unint64_t a1, void *a2, const void *a3)
{
  uint64_t v44 = (int *)sub_10000588C(&qword_10164D7C8);
  __chkstk_darwin(v44);
  uint64_t v45 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = sub_10000588C(&qword_10164D7D0);
  uint64_t v7 = __chkstk_darwin(v47);
  uint64_t v48 = (uint64_t)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v7);
  uint64_t v50 = (int **)((char *)&v44 - v9);
  uint64_t v49 = (void (*)(unint64_t, unsigned char *, uint64_t))swift_allocObject();
  *((void *)v49 + 2) = a3;
  id v46 = a3;
  _Block_copy(a3);
  static os_log_type_t.default.getter();
  if (qword_101637278 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_101347BA0;
  uint64_t v11 = a2;
  uint64_t v51 = *a2;
  sub_10000588C(&qword_10164D678);
  uint64_t v12 = String.init<A>(describing:)();
  uint64_t v14 = v13;
  *(void *)(v10 + 56) = &type metadata for String;
  unint64_t v15 = sub_10000B4CC();
  *(void *)(v10 + 32) = v12;
  *(void *)(v10 + 40) = v14;
  *(void *)(v10 + 96) = &type metadata for String;
  *(void *)(v10 + 104) = v15;
  *(void *)(v10 + 64) = v15;
  *(void *)(v10 + 72) = 0xD000000000000039;
  *(void *)(v10 + 80) = 0x8000000101407340;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  static os_log_type_t.default.getter();
  if (qword_1016372F0 != -1) {
    swift_once();
  }
  uint64_t v16 = swift_allocObject();
  *(_OWORD *)(v16 + 16) = xmmword_101342130;
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v17 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v17 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  *(void *)(v16 + 56) = &type metadata for Int;
  *(void *)(v16 + 64) = &protocol witness table for Int;
  *(void *)(v16 + 32) = v17;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  id v18 = [self defaultWorkspace];
  if (!v18) {
    goto LABEL_24;
  }
  BOOL v19 = v18;
  NSString v20 = String._bridgeToObjectiveC()();
  unsigned __int8 v21 = [v19 applicationIsInstalled:v20];

  uint64_t v22 = v50;
  if ((v21 & 1) == 0)
  {
    sub_10126D714();
    swift_bridgeObjectRelease();
    sub_100AA86FC();
  }
  if (!(a1 >> 62))
  {
    uint64_t v23 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v23) {
      goto LABEL_12;
    }
LABEL_18:
    swift_release();
    swift_bridgeObjectRelease();
    return;
  }
  swift_bridgeObjectRetain();
  if (!_CocoaArrayWrapper.endIndex.getter()) {
    goto LABEL_18;
  }
LABEL_12:
  if ((a1 & 0xC000000000000001) != 0)
  {
    id v24 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    goto LABEL_15;
  }
  if (!*(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    __break(1u);
LABEL_24:
    _Block_release(v46);
    __break(1u);
    return;
  }
  id v24 = *(id *)(a1 + 32);
LABEL_15:
  uint64_t v25 = v24;
  swift_bridgeObjectRelease();
  sub_100782478(v25, v22);
  uint64_t v26 = v48;
  sub_10001D074((uint64_t)v22, v48, &qword_10164D7D0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    swift_errorRetain();
    uint64_t v27 = (void *)_convertErrorToNSError(_:)();
    (*((void (**)(const void *, void *))v46 + 2))(v46, v27);

    swift_errorRelease();
    swift_errorRelease();
    sub_10001DAB4((uint64_t)v22, &qword_10164D7D0);
  }
  else
  {
    unint64_t v28 = (unint64_t)v45;
    uint64_t v29 = v44[12];
    uint64_t v47 = (uint64_t)v11;
    unint64_t v30 = (uint64_t *)&v45[v29];
    uint64_t v31 = v44[16];
    uint64_t v32 = (uint64_t)&v45[v31];
    uint64_t v33 = v44[20];
    uint64_t v34 = v44[24];
    char v35 = (uint64_t *)(v26 + v29);
    uint64_t v36 = v26;
    uint64_t v37 = v26 + v31;
    uint64_t v38 = type metadata accessor for MACAddress();
    (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 32))(v28, v36, v38);
    uint64_t v39 = *v35;
    uint64_t v40 = (void (*)(void))v35[1];
    *unint64_t v30 = v39;
    v30[1] = (uint64_t)v40;
    sub_1007AF8D8(v37, v32);
    uint64_t v41 = *(void **)(v36 + v33);
    *(void *)(v28 + v33) = v41;
    uint64_t v42 = *(unsigned __int8 *)(v36 + v34);
    *(unsigned char *)(v28 + v34) = v42;
    sub_100295FB0(v39, (unint64_t)v40);
    id v43 = v41;
    sub_10079D5EC(v28, v39, v40, v32, v25, v42, (void (*)(void))sub_1001E06E0, v49);

    sub_100293254(v39, (unint64_t)v40);
    sub_10001DAB4(v28, &qword_10164D7C8);
    sub_10001DAB4((uint64_t)v50, &qword_10164D7D0);
  }
  swift_release();
}

uint64_t sub_1007A889C(uint64_t a1, Swift::UInt8 a2, uint64_t a3, uint64_t a4, void (*a5)(char *), uint64_t a6)
{
  uint64_t v132 = a1;
  uint64_t v133 = a4;
  uint64_t v131 = a3;
  uint64_t v9 = sub_10000588C(&qword_1016653B0);
  __chkstk_darwin(v9 - 8);
  uint64_t v125 = (uint64_t)&v99 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for AccessoryMetadata(0);
  uint64_t v123 = *(void *)(v11 - 8);
  uint64_t v124 = v11;
  __chkstk_darwin(v11);
  uint64_t v103 = (uint64_t)&v99 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v127 = sub_10000588C(&qword_10164B3F8);
  __chkstk_darwin(v127);
  BOOL v128 = (uint64_t *)((char *)&v99 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v102 = sub_10000588C(&qword_10164D758);
  uint64_t v101 = *(void *)(v102 - 8);
  __chkstk_darwin(v102);
  unint64_t v100 = (char *)&v99 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v111 = sub_10000588C(&qword_10164D760);
  uint64_t v110 = *(void *)(v111 - 8);
  __chkstk_darwin(v111);
  id v108 = (char *)&v99 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v116 = sub_10000588C(&qword_10164D768);
  uint64_t v115 = *(void *)(v116 - 8);
  __chkstk_darwin(v116);
  unsigned int v112 = (char *)&v99 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = sub_10000588C(&qword_10164D770);
  uint64_t v121 = *(void *)(v17 - 8);
  uint64_t v122 = v17;
  __chkstk_darwin(v17);
  double v119 = (char *)&v99 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v107 = type metadata accessor for MACAddress();
  uint64_t v106 = *(void *)(v107 - 8);
  __chkstk_darwin(v107);
  uint64_t v104 = v19;
  BOOL v105 = (char *)&v99 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v114 = sub_10000588C(&qword_10164D778);
  uint64_t v113 = *(void *)(v114 - 8);
  __chkstk_darwin(v114);
  uint64_t v109 = (char *)&v99 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v120 = sub_10000588C(&qword_10164D780);
  uint64_t v118 = *(void *)(v120 - 8);
  __chkstk_darwin(v120);
  double v117 = (char *)&v99 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = sub_10000588C((uint64_t *)&unk_101653D50);
  __chkstk_darwin(v22 - 8);
  id v24 = (char *)&v99 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v29 = (char *)&v99 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = __chkstk_darwin(v27);
  uint64_t v32 = (char *)&v99 - v31;
  uint64_t v33 = __chkstk_darwin(v30);
  char v35 = (char *)&v99 - v34;
  __chkstk_darwin(v33);
  uint64_t v126 = (uint64_t)&v99 - v36;
  uint64_t v37 = swift_allocObject();
  uint64_t v129 = a5;
  *(void *)(v37 + 16) = a5;
  *(void *)(v37 + 24) = a6;
  uint64_t v134 = v37;
  Swift::Int v38 = sub_100DF342C((uint64_t)&off_1015A2798);
  BOOL v39 = sub_100DC7E30(a2, v38);
  uint64_t v130 = a6;
  swift_retain();
  swift_bridgeObjectRelease();
  if (v39)
  {
LABEL_16:
    switch(a2)
    {
      case 1u:
        if (qword_101636CD8 != -1) {
          swift_once();
        }
        OS_dispatch_queue.sync<A>(execute:)();
        char v64 = sub_1010ABD84(v135[0]);
        swift_bridgeObjectRelease();
        if (v64)
        {
          v135[0] = sub_1002FA3F0(v132);
          sub_10000588C(&qword_10164D6D0);
          sub_10000588C(&qword_101638D40);
          sub_100062734((unint64_t *)&unk_10166C140, &qword_10164D6D0);
          id v65 = v100;
          Publisher.mapError<A>(_:)();
          swift_release();
          uint64_t v66 = swift_allocObject();
          uint64_t v67 = v134;
          *(void *)(v66 + 16) = sub_1007B3268;
          *(void *)(v66 + 24) = v67;
          sub_100062734(&qword_10164D7B8, &qword_10164D758);
          swift_retain();
          uint64_t v68 = v102;
          Publisher.oneshot(_:)();
          swift_release();
          unint64_t v69 = &v133;
          goto LABEL_27;
        }
        if (qword_101636CA8 != -1) {
          swift_once();
        }
        uint64_t v91 = type metadata accessor for Logger();
        sub_100010324(v91, (uint64_t)qword_10170E318);
        uint64_t v92 = Logger.logObject.getter();
        os_log_type_t v93 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v92, v93))
        {
          unint64_t v94 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)unint64_t v94 = 0;
          _os_log_impl((void *)&_mh_execute_header, v92, v93, "Non-owner ranging is disabled. Skipping AIS fetch for AirTag.", v94, 2u);
          swift_slowDealloc();
        }

        sub_1007AF880();
        uint64_t v95 = swift_allocError();
        *id v96 = 4;
        id v97 = v128;
        *BOOL v128 = v95;
        swift_storeEnumTagMultiPayload();
        sub_10078C7B0((uint64_t)v97, v129);
        sub_10001DAB4((uint64_t)v97, &qword_10164B3F8);
        break;
      case 2u:
        uint64_t v70 = swift_allocObject();
        swift_weakInit();
        uint64_t v71 = v106;
        uint64_t v72 = v105;
        uint64_t v73 = v107;
        (*(void (**)(char *, uint64_t, uint64_t))(v106 + 16))(v105, v132, v107);
        unint64_t v74 = (*(unsigned __int8 *)(v71 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v71 + 80);
        unint64_t v75 = (v104 + v74 + 7) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v76 = swift_allocObject();
        (*(void (**)(unint64_t, char *, uint64_t))(v71 + 32))(v76 + v74, v72, v73);
        unint64_t v77 = v76 + v75;
        *(void *)unint64_t v77 = v70;
        *(unsigned char *)(v77 + 8) = 0;
        sub_10000588C(&qword_1016417D8);
        swift_allocObject();
        v135[0] = Future.init(_:)();
        sub_100062734((unint64_t *)&unk_10166C130, &qword_1016417D8);
        uint64_t v78 = Publisher.eraseToAnyPublisher()();
        swift_release();
        v135[0] = v78;
        sub_10000588C(&qword_10164D6D0);
        sub_100062734((unint64_t *)&unk_10166C140, &qword_10164D6D0);
        id v79 = v109;
        Publisher.timeout(_:queue:customError:)();
        swift_release();
        sub_10000588C(&qword_101638D40);
        sub_100062734(&qword_10164D7A8, &qword_10164D778);
        id v65 = v117;
        uint64_t v80 = v114;
        Publisher.mapError<A>(_:)();
        (*(void (**)(char *, uint64_t))(v113 + 8))(v79, v80);
        uint64_t v81 = swift_allocObject();
        uint64_t v82 = v134;
        *(void *)(v81 + 16) = sub_1007B3268;
        *(void *)(v81 + 24) = v82;
        sub_100062734(&qword_10164D7B0, &qword_10164D780);
        swift_retain();
        uint64_t v68 = v120;
        Publisher.oneshot(_:)();
        swift_release();
        unint64_t v69 = &v137;
LABEL_27:
        uint64_t v83 = *(v69 - 32);
        goto LABEL_29;
      case 3u:
        v135[0] = sub_1002F8440();
        type metadata accessor for BluetoothCommunicationCoordinator.Error();
        sub_10000588C((uint64_t *)&unk_10166C0A0);
        sub_100062734(&qword_10164D788, (uint64_t *)&unk_10166C0A0);
        sub_100796E74((unint64_t *)&unk_1016565D0, (void (*)(uint64_t))type metadata accessor for BluetoothCommunicationCoordinator.Error);
        id v84 = v108;
        Publisher<>.setFailureType<A>(to:)();
        swift_release();
        sub_100062734(&qword_10164D790, &qword_10164D760);
        id v85 = v112;
        uint64_t v86 = v111;
        Publisher.timeout(_:queue:customError:)();
        (*(void (**)(char *, uint64_t))(v110 + 8))(v84, v86);
        sub_10000588C(&qword_101638D40);
        sub_100062734(&qword_10164D798, &qword_10164D768);
        id v65 = v119;
        uint64_t v87 = v116;
        Publisher.mapError<A>(_:)();
        (*(void (**)(char *, uint64_t))(v115 + 8))(v85, v87);
        uint64_t v88 = swift_allocObject();
        uint64_t v89 = v134;
        *(void *)(v88 + 16) = sub_1007B3268;
        *(void *)(v88 + 24) = v89;
        sub_100062734(&qword_10164D7A0, &qword_10164D770);
        swift_retain();
        uint64_t v68 = v122;
        Publisher.oneshot(_:)();
        swift_release();
        uint64_t v83 = v121;
LABEL_29:
        (*(void (**)(char *, uint64_t))(v83 + 8))(v65, v68);
        break;
      default:
        if (qword_101636CA8 != -1) {
          swift_once();
        }
        uint64_t v57 = type metadata accessor for Logger();
        sub_100010324(v57, (uint64_t)qword_10170E318);
        uint64_t v58 = Logger.logObject.getter();
        os_log_type_t v59 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v58, v59))
        {
          uint64_t v60 = (uint8_t *)swift_slowAlloc();
          v135[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v60 = 136446210;
          uint64_t v136 = sub_1008FA0F0(0x656C707061, 0xE500000000000000, v135);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl((void *)&_mh_execute_header, v58, v59, "readMetadata: %{public}s is not supported!", v60, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }

        sub_1007AF880();
        uint64_t v61 = swift_allocError();
        *id v62 = 3;
        unint64_t v63 = v128;
        *BOOL v128 = v61;
        swift_storeEnumTagMultiPayload();
        sub_10078C7B0((uint64_t)v63, v129);
        sub_10001DAB4((uint64_t)v63, &qword_10164B3F8);
        break;
    }
    return swift_release();
  }
  Swift::UInt8 v40 = a2;
  sub_10001D074(v131, (uint64_t)v24, (uint64_t *)&unk_101653D50);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25) == 1)
  {
    sub_10001DAB4((uint64_t)v24, (uint64_t *)&unk_101653D50);
LABEL_15:
    a2 = v40;
    goto LABEL_16;
  }
  uint64_t v41 = v126;
  sub_1007B136C((uint64_t)v24, v126, type metadata accessor for SharedBeaconRecord);
  v135[3] = v25;
  v135[4] = sub_100796E74(&qword_101639EA0, (void (*)(uint64_t))type metadata accessor for SharedBeaconRecord);
  uint64_t v42 = sub_10001D958(v135);
  sub_1007AFB78(v41, (uint64_t)v42, type metadata accessor for SharedBeaconRecord);
  uint64_t v43 = v125;
  sub_100D17160(v135, v125);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v123 + 48))(v43, 1, v124) == 1)
  {
    sub_10001DAB4(v43, &qword_1016653B0);
    if (qword_101636CA8 != -1) {
      swift_once();
    }
    uint64_t v44 = type metadata accessor for Logger();
    sub_100010324(v44, (uint64_t)qword_10170E318);
    sub_1007AFB78(v41, (uint64_t)v32, type metadata accessor for SharedBeaconRecord);
    sub_1007AFB78(v41, (uint64_t)v29, type metadata accessor for SharedBeaconRecord);
    uint64_t v45 = Logger.logObject.getter();
    os_log_type_t v46 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v47 = swift_slowAlloc();
      *(_DWORD *)uint64_t v47 = 134218240;
      uint64_t v48 = *(void *)&v32[*(int *)(v25 + 48)];
      sub_1007AFBFC((uint64_t)v32, type metadata accessor for SharedBeaconRecord);
      v135[0] = v48;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v47 + 12) = 2048;
      uint64_t v49 = *(void *)&v29[*(int *)(v25 + 44)];
      sub_1007AFBFC((uint64_t)v29, type metadata accessor for SharedBeaconRecord);
      v135[0] = v49;
      uint64_t v41 = v126;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Invalid product data from shared beacon %ld-%ld", (uint8_t *)v47, 0x16u);
      swift_slowDealloc();
    }
    else
    {
      sub_1007AFBFC((uint64_t)v29, type metadata accessor for SharedBeaconRecord);
      sub_1007AFBFC((uint64_t)v32, type metadata accessor for SharedBeaconRecord);
    }

    sub_1007AFBFC(v41, type metadata accessor for SharedBeaconRecord);
    goto LABEL_15;
  }
  uint64_t v50 = v103;
  sub_1007B136C(v43, v103, type metadata accessor for AccessoryMetadata);
  if (qword_101636CA8 != -1) {
    swift_once();
  }
  uint64_t v51 = type metadata accessor for Logger();
  sub_100010324(v51, (uint64_t)qword_10170E318);
  sub_1007AFB78(v41, (uint64_t)v35, type metadata accessor for SharedBeaconRecord);
  unint64_t v52 = Logger.logObject.getter();
  os_log_type_t v53 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v52, v53))
  {
    uint64_t v54 = swift_slowAlloc();
    v135[0] = swift_slowAlloc();
    *(_DWORD *)uint64_t v54 = 141558275;
    uint64_t v136 = 1752392040;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v54 + 12) = 2081;
    type metadata accessor for UUID();
    sub_100796E74((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v55 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v136 = sub_1008FA0F0(v55, v56, v135);
    uint64_t v41 = v126;
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1007AFBFC((uint64_t)v35, type metadata accessor for SharedBeaconRecord);
    _os_log_impl((void *)&_mh_execute_header, v52, v53, "Skipping AIS fetch for family beacon %{private,mask.hash}s", (uint8_t *)v54, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1007AFBFC((uint64_t)v35, type metadata accessor for SharedBeaconRecord);
  }

  uint64_t v98 = v128;
  sub_1007AFB78(v50, (uint64_t)v128, type metadata accessor for AccessoryMetadata);
  swift_storeEnumTagMultiPayload();
  sub_10078C7B0((uint64_t)v98, v129);
  sub_10001DAB4((uint64_t)v98, &qword_10164B3F8);
  sub_1007AFBFC(v50, type metadata accessor for AccessoryMetadata);
  sub_1007AFBFC(v41, type metadata accessor for SharedBeaconRecord);
  return swift_release();
}

uint64_t sub_1007A9F74(uint64_t a1, Swift::UInt8 a2, uint64_t a3, char a4, uint64_t a5, void (*a6)(char *), uint64_t a7)
{
  uint64_t v64 = a3;
  uint64_t v65 = a5;
  uint64_t v70 = a1;
  uint64_t v61 = sub_10000588C(&qword_10164B3F8);
  __chkstk_darwin(v61);
  id v62 = (uint64_t *)((char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v12 = sub_10000588C(&qword_10164DBB0);
  __chkstk_darwin(v12 - 8);
  unint64_t v63 = (char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for MACAddress();
  uint64_t v67 = *(void *)(v14 - 8);
  uint64_t v15 = *(void *)(v67 + 64);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v61 - v19;
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v61 - v21;
  uint64_t v23 = swift_allocObject();
  uint64_t v66 = a6;
  *(void *)(v23 + 16) = a6;
  *(void *)(v23 + 24) = a7;
  uint64_t v68 = v23;
  uint64_t v69 = a7;
  uint64_t v24 = qword_101637188;
  swift_retain_n();
  if (v24 != -1) {
    swift_once();
  }
  uint64_t v25 = (void *)qword_10170EE68;
  id v26 = [self sharedInstance:v61];
  unsigned int v27 = [v26 isInternalBuild];

  if (v27)
  {
    NSString v28 = String._bridgeToObjectiveC()();
    unsigned int v29 = [v25 BOOLForKey:v28];

    if (v29)
    {
      if (qword_101636CB0 != -1) {
        swift_once();
      }
      uint64_t v30 = type metadata accessor for Logger();
      sub_100010324(v30, (uint64_t)qword_10164D4D0);
      uint64_t v31 = Logger.logObject.getter();
      os_log_type_t v32 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v31, v32))
      {
        uint64_t v33 = (uint8_t *)swift_slowAlloc();
        uint64_t v72 = swift_slowAlloc();
        *(_DWORD *)uint64_t v33 = 136446210;
        uint64_t v71 = sub_1008FA0F0(0xD000000000000043, 0x80000001014072A0, &v72);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "%{public}s ForceReadingHawkeyeAIS is enabled!", v33, 0xCu);
        swift_arrayDestroy();
        swift_slowDealloc();
        swift_slowDealloc();
      }

      uint64_t v34 = v69;
      swift_retain();
      uint64_t v35 = v70;
      Swift::UInt8 v36 = 2;
      goto LABEL_23;
    }
  }
  if (a4)
  {
    uint64_t v37 = v67;
    if (qword_101636CA8 != -1) {
      swift_once();
    }
    uint64_t v38 = type metadata accessor for Logger();
    sub_100010324(v38, (uint64_t)qword_10170E318);
    uint64_t v66 = *(void (**)(char *))(v37 + 16);
    ((void (*)(char *, uint64_t, uint64_t))v66)(v22, v70, v14);
    BOOL v39 = Logger.logObject.getter();
    os_log_type_t v40 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = swift_slowAlloc();
      uint64_t v65 = swift_slowAlloc();
      uint64_t v72 = v65;
      *(_DWORD *)uint64_t v41 = 136446466;
      uint64_t v71 = sub_1008FA0F0(0xD000000000000043, 0x80000001014072A0, &v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v41 + 12) = 2082;
      uint64_t v64 = v41 + 14;
      sub_100796E74((unint64_t *)&qword_101649EE0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
      uint64_t v42 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v71 = sub_1008FA0F0(v42, v43, &v72);
      uint64_t v37 = v67;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v37 + 8))(v22, v14);
      _os_log_impl((void *)&_mh_execute_header, v39, v40, "%{public}s for Posh accessory with %{public}s", (uint8_t *)v41, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v37 + 8))(v22, v14);
    }

    uint64_t v51 = type metadata accessor for TaskPriority();
    uint64_t v52 = (uint64_t)v63;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v51 - 8) + 56))(v63, 1, 1, v51);
    ((void (*)(char *, uint64_t, uint64_t))v66)(v20, v70, v14);
    unint64_t v53 = (*(unsigned __int8 *)(v37 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v37 + 80);
    uint64_t v54 = swift_allocObject();
    *(void *)(v54 + 16) = 0;
    *(void *)(v54 + 24) = 0;
    (*(void (**)(unint64_t, char *, uint64_t))(v37 + 32))(v54 + v53, v20, v14);
    uint64_t v55 = (uint64_t (**)(uint64_t))(v54 + ((v15 + v53 + 7) & 0xFFFFFFFFFFFFFFF8));
    unint64_t v56 = (uint64_t (*)(uint64_t))v68;
    *uint64_t v55 = sub_1007AF980;
    v55[1] = v56;
    swift_retain();
    sub_1008F5E44(v52, (uint64_t)&unk_10164D750, v54);
    swift_release_n();
    swift_release();
  }
  else
  {
    uint64_t v44 = v67;
    if (a2 != 4)
    {
      uint64_t v34 = v69;
      swift_retain();
      uint64_t v35 = v70;
      Swift::UInt8 v36 = a2;
LABEL_23:
      sub_1007A889C(v35, v36, v64, v65, v66, v34);
      swift_release();
      return swift_release_n();
    }
    if (qword_101636CB0 != -1) {
      swift_once();
    }
    uint64_t v45 = type metadata accessor for Logger();
    sub_100010324(v45, (uint64_t)qword_10164D4D0);
    (*(void (**)(char *, uint64_t, uint64_t))(v44 + 16))(v17, v70, v14);
    os_log_type_t v46 = Logger.logObject.getter();
    os_log_type_t v47 = static os_log_type_t.error.getter();
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = swift_slowAlloc();
      uint64_t v72 = swift_slowAlloc();
      *(_DWORD *)uint64_t v48 = 136446466;
      uint64_t v71 = sub_1008FA0F0(0xD000000000000043, 0x80000001014072A0, &v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      *(_WORD *)(v48 + 12) = 2082;
      sub_100796E74((unint64_t *)&qword_101649EE0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
      uint64_t v49 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v71 = sub_1008FA0F0(v49, v50, &v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v44 + 8))(v17, v14);
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "%{public}s for %{public}s with no device type!", (uint8_t *)v48, 0x16u);
      swift_arrayDestroy();
      swift_slowDealloc();
      swift_slowDealloc();
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v44 + 8))(v17, v14);
    }

    sub_1007AF880();
    uint64_t v58 = swift_allocError();
    *os_log_type_t v59 = 3;
    uint64_t v60 = (uint64_t)v62;
    *id v62 = v58;
    swift_storeEnumTagMultiPayload();
    sub_10078C7B0(v60, v66);
    sub_10001DAB4(v60, &qword_10164B3F8);
    swift_release_n();
  }
  return swift_release();
}

uint64_t sub_1007AA96C(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(unint64_t, char *, uint64_t))
{
  uint64_t v166 = a7;
  uint64_t v167 = a8;
  uint64_t v164 = a5;
  uint64_t v165 = a6;
  uint64_t v163 = a4;
  id v171 = a2;
  uint64_t v10 = sub_10000588C(&qword_10163C6C8);
  __chkstk_darwin(v10 - 8);
  uint64_t v132 = (char *)&v122 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v136 = sub_10000588C(&qword_10164D688);
  uint64_t v135 = *(void *)(v136 - 8);
  __chkstk_darwin(v136);
  uint64_t v133 = (char *)&v122 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v139 = sub_10000588C(&qword_10164D690);
  uint64_t v137 = *(void *)(v139 - 8);
  __chkstk_darwin(v139);
  uint64_t v134 = (char *)&v122 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v141 = sub_10000588C(&qword_10164D698);
  uint64_t v140 = *(void *)(v141 - 8);
  __chkstk_darwin(v141);
  int v138 = (char *)&v122 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v144 = sub_10000588C(&qword_10164D6A0);
  uint64_t v143 = *(void *)(v144 - 8);
  __chkstk_darwin(v144);
  uint64_t v142 = (char *)&v122 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v150 = sub_10000588C(&qword_10164D6A8);
  uint64_t v148 = *(void *)(v150 - 8);
  __chkstk_darwin(v150);
  uint64_t v145 = (char *)&v122 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v151 = sub_10000588C(&qword_10164D6B0);
  uint64_t v149 = *(void *)(v151 - 8);
  __chkstk_darwin(v151);
  uint64_t v146 = (char *)&v122 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v153 = sub_10000588C(&qword_10164D6B8);
  uint64_t v152 = *(void *)(v153 - 8);
  __chkstk_darwin(v153);
  uint64_t v147 = (char *)&v122 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = sub_10000588C((uint64_t *)&unk_101653D50);
  uint64_t v127 = *(void *)(v19 - 8);
  uint64_t v20 = __chkstk_darwin(v19 - 8);
  uint64_t v129 = (char *)&v122 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v128 = v21;
  __chkstk_darwin(v20);
  uint64_t v130 = (char *)&v122 - v22;
  uint64_t v23 = sub_10000588C((uint64_t *)&unk_1016477E0);
  __chkstk_darwin(v23 - 8);
  unsigned __int8 v156 = (char *)&v122 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for MACAddress();
  uint64_t v159 = *(void *)(v25 - 8);
  uint64_t v160 = v25;
  uint64_t v26 = __chkstk_darwin(v25);
  uint64_t v126 = (char *)&v122 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v125 = v27;
  __chkstk_darwin(v26);
  id v158 = (char *)&v122 - v28;
  uint64_t v29 = type metadata accessor for WildModeAssociationRecord(0);
  uint64_t v161 = *(void *)(v29 - 8);
  uint64_t v30 = __chkstk_darwin(v29);
  id v155 = (char *)&v122 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v154 = (uint64_t)&v122 - v33;
  uint64_t v162 = v34;
  __chkstk_darwin(v32);
  Swift::UInt8 v36 = (char *)&v122 - v35;
  uint64_t v37 = sub_10000588C(&qword_10164D6C0);
  uint64_t v170 = *(void *)(v37 - 8);
  __chkstk_darwin(v37);
  BOOL v39 = (char *)&v122 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = sub_10000588C(&qword_1016653B0);
  __chkstk_darwin(v40 - 8);
  uint64_t v42 = (char *)&v122 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = swift_allocObject();
  *(void *)(v43 + 16) = a9;
  uint64_t v44 = swift_allocObject();
  *(void *)(v44 + 16) = sub_1001DF814;
  *(void *)(v44 + 24) = v43;
  uint64_t v168 = v44;
  uint64_t v45 = a1;
  sub_10001D074(a1 + *(int *)(v29 + 56), (uint64_t)v42, &qword_1016653B0);
  uint64_t v46 = type metadata accessor for AccessoryMetadata(0);
  LODWORD(a1) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v46 - 8) + 48))(v42, 1, v46);
  uint64_t v131 = a9;
  _Block_copy(a9);
  uint64_t v169 = v43;
  swift_retain();
  sub_10001DAB4((uint64_t)v42, &qword_1016653B0);
  if (a1 != 1)
  {
    sub_1007AFB78(v45, (uint64_t)v36, type metadata accessor for WildModeAssociationRecord);
    Just.init(_:)();
    sub_100062734(&qword_10164D740, &qword_10164D6C0);
    uint64_t v54 = Publisher.eraseToAnyPublisher()();
    (*(void (**)(char *, uint64_t))(v170 + 8))(v39, v37);
    uint64_t v55 = v45;
    uint64_t v57 = v166;
    uint64_t v56 = v167;
LABEL_30:
    uint64_t v172 = v54;
    sub_1007AFB78(v55, (uint64_t)v36, type metadata accessor for WildModeAssociationRecord);
    unint64_t v114 = (*(unsigned __int8 *)(v161 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v161 + 80);
    uint64_t v115 = (void *)swift_allocObject();
    id v116 = v171;
    v115[2] = v56;
    v115[3] = v116;
    uint64_t v117 = v164;
    uint64_t v118 = v165;
    v115[4] = v163;
    v115[5] = v117;
    v115[6] = v118;
    v115[7] = v57;
    uint64_t v119 = v168;
    v115[8] = sub_1007AF878;
    v115[9] = v119;
    sub_1007B136C((uint64_t)v36, (uint64_t)v115 + v114, type metadata accessor for WildModeAssociationRecord);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_retain();
    id v120 = v116;
    sub_10000588C(&qword_10164D730);
    sub_100062734(&qword_10164D738, &qword_10164D730);
    Publisher<>.sink(receiveValue:)();
    swift_release();
    swift_release();
    swift_beginAccess();
    AnyCancellable.store(in:)();
    swift_endAccess();
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  id v157 = (int *)v29;
  uint64_t v124 = v36;
  uint64_t v170 = v45;
  if (qword_101636CA8 != -1) {
    swift_once();
  }
  uint64_t v47 = type metadata accessor for Logger();
  sub_100010324(v47, (uint64_t)qword_10170E318);
  uint64_t v48 = v154;
  sub_1007AFB78(v170, v154, type metadata accessor for WildModeAssociationRecord);
  uint64_t v49 = Logger.logObject.getter();
  os_log_type_t v50 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v49, v50))
  {
    uint64_t v51 = (uint8_t *)swift_slowAlloc();
    uint64_t v172 = swift_slowAlloc();
    *(_DWORD *)uint64_t v51 = 136446210;
    type metadata accessor for UUID();
    sub_100796E74((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    uint64_t v52 = dispatch thunk of CustomStringConvertible.description.getter();
    id v173 = (id)sub_1008FA0F0(v52, v53, &v172);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1007AFBFC(v48, type metadata accessor for WildModeAssociationRecord);
    _os_log_impl((void *)&_mh_execute_header, v49, v50, "Record %{public}s is missing metadata. Attempting to fetch again...", v51, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1007AFBFC(v48, type metadata accessor for WildModeAssociationRecord);
  }

  uint64_t v58 = v157;
  uint64_t v59 = (uint64_t)v156;
  uint64_t v60 = (uint64_t)v155;
  uint64_t v61 = v170;
  if (qword_101636CB0 != -1) {
    swift_once();
  }
  sub_100010324(v47, (uint64_t)qword_10164D4D0);
  sub_1007AFB78(v61, v60, type metadata accessor for WildModeAssociationRecord);
  id v62 = Logger.logObject.getter();
  os_log_type_t v63 = static os_log_type_t.default.getter();
  if (!os_log_type_enabled(v62, v63))
  {
    sub_1007AFBFC(v60, type metadata accessor for WildModeAssociationRecord);

    goto LABEL_21;
  }
  uint64_t v64 = swift_slowAlloc();
  uint64_t v172 = swift_slowAlloc();
  *(_DWORD *)uint64_t v64 = 136315394;
  id v173 = (id)sub_1008FA0F0(0xD000000000000068, 0x80000001014071E0, &v172);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  *(_WORD *)(v64 + 12) = 2082;
  uint64_t v65 = (unsigned char *)(v60 + v58[22]);
  if (v65[1])
  {
    if (*(unsigned char *)(v60 + v58[21])) {
      goto LABEL_19;
    }
    goto LABEL_16;
  }
  if ((*(unsigned char *)(v60 + v58[21]) & 1) == 0)
  {
LABEL_16:
    char v66 = *(unsigned char *)(v60 + v58[13]);
    goto LABEL_20;
  }
  if (*v65 != 1)
  {
LABEL_19:
    char v66 = 6;
    goto LABEL_20;
  }
  char v66 = 5;
LABEL_20:
  uint64_t v67 = sub_10078155C(v66);
  id v173 = (id)sub_1008FA0F0(v67, v68, &v172);
  UnsafeMutableRawBufferPointer.copyMemory(from:)();
  swift_bridgeObjectRelease();
  sub_1007AFBFC(v60, type metadata accessor for WildModeAssociationRecord);
  _os_log_impl((void *)&_mh_execute_header, v62, v63, "%s Advertisement type: %{public}s", (uint8_t *)v64, 0x16u);
  swift_arrayDestroy();
  swift_slowDealloc();
  swift_slowDealloc();

  uint64_t v58 = v157;
LABEL_21:
  sub_10029416C(v59);
  uint64_t v70 = v159;
  uint64_t v69 = v160;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v159 + 48))(v59, 1, v160) != 1)
  {
    unint64_t v77 = *(void (**)(unint64_t, char *, uint64_t))(v70 + 32);
    id v155 = (char *)(v70 + 32);
    uint64_t v131 = v77;
    v77((unint64_t)v158, (char *)v59, v69);
    int v123 = *(unsigned __int8 *)(v61 + v58[13]);
    unsigned __int8 v156 = (char *)swift_allocBox();
    sub_1007AFB78(v61, v78, type metadata accessor for WildModeAssociationRecord);
    id v79 = [v171 trackingIdentifier];
    unsigned __int8 v80 = [v79 isPosh];

    if (v80)
    {
      id v81 = [v171 trackingIdentifier];
      unsigned int v82 = [v81 networkID];

      int v83 = 2 * (v82 == 2);
      if (v82 == 1) {
        int v83 = 1;
      }
    }
    else
    {
      int v83 = 3;
    }
    LODWORD(v154) = v83;
    uint64_t v84 = type metadata accessor for SharedBeaconRecord(0);
    uint64_t v85 = (uint64_t)v130;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v84 - 8) + 56))(v130, 1, 1, v84);
    int v122 = *(unsigned char *)(v170 + v58[21]) & 1;
    uint64_t v86 = v126;
    (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v126, v158, v69);
    uint64_t v87 = (uint64_t)v129;
    sub_10001D074(v85, (uint64_t)v129, (uint64_t *)&unk_101653D50);
    unint64_t v88 = (*(unsigned __int8 *)(v70 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v70 + 80);
    uint64_t v89 = v88 + v125;
    unint64_t v90 = (*(unsigned __int8 *)(v127 + 80) + v88 + v125 + 1) & ~(unint64_t)*(unsigned __int8 *)(v127 + 80);
    uint64_t v91 = v90 + v128;
    uint64_t v92 = swift_allocObject();
    uint64_t v93 = v167;
    *(void *)(v92 + 16) = v167;
    v131(v92 + v88, v86, v69);
    *(unsigned char *)(v92 + v89) = v123;
    sub_1007AF8D8(v87, v92 + v90);
    *(unsigned char *)(v92 + v91) = v122;
    sub_10000588C(&qword_1016417D8);
    swift_allocObject();
    swift_retain();
    uint64_t v172 = Future.init(_:)();
    uint64_t v129 = (char *)&protocol conformance descriptor for Future<A, B>;
    sub_100062734((unint64_t *)&unk_10166C130, &qword_1016417D8);
    uint64_t v94 = Publisher.eraseToAnyPublisher()();
    id v155 = (char *)v94;
    swift_release();
    sub_10001DAB4(v85, (uint64_t *)&unk_101653D50);
    uint64_t v172 = v94;
    uint64_t v96 = v93;
    id v173 = *(id *)(v93 + 24);
    id v95 = v173;
    uint64_t v97 = type metadata accessor for OS_dispatch_queue.SchedulerOptions();
    uint64_t v98 = (uint64_t)v132;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v97 - 8) + 56))(v132, 1, 1, v97);
    uint64_t v131 = (void (*)(unint64_t, char *, uint64_t))v95;
    sub_10000588C(&qword_10164D6D0);
    sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
    sub_100062734((unint64_t *)&unk_10166C140, &qword_10164D6D0);
    sub_10033149C((unint64_t *)&qword_10166C020, (unint64_t *)&qword_1016376E0);
    uint64_t v99 = v133;
    Publisher.receive<A>(on:options:)();
    sub_10001DAB4(v98, &qword_10163C6C8);

    uint64_t v100 = swift_allocObject();
    *(void *)(v100 + 16) = v156;
    *(void *)(v100 + 24) = v96;
    *(unsigned char *)(v100 + 32) = v154;
    swift_retain();
    swift_retain();
    static Subscribers.Demand.unlimited.getter();
    sub_10000588C(&qword_10164D6D8);
    sub_10000588C((uint64_t *)&unk_10166C030);
    sub_100062734(&qword_10164D6E0, &qword_10164D688);
    sub_100062734(&qword_10164D6E8, (uint64_t *)&unk_10166C030);
    uint64_t v101 = v134;
    uint64_t v102 = v136;
    Publisher.flatMap<A, B>(maxPublishers:_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v135 + 8))(v99, v102);
    sub_100062734(&qword_10164D6F0, &qword_10164D690);
    uint64_t v103 = v138;
    uint64_t v56 = v96;
    uint64_t v104 = v139;
    Publisher.timeout(_:queue:customError:)();
    (*(void (**)(char *, uint64_t))(v137 + 8))(v101, v104);
    sub_10000588C(&qword_101641650);
    sub_100062734(&qword_10164D6F8, &qword_10164D698);
    BOOL v105 = v142;
    uint64_t v106 = v141;
    Publisher.map<A>(_:)();
    (*(void (**)(char *, uint64_t))(v140 + 8))(v103, v106);
    sub_10000588C(&qword_10164D700);
    sub_100062734(&qword_10164D708, &qword_10164D6A0);
    sub_100062734(&qword_10164D710, &qword_10164D700);
    uint64_t v107 = v145;
    uint64_t v108 = v144;
    uint64_t v55 = v170;
    Publisher.catch<A>(_:)();
    (*(void (**)(char *, uint64_t))(v143 + 8))(v105, v108);
    sub_100062734(&qword_10164D718, &qword_10164D6A8);
    swift_retain();
    uint64_t v109 = v146;
    uint64_t v110 = v150;
    Publisher.map<A>(_:)();
    swift_release();
    (*(void (**)(char *, uint64_t))(v148 + 8))(v107, v110);
    sub_100062734(&qword_10164D720, &qword_10164D6B0);
    uint64_t v111 = v147;
    uint64_t v112 = v151;
    Publisher.replaceError(with:)();
    (*(void (**)(char *, uint64_t))(v149 + 8))(v109, v112);
    sub_100062734(&qword_10164D728, &qword_10164D6B8);
    uint64_t v113 = v153;
    uint64_t v54 = Publisher.eraseToAnyPublisher()();
    swift_release();
    (*(void (**)(char *, uint64_t))(v152 + 8))(v111, v113);
    (*(void (**)(char *, uint64_t))(v159 + 8))(v158, v160);
    swift_release();
    uint64_t v57 = v166;
    Swift::UInt8 v36 = v124;
    goto LABEL_30;
  }
  sub_10001DAB4(v59, (uint64_t *)&unk_1016477E0);
  uint64_t v71 = Logger.logObject.getter();
  os_log_type_t v72 = static os_log_type_t.error.getter();
  if (os_log_type_enabled(v71, v72))
  {
    uint64_t v73 = (uint8_t *)swift_slowAlloc();
    uint64_t v172 = swift_slowAlloc();
    *(_DWORD *)uint64_t v73 = 136315138;
    id v173 = (id)sub_1008FA0F0(0xD000000000000068, 0x80000001014071E0, &v172);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    _os_log_impl((void *)&_mh_execute_header, v71, v72, "%s unexpected advertisement type!", v73, 0xCu);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }

  sub_1007AF880();
  swift_allocError();
  *unint64_t v74 = 1;
  unint64_t v75 = (void (**)(id, void *))v131;
  _Block_copy(v131);
  uint64_t v76 = (void *)_convertErrorToNSError(_:)();
  v75[2](v75, v76);

  _Block_release(v75);
  swift_errorRelease();
  swift_release();
  return swift_release();
}

void sub_1007AC304(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void (*a8)(unint64_t, char *, uint64_t))
{
  uint64_t v69 = a6;
  uint64_t v68 = a5;
  uint64_t v67 = a4;
  uint64_t v76 = a3;
  uint64_t v78 = type metadata accessor for WildModeTrackingLocation(0);
  uint64_t v12 = *(void *)(v78 - 8);
  __chkstk_darwin(v78);
  uint64_t v14 = (uint64_t *)((char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v73 = type metadata accessor for MACAddress();
  uint64_t v72 = *(void *)(v73 - 8);
  __chkstk_darwin(v73);
  unint64_t v74 = (char *)&v64 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000588C(&qword_1016511E0);
  __chkstk_darwin(v16 - 8);
  uint64_t v18 = (char *)&v64 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = type metadata accessor for WildModeAssociationRecord(0);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = __chkstk_darwin(v19);
  os_log_t v71 = (os_log_t)((char *)&v64 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v64 - v23;
  unint64_t v77 = a8;
  _Block_copy(a8);
  uint64_t v75 = a1;
  uint64_t v70 = a7;
  sub_100790EA0(a1, a2, (uint64_t)v18);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19) == 1)
  {
    sub_10001DAB4((uint64_t)v18, &qword_1016511E0);
    static os_log_type_t.error.getter();
    if (qword_1016372F0 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    type metadata accessor for TrackingAvoidanceError(0);
    uint64_t v79 = 3;
    sub_10000588C((uint64_t *)&unk_101637F00);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_101342130;
    *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(inited + 40) = v26;
    *(void *)(inited + 72) = &type metadata for String;
    *(void *)(inited + 48) = 0xD000000000000027;
    *(void *)(inited + 56) = 0x80000001014071B0;
    sub_10092CEEC(inited);
    sub_100796E74(&qword_101638410, type metadata accessor for TrackingAvoidanceError);
    _BridgedStoredNSError.init(_:userInfo:)();
    uint64_t v27 = (void *)v80[0];
    uint64_t v28 = (void *)_convertErrorToNSError(_:)();
    uint64_t v29 = v77;
    (*((void (**)(void (*)(unint64_t, char *, uint64_t), void *))v77 + 2))(v77, v28);

    uint64_t v30 = v29;
    goto LABEL_24;
  }
  sub_1007B136C((uint64_t)v18, (uint64_t)v24, type metadata accessor for WildModeAssociationRecord);
  if (qword_101636CB0 != -1) {
    swift_once();
  }
  uint64_t v31 = type metadata accessor for Logger();
  sub_100010324(v31, (uint64_t)qword_10164D4D0);
  os_log_t v32 = v71;
  sub_1007AFB78((uint64_t)v24, (uint64_t)v71, type metadata accessor for WildModeAssociationRecord);
  uint64_t v33 = v72;
  uint64_t v34 = v74;
  uint64_t v35 = v73;
  (*(void (**)(char *, uint64_t, uint64_t))(v72 + 16))(v74, v75, v73);
  Swift::UInt8 v36 = Logger.logObject.getter();
  os_log_type_t v37 = static os_log_type_t.default.getter();
  int v38 = v37;
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v39 = swift_slowAlloc();
    uint64_t v66 = swift_slowAlloc();
    v80[0] = v66;
    *(_DWORD *)uint64_t v39 = 136315394;
    uint64_t v64 = v39 + 4;
    type metadata accessor for UUID();
    sub_100796E74((unint64_t *)&qword_101638B10, (void (*)(uint64_t))&type metadata accessor for UUID);
    int v65 = v38;
    uint64_t v40 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v79 = sub_1008FA0F0(v40, v41, v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    sub_1007AFBFC((uint64_t)v32, type metadata accessor for WildModeAssociationRecord);
    *(_WORD *)(v39 + 12) = 2080;
    sub_100796E74((unint64_t *)&qword_101649EE0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
    os_log_t v71 = v36;
    uint64_t v42 = v24;
    uint64_t v43 = v74;
    uint64_t v44 = dispatch thunk of CustomStringConvertible.description.getter();
    uint64_t v79 = sub_1008FA0F0(v44, v45, v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    uint64_t v46 = v43;
    uint64_t v24 = v42;
    (*(void (**)(char *, uint64_t))(v33 + 8))(v46, v35);
    Swift::UInt8 v36 = v71;
    _os_log_impl((void *)&_mh_execute_header, v71, (os_log_type_t)v65, "update: found UT record UUID %s address %s.", (uint8_t *)v39, 0x16u);
    swift_arrayDestroy();
    swift_slowDealloc();
    swift_slowDealloc();
  }
  else
  {
    sub_1007AFBFC((uint64_t)v32, type metadata accessor for WildModeAssociationRecord);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v34, v35);
  }

  id v47 = [v76 observedLocations];
  sub_10001D4B0(0, &qword_101656690);
  unint64_t v48 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (!(v48 >> 62))
  {
    uint64_t v49 = *(void *)((v48 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v49) {
      goto LABEL_12;
    }
LABEL_22:
    swift_bridgeObjectRelease();
    uint64_t v51 = _swiftEmptyArrayStorage;
LABEL_23:
    os_log_type_t v63 = v77;
    _Block_copy(v77);
    sub_1007AA96C((uint64_t)v24, v76, v75, v67, v68, v69, (uint64_t)v51, v70, v63);
    _Block_release(v63);
    swift_bridgeObjectRelease();
    sub_1007AFBFC((uint64_t)v24, type metadata accessor for WildModeAssociationRecord);
    uint64_t v30 = v63;
LABEL_24:
    _Block_release(v30);
    return;
  }
  swift_bridgeObjectRetain();
  uint64_t v49 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  if (!v49) {
    goto LABEL_22;
  }
LABEL_12:
  v80[0] = (uint64_t)_swiftEmptyArrayStorage;
  sub_1000B7CEC(0, v49 & ~(v49 >> 63), 0);
  if ((v49 & 0x8000000000000000) == 0)
  {
    unint64_t v74 = v24;
    uint64_t v50 = 0;
    uint64_t v51 = (void *)v80[0];
    do
    {
      if ((v48 & 0xC000000000000001) != 0) {
        id v52 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
      }
      else {
        id v52 = *(id *)(v48 + 8 * v50 + 32);
      }
      unint64_t v53 = v52;
      [v52 latitude];
      uint64_t v55 = v54;
      [v53 longitude];
      uint64_t v57 = v56;
      [v53 horizontalAccuracy];
      uint64_t v59 = v58;
      id v60 = [v53 timestamp];
      static Date._unconditionallyBridgeFromObjectiveC(_:)();

      *uint64_t v14 = v55;
      v14[1] = v57;
      v14[2] = v59;
      v80[0] = (uint64_t)v51;
      unint64_t v62 = v51[2];
      unint64_t v61 = v51[3];
      if (v62 >= v61 >> 1)
      {
        sub_1000B7CEC(v61 > 1, v62 + 1, 1);
        uint64_t v51 = (void *)v80[0];
      }
      ++v50;
      long long v51[2] = v62 + 1;
      sub_1007B136C((uint64_t)v14, (uint64_t)v51+ ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))+ *(void *)(v12 + 72) * v62, type metadata accessor for WildModeTrackingLocation);
    }
    while (v49 != v50);
    swift_bridgeObjectRelease();
    uint64_t v24 = v74;
    goto LABEL_23;
  }
  __break(1u);
}

void sub_1007ACCC0(uint64_t *a1, uint64_t *a2, const void *a3)
{
  v310 = a1;
  uint64_t v5 = sub_10000588C(&qword_101638CF0);
  __chkstk_darwin(v5 - 8);
  uint64_t v299 = (char *)v282 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = sub_10000588C((uint64_t *)&unk_101653D50);
  __chkstk_darwin(v7 - 8);
  uint64_t v288 = (uint64_t)v282 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v290 = type metadata accessor for SharedBeaconRecord(0);
  uint64_t v287 = *(void *)(v290 - 8);
  uint64_t v9 = __chkstk_darwin(v290);
  uint64_t v285 = (uint64_t)v282 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v286 = (uint64_t)v282 - v12;
  __chkstk_darwin(v11);
  uint64_t v289 = (uint64_t)v282 - v13;
  uint64_t v14 = sub_10000588C(&qword_10163B9F0);
  __chkstk_darwin(v14 - 8);
  uint64_t v293 = (uint64_t)v282 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_10000588C(&qword_101657910);
  __chkstk_darwin(v16 - 8);
  uint64_t v297 = (uint64_t)v282 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for BeaconKeyManager.IndexInformation(0);
  uint64_t v295 = *(void *)(v18 - 8);
  uint64_t v296 = v18;
  __chkstk_darwin(v18);
  uint64_t v298 = (uint64_t)v282 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = sub_10000588C((uint64_t *)&unk_1016477E0);
  uint64_t v21 = __chkstk_darwin(v20 - 8);
  uint64_t v283 = (char *)v282 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v291 = (char *)v282 - v24;
  __chkstk_darwin(v23);
  os_log_t v300 = (char *)v282 - v25;
  uint64_t v304 = type metadata accessor for MACAddress();
  uint64_t v302 = *(void *)(v304 - 8);
  uint64_t v26 = __chkstk_darwin(v304);
  uint64_t v294 = (char *)v282 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = __chkstk_darwin(v26);
  long long v284 = (char *)v282 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v292 = (char *)v282 - v31;
  __chkstk_darwin(v30);
  uint64_t v301 = (uint64_t)v282 - v32;
  uint64_t v33 = sub_10000588C((uint64_t *)&unk_10163AC90);
  __chkstk_darwin(v33 - 8);
  uint64_t v35 = (uint64_t)v282 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = type metadata accessor for Date();
  unint64_t v309 = *(void *)(v36 - 8);
  uint64_t v37 = __chkstk_darwin(v36);
  *(void *)&long long v305 = (char *)v282 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v37);
  *(void *)&long long v307 = (char *)v282 - v39;
  _Block_copy(a3);
  _Block_copy(a3);
  uint64_t v308 = (void (**)(void, void))a3;
  _Block_copy(a3);
  static os_log_type_t.default.getter();
  if (qword_101637278 != -1) {
    goto LABEL_124;
  }
LABEL_2:
  uint64_t v306 = sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v40 = swift_allocObject();
  *(_OWORD *)(v40 + 16) = xmmword_101347BA0;
  v311[0] = *a2;
  sub_10000588C(&qword_10164D678);
  uint64_t v41 = (uint64_t)a2;
  uint64_t v42 = String.init<A>(describing:)();
  uint64_t v44 = v43;
  *(void *)(v40 + 56) = &type metadata for String;
  unint64_t v45 = sub_10000B4CC();
  *(void *)(v40 + 32) = v42;
  *(void *)(v40 + 40) = v44;
  *(void *)(v40 + 96) = &type metadata for String;
  *(void *)(v40 + 104) = v45;
  unint64_t v46 = v45;
  *(void *)(v40 + 64) = v45;
  *(void *)(v40 + 72) = 0xD000000000000039;
  *(void *)(v40 + 80) = 0x8000000101406EC0;
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease();
  a2 = v310;
  id v47 = [v310 trackingIdentifier];
  uint64_t v303 = v41;
  sub_100780834(v47, v35);

  unint64_t v48 = v309;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v309 + 48))(v35, 1, v36) == 1)
  {
    sub_10001DAB4(v35, (uint64_t *)&unk_10163AC90);
  }
  else
  {
    uint64_t v49 = v307;
    (*(void (**)(void, uint64_t, uint64_t))(v48 + 32))(v307, v35, v36);
    uint64_t v50 = v305;
    static Date.trustedNow.getter(v305);
    char v51 = static Date.> infix(_:_:)();
    uint64_t v54 = *(void (**)(uint64_t, uint64_t))(v48 + 8);
    unint64_t v52 = v48 + 8;
    unint64_t v53 = v54;
    v54(v50, v36);
    if (v51)
    {
      unint64_t v309 = v52;
      uint64_t v304 = v36;
      uint64_t v55 = swift_allocObject();
      long long v305 = xmmword_101342130;
      *(_OWORD *)(v55 + 16) = xmmword_101342130;
      id v56 = [a2 trackingIdentifier];
      id v57 = [v56 advertisementData];

      uint64_t v58 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
      unint64_t v60 = v59;

      uint64_t v61 = Data.hexString.getter();
      uint64_t v63 = v62;
      sub_10001CFB8(v58, v60);
      *(void *)(v55 + 56) = &type metadata for String;
      *(void *)(v55 + 64) = v46;
      *(void *)(v55 + 32) = v61;
      *(void *)(v55 + 40) = v63;
      uint64_t v64 = String.init(format:_:)();
      uint64_t v66 = v65;
      static os_log_type_t.default.getter();
      if (qword_1016372F0 != -1) {
        swift_once();
      }
      uint64_t v67 = swift_allocObject();
      *(_OWORD *)(v67 + 16) = v305;
      *(void *)(v67 + 56) = &type metadata for String;
      *(void *)(v67 + 64) = v46;
      *(void *)(v67 + 32) = v64;
      *(void *)(v67 + 40) = v66;
      swift_bridgeObjectRetain();
      os_log(_:dso:log:_:_:)();
      swift_bridgeObjectRelease();
      type metadata accessor for TrackingAvoidanceError(0);
      uint64_t v312 = 7;
      sub_10000588C((uint64_t *)&unk_101637F00);
      uint64_t inited = swift_initStackObject();
      *(_OWORD *)(inited + 16) = v305;
      *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
      *(void *)(inited + 40) = v69;
      *(void *)(inited + 72) = &type metadata for String;
      *(void *)(inited + 48) = v64;
      *(void *)(inited + 56) = v66;
      sub_10092CEEC(inited);
      sub_100796E74(&qword_101638410, type metadata accessor for TrackingAvoidanceError);
      _BridgedStoredNSError.init(_:userInfo:)();
      uint64_t v70 = (void *)v311[0];
      os_log_t v71 = (void *)_convertErrorToNSError(_:)();
      uint64_t v72 = v308;
      ((void (**)(void, void *))v308)[2](v308, v71);

      v53(v307, v304);
      goto LABEL_101;
    }
    v53(v49, v36);
  }
  id v73 = [a2 observedLocations];
  sub_10001D4B0(0, &qword_101656690);
  unint64_t v74 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v74 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v75 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v75 = *(void *)((v74 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRelease();
  if (!v75)
  {
    static os_log_type_t.error.getter();
    if (qword_1016372F0 != -1) {
      swift_once();
    }
    os_log(_:dso:log:_:_:)();
    type metadata accessor for TrackingAvoidanceError(0);
    uint64_t v312 = 4;
    sub_10000588C((uint64_t *)&unk_101637F00);
    uint64_t v82 = swift_initStackObject();
    *(_OWORD *)(v82 + 16) = xmmword_101342130;
    *(void *)(v82 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
    *(void *)(v82 + 40) = v86;
    *(void *)(v82 + 72) = &type metadata for String;
    unint64_t v84 = 0xD000000000000027;
    uint64_t v85 = "location was not present in the request";
    goto LABEL_24;
  }
  v282[0] = v46;
  id v76 = [a2 observedLocations];
  unint64_t v77 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  if (v77 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v78 = _CocoaArrayWrapper.endIndex.getter();
    if (!v78) {
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v78 = *(void *)((v77 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v78) {
      goto LABEL_26;
    }
  }
  unint64_t v309 = v77 & 0xC000000000000001;
  if ((v77 & 0xC000000000000001) != 0) {
    id v79 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
  }
  else {
    id v79 = *(id *)(v77 + 32);
  }
  unsigned __int8 v80 = v79;
  char v81 = sub_100FC042C();

  if (v81)
  {
LABEL_17:
    swift_bridgeObjectRelease_n();
    goto LABEL_18;
  }
  if (v78 == 1)
  {
LABEL_26:
    swift_bridgeObjectRelease_n();
    uint64_t v89 = v310;
    id v90 = [v310 trackingIdentifier];
    id v91 = [v90 data];

    uint64_t v92 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
    unint64_t v309 = v93;

    if (qword_101636CB0 != -1) {
      swift_once();
    }
    uint64_t v94 = type metadata accessor for Logger();
    uint64_t v95 = sub_100010324(v94, (uint64_t)qword_10164D4D0);
    unint64_t v96 = v309;
    unint64_t v97 = v309 >> 62;
    sub_1000361E0(v92, v309);
    sub_1000361E0(v92, v96);
    uint64_t v98 = Logger.logObject.getter();
    uint64_t v99 = (void *)static os_log_type_t.default.getter();
    BOOL v100 = os_log_type_enabled(v98, (os_log_type_t)v99);
    *(void *)&long long v307 = v95;
    if (v100)
    {
      uint64_t v101 = swift_slowAlloc();
      *(void *)&long long v305 = swift_slowAlloc();
      v311[0] = v305;
      *(_DWORD *)uint64_t v101 = 134218242;
      uint64_t v102 = 0;
      switch((int)v97)
      {
        case 1:
          LODWORD(v102) = HIDWORD(v92) - v92;
          if (__OFSUB__(HIDWORD(v92), v92))
          {
            __break(1u);
LABEL_130:
            __break(1u);
LABEL_131:
            __break(1u);
LABEL_132:
            __break(1u);
LABEL_133:
            __break(1u);
LABEL_134:
            __break(1u);
LABEL_135:
            swift_once();
LABEL_110:
            os_log(_:dso:log:_:_:)();
            uint64_t v226 = swift_allocObject();
            long long v307 = xmmword_101342130;
            *(_OWORD *)(v226 + 16) = xmmword_101342130;
            id v227 = [v89 trackingIdentifier];
            id v228 = [v227 advertisementData];

            uint64_t v229 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
            unint64_t v231 = v230;

            uint64_t v232 = Data.hexString.getter();
            uint64_t v234 = v233;
            sub_10001CFB8(v229, v231);
            uint64_t v235 = v282[0];
            *(void *)(v226 + 56) = v99;
            *(void *)(v226 + 64) = v235;
            *(void *)(v226 + 32) = v232;
            *(void *)(v226 + 40) = v234;
            uint64_t v236 = String.init(format:_:)();
            uint64_t v238 = v237;
            type metadata accessor for TrackingAvoidanceError(0);
            uint64_t v312 = 8;
            sub_10000588C((uint64_t *)&unk_101637F00);
            uint64_t v239 = swift_initStackObject();
            *(_OWORD *)(v239 + 16) = v307;
            *(void *)(v239 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
            *(void *)(v239 + 40) = v240;
            *(void *)(v239 + 72) = v99;
            *(void *)(v239 + 48) = v236;
            *(void *)(v239 + 56) = v238;
            sub_10092CEEC(v239);
            sub_100796E74(&qword_101638410, type metadata accessor for TrackingAvoidanceError);
            _BridgedStoredNSError.init(_:userInfo:)();
            uint64_t v241 = (void *)v311[0];
            uint64_t v242 = (void *)_convertErrorToNSError(_:)();
            uint64_t v72 = v308;
            ((void (**)(void, void *))v308)[2](v308, v242);

            unint64_t v243 = v309;
            sub_10001CFB8(v92, v309);
            sub_10001CFB8(v92, v243);
            uint64_t v220 = v92;
            unint64_t v221 = v243;
            goto LABEL_111;
          }
          uint64_t v102 = (int)v102;
LABEL_52:
          uint64_t v312 = v102;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          *(_WORD *)(v101 + 12) = 2082;
          unint64_t v121 = v97;
          unint64_t v122 = v309;
          uint64_t v123 = Data.hexString.getter();
          uint64_t v312 = sub_1008FA0F0(v123, v124, v311);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10001CFB8(v92, v122);
          unint64_t v125 = v122;
          unint64_t v97 = v121;
          sub_10001CFB8(v92, v125);
          _os_log_impl((void *)&_mh_execute_header, v98, (os_log_type_t)v99, "Decoding advertisement from advertisementData[%ld]: %{public}s", (uint8_t *)v101, 0x16u);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();

          uint64_t v89 = v310;
          break;
        case 2:
          uint64_t v119 = *(void *)(v92 + 16);
          uint64_t v118 = *(void *)(v92 + 24);
          BOOL v120 = __OFSUB__(v118, v119);
          uint64_t v102 = v118 - v119;
          if (!v120) {
            goto LABEL_52;
          }
          goto LABEL_130;
        case 3:
          goto LABEL_52;
        default:
          uint64_t v102 = BYTE6(v309);
          goto LABEL_52;
      }
    }
    else
    {
      unint64_t v103 = v309;
      sub_10001CFB8(v92, v309);
      sub_10001CFB8(v92, v103);
    }
    id v126 = [v89 trackingIdentifier];
    unsigned int v127 = [v126 isPosh];

    id v128 = [v89 trackingIdentifier];
    unsigned int v129 = [v128 networkID];

    id v130 = [v89 trackingIdentifier];
    unsigned int v131 = [v130 status];

    if (v129 == 1) {
      char v132 = 5;
    }
    else {
      char v132 = 6;
    }
    if (v127) {
      char v133 = v132;
    }
    else {
      char v133 = (v131 >> 4) & 3;
    }
    uint64_t v134 = Logger.logObject.getter();
    os_log_type_t v135 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v134, v135))
    {
      uint64_t v136 = (uint8_t *)swift_slowAlloc();
      uint64_t v137 = swift_slowAlloc();
      *(void *)&long long v305 = v97;
      v311[0] = v137;
      *(_DWORD *)uint64_t v136 = 136446210;
      uint64_t v138 = sub_10078155C(v133);
      uint64_t v312 = sub_1008FA0F0(v138, v139, v311);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v134, v135, "UnauthorizedTrackingAdvertisementType: %{public}s", v136, 0xCu);
      swift_arrayDestroy();
      LODWORD(v97) = v305;
      swift_slowDealloc();
      swift_slowDealloc();
    }

    uint64_t v99 = &type metadata for String;
    uint64_t v89 = v310;
    switch(v133)
    {
      case 4:
        uint64_t v141 = v310;
        uint64_t v142 = Logger.logObject.getter();
        os_log_type_t v143 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v142, v143))
        {
          uint64_t v144 = swift_slowAlloc();
          *(_DWORD *)uint64_t v144 = 67109632;
          id v145 = [v141 trackingIdentifier];
          unsigned int v146 = [v145 isPosh];
          uint64_t v306 = v92;
          unsigned int v147 = v146;

          LODWORD(v311[0]) = v147;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          *(_WORD *)(v144 + 8) = 256;
          id v148 = [v141 trackingIdentifier];
          unsigned __int8 v149 = [v148 networkID];

          LOBYTE(v311[0]) = v149;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          *(_WORD *)(v144 + 11) = 256;
          id v150 = [v141 trackingIdentifier];
          unsigned __int8 v151 = [v150 status];

          LOBYTE(v311[0]) = v151;
          uint64_t v92 = v306;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();

          _os_log_impl((void *)&_mh_execute_header, v142, v143, "Unknown advertisement type. isPosh: %{BOOL}d networkID: %hhu status: %hhu", (uint8_t *)v144, 0xEu);
          swift_slowDealloc();
        }
        else
        {

          uint64_t v142 = v141;
        }

        type metadata accessor for TrackingAvoidanceError(0);
        uint64_t v312 = 6;
        sub_10000588C((uint64_t *)&unk_101637F00);
        uint64_t v166 = swift_initStackObject();
        *(_OWORD *)(v166 + 16) = xmmword_101342130;
        *(void *)(v166 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
        *(void *)(v166 + 40) = v167;
        *(void *)(v166 + 72) = &type metadata for String;
        uint64_t v168 = "Unknown advertisement type";
        goto LABEL_99;
      case 6:
        id v152 = [v310 trackingIdentifier];
        id v153 = [v152 address];

        uint64_t v154 = static Data._unconditionallyBridgeFromObjectiveC(_:)();
        unint64_t v156 = v155;

        sub_1000361E0(v154, v156);
        uint64_t v157 = (uint64_t)v300;
        MACAddress.init(data:type:)();
        uint64_t v158 = v302;
        uint64_t v159 = v304;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v302 + 48))(v157, 1, v304) != 1)
        {
          uint64_t v169 = v301;
          (*(void (**)(uint64_t, uint64_t, uint64_t))(v158 + 32))(v301, v157, v159);
          uint64_t v170 = v294;
          (*(void (**)(char *, uint64_t, uint64_t))(v158 + 16))(v294, v169, v159);
          id v171 = Logger.logObject.getter();
          os_log_type_t v172 = static os_log_type_t.default.getter();
          *(void *)&long long v307 = v171;
          uint64_t v173 = v158;
          if (os_log_type_enabled(v171, v172))
          {
            uint64_t v174 = (_DWORD *)swift_slowAlloc();
            v311[0] = swift_slowAlloc();
            *(void *)&long long v305 = v174;
            *uint64_t v174 = 136446210;
            uint64_t v306 = v92;
            sub_100796E74((unint64_t *)&qword_101649EE0, (void (*)(uint64_t))&type metadata accessor for MACAddress);
            uint64_t v175 = dispatch thunk of CustomStringConvertible.description.getter();
            uint64_t v312 = sub_1008FA0F0(v175, v176, v311);
            uint64_t v92 = v306;
            UnsafeMutableRawBufferPointer.copyMemory(from:)();
            swift_bridgeObjectRelease();
            os_log_t v177 = *(void (**)(char *, uint64_t))(v173 + 8);
            v177(v170, v304);
            uint64_t v178 = (void *)v307;
            _os_log_impl((void *)&_mh_execute_header, (os_log_t)v307, v172, "Posh address: %{public}s", (uint8_t *)v305, 0xCu);
            swift_arrayDestroy();
            uint64_t v159 = v304;
            swift_slowDealloc();
            swift_slowDealloc();
          }
          else
          {
            os_log_t v177 = *(void (**)(char *, uint64_t))(v158 + 8);
            v177(v170, v159);
          }
          uint64_t v222 = type metadata accessor for UUID();
          uint64_t v223 = (uint64_t)v299;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v222 - 8) + 56))(v299, 1, 1, v222);
          uint64_t v224 = (void (*)(unint64_t, char *, uint64_t))v308;
          _Block_copy(v308);
          uint64_t v225 = v301;
          sub_1007AC304(v301, v223, v310, 0, 0, 0, v303, v224);
          _Block_release(v224);
          sub_10001CFB8(v154, v156);
          sub_10001CFB8(v92, v309);
          sub_10001DAB4(v223, &qword_101638CF0);
          v177((char *)v225, v159);
          _Block_release(v224);
          _Block_release(v224);
          uint64_t v204 = v224;
          goto LABEL_102;
        }
        uint64_t v306 = v92;
        sub_10001DAB4(v157, (uint64_t *)&unk_1016477E0);
        sub_1000361E0(v154, v156);
        sub_1000361E0(v154, v156);
        uint64_t v160 = Logger.logObject.getter();
        os_log_type_t v161 = static os_log_type_t.error.getter();
        if (os_log_type_enabled(v160, v161))
        {
          uint64_t v162 = (uint8_t *)swift_slowAlloc();
          v311[0] = swift_slowAlloc();
          *(_DWORD *)uint64_t v162 = 136446210;
          uint64_t v163 = Data.hexString.getter();
          uint64_t v312 = sub_1008FA0F0(v163, v164, v311);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease();
          sub_10001CFB8(v154, v156);
          sub_10001CFB8(v154, v156);
          _os_log_impl((void *)&_mh_execute_header, v160, v161, "Invalid MAC address %{public}s", v162, 0xCu);
          swift_arrayDestroy();
          swift_slowDealloc();
          swift_slowDealloc();
        }
        else
        {
          sub_10001CFB8(v154, v156);
          sub_10001CFB8(v154, v156);
        }

        type metadata accessor for TrackingAvoidanceError(0);
        uint64_t v312 = 3;
        sub_10000588C((uint64_t *)&unk_101637F00);
        uint64_t v185 = swift_initStackObject();
        *(_OWORD *)(v185 + 16) = xmmword_101342130;
        *(void *)(v185 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
        *(void *)(v185 + 40) = v186;
        *(void *)(v185 + 72) = &type metadata for String;
        *(void *)(v185 + 48) = 0xD00000000000001FLL;
        *(void *)(v185 + 56) = 0x8000000101406F20;
        sub_10092CEEC(v185);
        sub_100796E74(&qword_101638410, type metadata accessor for TrackingAvoidanceError);
        _BridgedStoredNSError.init(_:userInfo:)();
        uint64_t v187 = (void *)v311[0];
        os_log_type_t v188 = (void *)_convertErrorToNSError(_:)();
        uint64_t v72 = v308;
        ((void (**)(void, void *))v308)[2](v308, v188);

        sub_10001CFB8(v306, v309);
        uint64_t v189 = v154;
        unint64_t v190 = v156;
LABEL_100:
        sub_10001CFB8(v189, v190);

        goto LABEL_101;
      case 5:
        switch((int)v97)
        {
          case 1:
            if (__OFSUB__(HIDWORD(v92), v92)) {
              goto LABEL_131;
            }
            uint64_t v140 = HIDWORD(v92) - (int)v92;
LABEL_81:
            sub_1000361E0(v92, v309);
LABEL_82:
            if (v140 == 28) {
              goto LABEL_93;
            }
LABEL_83:
            sub_10001CFB8(v92, v309);
            uint64_t v182 = Logger.logObject.getter();
            os_log_type_t v183 = static os_log_type_t.error.getter();
            if (os_log_type_enabled(v182, v183))
            {
              unint64_t v184 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)unint64_t v184 = 0;
              _os_log_impl((void *)&_mh_execute_header, v182, v183, "received an advertisement of unexpected length or format", v184, 2u);
              swift_slowDealloc();
            }
            break;
          case 2:
            uint64_t v181 = *(void *)(v92 + 16);
            uint64_t v180 = *(void *)(v92 + 24);
            uint64_t v140 = v180 - v181;
            if (!__OFSUB__(v180, v181)) {
              goto LABEL_81;
            }
            goto LABEL_132;
          case 3:
            goto LABEL_83;
          default:
            uint64_t v140 = BYTE6(v309);
            goto LABEL_82;
        }
LABEL_98:

        type metadata accessor for TrackingAvoidanceError(0);
        uint64_t v312 = 3;
        sub_10000588C((uint64_t *)&unk_101637F00);
        uint64_t v166 = swift_initStackObject();
        *(_OWORD *)(v166 + 16) = xmmword_101342130;
        *(void *)(v166 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
        *(void *)(v166 + 40) = v207;
        *(void *)(v166 + 72) = &type metadata for String;
        uint64_t v168 = "Advertisement is malformed";
LABEL_99:
        *(void *)(v166 + 48) = 0xD00000000000001ALL;
        *(void *)(v166 + 56) = (unint64_t)(v168 - 32) | 0x8000000000000000;
        sub_10092CEEC(v166);
        sub_100796E74(&qword_101638410, type metadata accessor for TrackingAvoidanceError);
        _BridgedStoredNSError.init(_:userInfo:)();
        uint64_t v187 = (void *)v311[0];
        id v208 = (void *)_convertErrorToNSError(_:)();
        uint64_t v72 = v308;
        ((void (**)(void, void *))v308)[2](v308, v208);

        uint64_t v189 = v92;
        unint64_t v190 = v309;
        goto LABEL_100;
    }
    switch((int)v97)
    {
      case 1:
        if (__OFSUB__(HIDWORD(v92), v92)) {
          goto LABEL_133;
        }
        uint64_t v165 = HIDWORD(v92) - (int)v92;
LABEL_91:
        sub_1000361E0(v92, v309);
LABEL_92:
        if (v165 != 28)
        {
LABEL_96:
          sub_10001CFB8(v92, v309);
          uint64_t v182 = Logger.logObject.getter();
          os_log_type_t v205 = static os_log_type_t.error.getter();
          if (os_log_type_enabled(v182, v205))
          {
            uint64_t v206 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)uint64_t v206 = 0;
            _os_log_impl((void *)&_mh_execute_header, v182, v205, "received an advertisement of unexpected length or format", v206, 2u);
            swift_slowDealloc();
          }
          goto LABEL_98;
        }
LABEL_93:
        sub_1000361E0(v92, v309);
        type metadata accessor for BeaconKeyManager(0);
        OSAllocatedUnfairLock.callAsFunction<A>(_:)();
        uint64_t v193 = v297;
        sub_1012E41F8(v297);
        swift_release();
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v295 + 48))(v193, 1, v296) == 1)
        {
          sub_10001DAB4(v193, &qword_101657910);
          unint64_t v194 = v309;
          sub_1000361E0(v92, v309);
          uint64_t v195 = static MACAddress.length.getter();
          sub_100435A9C(v195, v92, v194, v311);
          uint64_t v196 = v291;
          MACAddress.init(data:type:)();
          uint64_t v197 = v302;
          uint64_t v198 = v304;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v302 + 48))(v196, 1, v304) != 1)
          {
            uint64_t v199 = (uint64_t)v292;
            (*(void (**)(char *, char *, uint64_t))(v197 + 32))(v292, v196, v198);
            uint64_t v200 = type metadata accessor for UUID();
            uint64_t v201 = (uint64_t)v299;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v200 - 8) + 56))(v299, 1, 1, v200);
            uint64_t v202 = (void (*)(unint64_t, char *, uint64_t))v308;
            _Block_copy(v308);
            sub_1007AC304(v199, v201, v89, 0, 0, 0, v303, v202);
            _Block_release(v202);
            unint64_t v203 = v309;
            sub_10001CFB8(v92, v309);
            sub_10001CFB8(v92, v203);
            sub_10001CFB8(v92, v203);
            sub_10001DAB4(v201, &qword_101638CF0);
            (*(void (**)(uint64_t, uint64_t))(v197 + 8))(v199, v198);
            _Block_release(v202);
            _Block_release(v202);
            uint64_t v204 = v202;
            goto LABEL_102;
          }
          uint64_t v280 = v308;
          _Block_release(v308);
          _Block_release(v280);
          _Block_release(v280);
          _Block_release(v280);
          __break(1u);
LABEL_137:
          uint64_t v281 = v308;
          _Block_release(v308);
          _Block_release(v281);
          _Block_release(v281);
          _Block_release(v281);
          __break(1u);
          JUMPOUT(0x1007AF7BCLL);
        }
        uint64_t v209 = v193;
        uint64_t v210 = v298;
        sub_1007B136C(v209, v298, type metadata accessor for BeaconKeyManager.IndexInformation);
        uint64_t v211 = v293;
        sub_100ACD178(v293);
        uint64_t v212 = type metadata accessor for OwnedBeaconRecord();
        int v213 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v212 - 8) + 48))(v211, 1, v212);
        sub_10001DAB4(v211, &qword_10163B9F0);
        if (v213 == 1)
        {
          uint64_t v214 = v210;
          uint64_t v215 = v288;
          sub_100ACEADC(v214, v288);
          uint64_t v216 = v290;
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v287 + 48))(v215, 1, v290) == 1)
          {
            sub_10001DAB4(v215, (uint64_t *)&unk_101653D50);
LABEL_106:
            type metadata accessor for TrackingAvoidanceError(0);
            uint64_t v312 = 6;
            sub_1004A0BC8((uint64_t)_swiftEmptyArrayStorage);
            sub_100796E74(&qword_101638410, type metadata accessor for TrackingAvoidanceError);
            _BridgedStoredNSError.init(_:userInfo:)();
            uint64_t v217 = (void *)v311[0];
            uint64_t v218 = (void *)_convertErrorToNSError(_:)();
            uint64_t v72 = v308;
            ((void (**)(void, void *))v308)[2](v308, v218);

            unint64_t v219 = v309;
            sub_10001CFB8(v92, v309);

            sub_10001CFB8(v92, v219);
            uint64_t v220 = v92;
            unint64_t v221 = v219;
LABEL_111:
            sub_10001CFB8(v220, v221);
            goto LABEL_112;
          }
          uint64_t v244 = v215;
          uint64_t v245 = v289;
          sub_1007B136C(v244, v289, type metadata accessor for SharedBeaconRecord);
          int v246 = *(unsigned __int8 *)(v245 + *(int *)(v216 + 64));
          uint64_t v247 = v286;
          sub_1007AFB78(v245, v286, type metadata accessor for SharedBeaconRecord);
          if (v246 == 1)
          {
            sub_1007AFBFC(v247, type metadata accessor for SharedBeaconRecord);
          }
          else
          {
            int v248 = *(unsigned __int8 *)(v247 + *(int *)(v216 + 64));
            sub_1007AFBFC(v247, type metadata accessor for SharedBeaconRecord);
            if (v248 != 4)
            {
              sub_1007AFBFC(v245, type metadata accessor for SharedBeaconRecord);
              goto LABEL_106;
            }
          }
          static os_log_type_t.default.getter();
          if (qword_1016372F0 != -1) {
            swift_once();
          }
          uint64_t v249 = swift_allocObject();
          long long v307 = xmmword_101342130;
          *(_OWORD *)(v249 + 16) = xmmword_101342130;
          uint64_t v250 = v289;
          sub_1007AFB78(v289, v285, type metadata accessor for SharedBeaconRecord);
          uint64_t v251 = v290;
          uint64_t v252 = String.init<A>(describing:)();
          uint64_t v253 = v282[0];
          *(void *)(v249 + 56) = &type metadata for String;
          *(void *)(v249 + 64) = v253;
          *(void *)(v249 + 32) = v252;
          *(void *)(v249 + 40) = v254;
          os_log(_:dso:log:_:_:)();
          swift_bridgeObjectRelease();
          uint64_t v255 = v250 + *(int *)(v251 + 20);
          if ((sub_100785054(v255) & 1) == 0)
          {
            unint64_t v265 = v309;
            sub_1000361E0(v92, v309);
            uint64_t v266 = static MACAddress.length.getter();
            sub_100435A9C(v266, v92, v265, v311);
            uint64_t v267 = v283;
            MACAddress.init(data:type:)();
            uint64_t v268 = v302;
            uint64_t v269 = v304;
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v302 + 48))(v267, 1, v304) != 1)
            {
              uint64_t v270 = (uint64_t)v284;
              (*(void (**)(char *, char *, uint64_t))(v268 + 32))(v284, v267, v269);
              uint64_t v271 = type metadata accessor for UUID();
              uint64_t v272 = *(void *)(v271 - 8);
              uint64_t v273 = (uint64_t)v299;
              (*(void (**)(char *, uint64_t, uint64_t))(v272 + 16))(v299, v255, v271);
              (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v272 + 56))(v273, 0, 1, v271);
              unint64_t v274 = (unsigned __int8 *)(v289 + *(int *)(v290 + 28));
              uint64_t v275 = *v274;
              uint64_t v276 = *((void *)v274 + 1);
              uint64_t v277 = *((void *)v274 + 2);
              uint64_t v278 = (void (*)(unint64_t, char *, uint64_t))v308;
              _Block_copy(v308);
              swift_bridgeObjectRetain();
              sub_1007AC304(v270, v273, v89, v275, v276, v277, v303, v278);
              _Block_release(v278);
              unint64_t v279 = v309;
              sub_10001CFB8(v92, v309);
              swift_bridgeObjectRelease();
              sub_10001CFB8(v92, v279);
              sub_10001CFB8(v92, v279);
              sub_10001DAB4(v273, &qword_101638CF0);
              (*(void (**)(uint64_t, uint64_t))(v268 + 8))(v270, v304);
              sub_1007AFBFC(v289, type metadata accessor for SharedBeaconRecord);
              sub_1007AFBFC(v298, type metadata accessor for BeaconKeyManager.IndexInformation);
              _Block_release(v278);
              _Block_release(v278);
              uint64_t v204 = v278;
              goto LABEL_102;
            }
            goto LABEL_137;
          }
          uint64_t v256 = String.init(format:_:)();
          uint64_t v258 = v257;
          static os_log_type_t.default.getter();
          uint64_t v259 = swift_allocObject();
          *(_OWORD *)(v259 + 16) = v307;
          *(void *)(v259 + 56) = &type metadata for String;
          *(void *)(v259 + 64) = v253;
          *(void *)(v259 + 32) = v256;
          *(void *)(v259 + 40) = v258;
          swift_bridgeObjectRetain();
          os_log(_:dso:log:_:_:)();
          swift_bridgeObjectRelease();
          type metadata accessor for TrackingAvoidanceError(0);
          uint64_t v312 = 7;
          sub_10000588C((uint64_t *)&unk_101637F00);
          uint64_t v260 = swift_initStackObject();
          *(_OWORD *)(v260 + 16) = v307;
          *(void *)(v260 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
          *(void *)(v260 + 40) = v261;
          *(void *)(v260 + 72) = &type metadata for String;
          *(void *)(v260 + 48) = v256;
          *(void *)(v260 + 56) = v258;
          sub_10092CEEC(v260);
          sub_100796E74(&qword_101638410, type metadata accessor for TrackingAvoidanceError);
          _BridgedStoredNSError.init(_:userInfo:)();
          uint64_t v262 = (void *)v311[0];
          uint64_t v263 = (void *)_convertErrorToNSError(_:)();
          uint64_t v72 = v308;
          ((void (**)(void, void *))v308)[2](v308, v263);

          unint64_t v264 = v309;
          sub_10001CFB8(v92, v309);

          sub_10001CFB8(v92, v264);
          sub_10001CFB8(v92, v264);
          sub_1007AFBFC(v250, type metadata accessor for SharedBeaconRecord);
LABEL_112:
          sub_1007AFBFC(v298, type metadata accessor for BeaconKeyManager.IndexInformation);
          goto LABEL_101;
        }
        static os_log_type_t.default.getter();
        if (qword_1016372F0 == -1) {
          goto LABEL_110;
        }
        goto LABEL_135;
      case 2:
        uint64_t v192 = *(void *)(v92 + 16);
        uint64_t v191 = *(void *)(v92 + 24);
        uint64_t v165 = v191 - v192;
        if (!__OFSUB__(v191, v192)) {
          goto LABEL_91;
        }
        goto LABEL_134;
      case 3:
        goto LABEL_96;
      default:
        uint64_t v165 = BYTE6(v309);
        goto LABEL_92;
    }
  }
  *(void *)&long long v307 = self;
  uint64_t v35 = 5;
  *(void *)&long long v305 = 0xD000000000000013;
  v282[1] = 0x8000000101407030;
  while (1)
  {
    if (v309) {
      id v104 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)();
    }
    else {
      id v104 = *(id *)(v77 + 8 * v35);
    }
    BOOL v105 = v104;
    uint64_t v36 = v35 - 3;
    if (__OFADD__(v35 - 4, 1))
    {
      __break(1u);
LABEL_124:
      swift_once();
      goto LABEL_2;
    }
    id v106 = [(id)v307 sharedInstance];
    a2 = (uint64_t *)[v106 isInternalBuild];

    if (a2)
    {
      id v107 = [self standardUserDefaults];
      a2 = (uint64_t *)String._bridgeToObjectiveC()();
      unsigned int v108 = [v107 BOOLForKey:a2];

      if (v108) {
        break;
      }
    }
    [v105 latitude];
    double v110 = v109;
    [v105 longitude];
    double v112 = v111;
    if (qword_101636A88 != -1) {
      swift_once();
    }
    if (objc_msgSend((id)qword_101642640, "containsCoordinate:", v110, v112))
    {
      uint64_t v113 = (void *)qword_101642648;
      if (qword_101642648)
      {
        id v114 = (id)qword_101642648;
      }
      else
      {
        uint64_t v115 = (void *)sub_10036D0D4();
        id v116 = (void *)qword_101642648;
        qword_101642648 = (uint64_t)v115;
        id v114 = v115;

        uint64_t v113 = 0;
      }
      id v117 = v113;
      a2 = (uint64_t *)[v114 containsCoordinate:v110, v112];

      if (a2) {
        goto LABEL_17;
      }
    }
    else
    {
    }
    ++v35;
    if (v36 == v78) {
      goto LABEL_26;
    }
  }
  static os_log_type_t.default.getter();
  sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
  uint64_t v179 = (void *)static OS_os_log.default.getter();
  os_log(_:dso:log:_:_:)();
  swift_bridgeObjectRelease_n();

LABEL_18:
  static os_log_type_t.error.getter();
  if (qword_1016372F0 != -1) {
    swift_once();
  }
  os_log(_:dso:log:_:_:)();
  type metadata accessor for TrackingAvoidanceError(0);
  uint64_t v312 = 11;
  sub_10000588C((uint64_t *)&unk_101637F00);
  uint64_t v82 = swift_initStackObject();
  *(_OWORD *)(v82 + 16) = xmmword_101342130;
  *(void *)(v82 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(v82 + 40) = v83;
  *(void *)(v82 + 72) = &type metadata for String;
  unint64_t v84 = 0xD00000000000001CLL;
  uint64_t v85 = "Locations in blocked regions";
LABEL_24:
  *(void *)(v82 + 48) = v84;
  *(void *)(v82 + 56) = (unint64_t)(v85 - 32) | 0x8000000000000000;
  sub_10092CEEC(v82);
  sub_100796E74(&qword_101638410, type metadata accessor for TrackingAvoidanceError);
  _BridgedStoredNSError.init(_:userInfo:)();
  uint64_t v87 = (void *)v311[0];
  unint64_t v88 = (void *)_convertErrorToNSError(_:)();
  uint64_t v72 = v308;
  ((void (**)(void, void *))v308)[2](v308, v88);

LABEL_101:
  _Block_release(v72);
  _Block_release(v72);
  uint64_t v204 = (void (*)(unint64_t, char *, uint64_t))v72;
LABEL_102:
  _Block_release(v204);
}

unint64_t sub_1007AF7EC()
{
  unint64_t result = qword_10164D680;
  if (!qword_10164D680)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164D680);
  }
  return result;
}

uint64_t sub_1007AF840()
{
  _Block_release(*(const void **)(v0 + 16));

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1007AF878(uint64_t a1, uint64_t a2)
{
  return sub_10078FFB8(a1, a2, *(uint64_t (**)(uint64_t))(v2 + 16));
}

unint64_t sub_1007AF880()
{
  unint64_t result = qword_10164D6C8;
  if (!qword_10164D6C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164D6C8);
  }
  return result;
}

uint64_t sub_1007AF8D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10000588C((uint64_t *)&unk_101653D50);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1007AF948@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1007926B8(a1, *(unsigned char *)(v2 + 32), a2);
}

uint64_t sub_1007AF954@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100792984(a1, a2);
}

void sub_1007AF964()
{
  sub_100D439C8(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1007AF980(uint64_t a1)
{
  return sub_10078C7B0(a1, *(void (**)(char *))(v1 + 16));
}

uint64_t sub_1007AF98C(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for MACAddress() - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  uint64_t v8 = v1 + v5;
  uint64_t v9 = (uint64_t *)(v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  uint64_t v12 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v12;
  *uint64_t v12 = v2;
  v12[1] = sub_100033F68;
  return sub_10078ADAC(a1, v6, v7, v8, v10, v11);
}

uint64_t sub_1007AFAB8()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1007AFAF8()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1007AFB20()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 48, 7);
}

uint64_t sub_1007AFB60(uint64_t a1, uint64_t a2)
{
  return sub_100798D94(a1, a2, *(uint64_t (**)(uint64_t))(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_1007AFB78(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_1007AFBE4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1007AFBF4()
{
  return swift_release();
}

uint64_t sub_1007AFBFC(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1007AFC5C()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v32 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v3 = (v32 + 32) & ~v32;
  unint64_t v26 = (((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v27 = type metadata accessor for MACAddress();
  uint64_t v4 = *(void *)(v27 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = (v26 + v5 + 8) & ~v5;
  uint64_t v7 = *(void *)(v4 + 64);
  uint64_t v8 = *(void *)(sub_10000588C((uint64_t *)&unk_101653D50) - 8);
  uint64_t v31 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v9 = (v6 + v7 + v31) & ~v31;
  uint64_t v28 = (*(void *)(v8 + 64) + v5 + v9) & ~v5;
  unint64_t v29 = (v28 + v7 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v30 = v5;
  swift_release();

  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v10(v0 + v3, v1);
  swift_release();
  swift_release();
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v4 + 8);
  v11(v0 + v6, v27);
  uint64_t v12 = v0 + v9;
  uint64_t v13 = v1;
  uint64_t v14 = (int *)type metadata accessor for SharedBeaconRecord(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v14 - 1) + 48))(v12, 1, v14))
  {
    sub_10001CFB8(*(void *)v12, *(void *)(v12 + 8));
    v10(v12 + v14[5], v1);
    uint64_t v15 = v1;
    uint64_t v16 = v10;
    v10(v12 + v14[6], v15);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v17 = v12 + v14[18];
    uint64_t v18 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v17, v18);
    uint64_t v19 = v12 + v14[19];
    uint64_t v20 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
    if (!v20(v19, 1, v13)) {
      v16(v19, v13);
    }
    uint64_t v21 = v12 + v14[20];
    uint64_t v22 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 48))(v21, 1, v22))
    {
      uint64_t v23 = v21 + *(int *)(v22 + 20);
      if (!v20(v23, 1, v13)) {
        v16(v23, v13);
      }
    }
  }
  v11(v0 + v28, v27);
  swift_bridgeObjectRelease();
  unint64_t v24 = *(void *)(v0 + v29 + 8);
  if (((v24 >> 60) | 4) != 0xF) {
    sub_10001CFB8(*(void *)(v0 + v29), v24);
  }
  swift_release();

  return _swift_deallocObject(v0, ((((v29 + 23) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8, v32 | v30 | v31 | 7);
}

uint64_t sub_1007B00E4(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)(type metadata accessor for MACAddress() - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v6 + v8 + 8) & ~v8;
  uint64_t v10 = *(void *)(v7 + 64);
  uint64_t v11 = *(void *)(sub_10000588C((uint64_t *)&unk_101653D50) - 8);
  unint64_t v12 = (v9 + v10 + *(unsigned __int8 *)(v11 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  unint64_t v13 = (*(void *)(v11 + 64) + v8 + v12) & ~v8;
  unint64_t v14 = (v13 + v10 + 23) & 0xFFFFFFFFFFFFFFF8;
  return sub_1007858F8(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), v1 + v4, *(void *)(v1 + v5), *(void *)(v1 + v6), v1 + v9, v1 + v12, v1 + v13, *(void *)(v1 + ((v13 + v10 + 7) & 0xFFFFFFFFFFFFFFF8)), *(unsigned char *)(v1 + ((v13 + v10 + 7) & 0xFFFFFFFFFFFFFFF8) + 8), *(void *)(v1 + v14), *(void *)(v1 + v14 + 8), *(void *)(v1 + ((v14 + 23) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v1 + ((v14 + 23) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_1007B02CC()
{
  uint64_t v2 = *(void *)(type metadata accessor for WildModeAssociationRecord(0) - 8);
  char v3 = *(unsigned char *)(v0 + 16);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v5 = swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *(void *)uint64_t v5 = v1;
  *(void *)(v5 + 8) = sub_100033F68;
  *(void *)(v5 + 16) = v4;
  *(unsigned char *)(v5 + 56) = v3;
  return _swift_task_switch(sub_100789950, 0, 0);
}

uint64_t sub_1007B03B4()
{
  uint64_t v1 = type metadata accessor for UUID();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v32 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v3 = (v32 + 24) & ~v32;
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v26 = type metadata accessor for MACAddress();
  uint64_t v5 = *(void *)(v26 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (v6 + 8 + v4) & ~v6;
  uint64_t v8 = *(void *)(v5 + 64);
  uint64_t v9 = *(void *)(sub_10000588C((uint64_t *)&unk_101653D50) - 8);
  uint64_t v31 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v10 = (v7 + v8 + v31) & ~v31;
  unint64_t v28 = (*(void *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v29 = (v6 + 8 + v28) & ~v6;
  unint64_t v30 = (((v29 + v8 + 23) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  uint64_t v25 = v2;
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v11(v0 + v3, v1);
  swift_release();
  uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v27(v0 + v7, v26);
  uint64_t v12 = v0 + v10;
  unint64_t v13 = (int *)type metadata accessor for SharedBeaconRecord(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v13 - 1) + 48))(v0 + v10, 1, v13))
  {
    uint64_t v23 = v6;
    sub_10001CFB8(*(void *)v12, *(void *)(v12 + 8));
    v11(v12 + v13[5], v1);
    unint64_t v24 = v11;
    v11(v12 + v13[6], v1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v14 = v12 + v13[18];
    uint64_t v15 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v14, v15);
    uint64_t v16 = v12 + v13[19];
    uint64_t v17 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
    if (!v17(v16, 1, v1)) {
      v24(v16, v1);
    }
    uint64_t v18 = v12 + v13[20];
    uint64_t v19 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
    uint64_t v6 = v23;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 48))(v18, 1, v19))
    {
      uint64_t v20 = v18 + *(int *)(v19 + 20);
      if (!v17(v20, 1, v1)) {
        v24(v20, v1);
      }
    }
  }

  v27(v0 + v29, v26);
  swift_bridgeObjectRelease();
  swift_release();
  unint64_t v21 = *(void *)(v0 + v30 + 8);
  if (((v21 >> 60) | 4) != 0xF) {
    sub_10001CFB8(*(void *)(v0 + v30), v21);
  }
  swift_release();

  return _swift_deallocObject(v0, ((v30 + 23) & 0xFFFFFFFFFFFFFFF8) + 16, v32 | v6 | v31 | 7);
}

uint64_t sub_1007B0844(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)(type metadata accessor for MACAddress() - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v7 + 8 + v5) & ~v7;
  uint64_t v9 = *(void *)(v6 + 64);
  uint64_t v10 = *(void *)(sub_10000588C((uint64_t *)&unk_101653D50) - 8);
  unint64_t v11 = (v8 + v9 + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unint64_t v12 = (*(void *)(v10 + 64) + v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v13 = (v7 + 8 + v12) & ~v7;
  unint64_t v14 = (v13 + v9 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = (v14 + 15) & 0xFFFFFFFFFFFFFFF8;
  return sub_100787900(a1, *(void *)(v1 + 16), v1 + v4, *(void *)(v1 + v5), (uint8_t *)(v1 + v8), v1 + v11, *(void **)(v1 + v12), v1 + v13, *(void *)(v1 + ((v13 + v9 + 7) & 0xFFFFFFFFFFFFFFF8)), *(unsigned char *)(v1 + ((v13 + v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8), *(void *)(v1 + v14), *(void *)(v1 + v15), *(void *)(v1 + v15 + 8), *(void *)(v1 + ((v15 + 23) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v1 + ((v15 + 23) & 0xFFFFFFFFFFFFFFF8) + 8));
}

uint64_t sub_1007B0A2C()
{
  uint64_t v1 = v0;
  uint64_t v2 = (int *)type metadata accessor for WildModeAssociationRecord(0);
  uint64_t v45 = *(unsigned __int8 *)(*((void *)v2 - 1) + 80);
  uint64_t v43 = *(void *)(*((void *)v2 - 1) + 64);
  uint64_t v44 = (v45 + 17) & ~v45;
  uint64_t v3 = v0 + v44;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v6(v3, v4);
  uint64_t v7 = v3 + v2[5];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v7, 1, v4)) {
    v6(v7, v4);
  }
  uint64_t v8 = v3 + v2[7];
  uint64_t v9 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease();
  uint64_t v10 = v3 + v2[10];
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  unint64_t v46 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  v46(v10, v11);
  uint64_t v13 = v3 + v2[11];
  uint64_t v42 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  if (!v42(v13, 1, v11)) {
    v46(v13, v11);
  }
  swift_bridgeObjectRelease();
  uint64_t v14 = v3 + v2[14];
  uint64_t v15 = type metadata accessor for AccessoryMetadata(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v14, 1, v15))
  {
    v6(v14, v4);
    sub_10001CFB8(*(void *)(v14 + *(int *)(v15 + 20)), *(void *)(v14 + *(int *)(v15 + 20) + 8));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v16 = v3 + v2[15];
  uint64_t v17 = (int *)type metadata accessor for AccessoryProductInfo();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v17 - 1) + 48))(v16, 1, v17))
  {
    uint64_t v40 = v11;
    uint64_t v41 = v1;
    uint64_t v18 = v16 + v17[5];
    uint64_t v19 = type metadata accessor for ServerStatusCode();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v18, v19);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v20 = v16 + v17[16];
    uint64_t v21 = type metadata accessor for URL();
    uint64_t v22 = *(void *)(v21 - 8);
    uint64_t v23 = *(unsigned int (**)(void))(v22 + 48);
    if (!((unsigned int (*)(uint64_t, uint64_t, uint64_t))v23)(v20, 1, v21)) {
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v20, v21);
    }
    uint64_t v24 = v16 + v17[17];
    uint64_t v39 = v23;
    if (!((unsigned int (*)(uint64_t, uint64_t, uint64_t))v23)(v24, 1, v21)) {
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v24, v21);
    }
    swift_bridgeObjectRelease();
    uint64_t v25 = v16 + v17[20];
    uint64_t v26 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 48))(v25, 1, v26))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v37 = v25 + *(int *)(v26 + 40);
      if (!v39()) {
        (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v37, v21);
      }
      uint64_t v38 = v25 + *(int *)(v26 + 44);
      if (!v39()) {
        (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v38, v21);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t v27 = (uint64_t *)(v16 + v17[23]);
    unint64_t v28 = v27[1];
    if (v28 >> 60 != 15) {
      sub_10001CFB8(*v27, v28);
    }
    uint64_t v29 = (uint64_t *)(v16 + v17[24]);
    unint64_t v30 = v29[1];
    if (v30 >> 60 != 15) {
      sub_10001CFB8(*v29, v30);
    }
    uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
    v31(v16 + v17[25], v21);
    v31(v16 + v17[26], v21);
    v31(v16 + v17[27], v21);
    v31(v16 + v17[28], v21);
    v31(v16 + v17[29], v21);
    v31(v16 + v17[30], v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v31(v16 + v17[37], v21);
    v31(v16 + v17[38], v21);
    v31(v16 + v17[39], v21);
    v31(v16 + v17[40], v21);
    v31(v16 + v17[41], v21);
    v31(v16 + v17[42], v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v11 = v40;
    uint64_t v1 = v41;
  }
  swift_bridgeObjectRelease();
  uint64_t v32 = v3 + v2[18];
  if (!v42(v32, 1, v11)) {
    v46(v32, v11);
  }
  uint64_t v33 = v3 + v2[19];
  if (!v42(v33, 1, v11)) {
    v46(v33, v11);
  }
  uint64_t v34 = (uint64_t *)(v3 + v2[20]);
  unint64_t v35 = v34[1];
  if (((v35 >> 60) | 4) != 0xF) {
    sub_10001CFB8(*v34, v35);
  }

  return _swift_deallocObject(v1, v44 + v43, v45 | 7);
}

uint64_t sub_1007B1278()
{
  uint64_t v2 = *(void *)(type metadata accessor for WildModeAssociationRecord(0) - 8);
  char v3 = *(unsigned char *)(v0 + 16);
  uint64_t v4 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  uint64_t v5 = swift_task_alloc();
  *(void *)(v1 + 16) = v5;
  *(void *)uint64_t v5 = v1;
  *(void *)(v5 + 8) = sub_10001D2E4;
  *(void *)(v5 + 16) = v4;
  *(unsigned char *)(v5 + 56) = v3;
  return _swift_task_switch(sub_100788DD4, 0, 0);
}

void *sub_1007B1360()
{
  return sub_1007891C8(*(unsigned char *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1007B136C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void *sub_1007B13D4()
{
  return sub_100789B78(*(unsigned char *)(v0 + 16), *(void *)(v0 + 24));
}

void sub_1007B13E0(uint64_t a1, uint64_t a2)
{
  sub_1007954F0(a1, a2, *(void *)(v2 + 16));
}

uint64_t sub_1007B13E8()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

void sub_1007B1420(void *a1, unint64_t a2)
{
  sub_100781FF0(a1, a2, *(void (**)(uint64_t, void *))(v2 + 16));
}

uint64_t sub_1007B1448()
{
  swift_release();

  return _swift_deallocObject(v0, 40, 7);
}

uint64_t sub_1007B1488(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(v1 + 16))(*(void *)(v1 + 32), a1);
}

uint64_t sub_1007B14C8()
{
  uint64_t v1 = v0;
  uint64_t v2 = (int *)type metadata accessor for WildModeAssociationRecord(0);
  uint64_t v45 = *(unsigned __int8 *)(*((void *)v2 - 1) + 80);
  uint64_t v43 = *(void *)(*((void *)v2 - 1) + 64);
  uint64_t v44 = (v45 + 16) & ~v45;
  uint64_t v3 = v0 + v44;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v6(v3, v4);
  uint64_t v7 = v3 + v2[5];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v7, 1, v4)) {
    v6(v7, v4);
  }
  uint64_t v8 = v3 + v2[7];
  uint64_t v9 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease();
  uint64_t v10 = v3 + v2[10];
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  unint64_t v46 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  v46(v10, v11);
  uint64_t v13 = v3 + v2[11];
  uint64_t v42 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  if (!v42(v13, 1, v11)) {
    v46(v13, v11);
  }
  swift_bridgeObjectRelease();
  uint64_t v14 = v3 + v2[14];
  uint64_t v15 = type metadata accessor for AccessoryMetadata(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v14, 1, v15))
  {
    v6(v14, v4);
    sub_10001CFB8(*(void *)(v14 + *(int *)(v15 + 20)), *(void *)(v14 + *(int *)(v15 + 20) + 8));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v16 = v3 + v2[15];
  uint64_t v17 = (int *)type metadata accessor for AccessoryProductInfo();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v17 - 1) + 48))(v16, 1, v17))
  {
    uint64_t v40 = v11;
    uint64_t v41 = v1;
    uint64_t v18 = v16 + v17[5];
    uint64_t v19 = type metadata accessor for ServerStatusCode();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v18, v19);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v20 = v16 + v17[16];
    uint64_t v21 = type metadata accessor for URL();
    uint64_t v22 = *(void *)(v21 - 8);
    uint64_t v23 = *(unsigned int (**)(void))(v22 + 48);
    if (!((unsigned int (*)(uint64_t, uint64_t, uint64_t))v23)(v20, 1, v21)) {
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v20, v21);
    }
    uint64_t v24 = v16 + v17[17];
    uint64_t v39 = v23;
    if (!((unsigned int (*)(uint64_t, uint64_t, uint64_t))v23)(v24, 1, v21)) {
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v24, v21);
    }
    swift_bridgeObjectRelease();
    uint64_t v25 = v16 + v17[20];
    uint64_t v26 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 48))(v25, 1, v26))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v37 = v25 + *(int *)(v26 + 40);
      if (!v39()) {
        (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v37, v21);
      }
      uint64_t v38 = v25 + *(int *)(v26 + 44);
      if (!v39()) {
        (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v38, v21);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t v27 = (uint64_t *)(v16 + v17[23]);
    unint64_t v28 = v27[1];
    if (v28 >> 60 != 15) {
      sub_10001CFB8(*v27, v28);
    }
    uint64_t v29 = (uint64_t *)(v16 + v17[24]);
    unint64_t v30 = v29[1];
    if (v30 >> 60 != 15) {
      sub_10001CFB8(*v29, v30);
    }
    uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
    v31(v16 + v17[25], v21);
    v31(v16 + v17[26], v21);
    v31(v16 + v17[27], v21);
    v31(v16 + v17[28], v21);
    v31(v16 + v17[29], v21);
    v31(v16 + v17[30], v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v31(v16 + v17[37], v21);
    v31(v16 + v17[38], v21);
    v31(v16 + v17[39], v21);
    v31(v16 + v17[40], v21);
    v31(v16 + v17[41], v21);
    v31(v16 + v17[42], v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v11 = v40;
    uint64_t v1 = v41;
  }
  swift_bridgeObjectRelease();
  uint64_t v32 = v3 + v2[18];
  if (!v42(v32, 1, v11)) {
    v46(v32, v11);
  }
  uint64_t v33 = v3 + v2[19];
  if (!v42(v33, 1, v11)) {
    v46(v33, v11);
  }
  uint64_t v34 = (uint64_t *)(v3 + v2[20]);
  unint64_t v35 = v34[1];
  if (((v35 >> 60) | 4) != 0xF) {
    sub_10001CFB8(*v34, v35);
  }
  swift_release();
  swift_release();

  return _swift_deallocObject(v1, ((((((v43 + v44 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 8, v45 | 7);
}

void sub_1007B1D4C(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for WildModeAssociationRecord(0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)(v1 + v5);
  uint64_t v8 = *(void (**)(uint64_t))(v1 + v6);
  uint64_t v9 = *(void *)(v1 + v6 + 8);

  sub_100791494(a1, v1 + v4, v7, v8, v9);
}

uint64_t sub_1007B1E08()
{
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  if (*(void *)(v0 + 56)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 72, 7);
}

uint64_t sub_1007B1E54()
{
  uint64_t v1 = type metadata accessor for MACAddress();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = *(void *)(sub_10000588C((uint64_t *)&unk_101653D50) - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v5 + v4 + v7 + 1) & ~v7;
  uint64_t v9 = *(void *)(v6 + 64);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  uint64_t v10 = v0 + v8;
  uint64_t v11 = (int *)type metadata accessor for SharedBeaconRecord(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v11 - 1) + 48))(v0 + v8, 1, v11))
  {
    uint64_t v25 = v8;
    uint64_t v26 = v9;
    sub_10001CFB8(*(void *)v10, *(void *)(v10 + 8));
    uint64_t v12 = v10 + v11[5];
    uint64_t v13 = type metadata accessor for UUID();
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v15(v12, v13);
    uint64_t v24 = v15;
    v15(v10 + v11[6], v13);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v16 = v10 + v11[18];
    uint64_t v17 = type metadata accessor for Date();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(v16, v17);
    uint64_t v18 = v10 + v11[19];
    uint64_t v19 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
    if (!v19(v18, 1, v13)) {
      v15(v18, v13);
    }
    uint64_t v20 = v10 + v11[20];
    uint64_t v21 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0);
    uint64_t v8 = v25;
    uint64_t v9 = v26;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 48))(v20, 1, v21))
    {
      uint64_t v22 = v20 + *(int *)(v21 + 20);
      if (!v19(v22, 1, v13)) {
        v24(v22, v13);
      }
    }
  }

  return _swift_deallocObject(v0, v9 + v8 + 1, v3 | v7 | 7);
}

uint64_t sub_1007B21B4(void (*a1)(char *), uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for MACAddress() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = v6 + *(void *)(v5 + 64);
  uint64_t v8 = *(void *)(sub_10000588C((uint64_t *)&unk_101653D50) - 8);
  unint64_t v9 = (v7 + *(unsigned __int8 *)(v8 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v2 + 16);
  uint64_t v11 = v2 + v6;
  uint64_t v12 = v2 + v9;
  char v13 = *(unsigned char *)(v2 + v9 + *(void *)(v8 + 64));
  Swift::UInt8 v14 = *(unsigned char *)(v2 + v7);
  swift_retain();
  sub_1007A9F74(v11, v14, v12, v13, v10, a1, a2);

  return swift_release();
}

uint64_t sub_1007B22FC()
{
  swift_release();
  swift_release();

  return _swift_deallocObject(v0, 33, 7);
}

uint64_t sub_1007B2340()
{
  uint64_t v1 = v0;
  uint64_t v2 = (int *)type metadata accessor for WildModeAssociationRecord(0);
  uint64_t v43 = *(unsigned __int8 *)(*((void *)v2 - 1) + 80);
  uint64_t v41 = *(void *)(*((void *)v2 - 1) + 64);
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v42 = (v43 + 80) & ~v43;
  uint64_t v3 = v0 + v42;
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v6(v0 + v42, v4);
  uint64_t v7 = v0 + v42 + v2[5];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v7, 1, v4)) {
    v6(v7, v4);
  }
  uint64_t v8 = v3 + v2[7];
  uint64_t v9 = type metadata accessor for MACAddress();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
  swift_bridgeObjectRelease();
  uint64_t v10 = v3 + v2[10];
  uint64_t v11 = type metadata accessor for Date();
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v44 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  v44(v10, v11);
  uint64_t v13 = v3 + v2[11];
  uint64_t v40 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  if (!v40(v13, 1, v11)) {
    v44(v13, v11);
  }
  swift_bridgeObjectRelease();
  uint64_t v14 = v3 + v2[14];
  uint64_t v15 = type metadata accessor for AccessoryMetadata(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v14, 1, v15))
  {
    v6(v14, v4);
    sub_10001CFB8(*(void *)(v14 + *(int *)(v15 + 20)), *(void *)(v14 + *(int *)(v15 + 20) + 8));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t v16 = v3 + v2[15];
  uint64_t v17 = (int *)type metadata accessor for AccessoryProductInfo();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v17 - 1) + 48))(v16, 1, v17))
  {
    uint64_t v18 = v16 + v17[5];
    uint64_t v19 = type metadata accessor for ServerStatusCode();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v18, v19);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v20 = v16 + v17[16];
    uint64_t v21 = type metadata accessor for URL();
    uint64_t v22 = *(void *)(v21 - 8);
    uint64_t v23 = *(unsigned int (**)(void))(v22 + 48);
    if (!((unsigned int (*)(uint64_t, uint64_t, uint64_t))v23)(v20, 1, v21)) {
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v20, v21);
    }
    uint64_t v39 = v1;
    uint64_t v24 = v16 + v17[17];
    if (!((unsigned int (*)(uint64_t, uint64_t, uint64_t))v23)(v24, 1, v21)) {
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v24, v21);
    }
    swift_bridgeObjectRelease();
    uint64_t v25 = v16 + v17[20];
    uint64_t v26 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 48))(v25, 1, v26))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v37 = v25 + *(int *)(v26 + 40);
      if (!v23()) {
        (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v37, v21);
      }
      uint64_t v38 = v25 + *(int *)(v26 + 44);
      if (!v23()) {
        (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v38, v21);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t v27 = (uint64_t *)(v16 + v17[23]);
    unint64_t v28 = v27[1];
    uint64_t v1 = v39;
    if (v28 >> 60 != 15) {
      sub_10001CFB8(*v27, v28);
    }
    uint64_t v29 = (uint64_t *)(v16 + v17[24]);
    unint64_t v30 = v29[1];
    if (v30 >> 60 != 15) {
      sub_10001CFB8(*v29, v30);
    }
    uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
    v31(v16 + v17[25], v21);
    v31(v16 + v17[26], v21);
    v31(v16 + v17[27], v21);
    v31(v16 + v17[28], v21);
    v31(v16 + v17[29], v21);
    v31(v16 + v17[30], v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v31(v16 + v17[37], v21);
    v31(v16 + v17[38], v21);
    v31(v16 + v17[39], v21);
    v31(v16 + v17[40], v21);
    v31(v16 + v17[41], v21);
    v31(v16 + v17[42], v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  uint64_t v32 = v3 + v2[18];
  if (!v40(v32, 1, v11)) {
    v44(v32, v11);
  }
  uint64_t v33 = v3 + v2[19];
  if (!v40(v33, 1, v11)) {
    v44(v33, v11);
  }
  uint64_t v34 = (uint64_t *)(v3 + v2[20]);
  unint64_t v35 = v34[1];
  if (((v35 >> 60) | 4) != 0xF) {
    sub_10001CFB8(*v34, v35);
  }

  return _swift_deallocObject(v1, v42 + v41, v43 | 7);
}

void sub_1007B2BC8(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for WildModeAssociationRecord(0) - 8);
  sub_10079352C(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void (**)(uint64_t, void *))(v1 + 64), *(void *)(v1 + 72), v1 + ((*(unsigned __int8 *)(v3 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)));
}

uint64_t sub_1007B2C4C()
{
  uint64_t v1 = type metadata accessor for MACAddress();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 9;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1007B2CF0(void (*a1)(void), uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for MACAddress() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = v2 + v6;
  uint64_t v8 = v2 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v9 = *(void *)v8;
  int v10 = *(unsigned __int8 *)(v8 + 8);

  return sub_1011D0BA0(a1, a2, v7, v9, v10);
}

uint64_t sub_1007B2DA8()
{
  uint64_t v1 = type metadata accessor for MACAddress();
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  swift_unknownObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();

  return _swift_deallocObject(v0, v6, v5);
}

unsigned char *storeEnumTagSinglePayload for UTError(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1007B2F60);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UTError()
{
  return &type metadata for UTError;
}

uint64_t getEnumTagSinglePayload for UnauthorizedTrackingAdvertisementType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFA)
  {
    unsigned int v2 = a2 + 6;
    if (a2 + 6 >= 0xFFFF00) {
      unsigned int v3 = 4;
    }
    else {
      unsigned int v3 = 2;
    }
    if (v2 >> 8 < 0xFF) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x100) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = a1[1];
        if (!a1[1]) {
          break;
        }
        return (*a1 | (v5 << 8)) - 6;
      case 2:
        int v5 = *(unsigned __int16 *)(a1 + 1);
        if (*(_WORD *)(a1 + 1)) {
          return (*a1 | (v5 << 8)) - 6;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1007B3048);
      case 4:
        int v5 = *(_DWORD *)(a1 + 1);
        if (!v5) {
          break;
        }
        return (*a1 | (v5 << 8)) - 6;
      default:
        break;
    }
  }
  unsigned int v7 = *a1;
  if (v7 >= 4) {
    unsigned int v8 = v7 - 3;
  }
  else {
    unsigned int v8 = 0;
  }
  if (v8 >= 4) {
    return v8 - 3;
  }
  else {
    return 0;
  }
}

unsigned char *storeEnumTagSinglePayload for UnauthorizedTrackingAdvertisementType(unsigned char *result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 6;
  if (a3 + 6 >= 0xFFFF00) {
    int v4 = 4;
  }
  else {
    int v4 = 2;
  }
  if (v3 >> 8 < 0xFF) {
    int v4 = 1;
  }
  if (v3 >= 0x100) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xFA) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v7 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v6)
    {
      case 1:
        result[1] = v7;
        break;
      case 2:
        *(_WORD *)(result + 1) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        JUMPOUT(0x1007B3130);
      case 4:
        *(_DWORD *)(result + 1) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

uint64_t sub_1007B3158(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  if (v1 >= 4) {
    return v1 - 3;
  }
  else {
    return 0;
  }
}

unsigned char *sub_1007B316C(unsigned char *result, int a2)
{
  if (a2) {
    *unint64_t result = a2 + 3;
  }
  return result;
}

ValueMetadata *type metadata accessor for UnauthorizedTrackingAdvertisementType()
{
  return &type metadata for UnauthorizedTrackingAdvertisementType;
}

unint64_t sub_1007B3190()
{
  unint64_t result = qword_10164D860;
  if (!qword_10164D860)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164D860);
  }
  return result;
}

void sub_1007B324C()
{
}

uint64_t sub_1007B326C(uint64_t a1)
{
  uint64_t v2 = sub_10000588C(&qword_10164D9C8);
  __chkstk_darwin(v2);
  int v4 = (char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = _swiftEmptyArrayStorage;
  uint64_t v5 = a1 + 64;
  uint64_t v6 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v7 = -1;
  if (v6 < 64) {
    uint64_t v7 = ~(-1 << v6);
  }
  unint64_t v8 = v7 & *(void *)(a1 + 64);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v11 = 0;
  while (1)
  {
    if (v8)
    {
      unint64_t v12 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v13 = v12 | (v11 << 6);
      goto LABEL_5;
    }
    int64_t v17 = v11 + 1;
    if (__OFADD__(v11, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v17 >= v9) {
      goto LABEL_23;
    }
    unint64_t v18 = *(void *)(v5 + 8 * v17);
    ++v11;
    if (!v18)
    {
      int64_t v11 = v17 + 1;
      if (v17 + 1 >= v9) {
        goto LABEL_23;
      }
      unint64_t v18 = *(void *)(v5 + 8 * v11);
      if (!v18)
      {
        int64_t v11 = v17 + 2;
        if (v17 + 2 >= v9) {
          goto LABEL_23;
        }
        unint64_t v18 = *(void *)(v5 + 8 * v11);
        if (!v18)
        {
          int64_t v11 = v17 + 3;
          if (v17 + 3 >= v9) {
            goto LABEL_23;
          }
          unint64_t v18 = *(void *)(v5 + 8 * v11);
          if (!v18) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v8 = (v18 - 1) & v18;
    unint64_t v13 = __clz(__rbit64(v18)) + (v11 << 6);
LABEL_5:
    uint64_t v14 = *(void *)(a1 + 48);
    uint64_t v15 = type metadata accessor for UUID();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v4, v14 + *(void *)(*(void *)(v15 - 8) + 72) * v13, v15);
    uint64_t v16 = *(void *)(*(void *)(a1 + 56) + 8 * v13);
    *(void *)&v4[*(int *)(v2 + 48)] = v16;
    swift_bridgeObjectRetain_n();
    sub_1007B8344((uint64_t)v4);
    uint64_t result = sub_1004457F4(v16);
  }
  int64_t v19 = v17 + 4;
  if (v19 >= v9)
  {
LABEL_23:
    swift_release();
    return (uint64_t)v21;
  }
  unint64_t v18 = *(void *)(v5 + 8 * v19);
  if (v18)
  {
    int64_t v11 = v19;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v11 = v19 + 1;
    if (__OFADD__(v19, 1)) {
      break;
    }
    if (v11 >= v9) {
      goto LABEL_23;
    }
    unint64_t v18 = *(void *)(v5 + 8 * v11);
    ++v19;
    if (v18) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t sub_1007B34A0()
{
  uint64_t v0 = type metadata accessor for URL();
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)&v5 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_101636CC0 != -1) {
    swift_once();
  }
  sub_100010324(v0, (uint64_t)qword_10170E338);
  URL.appendingPathComponent(_:)();
  type metadata accessor for BeaconObservationStore();
  uint64_t v3 = swift_allocObject();
  uint64_t result = sub_1007B3E18((uint64_t)v2);
  qword_10170E330 = v3;
  return result;
}

uint64_t sub_1007B3598()
{
  uint64_t v0 = type metadata accessor for URL();
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  int v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10001E384(v2, qword_10170E338);
  sub_100010324(v0, (uint64_t)qword_10170E338);
  type metadata accessor for BeaconStore(0);
  sub_100A9DB34((uint64_t)v4);
  URL.appendingPathComponent(_:isDirectory:)();
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t sub_1007B36B4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, a1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsURL, v5);
  id v9 = [self defaultManager];
  URL.path.getter();
  NSString v10 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned __int8 v11 = [v9 fileExistsAtPath:v10];

  if (v11)
  {
    uint64_t v29 = a1;
    uint64_t v12 = Data.init(contentsOf:options:)();
    if (v2)
    {
      uint64_t v27 = a2;
      uint64_t v28 = 0;
      int v26 = static os_log_type_t.error.getter();
      if (qword_101636CC8 != -1) {
        swift_once();
      }
      v25[1] = qword_10170E350;
      sub_10000588C((uint64_t *)&unk_10163AD00);
      uint64_t v16 = swift_allocObject();
      *(_OWORD *)(v16 + 16) = xmmword_101347BA0;
      sub_1007B7CDC((unint64_t *)&qword_1016605A0, (void (*)(uint64_t))&type metadata accessor for URL);
      uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter();
      uint64_t v19 = v18;
      *(void *)(v16 + 56) = &type metadata for String;
      unint64_t v20 = sub_10000B4CC();
      *(void *)(v16 + 64) = v20;
      *(void *)(v16 + 32) = v17;
      *(void *)(v16 + 40) = v19;
      unint64_t v30 = v2;
      swift_errorRetain();
      sub_10000588C(&qword_101638D40);
      uint64_t v21 = String.init<A>(describing:)();
      *(void *)(v16 + 96) = &type metadata for String;
      *(void *)(v16 + 104) = v20;
      *(void *)(v16 + 72) = v21;
      *(void *)(v16 + 80) = v22;
      os_log(_:dso:log:_:_:)();
      swift_errorRelease();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      uint64_t v24 = &_swiftEmptyDictionarySingleton;
      a2 = v27;
    }
    else
    {
      uint64_t v14 = v12;
      unint64_t v15 = v13;
      type metadata accessor for PropertyListDecoder();
      swift_allocObject();
      PropertyListDecoder.init()();
      sub_10000588C(&qword_101655540);
      sub_1007B7940();
      dispatch thunk of PropertyListDecoder.decode<A>(_:from:)();
      uint64_t v28 = 0;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
      swift_release();
      sub_10001CFB8(v14, v15);
      uint64_t v24 = v30;
    }
    *(void *)(v29 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsMap) = v24;
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v24 = &_swiftEmptyDictionarySingleton;
  }
  *a2 = v24;
  return result;
}

uint64_t sub_1007B3A88(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  int v26 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = __chkstk_darwin(v6);
  NSString v10 = (char *)&v24 - v9;
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v24 - v11;
  sub_10001D4B0(0, (unint64_t *)&qword_101642980);
  uint64_t v24 = *(void (**)(char *))(v5 + 16);
  uint64_t v25 = a1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsURL;
  v24(v10);
  URL.deletingLastPathComponent()();
  unint64_t v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v10, v4);
  static NSFileManager.createDirectoryIfNecessary(url:attributes:)();
  v13(v12, v4);
  type metadata accessor for PropertyListEncoder();
  swift_allocObject();
  PropertyListEncoder.init()();
  uint64_t v28 = a2;
  sub_10000588C(&qword_101655540);
  sub_1007B778C();
  uint64_t v14 = v27;
  uint64_t v15 = dispatch thunk of PropertyListEncoder.encode<A>(_:)();
  if (v14)
  {
    swift_release();
    static os_log_type_t.error.getter();
    if (qword_101636CC8 != -1) {
      swift_once();
    }
    sub_10000588C((uint64_t *)&unk_10163AD00);
    uint64_t v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_101342130;
    uint64_t v28 = v14;
    swift_errorRetain();
    sub_10000588C(&qword_101638D40);
    uint64_t v20 = String.init<A>(describing:)();
    uint64_t v22 = v21;
    *(void *)(v19 + 56) = &type metadata for String;
    *(void *)(v19 + 64) = sub_10000B4CC();
    *(void *)(v19 + 32) = v20;
    *(void *)(v19 + 40) = v22;
    os_log(_:dso:log:_:_:)();
    swift_bridgeObjectRelease();
    return swift_errorRelease();
  }
  else
  {
    uint64_t v17 = v15;
    unint64_t v18 = v16;
    ((void (*)(char *, uint64_t, uint64_t))v24)(v26, v25, v4);
    Data.write(to:excludeFromBackup:options:)();
    v13(v26, v4);
    sub_10001CFB8(v17, v18);
    return swift_release();
  }
}

uint64_t sub_1007B3E18(uint64_t a1)
{
  uint64_t v26 = a1;
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.Attributes();
  __chkstk_darwin(v2);
  uint64_t v3 = type metadata accessor for DispatchQoS();
  __chkstk_darwin(v3 - 8);
  uint64_t v28 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency();
  uint64_t v4 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v6 = (char *)v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = v1;
  *(void *)(v1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_systemClockChangedSubscription) = 0;
  PressuredExitTransactionManager.init()();
  uint64_t v24 = OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_subscriptionQueue;
  uint64_t v27 = sub_10001D4B0(0, (unint64_t *)&qword_1016376E0);
  unsigned int v22 = enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:);
  uint64_t v21 = *(void (**)(char *))(v4 + 104);
  uint64_t v23 = v4 + 104;
  v21(v6);
  static DispatchQoS.unspecified.getter();
  unint64_t v30 = _swiftEmptyArrayStorage;
  v20[3] = sub_1007B7CDC((unint64_t *)&qword_101638CC0, (void (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes);
  uint64_t v29 = sub_10000588C((uint64_t *)&unk_1016376F0);
  v20[1] = sub_100062734((unint64_t *)&qword_101638CD0, (uint64_t *)&unk_1016376F0);
  uint64_t v20[2] = v2;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  uint64_t v7 = v6;
  uint64_t v8 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v9 = v25;
  *(void *)(v25 + v24) = v8;
  *(void *)(v9 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_subscriptions) = _swiftEmptyArrayStorage;
  uint64_t v24 = OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_subscriptionPublishQueue;
  uint64_t v10 = v22;
  uint64_t v11 = v21;
  ((void (*)(char *, void, uint64_t))v21)(v7, v22, v28);
  static DispatchQoS.unspecified.getter();
  unint64_t v30 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)(v9 + v24) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  uint64_t v24 = OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsConcurrentQueue;
  ((void (*)(char *, uint64_t, uint64_t))v11)(v7, v10, v28);
  static DispatchQoS.unspecified.getter();
  unint64_t v30 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)();
  *(void *)(v9 + v24) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)();
  *(void *)(v9 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsMap) = 0;
  uint64_t v12 = OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_automaticTimeEnabled;
  if (qword_101637680 != -1) {
    swift_once();
  }
  swift_retain();
  AnyCurrentValuePublisher.value.getter();
  swift_release();
  *(unsigned char *)(v9 + v12) = (_BYTE)v30;
  uint64_t v13 = v9 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsURL;
  uint64_t v14 = type metadata accessor for URL();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = v26;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 16))(v13, v26, v14);
  swift_retain();
  uint64_t v17 = AnyCurrentValuePublisher.publisher.getter();
  swift_release();
  unint64_t v30 = (void *)v17;
  swift_allocObject();
  swift_weakInit();
  sub_10000588C(&qword_10163FE78);
  sub_100062734(&qword_10163FE80, &qword_10163FE78);
  uint64_t v18 = Publisher<>.sink(receiveValue:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v16, v14);
  swift_release();
  *(void *)(v9 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_systemClockChangedSubscription) = v18;
  swift_release();
  return v9;
}

uint64_t sub_1007B43F0(char *a1)
{
  uint64_t v2 = type metadata accessor for DispatchQoS();
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&aBlock[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&aBlock[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v10 = *a1;
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    static DispatchWorkItemFlags.barrier.getter();
    uint64_t v12 = swift_allocObject();
    swift_weakInit();
    uint64_t v13 = swift_allocObject();
    *(void *)(v13 + 16) = v12;
    *(unsigned char *)(v13 + 24) = v10;
    aBlock[4] = sub_1007B740C;
    uint64_t aBlock[5] = v13;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256;
    void aBlock[2] = sub_1004B5480;
    aBlock[3] = &unk_1015D5050;
    uint64_t v14 = _Block_copy(aBlock);
    swift_retain();
    static DispatchQoS.unspecified.getter();
    OS_dispatch_queue.async(group:qos:flags:execute:)();
    _Block_release(v14);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1007B4688(uint64_t a1, char a2)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_1007B46E8(a2 & 1);
    return swift_release();
  }
  return result;
}

uint64_t sub_1007B46E8(char a1)
{
  uint64_t v4 = type metadata accessor for DispatchPredicate();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (uint64_t *)((char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = *(void **)(v1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsConcurrentQueue);
  *uint64_t v7 = v8;
  (*(void (**)(void *, void, uint64_t))(v5 + 104))(v7, enum case for DispatchPredicate.onQueue(_:), v4);
  id v9 = v8;
  LOBYTE(v8) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  if ((v8 & 1) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t v2 = OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_automaticTimeEnabled;
  int v10 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_automaticTimeEnabled);
  static os_log_type_t.default.getter();
  if (v10 != (a1 & 1))
  {
    if (qword_101636CC8 == -1)
    {
LABEL_4:
      os_log(_:dso:log:_:_:)();
      *(unsigned char *)(v1 + v2) = a1 & 1;
      sub_1007B7630((uint64_t)&_swiftEmptyDictionarySingleton);
      static os_log_type_t.default.getter();
      return os_log(_:dso:log:_:_:)();
    }
LABEL_9:
    swift_once();
    goto LABEL_4;
  }
  if (qword_101636CC8 != -1) {
    swift_once();
  }
  sub_10000588C((uint64_t *)&unk_10163AD00);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_101342130;
  *(void *)(v12 + 56) = &type metadata for Bool;
  *(void *)(v12 + 64) = &protocol witness table for Bool;
  *(unsigned char *)(v12 + 32) = a1 & 1;
  os_log(_:dso:log:_:_:)();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1007B4970@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(char *)@<X2>, void *a3@<X3>, void *a4@<X8>)
{
  sub_10000588C(&qword_101655540);
  OS_dispatch_queue.sync<A>(execute:)();
  if (*(void *)(v14 + 16) && (unint64_t v8 = sub_1007240CC(a1), (v9 & 1) != 0))
  {
    uint64_t v10 = *(void *)(*(void *)(v14 + 56) + 8 * v8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v11 = sub_1007100C0(v10);
    swift_bridgeObjectRelease();
    uint64_t v12 = (void *)sub_100B752E8((uint64_t)v11);
    uint64_t result = swift_release();
    if (a2)
    {
      swift_retain();
      uint64_t v12 = (void *)sub_1000A43B4(a2, a3, (uint64_t)v12);
      uint64_t result = sub_1000A1534((uint64_t)a2);
    }
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v12 = _swiftEmptyArrayStorage;
  }
  *a4 = v12;
  return result;
}

void sub_1007B4AA8(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = (void *)type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(v5 - 1);
  __chkstk_darwin(v5);
  unint64_t v8 = (uint64_t *)((char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (*(void *)(a1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsMap))
  {
    uint64_t v9 = *(void *)(a1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsMap);
LABEL_6:
    *a2 = v9;
    swift_bridgeObjectRetain();
    return;
  }
  uint64_t v10 = *(void **)(a1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsConcurrentQueue);
  void *v8 = v10;
  (*(void (**)(void *, void, void *))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  id v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, void *))(v6 + 8))(v8, v5);
  if (v10)
  {
    sub_1007B36B4(a1, &v13);
    if (!v2)
    {
      uint64_t v9 = v13;
      goto LABEL_6;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

uint64_t sub_1007B4C2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v21 = type metadata accessor for DispatchQoS();
  uint64_t v19 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  id v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v12 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *(void *)(a2 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsConcurrentQueue);
  static DispatchWorkItemFlags.barrier.getter();
  uint64_t v15 = (void *)swift_allocObject();
  _OWORD v15[2] = a2;
  v15[3] = a3;
  v15[4] = a1;
  v15[5] = a4;
  v15[6] = a5;
  aBlock[4] = sub_1007B7D9C;
  uint64_t aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015D50F0;
  uint64_t v16 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1000BD0E8(a4);
  static DispatchQoS.unspecified.getter();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v11, v21);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v20);
  return swift_release();
}

uint64_t sub_1007B4EA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v92 = a4;
  uint64_t v93 = a5;
  uint64_t v91 = a3;
  uint64_t v65 = a2;
  uint64_t v90 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v96 = *(void *)(v90 - 8);
  __chkstk_darwin(v90);
  uint64_t v89 = (char *)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v88 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v88 - 8);
  __chkstk_darwin(v88);
  uint64_t v87 = (char *)&v64 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v86 = type metadata accessor for UUID();
  id v79 = *(void (***)(uint64_t, uint64_t))(v86 - 8);
  __chkstk_darwin(v86);
  uint64_t v85 = (char *)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v84 = type metadata accessor for BeaconObservation();
  uint64_t v10 = *(void *)(v84 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  uint64_t v12 = __chkstk_darwin(v84);
  uint64_t v83 = (uint64_t)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v68 = (uint64_t)&v64 - v14;
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v64 - v15;
  uint64_t v17 = type metadata accessor for DispatchPredicate();
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (uint64_t *)((char *)&v64 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v21 = *(void *)(a1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsMap);
  uint64_t v94 = a1;
  if (v21)
  {
    uint64_t v22 = v21;
  }
  else
  {
    uint64_t v95 = v7;
    uint64_t v23 = a1;
    uint64_t v24 = *(void **)(a1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsConcurrentQueue);
    *uint64_t v20 = v24;
    (*(void (**)(void *, void, uint64_t))(v18 + 104))(v20, enum case for DispatchPredicate.onQueue(_:), v17);
    id v25 = v24;
    char v26 = _dispatchPreconditionTest(_:)();
    uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v18 + 8))(v20, v17);
    if ((v26 & 1) == 0)
    {
      __break(1u);
      return result;
    }
    sub_1007B36B4(v23, aBlock);
    uint64_t v22 = aBlock[0];
    uint64_t v7 = v95;
  }
  uint64_t v29 = *(void *)(v65 + 16);
  if (v29)
  {
    uint64_t v82 = *(void *)(v94 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsConcurrentQueue);
    uint64_t v30 = *(unsigned __int8 *)(v10 + 80);
    uint64_t v31 = (v30 + 32) & ~v30;
    uint64_t v32 = v65 + v31;
    uint64_t v33 = *(void *)(v10 + 72);
    uint64_t v67 = v31 + 2 * v33;
    uint64_t v81 = v30 | 7;
    uint64_t v71 = v31;
    uint64_t v95 = v33;
    uint64_t v70 = v33 + v31;
    unsigned __int8 v80 = (void (**)(char *, char *, uint64_t))(v79 + 2);
    ++v79;
    uint64_t v78 = (v30 + 24) & ~v30;
    unint64_t v77 = (v11 + v78 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v76 = (v77 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v75 = v76 + 16;
    unint64_t v74 = v99;
    id v73 = (void (**)(char *, uint64_t))(v96 + 8);
    uint64_t v72 = (void (**)(char *, uint64_t))(v7 + 8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    long long v69 = xmmword_101342130;
    long long v66 = xmmword_101347BA0;
    do
    {
      sub_1001A2590(v32, (uint64_t)v16);
      if (*(void *)(v22 + 16) && (unint64_t v51 = sub_1007240CC((uint64_t)v16), (v52 & 1) != 0))
      {
        unint64_t v53 = *(void *)(*(void *)(v22 + 56) + 8 * v51);
        swift_bridgeObjectRetain();
      }
      else
      {
        unint64_t v53 = sub_10093FD40((uint64_t)_swiftEmptyArrayStorage);
      }
      char v54 = v16[*(int *)(v84 + 24)];
      uint64_t v55 = *(void *)(v53 + 16);
      uint64_t v96 = v29;
      if (v55
        && (unint64_t v56 = sub_1007243A4(v54), (v57 & 1) != 0)
        && (uint64_t v58 = *(void *)(*(void *)(v53 + 56) + 8 * v56), *(void *)(v58 + 16)))
      {
        uint64_t v59 = v71;
        uint64_t v60 = v68;
        sub_1001A2590(v58 + v71, v68);
        sub_10000588C(&qword_10163A778);
        uint64_t v61 = swift_allocObject();
        *(_OWORD *)(v61 + 16) = v66;
        sub_1001A2590((uint64_t)v16, v61 + v59);
        sub_1001A2590(v60, v61 + v59 + v95);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        aBlock[0] = v53;
        sub_10016CD58(v61, v54, isUniquelyReferenced_nonNull_native);
        uint64_t v36 = aBlock[0];
        swift_bridgeObjectRelease();
        sub_1001A2654(v60);
      }
      else
      {
        sub_10000588C(&qword_10163A778);
        uint64_t v34 = swift_allocObject();
        *(_OWORD *)(v34 + 16) = v69;
        sub_1001A2590((uint64_t)v16, v34 + v71);
        char v35 = swift_isUniquelyReferenced_nonNull_native();
        aBlock[0] = v53;
        sub_10016CD58(v34, v54, v35);
        uint64_t v36 = aBlock[0];
        swift_bridgeObjectRelease();
      }
      uint64_t v37 = (uint64_t)v85;
      uint64_t v38 = v86;
      (*v80)(v85, v16, v86);
      swift_bridgeObjectRetain();
      char v39 = swift_isUniquelyReferenced_nonNull_native();
      aBlock[0] = v22;
      sub_1001706BC(v36, v37, v39);
      uint64_t v22 = aBlock[0];
      swift_bridgeObjectRelease();
      (*v79)(v37, v38);
      uint64_t v40 = v83;
      sub_1001A2590((uint64_t)v16, v83);
      uint64_t v41 = swift_allocObject();
      *(void *)(v41 + 16) = v94;
      sub_1001A26B0(v40, v41 + v78);
      uint64_t v42 = (uint64_t)v16;
      uint64_t v43 = v92;
      *(void *)(v41 + v77) = v91;
      uint64_t v44 = (uint64_t *)(v41 + v76);
      uint64_t v45 = v93;
      *uint64_t v44 = v43;
      v44[1] = v45;
      v99[2] = sub_1007B7F00;
      v99[3] = v41;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256;
      v99[0] = sub_1004B5480;
      v99[1] = &unk_1015D5140;
      unint64_t v46 = _Block_copy(aBlock);
      swift_retain();
      swift_retain();
      sub_1000BD0E8(v43);
      id v47 = v87;
      static DispatchQoS.unspecified.getter();
      unint64_t v97 = _swiftEmptyArrayStorage;
      sub_1007B7CDC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000588C((uint64_t *)&unk_10163F350);
      sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
      uint64_t v49 = v89;
      uint64_t v48 = v90;
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v46);
      (*v73)(v49, v48);
      uint64_t v50 = v47;
      uint64_t v16 = (char *)v42;
      (*v72)(v50, v88);
      sub_1001A2654(v42);
      swift_release();
      swift_bridgeObjectRelease();
      v32 += v95;
      uint64_t v29 = v96 - 1;
    }
    while (v96 != 1);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  uint64_t v63 = swift_bridgeObjectRetain();
  sub_1007B7630(v63);
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_1007B5824(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = a3;
  v9[3] = a4;
  v9[4] = a5;
  swift_retain();
  sub_1000BD0E8(a4);
  sub_1007B58D0(a2, (uint64_t)sub_1007B7FE8, (uint64_t)v9);

  return swift_release();
}

uint64_t sub_1007B58D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v36 = a3;
  uint64_t v35 = a2;
  uint64_t v53 = a1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v31 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = type metadata accessor for DispatchQoS();
  uint64_t v37 = *(void *)(v54 - 8);
  __chkstk_darwin(v54);
  uint64_t v9 = (char *)v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for BeaconObservation();
  uint64_t v52 = *(void *)(v10 - 8);
  __chkstk_darwin(v10 - 8);
  uint64_t v50 = (uint64_t)v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = v11;
  uint64_t v49 = sub_10000588C(&qword_10163A798);
  uint64_t v12 = *(void *)(v49 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v49);
  uint64_t v33 = (char *)v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_10000588C(&qword_10164D9C0);
  OS_dispatch_queue.sync<A>(execute:)();
  uint64_t v14 = (char *)aBlock[2];
  uint64_t v34 = v3;
  if (v14)
  {
    uint64_t v15 = *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_subscriptionPublishQueue);
    uint64_t v16 = v12 + 16;
    unint64_t v46 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
    uint64_t v47 = v15;
    uint64_t v17 = *(unsigned __int8 *)(v12 + 80);
    uint64_t v18 = v9;
    v31[1] = aBlock;
    uint64_t v19 = (char *)aBlock + ((v17 + 32) & ~v17);
    uint64_t v44 = *(void *)(v16 + 56);
    uint64_t v45 = v17;
    uint64_t v43 = (v17 + 16) & ~v17;
    uint64_t v42 = v43 + v13;
    uint64_t v48 = v16;
    uint64_t v41 = (void (**)(uint64_t, char *, uint64_t))(v16 + 16);
    uint64_t v40 = &v58;
    uint64_t v32 = v5;
    char v39 = (void (**)(char *, uint64_t))(v5 + 8);
    uint64_t v38 = (void (**)(char *, uint64_t))(v37 + 8);
    uint64_t v20 = v33;
    do
    {
      uint64_t v21 = v49;
      v46(v20, v19, v49);
      uint64_t v22 = v50;
      sub_1001A2590(v53, v50);
      unint64_t v23 = (v42 + *(unsigned __int8 *)(v52 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80);
      uint64_t v24 = swift_allocObject();
      (*v41)(v24 + v43, v20, v21);
      sub_1001A26B0(v22, v24 + v23);
      uint64_t v60 = sub_1007B823C;
      uint64_t v61 = v24;
      long long aBlock = _NSConcreteStackBlock;
      uint64_t v57 = 1107296256;
      uint64_t v58 = sub_1004B5480;
      uint64_t v59 = &unk_1015D51B8;
      id v25 = _Block_copy(&aBlock);
      static DispatchQoS.unspecified.getter();
      uint64_t v55 = _swiftEmptyArrayStorage;
      sub_1007B7CDC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
      sub_10000588C((uint64_t *)&unk_10163F350);
      sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
      dispatch thunk of SetAlgebra.init<A>(_:)();
      OS_dispatch_queue.async(group:qos:flags:execute:)();
      _Block_release(v25);
      (*v39)(v7, v4);
      (*v38)(v18, v54);
      swift_release();
      v19 += v44;
      --v14;
    }
    while (v14);
    swift_bridgeObjectRelease();
    uint64_t v5 = v32;
    uint64_t v26 = v54;
    uint64_t v9 = v18;
    uint64_t v27 = v35;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v26 = v54;
    uint64_t v27 = v35;
  }
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = v27;
  *(void *)(v28 + 24) = v36;
  uint64_t v60 = sub_1000A14F4;
  uint64_t v61 = v28;
  long long aBlock = _NSConcreteStackBlock;
  uint64_t v57 = 1107296256;
  uint64_t v58 = sub_1004B5480;
  uint64_t v59 = &unk_1015D5208;
  uint64_t v29 = _Block_copy(&aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v55 = _swiftEmptyArrayStorage;
  sub_1007B7CDC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v29);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  (*(void (**)(char *, uint64_t))(v37 + 8))(v9, v26);
  return swift_release();
}

void sub_1007B6030(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = (void *)type metadata accessor for DispatchPredicate();
  uint64_t v6 = *(v5 - 1);
  __chkstk_darwin(v5);
  uint64_t v8 = (uint64_t *)((char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (*(void *)(a1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsMap))
  {
    uint64_t v9 = *(void *)(a1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsMap);
LABEL_6:
    swift_bridgeObjectRetain();
    uint64_t v12 = sub_1007B326C(v9);
    swift_bridgeObjectRelease();
    *a2 = v12;
    return;
  }
  uint64_t v10 = *(void **)(a1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsConcurrentQueue);
  void *v8 = v10;
  (*(void (**)(void *, void, void *))(v6 + 104))(v8, enum case for DispatchPredicate.onQueue(_:), v5);
  id v11 = v10;
  LOBYTE(v10) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, void *))(v6 + 8))(v8, v5);
  if (v10)
  {
    sub_1007B36B4(a1, &v14);
    if (!v2)
    {
      uint64_t v9 = v14;
      goto LABEL_6;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
}

void sub_1007B61D0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v57 = a3;
  uint64_t v58 = a4;
  uint64_t v7 = type metadata accessor for UUID();
  uint64_t v55 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v54 = (char *)&v50 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = (void *)type metadata accessor for DispatchPredicate();
  uint64_t v10 = *(v9 - 1);
  __chkstk_darwin(v9);
  uint64_t v12 = (uint64_t *)((char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(void *)(a1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsMap))
  {
    uint64_t v13 = *(void **)(a1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsConcurrentQueue);
    *uint64_t v12 = v13;
    (*(void (**)(void *, void, void *))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
    id v14 = v13;
    LOBYTE(v13) = _dispatchPreconditionTest(_:)();
    (*(void (**)(void *, void *))(v10 + 8))(v12, v9);
    if (v13)
    {
      sub_1007B36B4(a1, &v60);
      if (!v4)
      {
        uint64_t v9 = v60;
        goto LABEL_6;
      }
    }
    else
    {
LABEL_48:
      __break(1u);
LABEL_49:
      KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    __break(1u);
    return;
  }
  uint64_t v9 = *(void **)(a1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsMap);
LABEL_6:
  uint64_t v60 = v9;
  uint64_t v15 = v9[2];
  swift_bridgeObjectRetain();
  if (!v15) {
    goto LABEL_44;
  }
  swift_bridgeObjectRetain();
  unint64_t v16 = sub_1007240CC(a2);
  if ((v17 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_44;
  }
  uint64_t v50 = v7;
  uint64_t v51 = a2;
  uint64_t v52 = a1;
  uint64_t v18 = *(void *)(v9[7] + 8 * v16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v56 = sub_10093FD40((uint64_t)_swiftEmptyArrayStorage);
  int64_t v19 = 0;
  uint64_t v20 = v18 + 64;
  uint64_t v21 = 1 << *(unsigned char *)(v18 + 32);
  uint64_t v22 = -1;
  if (v21 < 64) {
    uint64_t v22 = ~(-1 << v21);
  }
  unint64_t v23 = v22 & *(void *)(v18 + 64);
  int64_t v24 = (unint64_t)(v21 + 63) >> 6;
  if (!v23) {
    goto LABEL_14;
  }
LABEL_11:
  unint64_t v25 = __clz(__rbit64(v23));
  v23 &= v23 - 1;
  for (unint64_t i = v25 | (v19 << 6); ; unint64_t i = __clz(__rbit64(v30)) + (v19 << 6))
  {
    char v27 = *(unsigned char *)(*(void *)(v18 + 48) + i);
    uint64_t v28 = swift_bridgeObjectRetain();
    uint64_t v9 = sub_1007B7430(v28, v57);
    swift_bridgeObjectRelease();
    if (v9[2])
    {
      uint64_t v32 = (void *)v56;
      LODWORD(v53) = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v59 = v32;
      unint64_t v34 = sub_1007243A4(v27);
      uint64_t v35 = v32[2];
      BOOL v36 = (v33 & 1) == 0;
      uint64_t v37 = v35 + v36;
      if (__OFADD__(v35, v36)) {
        goto LABEL_47;
      }
      if (v32[3] >= v37)
      {
        if ((v53 & 1) == 0)
        {
          LODWORD(v56) = v33;
          unint64_t v53 = v34;
          sub_100E7F960();
          unint64_t v34 = v53;
          LOBYTE(v33) = v56;
        }
      }
      else
      {
        LODWORD(v56) = v33;
        sub_100E67D24(v37, v53);
        unint64_t v38 = sub_1007243A4(v27);
        int v39 = v33 & 1;
        LOBYTE(v33) = v56;
        if ((v56 & 1) != v39) {
          goto LABEL_49;
        }
        unint64_t v34 = v38;
      }
      unint64_t v56 = (unint64_t)v59;
      if (v33)
      {
        uint64_t v40 = v59[7];
        uint64_t v41 = 8 * v34;
        swift_bridgeObjectRelease();
        *(void *)(v40 + v41) = v9;
      }
      else
      {
        sub_100E7C570(v34, v27, (uint64_t)v9, v59);
      }
      swift_bridgeObjectRelease();
      if (v23) {
        goto LABEL_11;
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      if (v23) {
        goto LABEL_11;
      }
    }
LABEL_14:
    if (__OFADD__(v19++, 1))
    {
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
    if (v19 >= v24) {
      goto LABEL_41;
    }
    unint64_t v30 = *(void *)(v20 + 8 * v19);
    if (!v30) {
      break;
    }
LABEL_24:
    unint64_t v23 = (v30 - 1) & v30;
  }
  int64_t v31 = v19 + 1;
  if (v19 + 1 >= v24) {
    goto LABEL_41;
  }
  unint64_t v30 = *(void *)(v20 + 8 * v31);
  if (v30) {
    goto LABEL_23;
  }
  int64_t v31 = v19 + 2;
  if (v19 + 2 >= v24) {
    goto LABEL_41;
  }
  unint64_t v30 = *(void *)(v20 + 8 * v31);
  if (v30)
  {
LABEL_23:
    int64_t v19 = v31;
    goto LABEL_24;
  }
  int64_t v31 = v19 + 3;
  if (v19 + 3 < v24)
  {
    unint64_t v30 = *(void *)(v20 + 8 * v31);
    if (!v30)
    {
      while (1)
      {
        int64_t v19 = v31 + 1;
        if (__OFADD__(v31, 1)) {
          goto LABEL_46;
        }
        if (v19 >= v24) {
          goto LABEL_41;
        }
        unint64_t v30 = *(void *)(v20 + 8 * v19);
        ++v31;
        if (v30) {
          goto LABEL_24;
        }
      }
    }
    goto LABEL_23;
  }
LABEL_41:
  uint64_t v43 = (uint64_t)v54;
  uint64_t v42 = v55;
  swift_release();
  uint64_t v45 = v50;
  uint64_t v44 = v51;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 16))(v43, v51, v50);
  uint64_t v46 = v56;
  swift_bridgeObjectRetain();
  uint64_t v47 = v60;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v59 = v47;
  uint64_t v60 = (void *)0x8000000000000000;
  sub_1001706BC(v46, v43, isUniquelyReferenced_nonNull_native);
  uint64_t v60 = v59;
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v43, v45);
  uint64_t v49 = *(void *)(v46 + 16);
  swift_bridgeObjectRelease();
  if (!v49)
  {
    sub_100164D58(v44);
    swift_bridgeObjectRelease();
  }
  sub_1007B7630((uint64_t)v60);
LABEL_44:
  swift_bridgeObjectRelease();
}

uint64_t sub_1007B6724(uint64_t a1, uint64_t a2)
{
  sub_10000588C(&qword_10163A798);
  Subscription.subscriber.getter();
  uint64_t v3 = v7;
  uint64_t v4 = v8;
  sub_10001CD44(v6, v7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 8))(a2, v3, v4);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((uint64_t)v6);
}

uint64_t sub_1007B67A8()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsURL;
  uint64_t v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  swift_release();
  uint64_t v3 = v0 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_transactionManager;
  uint64_t v4 = type metadata accessor for PressuredExitTransactionManager();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1007B68B0()
{
  sub_1007B67A8();

  return swift_deallocClassInstance();
}

uint64_t sub_1007B6908()
{
  return type metadata accessor for BeaconObservationStore();
}

uint64_t type metadata accessor for BeaconObservationStore()
{
  uint64_t result = qword_10164D8B8;
  if (!qword_10164D8B8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1007B695C()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for PressuredExitTransactionManager();
    if (v2 <= 0x3F) {
      return swift_updateClassMetadata2();
    }
  }
  return result;
}

uint64_t sub_1007B6A58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_10000588C(&qword_10163A798);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v17[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0) - 8];
  sub_10001D010(a1, (uint64_t)v17);
  swift_allocObject();
  swift_weakInit();
  sub_10000588C(&qword_10164D9B0);
  Subscription.init(subscriber:unsubscribeBlock:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a3, v6);
  uint64_t v10 = (unint64_t *)(a2 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_subscriptions);
  swift_beginAccess();
  unint64_t v11 = *v10;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v10 = v11;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v11 = sub_100A7171C(0, *(void *)(v11 + 16) + 1, 1, v11);
    *uint64_t v10 = v11;
  }
  unint64_t v14 = *(void *)(v11 + 16);
  unint64_t v13 = *(void *)(v11 + 24);
  if (v14 >= v13 >> 1)
  {
    unint64_t v11 = sub_100A7171C(v13 > 1, v14 + 1, 1, v11);
    *uint64_t v10 = v11;
  }
  *(void *)(v11 + 16) = v14 + 1;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v11+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(void *)(v7 + 72) * v14, v9, v6);
  return swift_endAccess();
}

uint64_t sub_1007B6C70(uint64_t a1)
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    sub_1007B6CE4(a1);
    return swift_release();
  }
  return result;
}

uint64_t sub_1007B6CE4(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v19 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v17 = *(void *)(v6 - 8);
  uint64_t v18 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = sub_10000588C(&qword_10163A798);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9);
  v16[1] = *(void *)(v1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_subscriptionQueue);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))((char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v9);
  unint64_t v12 = (*(unsigned __int8 *)(v10 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = v1;
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v13 + v12, (char *)v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0), v9);
  aBlock[4] = sub_1007B7C74;
  uint64_t aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256;
  void aBlock[2] = sub_1004B5480;
  aBlock[3] = &unk_1015D50A0;
  unint64_t v14 = _Block_copy(aBlock);
  swift_retain();
  static DispatchQoS.unspecified.getter();
  uint64_t v20 = _swiftEmptyArrayStorage;
  sub_1007B7CDC((unint64_t *)&qword_10163B7E0, (void (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags);
  sub_10000588C((uint64_t *)&unk_10163F350);
  sub_100062734((unint64_t *)&qword_10163B7F0, (uint64_t *)&unk_10163F350);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  OS_dispatch_queue.async(group:qos:flags:execute:)();
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v8, v18);
  return swift_release();
}

uint64_t sub_1007B7074(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)(a1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_subscriptions);
  swift_beginAccess();
  uint64_t v4 = *v3;
  v6[2] = a2;
  swift_bridgeObjectRetain();
  *uint64_t v3 = sub_1000A4B10((uint64_t (*)(char *))sub_1007B7D24, (uint64_t)v6, v4);
  return swift_bridgeObjectRelease();
}

BOOL sub_1007B7108()
{
  return (dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0;
}

uint64_t sub_1007B719C()
{
  return swift_bridgeObjectRetain();
}

uint64_t sub_1007B71EC(uint64_t a1)
{
  uint64_t v3 = (void *)(*v1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_subscriptions);
  swift_beginAccess();
  *uint64_t v3 = a1;
  return swift_bridgeObjectRelease();
}

uint64_t (*sub_1007B7244())()
{
  return j__swift_endAccess_0;
}

uint64_t sub_1007B72A4()
{
  return OS_dispatch_queue.sync<A>(execute:)();
}

uint64_t sub_1007B731C()
{
  sub_10001D4B0(0, (unint64_t *)&qword_10163AE70);
  uint64_t result = OS_os_log.init(subsystem:category:)();
  qword_10170E350 = result;
  return result;
}

uint64_t sub_1007B7394()
{
  swift_weakDestroy();

  return _swift_deallocObject(v0, 24, 7);
}

uint64_t sub_1007B73CC(char *a1)
{
  return sub_1007B43F0(a1);
}

uint64_t sub_1007B73D4()
{
  swift_release();

  return _swift_deallocObject(v0, 25, 7);
}

uint64_t sub_1007B740C()
{
  return sub_1007B4688(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
}

uint64_t sub_1007B7418(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t sub_1007B7428()
{
  return swift_release();
}

void *sub_1007B7430(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v5 = type metadata accessor for BeaconObservation() - 8;
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v22 - v10;
  uint64_t result = _swiftEmptyArrayStorage;
  uint64_t v26 = _swiftEmptyArrayStorage;
  uint64_t v13 = *(void *)(a1 + 16);
  if (v13)
  {
    uint64_t v22 = v2;
    uint64_t v14 = *(unsigned __int8 *)(v9 + 80);
    uint64_t v15 = *(void *)(v9 + 72);
    uint64_t v24 = (v14 + 32) & ~v14;
    uint64_t v16 = a1 + v24;
    uint64_t v17 = v15;
    uint64_t v18 = _swiftEmptyArrayStorage;
    unint64_t v25 = a2;
    uint64_t v23 = v15;
    do
    {
      sub_1001A2590(v16, (uint64_t)v11);
      if (a2(v11))
      {
        sub_1001A2654((uint64_t)v11);
      }
      else
      {
        sub_1001A26B0((uint64_t)v11, (uint64_t)v8);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          sub_1000B77F0(0, v18[2] + 1, 1);
        }
        uint64_t v18 = v26;
        unint64_t v20 = v26[2];
        unint64_t v19 = v26[3];
        if (v20 >= v19 >> 1)
        {
          sub_1000B77F0(v19 > 1, v20 + 1, 1);
          uint64_t v18 = v26;
        }
        uint64_t v18[2] = v20 + 1;
        uint64_t v21 = (uint64_t)v18 + v24 + v20 * v23;
        uint64_t v17 = v23;
        sub_1001A26B0((uint64_t)v8, v21);
        a2 = v25;
      }
      v16 += v17;
      --v13;
    }
    while (v13);
    return v26;
  }
  return result;
}

void sub_1007B7630(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchPredicate();
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (uint64_t *)((char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (*(void *)(v1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsMap))
  {
    *(void *)(v1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsMap) = a1;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  uint64_t v7 = *(void **)(v1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsConcurrentQueue);
  *uint64_t v6 = v7;
  (*(void (**)(void *, void, uint64_t))(v4 + 104))(v6, enum case for DispatchPredicate.onQueue(_:), v3);
  id v8 = v7;
  LOBYTE(v7) = _dispatchPreconditionTest(_:)();
  (*(void (**)(void *, uint64_t))(v4 + 8))(v6, v3);
  if (v7)
  {
    sub_1007B3A88(v1, a1);
  }
  else
  {
    __break(1u);
  }
}

unint64_t sub_1007B778C()
{
  unint64_t result = qword_10164D980;
  if (!qword_10164D980)
  {
    sub_10000592C(&qword_101655540);
    sub_1007B7CDC(&qword_10163B040, (void (*)(uint64_t))&type metadata accessor for UUID);
    sub_1007B7838();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164D980);
  }
  return result;
}

unint64_t sub_1007B7838()
{
  unint64_t result = qword_10164D988;
  if (!qword_10164D988)
  {
    sub_10000592C(&qword_10163A0F8);
    sub_1007B78EC();
    sub_1007B7AF4((unint64_t *)&qword_101647F18, &qword_101647F20);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164D988);
  }
  return result;
}

unint64_t sub_1007B78EC()
{
  unint64_t result = qword_10164D990;
  if (!qword_10164D990)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164D990);
  }
  return result;
}

unint64_t sub_1007B7940()
{
  unint64_t result = qword_10164D998;
  if (!qword_10164D998)
  {
    sub_10000592C(&qword_101655540);
    sub_1007B7CDC((unint64_t *)&qword_10163B010, (void (*)(uint64_t))&type metadata accessor for UUID);
    sub_1007B79EC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164D998);
  }
  return result;
}

unint64_t sub_1007B79EC()
{
  unint64_t result = qword_10164D9A0;
  if (!qword_10164D9A0)
  {
    sub_10000592C(&qword_10163A0F8);
    sub_1007B7AA0();
    sub_1007B7AF4((unint64_t *)&qword_101648E30, &qword_101648E38);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164D9A0);
  }
  return result;
}

unint64_t sub_1007B7AA0()
{
  unint64_t result = qword_10164D9A8;
  if (!qword_10164D9A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_10164D9A8);
  }
  return result;
}

uint64_t sub_1007B7AF4(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_10000592C(&qword_101657CE0);
    sub_1007B7CDC(a2, (void (*)(uint64_t))type metadata accessor for BeaconObservation);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1007B7B88(uint64_t a1)
{
  return sub_1007B6C70(a1);
}

uint64_t sub_1007B7BA4()
{
  uint64_t v1 = sub_10000588C(&qword_10163A798);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);

  return _swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1007B7C74()
{
  uint64_t v1 = *(void *)(sub_10000588C(&qword_10163A798) - 8);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return sub_1007B7074(v2, v3);
}

uint64_t sub_1007B7CDC(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

BOOL sub_1007B7D24()
{
  return sub_1007B7108();
}

uint64_t sub_1007B7D44()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  if (*(void *)(v0 + 40)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 56, 7);
}

uint64_t sub_1007B7D9C()
{
  return sub_1007B4EA4(v0[2], v0[3], v0[4], v0[5], v0[6]);
}

uint64_t sub_1007B7DAC()
{
  uint64_t v1 = (int *)(type metadata accessor for BeaconObservation() - 8);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  unint64_t v4 = (((*(void *)(*(void *)v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  uint64_t v5 = v0 + v3;
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = v5 + v1[7];
  uint64_t v8 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  swift_release();
  if (*(void *)(v0 + v4)) {
    swift_release();
  }

  return _swift_deallocObject(v0, v4 + 16, v2 | 7);
}

uint64_t sub_1007B7F00()
{
  uint64_t v1 = *(void *)(type metadata accessor for BeaconObservation() - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = v0 + v2;
  uint64_t v6 = *(void *)(v0 + v3);
  uint64_t v7 = (uint64_t *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];

  return sub_1007B5824(v4, v5, v6, v8, v9);
}

uint64_t sub_1007B7FA0()
{
  swift_release();
  if (*(void *)(v0 + 24)) {
    swift_release();
  }

  return _swift_deallocObject(v0, 40, 7);
}

void sub_1007B7FE8()
{
  uint64_t v1 = *(void (**)(void))(v0 + 24);
  Transaction.capture()();
  if (v1) {
    v1();
  }
}

uint64_t sub_1007B802C@<X0>(void *a1@<X8>)
{
  unint64_t v3 = (void *)(v1 + OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_subscriptions);
  swift_beginAccess();
  *a1 = *v3;
  return swift_bridgeObjectRetain();
}

uint64_t sub_1007B8090()
{
  uint64_t v1 = sub_10000588C(&qword_10163A798);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = (int *)(type metadata accessor for BeaconObservation() - 8);
  uint64_t v7 = *(unsigned __int8 *)(*(void *)v6 + 80);
  uint64_t v8 = (v4 + v5 + v7) & ~v7;
  uint64_t v9 = v8 + *(void *)(*(void *)v6 + 64);
  uint64_t v10 = v3 | v7 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  uint64_t v11 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v0 + v8, v11);
  uint64_t v12 = v0 + v8 + v6[7];
  uint64_t v13 = type metadata accessor for Date();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v12, v13);

  return _swift_deallocObject(v0, v9, v10);
}

uint64_t sub_1007B823C()
{
  uint64_t v1 = *(void *)(sub_10000588C(&qword_10163A798) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(type metadata accessor for BeaconObservation() - 8);
  uint64_t v5 = v0 + ((v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return sub_1007B6724(v0 + v2, v5);
}

uint64_t sub_1007B830C()
{
  swift_release();

  return _swift_deallocObject(v0, 32, 7);
}

uint64_t sub_1007B8344(uint64_t a1)
{
  uint64_t v2 = sub_10000588C(&qword_10164D9C8);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1007B83CC()
{
  uint64_t v0 = type metadata accessor for Logger();
  sub_10001E384(v0, qword_10170E378);
  uint64_t v1 = sub_100010324(v0, (uint64_t)qword_10170E378);
  if (qword_101636B18 != -1) {
    swift_once();
  }
  uint64_t v2 = sub_100010324(v0, (uint64_t)qword_10170DED0);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);

  return v3(v1, v2, v0);
}

uint64_t sub_1007B8494(uint64_t a1, uint64_t a2)
{
  v3[17] = a2;
  v3[18] = v2;
  v3[16] = a1;
  uint64_t v4 = type metadata accessor for UUID();
  v3[19] = v4;
  v3[20] = *(void *)(v4 - 8);
  v3[21] = swift_task_alloc();
  sub_10000588C(&qword_101641FB0);
  v3[22] = swift_task_alloc();
  uint64_t v5 = type metadata accessor for DelegatedBeaconMetadata(0);
  v3[23] = v5;
  v3[24] = *(void *)(v5 - 8);
  v3[25] = swift_task_alloc();
  return _swift_task_switch(sub_1007B85E4, v2, 0);
}

uint64_t sub_1007B85E4()
{
  uint64_t v1 = qword_1016375E8;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_1000977C4((uint64_t)&xmmword_10166E8F0, v0 + 56);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_1016390D8 + dword_1016390D8);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 208) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_1007B872C;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t sub_1007B872C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 144);
  *(void *)(*(void *)v1 + 216) = a1;
  swift_task_dealloc();
  return _swift_task_switch(sub_1007B8844, v2, 0);
}

uint64_t sub_1007B8844()
{
  uint64_t v1 = *(void *)(v0 + 216);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 16);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 216);
    return _swift_task_switch(sub_1007B8950, v2, 0);
  }
  else
  {
    sub_10001CEC8();
    swift_allocError();
    *uint64_t v3 = 0xD000000000000010;
    v3[1] = 0x80000001013F23D0;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = *(uint64_t (**)(void))(v0 + 8);
    return v4();
  }
}

uint64_t sub_1007B8950()
{
  *(void *)(v0 + 224) = *(void *)(*(void *)(v0 + 216) + 136);
  swift_retain();
  return _swift_task_switch(sub_1007B89C4, 0, 0);
}

uint64_t sub_1007B89C4()
{
  uint64_t v2 = v0[27];
  uint64_t v1 = v0[28];
  uint64_t v3 = (void *)swift_task_alloc();
  v0[29] = v3;
  v3[2] = v1;
  v3[3] = sub_10001DAA0;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc();
  v0[30] = v4;
  uint64_t v5 = type metadata accessor for BeaconKeyManager(0);
  *uint64_t v4 = v0;
  v4[1] = sub_1007B8AD8;
  return withCheckedContinuation<A>(isolation:function:_:)(v0 + 15, 0, 0, 0xD000000000000012, 0x80000001013F1870, sub_10001DD1C, v3, v5);
}

uint64_t sub_1007B8AD8()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 144);
  swift_task_dealloc();
  swift_release();
  swift_task_dealloc();
  *(void *)(v1 + 248) = *(void *)(v1 + 120);
  return _swift_task_switch(sub_1007B8C48, v2, 0);
}

uint64_t sub_1007B8C48()
{
  v0[32] = *(void *)(v0[31] + OBJC_IVAR____TtC12searchpartyd16BeaconKeyManager_keyStore);
  swift_retain();
  swift_release();
  uint64_t v1 = (void *)swift_task_alloc();
  v0[33] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1007B8D0C;
  uint64_t v2 = v0[22];
  uint64_t v3 = v0[17];
  return sub_10064EF3C(v2, v3);
}

uint64_t sub_1007B8D0C()
{
  uint64_t v2 = *v1;
  *(void *)(*v1 + 272) = v0;
  swift_task_dealloc();
  if (v0)
  {
    uint64_t v3 = *(void *)(v2 + 144);
    uint64_t v4 = sub_1007B9004;
  }
  else
  {
    uint64_t v5 = *(void *)(v2 + 144);
    swift_release();
    uint64_t v4 = sub_1007B8E34;
    uint64_t v3 = v5;
  }
  return _swift_task_switch(v4, v3, 0);
}

uint64_t sub_1007B8E34()
{
  uint64_t v1 = v0[23];
  uint64_t v2 = v0[22];
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0[24] + 48))(v2, 1, v1) == 1)
  {
    sub_1007BAB14(v2);
    sub_100130078();
    swift_allocError();
    *uint64_t v3 = 21;
    swift_willThrow();
    swift_release();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
  }
  else
  {
    uint64_t v5 = v0[25];
    uint64_t v7 = v0[20];
    uint64_t v6 = v0[21];
    uint64_t v8 = v0[19];
    uint64_t v10 = v0[16];
    uint64_t v9 = v0[17];
    swift_release();
    sub_1007BAB74(v2, v5);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v9, v8);
    uint64_t v11 = v5 + *(int *)(v1 + 20);
    uint64_t v12 = *(void *)v11;
    int v13 = *(unsigned __int8 *)(v11 + 8);
    sub_1007BABD8(v5, type metadata accessor for DelegatedBeaconMetadata);
    if (v13) {
      uint64_t v12 = 0;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v10, v6, v8);
    *(void *)(v10 + *(int *)(type metadata accessor for DelegatedShareMeta() + 20)) = v12;
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    uint64_t v4 = (uint64_t (*)(void))v0[1];
  }
  return v4();
}

uint64_t sub_1007B9004()
{
  swift_release();
  swift_release();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

uint64_t sub_1007B9098(uint64_t a1)
{
  v2[22] = a1;
  v2[23] = v1;
  uint64_t v3 = type metadata accessor for UUID();
  unsigned char v2[24] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[25] = v4;
  v2[26] = *(void *)(v4 + 64);
  v2[27] = swift_task_alloc();
  v2[28] = type metadata accessor for KeyDropDelegatedShareMetadataResponse(0);
  v2[29] = swift_task_alloc();
  v2[30] = swift_task_alloc();
  v2[31] = swift_task_alloc();
  v2[32] = swift_task_alloc();
  v2[33] = swift_task_alloc();
  type metadata accessor for KeyDropJoinToken(0);
  v2[34] = swift_task_alloc();
  return _swift_task_switch(sub_1007B91F0, v1, 0);
}

uint64_t sub_1007B91F0()
{
  uint64_t v1 = qword_1016375E8;
  swift_retain();
  if (v1 != -1) {
    swift_once();
  }
  swift_beginAccess();
  uint64_t result = sub_1000977C4((uint64_t)&xmmword_10166E8F0, v0 + 56);
  if (*(void *)(v0 + 80))
  {
    sub_10001CEB0((long long *)(v0 + 56), v0 + 16);
    swift_release();
    sub_10001CD44((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_1016390D8 + dword_1016390D8);
    uint64_t v3 = (void *)swift_task_alloc();
    *(void *)(v0 + 280) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_1007B9338;
    return v4();
  }
  else
  {
    __break(1u);
  }
  return result;
}